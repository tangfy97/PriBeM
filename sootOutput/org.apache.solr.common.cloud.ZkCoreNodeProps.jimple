public class org.apache.solr.common.cloud.ZkCoreNodeProps extends java.lang.Object
{
    private org.apache.solr.common.cloud.ZkNodeProps nodeProps;

    public void <init>(org.apache.solr.common.cloud.ZkNodeProps)
    {
        org.apache.solr.common.cloud.ZkCoreNodeProps r0;
        org.apache.solr.common.cloud.ZkNodeProps r1;

        r0 := @this: org.apache.solr.common.cloud.ZkCoreNodeProps;

        r1 := @parameter0: org.apache.solr.common.cloud.ZkNodeProps;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.solr.common.cloud.ZkCoreNodeProps: org.apache.solr.common.cloud.ZkNodeProps nodeProps> = r1;

        return;
    }

    public java.lang.String getCoreUrl()
    {
        org.apache.solr.common.cloud.ZkCoreNodeProps r0;
        java.lang.String $r2, $r4, $r5;
        org.apache.solr.common.cloud.ZkNodeProps $r1, $r3;

        r0 := @this: org.apache.solr.common.cloud.ZkCoreNodeProps;

        $r1 = r0.<org.apache.solr.common.cloud.ZkCoreNodeProps: org.apache.solr.common.cloud.ZkNodeProps nodeProps>;

        $r2 = virtualinvoke $r1.<org.apache.solr.common.cloud.ZkNodeProps: java.lang.String getStr(java.lang.String)>("base_url");

        $r3 = r0.<org.apache.solr.common.cloud.ZkCoreNodeProps: org.apache.solr.common.cloud.ZkNodeProps nodeProps>;

        $r4 = virtualinvoke $r3.<org.apache.solr.common.cloud.ZkNodeProps: java.lang.String getStr(java.lang.String)>("core");

        $r5 = staticinvoke <org.apache.solr.common.cloud.ZkCoreNodeProps: java.lang.String getCoreUrl(java.lang.String,java.lang.String)>($r2, $r4);

        return $r5;
    }

    public java.lang.String getNodeName()
    {
        java.lang.String $r2;
        org.apache.solr.common.cloud.ZkCoreNodeProps r0;
        org.apache.solr.common.cloud.ZkNodeProps $r1;

        r0 := @this: org.apache.solr.common.cloud.ZkCoreNodeProps;

        $r1 = r0.<org.apache.solr.common.cloud.ZkCoreNodeProps: org.apache.solr.common.cloud.ZkNodeProps nodeProps>;

        $r2 = virtualinvoke $r1.<org.apache.solr.common.cloud.ZkNodeProps: java.lang.String getStr(java.lang.String)>("node_name");

        return $r2;
    }

    public java.lang.String getState()
    {
        java.lang.String $r2;
        org.apache.solr.common.cloud.ZkCoreNodeProps r0;
        org.apache.solr.common.cloud.ZkNodeProps $r1;

        r0 := @this: org.apache.solr.common.cloud.ZkCoreNodeProps;

        $r1 = r0.<org.apache.solr.common.cloud.ZkCoreNodeProps: org.apache.solr.common.cloud.ZkNodeProps nodeProps>;

        $r2 = virtualinvoke $r1.<org.apache.solr.common.cloud.ZkNodeProps: java.lang.String getStr(java.lang.String)>("state");

        return $r2;
    }

    public java.lang.String getBaseUrl()
    {
        java.lang.String $r2;
        org.apache.solr.common.cloud.ZkCoreNodeProps r0;
        org.apache.solr.common.cloud.ZkNodeProps $r1;

        r0 := @this: org.apache.solr.common.cloud.ZkCoreNodeProps;

        $r1 = r0.<org.apache.solr.common.cloud.ZkCoreNodeProps: org.apache.solr.common.cloud.ZkNodeProps nodeProps>;

        $r2 = virtualinvoke $r1.<org.apache.solr.common.cloud.ZkNodeProps: java.lang.String getStr(java.lang.String)>("base_url");

        return $r2;
    }

    public java.lang.String getCoreName()
    {
        java.lang.String $r2;
        org.apache.solr.common.cloud.ZkCoreNodeProps r0;
        org.apache.solr.common.cloud.ZkNodeProps $r1;

        r0 := @this: org.apache.solr.common.cloud.ZkCoreNodeProps;

        $r1 = r0.<org.apache.solr.common.cloud.ZkCoreNodeProps: org.apache.solr.common.cloud.ZkNodeProps nodeProps>;

        $r2 = virtualinvoke $r1.<org.apache.solr.common.cloud.ZkNodeProps: java.lang.String getStr(java.lang.String)>("core");

        return $r2;
    }

    public static java.lang.String getCoreUrl(org.apache.solr.common.cloud.ZkNodeProps)
    {
        java.lang.String $r1, $r2, $r3;
        org.apache.solr.common.cloud.ZkNodeProps r0;

        r0 := @parameter0: org.apache.solr.common.cloud.ZkNodeProps;

        $r1 = virtualinvoke r0.<org.apache.solr.common.cloud.ZkNodeProps: java.lang.String getStr(java.lang.String)>("base_url");

        $r2 = virtualinvoke r0.<org.apache.solr.common.cloud.ZkNodeProps: java.lang.String getStr(java.lang.String)>("core");

        $r3 = staticinvoke <org.apache.solr.common.cloud.ZkCoreNodeProps: java.lang.String getCoreUrl(java.lang.String,java.lang.String)>($r1, $r2);

        return $r3;
    }

    public static java.lang.String getCoreUrl(java.lang.String, java.lang.String)
    {
        int $i0, $i1;
        java.lang.StringBuilder $r0;
        java.lang.String r1, r2, $r3, $r4;
        boolean $z0, $z1;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $z0 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>("/");

        if $z0 != 0 goto label1;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

     label1:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $i0 = virtualinvoke $r0.<java.lang.StringBuilder: int length()>();

        $i1 = $i0 - 1;

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String substring(int)>($i1);

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("/");

        if $z1 != 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

     label2:
        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public java.lang.String toString()
    {
        java.lang.String $r2;
        org.apache.solr.common.cloud.ZkCoreNodeProps r0;
        org.apache.solr.common.cloud.ZkNodeProps $r1;

        r0 := @this: org.apache.solr.common.cloud.ZkCoreNodeProps;

        $r1 = r0.<org.apache.solr.common.cloud.ZkCoreNodeProps: org.apache.solr.common.cloud.ZkNodeProps nodeProps>;

        $r2 = virtualinvoke $r1.<org.apache.solr.common.cloud.ZkNodeProps: java.lang.String toString()>();

        return $r2;
    }

    public org.apache.solr.common.cloud.ZkNodeProps getNodeProps()
    {
        org.apache.solr.common.cloud.ZkCoreNodeProps r0;
        org.apache.solr.common.cloud.ZkNodeProps $r1;

        r0 := @this: org.apache.solr.common.cloud.ZkCoreNodeProps;

        $r1 = r0.<org.apache.solr.common.cloud.ZkCoreNodeProps: org.apache.solr.common.cloud.ZkNodeProps nodeProps>;

        return $r1;
    }

    public boolean isLeader()
    {
        org.apache.solr.common.cloud.ZkCoreNodeProps r0;
        org.apache.solr.common.cloud.ZkNodeProps $r1;
        boolean $z0;

        r0 := @this: org.apache.solr.common.cloud.ZkCoreNodeProps;

        $r1 = r0.<org.apache.solr.common.cloud.ZkCoreNodeProps: org.apache.solr.common.cloud.ZkNodeProps nodeProps>;

        $z0 = virtualinvoke $r1.<org.apache.solr.common.cloud.ZkNodeProps: boolean containsKey(java.lang.String)>("leader");

        return $z0;
    }
}
