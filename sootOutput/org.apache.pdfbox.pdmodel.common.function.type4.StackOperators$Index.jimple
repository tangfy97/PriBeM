class org.apache.pdfbox.pdmodel.common.function.type4.StackOperators$Index extends java.lang.Object implements org.apache.pdfbox.pdmodel.common.function.type4.Operator
{

    void <init>()
    {
        org.apache.pdfbox.pdmodel.common.function.type4.StackOperators$Index r0;

        r0 := @this: org.apache.pdfbox.pdmodel.common.function.type4.StackOperators$Index;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)
    {
        org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext r0;
        java.lang.IllegalArgumentException $r5;
        java.util.Stack $r1;
        org.apache.pdfbox.pdmodel.common.function.type4.StackOperators$Index r10;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r2, $r4;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;
        java.lang.Number $r3;

        r10 := @this: org.apache.pdfbox.pdmodel.common.function.type4.StackOperators$Index;

        r0 := @parameter0: org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext;

        $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: java.util.Stack getStack()>();

        $r2 = virtualinvoke $r1.<java.util.Stack: java.lang.Object pop()>();

        $r3 = (java.lang.Number) $r2;

        $i0 = virtualinvoke $r3.<java.lang.Number: int intValue()>();

        if $i0 >= 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("rangecheck: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label1:
        $i1 = virtualinvoke $r1.<java.util.Stack: int size()>();

        $i2 = $i1 - $i0;

        $i3 = $i2 - 1;

        $r4 = virtualinvoke $r1.<java.util.Stack: java.lang.Object get(int)>($i3);

        virtualinvoke $r1.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r4);

        return;
    }
}
