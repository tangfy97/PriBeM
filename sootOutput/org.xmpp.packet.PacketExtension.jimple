public class org.xmpp.packet.PacketExtension extends java.lang.Object
{
    protected static org.dom4j.DocumentFactory docFactory;
    protected static java.util.Map registeredExtensions;
    protected org.dom4j.Element element;

    public static java.lang.Class getExtensionClass(java.lang.String, java.lang.String)
    {
        java.util.Map $r2;
        org.dom4j.QName $r3;
        java.lang.Object $r4;
        java.lang.Class $r5;
        java.lang.String r0, r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = <org.xmpp.packet.PacketExtension: java.util.Map registeredExtensions>;

        $r3 = staticinvoke <org.dom4j.QName: org.dom4j.QName get(java.lang.String,java.lang.String)>(r0, r1);

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        $r5 = (java.lang.Class) $r4;

        return $r5;
    }

    public void <init>(java.lang.String, java.lang.String)
    {
        org.xmpp.packet.PacketExtension r0;
        org.dom4j.Document $r2;
        org.dom4j.Element $r5;
        java.lang.String r3, r4;
        org.dom4j.DocumentFactory $r1;

        r0 := @this: org.xmpp.packet.PacketExtension;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <org.xmpp.packet.PacketExtension: org.dom4j.DocumentFactory docFactory>;

        $r2 = virtualinvoke $r1.<org.dom4j.DocumentFactory: org.dom4j.Document createDocument()>();

        $r5 = interfaceinvoke $r2.<org.dom4j.Document: org.dom4j.Element addElement(java.lang.String,java.lang.String)>(r3, r4);

        r0.<org.xmpp.packet.PacketExtension: org.dom4j.Element element> = $r5;

        return;
    }

    public void <init>(org.dom4j.Element)
    {
        org.xmpp.packet.PacketExtension r0;
        org.dom4j.Element r1;

        r0 := @this: org.xmpp.packet.PacketExtension;

        r1 := @parameter0: org.dom4j.Element;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.xmpp.packet.PacketExtension: org.dom4j.Element element> = r1;

        return;
    }

    public org.dom4j.Element getElement()
    {
        org.xmpp.packet.PacketExtension r0;
        org.dom4j.Element $r1;

        r0 := @this: org.xmpp.packet.PacketExtension;

        $r1 = r0.<org.xmpp.packet.PacketExtension: org.dom4j.Element element>;

        return $r1;
    }

    public org.xmpp.packet.PacketExtension createCopy()
    {
        org.xmpp.packet.PacketExtension r0, $r5;
        org.dom4j.Document $r4;
        org.dom4j.Element $r1, $r2, $r6;
        org.dom4j.DocumentFactory $r3;

        r0 := @this: org.xmpp.packet.PacketExtension;

        $r1 = r0.<org.xmpp.packet.PacketExtension: org.dom4j.Element element>;

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Element createCopy()>();

        $r3 = <org.xmpp.packet.PacketExtension: org.dom4j.DocumentFactory docFactory>;

        $r4 = virtualinvoke $r3.<org.dom4j.DocumentFactory: org.dom4j.Document createDocument()>();

        interfaceinvoke $r4.<org.dom4j.Document: void add(org.dom4j.Element)>($r2);

        $r5 = new org.xmpp.packet.PacketExtension;

        $r6 = r0.<org.xmpp.packet.PacketExtension: org.dom4j.Element element>;

        specialinvoke $r5.<org.xmpp.packet.PacketExtension: void <init>(org.dom4j.Element)>($r6);

        return $r5;
    }

    static void <clinit>()
    {
        java.util.concurrent.ConcurrentHashMap $r1;
        org.dom4j.DocumentFactory $r0;

        $r0 = staticinvoke <org.dom4j.DocumentFactory: org.dom4j.DocumentFactory getInstance()>();

        <org.xmpp.packet.PacketExtension: org.dom4j.DocumentFactory docFactory> = $r0;

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        <org.xmpp.packet.PacketExtension: java.util.Map registeredExtensions> = $r1;

        return;
    }
}
