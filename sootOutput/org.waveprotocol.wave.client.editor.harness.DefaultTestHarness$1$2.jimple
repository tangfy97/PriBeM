class org.waveprotocol.wave.client.editor.harness.DefaultTestHarness$1$2 extends java.lang.Object implements org.waveprotocol.wave.client.doodad.link.LinkAnnotationHandler$LinkAttributeAugmenter
{
    final org.waveprotocol.wave.client.editor.harness.DefaultTestHarness$1 this$1;

    void <init>(org.waveprotocol.wave.client.editor.harness.DefaultTestHarness$1)
    {
        org.waveprotocol.wave.client.editor.harness.DefaultTestHarness$1 r1;
        org.waveprotocol.wave.client.editor.harness.DefaultTestHarness$1$2 r0;

        r0 := @this: org.waveprotocol.wave.client.editor.harness.DefaultTestHarness$1$2;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.harness.DefaultTestHarness$1;

        r0.<org.waveprotocol.wave.client.editor.harness.DefaultTestHarness$1$2: org.waveprotocol.wave.client.editor.harness.DefaultTestHarness$1 this$1> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.util.Map augment(java.util.Map, boolean, java.util.Map)
    {
        java.util.Map r0, r2;
        org.waveprotocol.wave.client.editor.harness.DefaultTestHarness$1$2 r1;
        boolean z0;

        r1 := @this: org.waveprotocol.wave.client.editor.harness.DefaultTestHarness$1$2;

        r2 := @parameter0: java.util.Map;

        z0 := @parameter1: boolean;

        r0 := @parameter2: java.util.Map;

        return r0;
    }
}
