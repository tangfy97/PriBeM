public class org.apache.commons.lang.builder.CompareToBuilder extends java.lang.Object
{
    private int comparison;

    public void <init>()
    {
        org.apache.commons.lang.builder.CompareToBuilder r0;

        r0 := @this: org.apache.commons.lang.builder.CompareToBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison> = 0;

        return;
    }

    public static int reflectionCompare(java.lang.Object, java.lang.Object)
    {
        int $i0;
        java.lang.Object r0, r1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        $i0 = staticinvoke <org.apache.commons.lang.builder.CompareToBuilder: int reflectionCompare(java.lang.Object,java.lang.Object,boolean,java.lang.Class,java.lang.String[])>(r0, r1, 0, null, null);

        return $i0;
    }

    public static int reflectionCompare(java.lang.Object, java.lang.Object, boolean)
    {
        int $i0;
        java.lang.Object r0, r1;
        boolean z0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        z0 := @parameter2: boolean;

        $i0 = staticinvoke <org.apache.commons.lang.builder.CompareToBuilder: int reflectionCompare(java.lang.Object,java.lang.Object,boolean,java.lang.Class,java.lang.String[])>(r0, r1, z0, null, null);

        return $i0;
    }

    public static int reflectionCompare(java.lang.Object, java.lang.Object, java.util.Collection)
    {
        java.util.Collection r2;
        int $i0;
        java.lang.Object r0, r1;
        java.lang.String[] $r3;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.util.Collection;

        $r3 = staticinvoke <org.apache.commons.lang.builder.ReflectionToStringBuilder: java.lang.String[] toNoNullStringArray(java.util.Collection)>(r2);

        $i0 = staticinvoke <org.apache.commons.lang.builder.CompareToBuilder: int reflectionCompare(java.lang.Object,java.lang.Object,java.lang.String[])>(r0, r1, $r3);

        return $i0;
    }

    public static int reflectionCompare(java.lang.Object, java.lang.Object, java.lang.String[])
    {
        int $i0;
        java.lang.Object r0, r1;
        java.lang.String[] r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.String[];

        $i0 = staticinvoke <org.apache.commons.lang.builder.CompareToBuilder: int reflectionCompare(java.lang.Object,java.lang.Object,boolean,java.lang.Class,java.lang.String[])>(r0, r1, 0, null, r2);

        return $i0;
    }

    public static int reflectionCompare(java.lang.Object, java.lang.Object, boolean, java.lang.Class)
    {
        int $i0;
        java.lang.Object r0, r1;
        java.lang.Class r2;
        boolean z0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        z0 := @parameter2: boolean;

        r2 := @parameter3: java.lang.Class;

        $i0 = staticinvoke <org.apache.commons.lang.builder.CompareToBuilder: int reflectionCompare(java.lang.Object,java.lang.Object,boolean,java.lang.Class,java.lang.String[])>(r0, r1, 0, r2, null);

        return $i0;
    }

    public static int reflectionCompare(java.lang.Object, java.lang.Object, boolean, java.lang.Class, java.lang.String[])
    {
        org.apache.commons.lang.builder.CompareToBuilder $r4;
        java.lang.String[] r5;
        java.lang.ClassCastException $r9;
        java.lang.NullPointerException $r2;
        int $i0;
        java.lang.Object r0, r1;
        java.lang.Class $r3, $r6, r7, $r8, r10;
        boolean $z0, z1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        z1 := @parameter2: boolean;

        r7 := @parameter3: java.lang.Class;

        r5 := @parameter4: java.lang.String[];

        if r0 != r1 goto label1;

        return 0;

     label1:
        if r0 == null goto label2;

        if r1 != null goto label3;

     label2:
        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label3:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r10 = $r3;

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isInstance(java.lang.Object)>(r1);

        if $z0 != 0 goto label4;

        $r9 = new java.lang.ClassCastException;

        specialinvoke $r9.<java.lang.ClassCastException: void <init>()>();

        throw $r9;

     label4:
        $r4 = new org.apache.commons.lang.builder.CompareToBuilder;

        specialinvoke $r4.<org.apache.commons.lang.builder.CompareToBuilder: void <init>()>();

        staticinvoke <org.apache.commons.lang.builder.CompareToBuilder: void reflectionAppend(java.lang.Object,java.lang.Object,java.lang.Class,org.apache.commons.lang.builder.CompareToBuilder,boolean,java.lang.String[])>(r0, r1, $r3, $r4, z1, r5);

     label5:
        $r6 = virtualinvoke r10.<java.lang.Class: java.lang.Class getSuperclass()>();

        if $r6 == null goto label6;

        if r10 == r7 goto label6;

        $r8 = virtualinvoke r10.<java.lang.Class: java.lang.Class getSuperclass()>();

        r10 = $r8;

        staticinvoke <org.apache.commons.lang.builder.CompareToBuilder: void reflectionAppend(java.lang.Object,java.lang.Object,java.lang.Class,org.apache.commons.lang.builder.CompareToBuilder,boolean,java.lang.String[])>(r0, r1, $r8, $r4, z1, r5);

        goto label5;

     label6:
        $i0 = virtualinvoke $r4.<org.apache.commons.lang.builder.CompareToBuilder: int toComparison()>();

        return $i0;
    }

    private static void reflectionAppend(java.lang.Object, java.lang.Object, java.lang.Class, org.apache.commons.lang.builder.CompareToBuilder, boolean, java.lang.String[])
    {
        java.lang.String[] r2;
        int $i0, $i1, $i2, $i3, i4, $i5, $i7;
        java.lang.InternalError $r15;
        java.lang.String $r6, $r7;
        boolean $z0, z1, $z2, $z3;
        org.apache.commons.lang.builder.CompareToBuilder r4;
        java.lang.IllegalAccessException $r12;
        java.lang.reflect.Field r5;
        java.lang.reflect.Field[] $r1;
        java.util.List r3, $r14;
        java.lang.Class r0;
        java.lang.Object r8, $r9, r10, $r11;

        r8 := @parameter0: java.lang.Object;

        r10 := @parameter1: java.lang.Object;

        r0 := @parameter2: java.lang.Class;

        r4 := @parameter3: org.apache.commons.lang.builder.CompareToBuilder;

        z1 := @parameter4: boolean;

        r2 := @parameter5: java.lang.String[];

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        if r2 == null goto label1;

        $r14 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r2);

        goto label2;

     label1:
        $r14 = <java.util.Collections: java.util.List EMPTY_LIST>;

     label2:
        r3 = $r14;

        staticinvoke <java.lang.reflect.AccessibleObject: void setAccessible(java.lang.reflect.AccessibleObject[],boolean)>($r1, 1);

        i4 = 0;

     label3:
        $i5 = lengthof $r1;

        if i4 >= $i5 goto label9;

        $i0 = r4.<org.apache.commons.lang.builder.CompareToBuilder: int comparison>;

        if $i0 != 0 goto label9;

        r5 = $r1[i4];

        $r6 = virtualinvoke r5.<java.lang.reflect.Field: java.lang.String getName()>();

        $z0 = interfaceinvoke r3.<java.util.List: boolean contains(java.lang.Object)>($r6);

        if $z0 != 0 goto label8;

        $r7 = virtualinvoke r5.<java.lang.reflect.Field: java.lang.String getName()>();

        $i1 = virtualinvoke $r7.<java.lang.String: int indexOf(int)>(36);

        $i7 = (int) -1;

        if $i1 != $i7 goto label8;

        if z1 != 0 goto label4;

        $i3 = virtualinvoke r5.<java.lang.reflect.Field: int getModifiers()>();

        $z3 = staticinvoke <java.lang.reflect.Modifier: boolean isTransient(int)>($i3);

        if $z3 != 0 goto label8;

     label4:
        $i2 = virtualinvoke r5.<java.lang.reflect.Field: int getModifiers()>();

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i2);

        if $z2 != 0 goto label8;

     label5:
        $r9 = virtualinvoke r5.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r8);

        $r11 = virtualinvoke r5.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r10);

        virtualinvoke r4.<org.apache.commons.lang.builder.CompareToBuilder: org.apache.commons.lang.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>($r9, $r11);

     label6:
        goto label8;

     label7:
        $r12 := @caughtexception;

        $r15 = new java.lang.InternalError;

        specialinvoke $r15.<java.lang.InternalError: void <init>(java.lang.String)>("Unexpected IllegalAccessException");

        throw $r15;

     label8:
        i4 = i4 + 1;

        goto label3;

     label9:
        return;

        catch java.lang.IllegalAccessException from label5 to label6 with label7;
    }

    public org.apache.commons.lang.builder.CompareToBuilder appendSuper(int)
    {
        org.apache.commons.lang.builder.CompareToBuilder r0;
        int $i0, i1;

        r0 := @this: org.apache.commons.lang.builder.CompareToBuilder;

        i1 := @parameter0: int;

        $i0 = r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison>;

        if $i0 == 0 goto label1;

        return r0;

     label1:
        r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison> = i1;

        return r0;
    }

    public org.apache.commons.lang.builder.CompareToBuilder append(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.lang.builder.CompareToBuilder r0, $r3;
        java.lang.Object r1, r2;

        r0 := @this: org.apache.commons.lang.builder.CompareToBuilder;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r0.<org.apache.commons.lang.builder.CompareToBuilder: org.apache.commons.lang.builder.CompareToBuilder append(java.lang.Object,java.lang.Object,java.util.Comparator)>(r1, r2, null);

        return $r3;
    }

    public org.apache.commons.lang.builder.CompareToBuilder append(java.lang.Object, java.lang.Object, java.util.Comparator)
    {
        byte[] $r14, $r15;
        int[] $r20, $r21;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        org.apache.commons.lang.builder.CompareToBuilder r0;
        short[] $r18, $r19;
        java.lang.Object[] $r6, $r7;
        double[] $r12, $r13;
        float[] $r10, $r11;
        long[] $r22, $r23;
        int $i0, $i1, $i2, $i4;
        boolean[] $r8, $r9;
        char[] $r16, $r17;
        java.lang.Object r1, r2;
        java.lang.Class $r3;
        java.lang.Comparable $r5;
        java.util.Comparator r4;

        r0 := @this: org.apache.commons.lang.builder.CompareToBuilder;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r4 := @parameter2: java.util.Comparator;

        $i0 = r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison>;

        if $i0 == 0 goto label01;

        return r0;

     label01:
        if r1 != r2 goto label02;

        return r0;

     label02:
        if r1 != null goto label03;

        $i4 = (int) -1;

        r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison> = $i4;

        return r0;

     label03:
        if r2 != null goto label04;

        r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison> = 1;

        return r0;

     label04:
        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label13;

        $z1 = r1 instanceof long[];

        if $z1 == 0 goto label05;

        $r23 = (long[]) r1;

        $r22 = (long[]) r2;

        virtualinvoke r0.<org.apache.commons.lang.builder.CompareToBuilder: org.apache.commons.lang.builder.CompareToBuilder append(long[],long[])>($r23, $r22);

        goto label15;

     label05:
        $z2 = r1 instanceof int[];

        if $z2 == 0 goto label06;

        $r21 = (int[]) r1;

        $r20 = (int[]) r2;

        virtualinvoke r0.<org.apache.commons.lang.builder.CompareToBuilder: org.apache.commons.lang.builder.CompareToBuilder append(int[],int[])>($r21, $r20);

        goto label15;

     label06:
        $z3 = r1 instanceof short[];

        if $z3 == 0 goto label07;

        $r19 = (short[]) r1;

        $r18 = (short[]) r2;

        virtualinvoke r0.<org.apache.commons.lang.builder.CompareToBuilder: org.apache.commons.lang.builder.CompareToBuilder append(short[],short[])>($r19, $r18);

        goto label15;

     label07:
        $z4 = r1 instanceof char[];

        if $z4 == 0 goto label08;

        $r17 = (char[]) r1;

        $r16 = (char[]) r2;

        virtualinvoke r0.<org.apache.commons.lang.builder.CompareToBuilder: org.apache.commons.lang.builder.CompareToBuilder append(char[],char[])>($r17, $r16);

        goto label15;

     label08:
        $z5 = r1 instanceof byte[];

        if $z5 == 0 goto label09;

        $r15 = (byte[]) r1;

        $r14 = (byte[]) r2;

        virtualinvoke r0.<org.apache.commons.lang.builder.CompareToBuilder: org.apache.commons.lang.builder.CompareToBuilder append(byte[],byte[])>($r15, $r14);

        goto label15;

     label09:
        $z6 = r1 instanceof double[];

        if $z6 == 0 goto label10;

        $r13 = (double[]) r1;

        $r12 = (double[]) r2;

        virtualinvoke r0.<org.apache.commons.lang.builder.CompareToBuilder: org.apache.commons.lang.builder.CompareToBuilder append(double[],double[])>($r13, $r12);

        goto label15;

     label10:
        $z7 = r1 instanceof float[];

        if $z7 == 0 goto label11;

        $r11 = (float[]) r1;

        $r10 = (float[]) r2;

        virtualinvoke r0.<org.apache.commons.lang.builder.CompareToBuilder: org.apache.commons.lang.builder.CompareToBuilder append(float[],float[])>($r11, $r10);

        goto label15;

     label11:
        $z8 = r1 instanceof boolean[];

        if $z8 == 0 goto label12;

        $r9 = (boolean[]) r1;

        $r8 = (boolean[]) r2;

        virtualinvoke r0.<org.apache.commons.lang.builder.CompareToBuilder: org.apache.commons.lang.builder.CompareToBuilder append(boolean[],boolean[])>($r9, $r8);

        goto label15;

     label12:
        $r7 = (java.lang.Object[]) r1;

        $r6 = (java.lang.Object[]) r2;

        virtualinvoke r0.<org.apache.commons.lang.builder.CompareToBuilder: org.apache.commons.lang.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[],java.util.Comparator)>($r7, $r6, r4);

        goto label15;

     label13:
        if r4 != null goto label14;

        $r5 = (java.lang.Comparable) r1;

        $i2 = interfaceinvoke $r5.<java.lang.Comparable: int compareTo(java.lang.Object)>(r2);

        r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison> = $i2;

        goto label15;

     label14:
        $i1 = interfaceinvoke r4.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r1, r2);

        r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison> = $i1;

     label15:
        return r0;
    }

    public org.apache.commons.lang.builder.CompareToBuilder append(long, long)
    {
        org.apache.commons.lang.builder.CompareToBuilder r0;
        long l1, l2;
        byte $b3, $b4, $b5;
        int $i0, $i6, $i7;

        r0 := @this: org.apache.commons.lang.builder.CompareToBuilder;

        l1 := @parameter0: long;

        l2 := @parameter1: long;

        $i0 = r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison>;

        if $i0 == 0 goto label1;

        return r0;

     label1:
        $b3 = l1 cmp l2;

        $i6 = (int) $b3;

        if $i6 >= 0 goto label2;

        $b5 = -1;

        goto label4;

     label2:
        $b4 = l1 cmp l2;

        $i7 = (int) $b4;

        if $i7 <= 0 goto label3;

        $b5 = 1;

        goto label4;

     label3:
        $b5 = 0;

     label4:
        r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison> = $b5;

        return r0;
    }

    public org.apache.commons.lang.builder.CompareToBuilder append(int, int)
    {
        org.apache.commons.lang.builder.CompareToBuilder r0;
        byte $b3;
        int $i0, i1, i2;

        r0 := @this: org.apache.commons.lang.builder.CompareToBuilder;

        i1 := @parameter0: int;

        i2 := @parameter1: int;

        $i0 = r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison>;

        if $i0 == 0 goto label1;

        return r0;

     label1:
        if i1 >= i2 goto label2;

        $b3 = -1;

        goto label4;

     label2:
        if i1 <= i2 goto label3;

        $b3 = 1;

        goto label4;

     label3:
        $b3 = 0;

     label4:
        r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison> = $b3;

        return r0;
    }

    public org.apache.commons.lang.builder.CompareToBuilder append(short, short)
    {
        org.apache.commons.lang.builder.CompareToBuilder r0;
        short s1, s2;
        byte $b3;
        int $i0, $i4, $i5, $i6, $i7;

        r0 := @this: org.apache.commons.lang.builder.CompareToBuilder;

        s1 := @parameter0: short;

        s2 := @parameter1: short;

        $i0 = r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison>;

        if $i0 == 0 goto label1;

        return r0;

     label1:
        $i4 = (int) s1;

        $i5 = (int) s2;

        if $i4 >= $i5 goto label2;

        $b3 = -1;

        goto label4;

     label2:
        $i6 = (int) s1;

        $i7 = (int) s2;

        if $i6 <= $i7 goto label3;

        $b3 = 1;

        goto label4;

     label3:
        $b3 = 0;

     label4:
        r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison> = $b3;

        return r0;
    }

    public org.apache.commons.lang.builder.CompareToBuilder append(char, char)
    {
        org.apache.commons.lang.builder.CompareToBuilder r0;
        char c1, c2;
        byte $b3;
        int $i0, $i4, $i5, $i6, $i7;

        r0 := @this: org.apache.commons.lang.builder.CompareToBuilder;

        c1 := @parameter0: char;

        c2 := @parameter1: char;

        $i0 = r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison>;

        if $i0 == 0 goto label1;

        return r0;

     label1:
        $i4 = (int) c1;

        $i5 = (int) c2;

        if $i4 >= $i5 goto label2;

        $b3 = -1;

        goto label4;

     label2:
        $i6 = (int) c1;

        $i7 = (int) c2;

        if $i6 <= $i7 goto label3;

        $b3 = 1;

        goto label4;

     label3:
        $b3 = 0;

     label4:
        r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison> = $b3;

        return r0;
    }

    public org.apache.commons.lang.builder.CompareToBuilder append(byte, byte)
    {
        org.apache.commons.lang.builder.CompareToBuilder r0;
        byte b1, b2, $b3;
        int $i0, $i4, $i5, $i6, $i7;

        r0 := @this: org.apache.commons.lang.builder.CompareToBuilder;

        b1 := @parameter0: byte;

        b2 := @parameter1: byte;

        $i0 = r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison>;

        if $i0 == 0 goto label1;

        return r0;

     label1:
        $i4 = (int) b1;

        $i5 = (int) b2;

        if $i4 >= $i5 goto label2;

        $b3 = -1;

        goto label4;

     label2:
        $i6 = (int) b1;

        $i7 = (int) b2;

        if $i6 <= $i7 goto label3;

        $b3 = 1;

        goto label4;

     label3:
        $b3 = 0;

     label4:
        r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison> = $b3;

        return r0;
    }

    public org.apache.commons.lang.builder.CompareToBuilder append(double, double)
    {
        org.apache.commons.lang.builder.CompareToBuilder r0;
        int $i0, $i1;
        double d0, d1;

        r0 := @this: org.apache.commons.lang.builder.CompareToBuilder;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $i0 = r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison>;

        if $i0 == 0 goto label1;

        return r0;

     label1:
        $i1 = staticinvoke <org.apache.commons.lang.math.NumberUtils: int compare(double,double)>(d0, d1);

        r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison> = $i1;

        return r0;
    }

    public org.apache.commons.lang.builder.CompareToBuilder append(float, float)
    {
        org.apache.commons.lang.builder.CompareToBuilder r0;
        int $i0, $i1;
        float f0, f1;

        r0 := @this: org.apache.commons.lang.builder.CompareToBuilder;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $i0 = r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison>;

        if $i0 == 0 goto label1;

        return r0;

     label1:
        $i1 = staticinvoke <org.apache.commons.lang.math.NumberUtils: int compare(float,float)>(f0, f1);

        r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison> = $i1;

        return r0;
    }

    public org.apache.commons.lang.builder.CompareToBuilder append(boolean, boolean)
    {
        org.apache.commons.lang.builder.CompareToBuilder r0;
        int $i0, $i2;
        boolean z0, z1;

        r0 := @this: org.apache.commons.lang.builder.CompareToBuilder;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        $i0 = r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison>;

        if $i0 == 0 goto label1;

        return r0;

     label1:
        if z0 != z1 goto label2;

        return r0;

     label2:
        if z0 != 0 goto label3;

        $i2 = (int) -1;

        r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison> = $i2;

        goto label4;

     label3:
        r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison> = 1;

     label4:
        return r0;
    }

    public org.apache.commons.lang.builder.CompareToBuilder append(java.lang.Object[], java.lang.Object[])
    {
        org.apache.commons.lang.builder.CompareToBuilder r0, $r3;
        java.lang.Object[] r1, r2;

        r0 := @this: org.apache.commons.lang.builder.CompareToBuilder;

        r1 := @parameter0: java.lang.Object[];

        r2 := @parameter1: java.lang.Object[];

        $r3 = virtualinvoke r0.<org.apache.commons.lang.builder.CompareToBuilder: org.apache.commons.lang.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[],java.util.Comparator)>(r1, r2, null);

        return $r3;
    }

    public org.apache.commons.lang.builder.CompareToBuilder append(java.lang.Object[], java.lang.Object[], java.util.Comparator)
    {
        java.lang.Object[] r1, r2;
        byte $b7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i8, $i10;
        org.apache.commons.lang.builder.CompareToBuilder r0;
        java.lang.Object $r4, $r5;
        java.util.Comparator r3;

        r0 := @this: org.apache.commons.lang.builder.CompareToBuilder;

        r1 := @parameter0: java.lang.Object[];

        r2 := @parameter1: java.lang.Object[];

        r3 := @parameter2: java.util.Comparator;

        $i0 = r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison>;

        if $i0 == 0 goto label1;

        return r0;

     label1:
        if r1 != r2 goto label2;

        return r0;

     label2:
        if r1 != null goto label3;

        $i10 = (int) -1;

        r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison> = $i10;

        return r0;

     label3:
        if r2 != null goto label4;

        r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison> = 1;

        return r0;

     label4:
        $i2 = lengthof r1;

        $i1 = lengthof r2;

        if $i2 == $i1 goto label7;

        $i6 = lengthof r1;

        $i5 = lengthof r2;

        if $i6 >= $i5 goto label5;

        $b7 = -1;

        goto label6;

     label5:
        $b7 = 1;

     label6:
        r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison> = $b7;

        return r0;

     label7:
        i8 = 0;

     label8:
        $i3 = lengthof r1;

        if i8 >= $i3 goto label9;

        $i4 = r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison>;

        if $i4 != 0 goto label9;

        $r5 = r1[i8];

        $r4 = r2[i8];

        virtualinvoke r0.<org.apache.commons.lang.builder.CompareToBuilder: org.apache.commons.lang.builder.CompareToBuilder append(java.lang.Object,java.lang.Object,java.util.Comparator)>($r5, $r4, r3);

        i8 = i8 + 1;

        goto label8;

     label9:
        return r0;
    }

    public org.apache.commons.lang.builder.CompareToBuilder append(long[], long[])
    {
        org.apache.commons.lang.builder.CompareToBuilder r0;
        long $l5, $l6;
        long[] r1, r2;
        byte $b9;
        int $i0, $i1, $i2, $i3, $i4, $i7, $i8, i10, $i12;

        r0 := @this: org.apache.commons.lang.builder.CompareToBuilder;

        r1 := @parameter0: long[];

        r2 := @parameter1: long[];

        $i0 = r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison>;

        if $i0 == 0 goto label1;

        return r0;

     label1:
        if r1 != r2 goto label2;

        return r0;

     label2:
        if r1 != null goto label3;

        $i12 = (int) -1;

        r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison> = $i12;

        return r0;

     label3:
        if r2 != null goto label4;

        r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison> = 1;

        return r0;

     label4:
        $i2 = lengthof r1;

        $i1 = lengthof r2;

        if $i2 == $i1 goto label7;

        $i8 = lengthof r1;

        $i7 = lengthof r2;

        if $i8 >= $i7 goto label5;

        $b9 = -1;

        goto label6;

     label5:
        $b9 = 1;

     label6:
        r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison> = $b9;

        return r0;

     label7:
        i10 = 0;

     label8:
        $i3 = lengthof r1;

        if i10 >= $i3 goto label9;

        $i4 = r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison>;

        if $i4 != 0 goto label9;

        $l6 = r1[i10];

        $l5 = r2[i10];

        virtualinvoke r0.<org.apache.commons.lang.builder.CompareToBuilder: org.apache.commons.lang.builder.CompareToBuilder append(long,long)>($l6, $l5);

        i10 = i10 + 1;

        goto label8;

     label9:
        return r0;
    }

    public org.apache.commons.lang.builder.CompareToBuilder append(int[], int[])
    {
        org.apache.commons.lang.builder.CompareToBuilder r0;
        byte $b9;
        int[] r1, r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i10, $i12;

        r0 := @this: org.apache.commons.lang.builder.CompareToBuilder;

        r1 := @parameter0: int[];

        r2 := @parameter1: int[];

        $i0 = r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison>;

        if $i0 == 0 goto label1;

        return r0;

     label1:
        if r1 != r2 goto label2;

        return r0;

     label2:
        if r1 != null goto label3;

        $i12 = (int) -1;

        r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison> = $i12;

        return r0;

     label3:
        if r2 != null goto label4;

        r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison> = 1;

        return r0;

     label4:
        $i2 = lengthof r1;

        $i1 = lengthof r2;

        if $i2 == $i1 goto label7;

        $i8 = lengthof r1;

        $i7 = lengthof r2;

        if $i8 >= $i7 goto label5;

        $b9 = -1;

        goto label6;

     label5:
        $b9 = 1;

     label6:
        r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison> = $b9;

        return r0;

     label7:
        i10 = 0;

     label8:
        $i3 = lengthof r1;

        if i10 >= $i3 goto label9;

        $i4 = r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison>;

        if $i4 != 0 goto label9;

        $i6 = r1[i10];

        $i5 = r2[i10];

        virtualinvoke r0.<org.apache.commons.lang.builder.CompareToBuilder: org.apache.commons.lang.builder.CompareToBuilder append(int,int)>($i6, $i5);

        i10 = i10 + 1;

        goto label8;

     label9:
        return r0;
    }

    public org.apache.commons.lang.builder.CompareToBuilder append(short[], short[])
    {
        org.apache.commons.lang.builder.CompareToBuilder r0;
        short $s5, $s6;
        byte $b9;
        int $i0, $i1, $i2, $i3, $i4, $i7, $i8, i10, $i12;
        short[] r1, r2;

        r0 := @this: org.apache.commons.lang.builder.CompareToBuilder;

        r1 := @parameter0: short[];

        r2 := @parameter1: short[];

        $i0 = r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison>;

        if $i0 == 0 goto label1;

        return r0;

     label1:
        if r1 != r2 goto label2;

        return r0;

     label2:
        if r1 != null goto label3;

        $i12 = (int) -1;

        r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison> = $i12;

        return r0;

     label3:
        if r2 != null goto label4;

        r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison> = 1;

        return r0;

     label4:
        $i2 = lengthof r1;

        $i1 = lengthof r2;

        if $i2 == $i1 goto label7;

        $i8 = lengthof r1;

        $i7 = lengthof r2;

        if $i8 >= $i7 goto label5;

        $b9 = -1;

        goto label6;

     label5:
        $b9 = 1;

     label6:
        r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison> = $b9;

        return r0;

     label7:
        i10 = 0;

     label8:
        $i3 = lengthof r1;

        if i10 >= $i3 goto label9;

        $i4 = r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison>;

        if $i4 != 0 goto label9;

        $s6 = r1[i10];

        $s5 = r2[i10];

        virtualinvoke r0.<org.apache.commons.lang.builder.CompareToBuilder: org.apache.commons.lang.builder.CompareToBuilder append(short,short)>($s6, $s5);

        i10 = i10 + 1;

        goto label8;

     label9:
        return r0;
    }

    public org.apache.commons.lang.builder.CompareToBuilder append(char[], char[])
    {
        org.apache.commons.lang.builder.CompareToBuilder r0;
        char $c5, $c6;
        byte $b9;
        int $i0, $i1, $i2, $i3, $i4, $i7, $i8, i10, $i12;
        char[] r1, r2;

        r0 := @this: org.apache.commons.lang.builder.CompareToBuilder;

        r1 := @parameter0: char[];

        r2 := @parameter1: char[];

        $i0 = r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison>;

        if $i0 == 0 goto label1;

        return r0;

     label1:
        if r1 != r2 goto label2;

        return r0;

     label2:
        if r1 != null goto label3;

        $i12 = (int) -1;

        r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison> = $i12;

        return r0;

     label3:
        if r2 != null goto label4;

        r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison> = 1;

        return r0;

     label4:
        $i2 = lengthof r1;

        $i1 = lengthof r2;

        if $i2 == $i1 goto label7;

        $i8 = lengthof r1;

        $i7 = lengthof r2;

        if $i8 >= $i7 goto label5;

        $b9 = -1;

        goto label6;

     label5:
        $b9 = 1;

     label6:
        r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison> = $b9;

        return r0;

     label7:
        i10 = 0;

     label8:
        $i3 = lengthof r1;

        if i10 >= $i3 goto label9;

        $i4 = r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison>;

        if $i4 != 0 goto label9;

        $c6 = r1[i10];

        $c5 = r2[i10];

        virtualinvoke r0.<org.apache.commons.lang.builder.CompareToBuilder: org.apache.commons.lang.builder.CompareToBuilder append(char,char)>($c6, $c5);

        i10 = i10 + 1;

        goto label8;

     label9:
        return r0;
    }

    public org.apache.commons.lang.builder.CompareToBuilder append(byte[], byte[])
    {
        org.apache.commons.lang.builder.CompareToBuilder r0;
        byte[] r1, r2;
        byte $b5, $b6, $b9;
        int $i0, $i1, $i2, $i3, $i4, $i7, $i8, i10, $i12;

        r0 := @this: org.apache.commons.lang.builder.CompareToBuilder;

        r1 := @parameter0: byte[];

        r2 := @parameter1: byte[];

        $i0 = r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison>;

        if $i0 == 0 goto label1;

        return r0;

     label1:
        if r1 != r2 goto label2;

        return r0;

     label2:
        if r1 != null goto label3;

        $i12 = (int) -1;

        r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison> = $i12;

        return r0;

     label3:
        if r2 != null goto label4;

        r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison> = 1;

        return r0;

     label4:
        $i2 = lengthof r1;

        $i1 = lengthof r2;

        if $i2 == $i1 goto label7;

        $i8 = lengthof r1;

        $i7 = lengthof r2;

        if $i8 >= $i7 goto label5;

        $b9 = -1;

        goto label6;

     label5:
        $b9 = 1;

     label6:
        r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison> = $b9;

        return r0;

     label7:
        i10 = 0;

     label8:
        $i3 = lengthof r1;

        if i10 >= $i3 goto label9;

        $i4 = r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison>;

        if $i4 != 0 goto label9;

        $b6 = r1[i10];

        $b5 = r2[i10];

        virtualinvoke r0.<org.apache.commons.lang.builder.CompareToBuilder: org.apache.commons.lang.builder.CompareToBuilder append(byte,byte)>($b6, $b5);

        i10 = i10 + 1;

        goto label8;

     label9:
        return r0;
    }

    public org.apache.commons.lang.builder.CompareToBuilder append(double[], double[])
    {
        org.apache.commons.lang.builder.CompareToBuilder r0;
        double[] r1, r2;
        byte $b7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i8, $i10;
        double $d0, $d1;

        r0 := @this: org.apache.commons.lang.builder.CompareToBuilder;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $i0 = r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison>;

        if $i0 == 0 goto label1;

        return r0;

     label1:
        if r1 != r2 goto label2;

        return r0;

     label2:
        if r1 != null goto label3;

        $i10 = (int) -1;

        r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison> = $i10;

        return r0;

     label3:
        if r2 != null goto label4;

        r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison> = 1;

        return r0;

     label4:
        $i2 = lengthof r1;

        $i1 = lengthof r2;

        if $i2 == $i1 goto label7;

        $i6 = lengthof r1;

        $i5 = lengthof r2;

        if $i6 >= $i5 goto label5;

        $b7 = -1;

        goto label6;

     label5:
        $b7 = 1;

     label6:
        r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison> = $b7;

        return r0;

     label7:
        i8 = 0;

     label8:
        $i3 = lengthof r1;

        if i8 >= $i3 goto label9;

        $i4 = r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison>;

        if $i4 != 0 goto label9;

        $d1 = r1[i8];

        $d0 = r2[i8];

        virtualinvoke r0.<org.apache.commons.lang.builder.CompareToBuilder: org.apache.commons.lang.builder.CompareToBuilder append(double,double)>($d1, $d0);

        i8 = i8 + 1;

        goto label8;

     label9:
        return r0;
    }

    public org.apache.commons.lang.builder.CompareToBuilder append(float[], float[])
    {
        org.apache.commons.lang.builder.CompareToBuilder r0;
        float[] r1, r2;
        byte $b7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i8, $i10;
        float $f0, $f1;

        r0 := @this: org.apache.commons.lang.builder.CompareToBuilder;

        r1 := @parameter0: float[];

        r2 := @parameter1: float[];

        $i0 = r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison>;

        if $i0 == 0 goto label1;

        return r0;

     label1:
        if r1 != r2 goto label2;

        return r0;

     label2:
        if r1 != null goto label3;

        $i10 = (int) -1;

        r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison> = $i10;

        return r0;

     label3:
        if r2 != null goto label4;

        r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison> = 1;

        return r0;

     label4:
        $i2 = lengthof r1;

        $i1 = lengthof r2;

        if $i2 == $i1 goto label7;

        $i6 = lengthof r1;

        $i5 = lengthof r2;

        if $i6 >= $i5 goto label5;

        $b7 = -1;

        goto label6;

     label5:
        $b7 = 1;

     label6:
        r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison> = $b7;

        return r0;

     label7:
        i8 = 0;

     label8:
        $i3 = lengthof r1;

        if i8 >= $i3 goto label9;

        $i4 = r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison>;

        if $i4 != 0 goto label9;

        $f1 = r1[i8];

        $f0 = r2[i8];

        virtualinvoke r0.<org.apache.commons.lang.builder.CompareToBuilder: org.apache.commons.lang.builder.CompareToBuilder append(float,float)>($f1, $f0);

        i8 = i8 + 1;

        goto label8;

     label9:
        return r0;
    }

    public org.apache.commons.lang.builder.CompareToBuilder append(boolean[], boolean[])
    {
        org.apache.commons.lang.builder.CompareToBuilder r0;
        boolean[] r1, r2;
        byte $b7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i8, $i10;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.lang.builder.CompareToBuilder;

        r1 := @parameter0: boolean[];

        r2 := @parameter1: boolean[];

        $i0 = r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison>;

        if $i0 == 0 goto label1;

        return r0;

     label1:
        if r1 != r2 goto label2;

        return r0;

     label2:
        if r1 != null goto label3;

        $i10 = (int) -1;

        r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison> = $i10;

        return r0;

     label3:
        if r2 != null goto label4;

        r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison> = 1;

        return r0;

     label4:
        $i2 = lengthof r1;

        $i1 = lengthof r2;

        if $i2 == $i1 goto label7;

        $i6 = lengthof r1;

        $i5 = lengthof r2;

        if $i6 >= $i5 goto label5;

        $b7 = -1;

        goto label6;

     label5:
        $b7 = 1;

     label6:
        r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison> = $b7;

        return r0;

     label7:
        i8 = 0;

     label8:
        $i3 = lengthof r1;

        if i8 >= $i3 goto label9;

        $i4 = r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison>;

        if $i4 != 0 goto label9;

        $z1 = r1[i8];

        $z0 = r2[i8];

        virtualinvoke r0.<org.apache.commons.lang.builder.CompareToBuilder: org.apache.commons.lang.builder.CompareToBuilder append(boolean,boolean)>($z1, $z0);

        i8 = i8 + 1;

        goto label8;

     label9:
        return r0;
    }

    public int toComparison()
    {
        org.apache.commons.lang.builder.CompareToBuilder r0;
        int $i0;

        r0 := @this: org.apache.commons.lang.builder.CompareToBuilder;

        $i0 = r0.<org.apache.commons.lang.builder.CompareToBuilder: int comparison>;

        return $i0;
    }
}
