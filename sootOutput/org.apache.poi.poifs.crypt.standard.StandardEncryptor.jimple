public class org.apache.poi.poifs.crypt.standard.StandardEncryptor extends org.apache.poi.poifs.crypt.Encryptor
{
    private final org.apache.poi.poifs.crypt.standard.StandardEncryptionInfoBuilder builder;

    protected void <init>(org.apache.poi.poifs.crypt.standard.StandardEncryptionInfoBuilder)
    {
        org.apache.poi.poifs.crypt.standard.StandardEncryptionInfoBuilder r1;
        org.apache.poi.poifs.crypt.standard.StandardEncryptor r0;

        r0 := @this: org.apache.poi.poifs.crypt.standard.StandardEncryptor;

        r1 := @parameter0: org.apache.poi.poifs.crypt.standard.StandardEncryptionInfoBuilder;

        specialinvoke r0.<org.apache.poi.poifs.crypt.Encryptor: void <init>()>();

        r0.<org.apache.poi.poifs.crypt.standard.StandardEncryptor: org.apache.poi.poifs.crypt.standard.StandardEncryptionInfoBuilder builder> = r1;

        return;
    }

    public void confirmPassword(java.lang.String)
    {
        java.security.SecureRandom $r0;
        byte[] r1, r2;
        org.apache.poi.poifs.crypt.standard.StandardEncryptor r3;
        java.lang.String r4;

        r3 := @this: org.apache.poi.poifs.crypt.standard.StandardEncryptor;

        r4 := @parameter0: java.lang.String;

        $r0 = new java.security.SecureRandom;

        specialinvoke $r0.<java.security.SecureRandom: void <init>()>();

        r1 = newarray (byte)[16];

        r2 = newarray (byte)[16];

        virtualinvoke $r0.<java.util.Random: void nextBytes(byte[])>(r1);

        virtualinvoke $r0.<java.util.Random: void nextBytes(byte[])>(r2);

        virtualinvoke r3.<org.apache.poi.poifs.crypt.standard.StandardEncryptor: void confirmPassword(java.lang.String,byte[],byte[],byte[],byte[],byte[])>(r4, null, null, r1, r2, null);

        return;
    }

    public void confirmPassword(java.lang.String, byte[], byte[], byte[], byte[], byte[])
    {
        byte[] r3, r7, $r8, $r11, $r13, $r14, r17, r18, r19;
        java.security.MessageDigest $r10;
        javax.crypto.Cipher $r6;
        java.security.GeneralSecurityException $r15;
        int $i0, i1;
        java.lang.String r4;
        org.apache.poi.poifs.crypt.standard.StandardEncryptor r0;
        org.apache.poi.poifs.crypt.standard.StandardEncryptionInfoBuilder $r1;
        org.apache.poi.poifs.crypt.HashAlgorithm $r9;
        org.apache.poi.EncryptedDocumentException $r16;
        javax.crypto.SecretKey $r5;
        org.apache.poi.poifs.crypt.standard.StandardEncryptionVerifier $r2;
        org.apache.poi.poifs.crypt.CipherAlgorithm $r12;

        r0 := @this: org.apache.poi.poifs.crypt.standard.StandardEncryptor;

        r4 := @parameter0: java.lang.String;

        r17 := @parameter1: byte[];

        r18 := @parameter2: byte[];

        r7 := @parameter3: byte[];

        r3 := @parameter4: byte[];

        r19 := @parameter5: byte[];

        $r1 = r0.<org.apache.poi.poifs.crypt.standard.StandardEncryptor: org.apache.poi.poifs.crypt.standard.StandardEncryptionInfoBuilder builder>;

        $r2 = virtualinvoke $r1.<org.apache.poi.poifs.crypt.standard.StandardEncryptionInfoBuilder: org.apache.poi.poifs.crypt.standard.StandardEncryptionVerifier getVerifier()>();

        virtualinvoke $r2.<org.apache.poi.poifs.crypt.standard.StandardEncryptionVerifier: void setSalt(byte[])>(r3);

        $i0 = virtualinvoke r0.<org.apache.poi.poifs.crypt.standard.StandardEncryptor: int getKeySizeInBytes()>();

        $r5 = staticinvoke <org.apache.poi.poifs.crypt.standard.StandardDecryptor: javax.crypto.SecretKey generateSecretKey(java.lang.String,org.apache.poi.poifs.crypt.EncryptionVerifier,int)>(r4, $r2, $i0);

        virtualinvoke r0.<org.apache.poi.poifs.crypt.standard.StandardEncryptor: void setSecretKey(javax.crypto.SecretKey)>($r5);

        $r6 = specialinvoke r0.<org.apache.poi.poifs.crypt.standard.StandardEncryptor: javax.crypto.Cipher getCipher(javax.crypto.SecretKey,java.lang.String)>($r5, null);

     label1:
        $r8 = virtualinvoke $r6.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r7);

        $r9 = virtualinvoke $r2.<org.apache.poi.poifs.crypt.standard.StandardEncryptionVerifier: org.apache.poi.poifs.crypt.HashAlgorithm getHashAlgorithm()>();

        $r10 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: java.security.MessageDigest getMessageDigest(org.apache.poi.poifs.crypt.HashAlgorithm)>($r9);

        $r11 = virtualinvoke $r10.<java.security.MessageDigest: byte[] digest(byte[])>(r7);

        $r12 = virtualinvoke $r2.<org.apache.poi.poifs.crypt.standard.StandardEncryptionVerifier: org.apache.poi.poifs.crypt.CipherAlgorithm getCipherAlgorithm()>();

        i1 = $r12.<org.apache.poi.poifs.crypt.CipherAlgorithm: int encryptedVerifierHashLength>;

        $r13 = staticinvoke <org.apache.poi.poifs.crypt.standard.StandardDecryptor: byte[] truncateOrPad(byte[],int)>($r11, i1);

        $r14 = virtualinvoke $r6.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r13);

        virtualinvoke $r2.<org.apache.poi.poifs.crypt.standard.StandardEncryptionVerifier: void setEncryptedVerifier(byte[])>($r8);

        virtualinvoke $r2.<org.apache.poi.poifs.crypt.standard.StandardEncryptionVerifier: void setEncryptedVerifierHash(byte[])>($r14);

     label2:
        goto label4;

     label3:
        $r15 := @caughtexception;

        $r16 = new org.apache.poi.EncryptedDocumentException;

        specialinvoke $r16.<org.apache.poi.EncryptedDocumentException: void <init>(java.lang.String,java.lang.Throwable)>("Password confirmation failed", $r15);

        throw $r16;

     label4:
        return;

        catch java.security.GeneralSecurityException from label1 to label2 with label3;
    }

    private javax.crypto.Cipher getCipher(javax.crypto.SecretKey, java.lang.String)
    {
        org.apache.poi.poifs.crypt.standard.StandardEncryptor r0;
        org.apache.poi.poifs.crypt.ChainingMode $r5;
        org.apache.poi.poifs.crypt.standard.StandardEncryptionInfoBuilder $r1;
        javax.crypto.Cipher $r7;
        javax.crypto.SecretKey r3;
        java.lang.String r6;
        org.apache.poi.poifs.crypt.standard.StandardEncryptionVerifier $r2;
        org.apache.poi.poifs.crypt.CipherAlgorithm $r4;

        r0 := @this: org.apache.poi.poifs.crypt.standard.StandardEncryptor;

        r3 := @parameter0: javax.crypto.SecretKey;

        r6 := @parameter1: java.lang.String;

        $r1 = r0.<org.apache.poi.poifs.crypt.standard.StandardEncryptor: org.apache.poi.poifs.crypt.standard.StandardEncryptionInfoBuilder builder>;

        $r2 = virtualinvoke $r1.<org.apache.poi.poifs.crypt.standard.StandardEncryptionInfoBuilder: org.apache.poi.poifs.crypt.standard.StandardEncryptionVerifier getVerifier()>();

        $r4 = virtualinvoke $r2.<org.apache.poi.poifs.crypt.EncryptionVerifier: org.apache.poi.poifs.crypt.CipherAlgorithm getCipherAlgorithm()>();

        $r5 = virtualinvoke $r2.<org.apache.poi.poifs.crypt.EncryptionVerifier: org.apache.poi.poifs.crypt.ChainingMode getChainingMode()>();

        $r7 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: javax.crypto.Cipher getCipher(javax.crypto.SecretKey,org.apache.poi.poifs.crypt.CipherAlgorithm,org.apache.poi.poifs.crypt.ChainingMode,byte[],int,java.lang.String)>(r3, $r4, $r5, null, 1, r6);

        return $r7;
    }

    public java.io.OutputStream getDataStream(org.apache.poi.poifs.filesystem.DirectoryNode) throws java.io.IOException, java.security.GeneralSecurityException
    {
        org.apache.poi.poifs.filesystem.DirectoryNode r1;
        org.apache.poi.poifs.crypt.standard.StandardEncryptor r0;
        org.apache.poi.poifs.crypt.standard.StandardEncryptor$StandardCipherOutputStream $r2;

        r0 := @this: org.apache.poi.poifs.crypt.standard.StandardEncryptor;

        r1 := @parameter0: org.apache.poi.poifs.filesystem.DirectoryNode;

        virtualinvoke r0.<org.apache.poi.poifs.crypt.standard.StandardEncryptor: void createEncryptionInfoEntry(org.apache.poi.poifs.filesystem.DirectoryNode)>(r1);

        staticinvoke <org.apache.poi.poifs.crypt.DataSpaceMapUtils: void addDefaultDataSpace(org.apache.poi.poifs.filesystem.DirectoryEntry)>(r1);

        $r2 = new org.apache.poi.poifs.crypt.standard.StandardEncryptor$StandardCipherOutputStream;

        specialinvoke $r2.<org.apache.poi.poifs.crypt.standard.StandardEncryptor$StandardCipherOutputStream: void <init>(org.apache.poi.poifs.crypt.standard.StandardEncryptor,org.apache.poi.poifs.filesystem.DirectoryNode)>(r0, r1);

        return $r2;
    }

    protected int getKeySizeInBytes()
    {
        org.apache.poi.poifs.crypt.standard.StandardEncryptionHeader $r2;
        org.apache.poi.poifs.crypt.standard.StandardEncryptor r0;
        int $i0, $i1;
        org.apache.poi.poifs.crypt.standard.StandardEncryptionInfoBuilder $r1;

        r0 := @this: org.apache.poi.poifs.crypt.standard.StandardEncryptor;

        $r1 = r0.<org.apache.poi.poifs.crypt.standard.StandardEncryptor: org.apache.poi.poifs.crypt.standard.StandardEncryptionInfoBuilder builder>;

        $r2 = virtualinvoke $r1.<org.apache.poi.poifs.crypt.standard.StandardEncryptionInfoBuilder: org.apache.poi.poifs.crypt.standard.StandardEncryptionHeader getHeader()>();

        $i0 = virtualinvoke $r2.<org.apache.poi.poifs.crypt.standard.StandardEncryptionHeader: int getKeySize()>();

        $i1 = $i0 / 8;

        return $i1;
    }

    protected void createEncryptionInfoEntry(org.apache.poi.poifs.filesystem.DirectoryNode) throws java.io.IOException
    {
        org.apache.poi.poifs.crypt.standard.StandardEncryptionHeader $r4;
        org.apache.poi.poifs.crypt.standard.StandardEncryptor$1 $r7;
        org.apache.poi.poifs.crypt.standard.StandardEncryptor r0;
        org.apache.poi.poifs.crypt.standard.StandardEncryptionInfoBuilder $r1, $r3, $r5;
        org.apache.poi.poifs.filesystem.DirectoryNode r8;
        org.apache.poi.poifs.crypt.standard.StandardEncryptionVerifier $r6;
        org.apache.poi.poifs.crypt.EncryptionInfo $r2;

        r0 := @this: org.apache.poi.poifs.crypt.standard.StandardEncryptor;

        r8 := @parameter0: org.apache.poi.poifs.filesystem.DirectoryNode;

        $r1 = r0.<org.apache.poi.poifs.crypt.standard.StandardEncryptor: org.apache.poi.poifs.crypt.standard.StandardEncryptionInfoBuilder builder>;

        $r2 = virtualinvoke $r1.<org.apache.poi.poifs.crypt.standard.StandardEncryptionInfoBuilder: org.apache.poi.poifs.crypt.EncryptionInfo getEncryptionInfo()>();

        $r3 = r0.<org.apache.poi.poifs.crypt.standard.StandardEncryptor: org.apache.poi.poifs.crypt.standard.StandardEncryptionInfoBuilder builder>;

        $r4 = virtualinvoke $r3.<org.apache.poi.poifs.crypt.standard.StandardEncryptionInfoBuilder: org.apache.poi.poifs.crypt.standard.StandardEncryptionHeader getHeader()>();

        $r5 = r0.<org.apache.poi.poifs.crypt.standard.StandardEncryptor: org.apache.poi.poifs.crypt.standard.StandardEncryptionInfoBuilder builder>;

        $r6 = virtualinvoke $r5.<org.apache.poi.poifs.crypt.standard.StandardEncryptionInfoBuilder: org.apache.poi.poifs.crypt.standard.StandardEncryptionVerifier getVerifier()>();

        $r7 = new org.apache.poi.poifs.crypt.standard.StandardEncryptor$1;

        specialinvoke $r7.<org.apache.poi.poifs.crypt.standard.StandardEncryptor$1: void <init>(org.apache.poi.poifs.crypt.standard.StandardEncryptor,org.apache.poi.poifs.crypt.EncryptionInfo,org.apache.poi.poifs.crypt.standard.StandardEncryptionHeader,org.apache.poi.poifs.crypt.standard.StandardEncryptionVerifier)>(r0, $r2, $r4, $r6);

        staticinvoke <org.apache.poi.poifs.crypt.DataSpaceMapUtils: org.apache.poi.poifs.filesystem.DocumentEntry createEncryptionEntry(org.apache.poi.poifs.filesystem.DirectoryEntry,java.lang.String,org.apache.poi.poifs.crypt.standard.EncryptionRecord)>(r8, "EncryptionInfo", $r7);

        return;
    }

    static javax.crypto.Cipher access$000(org.apache.poi.poifs.crypt.standard.StandardEncryptor, javax.crypto.SecretKey, java.lang.String)
    {
        org.apache.poi.poifs.crypt.standard.StandardEncryptor r0;
        javax.crypto.SecretKey r1;
        java.lang.String r2;
        javax.crypto.Cipher $r3;

        r0 := @parameter0: org.apache.poi.poifs.crypt.standard.StandardEncryptor;

        r1 := @parameter1: javax.crypto.SecretKey;

        r2 := @parameter2: java.lang.String;

        $r3 = specialinvoke r0.<org.apache.poi.poifs.crypt.standard.StandardEncryptor: javax.crypto.Cipher getCipher(javax.crypto.SecretKey,java.lang.String)>(r1, r2);

        return $r3;
    }
}
