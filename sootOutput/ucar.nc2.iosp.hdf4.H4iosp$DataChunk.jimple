class ucar.nc2.iosp.hdf4.H4iosp$DataChunk extends java.lang.Object implements ucar.nc2.iosp.LayoutBBTiled$DataChunk
{
    private int[] offset;
    private ucar.nc2.iosp.hdf4.H4header$SpecialComp compress;
    private java.nio.ByteBuffer bb;
    final ucar.nc2.iosp.hdf4.H4iosp this$0;

    void <init>(ucar.nc2.iosp.hdf4.H4iosp, int[], ucar.nc2.iosp.hdf4.H4header$SpecialComp)
    {
        ucar.nc2.iosp.hdf4.H4header$SpecialComp r3;
        ucar.nc2.iosp.hdf4.H4iosp$DataChunk r0;
        int[] r2;
        ucar.nc2.iosp.hdf4.H4iosp r1;

        r0 := @this: ucar.nc2.iosp.hdf4.H4iosp$DataChunk;

        r1 := @parameter0: ucar.nc2.iosp.hdf4.H4iosp;

        r2 := @parameter1: int[];

        r3 := @parameter2: ucar.nc2.iosp.hdf4.H4header$SpecialComp;

        r0.<ucar.nc2.iosp.hdf4.H4iosp$DataChunk: ucar.nc2.iosp.hdf4.H4iosp this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ucar.nc2.iosp.hdf4.H4iosp$DataChunk: int[] offset> = r2;

        r0.<ucar.nc2.iosp.hdf4.H4iosp$DataChunk: ucar.nc2.iosp.hdf4.H4header$SpecialComp compress> = r3;

        return;
    }

    public int[] getOffset()
    {
        ucar.nc2.iosp.hdf4.H4iosp$DataChunk r0;
        int[] $r1;

        r0 := @this: ucar.nc2.iosp.hdf4.H4iosp$DataChunk;

        $r1 = r0.<ucar.nc2.iosp.hdf4.H4iosp$DataChunk: int[] offset>;

        return $r1;
    }

    public java.nio.ByteBuffer getByteBuffer() throws java.io.IOException
    {
        byte[] $r18, $r23, r30;
        java.lang.IllegalStateException $r39;
        ucar.unidata.io.RandomAccessFile $r26, $r28;
        ucar.nc2.iosp.hdf4.H4iosp$LinkedInputStream $r34;
        java.nio.ByteBuffer $r1, $r19, $r24, $r32;
        ucar.nc2.iosp.hdf4.H4iosp$DataChunk r0;
        java.io.ByteArrayInputStream $r33;
        ucar.nc2.iosp.hdf4.H4header$TagData $r3;
        java.lang.StringBuilder $r12, $r14, $r38;
        ucar.nc2.iosp.hdf4.H4header$SpecialLinked $r4, $r6;
        java.io.ByteArrayOutputStream $r36, $r37;
        ucar.nc2.iosp.hdf4.H4iosp $r7, $r25, $r27;
        java.util.zip.InflaterInputStream $r35;
        long $l9;
        ucar.nc2.iosp.hdf4.H4header$SpecialComp $r2, $r8, $r9, $r13, $r17, $r22;
        short $s1, $s3, $s4;
        int $i0, $i2, $i5, $i6, $i7, $i8, $i10, $i11, $i12;
        java.lang.String $r15;
        java.io.InputStream r31;

        r0 := @this: ucar.nc2.iosp.hdf4.H4iosp$DataChunk;

        $r1 = r0.<ucar.nc2.iosp.hdf4.H4iosp$DataChunk: java.nio.ByteBuffer bb>;

        if $r1 != null goto label5;

        $r2 = r0.<ucar.nc2.iosp.hdf4.H4iosp$DataChunk: ucar.nc2.iosp.hdf4.H4header$SpecialComp compress>;

        $r3 = virtualinvoke $r2.<ucar.nc2.iosp.hdf4.H4header$SpecialComp: ucar.nc2.iosp.hdf4.H4header$TagData getDataTag()>();

        $r4 = $r3.<ucar.nc2.iosp.hdf4.H4header$TagData: ucar.nc2.iosp.hdf4.H4header$SpecialLinked linked>;

        if $r4 != null goto label1;

        $i7 = $r3.<ucar.nc2.iosp.hdf4.H4header$TagData: int length>;

        r30 = newarray (byte)[$i7];

        $r25 = r0.<ucar.nc2.iosp.hdf4.H4iosp$DataChunk: ucar.nc2.iosp.hdf4.H4iosp this$0>;

        $r26 = staticinvoke <ucar.nc2.iosp.hdf4.H4iosp: ucar.unidata.io.RandomAccessFile access$600(ucar.nc2.iosp.hdf4.H4iosp)>($r25);

        $i8 = $r3.<ucar.nc2.iosp.hdf4.H4header$TagData: int offset>;

        $l9 = (long) $i8;

        virtualinvoke $r26.<ucar.unidata.io.RandomAccessFile: void seek(long)>($l9);

        $r27 = r0.<ucar.nc2.iosp.hdf4.H4iosp$DataChunk: ucar.nc2.iosp.hdf4.H4iosp this$0>;

        $r28 = staticinvoke <ucar.nc2.iosp.hdf4.H4iosp: ucar.unidata.io.RandomAccessFile access$700(ucar.nc2.iosp.hdf4.H4iosp)>($r27);

        virtualinvoke $r28.<ucar.unidata.io.RandomAccessFile: void readFully(byte[])>(r30);

        $r33 = new java.io.ByteArrayInputStream;

        specialinvoke $r33.<java.io.ByteArrayInputStream: void <init>(byte[])>(r30);

        r31 = $r33;

        goto label2;

     label1:
        $r34 = new ucar.nc2.iosp.hdf4.H4iosp$LinkedInputStream;

        $r7 = r0.<ucar.nc2.iosp.hdf4.H4iosp$DataChunk: ucar.nc2.iosp.hdf4.H4iosp this$0>;

        $r6 = $r3.<ucar.nc2.iosp.hdf4.H4header$TagData: ucar.nc2.iosp.hdf4.H4header$SpecialLinked linked>;

        specialinvoke $r34.<ucar.nc2.iosp.hdf4.H4iosp$LinkedInputStream: void <init>(ucar.nc2.iosp.hdf4.H4iosp,ucar.nc2.iosp.hdf4.H4header$SpecialLinked)>($r7, $r6);

        r31 = $r34;

     label2:
        $r8 = r0.<ucar.nc2.iosp.hdf4.H4iosp$DataChunk: ucar.nc2.iosp.hdf4.H4header$SpecialComp compress>;

        $s1 = $r8.<ucar.nc2.iosp.hdf4.H4header$SpecialComp: short compress_type>;

        $i0 = <ucar.nc2.iosp.hdf4.TagEnum: int COMP_CODE_DEFLATE>;

        $i10 = (int) $s1;

        if $i10 != $i0 goto label3;

        $r35 = new java.util.zip.InflaterInputStream;

        specialinvoke $r35.<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream)>(r31);

        $r36 = new java.io.ByteArrayOutputStream;

        $r22 = r0.<ucar.nc2.iosp.hdf4.H4iosp$DataChunk: ucar.nc2.iosp.hdf4.H4header$SpecialComp compress>;

        $i6 = $r22.<ucar.nc2.iosp.hdf4.H4header$SpecialComp: int uncomp_length>;

        specialinvoke $r36.<java.io.ByteArrayOutputStream: void <init>(int)>($i6);

        staticinvoke <ucar.nc2.util.IO: long copy(java.io.InputStream,java.io.OutputStream)>($r35, $r36);

        $r23 = virtualinvoke $r36.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r24 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r23);

        r0.<ucar.nc2.iosp.hdf4.H4iosp$DataChunk: java.nio.ByteBuffer bb> = $r24;

        goto label5;

     label3:
        $r9 = r0.<ucar.nc2.iosp.hdf4.H4iosp$DataChunk: ucar.nc2.iosp.hdf4.H4header$SpecialComp compress>;

        $s3 = $r9.<ucar.nc2.iosp.hdf4.H4header$SpecialComp: short compress_type>;

        $i2 = <ucar.nc2.iosp.hdf4.TagEnum: int COMP_CODE_NONE>;

        $i11 = (int) $s3;

        if $i11 != $i2 goto label4;

        $r37 = new java.io.ByteArrayOutputStream;

        $r17 = r0.<ucar.nc2.iosp.hdf4.H4iosp$DataChunk: ucar.nc2.iosp.hdf4.H4header$SpecialComp compress>;

        $i5 = $r17.<ucar.nc2.iosp.hdf4.H4header$SpecialComp: int uncomp_length>;

        specialinvoke $r37.<java.io.ByteArrayOutputStream: void <init>(int)>($i5);

        staticinvoke <ucar.nc2.util.IO: long copy(java.io.InputStream,java.io.OutputStream)>(r31, $r37);

        $r18 = virtualinvoke $r37.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r19 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r18);

        r0.<ucar.nc2.iosp.hdf4.H4iosp$DataChunk: java.nio.ByteBuffer bb> = $r19;

        goto label5;

     label4:
        $r39 = new java.lang.IllegalStateException;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown compression type =");

        $r13 = r0.<ucar.nc2.iosp.hdf4.H4iosp$DataChunk: ucar.nc2.iosp.hdf4.H4header$SpecialComp compress>;

        $s4 = $r13.<ucar.nc2.iosp.hdf4.H4header$SpecialComp: short compress_type>;

        $i12 = (int) $s4;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r39.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r15);

        throw $r39;

     label5:
        $r32 = r0.<ucar.nc2.iosp.hdf4.H4iosp$DataChunk: java.nio.ByteBuffer bb>;

        return $r32;
    }
}
