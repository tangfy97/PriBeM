public abstract class org.springframework.util.NumberUtils extends java.lang.Object
{

    public void <init>()
    {
        org.springframework.util.NumberUtils r0;

        r0 := @this: org.springframework.util.NumberUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.Number convertNumberToTargetClass(java.lang.Number, java.lang.Class) throws java.lang.IllegalArgumentException
    {
        java.lang.Float $r29;
        java.lang.Integer $r27;
        java.math.BigDecimal $r19, $r31;
        byte $b3, $b4, $b6, $b7, $b9, $b10, $b11;
        java.lang.Long $r28;
        java.lang.Short $r26;
        java.math.BigInteger $r18, $r20;
        java.lang.Byte $r25;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        float $f0;
        java.lang.StringBuilder $r4, $r5, $r8, $r9, $r11, $r12, $r32;
        java.lang.Double $r30;
        long $l0, $l1, $l2, $l5, $l8;
        short $s12;
        int $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        java.lang.String $r7, $r10, $r13, $r15;
        java.lang.Number r0;
        double $d0;
        java.lang.IllegalArgumentException $r33;
        java.lang.Class r1, $r6;

        r0 := @parameter0: java.lang.Number;

        r1 := @parameter1: java.lang.Class;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Number must not be null");

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "Target class must not be null");

        $z0 = virtualinvoke r1.<java.lang.Class: boolean isInstance(java.lang.Object)>(r0);

        if $z0 == 0 goto label01;

        return r0;

     label01:
        $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Byte;");

        if $z1 == 0 goto label04;

        $l8 = virtualinvoke r0.<java.lang.Number: long longValue()>();

        $b9 = $l8 cmp -128L;

        $i14 = (int) $b9;

        if $i14 < 0 goto label02;

        $b10 = $l8 cmp 127L;

        $i15 = (int) $b10;

        if $i15 <= 0 goto label03;

     label02:
        staticinvoke <org.springframework.util.NumberUtils: void raiseOverflowException(java.lang.Number,java.lang.Class)>(r0, r1);

     label03:
        $r25 = new java.lang.Byte;

        $b11 = virtualinvoke r0.<java.lang.Number: byte byteValue()>();

        specialinvoke $r25.<java.lang.Byte: void <init>(byte)>($b11);

        return $r25;

     label04:
        $z2 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Short;");

        if $z2 == 0 goto label07;

        $l5 = virtualinvoke r0.<java.lang.Number: long longValue()>();

        $b6 = $l5 cmp -32768L;

        $i16 = (int) $b6;

        if $i16 < 0 goto label05;

        $b7 = $l5 cmp 32767L;

        $i17 = (int) $b7;

        if $i17 <= 0 goto label06;

     label05:
        staticinvoke <org.springframework.util.NumberUtils: void raiseOverflowException(java.lang.Number,java.lang.Class)>(r0, r1);

     label06:
        $r26 = new java.lang.Short;

        $s12 = virtualinvoke r0.<java.lang.Number: short shortValue()>();

        specialinvoke $r26.<java.lang.Short: void <init>(short)>($s12);

        return $r26;

     label07:
        $z3 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Integer;");

        if $z3 == 0 goto label10;

        $l2 = virtualinvoke r0.<java.lang.Number: long longValue()>();

        $b3 = $l2 cmp -2147483648L;

        $i18 = (int) $b3;

        if $i18 < 0 goto label08;

        $b4 = $l2 cmp 2147483647L;

        $i19 = (int) $b4;

        if $i19 <= 0 goto label09;

     label08:
        staticinvoke <org.springframework.util.NumberUtils: void raiseOverflowException(java.lang.Number,java.lang.Class)>(r0, r1);

     label09:
        $r27 = new java.lang.Integer;

        $i13 = virtualinvoke r0.<java.lang.Number: int intValue()>();

        specialinvoke $r27.<java.lang.Integer: void <init>(int)>($i13);

        return $r27;

     label10:
        $z4 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Long;");

        if $z4 == 0 goto label11;

        $r28 = new java.lang.Long;

        $l1 = virtualinvoke r0.<java.lang.Number: long longValue()>();

        specialinvoke $r28.<java.lang.Long: void <init>(long)>($l1);

        return $r28;

     label11:
        $z5 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/math/BigInteger;");

        if $z5 == 0 goto label13;

        $z9 = r0 instanceof java.math.BigDecimal;

        if $z9 == 0 goto label12;

        $r19 = (java.math.BigDecimal) r0;

        $r20 = virtualinvoke $r19.<java.math.BigDecimal: java.math.BigInteger toBigInteger()>();

        return $r20;

     label12:
        $l0 = virtualinvoke r0.<java.lang.Number: long longValue()>();

        $r18 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l0);

        return $r18;

     label13:
        $z6 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Float;");

        if $z6 == 0 goto label14;

        $r29 = new java.lang.Float;

        $f0 = virtualinvoke r0.<java.lang.Number: float floatValue()>();

        specialinvoke $r29.<java.lang.Float: void <init>(float)>($f0);

        return $r29;

     label14:
        $z7 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Double;");

        if $z7 == 0 goto label15;

        $r30 = new java.lang.Double;

        $d0 = virtualinvoke r0.<java.lang.Number: double doubleValue()>();

        specialinvoke $r30.<java.lang.Double: void <init>(double)>($d0);

        return $r30;

     label15:
        $z8 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/math/BigDecimal;");

        if $z8 == 0 goto label16;

        $r31 = new java.math.BigDecimal;

        $r15 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r31.<java.math.BigDecimal: void <init>(java.lang.String)>($r15);

        return $r31;

     label16:
        $r33 = new java.lang.IllegalArgumentException;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not convert number [");

        $r4 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] of type [");

        $r6 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] to unknown target class [");

        $r10 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r33.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r33;
    }

    private static void raiseOverflowException(java.lang.Number, java.lang.Class)
    {
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r7, $r8, $r11, $r12;
        java.lang.Class $r5, r9;
        java.lang.String $r6, $r10, $r13;
        java.lang.Number r2;

        r2 := @parameter0: java.lang.Number;

        r9 := @parameter1: java.lang.Class;

        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not convert number [");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] of type [");

        $r5 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] to target class [");

        $r10 = virtualinvoke r9.<java.lang.Class: java.lang.String getName()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]: overflow");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r0;
    }

    public static java.lang.Number parseNumber(java.lang.String, java.lang.Class)
    {
        java.lang.Float $r13;
        java.lang.Integer $r16;
        java.math.BigDecimal $r3;
        java.lang.Long $r17;
        java.lang.Short $r15;
        java.math.BigInteger $r18;
        java.lang.Byte $r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        java.lang.StringBuilder $r5, $r6, $r7, $r9, $r10;
        java.lang.Double $r12;
        java.lang.String r0, $r2, $r8, $r11;
        java.lang.IllegalArgumentException $r4;
        java.lang.Class r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Class;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Text must not be null");

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "Target class must not be null");

        $r2 = staticinvoke <org.springframework.util.StringUtils: java.lang.String trimAllWhitespace(java.lang.String)>(r0);

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Byte;");

        if $z0 == 0 goto label03;

        $z13 = staticinvoke <org.springframework.util.NumberUtils: boolean isHexNumber(java.lang.String)>($r2);

        if $z13 == 0 goto label01;

        $r14 = staticinvoke <java.lang.Byte: java.lang.Byte decode(java.lang.String)>($r2);

        goto label02;

     label01:
        $r14 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(java.lang.String)>($r2);

     label02:
        return $r14;

     label03:
        $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Short;");

        if $z1 == 0 goto label06;

        $z12 = staticinvoke <org.springframework.util.NumberUtils: boolean isHexNumber(java.lang.String)>($r2);

        if $z12 == 0 goto label04;

        $r15 = staticinvoke <java.lang.Short: java.lang.Short decode(java.lang.String)>($r2);

        goto label05;

     label04:
        $r15 = staticinvoke <java.lang.Short: java.lang.Short valueOf(java.lang.String)>($r2);

     label05:
        return $r15;

     label06:
        $z2 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Integer;");

        if $z2 == 0 goto label09;

        $z11 = staticinvoke <org.springframework.util.NumberUtils: boolean isHexNumber(java.lang.String)>($r2);

        if $z11 == 0 goto label07;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer decode(java.lang.String)>($r2);

        goto label08;

     label07:
        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r2);

     label08:
        return $r16;

     label09:
        $z3 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Long;");

        if $z3 == 0 goto label12;

        $z10 = staticinvoke <org.springframework.util.NumberUtils: boolean isHexNumber(java.lang.String)>($r2);

        if $z10 == 0 goto label10;

        $r17 = staticinvoke <java.lang.Long: java.lang.Long decode(java.lang.String)>($r2);

        goto label11;

     label10:
        $r17 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>($r2);

     label11:
        return $r17;

     label12:
        $z4 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/math/BigInteger;");

        if $z4 == 0 goto label15;

        $z9 = staticinvoke <org.springframework.util.NumberUtils: boolean isHexNumber(java.lang.String)>($r2);

        if $z9 == 0 goto label13;

        $r18 = staticinvoke <org.springframework.util.NumberUtils: java.math.BigInteger decodeBigInteger(java.lang.String)>($r2);

        goto label14;

     label13:
        $r18 = new java.math.BigInteger;

        specialinvoke $r18.<java.math.BigInteger: void <init>(java.lang.String)>($r2);

     label14:
        return $r18;

     label15:
        $z5 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Float;");

        if $z5 == 0 goto label16;

        $r13 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>($r2);

        return $r13;

     label16:
        $z6 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Double;");

        if $z6 == 0 goto label17;

        $r12 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>($r2);

        return $r12;

     label17:
        $z7 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/math/BigDecimal;");

        if $z7 != 0 goto label18;

        $z8 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Number;");

        if $z8 == 0 goto label19;

     label18:
        $r3 = new java.math.BigDecimal;

        specialinvoke $r3.<java.math.BigDecimal: void <init>(java.lang.String)>($r2);

        return $r3;

     label19:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot convert String [");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] to target class [");

        $r8 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r4;
    }

    public static java.lang.Number parseNumber(java.lang.String, java.lang.Class, java.text.NumberFormat)
    {
        java.lang.Throwable $r5;
        java.text.NumberFormat r0;
        java.lang.String r1, $r9, $r11, $r13;
        java.lang.Number $r3, $r14, $r15;
        java.text.ParseException $r6;
        boolean $z0, $z1, $z2, z3, z4, z5;
        java.text.DecimalFormat r12;
        java.lang.IllegalArgumentException $r7;
        java.lang.Class r2, $r4;
        java.lang.StringBuilder $r8, $r10;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class;

        r0 := @parameter2: java.text.NumberFormat;

        if r0 == null goto label7;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "Text must not be null");

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r2, "Target class must not be null");

        r12 = null;

        z3 = 0;

        z5 = 0;

        z4 = 0;

        $z0 = r0 instanceof java.text.DecimalFormat;

        if $z0 == 0 goto label1;

        r12 = (java.text.DecimalFormat) r0;

        $r4 = class "Ljava/math/BigDecimal;";

        $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

        if $z1 == 0 goto label1;

        $z2 = virtualinvoke r12.<java.text.DecimalFormat: boolean isParseBigDecimal()>();

        if $z2 != 0 goto label1;

        virtualinvoke r12.<java.text.DecimalFormat: void setParseBigDecimal(boolean)>(1);

        z3 = 1;

        z5 = 1;

        z4 = 1;

     label1:
        $r13 = staticinvoke <org.springframework.util.StringUtils: java.lang.String trimAllWhitespace(java.lang.String)>(r1);

        $r14 = virtualinvoke r0.<java.text.NumberFormat: java.lang.Number parse(java.lang.String)>($r13);

        $r15 = staticinvoke <org.springframework.util.NumberUtils: java.lang.Number convertNumberToTargetClass(java.lang.Number,java.lang.Class)>($r14, r2);

     label2:
        if z4 == 0 goto label3;

        virtualinvoke r12.<java.text.DecimalFormat: void setParseBigDecimal(boolean)>(0);

     label3:
        return $r15;

     label4:
        $r6 := @caughtexception;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not parse number: ");

        $r9 = virtualinvoke $r6.<java.text.ParseException: java.lang.String getMessage()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label5:
        $r5 := @caughtexception;

        if z5 == 0 goto label6;

        virtualinvoke r12.<java.text.DecimalFormat: void setParseBigDecimal(boolean)>(0);

     label6:
        throw $r5;

     label7:
        $r3 = staticinvoke <org.springframework.util.NumberUtils: java.lang.Number parseNumber(java.lang.String,java.lang.Class)>(r1, r2);

        return $r3;

        catch java.text.ParseException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label4 to label5 with label5;
    }

    private static boolean isHexNumber(java.lang.String)
    {
        byte $b0, $b1, $b2;
        java.lang.String r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("-");

        if $z0 == 0 goto label1;

        $b2 = 1;

        $b1 = 1;

        $b0 = 1;

        goto label2;

     label1:
        $b2 = 0;

        $b1 = 0;

        $b0 = 0;

     label2:
        $z1 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0x", $b2);

        if $z1 != 0 goto label3;

        $z2 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0X", $b0);

        if $z2 != 0 goto label3;

        $z3 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String,int)>("#", $b1);

        if $z3 != 0 goto label3;

        return 0;

     label3:
        return 1;
    }

    private static java.math.BigInteger decodeBigInteger(java.lang.String)
    {
        byte b2, b4, b5, b6, b7;
        int $i0, $i1, i3;
        java.math.BigInteger $r1, $r3;
        java.lang.String r0, $r2;
        boolean $z0, $z1, $z2, $z3, $z4, z5, z6, z7, z8, z9;

        r0 := @parameter0: java.lang.String;

        b2 = 10;

        i3 = 0;

        b7 = 0;

        b6 = 0;

        z9 = 0;

        b5 = 0;

        z8 = 0;

        z7 = 0;

        z6 = 0;

        b4 = 0;

        z5 = 0;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("-");

        if $z0 == 0 goto label1;

        z5 = 1;

        i3 = 1;

        b7 = 1;

        b6 = 1;

        z9 = 1;

        b5 = 1;

        z8 = 1;

        z7 = 1;

        z6 = 1;

        b4 = 1;

     label1:
        $z1 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0x", b5);

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0X", b6);

        if $z2 == 0 goto label3;

     label2:
        i3 = z8 + 2;

        b2 = 16;

        goto label5;

     label3:
        $z3 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String,int)>("#", b7);

        if $z3 == 0 goto label4;

        i3 = z6 + 1;

        b2 = 16;

        goto label5;

     label4:
        $z4 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0", b4);

        if $z4 == 0 goto label5;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = 1 + z9;

        if $i0 <= $i1 goto label5;

        i3 = z7 + 1;

        b2 = 8;

     label5:
        $r1 = new java.math.BigInteger;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i3);

        specialinvoke $r1.<java.math.BigInteger: void <init>(java.lang.String,int)>($r2, b2);

        if z5 == 0 goto label6;

        $r3 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger negate()>();

        goto label7;

     label6:
        $r3 = $r1;

     label7:
        return $r3;
    }
}
