public class org.apache.velocity.runtime.log.Log extends java.lang.Object
{
    private org.apache.velocity.runtime.log.LogChute chute;

    public void <init>()
    {
        org.apache.velocity.runtime.log.Log r0;
        org.apache.velocity.runtime.log.HoldingLogChute $r1;

        r0 := @this: org.apache.velocity.runtime.log.Log;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.velocity.runtime.log.HoldingLogChute;

        specialinvoke $r1.<org.apache.velocity.runtime.log.HoldingLogChute: void <init>()>();

        virtualinvoke r0.<org.apache.velocity.runtime.log.Log: void setLogChute(org.apache.velocity.runtime.log.LogChute)>($r1);

        return;
    }

    public void <init>(org.apache.velocity.runtime.log.LogChute)
    {
        org.apache.velocity.runtime.log.Log r0;
        org.apache.velocity.runtime.log.LogChute r1;

        r0 := @this: org.apache.velocity.runtime.log.Log;

        r1 := @parameter0: org.apache.velocity.runtime.log.LogChute;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<org.apache.velocity.runtime.log.Log: void setLogChute(org.apache.velocity.runtime.log.LogChute)>(r1);

        return;
    }

    protected void setLogChute(org.apache.velocity.runtime.log.LogChute)
    {
        org.apache.velocity.runtime.log.Log r1;
        org.apache.velocity.runtime.log.LogChute r0;
        java.lang.NullPointerException $r2;

        r1 := @this: org.apache.velocity.runtime.log.Log;

        r0 := @parameter0: org.apache.velocity.runtime.log.LogChute;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("The LogChute cannot be set to null!");

        throw $r2;

     label1:
        r1.<org.apache.velocity.runtime.log.Log: org.apache.velocity.runtime.log.LogChute chute> = r0;

        return;
    }

    protected org.apache.velocity.runtime.log.LogChute getLogChute()
    {
        org.apache.velocity.runtime.log.Log r0;
        org.apache.velocity.runtime.log.LogChute $r1;

        r0 := @this: org.apache.velocity.runtime.log.Log;

        $r1 = r0.<org.apache.velocity.runtime.log.Log: org.apache.velocity.runtime.log.LogChute chute>;

        return $r1;
    }

    protected void log(int, java.lang.Object)
    {
        org.apache.velocity.runtime.log.Log r0;
        int i0;
        java.lang.Object r2;
        java.lang.String $r3;
        org.apache.velocity.runtime.log.LogChute $r1;

        r0 := @this: org.apache.velocity.runtime.log.Log;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.Object;

        $r1 = virtualinvoke r0.<org.apache.velocity.runtime.log.Log: org.apache.velocity.runtime.log.LogChute getLogChute()>();

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        interfaceinvoke $r1.<org.apache.velocity.runtime.log.LogChute: void log(int,java.lang.String)>(i0, $r3);

        return;
    }

    protected void log(int, java.lang.Object, java.lang.Throwable)
    {
        org.apache.velocity.runtime.log.Log r0;
        java.lang.Throwable r4;
        int i0;
        java.lang.Object r2;
        java.lang.String $r3;
        org.apache.velocity.runtime.log.LogChute $r1;

        r0 := @this: org.apache.velocity.runtime.log.Log;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.Object;

        r4 := @parameter2: java.lang.Throwable;

        $r1 = virtualinvoke r0.<org.apache.velocity.runtime.log.Log: org.apache.velocity.runtime.log.LogChute getLogChute()>();

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        interfaceinvoke $r1.<org.apache.velocity.runtime.log.LogChute: void log(int,java.lang.String,java.lang.Throwable)>(i0, $r3, r4);

        return;
    }

    public boolean isTraceEnabled()
    {
        org.apache.velocity.runtime.log.Log r0;
        int $i1;
        org.apache.velocity.runtime.log.LogChute $r1;
        boolean $z0;

        r0 := @this: org.apache.velocity.runtime.log.Log;

        $r1 = virtualinvoke r0.<org.apache.velocity.runtime.log.Log: org.apache.velocity.runtime.log.LogChute getLogChute()>();

        $i1 = (int) -1;

        $z0 = interfaceinvoke $r1.<org.apache.velocity.runtime.log.LogChute: boolean isLevelEnabled(int)>($i1);

        return $z0;
    }

    public void trace(java.lang.Object)
    {
        org.apache.velocity.runtime.log.Log r0;
        int $i1;
        java.lang.Object r1;

        r0 := @this: org.apache.velocity.runtime.log.Log;

        r1 := @parameter0: java.lang.Object;

        $i1 = (int) -1;

        virtualinvoke r0.<org.apache.velocity.runtime.log.Log: void log(int,java.lang.Object)>($i1, r1);

        return;
    }

    public void trace(java.lang.Object, java.lang.Throwable)
    {
        org.apache.velocity.runtime.log.Log r0;
        java.lang.Throwable r2;
        int $i1;
        java.lang.Object r1;

        r0 := @this: org.apache.velocity.runtime.log.Log;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Throwable;

        $i1 = (int) -1;

        virtualinvoke r0.<org.apache.velocity.runtime.log.Log: void log(int,java.lang.Object,java.lang.Throwable)>($i1, r1, r2);

        return;
    }

    public boolean isDebugEnabled()
    {
        org.apache.velocity.runtime.log.Log r0;
        org.apache.velocity.runtime.log.LogChute $r1;
        boolean $z0;

        r0 := @this: org.apache.velocity.runtime.log.Log;

        $r1 = virtualinvoke r0.<org.apache.velocity.runtime.log.Log: org.apache.velocity.runtime.log.LogChute getLogChute()>();

        $z0 = interfaceinvoke $r1.<org.apache.velocity.runtime.log.LogChute: boolean isLevelEnabled(int)>(0);

        return $z0;
    }

    public void debug(java.lang.Object)
    {
        org.apache.velocity.runtime.log.Log r0;
        java.lang.Object r1;

        r0 := @this: org.apache.velocity.runtime.log.Log;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<org.apache.velocity.runtime.log.Log: void log(int,java.lang.Object)>(0, r1);

        return;
    }

    public void debug(java.lang.Object, java.lang.Throwable)
    {
        org.apache.velocity.runtime.log.Log r0;
        java.lang.Throwable r2;
        java.lang.Object r1;

        r0 := @this: org.apache.velocity.runtime.log.Log;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Throwable;

        virtualinvoke r0.<org.apache.velocity.runtime.log.Log: void log(int,java.lang.Object,java.lang.Throwable)>(0, r1, r2);

        return;
    }

    public boolean isInfoEnabled()
    {
        org.apache.velocity.runtime.log.Log r0;
        org.apache.velocity.runtime.log.LogChute $r1;
        boolean $z0;

        r0 := @this: org.apache.velocity.runtime.log.Log;

        $r1 = virtualinvoke r0.<org.apache.velocity.runtime.log.Log: org.apache.velocity.runtime.log.LogChute getLogChute()>();

        $z0 = interfaceinvoke $r1.<org.apache.velocity.runtime.log.LogChute: boolean isLevelEnabled(int)>(1);

        return $z0;
    }

    public void info(java.lang.Object)
    {
        org.apache.velocity.runtime.log.Log r0;
        java.lang.Object r1;

        r0 := @this: org.apache.velocity.runtime.log.Log;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<org.apache.velocity.runtime.log.Log: void log(int,java.lang.Object)>(1, r1);

        return;
    }

    public void info(java.lang.Object, java.lang.Throwable)
    {
        org.apache.velocity.runtime.log.Log r0;
        java.lang.Throwable r2;
        java.lang.Object r1;

        r0 := @this: org.apache.velocity.runtime.log.Log;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Throwable;

        virtualinvoke r0.<org.apache.velocity.runtime.log.Log: void log(int,java.lang.Object,java.lang.Throwable)>(1, r1, r2);

        return;
    }

    public boolean isWarnEnabled()
    {
        org.apache.velocity.runtime.log.Log r0;
        org.apache.velocity.runtime.log.LogChute $r1;
        boolean $z0;

        r0 := @this: org.apache.velocity.runtime.log.Log;

        $r1 = virtualinvoke r0.<org.apache.velocity.runtime.log.Log: org.apache.velocity.runtime.log.LogChute getLogChute()>();

        $z0 = interfaceinvoke $r1.<org.apache.velocity.runtime.log.LogChute: boolean isLevelEnabled(int)>(2);

        return $z0;
    }

    public void warn(java.lang.Object)
    {
        org.apache.velocity.runtime.log.Log r0;
        java.lang.Object r1;

        r0 := @this: org.apache.velocity.runtime.log.Log;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<org.apache.velocity.runtime.log.Log: void log(int,java.lang.Object)>(2, r1);

        return;
    }

    public void warn(java.lang.Object, java.lang.Throwable)
    {
        org.apache.velocity.runtime.log.Log r0;
        java.lang.Throwable r2;
        java.lang.Object r1;

        r0 := @this: org.apache.velocity.runtime.log.Log;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Throwable;

        virtualinvoke r0.<org.apache.velocity.runtime.log.Log: void log(int,java.lang.Object,java.lang.Throwable)>(2, r1, r2);

        return;
    }

    public boolean isErrorEnabled()
    {
        org.apache.velocity.runtime.log.Log r0;
        org.apache.velocity.runtime.log.LogChute $r1;
        boolean $z0;

        r0 := @this: org.apache.velocity.runtime.log.Log;

        $r1 = virtualinvoke r0.<org.apache.velocity.runtime.log.Log: org.apache.velocity.runtime.log.LogChute getLogChute()>();

        $z0 = interfaceinvoke $r1.<org.apache.velocity.runtime.log.LogChute: boolean isLevelEnabled(int)>(3);

        return $z0;
    }

    public void error(java.lang.Object)
    {
        org.apache.velocity.runtime.log.Log r0;
        java.lang.Object r1;

        r0 := @this: org.apache.velocity.runtime.log.Log;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<org.apache.velocity.runtime.log.Log: void log(int,java.lang.Object)>(3, r1);

        return;
    }

    public void error(java.lang.Object, java.lang.Throwable)
    {
        org.apache.velocity.runtime.log.Log r0;
        java.lang.Throwable r2;
        java.lang.Object r1;

        r0 := @this: org.apache.velocity.runtime.log.Log;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Throwable;

        virtualinvoke r0.<org.apache.velocity.runtime.log.Log: void log(int,java.lang.Object,java.lang.Throwable)>(3, r1, r2);

        return;
    }

    public static final java.lang.String formatFileString(org.apache.velocity.runtime.directive.Directive)
    {
        org.apache.velocity.runtime.directive.Directive r0;
        int $i0, $i1;
        java.lang.String $r1, $r2;

        r0 := @parameter0: org.apache.velocity.runtime.directive.Directive;

        $r1 = virtualinvoke r0.<org.apache.velocity.runtime.directive.Directive: java.lang.String getTemplateName()>();

        $i0 = virtualinvoke r0.<org.apache.velocity.runtime.directive.Directive: int getLine()>();

        $i1 = virtualinvoke r0.<org.apache.velocity.runtime.directive.Directive: int getColumn()>();

        $r2 = staticinvoke <org.apache.velocity.runtime.log.Log: java.lang.String formatFileString(java.lang.String,int,int)>($r1, $i0, $i1);

        return $r2;
    }

    public static final java.lang.String formatFileString(org.apache.velocity.runtime.parser.node.Node)
    {
        int $i0, $i1;
        java.lang.String $r1, $r2;
        org.apache.velocity.runtime.parser.node.Node r0;

        r0 := @parameter0: org.apache.velocity.runtime.parser.node.Node;

        $r1 = interfaceinvoke r0.<org.apache.velocity.runtime.parser.node.Node: java.lang.String getTemplateName()>();

        $i0 = interfaceinvoke r0.<org.apache.velocity.runtime.parser.node.Node: int getLine()>();

        $i1 = interfaceinvoke r0.<org.apache.velocity.runtime.parser.node.Node: int getColumn()>();

        $r2 = staticinvoke <org.apache.velocity.runtime.log.Log: java.lang.String formatFileString(java.lang.String,int,int)>($r1, $i0, $i1);

        return $r2;
    }

    public static final java.lang.String formatFileString(org.apache.velocity.util.introspection.Info)
    {
        int $i0, $i1;
        java.lang.String $r1, $r2;
        org.apache.velocity.util.introspection.Info r0;

        r0 := @parameter0: org.apache.velocity.util.introspection.Info;

        $r1 = virtualinvoke r0.<org.apache.velocity.util.introspection.Info: java.lang.String getTemplateName()>();

        $i0 = virtualinvoke r0.<org.apache.velocity.util.introspection.Info: int getLine()>();

        $i1 = virtualinvoke r0.<org.apache.velocity.util.introspection.Info: int getColumn()>();

        $r2 = staticinvoke <org.apache.velocity.runtime.log.Log: java.lang.String formatFileString(java.lang.String,int,int)>($r1, $i0, $i1);

        return $r2;
    }

    public static final java.lang.String formatFileString(java.lang.String, int, int)
    {
        java.lang.StringBuffer $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        int i0, i1;
        java.lang.String r0, $r8;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label2;

     label1:
        r0 = "<unknown template>";

     label2:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[line ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", column ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r8;
    }
}
