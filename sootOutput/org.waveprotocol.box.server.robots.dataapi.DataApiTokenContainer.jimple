public final class org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer extends java.lang.Object
{
    private static final org.waveprotocol.wave.util.logging.Log LOG;
    private static final int TOKEN_LENGTH;
    private static final int REQUEST_TOKEN_EXPIRATION;
    public static final int ACCESS_TOKEN_EXPIRATION;
    public static final java.lang.String USER_PROPERTY_NAME;
    private java.util.concurrent.ConcurrentMap requestTokenAccessors;
    private java.util.concurrent.ConcurrentMap accessTokenAccessors;
    private final org.waveprotocol.wave.model.id.TokenGenerator tokenGenerator;

    void <init>(org.waveprotocol.wave.model.id.TokenGenerator)
    {
        org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer r0;
        org.waveprotocol.wave.model.id.TokenGenerator r1;
        java.util.concurrent.ConcurrentMap $r5, $r9;
        java.util.concurrent.TimeUnit $r3, $r7;
        com.google.common.collect.MapMaker $r2, $r4, $r6, $r8;

        r0 := @this: org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer;

        r1 := @parameter0: org.waveprotocol.wave.model.id.TokenGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer: org.waveprotocol.wave.model.id.TokenGenerator tokenGenerator> = r1;

        $r2 = new com.google.common.collect.MapMaker;

        specialinvoke $r2.<com.google.common.collect.MapMaker: void <init>()>();

        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $r4 = virtualinvoke $r2.<com.google.common.collect.MapMaker: com.google.common.collect.MapMaker expireAfterWrite(long,java.util.concurrent.TimeUnit)>(10L, $r3);

        $r5 = virtualinvoke $r4.<com.google.common.collect.MapMaker: java.util.concurrent.ConcurrentMap makeMap()>();

        r0.<org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer: java.util.concurrent.ConcurrentMap requestTokenAccessors> = $r5;

        $r6 = new com.google.common.collect.MapMaker;

        specialinvoke $r6.<com.google.common.collect.MapMaker: void <init>()>();

        $r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $r8 = virtualinvoke $r6.<com.google.common.collect.MapMaker: com.google.common.collect.MapMaker expireAfterWrite(long,java.util.concurrent.TimeUnit)>(60L, $r7);

        $r9 = virtualinvoke $r8.<com.google.common.collect.MapMaker: java.util.concurrent.ConcurrentMap makeMap()>();

        r0.<org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer: java.util.concurrent.ConcurrentMap accessTokenAccessors> = $r9;

        return;
    }

    public net.oauth.OAuthAccessor getRequestTokenAccessor(java.lang.String) throws net.oauth.OAuthProblemException
    {
        net.oauth.OAuthAccessor r4, $r5;
        org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer r0;
        java.lang.Object $r3;
        java.lang.String r1;
        net.oauth.OAuthProblemException $r6;
        java.util.concurrent.ConcurrentMap $r2;

        r0 := @this: org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer: java.util.concurrent.ConcurrentMap requestTokenAccessors>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (net.oauth.OAuthAccessor) $r3;

        if r4 != null goto label1;

        $r6 = staticinvoke <org.waveprotocol.box.server.util.OAuthUtil: net.oauth.OAuthProblemException newOAuthProblemException(java.lang.String)>("token_rejected");

        virtualinvoke $r6.<net.oauth.OAuthProblemException: void setParameter(java.lang.String,java.lang.Object)>("oauth_token", r1);

        throw $r6;

     label1:
        $r5 = virtualinvoke r4.<net.oauth.OAuthAccessor: net.oauth.OAuthAccessor clone()>();

        return $r5;
    }

    public net.oauth.OAuthAccessor getAccessTokenAccessor(java.lang.String) throws net.oauth.OAuthProblemException
    {
        net.oauth.OAuthAccessor r4, $r5;
        org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer r0;
        java.lang.Object $r3;
        java.lang.String r1;
        net.oauth.OAuthProblemException $r6;
        java.util.concurrent.ConcurrentMap $r2;

        r0 := @this: org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer: java.util.concurrent.ConcurrentMap accessTokenAccessors>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (net.oauth.OAuthAccessor) $r3;

        if r4 != null goto label1;

        $r6 = staticinvoke <org.waveprotocol.box.server.util.OAuthUtil: net.oauth.OAuthProblemException newOAuthProblemException(java.lang.String)>("token_rejected");

        virtualinvoke $r6.<net.oauth.OAuthProblemException: void setParameter(java.lang.String,java.lang.Object)>("oauth_token", r1);

        throw $r6;

     label1:
        $r5 = virtualinvoke r4.<net.oauth.OAuthAccessor: net.oauth.OAuthAccessor clone()>();

        return $r5;
    }

    public net.oauth.OAuthAccessor generateRequestToken(net.oauth.OAuthConsumer)
    {
        org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer r2;
        java.util.concurrent.ConcurrentMap $r6;
        net.oauth.OAuthAccessor $r1, $r8;
        net.oauth.OAuthConsumer r0;
        java.lang.Object $r7;
        java.lang.String $r3, $r4, $r5;

        r2 := @this: org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer;

        r0 := @parameter0: net.oauth.OAuthConsumer;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "Consumer must not be null");

        $r1 = new net.oauth.OAuthAccessor;

        specialinvoke $r1.<net.oauth.OAuthAccessor: void <init>(net.oauth.OAuthConsumer)>(r0);

        $r3 = specialinvoke r2.<org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer: java.lang.String generateToken()>();

        $r1.<net.oauth.OAuthAccessor: java.lang.String tokenSecret> = $r3;

     label1:
        $r4 = specialinvoke r2.<org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer: java.lang.String generateToken()>();

        $r1.<net.oauth.OAuthAccessor: java.lang.String requestToken> = $r4;

        $r6 = r2.<org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer: java.util.concurrent.ConcurrentMap requestTokenAccessors>;

        $r5 = $r1.<net.oauth.OAuthAccessor: java.lang.String requestToken>;

        $r7 = interfaceinvoke $r6.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r5, $r1);

        if $r7 != null goto label1;

        $r8 = virtualinvoke $r1.<net.oauth.OAuthAccessor: net.oauth.OAuthAccessor clone()>();

        return $r8;
    }

    public net.oauth.OAuthAccessor authorizeRequestToken(java.lang.String, org.waveprotocol.wave.model.wave.ParticipantId) throws net.oauth.OAuthProblemException
    {
        org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer r1;
        org.waveprotocol.wave.model.wave.ParticipantId r0;
        net.oauth.OAuthProblemException $r12;
        java.util.concurrent.ConcurrentMap $r5;
        net.oauth.OAuthAccessor $r3, $r11;
        java.lang.Object $r4;
        java.lang.StringBuilder $r6, $r8, $r9;
        org.waveprotocol.wave.util.logging.Log $r7;
        java.lang.String r2, $r10;

        r1 := @this: org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "User must not be null");

        $r3 = virtualinvoke r1.<org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer: net.oauth.OAuthAccessor getRequestTokenAccessor(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<net.oauth.OAuthAccessor: java.lang.Object getProperty(java.lang.String)>("user");

        if $r4 == null goto label1;

        $r12 = staticinvoke <org.waveprotocol.box.server.util.OAuthUtil: net.oauth.OAuthProblemException newOAuthProblemException(java.lang.String)>("token_used");

        throw $r12;

     label1:
        virtualinvoke $r3.<net.oauth.OAuthAccessor: void setProperty(java.lang.String,java.lang.Object)>("user", r0);

        $r5 = r1.<org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer: java.util.concurrent.ConcurrentMap requestTokenAccessors>;

        interfaceinvoke $r5.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r3);

        $r7 = <org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer: org.waveprotocol.wave.util.logging.Log LOG>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Authorized request token for ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String)>($r10);

        $r11 = virtualinvoke $r3.<net.oauth.OAuthAccessor: net.oauth.OAuthAccessor clone()>();

        return $r11;
    }

    public void rejectRequestToken(java.lang.String) throws net.oauth.OAuthProblemException
    {
        org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer r0;
        net.oauth.OAuthProblemException $r10;
        java.util.concurrent.ConcurrentMap $r4;
        net.oauth.OAuthAccessor $r2;
        java.lang.Object $r3;
        java.lang.StringBuilder $r5, $r7, $r8;
        org.waveprotocol.wave.util.logging.Log $r6;
        java.lang.String r1, $r9;

        r0 := @this: org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer: net.oauth.OAuthAccessor getRequestTokenAccessor(java.lang.String)>(r1);

        $r3 = virtualinvoke $r2.<net.oauth.OAuthAccessor: java.lang.Object getProperty(java.lang.String)>("user");

        if $r3 == null goto label1;

        $r10 = staticinvoke <org.waveprotocol.box.server.util.OAuthUtil: net.oauth.OAuthProblemException newOAuthProblemException(java.lang.String)>("token_used");

        throw $r10;

     label1:
        $r4 = r0.<org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer: java.util.concurrent.ConcurrentMap requestTokenAccessors>;

        interfaceinvoke $r4.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>(r1);

        $r6 = <org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer: org.waveprotocol.wave.util.logging.Log LOG>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Rejected request token ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String)>($r9);

        return;
    }

    public net.oauth.OAuthAccessor generateAccessToken(java.lang.String) throws net.oauth.OAuthProblemException
    {
        net.oauth.OAuthProblemException $r18;
        java.util.concurrent.ConcurrentMap $r7, $r10;
        org.waveprotocol.wave.util.logging.Log $r12;
        java.lang.String r1, $r4, $r5, $r6, $r9, $r16;
        org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer r0;
        net.oauth.OAuthAccessor $r2, $r17;
        java.lang.Object $r3, $r8, $r14;
        java.lang.StringBuilder $r11, $r13, $r15;

        r0 := @this: org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer: net.oauth.OAuthAccessor getRequestTokenAccessor(java.lang.String)>(r1);

        $r3 = virtualinvoke $r2.<net.oauth.OAuthAccessor: java.lang.Object getProperty(java.lang.String)>("user");

        if $r3 != null goto label1;

        $r18 = staticinvoke <org.waveprotocol.box.server.util.OAuthUtil: net.oauth.OAuthProblemException newOAuthProblemException(java.lang.String)>("permission_unknown");

        throw $r18;

     label1:
        $r4 = specialinvoke r0.<org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer: java.lang.String generateToken()>();

        $r2.<net.oauth.OAuthAccessor: java.lang.String tokenSecret> = $r4;

     label2:
        $r5 = specialinvoke r0.<org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer: java.lang.String generateToken()>();

        $r2.<net.oauth.OAuthAccessor: java.lang.String accessToken> = $r5;

        $r7 = r0.<org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer: java.util.concurrent.ConcurrentMap accessTokenAccessors>;

        $r6 = $r2.<net.oauth.OAuthAccessor: java.lang.String accessToken>;

        $r8 = interfaceinvoke $r7.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r6, $r2);

        if $r8 != null goto label2;

        $r10 = r0.<org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer: java.util.concurrent.ConcurrentMap requestTokenAccessors>;

        $r9 = $r2.<net.oauth.OAuthAccessor: java.lang.String requestToken>;

        interfaceinvoke $r10.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>($r9);

        $r12 = <org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer: org.waveprotocol.wave.util.logging.Log LOG>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Generated access token for ");

        $r14 = virtualinvoke $r2.<net.oauth.OAuthAccessor: java.lang.Object getProperty(java.lang.String)>("user");

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r12.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String)>($r16);

        $r17 = virtualinvoke $r2.<net.oauth.OAuthAccessor: net.oauth.OAuthAccessor clone()>();

        return $r17;
    }

    private java.lang.String generateToken()
    {
        org.waveprotocol.wave.model.id.TokenGenerator $r1;
        java.lang.String $r2;
        org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer r0;

        r0 := @this: org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer;

        $r1 = r0.<org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer: org.waveprotocol.wave.model.id.TokenGenerator tokenGenerator>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.id.TokenGenerator: java.lang.String generateToken(int)>(48);

        return $r2;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.util.logging.Log $r0;

        <org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer: java.lang.String USER_PROPERTY_NAME> = "user";

        <org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer: int ACCESS_TOKEN_EXPIRATION> = 60;

        <org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer: int REQUEST_TOKEN_EXPIRATION> = 10;

        <org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer: int TOKEN_LENGTH> = 48;

        $r0 = staticinvoke <org.waveprotocol.wave.util.logging.Log: org.waveprotocol.wave.util.logging.Log get(java.lang.Class)>(class "Lorg/waveprotocol/box/server/robots/dataapi/DataApiTokenContainer;");

        <org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer: org.waveprotocol.wave.util.logging.Log LOG> = $r0;

        return;
    }
}
