public class com.hp.hpl.jena.sparql.util.Context extends java.lang.Object
{
    public static final com.hp.hpl.jena.sparql.util.Context emptyContext;
    protected java.util.Map context;
    protected java.util.List callbacks;
    protected boolean readonly;

    public void <init>()
    {
        java.util.HashMap $r1;
        com.hp.hpl.jena.sparql.util.Context r0;
        java.util.ArrayList $r2;

        r0 := @this: com.hp.hpl.jena.sparql.util.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.util.Context: java.util.Map context> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.util.Context: java.util.List callbacks> = $r2;

        r0.<com.hp.hpl.jena.sparql.util.Context: boolean readonly> = 0;

        return;
    }

    private void <init>(boolean)
    {
        java.util.HashMap $r1;
        com.hp.hpl.jena.sparql.util.Context r0;
        java.util.ArrayList $r2;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.sparql.util.Context;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.util.Context: java.util.Map context> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.util.Context: java.util.List callbacks> = $r2;

        r0.<com.hp.hpl.jena.sparql.util.Context: boolean readonly> = 0;

        r0.<com.hp.hpl.jena.sparql.util.Context: boolean readonly> = z0;

        return;
    }

    public void <init>(com.hp.hpl.jena.sparql.util.Context)
    {
        java.util.HashMap $r1;
        com.hp.hpl.jena.sparql.util.Context r0, r3;
        java.util.ArrayList $r2;

        r0 := @this: com.hp.hpl.jena.sparql.util.Context;

        r3 := @parameter0: com.hp.hpl.jena.sparql.util.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.util.Context: java.util.Map context> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.util.Context: java.util.List callbacks> = $r2;

        r0.<com.hp.hpl.jena.sparql.util.Context: boolean readonly> = 0;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.util.Context: void putAll(com.hp.hpl.jena.sparql.util.Context)>(r3);

        return;
    }

    public com.hp.hpl.jena.sparql.util.Context copy()
    {
        com.hp.hpl.jena.sparql.util.Context $r0, r1;

        r1 := @this: com.hp.hpl.jena.sparql.util.Context;

        $r0 = new com.hp.hpl.jena.sparql.util.Context;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.util.Context: void <init>(com.hp.hpl.jena.sparql.util.Context)>(r1);

        return $r0;
    }

    public java.lang.Object get(com.hp.hpl.jena.sparql.util.Symbol)
    {
        java.util.Map $r2;
        java.lang.Object $r3;
        com.hp.hpl.jena.sparql.util.Context r0;
        com.hp.hpl.jena.sparql.util.Symbol r1;

        r0 := @this: com.hp.hpl.jena.sparql.util.Context;

        r1 := @parameter0: com.hp.hpl.jena.sparql.util.Symbol;

        $r2 = r0.<com.hp.hpl.jena.sparql.util.Context: java.util.Map context>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        return $r3;
    }

    public java.lang.Object get(com.hp.hpl.jena.sparql.util.Symbol, java.lang.Object)
    {
        java.util.Map $r2;
        java.lang.Object $r3, r4;
        com.hp.hpl.jena.sparql.util.Context r0;
        com.hp.hpl.jena.sparql.util.Symbol r1;

        r0 := @this: com.hp.hpl.jena.sparql.util.Context;

        r1 := @parameter0: com.hp.hpl.jena.sparql.util.Symbol;

        r4 := @parameter1: java.lang.Object;

        $r2 = r0.<com.hp.hpl.jena.sparql.util.Context: java.util.Map context>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        if $r3 != null goto label1;

        return r4;

     label1:
        return $r3;
    }

    public void put(com.hp.hpl.jena.sparql.util.Symbol, java.lang.Object)
    {
        java.lang.Object r2;
        com.hp.hpl.jena.sparql.util.Context r0;
        com.hp.hpl.jena.sparql.util.Symbol r1;

        r0 := @this: com.hp.hpl.jena.sparql.util.Context;

        r1 := @parameter0: com.hp.hpl.jena.sparql.util.Symbol;

        r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<com.hp.hpl.jena.sparql.util.Context: void _put(com.hp.hpl.jena.sparql.util.Symbol,java.lang.Object)>(r1, r2);

        specialinvoke r0.<com.hp.hpl.jena.sparql.util.Context: void doCallbacks(com.hp.hpl.jena.sparql.util.Symbol)>(r1);

        return;
    }

    public void set(com.hp.hpl.jena.sparql.util.Symbol, java.lang.Object)
    {
        java.lang.Object r2;
        com.hp.hpl.jena.sparql.util.Context r0;
        com.hp.hpl.jena.sparql.util.Symbol r1;

        r0 := @this: com.hp.hpl.jena.sparql.util.Context;

        r1 := @parameter0: com.hp.hpl.jena.sparql.util.Symbol;

        r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<com.hp.hpl.jena.sparql.util.Context: void _put(com.hp.hpl.jena.sparql.util.Symbol,java.lang.Object)>(r1, r2);

        specialinvoke r0.<com.hp.hpl.jena.sparql.util.Context: void doCallbacks(com.hp.hpl.jena.sparql.util.Symbol)>(r1);

        return;
    }

    private void _put(com.hp.hpl.jena.sparql.util.Symbol, java.lang.Object)
    {
        java.util.Map $r3;
        java.lang.Object r2;
        com.hp.hpl.jena.sparql.ARQException $r4;
        com.hp.hpl.jena.sparql.util.Context r0;
        boolean $z0;
        com.hp.hpl.jena.sparql.util.Symbol r1;

        r0 := @this: com.hp.hpl.jena.sparql.util.Context;

        r1 := @parameter0: com.hp.hpl.jena.sparql.util.Symbol;

        r2 := @parameter1: java.lang.Object;

        $z0 = r0.<com.hp.hpl.jena.sparql.util.Context: boolean readonly>;

        if $z0 == 0 goto label1;

        $r4 = new com.hp.hpl.jena.sparql.ARQException;

        specialinvoke $r4.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.String)>("Context is readonly");

        throw $r4;

     label1:
        $r3 = r0.<com.hp.hpl.jena.sparql.util.Context: java.util.Map context>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public void set(com.hp.hpl.jena.sparql.util.Symbol, boolean)
    {
        com.hp.hpl.jena.sparql.util.Context r0;
        boolean z0;
        com.hp.hpl.jena.sparql.util.Symbol r1;

        r0 := @this: com.hp.hpl.jena.sparql.util.Context;

        r1 := @parameter0: com.hp.hpl.jena.sparql.util.Symbol;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.util.Context: void setTrue(com.hp.hpl.jena.sparql.util.Symbol)>(r1);

        goto label2;

     label1:
        virtualinvoke r0.<com.hp.hpl.jena.sparql.util.Context: void setFalse(com.hp.hpl.jena.sparql.util.Symbol)>(r1);

     label2:
        return;
    }

    public void setIfUndef(com.hp.hpl.jena.sparql.util.Symbol, java.lang.Object)
    {
        java.util.Map $r2;
        java.lang.Object $r3, r4;
        com.hp.hpl.jena.sparql.util.Context r0;
        com.hp.hpl.jena.sparql.util.Symbol r1;

        r0 := @this: com.hp.hpl.jena.sparql.util.Context;

        r1 := @parameter0: com.hp.hpl.jena.sparql.util.Symbol;

        r4 := @parameter1: java.lang.Object;

        $r2 = r0.<com.hp.hpl.jena.sparql.util.Context: java.util.Map context>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        if $r3 != null goto label1;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.util.Context: void put(com.hp.hpl.jena.sparql.util.Symbol,java.lang.Object)>(r1, r4);

     label1:
        return;
    }

    public void remove(com.hp.hpl.jena.sparql.util.Symbol)
    {
        com.hp.hpl.jena.sparql.util.Context r0;
        com.hp.hpl.jena.sparql.util.Symbol r1;
        java.util.Map $r2;

        r0 := @this: com.hp.hpl.jena.sparql.util.Context;

        r1 := @parameter0: com.hp.hpl.jena.sparql.util.Symbol;

        $r2 = r0.<com.hp.hpl.jena.sparql.util.Context: java.util.Map context>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        specialinvoke r0.<com.hp.hpl.jena.sparql.util.Context: void doCallbacks(com.hp.hpl.jena.sparql.util.Symbol)>(r1);

        return;
    }

    public void unset(com.hp.hpl.jena.sparql.util.Symbol)
    {
        com.hp.hpl.jena.sparql.util.Context r0;
        com.hp.hpl.jena.sparql.util.Symbol r1;
        java.util.Map $r2;

        r0 := @this: com.hp.hpl.jena.sparql.util.Context;

        r1 := @parameter0: com.hp.hpl.jena.sparql.util.Symbol;

        $r2 = r0.<com.hp.hpl.jena.sparql.util.Context: java.util.Map context>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        specialinvoke r0.<com.hp.hpl.jena.sparql.util.Context: void doCallbacks(com.hp.hpl.jena.sparql.util.Symbol)>(r1);

        return;
    }

    public boolean isDefined(com.hp.hpl.jena.sparql.util.Symbol)
    {
        java.util.Map $r2;
        com.hp.hpl.jena.sparql.util.Context r0;
        com.hp.hpl.jena.sparql.util.Symbol r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.util.Context;

        r1 := @parameter0: com.hp.hpl.jena.sparql.util.Symbol;

        $r2 = r0.<com.hp.hpl.jena.sparql.util.Context: java.util.Map context>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean isUndef(com.hp.hpl.jena.sparql.util.Symbol)
    {
        com.hp.hpl.jena.sparql.util.Context r0;
        com.hp.hpl.jena.sparql.util.Symbol r1;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.sparql.util.Context;

        r1 := @parameter0: com.hp.hpl.jena.sparql.util.Symbol;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.util.Context: boolean isDefined(com.hp.hpl.jena.sparql.util.Symbol)>(r1);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public java.lang.String getAsString(com.hp.hpl.jena.sparql.util.Symbol, java.lang.String)
    {
        java.lang.String $r2, r3;
        com.hp.hpl.jena.sparql.util.Context r0;
        com.hp.hpl.jena.sparql.util.Symbol r1;

        r0 := @this: com.hp.hpl.jena.sparql.util.Context;

        r1 := @parameter0: com.hp.hpl.jena.sparql.util.Symbol;

        r3 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.util.Context: java.lang.String getAsString(com.hp.hpl.jena.sparql.util.Symbol)>(r1);

        if $r2 != null goto label1;

        return r3;

     label1:
        return $r2;
    }

    public java.lang.String getAsString(com.hp.hpl.jena.sparql.util.Symbol)
    {
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String $r4;
        com.hp.hpl.jena.sparql.util.Context r0;
        com.hp.hpl.jena.sparql.util.Symbol r1;

        r0 := @this: com.hp.hpl.jena.sparql.util.Context;

        r1 := @parameter0: com.hp.hpl.jena.sparql.util.Symbol;

        $r2 = r0.<com.hp.hpl.jena.sparql.util.Context: java.util.Map context>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        if $r3 != null goto label1;

        return null;

     label1:
        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        return $r4;
    }

    public void putAll(com.hp.hpl.jena.sparql.util.Context)
    {
        java.util.Map$Entry r6;
        java.util.Iterator $r4;
        java.util.Set $r3;
        com.hp.hpl.jena.sparql.util.Context r0, r1;
        java.util.Map $r2;
        java.lang.Object $r5, $r7, $r9;
        com.hp.hpl.jena.sparql.ARQException $r10;
        boolean $z0, $z1;
        com.hp.hpl.jena.sparql.util.Symbol $r8;

        r0 := @this: com.hp.hpl.jena.sparql.util.Context;

        r1 := @parameter0: com.hp.hpl.jena.sparql.util.Context;

        $z0 = r0.<com.hp.hpl.jena.sparql.util.Context: boolean readonly>;

        if $z0 == 0 goto label1;

        $r10 = new com.hp.hpl.jena.sparql.ARQException;

        specialinvoke $r10.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.String)>("Context is readonly");

        throw $r10;

     label1:
        if r1 == null goto label3;

        $r2 = r1.<com.hp.hpl.jena.sparql.util.Context: java.util.Map context>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r7 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (com.hp.hpl.jena.sparql.util.Symbol) $r7;

        $r9 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r0.<com.hp.hpl.jena.sparql.util.Context: void put(com.hp.hpl.jena.sparql.util.Symbol,java.lang.Object)>($r8, $r9);

        goto label2;

     label3:
        return;
    }

    public void setTrue(com.hp.hpl.jena.sparql.util.Symbol)
    {
        java.lang.Boolean $r2;
        com.hp.hpl.jena.sparql.util.Context r0;
        com.hp.hpl.jena.sparql.util.Symbol r1;

        r0 := @this: com.hp.hpl.jena.sparql.util.Context;

        r1 := @parameter0: com.hp.hpl.jena.sparql.util.Symbol;

        $r2 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.util.Context: void set(com.hp.hpl.jena.sparql.util.Symbol,java.lang.Object)>(r1, $r2);

        return;
    }

    public void setFalse(com.hp.hpl.jena.sparql.util.Symbol)
    {
        java.lang.Boolean $r2;
        com.hp.hpl.jena.sparql.util.Context r0;
        com.hp.hpl.jena.sparql.util.Symbol r1;

        r0 := @this: com.hp.hpl.jena.sparql.util.Context;

        r1 := @parameter0: com.hp.hpl.jena.sparql.util.Symbol;

        $r2 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.util.Context: void set(com.hp.hpl.jena.sparql.util.Symbol,java.lang.Object)>(r1, $r2);

        return;
    }

    public boolean isTrue(com.hp.hpl.jena.sparql.util.Symbol)
    {
        com.hp.hpl.jena.sparql.util.Context r0;
        com.hp.hpl.jena.sparql.util.Symbol r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.util.Context;

        r1 := @parameter0: com.hp.hpl.jena.sparql.util.Symbol;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.sparql.util.Context: boolean isTrue(com.hp.hpl.jena.sparql.util.Symbol,boolean)>(r1, 0);

        return $z0;
    }

    public boolean isTrueOrUndef(com.hp.hpl.jena.sparql.util.Symbol)
    {
        com.hp.hpl.jena.sparql.util.Context r0;
        com.hp.hpl.jena.sparql.util.Symbol r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.util.Context;

        r1 := @parameter0: com.hp.hpl.jena.sparql.util.Symbol;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.sparql.util.Context: boolean isTrue(com.hp.hpl.jena.sparql.util.Symbol,boolean)>(r1, 1);

        return $z0;
    }

    private boolean isTrue(com.hp.hpl.jena.sparql.util.Symbol, boolean)
    {
        com.hp.hpl.jena.sparql.util.Context r0;
        java.lang.Boolean $r3;
        java.lang.Object $r2;
        java.lang.String r4;
        com.hp.hpl.jena.sparql.util.Symbol r1;
        boolean $z0, $z1, $z2, z3;

        r0 := @this: com.hp.hpl.jena.sparql.util.Context;

        r1 := @parameter0: com.hp.hpl.jena.sparql.util.Symbol;

        z3 := @parameter1: boolean;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.util.Context: java.lang.Object get(com.hp.hpl.jena.sparql.util.Symbol)>(r1);

        if $r2 != null goto label1;

        return z3;

     label1:
        $z0 = $r2 instanceof java.lang.String;

        if $z0 == 0 goto label2;

        r4 = (java.lang.String) $r2;

        $z2 = virtualinvoke r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        if $z2 == 0 goto label2;

        return 1;

     label2:
        $r3 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        return $z1;
    }

    public boolean isFalse(com.hp.hpl.jena.sparql.util.Symbol)
    {
        com.hp.hpl.jena.sparql.util.Context r0;
        com.hp.hpl.jena.sparql.util.Symbol r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.util.Context;

        r1 := @parameter0: com.hp.hpl.jena.sparql.util.Symbol;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.sparql.util.Context: boolean isFalse(com.hp.hpl.jena.sparql.util.Symbol,boolean)>(r1, 0);

        return $z0;
    }

    public boolean isFalseOrUndef(com.hp.hpl.jena.sparql.util.Symbol)
    {
        com.hp.hpl.jena.sparql.util.Context r0;
        com.hp.hpl.jena.sparql.util.Symbol r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.util.Context;

        r1 := @parameter0: com.hp.hpl.jena.sparql.util.Symbol;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.sparql.util.Context: boolean isFalse(com.hp.hpl.jena.sparql.util.Symbol,boolean)>(r1, 1);

        return $z0;
    }

    private boolean isFalse(com.hp.hpl.jena.sparql.util.Symbol, boolean)
    {
        com.hp.hpl.jena.sparql.util.Context r0;
        java.lang.Boolean $r3;
        java.lang.Object $r2;
        java.lang.String r4;
        com.hp.hpl.jena.sparql.util.Symbol r1;
        boolean $z0, $z1, $z2, z3;

        r0 := @this: com.hp.hpl.jena.sparql.util.Context;

        r1 := @parameter0: com.hp.hpl.jena.sparql.util.Symbol;

        z3 := @parameter1: boolean;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.util.Context: java.lang.Object get(com.hp.hpl.jena.sparql.util.Symbol)>(r1);

        if $r2 != null goto label1;

        return z3;

     label1:
        $z0 = $r2 instanceof java.lang.String;

        if $z0 == 0 goto label2;

        r4 = (java.lang.String) $r2;

        $z2 = virtualinvoke r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("false");

        if $z2 == 0 goto label2;

        return 1;

     label2:
        $r3 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        return $z1;
    }

    public boolean hasValue(com.hp.hpl.jena.sparql.util.Symbol, java.lang.Object)
    {
        java.lang.Object $r2, r3;
        com.hp.hpl.jena.sparql.util.Context r0;
        com.hp.hpl.jena.sparql.util.Symbol r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.util.Context;

        r1 := @parameter0: com.hp.hpl.jena.sparql.util.Symbol;

        r3 := @parameter1: java.lang.Object;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.util.Context: java.lang.Object get(com.hp.hpl.jena.sparql.util.Symbol)>(r1);

        if $r2 != null goto label1;

        if r3 != null goto label1;

        return 1;

     label1:
        if $r2 == null goto label2;

        if r3 != null goto label3;

     label2:
        return 0;

     label3:
        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3);

        return $z0;
    }

    public boolean hasValueAsString(com.hp.hpl.jena.sparql.util.Symbol, java.lang.String)
    {
        java.lang.String r2;
        com.hp.hpl.jena.sparql.util.Context r0;
        com.hp.hpl.jena.sparql.util.Symbol r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.util.Context;

        r1 := @parameter0: com.hp.hpl.jena.sparql.util.Symbol;

        r2 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.util.Context: boolean hasValueAsString(com.hp.hpl.jena.sparql.util.Symbol,java.lang.String,boolean)>(r1, r2, 0);

        return $z0;
    }

    public boolean hasValueAsString(com.hp.hpl.jena.sparql.util.Symbol, java.lang.String, boolean)
    {
        java.lang.String $r2, r3;
        com.hp.hpl.jena.sparql.util.Context r0;
        com.hp.hpl.jena.sparql.util.Symbol r1;
        boolean z0, $z1, $z2;

        r0 := @this: com.hp.hpl.jena.sparql.util.Context;

        r1 := @parameter0: com.hp.hpl.jena.sparql.util.Symbol;

        r3 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.util.Context: java.lang.String getAsString(com.hp.hpl.jena.sparql.util.Symbol)>(r1);

        if $r2 != null goto label1;

        if r3 != null goto label1;

        return 1;

     label1:
        if $r2 == null goto label2;

        if r3 != null goto label3;

     label2:
        return 0;

     label3:
        if z0 == 0 goto label4;

        $z2 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r3);

        return $z2;

     label4:
        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        return $z1;
    }

    public java.util.Set keys()
    {
        java.util.Set $r2;
        com.hp.hpl.jena.sparql.util.Context r0;
        java.util.Map $r1;

        r0 := @this: com.hp.hpl.jena.sparql.util.Context;

        $r1 = r0.<com.hp.hpl.jena.sparql.util.Context: java.util.Map context>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        return $r2;
    }

    public int size()
    {
        int $i0;
        com.hp.hpl.jena.sparql.util.Context r0;
        java.util.Map $r1;

        r0 := @this: com.hp.hpl.jena.sparql.util.Context;

        $r1 = r0.<com.hp.hpl.jena.sparql.util.Context: java.util.Map context>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }

    public void addCallback(org.apache.jena.atlas.lib.Callback)
    {
        java.util.List $r2;
        org.apache.jena.atlas.lib.Callback r1;
        com.hp.hpl.jena.sparql.util.Context r0;

        r0 := @this: com.hp.hpl.jena.sparql.util.Context;

        r1 := @parameter0: org.apache.jena.atlas.lib.Callback;

        $r2 = r0.<com.hp.hpl.jena.sparql.util.Context: java.util.List callbacks>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void removeCallback(org.apache.jena.atlas.lib.Callback)
    {
        java.util.List $r2;
        org.apache.jena.atlas.lib.Callback r1;
        com.hp.hpl.jena.sparql.util.Context r0;

        r0 := @this: com.hp.hpl.jena.sparql.util.Context;

        r1 := @parameter0: org.apache.jena.atlas.lib.Callback;

        $r2 = r0.<com.hp.hpl.jena.sparql.util.Context: java.util.List callbacks>;

        interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public java.util.List getCallbacks()
    {
        java.util.List $r1;
        com.hp.hpl.jena.sparql.util.Context r0;

        r0 := @this: com.hp.hpl.jena.sparql.util.Context;

        $r1 = r0.<com.hp.hpl.jena.sparql.util.Context: java.util.List callbacks>;

        return $r1;
    }

    private void doCallbacks(com.hp.hpl.jena.sparql.util.Symbol)
    {
        java.util.List $r1;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        org.apache.jena.atlas.lib.Callback r4;
        com.hp.hpl.jena.sparql.util.Context r0;
        boolean $z0;
        com.hp.hpl.jena.sparql.util.Symbol r5;

        r0 := @this: com.hp.hpl.jena.sparql.util.Context;

        r5 := @parameter0: com.hp.hpl.jena.sparql.util.Symbol;

        $r1 = r0.<com.hp.hpl.jena.sparql.util.Context: java.util.List callbacks>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.jena.atlas.lib.Callback) $r3;

        interfaceinvoke r4.<org.apache.jena.atlas.lib.Callback: void proc(java.lang.Object)>(r5);

        goto label1;

     label2:
        return;
    }

    public java.lang.String toString()
    {
        java.util.Iterator $r2;
        java.util.Set $r1;
        com.hp.hpl.jena.sparql.util.Context r0;
        java.lang.Object $r3, $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10, $r11;
        java.lang.String r12, r13;
        boolean $z0;
        com.hp.hpl.jena.sparql.util.Symbol r4;

        r0 := @this: com.hp.hpl.jena.sparql.util.Context;

        r12 = "";

        r13 = "";

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.util.Context: java.util.Set keys()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.hp.hpl.jena.sparql.util.Symbol) $r3;

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.util.Context: java.lang.Object get(com.hp.hpl.jena.sparql.util.Symbol)>(r4);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        r13 = "\n";

        goto label1;

     label2:
        return r12;
    }

    public static com.hp.hpl.jena.sparql.util.Context setupContext(com.hp.hpl.jena.sparql.util.Context, com.hp.hpl.jena.sparql.core.DatasetGraph)
    {
        com.hp.hpl.jena.graph.Node $r6;
        com.hp.hpl.jena.sparql.core.DatasetGraph r1;
        com.hp.hpl.jena.sparql.util.Context $r0, $r2, $r3, r4;
        com.hp.hpl.jena.sparql.util.Symbol $r5;

        r4 := @parameter0: com.hp.hpl.jena.sparql.util.Context;

        r1 := @parameter1: com.hp.hpl.jena.sparql.core.DatasetGraph;

        if r4 != null goto label1;

        r4 = staticinvoke <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Context getContext()>();

     label1:
        $r0 = virtualinvoke r4.<com.hp.hpl.jena.sparql.util.Context: com.hp.hpl.jena.sparql.util.Context copy()>();

        if r1 == null goto label2;

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.sparql.core.DatasetGraph: com.hp.hpl.jena.sparql.util.Context getContext()>();

        if $r2 == null goto label2;

        $r3 = interfaceinvoke r1.<com.hp.hpl.jena.sparql.core.DatasetGraph: com.hp.hpl.jena.sparql.util.Context getContext()>();

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.util.Context: void putAll(com.hp.hpl.jena.sparql.util.Context)>($r3);

     label2:
        $r5 = <com.hp.hpl.jena.sparql.ARQConstants: com.hp.hpl.jena.sparql.util.Symbol sysCurrentTime>;

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeFactoryExtra: com.hp.hpl.jena.graph.Node nowAsDateTime()>();

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.util.Context: void set(com.hp.hpl.jena.sparql.util.Symbol,java.lang.Object)>($r5, $r6);

        return $r0;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.sparql.util.Context $r0;

        $r0 = new com.hp.hpl.jena.sparql.util.Context;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.util.Context: void <init>(boolean)>(1);

        <com.hp.hpl.jena.sparql.util.Context: com.hp.hpl.jena.sparql.util.Context emptyContext> = $r0;

        return;
    }
}
