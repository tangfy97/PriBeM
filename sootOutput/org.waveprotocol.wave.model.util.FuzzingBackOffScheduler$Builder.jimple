public class org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$Builder extends java.lang.Object
{
    private int initialBackOffMs;
    private int maxBackOffMs;
    private double randomisationFactor;
    private final org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$CollectiveScheduler scheduler;
    private int maxAttempts;

    public void <init>(org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$CollectiveScheduler)
    {
        org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$Builder r0;
        org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$CollectiveScheduler r1;

        r0 := @this: org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$Builder;

        r1 := @parameter0: org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$CollectiveScheduler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$Builder: int initialBackOffMs> = 10;

        r0.<org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$Builder: int maxBackOffMs> = 5000;

        r0.<org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$Builder: double randomisationFactor> = 0.5;

        r0.<org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$Builder: int maxAttempts> = 2147483647;

        r0.<org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$Builder: org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$CollectiveScheduler scheduler> = r1;

        return;
    }

    public org.waveprotocol.wave.model.util.Scheduler build()
    {
        org.waveprotocol.wave.model.util.FuzzingBackOffScheduler $r0;
        org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$Builder r1;
        org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$CollectiveScheduler $r2;
        int $i0, $i1, $i2;
        double $d0;

        r1 := @this: org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$Builder;

        $r0 = new org.waveprotocol.wave.model.util.FuzzingBackOffScheduler;

        $i2 = r1.<org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$Builder: int initialBackOffMs>;

        $i1 = r1.<org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$Builder: int maxBackOffMs>;

        $d0 = r1.<org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$Builder: double randomisationFactor>;

        $r2 = r1.<org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$Builder: org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$CollectiveScheduler scheduler>;

        $i0 = r1.<org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$Builder: int maxAttempts>;

        specialinvoke $r0.<org.waveprotocol.wave.model.util.FuzzingBackOffScheduler: void <init>(int,int,double,org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$CollectiveScheduler,int,org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$1)>($i2, $i1, $d0, $r2, $i0, null);

        return $r0;
    }

    public org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$Builder setInitialBackOffMs(int)
    {
        int i0;
        org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$Builder r0;

        r0 := @this: org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$Builder;

        i0 := @parameter0: int;

        r0.<org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$Builder: int initialBackOffMs> = i0;

        return r0;
    }

    public org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$Builder setMaxBackOffMs(int)
    {
        int i0;
        org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$Builder r0;

        r0 := @this: org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$Builder;

        i0 := @parameter0: int;

        r0.<org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$Builder: int maxBackOffMs> = i0;

        return r0;
    }

    public org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$Builder setRandomisationFactor(double)
    {
        org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$Builder r0;
        double d0;

        r0 := @this: org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$Builder;

        d0 := @parameter0: double;

        r0.<org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$Builder: double randomisationFactor> = d0;

        return r0;
    }

    public org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$Builder setMaxAttempts(int)
    {
        int i0;
        org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$Builder r0;

        r0 := @this: org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$Builder;

        i0 := @parameter0: int;

        r0.<org.waveprotocol.wave.model.util.FuzzingBackOffScheduler$Builder: int maxAttempts> = i0;

        return r0;
    }
}
