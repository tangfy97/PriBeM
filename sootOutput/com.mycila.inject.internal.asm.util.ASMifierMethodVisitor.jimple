public class com.mycila.inject.internal.asm.util.ASMifierMethodVisitor extends com.mycila.inject.internal.asm.util.ASMifierAbstractVisitor implements com.mycila.inject.internal.asm.MethodVisitor
{

    public void <init>()
    {
        com.mycila.inject.internal.asm.util.ASMifierMethodVisitor r0;
        java.util.HashMap $r1;

        r0 := @this: com.mycila.inject.internal.asm.util.ASMifierMethodVisitor;

        specialinvoke r0.<com.mycila.inject.internal.asm.util.ASMifierAbstractVisitor: void <init>(java.lang.String)>("mv");

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.util.Map labelNames> = $r1;

        return;
    }

    public com.mycila.inject.internal.asm.AnnotationVisitor visitAnnotationDefault()
    {
        com.mycila.inject.internal.asm.util.ASMifierAnnotationVisitor $r7;
        java.util.List $r5, $r8, $r9, $r10;
        java.lang.StringBuffer $r1, $r2, $r3, $r4;
        com.mycila.inject.internal.asm.util.ASMifierMethodVisitor r0;
        java.lang.String $r6;

        r0 := @this: com.mycila.inject.internal.asm.util.ASMifierMethodVisitor;

        $r1 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>(0);

        $r2 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("{\n");

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("av0 = mv.visitAnnotationDefault();\n");

        $r5 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.util.List text>;

        $r4 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r6);

        $r7 = new com.mycila.inject.internal.asm.util.ASMifierAnnotationVisitor;

        specialinvoke $r7.<com.mycila.inject.internal.asm.util.ASMifierAnnotationVisitor: void <init>(int)>(0);

        $r8 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.util.List text>;

        $r9 = virtualinvoke $r7.<com.mycila.inject.internal.asm.util.ASMifierAnnotationVisitor: java.util.List getText()>();

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r9);

        $r10 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.util.List text>;

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>("}\n");

        return $r7;
    }

    public com.mycila.inject.internal.asm.AnnotationVisitor visitParameterAnnotation(int, java.lang.String, boolean)
    {
        com.mycila.inject.internal.asm.util.ASMifierAnnotationVisitor $r13;
        java.lang.StringBuffer $r1, $r2, $r3, $r4, $r5, $r7, $r8, $r9, $r10;
        int i0;
        com.mycila.inject.internal.asm.util.ASMifierMethodVisitor r0;
        java.lang.String r6, $r12;
        boolean z0;
        java.util.List $r11, $r14, $r15, $r16;

        r0 := @this: com.mycila.inject.internal.asm.util.ASMifierMethodVisitor;

        i0 := @parameter0: int;

        r6 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r1 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>(0);

        $r2 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("{\n");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("av0 = mv.visitParameterAnnotation(");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: void appendConstant(java.lang.Object)>(r6);

        $r7 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>(z0);

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(");\n");

        $r11 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.util.List text>;

        $r10 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r12);

        $r13 = new com.mycila.inject.internal.asm.util.ASMifierAnnotationVisitor;

        specialinvoke $r13.<com.mycila.inject.internal.asm.util.ASMifierAnnotationVisitor: void <init>(int)>(0);

        $r14 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.util.List text>;

        $r15 = virtualinvoke $r13.<com.mycila.inject.internal.asm.util.ASMifierAnnotationVisitor: java.util.List getText()>();

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>($r15);

        $r16 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.util.List text>;

        interfaceinvoke $r16.<java.util.List: boolean add(java.lang.Object)>("}\n");

        return $r13;
    }

    public void visitCode()
    {
        com.mycila.inject.internal.asm.util.ASMifierMethodVisitor r0;
        java.util.List $r1;

        r0 := @this: com.mycila.inject.internal.asm.util.ASMifierMethodVisitor;

        $r1 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.util.List text>;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>("mv.visitCode();\n");

        return;
    }

    public void visitFrame(int, int, java.lang.Object[], int, java.lang.Object[])
    {
        java.lang.Object[] r2, r9;
        java.lang.StringBuffer $r1, $r3, $r4, $r5, $r6, $r7, $r8, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r24;
        int i0, i1, i2, $i4;
        com.mycila.inject.internal.asm.util.ASMifierMethodVisitor r0;
        java.lang.String $r25;
        java.util.List $r23;

        r0 := @this: com.mycila.inject.internal.asm.util.ASMifierMethodVisitor;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r9 := @parameter2: java.lang.Object[];

        i2 := @parameter3: int;

        r2 := @parameter4: java.lang.Object[];

        $r1 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>(0);

        tableswitch(i0)
        {
            case -1: goto label1;
            case 0: goto label1;
            case 1: goto label4;
            case 2: goto label5;
            case 3: goto label6;
            case 4: goto label7;
            default: goto label8;
        };

     label1:
        specialinvoke r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: void declareFrameTypes(int,java.lang.Object[])>(i1, r9);

        specialinvoke r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: void declareFrameTypes(int,java.lang.Object[])>(i2, r2);

        $i4 = (int) -1;

        if i0 != $i4 goto label2;

        $r21 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("mv.visitFrame(Opcodes.F_NEW, ");

        goto label3;

     label2:
        $r14 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("mv.visitFrame(Opcodes.F_FULL, ");

     label3:
        $r15 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", new Object[] {");

        specialinvoke r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: void appendFrameTypes(int,java.lang.Object[])>(i1, r9);

        $r17 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("}, ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i2);

        virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", new Object[] {");

        specialinvoke r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: void appendFrameTypes(int,java.lang.Object[])>(i2, r2);

        $r20 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(125);

        goto label8;

     label4:
        specialinvoke r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: void declareFrameTypes(int,java.lang.Object[])>(i1, r9);

        $r10 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("mv.visitFrame(Opcodes.F_APPEND,");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", new Object[] {");

        specialinvoke r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: void appendFrameTypes(int,java.lang.Object[])>(i1, r9);

        $r13 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("}, 0, null");

        goto label8;

     label5:
        $r6 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("mv.visitFrame(Opcodes.F_CHOP,");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", null, 0, null");

        goto label8;

     label6:
        $r5 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null");

        goto label8;

     label7:
        specialinvoke r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: void declareFrameTypes(int,java.lang.Object[])>(1, r2);

        $r3 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {");

        specialinvoke r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: void appendFrameTypes(int,java.lang.Object[])>(1, r2);

        $r4 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(125);

     label8:
        $r22 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(");\n");

        $r23 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.util.List text>;

        $r24 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r23.<java.util.List: boolean add(java.lang.Object)>($r25);

        return;
    }

    public void visitInsn(int)
    {
        java.lang.String[] $r4;
        java.util.List $r8;
        java.lang.StringBuffer $r1, $r2, $r3, $r6, $r7;
        int i0;
        com.mycila.inject.internal.asm.util.ASMifierMethodVisitor r0;
        java.lang.String $r5, $r9;

        r0 := @this: com.mycila.inject.internal.asm.util.ASMifierMethodVisitor;

        i0 := @parameter0: int;

        $r1 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>(0);

        $r2 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("mv.visitInsn(");

        $r4 = <com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.String[] OPCODES>;

        $r5 = $r4[i0];

        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(");\n");

        $r8 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.util.List text>;

        $r7 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r9);

        return;
    }

    public void visitIntInsn(int, int)
    {
        java.lang.String[] $r4, $r12;
        java.lang.StringBuffer $r1, $r2, $r3, $r6, $r7, $r8, $r9;
        int i0, i1;
        com.mycila.inject.internal.asm.util.ASMifierMethodVisitor r0;
        java.lang.String $r5, $r11, $r13;
        java.util.List $r10;

        r0 := @this: com.mycila.inject.internal.asm.util.ASMifierMethodVisitor;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>(0);

        $r2 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("mv.visitIntInsn(");

        $r4 = <com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.String[] OPCODES>;

        $r5 = $r4[i0];

        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        if i0 != 188 goto label1;

        $r12 = <com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.String[] TYPES>;

        $r13 = $r12[i1];

        goto label2;

     label1:
        $r13 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i1);

     label2:
        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(");\n");

        $r10 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.util.List text>;

        $r9 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r11);

        return;
    }

    public void visitVarInsn(int, int)
    {
        java.lang.String[] $r4;
        java.util.List $r10;
        java.lang.StringBuffer $r1, $r2, $r3, $r6, $r7, $r8, $r9;
        int i0, i1;
        com.mycila.inject.internal.asm.util.ASMifierMethodVisitor r0;
        java.lang.String $r5, $r11;

        r0 := @this: com.mycila.inject.internal.asm.util.ASMifierMethodVisitor;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>(0);

        $r2 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("mv.visitVarInsn(");

        $r4 = <com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.String[] OPCODES>;

        $r5 = $r4[i0];

        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(");\n");

        $r10 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.util.List text>;

        $r9 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r11);

        return;
    }

    public void visitTypeInsn(int, java.lang.String)
    {
        java.lang.String[] $r4;
        java.util.List $r10;
        java.lang.StringBuffer $r1, $r2, $r3, $r6, $r8, $r9;
        int i0;
        com.mycila.inject.internal.asm.util.ASMifierMethodVisitor r0;
        java.lang.String $r5, r7, $r11;

        r0 := @this: com.mycila.inject.internal.asm.util.ASMifierMethodVisitor;

        i0 := @parameter0: int;

        r7 := @parameter1: java.lang.String;

        $r1 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>(0);

        $r2 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("mv.visitTypeInsn(");

        $r4 = <com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.String[] OPCODES>;

        $r5 = $r4[i0];

        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: void appendConstant(java.lang.Object)>(r7);

        $r8 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(");\n");

        $r10 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.util.List text>;

        $r9 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r11);

        return;
    }

    public void visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String[] $r4;
        java.lang.StringBuffer $r1, $r2, $r3, $r6, $r8, $r10, $r12, $r13;
        int i0;
        com.mycila.inject.internal.asm.util.ASMifierMethodVisitor r0;
        java.lang.String $r5, r7, r9, r11, $r15;
        java.util.List $r14;

        r0 := @this: com.mycila.inject.internal.asm.util.ASMifierMethodVisitor;

        i0 := @parameter0: int;

        r7 := @parameter1: java.lang.String;

        r9 := @parameter2: java.lang.String;

        r11 := @parameter3: java.lang.String;

        $r1 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>(0);

        $r2 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("mv.visitFieldInsn(");

        $r4 = <com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.String[] OPCODES>;

        $r5 = $r4[i0];

        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: void appendConstant(java.lang.Object)>(r7);

        $r8 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: void appendConstant(java.lang.Object)>(r9);

        $r10 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: void appendConstant(java.lang.Object)>(r11);

        $r12 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(");\n");

        $r14 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.util.List text>;

        $r13 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>($r15);

        return;
    }

    public void visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String[] $r4;
        java.lang.StringBuffer $r1, $r2, $r3, $r6, $r8, $r10, $r12, $r13;
        int i0;
        com.mycila.inject.internal.asm.util.ASMifierMethodVisitor r0;
        java.lang.String $r5, r7, r9, r11, $r15;
        java.util.List $r14;

        r0 := @this: com.mycila.inject.internal.asm.util.ASMifierMethodVisitor;

        i0 := @parameter0: int;

        r7 := @parameter1: java.lang.String;

        r9 := @parameter2: java.lang.String;

        r11 := @parameter3: java.lang.String;

        $r1 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>(0);

        $r2 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("mv.visitMethodInsn(");

        $r4 = <com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.String[] OPCODES>;

        $r5 = $r4[i0];

        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: void appendConstant(java.lang.Object)>(r7);

        $r8 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: void appendConstant(java.lang.Object)>(r9);

        $r10 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: void appendConstant(java.lang.Object)>(r11);

        $r12 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(");\n");

        $r14 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.util.List text>;

        $r13 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>($r15);

        return;
    }

    public void visitJumpInsn(int, com.mycila.inject.internal.asm.Label)
    {
        java.lang.String[] $r5;
        java.util.List $r10;
        java.lang.StringBuffer $r1, $r3, $r4, $r7, $r8, $r9;
        com.mycila.inject.internal.asm.Label r2;
        int i0;
        com.mycila.inject.internal.asm.util.ASMifierMethodVisitor r0;
        java.lang.String $r6, $r11;

        r0 := @this: com.mycila.inject.internal.asm.util.ASMifierMethodVisitor;

        i0 := @parameter0: int;

        r2 := @parameter1: com.mycila.inject.internal.asm.Label;

        $r1 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>(0);

        specialinvoke r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: void declareLabel(com.mycila.inject.internal.asm.Label)>(r2);

        $r3 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("mv.visitJumpInsn(");

        $r5 = <com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.String[] OPCODES>;

        $r6 = $r5[i0];

        $r7 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        specialinvoke r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: void appendLabel(com.mycila.inject.internal.asm.Label)>(r2);

        $r8 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(");\n");

        $r10 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.util.List text>;

        $r9 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r11);

        return;
    }

    public void visitLabel(com.mycila.inject.internal.asm.Label)
    {
        java.util.List $r6;
        java.lang.StringBuffer $r1, $r3, $r4, $r5;
        com.mycila.inject.internal.asm.Label r2;
        com.mycila.inject.internal.asm.util.ASMifierMethodVisitor r0;
        java.lang.String $r7;

        r0 := @this: com.mycila.inject.internal.asm.util.ASMifierMethodVisitor;

        r2 := @parameter0: com.mycila.inject.internal.asm.Label;

        $r1 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>(0);

        specialinvoke r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: void declareLabel(com.mycila.inject.internal.asm.Label)>(r2);

        $r3 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("mv.visitLabel(");

        specialinvoke r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: void appendLabel(com.mycila.inject.internal.asm.Label)>(r2);

        $r4 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(");\n");

        $r6 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.util.List text>;

        $r5 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r7);

        return;
    }

    public void visitLdcInsn(java.lang.Object)
    {
        java.util.List $r6;
        java.lang.StringBuffer $r1, $r2, $r4, $r5;
        com.mycila.inject.internal.asm.util.ASMifierMethodVisitor r0;
        java.lang.Object r3;
        java.lang.String $r7;

        r0 := @this: com.mycila.inject.internal.asm.util.ASMifierMethodVisitor;

        r3 := @parameter0: java.lang.Object;

        $r1 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>(0);

        $r2 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("mv.visitLdcInsn(");

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: void appendConstant(java.lang.Object)>(r3);

        $r4 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(");\n");

        $r6 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.util.List text>;

        $r5 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r7);

        return;
    }

    public void visitIincInsn(int, int)
    {
        java.util.List $r8;
        java.lang.StringBuffer $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        int i0, i1;
        com.mycila.inject.internal.asm.util.ASMifierMethodVisitor r0;
        java.lang.String $r9;

        r0 := @this: com.mycila.inject.internal.asm.util.ASMifierMethodVisitor;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>(0);

        $r2 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("mv.visitIincInsn(");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(");\n");

        $r8 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.util.List text>;

        $r7 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r9);

        return;
    }

    public void visitTableSwitchInsn(int, int, com.mycila.inject.internal.asm.Label, com.mycila.inject.internal.asm.Label[])
    {
        com.mycila.inject.internal.asm.Label[] r2;
        java.lang.StringBuffer $r1, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r14;
        int $i0, i1, i2, $i3, i4, i5;
        com.mycila.inject.internal.asm.util.ASMifierMethodVisitor r0;
        java.lang.String $r13, $r17;
        java.util.List $r12;
        com.mycila.inject.internal.asm.Label r3, $r15, $r16;

        r0 := @this: com.mycila.inject.internal.asm.util.ASMifierMethodVisitor;

        i1 := @parameter0: int;

        i2 := @parameter1: int;

        r3 := @parameter2: com.mycila.inject.internal.asm.Label;

        r2 := @parameter3: com.mycila.inject.internal.asm.Label[];

        $r1 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>(0);

        i4 = 0;

     label1:
        $i0 = lengthof r2;

        if i4 >= $i0 goto label2;

        $r16 = r2[i4];

        specialinvoke r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: void declareLabel(com.mycila.inject.internal.asm.Label)>($r16);

        i4 = i4 + 1;

        goto label1;

     label2:
        specialinvoke r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: void declareLabel(com.mycila.inject.internal.asm.Label)>(r3);

        $r4 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("mv.visitTableSwitchInsn(");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i2);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        specialinvoke r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: void appendLabel(com.mycila.inject.internal.asm.Label)>(r3);

        $r9 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", new Label[] {");

        i5 = 0;

     label3:
        $i3 = lengthof r2;

        if i5 >= $i3 goto label6;

        $r14 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        if i5 != 0 goto label4;

        $r17 = " ";

        goto label5;

     label4:
        $r17 = ", ";

     label5:
        virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        $r15 = r2[i5];

        specialinvoke r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: void appendLabel(com.mycila.inject.internal.asm.Label)>($r15);

        i5 = i5 + 1;

        goto label3;

     label6:
        $r10 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" });\n");

        $r12 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.util.List text>;

        $r11 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r13);

        return;
    }

    public void visitLookupSwitchInsn(com.mycila.inject.internal.asm.Label, int[], com.mycila.inject.internal.asm.Label[])
    {
        com.mycila.inject.internal.asm.Label[] r2;
        int[] r6;
        java.lang.StringBuffer $r1, $r4, $r5, $r7, $r8, $r9, $r12, $r14, $r15;
        int $i0, $i1, $i2, $i3, i4, i5, i6;
        com.mycila.inject.internal.asm.util.ASMifierMethodVisitor r0;
        java.lang.String $r11, $r17, $r18;
        java.util.List $r10;
        com.mycila.inject.internal.asm.Label r3, $r13, $r16;

        r0 := @this: com.mycila.inject.internal.asm.util.ASMifierMethodVisitor;

        r3 := @parameter0: com.mycila.inject.internal.asm.Label;

        r6 := @parameter1: int[];

        r2 := @parameter2: com.mycila.inject.internal.asm.Label[];

        $r1 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>(0);

        i4 = 0;

     label01:
        $i0 = lengthof r2;

        if i4 >= $i0 goto label02;

        $r16 = r2[i4];

        specialinvoke r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: void declareLabel(com.mycila.inject.internal.asm.Label)>($r16);

        i4 = i4 + 1;

        goto label01;

     label02:
        specialinvoke r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: void declareLabel(com.mycila.inject.internal.asm.Label)>(r3);

        $r4 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("mv.visitLookupSwitchInsn(");

        specialinvoke r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: void appendLabel(com.mycila.inject.internal.asm.Label)>(r3);

        $r5 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", new int[] {");

        i5 = 0;

     label03:
        $i1 = lengthof r6;

        if i5 >= $i1 goto label06;

        $r14 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        if i5 != 0 goto label04;

        $r17 = " ";

        goto label05;

     label04:
        $r17 = ", ";

     label05:
        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        $i3 = r6[i5];

        virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

        i5 = i5 + 1;

        goto label03;

     label06:
        $r7 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" }, new Label[] {");

        i6 = 0;

     label07:
        $i2 = lengthof r2;

        if i6 >= $i2 goto label10;

        $r12 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        if i6 != 0 goto label08;

        $r18 = " ";

        goto label09;

     label08:
        $r18 = ", ";

     label09:
        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        $r13 = r2[i6];

        specialinvoke r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: void appendLabel(com.mycila.inject.internal.asm.Label)>($r13);

        i6 = i6 + 1;

        goto label07;

     label10:
        $r8 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" });\n");

        $r10 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.util.List text>;

        $r9 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r11);

        return;
    }

    public void visitMultiANewArrayInsn(java.lang.String, int)
    {
        java.util.List $r8;
        java.lang.StringBuffer $r1, $r2, $r4, $r5, $r6, $r7;
        int i0;
        com.mycila.inject.internal.asm.util.ASMifierMethodVisitor r0;
        java.lang.String r3, $r9;

        r0 := @this: com.mycila.inject.internal.asm.util.ASMifierMethodVisitor;

        r3 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>(0);

        $r2 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("mv.visitMultiANewArrayInsn(");

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: void appendConstant(java.lang.Object)>(r3);

        $r4 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(");\n");

        $r8 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.util.List text>;

        $r7 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r9);

        return;
    }

    public void visitTryCatchBlock(com.mycila.inject.internal.asm.Label, com.mycila.inject.internal.asm.Label, com.mycila.inject.internal.asm.Label, java.lang.String)
    {
        java.util.List $r12;
        java.lang.StringBuffer $r1, $r5, $r6, $r7, $r8, $r10, $r11;
        com.mycila.inject.internal.asm.Label r2, r3, r4;
        com.mycila.inject.internal.asm.util.ASMifierMethodVisitor r0;
        java.lang.String r9, $r13;

        r0 := @this: com.mycila.inject.internal.asm.util.ASMifierMethodVisitor;

        r2 := @parameter0: com.mycila.inject.internal.asm.Label;

        r3 := @parameter1: com.mycila.inject.internal.asm.Label;

        r4 := @parameter2: com.mycila.inject.internal.asm.Label;

        r9 := @parameter3: java.lang.String;

        $r1 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>(0);

        specialinvoke r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: void declareLabel(com.mycila.inject.internal.asm.Label)>(r2);

        specialinvoke r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: void declareLabel(com.mycila.inject.internal.asm.Label)>(r3);

        specialinvoke r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: void declareLabel(com.mycila.inject.internal.asm.Label)>(r4);

        $r5 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("mv.visitTryCatchBlock(");

        specialinvoke r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: void appendLabel(com.mycila.inject.internal.asm.Label)>(r2);

        $r6 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        specialinvoke r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: void appendLabel(com.mycila.inject.internal.asm.Label)>(r3);

        $r7 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        specialinvoke r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: void appendLabel(com.mycila.inject.internal.asm.Label)>(r4);

        $r8 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: void appendConstant(java.lang.Object)>(r9);

        $r10 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(");\n");

        $r12 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.util.List text>;

        $r11 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r13);

        return;
    }

    public void visitLocalVariable(java.lang.String, java.lang.String, java.lang.String, com.mycila.inject.internal.asm.Label, com.mycila.inject.internal.asm.Label, int)
    {
        java.lang.StringBuffer $r1, $r2, $r4, $r6, $r8, $r10, $r12, $r13, $r14, $r15;
        int i0;
        com.mycila.inject.internal.asm.util.ASMifierMethodVisitor r0;
        java.lang.String r3, r5, r7, $r17;
        java.util.List $r16;
        com.mycila.inject.internal.asm.Label r9, r11;

        r0 := @this: com.mycila.inject.internal.asm.util.ASMifierMethodVisitor;

        r3 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.String;

        r7 := @parameter2: java.lang.String;

        r9 := @parameter3: com.mycila.inject.internal.asm.Label;

        r11 := @parameter4: com.mycila.inject.internal.asm.Label;

        i0 := @parameter5: int;

        $r1 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>(0);

        $r2 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("mv.visitLocalVariable(");

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: void appendConstant(java.lang.Object)>(r3);

        $r4 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: void appendConstant(java.lang.Object)>(r5);

        $r6 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: void appendConstant(java.lang.Object)>(r7);

        $r8 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        specialinvoke r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: void appendLabel(com.mycila.inject.internal.asm.Label)>(r9);

        $r10 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        specialinvoke r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: void appendLabel(com.mycila.inject.internal.asm.Label)>(r11);

        $r12 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(");\n");

        $r16 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.util.List text>;

        $r15 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        $r17 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r16.<java.util.List: boolean add(java.lang.Object)>($r17);

        return;
    }

    public void visitLineNumber(int, com.mycila.inject.internal.asm.Label)
    {
        java.util.List $r8;
        java.lang.StringBuffer $r1, $r2, $r3, $r4, $r6, $r7;
        int i0;
        com.mycila.inject.internal.asm.Label r5;
        com.mycila.inject.internal.asm.util.ASMifierMethodVisitor r0;
        java.lang.String $r9;

        r0 := @this: com.mycila.inject.internal.asm.util.ASMifierMethodVisitor;

        i0 := @parameter0: int;

        r5 := @parameter1: com.mycila.inject.internal.asm.Label;

        $r1 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>(0);

        $r2 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("mv.visitLineNumber(");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        specialinvoke r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: void appendLabel(com.mycila.inject.internal.asm.Label)>(r5);

        $r6 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(");\n");

        $r8 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.util.List text>;

        $r7 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r9);

        return;
    }

    public void visitMaxs(int, int)
    {
        java.util.List $r8;
        java.lang.StringBuffer $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        int i0, i1;
        com.mycila.inject.internal.asm.util.ASMifierMethodVisitor r0;
        java.lang.String $r9;

        r0 := @this: com.mycila.inject.internal.asm.util.ASMifierMethodVisitor;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>(0);

        $r2 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("mv.visitMaxs(");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(");\n");

        $r8 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.util.List text>;

        $r7 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r9);

        return;
    }

    private void declareFrameTypes(int, java.lang.Object[])
    {
        java.lang.Object[] r0;
        int i0, i1;
        com.mycila.inject.internal.asm.Label $r4;
        java.lang.Object $r1, $r3;
        com.mycila.inject.internal.asm.util.ASMifierMethodVisitor r2;
        boolean $z0;

        r2 := @this: com.mycila.inject.internal.asm.util.ASMifierMethodVisitor;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.Object[];

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r1 = r0[i1];

        $z0 = $r1 instanceof com.mycila.inject.internal.asm.Label;

        if $z0 == 0 goto label2;

        $r3 = r0[i1];

        $r4 = (com.mycila.inject.internal.asm.Label) $r3;

        specialinvoke r2.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: void declareLabel(com.mycila.inject.internal.asm.Label)>($r4);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    private void appendFrameTypes(int, java.lang.Object[])
    {
        java.lang.Object[] r0;
        java.lang.Integer $r7;
        java.lang.StringBuffer $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r16;
        int i0, $i1, i2;
        com.mycila.inject.internal.asm.util.ASMifierMethodVisitor r3;
        boolean $z0, $z1;
        com.mycila.inject.internal.asm.Label $r5;
        java.lang.Object $r1, $r2, $r4, $r6, $r15;

        r3 := @this: com.mycila.inject.internal.asm.util.ASMifierMethodVisitor;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.Object[];

        i2 = 0;

     label01:
        if i2 >= i0 goto label14;

        if i2 <= 0 goto label02;

        $r16 = r3.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

     label02:
        $r1 = r0[i2];

        $z0 = $r1 instanceof java.lang.String;

        if $z0 == 0 goto label03;

        $r15 = r0[i2];

        virtualinvoke r3.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: void appendConstant(java.lang.Object)>($r15);

        goto label13;

     label03:
        $r2 = r0[i2];

        $z1 = $r2 instanceof java.lang.Integer;

        if $z1 == 0 goto label12;

        $r6 = r0[i2];

        $r7 = (java.lang.Integer) $r6;

        $i1 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        tableswitch($i1)
        {
            case 0: goto label04;
            case 1: goto label05;
            case 2: goto label06;
            case 3: goto label07;
            case 4: goto label08;
            case 5: goto label09;
            case 6: goto label10;
            default: goto label11;
        };

     label04:
        $r14 = r3.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Opcodes.TOP");

        goto label11;

     label05:
        $r13 = r3.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Opcodes.INTEGER");

        goto label11;

     label06:
        $r12 = r3.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Opcodes.FLOAT");

        goto label11;

     label07:
        $r11 = r3.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Opcodes.DOUBLE");

        goto label11;

     label08:
        $r10 = r3.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Opcodes.LONG");

        goto label11;

     label09:
        $r9 = r3.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Opcodes.NULL");

        goto label11;

     label10:
        $r8 = r3.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Opcodes.UNINITIALIZED_THIS");

     label11:
        goto label13;

     label12:
        $r4 = r0[i2];

        $r5 = (com.mycila.inject.internal.asm.Label) $r4;

        specialinvoke r3.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: void appendLabel(com.mycila.inject.internal.asm.Label)>($r5);

     label13:
        i2 = i2 + 1;

        goto label01;

     label14:
        return;
    }

    private void declareLabel(com.mycila.inject.internal.asm.Label)
    {
        java.lang.StringBuffer $r4, $r5, $r7, $r10, $r11, $r12;
        java.util.Map $r2, $r6, $r9;
        com.mycila.inject.internal.asm.Label r1;
        int $i0;
        com.mycila.inject.internal.asm.util.ASMifierMethodVisitor r0;
        java.lang.Object $r3;
        java.lang.String $r8, r13;

        r0 := @this: com.mycila.inject.internal.asm.util.ASMifierMethodVisitor;

        r1 := @parameter0: com.mycila.inject.internal.asm.Label;

        $r2 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.util.Map labelNames>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r13 = (java.lang.String) $r3;

        if r13 != null goto label1;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("l");

        $r6 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.util.Map labelNames>;

        $i0 = interfaceinvoke $r6.<java.util.Map: int size()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        $r9 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.util.Map labelNames>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r8);

        $r10 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Label ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = new Label();\n");

     label1:
        return;
    }

    private void appendLabel(com.mycila.inject.internal.asm.Label)
    {
        java.lang.StringBuffer $r3;
        java.util.Map $r2;
        com.mycila.inject.internal.asm.Label r1;
        com.mycila.inject.internal.asm.util.ASMifierMethodVisitor r0;
        java.lang.Object $r4;
        java.lang.String $r5;

        r0 := @this: com.mycila.inject.internal.asm.util.ASMifierMethodVisitor;

        r1 := @parameter0: com.mycila.inject.internal.asm.Label;

        $r3 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.lang.StringBuffer buf>;

        $r2 = r0.<com.mycila.inject.internal.asm.util.ASMifierMethodVisitor: java.util.Map labelNames>;

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r5 = (java.lang.String) $r4;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        return;
    }
}
