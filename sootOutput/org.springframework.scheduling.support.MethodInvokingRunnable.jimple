public class org.springframework.scheduling.support.MethodInvokingRunnable extends org.springframework.beans.support.ArgumentConvertingMethodInvoker implements java.lang.Runnable, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.InitializingBean
{
    protected final org.apache.commons.logging.Log logger;
    private java.lang.ClassLoader beanClassLoader;

    public void <init>()
    {
        org.springframework.scheduling.support.MethodInvokingRunnable r0;
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;
        java.lang.ClassLoader $r3;

        r0 := @this: org.springframework.scheduling.support.MethodInvokingRunnable;

        specialinvoke r0.<org.springframework.beans.support.ArgumentConvertingMethodInvoker: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.springframework.scheduling.support.MethodInvokingRunnable: org.apache.commons.logging.Log logger> = $r2;

        $r3 = staticinvoke <org.springframework.util.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>();

        r0.<org.springframework.scheduling.support.MethodInvokingRunnable: java.lang.ClassLoader beanClassLoader> = $r3;

        return;
    }

    public void setBeanClassLoader(java.lang.ClassLoader)
    {
        java.lang.ClassLoader r1;
        org.springframework.scheduling.support.MethodInvokingRunnable r0;

        r0 := @this: org.springframework.scheduling.support.MethodInvokingRunnable;

        r1 := @parameter0: java.lang.ClassLoader;

        r0.<org.springframework.scheduling.support.MethodInvokingRunnable: java.lang.ClassLoader beanClassLoader> = r1;

        return;
    }

    protected java.lang.Class resolveClassName(java.lang.String) throws java.lang.ClassNotFoundException
    {
        org.springframework.scheduling.support.MethodInvokingRunnable r1;
        java.lang.Class $r3;
        java.lang.String r0;
        java.lang.ClassLoader $r2;

        r1 := @this: org.springframework.scheduling.support.MethodInvokingRunnable;

        r0 := @parameter0: java.lang.String;

        $r2 = r1.<org.springframework.scheduling.support.MethodInvokingRunnable: java.lang.ClassLoader beanClassLoader>;

        $r3 = staticinvoke <org.springframework.util.ClassUtils: java.lang.Class forName(java.lang.String,java.lang.ClassLoader)>(r0, $r2);

        return $r3;
    }

    public void afterPropertiesSet() throws java.lang.ClassNotFoundException, java.lang.NoSuchMethodException
    {
        org.springframework.scheduling.support.MethodInvokingRunnable r0;

        r0 := @this: org.springframework.scheduling.support.MethodInvokingRunnable;

        virtualinvoke r0.<org.springframework.scheduling.support.MethodInvokingRunnable: void prepare()>();

        return;
    }

    public void run()
    {
        java.lang.Throwable $r1, $r7;
        org.springframework.scheduling.support.MethodInvokingRunnable r0;
        java.lang.reflect.InvocationTargetException $r4;
        org.apache.commons.logging.Log $r2, $r5;
        java.lang.String $r3, $r6;

        r0 := @this: org.springframework.scheduling.support.MethodInvokingRunnable;

     label1:
        virtualinvoke r0.<org.springframework.scheduling.support.MethodInvokingRunnable: java.lang.Object invoke()>();

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        $r5 = r0.<org.springframework.scheduling.support.MethodInvokingRunnable: org.apache.commons.logging.Log logger>;

        $r6 = virtualinvoke r0.<org.springframework.scheduling.support.MethodInvokingRunnable: java.lang.String getInvocationFailureMessage()>();

        $r7 = virtualinvoke $r4.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>($r6, $r7);

        goto label5;

     label4:
        $r1 := @caughtexception;

        $r2 = r0.<org.springframework.scheduling.support.MethodInvokingRunnable: org.apache.commons.logging.Log logger>;

        $r3 = virtualinvoke r0.<org.springframework.scheduling.support.MethodInvokingRunnable: java.lang.String getInvocationFailureMessage()>();

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>($r3, $r1);

     label5:
        return;

        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
    }

    protected java.lang.String getInvocationFailureMessage()
    {
        org.springframework.scheduling.support.MethodInvokingRunnable r1;
        java.lang.StringBuilder $r0, $r3, $r4, $r6, $r7;
        java.lang.Class $r5;
        java.lang.String $r2, $r8;

        r1 := @this: org.springframework.scheduling.support.MethodInvokingRunnable;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("Invocation of method \'");

        $r2 = virtualinvoke r1.<org.springframework.scheduling.support.MethodInvokingRunnable: java.lang.String getTargetMethod()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' on target class [");

        $r5 = virtualinvoke r1.<org.springframework.scheduling.support.MethodInvokingRunnable: java.lang.Class getTargetClass()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] failed");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }
}
