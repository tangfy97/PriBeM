abstract class org.aspectj.runtime.reflect.CodeSignatureImpl extends org.aspectj.runtime.reflect.MemberSignatureImpl implements org.aspectj.lang.reflect.CodeSignature
{
    java.lang.Class[] parameterTypes;
    java.lang.String[] parameterNames;
    java.lang.Class[] exceptionTypes;

    void <init>(int, java.lang.String, java.lang.Class, java.lang.Class[], java.lang.String[], java.lang.Class[])
    {
        org.aspectj.runtime.reflect.CodeSignatureImpl r0;
        int i0;
        java.lang.Class[] r3, r5;
        java.lang.Class r2;
        java.lang.String[] r4;
        java.lang.String r1;

        r0 := @this: org.aspectj.runtime.reflect.CodeSignatureImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Class;

        r3 := @parameter3: java.lang.Class[];

        r4 := @parameter4: java.lang.String[];

        r5 := @parameter5: java.lang.Class[];

        specialinvoke r0.<org.aspectj.runtime.reflect.MemberSignatureImpl: void <init>(int,java.lang.String,java.lang.Class)>(i0, r1, r2);

        r0.<org.aspectj.runtime.reflect.CodeSignatureImpl: java.lang.Class[] parameterTypes> = r3;

        r0.<org.aspectj.runtime.reflect.CodeSignatureImpl: java.lang.String[] parameterNames> = r4;

        r0.<org.aspectj.runtime.reflect.CodeSignatureImpl: java.lang.Class[] exceptionTypes> = r5;

        return;
    }

    void <init>(java.lang.String)
    {
        org.aspectj.runtime.reflect.CodeSignatureImpl r0;
        java.lang.String r1;

        r0 := @this: org.aspectj.runtime.reflect.CodeSignatureImpl;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.aspectj.runtime.reflect.MemberSignatureImpl: void <init>(java.lang.String)>(r1);

        return;
    }

    public java.lang.Class[] getParameterTypes()
    {
        org.aspectj.runtime.reflect.CodeSignatureImpl r0;
        java.lang.Class[] $r1, $r2, $r3;

        r0 := @this: org.aspectj.runtime.reflect.CodeSignatureImpl;

        $r1 = r0.<org.aspectj.runtime.reflect.CodeSignatureImpl: java.lang.Class[] parameterTypes>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.Class[] extractTypes(int)>(3);

        r0.<org.aspectj.runtime.reflect.CodeSignatureImpl: java.lang.Class[] parameterTypes> = $r3;

     label1:
        $r2 = r0.<org.aspectj.runtime.reflect.CodeSignatureImpl: java.lang.Class[] parameterTypes>;

        return $r2;
    }

    public java.lang.String[] getParameterNames()
    {
        org.aspectj.runtime.reflect.CodeSignatureImpl r0;
        java.lang.String[] $r1, $r2, $r3;

        r0 := @this: org.aspectj.runtime.reflect.CodeSignatureImpl;

        $r1 = r0.<org.aspectj.runtime.reflect.CodeSignatureImpl: java.lang.String[] parameterNames>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.String[] extractStrings(int)>(4);

        r0.<org.aspectj.runtime.reflect.CodeSignatureImpl: java.lang.String[] parameterNames> = $r3;

     label1:
        $r2 = r0.<org.aspectj.runtime.reflect.CodeSignatureImpl: java.lang.String[] parameterNames>;

        return $r2;
    }

    public java.lang.Class[] getExceptionTypes()
    {
        org.aspectj.runtime.reflect.CodeSignatureImpl r0;
        java.lang.Class[] $r1, $r2, $r3;

        r0 := @this: org.aspectj.runtime.reflect.CodeSignatureImpl;

        $r1 = r0.<org.aspectj.runtime.reflect.CodeSignatureImpl: java.lang.Class[] exceptionTypes>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.Class[] extractTypes(int)>(5);

        r0.<org.aspectj.runtime.reflect.CodeSignatureImpl: java.lang.Class[] exceptionTypes> = $r3;

     label1:
        $r2 = r0.<org.aspectj.runtime.reflect.CodeSignatureImpl: java.lang.Class[] exceptionTypes>;

        return $r2;
    }
}
