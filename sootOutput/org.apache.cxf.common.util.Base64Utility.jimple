public final class org.apache.cxf.common.util.Base64Utility extends java.lang.Object
{
    private static final java.util.logging.Logger LOG;
    private static final char[] BCS;
    private static final char PAD;
    private static final int BDTSIZE;
    private static final byte[] BDT;
    private static final int PAD_SIZE0;
    private static final int PAD_SIZE4;
    private static final int PAD_SIZE8;

    private void <init>()
    {
        org.apache.cxf.common.util.Base64Utility r0;

        r0 := @this: org.apache.cxf.common.util.Base64Utility;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static byte[] decodeChunk(char[], int, int) throws org.apache.cxf.common.util.Base64Exception
    {
        byte[] $r2, $r3, $r4, r5, r6;
        byte $b16, $b22;
        int i0, i1, $i2, $i3, $i4, $i6, $i7, $i9, $i11, $i12, $i13, $i17, $i19, i20, i21, i23, i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31;
        char $c5, $c8, $c10, $c14, $c15, $c18;
        char[] r0, r1;

        r1 := @parameter0: char[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        $i2 = i0 - i1;

        if $i2 >= 4 goto label1;

        return null;

     label1:
        r0 = newarray (char)[4];

        i20 = 0;

        $i3 = i0 / 4;

        i21 = 3 * $i3;

        $i4 = i0 - 1;

        $c5 = r1[$i4];

        $i26 = (int) $c5;

        if $i26 != 61 goto label4;

        $i19 = i21;

        $i17 = i0 - 2;

        $c18 = r1[$i17];

        $i27 = (int) $c18;

        if $i27 != 61 goto label2;

        $b22 = 2;

        goto label3;

     label2:
        $b22 = 1;

     label3:
        i21 = $i19 - $b22;

     label4:
        $r4 = newarray (byte)[i21];

        r5 = $r4;

        i23 = 0;

        i24 = i1;

     label5:
        $i25 = i1 + i0;

        if i24 >= $i25 goto label8;

        $i7 = lengthof r1;

        if i24 >= $i7 goto label8;

        $c8 = r1[i24];

        $i28 = (int) $c8;

        if $i28 == 61 goto label6;

        $c14 = r1[i24];

        $r2 = <org.apache.cxf.common.util.Base64Utility: byte[] BDT>;

        $i13 = lengthof $r2;

        $i29 = (int) $c14;

        if $i29 >= $i13 goto label7;

        $r3 = <org.apache.cxf.common.util.Base64Utility: byte[] BDT>;

        $c15 = r1[i24];

        $i30 = (int) $c15;

        $b16 = $r3[$i30];

        $i31 = (int) $b16;

        if $i31 == 127 goto label7;

     label6:
        $i9 = i20;

        i20 = i20 + 1;

        $c10 = r1[i24];

        r0[$i9] = $c10;

        $i11 = lengthof r0;

        if i20 != $i11 goto label7;

        i20 = 0;

        $i12 = staticinvoke <org.apache.cxf.common.util.Base64Utility: int processEncodeme(char[],byte[],int)>(r0, $r4, i23);

        i23 = i23 + $i12;

     label7:
        i24 = i24 + 1;

        goto label5;

     label8:
        $i6 = lengthof $r4;

        if i23 == $i6 goto label9;

        r6 = newarray (byte)[i23];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r6, 0, i23);

        r5 = r6;

     label9:
        return r5;
    }

    public static byte[] decode(java.lang.String) throws org.apache.cxf.common.util.Base64Exception
    {
        byte[] $r2;
        java.lang.Object[] $r11;
        java.util.logging.Logger $r5, $r12;
        org.apache.cxf.common.i18n.Message $r10;
        java.lang.Exception $r3;
        org.apache.cxf.common.util.Base64Exception $r9;
        int $i0;
        char[] $r1;
        java.lang.StringBuilder $r4, $r6, $r7;
        java.lang.String r0, $r8;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();

        $i0 = lengthof $r1;

        $r2 = staticinvoke <org.apache.cxf.common.util.Base64Utility: byte[] decodeChunk(char[],int,int)>($r1, 0, $i0);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r5 = <org.apache.cxf.common.util.Base64Utility: java.util.logging.Logger LOG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid base64 encoded string : ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.util.logging.Logger: void warning(java.lang.String)>($r8);

        $r9 = new org.apache.cxf.common.util.Base64Exception;

        $r10 = new org.apache.cxf.common.i18n.Message;

        $r12 = <org.apache.cxf.common.util.Base64Utility: java.util.logging.Logger LOG>;

        $r11 = newarray (java.lang.Object)[0];

        specialinvoke $r10.<org.apache.cxf.common.i18n.Message: void <init>(java.lang.String,java.util.logging.Logger,java.lang.Object[])>("BASE64_RUNTIME_EXCEPTION", $r12, $r11);

        specialinvoke $r9.<org.apache.cxf.common.util.Base64Exception: void <init>(org.apache.cxf.common.i18n.Message,java.lang.Throwable)>($r10, $r3);

        throw $r9;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static void decode(char[], int, int, java.io.OutputStream) throws org.apache.cxf.common.util.Base64Exception
    {
        byte[] $r2;
        java.lang.Object[] $r12;
        org.apache.cxf.common.i18n.Message $r11;
        int i0, i1;
        java.lang.String $r7, $r9;
        java.io.OutputStream r0;
        java.util.logging.Logger $r5, $r13;
        java.lang.Exception $r3;
        org.apache.cxf.common.util.Base64Exception $r10;
        char[] r1;
        java.lang.StringBuilder $r4, $r6, $r8;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r0 := @parameter3: java.io.OutputStream;

     label1:
        $r2 = staticinvoke <org.apache.cxf.common.util.Base64Utility: byte[] decodeChunk(char[],int,int)>(r1, i0, i1);

        virtualinvoke r0.<java.io.OutputStream: void write(byte[])>($r2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r5 = <org.apache.cxf.common.util.Base64Utility: java.util.logging.Logger LOG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid base64 encoded string : ");

        $r7 = new java.lang.String;

        specialinvoke $r7.<java.lang.String: void <init>(char[])>(r1);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.util.logging.Logger: void warning(java.lang.String)>($r9);

        $r10 = new org.apache.cxf.common.util.Base64Exception;

        $r11 = new org.apache.cxf.common.i18n.Message;

        $r13 = <org.apache.cxf.common.util.Base64Utility: java.util.logging.Logger LOG>;

        $r12 = newarray (java.lang.Object)[0];

        specialinvoke $r11.<org.apache.cxf.common.i18n.Message: void <init>(java.lang.String,java.util.logging.Logger,java.lang.Object[])>("BASE64_RUNTIME_EXCEPTION", $r13, $r12);

        specialinvoke $r10.<org.apache.cxf.common.util.Base64Exception: void <init>(org.apache.cxf.common.i18n.Message,java.lang.Throwable)>($r11, $r3);

        throw $r10;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static void decode(java.lang.String, java.io.OutputStream) throws org.apache.cxf.common.util.Base64Exception
    {
        byte[] $r3;
        java.lang.Object[] $r12, $r17;
        org.apache.cxf.common.i18n.Message $r11, $r16;
        int $i0;
        java.lang.String r0, $r9;
        java.io.OutputStream r2;
        java.io.IOException $r14;
        java.util.logging.Logger $r6, $r13, $r18;
        java.lang.Exception $r4;
        org.apache.cxf.common.util.Base64Exception $r10, $r15;
        char[] $r1;
        java.lang.StringBuilder $r5, $r7, $r8;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.OutputStream;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();

        $i0 = lengthof $r1;

        $r3 = staticinvoke <org.apache.cxf.common.util.Base64Utility: byte[] decodeChunk(char[],int,int)>($r1, 0, $i0);

        virtualinvoke r2.<java.io.OutputStream: void write(byte[])>($r3);

     label2:
        goto label5;

     label3:
        $r14 := @caughtexception;

        $r15 = new org.apache.cxf.common.util.Base64Exception;

        $r16 = new org.apache.cxf.common.i18n.Message;

        $r18 = <org.apache.cxf.common.util.Base64Utility: java.util.logging.Logger LOG>;

        $r17 = newarray (java.lang.Object)[0];

        specialinvoke $r16.<org.apache.cxf.common.i18n.Message: void <init>(java.lang.String,java.util.logging.Logger,java.lang.Object[])>("BASE64_DECODE_IOEXCEPTION", $r18, $r17);

        specialinvoke $r15.<org.apache.cxf.common.util.Base64Exception: void <init>(org.apache.cxf.common.i18n.Message,java.lang.Throwable)>($r16, $r14);

        throw $r15;

     label4:
        $r4 := @caughtexception;

        $r6 = <org.apache.cxf.common.util.Base64Utility: java.util.logging.Logger LOG>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid base64 encoded string : ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.util.logging.Logger: void warning(java.lang.String)>($r9);

        $r10 = new org.apache.cxf.common.util.Base64Exception;

        $r11 = new org.apache.cxf.common.i18n.Message;

        $r13 = <org.apache.cxf.common.util.Base64Utility: java.util.logging.Logger LOG>;

        $r12 = newarray (java.lang.Object)[0];

        specialinvoke $r11.<org.apache.cxf.common.i18n.Message: void <init>(java.lang.String,java.util.logging.Logger,java.lang.Object[])>("BASE64_RUNTIME_EXCEPTION", $r13, $r12);

        specialinvoke $r10.<org.apache.cxf.common.util.Base64Exception: void <init>(org.apache.cxf.common.i18n.Message,java.lang.Throwable)>($r11, $r4);

        throw $r10;

     label5:
        return;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label4;
    }

    public static java.lang.String encode(byte[])
    {
        byte[] r0;
        int $i0, $i1;
        char[] $r1;
        java.lang.String $r2;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        $r1 = staticinvoke <org.apache.cxf.common.util.Base64Utility: char[] encodeChunk(byte[],int,int)>(r0, 0, $i0);

        $r2 = new java.lang.String;

        $i1 = lengthof $r1;

        specialinvoke $r2.<java.lang.String: void <init>(char[],int,int)>($r1, 0, $i1);

        return $r2;
    }

    public static char[] encodeChunk(byte[], int, int)
    {
        byte[] r0;
        byte $b7, $b10, $b21, $b27, $b30, $b35;
        short $s8, $s11, $s28, $s31, $s36, s57, $s65, $s67, $s69, $s73, $s76, $s78;
        char[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, r10;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i9, $i12, $i13, $i15, $i16, $i18, $i19, $i22, $i24, $i25, $i29, $i32, $i33, $i34, $i37, $i38, $i40, $i41, $i43, $i44, $i46, $i48, $i49, i50, i51, i52, i53, i54, i55, i56, i58, i59, i60, i61, i62, i63, i64, $i66, $i68, $i70, $i72, $i74, $i75, $i77, $i79;
        char $c14, $c17, $c20, $c23, $c26, $c39, $c42, $c45, $c47;

        r0 := @parameter0: byte[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        if i0 > 0 goto label1;

        return null;

     label1:
        $i2 = i0 - i1;

        $i3 = $i2 % 3;

        if $i3 != 0 goto label2;

        $i48 = i0 / 3;

        $i49 = $i48 * 4;

        r10 = newarray (char)[$i49];

        goto label3;

     label2:
        $i4 = i0 / 3;

        $i5 = $i4 * 4;

        $i6 = $i5 + 4;

        r10 = newarray (char)[$i6];

     label3:
        i50 = i1;

        i51 = 0;

        i52 = i0 - i1;

     label4:
        if i52 < 3 goto label5;

        $b27 = r0[i50];

        $s65 = (short) $b27;

        $s28 = $s65 & 255;

        $i66 = (int) $s28;

        $i33 = $i66 << 16;

        $i29 = i50 + 1;

        $b30 = r0[$i29];

        $s67 = (short) $b30;

        $s31 = $s67 & 255;

        $i68 = (int) $s31;

        $i32 = $i68 << 8;

        $i37 = $i33 + $i32;

        $i34 = i50 + 2;

        $b35 = r0[$i34];

        $s69 = (short) $b35;

        $s36 = $s69 & 255;

        $i70 = (int) $s36;

        i53 = $i37 + $i70;

        i54 = i51 + 1;

        $r6 = <org.apache.cxf.common.util.Base64Utility: char[] BCS>;

        $i38 = i53 >> 18;

        $c39 = $r6[$i38];

        r10[i51] = $c39;

        i55 = i54 + 1;

        $r7 = <org.apache.cxf.common.util.Base64Utility: char[] BCS>;

        $i40 = i53 >> 12;

        $i41 = $i40 & 63;

        $c42 = $r7[$i41];

        r10[i54] = $c42;

        i56 = i55 + 1;

        $r8 = <org.apache.cxf.common.util.Base64Utility: char[] BCS>;

        $i43 = i53 >> 6;

        $i44 = $i43 & 63;

        $c45 = $r8[$i44];

        r10[i55] = $c45;

        i51 = i56 + 1;

        $r9 = <org.apache.cxf.common.util.Base64Utility: char[] BCS>;

        $i46 = i53 & 63;

        $c47 = $r9[$i46];

        r10[i56] = $c47;

        i50 = i50 + 3;

        $i72 = (int) -3;

        i52 = i52 + $i72;

        goto label4;

     label5:
        if i52 != 1 goto label6;

        $b21 = r0[i50];

        $s73 = (short) $b21;

        s57 = $s73 & 255;

        i58 = i51 + 1;

        $r4 = <org.apache.cxf.common.util.Base64Utility: char[] BCS>;

        $i74 = (int) s57;

        $i22 = $i74 >> 2;

        $c23 = $r4[$i22];

        r10[i51] = $c23;

        i59 = i58 + 1;

        $r5 = <org.apache.cxf.common.util.Base64Utility: char[] BCS>;

        $i75 = (int) s57;

        $i24 = $i75 << 4;

        $i25 = $i24 & 63;

        $c26 = $r5[$i25];

        r10[i58] = $c26;

        i60 = i59 + 1;

        r10[i59] = 61;

        r10[i60] = 61;

        goto label7;

     label6:
        if i52 != 2 goto label7;

        $b7 = r0[i50];

        $s76 = (short) $b7;

        $s8 = $s76 & 255;

        $i77 = (int) $s8;

        $i12 = $i77 << 8;

        $i9 = i50 + 1;

        $b10 = r0[$i9];

        $s78 = (short) $b10;

        $s11 = $s78 & 255;

        $i79 = (int) $s11;

        i61 = $i12 + $i79;

        i62 = i51 + 1;

        $r1 = <org.apache.cxf.common.util.Base64Utility: char[] BCS>;

        $i13 = i61 >> 10;

        $c14 = $r1[$i13];

        r10[i51] = $c14;

        i63 = i62 + 1;

        $r2 = <org.apache.cxf.common.util.Base64Utility: char[] BCS>;

        $i15 = i61 >> 4;

        $i16 = $i15 & 63;

        $c17 = $r2[$i16];

        r10[i62] = $c17;

        i64 = i63 + 1;

        $r3 = <org.apache.cxf.common.util.Base64Utility: char[] BCS>;

        $i18 = i61 << 2;

        $i19 = $i18 & 63;

        $c20 = $r3[$i19];

        r10[i63] = $c20;

        r10[i64] = 61;

     label7:
        return r10;
    }

    public static void encodeChunk(byte[], int, int, java.io.OutputStream) throws org.apache.cxf.common.util.Base64Exception
    {
        java.io.OutputStream r0;
        byte[] r2, $r4;
        java.lang.Object[] $r8;
        java.io.IOException $r5;
        org.apache.cxf.common.i18n.Message $r7;
        java.util.logging.Logger $r9;
        org.apache.cxf.common.util.Base64Exception $r6;
        int i0, i1;
        char[] $r3;
        java.lang.String $r1;

        r2 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r0 := @parameter3: java.io.OutputStream;

     label1:
        $r1 = new java.lang.String;

        $r3 = staticinvoke <org.apache.cxf.common.util.Base64Utility: char[] encodeChunk(byte[],int,int)>(r2, i0, i1);

        specialinvoke $r1.<java.lang.String: void <init>(char[])>($r3);

        $r4 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        virtualinvoke r0.<java.io.OutputStream: void write(byte[])>($r4);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.apache.cxf.common.util.Base64Exception;

        $r7 = new org.apache.cxf.common.i18n.Message;

        $r9 = <org.apache.cxf.common.util.Base64Utility: java.util.logging.Logger LOG>;

        $r8 = newarray (java.lang.Object)[0];

        specialinvoke $r7.<org.apache.cxf.common.i18n.Message: void <init>(java.lang.String,java.util.logging.Logger,java.lang.Object[])>("BASE64_ENCODE_IOEXCEPTION", $r9, $r8);

        specialinvoke $r6.<org.apache.cxf.common.util.Base64Exception: void <init>(org.apache.cxf.common.i18n.Message,java.lang.Throwable)>($r7, $r5);

        throw $r6;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static void encode(byte[], int, int, java.io.Writer) throws org.apache.cxf.common.util.Base64Exception
    {
        byte[] r1;
        java.lang.Object[] $r6;
        java.io.IOException $r3;
        org.apache.cxf.common.i18n.Message $r5;
        java.util.logging.Logger $r7;
        org.apache.cxf.common.util.Base64Exception $r4;
        java.io.Writer r0;
        int i0, i1;
        char[] $r2;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r0 := @parameter3: java.io.Writer;

     label1:
        $r2 = staticinvoke <org.apache.cxf.common.util.Base64Utility: char[] encodeChunk(byte[],int,int)>(r1, i0, i1);

        virtualinvoke r0.<java.io.Writer: void write(char[])>($r2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.apache.cxf.common.util.Base64Exception;

        $r5 = new org.apache.cxf.common.i18n.Message;

        $r7 = <org.apache.cxf.common.util.Base64Utility: java.util.logging.Logger LOG>;

        $r6 = newarray (java.lang.Object)[0];

        specialinvoke $r5.<org.apache.cxf.common.i18n.Message: void <init>(java.lang.String,java.util.logging.Logger,java.lang.Object[])>("BASE64_ENCODE_WRITER_IOEXCEPTION", $r7, $r6);

        specialinvoke $r4.<org.apache.cxf.common.util.Base64Exception: void <init>(org.apache.cxf.common.i18n.Message,java.lang.Throwable)>($r5, $r3);

        throw $r4;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private static int processEncodeme(char[], byte[], int) throws org.apache.cxf.common.util.Base64Exception
    {
        byte[] $r1, $r2, $r3, $r4, r5;
        byte $b11, $b17, $b19, $b22, $b28, $b34, $b40, $b41, $b42, $b43, $b44, b46;
        char[] r0;
        java.lang.IllegalStateException $r7;
        int $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i14, $i15, $i16, $i18, $i20, $i21, $i23, $i24, $i25, $i26, $i27, $i29, $i30, $i31, $i32, $i33, $i35, $i36, $i37, $i38, $i39, i45, i47, i48, i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67;
        char $c0, $c1, $c2, $c3, $c4, $c5;

        r0 := @parameter0: char[];

        r5 := @parameter1: byte[];

        i45 := @parameter2: int;

        b46 = 3;

        $c0 = r0[3];

        $i50 = (int) $c0;

        if $i50 != 61 goto label1;

        b46 = 2;

     label1:
        $c1 = r0[2];

        $i51 = (int) $c1;

        if $i51 != 61 goto label2;

        b46 = 1;

     label2:
        $r1 = <org.apache.cxf.common.util.Base64Utility: byte[] BDT>;

        $c2 = r0[0];

        $i52 = (int) $c2;

        $b41 = $r1[$i52];

        $r2 = <org.apache.cxf.common.util.Base64Utility: byte[] BDT>;

        $c3 = r0[1];

        $i53 = (int) $c3;

        $b42 = $r2[$i53];

        $r3 = <org.apache.cxf.common.util.Base64Utility: byte[] BDT>;

        $c4 = r0[2];

        $i54 = (int) $c4;

        $b43 = $r3[$i54];

        $r4 = <org.apache.cxf.common.util.Base64Utility: byte[] BDT>;

        $c5 = r0[3];

        $i55 = (int) $c5;

        $b44 = $r4[$i55];

        tableswitch(b46)
        {
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label5;
            default: goto label6;
        };

     label3:
        $i56 = (int) $b41;

        $i35 = $i56 << 2;

        $i38 = $i35 & 252;

        $i57 = (int) $b42;

        $i36 = $i57 >> 4;

        $i37 = $i36 & 3;

        $i39 = $i38 | $i37;

        $b40 = (byte) $i39;

        r5[i45] = $b40;

        return 1;

     label4:
        i47 = i45 + 1;

        $i58 = (int) $b41;

        $i23 = $i58 << 2;

        $i26 = $i23 & 252;

        $i59 = (int) $b42;

        $i24 = $i59 >> 4;

        $i25 = $i24 & 3;

        $i27 = $i26 | $i25;

        $b28 = (byte) $i27;

        r5[i45] = $b28;

        $i60 = (int) $b42;

        $i29 = $i60 << 4;

        $i32 = $i29 & 240;

        $i61 = (int) $b43;

        $i30 = $i61 >> 2;

        $i31 = $i30 & 15;

        $i33 = $i32 | $i31;

        $b34 = (byte) $i33;

        r5[i47] = $b34;

        return 2;

     label5:
        i48 = i45 + 1;

        $i62 = (int) $b41;

        $i6 = $i62 << 2;

        $i9 = $i6 & 252;

        $i63 = (int) $b42;

        $i7 = $i63 >> 4;

        $i8 = $i7 & 3;

        $i10 = $i9 | $i8;

        $b11 = (byte) $i10;

        r5[i45] = $b11;

        i49 = i48 + 1;

        $i64 = (int) $b42;

        $i12 = $i64 << 4;

        $i15 = $i12 & 240;

        $i65 = (int) $b43;

        $i13 = $i65 >> 2;

        $i14 = $i13 & 15;

        $i16 = $i15 | $i14;

        $b17 = (byte) $i16;

        r5[i48] = $b17;

        $i66 = (int) $b43;

        $i18 = $i66 << 6;

        $i20 = $i18 & 192;

        $b19 = $b44 & 63;

        $i67 = (int) $b19;

        $i21 = $i20 | $i67;

        $b22 = (byte) $i21;

        r5[i49] = $b22;

        return 3;

     label6:
        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>()>();

        throw $r7;
    }

    static void <clinit>()
    {
        byte[] $r2, $r5, $r6;
        char $c2;
        java.util.logging.Logger $r0;
        byte $b1;
        int $i0, i3, i4, $i5;
        char[] $r1, $r3, $r4;

        <org.apache.cxf.common.util.Base64Utility: int PAD_SIZE8> = 3;

        <org.apache.cxf.common.util.Base64Utility: int PAD_SIZE4> = 2;

        <org.apache.cxf.common.util.Base64Utility: int PAD_SIZE0> = 1;

        <org.apache.cxf.common.util.Base64Utility: int BDTSIZE> = 128;

        <org.apache.cxf.common.util.Base64Utility: char PAD> = 61;

        $r0 = staticinvoke <org.apache.cxf.common.logging.LogUtils: java.util.logging.Logger getL7dLogger(java.lang.Class)>(class "Lorg/apache/cxf/common/util/Base64Utility;");

        <org.apache.cxf.common.util.Base64Utility: java.util.logging.Logger LOG> = $r0;

        $r1 = newarray (char)[64];

        $r1[0] = 65;

        $r1[1] = 66;

        $r1[2] = 67;

        $r1[3] = 68;

        $r1[4] = 69;

        $r1[5] = 70;

        $r1[6] = 71;

        $r1[7] = 72;

        $r1[8] = 73;

        $r1[9] = 74;

        $r1[10] = 75;

        $r1[11] = 76;

        $r1[12] = 77;

        $r1[13] = 78;

        $r1[14] = 79;

        $r1[15] = 80;

        $r1[16] = 81;

        $r1[17] = 82;

        $r1[18] = 83;

        $r1[19] = 84;

        $r1[20] = 85;

        $r1[21] = 86;

        $r1[22] = 87;

        $r1[23] = 88;

        $r1[24] = 89;

        $r1[25] = 90;

        $r1[26] = 97;

        $r1[27] = 98;

        $r1[28] = 99;

        $r1[29] = 100;

        $r1[30] = 101;

        $r1[31] = 102;

        $r1[32] = 103;

        $r1[33] = 104;

        $r1[34] = 105;

        $r1[35] = 106;

        $r1[36] = 107;

        $r1[37] = 108;

        $r1[38] = 109;

        $r1[39] = 110;

        $r1[40] = 111;

        $r1[41] = 112;

        $r1[42] = 113;

        $r1[43] = 114;

        $r1[44] = 115;

        $r1[45] = 116;

        $r1[46] = 117;

        $r1[47] = 118;

        $r1[48] = 119;

        $r1[49] = 120;

        $r1[50] = 121;

        $r1[51] = 122;

        $r1[52] = 48;

        $r1[53] = 49;

        $r1[54] = 50;

        $r1[55] = 51;

        $r1[56] = 52;

        $r1[57] = 53;

        $r1[58] = 54;

        $r1[59] = 55;

        $r1[60] = 56;

        $r1[61] = 57;

        $r1[62] = 43;

        $r1[63] = 47;

        <org.apache.cxf.common.util.Base64Utility: char[] BCS> = $r1;

        $r2 = newarray (byte)[128];

        <org.apache.cxf.common.util.Base64Utility: byte[] BDT> = $r2;

        i3 = 0;

     label1:
        if i3 >= 128 goto label2;

        $r6 = <org.apache.cxf.common.util.Base64Utility: byte[] BDT>;

        $r6[i3] = 127;

        i3 = i3 + 1;

        goto label1;

     label2:
        i4 = 0;

     label3:
        $r3 = <org.apache.cxf.common.util.Base64Utility: char[] BCS>;

        $i0 = lengthof $r3;

        if i4 >= $i0 goto label4;

        $r5 = <org.apache.cxf.common.util.Base64Utility: byte[] BDT>;

        $r4 = <org.apache.cxf.common.util.Base64Utility: char[] BCS>;

        $c2 = $r4[i4];

        $b1 = (byte) i4;

        $i5 = (int) $c2;

        $r5[$i5] = $b1;

        i4 = i4 + 1;

        goto label3;

     label4:
        return;
    }
}
