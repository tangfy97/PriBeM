public final enum class org.codehaus.jackson.util.BufferRecycler$CharBufferType extends java.lang.Enum
{
    public static final enum org.codehaus.jackson.util.BufferRecycler$CharBufferType TOKEN_BUFFER;
    public static final enum org.codehaus.jackson.util.BufferRecycler$CharBufferType CONCAT_BUFFER;
    public static final enum org.codehaus.jackson.util.BufferRecycler$CharBufferType TEXT_BUFFER;
    public static final enum org.codehaus.jackson.util.BufferRecycler$CharBufferType NAME_COPY_BUFFER;
    private final int size;
    private static final org.codehaus.jackson.util.BufferRecycler$CharBufferType[] $VALUES;

    public static org.codehaus.jackson.util.BufferRecycler$CharBufferType[] values()
    {
        org.codehaus.jackson.util.BufferRecycler$CharBufferType[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <org.codehaus.jackson.util.BufferRecycler$CharBufferType: org.codehaus.jackson.util.BufferRecycler$CharBufferType[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (org.codehaus.jackson.util.BufferRecycler$CharBufferType[]) $r1;

        return $r2;
    }

    public static org.codehaus.jackson.util.BufferRecycler$CharBufferType valueOf(java.lang.String)
    {
        java.lang.String r0;
        org.codehaus.jackson.util.BufferRecycler$CharBufferType $r2;
        java.lang.Enum $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/codehaus/jackson/util/BufferRecycler$CharBufferType;", r0);

        $r2 = (org.codehaus.jackson.util.BufferRecycler$CharBufferType) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int, int)
    {
        int i0, i1;
        org.codehaus.jackson.util.BufferRecycler$CharBufferType r0;
        java.lang.String r1;

        r0 := @this: org.codehaus.jackson.util.BufferRecycler$CharBufferType;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        r0.<org.codehaus.jackson.util.BufferRecycler$CharBufferType: int size> = i1;

        return;
    }

    static int access$100(org.codehaus.jackson.util.BufferRecycler$CharBufferType)
    {
        int $i0;
        org.codehaus.jackson.util.BufferRecycler$CharBufferType r0;

        r0 := @parameter0: org.codehaus.jackson.util.BufferRecycler$CharBufferType;

        $i0 = r0.<org.codehaus.jackson.util.BufferRecycler$CharBufferType: int size>;

        return $i0;
    }

    static void <clinit>()
    {
        org.codehaus.jackson.util.BufferRecycler$CharBufferType $r0, $r1, $r2, $r3, $r5, $r6, $r7, $r8;
        org.codehaus.jackson.util.BufferRecycler$CharBufferType[] $r4;

        $r0 = new org.codehaus.jackson.util.BufferRecycler$CharBufferType;

        specialinvoke $r0.<org.codehaus.jackson.util.BufferRecycler$CharBufferType: void <init>(java.lang.String,int,int)>("TOKEN_BUFFER", 0, 2000);

        <org.codehaus.jackson.util.BufferRecycler$CharBufferType: org.codehaus.jackson.util.BufferRecycler$CharBufferType TOKEN_BUFFER> = $r0;

        $r1 = new org.codehaus.jackson.util.BufferRecycler$CharBufferType;

        specialinvoke $r1.<org.codehaus.jackson.util.BufferRecycler$CharBufferType: void <init>(java.lang.String,int,int)>("CONCAT_BUFFER", 1, 2000);

        <org.codehaus.jackson.util.BufferRecycler$CharBufferType: org.codehaus.jackson.util.BufferRecycler$CharBufferType CONCAT_BUFFER> = $r1;

        $r2 = new org.codehaus.jackson.util.BufferRecycler$CharBufferType;

        specialinvoke $r2.<org.codehaus.jackson.util.BufferRecycler$CharBufferType: void <init>(java.lang.String,int,int)>("TEXT_BUFFER", 2, 200);

        <org.codehaus.jackson.util.BufferRecycler$CharBufferType: org.codehaus.jackson.util.BufferRecycler$CharBufferType TEXT_BUFFER> = $r2;

        $r3 = new org.codehaus.jackson.util.BufferRecycler$CharBufferType;

        specialinvoke $r3.<org.codehaus.jackson.util.BufferRecycler$CharBufferType: void <init>(java.lang.String,int,int)>("NAME_COPY_BUFFER", 3, 200);

        <org.codehaus.jackson.util.BufferRecycler$CharBufferType: org.codehaus.jackson.util.BufferRecycler$CharBufferType NAME_COPY_BUFFER> = $r3;

        $r4 = newarray (org.codehaus.jackson.util.BufferRecycler$CharBufferType)[4];

        $r5 = <org.codehaus.jackson.util.BufferRecycler$CharBufferType: org.codehaus.jackson.util.BufferRecycler$CharBufferType TOKEN_BUFFER>;

        $r4[0] = $r5;

        $r6 = <org.codehaus.jackson.util.BufferRecycler$CharBufferType: org.codehaus.jackson.util.BufferRecycler$CharBufferType CONCAT_BUFFER>;

        $r4[1] = $r6;

        $r7 = <org.codehaus.jackson.util.BufferRecycler$CharBufferType: org.codehaus.jackson.util.BufferRecycler$CharBufferType TEXT_BUFFER>;

        $r4[2] = $r7;

        $r8 = <org.codehaus.jackson.util.BufferRecycler$CharBufferType: org.codehaus.jackson.util.BufferRecycler$CharBufferType NAME_COPY_BUFFER>;

        $r4[3] = $r8;

        <org.codehaus.jackson.util.BufferRecycler$CharBufferType: org.codehaus.jackson.util.BufferRecycler$CharBufferType[] $VALUES> = $r4;

        return;
    }
}
