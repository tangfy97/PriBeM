public abstract class net.oauth.signature.OAuthSignatureMethod extends java.lang.Object
{
    public static final java.lang.String _ACCESSOR;
    private java.lang.String consumerSecret;
    private java.lang.String tokenSecret;
    private static final net.oauth.signature.Base64 BASE64;
    private static final java.util.Map NAME_TO_CLASS;

    public void <init>()
    {
        net.oauth.signature.OAuthSignatureMethod r0;

        r0 := @this: net.oauth.signature.OAuthSignatureMethod;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void sign(net.oauth.OAuthMessage) throws net.oauth.OAuthException, java.io.IOException, java.net.URISyntaxException
    {
        net.oauth.OAuthMessage r0;
        java.lang.String $r3;
        net.oauth.OAuth$Parameter $r1;
        net.oauth.signature.OAuthSignatureMethod r2;

        r2 := @this: net.oauth.signature.OAuthSignatureMethod;

        r0 := @parameter0: net.oauth.OAuthMessage;

        $r1 = new net.oauth.OAuth$Parameter;

        $r3 = virtualinvoke r2.<net.oauth.signature.OAuthSignatureMethod: java.lang.String getSignature(net.oauth.OAuthMessage)>(r0);

        specialinvoke $r1.<net.oauth.OAuth$Parameter: void <init>(java.lang.String,java.lang.String)>("oauth_signature", $r3);

        virtualinvoke r0.<net.oauth.OAuthMessage: void addParameter(java.util.Map$Entry)>($r1);

        return;
    }

    public void validate(net.oauth.OAuthMessage) throws java.io.IOException, net.oauth.OAuthException, java.net.URISyntaxException
    {
        java.lang.String[] $r1;
        net.oauth.OAuthProblemException $r5;
        net.oauth.OAuthMessage r0;
        java.lang.String $r2, $r3, $r6;
        net.oauth.signature.OAuthSignatureMethod r4;
        boolean $z0;

        r4 := @this: net.oauth.signature.OAuthSignatureMethod;

        r0 := @parameter0: net.oauth.OAuthMessage;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = "oauth_signature";

        virtualinvoke r0.<net.oauth.OAuthMessage: void requireParameters(java.lang.String[])>($r1);

        $r2 = virtualinvoke r0.<net.oauth.OAuthMessage: java.lang.String getSignature()>();

        $r3 = staticinvoke <net.oauth.signature.OAuthSignatureMethod: java.lang.String getBaseString(net.oauth.OAuthMessage)>(r0);

        $z0 = virtualinvoke r4.<net.oauth.signature.OAuthSignatureMethod: boolean isValid(java.lang.String,java.lang.String)>($r2, $r3);

        if $z0 != 0 goto label1;

        $r5 = new net.oauth.OAuthProblemException;

        specialinvoke $r5.<net.oauth.OAuthProblemException: void <init>(java.lang.String)>("signature_invalid");

        virtualinvoke $r5.<net.oauth.OAuthProblemException: void setParameter(java.lang.String,java.lang.Object)>("oauth_signature", $r2);

        virtualinvoke $r5.<net.oauth.OAuthProblemException: void setParameter(java.lang.String,java.lang.Object)>("oauth_signature_base_string", $r3);

        $r6 = virtualinvoke r0.<net.oauth.OAuthMessage: java.lang.String getSignatureMethod()>();

        virtualinvoke $r5.<net.oauth.OAuthProblemException: void setParameter(java.lang.String,java.lang.Object)>("oauth_signature_method", $r6);

        throw $r5;

     label1:
        return;
    }

    protected java.lang.String getSignature(net.oauth.OAuthMessage) throws net.oauth.OAuthException, java.io.IOException, java.net.URISyntaxException
    {
        net.oauth.OAuthMessage r0;
        java.lang.String $r1, $r3;
        net.oauth.signature.OAuthSignatureMethod r2;

        r2 := @this: net.oauth.signature.OAuthSignatureMethod;

        r0 := @parameter0: net.oauth.OAuthMessage;

        $r1 = staticinvoke <net.oauth.signature.OAuthSignatureMethod: java.lang.String getBaseString(net.oauth.OAuthMessage)>(r0);

        $r3 = virtualinvoke r2.<net.oauth.signature.OAuthSignatureMethod: java.lang.String getSignature(java.lang.String)>($r1);

        return $r3;
    }

    protected void initialize(java.lang.String, net.oauth.OAuthAccessor) throws net.oauth.OAuthException
    {
        net.oauth.OAuthAccessor r0;
        net.oauth.OAuthConsumer $r1, $r5;
        java.lang.Object $r4, r7;
        java.lang.String r2, r6;
        net.oauth.signature.OAuthSignatureMethod r3;
        boolean $z0;

        r3 := @this: net.oauth.signature.OAuthSignatureMethod;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: net.oauth.OAuthAccessor;

        $r1 = r0.<net.oauth.OAuthAccessor: net.oauth.OAuthConsumer consumer>;

        r6 = $r1.<net.oauth.OAuthConsumer: java.lang.String consumerSecret>;

        $z0 = virtualinvoke r2.<java.lang.String: boolean endsWith(java.lang.String)>("-Accessor");

        if $z0 == 0 goto label2;

        $r4 = virtualinvoke r0.<net.oauth.OAuthAccessor: java.lang.Object getProperty(java.lang.String)>("oauth_accessor_secret");

        r7 = $r4;

        if $r4 != null goto label1;

        $r5 = r0.<net.oauth.OAuthAccessor: net.oauth.OAuthConsumer consumer>;

        r7 = virtualinvoke $r5.<net.oauth.OAuthConsumer: java.lang.Object getProperty(java.lang.String)>("oauth_accessor_secret");

     label1:
        if r7 == null goto label2;

        r6 = virtualinvoke r7.<java.lang.Object: java.lang.String toString()>();

     label2:
        if r6 != null goto label3;

        r6 = "";

     label3:
        virtualinvoke r3.<net.oauth.signature.OAuthSignatureMethod: void setConsumerSecret(java.lang.String)>(r6);

        return;
    }

    protected abstract java.lang.String getSignature(java.lang.String) throws net.oauth.OAuthException;

    protected abstract boolean isValid(java.lang.String, java.lang.String) throws net.oauth.OAuthException;

    protected java.lang.String getConsumerSecret()
    {
        java.lang.String $r1;
        net.oauth.signature.OAuthSignatureMethod r0;

        r0 := @this: net.oauth.signature.OAuthSignatureMethod;

        $r1 = r0.<net.oauth.signature.OAuthSignatureMethod: java.lang.String consumerSecret>;

        return $r1;
    }

    protected void setConsumerSecret(java.lang.String)
    {
        java.lang.String r1;
        net.oauth.signature.OAuthSignatureMethod r0;

        r0 := @this: net.oauth.signature.OAuthSignatureMethod;

        r1 := @parameter0: java.lang.String;

        r0.<net.oauth.signature.OAuthSignatureMethod: java.lang.String consumerSecret> = r1;

        return;
    }

    public java.lang.String getTokenSecret()
    {
        java.lang.String $r1;
        net.oauth.signature.OAuthSignatureMethod r0;

        r0 := @this: net.oauth.signature.OAuthSignatureMethod;

        $r1 = r0.<net.oauth.signature.OAuthSignatureMethod: java.lang.String tokenSecret>;

        return $r1;
    }

    public void setTokenSecret(java.lang.String)
    {
        java.lang.String r1;
        net.oauth.signature.OAuthSignatureMethod r0;

        r0 := @this: net.oauth.signature.OAuthSignatureMethod;

        r1 := @parameter0: java.lang.String;

        r0.<net.oauth.signature.OAuthSignatureMethod: java.lang.String tokenSecret> = r1;

        return;
    }

    public static java.lang.String getBaseString(net.oauth.OAuthMessage) throws java.io.IOException, java.net.URISyntaxException
    {
        java.util.ArrayList $r1;
        int $i0, $i1;
        java.lang.String $r2, $r3, $r7, $r8, $r9, $r12, $r13, $r16, $r17, $r19, r20;
        java.util.List $r4, $r5, r21;
        net.oauth.OAuthMessage r0;
        java.lang.StringBuilder $r6, $r10, $r11, $r14, $r15, $r18;

        r0 := @parameter0: net.oauth.OAuthMessage;

        r20 = r0.<net.oauth.OAuthMessage: java.lang.String URL>;

        $i0 = virtualinvoke r20.<java.lang.String: int indexOf(int)>(63);

        if $i0 >= 0 goto label1;

        r21 = virtualinvoke r0.<net.oauth.OAuthMessage: java.util.List getParameters()>();

        goto label2;

     label1:
        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r21 = $r1;

        $r2 = r0.<net.oauth.OAuthMessage: java.lang.String URL>;

        $i1 = $i0 + 1;

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>($i1);

        $r4 = staticinvoke <net.oauth.OAuth: java.util.List decodeForm(java.lang.String)>($r3);

        interfaceinvoke $r1.<java.util.List: boolean addAll(java.util.Collection)>($r4);

        $r5 = virtualinvoke r0.<net.oauth.OAuthMessage: java.util.List getParameters()>();

        interfaceinvoke $r1.<java.util.List: boolean addAll(java.util.Collection)>($r5);

        r20 = virtualinvoke r20.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label2:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = r0.<net.oauth.OAuthMessage: java.lang.String method>;

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String toUpperCase()>();

        $r9 = staticinvoke <net.oauth.OAuth: java.lang.String percentEncode(java.lang.String)>($r8);

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(38);

        $r12 = staticinvoke <net.oauth.signature.OAuthSignatureMethod: java.lang.String normalizeUrl(java.lang.String)>(r20);

        $r13 = staticinvoke <net.oauth.OAuth: java.lang.String percentEncode(java.lang.String)>($r12);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(38);

        $r16 = staticinvoke <net.oauth.signature.OAuthSignatureMethod: java.lang.String normalizeParameters(java.util.Collection)>(r21);

        $r17 = staticinvoke <net.oauth.OAuth: java.lang.String percentEncode(java.lang.String)>($r16);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r19;
    }

    protected static java.lang.String normalizeUrl(java.lang.String) throws java.net.URISyntaxException
    {
        int $i0, $i1, $i2, $i3;
        java.net.URI $r0;
        java.lang.String r1, $r2, $r3, $r4, $r5, r6, $r7, r8, $r14;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r13;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.net.URI;

        specialinvoke $r0.<java.net.URI: void <init>(java.lang.String)>(r1);

        $r2 = virtualinvoke $r0.<java.net.URI: java.lang.String getScheme()>();

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String toLowerCase()>();

        $r4 = virtualinvoke $r0.<java.net.URI: java.lang.String getAuthority()>();

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String toLowerCase()>();

        r6 = $r5;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("http");

        if $z0 == 0 goto label1;

        $i3 = virtualinvoke $r0.<java.net.URI: int getPort()>();

        if $i3 == 80 goto label2;

     label1:
        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("https");

        if $z1 == 0 goto label3;

        $i2 = virtualinvoke $r0.<java.net.URI: int getPort()>();

        if $i2 != 443 goto label3;

     label2:
        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        if $z2 == 0 goto label5;

        $i1 = virtualinvoke $r5.<java.lang.String: int lastIndexOf(java.lang.String)>(":");

        if $i1 < 0 goto label5;

        r6 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

     label5:
        $r7 = virtualinvoke $r0.<java.net.URI: java.lang.String getRawPath()>();

        r8 = $r7;

        if $r7 == null goto label6;

        $i0 = virtualinvoke $r7.<java.lang.String: int length()>();

        if $i0 > 0 goto label7;

     label6:
        r8 = "/";

     label7:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("://");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r14;
    }

    protected static java.lang.String normalizeParameters(java.util.Collection) throws java.io.IOException
    {
        net.oauth.signature.OAuthSignatureMethod$ComparableParameter $r9;
        java.util.Map$Entry r6;
        java.util.Iterator $r2;
        java.util.Collection r0;
        java.util.ArrayList $r1;
        java.util.List $r3;
        int $i0;
        java.lang.Object $r5, $r8;
        java.lang.String $r4, $r7;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Collection;

        if r0 != null goto label1;

        return "";

     label1:
        $r1 = new java.util.ArrayList;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>($i0);

        $r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r7 = "oauth_signature";

        $r8 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z1 != 0 goto label3;

        $r9 = new net.oauth.signature.OAuthSignatureMethod$ComparableParameter;

        specialinvoke $r9.<net.oauth.signature.OAuthSignatureMethod$ComparableParameter: void <init>(java.util.Map$Entry)>(r6);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r9);

     label3:
        goto label2;

     label4:
        staticinvoke <java.util.Collections: void sort(java.util.List)>($r1);

        $r3 = staticinvoke <net.oauth.signature.OAuthSignatureMethod: java.util.List getParameters(java.util.Collection)>($r1);

        $r4 = staticinvoke <net.oauth.OAuth: java.lang.String formEncode(java.lang.Iterable)>($r3);

        return $r4;
    }

    public static boolean equals(java.lang.String, java.lang.String)
    {
        int $i0, $i1, $i2, $i7, $i8, $i9, i11, i12, $i13;
        java.lang.String r0, r1;
        boolean $z0, $z1, $z2, $z3;
        char $c3, $c4, $c5, $c6, c10;
        char[] $r2, $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label03;

        if r1 != null goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        return $z0;

     label03:
        if r1 != null goto label04;

        return 0;

     label04:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 > 0 goto label07;

        $i9 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i9 > 0 goto label05;

        $z1 = 1;

        goto label06;

     label05:
        $z1 = 0;

     label06:
        return $z1;

     label07:
        $r2 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();

        $r3 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();

        $i2 = lengthof $r2;

        $i1 = lengthof $r3;

        if $i2 != $i1 goto label08;

        $z2 = 0;

        goto label09;

     label08:
        $z2 = 1;

     label09:
        c10 = (char) $z2;

        i11 = 0;

        i12 = 0;

     label10:
        $i13 = lengthof $r2;

        if i12 >= $i13 goto label11;

        $c4 = $r2[i12];

        $c3 = $r3[i11];

        $c5 = $c4 ^ $c3;

        $c6 = c10 | $c5;

        c10 = (char) $c6;

        $i8 = i11 + 1;

        $i7 = lengthof $r3;

        i11 = $i8 % $i7;

        i12 = i12 + 1;

        goto label10;

     label11:
        if c10 != 0 goto label12;

        $z3 = 1;

        goto label13;

     label12:
        $z3 = 0;

     label13:
        return $z3;
    }

    public static boolean equals(byte[], byte[])
    {
        byte[] r0, r1;
        byte $b3, $b4, $b5, $b6, b10;
        int $i0, $i1, $i2, $i7, $i8, $i9, i11, i12, $i13;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        if r0 != null goto label03;

        if r1 != null goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        return $z0;

     label03:
        if r1 != null goto label04;

        return 0;

     label04:
        $i0 = lengthof r1;

        if $i0 > 0 goto label07;

        $i9 = lengthof r0;

        if $i9 > 0 goto label05;

        $z1 = 1;

        goto label06;

     label05:
        $z1 = 0;

     label06:
        return $z1;

     label07:
        $i2 = lengthof r0;

        $i1 = lengthof r1;

        if $i2 != $i1 goto label08;

        $z2 = 0;

        goto label09;

     label08:
        $z2 = 1;

     label09:
        b10 = (byte) $z2;

        i11 = 0;

        i12 = 0;

     label10:
        $i13 = lengthof r0;

        if i12 >= $i13 goto label11;

        $b4 = r0[i12];

        $b3 = r1[i11];

        $b5 = $b4 ^ $b3;

        $b6 = b10 | $b5;

        b10 = (byte) $b6;

        $i8 = i11 + 1;

        $i7 = lengthof r1;

        i11 = $i8 % $i7;

        i12 = i12 + 1;

        goto label10;

     label11:
        if b10 != 0 goto label12;

        $z3 = 1;

        goto label13;

     label12:
        $z3 = 0;

     label13:
        return $z3;
    }

    public static byte[] decodeBase64(java.lang.String)
    {
        byte[] $r2, $r3;
        net.oauth.signature.Base64 $r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = <net.oauth.signature.OAuthSignatureMethod: net.oauth.signature.Base64 BASE64>;

        $r2 = virtualinvoke r0.<java.lang.String: byte[] getBytes()>();

        $r3 = virtualinvoke $r1.<net.oauth.signature.Base64: byte[] decode(byte[])>($r2);

        return $r3;
    }

    public static java.lang.String base64Encode(byte[])
    {
        byte[] r1, $r3;
        net.oauth.signature.Base64 $r2;
        java.lang.String $r0;

        r1 := @parameter0: byte[];

        $r0 = new java.lang.String;

        $r2 = <net.oauth.signature.OAuthSignatureMethod: net.oauth.signature.Base64 BASE64>;

        $r3 = virtualinvoke $r2.<net.oauth.signature.Base64: byte[] encode(byte[])>(r1);

        specialinvoke $r0.<java.lang.String: void <init>(byte[])>($r3);

        return $r0;
    }

    public static net.oauth.signature.OAuthSignatureMethod newSigner(net.oauth.OAuthMessage, net.oauth.OAuthAccessor) throws java.io.IOException, net.oauth.OAuthException
    {
        net.oauth.OAuthAccessor r3;
        net.oauth.OAuthMessage r0;
        java.lang.String[] $r1;
        java.lang.String $r2, $r5;
        net.oauth.signature.OAuthSignatureMethod $r4;

        r0 := @parameter0: net.oauth.OAuthMessage;

        r3 := @parameter1: net.oauth.OAuthAccessor;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = "oauth_signature_method";

        virtualinvoke r0.<net.oauth.OAuthMessage: void requireParameters(java.lang.String[])>($r1);

        $r2 = virtualinvoke r0.<net.oauth.OAuthMessage: java.lang.String getSignatureMethod()>();

        $r4 = staticinvoke <net.oauth.signature.OAuthSignatureMethod: net.oauth.signature.OAuthSignatureMethod newMethod(java.lang.String,net.oauth.OAuthAccessor)>($r2, r3);

        $r5 = r3.<net.oauth.OAuthAccessor: java.lang.String tokenSecret>;

        virtualinvoke $r4.<net.oauth.signature.OAuthSignatureMethod: void setTokenSecret(java.lang.String)>($r5);

        return $r4;
    }

    public static net.oauth.signature.OAuthSignatureMethod newMethod(java.lang.String, net.oauth.OAuthAccessor) throws net.oauth.OAuthException
    {
        net.oauth.OAuthProblemException $r3;
        java.util.Map $r1, $r4;
        int $i0;
        java.lang.InstantiationException $r12;
        java.lang.String r0, $r6, $r7;
        net.oauth.signature.OAuthSignatureMethod r15;
        net.oauth.OAuthException $r11, $r13;
        java.lang.IllegalAccessException $r10;
        java.util.Set $r5;
        net.oauth.OAuthAccessor r9;
        java.lang.Object $r2, $r8;
        java.lang.Class r14;

        r0 := @parameter0: java.lang.String;

        r9 := @parameter1: net.oauth.OAuthAccessor;

     label1:
        $r1 = <net.oauth.signature.OAuthSignatureMethod: java.util.Map NAME_TO_CLASS>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r14 = (java.lang.Class) $r2;

        if r14 == null goto label3;

        $r8 = virtualinvoke r14.<java.lang.Class: java.lang.Object newInstance()>();

        r15 = (net.oauth.signature.OAuthSignatureMethod) $r8;

        virtualinvoke r15.<net.oauth.signature.OAuthSignatureMethod: void initialize(java.lang.String,net.oauth.OAuthAccessor)>(r0, r9);

     label2:
        return r15;

     label3:
        $r3 = new net.oauth.OAuthProblemException;

        specialinvoke $r3.<net.oauth.OAuthProblemException: void <init>(java.lang.String)>("signature_method_rejected");

        $r4 = <net.oauth.signature.OAuthSignatureMethod: java.util.Map NAME_TO_CLASS>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set keySet()>();

        $r6 = staticinvoke <net.oauth.OAuth: java.lang.String percentEncode(java.lang.Iterable)>($r5);

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i0 <= 0 goto label4;

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String toString()>();

        virtualinvoke $r3.<net.oauth.OAuthProblemException: void setParameter(java.lang.String,java.lang.Object)>("oauth_acceptable_signature_methods", $r7);

     label4:
        throw $r3;

     label5:
        $r12 := @caughtexception;

        $r13 = new net.oauth.OAuthException;

        specialinvoke $r13.<net.oauth.OAuthException: void <init>(java.lang.Throwable)>($r12);

        throw $r13;

     label6:
        $r10 := @caughtexception;

        $r11 = new net.oauth.OAuthException;

        specialinvoke $r11.<net.oauth.OAuthException: void <init>(java.lang.Throwable)>($r10);

        throw $r11;

        catch java.lang.InstantiationException from label1 to label2 with label5;
        catch java.lang.InstantiationException from label3 to label5 with label5;
        catch java.lang.IllegalAccessException from label1 to label2 with label6;
        catch java.lang.IllegalAccessException from label3 to label5 with label6;
    }

    public static void registerMethodClass(java.lang.String, java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.String r1;
        java.util.Map $r2;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Class;

        if r0 != null goto label1;

        staticinvoke <net.oauth.signature.OAuthSignatureMethod: void unregisterMethod(java.lang.String)>(r1);

        goto label2;

     label1:
        $r2 = <net.oauth.signature.OAuthSignatureMethod: java.util.Map NAME_TO_CLASS>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r0);

     label2:
        return;
    }

    public static void unregisterMethod(java.lang.String)
    {
        java.lang.String r0;
        java.util.Map $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = <net.oauth.signature.OAuthSignatureMethod: java.util.Map NAME_TO_CLASS>;

        interfaceinvoke $r1.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r0);

        return;
    }

    private static java.util.List getParameters(java.util.Collection)
    {
        net.oauth.signature.OAuthSignatureMethod$ComparableParameter r4;
        java.util.Map$Entry $r5;
        java.util.Iterator $r2;
        java.util.Collection r0;
        java.util.ArrayList $r1;
        int $i0;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @parameter0: java.util.Collection;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new java.util.ArrayList;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>($i0);

        $r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (net.oauth.signature.OAuthSignatureMethod$ComparableParameter) $r3;

        $r5 = r4.<net.oauth.signature.OAuthSignatureMethod$ComparableParameter: java.util.Map$Entry value>;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label2;

     label3:
        return $r1;
    }

    static void <clinit>()
    {
        java.util.concurrent.ConcurrentHashMap $r1;
        net.oauth.signature.Base64 $r0;

        <net.oauth.signature.OAuthSignatureMethod: java.lang.String _ACCESSOR> = "-Accessor";

        $r0 = new net.oauth.signature.Base64;

        specialinvoke $r0.<net.oauth.signature.Base64: void <init>()>();

        <net.oauth.signature.OAuthSignatureMethod: net.oauth.signature.Base64 BASE64> = $r0;

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        <net.oauth.signature.OAuthSignatureMethod: java.util.Map NAME_TO_CLASS> = $r1;

        staticinvoke <net.oauth.signature.OAuthSignatureMethod: void registerMethodClass(java.lang.String,java.lang.Class)>("HMAC-SHA1", class "Lnet/oauth/signature/HMAC_SHA1;");

        staticinvoke <net.oauth.signature.OAuthSignatureMethod: void registerMethodClass(java.lang.String,java.lang.Class)>("PLAINTEXT", class "Lnet/oauth/signature/PLAINTEXT;");

        staticinvoke <net.oauth.signature.OAuthSignatureMethod: void registerMethodClass(java.lang.String,java.lang.Class)>("RSA-SHA1", class "Lnet/oauth/signature/RSA_SHA1;");

        staticinvoke <net.oauth.signature.OAuthSignatureMethod: void registerMethodClass(java.lang.String,java.lang.Class)>("HMAC-SHA1-Accessor", class "Lnet/oauth/signature/HMAC_SHA1;");

        staticinvoke <net.oauth.signature.OAuthSignatureMethod: void registerMethodClass(java.lang.String,java.lang.Class)>("PLAINTEXT-Accessor", class "Lnet/oauth/signature/PLAINTEXT;");

        return;
    }
}
