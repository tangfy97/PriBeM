class org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl extends java.lang.Object implements org.waveprotocol.wave.concurrencycontrol.channel.InternalOperationChannel
{
    private final org.waveprotocol.wave.common.logging.LoggerBundle logger;
    private final org.waveprotocol.wave.concurrencycontrol.channel.Accessibility accessibility;
    private org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel deltaChannel;
    private org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel$Listener listener;
    private org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl cc;
    private org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State state;
    private final org.waveprotocol.wave.concurrencycontrol.client.ServerConnection ccServerConnection;
    private final org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl$ConnectionListener ccListener;

    void <init>(org.waveprotocol.wave.common.logging.LoggerBundle, org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel, org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl, org.waveprotocol.wave.concurrencycontrol.channel.Accessibility)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.Accessibility r6;
        org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl$ConnectionListener $r9;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$1 $r2;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$2 $r3;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State $r1, $r8;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel r4;
        org.waveprotocol.wave.common.logging.LoggerBundle r7;
        org.waveprotocol.wave.concurrencycontrol.client.ServerConnection $r10;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl r0;
        org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl r5;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl;

        r7 := @parameter0: org.waveprotocol.wave.common.logging.LoggerBundle;

        r4 := @parameter1: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel;

        r5 := @parameter2: org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl;

        r6 := @parameter3: org.waveprotocol.wave.concurrencycontrol.channel.Accessibility;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State NOT_CONNECTED>;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State state> = $r1;

        $r2 = new org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$1;

        specialinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$1: void <init>(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl)>(r0);

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.client.ServerConnection ccServerConnection> = $r2;

        $r3 = new org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$2;

        specialinvoke $r3.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$2: void <init>(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl)>(r0);

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl$ConnectionListener ccListener> = $r3;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel deltaChannel> = r4;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl cc> = r5;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.Accessibility accessibility> = r6;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.common.logging.LoggerBundle logger> = r7;

        $r8 = <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State NOT_CONNECTED>;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State state> = $r8;

        $r10 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.client.ServerConnection ccServerConnection>;

        $r9 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl$ConnectionListener ccListener>;

        virtualinvoke r5.<org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl: void initialise(org.waveprotocol.wave.concurrencycontrol.client.ServerConnection,org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl$ConnectionListener)>($r10, $r9);

        return;
    }

    public void onConnection(org.waveprotocol.wave.model.version.HashedVersion, org.waveprotocol.wave.model.version.HashedVersion) throws org.waveprotocol.wave.concurrencycontrol.common.ChannelException
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State $r1, $r2, $r5, $r9;
        org.waveprotocol.wave.model.version.HashedVersion r10, r11;
        java.lang.StringBuilder $r3, $r4, $r6;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl r0;
        java.lang.String $r7;
        org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl $r8, $r12;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl;

        r10 := @parameter0: org.waveprotocol.wave.model.version.HashedVersion;

        r11 := @parameter1: org.waveprotocol.wave.model.version.HashedVersion;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State state>;

        $r1 = <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State NOT_CONNECTED>;

        if $r2 != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("OperationChannel received onConnection in state ");

        $r5 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State state>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z0, $r7);

        $r8 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl cc>;

        if $r8 == null goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z1, "Cannot connect a closed channel");

        $r9 = <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State CONNECTED>;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State state> = $r9;

        $r12 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl cc>;

        virtualinvoke $r12.<org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl: void onOpen(org.waveprotocol.wave.model.version.HashedVersion,org.waveprotocol.wave.model.version.HashedVersion)>(r10, r11);

        return;
    }

    public void onDelta(org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta) throws org.waveprotocol.wave.concurrencycontrol.common.ChannelException
    {
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta r3;
        org.waveprotocol.wave.model.operation.TransformException $r20;
        boolean $z0, $z1;
        org.waveprotocol.wave.concurrencycontrol.common.ChannelException $r8, $r21;
        org.waveprotocol.wave.common.logging.LoggerBundle $r1, $r5;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r14, $r15, $r17, $r22, $r24, $r25, $r26, $r28, $r29, $r31;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl r0;
        org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl $r4, $r16, $r30;
        org.waveprotocol.wave.concurrencycontrol.common.Recoverable $r19, $r33;
        org.waveprotocol.wave.common.logging.Logger $r2, $r6;
        org.waveprotocol.wave.model.operation.OperationException $r7;
        java.lang.String $r18, $r32;
        org.waveprotocol.wave.concurrencycontrol.common.ResponseCode $r23, $r34;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel $r13, $r27;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl;

        r3 := @parameter0: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta;

     label1:
        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        $z0 = interfaceinvoke $r2.<org.waveprotocol.wave.common.logging.Logger: boolean shouldLog()>();

        if $z0 == 0 goto label2;

        $r5 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        interfaceinvoke $r6.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String,java.lang.Object)>("Received delta: ", r3);

     label2:
        $r4 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl cc>;

        virtualinvoke $r4.<org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl: void onServerDelta(org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta)>(r3);

     label3:
        goto label8;

     label4:
        $r20 := @caughtexception;

        $r21 = new org.waveprotocol.wave.concurrencycontrol.common.ChannelException;

        $r23 = <org.waveprotocol.wave.concurrencycontrol.common.ResponseCode: org.waveprotocol.wave.concurrencycontrol.common.ResponseCode INVALID_OPERATION>;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Operation channel failed on server delta: ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r27 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel deltaChannel>;

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r30 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl cc>;

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        $r33 = <org.waveprotocol.wave.concurrencycontrol.common.Recoverable: org.waveprotocol.wave.concurrencycontrol.common.Recoverable NOT_RECOVERABLE>;

        specialinvoke $r21.<org.waveprotocol.wave.concurrencycontrol.common.ChannelException: void <init>(org.waveprotocol.wave.concurrencycontrol.common.ResponseCode,java.lang.String,java.lang.Throwable,org.waveprotocol.wave.concurrencycontrol.common.Recoverable,org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId)>($r23, $r32, $r20, $r33, null, null);

        throw $r21;

     label5:
        $r7 := @caughtexception;

        $r8 = new org.waveprotocol.wave.concurrencycontrol.common.ChannelException;

        $z1 = virtualinvoke $r7.<org.waveprotocol.wave.model.operation.OperationException: boolean isSchemaViolation()>();

        if $z1 == 0 goto label6;

        $r34 = <org.waveprotocol.wave.concurrencycontrol.common.ResponseCode: org.waveprotocol.wave.concurrencycontrol.common.ResponseCode SCHEMA_VIOLATION>;

        goto label7;

     label6:
        $r34 = <org.waveprotocol.wave.concurrencycontrol.common.ResponseCode: org.waveprotocol.wave.concurrencycontrol.common.ResponseCode INVALID_OPERATION>;

     label7:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Operation channel failed on server delta: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r13 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel deltaChannel>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r16 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl cc>;

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        $r19 = <org.waveprotocol.wave.concurrencycontrol.common.Recoverable: org.waveprotocol.wave.concurrencycontrol.common.Recoverable NOT_RECOVERABLE>;

        specialinvoke $r8.<org.waveprotocol.wave.concurrencycontrol.common.ChannelException: void <init>(org.waveprotocol.wave.concurrencycontrol.common.ResponseCode,java.lang.String,java.lang.Throwable,org.waveprotocol.wave.concurrencycontrol.common.Recoverable,org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId)>($r34, $r18, $r7, $r19, null, null);

        throw $r8;

     label8:
        return;

        catch org.waveprotocol.wave.model.operation.TransformException from label1 to label3 with label4;
        catch org.waveprotocol.wave.model.operation.OperationException from label1 to label3 with label5;
    }

    public void onAck(int, org.waveprotocol.wave.model.version.HashedVersion) throws org.waveprotocol.wave.concurrencycontrol.common.ChannelException
    {
        org.waveprotocol.wave.concurrencycontrol.common.Recoverable $r16;
        org.waveprotocol.wave.model.operation.TransformException $r3;
        int i0;
        org.waveprotocol.wave.model.version.HashedVersion r1;
        java.lang.String $r15;
        org.waveprotocol.wave.concurrencycontrol.common.ResponseCode $r6;
        org.waveprotocol.wave.concurrencycontrol.common.ChannelException $r4;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel $r10;
        java.lang.StringBuilder $r5, $r7, $r8, $r9, $r11, $r12, $r14;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl r0;
        org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl $r2, $r13;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: org.waveprotocol.wave.model.version.HashedVersion;

     label1:
        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl cc>;

        virtualinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl: void onSuccess(int,org.waveprotocol.wave.model.version.HashedVersion)>(i0, r1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.waveprotocol.wave.concurrencycontrol.common.ChannelException;

        $r6 = <org.waveprotocol.wave.concurrencycontrol.common.ResponseCode: org.waveprotocol.wave.concurrencycontrol.common.ResponseCode INVALID_OPERATION>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Operation channel failed on ack: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r10 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel deltaChannel>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r13 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl cc>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = <org.waveprotocol.wave.concurrencycontrol.common.Recoverable: org.waveprotocol.wave.concurrencycontrol.common.Recoverable NOT_RECOVERABLE>;

        specialinvoke $r4.<org.waveprotocol.wave.concurrencycontrol.common.ChannelException: void <init>(org.waveprotocol.wave.concurrencycontrol.common.ResponseCode,java.lang.String,java.lang.Throwable,org.waveprotocol.wave.concurrencycontrol.common.Recoverable,org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId)>($r6, $r15, $r3, $r16, null, null);

        throw $r4;

     label4:
        return;

        catch org.waveprotocol.wave.model.operation.TransformException from label1 to label2 with label3;
    }

    public void onNack(org.waveprotocol.wave.concurrencycontrol.common.ResponseCode, java.lang.String, long) throws org.waveprotocol.wave.concurrencycontrol.common.ChannelException
    {
        org.waveprotocol.wave.concurrencycontrol.common.Recoverable $r18;
        long l0;
        java.lang.String r6, $r17;
        org.waveprotocol.wave.concurrencycontrol.common.ResponseCode r1;
        org.waveprotocol.wave.concurrencycontrol.common.ChannelException $r0;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel $r12;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r7, $r8, $r10, $r11, $r13, $r14, $r16;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl r9;
        org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl $r15;

        r9 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.common.ResponseCode;

        r6 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        $r0 = new org.waveprotocol.wave.concurrencycontrol.common.ChannelException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Operation channel failed on nack: code=");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r12 = r9.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel deltaChannel>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r15 = r9.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl cc>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = <org.waveprotocol.wave.concurrencycontrol.common.Recoverable: org.waveprotocol.wave.concurrencycontrol.common.Recoverable NOT_RECOVERABLE>;

        specialinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.common.ChannelException: void <init>(org.waveprotocol.wave.concurrencycontrol.common.ResponseCode,java.lang.String,java.lang.Throwable,org.waveprotocol.wave.concurrencycontrol.common.Recoverable,org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId)>(r1, $r17, null, $r18, null, null);

        throw $r0;
    }

    public void onCommit(long)
    {
        long l0;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl r0;
        org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl;

        l0 := @parameter0: long;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl cc>;

        virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl: void onCommit(long)>(l0);

        return;
    }

    public void setListener(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel$Listener)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl r0;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel$Listener r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel$Listener;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel$Listener listener> = r1;

        return;
    }

    public transient void send(org.waveprotocol.wave.model.operation.wave.WaveletOperation[]) throws org.waveprotocol.wave.concurrencycontrol.common.ChannelException
    {
        org.waveprotocol.wave.concurrencycontrol.common.Recoverable $r5, $r28;
        org.waveprotocol.wave.common.logging.Logger $r10;
        org.waveprotocol.wave.model.operation.TransformException $r15;
        java.lang.String $r14, $r27;
        boolean $z0;
        org.waveprotocol.wave.concurrencycontrol.channel.Accessibility $r3;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State $r1, $r2;
        org.waveprotocol.wave.concurrencycontrol.common.ResponseCode $r6, $r18;
        org.waveprotocol.wave.concurrencycontrol.common.ChannelException $r4, $r16;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel $r22;
        org.waveprotocol.wave.common.logging.LoggerBundle $r9;
        org.waveprotocol.wave.model.operation.wave.WaveletOperation[] r7;
        java.lang.StringBuilder $r11, $r12, $r13, $r17, $r19, $r20, $r21, $r23, $r24, $r26;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl r0;
        org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl $r8, $r25;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl;

        r7 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletOperation[];

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State state>;

        $r1 = <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State CLOSED>;

        if $r2 != $r1 goto label1;

        $r9 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r10 = interfaceinvoke $r9.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot send to closed operation channel: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>($r14);

        goto label6;

     label1:
        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.Accessibility accessibility>;

        $z0 = virtualinvoke $r3.<org.waveprotocol.wave.concurrencycontrol.channel.Accessibility: boolean isWritable()>();

        if $z0 == 0 goto label5;

     label2:
        $r8 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl cc>;

        virtualinvoke $r8.<org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl: void onClientOperations(org.waveprotocol.wave.model.operation.wave.WaveletOperation[])>(r7);

     label3:
        goto label6;

     label4:
        $r15 := @caughtexception;

        $r16 = new org.waveprotocol.wave.concurrencycontrol.common.ChannelException;

        $r18 = <org.waveprotocol.wave.concurrencycontrol.common.ResponseCode: org.waveprotocol.wave.concurrencycontrol.common.ResponseCode INVALID_OPERATION>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Operation channel failed on send: ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r22 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel deltaChannel>;

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r25 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl cc>;

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        $r28 = <org.waveprotocol.wave.concurrencycontrol.common.Recoverable: org.waveprotocol.wave.concurrencycontrol.common.Recoverable NOT_RECOVERABLE>;

        specialinvoke $r16.<org.waveprotocol.wave.concurrencycontrol.common.ChannelException: void <init>(org.waveprotocol.wave.concurrencycontrol.common.ResponseCode,java.lang.String,java.lang.Throwable,org.waveprotocol.wave.concurrencycontrol.common.Recoverable,org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId)>($r18, $r27, $r15, $r28, null, null);

        throw $r16;

     label5:
        $r4 = new org.waveprotocol.wave.concurrencycontrol.common.ChannelException;

        $r6 = <org.waveprotocol.wave.concurrencycontrol.common.ResponseCode: org.waveprotocol.wave.concurrencycontrol.common.ResponseCode NOT_AUTHORIZED>;

        $r5 = <org.waveprotocol.wave.concurrencycontrol.common.Recoverable: org.waveprotocol.wave.concurrencycontrol.common.Recoverable NOT_RECOVERABLE>;

        specialinvoke $r4.<org.waveprotocol.wave.concurrencycontrol.common.ChannelException: void <init>(org.waveprotocol.wave.concurrencycontrol.common.ResponseCode,java.lang.String,java.lang.Throwable,org.waveprotocol.wave.concurrencycontrol.common.Recoverable,org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId)>($r6, "Attempt to write to inaccessible wavelet", null, $r5, null, null);

        throw $r4;

     label6:
        return;

        catch org.waveprotocol.wave.model.operation.TransformException from label2 to label3 with label4;
    }

    public org.waveprotocol.wave.model.operation.wave.WaveletOperation receive()
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation $r4;
        org.waveprotocol.wave.common.logging.Logger $r6;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State $r1, $r2;
        org.waveprotocol.wave.common.logging.LoggerBundle $r5;
        java.lang.StringBuilder $r7, $r8, $r9;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl r0;
        org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl $r3;
        java.lang.String $r10;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State state>;

        $r1 = <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State CLOSED>;

        if $r2 != $r1 goto label1;

        $r5 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot receive from closed operation channel: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>($r10);

        return null;

     label1:
        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl cc>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl: org.waveprotocol.wave.model.operation.wave.WaveletOperation receive()>();

        return $r4;
    }

    public org.waveprotocol.wave.model.operation.wave.WaveletOperation peek()
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation $r4;
        org.waveprotocol.wave.common.logging.Logger $r6;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State $r1, $r2;
        org.waveprotocol.wave.common.logging.LoggerBundle $r5;
        java.lang.StringBuilder $r7, $r8, $r9;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl r0;
        org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl $r3;
        java.lang.String $r10;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State state>;

        $r1 = <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State CLOSED>;

        if $r2 != $r1 goto label1;

        $r5 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot peek at closed operation channel: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>($r10);

        return null;

     label1:
        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl cc>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl: org.waveprotocol.wave.model.operation.wave.WaveletOperation peek()>();

        return $r4;
    }

    public java.util.List getReconnectVersions()
    {
        java.lang.IllegalStateException $r5;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State $r1, $r2;
        java.util.List $r4;
        java.lang.StringBuilder $r6, $r7, $r8;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl r0;
        org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl $r3;
        java.lang.String $r9;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State state>;

        $r1 = <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State CLOSED>;

        if $r2 != $r1 goto label1;

        $r5 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot query closed operation channel: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label1:
        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl cc>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl: java.util.List getReconnectionVersions()>();

        return $r4;
    }

    public void reset()
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State $r1;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl;

        $r1 = <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State NOT_CONNECTED>;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State state> = $r1;

        return;
    }

    public void close()
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State $r1, $r2, $r3;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl r0;
        org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl $r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State state>;

        $r1 = <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State CLOSED>;

        if $r2 == $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Cannot close already-closed channel");

        $r3 = <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State CLOSED>;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State state> = $r3;

        $r4 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl cc>;

        virtualinvoke $r4.<org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl: void close()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl cc> = null;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel deltaChannel> = null;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel$Listener listener> = null;

        return;
    }

    private void signalOperationReceived()
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl r0;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel$Listener $r1, $r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel$Listener listener>;

        if $r1 == null goto label1;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel$Listener listener>;

        interfaceinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel$Listener: void onOperationReceived()>();

     label1:
        return;
    }

    public java.lang.String toString()
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State $r3;
        java.lang.StringBuilder $r0, $r1, $r4, $r5;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl r2;
        java.lang.String $r6;

        r2 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Operation Channel State = [state: ");

        $r3 = r2.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State state>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public java.lang.String getDebugString()
    {
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel $r8;
        java.lang.StringBuilder $r0, $r3, $r4, $r6, $r7, $r9;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl r1;
        org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl $r2;
        java.lang.String $r5, $r10;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = r1.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl cc>;

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("==========\n");

        $r5 = virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: java.lang.String toString()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("==========\n");

        $r8 = r1.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel deltaChannel>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    static org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State access$000(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State $r1;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl$State state>;

        return $r1;
    }

    static org.waveprotocol.wave.common.logging.LoggerBundle access$100(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl r0;
        org.waveprotocol.wave.common.logging.LoggerBundle $r1;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        return $r1;
    }

    static org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel access$200(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl r0;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel $r1;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel deltaChannel>;

        return $r1;
    }

    static void access$300(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelImpl: void signalOperationReceived()>();

        return;
    }
}
