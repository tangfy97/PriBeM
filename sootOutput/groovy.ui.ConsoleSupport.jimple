public abstract class groovy.ui.ConsoleSupport extends java.lang.Object
{
    javax.swing.text.Style promptStyle;
    javax.swing.text.Style commandStyle;
    javax.swing.text.Style outputStyle;
    private groovy.lang.GroovyShell shell;
    int counter;

    public void <init>()
    {
        groovy.ui.ConsoleSupport r0;

        r0 := @this: groovy.ui.ConsoleSupport;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected void addStylesToDocument(javax.swing.JTextPane)
    {
        java.awt.Color $r7, $r10;
        javax.swing.text.StyledDocument $r1;
        javax.swing.text.StyleContext $r2;
        javax.swing.text.Style $r3, $r4, $r6, $r8, $r9, $r11, $r12, $r13;
        groovy.ui.ConsoleSupport r5;
        javax.swing.JTextPane r0;

        r5 := @this: groovy.ui.ConsoleSupport;

        r0 := @parameter0: javax.swing.JTextPane;

        $r1 = virtualinvoke r0.<javax.swing.JTextPane: javax.swing.text.StyledDocument getStyledDocument()>();

        $r2 = staticinvoke <javax.swing.text.StyleContext: javax.swing.text.StyleContext getDefaultStyleContext()>();

        $r3 = virtualinvoke $r2.<javax.swing.text.StyleContext: javax.swing.text.Style getStyle(java.lang.String)>("default");

        $r4 = interfaceinvoke $r1.<javax.swing.text.StyledDocument: javax.swing.text.Style addStyle(java.lang.String,javax.swing.text.Style)>("regular", $r3);

        staticinvoke <javax.swing.text.StyleConstants: void setFontFamily(javax.swing.text.MutableAttributeSet,java.lang.String)>($r3, "Monospaced");

        $r6 = interfaceinvoke $r1.<javax.swing.text.StyledDocument: javax.swing.text.Style addStyle(java.lang.String,javax.swing.text.Style)>("prompt", $r4);

        r5.<groovy.ui.ConsoleSupport: javax.swing.text.Style promptStyle> = $r6;

        $r8 = r5.<groovy.ui.ConsoleSupport: javax.swing.text.Style promptStyle>;

        $r7 = <java.awt.Color: java.awt.Color BLUE>;

        staticinvoke <javax.swing.text.StyleConstants: void setForeground(javax.swing.text.MutableAttributeSet,java.awt.Color)>($r8, $r7);

        $r9 = interfaceinvoke $r1.<javax.swing.text.StyledDocument: javax.swing.text.Style addStyle(java.lang.String,javax.swing.text.Style)>("command", $r4);

        r5.<groovy.ui.ConsoleSupport: javax.swing.text.Style commandStyle> = $r9;

        $r11 = r5.<groovy.ui.ConsoleSupport: javax.swing.text.Style commandStyle>;

        $r10 = <java.awt.Color: java.awt.Color MAGENTA>;

        staticinvoke <javax.swing.text.StyleConstants: void setForeground(javax.swing.text.MutableAttributeSet,java.awt.Color)>($r11, $r10);

        $r12 = interfaceinvoke $r1.<javax.swing.text.StyledDocument: javax.swing.text.Style addStyle(java.lang.String,javax.swing.text.Style)>("output", $r4);

        r5.<groovy.ui.ConsoleSupport: javax.swing.text.Style outputStyle> = $r12;

        $r13 = r5.<groovy.ui.ConsoleSupport: javax.swing.text.Style outputStyle>;

        staticinvoke <javax.swing.text.StyleConstants: void setBold(javax.swing.text.MutableAttributeSet,boolean)>($r13, 1);

        return;
    }

    public javax.swing.text.Style getCommandStyle()
    {
        javax.swing.text.Style $r1;
        groovy.ui.ConsoleSupport r0;

        r0 := @this: groovy.ui.ConsoleSupport;

        $r1 = r0.<groovy.ui.ConsoleSupport: javax.swing.text.Style commandStyle>;

        return $r1;
    }

    public javax.swing.text.Style getOutputStyle()
    {
        javax.swing.text.Style $r1;
        groovy.ui.ConsoleSupport r0;

        r0 := @this: groovy.ui.ConsoleSupport;

        $r1 = r0.<groovy.ui.ConsoleSupport: javax.swing.text.Style outputStyle>;

        return $r1;
    }

    public javax.swing.text.Style getPromptStyle()
    {
        javax.swing.text.Style $r1;
        groovy.ui.ConsoleSupport r0;

        r0 := @this: groovy.ui.ConsoleSupport;

        $r1 = r0.<groovy.ui.ConsoleSupport: javax.swing.text.Style promptStyle>;

        return $r1;
    }

    public groovy.lang.GroovyShell getShell()
    {
        groovy.ui.ConsoleSupport r0;
        groovy.lang.GroovyShell $r1, $r2, $r3;

        r0 := @this: groovy.ui.ConsoleSupport;

        $r1 = r0.<groovy.ui.ConsoleSupport: groovy.lang.GroovyShell shell>;

        if $r1 != null goto label1;

        $r3 = new groovy.lang.GroovyShell;

        specialinvoke $r3.<groovy.lang.GroovyShell: void <init>()>();

        r0.<groovy.ui.ConsoleSupport: groovy.lang.GroovyShell shell> = $r3;

     label1:
        $r2 = r0.<groovy.ui.ConsoleSupport: groovy.lang.GroovyShell shell>;

        return $r2;
    }

    protected java.lang.Object evaluate(java.lang.String)
    {
        groovy.lang.GroovyShell $r5;
        java.lang.Exception $r8;
        java.lang.StringBuffer $r0, $r1, $r3;
        groovy.ui.ConsoleSupport r2;
        int $i0, $i1;
        java.lang.Object $r7;
        java.lang.String $r4, r6;

        r2 := @this: groovy.ui.ConsoleSupport;

        r6 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Script");

        $i0 = r2.<groovy.ui.ConsoleSupport: int counter>;

        $i1 = $i0 + 1;

        r2.<groovy.ui.ConsoleSupport: int counter> = $i1;

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

     label1:
        $r5 = virtualinvoke r2.<groovy.ui.ConsoleSupport: groovy.lang.GroovyShell getShell()>();

        $r7 = virtualinvoke $r5.<groovy.lang.GroovyShell: java.lang.Object evaluate(java.lang.String,java.lang.String)>(r6, $r4);

     label2:
        return $r7;

     label3:
        $r8 := @caughtexception;

        virtualinvoke r2.<groovy.ui.ConsoleSupport: void handleException(java.lang.String,java.lang.Exception)>(r6, $r8);

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected abstract void handleException(java.lang.String, java.lang.Exception);
}
