final class com.google.gxp.com.google.common.collect.Hashing extends java.lang.Object
{
    private static final int MAX_TABLE_SIZE;
    private static final int CUTOFF;

    private void <init>()
    {
        com.google.gxp.com.google.common.collect.Hashing r0;

        r0 := @this: com.google.gxp.com.google.common.collect.Hashing;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static int smear(int)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8;

        i7 := @parameter0: int;

        $i1 = i7 >>> 20;

        $i0 = i7 >>> 12;

        $i2 = $i1 ^ $i0;

        i8 = i7 ^ $i2;

        $i3 = i8 >>> 7;

        $i5 = i8 ^ $i3;

        $i4 = i8 >>> 4;

        $i6 = $i5 ^ $i4;

        return $i6;
    }

    static int chooseTableSize(int)
    {
        int i0, $i1, $i2;
        boolean $z0;

        i0 := @parameter0: int;

        if i0 >= 536870912 goto label1;

        $i1 = staticinvoke <java.lang.Integer: int highestOneBit(int)>(i0);

        $i2 = $i1 << 2;

        return $i2;

     label1:
        if i0 >= 1073741824 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        staticinvoke <com.google.gxp.com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "collection too large");

        return 1073741824;
    }

    public static void <clinit>()
    {
        <com.google.gxp.com.google.common.collect.Hashing: int CUTOFF> = 536870912;

        <com.google.gxp.com.google.common.collect.Hashing: int MAX_TABLE_SIZE> = 1073741824;

        return;
    }
}
