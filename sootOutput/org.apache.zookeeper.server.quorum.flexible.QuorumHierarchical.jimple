public class org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical extends java.lang.Object implements org.apache.zookeeper.server.quorum.flexible.QuorumVerifier
{
    private static final org.slf4j.Logger LOG;
    java.util.HashMap serverWeight;
    java.util.HashMap serverGroup;
    java.util.HashMap groupWeight;
    int numGroups;

    public void <init>(java.lang.String) throws org.apache.zookeeper.server.quorum.QuorumPeerConfig$ConfigException
    {
        org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical r0;
        java.util.HashMap $r1, $r2, $r3;
        java.lang.String r4;

        r0 := @this: org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical;

        r4 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: java.util.HashMap serverWeight> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: java.util.HashMap serverGroup> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: java.util.HashMap groupWeight> = $r3;

        r0.<org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: int numGroups> = 0;

        specialinvoke r0.<org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: void readConfigFile(java.lang.String)>(r4);

        return;
    }

    public void <init>(java.util.Properties) throws org.apache.zookeeper.server.quorum.QuorumPeerConfig$ConfigException
    {
        java.util.HashMap $r1, $r2, $r3, $r7, $r10, $r13;
        int $i0, $i1, $i2;
        java.lang.String $r15;
        java.util.Properties r4;
        org.slf4j.Logger $r6;
        org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical r0;
        java.lang.StringBuilder $r5, $r8, $r9, $r11, $r12, $r14;

        r0 := @this: org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical;

        r4 := @parameter0: java.util.Properties;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: java.util.HashMap serverWeight> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: java.util.HashMap serverGroup> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: java.util.HashMap groupWeight> = $r3;

        r0.<org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: int numGroups> = 0;

        specialinvoke r0.<org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: void parse(java.util.Properties)>(r4);

        $r6 = <org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: org.slf4j.Logger LOG>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = r0.<org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: java.util.HashMap serverWeight>;

        $i0 = virtualinvoke $r7.<java.util.HashMap: int size()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r10 = r0.<org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: java.util.HashMap serverGroup>;

        $i1 = virtualinvoke $r10.<java.util.HashMap: int size()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r13 = r0.<org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: java.util.HashMap groupWeight>;

        $i2 = virtualinvoke $r13.<java.util.HashMap: int size()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String)>($r15);

        return;
    }

    public void <init>(int, java.util.HashMap, java.util.HashMap)
    {
        int i0;
        org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical r0;
        java.util.HashMap r1, r2, $r3;

        r0 := @this: org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.HashMap;

        r2 := @parameter2: java.util.HashMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: java.util.HashMap serverWeight> = r1;

        r0.<org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: java.util.HashMap serverGroup> = r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: java.util.HashMap groupWeight> = $r3;

        r0.<org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: int numGroups> = i0;

        specialinvoke r0.<org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: void computeGroupWeight()>();

        return;
    }

    public long getWeight(long)
    {
        java.lang.Long $r2, $r4;
        org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical r0;
        long l0, $l1;
        java.util.HashMap $r1;
        java.lang.Object $r3;

        r0 := @this: org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical;

        l0 := @parameter0: long;

        $r1 = r0.<org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: java.util.HashMap serverWeight>;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r3 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        $r4 = (java.lang.Long) $r3;

        $l1 = virtualinvoke $r4.<java.lang.Long: long longValue()>();

        return $l1;
    }

    private void readConfigFile(java.lang.String) throws org.apache.zookeeper.server.quorum.QuorumPeerConfig$ConfigException
    {
        java.lang.Throwable $r28;
        java.lang.String r1, $r6, $r12, $r15, $r21, $r27;
        boolean $z0;
        org.slf4j.Logger $r3;
        java.util.Properties $r7;
        java.io.IOException $r22;
        java.io.FileInputStream $r8;
        java.lang.IllegalArgumentException $r10, $r16;
        java.io.File $r0;
        org.apache.zookeeper.server.quorum.QuorumPeerConfig$ConfigException $r17, $r23;
        java.lang.StringBuilder $r2, $r4, $r5, $r11, $r13, $r14, $r18, $r19, $r20, $r24, $r25, $r26;
        org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical r9;

        r9 := @this: org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.io.File;

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(r1);

        $r3 = <org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: org.slf4j.Logger LOG>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Reading configuration from: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r3.<org.slf4j.Logger: void info(java.lang.String)>($r6);

     label01:
        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label02;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r0.<java.io.File: java.lang.String toString()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" file is missing");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r10;

     label02:
        $r7 = new java.util.Properties;

        specialinvoke $r7.<java.util.Properties: void <init>()>();

        $r8 = new java.io.FileInputStream;

        specialinvoke $r8.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

     label03:
        virtualinvoke $r7.<java.util.Properties: void load(java.io.InputStream)>($r8);

        goto label12;

     label04:
        goto label07;

     label05:
        $r28 := @caughtexception;

        goto label13;

     label06:
        throw $r28;

     label07:
        specialinvoke r9.<org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: void parse(java.util.Properties)>($r7);

     label08:
        goto label11;

     label09:
        $r22 := @caughtexception;

        $r23 = new org.apache.zookeeper.server.quorum.QuorumPeerConfig$ConfigException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error processing ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<org.apache.zookeeper.server.quorum.QuorumPeerConfig$ConfigException: void <init>(java.lang.String,java.lang.Exception)>($r27, $r22);

        throw $r23;

     label10:
        $r16 := @caughtexception;

        $r17 = new org.apache.zookeeper.server.quorum.QuorumPeerConfig$ConfigException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error processing ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<org.apache.zookeeper.server.quorum.QuorumPeerConfig$ConfigException: void <init>(java.lang.String,java.lang.Exception)>($r21, $r16);

        throw $r17;

     label11:
        return;

     label12:
        virtualinvoke $r8.<java.io.FileInputStream: void close()>();

        goto label04;

     label13:
        virtualinvoke $r8.<java.io.FileInputStream: void close()>();

        goto label06;

     label14:
        nop;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.io.IOException from label01 to label08 with label09;
        catch java.lang.IllegalArgumentException from label01 to label08 with label10;
        catch java.io.IOException from label12 to label13 with label09;
        catch java.lang.IllegalArgumentException from label12 to label13 with label10;
        catch java.io.IOException from label13 to label14 with label09;
        catch java.lang.IllegalArgumentException from label13 to label14 with label10;
    }

    private void parse(java.util.Properties)
    {
        java.lang.Long $r12, $r13, $r18, $r19;
        boolean $z0, $z1, $z2;
        java.util.Set $r1;
        org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical r3;
        long $l2, $l3, $l6, $l10;
        java.util.HashMap $r11, $r17;
        java.lang.String[] $r15;
        int $i0, $i1, $i4, $i5, $i7, $i8, i9, i11;
        java.lang.String $r7, $r9, $r10, $r14, r16;
        java.util.Map$Entry r5;
        java.util.Properties r0;
        java.util.Iterator $r2;
        java.lang.Object $r4, $r6, $r8;

        r3 := @this: org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical;

        r0 := @parameter0: java.util.Properties;

        $r1 = virtualinvoke r0.<java.util.Properties: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        $r8 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r9 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean startsWith(java.lang.String)>("group");

        if $z1 == 0 goto label4;

        $i4 = virtualinvoke $r7.<java.lang.String: int indexOf(int)>(46);

        $i5 = $i4 + 1;

        $r14 = virtualinvoke $r7.<java.lang.String: java.lang.String substring(int)>($i5);

        $l6 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r14);

        $i7 = r3.<org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: int numGroups>;

        $i8 = $i7 + 1;

        r3.<org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: int numGroups> = $i8;

        $r15 = virtualinvoke $r9.<java.lang.String: java.lang.String[] split(java.lang.String)>(":");

        i9 = lengthof $r15;

        i11 = 0;

     label2:
        if i11 >= i9 goto label3;

        r16 = $r15[i11];

        $l10 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r16);

        $r17 = r3.<org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: java.util.HashMap serverGroup>;

        $r18 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l10);

        $r19 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l6);

        virtualinvoke $r17.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, $r19);

        i11 = i11 + 1;

        goto label2;

     label3:
        goto label5;

     label4:
        $z2 = virtualinvoke $r7.<java.lang.String: boolean startsWith(java.lang.String)>("weight");

        if $z2 == 0 goto label5;

        $i0 = virtualinvoke $r7.<java.lang.String: int indexOf(int)>(46);

        $i1 = $i0 + 1;

        $r10 = virtualinvoke $r7.<java.lang.String: java.lang.String substring(int)>($i1);

        $l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r10);

        $r11 = r3.<org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: java.util.HashMap serverWeight>;

        $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $l3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r9);

        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        virtualinvoke $r11.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r13);

     label5:
        goto label1;

     label6:
        specialinvoke r3.<org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: void computeGroupWeight()>();

        return;
    }

    private void computeGroupWeight()
    {
        byte $b1;
        java.lang.Long $r8, $r20, $r22, r24, $r27, $r29, $r32, $r34, $r37;
        boolean $z0, $z1, $z2;
        java.util.Collection $r5;
        java.util.Set $r2;
        org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical r0;
        java.lang.StringBuilder $r9, $r11, $r12, $r14, $r16, $r17;
        java.util.HashMap $r1, $r4, $r21, $r25, $r26, $r30, $r33, $r35, $r36;
        long $l0, $l5, $l6, $l7, l8;
        int $i2, $i3, $i4;
        java.lang.String $r13, $r18;
        org.slf4j.Logger $r10, $r15;
        java.util.Iterator $r3, $r6;
        java.lang.Object $r7, $r19, $r23, $r28, $r31, $r38;

        r0 := @this: org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical;

        $r1 = r0.<org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: java.util.HashMap serverGroup>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r19 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r20 = (java.lang.Long) $r19;

        $l5 = virtualinvoke $r20.<java.lang.Long: long longValue()>();

        $r21 = r0.<org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: java.util.HashMap serverGroup>;

        $r22 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5);

        $r23 = virtualinvoke $r21.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r22);

        r24 = (java.lang.Long) $r23;

        $r25 = r0.<org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: java.util.HashMap groupWeight>;

        $z2 = virtualinvoke $r25.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r24);

        if $z2 != 0 goto label2;

        $r35 = r0.<org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: java.util.HashMap groupWeight>;

        $r36 = r0.<org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: java.util.HashMap serverWeight>;

        $r37 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5);

        $r38 = virtualinvoke $r36.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r37);

        virtualinvoke $r35.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r24, $r38);

        goto label3;

     label2:
        $r26 = r0.<org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: java.util.HashMap serverWeight>;

        $r27 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5);

        $r28 = virtualinvoke $r26.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r27);

        $r29 = (java.lang.Long) $r28;

        $l6 = virtualinvoke $r29.<java.lang.Long: long longValue()>();

        $r30 = r0.<org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: java.util.HashMap groupWeight>;

        $r31 = virtualinvoke $r30.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r24);

        $r32 = (java.lang.Long) $r31;

        $l7 = virtualinvoke $r32.<java.lang.Long: long longValue()>();

        l8 = $l6 + $l7;

        $r33 = r0.<org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: java.util.HashMap groupWeight>;

        $r34 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l8);

        virtualinvoke $r33.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r24, $r34);

     label3:
        goto label1;

     label4:
        $r4 = r0.<org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: java.util.HashMap groupWeight>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.util.Collection values()>();

        $r6 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.lang.Long) $r7;

        $l0 = virtualinvoke $r8.<java.lang.Long: long longValue()>();

        $r10 = <org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: org.slf4j.Logger LOG>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Group weight: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<org.slf4j.Logger: void debug(java.lang.String)>($r13);

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label6;

        $i2 = r0.<org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: int numGroups>;

        $i3 = $i2 - 1;

        r0.<org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: int numGroups> = $i3;

        $r15 = <org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: org.slf4j.Logger LOG>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("One zero-weight group: 1, ");

        $i4 = r0.<org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: int numGroups>;

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r15.<org.slf4j.Logger: void debug(java.lang.String)>($r18);

     label6:
        goto label5;

     label7:
        return;
    }

    public boolean containsQuorum(java.util.HashSet)
    {
        byte $b11;
        java.lang.Long $r29, $r33, $r40, $r44, $r46, $r48, $r50, $r52, $r54, r56, $r58, $r60, $r62, $r63, $r65;
        java.util.Set $r8;
        java.lang.StringBuilder $r4, $r5, $r12, $r13, $r14, $r16, $r20, $r21, $r25, $r26, $r32, $r35, $r36, $r37, $r38, $r42, $r68, $r69, $r70, $r71, $r72;
        org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical r15;
        long $l7, $l8, $l9, $l10, $l12, $l13, $l14, l15;
        java.lang.String $r6, $r17, $r22, $r27, $r43;
        boolean $z0, $z1, $z2;
        java.util.HashMap $r39, $r47, $r53, $r57, $r64, $r67;
        java.util.HashSet r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i16, $i17;
        org.slf4j.Logger $r3, $r11, $r19, $r24, $r31;
        java.util.Iterator $r7, $r9;
        java.lang.Object $r28, $r34, $r41, $r45, $r49, $r51, $r55, $r59, $r61, $r66;

        r15 := @this: org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical;

        r1 := @parameter0: java.util.HashSet;

        $r67 = new java.util.HashMap;

        specialinvoke $r67.<java.util.HashMap: void <init>()>();

        $i0 = virtualinvoke r1.<java.util.HashSet: int size()>();

        if $i0 != 0 goto label1;

        return 0;

     label1:
        $r3 = <org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: org.slf4j.Logger LOG>;

        $r68 = new java.lang.StringBuilder;

        specialinvoke $r68.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Set size: ");

        $i1 = virtualinvoke r1.<java.util.HashSet: int size()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r3.<org.slf4j.Logger: void debug(java.lang.String)>($r6);

        $r7 = virtualinvoke r1.<java.util.HashSet: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r51 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r52 = (java.lang.Long) $r51;

        $l12 = virtualinvoke $r52.<java.lang.Long: long longValue()>();

        $r53 = r15.<org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: java.util.HashMap serverGroup>;

        $r54 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l12);

        $r55 = virtualinvoke $r53.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r54);

        r56 = (java.lang.Long) $r55;

        $z2 = virtualinvoke $r67.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r56);

        if $z2 != 0 goto label3;

        $r64 = r15.<org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: java.util.HashMap serverWeight>;

        $r65 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l12);

        $r66 = virtualinvoke $r64.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r65);

        virtualinvoke $r67.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r56, $r66);

        goto label4;

     label3:
        $r57 = r15.<org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: java.util.HashMap serverWeight>;

        $r58 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l12);

        $r59 = virtualinvoke $r57.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r58);

        $r60 = (java.lang.Long) $r59;

        $l13 = virtualinvoke $r60.<java.lang.Long: long longValue()>();

        $r61 = virtualinvoke $r67.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r56);

        $r62 = (java.lang.Long) $r61;

        $l14 = virtualinvoke $r62.<java.lang.Long: long longValue()>();

        l15 = $l13 + $l14;

        $r63 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l15);

        virtualinvoke $r67.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r56, $r63);

     label4:
        goto label2;

     label5:
        i16 = 0;

        $r8 = virtualinvoke $r67.<java.util.HashMap: java.util.Set keySet()>();

        $r9 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label6:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        $r28 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        $r29 = (java.lang.Long) $r28;

        $l7 = virtualinvoke $r29.<java.lang.Long: long longValue()>();

        $r31 = <org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: org.slf4j.Logger LOG>;

        $r69 = new java.lang.StringBuilder;

        specialinvoke $r69.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Group info: ");

        $r33 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l7);

        $r34 = virtualinvoke $r67.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r33);

        $r35 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l7);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r39 = r15.<org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: java.util.HashMap groupWeight>;

        $r40 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l7);

        $r41 = virtualinvoke $r39.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r40);

        $r42 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r41);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r31.<org.slf4j.Logger: void debug(java.lang.String)>($r43);

        $r44 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l7);

        $r45 = virtualinvoke $r67.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r44);

        $r46 = (java.lang.Long) $r45;

        $l8 = virtualinvoke $r46.<java.lang.Long: long longValue()>();

        $r47 = r15.<org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: java.util.HashMap groupWeight>;

        $r48 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l7);

        $r49 = virtualinvoke $r47.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r48);

        $r50 = (java.lang.Long) $r49;

        $l9 = virtualinvoke $r50.<java.lang.Long: long longValue()>();

        $l10 = $l9 / 2L;

        $b11 = $l8 cmp $l10;

        $i17 = (int) $b11;

        if $i17 <= 0 goto label7;

        i16 = i16 + 1;

     label7:
        goto label6;

     label8:
        $r11 = <org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: org.slf4j.Logger LOG>;

        $r70 = new java.lang.StringBuilder;

        specialinvoke $r70.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Majority group counter: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i16);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $i2 = r15.<org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: int numGroups>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r11.<org.slf4j.Logger: void debug(java.lang.String)>($r17);

        $i3 = r15.<org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: int numGroups>;

        $i4 = $i3 / 2;

        if i16 <= $i4 goto label9;

        $r24 = <org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: org.slf4j.Logger LOG>;

        $r71 = new java.lang.StringBuilder;

        specialinvoke $r71.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Positive set size: ");

        $i6 = virtualinvoke r1.<java.util.HashSet: int size()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r24.<org.slf4j.Logger: void debug(java.lang.String)>($r27);

        return 1;

     label9:
        $r19 = <org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: org.slf4j.Logger LOG>;

        $r72 = new java.lang.StringBuilder;

        specialinvoke $r72.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Negative set size: ");

        $i5 = virtualinvoke r1.<java.util.HashSet: int size()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r19.<org.slf4j.Logger: void debug(java.lang.String)>($r22);

        return 0;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/zookeeper/server/quorum/flexible/QuorumHierarchical;");

        <org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical: org.slf4j.Logger LOG> = $r0;

        return;
    }
}
