abstract class org.apache.lucene.util.packed.PackedInts$ReaderImpl extends java.lang.Object implements org.apache.lucene.util.packed.PackedInts$Reader
{
    protected final int bitsPerValue;
    protected final int valueCount;
    static final boolean $assertionsDisabled;

    protected void <init>(int, int)
    {
        org.apache.lucene.util.packed.PackedInts$ReaderImpl r0;
        java.lang.AssertionError $r1;
        int i0, i1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.packed.PackedInts$ReaderImpl;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.util.packed.PackedInts$ReaderImpl: int bitsPerValue> = i0;

        $z0 = <org.apache.lucene.util.packed.PackedInts$ReaderImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if i0 <= 0 goto label1;

        if i0 <= 64 goto label2;

     label1:
        $r1 = new java.lang.AssertionError;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bitsPerValue=");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>($r5);

        throw $r1;

     label2:
        r0.<org.apache.lucene.util.packed.PackedInts$ReaderImpl: int valueCount> = i1;

        return;
    }

    public int getBitsPerValue()
    {
        int $i0;
        org.apache.lucene.util.packed.PackedInts$ReaderImpl r0;

        r0 := @this: org.apache.lucene.util.packed.PackedInts$ReaderImpl;

        $i0 = r0.<org.apache.lucene.util.packed.PackedInts$ReaderImpl: int bitsPerValue>;

        return $i0;
    }

    public int size()
    {
        int $i0;
        org.apache.lucene.util.packed.PackedInts$ReaderImpl r0;

        r0 := @this: org.apache.lucene.util.packed.PackedInts$ReaderImpl;

        $i0 = r0.<org.apache.lucene.util.packed.PackedInts$ReaderImpl: int valueCount>;

        return $i0;
    }

    public java.lang.Object getArray()
    {
        org.apache.lucene.util.packed.PackedInts$ReaderImpl r0;

        r0 := @this: org.apache.lucene.util.packed.PackedInts$ReaderImpl;

        return null;
    }

    public boolean hasArray()
    {
        org.apache.lucene.util.packed.PackedInts$ReaderImpl r0;

        r0 := @this: org.apache.lucene.util.packed.PackedInts$ReaderImpl;

        return 0;
    }

    public int get(int, long[], int, int)
    {
        long $l6;
        java.lang.AssertionError $r2, $r3, $r4;
        long[] r1;
        int i0, $i1, i2, $i3, $i4, i5, $i7, $i8, $i9, $i10, i11, i12;
        java.lang.String $r9;
        boolean $z0, $z1, $z2;
        org.apache.lucene.util.packed.PackedInts$ReaderImpl r0;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;

        r0 := @this: org.apache.lucene.util.packed.PackedInts$ReaderImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: long[];

        i5 := @parameter2: int;

        i2 := @parameter3: int;

        $z0 = <org.apache.lucene.util.packed.PackedInts$ReaderImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i2 > 0 goto label1;

        $r4 = new java.lang.AssertionError;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("len must be > 0 (got ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>($r9);

        throw $r4;

     label1:
        $z1 = <org.apache.lucene.util.packed.PackedInts$ReaderImpl: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        if i0 < 0 goto label2;

        $i10 = r0.<org.apache.lucene.util.packed.PackedInts$ReaderImpl: int valueCount>;

        if i0 < $i10 goto label3;

     label2:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label3:
        $z2 = <org.apache.lucene.util.packed.PackedInts$ReaderImpl: boolean $assertionsDisabled>;

        if $z2 != 0 goto label4;

        $i8 = i5 + i2;

        $i7 = lengthof r1;

        if $i8 <= $i7 goto label4;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label4:
        $i1 = r0.<org.apache.lucene.util.packed.PackedInts$ReaderImpl: int valueCount>;

        $i3 = $i1 - i0;

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>($i3, i2);

        i11 = i0;

        i12 = i5;

        $i9 = i0 + $i4;

     label5:
        if i11 >= $i9 goto label6;

        $l6 = virtualinvoke r0.<org.apache.lucene.util.packed.PackedInts$ReaderImpl: long get(int)>(i11);

        r1[i12] = $l6;

        i11 = i11 + 1;

        i12 = i12 + 1;

        goto label5;

     label6:
        return $i4;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/packed/PackedInts;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.packed.PackedInts$ReaderImpl: boolean $assertionsDisabled> = $z1;

        return;
    }
}
