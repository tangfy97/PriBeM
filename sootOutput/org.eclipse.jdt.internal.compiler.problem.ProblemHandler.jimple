public class org.eclipse.jdt.internal.compiler.problem.ProblemHandler extends java.lang.Object
{
    public static final java.lang.String[] NoArgument;
    public final org.eclipse.jdt.internal.compiler.IErrorHandlingPolicy policy;
    public final org.eclipse.jdt.internal.compiler.IProblemFactory problemFactory;
    public final org.eclipse.jdt.internal.compiler.impl.CompilerOptions options;

    static void <clinit>()
    {
        java.lang.String[] $r0;

        $r0 = <org.eclipse.jdt.core.compiler.CharOperation: java.lang.String[] NO_STRINGS>;

        <org.eclipse.jdt.internal.compiler.problem.ProblemHandler: java.lang.String[] NoArgument> = $r0;

        return;
    }

    public void <init>(org.eclipse.jdt.internal.compiler.IErrorHandlingPolicy, org.eclipse.jdt.internal.compiler.impl.CompilerOptions, org.eclipse.jdt.internal.compiler.IProblemFactory)
    {
        org.eclipse.jdt.internal.compiler.IProblemFactory r2;
        org.eclipse.jdt.internal.compiler.IErrorHandlingPolicy r1;
        org.eclipse.jdt.internal.compiler.problem.ProblemHandler r0;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions r3;

        r0 := @this: org.eclipse.jdt.internal.compiler.problem.ProblemHandler;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.IErrorHandlingPolicy;

        r3 := @parameter1: org.eclipse.jdt.internal.compiler.impl.CompilerOptions;

        r2 := @parameter2: org.eclipse.jdt.internal.compiler.IProblemFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.eclipse.jdt.internal.compiler.problem.ProblemHandler: org.eclipse.jdt.internal.compiler.IErrorHandlingPolicy policy> = r1;

        r0.<org.eclipse.jdt.internal.compiler.problem.ProblemHandler: org.eclipse.jdt.internal.compiler.IProblemFactory problemFactory> = r2;

        r0.<org.eclipse.jdt.internal.compiler.problem.ProblemHandler: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options> = r3;

        return;
    }

    public int computeSeverity(int)
    {
        int i0;
        org.eclipse.jdt.internal.compiler.problem.ProblemHandler r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.problem.ProblemHandler;

        i0 := @parameter0: int;

        return 1;
    }

    public org.eclipse.jdt.core.compiler.CategorizedProblem createProblem(char[], int, java.lang.String[], java.lang.String[], int, int, int, int, int)
    {
        org.eclipse.jdt.internal.compiler.IProblemFactory $r4;
        org.eclipse.jdt.core.compiler.CategorizedProblem $r5;
        java.lang.String[] r2, r3;
        org.eclipse.jdt.internal.compiler.problem.ProblemHandler r0;
        int i0, i1, i2, i3, i4, i5;
        char[] r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.problem.ProblemHandler;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String[];

        r3 := @parameter3: java.lang.String[];

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        i3 := @parameter6: int;

        i4 := @parameter7: int;

        i5 := @parameter8: int;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.problem.ProblemHandler: org.eclipse.jdt.internal.compiler.IProblemFactory problemFactory>;

        $r5 = interfaceinvoke $r4.<org.eclipse.jdt.internal.compiler.IProblemFactory: org.eclipse.jdt.core.compiler.CategorizedProblem createProblem(char[],int,java.lang.String[],java.lang.String[],int,int,int,int,int)>(r1, i0, r2, r3, i1, i2, i3, i4, i5);

        return $r5;
    }

    public org.eclipse.jdt.core.compiler.CategorizedProblem createProblem(char[], int, java.lang.String[], int, java.lang.String[], int, int, int, int, int)
    {
        org.eclipse.jdt.internal.compiler.IProblemFactory $r4;
        org.eclipse.jdt.core.compiler.CategorizedProblem $r5;
        java.lang.String[] r2, r3;
        org.eclipse.jdt.internal.compiler.problem.ProblemHandler r0;
        int i0, i1, i2, i3, i4, i5, i6;
        char[] r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.problem.ProblemHandler;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String[];

        i1 := @parameter3: int;

        r3 := @parameter4: java.lang.String[];

        i2 := @parameter5: int;

        i3 := @parameter6: int;

        i4 := @parameter7: int;

        i5 := @parameter8: int;

        i6 := @parameter9: int;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.problem.ProblemHandler: org.eclipse.jdt.internal.compiler.IProblemFactory problemFactory>;

        $r5 = interfaceinvoke $r4.<org.eclipse.jdt.internal.compiler.IProblemFactory: org.eclipse.jdt.core.compiler.CategorizedProblem createProblem(char[],int,java.lang.String[],int,java.lang.String[],int,int,int,int,int)>(r1, i0, r2, i1, r3, i2, i3, i4, i5, i6);

        return $r5;
    }

    public void handle(int, java.lang.String[], int, java.lang.String[], int, int, int, org.eclipse.jdt.internal.compiler.impl.ReferenceContext, org.eclipse.jdt.internal.compiler.CompilationResult)
    {
        java.lang.String[] r4, r5;
        org.eclipse.jdt.internal.compiler.impl.ReferenceContext r0;
        int[] $r8, $r9;
        org.eclipse.jdt.internal.compiler.problem.ProblemHandler r1;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i15;
        org.eclipse.jdt.internal.compiler.problem.AbortCompilation $r12;
        boolean $z0;
        org.eclipse.jdt.internal.compiler.IErrorHandlingPolicy $r7;
        org.eclipse.jdt.core.compiler.CategorizedProblem $r6, $r10;
        org.eclipse.jdt.internal.compiler.CompilationResult r2;
        char[] $r3;

        r1 := @this: org.eclipse.jdt.internal.compiler.problem.ProblemHandler;

        i3 := @parameter0: int;

        r4 := @parameter1: java.lang.String[];

        i4 := @parameter2: int;

        r5 := @parameter3: java.lang.String[];

        i0 := @parameter4: int;

        i1 := @parameter5: int;

        i5 := @parameter6: int;

        r0 := @parameter7: org.eclipse.jdt.internal.compiler.impl.ReferenceContext;

        r2 := @parameter8: org.eclipse.jdt.internal.compiler.CompilationResult;

        $i15 = (int) -1;

        if i0 != $i15 goto label01;

        return;

     label01:
        if r0 != null goto label03;

        $i10 = i0 & 1;

        if $i10 == 0 goto label02;

        $r10 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.problem.ProblemHandler: org.eclipse.jdt.core.compiler.CategorizedProblem createProblem(char[],int,java.lang.String[],int,java.lang.String[],int,int,int,int,int)>(null, i3, r4, i4, r5, i0, 0, 0, 0, 0);

        $r12 = new org.eclipse.jdt.internal.compiler.problem.AbortCompilation;

        specialinvoke $r12.<org.eclipse.jdt.internal.compiler.problem.AbortCompilation: void <init>(org.eclipse.jdt.internal.compiler.CompilationResult,org.eclipse.jdt.core.compiler.CategorizedProblem)>(null, $r10);

        throw $r12;

     label02:
        return;

     label03:
        if i1 < 0 goto label04;

        $r9 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.CompilationResult: int[] getLineSeparatorPositions()>();

        $i8 = lengthof $r9;

        $i9 = $i8 - 1;

        $i11 = staticinvoke <org.eclipse.jdt.internal.compiler.util.Util: int getLineNumber(int,int[],int,int)>(i1, $r9, 0, $i9);

        goto label05;

     label04:
        $i11 = 0;

     label05:
        i2 = $i11;

        if i1 < 0 goto label06;

        $r8 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.CompilationResult: int[] getLineSeparatorPositions()>();

        $i12 = staticinvoke <org.eclipse.jdt.internal.compiler.util.Util: int searchColumnNumber(int[],int,int)>($r8, $i11, i1);

        goto label07;

     label06:
        $i12 = 0;

     label07:
        $r3 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.CompilationResult: char[] getFileName()>();

        $r6 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.problem.ProblemHandler: org.eclipse.jdt.core.compiler.CategorizedProblem createProblem(char[],int,java.lang.String[],int,java.lang.String[],int,int,int,int,int)>($r3, i3, r4, i4, r5, i0, i1, i5, i2, $i12);

        if $r6 != null goto label08;

        return;

     label08:
        $i6 = i0 & 1;

        tableswitch($i6)
        {
            case 0: goto label12;
            case 1: goto label09;
            default: goto label13;
        };

     label09:
        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.problem.ProblemHandler: void record(org.eclipse.jdt.core.compiler.CategorizedProblem,org.eclipse.jdt.internal.compiler.CompilationResult,org.eclipse.jdt.internal.compiler.impl.ReferenceContext)>($r6, r2, r0);

        $i7 = i0 & 128;

        if $i7 == 0 goto label13;

        interfaceinvoke r0.<org.eclipse.jdt.internal.compiler.impl.ReferenceContext: void tagAsHavingErrors()>();

        $r7 = r1.<org.eclipse.jdt.internal.compiler.problem.ProblemHandler: org.eclipse.jdt.internal.compiler.IErrorHandlingPolicy policy>;

        $z0 = interfaceinvoke $r7.<org.eclipse.jdt.internal.compiler.IErrorHandlingPolicy: boolean stopOnFirstError()>();

        if $z0 == 0 goto label10;

        $i13 = 2;

        goto label11;

     label10:
        $i13 = i0 & 30;

     label11:
        if $i13 == 0 goto label13;

        interfaceinvoke r0.<org.eclipse.jdt.internal.compiler.impl.ReferenceContext: void abort(int,org.eclipse.jdt.core.compiler.CategorizedProblem)>($i13, $r6);

        goto label13;

     label12:
        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.problem.ProblemHandler: void record(org.eclipse.jdt.core.compiler.CategorizedProblem,org.eclipse.jdt.internal.compiler.CompilationResult,org.eclipse.jdt.internal.compiler.impl.ReferenceContext)>($r6, r2, r0);

     label13:
        return;
    }

    public void handle(int, java.lang.String[], java.lang.String[], int, int, org.eclipse.jdt.internal.compiler.impl.ReferenceContext, org.eclipse.jdt.internal.compiler.CompilationResult)
    {
        org.eclipse.jdt.internal.compiler.CompilationResult r4;
        java.lang.String[] r1, r2;
        org.eclipse.jdt.internal.compiler.impl.ReferenceContext r3;
        org.eclipse.jdt.internal.compiler.problem.ProblemHandler r0;
        int i0, $i1, i2, i3;

        r0 := @this: org.eclipse.jdt.internal.compiler.problem.ProblemHandler;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String[];

        r2 := @parameter2: java.lang.String[];

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        r3 := @parameter5: org.eclipse.jdt.internal.compiler.impl.ReferenceContext;

        r4 := @parameter6: org.eclipse.jdt.internal.compiler.CompilationResult;

        $i1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.problem.ProblemHandler: int computeSeverity(int)>(i0);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.problem.ProblemHandler: void handle(int,java.lang.String[],int,java.lang.String[],int,int,int,org.eclipse.jdt.internal.compiler.impl.ReferenceContext,org.eclipse.jdt.internal.compiler.CompilationResult)>(i0, r1, 0, r2, $i1, i2, i3, r3, r4);

        return;
    }

    public void record(org.eclipse.jdt.core.compiler.CategorizedProblem, org.eclipse.jdt.internal.compiler.CompilationResult, org.eclipse.jdt.internal.compiler.impl.ReferenceContext)
    {
        org.eclipse.jdt.internal.compiler.impl.ReferenceContext r2;
        org.eclipse.jdt.internal.compiler.problem.ProblemHandler r3;
        org.eclipse.jdt.core.compiler.CategorizedProblem r1;
        org.eclipse.jdt.internal.compiler.CompilationResult r0;

        r3 := @this: org.eclipse.jdt.internal.compiler.problem.ProblemHandler;

        r1 := @parameter0: org.eclipse.jdt.core.compiler.CategorizedProblem;

        r0 := @parameter1: org.eclipse.jdt.internal.compiler.CompilationResult;

        r2 := @parameter2: org.eclipse.jdt.internal.compiler.impl.ReferenceContext;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.CompilationResult: void record(org.eclipse.jdt.core.compiler.CategorizedProblem,org.eclipse.jdt.internal.compiler.impl.ReferenceContext)>(r1, r2);

        return;
    }
}
