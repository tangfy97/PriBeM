public class org.waveprotocol.wave.model.wave.undo.OneStepBuffer extends java.lang.Object
{
    private final java.util.List undoable;

    public void <init>()
    {
        org.waveprotocol.wave.model.wave.undo.OneStepBuffer r0;
        java.util.ArrayList $r1;

        r0 := @this: org.waveprotocol.wave.model.wave.undo.OneStepBuffer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.model.wave.undo.OneStepBuffer: java.util.List undoable> = $r1;

        return;
    }

    public java.util.List transformNonUndoable(org.waveprotocol.wave.model.operation.wave.WaveletOperation, boolean)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r1;
        org.waveprotocol.wave.model.operation.TransformException $r17;
        long $l0;
        org.waveprotocol.wave.model.wave.undo.OneStepBuffer r0;
        org.waveprotocol.wave.model.version.HashedVersion $r14;
        boolean $z0, $z1, z2;
        org.waveprotocol.wave.model.wave.undo.WaveAggregateOp $r3, $r5, r8, r10;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r13;
        java.lang.RuntimeException $r18;
        org.waveprotocol.wave.model.operation.OperationPair $r6;
        java.util.List $r2, $r4, $r11, $r12, $r15, $r16;
        java.lang.Object $r7, $r9;

        r0 := @this: org.waveprotocol.wave.model.wave.undo.OneStepBuffer;

        r1 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletOperation;

        z2 := @parameter1: boolean;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.undo.OneStepBuffer: boolean hasOperations()>();

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <org.waveprotocol.wave.model.wave.undo.OpUtils: boolean isNoop(org.waveprotocol.wave.model.operation.wave.WaveletOperation)>(r1);

        if $z1 == 0 goto label2;

     label1:
        $r2 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r1);

        return $r2;

     label2:
        $r3 = staticinvoke <org.waveprotocol.wave.model.wave.undo.WaveAggregateOp: org.waveprotocol.wave.model.wave.undo.WaveAggregateOp createAggregate(org.waveprotocol.wave.model.operation.wave.WaveletOperation)>(r1);

        $r4 = r0.<org.waveprotocol.wave.model.wave.undo.OneStepBuffer: java.util.List undoable>;

        $r5 = staticinvoke <org.waveprotocol.wave.model.wave.undo.WaveAggregateOp: org.waveprotocol.wave.model.wave.undo.WaveAggregateOp compose(java.util.List)>($r4);

     label3:
        $r6 = staticinvoke <org.waveprotocol.wave.model.wave.undo.WaveAggregateOp: org.waveprotocol.wave.model.operation.OperationPair transform(org.waveprotocol.wave.model.wave.undo.WaveAggregateOp,org.waveprotocol.wave.model.wave.undo.WaveAggregateOp)>($r3, $r5);

        $r7 = virtualinvoke $r6.<org.waveprotocol.wave.model.operation.OperationPair: java.lang.Object clientOp()>();

        r8 = (org.waveprotocol.wave.model.wave.undo.WaveAggregateOp) $r7;

        $r9 = virtualinvoke $r6.<org.waveprotocol.wave.model.operation.OperationPair: java.lang.Object serverOp()>();

        r10 = (org.waveprotocol.wave.model.wave.undo.WaveAggregateOp) $r9;

     label4:
        goto label6;

     label5:
        $r17 := @caughtexception;

        $r18 = new java.lang.RuntimeException;

        specialinvoke $r18.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Transform exception while transforming nonUndoable", $r17);

        throw $r18;

     label6:
        $r11 = r0.<org.waveprotocol.wave.model.wave.undo.OneStepBuffer: java.util.List undoable>;

        interfaceinvoke $r11.<java.util.List: void clear()>();

        if z2 == 0 goto label7;

        $r16 = r0.<org.waveprotocol.wave.model.wave.undo.OneStepBuffer: java.util.List undoable>;

        interfaceinvoke $r16.<java.util.List: boolean add(java.lang.Object)>(r10);

        goto label8;

     label7:
        $r12 = r0.<org.waveprotocol.wave.model.wave.undo.OneStepBuffer: java.util.List undoable>;

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r5);

     label8:
        $r13 = virtualinvoke r1.<org.waveprotocol.wave.model.operation.wave.WaveletOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext getContext()>();

        $l0 = virtualinvoke $r13.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: long getVersionIncrement()>();

        $r14 = virtualinvoke $r13.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: org.waveprotocol.wave.model.version.HashedVersion getHashedVersion()>();

        $r15 = virtualinvoke r8.<org.waveprotocol.wave.model.wave.undo.WaveAggregateOp: java.util.List toWaveletOperationsWithVersions(long,org.waveprotocol.wave.model.version.HashedVersion)>($l0, $r14);

        return $r15;

        catch org.waveprotocol.wave.model.operation.TransformException from label3 to label4 with label5;
    }

    public void undoable(org.waveprotocol.wave.model.operation.wave.WaveletOperation)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r1;
        java.util.List $r2;
        org.waveprotocol.wave.model.wave.undo.WaveAggregateOp $r3;
        org.waveprotocol.wave.model.wave.undo.OneStepBuffer r0;

        r0 := @this: org.waveprotocol.wave.model.wave.undo.OneStepBuffer;

        r1 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletOperation;

        $r2 = r0.<org.waveprotocol.wave.model.wave.undo.OneStepBuffer: java.util.List undoable>;

        $r3 = staticinvoke <org.waveprotocol.wave.model.wave.undo.WaveAggregateOp: org.waveprotocol.wave.model.wave.undo.WaveAggregateOp createAggregate(org.waveprotocol.wave.model.operation.wave.WaveletOperation)>(r1);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3);

        return;
    }

    public java.util.List flush()
    {
        java.util.Iterator $r3;
        org.waveprotocol.wave.model.wave.undo.WaveAggregateOp r6;
        org.waveprotocol.wave.model.wave.undo.OneStepBuffer r1;
        java.util.ArrayList $r0;
        java.util.List $r2, $r4, $r7;
        java.lang.Object $r5;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.model.wave.undo.OneStepBuffer;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<org.waveprotocol.wave.model.wave.undo.OneStepBuffer: java.util.List undoable>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.waveprotocol.wave.model.wave.undo.WaveAggregateOp) $r5;

        $r7 = virtualinvoke r6.<org.waveprotocol.wave.model.wave.undo.WaveAggregateOp: java.util.List toWaveletOperations()>();

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r7);

        goto label1;

     label2:
        $r4 = r1.<org.waveprotocol.wave.model.wave.undo.OneStepBuffer: java.util.List undoable>;

        interfaceinvoke $r4.<java.util.List: void clear()>();

        return $r0;
    }

    public java.util.List revert()
    {
        java.util.List $r1, $r4, $r5;
        org.waveprotocol.wave.model.wave.undo.WaveAggregateOp $r2, $r3;
        org.waveprotocol.wave.model.wave.undo.OneStepBuffer r0;

        r0 := @this: org.waveprotocol.wave.model.wave.undo.OneStepBuffer;

        $r1 = r0.<org.waveprotocol.wave.model.wave.undo.OneStepBuffer: java.util.List undoable>;

        $r2 = staticinvoke <org.waveprotocol.wave.model.wave.undo.WaveAggregateOp: org.waveprotocol.wave.model.wave.undo.WaveAggregateOp compose(java.util.List)>($r1);

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.wave.undo.WaveAggregateOp: org.waveprotocol.wave.model.wave.undo.WaveAggregateOp invert()>();

        $r4 = r0.<org.waveprotocol.wave.model.wave.undo.OneStepBuffer: java.util.List undoable>;

        interfaceinvoke $r4.<java.util.List: void clear()>();

        $r5 = virtualinvoke $r3.<org.waveprotocol.wave.model.wave.undo.WaveAggregateOp: java.util.List toWaveletOperations()>();

        return $r5;
    }

    public boolean hasOperations()
    {
        java.util.List $r1;
        org.waveprotocol.wave.model.wave.undo.OneStepBuffer r0;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.wave.undo.OneStepBuffer;

        $r1 = r0.<org.waveprotocol.wave.model.wave.undo.OneStepBuffer: java.util.List undoable>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }
}
