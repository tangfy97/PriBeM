public final class com.mycila.inject.internal.guava.base.Throwables extends java.lang.Object
{

    private void <init>()
    {
        com.mycila.inject.internal.guava.base.Throwables r0;

        r0 := @this: com.mycila.inject.internal.guava.base.Throwables;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void propagateIfInstanceOf(java.lang.Throwable, java.lang.Class) throws java.lang.Throwable
    {
        java.lang.Throwable r0, $r3;
        java.lang.Class r1;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.Throwable;

        r1 := @parameter1: java.lang.Class;

        if r0 == null goto label1;

        $z0 = virtualinvoke r1.<java.lang.Class: boolean isInstance(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(r0);

        $r3 = (java.lang.Throwable) $r2;

        throw $r3;

     label1:
        return;
    }

    public static void propagateIfPossible(java.lang.Throwable)
    {
        java.lang.Throwable r0;

        r0 := @parameter0: java.lang.Throwable;

        staticinvoke <com.mycila.inject.internal.guava.base.Throwables: void propagateIfInstanceOf(java.lang.Throwable,java.lang.Class)>(r0, class "Ljava/lang/Error;");

        staticinvoke <com.mycila.inject.internal.guava.base.Throwables: void propagateIfInstanceOf(java.lang.Throwable,java.lang.Class)>(r0, class "Ljava/lang/RuntimeException;");

        return;
    }

    public static void propagateIfPossible(java.lang.Throwable, java.lang.Class) throws java.lang.Throwable
    {
        java.lang.Throwable r0;
        java.lang.Class r1;

        r0 := @parameter0: java.lang.Throwable;

        r1 := @parameter1: java.lang.Class;

        staticinvoke <com.mycila.inject.internal.guava.base.Throwables: void propagateIfInstanceOf(java.lang.Throwable,java.lang.Class)>(r0, r1);

        staticinvoke <com.mycila.inject.internal.guava.base.Throwables: void propagateIfPossible(java.lang.Throwable)>(r0);

        return;
    }

    public static void propagateIfPossible(java.lang.Throwable, java.lang.Class, java.lang.Class) throws java.lang.Throwable, java.lang.Throwable
    {
        java.lang.Throwable r1;
        java.lang.Class r0, r2;

        r1 := @parameter0: java.lang.Throwable;

        r2 := @parameter1: java.lang.Class;

        r0 := @parameter2: java.lang.Class;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.mycila.inject.internal.guava.base.Throwables: void propagateIfInstanceOf(java.lang.Throwable,java.lang.Class)>(r1, r2);

        staticinvoke <com.mycila.inject.internal.guava.base.Throwables: void propagateIfPossible(java.lang.Throwable,java.lang.Class)>(r1, r0);

        return;
    }

    public static java.lang.RuntimeException propagate(java.lang.Throwable)
    {
        java.lang.Throwable r0, $r2;
        java.lang.Object $r1;
        java.lang.RuntimeException $r3;

        r0 := @parameter0: java.lang.Throwable;

        $r1 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r2 = (java.lang.Throwable) $r1;

        staticinvoke <com.mycila.inject.internal.guava.base.Throwables: void propagateIfPossible(java.lang.Throwable)>($r2);

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r0);

        throw $r3;
    }

    public static java.lang.Throwable getRootCause(java.lang.Throwable)
    {
        java.lang.Throwable $r0, r1;

        r1 := @parameter0: java.lang.Throwable;

     label1:
        $r0 = virtualinvoke r1.<java.lang.Throwable: java.lang.Throwable getCause()>();

        if $r0 == null goto label2;

        r1 = $r0;

        goto label1;

     label2:
        return r1;
    }

    public static java.util.List getCausalChain(java.lang.Throwable)
    {
        java.lang.Throwable r2;
        java.util.List $r1;
        java.util.ArrayList $r0;

        r2 := @parameter0: java.lang.Throwable;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(4);

     label1:
        if r2 == null goto label2;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r2);

        r2 = virtualinvoke r2.<java.lang.Throwable: java.lang.Throwable getCause()>();

        goto label1;

     label2:
        $r1 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r0);

        return $r1;
    }

    public static java.lang.String getStackTraceAsString(java.lang.Throwable)
    {
        java.lang.Throwable r1;
        java.io.PrintWriter $r2;
        java.io.StringWriter $r0;
        java.lang.String $r3;

        r1 := @parameter0: java.lang.Throwable;

        $r0 = new java.io.StringWriter;

        specialinvoke $r0.<java.io.StringWriter: void <init>()>();

        $r2 = new java.io.PrintWriter;

        specialinvoke $r2.<java.io.PrintWriter: void <init>(java.io.Writer)>($r0);

        virtualinvoke r1.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>($r2);

        $r3 = virtualinvoke $r0.<java.io.StringWriter: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.Exception throwCause(java.lang.Exception, boolean) throws java.lang.Exception
    {
        java.lang.Throwable $r1;
        java.lang.Error $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        boolean z0, $z1, $z2;
        java.lang.Exception r0, $r3;
        java.lang.StackTraceElement[] $r4, $r5, r6;

        r0 := @parameter0: java.lang.Exception;

        z0 := @parameter1: boolean;

        $r1 = virtualinvoke r0.<java.lang.Exception: java.lang.Throwable getCause()>();

        if $r1 != null goto label1;

        throw r0;

     label1:
        if z0 == 0 goto label2;

        $r4 = virtualinvoke $r1.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();

        $r5 = virtualinvoke r0.<java.lang.Exception: java.lang.StackTraceElement[] getStackTrace()>();

        $i1 = lengthof $r4;

        $i0 = lengthof $r5;

        $i2 = $i1 + $i0;

        r6 = newarray (java.lang.StackTraceElement)[$i2];

        $i3 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r6, 0, $i3);

        $i5 = lengthof $r4;

        $i4 = lengthof $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r6, $i5, $i4);

        virtualinvoke $r1.<java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>(r6);

     label2:
        $z1 = $r1 instanceof java.lang.Exception;

        if $z1 == 0 goto label3;

        $r3 = (java.lang.Exception) $r1;

        throw $r3;

     label3:
        $z2 = $r1 instanceof java.lang.Error;

        if $z2 == 0 goto label4;

        $r2 = (java.lang.Error) $r1;

        throw $r2;

     label4:
        throw r0;
    }
}
