public class org.apache.lucene.util.CloseableThreadLocal extends java.lang.Object implements java.io.Closeable
{
    private java.lang.ThreadLocal t;
    private java.util.Map hardRefs;
    private static int PURGE_MULTIPLIER;
    private final java.util.concurrent.atomic.AtomicInteger countUntilPurge;

    public void <init>()
    {
        java.lang.ThreadLocal $r1;
        java.util.concurrent.atomic.AtomicInteger $r3;
        int $i0;
        org.apache.lucene.util.CloseableThreadLocal r0;
        java.util.WeakHashMap $r2;

        r0 := @this: org.apache.lucene.util.CloseableThreadLocal;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.ThreadLocal;

        specialinvoke $r1.<java.lang.ThreadLocal: void <init>()>();

        r0.<org.apache.lucene.util.CloseableThreadLocal: java.lang.ThreadLocal t> = $r1;

        $r2 = new java.util.WeakHashMap;

        specialinvoke $r2.<java.util.WeakHashMap: void <init>()>();

        r0.<org.apache.lucene.util.CloseableThreadLocal: java.util.Map hardRefs> = $r2;

        $r3 = new java.util.concurrent.atomic.AtomicInteger;

        $i0 = <org.apache.lucene.util.CloseableThreadLocal: int PURGE_MULTIPLIER>;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>($i0);

        r0.<org.apache.lucene.util.CloseableThreadLocal: java.util.concurrent.atomic.AtomicInteger countUntilPurge> = $r3;

        return;
    }

    protected java.lang.Object initialValue()
    {
        org.apache.lucene.util.CloseableThreadLocal r0;

        r0 := @this: org.apache.lucene.util.CloseableThreadLocal;

        return null;
    }

    public java.lang.Object get()
    {
        java.lang.ThreadLocal $r1;
        java.lang.Object $r2, $r4, $r5;
        java.lang.ref.WeakReference r3;
        org.apache.lucene.util.CloseableThreadLocal r0;

        r0 := @this: org.apache.lucene.util.CloseableThreadLocal;

        $r1 = r0.<org.apache.lucene.util.CloseableThreadLocal: java.lang.ThreadLocal t>;

        $r2 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>();

        r3 = (java.lang.ref.WeakReference) $r2;

        if r3 != null goto label2;

        $r5 = virtualinvoke r0.<org.apache.lucene.util.CloseableThreadLocal: java.lang.Object initialValue()>();

        if $r5 == null goto label1;

        virtualinvoke r0.<org.apache.lucene.util.CloseableThreadLocal: void set(java.lang.Object)>($r5);

        return $r5;

     label1:
        return null;

     label2:
        specialinvoke r0.<org.apache.lucene.util.CloseableThreadLocal: void maybePurge()>();

        $r4 = virtualinvoke r3.<java.lang.ref.WeakReference: java.lang.Object get()>();

        return $r4;
    }

    public void set(java.lang.Object)
    {
        java.lang.Throwable $r7;
        java.lang.ThreadLocal $r3;
        org.apache.lucene.util.CloseableThreadLocal r0;
        java.util.Map $r4, $r5;
        java.lang.Thread $r6;
        java.lang.Object r2;
        java.lang.ref.WeakReference $r1;

        r0 := @this: org.apache.lucene.util.CloseableThreadLocal;

        r2 := @parameter0: java.lang.Object;

        $r3 = r0.<org.apache.lucene.util.CloseableThreadLocal: java.lang.ThreadLocal t>;

        $r1 = new java.lang.ref.WeakReference;

        specialinvoke $r1.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r2);

        virtualinvoke $r3.<java.lang.ThreadLocal: void set(java.lang.Object)>($r1);

        $r4 = r0.<org.apache.lucene.util.CloseableThreadLocal: java.util.Map hardRefs>;

        entermonitor $r4;

     label1:
        $r5 = r0.<org.apache.lucene.util.CloseableThreadLocal: java.util.Map hardRefs>;

        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r2);

        specialinvoke r0.<org.apache.lucene.util.CloseableThreadLocal: void maybePurge()>();

        exitmonitor $r4;

     label2:
        goto label5;

     label3:
        $r7 := @caughtexception;

        exitmonitor $r4;

     label4:
        throw $r7;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void maybePurge()
    {
        int $i0;
        org.apache.lucene.util.CloseableThreadLocal r0;
        java.util.concurrent.atomic.AtomicInteger $r1;

        r0 := @this: org.apache.lucene.util.CloseableThreadLocal;

        $r1 = r0.<org.apache.lucene.util.CloseableThreadLocal: java.util.concurrent.atomic.AtomicInteger countUntilPurge>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int getAndDecrement()>();

        if $i0 != 0 goto label1;

        specialinvoke r0.<org.apache.lucene.util.CloseableThreadLocal: void purge()>();

     label1:
        return;
    }

    private void purge()
    {
        java.lang.Throwable $r8;
        java.util.Iterator $r4;
        java.util.Set $r3;
        org.apache.lucene.util.CloseableThreadLocal r0;
        java.util.concurrent.atomic.AtomicInteger $r5;
        java.util.Map $r1, $r2;
        java.lang.Thread r7;
        int $i0, $i1, i2, i3;
        java.lang.Object $r6;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.util.CloseableThreadLocal;

        $r1 = r0.<org.apache.lucene.util.CloseableThreadLocal: java.util.Map hardRefs>;

        entermonitor $r1;

     label01:
        i2 = 0;

        $r2 = r0.<org.apache.lucene.util.CloseableThreadLocal: java.util.Map hardRefs>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label05;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.Thread) $r6;

        $z1 = virtualinvoke r7.<java.lang.Thread: boolean isAlive()>();

        if $z1 != 0 goto label03;

        interfaceinvoke $r4.<java.util.Iterator: void remove()>();

        goto label04;

     label03:
        i2 = i2 + 1;

     label04:
        goto label02;

     label05:
        $i1 = 1 + i2;

        $i0 = <org.apache.lucene.util.CloseableThreadLocal: int PURGE_MULTIPLIER>;

        i3 = $i1 * $i0;

        if i3 > 0 goto label06;

        i3 = 1000000;

     label06:
        $r5 = r0.<org.apache.lucene.util.CloseableThreadLocal: java.util.concurrent.atomic.AtomicInteger countUntilPurge>;

        virtualinvoke $r5.<java.util.concurrent.atomic.AtomicInteger: void set(int)>(i3);

        exitmonitor $r1;

     label07:
        goto label10;

     label08:
        $r8 := @caughtexception;

        exitmonitor $r1;

     label09:
        throw $r8;

     label10:
        return;

        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public void close()
    {
        java.lang.ThreadLocal $r1, $r2;
        org.apache.lucene.util.CloseableThreadLocal r0;

        r0 := @this: org.apache.lucene.util.CloseableThreadLocal;

        r0.<org.apache.lucene.util.CloseableThreadLocal: java.util.Map hardRefs> = null;

        $r1 = r0.<org.apache.lucene.util.CloseableThreadLocal: java.lang.ThreadLocal t>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.lucene.util.CloseableThreadLocal: java.lang.ThreadLocal t>;

        virtualinvoke $r2.<java.lang.ThreadLocal: void remove()>();

     label1:
        r0.<org.apache.lucene.util.CloseableThreadLocal: java.lang.ThreadLocal t> = null;

        return;
    }

    static void <clinit>()
    {
        <org.apache.lucene.util.CloseableThreadLocal: int PURGE_MULTIPLIER> = 20;

        return;
    }
}
