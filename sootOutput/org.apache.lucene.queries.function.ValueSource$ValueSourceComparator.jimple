class org.apache.lucene.queries.function.ValueSource$ValueSourceComparator extends org.apache.lucene.search.FieldComparator
{
    private final double[] values;
    private org.apache.lucene.queries.function.FunctionValues docVals;
    private double bottom;
    private final java.util.Map fcontext;
    final org.apache.lucene.queries.function.ValueSource this$0;

    void <init>(org.apache.lucene.queries.function.ValueSource, java.util.Map, int)
    {
        org.apache.lucene.queries.function.ValueSource r1;
        java.util.Map r2;
        int i0;
        double[] $r3;
        org.apache.lucene.queries.function.ValueSource$ValueSourceComparator r0;

        r0 := @this: org.apache.lucene.queries.function.ValueSource$ValueSourceComparator;

        r1 := @parameter0: org.apache.lucene.queries.function.ValueSource;

        r2 := @parameter1: java.util.Map;

        i0 := @parameter2: int;

        r0.<org.apache.lucene.queries.function.ValueSource$ValueSourceComparator: org.apache.lucene.queries.function.ValueSource this$0> = r1;

        specialinvoke r0.<org.apache.lucene.search.FieldComparator: void <init>()>();

        r0.<org.apache.lucene.queries.function.ValueSource$ValueSourceComparator: java.util.Map fcontext> = r2;

        $r3 = newarray (double)[i0];

        r0.<org.apache.lucene.queries.function.ValueSource$ValueSourceComparator: double[] values> = $r3;

        return;
    }

    public int compare(int, int)
    {
        double[] $r1, $r2;
        org.apache.lucene.queries.function.ValueSource$ValueSourceComparator r0;
        int i0, i1, $i2;
        double $d0, $d1;

        r0 := @this: org.apache.lucene.queries.function.ValueSource$ValueSourceComparator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.apache.lucene.queries.function.ValueSource$ValueSourceComparator: double[] values>;

        $d1 = $r1[i0];

        $r2 = r0.<org.apache.lucene.queries.function.ValueSource$ValueSourceComparator: double[] values>;

        $d0 = $r2[i1];

        $i2 = staticinvoke <java.lang.Double: int compare(double,double)>($d1, $d0);

        return $i2;
    }

    public int compareBottom(int)
    {
        int i0, $i1;
        org.apache.lucene.queries.function.FunctionValues $r1;
        org.apache.lucene.queries.function.ValueSource$ValueSourceComparator r0;
        double $d0, $d1;

        r0 := @this: org.apache.lucene.queries.function.ValueSource$ValueSourceComparator;

        i0 := @parameter0: int;

        $d0 = r0.<org.apache.lucene.queries.function.ValueSource$ValueSourceComparator: double bottom>;

        $r1 = r0.<org.apache.lucene.queries.function.ValueSource$ValueSourceComparator: org.apache.lucene.queries.function.FunctionValues docVals>;

        $d1 = virtualinvoke $r1.<org.apache.lucene.queries.function.FunctionValues: double doubleVal(int)>(i0);

        $i1 = staticinvoke <java.lang.Double: int compare(double,double)>($d0, $d1);

        return $i1;
    }

    public void copy(int, int)
    {
        int i0, i1;
        double[] $r2;
        org.apache.lucene.queries.function.FunctionValues $r1;
        org.apache.lucene.queries.function.ValueSource$ValueSourceComparator r0;
        double $d0;

        r0 := @this: org.apache.lucene.queries.function.ValueSource$ValueSourceComparator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<org.apache.lucene.queries.function.ValueSource$ValueSourceComparator: double[] values>;

        $r1 = r0.<org.apache.lucene.queries.function.ValueSource$ValueSourceComparator: org.apache.lucene.queries.function.FunctionValues docVals>;

        $d0 = virtualinvoke $r1.<org.apache.lucene.queries.function.FunctionValues: double doubleVal(int)>(i1);

        $r2[i0] = $d0;

        return;
    }

    public org.apache.lucene.search.FieldComparator setNextReader(org.apache.lucene.index.AtomicReaderContext) throws java.io.IOException
    {
        org.apache.lucene.queries.function.ValueSource $r3;
        java.util.Map $r2;
        org.apache.lucene.queries.function.FunctionValues $r4;
        org.apache.lucene.queries.function.ValueSource$ValueSourceComparator r0;
        org.apache.lucene.index.AtomicReaderContext r1;

        r0 := @this: org.apache.lucene.queries.function.ValueSource$ValueSourceComparator;

        r1 := @parameter0: org.apache.lucene.index.AtomicReaderContext;

        $r3 = r0.<org.apache.lucene.queries.function.ValueSource$ValueSourceComparator: org.apache.lucene.queries.function.ValueSource this$0>;

        $r2 = r0.<org.apache.lucene.queries.function.ValueSource$ValueSourceComparator: java.util.Map fcontext>;

        $r4 = virtualinvoke $r3.<org.apache.lucene.queries.function.ValueSource: org.apache.lucene.queries.function.FunctionValues getValues(java.util.Map,org.apache.lucene.index.AtomicReaderContext)>($r2, r1);

        r0.<org.apache.lucene.queries.function.ValueSource$ValueSourceComparator: org.apache.lucene.queries.function.FunctionValues docVals> = $r4;

        return r0;
    }

    public void setBottom(int)
    {
        int i0;
        double[] $r1;
        org.apache.lucene.queries.function.ValueSource$ValueSourceComparator r0;
        double $d0;

        r0 := @this: org.apache.lucene.queries.function.ValueSource$ValueSourceComparator;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.queries.function.ValueSource$ValueSourceComparator: double[] values>;

        $d0 = $r1[i0];

        r0.<org.apache.lucene.queries.function.ValueSource$ValueSourceComparator: double bottom> = $d0;

        return;
    }

    public java.lang.Double value(int)
    {
        java.lang.Double $r2;
        int i0;
        double[] $r1;
        org.apache.lucene.queries.function.ValueSource$ValueSourceComparator r0;
        double $d0;

        r0 := @this: org.apache.lucene.queries.function.ValueSource$ValueSourceComparator;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.queries.function.ValueSource$ValueSourceComparator: double[] values>;

        $d0 = $r1[i0];

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r2;
    }

    public int compareDocToValue(int, java.lang.Double)
    {
        java.lang.Double r0;
        int i0, $i1;
        org.apache.lucene.queries.function.FunctionValues $r2;
        org.apache.lucene.queries.function.ValueSource$ValueSourceComparator r1;
        double $d0, $d1;

        r1 := @this: org.apache.lucene.queries.function.ValueSource$ValueSourceComparator;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.Double;

        $d0 = virtualinvoke r0.<java.lang.Double: double doubleValue()>();

        $r2 = r1.<org.apache.lucene.queries.function.ValueSource$ValueSourceComparator: org.apache.lucene.queries.function.FunctionValues docVals>;

        $d1 = virtualinvoke $r2.<org.apache.lucene.queries.function.FunctionValues: double doubleVal(int)>(i0);

        $i1 = staticinvoke <java.lang.Double: int compare(double,double)>($d1, $d0);

        return $i1;
    }

    public volatile int compareDocToValue(int, java.lang.Object) throws java.io.IOException
    {
        java.lang.Double $r2;
        int i0, $i1;
        java.lang.Object r1;
        org.apache.lucene.queries.function.ValueSource$ValueSourceComparator r0;

        r0 := @this: org.apache.lucene.queries.function.ValueSource$ValueSourceComparator;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r2 = (java.lang.Double) r1;

        $i1 = virtualinvoke r0.<org.apache.lucene.queries.function.ValueSource$ValueSourceComparator: int compareDocToValue(int,java.lang.Double)>(i0, $r2);

        return $i1;
    }

    public volatile java.lang.Object value(int)
    {
        int i0;
        org.apache.lucene.queries.function.ValueSource$ValueSourceComparator r0;
        java.lang.Double $r1;

        r0 := @this: org.apache.lucene.queries.function.ValueSource$ValueSourceComparator;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.lucene.queries.function.ValueSource$ValueSourceComparator: java.lang.Double value(int)>(i0);

        return $r1;
    }
}
