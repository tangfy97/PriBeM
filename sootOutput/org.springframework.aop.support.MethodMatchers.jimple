public abstract class org.springframework.aop.support.MethodMatchers extends java.lang.Object
{

    public void <init>()
    {
        org.springframework.aop.support.MethodMatchers r0;

        r0 := @this: org.springframework.aop.support.MethodMatchers;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.springframework.aop.MethodMatcher union(org.springframework.aop.MethodMatcher, org.springframework.aop.MethodMatcher)
    {
        org.springframework.aop.MethodMatcher r1, r2;
        org.springframework.aop.support.MethodMatchers$UnionMethodMatcher $r0;

        r1 := @parameter0: org.springframework.aop.MethodMatcher;

        r2 := @parameter1: org.springframework.aop.MethodMatcher;

        $r0 = new org.springframework.aop.support.MethodMatchers$UnionMethodMatcher;

        specialinvoke $r0.<org.springframework.aop.support.MethodMatchers$UnionMethodMatcher: void <init>(org.springframework.aop.MethodMatcher,org.springframework.aop.MethodMatcher)>(r1, r2);

        return $r0;
    }

    static org.springframework.aop.MethodMatcher union(org.springframework.aop.MethodMatcher, org.springframework.aop.ClassFilter, org.springframework.aop.MethodMatcher, org.springframework.aop.ClassFilter)
    {
        org.springframework.aop.support.MethodMatchers$ClassFilterAwareUnionMethodMatcher $r0;
        org.springframework.aop.ClassFilter r2, r4;
        org.springframework.aop.MethodMatcher r1, r3;

        r1 := @parameter0: org.springframework.aop.MethodMatcher;

        r2 := @parameter1: org.springframework.aop.ClassFilter;

        r3 := @parameter2: org.springframework.aop.MethodMatcher;

        r4 := @parameter3: org.springframework.aop.ClassFilter;

        $r0 = new org.springframework.aop.support.MethodMatchers$ClassFilterAwareUnionMethodMatcher;

        specialinvoke $r0.<org.springframework.aop.support.MethodMatchers$ClassFilterAwareUnionMethodMatcher: void <init>(org.springframework.aop.MethodMatcher,org.springframework.aop.ClassFilter,org.springframework.aop.MethodMatcher,org.springframework.aop.ClassFilter)>(r1, r2, r3, r4);

        return $r0;
    }

    public static org.springframework.aop.MethodMatcher intersection(org.springframework.aop.MethodMatcher, org.springframework.aop.MethodMatcher)
    {
        org.springframework.aop.support.MethodMatchers$IntersectionMethodMatcher $r0;
        org.springframework.aop.MethodMatcher r1, r2;

        r1 := @parameter0: org.springframework.aop.MethodMatcher;

        r2 := @parameter1: org.springframework.aop.MethodMatcher;

        $r0 = new org.springframework.aop.support.MethodMatchers$IntersectionMethodMatcher;

        specialinvoke $r0.<org.springframework.aop.support.MethodMatchers$IntersectionMethodMatcher: void <init>(org.springframework.aop.MethodMatcher,org.springframework.aop.MethodMatcher)>(r1, r2);

        return $r0;
    }

    public static boolean matches(org.springframework.aop.MethodMatcher, java.lang.reflect.Method, java.lang.Class, boolean)
    {
        org.springframework.aop.IntroductionAwareMethodMatcher $r3;
        java.lang.Class r2;
        java.lang.reflect.Method r1;
        org.springframework.aop.MethodMatcher r0;
        boolean $z0, $z1, z2, $z3;

        r0 := @parameter0: org.springframework.aop.MethodMatcher;

        r1 := @parameter1: java.lang.reflect.Method;

        r2 := @parameter2: java.lang.Class;

        z2 := @parameter3: boolean;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "MethodMatcher must not be null");

        $z0 = r0 instanceof org.springframework.aop.IntroductionAwareMethodMatcher;

        if $z0 == 0 goto label1;

        $r3 = (org.springframework.aop.IntroductionAwareMethodMatcher) r0;

        $z3 = interfaceinvoke $r3.<org.springframework.aop.IntroductionAwareMethodMatcher: boolean matches(java.lang.reflect.Method,java.lang.Class,boolean)>(r1, r2, z2);

        if $z3 != 0 goto label2;

     label1:
        $z1 = interfaceinvoke r0.<org.springframework.aop.MethodMatcher: boolean matches(java.lang.reflect.Method,java.lang.Class)>(r1, r2);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        return 1;
    }
}
