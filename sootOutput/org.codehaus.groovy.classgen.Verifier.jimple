public class org.codehaus.groovy.classgen.Verifier extends java.lang.Object implements org.codehaus.groovy.ast.GroovyClassVisitor, groovyjarjarasm.asm.Opcodes
{
    public static final java.lang.String __TIMESTAMP;
    public static final java.lang.String __TIMESTAMP__;
    private static final org.codehaus.groovy.ast.Parameter[] INVOKE_METHOD_PARAMS;
    private static final org.codehaus.groovy.ast.Parameter[] SET_PROPERTY_PARAMS;
    private static final org.codehaus.groovy.ast.Parameter[] GET_PROPERTY_PARAMS;
    private static final org.codehaus.groovy.ast.Parameter[] SET_METACLASS_PARAMS;
    private org.codehaus.groovy.ast.ClassNode classNode;
    private org.codehaus.groovy.ast.MethodNode methodNode;
    static java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter;
    static java.lang.Class class$groovy$lang$MetaClass;
    static java.lang.Class class$groovy$lang$GroovyObjectSupport;
    static java.lang.Class class$groovy$lang$GroovyObject;
    static java.lang.Class class$java$lang$IllegalArgumentException;

    public void <init>()
    {
        org.codehaus.groovy.classgen.Verifier r0;

        r0 := @this: org.codehaus.groovy.classgen.Verifier;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.codehaus.groovy.ast.ClassNode getClassNode()
    {
        org.codehaus.groovy.classgen.Verifier r0;
        org.codehaus.groovy.ast.ClassNode $r1;

        r0 := @this: org.codehaus.groovy.classgen.Verifier;

        $r1 = r0.<org.codehaus.groovy.classgen.Verifier: org.codehaus.groovy.ast.ClassNode classNode>;

        return $r1;
    }

    public org.codehaus.groovy.ast.MethodNode getMethodNode()
    {
        org.codehaus.groovy.ast.MethodNode $r1;
        org.codehaus.groovy.classgen.Verifier r0;

        r0 := @this: org.codehaus.groovy.classgen.Verifier;

        $r1 = r0.<org.codehaus.groovy.classgen.Verifier: org.codehaus.groovy.ast.MethodNode methodNode>;

        return $r1;
    }

    private org.codehaus.groovy.ast.FieldNode setMetaClassFieldIfNotExists(org.codehaus.groovy.ast.ClassNode, org.codehaus.groovy.ast.FieldNode)
    {
        org.codehaus.groovy.ast.expr.VariableExpression $r4;
        org.codehaus.groovy.ast.expr.StaticMethodCallExpression $r1;
        org.codehaus.groovy.ast.ClassNode $r3, r5, $r7;
        org.codehaus.groovy.classgen.Verifier r10;
        org.codehaus.groovy.ast.FieldNode r0, $r9;
        int $i0, $i1;
        java.lang.Class $r2, $r6, $r11, $r12;
        org.codehaus.groovy.ast.PropertyNode $r8;

        r10 := @this: org.codehaus.groovy.classgen.Verifier;

        r5 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        r0 := @parameter1: org.codehaus.groovy.ast.FieldNode;

        if r0 == null goto label1;

        return r0;

     label1:
        $r1 = new org.codehaus.groovy.ast.expr.StaticMethodCallExpression;

        $r2 = <org.codehaus.groovy.classgen.Verifier: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r2 != null goto label2;

        $r11 = staticinvoke <org.codehaus.groovy.classgen.Verifier: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <org.codehaus.groovy.classgen.Verifier: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r11;

        goto label3;

     label2:
        $r11 = <org.codehaus.groovy.classgen.Verifier: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label3:
        $r3 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode make(java.lang.Class)>($r11);

        $r4 = <org.codehaus.groovy.ast.expr.VariableExpression: org.codehaus.groovy.ast.expr.VariableExpression THIS_EXPRESSION>;

        specialinvoke $r1.<org.codehaus.groovy.ast.expr.StaticMethodCallExpression: void <init>(org.codehaus.groovy.ast.ClassNode,java.lang.String,org.codehaus.groovy.ast.expr.Expression)>($r3, "initMetaClass", $r4);

        $r6 = <org.codehaus.groovy.classgen.Verifier: java.lang.Class class$groovy$lang$MetaClass>;

        if $r6 != null goto label4;

        $r12 = staticinvoke <org.codehaus.groovy.classgen.Verifier: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <org.codehaus.groovy.classgen.Verifier: java.lang.Class class$groovy$lang$MetaClass> = $r12;

        goto label5;

     label4:
        $r12 = <org.codehaus.groovy.classgen.Verifier: java.lang.Class class$groovy$lang$MetaClass>;

     label5:
        $r7 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode make(java.lang.Class)>($r12);

        $r8 = virtualinvoke r5.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.PropertyNode addProperty(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.stmt.Statement,org.codehaus.groovy.ast.stmt.Statement)>("metaClass", 1, $r7, $r1, null, null);

        virtualinvoke $r8.<org.codehaus.groovy.ast.PropertyNode: void setSynthetic(boolean)>(1);

        $r9 = virtualinvoke $r8.<org.codehaus.groovy.ast.PropertyNode: org.codehaus.groovy.ast.FieldNode getField()>();

        $i0 = virtualinvoke $r9.<org.codehaus.groovy.ast.FieldNode: int getModifiers()>();

        $i1 = $i0 | 128;

        virtualinvoke $r9.<org.codehaus.groovy.ast.FieldNode: void setModifiers(int)>($i1);

        return $r9;
    }

    private org.codehaus.groovy.ast.FieldNode getMetaClassField(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.ClassNode r0, $r2, $r3, r6;
        org.codehaus.groovy.classgen.Verifier r5;
        org.codehaus.groovy.ast.FieldNode $r1, $r4;
        int $i0;
        boolean $z0;

        r5 := @this: org.codehaus.groovy.classgen.Verifier;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.FieldNode getField(java.lang.String)>("metaClass");

        if $r1 == null goto label1;

        return $r1;

     label1:
        r6 = r0;

     label2:
        if r6 == null goto label5;

        $r2 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode OBJECT_TYPE>;

        if r6 == $r2 goto label5;

        $r3 = virtualinvoke r6.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getSuperClass()>();

        r6 = $r3;

        $r4 = virtualinvoke $r3.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.FieldNode getField(java.lang.String)>("metaClass");

        if $r4 != null goto label3;

        goto label2;

     label3:
        $i0 = virtualinvoke $r4.<org.codehaus.groovy.ast.FieldNode: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPrivate(int)>($i0);

        if $z0 == 0 goto label4;

        goto label2;

     label4:
        return $r4;

     label5:
        return null;
    }

    public void visitClass(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.expr.VariableExpression $r50, $r117, $r118;
        org.codehaus.groovy.syntax.Token $r55, $r59;
        org.codehaus.groovy.ast.expr.BooleanExpression $r104;
        org.codehaus.groovy.ast.VariableScope $r109, $r119;
        org.codehaus.groovy.ast.expr.StaticMethodCallExpression $r101;
        java.util.ArrayList $r97, $r114, $r120, $r123, $r126;
        org.codehaus.groovy.ast.stmt.ExpressionStatement $r106, $r113;
        org.codehaus.groovy.ast.stmt.Statement[] $r64;
        java.lang.StringBuffer $r76, $r77, $r99;
        java.lang.String $r78, $r80, $r87;
        org.codehaus.groovy.ast.ClassNode r1, $r2, $r3, $r7, $r16, $r22, $r31, $r40, $r44, $r49, $r62, $r70, $r72, $r73, $r79, r82;
        org.codehaus.groovy.ast.stmt.ReturnStatement $r108;
        org.codehaus.groovy.ast.stmt.EmptyStatement $r60;
        org.codehaus.groovy.classgen.BytecodeSequence $r116, $r122, $r125, $r128;
        org.codehaus.groovy.ast.expr.ConstantExpression $r56, $r111;
        org.codehaus.groovy.classgen.Verifier$1 $r115;
        org.codehaus.groovy.classgen.Verifier$3 $r124;
        org.codehaus.groovy.classgen.Verifier$2 $r121;
        org.codehaus.groovy.classgen.Verifier$4 $r127;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        java.util.List $r8, $r9, $r95;
        org.codehaus.groovy.ast.stmt.IfStatement $r107;
        org.codehaus.groovy.ast.expr.FieldExpression $r102;
        org.codehaus.groovy.ast.expr.BinaryExpression $r103, $r105;
        org.codehaus.groovy.ast.stmt.BlockStatement $r110;
        org.codehaus.groovy.ast.stmt.Statement r93;
        org.codehaus.groovy.classgen.Verifier r0;
        java.util.HashSet $r98;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i8, $i10, $i12, $i14;
        org.codehaus.groovy.ast.ClassNode[] $r4, $r18, $r24, $r33, $r38, $r67;
        org.codehaus.groovy.ast.expr.ConstructorCallExpression $r112;
        org.codehaus.groovy.ast.Parameter[] $r11, $r12, $r17, $r23, $r32, $r39, $r66, $r88, $r91, $r94;
        org.codehaus.groovy.ast.FieldNode $r34, $r46, $r85, r86;
        org.codehaus.groovy.syntax.RuntimeParserException $r100;
        java.lang.Class $r43, $r48, $r61, $r69, $r71, $r83, $r84, $r89, $r90, $r92;
        org.codehaus.groovy.ast.ConstructorNode $r96, $r129;

        r0 := @this: org.codehaus.groovy.classgen.Verifier;

        r1 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        r0.<org.codehaus.groovy.classgen.Verifier: org.codehaus.groovy.ast.ClassNode classNode> = r1;

        $r2 = r0.<org.codehaus.groovy.classgen.Verifier: org.codehaus.groovy.ast.ClassNode classNode>;

        $i0 = virtualinvoke $r2.<org.codehaus.groovy.ast.ClassNode: int getModifiers()>();

        $i1 = $i0 & 512;

        if $i1 <= 0 goto label01;

        $r96 = new org.codehaus.groovy.ast.ConstructorNode;

        specialinvoke $r96.<org.codehaus.groovy.ast.ConstructorNode: void <init>(int,org.codehaus.groovy.ast.stmt.Statement)>(0, null);

        virtualinvoke r0.<org.codehaus.groovy.classgen.Verifier: void addInitialization(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.ConstructorNode)>(r1, $r96);

        virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: void visitContents(org.codehaus.groovy.ast.GroovyClassVisitor)>(r0);

        return;

     label01:
        $r3 = r0.<org.codehaus.groovy.classgen.Verifier: org.codehaus.groovy.ast.ClassNode classNode>;

        $r4 = virtualinvoke $r3.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode[] getInterfaces()>();

        $r97 = new java.util.ArrayList;

        specialinvoke $r97.<java.util.ArrayList: void <init>()>();

        i6 = 0;

     label02:
        $i2 = lengthof $r4;

        if i6 >= $i2 goto label03;

        r82 = $r4[i6];

        $r80 = virtualinvoke r82.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        interfaceinvoke $r97.<java.util.List: boolean add(java.lang.Object)>($r80);

        i6 = i6 + 1;

        goto label02;

     label03:
        $r98 = new java.util.HashSet;

        specialinvoke $r98.<java.util.HashSet: void <init>(java.util.Collection)>($r97);

        $i3 = interfaceinvoke $r98.<java.util.Set: int size()>();

        $i4 = interfaceinvoke $r97.<java.util.List: int size()>();

        if $i3 == $i4 goto label04;

        $r100 = new org.codehaus.groovy.syntax.RuntimeParserException;

        $r99 = new java.lang.StringBuffer;

        specialinvoke $r99.<java.lang.StringBuffer: void <init>()>();

        $r76 = virtualinvoke $r99.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Duplicate interfaces in implements list: ");

        $r77 = virtualinvoke $r76.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r97);

        $r78 = virtualinvoke $r77.<java.lang.StringBuffer: java.lang.String toString()>();

        $r79 = r0.<org.codehaus.groovy.classgen.Verifier: org.codehaus.groovy.ast.ClassNode classNode>;

        specialinvoke $r100.<org.codehaus.groovy.syntax.RuntimeParserException: void <init>(java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r78, $r79);

        throw $r100;

     label04:
        virtualinvoke r0.<org.codehaus.groovy.classgen.Verifier: void addDefaultParameterMethods(org.codehaus.groovy.ast.ClassNode)>(r1);

        virtualinvoke r0.<org.codehaus.groovy.classgen.Verifier: void addDefaultParameterConstructors(org.codehaus.groovy.ast.ClassNode)>(r1);

        $r7 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode GSTRING_TYPE>;

        $z0 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: boolean isDerivedFrom(org.codehaus.groovy.ast.ClassNode)>($r7);

        if $z0 != 0 goto label07;

        $r71 = <org.codehaus.groovy.classgen.Verifier: java.lang.Class class$groovy$lang$GroovyObjectSupport>;

        if $r71 != null goto label05;

        $r83 = staticinvoke <org.codehaus.groovy.classgen.Verifier: java.lang.Class class$(java.lang.String)>("groovy.lang.GroovyObjectSupport");

        <org.codehaus.groovy.classgen.Verifier: java.lang.Class class$groovy$lang$GroovyObjectSupport> = $r83;

        goto label06;

     label05:
        $r83 = <org.codehaus.groovy.classgen.Verifier: java.lang.Class class$groovy$lang$GroovyObjectSupport>;

     label06:
        $r72 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode make(java.lang.Class)>($r83);

        $z6 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: boolean isDerivedFrom(org.codehaus.groovy.ast.ClassNode)>($r72);

        if $z6 != 0 goto label07;

        $r73 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode METACLASS_TYPE>;

        $z7 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: boolean implementsInterface(org.codehaus.groovy.ast.ClassNode)>($r73);

        if $z7 == 0 goto label08;

     label07:
        $z8 = 1;

        goto label09;

     label08:
        $z8 = 0;

     label09:
        if $z8 != 0 goto label25;

        $z2 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: boolean isDerivedFromGroovyObject()>();

        if $z2 != 0 goto label12;

        $r69 = <org.codehaus.groovy.classgen.Verifier: java.lang.Class class$groovy$lang$GroovyObject>;

        if $r69 != null goto label10;

        $r84 = staticinvoke <org.codehaus.groovy.classgen.Verifier: java.lang.Class class$(java.lang.String)>("groovy.lang.GroovyObject");

        <org.codehaus.groovy.classgen.Verifier: java.lang.Class class$groovy$lang$GroovyObject> = $r84;

        goto label11;

     label10:
        $r84 = <org.codehaus.groovy.classgen.Verifier: java.lang.Class class$groovy$lang$GroovyObject>;

     label11:
        $r70 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode make(java.lang.Class)>($r84);

        virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: void addInterface(org.codehaus.groovy.ast.ClassNode)>($r70);

     label12:
        $r85 = specialinvoke r0.<org.codehaus.groovy.classgen.Verifier: org.codehaus.groovy.ast.FieldNode getMetaClassField(org.codehaus.groovy.ast.ClassNode)>(r1);

        r86 = $r85;

        $r87 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getClassInternalName(org.codehaus.groovy.ast.ClassNode)>(r1);

        $r88 = <org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.Parameter[] EMPTY_ARRAY>;

        $z9 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: boolean hasMethod(java.lang.String,org.codehaus.groovy.ast.Parameter[])>("getMetaClass", $r88);

        if $z9 != 0 goto label17;

        $r46 = specialinvoke r0.<org.codehaus.groovy.classgen.Verifier: org.codehaus.groovy.ast.FieldNode setMetaClassFieldIfNotExists(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.FieldNode)>(r1, $r85);

        r86 = $r46;

        $r101 = new org.codehaus.groovy.ast.expr.StaticMethodCallExpression;

        $r48 = <org.codehaus.groovy.classgen.Verifier: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r48 != null goto label13;

        $r89 = staticinvoke <org.codehaus.groovy.classgen.Verifier: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <org.codehaus.groovy.classgen.Verifier: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r89;

        goto label14;

     label13:
        $r89 = <org.codehaus.groovy.classgen.Verifier: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label14:
        $r49 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode make(java.lang.Class)>($r89);

        $r50 = <org.codehaus.groovy.ast.expr.VariableExpression: org.codehaus.groovy.ast.expr.VariableExpression THIS_EXPRESSION>;

        specialinvoke $r101.<org.codehaus.groovy.ast.expr.StaticMethodCallExpression: void <init>(org.codehaus.groovy.ast.ClassNode,java.lang.String,org.codehaus.groovy.ast.expr.Expression)>($r49, "initMetaClass", $r50);

        $r102 = new org.codehaus.groovy.ast.expr.FieldExpression;

        specialinvoke $r102.<org.codehaus.groovy.ast.expr.FieldExpression: void <init>(org.codehaus.groovy.ast.FieldNode)>($r46);

        $r107 = new org.codehaus.groovy.ast.stmt.IfStatement;

        $r104 = new org.codehaus.groovy.ast.expr.BooleanExpression;

        $r103 = new org.codehaus.groovy.ast.expr.BinaryExpression;

        $i8 = (int) -1;

        $i10 = (int) -1;

        $r55 = staticinvoke <org.codehaus.groovy.syntax.Token: org.codehaus.groovy.syntax.Token newSymbol(int,int,int)>(123, $i8, $i10);

        $r56 = <org.codehaus.groovy.ast.expr.ConstantExpression: org.codehaus.groovy.ast.expr.ConstantExpression NULL>;

        specialinvoke $r103.<org.codehaus.groovy.ast.expr.BinaryExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.syntax.Token,org.codehaus.groovy.ast.expr.Expression)>($r102, $r55, $r56);

        specialinvoke $r104.<org.codehaus.groovy.ast.expr.BooleanExpression: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r103);

        $r106 = new org.codehaus.groovy.ast.stmt.ExpressionStatement;

        $r105 = new org.codehaus.groovy.ast.expr.BinaryExpression;

        $i12 = (int) -1;

        $i14 = (int) -1;

        $r59 = staticinvoke <org.codehaus.groovy.syntax.Token: org.codehaus.groovy.syntax.Token newSymbol(int,int,int)>(100, $i12, $i14);

        specialinvoke $r105.<org.codehaus.groovy.ast.expr.BinaryExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.syntax.Token,org.codehaus.groovy.ast.expr.Expression)>($r102, $r59, $r101);

        specialinvoke $r106.<org.codehaus.groovy.ast.stmt.ExpressionStatement: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r105);

        $r60 = <org.codehaus.groovy.ast.stmt.EmptyStatement: org.codehaus.groovy.ast.stmt.EmptyStatement INSTANCE>;

        specialinvoke $r107.<org.codehaus.groovy.ast.stmt.IfStatement: void <init>(org.codehaus.groovy.ast.expr.BooleanExpression,org.codehaus.groovy.ast.stmt.Statement,org.codehaus.groovy.ast.stmt.Statement)>($r104, $r106, $r60);

        $r61 = <org.codehaus.groovy.classgen.Verifier: java.lang.Class class$groovy$lang$MetaClass>;

        if $r61 != null goto label15;

        $r90 = staticinvoke <org.codehaus.groovy.classgen.Verifier: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <org.codehaus.groovy.classgen.Verifier: java.lang.Class class$groovy$lang$MetaClass> = $r90;

        goto label16;

     label15:
        $r90 = <org.codehaus.groovy.classgen.Verifier: java.lang.Class class$groovy$lang$MetaClass>;

     label16:
        $r62 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode make(java.lang.Class)>($r90);

        $r66 = <org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.Parameter[] EMPTY_ARRAY>;

        $r67 = <org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode[] EMPTY_ARRAY>;

        $r110 = new org.codehaus.groovy.ast.stmt.BlockStatement;

        $r64 = newarray (org.codehaus.groovy.ast.stmt.Statement)[2];

        $r64[0] = $r107;

        $r108 = new org.codehaus.groovy.ast.stmt.ReturnStatement;

        specialinvoke $r108.<org.codehaus.groovy.ast.stmt.ReturnStatement: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r102);

        $r64[1] = $r108;

        $r109 = new org.codehaus.groovy.ast.VariableScope;

        specialinvoke $r109.<org.codehaus.groovy.ast.VariableScope: void <init>()>();

        specialinvoke $r110.<org.codehaus.groovy.ast.stmt.BlockStatement: void <init>(org.codehaus.groovy.ast.stmt.Statement[],org.codehaus.groovy.ast.VariableScope)>($r64, $r109);

        virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.MethodNode addSyntheticMethod(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.Parameter[],org.codehaus.groovy.ast.ClassNode[],org.codehaus.groovy.ast.stmt.Statement)>("getMetaClass", 1, $r62, $r66, $r67, $r110);

     label17:
        $r91 = <org.codehaus.groovy.classgen.Verifier: org.codehaus.groovy.ast.Parameter[] SET_METACLASS_PARAMS>;

        $z10 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: boolean hasMethod(java.lang.String,org.codehaus.groovy.ast.Parameter[])>("setMetaClass", $r91);

        if $z10 != 0 goto label22;

        $r34 = specialinvoke r0.<org.codehaus.groovy.classgen.Verifier: org.codehaus.groovy.ast.FieldNode setMetaClassFieldIfNotExists(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.FieldNode)>(r1, r86);

        $i5 = virtualinvoke $r34.<org.codehaus.groovy.ast.FieldNode: int getModifiers()>();

        $z5 = staticinvoke <java.lang.reflect.Modifier: boolean isFinal(int)>($i5);

        if $z5 == 0 goto label20;

        $r111 = new org.codehaus.groovy.ast.expr.ConstantExpression;

        specialinvoke $r111.<org.codehaus.groovy.ast.expr.ConstantExpression: void <init>(java.lang.Object)>("cannot set read-only meta class");

        $r112 = new org.codehaus.groovy.ast.expr.ConstructorCallExpression;

        $r43 = <org.codehaus.groovy.classgen.Verifier: java.lang.Class class$java$lang$IllegalArgumentException>;

        if $r43 != null goto label18;

        $r92 = staticinvoke <org.codehaus.groovy.classgen.Verifier: java.lang.Class class$(java.lang.String)>("java.lang.IllegalArgumentException");

        <org.codehaus.groovy.classgen.Verifier: java.lang.Class class$java$lang$IllegalArgumentException> = $r92;

        goto label19;

     label18:
        $r92 = <org.codehaus.groovy.classgen.Verifier: java.lang.Class class$java$lang$IllegalArgumentException>;

     label19:
        $r44 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode make(java.lang.Class)>($r92);

        specialinvoke $r112.<org.codehaus.groovy.ast.expr.ConstructorCallExpression: void <init>(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.expr.Expression)>($r44, $r111);

        $r113 = new org.codehaus.groovy.ast.stmt.ExpressionStatement;

        specialinvoke $r113.<org.codehaus.groovy.ast.stmt.ExpressionStatement: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r112);

        r93 = $r113;

        goto label21;

     label20:
        $r114 = new java.util.ArrayList;

        specialinvoke $r114.<java.util.ArrayList: void <init>()>();

        $r115 = new org.codehaus.groovy.classgen.Verifier$1;

        specialinvoke $r115.<org.codehaus.groovy.classgen.Verifier$1: void <init>(org.codehaus.groovy.classgen.Verifier,java.lang.String)>(r0, $r87);

        interfaceinvoke $r114.<java.util.List: boolean add(java.lang.Object)>($r115);

        $r116 = new org.codehaus.groovy.classgen.BytecodeSequence;

        specialinvoke $r116.<org.codehaus.groovy.classgen.BytecodeSequence: void <init>(java.util.List)>($r114);

        r93 = $r116;

     label21:
        $r40 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode VOID_TYPE>;

        $r39 = <org.codehaus.groovy.classgen.Verifier: org.codehaus.groovy.ast.Parameter[] SET_METACLASS_PARAMS>;

        $r38 = <org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode[] EMPTY_ARRAY>;

        virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.MethodNode addSyntheticMethod(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.Parameter[],org.codehaus.groovy.ast.ClassNode[],org.codehaus.groovy.ast.stmt.Statement)>("setMetaClass", 1, $r40, $r39, $r38, r93);

     label22:
        $r94 = <org.codehaus.groovy.classgen.Verifier: org.codehaus.groovy.ast.Parameter[] INVOKE_METHOD_PARAMS>;

        $z11 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: boolean hasMethod(java.lang.String,org.codehaus.groovy.ast.Parameter[])>("invokeMethod", $r94);

        if $z11 != 0 goto label23;

        $r117 = new org.codehaus.groovy.ast.expr.VariableExpression;

        specialinvoke $r117.<org.codehaus.groovy.ast.expr.VariableExpression: void <init>(java.lang.String)>("method");

        $r118 = new org.codehaus.groovy.ast.expr.VariableExpression;

        specialinvoke $r118.<org.codehaus.groovy.ast.expr.VariableExpression: void <init>(java.lang.String)>("arguments");

        $r119 = new org.codehaus.groovy.ast.VariableScope;

        specialinvoke $r119.<org.codehaus.groovy.ast.VariableScope: void <init>()>();

        virtualinvoke $r119.<org.codehaus.groovy.ast.VariableScope: void putReferencedLocalVariable(org.codehaus.groovy.ast.Variable)>($r117);

        virtualinvoke $r119.<org.codehaus.groovy.ast.VariableScope: void putReferencedLocalVariable(org.codehaus.groovy.ast.Variable)>($r118);

        $r120 = new java.util.ArrayList;

        specialinvoke $r120.<java.util.ArrayList: void <init>()>();

        $r121 = new org.codehaus.groovy.classgen.Verifier$2;

        specialinvoke $r121.<org.codehaus.groovy.classgen.Verifier$2: void <init>(org.codehaus.groovy.classgen.Verifier,java.lang.String)>(r0, $r87);

        interfaceinvoke $r120.<java.util.List: boolean add(java.lang.Object)>($r121);

        $r31 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode OBJECT_TYPE>;

        $r32 = <org.codehaus.groovy.classgen.Verifier: org.codehaus.groovy.ast.Parameter[] INVOKE_METHOD_PARAMS>;

        $r33 = <org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode[] EMPTY_ARRAY>;

        $r122 = new org.codehaus.groovy.classgen.BytecodeSequence;

        specialinvoke $r122.<org.codehaus.groovy.classgen.BytecodeSequence: void <init>(java.util.List)>($r120);

        virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.MethodNode addSyntheticMethod(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.Parameter[],org.codehaus.groovy.ast.ClassNode[],org.codehaus.groovy.ast.stmt.Statement)>("invokeMethod", 1, $r31, $r32, $r33, $r122);

     label23:
        $r11 = <org.codehaus.groovy.classgen.Verifier: org.codehaus.groovy.ast.Parameter[] GET_PROPERTY_PARAMS>;

        $z3 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: boolean hasMethod(java.lang.String,org.codehaus.groovy.ast.Parameter[])>("getProperty", $r11);

        if $z3 != 0 goto label24;

        $r123 = new java.util.ArrayList;

        specialinvoke $r123.<java.util.ArrayList: void <init>()>();

        $r124 = new org.codehaus.groovy.classgen.Verifier$3;

        specialinvoke $r124.<org.codehaus.groovy.classgen.Verifier$3: void <init>(org.codehaus.groovy.classgen.Verifier,java.lang.String)>(r0, $r87);

        interfaceinvoke $r123.<java.util.List: boolean add(java.lang.Object)>($r124);

        $r22 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode OBJECT_TYPE>;

        $r23 = <org.codehaus.groovy.classgen.Verifier: org.codehaus.groovy.ast.Parameter[] GET_PROPERTY_PARAMS>;

        $r24 = <org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode[] EMPTY_ARRAY>;

        $r125 = new org.codehaus.groovy.classgen.BytecodeSequence;

        specialinvoke $r125.<org.codehaus.groovy.classgen.BytecodeSequence: void <init>(java.util.List)>($r123);

        virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.MethodNode addSyntheticMethod(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.Parameter[],org.codehaus.groovy.ast.ClassNode[],org.codehaus.groovy.ast.stmt.Statement)>("getProperty", 1, $r22, $r23, $r24, $r125);

     label24:
        $r12 = <org.codehaus.groovy.classgen.Verifier: org.codehaus.groovy.ast.Parameter[] SET_PROPERTY_PARAMS>;

        $z4 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: boolean hasMethod(java.lang.String,org.codehaus.groovy.ast.Parameter[])>("setProperty", $r12);

        if $z4 != 0 goto label25;

        $r126 = new java.util.ArrayList;

        specialinvoke $r126.<java.util.ArrayList: void <init>()>();

        $r127 = new org.codehaus.groovy.classgen.Verifier$4;

        specialinvoke $r127.<org.codehaus.groovy.classgen.Verifier$4: void <init>(org.codehaus.groovy.classgen.Verifier,java.lang.String)>(r0, $r87);

        interfaceinvoke $r126.<java.util.List: boolean add(java.lang.Object)>($r127);

        $r16 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode VOID_TYPE>;

        $r17 = <org.codehaus.groovy.classgen.Verifier: org.codehaus.groovy.ast.Parameter[] SET_PROPERTY_PARAMS>;

        $r18 = <org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode[] EMPTY_ARRAY>;

        $r128 = new org.codehaus.groovy.classgen.BytecodeSequence;

        specialinvoke $r128.<org.codehaus.groovy.classgen.BytecodeSequence: void <init>(java.util.List)>($r126);

        virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.MethodNode addSyntheticMethod(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.Parameter[],org.codehaus.groovy.ast.ClassNode[],org.codehaus.groovy.ast.stmt.Statement)>("setProperty", 1, $r16, $r17, $r18, $r128);

     label25:
        $r95 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: java.util.List getDeclaredConstructors()>();

        $z12 = interfaceinvoke $r95.<java.util.List: boolean isEmpty()>();

        if $z12 == 0 goto label26;

        $r129 = new org.codehaus.groovy.ast.ConstructorNode;

        specialinvoke $r129.<org.codehaus.groovy.ast.ConstructorNode: void <init>(int,org.codehaus.groovy.ast.stmt.Statement)>(1, null);

        virtualinvoke $r129.<org.codehaus.groovy.ast.ConstructorNode: void setSynthetic(boolean)>(1);

        virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: void addConstructor(org.codehaus.groovy.ast.ConstructorNode)>($r129);

     label26:
        $z1 = r1 instanceof org.codehaus.groovy.ast.InnerClassNode;

        if $z1 != 0 goto label27;

        virtualinvoke r0.<org.codehaus.groovy.classgen.Verifier: void addTimeStamp(org.codehaus.groovy.ast.ClassNode)>(r1);

     label27:
        virtualinvoke r0.<org.codehaus.groovy.classgen.Verifier: void addInitialization(org.codehaus.groovy.ast.ClassNode)>(r1);

        $r8 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: java.util.List getObjectInitializerStatements()>();

        specialinvoke r0.<org.codehaus.groovy.classgen.Verifier: void checkReturnInObjectInitializer(java.util.List)>($r8);

        $r9 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: java.util.List getObjectInitializerStatements()>();

        interfaceinvoke $r9.<java.util.List: void clear()>();

        virtualinvoke r0.<org.codehaus.groovy.classgen.Verifier: void addCovariantMethods(org.codehaus.groovy.ast.ClassNode)>(r1);

        virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: void visitContents(org.codehaus.groovy.ast.GroovyClassVisitor)>(r0);

        return;
    }

    protected void addTimeStamp(org.codehaus.groovy.ast.ClassNode)
    {
        long $l0, $l1;
        org.codehaus.groovy.ast.expr.ConstantExpression $r2, $r11;
        org.codehaus.groovy.classgen.Verifier r14;
        java.lang.Long $r3, $r12;
        java.lang.StringBuffer $r6, $r7, $r9;
        java.lang.String $r8, $r10;
        org.codehaus.groovy.ast.ClassNode r1, $r4, $r13;
        org.codehaus.groovy.ast.FieldNode $r0, $r5;

        r14 := @this: org.codehaus.groovy.classgen.Verifier;

        r1 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $r0 = new org.codehaus.groovy.ast.FieldNode;

        $r4 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode Long_TYPE>;

        $r2 = new org.codehaus.groovy.ast.expr.ConstantExpression;

        $r3 = new java.lang.Long;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        specialinvoke $r3.<java.lang.Long: void <init>(long)>($l0);

        specialinvoke $r2.<org.codehaus.groovy.ast.expr.ConstantExpression: void <init>(java.lang.Object)>($r3);

        specialinvoke $r0.<org.codehaus.groovy.ast.FieldNode: void <init>(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.expr.Expression)>("__timeStamp", 9, $r4, r1, $r2);

        virtualinvoke $r0.<org.codehaus.groovy.ast.FieldNode: void setSynthetic(boolean)>(1);

        virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: void addField(org.codehaus.groovy.ast.FieldNode)>($r0);

        $r5 = new org.codehaus.groovy.ast.FieldNode;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("__timeStamp__239_neverHappen");

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l1);

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        $r13 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode Long_TYPE>;

        $r11 = new org.codehaus.groovy.ast.expr.ConstantExpression;

        $r12 = new java.lang.Long;

        specialinvoke $r12.<java.lang.Long: void <init>(long)>(0L);

        specialinvoke $r11.<org.codehaus.groovy.ast.expr.ConstantExpression: void <init>(java.lang.Object)>($r12);

        specialinvoke $r5.<org.codehaus.groovy.ast.FieldNode: void <init>(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.expr.Expression)>($r10, 9, $r13, r1, $r11);

        virtualinvoke $r5.<org.codehaus.groovy.ast.FieldNode: void setSynthetic(boolean)>(1);

        virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: void addField(org.codehaus.groovy.ast.FieldNode)>($r5);

        return;
    }

    private void checkReturnInObjectInitializer(java.util.List)
    {
        org.codehaus.groovy.ast.stmt.Statement r5;
        java.util.List r2;
        java.util.Iterator $r3;
        java.lang.Object $r4;
        org.codehaus.groovy.classgen.Verifier$5 $r0;
        org.codehaus.groovy.classgen.Verifier r1;
        boolean $z0;

        r1 := @this: org.codehaus.groovy.classgen.Verifier;

        r2 := @parameter0: java.util.List;

        $r0 = new org.codehaus.groovy.classgen.Verifier$5;

        specialinvoke $r0.<org.codehaus.groovy.classgen.Verifier$5: void <init>(org.codehaus.groovy.classgen.Verifier)>(r1);

        $r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.codehaus.groovy.ast.stmt.Statement) $r4;

        virtualinvoke r5.<org.codehaus.groovy.ast.stmt.Statement: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>($r0);

        goto label1;

     label2:
        return;
    }

    public void visitConstructor(org.codehaus.groovy.ast.ConstructorNode)
    {
        org.codehaus.groovy.ast.stmt.Statement $r3;
        org.codehaus.groovy.ast.ConstructorNode r2;
        org.codehaus.groovy.classgen.Verifier r1;
        org.codehaus.groovy.classgen.Verifier$6 $r0;

        r1 := @this: org.codehaus.groovy.classgen.Verifier;

        r2 := @parameter0: org.codehaus.groovy.ast.ConstructorNode;

        $r0 = new org.codehaus.groovy.classgen.Verifier$6;

        specialinvoke $r0.<org.codehaus.groovy.classgen.Verifier$6: void <init>(org.codehaus.groovy.classgen.Verifier)>(r1);

        $r3 = virtualinvoke r2.<org.codehaus.groovy.ast.ConstructorNode: org.codehaus.groovy.ast.stmt.Statement getCode()>();

        if $r3 != null goto label1;

        return;

     label1:
        virtualinvoke $r3.<org.codehaus.groovy.ast.stmt.Statement: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>($r0);

        return;
    }

    public void visitMethod(org.codehaus.groovy.ast.MethodNode)
    {
        org.codehaus.groovy.ast.expr.ConstantExpression $r18, $r25;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        org.codehaus.groovy.classgen.VerifierCodeVisitor $r3;
        java.util.List $r13, $r14, $r16, $r20;
        org.codehaus.groovy.ast.stmt.BlockStatement $r10, $r19, r31, r32;
        org.codehaus.groovy.ast.stmt.Statement $r2, $r11, r23, $r35;
        org.codehaus.groovy.ast.VariableScope $r21;
        org.codehaus.groovy.classgen.Verifier r0;
        java.util.ArrayList $r15;
        org.codehaus.groovy.ast.MethodNode r1;
        org.codehaus.groovy.ast.stmt.ExpressionStatement r26, r30;
        int $i0, $i1, i2;
        org.codehaus.groovy.ast.expr.Expression $r28;
        java.lang.String $r33;
        org.codehaus.groovy.ast.Parameter r34;
        org.codehaus.groovy.ast.ClassNode $r5, $r6, $r7, $r8, $r9;
        org.codehaus.groovy.ast.stmt.ReturnStatement $r12, $r17, $r24, $r27, $r29;
        org.codehaus.groovy.ast.Parameter[] $r4;
        java.lang.Object $r22;

        r0 := @this: org.codehaus.groovy.classgen.Verifier;

        r1 := @parameter0: org.codehaus.groovy.ast.MethodNode;

        r0.<org.codehaus.groovy.classgen.Verifier: org.codehaus.groovy.ast.MethodNode methodNode> = r1;

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.stmt.Statement getCode()>();

        $z0 = virtualinvoke r1.<org.codehaus.groovy.ast.MethodNode: boolean isVoidMethod()>();

        if $z0 != 0 goto label06;

        $z4 = $r2 instanceof org.codehaus.groovy.ast.stmt.ExpressionStatement;

        if $z4 == 0 goto label01;

        r30 = (org.codehaus.groovy.ast.stmt.ExpressionStatement) $r2;

        $r28 = virtualinvoke r30.<org.codehaus.groovy.ast.stmt.ExpressionStatement: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        $r29 = new org.codehaus.groovy.ast.stmt.ReturnStatement;

        specialinvoke $r29.<org.codehaus.groovy.ast.stmt.ReturnStatement: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r28);

        virtualinvoke $r29.<org.codehaus.groovy.ast.stmt.ReturnStatement: void setSourcePosition(org.codehaus.groovy.ast.ASTNode)>($r28);

        virtualinvoke r1.<org.codehaus.groovy.ast.MethodNode: void setCode(org.codehaus.groovy.ast.stmt.Statement)>($r29);

        goto label09;

     label01:
        $z5 = $r2 instanceof org.codehaus.groovy.ast.stmt.BlockStatement;

        if $z5 == 0 goto label09;

        r31 = (org.codehaus.groovy.ast.stmt.BlockStatement) $r2;

        $r15 = new java.util.ArrayList;

        $r16 = virtualinvoke r31.<org.codehaus.groovy.ast.stmt.BlockStatement: java.util.List getStatements()>();

        specialinvoke $r15.<java.util.ArrayList: void <init>(java.util.Collection)>($r16);

        $z6 = interfaceinvoke $r15.<java.util.List: boolean isEmpty()>();

        if $z6 != 0 goto label04;

        $i1 = interfaceinvoke $r15.<java.util.List: int size()>();

        i2 = $i1 - 1;

        $r22 = interfaceinvoke $r15.<java.util.List: java.lang.Object get(int)>(i2);

        r23 = (org.codehaus.groovy.ast.stmt.Statement) $r22;

        $z7 = r23 instanceof org.codehaus.groovy.ast.stmt.ExpressionStatement;

        if $z7 == 0 goto label02;

        r26 = (org.codehaus.groovy.ast.stmt.ExpressionStatement) r23;

        $r27 = new org.codehaus.groovy.ast.stmt.ReturnStatement;

        specialinvoke $r27.<org.codehaus.groovy.ast.stmt.ReturnStatement: void <init>(org.codehaus.groovy.ast.stmt.ExpressionStatement)>(r26);

        virtualinvoke $r27.<org.codehaus.groovy.ast.stmt.ReturnStatement: void setSourcePosition(org.codehaus.groovy.ast.ASTNode)>(r26);

        interfaceinvoke $r15.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i2, $r27);

        goto label03;

     label02:
        $z8 = r23 instanceof org.codehaus.groovy.ast.stmt.ReturnStatement;

        if $z8 != 0 goto label03;

        $r24 = new org.codehaus.groovy.ast.stmt.ReturnStatement;

        $r25 = <org.codehaus.groovy.ast.expr.ConstantExpression: org.codehaus.groovy.ast.expr.ConstantExpression NULL>;

        specialinvoke $r24.<org.codehaus.groovy.ast.stmt.ReturnStatement: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r25);

        interfaceinvoke $r15.<java.util.List: boolean add(java.lang.Object)>($r24);

     label03:
        goto label05;

     label04:
        $r17 = new org.codehaus.groovy.ast.stmt.ReturnStatement;

        $r18 = <org.codehaus.groovy.ast.expr.ConstantExpression: org.codehaus.groovy.ast.expr.ConstantExpression NULL>;

        specialinvoke $r17.<org.codehaus.groovy.ast.stmt.ReturnStatement: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r18);

        interfaceinvoke $r15.<java.util.List: boolean add(java.lang.Object)>($r17);

     label05:
        $r19 = new org.codehaus.groovy.ast.stmt.BlockStatement;

        $r20 = virtualinvoke r0.<org.codehaus.groovy.classgen.Verifier: java.util.List filterStatements(java.util.List)>($r15);

        $r21 = virtualinvoke r31.<org.codehaus.groovy.ast.stmt.BlockStatement: org.codehaus.groovy.ast.VariableScope getVariableScope()>();

        specialinvoke $r19.<org.codehaus.groovy.ast.stmt.BlockStatement: void <init>(java.util.List,org.codehaus.groovy.ast.VariableScope)>($r20, $r21);

        virtualinvoke r1.<org.codehaus.groovy.ast.MethodNode: void setCode(org.codehaus.groovy.ast.stmt.Statement)>($r19);

        goto label09;

     label06:
        $z1 = virtualinvoke r1.<org.codehaus.groovy.ast.MethodNode: boolean isAbstract()>();

        if $z1 != 0 goto label09;

        $r10 = new org.codehaus.groovy.ast.stmt.BlockStatement;

        specialinvoke $r10.<org.codehaus.groovy.ast.stmt.BlockStatement: void <init>()>();

        $z3 = $r2 instanceof org.codehaus.groovy.ast.stmt.BlockStatement;

        if $z3 == 0 goto label07;

        r32 = (org.codehaus.groovy.ast.stmt.BlockStatement) $r2;

        $r13 = virtualinvoke r32.<org.codehaus.groovy.ast.stmt.BlockStatement: java.util.List getStatements()>();

        $r14 = virtualinvoke r0.<org.codehaus.groovy.classgen.Verifier: java.util.List filterStatements(java.util.List)>($r13);

        virtualinvoke $r10.<org.codehaus.groovy.ast.stmt.BlockStatement: void addStatements(java.util.List)>($r14);

        goto label08;

     label07:
        $r11 = virtualinvoke r0.<org.codehaus.groovy.classgen.Verifier: org.codehaus.groovy.ast.stmt.Statement filterStatement(org.codehaus.groovy.ast.stmt.Statement)>($r2);

        virtualinvoke $r10.<org.codehaus.groovy.ast.stmt.BlockStatement: void addStatement(org.codehaus.groovy.ast.stmt.Statement)>($r11);

     label08:
        $r12 = <org.codehaus.groovy.ast.stmt.ReturnStatement: org.codehaus.groovy.ast.stmt.ReturnStatement RETURN_NULL_OR_VOID>;

        virtualinvoke $r10.<org.codehaus.groovy.ast.stmt.BlockStatement: void addStatement(org.codehaus.groovy.ast.stmt.Statement)>($r12);

        virtualinvoke $r10.<org.codehaus.groovy.ast.stmt.BlockStatement: void setSourcePosition(org.codehaus.groovy.ast.ASTNode)>($r2);

        virtualinvoke r1.<org.codehaus.groovy.ast.MethodNode: void setCode(org.codehaus.groovy.ast.stmt.Statement)>($r10);

     label09:
        $r33 = virtualinvoke r1.<org.codehaus.groovy.ast.MethodNode: java.lang.String getName()>();

        $z9 = virtualinvoke $r33.<java.lang.String: boolean equals(java.lang.Object)>("main");

        if $z9 == 0 goto label11;

        $z2 = virtualinvoke r1.<org.codehaus.groovy.ast.MethodNode: boolean isStatic()>();

        if $z2 == 0 goto label11;

        $r4 = virtualinvoke r1.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.Parameter[] getParameters()>();

        $i0 = lengthof $r4;

        if $i0 != 1 goto label11;

        r34 = $r4[0];

        $r5 = virtualinvoke r34.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.ClassNode getType()>();

        if $r5 == null goto label10;

        $r8 = virtualinvoke r34.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.ClassNode getType()>();

        $r9 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode OBJECT_TYPE>;

        if $r8 != $r9 goto label11;

     label10:
        $r6 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode STRING_TYPE>;

        $r7 = virtualinvoke $r6.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode makeArray()>();

        virtualinvoke r34.<org.codehaus.groovy.ast.Parameter: void setType(org.codehaus.groovy.ast.ClassNode)>($r7);

     label11:
        $r35 = virtualinvoke r1.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.stmt.Statement getCode()>();

        if $r35 == null goto label12;

        $r3 = new org.codehaus.groovy.classgen.VerifierCodeVisitor;

        specialinvoke $r3.<org.codehaus.groovy.classgen.VerifierCodeVisitor: void <init>(org.codehaus.groovy.classgen.Verifier)>(r0);

        virtualinvoke $r35.<org.codehaus.groovy.ast.stmt.Statement: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>($r3);

     label12:
        return;
    }

    public void visitField(org.codehaus.groovy.ast.FieldNode)
    {
        org.codehaus.groovy.classgen.Verifier r0;
        org.codehaus.groovy.ast.FieldNode r1;

        r0 := @this: org.codehaus.groovy.classgen.Verifier;

        r1 := @parameter0: org.codehaus.groovy.ast.FieldNode;

        return;
    }

    private boolean methodNeedsReplacement(org.codehaus.groovy.ast.MethodNode)
    {
        org.codehaus.groovy.ast.MethodNode r0;
        org.codehaus.groovy.ast.ClassNode $r1, $r3;
        int $i0, $i1;
        org.codehaus.groovy.classgen.Verifier r2;

        r2 := @this: org.codehaus.groovy.classgen.Verifier;

        r0 := @parameter0: org.codehaus.groovy.ast.MethodNode;

        if r0 != null goto label1;

        return 1;

     label1:
        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.ClassNode getDeclaringClass()>();

        $r3 = virtualinvoke r2.<org.codehaus.groovy.classgen.Verifier: org.codehaus.groovy.ast.ClassNode getClassNode()>();

        if $r1 != $r3 goto label2;

        return 0;

     label2:
        $i0 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: int getModifiers()>();

        $i1 = $i0 & 16;

        if $i1 == 0 goto label3;

        return 0;

     label3:
        return 1;
    }

    public void visitProperty(org.codehaus.groovy.ast.PropertyNode)
    {
        org.codehaus.groovy.ast.PropertyNode r0;
        boolean $z0, $z1, $z2, $z3;
        org.codehaus.groovy.ast.stmt.Statement $r13, r50, $r52, r53;
        org.codehaus.groovy.classgen.Verifier r20;
        org.codehaus.groovy.ast.MethodNode $r17, $r21, $r32, $r39, $r41, r51;
        java.lang.StringBuffer $r3, $r4, $r6, $r8, $r9, $r11, $r27, $r28, $r30, $r44, $r45, $r47;
        int $i0, $i1, $i2, $i3, $i4;
        org.codehaus.groovy.ast.ClassNode[] $r18, $r23, $r34;
        java.lang.String $r1, $r5, $r7, $r10, $r12, $r29, $r31, $r46, $r48;
        org.codehaus.groovy.ast.Parameter $r15;
        org.codehaus.groovy.ast.ClassNode $r16, $r19, $r22, $r25, $r26, $r33, $r36, $r37, $r38, $r40, $r42, $r43, $r49;
        org.codehaus.groovy.ast.Parameter[] $r14, $r24, $r35;
        org.codehaus.groovy.ast.FieldNode $r2;

        r20 := @this: org.codehaus.groovy.classgen.Verifier;

        r0 := @parameter0: org.codehaus.groovy.ast.PropertyNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.PropertyNode: java.lang.String getName()>();

        $r2 = virtualinvoke r0.<org.codehaus.groovy.ast.PropertyNode: org.codehaus.groovy.ast.FieldNode getField()>();

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("get");

        $r5 = staticinvoke <org.codehaus.groovy.classgen.Verifier: java.lang.String capitalize(java.lang.String)>($r1);

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("set");

        $r10 = staticinvoke <org.codehaus.groovy.classgen.Verifier: java.lang.String capitalize(java.lang.String)>($r1);

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        $r13 = virtualinvoke r0.<org.codehaus.groovy.ast.PropertyNode: org.codehaus.groovy.ast.stmt.Statement getGetterBlock()>();

        r50 = $r13;

        if $r13 != null goto label2;

        $r40 = r20.<org.codehaus.groovy.classgen.Verifier: org.codehaus.groovy.ast.ClassNode classNode>;

        $r41 = virtualinvoke $r40.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.MethodNode getGetterMethod(java.lang.String)>($r7);

        r51 = $r41;

        if $r41 != null goto label1;

        $r42 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode boolean_TYPE>;

        $r43 = virtualinvoke r0.<org.codehaus.groovy.ast.PropertyNode: org.codehaus.groovy.ast.ClassNode getType()>();

        if $r42 != $r43 goto label1;

        $r44 = new java.lang.StringBuffer;

        specialinvoke $r44.<java.lang.StringBuffer: void <init>()>();

        $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("is");

        $r46 = staticinvoke <org.codehaus.groovy.classgen.Verifier: java.lang.String capitalize(java.lang.String)>($r1);

        $r47 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r46);

        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.String toString()>();

        $r49 = r20.<org.codehaus.groovy.classgen.Verifier: org.codehaus.groovy.ast.ClassNode classNode>;

        r51 = virtualinvoke $r49.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.MethodNode getGetterMethod(java.lang.String)>($r48);

     label1:
        $z3 = virtualinvoke r0.<org.codehaus.groovy.ast.PropertyNode: boolean isPrivate()>();

        if $z3 != 0 goto label2;

        $z2 = specialinvoke r20.<org.codehaus.groovy.classgen.Verifier: boolean methodNeedsReplacement(org.codehaus.groovy.ast.MethodNode)>(r51);

        if $z2 == 0 goto label2;

        r50 = virtualinvoke r20.<org.codehaus.groovy.classgen.Verifier: org.codehaus.groovy.ast.stmt.Statement createGetterBlock(org.codehaus.groovy.ast.PropertyNode,org.codehaus.groovy.ast.FieldNode)>(r0, $r2);

     label2:
        $r52 = virtualinvoke r0.<org.codehaus.groovy.ast.PropertyNode: org.codehaus.groovy.ast.stmt.Statement getSetterBlock()>();

        r53 = $r52;

        if $r52 != null goto label3;

        $r38 = r20.<org.codehaus.groovy.classgen.Verifier: org.codehaus.groovy.ast.ClassNode classNode>;

        $r39 = virtualinvoke $r38.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.MethodNode getSetterMethod(java.lang.String)>($r12);

        $z0 = virtualinvoke r0.<org.codehaus.groovy.ast.PropertyNode: boolean isPrivate()>();

        if $z0 != 0 goto label3;

        $i3 = virtualinvoke r0.<org.codehaus.groovy.ast.PropertyNode: int getModifiers()>();

        $i4 = $i3 & 16;

        if $i4 != 0 goto label3;

        $z1 = specialinvoke r20.<org.codehaus.groovy.classgen.Verifier: boolean methodNeedsReplacement(org.codehaus.groovy.ast.MethodNode)>($r39);

        if $z1 == 0 goto label3;

        r53 = virtualinvoke r20.<org.codehaus.groovy.classgen.Verifier: org.codehaus.groovy.ast.stmt.Statement createSetterBlock(org.codehaus.groovy.ast.PropertyNode,org.codehaus.groovy.ast.FieldNode)>(r0, $r2);

     label3:
        if r50 == null goto label5;

        $r21 = new org.codehaus.groovy.ast.MethodNode;

        $i1 = virtualinvoke r0.<org.codehaus.groovy.ast.PropertyNode: int getModifiers()>();

        $r22 = virtualinvoke r0.<org.codehaus.groovy.ast.PropertyNode: org.codehaus.groovy.ast.ClassNode getType()>();

        $r24 = <org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.Parameter[] EMPTY_ARRAY>;

        $r23 = <org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode[] EMPTY_ARRAY>;

        specialinvoke $r21.<org.codehaus.groovy.ast.MethodNode: void <init>(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.Parameter[],org.codehaus.groovy.ast.ClassNode[],org.codehaus.groovy.ast.stmt.Statement)>($r7, $i1, $r22, $r24, $r23, r50);

        virtualinvoke $r21.<org.codehaus.groovy.ast.MethodNode: void setSynthetic(boolean)>(1);

        virtualinvoke r20.<org.codehaus.groovy.classgen.Verifier: void addPropertyMethod(org.codehaus.groovy.ast.MethodNode)>($r21);

        virtualinvoke r20.<org.codehaus.groovy.classgen.Verifier: void visitMethod(org.codehaus.groovy.ast.MethodNode)>($r21);

        $r25 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode boolean_TYPE>;

        $r26 = virtualinvoke r0.<org.codehaus.groovy.ast.PropertyNode: org.codehaus.groovy.ast.ClassNode getType()>();

        if $r25 == $r26 goto label4;

        $r36 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode Boolean_TYPE>;

        $r37 = virtualinvoke r0.<org.codehaus.groovy.ast.PropertyNode: org.codehaus.groovy.ast.ClassNode getType()>();

        if $r36 != $r37 goto label5;

     label4:
        $r27 = new java.lang.StringBuffer;

        specialinvoke $r27.<java.lang.StringBuffer: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("is");

        $r29 = staticinvoke <org.codehaus.groovy.classgen.Verifier: java.lang.String capitalize(java.lang.String)>($r1);

        $r30 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.String toString()>();

        $r32 = new org.codehaus.groovy.ast.MethodNode;

        $i2 = virtualinvoke r0.<org.codehaus.groovy.ast.PropertyNode: int getModifiers()>();

        $r33 = virtualinvoke r0.<org.codehaus.groovy.ast.PropertyNode: org.codehaus.groovy.ast.ClassNode getType()>();

        $r35 = <org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.Parameter[] EMPTY_ARRAY>;

        $r34 = <org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode[] EMPTY_ARRAY>;

        specialinvoke $r32.<org.codehaus.groovy.ast.MethodNode: void <init>(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.Parameter[],org.codehaus.groovy.ast.ClassNode[],org.codehaus.groovy.ast.stmt.Statement)>($r31, $i2, $r33, $r35, $r34, r50);

        virtualinvoke $r32.<org.codehaus.groovy.ast.MethodNode: void setSynthetic(boolean)>(1);

        virtualinvoke r20.<org.codehaus.groovy.classgen.Verifier: void addPropertyMethod(org.codehaus.groovy.ast.MethodNode)>($r32);

        virtualinvoke r20.<org.codehaus.groovy.classgen.Verifier: void visitMethod(org.codehaus.groovy.ast.MethodNode)>($r32);

     label5:
        if r53 == null goto label6;

        $r14 = newarray (org.codehaus.groovy.ast.Parameter)[1];

        $r15 = new org.codehaus.groovy.ast.Parameter;

        $r16 = virtualinvoke r0.<org.codehaus.groovy.ast.PropertyNode: org.codehaus.groovy.ast.ClassNode getType()>();

        specialinvoke $r15.<org.codehaus.groovy.ast.Parameter: void <init>(org.codehaus.groovy.ast.ClassNode,java.lang.String)>($r16, "value");

        $r14[0] = $r15;

        $r17 = new org.codehaus.groovy.ast.MethodNode;

        $i0 = virtualinvoke r0.<org.codehaus.groovy.ast.PropertyNode: int getModifiers()>();

        $r19 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode VOID_TYPE>;

        $r18 = <org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode[] EMPTY_ARRAY>;

        specialinvoke $r17.<org.codehaus.groovy.ast.MethodNode: void <init>(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.Parameter[],org.codehaus.groovy.ast.ClassNode[],org.codehaus.groovy.ast.stmt.Statement)>($r12, $i0, $r19, $r14, $r18, r53);

        virtualinvoke $r17.<org.codehaus.groovy.ast.MethodNode: void setSynthetic(boolean)>(1);

        virtualinvoke r20.<org.codehaus.groovy.classgen.Verifier: void addPropertyMethod(org.codehaus.groovy.ast.MethodNode)>($r17);

        virtualinvoke r20.<org.codehaus.groovy.classgen.Verifier: void visitMethod(org.codehaus.groovy.ast.MethodNode)>($r17);

     label6:
        return;
    }

    protected void addPropertyMethod(org.codehaus.groovy.ast.MethodNode)
    {
        org.codehaus.groovy.ast.MethodNode r1;
        org.codehaus.groovy.classgen.Verifier r0;
        org.codehaus.groovy.ast.ClassNode $r2;

        r0 := @this: org.codehaus.groovy.classgen.Verifier;

        r1 := @parameter0: org.codehaus.groovy.ast.MethodNode;

        $r2 = r0.<org.codehaus.groovy.classgen.Verifier: org.codehaus.groovy.ast.ClassNode classNode>;

        virtualinvoke $r2.<org.codehaus.groovy.ast.ClassNode: void addMethod(org.codehaus.groovy.ast.MethodNode)>(r1);

        return;
    }

    protected void addDefaultParameterMethods(org.codehaus.groovy.ast.ClassNode)
    {
        java.util.List $r2;
        org.codehaus.groovy.ast.ClassNode r1;
        org.codehaus.groovy.classgen.Verifier r3;
        org.codehaus.groovy.classgen.Verifier$7 $r4;
        java.util.ArrayList $r0;

        r3 := @this: org.codehaus.groovy.classgen.Verifier;

        r1 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $r0 = new java.util.ArrayList;

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: java.util.List getMethods()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        $r4 = new org.codehaus.groovy.classgen.Verifier$7;

        specialinvoke $r4.<org.codehaus.groovy.classgen.Verifier$7: void <init>(org.codehaus.groovy.classgen.Verifier,org.codehaus.groovy.ast.ClassNode)>(r3, r1);

        virtualinvoke r3.<org.codehaus.groovy.classgen.Verifier: void addDefaultParameters(java.util.List,org.codehaus.groovy.classgen.Verifier$DefaultArgsAction)>($r0, $r4);

        return;
    }

    protected void addDefaultParameterConstructors(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.classgen.Verifier$8 $r4;
        java.util.List $r2;
        org.codehaus.groovy.ast.ClassNode r1;
        org.codehaus.groovy.classgen.Verifier r3;
        java.util.ArrayList $r0;

        r3 := @this: org.codehaus.groovy.classgen.Verifier;

        r1 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $r0 = new java.util.ArrayList;

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: java.util.List getDeclaredConstructors()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        $r4 = new org.codehaus.groovy.classgen.Verifier$8;

        specialinvoke $r4.<org.codehaus.groovy.classgen.Verifier$8: void <init>(org.codehaus.groovy.classgen.Verifier,org.codehaus.groovy.ast.ClassNode)>(r3, r1);

        virtualinvoke r3.<org.codehaus.groovy.classgen.Verifier: void addDefaultParameters(java.util.List,org.codehaus.groovy.classgen.Verifier$DefaultArgsAction)>($r0, $r4);

        return;
    }

    protected void addDefaultParameters(java.util.List, org.codehaus.groovy.classgen.Verifier$DefaultArgsAction)
    {
        java.lang.Integer $r29;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.codehaus.groovy.ast.expr.VariableExpression $r31, $r32;
        org.codehaus.groovy.ast.expr.ArgumentListExpression $r30;
        org.codehaus.groovy.classgen.Verifier$DefaultArgsAction r8;
        java.util.List r0;
        org.codehaus.groovy.classgen.Verifier r24;
        java.util.ArrayList $r28;
        org.codehaus.groovy.ast.MethodNode r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11, i12, i13, i14, $i16;
        java.lang.String $r12, $r17;
        org.codehaus.groovy.ast.expr.Expression $r21, $r23;
        org.codehaus.groovy.ast.Parameter $r6, $r9, $r11, $r13, $r14, $r16, $r18, $r19, $r20, r25, $r27;
        java.util.Iterator $r1;
        org.codehaus.groovy.ast.Parameter[] $r4, r26;
        java.lang.Object $r2;

        r24 := @this: org.codehaus.groovy.classgen.Verifier;

        r0 := @parameter0: java.util.List;

        r8 := @parameter1: org.codehaus.groovy.classgen.Verifier$DefaultArgsAction;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label14;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.codehaus.groovy.ast.MethodNode) $r2;

        $z1 = virtualinvoke r3.<org.codehaus.groovy.ast.MethodNode: boolean hasDefaultValue()>();

        if $z1 == 0 goto label13;

        $r4 = virtualinvoke r3.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.Parameter[] getParameters()>();

        i8 = 0;

        $r28 = new java.util.ArrayList;

        specialinvoke $r28.<java.util.ArrayList: void <init>()>();

        i0 = lengthof $r4;

        i9 = i0 - 1;

     label02:
        if i9 < 0 goto label04;

        r25 = $r4[i9];

        if r25 == null goto label03;

        $z4 = virtualinvoke r25.<org.codehaus.groovy.ast.Parameter: boolean hasInitialExpression()>();

        if $z4 == 0 goto label03;

        $r29 = new java.lang.Integer;

        specialinvoke $r29.<java.lang.Integer: void <init>(int)>(i9);

        interfaceinvoke $r28.<java.util.List: boolean add(java.lang.Object)>($r29);

        $r23 = virtualinvoke r25.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.expr.Expression getInitialExpression()>();

        interfaceinvoke $r28.<java.util.List: boolean add(java.lang.Object)>($r23);

        i8 = i8 + 1;

     label03:
        $i16 = (int) -1;

        i9 = i9 + $i16;

        goto label02;

     label04:
        i10 = 1;

     label05:
        if i10 > i8 goto label11;

        $i2 = lengthof $r4;

        $i3 = $i2 - i10;

        r26 = newarray (org.codehaus.groovy.ast.Parameter)[$i3];

        $r30 = new org.codehaus.groovy.ast.expr.ArgumentListExpression;

        specialinvoke $r30.<org.codehaus.groovy.ast.expr.ArgumentListExpression: void <init>()>();

        i11 = 0;

        i12 = 1;

        i13 = 0;

     label06:
        $i4 = lengthof $r4;

        if i13 >= $i4 goto label10;

        $i5 = i8 - i10;

        if i12 <= $i5 goto label07;

        $r18 = $r4[i13];

        if $r18 == null goto label07;

        $r19 = $r4[i13];

        $z3 = virtualinvoke $r19.<org.codehaus.groovy.ast.Parameter: boolean hasInitialExpression()>();

        if $z3 == 0 goto label07;

        $r20 = $r4[i13];

        $r21 = virtualinvoke $r20.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.expr.Expression getInitialExpression()>();

        virtualinvoke $r30.<org.codehaus.groovy.ast.expr.ArgumentListExpression: org.codehaus.groovy.ast.expr.TupleExpression addExpression(org.codehaus.groovy.ast.expr.Expression)>($r21);

        i12 = i12 + 1;

        goto label09;

     label07:
        $r27 = $r4[i13];

        if $r27 == null goto label08;

        $r13 = $r4[i13];

        $z2 = virtualinvoke $r13.<org.codehaus.groovy.ast.Parameter: boolean hasInitialExpression()>();

        if $z2 == 0 goto label08;

        $i7 = i11;

        i11 = i11 + 1;

        $r14 = $r4[i13];

        r26[$i7] = $r14;

        $r31 = new org.codehaus.groovy.ast.expr.VariableExpression;

        $r16 = $r4[i13];

        $r17 = virtualinvoke $r16.<org.codehaus.groovy.ast.Parameter: java.lang.String getName()>();

        specialinvoke $r31.<org.codehaus.groovy.ast.expr.VariableExpression: void <init>(java.lang.String)>($r17);

        virtualinvoke $r30.<org.codehaus.groovy.ast.expr.ArgumentListExpression: org.codehaus.groovy.ast.expr.TupleExpression addExpression(org.codehaus.groovy.ast.expr.Expression)>($r31);

        i12 = i12 + 1;

        goto label09;

     label08:
        $i6 = i11;

        i11 = i11 + 1;

        $r9 = $r4[i13];

        r26[$i6] = $r9;

        $r32 = new org.codehaus.groovy.ast.expr.VariableExpression;

        $r11 = $r4[i13];

        $r12 = virtualinvoke $r11.<org.codehaus.groovy.ast.Parameter: java.lang.String getName()>();

        specialinvoke $r32.<org.codehaus.groovy.ast.expr.VariableExpression: void <init>(java.lang.String)>($r12);

        virtualinvoke $r30.<org.codehaus.groovy.ast.expr.ArgumentListExpression: org.codehaus.groovy.ast.expr.TupleExpression addExpression(org.codehaus.groovy.ast.expr.Expression)>($r32);

     label09:
        i13 = i13 + 1;

        goto label06;

     label10:
        interfaceinvoke r8.<org.codehaus.groovy.classgen.Verifier$DefaultArgsAction: void call(org.codehaus.groovy.ast.expr.ArgumentListExpression,org.codehaus.groovy.ast.Parameter[],org.codehaus.groovy.ast.MethodNode)>($r30, r26, r3);

        i10 = i10 + 1;

        goto label05;

     label11:
        i14 = 0;

     label12:
        $i1 = lengthof $r4;

        if i14 >= $i1 goto label13;

        $r6 = $r4[i14];

        virtualinvoke $r6.<org.codehaus.groovy.ast.Parameter: void setInitialExpression(org.codehaus.groovy.ast.expr.Expression)>(null);

        i14 = i14 + 1;

        goto label12;

     label13:
        goto label01;

     label14:
        return;
    }

    protected void addClosureCode(org.codehaus.groovy.ast.InnerClassNode)
    {
        org.codehaus.groovy.classgen.Verifier r0;
        org.codehaus.groovy.ast.InnerClassNode r1;

        r0 := @this: org.codehaus.groovy.classgen.Verifier;

        r1 := @parameter0: org.codehaus.groovy.ast.InnerClassNode;

        return;
    }

    protected void addInitialization(org.codehaus.groovy.ast.ClassNode)
    {
        java.util.List $r1;
        java.util.Iterator $r2;
        org.codehaus.groovy.ast.ClassNode r0;
        java.lang.Object $r4;
        org.codehaus.groovy.ast.ConstructorNode $r5;
        org.codehaus.groovy.classgen.Verifier r3;
        boolean $z0;

        r3 := @this: org.codehaus.groovy.classgen.Verifier;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.util.List getDeclaredConstructors()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (org.codehaus.groovy.ast.ConstructorNode) $r4;

        virtualinvoke r3.<org.codehaus.groovy.classgen.Verifier: void addInitialization(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.ConstructorNode)>(r0, $r5);

        goto label1;

     label2:
        return;
    }

    protected void addInitialization(org.codehaus.groovy.ast.ClassNode, org.codehaus.groovy.ast.ConstructorNode)
    {
        org.codehaus.groovy.ast.PropertyNode r23;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.util.List $r9, $r11, $r14, $r17, r25;
        org.codehaus.groovy.ast.stmt.BlockStatement $r13, r24, $r26;
        org.codehaus.groovy.ast.stmt.Statement $r1, $r12;
        org.codehaus.groovy.ast.VariableScope $r27;
        org.codehaus.groovy.classgen.Verifier r2;
        java.util.ArrayList $r4, $r5, $r7;
        java.util.HashSet $r8;
        java.lang.String $r22;
        org.codehaus.groovy.ast.expr.ConstructorCallExpression $r3;
        java.util.Iterator $r10, $r18;
        org.codehaus.groovy.ast.ClassNode r6;
        org.codehaus.groovy.ast.FieldNode $r16, $r20, $r21;
        java.lang.Object $r15, $r19;
        org.codehaus.groovy.ast.ConstructorNode r0;

        r2 := @this: org.codehaus.groovy.classgen.Verifier;

        r6 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        r0 := @parameter1: org.codehaus.groovy.ast.ConstructorNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ConstructorNode: org.codehaus.groovy.ast.stmt.Statement getFirstStatement()>();

        $r3 = specialinvoke r2.<org.codehaus.groovy.classgen.Verifier: org.codehaus.groovy.ast.expr.ConstructorCallExpression getFirstIfSpecialConstructorCall(org.codehaus.groovy.ast.stmt.Statement)>($r1);

        if $r3 == null goto label01;

        $z7 = virtualinvoke $r3.<org.codehaus.groovy.ast.expr.ConstructorCallExpression: boolean isThisCall()>();

        if $z7 == 0 goto label01;

        return;

     label01:
        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $z0 = specialinvoke r2.<org.codehaus.groovy.classgen.Verifier: boolean isEnum(org.codehaus.groovy.ast.ClassNode)>(r6);

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        $r8 = new java.util.HashSet;

        specialinvoke $r8.<java.util.HashSet: void <init>()>();

        if $z0 == 0 goto label04;

        $r17 = virtualinvoke r6.<org.codehaus.groovy.ast.ClassNode: java.util.List getProperties()>();

        $r18 = interfaceinvoke $r17.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z4 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label04;

        $r19 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        r23 = (org.codehaus.groovy.ast.PropertyNode) $r19;

        $z5 = virtualinvoke r23.<org.codehaus.groovy.ast.PropertyNode: boolean isSynthetic()>();

        if $z5 != 0 goto label03;

        $r20 = virtualinvoke r23.<org.codehaus.groovy.ast.PropertyNode: org.codehaus.groovy.ast.FieldNode getField()>();

        $z6 = virtualinvoke $r20.<org.codehaus.groovy.ast.FieldNode: boolean isStatic()>();

        if $z6 == 0 goto label03;

        $r21 = virtualinvoke r23.<org.codehaus.groovy.ast.PropertyNode: org.codehaus.groovy.ast.FieldNode getField()>();

        $r22 = virtualinvoke $r21.<org.codehaus.groovy.ast.FieldNode: java.lang.String getName()>();

        interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>($r22);

     label03:
        goto label02;

     label04:
        $r9 = virtualinvoke r6.<org.codehaus.groovy.ast.ClassNode: java.util.List getFields()>();

        $r10 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z8 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label06;

        $r15 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        $r16 = (org.codehaus.groovy.ast.FieldNode) $r15;

        virtualinvoke r2.<org.codehaus.groovy.classgen.Verifier: void addFieldInitialization(java.util.List,java.util.List,org.codehaus.groovy.ast.FieldNode,boolean,java.util.List,java.util.Set)>($r4, $r5, $r16, $z0, $r7, $r8);

        goto label05;

     label06:
        $r11 = virtualinvoke r6.<org.codehaus.groovy.ast.ClassNode: java.util.List getObjectInitializerStatements()>();

        interfaceinvoke $r4.<java.util.List: boolean addAll(java.util.Collection)>($r11);

        $z1 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label11;

        $r12 = virtualinvoke r0.<org.codehaus.groovy.ast.ConstructorNode: org.codehaus.groovy.ast.stmt.Statement getCode()>();

        $r13 = new org.codehaus.groovy.ast.stmt.BlockStatement;

        specialinvoke $r13.<org.codehaus.groovy.ast.stmt.BlockStatement: void <init>()>();

        r24 = $r13;

        $r14 = virtualinvoke $r13.<org.codehaus.groovy.ast.stmt.BlockStatement: java.util.List getStatements()>();

        r25 = $r14;

        $z3 = $r12 instanceof org.codehaus.groovy.ast.stmt.BlockStatement;

        if $z3 == 0 goto label07;

        r24 = (org.codehaus.groovy.ast.stmt.BlockStatement) $r12;

        r25 = virtualinvoke r24.<org.codehaus.groovy.ast.stmt.BlockStatement: java.util.List getStatements()>();

        goto label08;

     label07:
        if $r12 == null goto label08;

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>($r12);

     label08:
        $z9 = interfaceinvoke r25.<java.util.List: boolean isEmpty()>();

        if $z9 != 0 goto label10;

        if $r3 == null goto label09;

        interfaceinvoke r25.<java.util.List: java.lang.Object remove(int)>(0);

        interfaceinvoke $r4.<java.util.List: void add(int,java.lang.Object)>(0, $r1);

     label09:
        interfaceinvoke $r4.<java.util.List: boolean addAll(java.util.Collection)>(r25);

     label10:
        $r26 = new org.codehaus.groovy.ast.stmt.BlockStatement;

        $r27 = virtualinvoke r24.<org.codehaus.groovy.ast.stmt.BlockStatement: org.codehaus.groovy.ast.VariableScope getVariableScope()>();

        specialinvoke $r26.<org.codehaus.groovy.ast.stmt.BlockStatement: void <init>(java.util.List,org.codehaus.groovy.ast.VariableScope)>($r4, $r27);

        virtualinvoke $r26.<org.codehaus.groovy.ast.stmt.BlockStatement: void setSourcePosition(org.codehaus.groovy.ast.ASTNode)>(r24);

        virtualinvoke r0.<org.codehaus.groovy.ast.ConstructorNode: void setCode(org.codehaus.groovy.ast.stmt.Statement)>($r26);

     label11:
        $z10 = interfaceinvoke $r5.<java.util.List: boolean isEmpty()>();

        if $z10 != 0 goto label13;

        if $z0 == 0 goto label12;

        interfaceinvoke $r5.<java.util.List: boolean removeAll(java.util.Collection)>($r7);

        virtualinvoke r6.<org.codehaus.groovy.ast.ClassNode: void addStaticInitializerStatements(java.util.List,boolean)>($r5, 1);

        $z2 = interfaceinvoke $r7.<java.util.List: boolean isEmpty()>();

        if $z2 != 0 goto label13;

        virtualinvoke r6.<org.codehaus.groovy.ast.ClassNode: void addStaticInitializerStatements(java.util.List,boolean)>($r7, 0);

        goto label13;

     label12:
        virtualinvoke r6.<org.codehaus.groovy.ast.ClassNode: void addStaticInitializerStatements(java.util.List,boolean)>($r5, 1);

     label13:
        return;
    }

    private boolean isEnum(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.ClassNode r0;
        int $i0, $i1;
        org.codehaus.groovy.classgen.Verifier r1;
        boolean $z0;

        r1 := @this: org.codehaus.groovy.classgen.Verifier;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $i0 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: int getModifiers()>();

        $i1 = $i0 & 16384;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private org.codehaus.groovy.ast.expr.ConstructorCallExpression getFirstIfSpecialConstructorCall(org.codehaus.groovy.ast.stmt.Statement)
    {
        org.codehaus.groovy.ast.stmt.Statement r0;
        org.codehaus.groovy.ast.expr.ConstructorCallExpression r3;
        org.codehaus.groovy.classgen.Verifier r4;
        org.codehaus.groovy.ast.stmt.ExpressionStatement $r1;
        org.codehaus.groovy.ast.expr.Expression $r2;
        boolean $z0, $z1, $z2;

        r4 := @this: org.codehaus.groovy.classgen.Verifier;

        r0 := @parameter0: org.codehaus.groovy.ast.stmt.Statement;

        if r0 == null goto label1;

        $z0 = r0 instanceof org.codehaus.groovy.ast.stmt.ExpressionStatement;

        if $z0 != 0 goto label2;

     label1:
        return null;

     label2:
        $r1 = (org.codehaus.groovy.ast.stmt.ExpressionStatement) r0;

        $r2 = virtualinvoke $r1.<org.codehaus.groovy.ast.stmt.ExpressionStatement: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        $z1 = $r2 instanceof org.codehaus.groovy.ast.expr.ConstructorCallExpression;

        if $z1 != 0 goto label3;

        return null;

     label3:
        r3 = (org.codehaus.groovy.ast.expr.ConstructorCallExpression) $r2;

        $z2 = virtualinvoke r3.<org.codehaus.groovy.ast.expr.ConstructorCallExpression: boolean isSpecialCall()>();

        if $z2 == 0 goto label4;

        return r3;

     label4:
        return null;
    }

    protected void addFieldInitialization(java.util.List, java.util.List, org.codehaus.groovy.ast.FieldNode, boolean, java.util.List, java.util.Set)
    {
        org.codehaus.groovy.classgen.Verifier r11;
        org.codehaus.groovy.ast.stmt.ExpressionStatement $r2;
        int $i0, $i1;
        org.codehaus.groovy.ast.expr.Expression $r1;
        java.lang.String $r9;
        boolean $z0, z1, $z2;
        java.util.Set r8;
        org.codehaus.groovy.syntax.Token $r5;
        java.util.List r6, r7, r10;
        org.codehaus.groovy.ast.expr.BinaryExpression $r3;
        org.codehaus.groovy.ast.expr.FieldExpression $r4;
        org.codehaus.groovy.ast.FieldNode r0;

        r11 := @this: org.codehaus.groovy.classgen.Verifier;

        r6 := @parameter0: java.util.List;

        r7 := @parameter1: java.util.List;

        r0 := @parameter2: org.codehaus.groovy.ast.FieldNode;

        z1 := @parameter3: boolean;

        r10 := @parameter4: java.util.List;

        r8 := @parameter5: java.util.Set;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.FieldNode: org.codehaus.groovy.ast.expr.Expression getInitialExpression()>();

        if $r1 == null goto label2;

        $r2 = new org.codehaus.groovy.ast.stmt.ExpressionStatement;

        $r3 = new org.codehaus.groovy.ast.expr.BinaryExpression;

        $r4 = new org.codehaus.groovy.ast.expr.FieldExpression;

        specialinvoke $r4.<org.codehaus.groovy.ast.expr.FieldExpression: void <init>(org.codehaus.groovy.ast.FieldNode)>(r0);

        $i0 = virtualinvoke r0.<org.codehaus.groovy.ast.FieldNode: int getLineNumber()>();

        $i1 = virtualinvoke r0.<org.codehaus.groovy.ast.FieldNode: int getColumnNumber()>();

        $r5 = staticinvoke <org.codehaus.groovy.syntax.Token: org.codehaus.groovy.syntax.Token newSymbol(int,int,int)>(100, $i0, $i1);

        specialinvoke $r3.<org.codehaus.groovy.ast.expr.BinaryExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.syntax.Token,org.codehaus.groovy.ast.expr.Expression)>($r4, $r5, $r1);

        specialinvoke $r2.<org.codehaus.groovy.ast.stmt.ExpressionStatement: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r3);

        $z0 = virtualinvoke r0.<org.codehaus.groovy.ast.FieldNode: boolean isStatic()>();

        if $z0 == 0 goto label1;

        interfaceinvoke r7.<java.util.List: boolean add(java.lang.Object)>($r2);

        if z1 == 0 goto label2;

        $r9 = virtualinvoke r0.<org.codehaus.groovy.ast.FieldNode: java.lang.String getName()>();

        $z2 = interfaceinvoke r8.<java.util.Set: boolean contains(java.lang.Object)>($r9);

        if $z2 == 0 goto label2;

        interfaceinvoke r10.<java.util.List: boolean add(java.lang.Object)>($r2);

        goto label2;

     label1:
        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r2);

     label2:
        return;
    }

    public static java.lang.String capitalize(java.lang.String)
    {
        java.lang.StringBuffer $r0, $r4, $r6;
        int $i0;
        java.lang.String r1, $r2, $r3, $r5, $r7;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, 1);

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String toUpperCase()>();

        $r4 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $r5 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(1, $i0);

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;
    }

    protected org.codehaus.groovy.ast.stmt.Statement createGetterBlock(org.codehaus.groovy.ast.PropertyNode, org.codehaus.groovy.ast.FieldNode)
    {
        org.codehaus.groovy.ast.expr.FieldExpression $r0;
        org.codehaus.groovy.ast.FieldNode r1;
        org.codehaus.groovy.ast.stmt.ReturnStatement $r2;
        org.codehaus.groovy.ast.PropertyNode r4;
        org.codehaus.groovy.classgen.Verifier r3;

        r3 := @this: org.codehaus.groovy.classgen.Verifier;

        r4 := @parameter0: org.codehaus.groovy.ast.PropertyNode;

        r1 := @parameter1: org.codehaus.groovy.ast.FieldNode;

        $r0 = new org.codehaus.groovy.ast.expr.FieldExpression;

        specialinvoke $r0.<org.codehaus.groovy.ast.expr.FieldExpression: void <init>(org.codehaus.groovy.ast.FieldNode)>(r1);

        $r2 = new org.codehaus.groovy.ast.stmt.ReturnStatement;

        specialinvoke $r2.<org.codehaus.groovy.ast.stmt.ReturnStatement: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r0);

        return $r2;
    }

    protected org.codehaus.groovy.ast.stmt.Statement createSetterBlock(org.codehaus.groovy.ast.PropertyNode, org.codehaus.groovy.ast.FieldNode)
    {
        org.codehaus.groovy.ast.expr.VariableExpression $r5;
        org.codehaus.groovy.syntax.Token $r4;
        org.codehaus.groovy.classgen.Verifier r6;
        org.codehaus.groovy.ast.expr.FieldExpression $r0;
        org.codehaus.groovy.ast.expr.BinaryExpression $r3;
        org.codehaus.groovy.ast.stmt.ExpressionStatement $r2;
        org.codehaus.groovy.ast.FieldNode r1;
        org.codehaus.groovy.ast.PropertyNode r7;

        r6 := @this: org.codehaus.groovy.classgen.Verifier;

        r7 := @parameter0: org.codehaus.groovy.ast.PropertyNode;

        r1 := @parameter1: org.codehaus.groovy.ast.FieldNode;

        $r0 = new org.codehaus.groovy.ast.expr.FieldExpression;

        specialinvoke $r0.<org.codehaus.groovy.ast.expr.FieldExpression: void <init>(org.codehaus.groovy.ast.FieldNode)>(r1);

        $r2 = new org.codehaus.groovy.ast.stmt.ExpressionStatement;

        $r3 = new org.codehaus.groovy.ast.expr.BinaryExpression;

        $r4 = staticinvoke <org.codehaus.groovy.syntax.Token: org.codehaus.groovy.syntax.Token newSymbol(int,int,int)>(100, 0, 0);

        $r5 = new org.codehaus.groovy.ast.expr.VariableExpression;

        specialinvoke $r5.<org.codehaus.groovy.ast.expr.VariableExpression: void <init>(java.lang.String)>("value");

        specialinvoke $r3.<org.codehaus.groovy.ast.expr.BinaryExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.syntax.Token,org.codehaus.groovy.ast.expr.Expression)>($r0, $r4, $r5);

        specialinvoke $r2.<org.codehaus.groovy.ast.stmt.ExpressionStatement: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r3);

        return $r2;
    }

    protected java.util.List filterStatements(java.util.List)
    {
        org.codehaus.groovy.ast.stmt.Statement $r5, $r6;
        java.util.Iterator $r2;
        org.codehaus.groovy.classgen.Verifier r3;
        java.util.ArrayList $r0;
        java.util.List r1;
        int $i0;
        java.lang.Object $r4;
        boolean $z0;

        r3 := @this: org.codehaus.groovy.classgen.Verifier;

        r1 := @parameter0: java.util.List;

        $r0 = new java.util.ArrayList;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0);

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (org.codehaus.groovy.ast.stmt.Statement) $r4;

        $r6 = virtualinvoke r3.<org.codehaus.groovy.classgen.Verifier: org.codehaus.groovy.ast.stmt.Statement filterStatement(org.codehaus.groovy.ast.stmt.Statement)>($r5);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r6);

        goto label1;

     label2:
        return $r0;
    }

    protected org.codehaus.groovy.ast.stmt.Statement filterStatement(org.codehaus.groovy.ast.stmt.Statement)
    {
        org.codehaus.groovy.ast.stmt.Statement r0, $r4;
        org.codehaus.groovy.classgen.Verifier r5;
        org.codehaus.groovy.ast.expr.ClosureExpression r3;
        org.codehaus.groovy.ast.stmt.ExpressionStatement r1;
        org.codehaus.groovy.ast.expr.Expression $r2;
        boolean $z0, $z1, $z2;

        r5 := @this: org.codehaus.groovy.classgen.Verifier;

        r0 := @parameter0: org.codehaus.groovy.ast.stmt.Statement;

        $z0 = r0 instanceof org.codehaus.groovy.ast.stmt.ExpressionStatement;

        if $z0 == 0 goto label1;

        r1 = (org.codehaus.groovy.ast.stmt.ExpressionStatement) r0;

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.stmt.ExpressionStatement: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        $z1 = $r2 instanceof org.codehaus.groovy.ast.expr.ClosureExpression;

        if $z1 == 0 goto label1;

        r3 = (org.codehaus.groovy.ast.expr.ClosureExpression) $r2;

        $z2 = virtualinvoke r3.<org.codehaus.groovy.ast.expr.ClosureExpression: boolean isParameterSpecified()>();

        if $z2 != 0 goto label1;

        $r4 = virtualinvoke r3.<org.codehaus.groovy.ast.expr.ClosureExpression: org.codehaus.groovy.ast.stmt.Statement getCode()>();

        return $r4;

     label1:
        return r0;
    }

    public void visitGenericType(org.codehaus.groovy.ast.GenericsType)
    {
        org.codehaus.groovy.ast.GenericsType r1;
        org.codehaus.groovy.classgen.Verifier r0;

        r0 := @this: org.codehaus.groovy.classgen.Verifier;

        r1 := @parameter0: org.codehaus.groovy.ast.GenericsType;

        return;
    }

    public static long getTimestamp(java.lang.Class)
    {
        groovy.lang.GroovyClassLoader$InnerLoader r11;
        long $l3, $l4;
        java.lang.Long $r8;
        int $i0, $i1, $i2, i5;
        java.lang.String $r5, $r6, $r7;
        boolean $z0, $z1, $z2;
        java.lang.NumberFormatException $r10;
        java.lang.reflect.Field $r3, $r4;
        java.lang.reflect.Field[] $r2;
        java.lang.Class r0;
        java.lang.ClassLoader $r1, $r9;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $z0 = $r1 instanceof groovy.lang.GroovyClassLoader$InnerLoader;

        if $z0 == 0 goto label1;

        $r9 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        r11 = (groovy.lang.GroovyClassLoader$InnerLoader) $r9;

        $l4 = virtualinvoke r11.<groovy.lang.GroovyClassLoader$InnerLoader: long getTimeStamp()>();

        return $l4;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field[] getFields()>();

        i5 = 0;

     label2:
        $i0 = lengthof $r2;

        if i5 == $i0 goto label7;

        $r3 = $r2[i5];

        $i1 = virtualinvoke $r3.<java.lang.reflect.Field: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i1);

        if $z1 == 0 goto label6;

        $r4 = $r2[i5];

        $r5 = virtualinvoke $r4.<java.lang.reflect.Field: java.lang.String getName()>();

        $z2 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("__timeStamp__239_neverHappen");

        if $z2 == 0 goto label6;

     label3:
        $r6 = "__timeStamp__239_neverHappen";

        $i2 = virtualinvoke $r6.<java.lang.String: int length()>();

        $r7 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int)>($i2);

        $r8 = staticinvoke <java.lang.Long: java.lang.Long decode(java.lang.String)>($r7);

        $l3 = virtualinvoke $r8.<java.lang.Long: long longValue()>();

     label4:
        return $l3;

     label5:
        $r10 := @caughtexception;

        return 9223372036854775807L;

     label6:
        i5 = i5 + 1;

        goto label2;

     label7:
        return 9223372036854775807L;

        catch java.lang.NumberFormatException from label3 to label4 with label5;
    }

    protected void addCovariantMethods(org.codehaus.groovy.ast.ClassNode)
    {
        java.util.Map $r24;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.Set $r10;
        java.util.List $r6;
        java.util.HashMap $r0, $r1, $r2, $r9;
        org.codehaus.groovy.classgen.Verifier r8;
        java.util.ArrayList $r5;
        org.codehaus.groovy.ast.MethodNode r14, r17, r26, r27;
        org.codehaus.groovy.ast.ClassNode[] $r4;
        int $i0, $i1, i2;
        java.lang.String $r21, $r23;
        java.util.Map$Entry r28;
        java.util.Iterator $r7, $r11, $r19;
        org.codehaus.groovy.ast.ClassNode r3, $r18, r25;
        java.lang.Object $r12, $r13, $r15, $r16, $r20, $r22;

        r8 := @this: org.codehaus.groovy.classgen.Verifier;

        r3 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        $r4 = virtualinvoke r3.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode[] getInterfaces()>();

        i2 = 0;

     label01:
        $i0 = lengthof $r4;

        if i2 >= $i0 goto label02;

        r25 = $r4[i2];

        $r24 = virtualinvoke r25.<org.codehaus.groovy.ast.ClassNode: java.util.Map getDeclaredMethodsMap()>();

        interfaceinvoke $r2.<java.util.Map: void putAll(java.util.Map)>($r24);

        i2 = i2 + 1;

        goto label01;

     label02:
        $r5 = new java.util.ArrayList;

        $r6 = virtualinvoke r3.<org.codehaus.groovy.ast.ClassNode: java.util.List getMethods()>();

        specialinvoke $r5.<java.util.ArrayList: void <init>(java.util.Collection)>($r6);

        $r7 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label06;

        $r22 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r26 = (org.codehaus.groovy.ast.MethodNode) $r22;

        $r23 = virtualinvoke r26.<org.codehaus.groovy.ast.MethodNode: java.lang.String getTypeDescriptor()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r23);

        $z3 = virtualinvoke r26.<org.codehaus.groovy.ast.MethodNode: boolean isStatic()>();

        if $z3 != 0 goto label04;

        $z4 = virtualinvoke r26.<org.codehaus.groovy.ast.MethodNode: boolean isPublic()>();

        if $z4 != 0 goto label05;

        $z5 = virtualinvoke r26.<org.codehaus.groovy.ast.MethodNode: boolean isProtected()>();

        if $z5 != 0 goto label05;

     label04:
        interfaceinvoke $r7.<java.util.Iterator: void remove()>();

     label05:
        goto label03;

     label06:
        specialinvoke r8.<org.codehaus.groovy.classgen.Verifier: void addCovariantMethods(org.codehaus.groovy.ast.ClassNode,java.util.List,java.util.Map,java.util.Map,java.util.Map)>(r3, $r5, $r2, $r0, $r1);

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        $i1 = interfaceinvoke $r0.<java.util.Map: int size()>();

        if $i1 <= 0 goto label08;

        $r19 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z2 = interfaceinvoke $r19.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label08;

        $r20 = interfaceinvoke $r19.<java.util.Iterator: java.lang.Object next()>();

        r27 = (org.codehaus.groovy.ast.MethodNode) $r20;

        $r21 = virtualinvoke r27.<org.codehaus.groovy.ast.MethodNode: java.lang.String getTypeDescriptor()>();

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r21, r27);

        goto label07;

     label08:
        $r10 = interfaceinvoke $r0.<java.util.Map: java.util.Set entrySet()>();

        $r11 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label09:
        $z6 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label11;

        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r28 = (java.util.Map$Entry) $r12;

        $r13 = interfaceinvoke r28.<java.util.Map$Entry: java.lang.Object getValue()>();

        r14 = (org.codehaus.groovy.ast.MethodNode) $r13;

        $r15 = interfaceinvoke r28.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r16 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>($r15);

        r17 = (org.codehaus.groovy.ast.MethodNode) $r16;

        if r17 == null goto label10;

        $r18 = virtualinvoke r17.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.ClassNode getDeclaringClass()>();

        $z1 = virtualinvoke $r18.<org.codehaus.groovy.ast.ClassNode: boolean equals(java.lang.Object)>(r3);

        if $z1 == 0 goto label10;

        goto label09;

     label10:
        virtualinvoke r3.<org.codehaus.groovy.ast.ClassNode: void addMethod(org.codehaus.groovy.ast.MethodNode)>(r14);

        goto label09;

     label11:
        return;
    }

    private void addCovariantMethods(org.codehaus.groovy.ast.ClassNode, java.util.List, java.util.Map, java.util.Map, java.util.Map)
    {
        java.util.Map r5, $r7, r10, r11, $r15, $r22;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.Collection $r21;
        java.util.List $r3, r8, $r16;
        org.codehaus.groovy.classgen.Verifier r4;
        org.codehaus.groovy.ast.MethodNode r14, r24, r25;
        org.codehaus.groovy.ast.ClassNode[] $r26;
        int i0, $i1;
        java.util.Iterator $r9, $r17, $r19;
        org.codehaus.groovy.ast.ClassNode r0, $r1, $r2, $r6, $r12, $r18;
        java.lang.Object $r13, $r20, $r23;

        r4 := @this: org.codehaus.groovy.classgen.Verifier;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        r8 := @parameter1: java.util.List;

        r10 := @parameter2: java.util.Map;

        r11 := @parameter3: java.util.Map;

        r5 := @parameter4: java.util.Map;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getUnresolvedSuperClass(boolean)>(0);

        if $r1 == null goto label07;

        $r15 = specialinvoke r4.<org.codehaus.groovy.classgen.Verifier: java.util.Map createGenericsSpec(org.codehaus.groovy.ast.ClassNode,java.util.Map)>($r1, r5);

        $r16 = virtualinvoke $r1.<org.codehaus.groovy.ast.ClassNode: java.util.List getMethods()>();

        $r17 = interfaceinvoke r8.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z4 = interfaceinvoke $r17.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label03;

        $r23 = interfaceinvoke $r17.<java.util.Iterator: java.lang.Object next()>();

        r24 = (org.codehaus.groovy.ast.MethodNode) $r23;

        $z3 = virtualinvoke r24.<org.codehaus.groovy.ast.MethodNode: boolean isStatic()>();

        if $z3 == 0 goto label02;

        goto label01;

     label02:
        specialinvoke r4.<org.codehaus.groovy.classgen.Verifier: void storeMissingCovariantMethods(java.util.Collection,org.codehaus.groovy.ast.MethodNode,java.util.Map,java.util.Map)>($r16, r24, r11, $r15);

        goto label01;

     label03:
        $z1 = interfaceinvoke r10.<java.util.Map: boolean isEmpty()>();

        if $z1 != 0 goto label06;

        $r19 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z5 = interfaceinvoke $r19.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label06;

        $r20 = interfaceinvoke $r19.<java.util.Iterator: java.lang.Object next()>();

        r25 = (org.codehaus.groovy.ast.MethodNode) $r20;

        $z2 = virtualinvoke r25.<org.codehaus.groovy.ast.MethodNode: boolean isStatic()>();

        if $z2 == 0 goto label05;

        goto label04;

     label05:
        $r21 = interfaceinvoke r10.<java.util.Map: java.util.Collection values()>();

        $r22 = <java.util.Collections: java.util.Map EMPTY_MAP>;

        specialinvoke r4.<org.codehaus.groovy.classgen.Verifier: void storeMissingCovariantMethods(java.util.Collection,org.codehaus.groovy.ast.MethodNode,java.util.Map,java.util.Map)>($r21, r25, r11, $r22);

        goto label04;

     label06:
        $r18 = virtualinvoke $r1.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        specialinvoke r4.<org.codehaus.groovy.classgen.Verifier: void addCovariantMethods(org.codehaus.groovy.ast.ClassNode,java.util.List,java.util.Map,java.util.Map,java.util.Map)>($r18, r8, r10, r11, $r15);

     label07:
        $r26 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode[] getInterfaces()>();

        i0 = 0;

     label08:
        $i1 = lengthof $r26;

        if i0 >= $i1 goto label12;

        $r2 = $r26[i0];

        $r3 = virtualinvoke $r2.<org.codehaus.groovy.ast.ClassNode: java.util.List getMethods()>();

        $r6 = $r26[i0];

        $r7 = specialinvoke r4.<org.codehaus.groovy.classgen.Verifier: java.util.Map createGenericsSpec(org.codehaus.groovy.ast.ClassNode,java.util.Map)>($r6, r5);

        $r9 = interfaceinvoke r8.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z6 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label11;

        $r13 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r14 = (org.codehaus.groovy.ast.MethodNode) $r13;

        $z0 = virtualinvoke r14.<org.codehaus.groovy.ast.MethodNode: boolean isStatic()>();

        if $z0 == 0 goto label10;

        goto label09;

     label10:
        specialinvoke r4.<org.codehaus.groovy.classgen.Verifier: void storeMissingCovariantMethods(java.util.Collection,org.codehaus.groovy.ast.MethodNode,java.util.Map,java.util.Map)>($r3, r14, r11, $r7);

        goto label09;

     label11:
        $r12 = $r26[i0];

        specialinvoke r4.<org.codehaus.groovy.classgen.Verifier: void addCovariantMethods(org.codehaus.groovy.ast.ClassNode,java.util.List,java.util.Map,java.util.Map,java.util.Map)>($r12, r8, r10, r11, $r7);

        i0 = i0 + 1;

        goto label08;

     label12:
        return;
    }

    private org.codehaus.groovy.ast.MethodNode getCovariantImplementation(org.codehaus.groovy.ast.MethodNode, org.codehaus.groovy.ast.MethodNode, java.util.Map)
    {
        java.util.Map r5;
        java.util.ArrayList $r16;
        org.codehaus.groovy.ast.MethodNode r0, r2, $r9;
        java.lang.StringBuffer $r20, $r21, $r23, $r24, $r27, $r28, $r31, $r32, $r34, $r35, $r38, $r41, $r42, $r44, $r45, $r48, $r49, $r51, $r52, $r55;
        java.lang.String $r1, $r3, $r10, $r22, $r26, $r29, $r33, $r37, $r39, $r43, $r47, $r50, $r54, $r56;
        org.codehaus.groovy.ast.ClassNode $r6, $r7, $r8, $r11, $r12, $r25, $r36, $r46, $r53;
        org.codehaus.groovy.classgen.BytecodeSequence $r18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.codehaus.groovy.classgen.Verifier$9 $r17;
        org.codehaus.groovy.classgen.Verifier r4;
        int $i0, $i1, $i2, $i3, $i4;
        org.codehaus.groovy.ast.ClassNode[] $r15;
        org.codehaus.groovy.ast.Parameter[] $r13, $r14;
        org.codehaus.groovy.syntax.RuntimeParserException $r19, $r30, $r40;

        r4 := @this: org.codehaus.groovy.classgen.Verifier;

        r0 := @parameter0: org.codehaus.groovy.ast.MethodNode;

        r2 := @parameter1: org.codehaus.groovy.ast.MethodNode;

        r5 := @parameter2: java.util.Map;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: java.lang.String getName()>();

        $r3 = virtualinvoke r2.<org.codehaus.groovy.ast.MethodNode: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $z1 = specialinvoke r4.<org.codehaus.groovy.classgen.Verifier: boolean equalParametersNormal(org.codehaus.groovy.ast.MethodNode,org.codehaus.groovy.ast.MethodNode)>(r2, r0);

        $z2 = specialinvoke r4.<org.codehaus.groovy.classgen.Verifier: boolean equalParametersWithGenerics(org.codehaus.groovy.ast.MethodNode,org.codehaus.groovy.ast.MethodNode,java.util.Map)>(r2, r0, r5);

        if $z1 != 0 goto label2;

        if $z2 != 0 goto label2;

        return null;

     label2:
        $r6 = virtualinvoke r2.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.ClassNode getReturnType()>();

        $r7 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.ClassNode getReturnType()>();

        $z3 = virtualinvoke $r6.<org.codehaus.groovy.ast.ClassNode: boolean equals(java.lang.Object)>($r7);

        if $z3 == 0 goto label3;

        if $z1 == 0 goto label3;

        return null;

     label3:
        $r8 = specialinvoke r4.<org.codehaus.groovy.classgen.Verifier: org.codehaus.groovy.ast.ClassNode correctToGenericsSpec(java.util.Map,org.codehaus.groovy.ast.ClassNode)>(r5, $r7);

        $z4 = specialinvoke r4.<org.codehaus.groovy.classgen.Verifier: boolean isAssignable(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.ClassNode)>($r6, $r8);

        if $z4 != 0 goto label4;

        $r40 = new org.codehaus.groovy.syntax.RuntimeParserException;

        $r41 = new java.lang.StringBuffer;

        specialinvoke $r41.<java.lang.StringBuffer: void <init>()>();

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The return type of ");

        $r43 = virtualinvoke r2.<org.codehaus.groovy.ast.MethodNode: java.lang.String getTypeDescriptor()>();

        $r44 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r43);

        $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" in ");

        $r46 = virtualinvoke r2.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.ClassNode getDeclaringClass()>();

        $r47 = virtualinvoke $r46.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r48 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r47);

        $r49 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is incompatible with ");

        $r50 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: java.lang.String getTypeDescriptor()>();

        $r51 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r50);

        $r52 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" in ");

        $r53 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.ClassNode getDeclaringClass()>();

        $r54 = virtualinvoke $r53.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r55 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r54);

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r40.<org.codehaus.groovy.syntax.RuntimeParserException: void <init>(java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r56, r2);

        throw $r40;

     label4:
        $i0 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: int getModifiers()>();

        $i1 = $i0 & 16;

        if $i1 == 0 goto label5;

        $r30 = new org.codehaus.groovy.syntax.RuntimeParserException;

        $r31 = new java.lang.StringBuffer;

        specialinvoke $r31.<java.lang.StringBuffer: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot override final method ");

        $r33 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: java.lang.String getTypeDescriptor()>();

        $r34 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" in ");

        $r36 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.ClassNode getDeclaringClass()>();

        $r37 = virtualinvoke $r36.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r38 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r37);

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r30.<org.codehaus.groovy.syntax.RuntimeParserException: void <init>(java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r39, r2);

        throw $r30;

     label5:
        $z5 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: boolean isStatic()>();

        $z6 = virtualinvoke r2.<org.codehaus.groovy.ast.MethodNode: boolean isStatic()>();

        if $z5 == $z6 goto label6;

        $r19 = new org.codehaus.groovy.syntax.RuntimeParserException;

        $r20 = new java.lang.StringBuffer;

        specialinvoke $r20.<java.lang.StringBuffer: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot override method ");

        $r22 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: java.lang.String getTypeDescriptor()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" in ");

        $r25 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.ClassNode getDeclaringClass()>();

        $r26 = virtualinvoke $r25.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r27 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" with disparate static modifier");

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r19.<org.codehaus.groovy.syntax.RuntimeParserException: void <init>(java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r29, r2);

        throw $r19;

     label6:
        $r9 = new org.codehaus.groovy.ast.MethodNode;

        $r10 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: java.lang.String getName()>();

        $i2 = virtualinvoke r2.<org.codehaus.groovy.ast.MethodNode: int getModifiers()>();

        $i3 = $i2 | 4096;

        $i4 = $i3 | 64;

        $r11 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.ClassNode getReturnType()>();

        $r12 = virtualinvoke $r11.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getPlainNodeReference()>();

        $r13 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.Parameter[] getParameters()>();

        $r14 = specialinvoke r4.<org.codehaus.groovy.classgen.Verifier: org.codehaus.groovy.ast.Parameter[] cleanParameters(org.codehaus.groovy.ast.Parameter[])>($r13);

        $r15 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.ClassNode[] getExceptions()>();

        specialinvoke $r9.<org.codehaus.groovy.ast.MethodNode: void <init>(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.Parameter[],org.codehaus.groovy.ast.ClassNode[],org.codehaus.groovy.ast.stmt.Statement)>($r10, $i4, $r12, $r14, $r15, null);

        $r16 = new java.util.ArrayList;

        specialinvoke $r16.<java.util.ArrayList: void <init>(int)>(1);

        $r17 = new org.codehaus.groovy.classgen.Verifier$9;

        specialinvoke $r17.<org.codehaus.groovy.classgen.Verifier$9: void <init>(org.codehaus.groovy.classgen.Verifier,org.codehaus.groovy.ast.MethodNode,org.codehaus.groovy.ast.MethodNode)>(r4, r0, r2);

        interfaceinvoke $r16.<java.util.List: boolean add(java.lang.Object)>($r17);

        $r18 = new org.codehaus.groovy.classgen.BytecodeSequence;

        specialinvoke $r18.<org.codehaus.groovy.classgen.BytecodeSequence: void <init>(java.util.List)>($r16);

        virtualinvoke $r9.<org.codehaus.groovy.ast.MethodNode: void setCode(org.codehaus.groovy.ast.stmt.Statement)>($r18);

        return $r9;
    }

    private boolean isAssignable(org.codehaus.groovy.ast.ClassNode, org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.ClassNode r0, r1;
        org.codehaus.groovy.classgen.Verifier r2;
        boolean $z0, $z1, $z2, $z3, $z4;

        r2 := @this: org.codehaus.groovy.classgen.Verifier;

        r1 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        r0 := @parameter1: org.codehaus.groovy.ast.ClassNode;

        $z0 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: boolean isInterface()>();

        if $z0 == 0 goto label2;

        $z2 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: boolean isInterface()>();

        if $z2 == 0 goto label1;

        $z4 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: boolean isDerivedFrom(org.codehaus.groovy.ast.ClassNode)>(r0);

        if $z4 == 0 goto label3;

        return 1;

     label1:
        $z3 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: boolean implementsInterface(org.codehaus.groovy.ast.ClassNode)>(r0);

        if $z3 == 0 goto label3;

        return 1;

     label2:
        $z1 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: boolean isDerivedFrom(org.codehaus.groovy.ast.ClassNode)>(r0);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    private org.codehaus.groovy.ast.Parameter[] cleanParameters(org.codehaus.groovy.ast.Parameter[])
    {
        org.codehaus.groovy.ast.Parameter $r2, $r3, $r6;
        org.codehaus.groovy.ast.ClassNode $r4, $r5;
        org.codehaus.groovy.classgen.Verifier r8;
        org.codehaus.groovy.ast.Parameter[] r0, r1;
        int $i0, $i1, i2;
        java.lang.String $r7;

        r8 := @this: org.codehaus.groovy.classgen.Verifier;

        r0 := @parameter0: org.codehaus.groovy.ast.Parameter[];

        $i0 = lengthof r0;

        r1 = newarray (org.codehaus.groovy.ast.Parameter)[$i0];

        i2 = 0;

     label1:
        $i1 = lengthof r1;

        if i2 >= $i1 goto label2;

        $r2 = new org.codehaus.groovy.ast.Parameter;

        $r3 = r0[i2];

        $r4 = virtualinvoke $r3.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.ClassNode getType()>();

        $r5 = virtualinvoke $r4.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getPlainNodeReference()>();

        $r6 = r0[i2];

        $r7 = virtualinvoke $r6.<org.codehaus.groovy.ast.Parameter: java.lang.String getName()>();

        specialinvoke $r2.<org.codehaus.groovy.ast.Parameter: void <init>(org.codehaus.groovy.ast.ClassNode,java.lang.String)>($r5, $r7);

        r1[i2] = $r2;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

    private void storeMissingCovariantMethods(java.util.Collection, org.codehaus.groovy.ast.MethodNode, java.util.Map, java.util.Map)
    {
        java.util.Iterator $r1;
        java.util.Collection r0;
        org.codehaus.groovy.classgen.Verifier r4;
        org.codehaus.groovy.ast.MethodNode r3, r5, $r7;
        java.util.Map r6, r8;
        java.lang.Object $r2;
        java.lang.String $r9;
        boolean $z0;

        r4 := @this: org.codehaus.groovy.classgen.Verifier;

        r0 := @parameter0: java.util.Collection;

        r5 := @parameter1: org.codehaus.groovy.ast.MethodNode;

        r8 := @parameter2: java.util.Map;

        r6 := @parameter3: java.util.Map;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.codehaus.groovy.ast.MethodNode) $r2;

        $r7 = specialinvoke r4.<org.codehaus.groovy.classgen.Verifier: org.codehaus.groovy.ast.MethodNode getCovariantImplementation(org.codehaus.groovy.ast.MethodNode,org.codehaus.groovy.ast.MethodNode,java.util.Map)>(r3, r5, r6);

        if $r7 != null goto label2;

        goto label1;

     label2:
        $r9 = virtualinvoke $r7.<org.codehaus.groovy.ast.MethodNode: java.lang.String getTypeDescriptor()>();

        interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r7);

        return;

     label3:
        return;
    }

    private org.codehaus.groovy.ast.ClassNode correctToGenericsSpec(java.util.Map, org.codehaus.groovy.ast.GenericsType)
    {
        org.codehaus.groovy.ast.ClassNode r5;
        java.util.Map r2;
        org.codehaus.groovy.ast.GenericsType r0;
        java.lang.Object $r3;
        java.lang.String $r1;
        org.codehaus.groovy.classgen.Verifier r4;
        boolean $z0;

        r4 := @this: org.codehaus.groovy.classgen.Verifier;

        r2 := @parameter0: java.util.Map;

        r0 := @parameter1: org.codehaus.groovy.ast.GenericsType;

        r5 = null;

        $z0 = virtualinvoke r0.<org.codehaus.groovy.ast.GenericsType: boolean isPlaceholder()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.GenericsType: java.lang.String getName()>();

        $r3 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r5 = (org.codehaus.groovy.ast.ClassNode) $r3;

     label1:
        if r5 != null goto label2;

        r5 = virtualinvoke r0.<org.codehaus.groovy.ast.GenericsType: org.codehaus.groovy.ast.ClassNode getType()>();

     label2:
        return r5;
    }

    private org.codehaus.groovy.ast.ClassNode correctToGenericsSpec(java.util.Map, org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.ClassNode r6;
        org.codehaus.groovy.ast.GenericsType $r1;
        org.codehaus.groovy.classgen.Verifier r5;
        java.util.Map r3;
        org.codehaus.groovy.ast.GenericsType[] $r0;
        java.lang.Object $r4;
        java.lang.String $r2;
        boolean $z0;

        r5 := @this: org.codehaus.groovy.classgen.Verifier;

        r3 := @parameter0: java.util.Map;

        r6 := @parameter1: org.codehaus.groovy.ast.ClassNode;

        $z0 = virtualinvoke r6.<org.codehaus.groovy.ast.ClassNode: boolean isGenericsPlaceHolder()>();

        if $z0 == 0 goto label1;

        $r0 = virtualinvoke r6.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.GenericsType[] getGenericsTypes()>();

        $r1 = $r0[0];

        $r2 = virtualinvoke $r1.<org.codehaus.groovy.ast.GenericsType: java.lang.String getName()>();

        $r4 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r6 = (org.codehaus.groovy.ast.ClassNode) $r4;

     label1:
        if r6 != null goto label2;

        r6 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode OBJECT_TYPE>;

     label2:
        return r6;
    }

    private boolean equalParametersNormal(org.codehaus.groovy.ast.MethodNode, org.codehaus.groovy.ast.MethodNode)
    {
        org.codehaus.groovy.ast.Parameter $r4, $r6;
        org.codehaus.groovy.ast.ClassNode $r5, $r7;
        org.codehaus.groovy.classgen.Verifier r8;
        org.codehaus.groovy.ast.Parameter[] $r1, $r3;
        org.codehaus.groovy.ast.MethodNode r0, r2;
        int $i0, $i1, $i2, i3;
        boolean $z0;

        r8 := @this: org.codehaus.groovy.classgen.Verifier;

        r0 := @parameter0: org.codehaus.groovy.ast.MethodNode;

        r2 := @parameter1: org.codehaus.groovy.ast.MethodNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.Parameter[] getParameters()>();

        $r3 = virtualinvoke r2.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.Parameter[] getParameters()>();

        $i1 = lengthof $r1;

        $i0 = lengthof $r3;

        if $i1 == $i0 goto label1;

        return 0;

     label1:
        i3 = 0;

     label2:
        $i2 = lengthof $r3;

        if i3 >= $i2 goto label4;

        $r4 = $r3[i3];

        $r5 = virtualinvoke $r4.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.ClassNode getType()>();

        $r6 = $r1[i3];

        $r7 = virtualinvoke $r6.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.ClassNode getType()>();

        $z0 = virtualinvoke $r7.<org.codehaus.groovy.ast.ClassNode: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return 1;
    }

    private boolean equalParametersWithGenerics(org.codehaus.groovy.ast.MethodNode, org.codehaus.groovy.ast.MethodNode, java.util.Map)
    {
        org.codehaus.groovy.classgen.Verifier r6;
        org.codehaus.groovy.ast.MethodNode r0, r2;
        java.util.Map r7;
        int $i0, $i1, $i2, i3;
        boolean $z0;
        org.codehaus.groovy.ast.Parameter $r4, $r9;
        org.codehaus.groovy.ast.ClassNode $r5, $r8, $r10;
        org.codehaus.groovy.ast.Parameter[] $r1, $r3;

        r6 := @this: org.codehaus.groovy.classgen.Verifier;

        r0 := @parameter0: org.codehaus.groovy.ast.MethodNode;

        r2 := @parameter1: org.codehaus.groovy.ast.MethodNode;

        r7 := @parameter2: java.util.Map;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.Parameter[] getParameters()>();

        $r3 = virtualinvoke r2.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.Parameter[] getParameters()>();

        $i1 = lengthof $r1;

        $i0 = lengthof $r3;

        if $i1 == $i0 goto label1;

        return 0;

     label1:
        i3 = 0;

     label2:
        $i2 = lengthof $r3;

        if i3 >= $i2 goto label4;

        $r4 = $r3[i3];

        $r5 = virtualinvoke $r4.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.ClassNode getType()>();

        $r8 = specialinvoke r6.<org.codehaus.groovy.classgen.Verifier: org.codehaus.groovy.ast.ClassNode correctToGenericsSpec(java.util.Map,org.codehaus.groovy.ast.ClassNode)>(r7, $r5);

        $r9 = $r1[i3];

        $r10 = virtualinvoke $r9.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.ClassNode getType()>();

        $z0 = virtualinvoke $r10.<org.codehaus.groovy.ast.ClassNode: boolean equals(java.lang.Object)>($r8);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return 1;
    }

    private java.util.Map createGenericsSpec(org.codehaus.groovy.ast.ClassNode, java.util.Map)
    {
        java.util.HashMap $r0;
        org.codehaus.groovy.classgen.Verifier r10;
        java.util.Map r1;
        int $i0, $i1, $i2, i3, i4;
        org.codehaus.groovy.ast.ClassNode[] r4;
        org.codehaus.groovy.ast.GenericsType[] $r3, $r6;
        java.lang.String $r8;
        org.codehaus.groovy.ast.ClassNode r2, $r5, $r9, $r12;
        org.codehaus.groovy.ast.GenericsType $r7, $r11;

        r10 := @this: org.codehaus.groovy.classgen.Verifier;

        r2 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        r1 := @parameter1: java.util.Map;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>(java.util.Map)>(r1);

        $r3 = virtualinvoke r2.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.GenericsType[] getGenericsTypes()>();

        if $r3 == null goto label5;

        $i0 = lengthof $r3;

        r4 = newarray (org.codehaus.groovy.ast.ClassNode)[$i0];

        i3 = 0;

     label1:
        $i1 = lengthof r4;

        if i3 >= $i1 goto label2;

        $r11 = $r3[i3];

        $r12 = specialinvoke r10.<org.codehaus.groovy.classgen.Verifier: org.codehaus.groovy.ast.ClassNode correctToGenericsSpec(java.util.Map,org.codehaus.groovy.ast.GenericsType)>($r0, $r11);

        r4[i3] = $r12;

        i3 = i3 + 1;

        goto label1;

     label2:
        $r5 = virtualinvoke r2.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $r6 = virtualinvoke $r5.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.GenericsType[] getGenericsTypes()>();

        if $r6 != null goto label3;

        return $r0;

     label3:
        interfaceinvoke $r0.<java.util.Map: void clear()>();

        i4 = 0;

     label4:
        $i2 = lengthof r4;

        if i4 >= $i2 goto label5;

        $r7 = $r6[i4];

        $r8 = virtualinvoke $r7.<org.codehaus.groovy.ast.GenericsType: java.lang.String getName()>();

        $r9 = r4[i4];

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r9);

        i4 = i4 + 1;

        goto label4;

     label5:
        return $r0;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static org.codehaus.groovy.ast.ClassNode access$000(org.codehaus.groovy.classgen.Verifier)
    {
        org.codehaus.groovy.classgen.Verifier r0;
        org.codehaus.groovy.ast.ClassNode $r1;

        r0 := @parameter0: org.codehaus.groovy.classgen.Verifier;

        $r1 = r0.<org.codehaus.groovy.classgen.Verifier: org.codehaus.groovy.ast.ClassNode classNode>;

        return $r1;
    }

    static void <clinit>()
    {
        org.codehaus.groovy.ast.Parameter $r1, $r3, $r6, $r8, $r11, $r14;
        org.codehaus.groovy.ast.ClassNode $r2, $r4, $r7, $r9, $r12, $r15;
        org.codehaus.groovy.ast.Parameter[] $r0, $r5, $r10, $r13;

        <org.codehaus.groovy.classgen.Verifier: java.lang.String __TIMESTAMP__> = "__timeStamp__239_neverHappen";

        <org.codehaus.groovy.classgen.Verifier: java.lang.String __TIMESTAMP> = "__timeStamp";

        $r0 = newarray (org.codehaus.groovy.ast.Parameter)[2];

        $r1 = new org.codehaus.groovy.ast.Parameter;

        $r2 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode STRING_TYPE>;

        specialinvoke $r1.<org.codehaus.groovy.ast.Parameter: void <init>(org.codehaus.groovy.ast.ClassNode,java.lang.String)>($r2, "method");

        $r0[0] = $r1;

        $r3 = new org.codehaus.groovy.ast.Parameter;

        $r4 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode OBJECT_TYPE>;

        specialinvoke $r3.<org.codehaus.groovy.ast.Parameter: void <init>(org.codehaus.groovy.ast.ClassNode,java.lang.String)>($r4, "arguments");

        $r0[1] = $r3;

        <org.codehaus.groovy.classgen.Verifier: org.codehaus.groovy.ast.Parameter[] INVOKE_METHOD_PARAMS> = $r0;

        $r5 = newarray (org.codehaus.groovy.ast.Parameter)[2];

        $r6 = new org.codehaus.groovy.ast.Parameter;

        $r7 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode STRING_TYPE>;

        specialinvoke $r6.<org.codehaus.groovy.ast.Parameter: void <init>(org.codehaus.groovy.ast.ClassNode,java.lang.String)>($r7, "property");

        $r5[0] = $r6;

        $r8 = new org.codehaus.groovy.ast.Parameter;

        $r9 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode OBJECT_TYPE>;

        specialinvoke $r8.<org.codehaus.groovy.ast.Parameter: void <init>(org.codehaus.groovy.ast.ClassNode,java.lang.String)>($r9, "value");

        $r5[1] = $r8;

        <org.codehaus.groovy.classgen.Verifier: org.codehaus.groovy.ast.Parameter[] SET_PROPERTY_PARAMS> = $r5;

        $r10 = newarray (org.codehaus.groovy.ast.Parameter)[1];

        $r11 = new org.codehaus.groovy.ast.Parameter;

        $r12 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode STRING_TYPE>;

        specialinvoke $r11.<org.codehaus.groovy.ast.Parameter: void <init>(org.codehaus.groovy.ast.ClassNode,java.lang.String)>($r12, "property");

        $r10[0] = $r11;

        <org.codehaus.groovy.classgen.Verifier: org.codehaus.groovy.ast.Parameter[] GET_PROPERTY_PARAMS> = $r10;

        $r13 = newarray (org.codehaus.groovy.ast.Parameter)[1];

        $r14 = new org.codehaus.groovy.ast.Parameter;

        $r15 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode METACLASS_TYPE>;

        specialinvoke $r14.<org.codehaus.groovy.ast.Parameter: void <init>(org.codehaus.groovy.ast.ClassNode,java.lang.String)>($r15, "mc");

        $r13[0] = $r14;

        <org.codehaus.groovy.classgen.Verifier: org.codehaus.groovy.ast.Parameter[] SET_METACLASS_PARAMS> = $r13;

        return;
    }
}
