class org.springframework.instrument.classloading.glassfish.GlassFishClassLoaderAdapter extends java.lang.Object
{
    static final java.lang.String INSTRUMENTABLE_CLASSLOADER_GLASSFISH_V2;
    static final java.lang.String INSTRUMENTABLE_CLASSLOADER_GLASSFISH_V3;
    private static final java.lang.String CLASS_TRANSFORMER;
    private final java.lang.ClassLoader classLoader;
    private final java.lang.reflect.Method addTransformer;
    private final java.lang.reflect.Method copy;
    private final boolean glassFishV3;

    public void <init>(java.lang.ClassLoader)
    {
        org.springframework.instrument.classloading.glassfish.GlassFishClassLoaderAdapter r0;
        java.lang.IllegalStateException $r15, $r17;
        java.lang.String $r10, $r13;
        java.lang.reflect.Method $r3, $r5;
        boolean $z0, z1, z2, z3;
        java.lang.Class[] $r2, $r4;
        java.lang.IllegalArgumentException $r6;
        java.lang.Exception $r14;
        java.lang.StringBuilder $r7, $r8, $r9, $r11, $r12;
        java.lang.ClassNotFoundException $r16, $r18;
        java.lang.Class r19, $r20;
        java.lang.ClassLoader r1, r21, r22;

        r0 := @this: org.springframework.instrument.classloading.glassfish.GlassFishClassLoaderAdapter;

        r1 := @parameter0: java.lang.ClassLoader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        z1 = 0;

        z3 = 0;

        z2 = 0;

     label01:
        r19 = virtualinvoke r1.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("com.sun.enterprise.loader.InstrumentableClassLoader");

     label02:
        goto label07;

     label03:
        $r18 := @caughtexception;

     label04:
        r19 = virtualinvoke r1.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("org.glassfish.api.deployment.InstrumentableClassLoader");

        z1 = 1;

        z3 = 1;

        z2 = 1;

     label05:
        goto label07;

     label06:
        $r16 := @caughtexception;

        $r17 = new java.lang.IllegalStateException;

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Could not initialize GlassFish LoadTimeWeaver because GlassFish (V1, V2 or V3) API classes are not available", $r18);

        throw $r17;

     label07:
        if z2 == 0 goto label08;

        $r20 = class "Ljava/lang/instrument/ClassFileTransformer;";

        goto label09;

     label08:
        $r20 = virtualinvoke r1.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("javax.persistence.spi.ClassTransformer");

     label09:
        $r2 = newarray (java.lang.Class)[1];

        $r2[0] = $r20;

        $r3 = virtualinvoke r19.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("addTransformer", $r2);

        r0.<org.springframework.instrument.classloading.glassfish.GlassFishClassLoaderAdapter: java.lang.reflect.Method addTransformer> = $r3;

        $r4 = newarray (java.lang.Class)[0];

        $r5 = virtualinvoke r19.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("copy", $r4);

        r0.<org.springframework.instrument.classloading.glassfish.GlassFishClassLoaderAdapter: java.lang.reflect.Method copy> = $r5;

     label10:
        goto label12;

     label11:
        $r14 := @caughtexception;

        $r15 = new java.lang.IllegalStateException;

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Could not initialize GlassFish LoadTimeWeaver because GlassFish API classes are not available", $r14);

        throw $r15;

     label12:
        r21 = null;

        r22 = r1;

        goto label15;

     label13:
        $z0 = virtualinvoke r19.<java.lang.Class: boolean isInstance(java.lang.Object)>(r22);

        if $z0 == 0 goto label14;

        r21 = r22;

     label14:
        r22 = virtualinvoke r22.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

     label15:
        if r22 == null goto label16;

        if r21 == null goto label13;

     label16:
        if r21 != null goto label17;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and its parents are not suitable ClassLoaders: A [");

        $r10 = virtualinvoke r19.<java.lang.Class: java.lang.String getName()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] implementation is required.");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r6;

     label17:
        r0.<org.springframework.instrument.classloading.glassfish.GlassFishClassLoaderAdapter: java.lang.ClassLoader classLoader> = r21;

        r0.<org.springframework.instrument.classloading.glassfish.GlassFishClassLoaderAdapter: boolean glassFishV3> = z3;

        return;

        catch java.lang.ClassNotFoundException from label01 to label02 with label03;
        catch java.lang.ClassNotFoundException from label04 to label05 with label06;
        catch java.lang.Exception from label07 to label10 with label11;
    }

    public void addTransformer(java.lang.instrument.ClassFileTransformer)
    {
        java.lang.Throwable $r9;
        org.springframework.instrument.classloading.glassfish.GlassFishClassLoaderAdapter r0;
        java.lang.IllegalStateException $r12, $r13;
        java.lang.Object[] $r1;
        java.lang.Exception $r5;
        java.lang.reflect.InvocationTargetException $r7;
        java.lang.instrument.ClassFileTransformer r2;
        org.springframework.instrument.classloading.glassfish.ClassTransformerAdapter $r11;
        java.lang.Object $r10;
        java.lang.ClassLoader $r4;
        java.lang.reflect.Method $r3;
        boolean $z0;

        r0 := @this: org.springframework.instrument.classloading.glassfish.GlassFishClassLoaderAdapter;

        r2 := @parameter0: java.lang.instrument.ClassFileTransformer;

     label1:
        $r3 = r0.<org.springframework.instrument.classloading.glassfish.GlassFishClassLoaderAdapter: java.lang.reflect.Method addTransformer>;

        $r4 = r0.<org.springframework.instrument.classloading.glassfish.GlassFishClassLoaderAdapter: java.lang.ClassLoader classLoader>;

        $r1 = newarray (java.lang.Object)[1];

        $z0 = r0.<org.springframework.instrument.classloading.glassfish.GlassFishClassLoaderAdapter: boolean glassFishV3>;

        if $z0 == 0 goto label2;

        $r10 = r2;

        goto label3;

     label2:
        $r11 = new org.springframework.instrument.classloading.glassfish.ClassTransformerAdapter;

        $r10 = $r11;

        specialinvoke $r11.<org.springframework.instrument.classloading.glassfish.ClassTransformerAdapter: void <init>(java.lang.instrument.ClassFileTransformer)>(r2);

     label3:
        $r1[0] = $r10;

        virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r4, $r1);

     label4:
        goto label7;

     label5:
        $r7 := @caughtexception;

        $r12 = new java.lang.IllegalStateException;

        $r9 = virtualinvoke $r7.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("GlassFish addTransformer method threw exception ", $r9);

        throw $r12;

     label6:
        $r5 := @caughtexception;

        $r13 = new java.lang.IllegalStateException;

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Could not invoke GlassFish addTransformer method", $r5);

        throw $r13;

     label7:
        return;

        catch java.lang.reflect.InvocationTargetException from label1 to label4 with label5;
        catch java.lang.Exception from label1 to label4 with label6;
    }

    public java.lang.ClassLoader getClassLoader()
    {
        org.springframework.instrument.classloading.glassfish.GlassFishClassLoaderAdapter r0;
        java.lang.ClassLoader $r1;

        r0 := @this: org.springframework.instrument.classloading.glassfish.GlassFishClassLoaderAdapter;

        $r1 = r0.<org.springframework.instrument.classloading.glassfish.GlassFishClassLoaderAdapter: java.lang.ClassLoader classLoader>;

        return $r1;
    }

    public java.lang.ClassLoader getThrowawayClassLoader()
    {
        java.lang.Throwable $r10;
        org.springframework.instrument.classloading.glassfish.GlassFishClassLoaderAdapter r0;
        java.lang.IllegalStateException $r7, $r9;
        java.lang.Object[] $r1;
        java.lang.Exception $r6;
        java.lang.reflect.InvocationTargetException $r8;
        java.lang.Object $r4;
        java.lang.ClassLoader $r2, $r5;
        java.lang.reflect.Method $r3;

        r0 := @this: org.springframework.instrument.classloading.glassfish.GlassFishClassLoaderAdapter;

     label1:
        $r3 = r0.<org.springframework.instrument.classloading.glassfish.GlassFishClassLoaderAdapter: java.lang.reflect.Method copy>;

        $r2 = r0.<org.springframework.instrument.classloading.glassfish.GlassFishClassLoaderAdapter: java.lang.ClassLoader classLoader>;

        $r1 = newarray (java.lang.Object)[0];

        $r4 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r2, $r1);

        $r5 = (java.lang.ClassLoader) $r4;

     label2:
        return $r5;

     label3:
        $r8 := @caughtexception;

        $r9 = new java.lang.IllegalStateException;

        $r10 = virtualinvoke $r8.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("GlassFish copy method threw exception ", $r10);

        throw $r9;

     label4:
        $r6 := @caughtexception;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Could not invoke GlassFish copy method", $r6);

        throw $r7;

        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label4;
    }

    public static void <clinit>()
    {
        <org.springframework.instrument.classloading.glassfish.GlassFishClassLoaderAdapter: java.lang.String CLASS_TRANSFORMER> = "javax.persistence.spi.ClassTransformer";

        <org.springframework.instrument.classloading.glassfish.GlassFishClassLoaderAdapter: java.lang.String INSTRUMENTABLE_CLASSLOADER_GLASSFISH_V3> = "org.glassfish.api.deployment.InstrumentableClassLoader";

        <org.springframework.instrument.classloading.glassfish.GlassFishClassLoaderAdapter: java.lang.String INSTRUMENTABLE_CLASSLOADER_GLASSFISH_V2> = "com.sun.enterprise.loader.InstrumentableClassLoader";

        return;
    }
}
