public class bsh.BshMethod extends java.lang.Object implements java.io.Serializable
{
    bsh.NameSpace declaringNameSpace;
    bsh.Modifiers modifiers;
    private java.lang.String name;
    private java.lang.Class creturnType;
    private java.lang.String[] paramNames;
    private int numArgs;
    private java.lang.Class[] cparamTypes;
    bsh.BSHBlock methodBody;
    private java.lang.reflect.Method javaMethod;
    private java.lang.Object javaObject;

    void <init>(bsh.BSHMethodDeclaration, bsh.NameSpace, bsh.Modifiers)
    {
        bsh.NameSpace r7;
        bsh.BSHBlock $r9;
        java.lang.Class[] $r10;
        java.lang.String[] $r5;
        bsh.BshMethod r0;
        bsh.BSHFormalParameters $r2, $r6;
        bsh.Modifiers r8;
        bsh.BSHMethodDeclaration r1;
        java.lang.Class $r4;
        java.lang.String $r3;

        r0 := @this: bsh.BshMethod;

        r1 := @parameter0: bsh.BSHMethodDeclaration;

        r7 := @parameter1: bsh.NameSpace;

        r8 := @parameter2: bsh.Modifiers;

        $r3 = r1.<bsh.BSHMethodDeclaration: java.lang.String name>;

        $r4 = r1.<bsh.BSHMethodDeclaration: java.lang.Class returnType>;

        $r2 = r1.<bsh.BSHMethodDeclaration: bsh.BSHFormalParameters paramsNode>;

        $r5 = virtualinvoke $r2.<bsh.BSHFormalParameters: java.lang.String[] getParamNames()>();

        $r6 = r1.<bsh.BSHMethodDeclaration: bsh.BSHFormalParameters paramsNode>;

        $r10 = $r6.<bsh.BSHFormalParameters: java.lang.Class[] paramTypes>;

        $r9 = r1.<bsh.BSHMethodDeclaration: bsh.BSHBlock blockNode>;

        specialinvoke r0.<bsh.BshMethod: void <init>(java.lang.String,java.lang.Class,java.lang.String[],java.lang.Class[],bsh.BSHBlock,bsh.NameSpace,bsh.Modifiers)>($r3, $r4, $r5, $r10, $r9, r7, r8);

        return;
    }

    void <init>(java.lang.String, java.lang.Class, java.lang.String[], java.lang.Class[], bsh.BSHBlock, bsh.NameSpace, bsh.Modifiers)
    {
        bsh.NameSpace r6;
        java.lang.Class[] r4;
        bsh.BSHBlock r5;
        java.lang.String[] r3;
        bsh.BshMethod r0;
        bsh.Modifiers r7;
        int $i0;
        java.lang.Class r2;
        java.lang.String r1;

        r0 := @this: bsh.BshMethod;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: java.lang.String[];

        r4 := @parameter3: java.lang.Class[];

        r5 := @parameter4: bsh.BSHBlock;

        r6 := @parameter5: bsh.NameSpace;

        r7 := @parameter6: bsh.Modifiers;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<bsh.BshMethod: java.lang.String name> = r1;

        r0.<bsh.BshMethod: java.lang.Class creturnType> = r2;

        r0.<bsh.BshMethod: java.lang.String[] paramNames> = r3;

        if r3 == null goto label1;

        $i0 = lengthof r3;

        r0.<bsh.BshMethod: int numArgs> = $i0;

     label1:
        r0.<bsh.BshMethod: java.lang.Class[] cparamTypes> = r4;

        r0.<bsh.BshMethod: bsh.BSHBlock methodBody> = r5;

        r0.<bsh.BshMethod: bsh.NameSpace declaringNameSpace> = r6;

        r0.<bsh.BshMethod: bsh.Modifiers modifiers> = r7;

        return;
    }

    void <init>(java.lang.reflect.Method, java.lang.Object)
    {
        java.lang.Class[] $r4;
        java.lang.Class $r3;
        java.lang.Object r5;
        java.lang.String $r2;
        java.lang.reflect.Method r1;
        bsh.BshMethod r0;

        r0 := @this: bsh.BshMethod;

        r1 := @parameter0: java.lang.reflect.Method;

        r5 := @parameter1: java.lang.Object;

        $r2 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.String getName()>();

        $r3 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r4 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        specialinvoke r0.<bsh.BshMethod: void <init>(java.lang.String,java.lang.Class,java.lang.String[],java.lang.Class[],bsh.BSHBlock,bsh.NameSpace,bsh.Modifiers)>($r2, $r3, null, $r4, null, null, null);

        r0.<bsh.BshMethod: java.lang.reflect.Method javaMethod> = r1;

        r0.<bsh.BshMethod: java.lang.Object javaObject> = r5;

        return;
    }

    public java.lang.Class[] getParameterTypes()
    {
        java.lang.Class[] $r1;
        bsh.BshMethod r0;

        r0 := @this: bsh.BshMethod;

        $r1 = r0.<bsh.BshMethod: java.lang.Class[] cparamTypes>;

        return $r1;
    }

    public java.lang.String[] getParameterNames()
    {
        java.lang.String[] $r1;
        bsh.BshMethod r0;

        r0 := @this: bsh.BshMethod;

        $r1 = r0.<bsh.BshMethod: java.lang.String[] paramNames>;

        return $r1;
    }

    public java.lang.Class getReturnType()
    {
        java.lang.Class $r1;
        bsh.BshMethod r0;

        r0 := @this: bsh.BshMethod;

        $r1 = r0.<bsh.BshMethod: java.lang.Class creturnType>;

        return $r1;
    }

    public bsh.Modifiers getModifiers()
    {
        bsh.BshMethod r0;
        bsh.Modifiers $r1;

        r0 := @this: bsh.BshMethod;

        $r1 = r0.<bsh.BshMethod: bsh.Modifiers modifiers>;

        return $r1;
    }

    public java.lang.String getName()
    {
        java.lang.String $r1;
        bsh.BshMethod r0;

        r0 := @this: bsh.BshMethod;

        $r1 = r0.<bsh.BshMethod: java.lang.String name>;

        return $r1;
    }

    public java.lang.Object invoke(java.lang.Object[], bsh.Interpreter) throws bsh.EvalError
    {
        java.lang.Object[] r1;
        bsh.Interpreter r2;
        java.lang.Object $r3;
        bsh.BshMethod r0;

        r0 := @this: bsh.BshMethod;

        r1 := @parameter0: java.lang.Object[];

        r2 := @parameter1: bsh.Interpreter;

        $r3 = virtualinvoke r0.<bsh.BshMethod: java.lang.Object invoke(java.lang.Object[],bsh.Interpreter,bsh.CallStack,bsh.SimpleNode,boolean)>(r1, r2, null, null, 0);

        return $r3;
    }

    public java.lang.Object invoke(java.lang.Object[], bsh.Interpreter, bsh.CallStack, bsh.SimpleNode) throws bsh.EvalError
    {
        java.lang.Object[] r1;
        bsh.Interpreter r2;
        bsh.SimpleNode r4;
        java.lang.Object $r5;
        bsh.CallStack r3;
        bsh.BshMethod r0;

        r0 := @this: bsh.BshMethod;

        r1 := @parameter0: java.lang.Object[];

        r2 := @parameter1: bsh.Interpreter;

        r3 := @parameter2: bsh.CallStack;

        r4 := @parameter3: bsh.SimpleNode;

        $r5 = virtualinvoke r0.<bsh.BshMethod: java.lang.Object invoke(java.lang.Object[],bsh.Interpreter,bsh.CallStack,bsh.SimpleNode,boolean)>(r1, r2, r3, r4, 0);

        return $r5;
    }

    java.lang.Object invoke(java.lang.Object[], bsh.Interpreter, bsh.CallStack, bsh.SimpleNode, boolean) throws bsh.EvalError
    {
        bsh.SimpleNode r6;
        java.lang.reflect.Method $r2, $r14;
        boolean z0, $z1, $z2;
        bsh.TargetError $r22;
        bsh.Interpreter r4;
        java.lang.reflect.InvocationTargetException $r21;
        bsh.InterpreterError $r20;
        java.lang.Throwable $r18;
        java.lang.Object[] r0;
        bsh.NameSpace $r9, $r10, $r12;
        java.lang.Error $r17;
        bsh.UtilEvalError $r19;
        bsh.CallStack r5;
        bsh.Modifiers $r3, $r8;
        java.lang.StringBuffer $r25, $r26, $r27;
        int $i0, i1;
        java.lang.String $r28;
        bsh.ReflectError $r23;
        bsh.EvalError $r24;
        bsh.BshMethod r1;
        java.lang.Object $r7, $r11, $r13, $r15, $r16, r29, r30;

        r1 := @this: bsh.BshMethod;

        r0 := @parameter0: java.lang.Object[];

        r4 := @parameter1: bsh.Interpreter;

        r5 := @parameter2: bsh.CallStack;

        r6 := @parameter3: bsh.SimpleNode;

        z0 := @parameter4: boolean;

        if r0 == null goto label04;

        i1 = 0;

        goto label03;

     label01:
        $r16 = r0[i1];

        if $r16 != null goto label02;

        $r17 = new java.lang.Error;

        specialinvoke $r17.<java.lang.Error: void <init>(java.lang.String)>("HERE!");

        throw $r17;

     label02:
        i1 = i1 + 1;

     label03:
        $i0 = lengthof r0;

        if i1 < $i0 goto label01;

     label04:
        $r2 = r1.<bsh.BshMethod: java.lang.reflect.Method javaMethod>;

        if $r2 == null goto label09;

     label05:
        $r14 = r1.<bsh.BshMethod: java.lang.reflect.Method javaMethod>;

        $r13 = r1.<bsh.BshMethod: java.lang.Object javaObject>;

        $r15 = staticinvoke <bsh.Reflect: java.lang.Object invokeMethod(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>($r14, $r13, r0);

     label06:
        return $r15;

     label07:
        $r23 := @caughtexception;

        $r24 = new bsh.EvalError;

        $r25 = new java.lang.StringBuffer;

        specialinvoke $r25.<java.lang.StringBuffer: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Error invoking Java method: ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r23);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r24.<bsh.EvalError: void <init>(java.lang.String,bsh.SimpleNode,bsh.CallStack)>($r28, r6, r5);

        throw $r24;

     label08:
        $r21 := @caughtexception;

        $r22 = new bsh.TargetError;

        specialinvoke $r22.<bsh.TargetError: void <init>(java.lang.String,java.lang.Throwable,bsh.SimpleNode,bsh.CallStack,boolean)>("Exception invoking imported object method.", $r21, r6, r5, 1);

        throw $r22;

     label09:
        $r3 = r1.<bsh.BshMethod: bsh.Modifiers modifiers>;

        if $r3 == null goto label19;

        $r8 = r1.<bsh.BshMethod: bsh.Modifiers modifiers>;

        $z1 = virtualinvoke $r8.<bsh.Modifiers: boolean hasModifier(java.lang.String)>("synchronized");

        if $z1 == 0 goto label19;

        $r9 = r1.<bsh.BshMethod: bsh.NameSpace declaringNameSpace>;

        $z2 = $r9.<bsh.NameSpace: boolean isClass>;

        if $z2 == 0 goto label13;

     label10:
        $r12 = r1.<bsh.BshMethod: bsh.NameSpace declaringNameSpace>;

        r29 = virtualinvoke $r12.<bsh.NameSpace: java.lang.Object getClassInstance()>();

     label11:
        goto label14;

     label12:
        $r19 := @caughtexception;

        $r20 = new bsh.InterpreterError;

        specialinvoke $r20.<bsh.InterpreterError: void <init>(java.lang.String)>("Can\'t get class instance for synchronized method.");

        throw $r20;

     label13:
        $r10 = r1.<bsh.BshMethod: bsh.NameSpace declaringNameSpace>;

        r29 = virtualinvoke $r10.<bsh.NameSpace: bsh.This getThis(bsh.Interpreter)>(r4);

     label14:
        r30 = r29;

        entermonitor r29;

     label15:
        $r11 = specialinvoke r1.<bsh.BshMethod: java.lang.Object invokeImpl(java.lang.Object[],bsh.Interpreter,bsh.CallStack,bsh.SimpleNode,boolean)>(r0, r4, r5, r6, z0);

        exitmonitor r29;

     label16:
        return $r11;

     label17:
        $r18 := @caughtexception;

        exitmonitor r30;

     label18:
        throw $r18;

     label19:
        $r7 = specialinvoke r1.<bsh.BshMethod: java.lang.Object invokeImpl(java.lang.Object[],bsh.Interpreter,bsh.CallStack,bsh.SimpleNode,boolean)>(r0, r4, r5, r6, z0);

        return $r7;

        catch bsh.ReflectError from label05 to label06 with label07;
        catch java.lang.reflect.InvocationTargetException from label05 to label06 with label08;
        catch bsh.UtilEvalError from label10 to label11 with label12;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    private java.lang.Object invokeImpl(java.lang.Object[], bsh.Interpreter, bsh.CallStack, bsh.SimpleNode, boolean) throws bsh.EvalError
    {
        java.lang.Object[] r79;
        bsh.NameSpace $r3, $r5, $r50, r81;
        bsh.UtilEvalError $r51, $r60, $r62, $r64;
        java.lang.StringBuffer $r15, $r16, $r19, $r20, $r22, $r44, $r45, $r47, $r52, $r53, $r55, $r57, $r66, $r67, $r70, $r71, $r72, $r74, $r75, $r77;
        java.lang.String $r4, $r12, $r18, $r21, $r23, $r30, $r46, $r48, $r54, $r56, $r58, $r69, $r73, $r76, $r78;
        bsh.EvalError $r14, $r36, $r41, $r43, $r59, $r61, $r63, $r65;
        java.lang.Class[] $r2;
        bsh.BshMethod r0;
        bsh.ReturnControl $r38, r83;
        bsh.SimpleNode r6, $r37, $r42, r84;
        boolean z0, $z1, $z2;
        bsh.Interpreter r11;
        bsh.BSHBlock $r31;
        java.lang.String[] $r10, $r17, $r27, $r68;
        bsh.CallStack $r33, $r49, r80;
        int $i0, $i1, $i2, i3, $i4;
        bsh.Primitive $r8, $r35, $r40;
        java.lang.Class $r1, $r7, $r24, $r29, $r34, $r39;
        java.lang.Object $r9, $r13, $r25, $r26, $r28, $r32, r82;

        r0 := @this: bsh.BshMethod;

        r79 := @parameter0: java.lang.Object[];

        r11 := @parameter1: bsh.Interpreter;

        r80 := @parameter2: bsh.CallStack;

        r6 := @parameter3: bsh.SimpleNode;

        z0 := @parameter4: boolean;

        $r1 = virtualinvoke r0.<bsh.BshMethod: java.lang.Class getReturnType()>();

        $r2 = virtualinvoke r0.<bsh.BshMethod: java.lang.Class[] getParameterTypes()>();

        if r80 != null goto label01;

        $r49 = new bsh.CallStack;

        $r50 = r0.<bsh.BshMethod: bsh.NameSpace declaringNameSpace>;

        specialinvoke $r49.<bsh.CallStack: void <init>(bsh.NameSpace)>($r50);

        r80 = $r49;

     label01:
        if r79 != null goto label02;

        r79 = newarray (java.lang.Object)[0];

     label02:
        $i1 = lengthof r79;

        $i0 = r0.<bsh.BshMethod: int numArgs>;

        if $i1 == $i0 goto label03;

        $r43 = new bsh.EvalError;

        $r44 = new java.lang.StringBuffer;

        specialinvoke $r44.<java.lang.StringBuffer: void <init>()>();

        $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Wrong number of arguments for local method: ");

        $r46 = r0.<bsh.BshMethod: java.lang.String name>;

        $r47 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r46);

        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r43.<bsh.EvalError: void <init>(java.lang.String,bsh.SimpleNode,bsh.CallStack)>($r48, r6, r80);

        throw $r43;

     label03:
        if z0 == 0 goto label04;

        r81 = virtualinvoke r80.<bsh.CallStack: bsh.NameSpace top()>();

        goto label05;

     label04:
        $r3 = new bsh.NameSpace;

        $r5 = r0.<bsh.BshMethod: bsh.NameSpace declaringNameSpace>;

        $r4 = r0.<bsh.BshMethod: java.lang.String name>;

        specialinvoke $r3.<bsh.NameSpace: void <init>(bsh.NameSpace,java.lang.String)>($r5, $r4);

        r81 = $r3;

        $r3.<bsh.NameSpace: boolean isMethod> = 1;

     label05:
        virtualinvoke r81.<bsh.NameSpace: void setNode(bsh.SimpleNode)>(r6);

        i3 = 0;

        goto label18;

     label06:
        $r7 = $r2[i3];

        if $r7 == null goto label13;

     label07:
        $r25 = r79[i3];

        $r24 = $r2[i3];

        $r26 = staticinvoke <bsh.Types: java.lang.Object castObject(java.lang.Object,java.lang.Class,int)>($r25, $r24, 1);

        r79[i3] = $r26;

     label08:
        goto label10;

     label09:
        $r64 := @caughtexception;

        $r65 = new bsh.EvalError;

        $r66 = new java.lang.StringBuffer;

        specialinvoke $r66.<java.lang.StringBuffer: void <init>()>();

        $r67 = virtualinvoke $r66.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid argument: `");

        $r68 = r0.<bsh.BshMethod: java.lang.String[] paramNames>;

        $r69 = $r68[i3];

        $r70 = virtualinvoke $r67.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r69);

        $r71 = virtualinvoke $r70.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r72 = virtualinvoke $r71.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" for method: ");

        $r73 = r0.<bsh.BshMethod: java.lang.String name>;

        $r74 = virtualinvoke $r72.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r73);

        $r75 = virtualinvoke $r74.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" : ");

        $r76 = virtualinvoke $r64.<bsh.UtilEvalError: java.lang.String getMessage()>();

        $r77 = virtualinvoke $r75.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r76);

        $r78 = virtualinvoke $r77.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r65.<bsh.EvalError: void <init>(java.lang.String,bsh.SimpleNode,bsh.CallStack)>($r78, r6, r80);

        throw $r65;

     label10:
        $r27 = r0.<bsh.BshMethod: java.lang.String[] paramNames>;

        $r30 = $r27[i3];

        $r29 = $r2[i3];

        $r28 = r79[i3];

        virtualinvoke r81.<bsh.NameSpace: void setTypedVariable(java.lang.String,java.lang.Class,java.lang.Object,bsh.Modifiers)>($r30, $r29, $r28, null);

     label11:
        goto label17;

     label12:
        $r62 := @caughtexception;

        $r63 = virtualinvoke $r62.<bsh.UtilEvalError: bsh.EvalError toEvalError(java.lang.String,bsh.SimpleNode,bsh.CallStack)>("Typed method parameter assignment", r6, r80);

        throw $r63;

     label13:
        $r9 = r79[i3];

        $r8 = <bsh.Primitive: bsh.Primitive VOID>;

        if $r9 != $r8 goto label14;

        $r14 = new bsh.EvalError;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Undefined variable or class name, parameter: ");

        $r17 = r0.<bsh.BshMethod: java.lang.String[] paramNames>;

        $r18 = $r17[i3];

        $r19 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" to method: ");

        $r21 = r0.<bsh.BshMethod: java.lang.String name>;

        $r22 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r14.<bsh.EvalError: void <init>(java.lang.String,bsh.SimpleNode,bsh.CallStack)>($r23, r6, r80);

        throw $r14;

     label14:
        $r10 = r0.<bsh.BshMethod: java.lang.String[] paramNames>;

        $r12 = $r10[i3];

        $r13 = r79[i3];

        $z1 = virtualinvoke r11.<bsh.Interpreter: boolean getStrictJava()>();

        virtualinvoke r81.<bsh.NameSpace: void setLocalVariable(java.lang.String,java.lang.Object,boolean)>($r12, $r13, $z1);

     label15:
        goto label17;

     label16:
        $r60 := @caughtexception;

        $r61 = virtualinvoke $r60.<bsh.UtilEvalError: bsh.EvalError toEvalError(bsh.SimpleNode,bsh.CallStack)>(r6, r80);

        throw $r61;

     label17:
        i3 = i3 + 1;

     label18:
        $i4 = r0.<bsh.BshMethod: int numArgs>;

        if i3 < $i4 goto label06;

        if z0 != 0 goto label19;

        virtualinvoke r80.<bsh.CallStack: void push(bsh.NameSpace)>(r81);

     label19:
        $r31 = r0.<bsh.BshMethod: bsh.BSHBlock methodBody>;

        $r32 = virtualinvoke $r31.<bsh.BSHBlock: java.lang.Object eval(bsh.CallStack,bsh.Interpreter,boolean)>(r80, r11, 1);

        r82 = $r32;

        $r33 = virtualinvoke r80.<bsh.CallStack: bsh.CallStack copy()>();

        if z0 != 0 goto label20;

        virtualinvoke r80.<bsh.CallStack: bsh.NameSpace pop()>();

     label20:
        r83 = null;

        $z2 = $r32 instanceof bsh.ReturnControl;

        if $z2 == 0 goto label23;

        r83 = (bsh.ReturnControl) $r32;

        $i2 = r83.<bsh.ReturnControl: int kind>;

        if $i2 != 46 goto label21;

        $r38 = (bsh.ReturnControl) $r32;

        r82 = $r38.<bsh.ReturnControl: java.lang.Object value>;

        goto label22;

     label21:
        $r36 = new bsh.EvalError;

        $r37 = r83.<bsh.ReturnControl: bsh.SimpleNode returnPoint>;

        specialinvoke $r36.<bsh.EvalError: void <init>(java.lang.String,bsh.SimpleNode,bsh.CallStack)>("\'continue\' or \'break\' in method body", $r37, $r33);

        throw $r36;

     label22:
        $r39 = <java.lang.Void: java.lang.Class TYPE>;

        if $r1 != $r39 goto label23;

        $r40 = <bsh.Primitive: bsh.Primitive VOID>;

        if r82 == $r40 goto label23;

        $r41 = new bsh.EvalError;

        $r42 = r83.<bsh.ReturnControl: bsh.SimpleNode returnPoint>;

        specialinvoke $r41.<bsh.EvalError: void <init>(java.lang.String,bsh.SimpleNode,bsh.CallStack)>("Cannot return value from void method", $r42, $r33);

        throw $r41;

     label23:
        if $r1 == null goto label28;

        $r34 = <java.lang.Void: java.lang.Class TYPE>;

        if $r1 != $r34 goto label24;

        $r35 = <bsh.Primitive: bsh.Primitive VOID>;

        return $r35;

     label24:
        r82 = staticinvoke <bsh.Types: java.lang.Object castObject(java.lang.Object,java.lang.Class,int)>(r82, $r1, 1);

     label25:
        goto label28;

     label26:
        $r51 := @caughtexception;

        r84 = r6;

        if r83 == null goto label27;

        r84 = r83.<bsh.ReturnControl: bsh.SimpleNode returnPoint>;

     label27:
        $r52 = new java.lang.StringBuffer;

        specialinvoke $r52.<java.lang.StringBuffer: void <init>()>();

        $r53 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Incorrect type returned from method: ");

        $r54 = r0.<bsh.BshMethod: java.lang.String name>;

        $r55 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r54);

        $r56 = virtualinvoke $r51.<bsh.UtilEvalError: java.lang.String getMessage()>();

        $r57 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r56);

        $r58 = virtualinvoke $r57.<java.lang.StringBuffer: java.lang.String toString()>();

        $r59 = virtualinvoke $r51.<bsh.UtilEvalError: bsh.EvalError toEvalError(java.lang.String,bsh.SimpleNode,bsh.CallStack)>($r58, r84, r80);

        throw $r59;

     label28:
        return r82;

        catch bsh.UtilEvalError from label07 to label08 with label09;
        catch bsh.UtilEvalError from label10 to label11 with label12;
        catch bsh.UtilEvalError from label14 to label15 with label16;
        catch bsh.UtilEvalError from label24 to label25 with label26;
    }

    public boolean hasModifier(java.lang.String)
    {
        bsh.Modifiers $r1, $r3;
        java.lang.String r2;
        bsh.BshMethod r0;
        boolean $z0, $z1;

        r0 := @this: bsh.BshMethod;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<bsh.BshMethod: bsh.Modifiers modifiers>;

        if $r1 == null goto label1;

        $r3 = r0.<bsh.BshMethod: bsh.Modifiers modifiers>;

        $z0 = virtualinvoke $r3.<bsh.Modifiers: boolean hasModifier(java.lang.String)>(r2);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public java.lang.String toString()
    {
        java.lang.Class[] $r4;
        bsh.BshMethod r2;
        java.lang.StringBuffer $r0, $r1, $r6;
        java.lang.String $r3, $r5, $r7;

        r2 := @this: bsh.BshMethod;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Scripted Method: ");

        $r3 = r2.<bsh.BshMethod: java.lang.String name>;

        $r4 = virtualinvoke r2.<bsh.BshMethod: java.lang.Class[] getParameterTypes()>();

        $r5 = staticinvoke <bsh.StringUtil: java.lang.String methodString(java.lang.String,java.lang.Class[])>($r3, $r4);

        $r6 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;
    }
}
