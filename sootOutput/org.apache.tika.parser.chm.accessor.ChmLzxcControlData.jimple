public class org.apache.tika.parser.chm.accessor.ChmLzxcControlData extends java.lang.Object implements org.apache.tika.parser.chm.accessor.ChmAccessor
{
    private static final long serialVersionUID;
    private long size;
    private byte[] signature;
    private long version;
    private long resetInterval;
    private long windowSize;
    private long windowsPerReset;
    private long unknown_18;
    private int dataRemained;
    private int currentPlace;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        byte[] $r2;
        org.apache.tika.parser.chm.accessor.ChmLzxcControlData r0;
        java.lang.String $r1;
        java.lang.AssertionError $r4;
        java.io.UnsupportedEncodingException $r3;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcControlData;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: int currentPlace> = 0;

     label1:
        $r1 = "LZXC";

        $r2 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        r0.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: byte[] signature> = $r2;

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>("UTF-8 not supported.");

        throw $r4;

     label4:
        return;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    private int getDataRemained()
    {
        int $i0;
        org.apache.tika.parser.chm.accessor.ChmLzxcControlData r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcControlData;

        $i0 = r0.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: int dataRemained>;

        return $i0;
    }

    private void setDataRemained(int)
    {
        int i0;
        org.apache.tika.parser.chm.accessor.ChmLzxcControlData r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcControlData;

        i0 := @parameter0: int;

        r0.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: int dataRemained> = i0;

        return;
    }

    private int getCurrentPlace()
    {
        int $i0;
        org.apache.tika.parser.chm.accessor.ChmLzxcControlData r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcControlData;

        $i0 = r0.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: int currentPlace>;

        return $i0;
    }

    private void setCurrentPlace(int)
    {
        int i0;
        org.apache.tika.parser.chm.accessor.ChmLzxcControlData r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcControlData;

        i0 := @parameter0: int;

        r0.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: int currentPlace> = i0;

        return;
    }

    public long getSize()
    {
        long $l0;
        org.apache.tika.parser.chm.accessor.ChmLzxcControlData r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcControlData;

        $l0 = r0.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: long size>;

        return $l0;
    }

    protected void setSize(long)
    {
        long l0;
        org.apache.tika.parser.chm.accessor.ChmLzxcControlData r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcControlData;

        l0 := @parameter0: long;

        r0.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: long size> = l0;

        return;
    }

    public byte[] getSignature()
    {
        byte[] $r1;
        org.apache.tika.parser.chm.accessor.ChmLzxcControlData r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcControlData;

        $r1 = r0.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: byte[] signature>;

        return $r1;
    }

    protected void setSignature(byte[])
    {
        byte[] r1;
        org.apache.tika.parser.chm.accessor.ChmLzxcControlData r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcControlData;

        r1 := @parameter0: byte[];

        r0.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: byte[] signature> = r1;

        return;
    }

    public long getVersion()
    {
        long $l0;
        org.apache.tika.parser.chm.accessor.ChmLzxcControlData r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcControlData;

        $l0 = r0.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: long version>;

        return $l0;
    }

    protected void setVersion(long)
    {
        long l0;
        org.apache.tika.parser.chm.accessor.ChmLzxcControlData r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcControlData;

        l0 := @parameter0: long;

        r0.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: long version> = l0;

        return;
    }

    public long getResetInterval()
    {
        long $l0;
        org.apache.tika.parser.chm.accessor.ChmLzxcControlData r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcControlData;

        $l0 = r0.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: long resetInterval>;

        return $l0;
    }

    protected void setResetInterval(long)
    {
        long l0;
        org.apache.tika.parser.chm.accessor.ChmLzxcControlData r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcControlData;

        l0 := @parameter0: long;

        r0.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: long resetInterval> = l0;

        return;
    }

    public long getWindowSize()
    {
        long $l0;
        org.apache.tika.parser.chm.accessor.ChmLzxcControlData r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcControlData;

        $l0 = r0.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: long windowSize>;

        return $l0;
    }

    protected void setWindowSize(long)
    {
        long l0;
        org.apache.tika.parser.chm.accessor.ChmLzxcControlData r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcControlData;

        l0 := @parameter0: long;

        r0.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: long windowSize> = l0;

        return;
    }

    public long getWindowsPerReset()
    {
        long $l0;
        org.apache.tika.parser.chm.accessor.ChmLzxcControlData r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcControlData;

        $l0 = r0.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: long windowsPerReset>;

        return $l0;
    }

    protected void setWindowsPerReset(long)
    {
        long l0;
        org.apache.tika.parser.chm.accessor.ChmLzxcControlData r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcControlData;

        l0 := @parameter0: long;

        r0.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: long windowsPerReset> = l0;

        return;
    }

    public long getUnknown_18()
    {
        long $l0;
        org.apache.tika.parser.chm.accessor.ChmLzxcControlData r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcControlData;

        $l0 = r0.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: long unknown_18>;

        return $l0;
    }

    protected void setUnknown_18(long)
    {
        long l0;
        org.apache.tika.parser.chm.accessor.ChmLzxcControlData r0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcControlData;

        l0 := @parameter0: long;

        r0.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: long unknown_18> = l0;

        return;
    }

    private long unmarshalUInt32(byte[], long) throws org.apache.tika.parser.chm.exception.ChmParsingException
    {
        byte[] r1;
        org.apache.tika.parser.chm.exception.ChmParsingException $r5;
        byte $b2, $b5, $b10, $b15;
        boolean $z0;
        org.apache.tika.parser.chm.accessor.ChmLzxcControlData r0;
        long l23, l24;
        java.lang.AssertionError $r4;
        int $i0, $i1, $i3, $i4, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i14, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i25, $i26, $i27, $i28;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcControlData;

        r1 := @parameter0: byte[];

        l23 := @parameter1: long;

        $z0 = <org.apache.tika.parser.chm.accessor.ChmLzxcControlData: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if r1 == null goto label1;

        $i22 = lengthof r1;

        if $i22 > 0 goto label2;

     label1:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        $i0 = specialinvoke r0.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: int getDataRemained()>();

        if 4 <= $i0 goto label3;

        $r5 = new org.apache.tika.parser.chm.exception.ChmParsingException;

        specialinvoke $r5.<org.apache.tika.parser.chm.exception.ChmParsingException: void <init>(java.lang.String)>("4 > dataLenght");

        throw $r5;

     label3:
        $i1 = specialinvoke r0.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: int getCurrentPlace()>();

        $b2 = r1[$i1];

        $i3 = specialinvoke r0.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: int getCurrentPlace()>();

        $i4 = $i3 + 1;

        $b5 = r1[$i4];

        $i25 = (int) $b5;

        $i6 = $i25 << 8;

        $i26 = (int) $b2;

        $i7 = $i26 | $i6;

        $i8 = specialinvoke r0.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: int getCurrentPlace()>();

        $i9 = $i8 + 2;

        $b10 = r1[$i9];

        $i27 = (int) $b10;

        $i11 = $i27 << 16;

        $i12 = $i7 | $i11;

        $i13 = specialinvoke r0.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: int getCurrentPlace()>();

        $i14 = $i13 + 3;

        $b15 = r1[$i14];

        $i28 = (int) $b15;

        $i16 = $i28 << 24;

        $i17 = $i12 | $i16;

        l24 = (long) $i17;

        $i18 = specialinvoke r0.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: int getDataRemained()>();

        $i19 = $i18 - 4;

        specialinvoke r0.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: void setDataRemained(int)>($i19);

        $i20 = specialinvoke r0.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: int getCurrentPlace()>();

        $i21 = $i20 + 4;

        specialinvoke r0.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: void setCurrentPlace(int)>($i21);

        return l24;
    }

    private void unmarshalCharArray(byte[], org.apache.tika.parser.chm.accessor.ChmLzxcControlData, int) throws org.apache.tika.exception.TikaException
    {
        byte[] r0, $r2;
        org.apache.tika.parser.chm.accessor.ChmLzxcControlData r1, r3;
        int i0, $i1, $i2, $i3, $i4;

        r3 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcControlData;

        r0 := @parameter0: byte[];

        r1 := @parameter1: org.apache.tika.parser.chm.accessor.ChmLzxcControlData;

        i0 := @parameter2: int;

        staticinvoke <org.apache.tika.parser.chm.assertion.ChmAssert: void assertByteArrayNotNull(byte[])>(r0);

        staticinvoke <org.apache.tika.parser.chm.assertion.ChmAssert: void assertChmAccessorNotNull(org.apache.tika.parser.chm.accessor.ChmAccessor)>(r1);

        staticinvoke <org.apache.tika.parser.chm.assertion.ChmAssert: void assertPositiveInt(int)>(i0);

        $r2 = virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: byte[] getSignature()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 4, $r2, 0, i0);

        $i1 = specialinvoke r3.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: int getCurrentPlace()>();

        $i2 = $i1 + i0;

        specialinvoke r3.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: void setCurrentPlace(int)>($i2);

        $i3 = specialinvoke r3.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: int getDataRemained()>();

        $i4 = $i3 - i0;

        specialinvoke r3.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: void setDataRemained(int)>($i4);

        return;
    }

    public java.lang.String toString()
    {
        byte[] $r10;
        java.lang.StringBuilder $r0, $r1, $r2, $r4, $r5, $r7, $r8, $r11, $r12, $r14, $r15, $r16, $r18, $r20, $r21, $r22, $r23, $r25, $r26, $r27, $r28, $r30, $r31, $r32, $r33, $r35, $r36, $r37, $r39;
        java.io.UnsupportedEncodingException $r42;
        org.apache.tika.parser.chm.accessor.ChmLzxcControlData r3;
        long $l0, $l1, $l2, $l3, $l4, $l5;
        java.lang.AssertionError $r43;
        java.lang.String $r6, $r9, $r13, $r17, $r19, $r24, $r29, $r34, $r38, $r40, $r41;

        r3 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcControlData;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("size(unknown):=");

        $l0 = virtualinvoke r3.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: long getSize()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

     label1:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("signature(Compression type identifier):=");

        $r9 = new java.lang.String;

        $r10 = virtualinvoke r3.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: byte[] getSignature()>();

        specialinvoke $r9.<java.lang.String: void <init>(byte[],java.lang.String)>($r10, "UTF-8");

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

     label2:
        goto label4;

     label3:
        $r42 := @caughtexception;

        $r43 = new java.lang.AssertionError;

        specialinvoke $r43.<java.lang.AssertionError: void <init>(java.lang.Object)>("UTF-8 not supported.");

        throw $r43;

     label4:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("version(Possibly numeric code for LZX):=");

        $l1 = virtualinvoke r3.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: long getVersion()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r17 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("resetInterval(The Huffman reset interval):=");

        $l2 = virtualinvoke r3.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: long getResetInterval()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("windowSize:=");

        $l3 = virtualinvoke r3.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: long getWindowSize()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("windowsPerReset(unknown (sometimes 2, sometimes 1, sometimes 0):=");

        $l4 = virtualinvoke r3.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: long getWindowsPerReset()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown_18:=");

        $l5 = virtualinvoke r3.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: long getUnknown_18()>();

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5);

        $r38 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r39 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        $r41 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r41;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public void parse(byte[], org.apache.tika.parser.chm.accessor.ChmLzxcControlData) throws org.apache.tika.exception.TikaException
    {
        byte[] r0, $r6;
        org.apache.tika.parser.chm.exception.ChmParsingException $r1, $r4, $r7, $r8;
        byte $b14, $b16, $b18, $b20;
        boolean $z0;
        java.io.UnsupportedEncodingException $r9;
        org.apache.tika.parser.chm.accessor.ChmLzxcControlData r2, r3;
        long $l2, $l3, $l4, $l5, $l6, $l7, $l8, $l9, $l10, $l11, $l13, $l15, $l17, $l19, $l21, $l22, $l23, $l24;
        java.lang.AssertionError $r10;
        int $i0, $i1, $i12;
        java.lang.String $r5;

        r3 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcControlData;

        r0 := @parameter0: byte[];

        r2 := @parameter1: org.apache.tika.parser.chm.accessor.ChmLzxcControlData;

        if r0 == null goto label01;

        $i0 = lengthof r0;

        if $i0 >= 24 goto label02;

     label01:
        $r1 = new org.apache.tika.parser.chm.exception.ChmParsingException;

        specialinvoke $r1.<org.apache.tika.parser.chm.exception.ChmParsingException: void <init>(java.lang.String)>("we want at least 0x18 bytes");

        throw $r1;

     label02:
        $i1 = lengthof r0;

        specialinvoke r2.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: void setDataRemained(int)>($i1);

        $l2 = virtualinvoke r2.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: long getSize()>();

        $l3 = specialinvoke r3.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: long unmarshalUInt32(byte[],long)>(r0, $l2);

        virtualinvoke r2.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: void setSize(long)>($l3);

        specialinvoke r2.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: void unmarshalCharArray(byte[],org.apache.tika.parser.chm.accessor.ChmLzxcControlData,int)>(r0, r2, 4);

        $l4 = virtualinvoke r2.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: long getVersion()>();

        $l5 = specialinvoke r3.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: long unmarshalUInt32(byte[],long)>(r0, $l4);

        virtualinvoke r2.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: void setVersion(long)>($l5);

        $l6 = virtualinvoke r2.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: long getResetInterval()>();

        $l7 = specialinvoke r3.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: long unmarshalUInt32(byte[],long)>(r0, $l6);

        virtualinvoke r2.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: void setResetInterval(long)>($l7);

        $l8 = virtualinvoke r2.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: long getWindowSize()>();

        $l9 = specialinvoke r3.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: long unmarshalUInt32(byte[],long)>(r0, $l8);

        virtualinvoke r2.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: void setWindowSize(long)>($l9);

        $l10 = virtualinvoke r2.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: long getWindowsPerReset()>();

        $l11 = specialinvoke r3.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: long unmarshalUInt32(byte[],long)>(r0, $l10);

        virtualinvoke r2.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: void setWindowsPerReset(long)>($l11);

        $i12 = lengthof r0;

        if $i12 < 28 goto label03;

        $l23 = virtualinvoke r2.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: long getUnknown_18()>();

        $l24 = specialinvoke r3.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: long unmarshalUInt32(byte[],long)>(r0, $l23);

        virtualinvoke r2.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: void setUnknown_18(long)>($l24);

        goto label04;

     label03:
        virtualinvoke r2.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: void setUnknown_18(long)>(0L);

     label04:
        $l13 = virtualinvoke r2.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: long getVersion()>();

        $b14 = $l13 cmp 2L;

        if $b14 != 0 goto label05;

        $l21 = virtualinvoke r3.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: long getWindowSize()>();

        $l22 = $l21 * 32768L;

        virtualinvoke r2.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: void setWindowSize(long)>($l22);

     label05:
        $l15 = virtualinvoke r2.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: long getWindowSize()>();

        $b16 = $l15 cmp 0L;

        if $b16 == 0 goto label06;

        $l17 = virtualinvoke r2.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: long getResetInterval()>();

        $b18 = $l17 cmp 0L;

        if $b18 != 0 goto label07;

     label06:
        $r4 = new org.apache.tika.parser.chm.exception.ChmParsingException;

        specialinvoke $r4.<org.apache.tika.parser.chm.exception.ChmParsingException: void <init>(java.lang.String)>("window size / resetInterval should be more than zero");

        throw $r4;

     label07:
        $l19 = virtualinvoke r2.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: long getWindowSize()>();

        $b20 = $l19 cmp 1L;

        if $b20 != 0 goto label08;

        $r8 = new org.apache.tika.parser.chm.exception.ChmParsingException;

        specialinvoke $r8.<org.apache.tika.parser.chm.exception.ChmParsingException: void <init>(java.lang.String)>("window size / resetInterval should be more than 1");

        throw $r8;

     label08:
        $r5 = new java.lang.String;

        $r6 = virtualinvoke r2.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: byte[] getSignature()>();

        specialinvoke $r5.<java.lang.String: void <init>(byte[],java.lang.String)>($r6, "UTF-8");

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("LZXC");

        if $z0 != 0 goto label09;

        $r7 = new org.apache.tika.parser.chm.exception.ChmParsingException;

        specialinvoke $r7.<org.apache.tika.parser.chm.exception.ChmParsingException: void <init>(java.lang.String)>("the signature does not seem to be correct");

        throw $r7;

     label09:
        goto label11;

     label10:
        $r9 := @caughtexception;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>(java.lang.Object)>("UTF-8 not supported.");

        throw $r10;

     label11:
        return;

        catch java.io.UnsupportedEncodingException from label08 to label09 with label10;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r0;

        r0 := @parameter0: java.lang.String[];

        return;
    }

    public volatile void parse(byte[], java.lang.Object) throws org.apache.tika.exception.TikaException
    {
        byte[] r1;
        org.apache.tika.parser.chm.accessor.ChmLzxcControlData r0, $r3;
        java.lang.Object r2;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmLzxcControlData;

        r1 := @parameter0: byte[];

        r2 := @parameter1: java.lang.Object;

        $r3 = (org.apache.tika.parser.chm.accessor.ChmLzxcControlData) r2;

        virtualinvoke r0.<org.apache.tika.parser.chm.accessor.ChmLzxcControlData: void parse(byte[],org.apache.tika.parser.chm.accessor.ChmLzxcControlData)>(r1, $r3);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.apache.tika.parser.chm.accessor.ChmLzxcControlData: long serialVersionUID> = -7897854774939631565L;

        $r0 = class "Lorg/apache/tika/parser/chm/accessor/ChmLzxcControlData;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.tika.parser.chm.accessor.ChmLzxcControlData: boolean $assertionsDisabled> = $z1;

        return;
    }
}
