public class org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader extends java.lang.Object implements org.springframework.beans.factory.xml.BeanDefinitionDocumentReader
{
    public static final java.lang.String BEAN_ELEMENT;
    public static final java.lang.String ALIAS_ELEMENT;
    public static final java.lang.String NAME_ATTRIBUTE;
    public static final java.lang.String ALIAS_ATTRIBUTE;
    public static final java.lang.String IMPORT_ELEMENT;
    public static final java.lang.String RESOURCE_ATTRIBUTE;
    protected final org.apache.commons.logging.Log logger;
    private org.springframework.beans.factory.xml.XmlReaderContext readerContext;

    public void <init>()
    {
        org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader r0;
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;

        r0 := @this: org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader: org.apache.commons.logging.Log logger> = $r2;

        return;
    }

    public void registerBeanDefinitions(org.w3c.dom.Document, org.springframework.beans.factory.xml.XmlReaderContext)
    {
        org.w3c.dom.Element $r4;
        org.w3c.dom.Document r3;
        org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader r0;
        org.springframework.beans.factory.xml.XmlReaderContext r1;
        org.springframework.beans.factory.xml.BeanDefinitionParserDelegate $r5;
        org.apache.commons.logging.Log $r2;

        r0 := @this: org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader;

        r3 := @parameter0: org.w3c.dom.Document;

        r1 := @parameter1: org.springframework.beans.factory.xml.XmlReaderContext;

        r0.<org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader: org.springframework.beans.factory.xml.XmlReaderContext readerContext> = r1;

        $r2 = r0.<org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Loading bean definitions");

        $r4 = interfaceinvoke r3.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        $r5 = virtualinvoke r0.<org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader: org.springframework.beans.factory.xml.BeanDefinitionParserDelegate createHelper(org.springframework.beans.factory.xml.XmlReaderContext,org.w3c.dom.Element)>(r1, $r4);

        virtualinvoke r0.<org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader: void preProcessXml(org.w3c.dom.Element)>($r4);

        virtualinvoke r0.<org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader: void parseBeanDefinitions(org.w3c.dom.Element,org.springframework.beans.factory.xml.BeanDefinitionParserDelegate)>($r4, $r5);

        virtualinvoke r0.<org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader: void postProcessXml(org.w3c.dom.Element)>($r4);

        return;
    }

    protected org.springframework.beans.factory.xml.BeanDefinitionParserDelegate createHelper(org.springframework.beans.factory.xml.XmlReaderContext, org.w3c.dom.Element)
    {
        org.w3c.dom.Element r2;
        org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader r3;
        org.springframework.beans.factory.xml.BeanDefinitionParserDelegate $r0;
        org.springframework.beans.factory.xml.XmlReaderContext r1;

        r3 := @this: org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader;

        r1 := @parameter0: org.springframework.beans.factory.xml.XmlReaderContext;

        r2 := @parameter1: org.w3c.dom.Element;

        $r0 = new org.springframework.beans.factory.xml.BeanDefinitionParserDelegate;

        specialinvoke $r0.<org.springframework.beans.factory.xml.BeanDefinitionParserDelegate: void <init>(org.springframework.beans.factory.xml.XmlReaderContext)>(r1);

        virtualinvoke $r0.<org.springframework.beans.factory.xml.BeanDefinitionParserDelegate: void initDefaults(org.w3c.dom.Element)>(r2);

        return $r0;
    }

    protected final org.springframework.beans.factory.xml.XmlReaderContext getReaderContext()
    {
        org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader r0;
        org.springframework.beans.factory.xml.XmlReaderContext $r1;

        r0 := @this: org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader;

        $r1 = r0.<org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader: org.springframework.beans.factory.xml.XmlReaderContext readerContext>;

        return $r1;
    }

    protected java.lang.Object extractSource(org.w3c.dom.Element)
    {
        org.w3c.dom.Element r1;
        org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader r0;
        org.springframework.beans.factory.xml.XmlReaderContext $r2;
        java.lang.Object $r3;

        r0 := @this: org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader;

        r1 := @parameter0: org.w3c.dom.Element;

        $r2 = r0.<org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader: org.springframework.beans.factory.xml.XmlReaderContext readerContext>;

        $r3 = virtualinvoke $r2.<org.springframework.beans.factory.xml.XmlReaderContext: java.lang.Object extractSource(java.lang.Object)>(r1);

        return $r3;
    }

    protected void parseBeanDefinitions(org.w3c.dom.Element, org.springframework.beans.factory.xml.BeanDefinitionParserDelegate)
    {
        org.w3c.dom.NodeList $r2;
        org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader r5;
        org.w3c.dom.Element r1, r4;
        org.w3c.dom.Node $r3;
        int i0, $i1;
        org.springframework.beans.factory.xml.BeanDefinitionParserDelegate r0;
        boolean $z0, $z1, $z2;

        r5 := @this: org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader;

        r1 := @parameter0: org.w3c.dom.Element;

        r0 := @parameter1: org.springframework.beans.factory.xml.BeanDefinitionParserDelegate;

        $z0 = virtualinvoke r0.<org.springframework.beans.factory.xml.BeanDefinitionParserDelegate: boolean isDefaultNamespace(org.w3c.dom.Node)>(r1);

        if $z0 == 0 goto label5;

        $r2 = interfaceinvoke r1.<org.w3c.dom.Element: org.w3c.dom.NodeList getChildNodes()>();

        i0 = 0;

        goto label4;

     label1:
        $r3 = interfaceinvoke $r2.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i0);

        $z1 = $r3 instanceof org.w3c.dom.Element;

        if $z1 == 0 goto label3;

        r4 = (org.w3c.dom.Element) $r3;

        $z2 = virtualinvoke r0.<org.springframework.beans.factory.xml.BeanDefinitionParserDelegate: boolean isDefaultNamespace(org.w3c.dom.Node)>(r4);

        if $z2 == 0 goto label2;

        specialinvoke r5.<org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader: void parseDefaultElement(org.w3c.dom.Element,org.springframework.beans.factory.xml.BeanDefinitionParserDelegate)>(r4, r0);

        goto label3;

     label2:
        virtualinvoke r0.<org.springframework.beans.factory.xml.BeanDefinitionParserDelegate: org.springframework.beans.factory.config.BeanDefinition parseCustomElement(org.w3c.dom.Element)>(r4);

     label3:
        i0 = i0 + 1;

     label4:
        $i1 = interfaceinvoke $r2.<org.w3c.dom.NodeList: int getLength()>();

        if i0 < $i1 goto label1;

        goto label6;

     label5:
        virtualinvoke r0.<org.springframework.beans.factory.xml.BeanDefinitionParserDelegate: org.springframework.beans.factory.config.BeanDefinition parseCustomElement(org.w3c.dom.Element)>(r1);

     label6:
        return;
    }

    private void parseDefaultElement(org.w3c.dom.Element, org.springframework.beans.factory.xml.BeanDefinitionParserDelegate)
    {
        org.w3c.dom.Element r1;
        org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader r2;
        org.springframework.beans.factory.xml.BeanDefinitionParserDelegate r0;
        boolean $z0, $z1, $z2;

        r2 := @this: org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader;

        r1 := @parameter0: org.w3c.dom.Element;

        r0 := @parameter1: org.springframework.beans.factory.xml.BeanDefinitionParserDelegate;

        $z0 = virtualinvoke r0.<org.springframework.beans.factory.xml.BeanDefinitionParserDelegate: boolean nodeNameEquals(org.w3c.dom.Node,java.lang.String)>(r1, "import");

        if $z0 == 0 goto label1;

        virtualinvoke r2.<org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader: void importBeanDefinitionResource(org.w3c.dom.Element)>(r1);

        goto label3;

     label1:
        $z1 = virtualinvoke r0.<org.springframework.beans.factory.xml.BeanDefinitionParserDelegate: boolean nodeNameEquals(org.w3c.dom.Node,java.lang.String)>(r1, "alias");

        if $z1 == 0 goto label2;

        virtualinvoke r2.<org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader: void processAliasRegistration(org.w3c.dom.Element)>(r1);

        goto label3;

     label2:
        $z2 = virtualinvoke r0.<org.springframework.beans.factory.xml.BeanDefinitionParserDelegate: boolean nodeNameEquals(org.w3c.dom.Node,java.lang.String)>(r1, "bean");

        if $z2 == 0 goto label3;

        virtualinvoke r2.<org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader: void processBeanDefinition(org.w3c.dom.Element,org.springframework.beans.factory.xml.BeanDefinitionParserDelegate)>(r1, r0);

     label3:
        return;
    }

    protected void importBeanDefinitionResource(org.w3c.dom.Element)
    {
        org.springframework.beans.factory.xml.XmlReaderContext $r5, $r8, $r12, $r23, $r25, $r36, $r38, $r44, $r46, $r55;
        org.springframework.core.io.Resource $r6, $r7, $r9;
        org.springframework.core.io.Resource[] $r52, $r54;
        java.lang.StringBuilder $r16, $r18, $r19, $r20, $r21, $r28, $r30, $r31, $r32, $r33, $r39, $r40, $r41, $r47, $r48, $r49;
        java.lang.Object[] $r53;
        java.lang.String $r1, $r2, $r11, $r14, $r22, $r34, $r42, $r50;
        java.util.LinkedHashSet $r3;
        org.springframework.beans.factory.xml.XmlBeanDefinitionReader $r13, $r24, $r26;
        java.io.IOException $r43;
        org.springframework.beans.factory.BeanDefinitionStoreException $r37, $r45;
        java.net.URL $r10;
        java.net.URISyntaxException $r51;
        org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader r4;
        java.net.URI $r35;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6, $z7;
        int $i0, i1, $i2;
        org.w3c.dom.Element r0;
        org.apache.commons.logging.Log $r15, $r17, $r27, $r29;
        java.lang.Object $r56;

        r4 := @this: org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader;

        r0 := @parameter0: org.w3c.dom.Element;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("resource");

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r1);

        if $z0 != 0 goto label01;

        $r36 = virtualinvoke r4.<org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader: org.springframework.beans.factory.xml.XmlReaderContext getReaderContext()>();

        virtualinvoke $r36.<org.springframework.beans.factory.xml.XmlReaderContext: void error(java.lang.String,java.lang.Object)>("Resource location must not be empty", r0);

        return;

     label01:
        $r2 = staticinvoke <org.springframework.util.SystemPropertyUtils: java.lang.String resolvePlaceholders(java.lang.String)>($r1);

        $r3 = new java.util.LinkedHashSet;

        specialinvoke $r3.<java.util.LinkedHashSet: void <init>(int)>(4);

        z6 = 0;

     label02:
        $z1 = staticinvoke <org.springframework.core.io.support.ResourcePatternUtils: boolean isUrl(java.lang.String)>($r2);

        if $z1 != 0 goto label03;

        $r35 = staticinvoke <org.springframework.util.ResourceUtils: java.net.URI toURI(java.lang.String)>($r2);

        $z5 = virtualinvoke $r35.<java.net.URI: boolean isAbsolute()>();

        if $z5 != 0 goto label03;

        $z7 = 0;

        goto label04;

     label03:
        $z7 = 1;

     label04:
        z6 = $z7;

     label05:
        goto label07;

     label06:
        $r51 := @caughtexception;

     label07:
        if z6 == 0 goto label11;

     label08:
        $r25 = virtualinvoke r4.<org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader: org.springframework.beans.factory.xml.XmlReaderContext getReaderContext()>();

        $r26 = virtualinvoke $r25.<org.springframework.beans.factory.xml.XmlReaderContext: org.springframework.beans.factory.xml.XmlBeanDefinitionReader getReader()>();

        $i0 = virtualinvoke $r26.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(java.lang.String,java.util.Set)>($r2, $r3);

        $r27 = r4.<org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader: org.apache.commons.logging.Log logger>;

        $z4 = interfaceinvoke $r27.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z4 == 0 goto label17;

        $r29 = r4.<org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader: org.apache.commons.logging.Log logger>;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>(java.lang.String)>("Imported ");

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bean definitions from URL location [");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r29.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r34);

     label09:
        goto label17;

     label10:
        $r45 := @caughtexception;

        $r46 = virtualinvoke r4.<org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader: org.springframework.beans.factory.xml.XmlReaderContext getReaderContext()>();

        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>(java.lang.String)>("Failed to import bean definitions from URL location [");

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r46.<org.springframework.beans.factory.xml.XmlReaderContext: void error(java.lang.String,java.lang.Object,java.lang.Throwable)>($r50, r0, $r45);

        goto label17;

     label11:
        $r5 = virtualinvoke r4.<org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader: org.springframework.beans.factory.xml.XmlReaderContext getReaderContext()>();

        $r6 = virtualinvoke $r5.<org.springframework.beans.factory.xml.XmlReaderContext: org.springframework.core.io.Resource getResource()>();

        $r7 = interfaceinvoke $r6.<org.springframework.core.io.Resource: org.springframework.core.io.Resource createRelative(java.lang.String)>($r2);

        $z2 = interfaceinvoke $r7.<org.springframework.core.io.Resource: boolean exists()>();

        if $z2 == 0 goto label12;

        $r23 = virtualinvoke r4.<org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader: org.springframework.beans.factory.xml.XmlReaderContext getReaderContext()>();

        $r24 = virtualinvoke $r23.<org.springframework.beans.factory.xml.XmlReaderContext: org.springframework.beans.factory.xml.XmlBeanDefinitionReader getReader()>();

        i1 = virtualinvoke $r24.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.Resource)>($r7);

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r7);

        goto label13;

     label12:
        $r8 = virtualinvoke r4.<org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader: org.springframework.beans.factory.xml.XmlReaderContext getReaderContext()>();

        $r9 = virtualinvoke $r8.<org.springframework.beans.factory.xml.XmlReaderContext: org.springframework.core.io.Resource getResource()>();

        $r10 = interfaceinvoke $r9.<org.springframework.core.io.Resource: java.net.URL getURL()>();

        $r11 = virtualinvoke $r10.<java.net.URL: java.lang.String toString()>();

        $r12 = virtualinvoke r4.<org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader: org.springframework.beans.factory.xml.XmlReaderContext getReaderContext()>();

        $r13 = virtualinvoke $r12.<org.springframework.beans.factory.xml.XmlReaderContext: org.springframework.beans.factory.xml.XmlBeanDefinitionReader getReader()>();

        $r14 = staticinvoke <org.springframework.util.StringUtils: java.lang.String applyRelativePath(java.lang.String,java.lang.String)>($r11, $r2);

        i1 = virtualinvoke $r13.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(java.lang.String,java.util.Set)>($r14, $r3);

     label13:
        $r15 = r4.<org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader: org.apache.commons.logging.Log logger>;

        $z3 = interfaceinvoke $r15.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z3 == 0 goto label17;

        $r17 = r4.<org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader: org.apache.commons.logging.Log logger>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>("Imported ");

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bean definitions from relative location [");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r17.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r22);

     label14:
        goto label17;

     label15:
        $r43 := @caughtexception;

        $r44 = virtualinvoke r4.<org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader: org.springframework.beans.factory.xml.XmlReaderContext getReaderContext()>();

        virtualinvoke $r44.<org.springframework.beans.factory.xml.XmlReaderContext: void error(java.lang.String,java.lang.Object,java.lang.Throwable)>("Failed to resolve current resource location", r0, $r43);

        goto label17;

     label16:
        $r37 := @caughtexception;

        $r38 = virtualinvoke r4.<org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader: org.springframework.beans.factory.xml.XmlReaderContext getReaderContext()>();

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>(java.lang.String)>("Failed to import bean definitions from relative location [");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r38.<org.springframework.beans.factory.xml.XmlReaderContext: void error(java.lang.String,java.lang.Object,java.lang.Throwable)>($r42, r0, $r37);

     label17:
        $i2 = interfaceinvoke $r3.<java.util.Set: int size()>();

        $r52 = newarray (org.springframework.core.io.Resource)[$i2];

        $r53 = interfaceinvoke $r3.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r52);

        $r54 = (org.springframework.core.io.Resource[]) $r53;

        $r55 = virtualinvoke r4.<org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader: org.springframework.beans.factory.xml.XmlReaderContext getReaderContext()>();

        $r56 = virtualinvoke r4.<org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader: java.lang.Object extractSource(org.w3c.dom.Element)>(r0);

        virtualinvoke $r55.<org.springframework.beans.factory.xml.XmlReaderContext: void fireImportProcessed(java.lang.String,org.springframework.core.io.Resource[],java.lang.Object)>($r2, $r54, $r56);

        return;

        catch java.net.URISyntaxException from label02 to label05 with label06;
        catch org.springframework.beans.factory.BeanDefinitionStoreException from label08 to label09 with label10;
        catch java.io.IOException from label11 to label14 with label15;
        catch org.springframework.beans.factory.BeanDefinitionStoreException from label11 to label14 with label16;
    }

    protected void processAliasRegistration(org.w3c.dom.Element)
    {
        org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader r3;
        org.springframework.beans.factory.xml.XmlReaderContext $r4, $r6, $r8, $r9, $r11;
        org.springframework.beans.factory.support.BeanDefinitionRegistry $r5;
        java.lang.String $r1, $r2, $r17;
        boolean $z0, $z1, z2;
        java.lang.Exception $r10;
        org.w3c.dom.Element r0;
        java.lang.Object $r7;
        java.lang.StringBuilder $r12, $r13, $r14, $r15, $r16;

        r3 := @this: org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader;

        r0 := @parameter0: org.w3c.dom.Element;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("name");

        $r2 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("alias");

        z2 = 1;

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r1);

        if $z0 != 0 goto label1;

        $r9 = virtualinvoke r3.<org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader: org.springframework.beans.factory.xml.XmlReaderContext getReaderContext()>();

        virtualinvoke $r9.<org.springframework.beans.factory.xml.XmlReaderContext: void error(java.lang.String,java.lang.Object)>("Name must not be empty", r0);

        z2 = 0;

     label1:
        $z1 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r2);

        if $z1 != 0 goto label2;

        $r8 = virtualinvoke r3.<org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader: org.springframework.beans.factory.xml.XmlReaderContext getReaderContext()>();

        virtualinvoke $r8.<org.springframework.beans.factory.xml.XmlReaderContext: void error(java.lang.String,java.lang.Object)>("Alias must not be empty", r0);

        z2 = 0;

     label2:
        if z2 == 0 goto label7;

     label3:
        $r4 = virtualinvoke r3.<org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader: org.springframework.beans.factory.xml.XmlReaderContext getReaderContext()>();

        $r5 = virtualinvoke $r4.<org.springframework.beans.factory.xml.XmlReaderContext: org.springframework.beans.factory.support.BeanDefinitionRegistry getRegistry()>();

        interfaceinvoke $r5.<org.springframework.beans.factory.support.BeanDefinitionRegistry: void registerAlias(java.lang.String,java.lang.String)>($r1, $r2);

     label4:
        goto label6;

     label5:
        $r10 := @caughtexception;

        $r11 = virtualinvoke r3.<org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader: org.springframework.beans.factory.xml.XmlReaderContext getReaderContext()>();

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("Failed to register alias \'");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' for bean with name \'");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<org.springframework.beans.factory.xml.XmlReaderContext: void error(java.lang.String,java.lang.Object,java.lang.Throwable)>($r17, r0, $r10);

     label6:
        $r6 = virtualinvoke r3.<org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader: org.springframework.beans.factory.xml.XmlReaderContext getReaderContext()>();

        $r7 = virtualinvoke r3.<org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader: java.lang.Object extractSource(org.w3c.dom.Element)>(r0);

        virtualinvoke $r6.<org.springframework.beans.factory.xml.XmlReaderContext: void fireAliasRegistered(java.lang.String,java.lang.String,java.lang.Object)>($r1, $r2, $r7);

     label7:
        return;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    protected void processBeanDefinition(org.w3c.dom.Element, org.springframework.beans.factory.xml.BeanDefinitionParserDelegate)
    {
        org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader r4;
        org.springframework.beans.factory.xml.XmlReaderContext $r5, $r7, $r10;
        org.springframework.beans.factory.support.BeanDefinitionRegistry $r6;
        org.springframework.beans.factory.config.BeanDefinitionHolder $r2, $r3;
        org.springframework.beans.factory.xml.BeanDefinitionParserDelegate r0;
        org.springframework.beans.factory.parsing.BeanComponentDefinition $r8;
        java.lang.String $r12, $r15;
        org.springframework.beans.factory.BeanDefinitionStoreException $r9;
        org.w3c.dom.Element r1;
        java.lang.StringBuilder $r11, $r13, $r14;

        r4 := @this: org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader;

        r1 := @parameter0: org.w3c.dom.Element;

        r0 := @parameter1: org.springframework.beans.factory.xml.BeanDefinitionParserDelegate;

        $r2 = virtualinvoke r0.<org.springframework.beans.factory.xml.BeanDefinitionParserDelegate: org.springframework.beans.factory.config.BeanDefinitionHolder parseBeanDefinitionElement(org.w3c.dom.Element)>(r1);

        if $r2 == null goto label5;

        $r3 = virtualinvoke r0.<org.springframework.beans.factory.xml.BeanDefinitionParserDelegate: org.springframework.beans.factory.config.BeanDefinitionHolder decorateBeanDefinitionIfRequired(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinitionHolder)>(r1, $r2);

     label1:
        $r5 = virtualinvoke r4.<org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader: org.springframework.beans.factory.xml.XmlReaderContext getReaderContext()>();

        $r6 = virtualinvoke $r5.<org.springframework.beans.factory.xml.XmlReaderContext: org.springframework.beans.factory.support.BeanDefinitionRegistry getRegistry()>();

        staticinvoke <org.springframework.beans.factory.support.BeanDefinitionReaderUtils: void registerBeanDefinition(org.springframework.beans.factory.config.BeanDefinitionHolder,org.springframework.beans.factory.support.BeanDefinitionRegistry)>($r3, $r6);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        $r10 = virtualinvoke r4.<org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader: org.springframework.beans.factory.xml.XmlReaderContext getReaderContext()>();

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>("Failed to register bean definition with name \'");

        $r12 = virtualinvoke $r3.<org.springframework.beans.factory.config.BeanDefinitionHolder: java.lang.String getBeanName()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<org.springframework.beans.factory.xml.XmlReaderContext: void error(java.lang.String,java.lang.Object,java.lang.Throwable)>($r15, r1, $r9);

     label4:
        $r7 = virtualinvoke r4.<org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader: org.springframework.beans.factory.xml.XmlReaderContext getReaderContext()>();

        $r8 = new org.springframework.beans.factory.parsing.BeanComponentDefinition;

        specialinvoke $r8.<org.springframework.beans.factory.parsing.BeanComponentDefinition: void <init>(org.springframework.beans.factory.config.BeanDefinitionHolder)>($r3);

        virtualinvoke $r7.<org.springframework.beans.factory.xml.XmlReaderContext: void fireComponentRegistered(org.springframework.beans.factory.parsing.ComponentDefinition)>($r8);

     label5:
        return;

        catch org.springframework.beans.factory.BeanDefinitionStoreException from label1 to label2 with label3;
    }

    protected void preProcessXml(org.w3c.dom.Element)
    {
        org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader r0;
        org.w3c.dom.Element r1;

        r0 := @this: org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader;

        r1 := @parameter0: org.w3c.dom.Element;

        return;
    }

    protected void postProcessXml(org.w3c.dom.Element)
    {
        org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader r0;
        org.w3c.dom.Element r1;

        r0 := @this: org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader;

        r1 := @parameter0: org.w3c.dom.Element;

        return;
    }

    public static void <clinit>()
    {
        <org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader: java.lang.String RESOURCE_ATTRIBUTE> = "resource";

        <org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader: java.lang.String IMPORT_ELEMENT> = "import";

        <org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader: java.lang.String ALIAS_ATTRIBUTE> = "alias";

        <org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader: java.lang.String NAME_ATTRIBUTE> = "name";

        <org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader: java.lang.String ALIAS_ELEMENT> = "alias";

        <org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader: java.lang.String BEAN_ELEMENT> = "bean";

        return;
    }
}
