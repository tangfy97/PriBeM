public class ucar.nc2.iosp.nids.Nidsiosp extends ucar.nc2.iosp.AbstractIOServiceProvider
{
    protected boolean readonly;
    private ucar.nc2.NetcdfFile ncfile;
    private ucar.unidata.io.RandomAccessFile myRaf;
    protected ucar.nc2.iosp.nids.Nidsheader headerParser;
    private int pcode;
    static final int Z_DEFLATED;
    static final int DEF_WBITS;
    protected int fileUsed;
    protected int recStart;
    protected boolean debug;
    protected boolean debugSize;
    protected boolean debugSPIO;
    protected boolean showHeaderBytes;
    protected boolean fill;
    protected java.util.HashMap dimHash;

    public void <init>()
    {
        java.util.HashMap $r1;
        ucar.nc2.iosp.nids.Nidsiosp r0;

        r0 := @this: ucar.nc2.iosp.nids.Nidsiosp;

        specialinvoke r0.<ucar.nc2.iosp.AbstractIOServiceProvider: void <init>()>();

        r0.<ucar.nc2.iosp.nids.Nidsiosp: int fileUsed> = 0;

        r0.<ucar.nc2.iosp.nids.Nidsiosp: int recStart> = 0;

        r0.<ucar.nc2.iosp.nids.Nidsiosp: boolean debug> = 0;

        r0.<ucar.nc2.iosp.nids.Nidsiosp: boolean debugSize> = 0;

        r0.<ucar.nc2.iosp.nids.Nidsiosp: boolean debugSPIO> = 0;

        r0.<ucar.nc2.iosp.nids.Nidsiosp: boolean showHeaderBytes> = 0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>(int)>(50);

        r0.<ucar.nc2.iosp.nids.Nidsiosp: java.util.HashMap dimHash> = $r1;

        return;
    }

    public boolean isValidFile(ucar.unidata.io.RandomAccessFile)
    {
        ucar.unidata.io.RandomAccessFile r1;
        ucar.nc2.iosp.nids.Nidsheader $r0;
        ucar.nc2.iosp.nids.Nidsiosp r2;
        boolean $z0;

        r2 := @this: ucar.nc2.iosp.nids.Nidsiosp;

        r1 := @parameter0: ucar.unidata.io.RandomAccessFile;

        $r0 = new ucar.nc2.iosp.nids.Nidsheader;

        specialinvoke $r0.<ucar.nc2.iosp.nids.Nidsheader: void <init>()>();

        $z0 = virtualinvoke $r0.<ucar.nc2.iosp.nids.Nidsheader: boolean isValidFile(ucar.unidata.io.RandomAccessFile)>(r1);

        return $z0;
    }

    public java.lang.String getFileTypeId()
    {
        ucar.nc2.iosp.nids.Nidsiosp r0;

        r0 := @this: ucar.nc2.iosp.nids.Nidsiosp;

        return "NEXRAD-3";
    }

    public java.lang.String getFileTypeDescription()
    {
        ucar.nc2.iosp.nids.Nidsiosp r0;

        r0 := @this: ucar.nc2.iosp.nids.Nidsiosp;

        return "NEXRAD Level-III Products";
    }

    public void open(ucar.unidata.io.RandomAccessFile, ucar.nc2.NetcdfFile, ucar.nc2.util.CancelTask) throws java.io.IOException
    {
        ucar.unidata.io.RandomAccessFile r2, $r5;
        short $s0;
        ucar.nc2.util.CancelTask r9;
        ucar.nc2.iosp.nids.Nidsiosp r0;
        ucar.nc2.iosp.nids.Nidsheader $r6, $r7, $r10;
        int $i1;
        ucar.nc2.NetcdfFile r1, $r4, $r8;

        r0 := @this: ucar.nc2.iosp.nids.Nidsiosp;

        r2 := @parameter0: ucar.unidata.io.RandomAccessFile;

        r1 := @parameter1: ucar.nc2.NetcdfFile;

        r9 := @parameter2: ucar.nc2.util.CancelTask;

        r0.<ucar.nc2.iosp.nids.Nidsiosp: ucar.nc2.NetcdfFile ncfile> = r1;

        r0.<ucar.nc2.iosp.nids.Nidsiosp: ucar.unidata.io.RandomAccessFile myRaf> = r2;

        $r10 = new ucar.nc2.iosp.nids.Nidsheader;

        specialinvoke $r10.<ucar.nc2.iosp.nids.Nidsheader: void <init>()>();

        r0.<ucar.nc2.iosp.nids.Nidsiosp: ucar.nc2.iosp.nids.Nidsheader headerParser> = $r10;

        $r6 = r0.<ucar.nc2.iosp.nids.Nidsiosp: ucar.nc2.iosp.nids.Nidsheader headerParser>;

        $r5 = r0.<ucar.nc2.iosp.nids.Nidsiosp: ucar.unidata.io.RandomAccessFile myRaf>;

        $r4 = r0.<ucar.nc2.iosp.nids.Nidsiosp: ucar.nc2.NetcdfFile ncfile>;

        virtualinvoke $r6.<ucar.nc2.iosp.nids.Nidsheader: void read(ucar.unidata.io.RandomAccessFile,ucar.nc2.NetcdfFile)>($r5, $r4);

        $r7 = r0.<ucar.nc2.iosp.nids.Nidsiosp: ucar.nc2.iosp.nids.Nidsheader headerParser>;

        $s0 = $r7.<ucar.nc2.iosp.nids.Nidsheader: short pcode>;

        $i1 = (int) $s0;

        r0.<ucar.nc2.iosp.nids.Nidsiosp: int pcode> = $i1;

        $r8 = r0.<ucar.nc2.iosp.nids.Nidsiosp: ucar.nc2.NetcdfFile ncfile>;

        virtualinvoke $r8.<ucar.nc2.NetcdfFile: void finish()>();

        return;
    }

    public ucar.ma2.Array readNestedData(ucar.nc2.Variable, ucar.ma2.Section) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        byte[] $r8;
        java.nio.ByteBuffer $r9;
        ucar.nc2.iosp.nids.Nidsheader $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        ucar.nc2.iosp.nids.Nidsheader$Vinfo r5;
        java.util.List $r3;
        java.lang.StringBuilder $r17, $r18, $r20;
        ucar.ma2.Section r2;
        long $l0;
        ucar.nc2.Structure $r1;
        ucar.nc2.iosp.nids.Nidsiosp r6;
        int $i1;
        ucar.nc2.Variable r0;
        java.lang.String $r10, $r11, $r12, $r13, $r14, $r15, $r19, $r21, $r22, $r23, $r25, $r26, $r28, $r29, $r31, $r32, $r34, $r35, $r37, $r38;
        java.lang.UnsupportedOperationException $r16;
        ucar.ma2.Array $r24, $r27, $r30, $r33, $r36, $r39;
        java.lang.Object $r4;

        r6 := @this: ucar.nc2.iosp.nids.Nidsiosp;

        r0 := @parameter0: ucar.nc2.Variable;

        r2 := @parameter1: ucar.ma2.Section;

        $r1 = virtualinvoke r0.<ucar.nc2.Variable: ucar.nc2.Structure getParentStructure()>();

        $r3 = virtualinvoke r2.<ucar.ma2.Section: java.util.List getRanges()>();

        $r4 = virtualinvoke $r1.<ucar.nc2.Variable: java.lang.Object getSPobject()>();

        r5 = (ucar.nc2.iosp.nids.Nidsheader$Vinfo) $r4;

        $r7 = r6.<ucar.nc2.iosp.nids.Nidsiosp: ucar.nc2.iosp.nids.Nidsheader headerParser>;

        $l0 = r5.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: long doff>;

        $i1 = (int) $l0;

        $r8 = virtualinvoke $r7.<ucar.nc2.iosp.nids.Nidsheader: byte[] getUncompData(int,int)>($i1, 0);

        $r9 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r8);

        $r10 = virtualinvoke $r1.<ucar.nc2.Variable: java.lang.String getName()>();

        $z0 = virtualinvoke $r10.<java.lang.String: boolean startsWith(java.lang.String)>("VADWindSpeed");

        if $z0 == 0 goto label1;

        $r37 = virtualinvoke $r1.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $r38 = virtualinvoke r0.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $r39 = virtualinvoke r6.<ucar.nc2.iosp.nids.Nidsiosp: ucar.ma2.Array readNestedWindBarbData(java.lang.String,java.lang.String,java.nio.ByteBuffer,ucar.nc2.iosp.nids.Nidsheader$Vinfo,java.util.List)>($r37, $r38, $r9, r5, $r3);

        return $r39;

     label1:
        $r11 = virtualinvoke $r1.<ucar.nc2.Variable: java.lang.String getName()>();

        $z1 = virtualinvoke $r11.<java.lang.String: boolean startsWith(java.lang.String)>("unlinkedVectorStruct");

        if $z1 == 0 goto label2;

        $r34 = virtualinvoke $r1.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $r35 = virtualinvoke r0.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $r36 = virtualinvoke r6.<ucar.nc2.iosp.nids.Nidsiosp: ucar.ma2.Array readNestedDataUnlinkVector(java.lang.String,java.lang.String,java.nio.ByteBuffer,ucar.nc2.iosp.nids.Nidsheader$Vinfo,java.util.List)>($r34, $r35, $r9, r5, $r3);

        return $r36;

     label2:
        $r12 = virtualinvoke $r1.<ucar.nc2.Variable: java.lang.String getName()>();

        $z2 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>("linkedVectorStruct");

        if $z2 == 0 goto label3;

        $r31 = virtualinvoke $r1.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $r32 = virtualinvoke r0.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $r33 = virtualinvoke r6.<ucar.nc2.iosp.nids.Nidsiosp: ucar.ma2.Array readNestedLinkedVectorData(java.lang.String,java.lang.String,java.nio.ByteBuffer,ucar.nc2.iosp.nids.Nidsheader$Vinfo,java.util.List)>($r31, $r32, $r9, r5, $r3);

        return $r33;

     label3:
        $r13 = virtualinvoke $r1.<ucar.nc2.Variable: java.lang.String getName()>();

        $z3 = virtualinvoke $r13.<java.lang.String: boolean startsWith(java.lang.String)>("textStruct");

        if $z3 == 0 goto label4;

        $r28 = virtualinvoke $r1.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $r29 = virtualinvoke r0.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $r30 = virtualinvoke r6.<ucar.nc2.iosp.nids.Nidsiosp: ucar.ma2.Array readNestedTextStringData(java.lang.String,java.lang.String,java.nio.ByteBuffer,ucar.nc2.iosp.nids.Nidsheader$Vinfo,java.util.List)>($r28, $r29, $r9, r5, $r3);

        return $r30;

     label4:
        $r14 = virtualinvoke $r1.<ucar.nc2.Variable: java.lang.String getName()>();

        $z4 = virtualinvoke $r14.<java.lang.String: boolean startsWith(java.lang.String)>("VectorArrow");

        if $z4 == 0 goto label5;

        $r25 = virtualinvoke $r1.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $r26 = virtualinvoke r0.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $r27 = virtualinvoke r6.<ucar.nc2.iosp.nids.Nidsiosp: ucar.ma2.Array readNestedVectorArrowData(java.lang.String,java.lang.String,java.nio.ByteBuffer,ucar.nc2.iosp.nids.Nidsheader$Vinfo,java.util.List)>($r25, $r26, $r9, r5, $r3);

        return $r27;

     label5:
        $r15 = virtualinvoke $r1.<ucar.nc2.Variable: java.lang.String getName()>();

        $z5 = virtualinvoke $r15.<java.lang.String: boolean startsWith(java.lang.String)>("circleStruct");

        if $z5 == 0 goto label6;

        $r22 = virtualinvoke $r1.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $r23 = virtualinvoke r0.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $r24 = virtualinvoke r6.<ucar.nc2.iosp.nids.Nidsiosp: ucar.ma2.Array readNestedCircleStructData(java.lang.String,java.lang.String,java.nio.ByteBuffer,ucar.nc2.iosp.nids.Nidsheader$Vinfo,java.util.List)>($r22, $r23, $r9, r5, $r3);

        return $r24;

     label6:
        $r16 = new java.lang.UnsupportedOperationException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown nested variable ");

        $r19 = virtualinvoke r0.<ucar.nc2.Variable: java.lang.String getName()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r21);

        throw $r16;
    }

    public ucar.ma2.Array readData(ucar.nc2.Variable, ucar.ma2.Section) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        byte[] $r7;
        ucar.nc2.iosp.nids.Nidsheader $r6;
        ucar.nc2.Attribute $r65, $r77, $r84, $r91;
        long $l0, $l2;
        ucar.ma2.Array r109, $r115, $r116;
        ucar.ma2.ArrayStructure $r32, $r40, $r46, $r48, $r50, $r52, $r54;
        java.util.Date $r67;
        int[] $r38, $r44, $r59, $r63, $r71, $r75, $r82, $r89, $r96, $r100, $r104, $r108, $r114;
        ucar.ma2.DataType $r36, $r42, $r57, $r61, $r69, $r73, $r80, $r87, $r94, $r98, $r102, $r106, $r112;
        int $i1, $i3, $i4, i5;
        ucar.nc2.Variable r2;
        java.lang.Object $r3, $r35, $r41, $r56, $r60, $r72, $r79, $r86, $r93, $r97, $r101, $r105, $r111;
        java.lang.Class $r37, $r43, $r58, $r62, $r70, $r74, $r81, $r88, $r95, $r99, $r103, $r107, $r113;
        ucar.ma2.Section r0;
        double[] r68;
        ucar.nc2.iosp.nids.Nidsiosp r5;
        java.lang.String $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r33, $r34, $r39, $r45, $r47, $r49, $r51, $r53, $r55, $r66, $r110;
        java.lang.Number $r78, $r85, $r92;
        java.nio.ByteBuffer $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23;
        ucar.nc2.iosp.nids.Nidsheader$Vinfo r4;
        java.util.List $r1;
        float $f0;
        ucar.nc2.NetcdfFile $r64, $r76, $r83, $r90;
        double d0, $d1, $d2, $d3, $d4;

        r5 := @this: ucar.nc2.iosp.nids.Nidsiosp;

        r2 := @parameter0: ucar.nc2.Variable;

        r0 := @parameter1: ucar.ma2.Section;

        $r1 = virtualinvoke r0.<ucar.ma2.Section: java.util.List getRanges()>();

        $r3 = virtualinvoke r2.<ucar.nc2.Variable: java.lang.Object getSPobject()>();

        r4 = (ucar.nc2.iosp.nids.Nidsheader$Vinfo) $r3;

        $r6 = r5.<ucar.nc2.iosp.nids.Nidsiosp: ucar.nc2.iosp.nids.Nidsheader headerParser>;

        $l0 = r4.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: long doff>;

        $i1 = (int) $l0;

        $r7 = virtualinvoke $r6.<ucar.nc2.iosp.nids.Nidsheader: byte[] getUncompData(int,int)>($i1, 0);

        $r8 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r7);

        $r9 = virtualinvoke r2.<ucar.nc2.Variable: java.lang.String getName()>();

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("azimuth");

        if $z0 == 0 goto label01;

        $r105 = virtualinvoke r5.<ucar.nc2.iosp.nids.Nidsiosp: java.lang.Object readRadialDataAzi(java.nio.ByteBuffer,ucar.nc2.iosp.nids.Nidsheader$Vinfo)>($r8, r4);

        $r106 = virtualinvoke r2.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r107 = virtualinvoke $r106.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r108 = virtualinvoke r2.<ucar.nc2.Variable: int[] getShape()>();

        r109 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r107, $r108, $r105);

        goto label24;

     label01:
        $r10 = virtualinvoke r2.<ucar.nc2.Variable: java.lang.String getName()>();

        $z1 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>("gate");

        if $z1 == 0 goto label02;

        $r101 = virtualinvoke r5.<ucar.nc2.iosp.nids.Nidsiosp: java.lang.Object readRadialDataGate(ucar.nc2.iosp.nids.Nidsheader$Vinfo)>(r4);

        $r102 = virtualinvoke r2.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r103 = virtualinvoke $r102.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r104 = virtualinvoke r2.<ucar.nc2.Variable: int[] getShape()>();

        r109 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r103, $r104, $r101);

        goto label24;

     label02:
        $r11 = virtualinvoke r2.<ucar.nc2.Variable: java.lang.String getName()>();

        $z2 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("elevation");

        if $z2 == 0 goto label03;

        $r97 = virtualinvoke r5.<ucar.nc2.iosp.nids.Nidsiosp: java.lang.Object readRadialDataEle(java.nio.ByteBuffer,ucar.nc2.iosp.nids.Nidsheader$Vinfo)>($r8, r4);

        $r98 = virtualinvoke r2.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r99 = virtualinvoke $r98.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r100 = virtualinvoke r2.<ucar.nc2.Variable: int[] getShape()>();

        r109 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r99, $r100, $r97);

        goto label24;

     label03:
        $r12 = virtualinvoke r2.<ucar.nc2.Variable: java.lang.String getName()>();

        $z3 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>("latitude");

        if $z3 == 0 goto label04;

        $r90 = r5.<ucar.nc2.iosp.nids.Nidsiosp: ucar.nc2.NetcdfFile ncfile>;

        $r91 = virtualinvoke $r90.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute findGlobalAttribute(java.lang.String)>("RadarLatitude");

        $r92 = virtualinvoke $r91.<ucar.nc2.Attribute: java.lang.Number getNumericValue()>();

        $d4 = virtualinvoke $r92.<java.lang.Number: double doubleValue()>();

        $r93 = virtualinvoke r5.<ucar.nc2.iosp.nids.Nidsiosp: java.lang.Object readRadialDataLatLonAlt(double,ucar.nc2.iosp.nids.Nidsheader$Vinfo)>($d4, r4);

        $r94 = virtualinvoke r2.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r95 = virtualinvoke $r94.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r96 = virtualinvoke r2.<ucar.nc2.Variable: int[] getShape()>();

        r109 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r95, $r96, $r93);

        goto label24;

     label04:
        $r13 = virtualinvoke r2.<ucar.nc2.Variable: java.lang.String getName()>();

        $z4 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>("longitude");

        if $z4 == 0 goto label05;

        $r83 = r5.<ucar.nc2.iosp.nids.Nidsiosp: ucar.nc2.NetcdfFile ncfile>;

        $r84 = virtualinvoke $r83.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute findGlobalAttribute(java.lang.String)>("RadarLongitude");

        $r85 = virtualinvoke $r84.<ucar.nc2.Attribute: java.lang.Number getNumericValue()>();

        $d3 = virtualinvoke $r85.<java.lang.Number: double doubleValue()>();

        $r86 = virtualinvoke r5.<ucar.nc2.iosp.nids.Nidsiosp: java.lang.Object readRadialDataLatLonAlt(double,ucar.nc2.iosp.nids.Nidsheader$Vinfo)>($d3, r4);

        $r87 = virtualinvoke r2.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r88 = virtualinvoke $r87.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r89 = virtualinvoke r2.<ucar.nc2.Variable: int[] getShape()>();

        r109 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r88, $r89, $r86);

        goto label24;

     label05:
        $r14 = virtualinvoke r2.<ucar.nc2.Variable: java.lang.String getName()>();

        $z5 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>("altitude");

        if $z5 == 0 goto label06;

        $r76 = r5.<ucar.nc2.iosp.nids.Nidsiosp: ucar.nc2.NetcdfFile ncfile>;

        $r77 = virtualinvoke $r76.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute findGlobalAttribute(java.lang.String)>("RadarAltitude");

        $r78 = virtualinvoke $r77.<ucar.nc2.Attribute: java.lang.Number getNumericValue()>();

        $d2 = virtualinvoke $r78.<java.lang.Number: double doubleValue()>();

        $r79 = virtualinvoke r5.<ucar.nc2.iosp.nids.Nidsiosp: java.lang.Object readRadialDataLatLonAlt(double,ucar.nc2.iosp.nids.Nidsheader$Vinfo)>($d2, r4);

        $r80 = virtualinvoke r2.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r81 = virtualinvoke $r80.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r82 = virtualinvoke r2.<ucar.nc2.Variable: int[] getShape()>();

        r109 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r81, $r82, $r79);

        goto label24;

     label06:
        $r15 = virtualinvoke r2.<ucar.nc2.Variable: java.lang.String getName()>();

        $z6 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>("distance");

        if $z6 == 0 goto label07;

        $r72 = virtualinvoke r5.<ucar.nc2.iosp.nids.Nidsiosp: java.lang.Object readDistance(ucar.nc2.iosp.nids.Nidsheader$Vinfo)>(r4);

        $r73 = virtualinvoke r2.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r74 = virtualinvoke $r73.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r75 = virtualinvoke r2.<ucar.nc2.Variable: int[] getShape()>();

        r109 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r74, $r75, $r72);

        goto label24;

     label07:
        $r16 = virtualinvoke r2.<ucar.nc2.Variable: java.lang.String getName()>();

        $z7 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>("rays_time");

        if $z7 == 0 goto label10;

        $r64 = r5.<ucar.nc2.iosp.nids.Nidsiosp: ucar.nc2.NetcdfFile ncfile>;

        $r65 = virtualinvoke $r64.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute findGlobalAttribute(java.lang.String)>("DateCreated");

        $r66 = virtualinvoke $r65.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

        $r67 = staticinvoke <ucar.nc2.units.DateUnit: java.util.Date getStandardOrISO(java.lang.String)>($r66);

        $l2 = virtualinvoke $r67.<java.util.Date: long getTime()>();

        d0 = (double) $l2;

        $i3 = r4.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int yt>;

        r68 = newarray (double)[$i3];

        i5 = 0;

     label08:
        $i4 = r4.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int yt>;

        if i5 >= $i4 goto label09;

        $f0 = (float) d0;

        $d1 = (double) $f0;

        r68[i5] = $d1;

        i5 = i5 + 1;

        goto label08;

     label09:
        $r69 = virtualinvoke r2.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r70 = virtualinvoke $r69.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r71 = virtualinvoke r2.<ucar.nc2.Variable: int[] getShape()>();

        r109 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r70, $r71, r68);

        goto label24;

     label10:
        $r17 = virtualinvoke r2.<ucar.nc2.Variable: java.lang.String getName()>();

        $z8 = virtualinvoke $r17.<java.lang.String: boolean startsWith(java.lang.String)>("EchoTop");

        if $z8 != 0 goto label11;

        $r18 = virtualinvoke r2.<ucar.nc2.Variable: java.lang.String getName()>();

        $z9 = virtualinvoke $r18.<java.lang.String: boolean startsWith(java.lang.String)>("VertLiquid");

        if $z9 != 0 goto label11;

        $r19 = virtualinvoke r2.<ucar.nc2.Variable: java.lang.String getName()>();

        $z10 = virtualinvoke $r19.<java.lang.String: boolean startsWith(java.lang.String)>("BaseReflectivityComp");

        if $z10 != 0 goto label11;

        $r20 = virtualinvoke r2.<ucar.nc2.Variable: java.lang.String getName()>();

        $z11 = virtualinvoke $r20.<java.lang.String: boolean startsWith(java.lang.String)>("LayerCompReflect");

        if $z11 == 0 goto label12;

     label11:
        $r110 = virtualinvoke r2.<ucar.nc2.Variable: java.lang.String getName()>();

        $r111 = virtualinvoke r5.<ucar.nc2.iosp.nids.Nidsiosp: java.lang.Object readOneArrayData(java.nio.ByteBuffer,ucar.nc2.iosp.nids.Nidsheader$Vinfo,java.lang.String)>($r8, r4, $r110);

        $r112 = virtualinvoke r2.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r113 = virtualinvoke $r112.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r114 = virtualinvoke r2.<ucar.nc2.Variable: int[] getShape()>();

        r109 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r113, $r114, $r111);

        goto label24;

     label12:
        $r21 = virtualinvoke r2.<ucar.nc2.Variable: java.lang.String getName()>();

        $z12 = virtualinvoke $r21.<java.lang.String: boolean startsWith(java.lang.String)>("PrecipArray");

        if $z12 == 0 goto label13;

        $r60 = virtualinvoke r5.<ucar.nc2.iosp.nids.Nidsiosp: java.lang.Object readOneArrayData1(java.nio.ByteBuffer,ucar.nc2.iosp.nids.Nidsheader$Vinfo)>($r8, r4);

        $r61 = virtualinvoke r2.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r62 = virtualinvoke $r61.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r63 = virtualinvoke r2.<ucar.nc2.Variable: int[] getShape()>();

        r109 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r62, $r63, $r60);

        goto label24;

     label13:
        $r22 = virtualinvoke r2.<ucar.nc2.Variable: java.lang.String getName()>();

        $z13 = virtualinvoke $r22.<java.lang.String: boolean startsWith(java.lang.String)>("Precip");

        if $z13 == 0 goto label14;

        $z23 = r4.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: boolean isRadial>;

        if $z23 != 0 goto label14;

        $r55 = virtualinvoke r2.<ucar.nc2.Variable: java.lang.String getName()>();

        $r56 = virtualinvoke r5.<ucar.nc2.iosp.nids.Nidsiosp: java.lang.Object readOneArrayData(java.nio.ByteBuffer,ucar.nc2.iosp.nids.Nidsheader$Vinfo,java.lang.String)>($r8, r4, $r55);

        $r57 = virtualinvoke r2.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r58 = virtualinvoke $r57.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r59 = virtualinvoke r2.<ucar.nc2.Variable: int[] getShape()>();

        r109 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r58, $r59, $r56);

        goto label24;

     label14:
        $r23 = virtualinvoke r2.<ucar.nc2.Variable: java.lang.String getName()>();

        $z14 = virtualinvoke $r23.<java.lang.String: boolean equals(java.lang.Object)>("unlinkedVectorStruct");

        if $z14 == 0 goto label15;

        $r53 = virtualinvoke r2.<ucar.nc2.Variable: java.lang.String getName()>();

        $r54 = virtualinvoke r5.<ucar.nc2.iosp.nids.Nidsiosp: ucar.ma2.ArrayStructure readUnlinkedVectorData(java.lang.String,java.nio.ByteBuffer,ucar.nc2.iosp.nids.Nidsheader$Vinfo)>($r53, $r8, r4);

        return $r54;

     label15:
        $r24 = virtualinvoke r2.<ucar.nc2.Variable: java.lang.String getName()>();

        $z15 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>("linkedVectorStruct");

        if $z15 == 0 goto label16;

        $r51 = virtualinvoke r2.<ucar.nc2.Variable: java.lang.String getName()>();

        $r52 = virtualinvoke r5.<ucar.nc2.iosp.nids.Nidsiosp: ucar.ma2.ArrayStructure readLinkedVectorData(java.lang.String,java.nio.ByteBuffer,ucar.nc2.iosp.nids.Nidsheader$Vinfo)>($r51, $r8, r4);

        return $r52;

     label16:
        $r25 = virtualinvoke r2.<ucar.nc2.Variable: java.lang.String getName()>();

        $z16 = virtualinvoke $r25.<java.lang.String: boolean startsWith(java.lang.String)>("textStruct");

        if $z16 == 0 goto label17;

        $r49 = virtualinvoke r2.<ucar.nc2.Variable: java.lang.String getName()>();

        $r50 = virtualinvoke r5.<ucar.nc2.iosp.nids.Nidsiosp: ucar.ma2.ArrayStructure readTextStringData(java.lang.String,java.nio.ByteBuffer,ucar.nc2.iosp.nids.Nidsheader$Vinfo)>($r49, $r8, r4);

        return $r50;

     label17:
        $r26 = virtualinvoke r2.<ucar.nc2.Variable: java.lang.String getName()>();

        $z17 = virtualinvoke $r26.<java.lang.String: boolean startsWith(java.lang.String)>("VADWindSpeed");

        if $z17 == 0 goto label18;

        $r47 = virtualinvoke r2.<ucar.nc2.Variable: java.lang.String getName()>();

        $r48 = virtualinvoke r5.<ucar.nc2.iosp.nids.Nidsiosp: ucar.ma2.ArrayStructure readWindBarbData(java.lang.String,java.nio.ByteBuffer,ucar.nc2.iosp.nids.Nidsheader$Vinfo,java.util.List)>($r47, $r8, r4, null);

        return $r48;

     label18:
        $r27 = virtualinvoke r2.<ucar.nc2.Variable: java.lang.String getName()>();

        $z18 = virtualinvoke $r27.<java.lang.String: boolean startsWith(java.lang.String)>("VectorArrow");

        if $z18 == 0 goto label19;

        $r45 = virtualinvoke r2.<ucar.nc2.Variable: java.lang.String getName()>();

        $r46 = virtualinvoke r5.<ucar.nc2.iosp.nids.Nidsiosp: ucar.ma2.ArrayStructure readVectorArrowData(java.lang.String,java.nio.ByteBuffer,ucar.nc2.iosp.nids.Nidsheader$Vinfo)>($r45, $r8, r4);

        return $r46;

     label19:
        $r28 = virtualinvoke r2.<ucar.nc2.Variable: java.lang.String getName()>();

        $z19 = virtualinvoke $r28.<java.lang.String: boolean startsWith(java.lang.String)>("TabMessagePage");

        if $z19 == 0 goto label20;

        $r41 = virtualinvoke r5.<ucar.nc2.iosp.nids.Nidsiosp: java.lang.Object readTabAlphaNumData(java.nio.ByteBuffer,ucar.nc2.iosp.nids.Nidsheader$Vinfo)>($r8, r4);

        $r42 = virtualinvoke r2.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r43 = virtualinvoke $r42.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r44 = virtualinvoke r2.<ucar.nc2.Variable: int[] getShape()>();

        r109 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r43, $r44, $r41);

        goto label24;

     label20:
        $r29 = virtualinvoke r2.<ucar.nc2.Variable: java.lang.String getName()>();

        $z20 = virtualinvoke $r29.<java.lang.String: boolean startsWith(java.lang.String)>("circleStruct");

        if $z20 == 0 goto label21;

        $r39 = virtualinvoke r2.<ucar.nc2.Variable: java.lang.String getName()>();

        $r40 = virtualinvoke r5.<ucar.nc2.iosp.nids.Nidsiosp: ucar.ma2.ArrayStructure readCircleStructData(java.lang.String,java.nio.ByteBuffer,ucar.nc2.iosp.nids.Nidsheader$Vinfo)>($r39, $r8, r4);

        return $r40;

     label21:
        $r30 = virtualinvoke r2.<ucar.nc2.Variable: java.lang.String getName()>();

        $z21 = virtualinvoke $r30.<java.lang.String: boolean startsWith(java.lang.String)>("hail");

        if $z21 != 0 goto label22;

        $r33 = virtualinvoke r2.<ucar.nc2.Variable: java.lang.String getName()>();

        $z22 = virtualinvoke $r33.<java.lang.String: boolean startsWith(java.lang.String)>("TVS");

        if $z22 == 0 goto label23;

     label22:
        $r31 = virtualinvoke r2.<ucar.nc2.Variable: java.lang.String getName()>();

        $r32 = virtualinvoke r5.<ucar.nc2.iosp.nids.Nidsiosp: ucar.ma2.ArrayStructure readGraphicSymbolData(java.lang.String,java.nio.ByteBuffer,ucar.nc2.iosp.nids.Nidsheader$Vinfo)>($r31, $r8, r4);

        return $r32;

     label23:
        $r34 = virtualinvoke r2.<ucar.nc2.Variable: java.lang.String getName()>();

        $r35 = virtualinvoke r5.<ucar.nc2.iosp.nids.Nidsiosp: java.lang.Object readOneScanData(java.nio.ByteBuffer,ucar.nc2.iosp.nids.Nidsheader$Vinfo,java.lang.String)>($r8, r4, $r34);

        $r36 = virtualinvoke r2.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r37 = virtualinvoke $r36.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r38 = virtualinvoke r2.<ucar.nc2.Variable: int[] getShape()>();

        r109 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r37, $r38, $r35);

     label24:
        $r115 = virtualinvoke r109.<ucar.ma2.Array: ucar.ma2.Array sectionNoReduce(java.util.List)>($r1);

        $r116 = virtualinvoke $r115.<ucar.ma2.Array: ucar.ma2.Array copy()>();

        return $r116;
    }

    public ucar.ma2.Array readNestedGraphicSymbolData(java.lang.String, ucar.ma2.StructureMembers$Member, java.nio.ByteBuffer, ucar.nc2.iosp.nids.Nidsheader$Vinfo, java.util.List) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        ucar.ma2.ArrayStructure $r8;
        ucar.nc2.Structure r6;
        java.nio.ByteBuffer r7;
        ucar.ma2.StructureMembers$Member r15;
        short $s1;
        int[] r1, $r11;
        ucar.nc2.iosp.nids.Nidsiosp r2;
        int i0, i2;
        ucar.nc2.Variable $r5;
        java.lang.String r3;
        ucar.nc2.iosp.nids.Nidsheader$Vinfo r0;
        ucar.ma2.Array $r12, $r14;
        java.util.List r13;
        java.lang.Class $r10;
        ucar.nc2.NetcdfFile $r4;
        short[] r9;

        r2 := @this: ucar.nc2.iosp.nids.Nidsiosp;

        r3 := @parameter0: java.lang.String;

        r15 := @parameter1: ucar.ma2.StructureMembers$Member;

        r7 := @parameter2: java.nio.ByteBuffer;

        r0 := @parameter3: ucar.nc2.iosp.nids.Nidsheader$Vinfo;

        r13 := @parameter4: java.util.List;

        r1 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int[] pos>;

        i0 = lengthof r1;

        $r4 = r2.<ucar.nc2.iosp.nids.Nidsiosp: ucar.nc2.NetcdfFile ncfile>;

        $r5 = virtualinvoke $r4.<ucar.nc2.NetcdfFile: ucar.nc2.Variable findVariable(java.lang.String)>(r3);

        r6 = (ucar.nc2.Structure) $r5;

        $r8 = virtualinvoke r2.<ucar.nc2.iosp.nids.Nidsiosp: ucar.ma2.ArrayStructure readCircleStructData(java.lang.String,java.nio.ByteBuffer,ucar.nc2.iosp.nids.Nidsheader$Vinfo)>(r3, r7, r0);

        r9 = newarray (short)[i0];

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $s1 = virtualinvoke $r8.<ucar.ma2.ArrayStructure: short getScalarShort(int,ucar.ma2.StructureMembers$Member)>(i2, r15);

        r9[i2] = $s1;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r10 = <java.lang.Short: java.lang.Class TYPE>;

        $r11 = virtualinvoke r6.<ucar.nc2.Structure: int[] getShape()>();

        $r12 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r10, $r11, r9);

        $r14 = virtualinvoke $r12.<ucar.ma2.Array: ucar.ma2.Array sectionNoReduce(java.util.List)>(r13);

        return $r14;
    }

    public ucar.ma2.ArrayStructure readGraphicSymbolData(java.lang.String, java.nio.ByteBuffer, ucar.nc2.iosp.nids.Nidsheader$Vinfo) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        ucar.nc2.iosp.nids.Nidsiosp$MyArrayStructureBBpos $r11;
        ucar.nc2.iosp.nids.Nidsheader$Vinfo r0;
        ucar.nc2.Structure r7;
        ucar.ma2.StructureMembers$Member $r9, $r10;
        java.nio.ByteBuffer r13;
        ucar.ma2.StructureMembers $r8;
        int[] r1, r2, $r12;
        ucar.nc2.iosp.nids.Nidsiosp r3;
        int i0;
        ucar.nc2.Variable $r6;
        java.lang.String r4;
        ucar.nc2.NetcdfFile $r5;

        r3 := @this: ucar.nc2.iosp.nids.Nidsiosp;

        r4 := @parameter0: java.lang.String;

        r13 := @parameter1: java.nio.ByteBuffer;

        r0 := @parameter2: ucar.nc2.iosp.nids.Nidsheader$Vinfo;

        r1 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int[] pos>;

        r2 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int[] len>;

        i0 = lengthof r1;

        $r5 = r3.<ucar.nc2.iosp.nids.Nidsiosp: ucar.nc2.NetcdfFile ncfile>;

        $r6 = virtualinvoke $r5.<ucar.nc2.NetcdfFile: ucar.nc2.Variable findVariable(java.lang.String)>(r4);

        r7 = (ucar.nc2.Structure) $r6;

        $r8 = virtualinvoke r7.<ucar.nc2.Structure: ucar.ma2.StructureMembers makeStructureMembers()>();

        $r9 = virtualinvoke $r8.<ucar.ma2.StructureMembers: ucar.ma2.StructureMembers$Member findMember(java.lang.String)>("x_start");

        virtualinvoke $r9.<ucar.ma2.StructureMembers$Member: void setDataParam(int)>(0);

        $r10 = virtualinvoke $r8.<ucar.ma2.StructureMembers: ucar.ma2.StructureMembers$Member findMember(java.lang.String)>("y_start");

        virtualinvoke $r10.<ucar.ma2.StructureMembers$Member: void setDataParam(int)>(2);

        $r11 = new ucar.nc2.iosp.nids.Nidsiosp$MyArrayStructureBBpos;

        $r12 = newarray (int)[1];

        $r12[0] = i0;

        specialinvoke $r11.<ucar.nc2.iosp.nids.Nidsiosp$MyArrayStructureBBpos: void <init>(ucar.nc2.iosp.nids.Nidsiosp,ucar.ma2.StructureMembers,int[],java.nio.ByteBuffer,int[],int[])>(r3, $r8, $r12, r13, r1, r2);

        return $r11;
    }

    public ucar.ma2.Array readNestedLinkedVectorData(java.lang.String, java.lang.String, java.nio.ByteBuffer, ucar.nc2.iosp.nids.Nidsheader$Vinfo, java.util.List) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        ucar.ma2.ArrayStructure $r7;
        long $l0;
        ucar.nc2.Structure r4;
        java.nio.ByteBuffer r5;
        ucar.ma2.StructureMembers$Member $r10;
        short $s2;
        int[] $r13;
        ucar.nc2.iosp.nids.Nidsiosp r0;
        int i1, i3;
        ucar.nc2.Variable $r3;
        java.lang.String r1, r9;
        ucar.nc2.iosp.nids.Nidsheader$Vinfo r6;
        ucar.ma2.Array $r14, $r16;
        java.util.List r15;
        ucar.ma2.StructureMembers $r8;
        java.lang.Class $r12;
        ucar.nc2.NetcdfFile $r2;
        short[] r11;

        r0 := @this: ucar.nc2.iosp.nids.Nidsiosp;

        r1 := @parameter0: java.lang.String;

        r9 := @parameter1: java.lang.String;

        r5 := @parameter2: java.nio.ByteBuffer;

        r6 := @parameter3: ucar.nc2.iosp.nids.Nidsheader$Vinfo;

        r15 := @parameter4: java.util.List;

        $r2 = r0.<ucar.nc2.iosp.nids.Nidsiosp: ucar.nc2.NetcdfFile ncfile>;

        $r3 = virtualinvoke $r2.<ucar.nc2.NetcdfFile: ucar.nc2.Variable findVariable(java.lang.String)>(r1);

        r4 = (ucar.nc2.Structure) $r3;

        $r7 = virtualinvoke r0.<ucar.nc2.iosp.nids.Nidsiosp: ucar.ma2.ArrayStructure readLinkedVectorData(java.lang.String,java.nio.ByteBuffer,ucar.nc2.iosp.nids.Nidsheader$Vinfo)>(r1, r5, r6);

        $l0 = virtualinvoke r4.<ucar.nc2.Structure: long getSize()>();

        i1 = (int) $l0;

        $r8 = virtualinvoke $r7.<ucar.ma2.ArrayStructure: ucar.ma2.StructureMembers getStructureMembers()>();

        $r10 = virtualinvoke $r8.<ucar.ma2.StructureMembers: ucar.ma2.StructureMembers$Member findMember(java.lang.String)>(r9);

        r11 = newarray (short)[i1];

        i3 = 0;

     label1:
        if i3 >= i1 goto label2;

        $s2 = virtualinvoke $r7.<ucar.ma2.ArrayStructure: short getScalarShort(int,ucar.ma2.StructureMembers$Member)>(i3, $r10);

        r11[i3] = $s2;

        i3 = i3 + 1;

        goto label1;

     label2:
        $r12 = <java.lang.Short: java.lang.Class TYPE>;

        $r13 = virtualinvoke r4.<ucar.nc2.Structure: int[] getShape()>();

        $r14 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r12, $r13, r11);

        $r16 = virtualinvoke $r14.<ucar.ma2.Array: ucar.ma2.Array sectionNoReduce(java.util.List)>(r15);

        return $r16;
    }

    public ucar.ma2.ArrayStructure readLinkedVectorData(java.lang.String, java.nio.ByteBuffer, ucar.nc2.iosp.nids.Nidsheader$Vinfo) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        short[][] r9;
        java.nio.ByteBuffer r3;
        ucar.ma2.StructureMembers$Member $r16, $r21, $r26, $r31, $r36;
        int[] r1, r2, $r11, $r12, $r17, $r22, $r27, $r32;
        ucar.nc2.iosp.nids.Nidsheader$Vinfo r0;
        ucar.ma2.StructureMembers $r8;
        ucar.nc2.NetcdfFile $r6;
        short[] $r13, $r18, $r23, $r28, $r33, $r37, $r38, $r39, $r40, $r41;
        ucar.nc2.Structure r42;
        short $s3, $s4, $s5, $s6, s11;
        ucar.nc2.iosp.nids.Nidsiosp r4;
        int i0, $i1, $i2, $i7, $i8, i9, i10, i12, i13, i14, $i15;
        ucar.nc2.Variable $r7;
        java.lang.String r5;
        ucar.ma2.ArrayStructureMA $r10;
        ucar.ma2.Array $r15, $r20, $r25, $r30, $r35;
        java.lang.Class $r14, $r19, $r24, $r29, $r34;

        r4 := @this: ucar.nc2.iosp.nids.Nidsiosp;

        r5 := @parameter0: java.lang.String;

        r3 := @parameter1: java.nio.ByteBuffer;

        r0 := @parameter2: ucar.nc2.iosp.nids.Nidsheader$Vinfo;

        r1 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int[] pos>;

        r2 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int[] len>;

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(0);

        i0 = lengthof r1;

        i9 = 0;

        i10 = 0;

     label1:
        if i10 >= i0 goto label2;

        $i8 = r2[i10];

        i9 = i9 + $i8;

        i10 = i10 + 1;

        goto label1;

     label2:
        $r6 = r4.<ucar.nc2.iosp.nids.Nidsiosp: ucar.nc2.NetcdfFile ncfile>;

        $r7 = virtualinvoke $r6.<ucar.nc2.NetcdfFile: ucar.nc2.Variable findVariable(java.lang.String)>(r5);

        r42 = (ucar.nc2.Structure) $r7;

        $r8 = virtualinvoke r42.<ucar.nc2.Structure: ucar.ma2.StructureMembers makeStructureMembers()>();

        s11 = 0;

        i12 = 0;

        r9 = newmultiarray (short)[5][i9];

        i13 = 0;

     label3:
        if i13 >= i0 goto label8;

        $i1 = r1[i13];

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i1);

        $i2 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int code>;

        if $i2 != 9 goto label4;

        s11 = virtualinvoke r3.<java.nio.ByteBuffer: short getShort()>();

     label4:
        $s3 = virtualinvoke r3.<java.nio.ByteBuffer: short getShort()>();

        $s4 = virtualinvoke r3.<java.nio.ByteBuffer: short getShort()>();

        i14 = 0;

     label5:
        $i15 = r2[i13];

        if i14 >= $i15 goto label7;

        $s5 = virtualinvoke r3.<java.nio.ByteBuffer: short getShort()>();

        $s6 = virtualinvoke r3.<java.nio.ByteBuffer: short getShort()>();

        $i7 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int code>;

        if $i7 != 9 goto label6;

        $r41 = r9[0];

        $r41[i12] = s11;

     label6:
        $r37 = r9[1];

        $r37[i12] = $s3;

        $r38 = r9[2];

        $r38[i12] = $s4;

        $r39 = r9[3];

        $r39[i12] = $s5;

        $r40 = r9[4];

        $r40[i12] = $s6;

        i12 = i12 + 1;

        i14 = i14 + 1;

        goto label5;

     label7:
        i13 = i13 + 1;

        goto label3;

     label8:
        $r10 = new ucar.ma2.ArrayStructureMA;

        $r11 = newarray (int)[1];

        $r11[0] = i9;

        specialinvoke $r10.<ucar.ma2.ArrayStructureMA: void <init>(ucar.ma2.StructureMembers,int[])>($r8, $r11);

        $r14 = <java.lang.Short: java.lang.Class TYPE>;

        $r12 = newarray (int)[1];

        $r12[0] = i9;

        $r13 = r9[0];

        $r15 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r14, $r12, $r13);

        $r16 = virtualinvoke $r8.<ucar.ma2.StructureMembers: ucar.ma2.StructureMembers$Member findMember(java.lang.String)>("sValue");

        if $r16 == null goto label9;

        virtualinvoke $r16.<ucar.ma2.StructureMembers$Member: void setDataArray(ucar.ma2.Array)>($r15);

     label9:
        $r19 = <java.lang.Short: java.lang.Class TYPE>;

        $r17 = newarray (int)[1];

        $r17[0] = i9;

        $r18 = r9[1];

        $r20 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r19, $r17, $r18);

        $r21 = virtualinvoke $r8.<ucar.ma2.StructureMembers: ucar.ma2.StructureMembers$Member findMember(java.lang.String)>("x_start");

        virtualinvoke $r21.<ucar.ma2.StructureMembers$Member: void setDataArray(ucar.ma2.Array)>($r20);

        $r24 = <java.lang.Short: java.lang.Class TYPE>;

        $r22 = newarray (int)[1];

        $r22[0] = i9;

        $r23 = r9[2];

        $r25 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r24, $r22, $r23);

        $r26 = virtualinvoke $r8.<ucar.ma2.StructureMembers: ucar.ma2.StructureMembers$Member findMember(java.lang.String)>("y_start");

        virtualinvoke $r26.<ucar.ma2.StructureMembers$Member: void setDataArray(ucar.ma2.Array)>($r25);

        $r29 = <java.lang.Short: java.lang.Class TYPE>;

        $r27 = newarray (int)[1];

        $r27[0] = i9;

        $r28 = r9[3];

        $r30 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r29, $r27, $r28);

        $r31 = virtualinvoke $r8.<ucar.ma2.StructureMembers: ucar.ma2.StructureMembers$Member findMember(java.lang.String)>("x_end");

        virtualinvoke $r31.<ucar.ma2.StructureMembers$Member: void setDataArray(ucar.ma2.Array)>($r30);

        $r34 = <java.lang.Short: java.lang.Class TYPE>;

        $r32 = newarray (int)[1];

        $r32[0] = i9;

        $r33 = r9[4];

        $r35 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r34, $r32, $r33);

        $r36 = virtualinvoke $r8.<ucar.ma2.StructureMembers: ucar.ma2.StructureMembers$Member findMember(java.lang.String)>("y_end");

        virtualinvoke $r36.<ucar.ma2.StructureMembers$Member: void setDataArray(ucar.ma2.Array)>($r35);

        return $r10;
    }

    public ucar.ma2.Array readNestedCircleStructData(java.lang.String, java.lang.String, java.nio.ByteBuffer, ucar.nc2.iosp.nids.Nidsheader$Vinfo, java.util.List) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        ucar.ma2.ArrayStructure $r7;
        long $l0;
        ucar.nc2.Structure r4;
        java.nio.ByteBuffer r5;
        ucar.ma2.StructureMembers$Member $r10;
        short $s2;
        int[] $r13;
        ucar.nc2.iosp.nids.Nidsiosp r0;
        int i1, i3;
        ucar.nc2.Variable $r3;
        java.lang.String r1, r9;
        ucar.nc2.iosp.nids.Nidsheader$Vinfo r6;
        ucar.ma2.Array $r14, $r16;
        java.util.List r15;
        ucar.ma2.StructureMembers $r8;
        java.lang.Class $r12;
        ucar.nc2.NetcdfFile $r2;
        short[] r11;

        r0 := @this: ucar.nc2.iosp.nids.Nidsiosp;

        r1 := @parameter0: java.lang.String;

        r9 := @parameter1: java.lang.String;

        r5 := @parameter2: java.nio.ByteBuffer;

        r6 := @parameter3: ucar.nc2.iosp.nids.Nidsheader$Vinfo;

        r15 := @parameter4: java.util.List;

        $r2 = r0.<ucar.nc2.iosp.nids.Nidsiosp: ucar.nc2.NetcdfFile ncfile>;

        $r3 = virtualinvoke $r2.<ucar.nc2.NetcdfFile: ucar.nc2.Variable findVariable(java.lang.String)>(r1);

        r4 = (ucar.nc2.Structure) $r3;

        $r7 = virtualinvoke r0.<ucar.nc2.iosp.nids.Nidsiosp: ucar.ma2.ArrayStructure readCircleStructData(java.lang.String,java.nio.ByteBuffer,ucar.nc2.iosp.nids.Nidsheader$Vinfo)>(r1, r5, r6);

        $l0 = virtualinvoke r4.<ucar.nc2.Structure: long getSize()>();

        i1 = (int) $l0;

        $r8 = virtualinvoke $r7.<ucar.ma2.ArrayStructure: ucar.ma2.StructureMembers getStructureMembers()>();

        $r10 = virtualinvoke $r8.<ucar.ma2.StructureMembers: ucar.ma2.StructureMembers$Member findMember(java.lang.String)>(r9);

        r11 = newarray (short)[i1];

        i3 = 0;

     label1:
        if i3 >= i1 goto label2;

        $s2 = virtualinvoke $r7.<ucar.ma2.ArrayStructure: short getScalarShort(int,ucar.ma2.StructureMembers$Member)>(i3, $r10);

        r11[i3] = $s2;

        i3 = i3 + 1;

        goto label1;

     label2:
        $r12 = <java.lang.Short: java.lang.Class TYPE>;

        $r13 = virtualinvoke r4.<ucar.nc2.Structure: int[] getShape()>();

        $r14 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r12, $r13, r11);

        $r16 = virtualinvoke $r14.<ucar.ma2.Array: ucar.ma2.Array sectionNoReduce(java.util.List)>(r15);

        return $r16;
    }

    public ucar.ma2.ArrayStructure readCircleStructData(java.lang.String, java.nio.ByteBuffer, ucar.nc2.iosp.nids.Nidsheader$Vinfo) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        ucar.nc2.Structure r6;
        ucar.ma2.StructureMembers$Member $r8, $r9, $r10;
        java.nio.ByteBuffer r13;
        int[] r1, $r12;
        ucar.nc2.iosp.nids.Nidsiosp r2;
        int i0, $i1, $i2, i3, $i4, $i5, $i6, i7, i8;
        ucar.nc2.Variable $r5;
        java.lang.String r3, $r20;
        java.io.PrintStream $r15;
        ucar.ma2.ArrayStructureBBpos $r11;
        ucar.nc2.iosp.nids.Nidsheader$Vinfo r0;
        ucar.ma2.StructureMembers $r7;
        java.lang.StringBuilder $r14, $r16, $r17, $r18, $r19;
        ucar.nc2.NetcdfFile $r4;

        r2 := @this: ucar.nc2.iosp.nids.Nidsiosp;

        r3 := @parameter0: java.lang.String;

        r13 := @parameter1: java.nio.ByteBuffer;

        r0 := @parameter2: ucar.nc2.iosp.nids.Nidsheader$Vinfo;

        r1 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int[] pos>;

        i0 = lengthof r1;

        $r4 = r2.<ucar.nc2.iosp.nids.Nidsiosp: ucar.nc2.NetcdfFile ncfile>;

        $r5 = virtualinvoke $r4.<ucar.nc2.NetcdfFile: ucar.nc2.Variable findVariable(java.lang.String)>(r3);

        r6 = (ucar.nc2.Structure) $r5;

        $i2 = r1[1];

        $i1 = r1[0];

        i3 = $i2 - $i1;

        i8 = 1;

     label1:
        if i8 >= i0 goto label3;

        $i6 = r1[i8];

        $i4 = i8 - 1;

        $i5 = r1[$i4];

        i7 = $i6 - $i5;

        if i7 == i3 goto label2;

        $r15 = <java.lang.System: java.io.PrintStream out>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" PROBLEM at ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" == ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>($r20);

     label2:
        i8 = i8 + 1;

        goto label1;

     label3:
        $r7 = virtualinvoke r6.<ucar.nc2.Structure: ucar.ma2.StructureMembers makeStructureMembers()>();

        $r8 = virtualinvoke $r7.<ucar.ma2.StructureMembers: ucar.ma2.StructureMembers$Member findMember(java.lang.String)>("x_center");

        virtualinvoke $r8.<ucar.ma2.StructureMembers$Member: void setDataParam(int)>(0);

        $r9 = virtualinvoke $r7.<ucar.ma2.StructureMembers: ucar.ma2.StructureMembers$Member findMember(java.lang.String)>("y_center");

        virtualinvoke $r9.<ucar.ma2.StructureMembers$Member: void setDataParam(int)>(2);

        $r10 = virtualinvoke $r7.<ucar.ma2.StructureMembers: ucar.ma2.StructureMembers$Member findMember(java.lang.String)>("radius");

        virtualinvoke $r10.<ucar.ma2.StructureMembers$Member: void setDataParam(int)>(4);

        virtualinvoke $r7.<ucar.ma2.StructureMembers: void setStructureSize(int)>(i3);

        $r11 = new ucar.ma2.ArrayStructureBBpos;

        $r12 = newarray (int)[1];

        $r12[0] = i0;

        specialinvoke $r11.<ucar.ma2.ArrayStructureBBpos: void <init>(ucar.ma2.StructureMembers,int[],java.nio.ByteBuffer,int[])>($r7, $r12, r13, r1);

        return $r11;
    }

    public java.lang.Object readTabAlphaNumData(java.nio.ByteBuffer, ucar.nc2.iosp.nids.Nidsheader$Vinfo) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        byte[] r4;
        java.lang.String[] r1;
        java.nio.ByteBuffer r2;
        short $s3;
        ucar.nc2.iosp.nids.Nidsiosp r12;
        int i0, i1, $i2, $i4, i5, i6, $i7, $i9, $i10, $i11;
        java.lang.String $r9, $r15, $r18;
        ucar.nc2.iosp.nids.Nidsheader$Vinfo r0;
        java.lang.StringBuilder $r7, $r8, r13, $r14, $r16, $r17;

        r12 := @this: ucar.nc2.iosp.nids.Nidsiosp;

        r2 := @parameter0: java.nio.ByteBuffer;

        r0 := @parameter1: ucar.nc2.iosp.nids.Nidsheader$Vinfo;

        i0 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int xt>;

        i1 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int yt>;

        r1 = newarray (java.lang.String)[i0];

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(0);

        i5 = 0;

        i6 = 4;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        r13 = $r14;

     label1:
        if i5 >= i0 goto label3;

        $i2 = 128 + i6;

        if i1 <= $i2 goto label3;

        $s3 = virtualinvoke r2.<java.nio.ByteBuffer: short getShort()>();

        $i7 = (int) $s3;

        $i9 = (int) -1;

        if $i7 != $i9 goto label2;

        $r15 = new java.lang.String;

        specialinvoke $r15.<java.lang.String: void <init>(java.lang.StringBuilder)>(r13);

        r1[i5] = $r15;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        r13 = $r16;

        i5 = i5 + 1;

        i6 = i6 + 2;

        goto label1;

     label2:
        $i10 = (int) $s3;

        r4 = newarray (byte)[$i10];

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r4);

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = new java.lang.String;

        specialinvoke $r18.<java.lang.String: void <init>(byte[])>(r4);

        $r7 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $i11 = (int) $s3;

        $i4 = i6 + $i11;

        i6 = $i4 + 2;

        goto label1;

     label3:
        return r1;
    }

    public java.lang.Object readOneScanData(java.nio.ByteBuffer, ucar.nc2.iosp.nids.Nidsheader$Vinfo, java.lang.String) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        byte[] r1, r2, r13, r14, r15;
        byte $b5, $b7, $b9, $b10, $b19, $b21, $b28, $b30;
        float[] $r7, $r9, $r11, r17, r19, r21, r23;
        short $s8, $s12, $s14, $s16, $s18, $s35;
        int[] $r6, $r8, $r10, r16, r18, r20, r22;
        int $i0, $i1, i2, $i3, $i4, $i6, $i11, $i13, $i15, $i17, $i20, $i22, $i23, $i24, $i25, $i26, $i27, $i29, $i31, $i32, $i33, $i34, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, i48, i49, i50, i51, i52, i53, i54, i55, i56, i57, i58, i59, i60, i61, i62, i63, i64, i65, $i66, $i67, $i68, $i69, $i70, $i71, $i73, $i75, $i76, $i78, $i80, $i81, $i83, $i84, $i86, $i87, $i89;
        java.lang.Object $r12;
        ucar.nc2.iosp.nids.Nidsiosp r5;
        java.lang.String r4;
        java.nio.ByteBuffer r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        ucar.nc2.iosp.nids.Nidsheader$Vinfo r0;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34, $f35, $f36, $f37, $f38, $f39, $f40;
        double $d0, $d1;

        r5 := @this: ucar.nc2.iosp.nids.Nidsiosp;

        r3 := @parameter0: java.nio.ByteBuffer;

        r0 := @parameter1: ucar.nc2.iosp.nids.Nidsheader$Vinfo;

        r4 := @parameter2: java.lang.String;

        $i1 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int yt>;

        $i0 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int xt>;

        i2 = $i1 * $i0;

        $i3 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int xt>;

        r1 = newarray (byte)[$i3];

        r2 = newarray (byte)[i2];

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(0);

        i48 = 0;

     label01:
        $i4 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int yt>;

        if i48 >= $i4 goto label07;

        $s35 = virtualinvoke r3.<java.nio.ByteBuffer: short getShort()>();

        $z11 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: boolean isRadial>;

        if $z11 == 0 goto label02;

        virtualinvoke r3.<java.nio.ByteBuffer: short getShort()>();

        virtualinvoke r3.<java.nio.ByteBuffer: short getShort()>();

     label02:
        $i36 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int xt>;

        $i66 = (int) $s35;

        if $i36 == $i66 goto label03;

        $i67 = (int) $s35;

        $i44 = $i67 * 2;

        r13 = newarray (byte)[$i44];

        $i68 = (int) $s35;

        $i45 = $i68 * 2;

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(r13, 0, $i45);

        $i47 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int xt>;

        $i46 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int level>;

        $i69 = (int) $s35;

        r14 = virtualinvoke r5.<ucar.nc2.iosp.nids.Nidsiosp: byte[] readOneBeamData(byte[],int,int,int)>(r13, $i69, $i47, $i46);

        goto label04;

     label03:
        $i70 = (int) $s35;

        r15 = newarray (byte)[$i70];

        $i71 = (int) $s35;

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(r15, 0, $i71);

        $r12 = virtualinvoke r15.<java.lang.Object: java.lang.Object clone()>();

        r14 = (byte[]) $r12;

     label04:
        $i37 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int x0>;

        if $i37 <= 0 goto label06;

        i49 = 0;

     label05:
        $i43 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int x0>;

        if i49 >= $i43 goto label06;

        r1[i49] = 0;

        i49 = i49 + 1;

        goto label05;

     label06:
        $i39 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int x0>;

        $i38 = lengthof r14;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r14, 0, r1, $i39, $i38);

        $i40 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int xt>;

        $i42 = $i40 * i48;

        $i41 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int xt>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, $i42, $i41);

        i48 = i48 + 1;

        goto label01;

     label07:
        $z0 = virtualinvoke r4.<java.lang.String: boolean endsWith(java.lang.String)>("_RAW");

        if $z0 == 0 goto label08;

        return r2;

     label08:
        $z1 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("BaseReflectivity");

        if $z1 != 0 goto label09;

        $z2 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("BaseVelocity");

        if $z2 == 0 goto label14;

     label09:
        $r10 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int[] len>;

        $i34 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int code>;

        $r11 = newarray (float)[i2];

        i50 = 0;

     label10:
        if i50 >= i2 goto label13;

        $b5 = r2[i50];

        $i6 = staticinvoke <ucar.nc2.iosp.nids.Nidsiosp: int unsignedByteToInt(byte)>($b5);

        i51 = $r10[$i6];

        $i73 = (int) -9997;

        if i51 <= $i73 goto label11;

        $i75 = (int) -9866;

        if i51 == $i75 goto label11;

        $f1 = (float) i51;

        $f0 = (float) $i34;

        $f3 = $f1 / $f0;

        $f2 = (float) 0;

        $f4 = $f3 + $f2;

        $r11[i50] = $f4;

        goto label12;

     label11:
        $r11[i50] = #NaNF;

     label12:
        i50 = i50 + 1;

        goto label10;

     label13:
        return $r11;

     label14:
        $z3 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("DigitalHybridReflectivity");

        if $z3 == 0 goto label19;

        r16 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int[] len>;

        i52 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int code>;

        r17 = newarray (float)[i2];

        i53 = 0;

     label15:
        if i53 >= i2 goto label18;

        $b30 = r2[i53];

        $i31 = staticinvoke <ucar.nc2.iosp.nids.Nidsiosp: int unsignedByteToInt(byte)>($b30);

        i54 = r16[$i31];

        $i32 = r16[0];

        if i54 == $i32 goto label16;

        $i33 = r16[1];

        if i54 == $i33 goto label16;

        $f37 = (float) i54;

        $f36 = (float) i52;

        $f39 = $f37 / $f36;

        $f38 = (float) 0;

        $f40 = $f39 + $f38;

        r17[i53] = $f40;

        goto label17;

     label16:
        r17[i53] = #NaNF;

     label17:
        i53 = i53 + 1;

        goto label15;

     label18:
        return r17;

     label19:
        $z4 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("RadialVelocity");

        if $z4 != 0 goto label20;

        $z5 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("SpectrumWidth");

        if $z5 == 0 goto label25;

     label20:
        $r8 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int[] len>;

        $i29 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int code>;

        $r9 = newarray (float)[i2];

        i55 = 0;

     label21:
        if i55 >= i2 goto label24;

        $b7 = r2[i55];

        $s8 = virtualinvoke r5.<ucar.nc2.iosp.nids.Nidsiosp: short convertunsignedByte2Short(byte)>($b7);

        $i76 = (int) $s8;

        i56 = $r8[$i76];

        $i78 = (int) -9996;

        if i56 <= $i78 goto label22;

        $i80 = (int) -9866;

        if i56 == $i80 goto label22;

        $f6 = (float) i56;

        $f5 = (float) $i29;

        $f8 = $f6 / $f5;

        $f7 = (float) 0;

        $f9 = $f8 + $f7;

        $r9[i55] = $f9;

        goto label23;

     label22:
        $r9[i55] = #NaNF;

     label23:
        i55 = i55 + 1;

        goto label21;

     label24:
        return $r9;

     label25:
        $z6 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("StormMeanVelocity");

        if $z6 == 0 goto label30;

        r18 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int[] len>;

        i57 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int code>;

        r19 = newarray (float)[i2];

        i58 = 0;

     label26:
        if i58 >= i2 goto label29;

        $b28 = r2[i58];

        $i81 = (int) $b28;

        i59 = r18[$i81];

        $i83 = (int) -9996;

        if i59 <= $i83 goto label27;

        $f32 = (float) i59;

        $f31 = (float) i57;

        $f34 = $f32 / $f31;

        $f33 = (float) 0;

        $f35 = $f34 + $f33;

        r19[i58] = $f35;

        goto label28;

     label27:
        r19[i58] = #NaNF;

     label28:
        i58 = i58 + 1;

        goto label26;

     label29:
        return r19;

     label30:
        $z7 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("Precip");

        if $z7 != 0 goto label31;

        $z8 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("DigitalPrecip");

        if $z8 == 0 goto label38;

     label31:
        $r6 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int[] len>;

        $i27 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int code>;

        $r7 = newarray (float)[i2];

        i60 = 0;

     label32:
        if i60 >= i2 goto label37;

        $b9 = r2[i60];

        $i84 = (int) $b9;

        if $i84 >= 0 goto label33;

        $i86 = (int) -9997;

        i61 = $i86;

        goto label34;

     label33:
        $b10 = r2[i60];

        $i87 = (int) $b10;

        i61 = $r6[$i87];

     label34:
        $i89 = (int) -9996;

        if i61 <= $i89 goto label35;

        $f11 = (float) i61;

        $f10 = (float) $i27;

        $f13 = $f11 / $f10;

        $f12 = (float) 0;

        $f14 = $f13 + $f12;

        $r7[i60] = $f14;

        goto label36;

     label35:
        $r7[i60] = #NaNF;

     label36:
        i60 = i60 + 1;

        goto label32;

     label37:
        return $r7;

     label38:
        $z9 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("EnhancedEchoTop");

        if $z9 == 0 goto label43;

        r20 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int[] len>;

        i62 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int code>;

        r21 = newarray (float)[i2];

        i63 = 0;

     label39:
        if i63 >= i2 goto label42;

        $b21 = r2[i63];

        $i22 = staticinvoke <ucar.nc2.iosp.nids.Nidsiosp: int unsignedByteToInt(byte)>($b21);

        if $i22 != 0 goto label40;

        if $i22 != 1 goto label40;

        r21[i63] = #NaNF;

        goto label41;

     label40:
        $i23 = r20[0];

        $i24 = $i22 & $i23;

        $f27 = (float) $i24;

        $i25 = r20[1];

        $f26 = (float) $i25;

        $f29 = $f27 / $f26;

        $i26 = r20[2];

        $f28 = (float) $i26;

        $f30 = $f29 - $f28;

        r21[i63] = $f30;

     label41:
        i63 = i63 + 1;

        goto label39;

     label42:
        return r21;

     label43:
        $z10 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("DigitalIntegLiquid");

        if $z10 == 0 goto label50;

        r22 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int[] len>;

        i64 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int code>;

        r23 = newarray (float)[i2];

        $i11 = r22[0];

        $s12 = (short) $i11;

        $f15 = virtualinvoke r5.<ucar.nc2.iosp.nids.Nidsiosp: float getHexDecodeValue(short)>($s12);

        $i13 = r22[1];

        $s14 = (short) $i13;

        $f16 = virtualinvoke r5.<ucar.nc2.iosp.nids.Nidsiosp: float getHexDecodeValue(short)>($s14);

        $i15 = r22[3];

        $s16 = (short) $i15;

        $f17 = virtualinvoke r5.<ucar.nc2.iosp.nids.Nidsiosp: float getHexDecodeValue(short)>($s16);

        $i17 = r22[4];

        $s18 = (short) $i17;

        $f18 = virtualinvoke r5.<ucar.nc2.iosp.nids.Nidsiosp: float getHexDecodeValue(short)>($s18);

        i65 = 0;

     label44:
        if i65 >= i2 goto label49;

        $b19 = r2[i65];

        $i20 = staticinvoke <ucar.nc2.iosp.nids.Nidsiosp: int unsignedByteToInt(byte)>($b19);

        if $i20 == 0 goto label45;

        if $i20 != 1 goto label46;

     label45:
        r23[i65] = #NaNF;

        goto label48;

     label46:
        if $i20 >= 20 goto label47;

        $f23 = (float) $i20;

        $f24 = $f23 - $f16;

        $f25 = $f24 / $f15;

        r23[i65] = $f25;

        goto label48;

     label47:
        $f19 = (float) $i20;

        $f20 = $f19 - $f18;

        f21 = $f20 / $f17;

        $d0 = (double) f21;

        $d1 = staticinvoke <java.lang.Math: double exp(double)>($d0);

        $f22 = (float) $d1;

        r23[i65] = $f22;

     label48:
        i65 = i65 + 1;

        goto label44;

     label49:
        return r23;

     label50:
        return null;
    }

    public float getHexDecodeValue(short)
    {
        short s0, s5;
        ucar.nc2.iosp.nids.Nidsiosp r0;
        int $i1, i2, $i3, i4, $i6, $i7, $i8;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, f8;

        r0 := @this: ucar.nc2.iosp.nids.Nidsiosp;

        s0 := @parameter0: short;

        $i7 = (int) s0;

        $i1 = $i7 >> 15;

        i2 = $i1 & 1;

        $i8 = (int) s0;

        $i3 = $i8 >> 10;

        i4 = $i3 & 31;

        s5 = s0 & 1023;

        if i4 != 0 goto label1;

        $d7 = (double) i2;

        $d8 = staticinvoke <java.lang.Math: double pow(double,double)>(-1.0, $d7);

        $f3 = (float) $d8;

        $f7 = $f3 * 2.0F;

        $f4 = (float) s5;

        $f5 = $f4 / 1024.0F;

        $f6 = 0.0F + $f5;

        f8 = $f7 * $f6;

        goto label2;

     label1:
        $d0 = (double) i2;

        $d1 = staticinvoke <java.lang.Math: double pow(double,double)>(-1.0, $d0);

        $i6 = i4 - 16;

        $d2 = (double) $i6;

        $d3 = staticinvoke <java.lang.Math: double pow(double,double)>(2.0, $d2);

        $d5 = $d1 * $d3;

        $f0 = (float) s5;

        $f1 = $f0 / 1024.0F;

        $f2 = 1.0F + $f1;

        $d4 = (double) $f2;

        $d6 = $d5 * $d4;

        f8 = (float) $d6;

     label2:
        return f8;
    }

    public byte[] readOneBeamData(byte[], int, int, int) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        byte[] r0, r2;
        short $s4, $s7, $s8;
        byte $b3, $b6, b9;
        ucar.nc2.iosp.nids.Nidsiosp r1;
        int i0, i1, $i2, i5, $i10, i11, i12, i13, i14, i15, i16, $i17;

        r1 := @this: ucar.nc2.iosp.nids.Nidsiosp;

        r2 := @parameter0: byte[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        i11 := @parameter3: int;

        r0 = newarray (byte)[i0];

        i12 = 0;

        i13 = 0;

        i14 = 0;

     label1:
        $i2 = i1 * 2;

        if i14 >= $i2 goto label4;

        $b3 = r2[i14];

        $s4 = virtualinvoke r1.<ucar.nc2.iosp.nids.Nidsiosp: short convertunsignedByte2Short(byte)>($b3);

        $i17 = (int) $s4;

        i5 = $i17 >> 4;

        $b6 = r2[i14];

        $s7 = virtualinvoke r1.<ucar.nc2.iosp.nids.Nidsiosp: short convertunsignedByte2Short(byte)>($b6);

        $s8 = $s7 & 15;

        b9 = (byte) $s8;

        i15 = 0;

     label2:
        if i15 >= i5 goto label3;

        $i10 = i12;

        i12 = i12 + 1;

        r0[$i10] = b9;

        i13 = i13 + 1;

        i15 = i15 + 1;

        goto label2;

     label3:
        i14 = i14 + 1;

        goto label1;

     label4:
        if i13 >= i0 goto label6;

        i16 = i13;

     label5:
        if i16 >= i0 goto label6;

        r0[i16] = 0;

        i16 = i16 + 1;

        goto label5;

     label6:
        return r0;
    }

    public short[] readOneBeamShortData(byte[], int, int, int) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        byte[] r2;
        short $s3;
        byte $b2;
        ucar.nc2.iosp.nids.Nidsiosp r1;
        int i0, i1, i4, i5, i6, i7;
        short[] r0;

        r1 := @this: ucar.nc2.iosp.nids.Nidsiosp;

        r2 := @parameter0: byte[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        i4 := @parameter3: int;

        r0 = newarray (short)[i0];

        i5 = 0;

        i6 = 0;

     label1:
        if i6 >= i1 goto label2;

        $b2 = r2[i6];

        $s3 = virtualinvoke r1.<ucar.nc2.iosp.nids.Nidsiosp: short convertunsignedByte2Short(byte)>($b2);

        r0[i6] = $s3;

        i5 = i5 + 1;

        i6 = i6 + 1;

        goto label1;

     label2:
        if i5 >= i0 goto label4;

        i7 = i5;

     label3:
        if i7 >= i0 goto label4;

        r0[i7] = 0;

        i7 = i7 + 1;

        goto label3;

     label4:
        return r0;
    }

    public ucar.ma2.Array readNestedWindBarbData(java.lang.String, java.lang.String, java.nio.ByteBuffer, ucar.nc2.iosp.nids.Nidsheader$Vinfo, java.util.List) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        ucar.ma2.ArrayStructure $r7;
        long $l0;
        ucar.nc2.Structure r4;
        java.nio.ByteBuffer r5;
        ucar.ma2.StructureMembers$Member $r10;
        short $s2;
        int[] $r13;
        ucar.nc2.iosp.nids.Nidsiosp r0;
        int i1, i3;
        ucar.nc2.Variable $r3;
        java.lang.String r1, r9;
        ucar.nc2.iosp.nids.Nidsheader$Vinfo r6;
        ucar.ma2.Array $r14, $r16;
        java.util.List r15;
        ucar.ma2.StructureMembers $r8;
        java.lang.Class $r12;
        ucar.nc2.NetcdfFile $r2;
        short[] r11;

        r0 := @this: ucar.nc2.iosp.nids.Nidsiosp;

        r1 := @parameter0: java.lang.String;

        r9 := @parameter1: java.lang.String;

        r5 := @parameter2: java.nio.ByteBuffer;

        r6 := @parameter3: ucar.nc2.iosp.nids.Nidsheader$Vinfo;

        r15 := @parameter4: java.util.List;

        $r2 = r0.<ucar.nc2.iosp.nids.Nidsiosp: ucar.nc2.NetcdfFile ncfile>;

        $r3 = virtualinvoke $r2.<ucar.nc2.NetcdfFile: ucar.nc2.Variable findVariable(java.lang.String)>(r1);

        r4 = (ucar.nc2.Structure) $r3;

        $r7 = virtualinvoke r0.<ucar.nc2.iosp.nids.Nidsiosp: ucar.ma2.ArrayStructure readWindBarbData(java.lang.String,java.nio.ByteBuffer,ucar.nc2.iosp.nids.Nidsheader$Vinfo,java.util.List)>(r1, r5, r6, null);

        $l0 = virtualinvoke r4.<ucar.nc2.Structure: long getSize()>();

        i1 = (int) $l0;

        $r8 = virtualinvoke $r7.<ucar.ma2.ArrayStructure: ucar.ma2.StructureMembers getStructureMembers()>();

        $r10 = virtualinvoke $r8.<ucar.ma2.StructureMembers: ucar.ma2.StructureMembers$Member findMember(java.lang.String)>(r9);

        r11 = newarray (short)[i1];

        i3 = 0;

     label1:
        if i3 >= i1 goto label2;

        $s2 = virtualinvoke $r7.<ucar.ma2.ArrayStructure: short getScalarShort(int,ucar.ma2.StructureMembers$Member)>(i3, $r10);

        r11[i3] = $s2;

        i3 = i3 + 1;

        goto label1;

     label2:
        $r12 = <java.lang.Short: java.lang.Class TYPE>;

        $r13 = virtualinvoke r4.<ucar.nc2.Structure: int[] getShape()>();

        $r14 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r12, $r13, r11);

        $r16 = virtualinvoke $r14.<ucar.ma2.Array: ucar.ma2.Array sectionNoReduce(java.util.List)>(r15);

        return $r16;
    }

    public ucar.ma2.ArrayStructure readWindBarbData(java.lang.String, java.nio.ByteBuffer, ucar.nc2.iosp.nids.Nidsheader$Vinfo, java.util.List) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        ucar.ma2.ArrayStructure $r25;
        ucar.ma2.StructureMembers$Member $r8, $r9, $r10, $r11, $r12;
        java.nio.ByteBuffer r15;
        int[] r1, $r14;
        ucar.nc2.iosp.nids.Nidsheader$Vinfo r0;
        java.util.List r16;
        ucar.ma2.StructureMembers $r7;
        java.lang.StringBuilder $r18, $r20, $r21, $r22, $r23;
        ucar.nc2.NetcdfFile $r4;
        ucar.nc2.Structure r6;
        ucar.nc2.iosp.nids.Nidsiosp r2;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8;
        ucar.nc2.Variable $r5;
        java.lang.String r3, $r24;
        java.io.PrintStream $r19;
        ucar.ma2.ArrayStructureBBpos $r13;
        ucar.ma2.Array $r17;

        r2 := @this: ucar.nc2.iosp.nids.Nidsiosp;

        r3 := @parameter0: java.lang.String;

        r15 := @parameter1: java.nio.ByteBuffer;

        r0 := @parameter2: ucar.nc2.iosp.nids.Nidsheader$Vinfo;

        r16 := @parameter3: java.util.List;

        r1 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int[] pos>;

        i0 = lengthof r1;

        $r4 = r2.<ucar.nc2.iosp.nids.Nidsiosp: ucar.nc2.NetcdfFile ncfile>;

        $r5 = virtualinvoke $r4.<ucar.nc2.NetcdfFile: ucar.nc2.Variable findVariable(java.lang.String)>(r3);

        r6 = (ucar.nc2.Structure) $r5;

        if i0 <= 1 goto label4;

        $i2 = r1[1];

        $i1 = r1[0];

        i6 = $i2 - $i1;

        i7 = 1;

     label1:
        if i7 >= i0 goto label3;

        $i5 = r1[i7];

        $i3 = i7 - 1;

        $i4 = r1[$i3];

        i8 = $i5 - $i4;

        if i8 == i6 goto label2;

        $r19 = <java.lang.System: java.io.PrintStream out>;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" PROBLEM at ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" == ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r19.<java.io.PrintStream: void println(java.lang.String)>($r24);

     label2:
        i7 = i7 + 1;

        goto label1;

     label3:
        goto label5;

     label4:
        i6 = 1;

     label5:
        $r7 = virtualinvoke r6.<ucar.nc2.Structure: ucar.ma2.StructureMembers makeStructureMembers()>();

        $r8 = virtualinvoke $r7.<ucar.ma2.StructureMembers: ucar.ma2.StructureMembers$Member findMember(java.lang.String)>("value");

        virtualinvoke $r8.<ucar.ma2.StructureMembers$Member: void setDataParam(int)>(0);

        $r9 = virtualinvoke $r7.<ucar.ma2.StructureMembers: ucar.ma2.StructureMembers$Member findMember(java.lang.String)>("x_start");

        virtualinvoke $r9.<ucar.ma2.StructureMembers$Member: void setDataParam(int)>(2);

        $r10 = virtualinvoke $r7.<ucar.ma2.StructureMembers: ucar.ma2.StructureMembers$Member findMember(java.lang.String)>("y_start");

        virtualinvoke $r10.<ucar.ma2.StructureMembers$Member: void setDataParam(int)>(4);

        $r11 = virtualinvoke $r7.<ucar.ma2.StructureMembers: ucar.ma2.StructureMembers$Member findMember(java.lang.String)>("direction");

        virtualinvoke $r11.<ucar.ma2.StructureMembers$Member: void setDataParam(int)>(6);

        $r12 = virtualinvoke $r7.<ucar.ma2.StructureMembers: ucar.ma2.StructureMembers$Member findMember(java.lang.String)>("speed");

        virtualinvoke $r12.<ucar.ma2.StructureMembers$Member: void setDataParam(int)>(8);

        virtualinvoke $r7.<ucar.ma2.StructureMembers: void setStructureSize(int)>(i6);

        $r13 = new ucar.ma2.ArrayStructureBBpos;

        $r14 = newarray (int)[1];

        $r14[0] = i0;

        specialinvoke $r13.<ucar.ma2.ArrayStructureBBpos: void <init>(ucar.ma2.StructureMembers,int[],java.nio.ByteBuffer,int[])>($r7, $r14, r15, r1);

        if r16 == null goto label6;

        $r17 = virtualinvoke $r13.<ucar.ma2.ArrayStructure: ucar.ma2.Array sectionNoReduce(java.util.List)>(r16);

        $r25 = (ucar.ma2.ArrayStructure) $r17;

        goto label7;

     label6:
        $r25 = $r13;

     label7:
        return $r25;
    }

    public ucar.ma2.Array readNestedVectorArrowData(java.lang.String, java.lang.String, java.nio.ByteBuffer, ucar.nc2.iosp.nids.Nidsheader$Vinfo, java.util.List) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        ucar.ma2.ArrayStructure $r7;
        long $l0;
        ucar.nc2.Structure r4;
        java.nio.ByteBuffer r5;
        ucar.ma2.StructureMembers$Member $r10;
        short $s2;
        int[] $r13;
        ucar.nc2.iosp.nids.Nidsiosp r0;
        int i1, i3;
        ucar.nc2.Variable $r3;
        java.lang.String r1, r9;
        ucar.nc2.iosp.nids.Nidsheader$Vinfo r6;
        ucar.ma2.Array $r14, $r16;
        java.util.List r15;
        ucar.ma2.StructureMembers $r8;
        java.lang.Class $r12;
        ucar.nc2.NetcdfFile $r2;
        short[] r11;

        r0 := @this: ucar.nc2.iosp.nids.Nidsiosp;

        r1 := @parameter0: java.lang.String;

        r9 := @parameter1: java.lang.String;

        r5 := @parameter2: java.nio.ByteBuffer;

        r6 := @parameter3: ucar.nc2.iosp.nids.Nidsheader$Vinfo;

        r15 := @parameter4: java.util.List;

        $r2 = r0.<ucar.nc2.iosp.nids.Nidsiosp: ucar.nc2.NetcdfFile ncfile>;

        $r3 = virtualinvoke $r2.<ucar.nc2.NetcdfFile: ucar.nc2.Variable findVariable(java.lang.String)>(r1);

        r4 = (ucar.nc2.Structure) $r3;

        $r7 = virtualinvoke r0.<ucar.nc2.iosp.nids.Nidsiosp: ucar.ma2.ArrayStructure readVectorArrowData(java.lang.String,java.nio.ByteBuffer,ucar.nc2.iosp.nids.Nidsheader$Vinfo)>(r1, r5, r6);

        $l0 = virtualinvoke r4.<ucar.nc2.Structure: long getSize()>();

        i1 = (int) $l0;

        $r8 = virtualinvoke $r7.<ucar.ma2.ArrayStructure: ucar.ma2.StructureMembers getStructureMembers()>();

        $r10 = virtualinvoke $r8.<ucar.ma2.StructureMembers: ucar.ma2.StructureMembers$Member findMember(java.lang.String)>(r9);

        r11 = newarray (short)[i1];

        i3 = 0;

     label1:
        if i3 >= i1 goto label2;

        $s2 = virtualinvoke $r7.<ucar.ma2.ArrayStructure: short getScalarShort(int,ucar.ma2.StructureMembers$Member)>(i3, $r10);

        r11[i3] = $s2;

        i3 = i3 + 1;

        goto label1;

     label2:
        $r12 = <java.lang.Short: java.lang.Class TYPE>;

        $r13 = virtualinvoke r4.<ucar.nc2.Structure: int[] getShape()>();

        $r14 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r12, $r13, r11);

        $r16 = virtualinvoke $r14.<ucar.ma2.Array: ucar.ma2.Array sectionNoReduce(java.util.List)>(r15);

        return $r16;
    }

    public ucar.ma2.ArrayStructure readVectorArrowData(java.lang.String, java.nio.ByteBuffer, ucar.nc2.iosp.nids.Nidsheader$Vinfo) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        ucar.ma2.StructureMembers$Member $r8, $r9, $r10, $r11, $r12;
        java.nio.ByteBuffer r15;
        int[] r1, $r14;
        ucar.nc2.iosp.nids.Nidsheader$Vinfo r0;
        ucar.ma2.StructureMembers $r7;
        java.lang.StringBuilder $r16, $r18, $r19, $r20, $r21;
        ucar.nc2.NetcdfFile $r4;
        ucar.nc2.Structure r6;
        ucar.nc2.iosp.nids.Nidsiosp r2;
        int i0, $i1, $i2, i3, $i4, $i5, $i6, i7, i8;
        ucar.nc2.Variable $r5;
        java.lang.String r3, $r22;
        java.io.PrintStream $r17;
        ucar.ma2.ArrayStructureBBpos $r13;

        r2 := @this: ucar.nc2.iosp.nids.Nidsiosp;

        r3 := @parameter0: java.lang.String;

        r15 := @parameter1: java.nio.ByteBuffer;

        r0 := @parameter2: ucar.nc2.iosp.nids.Nidsheader$Vinfo;

        r1 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int[] pos>;

        i0 = lengthof r1;

        $r4 = r2.<ucar.nc2.iosp.nids.Nidsiosp: ucar.nc2.NetcdfFile ncfile>;

        $r5 = virtualinvoke $r4.<ucar.nc2.NetcdfFile: ucar.nc2.Variable findVariable(java.lang.String)>(r3);

        r6 = (ucar.nc2.Structure) $r5;

        $i2 = r1[1];

        $i1 = r1[0];

        i3 = $i2 - $i1;

        i8 = 1;

     label1:
        if i8 >= i0 goto label3;

        $i6 = r1[i8];

        $i4 = i8 - 1;

        $i5 = r1[$i4];

        i7 = $i6 - $i5;

        if i7 == i3 goto label2;

        $r17 = <java.lang.System: java.io.PrintStream out>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" PROBLEM at ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" == ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>($r22);

     label2:
        i8 = i8 + 1;

        goto label1;

     label3:
        $r7 = virtualinvoke r6.<ucar.nc2.Structure: ucar.ma2.StructureMembers makeStructureMembers()>();

        $r8 = virtualinvoke $r7.<ucar.ma2.StructureMembers: ucar.ma2.StructureMembers$Member findMember(java.lang.String)>("x_start");

        virtualinvoke $r8.<ucar.ma2.StructureMembers$Member: void setDataParam(int)>(0);

        $r9 = virtualinvoke $r7.<ucar.ma2.StructureMembers: ucar.ma2.StructureMembers$Member findMember(java.lang.String)>("y_start");

        virtualinvoke $r9.<ucar.ma2.StructureMembers$Member: void setDataParam(int)>(2);

        $r10 = virtualinvoke $r7.<ucar.ma2.StructureMembers: ucar.ma2.StructureMembers$Member findMember(java.lang.String)>("direction");

        virtualinvoke $r10.<ucar.ma2.StructureMembers$Member: void setDataParam(int)>(4);

        $r11 = virtualinvoke $r7.<ucar.ma2.StructureMembers: ucar.ma2.StructureMembers$Member findMember(java.lang.String)>("arrowLength");

        virtualinvoke $r11.<ucar.ma2.StructureMembers$Member: void setDataParam(int)>(6);

        $r12 = virtualinvoke $r7.<ucar.ma2.StructureMembers: ucar.ma2.StructureMembers$Member findMember(java.lang.String)>("arrowHeadLength");

        virtualinvoke $r12.<ucar.ma2.StructureMembers$Member: void setDataParam(int)>(8);

        virtualinvoke $r7.<ucar.ma2.StructureMembers: void setStructureSize(int)>(i3);

        $r13 = new ucar.ma2.ArrayStructureBBpos;

        $r14 = newarray (int)[1];

        $r14[0] = i0;

        specialinvoke $r13.<ucar.ma2.ArrayStructureBBpos: void <init>(ucar.ma2.StructureMembers,int[],java.nio.ByteBuffer,int[])>($r7, $r14, r15, r1);

        return $r13;
    }

    public ucar.ma2.Array readNestedTextStringData(java.lang.String, java.lang.String, java.nio.ByteBuffer, ucar.nc2.iosp.nids.Nidsheader$Vinfo, java.util.List) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        ucar.ma2.ArrayStructure $r7;
        long $l0;
        java.lang.String[] r12;
        ucar.nc2.Structure r4;
        java.nio.ByteBuffer r5;
        ucar.ma2.StructureMembers$Member $r10;
        short $s2;
        int[] $r15, $r18;
        ucar.nc2.iosp.nids.Nidsiosp r0;
        int i1, i3, i4;
        ucar.nc2.Variable $r3;
        java.lang.String r1, r9, $r13, $r19;
        boolean $z0;
        ucar.nc2.iosp.nids.Nidsheader$Vinfo r6;
        ucar.ma2.Array $r17, r20;
        java.util.List r16;
        ucar.ma2.StructureMembers $r8;
        java.lang.Class $r14;
        ucar.nc2.NetcdfFile $r2;
        short[] r11;

        r0 := @this: ucar.nc2.iosp.nids.Nidsiosp;

        r1 := @parameter0: java.lang.String;

        r9 := @parameter1: java.lang.String;

        r5 := @parameter2: java.nio.ByteBuffer;

        r6 := @parameter3: ucar.nc2.iosp.nids.Nidsheader$Vinfo;

        r16 := @parameter4: java.util.List;

        $r2 = r0.<ucar.nc2.iosp.nids.Nidsiosp: ucar.nc2.NetcdfFile ncfile>;

        $r3 = virtualinvoke $r2.<ucar.nc2.NetcdfFile: ucar.nc2.Variable findVariable(java.lang.String)>(r1);

        r4 = (ucar.nc2.Structure) $r3;

        $r7 = virtualinvoke r0.<ucar.nc2.iosp.nids.Nidsiosp: ucar.ma2.ArrayStructure readTextStringData(java.lang.String,java.nio.ByteBuffer,ucar.nc2.iosp.nids.Nidsheader$Vinfo)>(r1, r5, r6);

        $l0 = virtualinvoke r4.<ucar.nc2.Structure: long getSize()>();

        i1 = (int) $l0;

        $r8 = virtualinvoke $r7.<ucar.ma2.ArrayStructure: ucar.ma2.StructureMembers getStructureMembers()>();

        $r10 = virtualinvoke $r8.<ucar.ma2.StructureMembers: ucar.ma2.StructureMembers$Member findMember(java.lang.String)>(r9);

        r11 = newarray (short)[i1];

        r12 = newarray (java.lang.String)[i1];

        $r13 = virtualinvoke $r10.<ucar.ma2.StructureMembers$Member: java.lang.String getName()>();

        $z0 = virtualinvoke $r13.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("testString");

        if $z0 == 0 goto label3;

        i3 = 0;

     label1:
        if i3 >= i1 goto label2;

        $r19 = virtualinvoke $r7.<ucar.ma2.ArrayStructure: java.lang.String getScalarString(int,ucar.ma2.StructureMembers$Member)>(i3, $r10);

        r12[i3] = $r19;

        i3 = i3 + 1;

        goto label1;

     label2:
        $r18 = virtualinvoke r4.<ucar.nc2.Structure: int[] getShape()>();

        r20 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>(class "Ljava/lang/String;", $r18, r12);

        goto label6;

     label3:
        i4 = 0;

     label4:
        if i4 >= i1 goto label5;

        $s2 = virtualinvoke $r7.<ucar.ma2.ArrayStructure: short getScalarShort(int,ucar.ma2.StructureMembers$Member)>(i4, $r10);

        r11[i4] = $s2;

        i4 = i4 + 1;

        goto label4;

     label5:
        $r14 = <java.lang.Short: java.lang.Class TYPE>;

        $r15 = virtualinvoke r4.<ucar.nc2.Structure: int[] getShape()>();

        r20 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r14, $r15, r11);

     label6:
        $r17 = virtualinvoke r20.<ucar.ma2.Array: ucar.ma2.Array sectionNoReduce(java.util.List)>(r16);

        return $r17;
    }

    public ucar.ma2.ArrayStructure readTextStringData(java.lang.String, java.nio.ByteBuffer, ucar.nc2.iosp.nids.Nidsheader$Vinfo) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        ucar.nc2.iosp.nids.Nidsiosp$MyArrayStructureBBpos $r12;
        ucar.nc2.Structure r7;
        ucar.ma2.StructureMembers$Member $r9, $r10, $r11, $r15, $r16, $r17, $r18;
        java.nio.ByteBuffer r14;
        int[] r1, r2, $r13;
        ucar.nc2.iosp.nids.Nidsiosp r3;
        int i0, $i1;
        ucar.nc2.Variable $r6;
        java.lang.String r4;
        ucar.nc2.iosp.nids.Nidsheader$Vinfo r0;
        ucar.ma2.StructureMembers $r8;
        ucar.nc2.NetcdfFile $r5;

        r3 := @this: ucar.nc2.iosp.nids.Nidsiosp;

        r4 := @parameter0: java.lang.String;

        r14 := @parameter1: java.nio.ByteBuffer;

        r0 := @parameter2: ucar.nc2.iosp.nids.Nidsheader$Vinfo;

        r1 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int[] pos>;

        r2 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int[] len>;

        i0 = lengthof r1;

        $r5 = r3.<ucar.nc2.iosp.nids.Nidsiosp: ucar.nc2.NetcdfFile ncfile>;

        $r6 = virtualinvoke $r5.<ucar.nc2.NetcdfFile: ucar.nc2.Variable findVariable(java.lang.String)>(r4);

        r7 = (ucar.nc2.Structure) $r6;

        $r8 = virtualinvoke r7.<ucar.nc2.Structure: ucar.ma2.StructureMembers makeStructureMembers()>();

        $i1 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int code>;

        if $i1 != 8 goto label1;

        $r15 = virtualinvoke $r8.<ucar.ma2.StructureMembers: ucar.ma2.StructureMembers$Member findMember(java.lang.String)>("strValue");

        virtualinvoke $r15.<ucar.ma2.StructureMembers$Member: void setDataParam(int)>(0);

        $r16 = virtualinvoke $r8.<ucar.ma2.StructureMembers: ucar.ma2.StructureMembers$Member findMember(java.lang.String)>("x_start");

        virtualinvoke $r16.<ucar.ma2.StructureMembers$Member: void setDataParam(int)>(2);

        $r17 = virtualinvoke $r8.<ucar.ma2.StructureMembers: ucar.ma2.StructureMembers$Member findMember(java.lang.String)>("y_start");

        virtualinvoke $r17.<ucar.ma2.StructureMembers$Member: void setDataParam(int)>(4);

        $r18 = virtualinvoke $r8.<ucar.ma2.StructureMembers: ucar.ma2.StructureMembers$Member findMember(java.lang.String)>("textString");

        virtualinvoke $r18.<ucar.ma2.StructureMembers$Member: void setDataParam(int)>(6);

        goto label2;

     label1:
        $r9 = virtualinvoke $r8.<ucar.ma2.StructureMembers: ucar.ma2.StructureMembers$Member findMember(java.lang.String)>("x_start");

        virtualinvoke $r9.<ucar.ma2.StructureMembers$Member: void setDataParam(int)>(0);

        $r10 = virtualinvoke $r8.<ucar.ma2.StructureMembers: ucar.ma2.StructureMembers$Member findMember(java.lang.String)>("y_start");

        virtualinvoke $r10.<ucar.ma2.StructureMembers$Member: void setDataParam(int)>(2);

        $r11 = virtualinvoke $r8.<ucar.ma2.StructureMembers: ucar.ma2.StructureMembers$Member findMember(java.lang.String)>("textString");

        virtualinvoke $r11.<ucar.ma2.StructureMembers$Member: void setDataParam(int)>(4);

     label2:
        $r12 = new ucar.nc2.iosp.nids.Nidsiosp$MyArrayStructureBBpos;

        $r13 = newarray (int)[1];

        $r13[0] = i0;

        specialinvoke $r12.<ucar.nc2.iosp.nids.Nidsiosp$MyArrayStructureBBpos: void <init>(ucar.nc2.iosp.nids.Nidsiosp,ucar.ma2.StructureMembers,int[],java.nio.ByteBuffer,int[],int[])>(r3, $r8, $r13, r14, r1, r2);

        return $r12;
    }

    public ucar.ma2.Array readNestedDataUnlinkVector(java.lang.String, java.lang.String, java.nio.ByteBuffer, ucar.nc2.iosp.nids.Nidsheader$Vinfo, java.util.List) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        ucar.ma2.ArrayStructure $r7;
        long $l0;
        ucar.nc2.Structure r4;
        java.nio.ByteBuffer r5;
        ucar.ma2.StructureMembers$Member $r10;
        short $s2;
        int[] $r13;
        ucar.nc2.iosp.nids.Nidsiosp r0;
        int i1, i3;
        ucar.nc2.Variable $r3;
        java.lang.String r1, r9;
        ucar.nc2.iosp.nids.Nidsheader$Vinfo r6;
        ucar.ma2.Array $r14, $r16;
        java.util.List r15;
        ucar.ma2.StructureMembers $r8;
        java.lang.Class $r12;
        ucar.nc2.NetcdfFile $r2;
        short[] r11;

        r0 := @this: ucar.nc2.iosp.nids.Nidsiosp;

        r1 := @parameter0: java.lang.String;

        r9 := @parameter1: java.lang.String;

        r5 := @parameter2: java.nio.ByteBuffer;

        r6 := @parameter3: ucar.nc2.iosp.nids.Nidsheader$Vinfo;

        r15 := @parameter4: java.util.List;

        $r2 = r0.<ucar.nc2.iosp.nids.Nidsiosp: ucar.nc2.NetcdfFile ncfile>;

        $r3 = virtualinvoke $r2.<ucar.nc2.NetcdfFile: ucar.nc2.Variable findVariable(java.lang.String)>(r1);

        r4 = (ucar.nc2.Structure) $r3;

        $r7 = virtualinvoke r0.<ucar.nc2.iosp.nids.Nidsiosp: ucar.ma2.ArrayStructure readUnlinkedVectorData(java.lang.String,java.nio.ByteBuffer,ucar.nc2.iosp.nids.Nidsheader$Vinfo)>(r1, r5, r6);

        $l0 = virtualinvoke r4.<ucar.nc2.Structure: long getSize()>();

        i1 = (int) $l0;

        $r8 = virtualinvoke $r7.<ucar.ma2.ArrayStructure: ucar.ma2.StructureMembers getStructureMembers()>();

        $r10 = virtualinvoke $r8.<ucar.ma2.StructureMembers: ucar.ma2.StructureMembers$Member findMember(java.lang.String)>(r9);

        r11 = newarray (short)[i1];

        i3 = 0;

     label1:
        if i3 >= i1 goto label2;

        $s2 = virtualinvoke $r7.<ucar.ma2.ArrayStructure: short getScalarShort(int,ucar.ma2.StructureMembers$Member)>(i3, $r10);

        r11[i3] = $s2;

        i3 = i3 + 1;

        goto label1;

     label2:
        $r12 = <java.lang.Short: java.lang.Class TYPE>;

        $r13 = virtualinvoke r4.<ucar.nc2.Structure: int[] getShape()>();

        $r14 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r12, $r13, r11);

        $r16 = virtualinvoke $r14.<ucar.ma2.Array: ucar.ma2.Array sectionNoReduce(java.util.List)>(r15);

        return $r16;
    }

    public ucar.ma2.ArrayStructure readUnlinkedVectorData(java.lang.String, java.nio.ByteBuffer, ucar.nc2.iosp.nids.Nidsheader$Vinfo) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        short[][] r11;
        java.nio.ByteBuffer r3;
        ucar.ma2.StructureMembers$Member $r16, $r21, $r26, $r31, $r36;
        int[] r1, r2, $r10, $r12, $r17, $r22, $r27, $r32;
        ucar.nc2.iosp.nids.Nidsheader$Vinfo r0;
        ucar.ma2.StructureMembers $r8;
        ucar.nc2.NetcdfFile $r6;
        short[] $r13, $r18, $r23, $r28, $r33, $r37, $r38, $r39, $r40, $r41;
        ucar.nc2.Structure r42;
        short $s2, $s4, $s5, $s6, $s7;
        ucar.nc2.iosp.nids.Nidsiosp r4;
        int i0, $i1, $i3, $i8, i9, i10, i11, i12, i13;
        ucar.nc2.Variable $r7;
        java.lang.String r5;
        ucar.ma2.ArrayStructureMA $r9;
        ucar.ma2.Array $r15, $r20, $r25, $r30, $r35;
        java.lang.Class $r14, $r19, $r24, $r29, $r34;

        r4 := @this: ucar.nc2.iosp.nids.Nidsiosp;

        r5 := @parameter0: java.lang.String;

        r3 := @parameter1: java.nio.ByteBuffer;

        r0 := @parameter2: ucar.nc2.iosp.nids.Nidsheader$Vinfo;

        r1 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int[] pos>;

        r2 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int[] len>;

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(0);

        i0 = lengthof r1;

        i9 = 0;

        i10 = 0;

     label1:
        if i10 >= i0 goto label2;

        $i8 = r2[i10];

        i9 = i9 + $i8;

        i10 = i10 + 1;

        goto label1;

     label2:
        $r6 = r4.<ucar.nc2.iosp.nids.Nidsiosp: ucar.nc2.NetcdfFile ncfile>;

        $r7 = virtualinvoke $r6.<ucar.nc2.NetcdfFile: ucar.nc2.Variable findVariable(java.lang.String)>(r5);

        r42 = (ucar.nc2.Structure) $r7;

        $r8 = virtualinvoke r42.<ucar.nc2.Structure: ucar.ma2.StructureMembers makeStructureMembers()>();

        $r9 = new ucar.ma2.ArrayStructureMA;

        $r10 = newarray (int)[1];

        $r10[0] = i9;

        specialinvoke $r9.<ucar.ma2.ArrayStructureMA: void <init>(ucar.ma2.StructureMembers,int[])>($r8, $r10);

        i11 = 0;

        r11 = newmultiarray (short)[5][i9];

        i12 = 0;

     label3:
        if i12 >= i0 goto label6;

        $i1 = r1[i12];

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i1);

        $s2 = virtualinvoke r3.<java.nio.ByteBuffer: short getShort()>();

        i13 = 0;

     label4:
        $i3 = r2[i12];

        if i13 >= $i3 goto label5;

        $s4 = virtualinvoke r3.<java.nio.ByteBuffer: short getShort()>();

        $s5 = virtualinvoke r3.<java.nio.ByteBuffer: short getShort()>();

        $s6 = virtualinvoke r3.<java.nio.ByteBuffer: short getShort()>();

        $s7 = virtualinvoke r3.<java.nio.ByteBuffer: short getShort()>();

        $r37 = r11[0];

        $r37[i11] = $s2;

        $r38 = r11[1];

        $r38[i11] = $s4;

        $r39 = r11[2];

        $r39[i11] = $s5;

        $r40 = r11[3];

        $r40[i11] = $s6;

        $r41 = r11[4];

        $r41[i11] = $s7;

        i11 = i11 + 1;

        i13 = i13 + 1;

        goto label4;

     label5:
        i12 = i12 + 1;

        goto label3;

     label6:
        $r14 = <java.lang.Short: java.lang.Class TYPE>;

        $r12 = newarray (int)[1];

        $r12[0] = i9;

        $r13 = r11[0];

        $r15 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r14, $r12, $r13);

        $r16 = virtualinvoke $r8.<ucar.ma2.StructureMembers: ucar.ma2.StructureMembers$Member findMember(java.lang.String)>("iValue");

        virtualinvoke $r16.<ucar.ma2.StructureMembers$Member: void setDataArray(ucar.ma2.Array)>($r15);

        $r19 = <java.lang.Short: java.lang.Class TYPE>;

        $r17 = newarray (int)[1];

        $r17[0] = i9;

        $r18 = r11[1];

        $r20 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r19, $r17, $r18);

        $r21 = virtualinvoke $r8.<ucar.ma2.StructureMembers: ucar.ma2.StructureMembers$Member findMember(java.lang.String)>("x_start");

        virtualinvoke $r21.<ucar.ma2.StructureMembers$Member: void setDataArray(ucar.ma2.Array)>($r20);

        $r24 = <java.lang.Short: java.lang.Class TYPE>;

        $r22 = newarray (int)[1];

        $r22[0] = i9;

        $r23 = r11[2];

        $r25 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r24, $r22, $r23);

        $r26 = virtualinvoke $r8.<ucar.ma2.StructureMembers: ucar.ma2.StructureMembers$Member findMember(java.lang.String)>("y_start");

        virtualinvoke $r26.<ucar.ma2.StructureMembers$Member: void setDataArray(ucar.ma2.Array)>($r25);

        $r29 = <java.lang.Short: java.lang.Class TYPE>;

        $r27 = newarray (int)[1];

        $r27[0] = i9;

        $r28 = r11[3];

        $r30 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r29, $r27, $r28);

        $r31 = virtualinvoke $r8.<ucar.ma2.StructureMembers: ucar.ma2.StructureMembers$Member findMember(java.lang.String)>("x_end");

        virtualinvoke $r31.<ucar.ma2.StructureMembers$Member: void setDataArray(ucar.ma2.Array)>($r30);

        $r34 = <java.lang.Short: java.lang.Class TYPE>;

        $r32 = newarray (int)[1];

        $r32[0] = i9;

        $r33 = r11[4];

        $r35 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r34, $r32, $r33);

        $r36 = virtualinvoke $r8.<ucar.ma2.StructureMembers: ucar.ma2.StructureMembers$Member findMember(java.lang.String)>("y_end");

        virtualinvoke $r36.<ucar.ma2.StructureMembers$Member: void setDataArray(ucar.ma2.Array)>($r35);

        return $r9;
    }

    public java.lang.Object readOneArrayData(java.nio.ByteBuffer, ucar.nc2.iosp.nids.Nidsheader$Vinfo, java.lang.String) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        byte[] r1, r2, $r8, r9;
        java.nio.ByteBuffer r3;
        byte $b7, $b8;
        int[] $r5, $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        ucar.nc2.iosp.nids.Nidsheader$Vinfo r0;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9;
        float[] $r6, $r11;
        ucar.nc2.iosp.nids.Nidsiosp r7;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, $i9, $i10, $i11, $i12, $i13, $i14, i15, $i16, i17, i18, i19, i20, $i21, $i23, $i24, $i26;
        java.lang.String r4;

        r7 := @this: ucar.nc2.iosp.nids.Nidsiosp;

        r3 := @parameter0: java.nio.ByteBuffer;

        r0 := @parameter1: ucar.nc2.iosp.nids.Nidsheader$Vinfo;

        r4 := @parameter2: java.lang.String;

        $i1 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int yt>;

        $i0 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int xt>;

        $i2 = $i1 * $i0;

        r1 = newarray (byte)[$i2];

        r2 = newarray (byte)[2];

        $i4 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int yt>;

        $i3 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int xt>;

        i5 = $i4 * $i3;

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(0);

        i15 = 0;

     label01:
        $i6 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int yt>;

        if i15 >= $i6 goto label02;

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r2);

        $i10 = virtualinvoke r7.<ucar.nc2.iosp.nids.Nidsiosp: int getUInt(byte[],int,int)>(r2, 0, 2);

        r9 = newarray (byte)[$i10];

        virtualinvoke r3.<java.nio.ByteBuffer: int remaining()>();

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(r9, 0, $i10);

        $i11 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int xt>;

        $r8 = virtualinvoke r7.<ucar.nc2.iosp.nids.Nidsiosp: byte[] readOneRowData(byte[],int,int)>(r9, $i10, $i11);

        $i12 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int xt>;

        $i14 = $i12 * i15;

        $i13 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int xt>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, r1, $i14, $i13);

        i15 = i15 + 1;

        goto label01;

     label02:
        $z0 = virtualinvoke r4.<java.lang.String: boolean endsWith(java.lang.String)>("_RAW");

        if $z0 == 0 goto label03;

        return r1;

     label03:
        $z1 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("EchoTop");

        if $z1 != 0 goto label04;

        $z2 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("VertLiquid");

        if $z2 != 0 goto label04;

        $z3 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("Precip");

        if $z3 == 0 goto label09;

     label04:
        $r10 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int[] len>;

        $i16 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int code>;

        $r11 = newarray (float)[i5];

        i17 = 0;

     label05:
        if i17 >= i5 goto label08;

        $b7 = r1[i17];

        $i21 = (int) $b7;

        i18 = $r10[$i21];

        $i23 = (int) -9996;

        if i18 <= $i23 goto label06;

        $f1 = (float) i18;

        $f0 = (float) $i16;

        $f3 = $f1 / $f0;

        $f2 = (float) 0;

        $f4 = $f3 + $f2;

        $r11[i17] = $f4;

        goto label07;

     label06:
        $r11[i17] = #NaNF;

     label07:
        i17 = i17 + 1;

        goto label05;

     label08:
        return $r11;

     label09:
        $z4 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("BaseReflectivityComp");

        if $z4 != 0 goto label10;

        $z5 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("LayerCompReflect");

        if $z5 == 0 goto label15;

     label10:
        $r5 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int[] len>;

        $i9 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int code>;

        $r6 = newarray (float)[i5];

        i19 = 0;

     label11:
        if i19 >= i5 goto label14;

        $b8 = r1[i19];

        $i24 = (int) $b8;

        i20 = $r5[$i24];

        $i26 = (int) -9997;

        if i20 <= $i26 goto label12;

        $f6 = (float) i20;

        $f5 = (float) $i9;

        $f8 = $f6 / $f5;

        $f7 = (float) 0;

        $f9 = $f8 + $f7;

        $r6[i19] = $f9;

        goto label13;

     label12:
        $r6[i19] = #NaNF;

     label13:
        i19 = i19 + 1;

        goto label11;

     label14:
        return $r6;

     label15:
        return null;
    }

    public java.lang.Object readOneArrayData1(java.nio.ByteBuffer, ucar.nc2.iosp.nids.Nidsheader$Vinfo) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        byte[] r3;
        java.nio.ByteBuffer r2;
        short $s4;
        ucar.nc2.iosp.nids.Nidsiosp r4;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10, i11, $i12, $i13, $i14, $i15;
        ucar.nc2.iosp.nids.Nidsheader$Vinfo r0;
        short[] r1, r5;

        r4 := @this: ucar.nc2.iosp.nids.Nidsiosp;

        r2 := @parameter0: java.nio.ByteBuffer;

        r0 := @parameter1: ucar.nc2.iosp.nids.Nidsheader$Vinfo;

        $i1 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int yt>;

        $i0 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int xt>;

        $i2 = $i1 * $i0;

        r1 = newarray (short)[$i2];

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(0);

        i11 = 0;

     label1:
        $i3 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int yt>;

        if i11 >= $i3 goto label4;

        $s4 = virtualinvoke r2.<java.nio.ByteBuffer: short getShort()>();

        $i12 = (int) $s4;

        r3 = newarray (byte)[$i12];

        virtualinvoke r2.<java.nio.ByteBuffer: int remaining()>();

        $i13 = (int) $s4;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(r3, 0, $i13);

        $i5 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int code>;

        if $i5 != 17 goto label2;

        $i10 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int xt>;

        $i14 = (int) $s4;

        r5 = virtualinvoke r4.<ucar.nc2.iosp.nids.Nidsiosp: short[] readOneRowData1(byte[],int,int)>(r3, $i14, $i10);

        goto label3;

     label2:
        $i6 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int xt>;

        $i15 = (int) $s4;

        r5 = virtualinvoke r4.<ucar.nc2.iosp.nids.Nidsiosp: short[] readOneRowData2(byte[],int,int)>(r3, $i15, $i6);

     label3:
        $i7 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int xt>;

        $i9 = $i7 * i11;

        $i8 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int xt>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, r1, $i9, $i8);

        i11 = i11 + 1;

        goto label1;

     label4:
        return r1;
    }

    public short[] readOneRowData1(byte[], int, int) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        byte[] r2;
        short $s4, $s6;
        byte $b3, $b5;
        ucar.nc2.iosp.nids.Nidsiosp r1;
        int i0, i1, $i2, $i7, i8, i9, i10, i11, i12, i13, $i14;
        short[] r0;

        r1 := @this: ucar.nc2.iosp.nids.Nidsiosp;

        r2 := @parameter0: byte[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        r0 = newarray (short)[i0];

        i8 = 0;

        i9 = 0;

        i10 = 0;

     label1:
        $i2 = i1 - 1;

        if i10 >= $i2 goto label4;

        $b3 = r2[i10];

        $s4 = virtualinvoke r1.<ucar.nc2.iosp.nids.Nidsiosp: short convertunsignedByte2Short(byte)>($b3);

        i11 = i10 + 1;

        $b5 = r2[i11];

        $s6 = virtualinvoke r1.<ucar.nc2.iosp.nids.Nidsiosp: short convertunsignedByte2Short(byte)>($b5);

        i12 = 0;

     label2:
        $i14 = (int) $s4;

        if i12 >= $i14 goto label3;

        $i7 = i8;

        i8 = i8 + 1;

        r0[$i7] = $s6;

        i9 = i9 + 1;

        i12 = i12 + 1;

        goto label2;

     label3:
        i10 = i11 + 1;

        goto label1;

     label4:
        if i9 >= i0 goto label6;

        i13 = i9;

     label5:
        if i13 >= i0 goto label6;

        r0[i13] = 0;

        i13 = i13 + 1;

        goto label5;

     label6:
        return r0;
    }

    public short[] readOneRowData2(byte[], int, int) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        byte[] r2;
        short $s3, $s6, $s7, s8;
        byte $b2, $b5;
        ucar.nc2.iosp.nids.Nidsiosp r1;
        int i0, i1, i4, $i9, i10, i11, i12, i13, i14, $i15;
        short[] r0;

        r1 := @this: ucar.nc2.iosp.nids.Nidsiosp;

        r2 := @parameter0: byte[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        r0 = newarray (short)[i0];

        i10 = 0;

        i11 = 0;

        i12 = 0;

     label1:
        if i12 >= i1 goto label4;

        $b2 = r2[i12];

        $s3 = virtualinvoke r1.<ucar.nc2.iosp.nids.Nidsiosp: short convertunsignedByte2Short(byte)>($b2);

        $i15 = (int) $s3;

        i4 = $i15 >> 4;

        $b5 = r2[i12];

        $s6 = virtualinvoke r1.<ucar.nc2.iosp.nids.Nidsiosp: short convertunsignedByte2Short(byte)>($b5);

        $s7 = $s6 & 15;

        s8 = (short) $s7;

        i13 = 0;

     label2:
        if i13 >= i4 goto label3;

        $i9 = i10;

        i10 = i10 + 1;

        r0[$i9] = s8;

        i11 = i11 + 1;

        i13 = i13 + 1;

        goto label2;

     label3:
        i12 = i12 + 1;

        goto label1;

     label4:
        if i11 >= i0 goto label6;

        i14 = i11;

     label5:
        if i14 >= i0 goto label6;

        r0[i14] = 0;

        i14 = i14 + 1;

        goto label5;

     label6:
        return r0;
    }

    public byte[] readOneRowData(byte[], int, int) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        byte[] r0, r2;
        short $s3, $s6, $s7;
        byte $b2, $b5, b8;
        ucar.nc2.iosp.nids.Nidsiosp r1;
        int i0, i1, i4, $i9, i10, i11, i12, i13, i14, $i15;

        r1 := @this: ucar.nc2.iosp.nids.Nidsiosp;

        r2 := @parameter0: byte[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        r0 = newarray (byte)[i0];

        i10 = 0;

        i11 = 0;

        i12 = 0;

     label1:
        if i12 >= i1 goto label4;

        $b2 = r2[i12];

        $s3 = virtualinvoke r1.<ucar.nc2.iosp.nids.Nidsiosp: short convertunsignedByte2Short(byte)>($b2);

        $i15 = (int) $s3;

        i4 = $i15 >> 4;

        $b5 = r2[i12];

        $s6 = virtualinvoke r1.<ucar.nc2.iosp.nids.Nidsiosp: short convertunsignedByte2Short(byte)>($b5);

        $s7 = $s6 & 15;

        b8 = (byte) $s7;

        i13 = 0;

     label2:
        if i13 >= i4 goto label3;

        $i9 = i10;

        i10 = i10 + 1;

        r0[$i9] = b8;

        i11 = i11 + 1;

        i13 = i13 + 1;

        goto label2;

     label3:
        i12 = i12 + 1;

        goto label1;

     label4:
        if i11 >= i0 goto label6;

        i14 = i11;

     label5:
        if i14 >= i0 goto label6;

        r0[i14] = 0;

        i14 = i14 + 1;

        goto label5;

     label6:
        return r0;
    }

    public java.lang.Object readRadialDataEle(java.nio.ByteBuffer, ucar.nc2.iosp.nids.Nidsheader$Vinfo) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        ucar.nc2.iosp.nids.Nidsheader$Vinfo r0;
        float[] r1;
        java.nio.ByteBuffer r3;
        ucar.nc2.iosp.nids.Nidsiosp r2;
        int $i0, $i1, $i2, i3;
        float $f0, f1;

        r2 := @this: ucar.nc2.iosp.nids.Nidsiosp;

        r3 := @parameter0: java.nio.ByteBuffer;

        r0 := @parameter1: ucar.nc2.iosp.nids.Nidsheader$Vinfo;

        $i0 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int yt>;

        r1 = newarray (float)[$i0];

        $i1 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int y0>;

        $f0 = (float) $i1;

        f1 = $f0 * 0.1F;

        i3 = 0;

     label1:
        $i2 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int yt>;

        if i3 >= $i2 goto label2;

        r1[i3] = f1;

        i3 = i3 + 1;

        goto label1;

     label2:
        return r1;
    }

    public java.lang.Object readRadialDataLatLonAlt(double, ucar.nc2.iosp.nids.Nidsheader$Vinfo) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        ucar.nc2.iosp.nids.Nidsheader$Vinfo r0;
        float[] r1;
        ucar.nc2.iosp.nids.Nidsiosp r2;
        int $i0, $i1, i2;
        float $f0;
        double d0;

        r2 := @this: ucar.nc2.iosp.nids.Nidsiosp;

        d0 := @parameter0: double;

        r0 := @parameter1: ucar.nc2.iosp.nids.Nidsheader$Vinfo;

        $i0 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int yt>;

        r1 = newarray (float)[$i0];

        i2 = 0;

     label1:
        $i1 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int yt>;

        if i2 >= $i1 goto label2;

        $f0 = (float) d0;

        r1[i2] = $f0;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

    public java.lang.Object readRadialDataAzi(java.nio.ByteBuffer, ucar.nc2.iosp.nids.Nidsheader$Vinfo) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        java.lang.Float $r5;
        float[] r1;
        java.nio.ByteBuffer r2;
        short $s2, $s3;
        ucar.nc2.iosp.nids.Nidsiosp r4;
        int $i0, $i1, $i4, $i5, i6, i7, i8, i9, i10, $i11, $i12, $i13;
        ucar.nc2.iosp.nids.Nidsheader$Vinfo r0;
        float $f0, f1, $f2;

        r4 := @this: ucar.nc2.iosp.nids.Nidsiosp;

        r2 := @parameter0: java.nio.ByteBuffer;

        r0 := @parameter1: ucar.nc2.iosp.nids.Nidsheader$Vinfo;

        i6 = 0;

        $i0 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int yt>;

        r1 = newarray (float)[$i0];

        i7 = 0;

     label1:
        $i1 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int yt>;

        if i7 >= $i1 goto label4;

        $s2 = virtualinvoke r2.<java.nio.ByteBuffer: short getShort()>();

        i8 = i6 + 2;

        $s3 = virtualinvoke r2.<java.nio.ByteBuffer: short getShort()>();

        $f0 = (float) $s3;

        f1 = $f0 / 10.0F;

        i9 = i8 + 2;

        virtualinvoke r2.<java.nio.ByteBuffer: short getShort()>();

        i10 = i9 + 2;

        $i4 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int xt>;

        $i11 = (int) $s2;

        if $i4 == $i11 goto label2;

        $i12 = (int) $s2;

        $i5 = $i12 * 2;

        i6 = i10 + $i5;

        goto label3;

     label2:
        $i13 = (int) $s2;

        i6 = i10 + $i13;

     label3:
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i6);

        $r5 = new java.lang.Float;

        specialinvoke $r5.<java.lang.Float: void <init>(float)>(f1);

        $f2 = virtualinvoke $r5.<java.lang.Float: float floatValue()>();

        r1[i7] = $f2;

        i7 = i7 + 1;

        goto label1;

     label4:
        return r1;
    }

    public java.lang.Object readDistance(ucar.nc2.iosp.nids.Nidsheader$Vinfo) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        ucar.nc2.iosp.nids.Nidsheader$Vinfo r0;
        int[] r1;
        ucar.nc2.iosp.nids.Nidsiosp r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i8, $i9, i10, i11;

        r2 := @this: ucar.nc2.iosp.nids.Nidsiosp;

        r0 := @parameter0: ucar.nc2.iosp.nids.Nidsheader$Vinfo;

        $i1 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int yt>;

        $i0 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int xt>;

        $i2 = $i1 * $i0;

        r1 = newarray (int)[$i2];

        i10 = 0;

     label1:
        $i3 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int yt>;

        if i10 >= $i3 goto label4;

        i11 = 0;

     label2:
        $i4 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int xt>;

        if i11 >= $i4 goto label3;

        $i5 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int yt>;

        $i6 = i10 * $i5;

        i7 = $i6 + i11;

        $i8 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int x0>;

        $i9 = i11 + $i8;

        r1[i7] = $i9;

        i11 = i11 + 1;

        goto label2;

     label3:
        i10 = i10 + 1;

        goto label1;

     label4:
        return r1;
    }

    public java.lang.Object readRadialDataGate(ucar.nc2.iosp.nids.Nidsheader$Vinfo) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        float[] r1;
        ucar.nc2.iosp.nids.Nidsiosp r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        double $d0;
        ucar.nc2.iosp.nids.Nidsheader$Vinfo r0;
        float $f0, f1, $f2, $f3, $f4, $f5;

        r2 := @this: ucar.nc2.iosp.nids.Nidsiosp;

        r0 := @parameter0: ucar.nc2.iosp.nids.Nidsheader$Vinfo;

        $i0 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int xt>;

        r1 = newarray (float)[$i0];

        $i1 = r2.<ucar.nc2.iosp.nids.Nidsiosp: int pcode>;

        $d0 = staticinvoke <ucar.nc2.iosp.nids.Nidsheader: double code_reslookup(int)>($i1);

        $i2 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int y0>;

        $f0 = (float) $i2;

        f1 = $f0 * 1.0F;

        i6 = 0;

     label1:
        $i3 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int xt>;

        if i6 >= $i3 goto label2;

        $i4 = r0.<ucar.nc2.iosp.nids.Nidsheader$Vinfo: int x0>;

        $i5 = $i4 + i6;

        $f2 = (float) $i5;

        $f4 = $f2 * f1;

        $f3 = (float) $d0;

        $f5 = $f4 * $f3;

        r1[i6] = $f5;

        i6 = i6 + 1;

        goto label1;

     label2:
        return r1;
    }

    public byte[] readCompData1(byte[], long, long) throws java.io.IOException
    {
        byte[] r0, r2;
        long l7, $l8, $l9, l19;
        byte b0, b1, $b2, $b18;
        ucar.nc2.iosp.nids.Nidsiosp r1;
        int $i3, $i4, $i5, $i6, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i20, i21, $i22, $i23, $i24;

        r1 := @this: ucar.nc2.iosp.nids.Nidsiosp;

        r0 := @parameter0: byte[];

        l19 := @parameter1: long;

        l7 := @parameter2: long;

        b0 = r0[0];

        b1 = r0[1];

        $b2 = b0 & 63;

        $i22 = (int) $b2;

        $i3 = $i22 << 8;

        $i23 = (int) b1;

        $i4 = $i3 + $i23;

        i20 = 2 * $i4;

        i21 = 0;

     label1:
        if i21 >= 2 goto label4;

     label2:
        $i17 = lengthof r0;

        if i20 >= $i17 goto label3;

        $b18 = r0[i20];

        $i24 = (int) $b18;

        if $i24 == 10 goto label3;

        i20 = i20 + 1;

        goto label2;

     label3:
        i20 = i20 + 1;

        i21 = i21 + 1;

        goto label1;

     label4:
        $i5 = lengthof r0;

        $i6 = $i5 - i20;

        $l8 = (long) $i6;

        $l9 = $l8 - l7;

        $i10 = (int) $l9;

        r2 = newarray (byte)[$i10];

        $i11 = (int) l7;

        $i16 = i20 + $i11;

        $i12 = lengthof r0;

        $i14 = $i12 - i20;

        $i13 = (int) l7;

        $i15 = $i14 - $i13;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, $i16, r2, 0, $i15);

        return r2;
    }

    public byte[] readCompData(long, long) throws java.io.IOException
    {
        byte[] r3, r7, r17, r18, r19;
        byte $b7, $b20, $b36, $b37;
        ucar.nc2.iosp.nids.Nidsheader $r6;
        java.lang.StringBuilder $r11, $r13, $r21;
        long $l0, l1, $l2, l11, $l12, $l13;
        ucar.nc2.iosp.nids.Nidsiosp r0;
        java.lang.String $r12, $r14, $r16;
        java.io.IOException $r22;
        ucar.unidata.io.RandomAccessFile $r1, $r2, $r4;
        java.util.zip.Inflater $r20;
        int i3, $i4, $i5, $i6, $i8, $i9, $i10, $i14, $i15, $i16, $i17, $i18, $i19, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, i38, i39, $i40, i41, i42, $i43, $i44, $i45;
        java.util.zip.DataFormatException $r8;
        java.io.PrintStream $r10;

        r0 := @this: ucar.nc2.iosp.nids.Nidsiosp;

        l1 := @parameter0: long;

        l11 := @parameter1: long;

        $r1 = r0.<ucar.nc2.iosp.nids.Nidsiosp: ucar.unidata.io.RandomAccessFile myRaf>;

        $l0 = virtualinvoke $r1.<ucar.unidata.io.RandomAccessFile: long length()>();

        $r2 = r0.<ucar.nc2.iosp.nids.Nidsiosp: ucar.unidata.io.RandomAccessFile myRaf>;

        virtualinvoke $r2.<ucar.unidata.io.RandomAccessFile: void seek(long)>(0L);

        $l2 = $l0 - l1;

        i3 = (int) $l2;

        $i4 = (int) $l0;

        r3 = newarray (byte)[$i4];

        $r4 = r0.<ucar.nc2.iosp.nids.Nidsiosp: ucar.unidata.io.RandomAccessFile myRaf>;

        virtualinvoke $r4.<ucar.unidata.io.RandomAccessFile: void readFully(byte[])>(r3);

        $r20 = new java.util.zip.Inflater;

        specialinvoke $r20.<java.util.zip.Inflater: void <init>(boolean)>(0);

        i38 = 0;

        i39 = 24500;

        r17 = newarray (byte)[24500];

        $i6 = (int) l1;

        $i5 = i3 - 4;

        virtualinvoke $r20.<java.util.zip.Inflater: void setInput(byte[],int,int)>(r3, $i6, $i5);

     label01:
        $i40 = virtualinvoke $r20.<java.util.zip.Inflater: int getRemaining()>();

        if $i40 <= 0 goto label08;

     label02:
        $i21 = virtualinvoke $r20.<java.util.zip.Inflater: int inflate(byte[],int,int)>(r17, i38, 4000);

     label03:
        goto label05;

     label04:
        $r8 := @caughtexception;

        $r10 = <java.lang.System: java.io.PrintStream out>;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ERROR on inflation ");

        $r12 = virtualinvoke $r8.<java.util.zip.DataFormatException: java.lang.String getMessage()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r14);

        virtualinvoke $r8.<java.util.zip.DataFormatException: void printStackTrace()>();

        $r22 = new java.io.IOException;

        $r16 = virtualinvoke $r8.<java.util.zip.DataFormatException: java.lang.String getMessage()>();

        specialinvoke $r22.<java.io.IOException: void <init>(java.lang.String)>($r16);

        throw $r22;

     label05:
        i38 = i38 + $i21;

        if i38 <= 20000 goto label06;

        r7 = newarray (byte)[i38];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r17, 0, r7, 0, i38);

        i39 = i39 + 10000;

        r17 = newarray (byte)[i39];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r7, 0, r17, 0, i38);

     label06:
        if $i21 != 0 goto label01;

        $i22 = virtualinvoke $r20.<java.util.zip.Inflater: int getRemaining()>();

        r18 = newarray (byte)[2];

        $i23 = (int) l1;

        $i24 = $i23 + i3;

        $i25 = $i24 - 4;

        $i26 = $i25 - $i22;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, $i26, r18, 0, 2);

        $r6 = r0.<ucar.nc2.iosp.nids.Nidsiosp: ucar.nc2.iosp.nids.Nidsheader headerParser>;

        $i27 = virtualinvoke $r6.<ucar.nc2.iosp.nids.Nidsheader: int isZlibHed(byte[])>(r18);

        if $i27 != 0 goto label07;

        $i32 = (int) l1;

        $i33 = $i32 + i3;

        $i34 = $i33 - 4;

        $i35 = $i34 - $i22;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, $i35, r17, i38, $i22);

        i38 = i38 + $i22;

        goto label08;

     label07:
        virtualinvoke $r20.<java.util.zip.Inflater: void reset()>();

        $i28 = (int) l1;

        $i29 = $i28 + i3;

        $i30 = $i29 - 4;

        $i31 = $i30 - $i22;

        virtualinvoke $r20.<java.util.zip.Inflater: void setInput(byte[],int,int)>(r3, $i31, $i22);

        goto label01;

     label08:
        virtualinvoke $r20.<java.util.zip.Inflater: void end()>();

        $b36 = r17[0];

        $b37 = r17[1];

        $b7 = $b36 & 63;

        $i43 = (int) $b7;

        $i8 = $i43 << 8;

        $i44 = (int) $b37;

        $i9 = $i8 + $i44;

        i41 = 2 * $i9;

        i42 = 0;

     label09:
        if i42 >= 2 goto label12;

     label10:
        if i41 >= i38 goto label11;

        $b20 = r17[i41];

        $i45 = (int) $b20;

        if $i45 == 10 goto label11;

        i41 = i41 + 1;

        goto label10;

     label11:
        i41 = i41 + 1;

        i42 = i42 + 1;

        goto label09;

     label12:
        $i10 = i38 - i41;

        $l12 = (long) $i10;

        $l13 = $l12 - l11;

        $i14 = (int) $l13;

        r19 = newarray (byte)[$i14];

        $i15 = (int) l11;

        $i19 = i41 + $i15;

        $i17 = i38 - i41;

        $i16 = (int) l11;

        $i18 = $i17 - $i16;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r17, $i19, r19, 0, $i18);

        return r19;

        catch java.util.zip.DataFormatException from label02 to label03 with label04;
    }

    public byte[] readUCompData(long, long) throws java.io.IOException
    {
        byte[] r3, r5, r6;
        ucar.unidata.io.RandomAccessFile $r1, $r2, $r4;
        long $l0, l1, $l2, l9, $l10, $l11;
        ucar.nc2.iosp.nids.Nidsiosp r0;
        int i3, $i4, $i5, $i6, $i7, $i8, $i12, $i13, $i14, $i15, $i16;

        r0 := @this: ucar.nc2.iosp.nids.Nidsiosp;

        l1 := @parameter0: long;

        l9 := @parameter1: long;

        $r1 = r0.<ucar.nc2.iosp.nids.Nidsiosp: ucar.unidata.io.RandomAccessFile myRaf>;

        $l0 = virtualinvoke $r1.<ucar.unidata.io.RandomAccessFile: long length()>();

        $r2 = r0.<ucar.nc2.iosp.nids.Nidsiosp: ucar.unidata.io.RandomAccessFile myRaf>;

        virtualinvoke $r2.<ucar.unidata.io.RandomAccessFile: void seek(long)>(0L);

        $l2 = $l0 - l1;

        i3 = (int) $l2;

        $i4 = (int) $l0;

        r3 = newarray (byte)[$i4];

        $r4 = r0.<ucar.nc2.iosp.nids.Nidsiosp: ucar.unidata.io.RandomAccessFile myRaf>;

        virtualinvoke $r4.<ucar.unidata.io.RandomAccessFile: void readFully(byte[])>(r3);

        $i5 = i3 - 4;

        r5 = newarray (byte)[$i5];

        $i7 = (int) l1;

        $i6 = i3 - 4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, $i7, r5, 0, $i6);

        $i8 = lengthof r5;

        $l10 = (long) $i8;

        $l11 = $l10 - l9;

        $i12 = (int) $l11;

        r6 = newarray (byte)[$i12];

        $i16 = (int) l9;

        $i14 = lengthof r5;

        $i13 = (int) l9;

        $i15 = $i14 - $i13;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, $i16, r6, 0, $i15);

        return r6;
    }

    int issZlibed(byte[])
    {
        byte[] r0;
        byte $b0, $b1, $b2, $b5, $b6;
        ucar.nc2.iosp.nids.Nidsiosp r1;
        int $i3, $i4, $i7, $i8, $i9, $i10, $i11, $i12, $i13;

        r1 := @this: ucar.nc2.iosp.nids.Nidsiosp;

        r0 := @parameter0: byte[];

        $b0 = r0[0];

        $b1 = $b0 & 15;

        $i10 = (int) $b1;

        if $i10 != 8 goto label1;

        $b2 = r0[0];

        $i11 = (int) $b2;

        $i3 = $i11 >> 4;

        $i4 = $i3 + 8;

        if $i4 > 15 goto label1;

        $b5 = r0[0];

        $i12 = (int) $b5;

        $i7 = $i12 << 8;

        $b6 = r0[1];

        $i13 = (int) $b6;

        $i8 = $i7 + $i13;

        $i9 = $i8 % 31;

        if $i9 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    int getUInt(byte[], int, int)
    {
        byte[] r2;
        short $s6;
        byte $b5;
        int[] r0;
        ucar.nc2.iosp.nids.Nidsiosp r1;
        int i0, $i1, $i2, i3, $i4, i7, i8, i9, i10, $i11, $i13;

        r1 := @this: ucar.nc2.iosp.nids.Nidsiosp;

        r2 := @parameter0: byte[];

        i3 := @parameter1: int;

        i0 := @parameter2: int;

        i7 = 1;

        i8 = 0;

        r0 = newarray (int)[i0];

        i9 = 0;

     label1:
        if i9 >= i0 goto label2;

        $i4 = i3 + i9;

        $b5 = r2[$i4];

        $s6 = virtualinvoke r1.<ucar.nc2.iosp.nids.Nidsiosp: short convertunsignedByte2Short(byte)>($b5);

        $i11 = (int) $s6;

        r0[i9] = $i11;

        i9 = i9 + 1;

        goto label1;

     label2:
        i10 = i0 - 1;

     label3:
        if i10 < 0 goto label4;

        $i1 = r0[i10];

        $i2 = i7 * $i1;

        i8 = i8 + $i2;

        i7 = i7 * 256;

        $i13 = (int) -1;

        i10 = i10 + $i13;

        goto label3;

     label4:
        return i8;
    }

    int getInt(byte[], int, int)
    {
        byte[] r2;
        short $s9;
        byte $b8;
        int[] r0;
        ucar.nc2.iosp.nids.Nidsiosp r1;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, $i7, i10, i11, i12, i13, $i14, $i16, $i18;

        r1 := @this: ucar.nc2.iosp.nids.Nidsiosp;

        r2 := @parameter0: byte[];

        i6 := @parameter1: int;

        i0 := @parameter2: int;

        i10 = 1;

        i11 = 0;

        r0 = newarray (int)[i0];

        i12 = 0;

     label1:
        if i12 >= i0 goto label2;

        $i7 = i6 + i12;

        $b8 = r2[$i7];

        $s9 = virtualinvoke r1.<ucar.nc2.iosp.nids.Nidsiosp: short convertunsignedByte2Short(byte)>($b8);

        $i14 = (int) $s9;

        r0[i12] = $i14;

        i12 = i12 + 1;

        goto label1;

     label2:
        $i1 = r0[0];

        if $i1 <= 127 goto label3;

        $i4 = r0[0];

        $i5 = $i4 - 128;

        r0[0] = $i5;

        $i16 = (int) -1;

        i10 = $i16;

     label3:
        i13 = i0 - 1;

     label4:
        if i13 < 0 goto label5;

        $i2 = r0[i13];

        $i3 = i10 * $i2;

        i11 = i11 + $i3;

        i10 = i10 * 256;

        $i18 = (int) -1;

        i13 = i13 + $i18;

        goto label4;

     label5:
        return i11;
    }

    public short convertunsignedByte2Short(byte)
    {
        short $s1, $s2, $s3, $s5;
        byte b0;
        ucar.nc2.iosp.nids.Nidsiosp r0;
        int $i4, $i6, $i7;

        r0 := @this: ucar.nc2.iosp.nids.Nidsiosp;

        b0 := @parameter0: byte;

        $i6 = (int) b0;

        if $i6 >= 0 goto label1;

        $s2 = (short) b0;

        $i7 = (int) $s2;

        $i4 = $i7 + 256;

        $s3 = (short) $i4;

        return $s3;

     label1:
        $s5 = (short) b0;

        $s1 = (short) $s5;

        return $s1;
    }

    public static int unsignedByteToInt(byte)
    {
        short $s1, $s2;
        byte b0;
        int $i3;

        b0 := @parameter0: byte;

        $s2 = (short) b0;

        $s1 = $s2 & 255;

        $i3 = (int) $s1;

        return $i3;
    }

    public void flush() throws java.io.IOException
    {
        ucar.unidata.io.RandomAccessFile $r1;
        ucar.nc2.iosp.nids.Nidsiosp r0;

        r0 := @this: ucar.nc2.iosp.nids.Nidsiosp;

        $r1 = r0.<ucar.nc2.iosp.nids.Nidsiosp: ucar.unidata.io.RandomAccessFile myRaf>;

        virtualinvoke $r1.<ucar.unidata.io.RandomAccessFile: void flush()>();

        return;
    }

    public void close() throws java.io.IOException
    {
        ucar.unidata.io.RandomAccessFile $r1;
        ucar.nc2.iosp.nids.Nidsiosp r0;

        r0 := @this: ucar.nc2.iosp.nids.Nidsiosp;

        $r1 = r0.<ucar.nc2.iosp.nids.Nidsiosp: ucar.unidata.io.RandomAccessFile myRaf>;

        virtualinvoke $r1.<ucar.unidata.io.RandomAccessFile: void close()>();

        return;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception, java.io.IOException, java.lang.InstantiationException, java.lang.IllegalAccessException
    {
        int[] $r2, $r3;
        ucar.ma2.ArrayByte r5;
        ucar.nc2.Variable $r1;
        java.lang.String[] r6;
        ucar.nc2.NetcdfFile $r0;
        ucar.ma2.Array $r4;

        r6 := @parameter0: java.lang.String[];

        staticinvoke <ucar.nc2.NetcdfFile: void registerIOProvider(java.lang.Class)>(class "Lucar/nc2/iosp/nids/Nidsiosp;");

        $r0 = staticinvoke <ucar.nc2.NetcdfFile: ucar.nc2.NetcdfFile open(java.lang.String)>("/home/yuanho/NIDS/N0R_20041102_2111");

        $r1 = virtualinvoke $r0.<ucar.nc2.NetcdfFile: ucar.nc2.Variable findVariable(java.lang.String)>("BaseReflectivity");

        $r2 = newarray (int)[2];

        $r2[0] = 0;

        $r2[1] = 0;

        $r3 = newarray (int)[2];

        $r3[0] = 300;

        $r3[1] = 36;

        $r4 = virtualinvoke $r1.<ucar.nc2.Variable: ucar.ma2.Array read(int[],int[])>($r2, $r3);

        r5 = (ucar.ma2.ArrayByte) $r4;

        virtualinvoke $r0.<ucar.nc2.NetcdfFile: void close()>();

        return;
    }

    public static void <clinit>()
    {
        <ucar.nc2.iosp.nids.Nidsiosp: int DEF_WBITS> = 15;

        <ucar.nc2.iosp.nids.Nidsiosp: int Z_DEFLATED> = 8;

        return;
    }
}
