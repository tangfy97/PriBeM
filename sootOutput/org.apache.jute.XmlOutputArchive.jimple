class org.apache.jute.XmlOutputArchive extends java.lang.Object implements org.apache.jute.OutputArchive
{
    private java.io.PrintStream stream;
    private int indent;
    private java.util.Stack compoundStack;

    private void putIndent()
    {
        java.io.PrintStream $r2;
        org.apache.jute.XmlOutputArchive r1;
        int $i0, i1;
        java.lang.StringBuilder $r0;
        java.lang.String $r3;

        r1 := @this: org.apache.jute.XmlOutputArchive;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("");

        i1 = 0;

     label1:
        $i0 = r1.<org.apache.jute.XmlOutputArchive: int indent>;

        if i1 >= $i0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        i1 = i1 + 1;

        goto label1;

     label2:
        $r2 = r1.<org.apache.jute.XmlOutputArchive: java.io.PrintStream stream>;

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void print(java.lang.String)>($r3);

        return;
    }

    private void addIndent()
    {
        org.apache.jute.XmlOutputArchive r0;
        int $i0, $i1;

        r0 := @this: org.apache.jute.XmlOutputArchive;

        $i0 = r0.<org.apache.jute.XmlOutputArchive: int indent>;

        $i1 = $i0 + 1;

        r0.<org.apache.jute.XmlOutputArchive: int indent> = $i1;

        return;
    }

    private void closeIndent()
    {
        org.apache.jute.XmlOutputArchive r0;
        int $i0, $i1;

        r0 := @this: org.apache.jute.XmlOutputArchive;

        $i0 = r0.<org.apache.jute.XmlOutputArchive: int indent>;

        $i1 = $i0 - 1;

        r0.<org.apache.jute.XmlOutputArchive: int indent> = $i1;

        return;
    }

    private void printBeginEnvelope(java.lang.String)
    {
        java.util.Stack $r1, $r3;
        java.lang.String r5, $r6, $r7, $r8, r15, $r18;
        boolean $z0, $z1, $z2, $z3;
        java.io.PrintStream $r2, $r9, $r10, $r11, $r13, $r19;
        org.apache.jute.XmlOutputArchive r0;
        java.lang.Object $r4;
        java.lang.StringBuilder $r12, $r14, $r16, $r17;

        r0 := @this: org.apache.jute.XmlOutputArchive;

        r15 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.jute.XmlOutputArchive: java.util.Stack compoundStack>;

        $z0 = virtualinvoke $r1.<java.util.Stack: boolean empty()>();

        if $z0 != 0 goto label4;

        $r3 = r0.<org.apache.jute.XmlOutputArchive: java.util.Stack compoundStack>;

        $r4 = virtualinvoke $r3.<java.util.Stack: java.lang.Object peek()>();

        r5 = (java.lang.String) $r4;

        $r6 = "struct";

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z1 == 0 goto label1;

        specialinvoke r0.<org.apache.jute.XmlOutputArchive: void putIndent()>();

        $r11 = r0.<org.apache.jute.XmlOutputArchive: java.io.PrintStream stream>;

        virtualinvoke $r11.<java.io.PrintStream: void print(java.lang.String)>("<member>\n");

        specialinvoke r0.<org.apache.jute.XmlOutputArchive: void addIndent()>();

        specialinvoke r0.<org.apache.jute.XmlOutputArchive: void putIndent()>();

        $r13 = r0.<org.apache.jute.XmlOutputArchive: java.io.PrintStream stream>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<name>");

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</name>\n");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r13.<java.io.PrintStream: void print(java.lang.String)>($r18);

        specialinvoke r0.<org.apache.jute.XmlOutputArchive: void putIndent()>();

        $r19 = r0.<org.apache.jute.XmlOutputArchive: java.io.PrintStream stream>;

        virtualinvoke $r19.<java.io.PrintStream: void print(java.lang.String)>("<value>");

        goto label3;

     label1:
        $r7 = "vector";

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z2 == 0 goto label2;

        $r10 = r0.<org.apache.jute.XmlOutputArchive: java.io.PrintStream stream>;

        virtualinvoke $r10.<java.io.PrintStream: void print(java.lang.String)>("<value>");

        goto label3;

     label2:
        $r8 = "map";

        $z3 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z3 == 0 goto label3;

        $r9 = r0.<org.apache.jute.XmlOutputArchive: java.io.PrintStream stream>;

        virtualinvoke $r9.<java.io.PrintStream: void print(java.lang.String)>("<value>");

     label3:
        goto label5;

     label4:
        $r2 = r0.<org.apache.jute.XmlOutputArchive: java.io.PrintStream stream>;

        virtualinvoke $r2.<java.io.PrintStream: void print(java.lang.String)>("<value>");

     label5:
        return;
    }

    private void printEndEnvelope(java.lang.String)
    {
        java.util.Stack $r1, $r3;
        java.lang.String r5, $r6, $r7, $r8, r13;
        boolean $z0, $z1, $z2, $z3;
        java.io.PrintStream $r2, $r9, $r10, $r11, $r12;
        org.apache.jute.XmlOutputArchive r0;
        java.lang.Object $r4;

        r0 := @this: org.apache.jute.XmlOutputArchive;

        r13 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.jute.XmlOutputArchive: java.util.Stack compoundStack>;

        $z0 = virtualinvoke $r1.<java.util.Stack: boolean empty()>();

        if $z0 != 0 goto label4;

        $r3 = r0.<org.apache.jute.XmlOutputArchive: java.util.Stack compoundStack>;

        $r4 = virtualinvoke $r3.<java.util.Stack: java.lang.Object peek()>();

        r5 = (java.lang.String) $r4;

        $r6 = "struct";

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z1 == 0 goto label1;

        $r11 = r0.<org.apache.jute.XmlOutputArchive: java.io.PrintStream stream>;

        virtualinvoke $r11.<java.io.PrintStream: void print(java.lang.String)>("</value>\n");

        specialinvoke r0.<org.apache.jute.XmlOutputArchive: void closeIndent()>();

        specialinvoke r0.<org.apache.jute.XmlOutputArchive: void putIndent()>();

        $r12 = r0.<org.apache.jute.XmlOutputArchive: java.io.PrintStream stream>;

        virtualinvoke $r12.<java.io.PrintStream: void print(java.lang.String)>("</member>\n");

        goto label3;

     label1:
        $r7 = "vector";

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z2 == 0 goto label2;

        $r10 = r0.<org.apache.jute.XmlOutputArchive: java.io.PrintStream stream>;

        virtualinvoke $r10.<java.io.PrintStream: void print(java.lang.String)>("</value>\n");

        goto label3;

     label2:
        $r8 = "map";

        $z3 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z3 == 0 goto label3;

        $r9 = r0.<org.apache.jute.XmlOutputArchive: java.io.PrintStream stream>;

        virtualinvoke $r9.<java.io.PrintStream: void print(java.lang.String)>("</value>\n");

     label3:
        goto label5;

     label4:
        $r2 = r0.<org.apache.jute.XmlOutputArchive: java.io.PrintStream stream>;

        virtualinvoke $r2.<java.io.PrintStream: void print(java.lang.String)>("</value>\n");

     label5:
        return;
    }

    private void insideVector(java.lang.String)
    {
        org.apache.jute.XmlOutputArchive r0;
        java.lang.String r1;
        java.util.Stack $r2;

        r0 := @this: org.apache.jute.XmlOutputArchive;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.jute.XmlOutputArchive: void printBeginEnvelope(java.lang.String)>(r1);

        $r2 = r0.<org.apache.jute.XmlOutputArchive: java.util.Stack compoundStack>;

        virtualinvoke $r2.<java.util.Stack: java.lang.Object push(java.lang.Object)>("vector");

        return;
    }

    private void outsideVector(java.lang.String) throws java.io.IOException
    {
        java.io.IOException $r6;
        java.util.Stack $r1;
        org.apache.jute.XmlOutputArchive r0;
        java.lang.Object $r2;
        java.lang.String r3, $r4, r5;
        boolean $z0;

        r0 := @this: org.apache.jute.XmlOutputArchive;

        r5 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.jute.XmlOutputArchive: java.util.Stack compoundStack>;

        $r2 = virtualinvoke $r1.<java.util.Stack: java.lang.Object pop()>();

        r3 = (java.lang.String) $r2;

        $r4 = "vector";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z0 != 0 goto label1;

        $r6 = new java.io.IOException;

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("Error serializing vector.");

        throw $r6;

     label1:
        specialinvoke r0.<org.apache.jute.XmlOutputArchive: void printEndEnvelope(java.lang.String)>(r5);

        return;
    }

    private void insideMap(java.lang.String)
    {
        org.apache.jute.XmlOutputArchive r0;
        java.lang.String r1;
        java.util.Stack $r2;

        r0 := @this: org.apache.jute.XmlOutputArchive;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.jute.XmlOutputArchive: void printBeginEnvelope(java.lang.String)>(r1);

        $r2 = r0.<org.apache.jute.XmlOutputArchive: java.util.Stack compoundStack>;

        virtualinvoke $r2.<java.util.Stack: java.lang.Object push(java.lang.Object)>("map");

        return;
    }

    private void outsideMap(java.lang.String) throws java.io.IOException
    {
        java.io.IOException $r6;
        java.util.Stack $r1;
        org.apache.jute.XmlOutputArchive r0;
        java.lang.Object $r2;
        java.lang.String r3, $r4, r5;
        boolean $z0;

        r0 := @this: org.apache.jute.XmlOutputArchive;

        r5 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.jute.XmlOutputArchive: java.util.Stack compoundStack>;

        $r2 = virtualinvoke $r1.<java.util.Stack: java.lang.Object pop()>();

        r3 = (java.lang.String) $r2;

        $r4 = "map";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z0 != 0 goto label1;

        $r6 = new java.io.IOException;

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("Error serializing map.");

        throw $r6;

     label1:
        specialinvoke r0.<org.apache.jute.XmlOutputArchive: void printEndEnvelope(java.lang.String)>(r5);

        return;
    }

    private void insideRecord(java.lang.String)
    {
        org.apache.jute.XmlOutputArchive r0;
        java.lang.String r1;
        java.util.Stack $r2;

        r0 := @this: org.apache.jute.XmlOutputArchive;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.jute.XmlOutputArchive: void printBeginEnvelope(java.lang.String)>(r1);

        $r2 = r0.<org.apache.jute.XmlOutputArchive: java.util.Stack compoundStack>;

        virtualinvoke $r2.<java.util.Stack: java.lang.Object push(java.lang.Object)>("struct");

        return;
    }

    private void outsideRecord(java.lang.String) throws java.io.IOException
    {
        java.io.IOException $r6;
        java.util.Stack $r1;
        org.apache.jute.XmlOutputArchive r0;
        java.lang.Object $r2;
        java.lang.String r3, $r4, r5;
        boolean $z0;

        r0 := @this: org.apache.jute.XmlOutputArchive;

        r5 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.jute.XmlOutputArchive: java.util.Stack compoundStack>;

        $r2 = virtualinvoke $r1.<java.util.Stack: java.lang.Object pop()>();

        r3 = (java.lang.String) $r2;

        $r4 = "struct";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z0 != 0 goto label1;

        $r6 = new java.io.IOException;

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("Error serializing record.");

        throw $r6;

     label1:
        specialinvoke r0.<org.apache.jute.XmlOutputArchive: void printEndEnvelope(java.lang.String)>(r5);

        return;
    }

    static org.apache.jute.XmlOutputArchive getArchive(java.io.OutputStream)
    {
        org.apache.jute.XmlOutputArchive $r0;
        java.io.OutputStream r1;

        r1 := @parameter0: java.io.OutputStream;

        $r0 = new org.apache.jute.XmlOutputArchive;

        specialinvoke $r0.<org.apache.jute.XmlOutputArchive: void <init>(java.io.OutputStream)>(r1);

        return $r0;
    }

    public void <init>(java.io.OutputStream)
    {
        java.io.PrintStream $r1;
        java.io.OutputStream r2;
        org.apache.jute.XmlOutputArchive r0;
        java.util.Stack $r3;

        r0 := @this: org.apache.jute.XmlOutputArchive;

        r2 := @parameter0: java.io.OutputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.jute.XmlOutputArchive: int indent> = 0;

        $r1 = new java.io.PrintStream;

        specialinvoke $r1.<java.io.PrintStream: void <init>(java.io.OutputStream)>(r2);

        r0.<org.apache.jute.XmlOutputArchive: java.io.PrintStream stream> = $r1;

        $r3 = new java.util.Stack;

        specialinvoke $r3.<java.util.Stack: void <init>()>();

        r0.<org.apache.jute.XmlOutputArchive: java.util.Stack compoundStack> = $r3;

        return;
    }

    public void writeByte(byte, java.lang.String) throws java.io.IOException
    {
        java.io.PrintStream $r2, $r3, $r5;
        byte b0;
        org.apache.jute.XmlOutputArchive r0;
        java.lang.String r1, $r4;

        r0 := @this: org.apache.jute.XmlOutputArchive;

        b0 := @parameter0: byte;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.jute.XmlOutputArchive: void printBeginEnvelope(java.lang.String)>(r1);

        $r2 = r0.<org.apache.jute.XmlOutputArchive: java.io.PrintStream stream>;

        virtualinvoke $r2.<java.io.PrintStream: void print(java.lang.String)>("<ex:i1>");

        $r3 = r0.<org.apache.jute.XmlOutputArchive: java.io.PrintStream stream>;

        $r4 = staticinvoke <java.lang.Byte: java.lang.String toString(byte)>(b0);

        virtualinvoke $r3.<java.io.PrintStream: void print(java.lang.String)>($r4);

        $r5 = r0.<org.apache.jute.XmlOutputArchive: java.io.PrintStream stream>;

        virtualinvoke $r5.<java.io.PrintStream: void print(java.lang.String)>("</ex:i1>");

        specialinvoke r0.<org.apache.jute.XmlOutputArchive: void printEndEnvelope(java.lang.String)>(r1);

        return;
    }

    public void writeBool(boolean, java.lang.String) throws java.io.IOException
    {
        java.io.PrintStream $r2, $r3, $r4;
        org.apache.jute.XmlOutputArchive r0;
        java.lang.String r1, $r5;
        boolean z0;

        r0 := @this: org.apache.jute.XmlOutputArchive;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.jute.XmlOutputArchive: void printBeginEnvelope(java.lang.String)>(r1);

        $r2 = r0.<org.apache.jute.XmlOutputArchive: java.io.PrintStream stream>;

        virtualinvoke $r2.<java.io.PrintStream: void print(java.lang.String)>("<boolean>");

        $r3 = r0.<org.apache.jute.XmlOutputArchive: java.io.PrintStream stream>;

        if z0 == 0 goto label1;

        $r5 = "1";

        goto label2;

     label1:
        $r5 = "0";

     label2:
        virtualinvoke $r3.<java.io.PrintStream: void print(java.lang.String)>($r5);

        $r4 = r0.<org.apache.jute.XmlOutputArchive: java.io.PrintStream stream>;

        virtualinvoke $r4.<java.io.PrintStream: void print(java.lang.String)>("</boolean>");

        specialinvoke r0.<org.apache.jute.XmlOutputArchive: void printEndEnvelope(java.lang.String)>(r1);

        return;
    }

    public void writeInt(int, java.lang.String) throws java.io.IOException
    {
        java.io.PrintStream $r2, $r3, $r5;
        org.apache.jute.XmlOutputArchive r0;
        int i0;
        java.lang.String r1, $r4;

        r0 := @this: org.apache.jute.XmlOutputArchive;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.jute.XmlOutputArchive: void printBeginEnvelope(java.lang.String)>(r1);

        $r2 = r0.<org.apache.jute.XmlOutputArchive: java.io.PrintStream stream>;

        virtualinvoke $r2.<java.io.PrintStream: void print(java.lang.String)>("<i4>");

        $r3 = r0.<org.apache.jute.XmlOutputArchive: java.io.PrintStream stream>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        virtualinvoke $r3.<java.io.PrintStream: void print(java.lang.String)>($r4);

        $r5 = r0.<org.apache.jute.XmlOutputArchive: java.io.PrintStream stream>;

        virtualinvoke $r5.<java.io.PrintStream: void print(java.lang.String)>("</i4>");

        specialinvoke r0.<org.apache.jute.XmlOutputArchive: void printEndEnvelope(java.lang.String)>(r1);

        return;
    }

    public void writeLong(long, java.lang.String) throws java.io.IOException
    {
        java.io.PrintStream $r2, $r3, $r5;
        org.apache.jute.XmlOutputArchive r0;
        long l0;
        java.lang.String r1, $r4;

        r0 := @this: org.apache.jute.XmlOutputArchive;

        l0 := @parameter0: long;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.jute.XmlOutputArchive: void printBeginEnvelope(java.lang.String)>(r1);

        $r2 = r0.<org.apache.jute.XmlOutputArchive: java.io.PrintStream stream>;

        virtualinvoke $r2.<java.io.PrintStream: void print(java.lang.String)>("<ex:i8>");

        $r3 = r0.<org.apache.jute.XmlOutputArchive: java.io.PrintStream stream>;

        $r4 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0);

        virtualinvoke $r3.<java.io.PrintStream: void print(java.lang.String)>($r4);

        $r5 = r0.<org.apache.jute.XmlOutputArchive: java.io.PrintStream stream>;

        virtualinvoke $r5.<java.io.PrintStream: void print(java.lang.String)>("</ex:i8>");

        specialinvoke r0.<org.apache.jute.XmlOutputArchive: void printEndEnvelope(java.lang.String)>(r1);

        return;
    }

    public void writeFloat(float, java.lang.String) throws java.io.IOException
    {
        java.io.PrintStream $r2, $r3, $r5;
        org.apache.jute.XmlOutputArchive r0;
        float f0;
        java.lang.String r1, $r4;

        r0 := @this: org.apache.jute.XmlOutputArchive;

        f0 := @parameter0: float;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.jute.XmlOutputArchive: void printBeginEnvelope(java.lang.String)>(r1);

        $r2 = r0.<org.apache.jute.XmlOutputArchive: java.io.PrintStream stream>;

        virtualinvoke $r2.<java.io.PrintStream: void print(java.lang.String)>("<ex:float>");

        $r3 = r0.<org.apache.jute.XmlOutputArchive: java.io.PrintStream stream>;

        $r4 = staticinvoke <java.lang.Float: java.lang.String toString(float)>(f0);

        virtualinvoke $r3.<java.io.PrintStream: void print(java.lang.String)>($r4);

        $r5 = r0.<org.apache.jute.XmlOutputArchive: java.io.PrintStream stream>;

        virtualinvoke $r5.<java.io.PrintStream: void print(java.lang.String)>("</ex:float>");

        specialinvoke r0.<org.apache.jute.XmlOutputArchive: void printEndEnvelope(java.lang.String)>(r1);

        return;
    }

    public void writeDouble(double, java.lang.String) throws java.io.IOException
    {
        java.io.PrintStream $r2, $r3, $r5;
        org.apache.jute.XmlOutputArchive r0;
        java.lang.String r1, $r4;
        double d0;

        r0 := @this: org.apache.jute.XmlOutputArchive;

        d0 := @parameter0: double;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.jute.XmlOutputArchive: void printBeginEnvelope(java.lang.String)>(r1);

        $r2 = r0.<org.apache.jute.XmlOutputArchive: java.io.PrintStream stream>;

        virtualinvoke $r2.<java.io.PrintStream: void print(java.lang.String)>("<double>");

        $r3 = r0.<org.apache.jute.XmlOutputArchive: java.io.PrintStream stream>;

        $r4 = staticinvoke <java.lang.Double: java.lang.String toString(double)>(d0);

        virtualinvoke $r3.<java.io.PrintStream: void print(java.lang.String)>($r4);

        $r5 = r0.<org.apache.jute.XmlOutputArchive: java.io.PrintStream stream>;

        virtualinvoke $r5.<java.io.PrintStream: void print(java.lang.String)>("</double>");

        specialinvoke r0.<org.apache.jute.XmlOutputArchive: void printEndEnvelope(java.lang.String)>(r1);

        return;
    }

    public void writeString(java.lang.String, java.lang.String) throws java.io.IOException
    {
        java.io.PrintStream $r2, $r4, $r6;
        org.apache.jute.XmlOutputArchive r0;
        java.lang.String r1, r3, $r5;

        r0 := @this: org.apache.jute.XmlOutputArchive;

        r3 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.jute.XmlOutputArchive: void printBeginEnvelope(java.lang.String)>(r1);

        $r2 = r0.<org.apache.jute.XmlOutputArchive: java.io.PrintStream stream>;

        virtualinvoke $r2.<java.io.PrintStream: void print(java.lang.String)>("<string>");

        $r4 = r0.<org.apache.jute.XmlOutputArchive: java.io.PrintStream stream>;

        $r5 = staticinvoke <org.apache.jute.Utils: java.lang.String toXMLString(java.lang.String)>(r3);

        virtualinvoke $r4.<java.io.PrintStream: void print(java.lang.String)>($r5);

        $r6 = r0.<org.apache.jute.XmlOutputArchive: java.io.PrintStream stream>;

        virtualinvoke $r6.<java.io.PrintStream: void print(java.lang.String)>("</string>");

        specialinvoke r0.<org.apache.jute.XmlOutputArchive: void printEndEnvelope(java.lang.String)>(r1);

        return;
    }

    public void writeBuffer(byte[], java.lang.String) throws java.io.IOException
    {
        java.io.PrintStream $r2, $r4, $r6;
        byte[] r3;
        org.apache.jute.XmlOutputArchive r0;
        java.lang.String r1, $r5;

        r0 := @this: org.apache.jute.XmlOutputArchive;

        r3 := @parameter0: byte[];

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.jute.XmlOutputArchive: void printBeginEnvelope(java.lang.String)>(r1);

        $r2 = r0.<org.apache.jute.XmlOutputArchive: java.io.PrintStream stream>;

        virtualinvoke $r2.<java.io.PrintStream: void print(java.lang.String)>("<string>");

        $r4 = r0.<org.apache.jute.XmlOutputArchive: java.io.PrintStream stream>;

        $r5 = staticinvoke <org.apache.jute.Utils: java.lang.String toXMLBuffer(byte[])>(r3);

        virtualinvoke $r4.<java.io.PrintStream: void print(java.lang.String)>($r5);

        $r6 = r0.<org.apache.jute.XmlOutputArchive: java.io.PrintStream stream>;

        virtualinvoke $r6.<java.io.PrintStream: void print(java.lang.String)>("</string>");

        specialinvoke r0.<org.apache.jute.XmlOutputArchive: void printEndEnvelope(java.lang.String)>(r1);

        return;
    }

    public void writeRecord(org.apache.jute.Record, java.lang.String) throws java.io.IOException
    {
        org.apache.jute.XmlOutputArchive r1;
        org.apache.jute.Record r0;
        java.lang.String r2;

        r1 := @this: org.apache.jute.XmlOutputArchive;

        r0 := @parameter0: org.apache.jute.Record;

        r2 := @parameter1: java.lang.String;

        interfaceinvoke r0.<org.apache.jute.Record: void serialize(org.apache.jute.OutputArchive,java.lang.String)>(r1, r2);

        return;
    }

    public void startRecord(org.apache.jute.Record, java.lang.String) throws java.io.IOException
    {
        java.io.PrintStream $r2;
        org.apache.jute.XmlOutputArchive r0;
        org.apache.jute.Record r3;
        java.lang.String r1;

        r0 := @this: org.apache.jute.XmlOutputArchive;

        r3 := @parameter0: org.apache.jute.Record;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.jute.XmlOutputArchive: void insideRecord(java.lang.String)>(r1);

        $r2 = r0.<org.apache.jute.XmlOutputArchive: java.io.PrintStream stream>;

        virtualinvoke $r2.<java.io.PrintStream: void print(java.lang.String)>("<struct>\n");

        specialinvoke r0.<org.apache.jute.XmlOutputArchive: void addIndent()>();

        return;
    }

    public void endRecord(org.apache.jute.Record, java.lang.String) throws java.io.IOException
    {
        java.io.PrintStream $r1;
        org.apache.jute.XmlOutputArchive r0;
        org.apache.jute.Record r3;
        java.lang.String r2;

        r0 := @this: org.apache.jute.XmlOutputArchive;

        r3 := @parameter0: org.apache.jute.Record;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.jute.XmlOutputArchive: void closeIndent()>();

        specialinvoke r0.<org.apache.jute.XmlOutputArchive: void putIndent()>();

        $r1 = r0.<org.apache.jute.XmlOutputArchive: java.io.PrintStream stream>;

        virtualinvoke $r1.<java.io.PrintStream: void print(java.lang.String)>("</struct>");

        specialinvoke r0.<org.apache.jute.XmlOutputArchive: void outsideRecord(java.lang.String)>(r2);

        return;
    }

    public void startVector(java.util.List, java.lang.String) throws java.io.IOException
    {
        java.io.PrintStream $r2;
        java.util.List r3;
        org.apache.jute.XmlOutputArchive r0;
        java.lang.String r1;

        r0 := @this: org.apache.jute.XmlOutputArchive;

        r3 := @parameter0: java.util.List;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.jute.XmlOutputArchive: void insideVector(java.lang.String)>(r1);

        $r2 = r0.<org.apache.jute.XmlOutputArchive: java.io.PrintStream stream>;

        virtualinvoke $r2.<java.io.PrintStream: void print(java.lang.String)>("<array>\n");

        specialinvoke r0.<org.apache.jute.XmlOutputArchive: void addIndent()>();

        return;
    }

    public void endVector(java.util.List, java.lang.String) throws java.io.IOException
    {
        java.io.PrintStream $r1;
        java.util.List r3;
        org.apache.jute.XmlOutputArchive r0;
        java.lang.String r2;

        r0 := @this: org.apache.jute.XmlOutputArchive;

        r3 := @parameter0: java.util.List;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.jute.XmlOutputArchive: void closeIndent()>();

        specialinvoke r0.<org.apache.jute.XmlOutputArchive: void putIndent()>();

        $r1 = r0.<org.apache.jute.XmlOutputArchive: java.io.PrintStream stream>;

        virtualinvoke $r1.<java.io.PrintStream: void print(java.lang.String)>("</array>");

        specialinvoke r0.<org.apache.jute.XmlOutputArchive: void outsideVector(java.lang.String)>(r2);

        return;
    }

    public void startMap(java.util.TreeMap, java.lang.String) throws java.io.IOException
    {
        java.io.PrintStream $r2;
        java.util.TreeMap r3;
        org.apache.jute.XmlOutputArchive r0;
        java.lang.String r1;

        r0 := @this: org.apache.jute.XmlOutputArchive;

        r3 := @parameter0: java.util.TreeMap;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.jute.XmlOutputArchive: void insideMap(java.lang.String)>(r1);

        $r2 = r0.<org.apache.jute.XmlOutputArchive: java.io.PrintStream stream>;

        virtualinvoke $r2.<java.io.PrintStream: void print(java.lang.String)>("<array>\n");

        specialinvoke r0.<org.apache.jute.XmlOutputArchive: void addIndent()>();

        return;
    }

    public void endMap(java.util.TreeMap, java.lang.String) throws java.io.IOException
    {
        java.io.PrintStream $r1;
        java.util.TreeMap r3;
        org.apache.jute.XmlOutputArchive r0;
        java.lang.String r2;

        r0 := @this: org.apache.jute.XmlOutputArchive;

        r3 := @parameter0: java.util.TreeMap;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.jute.XmlOutputArchive: void closeIndent()>();

        specialinvoke r0.<org.apache.jute.XmlOutputArchive: void putIndent()>();

        $r1 = r0.<org.apache.jute.XmlOutputArchive: java.io.PrintStream stream>;

        virtualinvoke $r1.<java.io.PrintStream: void print(java.lang.String)>("</array>");

        specialinvoke r0.<org.apache.jute.XmlOutputArchive: void outsideMap(java.lang.String)>(r2);

        return;
    }
}
