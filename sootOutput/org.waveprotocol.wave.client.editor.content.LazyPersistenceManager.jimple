public class org.waveprotocol.wave.client.editor.content.LazyPersistenceManager extends java.lang.Object
{
    private final org.waveprotocol.wave.model.operation.SilentOperationSink sink;
    private final org.waveprotocol.wave.model.document.util.LocalDocument localDoc;
    private final org.waveprotocol.wave.model.document.indexed.LocationMapper persistedLocations;
    private final org.waveprotocol.wave.model.document.util.ReadableDocumentView persistedView;
    private org.waveprotocol.wave.model.document.util.ReadableTreeWalker nodeCreationDelegate;
    private final org.waveprotocol.wave.model.util.IdentityMap lazilyPersistedNodes;

    public void <init>(org.waveprotocol.wave.model.operation.SilentOperationSink, org.waveprotocol.wave.model.document.util.LocalDocument, org.waveprotocol.wave.model.document.indexed.LocationMapper, org.waveprotocol.wave.model.document.util.ReadableDocumentView, org.waveprotocol.wave.model.document.operation.ModifiableDocument)
    {
        org.waveprotocol.wave.model.document.util.LocalDocument r5;
        org.waveprotocol.wave.model.util.IdentityMap $r1;
        org.waveprotocol.wave.model.document.util.ReadableDocumentView r7;
        org.waveprotocol.wave.client.editor.content.LazyPersistenceManager r0;
        org.waveprotocol.wave.model.document.indexed.LocationMapper r6;
        org.waveprotocol.wave.model.operation.SilentOperationSink r4;
        org.waveprotocol.wave.client.editor.content.LazyPersistenceManager$1 $r2;
        org.waveprotocol.wave.model.document.operation.ModifiableDocument r3;

        r0 := @this: org.waveprotocol.wave.client.editor.content.LazyPersistenceManager;

        r4 := @parameter0: org.waveprotocol.wave.model.operation.SilentOperationSink;

        r5 := @parameter1: org.waveprotocol.wave.model.document.util.LocalDocument;

        r6 := @parameter2: org.waveprotocol.wave.model.document.indexed.LocationMapper;

        r7 := @parameter3: org.waveprotocol.wave.model.document.util.ReadableDocumentView;

        r3 := @parameter4: org.waveprotocol.wave.model.document.operation.ModifiableDocument;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.content.LazyPersistenceManager: org.waveprotocol.wave.model.document.util.ReadableTreeWalker nodeCreationDelegate> = null;

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.IdentityMap createIdentityMap()>();

        r0.<org.waveprotocol.wave.client.editor.content.LazyPersistenceManager: org.waveprotocol.wave.model.util.IdentityMap lazilyPersistedNodes> = $r1;

        $r2 = new org.waveprotocol.wave.client.editor.content.LazyPersistenceManager$1;

        specialinvoke $r2.<org.waveprotocol.wave.client.editor.content.LazyPersistenceManager$1: void <init>(org.waveprotocol.wave.client.editor.content.LazyPersistenceManager,org.waveprotocol.wave.model.document.operation.ModifiableDocument,org.waveprotocol.wave.model.operation.SilentOperationSink)>(r0, r3, r4);

        r0.<org.waveprotocol.wave.client.editor.content.LazyPersistenceManager: org.waveprotocol.wave.model.operation.SilentOperationSink sink> = $r2;

        r0.<org.waveprotocol.wave.client.editor.content.LazyPersistenceManager: org.waveprotocol.wave.model.document.util.LocalDocument localDoc> = r5;

        r0.<org.waveprotocol.wave.client.editor.content.LazyPersistenceManager: org.waveprotocol.wave.model.document.indexed.LocationMapper persistedLocations> = r6;

        r0.<org.waveprotocol.wave.client.editor.content.LazyPersistenceManager: org.waveprotocol.wave.model.document.util.ReadableDocumentView persistedView> = r7;

        return;
    }

    public void markAsLazyPersisted(org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r1;
        org.waveprotocol.wave.client.editor.content.LazyPersistenceManager r0;
        org.waveprotocol.wave.model.util.IdentityMap $r2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.LazyPersistenceManager;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r2 = r0.<org.waveprotocol.wave.client.editor.content.LazyPersistenceManager: org.waveprotocol.wave.model.util.IdentityMap lazilyPersistedNodes>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.util.IdentityMap: void put(java.lang.Object,java.lang.Object)>(r1, r1);

        return;
    }

    public boolean isCreationDelegate()
    {
        org.waveprotocol.wave.client.editor.content.LazyPersistenceManager r0;
        org.waveprotocol.wave.model.document.util.ReadableTreeWalker $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.LazyPersistenceManager;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.LazyPersistenceManager: org.waveprotocol.wave.model.document.util.ReadableTreeWalker nodeCreationDelegate>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.waveprotocol.wave.client.editor.content.ContentElement createElement(java.lang.String, java.util.Map, org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r7;
        org.waveprotocol.wave.client.editor.content.LazyPersistenceManager r0;
        org.waveprotocol.wave.model.document.util.ReadableTreeWalker $r3;
        java.util.Map r2;
        java.lang.Object $r4;
        org.waveprotocol.wave.client.editor.content.ContentElement $r5, r6;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.LazyPersistenceManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Map;

        r6 := @parameter2: org.waveprotocol.wave.client.editor.content.ContentElement;

        r7 := @parameter3: org.waveprotocol.wave.client.editor.content.ContentNode;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.LazyPersistenceManager: boolean isCreationDelegate()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Lazy persistence delegated an element creation when not a delegate.");

        $r3 = r0.<org.waveprotocol.wave.client.editor.content.LazyPersistenceManager: org.waveprotocol.wave.model.document.util.ReadableTreeWalker nodeCreationDelegate>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.util.ReadableTreeWalker: java.lang.Object checkElement(java.lang.String,java.util.Map)>(r1, r2);

        $r5 = (org.waveprotocol.wave.client.editor.content.ContentElement) $r4;

        return $r5;
    }

    public org.waveprotocol.wave.client.editor.content.ContentTextNode createTextNode(java.lang.String, org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r6;
        org.waveprotocol.wave.client.editor.content.LazyPersistenceManager r0;
        org.waveprotocol.wave.model.document.util.ReadableTreeWalker $r2;
        org.waveprotocol.wave.client.editor.content.ContentTextNode $r4;
        java.lang.Object $r3;
        org.waveprotocol.wave.client.editor.content.ContentElement r5;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.LazyPersistenceManager;

        r1 := @parameter0: java.lang.String;

        r5 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentElement;

        r6 := @parameter2: org.waveprotocol.wave.client.editor.content.ContentNode;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.LazyPersistenceManager: boolean isCreationDelegate()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Lazy persistence delegated a text node creationgwhen not a delegate.");

        $r2 = r0.<org.waveprotocol.wave.client.editor.content.LazyPersistenceManager: org.waveprotocol.wave.model.document.util.ReadableTreeWalker nodeCreationDelegate>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.util.ReadableTreeWalker: java.lang.Object checkTextNode(java.lang.String)>(r1);

        $r4 = (org.waveprotocol.wave.client.editor.content.ContentTextNode) $r3;

        return $r4;
    }

    public void updateLazyNodes(org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r9;
        org.waveprotocol.wave.model.document.util.LocalDocument $r1, $r3, $r4, $r6;
        org.waveprotocol.wave.model.util.IdentityMap $r2, $r8;
        org.waveprotocol.wave.client.editor.content.LazyPersistenceManager r0;
        java.lang.Object $r5, $r7;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.LazyPersistenceManager;

        r9 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

     label1:
        $r1 = r0.<org.waveprotocol.wave.client.editor.content.LazyPersistenceManager: org.waveprotocol.wave.model.document.util.LocalDocument localDoc>;

        $z0 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.util.LocalDocument: boolean isTransparent(java.lang.Object)>(r9);

        if $z0 == 0 goto label4;

        $r2 = r0.<org.waveprotocol.wave.client.editor.content.LazyPersistenceManager: org.waveprotocol.wave.model.util.IdentityMap lazilyPersistedNodes>;

        $z1 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.IdentityMap: boolean has(java.lang.Object)>(r9);

        if $z1 == 0 goto label2;

        $r8 = r0.<org.waveprotocol.wave.client.editor.content.LazyPersistenceManager: org.waveprotocol.wave.model.util.IdentityMap lazilyPersistedNodes>;

        interfaceinvoke $r8.<org.waveprotocol.wave.model.util.IdentityMap: void remove(java.lang.Object)>(r9);

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.LazyPersistenceManager: void actuallyPersist(org.waveprotocol.wave.client.editor.content.ContentNode)>(r9);

        goto label4;

     label2:
        $r4 = r0.<org.waveprotocol.wave.client.editor.content.LazyPersistenceManager: org.waveprotocol.wave.model.document.util.LocalDocument localDoc>;

        $r3 = r0.<org.waveprotocol.wave.client.editor.content.LazyPersistenceManager: org.waveprotocol.wave.model.document.util.LocalDocument localDoc>;

        $r5 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.util.LocalDocument: java.lang.Object getDocumentElement()>();

        $z2 = interfaceinvoke $r4.<org.waveprotocol.wave.model.document.util.LocalDocument: boolean isSameNode(java.lang.Object,java.lang.Object)>(r9, $r5);

        if $z2 == 0 goto label3;

        goto label4;

     label3:
        $r6 = r0.<org.waveprotocol.wave.client.editor.content.LazyPersistenceManager: org.waveprotocol.wave.model.document.util.LocalDocument localDoc>;

        $r7 = interfaceinvoke $r6.<org.waveprotocol.wave.model.document.util.LocalDocument: java.lang.Object getParentElement(java.lang.Object)>(r9);

        r9 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r7;

        goto label1;

     label4:
        return;
    }

    private void actuallyPersist(org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r1;
        org.waveprotocol.wave.model.document.util.ReadableDocumentView $r2, $r3, $r6;
        org.waveprotocol.wave.model.document.operation.DocOp $r11;
        org.waveprotocol.wave.client.editor.content.LazyPersistenceManager r0;
        org.waveprotocol.wave.model.document.indexed.LocationMapper $r5, $r8;
        org.waveprotocol.wave.model.document.util.ReadableTreeWalker $r12, $r15;
        int $i0, $i1, i2;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.document.operation.impl.DocOpBuffer $r9;
        org.waveprotocol.wave.model.document.util.LocalDocument $r10, $r13;
        org.waveprotocol.wave.model.document.util.Point$El $r7;
        java.lang.IllegalArgumentException $r16;
        org.waveprotocol.wave.model.operation.SilentOperationSink $r14;
        java.lang.Object $r4;

        r0 := @this: org.waveprotocol.wave.client.editor.content.LazyPersistenceManager;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r3 = r0.<org.waveprotocol.wave.client.editor.content.LazyPersistenceManager: org.waveprotocol.wave.model.document.util.ReadableDocumentView persistedView>;

        $r2 = r0.<org.waveprotocol.wave.client.editor.content.LazyPersistenceManager: org.waveprotocol.wave.model.document.util.ReadableDocumentView persistedView>;

        $r4 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.util.ReadableDocumentView: java.lang.Object getVisibleNode(java.lang.Object)>(r1);

        $z0 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.util.ReadableDocumentView: boolean isSameNode(java.lang.Object,java.lang.Object)>(r1, $r4);

        if $z0 == 0 goto label1;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("opaquePersist: element must not be persistent");

        throw $r16;

     label1:
        $r5 = r0.<org.waveprotocol.wave.client.editor.content.LazyPersistenceManager: org.waveprotocol.wave.model.document.indexed.LocationMapper persistedLocations>;

        $r6 = r0.<org.waveprotocol.wave.client.editor.content.LazyPersistenceManager: org.waveprotocol.wave.model.document.util.ReadableDocumentView persistedView>;

        $r7 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El end(java.lang.Object)>(r1);

        $i0 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: int getFilteredLocation(org.waveprotocol.wave.model.document.indexed.LocationMapper,org.waveprotocol.wave.model.document.util.ReadableDocumentView,org.waveprotocol.wave.model.document.util.Point)>($r5, $r6, $r7);

        $r8 = r0.<org.waveprotocol.wave.client.editor.content.LazyPersistenceManager: org.waveprotocol.wave.model.document.indexed.LocationMapper persistedLocations>;

        $i1 = interfaceinvoke $r8.<org.waveprotocol.wave.model.document.indexed.LocationMapper: int size()>();

        i2 = $i1 - $i0;

        $r9 = new org.waveprotocol.wave.model.document.operation.impl.DocOpBuffer;

        specialinvoke $r9.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuffer: void <init>()>();

        staticinvoke <org.waveprotocol.wave.client.editor.content.LazyPersistenceManager: void safeRetain(org.waveprotocol.wave.model.document.operation.DocOpCursor,int)>($r9, $i0);

        $r10 = r0.<org.waveprotocol.wave.client.editor.content.LazyPersistenceManager: org.waveprotocol.wave.model.document.util.LocalDocument localDoc>;

        staticinvoke <org.waveprotocol.wave.model.document.util.DomOperationUtil: void buildDomInitializationFromSubtree(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,org.waveprotocol.wave.model.document.operation.DocInitializationCursor)>($r10, r1, $r9);

        staticinvoke <org.waveprotocol.wave.client.editor.content.LazyPersistenceManager: void safeRetain(org.waveprotocol.wave.model.document.operation.DocOpCursor,int)>($r9, i2);

        $r11 = virtualinvoke $r9.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuffer: org.waveprotocol.wave.model.document.operation.DocOp finish()>();

        $r12 = new org.waveprotocol.wave.model.document.util.ReadableTreeWalker;

        $r13 = r0.<org.waveprotocol.wave.client.editor.content.LazyPersistenceManager: org.waveprotocol.wave.model.document.util.LocalDocument localDoc>;

        specialinvoke $r12.<org.waveprotocol.wave.model.document.util.ReadableTreeWalker: void <init>(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>($r13, r1);

        r0.<org.waveprotocol.wave.client.editor.content.LazyPersistenceManager: org.waveprotocol.wave.model.document.util.ReadableTreeWalker nodeCreationDelegate> = $r12;

        $r14 = r0.<org.waveprotocol.wave.client.editor.content.LazyPersistenceManager: org.waveprotocol.wave.model.operation.SilentOperationSink sink>;

        interfaceinvoke $r14.<org.waveprotocol.wave.model.operation.SilentOperationSink: void consume(org.waveprotocol.wave.model.operation.Operation)>($r11);

        $r15 = r0.<org.waveprotocol.wave.client.editor.content.LazyPersistenceManager: org.waveprotocol.wave.model.document.util.ReadableTreeWalker nodeCreationDelegate>;

        $z1 = virtualinvoke $r15.<org.waveprotocol.wave.model.document.util.ReadableTreeWalker: boolean checkComplete()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z1, "Walk of tree did not match up...");

        r0.<org.waveprotocol.wave.client.editor.content.LazyPersistenceManager: org.waveprotocol.wave.model.document.util.ReadableTreeWalker nodeCreationDelegate> = null;

        return;
    }

    private static void safeRetain(org.waveprotocol.wave.model.document.operation.DocOpCursor, int)
    {
        int i0;
        org.waveprotocol.wave.model.document.operation.DocOpCursor r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.DocOpCursor;

        i0 := @parameter1: int;

        if i0 <= 0 goto label1;

        interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.DocOpCursor: void retain(int)>(i0);

     label1:
        return;
    }
}
