class org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$OperationApplier extends java.lang.Object implements org.waveprotocol.wave.concurrencycontrol.wave.FlushingOperationSink
{
    private final org.waveprotocol.wave.model.wave.data.ObservableWaveletData target;
    private final org.waveprotocol.wave.model.id.WaveletId waveletId;
    private org.waveprotocol.wave.model.operation.SilentOperationSink extraHandler;
    private org.waveprotocol.wave.model.operation.wave.WaveletOperation debugLastSuccessfulOp;
    final org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet this$0;

    void <init>(org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet, org.waveprotocol.wave.model.wave.data.ObservableWaveletData, org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData r2;
        org.waveprotocol.wave.model.id.WaveletId r3;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$OperationApplier r0;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$OperationApplier;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet;

        r2 := @parameter1: org.waveprotocol.wave.model.wave.data.ObservableWaveletData;

        r3 := @parameter2: org.waveprotocol.wave.model.id.WaveletId;

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$OperationApplier: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$OperationApplier: org.waveprotocol.wave.model.operation.wave.WaveletOperation debugLastSuccessfulOp> = null;

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$OperationApplier: org.waveprotocol.wave.model.wave.data.ObservableWaveletData target> = r2;

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$OperationApplier: org.waveprotocol.wave.model.id.WaveletId waveletId> = r3;

        return;
    }

    public boolean flush(org.waveprotocol.wave.model.operation.wave.WaveletOperation, java.lang.Runnable)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r2;
        org.waveprotocol.wave.model.id.WaveletId $r6;
        org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation r3;
        org.waveprotocol.wave.concurrencycontrol.wave.CcDocument $r8;
        java.lang.Runnable r9;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$OperationApplier r0;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$CcDocumentFactory $r5;
        java.lang.String $r7;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet $r1, $r4;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$OperationApplier;

        r2 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletOperation;

        r9 := @parameter1: java.lang.Runnable;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$OperationApplier: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet this$0>;

        $z0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: boolean access$000(org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet)>($r1);

        if $z0 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z3, "CcBasedWavelet operation applier flushed after failure");

        $z1 = r2 instanceof org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation;

        if $z1 == 0 goto label3;

        r3 = (org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation) r2;

        $r4 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$OperationApplier: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet this$0>;

        $r5 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$CcDocumentFactory access$100(org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet)>($r4);

        $r6 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$OperationApplier: org.waveprotocol.wave.model.id.WaveletId waveletId>;

        $r7 = virtualinvoke r3.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: java.lang.String getBlipId()>();

        $r8 = interfaceinvoke $r5.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$CcDocumentFactory: org.waveprotocol.wave.concurrencycontrol.wave.CcDocument get(org.waveprotocol.wave.model.id.WaveletId,java.lang.String)>($r6, $r7);

        if $r8 == null goto label3;

        $z2 = interfaceinvoke $r8.<org.waveprotocol.wave.concurrencycontrol.wave.CcDocument: boolean flush(java.lang.Runnable)>(r9);

        return $z2;

     label3:
        return 1;
    }

    void register(org.waveprotocol.wave.model.operation.SilentOperationSink)
    {
        org.waveprotocol.wave.model.operation.SilentOperationSink r1;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$OperationApplier r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$OperationApplier;

        r1 := @parameter0: org.waveprotocol.wave.model.operation.SilentOperationSink;

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$OperationApplier: org.waveprotocol.wave.model.operation.SilentOperationSink extraHandler> = r1;

        return;
    }

    public void consume(org.waveprotocol.wave.model.operation.wave.WaveletOperation)
    {
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet $r1, $r3, $r7, $r10, $r14, $r30;
        boolean $z0, $z1, $z2;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r4;
        org.waveprotocol.wave.model.operation.SilentOperationSink $r6, $r8;
        java.lang.StringBuilder $r13, $r15, $r17, $r18, $r20, $r21, $r22, $r23, $r24, $r25, $r27, $r28;
        java.lang.Throwable $r9;
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r2, $r19;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$OperationApplier r0;
        org.waveprotocol.wave.model.operation.OperationException $r11, $r12;
        java.lang.String $r16, $r29;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData $r5, $r26;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$OperationApplier;

        r2 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletOperation;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$OperationApplier: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet this$0>;

        $z0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: boolean access$000(org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet)>($r1);

        if $z0 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z2, "CcBasedWavelet operation applier received op after failure");

     label3:
        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$OperationApplier: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet this$0>;

        $r4 = virtualinvoke r2.<org.waveprotocol.wave.model.operation.wave.WaveletOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext getContext()>();

        $z1 = virtualinvoke r2.<org.waveprotocol.wave.model.operation.wave.WaveletOperation: boolean isWorthyOfAttribution()>();

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: void access$200(org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet,org.waveprotocol.wave.model.operation.wave.WaveletOperationContext,boolean)>($r3, $r4, $z1);

        $r5 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$OperationApplier: org.waveprotocol.wave.model.wave.data.ObservableWaveletData target>;

        virtualinvoke r2.<org.waveprotocol.wave.model.operation.wave.WaveletOperation: void apply(org.waveprotocol.wave.model.wave.data.WaveletData)>($r5);

        $r6 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$OperationApplier: org.waveprotocol.wave.model.operation.SilentOperationSink extraHandler>;

        if $r6 == null goto label4;

        $r8 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$OperationApplier: org.waveprotocol.wave.model.operation.SilentOperationSink extraHandler>;

        interfaceinvoke $r8.<org.waveprotocol.wave.model.operation.SilentOperationSink: void consume(org.waveprotocol.wave.model.operation.Operation)>(r2);

     label4:
        $r7 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$OperationApplier: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet this$0>;

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: void access$400(org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet)>($r7);

        goto label9;

     label5:
        $r11 := @caughtexception;

        $r14 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$OperationApplier: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet this$0>;

        $r12 = new org.waveprotocol.wave.model.operation.OperationException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Operation failed; no recovery possible: ");

        $r16 = virtualinvoke $r11.<org.waveprotocol.wave.model.operation.OperationException: java.lang.String getMessage()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n[debugLastSuccessfulOp:");

        $r19 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$OperationApplier: org.waveprotocol.wave.model.operation.wave.WaveletOperation debugLastSuccessfulOp>;

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n[waveOp:");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n[target:");

        $r26 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$OperationApplier: org.waveprotocol.wave.model.wave.data.ObservableWaveletData target>;

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<org.waveprotocol.wave.model.operation.OperationException: void <init>(java.lang.String,java.lang.Throwable)>($r29, $r11);

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: void access$300(org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet,org.waveprotocol.wave.model.operation.OperationException)>($r14, $r12);

     label6:
        $r30 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$OperationApplier: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet this$0>;

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: void access$400(org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet)>($r30);

        goto label9;

     label7:
        $r9 := @caughtexception;

     label8:
        $r10 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$OperationApplier: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet this$0>;

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: void access$400(org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet)>($r10);

        throw $r9;

     label9:
        r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$OperationApplier: org.waveprotocol.wave.model.operation.wave.WaveletOperation debugLastSuccessfulOp> = r2;

        return;

        catch org.waveprotocol.wave.model.operation.OperationException from label3 to label4 with label5;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public volatile boolean flush(org.waveprotocol.wave.model.operation.Operation, java.lang.Runnable)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation $r3;
        org.waveprotocol.wave.model.operation.Operation r1;
        java.lang.Runnable r2;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$OperationApplier r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$OperationApplier;

        r1 := @parameter0: org.waveprotocol.wave.model.operation.Operation;

        r2 := @parameter1: java.lang.Runnable;

        $r3 = (org.waveprotocol.wave.model.operation.wave.WaveletOperation) r1;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$OperationApplier: boolean flush(org.waveprotocol.wave.model.operation.wave.WaveletOperation,java.lang.Runnable)>($r3, r2);

        return $z0;
    }

    public volatile void consume(org.waveprotocol.wave.model.operation.Operation)
    {
        org.waveprotocol.wave.model.operation.Operation r1;
        org.waveprotocol.wave.model.operation.wave.WaveletOperation $r2;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$OperationApplier r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$OperationApplier;

        r1 := @parameter0: org.waveprotocol.wave.model.operation.Operation;

        $r2 = (org.waveprotocol.wave.model.operation.wave.WaveletOperation) r1;

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$OperationApplier: void consume(org.waveprotocol.wave.model.operation.wave.WaveletOperation)>($r2);

        return;
    }
}
