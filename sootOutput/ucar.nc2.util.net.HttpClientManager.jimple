public class ucar.nc2.util.net.HttpClientManager extends java.lang.Object
{
    private static boolean debug;
    private static int timeout;

    public void <init>()
    {
        ucar.nc2.util.net.HttpClientManager r0;

        r0 := @this: ucar.nc2.util.net.HttpClientManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void init(org.apache.commons.httpclient.auth.CredentialsProvider, java.lang.String)
    {
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String r1, $r5;
        org.apache.commons.httpclient.auth.CredentialsProvider r0;

        r0 := @parameter0: org.apache.commons.httpclient.auth.CredentialsProvider;

        r1 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        staticinvoke <opendap.dap.http.HTTPSession: void setGlobalCredentialsProvider(org.apache.commons.httpclient.auth.CredentialsProvider)>(r0);

     label1:
        if r1 == null goto label2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/NetcdfJava/HttpClient");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <opendap.dap.http.HTTPSession: void setGlobalUserAgent(java.lang.String)>($r5);

        goto label3;

     label2:
        staticinvoke <opendap.dap.http.HTTPSession: void setGlobalUserAgent(java.lang.String)>("NetcdfJava/HttpClient");

     label3:
        return;
    }

    public static void clearState()
    {
        return;
    }

    public static java.lang.String getContentAsString(opendap.dap.http.HTTPSession, java.lang.String) throws java.io.IOException
    {
        java.lang.Throwable $r5;
        opendap.dap.http.HTTPMethod $r2;
        opendap.dap.http.HTTPSession r0, $r4, r6;
        java.lang.String r1, $r3;

        r0 := @parameter0: opendap.dap.http.HTTPSession;

        r1 := @parameter1: java.lang.String;

        r6 = r0;

     label1:
        if r0 != null goto label2;

        $r4 = new opendap.dap.http.HTTPSession;

        specialinvoke $r4.<opendap.dap.http.HTTPSession: void <init>()>();

        r6 = $r4;

     label2:
        $r2 = virtualinvoke r6.<opendap.dap.http.HTTPSession: opendap.dap.http.HTTPMethod newMethodGet(java.lang.String)>(r1);

        virtualinvoke $r2.<opendap.dap.http.HTTPMethod: int execute()>();

        $r3 = virtualinvoke $r2.<opendap.dap.http.HTTPMethod: java.lang.String getResponseAsString()>();

     label3:
        if r0 != null goto label4;

        if r6 == null goto label4;

        virtualinvoke r6.<opendap.dap.http.HTTPSession: void close()>();

     label4:
        return $r3;

     label5:
        $r5 := @caughtexception;

     label6:
        if r0 != null goto label7;

        if r6 == null goto label7;

        virtualinvoke r6.<opendap.dap.http.HTTPSession: void close()>();

     label7:
        throw $r5;

        catch java.lang.Throwable from label1 to label3 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public static int putContent(java.lang.String, java.lang.String) throws java.io.IOException
    {
        java.lang.Throwable $r6;
        opendap.dap.http.HTTPMethod $r2;
        opendap.dap.http.HTTPSession $r0, r7;
        org.apache.commons.httpclient.Header $r4;
        int $i0, i1, i2;
        java.lang.String r1, r3, $r5;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r7 = null;

     label1:
        $r0 = new opendap.dap.http.HTTPSession;

        specialinvoke $r0.<opendap.dap.http.HTTPSession: void <init>()>();

        r7 = $r0;

        $r2 = virtualinvoke $r0.<opendap.dap.http.HTTPSession: opendap.dap.http.HTTPMethod newMethodPut(java.lang.String)>(r1);

        virtualinvoke $r2.<opendap.dap.http.HTTPMethod: void setRequestContentAsString(java.lang.String)>(r3);

        virtualinvoke $r2.<opendap.dap.http.HTTPMethod: int execute()>();

        $i0 = virtualinvoke $r2.<opendap.dap.http.HTTPMethod: int getStatusCode()>();

        i1 = $i0;

        if $i0 != 302 goto label2;

        $r4 = virtualinvoke $r2.<opendap.dap.http.HTTPMethod: org.apache.commons.httpclient.Header getResponseHeader(java.lang.String)>("location");

        if $r4 == null goto label2;

        $r5 = virtualinvoke $r4.<org.apache.commons.httpclient.Header: java.lang.String getValue()>();

        i1 = staticinvoke <ucar.nc2.util.net.HttpClientManager: int putContent(java.lang.String,java.lang.String)>($r5, r3);

     label2:
        i2 = i1;

     label3:
        if $r0 == null goto label4;

        virtualinvoke $r0.<opendap.dap.http.HTTPSession: void close()>();

     label4:
        return i2;

     label5:
        $r6 := @caughtexception;

     label6:
        if r7 == null goto label7;

        virtualinvoke r7.<opendap.dap.http.HTTPSession: void close()>();

     label7:
        throw $r6;

        catch java.lang.Throwable from label1 to label3 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public static java.lang.String getUrlContentsAsString(opendap.dap.http.HTTPSession, java.lang.String, int)
    {
        byte[] $r6, $r8, $r13;
        java.util.zip.GZIPInputStream $r10;
        java.io.BufferedInputStream $r9, $r14;
        opendap.dap.http.HTTPSession r0, $r23, r26;
        org.apache.commons.httpclient.Header $r4;
        java.io.ByteArrayInputStream $r11, $r16;
        boolean $z0, $z1;
        opendap.dap.http.HTTPMethod $r2;
        java.lang.Exception $r25;
        java.lang.StringBuilder $r19, $r20, $r21;
        java.lang.Throwable $r24;
        java.util.zip.InflaterInputStream $r15;
        int $i0, i1, $i2;
        java.lang.String r1, $r3, r5, $r7, $r12, $r17, $r22, r27, $r28;
        java.lang.RuntimeException $r18;

        r0 := @parameter0: opendap.dap.http.HTTPSession;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        r26 = r0;

     label01:
        if r0 != null goto label02;

        $r23 = new opendap.dap.http.HTTPSession;

        specialinvoke $r23.<opendap.dap.http.HTTPSession: void <init>()>();

        r26 = $r23;

     label02:
        $r2 = virtualinvoke r26.<opendap.dap.http.HTTPSession: opendap.dap.http.HTTPMethod newMethodGet(java.lang.String)>(r1);

        virtualinvoke $r2.<opendap.dap.http.HTTPMethod: void setFollowRedirects(boolean)>(1);

        virtualinvoke $r2.<opendap.dap.http.HTTPMethod: void setRequestHeader(java.lang.String,java.lang.String)>("Accept-Encoding", "gzip,deflate");

        $i0 = virtualinvoke $r2.<opendap.dap.http.HTTPMethod: int execute()>();

        if $i0 == 200 goto label03;

        $r18 = new java.lang.RuntimeException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed status = ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.RuntimeException: void <init>(java.lang.String)>($r22);

        throw $r18;

     label03:
        $r3 = virtualinvoke $r2.<opendap.dap.http.HTTPMethod: java.lang.String getResponseCharSet()>();

        r27 = $r3;

        if $r3 != null goto label04;

        r27 = "UTF-8";

     label04:
        $r4 = virtualinvoke $r2.<opendap.dap.http.HTTPMethod: org.apache.commons.httpclient.Header getResponseHeader(java.lang.String)>("content-encoding");

        if $r4 != null goto label05;

        $r28 = null;

        goto label06;

     label05:
        $r28 = virtualinvoke $r4.<org.apache.commons.httpclient.Header: java.lang.String getValue()>();

     label06:
        r5 = $r28;

        if $r28 == null goto label09;

        $z1 = virtualinvoke $r28.<java.lang.String: boolean equals(java.lang.Object)>("deflate");

        if $z1 == 0 goto label09;

        $r13 = virtualinvoke $r2.<opendap.dap.http.HTTPMethod: byte[] getResponseAsBytes()>();

        $r14 = new java.io.BufferedInputStream;

        $r15 = new java.util.zip.InflaterInputStream;

        $r16 = new java.io.ByteArrayInputStream;

        specialinvoke $r16.<java.io.ByteArrayInputStream: void <init>(byte[])>($r13);

        specialinvoke $r15.<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream)>($r16);

        specialinvoke $r14.<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>($r15, 10000);

        $r17 = staticinvoke <ucar.nc2.util.net.HttpClientManager: java.lang.String readContents(java.io.InputStream,java.lang.String,int)>($r14, r27, i1);

     label07:
        if r0 != null goto label08;

        if r26 == null goto label08;

        virtualinvoke r26.<opendap.dap.http.HTTPSession: void close()>();

     label08:
        return $r17;

     label09:
        if r5 == null goto label12;

        $z0 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("gzip");

        if $z0 == 0 goto label12;

        $r8 = virtualinvoke $r2.<opendap.dap.http.HTTPMethod: byte[] getResponseAsBytes()>();

        $r9 = new java.io.BufferedInputStream;

        $r10 = new java.util.zip.GZIPInputStream;

        $r11 = new java.io.ByteArrayInputStream;

        specialinvoke $r11.<java.io.ByteArrayInputStream: void <init>(byte[])>($r8);

        specialinvoke $r10.<java.util.zip.GZIPInputStream: void <init>(java.io.InputStream)>($r11);

        specialinvoke $r9.<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>($r10, 10000);

        $r12 = staticinvoke <ucar.nc2.util.net.HttpClientManager: java.lang.String readContents(java.io.InputStream,java.lang.String,int)>($r9, r27, i1);

     label10:
        if r0 != null goto label11;

        if r26 == null goto label11;

        virtualinvoke r26.<opendap.dap.http.HTTPSession: void close()>();

     label11:
        return $r12;

     label12:
        $i2 = i1 * 1000;

        $r6 = virtualinvoke $r2.<opendap.dap.http.HTTPMethod: byte[] getResponseAsBytes(int)>($i2);

        $r7 = new java.lang.String;

        specialinvoke $r7.<java.lang.String: void <init>(byte[],java.lang.String)>($r6, r27);

     label13:
        if r0 != null goto label14;

        if r26 == null goto label14;

        virtualinvoke r26.<opendap.dap.http.HTTPSession: void close()>();

     label14:
        return $r7;

     label15:
        $r25 := @caughtexception;

        virtualinvoke $r25.<java.lang.Exception: void printStackTrace()>();

     label16:
        if r0 != null goto label17;

        if r26 == null goto label17;

        virtualinvoke r26.<opendap.dap.http.HTTPSession: void close()>();

     label17:
        return null;

     label18:
        $r24 := @caughtexception;

     label19:
        if r0 != null goto label20;

        if r26 == null goto label20;

        virtualinvoke r26.<opendap.dap.http.HTTPSession: void close()>();

     label20:
        throw $r24;

        catch java.lang.Exception from label01 to label07 with label15;
        catch java.lang.Exception from label09 to label10 with label15;
        catch java.lang.Exception from label12 to label13 with label15;
        catch java.lang.Throwable from label01 to label07 with label18;
        catch java.lang.Throwable from label09 to label10 with label18;
        catch java.lang.Throwable from label12 to label13 with label18;
        catch java.lang.Throwable from label15 to label16 with label18;
        catch java.lang.Throwable from label18 to label19 with label18;
    }

    private static java.lang.String readContents(java.io.InputStream, java.lang.String, int) throws java.io.IOException
    {
        java.io.ByteArrayOutputStream $r0;
        int i0, $i1, $i2;
        java.lang.String r2, $r3;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r0 = new java.io.ByteArrayOutputStream;

        $i1 = 1000 * i0;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>(int)>($i1);

        $i2 = 1000 * i0;

        staticinvoke <ucar.nc2.util.IO: void copy(java.io.InputStream,java.io.OutputStream,int)>(r1, $r0, $i2);

        $r3 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: java.lang.String toString(java.lang.String)>(r2);

        return $r3;
    }

    public static void copyUrlContentsToFile(opendap.dap.http.HTTPSession, java.lang.String, java.io.File) throws opendap.dap.http.HTTPException
    {
        java.lang.Throwable $r23;
        java.util.zip.GZIPInputStream $r10;
        java.io.BufferedInputStream $r9, $r13;
        opendap.dap.http.HTTPSession r0, $r22, r25;
        java.util.zip.InflaterInputStream $r14;
        org.apache.commons.httpclient.Header $r4;
        int $i0;
        java.lang.String r1, $r3, r5, $r8, $r12, $r16, $r21, $r26;
        boolean $z0, $z1;
        opendap.dap.http.HTTPMethod $r2;
        java.lang.RuntimeException $r17;
        java.io.File r7;
        java.lang.Exception $r24;
        java.lang.StringBuilder $r18, $r19, $r20;
        java.io.InputStream $r6, $r11, $r15;

        r0 := @parameter0: opendap.dap.http.HTTPSession;

        r1 := @parameter1: java.lang.String;

        r7 := @parameter2: java.io.File;

        r25 = r0;

     label01:
        if r0 != null goto label02;

        $r22 = new opendap.dap.http.HTTPSession;

        specialinvoke $r22.<opendap.dap.http.HTTPSession: void <init>()>();

        r25 = $r22;

     label02:
        $r2 = virtualinvoke r25.<opendap.dap.http.HTTPSession: opendap.dap.http.HTTPMethod newMethodGet(java.lang.String)>(r1);

        virtualinvoke $r2.<opendap.dap.http.HTTPMethod: void setRequestHeader(java.lang.String,java.lang.String)>("Accept-Encoding", "gzip,deflate");

        $i0 = virtualinvoke $r2.<opendap.dap.http.HTTPMethod: int execute()>();

        if $i0 == 200 goto label03;

        $r17 = new java.lang.RuntimeException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed status = ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.RuntimeException: void <init>(java.lang.String)>($r21);

        throw $r17;

     label03:
        $r3 = virtualinvoke $r2.<opendap.dap.http.HTTPMethod: java.lang.String getResponseCharSet()>();

        if $r3 != null goto label04;

     label04:
        $r4 = virtualinvoke $r2.<opendap.dap.http.HTTPMethod: org.apache.commons.httpclient.Header getResponseHeader(java.lang.String)>("content-encoding");

        if $r4 != null goto label05;

        $r26 = null;

        goto label06;

     label05:
        $r26 = virtualinvoke $r4.<org.apache.commons.httpclient.Header: java.lang.String getValue()>();

     label06:
        r5 = $r26;

        if $r26 == null goto label07;

        $z1 = virtualinvoke $r26.<java.lang.String: boolean equals(java.lang.Object)>("deflate");

        if $z1 == 0 goto label07;

        $r13 = new java.io.BufferedInputStream;

        $r14 = new java.util.zip.InflaterInputStream;

        $r15 = virtualinvoke $r2.<opendap.dap.http.HTTPMethod: java.io.InputStream getResponseAsStream()>();

        specialinvoke $r14.<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream)>($r15);

        specialinvoke $r13.<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>($r14, 10000);

        $r16 = virtualinvoke r7.<java.io.File: java.lang.String getPath()>();

        staticinvoke <ucar.nc2.util.IO: long writeToFile(java.io.InputStream,java.lang.String)>($r13, $r16);

        goto label09;

     label07:
        if r5 == null goto label08;

        $z0 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("gzip");

        if $z0 == 0 goto label08;

        $r9 = new java.io.BufferedInputStream;

        $r10 = new java.util.zip.GZIPInputStream;

        $r11 = virtualinvoke $r2.<opendap.dap.http.HTTPMethod: java.io.InputStream getResponseAsStream()>();

        specialinvoke $r10.<java.util.zip.GZIPInputStream: void <init>(java.io.InputStream)>($r11);

        specialinvoke $r9.<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>($r10, 10000);

        $r12 = virtualinvoke r7.<java.io.File: java.lang.String getPath()>();

        staticinvoke <ucar.nc2.util.IO: long writeToFile(java.io.InputStream,java.lang.String)>($r9, $r12);

        goto label09;

     label08:
        $r6 = virtualinvoke $r2.<opendap.dap.http.HTTPMethod: java.io.InputStream getResponseAsStream()>();

        $r8 = virtualinvoke r7.<java.io.File: java.lang.String getPath()>();

        staticinvoke <ucar.nc2.util.IO: long writeToFile(java.io.InputStream,java.lang.String)>($r6, $r8);

     label09:
        if r0 != null goto label15;

        if r25 == null goto label15;

        virtualinvoke r25.<opendap.dap.http.HTTPSession: void close()>();

        goto label15;

     label10:
        $r24 := @caughtexception;

        virtualinvoke $r24.<java.lang.Exception: void printStackTrace()>();

     label11:
        if r0 != null goto label15;

        if r25 == null goto label15;

        virtualinvoke r25.<opendap.dap.http.HTTPSession: void close()>();

        goto label15;

     label12:
        $r23 := @caughtexception;

     label13:
        if r0 != null goto label14;

        if r25 == null goto label14;

        virtualinvoke r25.<opendap.dap.http.HTTPSession: void close()>();

     label14:
        throw $r23;

     label15:
        return;

        catch java.lang.Exception from label01 to label09 with label10;
        catch java.lang.Throwable from label01 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    public static long appendUrlContentsToFile(opendap.dap.http.HTTPSession, java.lang.String, java.io.File, long, long) throws opendap.dap.http.HTTPException
    {
        java.util.zip.GZIPInputStream $r16;
        java.io.BufferedInputStream $r15, $r19;
        opendap.dap.http.HTTPSession r0, $r28, r31;
        org.apache.commons.httpclient.Header $r10;
        boolean $z0, $z1;
        opendap.dap.http.HTTPMethod $r2;
        java.lang.Exception $r30;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r24, $r25, $r26;
        java.lang.Throwable $r29;
        java.util.zip.InflaterInputStream $r20;
        long l0, l1, l3;
        int $i2;
        java.lang.String r1, $r8, $r9, r11, $r14, $r18, $r22, $r27, $r32;
        java.lang.RuntimeException $r23;
        java.io.File r13;
        java.io.InputStream $r12, $r17, $r21;

        r0 := @parameter0: opendap.dap.http.HTTPSession;

        r1 := @parameter1: java.lang.String;

        r13 := @parameter2: java.io.File;

        l0 := @parameter3: long;

        l1 := @parameter4: long;

        r31 = r0;

        l3 = 0L;

     label01:
        if r0 != null goto label02;

        $r28 = new opendap.dap.http.HTTPSession;

        specialinvoke $r28.<opendap.dap.http.HTTPSession: void <init>()>();

        r31 = $r28;

     label02:
        $r2 = virtualinvoke r31.<opendap.dap.http.HTTPSession: opendap.dap.http.HTTPMethod newMethodGet(java.lang.String)>(r1);

        virtualinvoke $r2.<opendap.dap.http.HTTPMethod: void setRequestHeader(java.lang.String,java.lang.String)>("Accept-Encoding", "gzip,deflate");

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bytes=");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<opendap.dap.http.HTTPMethod: void setRequestHeader(java.lang.String,java.lang.String)>("Range", $r8);

        $i2 = virtualinvoke $r2.<opendap.dap.http.HTTPMethod: int execute()>();

        if $i2 == 200 goto label03;

        if $i2 == 206 goto label03;

        $r23 = new java.lang.RuntimeException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed status = ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.RuntimeException: void <init>(java.lang.String)>($r27);

        throw $r23;

     label03:
        $r9 = virtualinvoke $r2.<opendap.dap.http.HTTPMethod: java.lang.String getResponseCharSet()>();

        if $r9 != null goto label04;

     label04:
        $r10 = virtualinvoke $r2.<opendap.dap.http.HTTPMethod: org.apache.commons.httpclient.Header getResponseHeader(java.lang.String)>("content-encoding");

        if $r10 != null goto label05;

        $r32 = null;

        goto label06;

     label05:
        $r32 = virtualinvoke $r10.<org.apache.commons.httpclient.Header: java.lang.String getValue()>();

     label06:
        r11 = $r32;

        if $r32 == null goto label07;

        $z1 = virtualinvoke $r32.<java.lang.String: boolean equals(java.lang.Object)>("deflate");

        if $z1 == 0 goto label07;

        $r19 = new java.io.BufferedInputStream;

        $r20 = new java.util.zip.InflaterInputStream;

        $r21 = virtualinvoke $r2.<opendap.dap.http.HTTPMethod: java.io.InputStream getResponseAsStream()>();

        specialinvoke $r20.<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream)>($r21);

        specialinvoke $r19.<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>($r20, 10000);

        $r22 = virtualinvoke r13.<java.io.File: java.lang.String getPath()>();

        l3 = staticinvoke <ucar.nc2.util.IO: long appendToFile(java.io.InputStream,java.lang.String)>($r19, $r22);

        goto label09;

     label07:
        if r11 == null goto label08;

        $z0 = virtualinvoke r11.<java.lang.String: boolean equals(java.lang.Object)>("gzip");

        if $z0 == 0 goto label08;

        $r15 = new java.io.BufferedInputStream;

        $r16 = new java.util.zip.GZIPInputStream;

        $r17 = virtualinvoke $r2.<opendap.dap.http.HTTPMethod: java.io.InputStream getResponseAsStream()>();

        specialinvoke $r16.<java.util.zip.GZIPInputStream: void <init>(java.io.InputStream)>($r17);

        specialinvoke $r15.<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>($r16, 10000);

        $r18 = virtualinvoke r13.<java.io.File: java.lang.String getPath()>();

        l3 = staticinvoke <ucar.nc2.util.IO: long appendToFile(java.io.InputStream,java.lang.String)>($r15, $r18);

        goto label09;

     label08:
        $r12 = virtualinvoke $r2.<opendap.dap.http.HTTPMethod: java.io.InputStream getResponseAsStream()>();

        $r14 = virtualinvoke r13.<java.io.File: java.lang.String getPath()>();

        l3 = staticinvoke <ucar.nc2.util.IO: long appendToFile(java.io.InputStream,java.lang.String)>($r12, $r14);

     label09:
        if r0 != null goto label15;

        if r31 == null goto label15;

        virtualinvoke r0.<opendap.dap.http.HTTPSession: void close()>();

        goto label15;

     label10:
        $r30 := @caughtexception;

        virtualinvoke $r30.<java.lang.Exception: void printStackTrace()>();

     label11:
        if r0 != null goto label15;

        if r31 == null goto label15;

        virtualinvoke r0.<opendap.dap.http.HTTPSession: void close()>();

        goto label15;

     label12:
        $r29 := @caughtexception;

     label13:
        if r0 != null goto label14;

        if r31 == null goto label14;

        virtualinvoke r0.<opendap.dap.http.HTTPSession: void close()>();

     label14:
        throw $r29;

     label15:
        return l3;

        catch java.lang.Exception from label01 to label09 with label10;
        catch java.lang.Throwable from label01 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    public static void showHttpRequestInfo(java.util.Formatter, org.apache.commons.httpclient.HttpMethodBase)
    {
        org.apache.commons.httpclient.params.HttpMethodParams $r13;
        java.lang.Integer $r19;
        org.apache.commons.httpclient.Header $r26;
        java.util.Formatter r0;
        boolean $z0, $z1;
        org.apache.commons.httpclient.HttpMethodBase r2;
        java.lang.Object[] $r1, $r5, $r7, $r9, $r11, $r14, $r16, $r18, $r20, $r22, $r24, $r25;
        org.apache.commons.httpclient.HttpVersion $r10, $r17;
        int $i0, $i1, i2;
        java.lang.Boolean $r6, $r8;
        java.lang.String $r3, $r4, $r15, $r21;
        org.apache.commons.httpclient.auth.AuthState $r12;
        org.apache.commons.httpclient.Header[] $r23;

        r0 := @parameter0: java.util.Formatter;

        r2 := @parameter1: org.apache.commons.httpclient.HttpMethodBase;

        $r1 = newarray (java.lang.Object)[2];

        $r3 = virtualinvoke r2.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getName()>();

        $r1[0] = $r3;

        $r4 = virtualinvoke r2.<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getPath()>();

        $r1[1] = $r4;

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("HttpClient request %s %s %n", $r1);

        $r5 = newarray (java.lang.Object)[1];

        $z0 = virtualinvoke r2.<org.apache.commons.httpclient.HttpMethodBase: boolean getDoAuthentication()>();

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r5[0] = $r6;

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("   do Authentication=%s%n", $r5);

        $r7 = newarray (java.lang.Object)[1];

        $z1 = virtualinvoke r2.<org.apache.commons.httpclient.HttpMethodBase: boolean getFollowRedirects()>();

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        $r7[0] = $r8;

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("   follow Redirects =%s%n", $r7);

        $r9 = newarray (java.lang.Object)[1];

        $r10 = virtualinvoke r2.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.HttpVersion getEffectiveVersion()>();

        $r9[0] = $r10;

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("   effectiveVersion =%s%n", $r9);

        $r11 = newarray (java.lang.Object)[1];

        $r12 = virtualinvoke r2.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.auth.AuthState getHostAuthState()>();

        $r11[0] = $r12;

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("   hostAuthState    =%s%n", $r11);

        $r13 = virtualinvoke r2.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $r14 = newarray (java.lang.Object)[1];

        $r15 = virtualinvoke $r13.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getCookiePolicy()>();

        $r14[0] = $r15;

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("   cookie policy    =%s%n", $r14);

        $r16 = newarray (java.lang.Object)[1];

        $r17 = virtualinvoke $r13.<org.apache.commons.httpclient.params.HttpMethodParams: org.apache.commons.httpclient.HttpVersion getVersion()>();

        $r16[0] = $r17;

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("   http version     =%s%n", $r16);

        $r18 = newarray (java.lang.Object)[1];

        $i0 = virtualinvoke $r13.<org.apache.commons.httpclient.params.HttpMethodParams: int getSoTimeout()>();

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r18[0] = $r19;

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("   timeout (msecs)  =%d%n", $r18);

        $r20 = newarray (java.lang.Object)[1];

        $r21 = virtualinvoke $r13.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getVirtualHost()>();

        $r20[0] = $r21;

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("   virtual host     =%s%n", $r20);

        $r22 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("Request Headers = %n", $r22);

        $r23 = virtualinvoke r2.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.Header[] getRequestHeaders()>();

        i2 = 0;

     label1:
        $i1 = lengthof $r23;

        if i2 >= $i1 goto label2;

        $r25 = newarray (java.lang.Object)[1];

        $r26 = $r23[i2];

        $r25[0] = $r26;

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("  %s", $r25);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r24 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%n", $r24);

        return;
    }

    public static void showHttpResponseInfo(java.util.Formatter, org.apache.commons.httpclient.HttpMethodBase)
    {
        java.lang.Object[] $r1, $r4, $r6, $r7;
        org.apache.commons.httpclient.HttpMethodBase r2;
        org.apache.commons.httpclient.Header $r8;
        java.util.Formatter r0;
        int $i0, i1;
        org.apache.commons.httpclient.StatusLine $r3;
        org.apache.commons.httpclient.Header[] $r5;

        r0 := @parameter0: java.util.Formatter;

        r2 := @parameter1: org.apache.commons.httpclient.HttpMethodBase;

        $r1 = newarray (java.lang.Object)[1];

        $r3 = virtualinvoke r2.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.StatusLine getStatusLine()>();

        $r1[0] = $r3;

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("HttpClient response status = %s%n", $r1);

        $r4 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("Reponse Headers = %n", $r4);

        $r5 = virtualinvoke r2.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.Header[] getResponseHeaders()>();

        i1 = 0;

     label1:
        $i0 = lengthof $r5;

        if i1 >= $i0 goto label2;

        $r7 = newarray (java.lang.Object)[1];

        $r8 = $r5[i1];

        $r7[0] = $r8;

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("  %s", $r7);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r6 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%n", $r6);

        return;
    }

    static void <clinit>()
    {
        <ucar.nc2.util.net.HttpClientManager: boolean debug> = 0;

        <ucar.nc2.util.net.HttpClientManager: int timeout> = 0;

        return;
    }
}
