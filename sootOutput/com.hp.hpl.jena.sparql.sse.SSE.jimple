public class com.hp.hpl.jena.sparql.sse.SSE extends java.lang.Object
{
    protected static com.hp.hpl.jena.shared.PrefixMapping defaultDefaultPrefixMapRead;
    public static com.hp.hpl.jena.shared.PrefixMapping defaultPrefixMapRead;
    protected static com.hp.hpl.jena.shared.PrefixMapping defaultDefaultPrefixMapWrite;
    public static com.hp.hpl.jena.shared.PrefixMapping defaultPrefixMapWrite;
    private static boolean useResolver;

    private void <init>()
    {
        com.hp.hpl.jena.sparql.sse.SSE r0;

        r0 := @this: com.hp.hpl.jena.sparql.sse.SSE;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.hp.hpl.jena.shared.PrefixMapping getDefaultPrefixMapRead()
    {
        com.hp.hpl.jena.shared.PrefixMapping $r0;

        $r0 = <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.shared.PrefixMapping defaultPrefixMapRead>;

        return $r0;
    }

    public static void setDefaultPrefixMapRead(com.hp.hpl.jena.shared.PrefixMapping)
    {
        com.hp.hpl.jena.shared.PrefixMapping r0;

        r0 := @parameter0: com.hp.hpl.jena.shared.PrefixMapping;

        <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.shared.PrefixMapping defaultPrefixMapRead> = r0;

        return;
    }

    public static com.hp.hpl.jena.shared.PrefixMapping getDefaultPrefixMapWrite()
    {
        com.hp.hpl.jena.shared.PrefixMapping $r0;

        $r0 = <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.shared.PrefixMapping defaultPrefixMapWrite>;

        return $r0;
    }

    public static void setDefaultPrefixMapWrite(com.hp.hpl.jena.shared.PrefixMapping)
    {
        com.hp.hpl.jena.shared.PrefixMapping r0;

        r0 := @parameter0: com.hp.hpl.jena.shared.PrefixMapping;

        <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.shared.PrefixMapping defaultPrefixMapWrite> = r0;

        return;
    }

    public static com.hp.hpl.jena.graph.Node parseNode(java.lang.String)
    {
        java.lang.String r0;
        com.hp.hpl.jena.graph.Node $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.graph.Node parseNode(java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r0, null);

        return $r1;
    }

    public static com.hp.hpl.jena.graph.Node parseNode(java.lang.String, com.hp.hpl.jena.shared.PrefixMapping)
    {
        java.io.StringReader $r0;
        java.lang.String r1;
        com.hp.hpl.jena.graph.Node $r3;
        com.hp.hpl.jena.shared.PrefixMapping r2;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.hp.hpl.jena.shared.PrefixMapping;

        $r0 = new java.io.StringReader;

        specialinvoke $r0.<java.io.StringReader: void <init>(java.lang.String)>(r1);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.graph.Node parseNode(java.io.Reader,com.hp.hpl.jena.shared.PrefixMapping)>($r0, r2);

        return $r3;
    }

    public static com.hp.hpl.jena.sparql.core.Quad parseQuad(java.lang.String)
    {
        java.lang.String r0;
        com.hp.hpl.jena.sparql.core.Quad $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.sparql.core.Quad parseQuad(java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r0, null);

        return $r1;
    }

    public static com.hp.hpl.jena.sparql.core.Quad parseQuad(java.lang.String, com.hp.hpl.jena.shared.PrefixMapping)
    {
        com.hp.hpl.jena.sparql.sse.ItemList $r3;
        com.hp.hpl.jena.sparql.sse.Item $r2;
        com.hp.hpl.jena.sparql.core.Quad $r4;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String r0, $r9;
        com.hp.hpl.jena.sparql.ARQException $r5;
        com.hp.hpl.jena.shared.PrefixMapping r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.hp.hpl.jena.shared.PrefixMapping;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.sparql.sse.Item parse(java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r0, r1);

        $z0 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item: boolean isList()>();

        if $z0 != 0 goto label1;

        $r5 = new com.hp.hpl.jena.sparql.ARQException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a list: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label1:
        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList getList()>();

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderGraph: com.hp.hpl.jena.sparql.core.Quad buildQuad(com.hp.hpl.jena.sparql.sse.ItemList)>($r3);

        return $r4;
    }

    public static com.hp.hpl.jena.graph.Triple parseTriple(java.lang.String)
    {
        java.lang.String r0;
        com.hp.hpl.jena.graph.Triple $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.graph.Triple parseTriple(java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r0, null);

        return $r1;
    }

    public static com.hp.hpl.jena.graph.Triple parseTriple(java.lang.String, com.hp.hpl.jena.shared.PrefixMapping)
    {
        com.hp.hpl.jena.sparql.sse.ItemList $r3;
        com.hp.hpl.jena.sparql.sse.Item $r2;
        com.hp.hpl.jena.graph.Triple $r4;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String r0, $r9;
        com.hp.hpl.jena.sparql.ARQException $r5;
        com.hp.hpl.jena.shared.PrefixMapping r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.hp.hpl.jena.shared.PrefixMapping;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.sparql.sse.Item parse(java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r0, r1);

        $z0 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item: boolean isList()>();

        if $z0 != 0 goto label1;

        $r5 = new com.hp.hpl.jena.sparql.ARQException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a list: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label1:
        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList getList()>();

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderGraph: com.hp.hpl.jena.graph.Triple buildTriple(com.hp.hpl.jena.sparql.sse.ItemList)>($r3);

        return $r4;
    }

    public static com.hp.hpl.jena.sparql.path.Path parsePath(java.lang.String)
    {
        java.lang.String r0;
        com.hp.hpl.jena.sparql.path.Path $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.sparql.path.Path parsePath(java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r0, null);

        return $r1;
    }

    public static com.hp.hpl.jena.sparql.path.Path parsePath(java.lang.String, com.hp.hpl.jena.shared.PrefixMapping)
    {
        com.hp.hpl.jena.sparql.sse.Item $r2;
        com.hp.hpl.jena.sparql.path.Path $r3;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String r0, $r8;
        com.hp.hpl.jena.sparql.ARQException $r4;
        com.hp.hpl.jena.shared.PrefixMapping r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.hp.hpl.jena.shared.PrefixMapping;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.sparql.sse.Item parse(java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r0, r1);

        $z0 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item: boolean isList()>();

        if $z0 != 0 goto label1;

        $r4 = new com.hp.hpl.jena.sparql.ARQException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a list: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label1:
        $r3 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderPath: com.hp.hpl.jena.sparql.path.Path buildPath(com.hp.hpl.jena.sparql.sse.Item)>($r2);

        return $r3;
    }

    public static com.hp.hpl.jena.sparql.expr.Expr parseExpr(java.lang.String)
    {
        java.lang.String r0;
        com.hp.hpl.jena.sparql.expr.Expr $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.sparql.expr.Expr parseExpr(java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r0, null);

        return $r1;
    }

    public static com.hp.hpl.jena.sparql.expr.Expr parseExpr(java.lang.String, com.hp.hpl.jena.shared.PrefixMapping)
    {
        com.hp.hpl.jena.sparql.expr.Expr $r3;
        com.hp.hpl.jena.sparql.sse.Item $r2;
        java.lang.String r0;
        com.hp.hpl.jena.shared.PrefixMapping r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.hp.hpl.jena.shared.PrefixMapping;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.sparql.sse.Item parse(java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r0, r1);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderExpr: com.hp.hpl.jena.sparql.expr.Expr buildExpr(com.hp.hpl.jena.sparql.sse.Item)>($r2);

        return $r3;
    }

    public static com.hp.hpl.jena.graph.Graph parseGraph(java.lang.String)
    {
        java.lang.String r0;
        com.hp.hpl.jena.graph.Graph $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.graph.Graph parseGraph(java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r0, null);

        return $r1;
    }

    public static com.hp.hpl.jena.graph.Graph parseGraph(java.lang.String, com.hp.hpl.jena.shared.PrefixMapping)
    {
        com.hp.hpl.jena.sparql.sse.Item $r2;
        java.lang.String r0;
        com.hp.hpl.jena.shared.PrefixMapping r1;
        com.hp.hpl.jena.graph.Graph $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.hp.hpl.jena.shared.PrefixMapping;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.sparql.sse.Item parse(java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r0, r1);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderGraph: com.hp.hpl.jena.graph.Graph buildGraph(com.hp.hpl.jena.sparql.sse.Item)>($r2);

        return $r3;
    }

    public static com.hp.hpl.jena.graph.Graph readGraph(java.lang.String)
    {
        java.lang.String r0;
        com.hp.hpl.jena.graph.Graph $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.graph.Graph readGraph(java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r0, null);

        return $r1;
    }

    public static com.hp.hpl.jena.graph.Graph readGraph(java.lang.String, com.hp.hpl.jena.shared.PrefixMapping)
    {
        com.hp.hpl.jena.sparql.sse.Item $r2;
        java.lang.String r0;
        com.hp.hpl.jena.shared.PrefixMapping r1;
        com.hp.hpl.jena.graph.Graph $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.hp.hpl.jena.shared.PrefixMapping;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.sparql.sse.Item readFile(java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r0, r1);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderGraph: com.hp.hpl.jena.graph.Graph buildGraph(com.hp.hpl.jena.sparql.sse.Item)>($r2);

        return $r3;
    }

    public static void readGraph(com.hp.hpl.jena.graph.Graph, java.lang.String)
    {
        java.lang.String r1;
        com.hp.hpl.jena.graph.Graph r0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r1 := @parameter1: java.lang.String;

        staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: void readGraph(com.hp.hpl.jena.graph.Graph,java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r0, r1, null);

        return;
    }

    public static void readGraph(com.hp.hpl.jena.graph.Graph, java.lang.String, com.hp.hpl.jena.shared.PrefixMapping)
    {
        com.hp.hpl.jena.sparql.sse.Item $r2;
        java.lang.String r0;
        com.hp.hpl.jena.shared.PrefixMapping r1;
        com.hp.hpl.jena.graph.Graph r3;

        r3 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: com.hp.hpl.jena.shared.PrefixMapping;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.sparql.sse.Item readFile(java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r0, r1);

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderGraph: void buildGraph(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.sparql.sse.Item)>(r3, $r2);

        return;
    }

    public static com.hp.hpl.jena.sparql.core.DatasetGraph parseDatasetGraph(java.lang.String)
    {
        java.lang.String r0;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.sparql.core.DatasetGraph parseDatasetGraph(java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r0, null);

        return $r1;
    }

    public static com.hp.hpl.jena.sparql.core.DatasetGraph parseDatasetGraph(java.lang.String, com.hp.hpl.jena.shared.PrefixMapping)
    {
        com.hp.hpl.jena.sparql.sse.Item $r2;
        java.lang.String r0;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r3;
        com.hp.hpl.jena.shared.PrefixMapping r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.hp.hpl.jena.shared.PrefixMapping;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.sparql.sse.Item parse(java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r0, r1);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderGraph: com.hp.hpl.jena.sparql.core.DatasetGraph buildDataset(com.hp.hpl.jena.sparql.sse.Item)>($r2);

        return $r3;
    }

    public static com.hp.hpl.jena.sparql.core.DatasetGraph readDatasetGraph(java.lang.String)
    {
        java.lang.String r0;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.sparql.core.DatasetGraph readDatasetGraph(java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r0, null);

        return $r1;
    }

    public static com.hp.hpl.jena.sparql.core.DatasetGraph readDatasetGraph(java.lang.String, com.hp.hpl.jena.shared.PrefixMapping)
    {
        com.hp.hpl.jena.sparql.sse.Item $r2;
        java.lang.String r0;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r3;
        com.hp.hpl.jena.shared.PrefixMapping r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.hp.hpl.jena.shared.PrefixMapping;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.sparql.sse.Item readFile(java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r0, r1);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderGraph: com.hp.hpl.jena.sparql.core.DatasetGraph buildDataset(com.hp.hpl.jena.sparql.sse.Item)>($r2);

        return $r3;
    }

    public static void readDatasetGraph(com.hp.hpl.jena.sparql.core.DatasetGraph, java.lang.String)
    {
        java.lang.String r1;
        com.hp.hpl.jena.sparql.core.DatasetGraph r0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.DatasetGraph;

        r1 := @parameter1: java.lang.String;

        staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: void readDatasetGraph(com.hp.hpl.jena.sparql.core.DatasetGraph,java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r0, r1, null);

        return;
    }

    public static void readDatasetGraph(com.hp.hpl.jena.sparql.core.DatasetGraph, java.lang.String, com.hp.hpl.jena.shared.PrefixMapping)
    {
        com.hp.hpl.jena.sparql.sse.Item $r2;
        java.lang.String r0;
        com.hp.hpl.jena.sparql.core.DatasetGraph r3;
        com.hp.hpl.jena.shared.PrefixMapping r1;

        r3 := @parameter0: com.hp.hpl.jena.sparql.core.DatasetGraph;

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: com.hp.hpl.jena.shared.PrefixMapping;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.sparql.sse.Item readFile(java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r0, r1);

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderGraph: com.hp.hpl.jena.sparql.core.DatasetGraph buildDataset(com.hp.hpl.jena.sparql.core.DatasetGraph,com.hp.hpl.jena.sparql.sse.Item)>(r3, $r2);

        return;
    }

    public static com.hp.hpl.jena.sparql.algebra.Op readOp(java.lang.String)
    {
        java.lang.String r0;
        com.hp.hpl.jena.sparql.algebra.Op $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.algebra.Algebra: com.hp.hpl.jena.sparql.algebra.Op read(java.lang.String)>(r0);

        return $r1;
    }

    public static com.hp.hpl.jena.sparql.algebra.Op parseOp(java.lang.String)
    {
        java.lang.String r0;
        com.hp.hpl.jena.sparql.algebra.Op $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.algebra.Algebra: com.hp.hpl.jena.sparql.algebra.Op parse(java.lang.String)>(r0);

        return $r1;
    }

    public static com.hp.hpl.jena.sparql.algebra.Op parseOp(java.lang.String, com.hp.hpl.jena.shared.PrefixMapping)
    {
        java.lang.String r0;
        com.hp.hpl.jena.shared.PrefixMapping r1;
        com.hp.hpl.jena.sparql.algebra.Op $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.hp.hpl.jena.shared.PrefixMapping;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.algebra.Algebra: com.hp.hpl.jena.sparql.algebra.Op parse(java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r0, r1);

        return $r2;
    }

    public static com.hp.hpl.jena.sparql.core.BasicPattern readBGP(java.lang.String)
    {
        com.hp.hpl.jena.sparql.core.BasicPattern $r2;
        com.hp.hpl.jena.sparql.sse.Item $r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.sparql.sse.Item readFile(java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r0, null);

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderOp: com.hp.hpl.jena.sparql.core.BasicPattern buildBGP(com.hp.hpl.jena.sparql.sse.Item)>($r1);

        return $r2;
    }

    public static com.hp.hpl.jena.sparql.core.BasicPattern parseBGP(java.lang.String)
    {
        com.hp.hpl.jena.sparql.core.BasicPattern $r2;
        java.lang.String r0;
        com.hp.hpl.jena.shared.PrefixMapping $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.shared.PrefixMapping getDefaultPrefixMapRead()>();

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.sparql.core.BasicPattern parseBGP(java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r0, $r1);

        return $r2;
    }

    public static com.hp.hpl.jena.sparql.core.BasicPattern parseBGP(java.lang.String, com.hp.hpl.jena.shared.PrefixMapping)
    {
        com.hp.hpl.jena.sparql.core.BasicPattern $r3;
        com.hp.hpl.jena.sparql.sse.Item $r2;
        java.lang.String r0;
        com.hp.hpl.jena.shared.PrefixMapping r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.hp.hpl.jena.shared.PrefixMapping;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.sparql.sse.Item parse(java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r0, r1);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderOp: com.hp.hpl.jena.sparql.core.BasicPattern buildBGP(com.hp.hpl.jena.sparql.sse.Item)>($r2);

        return $r3;
    }

    public static com.hp.hpl.jena.sparql.algebra.Table readTable(java.lang.String)
    {
        java.lang.String r0;
        com.hp.hpl.jena.sparql.algebra.Table $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.sparql.algebra.Table readTable(java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r0, null);

        return $r1;
    }

    public static com.hp.hpl.jena.sparql.algebra.Table readTable(java.lang.String, com.hp.hpl.jena.shared.PrefixMapping)
    {
        com.hp.hpl.jena.sparql.sse.Item $r2;
        java.lang.String r0;
        com.hp.hpl.jena.sparql.algebra.Table $r3;
        com.hp.hpl.jena.shared.PrefixMapping r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.hp.hpl.jena.shared.PrefixMapping;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.sparql.sse.Item readFile(java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r0, r1);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderTable: com.hp.hpl.jena.sparql.algebra.Table build(com.hp.hpl.jena.sparql.sse.Item)>($r2);

        return $r3;
    }

    public static com.hp.hpl.jena.sparql.algebra.Table parseTable(java.lang.String)
    {
        java.lang.String r0;
        com.hp.hpl.jena.sparql.algebra.Table $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.sparql.algebra.Table parseTable(java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r0, null);

        return $r1;
    }

    public static com.hp.hpl.jena.sparql.algebra.Table parseTable(java.lang.String, com.hp.hpl.jena.shared.PrefixMapping)
    {
        com.hp.hpl.jena.sparql.sse.Item $r2;
        java.lang.String r0;
        com.hp.hpl.jena.sparql.algebra.Table $r3;
        com.hp.hpl.jena.shared.PrefixMapping r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.hp.hpl.jena.shared.PrefixMapping;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.sparql.sse.Item parse(java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r0, r1);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderTable: com.hp.hpl.jena.sparql.algebra.Table build(com.hp.hpl.jena.sparql.sse.Item)>($r2);

        return $r3;
    }

    public static com.hp.hpl.jena.sparql.sse.Item readFile(java.lang.String)
    {
        com.hp.hpl.jena.sparql.sse.Item $r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.sparql.sse.Item readFile(java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r0, null);

        return $r1;
    }

    public static com.hp.hpl.jena.sparql.sse.Item readFile(java.lang.String, com.hp.hpl.jena.shared.PrefixMapping)
    {
        java.lang.Throwable $r5;
        long $l0;
        byte $b1;
        java.lang.String r1, $r11, $r17;
        com.hp.hpl.jena.sparql.ARQException $r7;
        com.hp.hpl.jena.sparql.sse.Item $r4, r19;
        java.io.IOException $r6;
        java.io.FileInputStream $r0, r18;
        java.io.FileNotFoundException $r12;
        com.hp.hpl.jena.shared.NotFoundException $r13;
        java.lang.StringBuilder $r8, $r9, $r10, $r14, $r15, $r16;
        java.nio.channels.FileChannel $r2;
        com.hp.hpl.jena.shared.PrefixMapping r3;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: com.hp.hpl.jena.shared.PrefixMapping;

        r18 = null;

     label1:
        $r0 = new java.io.FileInputStream;

        specialinvoke $r0.<java.io.FileInputStream: void <init>(java.lang.String)>(r1);

        r18 = $r0;

        $r2 = virtualinvoke $r0.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>();

        $l0 = virtualinvoke $r2.<java.nio.channels.FileChannel: long size()>();

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label3;

        r19 = <com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.Item nil>;

     label2:
        staticinvoke <org.apache.jena.atlas.io.IO: void close(java.io.Closeable)>($r0);

        return r19;

     label3:
        $r4 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.sparql.sse.Item parse(java.io.InputStream,com.hp.hpl.jena.shared.PrefixMapping)>($r0, r3);

     label4:
        staticinvoke <org.apache.jena.atlas.io.IO: void close(java.io.Closeable)>($r0);

        return $r4;

     label5:
        $r12 := @caughtexception;

        $r13 = new com.hp.hpl.jena.shared.NotFoundException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not found: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<com.hp.hpl.jena.shared.NotFoundException: void <init>(java.lang.String)>($r17);

        throw $r13;

     label6:
        $r6 := @caughtexception;

        $r7 = new com.hp.hpl.jena.sparql.ARQException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IOExeption: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.String,java.lang.Throwable)>($r11, $r6);

        throw $r7;

     label7:
        $r5 := @caughtexception;

     label8:
        staticinvoke <org.apache.jena.atlas.io.IO: void close(java.io.Closeable)>(r18);

        throw $r5;

        catch java.io.FileNotFoundException from label1 to label2 with label5;
        catch java.io.FileNotFoundException from label3 to label4 with label5;
        catch java.io.IOException from label1 to label2 with label6;
        catch java.io.IOException from label3 to label4 with label6;
        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label8 with label7;
    }

    public static com.hp.hpl.jena.sparql.sse.Item parseRaw(java.lang.String)
    {
        com.hp.hpl.jena.sparql.sse.Item $r2;
        java.lang.String r0;
        com.hp.hpl.jena.shared.impl.PrefixMappingImpl $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = new com.hp.hpl.jena.shared.impl.PrefixMappingImpl;

        specialinvoke $r1.<com.hp.hpl.jena.shared.impl.PrefixMappingImpl: void <init>()>();

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.sparql.sse.Item parse(java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r0, $r1);

        return $r2;
    }

    public static com.hp.hpl.jena.sparql.sse.Item parse(java.lang.String)
    {
        com.hp.hpl.jena.sparql.sse.Item $r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.sparql.sse.Item parse(java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r0, null);

        return $r1;
    }

    public static com.hp.hpl.jena.sparql.sse.Item parse(java.lang.String, com.hp.hpl.jena.shared.PrefixMapping)
    {
        java.io.StringReader $r0;
        com.hp.hpl.jena.sparql.sse.Item $r3;
        java.lang.String r1;
        com.hp.hpl.jena.shared.PrefixMapping r2;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.hp.hpl.jena.shared.PrefixMapping;

        $r0 = new java.io.StringReader;

        specialinvoke $r0.<java.io.StringReader: void <init>(java.lang.String)>(r1);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.sparql.sse.Item parse(java.io.Reader,com.hp.hpl.jena.shared.PrefixMapping)>($r0, r2);

        return $r3;
    }

    public static com.hp.hpl.jena.sparql.sse.Item parse(java.io.InputStream)
    {
        com.hp.hpl.jena.sparql.sse.Item $r1;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.sparql.sse.Item parse(java.io.InputStream,com.hp.hpl.jena.shared.PrefixMapping)>(r0, null);

        return $r1;
    }

    public static com.hp.hpl.jena.sparql.sse.Item parse(java.io.InputStream, com.hp.hpl.jena.shared.PrefixMapping)
    {
        com.hp.hpl.jena.sparql.sse.Item $r3;
        java.io.BufferedReader $r1;
        com.hp.hpl.jena.shared.PrefixMapping r2;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        r2 := @parameter1: com.hp.hpl.jena.shared.PrefixMapping;

        $r1 = staticinvoke <com.hp.hpl.jena.util.FileUtils: java.io.BufferedReader asBufferedUTF8(java.io.InputStream)>(r0);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.sparql.sse.Item parse(java.io.Reader,com.hp.hpl.jena.shared.PrefixMapping)>($r1, r2);

        return $r3;
    }

    public static void setUseResolver(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        <com.hp.hpl.jena.sparql.sse.SSE: boolean useResolver> = z0;

        return;
    }

    private static com.hp.hpl.jena.sparql.sse.lang.ParseHandler createParseHandler(com.hp.hpl.jena.shared.PrefixMapping)
    {
        com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain $r0;
        com.hp.hpl.jena.sparql.core.Prologue $r1;
        com.hp.hpl.jena.sparql.sse.lang.ParseHandlerResolver $r3;
        com.hp.hpl.jena.shared.PrefixMapping r2;
        boolean $z0;

        r2 := @parameter0: com.hp.hpl.jena.shared.PrefixMapping;

        $z0 = <com.hp.hpl.jena.sparql.sse.SSE: boolean useResolver>;

        if $z0 == 0 goto label1;

        $r1 = new com.hp.hpl.jena.sparql.core.Prologue;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.core.Prologue: void <init>(com.hp.hpl.jena.shared.PrefixMapping)>(r2);

        $r3 = new com.hp.hpl.jena.sparql.sse.lang.ParseHandlerResolver;

        specialinvoke $r3.<com.hp.hpl.jena.sparql.sse.lang.ParseHandlerResolver: void <init>(com.hp.hpl.jena.sparql.core.Prologue)>($r1);

        return $r3;

     label1:
        $r0 = new com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain: void <init>()>();

        return $r0;
    }

    private static com.hp.hpl.jena.graph.Node parseNode(java.io.Reader, com.hp.hpl.jena.shared.PrefixMapping)
    {
        com.hp.hpl.jena.graph.Node $r3, $r17, $r18;
        com.hp.hpl.jena.sparql.sse.SSEParseException $r4, $r12;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r8, $r9, $r10, $r11, $r16;
        boolean $z0, $z1, $z2, $z3;
        com.hp.hpl.jena.sparql.sse.Item $r2;
        java.io.Reader r0;
        java.lang.StringBuilder $r5, $r6, $r7, $r13, $r14, $r15;
        com.hp.hpl.jena.shared.PrefixMapping r1;

        r0 := @parameter0: java.io.Reader;

        r1 := @parameter1: com.hp.hpl.jena.shared.PrefixMapping;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.sparql.sse.Item parseTerm(java.io.Reader,com.hp.hpl.jena.shared.PrefixMapping)>(r0, r1);

        $z0 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item: boolean isSymbol()>();

        if $z0 == 0 goto label3;

        $r9 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item: java.lang.String getSymbol()>();

        $r10 = "true";

        $z2 = virtualinvoke $r10.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r9);

        if $z2 == 0 goto label1;

        $r18 = <com.hp.hpl.jena.sparql.graph.NodeConst: com.hp.hpl.jena.graph.Node nodeTrue>;

        return $r18;

     label1:
        $r11 = "false";

        $z3 = virtualinvoke $r11.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r9);

        if $z3 == 0 goto label2;

        $r17 = <com.hp.hpl.jena.sparql.graph.NodeConst: com.hp.hpl.jena.graph.Node nodeFalse>;

        return $r17;

     label2:
        $r12 = new com.hp.hpl.jena.sparql.sse.SSEParseException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a node: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $i2 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item: int getLine()>();

        $i3 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item: int getColumn()>();

        specialinvoke $r12.<com.hp.hpl.jena.sparql.sse.SSEParseException: void <init>(java.lang.String,int,int)>($r16, $i2, $i3);

        throw $r12;

     label3:
        $z1 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item: boolean isNode()>();

        if $z1 != 0 goto label4;

        $r4 = new com.hp.hpl.jena.sparql.sse.SSEParseException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a node: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $i0 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item: int getLine()>();

        $i1 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item: int getColumn()>();

        specialinvoke $r4.<com.hp.hpl.jena.sparql.sse.SSEParseException: void <init>(java.lang.String,int,int)>($r8, $i0, $i1);

        throw $r4;

     label4:
        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.graph.Node getNode()>();

        return $r3;
    }

    private static java.lang.String parseSymbol(java.io.Reader, com.hp.hpl.jena.shared.PrefixMapping)
    {
        com.hp.hpl.jena.sparql.sse.Item $r2;
        java.io.Reader r0;
        com.hp.hpl.jena.sparql.sse.SSEParseException $r4;
        int $i0, $i1;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r3, $r8;
        com.hp.hpl.jena.shared.PrefixMapping r1;
        boolean $z0;

        r0 := @parameter0: java.io.Reader;

        r1 := @parameter1: com.hp.hpl.jena.shared.PrefixMapping;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.sparql.sse.Item parseTerm(java.io.Reader,com.hp.hpl.jena.shared.PrefixMapping)>(r0, r1);

        $z0 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item: boolean isSymbol()>();

        if $z0 != 0 goto label1;

        $r4 = new com.hp.hpl.jena.sparql.sse.SSEParseException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a symbol: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $i0 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item: int getLine()>();

        $i1 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item: int getColumn()>();

        specialinvoke $r4.<com.hp.hpl.jena.sparql.sse.SSEParseException: void <init>(java.lang.String,int,int)>($r8, $i0, $i1);

        throw $r4;

     label1:
        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item: java.lang.String getSymbol()>();

        return $r3;
    }

    public static com.hp.hpl.jena.sparql.sse.Item parseItem(java.lang.String)
    {
        com.hp.hpl.jena.sparql.sse.Item $r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.sparql.sse.Item parse(java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r0, null);

        return $r1;
    }

    public static com.hp.hpl.jena.sparql.sse.Item parseItem(java.lang.String, com.hp.hpl.jena.shared.PrefixMapping)
    {
        java.io.StringReader $r0;
        com.hp.hpl.jena.sparql.sse.Item $r3;
        java.lang.String r1;
        com.hp.hpl.jena.shared.PrefixMapping r2;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.hp.hpl.jena.shared.PrefixMapping;

        $r0 = new java.io.StringReader;

        specialinvoke $r0.<java.io.StringReader: void <init>(java.lang.String)>(r1);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.sparql.sse.Item parse(java.io.Reader,com.hp.hpl.jena.shared.PrefixMapping)>($r0, r2);

        return $r3;
    }

    private static com.hp.hpl.jena.sparql.sse.Item parseTerm(java.io.Reader, com.hp.hpl.jena.shared.PrefixMapping)
    {
        com.hp.hpl.jena.sparql.sse.lang.ParseHandler $r0;
        com.hp.hpl.jena.sparql.sse.Item $r2;
        java.io.Reader r1;
        com.hp.hpl.jena.shared.PrefixMapping r3;

        r1 := @parameter0: java.io.Reader;

        r3 := @parameter1: com.hp.hpl.jena.shared.PrefixMapping;

        if r3 != null goto label1;

        r3 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.shared.PrefixMapping getDefaultPrefixMapRead()>();

     label1:
        $r0 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.sparql.sse.lang.ParseHandler createParseHandler(com.hp.hpl.jena.shared.PrefixMapping)>(r3);

        staticinvoke <com.hp.hpl.jena.sparql.sse.lang.SSE_Parser: void term(java.io.Reader,com.hp.hpl.jena.sparql.sse.lang.ParseHandler)>(r1, $r0);

        $r2 = interfaceinvoke $r0.<com.hp.hpl.jena.sparql.sse.lang.ParseHandler: com.hp.hpl.jena.sparql.sse.Item getItem()>();

        return $r2;
    }

    private static com.hp.hpl.jena.sparql.sse.Item parse(java.io.Reader, com.hp.hpl.jena.shared.PrefixMapping)
    {
        com.hp.hpl.jena.sparql.sse.lang.ParseHandler $r0;
        com.hp.hpl.jena.sparql.sse.Item $r2;
        java.io.Reader r1;
        com.hp.hpl.jena.shared.PrefixMapping r3;

        r1 := @parameter0: java.io.Reader;

        r3 := @parameter1: com.hp.hpl.jena.shared.PrefixMapping;

        if r3 != null goto label1;

        r3 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.shared.PrefixMapping getDefaultPrefixMapRead()>();

     label1:
        $r0 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.sparql.sse.lang.ParseHandler createParseHandler(com.hp.hpl.jena.shared.PrefixMapping)>(r3);

        staticinvoke <com.hp.hpl.jena.sparql.sse.lang.SSE_Parser: void parse(java.io.Reader,com.hp.hpl.jena.sparql.sse.lang.ParseHandler)>(r1, $r0);

        $r2 = interfaceinvoke $r0.<com.hp.hpl.jena.sparql.sse.lang.ParseHandler: com.hp.hpl.jena.sparql.sse.Item getItem()>();

        return $r2;
    }

    public static java.lang.String format(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0;
        java.lang.String $r1;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForNode(com.hp.hpl.jena.graph.Node)>(r0);

        return $r1;
    }

    public static java.lang.String format(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.shared.PrefixMapping)
    {
        com.hp.hpl.jena.graph.Node r0;
        java.lang.String $r2;
        com.hp.hpl.jena.shared.PrefixMapping r1;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r1 := @parameter1: com.hp.hpl.jena.shared.PrefixMapping;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForNode(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.shared.PrefixMapping)>(r0, r1);

        return $r2;
    }

    public static void write(com.hp.hpl.jena.sparql.algebra.Op)
    {
        org.apache.jena.atlas.io.IndentedWriter $r1, $r2;
        com.hp.hpl.jena.sparql.algebra.Op r0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        $r1 = <org.apache.jena.atlas.io.IndentedWriter: org.apache.jena.atlas.io.IndentedWriter stdout>;

        staticinvoke <com.hp.hpl.jena.sparql.sse.writers.WriterOp: void output(org.apache.jena.atlas.io.IndentedWriter,com.hp.hpl.jena.sparql.algebra.Op)>($r1, r0);

        $r2 = <org.apache.jena.atlas.io.IndentedWriter: org.apache.jena.atlas.io.IndentedWriter stdout>;

        virtualinvoke $r2.<org.apache.jena.atlas.io.IndentedWriter: void flush()>();

        return;
    }

    public static void write(java.io.OutputStream, com.hp.hpl.jena.sparql.algebra.Op)
    {
        java.io.OutputStream r0;
        com.hp.hpl.jena.sparql.algebra.Op r1;

        r0 := @parameter0: java.io.OutputStream;

        r1 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        staticinvoke <com.hp.hpl.jena.sparql.sse.writers.WriterOp: void output(java.io.OutputStream,com.hp.hpl.jena.sparql.algebra.Op)>(r0, r1);

        return;
    }

    public static void write(org.apache.jena.atlas.io.IndentedWriter, com.hp.hpl.jena.sparql.algebra.Op)
    {
        org.apache.jena.atlas.io.IndentedWriter r0;
        com.hp.hpl.jena.sparql.algebra.Op r1;

        r0 := @parameter0: org.apache.jena.atlas.io.IndentedWriter;

        r1 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        staticinvoke <com.hp.hpl.jena.sparql.sse.writers.WriterOp: void output(org.apache.jena.atlas.io.IndentedWriter,com.hp.hpl.jena.sparql.algebra.Op)>(r0, r1);

        return;
    }

    public static void write(com.hp.hpl.jena.graph.Graph)
    {
        org.apache.jena.atlas.io.IndentedWriter $r1, $r2;
        com.hp.hpl.jena.graph.Graph r0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        $r1 = <org.apache.jena.atlas.io.IndentedWriter: org.apache.jena.atlas.io.IndentedWriter stdout>;

        staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: void write(org.apache.jena.atlas.io.IndentedWriter,com.hp.hpl.jena.graph.Graph)>($r1, r0);

        $r2 = <org.apache.jena.atlas.io.IndentedWriter: org.apache.jena.atlas.io.IndentedWriter stdout>;

        virtualinvoke $r2.<org.apache.jena.atlas.io.IndentedWriter: void flush()>();

        return;
    }

    public static void write(java.io.OutputStream, com.hp.hpl.jena.graph.Graph)
    {
        java.io.OutputStream r1;
        org.apache.jena.atlas.io.IndentedWriter $r0;
        com.hp.hpl.jena.graph.Graph r2;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: com.hp.hpl.jena.graph.Graph;

        $r0 = new org.apache.jena.atlas.io.IndentedWriter;

        specialinvoke $r0.<org.apache.jena.atlas.io.IndentedWriter: void <init>(java.io.OutputStream)>(r1);

        staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: void write(org.apache.jena.atlas.io.IndentedWriter,com.hp.hpl.jena.graph.Graph)>($r0, r2);

        virtualinvoke $r0.<org.apache.jena.atlas.io.IndentedWriter: void flush()>();

        return;
    }

    public static void write(org.apache.jena.atlas.io.IndentedWriter, com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.sparql.serializer.SerializationContext $r2;
        org.apache.jena.atlas.io.IndentedWriter r0;
        com.hp.hpl.jena.graph.Graph r1;
        com.hp.hpl.jena.shared.PrefixMapping $r3;

        r0 := @parameter0: org.apache.jena.atlas.io.IndentedWriter;

        r1 := @parameter1: com.hp.hpl.jena.graph.Graph;

        $r2 = new com.hp.hpl.jena.sparql.serializer.SerializationContext;

        $r3 = interfaceinvoke r1.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.shared.PrefixMapping getPrefixMapping()>();

        specialinvoke $r2.<com.hp.hpl.jena.sparql.serializer.SerializationContext: void <init>(com.hp.hpl.jena.shared.PrefixMapping)>($r3);

        staticinvoke <com.hp.hpl.jena.sparql.sse.writers.WriterGraph: void output(org.apache.jena.atlas.io.IndentedWriter,com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.sparql.serializer.SerializationContext)>(r0, r1, $r2);

        virtualinvoke r0.<org.apache.jena.atlas.io.IndentedWriter: void ensureStartOfLine()>();

        return;
    }

    public static void write(com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.rdf.model.Model r0;
        org.apache.jena.atlas.io.IndentedWriter $r1, $r2;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        $r1 = <org.apache.jena.atlas.io.IndentedWriter: org.apache.jena.atlas.io.IndentedWriter stdout>;

        staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: void write(org.apache.jena.atlas.io.IndentedWriter,com.hp.hpl.jena.rdf.model.Model)>($r1, r0);

        $r2 = <org.apache.jena.atlas.io.IndentedWriter: org.apache.jena.atlas.io.IndentedWriter stdout>;

        virtualinvoke $r2.<org.apache.jena.atlas.io.IndentedWriter: void flush()>();

        return;
    }

    public static void write(java.io.OutputStream, com.hp.hpl.jena.rdf.model.Model)
    {
        java.io.OutputStream r1;
        com.hp.hpl.jena.rdf.model.Model r2;
        org.apache.jena.atlas.io.IndentedWriter $r0;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: com.hp.hpl.jena.rdf.model.Model;

        $r0 = new org.apache.jena.atlas.io.IndentedWriter;

        specialinvoke $r0.<org.apache.jena.atlas.io.IndentedWriter: void <init>(java.io.OutputStream)>(r1);

        staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: void write(org.apache.jena.atlas.io.IndentedWriter,com.hp.hpl.jena.rdf.model.Model)>($r0, r2);

        virtualinvoke $r0.<org.apache.jena.atlas.io.IndentedWriter: void flush()>();

        return;
    }

    public static void write(org.apache.jena.atlas.io.IndentedWriter, com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.sparql.serializer.SerializationContext $r3;
        com.hp.hpl.jena.rdf.model.Model r1;
        org.apache.jena.atlas.io.IndentedWriter r0;
        com.hp.hpl.jena.graph.Graph $r2;

        r0 := @parameter0: org.apache.jena.atlas.io.IndentedWriter;

        r1 := @parameter1: com.hp.hpl.jena.rdf.model.Model;

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.graph.Graph getGraph()>();

        $r3 = new com.hp.hpl.jena.sparql.serializer.SerializationContext;

        specialinvoke $r3.<com.hp.hpl.jena.sparql.serializer.SerializationContext: void <init>(com.hp.hpl.jena.shared.PrefixMapping)>(r1);

        staticinvoke <com.hp.hpl.jena.sparql.sse.writers.WriterGraph: void output(org.apache.jena.atlas.io.IndentedWriter,com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.sparql.serializer.SerializationContext)>(r0, $r2, $r3);

        return;
    }

    public static void write(com.hp.hpl.jena.sparql.core.DatasetGraph)
    {
        com.hp.hpl.jena.sparql.core.DatasetGraph r0;
        org.apache.jena.atlas.io.IndentedWriter $r1, $r2;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.DatasetGraph;

        $r1 = <org.apache.jena.atlas.io.IndentedWriter: org.apache.jena.atlas.io.IndentedWriter stdout>;

        staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: void write(org.apache.jena.atlas.io.IndentedWriter,com.hp.hpl.jena.sparql.core.DatasetGraph)>($r1, r0);

        $r2 = <org.apache.jena.atlas.io.IndentedWriter: org.apache.jena.atlas.io.IndentedWriter stdout>;

        virtualinvoke $r2.<org.apache.jena.atlas.io.IndentedWriter: void flush()>();

        return;
    }

    public static void write(java.io.OutputStream, com.hp.hpl.jena.sparql.core.DatasetGraph)
    {
        java.io.OutputStream r1;
        com.hp.hpl.jena.sparql.core.DatasetGraph r2;
        org.apache.jena.atlas.io.IndentedWriter $r0;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: com.hp.hpl.jena.sparql.core.DatasetGraph;

        $r0 = new org.apache.jena.atlas.io.IndentedWriter;

        specialinvoke $r0.<org.apache.jena.atlas.io.IndentedWriter: void <init>(java.io.OutputStream)>(r1);

        staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: void write(org.apache.jena.atlas.io.IndentedWriter,com.hp.hpl.jena.sparql.core.DatasetGraph)>($r0, r2);

        virtualinvoke $r0.<org.apache.jena.atlas.io.IndentedWriter: void flush()>();

        return;
    }

    public static void write(org.apache.jena.atlas.io.IndentedWriter, com.hp.hpl.jena.sparql.core.DatasetGraph)
    {
        com.hp.hpl.jena.sparql.serializer.SerializationContext $r3;
        com.hp.hpl.jena.sparql.core.DatasetGraph r1;
        org.apache.jena.atlas.io.IndentedWriter r0;
        com.hp.hpl.jena.graph.Graph $r2;

        r0 := @parameter0: org.apache.jena.atlas.io.IndentedWriter;

        r1 := @parameter1: com.hp.hpl.jena.sparql.core.DatasetGraph;

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.sparql.core.DatasetGraph: com.hp.hpl.jena.graph.Graph getDefaultGraph()>();

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.sparql.serializer.SerializationContext sCxt(com.hp.hpl.jena.graph.Graph)>($r2);

        staticinvoke <com.hp.hpl.jena.sparql.sse.writers.WriterGraph: void output(org.apache.jena.atlas.io.IndentedWriter,com.hp.hpl.jena.sparql.core.DatasetGraph,com.hp.hpl.jena.sparql.serializer.SerializationContext)>(r0, r1, $r3);

        return;
    }

    public static void write(com.hp.hpl.jena.query.Dataset)
    {
        com.hp.hpl.jena.query.Dataset r0;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r1;

        r0 := @parameter0: com.hp.hpl.jena.query.Dataset;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.query.Dataset: com.hp.hpl.jena.sparql.core.DatasetGraph asDatasetGraph()>();

        staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: void write(com.hp.hpl.jena.sparql.core.DatasetGraph)>($r1);

        return;
    }

    public static void write(java.io.OutputStream, com.hp.hpl.jena.query.Dataset)
    {
        java.io.OutputStream r0;
        com.hp.hpl.jena.query.Dataset r1;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r2;

        r0 := @parameter0: java.io.OutputStream;

        r1 := @parameter1: com.hp.hpl.jena.query.Dataset;

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.query.Dataset: com.hp.hpl.jena.sparql.core.DatasetGraph asDatasetGraph()>();

        staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: void write(java.io.OutputStream,com.hp.hpl.jena.sparql.core.DatasetGraph)>(r0, $r2);

        return;
    }

    public static void write(org.apache.jena.atlas.io.IndentedWriter, com.hp.hpl.jena.query.Dataset)
    {
        com.hp.hpl.jena.query.Dataset r1;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r2;
        org.apache.jena.atlas.io.IndentedWriter r0;

        r0 := @parameter0: org.apache.jena.atlas.io.IndentedWriter;

        r1 := @parameter1: com.hp.hpl.jena.query.Dataset;

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.query.Dataset: com.hp.hpl.jena.sparql.core.DatasetGraph asDatasetGraph()>();

        staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: void write(org.apache.jena.atlas.io.IndentedWriter,com.hp.hpl.jena.sparql.core.DatasetGraph)>(r0, $r2);

        return;
    }

    public static void write(com.hp.hpl.jena.sparql.core.BasicPattern)
    {
        com.hp.hpl.jena.sparql.core.BasicPattern r0;
        org.apache.jena.atlas.io.IndentedWriter $r1, $r2;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.BasicPattern;

        $r1 = <org.apache.jena.atlas.io.IndentedWriter: org.apache.jena.atlas.io.IndentedWriter stdout>;

        staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: void write(org.apache.jena.atlas.io.IndentedWriter,com.hp.hpl.jena.sparql.core.BasicPattern)>($r1, r0);

        $r2 = <org.apache.jena.atlas.io.IndentedWriter: org.apache.jena.atlas.io.IndentedWriter stdout>;

        virtualinvoke $r2.<org.apache.jena.atlas.io.IndentedWriter: void flush()>();

        return;
    }

    public static void write(org.apache.jena.atlas.io.IndentedWriter, com.hp.hpl.jena.sparql.core.BasicPattern)
    {
        com.hp.hpl.jena.sparql.core.BasicPattern r0;
        org.apache.jena.atlas.io.IndentedWriter $r1, $r2, r3;

        r3 := @parameter0: org.apache.jena.atlas.io.IndentedWriter;

        r0 := @parameter1: com.hp.hpl.jena.sparql.core.BasicPattern;

        $r1 = <org.apache.jena.atlas.io.IndentedWriter: org.apache.jena.atlas.io.IndentedWriter stdout>;

        staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: void write(org.apache.jena.atlas.io.IndentedWriter,com.hp.hpl.jena.sparql.core.BasicPattern,com.hp.hpl.jena.shared.PrefixMapping)>($r1, r0, null);

        $r2 = <org.apache.jena.atlas.io.IndentedWriter: org.apache.jena.atlas.io.IndentedWriter stdout>;

        virtualinvoke $r2.<org.apache.jena.atlas.io.IndentedWriter: void flush()>();

        return;
    }

    public static void write(org.apache.jena.atlas.io.IndentedWriter, com.hp.hpl.jena.sparql.core.BasicPattern, com.hp.hpl.jena.shared.PrefixMapping)
    {
        com.hp.hpl.jena.sparql.serializer.SerializationContext $r3;
        com.hp.hpl.jena.sparql.core.BasicPattern r1;
        org.apache.jena.atlas.io.IndentedWriter r0;
        com.hp.hpl.jena.shared.PrefixMapping r2;

        r0 := @parameter0: org.apache.jena.atlas.io.IndentedWriter;

        r1 := @parameter1: com.hp.hpl.jena.sparql.core.BasicPattern;

        r2 := @parameter2: com.hp.hpl.jena.shared.PrefixMapping;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.sparql.serializer.SerializationContext sCxt(com.hp.hpl.jena.shared.PrefixMapping)>(r2);

        staticinvoke <com.hp.hpl.jena.sparql.sse.writers.WriterGraph: void output(org.apache.jena.atlas.io.IndentedWriter,com.hp.hpl.jena.sparql.core.BasicPattern,com.hp.hpl.jena.sparql.serializer.SerializationContext)>(r0, r1, $r3);

        virtualinvoke r0.<org.apache.jena.atlas.io.IndentedWriter: void flush()>();

        return;
    }

    public static void write(com.hp.hpl.jena.graph.Triple)
    {
        org.apache.jena.atlas.io.IndentedWriter $r1, $r2;
        com.hp.hpl.jena.graph.Triple r0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r1 = <org.apache.jena.atlas.io.IndentedWriter: org.apache.jena.atlas.io.IndentedWriter stdout>;

        staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: void write(org.apache.jena.atlas.io.IndentedWriter,com.hp.hpl.jena.graph.Triple)>($r1, r0);

        $r2 = <org.apache.jena.atlas.io.IndentedWriter: org.apache.jena.atlas.io.IndentedWriter stdout>;

        virtualinvoke $r2.<org.apache.jena.atlas.io.IndentedWriter: void flush()>();

        return;
    }

    public static void write(java.io.OutputStream, com.hp.hpl.jena.graph.Triple)
    {
        java.io.OutputStream r1;
        org.apache.jena.atlas.io.IndentedWriter $r0;
        com.hp.hpl.jena.graph.Triple r2;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: com.hp.hpl.jena.graph.Triple;

        $r0 = new org.apache.jena.atlas.io.IndentedWriter;

        specialinvoke $r0.<org.apache.jena.atlas.io.IndentedWriter: void <init>(java.io.OutputStream)>(r1);

        staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: void write(org.apache.jena.atlas.io.IndentedWriter,com.hp.hpl.jena.graph.Triple)>($r0, r2);

        virtualinvoke $r0.<org.apache.jena.atlas.io.IndentedWriter: void flush()>();

        return;
    }

    public static void write(org.apache.jena.atlas.io.IndentedWriter, com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.sparql.serializer.SerializationContext $r3;
        org.apache.jena.atlas.io.IndentedWriter r0;
        com.hp.hpl.jena.shared.PrefixMapping $r2;
        com.hp.hpl.jena.graph.Triple r1;

        r0 := @parameter0: org.apache.jena.atlas.io.IndentedWriter;

        r1 := @parameter1: com.hp.hpl.jena.graph.Triple;

        $r2 = <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.shared.PrefixMapping defaultDefaultPrefixMapWrite>;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.sparql.serializer.SerializationContext sCxt(com.hp.hpl.jena.shared.PrefixMapping)>($r2);

        staticinvoke <com.hp.hpl.jena.sparql.sse.writers.WriterNode: void output(org.apache.jena.atlas.io.IndentedWriter,com.hp.hpl.jena.graph.Triple,com.hp.hpl.jena.sparql.serializer.SerializationContext)>(r0, r1, $r3);

        virtualinvoke r0.<org.apache.jena.atlas.io.IndentedWriter: void flush()>();

        return;
    }

    public static void write(com.hp.hpl.jena.sparql.core.Quad)
    {
        org.apache.jena.atlas.io.IndentedWriter $r1, $r2;
        com.hp.hpl.jena.sparql.core.Quad r0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.Quad;

        $r1 = <org.apache.jena.atlas.io.IndentedWriter: org.apache.jena.atlas.io.IndentedWriter stdout>;

        staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: void write(org.apache.jena.atlas.io.IndentedWriter,com.hp.hpl.jena.sparql.core.Quad)>($r1, r0);

        $r2 = <org.apache.jena.atlas.io.IndentedWriter: org.apache.jena.atlas.io.IndentedWriter stdout>;

        virtualinvoke $r2.<org.apache.jena.atlas.io.IndentedWriter: void flush()>();

        return;
    }

    public static void write(java.io.OutputStream, com.hp.hpl.jena.sparql.core.Quad)
    {
        java.io.OutputStream r1;
        org.apache.jena.atlas.io.IndentedWriter $r0;
        com.hp.hpl.jena.sparql.core.Quad r2;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: com.hp.hpl.jena.sparql.core.Quad;

        $r0 = new org.apache.jena.atlas.io.IndentedWriter;

        specialinvoke $r0.<org.apache.jena.atlas.io.IndentedWriter: void <init>(java.io.OutputStream)>(r1);

        staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: void write(org.apache.jena.atlas.io.IndentedWriter,com.hp.hpl.jena.sparql.core.Quad)>($r0, r2);

        virtualinvoke $r0.<org.apache.jena.atlas.io.IndentedWriter: void flush()>();

        return;
    }

    public static void write(org.apache.jena.atlas.io.IndentedWriter, com.hp.hpl.jena.sparql.core.Quad)
    {
        com.hp.hpl.jena.sparql.serializer.SerializationContext $r3;
        org.apache.jena.atlas.io.IndentedWriter r0;
        com.hp.hpl.jena.shared.PrefixMapping $r2;
        com.hp.hpl.jena.sparql.core.Quad r1;

        r0 := @parameter0: org.apache.jena.atlas.io.IndentedWriter;

        r1 := @parameter1: com.hp.hpl.jena.sparql.core.Quad;

        $r2 = <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.shared.PrefixMapping defaultDefaultPrefixMapWrite>;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.sparql.serializer.SerializationContext sCxt(com.hp.hpl.jena.shared.PrefixMapping)>($r2);

        staticinvoke <com.hp.hpl.jena.sparql.sse.writers.WriterNode: void output(org.apache.jena.atlas.io.IndentedWriter,com.hp.hpl.jena.sparql.core.Quad,com.hp.hpl.jena.sparql.serializer.SerializationContext)>(r0, r1, $r3);

        virtualinvoke r0.<org.apache.jena.atlas.io.IndentedWriter: void flush()>();

        return;
    }

    public static void write(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0;
        org.apache.jena.atlas.io.IndentedWriter $r1, $r2;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r1 = <org.apache.jena.atlas.io.IndentedWriter: org.apache.jena.atlas.io.IndentedWriter stdout>;

        staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: void write(org.apache.jena.atlas.io.IndentedWriter,com.hp.hpl.jena.graph.Node)>($r1, r0);

        $r2 = <org.apache.jena.atlas.io.IndentedWriter: org.apache.jena.atlas.io.IndentedWriter stdout>;

        virtualinvoke $r2.<org.apache.jena.atlas.io.IndentedWriter: void flush()>();

        return;
    }

    public static void write(java.io.OutputStream, com.hp.hpl.jena.graph.Node)
    {
        java.io.OutputStream r1;
        com.hp.hpl.jena.graph.Node r2;
        org.apache.jena.atlas.io.IndentedWriter $r0;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        $r0 = new org.apache.jena.atlas.io.IndentedWriter;

        specialinvoke $r0.<org.apache.jena.atlas.io.IndentedWriter: void <init>(java.io.OutputStream)>(r1);

        staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: void write(org.apache.jena.atlas.io.IndentedWriter,com.hp.hpl.jena.graph.Node)>($r0, r2);

        virtualinvoke $r0.<org.apache.jena.atlas.io.IndentedWriter: void flush()>();

        return;
    }

    public static void write(org.apache.jena.atlas.io.IndentedWriter, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.serializer.SerializationContext $r3;
        com.hp.hpl.jena.graph.Node r0;
        org.apache.jena.atlas.io.IndentedWriter $r2, $r4, r5;
        com.hp.hpl.jena.shared.PrefixMapping $r1;

        r5 := @parameter0: org.apache.jena.atlas.io.IndentedWriter;

        r0 := @parameter1: com.hp.hpl.jena.graph.Node;

        $r2 = <org.apache.jena.atlas.io.IndentedWriter: org.apache.jena.atlas.io.IndentedWriter stdout>;

        $r1 = <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.shared.PrefixMapping defaultDefaultPrefixMapWrite>;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.sparql.serializer.SerializationContext sCxt(com.hp.hpl.jena.shared.PrefixMapping)>($r1);

        staticinvoke <com.hp.hpl.jena.sparql.sse.writers.WriterNode: void output(org.apache.jena.atlas.io.IndentedWriter,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.serializer.SerializationContext)>($r2, r0, $r3);

        $r4 = <org.apache.jena.atlas.io.IndentedWriter: org.apache.jena.atlas.io.IndentedWriter stdout>;

        virtualinvoke $r4.<org.apache.jena.atlas.io.IndentedWriter: void flush()>();

        return;
    }

    public static com.hp.hpl.jena.sparql.serializer.SerializationContext sCxt(com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.sparql.serializer.SerializationContext $r1, $r3;
        com.hp.hpl.jena.graph.Graph r0;
        com.hp.hpl.jena.shared.PrefixMapping $r2;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        if r0 == null goto label1;

        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.shared.PrefixMapping getPrefixMapping()>();

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.sparql.serializer.SerializationContext sCxt(com.hp.hpl.jena.shared.PrefixMapping)>($r2);

        return $r3;

     label1:
        $r1 = new com.hp.hpl.jena.sparql.serializer.SerializationContext;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.serializer.SerializationContext: void <init>()>();

        return $r1;
    }

    public static com.hp.hpl.jena.sparql.serializer.SerializationContext sCxt(com.hp.hpl.jena.shared.PrefixMapping)
    {
        com.hp.hpl.jena.shared.PrefixMapping r0;
        com.hp.hpl.jena.sparql.serializer.SerializationContext $r1, $r2;

        r0 := @parameter0: com.hp.hpl.jena.shared.PrefixMapping;

        if r0 == null goto label1;

        $r2 = new com.hp.hpl.jena.sparql.serializer.SerializationContext;

        specialinvoke $r2.<com.hp.hpl.jena.sparql.serializer.SerializationContext: void <init>(com.hp.hpl.jena.shared.PrefixMapping)>(r0);

        return $r2;

     label1:
        $r1 = new com.hp.hpl.jena.sparql.serializer.SerializationContext;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.serializer.SerializationContext: void <init>()>();

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.String $r1, $r3, $r6, $r13, $r15;
        com.hp.hpl.jena.shared.PrefixMapping $r2, $r4, $r5, $r7, $r8, $r9, $r10, $r11, $r14, $r16, $r17, $r18;
        com.hp.hpl.jena.shared.impl.PrefixMappingImpl $r0, $r12;

        $r0 = new com.hp.hpl.jena.shared.impl.PrefixMappingImpl;

        specialinvoke $r0.<com.hp.hpl.jena.shared.impl.PrefixMappingImpl: void <init>()>();

        <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.shared.PrefixMapping defaultDefaultPrefixMapRead> = $r0;

        $r2 = <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.shared.PrefixMapping defaultDefaultPrefixMapRead>;

        $r1 = <com.hp.hpl.jena.sparql.ARQConstants: java.lang.String rdfPrefix>;

        interfaceinvoke $r2.<com.hp.hpl.jena.shared.PrefixMapping: com.hp.hpl.jena.shared.PrefixMapping setNsPrefix(java.lang.String,java.lang.String)>("rdf", $r1);

        $r4 = <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.shared.PrefixMapping defaultDefaultPrefixMapRead>;

        $r3 = <com.hp.hpl.jena.sparql.ARQConstants: java.lang.String rdfsPrefix>;

        interfaceinvoke $r4.<com.hp.hpl.jena.shared.PrefixMapping: com.hp.hpl.jena.shared.PrefixMapping setNsPrefix(java.lang.String,java.lang.String)>("rdfs", $r3);

        $r5 = <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.shared.PrefixMapping defaultDefaultPrefixMapRead>;

        interfaceinvoke $r5.<com.hp.hpl.jena.shared.PrefixMapping: com.hp.hpl.jena.shared.PrefixMapping setNsPrefix(java.lang.String,java.lang.String)>("xsd", "http://www.w3.org/2001/XMLSchema#");

        $r7 = <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.shared.PrefixMapping defaultDefaultPrefixMapRead>;

        $r6 = <com.hp.hpl.jena.sparql.ARQConstants: java.lang.String owlPrefix>;

        interfaceinvoke $r7.<com.hp.hpl.jena.shared.PrefixMapping: com.hp.hpl.jena.shared.PrefixMapping setNsPrefix(java.lang.String,java.lang.String)>("owl", $r6);

        $r8 = <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.shared.PrefixMapping defaultDefaultPrefixMapRead>;

        interfaceinvoke $r8.<com.hp.hpl.jena.shared.PrefixMapping: com.hp.hpl.jena.shared.PrefixMapping setNsPrefix(java.lang.String,java.lang.String)>("fn", "http://www.w3.org/2005/xpath-functions#");

        $r9 = <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.shared.PrefixMapping defaultDefaultPrefixMapRead>;

        interfaceinvoke $r9.<com.hp.hpl.jena.shared.PrefixMapping: com.hp.hpl.jena.shared.PrefixMapping setNsPrefix(java.lang.String,java.lang.String)>("ex", "http://example/ns#");

        $r10 = <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.shared.PrefixMapping defaultDefaultPrefixMapRead>;

        interfaceinvoke $r10.<com.hp.hpl.jena.shared.PrefixMapping: com.hp.hpl.jena.shared.PrefixMapping setNsPrefix(java.lang.String,java.lang.String)>("", "http://example/");

        $r11 = <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.shared.PrefixMapping defaultDefaultPrefixMapRead>;

        <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.shared.PrefixMapping defaultPrefixMapRead> = $r11;

        $r12 = new com.hp.hpl.jena.shared.impl.PrefixMappingImpl;

        specialinvoke $r12.<com.hp.hpl.jena.shared.impl.PrefixMappingImpl: void <init>()>();

        <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.shared.PrefixMapping defaultDefaultPrefixMapWrite> = $r12;

        $r14 = <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.shared.PrefixMapping defaultDefaultPrefixMapWrite>;

        $r13 = <com.hp.hpl.jena.sparql.ARQConstants: java.lang.String rdfPrefix>;

        interfaceinvoke $r14.<com.hp.hpl.jena.shared.PrefixMapping: com.hp.hpl.jena.shared.PrefixMapping setNsPrefix(java.lang.String,java.lang.String)>("rdf", $r13);

        $r16 = <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.shared.PrefixMapping defaultDefaultPrefixMapWrite>;

        $r15 = <com.hp.hpl.jena.sparql.ARQConstants: java.lang.String rdfsPrefix>;

        interfaceinvoke $r16.<com.hp.hpl.jena.shared.PrefixMapping: com.hp.hpl.jena.shared.PrefixMapping setNsPrefix(java.lang.String,java.lang.String)>("rdfs", $r15);

        $r17 = <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.shared.PrefixMapping defaultDefaultPrefixMapWrite>;

        interfaceinvoke $r17.<com.hp.hpl.jena.shared.PrefixMapping: com.hp.hpl.jena.shared.PrefixMapping setNsPrefix(java.lang.String,java.lang.String)>("xsd", "http://www.w3.org/2001/XMLSchema#");

        $r18 = <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.shared.PrefixMapping defaultDefaultPrefixMapWrite>;

        <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.shared.PrefixMapping defaultPrefixMapWrite> = $r18;

        <com.hp.hpl.jena.sparql.sse.SSE: boolean useResolver> = 1;

        return;
    }
}
