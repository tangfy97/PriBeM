public class org.waveprotocol.wave.client.editor.content.paragraph.ParagraphNiceHtmlRenderer extends java.lang.Object implements org.waveprotocol.wave.client.editor.content.NiceHtmlRenderer
{
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        org.waveprotocol.wave.client.editor.content.paragraph.ParagraphNiceHtmlRenderer r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.paragraph.ParagraphNiceHtmlRenderer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.waveprotocol.wave.client.editor.content.ContentNode renderSequence(org.waveprotocol.wave.model.document.util.ReadableDocumentView, org.waveprotocol.wave.client.editor.content.ContentNode, org.waveprotocol.wave.client.editor.content.ContentNode, com.google.gwt.dom.client.Element, org.waveprotocol.wave.client.editor.extract.SelectionMatcher)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0, r5, r16, r17;
        java.lang.Object[] $r1;
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher r10;
        org.waveprotocol.wave.model.document.util.ReadableDocumentView r8;
        java.lang.AssertionError $r15;
        int $i0, $i1;
        org.waveprotocol.wave.client.editor.content.ContentElement $r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.waveprotocol.wave.client.editor.content.paragraph.ParagraphNiceHtmlRenderer$HtmlStack $r3;
        org.waveprotocol.wave.client.editor.content.paragraph.ParagraphNiceHtmlRenderer$IndentType $r6, $r12, $r18;
        com.google.gwt.dom.client.Element r4, $r9, $r11, $r13;
        org.waveprotocol.wave.client.editor.content.paragraph.ParagraphNiceHtmlRenderer r7;
        java.lang.Class $r2;
        java.lang.Object $r19;

        r7 := @this: org.waveprotocol.wave.client.editor.content.paragraph.ParagraphNiceHtmlRenderer;

        r8 := @parameter0: org.waveprotocol.wave.model.document.util.ReadableDocumentView;

        r0 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentNode;

        r5 := @parameter2: org.waveprotocol.wave.client.editor.content.ContentNode;

        r4 := @parameter3: com.google.gwt.dom.client.Element;

        r10 := @parameter4: org.waveprotocol.wave.client.editor.extract.SelectionMatcher;

        $z0 = r0 instanceof org.waveprotocol.wave.client.editor.content.ContentElement;

        $r1 = newarray (java.lang.Object)[1];

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r1[0] = $r2;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "firstItem must be an instance of ContentElement ", $r1);

        r16 = null;

        $r3 = new org.waveprotocol.wave.client.editor.content.paragraph.ParagraphNiceHtmlRenderer$HtmlStack;

        specialinvoke $r3.<org.waveprotocol.wave.client.editor.content.paragraph.ParagraphNiceHtmlRenderer$HtmlStack: void <init>(com.google.gwt.dom.client.Element)>(r4);

        r17 = r0;

     label1:
        if r17 == null goto label8;

        if r17 == r5 goto label8;

        $z1 = <org.waveprotocol.wave.client.editor.content.paragraph.ParagraphNiceHtmlRenderer: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $z5 = r17 instanceof org.waveprotocol.wave.client.editor.content.ContentElement;

        if $z5 != 0 goto label2;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>(java.lang.Object)>("Expected node to be instance of ContentElement");

        throw $r15;

     label2:
        $r14 = (org.waveprotocol.wave.client.editor.content.ContentElement) r17;

        $i0 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: int getIndent(org.waveprotocol.wave.client.editor.content.ContentElement)>($r14);

        $z2 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: boolean isHeading(org.waveprotocol.wave.client.editor.content.ContentNode)>($r14);

        if $z2 == 0 goto label3;

        virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.paragraph.ParagraphNiceHtmlRenderer$HtmlStack: void maybeCloseListItem()>();

        $r12 = <org.waveprotocol.wave.client.editor.content.paragraph.ParagraphNiceHtmlRenderer$IndentType: org.waveprotocol.wave.client.editor.content.paragraph.ParagraphNiceHtmlRenderer$IndentType BLOCKQUOTE>;

        virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.paragraph.ParagraphNiceHtmlRenderer$HtmlStack: void restack(org.waveprotocol.wave.client.editor.content.paragraph.ParagraphNiceHtmlRenderer$IndentType,int)>($r12, $i0);

        $r13 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.paragraph.ParagraphNiceHtmlRenderer$HtmlStack: com.google.gwt.dom.client.Element currentParent()>();

        specialinvoke r7.<org.waveprotocol.wave.client.editor.content.paragraph.ParagraphNiceHtmlRenderer: org.waveprotocol.wave.client.editor.content.ContentNode renderHeadingItem(org.waveprotocol.wave.model.document.util.ReadableDocumentView,com.google.gwt.dom.client.Element,org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.extract.SelectionMatcher)>(r8, $r13, $r14, r10);

        goto label7;

     label3:
        $z3 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: boolean isListItem(org.waveprotocol.wave.client.editor.content.ContentNode)>($r14);

        if $z3 == 0 goto label6;

        $z4 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: boolean isDecimalListItem(org.waveprotocol.wave.client.editor.content.ContentElement)>($r14);

        virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.paragraph.ParagraphNiceHtmlRenderer$HtmlStack: void maybeCloseListItem()>();

        if $z4 == 0 goto label4;

        $r18 = <org.waveprotocol.wave.client.editor.content.paragraph.ParagraphNiceHtmlRenderer$IndentType: org.waveprotocol.wave.client.editor.content.paragraph.ParagraphNiceHtmlRenderer$IndentType OL>;

        goto label5;

     label4:
        $r18 = <org.waveprotocol.wave.client.editor.content.paragraph.ParagraphNiceHtmlRenderer$IndentType: org.waveprotocol.wave.client.editor.content.paragraph.ParagraphNiceHtmlRenderer$IndentType UL>;

     label5:
        $i1 = $i0 + 1;

        virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.paragraph.ParagraphNiceHtmlRenderer$HtmlStack: void restack(org.waveprotocol.wave.client.editor.content.paragraph.ParagraphNiceHtmlRenderer$IndentType,int)>($r18, $i1);

        virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.paragraph.ParagraphNiceHtmlRenderer$HtmlStack: void startListItem()>();

        $r11 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.paragraph.ParagraphNiceHtmlRenderer$HtmlStack: com.google.gwt.dom.client.Element currentParent()>();

        staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.ParagraphNiceHtmlRenderer: void doInnards(org.waveprotocol.wave.model.document.util.ReadableDocumentView,com.google.gwt.dom.client.Element,org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.extract.SelectionMatcher)>(r8, $r11, $r14, r10);

        goto label7;

     label6:
        virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.paragraph.ParagraphNiceHtmlRenderer$HtmlStack: void maybeCloseListItemForParagraph(int)>($i0);

        $r6 = <org.waveprotocol.wave.client.editor.content.paragraph.ParagraphNiceHtmlRenderer$IndentType: org.waveprotocol.wave.client.editor.content.paragraph.ParagraphNiceHtmlRenderer$IndentType BLOCKQUOTE>;

        virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.paragraph.ParagraphNiceHtmlRenderer$HtmlStack: void restack(org.waveprotocol.wave.client.editor.content.paragraph.ParagraphNiceHtmlRenderer$IndentType,int)>($r6, $i0);

        $r9 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.paragraph.ParagraphNiceHtmlRenderer$HtmlStack: com.google.gwt.dom.client.Element currentParent()>();

        specialinvoke r7.<org.waveprotocol.wave.client.editor.content.paragraph.ParagraphNiceHtmlRenderer: org.waveprotocol.wave.client.editor.content.ContentNode renderAndAppendParagraph(org.waveprotocol.wave.model.document.util.ReadableDocumentView,com.google.gwt.dom.client.Element,org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.extract.SelectionMatcher)>(r8, $r9, $r14, r10);

     label7:
        r16 = r17;

        $r19 = interfaceinvoke r8.<org.waveprotocol.wave.model.document.util.ReadableDocumentView: java.lang.Object getNextSibling(java.lang.Object)>(r17);

        r17 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r19;

        goto label1;

     label8:
        return r16;
    }

    private org.waveprotocol.wave.client.editor.content.ContentNode renderHeadingItem(org.waveprotocol.wave.model.document.util.ReadableDocumentView, com.google.gwt.dom.client.Element, org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.extract.SelectionMatcher)
    {
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher r5;
        org.waveprotocol.wave.model.document.util.ReadableDocumentView r4;
        int $i0;
        com.google.gwt.dom.client.HeadingElement $r2;
        com.google.gwt.dom.client.Element r3, $r8;
        org.waveprotocol.wave.client.editor.content.paragraph.ParagraphNiceHtmlRenderer r6;
        org.waveprotocol.wave.client.editor.content.ContentElement r1;
        com.google.gwt.dom.client.Document $r0;
        com.google.gwt.dom.client.Node $r7;

        r6 := @this: org.waveprotocol.wave.client.editor.content.paragraph.ParagraphNiceHtmlRenderer;

        r4 := @parameter0: org.waveprotocol.wave.model.document.util.ReadableDocumentView;

        r3 := @parameter1: com.google.gwt.dom.client.Element;

        r1 := @parameter2: org.waveprotocol.wave.client.editor.content.ContentElement;

        r5 := @parameter3: org.waveprotocol.wave.client.editor.extract.SelectionMatcher;

        $r0 = staticinvoke <com.google.gwt.dom.client.Document: com.google.gwt.dom.client.Document get()>();

        $i0 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: int getHeadingSize(org.waveprotocol.wave.client.editor.content.ContentNode)>(r1);

        $r2 = virtualinvoke $r0.<com.google.gwt.dom.client.Document: com.google.gwt.dom.client.HeadingElement createHElement(int)>($i0);

        $r7 = (com.google.gwt.dom.client.Node) $r2;

        virtualinvoke r3.<com.google.gwt.dom.client.Element: com.google.gwt.dom.client.Node appendChild(com.google.gwt.dom.client.Node)>($r7);

        $r8 = (com.google.gwt.dom.client.Element) $r2;

        staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.ParagraphNiceHtmlRenderer: void doInnards(org.waveprotocol.wave.model.document.util.ReadableDocumentView,com.google.gwt.dom.client.Element,org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.extract.SelectionMatcher)>(r4, $r8, r1, r5);

        return r1;
    }

    private org.waveprotocol.wave.client.editor.content.ContentNode renderAndAppendParagraph(org.waveprotocol.wave.model.document.util.ReadableDocumentView, com.google.gwt.dom.client.Element, org.waveprotocol.wave.client.editor.content.ContentNode, org.waveprotocol.wave.client.editor.extract.SelectionMatcher)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r2;
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher r3;
        org.waveprotocol.wave.model.document.util.ReadableDocumentView r0;
        com.google.gwt.dom.client.BRElement $r5;
        com.google.gwt.dom.client.Element r1;
        org.waveprotocol.wave.client.editor.content.paragraph.ParagraphNiceHtmlRenderer r6;
        com.google.gwt.dom.client.Document $r4;
        com.google.gwt.dom.client.Node $r7, $r8;

        r6 := @this: org.waveprotocol.wave.client.editor.content.paragraph.ParagraphNiceHtmlRenderer;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.ReadableDocumentView;

        r1 := @parameter1: com.google.gwt.dom.client.Element;

        r2 := @parameter2: org.waveprotocol.wave.client.editor.content.ContentNode;

        r3 := @parameter3: org.waveprotocol.wave.client.editor.extract.SelectionMatcher;

        staticinvoke <org.waveprotocol.wave.client.editor.extract.PasteFormatRenderer: void renderChildren(org.waveprotocol.wave.model.document.util.ReadableDocumentView,com.google.gwt.dom.client.Element,org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.extract.SelectionMatcher)>(r0, r1, r2, r3);

        $r4 = staticinvoke <com.google.gwt.dom.client.Document: com.google.gwt.dom.client.Document get()>();

        $r5 = virtualinvoke $r4.<com.google.gwt.dom.client.Document: com.google.gwt.dom.client.BRElement createBRElement()>();

        $r7 = (com.google.gwt.dom.client.Node) $r5;

        virtualinvoke r1.<com.google.gwt.dom.client.Element: com.google.gwt.dom.client.Node appendChild(com.google.gwt.dom.client.Node)>($r7);

        $r8 = (com.google.gwt.dom.client.Node) $r5;

        virtualinvoke r3.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: void maybeNoteHtml(org.waveprotocol.wave.client.editor.content.ContentNode,com.google.gwt.dom.client.Node)>(r2, $r8);

        return r2;
    }

    private static void doInnards(org.waveprotocol.wave.model.document.util.ReadableDocumentView, com.google.gwt.dom.client.Element, org.waveprotocol.wave.client.editor.content.ContentNode, org.waveprotocol.wave.client.editor.extract.SelectionMatcher)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r2;
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher r3;
        org.waveprotocol.wave.model.document.util.ReadableDocumentView r0;
        com.google.gwt.dom.client.Element r1;
        com.google.gwt.dom.client.Node $r4;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.ReadableDocumentView;

        r1 := @parameter1: com.google.gwt.dom.client.Element;

        r2 := @parameter2: org.waveprotocol.wave.client.editor.content.ContentNode;

        r3 := @parameter3: org.waveprotocol.wave.client.editor.extract.SelectionMatcher;

        staticinvoke <org.waveprotocol.wave.client.editor.extract.PasteFormatRenderer: void renderChildren(org.waveprotocol.wave.model.document.util.ReadableDocumentView,com.google.gwt.dom.client.Element,org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.extract.SelectionMatcher)>(r0, r1, r2, r3);

        $r4 = (com.google.gwt.dom.client.Node) r1;

        virtualinvoke r3.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher: void maybeNoteHtml(org.waveprotocol.wave.client.editor.content.ContentNode,com.google.gwt.dom.client.Node)>(r2, $r4);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/client/editor/content/paragraph/ParagraphNiceHtmlRenderer;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.client.editor.content.paragraph.ParagraphNiceHtmlRenderer: boolean $assertionsDisabled> = $z1;

        return;
    }
}
