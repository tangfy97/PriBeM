class org.apache.lucene.index.IndexWriter$ReaderPool extends java.lang.Object
{
    private final java.util.Map readerMap;
    static final boolean $assertionsDisabled;
    final org.apache.lucene.index.IndexWriter this$0;

    void <init>(org.apache.lucene.index.IndexWriter)
    {
        org.apache.lucene.index.IndexWriter r1;
        java.util.HashMap $r2;
        org.apache.lucene.index.IndexWriter$ReaderPool r0;

        r0 := @this: org.apache.lucene.index.IndexWriter$ReaderPool;

        r1 := @parameter0: org.apache.lucene.index.IndexWriter;

        r0.<org.apache.lucene.index.IndexWriter$ReaderPool: org.apache.lucene.index.IndexWriter this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.apache.lucene.index.IndexWriter$ReaderPool: java.util.Map readerMap> = $r2;

        return;
    }

    public synchronized boolean infoIsLive(org.apache.lucene.index.SegmentInfoPerCommit)
    {
        org.apache.lucene.index.SegmentInfoPerCommit r2, $r6;
        java.lang.AssertionError $r20, $r22;
        int $i0, $i2;
        java.lang.String $r12, $r18;
        boolean $z0, $z1;
        org.apache.lucene.index.SegmentInfos $r3, $r5;
        org.apache.lucene.index.IndexWriter $r1, $r4;
        org.apache.lucene.index.IndexWriter$ReaderPool r0;
        java.lang.StringBuilder $r9, $r10, $r11, $r15, $r16, $r17, $r19, $r21;

        r0 := @this: org.apache.lucene.index.IndexWriter$ReaderPool;

        r2 := @parameter0: org.apache.lucene.index.SegmentInfoPerCommit;

        $r1 = r0.<org.apache.lucene.index.IndexWriter$ReaderPool: org.apache.lucene.index.IndexWriter this$0>;

        $r3 = $r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $i0 = virtualinvoke $r3.<org.apache.lucene.index.SegmentInfos: int indexOf(org.apache.lucene.index.SegmentInfoPerCommit)>(r2);

        $z0 = <org.apache.lucene.index.IndexWriter$ReaderPool: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i2 = (int) -1;

        if $i0 != $i2 goto label1;

        $r20 = new java.lang.AssertionError;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("info=");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" isn\'t live");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.AssertionError: void <init>(java.lang.Object)>($r18);

        throw $r20;

     label1:
        $z1 = <org.apache.lucene.index.IndexWriter$ReaderPool: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $r4 = r0.<org.apache.lucene.index.IndexWriter$ReaderPool: org.apache.lucene.index.IndexWriter this$0>;

        $r5 = $r4.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $r6 = virtualinvoke $r5.<org.apache.lucene.index.SegmentInfos: org.apache.lucene.index.SegmentInfoPerCommit info(int)>($i0);

        if $r6 == r2 goto label2;

        $r22 = new java.lang.AssertionError;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("info=");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" doesn\'t match live info in segmentInfos");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.AssertionError: void <init>(java.lang.Object)>($r12);

        throw $r22;

     label2:
        return 1;
    }

    public synchronized void drop(org.apache.lucene.index.SegmentInfoPerCommit) throws java.io.IOException
    {
        org.apache.lucene.index.SegmentInfoPerCommit r1, $r6;
        java.lang.AssertionError $r7;
        org.apache.lucene.index.ReadersAndLiveDocs r4;
        org.apache.lucene.index.IndexWriter$ReaderPool r0;
        java.util.Map $r2, $r5;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.IndexWriter$ReaderPool;

        r1 := @parameter0: org.apache.lucene.index.SegmentInfoPerCommit;

        $r2 = r0.<org.apache.lucene.index.IndexWriter$ReaderPool: java.util.Map readerMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.apache.lucene.index.ReadersAndLiveDocs) $r3;

        if r4 == null goto label2;

        $z0 = <org.apache.lucene.index.IndexWriter$ReaderPool: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r6 = r4.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentInfoPerCommit info>;

        if r1 == $r6 goto label1;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label1:
        $r5 = r0.<org.apache.lucene.index.IndexWriter$ReaderPool: java.util.Map readerMap>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        virtualinvoke r4.<org.apache.lucene.index.ReadersAndLiveDocs: void dropReaders()>();

     label2:
        return;
    }

    public synchronized boolean anyPendingDeletes()
    {
        java.util.Iterator $r3;
        java.util.Collection $r2;
        org.apache.lucene.index.ReadersAndLiveDocs r5;
        org.apache.lucene.index.IndexWriter$ReaderPool r0;
        java.util.Map $r1;
        int $i0;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.IndexWriter$ReaderPool;

        $r1 = r0.<org.apache.lucene.index.IndexWriter$ReaderPool: java.util.Map readerMap>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.lucene.index.ReadersAndLiveDocs) $r4;

        $i0 = virtualinvoke r5.<org.apache.lucene.index.ReadersAndLiveDocs: int getPendingDeleteCount()>();

        if $i0 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public synchronized void release(org.apache.lucene.index.ReadersAndLiveDocs) throws java.io.IOException
    {
        org.apache.lucene.index.SegmentInfoPerCommit $r9, $r13;
        java.lang.AssertionError $r10, $r11;
        org.apache.lucene.index.IndexFileDeleter $r8;
        org.apache.lucene.store.Directory $r4;
        java.util.Map $r12;
        int $i0, $i1;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.lucene.index.ReadersAndLiveDocs r0;
        org.apache.lucene.index.SegmentInfos $r7;
        org.apache.lucene.index.IndexWriter $r2, $r3, $r5, $r6;
        org.apache.lucene.index.IndexWriter$ReaderPool r1;

        r1 := @this: org.apache.lucene.index.IndexWriter$ReaderPool;

        r0 := @parameter0: org.apache.lucene.index.ReadersAndLiveDocs;

        virtualinvoke r0.<org.apache.lucene.index.ReadersAndLiveDocs: void decRef()>();

        $z0 = <org.apache.lucene.index.IndexWriter$ReaderPool: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i1 = virtualinvoke r0.<org.apache.lucene.index.ReadersAndLiveDocs: int refCount()>();

        if $i1 >= 1 goto label1;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label1:
        $r2 = r1.<org.apache.lucene.index.IndexWriter$ReaderPool: org.apache.lucene.index.IndexWriter this$0>;

        $z1 = staticinvoke <org.apache.lucene.index.IndexWriter: boolean access$000(org.apache.lucene.index.IndexWriter)>($r2);

        if $z1 != 0 goto label4;

        $i0 = virtualinvoke r0.<org.apache.lucene.index.ReadersAndLiveDocs: int refCount()>();

        if $i0 != 1 goto label4;

        $r3 = r1.<org.apache.lucene.index.IndexWriter$ReaderPool: org.apache.lucene.index.IndexWriter this$0>;

        $r4 = staticinvoke <org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory access$100(org.apache.lucene.index.IndexWriter)>($r3);

        $z2 = virtualinvoke r0.<org.apache.lucene.index.ReadersAndLiveDocs: boolean writeLiveDocs(org.apache.lucene.store.Directory)>($r4);

        if $z2 == 0 goto label3;

        $z3 = <org.apache.lucene.index.IndexWriter$ReaderPool: boolean $assertionsDisabled>;

        if $z3 != 0 goto label2;

        $r9 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $z4 = virtualinvoke r1.<org.apache.lucene.index.IndexWriter$ReaderPool: boolean infoIsLive(org.apache.lucene.index.SegmentInfoPerCommit)>($r9);

        if $z4 != 0 goto label2;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label2:
        $r5 = r1.<org.apache.lucene.index.IndexWriter$ReaderPool: org.apache.lucene.index.IndexWriter this$0>;

        $r8 = $r5.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        $r6 = r1.<org.apache.lucene.index.IndexWriter$ReaderPool: org.apache.lucene.index.IndexWriter this$0>;

        $r7 = $r6.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        virtualinvoke $r8.<org.apache.lucene.index.IndexFileDeleter: void checkpoint(org.apache.lucene.index.SegmentInfos,boolean)>($r7, 0);

     label3:
        virtualinvoke r0.<org.apache.lucene.index.ReadersAndLiveDocs: void dropReaders()>();

        $r12 = r1.<org.apache.lucene.index.IndexWriter$ReaderPool: java.util.Map readerMap>;

        $r13 = r0.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentInfoPerCommit info>;

        interfaceinvoke $r12.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r13);

     label4:
        return;
    }

    synchronized void dropAll(boolean) throws java.io.IOException
    {
        java.lang.Throwable $r19, $r20, r21;
        org.apache.lucene.index.SegmentInfoPerCommit $r17;
        java.lang.AssertionError $r6, $r18;
        org.apache.lucene.index.IndexFileDeleter $r16;
        java.util.Map $r1, $r5;
        org.apache.lucene.store.Directory $r12;
        int $i0;
        boolean $z0, $z1, z2, $z3, $z4, $z5;
        java.util.Map$Entry $r8;
        java.util.Iterator $r3;
        java.util.Set $r2;
        java.lang.RuntimeException $r4;
        org.apache.lucene.index.ReadersAndLiveDocs r10;
        org.apache.lucene.index.SegmentInfos $r15;
        org.apache.lucene.index.IndexWriter $r11, $r13, $r14;
        org.apache.lucene.index.IndexWriter$ReaderPool r0;
        java.lang.Object $r7, $r9;

        r0 := @this: org.apache.lucene.index.IndexWriter$ReaderPool;

        z2 := @parameter0: boolean;

        r21 = null;

        $r1 = r0.<org.apache.lucene.index.IndexWriter$ReaderPool: java.util.Map readerMap>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r7 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.util.Map$Entry) $r7;

        $r9 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getValue()>();

        r10 = (org.apache.lucene.index.ReadersAndLiveDocs) $r9;

     label02:
        if z2 == 0 goto label04;

        $r11 = r0.<org.apache.lucene.index.IndexWriter$ReaderPool: org.apache.lucene.index.IndexWriter this$0>;

        $r12 = staticinvoke <org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory access$100(org.apache.lucene.index.IndexWriter)>($r11);

        $z3 = virtualinvoke r10.<org.apache.lucene.index.ReadersAndLiveDocs: boolean writeLiveDocs(org.apache.lucene.store.Directory)>($r12);

        if $z3 == 0 goto label04;

        $z4 = <org.apache.lucene.index.IndexWriter$ReaderPool: boolean $assertionsDisabled>;

        if $z4 != 0 goto label03;

        $r17 = r10.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $z5 = virtualinvoke r0.<org.apache.lucene.index.IndexWriter$ReaderPool: boolean infoIsLive(org.apache.lucene.index.SegmentInfoPerCommit)>($r17);

        if $z5 != 0 goto label03;

        $r18 = new java.lang.AssertionError;

        specialinvoke $r18.<java.lang.AssertionError: void <init>()>();

        throw $r18;

     label03:
        $r13 = r0.<org.apache.lucene.index.IndexWriter$ReaderPool: org.apache.lucene.index.IndexWriter this$0>;

        $r16 = $r13.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        $r14 = r0.<org.apache.lucene.index.IndexWriter$ReaderPool: org.apache.lucene.index.IndexWriter this$0>;

        $r15 = $r14.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        virtualinvoke $r16.<org.apache.lucene.index.IndexFileDeleter: void checkpoint(org.apache.lucene.index.SegmentInfos,boolean)>($r15, 0);

     label04:
        goto label06;

     label05:
        $r20 := @caughtexception;

        if r21 == null goto label06;

        r21 = $r20;

     label06:
        interfaceinvoke $r3.<java.util.Iterator: void remove()>();

     label07:
        virtualinvoke r10.<org.apache.lucene.index.ReadersAndLiveDocs: void dropReaders()>();

     label08:
        goto label10;

     label09:
        $r19 := @caughtexception;

        if r21 == null goto label10;

        r21 = $r19;

     label10:
        goto label01;

     label11:
        $z1 = <org.apache.lucene.index.IndexWriter$ReaderPool: boolean $assertionsDisabled>;

        if $z1 != 0 goto label12;

        $r5 = r0.<org.apache.lucene.index.IndexWriter$ReaderPool: java.util.Map readerMap>;

        $i0 = interfaceinvoke $r5.<java.util.Map: int size()>();

        if $i0 == 0 goto label12;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label12:
        if r21 == null goto label13;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r21);

        throw $r4;

     label13:
        return;

        catch java.lang.Throwable from label02 to label04 with label05;
        catch java.lang.Throwable from label07 to label08 with label09;
    }

    public synchronized void commit(org.apache.lucene.index.SegmentInfos) throws java.io.IOException
    {
        org.apache.lucene.index.SegmentInfoPerCommit r3, $r15;
        java.lang.AssertionError $r14, $r16;
        org.apache.lucene.index.IndexFileDeleter $r13;
        java.util.Map $r5;
        org.apache.lucene.store.Directory $r9;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Iterator $r1;
        org.apache.lucene.index.ReadersAndLiveDocs r7;
        org.apache.lucene.index.SegmentInfos r0, $r12;
        org.apache.lucene.index.IndexWriter $r8, $r10, $r11;
        org.apache.lucene.index.IndexWriter$ReaderPool r4;
        java.lang.Object $r2, $r6;

        r4 := @this: org.apache.lucene.index.IndexWriter$ReaderPool;

        r0 := @parameter0: org.apache.lucene.index.SegmentInfos;

        $r1 = virtualinvoke r0.<org.apache.lucene.index.SegmentInfos: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.lucene.index.SegmentInfoPerCommit) $r2;

        $r5 = r4.<org.apache.lucene.index.IndexWriter$ReaderPool: java.util.Map readerMap>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

        r7 = (org.apache.lucene.index.ReadersAndLiveDocs) $r6;

        if r7 == null goto label4;

        $z1 = <org.apache.lucene.index.IndexWriter$ReaderPool: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $r15 = r7.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentInfoPerCommit info>;

        if $r15 == r3 goto label2;

        $r16 = new java.lang.AssertionError;

        specialinvoke $r16.<java.lang.AssertionError: void <init>()>();

        throw $r16;

     label2:
        $r8 = r4.<org.apache.lucene.index.IndexWriter$ReaderPool: org.apache.lucene.index.IndexWriter this$0>;

        $r9 = staticinvoke <org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory access$100(org.apache.lucene.index.IndexWriter)>($r8);

        $z2 = virtualinvoke r7.<org.apache.lucene.index.ReadersAndLiveDocs: boolean writeLiveDocs(org.apache.lucene.store.Directory)>($r9);

        if $z2 == 0 goto label4;

        $z3 = <org.apache.lucene.index.IndexWriter$ReaderPool: boolean $assertionsDisabled>;

        if $z3 != 0 goto label3;

        $z4 = virtualinvoke r4.<org.apache.lucene.index.IndexWriter$ReaderPool: boolean infoIsLive(org.apache.lucene.index.SegmentInfoPerCommit)>(r3);

        if $z4 != 0 goto label3;

        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();

        throw $r14;

     label3:
        $r10 = r4.<org.apache.lucene.index.IndexWriter$ReaderPool: org.apache.lucene.index.IndexWriter this$0>;

        $r13 = $r10.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        $r11 = r4.<org.apache.lucene.index.IndexWriter$ReaderPool: org.apache.lucene.index.IndexWriter this$0>;

        $r12 = $r11.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        virtualinvoke $r13.<org.apache.lucene.index.IndexFileDeleter: void checkpoint(org.apache.lucene.index.SegmentInfos,boolean)>($r12, 0);

     label4:
        goto label1;

     label5:
        return;
    }

    public synchronized org.apache.lucene.index.ReadersAndLiveDocs get(org.apache.lucene.index.SegmentInfoPerCommit, boolean)
    {
        org.apache.lucene.index.SegmentInfoPerCommit r1, $r5, $r9, $r14;
        java.util.Map $r2, $r21;
        org.apache.lucene.store.Directory $r24, $r25, $r31, $r35;
        boolean $z0, $z1, z2, $z3, $z4, $z5, $z6;
        org.apache.lucene.index.SegmentInfo $r22, $r30;
        org.apache.lucene.index.ReadersAndLiveDocs $r19, $r26, r38;
        org.apache.lucene.index.IndexWriter $r20, $r23, $r34;
        java.lang.StringBuilder $r7, $r8, $r10, $r11, $r12, $r13, $r15, $r16, $r17, $r28, $r29, $r32, $r33, $r36;
        java.lang.AssertionError $r4, $r6, $r27;
        java.lang.String $r18, $r37;
        org.apache.lucene.index.IndexWriter$ReaderPool r0;
        java.lang.Object $r3;

        r0 := @this: org.apache.lucene.index.IndexWriter$ReaderPool;

        r1 := @parameter0: org.apache.lucene.index.SegmentInfoPerCommit;

        z2 := @parameter1: boolean;

        $z0 = <org.apache.lucene.index.IndexWriter$ReaderPool: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r22 = r1.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $r24 = $r22.<org.apache.lucene.index.SegmentInfo: org.apache.lucene.store.Directory dir>;

        $r23 = r0.<org.apache.lucene.index.IndexWriter$ReaderPool: org.apache.lucene.index.IndexWriter this$0>;

        $r25 = staticinvoke <org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory access$100(org.apache.lucene.index.IndexWriter)>($r23);

        if $r24 == $r25 goto label1;

        $r27 = new java.lang.AssertionError;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("info.dir=");

        $r30 = r1.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $r31 = $r30.<org.apache.lucene.index.SegmentInfo: org.apache.lucene.store.Directory dir>;

        $r32 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" vs ");

        $r34 = r0.<org.apache.lucene.index.IndexWriter$ReaderPool: org.apache.lucene.index.IndexWriter this$0>;

        $r35 = staticinvoke <org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory access$100(org.apache.lucene.index.IndexWriter)>($r34);

        $r36 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.lang.AssertionError: void <init>(java.lang.Object)>($r37);

        throw $r27;

     label1:
        $r2 = r0.<org.apache.lucene.index.IndexWriter$ReaderPool: java.util.Map readerMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r26 = (org.apache.lucene.index.ReadersAndLiveDocs) $r3;

        r38 = $r26;

        if $r26 != null goto label3;

        if z2 != 0 goto label2;

        return null;

     label2:
        $r19 = new org.apache.lucene.index.ReadersAndLiveDocs;

        $r20 = r0.<org.apache.lucene.index.IndexWriter$ReaderPool: org.apache.lucene.index.IndexWriter this$0>;

        specialinvoke $r19.<org.apache.lucene.index.ReadersAndLiveDocs: void <init>(org.apache.lucene.index.IndexWriter,org.apache.lucene.index.SegmentInfoPerCommit)>($r20, r1);

        r38 = $r19;

        $r21 = r0.<org.apache.lucene.index.IndexWriter$ReaderPool: java.util.Map readerMap>;

        interfaceinvoke $r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r19);

        goto label4;

     label3:
        $z1 = <org.apache.lucene.index.IndexWriter$ReaderPool: boolean $assertionsDisabled>;

        if $z1 != 0 goto label4;

        $r5 = $r26.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentInfoPerCommit info>;

        if $r5 == r1 goto label4;

        $r6 = new java.lang.AssertionError;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("rld.info=");

        $r9 = $r26.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" info=");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" isLive?=");

        $r14 = $r26.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $z5 = virtualinvoke r0.<org.apache.lucene.index.IndexWriter$ReaderPool: boolean infoIsLive(org.apache.lucene.index.SegmentInfoPerCommit)>($r14);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z5);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" vs ");

        $z6 = virtualinvoke r0.<org.apache.lucene.index.IndexWriter$ReaderPool: boolean infoIsLive(org.apache.lucene.index.SegmentInfoPerCommit)>(r1);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z6);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>($r18);

        throw $r6;

     label4:
        if z2 == 0 goto label5;

        virtualinvoke r38.<org.apache.lucene.index.ReadersAndLiveDocs: void incRef()>();

     label5:
        $z3 = <org.apache.lucene.index.IndexWriter$ReaderPool: boolean $assertionsDisabled>;

        if $z3 != 0 goto label6;

        $z4 = specialinvoke r0.<org.apache.lucene.index.IndexWriter$ReaderPool: boolean noDups()>();

        if $z4 != 0 goto label6;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label6:
        return r38;
    }

    private boolean noDups()
    {
        java.util.Iterator $r4;
        org.apache.lucene.index.SegmentInfo $r7, $r9;
        java.util.Set $r3;
        org.apache.lucene.index.SegmentInfoPerCommit r6;
        java.lang.AssertionError $r11;
        java.util.HashSet $r0;
        org.apache.lucene.index.IndexWriter$ReaderPool r1;
        java.util.Map $r2;
        java.lang.Object $r5;
        java.lang.String $r8, $r10;
        boolean $z0, $z1, $z2;

        r1 := @this: org.apache.lucene.index.IndexWriter$ReaderPool;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r2 = r1.<org.apache.lucene.index.IndexWriter$ReaderPool: java.util.Map readerMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.lucene.index.SegmentInfoPerCommit) $r5;

        $z1 = <org.apache.lucene.index.IndexWriter$ReaderPool: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $r9 = r6.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $r10 = $r9.<org.apache.lucene.index.SegmentInfo: java.lang.String name>;

        $z2 = interfaceinvoke $r0.<java.util.Set: boolean contains(java.lang.Object)>($r10);

        if $z2 == 0 goto label2;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label2:
        $r7 = r6.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $r8 = $r7.<org.apache.lucene.index.SegmentInfo: java.lang.String name>;

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r8);

        goto label1;

     label3:
        return 1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/index/IndexWriter;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.index.IndexWriter$ReaderPool: boolean $assertionsDisabled> = $z1;

        return;
    }
}
