public class com.hp.hpl.jena.rdf.arp.JenaReader extends java.lang.Object implements com.hp.hpl.jena.rdf.model.RDFReader, com.hp.hpl.jena.rdf.arp.ARPErrorNumbers
{
    private static final java.lang.String saxFeaturesURL;
    private static final java.lang.String saxPropertiesURL;
    private static final java.lang.String apacheFeaturesURL;
    private static final java.lang.String apachePropertiesURL;
    static final java.lang.String arpPropertiesURL;
    static final int arpPropertiesURLLength;
    private final com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser arpf;
    private com.hp.hpl.jena.rdf.model.Model model;
    private com.hp.hpl.jena.rdf.arp.JenaHandler handler;
    private com.hp.hpl.jena.rdf.model.RDFErrorHandler errorHandler;

    public void <init>()
    {
        com.hp.hpl.jena.rdf.model.impl.RDFDefaultErrorHandler $r1;
        com.hp.hpl.jena.rdf.arp.JenaReader r0;
        com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser $r2;

        r0 := @this: com.hp.hpl.jena.rdf.arp.JenaReader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new com.hp.hpl.jena.rdf.model.impl.RDFDefaultErrorHandler;

        specialinvoke $r1.<com.hp.hpl.jena.rdf.model.impl.RDFDefaultErrorHandler: void <init>()>();

        r0.<com.hp.hpl.jena.rdf.arp.JenaReader: com.hp.hpl.jena.rdf.model.RDFErrorHandler errorHandler> = $r1;

        $r2 = staticinvoke <com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser: com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser create()>();

        r0.<com.hp.hpl.jena.rdf.arp.JenaReader: com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser arpf> = $r2;

        return;
    }

    public void read(com.hp.hpl.jena.rdf.model.Model, java.lang.String) throws com.hp.hpl.jena.shared.JenaException
    {
        com.hp.hpl.jena.shared.DoesNotExistException $r12;
        com.hp.hpl.jena.shared.JenaException $r10;
        java.net.URL $r0;
        java.io.IOException $r9;
        java.io.InputStreamReader $r6;
        java.io.FileNotFoundException $r11;
        java.net.URLConnection $r2;
        com.hp.hpl.jena.rdf.model.Model r5;
        com.hp.hpl.jena.rdf.arp.JenaReader r4;
        java.lang.String r1, $r3;
        java.io.InputStream $r7, $r8;

        r4 := @this: com.hp.hpl.jena.rdf.arp.JenaReader;

        r5 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r1 := @parameter1: java.lang.String;

     label1:
        $r0 = new java.net.URL;

        specialinvoke $r0.<java.net.URL: void <init>(java.lang.String)>(r1);

        $r2 = virtualinvoke $r0.<java.net.URL: java.net.URLConnection openConnection()>();

        virtualinvoke $r2.<java.net.URLConnection: void setRequestProperty(java.lang.String,java.lang.String)>("accept", "application/rdf+xml, application/xml; q=0.8, text/xml; q=0.7, application/rss+xml; q=0.3, */*; q=0.2");

        $r3 = virtualinvoke $r2.<java.net.URLConnection: java.lang.String getContentEncoding()>();

        if $r3 != null goto label2;

        $r8 = virtualinvoke $r2.<java.net.URLConnection: java.io.InputStream getInputStream()>();

        virtualinvoke r4.<com.hp.hpl.jena.rdf.arp.JenaReader: void read(com.hp.hpl.jena.rdf.model.Model,java.io.InputStream,java.lang.String)>(r5, $r8, r1);

        goto label3;

     label2:
        $r6 = new java.io.InputStreamReader;

        $r7 = virtualinvoke $r2.<java.net.URLConnection: java.io.InputStream getInputStream()>();

        specialinvoke $r6.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r7, $r3);

        virtualinvoke r4.<com.hp.hpl.jena.rdf.arp.JenaReader: void read(com.hp.hpl.jena.rdf.model.Model,java.io.Reader,java.lang.String)>(r5, $r6, r1);

     label3:
        goto label6;

     label4:
        $r11 := @caughtexception;

        $r12 = new com.hp.hpl.jena.shared.DoesNotExistException;

        specialinvoke $r12.<com.hp.hpl.jena.shared.DoesNotExistException: void <init>(java.lang.String)>(r1);

        throw $r12;

     label5:
        $r9 := @caughtexception;

        $r10 = new com.hp.hpl.jena.shared.JenaException;

        specialinvoke $r10.<com.hp.hpl.jena.shared.JenaException: void <init>(java.lang.Throwable)>($r9);

        throw $r10;

     label6:
        return;

        catch java.io.FileNotFoundException from label1 to label3 with label4;
        catch java.io.IOException from label1 to label3 with label5;
    }

    private static com.hp.hpl.jena.graph.Node convert(com.hp.hpl.jena.rdf.arp.ALiteral)
    {
        com.hp.hpl.jena.datatypes.TypeMapper $r2;
        com.hp.hpl.jena.graph.Node $r5, $r7, $r10;
        com.hp.hpl.jena.datatypes.RDFDatatype $r3;
        java.lang.String $r1, $r4, $r6, $r8, $r9;
        com.hp.hpl.jena.rdf.arp.ALiteral r0;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.rdf.arp.ALiteral;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.arp.ALiteral: java.lang.String getDatatypeURI()>();

        if $r1 != null goto label1;

        $r8 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.arp.ALiteral: java.lang.String toString()>();

        $r9 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.arp.ALiteral: java.lang.String getLang()>();

        $r10 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,boolean)>($r8, $r9, 0);

        return $r10;

     label1:
        $z0 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.arp.ALiteral: boolean isWellFormedXML()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.arp.ALiteral: java.lang.String toString()>();

        $r7 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,boolean)>($r6, null, 1);

        return $r7;

     label2:
        $r2 = staticinvoke <com.hp.hpl.jena.datatypes.TypeMapper: com.hp.hpl.jena.datatypes.TypeMapper getInstance()>();

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.datatypes.TypeMapper: com.hp.hpl.jena.datatypes.RDFDatatype getSafeTypeByName(java.lang.String)>($r1);

        $r4 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.arp.ALiteral: java.lang.String toString()>();

        $r5 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>($r4, null, $r3);

        return $r5;
    }

    private static com.hp.hpl.jena.graph.Node convert(com.hp.hpl.jena.rdf.arp.AResource)
    {
        com.hp.hpl.jena.rdf.arp.AResource r0;
        java.lang.Object $r1;
        com.hp.hpl.jena.graph.Node $r2, $r4, r5;
        java.lang.String $r3;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.rdf.arp.AResource;

        $z0 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.arp.AResource: boolean isAnonymous()>();

        if $z0 != 0 goto label1;

        $r3 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.arp.AResource: java.lang.String getURI()>();

        $r4 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createURI(java.lang.String)>($r3);

        return $r4;

     label1:
        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.arp.AResource: java.lang.Object getUserData()>();

        r5 = (com.hp.hpl.jena.graph.Node) $r1;

        if r5 != null goto label2;

        $r2 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createAnon()>();

        r5 = $r2;

        interfaceinvoke r0.<com.hp.hpl.jena.rdf.arp.AResource: void setUserData(java.lang.Object)>($r2);

     label2:
        return r5;
    }

    static com.hp.hpl.jena.graph.Triple convert(com.hp.hpl.jena.rdf.arp.AResource, com.hp.hpl.jena.rdf.arp.AResource, com.hp.hpl.jena.rdf.arp.AResource)
    {
        com.hp.hpl.jena.rdf.arp.AResource r0, r2, r4;
        com.hp.hpl.jena.graph.Node $r1, $r3, $r5;
        com.hp.hpl.jena.graph.Triple $r6;

        r0 := @parameter0: com.hp.hpl.jena.rdf.arp.AResource;

        r2 := @parameter1: com.hp.hpl.jena.rdf.arp.AResource;

        r4 := @parameter2: com.hp.hpl.jena.rdf.arp.AResource;

        $r1 = staticinvoke <com.hp.hpl.jena.rdf.arp.JenaReader: com.hp.hpl.jena.graph.Node convert(com.hp.hpl.jena.rdf.arp.AResource)>(r0);

        $r3 = staticinvoke <com.hp.hpl.jena.rdf.arp.JenaReader: com.hp.hpl.jena.graph.Node convert(com.hp.hpl.jena.rdf.arp.AResource)>(r2);

        $r5 = staticinvoke <com.hp.hpl.jena.rdf.arp.JenaReader: com.hp.hpl.jena.graph.Node convert(com.hp.hpl.jena.rdf.arp.AResource)>(r4);

        $r6 = staticinvoke <com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Triple create(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r1, $r3, $r5);

        return $r6;
    }

    static com.hp.hpl.jena.graph.Triple convert(com.hp.hpl.jena.rdf.arp.AResource, com.hp.hpl.jena.rdf.arp.AResource, com.hp.hpl.jena.rdf.arp.ALiteral)
    {
        com.hp.hpl.jena.rdf.arp.AResource r0, r2;
        com.hp.hpl.jena.graph.Node $r1, $r3, $r5;
        com.hp.hpl.jena.rdf.arp.ALiteral r4;
        com.hp.hpl.jena.graph.Triple $r6;

        r0 := @parameter0: com.hp.hpl.jena.rdf.arp.AResource;

        r2 := @parameter1: com.hp.hpl.jena.rdf.arp.AResource;

        r4 := @parameter2: com.hp.hpl.jena.rdf.arp.ALiteral;

        $r1 = staticinvoke <com.hp.hpl.jena.rdf.arp.JenaReader: com.hp.hpl.jena.graph.Node convert(com.hp.hpl.jena.rdf.arp.AResource)>(r0);

        $r3 = staticinvoke <com.hp.hpl.jena.rdf.arp.JenaReader: com.hp.hpl.jena.graph.Node convert(com.hp.hpl.jena.rdf.arp.AResource)>(r2);

        $r5 = staticinvoke <com.hp.hpl.jena.rdf.arp.JenaReader: com.hp.hpl.jena.graph.Node convert(com.hp.hpl.jena.rdf.arp.ALiteral)>(r4);

        $r6 = staticinvoke <com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Triple create(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r1, $r3, $r5);

        return $r6;
    }

    private void read(com.hp.hpl.jena.rdf.model.Model, org.xml.sax.InputSource, java.lang.String) throws com.hp.hpl.jena.shared.JenaException
    {
        org.xml.sax.InputSource r4;
        com.hp.hpl.jena.rdf.model.Model r1, $r2, $r6;
        com.hp.hpl.jena.rdf.arp.JenaReader r0;
        java.lang.String r5;
        com.hp.hpl.jena.graph.Graph $r3;

        r0 := @this: com.hp.hpl.jena.rdf.arp.JenaReader;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r4 := @parameter1: org.xml.sax.InputSource;

        r5 := @parameter2: java.lang.String;

        r0.<com.hp.hpl.jena.rdf.arp.JenaReader: com.hp.hpl.jena.rdf.model.Model model> = r1;

        $r2 = r0.<com.hp.hpl.jena.rdf.arp.JenaReader: com.hp.hpl.jena.rdf.model.Model model>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.graph.Graph getGraph()>();

        $r6 = r0.<com.hp.hpl.jena.rdf.arp.JenaReader: com.hp.hpl.jena.rdf.model.Model model>;

        specialinvoke r0.<com.hp.hpl.jena.rdf.arp.JenaReader: void read(com.hp.hpl.jena.graph.Graph,org.xml.sax.InputSource,java.lang.String,com.hp.hpl.jena.rdf.model.Model)>($r3, r4, r5, $r6);

        return;
    }

    private synchronized void read(com.hp.hpl.jena.graph.Graph, org.xml.sax.InputSource, java.lang.String, com.hp.hpl.jena.rdf.model.Model)
    {
        java.lang.Throwable $r15;
        com.hp.hpl.jena.shared.JenaException $r19;
        com.hp.hpl.jena.shared.WrappedIOException $r21;
        com.hp.hpl.jena.rdf.arp.JenaHandler $r6, $r10;
        com.hp.hpl.jena.rdf.arp.JenaReader r5;
        java.lang.String r4;
        com.hp.hpl.jena.graph.Graph r0;
        org.xml.sax.InputSource r3;
        com.hp.hpl.jena.graph.GraphEventManager $r1, $r13, $r16;
        com.hp.hpl.jena.rdf.arp.ARPHandlers $r11;
        com.hp.hpl.jena.graph.GraphEvents $r2, $r14, $r17;
        java.io.IOException $r20;
        com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser $r9, $r12;
        org.xml.sax.SAXException $r18;
        com.hp.hpl.jena.rdf.model.Model r7;
        com.hp.hpl.jena.rdf.model.RDFErrorHandler $r8;

        r5 := @this: com.hp.hpl.jena.rdf.arp.JenaReader;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r3 := @parameter1: org.xml.sax.InputSource;

        r4 := @parameter2: java.lang.String;

        r7 := @parameter3: com.hp.hpl.jena.rdf.model.Model;

     label1:
        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.graph.GraphEventManager getEventManager()>();

        $r2 = <com.hp.hpl.jena.graph.GraphEvents: com.hp.hpl.jena.graph.GraphEvents startRead>;

        interfaceinvoke $r1.<com.hp.hpl.jena.graph.GraphEventManager: void notifyEvent(com.hp.hpl.jena.graph.Graph,java.lang.Object)>(r0, $r2);

        virtualinvoke r3.<org.xml.sax.InputSource: void setSystemId(java.lang.String)>(r4);

        $r6 = new com.hp.hpl.jena.rdf.arp.JenaHandler;

        $r8 = r5.<com.hp.hpl.jena.rdf.arp.JenaReader: com.hp.hpl.jena.rdf.model.RDFErrorHandler errorHandler>;

        specialinvoke $r6.<com.hp.hpl.jena.rdf.arp.JenaHandler: void <init>(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.rdf.model.Model,com.hp.hpl.jena.rdf.model.RDFErrorHandler)>(r0, r7, $r8);

        r5.<com.hp.hpl.jena.rdf.arp.JenaReader: com.hp.hpl.jena.rdf.arp.JenaHandler handler> = $r6;

        $r10 = r5.<com.hp.hpl.jena.rdf.arp.JenaReader: com.hp.hpl.jena.rdf.arp.JenaHandler handler>;

        $r9 = r5.<com.hp.hpl.jena.rdf.arp.JenaReader: com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser arpf>;

        $r11 = virtualinvoke $r9.<com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser: com.hp.hpl.jena.rdf.arp.ARPHandlers getHandlers()>();

        virtualinvoke $r10.<com.hp.hpl.jena.rdf.arp.JenaHandler: void useWith(com.hp.hpl.jena.rdf.arp.ARPHandlers)>($r11);

        $r12 = r5.<com.hp.hpl.jena.rdf.arp.JenaReader: com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser arpf>;

        virtualinvoke $r12.<com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser: void parse(org.xml.sax.InputSource,java.lang.String)>(r3, r4);

     label2:
        $r13 = interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.graph.GraphEventManager getEventManager()>();

        $r14 = <com.hp.hpl.jena.graph.GraphEvents: com.hp.hpl.jena.graph.GraphEvents finishRead>;

        interfaceinvoke $r13.<com.hp.hpl.jena.graph.GraphEventManager: void notifyEvent(com.hp.hpl.jena.graph.Graph,java.lang.Object)>(r0, $r14);

        r5.<com.hp.hpl.jena.rdf.arp.JenaReader: com.hp.hpl.jena.rdf.arp.JenaHandler handler> = null;

        goto label7;

     label3:
        $r20 := @caughtexception;

        $r21 = new com.hp.hpl.jena.shared.WrappedIOException;

        specialinvoke $r21.<com.hp.hpl.jena.shared.WrappedIOException: void <init>(java.io.IOException)>($r20);

        throw $r21;

     label4:
        $r18 := @caughtexception;

        $r19 = new com.hp.hpl.jena.shared.JenaException;

        specialinvoke $r19.<com.hp.hpl.jena.shared.JenaException: void <init>(java.lang.Throwable)>($r18);

        throw $r19;

     label5:
        $r15 := @caughtexception;

     label6:
        $r16 = interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.graph.GraphEventManager getEventManager()>();

        $r17 = <com.hp.hpl.jena.graph.GraphEvents: com.hp.hpl.jena.graph.GraphEvents finishRead>;

        interfaceinvoke $r16.<com.hp.hpl.jena.graph.GraphEventManager: void notifyEvent(com.hp.hpl.jena.graph.Graph,java.lang.Object)>(r0, $r17);

        r5.<com.hp.hpl.jena.rdf.arp.JenaReader: com.hp.hpl.jena.rdf.arp.JenaHandler handler> = null;

        throw $r15;

     label7:
        return;

        catch java.io.IOException from label1 to label2 with label3;
        catch org.xml.sax.SAXException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label6 with label5;
    }

    public void read(com.hp.hpl.jena.rdf.model.Model, java.io.Reader, java.lang.String) throws com.hp.hpl.jena.shared.JenaException
    {
        org.xml.sax.InputSource $r2;
        com.hp.hpl.jena.rdf.model.Model r1;
        com.hp.hpl.jena.rdf.arp.JenaReader r0;
        java.io.Reader r3;
        java.lang.String r4;

        r0 := @this: com.hp.hpl.jena.rdf.arp.JenaReader;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r3 := @parameter1: java.io.Reader;

        r4 := @parameter2: java.lang.String;

        $r2 = new org.xml.sax.InputSource;

        specialinvoke $r2.<org.xml.sax.InputSource: void <init>(java.io.Reader)>(r3);

        specialinvoke r0.<com.hp.hpl.jena.rdf.arp.JenaReader: void read(com.hp.hpl.jena.rdf.model.Model,org.xml.sax.InputSource,java.lang.String)>(r1, $r2, r4);

        return;
    }

    public void read(com.hp.hpl.jena.graph.Graph, java.io.Reader, java.lang.String) throws com.hp.hpl.jena.shared.JenaException
    {
        org.xml.sax.InputSource $r2;
        com.hp.hpl.jena.rdf.arp.JenaReader r0;
        java.io.Reader r3;
        java.lang.String r4;
        com.hp.hpl.jena.graph.Graph r1;

        r0 := @this: com.hp.hpl.jena.rdf.arp.JenaReader;

        r1 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r3 := @parameter1: java.io.Reader;

        r4 := @parameter2: java.lang.String;

        $r2 = new org.xml.sax.InputSource;

        specialinvoke $r2.<org.xml.sax.InputSource: void <init>(java.io.Reader)>(r3);

        specialinvoke r0.<com.hp.hpl.jena.rdf.arp.JenaReader: void read(com.hp.hpl.jena.graph.Graph,org.xml.sax.InputSource,java.lang.String,com.hp.hpl.jena.rdf.model.Model)>(r1, $r2, r4, null);

        return;
    }

    public void read(com.hp.hpl.jena.rdf.model.Model, java.io.InputStream, java.lang.String) throws com.hp.hpl.jena.shared.JenaException
    {
        org.xml.sax.InputSource $r2;
        com.hp.hpl.jena.rdf.model.Model r1;
        com.hp.hpl.jena.rdf.arp.JenaReader r0;
        java.lang.String r4;
        java.io.InputStream r3;

        r0 := @this: com.hp.hpl.jena.rdf.arp.JenaReader;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r3 := @parameter1: java.io.InputStream;

        r4 := @parameter2: java.lang.String;

        $r2 = new org.xml.sax.InputSource;

        specialinvoke $r2.<org.xml.sax.InputSource: void <init>(java.io.InputStream)>(r3);

        specialinvoke r0.<com.hp.hpl.jena.rdf.arp.JenaReader: void read(com.hp.hpl.jena.rdf.model.Model,org.xml.sax.InputSource,java.lang.String)>(r1, $r2, r4);

        return;
    }

    public void read(com.hp.hpl.jena.graph.Graph, java.io.InputStream, java.lang.String)
    {
        org.xml.sax.InputSource $r2;
        com.hp.hpl.jena.rdf.arp.JenaReader r0;
        java.lang.String r4;
        com.hp.hpl.jena.graph.Graph r1;
        java.io.InputStream r3;

        r0 := @this: com.hp.hpl.jena.rdf.arp.JenaReader;

        r1 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r3 := @parameter1: java.io.InputStream;

        r4 := @parameter2: java.lang.String;

        $r2 = new org.xml.sax.InputSource;

        specialinvoke $r2.<org.xml.sax.InputSource: void <init>(java.io.InputStream)>(r3);

        specialinvoke r0.<com.hp.hpl.jena.rdf.arp.JenaReader: void read(com.hp.hpl.jena.graph.Graph,org.xml.sax.InputSource,java.lang.String,com.hp.hpl.jena.rdf.model.Model)>(r1, $r2, r4, null);

        return;
    }

    public com.hp.hpl.jena.rdf.model.RDFErrorHandler setErrorHandler(com.hp.hpl.jena.rdf.model.RDFErrorHandler)
    {
        com.hp.hpl.jena.rdf.arp.JenaHandler r3;
        com.hp.hpl.jena.rdf.arp.JenaReader r0;
        com.hp.hpl.jena.rdf.model.RDFErrorHandler r1, r2;

        r0 := @this: com.hp.hpl.jena.rdf.arp.JenaReader;

        r2 := @parameter0: com.hp.hpl.jena.rdf.model.RDFErrorHandler;

        r1 = r0.<com.hp.hpl.jena.rdf.arp.JenaReader: com.hp.hpl.jena.rdf.model.RDFErrorHandler errorHandler>;

        r0.<com.hp.hpl.jena.rdf.arp.JenaReader: com.hp.hpl.jena.rdf.model.RDFErrorHandler errorHandler> = r2;

        r3 = r0.<com.hp.hpl.jena.rdf.arp.JenaReader: com.hp.hpl.jena.rdf.arp.JenaHandler handler>;

        if r3 == null goto label1;

        virtualinvoke r3.<com.hp.hpl.jena.rdf.arp.JenaHandler: void setErrorHandler(com.hp.hpl.jena.rdf.model.RDFErrorHandler)>(r2);

     label1:
        return r1;
    }

    public java.lang.Object setProperty(java.lang.String, java.lang.Object) throws com.hp.hpl.jena.shared.JenaException
    {
        org.xml.sax.SAXNotSupportedException $r18, $r28, $r34, $r38, $r44;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.apache.xerces.parsers.SAXParser $r5, $r7, $r10, $r12;
        com.hp.hpl.jena.shared.UnknownPropertyException $r26, $r32, $r36, $r42;
        java.lang.StringBuilder $r19, $r21, $r22, $r23;
        com.hp.hpl.jena.shared.JenaException $r17, $r29, $r39;
        java.lang.ClassCastException $r16;
        org.xml.sax.SAXNotRecognizedException $r25, $r31, $r35, $r41;
        int $i0;
        com.hp.hpl.jena.rdf.arp.JenaReader r2;
        java.lang.Boolean $r8, $r13, r46;
        java.lang.String r1, $r14, $r24;
        com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser $r4, $r6, $r9, $r11;
        com.hp.hpl.jena.rdf.model.RDFErrorHandler $r20, $r27, $r30, $r33, $r37, $r40, $r43;
        java.lang.Object r0, $r3, $r15, r45;

        r2 := @this: com.hp.hpl.jena.rdf.arp.JenaReader;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Object;

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("http:");

        if $z0 == 0 goto label22;

        $z1 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("http://jena.hpl.hp.com/arp/properties/");

        if $z1 == 0 goto label01;

        $i0 = <com.hp.hpl.jena.rdf.arp.JenaReader: int arpPropertiesURLLength>;

        $r14 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i0);

        $r15 = specialinvoke r2.<com.hp.hpl.jena.rdf.arp.JenaReader: java.lang.Object setArpProperty(java.lang.String,java.lang.Object)>($r14, r0);

        return $r15;

     label01:
        $z2 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("http://xml.org/sax/properties/");

        if $z2 != 0 goto label02;

        $z3 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("http://apache.org/xml/properties/");

        if $z3 == 0 goto label11;

     label02:
        $r4 = r2.<com.hp.hpl.jena.rdf.arp.JenaReader: com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser arpf>;

        $r5 = virtualinvoke $r4.<com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser: org.apache.xerces.parsers.SAXParser getSAXParser()>();

        r45 = virtualinvoke $r5.<org.apache.xerces.parsers.SAXParser: java.lang.Object getProperty(java.lang.String)>(r1);

     label03:
        goto label06;

     label04:
        $r44 := @caughtexception;

        r45 = null;

        goto label06;

     label05:
        $r41 := @caughtexception;

        $r43 = r2.<com.hp.hpl.jena.rdf.arp.JenaReader: com.hp.hpl.jena.rdf.model.RDFErrorHandler errorHandler>;

        $r42 = new com.hp.hpl.jena.shared.UnknownPropertyException;

        specialinvoke $r42.<com.hp.hpl.jena.shared.UnknownPropertyException: void <init>(java.lang.String)>(r1);

        interfaceinvoke $r43.<com.hp.hpl.jena.rdf.model.RDFErrorHandler: void error(java.lang.Exception)>($r42);

        return null;

     label06:
        $r6 = r2.<com.hp.hpl.jena.rdf.arp.JenaReader: com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser arpf>;

        $r7 = virtualinvoke $r6.<com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser: org.apache.xerces.parsers.SAXParser getSAXParser()>();

        virtualinvoke $r7.<org.apache.xerces.parsers.SAXParser: void setProperty(java.lang.String,java.lang.Object)>(r1, r0);

     label07:
        goto label10;

     label08:
        $r38 := @caughtexception;

        $r40 = r2.<com.hp.hpl.jena.rdf.arp.JenaReader: com.hp.hpl.jena.rdf.model.RDFErrorHandler errorHandler>;

        $r39 = new com.hp.hpl.jena.shared.JenaException;

        specialinvoke $r39.<com.hp.hpl.jena.shared.JenaException: void <init>(java.lang.Throwable)>($r38);

        interfaceinvoke $r40.<com.hp.hpl.jena.rdf.model.RDFErrorHandler: void error(java.lang.Exception)>($r39);

        goto label10;

     label09:
        $r35 := @caughtexception;

        $r37 = r2.<com.hp.hpl.jena.rdf.arp.JenaReader: com.hp.hpl.jena.rdf.model.RDFErrorHandler errorHandler>;

        $r36 = new com.hp.hpl.jena.shared.UnknownPropertyException;

        specialinvoke $r36.<com.hp.hpl.jena.shared.UnknownPropertyException: void <init>(java.lang.String)>(r1);

        interfaceinvoke $r37.<com.hp.hpl.jena.rdf.model.RDFErrorHandler: void error(java.lang.Exception)>($r36);

        return null;

     label10:
        return r45;

     label11:
        $z4 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("http://xml.org/sax/features/");

        if $z4 != 0 goto label12;

        $z7 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("http://apache.org/xml/features/");

        if $z7 == 0 goto label22;

     label12:
        $r8 = new java.lang.Boolean;

        $r9 = r2.<com.hp.hpl.jena.rdf.arp.JenaReader: com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser arpf>;

        $r10 = virtualinvoke $r9.<com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser: org.apache.xerces.parsers.SAXParser getSAXParser()>();

        $z5 = virtualinvoke $r10.<org.apache.xerces.parsers.SAXParser: boolean getFeature(java.lang.String)>(r1);

        specialinvoke $r8.<java.lang.Boolean: void <init>(boolean)>($z5);

        r46 = $r8;

     label13:
        goto label16;

     label14:
        $r34 := @caughtexception;

        r46 = null;

        goto label16;

     label15:
        $r31 := @caughtexception;

        $r33 = r2.<com.hp.hpl.jena.rdf.arp.JenaReader: com.hp.hpl.jena.rdf.model.RDFErrorHandler errorHandler>;

        $r32 = new com.hp.hpl.jena.shared.UnknownPropertyException;

        specialinvoke $r32.<com.hp.hpl.jena.shared.UnknownPropertyException: void <init>(java.lang.String)>(r1);

        interfaceinvoke $r33.<com.hp.hpl.jena.rdf.model.RDFErrorHandler: void error(java.lang.Exception)>($r32);

        return null;

     label16:
        $r11 = r2.<com.hp.hpl.jena.rdf.arp.JenaReader: com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser arpf>;

        $r12 = virtualinvoke $r11.<com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser: org.apache.xerces.parsers.SAXParser getSAXParser()>();

        $r13 = (java.lang.Boolean) r0;

        $z6 = virtualinvoke $r13.<java.lang.Boolean: boolean booleanValue()>();

        virtualinvoke $r12.<org.apache.xerces.parsers.SAXParser: void setFeature(java.lang.String,boolean)>(r1, $z6);

     label17:
        goto label21;

     label18:
        $r28 := @caughtexception;

        $r30 = r2.<com.hp.hpl.jena.rdf.arp.JenaReader: com.hp.hpl.jena.rdf.model.RDFErrorHandler errorHandler>;

        $r29 = new com.hp.hpl.jena.shared.JenaException;

        specialinvoke $r29.<com.hp.hpl.jena.shared.JenaException: void <init>(java.lang.Throwable)>($r28);

        interfaceinvoke $r30.<com.hp.hpl.jena.rdf.model.RDFErrorHandler: void error(java.lang.Exception)>($r29);

        goto label21;

     label19:
        $r25 := @caughtexception;

        $r27 = r2.<com.hp.hpl.jena.rdf.arp.JenaReader: com.hp.hpl.jena.rdf.model.RDFErrorHandler errorHandler>;

        $r26 = new com.hp.hpl.jena.shared.UnknownPropertyException;

        specialinvoke $r26.<com.hp.hpl.jena.shared.UnknownPropertyException: void <init>(java.lang.String)>(r1);

        interfaceinvoke $r27.<com.hp.hpl.jena.rdf.model.RDFErrorHandler: void error(java.lang.Exception)>($r26);

        return null;

     label20:
        $r16 := @caughtexception;

        $r20 = r2.<com.hp.hpl.jena.rdf.arp.JenaReader: com.hp.hpl.jena.rdf.model.RDFErrorHandler errorHandler>;

        $r17 = new com.hp.hpl.jena.shared.JenaException;

        $r18 = new org.xml.sax.SAXNotSupportedException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Feature: \'");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' can only have a boolean value.");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<org.xml.sax.SAXNotSupportedException: void <init>(java.lang.String)>($r24);

        specialinvoke $r17.<com.hp.hpl.jena.shared.JenaException: void <init>(java.lang.Throwable)>($r18);

        interfaceinvoke $r20.<com.hp.hpl.jena.rdf.model.RDFErrorHandler: void error(java.lang.Exception)>($r17);

     label21:
        return r46;

     label22:
        $r3 = specialinvoke r2.<com.hp.hpl.jena.rdf.arp.JenaReader: java.lang.Object setArpProperty(java.lang.String,java.lang.Object)>(r1, r0);

        return $r3;

        catch org.xml.sax.SAXNotSupportedException from label02 to label03 with label04;
        catch org.xml.sax.SAXNotRecognizedException from label02 to label03 with label05;
        catch org.xml.sax.SAXNotSupportedException from label06 to label07 with label08;
        catch org.xml.sax.SAXNotRecognizedException from label06 to label07 with label09;
        catch org.xml.sax.SAXNotSupportedException from label12 to label13 with label14;
        catch org.xml.sax.SAXNotRecognizedException from label12 to label13 with label15;
        catch org.xml.sax.SAXNotSupportedException from label16 to label17 with label18;
        catch org.xml.sax.SAXNotRecognizedException from label16 to label17 with label19;
        catch java.lang.ClassCastException from label16 to label17 with label20;
    }

    private java.lang.Object setArpProperty(java.lang.String, java.lang.Object)
    {
        com.hp.hpl.jena.rdf.arp.JenaReader r0;
        com.hp.hpl.jena.rdf.model.RDFErrorHandler $r4;
        java.lang.Object r3, $r5;
        java.lang.String r2;
        com.hp.hpl.jena.rdf.arp.ARPOptions $r1;

        r0 := @this: com.hp.hpl.jena.rdf.arp.JenaReader;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Object;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.JenaReader: com.hp.hpl.jena.rdf.arp.ARPOptions getOptions()>();

        $r4 = r0.<com.hp.hpl.jena.rdf.arp.JenaReader: com.hp.hpl.jena.rdf.model.RDFErrorHandler errorHandler>;

        $r5 = staticinvoke <com.hp.hpl.jena.rdf.arp.JenaReader: java.lang.Object processArpOptions(com.hp.hpl.jena.rdf.arp.ARPOptions,java.lang.String,java.lang.Object,com.hp.hpl.jena.rdf.model.RDFErrorHandler)>($r1, r2, r3, $r4);

        return $r5;
    }

    public com.hp.hpl.jena.rdf.arp.ARPOptions getOptions()
    {
        com.hp.hpl.jena.rdf.arp.JenaReader r0;
        com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser $r1;
        com.hp.hpl.jena.rdf.arp.ARPOptions $r2;

        r0 := @this: com.hp.hpl.jena.rdf.arp.JenaReader;

        $r1 = r0.<com.hp.hpl.jena.rdf.arp.JenaReader: com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser arpf>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser: com.hp.hpl.jena.rdf.arp.ARPOptions getOptions()>();

        return $r2;
    }

    public void setOptionsWith(com.hp.hpl.jena.rdf.arp.ARPOptions)
    {
        com.hp.hpl.jena.rdf.arp.JenaReader r0;
        com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser $r2;
        com.hp.hpl.jena.rdf.arp.ARPOptions r1;

        r0 := @this: com.hp.hpl.jena.rdf.arp.JenaReader;

        r1 := @parameter0: com.hp.hpl.jena.rdf.arp.ARPOptions;

        $r2 = r0.<com.hp.hpl.jena.rdf.arp.JenaReader: com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser arpf>;

        virtualinvoke $r2.<com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser: void setOptionsWith(com.hp.hpl.jena.rdf.arp.ARPOptions)>(r1);

        return;
    }

    static java.lang.Object processArpOptions(com.hp.hpl.jena.rdf.arp.ARPOptions, java.lang.String, java.lang.Object, com.hp.hpl.jena.rdf.model.RDFErrorHandler)
    {
        org.apache.jena.iri.IRIFactory $r9, $r11, $r12, $r13;
        java.lang.Integer $r3, $r38, $r39, $r42;
        com.hp.hpl.jena.shared.UnknownPropertyException $r44;
        java.lang.StringBuilder $r27, $r28, $r29, $r31, $r40;
        java.lang.String $r0, $r5, $r6, $r18, $r21, r22, r24, $r30, $r32;
        com.hp.hpl.jena.rdf.arp.ARPOptions r2;
        java.util.Locale $r20;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i9;
        java.lang.Boolean $r17, $r35, $r37;
        java.lang.IllegalArgumentException $r34, $r36, $r41, $r43;
        com.hp.hpl.jena.rdf.model.RDFErrorHandler r1;
        java.lang.Object r23;

        r2 := @parameter0: com.hp.hpl.jena.rdf.arp.ARPOptions;

        r22 := @parameter1: java.lang.String;

        r23 := @parameter2: java.lang.Object;

        r1 := @parameter3: com.hp.hpl.jena.rdf.model.RDFErrorHandler;

        $r0 = virtualinvoke r22.<java.lang.String: java.lang.String toUpperCase()>();

        if r23 != null goto label01;

        r23 = "";

     label01:
        $z0 = r23 instanceof java.lang.String;

        if $z0 == 0 goto label02;

        $r21 = (java.lang.String) r23;

        $r20 = <java.util.Locale: java.util.Locale ENGLISH>;

        r23 = virtualinvoke $r21.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r20);

     label02:
        $z1 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("ERROR-MODE");

        if $z1 == 0 goto label10;

        $z18 = r23 instanceof java.lang.String;

        if $z18 == 0 goto label09;

        r24 = (java.lang.String) r23;

        $z19 = virtualinvoke r24.<java.lang.String: boolean equals(java.lang.Object)>("LAX");

        if $z19 == 0 goto label03;

        virtualinvoke r2.<com.hp.hpl.jena.rdf.arp.ARPOptions: void setLaxErrorMode()>();

        return null;

     label03:
        $z20 = virtualinvoke r24.<java.lang.String: boolean equals(java.lang.Object)>("DEFAULT");

        if $z20 == 0 goto label04;

        virtualinvoke r2.<com.hp.hpl.jena.rdf.arp.ARPOptions: void setDefaultErrorMode()>();

        return null;

     label04:
        $z21 = virtualinvoke r24.<java.lang.String: boolean equals(java.lang.Object)>("STRICT");

        if $z21 == 0 goto label05;

        virtualinvoke r2.<com.hp.hpl.jena.rdf.arp.ARPOptions: void setStrictErrorMode()>();

        return null;

     label05:
        $z22 = virtualinvoke r24.<java.lang.String: boolean equals(java.lang.Object)>("STRICT-WARNING");

        if $z22 == 0 goto label06;

        virtualinvoke r2.<com.hp.hpl.jena.rdf.arp.ARPOptions: void setStrictErrorMode(int)>(1);

        return null;

     label06:
        $z23 = virtualinvoke r24.<java.lang.String: boolean equals(java.lang.Object)>("STRICT-FATAL");

        if $z23 == 0 goto label07;

        virtualinvoke r2.<com.hp.hpl.jena.rdf.arp.ARPOptions: void setStrictErrorMode(int)>(3);

        return null;

     label07:
        $z24 = virtualinvoke r24.<java.lang.String: boolean equals(java.lang.Object)>("STRICT-IGNORE");

        if $z24 == 0 goto label08;

        virtualinvoke r2.<com.hp.hpl.jena.rdf.arp.ARPOptions: void setStrictErrorMode(int)>(0);

        return null;

     label08:
        $z25 = virtualinvoke r24.<java.lang.String: boolean equals(java.lang.Object)>("STRICT-ERROR");

        if $z25 == 0 goto label09;

        virtualinvoke r2.<com.hp.hpl.jena.rdf.arp.ARPOptions: void setStrictErrorMode(int)>(2);

        return null;

     label09:
        $r34 = new java.lang.IllegalArgumentException;

        specialinvoke $r34.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Property \"ERROR-MODE\" takes the following values: \"default\", \"lax\", \"strict\", \"strict-ignore\", \"strict-warning\", \"strict-error\", \"strict.error\".");

        interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.RDFErrorHandler: void error(java.lang.Exception)>($r34);

        return null;

     label10:
        $z2 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("EMBEDDING");

        if $z2 == 0 goto label13;

        $z13 = r23 instanceof java.lang.String;

        if $z13 == 0 goto label11;

        $r18 = (java.lang.String) r23;

        r23 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r18);

     label11:
        $z14 = r23 instanceof java.lang.Boolean;

        if $z14 == 0 goto label12;

        $r35 = new java.lang.Boolean;

        $r17 = (java.lang.Boolean) r23;

        $z16 = virtualinvoke $r17.<java.lang.Boolean: boolean booleanValue()>();

        $z17 = virtualinvoke r2.<com.hp.hpl.jena.rdf.arp.ARPOptions: boolean setEmbedding(boolean)>($z16);

        specialinvoke $r35.<java.lang.Boolean: void <init>(boolean)>($z17);

        return $r35;

     label12:
        $r36 = new java.lang.IllegalArgumentException;

        specialinvoke $r36.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Property \"EMBEDDING\" requires a boolean value.");

        interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.RDFErrorHandler: void error(java.lang.Exception)>($r36);

        $z15 = virtualinvoke r2.<com.hp.hpl.jena.rdf.arp.ARPOptions: boolean setEmbedding(boolean)>(0);

        virtualinvoke r2.<com.hp.hpl.jena.rdf.arp.ARPOptions: boolean setEmbedding(boolean)>($z15);

        $r37 = new java.lang.Boolean;

        specialinvoke $r37.<java.lang.Boolean: void <init>(boolean)>($z15);

        return $r37;

     label13:
        $z3 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("ERR_");

        if $z3 != 0 goto label14;

        $z11 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("IGN_");

        if $z11 != 0 goto label14;

        $z12 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("WARN_");

        if $z12 == 0 goto label22;

     label14:
        $i4 = staticinvoke <com.hp.hpl.jena.rdf.arp.ParseException: int errorCode(java.lang.String)>($r0);

        $i7 = (int) -1;

        if $i4 != $i7 goto label15;

        goto label22;

     label15:
        $z4 = r23 instanceof java.lang.String;

        if $z4 == 0 goto label19;

        $r5 = (java.lang.String) r23;

        $z6 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("EM_");

        if $z6 != 0 goto label16;

        goto label21;

     label16:
        $r6 = (java.lang.String) r23;

        $i2 = staticinvoke <com.hp.hpl.jena.rdf.arp.ParseException: int errorCode(java.lang.String)>($r6);

        $i9 = (int) -1;

        if $i2 != $i9 goto label17;

        goto label18;

     label17:
        $i3 = virtualinvoke r2.<com.hp.hpl.jena.rdf.arp.ARPOptions: int setErrorMode(int,int)>($i4, $i2);

        $r38 = new java.lang.Integer;

        specialinvoke $r38.<java.lang.Integer: void <init>(int)>($i3);

        return $r38;

     label18:
        goto label21;

     label19:
        $z5 = r23 instanceof java.lang.Integer;

        if $z5 == 0 goto label21;

        $r3 = (java.lang.Integer) r23;

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        tableswitch($i0)
        {
            case 0: goto label20;
            case 1: goto label20;
            case 2: goto label20;
            case 3: goto label20;
            default: goto label21;
        };

     label20:
        $i1 = virtualinvoke r2.<com.hp.hpl.jena.rdf.arp.ARPOptions: int setErrorMode(int,int)>($i4, $i0);

        $r39 = new java.lang.Integer;

        specialinvoke $r39.<java.lang.Integer: void <init>(int)>($i1);

        return $r39;

     label21:
        $r41 = new java.lang.IllegalArgumentException;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Property \"");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" cannot have value: ");

        $r30 = virtualinvoke r23.<java.lang.Object: java.lang.String toString()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r41.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r32);

        interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.RDFErrorHandler: void error(java.lang.Exception)>($r41);

        $i5 = virtualinvoke r2.<com.hp.hpl.jena.rdf.arp.ARPOptions: int setErrorMode(int,int)>($i4, 2);

        virtualinvoke r2.<com.hp.hpl.jena.rdf.arp.ARPOptions: int setErrorMode(int,int)>($i4, $i5);

        $r42 = new java.lang.Integer;

        specialinvoke $r42.<java.lang.Integer: void <init>(int)>($i5);

        return $r42;

     label22:
        $z7 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("IRI-RULES");

        if $z7 == 0 goto label27;

        $r9 = virtualinvoke r2.<com.hp.hpl.jena.rdf.arp.ARPOptions: org.apache.jena.iri.IRIFactory getIRIFactory()>();

        $z8 = virtualinvoke r23.<java.lang.Object: boolean equals(java.lang.Object)>("STRICT");

        if $z8 == 0 goto label23;

        $r13 = staticinvoke <org.apache.jena.iri.IRIFactory: org.apache.jena.iri.IRIFactory semanticWebImplementation()>();

        virtualinvoke r2.<com.hp.hpl.jena.rdf.arp.ARPOptions: void setIRIFactory(org.apache.jena.iri.IRIFactory)>($r13);

        goto label26;

     label23:
        $z9 = virtualinvoke r23.<java.lang.Object: boolean equals(java.lang.Object)>("IRI");

        if $z9 == 0 goto label24;

        $r12 = staticinvoke <org.apache.jena.iri.IRIFactory: org.apache.jena.iri.IRIFactory iriImplementation()>();

        virtualinvoke r2.<com.hp.hpl.jena.rdf.arp.ARPOptions: void setIRIFactory(org.apache.jena.iri.IRIFactory)>($r12);

        goto label26;

     label24:
        $z10 = virtualinvoke r23.<java.lang.Object: boolean equals(java.lang.Object)>("LAX");

        if $z10 == 0 goto label25;

        $r11 = staticinvoke <org.apache.jena.iri.IRIFactory: org.apache.jena.iri.IRIFactory jenaImplementation()>();

        virtualinvoke r2.<com.hp.hpl.jena.rdf.arp.ARPOptions: void setIRIFactory(org.apache.jena.iri.IRIFactory)>($r11);

        goto label26;

     label25:
        $r43 = new java.lang.IllegalArgumentException;

        specialinvoke $r43.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Property \"IRI-RULES\" requires one of \'STRICT\', \'IRI\' or \'LAX\'");

        interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.RDFErrorHandler: void error(java.lang.Exception)>($r43);

     label26:
        return $r9;

     label27:
        $r44 = new com.hp.hpl.jena.shared.UnknownPropertyException;

        specialinvoke $r44.<com.hp.hpl.jena.shared.UnknownPropertyException: void <init>(java.lang.String)>($r0);

        interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.RDFErrorHandler: void error(java.lang.Exception)>($r44);

        return null;
    }

    static void <clinit>()
    {
        int $i0;
        java.lang.String $r0;

        <com.hp.hpl.jena.rdf.arp.JenaReader: java.lang.String arpPropertiesURL> = "http://jena.hpl.hp.com/arp/properties/";

        <com.hp.hpl.jena.rdf.arp.JenaReader: java.lang.String apachePropertiesURL> = "http://apache.org/xml/properties/";

        <com.hp.hpl.jena.rdf.arp.JenaReader: java.lang.String apacheFeaturesURL> = "http://apache.org/xml/features/";

        <com.hp.hpl.jena.rdf.arp.JenaReader: java.lang.String saxPropertiesURL> = "http://xml.org/sax/properties/";

        <com.hp.hpl.jena.rdf.arp.JenaReader: java.lang.String saxFeaturesURL> = "http://xml.org/sax/features/";

        $r0 = "http://jena.hpl.hp.com/arp/properties/";

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        <com.hp.hpl.jena.rdf.arp.JenaReader: int arpPropertiesURLLength> = $i0;

        return;
    }
}
