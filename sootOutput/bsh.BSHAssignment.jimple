class bsh.BSHAssignment extends bsh.SimpleNode implements bsh.ParserConstants
{
    public int operator;

    void <init>(int)
    {
        int i0;
        bsh.BSHAssignment r0;

        r0 := @this: bsh.BSHAssignment;

        i0 := @parameter0: int;

        specialinvoke r0.<bsh.SimpleNode: void <init>(int)>(i0);

        return;
    }

    public java.lang.Object eval(bsh.CallStack, bsh.Interpreter) throws bsh.EvalError
    {
        bsh.SimpleNode $r34;
        bsh.LHS $r5;
        boolean $z0;
        bsh.Interpreter r3;
        bsh.InterpreterError $r32, $r35, $r36;
        bsh.Node $r1, $r6;
        bsh.UtilEvalError $r37, $r39;
        bsh.CallStack r4;
        int $i0, $i1;
        bsh.EvalError $r33, $r38, $r40;
        bsh.Primitive $r8;
        bsh.BSHAssignment r0;
        bsh.BSHPrimaryExpression r2;
        java.lang.Object $r7, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, r41;

        r0 := @this: bsh.BSHAssignment;

        r4 := @parameter0: bsh.CallStack;

        r3 := @parameter1: bsh.Interpreter;

        $r1 = virtualinvoke r0.<bsh.BSHAssignment: bsh.Node jjtGetChild(int)>(0);

        r2 = (bsh.BSHPrimaryExpression) $r1;

        if r2 != null goto label01;

        $r36 = new bsh.InterpreterError;

        specialinvoke $r36.<bsh.InterpreterError: void <init>(java.lang.String)>("Error, null LHSnode");

        throw $r36;

     label01:
        $z0 = virtualinvoke r3.<bsh.Interpreter: boolean getStrictJava()>();

        $r5 = virtualinvoke r2.<bsh.BSHPrimaryExpression: bsh.LHS toLHS(bsh.CallStack,bsh.Interpreter)>(r4, r3);

        if $r5 != null goto label02;

        $r35 = new bsh.InterpreterError;

        specialinvoke $r35.<bsh.InterpreterError: void <init>(java.lang.String)>("Error, null LHS");

        throw $r35;

     label02:
        r41 = null;

        $i0 = r0.<bsh.BSHAssignment: int operator>;

        if $i0 == 81 goto label06;

     label03:
        r41 = virtualinvoke $r5.<bsh.LHS: java.lang.Object getValue()>();

     label04:
        goto label06;

     label05:
        $r39 := @caughtexception;

        $r40 = virtualinvoke $r39.<bsh.UtilEvalError: bsh.EvalError toEvalError(bsh.SimpleNode,bsh.CallStack)>(r0, r4);

        throw $r40;

     label06:
        $r6 = virtualinvoke r0.<bsh.BSHAssignment: bsh.Node jjtGetChild(int)>(1);

        $r34 = (bsh.SimpleNode) $r6;

        $r7 = virtualinvoke $r34.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>(r4, r3);

        $r8 = <bsh.Primitive: bsh.Primitive VOID>;

        if $r7 != $r8 goto label07;

        $r33 = new bsh.EvalError;

        specialinvoke $r33.<bsh.EvalError: void <init>(java.lang.String,bsh.SimpleNode,bsh.CallStack)>("Void assignment.", r0, r4);

        throw $r33;

     label07:
        $i1 = r0.<bsh.BSHAssignment: int operator>;

        tableswitch($i1)
        {
            case 81: goto label08;
            case 82: goto label32;
            case 83: goto label32;
            case 84: goto label32;
            case 85: goto label32;
            case 86: goto label32;
            case 87: goto label32;
            case 88: goto label32;
            case 89: goto label32;
            case 90: goto label32;
            case 91: goto label32;
            case 92: goto label32;
            case 93: goto label32;
            case 94: goto label32;
            case 95: goto label32;
            case 96: goto label32;
            case 97: goto label32;
            case 98: goto label32;
            case 99: goto label32;
            case 100: goto label32;
            case 101: goto label32;
            case 102: goto label32;
            case 103: goto label32;
            case 104: goto label32;
            case 105: goto label32;
            case 106: goto label32;
            case 107: goto label32;
            case 108: goto label32;
            case 109: goto label32;
            case 110: goto label32;
            case 111: goto label32;
            case 112: goto label32;
            case 113: goto label32;
            case 114: goto label32;
            case 115: goto label32;
            case 116: goto label32;
            case 117: goto label32;
            case 118: goto label10;
            case 119: goto label12;
            case 120: goto label14;
            case 121: goto label16;
            case 122: goto label18;
            case 123: goto label18;
            case 124: goto label20;
            case 125: goto label20;
            case 126: goto label22;
            case 127: goto label24;
            case 128: goto label26;
            case 129: goto label26;
            case 130: goto label28;
            case 131: goto label28;
            case 132: goto label30;
            case 133: goto label30;
            default: goto label32;
        };

     label08:
        $r31 = virtualinvoke $r5.<bsh.LHS: java.lang.Object assign(java.lang.Object,boolean)>($r7, $z0);

     label09:
        return $r31;

     label10:
        $r29 = specialinvoke r0.<bsh.BSHAssignment: java.lang.Object operation(java.lang.Object,java.lang.Object,int)>(r41, $r7, 102);

        $r30 = virtualinvoke $r5.<bsh.LHS: java.lang.Object assign(java.lang.Object,boolean)>($r29, $z0);

     label11:
        return $r30;

     label12:
        $r27 = specialinvoke r0.<bsh.BSHAssignment: java.lang.Object operation(java.lang.Object,java.lang.Object,int)>(r41, $r7, 103);

        $r28 = virtualinvoke $r5.<bsh.LHS: java.lang.Object assign(java.lang.Object,boolean)>($r27, $z0);

     label13:
        return $r28;

     label14:
        $r25 = specialinvoke r0.<bsh.BSHAssignment: java.lang.Object operation(java.lang.Object,java.lang.Object,int)>(r41, $r7, 104);

        $r26 = virtualinvoke $r5.<bsh.LHS: java.lang.Object assign(java.lang.Object,boolean)>($r25, $z0);

     label15:
        return $r26;

     label16:
        $r23 = specialinvoke r0.<bsh.BSHAssignment: java.lang.Object operation(java.lang.Object,java.lang.Object,int)>(r41, $r7, 105);

        $r24 = virtualinvoke $r5.<bsh.LHS: java.lang.Object assign(java.lang.Object,boolean)>($r23, $z0);

     label17:
        return $r24;

     label18:
        $r21 = specialinvoke r0.<bsh.BSHAssignment: java.lang.Object operation(java.lang.Object,java.lang.Object,int)>(r41, $r7, 106);

        $r22 = virtualinvoke $r5.<bsh.LHS: java.lang.Object assign(java.lang.Object,boolean)>($r21, $z0);

     label19:
        return $r22;

     label20:
        $r19 = specialinvoke r0.<bsh.BSHAssignment: java.lang.Object operation(java.lang.Object,java.lang.Object,int)>(r41, $r7, 108);

        $r20 = virtualinvoke $r5.<bsh.LHS: java.lang.Object assign(java.lang.Object,boolean)>($r19, $z0);

     label21:
        return $r20;

     label22:
        $r17 = specialinvoke r0.<bsh.BSHAssignment: java.lang.Object operation(java.lang.Object,java.lang.Object,int)>(r41, $r7, 110);

        $r18 = virtualinvoke $r5.<bsh.LHS: java.lang.Object assign(java.lang.Object,boolean)>($r17, $z0);

     label23:
        return $r18;

     label24:
        $r15 = specialinvoke r0.<bsh.BSHAssignment: java.lang.Object operation(java.lang.Object,java.lang.Object,int)>(r41, $r7, 111);

        $r16 = virtualinvoke $r5.<bsh.LHS: java.lang.Object assign(java.lang.Object,boolean)>($r15, $z0);

     label25:
        return $r16;

     label26:
        $r13 = specialinvoke r0.<bsh.BSHAssignment: java.lang.Object operation(java.lang.Object,java.lang.Object,int)>(r41, $r7, 112);

        $r14 = virtualinvoke $r5.<bsh.LHS: java.lang.Object assign(java.lang.Object,boolean)>($r13, $z0);

     label27:
        return $r14;

     label28:
        $r11 = specialinvoke r0.<bsh.BSHAssignment: java.lang.Object operation(java.lang.Object,java.lang.Object,int)>(r41, $r7, 114);

        $r12 = virtualinvoke $r5.<bsh.LHS: java.lang.Object assign(java.lang.Object,boolean)>($r11, $z0);

     label29:
        return $r12;

     label30:
        $r9 = specialinvoke r0.<bsh.BSHAssignment: java.lang.Object operation(java.lang.Object,java.lang.Object,int)>(r41, $r7, 116);

        $r10 = virtualinvoke $r5.<bsh.LHS: java.lang.Object assign(java.lang.Object,boolean)>($r9, $z0);

     label31:
        return $r10;

     label32:
        $r32 = new bsh.InterpreterError;

        specialinvoke $r32.<bsh.InterpreterError: void <init>(java.lang.String)>("unimplemented operator in assignment BSH");

        throw $r32;

     label33:
        $r37 := @caughtexception;

        $r38 = virtualinvoke $r37.<bsh.UtilEvalError: bsh.EvalError toEvalError(bsh.SimpleNode,bsh.CallStack)>(r0, r4);

        throw $r38;

        catch bsh.UtilEvalError from label03 to label04 with label05;
        catch bsh.UtilEvalError from label07 to label09 with label33;
        catch bsh.UtilEvalError from label10 to label11 with label33;
        catch bsh.UtilEvalError from label12 to label13 with label33;
        catch bsh.UtilEvalError from label14 to label15 with label33;
        catch bsh.UtilEvalError from label16 to label17 with label33;
        catch bsh.UtilEvalError from label18 to label19 with label33;
        catch bsh.UtilEvalError from label20 to label21 with label33;
        catch bsh.UtilEvalError from label22 to label23 with label33;
        catch bsh.UtilEvalError from label24 to label25 with label33;
        catch bsh.UtilEvalError from label26 to label27 with label33;
        catch bsh.UtilEvalError from label28 to label29 with label33;
        catch bsh.UtilEvalError from label30 to label31 with label33;
        catch bsh.UtilEvalError from label32 to label33 with label33;
    }

    private java.lang.Object operation(java.lang.Object, java.lang.Object, int) throws bsh.UtilEvalError
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        bsh.UtilEvalError $r2, $r6, $r8, $r27;
        java.lang.String[] $r14;
        java.lang.StringBuffer $r9, $r10, $r12, $r13, $r16, $r17, $r19, $r22, $r24, $r25;
        int i0;
        java.lang.String $r15, $r20, $r23, $r26;
        bsh.Primitive $r1, $r4, $r5, $r7, $r21;
        bsh.BSHAssignment r28;
        java.lang.Object r0, r3, $r29;
        java.lang.Class $r11, $r18;

        r28 := @this: bsh.BSHAssignment;

        r0 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        i0 := @parameter2: int;

        $z0 = r0 instanceof java.lang.String;

        if $z0 == 0 goto label02;

        $r21 = <bsh.Primitive: bsh.Primitive VOID>;

        if r3 == $r21 goto label02;

        if i0 == 102 goto label01;

        $r27 = new bsh.UtilEvalError;

        specialinvoke $r27.<bsh.UtilEvalError: void <init>(java.lang.String)>("Use of non + operator with String LHS");

        throw $r27;

     label01:
        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r23 = (java.lang.String) r0;

        $r24 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r3);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r26;

     label02:
        $z1 = r0 instanceof bsh.Primitive;

        if $z1 != 0 goto label03;

        $z9 = r3 instanceof bsh.Primitive;

        if $z9 == 0 goto label07;

     label03:
        $r1 = <bsh.Primitive: bsh.Primitive VOID>;

        if r0 == $r1 goto label04;

        $r4 = <bsh.Primitive: bsh.Primitive VOID>;

        if r3 != $r4 goto label05;

     label04:
        $r2 = new bsh.UtilEvalError;

        specialinvoke $r2.<bsh.UtilEvalError: void <init>(java.lang.String)>("Illegal use of undefined object or \'void\' literal");

        throw $r2;

     label05:
        $r5 = <bsh.Primitive: bsh.Primitive NULL>;

        if r0 == $r5 goto label06;

        $r7 = <bsh.Primitive: bsh.Primitive NULL>;

        if r3 != $r7 goto label07;

     label06:
        $r6 = new bsh.UtilEvalError;

        specialinvoke $r6.<bsh.UtilEvalError: void <init>(java.lang.String)>("Illegal use of null object or \'null\' literal");

        throw $r6;

     label07:
        $z2 = r0 instanceof java.lang.Boolean;

        if $z2 != 0 goto label08;

        $z6 = r0 instanceof java.lang.Character;

        if $z6 != 0 goto label08;

        $z7 = r0 instanceof java.lang.Number;

        if $z7 != 0 goto label08;

        $z8 = r0 instanceof bsh.Primitive;

        if $z8 == 0 goto label10;

     label08:
        $z10 = r3 instanceof java.lang.Boolean;

        if $z10 != 0 goto label09;

        $z3 = r3 instanceof java.lang.Character;

        if $z3 != 0 goto label09;

        $z4 = r3 instanceof java.lang.Number;

        if $z4 != 0 goto label09;

        $z5 = r3 instanceof bsh.Primitive;

        if $z5 == 0 goto label10;

     label09:
        $r29 = staticinvoke <bsh.Primitive: java.lang.Object binaryOperation(java.lang.Object,java.lang.Object,int)>(r0, r3, i0);

        return $r29;

     label10:
        $r8 = new bsh.UtilEvalError;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Non primitive value in operator: ");

        $r11 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r14 = <bsh.ParserConstants: java.lang.String[] tokenImage>;

        $r15 = $r14[i0];

        $r16 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r18 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r8.<bsh.UtilEvalError: void <init>(java.lang.String)>($r20);

        throw $r8;
    }
}
