class org.apache.james.mime4j.message.StringInputStream extends java.io.InputStream
{
    private final java.nio.charset.CharsetEncoder encoder;
    private final java.nio.CharBuffer cbuf;
    private final java.nio.ByteBuffer bbuf;
    private int mark;

    void <init>(java.lang.CharSequence, java.nio.charset.Charset, int)
    {
        java.lang.CharSequence r9;
        java.nio.CharBuffer $r10;
        java.nio.ByteBuffer $r7, $r8;
        java.nio.charset.Charset r1;
        java.nio.charset.CharsetEncoder $r2, $r4, $r6;
        java.nio.charset.CodingErrorAction $r3, $r5;
        int i0, $i2;
        org.apache.james.mime4j.message.StringInputStream r0;

        r0 := @this: org.apache.james.mime4j.message.StringInputStream;

        r9 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.nio.charset.Charset;

        i0 := @parameter2: int;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        $r2 = virtualinvoke r1.<java.nio.charset.Charset: java.nio.charset.CharsetEncoder newEncoder()>();

        $r3 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;

        $r4 = virtualinvoke $r2.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onMalformedInput(java.nio.charset.CodingErrorAction)>($r3);

        $r5 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;

        $r6 = virtualinvoke $r4.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>($r5);

        r0.<org.apache.james.mime4j.message.StringInputStream: java.nio.charset.CharsetEncoder encoder> = $r6;

        $r7 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(124);

        r0.<org.apache.james.mime4j.message.StringInputStream: java.nio.ByteBuffer bbuf> = $r7;

        $r8 = r0.<org.apache.james.mime4j.message.StringInputStream: java.nio.ByteBuffer bbuf>;

        virtualinvoke $r8.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        $r10 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>(r9);

        r0.<org.apache.james.mime4j.message.StringInputStream: java.nio.CharBuffer cbuf> = $r10;

        $i2 = (int) -1;

        r0.<org.apache.james.mime4j.message.StringInputStream: int mark> = $i2;

        return;
    }

    void <init>(java.lang.CharSequence, java.nio.charset.Charset)
    {
        org.apache.james.mime4j.message.StringInputStream r0;
        java.lang.CharSequence r1;
        java.nio.charset.Charset r2;

        r0 := @this: org.apache.james.mime4j.message.StringInputStream;

        r1 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: java.nio.charset.Charset;

        specialinvoke r0.<org.apache.james.mime4j.message.StringInputStream: void <init>(java.lang.CharSequence,java.nio.charset.Charset,int)>(r1, r2, 2048);

        return;
    }

    private void fillBuffer() throws java.io.IOException
    {
        java.nio.CharBuffer $r3;
        java.nio.ByteBuffer $r1, $r2, $r6;
        java.nio.charset.CoderResult $r5;
        java.nio.charset.CharsetEncoder $r4;
        org.apache.james.mime4j.message.StringInputStream r0;
        boolean $z0;

        r0 := @this: org.apache.james.mime4j.message.StringInputStream;

        $r1 = r0.<org.apache.james.mime4j.message.StringInputStream: java.nio.ByteBuffer bbuf>;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer compact()>();

        $r4 = r0.<org.apache.james.mime4j.message.StringInputStream: java.nio.charset.CharsetEncoder encoder>;

        $r3 = r0.<org.apache.james.mime4j.message.StringInputStream: java.nio.CharBuffer cbuf>;

        $r2 = r0.<org.apache.james.mime4j.message.StringInputStream: java.nio.ByteBuffer bbuf>;

        $r5 = virtualinvoke $r4.<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encode(java.nio.CharBuffer,java.nio.ByteBuffer,boolean)>($r3, $r2, 1);

        $z0 = virtualinvoke $r5.<java.nio.charset.CoderResult: boolean isError()>();

        if $z0 == 0 goto label1;

        virtualinvoke $r5.<java.nio.charset.CoderResult: void throwException()>();

     label1:
        $r6 = r0.<org.apache.james.mime4j.message.StringInputStream: java.nio.ByteBuffer bbuf>;

        virtualinvoke $r6.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        return;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        byte[] r0;
        java.lang.IndexOutOfBoundsException $r22;
        java.nio.ByteBuffer $r11, $r13, $r14, $r16, $r17;
        java.lang.NullPointerException $r20;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.nio.CharBuffer $r12, $r15, $r18;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8, $r21;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7, $i8, $i10, $i12;
        org.apache.james.mime4j.message.StringInputStream r10;
        java.lang.String $r9;

        r10 := @this: org.apache.james.mime4j.message.StringInputStream;

        r0 := @parameter0: byte[];

        i5 := @parameter1: int;

        i6 := @parameter2: int;

        if r0 != null goto label1;

        $r20 = new java.lang.NullPointerException;

        specialinvoke $r20.<java.lang.NullPointerException: void <init>(java.lang.String)>("Byte array is null");

        throw $r20;

     label1:
        if i6 < 0 goto label2;

        $i2 = i5 + i6;

        $i1 = lengthof r0;

        if $i2 <= $i1 goto label3;

     label2:
        $r22 = new java.lang.IndexOutOfBoundsException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Array Size=");

        $i0 = lengthof r0;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", offset=");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", length=");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r9);

        throw $r22;

     label3:
        $r11 = r10.<org.apache.james.mime4j.message.StringInputStream: java.nio.ByteBuffer bbuf>;

        $z0 = virtualinvoke $r11.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 != 0 goto label4;

        $r18 = r10.<org.apache.james.mime4j.message.StringInputStream: java.nio.CharBuffer cbuf>;

        $z5 = virtualinvoke $r18.<java.nio.CharBuffer: boolean hasRemaining()>();

        if $z5 != 0 goto label4;

        $i10 = (int) -1;

        return $i10;

     label4:
        i7 = 0;

     label5:
        if i6 <= 0 goto label7;

        $r13 = r10.<org.apache.james.mime4j.message.StringInputStream: java.nio.ByteBuffer bbuf>;

        $z2 = virtualinvoke $r13.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z2 == 0 goto label6;

        $r16 = r10.<org.apache.james.mime4j.message.StringInputStream: java.nio.ByteBuffer bbuf>;

        $i3 = virtualinvoke $r16.<java.nio.ByteBuffer: int remaining()>();

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>($i3, i6);

        $r17 = r10.<org.apache.james.mime4j.message.StringInputStream: java.nio.ByteBuffer bbuf>;

        virtualinvoke $r17.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(r0, i5, $i4);

        i5 = i5 + $i4;

        i6 = i6 - $i4;

        i7 = i7 + $i4;

        goto label5;

     label6:
        specialinvoke r10.<org.apache.james.mime4j.message.StringInputStream: void fillBuffer()>();

        $r14 = r10.<org.apache.james.mime4j.message.StringInputStream: java.nio.ByteBuffer bbuf>;

        $z3 = virtualinvoke $r14.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z3 != 0 goto label5;

        $r15 = r10.<org.apache.james.mime4j.message.StringInputStream: java.nio.CharBuffer cbuf>;

        $z4 = virtualinvoke $r15.<java.nio.CharBuffer: boolean hasRemaining()>();

        if $z4 != 0 goto label5;

        goto label7;

     label7:
        if i7 != 0 goto label8;

        $r12 = r10.<org.apache.james.mime4j.message.StringInputStream: java.nio.CharBuffer cbuf>;

        $z1 = virtualinvoke $r12.<java.nio.CharBuffer: boolean hasRemaining()>();

        if $z1 != 0 goto label8;

        $i12 = (int) -1;

        $i8 = $i12;

        goto label9;

     label8:
        $i8 = i7;

     label9:
        return $i8;
    }

    public int read() throws java.io.IOException
    {
        java.nio.CharBuffer $r2;
        java.nio.ByteBuffer $r1, $r3, $r4;
        short $s1, $s2;
        byte $b0;
        int $i3, $i5;
        org.apache.james.mime4j.message.StringInputStream r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.james.mime4j.message.StringInputStream;

     label1:
        $r4 = r0.<org.apache.james.mime4j.message.StringInputStream: java.nio.ByteBuffer bbuf>;

        $z2 = virtualinvoke $r4.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z2 == 0 goto label2;

        $r3 = r0.<org.apache.james.mime4j.message.StringInputStream: java.nio.ByteBuffer bbuf>;

        $b0 = virtualinvoke $r3.<java.nio.ByteBuffer: byte get()>();

        $s2 = (short) $b0;

        $s1 = $s2 & 255;

        $i3 = (int) $s1;

        return $i3;

     label2:
        specialinvoke r0.<org.apache.james.mime4j.message.StringInputStream: void fillBuffer()>();

        $r1 = r0.<org.apache.james.mime4j.message.StringInputStream: java.nio.ByteBuffer bbuf>;

        $z0 = virtualinvoke $r1.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 != 0 goto label1;

        $r2 = r0.<org.apache.james.mime4j.message.StringInputStream: java.nio.CharBuffer cbuf>;

        $z1 = virtualinvoke $r2.<java.nio.CharBuffer: boolean hasRemaining()>();

        if $z1 != 0 goto label1;

        $i5 = (int) -1;

        return $i5;
    }

    public int read(byte[]) throws java.io.IOException
    {
        byte[] r1;
        int $i0, $i1;
        org.apache.james.mime4j.message.StringInputStream r0;

        r0 := @this: org.apache.james.mime4j.message.StringInputStream;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        $i1 = virtualinvoke r0.<org.apache.james.mime4j.message.StringInputStream: int read(byte[],int,int)>(r1, 0, $i0);

        return $i1;
    }

    public long skip(long) throws java.io.IOException
    {
        java.nio.CharBuffer $r1, $r2;
        long $l1, l2;
        byte $b0;
        int i3, $i4;
        org.apache.james.mime4j.message.StringInputStream r0;
        boolean $z0;

        r0 := @this: org.apache.james.mime4j.message.StringInputStream;

        l2 := @parameter0: long;

        i3 = 0;

     label1:
        $b0 = l2 cmp 0L;

        $i4 = (int) $b0;

        if $i4 <= 0 goto label2;

        $r1 = r0.<org.apache.james.mime4j.message.StringInputStream: java.nio.CharBuffer cbuf>;

        $z0 = virtualinvoke $r1.<java.nio.CharBuffer: boolean hasRemaining()>();

        if $z0 == 0 goto label2;

        $r2 = r0.<org.apache.james.mime4j.message.StringInputStream: java.nio.CharBuffer cbuf>;

        virtualinvoke $r2.<java.nio.CharBuffer: char get()>();

        l2 = l2 - 1L;

        i3 = i3 + 1;

        goto label1;

     label2:
        $l1 = (long) i3;

        return $l1;
    }

    public int available() throws java.io.IOException
    {
        int $i0;
        org.apache.james.mime4j.message.StringInputStream r0;
        java.nio.CharBuffer $r1;

        r0 := @this: org.apache.james.mime4j.message.StringInputStream;

        $r1 = r0.<org.apache.james.mime4j.message.StringInputStream: java.nio.CharBuffer cbuf>;

        $i0 = virtualinvoke $r1.<java.nio.CharBuffer: int remaining()>();

        return $i0;
    }

    public void close() throws java.io.IOException
    {
        org.apache.james.mime4j.message.StringInputStream r0;

        r0 := @this: org.apache.james.mime4j.message.StringInputStream;

        return;
    }

    public void mark(int)
    {
        java.nio.CharBuffer $r1;
        int $i0, i1;
        org.apache.james.mime4j.message.StringInputStream r0;

        r0 := @this: org.apache.james.mime4j.message.StringInputStream;

        i1 := @parameter0: int;

        $r1 = r0.<org.apache.james.mime4j.message.StringInputStream: java.nio.CharBuffer cbuf>;

        $i0 = virtualinvoke $r1.<java.nio.CharBuffer: int position()>();

        r0.<org.apache.james.mime4j.message.StringInputStream: int mark> = $i0;

        return;
    }

    public void reset() throws java.io.IOException
    {
        java.nio.CharBuffer $r1;
        int $i0, $i1, $i3, $i5;
        org.apache.james.mime4j.message.StringInputStream r0;

        r0 := @this: org.apache.james.mime4j.message.StringInputStream;

        $i0 = r0.<org.apache.james.mime4j.message.StringInputStream: int mark>;

        $i3 = (int) -1;

        if $i0 == $i3 goto label1;

        $r1 = r0.<org.apache.james.mime4j.message.StringInputStream: java.nio.CharBuffer cbuf>;

        $i1 = r0.<org.apache.james.mime4j.message.StringInputStream: int mark>;

        virtualinvoke $r1.<java.nio.CharBuffer: java.nio.Buffer position(int)>($i1);

        $i5 = (int) -1;

        r0.<org.apache.james.mime4j.message.StringInputStream: int mark> = $i5;

     label1:
        return;
    }

    public boolean markSupported()
    {
        org.apache.james.mime4j.message.StringInputStream r0;

        r0 := @this: org.apache.james.mime4j.message.StringInputStream;

        return 1;
    }
}
