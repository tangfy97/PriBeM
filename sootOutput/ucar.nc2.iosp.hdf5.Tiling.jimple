public class ucar.nc2.iosp.hdf5.Tiling extends java.lang.Object
{
    private int rank;
    private int[] shape;
    private int[] tileSize;
    private int[] tile;
    private int[] stride;
    static final boolean $assertionsDisabled;

    public void <init>(int[], int[])
    {
        java.lang.AssertionError $r11;
        ucar.nc2.iosp.hdf5.Tiling r0;
        int[] r1, r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i11, i12, i13, $i15;
        boolean $z0;

        r0 := @this: ucar.nc2.iosp.hdf5.Tiling;

        r1 := @parameter0: int[];

        r2 := @parameter1: int[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = <ucar.nc2.iosp.hdf5.Tiling: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i9 = lengthof r1;

        $i8 = lengthof r2;

        if $i9 <= $i8 goto label1;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label1:
        $i0 = lengthof r1;

        r0.<ucar.nc2.iosp.hdf5.Tiling: int rank> = $i0;

        r0.<ucar.nc2.iosp.hdf5.Tiling: int[] tileSize> = r2;

        $i1 = r0.<ucar.nc2.iosp.hdf5.Tiling: int rank>;

        $r3 = newarray (int)[$i1];

        r0.<ucar.nc2.iosp.hdf5.Tiling: int[] shape> = $r3;

        i10 = 0;

     label2:
        $i11 = r0.<ucar.nc2.iosp.hdf5.Tiling: int rank>;

        if i10 >= $i11 goto label3;

        $r9 = r0.<ucar.nc2.iosp.hdf5.Tiling: int[] shape>;

        $i6 = r1[i10];

        $i5 = r2[i10];

        $i7 = staticinvoke <java.lang.Math: int max(int,int)>($i6, $i5);

        $r9[i10] = $i7;

        i10 = i10 + 1;

        goto label2;

     label3:
        $r4 = r0.<ucar.nc2.iosp.hdf5.Tiling: int[] shape>;

        $r5 = virtualinvoke r0.<ucar.nc2.iosp.hdf5.Tiling: int[] tile(int[])>($r4);

        r0.<ucar.nc2.iosp.hdf5.Tiling: int[] tile> = $r5;

        $i2 = r0.<ucar.nc2.iosp.hdf5.Tiling: int rank>;

        $r6 = newarray (int)[$i2];

        r0.<ucar.nc2.iosp.hdf5.Tiling: int[] stride> = $r6;

        i12 = 1;

        $i3 = r0.<ucar.nc2.iosp.hdf5.Tiling: int rank>;

        i13 = $i3 - 1;

     label4:
        if i13 < 0 goto label5;

        $r7 = r0.<ucar.nc2.iosp.hdf5.Tiling: int[] stride>;

        $r7[i13] = i12;

        $r8 = r0.<ucar.nc2.iosp.hdf5.Tiling: int[] tile>;

        $i4 = $r8[i13];

        i12 = i12 * $i4;

        $i15 = (int) -1;

        i13 = i13 + $i15;

        goto label4;

     label5:
        return;
    }

    public int[] tile(int[])
    {
        java.lang.AssertionError $r5;
        ucar.nc2.iosp.hdf5.Tiling r0;
        int[] r1, r2, $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        boolean $z0;

        r0 := @this: ucar.nc2.iosp.hdf5.Tiling;

        r1 := @parameter0: int[];

        $i1 = r0.<ucar.nc2.iosp.hdf5.Tiling: int rank>;

        $i0 = lengthof r1;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i0);

        r2 = newarray (int)[$i2];

        i8 = 0;

     label1:
        if i8 >= $i2 goto label3;

        $z0 = <ucar.nc2.iosp.hdf5.Tiling: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $r4 = r0.<ucar.nc2.iosp.hdf5.Tiling: int[] shape>;

        $i7 = $r4[i8];

        $i6 = r1[i8];

        if $i7 >= $i6 goto label2;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label2:
        $i4 = r1[i8];

        $r3 = r0.<ucar.nc2.iosp.hdf5.Tiling: int[] tileSize>;

        $i3 = $r3[i8];

        $i5 = $i4 / $i3;

        r2[i8] = $i5;

        i8 = i8 + 1;

        goto label1;

     label3:
        return r2;
    }

    public int order(int[])
    {
        ucar.nc2.iosp.hdf5.Tiling r0;
        int[] r1, $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7;

        r0 := @this: ucar.nc2.iosp.hdf5.Tiling;

        r1 := @parameter0: int[];

        $r2 = virtualinvoke r0.<ucar.nc2.iosp.hdf5.Tiling: int[] tile(int[])>(r1);

        i6 = 0;

        $i1 = r0.<ucar.nc2.iosp.hdf5.Tiling: int rank>;

        $i0 = lengthof r1;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i0);

        i7 = 0;

     label1:
        if i7 >= $i2 goto label2;

        $r3 = r0.<ucar.nc2.iosp.hdf5.Tiling: int[] stride>;

        $i4 = $r3[i7];

        $i3 = $r2[i7];

        $i5 = $i4 * $i3;

        i6 = i6 + $i5;

        i7 = i7 + 1;

        goto label1;

     label2:
        return i6;
    }

    public int compare(int[], int[])
    {
        ucar.nc2.iosp.hdf5.Tiling r0;
        int[] r1, r2;
        int $i0, $i1, $i2;

        r0 := @this: ucar.nc2.iosp.hdf5.Tiling;

        r1 := @parameter0: int[];

        r2 := @parameter1: int[];

        $i0 = virtualinvoke r0.<ucar.nc2.iosp.hdf5.Tiling: int order(int[])>(r1);

        $i1 = virtualinvoke r0.<ucar.nc2.iosp.hdf5.Tiling: int order(int[])>(r2);

        $i2 = $i0 - $i1;

        return $i2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lucar/nc2/iosp/hdf5/Tiling;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <ucar.nc2.iosp.hdf5.Tiling: boolean $assertionsDisabled> = $z1;

        return;
    }
}
