public class org.springframework.scheduling.concurrent.ConcurrentTaskScheduler extends org.springframework.scheduling.concurrent.ConcurrentTaskExecutor implements org.springframework.scheduling.TaskScheduler
{
    private volatile java.util.concurrent.ScheduledExecutorService scheduledExecutor;
    private volatile org.springframework.util.ErrorHandler errorHandler;

    public void <init>()
    {
        org.springframework.scheduling.concurrent.ConcurrentTaskScheduler r0;

        r0 := @this: org.springframework.scheduling.concurrent.ConcurrentTaskScheduler;

        specialinvoke r0.<org.springframework.scheduling.concurrent.ConcurrentTaskExecutor: void <init>()>();

        virtualinvoke r0.<org.springframework.scheduling.concurrent.ConcurrentTaskScheduler: void setScheduledExecutor(java.util.concurrent.ScheduledExecutorService)>(null);

        return;
    }

    public void <init>(java.util.concurrent.ScheduledExecutorService)
    {
        java.util.concurrent.ScheduledExecutorService r1;
        org.springframework.scheduling.concurrent.ConcurrentTaskScheduler r0;

        r0 := @this: org.springframework.scheduling.concurrent.ConcurrentTaskScheduler;

        r1 := @parameter0: java.util.concurrent.ScheduledExecutorService;

        specialinvoke r0.<org.springframework.scheduling.concurrent.ConcurrentTaskExecutor: void <init>(java.util.concurrent.Executor)>(r1);

        virtualinvoke r0.<org.springframework.scheduling.concurrent.ConcurrentTaskScheduler: void setScheduledExecutor(java.util.concurrent.ScheduledExecutorService)>(r1);

        return;
    }

    public void <init>(java.util.concurrent.Executor, java.util.concurrent.ScheduledExecutorService)
    {
        java.util.concurrent.ScheduledExecutorService r2;
        org.springframework.scheduling.concurrent.ConcurrentTaskScheduler r0;
        java.util.concurrent.Executor r1;

        r0 := @this: org.springframework.scheduling.concurrent.ConcurrentTaskScheduler;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: java.util.concurrent.ScheduledExecutorService;

        specialinvoke r0.<org.springframework.scheduling.concurrent.ConcurrentTaskExecutor: void <init>(java.util.concurrent.Executor)>(r1);

        virtualinvoke r0.<org.springframework.scheduling.concurrent.ConcurrentTaskScheduler: void setScheduledExecutor(java.util.concurrent.ScheduledExecutorService)>(r2);

        return;
    }

    public final void setScheduledExecutor(java.util.concurrent.ScheduledExecutorService)
    {
        java.util.concurrent.ScheduledExecutorService r1, $r2;
        org.springframework.scheduling.concurrent.ConcurrentTaskScheduler r0;

        r0 := @this: org.springframework.scheduling.concurrent.ConcurrentTaskScheduler;

        r1 := @parameter0: java.util.concurrent.ScheduledExecutorService;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r2 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor()>();

     label2:
        r0.<org.springframework.scheduling.concurrent.ConcurrentTaskScheduler: java.util.concurrent.ScheduledExecutorService scheduledExecutor> = $r2;

        return;
    }

    public void setErrorHandler(org.springframework.util.ErrorHandler)
    {
        org.springframework.util.ErrorHandler r0;
        org.springframework.scheduling.concurrent.ConcurrentTaskScheduler r1;

        r1 := @this: org.springframework.scheduling.concurrent.ConcurrentTaskScheduler;

        r0 := @parameter0: org.springframework.util.ErrorHandler;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "\'errorHandler\' must not be null");

        r1.<org.springframework.scheduling.concurrent.ConcurrentTaskScheduler: org.springframework.util.ErrorHandler errorHandler> = r0;

        return;
    }

    public java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable, org.springframework.scheduling.Trigger)
    {
        java.util.concurrent.ScheduledFuture $r6;
        org.springframework.core.task.TaskRejectedException $r8;
        java.lang.Runnable r3;
        org.springframework.util.ErrorHandler $r1, $r15;
        java.util.concurrent.RejectedExecutionException $r7;
        org.springframework.scheduling.concurrent.ReschedulingRunnable $r2;
        java.util.concurrent.ScheduledExecutorService $r5, $r10;
        java.lang.String $r14;
        org.springframework.scheduling.Trigger r4;
        java.lang.StringBuilder $r9, $r11, $r12, $r13;
        org.springframework.scheduling.concurrent.ConcurrentTaskScheduler r0;

        r0 := @this: org.springframework.scheduling.concurrent.ConcurrentTaskScheduler;

        r3 := @parameter0: java.lang.Runnable;

        r4 := @parameter1: org.springframework.scheduling.Trigger;

     label1:
        $r1 = r0.<org.springframework.scheduling.concurrent.ConcurrentTaskScheduler: org.springframework.util.ErrorHandler errorHandler>;

        if $r1 == null goto label2;

        $r15 = r0.<org.springframework.scheduling.concurrent.ConcurrentTaskScheduler: org.springframework.util.ErrorHandler errorHandler>;

        goto label3;

     label2:
        $r15 = staticinvoke <org.springframework.scheduling.support.TaskUtils: org.springframework.util.ErrorHandler getDefaultErrorHandler(boolean)>(1);

     label3:
        $r2 = new org.springframework.scheduling.concurrent.ReschedulingRunnable;

        $r5 = r0.<org.springframework.scheduling.concurrent.ConcurrentTaskScheduler: java.util.concurrent.ScheduledExecutorService scheduledExecutor>;

        specialinvoke $r2.<org.springframework.scheduling.concurrent.ReschedulingRunnable: void <init>(java.lang.Runnable,org.springframework.scheduling.Trigger,java.util.concurrent.ScheduledExecutorService,org.springframework.util.ErrorHandler)>(r3, r4, $r5, $r15);

        $r6 = virtualinvoke $r2.<org.springframework.scheduling.concurrent.ReschedulingRunnable: java.util.concurrent.ScheduledFuture schedule()>();

     label4:
        return $r6;

     label5:
        $r7 := @caughtexception;

        $r8 = new org.springframework.core.task.TaskRejectedException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Executor [");

        $r10 = r0.<org.springframework.scheduling.concurrent.ConcurrentTaskScheduler: java.util.concurrent.ScheduledExecutorService scheduledExecutor>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] did not accept task: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.springframework.core.task.TaskRejectedException: void <init>(java.lang.String,java.lang.Throwable)>($r14, $r7);

        throw $r8;

        catch java.util.concurrent.RejectedExecutionException from label1 to label4 with label5;
    }

    public java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable, java.util.Date)
    {
        java.util.concurrent.ScheduledFuture $r6;
        java.util.Date r0;
        long $l0, $l1, l2;
        org.springframework.core.task.TaskRejectedException $r8;
        java.lang.Runnable r2, $r4;
        java.util.concurrent.RejectedExecutionException $r7;
        java.util.concurrent.ScheduledExecutorService $r3, $r10;
        java.lang.String $r14;
        java.util.concurrent.TimeUnit $r5;
        java.lang.StringBuilder $r9, $r11, $r12, $r13;
        org.springframework.scheduling.concurrent.ConcurrentTaskScheduler r1;

        r1 := @this: org.springframework.scheduling.concurrent.ConcurrentTaskScheduler;

        r2 := @parameter0: java.lang.Runnable;

        r0 := @parameter1: java.util.Date;

        $l0 = virtualinvoke r0.<java.util.Date: long getTime()>();

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l2 = $l0 - $l1;

     label1:
        $r3 = r1.<org.springframework.scheduling.concurrent.ConcurrentTaskScheduler: java.util.concurrent.ScheduledExecutorService scheduledExecutor>;

        $r4 = specialinvoke r1.<org.springframework.scheduling.concurrent.ConcurrentTaskScheduler: java.lang.Runnable errorHandlingTask(java.lang.Runnable,boolean)>(r2, 0);

        $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r6 = interfaceinvoke $r3.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>($r4, l2, $r5);

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        $r8 = new org.springframework.core.task.TaskRejectedException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Executor [");

        $r10 = r1.<org.springframework.scheduling.concurrent.ConcurrentTaskScheduler: java.util.concurrent.ScheduledExecutorService scheduledExecutor>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] did not accept task: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.springframework.core.task.TaskRejectedException: void <init>(java.lang.String,java.lang.Throwable)>($r14, $r7);

        throw $r8;

        catch java.util.concurrent.RejectedExecutionException from label1 to label2 with label3;
    }

    public java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable, java.util.Date, long)
    {
        java.util.concurrent.ScheduledFuture $r6;
        java.util.Date r0;
        long $l0, $l1, l2, l3;
        org.springframework.core.task.TaskRejectedException $r8;
        java.lang.Runnable r2, $r4;
        java.util.concurrent.RejectedExecutionException $r7;
        java.util.concurrent.ScheduledExecutorService $r3, $r10;
        java.lang.String $r14;
        java.util.concurrent.TimeUnit $r5;
        java.lang.StringBuilder $r9, $r11, $r12, $r13;
        org.springframework.scheduling.concurrent.ConcurrentTaskScheduler r1;

        r1 := @this: org.springframework.scheduling.concurrent.ConcurrentTaskScheduler;

        r2 := @parameter0: java.lang.Runnable;

        r0 := @parameter1: java.util.Date;

        l3 := @parameter2: long;

        $l0 = virtualinvoke r0.<java.util.Date: long getTime()>();

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l2 = $l0 - $l1;

     label1:
        $r3 = r1.<org.springframework.scheduling.concurrent.ConcurrentTaskScheduler: java.util.concurrent.ScheduledExecutorService scheduledExecutor>;

        $r4 = specialinvoke r1.<org.springframework.scheduling.concurrent.ConcurrentTaskScheduler: java.lang.Runnable errorHandlingTask(java.lang.Runnable,boolean)>(r2, 1);

        $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r6 = interfaceinvoke $r3.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>($r4, l2, l3, $r5);

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        $r8 = new org.springframework.core.task.TaskRejectedException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Executor [");

        $r10 = r1.<org.springframework.scheduling.concurrent.ConcurrentTaskScheduler: java.util.concurrent.ScheduledExecutorService scheduledExecutor>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] did not accept task: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.springframework.core.task.TaskRejectedException: void <init>(java.lang.String,java.lang.Throwable)>($r14, $r7);

        throw $r8;

        catch java.util.concurrent.RejectedExecutionException from label1 to label2 with label3;
    }

    public java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable, long)
    {
        java.util.concurrent.ScheduledFuture $r5;
        long l0;
        org.springframework.core.task.TaskRejectedException $r7;
        java.lang.Runnable r1, $r3;
        java.util.concurrent.TimeUnit $r4;
        java.util.concurrent.RejectedExecutionException $r6;
        java.util.concurrent.ScheduledExecutorService $r2, $r9;
        java.lang.StringBuilder $r8, $r10, $r11, $r12;
        java.lang.String $r13;
        org.springframework.scheduling.concurrent.ConcurrentTaskScheduler r0;

        r0 := @this: org.springframework.scheduling.concurrent.ConcurrentTaskScheduler;

        r1 := @parameter0: java.lang.Runnable;

        l0 := @parameter1: long;

     label1:
        $r2 = r0.<org.springframework.scheduling.concurrent.ConcurrentTaskScheduler: java.util.concurrent.ScheduledExecutorService scheduledExecutor>;

        $r3 = specialinvoke r0.<org.springframework.scheduling.concurrent.ConcurrentTaskScheduler: java.lang.Runnable errorHandlingTask(java.lang.Runnable,boolean)>(r1, 1);

        $r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r5 = interfaceinvoke $r2.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>($r3, 0L, l0, $r4);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r7 = new org.springframework.core.task.TaskRejectedException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Executor [");

        $r9 = r0.<org.springframework.scheduling.concurrent.ConcurrentTaskScheduler: java.util.concurrent.ScheduledExecutorService scheduledExecutor>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] did not accept task: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.springframework.core.task.TaskRejectedException: void <init>(java.lang.String,java.lang.Throwable)>($r13, $r6);

        throw $r7;

        catch java.util.concurrent.RejectedExecutionException from label1 to label2 with label3;
    }

    public java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable, java.util.Date, long)
    {
        java.util.concurrent.ScheduledFuture $r6;
        java.util.Date r0;
        long $l0, $l1, l2, l3;
        org.springframework.core.task.TaskRejectedException $r8;
        java.lang.Runnable r2, $r4;
        java.util.concurrent.RejectedExecutionException $r7;
        java.util.concurrent.ScheduledExecutorService $r3, $r10;
        java.lang.String $r14;
        java.util.concurrent.TimeUnit $r5;
        java.lang.StringBuilder $r9, $r11, $r12, $r13;
        org.springframework.scheduling.concurrent.ConcurrentTaskScheduler r1;

        r1 := @this: org.springframework.scheduling.concurrent.ConcurrentTaskScheduler;

        r2 := @parameter0: java.lang.Runnable;

        r0 := @parameter1: java.util.Date;

        l3 := @parameter2: long;

        $l0 = virtualinvoke r0.<java.util.Date: long getTime()>();

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l2 = $l0 - $l1;

     label1:
        $r3 = r1.<org.springframework.scheduling.concurrent.ConcurrentTaskScheduler: java.util.concurrent.ScheduledExecutorService scheduledExecutor>;

        $r4 = specialinvoke r1.<org.springframework.scheduling.concurrent.ConcurrentTaskScheduler: java.lang.Runnable errorHandlingTask(java.lang.Runnable,boolean)>(r2, 1);

        $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r6 = interfaceinvoke $r3.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>($r4, l2, l3, $r5);

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        $r8 = new org.springframework.core.task.TaskRejectedException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Executor [");

        $r10 = r1.<org.springframework.scheduling.concurrent.ConcurrentTaskScheduler: java.util.concurrent.ScheduledExecutorService scheduledExecutor>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] did not accept task: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.springframework.core.task.TaskRejectedException: void <init>(java.lang.String,java.lang.Throwable)>($r14, $r7);

        throw $r8;

        catch java.util.concurrent.RejectedExecutionException from label1 to label2 with label3;
    }

    public java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable, long)
    {
        java.util.concurrent.ScheduledFuture $r5;
        long l0;
        org.springframework.core.task.TaskRejectedException $r7;
        java.lang.Runnable r1, $r3;
        java.util.concurrent.TimeUnit $r4;
        java.util.concurrent.RejectedExecutionException $r6;
        java.util.concurrent.ScheduledExecutorService $r2, $r9;
        java.lang.StringBuilder $r8, $r10, $r11, $r12;
        java.lang.String $r13;
        org.springframework.scheduling.concurrent.ConcurrentTaskScheduler r0;

        r0 := @this: org.springframework.scheduling.concurrent.ConcurrentTaskScheduler;

        r1 := @parameter0: java.lang.Runnable;

        l0 := @parameter1: long;

     label1:
        $r2 = r0.<org.springframework.scheduling.concurrent.ConcurrentTaskScheduler: java.util.concurrent.ScheduledExecutorService scheduledExecutor>;

        $r3 = specialinvoke r0.<org.springframework.scheduling.concurrent.ConcurrentTaskScheduler: java.lang.Runnable errorHandlingTask(java.lang.Runnable,boolean)>(r1, 1);

        $r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r5 = interfaceinvoke $r2.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>($r3, 0L, l0, $r4);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r7 = new org.springframework.core.task.TaskRejectedException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Executor [");

        $r9 = r0.<org.springframework.scheduling.concurrent.ConcurrentTaskScheduler: java.util.concurrent.ScheduledExecutorService scheduledExecutor>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] did not accept task: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.springframework.core.task.TaskRejectedException: void <init>(java.lang.String,java.lang.Throwable)>($r13, $r6);

        throw $r7;

        catch java.util.concurrent.RejectedExecutionException from label1 to label2 with label3;
    }

    private java.lang.Runnable errorHandlingTask(java.lang.Runnable, boolean)
    {
        org.springframework.util.ErrorHandler $r2;
        java.lang.Runnable r0;
        org.springframework.scheduling.concurrent.ConcurrentTaskScheduler r1;
        boolean z0;
        org.springframework.scheduling.support.DelegatingErrorHandlingRunnable $r3;

        r1 := @this: org.springframework.scheduling.concurrent.ConcurrentTaskScheduler;

        r0 := @parameter0: java.lang.Runnable;

        z0 := @parameter1: boolean;

        $r2 = r1.<org.springframework.scheduling.concurrent.ConcurrentTaskScheduler: org.springframework.util.ErrorHandler errorHandler>;

        $r3 = staticinvoke <org.springframework.scheduling.support.TaskUtils: org.springframework.scheduling.support.DelegatingErrorHandlingRunnable decorateTaskWithErrorHandler(java.lang.Runnable,org.springframework.util.ErrorHandler,boolean)>(r0, $r2, z0);

        return $r3;
    }
}
