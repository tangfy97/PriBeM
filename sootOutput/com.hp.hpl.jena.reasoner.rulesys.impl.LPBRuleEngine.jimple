public class com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine extends java.lang.Object
{
    protected com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore ruleStore;
    protected com.hp.hpl.jena.reasoner.rulesys.BackwardRuleInfGraphI infGraph;
    protected boolean traceOn;
    protected boolean recordDerivations;
    protected java.util.List activeInterpreters;
    protected java.util.HashMap tabledGoals;
    protected java.util.LinkedList agenda;
    protected java.util.HashMap profile;
    public static final int CYCLES_BETWEEN_COMPLETION_CHECK;
    static org.slf4j.Logger logger;

    public void <init>(com.hp.hpl.jena.reasoner.rulesys.BackwardRuleInfGraphI, com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore r5;
        java.util.HashMap $r2;
        com.hp.hpl.jena.reasoner.rulesys.BackwardRuleInfGraphI r4;
        java.util.LinkedList $r3;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine r0;
        java.util.ArrayList $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine;

        r4 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.BackwardRuleInfGraphI;

        r5 := @parameter1: com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: boolean traceOn> = 0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: java.util.List activeInterpreters> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: java.util.HashMap tabledGoals> = $r2;

        $r3 = new java.util.LinkedList;

        specialinvoke $r3.<java.util.LinkedList: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: java.util.LinkedList agenda> = $r3;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: com.hp.hpl.jena.reasoner.rulesys.BackwardRuleInfGraphI infGraph> = r4;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore ruleStore> = r5;

        return;
    }

    public void <init>(com.hp.hpl.jena.reasoner.rulesys.BackwardRuleInfGraphI)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore $r5;
        java.util.HashMap $r2;
        com.hp.hpl.jena.reasoner.rulesys.BackwardRuleInfGraphI r4;
        java.util.LinkedList $r3;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine r0;
        java.util.ArrayList $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine;

        r4 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.BackwardRuleInfGraphI;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: boolean traceOn> = 0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: java.util.List activeInterpreters> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: java.util.HashMap tabledGoals> = $r2;

        $r3 = new java.util.LinkedList;

        specialinvoke $r3.<java.util.LinkedList: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: java.util.LinkedList agenda> = $r3;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: com.hp.hpl.jena.reasoner.rulesys.BackwardRuleInfGraphI infGraph> = r4;

        $r5 = new com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore;

        specialinvoke $r5.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore ruleStore> = $r5;

        return;
    }

    public synchronized com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.reasoner.TriplePattern)
    {
        java.util.List $r3;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r5;
        com.hp.hpl.jena.reasoner.TriplePattern r2;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter $r0;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPTopGoalIterator $r4;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine r1;

        r1 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine;

        r2 := @parameter0: com.hp.hpl.jena.reasoner.TriplePattern;

        $r0 = new com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter;

        specialinvoke $r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter: void <init>(com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine,com.hp.hpl.jena.reasoner.TriplePattern)>(r1, r2);

        $r3 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: java.util.List activeInterpreters>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r0);

        $r4 = new com.hp.hpl.jena.reasoner.rulesys.impl.LPTopGoalIterator;

        specialinvoke $r4.<com.hp.hpl.jena.reasoner.rulesys.impl.LPTopGoalIterator: void <init>(com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter)>($r0);

        $r5 = staticinvoke <com.hp.hpl.jena.util.iterator.WrappedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator create(java.util.Iterator)>($r4);

        return $r5;
    }

    public synchronized void reset()
    {
        java.util.HashMap $r1;
        java.util.LinkedList $r2;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: void checkSafeToUpdate()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: java.util.HashMap tabledGoals> = $r1;

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: java.util.LinkedList agenda>;

        virtualinvoke $r2.<java.util.LinkedList: void clear()>();

        return;
    }

    public synchronized void addRule(com.hp.hpl.jena.reasoner.rulesys.Rule)
    {
        com.hp.hpl.jena.reasoner.rulesys.Rule r1;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore $r2;
        int $i0;
        com.hp.hpl.jena.reasoner.ReasonerException $r3;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.Rule;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: void checkSafeToUpdate()>();

        $i0 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.rulesys.Rule: int headLength()>();

        if $i0 <= 1 goto label1;

        $r3 = new com.hp.hpl.jena.reasoner.ReasonerException;

        specialinvoke $r3.<com.hp.hpl.jena.reasoner.ReasonerException: void <init>(java.lang.String)>("Backward rules only allowed one head clause");

        throw $r3;

     label1:
        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore ruleStore>;

        virtualinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: void addRule(com.hp.hpl.jena.reasoner.rulesys.Rule)>(r1);

        return;
    }

    public synchronized void deleteRule(com.hp.hpl.jena.reasoner.rulesys.Rule)
    {
        com.hp.hpl.jena.reasoner.rulesys.Rule r1;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore $r2;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.Rule;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: void checkSafeToUpdate()>();

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore ruleStore>;

        virtualinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: void deleteRule(com.hp.hpl.jena.reasoner.rulesys.Rule)>(r1);

        return;
    }

    public synchronized java.util.List getAllRules()
    {
        java.util.List $r2;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore $r1;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: void checkSafeToUpdate()>();

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore ruleStore>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: java.util.List getAllRules()>();

        return $r2;
    }

    public synchronized void deleteAllRules()
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore $r1;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: void checkSafeToUpdate()>();

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore ruleStore>;

        virtualinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: void deleteAllRules()>();

        return;
    }

    public synchronized void halt()
    {
        java.util.List $r2;
        java.util.Iterator $r3;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter $r5;
        java.lang.Object $r4;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine r1;
        java.util.ArrayList $r0;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine;

        $r0 = new java.util.ArrayList;

        $r2 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: java.util.List activeInterpreters>;

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        $r3 = virtualinvoke $r0.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter) $r4;

        virtualinvoke $r5.<com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter: void close()>();

        goto label1;

     label2:
        return;
    }

    public void setTraceOn(boolean)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine r0;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine;

        z0 := @parameter0: boolean;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: boolean traceOn> = z0;

        return;
    }

    public boolean isTraceOn()
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine;

        $z0 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: boolean traceOn>;

        return $z0;
    }

    public void setDerivationLogging(boolean)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine r0;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine;

        z0 := @parameter0: boolean;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: boolean recordDerivations> = z0;

        return;
    }

    public boolean getDerivationLogging()
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine;

        $z0 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: boolean recordDerivations>;

        return $z0;
    }

    public com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore getRuleStore()
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore $r1;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore ruleStore>;

        return $r1;
    }

    public com.hp.hpl.jena.reasoner.rulesys.BackwardRuleInfGraphI getInfGraph()
    {
        com.hp.hpl.jena.reasoner.rulesys.BackwardRuleInfGraphI $r1;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: com.hp.hpl.jena.reasoner.rulesys.BackwardRuleInfGraphI infGraph>;

        return $r1;
    }

    public synchronized void detach(com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter r1;
        java.util.List $r2;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter;

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: java.util.List activeInterpreters>;

        interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public void checkSafeToUpdate()
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreterContext $r10, $r11;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPTopGoalIterator $r7;
        java.util.ArrayList $r2;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r4, $r5;
        java.util.List $r1, $r3;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter r9;
        java.lang.Object $r6, $r8;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: java.util.List activeInterpreters>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label5;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: java.util.List activeInterpreters>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r8 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r9 = (com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter) $r8;

        $r10 = virtualinvoke r9.<com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter: com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreterContext getContext()>();

        $z3 = $r10 instanceof com.hp.hpl.jena.reasoner.rulesys.impl.LPTopGoalIterator;

        if $z3 == 0 goto label2;

        $r11 = virtualinvoke r9.<com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter: com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreterContext getContext()>();

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r11);

     label2:
        goto label1;

     label3:
        $r5 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();

     label4:
        $z2 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (com.hp.hpl.jena.reasoner.rulesys.impl.LPTopGoalIterator) $r6;

        virtualinvoke $r7.<com.hp.hpl.jena.reasoner.rulesys.impl.LPTopGoalIterator: void close()>();

        goto label4;

     label5:
        return;
    }

    public synchronized void tablePredicate(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r1;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore $r2;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore ruleStore>;

        virtualinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: void tablePredicate(com.hp.hpl.jena.graph.Node)>(r1);

        return;
    }

    public synchronized com.hp.hpl.jena.reasoner.rulesys.impl.Generator generatorFor(com.hp.hpl.jena.reasoner.TriplePattern, java.util.List)
    {
        java.util.HashMap $r2, $r8;
        com.hp.hpl.jena.reasoner.rulesys.impl.Generator $r7, r9;
        java.util.List r5, $r6;
        com.hp.hpl.jena.reasoner.TriplePattern r1;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter $r4;
        java.lang.Object $r3;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.TriplePattern;

        r5 := @parameter1: java.util.List;

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: java.util.HashMap tabledGoals>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r9 = (com.hp.hpl.jena.reasoner.rulesys.impl.Generator) $r3;

        if r9 != null goto label1;

        $r4 = new com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter;

        specialinvoke $r4.<com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter: void <init>(com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine,com.hp.hpl.jena.reasoner.TriplePattern,java.util.List,boolean)>(r0, r1, r5, 0);

        $r6 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: java.util.List activeInterpreters>;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r4);

        $r7 = new com.hp.hpl.jena.reasoner.rulesys.impl.Generator;

        specialinvoke $r7.<com.hp.hpl.jena.reasoner.rulesys.impl.Generator: void <init>(com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter,com.hp.hpl.jena.reasoner.TriplePattern)>($r4, r1);

        r9 = $r7;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: void schedule(com.hp.hpl.jena.reasoner.rulesys.impl.LPAgendaEntry)>($r7);

        $r8 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: java.util.HashMap tabledGoals>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r7);

     label1:
        return r9;
    }

    public synchronized com.hp.hpl.jena.reasoner.rulesys.impl.Generator generatorFor(com.hp.hpl.jena.reasoner.TriplePattern)
    {
        java.util.HashMap $r2, $r7;
        com.hp.hpl.jena.reasoner.rulesys.impl.Generator $r6, r8;
        java.util.List $r5;
        com.hp.hpl.jena.reasoner.TriplePattern r1;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter $r4;
        java.lang.Object $r3;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.TriplePattern;

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: java.util.HashMap tabledGoals>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r8 = (com.hp.hpl.jena.reasoner.rulesys.impl.Generator) $r3;

        if r8 != null goto label1;

        $r4 = new com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter;

        specialinvoke $r4.<com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter: void <init>(com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine,com.hp.hpl.jena.reasoner.TriplePattern,boolean)>(r0, r1, 0);

        $r5 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: java.util.List activeInterpreters>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r4);

        $r6 = new com.hp.hpl.jena.reasoner.rulesys.impl.Generator;

        specialinvoke $r6.<com.hp.hpl.jena.reasoner.rulesys.impl.Generator: void <init>(com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter,com.hp.hpl.jena.reasoner.TriplePattern)>($r4, r1);

        r8 = $r6;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: void schedule(com.hp.hpl.jena.reasoner.rulesys.impl.LPAgendaEntry)>($r6);

        $r7 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: java.util.HashMap tabledGoals>;

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r6);

     label1:
        return r8;
    }

    public void schedule(com.hp.hpl.jena.reasoner.rulesys.impl.LPAgendaEntry)
    {
        java.util.LinkedList $r2;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine r0;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPAgendaEntry r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.impl.LPAgendaEntry;

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: java.util.LinkedList agenda>;

        virtualinvoke $r2.<java.util.LinkedList: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void pump(com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreterContext)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreterContext r1;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPAgendaEntry $r4;
        java.util.ArrayList $r0;
        com.hp.hpl.jena.reasoner.rulesys.impl.Generator $r5;
        int $i0, i1;
        java.util.LinkedList $r3;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine r2;
        boolean $z0, $z1, $z2;

        r2 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreterContext;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(3);

        i1 = 0;

     label1:
        $z0 = interfaceinvoke r1.<com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreterContext: boolean isReady()>();

        if $z0 != 0 goto label4;

        $r3 = r2.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: java.util.LinkedList agenda>;

        $z2 = virtualinvoke $r3.<java.util.LinkedList: boolean isEmpty()>();

        if $z2 == 0 goto label2;

        return;

     label2:
        $r4 = specialinvoke r2.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: com.hp.hpl.jena.reasoner.rulesys.impl.LPAgendaEntry getNextAgendaEntry()>();

        interfaceinvoke $r4.<com.hp.hpl.jena.reasoner.rulesys.impl.LPAgendaEntry: void pump()>();

        i1 = i1 + 1;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.reasoner.rulesys.impl.LPAgendaEntry: com.hp.hpl.jena.reasoner.rulesys.impl.Generator getGenerator()>();

        interfaceinvoke $r0.<java.util.Collection: boolean add(java.lang.Object)>($r5);

        $i0 = i1 % 3;

        if $i0 != 0 goto label3;

        staticinvoke <com.hp.hpl.jena.reasoner.rulesys.impl.Generator: void checkForCompletions(java.util.Collection)>($r0);

        interfaceinvoke $r0.<java.util.Collection: void clear()>();

     label3:
        goto label1;

     label4:
        $z1 = interfaceinvoke $r0.<java.util.Collection: boolean isEmpty()>();

        if $z1 != 0 goto label5;

        staticinvoke <com.hp.hpl.jena.reasoner.rulesys.impl.Generator: void checkForCompletions(java.util.Collection)>($r0);

     label5:
        return;
    }

    private com.hp.hpl.jena.reasoner.rulesys.impl.LPAgendaEntry getNextAgendaEntry()
    {
        java.lang.Throwable $r7;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPAgendaEntry r5;
        int $i0, i1;
        java.lang.Object $r4;
        java.util.LinkedList $r1, $r2, $r3, $r6;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: java.util.LinkedList agenda>;

        entermonitor $r1;

     label1:
        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: java.util.LinkedList agenda>;

        $i0 = virtualinvoke $r2.<java.util.LinkedList: int size()>();

        i1 = $i0 - 1;

        $r3 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: java.util.LinkedList agenda>;

        $r4 = virtualinvoke $r3.<java.util.LinkedList: java.lang.Object get(int)>(i1);

        r5 = (com.hp.hpl.jena.reasoner.rulesys.impl.LPAgendaEntry) $r4;

        $r6 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: java.util.LinkedList agenda>;

        virtualinvoke $r6.<java.util.LinkedList: java.lang.Object remove(int)>(i1);

        exitmonitor $r1;

     label2:
        return r5;

     label3:
        $r7 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void checkForCompletions()
    {
        java.lang.Throwable $r10;
        java.util.Iterator $r5;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreterContext $r8;
        java.util.ArrayList $r2;
        com.hp.hpl.jena.reasoner.rulesys.impl.Generator $r9;
        java.util.List $r1, $r3, $r4;
        int $i0;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter $r7;
        java.lang.Object $r6;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine r0;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: java.util.List activeInterpreters>;

        entermonitor $r1;

     label1:
        $r2 = new java.util.ArrayList;

        $r3 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: java.util.List activeInterpreters>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i0);

        $r4 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: java.util.List activeInterpreters>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter) $r6;

        $r8 = virtualinvoke $r7.<com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter: com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreterContext getContext()>();

        $z1 = $r8 instanceof com.hp.hpl.jena.reasoner.rulesys.impl.Generator;

        if $z1 == 0 goto label3;

        $r9 = (com.hp.hpl.jena.reasoner.rulesys.impl.Generator) $r8;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r9);

     label3:
        goto label2;

     label4:
        exitmonitor $r1;

     label5:
        goto label8;

     label6:
        $r10 := @caughtexception;

        exitmonitor $r1;

     label7:
        throw $r10;

     label8:
        staticinvoke <com.hp.hpl.jena.reasoner.rulesys.impl.Generator: void checkForCompletions(java.util.Collection)>($r2);

        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void incrementProfile(com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine$Count r6, $r7, $r9;
        java.util.HashMap $r1, $r4, $r8;
        com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode r2;
        java.lang.Object $r5;
        java.lang.String $r3;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine;

        r2 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: java.util.HashMap profile>;

        if $r1 == null goto label2;

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode: java.lang.String toString()>();

        $r4 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: java.util.HashMap profile>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r3);

        r6 = (com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine$Count) $r5;

        if r6 != null goto label1;

        $r8 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: java.util.HashMap profile>;

        $r7 = new com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine$Count;

        specialinvoke $r7.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine$Count: void <init>(com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode)>(r2);

        $r9 = virtualinvoke $r7.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine$Count: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine$Count inc()>();

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r9);

        goto label2;

     label1:
        virtualinvoke r6.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine$Count: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine$Count inc()>();

     label2:
        return;
    }

    public void resetProfile(boolean)
    {
        java.util.HashMap $r1;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine r0;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        goto label2;

     label1:
        $r1 = null;

     label2:
        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: java.util.HashMap profile> = $r1;

        return;
    }

    public void printProfile()
    {
        java.io.PrintStream $r5, $r7, $r9;
        java.util.Iterator $r6;
        java.util.Collection $r4;
        java.util.HashMap $r1, $r3;
        java.util.ArrayList $r2;
        java.lang.Object $r8;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: java.util.HashMap profile>;

        if $r1 != null goto label1;

        $r9 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("No profile collected");

        goto label3;

     label1:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: java.util.HashMap profile>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.util.Collection values()>();

        virtualinvoke $r2.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r4);

        staticinvoke <java.util.Collections: void sort(java.util.List)>($r2);

        $r5 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("LP engine rule profile");

        $r6 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = <java.lang.System: java.io.PrintStream out>;

        $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.Object)>($r8);

        goto label2;

     label3:
        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        <com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: int CYCLES_BETWEEN_COMPLETION_CHECK> = 3;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/hp/hpl/jena/reasoner/rulesys/impl/LPBRuleEngine;");

        <com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: org.slf4j.Logger logger> = $r0;

        return;
    }
}
