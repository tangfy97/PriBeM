public class com.hp.hpl.jena.util.PrintUtil extends java.lang.Object
{
    protected static com.hp.hpl.jena.shared.PrefixMapping prefixMapping;
    public static final java.lang.String egNS;

    public void <init>()
    {
        com.hp.hpl.jena.util.PrintUtil r0;

        r0 := @this: com.hp.hpl.jena.util.PrintUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void init()
    {
        java.lang.String $r0, $r1, $r2, $r3, $r4;

        $r0 = staticinvoke <com.hp.hpl.jena.vocabulary.RDF: java.lang.String getURI()>();

        staticinvoke <com.hp.hpl.jena.util.PrintUtil: void registerPrefix(java.lang.String,java.lang.String)>("rdf", $r0);

        $r1 = staticinvoke <com.hp.hpl.jena.vocabulary.RDFS: java.lang.String getURI()>();

        staticinvoke <com.hp.hpl.jena.util.PrintUtil: void registerPrefix(java.lang.String,java.lang.String)>("rdfs", $r1);

        staticinvoke <com.hp.hpl.jena.util.PrintUtil: void registerPrefix(java.lang.String,java.lang.String)>("drdfs", "urn:x-hp-direct-predicate:http_//www.w3.org/2000/01/rdf-schema#");

        $r2 = staticinvoke <com.hp.hpl.jena.vocabulary.OWL: java.lang.String getURI()>();

        staticinvoke <com.hp.hpl.jena.util.PrintUtil: void registerPrefix(java.lang.String,java.lang.String)>("owl", $r2);

        $r3 = staticinvoke <com.hp.hpl.jena.vocabulary.ReasonerVocabulary: java.lang.String getJenaReasonerNS()>();

        staticinvoke <com.hp.hpl.jena.util.PrintUtil: void registerPrefix(java.lang.String,java.lang.String)>("jr", $r3);

        $r4 = staticinvoke <com.hp.hpl.jena.vocabulary.ReasonerVocabulary: java.lang.String getRBNamespace()>();

        staticinvoke <com.hp.hpl.jena.util.PrintUtil: void registerPrefix(java.lang.String,java.lang.String)>("rb", $r4);

        staticinvoke <com.hp.hpl.jena.util.PrintUtil: void registerPrefix(java.lang.String,java.lang.String)>("eg", "urn:x-hp:eg/");

        staticinvoke <com.hp.hpl.jena.util.PrintUtil: void registerPrefix(java.lang.String,java.lang.String)>("xsd", "http://www.w3.org/2001/XMLSchema#");

        return;
    }

    public static void registerPrefix(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        com.hp.hpl.jena.shared.PrefixMapping $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = <com.hp.hpl.jena.util.PrintUtil: com.hp.hpl.jena.shared.PrefixMapping prefixMapping>;

        interfaceinvoke $r2.<com.hp.hpl.jena.shared.PrefixMapping: com.hp.hpl.jena.shared.PrefixMapping setNsPrefix(java.lang.String,java.lang.String)>(r0, r1);

        return;
    }

    public static void registerPrefixMap(java.util.Map)
    {
        com.hp.hpl.jena.shared.PrefixMapping $r1;
        java.util.Map r0;

        r0 := @parameter0: java.util.Map;

        $r1 = <com.hp.hpl.jena.util.PrintUtil: com.hp.hpl.jena.shared.PrefixMapping prefixMapping>;

        interfaceinvoke $r1.<com.hp.hpl.jena.shared.PrefixMapping: com.hp.hpl.jena.shared.PrefixMapping setNsPrefixes(java.util.Map)>(r0);

        return;
    }

    public static void removePrefix(java.lang.String)
    {
        java.lang.String r0;
        com.hp.hpl.jena.shared.PrefixMapping $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = <com.hp.hpl.jena.util.PrintUtil: com.hp.hpl.jena.shared.PrefixMapping prefixMapping>;

        interfaceinvoke $r1.<com.hp.hpl.jena.shared.PrefixMapping: com.hp.hpl.jena.shared.PrefixMapping removeNsPrefix(java.lang.String)>(r0);

        return;
    }

    public static void removePrefixMap(java.util.Map)
    {
        java.util.Iterator $r2;
        java.util.Map r0;
        java.util.Set $r1;
        java.lang.Object $r4;
        java.lang.String $r5;
        com.hp.hpl.jena.shared.PrefixMapping $r3;
        boolean $z0;

        r0 := @parameter0: java.util.Map;

        $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set keySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = <com.hp.hpl.jena.util.PrintUtil: com.hp.hpl.jena.shared.PrefixMapping prefixMapping>;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.String) $r4;

        interfaceinvoke $r3.<com.hp.hpl.jena.shared.PrefixMapping: com.hp.hpl.jena.shared.PrefixMapping removeNsPrefix(java.lang.String)>($r5);

        goto label1;

     label2:
        return;
    }

    public static java.lang.String print(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0;
        java.lang.String $r1, $r2, $r10, $r13, $r15, $r16;
        boolean $z0, $z1, $z2;
        com.hp.hpl.jena.datatypes.RDFDatatype $r7;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r8, $r9, $r11, $r12;
        com.hp.hpl.jena.shared.PrefixMapping $r14;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = r0 instanceof com.hp.hpl.jena.graph.Node_URI;

        if $z0 == 0 goto label1;

        $r14 = <com.hp.hpl.jena.util.PrintUtil: com.hp.hpl.jena.shared.PrefixMapping prefixMapping>;

        $r15 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String toString(com.hp.hpl.jena.shared.PrefixMapping)>($r14);

        return $r15;

     label1:
        $z1 = r0 instanceof com.hp.hpl.jena.graph.Node_Literal;

        if $z1 == 0 goto label4;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r7 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.datatypes.RDFDatatype getLiteralDatatype()>();

        if $r7 != null goto label2;

        $r16 = "";

        goto label3;

     label2:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("^^");

        $r10 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralDatatypeURI()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r16 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        $r12 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;

     label4:
        $z2 = r0 instanceof com.hp.hpl.jena.graph.Node_ANY;

        if $z2 == 0 goto label5;

        return "*";

     label5:
        if r0 != null goto label6;

        return "null";

     label6:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String toString()>();

        return $r1;
    }

    public static java.lang.String print(com.hp.hpl.jena.rdf.model.RDFNode)
    {
        com.hp.hpl.jena.graph.Node $r1;
        java.lang.String $r2;
        com.hp.hpl.jena.rdf.model.RDFNode r0;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.RDFNode;

        if r0 != null goto label1;

        return "null";

     label1:
        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.RDFNode: com.hp.hpl.jena.graph.Node asNode()>();

        $r2 = staticinvoke <com.hp.hpl.jena.util.PrintUtil: java.lang.String print(com.hp.hpl.jena.graph.Node)>($r1);

        return $r2;
    }

    public static java.lang.String print(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.Node $r3, $r7, $r11;
        java.lang.String $r4, $r8, $r12, $r15;
        com.hp.hpl.jena.graph.Triple r0;
        java.lang.StringBuilder $r1, $r2, $r5, $r6, $r9, $r10, $r13, $r14;

        r0 := @parameter0: com.hp.hpl.jena.graph.Triple;

        if r0 != null goto label1;

        return "(null)";

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r4 = staticinvoke <com.hp.hpl.jena.util.PrintUtil: java.lang.String print(com.hp.hpl.jena.graph.Node)>($r3);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r7 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r8 = staticinvoke <com.hp.hpl.jena.util.PrintUtil: java.lang.String print(com.hp.hpl.jena.graph.Node)>($r7);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r11 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $r12 = staticinvoke <com.hp.hpl.jena.util.PrintUtil: java.lang.String print(com.hp.hpl.jena.graph.Node)>($r11);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r15;
    }

    public static java.lang.String print(com.hp.hpl.jena.reasoner.TriplePattern)
    {
        com.hp.hpl.jena.graph.Node $r3, $r7, $r11;
        java.lang.String $r4, $r8, $r12, $r15;
        com.hp.hpl.jena.reasoner.TriplePattern r0;
        java.lang.StringBuilder $r1, $r2, $r5, $r6, $r9, $r10, $r13, $r14;

        r0 := @parameter0: com.hp.hpl.jena.reasoner.TriplePattern;

        if r0 != null goto label1;

        return "(null)";

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getSubject()>();

        $r4 = staticinvoke <com.hp.hpl.jena.util.PrintUtil: java.lang.String print(com.hp.hpl.jena.graph.Node)>($r3);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r7 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r8 = staticinvoke <com.hp.hpl.jena.util.PrintUtil: java.lang.String print(com.hp.hpl.jena.graph.Node)>($r7);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r11 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getObject()>();

        $r12 = staticinvoke <com.hp.hpl.jena.util.PrintUtil: java.lang.String print(com.hp.hpl.jena.graph.Node)>($r11);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r15;
    }

    public static java.lang.String print(com.hp.hpl.jena.rdf.model.Statement)
    {
        java.lang.String $r2;
        com.hp.hpl.jena.rdf.model.Statement r0;
        com.hp.hpl.jena.graph.Triple $r1;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Statement;

        if r0 != null goto label1;

        return "(null)";

     label1:
        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.graph.Triple asTriple()>();

        $r2 = staticinvoke <com.hp.hpl.jena.util.PrintUtil: java.lang.String print(com.hp.hpl.jena.graph.Triple)>($r1);

        return $r2;
    }

    public static java.lang.String print(java.lang.Object)
    {
        com.hp.hpl.jena.graph.Node $r6;
        java.lang.String $r1, $r3, $r5, $r7, $r9, $r11;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.hp.hpl.jena.rdf.model.RDFNode $r4;
        com.hp.hpl.jena.rdf.model.Statement $r2;
        com.hp.hpl.jena.graph.Triple $r10;
        com.hp.hpl.jena.reasoner.TriplePattern $r8;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return "null";

     label1:
        $z0 = r0 instanceof com.hp.hpl.jena.graph.Triple;

        if $z0 == 0 goto label2;

        $r10 = (com.hp.hpl.jena.graph.Triple) r0;

        $r11 = staticinvoke <com.hp.hpl.jena.util.PrintUtil: java.lang.String print(com.hp.hpl.jena.graph.Triple)>($r10);

        return $r11;

     label2:
        $z1 = r0 instanceof com.hp.hpl.jena.reasoner.TriplePattern;

        if $z1 == 0 goto label3;

        $r8 = (com.hp.hpl.jena.reasoner.TriplePattern) r0;

        $r9 = staticinvoke <com.hp.hpl.jena.util.PrintUtil: java.lang.String print(com.hp.hpl.jena.reasoner.TriplePattern)>($r8);

        return $r9;

     label3:
        $z2 = r0 instanceof com.hp.hpl.jena.graph.Node;

        if $z2 == 0 goto label4;

        $r6 = (com.hp.hpl.jena.graph.Node) r0;

        $r7 = staticinvoke <com.hp.hpl.jena.util.PrintUtil: java.lang.String print(com.hp.hpl.jena.graph.Node)>($r6);

        return $r7;

     label4:
        $z3 = r0 instanceof com.hp.hpl.jena.rdf.model.RDFNode;

        if $z3 == 0 goto label5;

        $r4 = (com.hp.hpl.jena.rdf.model.RDFNode) r0;

        $r5 = staticinvoke <com.hp.hpl.jena.util.PrintUtil: java.lang.String print(com.hp.hpl.jena.rdf.model.RDFNode)>($r4);

        return $r5;

     label5:
        $z4 = r0 instanceof com.hp.hpl.jena.rdf.model.Statement;

        if $z4 == 0 goto label6;

        $r2 = (com.hp.hpl.jena.rdf.model.Statement) r0;

        $r3 = staticinvoke <com.hp.hpl.jena.util.PrintUtil: java.lang.String print(com.hp.hpl.jena.rdf.model.Statement)>($r2);

        return $r3;

     label6:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    public static java.lang.String expandQname(java.lang.String)
    {
        java.lang.String r0, $r2;
        com.hp.hpl.jena.shared.PrefixMapping $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = <com.hp.hpl.jena.util.PrintUtil: com.hp.hpl.jena.shared.PrefixMapping prefixMapping>;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.shared.PrefixMapping: java.lang.String expandPrefix(java.lang.String)>(r0);

        return $r2;
    }

    public static void printIndent(java.io.PrintWriter, int)
    {
        java.io.PrintWriter r1;
        java.lang.StringBuffer $r0;
        int i0, i1;
        java.lang.String $r2;

        r1 := @parameter0: java.io.PrintWriter;

        i0 := @parameter1: int;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        i1 = i1 + 1;

        goto label1;

     label2:
        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r2);

        return;
    }

    public static void printOut(java.util.Iterator)
    {
        java.io.PrintStream $r2;
        java.util.Iterator r0;
        java.lang.StringBuilder $r1, $r3, $r6;
        java.lang.Object $r4;
        java.lang.String $r5, $r7;
        boolean $z0;

        r0 := @parameter0: java.util.Iterator;

     label1:
        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("   ");

        $r4 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        $r5 = staticinvoke <com.hp.hpl.jena.util.PrintUtil: java.lang.String print(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r7);

        goto label1;

     label2:
        return;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.shared.PrefixMapping $r0;

        <com.hp.hpl.jena.util.PrintUtil: java.lang.String egNS> = "urn:x-hp:eg/";

        $r0 = staticinvoke <com.hp.hpl.jena.shared.PrefixMapping$Factory: com.hp.hpl.jena.shared.PrefixMapping create()>();

        <com.hp.hpl.jena.util.PrintUtil: com.hp.hpl.jena.shared.PrefixMapping prefixMapping> = $r0;

        staticinvoke <com.hp.hpl.jena.util.PrintUtil: void init()>();

        return;
    }
}
