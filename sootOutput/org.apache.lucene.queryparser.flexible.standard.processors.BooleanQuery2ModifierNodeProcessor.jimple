public class org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor extends java.lang.Object implements org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessor
{
    static final java.lang.String TAG_REMOVE;
    static final java.lang.String TAG_MODIFIER;
    static final java.lang.String TAG_BOOLEAN_ROOT;
    org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler queryConfigHandler;
    private final java.util.ArrayList childrenBuffer;
    private java.lang.Boolean usingAnd;

    public void <init>()
    {
        java.lang.Boolean $r2;
        org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor r0;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor: java.util.ArrayList childrenBuffer> = $r1;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        r0.<org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor: java.lang.Boolean usingAnd> = $r2;

        return;
    }

    public org.apache.lucene.queryparser.flexible.core.nodes.QueryNode process(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey $r2;
        org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$Operator r4, $r5;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler $r1;
        java.lang.IllegalArgumentException $r9;
        java.lang.Boolean $r6;
        org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor r0;
        java.lang.Object $r3;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r7, $r8;
        boolean $z0;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor;

        r7 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()>();

        $r2 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$ConfigurationKeys: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey DEFAULT_OPERATOR>;

        $r3 = virtualinvoke $r1.<org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler: java.lang.Object get(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey)>($r2);

        r4 = (org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$Operator) $r3;

        if r4 != null goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("StandardQueryConfigHandler.ConfigurationKeys.DEFAULT_OPERATOR should be set on the QueryConfigHandler");

        throw $r9;

     label1:
        $r5 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$Operator: org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$Operator AND>;

        if $r5 != r4 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        r0.<org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor: java.lang.Boolean usingAnd> = $r6;

        $r8 = specialinvoke r0.<org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode processIteration(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)>(r7);

        return $r8;
    }

    protected void processChildren(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        java.util.Iterator $r2;
        java.util.List $r1;
        int $i0;
        java.lang.Object $r3;
        org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor r4;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r0, r5;
        boolean $z0;

        r4 := @this: org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor;

        r0 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        $r1 = interfaceinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: java.util.List getChildren()>();

        if $r1 == null goto label2;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 <= 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) $r3;

        specialinvoke r4.<org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode processIteration(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)>(r5);

        goto label1;

     label2:
        return;
    }

    private org.apache.lucene.queryparser.flexible.core.nodes.QueryNode processIteration(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor r0;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode $r1, $r2, r3;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor;

        r3 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode preProcessNode(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)>(r3);

        virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor: void processChildren(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)>($r1);

        $r2 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode postProcessNode(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)>($r1);

        return $r2;
    }

    protected void fillChildrenBufferAndApplyModifiery(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)
    {
        java.util.Iterator $r2;
        java.util.ArrayList $r6, $r7;
        org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier $r9;
        java.util.List $r1;
        java.lang.Object $r3, $r8;
        org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor r5;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r0, r4, $r10;
        boolean $z0, $z1, $z2;

        r5 := @this: org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor;

        r0 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        $r1 = interfaceinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: java.util.List getChildren()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) $r3;

        $z1 = interfaceinvoke r4.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: boolean containsTag(java.lang.String)>("remove");

        if $z1 == 0 goto label2;

        virtualinvoke r5.<org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor: void fillChildrenBufferAndApplyModifiery(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)>(r4);

        goto label4;

     label2:
        $z2 = interfaceinvoke r4.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: boolean containsTag(java.lang.String)>("wrapWithModifier");

        if $z2 == 0 goto label3;

        $r7 = r5.<org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor: java.util.ArrayList childrenBuffer>;

        $r8 = interfaceinvoke r4.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: java.lang.Object getTag(java.lang.String)>("wrapWithModifier");

        $r9 = (org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier) $r8;

        $r10 = specialinvoke r5.<org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode applyModifier(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode,org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier)>(r4, $r9);

        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>($r10);

        goto label4;

     label3:
        $r6 = r5.<org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor: java.util.ArrayList childrenBuffer>;

        virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>(r4);

     label4:
        goto label1;

     label5:
        return;
    }

    protected org.apache.lucene.queryparser.flexible.core.nodes.QueryNode postProcessNode(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor r1;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r0;
        boolean $z0;
        java.util.ArrayList $r2, $r3;

        r1 := @this: org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor;

        r0 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        $z0 = interfaceinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: boolean containsTag(java.lang.String)>("booleanRoot");

        if $z0 == 0 goto label1;

        $r2 = r1.<org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor: java.util.ArrayList childrenBuffer>;

        virtualinvoke $r2.<java.util.ArrayList: void clear()>();

        virtualinvoke r1.<org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor: void fillChildrenBufferAndApplyModifiery(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)>(r0);

        $r3 = r1.<org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor: java.util.ArrayList childrenBuffer>;

        interfaceinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: void set(java.util.List)>($r3);

     label1:
        return r0;
    }

    protected org.apache.lucene.queryparser.flexible.core.nodes.QueryNode preProcessNode(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier $r3;
        java.lang.Boolean $r4, $r5, $r6;
        org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor r2;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r0, $r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r2 := @this: org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor;

        r0 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        $r1 = interfaceinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode getParent()>();

        $z0 = r0 instanceof org.apache.lucene.queryparser.flexible.core.nodes.BooleanQueryNode;

        if $z0 == 0 goto label2;

        $z5 = $r1 instanceof org.apache.lucene.queryparser.flexible.core.nodes.BooleanQueryNode;

        if $z5 == 0 goto label1;

        $r6 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: void setTag(java.lang.String,java.lang.Object)>("remove", $r6);

        goto label4;

     label1:
        $r5 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: void setTag(java.lang.String,java.lang.Object)>("booleanRoot", $r5);

        goto label4;

     label2:
        $z1 = $r1 instanceof org.apache.lucene.queryparser.flexible.core.nodes.BooleanQueryNode;

        if $z1 == 0 goto label4;

        $z2 = $r1 instanceof org.apache.lucene.queryparser.flexible.core.nodes.AndQueryNode;

        if $z2 != 0 goto label3;

        $r4 = r2.<org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor: java.lang.Boolean usingAnd>;

        $z3 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z3 == 0 goto label4;

        $z4 = virtualinvoke r2.<org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor: boolean isDefaultBooleanQueryNode(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)>($r1);

        if $z4 == 0 goto label4;

     label3:
        $r3 = <org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier: org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier MOD_REQ>;

        virtualinvoke r2.<org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor: void tagModifierButDoNotOverride(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode,org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier)>(r0, $r3);

     label4:
        return r0;
    }

    protected boolean isDefaultBooleanQueryNode(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)
    {
        java.lang.Class $r1, $r2;
        org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor r3;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r0;
        boolean $z0, $z1;

        r3 := @this: org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor;

        r0 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        if r0 == null goto label1;

        $r1 = class "Lorg/apache/lucene/queryparser/flexible/core/nodes/BooleanQueryNode;";

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private org.apache.lucene.queryparser.flexible.core.nodes.QueryNode applyModifier(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier)
    {
        org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier $r2, $r3, r6;
        org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode r1, $r4;
        org.apache.lucene.queryparser.flexible.standard.nodes.BooleanModifierNode $r7;
        org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor r8;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r0, $r5;
        boolean $z0;

        r8 := @this: org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor;

        r0 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        r6 := @parameter1: org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier;

        $z0 = r0 instanceof org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode;

        if $z0 != 0 goto label1;

        $r7 = new org.apache.lucene.queryparser.flexible.standard.nodes.BooleanModifierNode;

        specialinvoke $r7.<org.apache.lucene.queryparser.flexible.standard.nodes.BooleanModifierNode: void <init>(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode,org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier)>(r0, r6);

        return $r7;

     label1:
        r1 = (org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode) r0;

        $r2 = virtualinvoke r1.<org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode: org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier getModifier()>();

        $r3 = <org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier: org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier MOD_NONE>;

        if $r2 != $r3 goto label2;

        $r4 = new org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode;

        $r5 = virtualinvoke r1.<org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode getChild()>();

        specialinvoke $r4.<org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode: void <init>(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode,org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier)>($r5, r6);

        return $r4;

     label2:
        return r0;
    }

    protected void tagModifierButDoNotOverride(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier)
    {
        org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier $r1, $r3, $r4, r5;
        org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode r2;
        org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor r6;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r0;
        boolean $z0;

        r6 := @this: org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor;

        r0 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        r5 := @parameter1: org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier;

        $z0 = r0 instanceof org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode;

        if $z0 == 0 goto label2;

        r2 = (org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode) r0;

        $r3 = virtualinvoke r2.<org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode: org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier getModifier()>();

        $r4 = <org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier: org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier MOD_NONE>;

        if $r3 != $r4 goto label1;

        interfaceinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: void setTag(java.lang.String,java.lang.Object)>("wrapWithModifier", r5);

     label1:
        goto label3;

     label2:
        $r1 = <org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier: org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode$Modifier MOD_REQ>;

        interfaceinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: void setTag(java.lang.String,java.lang.Object)>("wrapWithModifier", $r1);

     label3:
        return;
    }

    public void setQueryConfigHandler(org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler)
    {
        org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor r0;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler r1;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor;

        r1 := @parameter0: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler;

        r0.<org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler queryConfigHandler> = r1;

        return;
    }

    public org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()
    {
        org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor r0;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler $r1;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor;

        $r1 = r0.<org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler queryConfigHandler>;

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor: java.lang.String TAG_BOOLEAN_ROOT> = "booleanRoot";

        <org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor: java.lang.String TAG_MODIFIER> = "wrapWithModifier";

        <org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor: java.lang.String TAG_REMOVE> = "remove";

        return;
    }
}
