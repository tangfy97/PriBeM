public final class org.codehaus.jackson.map.type.MapType extends org.codehaus.jackson.map.type.MapLikeType
{

    private void <init>(java.lang.Class, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.type.MapType r0;
        org.codehaus.jackson.type.JavaType r2, r3;
        java.lang.Class r1;

        r0 := @this: org.codehaus.jackson.map.type.MapType;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        r3 := @parameter2: org.codehaus.jackson.type.JavaType;

        specialinvoke r0.<org.codehaus.jackson.map.type.MapType: void <init>(java.lang.Class,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType,java.lang.Object,java.lang.Object)>(r1, r2, r3, null, null);

        return;
    }

    private void <init>(java.lang.Class, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.type.JavaType, java.lang.Object, java.lang.Object)
    {
        org.codehaus.jackson.map.type.MapType r0;
        org.codehaus.jackson.type.JavaType r2, r3;
        java.lang.Class r1;
        java.lang.Object r4, r5;

        r0 := @this: org.codehaus.jackson.map.type.MapType;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        r3 := @parameter2: org.codehaus.jackson.type.JavaType;

        r4 := @parameter3: java.lang.Object;

        r5 := @parameter4: java.lang.Object;

        specialinvoke r0.<org.codehaus.jackson.map.type.MapLikeType: void <init>(java.lang.Class,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType,java.lang.Object,java.lang.Object)>(r1, r2, r3, r4, r5);

        return;
    }

    public static org.codehaus.jackson.map.type.MapType construct(java.lang.Class, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.type.MapType $r0;
        org.codehaus.jackson.type.JavaType r2, r3;
        java.lang.Class r1;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        r3 := @parameter2: org.codehaus.jackson.type.JavaType;

        $r0 = new org.codehaus.jackson.map.type.MapType;

        specialinvoke $r0.<org.codehaus.jackson.map.type.MapType: void <init>(java.lang.Class,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType,java.lang.Object,java.lang.Object)>(r1, r2, r3, null, null);

        return $r0;
    }

    protected org.codehaus.jackson.type.JavaType _narrow(java.lang.Class)
    {
        org.codehaus.jackson.map.type.MapType $r0, r2;
        org.codehaus.jackson.type.JavaType $r5, $r6;
        java.lang.Class r1;
        java.lang.Object $r3, $r4;

        r2 := @this: org.codehaus.jackson.map.type.MapType;

        r1 := @parameter0: java.lang.Class;

        $r0 = new org.codehaus.jackson.map.type.MapType;

        $r6 = r2.<org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.type.JavaType _keyType>;

        $r5 = r2.<org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.type.JavaType _valueType>;

        $r4 = r2.<org.codehaus.jackson.map.type.MapType: java.lang.Object _valueHandler>;

        $r3 = r2.<org.codehaus.jackson.map.type.MapType: java.lang.Object _typeHandler>;

        specialinvoke $r0.<org.codehaus.jackson.map.type.MapType: void <init>(java.lang.Class,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType,java.lang.Object,java.lang.Object)>(r1, $r6, $r5, $r4, $r3);

        return $r0;
    }

    public org.codehaus.jackson.type.JavaType narrowContentsBy(java.lang.Class)
    {
        org.codehaus.jackson.map.type.MapType r1, $r4;
        org.codehaus.jackson.type.JavaType $r2, $r5, $r7, $r8;
        java.lang.Class r0, $r3, $r6;
        java.lang.Object $r9, $r10;

        r1 := @this: org.codehaus.jackson.map.type.MapType;

        r0 := @parameter0: java.lang.Class;

        $r2 = r1.<org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.type.JavaType _valueType>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        if r0 != $r3 goto label1;

        return r1;

     label1:
        $r4 = new org.codehaus.jackson.map.type.MapType;

        $r6 = r1.<org.codehaus.jackson.map.type.MapType: java.lang.Class _class>;

        $r7 = r1.<org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.type.JavaType _keyType>;

        $r5 = r1.<org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.type.JavaType _valueType>;

        $r8 = virtualinvoke $r5.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType narrowBy(java.lang.Class)>(r0);

        $r10 = r1.<org.codehaus.jackson.map.type.MapType: java.lang.Object _valueHandler>;

        $r9 = r1.<org.codehaus.jackson.map.type.MapType: java.lang.Object _typeHandler>;

        specialinvoke $r4.<org.codehaus.jackson.map.type.MapType: void <init>(java.lang.Class,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType,java.lang.Object,java.lang.Object)>($r6, $r7, $r8, $r10, $r9);

        return $r4;
    }

    public org.codehaus.jackson.type.JavaType widenContentsBy(java.lang.Class)
    {
        org.codehaus.jackson.map.type.MapType r1, $r4;
        org.codehaus.jackson.type.JavaType $r2, $r5, $r7, $r8;
        java.lang.Class r0, $r3, $r6;
        java.lang.Object $r9, $r10;

        r1 := @this: org.codehaus.jackson.map.type.MapType;

        r0 := @parameter0: java.lang.Class;

        $r2 = r1.<org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.type.JavaType _valueType>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        if r0 != $r3 goto label1;

        return r1;

     label1:
        $r4 = new org.codehaus.jackson.map.type.MapType;

        $r6 = r1.<org.codehaus.jackson.map.type.MapType: java.lang.Class _class>;

        $r7 = r1.<org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.type.JavaType _keyType>;

        $r5 = r1.<org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.type.JavaType _valueType>;

        $r8 = virtualinvoke $r5.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType widenBy(java.lang.Class)>(r0);

        $r10 = r1.<org.codehaus.jackson.map.type.MapType: java.lang.Object _valueHandler>;

        $r9 = r1.<org.codehaus.jackson.map.type.MapType: java.lang.Object _typeHandler>;

        specialinvoke $r4.<org.codehaus.jackson.map.type.MapType: void <init>(java.lang.Class,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType,java.lang.Object,java.lang.Object)>($r6, $r7, $r8, $r10, $r9);

        return $r4;
    }

    public org.codehaus.jackson.type.JavaType narrowKey(java.lang.Class)
    {
        org.codehaus.jackson.map.type.MapType r1, $r4;
        org.codehaus.jackson.type.JavaType $r2, $r5, $r7, $r10;
        java.lang.Class r0, $r3, $r6;
        java.lang.Object $r8, $r9;

        r1 := @this: org.codehaus.jackson.map.type.MapType;

        r0 := @parameter0: java.lang.Class;

        $r2 = r1.<org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.type.JavaType _keyType>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        if r0 != $r3 goto label1;

        return r1;

     label1:
        $r4 = new org.codehaus.jackson.map.type.MapType;

        $r6 = r1.<org.codehaus.jackson.map.type.MapType: java.lang.Class _class>;

        $r5 = r1.<org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.type.JavaType _keyType>;

        $r7 = virtualinvoke $r5.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType narrowBy(java.lang.Class)>(r0);

        $r10 = r1.<org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.type.JavaType _valueType>;

        $r9 = r1.<org.codehaus.jackson.map.type.MapType: java.lang.Object _valueHandler>;

        $r8 = r1.<org.codehaus.jackson.map.type.MapType: java.lang.Object _typeHandler>;

        specialinvoke $r4.<org.codehaus.jackson.map.type.MapType: void <init>(java.lang.Class,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType,java.lang.Object,java.lang.Object)>($r6, $r7, $r10, $r9, $r8);

        return $r4;
    }

    public org.codehaus.jackson.type.JavaType widenKey(java.lang.Class)
    {
        org.codehaus.jackson.map.type.MapType r1, $r4;
        org.codehaus.jackson.type.JavaType $r2, $r5, $r7, $r10;
        java.lang.Class r0, $r3, $r6;
        java.lang.Object $r8, $r9;

        r1 := @this: org.codehaus.jackson.map.type.MapType;

        r0 := @parameter0: java.lang.Class;

        $r2 = r1.<org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.type.JavaType _keyType>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        if r0 != $r3 goto label1;

        return r1;

     label1:
        $r4 = new org.codehaus.jackson.map.type.MapType;

        $r6 = r1.<org.codehaus.jackson.map.type.MapType: java.lang.Class _class>;

        $r5 = r1.<org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.type.JavaType _keyType>;

        $r7 = virtualinvoke $r5.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType widenBy(java.lang.Class)>(r0);

        $r10 = r1.<org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.type.JavaType _valueType>;

        $r9 = r1.<org.codehaus.jackson.map.type.MapType: java.lang.Object _valueHandler>;

        $r8 = r1.<org.codehaus.jackson.map.type.MapType: java.lang.Object _typeHandler>;

        specialinvoke $r4.<org.codehaus.jackson.map.type.MapType: void <init>(java.lang.Class,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType,java.lang.Object,java.lang.Object)>($r6, $r7, $r10, $r9, $r8);

        return $r4;
    }

    public org.codehaus.jackson.map.type.MapType withTypeHandler(java.lang.Object)
    {
        org.codehaus.jackson.map.type.MapType $r0, r1;
        org.codehaus.jackson.type.JavaType $r4, $r5;
        java.lang.Object r2, $r3;
        java.lang.Class $r6;

        r1 := @this: org.codehaus.jackson.map.type.MapType;

        r2 := @parameter0: java.lang.Object;

        $r0 = new org.codehaus.jackson.map.type.MapType;

        $r6 = r1.<org.codehaus.jackson.map.type.MapType: java.lang.Class _class>;

        $r5 = r1.<org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.type.JavaType _keyType>;

        $r4 = r1.<org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.type.JavaType _valueType>;

        $r3 = r1.<org.codehaus.jackson.map.type.MapType: java.lang.Object _valueHandler>;

        specialinvoke $r0.<org.codehaus.jackson.map.type.MapType: void <init>(java.lang.Class,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType,java.lang.Object,java.lang.Object)>($r6, $r5, $r4, $r3, r2);

        return $r0;
    }

    public org.codehaus.jackson.map.type.MapType withContentTypeHandler(java.lang.Object)
    {
        org.codehaus.jackson.map.type.MapType $r0, r1;
        org.codehaus.jackson.type.JavaType $r3, $r5, $r6;
        java.lang.Object r2, $r7, $r8;
        java.lang.Class $r4;

        r1 := @this: org.codehaus.jackson.map.type.MapType;

        r2 := @parameter0: java.lang.Object;

        $r0 = new org.codehaus.jackson.map.type.MapType;

        $r4 = r1.<org.codehaus.jackson.map.type.MapType: java.lang.Class _class>;

        $r5 = r1.<org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.type.JavaType _keyType>;

        $r3 = r1.<org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.type.JavaType _valueType>;

        $r6 = virtualinvoke $r3.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType withTypeHandler(java.lang.Object)>(r2);

        $r8 = r1.<org.codehaus.jackson.map.type.MapType: java.lang.Object _valueHandler>;

        $r7 = r1.<org.codehaus.jackson.map.type.MapType: java.lang.Object _typeHandler>;

        specialinvoke $r0.<org.codehaus.jackson.map.type.MapType: void <init>(java.lang.Class,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType,java.lang.Object,java.lang.Object)>($r4, $r5, $r6, $r8, $r7);

        return $r0;
    }

    public org.codehaus.jackson.map.type.MapType withValueHandler(java.lang.Object)
    {
        org.codehaus.jackson.map.type.MapType $r0, r1;
        org.codehaus.jackson.type.JavaType $r4, $r5;
        java.lang.Object r2, $r3;
        java.lang.Class $r6;

        r1 := @this: org.codehaus.jackson.map.type.MapType;

        r2 := @parameter0: java.lang.Object;

        $r0 = new org.codehaus.jackson.map.type.MapType;

        $r6 = r1.<org.codehaus.jackson.map.type.MapType: java.lang.Class _class>;

        $r5 = r1.<org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.type.JavaType _keyType>;

        $r4 = r1.<org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.type.JavaType _valueType>;

        $r3 = r1.<org.codehaus.jackson.map.type.MapType: java.lang.Object _typeHandler>;

        specialinvoke $r0.<org.codehaus.jackson.map.type.MapType: void <init>(java.lang.Class,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType,java.lang.Object,java.lang.Object)>($r6, $r5, $r4, r2, $r3);

        return $r0;
    }

    public org.codehaus.jackson.map.type.MapType withContentValueHandler(java.lang.Object)
    {
        org.codehaus.jackson.map.type.MapType $r0, r1;
        org.codehaus.jackson.type.JavaType $r3, $r5, $r6;
        java.lang.Object r2, $r7, $r8;
        java.lang.Class $r4;

        r1 := @this: org.codehaus.jackson.map.type.MapType;

        r2 := @parameter0: java.lang.Object;

        $r0 = new org.codehaus.jackson.map.type.MapType;

        $r4 = r1.<org.codehaus.jackson.map.type.MapType: java.lang.Class _class>;

        $r5 = r1.<org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.type.JavaType _keyType>;

        $r3 = r1.<org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.type.JavaType _valueType>;

        $r6 = virtualinvoke $r3.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType withValueHandler(java.lang.Object)>(r2);

        $r8 = r1.<org.codehaus.jackson.map.type.MapType: java.lang.Object _valueHandler>;

        $r7 = r1.<org.codehaus.jackson.map.type.MapType: java.lang.Object _typeHandler>;

        specialinvoke $r0.<org.codehaus.jackson.map.type.MapType: void <init>(java.lang.Class,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType,java.lang.Object,java.lang.Object)>($r4, $r5, $r6, $r8, $r7);

        return $r0;
    }

    public org.codehaus.jackson.map.type.MapType withKeyTypeHandler(java.lang.Object)
    {
        org.codehaus.jackson.map.type.MapType $r0, r1;
        org.codehaus.jackson.type.JavaType $r3, $r5, $r8;
        java.lang.Object r2, $r6, $r7;
        java.lang.Class $r4;

        r1 := @this: org.codehaus.jackson.map.type.MapType;

        r2 := @parameter0: java.lang.Object;

        $r0 = new org.codehaus.jackson.map.type.MapType;

        $r4 = r1.<org.codehaus.jackson.map.type.MapType: java.lang.Class _class>;

        $r3 = r1.<org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.type.JavaType _keyType>;

        $r5 = virtualinvoke $r3.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType withTypeHandler(java.lang.Object)>(r2);

        $r8 = r1.<org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.type.JavaType _valueType>;

        $r7 = r1.<org.codehaus.jackson.map.type.MapType: java.lang.Object _valueHandler>;

        $r6 = r1.<org.codehaus.jackson.map.type.MapType: java.lang.Object _typeHandler>;

        specialinvoke $r0.<org.codehaus.jackson.map.type.MapType: void <init>(java.lang.Class,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType,java.lang.Object,java.lang.Object)>($r4, $r5, $r8, $r7, $r6);

        return $r0;
    }

    public org.codehaus.jackson.map.type.MapType withKeyValueHandler(java.lang.Object)
    {
        org.codehaus.jackson.map.type.MapType $r0, r1;
        org.codehaus.jackson.type.JavaType $r3, $r5, $r8;
        java.lang.Object r2, $r6, $r7;
        java.lang.Class $r4;

        r1 := @this: org.codehaus.jackson.map.type.MapType;

        r2 := @parameter0: java.lang.Object;

        $r0 = new org.codehaus.jackson.map.type.MapType;

        $r4 = r1.<org.codehaus.jackson.map.type.MapType: java.lang.Class _class>;

        $r3 = r1.<org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.type.JavaType _keyType>;

        $r5 = virtualinvoke $r3.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType withValueHandler(java.lang.Object)>(r2);

        $r8 = r1.<org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.type.JavaType _valueType>;

        $r7 = r1.<org.codehaus.jackson.map.type.MapType: java.lang.Object _valueHandler>;

        $r6 = r1.<org.codehaus.jackson.map.type.MapType: java.lang.Object _typeHandler>;

        specialinvoke $r0.<org.codehaus.jackson.map.type.MapType: void <init>(java.lang.Class,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType,java.lang.Object,java.lang.Object)>($r4, $r5, $r8, $r7, $r6);

        return $r0;
    }

    public java.lang.String toString()
    {
        org.codehaus.jackson.map.type.MapType r2;
        org.codehaus.jackson.type.JavaType $r7, $r10;
        java.lang.StringBuilder $r0, $r1, $r5, $r6, $r8, $r9, $r11, $r12;
        java.lang.Class $r3;
        java.lang.String $r4, $r13;

        r2 := @this: org.codehaus.jackson.map.type.MapType;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[map type; class ");

        $r3 = r2.<org.codehaus.jackson.map.type.MapType: java.lang.Class _class>;

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r7 = r2.<org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.type.JavaType _keyType>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -> ");

        $r10 = r2.<org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.type.JavaType _valueType>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;
    }

    public volatile org.codehaus.jackson.map.type.MapLikeType withKeyValueHandler(java.lang.Object)
    {
        java.lang.Object r1;
        org.codehaus.jackson.map.type.MapType r0, $r2;

        r0 := @this: org.codehaus.jackson.map.type.MapType;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.map.type.MapType withKeyValueHandler(java.lang.Object)>(r1);

        return $r2;
    }

    public volatile org.codehaus.jackson.map.type.MapLikeType withKeyTypeHandler(java.lang.Object)
    {
        java.lang.Object r1;
        org.codehaus.jackson.map.type.MapType r0, $r2;

        r0 := @this: org.codehaus.jackson.map.type.MapType;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.map.type.MapType withKeyTypeHandler(java.lang.Object)>(r1);

        return $r2;
    }

    public volatile org.codehaus.jackson.map.type.MapLikeType withContentValueHandler(java.lang.Object)
    {
        java.lang.Object r1;
        org.codehaus.jackson.map.type.MapType r0, $r2;

        r0 := @this: org.codehaus.jackson.map.type.MapType;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.map.type.MapType withContentValueHandler(java.lang.Object)>(r1);

        return $r2;
    }

    public volatile org.codehaus.jackson.map.type.MapLikeType withValueHandler(java.lang.Object)
    {
        java.lang.Object r1;
        org.codehaus.jackson.map.type.MapType r0, $r2;

        r0 := @this: org.codehaus.jackson.map.type.MapType;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.map.type.MapType withValueHandler(java.lang.Object)>(r1);

        return $r2;
    }

    public volatile org.codehaus.jackson.map.type.MapLikeType withContentTypeHandler(java.lang.Object)
    {
        java.lang.Object r1;
        org.codehaus.jackson.map.type.MapType r0, $r2;

        r0 := @this: org.codehaus.jackson.map.type.MapType;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.map.type.MapType withContentTypeHandler(java.lang.Object)>(r1);

        return $r2;
    }

    public volatile org.codehaus.jackson.map.type.MapLikeType withTypeHandler(java.lang.Object)
    {
        java.lang.Object r1;
        org.codehaus.jackson.map.type.MapType r0, $r2;

        r0 := @this: org.codehaus.jackson.map.type.MapType;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.map.type.MapType withTypeHandler(java.lang.Object)>(r1);

        return $r2;
    }

    public volatile org.codehaus.jackson.type.JavaType withContentValueHandler(java.lang.Object)
    {
        java.lang.Object r1;
        org.codehaus.jackson.map.type.MapType r0, $r2;

        r0 := @this: org.codehaus.jackson.map.type.MapType;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.map.type.MapType withContentValueHandler(java.lang.Object)>(r1);

        return $r2;
    }

    public volatile org.codehaus.jackson.type.JavaType withValueHandler(java.lang.Object)
    {
        java.lang.Object r1;
        org.codehaus.jackson.map.type.MapType r0, $r2;

        r0 := @this: org.codehaus.jackson.map.type.MapType;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.map.type.MapType withValueHandler(java.lang.Object)>(r1);

        return $r2;
    }

    public volatile org.codehaus.jackson.type.JavaType withContentTypeHandler(java.lang.Object)
    {
        java.lang.Object r1;
        org.codehaus.jackson.map.type.MapType r0, $r2;

        r0 := @this: org.codehaus.jackson.map.type.MapType;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.map.type.MapType withContentTypeHandler(java.lang.Object)>(r1);

        return $r2;
    }

    public volatile org.codehaus.jackson.type.JavaType withTypeHandler(java.lang.Object)
    {
        java.lang.Object r1;
        org.codehaus.jackson.map.type.MapType r0, $r2;

        r0 := @this: org.codehaus.jackson.map.type.MapType;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.map.type.MapType withTypeHandler(java.lang.Object)>(r1);

        return $r2;
    }
}
