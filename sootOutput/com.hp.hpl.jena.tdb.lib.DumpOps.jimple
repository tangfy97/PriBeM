public class com.hp.hpl.jena.tdb.lib.DumpOps extends java.lang.Object
{

    public void <init>()
    {
        com.hp.hpl.jena.tdb.lib.DumpOps r0;

        r0 := @this: com.hp.hpl.jena.tdb.lib.DumpOps;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void dump(com.hp.hpl.jena.query.Dataset)
    {
        com.hp.hpl.jena.tdb.store.QuadTable $r6;
        com.hp.hpl.jena.tdb.index.TupleIndex[] $r15, $r17, $r24;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB $r2, r3;
        java.util.HashSet $r10;
        com.hp.hpl.jena.tdb.index.TupleTable $r14, $r16, $r23;
        com.hp.hpl.jena.tdb.nodetable.NodeTable $r8, $r9, $r12, $r13, $r21, $r25, $r26;
        boolean $z0;
        java.io.PrintStream $r11, $r18;
        com.hp.hpl.jena.tdb.store.DatasetPrefixesTDB $r19;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r1;
        com.hp.hpl.jena.tdb.store.TripleTable $r4;
        com.hp.hpl.jena.tdb.nodetable.NodeTupleTable $r5, $r7, $r20, $r22;
        arq.cmd.CmdException $r27;
        com.hp.hpl.jena.query.Dataset r0;

        r0 := @parameter0: com.hp.hpl.jena.query.Dataset;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.query.Dataset: com.hp.hpl.jena.sparql.core.DatasetGraph asDatasetGraph()>();

        $r2 = (com.hp.hpl.jena.tdb.store.DatasetGraphTDB) $r1;

        r3 = (com.hp.hpl.jena.tdb.store.DatasetGraphTDB) $r2;

        $r4 = virtualinvoke r3.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.TripleTable getTripleTable()>();

        $r5 = virtualinvoke $r4.<com.hp.hpl.jena.tdb.store.TripleTable: com.hp.hpl.jena.tdb.nodetable.NodeTupleTable getNodeTupleTable()>();

        $r6 = virtualinvoke r3.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.QuadTable getQuadTable()>();

        $r7 = virtualinvoke $r6.<com.hp.hpl.jena.tdb.store.QuadTable: com.hp.hpl.jena.tdb.nodetable.NodeTupleTable getNodeTupleTable()>();

        $r8 = interfaceinvoke $r5.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTable: com.hp.hpl.jena.tdb.nodetable.NodeTable getNodeTable()>();

        $r9 = interfaceinvoke $r7.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTable: com.hp.hpl.jena.tdb.nodetable.NodeTable getNodeTable()>();

        if $r8 == $r9 goto label1;

        $r27 = new arq.cmd.CmdException;

        specialinvoke $r27.<arq.cmd.CmdException: void <init>(java.lang.String)>("Different node tables for triples and quads");

        throw $r27;

     label1:
        interfaceinvoke $r5.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTable: com.hp.hpl.jena.tdb.nodetable.NodeTable getNodeTable()>();

        $r10 = new java.util.HashSet;

        specialinvoke $r10.<java.util.HashSet: void <init>()>();

        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void print(java.lang.String)>("## Node Table\n");

        $r12 = interfaceinvoke $r5.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTable: com.hp.hpl.jena.tdb.nodetable.NodeTable getNodeTable()>();

        staticinvoke <com.hp.hpl.jena.tdb.lib.DumpOps: void dumpNodeTable(com.hp.hpl.jena.tdb.nodetable.NodeTable,java.util.Set)>($r12, $r10);

        $r13 = interfaceinvoke $r7.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTable: com.hp.hpl.jena.tdb.nodetable.NodeTable getNodeTable()>();

        staticinvoke <com.hp.hpl.jena.tdb.lib.DumpOps: void dumpNodeTable(com.hp.hpl.jena.tdb.nodetable.NodeTable,java.util.Set)>($r13, $r10);

        $r14 = interfaceinvoke $r5.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTable: com.hp.hpl.jena.tdb.index.TupleTable getTupleTable()>();

        $r15 = virtualinvoke $r14.<com.hp.hpl.jena.tdb.index.TupleTable: com.hp.hpl.jena.tdb.index.TupleIndex[] getIndexes()>();

        staticinvoke <com.hp.hpl.jena.tdb.lib.DumpOps: void dumpTupleIndexes(com.hp.hpl.jena.tdb.index.TupleIndex[])>($r15);

        $r16 = interfaceinvoke $r7.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTable: com.hp.hpl.jena.tdb.index.TupleTable getTupleTable()>();

        $r17 = virtualinvoke $r16.<com.hp.hpl.jena.tdb.index.TupleTable: com.hp.hpl.jena.tdb.index.TupleIndex[] getIndexes()>();

        staticinvoke <com.hp.hpl.jena.tdb.lib.DumpOps: void dumpTupleIndexes(com.hp.hpl.jena.tdb.index.TupleIndex[])>($r17);

        $r18 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r18.<java.io.PrintStream: void print(java.lang.String)>("## Prefix Table\n");

        $r19 = virtualinvoke r3.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.DatasetPrefixesTDB getPrefixes()>();

        $r20 = virtualinvoke $r19.<com.hp.hpl.jena.tdb.store.DatasetPrefixesTDB: com.hp.hpl.jena.tdb.nodetable.NodeTupleTable getNodeTupleTable()>();

        $r21 = interfaceinvoke $r20.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTable: com.hp.hpl.jena.tdb.nodetable.NodeTable getNodeTable()>();

        $z0 = interfaceinvoke $r10.<java.util.Set: boolean contains(java.lang.Object)>($r21);

        if $z0 != 0 goto label2;

        $r25 = interfaceinvoke $r20.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTable: com.hp.hpl.jena.tdb.nodetable.NodeTable getNodeTable()>();

        staticinvoke <com.hp.hpl.jena.tdb.lib.DumpOps: void dumpNodeTable(com.hp.hpl.jena.tdb.nodetable.NodeTable,java.util.Set)>($r25, $r10);

        $r26 = interfaceinvoke $r20.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTable: com.hp.hpl.jena.tdb.nodetable.NodeTable getNodeTable()>();

        interfaceinvoke $r10.<java.util.Set: boolean add(java.lang.Object)>($r26);

     label2:
        $r22 = virtualinvoke $r19.<com.hp.hpl.jena.tdb.store.DatasetPrefixesTDB: com.hp.hpl.jena.tdb.nodetable.NodeTupleTable getNodeTupleTable()>();

        $r23 = interfaceinvoke $r22.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTable: com.hp.hpl.jena.tdb.index.TupleTable getTupleTable()>();

        $r24 = virtualinvoke $r23.<com.hp.hpl.jena.tdb.index.TupleTable: com.hp.hpl.jena.tdb.index.TupleIndex[] getIndexes()>();

        staticinvoke <com.hp.hpl.jena.tdb.lib.DumpOps: void dumpTupleIndexes(com.hp.hpl.jena.tdb.index.TupleIndex[])>($r24);

        return;
    }

    public static void dumpNodeTable(com.hp.hpl.jena.tdb.nodetable.NodeTable, java.util.Set)
    {
        java.lang.Object[] $r10;
        long $l0;
        com.hp.hpl.jena.graph.Node r8;
        com.hp.hpl.jena.tdb.nodetable.NodeTable r1;
        java.lang.Long $r12;
        com.hp.hpl.jena.tdb.store.NodeId r6;
        java.lang.String $r9;
        boolean $z0, $z1;
        java.io.PrintStream $r11;
        java.util.Iterator $r2;
        java.util.Set r0;
        org.apache.jena.atlas.lib.Pair r4;
        java.lang.Object $r3, $r5, $r7;

        r1 := @parameter0: com.hp.hpl.jena.tdb.nodetable.NodeTable;

        r0 := @parameter1: java.util.Set;

        $z0 = interfaceinvoke r0.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.tdb.nodetable.NodeTable: java.util.Iterator all()>();

     label2:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.jena.atlas.lib.Pair) $r3;

        $r5 = virtualinvoke r4.<org.apache.jena.atlas.lib.Pair: java.lang.Object car()>();

        r6 = (com.hp.hpl.jena.tdb.store.NodeId) $r5;

        $r7 = virtualinvoke r4.<org.apache.jena.atlas.lib.Pair: java.lang.Object cdr()>();

        r8 = (com.hp.hpl.jena.graph.Node) $r7;

        $r9 = staticinvoke <com.hp.hpl.jena.tdb.lib.NodeFmtLib: java.lang.String serialize(com.hp.hpl.jena.graph.Node)>(r8);

        $r11 = <java.lang.System: java.io.PrintStream out>;

        $r10 = newarray (java.lang.Object)[2];

        $l0 = virtualinvoke r6.<com.hp.hpl.jena.tdb.store.NodeId: long getId()>();

        $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r10[0] = $r12;

        $r10[1] = $r9;

        virtualinvoke $r11.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("%016X %s\n", $r10);

        goto label2;

     label3:
        interfaceinvoke r0.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    public static void dumpTupleIndexes(com.hp.hpl.jena.tdb.index.TupleIndex[])
    {
        com.hp.hpl.jena.tdb.index.TupleIndex[] r0;
        int i0, i1;
        com.hp.hpl.jena.tdb.index.TupleIndex r1;

        r0 := @parameter0: com.hp.hpl.jena.tdb.index.TupleIndex[];

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r1 = r0[i1];

        staticinvoke <com.hp.hpl.jena.tdb.lib.DumpOps: void dumpTupleIndex(com.hp.hpl.jena.tdb.index.TupleIndex)>(r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static void dumpTupleIndex(com.hp.hpl.jena.tdb.index.TupleIndex)
    {
        java.io.PrintStream $r1, $r11, $r12;
        java.util.Iterator $r8;
        org.apache.jena.atlas.lib.Tuple r10;
        com.hp.hpl.jena.tdb.index.TupleIndex r3;
        java.lang.StringBuilder $r0, $r2, $r5, $r6;
        java.lang.Object $r9;
        java.lang.String $r4, $r7;
        boolean $z0;

        r3 := @parameter0: com.hp.hpl.jena.tdb.index.TupleIndex;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("## ");

        $r4 = interfaceinvoke r3.<com.hp.hpl.jena.tdb.index.TupleIndex: java.lang.String getMapping()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void print(java.lang.String)>($r7);

        $r8 = interfaceinvoke r3.<com.hp.hpl.jena.tdb.index.TupleIndex: java.util.Iterator all()>();

     label1:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.apache.jena.atlas.lib.Tuple) $r9;

        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void print(java.lang.Object)>(r10);

        $r12 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r12.<java.io.PrintStream: void print(java.lang.String)>("\n");

        goto label1;

     label2:
        return;
    }

    public static void dumpBlockMgr(java.io.PrintStream, com.hp.hpl.jena.tdb.base.block.BlockMgr)
    {
        java.io.PrintStream r2;
        long $l0;
        java.nio.ByteBuffer $r9;
        java.lang.Exception $r10;
        com.hp.hpl.jena.tdb.base.block.BlockMgr r0;
        java.lang.Long $r5;
        com.hp.hpl.jena.tdb.base.block.Block $r1;
        int i1;
        java.lang.StringBuilder $r3, $r4, $r6, $r7;
        java.lang.String $r8;
        boolean $z0;

        r2 := @parameter0: java.io.PrintStream;

        r0 := @parameter1: com.hp.hpl.jena.tdb.base.block.BlockMgr;

     label1:
        i1 = 0;

     label2:
        if i1 >= 9999999 goto label4;

        $z0 = interfaceinvoke r0.<com.hp.hpl.jena.tdb.base.block.BlockMgr: boolean valid(int)>(i1);

        if $z0 != 0 goto label3;

        goto label4;

     label3:
        $l0 = (long) i1;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.tdb.base.block.BlockMgr: com.hp.hpl.jena.tdb.base.block.Block getRead(long)>($l0);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("id=");

        $r5 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.base.block.Block: java.lang.Long getId()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintStream: void print(java.lang.String)>($r8);

        $r9 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.base.block.Block: java.nio.ByteBuffer getByteBuffer()>();

        staticinvoke <org.apache.jena.atlas.lib.ByteBufferLib: void print(java.io.PrintStream,java.nio.ByteBuffer)>(r2, $r9);

        i1 = i1 + 1;

        goto label2;

     label4:
        goto label6;

     label5:
        $r10 := @caughtexception;

        virtualinvoke $r10.<java.lang.Exception: void printStackTrace()>();

     label6:
        return;

        catch java.lang.Exception from label1 to label4 with label5;
    }

    public static void dumpBPlusTree(java.io.PrintStream, com.hp.hpl.jena.tdb.index.bplustree.BPlusTree)
    {
        java.io.PrintStream r1;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTree r2;
        org.apache.jena.atlas.io.IndentedWriter $r0;

        r1 := @parameter0: java.io.PrintStream;

        r2 := @parameter1: com.hp.hpl.jena.tdb.index.bplustree.BPlusTree;

        $r0 = new org.apache.jena.atlas.io.IndentedWriter;

        specialinvoke $r0.<org.apache.jena.atlas.io.IndentedWriter: void <init>(java.io.OutputStream)>(r1);

        virtualinvoke r2.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTree: void dump(org.apache.jena.atlas.io.IndentedWriter)>($r0);

        return;
    }

    public static void dumpBPlusTreeBlocks(com.hp.hpl.jena.tdb.index.bplustree.BPlusTree)
    {
        java.io.PrintStream $r0, $r2, $r5, $r6;
        com.hp.hpl.jena.tdb.base.block.BlockMgr $r4, $r8;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTree r1;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecordsMgr $r3, $r7;

        r1 := @parameter0: com.hp.hpl.jena.tdb.index.bplustree.BPlusTree;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("Data blocks");

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTree: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecordsMgr getRecordsMgr()>();

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecordsMgr: com.hp.hpl.jena.tdb.base.block.BlockMgr getBlockMgr()>();

        staticinvoke <com.hp.hpl.jena.tdb.lib.DumpOps: void dumpBlockMgr(java.io.PrintStream,com.hp.hpl.jena.tdb.base.block.BlockMgr)>($r2, $r4);

        $r5 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("Node blocks");

        $r6 = <java.lang.System: java.io.PrintStream out>;

        $r7 = virtualinvoke r1.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTree: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecordsMgr getRecordsMgr()>();

        $r8 = virtualinvoke $r7.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecordsMgr: com.hp.hpl.jena.tdb.base.block.BlockMgr getBlockMgr()>();

        staticinvoke <com.hp.hpl.jena.tdb.lib.DumpOps: void dumpBlockMgr(java.io.PrintStream,com.hp.hpl.jena.tdb.base.block.BlockMgr)>($r6, $r8);

        return;
    }

    public static void dumpNodeTupleTable(com.hp.hpl.jena.tdb.index.TupleTable)
    {
        java.io.PrintStream $r7, $r8;
        java.util.Iterator $r4;
        org.apache.jena.atlas.lib.Tuple $r3, r6;
        com.hp.hpl.jena.tdb.store.NodeId[] r1;
        com.hp.hpl.jena.tdb.index.TupleTable r0;
        com.hp.hpl.jena.tdb.store.NodeId $r2;
        int $i0;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.tdb.index.TupleTable;

        $i0 = virtualinvoke r0.<com.hp.hpl.jena.tdb.index.TupleTable: int getTupleLen()>();

        r1 = newarray (com.hp.hpl.jena.tdb.store.NodeId)[$i0];

        $r2 = <com.hp.hpl.jena.tdb.store.NodeId: com.hp.hpl.jena.tdb.store.NodeId NodeIdAny>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>(r1, $r2);

        $r3 = staticinvoke <org.apache.jena.atlas.lib.Tuple: org.apache.jena.atlas.lib.Tuple create(java.lang.Object[])>(r1);

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.tdb.index.TupleTable: java.util.Iterator find(org.apache.jena.atlas.lib.Tuple)>($r3);

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.jena.atlas.lib.Tuple) $r5;

        $r7 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r7.<java.io.PrintStream: void print(java.lang.Object)>(r6);

        $r8 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r8.<java.io.PrintStream: void print(java.lang.String)>("\n");

        goto label1;

     label2:
        return;
    }
}
