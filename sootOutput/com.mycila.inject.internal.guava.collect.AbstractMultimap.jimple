abstract class com.mycila.inject.internal.guava.collect.AbstractMultimap extends java.lang.Object implements com.mycila.inject.internal.guava.collect.Multimap, java.io.Serializable
{
    private transient java.util.Map map;
    private transient int totalSize;
    private transient java.util.Set keySet;
    private transient com.mycila.inject.internal.guava.collect.Multiset multiset;
    private transient java.util.Collection valuesCollection;
    private transient java.util.Collection entries;
    private transient java.util.Map asMap;
    private static final long serialVersionUID;

    protected void <init>(java.util.Map)
    {
        com.mycila.inject.internal.guava.collect.AbstractMultimap r0;
        java.util.Map r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMultimap;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = interfaceinvoke r1.<java.util.Map: boolean isEmpty()>();

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean)>($z0);

        r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.Map map> = r1;

        return;
    }

    final void setMap(java.util.Map)
    {
        java.util.Iterator $r3;
        java.util.Collection $r2, r5;
        java.util.Map r1;
        int $i0, $i1, $i2;
        java.lang.Object $r4;
        com.mycila.inject.internal.guava.collect.AbstractMultimap r0;
        boolean $z0, $z1, $z2;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMultimap;

        r1 := @parameter0: java.util.Map;

        r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.Map map> = r1;

        r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: int totalSize> = 0;

        $r2 = interfaceinvoke r1.<java.util.Map: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Collection) $r4;

        $z1 = interfaceinvoke r5.<java.util.Collection: boolean isEmpty()>();

        if $z1 != 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean)>($z2);

        $i0 = r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: int totalSize>;

        $i1 = interfaceinvoke r5.<java.util.Collection: int size()>();

        $i2 = $i0 + $i1;

        r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: int totalSize> = $i2;

        goto label1;

     label4:
        return;
    }

    abstract java.util.Collection createCollection();

    java.util.Collection createCollection(java.lang.Object)
    {
        java.lang.Object r2;
        com.mycila.inject.internal.guava.collect.AbstractMultimap r0;
        java.util.Collection $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMultimap;

        r2 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.Collection createCollection()>();

        return $r1;
    }

    java.util.Map backingMap()
    {
        com.mycila.inject.internal.guava.collect.AbstractMultimap r0;
        java.util.Map $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMultimap;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.Map map>;

        return $r1;
    }

    public int size()
    {
        int $i0;
        com.mycila.inject.internal.guava.collect.AbstractMultimap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMultimap;

        $i0 = r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: int totalSize>;

        return $i0;
    }

    public boolean isEmpty()
    {
        int $i0;
        com.mycila.inject.internal.guava.collect.AbstractMultimap r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMultimap;

        $i0 = r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: int totalSize>;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean containsKey(java.lang.Object)
    {
        java.util.Map $r2;
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.AbstractMultimap r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMultimap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.Map map>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean containsValue(java.lang.Object)
    {
        java.util.Iterator $r3;
        java.util.Collection $r2, r5;
        java.util.Map $r1;
        java.lang.Object $r4, r6;
        com.mycila.inject.internal.guava.collect.AbstractMultimap r0;
        boolean $z0, $z1;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMultimap;

        r6 := @parameter0: java.lang.Object;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.Map map>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Collection) $r4;

        $z1 = interfaceinvoke r5.<java.util.Collection: boolean contains(java.lang.Object)>(r6);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public boolean containsEntry(java.lang.Object, java.lang.Object)
    {
        java.util.Collection r4;
        java.util.Map $r2;
        java.lang.Object r1, $r3, r5;
        com.mycila.inject.internal.guava.collect.AbstractMultimap r0;
        boolean $z0, $z1;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMultimap;

        r1 := @parameter0: java.lang.Object;

        r5 := @parameter1: java.lang.Object;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.Map map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.util.Collection) $r3;

        if r4 == null goto label1;

        $z0 = interfaceinvoke r4.<java.util.Collection: boolean contains(java.lang.Object)>(r5);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean put(java.lang.Object, java.lang.Object)
    {
        java.util.Collection $r2;
        int $i0, $i1;
        java.lang.Object r1, r3;
        com.mycila.inject.internal.guava.collect.AbstractMultimap r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMultimap;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $r2 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.Collection getOrCreateCollection(java.lang.Object)>(r1);

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean add(java.lang.Object)>(r3);

        if $z0 == 0 goto label1;

        $i0 = r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: int totalSize>;

        $i1 = $i0 + 1;

        r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: int totalSize> = $i1;

        return 1;

     label1:
        return 0;
    }

    private java.util.Collection getOrCreateCollection(java.lang.Object)
    {
        java.util.Map $r2, $r5;
        java.util.Collection $r4, r6;
        java.lang.Object r1, $r3;
        com.mycila.inject.internal.guava.collect.AbstractMultimap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMultimap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.Map map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r6 = (java.util.Collection) $r3;

        if r6 != null goto label1;

        $r4 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.Collection createCollection(java.lang.Object)>(r1);

        r6 = $r4;

        $r5 = r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.Map map>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

     label1:
        return r6;
    }

    public boolean remove(java.lang.Object, java.lang.Object)
    {
        java.util.Collection r4;
        java.util.Map $r2, $r6;
        int $i0, $i1;
        java.lang.Object r1, $r3, r5;
        com.mycila.inject.internal.guava.collect.AbstractMultimap r0;
        boolean $z0, $z1;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMultimap;

        r1 := @parameter0: java.lang.Object;

        r5 := @parameter1: java.lang.Object;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.Map map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.util.Collection) $r3;

        if r4 != null goto label1;

        return 0;

     label1:
        $z0 = interfaceinvoke r4.<java.util.Collection: boolean remove(java.lang.Object)>(r5);

        if $z0 == 0 goto label2;

        $i0 = r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: int totalSize>;

        $i1 = $i0 - 1;

        r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: int totalSize> = $i1;

        $z1 = interfaceinvoke r4.<java.util.Collection: boolean isEmpty()>();

        if $z1 == 0 goto label2;

        $r6 = r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.Map map>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

     label2:
        return $z0;
    }

    public boolean putAll(java.lang.Object, java.lang.Iterable)
    {
        java.lang.Iterable r0;
        int $i0, $i1, $i2, $i3, $i4;
        com.mycila.inject.internal.guava.collect.AbstractMultimap r2;
        boolean $z0, $z1, $z2, $z3, z4;
        java.util.Iterator $r1, $r5;
        java.util.Collection $r4, $r7;
        java.lang.Object r3, $r6;

        r2 := @this: com.mycila.inject.internal.guava.collect.AbstractMultimap;

        r3 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.Iterable;

        $r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r4 = specialinvoke r2.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.Collection getOrCreateCollection(java.lang.Object)>(r3);

        $i0 = interfaceinvoke $r4.<java.util.Collection: int size()>();

        z4 = 0;

        $z1 = r0 instanceof java.util.Collection;

        if $z1 == 0 goto label2;

        $r7 = staticinvoke <com.mycila.inject.internal.guava.collect.Collections2: java.util.Collection cast(java.lang.Iterable)>(r0);

        z4 = interfaceinvoke $r4.<java.util.Collection: boolean addAll(java.util.Collection)>($r7);

        goto label4;

     label2:
        $r5 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $z3 = interfaceinvoke $r4.<java.util.Collection: boolean add(java.lang.Object)>($r6);

        z4 = z4 | $z3;

        goto label3;

     label4:
        $i1 = r2.<com.mycila.inject.internal.guava.collect.AbstractMultimap: int totalSize>;

        $i2 = interfaceinvoke $r4.<java.util.Collection: int size()>();

        $i3 = $i2 - $i0;

        $i4 = $i1 + $i3;

        r2.<com.mycila.inject.internal.guava.collect.AbstractMultimap: int totalSize> = $i4;

        return z4;
    }

    public boolean putAll(com.mycila.inject.internal.guava.collect.Multimap)
    {
        java.util.Map$Entry r4;
        java.util.Iterator $r2;
        java.util.Collection $r1;
        com.mycila.inject.internal.guava.collect.Multimap r0;
        java.lang.Object $r3, $r6, $r7;
        com.mycila.inject.internal.guava.collect.AbstractMultimap r5;
        boolean $z0, $z1, z2;

        r5 := @this: com.mycila.inject.internal.guava.collect.AbstractMultimap;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.Multimap;

        z2 = 0;

        $r1 = interfaceinvoke r0.<com.mycila.inject.internal.guava.collect.Multimap: java.util.Collection entries()>();

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r3;

        $r6 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z1 = virtualinvoke r5.<com.mycila.inject.internal.guava.collect.AbstractMultimap: boolean put(java.lang.Object,java.lang.Object)>($r6, $r7);

        z2 = z2 | $z1;

        goto label1;

     label2:
        return z2;
    }

    public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)
    {
        java.lang.Iterable r0;
        int $i0, $i1, $i2, $i3, $i4;
        com.mycila.inject.internal.guava.collect.AbstractMultimap r2;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r1;
        java.util.Collection $r4, $r5, $r6, $r8;
        java.lang.Object r3, $r7;

        r2 := @this: com.mycila.inject.internal.guava.collect.AbstractMultimap;

        r3 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.Iterable;

        $r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r8 = virtualinvoke r2.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.Collection removeAll(java.lang.Object)>(r3);

        return $r8;

     label1:
        $r4 = specialinvoke r2.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.Collection getOrCreateCollection(java.lang.Object)>(r3);

        $r5 = virtualinvoke r2.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.Collection createCollection()>();

        interfaceinvoke $r5.<java.util.Collection: boolean addAll(java.util.Collection)>($r4);

        $i0 = r2.<com.mycila.inject.internal.guava.collect.AbstractMultimap: int totalSize>;

        $i1 = interfaceinvoke $r4.<java.util.Collection: int size()>();

        $i2 = $i0 - $i1;

        r2.<com.mycila.inject.internal.guava.collect.AbstractMultimap: int totalSize> = $i2;

        interfaceinvoke $r4.<java.util.Collection: void clear()>();

     label2:
        $z2 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r7 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $z1 = interfaceinvoke $r4.<java.util.Collection: boolean add(java.lang.Object)>($r7);

        if $z1 == 0 goto label2;

        $i3 = r2.<com.mycila.inject.internal.guava.collect.AbstractMultimap: int totalSize>;

        $i4 = $i3 + 1;

        r2.<com.mycila.inject.internal.guava.collect.AbstractMultimap: int totalSize> = $i4;

        goto label2;

     label3:
        $r6 = specialinvoke r2.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.Collection unmodifiableCollectionSubclass(java.util.Collection)>($r5);

        return $r6;
    }

    public java.util.Collection removeAll(java.lang.Object)
    {
        java.util.Collection r4, $r5, $r6;
        java.util.Map $r2;
        int $i0, $i1, $i2;
        java.lang.Object r1, $r3;
        com.mycila.inject.internal.guava.collect.AbstractMultimap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMultimap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.Map map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        r4 = (java.util.Collection) $r3;

        $r5 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.Collection createCollection()>();

        if r4 == null goto label1;

        interfaceinvoke $r5.<java.util.Collection: boolean addAll(java.util.Collection)>(r4);

        $i0 = r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: int totalSize>;

        $i1 = interfaceinvoke r4.<java.util.Collection: int size()>();

        $i2 = $i0 - $i1;

        r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: int totalSize> = $i2;

        interfaceinvoke r4.<java.util.Collection: void clear()>();

     label1:
        $r6 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.Collection unmodifiableCollectionSubclass(java.util.Collection)>($r5);

        return $r6;
    }

    private java.util.Collection unmodifiableCollectionSubclass(java.util.Collection)
    {
        java.util.SortedSet $r6, $r7;
        java.util.Collection r0, $r1;
        java.util.Set $r4, $r5;
        java.util.List $r2, $r3;
        com.mycila.inject.internal.guava.collect.AbstractMultimap r8;
        boolean $z0, $z1, $z2;

        r8 := @this: com.mycila.inject.internal.guava.collect.AbstractMultimap;

        r0 := @parameter0: java.util.Collection;

        $z0 = r0 instanceof java.util.SortedSet;

        if $z0 == 0 goto label1;

        $r6 = (java.util.SortedSet) r0;

        $r7 = staticinvoke <java.util.Collections: java.util.SortedSet unmodifiableSortedSet(java.util.SortedSet)>($r6);

        return $r7;

     label1:
        $z1 = r0 instanceof java.util.Set;

        if $z1 == 0 goto label2;

        $r4 = (java.util.Set) r0;

        $r5 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r4);

        return $r5;

     label2:
        $z2 = r0 instanceof java.util.List;

        if $z2 == 0 goto label3;

        $r2 = (java.util.List) r0;

        $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r2);

        return $r3;

     label3:
        $r1 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>(r0);

        return $r1;
    }

    public void clear()
    {
        java.util.Iterator $r3;
        java.util.Collection $r2, r6;
        java.util.Map $r1, $r4;
        java.lang.Object $r5;
        com.mycila.inject.internal.guava.collect.AbstractMultimap r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMultimap;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.Map map>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Collection) $r5;

        interfaceinvoke r6.<java.util.Collection: void clear()>();

        goto label1;

     label2:
        $r4 = r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.Map map>;

        interfaceinvoke $r4.<java.util.Map: void clear()>();

        r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: int totalSize> = 0;

        return;
    }

    public java.util.Collection get(java.lang.Object)
    {
        java.util.Map $r2;
        java.util.Collection $r4, r5;
        java.lang.Object r1, $r3;
        com.mycila.inject.internal.guava.collect.AbstractMultimap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMultimap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.Map map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r5 = (java.util.Collection) $r3;

        if r5 != null goto label1;

        r5 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.Collection createCollection(java.lang.Object)>(r1);

     label1:
        $r4 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.Collection wrapCollection(java.lang.Object,java.util.Collection)>(r1, r5);

        return $r4;
    }

    private java.util.Collection wrapCollection(java.lang.Object, java.util.Collection)
    {
        java.util.SortedSet $r9;
        java.util.Collection r0;
        java.util.Set $r7;
        com.mycila.inject.internal.guava.collect.AbstractMultimap$WrappedSortedSet $r8;
        java.util.List $r4, $r5;
        com.mycila.inject.internal.guava.collect.AbstractMultimap$WrappedCollection $r1;
        java.lang.Object r3;
        com.mycila.inject.internal.guava.collect.AbstractMultimap r2;
        boolean $z0, $z1, $z2;
        com.mycila.inject.internal.guava.collect.AbstractMultimap$WrappedSet $r6;

        r2 := @this: com.mycila.inject.internal.guava.collect.AbstractMultimap;

        r3 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.util.Collection;

        $z0 = r0 instanceof java.util.SortedSet;

        if $z0 == 0 goto label1;

        $r8 = new com.mycila.inject.internal.guava.collect.AbstractMultimap$WrappedSortedSet;

        $r9 = (java.util.SortedSet) r0;

        specialinvoke $r8.<com.mycila.inject.internal.guava.collect.AbstractMultimap$WrappedSortedSet: void <init>(com.mycila.inject.internal.guava.collect.AbstractMultimap,java.lang.Object,java.util.SortedSet,com.mycila.inject.internal.guava.collect.AbstractMultimap$WrappedCollection)>(r2, r3, $r9, null);

        return $r8;

     label1:
        $z1 = r0 instanceof java.util.Set;

        if $z1 == 0 goto label2;

        $r6 = new com.mycila.inject.internal.guava.collect.AbstractMultimap$WrappedSet;

        $r7 = (java.util.Set) r0;

        specialinvoke $r6.<com.mycila.inject.internal.guava.collect.AbstractMultimap$WrappedSet: void <init>(com.mycila.inject.internal.guava.collect.AbstractMultimap,java.lang.Object,java.util.Set)>(r2, r3, $r7);

        return $r6;

     label2:
        $z2 = r0 instanceof java.util.List;

        if $z2 == 0 goto label3;

        $r4 = (java.util.List) r0;

        $r5 = specialinvoke r2.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.List wrapList(java.lang.Object,java.util.List,com.mycila.inject.internal.guava.collect.AbstractMultimap$WrappedCollection)>(r3, $r4, null);

        return $r5;

     label3:
        $r1 = new com.mycila.inject.internal.guava.collect.AbstractMultimap$WrappedCollection;

        specialinvoke $r1.<com.mycila.inject.internal.guava.collect.AbstractMultimap$WrappedCollection: void <init>(com.mycila.inject.internal.guava.collect.AbstractMultimap,java.lang.Object,java.util.Collection,com.mycila.inject.internal.guava.collect.AbstractMultimap$WrappedCollection)>(r2, r3, r0, null);

        return $r1;
    }

    private java.util.List wrapList(java.lang.Object, java.util.List, com.mycila.inject.internal.guava.collect.AbstractMultimap$WrappedCollection)
    {
        com.mycila.inject.internal.guava.collect.AbstractMultimap$RandomAccessWrappedList $r5;
        java.util.List r0;
        com.mycila.inject.internal.guava.collect.AbstractMultimap$WrappedCollection r3;
        java.lang.Object r2;
        com.mycila.inject.internal.guava.collect.AbstractMultimap$WrappedList $r4, $r6;
        com.mycila.inject.internal.guava.collect.AbstractMultimap r1;
        boolean $z0;

        r1 := @this: com.mycila.inject.internal.guava.collect.AbstractMultimap;

        r2 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.util.List;

        r3 := @parameter2: com.mycila.inject.internal.guava.collect.AbstractMultimap$WrappedCollection;

        $z0 = r0 instanceof java.util.RandomAccess;

        if $z0 == 0 goto label1;

        $r5 = new com.mycila.inject.internal.guava.collect.AbstractMultimap$RandomAccessWrappedList;

        $r4 = $r5;

        specialinvoke $r5.<com.mycila.inject.internal.guava.collect.AbstractMultimap$RandomAccessWrappedList: void <init>(com.mycila.inject.internal.guava.collect.AbstractMultimap,java.lang.Object,java.util.List,com.mycila.inject.internal.guava.collect.AbstractMultimap$WrappedCollection)>(r1, r2, r0, r3);

        goto label2;

     label1:
        $r6 = new com.mycila.inject.internal.guava.collect.AbstractMultimap$WrappedList;

        $r4 = $r6;

        specialinvoke $r6.<com.mycila.inject.internal.guava.collect.AbstractMultimap$WrappedList: void <init>(com.mycila.inject.internal.guava.collect.AbstractMultimap,java.lang.Object,java.util.List,com.mycila.inject.internal.guava.collect.AbstractMultimap$WrappedCollection)>(r1, r2, r0, r3);

     label2:
        return $r4;
    }

    private java.util.Iterator iteratorOrListIterator(java.util.Collection)
    {
        java.util.List $r1;
        java.util.Iterator $r3;
        java.util.Collection r0;
        com.mycila.inject.internal.guava.collect.AbstractMultimap r2;
        boolean $z0;

        r2 := @this: com.mycila.inject.internal.guava.collect.AbstractMultimap;

        r0 := @parameter0: java.util.Collection;

        $z0 = r0 instanceof java.util.List;

        if $z0 == 0 goto label1;

        $r1 = (java.util.List) r0;

        $r3 = interfaceinvoke $r1.<java.util.List: java.util.ListIterator listIterator()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        return $r3;
    }

    public java.util.Set keySet()
    {
        java.util.Set r1, $r2;
        com.mycila.inject.internal.guava.collect.AbstractMultimap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMultimap;

        r1 = r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.Set keySet>;

        if r1 != null goto label1;

        $r2 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.Set createKeySet()>();

        r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.Set keySet> = $r2;

        goto label2;

     label1:
        $r2 = r1;

     label2:
        return $r2;
    }

    private java.util.Set createKeySet()
    {
        com.mycila.inject.internal.guava.collect.AbstractMultimap$KeySet $r5, $r7;
        com.mycila.inject.internal.guava.collect.AbstractMultimap$SortedKeySet $r6;
        java.util.Map $r1, $r2, $r3;
        com.mycila.inject.internal.guava.collect.AbstractMultimap r0;
        java.util.SortedMap $r4;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMultimap;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.Map map>;

        $z0 = $r1 instanceof java.util.SortedMap;

        if $z0 == 0 goto label1;

        $r6 = new com.mycila.inject.internal.guava.collect.AbstractMultimap$SortedKeySet;

        $r5 = $r6;

        $r3 = r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.Map map>;

        $r4 = (java.util.SortedMap) $r3;

        specialinvoke $r6.<com.mycila.inject.internal.guava.collect.AbstractMultimap$SortedKeySet: void <init>(com.mycila.inject.internal.guava.collect.AbstractMultimap,java.util.SortedMap)>(r0, $r4);

        goto label2;

     label1:
        $r7 = new com.mycila.inject.internal.guava.collect.AbstractMultimap$KeySet;

        $r5 = $r7;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.Map map>;

        specialinvoke $r7.<com.mycila.inject.internal.guava.collect.AbstractMultimap$KeySet: void <init>(com.mycila.inject.internal.guava.collect.AbstractMultimap,java.util.Map)>(r0, $r2);

     label2:
        return $r5;
    }

    public com.mycila.inject.internal.guava.collect.Multiset keys()
    {
        com.mycila.inject.internal.guava.collect.AbstractMultimap$1 $r2;
        com.mycila.inject.internal.guava.collect.Multiset r1;
        com.mycila.inject.internal.guava.collect.AbstractMultimap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMultimap;

        r1 = r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: com.mycila.inject.internal.guava.collect.Multiset multiset>;

        if r1 != null goto label1;

        $r2 = new com.mycila.inject.internal.guava.collect.AbstractMultimap$1;

        specialinvoke $r2.<com.mycila.inject.internal.guava.collect.AbstractMultimap$1: void <init>(com.mycila.inject.internal.guava.collect.AbstractMultimap)>(r0);

        r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: com.mycila.inject.internal.guava.collect.Multiset multiset> = $r2;

        return $r2;

     label1:
        return r1;
    }

    private int removeValuesForKey(java.lang.Object)
    {
        java.util.Collection r4;
        java.lang.ClassCastException $r5;
        java.lang.NullPointerException $r6;
        java.util.Map $r2;
        int $i0, $i1, $i2, i3;
        java.lang.Object r1, $r3;
        com.mycila.inject.internal.guava.collect.AbstractMultimap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMultimap;

        r1 := @parameter0: java.lang.Object;

     label1:
        $r2 = r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.Map map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        r4 = (java.util.Collection) $r3;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        return 0;

     label4:
        $r5 := @caughtexception;

        return 0;

     label5:
        i3 = 0;

        if r4 == null goto label6;

        $i0 = interfaceinvoke r4.<java.util.Collection: int size()>();

        i3 = $i0;

        interfaceinvoke r4.<java.util.Collection: void clear()>();

        $i1 = r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: int totalSize>;

        $i2 = $i1 - $i0;

        r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: int totalSize> = $i2;

     label6:
        return i3;

        catch java.lang.NullPointerException from label1 to label2 with label3;
        catch java.lang.ClassCastException from label1 to label2 with label4;
    }

    public java.util.Collection values()
    {
        com.mycila.inject.internal.guava.collect.AbstractMultimap$2 $r2;
        com.mycila.inject.internal.guava.collect.AbstractMultimap r0;
        java.util.Collection r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMultimap;

        r1 = r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.Collection valuesCollection>;

        if r1 != null goto label1;

        $r2 = new com.mycila.inject.internal.guava.collect.AbstractMultimap$2;

        specialinvoke $r2.<com.mycila.inject.internal.guava.collect.AbstractMultimap$2: void <init>(com.mycila.inject.internal.guava.collect.AbstractMultimap)>(r0);

        r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.Collection valuesCollection> = $r2;

        return $r2;

     label1:
        return r1;
    }

    public java.util.Collection entries()
    {
        com.mycila.inject.internal.guava.collect.AbstractMultimap r0;
        java.util.Collection r1, $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMultimap;

        r1 = r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.Collection entries>;

        if r1 != null goto label1;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.Collection createEntries()>();

        r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.Collection entries> = $r2;

        goto label2;

     label1:
        $r2 = r1;

     label2:
        return $r2;
    }

    java.util.Collection createEntries()
    {
        com.mycila.inject.internal.guava.collect.AbstractMultimap$3 $r2;
        com.mycila.inject.internal.guava.collect.AbstractMultimap$4 $r1;
        com.mycila.inject.internal.guava.collect.AbstractMultimap r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMultimap;

        $z0 = r0 instanceof com.mycila.inject.internal.guava.collect.SetMultimap;

        if $z0 == 0 goto label1;

        $r2 = new com.mycila.inject.internal.guava.collect.AbstractMultimap$3;

        specialinvoke $r2.<com.mycila.inject.internal.guava.collect.AbstractMultimap$3: void <init>(com.mycila.inject.internal.guava.collect.AbstractMultimap)>(r0);

        return $r2;

     label1:
        $r1 = new com.mycila.inject.internal.guava.collect.AbstractMultimap$4;

        specialinvoke $r1.<com.mycila.inject.internal.guava.collect.AbstractMultimap$4: void <init>(com.mycila.inject.internal.guava.collect.AbstractMultimap)>(r0);

        return $r1;
    }

    java.util.Iterator createEntryIterator()
    {
        com.mycila.inject.internal.guava.collect.AbstractMultimap$EntryIterator $r0;
        com.mycila.inject.internal.guava.collect.AbstractMultimap r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.AbstractMultimap;

        $r0 = new com.mycila.inject.internal.guava.collect.AbstractMultimap$EntryIterator;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap$EntryIterator: void <init>(com.mycila.inject.internal.guava.collect.AbstractMultimap)>(r1);

        return $r0;
    }

    public java.util.Map asMap()
    {
        com.mycila.inject.internal.guava.collect.AbstractMultimap r0;
        java.util.Map r1, $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMultimap;

        r1 = r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.Map asMap>;

        if r1 != null goto label1;

        $r2 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.Map createAsMap()>();

        r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.Map asMap> = $r2;

        goto label2;

     label1:
        $r2 = r1;

     label2:
        return $r2;
    }

    private java.util.Map createAsMap()
    {
        com.mycila.inject.internal.guava.collect.AbstractMultimap$SortedAsMap $r6;
        java.util.Map $r1, $r2, $r3;
        com.mycila.inject.internal.guava.collect.AbstractMultimap$AsMap $r5, $r7;
        com.mycila.inject.internal.guava.collect.AbstractMultimap r0;
        java.util.SortedMap $r4;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMultimap;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.Map map>;

        $z0 = $r1 instanceof java.util.SortedMap;

        if $z0 == 0 goto label1;

        $r6 = new com.mycila.inject.internal.guava.collect.AbstractMultimap$SortedAsMap;

        $r5 = $r6;

        $r3 = r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.Map map>;

        $r4 = (java.util.SortedMap) $r3;

        specialinvoke $r6.<com.mycila.inject.internal.guava.collect.AbstractMultimap$SortedAsMap: void <init>(com.mycila.inject.internal.guava.collect.AbstractMultimap,java.util.SortedMap)>(r0, $r4);

        goto label2;

     label1:
        $r7 = new com.mycila.inject.internal.guava.collect.AbstractMultimap$AsMap;

        $r5 = $r7;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.Map map>;

        specialinvoke $r7.<com.mycila.inject.internal.guava.collect.AbstractMultimap$AsMap: void <init>(com.mycila.inject.internal.guava.collect.AbstractMultimap,java.util.Map)>(r0, $r2);

     label2:
        return $r5;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.Map $r3, $r4;
        java.lang.Object r0;
        com.mycila.inject.internal.guava.collect.Multimap r2;
        com.mycila.inject.internal.guava.collect.AbstractMultimap r1;
        boolean $z0, $z1;

        r1 := @this: com.mycila.inject.internal.guava.collect.AbstractMultimap;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r0 instanceof com.mycila.inject.internal.guava.collect.Multimap;

        if $z0 == 0 goto label2;

        r2 = (com.mycila.inject.internal.guava.collect.Multimap) r0;

        $r3 = r1.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.Map map>;

        $r4 = interfaceinvoke r2.<com.mycila.inject.internal.guava.collect.Multimap: java.util.Map asMap()>();

        $z1 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        return $z1;

     label2:
        return 0;
    }

    public int hashCode()
    {
        int $i0;
        com.mycila.inject.internal.guava.collect.AbstractMultimap r0;
        java.util.Map $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMultimap;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.Map map>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        java.lang.String $r2;
        com.mycila.inject.internal.guava.collect.AbstractMultimap r0;
        java.util.Map $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMultimap;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.Map map>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    static java.util.Map access$000(com.mycila.inject.internal.guava.collect.AbstractMultimap)
    {
        com.mycila.inject.internal.guava.collect.AbstractMultimap r0;
        java.util.Map $r1;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.AbstractMultimap;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.Map map>;

        return $r1;
    }

    static java.util.Iterator access$100(com.mycila.inject.internal.guava.collect.AbstractMultimap, java.util.Collection)
    {
        java.util.Iterator $r2;
        com.mycila.inject.internal.guava.collect.AbstractMultimap r0;
        java.util.Collection r1;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.AbstractMultimap;

        r1 := @parameter1: java.util.Collection;

        $r2 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.Iterator iteratorOrListIterator(java.util.Collection)>(r1);

        return $r2;
    }

    static int access$210(com.mycila.inject.internal.guava.collect.AbstractMultimap)
    {
        int $i0, $i1;
        com.mycila.inject.internal.guava.collect.AbstractMultimap r0;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.AbstractMultimap;

        $i0 = r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: int totalSize>;

        $i1 = $i0 - 1;

        r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: int totalSize> = $i1;

        return $i0;
    }

    static int access$208(com.mycila.inject.internal.guava.collect.AbstractMultimap)
    {
        int $i0, $i1;
        com.mycila.inject.internal.guava.collect.AbstractMultimap r0;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.AbstractMultimap;

        $i0 = r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: int totalSize>;

        $i1 = $i0 + 1;

        r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: int totalSize> = $i1;

        return $i0;
    }

    static int access$212(com.mycila.inject.internal.guava.collect.AbstractMultimap, int)
    {
        int i0, $i1, $i2;
        com.mycila.inject.internal.guava.collect.AbstractMultimap r0;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.AbstractMultimap;

        i0 := @parameter1: int;

        $i1 = r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: int totalSize>;

        $i2 = $i1 + i0;

        r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: int totalSize> = $i2;

        return $i2;
    }

    static int access$220(com.mycila.inject.internal.guava.collect.AbstractMultimap, int)
    {
        int i0, $i1, $i2;
        com.mycila.inject.internal.guava.collect.AbstractMultimap r0;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.AbstractMultimap;

        i0 := @parameter1: int;

        $i1 = r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: int totalSize>;

        $i2 = $i1 - i0;

        r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: int totalSize> = $i2;

        return $i2;
    }

    static java.util.List access$300(com.mycila.inject.internal.guava.collect.AbstractMultimap, java.lang.Object, java.util.List, com.mycila.inject.internal.guava.collect.AbstractMultimap$WrappedCollection)
    {
        java.util.List r2, $r4;
        com.mycila.inject.internal.guava.collect.AbstractMultimap$WrappedCollection r3;
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.AbstractMultimap r0;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.AbstractMultimap;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.util.List;

        r3 := @parameter3: com.mycila.inject.internal.guava.collect.AbstractMultimap$WrappedCollection;

        $r4 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.List wrapList(java.lang.Object,java.util.List,com.mycila.inject.internal.guava.collect.AbstractMultimap$WrappedCollection)>(r1, r2, r3);

        return $r4;
    }

    static java.util.Collection access$400(com.mycila.inject.internal.guava.collect.AbstractMultimap, java.lang.Object, java.util.Collection)
    {
        java.util.Collection r2, $r3;
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.AbstractMultimap r0;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.AbstractMultimap;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.util.Collection;

        $r3 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: java.util.Collection wrapCollection(java.lang.Object,java.util.Collection)>(r1, r2);

        return $r3;
    }

    static int access$500(com.mycila.inject.internal.guava.collect.AbstractMultimap, java.lang.Object)
    {
        int $i0;
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.AbstractMultimap r0;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.AbstractMultimap;

        r1 := @parameter1: java.lang.Object;

        $i0 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMultimap: int removeValuesForKey(java.lang.Object)>(r1);

        return $i0;
    }

    public static void <clinit>()
    {
        <com.mycila.inject.internal.guava.collect.AbstractMultimap: long serialVersionUID> = 2447537837011683357L;

        return;
    }
}
