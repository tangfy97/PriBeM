abstract class org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeCache extends java.lang.Object
{

    private void <init>()
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeCache r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeCache;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    abstract void resolveRetain(int);

    void resolveDeleteCharacters(java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeCache r1;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$InternalTransformException $r0;
        java.lang.String r2;

        r1 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeCache;

        r2 := @parameter0: java.lang.String;

        $r0 = new org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$InternalTransformException;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$InternalTransformException: void <init>(java.lang.String)>("Incompatible operations in transformation");

        throw $r0;
    }

    void resolveDeleteElementStart(java.lang.String, org.waveprotocol.wave.model.document.operation.Attributes)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$InternalTransformException $r0;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeCache r1;
        java.lang.String r2;
        org.waveprotocol.wave.model.document.operation.Attributes r3;

        r1 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeCache;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        $r0 = new org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$InternalTransformException;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$InternalTransformException: void <init>(java.lang.String)>("Incompatible operations in transformation");

        throw $r0;
    }

    void resolveDeleteElementEnd()
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeCache r1;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$InternalTransformException $r0;

        r1 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeCache;

        $r0 = new org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$InternalTransformException;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$InternalTransformException: void <init>(java.lang.String)>("Incompatible operations in transformation");

        throw $r0;
    }

    void resolveReplaceAttributes(org.waveprotocol.wave.model.document.operation.Attributes, org.waveprotocol.wave.model.document.operation.Attributes)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$InternalTransformException $r0;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeCache r1;
        org.waveprotocol.wave.model.document.operation.Attributes r2, r3;

        r1 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeCache;

        r2 := @parameter0: org.waveprotocol.wave.model.document.operation.Attributes;

        r3 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        $r0 = new org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$InternalTransformException;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$InternalTransformException: void <init>(java.lang.String)>("Incompatible operations in transformation");

        throw $r0;
    }

    void resolveUpdateAttributes(org.waveprotocol.wave.model.document.operation.AttributesUpdate)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeCache r1;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$InternalTransformException $r0;
        org.waveprotocol.wave.model.document.operation.AttributesUpdate r2;

        r1 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeCache;

        r2 := @parameter0: org.waveprotocol.wave.model.document.operation.AttributesUpdate;

        $r0 = new org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$InternalTransformException;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$InternalTransformException: void <init>(java.lang.String)>("Incompatible operations in transformation");

        throw $r0;
    }

    void <init>(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$1)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeCache r0;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$1 r1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeCache;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$1;

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeCache: void <init>()>();

        return;
    }
}
