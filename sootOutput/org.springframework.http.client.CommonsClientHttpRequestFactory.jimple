public class org.springframework.http.client.CommonsClientHttpRequestFactory extends java.lang.Object implements org.springframework.http.client.ClientHttpRequestFactory, org.springframework.beans.factory.DisposableBean
{
    private static final int DEFAULT_READ_TIMEOUT_MILLISECONDS;
    private org.apache.commons.httpclient.HttpClient httpClient;
    private static int[] $SWITCH_TABLE$org$springframework$http$HttpMethod;

    public void <init>()
    {
        org.apache.commons.httpclient.HttpConnectionManager $r5;
        org.apache.commons.httpclient.HttpClient $r4;
        int $i1;
        org.springframework.http.client.CommonsClientHttpRequestFactory r0;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager $r3;

        r0 := @this: org.springframework.http.client.CommonsClientHttpRequestFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new org.apache.commons.httpclient.HttpClient;

        $r3 = new org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        specialinvoke $r3.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: void <init>()>();

        $r5 = (org.apache.commons.httpclient.HttpConnectionManager) $r3;

        specialinvoke $r4.<org.apache.commons.httpclient.HttpClient: void <init>(org.apache.commons.httpclient.HttpConnectionManager)>($r5);

        r0.<org.springframework.http.client.CommonsClientHttpRequestFactory: org.apache.commons.httpclient.HttpClient httpClient> = $r4;

        $i1 = (int) 60000;

        virtualinvoke r0.<org.springframework.http.client.CommonsClientHttpRequestFactory: void setReadTimeout(int)>($i1);

        return;
    }

    public void <init>(org.apache.commons.httpclient.HttpClient)
    {
        org.springframework.http.client.CommonsClientHttpRequestFactory r0;
        org.apache.commons.httpclient.HttpClient r1;

        r0 := @this: org.springframework.http.client.CommonsClientHttpRequestFactory;

        r1 := @parameter0: org.apache.commons.httpclient.HttpClient;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "httpClient must not be null");

        r0.<org.springframework.http.client.CommonsClientHttpRequestFactory: org.apache.commons.httpclient.HttpClient httpClient> = r1;

        return;
    }

    public void setHttpClient(org.apache.commons.httpclient.HttpClient)
    {
        org.springframework.http.client.CommonsClientHttpRequestFactory r0;
        org.apache.commons.httpclient.HttpClient r1;

        r0 := @this: org.springframework.http.client.CommonsClientHttpRequestFactory;

        r1 := @parameter0: org.apache.commons.httpclient.HttpClient;

        r0.<org.springframework.http.client.CommonsClientHttpRequestFactory: org.apache.commons.httpclient.HttpClient httpClient> = r1;

        return;
    }

    public org.apache.commons.httpclient.HttpClient getHttpClient()
    {
        org.springframework.http.client.CommonsClientHttpRequestFactory r0;
        org.apache.commons.httpclient.HttpClient $r1;

        r0 := @this: org.springframework.http.client.CommonsClientHttpRequestFactory;

        $r1 = r0.<org.springframework.http.client.CommonsClientHttpRequestFactory: org.apache.commons.httpclient.HttpClient httpClient>;

        return $r1;
    }

    public void setConnectTimeout(int)
    {
        org.apache.commons.httpclient.HttpConnectionManager $r2;
        org.apache.commons.httpclient.HttpClient $r1;
        org.apache.commons.httpclient.params.HttpConnectionManagerParams $r3;
        int i0;
        org.springframework.http.client.CommonsClientHttpRequestFactory r0;
        boolean $z0;

        r0 := @this: org.springframework.http.client.CommonsClientHttpRequestFactory;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.springframework.util.Assert: void isTrue(boolean,java.lang.String)>($z0, "Timeout must be a non-negative value");

        $r1 = r0.<org.springframework.http.client.CommonsClientHttpRequestFactory: org.apache.commons.httpclient.HttpClient httpClient>;

        $r2 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HttpConnectionManager getHttpConnectionManager()>();

        $r3 = interfaceinvoke $r2.<org.apache.commons.httpclient.HttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams getParams()>();

        virtualinvoke $r3.<org.apache.commons.httpclient.params.HttpConnectionManagerParams: void setConnectionTimeout(int)>(i0);

        return;
    }

    public void setReadTimeout(int)
    {
        org.apache.commons.httpclient.HttpConnectionManager $r2;
        org.apache.commons.httpclient.HttpClient $r1;
        org.apache.commons.httpclient.params.HttpConnectionManagerParams $r3;
        int i0;
        org.springframework.http.client.CommonsClientHttpRequestFactory r0;
        boolean $z0;

        r0 := @this: org.springframework.http.client.CommonsClientHttpRequestFactory;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.springframework.util.Assert: void isTrue(boolean,java.lang.String)>($z0, "Timeout must be a non-negative value");

        $r1 = virtualinvoke r0.<org.springframework.http.client.CommonsClientHttpRequestFactory: org.apache.commons.httpclient.HttpClient getHttpClient()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HttpConnectionManager getHttpConnectionManager()>();

        $r3 = interfaceinvoke $r2.<org.apache.commons.httpclient.HttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams getParams()>();

        virtualinvoke $r3.<org.apache.commons.httpclient.params.HttpConnectionManagerParams: void setSoTimeout(int)>(i0);

        return;
    }

    public org.springframework.http.client.ClientHttpRequest createRequest(java.net.URI, org.springframework.http.HttpMethod) throws java.io.IOException
    {
        org.apache.commons.httpclient.HttpMethodBase $r4;
        org.apache.commons.httpclient.HttpClient $r6;
        org.springframework.http.client.CommonsClientHttpRequest $r5;
        org.springframework.http.HttpMethod r1;
        org.springframework.http.client.CommonsClientHttpRequestFactory r0;
        java.net.URI r2;
        java.lang.String $r3;

        r0 := @this: org.springframework.http.client.CommonsClientHttpRequestFactory;

        r2 := @parameter0: java.net.URI;

        r1 := @parameter1: org.springframework.http.HttpMethod;

        $r3 = virtualinvoke r2.<java.net.URI: java.lang.String toString()>();

        $r4 = virtualinvoke r0.<org.springframework.http.client.CommonsClientHttpRequestFactory: org.apache.commons.httpclient.HttpMethodBase createCommonsHttpMethod(org.springframework.http.HttpMethod,java.lang.String)>(r1, $r3);

        virtualinvoke r0.<org.springframework.http.client.CommonsClientHttpRequestFactory: void postProcessCommonsHttpMethod(org.apache.commons.httpclient.HttpMethodBase)>($r4);

        $r5 = new org.springframework.http.client.CommonsClientHttpRequest;

        $r6 = virtualinvoke r0.<org.springframework.http.client.CommonsClientHttpRequestFactory: org.apache.commons.httpclient.HttpClient getHttpClient()>();

        specialinvoke $r5.<org.springframework.http.client.CommonsClientHttpRequest: void <init>(org.apache.commons.httpclient.HttpClient,org.apache.commons.httpclient.HttpMethodBase)>($r6, $r4);

        return $r5;
    }

    protected org.apache.commons.httpclient.HttpMethodBase createCommonsHttpMethod(org.springframework.http.HttpMethod, java.lang.String)
    {
        org.springframework.http.client.CommonsClientHttpRequestFactory r14;
        org.apache.commons.httpclient.methods.PostMethod $r19;
        org.apache.commons.httpclient.methods.TraceMethod $r21;
        org.apache.commons.httpclient.methods.DeleteMethod $r16;
        int[] $r0;
        int $i0, $i1;
        java.lang.String r3, $r13;
        org.apache.commons.httpclient.HttpMethodBase $r24, $r25, $r26, $r27, $r28, $r29, $r30;
        org.springframework.http.HttpMethod r1;
        java.lang.IllegalArgumentException $r23;
        org.apache.commons.httpclient.methods.OptionsMethod $r18;
        org.apache.commons.httpclient.methods.GetMethod $r15;
        java.lang.StringBuilder $r12, $r22;
        org.apache.commons.httpclient.methods.HeadMethod $r17;
        org.apache.commons.httpclient.methods.PutMethod $r20;

        r14 := @this: org.springframework.http.client.CommonsClientHttpRequestFactory;

        r1 := @parameter0: org.springframework.http.HttpMethod;

        r3 := @parameter1: java.lang.String;

        $r0 = staticinvoke <org.springframework.http.client.CommonsClientHttpRequestFactory: int[] $SWITCH_TABLE$org$springframework$http$HttpMethod()>();

        $i0 = virtualinvoke r1.<org.springframework.http.HttpMethod: int ordinal()>();

        $i1 = $r0[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label5;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label6;
            case 6: goto label2;
            case 7: goto label7;
            default: goto label8;
        };

     label1:
        $r15 = new org.apache.commons.httpclient.methods.GetMethod;

        specialinvoke $r15.<org.apache.commons.httpclient.methods.GetMethod: void <init>(java.lang.String)>(r3);

        $r24 = (org.apache.commons.httpclient.HttpMethodBase) $r15;

        return $r24;

     label2:
        $r16 = new org.apache.commons.httpclient.methods.DeleteMethod;

        specialinvoke $r16.<org.apache.commons.httpclient.methods.DeleteMethod: void <init>(java.lang.String)>(r3);

        $r25 = (org.apache.commons.httpclient.HttpMethodBase) $r16;

        return $r25;

     label3:
        $r17 = new org.apache.commons.httpclient.methods.HeadMethod;

        specialinvoke $r17.<org.apache.commons.httpclient.methods.HeadMethod: void <init>(java.lang.String)>(r3);

        $r26 = (org.apache.commons.httpclient.HttpMethodBase) $r17;

        return $r26;

     label4:
        $r18 = new org.apache.commons.httpclient.methods.OptionsMethod;

        specialinvoke $r18.<org.apache.commons.httpclient.methods.OptionsMethod: void <init>(java.lang.String)>(r3);

        $r27 = (org.apache.commons.httpclient.HttpMethodBase) $r18;

        return $r27;

     label5:
        $r19 = new org.apache.commons.httpclient.methods.PostMethod;

        specialinvoke $r19.<org.apache.commons.httpclient.methods.PostMethod: void <init>(java.lang.String)>(r3);

        $r28 = (org.apache.commons.httpclient.HttpMethodBase) $r19;

        return $r28;

     label6:
        $r20 = new org.apache.commons.httpclient.methods.PutMethod;

        specialinvoke $r20.<org.apache.commons.httpclient.methods.PutMethod: void <init>(java.lang.String)>(r3);

        $r29 = (org.apache.commons.httpclient.HttpMethodBase) $r20;

        return $r29;

     label7:
        $r21 = new org.apache.commons.httpclient.methods.TraceMethod;

        specialinvoke $r21.<org.apache.commons.httpclient.methods.TraceMethod: void <init>(java.lang.String)>(r3);

        $r30 = (org.apache.commons.httpclient.HttpMethodBase) $r21;

        return $r30;

     label8:
        $r23 = new java.lang.IllegalArgumentException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("Invalid HTTP method: ");

        $r12 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r23;
    }

    protected void postProcessCommonsHttpMethod(org.apache.commons.httpclient.HttpMethodBase)
    {
        org.springframework.http.client.CommonsClientHttpRequestFactory r0;
        org.apache.commons.httpclient.HttpMethodBase r1;

        r0 := @this: org.springframework.http.client.CommonsClientHttpRequestFactory;

        r1 := @parameter0: org.apache.commons.httpclient.HttpMethodBase;

        return;
    }

    public void destroy()
    {
        org.apache.commons.httpclient.HttpConnectionManager $r2;
        org.apache.commons.httpclient.HttpClient $r1;
        org.springframework.http.client.CommonsClientHttpRequestFactory r0;
        boolean $z0;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager $r3;

        r0 := @this: org.springframework.http.client.CommonsClientHttpRequestFactory;

        $r1 = virtualinvoke r0.<org.springframework.http.client.CommonsClientHttpRequestFactory: org.apache.commons.httpclient.HttpClient getHttpClient()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HttpConnectionManager getHttpConnectionManager()>();

        $z0 = $r2 instanceof org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        if $z0 == 0 goto label1;

        $r3 = (org.apache.commons.httpclient.MultiThreadedHttpConnectionManager) $r2;

        virtualinvoke $r3.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: void shutdown()>();

     label1:
        return;
    }

    static int[] $SWITCH_TABLE$org$springframework$http$HttpMethod()
    {
        org.springframework.http.HttpMethod[] $r1;
        java.lang.NoSuchFieldError $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        int[] $r0, r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        org.springframework.http.HttpMethod $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        $r0 = <org.springframework.http.client.CommonsClientHttpRequestFactory: int[] $SWITCH_TABLE$org$springframework$http$HttpMethod>;

        if $r0 == null goto label01;

        return $r0;

     label01:
        $r1 = staticinvoke <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod[] values()>();

        $i0 = lengthof $r1;

        r2 = newarray (int)[$i0];

     label02:
        $r3 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod DELETE>;

        $i1 = virtualinvoke $r3.<org.springframework.http.HttpMethod: int ordinal()>();

        r2[$i1] = 6;

     label03:
        goto label05;

     label04:
        $r16 := @caughtexception;

     label05:
        $r4 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod GET>;

        $i2 = virtualinvoke $r4.<org.springframework.http.HttpMethod: int ordinal()>();

        r2[$i2] = 1;

     label06:
        goto label08;

     label07:
        $r15 := @caughtexception;

     label08:
        $r5 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod HEAD>;

        $i3 = virtualinvoke $r5.<org.springframework.http.HttpMethod: int ordinal()>();

        r2[$i3] = 3;

     label09:
        goto label11;

     label10:
        $r14 := @caughtexception;

     label11:
        $r6 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod OPTIONS>;

        $i4 = virtualinvoke $r6.<org.springframework.http.HttpMethod: int ordinal()>();

        r2[$i4] = 4;

     label12:
        goto label14;

     label13:
        $r13 := @caughtexception;

     label14:
        $r7 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod POST>;

        $i5 = virtualinvoke $r7.<org.springframework.http.HttpMethod: int ordinal()>();

        r2[$i5] = 2;

     label15:
        goto label17;

     label16:
        $r12 := @caughtexception;

     label17:
        $r8 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod PUT>;

        $i6 = virtualinvoke $r8.<org.springframework.http.HttpMethod: int ordinal()>();

        r2[$i6] = 5;

     label18:
        goto label20;

     label19:
        $r11 := @caughtexception;

     label20:
        $r9 = <org.springframework.http.HttpMethod: org.springframework.http.HttpMethod TRACE>;

        $i7 = virtualinvoke $r9.<org.springframework.http.HttpMethod: int ordinal()>();

        r2[$i7] = 7;

     label21:
        goto label23;

     label22:
        $r10 := @caughtexception;

     label23:
        <org.springframework.http.client.CommonsClientHttpRequestFactory: int[] $SWITCH_TABLE$org$springframework$http$HttpMethod> = r2;

        return r2;

        catch java.lang.NoSuchFieldError from label02 to label03 with label04;
        catch java.lang.NoSuchFieldError from label05 to label06 with label07;
        catch java.lang.NoSuchFieldError from label08 to label09 with label10;
        catch java.lang.NoSuchFieldError from label11 to label12 with label13;
        catch java.lang.NoSuchFieldError from label14 to label15 with label16;
        catch java.lang.NoSuchFieldError from label17 to label18 with label19;
        catch java.lang.NoSuchFieldError from label20 to label21 with label22;
    }

    public static void <clinit>()
    {
        <org.springframework.http.client.CommonsClientHttpRequestFactory: int DEFAULT_READ_TIMEOUT_MILLISECONDS> = 60000;

        return;
    }
}
