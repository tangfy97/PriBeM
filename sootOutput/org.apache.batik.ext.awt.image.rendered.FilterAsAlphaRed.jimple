public class org.apache.batik.ext.awt.image.rendered.FilterAsAlphaRed extends org.apache.batik.ext.awt.image.rendered.AbstractRed
{

    public void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed)
    {
        java.awt.Rectangle $r3;
        java.awt.color.ColorSpace $r5;
        java.awt.image.SampleModel $r8, $r9, $r10;
        int[] $r6, $r11;
        java.util.Map $r13;
        org.apache.batik.ext.awt.image.rendered.FilterAsAlphaRed r0;
        int $i0, $i1, $i2, $i3, $i4;
        java.awt.image.PixelInterleavedSampleModel $r7;
        java.awt.image.ComponentColorModel $r4;
        org.apache.batik.ext.awt.image.rendered.Any2LumRed $r1;
        org.apache.batik.ext.awt.image.rendered.CachableRed r2;
        java.lang.Object $r12;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.FilterAsAlphaRed;

        r2 := @parameter0: org.apache.batik.ext.awt.image.rendered.CachableRed;

        $r1 = new org.apache.batik.ext.awt.image.rendered.Any2LumRed;

        specialinvoke $r1.<org.apache.batik.ext.awt.image.rendered.Any2LumRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed)>(r2);

        $r3 = interfaceinvoke r2.<org.apache.batik.ext.awt.image.rendered.CachableRed: java.awt.Rectangle getBounds()>();

        $r4 = new java.awt.image.ComponentColorModel;

        $r5 = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1003);

        $r6 = newarray (int)[1];

        $r6[0] = 8;

        specialinvoke $r4.<java.awt.image.ComponentColorModel: void <init>(java.awt.color.ColorSpace,int[],boolean,boolean,int,int)>($r5, $r6, 0, 0, 1, 0);

        $r7 = new java.awt.image.PixelInterleavedSampleModel;

        $r8 = interfaceinvoke r2.<java.awt.image.RenderedImage: java.awt.image.SampleModel getSampleModel()>();

        $i0 = virtualinvoke $r8.<java.awt.image.SampleModel: int getWidth()>();

        $r9 = interfaceinvoke r2.<java.awt.image.RenderedImage: java.awt.image.SampleModel getSampleModel()>();

        $i1 = virtualinvoke $r9.<java.awt.image.SampleModel: int getHeight()>();

        $r10 = interfaceinvoke r2.<java.awt.image.RenderedImage: java.awt.image.SampleModel getSampleModel()>();

        $i2 = virtualinvoke $r10.<java.awt.image.SampleModel: int getWidth()>();

        $r11 = newarray (int)[1];

        $r11[0] = 0;

        specialinvoke $r7.<java.awt.image.PixelInterleavedSampleModel: void <init>(int,int,int,int,int,int[])>(0, $i0, $i1, 1, $i2, $r11);

        $i3 = interfaceinvoke r2.<java.awt.image.RenderedImage: int getTileGridXOffset()>();

        $i4 = interfaceinvoke r2.<java.awt.image.RenderedImage: int getTileGridYOffset()>();

        specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)>($r1, $r3, $r4, $r7, $i3, $i4, null);

        $r13 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.util.Map props>;

        $r12 = <org.apache.batik.ext.awt.ColorSpaceHintKey: java.lang.Object VALUE_COLORSPACE_ALPHA>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.apache.batik.gvt.filter.Colorspace", $r12);

        return;
    }

    public java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster)
    {
        byte[] $r12, $r17;
        java.awt.image.DataBufferByte r11, r16;
        java.awt.image.SampleModel $r4, $r8, $r13;
        java.util.Vector $r1;
        byte $b24, $b27, $b33, $b43;
        java.awt.image.PixelInterleavedSampleModel r9, r14;
        org.apache.batik.ext.awt.image.rendered.CachableRed r3;
        short s25, s28, $s58, $s59;
        java.awt.image.Raster $r7;
        int[] $r18;
        boolean $z0;
        java.awt.image.DataBuffer $r10, $r15;
        java.awt.Rectangle $r6;
        org.apache.batik.ext.awt.image.rendered.FilterAsAlphaRed r0;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, i8, $i9, $i10, i11, $i12, $i13, $i14, i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i26, $i29, $i30, $i31, $i32, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, i44, i45, i46, i47, i48, i49, i50, i51, i52, i53, i54, i55, i56, i57, $i60, $i61;
        java.awt.image.ColorModel $r19;
        java.lang.Object $r2;
        java.awt.image.WritableRaster r5, $r20;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.FilterAsAlphaRed;

        r5 := @parameter0: java.awt.image.WritableRaster;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.util.Vector getSources()>();

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object get(int)>(0);

        r3 = (org.apache.batik.ext.awt.image.rendered.CachableRed) $r2;

        $r4 = interfaceinvoke r3.<java.awt.image.RenderedImage: java.awt.image.SampleModel getSampleModel()>();

        $i0 = virtualinvoke $r4.<java.awt.image.SampleModel: int getNumBands()>();

        if $i0 != 1 goto label01;

        $r20 = interfaceinvoke r3.<java.awt.image.RenderedImage: java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster)>(r5);

        return $r20;

     label01:
        $r6 = virtualinvoke r5.<java.awt.image.Raster: java.awt.Rectangle getBounds()>();

        $r7 = interfaceinvoke r3.<java.awt.image.RenderedImage: java.awt.image.Raster getData(java.awt.Rectangle)>($r6);

        $r8 = virtualinvoke $r7.<java.awt.image.Raster: java.awt.image.SampleModel getSampleModel()>();

        r9 = (java.awt.image.PixelInterleavedSampleModel) $r8;

        $r10 = virtualinvoke $r7.<java.awt.image.Raster: java.awt.image.DataBuffer getDataBuffer()>();

        r11 = (java.awt.image.DataBufferByte) $r10;

        $r12 = virtualinvoke r11.<java.awt.image.DataBufferByte: byte[] getData()>();

        $r13 = virtualinvoke r5.<java.awt.image.Raster: java.awt.image.SampleModel getSampleModel()>();

        r14 = (java.awt.image.PixelInterleavedSampleModel) $r13;

        $r15 = virtualinvoke r5.<java.awt.image.Raster: java.awt.image.DataBuffer getDataBuffer()>();

        r16 = (java.awt.image.DataBufferByte) $r15;

        $r17 = virtualinvoke r16.<java.awt.image.DataBufferByte: byte[] getData()>();

        $i1 = virtualinvoke $r7.<java.awt.image.Raster: int getMinX()>();

        $i2 = virtualinvoke $r7.<java.awt.image.Raster: int getSampleModelTranslateX()>();

        i3 = $i1 - $i2;

        $i4 = virtualinvoke $r7.<java.awt.image.Raster: int getMinY()>();

        $i5 = virtualinvoke $r7.<java.awt.image.Raster: int getSampleModelTranslateY()>();

        i44 = $i4 - $i5;

        $i6 = virtualinvoke r5.<java.awt.image.Raster: int getMinX()>();

        $i7 = virtualinvoke r5.<java.awt.image.Raster: int getSampleModelTranslateX()>();

        i8 = $i6 - $i7;

        $i9 = virtualinvoke r5.<java.awt.image.Raster: int getWidth()>();

        $i10 = i8 + $i9;

        i11 = $i10 - 1;

        $i12 = virtualinvoke r5.<java.awt.image.Raster: int getMinY()>();

        $i13 = virtualinvoke r5.<java.awt.image.Raster: int getSampleModelTranslateY()>();

        i45 = $i12 - $i13;

        $i14 = virtualinvoke r9.<java.awt.image.ComponentSampleModel: int getPixelStride()>();

        $r18 = virtualinvoke r9.<java.awt.image.ComponentSampleModel: int[] getBandOffsets()>();

        i15 = $r18[0];

        i46 = $r18[1];

        $r19 = interfaceinvoke r3.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        $z0 = virtualinvoke $r19.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        if $z0 == 0 goto label06;

        i47 = 0;

        goto label05;

     label02:
        $i35 = virtualinvoke r11.<java.awt.image.DataBuffer: int getOffset()>();

        $i36 = virtualinvoke r9.<java.awt.image.ComponentSampleModel: int getOffset(int,int)>(i3, i44);

        i48 = $i35 + $i36;

        $i37 = virtualinvoke r16.<java.awt.image.DataBuffer: int getOffset()>();

        $i38 = virtualinvoke r14.<java.awt.image.ComponentSampleModel: int getOffset(int,int)>(i8, i45);

        i49 = $i37 + $i38;

        $i39 = virtualinvoke r16.<java.awt.image.DataBuffer: int getOffset()>();

        $i40 = i11 + 1;

        $i41 = virtualinvoke r14.<java.awt.image.ComponentSampleModel: int getOffset(int,int)>($i40, i45);

        i50 = $i39 + $i41;

        i51 = i48 + i15;

        goto label04;

     label03:
        $i42 = i49;

        i49 = i49 + 1;

        $b43 = $r12[i51];

        $r17[$i42] = $b43;

        i51 = i51 + $i14;

     label04:
        if i49 < i50 goto label03;

        i44 = i44 + 1;

        i45 = i45 + 1;

        i47 = i47 + 1;

     label05:
        $i34 = virtualinvoke $r7.<java.awt.image.Raster: int getHeight()>();

        if i47 < $i34 goto label02;

        goto label11;

     label06:
        i52 = i46 - i15;

        i53 = 0;

        goto label10;

     label07:
        $i17 = virtualinvoke r11.<java.awt.image.DataBuffer: int getOffset()>();

        $i18 = virtualinvoke r9.<java.awt.image.ComponentSampleModel: int getOffset(int,int)>(i3, i44);

        i54 = $i17 + $i18;

        $i19 = virtualinvoke r16.<java.awt.image.DataBuffer: int getOffset()>();

        $i20 = virtualinvoke r14.<java.awt.image.ComponentSampleModel: int getOffset(int,int)>(i8, i45);

        i55 = $i19 + $i20;

        $i21 = virtualinvoke r16.<java.awt.image.DataBuffer: int getOffset()>();

        $i22 = i11 + 1;

        $i23 = virtualinvoke r14.<java.awt.image.ComponentSampleModel: int getOffset(int,int)>($i22, i45);

        i56 = $i21 + $i23;

        i57 = i54 + i15;

        goto label09;

     label08:
        $b24 = $r12[i57];

        $s58 = (short) $b24;

        s25 = $s58 & 255;

        $i26 = i57 + i52;

        $b27 = $r12[$i26];

        $s59 = (short) $b27;

        s28 = $s59 & 255;

        $i29 = i55;

        i55 = i55 + 1;

        $i60 = (int) s25;

        $i61 = (int) s28;

        $i30 = $i60 * $i61;

        $i31 = $i30 + 128;

        $i32 = $i31 >> 8;

        $b33 = (byte) $i32;

        $r17[$i29] = $b33;

        i57 = i57 + $i14;

     label09:
        if i55 < i56 goto label08;

        i44 = i44 + 1;

        i45 = i45 + 1;

        i53 = i53 + 1;

     label10:
        $i16 = virtualinvoke $r7.<java.awt.image.Raster: int getHeight()>();

        if i53 < $i16 goto label07;

     label11:
        return r5;
    }
}
