public abstract class com.jmatio.types.MLNumericArray extends com.jmatio.types.MLArray implements com.jmatio.types.GenericArrayCreator, com.jmatio.types.ByteStorageSupport
{
    private java.nio.ByteBuffer real;
    private java.nio.ByteBuffer imaginary;
    private byte[] bytes;

    public void <init>(java.lang.String, int[], int, int)
    {
        int[] r2;
        int i0, i1;
        com.jmatio.types.MLNumericArray r0;
        java.lang.String r1;

        r0 := @this: com.jmatio.types.MLNumericArray;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: int[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<com.jmatio.types.MLArray: void <init>(java.lang.String,int[],int,int)>(r1, r2, i0, i1);

        virtualinvoke r0.<com.jmatio.types.MLNumericArray: void allocate()>();

        return;
    }

    protected void allocate()
    {
        byte[] $r2;
        java.nio.ByteBuffer $r1, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        com.jmatio.types.MLNumericArray r0;
        boolean $z0;

        r0 := @this: com.jmatio.types.MLNumericArray;

        $i0 = virtualinvoke r0.<com.jmatio.types.MLNumericArray: int getSize()>();

        $i1 = virtualinvoke r0.<com.jmatio.types.MLNumericArray: int getBytesAllocated()>();

        $i2 = $i0 * $i1;

        $r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i2);

        r0.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer real> = $r1;

        $z0 = virtualinvoke r0.<com.jmatio.types.MLNumericArray: boolean isComplex()>();

        if $z0 == 0 goto label1;

        $i4 = virtualinvoke r0.<com.jmatio.types.MLNumericArray: int getSize()>();

        $i5 = virtualinvoke r0.<com.jmatio.types.MLNumericArray: int getBytesAllocated()>();

        $i6 = $i4 * $i5;

        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i6);

        r0.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer imaginary> = $r3;

     label1:
        $i3 = virtualinvoke r0.<com.jmatio.types.MLNumericArray: int getBytesAllocated()>();

        $r2 = newarray (byte)[$i3];

        r0.<com.jmatio.types.MLNumericArray: byte[] bytes> = $r2;

        return;
    }

    public void <init>(java.lang.String, int, java.lang.Number[], int)
    {
        java.lang.Number[] r3;
        int[] $r2;
        int i0, $i1, $i2, i3, $i4, i5;
        com.jmatio.types.MLNumericArray r0;
        java.lang.String r1;
        java.lang.Number $r4;

        r0 := @this: com.jmatio.types.MLNumericArray;

        r1 := @parameter0: java.lang.String;

        i3 := @parameter1: int;

        r3 := @parameter2: java.lang.Number[];

        i0 := @parameter3: int;

        $r2 = newarray (int)[2];

        $r2[0] = i0;

        $i1 = lengthof r3;

        $i2 = $i1 / i0;

        $r2[1] = $i2;

        specialinvoke r0.<com.jmatio.types.MLNumericArray: void <init>(java.lang.String,int[],int,int)>(r1, $r2, i3, 0);

        i5 = 0;

     label1:
        $i4 = lengthof r3;

        if i5 >= $i4 goto label2;

        $r4 = r3[i5];

        virtualinvoke r0.<com.jmatio.types.MLNumericArray: void set(java.lang.Number,int)>($r4, i5);

        i5 = i5 + 1;

        goto label1;

     label2:
        return;
    }

    public java.lang.Number getReal(int, int)
    {
        int i0, i1, $i2;
        com.jmatio.types.MLNumericArray r0;
        java.lang.Number $r1;

        r0 := @this: com.jmatio.types.MLNumericArray;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = virtualinvoke r0.<com.jmatio.types.MLNumericArray: int getIndex(int,int)>(i0, i1);

        $r1 = virtualinvoke r0.<com.jmatio.types.MLNumericArray: java.lang.Number getReal(int)>($i2);

        return $r1;
    }

    public java.lang.Number getReal(int)
    {
        int i0;
        com.jmatio.types.MLNumericArray r0;
        java.lang.Number $r2;
        java.nio.ByteBuffer $r1;

        r0 := @this: com.jmatio.types.MLNumericArray;

        i0 := @parameter0: int;

        $r1 = r0.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer real>;

        $r2 = virtualinvoke r0.<com.jmatio.types.MLNumericArray: java.lang.Number _get(java.nio.ByteBuffer,int)>($r1, i0);

        return $r2;
    }

    public void setReal(java.lang.Number, int, int)
    {
        int i0, i1, $i2;
        com.jmatio.types.MLNumericArray r0;
        java.lang.Number r1;

        r0 := @this: com.jmatio.types.MLNumericArray;

        r1 := @parameter0: java.lang.Number;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = virtualinvoke r0.<com.jmatio.types.MLNumericArray: int getIndex(int,int)>(i0, i1);

        virtualinvoke r0.<com.jmatio.types.MLNumericArray: void setReal(java.lang.Number,int)>(r1, $i2);

        return;
    }

    public void setReal(java.lang.Number, int)
    {
        int i0;
        com.jmatio.types.MLNumericArray r0;
        java.lang.Number r1;
        java.nio.ByteBuffer $r2;

        r0 := @this: com.jmatio.types.MLNumericArray;

        r1 := @parameter0: java.lang.Number;

        i0 := @parameter1: int;

        $r2 = r0.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer real>;

        virtualinvoke r0.<com.jmatio.types.MLNumericArray: void _set(java.nio.ByteBuffer,java.lang.Number,int)>($r2, r1, i0);

        return;
    }

    public void setReal(java.lang.Number[])
    {
        java.lang.IllegalArgumentException $r3;
        java.nio.ByteBuffer $r2;
        java.lang.Number[] r0;
        int $i0, $i1, $i2, $i3, $i4;
        com.jmatio.types.MLNumericArray r1;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8;
        java.lang.String $r9;

        r1 := @this: com.jmatio.types.MLNumericArray;

        r0 := @parameter0: java.lang.Number[];

        $i0 = lengthof r0;

        $i1 = virtualinvoke r1.<com.jmatio.types.MLNumericArray: int getSize()>();

        if $i0 == $i1 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Matrix dimensions do not match. ");

        $i3 = virtualinvoke r1.<com.jmatio.types.MLNumericArray: int getSize()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not ");

        $i4 = lengthof r0;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r3;

     label1:
        $r2 = r1.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer real>;

        $i2 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, $r2, 0, $i2);

        return;
    }

    public void setImaginary(java.lang.Number, int, int)
    {
        int i0, i1, $i2;
        com.jmatio.types.MLNumericArray r0;
        java.lang.Number r1;

        r0 := @this: com.jmatio.types.MLNumericArray;

        r1 := @parameter0: java.lang.Number;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = virtualinvoke r0.<com.jmatio.types.MLNumericArray: int getIndex(int,int)>(i0, i1);

        virtualinvoke r0.<com.jmatio.types.MLNumericArray: void setImaginary(java.lang.Number,int)>(r1, $i2);

        return;
    }

    public void setImaginary(java.lang.Number, int)
    {
        int i0;
        com.jmatio.types.MLNumericArray r0;
        java.lang.Number r1;
        java.nio.ByteBuffer $r2;
        boolean $z0;

        r0 := @this: com.jmatio.types.MLNumericArray;

        r1 := @parameter0: java.lang.Number;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<com.jmatio.types.MLNumericArray: boolean isComplex()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer imaginary>;

        virtualinvoke r0.<com.jmatio.types.MLNumericArray: void _set(java.nio.ByteBuffer,java.lang.Number,int)>($r2, r1, i0);

     label1:
        return;
    }

    public java.lang.Number getImaginary(int, int)
    {
        int i0, i1, $i2;
        com.jmatio.types.MLNumericArray r0;
        java.lang.Number $r1;

        r0 := @this: com.jmatio.types.MLNumericArray;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = virtualinvoke r0.<com.jmatio.types.MLNumericArray: int getIndex(int,int)>(i0, i1);

        $r1 = virtualinvoke r0.<com.jmatio.types.MLNumericArray: java.lang.Number getImaginary(int)>($i2);

        return $r1;
    }

    public java.lang.Number getImaginary(int)
    {
        int i0;
        com.jmatio.types.MLNumericArray r0;
        java.lang.Number $r2;
        java.nio.ByteBuffer $r1;

        r0 := @this: com.jmatio.types.MLNumericArray;

        i0 := @parameter0: int;

        $r1 = r0.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer imaginary>;

        $r2 = virtualinvoke r0.<com.jmatio.types.MLNumericArray: java.lang.Number _get(java.nio.ByteBuffer,int)>($r1, i0);

        return $r2;
    }

    public void set(java.lang.Number, int, int)
    {
        java.lang.IllegalStateException $r2;
        int i0, i1;
        com.jmatio.types.MLNumericArray r0;
        java.lang.Number r1;
        boolean $z0;

        r0 := @this: com.jmatio.types.MLNumericArray;

        r1 := @parameter0: java.lang.Number;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = virtualinvoke r0.<com.jmatio.types.MLNumericArray: boolean isComplex()>();

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot use this method for Complex matrices");

        throw $r2;

     label1:
        virtualinvoke r0.<com.jmatio.types.MLNumericArray: void setReal(java.lang.Number,int,int)>(r1, i0, i1);

        return;
    }

    public void set(java.lang.Number, int)
    {
        java.lang.IllegalStateException $r2;
        int i0;
        com.jmatio.types.MLNumericArray r0;
        java.lang.Number r1;
        boolean $z0;

        r0 := @this: com.jmatio.types.MLNumericArray;

        r1 := @parameter0: java.lang.Number;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<com.jmatio.types.MLNumericArray: boolean isComplex()>();

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot use this method for Complex matrices");

        throw $r2;

     label1:
        virtualinvoke r0.<com.jmatio.types.MLNumericArray: void setReal(java.lang.Number,int)>(r1, i0);

        return;
    }

    public java.lang.Number get(int, int)
    {
        java.lang.IllegalStateException $r2;
        int i0, i1;
        com.jmatio.types.MLNumericArray r0;
        java.lang.Number $r1;
        boolean $z0;

        r0 := @this: com.jmatio.types.MLNumericArray;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = virtualinvoke r0.<com.jmatio.types.MLNumericArray: boolean isComplex()>();

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot use this method for Complex matrices");

        throw $r2;

     label1:
        $r1 = virtualinvoke r0.<com.jmatio.types.MLNumericArray: java.lang.Number getReal(int,int)>(i0, i1);

        return $r1;
    }

    public java.lang.Number get(int)
    {
        java.lang.IllegalStateException $r3;
        int i0;
        com.jmatio.types.MLNumericArray r0;
        java.lang.Number $r2;
        java.nio.ByteBuffer $r1;
        boolean $z0;

        r0 := @this: com.jmatio.types.MLNumericArray;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<com.jmatio.types.MLNumericArray: boolean isComplex()>();

        if $z0 == 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot use this method for Complex matrices");

        throw $r3;

     label1:
        $r1 = r0.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer real>;

        $r2 = virtualinvoke r0.<com.jmatio.types.MLNumericArray: java.lang.Number _get(java.nio.ByteBuffer,int)>($r1, i0);

        return $r2;
    }

    public void set(java.lang.Number[])
    {
        java.lang.Number[] r1;
        java.lang.IllegalStateException $r2;
        com.jmatio.types.MLNumericArray r0;
        boolean $z0;

        r0 := @this: com.jmatio.types.MLNumericArray;

        r1 := @parameter0: java.lang.Number[];

        $z0 = virtualinvoke r0.<com.jmatio.types.MLNumericArray: boolean isComplex()>();

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot use this method for Complex matrices");

        throw $r2;

     label1:
        virtualinvoke r0.<com.jmatio.types.MLNumericArray: void setReal(java.lang.Number[])>(r1);

        return;
    }

    private int getByteOffset(int)
    {
        int i0, $i1, $i2;
        com.jmatio.types.MLNumericArray r0;

        r0 := @this: com.jmatio.types.MLNumericArray;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<com.jmatio.types.MLNumericArray: int getBytesAllocated()>();

        $i2 = i0 * $i1;

        return $i2;
    }

    protected java.lang.Number _get(java.nio.ByteBuffer, int)
    {
        byte[] $r2, $r3, $r4;
        java.nio.ByteBuffer r0;
        int i0, $i1, $i2;
        com.jmatio.types.MLNumericArray r1;
        java.lang.Number $r5;

        r1 := @this: com.jmatio.types.MLNumericArray;

        r0 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        $i1 = specialinvoke r1.<com.jmatio.types.MLNumericArray: int getByteOffset(int)>(i0);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i1);

        $r3 = r1.<com.jmatio.types.MLNumericArray: byte[] bytes>;

        $r2 = r1.<com.jmatio.types.MLNumericArray: byte[] bytes>;

        $i2 = lengthof $r2;

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>($r3, 0, $i2);

        $r4 = r1.<com.jmatio.types.MLNumericArray: byte[] bytes>;

        $r5 = virtualinvoke r1.<com.jmatio.types.MLNumericArray: java.lang.Number buldFromBytes(byte[])>($r4);

        return $r5;
    }

    protected void _set(java.nio.ByteBuffer, java.lang.Number, int)
    {
        byte[] $r3;
        int i0, $i1;
        com.jmatio.types.MLNumericArray r1;
        java.lang.Number r2;
        java.nio.ByteBuffer r0;

        r1 := @this: com.jmatio.types.MLNumericArray;

        r0 := @parameter0: java.nio.ByteBuffer;

        r2 := @parameter1: java.lang.Number;

        i0 := @parameter2: int;

        $i1 = specialinvoke r1.<com.jmatio.types.MLNumericArray: int getByteOffset(int)>(i0);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i1);

        $r3 = virtualinvoke r1.<com.jmatio.types.MLNumericArray: byte[] getByteArray(java.lang.Number)>(r2);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>($r3);

        return;
    }

    public void putImaginaryByteBuffer(java.nio.ByteBuffer)
    {
        com.jmatio.types.MLNumericArray r0;
        java.lang.RuntimeException $r4;
        java.nio.ByteBuffer $r1, r2, $r3;
        boolean $z0;

        r0 := @this: com.jmatio.types.MLNumericArray;

        r2 := @parameter0: java.nio.ByteBuffer;

        $z0 = virtualinvoke r0.<com.jmatio.types.MLNumericArray: boolean isComplex()>();

        if $z0 != 0 goto label1;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("Array is not complex");

        throw $r4;

     label1:
        $r1 = r0.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer imaginary>;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        $r3 = r0.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer imaginary>;

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>(r2);

        return;
    }

    public java.nio.ByteBuffer getImaginaryByteBuffer()
    {
        com.jmatio.types.MLNumericArray r0;
        java.nio.ByteBuffer $r1;

        r0 := @this: com.jmatio.types.MLNumericArray;

        $r1 = r0.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer imaginary>;

        return $r1;
    }

    public void putRealByteBuffer(java.nio.ByteBuffer)
    {
        com.jmatio.types.MLNumericArray r0;
        java.nio.ByteBuffer $r1, r2, $r3;

        r0 := @this: com.jmatio.types.MLNumericArray;

        r2 := @parameter0: java.nio.ByteBuffer;

        $r1 = r0.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer real>;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        $r3 = r0.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer real>;

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>(r2);

        return;
    }

    public java.nio.ByteBuffer getRealByteBuffer()
    {
        com.jmatio.types.MLNumericArray r0;
        java.nio.ByteBuffer $r1;

        r0 := @this: com.jmatio.types.MLNumericArray;

        $r1 = r0.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer real>;

        return $r1;
    }

    public java.lang.String contentToString()
    {
        java.lang.StringBuffer $r0;
        int $i0, $i1, $i2, i3, i4;
        java.lang.String $r3, $r6, $r7, $r13, $r14;
        java.lang.Number $r8, $r11;
        boolean $z0;
        java.lang.StringBuilder $r1, $r4, $r5, $r9, $r10, $r12;
        com.jmatio.types.MLNumericArray r2;

        r2 := @this: com.jmatio.types.MLNumericArray;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = r2.<com.jmatio.types.MLNumericArray: java.lang.String name>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = \n");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $i0 = virtualinvoke r2.<com.jmatio.types.MLNumericArray: int getSize()>();

        if $i0 <= 1000 goto label1;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot display variables with more than 1000 elements.");

        $r14 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r14;

     label1:
        i3 = 0;

     label2:
        $i1 = virtualinvoke r2.<com.jmatio.types.MLNumericArray: int getM()>();

        if i3 >= $i1 goto label6;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t");

        i4 = 0;

     label3:
        $i2 = virtualinvoke r2.<com.jmatio.types.MLNumericArray: int getN()>();

        if i4 >= $i2 goto label5;

        $r8 = virtualinvoke r2.<com.jmatio.types.MLNumericArray: java.lang.Number getReal(int,int)>(i3, i4);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r8);

        $z0 = virtualinvoke r2.<com.jmatio.types.MLNumericArray: boolean isComplex()>();

        if $z0 == 0 goto label4;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("+");

        $r11 = virtualinvoke r2.<com.jmatio.types.MLNumericArray: java.lang.Number getImaginary(int,int)>(i3, i4);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

     label4:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t");

        i4 = i4 + 1;

        goto label3;

     label5:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        i3 = i3 + 1;

        goto label2;

     label6:
        $r7 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;
    }

    public boolean equals(java.lang.Object)
    {
        java.nio.ByteBuffer $r3, $r4, $r6, $r7;
        int[] $r9, $r10;
        boolean $z0, $z1, $z2, $z3, $z4, z6, $z7, $z8, $z9, $z10;
        java.lang.Object r0;
        com.jmatio.types.MLNumericArray r1, $r2, $r5, $r8;

        r1 := @this: com.jmatio.types.MLNumericArray;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof com.jmatio.types.MLNumericArray;

        if $z0 == 0 goto label4;

        $r4 = r1.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer real>;

        $r2 = (com.jmatio.types.MLNumericArray) r0;

        $r3 = $r2.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer real>;

        $z2 = staticinvoke <com.jmatio.types.MLNumericArray: boolean directByteBufferEquals(java.nio.ByteBuffer,java.nio.ByteBuffer)>($r4, $r3);

        if $z2 == 0 goto label1;

        $r10 = r1.<com.jmatio.types.MLNumericArray: int[] dims>;

        $r8 = (com.jmatio.types.MLNumericArray) r0;

        $r9 = $r8.<com.jmatio.types.MLNumericArray: int[] dims>;

        $z4 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r10, $r9);

        if $z4 == 0 goto label1;

        $z10 = 1;

        $z9 = 1;

        $z8 = 1;

        goto label2;

     label1:
        $z10 = 0;

        $z9 = 0;

        $z8 = 0;

     label2:
        z6 = $z8;

        $z7 = virtualinvoke r1.<com.jmatio.types.MLNumericArray: boolean isComplex()>();

        if $z7 == 0 goto label3;

        if $z10 == 0 goto label3;

        $r7 = r1.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer imaginary>;

        $r5 = (com.jmatio.types.MLNumericArray) r0;

        $r6 = $r5.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer imaginary>;

        $z3 = staticinvoke <com.jmatio.types.MLNumericArray: boolean directByteBufferEquals(java.nio.ByteBuffer,java.nio.ByteBuffer)>($r7, $r6);

        z6 = $z9 & $z3;

     label3:
        return z6;

     label4:
        $z1 = specialinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        return $z1;
    }

    private static boolean directByteBufferEquals(java.nio.ByteBuffer, java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0, r1;
        byte $b2, $b3;
        int $i0, $i1, i4, $i5, $i6;

        r0 := @parameter0: java.nio.ByteBuffer;

        r1 := @parameter1: java.nio.ByteBuffer;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r0 == null goto label2;

        if r1 != null goto label3;

     label2:
        return 0;

     label3:
        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        $i0 = virtualinvoke r0.<java.nio.ByteBuffer: int remaining()>();

        $i1 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        if $i1 == $i0 goto label4;

        return 0;

     label4:
        i4 = 0;

     label5:
        if i4 >= $i0 goto label7;

        $b2 = virtualinvoke r0.<java.nio.ByteBuffer: byte get()>();

        $b3 = virtualinvoke r1.<java.nio.ByteBuffer: byte get()>();

        $i5 = (int) $b2;

        $i6 = (int) $b3;

        if $i5 == $i6 goto label6;

        return 0;

     label6:
        i4 = i4 + 1;

        goto label5;

     label7:
        return 1;
    }

    public void dispose()
    {
        com.jmatio.types.MLNumericArray r0;
        java.nio.ByteBuffer $r1, $r2, $r3, $r4;

        r0 := @this: com.jmatio.types.MLNumericArray;

        $r1 = r0.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer real>;

        if $r1 == null goto label1;

        $r4 = r0.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer real>;

        virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

     label1:
        $r2 = r0.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer imaginary>;

        if $r2 == null goto label2;

        $r3 = r0.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer real>;

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

     label2:
        return;
    }
}
