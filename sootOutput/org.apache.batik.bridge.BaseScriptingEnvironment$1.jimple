class org.apache.batik.bridge.BaseScriptingEnvironment$1 extends java.lang.Object implements org.w3c.dom.events.EventListener
{
    private final org.apache.batik.script.Interpreter val$interp;
    private final java.lang.String val$s;
    private final java.lang.String val$desc;
    private final org.apache.batik.bridge.BaseScriptingEnvironment this$0;

    void <init>(org.apache.batik.bridge.BaseScriptingEnvironment, org.apache.batik.script.Interpreter, java.lang.String, java.lang.String)
    {
        org.apache.batik.bridge.BaseScriptingEnvironment$1 r0;
        org.apache.batik.bridge.BaseScriptingEnvironment r1;
        org.apache.batik.script.Interpreter r2;
        java.lang.String r3, r4;

        r0 := @this: org.apache.batik.bridge.BaseScriptingEnvironment$1;

        r1 := @parameter0: org.apache.batik.bridge.BaseScriptingEnvironment;

        r2 := @parameter1: org.apache.batik.script.Interpreter;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.batik.bridge.BaseScriptingEnvironment$1: org.apache.batik.bridge.BaseScriptingEnvironment this$0> = r1;

        r0.<org.apache.batik.bridge.BaseScriptingEnvironment$1: org.apache.batik.script.Interpreter val$interp> = r2;

        r0.<org.apache.batik.bridge.BaseScriptingEnvironment$1: java.lang.String val$s> = r3;

        r0.<org.apache.batik.bridge.BaseScriptingEnvironment$1: java.lang.String val$desc> = r4;

        return;
    }

    public void handleEvent(org.w3c.dom.events.Event)
    {
        org.apache.batik.bridge.BaseScriptingEnvironment$1 r1;
        org.apache.batik.bridge.BaseScriptingEnvironment $r10;
        org.apache.batik.script.Interpreter $r2, $r3, $r6;
        java.io.IOException $r11;
        org.apache.batik.script.InterpreterException $r9;
        java.io.StringReader $r4;
        org.w3c.dom.events.Event r0;
        org.apache.batik.script.ScriptEventWrapper $r8;
        java.lang.Object r12;
        java.lang.String $r5, $r7;
        boolean $z0;

        r1 := @this: org.apache.batik.bridge.BaseScriptingEnvironment$1;

        r0 := @parameter0: org.w3c.dom.events.Event;

     label1:
        $z0 = r0 instanceof org.apache.batik.script.ScriptEventWrapper;

        if $z0 == 0 goto label2;

        $r8 = (org.apache.batik.script.ScriptEventWrapper) r0;

        r12 = interfaceinvoke $r8.<org.apache.batik.script.ScriptEventWrapper: java.lang.Object getEventObject()>();

        goto label3;

     label2:
        r12 = r0;

     label3:
        $r2 = r1.<org.apache.batik.bridge.BaseScriptingEnvironment$1: org.apache.batik.script.Interpreter val$interp>;

        interfaceinvoke $r2.<org.apache.batik.script.Interpreter: void bindObject(java.lang.String,java.lang.Object)>("event", r12);

        $r3 = r1.<org.apache.batik.bridge.BaseScriptingEnvironment$1: org.apache.batik.script.Interpreter val$interp>;

        interfaceinvoke $r3.<org.apache.batik.script.Interpreter: void bindObject(java.lang.String,java.lang.Object)>("evt", r12);

        $r6 = r1.<org.apache.batik.bridge.BaseScriptingEnvironment$1: org.apache.batik.script.Interpreter val$interp>;

        $r4 = new java.io.StringReader;

        $r5 = r1.<org.apache.batik.bridge.BaseScriptingEnvironment$1: java.lang.String val$s>;

        specialinvoke $r4.<java.io.StringReader: void <init>(java.lang.String)>($r5);

        $r7 = r1.<org.apache.batik.bridge.BaseScriptingEnvironment$1: java.lang.String val$desc>;

        interfaceinvoke $r6.<org.apache.batik.script.Interpreter: java.lang.Object evaluate(java.io.Reader,java.lang.String)>($r4, $r7);

     label4:
        goto label7;

     label5:
        $r11 := @caughtexception;

        goto label7;

     label6:
        $r9 := @caughtexception;

        $r10 = r1.<org.apache.batik.bridge.BaseScriptingEnvironment$1: org.apache.batik.bridge.BaseScriptingEnvironment this$0>;

        virtualinvoke $r10.<org.apache.batik.bridge.BaseScriptingEnvironment: void handleInterpreterException(org.apache.batik.script.InterpreterException)>($r9);

     label7:
        return;

        catch java.io.IOException from label1 to label4 with label5;
        catch org.apache.batik.script.InterpreterException from label1 to label4 with label6;
    }
}
