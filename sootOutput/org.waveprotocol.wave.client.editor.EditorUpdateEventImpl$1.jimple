class org.waveprotocol.wave.client.editor.EditorUpdateEventImpl$1 extends java.lang.Object implements org.waveprotocol.wave.client.scheduler.Scheduler$IncrementalTask
{
    int delays;
    final org.waveprotocol.wave.client.editor.EditorUpdateEventImpl this$0;

    void <init>(org.waveprotocol.wave.client.editor.EditorUpdateEventImpl)
    {
        org.waveprotocol.wave.client.editor.EditorUpdateEventImpl r1;
        org.waveprotocol.wave.client.editor.EditorUpdateEventImpl$1 r0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl$1;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl;

        r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl$1: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl$1: int delays> = 0;

        return;
    }

    public boolean execute()
    {
        java.lang.StringBuilder $r27, $r28, $r30, $r31, $r32, $r34, $r35, $r36, $r38, $r39, $r40, $r42;
        org.waveprotocol.wave.common.logging.Logger $r6, $r8, $r10, $r26, $r45, $r48, $r50;
        java.lang.String $r23, $r43;
        org.waveprotocol.wave.client.editor.EditorImpl $r2, $r4;
        org.waveprotocol.wave.model.util.StringSet $r21;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        org.waveprotocol.wave.common.logging.LoggerBundle $r5, $r7, $r9, $r25, $r44, $r47, $r49;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r12;
        org.waveprotocol.wave.client.editor.EditorUpdateEventImpl $r1, $r3, $r11, $r14, $r15, $r16, $r17, $r20, $r24, $r29, $r33, $r37, $r41, $r46, $r51, $r52;
        org.waveprotocol.wave.client.editor.EditorUpdateEvent$EditorUpdateListener r19;
        int $i0, $i1, $i2;
        java.util.Iterator $r13;
        org.waveprotocol.wave.client.editor.EditorUpdateEventImpl$1 r0;
        java.lang.Object $r18;
        java.lang.Class $r22;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl$1;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl$1: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: org.waveprotocol.wave.client.editor.EditorImpl access$000(org.waveprotocol.wave.client.editor.EditorUpdateEventImpl)>($r1);

        $z0 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.EditorImpl: boolean isConsistent()>();

        if $z0 != 0 goto label3;

        $r44 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r45 = interfaceinvoke $r44.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        $z9 = interfaceinvoke $r45.<org.waveprotocol.wave.common.logging.Logger: boolean shouldLog()>();

        if $z9 == 0 goto label1;

        $r49 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r50 = interfaceinvoke $r49.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        interfaceinvoke $r50.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>("Notification deferred for consistency reasons");

     label1:
        $i0 = r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl$1: int delays>;

        $i1 = $i0 + 1;

        r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl$1: int delays> = $i1;

        $i2 = r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl$1: int delays>;

        if $i2 != 20 goto label2;

        $r47 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r48 = interfaceinvoke $r47.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        interfaceinvoke $r48.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>("More than 20 notification delays encountered - possibly uncleared extraction state");

     label2:
        $r46 = r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl$1: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl this$0>;

        staticinvoke <org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: boolean access$102(org.waveprotocol.wave.client.editor.EditorUpdateEventImpl,boolean)>($r46, 1);

        goto label9;

     label3:
        $r3 = r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl$1: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl this$0>;

        $r4 = staticinvoke <org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: org.waveprotocol.wave.client.editor.EditorImpl access$000(org.waveprotocol.wave.client.editor.EditorUpdateEventImpl)>($r3);

        $z1 = virtualinvoke $r4.<org.waveprotocol.wave.client.editor.EditorImpl: boolean hasDocument()>();

        if $z1 == 0 goto label8;

        $r9 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r10 = interfaceinvoke $r9.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        $z3 = interfaceinvoke $r10.<org.waveprotocol.wave.common.logging.Logger: boolean shouldLog()>();

        if $z3 == 0 goto label4;

        $r25 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r26 = interfaceinvoke $r25.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("EditorUpdateEvent: selCoords:");

        $r29 = r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl$1: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl this$0>;

        $z5 = staticinvoke <org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: boolean access$200(org.waveprotocol.wave.client.editor.EditorUpdateEventImpl)>($r29);

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z5);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("selLoc:");

        $r33 = r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl$1: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl this$0>;

        $z6 = staticinvoke <org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: boolean access$300(org.waveprotocol.wave.client.editor.EditorUpdateEventImpl)>($r33);

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z6);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("content:");

        $r37 = r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl$1: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl this$0>;

        $z7 = staticinvoke <org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: boolean access$400(org.waveprotocol.wave.client.editor.EditorUpdateEventImpl)>($r37);

        $r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("userDirectlyChangedContent:");

        $r41 = r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl$1: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl this$0>;

        $z8 = staticinvoke <org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: boolean access$500(org.waveprotocol.wave.client.editor.EditorUpdateEventImpl)>($r41);

        $r42 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z8);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r26.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>($r43);

     label4:
        $r11 = r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl$1: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl this$0>;

        $r12 = staticinvoke <org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: org.waveprotocol.wave.model.util.CopyOnWriteSet access$600(org.waveprotocol.wave.client.editor.EditorUpdateEventImpl)>($r11);

        $r13 = virtualinvoke $r12.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label5:
        $z10 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label7;

        $r18 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r19 = (org.waveprotocol.wave.client.editor.EditorUpdateEvent$EditorUpdateListener) $r18;

        $r20 = r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl$1: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl this$0>;

        $r21 = staticinvoke <org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: org.waveprotocol.wave.model.util.StringSet access$700(org.waveprotocol.wave.client.editor.EditorUpdateEventImpl)>($r20);

        $r22 = virtualinvoke r19.<java.lang.Object: java.lang.Class getClass()>();

        $r23 = virtualinvoke $r22.<java.lang.Class: java.lang.String getName()>();

        $z4 = interfaceinvoke $r21.<org.waveprotocol.wave.model.util.StringSet: boolean contains(java.lang.String)>($r23);

        if $z4 == 0 goto label6;

        goto label5;

     label6:
        $r24 = r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl$1: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl this$0>;

        interfaceinvoke r19.<org.waveprotocol.wave.client.editor.EditorUpdateEvent$EditorUpdateListener: void onUpdate(org.waveprotocol.wave.client.editor.EditorUpdateEvent)>($r24);

        goto label5;

     label7:
        $r14 = r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl$1: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl this$0>;

        staticinvoke <org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: boolean access$202(org.waveprotocol.wave.client.editor.EditorUpdateEventImpl,boolean)>($r14, 0);

        $r15 = r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl$1: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl this$0>;

        staticinvoke <org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: boolean access$302(org.waveprotocol.wave.client.editor.EditorUpdateEventImpl,boolean)>($r15, 0);

        $r16 = r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl$1: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl this$0>;

        staticinvoke <org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: boolean access$402(org.waveprotocol.wave.client.editor.EditorUpdateEventImpl,boolean)>($r16, 0);

        $r17 = r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl$1: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl this$0>;

        staticinvoke <org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: boolean access$502(org.waveprotocol.wave.client.editor.EditorUpdateEventImpl,boolean)>($r17, 0);

     label8:
        r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl$1: int delays> = 0;

        $r5 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        $z2 = interfaceinvoke $r6.<org.waveprotocol.wave.common.logging.Logger: boolean shouldLog()>();

        if $z2 == 0 goto label9;

        $r7 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r8 = interfaceinvoke $r7.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        interfaceinvoke $r8.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>("Notification sent");

     label9:
        $r51 = r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl$1: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl this$0>;

        $z11 = staticinvoke <org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: boolean access$100(org.waveprotocol.wave.client.editor.EditorUpdateEventImpl)>($r51);

        $r52 = r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl$1: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl this$0>;

        staticinvoke <org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: boolean access$102(org.waveprotocol.wave.client.editor.EditorUpdateEventImpl,boolean)>($r52, 0);

        return $z11;
    }

    public java.lang.String toString()
    {
        org.waveprotocol.wave.client.editor.EditorUpdateEventImpl $r3;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r4;
        org.waveprotocol.wave.client.editor.EditorUpdateEventImpl$1 r2;
        java.lang.StringBuilder $r0, $r1, $r5, $r6;
        java.lang.String $r7;

        r2 := @this: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl$1;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("EditorUpdateEventImpl.notificationTask [update listeners: ");

        $r3 = r2.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl$1: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl this$0>;

        $r4 = staticinvoke <org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: org.waveprotocol.wave.model.util.CopyOnWriteSet access$600(org.waveprotocol.wave.client.editor.EditorUpdateEventImpl)>($r3);

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }
}
