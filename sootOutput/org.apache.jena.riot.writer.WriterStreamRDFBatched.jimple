abstract class org.apache.jena.riot.writer.WriterStreamRDFBatched extends org.apache.jena.riot.writer.WriterStreamRDFBase
{
    private com.hp.hpl.jena.graph.Node currentSubject;
    private com.hp.hpl.jena.graph.Node currentGraph;
    private java.util.List batchTriples;
    private java.util.List batchQuads;

    public void <init>(java.io.OutputStream)
    {
        org.apache.jena.riot.writer.WriterStreamRDFBatched r0;
        java.io.OutputStream r1;

        r0 := @this: org.apache.jena.riot.writer.WriterStreamRDFBatched;

        r1 := @parameter0: java.io.OutputStream;

        specialinvoke r0.<org.apache.jena.riot.writer.WriterStreamRDFBase: void <init>(java.io.OutputStream)>(r1);

        return;
    }

    public void <init>(java.io.Writer)
    {
        org.apache.jena.riot.writer.WriterStreamRDFBatched r0;
        java.io.Writer r1;

        r0 := @this: org.apache.jena.riot.writer.WriterStreamRDFBatched;

        r1 := @parameter0: java.io.Writer;

        specialinvoke r0.<org.apache.jena.riot.writer.WriterStreamRDFBase: void <init>(java.io.Writer)>(r1);

        return;
    }

    public void <init>(org.apache.jena.atlas.io.IndentedWriter)
    {
        org.apache.jena.riot.writer.WriterStreamRDFBatched r0;
        org.apache.jena.atlas.io.IndentedWriter r1;

        r0 := @this: org.apache.jena.riot.writer.WriterStreamRDFBatched;

        r1 := @parameter0: org.apache.jena.atlas.io.IndentedWriter;

        specialinvoke r0.<org.apache.jena.riot.writer.WriterStreamRDFBase: void <init>(org.apache.jena.atlas.io.IndentedWriter)>(r1);

        return;
    }

    protected final void startData()
    {
        org.apache.jena.riot.writer.WriterStreamRDFBatched r0;

        r0 := @this: org.apache.jena.riot.writer.WriterStreamRDFBatched;

        virtualinvoke r0.<org.apache.jena.riot.writer.WriterStreamRDFBatched: void reset()>();

        return;
    }

    protected final void endData()
    {
        org.apache.jena.riot.writer.WriterStreamRDFBatched r0;

        r0 := @this: org.apache.jena.riot.writer.WriterStreamRDFBatched;

        specialinvoke r0.<org.apache.jena.riot.writer.WriterStreamRDFBatched: void flush()>();

        return;
    }

    private void flush()
    {
        org.apache.jena.riot.writer.WriterStreamRDFBatched r0;
        com.hp.hpl.jena.graph.Node $r1, $r2, $r3;

        r0 := @this: org.apache.jena.riot.writer.WriterStreamRDFBatched;

        $r1 = r0.<org.apache.jena.riot.writer.WriterStreamRDFBatched: com.hp.hpl.jena.graph.Node currentSubject>;

        specialinvoke r0.<org.apache.jena.riot.writer.WriterStreamRDFBatched: void finishBatchTriple(com.hp.hpl.jena.graph.Node)>($r1);

        $r3 = r0.<org.apache.jena.riot.writer.WriterStreamRDFBatched: com.hp.hpl.jena.graph.Node currentGraph>;

        $r2 = r0.<org.apache.jena.riot.writer.WriterStreamRDFBatched: com.hp.hpl.jena.graph.Node currentSubject>;

        specialinvoke r0.<org.apache.jena.riot.writer.WriterStreamRDFBatched: void finishBatchQuad(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r3, $r2);

        virtualinvoke r0.<org.apache.jena.riot.writer.WriterStreamRDFBatched: void finalizeRun()>();

        return;
    }

    protected final void reset()
    {
        org.apache.jena.riot.writer.WriterStreamRDFBatched r0;

        r0 := @this: org.apache.jena.riot.writer.WriterStreamRDFBatched;

        r0.<org.apache.jena.riot.writer.WriterStreamRDFBatched: com.hp.hpl.jena.graph.Node currentSubject> = null;

        r0.<org.apache.jena.riot.writer.WriterStreamRDFBatched: com.hp.hpl.jena.graph.Node currentGraph> = null;

        r0.<org.apache.jena.riot.writer.WriterStreamRDFBatched: java.util.List batchTriples> = null;

        r0.<org.apache.jena.riot.writer.WriterStreamRDFBatched: java.util.List batchQuads> = null;

        return;
    }

    protected final void print(com.hp.hpl.jena.sparql.core.Quad)
    {
        com.hp.hpl.jena.graph.Node $r1, $r2, $r4, $r5, $r6, $r7, $r8;
        com.hp.hpl.jena.sparql.core.Quad r0;
        org.apache.jena.riot.writer.WriterStreamRDFBatched r3;
        boolean $z0, $z1;

        r3 := @this: org.apache.jena.riot.writer.WriterStreamRDFBatched;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.Quad;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getGraph()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getSubject()>();

        $r4 = r3.<org.apache.jena.riot.writer.WriterStreamRDFBatched: com.hp.hpl.jena.graph.Node currentGraph>;

        $z0 = staticinvoke <org.apache.jena.atlas.lib.Lib: boolean equal(java.lang.Object,java.lang.Object)>($r1, $r4);

        if $z0 == 0 goto label1;

        $r8 = r3.<org.apache.jena.riot.writer.WriterStreamRDFBatched: com.hp.hpl.jena.graph.Node currentSubject>;

        $z1 = staticinvoke <org.apache.jena.atlas.lib.Lib: boolean equal(java.lang.Object,java.lang.Object)>($r2, $r8);

        if $z1 != 0 goto label3;

     label1:
        $r5 = r3.<org.apache.jena.riot.writer.WriterStreamRDFBatched: com.hp.hpl.jena.graph.Node currentSubject>;

        if $r5 == null goto label2;

        $r7 = r3.<org.apache.jena.riot.writer.WriterStreamRDFBatched: com.hp.hpl.jena.graph.Node currentGraph>;

        $r6 = r3.<org.apache.jena.riot.writer.WriterStreamRDFBatched: com.hp.hpl.jena.graph.Node currentSubject>;

        specialinvoke r3.<org.apache.jena.riot.writer.WriterStreamRDFBatched: void finishBatchQuad(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r7, $r6);

     label2:
        specialinvoke r3.<org.apache.jena.riot.writer.WriterStreamRDFBatched: void startBatchQuad(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r1, $r2);

        r3.<org.apache.jena.riot.writer.WriterStreamRDFBatched: com.hp.hpl.jena.graph.Node currentGraph> = $r1;

        r3.<org.apache.jena.riot.writer.WriterStreamRDFBatched: com.hp.hpl.jena.graph.Node currentSubject> = $r2;

     label3:
        specialinvoke r3.<org.apache.jena.riot.writer.WriterStreamRDFBatched: void processQuad(com.hp.hpl.jena.sparql.core.Quad)>(r0);

        return;
    }

    protected final void print(com.hp.hpl.jena.graph.Triple)
    {
        org.apache.jena.riot.writer.WriterStreamRDFBatched r2;
        com.hp.hpl.jena.graph.Node $r1, $r3, $r4, $r5;
        com.hp.hpl.jena.graph.Triple r0;
        boolean $z0;

        r2 := @this: org.apache.jena.riot.writer.WriterStreamRDFBatched;

        r0 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r3 = r2.<org.apache.jena.riot.writer.WriterStreamRDFBatched: com.hp.hpl.jena.graph.Node currentSubject>;

        $z0 = staticinvoke <org.apache.jena.atlas.lib.Lib: boolean equal(java.lang.Object,java.lang.Object)>($r1, $r3);

        if $z0 != 0 goto label2;

        $r4 = r2.<org.apache.jena.riot.writer.WriterStreamRDFBatched: com.hp.hpl.jena.graph.Node currentSubject>;

        if $r4 == null goto label1;

        $r5 = r2.<org.apache.jena.riot.writer.WriterStreamRDFBatched: com.hp.hpl.jena.graph.Node currentSubject>;

        specialinvoke r2.<org.apache.jena.riot.writer.WriterStreamRDFBatched: void finishBatchTriple(com.hp.hpl.jena.graph.Node)>($r5);

     label1:
        specialinvoke r2.<org.apache.jena.riot.writer.WriterStreamRDFBatched: void startBatchTriple(com.hp.hpl.jena.graph.Node)>($r1);

        r2.<org.apache.jena.riot.writer.WriterStreamRDFBatched: com.hp.hpl.jena.graph.Node currentGraph> = null;

        r2.<org.apache.jena.riot.writer.WriterStreamRDFBatched: com.hp.hpl.jena.graph.Node currentSubject> = $r1;

     label2:
        specialinvoke r2.<org.apache.jena.riot.writer.WriterStreamRDFBatched: void processTriple(com.hp.hpl.jena.graph.Triple)>(r0);

        return;
    }

    private void startBatchTriple(com.hp.hpl.jena.graph.Node)
    {
        org.apache.jena.riot.writer.WriterStreamRDFBatched r0;
        com.hp.hpl.jena.graph.Node r2;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.jena.riot.writer.WriterStreamRDFBatched;

        r2 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.jena.riot.writer.WriterStreamRDFBatched: java.util.List batchTriples> = $r1;

        return;
    }

    private void processTriple(com.hp.hpl.jena.graph.Triple)
    {
        org.apache.jena.riot.writer.WriterStreamRDFBatched r0;
        java.util.List $r2;
        com.hp.hpl.jena.graph.Triple r1;

        r0 := @this: org.apache.jena.riot.writer.WriterStreamRDFBatched;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r2 = r0.<org.apache.jena.riot.writer.WriterStreamRDFBatched: java.util.List batchTriples>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    private void finishBatchTriple(com.hp.hpl.jena.graph.Node)
    {
        org.apache.jena.riot.writer.WriterStreamRDFBatched r0;
        java.util.List $r1, $r2, $r3;
        int $i0;
        com.hp.hpl.jena.graph.Node $r4, r5;

        r0 := @this: org.apache.jena.riot.writer.WriterStreamRDFBatched;

        r5 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r1 = r0.<org.apache.jena.riot.writer.WriterStreamRDFBatched: java.util.List batchTriples>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.jena.riot.writer.WriterStreamRDFBatched: java.util.List batchTriples>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        $r4 = r0.<org.apache.jena.riot.writer.WriterStreamRDFBatched: com.hp.hpl.jena.graph.Node currentSubject>;

        $r3 = r0.<org.apache.jena.riot.writer.WriterStreamRDFBatched: java.util.List batchTriples>;

        virtualinvoke r0.<org.apache.jena.riot.writer.WriterStreamRDFBatched: void printBatchTriples(com.hp.hpl.jena.graph.Node,java.util.List)>($r4, $r3);

     label1:
        return;
    }

    private void startBatchQuad(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        org.apache.jena.riot.writer.WriterStreamRDFBatched r0;
        com.hp.hpl.jena.graph.Node r2, r3;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.jena.riot.writer.WriterStreamRDFBatched;

        r2 := @parameter0: com.hp.hpl.jena.graph.Node;

        r3 := @parameter1: com.hp.hpl.jena.graph.Node;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.jena.riot.writer.WriterStreamRDFBatched: java.util.List batchQuads> = $r1;

        return;
    }

    private void processQuad(com.hp.hpl.jena.sparql.core.Quad)
    {
        org.apache.jena.riot.writer.WriterStreamRDFBatched r0;
        java.util.List $r2;
        com.hp.hpl.jena.sparql.core.Quad r1;

        r0 := @this: org.apache.jena.riot.writer.WriterStreamRDFBatched;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.Quad;

        $r2 = r0.<org.apache.jena.riot.writer.WriterStreamRDFBatched: java.util.List batchQuads>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    private void finishBatchQuad(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node $r4, $r5, r6, r7;
        org.apache.jena.riot.writer.WriterStreamRDFBatched r0;
        java.util.List $r1, $r2, $r3;
        int $i0;

        r0 := @this: org.apache.jena.riot.writer.WriterStreamRDFBatched;

        r6 := @parameter0: com.hp.hpl.jena.graph.Node;

        r7 := @parameter1: com.hp.hpl.jena.graph.Node;

        $r1 = r0.<org.apache.jena.riot.writer.WriterStreamRDFBatched: java.util.List batchQuads>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.jena.riot.writer.WriterStreamRDFBatched: java.util.List batchQuads>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        $r5 = r0.<org.apache.jena.riot.writer.WriterStreamRDFBatched: com.hp.hpl.jena.graph.Node currentGraph>;

        $r4 = r0.<org.apache.jena.riot.writer.WriterStreamRDFBatched: com.hp.hpl.jena.graph.Node currentSubject>;

        $r3 = r0.<org.apache.jena.riot.writer.WriterStreamRDFBatched: java.util.List batchQuads>;

        virtualinvoke r0.<org.apache.jena.riot.writer.WriterStreamRDFBatched: void printBatchQuads(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,java.util.List)>($r5, $r4, $r3);

     label1:
        return;
    }

    protected abstract void printBatchQuads(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, java.util.List);

    protected abstract void printBatchTriples(com.hp.hpl.jena.graph.Node, java.util.List);

    protected abstract void finalizeRun();
}
