public final class com.ctc.wstx.dtd.DTDElement extends java.lang.Object
{
    final com.ctc.wstx.dtd.NameKey mName;
    final javax.xml.stream.Location mLocation;
    com.ctc.wstx.dtd.StructValidator mValidator;
    int mAllowedContent;
    final boolean mNsAware;
    final boolean mXml11;
    java.util.HashMap mAttrMap;
    java.util.ArrayList mSpecAttrList;
    boolean mAnyFixed;
    boolean mAnyDefaults;
    boolean mValidateAttrs;
    com.ctc.wstx.dtd.DTDAttribute mIdAttr;
    com.ctc.wstx.dtd.DTDAttribute mNotationAttr;
    java.util.HashMap mNsDefaults;

    private void <init>(javax.xml.stream.Location, com.ctc.wstx.dtd.NameKey, com.ctc.wstx.dtd.StructValidator, int, boolean, boolean)
    {
        com.ctc.wstx.dtd.StructValidator r3;
        com.ctc.wstx.dtd.NameKey r1;
        com.ctc.wstx.dtd.DTDElement r0;
        javax.xml.stream.Location r2;
        int i0;
        boolean z0, z1;

        r0 := @this: com.ctc.wstx.dtd.DTDElement;

        r2 := @parameter0: javax.xml.stream.Location;

        r1 := @parameter1: com.ctc.wstx.dtd.NameKey;

        r3 := @parameter2: com.ctc.wstx.dtd.StructValidator;

        i0 := @parameter3: int;

        z0 := @parameter4: boolean;

        z1 := @parameter5: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.ctc.wstx.dtd.DTDElement: java.util.HashMap mAttrMap> = null;

        r0.<com.ctc.wstx.dtd.DTDElement: java.util.ArrayList mSpecAttrList> = null;

        r0.<com.ctc.wstx.dtd.DTDElement: boolean mAnyFixed> = 0;

        r0.<com.ctc.wstx.dtd.DTDElement: boolean mAnyDefaults> = 0;

        r0.<com.ctc.wstx.dtd.DTDElement: boolean mValidateAttrs> = 0;

        r0.<com.ctc.wstx.dtd.DTDElement: java.util.HashMap mNsDefaults> = null;

        r0.<com.ctc.wstx.dtd.DTDElement: com.ctc.wstx.dtd.NameKey mName> = r1;

        r0.<com.ctc.wstx.dtd.DTDElement: javax.xml.stream.Location mLocation> = r2;

        r0.<com.ctc.wstx.dtd.DTDElement: com.ctc.wstx.dtd.StructValidator mValidator> = r3;

        r0.<com.ctc.wstx.dtd.DTDElement: int mAllowedContent> = i0;

        r0.<com.ctc.wstx.dtd.DTDElement: boolean mNsAware> = z0;

        r0.<com.ctc.wstx.dtd.DTDElement: boolean mXml11> = z1;

        return;
    }

    public static com.ctc.wstx.dtd.DTDElement createDefined(com.ctc.wstx.api.ReaderConfig, javax.xml.stream.Location, com.ctc.wstx.dtd.NameKey, com.ctc.wstx.dtd.StructValidator, int)
    {
        com.ctc.wstx.api.ReaderConfig r4;
        com.ctc.wstx.dtd.StructValidator r3;
        com.ctc.wstx.dtd.NameKey r2;
        com.ctc.wstx.dtd.DTDElement $r0;
        javax.xml.stream.Location r1;
        int i0;
        boolean $z0, $z1;

        r4 := @parameter0: com.ctc.wstx.api.ReaderConfig;

        r1 := @parameter1: javax.xml.stream.Location;

        r2 := @parameter2: com.ctc.wstx.dtd.NameKey;

        r3 := @parameter3: com.ctc.wstx.dtd.StructValidator;

        i0 := @parameter4: int;

        if i0 != 4 goto label1;

        staticinvoke <com.ctc.wstx.util.ExceptionUtil: void throwInternal(java.lang.String)>("trying to use XMLValidator.CONTENT_ALLOW_UNDEFINED via createDefined()");

     label1:
        $r0 = new com.ctc.wstx.dtd.DTDElement;

        $z0 = virtualinvoke r4.<com.ctc.wstx.api.ReaderConfig: boolean willSupportNamespaces()>();

        $z1 = virtualinvoke r4.<com.ctc.wstx.api.ReaderConfig: boolean isXml11()>();

        specialinvoke $r0.<com.ctc.wstx.dtd.DTDElement: void <init>(javax.xml.stream.Location,com.ctc.wstx.dtd.NameKey,com.ctc.wstx.dtd.StructValidator,int,boolean,boolean)>(r1, r2, r3, i0, $z0, $z1);

        return $r0;
    }

    public static com.ctc.wstx.dtd.DTDElement createPlaceholder(com.ctc.wstx.api.ReaderConfig, javax.xml.stream.Location, com.ctc.wstx.dtd.NameKey)
    {
        com.ctc.wstx.dtd.NameKey r2;
        com.ctc.wstx.dtd.DTDElement $r0;
        javax.xml.stream.Location r1;
        com.ctc.wstx.api.ReaderConfig r3;
        boolean $z0, $z1;

        r3 := @parameter0: com.ctc.wstx.api.ReaderConfig;

        r1 := @parameter1: javax.xml.stream.Location;

        r2 := @parameter2: com.ctc.wstx.dtd.NameKey;

        $r0 = new com.ctc.wstx.dtd.DTDElement;

        $z0 = virtualinvoke r3.<com.ctc.wstx.api.ReaderConfig: boolean willSupportNamespaces()>();

        $z1 = virtualinvoke r3.<com.ctc.wstx.api.ReaderConfig: boolean isXml11()>();

        specialinvoke $r0.<com.ctc.wstx.dtd.DTDElement: void <init>(javax.xml.stream.Location,com.ctc.wstx.dtd.NameKey,com.ctc.wstx.dtd.StructValidator,int,boolean,boolean)>(r1, r2, null, 4, $z0, $z1);

        return $r0;
    }

    public com.ctc.wstx.dtd.DTDElement define(javax.xml.stream.Location, com.ctc.wstx.dtd.StructValidator, int)
    {
        com.ctc.wstx.dtd.DTDAttribute $r7, $r8;
        java.util.HashMap $r5, $r9;
        java.util.ArrayList $r6;
        com.ctc.wstx.dtd.StructValidator r3;
        com.ctc.wstx.dtd.NameKey $r4;
        com.ctc.wstx.dtd.DTDElement r0, $r1;
        int i0;
        boolean $z0, $z1, $z2, $z3, $z4;
        javax.xml.stream.Location r2;

        r0 := @this: com.ctc.wstx.dtd.DTDElement;

        r2 := @parameter0: javax.xml.stream.Location;

        r3 := @parameter1: com.ctc.wstx.dtd.StructValidator;

        i0 := @parameter2: int;

        specialinvoke r0.<com.ctc.wstx.dtd.DTDElement: void verifyUndefined()>();

        if i0 != 4 goto label1;

        staticinvoke <com.ctc.wstx.util.ExceptionUtil: void throwInternal(java.lang.String)>("trying to use CONTENT_ALLOW_UNDEFINED via define()");

     label1:
        $r1 = new com.ctc.wstx.dtd.DTDElement;

        $r4 = r0.<com.ctc.wstx.dtd.DTDElement: com.ctc.wstx.dtd.NameKey mName>;

        $z1 = r0.<com.ctc.wstx.dtd.DTDElement: boolean mNsAware>;

        $z0 = r0.<com.ctc.wstx.dtd.DTDElement: boolean mXml11>;

        specialinvoke $r1.<com.ctc.wstx.dtd.DTDElement: void <init>(javax.xml.stream.Location,com.ctc.wstx.dtd.NameKey,com.ctc.wstx.dtd.StructValidator,int,boolean,boolean)>(r2, $r4, r3, i0, $z1, $z0);

        $r5 = r0.<com.ctc.wstx.dtd.DTDElement: java.util.HashMap mAttrMap>;

        $r1.<com.ctc.wstx.dtd.DTDElement: java.util.HashMap mAttrMap> = $r5;

        $r6 = r0.<com.ctc.wstx.dtd.DTDElement: java.util.ArrayList mSpecAttrList>;

        $r1.<com.ctc.wstx.dtd.DTDElement: java.util.ArrayList mSpecAttrList> = $r6;

        $z2 = r0.<com.ctc.wstx.dtd.DTDElement: boolean mAnyFixed>;

        $r1.<com.ctc.wstx.dtd.DTDElement: boolean mAnyFixed> = $z2;

        $z3 = r0.<com.ctc.wstx.dtd.DTDElement: boolean mValidateAttrs>;

        $r1.<com.ctc.wstx.dtd.DTDElement: boolean mValidateAttrs> = $z3;

        $z4 = r0.<com.ctc.wstx.dtd.DTDElement: boolean mAnyDefaults>;

        $r1.<com.ctc.wstx.dtd.DTDElement: boolean mAnyDefaults> = $z4;

        $r7 = r0.<com.ctc.wstx.dtd.DTDElement: com.ctc.wstx.dtd.DTDAttribute mIdAttr>;

        $r1.<com.ctc.wstx.dtd.DTDElement: com.ctc.wstx.dtd.DTDAttribute mIdAttr> = $r7;

        $r8 = r0.<com.ctc.wstx.dtd.DTDElement: com.ctc.wstx.dtd.DTDAttribute mNotationAttr>;

        $r1.<com.ctc.wstx.dtd.DTDElement: com.ctc.wstx.dtd.DTDAttribute mNotationAttr> = $r8;

        $r9 = r0.<com.ctc.wstx.dtd.DTDElement: java.util.HashMap mNsDefaults>;

        $r1.<com.ctc.wstx.dtd.DTDElement: java.util.HashMap mNsDefaults> = $r9;

        return $r1;
    }

    public void defineFrom(com.ctc.wstx.sr.InputProblemReporter, com.ctc.wstx.dtd.DTDElement, boolean) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.dtd.StructValidator $r2;
        com.ctc.wstx.dtd.DTDElement r0, r1;
        com.ctc.wstx.sr.InputProblemReporter r3;
        int $i0;
        boolean z0;

        r0 := @this: com.ctc.wstx.dtd.DTDElement;

        r3 := @parameter0: com.ctc.wstx.sr.InputProblemReporter;

        r1 := @parameter1: com.ctc.wstx.dtd.DTDElement;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label1;

        specialinvoke r0.<com.ctc.wstx.dtd.DTDElement: void verifyUndefined()>();

     label1:
        $r2 = r1.<com.ctc.wstx.dtd.DTDElement: com.ctc.wstx.dtd.StructValidator mValidator>;

        r0.<com.ctc.wstx.dtd.DTDElement: com.ctc.wstx.dtd.StructValidator mValidator> = $r2;

        $i0 = r1.<com.ctc.wstx.dtd.DTDElement: int mAllowedContent>;

        r0.<com.ctc.wstx.dtd.DTDElement: int mAllowedContent> = $i0;

        virtualinvoke r0.<com.ctc.wstx.dtd.DTDElement: void mergeMissingAttributesFrom(com.ctc.wstx.sr.InputProblemReporter,com.ctc.wstx.dtd.DTDElement,boolean)>(r3, r1, z0);

        return;
    }

    private void verifyUndefined()
    {
        int $i0;
        com.ctc.wstx.dtd.DTDElement r0;

        r0 := @this: com.ctc.wstx.dtd.DTDElement;

        $i0 = r0.<com.ctc.wstx.dtd.DTDElement: int mAllowedContent>;

        if $i0 == 4 goto label1;

        staticinvoke <com.ctc.wstx.util.ExceptionUtil: void throwInternal(java.lang.String)>("redefining defined element spec");

     label1:
        return;
    }

    public com.ctc.wstx.dtd.DTDAttribute addAttribute(com.ctc.wstx.sr.InputProblemReporter, com.ctc.wstx.dtd.NameKey, int, com.ctc.wstx.dtd.DefaultAttrValue, com.ctc.wstx.util.WordResolver, boolean) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.dtd.DTDNmTokensAttr $r32;
        com.ctc.wstx.dtd.DTDCdataAttr $r23;
        com.ctc.wstx.dtd.DTDEnumAttr $r24;
        com.ctc.wstx.util.WordResolver r8;
        com.ctc.wstx.dtd.NameKey r4;
        com.ctc.wstx.dtd.DTDIdAttr $r25;
        com.ctc.wstx.dtd.DTDIdRefsAttr $r27;
        boolean $z0, $z1, $z2, z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21;
        com.ctc.wstx.dtd.DTDNotationAttr $r30;
        java.util.List r2, $r18;
        com.ctc.wstx.sr.InputProblemReporter r5;
        com.ctc.wstx.dtd.DTDAttribute r19, $r20, $r21;
        java.util.HashMap r17, $r22;
        com.ctc.wstx.dtd.DefaultAttrValue r1;
        com.ctc.wstx.dtd.DTDElement r0;
        int i0, $i1, $i3;
        com.ctc.wstx.dtd.DTDEntitiesAttr $r29;
        com.ctc.wstx.dtd.DTDIdRefAttr $r26;
        com.ctc.wstx.dtd.DTDEntityAttr $r28;
        com.ctc.wstx.dtd.DTDNmTokenAttr $r31;

        r0 := @this: com.ctc.wstx.dtd.DTDElement;

        r5 := @parameter0: com.ctc.wstx.sr.InputProblemReporter;

        r4 := @parameter1: com.ctc.wstx.dtd.NameKey;

        i0 := @parameter2: int;

        r1 := @parameter3: com.ctc.wstx.dtd.DefaultAttrValue;

        r8 := @parameter4: com.ctc.wstx.util.WordResolver;

        z3 := @parameter5: boolean;

        r17 = r0.<com.ctc.wstx.dtd.DTDElement: java.util.HashMap mAttrMap>;

        if r17 != null goto label01;

        $r22 = new java.util.HashMap;

        specialinvoke $r22.<java.util.HashMap: void <init>()>();

        r17 = $r22;

        r0.<com.ctc.wstx.dtd.DTDElement: java.util.HashMap mAttrMap> = $r22;

     label01:
        $z0 = virtualinvoke r1.<com.ctc.wstx.dtd.DefaultAttrValue: boolean isSpecial()>();

        if $z0 == 0 goto label02;

        $r18 = specialinvoke r0.<com.ctc.wstx.dtd.DTDElement: java.util.List getSpecialList()>();

        goto label03;

     label02:
        $r18 = null;

     label03:
        r2 = $r18;

        if $r18 != null goto label04;

        $i3 = (int) -1;

        $i1 = $i3;

        goto label05;

     label04:
        $i1 = interfaceinvoke $r18.<java.util.List: int size()>();

     label05:
        tableswitch(i0)
        {
            case 0: goto label06;
            case 1: goto label07;
            case 2: goto label08;
            case 3: goto label09;
            case 4: goto label10;
            case 5: goto label11;
            case 6: goto label12;
            case 7: goto label13;
            case 8: goto label14;
            case 9: goto label15;
            default: goto label16;
        };

     label06:
        $r23 = new com.ctc.wstx.dtd.DTDCdataAttr;

        $z21 = r0.<com.ctc.wstx.dtd.DTDElement: boolean mNsAware>;

        $z20 = r0.<com.ctc.wstx.dtd.DTDElement: boolean mXml11>;

        specialinvoke $r23.<com.ctc.wstx.dtd.DTDCdataAttr: void <init>(com.ctc.wstx.dtd.NameKey,com.ctc.wstx.dtd.DefaultAttrValue,int,boolean,boolean)>(r4, r1, $i1, $z21, $z20);

        r19 = $r23;

        goto label17;

     label07:
        $r24 = new com.ctc.wstx.dtd.DTDEnumAttr;

        $z19 = r0.<com.ctc.wstx.dtd.DTDElement: boolean mNsAware>;

        $z18 = r0.<com.ctc.wstx.dtd.DTDElement: boolean mXml11>;

        specialinvoke $r24.<com.ctc.wstx.dtd.DTDEnumAttr: void <init>(com.ctc.wstx.dtd.NameKey,com.ctc.wstx.dtd.DefaultAttrValue,int,boolean,boolean,com.ctc.wstx.util.WordResolver)>(r4, r1, $i1, $z19, $z18, r8);

        r19 = $r24;

        goto label17;

     label08:
        $r25 = new com.ctc.wstx.dtd.DTDIdAttr;

        $z17 = r0.<com.ctc.wstx.dtd.DTDElement: boolean mNsAware>;

        $z16 = r0.<com.ctc.wstx.dtd.DTDElement: boolean mXml11>;

        specialinvoke $r25.<com.ctc.wstx.dtd.DTDIdAttr: void <init>(com.ctc.wstx.dtd.NameKey,com.ctc.wstx.dtd.DefaultAttrValue,int,boolean,boolean)>(r4, r1, $i1, $z17, $z16);

        r19 = $r25;

        goto label17;

     label09:
        $r26 = new com.ctc.wstx.dtd.DTDIdRefAttr;

        $z15 = r0.<com.ctc.wstx.dtd.DTDElement: boolean mNsAware>;

        $z14 = r0.<com.ctc.wstx.dtd.DTDElement: boolean mXml11>;

        specialinvoke $r26.<com.ctc.wstx.dtd.DTDIdRefAttr: void <init>(com.ctc.wstx.dtd.NameKey,com.ctc.wstx.dtd.DefaultAttrValue,int,boolean,boolean)>(r4, r1, $i1, $z15, $z14);

        r19 = $r26;

        goto label17;

     label10:
        $r27 = new com.ctc.wstx.dtd.DTDIdRefsAttr;

        $z13 = r0.<com.ctc.wstx.dtd.DTDElement: boolean mNsAware>;

        $z12 = r0.<com.ctc.wstx.dtd.DTDElement: boolean mXml11>;

        specialinvoke $r27.<com.ctc.wstx.dtd.DTDIdRefsAttr: void <init>(com.ctc.wstx.dtd.NameKey,com.ctc.wstx.dtd.DefaultAttrValue,int,boolean,boolean)>(r4, r1, $i1, $z13, $z12);

        r19 = $r27;

        goto label17;

     label11:
        $r28 = new com.ctc.wstx.dtd.DTDEntityAttr;

        $z11 = r0.<com.ctc.wstx.dtd.DTDElement: boolean mNsAware>;

        $z10 = r0.<com.ctc.wstx.dtd.DTDElement: boolean mXml11>;

        specialinvoke $r28.<com.ctc.wstx.dtd.DTDEntityAttr: void <init>(com.ctc.wstx.dtd.NameKey,com.ctc.wstx.dtd.DefaultAttrValue,int,boolean,boolean)>(r4, r1, $i1, $z11, $z10);

        r19 = $r28;

        goto label17;

     label12:
        $r29 = new com.ctc.wstx.dtd.DTDEntitiesAttr;

        $z9 = r0.<com.ctc.wstx.dtd.DTDElement: boolean mNsAware>;

        $z8 = r0.<com.ctc.wstx.dtd.DTDElement: boolean mXml11>;

        specialinvoke $r29.<com.ctc.wstx.dtd.DTDEntitiesAttr: void <init>(com.ctc.wstx.dtd.NameKey,com.ctc.wstx.dtd.DefaultAttrValue,int,boolean,boolean)>(r4, r1, $i1, $z9, $z8);

        r19 = $r29;

        goto label17;

     label13:
        $r30 = new com.ctc.wstx.dtd.DTDNotationAttr;

        $z7 = r0.<com.ctc.wstx.dtd.DTDElement: boolean mNsAware>;

        $z6 = r0.<com.ctc.wstx.dtd.DTDElement: boolean mXml11>;

        specialinvoke $r30.<com.ctc.wstx.dtd.DTDNotationAttr: void <init>(com.ctc.wstx.dtd.NameKey,com.ctc.wstx.dtd.DefaultAttrValue,int,boolean,boolean,com.ctc.wstx.util.WordResolver)>(r4, r1, $i1, $z7, $z6, r8);

        r19 = $r30;

        goto label17;

     label14:
        $r31 = new com.ctc.wstx.dtd.DTDNmTokenAttr;

        $z5 = r0.<com.ctc.wstx.dtd.DTDElement: boolean mNsAware>;

        $z4 = r0.<com.ctc.wstx.dtd.DTDElement: boolean mXml11>;

        specialinvoke $r31.<com.ctc.wstx.dtd.DTDNmTokenAttr: void <init>(com.ctc.wstx.dtd.NameKey,com.ctc.wstx.dtd.DefaultAttrValue,int,boolean,boolean)>(r4, r1, $i1, $z5, $z4);

        r19 = $r31;

        goto label17;

     label15:
        $r32 = new com.ctc.wstx.dtd.DTDNmTokensAttr;

        $z2 = r0.<com.ctc.wstx.dtd.DTDElement: boolean mNsAware>;

        $z1 = r0.<com.ctc.wstx.dtd.DTDElement: boolean mXml11>;

        specialinvoke $r32.<com.ctc.wstx.dtd.DTDNmTokensAttr: void <init>(com.ctc.wstx.dtd.NameKey,com.ctc.wstx.dtd.DefaultAttrValue,int,boolean,boolean)>(r4, r1, $i1, $z2, $z1);

        r19 = $r32;

        goto label17;

     label16:
        staticinvoke <com.ctc.wstx.util.ExceptionUtil: void throwGenericInternal()>();

        r19 = null;

     label17:
        $r20 = specialinvoke r0.<com.ctc.wstx.dtd.DTDElement: com.ctc.wstx.dtd.DTDAttribute doAddAttribute(java.util.Map,com.ctc.wstx.sr.InputProblemReporter,com.ctc.wstx.dtd.DTDAttribute,java.util.List,boolean)>(r17, r5, r19, r2, z3);

        if $r20 != null goto label18;

        $r21 = r19;

        goto label19;

     label18:
        $r21 = null;

     label19:
        return $r21;
    }

    public com.ctc.wstx.dtd.DTDAttribute addNsDefault(com.ctc.wstx.sr.InputProblemReporter, com.ctc.wstx.dtd.NameKey, int, com.ctc.wstx.dtd.DefaultAttrValue, boolean) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.dtd.DTDAttribute r11;
        com.ctc.wstx.dtd.DTDCdataAttr $r13;
        java.util.HashMap $r5, $r6, $r7, $r15;
        com.ctc.wstx.dtd.DefaultAttrValue r2;
        com.ctc.wstx.dtd.NameKey r1;
        com.ctc.wstx.dtd.DTDElement r3;
        int i0, $i1, $i3, $i5;
        java.lang.String $r4, r12;
        boolean $z0, $z1, $z2, $z3, $z4, z5;
        com.ctc.wstx.sr.InputProblemReporter r10;
        com.ctc.wstx.dtd.DTDNmTokenAttr $r14;

        r3 := @this: com.ctc.wstx.dtd.DTDElement;

        r10 := @parameter0: com.ctc.wstx.sr.InputProblemReporter;

        r1 := @parameter1: com.ctc.wstx.dtd.NameKey;

        i0 := @parameter2: int;

        r2 := @parameter3: com.ctc.wstx.dtd.DefaultAttrValue;

        z5 := @parameter4: boolean;

        lookupswitch(i0)
        {
            case 0: goto label1;
            default: goto label2;
        };

     label1:
        $r13 = new com.ctc.wstx.dtd.DTDCdataAttr;

        $z1 = r3.<com.ctc.wstx.dtd.DTDElement: boolean mNsAware>;

        $z0 = r3.<com.ctc.wstx.dtd.DTDElement: boolean mXml11>;

        $i3 = (int) -1;

        specialinvoke $r13.<com.ctc.wstx.dtd.DTDCdataAttr: void <init>(com.ctc.wstx.dtd.NameKey,com.ctc.wstx.dtd.DefaultAttrValue,int,boolean,boolean)>(r1, r2, $i3, $z1, $z0);

        r11 = $r13;

        goto label3;

     label2:
        $r14 = new com.ctc.wstx.dtd.DTDNmTokenAttr;

        $z4 = r3.<com.ctc.wstx.dtd.DTDElement: boolean mNsAware>;

        $z3 = r3.<com.ctc.wstx.dtd.DTDElement: boolean mXml11>;

        $i5 = (int) -1;

        specialinvoke $r14.<com.ctc.wstx.dtd.DTDNmTokenAttr: void <init>(com.ctc.wstx.dtd.NameKey,com.ctc.wstx.dtd.DefaultAttrValue,int,boolean,boolean)>(r1, r2, $i5, $z4, $z3);

        r11 = $r14;

     label3:
        $r4 = virtualinvoke r1.<com.ctc.wstx.dtd.NameKey: java.lang.String getPrefix()>();

        if $r4 == null goto label4;

        $i1 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i1 != 0 goto label5;

     label4:
        r12 = "";

        goto label6;

     label5:
        r12 = virtualinvoke r1.<com.ctc.wstx.dtd.NameKey: java.lang.String getLocalName()>();

     label6:
        $r5 = r3.<com.ctc.wstx.dtd.DTDElement: java.util.HashMap mNsDefaults>;

        if $r5 != null goto label7;

        $r15 = new java.util.HashMap;

        specialinvoke $r15.<java.util.HashMap: void <init>()>();

        r3.<com.ctc.wstx.dtd.DTDElement: java.util.HashMap mNsDefaults> = $r15;

        goto label8;

     label7:
        $r6 = r3.<com.ctc.wstx.dtd.DTDElement: java.util.HashMap mNsDefaults>;

        $z2 = virtualinvoke $r6.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r12);

        if $z2 == 0 goto label8;

        return null;

     label8:
        $r7 = r3.<com.ctc.wstx.dtd.DTDElement: java.util.HashMap mNsDefaults>;

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r12, r11);

        return r11;
    }

    public void mergeMissingAttributesFrom(com.ctc.wstx.sr.InputProblemReporter, com.ctc.wstx.dtd.DTDElement, boolean) throws javax.xml.stream.XMLStreamException
    {
        boolean $z0, $z1, $z2, $z3, z4, $z5;
        java.util.Set $r4, $r12;
        java.util.List $r18, r23;
        com.ctc.wstx.sr.InputProblemReporter r17;
        com.ctc.wstx.dtd.DTDAttribute r22;
        java.util.HashMap $r1, $r3, $r8, $r9, $r11, $r19, r20, $r24;
        com.ctc.wstx.dtd.DTDElement r0, r2;
        int $i0, $i1;
        java.util.Map$Entry r21, r25;
        java.util.Iterator $r5, $r13;
        java.lang.Object $r6, $r7, $r10, $r14, $r15, $r16;

        r2 := @this: com.ctc.wstx.dtd.DTDElement;

        r17 := @parameter0: com.ctc.wstx.sr.InputProblemReporter;

        r0 := @parameter1: com.ctc.wstx.dtd.DTDElement;

        z4 := @parameter2: boolean;

        $r1 = virtualinvoke r0.<com.ctc.wstx.dtd.DTDElement: java.util.HashMap getAttributes()>();

        r20 = r2.<com.ctc.wstx.dtd.DTDElement: java.util.HashMap mAttrMap>;

        if r20 != null goto label01;

        $r19 = new java.util.HashMap;

        specialinvoke $r19.<java.util.HashMap: void <init>()>();

        r20 = $r19;

        r2.<com.ctc.wstx.dtd.DTDElement: java.util.HashMap mAttrMap> = $r19;

     label01:
        if $r1 == null goto label06;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        if $i0 <= 0 goto label06;

        $r12 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r13 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label06;

        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r21 = (java.util.Map$Entry) $r14;

        $r15 = interfaceinvoke r21.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z2 = virtualinvoke r20.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r15);

        if $z2 != 0 goto label05;

        $r16 = interfaceinvoke r21.<java.util.Map$Entry: java.lang.Object getValue()>();

        r22 = (com.ctc.wstx.dtd.DTDAttribute) $r16;

        $z3 = virtualinvoke r22.<com.ctc.wstx.dtd.DTDAttribute: boolean isSpecial()>();

        if $z3 == 0 goto label03;

        $r18 = specialinvoke r2.<com.ctc.wstx.dtd.DTDElement: java.util.List getSpecialList()>();

        r23 = $r18;

        $i1 = interfaceinvoke $r18.<java.util.List: int size()>();

        r22 = virtualinvoke r22.<com.ctc.wstx.dtd.DTDAttribute: com.ctc.wstx.dtd.DTDAttribute cloneWith(int)>($i1);

        goto label04;

     label03:
        r23 = null;

     label04:
        specialinvoke r2.<com.ctc.wstx.dtd.DTDElement: com.ctc.wstx.dtd.DTDAttribute doAddAttribute(java.util.Map,com.ctc.wstx.sr.InputProblemReporter,com.ctc.wstx.dtd.DTDAttribute,java.util.List,boolean)>(r20, r17, r22, r23, z4);

     label05:
        goto label02;

     label06:
        $r24 = r0.<com.ctc.wstx.dtd.DTDElement: java.util.HashMap mNsDefaults>;

        if $r24 == null goto label10;

        $r3 = r2.<com.ctc.wstx.dtd.DTDElement: java.util.HashMap mNsDefaults>;

        if $r3 != null goto label07;

        $r11 = new java.util.HashMap;

        specialinvoke $r11.<java.util.HashMap: void <init>()>();

        r2.<com.ctc.wstx.dtd.DTDElement: java.util.HashMap mNsDefaults> = $r11;

     label07:
        $r4 = virtualinvoke $r24.<java.util.HashMap: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label08:
        $z5 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label10;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r25 = (java.util.Map$Entry) $r6;

        $r7 = interfaceinvoke r25.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = r2.<com.ctc.wstx.dtd.DTDElement: java.util.HashMap mNsDefaults>;

        $z0 = virtualinvoke $r8.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r7);

        if $z0 != 0 goto label09;

        $r9 = r2.<com.ctc.wstx.dtd.DTDElement: java.util.HashMap mNsDefaults>;

        $r10 = interfaceinvoke r25.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke $r9.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r10);

     label09:
        goto label08;

     label10:
        return;
    }

    private com.ctc.wstx.dtd.DTDAttribute doAddAttribute(java.util.Map, com.ctc.wstx.sr.InputProblemReporter, com.ctc.wstx.dtd.DTDAttribute, java.util.List, boolean) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.dtd.NameKey $r1, $r13, $r17, $r26, $r30, $r34;
        java.util.Map r2;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.List r6;
        com.ctc.wstx.sr.InputProblemReporter r8;
        com.ctc.wstx.dtd.DTDAttribute r0, r4, $r7, $r16, $r21, $r29;
        com.ctc.wstx.dtd.DTDElement r5;
        java.lang.StringBuffer $r9, $r10, $r11, $r12, $r14, $r15, $r18, $r19, $r22, $r23, $r24, $r25, $r27, $r28, $r31, $r32;
        int $i0;
        java.lang.String $r20, $r33, $r35, $r36;
        java.lang.Object $r3;

        r5 := @this: com.ctc.wstx.dtd.DTDElement;

        r2 := @parameter0: java.util.Map;

        r8 := @parameter1: com.ctc.wstx.sr.InputProblemReporter;

        r0 := @parameter2: com.ctc.wstx.dtd.DTDAttribute;

        r6 := @parameter3: java.util.List;

        z0 := @parameter4: boolean;

        $r1 = virtualinvoke r0.<com.ctc.wstx.dtd.DTDAttribute: com.ctc.wstx.dtd.NameKey getName()>();

        $r3 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r4 = (com.ctc.wstx.dtd.DTDAttribute) $r3;

        if r4 == null goto label01;

        $r36 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String WT_ATTR_DECL>;

        $r35 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String W_DTD_DUP_ATTR>;

        $r34 = r5.<com.ctc.wstx.dtd.DTDElement: com.ctc.wstx.dtd.NameKey mName>;

        interfaceinvoke r8.<com.ctc.wstx.sr.InputProblemReporter: void reportProblem(java.lang.String,java.lang.String,java.lang.Object,java.lang.Object)>($r36, $r35, $r1, $r34);

        return r4;

     label01:
        $i0 = virtualinvoke r0.<com.ctc.wstx.dtd.DTDAttribute: int getValueType()>();

        lookupswitch($i0)
        {
            case 2: goto label02;
            case 7: goto label04;
            default: goto label06;
        };

     label02:
        if z0 == 0 goto label03;

        $r21 = r5.<com.ctc.wstx.dtd.DTDElement: com.ctc.wstx.dtd.DTDAttribute mIdAttr>;

        if $r21 == null goto label03;

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid id attribute \'");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r1);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' for element <");

        $r26 = r5.<com.ctc.wstx.dtd.DTDElement: com.ctc.wstx.dtd.NameKey mName>;

        $r27 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(">: already had id attribute \'");

        $r29 = r5.<com.ctc.wstx.dtd.DTDElement: com.ctc.wstx.dtd.DTDAttribute mIdAttr>;

        $r30 = virtualinvoke $r29.<com.ctc.wstx.dtd.DTDAttribute: com.ctc.wstx.dtd.NameKey getName()>();

        $r31 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke r8.<com.ctc.wstx.sr.InputProblemReporter: void throwParseError(java.lang.String)>($r33);

     label03:
        r5.<com.ctc.wstx.dtd.DTDElement: com.ctc.wstx.dtd.DTDAttribute mIdAttr> = r0;

        goto label06;

     label04:
        if z0 == 0 goto label05;

        $r7 = r5.<com.ctc.wstx.dtd.DTDElement: com.ctc.wstx.dtd.DTDAttribute mNotationAttr>;

        if $r7 == null goto label05;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid notation attribute \'");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' for element <");

        $r13 = r5.<com.ctc.wstx.dtd.DTDElement: com.ctc.wstx.dtd.NameKey mName>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(">: already had notation attribute \'");

        $r16 = r5.<com.ctc.wstx.dtd.DTDElement: com.ctc.wstx.dtd.DTDAttribute mNotationAttr>;

        $r17 = virtualinvoke $r16.<com.ctc.wstx.dtd.DTDAttribute: com.ctc.wstx.dtd.NameKey getName()>();

        $r18 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke r8.<com.ctc.wstx.sr.InputProblemReporter: void throwParseError(java.lang.String)>($r20);

     label05:
        r5.<com.ctc.wstx.dtd.DTDElement: com.ctc.wstx.dtd.DTDAttribute mNotationAttr> = r0;

     label06:
        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, r0);

        if r6 == null goto label07;

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>(r0);

     label07:
        $z1 = r5.<com.ctc.wstx.dtd.DTDElement: boolean mAnyFixed>;

        if $z1 != 0 goto label08;

        $z6 = virtualinvoke r0.<com.ctc.wstx.dtd.DTDAttribute: boolean isFixed()>();

        r5.<com.ctc.wstx.dtd.DTDElement: boolean mAnyFixed> = $z6;

     label08:
        $z2 = r5.<com.ctc.wstx.dtd.DTDElement: boolean mValidateAttrs>;

        if $z2 != 0 goto label09;

        $z5 = virtualinvoke r0.<com.ctc.wstx.dtd.DTDAttribute: boolean needsValidation()>();

        r5.<com.ctc.wstx.dtd.DTDElement: boolean mValidateAttrs> = $z5;

     label09:
        $z3 = r5.<com.ctc.wstx.dtd.DTDElement: boolean mAnyDefaults>;

        if $z3 != 0 goto label10;

        $z4 = virtualinvoke r0.<com.ctc.wstx.dtd.DTDAttribute: boolean hasDefaultValue()>();

        r5.<com.ctc.wstx.dtd.DTDElement: boolean mAnyDefaults> = $z4;

     label10:
        return null;
    }

    public com.ctc.wstx.dtd.NameKey getName()
    {
        com.ctc.wstx.dtd.NameKey $r1;
        com.ctc.wstx.dtd.DTDElement r0;

        r0 := @this: com.ctc.wstx.dtd.DTDElement;

        $r1 = r0.<com.ctc.wstx.dtd.DTDElement: com.ctc.wstx.dtd.NameKey mName>;

        return $r1;
    }

    public java.lang.String toString()
    {
        java.lang.String $r2;
        com.ctc.wstx.dtd.NameKey $r1;
        com.ctc.wstx.dtd.DTDElement r0;

        r0 := @this: com.ctc.wstx.dtd.DTDElement;

        $r1 = r0.<com.ctc.wstx.dtd.DTDElement: com.ctc.wstx.dtd.NameKey mName>;

        $r2 = virtualinvoke $r1.<com.ctc.wstx.dtd.NameKey: java.lang.String toString()>();

        return $r2;
    }

    public java.lang.String getDisplayName()
    {
        java.lang.String $r2;
        com.ctc.wstx.dtd.NameKey $r1;
        com.ctc.wstx.dtd.DTDElement r0;

        r0 := @this: com.ctc.wstx.dtd.DTDElement;

        $r1 = r0.<com.ctc.wstx.dtd.DTDElement: com.ctc.wstx.dtd.NameKey mName>;

        $r2 = virtualinvoke $r1.<com.ctc.wstx.dtd.NameKey: java.lang.String toString()>();

        return $r2;
    }

    public javax.xml.stream.Location getLocation()
    {
        com.ctc.wstx.dtd.DTDElement r0;
        javax.xml.stream.Location $r1;

        r0 := @this: com.ctc.wstx.dtd.DTDElement;

        $r1 = r0.<com.ctc.wstx.dtd.DTDElement: javax.xml.stream.Location mLocation>;

        return $r1;
    }

    public boolean isDefined()
    {
        int $i0;
        com.ctc.wstx.dtd.DTDElement r0;
        boolean $z0;

        r0 := @this: com.ctc.wstx.dtd.DTDElement;

        $i0 = r0.<com.ctc.wstx.dtd.DTDElement: int mAllowedContent>;

        if $i0 == 4 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int getAllowedContent()
    {
        int $i0;
        com.ctc.wstx.dtd.DTDElement r0;

        r0 := @this: com.ctc.wstx.dtd.DTDElement;

        $i0 = r0.<com.ctc.wstx.dtd.DTDElement: int mAllowedContent>;

        return $i0;
    }

    public int getAllowedContentIfSpace()
    {
        int i0;
        byte $b1;
        com.ctc.wstx.dtd.DTDElement r0;

        r0 := @this: com.ctc.wstx.dtd.DTDElement;

        i0 = r0.<com.ctc.wstx.dtd.DTDElement: int mAllowedContent>;

        if i0 > 1 goto label1;

        $b1 = 1;

        goto label2;

     label1:
        $b1 = 3;

     label2:
        return $b1;
    }

    public java.util.HashMap getAttributes()
    {
        java.util.HashMap $r1;
        com.ctc.wstx.dtd.DTDElement r0;

        r0 := @this: com.ctc.wstx.dtd.DTDElement;

        $r1 = r0.<com.ctc.wstx.dtd.DTDElement: java.util.HashMap mAttrMap>;

        return $r1;
    }

    public int getSpecialCount()
    {
        com.ctc.wstx.dtd.DTDElement r0;
        int $i0;
        java.util.ArrayList $r1, $r2;

        r0 := @this: com.ctc.wstx.dtd.DTDElement;

        $r1 = r0.<com.ctc.wstx.dtd.DTDElement: java.util.ArrayList mSpecAttrList>;

        if $r1 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $r2 = r0.<com.ctc.wstx.dtd.DTDElement: java.util.ArrayList mSpecAttrList>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

     label2:
        return $i0;
    }

    public java.util.List getSpecialAttrs()
    {
        com.ctc.wstx.dtd.DTDElement r0;
        java.util.ArrayList $r1;

        r0 := @this: com.ctc.wstx.dtd.DTDElement;

        $r1 = r0.<com.ctc.wstx.dtd.DTDElement: java.util.ArrayList mSpecAttrList>;

        return $r1;
    }

    public boolean attrsNeedValidation()
    {
        com.ctc.wstx.dtd.DTDElement r0;
        boolean $z0;

        r0 := @this: com.ctc.wstx.dtd.DTDElement;

        $z0 = r0.<com.ctc.wstx.dtd.DTDElement: boolean mValidateAttrs>;

        return $z0;
    }

    public boolean hasFixedAttrs()
    {
        com.ctc.wstx.dtd.DTDElement r0;
        boolean $z0;

        r0 := @this: com.ctc.wstx.dtd.DTDElement;

        $z0 = r0.<com.ctc.wstx.dtd.DTDElement: boolean mAnyFixed>;

        return $z0;
    }

    public boolean hasAttrDefaultValues()
    {
        com.ctc.wstx.dtd.DTDElement r0;
        boolean $z0;

        r0 := @this: com.ctc.wstx.dtd.DTDElement;

        $z0 = r0.<com.ctc.wstx.dtd.DTDElement: boolean mAnyDefaults>;

        return $z0;
    }

    public com.ctc.wstx.dtd.DTDAttribute getIdAttribute()
    {
        com.ctc.wstx.dtd.DTDAttribute $r1;
        com.ctc.wstx.dtd.DTDElement r0;

        r0 := @this: com.ctc.wstx.dtd.DTDElement;

        $r1 = r0.<com.ctc.wstx.dtd.DTDElement: com.ctc.wstx.dtd.DTDAttribute mIdAttr>;

        return $r1;
    }

    public com.ctc.wstx.dtd.DTDAttribute getNotationAttribute()
    {
        com.ctc.wstx.dtd.DTDAttribute $r1;
        com.ctc.wstx.dtd.DTDElement r0;

        r0 := @this: com.ctc.wstx.dtd.DTDElement;

        $r1 = r0.<com.ctc.wstx.dtd.DTDElement: com.ctc.wstx.dtd.DTDAttribute mNotationAttr>;

        return $r1;
    }

    public boolean hasNsDefaults()
    {
        java.util.HashMap $r1;
        com.ctc.wstx.dtd.DTDElement r0;
        boolean $z0;

        r0 := @this: com.ctc.wstx.dtd.DTDElement;

        $r1 = r0.<com.ctc.wstx.dtd.DTDElement: java.util.HashMap mNsDefaults>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public com.ctc.wstx.dtd.StructValidator getValidator()
    {
        com.ctc.wstx.dtd.StructValidator $r1, $r2, $r3;
        com.ctc.wstx.dtd.DTDElement r0;

        r0 := @this: com.ctc.wstx.dtd.DTDElement;

        $r1 = r0.<com.ctc.wstx.dtd.DTDElement: com.ctc.wstx.dtd.StructValidator mValidator>;

        if $r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r2 = r0.<com.ctc.wstx.dtd.DTDElement: com.ctc.wstx.dtd.StructValidator mValidator>;

        $r3 = virtualinvoke $r2.<com.ctc.wstx.dtd.StructValidator: com.ctc.wstx.dtd.StructValidator newInstance()>();

     label2:
        return $r3;
    }

    protected java.util.HashMap getNsDefaults()
    {
        java.util.HashMap $r1;
        com.ctc.wstx.dtd.DTDElement r0;

        r0 := @this: com.ctc.wstx.dtd.DTDElement;

        $r1 = r0.<com.ctc.wstx.dtd.DTDElement: java.util.HashMap mNsDefaults>;

        return $r1;
    }

    private java.util.List getSpecialList()
    {
        com.ctc.wstx.dtd.DTDElement r0;
        java.util.ArrayList $r1, r2;

        r0 := @this: com.ctc.wstx.dtd.DTDElement;

        r2 = r0.<com.ctc.wstx.dtd.DTDElement: java.util.ArrayList mSpecAttrList>;

        if r2 != null goto label1;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r2 = $r1;

        r0.<com.ctc.wstx.dtd.DTDElement: java.util.ArrayList mSpecAttrList> = $r1;

     label1:
        return r2;
    }
}
