class org.apache.commons.collections.functors.PrototypeFactory$PrototypeCloneFactory extends java.lang.Object implements org.apache.commons.collections.Factory, java.io.Serializable
{
    private static final long serialVersionUID;
    private final java.lang.Object iPrototype;
    private transient java.lang.reflect.Method iCloneMethod;

    private void <init>(java.lang.Object, java.lang.reflect.Method)
    {
        java.lang.Object r1;
        org.apache.commons.collections.functors.PrototypeFactory$PrototypeCloneFactory r0;
        java.lang.reflect.Method r2;

        r0 := @this: org.apache.commons.collections.functors.PrototypeFactory$PrototypeCloneFactory;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.reflect.Method;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.collections.functors.PrototypeFactory$PrototypeCloneFactory: java.lang.Object iPrototype> = r1;

        r0.<org.apache.commons.collections.functors.PrototypeFactory$PrototypeCloneFactory: java.lang.reflect.Method iCloneMethod> = r2;

        return;
    }

    private void findCloneMethod()
    {
        java.lang.NoSuchMethodException $r5;
        java.lang.Class[] $r3;
        java.lang.Object $r1;
        java.lang.Class $r2;
        java.lang.IllegalArgumentException $r6;
        org.apache.commons.collections.functors.PrototypeFactory$PrototypeCloneFactory r0;
        java.lang.reflect.Method $r4;

        r0 := @this: org.apache.commons.collections.functors.PrototypeFactory$PrototypeCloneFactory;

     label1:
        $r1 = r0.<org.apache.commons.collections.functors.PrototypeFactory$PrototypeCloneFactory: java.lang.Object iPrototype>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = (java.lang.Class[]) null;

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("clone", $r3);

        r0.<org.apache.commons.collections.functors.PrototypeFactory$PrototypeCloneFactory: java.lang.reflect.Method iCloneMethod> = $r4;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("PrototypeCloneFactory: The clone method must exist and be public ");

        throw $r6;

     label4:
        return;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }

    public java.lang.Object create()
    {
        java.lang.IllegalAccessException $r8;
        java.lang.Object[] $r2;
        java.lang.reflect.InvocationTargetException $r6;
        org.apache.commons.collections.FunctorException $r7, $r9;
        java.lang.Object $r3, $r5;
        org.apache.commons.collections.functors.PrototypeFactory$PrototypeCloneFactory r0;
        java.lang.reflect.Method $r1, $r4;

        r0 := @this: org.apache.commons.collections.functors.PrototypeFactory$PrototypeCloneFactory;

        $r1 = r0.<org.apache.commons.collections.functors.PrototypeFactory$PrototypeCloneFactory: java.lang.reflect.Method iCloneMethod>;

        if $r1 != null goto label1;

        specialinvoke r0.<org.apache.commons.collections.functors.PrototypeFactory$PrototypeCloneFactory: void findCloneMethod()>();

     label1:
        $r4 = r0.<org.apache.commons.collections.functors.PrototypeFactory$PrototypeCloneFactory: java.lang.reflect.Method iCloneMethod>;

        $r3 = r0.<org.apache.commons.collections.functors.PrototypeFactory$PrototypeCloneFactory: java.lang.Object iPrototype>;

        $r2 = (java.lang.Object[]) null;

        $r5 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r3, $r2);

     label2:
        return $r5;

     label3:
        $r8 := @caughtexception;

        $r9 = new org.apache.commons.collections.FunctorException;

        specialinvoke $r9.<org.apache.commons.collections.FunctorException: void <init>(java.lang.String,java.lang.Throwable)>("PrototypeCloneFactory: Clone method must be public", $r8);

        throw $r9;

     label4:
        $r6 := @caughtexception;

        $r7 = new org.apache.commons.collections.FunctorException;

        specialinvoke $r7.<org.apache.commons.collections.FunctorException: void <init>(java.lang.String,java.lang.Throwable)>("PrototypeCloneFactory: Clone method threw an exception", $r6);

        throw $r7;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label4;
    }

    void <init>(java.lang.Object, java.lang.reflect.Method, org.apache.commons.collections.functors.PrototypeFactory$1)
    {
        org.apache.commons.collections.functors.PrototypeFactory$1 r3;
        java.lang.Object r1;
        org.apache.commons.collections.functors.PrototypeFactory$PrototypeCloneFactory r0;
        java.lang.reflect.Method r2;

        r0 := @this: org.apache.commons.collections.functors.PrototypeFactory$PrototypeCloneFactory;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.reflect.Method;

        r3 := @parameter2: org.apache.commons.collections.functors.PrototypeFactory$1;

        specialinvoke r0.<org.apache.commons.collections.functors.PrototypeFactory$PrototypeCloneFactory: void <init>(java.lang.Object,java.lang.reflect.Method)>(r1, r2);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.commons.collections.functors.PrototypeFactory$PrototypeCloneFactory: long serialVersionUID> = 5604271422565175555L;

        return;
    }
}
