public class ucar.ma2.Section extends java.lang.Object
{
    private java.util.List list;
    private boolean immutable;

    public void <init>(int[])
    {
        ucar.ma2.Range $r3, $r5, $r7;
        ucar.ma2.Section r0;
        java.util.ArrayList $r1;
        java.util.List $r4, $r6, $r8;
        int[] r2;
        int $i0, $i1, $i2, $i3, i4;

        r0 := @this: ucar.ma2.Section;

        r2 := @parameter0: int[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ucar.ma2.Section: boolean immutable> = 0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<ucar.ma2.Section: java.util.List list> = $r1;

        i4 = 0;

     label1:
        $i0 = lengthof r2;

        if i4 >= $i0 goto label5;

        $i1 = r2[i4];

        if $i1 <= 0 goto label2;

        $r8 = r0.<ucar.ma2.Section: java.util.List list>;

        $r7 = new ucar.ma2.Range;

        $i3 = r2[i4];

        specialinvoke $r7.<ucar.ma2.Range: void <init>(int)>($i3);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label4;

     label2:
        $i2 = r2[i4];

        if $i2 != 0 goto label3;

        $r6 = r0.<ucar.ma2.Section: java.util.List list>;

        $r5 = <ucar.ma2.Range: ucar.ma2.Range EMPTY>;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label4;

     label3:
        $r4 = r0.<ucar.ma2.Section: java.util.List list>;

        $r3 = <ucar.ma2.Range: ucar.ma2.Range VLEN>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r3);

     label4:
        i4 = i4 + 1;

        goto label1;

     label5:
        return;
    }

    public void <init>(int[], int[]) throws ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Range $r5;
        ucar.ma2.Section r0;
        java.util.ArrayList $r1;
        java.util.List $r3;
        int[] r2, r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;

        r0 := @this: ucar.ma2.Section;

        r4 := @parameter0: int[];

        r2 := @parameter1: int[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ucar.ma2.Section: boolean immutable> = 0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<ucar.ma2.Section: java.util.List list> = $r1;

        i7 = 0;

     label1:
        $i0 = lengthof r2;

        if i7 >= $i0 goto label4;

        $r3 = r0.<ucar.ma2.Section: java.util.List list>;

        $i1 = r2[i7];

        if $i1 <= 0 goto label2;

        $r5 = new ucar.ma2.Range;

        $i6 = r4[i7];

        $i3 = r4[i7];

        $i2 = r2[i7];

        $i4 = $i3 + $i2;

        $i5 = $i4 - 1;

        specialinvoke $r5.<ucar.ma2.Range: void <init>(int,int)>($i6, $i5);

        goto label3;

     label2:
        $r5 = <ucar.ma2.Range: ucar.ma2.Range EMPTY>;

     label3:
        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r5);

        i7 = i7 + 1;

        goto label1;

     label4:
        return;
    }

    public void <init>(int[], int[], int[]) throws ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Section r0;
        java.util.ArrayList $r1;
        int[] r2, r4, r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        ucar.ma2.Range $r6;
        java.util.List $r3;

        r0 := @this: ucar.ma2.Section;

        r4 := @parameter0: int[];

        r2 := @parameter1: int[];

        r5 := @parameter2: int[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ucar.ma2.Section: boolean immutable> = 0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<ucar.ma2.Section: java.util.List list> = $r1;

        i8 = 0;

     label1:
        $i0 = lengthof r2;

        if i8 >= $i0 goto label4;

        $r3 = r0.<ucar.ma2.Section: java.util.List list>;

        $i1 = r2[i8];

        if $i1 <= 0 goto label2;

        $r6 = new ucar.ma2.Range;

        $i7 = r4[i8];

        $i3 = r4[i8];

        $i2 = r2[i8];

        $i4 = $i3 + $i2;

        $i6 = $i4 - 1;

        $i5 = r5[i8];

        specialinvoke $r6.<ucar.ma2.Range: void <init>(int,int,int)>($i7, $i6, $i5);

        goto label3;

     label2:
        $r6 = <ucar.ma2.Range: ucar.ma2.Range EMPTY>;

     label3:
        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r6);

        i8 = i8 + 1;

        goto label1;

     label4:
        return;
    }

    public void <init>(java.util.List)
    {
        java.util.List r2;
        ucar.ma2.Section r0;
        java.util.ArrayList $r1;

        r0 := @this: ucar.ma2.Section;

        r2 := @parameter0: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ucar.ma2.Section: boolean immutable> = 0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r2);

        r0.<ucar.ma2.Section: java.util.List list> = $r1;

        return;
    }

    public void <init>(ucar.ma2.Section)
    {
        java.util.List $r3;
        ucar.ma2.Section r0, r2;
        java.util.ArrayList $r1;

        r0 := @this: ucar.ma2.Section;

        r2 := @parameter0: ucar.ma2.Section;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ucar.ma2.Section: boolean immutable> = 0;

        $r1 = new java.util.ArrayList;

        $r3 = virtualinvoke r2.<ucar.ma2.Section: java.util.List getRanges()>();

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        r0.<ucar.ma2.Section: java.util.List list> = $r1;

        return;
    }

    public void <init>(java.util.List, int[]) throws ucar.ma2.InvalidRangeException
    {
        java.util.List r2;
        ucar.ma2.Section r0;
        int[] r3;
        java.util.ArrayList $r1;

        r0 := @this: ucar.ma2.Section;

        r2 := @parameter0: java.util.List;

        r3 := @parameter1: int[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ucar.ma2.Section: boolean immutable> = 0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r2);

        r0.<ucar.ma2.Section: java.util.List list> = $r1;

        virtualinvoke r0.<ucar.ma2.Section: void setDefaults(int[])>(r3);

        return;
    }

    public static ucar.ma2.Section fill(ucar.ma2.Section, int[]) throws ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Range $r5;
        ucar.ma2.Section r0, $r3, $r7;
        java.util.List $r4;
        ucar.ma2.InvalidRangeException $r6;
        int[] r1;
        int $i0, i1;
        java.lang.String $r2;
        boolean $z0, z1, $z2;

        r0 := @parameter0: ucar.ma2.Section;

        r1 := @parameter1: int[];

        if r0 != null goto label1;

        $r7 = new ucar.ma2.Section;

        specialinvoke $r7.<ucar.ma2.Section: void <init>(int[])>(r1);

        return $r7;

     label1:
        $r2 = virtualinvoke r0.<ucar.ma2.Section: java.lang.String checkInRange(int[])>(r1);

        if $r2 == null goto label2;

        $r6 = new ucar.ma2.InvalidRangeException;

        specialinvoke $r6.<ucar.ma2.InvalidRangeException: void <init>(java.lang.String)>($r2);

        throw $r6;

     label2:
        z1 = 1;

        i1 = 0;

     label3:
        $i0 = lengthof r1;

        if i1 >= $i0 goto label6;

        $z0 = z1;

        $r5 = virtualinvoke r0.<ucar.ma2.Section: ucar.ma2.Range getRange(int)>(i1);

        if $r5 == null goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        z1 = $z0 & $z2;

        i1 = i1 + 1;

        goto label3;

     label6:
        if z1 == 0 goto label7;

        return r0;

     label7:
        $r3 = new ucar.ma2.Section;

        $r4 = virtualinvoke r0.<ucar.ma2.Section: java.util.List getRanges()>();

        specialinvoke $r3.<ucar.ma2.Section: void <init>(java.util.List,int[])>($r4, r1);

        return $r3;
    }

    public void <init>(java.lang.String) throws ucar.ma2.InvalidRangeException
    {
        boolean $z0, $z1, $z2;
        ucar.ma2.Range $r9, $r10, r29;
        java.util.List $r31;
        java.lang.StringBuilder $r13, $r14, $r15, $r16, $r17, $r18, $r22, $r23, $r24, $r25, $r26, $r27;
        ucar.ma2.Section r0;
        java.util.ArrayList $r1;
        java.util.StringTokenizer $r2, $r6;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String r3, $r4, $r5, $r7, $r8, $r19, $r28, $r30;
        java.lang.NumberFormatException $r11, $r20;
        java.lang.IllegalArgumentException $r12, $r21;

        r0 := @this: ucar.ma2.Section;

        r3 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ucar.ma2.Section: boolean immutable> = 0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<ucar.ma2.Section: java.util.List list> = $r1;

        $r2 = new java.util.StringTokenizer;

        specialinvoke $r2.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r3, "(),");

     label01:
        $z0 = virtualinvoke $r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label14;

        $r4 = virtualinvoke $r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(":");

        if $z1 == 0 goto label02;

        r29 = null;

        goto label13;

     label02:
        $i0 = virtualinvoke $r5.<java.lang.String: int indexOf(int)>(58);

        if $i0 >= 0 goto label06;

     label03:
        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r5);

        $r10 = new ucar.ma2.Range;

        specialinvoke $r10.<ucar.ma2.Range: void <init>(int,int)>($i3, $i3);

        r29 = $r10;

     label04:
        goto label13;

     label05:
        $r20 := @caughtexception;

        $r21 = new java.lang.IllegalArgumentException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" illegal selector: ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" part of <");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r28);

        throw $r21;

     label06:
        $r6 = new java.util.StringTokenizer;

        specialinvoke $r6.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r5, ":");

        $r7 = virtualinvoke $r6.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r8 = virtualinvoke $r6.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $z2 = virtualinvoke $r6.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z2 == 0 goto label07;

        $r30 = virtualinvoke $r6.<java.util.StringTokenizer: java.lang.String nextToken()>();

        goto label08;

     label07:
        $r30 = null;

     label08:
        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r7);

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r8);

        if $r30 == null goto label09;

        $i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r30);

        goto label10;

     label09:
        $i4 = 1;

     label10:
        $r9 = new ucar.ma2.Range;

        specialinvoke $r9.<ucar.ma2.Range: void <init>(int,int,int)>($i1, $i2, $i4);

        r29 = $r9;

     label11:
        goto label13;

     label12:
        $r11 := @caughtexception;

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" illegal selector: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" part of <");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        throw $r12;

     label13:
        $r31 = r0.<ucar.ma2.Section: java.util.List list>;

        interfaceinvoke $r31.<java.util.List: boolean add(java.lang.Object)>(r29);

        goto label01;

     label14:
        return;

        catch java.lang.NumberFormatException from label03 to label04 with label05;
        catch java.lang.NumberFormatException from label08 to label11 with label12;
    }

    public ucar.ma2.Section compact() throws ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Range r6, $r7;
        ucar.ma2.Section r1, $r4;
        java.util.Iterator $r3;
        java.util.ArrayList $r0;
        java.util.List $r2;
        int $i0;
        java.lang.Object $r5;
        boolean $z0;

        r1 := @this: ucar.ma2.Section;

        $r0 = new java.util.ArrayList;

        $i0 = virtualinvoke r1.<ucar.ma2.Section: int getRank()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0);

        $r2 = r1.<ucar.ma2.Section: java.util.List list>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (ucar.ma2.Range) $r5;

        $r7 = virtualinvoke r6.<ucar.ma2.Range: ucar.ma2.Range compact()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label1;

     label2:
        $r4 = new ucar.ma2.Section;

        specialinvoke $r4.<ucar.ma2.Section: void <init>(java.util.List)>($r0);

        return $r4;
    }

    public ucar.ma2.Section removeVlen() throws ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Section r0, $r6;
        java.util.ArrayList $r3;
        int $i0;
        boolean $z0, $z1, z2;
        ucar.ma2.Range r8, $r9, $r11, r12;
        java.util.Iterator $r2, $r5;
        java.util.List $r1, $r4;
        java.lang.Object $r7, $r10;

        r0 := @this: ucar.ma2.Section;

        z2 = 0;

        $r1 = r0.<ucar.ma2.Section: java.util.List list>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r10 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r12 = (ucar.ma2.Range) $r10;

        $r11 = <ucar.ma2.Range: ucar.ma2.Range VLEN>;

        if r12 != $r11 goto label2;

        z2 = 1;

     label2:
        goto label1;

     label3:
        if z2 != 0 goto label4;

        return r0;

     label4:
        $r3 = new java.util.ArrayList;

        $i0 = virtualinvoke r0.<ucar.ma2.Section: int getRank()>();

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>($i0);

        $r4 = r0.<ucar.ma2.Section: java.util.List list>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r7 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r8 = (ucar.ma2.Range) $r7;

        $r9 = <ucar.ma2.Range: ucar.ma2.Range VLEN>;

        if r8 == $r9 goto label6;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r8);

     label6:
        goto label5;

     label7:
        $r6 = new ucar.ma2.Section;

        specialinvoke $r6.<ucar.ma2.Section: void <init>(java.util.List)>($r3);

        return $r6;
    }

    public ucar.ma2.Section compose(ucar.ma2.Section) throws ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Section r0, r1, $r4;
        java.util.ArrayList $r2;
        int $i0, $i1, $i2, $i3, i4;
        ucar.ma2.Range r7, $r8, $r9;
        java.util.List $r3, $r5;
        ucar.ma2.InvalidRangeException $r10;
        java.lang.Object $r6;

        r1 := @this: ucar.ma2.Section;

        r0 := @parameter0: ucar.ma2.Section;

        if r0 != null goto label1;

        return r1;

     label1:
        $i0 = virtualinvoke r0.<ucar.ma2.Section: int getRank()>();

        $i1 = virtualinvoke r1.<ucar.ma2.Section: int getRank()>();

        if $i0 == $i1 goto label2;

        $r10 = new ucar.ma2.InvalidRangeException;

        specialinvoke $r10.<ucar.ma2.InvalidRangeException: void <init>(java.lang.String)>("Invalid Section rank");

        throw $r10;

     label2:
        $r2 = new java.util.ArrayList;

        $i2 = virtualinvoke r1.<ucar.ma2.Section: int getRank()>();

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i2);

        i4 = 0;

     label3:
        $r3 = r1.<ucar.ma2.Section: java.util.List list>;

        $i3 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i4 >= $i3 goto label6;

        $r5 = r1.<ucar.ma2.Section: java.util.List list>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i4);

        r7 = (ucar.ma2.Range) $r6;

        $r8 = virtualinvoke r0.<ucar.ma2.Section: ucar.ma2.Range getRange(int)>(i4);

        if $r8 != null goto label4;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r7);

        goto label5;

     label4:
        $r9 = virtualinvoke r7.<ucar.ma2.Range: ucar.ma2.Range compose(ucar.ma2.Range)>($r8);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r9);

     label5:
        i4 = i4 + 1;

        goto label3;

     label6:
        $r4 = new ucar.ma2.Section;

        specialinvoke $r4.<ucar.ma2.Section: void <init>(java.util.List)>($r2);

        return $r4;
    }

    public ucar.ma2.Section intersect(ucar.ma2.Section) throws ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Section r0, r1, $r4;
        java.util.ArrayList $r2;
        int $i0, $i1, $i2, $i3, i4;
        ucar.ma2.Range r7, $r8, $r9;
        java.util.List $r3, $r5;
        ucar.ma2.InvalidRangeException $r10;
        java.lang.Object $r6;

        r1 := @this: ucar.ma2.Section;

        r0 := @parameter0: ucar.ma2.Section;

        $i0 = virtualinvoke r0.<ucar.ma2.Section: int getRank()>();

        $i1 = virtualinvoke r1.<ucar.ma2.Section: int getRank()>();

        if $i0 == $i1 goto label1;

        $r10 = new ucar.ma2.InvalidRangeException;

        specialinvoke $r10.<ucar.ma2.InvalidRangeException: void <init>(java.lang.String)>("Invalid Section rank");

        throw $r10;

     label1:
        $r2 = new java.util.ArrayList;

        $i2 = virtualinvoke r1.<ucar.ma2.Section: int getRank()>();

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i2);

        i4 = 0;

     label2:
        $r3 = r1.<ucar.ma2.Section: java.util.List list>;

        $i3 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i4 >= $i3 goto label3;

        $r5 = r1.<ucar.ma2.Section: java.util.List list>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i4);

        r7 = (ucar.ma2.Range) $r6;

        $r8 = virtualinvoke r0.<ucar.ma2.Section: ucar.ma2.Range getRange(int)>(i4);

        $r9 = virtualinvoke r7.<ucar.ma2.Range: ucar.ma2.Range intersect(ucar.ma2.Range)>($r8);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r9);

        i4 = i4 + 1;

        goto label2;

     label3:
        $r4 = new ucar.ma2.Section;

        specialinvoke $r4.<ucar.ma2.Section: void <init>(java.util.List)>($r2);

        return $r4;
    }

    public int offset(ucar.ma2.Section) throws ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Section r0, r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9, $i11;
        ucar.ma2.Range r5, $r6;
        java.util.List $r2, $r3;
        ucar.ma2.InvalidRangeException $r8;
        java.lang.Object $r4;

        r1 := @this: ucar.ma2.Section;

        r0 := @parameter0: ucar.ma2.Section;

        $i0 = virtualinvoke r0.<ucar.ma2.Section: int getRank()>();

        $i1 = virtualinvoke r1.<ucar.ma2.Section: int getRank()>();

        if $i0 == $i1 goto label1;

        $r8 = new ucar.ma2.InvalidRangeException;

        specialinvoke $r8.<ucar.ma2.InvalidRangeException: void <init>(java.lang.String)>("Invalid Section rank");

        throw $r8;

     label1:
        i7 = 0;

        i8 = 1;

        $r2 = r1.<ucar.ma2.Section: java.util.List list>;

        $i2 = interfaceinvoke $r2.<java.util.List: int size()>();

        i9 = $i2 - 1;

     label2:
        if i9 < 0 goto label3;

        $r3 = r1.<ucar.ma2.Section: java.util.List list>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i9);

        r5 = (ucar.ma2.Range) $r4;

        $r6 = virtualinvoke r0.<ucar.ma2.Section: ucar.ma2.Range getRange(int)>(i9);

        $i3 = virtualinvoke $r6.<ucar.ma2.Range: int first()>();

        $i4 = virtualinvoke r5.<ucar.ma2.Range: int index(int)>($i3);

        $i5 = $i4 * i8;

        i7 = i7 + $i5;

        $i6 = virtualinvoke r5.<ucar.ma2.Range: int length()>();

        i8 = i8 * $i6;

        $i11 = (int) -1;

        i9 = i9 + $i11;

        goto label2;

     label3:
        return i7;
    }

    public ucar.ma2.Section union(ucar.ma2.Section) throws ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Section r0, r1, $r4;
        java.util.ArrayList $r2;
        int $i0, $i1, $i2, $i3, i4;
        ucar.ma2.Range r7, $r8, $r9;
        java.util.List $r3, $r5;
        ucar.ma2.InvalidRangeException $r10;
        java.lang.Object $r6;

        r1 := @this: ucar.ma2.Section;

        r0 := @parameter0: ucar.ma2.Section;

        $i0 = virtualinvoke r0.<ucar.ma2.Section: int getRank()>();

        $i1 = virtualinvoke r1.<ucar.ma2.Section: int getRank()>();

        if $i0 == $i1 goto label1;

        $r10 = new ucar.ma2.InvalidRangeException;

        specialinvoke $r10.<ucar.ma2.InvalidRangeException: void <init>(java.lang.String)>("Invalid Section rank");

        throw $r10;

     label1:
        $r2 = new java.util.ArrayList;

        $i2 = virtualinvoke r1.<ucar.ma2.Section: int getRank()>();

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i2);

        i4 = 0;

     label2:
        $r3 = r1.<ucar.ma2.Section: java.util.List list>;

        $i3 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i4 >= $i3 goto label3;

        $r5 = r1.<ucar.ma2.Section: java.util.List list>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i4);

        r7 = (ucar.ma2.Range) $r6;

        $r8 = virtualinvoke r0.<ucar.ma2.Section: ucar.ma2.Range getRange(int)>(i4);

        $r9 = virtualinvoke r7.<ucar.ma2.Range: ucar.ma2.Range union(ucar.ma2.Range)>($r8);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r9);

        i4 = i4 + 1;

        goto label2;

     label3:
        $r4 = new ucar.ma2.Section;

        specialinvoke $r4.<ucar.ma2.Section: void <init>(java.util.List)>($r2);

        return $r4;
    }

    public ucar.ma2.Section shiftOrigin(ucar.ma2.Section) throws ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Section r0, r1, $r4;
        java.util.ArrayList $r2;
        int $i0, $i1, $i2, $i3, $i4, i5;
        ucar.ma2.Range r7, $r8, $r9;
        java.util.List $r3, $r5;
        ucar.ma2.InvalidRangeException $r10;
        java.lang.Object $r6;

        r1 := @this: ucar.ma2.Section;

        r0 := @parameter0: ucar.ma2.Section;

        $i0 = virtualinvoke r0.<ucar.ma2.Section: int getRank()>();

        $i1 = virtualinvoke r1.<ucar.ma2.Section: int getRank()>();

        if $i0 == $i1 goto label1;

        $r10 = new ucar.ma2.InvalidRangeException;

        specialinvoke $r10.<ucar.ma2.InvalidRangeException: void <init>(java.lang.String)>("Invalid Section rank");

        throw $r10;

     label1:
        $r2 = new java.util.ArrayList;

        $i2 = virtualinvoke r1.<ucar.ma2.Section: int getRank()>();

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i2);

        i5 = 0;

     label2:
        $r3 = r1.<ucar.ma2.Section: java.util.List list>;

        $i3 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i5 >= $i3 goto label3;

        $r5 = r1.<ucar.ma2.Section: java.util.List list>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i5);

        r7 = (ucar.ma2.Range) $r6;

        $r8 = virtualinvoke r0.<ucar.ma2.Section: ucar.ma2.Range getRange(int)>(i5);

        $i4 = virtualinvoke $r8.<ucar.ma2.Range: int first()>();

        $r9 = virtualinvoke r7.<ucar.ma2.Range: ucar.ma2.Range shiftOrigin(int)>($i4);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r9);

        i5 = i5 + 1;

        goto label2;

     label3:
        $r4 = new ucar.ma2.Section;

        specialinvoke $r4.<ucar.ma2.Section: void <init>(java.util.List)>($r2);

        return $r4;
    }

    public boolean intersects(ucar.ma2.Section) throws ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Range r5, $r6;
        ucar.ma2.Section r0, r1;
        java.util.List $r2, $r3;
        ucar.ma2.InvalidRangeException $r7;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r4;
        boolean $z0;

        r1 := @this: ucar.ma2.Section;

        r0 := @parameter0: ucar.ma2.Section;

        $i0 = virtualinvoke r0.<ucar.ma2.Section: int getRank()>();

        $i1 = virtualinvoke r1.<ucar.ma2.Section: int getRank()>();

        if $i0 == $i1 goto label1;

        $r7 = new ucar.ma2.InvalidRangeException;

        specialinvoke $r7.<ucar.ma2.InvalidRangeException: void <init>(java.lang.String)>("Invalid Section rank");

        throw $r7;

     label1:
        i3 = 0;

     label2:
        $r2 = r1.<ucar.ma2.Section: java.util.List list>;

        $i2 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i3 >= $i2 goto label4;

        $r3 = r1.<ucar.ma2.Section: java.util.List list>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i3);

        r5 = (ucar.ma2.Range) $r4;

        $r6 = virtualinvoke r0.<ucar.ma2.Section: ucar.ma2.Range getRange(int)>(i3);

        $z0 = virtualinvoke r5.<ucar.ma2.Range: boolean intersects(ucar.ma2.Range)>($r6);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return 1;
    }

    public boolean contains(ucar.ma2.Section)
    {
        ucar.ma2.Range r5, $r6;
        ucar.ma2.Section r0, r1;
        java.util.List $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        java.lang.Object $r4;

        r1 := @this: ucar.ma2.Section;

        r0 := @parameter0: ucar.ma2.Section;

        $i0 = virtualinvoke r0.<ucar.ma2.Section: int getRank()>();

        $i1 = virtualinvoke r1.<ucar.ma2.Section: int getRank()>();

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        i7 = 0;

     label2:
        $r2 = r1.<ucar.ma2.Section: java.util.List list>;

        $i2 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i7 >= $i2 goto label5;

        $r3 = r1.<ucar.ma2.Section: java.util.List list>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i7);

        r5 = (ucar.ma2.Range) $r4;

        $r6 = virtualinvoke r0.<ucar.ma2.Section: ucar.ma2.Range getRange(int)>(i7);

        $i3 = virtualinvoke r5.<ucar.ma2.Range: int first()>();

        $i4 = virtualinvoke $r6.<ucar.ma2.Range: int first()>();

        if $i3 <= $i4 goto label3;

        return 0;

     label3:
        $i5 = virtualinvoke r5.<ucar.ma2.Range: int last()>();

        $i6 = virtualinvoke $r6.<ucar.ma2.Range: int last()>();

        if $i5 >= $i6 goto label4;

        return 0;

     label4:
        i7 = i7 + 1;

        goto label2;

     label5:
        return 1;
    }

    public java.lang.String toString()
    {
        ucar.ma2.Range r6;
        ucar.ma2.Section r1;
        java.util.List $r2, $r4;
        int $i0, i1;
        java.lang.StringBuilder $r0;
        java.lang.Object $r5;
        java.lang.String $r3, $r7;

        r1 := @this: ucar.ma2.Section;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        i1 = 0;

     label1:
        $r2 = r1.<ucar.ma2.Section: java.util.List list>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i1 >= $i0 goto label5;

        $r4 = r1.<ucar.ma2.Section: java.util.List list>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i1);

        r6 = (ucar.ma2.Range) $r5;

        if i1 <= 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label2:
        if r6 != null goto label3;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        goto label4;

     label3:
        $r7 = virtualinvoke r6.<ucar.ma2.Range: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

     label4:
        i1 = i1 + 1;

        goto label1;

     label5:
        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public void <init>()
    {
        ucar.ma2.Section r0;
        java.util.ArrayList $r1;

        r0 := @this: ucar.ma2.Section;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ucar.ma2.Section: boolean immutable> = 0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<ucar.ma2.Section: java.util.List list> = $r1;

        return;
    }

    public ucar.ma2.Section appendRange()
    {
        java.lang.IllegalStateException $r2;
        java.util.List $r1;
        ucar.ma2.Section r0;
        boolean $z0;

        r0 := @this: ucar.ma2.Section;

        $z0 = r0.<ucar.ma2.Section: boolean immutable>;

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cant modify");

        throw $r2;

     label1:
        $r1 = r0.<ucar.ma2.Section: java.util.List list>;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(null);

        return r0;
    }

    public ucar.ma2.Section appendRange(ucar.ma2.Range)
    {
        ucar.ma2.Range r1;
        java.lang.IllegalStateException $r3;
        java.util.List $r2;
        ucar.ma2.Section r0;
        boolean $z0;

        r0 := @this: ucar.ma2.Section;

        r1 := @parameter0: ucar.ma2.Range;

        $z0 = r0.<ucar.ma2.Section: boolean immutable>;

        if $z0 == 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cant modify");

        throw $r3;

     label1:
        $r2 = r0.<ucar.ma2.Section: java.util.List list>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return r0;
    }

    public ucar.ma2.Section appendRange(int) throws ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Range $r1, $r3, $r5;
        java.lang.IllegalStateException $r7;
        ucar.ma2.Section r0;
        java.util.List $r2, $r4, $r6;
        int i0;
        boolean $z0;

        r0 := @this: ucar.ma2.Section;

        i0 := @parameter0: int;

        $z0 = r0.<ucar.ma2.Section: boolean immutable>;

        if $z0 == 0 goto label1;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cant modify");

        throw $r7;

     label1:
        if i0 <= 0 goto label2;

        $r6 = r0.<ucar.ma2.Section: java.util.List list>;

        $r5 = new ucar.ma2.Range;

        specialinvoke $r5.<ucar.ma2.Range: void <init>(int)>(i0);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label4;

     label2:
        if i0 != 0 goto label3;

        $r4 = r0.<ucar.ma2.Section: java.util.List list>;

        $r3 = <ucar.ma2.Range: ucar.ma2.Range EMPTY>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r3);

        goto label4;

     label3:
        $r2 = r0.<ucar.ma2.Section: java.util.List list>;

        $r1 = <ucar.ma2.Range: ucar.ma2.Range VLEN>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

     label4:
        return r0;
    }

    public ucar.ma2.Section appendRange(int, int) throws ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Range $r1;
        java.lang.IllegalStateException $r3;
        java.util.List $r2;
        ucar.ma2.Section r0;
        int i0, i1;
        boolean $z0;

        r0 := @this: ucar.ma2.Section;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = r0.<ucar.ma2.Section: boolean immutable>;

        if $z0 == 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cant modify");

        throw $r3;

     label1:
        $r2 = r0.<ucar.ma2.Section: java.util.List list>;

        $r1 = new ucar.ma2.Range;

        specialinvoke $r1.<ucar.ma2.Range: void <init>(int,int)>(i0, i1);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        return r0;
    }

    public ucar.ma2.Section appendRange(int, int, int) throws ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Range $r1;
        java.lang.IllegalStateException $r3;
        ucar.ma2.Section r0;
        java.util.List $r2;
        int i0, i1, i2;
        boolean $z0;

        r0 := @this: ucar.ma2.Section;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $z0 = r0.<ucar.ma2.Section: boolean immutable>;

        if $z0 == 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cant modify");

        throw $r3;

     label1:
        $r2 = r0.<ucar.ma2.Section: java.util.List list>;

        $r1 = new ucar.ma2.Range;

        specialinvoke $r1.<ucar.ma2.Range: void <init>(int,int,int)>(i0, i1, i2);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        return r0;
    }

    public ucar.ma2.Section appendRange(java.lang.String, int, int, int) throws ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Range $r1;
        java.lang.IllegalStateException $r4;
        ucar.ma2.Section r0;
        java.util.List $r3;
        int i0, i1, i2;
        java.lang.String r2;
        boolean $z0;

        r0 := @this: ucar.ma2.Section;

        r2 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $z0 = r0.<ucar.ma2.Section: boolean immutable>;

        if $z0 == 0 goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cant modify");

        throw $r4;

     label1:
        $r3 = r0.<ucar.ma2.Section: java.util.List list>;

        $r1 = new ucar.ma2.Range;

        specialinvoke $r1.<ucar.ma2.Range: void <init>(java.lang.String,int,int,int)>(r2, i0, i1, i2);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r1);

        return r0;
    }

    public ucar.ma2.Section insertRange(int, ucar.ma2.Range)
    {
        ucar.ma2.Range r1;
        java.lang.IllegalStateException $r3;
        java.util.List $r2;
        ucar.ma2.Section r0;
        int i0;
        boolean $z0;

        r0 := @this: ucar.ma2.Section;

        i0 := @parameter0: int;

        r1 := @parameter1: ucar.ma2.Range;

        $z0 = r0.<ucar.ma2.Section: boolean immutable>;

        if $z0 == 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cant modify");

        throw $r3;

     label1:
        $r2 = r0.<ucar.ma2.Section: java.util.List list>;

        interfaceinvoke $r2.<java.util.List: void add(int,java.lang.Object)>(i0, r1);

        return r0;
    }

    public ucar.ma2.Section removeRange(int)
    {
        java.lang.IllegalStateException $r2;
        java.util.List $r1;
        ucar.ma2.Section r0;
        int i0;
        boolean $z0;

        r0 := @this: ucar.ma2.Section;

        i0 := @parameter0: int;

        $z0 = r0.<ucar.ma2.Section: boolean immutable>;

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cant modify");

        throw $r2;

     label1:
        $r1 = r0.<ucar.ma2.Section: java.util.List list>;

        interfaceinvoke $r1.<java.util.List: java.lang.Object remove(int)>(i0);

        return r0;
    }

    public ucar.ma2.Section setRange(int, ucar.ma2.Range)
    {
        ucar.ma2.Range r1;
        java.lang.IllegalStateException $r3;
        java.util.List $r2;
        ucar.ma2.Section r0;
        int i0;
        boolean $z0;

        r0 := @this: ucar.ma2.Section;

        i0 := @parameter0: int;

        r1 := @parameter1: ucar.ma2.Range;

        $z0 = r0.<ucar.ma2.Section: boolean immutable>;

        if $z0 == 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cant modify");

        throw $r3;

     label1:
        $r2 = r0.<ucar.ma2.Section: java.util.List list>;

        interfaceinvoke $r2.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, r1);

        return r0;
    }

    public ucar.ma2.Section replaceRange(int, ucar.ma2.Range)
    {
        ucar.ma2.Range r1;
        java.lang.IllegalStateException $r3;
        java.util.List $r2;
        ucar.ma2.Section r0;
        int i0;
        boolean $z0;

        r0 := @this: ucar.ma2.Section;

        i0 := @parameter0: int;

        r1 := @parameter1: ucar.ma2.Range;

        $z0 = r0.<ucar.ma2.Section: boolean immutable>;

        if $z0 == 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cant modify");

        throw $r3;

     label1:
        $r2 = r0.<ucar.ma2.Section: java.util.List list>;

        interfaceinvoke $r2.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, r1);

        return r0;
    }

    public ucar.ma2.Section reduce()
    {
        java.lang.IllegalStateException $r11;
        ucar.ma2.Section r0, $r7;
        java.util.ArrayList $r3;
        int $i0, $i1, $i2;
        boolean $z0, $z1, $z2, z3;
        ucar.ma2.Range r9, r12;
        java.util.Iterator $r2, $r6;
        java.util.List $r1, $r4, $r5;
        java.lang.Object $r8, $r10;

        r0 := @this: ucar.ma2.Section;

        $z0 = r0.<ucar.ma2.Section: boolean immutable>;

        if $z0 == 0 goto label1;

        $r11 = new java.lang.IllegalStateException;

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cant modify");

        throw $r11;

     label1:
        z3 = 0;

        $r1 = r0.<ucar.ma2.Section: java.util.List list>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r10 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r12 = (ucar.ma2.Range) $r10;

        $i2 = virtualinvoke r12.<ucar.ma2.Range: int length()>();

        if $i2 != 1 goto label3;

        z3 = 1;

     label3:
        goto label2;

     label4:
        if z3 != 0 goto label5;

        return r0;

     label5:
        $r3 = new java.util.ArrayList;

        $r4 = r0.<ucar.ma2.Section: java.util.List list>;

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>($i0);

        $r5 = r0.<ucar.ma2.Section: java.util.List list>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label6:
        $z2 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label8;

        $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r9 = (ucar.ma2.Range) $r8;

        $i1 = virtualinvoke r9.<ucar.ma2.Range: int length()>();

        if $i1 <= 1 goto label7;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r9);

     label7:
        goto label6;

     label8:
        $r7 = new ucar.ma2.Section;

        specialinvoke $r7.<ucar.ma2.Section: void <init>(java.util.List)>($r3);

        return $r7;
    }

    public void setDefaults(int[]) throws ucar.ma2.InvalidRangeException
    {
        java.lang.IllegalStateException $r13;
        ucar.ma2.Section r0;
        int[] r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        boolean $z0;
        ucar.ma2.Range r5, $r6, $r8, $r10;
        java.util.List $r2, $r3, $r7, $r9, $r11;
        ucar.ma2.InvalidRangeException $r12;
        java.lang.Object $r4;

        r0 := @this: ucar.ma2.Section;

        r1 := @parameter0: int[];

        $z0 = r0.<ucar.ma2.Section: boolean immutable>;

        if $z0 == 0 goto label1;

        $r13 = new java.lang.IllegalStateException;

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cant modify");

        throw $r13;

     label1:
        $i0 = lengthof r1;

        $r2 = r0.<ucar.ma2.Section: java.util.List list>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 == $i1 goto label2;

        $r12 = new ucar.ma2.InvalidRangeException;

        specialinvoke $r12.<ucar.ma2.InvalidRangeException: void <init>(java.lang.String)>(" shape[] must have same rank as Section");

        throw $r12;

     label2:
        i6 = 0;

     label3:
        $i2 = lengthof r1;

        if i6 >= $i2 goto label7;

        $r3 = r0.<ucar.ma2.Section: java.util.List list>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i6);

        r5 = (ucar.ma2.Range) $r4;

        if r5 != null goto label6;

        $i3 = r1[i6];

        if $i3 <= 0 goto label4;

        $r11 = r0.<ucar.ma2.Section: java.util.List list>;

        $r10 = new ucar.ma2.Range;

        $i5 = r1[i6];

        specialinvoke $r10.<ucar.ma2.Range: void <init>(int)>($i5);

        interfaceinvoke $r11.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i6, $r10);

        goto label6;

     label4:
        $i4 = r1[i6];

        if $i4 != 0 goto label5;

        $r9 = r0.<ucar.ma2.Section: java.util.List list>;

        $r8 = <ucar.ma2.Range: ucar.ma2.Range EMPTY>;

        interfaceinvoke $r9.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i6, $r8);

        goto label6;

     label5:
        $r7 = r0.<ucar.ma2.Section: java.util.List list>;

        $r6 = <ucar.ma2.Range: ucar.ma2.Range VLEN>;

        interfaceinvoke $r7.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i6, $r6);

     label6:
        i6 = i6 + 1;

        goto label3;

     label7:
        return;
    }

    public ucar.ma2.Section makeImmutable()
    {
        java.util.List $r1, $r2;
        ucar.ma2.Section r0;
        boolean $z0;

        r0 := @this: ucar.ma2.Section;

        $z0 = r0.<ucar.ma2.Section: boolean immutable>;

        if $z0 == 0 goto label1;

        return r0;

     label1:
        r0.<ucar.ma2.Section: boolean immutable> = 1;

        $r1 = r0.<ucar.ma2.Section: java.util.List list>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        r0.<ucar.ma2.Section: java.util.List list> = $r2;

        return r0;
    }

    public boolean isImmutable()
    {
        ucar.ma2.Section r0;
        boolean $z0;

        r0 := @this: ucar.ma2.Section;

        $z0 = r0.<ucar.ma2.Section: boolean immutable>;

        return $z0;
    }

    public int[] getShape()
    {
        ucar.ma2.Range $r6;
        ucar.ma2.Section r0;
        java.util.List $r1, $r3, $r4;
        int[] r2;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r5;

        r0 := @this: ucar.ma2.Section;

        $r1 = r0.<ucar.ma2.Section: java.util.List list>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        r2 = newarray (int)[$i0];

        i3 = 0;

     label1:
        $r3 = r0.<ucar.ma2.Section: java.util.List list>;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i3 >= $i1 goto label2;

        $r4 = r0.<ucar.ma2.Section: java.util.List list>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i3);

        $r6 = (ucar.ma2.Range) $r5;

        $i2 = virtualinvoke $r6.<ucar.ma2.Range: int length()>();

        r2[i3] = $i2;

        i3 = i3 + 1;

        goto label1;

     label2:
        return r2;
    }

    public int[] getOrigin()
    {
        ucar.ma2.Range $r6;
        ucar.ma2.Section r0;
        java.util.List $r1, $r3, $r4;
        int[] r2;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r5;

        r0 := @this: ucar.ma2.Section;

        $r1 = r0.<ucar.ma2.Section: java.util.List list>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        r2 = newarray (int)[$i0];

        i3 = 0;

     label1:
        $r3 = r0.<ucar.ma2.Section: java.util.List list>;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i3 >= $i1 goto label2;

        $r4 = r0.<ucar.ma2.Section: java.util.List list>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i3);

        $r6 = (ucar.ma2.Range) $r5;

        $i2 = virtualinvoke $r6.<ucar.ma2.Range: int first()>();

        r2[i3] = $i2;

        i3 = i3 + 1;

        goto label1;

     label2:
        return r2;
    }

    public int[] getStride()
    {
        ucar.ma2.Range $r6;
        ucar.ma2.Section r0;
        java.util.List $r1, $r3, $r4;
        int[] r2;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r5;

        r0 := @this: ucar.ma2.Section;

        $r1 = r0.<ucar.ma2.Section: java.util.List list>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        r2 = newarray (int)[$i0];

        i3 = 0;

     label1:
        $r3 = r0.<ucar.ma2.Section: java.util.List list>;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i3 >= $i1 goto label2;

        $r4 = r0.<ucar.ma2.Section: java.util.List list>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i3);

        $r6 = (ucar.ma2.Range) $r5;

        $i2 = virtualinvoke $r6.<ucar.ma2.Range: int stride()>();

        r2[i3] = $i2;

        i3 = i3 + 1;

        goto label1;

     label2:
        return r2;
    }

    public int getOrigin(int)
    {
        ucar.ma2.Range $r3;
        java.util.List $r1;
        ucar.ma2.Section r0;
        int i0, $i1;
        java.lang.Object $r2;

        r0 := @this: ucar.ma2.Section;

        i0 := @parameter0: int;

        $r1 = r0.<ucar.ma2.Section: java.util.List list>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (ucar.ma2.Range) $r2;

        $i1 = virtualinvoke $r3.<ucar.ma2.Range: int first()>();

        return $i1;
    }

    public int getShape(int)
    {
        ucar.ma2.Range $r3;
        java.util.List $r1;
        ucar.ma2.Section r0;
        int i0, $i1;
        java.lang.Object $r2;

        r0 := @this: ucar.ma2.Section;

        i0 := @parameter0: int;

        $r1 = r0.<ucar.ma2.Section: java.util.List list>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (ucar.ma2.Range) $r2;

        $i1 = virtualinvoke $r3.<ucar.ma2.Range: int length()>();

        return $i1;
    }

    public int getStride(int)
    {
        ucar.ma2.Range $r3;
        java.util.List $r1;
        ucar.ma2.Section r0;
        int i0, $i1;
        java.lang.Object $r2;

        r0 := @this: ucar.ma2.Section;

        i0 := @parameter0: int;

        $r1 = r0.<ucar.ma2.Section: java.util.List list>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (ucar.ma2.Range) $r2;

        $i1 = virtualinvoke $r3.<ucar.ma2.Range: int stride()>();

        return $i1;
    }

    public int getRank()
    {
        int $i0;
        java.util.List $r1;
        ucar.ma2.Section r0;

        r0 := @this: ucar.ma2.Section;

        $r1 = r0.<ucar.ma2.Section: java.util.List list>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public long computeSize()
    {
        ucar.ma2.Range r4, $r5;
        ucar.ma2.Section r0;
        long $l2, l3;
        java.util.List $r1, $r2;
        int $i0, $i1, i4, $i6;
        java.lang.Object $r3;

        r0 := @this: ucar.ma2.Section;

        l3 = 1L;

        $r1 = r0.<ucar.ma2.Section: java.util.List list>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        i4 = $i0 - 1;

     label1:
        if i4 < 0 goto label3;

        $r2 = r0.<ucar.ma2.Section: java.util.List list>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i4);

        r4 = (ucar.ma2.Range) $r3;

        $r5 = <ucar.ma2.Range: ucar.ma2.Range VLEN>;

        if r4 == $r5 goto label2;

        $i1 = virtualinvoke r4.<ucar.ma2.Range: int length()>();

        $l2 = (long) $i1;

        l3 = l3 * $l2;

     label2:
        $i6 = (int) -1;

        i4 = i4 + $i6;

        goto label1;

     label3:
        return l3;
    }

    public java.util.List getRanges()
    {
        java.util.List $r1;
        ucar.ma2.Section r0;

        r0 := @this: ucar.ma2.Section;

        $r1 = r0.<ucar.ma2.Section: java.util.List list>;

        return $r1;
    }

    public ucar.ma2.Range getRange(int)
    {
        ucar.ma2.Range $r3;
        java.util.List $r1;
        ucar.ma2.Section r0;
        int i0;
        java.lang.Object $r2;

        r0 := @this: ucar.ma2.Section;

        i0 := @parameter0: int;

        $r1 = r0.<ucar.ma2.Section: java.util.List list>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (ucar.ma2.Range) $r2;

        return $r3;
    }

    public ucar.ma2.Range find(java.lang.String)
    {
        ucar.ma2.Range r4;
        ucar.ma2.Section r0;
        java.util.Iterator $r2;
        java.util.List $r1;
        java.lang.Object $r3;
        java.lang.String r5, $r6;
        boolean $z0, $z1;

        r0 := @this: ucar.ma2.Section;

        r5 := @parameter0: java.lang.String;

        $r1 = r0.<ucar.ma2.Section: java.util.List list>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (ucar.ma2.Range) $r3;

        $r6 = virtualinvoke r4.<ucar.ma2.Range: java.lang.String getName()>();

        $z1 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label2;

        return r4;

     label2:
        goto label1;

     label3:
        return null;
    }

    public ucar.ma2.Section addRangeNames(java.util.List) throws ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Section r1, $r2;
        int $i0, $i1, $i2, i3;
        java.lang.String $r9;
        boolean $z0;
        ucar.ma2.Range r6, $r7;
        java.util.Iterator $r4;
        java.util.List r0, $r3;
        ucar.ma2.InvalidRangeException $r10;
        java.lang.Object $r5, $r8;

        r1 := @this: ucar.ma2.Section;

        r0 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $i1 = virtualinvoke r1.<ucar.ma2.Section: int getRank()>();

        if $i0 == $i1 goto label1;

        $r10 = new ucar.ma2.InvalidRangeException;

        specialinvoke $r10.<ucar.ma2.InvalidRangeException: void <init>(java.lang.String)>("Invalid number of Range Names");

        throw $r10;

     label1:
        i3 = 0;

        $r2 = new ucar.ma2.Section;

        specialinvoke $r2.<ucar.ma2.Section: void <init>()>();

        $r3 = virtualinvoke r1.<ucar.ma2.Section: java.util.List getRanges()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (ucar.ma2.Range) $r5;

        $r7 = new ucar.ma2.Range;

        $i2 = i3;

        i3 = i3 + 1;

        $r8 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i2);

        $r9 = (java.lang.String) $r8;

        specialinvoke $r7.<ucar.ma2.Range: void <init>(java.lang.String,ucar.ma2.Range)>($r9, r6);

        virtualinvoke $r2.<ucar.ma2.Section: ucar.ma2.Section appendRange(ucar.ma2.Range)>($r7);

        goto label2;

     label3:
        return $r2;
    }

    public java.lang.String checkInRange(int[])
    {
        int[] r2;
        ucar.ma2.Range r6, $r7;
        java.util.List $r1, $r3, $r4, $r18;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r16, $r17, $r19, $r20, $r21;
        ucar.ma2.Section r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10;
        java.lang.String $r15, $r22;
        java.lang.Object $r5;

        r0 := @this: ucar.ma2.Section;

        r2 := @parameter0: int[];

        $r1 = r0.<ucar.ma2.Section: java.util.List list>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = lengthof r2;

        if $i0 == $i1 goto label1;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Number of ranges in section (");

        $r18 = r0.<ucar.ma2.Section: java.util.List list>;

        $i8 = interfaceinvoke $r18.<java.util.List: int size()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") must be = ");

        $i9 = lengthof r2;

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r22;

     label1:
        i10 = 0;

     label2:
        $r3 = r0.<ucar.ma2.Section: java.util.List list>;

        $i2 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i10 >= $i2 goto label6;

        $r4 = r0.<ucar.ma2.Section: java.util.List list>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i10);

        r6 = (ucar.ma2.Range) $r5;

        if r6 != null goto label3;

        goto label5;

     label3:
        $r7 = <ucar.ma2.Range: ucar.ma2.Range VLEN>;

        if r6 != $r7 goto label4;

        goto label5;

     label4:
        $i3 = virtualinvoke r6.<ucar.ma2.Range: int last()>();

        $i4 = r2[i10];

        if $i3 < $i4 goto label5;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal Range for dimension ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": last requested ");

        $i5 = virtualinvoke r6.<ucar.ma2.Range: int last()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" > max ");

        $i6 = r2[i10];

        $i7 = $i6 - 1;

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r15;

     label5:
        i10 = i10 + 1;

        goto label2;

     label6:
        return null;
    }

    public boolean equivalent(int[]) throws ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Range r5;
        ucar.ma2.Section r0;
        java.util.List $r2, $r3;
        ucar.ma2.InvalidRangeException $r6;
        int[] r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        java.lang.Object $r4;

        r0 := @this: ucar.ma2.Section;

        r1 := @parameter0: int[];

        $i0 = virtualinvoke r0.<ucar.ma2.Section: int getRank()>();

        $i1 = lengthof r1;

        if $i0 == $i1 goto label1;

        $r6 = new ucar.ma2.InvalidRangeException;

        specialinvoke $r6.<ucar.ma2.InvalidRangeException: void <init>(java.lang.String)>("Invalid Section rank");

        throw $r6;

     label1:
        i6 = 0;

     label2:
        $r2 = r0.<ucar.ma2.Section: java.util.List list>;

        $i2 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i6 >= $i2 goto label6;

        $r3 = r0.<ucar.ma2.Section: java.util.List list>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i6);

        r5 = (ucar.ma2.Range) $r4;

        if r5 != null goto label3;

        goto label5;

     label3:
        $i3 = virtualinvoke r5.<ucar.ma2.Range: int first()>();

        if $i3 == 0 goto label4;

        return 0;

     label4:
        $i4 = virtualinvoke r5.<ucar.ma2.Range: int length()>();

        $i5 = r1[i6];

        if $i4 == $i5 goto label5;

        return 0;

     label5:
        i6 = i6 + 1;

        goto label2;

     label6:
        return 1;
    }

    public boolean equals(java.lang.Object)
    {
        ucar.ma2.Range $r3, $r4;
        ucar.ma2.Section r0, r2;
        int $i0, $i1, $i2, i3;
        java.lang.Object r1;
        boolean $z0, $z1;

        r0 := @this: ucar.ma2.Section;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof ucar.ma2.Section;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (ucar.ma2.Section) r1;

        $i0 = virtualinvoke r0.<ucar.ma2.Section: int getRank()>();

        $i1 = virtualinvoke r2.<ucar.ma2.Section: int getRank()>();

        if $i0 == $i1 goto label3;

        return 0;

     label3:
        i3 = 0;

     label4:
        $i2 = virtualinvoke r0.<ucar.ma2.Section: int getRank()>();

        if i3 >= $i2 goto label9;

        $r3 = virtualinvoke r0.<ucar.ma2.Section: ucar.ma2.Range getRange(int)>(i3);

        $r4 = virtualinvoke r2.<ucar.ma2.Section: ucar.ma2.Range getRange(int)>(i3);

        if $r3 != null goto label5;

        if $r4 == null goto label5;

        return 0;

     label5:
        if $r4 != null goto label6;

        if $r3 == null goto label6;

        return 0;

     label6:
        if $r3 != null goto label7;

        goto label8;

     label7:
        $z1 = virtualinvoke $r3.<ucar.ma2.Range: boolean equals(java.lang.Object)>($r4);

        if $z1 != 0 goto label8;

        return 0;

     label8:
        i3 = i3 + 1;

        goto label4;

     label9:
        return 1;
    }

    public int hashCode()
    {
        ucar.ma2.Range r4;
        ucar.ma2.Section r0;
        java.util.Iterator $r2;
        java.util.List $r1;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: ucar.ma2.Section;

        i3 = 17;

        $r1 = r0.<ucar.ma2.Section: java.util.List list>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (ucar.ma2.Range) $r3;

        if r4 == null goto label2;

        $i0 = 37 * i3;

        $i1 = virtualinvoke r4.<ucar.ma2.Range: int hashCode()>();

        $i2 = $i0 + $i1;

        i3 = i3 + $i2;

     label2:
        goto label1;

     label3:
        return i3;
    }

    public ucar.ma2.Section$Iterator getIterator(int[])
    {
        ucar.ma2.Section$Iterator $r0;
        ucar.ma2.Section r1;
        int[] r2;

        r1 := @this: ucar.ma2.Section;

        r2 := @parameter0: int[];

        $r0 = new ucar.ma2.Section$Iterator;

        specialinvoke $r0.<ucar.ma2.Section$Iterator: void <init>(ucar.ma2.Section,int[])>(r1, r2);

        return $r0;
    }
}
