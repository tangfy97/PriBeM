public class org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative extends com.google.gwt.core.client.JavaScriptObject
{

    protected void <init>()
    {
        org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative r0;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative;

        specialinvoke r0.<com.google.gwt.core.client.JavaScriptObject: void <init>()>();

        return;
    }

    public static native org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative getSelectionUnsafe();

    public static org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative getSelectionGuarded()
    {
        com.google.gwt.dom.client.Element $r2;
        org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative $r0;
        com.google.gwt.dom.client.Node $r1, $r3;
        boolean $z0, $z1, $z2;

        $r0 = staticinvoke <org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative: org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative getSelectionUnsafe()>();

        if $r0 == null goto label3;

        $r1 = virtualinvoke $r0.<org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative: com.google.gwt.dom.client.Node anchorNode()>();

        $z0 = staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: boolean isUnreadable(com.google.gwt.dom.client.Node)>($r1);

        if $z0 == 0 goto label3;

        $z1 = staticinvoke <org.waveprotocol.wave.client.common.util.UserAgent: boolean isFirefox()>();

        if $z1 == 0 goto label1;

        return null;

     label1:
        $z2 = staticinvoke <org.waveprotocol.wave.client.common.util.UserAgent: boolean isWebkit()>();

        if $z2 == 0 goto label2;

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: com.google.gwt.dom.client.Element getActiveElement()>();

        $r3 = (com.google.gwt.dom.client.Node) $r2;

        virtualinvoke $r0.<org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative: void setCaret(com.google.gwt.dom.client.Node,int)>($r3, 0);

        return $r0;

     label2:
        return null;

     label3:
        return $r0;
    }

    public final native org.waveprotocol.wave.client.editor.selection.html.JsRange getRangeAt(int);

    public final native com.google.gwt.dom.client.Node anchorNode();

    public final native com.google.gwt.dom.client.Node focusNode();

    public final native int anchorOffset();

    public final native int focusOffset();

    public final native void removeAllRanges();

    public final native int rangeCount();

    public final native void addRange(org.waveprotocol.wave.client.editor.selection.html.JsRange);

    public final void setAnchorAndFocus(com.google.gwt.dom.client.Node, int, com.google.gwt.dom.client.Node, int)
    {
        org.waveprotocol.wave.client.editor.selection.html.JsRange $r1, $r17;
        org.waveprotocol.wave.common.logging.Logger $r6;
        org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative r3;
        int i0, i1;
        java.lang.String $r16;
        com.google.gwt.core.client.JavaScriptException $r4;
        boolean $z0;
        org.waveprotocol.wave.common.logging.LoggerBundle $r5;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;
        com.google.gwt.dom.client.Node r0, r2;

        r3 := @this: org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative;

        r2 := @parameter0: com.google.gwt.dom.client.Node;

        i0 := @parameter1: int;

        r0 := @parameter2: com.google.gwt.dom.client.Node;

        i1 := @parameter3: int;

        $z0 = <org.waveprotocol.wave.client.common.util.QuirksConstants: boolean HAS_BASE_AND_EXTENT>;

        if $z0 == 0 goto label1;

        specialinvoke r3.<org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative: void setBaseAndExtent(com.google.gwt.dom.client.Node,int,com.google.gwt.dom.client.Node,int)>(r2, i0, r0, i1);

        goto label5;

     label1:
        staticinvoke <org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative: void setFocusElement(com.google.gwt.dom.client.Node)>(r0);

        $r1 = staticinvoke <org.waveprotocol.wave.client.editor.selection.html.JsRange: org.waveprotocol.wave.client.editor.selection.html.JsRange create()>();

        virtualinvoke $r1.<org.waveprotocol.wave.client.editor.selection.html.JsRange: void setStart(com.google.gwt.dom.client.Node,int)>(r2, i0);

        virtualinvoke $r1.<org.waveprotocol.wave.client.editor.selection.html.JsRange: void collapse(boolean)>(1);

        virtualinvoke r3.<org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative: void removeAllRanges()>();

        virtualinvoke r3.<org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative: void addRange(org.waveprotocol.wave.client.editor.selection.html.JsRange)>($r1);

        if r0 != r2 goto label2;

        if i1 == i0 goto label5;

     label2:
        specialinvoke r3.<org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative: void extend(com.google.gwt.dom.client.Node,int)>(r0, i1);

     label3:
        goto label5;

     label4:
        $r4 := @caughtexception;

        $r5 = <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: org.waveprotocol.wave.common.logging.LoggerBundle LOG>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("error extending selection from ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.waveprotocol.wave.common.logging.Logger: void logPlainText(java.lang.String)>($r16);

        virtualinvoke r3.<org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative: void removeAllRanges()>();

        $r17 = staticinvoke <org.waveprotocol.wave.client.editor.selection.html.JsRange: org.waveprotocol.wave.client.editor.selection.html.JsRange create()>();

        virtualinvoke $r17.<org.waveprotocol.wave.client.editor.selection.html.JsRange: void setStart(com.google.gwt.dom.client.Node,int)>(r2, i0);

        virtualinvoke $r17.<org.waveprotocol.wave.client.editor.selection.html.JsRange: void collapse(boolean)>(1);

        virtualinvoke $r17.<org.waveprotocol.wave.client.editor.selection.html.JsRange: void setEnd(com.google.gwt.dom.client.Node,int)>(r0, i1);

        virtualinvoke r3.<org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative: void addRange(org.waveprotocol.wave.client.editor.selection.html.JsRange)>($r17);

     label5:
        return;

        catch com.google.gwt.core.client.JavaScriptException from label2 to label3 with label4;
    }

    public final void setCaret(com.google.gwt.dom.client.Node, int)
    {
        org.waveprotocol.wave.client.editor.selection.html.JsRange $r1;
        int i0;
        org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative r2;
        com.google.gwt.dom.client.Node r0;
        boolean $z0;

        r2 := @this: org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative;

        r0 := @parameter0: com.google.gwt.dom.client.Node;

        i0 := @parameter1: int;

        $z0 = <org.waveprotocol.wave.client.common.util.QuirksConstants: boolean HAS_BASE_AND_EXTENT>;

        if $z0 == 0 goto label1;

        specialinvoke r2.<org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative: void setBaseAndExtent(com.google.gwt.dom.client.Node,int,com.google.gwt.dom.client.Node,int)>(r0, i0, r0, i0);

        goto label2;

     label1:
        staticinvoke <org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative: void setFocusElement(com.google.gwt.dom.client.Node)>(r0);

        $r1 = staticinvoke <org.waveprotocol.wave.client.editor.selection.html.JsRange: org.waveprotocol.wave.client.editor.selection.html.JsRange create()>();

        virtualinvoke $r1.<org.waveprotocol.wave.client.editor.selection.html.JsRange: void setStart(com.google.gwt.dom.client.Node,int)>(r0, i0);

        virtualinvoke $r1.<org.waveprotocol.wave.client.editor.selection.html.JsRange: void collapse(boolean)>(1);

        virtualinvoke r2.<org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative: void removeAllRanges()>();

        virtualinvoke r2.<org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative: void addRange(org.waveprotocol.wave.client.editor.selection.html.JsRange)>($r1);

     label2:
        return;
    }

    private final native void extend(com.google.gwt.dom.client.Node, int);

    private final native void setBaseAndExtent(com.google.gwt.dom.client.Node, int, com.google.gwt.dom.client.Node, int);

    private static void setFocusElement(com.google.gwt.dom.client.Node)
    {
        org.waveprotocol.wave.client.common.util.DomHelper$ElementEditability $r2, $r3;
        com.google.gwt.core.client.JavaScriptObject $r1;
        com.google.gwt.dom.client.Element r4;
        com.google.gwt.dom.client.Node r0;
        boolean $z0, $z1;

        r0 := @parameter0: com.google.gwt.dom.client.Node;

        $z0 = staticinvoke <org.waveprotocol.wave.client.common.util.UserAgent: boolean isFirefox()>();

        if $z0 == 0 goto label4;

        $z1 = staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: boolean isTextNode(com.google.gwt.dom.client.Node)>(r0);

        if $z1 == 0 goto label1;

        r4 = virtualinvoke r0.<com.google.gwt.dom.client.Node: com.google.gwt.dom.client.Element getParentElement()>();

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        r4 = (com.google.gwt.dom.client.Element) $r1;

     label2:
        if r4 == null goto label3;

        $r2 = staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: org.waveprotocol.wave.client.common.util.DomHelper$ElementEditability getContentEditability(com.google.gwt.dom.client.Element)>(r4);

        $r3 = <org.waveprotocol.wave.client.common.util.DomHelper$ElementEditability: org.waveprotocol.wave.client.common.util.DomHelper$ElementEditability EDITABLE>;

        if $r2 == $r3 goto label3;

        r4 = virtualinvoke r4.<com.google.gwt.dom.client.Element: com.google.gwt.dom.client.Element getParentElement()>();

        goto label2;

     label3:
        if r4 == null goto label4;

        staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: void focus(com.google.gwt.dom.client.Element)>(r4);

     label4:
        return;
    }
}
