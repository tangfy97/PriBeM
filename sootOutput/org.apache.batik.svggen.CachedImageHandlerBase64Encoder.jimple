public class org.apache.batik.svggen.CachedImageHandlerBase64Encoder extends org.apache.batik.svggen.DefaultCachedImageHandler
{

    public void <init>()
    {
        org.apache.batik.svggen.ImageCacher$Embedded $r1;
        org.apache.batik.svggen.CachedImageHandlerBase64Encoder r0;

        r0 := @this: org.apache.batik.svggen.CachedImageHandlerBase64Encoder;

        specialinvoke r0.<org.apache.batik.svggen.DefaultCachedImageHandler: void <init>()>();

        $r1 = new org.apache.batik.svggen.ImageCacher$Embedded;

        specialinvoke $r1.<org.apache.batik.svggen.ImageCacher$Embedded: void <init>()>();

        virtualinvoke r0.<org.apache.batik.svggen.DefaultCachedImageHandler: void setImageCacher(org.apache.batik.svggen.ImageCacher)>($r1);

        return;
    }

    public org.w3c.dom.Element createElement(org.apache.batik.svggen.SVGGeneratorContext)
    {
        org.w3c.dom.Element $r2;
        org.apache.batik.svggen.SVGGeneratorContext r0;
        org.w3c.dom.Document $r1;
        org.apache.batik.svggen.CachedImageHandlerBase64Encoder r3;

        r3 := @this: org.apache.batik.svggen.CachedImageHandlerBase64Encoder;

        r0 := @parameter0: org.apache.batik.svggen.SVGGeneratorContext;

        $r1 = virtualinvoke r0.<org.apache.batik.svggen.SVGGeneratorContext: org.w3c.dom.Document getDOMFactory()>();

        $r2 = interfaceinvoke $r1.<org.w3c.dom.Document: org.w3c.dom.Element createElementNS(java.lang.String,java.lang.String)>("http://www.w3.org/2000/svg", "use");

        return $r2;
    }

    public java.lang.String getRefPrefix()
    {
        org.apache.batik.svggen.CachedImageHandlerBase64Encoder r0;

        r0 := @this: org.apache.batik.svggen.CachedImageHandlerBase64Encoder;

        return "";
    }

    protected java.awt.geom.AffineTransform handleTransform(org.w3c.dom.Element, double, double, double, double, double, double, org.apache.batik.svggen.SVGGeneratorContext)
    {
        org.apache.batik.svggen.CachedImageHandlerBase64Encoder r1;
        java.awt.geom.AffineTransform $r0;
        org.w3c.dom.Element r2;
        byte $b0, $b1;
        org.apache.batik.svggen.SVGGeneratorContext r3;
        double d0, d1, d2, d3, d4, d5, d6, d7;
        boolean $z0;

        r1 := @this: org.apache.batik.svggen.CachedImageHandlerBase64Encoder;

        r2 := @parameter0: org.w3c.dom.Element;

        d6 := @parameter1: double;

        d7 := @parameter2: double;

        d1 := @parameter3: double;

        d4 := @parameter4: double;

        d0 := @parameter5: double;

        d3 := @parameter6: double;

        r3 := @parameter7: org.apache.batik.svggen.SVGGeneratorContext;

        $r0 = new java.awt.geom.AffineTransform;

        specialinvoke $r0.<java.awt.geom.AffineTransform: void <init>()>();

        d2 = d0 / d1;

        d5 = d3 / d4;

        virtualinvoke $r0.<java.awt.geom.AffineTransform: void translate(double,double)>(d6, d7);

        $b0 = d2 cmpl 1.0;

        if $b0 != 0 goto label1;

        $b1 = d5 cmpl 1.0;

        if $b1 == 0 goto label2;

     label1:
        virtualinvoke $r0.<java.awt.geom.AffineTransform: void scale(double,double)>(d2, d5);

     label2:
        $z0 = virtualinvoke $r0.<java.awt.geom.AffineTransform: boolean isIdentity()>();

        if $z0 != 0 goto label3;

        return $r0;

     label3:
        return null;
    }

    public void encodeImage(java.awt.image.BufferedImage, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r1;
        org.apache.batik.ext.awt.image.spi.ImageWriterRegistry $r2;
        org.apache.batik.ext.awt.image.spi.ImageWriter $r3;
        java.awt.image.BufferedImage r4;
        org.apache.batik.util.Base64EncoderStream $r0;
        org.apache.batik.svggen.CachedImageHandlerBase64Encoder r5;

        r5 := @this: org.apache.batik.svggen.CachedImageHandlerBase64Encoder;

        r4 := @parameter0: java.awt.image.BufferedImage;

        r1 := @parameter1: java.io.OutputStream;

        $r0 = new org.apache.batik.util.Base64EncoderStream;

        specialinvoke $r0.<org.apache.batik.util.Base64EncoderStream: void <init>(java.io.OutputStream)>(r1);

        $r2 = staticinvoke <org.apache.batik.ext.awt.image.spi.ImageWriterRegistry: org.apache.batik.ext.awt.image.spi.ImageWriterRegistry getInstance()>();

        $r3 = virtualinvoke $r2.<org.apache.batik.ext.awt.image.spi.ImageWriterRegistry: org.apache.batik.ext.awt.image.spi.ImageWriter getWriterFor(java.lang.String)>("image/png");

        interfaceinvoke $r3.<org.apache.batik.ext.awt.image.spi.ImageWriter: void writeImage(java.awt.image.RenderedImage,java.io.OutputStream)>(r4, $r0);

        virtualinvoke $r0.<org.apache.batik.util.Base64EncoderStream: void close()>();

        return;
    }

    public int getBufferedImageType()
    {
        org.apache.batik.svggen.CachedImageHandlerBase64Encoder r0;

        r0 := @this: org.apache.batik.svggen.CachedImageHandlerBase64Encoder;

        return 2;
    }
}
