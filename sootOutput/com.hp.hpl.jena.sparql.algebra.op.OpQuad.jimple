public class com.hp.hpl.jena.sparql.algebra.op.OpQuad extends com.hp.hpl.jena.sparql.algebra.op.Op0
{
    private final com.hp.hpl.jena.sparql.core.Quad quad;
    private com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern opQuadPattern;

    public void <init>(com.hp.hpl.jena.sparql.core.Quad)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpQuad r0;
        com.hp.hpl.jena.sparql.core.Quad r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpQuad;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.Quad;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.Op0: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuad: com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern opQuadPattern> = null;

        r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuad: com.hp.hpl.jena.sparql.core.Quad quad> = r1;

        return;
    }

    public final com.hp.hpl.jena.sparql.core.Quad getQuad()
    {
        com.hp.hpl.jena.sparql.algebra.op.OpQuad r0;
        com.hp.hpl.jena.sparql.core.Quad $r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpQuad;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuad: com.hp.hpl.jena.sparql.core.Quad quad>;

        return $r1;
    }

    public com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern asQuadPattern()
    {
        com.hp.hpl.jena.sparql.algebra.op.OpQuad r0;
        com.hp.hpl.jena.sparql.core.BasicPattern $r3;
        com.hp.hpl.jena.graph.Node $r8;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern $r1, $r2, $r6;
        com.hp.hpl.jena.sparql.core.Quad $r4, $r7;
        com.hp.hpl.jena.graph.Triple $r5;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpQuad;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuad: com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern opQuadPattern>;

        if $r1 != null goto label1;

        $r3 = new com.hp.hpl.jena.sparql.core.BasicPattern;

        specialinvoke $r3.<com.hp.hpl.jena.sparql.core.BasicPattern: void <init>()>();

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuad: com.hp.hpl.jena.sparql.core.Quad getQuad()>();

        $r5 = virtualinvoke $r4.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Triple asTriple()>();

        virtualinvoke $r3.<com.hp.hpl.jena.sparql.core.BasicPattern: void add(com.hp.hpl.jena.graph.Triple)>($r5);

        $r6 = new com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        $r7 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuad: com.hp.hpl.jena.sparql.core.Quad quad>;

        $r8 = virtualinvoke $r7.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getGraph()>();

        specialinvoke $r6.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.core.BasicPattern)>($r8, $r3);

        r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuad: com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern opQuadPattern> = $r6;

     label1:
        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuad: com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern opQuadPattern>;

        return $r2;
    }

    public com.hp.hpl.jena.sparql.algebra.Op apply(com.hp.hpl.jena.sparql.algebra.Transform)
    {
        com.hp.hpl.jena.sparql.algebra.Transform r0;
        com.hp.hpl.jena.sparql.algebra.op.OpQuad r1;
        com.hp.hpl.jena.sparql.algebra.Op $r2;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.op.OpQuad;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Transform;

        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.algebra.Transform: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpQuad)>(r1);

        return $r2;
    }

    public com.hp.hpl.jena.sparql.algebra.op.Op0 copy()
    {
        com.hp.hpl.jena.sparql.algebra.op.OpQuad $r0, r1;
        com.hp.hpl.jena.sparql.core.Quad $r2;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.op.OpQuad;

        $r0 = new com.hp.hpl.jena.sparql.algebra.op.OpQuad;

        $r2 = r1.<com.hp.hpl.jena.sparql.algebra.op.OpQuad: com.hp.hpl.jena.sparql.core.Quad quad>;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuad: void <init>(com.hp.hpl.jena.sparql.core.Quad)>($r2);

        return $r0;
    }

    public boolean equalTo(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpQuad r1, r2;
        com.hp.hpl.jena.sparql.core.Quad $r3, $r4;
        com.hp.hpl.jena.sparql.util.NodeIsomorphismMap r5;
        com.hp.hpl.jena.sparql.algebra.Op r0;
        boolean $z0, $z1;

        r2 := @this: com.hp.hpl.jena.sparql.algebra.op.OpQuad;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r5 := @parameter1: com.hp.hpl.jena.sparql.util.NodeIsomorphismMap;

        $z0 = r0 instanceof com.hp.hpl.jena.sparql.algebra.op.OpQuad;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = (com.hp.hpl.jena.sparql.algebra.op.OpQuad) r0;

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.sparql.algebra.op.OpQuad: com.hp.hpl.jena.sparql.core.Quad getQuad()>();

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpQuad: com.hp.hpl.jena.sparql.core.Quad getQuad()>();

        $z1 = staticinvoke <com.hp.hpl.jena.sparql.util.Iso: boolean quadIso(com.hp.hpl.jena.sparql.core.Quad,com.hp.hpl.jena.sparql.core.Quad,com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)>($r3, $r4, r5);

        return $z1;
    }

    public int hashCode()
    {
        com.hp.hpl.jena.sparql.algebra.op.OpQuad r0;
        int $i0, $i1;
        com.hp.hpl.jena.sparql.core.Quad $r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpQuad;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuad: com.hp.hpl.jena.sparql.core.Quad quad>;

        $i0 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.core.Quad: int hashCode()>();

        $i1 = 186 ^ $i0;

        return $i1;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpQuad r1;
        com.hp.hpl.jena.sparql.algebra.OpVisitor r0;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.op.OpQuad;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.OpVisitor;

        interfaceinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpVisitor: void visit(com.hp.hpl.jena.sparql.algebra.op.OpQuad)>(r1);

        return;
    }

    public java.lang.String getName()
    {
        com.hp.hpl.jena.sparql.algebra.op.OpQuad r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpQuad;

        return "triple";
    }

    public boolean equivalent(com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern)
    {
        com.hp.hpl.jena.sparql.core.QuadPattern $r1;
        com.hp.hpl.jena.sparql.algebra.op.OpQuad r3;
        int $i0;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern r0;
        com.hp.hpl.jena.sparql.core.Quad $r2, $r4;
        boolean $z0;

        r3 := @this: com.hp.hpl.jena.sparql.algebra.op.OpQuad;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.sparql.core.QuadPattern getPattern()>();

        $i0 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.core.QuadPattern: int size()>();

        if $i0 == 1 goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.core.QuadPattern: com.hp.hpl.jena.sparql.core.Quad get(int)>(0);

        $r4 = r3.<com.hp.hpl.jena.sparql.algebra.op.OpQuad: com.hp.hpl.jena.sparql.core.Quad quad>;

        $z0 = virtualinvoke $r4.<com.hp.hpl.jena.sparql.core.Quad: boolean equals(java.lang.Object)>($r2);

        return $z0;
    }
}
