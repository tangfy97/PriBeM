public abstract enum class org.waveprotocol.wave.concurrencycontrol.channel.Accessibility extends java.lang.Enum
{
    public static final enum org.waveprotocol.wave.concurrencycontrol.channel.Accessibility INACCESSIBLE;
    public static final enum org.waveprotocol.wave.concurrencycontrol.channel.Accessibility READ_ONLY;
    public static final enum org.waveprotocol.wave.concurrencycontrol.channel.Accessibility READ_WRITE;
    private static final org.waveprotocol.wave.concurrencycontrol.channel.Accessibility[] $VALUES;

    public static org.waveprotocol.wave.concurrencycontrol.channel.Accessibility[] values()
    {
        java.lang.Object $r1;
        org.waveprotocol.wave.concurrencycontrol.channel.Accessibility[] $r0, $r2;

        $r0 = <org.waveprotocol.wave.concurrencycontrol.channel.Accessibility: org.waveprotocol.wave.concurrencycontrol.channel.Accessibility[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (org.waveprotocol.wave.concurrencycontrol.channel.Accessibility[]) $r1;

        return $r2;
    }

    public static org.waveprotocol.wave.concurrencycontrol.channel.Accessibility valueOf(java.lang.String)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.Accessibility $r2;
        java.lang.String r0;
        java.lang.Enum $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/waveprotocol/wave/concurrencycontrol/channel/Accessibility;", r0);

        $r2 = (org.waveprotocol.wave.concurrencycontrol.channel.Accessibility) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.Accessibility r0;
        int i0;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.Accessibility;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    abstract boolean isReadable();

    abstract boolean isWritable();

    void <init>(java.lang.String, int, org.waveprotocol.wave.concurrencycontrol.channel.Accessibility$1)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.Accessibility r0;
        org.waveprotocol.wave.concurrencycontrol.channel.Accessibility$1 r2;
        int i0;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.Accessibility;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: org.waveprotocol.wave.concurrencycontrol.channel.Accessibility$1;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.Accessibility: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.concurrencycontrol.channel.Accessibility $r4, $r5, $r6;
        org.waveprotocol.wave.concurrencycontrol.channel.Accessibility$1 $r0;
        org.waveprotocol.wave.concurrencycontrol.channel.Accessibility$2 $r1;
        org.waveprotocol.wave.concurrencycontrol.channel.Accessibility$3 $r2;
        org.waveprotocol.wave.concurrencycontrol.channel.Accessibility[] $r3;

        $r0 = new org.waveprotocol.wave.concurrencycontrol.channel.Accessibility$1;

        specialinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.channel.Accessibility$1: void <init>(java.lang.String,int)>("INACCESSIBLE", 0);

        <org.waveprotocol.wave.concurrencycontrol.channel.Accessibility: org.waveprotocol.wave.concurrencycontrol.channel.Accessibility INACCESSIBLE> = $r0;

        $r1 = new org.waveprotocol.wave.concurrencycontrol.channel.Accessibility$2;

        specialinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.channel.Accessibility$2: void <init>(java.lang.String,int)>("READ_ONLY", 1);

        <org.waveprotocol.wave.concurrencycontrol.channel.Accessibility: org.waveprotocol.wave.concurrencycontrol.channel.Accessibility READ_ONLY> = $r1;

        $r2 = new org.waveprotocol.wave.concurrencycontrol.channel.Accessibility$3;

        specialinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.channel.Accessibility$3: void <init>(java.lang.String,int)>("READ_WRITE", 2);

        <org.waveprotocol.wave.concurrencycontrol.channel.Accessibility: org.waveprotocol.wave.concurrencycontrol.channel.Accessibility READ_WRITE> = $r2;

        $r3 = newarray (org.waveprotocol.wave.concurrencycontrol.channel.Accessibility)[3];

        $r4 = <org.waveprotocol.wave.concurrencycontrol.channel.Accessibility: org.waveprotocol.wave.concurrencycontrol.channel.Accessibility INACCESSIBLE>;

        $r3[0] = $r4;

        $r5 = <org.waveprotocol.wave.concurrencycontrol.channel.Accessibility: org.waveprotocol.wave.concurrencycontrol.channel.Accessibility READ_ONLY>;

        $r3[1] = $r5;

        $r6 = <org.waveprotocol.wave.concurrencycontrol.channel.Accessibility: org.waveprotocol.wave.concurrencycontrol.channel.Accessibility READ_WRITE>;

        $r3[2] = $r6;

        <org.waveprotocol.wave.concurrencycontrol.channel.Accessibility: org.waveprotocol.wave.concurrencycontrol.channel.Accessibility[] $VALUES> = $r3;

        return;
    }
}
