class org.tukaani.xz.BlockInputStream extends java.io.InputStream
{
    private final java.io.DataInputStream inData;
    private final org.tukaani.xz.CountingInputStream inCounted;
    private java.io.InputStream filterChain;
    private final org.tukaani.xz.check.Check check;
    private long uncompressedSizeInHeader;
    private long compressedSizeInHeader;
    private long compressedSizeLimit;
    private final int headerSize;
    private long uncompressedSize;
    private boolean endReached;
    private final byte[] tempBuf;

    public void <init>(java.io.InputStream, org.tukaani.xz.check.Check, int, long, long) throws java.io.IOException, org.tukaani.xz.IndexIndicatorException
    {
        byte[] $r1, r5, $r24, $r26, $r28, $r33, $r34;
        org.tukaani.xz.MemoryLimitException $r60;
        byte $b0, $b1, $b11, $b12, $b13, $b14, $b24, $b25, $b26, $b29, $b35, $b37, $b44, $b47, $b49, $b51, $b54, $b56, $b62, $b67, $b70;
        byte[][] r9;
        org.tukaani.xz.FilterDecoder[] $r42;
        long $l19, $l20, $l22, $l23, l28, $l34, $l36, $l38, $l39, $l40, $l43, $l45, $l46, $l48, $l50, l52, $l53, $l55, $l58, $l59, $l61, $l64, $l65, $l66, $l68, $l69, $l71, l75;
        short $s2, $s27, $s82, $s86;
        java.lang.StringBuffer $r20, $r21, $r58;
        org.tukaani.xz.CountingInputStream $r12, $r61;
        java.io.IOException $r40;
        java.io.ByteArrayInputStream $r47;
        org.tukaani.xz.UnsupportedOptionsException $r46, $r51, $r59;
        java.io.DataInputStream $r6, $r7, $r43;
        long[] r8;
        int $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i15, $i16, $i17, $i18, $i21, i30, $i31, $i32, $i33, $i41, $i42, $i57, $i60, $i63, i72, i73, i74, $i76, i77, $i78, i79, i80, i81, $i83, $i84, $i85, $i87, $i89, $i90, $i91, $i93;
        org.tukaani.xz.LZMA2Decoder $r55;
        org.tukaani.xz.BlockInputStream r0;
        org.tukaani.xz.IndexIndicatorException $r44;
        org.tukaani.xz.FilterDecoder $r14, $r17;
        org.tukaani.xz.BCJDecoder $r57;
        java.lang.String $r22;
        org.tukaani.xz.CorruptedInputException $r45, $r48, $r49, $r50, $r52, $r53, $r54;
        org.tukaani.xz.DeltaDecoder $r56;
        boolean $z0, $z1;
        org.tukaani.xz.check.Check r2;
        java.io.InputStream r4, $r13, $r15;

        r0 := @this: org.tukaani.xz.BlockInputStream;

        r4 := @parameter0: java.io.InputStream;

        r2 := @parameter1: org.tukaani.xz.check.Check;

        i30 := @parameter2: int;

        l28 := @parameter3: long;

        l52 := @parameter4: long;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<org.tukaani.xz.BlockInputStream: long uncompressedSizeInHeader> = -1L;

        r0.<org.tukaani.xz.BlockInputStream: long compressedSizeInHeader> = -1L;

        r0.<org.tukaani.xz.BlockInputStream: long uncompressedSize> = 0L;

        r0.<org.tukaani.xz.BlockInputStream: boolean endReached> = 0;

        $r1 = newarray (byte)[1];

        r0.<org.tukaani.xz.BlockInputStream: byte[] tempBuf> = $r1;

        r0.<org.tukaani.xz.BlockInputStream: org.tukaani.xz.check.Check check> = r2;

        $r43 = new java.io.DataInputStream;

        specialinvoke $r43.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r4);

        r0.<org.tukaani.xz.BlockInputStream: java.io.DataInputStream inData> = $r43;

        r5 = newarray (byte)[1024];

        $r6 = r0.<org.tukaani.xz.BlockInputStream: java.io.DataInputStream inData>;

        virtualinvoke $r6.<java.io.DataInputStream: void readFully(byte[],int,int)>(r5, 0, 1);

        $b0 = r5[0];

        if $b0 != 0 goto label01;

        $r44 = new org.tukaani.xz.IndexIndicatorException;

        specialinvoke $r44.<org.tukaani.xz.IndexIndicatorException: void <init>()>();

        throw $r44;

     label01:
        $b1 = r5[0];

        $s82 = (short) $b1;

        $s2 = $s82 & 255;

        $i83 = (int) $s2;

        $i3 = $i83 + 1;

        $i4 = 4 * $i3;

        r0.<org.tukaani.xz.BlockInputStream: int headerSize> = $i4;

        $r7 = r0.<org.tukaani.xz.BlockInputStream: java.io.DataInputStream inData>;

        $i5 = r0.<org.tukaani.xz.BlockInputStream: int headerSize>;

        $i6 = $i5 - 1;

        virtualinvoke $r7.<java.io.DataInputStream: void readFully(byte[],int,int)>(r5, 1, $i6);

        $i7 = r0.<org.tukaani.xz.BlockInputStream: int headerSize>;

        $i10 = $i7 - 4;

        $i8 = r0.<org.tukaani.xz.BlockInputStream: int headerSize>;

        $i9 = $i8 - 4;

        $z0 = staticinvoke <org.tukaani.xz.common.DecoderUtil: boolean isCRC32Valid(byte[],int,int,int)>(r5, 0, $i10, $i9);

        if $z0 != 0 goto label02;

        $r45 = new org.tukaani.xz.CorruptedInputException;

        specialinvoke $r45.<org.tukaani.xz.CorruptedInputException: void <init>(java.lang.String)>("XZ Block Header is corrupt");

        throw $r45;

     label02:
        $b11 = r5[1];

        $b12 = $b11 & 60;

        if $b12 == 0 goto label03;

        $r46 = new org.tukaani.xz.UnsupportedOptionsException;

        specialinvoke $r46.<org.tukaani.xz.UnsupportedOptionsException: void <init>(java.lang.String)>("Unsupported options in XZ Block Header");

        throw $r46;

     label03:
        $b13 = r5[1];

        $b14 = $b13 & 3;

        $i84 = (int) $b14;

        i15 = $i84 + 1;

        r8 = newarray (long)[i15];

        r9 = newarray (byte[])[i15];

        $r47 = new java.io.ByteArrayInputStream;

        $i16 = r0.<org.tukaani.xz.BlockInputStream: int headerSize>;

        $i17 = $i16 - 6;

        specialinvoke $r47.<java.io.ByteArrayInputStream: void <init>(byte[],int,int)>(r5, 2, $i17);

     label04:
        $i18 = r0.<org.tukaani.xz.BlockInputStream: int headerSize>;

        $l19 = (long) $i18;

        $l20 = 9223372036854775804L - $l19;

        $i21 = virtualinvoke r2.<org.tukaani.xz.check.Check: int getSize()>();

        $l22 = (long) $i21;

        $l23 = $l20 - $l22;

        r0.<org.tukaani.xz.BlockInputStream: long compressedSizeLimit> = $l23;

        $b24 = r5[1];

        $b25 = $b24 & 64;

        if $b25 == 0 goto label07;

        $l65 = staticinvoke <org.tukaani.xz.common.DecoderUtil: long decodeVLI(java.io.InputStream)>($r47);

        r0.<org.tukaani.xz.BlockInputStream: long compressedSizeInHeader> = $l65;

        $l66 = r0.<org.tukaani.xz.BlockInputStream: long compressedSizeInHeader>;

        $b67 = $l66 cmp 0L;

        if $b67 == 0 goto label05;

        $l69 = r0.<org.tukaani.xz.BlockInputStream: long compressedSizeInHeader>;

        $l68 = r0.<org.tukaani.xz.BlockInputStream: long compressedSizeLimit>;

        $b70 = $l69 cmp $l68;

        $i85 = (int) $b70;

        if $i85 <= 0 goto label06;

     label05:
        $r48 = new org.tukaani.xz.CorruptedInputException;

        specialinvoke $r48.<org.tukaani.xz.CorruptedInputException: void <init>()>();

        throw $r48;

     label06:
        $l71 = r0.<org.tukaani.xz.BlockInputStream: long compressedSizeInHeader>;

        r0.<org.tukaani.xz.BlockInputStream: long compressedSizeLimit> = $l71;

     label07:
        $b26 = r5[1];

        $s86 = (short) $b26;

        $s27 = $s86 & 128;

        if $s27 == 0 goto label08;

        $l64 = staticinvoke <org.tukaani.xz.common.DecoderUtil: long decodeVLI(java.io.InputStream)>($r47);

        r0.<org.tukaani.xz.BlockInputStream: long uncompressedSizeInHeader> = $l64;

     label08:
        i72 = 0;

     label09:
        if i72 >= i15 goto label11;

        $l58 = staticinvoke <org.tukaani.xz.common.DecoderUtil: long decodeVLI(java.io.InputStream)>($r47);

        r8[i72] = $l58;

        $l59 = staticinvoke <org.tukaani.xz.common.DecoderUtil: long decodeVLI(java.io.InputStream)>($r47);

        $i60 = virtualinvoke $r47.<java.io.ByteArrayInputStream: int available()>();

        $l61 = (long) $i60;

        $b62 = $l59 cmp $l61;

        $i87 = (int) $b62;

        if $i87 <= 0 goto label10;

        $r49 = new org.tukaani.xz.CorruptedInputException;

        specialinvoke $r49.<org.tukaani.xz.CorruptedInputException: void <init>()>();

        throw $r49;

     label10:
        $i63 = (int) $l59;

        $r33 = newarray (byte)[$i63];

        r9[i72] = $r33;

        $r34 = r9[i72];

        virtualinvoke $r47.<java.io.ByteArrayInputStream: int read(byte[])>($r34);

        i72 = i72 + 1;

        goto label09;

     label11:
        goto label13;

     label12:
        $r40 := @caughtexception;

        $r50 = new org.tukaani.xz.CorruptedInputException;

        specialinvoke $r50.<org.tukaani.xz.CorruptedInputException: void <init>(java.lang.String)>("XZ Block Header is corrupt");

        throw $r50;

     label13:
        i73 = virtualinvoke $r47.<java.io.ByteArrayInputStream: int available()>();

     label14:
        if i73 <= 0 goto label16;

        $i57 = virtualinvoke $r47.<java.io.ByteArrayInputStream: int read()>();

        if $i57 == 0 goto label15;

        $r51 = new org.tukaani.xz.UnsupportedOptionsException;

        specialinvoke $r51.<org.tukaani.xz.UnsupportedOptionsException: void <init>(java.lang.String)>("Unsupported options in XZ Block Header");

        throw $r51;

     label15:
        $i89 = (int) -1;

        i73 = i73 + $i89;

        goto label14;

     label16:
        $b29 = l28 cmp -1L;

        if $b29 == 0 goto label21;

        $i41 = r0.<org.tukaani.xz.BlockInputStream: int headerSize>;

        $i42 = virtualinvoke r2.<org.tukaani.xz.check.Check: int getSize()>();

        i74 = $i41 + $i42;

        $l43 = (long) i74;

        $b44 = $l43 cmp l28;

        $i90 = (int) $b44;

        if $i90 < 0 goto label17;

        $r52 = new org.tukaani.xz.CorruptedInputException;

        specialinvoke $r52.<org.tukaani.xz.CorruptedInputException: void <init>(java.lang.String)>("XZ Index does not match a Block Header");

        throw $r52;

     label17:
        $l45 = (long) i74;

        l75 = l28 - $l45;

        $l46 = r0.<org.tukaani.xz.BlockInputStream: long compressedSizeLimit>;

        $b47 = l75 cmp $l46;

        $i91 = (int) $b47;

        if $i91 > 0 goto label18;

        $l48 = r0.<org.tukaani.xz.BlockInputStream: long compressedSizeInHeader>;

        $b49 = $l48 cmp -1L;

        if $b49 == 0 goto label19;

        $l55 = r0.<org.tukaani.xz.BlockInputStream: long compressedSizeInHeader>;

        $b56 = $l55 cmp l75;

        if $b56 == 0 goto label19;

     label18:
        $r53 = new org.tukaani.xz.CorruptedInputException;

        specialinvoke $r53.<org.tukaani.xz.CorruptedInputException: void <init>(java.lang.String)>("XZ Index does not match a Block Header");

        throw $r53;

     label19:
        $l50 = r0.<org.tukaani.xz.BlockInputStream: long uncompressedSizeInHeader>;

        $b51 = $l50 cmp -1L;

        if $b51 == 0 goto label20;

        $l53 = r0.<org.tukaani.xz.BlockInputStream: long uncompressedSizeInHeader>;

        $b54 = $l53 cmp l52;

        if $b54 == 0 goto label20;

        $r54 = new org.tukaani.xz.CorruptedInputException;

        specialinvoke $r54.<org.tukaani.xz.CorruptedInputException: void <init>(java.lang.String)>("XZ Index does not match a Block Header");

        throw $r54;

     label20:
        r0.<org.tukaani.xz.BlockInputStream: long compressedSizeLimit> = l75;

        r0.<org.tukaani.xz.BlockInputStream: long compressedSizeInHeader> = l75;

        r0.<org.tukaani.xz.BlockInputStream: long uncompressedSizeInHeader> = l52;

     label21:
        $i76 = lengthof r8;

        $r42 = newarray (org.tukaani.xz.FilterDecoder)[$i76];

        i77 = 0;

     label22:
        $i78 = lengthof $r42;

        if i77 >= $i78 goto label27;

        $l34 = r8[i77];

        $b35 = $l34 cmp 33L;

        if $b35 != 0 goto label23;

        $r55 = new org.tukaani.xz.LZMA2Decoder;

        $r28 = r9[i77];

        specialinvoke $r55.<org.tukaani.xz.LZMA2Decoder: void <init>(byte[])>($r28);

        $r42[i77] = $r55;

        goto label26;

     label23:
        $l36 = r8[i77];

        $b37 = $l36 cmp 3L;

        if $b37 != 0 goto label24;

        $r56 = new org.tukaani.xz.DeltaDecoder;

        $r26 = r9[i77];

        specialinvoke $r56.<org.tukaani.xz.DeltaDecoder: void <init>(byte[])>($r26);

        $r42[i77] = $r56;

        goto label26;

     label24:
        $l38 = r8[i77];

        $z1 = staticinvoke <org.tukaani.xz.BCJDecoder: boolean isBCJFilterID(long)>($l38);

        if $z1 == 0 goto label25;

        $r57 = new org.tukaani.xz.BCJDecoder;

        $l40 = r8[i77];

        $r24 = r9[i77];

        specialinvoke $r57.<org.tukaani.xz.BCJDecoder: void <init>(long,byte[])>($l40, $r24);

        $r42[i77] = $r57;

        goto label26;

     label25:
        $r59 = new org.tukaani.xz.UnsupportedOptionsException;

        $r58 = new java.lang.StringBuffer;

        specialinvoke $r58.<java.lang.StringBuffer: void <init>()>();

        $r20 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unknown Filter ID ");

        $l39 = r8[i77];

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l39);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r59.<org.tukaani.xz.UnsupportedOptionsException: void <init>(java.lang.String)>($r22);

        throw $r59;

     label26:
        i77 = i77 + 1;

        goto label22;

     label27:
        staticinvoke <org.tukaani.xz.RawCoder: void validate(org.tukaani.xz.FilterCoder[])>($r42);

        if i30 < 0 goto label30;

        i79 = 0;

        i80 = 0;

     label28:
        $i32 = lengthof $r42;

        if i80 >= $i32 goto label29;

        $r17 = $r42[i80];

        $i33 = interfaceinvoke $r17.<org.tukaani.xz.FilterDecoder: int getMemoryUsage()>();

        i79 = i79 + $i33;

        i80 = i80 + 1;

        goto label28;

     label29:
        if i79 <= i30 goto label30;

        $r60 = new org.tukaani.xz.MemoryLimitException;

        specialinvoke $r60.<org.tukaani.xz.MemoryLimitException: void <init>(int,int)>(i79, i30);

        throw $r60;

     label30:
        $r61 = new org.tukaani.xz.CountingInputStream;

        specialinvoke $r61.<org.tukaani.xz.CountingInputStream: void <init>(java.io.InputStream)>(r4);

        r0.<org.tukaani.xz.BlockInputStream: org.tukaani.xz.CountingInputStream inCounted> = $r61;

        $r12 = r0.<org.tukaani.xz.BlockInputStream: org.tukaani.xz.CountingInputStream inCounted>;

        r0.<org.tukaani.xz.BlockInputStream: java.io.InputStream filterChain> = $r12;

        $i31 = lengthof $r42;

        i81 = $i31 - 1;

     label31:
        if i81 < 0 goto label32;

        $r14 = $r42[i81];

        $r13 = r0.<org.tukaani.xz.BlockInputStream: java.io.InputStream filterChain>;

        $r15 = interfaceinvoke $r14.<org.tukaani.xz.FilterDecoder: java.io.InputStream getInputStream(java.io.InputStream)>($r13);

        r0.<org.tukaani.xz.BlockInputStream: java.io.InputStream filterChain> = $r15;

        $i93 = (int) -1;

        i81 = i81 + $i93;

        goto label31;

     label32:
        return;

        catch java.io.IOException from label04 to label11 with label12;
    }

    public int read() throws java.io.IOException
    {
        byte[] $r1, $r2;
        short $s2;
        byte $b1;
        int $i0, $i4;
        org.tukaani.xz.BlockInputStream r0;

        r0 := @this: org.tukaani.xz.BlockInputStream;

        $r1 = r0.<org.tukaani.xz.BlockInputStream: byte[] tempBuf>;

        $i0 = virtualinvoke r0.<org.tukaani.xz.BlockInputStream: int read(byte[],int,int)>($r1, 0, 1);

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $s2 = -1;

        goto label2;

     label1:
        $r2 = r0.<org.tukaani.xz.BlockInputStream: byte[] tempBuf>;

        $b1 = $r2[0];

        $s2 = $b1 & 255;

     label2:
        return $s2;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        byte[] r1;
        byte $b7, $b9, $b11, $b13, $b17, $b20;
        boolean $z0;
        org.tukaani.xz.check.Check $r3;
        long $l3, $l4, $l5, $l6, $l8, $l10, $l12, $l15, $l16, $l18, $l19;
        int i0, i1, $i2, $i14, $i22, $i23, $i24, $i25, $i26, $i28, $i30;
        org.tukaani.xz.BlockInputStream r0;
        org.tukaani.xz.CountingInputStream $r4;
        org.tukaani.xz.CorruptedInputException $r8, $r9;
        java.io.InputStream $r2, $r5;

        r0 := @this: org.tukaani.xz.BlockInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<org.tukaani.xz.BlockInputStream: boolean endReached>;

        if $z0 == 0 goto label1;

        $i22 = (int) -1;

        return $i22;

     label1:
        $r2 = r0.<org.tukaani.xz.BlockInputStream: java.io.InputStream filterChain>;

        $i2 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i1);

        if $i2 <= 0 goto label7;

        $r3 = r0.<org.tukaani.xz.BlockInputStream: org.tukaani.xz.check.Check check>;

        virtualinvoke $r3.<org.tukaani.xz.check.Check: void update(byte[],int,int)>(r1, i0, $i2);

        $l4 = r0.<org.tukaani.xz.BlockInputStream: long uncompressedSize>;

        $l3 = (long) $i2;

        $l5 = $l4 + $l3;

        r0.<org.tukaani.xz.BlockInputStream: long uncompressedSize> = $l5;

        $r4 = r0.<org.tukaani.xz.BlockInputStream: org.tukaani.xz.CountingInputStream inCounted>;

        $l6 = virtualinvoke $r4.<org.tukaani.xz.CountingInputStream: long getSize()>();

        $b7 = $l6 cmp 0L;

        $i23 = (int) $b7;

        if $i23 < 0 goto label2;

        $l8 = r0.<org.tukaani.xz.BlockInputStream: long compressedSizeLimit>;

        $b9 = $l6 cmp $l8;

        $i24 = (int) $b9;

        if $i24 > 0 goto label2;

        $l10 = r0.<org.tukaani.xz.BlockInputStream: long uncompressedSize>;

        $b11 = $l10 cmp 0L;

        $i25 = (int) $b11;

        if $i25 < 0 goto label2;

        $l12 = r0.<org.tukaani.xz.BlockInputStream: long uncompressedSizeInHeader>;

        $b13 = $l12 cmp -1L;

        if $b13 == 0 goto label3;

        $l19 = r0.<org.tukaani.xz.BlockInputStream: long uncompressedSize>;

        $l18 = r0.<org.tukaani.xz.BlockInputStream: long uncompressedSizeInHeader>;

        $b20 = $l19 cmp $l18;

        $i26 = (int) $b20;

        if $i26 <= 0 goto label3;

     label2:
        $r8 = new org.tukaani.xz.CorruptedInputException;

        specialinvoke $r8.<org.tukaani.xz.CorruptedInputException: void <init>()>();

        throw $r8;

     label3:
        if $i2 < i1 goto label4;

        $l16 = r0.<org.tukaani.xz.BlockInputStream: long uncompressedSize>;

        $l15 = r0.<org.tukaani.xz.BlockInputStream: long uncompressedSizeInHeader>;

        $b17 = $l16 cmp $l15;

        if $b17 != 0 goto label6;

     label4:
        $r5 = r0.<org.tukaani.xz.BlockInputStream: java.io.InputStream filterChain>;

        $i14 = virtualinvoke $r5.<java.io.InputStream: int read()>();

        $i28 = (int) -1;

        if $i14 == $i28 goto label5;

        $r9 = new org.tukaani.xz.CorruptedInputException;

        specialinvoke $r9.<org.tukaani.xz.CorruptedInputException: void <init>()>();

        throw $r9;

     label5:
        specialinvoke r0.<org.tukaani.xz.BlockInputStream: void validate()>();

        r0.<org.tukaani.xz.BlockInputStream: boolean endReached> = 1;

     label6:
        goto label8;

     label7:
        $i30 = (int) -1;

        if $i2 != $i30 goto label8;

        specialinvoke r0.<org.tukaani.xz.BlockInputStream: void validate()>();

        r0.<org.tukaani.xz.BlockInputStream: boolean endReached> = 1;

     label8:
        return $i2;
    }

    private void validate() throws java.io.IOException
    {
        byte[] r3, $r6;
        byte $b2, $b4, $b9, $b11, $b15;
        boolean $z0;
        java.io.DataInputStream $r4, $r15;
        org.tukaani.xz.check.Check $r2, $r5, $r10;
        long $l0, $l1, $l3, $l7, $l8, $l10, l12, $l13, $l14;
        java.lang.StringBuffer $r8, $r9, $r12, $r13;
        int $i5, $i6;
        java.lang.String $r11, $r14;
        org.tukaani.xz.BlockInputStream r0;
        org.tukaani.xz.CountingInputStream $r1;
        org.tukaani.xz.CorruptedInputException $r7, $r16, $r17;

        r0 := @this: org.tukaani.xz.BlockInputStream;

        $r1 = r0.<org.tukaani.xz.BlockInputStream: org.tukaani.xz.CountingInputStream inCounted>;

        $l0 = virtualinvoke $r1.<org.tukaani.xz.CountingInputStream: long getSize()>();

        l12 = $l0;

        $l1 = r0.<org.tukaani.xz.BlockInputStream: long compressedSizeInHeader>;

        $b2 = $l1 cmp -1L;

        if $b2 == 0 goto label1;

        $l10 = r0.<org.tukaani.xz.BlockInputStream: long compressedSizeInHeader>;

        $b11 = $l10 cmp $l0;

        if $b11 != 0 goto label2;

     label1:
        $l3 = r0.<org.tukaani.xz.BlockInputStream: long uncompressedSizeInHeader>;

        $b4 = $l3 cmp -1L;

        if $b4 == 0 goto label3;

        $l8 = r0.<org.tukaani.xz.BlockInputStream: long uncompressedSizeInHeader>;

        $l7 = r0.<org.tukaani.xz.BlockInputStream: long uncompressedSize>;

        $b9 = $l8 cmp $l7;

        if $b9 == 0 goto label3;

     label2:
        $r17 = new org.tukaani.xz.CorruptedInputException;

        specialinvoke $r17.<org.tukaani.xz.CorruptedInputException: void <init>()>();

        throw $r17;

     label3:
        $l13 = l12;

        l12 = l12 + 1L;

        $l14 = $l13 & 3L;

        $b15 = $l14 cmp 0L;

        if $b15 == 0 goto label4;

        $r15 = r0.<org.tukaani.xz.BlockInputStream: java.io.DataInputStream inData>;

        $i6 = virtualinvoke $r15.<java.io.DataInputStream: int readUnsignedByte()>();

        if $i6 == 0 goto label3;

        $r16 = new org.tukaani.xz.CorruptedInputException;

        specialinvoke $r16.<org.tukaani.xz.CorruptedInputException: void <init>()>();

        throw $r16;

     label4:
        $r2 = r0.<org.tukaani.xz.BlockInputStream: org.tukaani.xz.check.Check check>;

        $i5 = virtualinvoke $r2.<org.tukaani.xz.check.Check: int getSize()>();

        r3 = newarray (byte)[$i5];

        $r4 = r0.<org.tukaani.xz.BlockInputStream: java.io.DataInputStream inData>;

        virtualinvoke $r4.<java.io.DataInputStream: void readFully(byte[])>(r3);

        $r5 = r0.<org.tukaani.xz.BlockInputStream: org.tukaani.xz.check.Check check>;

        $r6 = virtualinvoke $r5.<org.tukaani.xz.check.Check: byte[] finish()>();

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r6, r3);

        if $z0 != 0 goto label5;

        $r7 = new org.tukaani.xz.CorruptedInputException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Integrity check (");

        $r10 = r0.<org.tukaani.xz.BlockInputStream: org.tukaani.xz.check.Check check>;

        $r11 = virtualinvoke $r10.<org.tukaani.xz.check.Check: java.lang.String getName()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") does not match");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<org.tukaani.xz.CorruptedInputException: void <init>(java.lang.String)>($r14);

        throw $r7;

     label5:
        return;
    }

    public int available() throws java.io.IOException
    {
        int $i0;
        org.tukaani.xz.BlockInputStream r0;
        java.io.InputStream $r1;

        r0 := @this: org.tukaani.xz.BlockInputStream;

        $r1 = r0.<org.tukaani.xz.BlockInputStream: java.io.InputStream filterChain>;

        $i0 = virtualinvoke $r1.<java.io.InputStream: int available()>();

        return $i0;
    }

    public long getUnpaddedSize()
    {
        org.tukaani.xz.check.Check $r2;
        org.tukaani.xz.CountingInputStream $r1;
        long $l1, $l2, $l3, $l5, $l6;
        int $i0, $i4;
        org.tukaani.xz.BlockInputStream r0;

        r0 := @this: org.tukaani.xz.BlockInputStream;

        $i0 = r0.<org.tukaani.xz.BlockInputStream: int headerSize>;

        $l1 = (long) $i0;

        $r1 = r0.<org.tukaani.xz.BlockInputStream: org.tukaani.xz.CountingInputStream inCounted>;

        $l2 = virtualinvoke $r1.<org.tukaani.xz.CountingInputStream: long getSize()>();

        $l3 = $l1 + $l2;

        $r2 = r0.<org.tukaani.xz.BlockInputStream: org.tukaani.xz.check.Check check>;

        $i4 = virtualinvoke $r2.<org.tukaani.xz.check.Check: int getSize()>();

        $l5 = (long) $i4;

        $l6 = $l3 + $l5;

        return $l6;
    }

    public long getUncompressedSize()
    {
        long $l0;
        org.tukaani.xz.BlockInputStream r0;

        r0 := @this: org.tukaani.xz.BlockInputStream;

        $l0 = r0.<org.tukaani.xz.BlockInputStream: long uncompressedSize>;

        return $l0;
    }
}
