public class org.jsoup.nodes.TextNode extends org.jsoup.nodes.Node
{
    private static final java.lang.String TEXT_KEY;
    java.lang.String text;

    public void <init>(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        org.jsoup.nodes.TextNode r0;

        r0 := @this: org.jsoup.nodes.TextNode;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<org.jsoup.nodes.Node: void <init>()>();

        r0.<org.jsoup.nodes.TextNode: java.lang.String baseUri> = r1;

        r0.<org.jsoup.nodes.TextNode: java.lang.String text> = r2;

        return;
    }

    public java.lang.String nodeName()
    {
        org.jsoup.nodes.TextNode r0;

        r0 := @this: org.jsoup.nodes.TextNode;

        return "#text";
    }

    public java.lang.String text()
    {
        java.lang.String $r1, $r2;
        org.jsoup.nodes.TextNode r0;

        r0 := @this: org.jsoup.nodes.TextNode;

        $r1 = virtualinvoke r0.<org.jsoup.nodes.TextNode: java.lang.String getWholeText()>();

        $r2 = staticinvoke <org.jsoup.nodes.TextNode: java.lang.String normaliseWhitespace(java.lang.String)>($r1);

        return $r2;
    }

    public org.jsoup.nodes.TextNode text(java.lang.String)
    {
        org.jsoup.nodes.Attributes $r2, $r3;
        org.jsoup.nodes.TextNode r0;
        java.lang.String r1;

        r0 := @this: org.jsoup.nodes.TextNode;

        r1 := @parameter0: java.lang.String;

        r0.<org.jsoup.nodes.TextNode: java.lang.String text> = r1;

        $r2 = r0.<org.jsoup.nodes.TextNode: org.jsoup.nodes.Attributes attributes>;

        if $r2 == null goto label1;

        $r3 = r0.<org.jsoup.nodes.TextNode: org.jsoup.nodes.Attributes attributes>;

        virtualinvoke $r3.<org.jsoup.nodes.Attributes: void put(java.lang.String,java.lang.String)>("text", r1);

     label1:
        return r0;
    }

    public java.lang.String getWholeText()
    {
        org.jsoup.nodes.Attributes $r1, $r2;
        org.jsoup.nodes.TextNode r0;
        java.lang.String $r3;

        r0 := @this: org.jsoup.nodes.TextNode;

        $r1 = r0.<org.jsoup.nodes.TextNode: org.jsoup.nodes.Attributes attributes>;

        if $r1 != null goto label1;

        $r3 = r0.<org.jsoup.nodes.TextNode: java.lang.String text>;

        goto label2;

     label1:
        $r2 = r0.<org.jsoup.nodes.TextNode: org.jsoup.nodes.Attributes attributes>;

        $r3 = virtualinvoke $r2.<org.jsoup.nodes.Attributes: java.lang.String get(java.lang.String)>("text");

     label2:
        return $r3;
    }

    public boolean isBlank()
    {
        java.lang.String $r1;
        org.jsoup.nodes.TextNode r0;
        boolean $z0;

        r0 := @this: org.jsoup.nodes.TextNode;

        $r1 = virtualinvoke r0.<org.jsoup.nodes.TextNode: java.lang.String getWholeText()>();

        $z0 = staticinvoke <org.jsoup.helper.StringUtil: boolean isBlank(java.lang.String)>($r1);

        return $z0;
    }

    public org.jsoup.nodes.TextNode splitText(int)
    {
        org.jsoup.nodes.Node[] $r10;
        org.jsoup.nodes.TextNode r0, $r6;
        int i0, $i1, $i2, $i3;
        java.lang.String $r1, $r2, $r3, $r4, $r5, $r7;
        boolean $z0, $z1;
        org.jsoup.nodes.Node $r8, $r9;

        r0 := @this: org.jsoup.nodes.TextNode;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.jsoup.helper.Validate: void isTrue(boolean,java.lang.String)>($z0, "Split offset must be not be negative");

        $r1 = r0.<org.jsoup.nodes.TextNode: java.lang.String text>;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if i0 >= $i1 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <org.jsoup.helper.Validate: void isTrue(boolean,java.lang.String)>($z1, "Split offset must not be greater than current text length");

        $r2 = virtualinvoke r0.<org.jsoup.nodes.TextNode: java.lang.String getWholeText()>();

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        $r4 = virtualinvoke r0.<org.jsoup.nodes.TextNode: java.lang.String getWholeText()>();

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int)>(i0);

        virtualinvoke r0.<org.jsoup.nodes.TextNode: org.jsoup.nodes.TextNode text(java.lang.String)>($r3);

        $r6 = new org.jsoup.nodes.TextNode;

        $r7 = virtualinvoke r0.<org.jsoup.nodes.TextNode: java.lang.String baseUri()>();

        specialinvoke $r6.<org.jsoup.nodes.TextNode: void <init>(java.lang.String,java.lang.String)>($r5, $r7);

        $r8 = virtualinvoke r0.<org.jsoup.nodes.TextNode: org.jsoup.nodes.Node parent()>();

        if $r8 == null goto label5;

        $r9 = virtualinvoke r0.<org.jsoup.nodes.TextNode: org.jsoup.nodes.Node parent()>();

        $i2 = virtualinvoke r0.<org.jsoup.nodes.TextNode: int siblingIndex()>();

        $i3 = $i2 + 1;

        $r10 = newarray (org.jsoup.nodes.Node)[1];

        $r10[0] = $r6;

        virtualinvoke $r9.<org.jsoup.nodes.Node: void addChildren(int,org.jsoup.nodes.Node[])>($i3, $r10);

     label5:
        return $r6;
    }

    void outerHtmlHead(java.lang.StringBuilder, int, org.jsoup.nodes.Document$OutputSettings)
    {
        org.jsoup.nodes.TextNode r0;
        org.jsoup.nodes.Document$OutputSettings r2;
        org.jsoup.nodes.Element $r8, $r12;
        int $i0, $i1, i2;
        java.lang.String $r1, $r3, r13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        org.jsoup.parser.Tag $r9;
        org.jsoup.nodes.Node $r6, $r7, $r10, $r11;
        java.util.List $r5;
        java.lang.StringBuilder r4;

        r0 := @this: org.jsoup.nodes.TextNode;

        r4 := @parameter0: java.lang.StringBuilder;

        i2 := @parameter1: int;

        r2 := @parameter2: org.jsoup.nodes.Document$OutputSettings;

        $r1 = virtualinvoke r0.<org.jsoup.nodes.TextNode: java.lang.String getWholeText()>();

        $r3 = staticinvoke <org.jsoup.nodes.Entities: java.lang.String escape(java.lang.String,org.jsoup.nodes.Document$OutputSettings)>($r1, r2);

        r13 = $r3;

        $z0 = virtualinvoke r2.<org.jsoup.nodes.Document$OutputSettings: boolean prettyPrint()>();

        if $z0 == 0 goto label1;

        $r10 = virtualinvoke r0.<org.jsoup.nodes.TextNode: org.jsoup.nodes.Node parent()>();

        $z5 = $r10 instanceof org.jsoup.nodes.Element;

        if $z5 == 0 goto label1;

        $r11 = virtualinvoke r0.<org.jsoup.nodes.TextNode: org.jsoup.nodes.Node parent()>();

        $r12 = (org.jsoup.nodes.Element) $r11;

        $z6 = staticinvoke <org.jsoup.nodes.Element: boolean preserveWhitespace(org.jsoup.nodes.Node)>($r12);

        if $z6 != 0 goto label1;

        r13 = staticinvoke <org.jsoup.nodes.TextNode: java.lang.String normaliseWhitespace(java.lang.String)>($r3);

     label1:
        $z7 = virtualinvoke r2.<org.jsoup.nodes.Document$OutputSettings: boolean prettyPrint()>();

        if $z7 == 0 goto label4;

        $i0 = virtualinvoke r0.<org.jsoup.nodes.TextNode: int siblingIndex()>();

        if $i0 != 0 goto label2;

        $r6 = r0.<org.jsoup.nodes.TextNode: org.jsoup.nodes.Node parentNode>;

        $z2 = $r6 instanceof org.jsoup.nodes.Element;

        if $z2 == 0 goto label2;

        $r7 = r0.<org.jsoup.nodes.TextNode: org.jsoup.nodes.Node parentNode>;

        $r8 = (org.jsoup.nodes.Element) $r7;

        $r9 = virtualinvoke $r8.<org.jsoup.nodes.Element: org.jsoup.parser.Tag tag()>();

        $z3 = virtualinvoke $r9.<org.jsoup.parser.Tag: boolean formatAsBlock()>();

        if $z3 == 0 goto label2;

        $z4 = virtualinvoke r0.<org.jsoup.nodes.TextNode: boolean isBlank()>();

        if $z4 == 0 goto label3;

     label2:
        $z8 = virtualinvoke r2.<org.jsoup.nodes.Document$OutputSettings: boolean outline()>();

        if $z8 == 0 goto label4;

        $r5 = virtualinvoke r0.<org.jsoup.nodes.TextNode: java.util.List siblingNodes()>();

        $i1 = interfaceinvoke $r5.<java.util.List: int size()>();

        if $i1 <= 0 goto label4;

        $z1 = virtualinvoke r0.<org.jsoup.nodes.TextNode: boolean isBlank()>();

        if $z1 != 0 goto label4;

     label3:
        virtualinvoke r0.<org.jsoup.nodes.TextNode: void indent(java.lang.StringBuilder,int,org.jsoup.nodes.Document$OutputSettings)>(r4, i2, r2);

     label4:
        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        return;
    }

    void outerHtmlTail(java.lang.StringBuilder, int, org.jsoup.nodes.Document$OutputSettings)
    {
        org.jsoup.nodes.TextNode r0;
        org.jsoup.nodes.Document$OutputSettings r2;
        int i0;
        java.lang.StringBuilder r1;

        r0 := @this: org.jsoup.nodes.TextNode;

        r1 := @parameter0: java.lang.StringBuilder;

        i0 := @parameter1: int;

        r2 := @parameter2: org.jsoup.nodes.Document$OutputSettings;

        return;
    }

    public java.lang.String toString()
    {
        java.lang.String $r1;
        org.jsoup.nodes.TextNode r0;

        r0 := @this: org.jsoup.nodes.TextNode;

        $r1 = virtualinvoke r0.<org.jsoup.nodes.TextNode: java.lang.String outerHtml()>();

        return $r1;
    }

    public static org.jsoup.nodes.TextNode createFromEncoded(java.lang.String, java.lang.String)
    {
        org.jsoup.nodes.TextNode $r2;
        java.lang.String r0, $r1, r3;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r1 = staticinvoke <org.jsoup.nodes.Entities: java.lang.String unescape(java.lang.String)>(r0);

        $r2 = new org.jsoup.nodes.TextNode;

        specialinvoke $r2.<org.jsoup.nodes.TextNode: void <init>(java.lang.String,java.lang.String)>($r1, r3);

        return $r2;
    }

    static java.lang.String normaliseWhitespace(java.lang.String)
    {
        java.lang.String $r0, r1;

        r1 := @parameter0: java.lang.String;

        $r0 = staticinvoke <org.jsoup.helper.StringUtil: java.lang.String normaliseWhitespace(java.lang.String)>(r1);

        return $r0;
    }

    static java.lang.String stripLeadingWhitespace(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>("^\\s+", "");

        return $r1;
    }

    static boolean lastCharIsWhitespace(java.lang.StringBuilder)
    {
        int $i0, $i1, $i2, $i4;
        java.lang.StringBuilder r0;
        char $c3;
        boolean $z0;

        r0 := @parameter0: java.lang.StringBuilder;

        $i0 = virtualinvoke r0.<java.lang.StringBuilder: int length()>();

        if $i0 == 0 goto label1;

        $i1 = virtualinvoke r0.<java.lang.StringBuilder: int length()>();

        $i2 = $i1 - 1;

        $c3 = virtualinvoke r0.<java.lang.StringBuilder: char charAt(int)>($i2);

        $i4 = (int) $c3;

        if $i4 != 32 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void ensureAttributes()
    {
        org.jsoup.nodes.Attributes $r1, $r2, $r4;
        org.jsoup.nodes.TextNode r0;
        java.lang.String $r3;

        r0 := @this: org.jsoup.nodes.TextNode;

        $r1 = r0.<org.jsoup.nodes.TextNode: org.jsoup.nodes.Attributes attributes>;

        if $r1 != null goto label1;

        $r2 = new org.jsoup.nodes.Attributes;

        specialinvoke $r2.<org.jsoup.nodes.Attributes: void <init>()>();

        r0.<org.jsoup.nodes.TextNode: org.jsoup.nodes.Attributes attributes> = $r2;

        $r4 = r0.<org.jsoup.nodes.TextNode: org.jsoup.nodes.Attributes attributes>;

        $r3 = r0.<org.jsoup.nodes.TextNode: java.lang.String text>;

        virtualinvoke $r4.<org.jsoup.nodes.Attributes: void put(java.lang.String,java.lang.String)>("text", $r3);

     label1:
        return;
    }

    public java.lang.String attr(java.lang.String)
    {
        java.lang.String r1, $r2;
        org.jsoup.nodes.TextNode r0;

        r0 := @this: org.jsoup.nodes.TextNode;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.jsoup.nodes.TextNode: void ensureAttributes()>();

        $r2 = specialinvoke r0.<org.jsoup.nodes.Node: java.lang.String attr(java.lang.String)>(r1);

        return $r2;
    }

    public org.jsoup.nodes.Attributes attributes()
    {
        org.jsoup.nodes.Attributes $r1;
        org.jsoup.nodes.TextNode r0;

        r0 := @this: org.jsoup.nodes.TextNode;

        specialinvoke r0.<org.jsoup.nodes.TextNode: void ensureAttributes()>();

        $r1 = specialinvoke r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes()>();

        return $r1;
    }

    public org.jsoup.nodes.Node attr(java.lang.String, java.lang.String)
    {
        org.jsoup.nodes.Node $r3;
        org.jsoup.nodes.TextNode r0;
        java.lang.String r1, r2;

        r0 := @this: org.jsoup.nodes.TextNode;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.jsoup.nodes.TextNode: void ensureAttributes()>();

        $r3 = specialinvoke r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node attr(java.lang.String,java.lang.String)>(r1, r2);

        return $r3;
    }

    public boolean hasAttr(java.lang.String)
    {
        java.lang.String r1;
        org.jsoup.nodes.TextNode r0;
        boolean $z0;

        r0 := @this: org.jsoup.nodes.TextNode;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.jsoup.nodes.TextNode: void ensureAttributes()>();

        $z0 = specialinvoke r0.<org.jsoup.nodes.Node: boolean hasAttr(java.lang.String)>(r1);

        return $z0;
    }

    public org.jsoup.nodes.Node removeAttr(java.lang.String)
    {
        org.jsoup.nodes.Node $r2;
        java.lang.String r1;
        org.jsoup.nodes.TextNode r0;

        r0 := @this: org.jsoup.nodes.TextNode;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.jsoup.nodes.TextNode: void ensureAttributes()>();

        $r2 = specialinvoke r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node removeAttr(java.lang.String)>(r1);

        return $r2;
    }

    public java.lang.String absUrl(java.lang.String)
    {
        java.lang.String r1, $r2;
        org.jsoup.nodes.TextNode r0;

        r0 := @this: org.jsoup.nodes.TextNode;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.jsoup.nodes.TextNode: void ensureAttributes()>();

        $r2 = specialinvoke r0.<org.jsoup.nodes.Node: java.lang.String absUrl(java.lang.String)>(r1);

        return $r2;
    }

    public static void <clinit>()
    {
        <org.jsoup.nodes.TextNode: java.lang.String TEXT_KEY> = "text";

        return;
    }
}
