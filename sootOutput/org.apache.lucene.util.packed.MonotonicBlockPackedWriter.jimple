public final class org.apache.lucene.util.packed.MonotonicBlockPackedWriter extends org.apache.lucene.util.packed.AbstractBlockPackedWriter
{
    static final boolean $assertionsDisabled;

    public void <init>(org.apache.lucene.store.DataOutput, int)
    {
        int i0;
        org.apache.lucene.util.packed.MonotonicBlockPackedWriter r0;
        org.apache.lucene.store.DataOutput r1;

        r0 := @this: org.apache.lucene.util.packed.MonotonicBlockPackedWriter;

        r1 := @parameter0: org.apache.lucene.store.DataOutput;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: void <init>(org.apache.lucene.store.DataOutput,int)>(r1, i0);

        return;
    }

    public void add(long) throws java.io.IOException
    {
        byte $b1;
        int $i2;
        long l0;
        org.apache.lucene.util.packed.MonotonicBlockPackedWriter r0;
        java.lang.AssertionError $r2;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.packed.MonotonicBlockPackedWriter;

        l0 := @parameter0: long;

        $z0 = <org.apache.lucene.util.packed.MonotonicBlockPackedWriter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $b1 = l0 cmp 0L;

        $i2 = (int) $b1;

        if $i2 >= 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        specialinvoke r0.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: void add(long)>(l0);

        return;
    }

    protected void flush() throws java.io.IOException
    {
        byte $b8;
        boolean $z0;
        org.apache.lucene.util.packed.MonotonicBlockPackedWriter r0;
        float $f0, $f1, f2, $f3, $f4, $f5;
        org.apache.lucene.store.DataOutput $r3, $r4, $r5, $r6;
        long $l3, $l4, $l10, $l11, $l12, $l13, $l14, $l15, $l17, l18;
        java.lang.AssertionError $r10;
        long[] $r1, $r2, $r7, $r8, $r9;
        int $i0, $i1, $i2, $i5, $i6, $i7, $i9, $i16, i19, $i20;

        r0 := @this: org.apache.lucene.util.packed.MonotonicBlockPackedWriter;

        $z0 = <org.apache.lucene.util.packed.MonotonicBlockPackedWriter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i16 = r0.<org.apache.lucene.util.packed.MonotonicBlockPackedWriter: int off>;

        if $i16 > 0 goto label1;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label1:
        $r1 = r0.<org.apache.lucene.util.packed.MonotonicBlockPackedWriter: long[] values>;

        $l17 = $r1[0];

        $i0 = r0.<org.apache.lucene.util.packed.MonotonicBlockPackedWriter: int off>;

        if $i0 != 1 goto label2;

        $f5 = 0.0F;

        goto label3;

     label2:
        $r2 = r0.<org.apache.lucene.util.packed.MonotonicBlockPackedWriter: long[] values>;

        $i1 = r0.<org.apache.lucene.util.packed.MonotonicBlockPackedWriter: int off>;

        $i2 = $i1 - 1;

        $l3 = $r2[$i2];

        $l4 = $l3 - $l17;

        $f1 = (float) $l4;

        $i5 = r0.<org.apache.lucene.util.packed.MonotonicBlockPackedWriter: int off>;

        $i6 = $i5 - 1;

        $f0 = (float) $i6;

        $f5 = $f1 / $f0;

     label3:
        f2 = $f5;

        l18 = 0L;

        i19 = 0;

     label4:
        $i20 = r0.<org.apache.lucene.util.packed.MonotonicBlockPackedWriter: int off>;

        if i19 >= $i20 goto label5;

        $r8 = r0.<org.apache.lucene.util.packed.MonotonicBlockPackedWriter: long[] values>;

        $r7 = r0.<org.apache.lucene.util.packed.MonotonicBlockPackedWriter: long[] values>;

        $l10 = $r7[i19];

        $l12 = $l10 - $l17;

        $f3 = (float) i19;

        $f4 = f2 * $f3;

        $l11 = (long) $f4;

        $l13 = $l12 - $l11;

        $l14 = staticinvoke <org.apache.lucene.util.packed.MonotonicBlockPackedWriter: long zigZagEncode(long)>($l13);

        $r8[i19] = $l14;

        $r9 = r0.<org.apache.lucene.util.packed.MonotonicBlockPackedWriter: long[] values>;

        $l15 = $r9[i19];

        l18 = staticinvoke <java.lang.Math: long max(long,long)>(l18, $l15);

        i19 = i19 + 1;

        goto label4;

     label5:
        $r3 = r0.<org.apache.lucene.util.packed.MonotonicBlockPackedWriter: org.apache.lucene.store.DataOutput out>;

        virtualinvoke $r3.<org.apache.lucene.store.DataOutput: void writeVLong(long)>($l17);

        $r4 = r0.<org.apache.lucene.util.packed.MonotonicBlockPackedWriter: org.apache.lucene.store.DataOutput out>;

        $i7 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(f2);

        virtualinvoke $r4.<org.apache.lucene.store.DataOutput: void writeInt(int)>($i7);

        $b8 = l18 cmp 0L;

        if $b8 != 0 goto label6;

        $r6 = r0.<org.apache.lucene.util.packed.MonotonicBlockPackedWriter: org.apache.lucene.store.DataOutput out>;

        virtualinvoke $r6.<org.apache.lucene.store.DataOutput: void writeVInt(int)>(0);

        goto label7;

     label6:
        $i9 = staticinvoke <org.apache.lucene.util.packed.PackedInts: int bitsRequired(long)>(l18);

        $r5 = r0.<org.apache.lucene.util.packed.MonotonicBlockPackedWriter: org.apache.lucene.store.DataOutput out>;

        virtualinvoke $r5.<org.apache.lucene.store.DataOutput: void writeVInt(int)>($i9);

        virtualinvoke r0.<org.apache.lucene.util.packed.MonotonicBlockPackedWriter: void writeValues(int)>($i9);

     label7:
        r0.<org.apache.lucene.util.packed.MonotonicBlockPackedWriter: int off> = 0;

        return;
    }

    public volatile long ord()
    {
        long $l0;
        org.apache.lucene.util.packed.MonotonicBlockPackedWriter r0;

        r0 := @this: org.apache.lucene.util.packed.MonotonicBlockPackedWriter;

        $l0 = specialinvoke r0.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: long ord()>();

        return $l0;
    }

    public volatile void finish() throws java.io.IOException
    {
        org.apache.lucene.util.packed.MonotonicBlockPackedWriter r0;

        r0 := @this: org.apache.lucene.util.packed.MonotonicBlockPackedWriter;

        specialinvoke r0.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: void finish()>();

        return;
    }

    public volatile void reset(org.apache.lucene.store.DataOutput)
    {
        org.apache.lucene.util.packed.MonotonicBlockPackedWriter r0;
        org.apache.lucene.store.DataOutput r1;

        r0 := @this: org.apache.lucene.util.packed.MonotonicBlockPackedWriter;

        r1 := @parameter0: org.apache.lucene.store.DataOutput;

        specialinvoke r0.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: void reset(org.apache.lucene.store.DataOutput)>(r1);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/packed/MonotonicBlockPackedWriter;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.packed.MonotonicBlockPackedWriter: boolean $assertionsDisabled> = $z1;

        return;
    }
}
