public class nu.xom.jaxen.function.RoundFunction extends java.lang.Object implements nu.xom.jaxen.Function
{

    public void <init>()
    {
        nu.xom.jaxen.function.RoundFunction r0;

        r0 := @this: nu.xom.jaxen.function.RoundFunction;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object call(nu.xom.jaxen.Context, java.util.List) throws nu.xom.jaxen.FunctionCallException
    {
        nu.xom.jaxen.FunctionCallException $r1;
        java.lang.Double $r5;
        nu.xom.jaxen.function.RoundFunction r6;
        java.util.List r0;
        int $i0;
        java.lang.Object $r2;
        nu.xom.jaxen.Context r3;
        nu.xom.jaxen.Navigator $r4;

        r6 := @this: nu.xom.jaxen.function.RoundFunction;

        r3 := @parameter0: nu.xom.jaxen.Context;

        r0 := @parameter1: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 != 1 goto label1;

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = virtualinvoke r3.<nu.xom.jaxen.Context: nu.xom.jaxen.Navigator getNavigator()>();

        $r5 = staticinvoke <nu.xom.jaxen.function.RoundFunction: java.lang.Double evaluate(java.lang.Object,nu.xom.jaxen.Navigator)>($r2, $r4);

        return $r5;

     label1:
        $r1 = new nu.xom.jaxen.FunctionCallException;

        specialinvoke $r1.<nu.xom.jaxen.FunctionCallException: void <init>(java.lang.String)>("round() requires one argument.");

        throw $r1;
    }

    public static java.lang.Double evaluate(java.lang.Object, nu.xom.jaxen.Navigator)
    {
        java.lang.Double $r2, $r3;
        long $l0;
        java.lang.Object r0;
        nu.xom.jaxen.Navigator r1;
        boolean $z0, $z1;
        double $d0, $d1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: nu.xom.jaxen.Navigator;

        $r2 = staticinvoke <nu.xom.jaxen.function.NumberFunction: java.lang.Double evaluate(java.lang.Object,nu.xom.jaxen.Navigator)>(r0, r1);

        $z0 = virtualinvoke $r2.<java.lang.Double: boolean isNaN()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke $r2.<java.lang.Double: boolean isInfinite()>();

        if $z1 == 0 goto label2;

     label1:
        return $r2;

     label2:
        $d0 = virtualinvoke $r2.<java.lang.Double: double doubleValue()>();

        $r3 = new java.lang.Double;

        $l0 = staticinvoke <java.lang.Math: long round(double)>($d0);

        $d1 = (double) $l0;

        specialinvoke $r3.<java.lang.Double: void <init>(double)>($d1);

        return $r3;
    }
}
