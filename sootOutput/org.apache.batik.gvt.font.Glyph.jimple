public class org.apache.batik.gvt.font.Glyph extends java.lang.Object
{
    private java.lang.String unicode;
    private java.util.Vector names;
    private java.lang.String orientation;
    private java.lang.String arabicForm;
    private java.lang.String lang;
    private java.awt.geom.Point2D horizOrigin;
    private java.awt.geom.Point2D vertOrigin;
    private float horizAdvX;
    private float vertAdvY;
    private int glyphCode;
    private java.awt.geom.AffineTransform transform;
    private java.awt.geom.Point2D$Float position;
    private org.apache.batik.gvt.font.GVTGlyphMetrics metrics;
    private java.awt.Shape outline;
    private java.awt.geom.Rectangle2D bounds;
    private org.apache.batik.gvt.text.TextPaintInfo tpi;
    private org.apache.batik.gvt.text.TextPaintInfo cacheTPI;
    private java.awt.Shape dShape;
    private org.apache.batik.gvt.GraphicsNode glyphChildrenNode;

    public void <init>(java.lang.String, java.util.List, java.lang.String, java.lang.String, java.lang.String, java.awt.geom.Point2D, java.awt.geom.Point2D, float, float, int, org.apache.batik.gvt.text.TextPaintInfo, java.awt.Shape, org.apache.batik.gvt.GraphicsNode)
    {
        java.awt.geom.Point2D r2, r3;
        java.util.Vector $r4;
        int i0;
        java.lang.String r1, r6, r7, r8;
        org.apache.batik.gvt.font.Glyph r0;
        java.awt.Shape r11;
        org.apache.batik.gvt.GraphicsNode r12;
        java.lang.IllegalArgumentException $r13, $r14, $r15;
        org.apache.batik.gvt.text.TextPaintInfo r10;
        java.util.List r5;
        java.awt.geom.Point2D$Float $r9;
        float f0, f1;

        r0 := @this: org.apache.batik.gvt.font.Glyph;

        r1 := @parameter0: java.lang.String;

        r5 := @parameter1: java.util.List;

        r6 := @parameter2: java.lang.String;

        r7 := @parameter3: java.lang.String;

        r8 := @parameter4: java.lang.String;

        r2 := @parameter5: java.awt.geom.Point2D;

        r3 := @parameter6: java.awt.geom.Point2D;

        f0 := @parameter7: float;

        f1 := @parameter8: float;

        i0 := @parameter9: int;

        r10 := @parameter10: org.apache.batik.gvt.text.TextPaintInfo;

        r11 := @parameter11: java.awt.Shape;

        r12 := @parameter12: org.apache.batik.gvt.GraphicsNode;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r15;

     label1:
        if r2 != null goto label2;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r14;

     label2:
        if r3 != null goto label3;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r13;

     label3:
        r0.<org.apache.batik.gvt.font.Glyph: java.lang.String unicode> = r1;

        $r4 = new java.util.Vector;

        specialinvoke $r4.<java.util.Vector: void <init>(java.util.Collection)>(r5);

        r0.<org.apache.batik.gvt.font.Glyph: java.util.Vector names> = $r4;

        r0.<org.apache.batik.gvt.font.Glyph: java.lang.String orientation> = r6;

        r0.<org.apache.batik.gvt.font.Glyph: java.lang.String arabicForm> = r7;

        r0.<org.apache.batik.gvt.font.Glyph: java.lang.String lang> = r8;

        r0.<org.apache.batik.gvt.font.Glyph: java.awt.geom.Point2D horizOrigin> = r2;

        r0.<org.apache.batik.gvt.font.Glyph: java.awt.geom.Point2D vertOrigin> = r3;

        r0.<org.apache.batik.gvt.font.Glyph: float horizAdvX> = f0;

        r0.<org.apache.batik.gvt.font.Glyph: float vertAdvY> = f1;

        r0.<org.apache.batik.gvt.font.Glyph: int glyphCode> = i0;

        $r9 = new java.awt.geom.Point2D$Float;

        specialinvoke $r9.<java.awt.geom.Point2D$Float: void <init>(float,float)>(0.0F, 0.0F);

        r0.<org.apache.batik.gvt.font.Glyph: java.awt.geom.Point2D$Float position> = $r9;

        r0.<org.apache.batik.gvt.font.Glyph: java.awt.Shape outline> = null;

        r0.<org.apache.batik.gvt.font.Glyph: java.awt.geom.Rectangle2D bounds> = null;

        r0.<org.apache.batik.gvt.font.Glyph: org.apache.batik.gvt.text.TextPaintInfo tpi> = r10;

        r0.<org.apache.batik.gvt.font.Glyph: java.awt.Shape dShape> = r11;

        r0.<org.apache.batik.gvt.font.Glyph: org.apache.batik.gvt.GraphicsNode glyphChildrenNode> = r12;

        return;
    }

    public java.lang.String getUnicode()
    {
        org.apache.batik.gvt.font.Glyph r0;
        java.lang.String $r1;

        r0 := @this: org.apache.batik.gvt.font.Glyph;

        $r1 = r0.<org.apache.batik.gvt.font.Glyph: java.lang.String unicode>;

        return $r1;
    }

    public java.util.Vector getNames()
    {
        org.apache.batik.gvt.font.Glyph r0;
        java.util.Vector $r1;

        r0 := @this: org.apache.batik.gvt.font.Glyph;

        $r1 = r0.<org.apache.batik.gvt.font.Glyph: java.util.Vector names>;

        return $r1;
    }

    public java.lang.String getOrientation()
    {
        org.apache.batik.gvt.font.Glyph r0;
        java.lang.String $r1;

        r0 := @this: org.apache.batik.gvt.font.Glyph;

        $r1 = r0.<org.apache.batik.gvt.font.Glyph: java.lang.String orientation>;

        return $r1;
    }

    public java.lang.String getArabicForm()
    {
        org.apache.batik.gvt.font.Glyph r0;
        java.lang.String $r1;

        r0 := @this: org.apache.batik.gvt.font.Glyph;

        $r1 = r0.<org.apache.batik.gvt.font.Glyph: java.lang.String arabicForm>;

        return $r1;
    }

    public java.lang.String getLang()
    {
        org.apache.batik.gvt.font.Glyph r0;
        java.lang.String $r1;

        r0 := @this: org.apache.batik.gvt.font.Glyph;

        $r1 = r0.<org.apache.batik.gvt.font.Glyph: java.lang.String lang>;

        return $r1;
    }

    public java.awt.geom.Point2D getHorizOrigin()
    {
        org.apache.batik.gvt.font.Glyph r0;
        java.awt.geom.Point2D $r1;

        r0 := @this: org.apache.batik.gvt.font.Glyph;

        $r1 = r0.<org.apache.batik.gvt.font.Glyph: java.awt.geom.Point2D horizOrigin>;

        return $r1;
    }

    public java.awt.geom.Point2D getVertOrigin()
    {
        org.apache.batik.gvt.font.Glyph r0;
        java.awt.geom.Point2D $r1;

        r0 := @this: org.apache.batik.gvt.font.Glyph;

        $r1 = r0.<org.apache.batik.gvt.font.Glyph: java.awt.geom.Point2D vertOrigin>;

        return $r1;
    }

    public float getHorizAdvX()
    {
        org.apache.batik.gvt.font.Glyph r0;
        float $f0;

        r0 := @this: org.apache.batik.gvt.font.Glyph;

        $f0 = r0.<org.apache.batik.gvt.font.Glyph: float horizAdvX>;

        return $f0;
    }

    public float getVertAdvY()
    {
        org.apache.batik.gvt.font.Glyph r0;
        float $f0;

        r0 := @this: org.apache.batik.gvt.font.Glyph;

        $f0 = r0.<org.apache.batik.gvt.font.Glyph: float vertAdvY>;

        return $f0;
    }

    public int getGlyphCode()
    {
        org.apache.batik.gvt.font.Glyph r0;
        int $i0;

        r0 := @this: org.apache.batik.gvt.font.Glyph;

        $i0 = r0.<org.apache.batik.gvt.font.Glyph: int glyphCode>;

        return $i0;
    }

    public java.awt.geom.AffineTransform getTransform()
    {
        org.apache.batik.gvt.font.Glyph r0;
        java.awt.geom.AffineTransform $r1;

        r0 := @this: org.apache.batik.gvt.font.Glyph;

        $r1 = r0.<org.apache.batik.gvt.font.Glyph: java.awt.geom.AffineTransform transform>;

        return $r1;
    }

    public void setTransform(java.awt.geom.AffineTransform)
    {
        org.apache.batik.gvt.font.Glyph r0;
        java.awt.geom.AffineTransform r1;

        r0 := @this: org.apache.batik.gvt.font.Glyph;

        r1 := @parameter0: java.awt.geom.AffineTransform;

        r0.<org.apache.batik.gvt.font.Glyph: java.awt.geom.AffineTransform transform> = r1;

        r0.<org.apache.batik.gvt.font.Glyph: java.awt.Shape outline> = null;

        r0.<org.apache.batik.gvt.font.Glyph: java.awt.geom.Rectangle2D bounds> = null;

        return;
    }

    public java.awt.geom.Point2D getPosition()
    {
        org.apache.batik.gvt.font.Glyph r0;
        java.awt.geom.Point2D$Float $r1;

        r0 := @this: org.apache.batik.gvt.font.Glyph;

        $r1 = r0.<org.apache.batik.gvt.font.Glyph: java.awt.geom.Point2D$Float position>;

        return $r1;
    }

    public void setPosition(java.awt.geom.Point2D)
    {
        org.apache.batik.gvt.font.Glyph r0;
        java.awt.geom.Point2D r1;
        java.awt.geom.Point2D$Float $r2, $r3;
        float $f0, $f1;
        double $d0, $d1;

        r0 := @this: org.apache.batik.gvt.font.Glyph;

        r1 := @parameter0: java.awt.geom.Point2D;

        $r2 = r0.<org.apache.batik.gvt.font.Glyph: java.awt.geom.Point2D$Float position>;

        $d0 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        $f0 = (float) $d0;

        $r2.<java.awt.geom.Point2D$Float: float x> = $f0;

        $r3 = r0.<org.apache.batik.gvt.font.Glyph: java.awt.geom.Point2D$Float position>;

        $d1 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        $f1 = (float) $d1;

        $r3.<java.awt.geom.Point2D$Float: float y> = $f1;

        r0.<org.apache.batik.gvt.font.Glyph: java.awt.Shape outline> = null;

        r0.<org.apache.batik.gvt.font.Glyph: java.awt.geom.Rectangle2D bounds> = null;

        return;
    }

    public org.apache.batik.gvt.font.GVTGlyphMetrics getGlyphMetrics()
    {
        java.awt.geom.Rectangle2D $r3;
        org.apache.batik.gvt.font.GVTGlyphMetrics $r1, $r2, $r4;
        java.awt.geom.Rectangle2D$Double $r5;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        org.apache.batik.gvt.font.Glyph r0;
        java.awt.geom.Point2D$Float $r6, $r7;
        float $f0, $f1;

        r0 := @this: org.apache.batik.gvt.font.Glyph;

        $r1 = r0.<org.apache.batik.gvt.font.Glyph: org.apache.batik.gvt.font.GVTGlyphMetrics metrics>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.apache.batik.gvt.font.Glyph: java.awt.geom.Rectangle2D getGeometryBounds()>();

        $r4 = new org.apache.batik.gvt.font.GVTGlyphMetrics;

        $f0 = virtualinvoke r0.<org.apache.batik.gvt.font.Glyph: float getHorizAdvX()>();

        $f1 = virtualinvoke r0.<org.apache.batik.gvt.font.Glyph: float getVertAdvY()>();

        $r5 = new java.awt.geom.Rectangle2D$Double;

        $d0 = virtualinvoke $r3.<java.awt.geom.RectangularShape: double getX()>();

        $r6 = r0.<org.apache.batik.gvt.font.Glyph: java.awt.geom.Point2D$Float position>;

        $d1 = virtualinvoke $r6.<java.awt.geom.Point2D$Float: double getX()>();

        $d2 = $d0 - $d1;

        $d3 = virtualinvoke $r3.<java.awt.geom.RectangularShape: double getY()>();

        $r7 = r0.<org.apache.batik.gvt.font.Glyph: java.awt.geom.Point2D$Float position>;

        $d4 = virtualinvoke $r7.<java.awt.geom.Point2D$Float: double getY()>();

        $d5 = $d3 - $d4;

        $d6 = virtualinvoke $r3.<java.awt.geom.RectangularShape: double getWidth()>();

        $d7 = virtualinvoke $r3.<java.awt.geom.RectangularShape: double getHeight()>();

        specialinvoke $r5.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($d2, $d5, $d6, $d7);

        specialinvoke $r4.<org.apache.batik.gvt.font.GVTGlyphMetrics: void <init>(float,float,java.awt.geom.Rectangle2D,byte)>($f0, $f1, $r5, 3);

        r0.<org.apache.batik.gvt.font.Glyph: org.apache.batik.gvt.font.GVTGlyphMetrics metrics> = $r4;

     label1:
        $r2 = r0.<org.apache.batik.gvt.font.Glyph: org.apache.batik.gvt.font.GVTGlyphMetrics metrics>;

        return $r2;
    }

    public org.apache.batik.gvt.font.GVTGlyphMetrics getGlyphMetrics(float, float)
    {
        org.apache.batik.gvt.font.Glyph r1;
        java.awt.geom.Rectangle2D $r2;
        org.apache.batik.gvt.font.GVTGlyphMetrics $r0;
        float $f0, f1, $f2, $f3, f4, $f5;

        r1 := @this: org.apache.batik.gvt.font.Glyph;

        f1 := @parameter0: float;

        f4 := @parameter1: float;

        $r0 = new org.apache.batik.gvt.font.GVTGlyphMetrics;

        $f0 = virtualinvoke r1.<org.apache.batik.gvt.font.Glyph: float getHorizAdvX()>();

        $f2 = $f0 - f1;

        $f3 = virtualinvoke r1.<org.apache.batik.gvt.font.Glyph: float getVertAdvY()>();

        $f5 = $f3 - f4;

        $r2 = virtualinvoke r1.<org.apache.batik.gvt.font.Glyph: java.awt.geom.Rectangle2D getGeometryBounds()>();

        specialinvoke $r0.<org.apache.batik.gvt.font.GVTGlyphMetrics: void <init>(float,float,java.awt.geom.Rectangle2D,byte)>($f2, $f5, $r2, 3);

        return $r0;
    }

    public java.awt.geom.Rectangle2D getGeometryBounds()
    {
        org.apache.batik.gvt.font.Glyph r0;
        java.awt.Shape $r1;
        java.awt.geom.Rectangle2D $r2;

        r0 := @this: org.apache.batik.gvt.font.Glyph;

        $r1 = virtualinvoke r0.<org.apache.batik.gvt.font.Glyph: java.awt.Shape getOutline()>();

        $r2 = interfaceinvoke $r1.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        return $r2;
    }

    public java.awt.geom.Rectangle2D getBounds2D()
    {
        java.awt.geom.Rectangle2D $r1, $r13, $r26, $r32, r33;
        java.awt.geom.Rectangle2D$Double $r9;
        boolean $z0;
        java.awt.Shape $r6, $r22, $r24, $r25, $r27, $r28;
        org.apache.batik.gvt.GraphicsNode $r12, $r34;
        java.awt.geom.AffineTransform $r4, $r5, $r29;
        java.awt.Paint $r16, $r20;
        double $d0, $d1, $d2, $d3;
        org.apache.batik.gvt.font.Glyph r0;
        java.awt.Stroke $r18, $r23;
        org.apache.batik.gvt.text.TextPaintInfo $r7, $r8, $r14, $r15, $r17, $r19, $r21, $r30, $r31;
        java.awt.geom.Point2D$Float $r2, $r3, $r10, $r11;

        r0 := @this: org.apache.batik.gvt.font.Glyph;

        $r1 = r0.<org.apache.batik.gvt.font.Glyph: java.awt.geom.Rectangle2D bounds>;

        if $r1 == null goto label1;

        $r31 = r0.<org.apache.batik.gvt.font.Glyph: org.apache.batik.gvt.text.TextPaintInfo tpi>;

        $r30 = r0.<org.apache.batik.gvt.font.Glyph: org.apache.batik.gvt.text.TextPaintInfo cacheTPI>;

        $z0 = staticinvoke <org.apache.batik.gvt.text.TextPaintInfo: boolean equivilent(org.apache.batik.gvt.text.TextPaintInfo,org.apache.batik.gvt.text.TextPaintInfo)>($r31, $r30);

        if $z0 == 0 goto label1;

        $r32 = r0.<org.apache.batik.gvt.font.Glyph: java.awt.geom.Rectangle2D bounds>;

        return $r32;

     label1:
        $r2 = r0.<org.apache.batik.gvt.font.Glyph: java.awt.geom.Point2D$Float position>;

        $d0 = virtualinvoke $r2.<java.awt.geom.Point2D$Float: double getX()>();

        $r3 = r0.<org.apache.batik.gvt.font.Glyph: java.awt.geom.Point2D$Float position>;

        $d1 = virtualinvoke $r3.<java.awt.geom.Point2D$Float: double getY()>();

        $r4 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getTranslateInstance(double,double)>($d0, $d1);

        $r5 = r0.<org.apache.batik.gvt.font.Glyph: java.awt.geom.AffineTransform transform>;

        if $r5 == null goto label2;

        $r29 = r0.<org.apache.batik.gvt.font.Glyph: java.awt.geom.AffineTransform transform>;

        virtualinvoke $r4.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r29);

     label2:
        r33 = null;

        $r6 = r0.<org.apache.batik.gvt.font.Glyph: java.awt.Shape dShape>;

        if $r6 == null goto label5;

        $r14 = r0.<org.apache.batik.gvt.font.Glyph: org.apache.batik.gvt.text.TextPaintInfo tpi>;

        if $r14 == null goto label5;

        $r15 = r0.<org.apache.batik.gvt.font.Glyph: org.apache.batik.gvt.text.TextPaintInfo tpi>;

        $r16 = $r15.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint fillPaint>;

        if $r16 == null goto label3;

        $r27 = r0.<org.apache.batik.gvt.font.Glyph: java.awt.Shape dShape>;

        $r28 = virtualinvoke $r4.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r27);

        r33 = interfaceinvoke $r28.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

     label3:
        $r17 = r0.<org.apache.batik.gvt.font.Glyph: org.apache.batik.gvt.text.TextPaintInfo tpi>;

        $r18 = $r17.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Stroke strokeStroke>;

        if $r18 == null goto label5;

        $r19 = r0.<org.apache.batik.gvt.font.Glyph: org.apache.batik.gvt.text.TextPaintInfo tpi>;

        $r20 = $r19.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint strokePaint>;

        if $r20 == null goto label5;

        $r21 = r0.<org.apache.batik.gvt.font.Glyph: org.apache.batik.gvt.text.TextPaintInfo tpi>;

        $r23 = $r21.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Stroke strokeStroke>;

        $r22 = r0.<org.apache.batik.gvt.font.Glyph: java.awt.Shape dShape>;

        $r24 = interfaceinvoke $r23.<java.awt.Stroke: java.awt.Shape createStrokedShape(java.awt.Shape)>($r22);

        $r25 = virtualinvoke $r4.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r24);

        $r26 = interfaceinvoke $r25.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        if r33 != null goto label4;

        r33 = $r26;

        goto label5;

     label4:
        virtualinvoke r33.<java.awt.geom.Rectangle2D: void add(java.awt.geom.Rectangle2D)>($r26);

     label5:
        $r34 = r0.<org.apache.batik.gvt.font.Glyph: org.apache.batik.gvt.GraphicsNode glyphChildrenNode>;

        if $r34 == null goto label7;

        $r12 = r0.<org.apache.batik.gvt.font.Glyph: org.apache.batik.gvt.GraphicsNode glyphChildrenNode>;

        $r13 = interfaceinvoke $r12.<org.apache.batik.gvt.GraphicsNode: java.awt.geom.Rectangle2D getTransformedBounds(java.awt.geom.AffineTransform)>($r4);

        if r33 != null goto label6;

        r33 = $r13;

        goto label7;

     label6:
        virtualinvoke r33.<java.awt.geom.Rectangle2D: void add(java.awt.geom.Rectangle2D)>($r13);

     label7:
        if r33 != null goto label8;

        $r9 = new java.awt.geom.Rectangle2D$Double;

        $r10 = r0.<org.apache.batik.gvt.font.Glyph: java.awt.geom.Point2D$Float position>;

        $d2 = virtualinvoke $r10.<java.awt.geom.Point2D$Float: double getX()>();

        $r11 = r0.<org.apache.batik.gvt.font.Glyph: java.awt.geom.Point2D$Float position>;

        $d3 = virtualinvoke $r11.<java.awt.geom.Point2D$Float: double getY()>();

        specialinvoke $r9.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($d2, $d3, 0.0, 0.0);

        r33 = $r9;

     label8:
        $r7 = new org.apache.batik.gvt.text.TextPaintInfo;

        $r8 = r0.<org.apache.batik.gvt.font.Glyph: org.apache.batik.gvt.text.TextPaintInfo tpi>;

        specialinvoke $r7.<org.apache.batik.gvt.text.TextPaintInfo: void <init>(org.apache.batik.gvt.text.TextPaintInfo)>($r8);

        r0.<org.apache.batik.gvt.font.Glyph: org.apache.batik.gvt.text.TextPaintInfo cacheTPI> = $r7;

        return r33;
    }

    public java.awt.Shape getOutline()
    {
        double $d0, $d1;
        org.apache.batik.gvt.font.Glyph r0;
        java.awt.Shape $r1, $r7, $r8, $r9, $r13, $r15, r18, $r20, $r21;
        org.apache.batik.gvt.GraphicsNode $r6, $r16;
        java.awt.geom.AffineTransform $r4, $r5, $r17;
        java.awt.geom.Point2D$Float $r2, $r3;
        java.awt.geom.GeneralPath $r10, $r11, $r12, $r14, r19;

        r0 := @this: org.apache.batik.gvt.font.Glyph;

        $r1 = r0.<org.apache.batik.gvt.font.Glyph: java.awt.Shape outline>;

        if $r1 != null goto label7;

        $r2 = r0.<org.apache.batik.gvt.font.Glyph: java.awt.geom.Point2D$Float position>;

        $d0 = virtualinvoke $r2.<java.awt.geom.Point2D$Float: double getX()>();

        $r3 = r0.<org.apache.batik.gvt.font.Glyph: java.awt.geom.Point2D$Float position>;

        $d1 = virtualinvoke $r3.<java.awt.geom.Point2D$Float: double getY()>();

        $r4 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getTranslateInstance(double,double)>($d0, $d1);

        $r5 = r0.<org.apache.batik.gvt.font.Glyph: java.awt.geom.AffineTransform transform>;

        if $r5 == null goto label1;

        $r17 = r0.<org.apache.batik.gvt.font.Glyph: java.awt.geom.AffineTransform transform>;

        virtualinvoke $r4.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r17);

     label1:
        r18 = null;

        $r6 = r0.<org.apache.batik.gvt.font.Glyph: org.apache.batik.gvt.GraphicsNode glyphChildrenNode>;

        if $r6 == null goto label2;

        $r16 = r0.<org.apache.batik.gvt.font.Glyph: org.apache.batik.gvt.GraphicsNode glyphChildrenNode>;

        r18 = interfaceinvoke $r16.<org.apache.batik.gvt.GraphicsNode: java.awt.Shape getOutline()>();

     label2:
        $r7 = r0.<org.apache.batik.gvt.font.Glyph: java.awt.Shape dShape>;

        if $r7 == null goto label3;

        if r18 == null goto label3;

        $r14 = new java.awt.geom.GeneralPath;

        $r15 = r0.<org.apache.batik.gvt.font.Glyph: java.awt.Shape dShape>;

        specialinvoke $r14.<java.awt.geom.GeneralPath: void <init>(java.awt.Shape)>($r15);

        r19 = $r14;

        virtualinvoke $r14.<java.awt.geom.GeneralPath: void append(java.awt.Shape,boolean)>(r18, 0);

        goto label6;

     label3:
        $r8 = r0.<org.apache.batik.gvt.font.Glyph: java.awt.Shape dShape>;

        if $r8 == null goto label4;

        if r18 != null goto label4;

        $r12 = new java.awt.geom.GeneralPath;

        $r13 = r0.<org.apache.batik.gvt.font.Glyph: java.awt.Shape dShape>;

        specialinvoke $r12.<java.awt.geom.GeneralPath: void <init>(java.awt.Shape)>($r13);

        r19 = $r12;

        goto label6;

     label4:
        $r9 = r0.<org.apache.batik.gvt.font.Glyph: java.awt.Shape dShape>;

        if $r9 != null goto label5;

        if r18 == null goto label5;

        $r11 = new java.awt.geom.GeneralPath;

        specialinvoke $r11.<java.awt.geom.GeneralPath: void <init>(java.awt.Shape)>(r18);

        r19 = $r11;

        goto label6;

     label5:
        $r10 = new java.awt.geom.GeneralPath;

        specialinvoke $r10.<java.awt.geom.GeneralPath: void <init>()>();

        r19 = $r10;

     label6:
        $r20 = virtualinvoke $r4.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>(r19);

        r0.<org.apache.batik.gvt.font.Glyph: java.awt.Shape outline> = $r20;

     label7:
        $r21 = r0.<org.apache.batik.gvt.font.Glyph: java.awt.Shape outline>;

        return $r21;
    }

    public void draw(java.awt.Graphics2D)
    {
        java.awt.Graphics2D r7;
        double $d0, $d1;
        org.apache.batik.gvt.font.Glyph r0;
        java.awt.Shape $r5, $r10, $r11;
        java.awt.Stroke $r15, $r19;
        org.apache.batik.gvt.GraphicsNode $r6, $r8, $r25;
        java.awt.geom.AffineTransform $r3, $r4, $r24;
        org.apache.batik.gvt.text.TextPaintInfo $r9, $r12, $r14, $r16, $r18, $r20, $r22;
        java.awt.geom.Point2D$Float $r1, $r2;
        java.awt.Paint $r13, $r17, $r21, $r23;

        r0 := @this: org.apache.batik.gvt.font.Glyph;

        r7 := @parameter0: java.awt.Graphics2D;

        $r1 = r0.<org.apache.batik.gvt.font.Glyph: java.awt.geom.Point2D$Float position>;

        $d0 = virtualinvoke $r1.<java.awt.geom.Point2D$Float: double getX()>();

        $r2 = r0.<org.apache.batik.gvt.font.Glyph: java.awt.geom.Point2D$Float position>;

        $d1 = virtualinvoke $r2.<java.awt.geom.Point2D$Float: double getY()>();

        $r3 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getTranslateInstance(double,double)>($d0, $d1);

        $r4 = r0.<org.apache.batik.gvt.font.Glyph: java.awt.geom.AffineTransform transform>;

        if $r4 == null goto label1;

        $r24 = r0.<org.apache.batik.gvt.font.Glyph: java.awt.geom.AffineTransform transform>;

        virtualinvoke $r3.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r24);

     label1:
        $r5 = r0.<org.apache.batik.gvt.font.Glyph: java.awt.Shape dShape>;

        if $r5 == null goto label3;

        $r9 = r0.<org.apache.batik.gvt.font.Glyph: org.apache.batik.gvt.text.TextPaintInfo tpi>;

        if $r9 == null goto label3;

        $r10 = r0.<org.apache.batik.gvt.font.Glyph: java.awt.Shape dShape>;

        $r11 = virtualinvoke $r3.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r10);

        $r12 = r0.<org.apache.batik.gvt.font.Glyph: org.apache.batik.gvt.text.TextPaintInfo tpi>;

        $r13 = $r12.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint fillPaint>;

        if $r13 == null goto label2;

        $r22 = r0.<org.apache.batik.gvt.font.Glyph: org.apache.batik.gvt.text.TextPaintInfo tpi>;

        $r23 = $r22.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint fillPaint>;

        virtualinvoke r7.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($r23);

        virtualinvoke r7.<java.awt.Graphics2D: void fill(java.awt.Shape)>($r11);

     label2:
        $r14 = r0.<org.apache.batik.gvt.font.Glyph: org.apache.batik.gvt.text.TextPaintInfo tpi>;

        $r15 = $r14.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Stroke strokeStroke>;

        if $r15 == null goto label3;

        $r16 = r0.<org.apache.batik.gvt.font.Glyph: org.apache.batik.gvt.text.TextPaintInfo tpi>;

        $r17 = $r16.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint strokePaint>;

        if $r17 == null goto label3;

        $r18 = r0.<org.apache.batik.gvt.font.Glyph: org.apache.batik.gvt.text.TextPaintInfo tpi>;

        $r19 = $r18.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Stroke strokeStroke>;

        virtualinvoke r7.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($r19);

        $r20 = r0.<org.apache.batik.gvt.font.Glyph: org.apache.batik.gvt.text.TextPaintInfo tpi>;

        $r21 = $r20.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint strokePaint>;

        virtualinvoke r7.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($r21);

        virtualinvoke r7.<java.awt.Graphics2D: void draw(java.awt.Shape)>($r11);

     label3:
        $r25 = r0.<org.apache.batik.gvt.font.Glyph: org.apache.batik.gvt.GraphicsNode glyphChildrenNode>;

        if $r25 == null goto label4;

        $r6 = r0.<org.apache.batik.gvt.font.Glyph: org.apache.batik.gvt.GraphicsNode glyphChildrenNode>;

        interfaceinvoke $r6.<org.apache.batik.gvt.GraphicsNode: void setTransform(java.awt.geom.AffineTransform)>($r3);

        $r8 = r0.<org.apache.batik.gvt.font.Glyph: org.apache.batik.gvt.GraphicsNode glyphChildrenNode>;

        interfaceinvoke $r8.<org.apache.batik.gvt.GraphicsNode: void paint(java.awt.Graphics2D)>(r7);

     label4:
        return;
    }
}
