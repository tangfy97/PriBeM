public class org.waveprotocol.wave.media.model.AttachmentDataDocHelper extends java.lang.Object
{

    private void <init>()
    {
        org.waveprotocol.wave.media.model.AttachmentDataDocHelper r0;

        r0 := @this: org.waveprotocol.wave.media.model.AttachmentDataDocHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String dataDocIdFromAttachmentId(java.lang.String)
    {
        java.lang.String[] $r0;
        java.lang.String r1, $r2;

        r1 := @parameter0: java.lang.String;

        $r0 = newarray (java.lang.String)[2];

        $r0[0] = "attach";

        $r0[1] = r1;

        $r2 = staticinvoke <org.waveprotocol.wave.model.id.IdUtil: java.lang.String join(java.lang.String[])>($r0);

        return $r2;
    }

    public static org.waveprotocol.wave.model.document.ObservableDocument getAttachmentDataDoc(org.waveprotocol.wave.model.wave.Wavelet, java.lang.String) throws org.waveprotocol.wave.model.id.InvalidIdException
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Set $r2;
        org.waveprotocol.wave.common.logging.LoggerBundle $r13;
        org.waveprotocol.wave.media.model.AttachmentId $r4, $r20;
        java.lang.StringBuilder $r15, $r16, $r17;
        org.waveprotocol.wave.common.logging.Logger $r14;
        java.lang.String[] $r12;
        int $i0;
        java.lang.String r0, $r3, $r5, $r6, $r8, r11, $r18, $r19, $r21, $r22;
        org.waveprotocol.wave.model.document.ObservableDocument $r9, $r23, $r24, $r25;
        java.util.Iterator $r7;
        org.waveprotocol.wave.model.wave.Wavelet r1;
        java.lang.Object $r10;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.Wavelet;

        r0 := @parameter1: java.lang.String;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "attachmentIdString must not be null");

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("attach");

        if $z0 == 0 goto label1;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void illegalArgument(java.lang.Object)>("attachmentIdString must not start with attach");

     label1:
        $r2 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.Wavelet: java.util.Set getDocumentIds()>();

        $r3 = staticinvoke <org.waveprotocol.wave.media.model.AttachmentDataDocHelper: java.lang.String dataDocIdFromAttachmentId(java.lang.String)>(r0);

        $z1 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r3);

        if $z1 == 0 goto label2;

        $r25 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.Wavelet: org.waveprotocol.wave.model.document.ObservableDocument getDocument(java.lang.String)>($r3);

        return $r25;

     label2:
        $r4 = staticinvoke <org.waveprotocol.wave.media.model.AttachmentId: org.waveprotocol.wave.media.model.AttachmentId deserialise(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.media.model.AttachmentId: java.lang.String getId()>();

        $r6 = staticinvoke <org.waveprotocol.wave.media.model.AttachmentDataDocHelper: java.lang.String dataDocIdFromAttachmentId(java.lang.String)>($r5);

        $z2 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r6);

        if $z2 == 0 goto label3;

        $r24 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.Wavelet: org.waveprotocol.wave.model.document.ObservableDocument getDocument(java.lang.String)>($r6);

        return $r24;

     label3:
        $r7 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z3 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label8;

        $r10 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r11 = (java.lang.String) $r10;

        $z4 = staticinvoke <org.waveprotocol.wave.model.id.IdUtil: boolean isAttachmentDataDocument(java.lang.String)>(r11);

        if $z4 == 0 goto label7;

        $r12 = staticinvoke <org.waveprotocol.wave.model.id.IdUtil: java.lang.String[] split(java.lang.String)>(r11);

        if $r12 == null goto label6;

        $i0 = lengthof $r12;

        if $i0 != 2 goto label6;

        $r19 = $r12[1];

        $r20 = staticinvoke <org.waveprotocol.wave.media.model.AttachmentId: org.waveprotocol.wave.media.model.AttachmentId deserialise(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<org.waveprotocol.wave.media.model.AttachmentId: java.lang.String getId()>();

        $r22 = virtualinvoke $r4.<org.waveprotocol.wave.media.model.AttachmentId: java.lang.String getId()>();

        $z5 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>($r22);

        if $z5 == 0 goto label5;

        $r23 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.Wavelet: org.waveprotocol.wave.model.document.ObservableDocument getDocument(java.lang.String)>(r11);

        return $r23;

     label5:
        goto label7;

     label6:
        $r13 = <org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.LoggerBundle NOP_IMPL>;

        $r14 = interfaceinvoke $r13.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AttachmentDataDocHelper: Can\'t parse theattachment data doc id - ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r14.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>($r18);

     label7:
        goto label4;

     label8:
        $r8 = staticinvoke <org.waveprotocol.wave.media.model.AttachmentDataDocHelper: java.lang.String dataDocIdFromAttachmentId(java.lang.String)>(r0);

        $r9 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.Wavelet: org.waveprotocol.wave.model.document.ObservableDocument getDocument(java.lang.String)>($r8);

        return $r9;
    }
}
