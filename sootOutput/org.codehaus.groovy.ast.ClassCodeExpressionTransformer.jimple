public abstract class org.codehaus.groovy.ast.ClassCodeExpressionTransformer extends org.codehaus.groovy.ast.ClassCodeVisitorSupport implements org.codehaus.groovy.ast.expr.ExpressionTransformer
{

    public void <init>()
    {
        org.codehaus.groovy.ast.ClassCodeExpressionTransformer r0;

        r0 := @this: org.codehaus.groovy.ast.ClassCodeExpressionTransformer;

        specialinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void <init>()>();

        return;
    }

    protected void visitConstructorOrMethod(org.codehaus.groovy.ast.MethodNode, boolean)
    {
        org.codehaus.groovy.ast.Parameter r3;
        org.codehaus.groovy.ast.ClassCodeExpressionTransformer r2;
        org.codehaus.groovy.ast.Parameter[] $r1;
        org.codehaus.groovy.ast.MethodNode r0;
        int $i0, i1;
        org.codehaus.groovy.ast.expr.Expression $r4, $r5;
        boolean z0, $z1;

        r2 := @this: org.codehaus.groovy.ast.ClassCodeExpressionTransformer;

        r0 := @parameter0: org.codehaus.groovy.ast.MethodNode;

        z0 := @parameter1: boolean;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.Parameter[] getParameters()>();

        i1 = 0;

     label1:
        $i0 = lengthof $r1;

        if i1 >= $i0 goto label3;

        r3 = $r1[i1];

        $z1 = virtualinvoke r3.<org.codehaus.groovy.ast.Parameter: boolean hasInitialExpression()>();

        if $z1 == 0 goto label2;

        $r4 = virtualinvoke r3.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.expr.Expression getInitialExpression()>();

        $r5 = virtualinvoke r2.<org.codehaus.groovy.ast.ClassCodeExpressionTransformer: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r4);

        virtualinvoke r3.<org.codehaus.groovy.ast.Parameter: void setInitialExpression(org.codehaus.groovy.ast.expr.Expression)>($r5);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        specialinvoke r2.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitConstructorOrMethod(org.codehaus.groovy.ast.MethodNode,boolean)>(r0, z0);

        return;
    }

    public void visitSwitch(org.codehaus.groovy.ast.stmt.SwitchStatement)
    {
        org.codehaus.groovy.ast.stmt.Statement $r6;
        java.util.Iterator $r5;
        org.codehaus.groovy.ast.ClassCodeExpressionTransformer r2;
        org.codehaus.groovy.ast.stmt.SwitchStatement r0;
        java.util.List $r4;
        org.codehaus.groovy.ast.stmt.CaseStatement r8;
        java.lang.Object $r7;
        org.codehaus.groovy.ast.expr.Expression $r1, $r3;
        boolean $z0;

        r2 := @this: org.codehaus.groovy.ast.ClassCodeExpressionTransformer;

        r0 := @parameter0: org.codehaus.groovy.ast.stmt.SwitchStatement;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.stmt.SwitchStatement: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        $r3 = virtualinvoke r2.<org.codehaus.groovy.ast.ClassCodeExpressionTransformer: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r1);

        virtualinvoke r0.<org.codehaus.groovy.ast.stmt.SwitchStatement: void setExpression(org.codehaus.groovy.ast.expr.Expression)>($r3);

        $r4 = virtualinvoke r0.<org.codehaus.groovy.ast.stmt.SwitchStatement: java.util.List getCaseStatements()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.codehaus.groovy.ast.stmt.CaseStatement) $r7;

        virtualinvoke r8.<org.codehaus.groovy.ast.stmt.CaseStatement: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        goto label1;

     label2:
        $r6 = virtualinvoke r0.<org.codehaus.groovy.ast.stmt.SwitchStatement: org.codehaus.groovy.ast.stmt.Statement getDefaultStatement()>();

        virtualinvoke $r6.<org.codehaus.groovy.ast.stmt.Statement: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        return;
    }

    public void visitField(org.codehaus.groovy.ast.FieldNode)
    {
        org.codehaus.groovy.ast.FieldNode r1;
        org.codehaus.groovy.ast.expr.Expression $r2, $r3;
        org.codehaus.groovy.ast.ClassCodeExpressionTransformer r0;

        r0 := @this: org.codehaus.groovy.ast.ClassCodeExpressionTransformer;

        r1 := @parameter0: org.codehaus.groovy.ast.FieldNode;

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassCodeExpressionTransformer: void visitAnnotations(org.codehaus.groovy.ast.AnnotatedNode)>(r1);

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.FieldNode: org.codehaus.groovy.ast.expr.Expression getInitialExpression()>();

        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassCodeExpressionTransformer: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r2);

        virtualinvoke r1.<org.codehaus.groovy.ast.FieldNode: void setInitialValueExpression(org.codehaus.groovy.ast.expr.Expression)>($r3);

        return;
    }

    public void visitProperty(org.codehaus.groovy.ast.PropertyNode)
    {
        org.codehaus.groovy.ast.stmt.Statement $r2, $r3;
        org.codehaus.groovy.ast.PropertyNode r1;
        org.codehaus.groovy.ast.ClassCodeExpressionTransformer r0;

        r0 := @this: org.codehaus.groovy.ast.ClassCodeExpressionTransformer;

        r1 := @parameter0: org.codehaus.groovy.ast.PropertyNode;

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassCodeExpressionTransformer: void visitAnnotations(org.codehaus.groovy.ast.AnnotatedNode)>(r1);

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.PropertyNode: org.codehaus.groovy.ast.stmt.Statement getGetterBlock()>();

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassCodeExpressionTransformer: void visitClassCodeContainer(org.codehaus.groovy.ast.stmt.Statement)>($r2);

        $r3 = virtualinvoke r1.<org.codehaus.groovy.ast.PropertyNode: org.codehaus.groovy.ast.stmt.Statement getSetterBlock()>();

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassCodeExpressionTransformer: void visitClassCodeContainer(org.codehaus.groovy.ast.stmt.Statement)>($r3);

        return;
    }

    public void visitIfElse(org.codehaus.groovy.ast.stmt.IfStatement)
    {
        org.codehaus.groovy.ast.stmt.Statement $r6, $r7;
        org.codehaus.groovy.ast.expr.BooleanExpression $r2, $r4, $r5;
        org.codehaus.groovy.ast.ClassCodeExpressionTransformer r1;
        org.codehaus.groovy.ast.stmt.IfStatement r0;
        org.codehaus.groovy.ast.expr.Expression $r3;

        r1 := @this: org.codehaus.groovy.ast.ClassCodeExpressionTransformer;

        r0 := @parameter0: org.codehaus.groovy.ast.stmt.IfStatement;

        $r2 = virtualinvoke r0.<org.codehaus.groovy.ast.stmt.IfStatement: org.codehaus.groovy.ast.expr.BooleanExpression getBooleanExpression()>();

        $r3 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassCodeExpressionTransformer: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r2);

        $r4 = (org.codehaus.groovy.ast.expr.BooleanExpression) $r3;

        $r5 = (org.codehaus.groovy.ast.expr.BooleanExpression) $r4;

        virtualinvoke r0.<org.codehaus.groovy.ast.stmt.IfStatement: void setBooleanExpression(org.codehaus.groovy.ast.expr.BooleanExpression)>($r5);

        $r6 = virtualinvoke r0.<org.codehaus.groovy.ast.stmt.IfStatement: org.codehaus.groovy.ast.stmt.Statement getIfBlock()>();

        virtualinvoke $r6.<org.codehaus.groovy.ast.stmt.Statement: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r1);

        $r7 = virtualinvoke r0.<org.codehaus.groovy.ast.stmt.IfStatement: org.codehaus.groovy.ast.stmt.Statement getElseBlock()>();

        virtualinvoke $r7.<org.codehaus.groovy.ast.stmt.Statement: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r1);

        return;
    }

    public org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.ast.expr.Expression r0, $r2;
        org.codehaus.groovy.ast.ClassCodeExpressionTransformer r1;

        r1 := @this: org.codehaus.groovy.ast.ClassCodeExpressionTransformer;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.Expression: org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)>(r1);

        return $r2;
    }

    public void visitAnnotations(org.codehaus.groovy.ast.AnnotatedNode)
    {
        org.codehaus.groovy.ast.AnnotationNode r5;
        org.codehaus.groovy.ast.AnnotatedNode r0;
        org.codehaus.groovy.ast.ClassCodeExpressionTransformer r13;
        java.util.Map $r1, $r6;
        org.codehaus.groovy.ast.expr.Expression r12, $r14;
        boolean $z0, $z1, $z2, $z3;
        java.util.Map$Entry r10;
        java.util.Iterator $r3, $r8;
        java.util.Collection $r2;
        java.util.Set $r7;
        java.lang.Object $r4, $r9, $r11;

        r13 := @this: org.codehaus.groovy.ast.ClassCodeExpressionTransformer;

        r0 := @parameter0: org.codehaus.groovy.ast.AnnotatedNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.AnnotatedNode: java.util.Map getAnnotations()>();

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z3 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label6;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.codehaus.groovy.ast.AnnotationNode) $r4;

        $z1 = virtualinvoke r5.<org.codehaus.groovy.ast.AnnotationNode: boolean isBuiltIn()>();

        if $z1 == 0 goto label3;

        goto label2;

     label3:
        $r6 = virtualinvoke r5.<org.codehaus.groovy.ast.AnnotationNode: java.util.Map getMembers()>();

        $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Set entrySet()>();

        $r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z2 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.util.Map$Entry) $r9;

        $r11 = interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object getValue()>();

        r12 = (org.codehaus.groovy.ast.expr.Expression) $r11;

        $r14 = virtualinvoke r13.<org.codehaus.groovy.ast.ClassCodeExpressionTransformer: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>(r12);

        interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>($r14);

        goto label4;

     label5:
        goto label2;

     label6:
        return;
    }

    public void visitReturnStatement(org.codehaus.groovy.ast.stmt.ReturnStatement)
    {
        org.codehaus.groovy.ast.stmt.ReturnStatement r0;
        org.codehaus.groovy.ast.expr.Expression $r2, $r3;
        org.codehaus.groovy.ast.ClassCodeExpressionTransformer r1;

        r1 := @this: org.codehaus.groovy.ast.ClassCodeExpressionTransformer;

        r0 := @parameter0: org.codehaus.groovy.ast.stmt.ReturnStatement;

        $r2 = virtualinvoke r0.<org.codehaus.groovy.ast.stmt.ReturnStatement: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        $r3 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassCodeExpressionTransformer: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r2);

        virtualinvoke r0.<org.codehaus.groovy.ast.stmt.ReturnStatement: void setExpression(org.codehaus.groovy.ast.expr.Expression)>($r3);

        return;
    }

    public void visitAssertStatement(org.codehaus.groovy.ast.stmt.AssertStatement)
    {
        org.codehaus.groovy.ast.expr.BooleanExpression $r2, $r4, $r5;
        org.codehaus.groovy.ast.ClassCodeExpressionTransformer r1;
        org.codehaus.groovy.ast.stmt.AssertStatement r0;
        org.codehaus.groovy.ast.expr.Expression $r3, $r6, $r7;

        r1 := @this: org.codehaus.groovy.ast.ClassCodeExpressionTransformer;

        r0 := @parameter0: org.codehaus.groovy.ast.stmt.AssertStatement;

        $r2 = virtualinvoke r0.<org.codehaus.groovy.ast.stmt.AssertStatement: org.codehaus.groovy.ast.expr.BooleanExpression getBooleanExpression()>();

        $r3 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassCodeExpressionTransformer: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r2);

        $r4 = (org.codehaus.groovy.ast.expr.BooleanExpression) $r3;

        $r5 = (org.codehaus.groovy.ast.expr.BooleanExpression) $r4;

        virtualinvoke r0.<org.codehaus.groovy.ast.stmt.AssertStatement: void setBooleanExpression(org.codehaus.groovy.ast.expr.BooleanExpression)>($r5);

        $r6 = virtualinvoke r0.<org.codehaus.groovy.ast.stmt.AssertStatement: org.codehaus.groovy.ast.expr.Expression getMessageExpression()>();

        $r7 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassCodeExpressionTransformer: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r6);

        virtualinvoke r0.<org.codehaus.groovy.ast.stmt.AssertStatement: void setMessageExpression(org.codehaus.groovy.ast.expr.Expression)>($r7);

        return;
    }

    public void visitCaseStatement(org.codehaus.groovy.ast.stmt.CaseStatement)
    {
        org.codehaus.groovy.ast.stmt.Statement $r4;
        org.codehaus.groovy.ast.stmt.CaseStatement r0;
        org.codehaus.groovy.ast.expr.Expression $r2, $r3;
        org.codehaus.groovy.ast.ClassCodeExpressionTransformer r1;

        r1 := @this: org.codehaus.groovy.ast.ClassCodeExpressionTransformer;

        r0 := @parameter0: org.codehaus.groovy.ast.stmt.CaseStatement;

        $r2 = virtualinvoke r0.<org.codehaus.groovy.ast.stmt.CaseStatement: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        $r3 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassCodeExpressionTransformer: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r2);

        virtualinvoke r0.<org.codehaus.groovy.ast.stmt.CaseStatement: void setExpression(org.codehaus.groovy.ast.expr.Expression)>($r3);

        $r4 = virtualinvoke r0.<org.codehaus.groovy.ast.stmt.CaseStatement: org.codehaus.groovy.ast.stmt.Statement getCode()>();

        virtualinvoke $r4.<org.codehaus.groovy.ast.stmt.Statement: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r1);

        return;
    }

    public void visitDoWhileLoop(org.codehaus.groovy.ast.stmt.DoWhileStatement)
    {
        org.codehaus.groovy.ast.expr.BooleanExpression $r2, $r4, $r5;
        org.codehaus.groovy.ast.stmt.DoWhileStatement r0;
        org.codehaus.groovy.ast.expr.Expression $r3;
        org.codehaus.groovy.ast.ClassCodeExpressionTransformer r1;

        r1 := @this: org.codehaus.groovy.ast.ClassCodeExpressionTransformer;

        r0 := @parameter0: org.codehaus.groovy.ast.stmt.DoWhileStatement;

        $r2 = virtualinvoke r0.<org.codehaus.groovy.ast.stmt.DoWhileStatement: org.codehaus.groovy.ast.expr.BooleanExpression getBooleanExpression()>();

        $r3 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassCodeExpressionTransformer: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r2);

        $r4 = (org.codehaus.groovy.ast.expr.BooleanExpression) $r3;

        $r5 = (org.codehaus.groovy.ast.expr.BooleanExpression) $r4;

        virtualinvoke r0.<org.codehaus.groovy.ast.stmt.DoWhileStatement: void setBooleanExpression(org.codehaus.groovy.ast.expr.BooleanExpression)>($r5);

        specialinvoke r1.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitDoWhileLoop(org.codehaus.groovy.ast.stmt.DoWhileStatement)>(r0);

        return;
    }

    public void visitForLoop(org.codehaus.groovy.ast.stmt.ForStatement)
    {
        org.codehaus.groovy.ast.expr.Expression $r2, $r3;
        org.codehaus.groovy.ast.stmt.ForStatement r0;
        org.codehaus.groovy.ast.ClassCodeExpressionTransformer r1;

        r1 := @this: org.codehaus.groovy.ast.ClassCodeExpressionTransformer;

        r0 := @parameter0: org.codehaus.groovy.ast.stmt.ForStatement;

        $r2 = virtualinvoke r0.<org.codehaus.groovy.ast.stmt.ForStatement: org.codehaus.groovy.ast.expr.Expression getCollectionExpression()>();

        $r3 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassCodeExpressionTransformer: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r2);

        virtualinvoke r0.<org.codehaus.groovy.ast.stmt.ForStatement: void setCollectionExpression(org.codehaus.groovy.ast.expr.Expression)>($r3);

        specialinvoke r1.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitForLoop(org.codehaus.groovy.ast.stmt.ForStatement)>(r0);

        return;
    }

    public void visitSynchronizedStatement(org.codehaus.groovy.ast.stmt.SynchronizedStatement)
    {
        org.codehaus.groovy.ast.expr.Expression $r2, $r3;
        org.codehaus.groovy.ast.stmt.SynchronizedStatement r0;
        org.codehaus.groovy.ast.ClassCodeExpressionTransformer r1;

        r1 := @this: org.codehaus.groovy.ast.ClassCodeExpressionTransformer;

        r0 := @parameter0: org.codehaus.groovy.ast.stmt.SynchronizedStatement;

        $r2 = virtualinvoke r0.<org.codehaus.groovy.ast.stmt.SynchronizedStatement: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        $r3 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassCodeExpressionTransformer: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r2);

        virtualinvoke r0.<org.codehaus.groovy.ast.stmt.SynchronizedStatement: void setExpression(org.codehaus.groovy.ast.expr.Expression)>($r3);

        specialinvoke r1.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitSynchronizedStatement(org.codehaus.groovy.ast.stmt.SynchronizedStatement)>(r0);

        return;
    }

    public void visitThrowStatement(org.codehaus.groovy.ast.stmt.ThrowStatement)
    {
        org.codehaus.groovy.ast.stmt.ThrowStatement r0;
        org.codehaus.groovy.ast.expr.Expression $r2, $r3;
        org.codehaus.groovy.ast.ClassCodeExpressionTransformer r1;

        r1 := @this: org.codehaus.groovy.ast.ClassCodeExpressionTransformer;

        r0 := @parameter0: org.codehaus.groovy.ast.stmt.ThrowStatement;

        $r2 = virtualinvoke r0.<org.codehaus.groovy.ast.stmt.ThrowStatement: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        $r3 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassCodeExpressionTransformer: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r2);

        virtualinvoke r0.<org.codehaus.groovy.ast.stmt.ThrowStatement: void setExpression(org.codehaus.groovy.ast.expr.Expression)>($r3);

        return;
    }

    public void visitWhileLoop(org.codehaus.groovy.ast.stmt.WhileStatement)
    {
        org.codehaus.groovy.ast.expr.BooleanExpression $r2, $r4;
        org.codehaus.groovy.ast.expr.Expression $r3;
        org.codehaus.groovy.ast.stmt.WhileStatement r0;
        org.codehaus.groovy.ast.ClassCodeExpressionTransformer r1;

        r1 := @this: org.codehaus.groovy.ast.ClassCodeExpressionTransformer;

        r0 := @parameter0: org.codehaus.groovy.ast.stmt.WhileStatement;

        $r2 = virtualinvoke r0.<org.codehaus.groovy.ast.stmt.WhileStatement: org.codehaus.groovy.ast.expr.BooleanExpression getBooleanExpression()>();

        $r3 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassCodeExpressionTransformer: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r2);

        $r4 = (org.codehaus.groovy.ast.expr.BooleanExpression) $r3;

        virtualinvoke r0.<org.codehaus.groovy.ast.stmt.WhileStatement: void setBooleanExpression(org.codehaus.groovy.ast.expr.BooleanExpression)>($r4);

        specialinvoke r1.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitWhileLoop(org.codehaus.groovy.ast.stmt.WhileStatement)>(r0);

        return;
    }

    public void visitExpressionStatement(org.codehaus.groovy.ast.stmt.ExpressionStatement)
    {
        org.codehaus.groovy.ast.stmt.ExpressionStatement r0;
        org.codehaus.groovy.ast.expr.Expression $r2, $r3;
        org.codehaus.groovy.ast.ClassCodeExpressionTransformer r1;

        r1 := @this: org.codehaus.groovy.ast.ClassCodeExpressionTransformer;

        r0 := @parameter0: org.codehaus.groovy.ast.stmt.ExpressionStatement;

        $r2 = virtualinvoke r0.<org.codehaus.groovy.ast.stmt.ExpressionStatement: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        $r3 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassCodeExpressionTransformer: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r2);

        virtualinvoke r0.<org.codehaus.groovy.ast.stmt.ExpressionStatement: void setExpression(org.codehaus.groovy.ast.expr.Expression)>($r3);

        return;
    }
}
