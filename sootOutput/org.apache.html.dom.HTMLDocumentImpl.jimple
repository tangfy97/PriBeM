public class org.apache.html.dom.HTMLDocumentImpl extends org.apache.xerces.dom.DocumentImpl implements org.w3c.dom.html.HTMLDocument
{
    private static final long serialVersionUID;
    private org.apache.html.dom.HTMLCollectionImpl _anchors;
    private org.apache.html.dom.HTMLCollectionImpl _forms;
    private org.apache.html.dom.HTMLCollectionImpl _images;
    private org.apache.html.dom.HTMLCollectionImpl _links;
    private org.apache.html.dom.HTMLCollectionImpl _applets;
    private java.io.StringWriter _writer;
    private static java.util.Hashtable _elementTypesHTML;
    private static final java.lang.Class[] _elemClassSigHTML;
    static java.lang.Class class$org$apache$html$dom$HTMLDocumentImpl;
    static java.lang.Class class$java$lang$String;

    public void <init>()
    {
        org.apache.html.dom.HTMLDocumentImpl r0;

        r0 := @this: org.apache.html.dom.HTMLDocumentImpl;

        specialinvoke r0.<org.apache.xerces.dom.DocumentImpl: void <init>()>();

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementTypes()>();

        return;
    }

    public synchronized org.w3c.dom.Element getDocumentElement()
    {
        org.w3c.dom.html.HTMLElement $r1, $r4;
        org.apache.html.dom.HTMLHtmlElementImpl $r2;
        org.apache.html.dom.HTMLDocumentImpl r0;
        org.w3c.dom.Node $r3, r5, r6;
        boolean $z0;

        r0 := @this: org.apache.html.dom.HTMLDocumentImpl;

        r5 = virtualinvoke r0.<org.apache.html.dom.HTMLDocumentImpl: org.w3c.dom.Node getFirstChild()>();

        goto label3;

     label1:
        $z0 = r5 instanceof org.w3c.dom.html.HTMLHtmlElement;

        if $z0 == 0 goto label2;

        $r1 = (org.w3c.dom.html.HTMLElement) r5;

        return $r1;

     label2:
        r5 = interfaceinvoke r5.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label3:
        if r5 != null goto label1;

        $r2 = new org.apache.html.dom.HTMLHtmlElementImpl;

        specialinvoke $r2.<org.apache.html.dom.HTMLHtmlElementImpl: void <init>(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)>(r0, "HTML");

        r6 = virtualinvoke r0.<org.apache.html.dom.HTMLDocumentImpl: org.w3c.dom.Node getFirstChild()>();

        goto label5;

     label4:
        $r3 = interfaceinvoke r6.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        interfaceinvoke $r2.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r6);

        r6 = $r3;

     label5:
        if r6 != null goto label4;

        virtualinvoke r0.<org.apache.html.dom.HTMLDocumentImpl: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r2);

        $r4 = (org.w3c.dom.html.HTMLElement) $r2;

        return $r4;
    }

    public synchronized org.w3c.dom.html.HTMLElement getHead()
    {
        org.apache.html.dom.HTMLHeadElementImpl $r2;
        java.lang.Throwable $r7, $r8;
        org.w3c.dom.html.HTMLElement r9, r12;
        org.apache.html.dom.HTMLDocumentImpl r0;
        org.w3c.dom.Element $r1;
        org.w3c.dom.Node $r3, r4, $r5, $r6, r10, r11;
        boolean $z0;

        r0 := @this: org.apache.html.dom.HTMLDocumentImpl;

        $r1 = virtualinvoke r0.<org.apache.html.dom.HTMLDocumentImpl: org.w3c.dom.Element getDocumentElement()>();

        entermonitor $r1;

     label01:
        r10 = interfaceinvoke $r1.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label03;

     label02:
        r10 = interfaceinvoke r10.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label03:
        if r10 == null goto label04;

        $z0 = r10 instanceof org.w3c.dom.html.HTMLHeadElement;

        if $z0 == 0 goto label02;

     label04:
        if r10 == null goto label11;

        r4 = r10;

        entermonitor r10;

     label05:
        r11 = interfaceinvoke $r1.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label07;

     label06:
        $r5 = interfaceinvoke r11.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        $r6 = interfaceinvoke r10.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        interfaceinvoke r10.<org.w3c.dom.Node: org.w3c.dom.Node insertBefore(org.w3c.dom.Node,org.w3c.dom.Node)>(r11, $r6);

        r11 = $r5;

     label07:
        if r11 == null goto label08;

        if r11 != r10 goto label06;

     label08:
        exitmonitor r4;

        goto label10;

     label09:
        $r8 := @caughtexception;

        exitmonitor r4;

        throw $r8;

     label10:
        r12 = (org.w3c.dom.html.HTMLElement) r10;

        exitmonitor $r1;

        return r12;

     label11:
        $r2 = new org.apache.html.dom.HTMLHeadElementImpl;

        specialinvoke $r2.<org.apache.html.dom.HTMLHeadElementImpl: void <init>(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)>(r0, "HEAD");

        $r3 = interfaceinvoke $r1.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        interfaceinvoke $r1.<org.w3c.dom.Node: org.w3c.dom.Node insertBefore(org.w3c.dom.Node,org.w3c.dom.Node)>($r2, $r3);

        exitmonitor $r1;

        r9 = (org.w3c.dom.html.HTMLElement) $r2;

        return r9;

     label12:
        $r7 := @caughtexception;

        exitmonitor $r1;

        throw $r7;

        catch java.lang.Throwable from label05 to label09 with label09;
        catch java.lang.Throwable from label01 to label12 with label12;
    }

    public synchronized java.lang.String getTitle()
    {
        org.apache.html.dom.HTMLDocumentImpl r0;
        org.w3c.dom.html.HTMLElement $r1;
        org.w3c.dom.NodeList $r2;
        org.w3c.dom.Node $r3;
        int $i0;
        java.lang.String $r5;
        org.w3c.dom.html.HTMLTitleElement $r4;

        r0 := @this: org.apache.html.dom.HTMLDocumentImpl;

        $r1 = virtualinvoke r0.<org.apache.html.dom.HTMLDocumentImpl: org.w3c.dom.html.HTMLElement getHead()>();

        $r2 = interfaceinvoke $r1.<org.w3c.dom.html.HTMLElement: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("TITLE");

        $i0 = interfaceinvoke $r2.<org.w3c.dom.NodeList: int getLength()>();

        if $i0 <= 0 goto label1;

        $r3 = interfaceinvoke $r2.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        $r4 = (org.w3c.dom.html.HTMLTitleElement) $r3;

        $r5 = interfaceinvoke $r4.<org.w3c.dom.html.HTMLTitleElement: java.lang.String getText()>();

        return $r5;

     label1:
        return "";
    }

    public synchronized void setTitle(java.lang.String)
    {
        org.w3c.dom.html.HTMLElement $r1;
        org.w3c.dom.NodeList $r2;
        org.w3c.dom.html.HTMLTitleElement $r5, $r8;
        org.apache.html.dom.HTMLDocumentImpl r0;
        org.apache.html.dom.HTMLTitleElementImpl $r3;
        org.w3c.dom.Node $r6, $r7;
        int $i0;
        java.lang.String r4;

        r0 := @this: org.apache.html.dom.HTMLDocumentImpl;

        r4 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.apache.html.dom.HTMLDocumentImpl: org.w3c.dom.html.HTMLElement getHead()>();

        $r2 = interfaceinvoke $r1.<org.w3c.dom.html.HTMLElement: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("TITLE");

        $i0 = interfaceinvoke $r2.<org.w3c.dom.NodeList: int getLength()>();

        if $i0 <= 0 goto label2;

        $r6 = interfaceinvoke $r2.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        $r7 = interfaceinvoke $r6.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        if $r7 == $r1 goto label1;

        interfaceinvoke $r1.<org.w3c.dom.html.HTMLElement: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r6);

     label1:
        $r8 = (org.w3c.dom.html.HTMLTitleElement) $r6;

        interfaceinvoke $r8.<org.w3c.dom.html.HTMLTitleElement: void setText(java.lang.String)>(r4);

        goto label3;

     label2:
        $r3 = new org.apache.html.dom.HTMLTitleElementImpl;

        specialinvoke $r3.<org.apache.html.dom.HTMLTitleElementImpl: void <init>(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)>(r0, "TITLE");

        $r5 = (org.w3c.dom.html.HTMLTitleElement) $r3;

        interfaceinvoke $r5.<org.w3c.dom.html.HTMLTitleElement: void setText(java.lang.String)>(r4);

        interfaceinvoke $r1.<org.w3c.dom.html.HTMLElement: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r3);

     label3:
        return;
    }

    public synchronized org.w3c.dom.html.HTMLElement getBody()
    {
        java.lang.Throwable $r7, $r8;
        org.w3c.dom.html.HTMLElement $r2, r9, r12;
        org.apache.html.dom.HTMLBodyElementImpl $r3;
        org.apache.html.dom.HTMLDocumentImpl r0;
        org.w3c.dom.Element $r1;
        org.w3c.dom.Node r4, $r5, $r6, r10, r11;
        boolean $z0, $z1;

        r0 := @this: org.apache.html.dom.HTMLDocumentImpl;

        $r1 = virtualinvoke r0.<org.apache.html.dom.HTMLDocumentImpl: org.w3c.dom.Element getDocumentElement()>();

        $r2 = virtualinvoke r0.<org.apache.html.dom.HTMLDocumentImpl: org.w3c.dom.html.HTMLElement getHead()>();

        entermonitor $r1;

     label01:
        r10 = interfaceinvoke $r2.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        goto label03;

     label02:
        r10 = interfaceinvoke r10.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label03:
        if r10 == null goto label04;

        $z0 = r10 instanceof org.w3c.dom.html.HTMLBodyElement;

        if $z0 != 0 goto label04;

        $z1 = r10 instanceof org.w3c.dom.html.HTMLFrameSetElement;

        if $z1 == 0 goto label02;

     label04:
        if r10 == null goto label11;

        r4 = r10;

        entermonitor r10;

     label05:
        r11 = interfaceinvoke $r2.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        goto label07;

     label06:
        $r5 = interfaceinvoke r11.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        $r6 = interfaceinvoke r10.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        interfaceinvoke r10.<org.w3c.dom.Node: org.w3c.dom.Node insertBefore(org.w3c.dom.Node,org.w3c.dom.Node)>(r11, $r6);

        r11 = $r5;

     label07:
        if r11 == null goto label08;

        if r11 != r10 goto label06;

     label08:
        exitmonitor r4;

        goto label10;

     label09:
        $r8 := @caughtexception;

        exitmonitor r4;

        throw $r8;

     label10:
        r12 = (org.w3c.dom.html.HTMLElement) r10;

        exitmonitor $r1;

        return r12;

     label11:
        $r3 = new org.apache.html.dom.HTMLBodyElementImpl;

        specialinvoke $r3.<org.apache.html.dom.HTMLBodyElementImpl: void <init>(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)>(r0, "BODY");

        interfaceinvoke $r1.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r3);

        exitmonitor $r1;

        r9 = (org.w3c.dom.html.HTMLElement) $r3;

        return r9;

     label12:
        $r7 := @caughtexception;

        exitmonitor $r1;

        throw $r7;

        catch java.lang.Throwable from label05 to label09 with label09;
        catch java.lang.Throwable from label01 to label12 with label12;
    }

    public synchronized void setBody(org.w3c.dom.html.HTMLElement)
    {
        java.lang.Throwable $r6, $r7, $r8;
        org.w3c.dom.html.HTMLElement r0, $r3;
        org.w3c.dom.NodeList $r4;
        org.apache.html.dom.HTMLDocumentImpl r1;
        org.w3c.dom.Element $r2;
        org.w3c.dom.Node $r5, r9;
        int $i0;
        boolean $z0;

        r1 := @this: org.apache.html.dom.HTMLDocumentImpl;

        r0 := @parameter0: org.w3c.dom.html.HTMLElement;

        entermonitor r0;

     label01:
        $r2 = virtualinvoke r1.<org.apache.html.dom.HTMLDocumentImpl: org.w3c.dom.Element getDocumentElement()>();

        $r3 = virtualinvoke r1.<org.apache.html.dom.HTMLDocumentImpl: org.w3c.dom.html.HTMLElement getHead()>();

        entermonitor $r2;

     label02:
        $r4 = virtualinvoke r1.<org.apache.html.dom.HTMLDocumentImpl: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("BODY");

        $i0 = interfaceinvoke $r4.<org.w3c.dom.NodeList: int getLength()>();

        if $i0 <= 0 goto label11;

        $r5 = interfaceinvoke $r4.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        entermonitor $r5;

     label03:
        r9 = $r3;

        goto label08;

     label04:
        $z0 = r9 instanceof org.w3c.dom.Element;

        if $z0 == 0 goto label07;

        if r9 == $r5 goto label05;

        interfaceinvoke $r2.<org.w3c.dom.Node: org.w3c.dom.Node insertBefore(org.w3c.dom.Node,org.w3c.dom.Node)>(r0, r9);

        goto label06;

     label05:
        interfaceinvoke $r2.<org.w3c.dom.Node: org.w3c.dom.Node replaceChild(org.w3c.dom.Node,org.w3c.dom.Node)>(r0, $r5);

     label06:
        exitmonitor $r5;

        exitmonitor $r2;

        exitmonitor r0;

        return;

     label07:
        r9 = interfaceinvoke r9.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label08:
        if r9 != null goto label04;

        interfaceinvoke $r2.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r0);

        exitmonitor $r5;

        goto label10;

     label09:
        $r8 := @caughtexception;

        exitmonitor $r5;

        throw $r8;

     label10:
        exitmonitor $r2;

        exitmonitor r0;

        return;

     label11:
        interfaceinvoke $r2.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r0);

        exitmonitor $r2;

        goto label13;

     label12:
        $r7 := @caughtexception;

        exitmonitor $r2;

        throw $r7;

     label13:
        exitmonitor r0;

        goto label15;

     label14:
        $r6 := @caughtexception;

        exitmonitor r0;

        throw $r6;

     label15:
        return;

        catch java.lang.Throwable from label03 to label09 with label09;
        catch java.lang.Throwable from label02 to label12 with label12;
        catch java.lang.Throwable from label01 to label14 with label14;
    }

    public synchronized org.w3c.dom.Element getElementById(java.lang.String)
    {
        org.apache.html.dom.HTMLDocumentImpl r0;
        org.w3c.dom.Element $r2, $r3;
        java.lang.String r1;

        r0 := @this: org.apache.html.dom.HTMLDocumentImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<org.apache.xerces.dom.DocumentImpl: org.w3c.dom.Element getElementById(java.lang.String)>(r1);

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r3 = specialinvoke r0.<org.apache.html.dom.HTMLDocumentImpl: org.w3c.dom.Element getElementById(java.lang.String,org.w3c.dom.Node)>(r1, r0);

        return $r3;
    }

    public org.w3c.dom.NodeList getElementsByName(java.lang.String)
    {
        org.apache.html.dom.NameNodeListImpl $r0;
        org.apache.html.dom.HTMLDocumentImpl r1;
        java.lang.String r2;

        r1 := @this: org.apache.html.dom.HTMLDocumentImpl;

        r2 := @parameter0: java.lang.String;

        $r0 = new org.apache.html.dom.NameNodeListImpl;

        specialinvoke $r0.<org.apache.html.dom.NameNodeListImpl: void <init>(org.apache.xerces.dom.NodeImpl,java.lang.String)>(r1, r2);

        return $r0;
    }

    public final org.w3c.dom.NodeList getElementsByTagName(java.lang.String)
    {
        org.apache.html.dom.HTMLDocumentImpl r0;
        org.w3c.dom.NodeList $r4;
        java.util.Locale $r2;
        java.lang.String r1, $r3;

        r0 := @this: org.apache.html.dom.HTMLDocumentImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r2);

        $r4 = specialinvoke r0.<org.apache.xerces.dom.DocumentImpl: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>($r3);

        return $r4;
    }

    public final org.w3c.dom.NodeList getElementsByTagNameNS(java.lang.String, java.lang.String)
    {
        org.w3c.dom.NodeList $r5, $r8;
        org.apache.html.dom.HTMLDocumentImpl r1;
        java.util.Locale $r3, $r6;
        int $i0;
        java.lang.String r0, r2, $r4, $r7;

        r1 := @this: org.apache.html.dom.HTMLDocumentImpl;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $r6 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r7 = virtualinvoke r2.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r6);

        $r8 = specialinvoke r1.<org.apache.xerces.dom.DocumentImpl: org.w3c.dom.NodeList getElementsByTagNameNS(java.lang.String,java.lang.String)>(r0, $r7);

        return $r8;

     label1:
        $r3 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r4 = virtualinvoke r2.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r3);

        $r5 = specialinvoke r1.<org.apache.xerces.dom.DocumentImpl: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>($r4);

        return $r5;
    }

    public org.w3c.dom.Element createElementNS(java.lang.String, java.lang.String, java.lang.String) throws org.w3c.dom.DOMException
    {
        org.apache.html.dom.HTMLDocumentImpl r0;
        org.w3c.dom.Element $r3;
        java.lang.String r1, r2, r4;

        r0 := @this: org.apache.html.dom.HTMLDocumentImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        $r3 = virtualinvoke r0.<org.apache.html.dom.HTMLDocumentImpl: org.w3c.dom.Element createElementNS(java.lang.String,java.lang.String)>(r1, r2);

        return $r3;
    }

    public org.w3c.dom.Element createElementNS(java.lang.String, java.lang.String)
    {
        org.apache.html.dom.HTMLDocumentImpl r1;
        org.w3c.dom.Element $r3, $r4;
        int $i0;
        java.lang.String r0, r2;

        r1 := @this: org.apache.html.dom.HTMLDocumentImpl;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $r3 = virtualinvoke r1.<org.apache.html.dom.HTMLDocumentImpl: org.w3c.dom.Element createElement(java.lang.String)>(r2);

        return $r3;

     label2:
        $r4 = specialinvoke r1.<org.apache.xerces.dom.DocumentImpl: org.w3c.dom.Element createElementNS(java.lang.String,java.lang.String)>(r0, r2);

        return $r4;
    }

    public org.w3c.dom.Element createElement(java.lang.String) throws org.w3c.dom.DOMException
    {
        java.lang.IllegalStateException $r13;
        java.lang.Object[] $r9;
        org.apache.html.dom.HTMLElementImpl $r5;
        java.lang.reflect.Constructor $r8;
        org.apache.html.dom.HTMLDocumentImpl r6;
        java.util.Locale $r0;
        java.lang.StringBuffer $r14, $r15, $r16, $r17, $r18;
        java.lang.String $r1, $r19, r20;
        java.util.Hashtable $r2;
        java.lang.Class[] $r7;
        java.lang.Exception $r12;
        org.w3c.dom.Element $r11;
        java.lang.Object $r3, $r10;
        java.lang.Class r4;

        r6 := @this: org.apache.html.dom.HTMLDocumentImpl;

        r20 := @parameter0: java.lang.String;

        $r0 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r1 = virtualinvoke r20.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r0);

        $r2 = <org.apache.html.dom.HTMLDocumentImpl: java.util.Hashtable _elementTypesHTML>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r1);

        r4 = (java.lang.Class) $r3;

        if r4 == null goto label3;

     label1:
        $r7 = <org.apache.html.dom.HTMLDocumentImpl: java.lang.Class[] _elemClassSigHTML>;

        $r8 = virtualinvoke r4.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r7);

        $r9 = newarray (java.lang.Object)[2];

        $r9[0] = r6;

        $r9[1] = $r1;

        $r10 = virtualinvoke $r8.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r9);

        $r11 = (org.w3c.dom.Element) $r10;

        return $r11;

     label2:
        $r12 := @caughtexception;

        $r13 = new java.lang.IllegalStateException;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("HTM15 Tag \'");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' associated with an Element class that failed to construct.\n");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r19);

        throw $r13;

     label3:
        $r5 = new org.apache.html.dom.HTMLElementImpl;

        specialinvoke $r5.<org.apache.html.dom.HTMLElementImpl: void <init>(org.apache.html.dom.HTMLDocumentImpl,java.lang.String)>(r6, $r1);

        return $r5;

        catch java.lang.Exception from label1 to label2 with label2;
    }

    public org.w3c.dom.Attr createAttribute(java.lang.String) throws org.w3c.dom.DOMException
    {
        org.apache.html.dom.HTMLDocumentImpl r0;
        java.util.Locale $r2;
        java.lang.String r1, $r3;
        org.w3c.dom.Attr $r4;

        r0 := @this: org.apache.html.dom.HTMLDocumentImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r2);

        $r4 = specialinvoke r0.<org.apache.xerces.dom.DocumentImpl: org.w3c.dom.Attr createAttribute(java.lang.String)>($r3);

        return $r4;
    }

    public java.lang.String getReferrer()
    {
        org.apache.html.dom.HTMLDocumentImpl r0;

        r0 := @this: org.apache.html.dom.HTMLDocumentImpl;

        return null;
    }

    public java.lang.String getDomain()
    {
        org.apache.html.dom.HTMLDocumentImpl r0;

        r0 := @this: org.apache.html.dom.HTMLDocumentImpl;

        return null;
    }

    public java.lang.String getURL()
    {
        org.apache.html.dom.HTMLDocumentImpl r0;

        r0 := @this: org.apache.html.dom.HTMLDocumentImpl;

        return null;
    }

    public java.lang.String getCookie()
    {
        org.apache.html.dom.HTMLDocumentImpl r0;

        r0 := @this: org.apache.html.dom.HTMLDocumentImpl;

        return null;
    }

    public void setCookie(java.lang.String)
    {
        org.apache.html.dom.HTMLDocumentImpl r0;
        java.lang.String r1;

        r0 := @this: org.apache.html.dom.HTMLDocumentImpl;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public org.w3c.dom.html.HTMLCollection getImages()
    {
        org.apache.html.dom.HTMLDocumentImpl r0;
        org.w3c.dom.html.HTMLElement $r4;
        org.apache.html.dom.HTMLCollectionImpl $r1, $r2, $r3;

        r0 := @this: org.apache.html.dom.HTMLDocumentImpl;

        $r1 = r0.<org.apache.html.dom.HTMLDocumentImpl: org.apache.html.dom.HTMLCollectionImpl _images>;

        if $r1 != null goto label1;

        $r3 = new org.apache.html.dom.HTMLCollectionImpl;

        $r4 = virtualinvoke r0.<org.apache.html.dom.HTMLDocumentImpl: org.w3c.dom.html.HTMLElement getBody()>();

        specialinvoke $r3.<org.apache.html.dom.HTMLCollectionImpl: void <init>(org.w3c.dom.html.HTMLElement,short)>($r4, 3);

        r0.<org.apache.html.dom.HTMLDocumentImpl: org.apache.html.dom.HTMLCollectionImpl _images> = $r3;

     label1:
        $r2 = r0.<org.apache.html.dom.HTMLDocumentImpl: org.apache.html.dom.HTMLCollectionImpl _images>;

        return $r2;
    }

    public org.w3c.dom.html.HTMLCollection getApplets()
    {
        org.apache.html.dom.HTMLDocumentImpl r0;
        org.w3c.dom.html.HTMLElement $r4;
        org.apache.html.dom.HTMLCollectionImpl $r1, $r2, $r3;

        r0 := @this: org.apache.html.dom.HTMLDocumentImpl;

        $r1 = r0.<org.apache.html.dom.HTMLDocumentImpl: org.apache.html.dom.HTMLCollectionImpl _applets>;

        if $r1 != null goto label1;

        $r3 = new org.apache.html.dom.HTMLCollectionImpl;

        $r4 = virtualinvoke r0.<org.apache.html.dom.HTMLDocumentImpl: org.w3c.dom.html.HTMLElement getBody()>();

        specialinvoke $r3.<org.apache.html.dom.HTMLCollectionImpl: void <init>(org.w3c.dom.html.HTMLElement,short)>($r4, 4);

        r0.<org.apache.html.dom.HTMLDocumentImpl: org.apache.html.dom.HTMLCollectionImpl _applets> = $r3;

     label1:
        $r2 = r0.<org.apache.html.dom.HTMLDocumentImpl: org.apache.html.dom.HTMLCollectionImpl _applets>;

        return $r2;
    }

    public org.w3c.dom.html.HTMLCollection getLinks()
    {
        org.apache.html.dom.HTMLDocumentImpl r0;
        org.w3c.dom.html.HTMLElement $r4;
        org.apache.html.dom.HTMLCollectionImpl $r1, $r2, $r3;

        r0 := @this: org.apache.html.dom.HTMLDocumentImpl;

        $r1 = r0.<org.apache.html.dom.HTMLDocumentImpl: org.apache.html.dom.HTMLCollectionImpl _links>;

        if $r1 != null goto label1;

        $r3 = new org.apache.html.dom.HTMLCollectionImpl;

        $r4 = virtualinvoke r0.<org.apache.html.dom.HTMLDocumentImpl: org.w3c.dom.html.HTMLElement getBody()>();

        specialinvoke $r3.<org.apache.html.dom.HTMLCollectionImpl: void <init>(org.w3c.dom.html.HTMLElement,short)>($r4, 5);

        r0.<org.apache.html.dom.HTMLDocumentImpl: org.apache.html.dom.HTMLCollectionImpl _links> = $r3;

     label1:
        $r2 = r0.<org.apache.html.dom.HTMLDocumentImpl: org.apache.html.dom.HTMLCollectionImpl _links>;

        return $r2;
    }

    public org.w3c.dom.html.HTMLCollection getForms()
    {
        org.apache.html.dom.HTMLDocumentImpl r0;
        org.w3c.dom.html.HTMLElement $r4;
        org.apache.html.dom.HTMLCollectionImpl $r1, $r2, $r3;

        r0 := @this: org.apache.html.dom.HTMLDocumentImpl;

        $r1 = r0.<org.apache.html.dom.HTMLDocumentImpl: org.apache.html.dom.HTMLCollectionImpl _forms>;

        if $r1 != null goto label1;

        $r3 = new org.apache.html.dom.HTMLCollectionImpl;

        $r4 = virtualinvoke r0.<org.apache.html.dom.HTMLDocumentImpl: org.w3c.dom.html.HTMLElement getBody()>();

        specialinvoke $r3.<org.apache.html.dom.HTMLCollectionImpl: void <init>(org.w3c.dom.html.HTMLElement,short)>($r4, 2);

        r0.<org.apache.html.dom.HTMLDocumentImpl: org.apache.html.dom.HTMLCollectionImpl _forms> = $r3;

     label1:
        $r2 = r0.<org.apache.html.dom.HTMLDocumentImpl: org.apache.html.dom.HTMLCollectionImpl _forms>;

        return $r2;
    }

    public org.w3c.dom.html.HTMLCollection getAnchors()
    {
        org.apache.html.dom.HTMLDocumentImpl r0;
        org.w3c.dom.html.HTMLElement $r4;
        org.apache.html.dom.HTMLCollectionImpl $r1, $r2, $r3;

        r0 := @this: org.apache.html.dom.HTMLDocumentImpl;

        $r1 = r0.<org.apache.html.dom.HTMLDocumentImpl: org.apache.html.dom.HTMLCollectionImpl _anchors>;

        if $r1 != null goto label1;

        $r3 = new org.apache.html.dom.HTMLCollectionImpl;

        $r4 = virtualinvoke r0.<org.apache.html.dom.HTMLDocumentImpl: org.w3c.dom.html.HTMLElement getBody()>();

        specialinvoke $r3.<org.apache.html.dom.HTMLCollectionImpl: void <init>(org.w3c.dom.html.HTMLElement,short)>($r4, 1);

        r0.<org.apache.html.dom.HTMLDocumentImpl: org.apache.html.dom.HTMLCollectionImpl _anchors> = $r3;

     label1:
        $r2 = r0.<org.apache.html.dom.HTMLDocumentImpl: org.apache.html.dom.HTMLCollectionImpl _anchors>;

        return $r2;
    }

    public void open()
    {
        org.apache.html.dom.HTMLDocumentImpl r0;
        java.io.StringWriter $r1, $r2;

        r0 := @this: org.apache.html.dom.HTMLDocumentImpl;

        $r1 = r0.<org.apache.html.dom.HTMLDocumentImpl: java.io.StringWriter _writer>;

        if $r1 != null goto label1;

        $r2 = new java.io.StringWriter;

        specialinvoke $r2.<java.io.StringWriter: void <init>()>();

        r0.<org.apache.html.dom.HTMLDocumentImpl: java.io.StringWriter _writer> = $r2;

     label1:
        return;
    }

    public void close()
    {
        org.apache.html.dom.HTMLDocumentImpl r0;
        java.io.StringWriter $r1;

        r0 := @this: org.apache.html.dom.HTMLDocumentImpl;

        $r1 = r0.<org.apache.html.dom.HTMLDocumentImpl: java.io.StringWriter _writer>;

        if $r1 == null goto label1;

        r0.<org.apache.html.dom.HTMLDocumentImpl: java.io.StringWriter _writer> = null;

     label1:
        return;
    }

    public void write(java.lang.String)
    {
        org.apache.html.dom.HTMLDocumentImpl r0;
        java.io.StringWriter $r1, $r3;
        java.lang.String r2;

        r0 := @this: org.apache.html.dom.HTMLDocumentImpl;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.html.dom.HTMLDocumentImpl: java.io.StringWriter _writer>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.html.dom.HTMLDocumentImpl: java.io.StringWriter _writer>;

        virtualinvoke $r3.<java.io.StringWriter: void write(java.lang.String)>(r2);

     label1:
        return;
    }

    public void writeln(java.lang.String)
    {
        java.io.StringWriter $r1, $r3;
        org.apache.html.dom.HTMLDocumentImpl r0;
        java.lang.StringBuffer $r2, $r5, $r6;
        java.lang.String r4, $r7;

        r0 := @this: org.apache.html.dom.HTMLDocumentImpl;

        r4 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.html.dom.HTMLDocumentImpl: java.io.StringWriter _writer>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.html.dom.HTMLDocumentImpl: java.io.StringWriter _writer>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.StringWriter: void write(java.lang.String)>($r7);

     label1:
        return;
    }

    public org.w3c.dom.Node cloneNode(boolean)
    {
        org.apache.html.dom.HTMLDocumentImpl $r0, r1;
        boolean z0;

        r1 := @this: org.apache.html.dom.HTMLDocumentImpl;

        z0 := @parameter0: boolean;

        $r0 = new org.apache.html.dom.HTMLDocumentImpl;

        specialinvoke $r0.<org.apache.html.dom.HTMLDocumentImpl: void <init>()>();

        virtualinvoke r1.<org.apache.html.dom.HTMLDocumentImpl: void callUserDataHandlers(org.w3c.dom.Node,org.w3c.dom.Node,short)>(r1, $r0, 1);

        virtualinvoke r1.<org.apache.html.dom.HTMLDocumentImpl: void cloneNode(org.apache.xerces.dom.CoreDocumentImpl,boolean)>($r0, z0);

        return $r0;
    }

    protected boolean canRenameElements(java.lang.String, java.lang.String, org.apache.xerces.dom.ElementImpl)
    {
        org.apache.html.dom.HTMLDocumentImpl r13;
        java.util.Locale $r3;
        java.lang.String $r1, r2, $r5, $r9, r12;
        java.util.Hashtable $r4, $r8;
        boolean $z0, $z1;
        org.apache.xerces.dom.ElementImpl r0;
        java.lang.Object $r6, $r10;
        java.lang.Class r7, r11;

        r13 := @this: org.apache.html.dom.HTMLDocumentImpl;

        r12 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r0 := @parameter2: org.apache.xerces.dom.ElementImpl;

        $r1 = virtualinvoke r0.<org.apache.xerces.dom.ElementImpl: java.lang.String getNamespaceURI()>();

        if $r1 == null goto label3;

        if r12 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;

     label3:
        $r4 = <org.apache.html.dom.HTMLDocumentImpl: java.util.Hashtable _elementTypesHTML>;

        $r3 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r5 = virtualinvoke r2.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r3);

        $r6 = virtualinvoke $r4.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r5);

        r7 = (java.lang.Class) $r6;

        $r8 = <org.apache.html.dom.HTMLDocumentImpl: java.util.Hashtable _elementTypesHTML>;

        $r9 = virtualinvoke r0.<org.apache.xerces.dom.ElementImpl: java.lang.String getTagName()>();

        $r10 = virtualinvoke $r8.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r9);

        r11 = (java.lang.Class) $r10;

        if r7 != r11 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        return $z1;
    }

    private org.w3c.dom.Element getElementById(java.lang.String, org.w3c.dom.Node)
    {
        org.w3c.dom.Element $r2, $r5, $r6;
        org.apache.html.dom.HTMLDocumentImpl r4;
        org.w3c.dom.Node r0, r7;
        java.lang.String r1, $r3;
        boolean $z0, $z1;

        r4 := @this: org.apache.html.dom.HTMLDocumentImpl;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: org.w3c.dom.Node;

        r7 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label4;

     label1:
        $z0 = r7 instanceof org.w3c.dom.Element;

        if $z0 == 0 goto label3;

        $r2 = (org.w3c.dom.Element) r7;

        $r3 = interfaceinvoke $r2.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("id");

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label2;

        $r6 = (org.w3c.dom.Element) r7;

        return $r6;

     label2:
        $r5 = specialinvoke r4.<org.apache.html.dom.HTMLDocumentImpl: org.w3c.dom.Element getElementById(java.lang.String,org.w3c.dom.Node)>(r1, r7);

        if $r5 == null goto label3;

        return $r5;

     label3:
        r7 = interfaceinvoke r7.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label4:
        if r7 != null goto label1;

        return null;
    }

    private static synchronized void populateElementTypes()
    {
        java.util.Hashtable $r0, $r1;

        $r0 = <org.apache.html.dom.HTMLDocumentImpl: java.util.Hashtable _elementTypesHTML>;

        if $r0 == null goto label1;

        return;

     label1:
        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>(int)>(63);

        <org.apache.html.dom.HTMLDocumentImpl: java.util.Hashtable _elementTypesHTML> = $r1;

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("A", "HTMLAnchorElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("APPLET", "HTMLAppletElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("AREA", "HTMLAreaElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("BASE", "HTMLBaseElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("BASEFONT", "HTMLBaseFontElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("BLOCKQUOTE", "HTMLQuoteElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("BODY", "HTMLBodyElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("BR", "HTMLBRElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("BUTTON", "HTMLButtonElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("DEL", "HTMLModElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("DIR", "HTMLDirectoryElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("DIV", "HTMLDivElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("DL", "HTMLDListElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("FIELDSET", "HTMLFieldSetElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("FONT", "HTMLFontElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("FORM", "HTMLFormElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("FRAME", "HTMLFrameElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("FRAMESET", "HTMLFrameSetElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("HEAD", "HTMLHeadElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("H1", "HTMLHeadingElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("H2", "HTMLHeadingElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("H3", "HTMLHeadingElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("H4", "HTMLHeadingElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("H5", "HTMLHeadingElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("H6", "HTMLHeadingElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("HR", "HTMLHRElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("HTML", "HTMLHtmlElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("IFRAME", "HTMLIFrameElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("IMG", "HTMLImageElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("INPUT", "HTMLInputElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("INS", "HTMLModElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("ISINDEX", "HTMLIsIndexElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("LABEL", "HTMLLabelElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("LEGEND", "HTMLLegendElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("LI", "HTMLLIElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("LINK", "HTMLLinkElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("MAP", "HTMLMapElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("MENU", "HTMLMenuElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("META", "HTMLMetaElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("OBJECT", "HTMLObjectElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("OL", "HTMLOListElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("OPTGROUP", "HTMLOptGroupElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("OPTION", "HTMLOptionElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("P", "HTMLParagraphElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("PARAM", "HTMLParamElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("PRE", "HTMLPreElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("Q", "HTMLQuoteElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("SCRIPT", "HTMLScriptElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("SELECT", "HTMLSelectElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("STYLE", "HTMLStyleElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("TABLE", "HTMLTableElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("CAPTION", "HTMLTableCaptionElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("TD", "HTMLTableCellElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("TH", "HTMLTableCellElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("COL", "HTMLTableColElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("COLGROUP", "HTMLTableColElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("TR", "HTMLTableRowElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("TBODY", "HTMLTableSectionElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("THEAD", "HTMLTableSectionElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("TFOOT", "HTMLTableSectionElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("TEXTAREA", "HTMLTextAreaElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("TITLE", "HTMLTitleElementImpl");

        staticinvoke <org.apache.html.dom.HTMLDocumentImpl: void populateElementType(java.lang.String,java.lang.String)>("UL", "HTMLUListElementImpl");

        return;
    }

    private static void populateElementType(java.lang.String, java.lang.String)
    {
        java.lang.StringBuffer $r1, $r3, $r5, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20;
        java.lang.String r0, r4, $r6, $r21;
        java.util.Hashtable $r2;
        java.lang.RuntimeException $r11;
        java.lang.Exception $r10;
        java.lang.Class $r7, $r9, $r22;
        java.lang.ClassLoader $r8;

        r0 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

     label1:
        $r2 = <org.apache.html.dom.HTMLDocumentImpl: java.util.Hashtable _elementTypesHTML>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("org.apache.html.dom.");

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        $r7 = <org.apache.html.dom.HTMLDocumentImpl: java.lang.Class class$org$apache$html$dom$HTMLDocumentImpl>;

        if $r7 != null goto label2;

        $r22 = staticinvoke <org.apache.html.dom.HTMLDocumentImpl: java.lang.Class class$(java.lang.String)>("org.apache.html.dom.HTMLDocumentImpl");

        <org.apache.html.dom.HTMLDocumentImpl: java.lang.Class class$org$apache$html$dom$HTMLDocumentImpl> = $r22;

        goto label3;

     label2:
        $r22 = <org.apache.html.dom.HTMLDocumentImpl: java.lang.Class class$org$apache$html$dom$HTMLDocumentImpl>;

     label3:
        $r8 = virtualinvoke $r22.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r9 = staticinvoke <org.apache.html.dom.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>($r6, $r8, 1);

        virtualinvoke $r2.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r9);

     label4:
        goto label6;

     label5:
        $r10 := @caughtexception;

        $r11 = new java.lang.RuntimeException;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("HTM019 OpenXML Error: Could not find or execute class ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" implementing HTML element ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String)>($r21);

        throw $r11;

     label6:
        return;

        catch java.lang.Exception from label1 to label4 with label5;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        return $r1;

     label2:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label2;
    }

    static void <clinit>()
    {
        java.lang.Class[] $r0;
        java.lang.Class $r1, $r2, $r3, $r4;

        <org.apache.html.dom.HTMLDocumentImpl: long serialVersionUID> = 4285791750126227180L;

        $r0 = newarray (java.lang.Class)[2];

        $r1 = <org.apache.html.dom.HTMLDocumentImpl: java.lang.Class class$org$apache$html$dom$HTMLDocumentImpl>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <org.apache.html.dom.HTMLDocumentImpl: java.lang.Class class$(java.lang.String)>("org.apache.html.dom.HTMLDocumentImpl");

        <org.apache.html.dom.HTMLDocumentImpl: java.lang.Class class$org$apache$html$dom$HTMLDocumentImpl> = $r3;

        goto label2;

     label1:
        $r3 = <org.apache.html.dom.HTMLDocumentImpl: java.lang.Class class$org$apache$html$dom$HTMLDocumentImpl>;

     label2:
        $r0[0] = $r3;

        $r2 = <org.apache.html.dom.HTMLDocumentImpl: java.lang.Class class$java$lang$String>;

        if $r2 != null goto label3;

        $r4 = staticinvoke <org.apache.html.dom.HTMLDocumentImpl: java.lang.Class class$(java.lang.String)>("java.lang.String");

        <org.apache.html.dom.HTMLDocumentImpl: java.lang.Class class$java$lang$String> = $r4;

        goto label4;

     label3:
        $r4 = <org.apache.html.dom.HTMLDocumentImpl: java.lang.Class class$java$lang$String>;

     label4:
        $r0[1] = $r4;

        <org.apache.html.dom.HTMLDocumentImpl: java.lang.Class[] _elemClassSigHTML> = $r0;

        return;
    }
}
