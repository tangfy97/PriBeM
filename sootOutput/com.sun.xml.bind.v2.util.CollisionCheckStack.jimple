public final class com.sun.xml.bind.v2.util.CollisionCheckStack extends java.util.AbstractList
{
    private java.lang.Object[] data;
    private int[] next;
    private int size;
    private boolean latestPushResult;
    private boolean useIdentity;
    private final int[] initialHash;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        java.lang.Object[] $r2;
        int[] $r1, $r3;
        com.sun.xml.bind.v2.util.CollisionCheckStack r0;

        r0 := @this: com.sun.xml.bind.v2.util.CollisionCheckStack;

        specialinvoke r0.<java.util.AbstractList: void <init>()>();

        r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: int size> = 0;

        r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: boolean latestPushResult> = 0;

        r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: boolean useIdentity> = 1;

        $r1 = newarray (int)[17];

        r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: int[] initialHash> = $r1;

        $r2 = newarray (java.lang.Object)[16];

        r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: java.lang.Object[] data> = $r2;

        $r3 = newarray (int)[16];

        r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: int[] next> = $r3;

        return;
    }

    public void setUseIdentity(boolean)
    {
        com.sun.xml.bind.v2.util.CollisionCheckStack r0;
        boolean z0;

        r0 := @this: com.sun.xml.bind.v2.util.CollisionCheckStack;

        z0 := @parameter0: boolean;

        r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: boolean useIdentity> = z0;

        return;
    }

    public boolean getUseIdentity()
    {
        com.sun.xml.bind.v2.util.CollisionCheckStack r0;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.util.CollisionCheckStack;

        $z0 = r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: boolean useIdentity>;

        return $z0;
    }

    public boolean getLatestPushResult()
    {
        com.sun.xml.bind.v2.util.CollisionCheckStack r0;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.util.CollisionCheckStack;

        $z0 = r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: boolean latestPushResult>;

        return $z0;
    }

    public boolean push(java.lang.Object)
    {
        java.lang.Object[] $r1, $r3;
        int[] $r4, $r5, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        com.sun.xml.bind.v2.util.CollisionCheckStack r0;
        boolean $z0, $z1;
        java.lang.Object r2;

        r0 := @this: com.sun.xml.bind.v2.util.CollisionCheckStack;

        r2 := @parameter0: java.lang.Object;

        $r1 = r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: java.lang.Object[] data>;

        $i1 = lengthof $r1;

        $i0 = r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: int size>;

        if $i1 != $i0 goto label1;

        specialinvoke r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: void expandCapacity()>();

     label1:
        $r3 = r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: java.lang.Object[] data>;

        $i2 = r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: int size>;

        $r3[$i2] = r2;

        $i3 = specialinvoke r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: int hash(java.lang.Object)>(r2);

        $z0 = specialinvoke r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: boolean findDuplicate(java.lang.Object,int)>(r2, $i3);

        $r5 = r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: int[] next>;

        $i5 = r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: int size>;

        $r4 = r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: int[] initialHash>;

        $i4 = $r4[$i3];

        $r5[$i5] = $i4;

        $r6 = r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: int[] initialHash>;

        $i6 = r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: int size>;

        $i7 = $i6 + 1;

        $r6[$i3] = $i7;

        $i8 = r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: int size>;

        $i9 = $i8 + 1;

        r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: int size> = $i9;

        r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: boolean latestPushResult> = $z0;

        $z1 = r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: boolean latestPushResult>;

        return $z1;
    }

    public void pushNocheck(java.lang.Object)
    {
        java.lang.Object[] $r1, $r3;
        int[] $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7;
        java.lang.Object r2;
        com.sun.xml.bind.v2.util.CollisionCheckStack r0;

        r0 := @this: com.sun.xml.bind.v2.util.CollisionCheckStack;

        r2 := @parameter0: java.lang.Object;

        $r1 = r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: java.lang.Object[] data>;

        $i1 = lengthof $r1;

        $i0 = r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: int size>;

        if $i1 != $i0 goto label1;

        specialinvoke r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: void expandCapacity()>();

     label1:
        $r3 = r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: java.lang.Object[] data>;

        $i2 = r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: int size>;

        $r3[$i2] = r2;

        $r4 = r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: int[] next>;

        $i3 = r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: int size>;

        $i7 = (int) -1;

        $r4[$i3] = $i7;

        $i4 = r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: int size>;

        $i5 = $i4 + 1;

        r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: int size> = $i5;

        return;
    }

    public boolean findDuplicate(java.lang.Object)
    {
        int $i0;
        java.lang.Object r1;
        com.sun.xml.bind.v2.util.CollisionCheckStack r0;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.util.CollisionCheckStack;

        r1 := @parameter0: java.lang.Object;

        $i0 = specialinvoke r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: int hash(java.lang.Object)>(r1);

        $z0 = specialinvoke r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: boolean findDuplicate(java.lang.Object,int)>(r1, $i0);

        return $z0;
    }

    public java.lang.Object get(int)
    {
        java.lang.Object[] $r1;
        int i0;
        java.lang.Object $r2;
        com.sun.xml.bind.v2.util.CollisionCheckStack r0;

        r0 := @this: com.sun.xml.bind.v2.util.CollisionCheckStack;

        i0 := @parameter0: int;

        $r1 = r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: java.lang.Object[] data>;

        $r2 = $r1[i0];

        return $r2;
    }

    public int size()
    {
        int $i0;
        com.sun.xml.bind.v2.util.CollisionCheckStack r0;

        r0 := @this: com.sun.xml.bind.v2.util.CollisionCheckStack;

        $i0 = r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: int size>;

        return $i0;
    }

    private int hash(java.lang.Object)
    {
        int[] $r2;
        int $i0, $i1, $i2, $i3;
        java.lang.Object r1;
        com.sun.xml.bind.v2.util.CollisionCheckStack r0;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.util.CollisionCheckStack;

        r1 := @parameter0: java.lang.Object;

        $z0 = r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: boolean useIdentity>;

        if $z0 == 0 goto label1;

        $i3 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r1);

        goto label2;

     label1:
        $i3 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

     label2:
        $i1 = $i3 & 2147483647;

        $r2 = r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: int[] initialHash>;

        $i0 = lengthof $r2;

        $i2 = $i1 % $i0;

        return $i2;
    }

    public java.lang.Object pop()
    {
        java.lang.Object[] $r1, $r3;
        java.lang.AssertionError $r7;
        int[] $r4, $r5, $r6;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, $i7, $i8, $i9;
        com.sun.xml.bind.v2.util.CollisionCheckStack r0;
        boolean $z0;
        java.lang.Object r2;

        r0 := @this: com.sun.xml.bind.v2.util.CollisionCheckStack;

        $i0 = r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: int size>;

        $i1 = $i0 - 1;

        r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: int size> = $i1;

        $r1 = r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: java.lang.Object[] data>;

        $i2 = r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: int size>;

        r2 = $r1[$i2];

        $r3 = r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: java.lang.Object[] data>;

        $i3 = r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: int size>;

        $r3[$i3] = null;

        $r4 = r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: int[] next>;

        $i4 = r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: int size>;

        i5 = $r4[$i4];

        if i5 >= 0 goto label1;

        goto label3;

     label1:
        $i6 = specialinvoke r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: int hash(java.lang.Object)>(r2);

        $z0 = <com.sun.xml.bind.v2.util.CollisionCheckStack: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $r6 = r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: int[] initialHash>;

        $i9 = $r6[$i6];

        $i7 = r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: int size>;

        $i8 = $i7 + 1;

        if $i9 == $i8 goto label2;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label2:
        $r5 = r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: int[] initialHash>;

        $r5[$i6] = i5;

     label3:
        return r2;
    }

    public java.lang.Object peek()
    {
        java.lang.Object[] $r1;
        int $i0, $i1;
        java.lang.Object $r2;
        com.sun.xml.bind.v2.util.CollisionCheckStack r0;

        r0 := @this: com.sun.xml.bind.v2.util.CollisionCheckStack;

        $r1 = r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: java.lang.Object[] data>;

        $i0 = r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: int size>;

        $i1 = $i0 - 1;

        $r2 = $r1[$i1];

        return $r2;
    }

    private boolean findDuplicate(java.lang.Object, int)
    {
        java.lang.Object[] $r2;
        int[] $r1, $r5;
        int i0, i1, i2, $i4;
        java.lang.Object r3, r4;
        com.sun.xml.bind.v2.util.CollisionCheckStack r0;
        boolean $z0, $z1;

        r0 := @this: com.sun.xml.bind.v2.util.CollisionCheckStack;

        r4 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $r1 = r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: int[] initialHash>;

        i1 = $r1[i0];

     label1:
        if i1 == 0 goto label4;

        $i4 = (int) -1;

        i2 = i1 + $i4;

        $r2 = r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: java.lang.Object[] data>;

        r3 = $r2[i2];

        $z0 = r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: boolean useIdentity>;

        if $z0 == 0 goto label2;

        if r3 != r4 goto label3;

        return 1;

     label2:
        $z1 = virtualinvoke r4.<java.lang.Object: boolean equals(java.lang.Object)>(r3);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        $r5 = r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: int[] next>;

        i1 = $r5[i2];

        goto label1;

     label4:
        return 0;
    }

    private void expandCapacity()
    {
        java.lang.Object[] $r1, r2, $r4;
        int[] r3, $r5;
        int i0, i1;
        com.sun.xml.bind.v2.util.CollisionCheckStack r0;

        r0 := @this: com.sun.xml.bind.v2.util.CollisionCheckStack;

        $r1 = r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: java.lang.Object[] data>;

        i0 = lengthof $r1;

        i1 = i0 * 2;

        r2 = newarray (java.lang.Object)[i1];

        r3 = newarray (int)[i1];

        $r4 = r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: java.lang.Object[] data>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r2, 0, i0);

        $r5 = r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: int[] next>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r3, 0, i0);

        r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: java.lang.Object[] data> = r2;

        r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: int[] next> = r3;

        return;
    }

    public void reset()
    {
        int $i0;
        int[] $r1;
        com.sun.xml.bind.v2.util.CollisionCheckStack r0;

        r0 := @this: com.sun.xml.bind.v2.util.CollisionCheckStack;

        $i0 = r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: int size>;

        if $i0 <= 0 goto label1;

        r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: int size> = 0;

        $r1 = r0.<com.sun.xml.bind.v2.util.CollisionCheckStack: int[] initialHash>;

        staticinvoke <java.util.Arrays: void fill(int[],int)>($r1, 0);

     label1:
        return;
    }

    public java.lang.String getCycleString()
    {
        int $i0, i1, $i3;
        java.lang.Object $r2, $r3;
        java.lang.StringBuilder $r5;
        java.lang.String $r4;
        com.sun.xml.bind.v2.util.CollisionCheckStack r1;

        r1 := @this: com.sun.xml.bind.v2.util.CollisionCheckStack;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $i0 = virtualinvoke r1.<com.sun.xml.bind.v2.util.CollisionCheckStack: int size()>();

        i1 = $i0 - 1;

        $r2 = virtualinvoke r1.<com.sun.xml.bind.v2.util.CollisionCheckStack: java.lang.Object get(int)>(i1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

     label1:
        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -> ");

        $i3 = (int) -1;

        i1 = i1 + $i3;

        $r3 = virtualinvoke r1.<com.sun.xml.bind.v2.util.CollisionCheckStack: java.lang.Object get(int)>(i1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        if $r2 != $r3 goto label1;

        $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lcom/sun/xml/bind/v2/util/CollisionCheckStack;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.sun.xml.bind.v2.util.CollisionCheckStack: boolean $assertionsDisabled> = $z1;

        return;
    }
}
