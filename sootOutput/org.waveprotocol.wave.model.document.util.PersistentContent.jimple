public class org.waveprotocol.wave.model.document.util.PersistentContent extends org.waveprotocol.wave.model.document.util.FilteredView implements org.waveprotocol.wave.model.document.raw.RawDocument, org.waveprotocol.wave.model.document.util.WritableLocalDocument
{
    private static final java.lang.Object DEEP_TRANSPARENT_MARKER;
    private static final org.waveprotocol.wave.model.document.util.Property DEEP_TRANSPARENT;
    private static final org.waveprotocol.wave.model.document.util.Property HARD;
    private final org.waveprotocol.wave.model.document.util.ElementManager elementManager;
    private final org.waveprotocol.wave.model.document.raw.RawDocument fullDoc;
    private final org.waveprotocol.wave.model.document.util.FilteredView filteredDoc;
    private final org.waveprotocol.wave.model.document.util.PersistentContent$HardContent hardDoc;

    public static void makeDeepTransparent(org.waveprotocol.wave.model.document.util.ElementManager, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.ElementManager r0;
        org.waveprotocol.wave.model.document.util.Property $r3;
        java.lang.Object r1, $r2;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.ElementManager;

        r1 := @parameter1: java.lang.Object;

        $r3 = <org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.util.Property DEEP_TRANSPARENT>;

        $r2 = <org.waveprotocol.wave.model.document.util.PersistentContent: java.lang.Object DEEP_TRANSPARENT_MARKER>;

        interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.ElementManager: void setProperty(org.waveprotocol.wave.model.document.util.Property,java.lang.Object,java.lang.Object)>($r3, r1, $r2);

        return;
    }

    public static void makeHard(org.waveprotocol.wave.model.document.util.ElementManager, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.ElementManager r0;
        org.waveprotocol.wave.model.document.util.Property $r2, $r3;
        java.lang.Object r1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.ElementManager;

        r1 := @parameter1: java.lang.Object;

        $r3 = <org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.util.Property HARD>;

        $r2 = <org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.util.Property HARD>;

        interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.ElementManager: void setProperty(org.waveprotocol.wave.model.document.util.Property,java.lang.Object,java.lang.Object)>($r3, r1, $r2);

        return;
    }

    public void <init>(org.waveprotocol.wave.model.document.raw.RawDocument, org.waveprotocol.wave.model.document.util.ElementManager)
    {
        org.waveprotocol.wave.model.document.raw.RawDocument r1;
        org.waveprotocol.wave.model.document.util.ElementManager r2;
        org.waveprotocol.wave.model.document.util.PersistentContent r0;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.document.util.PersistentContent$HardContent $r4;

        r0 := @this: org.waveprotocol.wave.model.document.util.PersistentContent;

        r1 := @parameter0: org.waveprotocol.wave.model.document.raw.RawDocument;

        r2 := @parameter1: org.waveprotocol.wave.model.document.util.ElementManager;

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.FilteredView: void <init>(org.waveprotocol.wave.model.document.ReadableDocument)>(r1);

        r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.util.FilteredView filteredDoc> = r0;

        r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.raw.RawDocument fullDoc> = r1;

        r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.util.ElementManager elementManager> = r2;

        $r3 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object getDocumentElement()>();

        staticinvoke <org.waveprotocol.wave.model.document.util.PersistentContent: void makeHard(org.waveprotocol.wave.model.document.util.ElementManager,java.lang.Object)>(r2, $r3);

        $r4 = new org.waveprotocol.wave.model.document.util.PersistentContent$HardContent;

        specialinvoke $r4.<org.waveprotocol.wave.model.document.util.PersistentContent$HardContent: void <init>(org.waveprotocol.wave.model.document.util.PersistentContent)>(r0);

        r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.util.PersistentContent$HardContent hardDoc> = $r4;

        return;
    }

    public org.waveprotocol.wave.model.document.util.PersistentContent$HardContent hardView()
    {
        org.waveprotocol.wave.model.document.util.PersistentContent r0;
        org.waveprotocol.wave.model.document.util.PersistentContent$HardContent $r1;

        r0 := @this: org.waveprotocol.wave.model.document.util.PersistentContent;

        $r1 = r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.util.PersistentContent$HardContent hardDoc>;

        return $r1;
    }

    protected org.waveprotocol.wave.model.document.util.FilteredView$Skip getSkipLevel(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.PersistentContent r0;
        org.waveprotocol.wave.model.document.raw.RawDocument $r3;
        java.lang.Object r1, $r4;
        org.waveprotocol.wave.model.document.util.FilteredView$Skip $r2, $r5, $r6;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.document.util.PersistentContent;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.PersistentContent: boolean isPersistent(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r3 = r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.raw.RawDocument fullDoc>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object getDocumentElement()>();

        if r1 != $r4 goto label2;

     label1:
        $r2 = <org.waveprotocol.wave.model.document.util.FilteredView$Skip: org.waveprotocol.wave.model.document.util.FilteredView$Skip NONE>;

        return $r2;

     label2:
        $z1 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.PersistentContent: boolean isDeepTransparent(java.lang.Object)>(r1);

        if $z1 == 0 goto label3;

        $r6 = <org.waveprotocol.wave.model.document.util.FilteredView$Skip: org.waveprotocol.wave.model.document.util.FilteredView$Skip DEEP>;

        return $r6;

     label3:
        $r5 = <org.waveprotocol.wave.model.document.util.FilteredView$Skip: org.waveprotocol.wave.model.document.util.FilteredView$Skip SHALLOW>;

        return $r5;
    }

    private boolean isDeepTransparent(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.Property $r3;
        org.waveprotocol.wave.model.document.util.PersistentContent r0;
        java.lang.Object r1, $r2, $r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.util.PersistentContent;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.PersistentContent: java.lang.Object asElement(java.lang.Object)>(r1);

        if $r2 == null goto label1;

        $r3 = <org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.util.Property DEEP_TRANSPARENT>;

        $r4 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.PersistentContent: java.lang.Object getProperty(org.waveprotocol.wave.model.document.util.Property,java.lang.Object)>($r3, $r2);

        if $r4 == null goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private boolean isHard(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.Property $r3;
        org.waveprotocol.wave.model.document.util.PersistentContent r0;
        java.lang.Object r1, $r2, $r4;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.document.util.PersistentContent;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.PersistentContent: java.lang.Object asElement(java.lang.Object)>(r1);

        if $r2 == null goto label1;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.PersistentContent: boolean isPersistent(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        $r3 = <org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.util.Property HARD>;

        $r4 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.PersistentContent: java.lang.Object getProperty(org.waveprotocol.wave.model.document.util.Property,java.lang.Object)>($r3, $r2);

        if $r4 == null goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public java.lang.Object transparentCreate(java.lang.String, java.util.Map, java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.PersistentContent r0;
        org.waveprotocol.wave.model.document.raw.RawDocument $r3, $r6;
        java.util.Map r5;
        java.lang.Object r1, r2, $r7;
        java.lang.String r4;

        r0 := @this: org.waveprotocol.wave.model.document.util.PersistentContent;

        r4 := @parameter0: java.lang.String;

        r5 := @parameter1: java.util.Map;

        r1 := @parameter2: java.lang.Object;

        r2 := @parameter3: java.lang.Object;

        $r3 = r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.raw.RawDocument fullDoc>;

        staticinvoke <org.waveprotocol.wave.model.document.util.Point: void checkRelationship(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.Object,java.lang.String)>($r3, r1, r2, "transparentCreate");

        $r6 = r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.raw.RawDocument fullDoc>;

        $r7 = interfaceinvoke $r6.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object createElement(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object)>(r4, r5, r1, r2);

        return $r7;
    }

    public java.lang.Object transparentCreate(java.lang.String, java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.PersistentContent r0;
        java.lang.IllegalArgumentException $r7;
        org.waveprotocol.wave.model.document.raw.RawDocument $r3, $r5;
        java.lang.Object r1, r2, $r6;
        java.lang.String r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.util.PersistentContent;

        r4 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        $r3 = r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.raw.RawDocument fullDoc>;

        staticinvoke <org.waveprotocol.wave.model.document.util.Point: void checkRelationship(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.Object,java.lang.String)>($r3, r1, r2, "transparentCreate");

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.PersistentContent: boolean isPersistent(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("transparentCreate: Cannot create a local text node inside a persistent element, must wrap the local text node in a local element");

        throw $r7;

     label1:
        $r5 = r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.raw.RawDocument fullDoc>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object createTextNode(java.lang.String,java.lang.Object,java.lang.Object)>(r4, r1, r2);

        return $r6;
    }

    public void transparentSetAttribute(java.lang.Object, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.document.util.PersistentContent r0;
        java.lang.IllegalArgumentException $r6;
        org.waveprotocol.wave.model.document.raw.RawDocument $r4, $r5;
        java.lang.Object r1;
        java.lang.String r2, r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.util.PersistentContent;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.PersistentContent: boolean isPersistent(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("transparentSetAttribute: node must not be persistent");

        throw $r6;

     label1:
        if r2 == null goto label2;

        $r5 = r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.raw.RawDocument fullDoc>;

        interfaceinvoke $r5.<org.waveprotocol.wave.model.document.raw.RawDocument: void setAttribute(java.lang.Object,java.lang.String,java.lang.String)>(r1, r3, r2);

        goto label3;

     label2:
        $r4 = r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.raw.RawDocument fullDoc>;

        interfaceinvoke $r4.<org.waveprotocol.wave.model.document.raw.RawDocument: void removeAttribute(java.lang.Object,java.lang.String)>(r1, r3);

     label3:
        return;
    }

    public void transparentUnwrap(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.PersistentContent r0;
        java.lang.IllegalArgumentException $r8;
        org.waveprotocol.wave.model.document.raw.RawDocument $r2, $r4, $r5, $r7;
        java.lang.Object r1, $r3, $r6;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.util.PersistentContent;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.PersistentContent: boolean isPersistent(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("transparentUnwrap: Cannot directly manipulate persistent elements");

        throw $r8;

     label1:
        $r2 = r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.raw.RawDocument fullDoc>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object getParentElement(java.lang.Object)>(r1);

        $r5 = r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.raw.RawDocument fullDoc>;

        $r4 = r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.raw.RawDocument fullDoc>;

        $r6 = interfaceinvoke $r4.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object getFirstChild(java.lang.Object)>(r1);

        interfaceinvoke $r5.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object insertBefore(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r3, $r6, null, r1);

        $r7 = r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.raw.RawDocument fullDoc>;

        interfaceinvoke $r7.<org.waveprotocol.wave.model.document.raw.RawDocument: void removeChild(java.lang.Object,java.lang.Object)>($r3, r1);

        return;
    }

    public void transparentDeepRemove(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.PersistentContent r0;
        java.lang.IllegalArgumentException $r2;
        org.waveprotocol.wave.model.document.util.FilteredView $r3;
        org.waveprotocol.wave.model.document.raw.RawDocument $r5, $r6;
        java.lang.Object r1, $r4, $r7;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.util.PersistentContent;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.PersistentContent: boolean isPersistent(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r3 = r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.util.FilteredView filteredDoc>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.util.FilteredView: java.lang.Object getFirstChild(java.lang.Object)>(r1);

        if $r4 == null goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("transparentDeepRemove: Cannot directly manipulate persistent elements");

        throw $r2;

     label2:
        $r6 = r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.raw.RawDocument fullDoc>;

        $r5 = r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.raw.RawDocument fullDoc>;

        $r7 = interfaceinvoke $r5.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object getParentElement(java.lang.Object)>(r1);

        interfaceinvoke $r6.<org.waveprotocol.wave.model.document.raw.RawDocument: void removeChild(java.lang.Object,java.lang.Object)>($r7, r1);

        return;
    }

    public void transparentMove(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.PersistentContent r2;
        java.lang.IllegalArgumentException $r7, $r10;
        org.waveprotocol.wave.model.document.raw.RawDocument $r5, $r6, $r8;
        java.lang.Object r0, r1, r3, r4, $r9, r11;

        r2 := @this: org.waveprotocol.wave.model.document.util.PersistentContent;

        r3 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.Object;

        r1 := @parameter2: java.lang.Object;

        r0 := @parameter3: java.lang.Object;

        if r0 == null goto label1;

        $r8 = r2.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.raw.RawDocument fullDoc>;

        $r9 = interfaceinvoke $r8.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object getParentElement(java.lang.Object)>(r0);

        if $r9 == r3 goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("refChild must be a child of newParent");

        throw $r10;

     label1:
        if r1 == null goto label4;

        r11 = r4;

     label2:
        if r11 == r1 goto label4;

        if r11 != null goto label3;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("toExcl must be null or be an indirect, following sibling of fromIncl");

        throw $r7;

     label3:
        $r6 = r2.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.raw.RawDocument fullDoc>;

        r11 = interfaceinvoke $r6.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object getNextSibling(java.lang.Object)>(r11);

        goto label2;

     label4:
        $r5 = r2.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.raw.RawDocument fullDoc>;

        interfaceinvoke $r5.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object insertBefore(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r3, r4, r1, r0);

        return;
    }

    public void markNodeForPersistence(java.lang.Object, boolean)
    {
        org.waveprotocol.wave.model.document.util.PersistentContent r0;
        java.lang.Object r1;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.model.document.util.PersistentContent;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        return;
    }

    public java.lang.Object insertBefore(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.FilteredView $r1, $r7;
        java.lang.UnsupportedOperationException $r10;
        org.waveprotocol.wave.model.document.util.PersistentContent r0;
        org.waveprotocol.wave.model.document.raw.RawDocument $r5, $r8;
        java.lang.Object $r2, $r3, r4, $r6, $r9, r11, r12, r13, r14, $r15;

        r0 := @this: org.waveprotocol.wave.model.document.util.PersistentContent;

        r4 := @parameter0: java.lang.Object;

        r11 := @parameter1: java.lang.Object;

        r12 := @parameter2: java.lang.Object;

        r13 := @parameter3: java.lang.Object;

        if r11 != r12 goto label1;

        return r11;

     label1:
        if r13 == null goto label2;

        $r10 = new java.lang.UnsupportedOperationException;

        specialinvoke $r10.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("insertBefore: Non-null refChild not implemented");

        throw $r10;

     label2:
        $r1 = r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.util.FilteredView filteredDoc>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.util.FilteredView: java.lang.Object getPreviousSibling(java.lang.Object)>(r11);

        if $r2 != null goto label3;

        $r8 = r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.raw.RawDocument fullDoc>;

        $r7 = r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.util.FilteredView filteredDoc>;

        $r9 = virtualinvoke $r7.<org.waveprotocol.wave.model.document.util.FilteredView: java.lang.Object getParentElement(java.lang.Object)>(r11);

        r14 = interfaceinvoke $r8.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object getFirstChild(java.lang.Object)>($r9);

        goto label4;

     label3:
        r14 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.PersistentContent: java.lang.Object transparentSlice(java.lang.Object)>(r11);

     label4:
        if r12 != null goto label5;

        $r15 = null;

        goto label6;

     label5:
        $r15 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.PersistentContent: java.lang.Object transparentSlice(java.lang.Object)>(r12);

     label6:
        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.PersistentContent: java.lang.Object transparentSlice(java.lang.Object)>(r13);

        $r5 = r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.raw.RawDocument fullDoc>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object insertBefore(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r4, r14, $r15, $r3);

        return $r6;
    }

    public java.lang.Object insertBefore(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.PersistentContent r0;
        java.lang.Object r1, r2, $r4, r5, $r6;
        org.waveprotocol.wave.model.document.util.FilteredView $r3;

        r0 := @this: org.waveprotocol.wave.model.document.util.PersistentContent;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r5 := @parameter2: java.lang.Object;

        $r3 = r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.util.FilteredView filteredDoc>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.util.FilteredView: java.lang.Object getNextSibling(java.lang.Object)>(r2);

        $r6 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.PersistentContent: java.lang.Object insertBefore(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r1, r2, $r4, r5);

        return $r6;
    }

    public void removeChild(java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.raw.RawDocument $r2, $r3;
        org.waveprotocol.wave.model.document.util.PersistentContent r0;
        java.lang.Object r1, $r4, r5;

        r0 := @this: org.waveprotocol.wave.model.document.util.PersistentContent;

        r5 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        $r3 = r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.raw.RawDocument fullDoc>;

        $r2 = r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.raw.RawDocument fullDoc>;

        $r4 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object getParentElement(java.lang.Object)>(r1);

        interfaceinvoke $r3.<org.waveprotocol.wave.model.document.raw.RawDocument: void removeChild(java.lang.Object,java.lang.Object)>($r4, r1);

        return;
    }

    private boolean isPersistent(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.raw.RawDocument $r2;
        org.waveprotocol.wave.model.util.OffsetList$Container $r3;
        org.waveprotocol.wave.model.document.util.PersistentContent r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.util.PersistentContent;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.raw.RawDocument fullDoc>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.raw.RawDocument: org.waveprotocol.wave.model.util.OffsetList$Container getIndexingContainer(java.lang.Object)>(r1);

        if $r3 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.Object transparentSlice(java.lang.Object)
    {
        boolean $z0;
        org.waveprotocol.wave.model.document.util.PersistentContent r0;
        java.lang.RuntimeException $r11;
        java.lang.IllegalArgumentException $r12;
        org.waveprotocol.wave.model.document.raw.RawDocument $r1, $r3, $r5, $r7, $r10;
        java.lang.Object $r2, $r4, $r6, $r8, $r9, r13, r14;

        r0 := @this: org.waveprotocol.wave.model.document.util.PersistentContent;

        r13 := @parameter0: java.lang.Object;

        if r13 != null goto label1;

        return null;

     label1:
        $r1 = r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.raw.RawDocument fullDoc>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object getParentElement(java.lang.Object)>(r13);

        r14 = $r2;

        if $r2 != null goto label2;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("transparentSlice: Cannot split before the root element");

        throw $r12;

     label2:
        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.PersistentContent: boolean isHard(java.lang.Object)>(r14);

        if $z0 != 0 goto label6;

        $r3 = r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.raw.RawDocument fullDoc>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object getParentElement(java.lang.Object)>(r14);

        if $r4 != null goto label3;

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String)>("The root node is not persistent!?!?");

        throw $r11;

     label3:
        $r5 = r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.raw.RawDocument fullDoc>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object getFirstChild(java.lang.Object)>(r14);

        if r13 != $r6 goto label4;

        r13 = r14;

        goto label5;

     label4:
        $r7 = r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.raw.RawDocument fullDoc>;

        $r8 = interfaceinvoke $r7.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object getNextSibling(java.lang.Object)>(r14);

        $r9 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.PersistentContent: java.lang.Object createShallowCopy(java.lang.Object,java.lang.Object,java.lang.Object)>(r14, $r4, $r8);

        $r10 = r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.raw.RawDocument fullDoc>;

        interfaceinvoke $r10.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object insertBefore(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r9, r13, null, null);

        r13 = $r9;

     label5:
        r14 = $r4;

        goto label2;

     label6:
        return r13;
    }

    private java.lang.Object createShallowCopy(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.PersistentContent r0;
        org.waveprotocol.wave.model.document.raw.RawDocument $r2, $r3, $r5;
        java.util.Map $r6;
        java.lang.Object r1, r7, r8, $r9;
        java.lang.String $r4;

        r0 := @this: org.waveprotocol.wave.model.document.util.PersistentContent;

        r1 := @parameter0: java.lang.Object;

        r7 := @parameter1: java.lang.Object;

        r8 := @parameter2: java.lang.Object;

        $r3 = r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.raw.RawDocument fullDoc>;

        $r2 = r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.raw.RawDocument fullDoc>;

        $r4 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.String getTagName(java.lang.Object)>(r1);

        $r5 = r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.raw.RawDocument fullDoc>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.model.document.raw.RawDocument: java.util.Map getAttributes(java.lang.Object)>(r1);

        $r9 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object createElement(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object)>($r4, $r6, r7, r8);

        return $r9;
    }

    public java.lang.Object mergeText(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.PersistentContent r0;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.model.document.util.PersistentContent;

        r1 := @parameter0: java.lang.Object;

        return null;
    }

    public void appendData(java.lang.Object, java.lang.String)
    {
        org.waveprotocol.wave.model.document.raw.RawDocument $r3;
        org.waveprotocol.wave.model.document.util.PersistentContent r0;
        java.lang.Object r1;
        java.lang.String r2;

        r0 := @this: org.waveprotocol.wave.model.document.util.PersistentContent;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.raw.RawDocument fullDoc>;

        interfaceinvoke $r3.<org.waveprotocol.wave.model.document.raw.RawDocument: void appendData(java.lang.Object,java.lang.String)>(r1, r2);

        return;
    }

    public java.lang.Object createElement(java.lang.String, java.util.Map, java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.PersistentContent r0;
        org.waveprotocol.wave.model.document.raw.RawDocument $r4, $r6;
        java.util.Map r3;
        java.lang.Object $r1, $r5, r7, r8;
        java.lang.String r2;

        r0 := @this: org.waveprotocol.wave.model.document.util.PersistentContent;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.util.Map;

        r7 := @parameter2: java.lang.Object;

        r8 := @parameter3: java.lang.Object;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.PersistentContent: java.lang.Object transparentSlice(java.lang.Object)>(r8);

        if $r1 == null goto label1;

        $r6 = r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.raw.RawDocument fullDoc>;

        r7 = interfaceinvoke $r6.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object getParentElement(java.lang.Object)>($r1);

     label1:
        $r4 = r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.raw.RawDocument fullDoc>;

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object createElement(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object)>(r2, r3, r7, $r1);

        return $r5;
    }

    public java.lang.Object createTextNode(java.lang.String, java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.PersistentContent r0;
        org.waveprotocol.wave.model.document.raw.RawDocument $r3, $r5;
        java.lang.Object $r1, $r4, r6, r7;
        java.lang.String r2;

        r0 := @this: org.waveprotocol.wave.model.document.util.PersistentContent;

        r2 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.Object;

        r7 := @parameter2: java.lang.Object;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.PersistentContent: java.lang.Object transparentSlice(java.lang.Object)>(r7);

        if $r1 == null goto label1;

        $r5 = r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.raw.RawDocument fullDoc>;

        r6 = interfaceinvoke $r5.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object getParentElement(java.lang.Object)>($r1);

     label1:
        $r3 = r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.raw.RawDocument fullDoc>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object createTextNode(java.lang.String,java.lang.Object,java.lang.Object)>(r2, r6, $r1);

        return $r4;
    }

    public void deleteData(java.lang.Object, int, int)
    {
        org.waveprotocol.wave.model.document.raw.RawDocument $r2;
        int i0, i1;
        org.waveprotocol.wave.model.document.util.PersistentContent r0;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.model.document.util.PersistentContent;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.raw.RawDocument fullDoc>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.document.raw.RawDocument: void deleteData(java.lang.Object,int,int)>(r1, i0, i1);

        return;
    }

    public void insertData(java.lang.Object, int, java.lang.String)
    {
        org.waveprotocol.wave.model.document.raw.RawDocument $r3;
        int i0;
        org.waveprotocol.wave.model.document.util.PersistentContent r0;
        java.lang.Object r1;
        java.lang.String r2;

        r0 := @this: org.waveprotocol.wave.model.document.util.PersistentContent;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        $r3 = r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.raw.RawDocument fullDoc>;

        interfaceinvoke $r3.<org.waveprotocol.wave.model.document.raw.RawDocument: void insertData(java.lang.Object,int,java.lang.String)>(r1, i0, r2);

        return;
    }

    public void removeAttribute(java.lang.Object, java.lang.String)
    {
        org.waveprotocol.wave.model.document.raw.RawDocument $r3;
        org.waveprotocol.wave.model.document.util.PersistentContent r0;
        java.lang.Object r1;
        java.lang.String r2;

        r0 := @this: org.waveprotocol.wave.model.document.util.PersistentContent;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.raw.RawDocument fullDoc>;

        interfaceinvoke $r3.<org.waveprotocol.wave.model.document.raw.RawDocument: void removeAttribute(java.lang.Object,java.lang.String)>(r1, r2);

        return;
    }

    public void setAttribute(java.lang.Object, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.document.raw.RawDocument $r4;
        org.waveprotocol.wave.model.document.util.PersistentContent r0;
        java.lang.Object r1;
        java.lang.String r2, r3;

        r0 := @this: org.waveprotocol.wave.model.document.util.PersistentContent;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.raw.RawDocument fullDoc>;

        interfaceinvoke $r4.<org.waveprotocol.wave.model.document.raw.RawDocument: void setAttribute(java.lang.Object,java.lang.String,java.lang.String)>(r1, r2, r3);

        return;
    }

    public java.lang.Object splitText(java.lang.Object, int)
    {
        org.waveprotocol.wave.model.document.raw.RawDocument $r2;
        int i0;
        org.waveprotocol.wave.model.document.util.PersistentContent r0;
        java.lang.Object r1, $r3;

        r0 := @this: org.waveprotocol.wave.model.document.util.PersistentContent;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $r2 = r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.raw.RawDocument fullDoc>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object splitText(java.lang.Object,int)>(r1, i0);

        return $r3;
    }

    public void setIndexingContainer(java.lang.Object, org.waveprotocol.wave.model.util.OffsetList$Container)
    {
        org.waveprotocol.wave.model.document.raw.RawDocument $r3;
        org.waveprotocol.wave.model.util.OffsetList$Container r2;
        org.waveprotocol.wave.model.document.util.PersistentContent r0;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.model.document.util.PersistentContent;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.waveprotocol.wave.model.util.OffsetList$Container;

        $r3 = r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.raw.RawDocument fullDoc>;

        interfaceinvoke $r3.<org.waveprotocol.wave.model.document.raw.RawDocument: void setIndexingContainer(java.lang.Object,org.waveprotocol.wave.model.util.OffsetList$Container)>(r1, r2);

        return;
    }

    public org.waveprotocol.wave.model.util.OffsetList$Container getIndexingContainer(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.raw.RawDocument $r2;
        org.waveprotocol.wave.model.util.OffsetList$Container $r3;
        org.waveprotocol.wave.model.document.util.PersistentContent r0;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.model.document.util.PersistentContent;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.raw.RawDocument fullDoc>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.raw.RawDocument: org.waveprotocol.wave.model.util.OffsetList$Container getIndexingContainer(java.lang.Object)>(r1);

        return $r3;
    }

    public java.lang.Object getProperty(org.waveprotocol.wave.model.document.util.Property, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.Property r1;
        org.waveprotocol.wave.model.document.util.ElementManager $r3;
        org.waveprotocol.wave.model.document.util.PersistentContent r0;
        java.lang.Object r2, $r4;

        r0 := @this: org.waveprotocol.wave.model.document.util.PersistentContent;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.Property;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.util.ElementManager elementManager>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.util.ElementManager: java.lang.Object getProperty(org.waveprotocol.wave.model.document.util.Property,java.lang.Object)>(r1, r2);

        return $r4;
    }

    public boolean isDestroyed(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.ElementManager $r2;
        org.waveprotocol.wave.model.document.util.PersistentContent r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.util.PersistentContent;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.util.ElementManager elementManager>;

        $z0 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.util.ElementManager: boolean isDestroyed(java.lang.Object)>(r1);

        return $z0;
    }

    public void setProperty(org.waveprotocol.wave.model.document.util.Property, java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.Property r1;
        org.waveprotocol.wave.model.document.util.ElementManager $r4;
        org.waveprotocol.wave.model.document.util.PersistentContent r0;
        java.lang.Object r2, r3;

        r0 := @this: org.waveprotocol.wave.model.document.util.PersistentContent;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.Property;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r4 = r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.util.ElementManager elementManager>;

        interfaceinvoke $r4.<org.waveprotocol.wave.model.document.util.ElementManager: void setProperty(org.waveprotocol.wave.model.document.util.Property,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        return;
    }

    public boolean isTransparent(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.PersistentContent r0;
        java.lang.Object r1;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.document.util.PersistentContent;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.PersistentContent: boolean isPersistent(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public void onBeforeFilter(org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.model.document.util.PersistentContent r0;
        org.waveprotocol.wave.model.document.util.Point r1;

        r0 := @this: org.waveprotocol.wave.model.document.util.PersistentContent;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        return;
    }

    public java.lang.String toString()
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc $r3;
        java.lang.StringBuilder $r0, $r1, $r4;
        org.waveprotocol.wave.model.document.util.PersistentContent r2;
        java.lang.String $r5;

        r2 := @this: org.waveprotocol.wave.model.document.util.PersistentContent;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PersistentContent ");

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc innerXml(org.waveprotocol.wave.model.document.ReadableDocument)>(r2);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    static org.waveprotocol.wave.model.document.raw.RawDocument access$000(org.waveprotocol.wave.model.document.util.PersistentContent)
    {
        org.waveprotocol.wave.model.document.util.PersistentContent r0;
        org.waveprotocol.wave.model.document.raw.RawDocument $r1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.PersistentContent;

        $r1 = r0.<org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.raw.RawDocument fullDoc>;

        return $r1;
    }

    static boolean access$100(org.waveprotocol.wave.model.document.util.PersistentContent, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.PersistentContent r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.PersistentContent;

        r1 := @parameter1: java.lang.Object;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.PersistentContent: boolean isHard(java.lang.Object)>(r1);

        return $z0;
    }

    static void <clinit>()
    {
        java.lang.Object $r0;
        org.waveprotocol.wave.model.document.util.Property$ImmutableProperty $r1, $r2;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <org.waveprotocol.wave.model.document.util.PersistentContent: java.lang.Object DEEP_TRANSPARENT_MARKER> = $r0;

        $r1 = staticinvoke <org.waveprotocol.wave.model.document.util.Property: org.waveprotocol.wave.model.document.util.Property$ImmutableProperty immutable(java.lang.String)>("p_deep_transparent");

        <org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.util.Property DEEP_TRANSPARENT> = $r1;

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.util.Property: org.waveprotocol.wave.model.document.util.Property$ImmutableProperty immutable(java.lang.String)>("p_hard");

        <org.waveprotocol.wave.model.document.util.PersistentContent: org.waveprotocol.wave.model.document.util.Property HARD> = $r2;

        return;
    }
}
