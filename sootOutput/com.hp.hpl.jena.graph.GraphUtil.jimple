public class com.hp.hpl.jena.graph.GraphUtil extends java.lang.Object
{
    private static com.hp.hpl.jena.util.iterator.Map1 mapSubject;
    private static com.hp.hpl.jena.util.iterator.Map1 mapPredicate;
    private static com.hp.hpl.jena.util.iterator.Map1 mapObject;
    private static final boolean OldStyle;
    private static final int sliceSize;

    private void <init>()
    {
        com.hp.hpl.jena.graph.GraphUtil r0;

        r0 := @this: com.hp.hpl.jena.graph.GraphUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.hp.hpl.jena.util.iterator.ExtendedIterator listSubjects(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        java.util.Iterator $r8;
        com.hp.hpl.jena.util.iterator.WrappedIterator $r9;
        java.util.Set $r7;
        com.hp.hpl.jena.graph.Node r1, r2, $r3;
        com.hp.hpl.jena.util.iterator.Map1 $r5;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r4, $r6;
        com.hp.hpl.jena.graph.Graph r0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        r2 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r3 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r4 = interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r3, r1, r2);

        $r5 = <com.hp.hpl.jena.graph.GraphUtil: com.hp.hpl.jena.util.iterator.Map1 mapSubject>;

        $r6 = interfaceinvoke $r4.<com.hp.hpl.jena.util.iterator.ExtendedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator mapWith(com.hp.hpl.jena.util.iterator.Map1)>($r5);

        $r7 = interfaceinvoke $r6.<com.hp.hpl.jena.util.iterator.ExtendedIterator: java.util.Set toSet()>();

        $r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

        $r9 = staticinvoke <com.hp.hpl.jena.util.iterator.WrappedIterator: com.hp.hpl.jena.util.iterator.WrappedIterator createNoRemove(java.util.Iterator)>($r8);

        return $r9;
    }

    public static com.hp.hpl.jena.util.iterator.ExtendedIterator listPredicates(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        java.util.Iterator $r8;
        com.hp.hpl.jena.util.iterator.WrappedIterator $r9;
        java.util.Set $r7;
        com.hp.hpl.jena.graph.Node r1, r2, $r3;
        com.hp.hpl.jena.util.iterator.Map1 $r5;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r4, $r6;
        com.hp.hpl.jena.graph.Graph r0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        r2 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r3 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r4 = interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, $r3, r2);

        $r5 = <com.hp.hpl.jena.graph.GraphUtil: com.hp.hpl.jena.util.iterator.Map1 mapPredicate>;

        $r6 = interfaceinvoke $r4.<com.hp.hpl.jena.util.iterator.ExtendedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator mapWith(com.hp.hpl.jena.util.iterator.Map1)>($r5);

        $r7 = interfaceinvoke $r6.<com.hp.hpl.jena.util.iterator.ExtendedIterator: java.util.Set toSet()>();

        $r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

        $r9 = staticinvoke <com.hp.hpl.jena.util.iterator.WrappedIterator: com.hp.hpl.jena.util.iterator.WrappedIterator createNoRemove(java.util.Iterator)>($r8);

        return $r9;
    }

    public static com.hp.hpl.jena.util.iterator.ExtendedIterator listObjects(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        java.util.Iterator $r8;
        com.hp.hpl.jena.util.iterator.WrappedIterator $r9;
        java.util.Set $r7;
        com.hp.hpl.jena.graph.Node r1, r2, $r3;
        com.hp.hpl.jena.util.iterator.Map1 $r5;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r4, $r6;
        com.hp.hpl.jena.graph.Graph r0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        r2 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r3 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r4 = interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2, $r3);

        $r5 = <com.hp.hpl.jena.graph.GraphUtil: com.hp.hpl.jena.util.iterator.Map1 mapObject>;

        $r6 = interfaceinvoke $r4.<com.hp.hpl.jena.util.iterator.ExtendedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator mapWith(com.hp.hpl.jena.util.iterator.Map1)>($r5);

        $r7 = interfaceinvoke $r6.<com.hp.hpl.jena.util.iterator.ExtendedIterator: java.util.Set toSet()>();

        $r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

        $r9 = staticinvoke <com.hp.hpl.jena.util.iterator.WrappedIterator: com.hp.hpl.jena.util.iterator.WrappedIterator createNoRemove(java.util.Iterator)>($r8);

        return $r9;
    }

    public static boolean containsNode(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r1, $r2, $r3, $r4, $r5, $r6, $r7;
        com.hp.hpl.jena.graph.Graph r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        $r3 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r2 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $z0 = interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: boolean contains(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, $r3, $r2);

        if $z0 != 0 goto label1;

        $r5 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r4 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $z1 = interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: boolean contains(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r5, $r4, r1);

        if $z1 != 0 goto label1;

        $r7 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r6 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $z2 = interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: boolean contains(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r7, r1, $r6);

        if $z2 == 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    public static com.hp.hpl.jena.util.iterator.ExtendedIterator findAll(com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r2;
        com.hp.hpl.jena.graph.Graph r0;
        com.hp.hpl.jena.graph.Triple $r1;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        $r1 = <com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Triple ANY>;

        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.TripleMatch)>($r1);

        return $r2;
    }

    public static void add(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Triple[])
    {
        com.hp.hpl.jena.graph.GraphEventManager $r2;
        com.hp.hpl.jena.graph.Triple r3, r5;
        com.hp.hpl.jena.graph.impl.GraphWithPerform r4;
        int i0, i1, i2, i3;
        com.hp.hpl.jena.graph.Graph r0;
        com.hp.hpl.jena.graph.Triple[] r1;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r1 := @parameter1: com.hp.hpl.jena.graph.Triple[];

        $z0 = r0 instanceof com.hp.hpl.jena.graph.impl.GraphWithPerform;

        if $z0 == 0 goto label3;

        r4 = (com.hp.hpl.jena.graph.impl.GraphWithPerform) r0;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r3 = r1[i1];

        interfaceinvoke r4.<com.hp.hpl.jena.graph.impl.GraphWithPerform: void performAdd(com.hp.hpl.jena.graph.Triple)>(r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.graph.GraphEventManager getEventManager()>();

        interfaceinvoke $r2.<com.hp.hpl.jena.graph.GraphEventManager: void notifyAddArray(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Triple[])>(r0, r1);

        goto label5;

     label3:
        i2 = lengthof r1;

        i3 = 0;

     label4:
        if i3 >= i2 goto label5;

        r5 = r1[i3];

        interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: void add(com.hp.hpl.jena.graph.Triple)>(r5);

        i3 = i3 + 1;

        goto label4;

     label5:
        return;
    }

    public static void add(com.hp.hpl.jena.graph.Graph, java.util.List)
    {
        java.util.Iterator $r2, $r4;
        com.hp.hpl.jena.graph.GraphEventManager $r5;
        com.hp.hpl.jena.graph.Triple r7, r9;
        com.hp.hpl.jena.graph.impl.GraphWithPerform r8;
        java.util.List r1;
        java.lang.Object $r3, $r6;
        com.hp.hpl.jena.graph.Graph r0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r1 := @parameter1: java.util.List;

        $z0 = r0 instanceof com.hp.hpl.jena.graph.impl.GraphWithPerform;

        if $z0 == 0 goto label3;

        r8 = (com.hp.hpl.jena.graph.impl.GraphWithPerform) r0;

        $r4 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.hp.hpl.jena.graph.Triple) $r6;

        interfaceinvoke r8.<com.hp.hpl.jena.graph.impl.GraphWithPerform: void performAdd(com.hp.hpl.jena.graph.Triple)>(r7);

        goto label1;

     label2:
        $r5 = interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.graph.GraphEventManager getEventManager()>();

        interfaceinvoke $r5.<com.hp.hpl.jena.graph.GraphEventManager: void notifyAddList(com.hp.hpl.jena.graph.Graph,java.util.List)>(r0, r1);

        goto label5;

     label3:
        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r9 = (com.hp.hpl.jena.graph.Triple) $r3;

        interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: void add(com.hp.hpl.jena.graph.Triple)>(r9);

        goto label4;

     label5:
        return;
    }

    public static void add(com.hp.hpl.jena.graph.Graph, java.util.Iterator)
    {
        java.util.Iterator r0, $r3, $r5;
        com.hp.hpl.jena.graph.GraphEventManager $r6;
        com.hp.hpl.jena.graph.Triple r8, r10;
        com.hp.hpl.jena.graph.impl.GraphWithPerform r9;
        java.util.List $r1;
        java.lang.Object $r4, $r7;
        com.hp.hpl.jena.graph.Graph r2;
        boolean $z0, $z1, $z2;

        r2 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r0 := @parameter1: java.util.Iterator;

        $r1 = staticinvoke <com.hp.hpl.jena.util.IteratorCollection: java.util.List iteratorToList(java.util.Iterator)>(r0);

        $z0 = r2 instanceof com.hp.hpl.jena.graph.impl.GraphWithPerform;

        if $z0 == 0 goto label3;

        r9 = (com.hp.hpl.jena.graph.impl.GraphWithPerform) r2;

        $r5 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        $r7 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.hp.hpl.jena.graph.Triple) $r7;

        interfaceinvoke r9.<com.hp.hpl.jena.graph.impl.GraphWithPerform: void performAdd(com.hp.hpl.jena.graph.Triple)>(r8);

        goto label1;

     label2:
        $r6 = interfaceinvoke r2.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.graph.GraphEventManager getEventManager()>();

        interfaceinvoke $r6.<com.hp.hpl.jena.graph.GraphEventManager: void notifyAddIterator(com.hp.hpl.jena.graph.Graph,java.util.List)>(r2, $r1);

        goto label5;

     label3:
        $r3 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r10 = (com.hp.hpl.jena.graph.Triple) $r4;

        interfaceinvoke r2.<com.hp.hpl.jena.graph.Graph: void add(com.hp.hpl.jena.graph.Triple)>(r10);

        goto label4;

     label5:
        return;
    }

    public static void addInto(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r2;
        com.hp.hpl.jena.graph.GraphEventManager $r3;
        com.hp.hpl.jena.graph.Graph r0, r1;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r1 := @parameter1: com.hp.hpl.jena.graph.Graph;

        $r2 = staticinvoke <com.hp.hpl.jena.graph.GraphUtil: com.hp.hpl.jena.util.iterator.ExtendedIterator findAll(com.hp.hpl.jena.graph.Graph)>(r1);

        staticinvoke <com.hp.hpl.jena.graph.GraphUtil: void addIteratorWorker(com.hp.hpl.jena.graph.Graph,java.util.Iterator)>(r0, $r2);

        $r3 = interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.graph.GraphEventManager getEventManager()>();

        interfaceinvoke $r3.<com.hp.hpl.jena.graph.GraphEventManager: void notifyAddGraph(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Graph)>(r0, r1);

        return;
    }

    private static void addIteratorWorker(com.hp.hpl.jena.graph.Graph, java.util.Iterator)
    {
        java.util.Iterator r0, $r3, $r5;
        com.hp.hpl.jena.graph.Triple r7, r9;
        com.hp.hpl.jena.graph.impl.GraphWithPerform r8;
        java.util.List $r1;
        java.lang.Object $r4, $r6;
        com.hp.hpl.jena.graph.Graph r2;
        boolean $z0, $z1, $z2;

        r2 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r0 := @parameter1: java.util.Iterator;

        $r1 = staticinvoke <com.hp.hpl.jena.util.IteratorCollection: java.util.List iteratorToList(java.util.Iterator)>(r0);

        $z0 = r2 instanceof com.hp.hpl.jena.graph.impl.GraphWithPerform;

        if $z0 == 0 goto label3;

        r8 = (com.hp.hpl.jena.graph.impl.GraphWithPerform) r2;

        $r5 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.hp.hpl.jena.graph.Triple) $r6;

        interfaceinvoke r8.<com.hp.hpl.jena.graph.impl.GraphWithPerform: void performAdd(com.hp.hpl.jena.graph.Triple)>(r7);

        goto label1;

     label2:
        goto label5;

     label3:
        $r3 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r9 = (com.hp.hpl.jena.graph.Triple) $r4;

        interfaceinvoke r2.<com.hp.hpl.jena.graph.Graph: void add(com.hp.hpl.jena.graph.Triple)>(r9);

        goto label4;

     label5:
        return;
    }

    public static void delete(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Triple[])
    {
        com.hp.hpl.jena.graph.GraphEventManager $r2;
        com.hp.hpl.jena.graph.Triple r3, r5;
        com.hp.hpl.jena.graph.impl.GraphWithPerform r4;
        int i0, i1, i2, i3;
        com.hp.hpl.jena.graph.Graph r0;
        com.hp.hpl.jena.graph.Triple[] r1;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r1 := @parameter1: com.hp.hpl.jena.graph.Triple[];

        $z0 = r0 instanceof com.hp.hpl.jena.graph.impl.GraphWithPerform;

        if $z0 == 0 goto label3;

        r4 = (com.hp.hpl.jena.graph.impl.GraphWithPerform) r0;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r3 = r1[i1];

        interfaceinvoke r4.<com.hp.hpl.jena.graph.impl.GraphWithPerform: void performDelete(com.hp.hpl.jena.graph.Triple)>(r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.graph.GraphEventManager getEventManager()>();

        interfaceinvoke $r2.<com.hp.hpl.jena.graph.GraphEventManager: void notifyDeleteArray(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Triple[])>(r0, r1);

        goto label5;

     label3:
        i2 = lengthof r1;

        i3 = 0;

     label4:
        if i3 >= i2 goto label5;

        r5 = r1[i3];

        interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: void delete(com.hp.hpl.jena.graph.Triple)>(r5);

        i3 = i3 + 1;

        goto label4;

     label5:
        return;
    }

    public static void delete(com.hp.hpl.jena.graph.Graph, java.util.List)
    {
        java.util.Iterator $r2, $r4;
        com.hp.hpl.jena.graph.GraphEventManager $r5;
        com.hp.hpl.jena.graph.Triple r7, r9;
        com.hp.hpl.jena.graph.impl.GraphWithPerform r8;
        java.util.List r1;
        java.lang.Object $r3, $r6;
        com.hp.hpl.jena.graph.Graph r0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r1 := @parameter1: java.util.List;

        $z0 = r0 instanceof com.hp.hpl.jena.graph.impl.GraphWithPerform;

        if $z0 == 0 goto label3;

        r8 = (com.hp.hpl.jena.graph.impl.GraphWithPerform) r0;

        $r4 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.hp.hpl.jena.graph.Triple) $r6;

        interfaceinvoke r8.<com.hp.hpl.jena.graph.impl.GraphWithPerform: void performDelete(com.hp.hpl.jena.graph.Triple)>(r7);

        goto label1;

     label2:
        $r5 = interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.graph.GraphEventManager getEventManager()>();

        interfaceinvoke $r5.<com.hp.hpl.jena.graph.GraphEventManager: void notifyDeleteList(com.hp.hpl.jena.graph.Graph,java.util.List)>(r0, r1);

        goto label5;

     label3:
        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r9 = (com.hp.hpl.jena.graph.Triple) $r3;

        interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: void delete(com.hp.hpl.jena.graph.Triple)>(r9);

        goto label4;

     label5:
        return;
    }

    public static void delete(com.hp.hpl.jena.graph.Graph, java.util.Iterator)
    {
        java.util.Iterator r0, $r3, $r5;
        com.hp.hpl.jena.graph.GraphEventManager $r6;
        com.hp.hpl.jena.graph.Triple r8, r10;
        com.hp.hpl.jena.graph.impl.GraphWithPerform r9;
        java.util.List $r1;
        java.lang.Object $r4, $r7;
        com.hp.hpl.jena.graph.Graph r2;
        boolean $z0, $z1, $z2;

        r2 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r0 := @parameter1: java.util.Iterator;

        $r1 = staticinvoke <com.hp.hpl.jena.util.IteratorCollection: java.util.List iteratorToList(java.util.Iterator)>(r0);

        $z0 = r2 instanceof com.hp.hpl.jena.graph.impl.GraphWithPerform;

        if $z0 == 0 goto label3;

        r9 = (com.hp.hpl.jena.graph.impl.GraphWithPerform) r2;

        $r5 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        $r7 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.hp.hpl.jena.graph.Triple) $r7;

        interfaceinvoke r9.<com.hp.hpl.jena.graph.impl.GraphWithPerform: void performDelete(com.hp.hpl.jena.graph.Triple)>(r8);

        goto label1;

     label2:
        $r6 = interfaceinvoke r2.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.graph.GraphEventManager getEventManager()>();

        interfaceinvoke $r6.<com.hp.hpl.jena.graph.GraphEventManager: void notifyDeleteIterator(com.hp.hpl.jena.graph.Graph,java.util.List)>(r2, $r1);

        goto label5;

     label3:
        $r3 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r10 = (com.hp.hpl.jena.graph.Triple) $r4;

        interfaceinvoke r2.<com.hp.hpl.jena.graph.Graph: void delete(com.hp.hpl.jena.graph.Triple)>(r10);

        goto label4;

     label5:
        return;
    }

    public static void deleteFrom(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r2;
        com.hp.hpl.jena.graph.GraphEventManager $r3;
        com.hp.hpl.jena.graph.Graph r0, r1;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r1 := @parameter1: com.hp.hpl.jena.graph.Graph;

        $r2 = staticinvoke <com.hp.hpl.jena.graph.GraphUtil: com.hp.hpl.jena.util.iterator.ExtendedIterator findAll(com.hp.hpl.jena.graph.Graph)>(r1);

        staticinvoke <com.hp.hpl.jena.graph.GraphUtil: void deleteIteratorWorker(com.hp.hpl.jena.graph.Graph,java.util.Iterator)>(r0, $r2);

        $r3 = interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.graph.GraphEventManager getEventManager()>();

        interfaceinvoke $r3.<com.hp.hpl.jena.graph.GraphEventManager: void notifyDeleteGraph(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Graph)>(r0, r1);

        return;
    }

    private static void deleteIteratorWorker(com.hp.hpl.jena.graph.Graph, java.util.Iterator)
    {
        java.util.Iterator r0, $r3, $r5;
        com.hp.hpl.jena.graph.Triple r7, r9;
        com.hp.hpl.jena.graph.impl.GraphWithPerform r8;
        java.util.List $r1;
        java.lang.Object $r4, $r6;
        com.hp.hpl.jena.graph.Graph r2;
        boolean $z0, $z1, $z2;

        r2 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r0 := @parameter1: java.util.Iterator;

        $r1 = staticinvoke <com.hp.hpl.jena.util.IteratorCollection: java.util.List iteratorToList(java.util.Iterator)>(r0);

        $z0 = r2 instanceof com.hp.hpl.jena.graph.impl.GraphWithPerform;

        if $z0 == 0 goto label3;

        r8 = (com.hp.hpl.jena.graph.impl.GraphWithPerform) r2;

        $r5 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.hp.hpl.jena.graph.Triple) $r6;

        interfaceinvoke r8.<com.hp.hpl.jena.graph.impl.GraphWithPerform: void performDelete(com.hp.hpl.jena.graph.Triple)>(r7);

        goto label1;

     label2:
        goto label5;

     label3:
        $r3 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r9 = (com.hp.hpl.jena.graph.Triple) $r4;

        interfaceinvoke r2.<com.hp.hpl.jena.graph.Graph: void delete(com.hp.hpl.jena.graph.Triple)>(r9);

        goto label4;

     label5:
        return;
    }

    public static void remove(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r2, r3, r4;
        com.hp.hpl.jena.graph.Triple $r6, $r8;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r5;
        int i0, i1;
        java.lang.Object $r7;
        com.hp.hpl.jena.graph.Triple[] r0;
        com.hp.hpl.jena.graph.Graph r1;
        boolean $z0;

        r1 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.graph.Node;

        r4 := @parameter3: com.hp.hpl.jena.graph.Node;

        r0 = newarray (com.hp.hpl.jena.graph.Triple)[1000];

     label1:
        $r5 = interfaceinvoke r1.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r2, r3, r4);

        i0 = 0;

     label2:
        if i0 >= 1000 goto label4;

        $z0 = interfaceinvoke $r5.<com.hp.hpl.jena.util.iterator.ExtendedIterator: boolean hasNext()>();

        if $z0 != 0 goto label3;

        goto label4;

     label3:
        $r7 = interfaceinvoke $r5.<com.hp.hpl.jena.util.iterator.ExtendedIterator: java.lang.Object next()>();

        $r8 = (com.hp.hpl.jena.graph.Triple) $r7;

        r0[i0] = $r8;

        i0 = i0 + 1;

        goto label2;

     label4:
        i1 = 0;

     label5:
        if i1 >= i0 goto label6;

        $r6 = r0[i1];

        interfaceinvoke r1.<com.hp.hpl.jena.graph.Graph: void delete(com.hp.hpl.jena.graph.Triple)>($r6);

        r0[i1] = null;

        i1 = i1 + 1;

        goto label5;

     label6:
        if i0 >= 1000 goto label7;

        goto label8;

     label7:
        goto label1;

     label8:
        return;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.graph.GraphUtil$3 $r2;
        com.hp.hpl.jena.graph.GraphUtil$1 $r0;
        com.hp.hpl.jena.graph.GraphUtil$2 $r1;

        <com.hp.hpl.jena.graph.GraphUtil: int sliceSize> = 1000;

        <com.hp.hpl.jena.graph.GraphUtil: boolean OldStyle> = 1;

        $r0 = new com.hp.hpl.jena.graph.GraphUtil$1;

        specialinvoke $r0.<com.hp.hpl.jena.graph.GraphUtil$1: void <init>()>();

        <com.hp.hpl.jena.graph.GraphUtil: com.hp.hpl.jena.util.iterator.Map1 mapSubject> = $r0;

        $r1 = new com.hp.hpl.jena.graph.GraphUtil$2;

        specialinvoke $r1.<com.hp.hpl.jena.graph.GraphUtil$2: void <init>()>();

        <com.hp.hpl.jena.graph.GraphUtil: com.hp.hpl.jena.util.iterator.Map1 mapPredicate> = $r1;

        $r2 = new com.hp.hpl.jena.graph.GraphUtil$3;

        specialinvoke $r2.<com.hp.hpl.jena.graph.GraphUtil$3: void <init>()>();

        <com.hp.hpl.jena.graph.GraphUtil: com.hp.hpl.jena.util.iterator.Map1 mapObject> = $r2;

        return;
    }
}
