class com.mycila.inject.internal.guava.io.LineReader$1 extends com.mycila.inject.internal.guava.io.LineBuffer
{
    final com.mycila.inject.internal.guava.io.LineReader this$0;

    void <init>(com.mycila.inject.internal.guava.io.LineReader)
    {
        com.mycila.inject.internal.guava.io.LineReader$1 r0;
        com.mycila.inject.internal.guava.io.LineReader r1;

        r0 := @this: com.mycila.inject.internal.guava.io.LineReader$1;

        r1 := @parameter0: com.mycila.inject.internal.guava.io.LineReader;

        r0.<com.mycila.inject.internal.guava.io.LineReader$1: com.mycila.inject.internal.guava.io.LineReader this$0> = r1;

        specialinvoke r0.<com.mycila.inject.internal.guava.io.LineBuffer: void <init>()>();

        return;
    }

    protected void handleLine(java.lang.String, java.lang.String)
    {
        com.mycila.inject.internal.guava.io.LineReader$1 r0;
        com.mycila.inject.internal.guava.io.LineReader $r1;
        java.util.Queue $r2;
        java.lang.String r3, r4;

        r0 := @this: com.mycila.inject.internal.guava.io.LineReader$1;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        $r1 = r0.<com.mycila.inject.internal.guava.io.LineReader$1: com.mycila.inject.internal.guava.io.LineReader this$0>;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.io.LineReader: java.util.Queue access$000(com.mycila.inject.internal.guava.io.LineReader)>($r1);

        interfaceinvoke $r2.<java.util.Queue: boolean add(java.lang.Object)>(r3);

        return;
    }
}
