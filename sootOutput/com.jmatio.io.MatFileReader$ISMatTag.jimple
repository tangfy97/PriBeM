class com.jmatio.io.MatFileReader$ISMatTag extends com.jmatio.io.MatTag
{
    private final com.jmatio.io.MatFileInputStream mfis;
    private final int padding;
    private final boolean compressed;

    public void <init>(java.nio.ByteBuffer) throws java.io.IOException
    {
        java.nio.ByteBuffer r1;
        com.jmatio.io.MatFileReader$ISMatTag r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9;
        boolean $z0;
        com.jmatio.io.MatFileInputStream $r3;

        r0 := @this: com.jmatio.io.MatFileReader$ISMatTag;

        r1 := @parameter0: java.nio.ByteBuffer;

        specialinvoke r0.<com.jmatio.io.MatTag: void <init>(int,int)>(0, 0);

        $i0 = virtualinvoke r1.<java.nio.ByteBuffer: int getInt()>();

        $i1 = $i0 >> 16;

        if $i1 != 0 goto label1;

        r0.<com.jmatio.io.MatFileReader$ISMatTag: int type> = $i0;

        $i7 = virtualinvoke r1.<java.nio.ByteBuffer: int getInt()>();

        r0.<com.jmatio.io.MatFileReader$ISMatTag: int size> = $i7;

        r0.<com.jmatio.io.MatFileReader$ISMatTag: boolean compressed> = 0;

        goto label2;

     label1:
        $i2 = $i0 >> 16;

        r0.<com.jmatio.io.MatFileReader$ISMatTag: int size> = $i2;

        $i9 = (int) 65535;

        $i3 = $i0 & $i9;

        r0.<com.jmatio.io.MatFileReader$ISMatTag: int type> = $i3;

        r0.<com.jmatio.io.MatFileReader$ISMatTag: boolean compressed> = 1;

     label2:
        $i4 = r0.<com.jmatio.io.MatFileReader$ISMatTag: int size>;

        $z0 = r0.<com.jmatio.io.MatFileReader$ISMatTag: boolean compressed>;

        $i5 = virtualinvoke r0.<com.jmatio.io.MatFileReader$ISMatTag: int getPadding(int,boolean)>($i4, $z0);

        r0.<com.jmatio.io.MatFileReader$ISMatTag: int padding> = $i5;

        $r3 = new com.jmatio.io.MatFileInputStream;

        $i6 = r0.<com.jmatio.io.MatFileReader$ISMatTag: int type>;

        specialinvoke $r3.<com.jmatio.io.MatFileInputStream: void <init>(java.nio.ByteBuffer,int)>(r1, $i6);

        r0.<com.jmatio.io.MatFileReader$ISMatTag: com.jmatio.io.MatFileInputStream mfis> = $r3;

        return;
    }

    public void readToByteBuffer(java.nio.ByteBuffer, com.jmatio.types.ByteStorageSupport) throws java.io.IOException
    {
        com.jmatio.types.ByteStorageSupport r2;
        java.nio.ByteBuffer r1;
        com.jmatio.io.MatFileReader$ISMatTag r0;
        int $i0, $i1, i2, $i3;
        com.jmatio.io.MatFileInputStream $r3, $r4;

        r0 := @this: com.jmatio.io.MatFileReader$ISMatTag;

        r1 := @parameter0: java.nio.ByteBuffer;

        r2 := @parameter1: com.jmatio.types.ByteStorageSupport;

        $i0 = r0.<com.jmatio.io.MatFileReader$ISMatTag: int size>;

        $i1 = virtualinvoke r0.<com.jmatio.io.MatFileReader$ISMatTag: int sizeOf()>();

        i2 = $i0 / $i1;

        $r3 = r0.<com.jmatio.io.MatFileReader$ISMatTag: com.jmatio.io.MatFileInputStream mfis>;

        virtualinvoke $r3.<com.jmatio.io.MatFileInputStream: java.nio.ByteBuffer readToByteBuffer(java.nio.ByteBuffer,int,com.jmatio.types.ByteStorageSupport)>(r1, i2, r2);

        $r4 = r0.<com.jmatio.io.MatFileReader$ISMatTag: com.jmatio.io.MatFileInputStream mfis>;

        $i3 = r0.<com.jmatio.io.MatFileReader$ISMatTag: int padding>;

        virtualinvoke $r4.<com.jmatio.io.MatFileInputStream: void skip(int)>($i3);

        return;
    }

    public byte[] readToByteArray() throws java.io.IOException
    {
        byte[] r1;
        byte $b4;
        com.jmatio.io.MatFileReader$ISMatTag r0;
        int $i0, $i1, i2, $i3, i5;
        com.jmatio.io.MatFileInputStream $r2, $r3;

        r0 := @this: com.jmatio.io.MatFileReader$ISMatTag;

        $i0 = r0.<com.jmatio.io.MatFileReader$ISMatTag: int size>;

        $i1 = virtualinvoke r0.<com.jmatio.io.MatFileReader$ISMatTag: int sizeOf()>();

        i2 = $i0 / $i1;

        r1 = newarray (byte)[i2];

        i5 = 0;

     label1:
        if i5 >= i2 goto label2;

        $r3 = r0.<com.jmatio.io.MatFileReader$ISMatTag: com.jmatio.io.MatFileInputStream mfis>;

        $b4 = virtualinvoke $r3.<com.jmatio.io.MatFileInputStream: byte readByte()>();

        r1[i5] = $b4;

        i5 = i5 + 1;

        goto label1;

     label2:
        $r2 = r0.<com.jmatio.io.MatFileReader$ISMatTag: com.jmatio.io.MatFileInputStream mfis>;

        $i3 = r0.<com.jmatio.io.MatFileReader$ISMatTag: int padding>;

        virtualinvoke $r2.<com.jmatio.io.MatFileInputStream: void skip(int)>($i3);

        return r1;
    }

    public double[] readToDoubleArray() throws java.io.IOException
    {
        double[] r1;
        com.jmatio.io.MatFileReader$ISMatTag r0;
        int $i0, $i1, i2, $i3, i4;
        com.jmatio.io.MatFileInputStream $r2, $r3;
        double $d0;

        r0 := @this: com.jmatio.io.MatFileReader$ISMatTag;

        $i0 = r0.<com.jmatio.io.MatFileReader$ISMatTag: int size>;

        $i1 = virtualinvoke r0.<com.jmatio.io.MatFileReader$ISMatTag: int sizeOf()>();

        i2 = $i0 / $i1;

        r1 = newarray (double)[i2];

        i4 = 0;

     label1:
        if i4 >= i2 goto label2;

        $r3 = r0.<com.jmatio.io.MatFileReader$ISMatTag: com.jmatio.io.MatFileInputStream mfis>;

        $d0 = virtualinvoke $r3.<com.jmatio.io.MatFileInputStream: double readDouble()>();

        r1[i4] = $d0;

        i4 = i4 + 1;

        goto label1;

     label2:
        $r2 = r0.<com.jmatio.io.MatFileReader$ISMatTag: com.jmatio.io.MatFileInputStream mfis>;

        $i3 = r0.<com.jmatio.io.MatFileReader$ISMatTag: int padding>;

        virtualinvoke $r2.<com.jmatio.io.MatFileInputStream: void skip(int)>($i3);

        return r1;
    }

    public int[] readToIntArray() throws java.io.IOException
    {
        com.jmatio.io.MatFileReader$ISMatTag r0;
        int[] r1;
        int $i0, $i1, i2, $i3, $i4, i5;
        com.jmatio.io.MatFileInputStream $r2, $r3;

        r0 := @this: com.jmatio.io.MatFileReader$ISMatTag;

        $i0 = r0.<com.jmatio.io.MatFileReader$ISMatTag: int size>;

        $i1 = virtualinvoke r0.<com.jmatio.io.MatFileReader$ISMatTag: int sizeOf()>();

        i2 = $i0 / $i1;

        r1 = newarray (int)[i2];

        i5 = 0;

     label1:
        if i5 >= i2 goto label2;

        $r3 = r0.<com.jmatio.io.MatFileReader$ISMatTag: com.jmatio.io.MatFileInputStream mfis>;

        $i4 = virtualinvoke $r3.<com.jmatio.io.MatFileInputStream: int readInt()>();

        r1[i5] = $i4;

        i5 = i5 + 1;

        goto label1;

     label2:
        $r2 = r0.<com.jmatio.io.MatFileReader$ISMatTag: com.jmatio.io.MatFileInputStream mfis>;

        $i3 = r0.<com.jmatio.io.MatFileReader$ISMatTag: int padding>;

        virtualinvoke $r2.<com.jmatio.io.MatFileInputStream: void skip(int)>($i3);

        return r1;
    }

    public java.lang.String readToString() throws java.io.IOException
    {
        byte[] $r1;
        java.lang.String $r2;
        com.jmatio.io.MatFileReader$ISMatTag r0;

        r0 := @this: com.jmatio.io.MatFileReader$ISMatTag;

        $r1 = virtualinvoke r0.<com.jmatio.io.MatFileReader$ISMatTag: byte[] readToByteArray()>();

        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(byte[],java.lang.String)>($r1, "UTF-8");

        return $r2;
    }

    public char[] readToCharArray() throws java.io.IOException
    {
        char $c4;
        com.jmatio.io.MatFileReader$ISMatTag r0;
        int $i0, $i1, i2, $i3, i5;
        char[] r1;
        com.jmatio.io.MatFileInputStream $r2, $r3;

        r0 := @this: com.jmatio.io.MatFileReader$ISMatTag;

        $i0 = r0.<com.jmatio.io.MatFileReader$ISMatTag: int size>;

        $i1 = virtualinvoke r0.<com.jmatio.io.MatFileReader$ISMatTag: int sizeOf()>();

        i2 = $i0 / $i1;

        r1 = newarray (char)[i2];

        i5 = 0;

     label1:
        if i5 >= i2 goto label2;

        $r3 = r0.<com.jmatio.io.MatFileReader$ISMatTag: com.jmatio.io.MatFileInputStream mfis>;

        $c4 = virtualinvoke $r3.<com.jmatio.io.MatFileInputStream: char readChar()>();

        r1[i5] = $c4;

        i5 = i5 + 1;

        goto label1;

     label2:
        $r2 = r0.<com.jmatio.io.MatFileReader$ISMatTag: com.jmatio.io.MatFileInputStream mfis>;

        $i3 = r0.<com.jmatio.io.MatFileReader$ISMatTag: int padding>;

        virtualinvoke $r2.<com.jmatio.io.MatFileInputStream: void skip(int)>($i3);

        return r1;
    }

    static int access$000(com.jmatio.io.MatFileReader$ISMatTag)
    {
        int $i0;
        com.jmatio.io.MatFileReader$ISMatTag r0;

        r0 := @parameter0: com.jmatio.io.MatFileReader$ISMatTag;

        $i0 = r0.<com.jmatio.io.MatFileReader$ISMatTag: int padding>;

        return $i0;
    }
}
