final class com.mycila.inject.internal.guava.collect.RegularContiguousSet extends com.mycila.inject.internal.guava.collect.ContiguousSet
{
    private final com.mycila.inject.internal.guava.collect.Range range;
    private static final long serialVersionUID;

    void <init>(com.mycila.inject.internal.guava.collect.Range, com.mycila.inject.internal.guava.collect.DiscreteDomain)
    {
        com.mycila.inject.internal.guava.collect.DiscreteDomain r1;
        com.mycila.inject.internal.guava.collect.Range r2;
        com.mycila.inject.internal.guava.collect.RegularContiguousSet r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularContiguousSet;

        r2 := @parameter0: com.mycila.inject.internal.guava.collect.Range;

        r1 := @parameter1: com.mycila.inject.internal.guava.collect.DiscreteDomain;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.ContiguousSet: void <init>(com.mycila.inject.internal.guava.collect.DiscreteDomain)>(r1);

        r0.<com.mycila.inject.internal.guava.collect.RegularContiguousSet: com.mycila.inject.internal.guava.collect.Range range> = r2;

        return;
    }

    com.mycila.inject.internal.guava.collect.ContiguousSet headSetImpl(java.lang.Comparable, boolean)
    {
        com.mycila.inject.internal.guava.collect.ContiguousSet $r7;
        com.mycila.inject.internal.guava.collect.DiscreteDomain $r6;
        com.mycila.inject.internal.guava.collect.Range $r2, $r4, $r5;
        com.mycila.inject.internal.guava.collect.BoundType $r3;
        com.mycila.inject.internal.guava.collect.RegularContiguousSet r0;
        java.lang.Comparable r1;
        boolean z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularContiguousSet;

        r1 := @parameter0: java.lang.Comparable;

        z0 := @parameter1: boolean;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.RegularContiguousSet: com.mycila.inject.internal.guava.collect.Range range>;

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.BoundType: com.mycila.inject.internal.guava.collect.BoundType forBoolean(boolean)>(z0);

        $r4 = staticinvoke <com.mycila.inject.internal.guava.collect.Ranges: com.mycila.inject.internal.guava.collect.Range upTo(java.lang.Comparable,com.mycila.inject.internal.guava.collect.BoundType)>(r1, $r3);

        $r5 = virtualinvoke $r2.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Range intersection(com.mycila.inject.internal.guava.collect.Range)>($r4);

        $r6 = r0.<com.mycila.inject.internal.guava.collect.RegularContiguousSet: com.mycila.inject.internal.guava.collect.DiscreteDomain domain>;

        $r7 = virtualinvoke $r5.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.ContiguousSet asSet(com.mycila.inject.internal.guava.collect.DiscreteDomain)>($r6);

        return $r7;
    }

    int indexOf(java.lang.Object)
    {
        long $l0;
        com.mycila.inject.internal.guava.collect.DiscreteDomain $r2;
        com.mycila.inject.internal.guava.collect.RegularContiguousSet r0;
        int $i1, $i3;
        java.lang.Object r1;
        java.lang.Comparable $r3, $r4;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularContiguousSet;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.RegularContiguousSet: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.RegularContiguousSet: com.mycila.inject.internal.guava.collect.DiscreteDomain domain>;

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.RegularContiguousSet: java.lang.Comparable first()>();

        $r4 = (java.lang.Comparable) r1;

        $l0 = virtualinvoke $r2.<com.mycila.inject.internal.guava.collect.DiscreteDomain: long distance(java.lang.Comparable,java.lang.Comparable)>($r3, $r4);

        $i1 = (int) $l0;

        goto label2;

     label1:
        $i3 = (int) -1;

        $i1 = $i3;

     label2:
        return $i1;
    }

    com.mycila.inject.internal.guava.collect.ContiguousSet subSetImpl(java.lang.Comparable, boolean, java.lang.Comparable, boolean)
    {
        com.mycila.inject.internal.guava.collect.ContiguousSet $r9;
        com.mycila.inject.internal.guava.collect.DiscreteDomain $r8;
        com.mycila.inject.internal.guava.collect.Range $r2, $r6, $r7;
        com.mycila.inject.internal.guava.collect.BoundType $r3, $r5;
        com.mycila.inject.internal.guava.collect.RegularContiguousSet r0;
        java.lang.Comparable r1, r4;
        boolean z0, z1;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularContiguousSet;

        r1 := @parameter0: java.lang.Comparable;

        z0 := @parameter1: boolean;

        r4 := @parameter2: java.lang.Comparable;

        z1 := @parameter3: boolean;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.RegularContiguousSet: com.mycila.inject.internal.guava.collect.Range range>;

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.BoundType: com.mycila.inject.internal.guava.collect.BoundType forBoolean(boolean)>(z0);

        $r5 = staticinvoke <com.mycila.inject.internal.guava.collect.BoundType: com.mycila.inject.internal.guava.collect.BoundType forBoolean(boolean)>(z1);

        $r6 = staticinvoke <com.mycila.inject.internal.guava.collect.Ranges: com.mycila.inject.internal.guava.collect.Range range(java.lang.Comparable,com.mycila.inject.internal.guava.collect.BoundType,java.lang.Comparable,com.mycila.inject.internal.guava.collect.BoundType)>(r1, $r3, r4, $r5);

        $r7 = virtualinvoke $r2.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Range intersection(com.mycila.inject.internal.guava.collect.Range)>($r6);

        $r8 = r0.<com.mycila.inject.internal.guava.collect.RegularContiguousSet: com.mycila.inject.internal.guava.collect.DiscreteDomain domain>;

        $r9 = virtualinvoke $r7.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.ContiguousSet asSet(com.mycila.inject.internal.guava.collect.DiscreteDomain)>($r8);

        return $r9;
    }

    com.mycila.inject.internal.guava.collect.ContiguousSet tailSetImpl(java.lang.Comparable, boolean)
    {
        com.mycila.inject.internal.guava.collect.ContiguousSet $r7;
        com.mycila.inject.internal.guava.collect.DiscreteDomain $r6;
        com.mycila.inject.internal.guava.collect.Range $r2, $r4, $r5;
        com.mycila.inject.internal.guava.collect.BoundType $r3;
        com.mycila.inject.internal.guava.collect.RegularContiguousSet r0;
        java.lang.Comparable r1;
        boolean z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularContiguousSet;

        r1 := @parameter0: java.lang.Comparable;

        z0 := @parameter1: boolean;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.RegularContiguousSet: com.mycila.inject.internal.guava.collect.Range range>;

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.BoundType: com.mycila.inject.internal.guava.collect.BoundType forBoolean(boolean)>(z0);

        $r4 = staticinvoke <com.mycila.inject.internal.guava.collect.Ranges: com.mycila.inject.internal.guava.collect.Range downTo(java.lang.Comparable,com.mycila.inject.internal.guava.collect.BoundType)>(r1, $r3);

        $r5 = virtualinvoke $r2.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Range intersection(com.mycila.inject.internal.guava.collect.Range)>($r4);

        $r6 = r0.<com.mycila.inject.internal.guava.collect.RegularContiguousSet: com.mycila.inject.internal.guava.collect.DiscreteDomain domain>;

        $r7 = virtualinvoke $r5.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.ContiguousSet asSet(com.mycila.inject.internal.guava.collect.DiscreteDomain)>($r6);

        return $r7;
    }

    public com.mycila.inject.internal.guava.collect.UnmodifiableIterator iterator()
    {
        java.lang.Comparable $r2;
        com.mycila.inject.internal.guava.collect.RegularContiguousSet$1 $r0;
        com.mycila.inject.internal.guava.collect.RegularContiguousSet r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.RegularContiguousSet;

        $r0 = new com.mycila.inject.internal.guava.collect.RegularContiguousSet$1;

        $r2 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.RegularContiguousSet: java.lang.Comparable first()>();

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.RegularContiguousSet$1: void <init>(com.mycila.inject.internal.guava.collect.RegularContiguousSet,java.lang.Comparable)>(r1, $r2);

        return $r0;
    }

    private static boolean equalsOrThrow(java.lang.Comparable, java.lang.Comparable)
    {
        int $i0;
        java.lang.Comparable r0, r1;
        boolean $z0;

        r1 := @parameter0: java.lang.Comparable;

        r0 := @parameter1: java.lang.Comparable;

        if r0 == null goto label1;

        $i0 = staticinvoke <com.mycila.inject.internal.guava.collect.Range: int compareOrThrow(java.lang.Comparable,java.lang.Comparable)>(r1, r0);

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    boolean isPartialView()
    {
        com.mycila.inject.internal.guava.collect.RegularContiguousSet r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularContiguousSet;

        return 0;
    }

    public java.lang.Comparable first()
    {
        com.mycila.inject.internal.guava.collect.DiscreteDomain $r2;
        com.mycila.inject.internal.guava.collect.Range $r1;
        com.mycila.inject.internal.guava.collect.Cut $r3;
        com.mycila.inject.internal.guava.collect.RegularContiguousSet r0;
        java.lang.Comparable $r4;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularContiguousSet;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.RegularContiguousSet: com.mycila.inject.internal.guava.collect.Range range>;

        $r3 = $r1.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Cut lowerBound>;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.RegularContiguousSet: com.mycila.inject.internal.guava.collect.DiscreteDomain domain>;

        $r4 = virtualinvoke $r3.<com.mycila.inject.internal.guava.collect.Cut: java.lang.Comparable leastValueAbove(com.mycila.inject.internal.guava.collect.DiscreteDomain)>($r2);

        return $r4;
    }

    public java.lang.Comparable last()
    {
        com.mycila.inject.internal.guava.collect.DiscreteDomain $r2;
        com.mycila.inject.internal.guava.collect.Range $r1;
        com.mycila.inject.internal.guava.collect.Cut $r3;
        com.mycila.inject.internal.guava.collect.RegularContiguousSet r0;
        java.lang.Comparable $r4;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularContiguousSet;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.RegularContiguousSet: com.mycila.inject.internal.guava.collect.Range range>;

        $r3 = $r1.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Cut upperBound>;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.RegularContiguousSet: com.mycila.inject.internal.guava.collect.DiscreteDomain domain>;

        $r4 = virtualinvoke $r3.<com.mycila.inject.internal.guava.collect.Cut: java.lang.Comparable greatestValueBelow(com.mycila.inject.internal.guava.collect.DiscreteDomain)>($r2);

        return $r4;
    }

    public int size()
    {
        long $l0;
        com.mycila.inject.internal.guava.collect.DiscreteDomain $r1;
        byte $b1;
        com.mycila.inject.internal.guava.collect.RegularContiguousSet r0;
        int $i2, $i3, $i4;
        java.lang.Comparable $r2, $r3;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularContiguousSet;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.RegularContiguousSet: com.mycila.inject.internal.guava.collect.DiscreteDomain domain>;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.RegularContiguousSet: java.lang.Comparable first()>();

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.RegularContiguousSet: java.lang.Comparable last()>();

        $l0 = virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.DiscreteDomain: long distance(java.lang.Comparable,java.lang.Comparable)>($r2, $r3);

        $b1 = $l0 cmp 2147483647L;

        $i4 = (int) $b1;

        if $i4 < 0 goto label1;

        $i3 = 2147483647;

        goto label2;

     label1:
        $i2 = (int) $l0;

        $i3 = $i2 + 1;

     label2:
        return $i3;
    }

    public boolean contains(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.Range $r3;
        com.mycila.inject.internal.guava.collect.RegularContiguousSet r0;
        java.lang.Object r1;
        java.lang.Comparable $r2;
        java.lang.ClassCastException $r4;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularContiguousSet;

        r1 := @parameter0: java.lang.Object;

     label1:
        $r3 = r0.<com.mycila.inject.internal.guava.collect.RegularContiguousSet: com.mycila.inject.internal.guava.collect.Range range>;

        $r2 = (java.lang.Comparable) r1;

        $z0 = virtualinvoke $r3.<com.mycila.inject.internal.guava.collect.Range: boolean contains(java.lang.Comparable)>($r2);

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        return 0;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public boolean containsAll(java.util.Collection)
    {
        com.mycila.inject.internal.guava.collect.Range $r2;
        com.mycila.inject.internal.guava.collect.RegularContiguousSet r0;
        java.util.Collection r1;
        java.lang.ClassCastException $r3;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularContiguousSet;

        r1 := @parameter0: java.util.Collection;

     label1:
        $r2 = r0.<com.mycila.inject.internal.guava.collect.RegularContiguousSet: com.mycila.inject.internal.guava.collect.Range range>;

        $z0 = virtualinvoke $r2.<com.mycila.inject.internal.guava.collect.Range: boolean containsAll(java.lang.Iterable)>(r1);

     label2:
        return $z0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public boolean isEmpty()
    {
        com.mycila.inject.internal.guava.collect.RegularContiguousSet r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularContiguousSet;

        return 0;
    }

    public java.lang.Object[] toArray()
    {
        java.lang.Object[] $r1;
        com.mycila.inject.internal.guava.collect.RegularContiguousSet r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularContiguousSet;

        $r1 = staticinvoke <com.mycila.inject.internal.guava.collect.ObjectArrays: java.lang.Object[] toArrayImpl(java.util.Collection)>(r0);

        return $r1;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.lang.Object[] r1, $r2;
        com.mycila.inject.internal.guava.collect.RegularContiguousSet r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularContiguousSet;

        r1 := @parameter0: java.lang.Object[];

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.ObjectArrays: java.lang.Object[] toArrayImpl(java.util.Collection,java.lang.Object[])>(r0, r1);

        return $r2;
    }

    public com.mycila.inject.internal.guava.collect.ContiguousSet intersection(com.mycila.inject.internal.guava.collect.ContiguousSet)
    {
        com.mycila.inject.internal.guava.collect.EmptyContiguousSet $r18;
        com.mycila.inject.internal.guava.collect.Range $r15;
        com.mycila.inject.internal.guava.collect.RegularContiguousSet r1;
        int $i0;
        com.mycila.inject.internal.guava.collect.Ordering $r4, $r9;
        boolean $z0, $z1;
        com.mycila.inject.internal.guava.collect.ContiguousSet r0, $r17;
        com.mycila.inject.internal.guava.collect.DiscreteDomain $r2, $r3, $r14, $r16;
        java.lang.Comparable $r5, r8, $r10, r13;
        java.lang.Object $r6, $r7, $r11, $r12;

        r1 := @this: com.mycila.inject.internal.guava.collect.RegularContiguousSet;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.ContiguousSet;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r3 = r1.<com.mycila.inject.internal.guava.collect.RegularContiguousSet: com.mycila.inject.internal.guava.collect.DiscreteDomain domain>;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.ContiguousSet: com.mycila.inject.internal.guava.collect.DiscreteDomain domain>;

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean)>($z0);

        $z1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ContiguousSet: boolean isEmpty()>();

        if $z1 == 0 goto label1;

        return r0;

     label1:
        $r4 = staticinvoke <com.mycila.inject.internal.guava.collect.Ordering: com.mycila.inject.internal.guava.collect.Ordering natural()>();

        $r5 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.RegularContiguousSet: java.lang.Comparable first()>();

        $r6 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ContiguousSet: java.lang.Object first()>();

        $r7 = virtualinvoke $r4.<com.mycila.inject.internal.guava.collect.Ordering: java.lang.Object max(java.lang.Object,java.lang.Object)>($r5, $r6);

        r8 = (java.lang.Comparable) $r7;

        $r9 = staticinvoke <com.mycila.inject.internal.guava.collect.Ordering: com.mycila.inject.internal.guava.collect.Ordering natural()>();

        $r10 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.RegularContiguousSet: java.lang.Comparable last()>();

        $r11 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ContiguousSet: java.lang.Object last()>();

        $r12 = virtualinvoke $r9.<com.mycila.inject.internal.guava.collect.Ordering: java.lang.Object min(java.lang.Object,java.lang.Object)>($r10, $r11);

        r13 = (java.lang.Comparable) $r12;

        $i0 = interfaceinvoke r8.<java.lang.Comparable: int compareTo(java.lang.Object)>(r13);

        if $i0 >= 0 goto label2;

        $r15 = staticinvoke <com.mycila.inject.internal.guava.collect.Ranges: com.mycila.inject.internal.guava.collect.Range closed(java.lang.Comparable,java.lang.Comparable)>(r8, r13);

        $r16 = r1.<com.mycila.inject.internal.guava.collect.RegularContiguousSet: com.mycila.inject.internal.guava.collect.DiscreteDomain domain>;

        $r17 = virtualinvoke $r15.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.ContiguousSet asSet(com.mycila.inject.internal.guava.collect.DiscreteDomain)>($r16);

        goto label3;

     label2:
        $r18 = new com.mycila.inject.internal.guava.collect.EmptyContiguousSet;

        $r17 = $r18;

        $r14 = r1.<com.mycila.inject.internal.guava.collect.RegularContiguousSet: com.mycila.inject.internal.guava.collect.DiscreteDomain domain>;

        specialinvoke $r18.<com.mycila.inject.internal.guava.collect.EmptyContiguousSet: void <init>(com.mycila.inject.internal.guava.collect.DiscreteDomain)>($r14);

     label3:
        return $r17;
    }

    public com.mycila.inject.internal.guava.collect.Range range()
    {
        com.mycila.inject.internal.guava.collect.BoundType $r1, $r2;
        com.mycila.inject.internal.guava.collect.Range $r3;
        com.mycila.inject.internal.guava.collect.RegularContiguousSet r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularContiguousSet;

        $r2 = <com.mycila.inject.internal.guava.collect.BoundType: com.mycila.inject.internal.guava.collect.BoundType CLOSED>;

        $r1 = <com.mycila.inject.internal.guava.collect.BoundType: com.mycila.inject.internal.guava.collect.BoundType CLOSED>;

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.RegularContiguousSet: com.mycila.inject.internal.guava.collect.Range range(com.mycila.inject.internal.guava.collect.BoundType,com.mycila.inject.internal.guava.collect.BoundType)>($r2, $r1);

        return $r3;
    }

    public com.mycila.inject.internal.guava.collect.Range range(com.mycila.inject.internal.guava.collect.BoundType, com.mycila.inject.internal.guava.collect.BoundType)
    {
        com.mycila.inject.internal.guava.collect.Cut $r4, $r5, $r9, $r10;
        com.mycila.inject.internal.guava.collect.DiscreteDomain $r3, $r8;
        com.mycila.inject.internal.guava.collect.Range $r1, $r6, $r11;
        com.mycila.inject.internal.guava.collect.BoundType r2, r7;
        com.mycila.inject.internal.guava.collect.RegularContiguousSet r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularContiguousSet;

        r2 := @parameter0: com.mycila.inject.internal.guava.collect.BoundType;

        r7 := @parameter1: com.mycila.inject.internal.guava.collect.BoundType;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.RegularContiguousSet: com.mycila.inject.internal.guava.collect.Range range>;

        $r4 = $r1.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Cut lowerBound>;

        $r3 = r0.<com.mycila.inject.internal.guava.collect.RegularContiguousSet: com.mycila.inject.internal.guava.collect.DiscreteDomain domain>;

        $r5 = virtualinvoke $r4.<com.mycila.inject.internal.guava.collect.Cut: com.mycila.inject.internal.guava.collect.Cut withLowerBoundType(com.mycila.inject.internal.guava.collect.BoundType,com.mycila.inject.internal.guava.collect.DiscreteDomain)>(r2, $r3);

        $r6 = r0.<com.mycila.inject.internal.guava.collect.RegularContiguousSet: com.mycila.inject.internal.guava.collect.Range range>;

        $r9 = $r6.<com.mycila.inject.internal.guava.collect.Range: com.mycila.inject.internal.guava.collect.Cut upperBound>;

        $r8 = r0.<com.mycila.inject.internal.guava.collect.RegularContiguousSet: com.mycila.inject.internal.guava.collect.DiscreteDomain domain>;

        $r10 = virtualinvoke $r9.<com.mycila.inject.internal.guava.collect.Cut: com.mycila.inject.internal.guava.collect.Cut withUpperBoundType(com.mycila.inject.internal.guava.collect.BoundType,com.mycila.inject.internal.guava.collect.DiscreteDomain)>(r7, $r8);

        $r11 = staticinvoke <com.mycila.inject.internal.guava.collect.Ranges: com.mycila.inject.internal.guava.collect.Range create(com.mycila.inject.internal.guava.collect.Cut,com.mycila.inject.internal.guava.collect.Cut)>($r5, $r10);

        return $r11;
    }

    public boolean equals(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.DiscreteDomain $r3, $r4;
        com.mycila.inject.internal.guava.collect.RegularContiguousSet r1, r2;
        java.lang.Object r0;
        java.lang.Comparable $r5, $r6, $r7, $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r1 := @this: com.mycila.inject.internal.guava.collect.RegularContiguousSet;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r0 instanceof com.mycila.inject.internal.guava.collect.RegularContiguousSet;

        if $z0 == 0 goto label4;

        r2 = (com.mycila.inject.internal.guava.collect.RegularContiguousSet) r0;

        $r4 = r1.<com.mycila.inject.internal.guava.collect.RegularContiguousSet: com.mycila.inject.internal.guava.collect.DiscreteDomain domain>;

        $r3 = r2.<com.mycila.inject.internal.guava.collect.RegularContiguousSet: com.mycila.inject.internal.guava.collect.DiscreteDomain domain>;

        $z2 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z2 == 0 goto label4;

        $r5 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.RegularContiguousSet: java.lang.Comparable first()>();

        $r6 = virtualinvoke r2.<com.mycila.inject.internal.guava.collect.RegularContiguousSet: java.lang.Comparable first()>();

        $z3 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z3 == 0 goto label2;

        $r7 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.RegularContiguousSet: java.lang.Comparable last()>();

        $r8 = virtualinvoke r2.<com.mycila.inject.internal.guava.collect.RegularContiguousSet: java.lang.Comparable last()>();

        $z4 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8);

        if $z4 == 0 goto label2;

        $z5 = 1;

        goto label3;

     label2:
        $z5 = 0;

     label3:
        return $z5;

     label4:
        $z1 = specialinvoke r1.<com.mycila.inject.internal.guava.collect.ContiguousSet: boolean equals(java.lang.Object)>(r0);

        return $z1;
    }

    public int hashCode()
    {
        int $i0;
        com.mycila.inject.internal.guava.collect.RegularContiguousSet r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularContiguousSet;

        $i0 = staticinvoke <com.mycila.inject.internal.guava.collect.Sets: int hashCodeImpl(java.util.Set)>(r0);

        return $i0;
    }

    java.lang.Object writeReplace()
    {
        com.mycila.inject.internal.guava.collect.RegularContiguousSet$SerializedForm $r0;
        com.mycila.inject.internal.guava.collect.DiscreteDomain $r2;
        com.mycila.inject.internal.guava.collect.Range $r3;
        com.mycila.inject.internal.guava.collect.RegularContiguousSet r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.RegularContiguousSet;

        $r0 = new com.mycila.inject.internal.guava.collect.RegularContiguousSet$SerializedForm;

        $r3 = r1.<com.mycila.inject.internal.guava.collect.RegularContiguousSet: com.mycila.inject.internal.guava.collect.Range range>;

        $r2 = r1.<com.mycila.inject.internal.guava.collect.RegularContiguousSet: com.mycila.inject.internal.guava.collect.DiscreteDomain domain>;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.RegularContiguousSet$SerializedForm: void <init>(com.mycila.inject.internal.guava.collect.Range,com.mycila.inject.internal.guava.collect.DiscreteDomain,com.mycila.inject.internal.guava.collect.RegularContiguousSet$1)>($r3, $r2, null);

        return $r0;
    }

    volatile com.mycila.inject.internal.guava.collect.ImmutableSortedSet tailSetImpl(java.lang.Object, boolean)
    {
        com.mycila.inject.internal.guava.collect.ContiguousSet $r3;
        com.mycila.inject.internal.guava.collect.RegularContiguousSet r0;
        java.lang.Object r1;
        java.lang.Comparable $r2;
        boolean z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularContiguousSet;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        $r2 = (java.lang.Comparable) r1;

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.RegularContiguousSet: com.mycila.inject.internal.guava.collect.ContiguousSet tailSetImpl(java.lang.Comparable,boolean)>($r2, z0);

        return $r3;
    }

    volatile com.mycila.inject.internal.guava.collect.ImmutableSortedSet subSetImpl(java.lang.Object, boolean, java.lang.Object, boolean)
    {
        com.mycila.inject.internal.guava.collect.ContiguousSet $r5;
        com.mycila.inject.internal.guava.collect.RegularContiguousSet r0;
        java.lang.Object r1, r2;
        java.lang.Comparable $r3, $r4;
        boolean z0, z1;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularContiguousSet;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.lang.Object;

        z1 := @parameter3: boolean;

        $r4 = (java.lang.Comparable) r1;

        $r3 = (java.lang.Comparable) r2;

        $r5 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.RegularContiguousSet: com.mycila.inject.internal.guava.collect.ContiguousSet subSetImpl(java.lang.Comparable,boolean,java.lang.Comparable,boolean)>($r4, z0, $r3, z1);

        return $r5;
    }

    volatile com.mycila.inject.internal.guava.collect.ImmutableSortedSet headSetImpl(java.lang.Object, boolean)
    {
        com.mycila.inject.internal.guava.collect.ContiguousSet $r3;
        com.mycila.inject.internal.guava.collect.RegularContiguousSet r0;
        java.lang.Object r1;
        java.lang.Comparable $r2;
        boolean z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularContiguousSet;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        $r2 = (java.lang.Comparable) r1;

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.RegularContiguousSet: com.mycila.inject.internal.guava.collect.ContiguousSet headSetImpl(java.lang.Comparable,boolean)>($r2, z0);

        return $r3;
    }

    public volatile java.lang.Object last()
    {
        java.lang.Comparable $r1;
        com.mycila.inject.internal.guava.collect.RegularContiguousSet r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularContiguousSet;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.RegularContiguousSet: java.lang.Comparable last()>();

        return $r1;
    }

    public volatile java.lang.Object first()
    {
        java.lang.Comparable $r1;
        com.mycila.inject.internal.guava.collect.RegularContiguousSet r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularContiguousSet;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.RegularContiguousSet: java.lang.Comparable first()>();

        return $r1;
    }

    public volatile java.util.Iterator iterator()
    {
        com.mycila.inject.internal.guava.collect.UnmodifiableIterator $r1;
        com.mycila.inject.internal.guava.collect.RegularContiguousSet r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularContiguousSet;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.RegularContiguousSet: com.mycila.inject.internal.guava.collect.UnmodifiableIterator iterator()>();

        return $r1;
    }

    static boolean access$000(java.lang.Comparable, java.lang.Comparable)
    {
        java.lang.Comparable r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Comparable;

        r1 := @parameter1: java.lang.Comparable;

        $z0 = staticinvoke <com.mycila.inject.internal.guava.collect.RegularContiguousSet: boolean equalsOrThrow(java.lang.Comparable,java.lang.Comparable)>(r0, r1);

        return $z0;
    }

    public static void <clinit>()
    {
        <com.mycila.inject.internal.guava.collect.RegularContiguousSet: long serialVersionUID> = 0L;

        return;
    }
}
