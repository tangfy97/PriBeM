final class org.waveprotocol.wave.model.util.CollectionUtils$3 extends java.lang.Object implements org.waveprotocol.wave.model.util.DataDomain
{

    void <init>()
    {
        org.waveprotocol.wave.model.util.CollectionUtils$3 r0;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void compose(java.util.Set, java.util.Set, java.util.Set)
    {
        java.util.Set r0, r1, r2;
        org.waveprotocol.wave.model.util.CollectionUtils$3 r3;

        r3 := @this: org.waveprotocol.wave.model.util.CollectionUtils$3;

        r0 := @parameter0: java.util.Set;

        r1 := @parameter1: java.util.Set;

        r2 := @parameter2: java.util.Set;

        interfaceinvoke r0.<java.util.Set: void clear()>();

        interfaceinvoke r0.<java.util.Set: boolean addAll(java.util.Collection)>(r1);

        interfaceinvoke r0.<java.util.Set: boolean addAll(java.util.Collection)>(r2);

        return;
    }

    public java.util.Set empty()
    {
        java.util.HashSet $r0;
        org.waveprotocol.wave.model.util.CollectionUtils$3 r1;

        r1 := @this: org.waveprotocol.wave.model.util.CollectionUtils$3;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        return $r0;
    }

    public java.util.Set readOnlyView(java.util.Set)
    {
        java.util.Set r0, $r1;
        org.waveprotocol.wave.model.util.CollectionUtils$3 r2;

        r2 := @this: org.waveprotocol.wave.model.util.CollectionUtils$3;

        r0 := @parameter0: java.util.Set;

        $r1 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>(r0);

        return $r1;
    }

    public volatile java.lang.Object readOnlyView(java.lang.Object)
    {
        java.util.Set $r2, $r3;
        java.lang.Object r1;
        org.waveprotocol.wave.model.util.CollectionUtils$3 r0;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$3;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.util.Set) r1;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.util.CollectionUtils$3: java.util.Set readOnlyView(java.util.Set)>($r2);

        return $r3;
    }

    public volatile void compose(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.util.Set $r4, $r5, $r6;
        java.lang.Object r1, r2, r3;
        org.waveprotocol.wave.model.util.CollectionUtils$3 r0;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$3;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (java.util.Set) r1;

        $r5 = (java.util.Set) r2;

        $r4 = (java.util.Set) r3;

        virtualinvoke r0.<org.waveprotocol.wave.model.util.CollectionUtils$3: void compose(java.util.Set,java.util.Set,java.util.Set)>($r6, $r5, $r4);

        return;
    }

    public volatile java.lang.Object empty()
    {
        java.util.Set $r1;
        org.waveprotocol.wave.model.util.CollectionUtils$3 r0;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$3;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.util.CollectionUtils$3: java.util.Set empty()>();

        return $r1;
    }
}
