public class com.hp.hpl.jena.rdf.model.ModelExtract extends java.lang.Object
{
    protected com.hp.hpl.jena.rdf.model.StatementBoundary boundary;

    public void <init>(com.hp.hpl.jena.rdf.model.StatementBoundary)
    {
        com.hp.hpl.jena.rdf.model.StatementBoundary r1;
        com.hp.hpl.jena.rdf.model.ModelExtract r0;

        r0 := @this: com.hp.hpl.jena.rdf.model.ModelExtract;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.StatementBoundary;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.rdf.model.ModelExtract: com.hp.hpl.jena.rdf.model.StatementBoundary boundary> = r1;

        return;
    }

    public com.hp.hpl.jena.rdf.model.Model extract(com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.rdf.model.Model $r1, r3, $r4;
        com.hp.hpl.jena.rdf.model.ModelExtract r0;
        com.hp.hpl.jena.rdf.model.Resource r2;

        r0 := @this: com.hp.hpl.jena.rdf.model.ModelExtract;

        r2 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        r3 := @parameter1: com.hp.hpl.jena.rdf.model.Model;

        $r1 = staticinvoke <com.hp.hpl.jena.rdf.model.ModelFactory: com.hp.hpl.jena.rdf.model.Model createDefaultModel()>();

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.ModelExtract: com.hp.hpl.jena.rdf.model.Model extractInto(com.hp.hpl.jena.rdf.model.Model,com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Model)>($r1, r2, r3);

        return $r4;
    }

    public com.hp.hpl.jena.rdf.model.Model extractInto(com.hp.hpl.jena.rdf.model.Model, com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.rdf.model.StatementBoundary $r2;
        com.hp.hpl.jena.rdf.model.ModelExtract r0;
        com.hp.hpl.jena.graph.Node $r8;
        com.hp.hpl.jena.rdf.model.Resource r7;
        com.hp.hpl.jena.graph.GraphExtract $r4;
        com.hp.hpl.jena.rdf.model.Model r1, r5, $r11;
        com.hp.hpl.jena.graph.TripleBoundary $r3;
        com.hp.hpl.jena.graph.Graph $r6, $r9, $r10;

        r0 := @this: com.hp.hpl.jena.rdf.model.ModelExtract;

        r5 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r7 := @parameter1: com.hp.hpl.jena.rdf.model.Resource;

        r1 := @parameter2: com.hp.hpl.jena.rdf.model.Model;

        $r2 = r0.<com.hp.hpl.jena.rdf.model.ModelExtract: com.hp.hpl.jena.rdf.model.StatementBoundary boundary>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.StatementBoundary: com.hp.hpl.jena.graph.TripleBoundary asTripleBoundary(com.hp.hpl.jena.rdf.model.Model)>(r1);

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.ModelExtract: com.hp.hpl.jena.graph.GraphExtract getGraphExtract(com.hp.hpl.jena.graph.TripleBoundary)>($r3);

        $r6 = interfaceinvoke r5.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.graph.Graph getGraph()>();

        $r8 = interfaceinvoke r7.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.graph.Node asNode()>();

        $r9 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.graph.Graph getGraph()>();

        $r10 = virtualinvoke $r4.<com.hp.hpl.jena.graph.GraphExtract: com.hp.hpl.jena.graph.Graph extractInto(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Graph)>($r6, $r8, $r9);

        $r11 = staticinvoke <com.hp.hpl.jena.rdf.model.ModelFactory: com.hp.hpl.jena.rdf.model.Model createModelForGraph(com.hp.hpl.jena.graph.Graph)>($r10);

        return $r11;
    }

    protected com.hp.hpl.jena.graph.GraphExtract getGraphExtract(com.hp.hpl.jena.graph.TripleBoundary)
    {
        com.hp.hpl.jena.graph.TripleBoundary r1;
        com.hp.hpl.jena.graph.GraphExtract $r0;
        com.hp.hpl.jena.rdf.model.ModelExtract r2;

        r2 := @this: com.hp.hpl.jena.rdf.model.ModelExtract;

        r1 := @parameter0: com.hp.hpl.jena.graph.TripleBoundary;

        $r0 = new com.hp.hpl.jena.graph.GraphExtract;

        specialinvoke $r0.<com.hp.hpl.jena.graph.GraphExtract: void <init>(com.hp.hpl.jena.graph.TripleBoundary)>(r1);

        return $r0;
    }
}
