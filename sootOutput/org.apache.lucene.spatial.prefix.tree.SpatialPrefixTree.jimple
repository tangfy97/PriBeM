public abstract class org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree extends java.lang.Object
{
    protected static final java.nio.charset.Charset UTF8;
    protected final int maxLevels;
    protected final com.spatial4j.core.context.SpatialContext ctx;
    private transient org.apache.lucene.spatial.prefix.tree.Cell worldCell;
    static final boolean $assertionsDisabled;

    public void <init>(com.spatial4j.core.context.SpatialContext, int)
    {
        org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree r0;
        com.spatial4j.core.context.SpatialContext r1;
        int i0;
        java.lang.AssertionError $r2;
        boolean $z0;

        r0 := @this: org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree;

        r1 := @parameter0: com.spatial4j.core.context.SpatialContext;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = <org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 > 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        r0.<org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree: com.spatial4j.core.context.SpatialContext ctx> = r1;

        r0.<org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree: int maxLevels> = i0;

        return;
    }

    public com.spatial4j.core.context.SpatialContext getSpatialContext()
    {
        com.spatial4j.core.context.SpatialContext $r1;
        org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree r0;

        r0 := @this: org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree;

        $r1 = r0.<org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree: com.spatial4j.core.context.SpatialContext ctx>;

        return $r1;
    }

    public int getMaxLevels()
    {
        int $i0;
        org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree r0;

        r0 := @this: org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree;

        $i0 = r0.<org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree: int maxLevels>;

        return $i0;
    }

    public java.lang.String toString()
    {
        org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree r1;
        com.spatial4j.core.context.SpatialContext $r8;
        int $i0;
        java.lang.StringBuilder $r0, $r4, $r5, $r6, $r7, $r9, $r10;
        java.lang.Class $r2;
        java.lang.String $r3, $r11;

        r1 := @this: org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getSimpleName()>();

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(maxLevels:");

        $i0 = r1.<org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree: int maxLevels>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",ctx:");

        $r8 = r1.<org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree: com.spatial4j.core.context.SpatialContext ctx>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    public abstract int getLevelForDistance(double);

    public double getDistanceForLevel(int)
    {
        org.apache.lucene.spatial.prefix.tree.Cell $r5;
        com.spatial4j.core.shape.Shape $r6;
        int i0, $i1;
        com.spatial4j.core.shape.Point $r4;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree r1;
        com.spatial4j.core.shape.Rectangle $r3, $r7;
        com.spatial4j.core.context.SpatialContext $r2;
        java.lang.IllegalArgumentException $r0;

        r1 := @this: org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree;

        i0 := @parameter0: int;

        if i0 < 1 goto label1;

        $i1 = virtualinvoke r1.<org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree: int getMaxLevels()>();

        if i0 <= $i1 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Level must be in 1 to maxLevels range");

        throw $r0;

     label2:
        $r2 = r1.<org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree: com.spatial4j.core.context.SpatialContext ctx>;

        $r3 = virtualinvoke $r2.<com.spatial4j.core.context.SpatialContext: com.spatial4j.core.shape.Rectangle getWorldBounds()>();

        $r4 = interfaceinvoke $r3.<com.spatial4j.core.shape.Rectangle: com.spatial4j.core.shape.Point getCenter()>();

        $r5 = virtualinvoke r1.<org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree: org.apache.lucene.spatial.prefix.tree.Cell getCell(com.spatial4j.core.shape.Point,int)>($r4, i0);

        $r6 = virtualinvoke $r5.<org.apache.lucene.spatial.prefix.tree.Cell: com.spatial4j.core.shape.Shape getShape()>();

        $r7 = interfaceinvoke $r6.<com.spatial4j.core.shape.Shape: com.spatial4j.core.shape.Rectangle getBoundingBox()>();

        $d0 = interfaceinvoke $r7.<com.spatial4j.core.shape.Rectangle: double getWidth()>();

        $d1 = interfaceinvoke $r7.<com.spatial4j.core.shape.Rectangle: double getHeight()>();

        $d3 = $d0 * $d0;

        $d2 = $d1 * $d1;

        $d4 = $d3 + $d2;

        $d5 = staticinvoke <java.lang.Math: double sqrt(double)>($d4);

        return $d5;
    }

    public org.apache.lucene.spatial.prefix.tree.Cell getWorldCell()
    {
        org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree r0;
        org.apache.lucene.spatial.prefix.tree.Cell $r1, $r2, $r3;

        r0 := @this: org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree;

        $r1 = r0.<org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree: org.apache.lucene.spatial.prefix.tree.Cell worldCell>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree: org.apache.lucene.spatial.prefix.tree.Cell getCell(java.lang.String)>("");

        r0.<org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree: org.apache.lucene.spatial.prefix.tree.Cell worldCell> = $r3;

     label1:
        $r2 = r0.<org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree: org.apache.lucene.spatial.prefix.tree.Cell worldCell>;

        return $r2;
    }

    public abstract org.apache.lucene.spatial.prefix.tree.Cell getCell(java.lang.String);

    public abstract org.apache.lucene.spatial.prefix.tree.Cell getCell(byte[], int, int);

    public final org.apache.lucene.spatial.prefix.tree.Cell getCell(byte[], int, int, org.apache.lucene.spatial.prefix.tree.Cell)
    {
        byte[] r1;
        org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree r2;
        int i0, i1;
        org.apache.lucene.spatial.prefix.tree.Cell r0, $r3;

        r2 := @this: org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r0 := @parameter3: org.apache.lucene.spatial.prefix.tree.Cell;

        if r0 != null goto label1;

        $r3 = virtualinvoke r2.<org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree: org.apache.lucene.spatial.prefix.tree.Cell getCell(byte[],int,int)>(r1, i0, i1);

        return $r3;

     label1:
        virtualinvoke r0.<org.apache.lucene.spatial.prefix.tree.Cell: void reset(byte[],int,int)>(r1, i0, i1);

        return r0;
    }

    protected org.apache.lucene.spatial.prefix.tree.Cell getCell(com.spatial4j.core.shape.Point, int)
    {
        java.util.List $r2;
        org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree r0;
        com.spatial4j.core.shape.Point r1;
        int i0;
        java.lang.Object $r3;
        org.apache.lucene.spatial.prefix.tree.Cell $r4;

        r0 := @this: org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree;

        r1 := @parameter0: com.spatial4j.core.shape.Point;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r0.<org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree: java.util.List getCells(com.spatial4j.core.shape.Point,int,boolean)>(r1, i0, 0);

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = (org.apache.lucene.spatial.prefix.tree.Cell) $r3;

        return $r4;
    }

    public java.util.List getCells(com.spatial4j.core.shape.Shape, int, boolean, boolean)
    {
        org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree r0;
        java.lang.IllegalArgumentException $r6;
        org.apache.lucene.spatial.prefix.tree.Cell $r3;
        java.util.ArrayList $r2;
        com.spatial4j.core.shape.Shape r1;
        java.util.List $r5;
        short $s2;
        int i0, $i1;
        com.spatial4j.core.shape.Point $r4;
        boolean $z0, z1, z2;

        r0 := @this: org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree;

        r1 := @parameter0: com.spatial4j.core.shape.Shape;

        i0 := @parameter1: int;

        z1 := @parameter2: boolean;

        z2 := @parameter3: boolean;

        $i1 = r0.<org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree: int maxLevels>;

        if i0 <= $i1 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("detailLevel > maxLevels");

        throw $r6;

     label1:
        $z0 = r1 instanceof com.spatial4j.core.shape.Point;

        if $z0 == 0 goto label2;

        $r4 = (com.spatial4j.core.shape.Point) r1;

        $r5 = virtualinvoke r0.<org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree: java.util.List getCells(com.spatial4j.core.shape.Point,int,boolean)>($r4, i0, z1);

        return $r5;

     label2:
        $r2 = new java.util.ArrayList;

        if z1 == 0 goto label3;

        $s2 = 4096;

        goto label4;

     label3:
        $s2 = 2048;

     label4:
        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($s2);

        $r3 = virtualinvoke r0.<org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree: org.apache.lucene.spatial.prefix.tree.Cell getWorldCell()>();

        specialinvoke r0.<org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree: boolean recursiveGetCells(org.apache.lucene.spatial.prefix.tree.Cell,com.spatial4j.core.shape.Shape,int,boolean,boolean,java.util.List)>($r3, r1, i0, z1, z2, $r2);

        return $r2;
    }

    private boolean recursiveGetCells(org.apache.lucene.spatial.prefix.tree.Cell, com.spatial4j.core.shape.Shape, int, boolean, boolean, java.util.List)
    {
        org.apache.lucene.spatial.prefix.tree.Cell r0, r4;
        com.spatial4j.core.shape.Shape r1;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, i7, $i9;
        boolean $z0, z1, z2, $z3, $z4;
        org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree r5;
        java.util.Iterator $r7;
        java.util.Collection $r6;
        java.util.List r2;
        java.lang.Object $r3;

        r5 := @this: org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree;

        r0 := @parameter0: org.apache.lucene.spatial.prefix.tree.Cell;

        r1 := @parameter1: com.spatial4j.core.shape.Shape;

        i1 := @parameter2: int;

        z1 := @parameter3: boolean;

        z2 := @parameter4: boolean;

        r2 := @parameter5: java.util.List;

        $i0 = virtualinvoke r0.<org.apache.lucene.spatial.prefix.tree.Cell: int getLevel()>();

        if $i0 != i1 goto label1;

        virtualinvoke r0.<org.apache.lucene.spatial.prefix.tree.Cell: void setLeaf()>();

     label1:
        $z0 = virtualinvoke r0.<org.apache.lucene.spatial.prefix.tree.Cell: boolean isLeaf()>();

        if $z0 == 0 goto label2;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r0);

        return 1;

     label2:
        if z1 == 0 goto label3;

        $i6 = virtualinvoke r0.<org.apache.lucene.spatial.prefix.tree.Cell: int getLevel()>();

        if $i6 == 0 goto label3;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r0);

     label3:
        $r6 = virtualinvoke r0.<org.apache.lucene.spatial.prefix.tree.Cell: java.util.Collection getSubCells(com.spatial4j.core.shape.Shape)>(r1);

        i7 = 0;

        $r7 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z4 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label6;

        $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.lucene.spatial.prefix.tree.Cell) $r3;

        $z3 = specialinvoke r5.<org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree: boolean recursiveGetCells(org.apache.lucene.spatial.prefix.tree.Cell,com.spatial4j.core.shape.Shape,int,boolean,boolean,java.util.List)>(r4, r1, i1, z1, z2, r2);

        if $z3 == 0 goto label5;

        i7 = i7 + 1;

     label5:
        goto label4;

     label6:
        if z2 == 0 goto label9;

        $i2 = virtualinvoke r0.<org.apache.lucene.spatial.prefix.tree.Cell: int getSubCellsSize()>();

        if i7 != $i2 goto label9;

        $i3 = virtualinvoke r0.<org.apache.lucene.spatial.prefix.tree.Cell: int getLevel()>();

        if $i3 == 0 goto label9;

     label7:
        $i4 = interfaceinvoke r2.<java.util.List: int size()>();

        $i5 = $i4 - 1;

        interfaceinvoke r2.<java.util.List: java.lang.Object remove(int)>($i5);

        $i9 = (int) -1;

        i7 = i7 + $i9;

        if i7 > 0 goto label7;

        virtualinvoke r0.<org.apache.lucene.spatial.prefix.tree.Cell: void setLeaf()>();

        if z1 != 0 goto label8;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r0);

     label8:
        return 1;

     label9:
        return 0;
    }

    public java.util.List getCells(com.spatial4j.core.shape.Point, int, boolean)
    {
        org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree r0;
        java.lang.AssertionError $r7;
        org.apache.lucene.spatial.prefix.tree.Cell $r2, $r6;
        java.util.ArrayList $r4;
        java.util.List $r8;
        com.spatial4j.core.shape.Point r1;
        int i0, $i1, i2;
        java.lang.String $r3, $r5;
        boolean z0, $z1;

        r0 := @this: org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree;

        r1 := @parameter0: com.spatial4j.core.shape.Point;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r2 = virtualinvoke r0.<org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree: org.apache.lucene.spatial.prefix.tree.Cell getCell(com.spatial4j.core.shape.Point,int)>(r1, i0);

        if z0 != 0 goto label1;

        $r8 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r2);

        return $r8;

     label1:
        $r3 = virtualinvoke $r2.<org.apache.lucene.spatial.prefix.tree.Cell: java.lang.String getTokenString()>();

        $z1 = <org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i1 == i0 goto label2;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label2:
        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>(i0);

        i2 = 1;

     label3:
        if i2 >= i0 goto label4;

        $r5 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(0, i2);

        $r6 = virtualinvoke r0.<org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree: org.apache.lucene.spatial.prefix.tree.Cell getCell(java.lang.String)>($r5);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r6);

        i2 = i2 + 1;

        goto label3;

     label4:
        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r2);

        return $r4;
    }

    public static java.util.List cellsToTokenStrings(java.util.Collection)
    {
        java.util.Iterator $r2;
        java.util.Collection r1;
        org.apache.lucene.spatial.prefix.tree.Cell r4;
        java.util.ArrayList $r0;
        int $i0;
        java.lang.Object $r3;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r5, $r9;
        boolean $z0, $z1;

        r1 := @parameter0: java.util.Collection;

        $r0 = new java.util.ArrayList;

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0);

        $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.lucene.spatial.prefix.tree.Cell) $r3;

        $r5 = virtualinvoke r4.<org.apache.lucene.spatial.prefix.tree.Cell: java.lang.String getTokenString()>();

        $z1 = virtualinvoke r4.<org.apache.lucene.spatial.prefix.tree.Cell: boolean isLeaf()>();

        if $z1 == 0 goto label2;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(43);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label3;

     label2:
        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r5);

     label3:
        goto label1;

     label4:
        return $r0;
    }

    static void <clinit>()
    {
        java.nio.charset.Charset $r1;
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/spatial/prefix/tree/SpatialPrefixTree;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree: boolean $assertionsDisabled> = $z1;

        $r1 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8");

        <org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree: java.nio.charset.Charset UTF8> = $r1;

        return;
    }
}
