public class com.hp.hpl.jena.sparql.expr.ExprTransformCopy extends java.lang.Object implements com.hp.hpl.jena.sparql.expr.ExprTransform
{
    public static final boolean COPY_ALWAYS;
    public static final boolean COPY_ONLY_ON_CHANGE;
    private boolean alwaysCopy;

    public void <init>()
    {
        com.hp.hpl.jena.sparql.expr.ExprTransformCopy r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprTransformCopy;

        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprTransformCopy: void <init>(boolean)>(0);

        return;
    }

    public void <init>(boolean)
    {
        com.hp.hpl.jena.sparql.expr.ExprTransformCopy r0;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprTransformCopy;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.expr.ExprTransformCopy: boolean alwaysCopy> = 0;

        r0.<com.hp.hpl.jena.sparql.expr.ExprTransformCopy: boolean alwaysCopy> = z0;

        return;
    }

    public com.hp.hpl.jena.sparql.expr.Expr transform(com.hp.hpl.jena.sparql.expr.ExprFunction0)
    {
        com.hp.hpl.jena.sparql.expr.ExprFunction0 r1;
        com.hp.hpl.jena.sparql.expr.Expr $r2;
        com.hp.hpl.jena.sparql.expr.ExprTransformCopy r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprTransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprFunction0;

        $r2 = specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprTransformCopy: com.hp.hpl.jena.sparql.expr.Expr xform(com.hp.hpl.jena.sparql.expr.ExprFunction0)>(r1);

        return $r2;
    }

    public com.hp.hpl.jena.sparql.expr.Expr transform(com.hp.hpl.jena.sparql.expr.ExprFunction1, com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.sparql.expr.ExprFunction1 r1;
        com.hp.hpl.jena.sparql.expr.Expr r2, $r3;
        com.hp.hpl.jena.sparql.expr.ExprTransformCopy r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprTransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprFunction1;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.Expr;

        $r3 = specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprTransformCopy: com.hp.hpl.jena.sparql.expr.Expr xform(com.hp.hpl.jena.sparql.expr.ExprFunction1,com.hp.hpl.jena.sparql.expr.Expr)>(r1, r2);

        return $r3;
    }

    public com.hp.hpl.jena.sparql.expr.Expr transform(com.hp.hpl.jena.sparql.expr.ExprFunction2, com.hp.hpl.jena.sparql.expr.Expr, com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.sparql.expr.Expr r2, r3, $r4;
        com.hp.hpl.jena.sparql.expr.ExprFunction2 r1;
        com.hp.hpl.jena.sparql.expr.ExprTransformCopy r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprTransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprFunction2;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.Expr;

        r3 := @parameter2: com.hp.hpl.jena.sparql.expr.Expr;

        $r4 = specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprTransformCopy: com.hp.hpl.jena.sparql.expr.Expr xform(com.hp.hpl.jena.sparql.expr.ExprFunction2,com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr)>(r1, r2, r3);

        return $r4;
    }

    public com.hp.hpl.jena.sparql.expr.Expr transform(com.hp.hpl.jena.sparql.expr.ExprFunction3, com.hp.hpl.jena.sparql.expr.Expr, com.hp.hpl.jena.sparql.expr.Expr, com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.sparql.expr.Expr r2, r3, r4, $r5;
        com.hp.hpl.jena.sparql.expr.ExprFunction3 r1;
        com.hp.hpl.jena.sparql.expr.ExprTransformCopy r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprTransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprFunction3;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.Expr;

        r3 := @parameter2: com.hp.hpl.jena.sparql.expr.Expr;

        r4 := @parameter3: com.hp.hpl.jena.sparql.expr.Expr;

        $r5 = specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprTransformCopy: com.hp.hpl.jena.sparql.expr.Expr xform(com.hp.hpl.jena.sparql.expr.ExprFunction3,com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr)>(r1, r2, r3, r4);

        return $r5;
    }

    public com.hp.hpl.jena.sparql.expr.Expr transform(com.hp.hpl.jena.sparql.expr.ExprFunctionN, com.hp.hpl.jena.sparql.expr.ExprList)
    {
        com.hp.hpl.jena.sparql.expr.ExprFunctionN r1;
        com.hp.hpl.jena.sparql.expr.Expr $r3;
        com.hp.hpl.jena.sparql.expr.ExprList r2;
        com.hp.hpl.jena.sparql.expr.ExprTransformCopy r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprTransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprFunctionN;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.ExprList;

        $r3 = specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprTransformCopy: com.hp.hpl.jena.sparql.expr.Expr xform(com.hp.hpl.jena.sparql.expr.ExprFunctionN,com.hp.hpl.jena.sparql.expr.ExprList)>(r1, r2);

        return $r3;
    }

    public com.hp.hpl.jena.sparql.expr.Expr transform(com.hp.hpl.jena.sparql.expr.ExprFunctionOp, com.hp.hpl.jena.sparql.expr.ExprList, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.expr.ExprFunctionOp r1;
        com.hp.hpl.jena.sparql.expr.Expr $r4;
        com.hp.hpl.jena.sparql.expr.ExprList r2;
        com.hp.hpl.jena.sparql.algebra.Op r3;
        com.hp.hpl.jena.sparql.expr.ExprTransformCopy r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprTransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprFunctionOp;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.ExprList;

        r3 := @parameter2: com.hp.hpl.jena.sparql.algebra.Op;

        $r4 = specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprTransformCopy: com.hp.hpl.jena.sparql.expr.Expr xform(com.hp.hpl.jena.sparql.expr.ExprFunctionOp,com.hp.hpl.jena.sparql.expr.ExprList,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2, r3);

        return $r4;
    }

    public com.hp.hpl.jena.sparql.expr.Expr transform(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r1;
        com.hp.hpl.jena.sparql.expr.Expr $r2;
        com.hp.hpl.jena.sparql.expr.ExprTransformCopy r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprTransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r2 = specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprTransformCopy: com.hp.hpl.jena.sparql.expr.Expr xform(com.hp.hpl.jena.sparql.expr.NodeValue)>(r1);

        return $r2;
    }

    public com.hp.hpl.jena.sparql.expr.Expr transform(com.hp.hpl.jena.sparql.expr.ExprVar)
    {
        com.hp.hpl.jena.sparql.expr.Expr $r2;
        com.hp.hpl.jena.sparql.expr.ExprTransformCopy r0;
        com.hp.hpl.jena.sparql.expr.ExprVar r1;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprTransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprVar;

        $r2 = specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprTransformCopy: com.hp.hpl.jena.sparql.expr.Expr xform(com.hp.hpl.jena.sparql.expr.ExprVar)>(r1);

        return $r2;
    }

    public com.hp.hpl.jena.sparql.expr.Expr transform(com.hp.hpl.jena.sparql.expr.ExprAggregator)
    {
        com.hp.hpl.jena.sparql.expr.ExprAggregator r1;
        com.hp.hpl.jena.sparql.expr.Expr $r2;
        com.hp.hpl.jena.sparql.expr.ExprTransformCopy r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprTransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprAggregator;

        $r2 = specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprTransformCopy: com.hp.hpl.jena.sparql.expr.Expr xform(com.hp.hpl.jena.sparql.expr.ExprAggregator)>(r1);

        return $r2;
    }

    private com.hp.hpl.jena.sparql.expr.Expr xform(com.hp.hpl.jena.sparql.expr.ExprFunction0)
    {
        com.hp.hpl.jena.sparql.expr.ExprFunction0 r1;
        com.hp.hpl.jena.sparql.expr.Expr $r2;
        com.hp.hpl.jena.sparql.expr.ExprTransformCopy r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprTransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprFunction0;

        $z0 = r0.<com.hp.hpl.jena.sparql.expr.ExprTransformCopy: boolean alwaysCopy>;

        if $z0 != 0 goto label1;

        return r1;

     label1:
        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.ExprFunction0: com.hp.hpl.jena.sparql.expr.Expr copy()>();

        return $r2;
    }

    private com.hp.hpl.jena.sparql.expr.Expr xform(com.hp.hpl.jena.sparql.expr.ExprFunction1, com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.sparql.expr.ExprFunction1 r1;
        com.hp.hpl.jena.sparql.expr.Expr r2, $r3, $r4;
        com.hp.hpl.jena.sparql.expr.ExprTransformCopy r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprTransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprFunction1;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.Expr;

        $z0 = r0.<com.hp.hpl.jena.sparql.expr.ExprTransformCopy: boolean alwaysCopy>;

        if $z0 != 0 goto label1;

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.ExprFunction1: com.hp.hpl.jena.sparql.expr.Expr getArg()>();

        if r2 != $r4 goto label1;

        return r1;

     label1:
        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.ExprFunction1: com.hp.hpl.jena.sparql.expr.Expr copy(com.hp.hpl.jena.sparql.expr.Expr)>(r2);

        return $r3;
    }

    private com.hp.hpl.jena.sparql.expr.Expr xform(com.hp.hpl.jena.sparql.expr.ExprFunction2, com.hp.hpl.jena.sparql.expr.Expr, com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.sparql.expr.Expr r2, r3, $r4, $r5, $r6;
        com.hp.hpl.jena.sparql.expr.ExprFunction2 r1;
        com.hp.hpl.jena.sparql.expr.ExprTransformCopy r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprTransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprFunction2;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.Expr;

        r3 := @parameter2: com.hp.hpl.jena.sparql.expr.Expr;

        $z0 = r0.<com.hp.hpl.jena.sparql.expr.ExprTransformCopy: boolean alwaysCopy>;

        if $z0 != 0 goto label1;

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.ExprFunction2: com.hp.hpl.jena.sparql.expr.Expr getArg1()>();

        if r2 != $r4 goto label1;

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.ExprFunction2: com.hp.hpl.jena.sparql.expr.Expr getArg2()>();

        if r3 != $r5 goto label1;

        return r1;

     label1:
        $r6 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.ExprFunction2: com.hp.hpl.jena.sparql.expr.Expr copy(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr)>(r2, r3);

        return $r6;
    }

    private com.hp.hpl.jena.sparql.expr.Expr xform(com.hp.hpl.jena.sparql.expr.ExprFunction3, com.hp.hpl.jena.sparql.expr.Expr, com.hp.hpl.jena.sparql.expr.Expr, com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.sparql.expr.Expr r2, r3, r4, $r5, $r6, $r7, $r8;
        com.hp.hpl.jena.sparql.expr.ExprFunction3 r1;
        com.hp.hpl.jena.sparql.expr.ExprTransformCopy r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprTransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprFunction3;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.Expr;

        r3 := @parameter2: com.hp.hpl.jena.sparql.expr.Expr;

        r4 := @parameter3: com.hp.hpl.jena.sparql.expr.Expr;

        $z0 = r0.<com.hp.hpl.jena.sparql.expr.ExprTransformCopy: boolean alwaysCopy>;

        if $z0 != 0 goto label1;

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.ExprFunction3: com.hp.hpl.jena.sparql.expr.Expr getArg1()>();

        if r2 != $r5 goto label1;

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.ExprFunction3: com.hp.hpl.jena.sparql.expr.Expr getArg2()>();

        if r3 != $r6 goto label1;

        $r7 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.ExprFunction3: com.hp.hpl.jena.sparql.expr.Expr getArg3()>();

        if r4 != $r7 goto label1;

        return r1;

     label1:
        $r8 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.ExprFunction3: com.hp.hpl.jena.sparql.expr.Expr copy(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr)>(r2, r3, r4);

        return $r8;
    }

    private com.hp.hpl.jena.sparql.expr.Expr xform(com.hp.hpl.jena.sparql.expr.ExprFunctionN, com.hp.hpl.jena.sparql.expr.ExprList)
    {
        java.util.List $r4, $r5;
        com.hp.hpl.jena.sparql.expr.ExprFunctionN r1;
        com.hp.hpl.jena.sparql.expr.Expr $r3;
        com.hp.hpl.jena.sparql.expr.ExprList r2;
        com.hp.hpl.jena.sparql.expr.ExprTransformCopy r0;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprTransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprFunctionN;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.ExprList;

        $z0 = r0.<com.hp.hpl.jena.sparql.expr.ExprTransformCopy: boolean alwaysCopy>;

        if $z0 != 0 goto label1;

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.ExprFunctionN: java.util.List getArgs()>();

        $r5 = virtualinvoke r2.<com.hp.hpl.jena.sparql.expr.ExprList: java.util.List getList()>();

        $z1 = specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprTransformCopy: boolean equals1(java.util.List,java.util.List)>($r4, $r5);

        if $z1 == 0 goto label1;

        return r1;

     label1:
        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.ExprFunctionN: com.hp.hpl.jena.sparql.expr.Expr copy(com.hp.hpl.jena.sparql.expr.ExprList)>(r2);

        return $r3;
    }

    private boolean equals1(java.util.List, java.util.List)
    {
        java.util.List r0, r1;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r2, $r3;
        com.hp.hpl.jena.sparql.expr.ExprTransformCopy r4;

        r4 := @this: com.hp.hpl.jena.sparql.expr.ExprTransformCopy;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        if r0 != null goto label1;

        if r1 != null goto label1;

        return 1;

     label1:
        if r0 != null goto label2;

        return 0;

     label2:
        if r1 != null goto label3;

        return 0;

     label3:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 == $i1 goto label4;

        return 0;

     label4:
        i3 = 0;

     label5:
        $i2 = interfaceinvoke r0.<java.util.List: int size()>();

        if i3 >= $i2 goto label7;

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i3);

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i3);

        if $r2 == $r3 goto label6;

        return 0;

     label6:
        i3 = i3 + 1;

        goto label5;

     label7:
        return 1;
    }

    private com.hp.hpl.jena.sparql.expr.Expr xform(com.hp.hpl.jena.sparql.expr.ExprFunctionOp, com.hp.hpl.jena.sparql.expr.ExprList, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.expr.ExprFunctionOp r1, $r7;
        java.util.List $r4, $r5;
        com.hp.hpl.jena.sparql.expr.ExprList r2;
        com.hp.hpl.jena.sparql.algebra.Op r3, $r6;
        com.hp.hpl.jena.sparql.expr.ExprTransformCopy r0;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprTransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprFunctionOp;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.ExprList;

        r3 := @parameter2: com.hp.hpl.jena.sparql.algebra.Op;

        $z0 = r0.<com.hp.hpl.jena.sparql.expr.ExprTransformCopy: boolean alwaysCopy>;

        if $z0 != 0 goto label1;

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.ExprFunctionOp: java.util.List getArgs()>();

        $r5 = virtualinvoke r2.<com.hp.hpl.jena.sparql.expr.ExprList: java.util.List getList()>();

        $z1 = specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprTransformCopy: boolean equals1(java.util.List,java.util.List)>($r4, $r5);

        if $z1 == 0 goto label1;

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.ExprFunctionOp: com.hp.hpl.jena.sparql.algebra.Op getGraphPattern()>();

        if $r6 != r3 goto label1;

        return r1;

     label1:
        $r7 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.ExprFunctionOp: com.hp.hpl.jena.sparql.expr.ExprFunctionOp copy(com.hp.hpl.jena.sparql.expr.ExprList,com.hp.hpl.jena.sparql.algebra.Op)>(r2, r3);

        return $r7;
    }

    private com.hp.hpl.jena.sparql.expr.Expr xform(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0;
        com.hp.hpl.jena.sparql.expr.ExprTransformCopy r1;

        r1 := @this: com.hp.hpl.jena.sparql.expr.ExprTransformCopy;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        return r0;
    }

    private com.hp.hpl.jena.sparql.expr.Expr xform(com.hp.hpl.jena.sparql.expr.ExprVar)
    {
        com.hp.hpl.jena.sparql.expr.ExprVar r0;
        com.hp.hpl.jena.sparql.expr.ExprTransformCopy r1;

        r1 := @this: com.hp.hpl.jena.sparql.expr.ExprTransformCopy;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprVar;

        return r0;
    }

    private com.hp.hpl.jena.sparql.expr.Expr xform(com.hp.hpl.jena.sparql.expr.ExprAggregator)
    {
        com.hp.hpl.jena.sparql.expr.ExprAggregator r1;
        com.hp.hpl.jena.sparql.expr.Expr $r3;
        com.hp.hpl.jena.sparql.core.Var $r2;
        com.hp.hpl.jena.sparql.expr.ExprTransformCopy r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprTransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprAggregator;

        $z0 = r0.<com.hp.hpl.jena.sparql.expr.ExprTransformCopy: boolean alwaysCopy>;

        if $z0 != 0 goto label1;

        return r1;

     label1:
        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.ExprAggregator: com.hp.hpl.jena.sparql.core.Var getVar()>();

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.ExprAggregator: com.hp.hpl.jena.sparql.expr.Expr copy(com.hp.hpl.jena.sparql.core.Var)>($r2);

        return $r3;
    }

    public static void <clinit>()
    {
        <com.hp.hpl.jena.sparql.expr.ExprTransformCopy: boolean COPY_ONLY_ON_CHANGE> = 0;

        <com.hp.hpl.jena.sparql.expr.ExprTransformCopy: boolean COPY_ALWAYS> = 1;

        return;
    }
}
