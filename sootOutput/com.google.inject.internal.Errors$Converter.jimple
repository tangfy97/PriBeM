abstract class com.google.inject.internal.Errors$Converter extends java.lang.Object
{
    final java.lang.Class type;

    void <init>(java.lang.Class)
    {
        com.google.inject.internal.Errors$Converter r0;
        java.lang.Class r1;

        r0 := @this: com.google.inject.internal.Errors$Converter;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.google.inject.internal.Errors$Converter: java.lang.Class type> = r1;

        return;
    }

    boolean appliesTo(java.lang.Object)
    {
        com.google.inject.internal.Errors$Converter r1;
        java.lang.Object r0;
        java.lang.Class $r2, $r3;
        boolean $z0, $z1;

        r1 := @this: com.google.inject.internal.Errors$Converter;

        r0 := @parameter0: java.lang.Object;

        if r0 == null goto label1;

        $r2 = r1.<com.google.inject.internal.Errors$Converter: java.lang.Class type>;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r3);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    java.lang.String convert(java.lang.Object)
    {
        com.google.inject.internal.Errors$Converter r0;
        java.lang.Object r1, $r3;
        java.lang.Class $r2;
        java.lang.String $r4;

        r0 := @this: com.google.inject.internal.Errors$Converter;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.google.inject.internal.Errors$Converter: java.lang.Class type>;

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(r1);

        $r4 = virtualinvoke r0.<com.google.inject.internal.Errors$Converter: java.lang.String toString(java.lang.Object)>($r3);

        return $r4;
    }

    abstract java.lang.String toString(java.lang.Object);
}
