class org.apache.xml.serialize.EncodingInfo$CharToByteConverterMethods extends java.lang.Object
{
    private static java.lang.reflect.Method fgGetConverterMethod;
    private static java.lang.reflect.Method fgCanConvertMethod;
    private static boolean fgConvertersAvailable;
    static java.lang.Class class$java$lang$String;

    private void <init>()
    {
        org.apache.xml.serialize.EncodingInfo$CharToByteConverterMethods r0;

        r0 := @this: org.apache.xml.serialize.EncodingInfo$CharToByteConverterMethods;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static boolean access$500()
    {
        boolean $z0;

        $z0 = <org.apache.xml.serialize.EncodingInfo$CharToByteConverterMethods: boolean fgConvertersAvailable>;

        return $z0;
    }

    static java.lang.reflect.Method access$600()
    {
        java.lang.reflect.Method $r0;

        $r0 = <org.apache.xml.serialize.EncodingInfo$CharToByteConverterMethods: java.lang.reflect.Method fgGetConverterMethod>;

        return $r0;
    }

    static java.lang.reflect.Method access$700()
    {
        java.lang.reflect.Method $r0;

        $r0 = <org.apache.xml.serialize.EncodingInfo$CharToByteConverterMethods: java.lang.reflect.Method fgCanConvertMethod>;

        return $r0;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        return $r1;

     label2:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label2;
    }

    static void <clinit>()
    {
        java.lang.Class[] $r1, $r4;
        java.lang.Exception $r7;
        java.lang.Class $r0, $r2, $r5, $r8;
        java.lang.reflect.Method $r3, $r6;

        <org.apache.xml.serialize.EncodingInfo$CharToByteConverterMethods: java.lang.reflect.Method fgGetConverterMethod> = null;

        <org.apache.xml.serialize.EncodingInfo$CharToByteConverterMethods: java.lang.reflect.Method fgCanConvertMethod> = null;

        <org.apache.xml.serialize.EncodingInfo$CharToByteConverterMethods: boolean fgConvertersAvailable> = 0;

     label1:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("sun.io.CharToByteConverter");

        $r1 = newarray (java.lang.Class)[1];

        $r2 = <org.apache.xml.serialize.EncodingInfo$CharToByteConverterMethods: java.lang.Class class$java$lang$String>;

        if $r2 != null goto label2;

        $r8 = staticinvoke <org.apache.xml.serialize.EncodingInfo$CharToByteConverterMethods: java.lang.Class class$(java.lang.String)>("java.lang.String");

        <org.apache.xml.serialize.EncodingInfo$CharToByteConverterMethods: java.lang.Class class$java$lang$String> = $r8;

        goto label3;

     label2:
        $r8 = <org.apache.xml.serialize.EncodingInfo$CharToByteConverterMethods: java.lang.Class class$java$lang$String>;

     label3:
        $r1[0] = $r8;

        $r3 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getConverter", $r1);

        <org.apache.xml.serialize.EncodingInfo$CharToByteConverterMethods: java.lang.reflect.Method fgGetConverterMethod> = $r3;

        $r4 = newarray (java.lang.Class)[1];

        $r5 = <java.lang.Character: java.lang.Class TYPE>;

        $r4[0] = $r5;

        $r6 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("canConvert", $r4);

        <org.apache.xml.serialize.EncodingInfo$CharToByteConverterMethods: java.lang.reflect.Method fgCanConvertMethod> = $r6;

        <org.apache.xml.serialize.EncodingInfo$CharToByteConverterMethods: boolean fgConvertersAvailable> = 1;

     label4:
        goto label6;

     label5:
        $r7 := @caughtexception;

        <org.apache.xml.serialize.EncodingInfo$CharToByteConverterMethods: java.lang.reflect.Method fgGetConverterMethod> = null;

        <org.apache.xml.serialize.EncodingInfo$CharToByteConverterMethods: java.lang.reflect.Method fgCanConvertMethod> = null;

        <org.apache.xml.serialize.EncodingInfo$CharToByteConverterMethods: boolean fgConvertersAvailable> = 0;

     label6:
        return;

        catch java.lang.Exception from label1 to label4 with label5;
    }
}
