public class org.apache.fontbox.cff.CFFFontROS extends org.apache.fontbox.cff.CFFFont
{
    private java.lang.String registry;
    private java.lang.String ordering;
    private int supplement;
    private java.util.List fontDictionaries;
    private java.util.List privateDictionaries;
    private org.apache.fontbox.cff.CIDKeyedFDSelect fdSelect;

    public void <init>()
    {
        java.util.LinkedList $r1, $r2;
        org.apache.fontbox.cff.CFFFontROS r0;

        r0 := @this: org.apache.fontbox.cff.CFFFontROS;

        specialinvoke r0.<org.apache.fontbox.cff.CFFFont: void <init>()>();

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.fontbox.cff.CFFFontROS: java.util.List fontDictionaries> = $r1;

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.fontbox.cff.CFFFontROS: java.util.List privateDictionaries> = $r2;

        r0.<org.apache.fontbox.cff.CFFFontROS: org.apache.fontbox.cff.CIDKeyedFDSelect fdSelect> = null;

        return;
    }

    public java.lang.String getRegistry()
    {
        java.lang.String $r1;
        org.apache.fontbox.cff.CFFFontROS r0;

        r0 := @this: org.apache.fontbox.cff.CFFFontROS;

        $r1 = r0.<org.apache.fontbox.cff.CFFFontROS: java.lang.String registry>;

        return $r1;
    }

    public void setRegistry(java.lang.String)
    {
        java.lang.String r1;
        org.apache.fontbox.cff.CFFFontROS r0;

        r0 := @this: org.apache.fontbox.cff.CFFFontROS;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.fontbox.cff.CFFFontROS: java.lang.String registry> = r1;

        return;
    }

    public java.lang.String getOrdering()
    {
        java.lang.String $r1;
        org.apache.fontbox.cff.CFFFontROS r0;

        r0 := @this: org.apache.fontbox.cff.CFFFontROS;

        $r1 = r0.<org.apache.fontbox.cff.CFFFontROS: java.lang.String ordering>;

        return $r1;
    }

    public void setOrdering(java.lang.String)
    {
        java.lang.String r1;
        org.apache.fontbox.cff.CFFFontROS r0;

        r0 := @this: org.apache.fontbox.cff.CFFFontROS;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.fontbox.cff.CFFFontROS: java.lang.String ordering> = r1;

        return;
    }

    public int getSupplement()
    {
        int $i0;
        org.apache.fontbox.cff.CFFFontROS r0;

        r0 := @this: org.apache.fontbox.cff.CFFFontROS;

        $i0 = r0.<org.apache.fontbox.cff.CFFFontROS: int supplement>;

        return $i0;
    }

    public void setSupplement(int)
    {
        int i0;
        org.apache.fontbox.cff.CFFFontROS r0;

        r0 := @this: org.apache.fontbox.cff.CFFFontROS;

        i0 := @parameter0: int;

        r0.<org.apache.fontbox.cff.CFFFontROS: int supplement> = i0;

        return;
    }

    public java.util.List getFontDict()
    {
        java.util.List $r1;
        org.apache.fontbox.cff.CFFFontROS r0;

        r0 := @this: org.apache.fontbox.cff.CFFFontROS;

        $r1 = r0.<org.apache.fontbox.cff.CFFFontROS: java.util.List fontDictionaries>;

        return $r1;
    }

    public void setFontDict(java.util.List)
    {
        java.util.List r1;
        org.apache.fontbox.cff.CFFFontROS r0;

        r0 := @this: org.apache.fontbox.cff.CFFFontROS;

        r1 := @parameter0: java.util.List;

        r0.<org.apache.fontbox.cff.CFFFontROS: java.util.List fontDictionaries> = r1;

        return;
    }

    public java.util.List getPrivDict()
    {
        java.util.List $r1;
        org.apache.fontbox.cff.CFFFontROS r0;

        r0 := @this: org.apache.fontbox.cff.CFFFontROS;

        $r1 = r0.<org.apache.fontbox.cff.CFFFontROS: java.util.List privateDictionaries>;

        return $r1;
    }

    public void setPrivDict(java.util.List)
    {
        java.util.List r1;
        org.apache.fontbox.cff.CFFFontROS r0;

        r0 := @this: org.apache.fontbox.cff.CFFFontROS;

        r1 := @parameter0: java.util.List;

        r0.<org.apache.fontbox.cff.CFFFontROS: java.util.List privateDictionaries> = r1;

        return;
    }

    public org.apache.fontbox.cff.CIDKeyedFDSelect getFdSelect()
    {
        org.apache.fontbox.cff.CIDKeyedFDSelect $r1;
        org.apache.fontbox.cff.CFFFontROS r0;

        r0 := @this: org.apache.fontbox.cff.CFFFontROS;

        $r1 = r0.<org.apache.fontbox.cff.CFFFontROS: org.apache.fontbox.cff.CIDKeyedFDSelect fdSelect>;

        return $r1;
    }

    public void setFdSelect(org.apache.fontbox.cff.CIDKeyedFDSelect)
    {
        org.apache.fontbox.cff.CIDKeyedFDSelect r1;
        org.apache.fontbox.cff.CFFFontROS r0;

        r0 := @this: org.apache.fontbox.cff.CFFFontROS;

        r1 := @parameter0: org.apache.fontbox.cff.CIDKeyedFDSelect;

        r0.<org.apache.fontbox.cff.CFFFontROS: org.apache.fontbox.cff.CIDKeyedFDSelect fdSelect> = r1;

        return;
    }

    public int getWidth(int) throws java.io.IOException
    {
        org.apache.fontbox.cff.CFFFont$Mapping r11;
        java.util.Map r4, r7;
        org.apache.fontbox.cff.CharStringRenderer r22, $r23, $r24;
        boolean $z0, $z1, $z2;
        java.util.Collection $r8;
        org.apache.fontbox.cff.CFFFontROS r0;
        java.util.List $r2, $r5, $r14, $r16;
        int i0, $i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14, $i16;
        org.apache.fontbox.cff.CIDKeyedFDSelect $r1;
        java.lang.Number r13, $r19, $r21;
        java.util.Iterator $r9;
        java.lang.Object $r3, $r6, $r10, $r12, $r18, $r20;

        r0 := @this: org.apache.fontbox.cff.CFFFontROS;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.fontbox.cff.CFFFontROS: org.apache.fontbox.cff.CIDKeyedFDSelect fdSelect>;

        $i1 = virtualinvoke $r1.<org.apache.fontbox.cff.CIDKeyedFDSelect: int getFd(int)>(i0);

        $i14 = (int) -1;

        if $i1 != $i14 goto label01;

        if i0 != 0 goto label01;

        $i9 = specialinvoke r0.<org.apache.fontbox.cff.CFFFont: int getWidth(int)>(i0);

        return $i9;

     label01:
        $i16 = (int) -1;

        if $i1 != $i16 goto label02;

        return 1000;

     label02:
        $r2 = r0.<org.apache.fontbox.cff.CFFFontROS: java.util.List fontDictionaries>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1);

        r4 = (java.util.Map) $r3;

        $r5 = r0.<org.apache.fontbox.cff.CFFFontROS: java.util.List privateDictionaries>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>($i1);

        r7 = (java.util.Map) $r6;

        $z0 = interfaceinvoke r7.<java.util.Map: boolean containsKey(java.lang.Object)>("nominalWidthX");

        if $z0 == 0 goto label03;

        $r20 = interfaceinvoke r7.<java.util.Map: java.lang.Object get(java.lang.Object)>("nominalWidthX");

        $r21 = (java.lang.Number) $r20;

        $i10 = virtualinvoke $r21.<java.lang.Number: int intValue()>();

        goto label04;

     label03:
        $i10 = 0;

     label04:
        i2 = $i10;

        $z1 = interfaceinvoke r7.<java.util.Map: boolean containsKey(java.lang.Object)>("defaultWidthX");

        if $z1 == 0 goto label05;

        $r18 = interfaceinvoke r7.<java.util.Map: java.lang.Object get(java.lang.Object)>("defaultWidthX");

        $r19 = (java.lang.Number) $r18;

        $i11 = virtualinvoke $r19.<java.lang.Number: int intValue()>();

        goto label06;

     label05:
        $i11 = 1000;

     label06:
        i3 = $i11;

        $r8 = virtualinvoke r0.<org.apache.fontbox.cff.CFFFontROS: java.util.Collection getMappings()>();

        $r9 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();

     label07:
        $z2 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label13;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.apache.fontbox.cff.CFFFont$Mapping) $r10;

        $i5 = virtualinvoke r11.<org.apache.fontbox.cff.CFFFont$Mapping: int getSID()>();

        if $i5 != i0 goto label12;

        $r12 = virtualinvoke r0.<org.apache.fontbox.cff.CFFFontROS: java.lang.Object getProperty(java.lang.String)>("CharstringType");

        r13 = (java.lang.Number) $r12;

        $i6 = virtualinvoke r13.<java.lang.Number: int intValue()>();

        if $i6 != 2 goto label08;

        $r16 = virtualinvoke r11.<org.apache.fontbox.cff.CFFFont$Mapping: java.util.List toType2Sequence()>();

        $r23 = new org.apache.fontbox.cff.CharStringRenderer;

        specialinvoke $r23.<org.apache.fontbox.cff.CharStringRenderer: void <init>(boolean)>(0);

        r22 = $r23;

        virtualinvoke $r23.<org.apache.fontbox.cff.CharStringRenderer: java.awt.geom.GeneralPath render(java.util.List)>($r16);

        goto label09;

     label08:
        $r14 = virtualinvoke r11.<org.apache.fontbox.cff.CFFFont$Mapping: java.util.List toType1Sequence()>();

        $r24 = new org.apache.fontbox.cff.CharStringRenderer;

        specialinvoke $r24.<org.apache.fontbox.cff.CharStringRenderer: void <init>()>();

        r22 = $r24;

        virtualinvoke $r24.<org.apache.fontbox.cff.CharStringRenderer: java.awt.geom.GeneralPath render(java.util.List)>($r14);

     label09:
        $i7 = virtualinvoke r22.<org.apache.fontbox.cff.CharStringRenderer: int getWidth()>();

        if $i7 == 0 goto label10;

        $i8 = virtualinvoke r22.<org.apache.fontbox.cff.CharStringRenderer: int getWidth()>();

        $i12 = $i8 + i2;

        goto label11;

     label10:
        $i12 = i3;

     label11:
        return $i12;

     label12:
        goto label07;

     label13:
        $i4 = virtualinvoke r0.<org.apache.fontbox.cff.CFFFontROS: int getNotDefWidth(int,int)>(i3, i2);

        return $i4;
    }
}
