public abstract class org.joda.time.base.BasePeriod extends org.joda.time.base.AbstractPeriod implements org.joda.time.ReadablePeriod, java.io.Serializable
{
    private static final long serialVersionUID;
    private org.joda.time.PeriodType iType;
    private int[] iValues;

    protected void <init>(int, int, int, int, int, int, int, int, org.joda.time.PeriodType)
    {
        org.joda.time.base.BasePeriod r0;
        org.joda.time.PeriodType $r1, r2;
        int i0, i1, i2, i3, i4, i5, i6, i7;

        r0 := @this: org.joda.time.base.BasePeriod;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        i6 := @parameter6: int;

        i7 := @parameter7: int;

        r2 := @parameter8: org.joda.time.PeriodType;

        specialinvoke r0.<org.joda.time.base.AbstractPeriod: void <init>()>();

        $r1 = virtualinvoke r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType checkPeriodType(org.joda.time.PeriodType)>(r2);

        r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType> = $r1;

        specialinvoke r0.<org.joda.time.base.BasePeriod: void setPeriodInternal(int,int,int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5, i6, i7);

        return;
    }

    protected void <init>(long, long, org.joda.time.PeriodType, org.joda.time.Chronology)
    {
        org.joda.time.Chronology $r2, r5;
        long l0, l1;
        org.joda.time.base.BasePeriod r0;
        org.joda.time.PeriodType $r1, r4;
        int[] $r3;

        r0 := @this: org.joda.time.base.BasePeriod;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        r4 := @parameter2: org.joda.time.PeriodType;

        r5 := @parameter3: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.AbstractPeriod: void <init>()>();

        $r1 = virtualinvoke r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType checkPeriodType(org.joda.time.PeriodType)>(r4);

        $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r5);

        r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType> = $r1;

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: int[] get(org.joda.time.ReadablePeriod,long,long)>(r0, l0, l1);

        r0.<org.joda.time.base.BasePeriod: int[] iValues> = $r3;

        return;
    }

    protected void <init>(org.joda.time.ReadableInstant, org.joda.time.ReadableInstant, org.joda.time.PeriodType)
    {
        org.joda.time.Chronology $r4;
        org.joda.time.ReadableInstant r2, r3;
        long $l0, $l1;
        org.joda.time.base.BasePeriod r0;
        org.joda.time.PeriodType $r1, r7;
        int[] $r5, $r6;
        int $i2;

        r0 := @this: org.joda.time.base.BasePeriod;

        r2 := @parameter0: org.joda.time.ReadableInstant;

        r3 := @parameter1: org.joda.time.ReadableInstant;

        r7 := @parameter2: org.joda.time.PeriodType;

        specialinvoke r0.<org.joda.time.base.AbstractPeriod: void <init>()>();

        $r1 = virtualinvoke r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType checkPeriodType(org.joda.time.PeriodType)>(r7);

        if r2 != null goto label1;

        if r3 != null goto label1;

        r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType> = $r1;

        $i2 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int size()>();

        $r6 = newarray (int)[$i2];

        r0.<org.joda.time.base.BasePeriod: int[] iValues> = $r6;

        goto label2;

     label1:
        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r2);

        $l1 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r3);

        $r4 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getIntervalChronology(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>(r2, r3);

        r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType> = $r1;

        $r5 = virtualinvoke $r4.<org.joda.time.Chronology: int[] get(org.joda.time.ReadablePeriod,long,long)>(r0, $l0, $l1);

        r0.<org.joda.time.base.BasePeriod: int[] iValues> = $r5;

     label2:
        return;
    }

    protected void <init>(org.joda.time.ReadablePartial, org.joda.time.ReadablePartial, org.joda.time.PeriodType)
    {
        int[] $r8, $r21;
        org.joda.time.DateTimeFieldType $r10, $r11;
        boolean $z0, $z1, $z2;
        org.joda.time.base.BaseLocal $r17, $r18;
        long $l1, $l2, $l3, $l4;
        org.joda.time.base.BasePeriod r0;
        org.joda.time.PeriodType $r4, $r16, r22;
        int $i0, $i5, $i6, i7;
        org.joda.time.Chronology $r5, $r6, $r7, $r19, $r20;
        java.lang.IllegalArgumentException $r2, $r9, $r12, $r13;
        org.joda.time.ReadablePartial r1, r3;
        java.lang.Class $r14, $r15;

        r0 := @this: org.joda.time.base.BasePeriod;

        r1 := @parameter0: org.joda.time.ReadablePartial;

        r3 := @parameter1: org.joda.time.ReadablePartial;

        r22 := @parameter2: org.joda.time.PeriodType;

        specialinvoke r0.<org.joda.time.base.AbstractPeriod: void <init>()>();

        if r1 == null goto label1;

        if r3 != null goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ReadablePartial objects must not be null");

        throw $r2;

     label2:
        $z0 = r1 instanceof org.joda.time.base.BaseLocal;

        if $z0 == 0 goto label3;

        $z2 = r3 instanceof org.joda.time.base.BaseLocal;

        if $z2 == 0 goto label3;

        $r14 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r15 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        if $r14 != $r15 goto label3;

        $r16 = virtualinvoke r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType checkPeriodType(org.joda.time.PeriodType)>(r22);

        $r17 = (org.joda.time.base.BaseLocal) r1;

        $l3 = virtualinvoke $r17.<org.joda.time.base.BaseLocal: long getLocalMillis()>();

        $r18 = (org.joda.time.base.BaseLocal) r3;

        $l4 = virtualinvoke $r18.<org.joda.time.base.BaseLocal: long getLocalMillis()>();

        $r19 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.Chronology getChronology()>();

        $r20 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r19);

        r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType> = $r16;

        $r21 = virtualinvoke $r20.<org.joda.time.Chronology: int[] get(org.joda.time.ReadablePeriod,long,long)>(r0, $l3, $l4);

        r0.<org.joda.time.base.BasePeriod: int[] iValues> = $r21;

        goto label9;

     label3:
        $i5 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>();

        $i6 = interfaceinvoke r3.<org.joda.time.ReadablePartial: int size()>();

        if $i5 == $i6 goto label4;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ReadablePartial objects must have the same set of fields");

        throw $r13;

     label4:
        i7 = 0;

        $i0 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>();

     label5:
        if i7 >= $i0 goto label7;

        $r10 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i7);

        $r11 = interfaceinvoke r3.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i7);

        if $r10 == $r11 goto label6;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ReadablePartial objects must have the same set of fields");

        throw $r12;

     label6:
        i7 = i7 + 1;

        goto label5;

     label7:
        $z1 = staticinvoke <org.joda.time.DateTimeUtils: boolean isContiguous(org.joda.time.ReadablePartial)>(r1);

        if $z1 != 0 goto label8;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ReadablePartial objects must be contiguous");

        throw $r9;

     label8:
        $r4 = virtualinvoke r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType checkPeriodType(org.joda.time.PeriodType)>(r22);

        r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType> = $r4;

        $r5 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.Chronology getChronology()>();

        $r6 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r5);

        $r7 = virtualinvoke $r6.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        $l1 = virtualinvoke $r7.<org.joda.time.Chronology: long set(org.joda.time.ReadablePartial,long)>(r1, 0L);

        $l2 = virtualinvoke $r7.<org.joda.time.Chronology: long set(org.joda.time.ReadablePartial,long)>(r3, 0L);

        $r8 = virtualinvoke $r7.<org.joda.time.Chronology: int[] get(org.joda.time.ReadablePeriod,long,long)>(r0, $l1, $l2);

        r0.<org.joda.time.base.BasePeriod: int[] iValues> = $r8;

     label9:
        return;
    }

    protected void <init>(org.joda.time.ReadableInstant, org.joda.time.ReadableDuration, org.joda.time.PeriodType)
    {
        org.joda.time.ReadableDuration r3;
        org.joda.time.Chronology $r4;
        org.joda.time.ReadableInstant r2;
        long $l0, $l1, $l2;
        org.joda.time.base.BasePeriod r0;
        org.joda.time.PeriodType $r1, r6;
        int[] $r5;

        r0 := @this: org.joda.time.base.BasePeriod;

        r2 := @parameter0: org.joda.time.ReadableInstant;

        r3 := @parameter1: org.joda.time.ReadableDuration;

        r6 := @parameter2: org.joda.time.PeriodType;

        specialinvoke r0.<org.joda.time.base.AbstractPeriod: void <init>()>();

        $r1 = virtualinvoke r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType checkPeriodType(org.joda.time.PeriodType)>(r6);

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r2);

        $l1 = staticinvoke <org.joda.time.DateTimeUtils: long getDurationMillis(org.joda.time.ReadableDuration)>(r3);

        $l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>($l0, $l1);

        $r4 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>(r2);

        r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType> = $r1;

        $r5 = virtualinvoke $r4.<org.joda.time.Chronology: int[] get(org.joda.time.ReadablePeriod,long,long)>(r0, $l0, $l2);

        r0.<org.joda.time.base.BasePeriod: int[] iValues> = $r5;

        return;
    }

    protected void <init>(org.joda.time.ReadableDuration, org.joda.time.ReadableInstant, org.joda.time.PeriodType)
    {
        org.joda.time.ReadableDuration r2;
        org.joda.time.Chronology $r4;
        org.joda.time.ReadableInstant r3;
        long $l0, $l1, $l2;
        org.joda.time.base.BasePeriod r0;
        org.joda.time.PeriodType $r1, r6;
        int[] $r5;

        r0 := @this: org.joda.time.base.BasePeriod;

        r2 := @parameter0: org.joda.time.ReadableDuration;

        r3 := @parameter1: org.joda.time.ReadableInstant;

        r6 := @parameter2: org.joda.time.PeriodType;

        specialinvoke r0.<org.joda.time.base.AbstractPeriod: void <init>()>();

        $r1 = virtualinvoke r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType checkPeriodType(org.joda.time.PeriodType)>(r6);

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long getDurationMillis(org.joda.time.ReadableDuration)>(r2);

        $l1 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r3);

        $l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeSubtract(long,long)>($l1, $l0);

        $r4 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>(r3);

        r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType> = $r1;

        $r5 = virtualinvoke $r4.<org.joda.time.Chronology: int[] get(org.joda.time.ReadablePeriod,long,long)>(r0, $l2, $l1);

        r0.<org.joda.time.base.BasePeriod: int[] iValues> = $r5;

        return;
    }

    protected void <init>(long, org.joda.time.PeriodType, org.joda.time.Chronology)
    {
        int[] $r3;
        org.joda.time.Chronology $r2, r5;
        long l0;
        org.joda.time.base.BasePeriod r0;
        org.joda.time.PeriodType $r1, r4;

        r0 := @this: org.joda.time.base.BasePeriod;

        l0 := @parameter0: long;

        r4 := @parameter1: org.joda.time.PeriodType;

        r5 := @parameter2: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.AbstractPeriod: void <init>()>();

        $r1 = virtualinvoke r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType checkPeriodType(org.joda.time.PeriodType)>(r4);

        $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r5);

        r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType> = $r1;

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: int[] get(org.joda.time.ReadablePeriod,long)>(r0, l0);

        r0.<org.joda.time.base.BasePeriod: int[] iValues> = $r3;

        return;
    }

    protected void <init>(java.lang.Object, org.joda.time.PeriodType, org.joda.time.Chronology)
    {
        org.joda.time.ReadWritablePeriod $r9;
        org.joda.time.Chronology $r8, r11;
        org.joda.time.MutablePeriod $r5;
        org.joda.time.base.BasePeriod r0;
        org.joda.time.PeriodType $r4, r10, $r12;
        org.joda.time.convert.PeriodConverter $r3;
        int[] $r6, $r7;
        org.joda.time.convert.ConverterManager $r1;
        int $i0;
        java.lang.Object r2;
        boolean $z0;

        r0 := @this: org.joda.time.base.BasePeriod;

        r2 := @parameter0: java.lang.Object;

        r10 := @parameter1: org.joda.time.PeriodType;

        r11 := @parameter2: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.AbstractPeriod: void <init>()>();

        $r1 = staticinvoke <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager getInstance()>();

        $r3 = virtualinvoke $r1.<org.joda.time.convert.ConverterManager: org.joda.time.convert.PeriodConverter getPeriodConverter(java.lang.Object)>(r2);

        if r10 != null goto label1;

        $r12 = interfaceinvoke $r3.<org.joda.time.convert.PeriodConverter: org.joda.time.PeriodType getPeriodType(java.lang.Object)>(r2);

        goto label2;

     label1:
        $r12 = r10;

     label2:
        $r4 = virtualinvoke r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType checkPeriodType(org.joda.time.PeriodType)>($r12);

        r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType> = $r4;

        $z0 = r0 instanceof org.joda.time.ReadWritablePeriod;

        if $z0 == 0 goto label3;

        $i0 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int size()>();

        $r7 = newarray (int)[$i0];

        r0.<org.joda.time.base.BasePeriod: int[] iValues> = $r7;

        $r8 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r11);

        $r9 = (org.joda.time.ReadWritablePeriod) r0;

        interfaceinvoke $r3.<org.joda.time.convert.PeriodConverter: void setInto(org.joda.time.ReadWritablePeriod,java.lang.Object,org.joda.time.Chronology)>($r9, r2, $r8);

        goto label4;

     label3:
        $r5 = new org.joda.time.MutablePeriod;

        specialinvoke $r5.<org.joda.time.MutablePeriod: void <init>(java.lang.Object,org.joda.time.PeriodType,org.joda.time.Chronology)>(r2, $r4, r11);

        $r6 = virtualinvoke $r5.<org.joda.time.MutablePeriod: int[] getValues()>();

        r0.<org.joda.time.base.BasePeriod: int[] iValues> = $r6;

     label4:
        return;
    }

    protected void <init>(int[], org.joda.time.PeriodType)
    {
        org.joda.time.base.BasePeriod r0;
        org.joda.time.PeriodType r1;
        int[] r2;

        r0 := @this: org.joda.time.base.BasePeriod;

        r2 := @parameter0: int[];

        r1 := @parameter1: org.joda.time.PeriodType;

        specialinvoke r0.<org.joda.time.base.AbstractPeriod: void <init>()>();

        r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType> = r1;

        r0.<org.joda.time.base.BasePeriod: int[] iValues> = r2;

        return;
    }

    protected org.joda.time.PeriodType checkPeriodType(org.joda.time.PeriodType)
    {
        org.joda.time.PeriodType r0, $r1;
        org.joda.time.base.BasePeriod r2;

        r2 := @this: org.joda.time.base.BasePeriod;

        r0 := @parameter0: org.joda.time.PeriodType;

        $r1 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>(r0);

        return $r1;
    }

    public org.joda.time.PeriodType getPeriodType()
    {
        org.joda.time.base.BasePeriod r0;
        org.joda.time.PeriodType $r1;

        r0 := @this: org.joda.time.base.BasePeriod;

        $r1 = r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType>;

        return $r1;
    }

    public int size()
    {
        int $i0;
        org.joda.time.base.BasePeriod r0;
        org.joda.time.PeriodType $r1;

        r0 := @this: org.joda.time.base.BasePeriod;

        $r1 = r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType>;

        $i0 = virtualinvoke $r1.<org.joda.time.PeriodType: int size()>();

        return $i0;
    }

    public org.joda.time.DurationFieldType getFieldType(int)
    {
        org.joda.time.DurationFieldType $r2;
        int i0;
        org.joda.time.base.BasePeriod r0;
        org.joda.time.PeriodType $r1;

        r0 := @this: org.joda.time.base.BasePeriod;

        i0 := @parameter0: int;

        $r1 = r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType>;

        $r2 = virtualinvoke $r1.<org.joda.time.PeriodType: org.joda.time.DurationFieldType getFieldType(int)>(i0);

        return $r2;
    }

    public int getValue(int)
    {
        int[] $r1;
        int i0, $i1;
        org.joda.time.base.BasePeriod r0;

        r0 := @this: org.joda.time.base.BasePeriod;

        i0 := @parameter0: int;

        $r1 = r0.<org.joda.time.base.BasePeriod: int[] iValues>;

        $i1 = $r1[i0];

        return $i1;
    }

    public org.joda.time.Duration toDurationFrom(org.joda.time.ReadableInstant)
    {
        org.joda.time.Chronology $r1;
        org.joda.time.Duration $r3;
        org.joda.time.ReadableInstant r0;
        long $l0, $l1;
        org.joda.time.base.BasePeriod r2;

        r2 := @this: org.joda.time.base.BasePeriod;

        r0 := @parameter0: org.joda.time.ReadableInstant;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r0);

        $r1 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>(r0);

        $l1 = virtualinvoke $r1.<org.joda.time.Chronology: long add(org.joda.time.ReadablePeriod,long,int)>(r2, $l0, 1);

        $r3 = new org.joda.time.Duration;

        specialinvoke $r3.<org.joda.time.Duration: void <init>(long,long)>($l0, $l1);

        return $r3;
    }

    public org.joda.time.Duration toDurationTo(org.joda.time.ReadableInstant)
    {
        org.joda.time.Chronology $r1;
        org.joda.time.Duration $r4;
        int $i3;
        org.joda.time.ReadableInstant r0;
        long $l0, $l1;
        org.joda.time.base.BasePeriod r2;

        r2 := @this: org.joda.time.base.BasePeriod;

        r0 := @parameter0: org.joda.time.ReadableInstant;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r0);

        $r1 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>(r0);

        $i3 = (int) -1;

        $l1 = virtualinvoke $r1.<org.joda.time.Chronology: long add(org.joda.time.ReadablePeriod,long,int)>(r2, $l0, $i3);

        $r4 = new org.joda.time.Duration;

        specialinvoke $r4.<org.joda.time.Duration: void <init>(long,long)>($l1, $l0);

        return $r4;
    }

    private void checkAndUpdate(org.joda.time.DurationFieldType, int[], int)
    {
        org.joda.time.base.BasePeriod r0;
        java.lang.IllegalArgumentException $r11;
        int[] r2;
        java.lang.StringBuffer $r5, $r7, $r8, $r10;
        org.joda.time.DurationFieldType r1;
        int $i0, i1, $i3;
        java.lang.String $r6, $r9;

        r0 := @this: org.joda.time.base.BasePeriod;

        r1 := @parameter0: org.joda.time.DurationFieldType;

        r2 := @parameter1: int[];

        i1 := @parameter2: int;

        $i0 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int indexOf(org.joda.time.DurationFieldType)>(r1);

        $i3 = (int) -1;

        if $i0 != $i3 goto label1;

        if i1 == 0 goto label2;

        $r11 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Period does not support field \'");

        $r6 = virtualinvoke r1.<org.joda.time.DurationFieldType: java.lang.String getName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r11;

     label1:
        r2[$i0] = i1;

     label2:
        return;
    }

    protected void setPeriod(org.joda.time.ReadablePeriod)
    {
        org.joda.time.ReadablePeriod r0;
        int[] $r2;
        int $i0;
        org.joda.time.base.BasePeriod r1;

        r1 := @this: org.joda.time.base.BasePeriod;

        r0 := @parameter0: org.joda.time.ReadablePeriod;

        if r0 != null goto label1;

        $i0 = virtualinvoke r1.<org.joda.time.base.BasePeriod: int size()>();

        $r2 = newarray (int)[$i0];

        virtualinvoke r1.<org.joda.time.base.BasePeriod: void setValues(int[])>($r2);

        goto label2;

     label1:
        specialinvoke r1.<org.joda.time.base.BasePeriod: void setPeriodInternal(org.joda.time.ReadablePeriod)>(r0);

     label2:
        return;
    }

    private void setPeriodInternal(org.joda.time.ReadablePeriod)
    {
        org.joda.time.base.BasePeriod r0;
        org.joda.time.ReadablePeriod r2;
        int[] r1;
        org.joda.time.DurationFieldType $r3;
        int $i0, $i1, $i2, i3;

        r0 := @this: org.joda.time.base.BasePeriod;

        r2 := @parameter0: org.joda.time.ReadablePeriod;

        $i0 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int size()>();

        r1 = newarray (int)[$i0];

        i3 = 0;

        $i1 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: int size()>();

     label1:
        if i3 >= $i1 goto label2;

        $r3 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i3);

        $i2 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: int getValue(int)>(i3);

        specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r3, r1, $i2);

        i3 = i3 + 1;

        goto label1;

     label2:
        r0.<org.joda.time.base.BasePeriod: int[] iValues> = r1;

        return;
    }

    protected void setPeriod(int, int, int, int, int, int, int, int)
    {
        org.joda.time.base.BasePeriod r0;
        int i0, i1, i2, i3, i4, i5, i6, i7;

        r0 := @this: org.joda.time.base.BasePeriod;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        i6 := @parameter6: int;

        i7 := @parameter7: int;

        specialinvoke r0.<org.joda.time.base.BasePeriod: void setPeriodInternal(int,int,int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5, i6, i7);

        return;
    }

    private void setPeriodInternal(int, int, int, int, int, int, int, int)
    {
        org.joda.time.base.BasePeriod r0;
        int[] r1;
        int $i0, i1, i2, i3, i4, i5, i6, i7, i8;
        org.joda.time.DurationFieldType $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        r0 := @this: org.joda.time.base.BasePeriod;

        i1 := @parameter0: int;

        i2 := @parameter1: int;

        i3 := @parameter2: int;

        i4 := @parameter3: int;

        i5 := @parameter4: int;

        i6 := @parameter5: int;

        i7 := @parameter6: int;

        i8 := @parameter7: int;

        $i0 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int size()>();

        r1 = newarray (int)[$i0];

        $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>();

        specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r2, r1, i1);

        $r3 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>();

        specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r3, r1, i2);

        $r4 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>();

        specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r4, r1, i3);

        $r5 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>();

        specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r5, r1, i4);

        $r6 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>();

        specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r6, r1, i5);

        $r7 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>();

        specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r7, r1, i6);

        $r8 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>();

        specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r8, r1, i7);

        $r9 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>();

        specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r9, r1, i8);

        r0.<org.joda.time.base.BasePeriod: int[] iValues> = r1;

        return;
    }

    protected void setField(org.joda.time.DurationFieldType, int)
    {
        int[] $r2;
        org.joda.time.DurationFieldType r1;
        int i0;
        org.joda.time.base.BasePeriod r0;

        r0 := @this: org.joda.time.base.BasePeriod;

        r1 := @parameter0: org.joda.time.DurationFieldType;

        i0 := @parameter1: int;

        $r2 = r0.<org.joda.time.base.BasePeriod: int[] iValues>;

        virtualinvoke r0.<org.joda.time.base.BasePeriod: void setFieldInto(int[],org.joda.time.DurationFieldType,int)>($r2, r1, i0);

        return;
    }

    protected void setFieldInto(int[], org.joda.time.DurationFieldType, int)
    {
        org.joda.time.base.BasePeriod r0;
        java.lang.IllegalArgumentException $r10;
        int[] r2;
        java.lang.StringBuffer $r5, $r6, $r7, $r9;
        org.joda.time.DurationFieldType r1;
        int $i0, i1, $i3;
        java.lang.String $r8;

        r0 := @this: org.joda.time.base.BasePeriod;

        r2 := @parameter0: int[];

        r1 := @parameter1: org.joda.time.DurationFieldType;

        i1 := @parameter2: int;

        $i0 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int indexOf(org.joda.time.DurationFieldType)>(r1);

        $i3 = (int) -1;

        if $i0 != $i3 goto label2;

        if i1 != 0 goto label1;

        if r1 != null goto label3;

     label1:
        $r10 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Period does not support field \'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r10;

     label2:
        r2[$i0] = i1;

     label3:
        return;
    }

    protected void addField(org.joda.time.DurationFieldType, int)
    {
        int[] $r2;
        org.joda.time.DurationFieldType r1;
        int i0;
        org.joda.time.base.BasePeriod r0;

        r0 := @this: org.joda.time.base.BasePeriod;

        r1 := @parameter0: org.joda.time.DurationFieldType;

        i0 := @parameter1: int;

        $r2 = r0.<org.joda.time.base.BasePeriod: int[] iValues>;

        virtualinvoke r0.<org.joda.time.base.BasePeriod: void addFieldInto(int[],org.joda.time.DurationFieldType,int)>($r2, r1, i0);

        return;
    }

    protected void addFieldInto(int[], org.joda.time.DurationFieldType, int)
    {
        org.joda.time.base.BasePeriod r0;
        java.lang.IllegalArgumentException $r10;
        int[] r2;
        java.lang.StringBuffer $r5, $r6, $r7, $r9;
        org.joda.time.DurationFieldType r1;
        int $i0, i1, $i2, $i3, $i5;
        java.lang.String $r8;

        r0 := @this: org.joda.time.base.BasePeriod;

        r2 := @parameter0: int[];

        r1 := @parameter1: org.joda.time.DurationFieldType;

        i1 := @parameter2: int;

        $i0 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int indexOf(org.joda.time.DurationFieldType)>(r1);

        $i5 = (int) -1;

        if $i0 != $i5 goto label2;

        if i1 != 0 goto label1;

        if r1 != null goto label3;

     label1:
        $r10 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Period does not support field \'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r10;

     label2:
        $i2 = r2[$i0];

        $i3 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>($i2, i1);

        r2[$i0] = $i3;

     label3:
        return;
    }

    protected void mergePeriod(org.joda.time.ReadablePeriod)
    {
        org.joda.time.ReadablePeriod r0;
        int[] $r2, $r3;
        org.joda.time.base.BasePeriod r1;

        r1 := @this: org.joda.time.base.BasePeriod;

        r0 := @parameter0: org.joda.time.ReadablePeriod;

        if r0 == null goto label1;

        $r2 = virtualinvoke r1.<org.joda.time.base.BasePeriod: int[] getValues()>();

        $r3 = virtualinvoke r1.<org.joda.time.base.BasePeriod: int[] mergePeriodInto(int[],org.joda.time.ReadablePeriod)>($r2, r0);

        r1.<org.joda.time.base.BasePeriod: int[] iValues> = $r3;

     label1:
        return;
    }

    protected int[] mergePeriodInto(int[], org.joda.time.ReadablePeriod)
    {
        org.joda.time.ReadablePeriod r0;
        int[] r1;
        org.joda.time.DurationFieldType $r2;
        int $i0, $i1, i2;
        org.joda.time.base.BasePeriod r3;

        r3 := @this: org.joda.time.base.BasePeriod;

        r1 := @parameter0: int[];

        r0 := @parameter1: org.joda.time.ReadablePeriod;

        i2 = 0;

        $i0 = interfaceinvoke r0.<org.joda.time.ReadablePeriod: int size()>();

     label1:
        if i2 >= $i0 goto label2;

        $r2 = interfaceinvoke r0.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i2);

        $i1 = interfaceinvoke r0.<org.joda.time.ReadablePeriod: int getValue(int)>(i2);

        specialinvoke r3.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r2, r1, $i1);

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

    protected void addPeriod(org.joda.time.ReadablePeriod)
    {
        org.joda.time.ReadablePeriod r0;
        int[] $r2, $r3;
        org.joda.time.base.BasePeriod r1;

        r1 := @this: org.joda.time.base.BasePeriod;

        r0 := @parameter0: org.joda.time.ReadablePeriod;

        if r0 == null goto label1;

        $r2 = virtualinvoke r1.<org.joda.time.base.BasePeriod: int[] getValues()>();

        $r3 = virtualinvoke r1.<org.joda.time.base.BasePeriod: int[] addPeriodInto(int[],org.joda.time.ReadablePeriod)>($r2, r0);

        r1.<org.joda.time.base.BasePeriod: int[] iValues> = $r3;

     label1:
        return;
    }

    protected int[] addPeriodInto(int[], org.joda.time.ReadablePeriod)
    {
        org.joda.time.base.BasePeriod r3;
        int[] r1;
        java.lang.StringBuffer $r6, $r8, $r9, $r11;
        int $i0, $i1, $i2, $i3, $i4, i5, $i7;
        java.lang.String $r7, $r10;
        java.lang.IllegalArgumentException $r12;
        org.joda.time.ReadablePeriod r0;
        org.joda.time.DurationFieldType $r2;

        r3 := @this: org.joda.time.base.BasePeriod;

        r1 := @parameter0: int[];

        r0 := @parameter1: org.joda.time.ReadablePeriod;

        i5 = 0;

        $i0 = interfaceinvoke r0.<org.joda.time.ReadablePeriod: int size()>();

     label1:
        if i5 >= $i0 goto label4;

        $r2 = interfaceinvoke r0.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i5);

        $i1 = interfaceinvoke r0.<org.joda.time.ReadablePeriod: int getValue(int)>(i5);

        if $i1 == 0 goto label3;

        $i2 = virtualinvoke r3.<org.joda.time.base.BasePeriod: int indexOf(org.joda.time.DurationFieldType)>($r2);

        $i7 = (int) -1;

        if $i2 != $i7 goto label2;

        $r12 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Period does not support field \'");

        $r7 = virtualinvoke $r2.<org.joda.time.DurationFieldType: java.lang.String getName()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r12;

     label2:
        $i3 = virtualinvoke r3.<org.joda.time.base.BasePeriod: int getValue(int)>($i2);

        $i4 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>($i3, $i1);

        r1[$i2] = $i4;

     label3:
        i5 = i5 + 1;

        goto label1;

     label4:
        return r1;
    }

    protected void setValue(int, int)
    {
        int[] $r1;
        int i0, i1;
        org.joda.time.base.BasePeriod r0;

        r0 := @this: org.joda.time.base.BasePeriod;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.joda.time.base.BasePeriod: int[] iValues>;

        $r1[i0] = i1;

        return;
    }

    protected void setValues(int[])
    {
        org.joda.time.base.BasePeriod r0;
        int[] r1;

        r0 := @this: org.joda.time.base.BasePeriod;

        r1 := @parameter0: int[];

        r0.<org.joda.time.base.BasePeriod: int[] iValues> = r1;

        return;
    }

    public static void <clinit>()
    {
        <org.joda.time.base.BasePeriod: long serialVersionUID> = -2110953284060001145L;

        return;
    }
}
