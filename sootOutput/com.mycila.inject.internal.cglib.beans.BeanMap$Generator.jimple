public class com.mycila.inject.internal.cglib.beans.BeanMap$Generator extends com.mycila.inject.internal.cglib.core.AbstractClassGenerator
{
    private static final com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source SOURCE;
    private static final com.mycila.inject.internal.cglib.beans.BeanMap$Generator$BeanMapKey KEY_FACTORY;
    private java.lang.Object bean;
    private java.lang.Class beanClass;
    private int require;

    public void <init>()
    {
        com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source $r1;
        com.mycila.inject.internal.cglib.beans.BeanMap$Generator r0;

        r0 := @this: com.mycila.inject.internal.cglib.beans.BeanMap$Generator;

        $r1 = <com.mycila.inject.internal.cglib.beans.BeanMap$Generator: com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source SOURCE>;

        specialinvoke r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: void <init>(com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source)>($r1);

        return;
    }

    public void setBean(java.lang.Object)
    {
        java.lang.Object r1;
        java.lang.Class $r2;
        com.mycila.inject.internal.cglib.beans.BeanMap$Generator r0;

        r0 := @this: com.mycila.inject.internal.cglib.beans.BeanMap$Generator;

        r1 := @parameter0: java.lang.Object;

        r0.<com.mycila.inject.internal.cglib.beans.BeanMap$Generator: java.lang.Object bean> = r1;

        if r1 == null goto label1;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        r0.<com.mycila.inject.internal.cglib.beans.BeanMap$Generator: java.lang.Class beanClass> = $r2;

     label1:
        return;
    }

    public void setBeanClass(java.lang.Class)
    {
        java.lang.Class r1;
        com.mycila.inject.internal.cglib.beans.BeanMap$Generator r0;

        r0 := @this: com.mycila.inject.internal.cglib.beans.BeanMap$Generator;

        r1 := @parameter0: java.lang.Class;

        r0.<com.mycila.inject.internal.cglib.beans.BeanMap$Generator: java.lang.Class beanClass> = r1;

        return;
    }

    public void setRequire(int)
    {
        int i0;
        com.mycila.inject.internal.cglib.beans.BeanMap$Generator r0;

        r0 := @this: com.mycila.inject.internal.cglib.beans.BeanMap$Generator;

        i0 := @parameter0: int;

        r0.<com.mycila.inject.internal.cglib.beans.BeanMap$Generator: int require> = i0;

        return;
    }

    protected java.lang.ClassLoader getDefaultClassLoader()
    {
        java.lang.Class $r1;
        java.lang.ClassLoader $r2;
        com.mycila.inject.internal.cglib.beans.BeanMap$Generator r0;

        r0 := @this: com.mycila.inject.internal.cglib.beans.BeanMap$Generator;

        $r1 = r0.<com.mycila.inject.internal.cglib.beans.BeanMap$Generator: java.lang.Class beanClass>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        return $r2;
    }

    public com.mycila.inject.internal.cglib.beans.BeanMap create()
    {
        com.mycila.inject.internal.cglib.beans.BeanMap$Generator$BeanMapKey $r5;
        com.mycila.inject.internal.cglib.beans.BeanMap $r8;
        java.lang.IllegalArgumentException $r9;
        com.mycila.inject.internal.cglib.beans.BeanMap$Generator r0;
        int $i0;
        java.lang.Class $r1, $r2, $r4;
        java.lang.Object $r6, $r7;
        java.lang.String $r3;

        r0 := @this: com.mycila.inject.internal.cglib.beans.BeanMap$Generator;

        $r1 = r0.<com.mycila.inject.internal.cglib.beans.BeanMap$Generator: java.lang.Class beanClass>;

        if $r1 != null goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Class of bean unknown");

        throw $r9;

     label1:
        $r2 = r0.<com.mycila.inject.internal.cglib.beans.BeanMap$Generator: java.lang.Class beanClass>;

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.beans.BeanMap$Generator: void setNamePrefix(java.lang.String)>($r3);

        $r5 = <com.mycila.inject.internal.cglib.beans.BeanMap$Generator: com.mycila.inject.internal.cglib.beans.BeanMap$Generator$BeanMapKey KEY_FACTORY>;

        $r4 = r0.<com.mycila.inject.internal.cglib.beans.BeanMap$Generator: java.lang.Class beanClass>;

        $i0 = r0.<com.mycila.inject.internal.cglib.beans.BeanMap$Generator: int require>;

        $r6 = interfaceinvoke $r5.<com.mycila.inject.internal.cglib.beans.BeanMap$Generator$BeanMapKey: java.lang.Object newInstance(java.lang.Class,int)>($r4, $i0);

        $r7 = specialinvoke r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: java.lang.Object create(java.lang.Object)>($r6);

        $r8 = (com.mycila.inject.internal.cglib.beans.BeanMap) $r7;

        return $r8;
    }

    public void generateClass(com.mycila.inject.internal.asm.ClassVisitor) throws java.lang.Exception
    {
        com.mycila.inject.internal.cglib.beans.BeanMap$Generator r2;
        int $i0;
        java.lang.Class $r4;
        java.lang.String $r3;
        com.mycila.inject.internal.cglib.beans.BeanMapEmitter $r0;
        com.mycila.inject.internal.asm.ClassVisitor r1;

        r2 := @this: com.mycila.inject.internal.cglib.beans.BeanMap$Generator;

        r1 := @parameter0: com.mycila.inject.internal.asm.ClassVisitor;

        $r0 = new com.mycila.inject.internal.cglib.beans.BeanMapEmitter;

        $r3 = virtualinvoke r2.<com.mycila.inject.internal.cglib.beans.BeanMap$Generator: java.lang.String getClassName()>();

        $r4 = r2.<com.mycila.inject.internal.cglib.beans.BeanMap$Generator: java.lang.Class beanClass>;

        $i0 = r2.<com.mycila.inject.internal.cglib.beans.BeanMap$Generator: int require>;

        specialinvoke $r0.<com.mycila.inject.internal.cglib.beans.BeanMapEmitter: void <init>(com.mycila.inject.internal.asm.ClassVisitor,java.lang.String,java.lang.Class,int)>(r1, $r3, $r4, $i0);

        return;
    }

    protected java.lang.Object firstInstance(java.lang.Class)
    {
        com.mycila.inject.internal.cglib.beans.BeanMap$Generator r2;
        java.lang.Class r0;
        java.lang.Object $r1, $r3;
        com.mycila.inject.internal.cglib.beans.BeanMap $r4, $r5;

        r2 := @this: com.mycila.inject.internal.cglib.beans.BeanMap$Generator;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: java.lang.Object newInstance(java.lang.Class)>(r0);

        $r4 = (com.mycila.inject.internal.cglib.beans.BeanMap) $r1;

        $r3 = r2.<com.mycila.inject.internal.cglib.beans.BeanMap$Generator: java.lang.Object bean>;

        $r5 = virtualinvoke $r4.<com.mycila.inject.internal.cglib.beans.BeanMap: com.mycila.inject.internal.cglib.beans.BeanMap newInstance(java.lang.Object)>($r3);

        return $r5;
    }

    protected java.lang.Object nextInstance(java.lang.Object)
    {
        com.mycila.inject.internal.cglib.beans.BeanMap$Generator r1;
        java.lang.Object r0, $r2;
        com.mycila.inject.internal.cglib.beans.BeanMap $r3, $r4;

        r1 := @this: com.mycila.inject.internal.cglib.beans.BeanMap$Generator;

        r0 := @parameter0: java.lang.Object;

        $r3 = (com.mycila.inject.internal.cglib.beans.BeanMap) r0;

        $r2 = r1.<com.mycila.inject.internal.cglib.beans.BeanMap$Generator: java.lang.Object bean>;

        $r4 = virtualinvoke $r3.<com.mycila.inject.internal.cglib.beans.BeanMap: com.mycila.inject.internal.cglib.beans.BeanMap newInstance(java.lang.Object)>($r2);

        return $r4;
    }

    static void <clinit>()
    {
        com.mycila.inject.internal.cglib.beans.BeanMap$Generator$BeanMapKey $r6;
        com.mycila.inject.internal.cglib.core.Customizer $r4;
        com.mycila.inject.internal.cglib.core.KeyFactory $r5;
        com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source $r0;
        java.lang.Class $r1, $r3, $r7, $r8;
        java.lang.String $r2;

        $r0 = new com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source;

        $r1 = <com.mycila.inject.internal.cglib.beans.BeanMap: java.lang.Class class$net$sf$cglib$beans$BeanMap>;

        if $r1 != null goto label1;

        $r7 = staticinvoke <com.mycila.inject.internal.cglib.beans.BeanMap: java.lang.Class class$(java.lang.String)>("com.mycila.inject.internal.cglib.beans.BeanMap");

        <com.mycila.inject.internal.cglib.beans.BeanMap: java.lang.Class class$net$sf$cglib$beans$BeanMap> = $r7;

        goto label2;

     label1:
        $r7 = <com.mycila.inject.internal.cglib.beans.BeanMap: java.lang.Class class$net$sf$cglib$beans$BeanMap>;

     label2:
        $r2 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source: void <init>(java.lang.String)>($r2);

        <com.mycila.inject.internal.cglib.beans.BeanMap$Generator: com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source SOURCE> = $r0;

        $r3 = <com.mycila.inject.internal.cglib.beans.BeanMap: java.lang.Class class$net$sf$cglib$beans$BeanMap$Generator$BeanMapKey>;

        if $r3 != null goto label3;

        $r8 = staticinvoke <com.mycila.inject.internal.cglib.beans.BeanMap: java.lang.Class class$(java.lang.String)>("com.mycila.inject.internal.cglib.beans.BeanMap$Generator$BeanMapKey");

        <com.mycila.inject.internal.cglib.beans.BeanMap: java.lang.Class class$net$sf$cglib$beans$BeanMap$Generator$BeanMapKey> = $r8;

        goto label4;

     label3:
        $r8 = <com.mycila.inject.internal.cglib.beans.BeanMap: java.lang.Class class$net$sf$cglib$beans$BeanMap$Generator$BeanMapKey>;

     label4:
        $r4 = <com.mycila.inject.internal.cglib.core.KeyFactory: com.mycila.inject.internal.cglib.core.Customizer CLASS_BY_NAME>;

        $r5 = staticinvoke <com.mycila.inject.internal.cglib.core.KeyFactory: com.mycila.inject.internal.cglib.core.KeyFactory create(java.lang.Class,com.mycila.inject.internal.cglib.core.Customizer)>($r8, $r4);

        $r6 = (com.mycila.inject.internal.cglib.beans.BeanMap$Generator$BeanMapKey) $r5;

        <com.mycila.inject.internal.cglib.beans.BeanMap$Generator: com.mycila.inject.internal.cglib.beans.BeanMap$Generator$BeanMapKey KEY_FACTORY> = $r6;

        return;
    }
}
