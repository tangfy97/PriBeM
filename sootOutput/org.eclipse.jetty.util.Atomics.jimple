public class org.eclipse.jetty.util.Atomics extends java.lang.Object
{

    private void <init>()
    {
        org.eclipse.jetty.util.Atomics r0;

        r0 := @this: org.eclipse.jetty.util.Atomics;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void updateMin(java.util.concurrent.atomic.AtomicLong, long)
    {
        java.util.concurrent.atomic.AtomicLong r0;
        byte $b1;
        int $i3;
        long l0, l2;
        boolean $z0;

        r0 := @parameter0: java.util.concurrent.atomic.AtomicLong;

        l0 := @parameter1: long;

        l2 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicLong: long get()>();

     label1:
        $b1 = l0 cmp l2;

        $i3 = (int) $b1;

        if $i3 >= 0 goto label3;

        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>(l2, l0);

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        l2 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicLong: long get()>();

        goto label1;

     label3:
        return;
    }

    public static void updateMax(java.util.concurrent.atomic.AtomicLong, long)
    {
        java.util.concurrent.atomic.AtomicLong r0;
        byte $b1;
        int $i3;
        long l0, l2;
        boolean $z0;

        r0 := @parameter0: java.util.concurrent.atomic.AtomicLong;

        l0 := @parameter1: long;

        l2 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicLong: long get()>();

     label1:
        $b1 = l0 cmp l2;

        $i3 = (int) $b1;

        if $i3 <= 0 goto label3;

        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>(l2, l0);

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        l2 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicLong: long get()>();

        goto label1;

     label3:
        return;
    }

    public static void updateMin(java.util.concurrent.atomic.AtomicInteger, int)
    {
        java.util.concurrent.atomic.AtomicInteger r0;
        int i0, i1;
        boolean $z0;

        r0 := @parameter0: java.util.concurrent.atomic.AtomicInteger;

        i0 := @parameter1: int;

        i1 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicInteger: int get()>();

     label1:
        if i0 >= i1 goto label3;

        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(i1, i0);

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        i1 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        goto label1;

     label3:
        return;
    }

    public static void updateMax(java.util.concurrent.atomic.AtomicInteger, int)
    {
        java.util.concurrent.atomic.AtomicInteger r0;
        int i0, i1;
        boolean $z0;

        r0 := @parameter0: java.util.concurrent.atomic.AtomicInteger;

        i0 := @parameter1: int;

        i1 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicInteger: int get()>();

     label1:
        if i0 <= i1 goto label3;

        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(i1, i0);

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        i1 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        goto label1;

     label3:
        return;
    }
}
