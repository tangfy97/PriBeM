public abstract class com.hp.hpl.jena.sparql.core.DatasetGraphBase extends java.lang.Object implements com.hp.hpl.jena.sparql.core.DatasetGraph
{
    private final com.hp.hpl.jena.shared.Lock lock;
    private com.hp.hpl.jena.sparql.util.Context context;
    private static final int DeleteBufferSize;

    protected void <init>()
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphBase r0;
        com.hp.hpl.jena.shared.LockMRSW $r1;
        com.hp.hpl.jena.sparql.util.Context $r2;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphBase;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new com.hp.hpl.jena.shared.LockMRSW;

        specialinvoke $r1.<com.hp.hpl.jena.shared.LockMRSW: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.core.DatasetGraphBase: com.hp.hpl.jena.shared.Lock lock> = $r1;

        $r2 = new com.hp.hpl.jena.sparql.util.Context;

        specialinvoke $r2.<com.hp.hpl.jena.sparql.util.Context: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.core.DatasetGraphBase: com.hp.hpl.jena.sparql.util.Context context> = $r2;

        return;
    }

    public boolean containsGraph(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphBase r0;
        com.hp.hpl.jena.graph.Node r1, $r2, $r3, $r4;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphBase;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r4 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r3 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r2 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphBase: boolean contains(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, $r4, $r3, $r2);

        return $z0;
    }

    public abstract com.hp.hpl.jena.graph.Graph getDefaultGraph();

    public abstract com.hp.hpl.jena.graph.Graph getGraph(com.hp.hpl.jena.graph.Node);

    public void addGraph(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Graph)
    {
        java.lang.UnsupportedOperationException $r0;
        com.hp.hpl.jena.sparql.core.DatasetGraphBase r1;
        com.hp.hpl.jena.graph.Node r2;
        com.hp.hpl.jena.graph.Graph r3;

        r1 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphBase;

        r2 := @parameter0: com.hp.hpl.jena.graph.Node;

        r3 := @parameter1: com.hp.hpl.jena.graph.Graph;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("DatasetGraph.addGraph");

        throw $r0;
    }

    public void removeGraph(com.hp.hpl.jena.graph.Node)
    {
        java.lang.UnsupportedOperationException $r0;
        com.hp.hpl.jena.sparql.core.DatasetGraphBase r1;
        com.hp.hpl.jena.graph.Node r2;

        r1 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphBase;

        r2 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("DatasetGraph.removeGraph");

        throw $r0;
    }

    public void setDefaultGraph(com.hp.hpl.jena.graph.Graph)
    {
        java.lang.UnsupportedOperationException $r0;
        com.hp.hpl.jena.sparql.core.DatasetGraphBase r1;
        com.hp.hpl.jena.graph.Graph r2;

        r1 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphBase;

        r2 := @parameter0: com.hp.hpl.jena.graph.Graph;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("DatasetGraph.setDefaultGraph");

        throw $r0;
    }

    public void add(com.hp.hpl.jena.sparql.core.Quad)
    {
        java.lang.UnsupportedOperationException $r0;
        com.hp.hpl.jena.sparql.core.DatasetGraphBase r1;
        com.hp.hpl.jena.sparql.core.Quad r2;

        r1 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphBase;

        r2 := @parameter0: com.hp.hpl.jena.sparql.core.Quad;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("DatasetGraph.add(Quad)");

        throw $r0;
    }

    public void delete(com.hp.hpl.jena.sparql.core.Quad)
    {
        java.lang.UnsupportedOperationException $r0;
        com.hp.hpl.jena.sparql.core.DatasetGraphBase r1;
        com.hp.hpl.jena.sparql.core.Quad r2;

        r1 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphBase;

        r2 := @parameter0: com.hp.hpl.jena.sparql.core.Quad;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("DatasetGraph.delete(Quad)");

        throw $r0;
    }

    public void add(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphBase r0;
        com.hp.hpl.jena.graph.Node r2, r3, r4, r5;
        com.hp.hpl.jena.sparql.core.Quad $r1;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphBase;

        r2 := @parameter0: com.hp.hpl.jena.graph.Node;

        r3 := @parameter1: com.hp.hpl.jena.graph.Node;

        r4 := @parameter2: com.hp.hpl.jena.graph.Node;

        r5 := @parameter3: com.hp.hpl.jena.graph.Node;

        $r1 = new com.hp.hpl.jena.sparql.core.Quad;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.core.Quad: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r2, r3, r4, r5);

        virtualinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphBase: void add(com.hp.hpl.jena.sparql.core.Quad)>($r1);

        return;
    }

    public void delete(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphBase r0;
        com.hp.hpl.jena.graph.Node r2, r3, r4, r5;
        com.hp.hpl.jena.sparql.core.Quad $r1;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphBase;

        r2 := @parameter0: com.hp.hpl.jena.graph.Node;

        r3 := @parameter1: com.hp.hpl.jena.graph.Node;

        r4 := @parameter2: com.hp.hpl.jena.graph.Node;

        r5 := @parameter3: com.hp.hpl.jena.graph.Node;

        $r1 = new com.hp.hpl.jena.sparql.core.Quad;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.core.Quad: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r2, r3, r4, r5);

        virtualinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphBase: void delete(com.hp.hpl.jena.sparql.core.Quad)>($r1);

        return;
    }

    public void deleteAny(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.core.Quad[] r0;
        com.hp.hpl.jena.sparql.core.DatasetGraphBase r1;
        java.util.Iterator $r6;
        com.hp.hpl.jena.graph.Node r2, r3, r4, r5;
        com.hp.hpl.jena.sparql.core.Quad $r7, $r9;
        int i0, i1;
        java.lang.Object $r8;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphBase;

        r2 := @parameter0: com.hp.hpl.jena.graph.Node;

        r3 := @parameter1: com.hp.hpl.jena.graph.Node;

        r4 := @parameter2: com.hp.hpl.jena.graph.Node;

        r5 := @parameter3: com.hp.hpl.jena.graph.Node;

        r0 = newarray (com.hp.hpl.jena.sparql.core.Quad)[1000];

     label1:
        $r6 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.DatasetGraphBase: java.util.Iterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r2, r3, r4, r5);

        i0 = 0;

     label2:
        if i0 >= 1000 goto label4;

        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label3;

        goto label4;

     label3:
        $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (com.hp.hpl.jena.sparql.core.Quad) $r8;

        r0[i0] = $r9;

        i0 = i0 + 1;

        goto label2;

     label4:
        i1 = 0;

     label5:
        if i1 >= i0 goto label6;

        $r7 = r0[i1];

        virtualinvoke r1.<com.hp.hpl.jena.sparql.core.DatasetGraphBase: void delete(com.hp.hpl.jena.sparql.core.Quad)>($r7);

        r0[i1] = null;

        i1 = i1 + 1;

        goto label5;

     label6:
        if i0 >= 1000 goto label7;

        goto label8;

     label7:
        goto label1;

     label8:
        return;
    }

    public java.util.Iterator find()
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphBase r0;
        java.util.Iterator $r5;
        com.hp.hpl.jena.graph.Node $r1, $r2, $r3, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphBase;

        $r4 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r3 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r2 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r1 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphBase: java.util.Iterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r4, $r3, $r2, $r1);

        return $r5;
    }

    public java.util.Iterator find(com.hp.hpl.jena.sparql.core.Quad)
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphBase r1;
        java.util.Iterator $r6, $r7;
        com.hp.hpl.jena.graph.Node $r2, $r3, $r4, $r5;
        com.hp.hpl.jena.sparql.core.Quad r0;

        r1 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphBase;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.Quad;

        if r0 != null goto label1;

        $r7 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.DatasetGraphBase: java.util.Iterator find()>();

        return $r7;

     label1:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getGraph()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getSubject()>();

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getObject()>();

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.DatasetGraphBase: java.util.Iterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r2, $r3, $r4, $r5);

        return $r6;
    }

    public boolean contains(com.hp.hpl.jena.sparql.core.Quad)
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphBase r0;
        com.hp.hpl.jena.graph.Node $r2, $r3, $r4, $r5;
        com.hp.hpl.jena.sparql.core.Quad r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphBase;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.Quad;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getGraph()>();

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getSubject()>();

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getObject()>();

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphBase: boolean contains(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r2, $r3, $r4, $r5);

        return $z0;
    }

    public boolean contains(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphBase r0;
        java.util.Iterator $r5;
        com.hp.hpl.jena.graph.Node r1, r2, r3, r4;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphBase;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.graph.Node;

        r4 := @parameter3: com.hp.hpl.jena.graph.Node;

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphBase: java.util.Iterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2, r3, r4);

        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.apache.jena.atlas.iterator.Iter: void close(java.util.Iterator)>($r5);

        return $z0;
    }

    protected static boolean isWildcard(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0, $r1;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        if r0 == null goto label1;

        $r1 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        if r0 != $r1 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean isEmpty()
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphBase r0;
        com.hp.hpl.jena.graph.Node $r1, $r2, $r3, $r4;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphBase;

        $r4 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r3 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r2 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r1 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphBase: boolean contains(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r4, $r3, $r2, $r1);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public long size()
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphBase;

        return -1L;
    }

    public com.hp.hpl.jena.shared.Lock getLock()
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphBase r0;
        com.hp.hpl.jena.shared.Lock $r1;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphBase;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.DatasetGraphBase: com.hp.hpl.jena.shared.Lock lock>;

        return $r1;
    }

    public com.hp.hpl.jena.sparql.util.Context getContext()
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphBase r0;
        com.hp.hpl.jena.sparql.util.Context $r1;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphBase;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.DatasetGraphBase: com.hp.hpl.jena.sparql.util.Context context>;

        return $r1;
    }

    public void close()
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphBase;

        return;
    }

    public java.lang.String toString()
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphBase r1;
        org.apache.jena.atlas.io.IndentedLineBuffer $r0;
        java.lang.String $r2;

        r1 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphBase;

        $r0 = new org.apache.jena.atlas.io.IndentedLineBuffer;

        specialinvoke $r0.<org.apache.jena.atlas.io.IndentedLineBuffer: void <init>()>();

        staticinvoke <com.hp.hpl.jena.sparql.sse.writers.WriterGraph: void output(org.apache.jena.atlas.io.IndentedWriter,com.hp.hpl.jena.sparql.core.DatasetGraph,com.hp.hpl.jena.sparql.serializer.SerializationContext)>($r0, r1, null);

        $r2 = virtualinvoke $r0.<org.apache.jena.atlas.io.IndentedLineBuffer: java.lang.String asString()>();

        return $r2;
    }

    protected static java.util.Iterator triples2quadsDftGraph(java.util.Iterator)
    {
        com.hp.hpl.jena.graph.Node $r1;
        org.apache.jena.atlas.iterator.Iter $r2;
        java.util.Iterator r0;

        r0 := @parameter0: java.util.Iterator;

        $r1 = <com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node defaultGraphNodeGenerated>;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.core.DatasetGraphBase: org.apache.jena.atlas.iterator.Iter triples2quads(com.hp.hpl.jena.graph.Node,java.util.Iterator)>($r1, r0);

        return $r2;
    }

    protected static org.apache.jena.atlas.iterator.Iter triples2quads(com.hp.hpl.jena.graph.Node, java.util.Iterator)
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphBase$1 $r0;
        java.util.Iterator r2;
        com.hp.hpl.jena.graph.Node r1;
        org.apache.jena.atlas.iterator.Iter $r3, $r4;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: java.util.Iterator;

        $r0 = new com.hp.hpl.jena.sparql.core.DatasetGraphBase$1;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.core.DatasetGraphBase$1: void <init>(com.hp.hpl.jena.graph.Node)>(r1);

        $r3 = staticinvoke <org.apache.jena.atlas.iterator.Iter: org.apache.jena.atlas.iterator.Iter iter(java.util.Iterator)>(r2);

        $r4 = virtualinvoke $r3.<org.apache.jena.atlas.iterator.Iter: org.apache.jena.atlas.iterator.Iter map(org.apache.jena.atlas.iterator.Transform)>($r0);

        return $r4;
    }

    public static void <clinit>()
    {
        <com.hp.hpl.jena.sparql.core.DatasetGraphBase: int DeleteBufferSize> = 1000;

        return;
    }
}
