final class org.tukaani.xz.lzma.LZMAEncoderNormal extends org.tukaani.xz.lzma.LZMAEncoder
{
    private static final int OPTS;
    private static int EXTRA_SIZE_BEFORE;
    private static int EXTRA_SIZE_AFTER;
    private final org.tukaani.xz.lzma.Optimum[] opts;
    private int optCur;
    private int optEnd;
    private org.tukaani.xz.lz.Matches matches;
    private final int[] repLens;
    private final org.tukaani.xz.lzma.State nextState;
    static final boolean $assertionsDisabled;
    static java.lang.Class class$org$tukaani$xz$lzma$LZMAEncoderNormal;

    static int getMemoryUsage(int, int, int)
    {
        int i0, i1, $i2, $i3, i4, $i5, $i6, $i7;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i4 := @parameter2: int;

        $i2 = <org.tukaani.xz.lzma.LZMAEncoderNormal: int EXTRA_SIZE_BEFORE>;

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>(i1, $i2);

        $i5 = <org.tukaani.xz.lzma.LZMAEncoderNormal: int EXTRA_SIZE_AFTER>;

        $i6 = staticinvoke <org.tukaani.xz.lz.LZEncoder: int getMemoryUsage(int,int,int,int,int)>(i0, $i3, $i5, 273, i4);

        $i7 = $i6 + 256;

        return $i7;
    }

    void <init>(org.tukaani.xz.rangecoder.RangeEncoder, int, int, int, int, int, int, int, int)
    {
        org.tukaani.xz.rangecoder.RangeEncoder r1;
        org.tukaani.xz.lzma.State $r5;
        int[] $r4;
        org.tukaani.xz.lzma.Optimum $r6;
        int i0, i1, $i2, $i3, i4, i5, i6, $i7, i8, i9, i10, i11;
        org.tukaani.xz.lz.LZEncoder $r2;
        org.tukaani.xz.lzma.Optimum[] $r3, $r7;
        org.tukaani.xz.lzma.LZMAEncoderNormal r0;

        r0 := @this: org.tukaani.xz.lzma.LZMAEncoderNormal;

        r1 := @parameter0: org.tukaani.xz.rangecoder.RangeEncoder;

        i8 := @parameter1: int;

        i9 := @parameter2: int;

        i10 := @parameter3: int;

        i0 := @parameter4: int;

        i1 := @parameter5: int;

        i4 := @parameter6: int;

        i5 := @parameter7: int;

        i6 := @parameter8: int;

        $i2 = <org.tukaani.xz.lzma.LZMAEncoderNormal: int EXTRA_SIZE_BEFORE>;

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>(i1, $i2);

        $i7 = <org.tukaani.xz.lzma.LZMAEncoderNormal: int EXTRA_SIZE_AFTER>;

        $r2 = staticinvoke <org.tukaani.xz.lz.LZEncoder: org.tukaani.xz.lz.LZEncoder getInstance(int,int,int,int,int,int,int)>(i0, $i3, $i7, i4, 273, i5, i6);

        specialinvoke r0.<org.tukaani.xz.lzma.LZMAEncoder: void <init>(org.tukaani.xz.rangecoder.RangeEncoder,org.tukaani.xz.lz.LZEncoder,int,int,int,int,int)>(r1, $r2, i8, i9, i10, i0, i4);

        $r3 = newarray (org.tukaani.xz.lzma.Optimum)[4096];

        r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts> = $r3;

        r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur> = 0;

        r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd> = 0;

        $r4 = newarray (int)[4];

        r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int[] repLens> = $r4;

        $r5 = new org.tukaani.xz.lzma.State;

        specialinvoke $r5.<org.tukaani.xz.lzma.State: void <init>()>();

        r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.State nextState> = $r5;

        i11 = 0;

     label1:
        if i11 >= 4096 goto label2;

        $r7 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r6 = new org.tukaani.xz.lzma.Optimum;

        specialinvoke $r6.<org.tukaani.xz.lzma.Optimum: void <init>()>();

        $r7[i11] = $r6;

        i11 = i11 + 1;

        goto label1;

     label2:
        return;
    }

    public void reset()
    {
        org.tukaani.xz.lzma.LZMAEncoderNormal r0;

        r0 := @this: org.tukaani.xz.lzma.LZMAEncoderNormal;

        r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur> = 0;

        r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd> = 0;

        specialinvoke r0.<org.tukaani.xz.lzma.LZMAEncoder: void reset()>();

        return;
    }

    private int convertOpts()
    {
        boolean $z0, $z1;
        org.tukaani.xz.lzma.Optimum[] $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19;
        org.tukaani.xz.lzma.Optimum $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, $i12, $i13, $i14, $i16, $i18;
        org.tukaani.xz.lzma.LZMAEncoderNormal r0;

        r0 := @this: org.tukaani.xz.lzma.LZMAEncoderNormal;

        $i0 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd> = $i0;

        $r1 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i1 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r2 = $r1[$i1];

        i11 = $r2.<org.tukaani.xz.lzma.Optimum: int optPrev>;

     label1:
        $r3 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i2 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r4 = $r3[$i2];

        $z0 = $r4.<org.tukaani.xz.lzma.Optimum: boolean prev1IsLiteral>;

        if $z0 == 0 goto label2;

        $r9 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r10 = $r9[i11];

        $i7 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r10.<org.tukaani.xz.lzma.Optimum: int optPrev> = $i7;

        $r11 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r12 = $r11[i11];

        $i16 = (int) -1;

        $r12.<org.tukaani.xz.lzma.Optimum: int backPrev> = $i16;

        $i8 = i11;

        $i18 = (int) -1;

        i11 = i11 + $i18;

        r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur> = $i8;

        $z1 = $r4.<org.tukaani.xz.lzma.Optimum: boolean hasPrev2>;

        if $z1 == 0 goto label2;

        $r13 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r14 = $r13[i11];

        $i9 = i11 + 1;

        $r14.<org.tukaani.xz.lzma.Optimum: int optPrev> = $i9;

        $r15 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r16 = $r15[i11];

        $i10 = $r4.<org.tukaani.xz.lzma.Optimum: int backPrev2>;

        $r16.<org.tukaani.xz.lzma.Optimum: int backPrev> = $i10;

        r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur> = i11;

        i11 = $r4.<org.tukaani.xz.lzma.Optimum: int optPrev2>;

     label2:
        $r17 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r18 = $r17[i11];

        $i12 = $r18.<org.tukaani.xz.lzma.Optimum: int optPrev>;

        $r19 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r20 = $r19[i11];

        $i13 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r20.<org.tukaani.xz.lzma.Optimum: int optPrev> = $i13;

        r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur> = i11;

        i11 = $i12;

        $i14 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        if $i14 > 0 goto label1;

        $r5 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r6 = $r5[0];

        $i3 = $r6.<org.tukaani.xz.lzma.Optimum: int optPrev>;

        r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur> = $i3;

        $r7 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i4 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r8 = $r7[$i4];

        $i5 = $r8.<org.tukaani.xz.lzma.Optimum: int backPrev>;

        r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int back> = $i5;

        $i6 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        return $i6;
    }

    int getNextSymbol()
    {
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder $r86;
        org.tukaani.xz.lz.LZEncoder $r1, $r4, $r6, $r16, $r70, $r84, $r85;
        org.tukaani.xz.lzma.Optimum[] $r7, $r11, $r19, $r21, $r24, $r36, $r41, $r46, $r48, $r50, $r52, $r56, $r58, $r78, $r80, $r82, $r88;
        org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder $r45;
        int[] $r2, $r5, $r13, $r14, $r15, $r30, $r33, $r35, $r39, $r43, $r60, $r63, $r66, $r67, $r68, $r69, $r71, $r72, $r73, $r74, $r75, $r92;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, i75, i76, i77, i78, i79, $i80, i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, i91, i92, i93, i94, i95, i96, $i97, $i98, $i99, $i101, $i103, $i105, $i107, $i109, $i111;
        org.tukaani.xz.lzma.LZMAEncoderNormal r0;
        java.lang.AssertionError $r93, $r94;
        org.tukaani.xz.lz.Matches $r3, $r17, $r18, $r27, $r28, $r29, $r32, $r34, $r38, $r40, $r61, $r62, $r64, $r65, $r76;
        boolean $z0, $z1;
        org.tukaani.xz.lzma.State $r9, $r10, $r23, $r26, $r31, $r44, $r55, $r87, $r90, $r91;
        org.tukaani.xz.lzma.Optimum $r8, $r12, $r20, $r22, $r25, $r37, $r42, $r47, $r49, $r51, $r53, $r57, $r59, $r79, $r81, $r83, $r89;

        r0 := @this: org.tukaani.xz.lzma.LZMAEncoderNormal;

        $i1 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $i0 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd>;

        if $i1 >= $i0 goto label01;

        $r78 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i68 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r79 = $r78[$i68];

        $i70 = $r79.<org.tukaani.xz.lzma.Optimum: int optPrev>;

        $i69 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        i75 = $i70 - $i69;

        $r80 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i71 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r81 = $r80[$i71];

        $i72 = $r81.<org.tukaani.xz.lzma.Optimum: int optPrev>;

        r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur> = $i72;

        $r82 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i73 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r83 = $r82[$i73];

        $i74 = $r83.<org.tukaani.xz.lzma.Optimum: int backPrev>;

        r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int back> = $i74;

        return i75;

     label01:
        $z0 = <org.tukaani.xz.lzma.LZMAEncoderNormal: boolean $assertionsDisabled>;

        if $z0 != 0 goto label02;

        $i67 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $i66 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd>;

        if $i67 == $i66 goto label02;

        $r93 = new java.lang.AssertionError;

        specialinvoke $r93.<java.lang.AssertionError: void <init>()>();

        throw $r93;

     label02:
        r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur> = 0;

        r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd> = 0;

        $i101 = (int) -1;

        r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int back> = $i101;

        $i2 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int readAhead>;

        $i103 = (int) -1;

        if $i2 != $i103 goto label03;

        $r76 = virtualinvoke r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches getMatches()>();

        r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches> = $r76;

     label03:
        $r1 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.LZEncoder lz>;

        $i3 = virtualinvoke $r1.<org.tukaani.xz.lz.LZEncoder: int getAvail()>();

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>($i3, 273);

        if $i4 >= 2 goto label04;

        return 1;

     label04:
        i76 = 0;

        i77 = 0;

     label05:
        if i77 >= 4 goto label08;

        $r71 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int[] repLens>;

        $r70 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.LZEncoder lz>;

        $r69 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int[] reps>;

        $i61 = $r69[i77];

        $i62 = virtualinvoke $r70.<org.tukaani.xz.lz.LZEncoder: int getMatchLen(int,int)>($i61, $i4);

        $r71[i77] = $i62;

        $r72 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int[] repLens>;

        $i63 = $r72[i77];

        if $i63 >= 2 goto label06;

        $r75 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int[] repLens>;

        $r75[i77] = 0;

        goto label07;

     label06:
        $r73 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int[] repLens>;

        $i65 = $r73[i77];

        $r74 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int[] repLens>;

        $i64 = $r74[i76];

        if $i65 <= $i64 goto label07;

        i76 = i77;

     label07:
        i77 = i77 + 1;

        goto label05;

     label08:
        $r2 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int[] repLens>;

        $i6 = $r2[i76];

        $i5 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int niceLen>;

        if $i6 < $i5 goto label09;

        r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int back> = i76;

        $r67 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int[] repLens>;

        $i58 = $r67[i76];

        $i59 = $i58 - 1;

        virtualinvoke r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: void skip(int)>($i59);

        $r68 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int[] repLens>;

        $i60 = $r68[i76];

        return $i60;

     label09:
        i78 = 0;

        $r3 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $i7 = $r3.<org.tukaani.xz.lz.Matches: int count>;

        if $i7 <= 0 goto label10;

        $r61 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $r63 = $r61.<org.tukaani.xz.lz.Matches: int[] len>;

        $r62 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $i51 = $r62.<org.tukaani.xz.lz.Matches: int count>;

        $i52 = $i51 - 1;

        i78 = $r63[$i52];

        $r64 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $r66 = $r64.<org.tukaani.xz.lz.Matches: int[] dist>;

        $r65 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $i53 = $r65.<org.tukaani.xz.lz.Matches: int count>;

        $i54 = $i53 - 1;

        i79 = $r66[$i54];

        $i55 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int niceLen>;

        if i78 < $i55 goto label10;

        $i56 = i79 + 4;

        r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int back> = $i56;

        $i57 = i78 - 1;

        virtualinvoke r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: void skip(int)>($i57);

        return i78;

     label10:
        $r4 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.LZEncoder lz>;

        $i8 = virtualinvoke $r4.<org.tukaani.xz.lz.LZEncoder: int getByte(int)>(0);

        $r6 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.LZEncoder lz>;

        $r5 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int[] reps>;

        $i9 = $r5[0];

        $i10 = $i9 + 1;

        $i11 = virtualinvoke $r6.<org.tukaani.xz.lz.LZEncoder: int getByte(int)>($i10);

        if i78 >= 2 goto label11;

        if $i8 == $i11 goto label11;

        $r60 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int[] repLens>;

        $i50 = $r60[i76];

        if $i50 >= 2 goto label11;

        return 1;

     label11:
        $r84 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.LZEncoder lz>;

        $i80 = virtualinvoke $r84.<org.tukaani.xz.lz.LZEncoder: int getPos()>();

        i81 = $i80;

        $i82 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int posMask>;

        $i83 = $i80 & $i82;

        $r85 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.LZEncoder lz>;

        $i84 = virtualinvoke $r85.<org.tukaani.xz.lz.LZEncoder: int getByte(int)>(1);

        $r86 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder literalEncoder>;

        $r87 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.State state>;

        $i85 = virtualinvoke $r86.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: int getPrice(int,int,int,int,org.tukaani.xz.lzma.State)>($i8, $i11, $i84, $i80, $r87);

        $r88 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r89 = $r88[1];

        $i105 = (int) -1;

        virtualinvoke $r89.<org.tukaani.xz.lzma.Optimum: void set1(int,int,int)>($i85, 0, $i105);

        $r90 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.State state>;

        $i86 = virtualinvoke r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int getAnyMatchPrice(org.tukaani.xz.lzma.State,int)>($r90, $i83);

        $r91 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.State state>;

        $i87 = virtualinvoke r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int getAnyRepPrice(int,org.tukaani.xz.lzma.State)>($i86, $r91);

        if $i11 != $i8 goto label12;

        $r55 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.State state>;

        $i48 = virtualinvoke r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int getShortRepPrice(int,org.tukaani.xz.lzma.State,int)>($i87, $r55, $i83);

        $r56 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r57 = $r56[1];

        $i49 = $r57.<org.tukaani.xz.lzma.Optimum: int price>;

        if $i48 >= $i49 goto label12;

        $r58 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r59 = $r58[1];

        virtualinvoke $r59.<org.tukaani.xz.lzma.Optimum: void set1(int,int,int)>($i48, 0, 0);

     label12:
        $r92 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int[] repLens>;

        $i88 = $r92[i76];

        $i89 = staticinvoke <java.lang.Math: int max(int,int)>(i78, $i88);

        r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd> = $i89;

        $i90 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd>;

        if $i90 >= 2 goto label14;

        $z1 = <org.tukaani.xz.lzma.LZMAEncoderNormal: boolean $assertionsDisabled>;

        if $z1 != 0 goto label13;

        $i46 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd>;

        if $i46 == 0 goto label13;

        $r94 = new java.lang.AssertionError;

        $i47 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd>;

        specialinvoke $r94.<java.lang.AssertionError: void <init>(int)>($i47);

        throw $r94;

     label13:
        $r52 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r53 = $r52[1];

        $i45 = $r53.<org.tukaani.xz.lzma.Optimum: int backPrev>;

        r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int back> = $i45;

        return 1;

     label14:
        virtualinvoke r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: void updatePrices()>();

        $r7 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r8 = $r7[0];

        $r10 = $r8.<org.tukaani.xz.lzma.Optimum: org.tukaani.xz.lzma.State state>;

        $r9 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.State state>;

        virtualinvoke $r10.<org.tukaani.xz.lzma.State: void set(org.tukaani.xz.lzma.State)>($r9);

        $r14 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int[] reps>;

        $r11 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r12 = $r11[0];

        $r13 = $r12.<org.tukaani.xz.lzma.Optimum: int[] reps>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r14, 0, $r13, 0, 4);

        i91 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd>;

     label15:
        if i91 < 2 goto label16;

        $r50 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r51 = $r50[i91];

        virtualinvoke $r51.<org.tukaani.xz.lzma.Optimum: void reset()>();

        $i107 = (int) -1;

        i91 = i91 + $i107;

        goto label15;

     label16:
        i92 = 0;

     label17:
        if i92 >= 4 goto label22;

        $r43 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int[] repLens>;

        i93 = $r43[i92];

        if i93 >= 2 goto label18;

        goto label21;

     label18:
        $r44 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.State state>;

        $i41 = virtualinvoke r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int getLongRepPrice(int,int,org.tukaani.xz.lzma.State,int)>($i87, i92, $r44, $i83);

     label19:
        $r45 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder repLenEncoder>;

        $i42 = virtualinvoke $r45.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: int getPrice(int,int)>(i93, $i83);

        $i44 = $i41 + $i42;

        $r46 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r47 = $r46[i93];

        $i43 = $r47.<org.tukaani.xz.lzma.Optimum: int price>;

        if $i44 >= $i43 goto label20;

        $r48 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r49 = $r48[i93];

        virtualinvoke $r49.<org.tukaani.xz.lzma.Optimum: void set1(int,int,int)>($i44, 0, i92);

     label20:
        $i109 = (int) -1;

        i93 = i93 + $i109;

        if i93 >= 2 goto label19;

     label21:
        i92 = i92 + 1;

        goto label17;

     label22:
        $r15 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int[] repLens>;

        $i12 = $r15[0];

        $i13 = $i12 + 1;

        $i14 = staticinvoke <java.lang.Math: int max(int,int)>($i13, 2);

        i94 = $i14;

        if $i14 > i78 goto label27;

        $r31 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.State state>;

        $i33 = virtualinvoke r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int getNormalMatchPrice(int,org.tukaani.xz.lzma.State)>($i86, $r31);

        i95 = 0;

     label23:
        $r32 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $r33 = $r32.<org.tukaani.xz.lz.Matches: int[] len>;

        $i34 = $r33[i95];

        if $i14 <= $i34 goto label24;

        i95 = i95 + 1;

        goto label23;

     label24:
        $r34 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $r35 = $r34.<org.tukaani.xz.lz.Matches: int[] dist>;

        $i38 = $r35[i95];

        $i35 = virtualinvoke r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int getMatchAndLenPrice(int,int,int,int)>($i33, $i38, i94, $i83);

        $r36 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r37 = $r36[i94];

        $i36 = $r37.<org.tukaani.xz.lzma.Optimum: int price>;

        if $i35 >= $i36 goto label25;

        $r41 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r42 = $r41[i94];

        $i40 = $i38 + 4;

        virtualinvoke $r42.<org.tukaani.xz.lzma.Optimum: void set1(int,int,int)>($i35, 0, $i40);

     label25:
        $r38 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $r39 = $r38.<org.tukaani.xz.lz.Matches: int[] len>;

        $i37 = $r39[i95];

        if i94 != $i37 goto label26;

        i95 = i95 + 1;

        $r40 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $i39 = $r40.<org.tukaani.xz.lz.Matches: int count>;

        if i95 != $i39 goto label26;

        goto label27;

     label26:
        i94 = i94 + 1;

        goto label24;

     label27:
        $r16 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.LZEncoder lz>;

        $i15 = virtualinvoke $r16.<org.tukaani.xz.lz.LZEncoder: int getAvail()>();

        i96 = staticinvoke <java.lang.Math: int min(int,int)>($i15, 4095);

     label28:
        $i97 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $i98 = $i97 + 1;

        r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur> = $i98;

        $i99 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd>;

        if $i98 >= $i99 goto label31;

        $r17 = virtualinvoke r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches getMatches()>();

        r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches> = $r17;

        $r18 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $i17 = $r18.<org.tukaani.xz.lz.Matches: int count>;

        if $i17 <= 0 goto label29;

        $r28 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $r30 = $r28.<org.tukaani.xz.lz.Matches: int[] len>;

        $r29 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $i27 = $r29.<org.tukaani.xz.lz.Matches: int count>;

        $i28 = $i27 - 1;

        $i30 = $r30[$i28];

        $i29 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int niceLen>;

        if $i30 < $i29 goto label29;

        goto label31;

     label29:
        $i111 = (int) -1;

        i96 = i96 + $i111;

        i81 = i81 + 1;

        $i18 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int posMask>;

        $i31 = i81 & $i18;

        specialinvoke r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: void updateOptStateAndReps()>();

        $r19 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i19 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r20 = $r19[$i19];

        $i21 = $r20.<org.tukaani.xz.lzma.Optimum: int price>;

        $r21 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i20 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r22 = $r21[$i20];

        $r23 = $r22.<org.tukaani.xz.lzma.Optimum: org.tukaani.xz.lzma.State state>;

        $i22 = virtualinvoke r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int getAnyMatchPrice(org.tukaani.xz.lzma.State,int)>($r23, $i31);

        $i32 = $i21 + $i22;

        $r24 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i23 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r25 = $r24[$i23];

        $r26 = $r25.<org.tukaani.xz.lzma.Optimum: org.tukaani.xz.lzma.State state>;

        $i24 = virtualinvoke r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int getAnyRepPrice(int,org.tukaani.xz.lzma.State)>($i32, $r26);

        specialinvoke r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: void calc1BytePrices(int,int,int,int)>(i81, $i31, i96, $i24);

        if i96 < 2 goto label28;

        $i25 = specialinvoke r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int calcLongRepPrices(int,int,int,int)>(i81, $i31, i96, $i24);

        $r27 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $i26 = $r27.<org.tukaani.xz.lz.Matches: int count>;

        if $i26 <= 0 goto label30;

        specialinvoke r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: void calcNormalMatchPrices(int,int,int,int,int)>(i81, $i31, i96, $i32, $i25);

     label30:
        goto label28;

     label31:
        $i16 = specialinvoke r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int convertOpts()>();

        return $i16;
    }

    private void updateOptStateAndReps()
    {
        org.tukaani.xz.lzma.Optimum[] $r1, $r3, $r5, $r7, $r11, $r13, $r15, $r18, $r21, $r23, $r27, $r29, $r33, $r35, $r39, $r41, $r45, $r48, $r50, $r52, $r54, $r57, $r60, $r62, $r66, $r69, $r71, $r74, $r76, $r78, $r82, $r84, $r86, $r90, $r92, $r95, $r99, $r102;
        int[] $r20, $r25, $r26, $r31, $r32, $r37, $r38, $r43, $r44, $r64, $r65;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, i41, $i42, $i43, $i44, i45, i46, $i48, $i50;
        org.tukaani.xz.lzma.LZMAEncoderNormal r0;
        java.lang.AssertionError $r104, $r105;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.tukaani.xz.lzma.State $r9, $r10, $r17, $r47, $r56, $r59, $r68, $r80, $r81, $r88, $r89, $r94, $r97, $r101;
        org.tukaani.xz.lzma.Optimum $r2, $r4, $r6, $r8, $r12, $r14, $r16, $r19, $r22, $r24, $r28, $r30, $r34, $r36, $r40, $r42, $r46, $r49, $r51, $r53, $r55, $r58, $r61, $r63, $r67, $r70, $r72, $r75, $r77, $r79, $r83, $r85, $r87, $r91, $r93, $r96, $r100, $r103;

        r0 := @this: org.tukaani.xz.lzma.LZMAEncoderNormal;

        $r1 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i0 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r2 = $r1[$i0];

        i41 = $r2.<org.tukaani.xz.lzma.Optimum: int optPrev>;

        $z0 = <org.tukaani.xz.lzma.LZMAEncoderNormal: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $i40 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        if i41 < $i40 goto label01;

        $r104 = new java.lang.AssertionError;

        specialinvoke $r104.<java.lang.AssertionError: void <init>()>();

        throw $r104;

     label01:
        $r3 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i1 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r4 = $r3[$i1];

        $z1 = $r4.<org.tukaani.xz.lzma.Optimum: boolean prev1IsLiteral>;

        if $z1 == 0 goto label05;

        $i48 = (int) -1;

        i41 = i41 + $i48;

        $r74 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i31 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r75 = $r74[$i31];

        $z5 = $r75.<org.tukaani.xz.lzma.Optimum: boolean hasPrev2>;

        if $z5 == 0 goto label03;

        $r82 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i33 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r83 = $r82[$i33];

        $r89 = $r83.<org.tukaani.xz.lzma.Optimum: org.tukaani.xz.lzma.State state>;

        $r86 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r84 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i34 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r85 = $r84[$i34];

        $i35 = $r85.<org.tukaani.xz.lzma.Optimum: int optPrev2>;

        $r87 = $r86[$i35];

        $r88 = $r87.<org.tukaani.xz.lzma.Optimum: org.tukaani.xz.lzma.State state>;

        virtualinvoke $r89.<org.tukaani.xz.lzma.State: void set(org.tukaani.xz.lzma.State)>($r88);

        $r90 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i36 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r91 = $r90[$i36];

        $i37 = $r91.<org.tukaani.xz.lzma.Optimum: int backPrev2>;

        if $i37 >= 4 goto label02;

        $r95 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i39 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r96 = $r95[$i39];

        $r97 = $r96.<org.tukaani.xz.lzma.Optimum: org.tukaani.xz.lzma.State state>;

        virtualinvoke $r97.<org.tukaani.xz.lzma.State: void updateLongRep()>();

        goto label04;

     label02:
        $r92 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i38 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r93 = $r92[$i38];

        $r94 = $r93.<org.tukaani.xz.lzma.Optimum: org.tukaani.xz.lzma.State state>;

        virtualinvoke $r94.<org.tukaani.xz.lzma.State: void updateMatch()>();

        goto label04;

     label03:
        $r76 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i32 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r77 = $r76[$i32];

        $r81 = $r77.<org.tukaani.xz.lzma.Optimum: org.tukaani.xz.lzma.State state>;

        $r78 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r79 = $r78[i41];

        $r80 = $r79.<org.tukaani.xz.lzma.Optimum: org.tukaani.xz.lzma.State state>;

        virtualinvoke $r81.<org.tukaani.xz.lzma.State: void set(org.tukaani.xz.lzma.State)>($r80);

     label04:
        $r99 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i42 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r100 = $r99[$i42];

        $r101 = $r100.<org.tukaani.xz.lzma.Optimum: org.tukaani.xz.lzma.State state>;

        virtualinvoke $r101.<org.tukaani.xz.lzma.State: void updateLiteral()>();

        goto label06;

     label05:
        $r5 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i2 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r6 = $r5[$i2];

        $r10 = $r6.<org.tukaani.xz.lzma.Optimum: org.tukaani.xz.lzma.State state>;

        $r7 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r8 = $r7[i41];

        $r9 = $r8.<org.tukaani.xz.lzma.Optimum: org.tukaani.xz.lzma.State state>;

        virtualinvoke $r10.<org.tukaani.xz.lzma.State: void set(org.tukaani.xz.lzma.State)>($r9);

     label06:
        $i3 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $i4 = $i3 - 1;

        if i41 != $i4 goto label10;

        $z4 = <org.tukaani.xz.lzma.LZMAEncoderNormal: boolean $assertionsDisabled>;

        if $z4 != 0 goto label07;

        $r69 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i27 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r70 = $r69[$i27];

        $i28 = $r70.<org.tukaani.xz.lzma.Optimum: int backPrev>;

        if $i28 == 0 goto label07;

        $r71 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i29 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r72 = $r71[$i29];

        $i30 = $r72.<org.tukaani.xz.lzma.Optimum: int backPrev>;

        $i50 = (int) -1;

        if $i30 == $i50 goto label07;

        $r105 = new java.lang.AssertionError;

        specialinvoke $r105.<java.lang.AssertionError: void <init>()>();

        throw $r105;

     label07:
        $r102 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i43 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r103 = $r102[$i43];

        $i44 = $r103.<org.tukaani.xz.lzma.Optimum: int backPrev>;

        if $i44 != 0 goto label08;

        $r66 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i26 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r67 = $r66[$i26];

        $r68 = $r67.<org.tukaani.xz.lzma.Optimum: org.tukaani.xz.lzma.State state>;

        virtualinvoke $r68.<org.tukaani.xz.lzma.State: void updateShortRep()>();

        goto label09;

     label08:
        $r57 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i24 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r58 = $r57[$i24];

        $r59 = $r58.<org.tukaani.xz.lzma.Optimum: org.tukaani.xz.lzma.State state>;

        virtualinvoke $r59.<org.tukaani.xz.lzma.State: void updateLiteral()>();

     label09:
        $r60 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r61 = $r60[i41];

        $r65 = $r61.<org.tukaani.xz.lzma.Optimum: int[] reps>;

        $r62 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i25 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r63 = $r62[$i25];

        $r64 = $r63.<org.tukaani.xz.lzma.Optimum: int[] reps>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r65, 0, $r64, 0, 4);

        goto label18;

     label10:
        $r11 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i5 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r12 = $r11[$i5];

        $z2 = $r12.<org.tukaani.xz.lzma.Optimum: boolean prev1IsLiteral>;

        if $z2 == 0 goto label11;

        $r48 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i19 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r49 = $r48[$i19];

        $z3 = $r49.<org.tukaani.xz.lzma.Optimum: boolean hasPrev2>;

        if $z3 == 0 goto label11;

        $r50 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i21 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r51 = $r50[$i21];

        i41 = $r51.<org.tukaani.xz.lzma.Optimum: int optPrev2>;

        $r52 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i22 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r53 = $r52[$i22];

        i45 = $r53.<org.tukaani.xz.lzma.Optimum: int backPrev2>;

        $r54 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i23 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r55 = $r54[$i23];

        $r56 = $r55.<org.tukaani.xz.lzma.Optimum: org.tukaani.xz.lzma.State state>;

        virtualinvoke $r56.<org.tukaani.xz.lzma.State: void updateLongRep()>();

        goto label13;

     label11:
        $r13 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i6 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r14 = $r13[$i6];

        $i20 = $r14.<org.tukaani.xz.lzma.Optimum: int backPrev>;

        i45 = $i20;

        if $i20 >= 4 goto label12;

        $r45 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i18 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r46 = $r45[$i18];

        $r47 = $r46.<org.tukaani.xz.lzma.Optimum: org.tukaani.xz.lzma.State state>;

        virtualinvoke $r47.<org.tukaani.xz.lzma.State: void updateLongRep()>();

        goto label13;

     label12:
        $r15 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i7 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r16 = $r15[$i7];

        $r17 = $r16.<org.tukaani.xz.lzma.Optimum: org.tukaani.xz.lzma.State state>;

        virtualinvoke $r17.<org.tukaani.xz.lzma.State: void updateMatch()>();

     label13:
        if i45 >= 4 goto label17;

        $r27 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i11 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r28 = $r27[$i11];

        $r32 = $r28.<org.tukaani.xz.lzma.Optimum: int[] reps>;

        $r29 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r30 = $r29[i41];

        $r31 = $r30.<org.tukaani.xz.lzma.Optimum: int[] reps>;

        $i12 = $r31[i45];

        $r32[0] = $i12;

        i46 = 1;

     label14:
        if i46 > i45 goto label15;

        $r39 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i15 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r40 = $r39[$i15];

        $r44 = $r40.<org.tukaani.xz.lzma.Optimum: int[] reps>;

        $r41 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r42 = $r41[i41];

        $r43 = $r42.<org.tukaani.xz.lzma.Optimum: int[] reps>;

        $i16 = i46 - 1;

        $i17 = $r43[$i16];

        $r44[i46] = $i17;

        i46 = i46 + 1;

        goto label14;

     label15:
        if i46 >= 4 goto label16;

        $r33 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i13 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r34 = $r33[$i13];

        $r38 = $r34.<org.tukaani.xz.lzma.Optimum: int[] reps>;

        $r35 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r36 = $r35[i41];

        $r37 = $r36.<org.tukaani.xz.lzma.Optimum: int[] reps>;

        $i14 = $r37[i46];

        $r38[i46] = $i14;

        i46 = i46 + 1;

        goto label15;

     label16:
        goto label18;

     label17:
        $r18 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i8 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r19 = $r18[$i8];

        $r20 = $r19.<org.tukaani.xz.lzma.Optimum: int[] reps>;

        $i9 = i45 - 4;

        $r20[0] = $i9;

        $r21 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r22 = $r21[i41];

        $r26 = $r22.<org.tukaani.xz.lzma.Optimum: int[] reps>;

        $r23 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i10 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r24 = $r23[$i10];

        $r25 = $r24.<org.tukaani.xz.lzma.Optimum: int[] reps>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r26, 0, $r25, 1, 3);

     label18:
        return;
    }

    private void calc1BytePrices(int, int, int, int)
    {
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder $r9;
        org.tukaani.xz.lz.LZEncoder $r1, $r5, $r8, $r18;
        org.tukaani.xz.lzma.Optimum[] $r2, $r6, $r10, $r13, $r15, $r19, $r25, $r27, $r29, $r31, $r33, $r36, $r38, $r40, $r42;
        int[] $r4, $r17;
        boolean z0;
        org.tukaani.xz.lzma.State $r12, $r21, $r22, $r23, $r24, $r35;
        org.tukaani.xz.lzma.Optimum $r3, $r7, $r11, $r14, $r16, $r20, $r26, $r28, $r30, $r32, $r34, $r37, $r39, $r41, $r43;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, $i9, $i10, i11, $i12, $i13, $i14, i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, i25, $i26, i27, $i28, $i29, i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, i40, $i41, i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i57;
        org.tukaani.xz.lzma.LZMAEncoderNormal r0;

        r0 := @this: org.tukaani.xz.lzma.LZMAEncoderNormal;

        i8 := @parameter0: int;

        i42 := @parameter1: int;

        i15 := @parameter2: int;

        i40 := @parameter3: int;

        z0 = 0;

        $r1 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.LZEncoder lz>;

        $i0 = virtualinvoke $r1.<org.tukaani.xz.lz.LZEncoder: int getByte(int)>(0);

        $r5 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.LZEncoder lz>;

        $r2 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i1 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r3 = $r2[$i1];

        $r4 = $r3.<org.tukaani.xz.lzma.Optimum: int[] reps>;

        $i2 = $r4[0];

        $i3 = $i2 + 1;

        $i4 = virtualinvoke $r5.<org.tukaani.xz.lz.LZEncoder: int getByte(int)>($i3);

        $r6 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i5 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r7 = $r6[$i5];

        $i6 = $r7.<org.tukaani.xz.lzma.Optimum: int price>;

        $r9 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder literalEncoder>;

        $r8 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.LZEncoder lz>;

        $i7 = virtualinvoke $r8.<org.tukaani.xz.lz.LZEncoder: int getByte(int)>(1);

        $r10 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i9 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r11 = $r10[$i9];

        $r12 = $r11.<org.tukaani.xz.lzma.Optimum: org.tukaani.xz.lzma.State state>;

        $i10 = virtualinvoke $r9.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: int getPrice(int,int,int,int,org.tukaani.xz.lzma.State)>($i0, $i4, $i7, i8, $r12);

        i11 = $i6 + $i10;

        $r13 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i12 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $i13 = $i12 + 1;

        $r14 = $r13[$i13];

        $i14 = $r14.<org.tukaani.xz.lzma.Optimum: int price>;

        if i11 >= $i14 goto label1;

        $r42 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i53 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $i54 = $i53 + 1;

        $r43 = $r42[$i54];

        $i55 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $i57 = (int) -1;

        virtualinvoke $r43.<org.tukaani.xz.lzma.Optimum: void set1(int,int,int)>(i11, $i55, $i57);

        z0 = 1;

     label1:
        if $i4 != $i0 goto label3;

        $r31 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i36 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $i37 = $i36 + 1;

        $r32 = $r31[$i37];

        $i39 = $r32.<org.tukaani.xz.lzma.Optimum: int optPrev>;

        $i38 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        if $i39 == $i38 goto label2;

        $r40 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i50 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $i51 = $i50 + 1;

        $r41 = $r40[$i51];

        $i52 = $r41.<org.tukaani.xz.lzma.Optimum: int backPrev>;

        if $i52 == 0 goto label3;

     label2:
        $r33 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i41 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r34 = $r33[$i41];

        $r35 = $r34.<org.tukaani.xz.lzma.Optimum: org.tukaani.xz.lzma.State state>;

        $i43 = virtualinvoke r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int getShortRepPrice(int,org.tukaani.xz.lzma.State,int)>(i40, $r35, i42);

        $r36 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i44 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $i45 = $i44 + 1;

        $r37 = $r36[$i45];

        $i46 = $r37.<org.tukaani.xz.lzma.Optimum: int price>;

        if $i43 > $i46 goto label3;

        $r38 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i47 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $i48 = $i47 + 1;

        $r39 = $r38[$i48];

        $i49 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        virtualinvoke $r39.<org.tukaani.xz.lzma.Optimum: void set1(int,int,int)>($i43, $i49, 0);

        z0 = 1;

     label3:
        if z0 != 0 goto label6;

        if $i4 == $i0 goto label6;

        if i15 <= 2 goto label6;

        $i17 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int niceLen>;

        $i16 = i15 - 1;

        $i18 = staticinvoke <java.lang.Math: int min(int,int)>($i17, $i16);

        $r18 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.LZEncoder lz>;

        $r15 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i19 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r16 = $r15[$i19];

        $r17 = $r16.<org.tukaani.xz.lzma.Optimum: int[] reps>;

        $i20 = $r17[0];

        $i21 = virtualinvoke $r18.<org.tukaani.xz.lz.LZEncoder: int getMatchLen(int,int,int)>(1, $i20, $i18);

        if $i21 < 2 goto label6;

        $r22 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.State nextState>;

        $r19 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i22 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r20 = $r19[$i22];

        $r21 = $r20.<org.tukaani.xz.lzma.Optimum: org.tukaani.xz.lzma.State state>;

        virtualinvoke $r22.<org.tukaani.xz.lzma.State: void set(org.tukaani.xz.lzma.State)>($r21);

        $r23 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.State nextState>;

        virtualinvoke $r23.<org.tukaani.xz.lzma.State: void updateLiteral()>();

        $i24 = i8 + 1;

        $i23 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int posMask>;

        i25 = $i24 & $i23;

        $r24 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.State nextState>;

        $i26 = virtualinvoke r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int getLongRepAndLenPrice(int,int,org.tukaani.xz.lzma.State,int)>(0, $i21, $r24, i25);

        i27 = i11 + $i26;

        $i28 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $i29 = $i28 + 1;

        i30 = $i29 + $i21;

     label4:
        $i31 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd>;

        if $i31 >= i30 goto label5;

        $r29 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i34 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd>;

        $i35 = $i34 + 1;

        r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd> = $i35;

        $r30 = $r29[$i35];

        virtualinvoke $r30.<org.tukaani.xz.lzma.Optimum: void reset()>();

        goto label4;

     label5:
        $r25 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r26 = $r25[i30];

        $i32 = $r26.<org.tukaani.xz.lzma.Optimum: int price>;

        if i27 >= $i32 goto label6;

        $r27 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r28 = $r27[i30];

        $i33 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        virtualinvoke $r28.<org.tukaani.xz.lzma.Optimum: void set2(int,int,int)>(i27, $i33, 0);

     label6:
        return;
    }

    private int calcLongRepPrices(int, int, int, int)
    {
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder $r22;
        org.tukaani.xz.lz.LZEncoder $r4, $r11, $r18, $r19, $r20;
        org.tukaani.xz.lzma.Optimum[] $r1, $r5, $r8, $r13, $r25, $r27, $r29, $r32, $r34, $r36;
        org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder $r12, $r31;
        int[] $r3, $r10;
        org.tukaani.xz.lzma.State $r7, $r15, $r16, $r17, $r21, $r23, $r24;
        org.tukaani.xz.lzma.Optimum $r2, $r6, $r9, $r14, $r26, $r28, $r30, $r33, $r35, $r37;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, $i10, i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, i26, $i27, $i28, $i29, $i30, $i31, i32, $i33, $i34, $i35, $i36, i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, i52, i53, i54, i55, i56, i57, i58, $i60;
        org.tukaani.xz.lzma.LZMAEncoderNormal r0;

        r0 := @this: org.tukaani.xz.lzma.LZMAEncoderNormal;

        i26 := @parameter0: int;

        i11 := @parameter1: int;

        i0 := @parameter2: int;

        i9 := @parameter3: int;

        i52 = 2;

        $i1 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int niceLen>;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>(i0, $i1);

        i53 = 0;

     label01:
        if i53 >= 4 goto label11;

        $r4 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.LZEncoder lz>;

        $r1 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i3 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r2 = $r1[$i3];

        $r3 = $r2.<org.tukaani.xz.lzma.Optimum: int[] reps>;

        $i4 = $r3[i53];

        $i5 = virtualinvoke $r4.<org.tukaani.xz.lz.LZEncoder: int getMatchLen(int,int)>($i4, $i2);

        if $i5 >= 2 goto label02;

        goto label10;

     label02:
        $i8 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd>;

        $i6 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $i7 = $i6 + $i5;

        if $i8 >= $i7 goto label03;

        $r36 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i50 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd>;

        $i51 = $i50 + 1;

        r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd> = $i51;

        $r37 = $r36[$i51];

        virtualinvoke $r37.<org.tukaani.xz.lzma.Optimum: void reset()>();

        goto label02;

     label03:
        $r5 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i10 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r6 = $r5[$i10];

        $r7 = $r6.<org.tukaani.xz.lzma.Optimum: org.tukaani.xz.lzma.State state>;

        $i12 = virtualinvoke r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int getLongRepPrice(int,int,org.tukaani.xz.lzma.State,int)>(i9, i53, $r7, i11);

        i54 = $i5;

     label04:
        if i54 < 2 goto label06;

        $r31 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder repLenEncoder>;

        $i43 = virtualinvoke $r31.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: int getPrice(int,int)>(i54, i11);

        i55 = $i12 + $i43;

        $r32 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i44 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $i45 = $i44 + i54;

        $r33 = $r32[$i45];

        $i46 = $r33.<org.tukaani.xz.lzma.Optimum: int price>;

        if i55 >= $i46 goto label05;

        $r34 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i47 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $i48 = $i47 + i54;

        $r35 = $r34[$i48];

        $i49 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        virtualinvoke $r35.<org.tukaani.xz.lzma.Optimum: void set1(int,int,int)>(i55, $i49, i53);

     label05:
        $i60 = (int) -1;

        i54 = i54 + $i60;

        goto label04;

     label06:
        if i53 != 0 goto label07;

        i52 = $i5 + 1;

     label07:
        $i15 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int niceLen>;

        $i13 = i0 - $i5;

        $i14 = $i13 - 1;

        $i16 = staticinvoke <java.lang.Math: int min(int,int)>($i15, $i14);

        $r11 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.LZEncoder lz>;

        $i19 = $i5 + 1;

        $r8 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i17 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r9 = $r8[$i17];

        $r10 = $r9.<org.tukaani.xz.lzma.Optimum: int[] reps>;

        $i18 = $r10[i53];

        $i20 = virtualinvoke $r11.<org.tukaani.xz.lz.LZEncoder: int getMatchLen(int,int,int)>($i19, $i18, $i16);

        if $i20 < 2 goto label10;

        $r12 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder repLenEncoder>;

        $i21 = virtualinvoke $r12.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: int getPrice(int,int)>($i5, i11);

        i56 = $i12 + $i21;

        $r16 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.State nextState>;

        $r13 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i22 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r14 = $r13[$i22];

        $r15 = $r14.<org.tukaani.xz.lzma.Optimum: org.tukaani.xz.lzma.State state>;

        virtualinvoke $r16.<org.tukaani.xz.lzma.State: void set(org.tukaani.xz.lzma.State)>($r15);

        $r17 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.State nextState>;

        virtualinvoke $r17.<org.tukaani.xz.lzma.State: void updateLongRep()>();

        $r18 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.LZEncoder lz>;

        $i23 = virtualinvoke $r18.<org.tukaani.xz.lz.LZEncoder: int getByte(int,int)>($i5, 0);

        $r19 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.LZEncoder lz>;

        $i24 = virtualinvoke $r19.<org.tukaani.xz.lz.LZEncoder: int getByte(int)>(0);

        $r20 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.LZEncoder lz>;

        $i25 = virtualinvoke $r20.<org.tukaani.xz.lz.LZEncoder: int getByte(int,int)>($i5, 1);

        $r22 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder literalEncoder>;

        $i27 = i26 + $i5;

        $r21 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.State nextState>;

        $i28 = virtualinvoke $r22.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: int getPrice(int,int,int,int,org.tukaani.xz.lzma.State)>($i23, $i24, $i25, $i27, $r21);

        i57 = i56 + $i28;

        $r23 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.State nextState>;

        virtualinvoke $r23.<org.tukaani.xz.lzma.State: void updateLiteral()>();

        $i29 = i26 + $i5;

        $i31 = $i29 + 1;

        $i30 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int posMask>;

        i32 = $i31 & $i30;

        $r24 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.State nextState>;

        $i33 = virtualinvoke r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int getLongRepAndLenPrice(int,int,org.tukaani.xz.lzma.State,int)>(0, $i20, $r24, i32);

        i58 = i57 + $i33;

        $i34 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $i35 = $i34 + $i5;

        $i36 = $i35 + 1;

        i37 = $i36 + $i20;

     label08:
        $i38 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd>;

        if $i38 >= i37 goto label09;

        $r29 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i41 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd>;

        $i42 = $i41 + 1;

        r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd> = $i42;

        $r30 = $r29[$i42];

        virtualinvoke $r30.<org.tukaani.xz.lzma.Optimum: void reset()>();

        goto label08;

     label09:
        $r25 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r26 = $r25[i37];

        $i39 = $r26.<org.tukaani.xz.lzma.Optimum: int price>;

        if i58 >= $i39 goto label10;

        $r27 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r28 = $r27[i37];

        $i40 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        virtualinvoke $r28.<org.tukaani.xz.lzma.Optimum: void set3(int,int,int,int,int)>(i58, $i40, i53, $i5, 0);

     label10:
        i53 = i53 + 1;

        goto label01;

     label11:
        return i52;
    }

    private void calcNormalMatchPrices(int, int, int, int, int)
    {
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder $r31;
        org.tukaani.xz.lz.LZEncoder $r21, $r27, $r28, $r29;
        org.tukaani.xz.lzma.Optimum[] $r10, $r17, $r22, $r34, $r36, $r38, $r40, $r42;
        org.tukaani.xz.lz.Matches $r1, $r2, $r4, $r5, $r7, $r8, $r13, $r15, $r19, $r44, $r45, $r46, $r48, $r49, $r51, $r52;
        int[] $r3, $r6, $r9, $r14, $r16, $r20, $r47, $r50;
        org.tukaani.xz.lzma.State $r12, $r24, $r25, $r26, $r30, $r32, $r33;
        org.tukaani.xz.lzma.Optimum $r11, $r18, $r23, $r35, $r37, $r39, $r41, $r43;
        int $i0, $i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, $i15, $i16, $i17, i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, i35, $i36, $i37, $i38, $i39, $i40, i41, $i42, $i43, $i44, $i45, i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, i65, i66, i67, i68, $i69;
        org.tukaani.xz.lzma.LZMAEncoderNormal r0;

        r0 := @this: org.tukaani.xz.lzma.LZMAEncoderNormal;

        i35 := @parameter0: int;

        i18 := @parameter1: int;

        i2 := @parameter2: int;

        i14 := @parameter3: int;

        i6 := @parameter4: int;

        $r1 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $r3 = $r1.<org.tukaani.xz.lz.Matches: int[] len>;

        $r2 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $i0 = $r2.<org.tukaani.xz.lz.Matches: int count>;

        $i1 = $i0 - 1;

        $i3 = $r3[$i1];

        if $i3 <= i2 goto label03;

        $r44 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $r44.<org.tukaani.xz.lz.Matches: int count> = 0;

     label01:
        $r45 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $r47 = $r45.<org.tukaani.xz.lz.Matches: int[] len>;

        $r46 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $i59 = $r46.<org.tukaani.xz.lz.Matches: int count>;

        $i60 = $r47[$i59];

        if $i60 >= i2 goto label02;

        $r51 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $i63 = $r51.<org.tukaani.xz.lz.Matches: int count>;

        $i64 = $i63 + 1;

        $r51.<org.tukaani.xz.lz.Matches: int count> = $i64;

        goto label01;

     label02:
        $r48 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $r50 = $r48.<org.tukaani.xz.lz.Matches: int[] len>;

        $r49 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $i61 = $r49.<org.tukaani.xz.lz.Matches: int count>;

        $i62 = $i61 + 1;

        $r49.<org.tukaani.xz.lz.Matches: int count> = $i62;

        $r50[$i61] = i2;

     label03:
        $r4 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $r6 = $r4.<org.tukaani.xz.lz.Matches: int[] len>;

        $r5 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $i4 = $r5.<org.tukaani.xz.lz.Matches: int count>;

        $i5 = $i4 - 1;

        $i7 = $r6[$i5];

        if $i7 >= i6 goto label04;

        return;

     label04:
        $i13 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd>;

        $i11 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r7 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $r9 = $r7.<org.tukaani.xz.lz.Matches: int[] len>;

        $r8 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $i8 = $r8.<org.tukaani.xz.lz.Matches: int count>;

        $i9 = $i8 - 1;

        $i10 = $r9[$i9];

        $i12 = $i11 + $i10;

        if $i13 >= $i12 goto label05;

        $r42 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i57 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd>;

        $i58 = $i57 + 1;

        r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd> = $i58;

        $r43 = $r42[$i58];

        virtualinvoke $r43.<org.tukaani.xz.lzma.Optimum: void reset()>();

        goto label04;

     label05:
        $r10 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i15 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r11 = $r10[$i15];

        $r12 = $r11.<org.tukaani.xz.lzma.Optimum: org.tukaani.xz.lzma.State state>;

        $i16 = virtualinvoke r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int getNormalMatchPrice(int,org.tukaani.xz.lzma.State)>(i14, $r12);

        i65 = 0;

     label06:
        $r13 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $r14 = $r13.<org.tukaani.xz.lz.Matches: int[] len>;

        $i17 = $r14[i65];

        if i6 <= $i17 goto label07;

        i65 = i65 + 1;

        goto label06;

     label07:
        i66 = i6;

     label08:
        $r15 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $r16 = $r15.<org.tukaani.xz.lz.Matches: int[] dist>;

        $i30 = $r16[i65];

        $i19 = virtualinvoke r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int getMatchAndLenPrice(int,int,int,int)>($i16, $i30, i66, i18);

        $r17 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i20 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $i21 = $i20 + i66;

        $r18 = $r17[$i21];

        $i22 = $r18.<org.tukaani.xz.lzma.Optimum: int price>;

        if $i19 >= $i22 goto label09;

        $r40 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i53 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $i54 = $i53 + i66;

        $r41 = $r40[$i54];

        $i56 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $i55 = $i30 + 4;

        virtualinvoke $r41.<org.tukaani.xz.lzma.Optimum: void set1(int,int,int)>($i19, $i56, $i55);

     label09:
        $r19 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $r20 = $r19.<org.tukaani.xz.lz.Matches: int[] len>;

        $i23 = $r20[i65];

        if i66 == $i23 goto label10;

        goto label14;

     label10:
        $i26 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int niceLen>;

        $i24 = i2 - i66;

        $i25 = $i24 - 1;

        $i27 = staticinvoke <java.lang.Math: int min(int,int)>($i26, $i25);

        $r21 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.LZEncoder lz>;

        $i28 = i66 + 1;

        $i29 = virtualinvoke $r21.<org.tukaani.xz.lz.LZEncoder: int getMatchLen(int,int,int)>($i28, $i30, $i27);

        if $i29 < 2 goto label13;

        $r25 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.State nextState>;

        $r22 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i31 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r23 = $r22[$i31];

        $r24 = $r23.<org.tukaani.xz.lzma.Optimum: org.tukaani.xz.lzma.State state>;

        virtualinvoke $r25.<org.tukaani.xz.lzma.State: void set(org.tukaani.xz.lzma.State)>($r24);

        $r26 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.State nextState>;

        virtualinvoke $r26.<org.tukaani.xz.lzma.State: void updateMatch()>();

        $r27 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.LZEncoder lz>;

        $i32 = virtualinvoke $r27.<org.tukaani.xz.lz.LZEncoder: int getByte(int,int)>(i66, 0);

        $r28 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.LZEncoder lz>;

        $i33 = virtualinvoke $r28.<org.tukaani.xz.lz.LZEncoder: int getByte(int)>(0);

        $r29 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.LZEncoder lz>;

        $i34 = virtualinvoke $r29.<org.tukaani.xz.lz.LZEncoder: int getByte(int,int)>(i66, 1);

        $r31 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder literalEncoder>;

        $i36 = i35 + i66;

        $r30 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.State nextState>;

        $i37 = virtualinvoke $r31.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: int getPrice(int,int,int,int,org.tukaani.xz.lzma.State)>($i32, $i33, $i34, $i36, $r30);

        i67 = $i19 + $i37;

        $r32 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.State nextState>;

        virtualinvoke $r32.<org.tukaani.xz.lzma.State: void updateLiteral()>();

        $i38 = i35 + i66;

        $i40 = $i38 + 1;

        $i39 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int posMask>;

        i41 = $i40 & $i39;

        $r33 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.State nextState>;

        $i42 = virtualinvoke r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int getLongRepAndLenPrice(int,int,org.tukaani.xz.lzma.State,int)>(0, $i29, $r33, i41);

        i68 = i67 + $i42;

        $i43 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $i44 = $i43 + i66;

        $i45 = $i44 + 1;

        i46 = $i45 + $i29;

     label11:
        $i47 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd>;

        if $i47 >= i46 goto label12;

        $r38 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i51 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd>;

        $i52 = $i51 + 1;

        r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd> = $i52;

        $r39 = $r38[$i52];

        virtualinvoke $r39.<org.tukaani.xz.lzma.Optimum: void reset()>();

        goto label11;

     label12:
        $r34 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r35 = $r34[i46];

        $i48 = $r35.<org.tukaani.xz.lzma.Optimum: int price>;

        if i68 >= $i48 goto label13;

        $r36 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r37 = $r36[i46];

        $i50 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $i49 = $i30 + 4;

        virtualinvoke $r37.<org.tukaani.xz.lzma.Optimum: void set3(int,int,int,int,int)>(i68, $i50, $i49, i66, 0);

     label13:
        i65 = i65 + 1;

        $r52 = r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $i69 = $r52.<org.tukaani.xz.lz.Matches: int count>;

        if i65 != $i69 goto label14;

        goto label15;

     label14:
        i66 = i66 + 1;

        goto label08;

     label15:
        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        boolean $z0, $z1;

        <org.tukaani.xz.lzma.LZMAEncoderNormal: int OPTS> = 4096;

        $r0 = <org.tukaani.xz.lzma.LZMAEncoderNormal: java.lang.Class class$org$tukaani$xz$lzma$LZMAEncoderNormal>;

        if $r0 != null goto label1;

        $r1 = staticinvoke <org.tukaani.xz.lzma.LZMAEncoderNormal: java.lang.Class class$(java.lang.String)>("org.tukaani.xz.lzma.LZMAEncoderNormal");

        <org.tukaani.xz.lzma.LZMAEncoderNormal: java.lang.Class class$org$tukaani$xz$lzma$LZMAEncoderNormal> = $r1;

        goto label2;

     label1:
        $r1 = <org.tukaani.xz.lzma.LZMAEncoderNormal: java.lang.Class class$org$tukaani$xz$lzma$LZMAEncoderNormal>;

     label2:
        $z0 = virtualinvoke $r1.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        <org.tukaani.xz.lzma.LZMAEncoderNormal: boolean $assertionsDisabled> = $z1;

        <org.tukaani.xz.lzma.LZMAEncoderNormal: int EXTRA_SIZE_BEFORE> = 4096;

        <org.tukaani.xz.lzma.LZMAEncoderNormal: int EXTRA_SIZE_AFTER> = 4096;

        return;
    }
}
