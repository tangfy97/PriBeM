class bsh.BSHEnhancedForStatement extends bsh.SimpleNode implements bsh.ParserConstants
{
    java.lang.String varName;

    void <init>(int)
    {
        int i0;
        bsh.BSHEnhancedForStatement r0;

        r0 := @this: bsh.BSHEnhancedForStatement;

        i0 := @parameter0: int;

        specialinvoke r0.<bsh.SimpleNode: void <init>(int)>(i0);

        return;
    }

    public java.lang.Object eval(bsh.CallStack, bsh.Interpreter) throws bsh.EvalError
    {
        bsh.CollectionManager $r6;
        bsh.ReturnControl $r11;
        bsh.SimpleNode r4, r34, r35;
        boolean $z0, $z1, $z2, $z3, z4;
        bsh.BlockNameSpace $r36;
        bsh.Interpreter r5;
        bsh.BshIterator $r7;
        bsh.BSHEnhancedForStatement r2;
        bsh.Node $r3, $r22, $r24, $r25;
        bsh.NameSpace $r1;
        bsh.UtilEvalError $r26;
        bsh.CallStack r0;
        bsh.BSHType $r23;
        bsh.Modifiers $r14;
        java.lang.StringBuffer $r16, $r17, $r19, $r27, $r28, $r30;
        int $i0, $i1;
        java.lang.String $r8, $r12, $r20, $r29, $r31;
        bsh.EvalError $r15, $r21, $r32;
        bsh.Primitive $r38;
        java.lang.Object $r9, $r10, $r13, $r37, r39;
        java.lang.Class $r18, r33;

        r2 := @this: bsh.BSHEnhancedForStatement;

        r0 := @parameter0: bsh.CallStack;

        r5 := @parameter1: bsh.Interpreter;

        r33 = null;

        r34 = null;

        $r1 = virtualinvoke r0.<bsh.CallStack: bsh.NameSpace top()>();

        $r3 = virtualinvoke r2.<bsh.BSHEnhancedForStatement: bsh.Node jjtGetChild(int)>(0);

        r4 = (bsh.SimpleNode) $r3;

        $i0 = virtualinvoke r2.<bsh.BSHEnhancedForStatement: int jjtGetNumChildren()>();

        $z0 = r4 instanceof bsh.BSHType;

        if $z0 == 0 goto label01;

        $r23 = (bsh.BSHType) r4;

        r33 = virtualinvoke $r23.<bsh.BSHType: java.lang.Class getType(bsh.CallStack,bsh.Interpreter)>(r0, r5);

        $r24 = virtualinvoke r2.<bsh.BSHEnhancedForStatement: bsh.Node jjtGetChild(int)>(1);

        r35 = (bsh.SimpleNode) $r24;

        if $i0 <= 2 goto label02;

        $r25 = virtualinvoke r2.<bsh.BSHEnhancedForStatement: bsh.Node jjtGetChild(int)>(2);

        r34 = (bsh.SimpleNode) $r25;

        goto label02;

     label01:
        r35 = r4;

        if $i0 <= 1 goto label02;

        $r22 = virtualinvoke r2.<bsh.BSHEnhancedForStatement: bsh.Node jjtGetChild(int)>(1);

        r34 = (bsh.SimpleNode) $r22;

     label02:
        $r36 = new bsh.BlockNameSpace;

        specialinvoke $r36.<bsh.BlockNameSpace: void <init>(bsh.NameSpace)>($r1);

        virtualinvoke r0.<bsh.CallStack: bsh.NameSpace swap(bsh.NameSpace)>($r36);

        $r37 = virtualinvoke r35.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>(r0, r5);

        $r38 = <bsh.Primitive: bsh.Primitive NULL>;

        if $r37 != $r38 goto label03;

        $r21 = new bsh.EvalError;

        specialinvoke $r21.<bsh.EvalError: void <init>(java.lang.String,bsh.SimpleNode,bsh.CallStack)>("The collection, array, map, iterator, or enumeration portion of a for statement cannot be null.", r2, r0);

        throw $r21;

     label03:
        $r6 = staticinvoke <bsh.CollectionManager: bsh.CollectionManager getCollectionManager()>();

        $z1 = virtualinvoke $r6.<bsh.CollectionManager: boolean isBshIterable(java.lang.Object)>($r37);

        if $z1 != 0 goto label04;

        $r15 = new bsh.EvalError;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Can\'t iterate over type: ");

        $r18 = virtualinvoke $r37.<java.lang.Object: java.lang.Class getClass()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r15.<bsh.EvalError: void <init>(java.lang.String,bsh.SimpleNode,bsh.CallStack)>($r20, r2, r0);

        throw $r15;

     label04:
        $r7 = virtualinvoke $r6.<bsh.CollectionManager: bsh.BshIterator getBshIterator(java.lang.Object)>($r37);

        r39 = <bsh.Primitive: bsh.Primitive VOID>;

        goto label14;

     label05:
        if r33 == null goto label06;

        $r12 = r2.<bsh.BSHEnhancedForStatement: java.lang.String varName>;

        $r13 = interfaceinvoke $r7.<bsh.BshIterator: java.lang.Object next()>();

        $r14 = new bsh.Modifiers;

        specialinvoke $r14.<bsh.Modifiers: void <init>()>();

        virtualinvoke $r36.<bsh.BlockNameSpace: void setTypedVariable(java.lang.String,java.lang.Class,java.lang.Object,bsh.Modifiers)>($r12, r33, $r13, $r14);

        goto label07;

     label06:
        $r8 = r2.<bsh.BSHEnhancedForStatement: java.lang.String varName>;

        $r9 = interfaceinvoke $r7.<bsh.BshIterator: java.lang.Object next()>();

        virtualinvoke $r36.<bsh.BlockNameSpace: void setVariable(java.lang.String,java.lang.Object,boolean)>($r8, $r9, 0);

     label07:
        goto label09;

     label08:
        $r26 := @caughtexception;

        $r27 = new java.lang.StringBuffer;

        specialinvoke $r27.<java.lang.StringBuffer: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("for loop iterator variable:");

        $r29 = r2.<bsh.BSHEnhancedForStatement: java.lang.String varName>;

        $r30 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.String toString()>();

        $r32 = virtualinvoke $r26.<bsh.UtilEvalError: bsh.EvalError toEvalError(java.lang.String,bsh.SimpleNode,bsh.CallStack)>($r31, r2, r0);

        throw $r32;

     label09:
        z4 = 0;

        if r34 == null goto label13;

        $r10 = virtualinvoke r34.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>(r0, r5);

        $z3 = $r10 instanceof bsh.ReturnControl;

        if $z3 == 0 goto label13;

        $r11 = (bsh.ReturnControl) $r10;

        $i1 = $r11.<bsh.ReturnControl: int kind>;

        lookupswitch($i1)
        {
            case 12: goto label12;
            case 19: goto label11;
            case 46: goto label10;
            default: goto label13;
        };

     label10:
        r39 = $r10;

        z4 = 1;

        goto label13;

     label11:
        goto label13;

     label12:
        z4 = 1;

     label13:
        if z4 == 0 goto label14;

        goto label15;

     label14:
        $z2 = interfaceinvoke $r7.<bsh.BshIterator: boolean hasNext()>();

        if $z2 != 0 goto label05;

     label15:
        virtualinvoke r0.<bsh.CallStack: bsh.NameSpace swap(bsh.NameSpace)>($r1);

        return r39;

        catch bsh.UtilEvalError from label05 to label07 with label08;
    }
}
