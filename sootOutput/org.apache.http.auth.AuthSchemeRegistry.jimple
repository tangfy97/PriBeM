public final class org.apache.http.auth.AuthSchemeRegistry extends java.lang.Object
{
    private final java.util.concurrent.ConcurrentHashMap registeredSchemes;

    public void <init>()
    {
        java.util.concurrent.ConcurrentHashMap $r1;
        org.apache.http.auth.AuthSchemeRegistry r0;

        r0 := @this: org.apache.http.auth.AuthSchemeRegistry;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.apache.http.auth.AuthSchemeRegistry: java.util.concurrent.ConcurrentHashMap registeredSchemes> = $r1;

        return;
    }

    public void register(java.lang.String, org.apache.http.auth.AuthSchemeFactory)
    {
        java.util.concurrent.ConcurrentHashMap $r4;
        java.lang.IllegalArgumentException $r6, $r7;
        org.apache.http.auth.AuthSchemeRegistry r2;
        java.util.Locale $r3;
        org.apache.http.auth.AuthSchemeFactory r1;
        java.lang.String r0, $r5;

        r2 := @this: org.apache.http.auth.AuthSchemeRegistry;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.http.auth.AuthSchemeFactory;

        if r0 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Name may not be null");

        throw $r7;

     label1:
        if r1 != null goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Authentication scheme factory may not be null");

        throw $r6;

     label2:
        $r4 = r2.<org.apache.http.auth.AuthSchemeRegistry: java.util.concurrent.ConcurrentHashMap registeredSchemes>;

        $r3 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r5 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r3);

        virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r1);

        return;
    }

    public void unregister(java.lang.String)
    {
        java.util.Locale $r2;
        java.util.concurrent.ConcurrentHashMap $r3;
        java.lang.String r0, $r4;
        java.lang.IllegalArgumentException $r5;
        org.apache.http.auth.AuthSchemeRegistry r1;

        r1 := @this: org.apache.http.auth.AuthSchemeRegistry;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Name may not be null");

        throw $r5;

     label1:
        $r3 = r1.<org.apache.http.auth.AuthSchemeRegistry: java.util.concurrent.ConcurrentHashMap registeredSchemes>;

        $r2 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r2);

        virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>($r4);

        return;
    }

    public org.apache.http.auth.AuthScheme getAuthScheme(java.lang.String, org.apache.http.params.HttpParams) throws java.lang.IllegalStateException
    {
        java.lang.IllegalStateException $r7;
        java.util.concurrent.ConcurrentHashMap $r3;
        java.lang.IllegalArgumentException $r14;
        org.apache.http.auth.AuthSchemeRegistry r1;
        java.util.Locale $r2;
        org.apache.http.params.HttpParams r12;
        org.apache.http.auth.AuthSchemeFactory r6;
        org.apache.http.auth.AuthScheme $r13;
        java.lang.Object $r5;
        java.lang.StringBuilder $r8, $r9, $r10;
        java.lang.String r0, $r4, $r11;

        r1 := @this: org.apache.http.auth.AuthSchemeRegistry;

        r0 := @parameter0: java.lang.String;

        r12 := @parameter1: org.apache.http.params.HttpParams;

        if r0 != null goto label1;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Name may not be null");

        throw $r14;

     label1:
        $r3 = r1.<org.apache.http.auth.AuthSchemeRegistry: java.util.concurrent.ConcurrentHashMap registeredSchemes>;

        $r2 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r2);

        $r5 = virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r4);

        r6 = (org.apache.http.auth.AuthSchemeFactory) $r5;

        if r6 == null goto label2;

        $r13 = interfaceinvoke r6.<org.apache.http.auth.AuthSchemeFactory: org.apache.http.auth.AuthScheme newInstance(org.apache.http.params.HttpParams)>(r12);

        return $r13;

     label2:
        $r7 = new java.lang.IllegalStateException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported authentication scheme: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        throw $r7;
    }

    public java.util.List getSchemeNames()
    {
        java.util.concurrent.ConcurrentHashMap $r2;
        java.util.Set $r3;
        org.apache.http.auth.AuthSchemeRegistry r1;
        java.util.ArrayList $r0;

        r1 := @this: org.apache.http.auth.AuthSchemeRegistry;

        $r0 = new java.util.ArrayList;

        $r2 = r1.<org.apache.http.auth.AuthSchemeRegistry: java.util.concurrent.ConcurrentHashMap registeredSchemes>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.util.Set keySet()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        return $r0;
    }

    public void setItems(java.util.Map)
    {
        java.util.Map r0;
        java.util.concurrent.ConcurrentHashMap $r2, $r3;
        org.apache.http.auth.AuthSchemeRegistry r1;

        r1 := @this: org.apache.http.auth.AuthSchemeRegistry;

        r0 := @parameter0: java.util.Map;

        if r0 != null goto label1;

        return;

     label1:
        $r2 = r1.<org.apache.http.auth.AuthSchemeRegistry: java.util.concurrent.ConcurrentHashMap registeredSchemes>;

        virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void clear()>();

        $r3 = r1.<org.apache.http.auth.AuthSchemeRegistry: java.util.concurrent.ConcurrentHashMap registeredSchemes>;

        virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: void putAll(java.util.Map)>(r0);

        return;
    }
}
