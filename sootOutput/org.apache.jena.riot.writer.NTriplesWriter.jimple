public class org.apache.jena.riot.writer.NTriplesWriter extends org.apache.jena.riot.writer.WriterGraphRIOTBase
{
    private final org.apache.jena.riot.out.CharSpace charSpace;

    public static void write(java.io.OutputStream, java.util.Iterator)
    {
        java.io.OutputStream r0;
        org.apache.jena.riot.out.CharSpace $r2;
        java.util.Iterator r1;

        r0 := @parameter0: java.io.OutputStream;

        r1 := @parameter1: java.util.Iterator;

        $r2 = <org.apache.jena.riot.out.CharSpace: org.apache.jena.riot.out.CharSpace UTF8>;

        staticinvoke <org.apache.jena.riot.writer.NTriplesWriter: void write(java.io.OutputStream,java.util.Iterator,org.apache.jena.riot.out.CharSpace)>(r0, r1, $r2);

        return;
    }

    public static void write(java.io.OutputStream, java.util.Iterator, org.apache.jena.riot.out.CharSpace)
    {
        java.io.OutputStream r0;
        java.util.Iterator r3;
        org.apache.jena.riot.system.StreamRDF $r2;
        org.apache.jena.riot.out.CharSpace r1;

        r0 := @parameter0: java.io.OutputStream;

        r3 := @parameter1: java.util.Iterator;

        r1 := @parameter2: org.apache.jena.riot.out.CharSpace;

        $r2 = staticinvoke <org.apache.jena.riot.system.StreamRDFLib: org.apache.jena.riot.system.StreamRDF writer(java.io.OutputStream,org.apache.jena.riot.out.CharSpace)>(r0, r1);

        staticinvoke <org.apache.jena.riot.writer.NTriplesWriter: void write$(org.apache.jena.riot.system.StreamRDF,java.util.Iterator)>($r2, r3);

        return;
    }

    public static void write(java.io.Writer, java.util.Iterator)
    {
        java.io.Writer r0;
        org.apache.jena.riot.out.CharSpace $r2;
        java.util.Iterator r1;

        r0 := @parameter0: java.io.Writer;

        r1 := @parameter1: java.util.Iterator;

        $r2 = <org.apache.jena.riot.out.CharSpace: org.apache.jena.riot.out.CharSpace UTF8>;

        staticinvoke <org.apache.jena.riot.writer.NTriplesWriter: void write(java.io.Writer,java.util.Iterator,org.apache.jena.riot.out.CharSpace)>(r0, r1, $r2);

        return;
    }

    public static void write(java.io.Writer, java.util.Iterator, org.apache.jena.riot.out.CharSpace)
    {
        java.util.Iterator r3;
        java.io.Writer r0;
        org.apache.jena.riot.system.StreamRDF $r2;
        org.apache.jena.riot.out.CharSpace r1;

        r0 := @parameter0: java.io.Writer;

        r3 := @parameter1: java.util.Iterator;

        r1 := @parameter2: org.apache.jena.riot.out.CharSpace;

        $r2 = staticinvoke <org.apache.jena.riot.system.StreamRDFLib: org.apache.jena.riot.system.StreamRDF writer(java.io.Writer,org.apache.jena.riot.out.CharSpace)>(r0, r1);

        staticinvoke <org.apache.jena.riot.writer.NTriplesWriter: void write$(org.apache.jena.riot.system.StreamRDF,java.util.Iterator)>($r2, r3);

        return;
    }

    private static void write$(org.apache.jena.riot.system.StreamRDF, java.util.Iterator)
    {
        org.apache.jena.riot.system.StreamRDF r0;
        java.util.Iterator r1;

        r0 := @parameter0: org.apache.jena.riot.system.StreamRDF;

        r1 := @parameter1: java.util.Iterator;

        interfaceinvoke r0.<org.apache.jena.riot.system.StreamRDF: void start()>();

        staticinvoke <org.apache.jena.riot.system.StreamRDFLib: void triplesToStream(org.apache.jena.riot.system.StreamRDF,java.util.Iterator)>(r0, r1);

        interfaceinvoke r0.<org.apache.jena.riot.system.StreamRDF: void finish()>();

        return;
    }

    public void <init>()
    {
        org.apache.jena.riot.out.CharSpace $r1;
        org.apache.jena.riot.writer.NTriplesWriter r0;

        r0 := @this: org.apache.jena.riot.writer.NTriplesWriter;

        $r1 = <org.apache.jena.riot.out.CharSpace: org.apache.jena.riot.out.CharSpace UTF8>;

        specialinvoke r0.<org.apache.jena.riot.writer.NTriplesWriter: void <init>(org.apache.jena.riot.out.CharSpace)>($r1);

        return;
    }

    public void <init>(org.apache.jena.riot.out.CharSpace)
    {
        org.apache.jena.riot.out.CharSpace r1;
        org.apache.jena.riot.writer.NTriplesWriter r0;

        r0 := @this: org.apache.jena.riot.writer.NTriplesWriter;

        r1 := @parameter0: org.apache.jena.riot.out.CharSpace;

        specialinvoke r0.<org.apache.jena.riot.writer.WriterGraphRIOTBase: void <init>()>();

        r0.<org.apache.jena.riot.writer.NTriplesWriter: org.apache.jena.riot.out.CharSpace charSpace> = r1;

        return;
    }

    public org.apache.jena.riot.Lang getLang()
    {
        org.apache.jena.riot.Lang $r0;
        org.apache.jena.riot.writer.NTriplesWriter r1;

        r1 := @this: org.apache.jena.riot.writer.NTriplesWriter;

        $r0 = <org.apache.jena.riot.Lang: org.apache.jena.riot.Lang NTRIPLES>;

        return $r0;
    }

    public void write(java.io.Writer, com.hp.hpl.jena.graph.Graph, org.apache.jena.riot.system.PrefixMap, java.lang.String, com.hp.hpl.jena.sparql.util.Context)
    {
        org.apache.jena.atlas.io.AWriter $r7;
        org.apache.jena.riot.writer.WriterStreamRDFTuples $r5;
        org.apache.jena.riot.out.CharSpace $r3, $r4, $r8;
        com.hp.hpl.jena.sparql.util.Context r11;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r1;
        org.apache.jena.riot.system.PrefixMap r9;
        org.apache.jena.riot.writer.NTriplesWriter r2;
        java.io.Writer r6;
        java.lang.String r10;
        com.hp.hpl.jena.graph.Graph r0;

        r2 := @this: org.apache.jena.riot.writer.NTriplesWriter;

        r6 := @parameter0: java.io.Writer;

        r0 := @parameter1: com.hp.hpl.jena.graph.Graph;

        r9 := @parameter2: org.apache.jena.riot.system.PrefixMap;

        r10 := @parameter3: java.lang.String;

        r11 := @parameter4: com.hp.hpl.jena.sparql.util.Context;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(null, null, null);

        $r4 = r2.<org.apache.jena.riot.writer.NTriplesWriter: org.apache.jena.riot.out.CharSpace charSpace>;

        $r3 = <org.apache.jena.riot.out.CharSpace: org.apache.jena.riot.out.CharSpace UTF8>;

        if $r4 != $r3 goto label1;

        staticinvoke <org.apache.jena.riot.writer.NTriplesWriter: void write(java.io.Writer,java.util.Iterator)>(r6, $r1);

        goto label2;

     label1:
        $r5 = new org.apache.jena.riot.writer.WriterStreamRDFTuples;

        $r7 = staticinvoke <org.apache.jena.atlas.io.IO: org.apache.jena.atlas.io.AWriter wrap(java.io.Writer)>(r6);

        $r8 = <org.apache.jena.riot.out.CharSpace: org.apache.jena.riot.out.CharSpace ASCII>;

        specialinvoke $r5.<org.apache.jena.riot.writer.WriterStreamRDFTuples: void <init>(org.apache.jena.atlas.io.AWriter,org.apache.jena.riot.out.CharSpace)>($r7, $r8);

        staticinvoke <org.apache.jena.riot.writer.NTriplesWriter: void write$(org.apache.jena.riot.system.StreamRDF,java.util.Iterator)>($r5, $r1);

     label2:
        return;
    }

    public void write(java.io.OutputStream, com.hp.hpl.jena.graph.Graph, org.apache.jena.riot.system.PrefixMap, java.lang.String, com.hp.hpl.jena.sparql.util.Context)
    {
        java.io.OutputStream r6;
        org.apache.jena.atlas.io.AWriter $r7;
        org.apache.jena.riot.writer.WriterStreamRDFTuples $r5;
        org.apache.jena.riot.out.CharSpace $r3, $r4, $r8;
        com.hp.hpl.jena.sparql.util.Context r11;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r1;
        org.apache.jena.riot.system.PrefixMap r9;
        org.apache.jena.riot.writer.NTriplesWriter r2;
        java.lang.String r10;
        com.hp.hpl.jena.graph.Graph r0;

        r2 := @this: org.apache.jena.riot.writer.NTriplesWriter;

        r6 := @parameter0: java.io.OutputStream;

        r0 := @parameter1: com.hp.hpl.jena.graph.Graph;

        r9 := @parameter2: org.apache.jena.riot.system.PrefixMap;

        r10 := @parameter3: java.lang.String;

        r11 := @parameter4: com.hp.hpl.jena.sparql.util.Context;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(null, null, null);

        $r4 = r2.<org.apache.jena.riot.writer.NTriplesWriter: org.apache.jena.riot.out.CharSpace charSpace>;

        $r3 = <org.apache.jena.riot.out.CharSpace: org.apache.jena.riot.out.CharSpace UTF8>;

        if $r4 != $r3 goto label1;

        staticinvoke <org.apache.jena.riot.writer.NTriplesWriter: void write(java.io.OutputStream,java.util.Iterator)>(r6, $r1);

        goto label2;

     label1:
        $r5 = new org.apache.jena.riot.writer.WriterStreamRDFTuples;

        $r7 = staticinvoke <org.apache.jena.atlas.io.IO: org.apache.jena.atlas.io.AWriter wrapASCII(java.io.OutputStream)>(r6);

        $r8 = <org.apache.jena.riot.out.CharSpace: org.apache.jena.riot.out.CharSpace ASCII>;

        specialinvoke $r5.<org.apache.jena.riot.writer.WriterStreamRDFTuples: void <init>(org.apache.jena.atlas.io.AWriter,org.apache.jena.riot.out.CharSpace)>($r7, $r8);

        staticinvoke <org.apache.jena.riot.writer.NTriplesWriter: void write$(org.apache.jena.riot.system.StreamRDF,java.util.Iterator)>($r5, $r1);

     label2:
        return;
    }
}
