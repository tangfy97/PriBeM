public abstract class org.apache.poi.xslf.usermodel.XSLFSheet extends org.apache.poi.POIXMLDocumentPart implements org.apache.poi.xslf.usermodel.XSLFShapeContainer
{
    private org.apache.poi.xslf.usermodel.XSLFCommonSlideData _commonSlideData;
    private org.apache.poi.xslf.usermodel.XSLFDrawing _drawing;
    private java.util.List _shapes;
    private org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape _spTree;
    private java.util.List _placeholders;
    private java.util.Map _placeholderByIdMap;
    private java.util.Map _placeholderByTypeMap;

    public void <init>()
    {
        org.apache.poi.xslf.usermodel.XSLFSheet r0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSheet;

        specialinvoke r0.<org.apache.poi.POIXMLDocumentPart: void <init>()>();

        return;
    }

    public void <init>(org.apache.poi.openxml4j.opc.PackagePart, org.apache.poi.openxml4j.opc.PackageRelationship)
    {
        org.apache.poi.openxml4j.opc.PackagePart r1;
        org.apache.poi.xslf.usermodel.XSLFSheet r0;
        org.apache.poi.openxml4j.opc.PackageRelationship r2;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSheet;

        r1 := @parameter0: org.apache.poi.openxml4j.opc.PackagePart;

        r2 := @parameter1: org.apache.poi.openxml4j.opc.PackageRelationship;

        specialinvoke r0.<org.apache.poi.POIXMLDocumentPart: void <init>(org.apache.poi.openxml4j.opc.PackagePart,org.apache.poi.openxml4j.opc.PackageRelationship)>(r1, r2);

        return;
    }

    public org.apache.poi.xslf.usermodel.XMLSlideShow getSlideShow()
    {
        java.lang.IllegalStateException $r1;
        org.apache.poi.POIXMLDocumentPart r3;
        org.apache.poi.xslf.usermodel.XSLFSheet r0;
        org.apache.poi.xslf.usermodel.XMLSlideShow $r2;
        boolean $z0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSheet;

        r3 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.poi.POIXMLDocumentPart getParent()>();

     label1:
        if r3 == null goto label3;

        $z0 = r3 instanceof org.apache.poi.xslf.usermodel.XMLSlideShow;

        if $z0 == 0 goto label2;

        $r2 = (org.apache.poi.xslf.usermodel.XMLSlideShow) r3;

        return $r2;

     label2:
        r3 = virtualinvoke r3.<org.apache.poi.POIXMLDocumentPart: org.apache.poi.POIXMLDocumentPart getParent()>();

        goto label1;

     label3:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("SlideShow was not found");

        throw $r1;
    }

    protected java.util.List buildShapes(org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape)
    {
        org.openxmlformats.schemas.presentationml.x2006.main.CTPicture $r8;
        org.apache.poi.xslf.usermodel.XSLFGraphicFrame $r6;
        org.openxmlformats.schemas.presentationml.x2006.main.CTConnector $r10;
        java.util.ArrayList $r0;
        org.apache.poi.xslf.usermodel.XSLFGroupShape $r11;
        org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape r1, $r12;
        org.apache.poi.xslf.usermodel.XSLFSheet r4;
        org.openxmlformats.schemas.presentationml.x2006.main.CTShape $r13;
        int i0, i1;
        org.apache.xmlbeans.XmlObject r3;
        org.apache.poi.xslf.usermodel.XSLFConnectorShape $r9;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.poi.xslf.usermodel.XSLFAutoShape $r14;
        org.apache.poi.xslf.usermodel.XSLFPictureShape $r7;
        org.apache.xmlbeans.XmlObject[] $r2;
        org.openxmlformats.schemas.presentationml.x2006.main.CTGraphicalObjectFrame $r5;

        r4 := @this: org.apache.poi.xslf.usermodel.XSLFSheet;

        r1 := @parameter0: org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = interfaceinvoke r1.<org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape: org.apache.xmlbeans.XmlObject[] selectPath(java.lang.String)>("*");

        i0 = lengthof $r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label7;

        r3 = $r2[i1];

        $z0 = r3 instanceof org.openxmlformats.schemas.presentationml.x2006.main.CTShape;

        if $z0 == 0 goto label2;

        $r13 = (org.openxmlformats.schemas.presentationml.x2006.main.CTShape) r3;

        $r14 = staticinvoke <org.apache.poi.xslf.usermodel.XSLFAutoShape: org.apache.poi.xslf.usermodel.XSLFAutoShape create(org.openxmlformats.schemas.presentationml.x2006.main.CTShape,org.apache.poi.xslf.usermodel.XSLFSheet)>($r13, r4);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r14);

        goto label6;

     label2:
        $z1 = r3 instanceof org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape;

        if $z1 == 0 goto label3;

        $r11 = new org.apache.poi.xslf.usermodel.XSLFGroupShape;

        $r12 = (org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape) r3;

        specialinvoke $r11.<org.apache.poi.xslf.usermodel.XSLFGroupShape: void <init>(org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape,org.apache.poi.xslf.usermodel.XSLFSheet)>($r12, r4);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r11);

        goto label6;

     label3:
        $z2 = r3 instanceof org.openxmlformats.schemas.presentationml.x2006.main.CTConnector;

        if $z2 == 0 goto label4;

        $r9 = new org.apache.poi.xslf.usermodel.XSLFConnectorShape;

        $r10 = (org.openxmlformats.schemas.presentationml.x2006.main.CTConnector) r3;

        specialinvoke $r9.<org.apache.poi.xslf.usermodel.XSLFConnectorShape: void <init>(org.openxmlformats.schemas.presentationml.x2006.main.CTConnector,org.apache.poi.xslf.usermodel.XSLFSheet)>($r10, r4);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label6;

     label4:
        $z3 = r3 instanceof org.openxmlformats.schemas.presentationml.x2006.main.CTPicture;

        if $z3 == 0 goto label5;

        $r7 = new org.apache.poi.xslf.usermodel.XSLFPictureShape;

        $r8 = (org.openxmlformats.schemas.presentationml.x2006.main.CTPicture) r3;

        specialinvoke $r7.<org.apache.poi.xslf.usermodel.XSLFPictureShape: void <init>(org.openxmlformats.schemas.presentationml.x2006.main.CTPicture,org.apache.poi.xslf.usermodel.XSLFSheet)>($r8, r4);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label6;

     label5:
        $z4 = r3 instanceof org.openxmlformats.schemas.presentationml.x2006.main.CTGraphicalObjectFrame;

        if $z4 == 0 goto label6;

        $r5 = (org.openxmlformats.schemas.presentationml.x2006.main.CTGraphicalObjectFrame) r3;

        $r6 = staticinvoke <org.apache.poi.xslf.usermodel.XSLFGraphicFrame: org.apache.poi.xslf.usermodel.XSLFGraphicFrame create(org.openxmlformats.schemas.presentationml.x2006.main.CTGraphicalObjectFrame,org.apache.poi.xslf.usermodel.XSLFSheet)>($r5, r4);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r6);

     label6:
        i1 = i1 + 1;

        goto label1;

     label7:
        return $r0;
    }

    public abstract org.apache.xmlbeans.XmlObject getXmlObject();

    public org.apache.poi.xslf.usermodel.XSLFCommonSlideData getCommonSlideData()
    {
        org.apache.poi.xslf.usermodel.XSLFSheet r0;
        org.apache.poi.xslf.usermodel.XSLFCommonSlideData $r1;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSheet;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.poi.xslf.usermodel.XSLFCommonSlideData _commonSlideData>;

        return $r1;
    }

    protected void setCommonSlideData(org.openxmlformats.schemas.presentationml.x2006.main.CTCommonSlideData)
    {
        org.openxmlformats.schemas.presentationml.x2006.main.CTCommonSlideData r0;
        org.apache.poi.xslf.usermodel.XSLFSheet r1;
        org.apache.poi.xslf.usermodel.XSLFCommonSlideData $r2;

        r1 := @this: org.apache.poi.xslf.usermodel.XSLFSheet;

        r0 := @parameter0: org.openxmlformats.schemas.presentationml.x2006.main.CTCommonSlideData;

        if r0 != null goto label1;

        r1.<org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.poi.xslf.usermodel.XSLFCommonSlideData _commonSlideData> = null;

        goto label2;

     label1:
        $r2 = new org.apache.poi.xslf.usermodel.XSLFCommonSlideData;

        specialinvoke $r2.<org.apache.poi.xslf.usermodel.XSLFCommonSlideData: void <init>(org.openxmlformats.schemas.presentationml.x2006.main.CTCommonSlideData)>(r0);

        r1.<org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.poi.xslf.usermodel.XSLFCommonSlideData _commonSlideData> = $r2;

     label2:
        return;
    }

    private org.apache.poi.xslf.usermodel.XSLFDrawing getDrawing()
    {
        org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape $r4;
        org.apache.poi.xslf.usermodel.XSLFSheet r0;
        org.apache.poi.xslf.usermodel.XSLFDrawing $r1, $r2, $r3;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSheet;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.poi.xslf.usermodel.XSLFDrawing _drawing>;

        if $r1 != null goto label1;

        $r3 = new org.apache.poi.xslf.usermodel.XSLFDrawing;

        $r4 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSheet: org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape getSpTree()>();

        specialinvoke $r3.<org.apache.poi.xslf.usermodel.XSLFDrawing: void <init>(org.apache.poi.xslf.usermodel.XSLFSheet,org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape)>(r0, $r4);

        r0.<org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.poi.xslf.usermodel.XSLFDrawing _drawing> = $r3;

     label1:
        $r2 = r0.<org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.poi.xslf.usermodel.XSLFDrawing _drawing>;

        return $r2;
    }

    private java.util.List getShapeList()
    {
        java.util.List $r1, $r2, $r4;
        org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape $r3;
        org.apache.poi.xslf.usermodel.XSLFSheet r0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSheet;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFSheet: java.util.List _shapes>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSheet: org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape getSpTree()>();

        $r4 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSheet: java.util.List buildShapes(org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape)>($r3);

        r0.<org.apache.poi.xslf.usermodel.XSLFSheet: java.util.List _shapes> = $r4;

     label1:
        $r2 = r0.<org.apache.poi.xslf.usermodel.XSLFSheet: java.util.List _shapes>;

        return $r2;
    }

    public org.apache.poi.xslf.usermodel.XSLFAutoShape createAutoShape()
    {
        java.util.List $r1;
        org.apache.poi.xslf.usermodel.XSLFSheet r0;
        org.apache.poi.xslf.usermodel.XSLFAutoShape $r3;
        org.apache.poi.xslf.usermodel.XSLFDrawing $r2;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSheet;

        $r1 = specialinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSheet: java.util.List getShapeList()>();

        $r2 = specialinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.poi.xslf.usermodel.XSLFDrawing getDrawing()>();

        $r3 = virtualinvoke $r2.<org.apache.poi.xslf.usermodel.XSLFDrawing: org.apache.poi.xslf.usermodel.XSLFAutoShape createAutoShape()>();

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r3);

        return $r3;
    }

    public org.apache.poi.xslf.usermodel.XSLFFreeformShape createFreeform()
    {
        java.util.List $r1;
        org.apache.poi.xslf.usermodel.XSLFSheet r0;
        org.apache.poi.xslf.usermodel.XSLFFreeformShape $r3;
        org.apache.poi.xslf.usermodel.XSLFDrawing $r2;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSheet;

        $r1 = specialinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSheet: java.util.List getShapeList()>();

        $r2 = specialinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.poi.xslf.usermodel.XSLFDrawing getDrawing()>();

        $r3 = virtualinvoke $r2.<org.apache.poi.xslf.usermodel.XSLFDrawing: org.apache.poi.xslf.usermodel.XSLFFreeformShape createFreeform()>();

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r3);

        return $r3;
    }

    public org.apache.poi.xslf.usermodel.XSLFTextBox createTextBox()
    {
        org.apache.poi.xslf.usermodel.XSLFTextBox $r3;
        java.util.List $r1;
        org.apache.poi.xslf.usermodel.XSLFSheet r0;
        org.apache.poi.xslf.usermodel.XSLFDrawing $r2;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSheet;

        $r1 = specialinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSheet: java.util.List getShapeList()>();

        $r2 = specialinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.poi.xslf.usermodel.XSLFDrawing getDrawing()>();

        $r3 = virtualinvoke $r2.<org.apache.poi.xslf.usermodel.XSLFDrawing: org.apache.poi.xslf.usermodel.XSLFTextBox createTextBox()>();

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r3);

        return $r3;
    }

    public org.apache.poi.xslf.usermodel.XSLFConnectorShape createConnector()
    {
        java.util.List $r1;
        org.apache.poi.xslf.usermodel.XSLFSheet r0;
        org.apache.poi.xslf.usermodel.XSLFConnectorShape $r3;
        org.apache.poi.xslf.usermodel.XSLFDrawing $r2;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSheet;

        $r1 = specialinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSheet: java.util.List getShapeList()>();

        $r2 = specialinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.poi.xslf.usermodel.XSLFDrawing getDrawing()>();

        $r3 = virtualinvoke $r2.<org.apache.poi.xslf.usermodel.XSLFDrawing: org.apache.poi.xslf.usermodel.XSLFConnectorShape createConnector()>();

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r3);

        return $r3;
    }

    public org.apache.poi.xslf.usermodel.XSLFGroupShape createGroup()
    {
        org.apache.poi.xslf.usermodel.XSLFGroupShape $r3;
        java.util.List $r1;
        org.apache.poi.xslf.usermodel.XSLFSheet r0;
        org.apache.poi.xslf.usermodel.XSLFDrawing $r2;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSheet;

        $r1 = specialinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSheet: java.util.List getShapeList()>();

        $r2 = specialinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.poi.xslf.usermodel.XSLFDrawing getDrawing()>();

        $r3 = virtualinvoke $r2.<org.apache.poi.xslf.usermodel.XSLFDrawing: org.apache.poi.xslf.usermodel.XSLFGroupShape createGroup()>();

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r3);

        return $r3;
    }

    public org.apache.poi.xslf.usermodel.XSLFPictureShape createPicture(int)
    {
        org.apache.poi.xslf.usermodel.XSLFSheet r0;
        org.apache.poi.openxml4j.opc.PackagePart $r1, r11, $r12;
        org.apache.poi.openxml4j.opc.PackagePartName $r13;
        java.util.List $r9, $r23;
        org.apache.poi.openxml4j.opc.OPCPackage $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r25, $r26, $r27, $r28;
        java.util.regex.Pattern $r8;
        org.apache.poi.xslf.usermodel.XSLFDrawing $r20;
        org.apache.poi.openxml4j.opc.PackageRelationship $r17;
        org.apache.poi.xslf.usermodel.XSLFRelation $r14;
        int i0, $i1, $i2;
        java.lang.String $r7, $r16, $r18, $r21, $r29;
        java.lang.IllegalArgumentException $r24;
        org.apache.poi.xslf.usermodel.XSLFPictureShape $r22;
        org.apache.poi.openxml4j.opc.TargetMode $r15;
        java.lang.Object $r10;
        org.apache.poi.xslf.usermodel.XSLFPictureData $r19;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSheet;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.poi.openxml4j.opc.PackagePart getPackagePart()>();

        $r2 = virtualinvoke $r1.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.OPCPackage getPackage()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/ppt/media/image");

        $i1 = i0 + 1;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".*?");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r7);

        $r9 = virtualinvoke $r2.<org.apache.poi.openxml4j.opc.OPCPackage: java.util.List getPartsByName(java.util.regex.Pattern)>($r8);

        $i2 = interfaceinvoke $r9.<java.util.List: int size()>();

        if $i2 != 0 goto label1;

        $r24 = new java.lang.IllegalArgumentException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Picture with index=");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was not found");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r29);

        throw $r24;

     label1:
        $r10 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(0);

        r11 = (org.apache.poi.openxml4j.opc.PackagePart) $r10;

        $r12 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.poi.openxml4j.opc.PackagePart getPackagePart()>();

        $r13 = virtualinvoke r11.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackagePartName getPartName()>();

        $r15 = <org.apache.poi.openxml4j.opc.TargetMode: org.apache.poi.openxml4j.opc.TargetMode INTERNAL>;

        $r14 = <org.apache.poi.xslf.usermodel.XSLFRelation: org.apache.poi.xslf.usermodel.XSLFRelation IMAGES>;

        $r16 = virtualinvoke $r14.<org.apache.poi.xslf.usermodel.XSLFRelation: java.lang.String getRelation()>();

        $r17 = virtualinvoke $r12.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackageRelationship addRelationship(org.apache.poi.openxml4j.opc.PackagePartName,org.apache.poi.openxml4j.opc.TargetMode,java.lang.String)>($r13, $r15, $r16);

        $r18 = virtualinvoke $r17.<org.apache.poi.openxml4j.opc.PackageRelationship: java.lang.String getId()>();

        $r19 = new org.apache.poi.xslf.usermodel.XSLFPictureData;

        specialinvoke $r19.<org.apache.poi.xslf.usermodel.XSLFPictureData: void <init>(org.apache.poi.openxml4j.opc.PackagePart,org.apache.poi.openxml4j.opc.PackageRelationship)>(r11, $r17);

        virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSheet: void addRelation(java.lang.String,org.apache.poi.POIXMLDocumentPart)>($r18, $r19);

        $r20 = specialinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.poi.xslf.usermodel.XSLFDrawing getDrawing()>();

        $r21 = virtualinvoke $r17.<org.apache.poi.openxml4j.opc.PackageRelationship: java.lang.String getId()>();

        $r22 = virtualinvoke $r20.<org.apache.poi.xslf.usermodel.XSLFDrawing: org.apache.poi.xslf.usermodel.XSLFPictureShape createPicture(java.lang.String)>($r21);

        virtualinvoke $r22.<org.apache.poi.xslf.usermodel.XSLFPictureShape: void resize()>();

        $r23 = specialinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSheet: java.util.List getShapeList()>();

        interfaceinvoke $r23.<java.util.List: boolean add(java.lang.Object)>($r22);

        return $r22;
    }

    public org.apache.poi.xslf.usermodel.XSLFTable createTable()
    {
        org.apache.poi.xslf.usermodel.XSLFTable $r3;
        java.util.List $r1;
        org.apache.poi.xslf.usermodel.XSLFSheet r0;
        org.apache.poi.xslf.usermodel.XSLFDrawing $r2;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSheet;

        $r1 = specialinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSheet: java.util.List getShapeList()>();

        $r2 = specialinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.poi.xslf.usermodel.XSLFDrawing getDrawing()>();

        $r3 = virtualinvoke $r2.<org.apache.poi.xslf.usermodel.XSLFDrawing: org.apache.poi.xslf.usermodel.XSLFTable createTable()>();

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r3);

        return $r3;
    }

    public org.apache.poi.xslf.usermodel.XSLFShape[] getShapes()
    {
        java.util.List $r1, $r2;
        org.apache.poi.xslf.usermodel.XSLFShape[] $r3, $r5;
        java.lang.Object[] $r4;
        org.apache.poi.xslf.usermodel.XSLFSheet r0;
        int $i0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSheet;

        $r1 = specialinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSheet: java.util.List getShapeList()>();

        $r2 = r0.<org.apache.poi.xslf.usermodel.XSLFSheet: java.util.List _shapes>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $r3 = newarray (org.apache.poi.xslf.usermodel.XSLFShape)[$i0];

        $r4 = interfaceinvoke $r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (org.apache.poi.xslf.usermodel.XSLFShape[]) $r4;

        return $r5;
    }

    public java.util.Iterator iterator()
    {
        java.util.List $r1;
        org.apache.poi.xslf.usermodel.XSLFSheet r0;
        java.util.Iterator $r2;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSheet;

        $r1 = specialinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSheet: java.util.List getShapeList()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        return $r2;
    }

    public boolean removeShape(org.apache.poi.xslf.usermodel.XSLFShape)
    {
        org.apache.poi.xslf.usermodel.XSLFShape r0;
        org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape $r3;
        org.apache.poi.xslf.usermodel.XSLFSheet r2;
        org.apache.xmlbeans.XmlObject $r1;
        java.lang.String $r8;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalArgumentException $r4;
        java.util.List $r9, $r10, $r11, $r12;
        java.lang.StringBuilder $r5, $r6, $r7;

        r2 := @this: org.apache.poi.xslf.usermodel.XSLFSheet;

        r0 := @parameter0: org.apache.poi.xslf.usermodel.XSLFShape;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFShape: org.apache.xmlbeans.XmlObject getXmlObject()>();

        $r3 = virtualinvoke r2.<org.apache.poi.xslf.usermodel.XSLFSheet: org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape getSpTree()>();

        $z0 = $r1 instanceof org.openxmlformats.schemas.presentationml.x2006.main.CTShape;

        if $z0 == 0 goto label1;

        $r11 = interfaceinvoke $r3.<org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape: java.util.List getSpList()>();

        interfaceinvoke $r11.<java.util.List: boolean remove(java.lang.Object)>($r1);

        goto label4;

     label1:
        $z1 = $r1 instanceof org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape;

        if $z1 == 0 goto label2;

        $r10 = interfaceinvoke $r3.<org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape: java.util.List getGrpSpList()>();

        interfaceinvoke $r10.<java.util.List: boolean remove(java.lang.Object)>($r1);

        goto label4;

     label2:
        $z2 = $r1 instanceof org.openxmlformats.schemas.presentationml.x2006.main.CTConnector;

        if $z2 == 0 goto label3;

        $r9 = interfaceinvoke $r3.<org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape: java.util.List getCxnSpList()>();

        interfaceinvoke $r9.<java.util.List: boolean remove(java.lang.Object)>($r1);

        goto label4;

     label3:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported shape: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label4:
        $r12 = specialinvoke r2.<org.apache.poi.xslf.usermodel.XSLFSheet: java.util.List getShapeList()>();

        $z3 = interfaceinvoke $r12.<java.util.List: boolean remove(java.lang.Object)>(r0);

        return $z3;
    }

    public void clear()
    {
        org.apache.poi.xslf.usermodel.XSLFShape r2;
        org.apache.poi.xslf.usermodel.XSLFShape[] $r1;
        org.apache.poi.xslf.usermodel.XSLFSheet r0;
        int i0, i1;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSheet;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.poi.xslf.usermodel.XSLFShape[] getShapes()>();

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = $r1[i1];

        virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSheet: boolean removeShape(org.apache.poi.xslf.usermodel.XSLFShape)>(r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    protected abstract java.lang.String getRootElementName();

    protected org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape getSpTree()
    {
        java.lang.IllegalStateException $r7;
        org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape $r1, $r2, $r6;
        org.apache.poi.xslf.usermodel.XSLFSheet r0;
        org.apache.xmlbeans.XmlObject[] $r4;
        int $i0;
        org.apache.xmlbeans.XmlObject $r3, $r5;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSheet;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFSheet: org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape _spTree>;

        if $r1 != null goto label2;

        $r3 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.xmlbeans.XmlObject getXmlObject()>();

        $r4 = interfaceinvoke $r3.<org.apache.xmlbeans.XmlObject: org.apache.xmlbeans.XmlObject[] selectPath(java.lang.String)>("declare namespace p=\'http://schemas.openxmlformats.org/presentationml/2006/main\' .//*/p:spTree");

        $i0 = lengthof $r4;

        if $i0 != 0 goto label1;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("CTGroupShape was not found");

        throw $r7;

     label1:
        $r5 = $r4[0];

        $r6 = (org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape) $r5;

        r0.<org.apache.poi.xslf.usermodel.XSLFSheet: org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape _spTree> = $r6;

     label2:
        $r2 = r0.<org.apache.poi.xslf.usermodel.XSLFSheet: org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape _spTree>;

        return $r2;
    }

    protected final void commit() throws java.io.IOException
    {
        java.io.OutputStream $r9;
        java.util.HashMap $r2;
        org.apache.poi.xslf.usermodel.XSLFSheet r6;
        org.apache.xmlbeans.XmlOptions $r0, $r1;
        org.apache.poi.openxml4j.opc.PackagePart $r8;
        javax.xml.namespace.QName $r4, $r11;
        java.lang.String $r5, $r7;
        org.apache.xmlbeans.XmlObject $r10;
        org.apache.xmlbeans.SchemaType $r3;

        r6 := @this: org.apache.poi.xslf.usermodel.XSLFSheet;

        $r0 = new org.apache.xmlbeans.XmlOptions;

        $r1 = <org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.xmlbeans.XmlOptions DEFAULT_XML_OPTIONS>;

        specialinvoke $r0.<org.apache.xmlbeans.XmlOptions: void <init>(org.apache.xmlbeans.XmlOptions)>($r1);

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        $r3 = <org.openxmlformats.schemas.officeDocument.x2006.relationships.STRelationshipId: org.apache.xmlbeans.SchemaType type>;

        $r4 = interfaceinvoke $r3.<org.apache.xmlbeans.SchemaType: javax.xml.namespace.QName getName()>();

        $r5 = virtualinvoke $r4.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, "r");

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("http://schemas.openxmlformats.org/drawingml/2006/main", "a");

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("http://schemas.openxmlformats.org/presentationml/2006/main", "p");

        virtualinvoke $r0.<org.apache.xmlbeans.XmlOptions: org.apache.xmlbeans.XmlOptions setSaveSuggestedPrefixes(java.util.Map)>($r2);

        $r7 = virtualinvoke r6.<org.apache.poi.xslf.usermodel.XSLFSheet: java.lang.String getRootElementName()>();

        if $r7 == null goto label1;

        $r11 = new javax.xml.namespace.QName;

        specialinvoke $r11.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>("http://schemas.openxmlformats.org/presentationml/2006/main", $r7);

        virtualinvoke $r0.<org.apache.xmlbeans.XmlOptions: org.apache.xmlbeans.XmlOptions setSaveSyntheticDocumentElement(javax.xml.namespace.QName)>($r11);

     label1:
        $r8 = virtualinvoke r6.<org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.poi.openxml4j.opc.PackagePart getPackagePart()>();

        $r9 = virtualinvoke $r8.<org.apache.poi.openxml4j.opc.PackagePart: java.io.OutputStream getOutputStream()>();

        $r10 = virtualinvoke r6.<org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.xmlbeans.XmlObject getXmlObject()>();

        interfaceinvoke $r10.<org.apache.xmlbeans.XmlObject: void save(java.io.OutputStream,org.apache.xmlbeans.XmlOptions)>($r9, $r0);

        virtualinvoke $r9.<java.io.OutputStream: void close()>();

        return;
    }

    public org.apache.poi.xslf.usermodel.XSLFSheet importContent(org.apache.poi.xslf.usermodel.XSLFSheet)
    {
        org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape $r1, $r3;
        java.util.List $r4, $r5;
        org.apache.poi.xslf.usermodel.XSLFShape r7, r9;
        org.apache.poi.xslf.usermodel.XSLFSheet r0, r2;
        int $i0, i1;
        java.lang.Object $r6, $r8;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSheet;

        r2 := @parameter0: org.apache.poi.xslf.usermodel.XSLFSheet;

        r0.<org.apache.poi.xslf.usermodel.XSLFSheet: java.util.List _shapes> = null;

        r0.<org.apache.poi.xslf.usermodel.XSLFSheet: org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape _spTree> = null;

        r0.<org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.poi.xslf.usermodel.XSLFDrawing _drawing> = null;

        r0.<org.apache.poi.xslf.usermodel.XSLFSheet: org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape _spTree> = null;

        r0.<org.apache.poi.xslf.usermodel.XSLFSheet: java.util.List _placeholders> = null;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSheet: org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape getSpTree()>();

        $r3 = virtualinvoke r2.<org.apache.poi.xslf.usermodel.XSLFSheet: org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape getSpTree()>();

        interfaceinvoke $r1.<org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape: org.apache.xmlbeans.XmlObject set(org.apache.xmlbeans.XmlObject)>($r3);

        $r4 = specialinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSheet: java.util.List getShapeList()>();

        $r5 = specialinvoke r2.<org.apache.poi.xslf.usermodel.XSLFSheet: java.util.List getShapeList()>();

        i1 = 0;

     label1:
        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        if i1 >= $i0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i1);

        r7 = (org.apache.poi.xslf.usermodel.XSLFShape) $r6;

        $r8 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i1);

        r9 = (org.apache.poi.xslf.usermodel.XSLFShape) $r8;

        virtualinvoke r9.<org.apache.poi.xslf.usermodel.XSLFShape: void copy(org.apache.poi.xslf.usermodel.XSLFShape)>(r7);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public org.apache.poi.xslf.usermodel.XSLFSheet appendContent(org.apache.poi.xslf.usermodel.XSLFSheet)
    {
        org.openxmlformats.schemas.presentationml.x2006.main.CTPicture $r12;
        org.openxmlformats.schemas.presentationml.x2006.main.CTConnector $r13;
        org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape $r1, $r4, $r14;
        org.apache.poi.xslf.usermodel.XSLFShape r10, r17;
        org.apache.poi.xslf.usermodel.XSLFSheet r0, r3;
        org.openxmlformats.schemas.presentationml.x2006.main.CTShape $r15;
        int $i0, $i1, $i2, i3, i4, i5;
        org.apache.xmlbeans.XmlObject r16;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.List $r2, $r6, $r7;
        org.apache.xmlbeans.XmlObject[] $r5;
        java.lang.Object $r8, $r9;
        org.openxmlformats.schemas.presentationml.x2006.main.CTGraphicalObjectFrame $r11;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSheet;

        r3 := @parameter0: org.apache.poi.xslf.usermodel.XSLFSheet;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSheet: org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape getSpTree()>();

        $r2 = specialinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSheet: java.util.List getShapeList()>();

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $r4 = virtualinvoke r3.<org.apache.poi.xslf.usermodel.XSLFSheet: org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape getSpTree()>();

        $r5 = interfaceinvoke $r4.<org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape: org.apache.xmlbeans.XmlObject[] selectPath(java.lang.String)>("*");

        i3 = lengthof $r5;

        i4 = 0;

     label1:
        if i4 >= i3 goto label7;

        r16 = $r5[i4];

        $z0 = r16 instanceof org.openxmlformats.schemas.presentationml.x2006.main.CTShape;

        if $z0 == 0 goto label2;

        $r15 = interfaceinvoke $r1.<org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape: org.openxmlformats.schemas.presentationml.x2006.main.CTShape addNewSp()>();

        interfaceinvoke $r15.<org.openxmlformats.schemas.presentationml.x2006.main.CTShape: org.apache.xmlbeans.XmlObject set(org.apache.xmlbeans.XmlObject)>(r16);

        goto label6;

     label2:
        $z1 = r16 instanceof org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape;

        if $z1 == 0 goto label3;

        $r14 = interfaceinvoke $r1.<org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape: org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape addNewGrpSp()>();

        interfaceinvoke $r14.<org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape: org.apache.xmlbeans.XmlObject set(org.apache.xmlbeans.XmlObject)>(r16);

        goto label6;

     label3:
        $z2 = r16 instanceof org.openxmlformats.schemas.presentationml.x2006.main.CTConnector;

        if $z2 == 0 goto label4;

        $r13 = interfaceinvoke $r1.<org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape: org.openxmlformats.schemas.presentationml.x2006.main.CTConnector addNewCxnSp()>();

        interfaceinvoke $r13.<org.openxmlformats.schemas.presentationml.x2006.main.CTConnector: org.apache.xmlbeans.XmlObject set(org.apache.xmlbeans.XmlObject)>(r16);

        goto label6;

     label4:
        $z3 = r16 instanceof org.openxmlformats.schemas.presentationml.x2006.main.CTPicture;

        if $z3 == 0 goto label5;

        $r12 = interfaceinvoke $r1.<org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape: org.openxmlformats.schemas.presentationml.x2006.main.CTPicture addNewPic()>();

        interfaceinvoke $r12.<org.openxmlformats.schemas.presentationml.x2006.main.CTPicture: org.apache.xmlbeans.XmlObject set(org.apache.xmlbeans.XmlObject)>(r16);

        goto label6;

     label5:
        $z4 = r16 instanceof org.openxmlformats.schemas.presentationml.x2006.main.CTGraphicalObjectFrame;

        if $z4 == 0 goto label6;

        $r11 = interfaceinvoke $r1.<org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape: org.openxmlformats.schemas.presentationml.x2006.main.CTGraphicalObjectFrame addNewGraphicFrame()>();

        interfaceinvoke $r11.<org.openxmlformats.schemas.presentationml.x2006.main.CTGraphicalObjectFrame: org.apache.xmlbeans.XmlObject set(org.apache.xmlbeans.XmlObject)>(r16);

     label6:
        i4 = i4 + 1;

        goto label1;

     label7:
        r0.<org.apache.poi.xslf.usermodel.XSLFSheet: java.util.List _shapes> = null;

        r0.<org.apache.poi.xslf.usermodel.XSLFSheet: org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape _spTree> = null;

        r0.<org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.poi.xslf.usermodel.XSLFDrawing _drawing> = null;

        r0.<org.apache.poi.xslf.usermodel.XSLFSheet: org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape _spTree> = null;

        r0.<org.apache.poi.xslf.usermodel.XSLFSheet: java.util.List _placeholders> = null;

        $r6 = specialinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSheet: java.util.List getShapeList()>();

        $r7 = specialinvoke r3.<org.apache.poi.xslf.usermodel.XSLFSheet: java.util.List getShapeList()>();

        i5 = 0;

     label8:
        $i1 = interfaceinvoke $r7.<java.util.List: int size()>();

        if i5 >= $i1 goto label9;

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(i5);

        r17 = (org.apache.poi.xslf.usermodel.XSLFShape) $r8;

        $i2 = $i0 + i5;

        $r9 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>($i2);

        r10 = (org.apache.poi.xslf.usermodel.XSLFShape) $r9;

        virtualinvoke r10.<org.apache.poi.xslf.usermodel.XSLFShape: void copy(org.apache.poi.xslf.usermodel.XSLFShape)>(r17);

        i5 = i5 + 1;

        goto label8;

     label9:
        return r0;
    }

    org.apache.poi.xslf.usermodel.XSLFTheme getTheme()
    {
        org.apache.poi.xslf.usermodel.XSLFSheet r0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSheet;

        return null;
    }

    public abstract org.apache.poi.xslf.usermodel.XSLFSheet getMasterSheet();

    protected org.apache.poi.xslf.usermodel.XSLFTextShape getTextShapeByType(org.apache.poi.xslf.usermodel.Placeholder)
    {
        org.apache.poi.xslf.usermodel.XSLFShape[] $r1;
        org.apache.poi.xslf.usermodel.Placeholder $r4, r5;
        org.apache.poi.xslf.usermodel.XSLFShape r2;
        org.apache.poi.xslf.usermodel.XSLFSheet r0;
        int i0, i1;
        org.apache.poi.xslf.usermodel.XSLFTextShape r3;
        boolean $z0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSheet;

        r5 := @parameter0: org.apache.poi.xslf.usermodel.Placeholder;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.poi.xslf.usermodel.XSLFShape[] getShapes()>();

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = $r1[i1];

        $z0 = r2 instanceof org.apache.poi.xslf.usermodel.XSLFTextShape;

        if $z0 == 0 goto label2;

        r3 = (org.apache.poi.xslf.usermodel.XSLFTextShape) r2;

        $r4 = virtualinvoke r3.<org.apache.poi.xslf.usermodel.XSLFTextShape: org.apache.poi.xslf.usermodel.Placeholder getTextType()>();

        if $r4 != r5 goto label2;

        return r3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return null;
    }

    org.apache.poi.xslf.usermodel.XSLFSimpleShape getPlaceholder(org.openxmlformats.schemas.presentationml.x2006.main.CTPlaceholder)
    {
        org.openxmlformats.schemas.presentationml.x2006.main.CTPlaceholder r0;
        long $l1;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r3;
        org.apache.poi.xslf.usermodel.XSLFSheet r1;
        int $i0, $i2;
        org.openxmlformats.schemas.presentationml.x2006.main.STPlaceholderType$Enum $r2;
        boolean $z0, $z1;

        r1 := @this: org.apache.poi.xslf.usermodel.XSLFSheet;

        r0 := @parameter0: org.openxmlformats.schemas.presentationml.x2006.main.CTPlaceholder;

        r3 = null;

        $z0 = interfaceinvoke r0.<org.openxmlformats.schemas.presentationml.x2006.main.CTPlaceholder: boolean isSetIdx()>();

        if $z0 == 0 goto label1;

        $l1 = interfaceinvoke r0.<org.openxmlformats.schemas.presentationml.x2006.main.CTPlaceholder: long getIdx()>();

        $i2 = (int) $l1;

        r3 = virtualinvoke r1.<org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.poi.xslf.usermodel.XSLFSimpleShape getPlaceholderById(int)>($i2);

     label1:
        if r3 != null goto label2;

        $z1 = interfaceinvoke r0.<org.openxmlformats.schemas.presentationml.x2006.main.CTPlaceholder: boolean isSetType()>();

        if $z1 == 0 goto label2;

        $r2 = interfaceinvoke r0.<org.openxmlformats.schemas.presentationml.x2006.main.CTPlaceholder: org.openxmlformats.schemas.presentationml.x2006.main.STPlaceholderType$Enum getType()>();

        $i0 = virtualinvoke $r2.<org.openxmlformats.schemas.presentationml.x2006.main.STPlaceholderType$Enum: int intValue()>();

        r3 = virtualinvoke r1.<org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.poi.xslf.usermodel.XSLFSimpleShape getPlaceholderByType(int)>($i0);

     label2:
        return r3;
    }

    void initPlaceholders()
    {
        java.util.HashMap $r3, $r4;
        long $l2;
        java.lang.Integer $r12, $r14;
        java.util.ArrayList $r2;
        org.apache.poi.xslf.usermodel.XSLFShape r6;
        org.apache.poi.xslf.usermodel.XSLFSheet r0;
        java.util.Map $r10, $r13;
        int i0, $i1, i3, i4;
        org.openxmlformats.schemas.presentationml.x2006.main.STPlaceholderType$Enum $r11;
        org.apache.poi.xslf.usermodel.XSLFTextShape r7;
        boolean $z0, $z1, $z2;
        org.apache.poi.xslf.usermodel.XSLFShape[] $r5;
        org.openxmlformats.schemas.presentationml.x2006.main.CTPlaceholder $r8;
        java.util.List $r1, $r9;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSheet;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFSheet: java.util.List _placeholders>;

        if $r1 != null goto label4;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.poi.xslf.usermodel.XSLFSheet: java.util.List _placeholders> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.apache.poi.xslf.usermodel.XSLFSheet: java.util.Map _placeholderByIdMap> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<org.apache.poi.xslf.usermodel.XSLFSheet: java.util.Map _placeholderByTypeMap> = $r4;

        $r5 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.poi.xslf.usermodel.XSLFShape[] getShapes()>();

        i0 = lengthof $r5;

        i4 = 0;

     label1:
        if i4 >= i0 goto label4;

        r6 = $r5[i4];

        $z0 = r6 instanceof org.apache.poi.xslf.usermodel.XSLFTextShape;

        if $z0 == 0 goto label3;

        r7 = (org.apache.poi.xslf.usermodel.XSLFTextShape) r6;

        $r8 = virtualinvoke r7.<org.apache.poi.xslf.usermodel.XSLFTextShape: org.openxmlformats.schemas.presentationml.x2006.main.CTPlaceholder getCTPlaceholder()>();

        if $r8 == null goto label3;

        $r9 = r0.<org.apache.poi.xslf.usermodel.XSLFSheet: java.util.List _placeholders>;

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>(r7);

        $z1 = interfaceinvoke $r8.<org.openxmlformats.schemas.presentationml.x2006.main.CTPlaceholder: boolean isSetIdx()>();

        if $z1 == 0 goto label2;

        $l2 = interfaceinvoke $r8.<org.openxmlformats.schemas.presentationml.x2006.main.CTPlaceholder: long getIdx()>();

        i3 = (int) $l2;

        $r13 = r0.<org.apache.poi.xslf.usermodel.XSLFSheet: java.util.Map _placeholderByIdMap>;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, r7);

     label2:
        $z2 = interfaceinvoke $r8.<org.openxmlformats.schemas.presentationml.x2006.main.CTPlaceholder: boolean isSetType()>();

        if $z2 == 0 goto label3;

        $r10 = r0.<org.apache.poi.xslf.usermodel.XSLFSheet: java.util.Map _placeholderByTypeMap>;

        $r11 = interfaceinvoke $r8.<org.openxmlformats.schemas.presentationml.x2006.main.CTPlaceholder: org.openxmlformats.schemas.presentationml.x2006.main.STPlaceholderType$Enum getType()>();

        $i1 = virtualinvoke $r11.<org.openxmlformats.schemas.presentationml.x2006.main.STPlaceholderType$Enum: int intValue()>();

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, r7);

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        return;
    }

    org.apache.poi.xslf.usermodel.XSLFSimpleShape getPlaceholderById(int)
    {
        org.apache.poi.xslf.usermodel.XSLFSimpleShape $r4;
        org.apache.poi.xslf.usermodel.XSLFSheet r0;
        java.util.Map $r1;
        int i0;
        java.lang.Object $r3;
        java.lang.Integer $r2;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSheet;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSheet: void initPlaceholders()>();

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFSheet: java.util.Map _placeholderByIdMap>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r4 = (org.apache.poi.xslf.usermodel.XSLFSimpleShape) $r3;

        return $r4;
    }

    org.apache.poi.xslf.usermodel.XSLFSimpleShape getPlaceholderByType(int)
    {
        org.apache.poi.xslf.usermodel.XSLFSimpleShape $r4;
        org.apache.poi.xslf.usermodel.XSLFSheet r0;
        java.util.Map $r1;
        int i0;
        java.lang.Object $r3;
        java.lang.Integer $r2;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSheet;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSheet: void initPlaceholders()>();

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFSheet: java.util.Map _placeholderByTypeMap>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r4 = (org.apache.poi.xslf.usermodel.XSLFSimpleShape) $r3;

        return $r4;
    }

    public org.apache.poi.xslf.usermodel.XSLFTextShape getPlaceholder(int)
    {
        java.util.List $r1;
        org.apache.poi.xslf.usermodel.XSLFSheet r0;
        int i0;
        java.lang.Object $r2;
        org.apache.poi.xslf.usermodel.XSLFTextShape $r3;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSheet;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSheet: void initPlaceholders()>();

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFSheet: java.util.List _placeholders>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (org.apache.poi.xslf.usermodel.XSLFTextShape) $r2;

        return $r3;
    }

    public org.apache.poi.xslf.usermodel.XSLFTextShape[] getPlaceholders()
    {
        java.util.List $r1, $r2;
        java.lang.Object[] $r4;
        org.apache.poi.xslf.usermodel.XSLFSheet r0;
        int $i0;
        org.apache.poi.xslf.usermodel.XSLFTextShape[] $r3, $r5;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSheet;

        virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSheet: void initPlaceholders()>();

        $r2 = r0.<org.apache.poi.xslf.usermodel.XSLFSheet: java.util.List _placeholders>;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFSheet: java.util.List _placeholders>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r3 = newarray (org.apache.poi.xslf.usermodel.XSLFTextShape)[$i0];

        $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (org.apache.poi.xslf.usermodel.XSLFTextShape[]) $r4;

        return $r5;
    }

    protected boolean canDraw(org.apache.poi.xslf.usermodel.XSLFShape)
    {
        org.apache.poi.xslf.usermodel.XSLFShape r1;
        org.apache.poi.xslf.usermodel.XSLFSheet r0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSheet;

        r1 := @parameter0: org.apache.poi.xslf.usermodel.XSLFShape;

        return 1;
    }

    public boolean getFollowMasterGraphics()
    {
        org.apache.poi.xslf.usermodel.XSLFSheet r0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSheet;

        return 0;
    }

    public org.apache.poi.xslf.usermodel.XSLFBackground getBackground()
    {
        org.apache.poi.xslf.usermodel.XSLFSheet r0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSheet;

        return null;
    }

    public void draw(java.awt.Graphics2D)
    {
        org.apache.poi.xslf.usermodel.XSLFRenderingHint $r6, $r8, $r10;
        org.apache.poi.xslf.usermodel.XSLFShape r4;
        org.apache.poi.xslf.usermodel.XSLFSheet r0, $r1;
        java.awt.Graphics2D r2;
        java.lang.Boolean $r7, $r9;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r13;
        java.awt.geom.AffineTransform $r5, $r11;
        java.util.List $r12;
        java.lang.Object $r3;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSheet;

        r2 := @parameter0: java.awt.Graphics2D;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.poi.xslf.usermodel.XSLFSheet getMasterSheet()>();

        $z0 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSheet: boolean getFollowMasterGraphics()>();

        if $z0 == 0 goto label1;

        if $r1 == null goto label1;

        virtualinvoke $r1.<org.apache.poi.xslf.usermodel.XSLFSheet: void draw(java.awt.Graphics2D)>(r2);

     label1:
        $r10 = <org.apache.poi.xslf.usermodel.XSLFRenderingHint: org.apache.poi.xslf.usermodel.XSLFRenderingHint GROUP_TRANSFORM>;

        $r11 = new java.awt.geom.AffineTransform;

        specialinvoke $r11.<java.awt.geom.AffineTransform: void <init>()>();

        virtualinvoke r2.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r10, $r11);

        $r12 = specialinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSheet: java.util.List getShapeList()>();

        $r13 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r3 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.poi.xslf.usermodel.XSLFShape) $r3;

        $z1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSheet: boolean canDraw(org.apache.poi.xslf.usermodel.XSLFShape)>(r4);

        if $z1 != 0 goto label3;

        goto label2;

     label3:
        $r5 = virtualinvoke r2.<java.awt.Graphics2D: java.awt.geom.AffineTransform getTransform()>();

        $r6 = <org.apache.poi.xslf.usermodel.XSLFRenderingHint: org.apache.poi.xslf.usermodel.XSLFRenderingHint GSAVE>;

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke r2.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r6, $r7);

        virtualinvoke r4.<org.apache.poi.xslf.usermodel.XSLFShape: void applyTransform(java.awt.Graphics2D)>(r2);

        virtualinvoke r4.<org.apache.poi.xslf.usermodel.XSLFShape: void draw(java.awt.Graphics2D)>(r2);

        virtualinvoke r2.<java.awt.Graphics2D: void setTransform(java.awt.geom.AffineTransform)>($r5);

        $r8 = <org.apache.poi.xslf.usermodel.XSLFRenderingHint: org.apache.poi.xslf.usermodel.XSLFRenderingHint GRESTORE>;

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke r2.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r8, $r9);

        goto label2;

     label4:
        return;
    }

    java.lang.String importBlip(java.lang.String, org.apache.poi.openxml4j.opc.PackagePart)
    {
        byte[] $r7;
        org.apache.poi.openxml4j.opc.PackageRelationship $r2, $r16;
        org.apache.poi.xslf.usermodel.XSLFSheet r5;
        int $i0, $i1;
        org.apache.poi.openxml4j.opc.PackagePart r0, $r3, $r11, $r12;
        java.lang.String r1, $r15, $r17, $r19;
        org.apache.poi.POIXMLException $r21;
        org.apache.poi.openxml4j.exceptions.InvalidFormatException $r20;
        org.apache.poi.openxml4j.opc.PackagePartName $r13;
        org.apache.poi.xslf.usermodel.XMLSlideShow $r6;
        java.util.List $r8;
        org.apache.poi.openxml4j.opc.TargetMode $r14;
        java.lang.Object $r9;
        org.apache.poi.xslf.usermodel.XSLFPictureData $r4, $r10, $r18;

        r5 := @this: org.apache.poi.xslf.usermodel.XSLFSheet;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: org.apache.poi.openxml4j.opc.PackagePart;

        $r2 = virtualinvoke r0.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackageRelationship getRelationship(java.lang.String)>(r1);

     label1:
        $r3 = virtualinvoke r0.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackagePart getRelatedPart(org.apache.poi.openxml4j.opc.PackageRelationship)>($r2);

     label2:
        goto label4;

     label3:
        $r20 := @caughtexception;

        $r21 = new org.apache.poi.POIXMLException;

        specialinvoke $r21.<org.apache.poi.POIXMLException: void <init>(java.lang.Throwable)>($r20);

        throw $r21;

     label4:
        $r4 = new org.apache.poi.xslf.usermodel.XSLFPictureData;

        specialinvoke $r4.<org.apache.poi.xslf.usermodel.XSLFPictureData: void <init>(org.apache.poi.openxml4j.opc.PackagePart,org.apache.poi.openxml4j.opc.PackageRelationship)>($r3, null);

        $r6 = virtualinvoke r5.<org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.poi.xslf.usermodel.XMLSlideShow getSlideShow()>();

        $r7 = virtualinvoke $r4.<org.apache.poi.xslf.usermodel.XSLFPictureData: byte[] getData()>();

        $i0 = virtualinvoke $r4.<org.apache.poi.xslf.usermodel.XSLFPictureData: int getPictureType()>();

        $i1 = virtualinvoke $r6.<org.apache.poi.xslf.usermodel.XMLSlideShow: int addPicture(byte[],int)>($r7, $i0);

        $r8 = virtualinvoke $r6.<org.apache.poi.xslf.usermodel.XMLSlideShow: java.util.List getAllPictures()>();

        $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>($i1);

        $r10 = (org.apache.poi.xslf.usermodel.XSLFPictureData) $r9;

        $r11 = virtualinvoke $r10.<org.apache.poi.xslf.usermodel.XSLFPictureData: org.apache.poi.openxml4j.opc.PackagePart getPackagePart()>();

        $r12 = virtualinvoke r5.<org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.poi.openxml4j.opc.PackagePart getPackagePart()>();

        $r13 = virtualinvoke $r11.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackagePartName getPartName()>();

        $r14 = <org.apache.poi.openxml4j.opc.TargetMode: org.apache.poi.openxml4j.opc.TargetMode INTERNAL>;

        $r15 = virtualinvoke $r2.<org.apache.poi.openxml4j.opc.PackageRelationship: java.lang.String getRelationshipType()>();

        $r16 = virtualinvoke $r12.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackageRelationship addRelationship(org.apache.poi.openxml4j.opc.PackagePartName,org.apache.poi.openxml4j.opc.TargetMode,java.lang.String)>($r13, $r14, $r15);

        $r17 = virtualinvoke $r16.<org.apache.poi.openxml4j.opc.PackageRelationship: java.lang.String getId()>();

        $r18 = new org.apache.poi.xslf.usermodel.XSLFPictureData;

        specialinvoke $r18.<org.apache.poi.xslf.usermodel.XSLFPictureData: void <init>(org.apache.poi.openxml4j.opc.PackagePart,org.apache.poi.openxml4j.opc.PackageRelationship)>($r11, $r16);

        virtualinvoke r5.<org.apache.poi.xslf.usermodel.XSLFSheet: void addRelation(java.lang.String,org.apache.poi.POIXMLDocumentPart)>($r17, $r18);

        $r19 = virtualinvoke $r16.<org.apache.poi.openxml4j.opc.PackageRelationship: java.lang.String getId()>();

        return $r19;

        catch org.apache.poi.openxml4j.exceptions.InvalidFormatException from label1 to label2 with label3;
    }

    org.apache.poi.openxml4j.opc.PackagePart importPart(org.apache.poi.openxml4j.opc.PackageRelationship, org.apache.poi.openxml4j.opc.PackagePart)
    {
        org.apache.poi.openxml4j.opc.PackageRelationship r9;
        org.apache.poi.xslf.usermodel.XSLFSheet r0;
        org.apache.poi.openxml4j.opc.PackagePart $r1, r3, $r6, $r7, $r14;
        java.lang.String $r11, $r13;
        org.apache.poi.POIXMLException $r18;
        boolean $z0;
        java.io.OutputStream $r15;
        org.apache.poi.openxml4j.opc.PackagePartName $r4, $r5, $r8, $r12;
        java.io.IOException $r17;
        org.apache.poi.openxml4j.opc.TargetMode $r10;
        org.apache.poi.openxml4j.opc.OPCPackage $r2;
        java.io.InputStream $r16;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSheet;

        r9 := @parameter0: org.apache.poi.openxml4j.opc.PackageRelationship;

        r3 := @parameter1: org.apache.poi.openxml4j.opc.PackagePart;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.poi.openxml4j.opc.PackagePart getPackagePart()>();

        $r2 = virtualinvoke $r1.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.OPCPackage getPackage()>();

        $r4 = virtualinvoke r3.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackagePartName getPartName()>();

        $z0 = virtualinvoke $r2.<org.apache.poi.openxml4j.opc.OPCPackage: boolean containPart(org.apache.poi.openxml4j.opc.PackagePartName)>($r4);

        if $z0 != 0 goto label5;

        $r7 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.poi.openxml4j.opc.PackagePart getPackagePart()>();

        $r8 = virtualinvoke r3.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackagePartName getPartName()>();

        $r10 = <org.apache.poi.openxml4j.opc.TargetMode: org.apache.poi.openxml4j.opc.TargetMode INTERNAL>;

        $r11 = virtualinvoke r9.<org.apache.poi.openxml4j.opc.PackageRelationship: java.lang.String getRelationshipType()>();

        virtualinvoke $r7.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackageRelationship addRelationship(org.apache.poi.openxml4j.opc.PackagePartName,org.apache.poi.openxml4j.opc.TargetMode,java.lang.String)>($r8, $r10, $r11);

        $r12 = virtualinvoke r3.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackagePartName getPartName()>();

        $r13 = virtualinvoke r3.<org.apache.poi.openxml4j.opc.PackagePart: java.lang.String getContentType()>();

        $r14 = virtualinvoke $r2.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackagePart createPart(org.apache.poi.openxml4j.opc.PackagePartName,java.lang.String)>($r12, $r13);

        $r15 = virtualinvoke $r14.<org.apache.poi.openxml4j.opc.PackagePart: java.io.OutputStream getOutputStream()>();

     label1:
        $r16 = virtualinvoke r3.<org.apache.poi.openxml4j.opc.PackagePart: java.io.InputStream getInputStream()>();

        staticinvoke <org.apache.poi.util.IOUtils: void copy(java.io.InputStream,java.io.OutputStream)>($r16, $r15);

        virtualinvoke $r15.<java.io.OutputStream: void close()>();

     label2:
        goto label4;

     label3:
        $r17 := @caughtexception;

        $r18 = new org.apache.poi.POIXMLException;

        specialinvoke $r18.<org.apache.poi.POIXMLException: void <init>(java.lang.Throwable)>($r17);

        throw $r18;

     label4:
        return $r14;

     label5:
        $r5 = virtualinvoke r3.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackagePartName getPartName()>();

        $r6 = virtualinvoke $r2.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackagePart getPart(org.apache.poi.openxml4j.opc.PackagePartName)>($r5);

        return $r6;

        catch java.io.IOException from label1 to label2 with label3;
    }
}
