abstract class org.springframework.util.xml.AbstractXMLStreamReader extends java.lang.Object implements javax.xml.stream.XMLStreamReader
{

    void <init>()
    {
        org.springframework.util.xml.AbstractXMLStreamReader r0;

        r0 := @this: org.springframework.util.xml.AbstractXMLStreamReader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.String getElementText() throws javax.xml.stream.XMLStreamException
    {
        org.springframework.util.xml.AbstractXMLStreamReader r0;
        javax.xml.stream.XMLStreamException $r2, $r7, $r9, $r12;
        int $i0, i1;
        java.lang.String $r5, $r11, $r14;
        javax.xml.stream.Location $r6, $r8, $r10, $r13;
        java.lang.StringBuilder $r1, $r3, $r4;

        r0 := @this: org.springframework.util.xml.AbstractXMLStreamReader;

        $i0 = virtualinvoke r0.<org.springframework.util.xml.AbstractXMLStreamReader: int getEventType()>();

        if $i0 == 1 goto label1;

        $r12 = new javax.xml.stream.XMLStreamException;

        $r13 = virtualinvoke r0.<org.springframework.util.xml.AbstractXMLStreamReader: javax.xml.stream.Location getLocation()>();

        specialinvoke $r12.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String,javax.xml.stream.Location)>("parser must be on START_ELEMENT to read next text", $r13);

        throw $r12;

     label1:
        i1 = virtualinvoke r0.<org.springframework.util.xml.AbstractXMLStreamReader: int next()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        goto label8;

     label2:
        if i1 == 4 goto label3;

        if i1 == 12 goto label3;

        if i1 == 6 goto label3;

        if i1 != 9 goto label4;

     label3:
        $r14 = virtualinvoke r0.<org.springframework.util.xml.AbstractXMLStreamReader: java.lang.String getText()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        goto label7;

     label4:
        if i1 == 3 goto label7;

        if i1 == 5 goto label7;

        if i1 != 8 goto label5;

        $r9 = new javax.xml.stream.XMLStreamException;

        $r10 = virtualinvoke r0.<org.springframework.util.xml.AbstractXMLStreamReader: javax.xml.stream.Location getLocation()>();

        specialinvoke $r9.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String,javax.xml.stream.Location)>("unexpected end of document when reading element text content", $r10);

        throw $r9;

     label5:
        if i1 != 1 goto label6;

        $r7 = new javax.xml.stream.XMLStreamException;

        $r8 = virtualinvoke r0.<org.springframework.util.xml.AbstractXMLStreamReader: javax.xml.stream.Location getLocation()>();

        specialinvoke $r7.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String,javax.xml.stream.Location)>("element text content may not contain START_ELEMENT", $r8);

        throw $r7;

     label6:
        $r2 = new javax.xml.stream.XMLStreamException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unexpected event type ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r0.<org.springframework.util.xml.AbstractXMLStreamReader: javax.xml.stream.Location getLocation()>();

        specialinvoke $r2.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String,javax.xml.stream.Location)>($r5, $r6);

        throw $r2;

     label7:
        i1 = virtualinvoke r0.<org.springframework.util.xml.AbstractXMLStreamReader: int next()>();

     label8:
        if i1 != 2 goto label2;

        $r11 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    public java.lang.String getAttributeLocalName(int)
    {
        org.springframework.util.xml.AbstractXMLStreamReader r0;
        int i0;
        javax.xml.namespace.QName $r1;
        java.lang.String $r2;

        r0 := @this: org.springframework.util.xml.AbstractXMLStreamReader;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.springframework.util.xml.AbstractXMLStreamReader: javax.xml.namespace.QName getAttributeName(int)>(i0);

        $r2 = virtualinvoke $r1.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        return $r2;
    }

    public java.lang.String getAttributeNamespace(int)
    {
        org.springframework.util.xml.AbstractXMLStreamReader r0;
        int i0;
        javax.xml.namespace.QName $r1;
        java.lang.String $r2;

        r0 := @this: org.springframework.util.xml.AbstractXMLStreamReader;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.springframework.util.xml.AbstractXMLStreamReader: javax.xml.namespace.QName getAttributeName(int)>(i0);

        $r2 = virtualinvoke $r1.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        return $r2;
    }

    public java.lang.String getAttributePrefix(int)
    {
        org.springframework.util.xml.AbstractXMLStreamReader r0;
        int i0;
        javax.xml.namespace.QName $r1;
        java.lang.String $r2;

        r0 := @this: org.springframework.util.xml.AbstractXMLStreamReader;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.springframework.util.xml.AbstractXMLStreamReader: javax.xml.namespace.QName getAttributeName(int)>(i0);

        $r2 = virtualinvoke $r1.<javax.xml.namespace.QName: java.lang.String getPrefix()>();

        return $r2;
    }

    public java.lang.String getNamespaceURI()
    {
        java.lang.IllegalStateException $r3;
        org.springframework.util.xml.AbstractXMLStreamReader r0;
        int $i0;
        javax.xml.namespace.QName $r1;
        java.lang.String $r2;

        r0 := @this: org.springframework.util.xml.AbstractXMLStreamReader;

        $i0 = virtualinvoke r0.<org.springframework.util.xml.AbstractXMLStreamReader: int getEventType()>();

        if $i0 == 1 goto label1;

        if $i0 != 2 goto label2;

     label1:
        $r1 = virtualinvoke r0.<org.springframework.util.xml.AbstractXMLStreamReader: javax.xml.namespace.QName getName()>();

        $r2 = virtualinvoke $r1.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        return $r2;

     label2:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("parser must be on START_ELEMENT or END_ELEMENT state");

        throw $r3;
    }

    public java.lang.String getNamespaceURI(java.lang.String)
    {
        org.springframework.util.xml.AbstractXMLStreamReader r1;
        javax.xml.namespace.NamespaceContext $r2;
        java.lang.String r0, $r3;

        r1 := @this: org.springframework.util.xml.AbstractXMLStreamReader;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "No prefix given");

        $r2 = virtualinvoke r1.<org.springframework.util.xml.AbstractXMLStreamReader: javax.xml.namespace.NamespaceContext getNamespaceContext()>();

        $r3 = interfaceinvoke $r2.<javax.xml.namespace.NamespaceContext: java.lang.String getNamespaceURI(java.lang.String)>(r0);

        return $r3;
    }

    public boolean hasText()
    {
        int $i0;
        org.springframework.util.xml.AbstractXMLStreamReader r0;

        r0 := @this: org.springframework.util.xml.AbstractXMLStreamReader;

        $i0 = virtualinvoke r0.<org.springframework.util.xml.AbstractXMLStreamReader: int getEventType()>();

        if $i0 == 6 goto label1;

        if $i0 == 4 goto label1;

        if $i0 == 5 goto label1;

        if $i0 == 12 goto label1;

        if $i0 == 9 goto label1;

        return 0;

     label1:
        return 1;
    }

    public java.lang.String getPrefix()
    {
        java.lang.IllegalStateException $r3;
        org.springframework.util.xml.AbstractXMLStreamReader r0;
        int $i0;
        javax.xml.namespace.QName $r1;
        java.lang.String $r2;

        r0 := @this: org.springframework.util.xml.AbstractXMLStreamReader;

        $i0 = virtualinvoke r0.<org.springframework.util.xml.AbstractXMLStreamReader: int getEventType()>();

        if $i0 == 1 goto label1;

        if $i0 != 2 goto label2;

     label1:
        $r1 = virtualinvoke r0.<org.springframework.util.xml.AbstractXMLStreamReader: javax.xml.namespace.QName getName()>();

        $r2 = virtualinvoke $r1.<javax.xml.namespace.QName: java.lang.String getPrefix()>();

        return $r2;

     label2:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("parser must be on START_ELEMENT or END_ELEMENT state");

        throw $r3;
    }

    public boolean hasName()
    {
        int $i0;
        org.springframework.util.xml.AbstractXMLStreamReader r0;

        r0 := @this: org.springframework.util.xml.AbstractXMLStreamReader;

        $i0 = virtualinvoke r0.<org.springframework.util.xml.AbstractXMLStreamReader: int getEventType()>();

        if $i0 == 1 goto label1;

        if $i0 == 2 goto label1;

        return 0;

     label1:
        return 1;
    }

    public boolean isWhiteSpace()
    {
        int $i0;
        org.springframework.util.xml.AbstractXMLStreamReader r0;

        r0 := @this: org.springframework.util.xml.AbstractXMLStreamReader;

        $i0 = virtualinvoke r0.<org.springframework.util.xml.AbstractXMLStreamReader: int getEventType()>();

        if $i0 != 6 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isStartElement()
    {
        int $i0;
        org.springframework.util.xml.AbstractXMLStreamReader r0;

        r0 := @this: org.springframework.util.xml.AbstractXMLStreamReader;

        $i0 = virtualinvoke r0.<org.springframework.util.xml.AbstractXMLStreamReader: int getEventType()>();

        if $i0 != 1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isEndElement()
    {
        int $i0;
        org.springframework.util.xml.AbstractXMLStreamReader r0;

        r0 := @this: org.springframework.util.xml.AbstractXMLStreamReader;

        $i0 = virtualinvoke r0.<org.springframework.util.xml.AbstractXMLStreamReader: int getEventType()>();

        if $i0 != 2 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isCharacters()
    {
        int $i0;
        org.springframework.util.xml.AbstractXMLStreamReader r0;

        r0 := @this: org.springframework.util.xml.AbstractXMLStreamReader;

        $i0 = virtualinvoke r0.<org.springframework.util.xml.AbstractXMLStreamReader: int getEventType()>();

        if $i0 != 4 goto label1;

        return 1;

     label1:
        return 0;
    }

    public int nextTag() throws javax.xml.stream.XMLStreamException
    {
        org.springframework.util.xml.AbstractXMLStreamReader r0;
        javax.xml.stream.XMLStreamException $r1;
        javax.xml.stream.Location $r2;
        int i0;
        boolean $z0, $z1;

        r0 := @this: org.springframework.util.xml.AbstractXMLStreamReader;

        i0 = virtualinvoke r0.<org.springframework.util.xml.AbstractXMLStreamReader: int next()>();

        goto label2;

     label1:
        i0 = virtualinvoke r0.<org.springframework.util.xml.AbstractXMLStreamReader: int next()>();

     label2:
        if i0 != 4 goto label3;

        $z1 = virtualinvoke r0.<org.springframework.util.xml.AbstractXMLStreamReader: boolean isWhiteSpace()>();

        if $z1 != 0 goto label1;

     label3:
        if i0 != 12 goto label4;

        $z0 = virtualinvoke r0.<org.springframework.util.xml.AbstractXMLStreamReader: boolean isWhiteSpace()>();

        if $z0 != 0 goto label1;

     label4:
        if i0 == 6 goto label1;

        if i0 == 3 goto label1;

        if i0 == 5 goto label1;

        if i0 == 1 goto label5;

        if i0 == 2 goto label5;

        $r1 = new javax.xml.stream.XMLStreamException;

        $r2 = virtualinvoke r0.<org.springframework.util.xml.AbstractXMLStreamReader: javax.xml.stream.Location getLocation()>();

        specialinvoke $r1.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String,javax.xml.stream.Location)>("expected start or end tag", $r2);

        throw $r1;

     label5:
        return i0;
    }

    public void require(int, java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        org.springframework.util.xml.AbstractXMLStreamReader r0;
        javax.xml.stream.XMLStreamException $r1;
        int $i0, i1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6;
        java.lang.String $r7, r8, r9;

        r0 := @this: org.springframework.util.xml.AbstractXMLStreamReader;

        i1 := @parameter0: int;

        r8 := @parameter1: java.lang.String;

        r9 := @parameter2: java.lang.String;

        $i0 = virtualinvoke r0.<org.springframework.util.xml.AbstractXMLStreamReader: int getEventType()>();

        if $i0 == i1 goto label1;

        $r1 = new javax.xml.stream.XMLStreamException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Expected [");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] but read [");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String)>($r7);

        throw $r1;

     label1:
        return;
    }

    public java.lang.String getAttributeValue(java.lang.String, java.lang.String)
    {
        org.springframework.util.xml.AbstractXMLStreamReader r0;
        int i0, $i1;
        javax.xml.namespace.QName $r1;
        java.lang.String $r2, r3, r4, $r5, $r6;
        boolean $z0, $z1;

        r0 := @this: org.springframework.util.xml.AbstractXMLStreamReader;

        r4 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        i0 = 0;

        goto label4;

     label1:
        $r1 = virtualinvoke r0.<org.springframework.util.xml.AbstractXMLStreamReader: javax.xml.namespace.QName getAttributeName(int)>(i0);

        $r2 = virtualinvoke $r1.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z0 == 0 goto label3;

        if r4 == null goto label2;

        $r6 = virtualinvoke $r1.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z1 == 0 goto label3;

     label2:
        $r5 = virtualinvoke r0.<org.springframework.util.xml.AbstractXMLStreamReader: java.lang.String getAttributeValue(int)>(i0);

        return $r5;

     label3:
        i0 = i0 + 1;

     label4:
        $i1 = virtualinvoke r0.<org.springframework.util.xml.AbstractXMLStreamReader: int getAttributeCount()>();

        if i0 < $i1 goto label1;

        return null;
    }

    public boolean hasNext() throws javax.xml.stream.XMLStreamException
    {
        int $i0;
        org.springframework.util.xml.AbstractXMLStreamReader r0;

        r0 := @this: org.springframework.util.xml.AbstractXMLStreamReader;

        $i0 = virtualinvoke r0.<org.springframework.util.xml.AbstractXMLStreamReader: int getEventType()>();

        if $i0 == 8 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.String getLocalName()
    {
        org.springframework.util.xml.AbstractXMLStreamReader r0;
        javax.xml.namespace.QName $r1;
        java.lang.String $r2;

        r0 := @this: org.springframework.util.xml.AbstractXMLStreamReader;

        $r1 = virtualinvoke r0.<org.springframework.util.xml.AbstractXMLStreamReader: javax.xml.namespace.QName getName()>();

        $r2 = virtualinvoke $r1.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        return $r2;
    }

    public char[] getTextCharacters()
    {
        char[] $r2;
        org.springframework.util.xml.AbstractXMLStreamReader r0;
        java.lang.String $r1;

        r0 := @this: org.springframework.util.xml.AbstractXMLStreamReader;

        $r1 = virtualinvoke r0.<org.springframework.util.xml.AbstractXMLStreamReader: java.lang.String getText()>();

        $r2 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        return $r2;
    }

    public int getTextCharacters(int, char[], int, int) throws javax.xml.stream.XMLStreamException
    {
        org.springframework.util.xml.AbstractXMLStreamReader r0;
        int $i0, $i1, i2, i3, i4;
        char[] $r1, r2;

        r0 := @this: org.springframework.util.xml.AbstractXMLStreamReader;

        i2 := @parameter0: int;

        r2 := @parameter1: char[];

        i3 := @parameter2: int;

        i4 := @parameter3: int;

        $r1 = virtualinvoke r0.<org.springframework.util.xml.AbstractXMLStreamReader: char[] getTextCharacters()>();

        $i0 = lengthof $r1;

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>(i4, $i0);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, i2, r2, i3, $i1);

        return $i1;
    }

    public int getTextLength()
    {
        int $i0;
        org.springframework.util.xml.AbstractXMLStreamReader r0;
        java.lang.String $r1;

        r0 := @this: org.springframework.util.xml.AbstractXMLStreamReader;

        $r1 = virtualinvoke r0.<org.springframework.util.xml.AbstractXMLStreamReader: java.lang.String getText()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        return $i0;
    }
}
