public class org.springframework.jndi.support.SimpleJndiBeanFactory extends org.springframework.jndi.JndiLocatorSupport implements org.springframework.beans.factory.BeanFactory
{
    private final java.util.Set shareableResources;
    private final java.util.Map singletonObjects;
    private final java.util.Map resourceTypes;

    public void <init>()
    {
        java.util.HashSet $r1;
        org.springframework.jndi.support.SimpleJndiBeanFactory r0;
        java.util.HashMap $r2, $r3;

        r0 := @this: org.springframework.jndi.support.SimpleJndiBeanFactory;

        specialinvoke r0.<org.springframework.jndi.JndiLocatorSupport: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r0.<org.springframework.jndi.support.SimpleJndiBeanFactory: java.util.Set shareableResources> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.springframework.jndi.support.SimpleJndiBeanFactory: java.util.Map singletonObjects> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.springframework.jndi.support.SimpleJndiBeanFactory: java.util.Map resourceTypes> = $r3;

        virtualinvoke r0.<org.springframework.jndi.support.SimpleJndiBeanFactory: void setResourceRef(boolean)>(1);

        return;
    }

    public void setShareableResources(java.lang.String[])
    {
        java.util.List $r3;
        org.springframework.jndi.support.SimpleJndiBeanFactory r0;
        java.util.Collection $r4;
        java.util.Set $r2;
        java.lang.String[] r1;

        r0 := @this: org.springframework.jndi.support.SimpleJndiBeanFactory;

        r1 := @parameter0: java.lang.String[];

        $r2 = r0.<org.springframework.jndi.support.SimpleJndiBeanFactory: java.util.Set shareableResources>;

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        $r4 = (java.util.Collection) $r3;

        interfaceinvoke $r2.<java.util.Set: boolean addAll(java.util.Collection)>($r4);

        return;
    }

    public void addShareableResource(java.lang.String)
    {
        java.util.Set $r2;
        java.lang.String r1;
        org.springframework.jndi.support.SimpleJndiBeanFactory r0;

        r0 := @this: org.springframework.jndi.support.SimpleJndiBeanFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.jndi.support.SimpleJndiBeanFactory: java.util.Set shareableResources>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    public java.lang.Object getBean(java.lang.String) throws org.springframework.beans.BeansException
    {
        java.lang.Object $r2;
        java.lang.String r1;
        org.springframework.jndi.support.SimpleJndiBeanFactory r0;

        r0 := @this: org.springframework.jndi.support.SimpleJndiBeanFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.springframework.jndi.support.SimpleJndiBeanFactory: java.lang.Object getBean(java.lang.String,java.lang.Class)>(r1, class "Ljava/lang/Object;");

        return $r2;
    }

    public java.lang.Object getBean(java.lang.String, java.lang.Class) throws org.springframework.beans.BeansException
    {
        javax.naming.NamingException $r5;
        org.springframework.beans.factory.BeanDefinitionStoreException $r6;
        org.springframework.beans.factory.BeanNotOfRequiredTypeException $r8;
        org.springframework.jndi.support.SimpleJndiBeanFactory r0;
        org.springframework.beans.factory.NoSuchBeanDefinitionException $r12;
        org.springframework.jndi.TypeMismatchNamingException $r7;
        java.lang.Class r2, $r9, $r10;
        java.lang.Object $r3, $r4;
        java.lang.String r1;
        javax.naming.NameNotFoundException $r11;
        boolean $z0;

        r0 := @this: org.springframework.jndi.support.SimpleJndiBeanFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class;

     label1:
        $z0 = virtualinvoke r0.<org.springframework.jndi.support.SimpleJndiBeanFactory: boolean isSingleton(java.lang.String)>(r1);

        if $z0 == 0 goto label3;

        $r4 = specialinvoke r0.<org.springframework.jndi.support.SimpleJndiBeanFactory: java.lang.Object doGetSingleton(java.lang.String,java.lang.Class)>(r1, r2);

     label2:
        return $r4;

     label3:
        $r3 = virtualinvoke r0.<org.springframework.jndi.support.SimpleJndiBeanFactory: java.lang.Object lookup(java.lang.String,java.lang.Class)>(r1, r2);

     label4:
        return $r3;

     label5:
        $r11 := @caughtexception;

        $r12 = new org.springframework.beans.factory.NoSuchBeanDefinitionException;

        specialinvoke $r12.<org.springframework.beans.factory.NoSuchBeanDefinitionException: void <init>(java.lang.String,java.lang.String)>(r1, "not found in JNDI environment");

        throw $r12;

     label6:
        $r7 := @caughtexception;

        $r8 = new org.springframework.beans.factory.BeanNotOfRequiredTypeException;

        $r9 = virtualinvoke $r7.<org.springframework.jndi.TypeMismatchNamingException: java.lang.Class getRequiredType()>();

        $r10 = virtualinvoke $r7.<org.springframework.jndi.TypeMismatchNamingException: java.lang.Class getActualType()>();

        specialinvoke $r8.<org.springframework.beans.factory.BeanNotOfRequiredTypeException: void <init>(java.lang.String,java.lang.Class,java.lang.Class)>(r1, $r9, $r10);

        throw $r8;

     label7:
        $r5 := @caughtexception;

        $r6 = new org.springframework.beans.factory.BeanDefinitionStoreException;

        specialinvoke $r6.<org.springframework.beans.factory.BeanDefinitionStoreException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>("JNDI environment", r1, "JNDI lookup failed", $r5);

        throw $r6;

        catch javax.naming.NameNotFoundException from label1 to label2 with label5;
        catch javax.naming.NameNotFoundException from label3 to label4 with label5;
        catch org.springframework.jndi.TypeMismatchNamingException from label1 to label2 with label6;
        catch org.springframework.jndi.TypeMismatchNamingException from label3 to label4 with label6;
        catch javax.naming.NamingException from label1 to label2 with label7;
        catch javax.naming.NamingException from label3 to label4 with label7;
    }

    public java.lang.Object getBean(java.lang.Class) throws org.springframework.beans.BeansException
    {
        org.springframework.jndi.support.SimpleJndiBeanFactory r0;
        java.lang.Class r1;
        java.lang.Object $r3;
        java.lang.String $r2;

        r0 := @this: org.springframework.jndi.support.SimpleJndiBeanFactory;

        r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getSimpleName()>();

        $r3 = virtualinvoke r0.<org.springframework.jndi.support.SimpleJndiBeanFactory: java.lang.Object getBean(java.lang.String,java.lang.Class)>($r2, r1);

        return $r3;
    }

    public transient java.lang.Object getBean(java.lang.String, java.lang.Object[]) throws org.springframework.beans.BeansException
    {
        java.lang.UnsupportedOperationException $r4;
        java.lang.Object[] r0;
        org.springframework.jndi.support.SimpleJndiBeanFactory r1;
        java.lang.Object $r3;
        java.lang.String r2;

        r1 := @this: org.springframework.jndi.support.SimpleJndiBeanFactory;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Object[];

        if r0 == null goto label1;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("SimpleJndiBeanFactory does not support explicit bean creation arguments)");

        throw $r4;

     label1:
        $r3 = virtualinvoke r1.<org.springframework.jndi.support.SimpleJndiBeanFactory: java.lang.Object getBean(java.lang.String)>(r2);

        return $r3;
    }

    public boolean containsBean(java.lang.String)
    {
        org.springframework.jndi.support.SimpleJndiBeanFactory r0;
        java.util.Map $r2, $r3;
        java.lang.String r1;
        javax.naming.NamingException $r4;
        boolean $z0, $z1;

        r0 := @this: org.springframework.jndi.support.SimpleJndiBeanFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.jndi.support.SimpleJndiBeanFactory: java.util.Map singletonObjects>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r3 = r0.<org.springframework.jndi.support.SimpleJndiBeanFactory: java.util.Map resourceTypes>;

        $z1 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

     label1:
        return 1;

     label2:
        specialinvoke r0.<org.springframework.jndi.support.SimpleJndiBeanFactory: java.lang.Class doGetType(java.lang.String)>(r1);

     label3:
        return 1;

     label4:
        $r4 := @caughtexception;

        return 0;

        catch javax.naming.NamingException from label2 to label3 with label4;
    }

    public boolean isSingleton(java.lang.String) throws org.springframework.beans.factory.NoSuchBeanDefinitionException
    {
        org.springframework.jndi.support.SimpleJndiBeanFactory r0;
        java.util.Set $r2;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.springframework.jndi.support.SimpleJndiBeanFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.jndi.support.SimpleJndiBeanFactory: java.util.Set shareableResources>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean isPrototype(java.lang.String) throws org.springframework.beans.factory.NoSuchBeanDefinitionException
    {
        org.springframework.jndi.support.SimpleJndiBeanFactory r0;
        java.util.Set $r2;
        java.lang.String r1;
        boolean $z0, $z1;

        r0 := @this: org.springframework.jndi.support.SimpleJndiBeanFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.jndi.support.SimpleJndiBeanFactory: java.util.Set shareableResources>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $z1 = 0;

        goto label2;

     label1:
        $z1 = 1;

     label2:
        return $z1;
    }

    public boolean isTypeMatch(java.lang.String, java.lang.Class) throws org.springframework.beans.factory.NoSuchBeanDefinitionException
    {
        org.springframework.jndi.support.SimpleJndiBeanFactory r0;
        java.lang.Class $r2, r3;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.springframework.jndi.support.SimpleJndiBeanFactory;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Class;

        $r2 = virtualinvoke r0.<org.springframework.jndi.support.SimpleJndiBeanFactory: java.lang.Class getType(java.lang.String)>(r1);

        if r3 == null goto label2;

        if $r2 == null goto label1;

        $z0 = virtualinvoke r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        if $z0 != 0 goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public java.lang.Class getType(java.lang.String) throws org.springframework.beans.factory.NoSuchBeanDefinitionException
    {
        org.springframework.jndi.support.SimpleJndiBeanFactory r0;
        org.springframework.beans.factory.NoSuchBeanDefinitionException $r5;
        java.lang.Class $r2;
        java.lang.String r1;
        javax.naming.NamingException $r3;
        javax.naming.NameNotFoundException $r4;

        r0 := @this: org.springframework.jndi.support.SimpleJndiBeanFactory;

        r1 := @parameter0: java.lang.String;

     label1:
        $r2 = specialinvoke r0.<org.springframework.jndi.support.SimpleJndiBeanFactory: java.lang.Class doGetType(java.lang.String)>(r1);

     label2:
        return $r2;

     label3:
        $r4 := @caughtexception;

        $r5 = new org.springframework.beans.factory.NoSuchBeanDefinitionException;

        specialinvoke $r5.<org.springframework.beans.factory.NoSuchBeanDefinitionException: void <init>(java.lang.String,java.lang.String)>(r1, "not found in JNDI environment");

        throw $r5;

     label4:
        $r3 := @caughtexception;

        return null;

        catch javax.naming.NameNotFoundException from label1 to label2 with label3;
        catch javax.naming.NamingException from label1 to label2 with label4;
    }

    public java.lang.String[] getAliases(java.lang.String)
    {
        java.lang.String[] $r0;
        java.lang.String r2;
        org.springframework.jndi.support.SimpleJndiBeanFactory r1;

        r1 := @this: org.springframework.jndi.support.SimpleJndiBeanFactory;

        r2 := @parameter0: java.lang.String;

        $r0 = newarray (java.lang.String)[0];

        return $r0;
    }

    private java.lang.Object doGetSingleton(java.lang.String, java.lang.Class) throws javax.naming.NamingException
    {
        java.lang.Throwable $r11;
        org.springframework.jndi.support.SimpleJndiBeanFactory r0;
        java.util.Map $r1, $r3, $r6, $r7;
        org.springframework.jndi.TypeMismatchNamingException $r9;
        java.lang.Class r4, $r12;
        java.lang.Object $r5, $r8;
        java.lang.String r2, $r10;
        boolean $z0, $z1;

        r0 := @this: org.springframework.jndi.support.SimpleJndiBeanFactory;

        r2 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.Class;

        $r1 = r0.<org.springframework.jndi.support.SimpleJndiBeanFactory: java.util.Map singletonObjects>;

        entermonitor $r1;

     label1:
        $r3 = r0.<org.springframework.jndi.support.SimpleJndiBeanFactory: java.util.Map singletonObjects>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r2);

        if $z0 == 0 goto label6;

        $r7 = r0.<org.springframework.jndi.support.SimpleJndiBeanFactory: java.util.Map singletonObjects>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        if r4 == null goto label4;

        $z1 = virtualinvoke r4.<java.lang.Class: boolean isInstance(java.lang.Object)>($r8);

        if $z1 != 0 goto label4;

        $r9 = new org.springframework.jndi.TypeMismatchNamingException;

        $r10 = virtualinvoke r0.<org.springframework.jndi.support.SimpleJndiBeanFactory: java.lang.String convertJndiName(java.lang.String)>(r2);

        if $r8 == null goto label2;

        $r12 = virtualinvoke $r8.<java.lang.Object: java.lang.Class getClass()>();

        goto label3;

     label2:
        $r12 = null;

     label3:
        specialinvoke $r9.<org.springframework.jndi.TypeMismatchNamingException: void <init>(java.lang.String,java.lang.Class,java.lang.Class)>($r10, r4, $r12);

        throw $r9;

     label4:
        exitmonitor $r1;

     label5:
        return $r8;

     label6:
        $r5 = virtualinvoke r0.<org.springframework.jndi.support.SimpleJndiBeanFactory: java.lang.Object lookup(java.lang.String,java.lang.Class)>(r2, r4);

        $r6 = r0.<org.springframework.jndi.support.SimpleJndiBeanFactory: java.util.Map singletonObjects>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r5);

        exitmonitor $r1;

     label7:
        return $r5;

     label8:
        $r11 := @caughtexception;

        exitmonitor $r1;

     label9:
        throw $r11;

        catch java.lang.Throwable from label1 to label5 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
        catch java.lang.Throwable from label8 to label9 with label8;
    }

    private java.lang.Class doGetType(java.lang.String) throws javax.naming.NamingException
    {
        java.lang.Throwable $r10;
        org.springframework.jndi.support.SimpleJndiBeanFactory r0;
        java.util.Map $r2, $r3, $r5, $r6;
        java.lang.Object $r4, $r7, $r9;
        java.lang.Class $r8, $r11, $r12;
        java.lang.String r1;
        boolean $z0, $z1;

        r0 := @this: org.springframework.jndi.support.SimpleJndiBeanFactory;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.springframework.jndi.support.SimpleJndiBeanFactory: boolean isSingleton(java.lang.String)>(r1);

        if $z0 == 0 goto label03;

        $r9 = specialinvoke r0.<org.springframework.jndi.support.SimpleJndiBeanFactory: java.lang.Object doGetSingleton(java.lang.String,java.lang.Class)>(r1, null);

        if $r9 == null goto label01;

        $r11 = virtualinvoke $r9.<java.lang.Object: java.lang.Class getClass()>();

        goto label02;

     label01:
        $r11 = null;

     label02:
        return $r11;

     label03:
        $r2 = r0.<org.springframework.jndi.support.SimpleJndiBeanFactory: java.util.Map resourceTypes>;

        entermonitor $r2;

     label04:
        $r3 = r0.<org.springframework.jndi.support.SimpleJndiBeanFactory: java.util.Map resourceTypes>;

        $z1 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z1 == 0 goto label06;

        $r6 = r0.<org.springframework.jndi.support.SimpleJndiBeanFactory: java.util.Map resourceTypes>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r8 = (java.lang.Class) $r7;

        exitmonitor $r2;

     label05:
        return $r8;

     label06:
        $r4 = virtualinvoke r0.<org.springframework.jndi.support.SimpleJndiBeanFactory: java.lang.Object lookup(java.lang.String,java.lang.Class)>(r1, null);

        if $r4 == null goto label07;

        $r12 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        goto label08;

     label07:
        $r12 = null;

     label08:
        $r5 = r0.<org.springframework.jndi.support.SimpleJndiBeanFactory: java.util.Map resourceTypes>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r12);

        exitmonitor $r2;

     label09:
        return $r12;

     label10:
        $r10 := @caughtexception;

        exitmonitor $r2;

     label11:
        throw $r10;

        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }
}
