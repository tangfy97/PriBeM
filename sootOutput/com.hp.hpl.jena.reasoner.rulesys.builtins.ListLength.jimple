public class com.hp.hpl.jena.reasoner.rulesys.builtins.ListLength extends com.hp.hpl.jena.reasoner.rulesys.builtins.BaseBuiltin
{

    public void <init>()
    {
        com.hp.hpl.jena.reasoner.rulesys.builtins.ListLength r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.builtins.ListLength;

        specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.builtins.BaseBuiltin: void <init>()>();

        return;
    }

    public java.lang.String getName()
    {
        com.hp.hpl.jena.reasoner.rulesys.builtins.ListLength r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.builtins.ListLength;

        return "listLength";
    }

    public int getArgLength()
    {
        com.hp.hpl.jena.reasoner.rulesys.builtins.ListLength r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.builtins.ListLength;

        return 2;
    }

    public boolean bodyCall(com.hp.hpl.jena.graph.Node[], int, com.hp.hpl.jena.reasoner.rulesys.RuleContext)
    {
        com.hp.hpl.jena.reasoner.rulesys.RuleContext r1;
        com.hp.hpl.jena.graph.Node[] r3;
        com.hp.hpl.jena.graph.Node $r4, $r5, $r6;
        com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment $r2;
        com.hp.hpl.jena.reasoner.rulesys.builtins.ListLength r0;
        int i0, $i1, $i3;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.builtins.ListLength;

        r3 := @parameter0: com.hp.hpl.jena.graph.Node[];

        i0 := @parameter1: int;

        r1 := @parameter2: com.hp.hpl.jena.reasoner.rulesys.RuleContext;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.builtins.ListLength: void checkArgs(int,com.hp.hpl.jena.reasoner.rulesys.RuleContext)>(i0, r1);

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.reasoner.rulesys.RuleContext: com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment getEnv()>();

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.builtins.ListLength: com.hp.hpl.jena.graph.Node getArg(int,com.hp.hpl.jena.graph.Node[],com.hp.hpl.jena.reasoner.rulesys.RuleContext)>(0, r3, r1);

        $i1 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.builtins.ListLength: int getLength(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.reasoner.rulesys.RuleContext)>($r4, r1);

        $i3 = (int) -1;

        if $i1 != $i3 goto label1;

        return 0;

     label1:
        $r5 = r3[1];

        $r6 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Util: com.hp.hpl.jena.graph.Node makeIntNode(int)>($i1);

        interfaceinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment: boolean bind(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r5, $r6);

        return 1;
    }

    protected static int getLength(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.reasoner.rulesys.RuleContext)
    {
        com.hp.hpl.jena.reasoner.rulesys.RuleContext r2;
        com.hp.hpl.jena.graph.Node r0, $r1, $r3, $r4;
        int $i0, $i1, $i3, $i5, $i7;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.reasoner.rulesys.RuleContext;

        $r1 = <com.hp.hpl.jena.vocabulary.RDF$Nodes: com.hp.hpl.jena.graph.Node nil>;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r3 = <com.hp.hpl.jena.vocabulary.RDF$Nodes: com.hp.hpl.jena.graph.Node rest>;

        $r4 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Util: com.hp.hpl.jena.graph.Node getPropValue(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.reasoner.rulesys.RuleContext)>(r0, $r3, r2);

        if $r4 != null goto label2;

        $i3 = (int) -1;

        return $i3;

     label2:
        $i0 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.builtins.ListLength: int getLength(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.reasoner.rulesys.RuleContext)>($r4, r2);

        $i5 = (int) -1;

        if $i0 != $i5 goto label3;

        $i7 = (int) -1;

        return $i7;

     label3:
        $i1 = 1 + $i0;

        return $i1;
    }
}
