public class org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer extends java.lang.Object
{
    private final org.waveprotocol.wave.model.document.ReadableWDocument doc;
    static final boolean $assertionsDisabled;

    public void <init>(org.waveprotocol.wave.model.document.ReadableWDocument)
    {
        org.waveprotocol.wave.model.document.ReadableWDocument r1;
        org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer r0;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer;

        r1 := @parameter0: org.waveprotocol.wave.model.document.ReadableWDocument;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer: org.waveprotocol.wave.model.document.ReadableWDocument doc> = r1;

        return;
    }

    public org.waveprotocol.wave.model.document.util.XmlStringBuilder renderRange(org.waveprotocol.wave.model.document.util.Point, org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.model.util.StringMap $r28;
        java.util.Map $r27;
        boolean $z0;
        org.waveprotocol.wave.model.document.ReadableWDocument $r2, $r8, $r9, $r12, $r14, $r16, $r17, $r20, $r21, $r24, $r26, $r30;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters $r10;
        org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer r0;
        org.waveprotocol.wave.model.document.util.XmlStringBuilder $r11, $r29;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.waveprotocol.wave.model.document.util.Range $r7, $r23;
        java.lang.String $r18, $r19, $r25;
        org.waveprotocol.wave.model.document.util.Point r1, r4;
        java.lang.Object $r3, $r5, $r6, $r13, $r15, $r22, r31;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        r4 := @parameter1: org.waveprotocol.wave.model.document.util.Point;

        $r2 = r0.<org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r3 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getCanonicalNode()>();

        $r5 = virtualinvoke r4.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getCanonicalNode()>();

        $r6 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object nearestCommonAncestor(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.Object)>($r2, $r3, $r5);

        $r7 = new org.waveprotocol.wave.model.document.util.Range;

        $r8 = r0.<org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $i0 = interfaceinvoke $r8.<org.waveprotocol.wave.model.document.ReadableWDocument: int getLocation(org.waveprotocol.wave.model.document.util.Point)>(r1);

        $r9 = r0.<org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $i1 = interfaceinvoke $r9.<org.waveprotocol.wave.model.document.ReadableWDocument: int getLocation(org.waveprotocol.wave.model.document.util.Point)>(r4);

        specialinvoke $r7.<org.waveprotocol.wave.model.document.util.Range: void <init>(int,int)>($i0, $i1);

        $r10 = <org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters BLIP_TEXT>;

        $r11 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilder createEmptyWithCharConstraints(org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters)>($r10);

        $r12 = r0.<org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r13 = interfaceinvoke $r12.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Object asElement(java.lang.Object)>($r6);

        if $r13 == null goto label3;

        $r20 = r0.<org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        r31 = interfaceinvoke $r20.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Object getFirstChild(java.lang.Object)>($r13);

     label1:
        if r31 == null goto label2;

        $r29 = specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer: org.waveprotocol.wave.model.document.util.XmlStringBuilder augmentBuilder(java.lang.Object,org.waveprotocol.wave.model.document.util.Range)>(r31, $r7);

        virtualinvoke $r11.<org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilder append(org.waveprotocol.wave.model.document.util.XmlStringBuilder)>($r29);

        $r30 = r0.<org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        r31 = interfaceinvoke $r30.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Object getNextSibling(java.lang.Object)>(r31);

        goto label1;

     label2:
        $r21 = r0.<org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r22 = interfaceinvoke $r21.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Object getDocumentElement()>();

        if $r13 == $r22 goto label4;

        $r23 = specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer: org.waveprotocol.wave.model.document.util.Range getNodeRange(java.lang.Object)>($r13);

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer: boolean shouldInclude(org.waveprotocol.wave.model.document.util.Range,org.waveprotocol.wave.model.document.util.Range)>($r7, $r23);

        if $z0 == 0 goto label4;

        $r24 = r0.<org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r25 = interfaceinvoke $r24.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.String getTagName(java.lang.Object)>($r13);

        $r26 = r0.<org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r27 = interfaceinvoke $r26.<org.waveprotocol.wave.model.document.ReadableWDocument: java.util.Map getAttributes(java.lang.Object)>($r13);

        $r28 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap adaptStringMap(java.util.Map)>($r27);

        virtualinvoke $r11.<org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilder wrap(java.lang.String,org.waveprotocol.wave.model.util.StringMap)>($r25, $r28);

        goto label4;

     label3:
        $r14 = r0.<org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r15 = interfaceinvoke $r14.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Object asText(java.lang.Object)>($r6);

        $r16 = r0.<org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $i2 = interfaceinvoke $r16.<org.waveprotocol.wave.model.document.ReadableWDocument: int getLocation(java.lang.Object)>($r15);

        $r17 = r0.<org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r18 = interfaceinvoke $r17.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.String getData(java.lang.Object)>($r15);

        $i3 = virtualinvoke $r7.<org.waveprotocol.wave.model.document.util.Range: int getStart()>();

        $i4 = $i3 - $i2;

        $i5 = virtualinvoke $r7.<org.waveprotocol.wave.model.document.util.Range: int getEnd()>();

        $i6 = $i5 - $i2;

        $r19 = virtualinvoke $r18.<java.lang.String: java.lang.String substring(int,int)>($i4, $i6);

        virtualinvoke $r11.<org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilder appendText(java.lang.String)>($r19);

     label4:
        return $r11;
    }

    private org.waveprotocol.wave.model.document.util.XmlStringBuilder augmentBuilder(java.lang.Object, org.waveprotocol.wave.model.document.util.Range)
    {
        org.waveprotocol.wave.model.util.StringMap $r20;
        java.util.Map $r19;
        boolean $z0;
        org.waveprotocol.wave.model.document.ReadableWDocument $r5, $r7, $r9, $r11, $r12, $r15, $r16, $r18, $r22;
        org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer r0;
        org.waveprotocol.wave.model.document.util.XmlStringBuilder $r3, $r21;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        org.waveprotocol.wave.model.document.util.Range $r2, r4;
        java.lang.String $r13, $r14, $r17;
        java.lang.Object r1, $r6, $r8, $r10, r23;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer;

        r1 := @parameter0: java.lang.Object;

        r4 := @parameter1: org.waveprotocol.wave.model.document.util.Range;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer: org.waveprotocol.wave.model.document.util.Range getNodeRange(java.lang.Object)>(r1);

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilder createEmpty()>();

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer: boolean shouldInclude(org.waveprotocol.wave.model.document.util.Range,org.waveprotocol.wave.model.document.util.Range)>(r4, $r2);

        if $z0 != 0 goto label1;

        return $r3;

     label1:
        $r5 = r0.<org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Object asElement(java.lang.Object)>(r1);

        $r7 = r0.<org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r8 = interfaceinvoke $r7.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Object asElement(java.lang.Object)>(r1);

        if $r8 == null goto label4;

        $r15 = r0.<org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        r23 = interfaceinvoke $r15.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Object getFirstChild(java.lang.Object)>(r1);

     label2:
        if r23 == null goto label3;

        $r21 = specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer: org.waveprotocol.wave.model.document.util.XmlStringBuilder augmentBuilder(java.lang.Object,org.waveprotocol.wave.model.document.util.Range)>(r23, r4);

        virtualinvoke $r3.<org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilder append(org.waveprotocol.wave.model.document.util.XmlStringBuilder)>($r21);

        $r22 = r0.<org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        r23 = interfaceinvoke $r22.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Object getNextSibling(java.lang.Object)>(r23);

        goto label2;

     label3:
        $r16 = r0.<org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r17 = interfaceinvoke $r16.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.String getTagName(java.lang.Object)>($r6);

        $r18 = r0.<org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r19 = interfaceinvoke $r18.<org.waveprotocol.wave.model.document.ReadableWDocument: java.util.Map getAttributes(java.lang.Object)>($r6);

        $r20 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap adaptStringMap(java.util.Map)>($r19);

        virtualinvoke $r3.<org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilder wrap(java.lang.String,org.waveprotocol.wave.model.util.StringMap)>($r17, $r20);

        goto label5;

     label4:
        $r9 = r0.<org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r10 = interfaceinvoke $r9.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Object asText(java.lang.Object)>(r1);

        $r11 = r0.<org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $i0 = interfaceinvoke $r11.<org.waveprotocol.wave.model.document.ReadableWDocument: int getLocation(java.lang.Object)>($r10);

        $r12 = r0.<org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r13 = interfaceinvoke $r12.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.String getData(java.lang.Object)>($r10);

        $i1 = virtualinvoke r4.<org.waveprotocol.wave.model.document.util.Range: int getStart()>();

        $i2 = $i1 - $i0;

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i2);

        $i4 = virtualinvoke $r13.<java.lang.String: int length()>();

        $i5 = virtualinvoke r4.<org.waveprotocol.wave.model.document.util.Range: int getEnd()>();

        $i6 = $i5 - $i0;

        $i7 = staticinvoke <java.lang.Math: int min(int,int)>($i4, $i6);

        $r14 = virtualinvoke $r13.<java.lang.String: java.lang.String substring(int,int)>($i3, $i7);

        virtualinvoke $r3.<org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilder appendText(java.lang.String)>($r14);

     label5:
        return $r3;
    }

    private boolean shouldInclude(org.waveprotocol.wave.model.document.util.Range, org.waveprotocol.wave.model.document.util.Range)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        org.waveprotocol.wave.model.document.util.Range r0, r1;
        org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer r2;

        r2 := @this: org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.Range;

        r0 := @parameter1: org.waveprotocol.wave.model.document.util.Range;

        $i0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Range: int getStart()>();

        $i1 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Range: int getStart()>();

        if $i0 >= $i1 goto label1;

        $i6 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Range: int getEnd()>();

        $i7 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Range: int getEnd()>();

        if $i6 <= $i7 goto label1;

        return 0;

     label1:
        $i2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Range: int getEnd()>();

        $i3 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Range: int getStart()>();

        if $i2 <= $i3 goto label2;

        $i4 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Range: int getStart()>();

        $i5 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Range: int getEnd()>();

        if $i4 < $i5 goto label3;

     label2:
        return 0;

     label3:
        return 1;
    }

    private int getNodeEnd(java.lang.Object)
    {
        int $i0, $i1, $i2;
        org.waveprotocol.wave.model.document.ReadableWDocument $r2, $r4, $r6, $r8, $r9;
        java.lang.Object r1, $r3, $r5, $r7;
        org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer r0;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Object getNextSibling(java.lang.Object)>(r1);

        if $r3 == null goto label1;

        $r9 = r0.<org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $i1 = interfaceinvoke $r9.<org.waveprotocol.wave.model.document.ReadableWDocument: int getLocation(java.lang.Object)>($r3);

        return $i1;

     label1:
        $r4 = r0.<org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Object getParentElement(java.lang.Object)>(r1);

        $r6 = r0.<org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r7 = interfaceinvoke $r6.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Object getDocumentElement()>();

        if $r5 != $r7 goto label2;

        $r8 = r0.<org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $i2 = interfaceinvoke $r8.<org.waveprotocol.wave.model.document.ReadableWDocument: int size()>();

        goto label3;

     label2:
        $i0 = specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer: int getNodeEnd(java.lang.Object)>($r5);

        $i2 = $i0 - 1;

     label3:
        return $i2;
    }

    private org.waveprotocol.wave.model.document.util.Range getNodeRange(java.lang.Object)
    {
        java.lang.AssertionError $r4;
        int $i0, $i1;
        org.waveprotocol.wave.model.document.util.Range $r0;
        org.waveprotocol.wave.model.document.ReadableWDocument $r3, $r5;
        java.lang.Object r2, $r6;
        org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer r1;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer;

        r2 := @parameter0: java.lang.Object;

        $z0 = <org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if r2 == null goto label1;

        $r5 = r1.<org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Object getDocumentElement()>();

        if r2 != $r6 goto label2;

     label1:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>("Node cannot be null or the document element");

        throw $r4;

     label2:
        $r0 = new org.waveprotocol.wave.model.document.util.Range;

        $r3 = r1.<org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $i0 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.ReadableWDocument: int getLocation(java.lang.Object)>(r2);

        $i1 = specialinvoke r1.<org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer: int getNodeEnd(java.lang.Object)>(r2);

        specialinvoke $r0.<org.waveprotocol.wave.model.document.util.Range: void <init>(int,int)>($i0, $i1);

        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/client/editor/extract/SubTreeXmlRenderer;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.client.editor.extract.SubTreeXmlRenderer: boolean $assertionsDisabled> = $z1;

        return;
    }
}
