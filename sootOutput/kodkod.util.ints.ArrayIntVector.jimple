public final class kodkod.util.ints.ArrayIntVector extends kodkod.util.ints.AbstractIntVector
{
    private int[] elements;
    private int size;

    public void <init>(int)
    {
        int[] $r1;
        kodkod.util.ints.ArrayIntVector r0;
        int i0;
        java.lang.StringBuilder $r3, $r4;
        java.lang.String $r5;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: kodkod.util.ints.ArrayIntVector;

        i0 := @parameter0: int;

        specialinvoke r0.<kodkod.util.ints.AbstractIntVector: void <init>()>();

        if i0 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Illegal Capacity: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r2;

     label1:
        $r1 = newarray (int)[i0];

        r0.<kodkod.util.ints.ArrayIntVector: int[] elements> = $r1;

        return;
    }

    public void <init>()
    {
        kodkod.util.ints.ArrayIntVector r0;

        r0 := @this: kodkod.util.ints.ArrayIntVector;

        specialinvoke r0.<kodkod.util.ints.ArrayIntVector: void <init>(int)>(10);

        return;
    }

    public void <init>(int[])
    {
        long $l2, $l3, $l4, $l5;
        int[] r1, $r2, $r3;
        kodkod.util.ints.ArrayIntVector r0;
        int $i0, $i1, i6, $i7;

        r0 := @this: kodkod.util.ints.ArrayIntVector;

        r1 := @parameter0: int[];

        specialinvoke r0.<kodkod.util.ints.AbstractIntVector: void <init>()>();

        $i0 = lengthof r1;

        r0.<kodkod.util.ints.ArrayIntVector: int size> = $i0;

        $i1 = r0.<kodkod.util.ints.ArrayIntVector: int size>;

        $l2 = (long) $i1;

        $l3 = $l2 * 110L;

        $l4 = $l3 / 100L;

        $l5 = staticinvoke <java.lang.Math: long min(long,long)>($l4, 2147483647L);

        i6 = (int) $l5;

        $r2 = newarray (int)[i6];

        r0.<kodkod.util.ints.ArrayIntVector: int[] elements> = $r2;

        $r3 = r0.<kodkod.util.ints.ArrayIntVector: int[] elements>;

        $i7 = r0.<kodkod.util.ints.ArrayIntVector: int size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r3, 0, $i7);

        return;
    }

    public void trimToSize()
    {
        int[] $r1, r2, $r3, $r4;
        kodkod.util.ints.ArrayIntVector r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: kodkod.util.ints.ArrayIntVector;

        $r1 = r0.<kodkod.util.ints.ArrayIntVector: int[] elements>;

        i0 = lengthof $r1;

        $i1 = r0.<kodkod.util.ints.ArrayIntVector: int size>;

        if $i1 >= i0 goto label1;

        r2 = r0.<kodkod.util.ints.ArrayIntVector: int[] elements>;

        $i2 = r0.<kodkod.util.ints.ArrayIntVector: int size>;

        $r3 = newarray (int)[$i2];

        r0.<kodkod.util.ints.ArrayIntVector: int[] elements> = $r3;

        $r4 = r0.<kodkod.util.ints.ArrayIntVector: int[] elements>;

        $i3 = r0.<kodkod.util.ints.ArrayIntVector: int size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r4, 0, $i3);

     label1:
        return;
    }

    public void ensureCapacity(int)
    {
        int[] $r1, r2, $r3, $r4;
        kodkod.util.ints.ArrayIntVector r0;
        int i0, i1, $i2, $i3, $i4, i5;

        r0 := @this: kodkod.util.ints.ArrayIntVector;

        i1 := @parameter0: int;

        $r1 = r0.<kodkod.util.ints.ArrayIntVector: int[] elements>;

        i0 = lengthof $r1;

        if i1 <= i0 goto label2;

        r2 = r0.<kodkod.util.ints.ArrayIntVector: int[] elements>;

        $i2 = i0 * 3;

        $i3 = $i2 / 2;

        i5 = $i3 + 1;

        if i5 >= i1 goto label1;

        i5 = i1;

     label1:
        $r3 = newarray (int)[i5];

        r0.<kodkod.util.ints.ArrayIntVector: int[] elements> = $r3;

        $r4 = r0.<kodkod.util.ints.ArrayIntVector: int[] elements>;

        $i4 = r0.<kodkod.util.ints.ArrayIntVector: int size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r4, 0, $i4);

     label2:
        return;
    }

    private void checkExcludeLength(int)
    {
        java.lang.IndexOutOfBoundsException $r0;
        kodkod.util.ints.ArrayIntVector r1;
        int i0, $i1;

        r1 := @this: kodkod.util.ints.ArrayIntVector;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i1 = r1.<kodkod.util.ints.ArrayIntVector: int size>;

        if i0 < $i1 goto label2;

     label1:
        $r0 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r0;

     label2:
        return;
    }

    private void checkIncludeLength(int)
    {
        java.lang.IndexOutOfBoundsException $r0;
        kodkod.util.ints.ArrayIntVector r1;
        int i0, $i1;

        r1 := @this: kodkod.util.ints.ArrayIntVector;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i1 = r1.<kodkod.util.ints.ArrayIntVector: int size>;

        if i0 <= $i1 goto label2;

     label1:
        $r0 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r0;

     label2:
        return;
    }

    public int get(int)
    {
        int[] $r1;
        kodkod.util.ints.ArrayIntVector r0;
        int i0, $i1;

        r0 := @this: kodkod.util.ints.ArrayIntVector;

        i0 := @parameter0: int;

        specialinvoke r0.<kodkod.util.ints.ArrayIntVector: void checkExcludeLength(int)>(i0);

        $r1 = r0.<kodkod.util.ints.ArrayIntVector: int[] elements>;

        $i1 = $r1[i0];

        return $i1;
    }

    public int size()
    {
        int $i0;
        kodkod.util.ints.ArrayIntVector r0;

        r0 := @this: kodkod.util.ints.ArrayIntVector;

        $i0 = r0.<kodkod.util.ints.ArrayIntVector: int size>;

        return $i0;
    }

    public int set(int, int)
    {
        int[] $r1;
        kodkod.util.ints.ArrayIntVector r0;
        int i0, $i1, i2;

        r0 := @this: kodkod.util.ints.ArrayIntVector;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        $i1 = virtualinvoke r0.<kodkod.util.ints.ArrayIntVector: int get(int)>(i0);

        $r1 = r0.<kodkod.util.ints.ArrayIntVector: int[] elements>;

        $r1[i0] = i2;

        return $i1;
    }

    public boolean add(int)
    {
        int[] $r1;
        kodkod.util.ints.ArrayIntVector r0;
        int $i0, $i1, $i2, $i3, i4;

        r0 := @this: kodkod.util.ints.ArrayIntVector;

        i4 := @parameter0: int;

        $i0 = r0.<kodkod.util.ints.ArrayIntVector: int size>;

        $i1 = $i0 + 1;

        virtualinvoke r0.<kodkod.util.ints.ArrayIntVector: void ensureCapacity(int)>($i1);

        $r1 = r0.<kodkod.util.ints.ArrayIntVector: int[] elements>;

        $i2 = r0.<kodkod.util.ints.ArrayIntVector: int size>;

        $i3 = $i2 + 1;

        r0.<kodkod.util.ints.ArrayIntVector: int size> = $i3;

        $r1[$i2] = i4;

        return 1;
    }

    public void add(int, int)
    {
        int[] $r1, $r2, $r3;
        kodkod.util.ints.ArrayIntVector r0;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, $i7, $i8;

        r0 := @this: kodkod.util.ints.ArrayIntVector;

        i0 := @parameter0: int;

        i6 := @parameter1: int;

        specialinvoke r0.<kodkod.util.ints.ArrayIntVector: void checkIncludeLength(int)>(i0);

        $i1 = r0.<kodkod.util.ints.ArrayIntVector: int size>;

        $i2 = $i1 + 1;

        virtualinvoke r0.<kodkod.util.ints.ArrayIntVector: void ensureCapacity(int)>($i2);

        $r2 = r0.<kodkod.util.ints.ArrayIntVector: int[] elements>;

        $r1 = r0.<kodkod.util.ints.ArrayIntVector: int[] elements>;

        $i5 = i0 + 1;

        $i3 = r0.<kodkod.util.ints.ArrayIntVector: int size>;

        $i4 = $i3 - i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, i0, $r1, $i5, $i4);

        $r3 = r0.<kodkod.util.ints.ArrayIntVector: int[] elements>;

        $r3[i0] = i6;

        $i7 = r0.<kodkod.util.ints.ArrayIntVector: int size>;

        $i8 = $i7 + 1;

        r0.<kodkod.util.ints.ArrayIntVector: int size> = $i8;

        return;
    }

    public boolean addAll(int, kodkod.util.ints.IntCollection)
    {
        kodkod.util.ints.IntIterator $r4;
        kodkod.util.ints.IntCollection r1;
        int[] $r2, $r3, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        boolean $z0;
        kodkod.util.ints.ArrayIntVector r0;

        r0 := @this: kodkod.util.ints.ArrayIntVector;

        i8 := @parameter0: int;

        r1 := @parameter1: kodkod.util.ints.IntCollection;

        specialinvoke r0.<kodkod.util.ints.ArrayIntVector: void checkIncludeLength(int)>(i8);

        $i0 = interfaceinvoke r1.<kodkod.util.ints.IntCollection: int size()>();

        if $i0 != 0 goto label1;

        return 0;

     label1:
        $i1 = r0.<kodkod.util.ints.ArrayIntVector: int size>;

        $i2 = $i1 + $i0;

        virtualinvoke r0.<kodkod.util.ints.ArrayIntVector: void ensureCapacity(int)>($i2);

        $r3 = r0.<kodkod.util.ints.ArrayIntVector: int[] elements>;

        $r2 = r0.<kodkod.util.ints.ArrayIntVector: int[] elements>;

        $i5 = i8 + $i0;

        $i3 = r0.<kodkod.util.ints.ArrayIntVector: int size>;

        $i4 = $i3 - i8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, i8, $r2, $i5, $i4);

        $r4 = interfaceinvoke r1.<kodkod.util.ints.IntCollection: kodkod.util.ints.IntIterator iterator()>();

        goto label3;

     label2:
        $r5 = r0.<kodkod.util.ints.ArrayIntVector: int[] elements>;

        $i6 = i8;

        i8 = i8 + 1;

        $i7 = interfaceinvoke $r4.<kodkod.util.ints.IntIterator: int next()>();

        $r5[$i6] = $i7;

     label3:
        $z0 = interfaceinvoke $r4.<kodkod.util.ints.IntIterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        return 1;
    }

    public int removeAt(int)
    {
        int[] $r1, $r2, $r3;
        kodkod.util.ints.ArrayIntVector r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: kodkod.util.ints.ArrayIntVector;

        i0 := @parameter0: int;

        specialinvoke r0.<kodkod.util.ints.ArrayIntVector: void checkExcludeLength(int)>(i0);

        $r1 = r0.<kodkod.util.ints.ArrayIntVector: int[] elements>;

        i1 = $r1[i0];

        $r3 = r0.<kodkod.util.ints.ArrayIntVector: int[] elements>;

        $i5 = i0 + 1;

        $r2 = r0.<kodkod.util.ints.ArrayIntVector: int[] elements>;

        $i2 = r0.<kodkod.util.ints.ArrayIntVector: int size>;

        $i3 = $i2 - i0;

        $i4 = $i3 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i5, $r2, i0, $i4);

        $i6 = r0.<kodkod.util.ints.ArrayIntVector: int size>;

        $i7 = $i6 - 1;

        r0.<kodkod.util.ints.ArrayIntVector: int size> = $i7;

        return i1;
    }

    public int[] toArray(int[])
    {
        int[] $r1, r2;
        kodkod.util.ints.ArrayIntVector r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: kodkod.util.ints.ArrayIntVector;

        r2 := @parameter0: int[];

        $i1 = lengthof r2;

        $i0 = r0.<kodkod.util.ints.ArrayIntVector: int size>;

        if $i1 >= $i0 goto label1;

        $i3 = r0.<kodkod.util.ints.ArrayIntVector: int size>;

        r2 = newarray (int)[$i3];

     label1:
        $r1 = r0.<kodkod.util.ints.ArrayIntVector: int[] elements>;

        $i2 = r0.<kodkod.util.ints.ArrayIntVector: int size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r2, 0, $i2);

        return r2;
    }
}
