public class org.apache.commons.httpclient.methods.ByteArrayRequestEntity extends java.lang.Object implements org.apache.commons.httpclient.methods.RequestEntity
{
    private byte[] content;
    private java.lang.String contentType;

    public void <init>(byte[])
    {
        byte[] r1;
        org.apache.commons.httpclient.methods.ByteArrayRequestEntity r0;

        r0 := @this: org.apache.commons.httpclient.methods.ByteArrayRequestEntity;

        r1 := @parameter0: byte[];

        specialinvoke r0.<org.apache.commons.httpclient.methods.ByteArrayRequestEntity: void <init>(byte[],java.lang.String)>(r1, null);

        return;
    }

    public void <init>(byte[], java.lang.String)
    {
        byte[] r1;
        org.apache.commons.httpclient.methods.ByteArrayRequestEntity r0;
        java.lang.String r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.commons.httpclient.methods.ByteArrayRequestEntity;

        r1 := @parameter0: byte[];

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The content cannot be null");

        throw $r3;

     label1:
        r0.<org.apache.commons.httpclient.methods.ByteArrayRequestEntity: byte[] content> = r1;

        r0.<org.apache.commons.httpclient.methods.ByteArrayRequestEntity: java.lang.String contentType> = r2;

        return;
    }

    public boolean isRepeatable()
    {
        org.apache.commons.httpclient.methods.ByteArrayRequestEntity r0;

        r0 := @this: org.apache.commons.httpclient.methods.ByteArrayRequestEntity;

        return 1;
    }

    public java.lang.String getContentType()
    {
        java.lang.String $r1;
        org.apache.commons.httpclient.methods.ByteArrayRequestEntity r0;

        r0 := @this: org.apache.commons.httpclient.methods.ByteArrayRequestEntity;

        $r1 = r0.<org.apache.commons.httpclient.methods.ByteArrayRequestEntity: java.lang.String contentType>;

        return $r1;
    }

    public void writeRequest(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r0;
        byte[] $r2;
        org.apache.commons.httpclient.methods.ByteArrayRequestEntity r1;

        r1 := @this: org.apache.commons.httpclient.methods.ByteArrayRequestEntity;

        r0 := @parameter0: java.io.OutputStream;

        $r2 = r1.<org.apache.commons.httpclient.methods.ByteArrayRequestEntity: byte[] content>;

        virtualinvoke r0.<java.io.OutputStream: void write(byte[])>($r2);

        return;
    }

    public long getContentLength()
    {
        byte[] $r1;
        org.apache.commons.httpclient.methods.ByteArrayRequestEntity r0;
        int $i0;
        long $l1;

        r0 := @this: org.apache.commons.httpclient.methods.ByteArrayRequestEntity;

        $r1 = r0.<org.apache.commons.httpclient.methods.ByteArrayRequestEntity: byte[] content>;

        $i0 = lengthof $r1;

        $l1 = (long) $i0;

        return $l1;
    }

    public byte[] getContent()
    {
        byte[] $r1;
        org.apache.commons.httpclient.methods.ByteArrayRequestEntity r0;

        r0 := @this: org.apache.commons.httpclient.methods.ByteArrayRequestEntity;

        $r1 = r0.<org.apache.commons.httpclient.methods.ByteArrayRequestEntity: byte[] content>;

        return $r1;
    }
}
