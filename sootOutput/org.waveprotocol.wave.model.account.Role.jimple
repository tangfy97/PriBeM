public final enum class org.waveprotocol.wave.model.account.Role extends java.lang.Enum
{
    public static final enum org.waveprotocol.wave.model.account.Role FULL;
    public static final enum org.waveprotocol.wave.model.account.Role READ_ONLY;
    private java.util.Set capabilities;
    private static final org.waveprotocol.wave.model.account.Role[] $VALUES;

    public static org.waveprotocol.wave.model.account.Role[] values()
    {
        java.lang.Object $r1;
        org.waveprotocol.wave.model.account.Role[] $r0, $r2;

        $r0 = <org.waveprotocol.wave.model.account.Role: org.waveprotocol.wave.model.account.Role[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (org.waveprotocol.wave.model.account.Role[]) $r1;

        return $r2;
    }

    public static org.waveprotocol.wave.model.account.Role valueOf(java.lang.String)
    {
        org.waveprotocol.wave.model.account.Role $r2;
        java.lang.String r0;
        java.lang.Enum $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/waveprotocol/wave/model/account/Role;", r0);

        $r2 = (org.waveprotocol.wave.model.account.Role) $r1;

        return $r2;
    }

    private transient void <init>(java.lang.String, int, org.waveprotocol.wave.model.account.Capability, org.waveprotocol.wave.model.account.Capability[])
    {
        org.waveprotocol.wave.model.account.Capability[] r3;
        int i0;
        org.waveprotocol.wave.model.account.Capability r2;
        org.waveprotocol.wave.model.account.Role r0;
        java.lang.String r1;
        java.util.EnumSet $r4;

        r0 := @this: org.waveprotocol.wave.model.account.Role;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: org.waveprotocol.wave.model.account.Capability;

        r3 := @parameter3: org.waveprotocol.wave.model.account.Capability[];

        $r4 = staticinvoke <java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum[])>(r2, r3);

        specialinvoke r0.<org.waveprotocol.wave.model.account.Role: void <init>(java.lang.String,int,java.util.Set)>(r1, i0, $r4);

        return;
    }

    private void <init>(java.lang.String, int, java.util.Set)
    {
        int i0;
        java.util.Set r2, $r3;
        org.waveprotocol.wave.model.account.Role r0;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.model.account.Role;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.Set;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $r3 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>(r2);

        r0.<org.waveprotocol.wave.model.account.Role: java.util.Set capabilities> = $r3;

        return;
    }

    public boolean isPermitted(org.waveprotocol.wave.model.account.Capability)
    {
        org.waveprotocol.wave.model.account.Capability r1;
        java.util.Set $r2;
        org.waveprotocol.wave.model.account.Role r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.account.Role;

        r1 := @parameter0: org.waveprotocol.wave.model.account.Capability;

        $r2 = r0.<org.waveprotocol.wave.model.account.Role: java.util.Set capabilities>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.model.account.Capability[] $r3;
        org.waveprotocol.wave.model.account.Role $r0, $r2, $r7, $r8;
        org.waveprotocol.wave.model.account.Capability $r4, $r5;
        org.waveprotocol.wave.model.account.Role[] $r6;
        java.util.EnumSet $r1;

        $r0 = new org.waveprotocol.wave.model.account.Role;

        $r1 = staticinvoke <java.util.EnumSet: java.util.EnumSet allOf(java.lang.Class)>(class "Lorg/waveprotocol/wave/model/account/Capability;");

        specialinvoke $r0.<org.waveprotocol.wave.model.account.Role: void <init>(java.lang.String,int,java.util.Set)>("FULL", 0, $r1);

        <org.waveprotocol.wave.model.account.Role: org.waveprotocol.wave.model.account.Role FULL> = $r0;

        $r2 = new org.waveprotocol.wave.model.account.Role;

        $r5 = <org.waveprotocol.wave.model.account.Capability: org.waveprotocol.wave.model.account.Capability READ>;

        $r3 = newarray (org.waveprotocol.wave.model.account.Capability)[1];

        $r4 = <org.waveprotocol.wave.model.account.Capability: org.waveprotocol.wave.model.account.Capability INDEX>;

        $r3[0] = $r4;

        specialinvoke $r2.<org.waveprotocol.wave.model.account.Role: void <init>(java.lang.String,int,org.waveprotocol.wave.model.account.Capability,org.waveprotocol.wave.model.account.Capability[])>("READ_ONLY", 1, $r5, $r3);

        <org.waveprotocol.wave.model.account.Role: org.waveprotocol.wave.model.account.Role READ_ONLY> = $r2;

        $r6 = newarray (org.waveprotocol.wave.model.account.Role)[2];

        $r7 = <org.waveprotocol.wave.model.account.Role: org.waveprotocol.wave.model.account.Role FULL>;

        $r6[0] = $r7;

        $r8 = <org.waveprotocol.wave.model.account.Role: org.waveprotocol.wave.model.account.Role READ_ONLY>;

        $r6[1] = $r8;

        <org.waveprotocol.wave.model.account.Role: org.waveprotocol.wave.model.account.Role[] $VALUES> = $r6;

        return;
    }
}
