public abstract class com.mycila.inject.internal.guava.collect.GenericMapMaker extends java.lang.Object
{
    com.mycila.inject.internal.guava.collect.MapMaker$RemovalListener removalListener;

    void <init>()
    {
        com.mycila.inject.internal.guava.collect.GenericMapMaker r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.GenericMapMaker;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    abstract com.mycila.inject.internal.guava.collect.GenericMapMaker keyEquivalence(com.mycila.inject.internal.guava.base.Equivalence);

    abstract com.mycila.inject.internal.guava.collect.GenericMapMaker valueEquivalence(com.mycila.inject.internal.guava.base.Equivalence);

    public abstract com.mycila.inject.internal.guava.collect.GenericMapMaker initialCapacity(int);

    public abstract com.mycila.inject.internal.guava.collect.GenericMapMaker maximumSize(int);

    abstract com.mycila.inject.internal.guava.collect.GenericMapMaker strongKeys();

    public abstract com.mycila.inject.internal.guava.collect.GenericMapMaker concurrencyLevel(int);

    public abstract com.mycila.inject.internal.guava.collect.GenericMapMaker weakKeys();

    abstract com.mycila.inject.internal.guava.collect.GenericMapMaker strongValues();

    public abstract com.mycila.inject.internal.guava.collect.GenericMapMaker softKeys();

    public abstract com.mycila.inject.internal.guava.collect.GenericMapMaker weakValues();

    public abstract com.mycila.inject.internal.guava.collect.GenericMapMaker softValues();

    public abstract com.mycila.inject.internal.guava.collect.GenericMapMaker expiration(long, java.util.concurrent.TimeUnit);

    public abstract com.mycila.inject.internal.guava.collect.GenericMapMaker expireAfterWrite(long, java.util.concurrent.TimeUnit);

    public abstract com.mycila.inject.internal.guava.collect.GenericMapMaker expireAfterAccess(long, java.util.concurrent.TimeUnit);

    com.mycila.inject.internal.guava.collect.MapMaker$RemovalListener getRemovalListener()
    {
        com.mycila.inject.internal.guava.collect.MapMaker$RemovalListener $r2, $r4;
        java.lang.Object $r3;
        com.mycila.inject.internal.guava.collect.GenericMapMaker r0;
        com.mycila.inject.internal.guava.collect.GenericMapMaker$NullListener $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.GenericMapMaker;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.GenericMapMaker: com.mycila.inject.internal.guava.collect.MapMaker$RemovalListener removalListener>;

        $r1 = <com.mycila.inject.internal.guava.collect.GenericMapMaker$NullListener: com.mycila.inject.internal.guava.collect.GenericMapMaker$NullListener INSTANCE>;

        $r3 = staticinvoke <com.mycila.inject.internal.guava.base.Objects: java.lang.Object firstNonNull(java.lang.Object,java.lang.Object)>($r2, $r1);

        $r4 = (com.mycila.inject.internal.guava.collect.MapMaker$RemovalListener) $r3;

        return $r4;
    }

    public abstract java.util.concurrent.ConcurrentMap makeMap();

    abstract com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap makeCustomMap();

    public abstract java.util.concurrent.ConcurrentMap makeComputingMap(com.mycila.inject.internal.guava.base.Function);
}
