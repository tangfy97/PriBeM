class org.apache.commons.compress.archivers.sevenz.LZMA2Decoder extends org.apache.commons.compress.archivers.sevenz.CoderBase
{

    void <init>()
    {
        java.lang.Class[] $r1;
        org.apache.commons.compress.archivers.sevenz.LZMA2Decoder r0;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder;

        $r1 = newarray (java.lang.Class)[2];

        $r1[0] = class "Lorg/tukaani/xz/LZMA2Options;";

        $r1[1] = class "Ljava/lang/Number;";

        specialinvoke r0.<org.apache.commons.compress.archivers.sevenz.CoderBase: void <init>(java.lang.Class[])>($r1);

        return;
    }

    java.io.InputStream decode(java.io.InputStream, org.apache.commons.compress.archivers.sevenz.Coder, byte[]) throws java.io.IOException
    {
        byte[] r7;
        java.io.IOException $r5;
        java.lang.IllegalArgumentException $r4;
        org.apache.commons.compress.archivers.sevenz.Coder r1;
        org.tukaani.xz.LZMA2InputStream $r2;
        int $i0;
        java.lang.String $r6;
        org.apache.commons.compress.archivers.sevenz.LZMA2Decoder r0;
        java.io.InputStream r3;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder;

        r3 := @parameter0: java.io.InputStream;

        r1 := @parameter1: org.apache.commons.compress.archivers.sevenz.Coder;

        r7 := @parameter2: byte[];

     label1:
        $i0 = specialinvoke r0.<org.apache.commons.compress.archivers.sevenz.LZMA2Decoder: int getDictionarySize(org.apache.commons.compress.archivers.sevenz.Coder)>(r1);

        $r2 = new org.tukaani.xz.LZMA2InputStream;

        specialinvoke $r2.<org.tukaani.xz.LZMA2InputStream: void <init>(java.io.InputStream,int)>(r3, $i0);

     label2:
        return $r2;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.io.IOException;

        $r6 = virtualinvoke $r4.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r6);

        throw $r5;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    java.io.OutputStream encode(java.io.OutputStream, java.lang.Object) throws java.io.IOException
    {
        java.io.OutputStream r4;
        java.lang.Object r1;
        org.tukaani.xz.FinishableOutputStream $r5;
        org.tukaani.xz.FinishableWrapperOutputStream $r3;
        org.apache.commons.compress.archivers.sevenz.LZMA2Decoder r0;
        org.tukaani.xz.LZMA2Options $r2;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder;

        r4 := @parameter0: java.io.OutputStream;

        r1 := @parameter1: java.lang.Object;

        $r2 = specialinvoke r0.<org.apache.commons.compress.archivers.sevenz.LZMA2Decoder: org.tukaani.xz.LZMA2Options getOptions(java.lang.Object)>(r1);

        $r3 = new org.tukaani.xz.FinishableWrapperOutputStream;

        specialinvoke $r3.<org.tukaani.xz.FinishableWrapperOutputStream: void <init>(java.io.OutputStream)>(r4);

        $r5 = virtualinvoke $r2.<org.tukaani.xz.LZMA2Options: org.tukaani.xz.FinishableOutputStream getOutputStream(org.tukaani.xz.FinishableOutputStream)>($r3);

        return $r5;
    }

    byte[] getOptionsAsProperties(java.lang.Object)
    {
        byte[] $r2;
        byte $b8;
        int $i0, $i1, $i2, $i3, i4, $i5, $i6, $i7;
        java.lang.Object r1;
        org.apache.commons.compress.archivers.sevenz.LZMA2Decoder r0;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder;

        r1 := @parameter0: java.lang.Object;

        $i0 = specialinvoke r0.<org.apache.commons.compress.archivers.sevenz.LZMA2Decoder: int getDictSize(java.lang.Object)>(r1);

        $i1 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i0);

        $i2 = 30 - $i1;

        $i3 = $i0 >>> $i2;

        i4 = $i3 - 2;

        $r2 = newarray (byte)[1];

        $i5 = 19 - $i1;

        $i6 = $i5 * 2;

        $i7 = $i6 + i4;

        $b8 = (byte) $i7;

        $r2[0] = $b8;

        return $r2;
    }

    java.lang.Object getOptionsFromCoder(org.apache.commons.compress.archivers.sevenz.Coder, java.io.InputStream)
    {
        int $i0;
        org.apache.commons.compress.archivers.sevenz.LZMA2Decoder r0;
        org.apache.commons.compress.archivers.sevenz.Coder r1;
        java.lang.Integer $r2;
        java.io.InputStream r3;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder;

        r1 := @parameter0: org.apache.commons.compress.archivers.sevenz.Coder;

        r3 := @parameter1: java.io.InputStream;

        $i0 = specialinvoke r0.<org.apache.commons.compress.archivers.sevenz.LZMA2Decoder: int getDictionarySize(org.apache.commons.compress.archivers.sevenz.Coder)>(r1);

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r2;
    }

    private int getDictSize(java.lang.Object)
    {
        int $i0, $i1;
        java.lang.Object r0;
        org.apache.commons.compress.archivers.sevenz.LZMA2Decoder r1;
        boolean $z0;
        org.tukaani.xz.LZMA2Options $r2;

        r1 := @this: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.tukaani.xz.LZMA2Options;

        if $z0 == 0 goto label1;

        $r2 = (org.tukaani.xz.LZMA2Options) r0;

        $i1 = virtualinvoke $r2.<org.tukaani.xz.LZMA2Options: int getDictSize()>();

        return $i1;

     label1:
        $i0 = specialinvoke r1.<org.apache.commons.compress.archivers.sevenz.LZMA2Decoder: int numberOptionOrDefault(java.lang.Object)>(r0);

        return $i0;
    }

    private int getDictionarySize(org.apache.commons.compress.archivers.sevenz.Coder) throws java.lang.IllegalArgumentException
    {
        byte[] $r1;
        short s1, $s2, $s3, $s6, $s8, $s10;
        byte $b0;
        int $i4, $i5, $i7, $i11, $i12, $i14, $i15, $i16;
        java.lang.IllegalArgumentException $r5, $r6;
        org.apache.commons.compress.archivers.sevenz.Coder r0;
        org.apache.commons.compress.archivers.sevenz.LZMA2Decoder r4;

        r4 := @this: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder;

        r0 := @parameter0: org.apache.commons.compress.archivers.sevenz.Coder;

        $r1 = r0.<org.apache.commons.compress.archivers.sevenz.Coder: byte[] properties>;

        $b0 = $r1[0];

        $s8 = (short) $b0;

        s1 = 255 & $s8;

        $s10 = (short) -64;

        $s2 = s1 & $s10;

        if $s2 == 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unsupported LZMA2 property bits");

        throw $r5;

     label1:
        $i11 = (int) s1;

        if $i11 <= 40 goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Dictionary larger than 4GiB maximum size");

        throw $r6;

     label2:
        $i12 = (int) s1;

        if $i12 != 40 goto label3;

        $i14 = (int) -1;

        return $i14;

     label3:
        $s3 = s1 & 1;

        $s6 = 2 | $s3;

        $i15 = (int) s1;

        $i4 = $i15 / 2;

        $i5 = $i4 + 11;

        $i16 = (int) $s6;

        $i7 = $i16 << $i5;

        return $i7;
    }

    private org.tukaani.xz.LZMA2Options getOptions(java.lang.Object) throws java.io.IOException
    {
        int $i0;
        java.lang.Object r0;
        org.apache.commons.compress.archivers.sevenz.LZMA2Decoder r2;
        boolean $z0;
        org.tukaani.xz.LZMA2Options $r1, $r3;

        r2 := @this: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.tukaani.xz.LZMA2Options;

        if $z0 == 0 goto label1;

        $r3 = (org.tukaani.xz.LZMA2Options) r0;

        return $r3;

     label1:
        $r1 = new org.tukaani.xz.LZMA2Options;

        specialinvoke $r1.<org.tukaani.xz.LZMA2Options: void <init>()>();

        $i0 = specialinvoke r2.<org.apache.commons.compress.archivers.sevenz.LZMA2Decoder: int numberOptionOrDefault(java.lang.Object)>(r0);

        virtualinvoke $r1.<org.tukaani.xz.LZMA2Options: void setDictSize(int)>($i0);

        return $r1;
    }

    private int numberOptionOrDefault(java.lang.Object)
    {
        int $i0;
        java.lang.Object r0;
        org.apache.commons.compress.archivers.sevenz.LZMA2Decoder r1;

        r1 := @this: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder;

        r0 := @parameter0: java.lang.Object;

        $i0 = staticinvoke <org.apache.commons.compress.archivers.sevenz.LZMA2Decoder: int numberOptionOrDefault(java.lang.Object,int)>(r0, 8388608);

        return $i0;
    }
}
