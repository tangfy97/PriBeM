final class org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$VersionIncrementingSink extends java.lang.Object implements org.waveprotocol.wave.model.operation.SilentOperationSink
{
    private final org.waveprotocol.wave.model.wave.data.WaveletData data;
    private final org.waveprotocol.wave.model.operation.SilentOperationSink output;

    public void <init>(org.waveprotocol.wave.model.wave.data.WaveletData, org.waveprotocol.wave.model.operation.SilentOperationSink)
    {
        org.waveprotocol.wave.model.operation.SilentOperationSink r2;
        org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$VersionIncrementingSink r0;
        org.waveprotocol.wave.model.wave.data.WaveletData r1;

        r0 := @this: org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$VersionIncrementingSink;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData;

        r2 := @parameter1: org.waveprotocol.wave.model.operation.SilentOperationSink;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$VersionIncrementingSink: org.waveprotocol.wave.model.wave.data.WaveletData data> = r1;

        r0.<org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$VersionIncrementingSink: org.waveprotocol.wave.model.operation.SilentOperationSink output> = r2;

        return;
    }

    public void consume(org.waveprotocol.wave.model.operation.wave.WaveletOperation)
    {
        org.waveprotocol.wave.model.operation.SilentOperationSink $r4;
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r0;
        org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$VersionIncrementingSink r2;
        org.waveprotocol.wave.model.operation.OperationException $r5;
        org.waveprotocol.wave.model.operation.wave.VersionUpdateOp $r1;
        org.waveprotocol.wave.model.wave.data.WaveletData $r3;
        org.waveprotocol.wave.model.operation.OperationRuntimeException $r6;

        r2 := @this: org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$VersionIncrementingSink;

        r0 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletOperation;

     label1:
        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.WaveletOperation: org.waveprotocol.wave.model.operation.wave.VersionUpdateOp createVersionUpdateOp(long,org.waveprotocol.wave.model.version.HashedVersion)>(1L, null);

        $r3 = r2.<org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$VersionIncrementingSink: org.waveprotocol.wave.model.wave.data.WaveletData data>;

        virtualinvoke $r1.<org.waveprotocol.wave.model.operation.wave.VersionUpdateOp: void apply(org.waveprotocol.wave.model.wave.data.WaveletData)>($r3);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.waveprotocol.wave.model.operation.OperationRuntimeException;

        specialinvoke $r6.<org.waveprotocol.wave.model.operation.OperationRuntimeException: void <init>(java.lang.String,org.waveprotocol.wave.model.operation.OperationException)>("test sink verison update failed", $r5);

        throw $r6;

     label4:
        $r4 = r2.<org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$VersionIncrementingSink: org.waveprotocol.wave.model.operation.SilentOperationSink output>;

        interfaceinvoke $r4.<org.waveprotocol.wave.model.operation.SilentOperationSink: void consume(org.waveprotocol.wave.model.operation.Operation)>(r0);

        return;

        catch org.waveprotocol.wave.model.operation.OperationException from label1 to label2 with label3;
    }

    public volatile void consume(org.waveprotocol.wave.model.operation.Operation)
    {
        org.waveprotocol.wave.model.operation.Operation r1;
        org.waveprotocol.wave.model.operation.wave.WaveletOperation $r2;
        org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$VersionIncrementingSink r0;

        r0 := @this: org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$VersionIncrementingSink;

        r1 := @parameter0: org.waveprotocol.wave.model.operation.Operation;

        $r2 = (org.waveprotocol.wave.model.operation.wave.WaveletOperation) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.testing.OpBasedWaveletFactory$VersionIncrementingSink: void consume(org.waveprotocol.wave.model.operation.wave.WaveletOperation)>($r2);

        return;
    }
}
