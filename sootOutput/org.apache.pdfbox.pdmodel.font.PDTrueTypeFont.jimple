public class org.apache.pdfbox.pdmodel.font.PDTrueTypeFont extends org.apache.pdfbox.pdmodel.font.PDSimpleFont
{
    private static final org.apache.commons.logging.Log log;
    private static final int START_RANGE_F000;
    private static final int START_RANGE_F100;
    private static final int START_RANGE_F200;
    private org.apache.fontbox.ttf.CMAPEncodingEntry cmapWinUnicode;
    private org.apache.fontbox.ttf.CMAPEncodingEntry cmapWinSymbol;
    private org.apache.fontbox.ttf.CMAPEncodingEntry cmapMacintoshSymbol;
    private boolean cmapInitialized;
    private org.apache.fontbox.ttf.TrueTypeFont trueTypeFont;
    private java.util.HashMap advanceWidths;
    public static final java.lang.String UNKNOWN_FONT;
    private java.awt.Font awtFont;
    private static java.util.Properties externalFonts;
    private static java.util.Map loadedExternalFonts;

    public void <init>()
    {
        org.apache.pdfbox.cos.COSName $r2, $r3;
        org.apache.pdfbox.cos.COSDictionary $r4;
        java.util.HashMap $r1;
        org.apache.pdfbox.pdmodel.font.PDTrueTypeFont r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDTrueTypeFont;

        specialinvoke r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: void <init>()>();

        r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.fontbox.ttf.CMAPEncodingEntry cmapWinUnicode> = null;

        r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.fontbox.ttf.CMAPEncodingEntry cmapWinSymbol> = null;

        r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.fontbox.ttf.CMAPEncodingEntry cmapMacintoshSymbol> = null;

        r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: boolean cmapInitialized> = 0;

        r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.fontbox.ttf.TrueTypeFont trueTypeFont> = null;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: java.util.HashMap advanceWidths> = $r1;

        r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: java.awt.Font awtFont> = null;

        $r4 = r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.pdfbox.cos.COSDictionary font>;

        $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName SUBTYPE>;

        $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName TRUE_TYPE>;

        virtualinvoke $r4.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r3, $r2);

        return;
    }

    public void <init>(org.apache.pdfbox.cos.COSDictionary) throws java.io.IOException
    {
        org.apache.pdfbox.cos.COSDictionary r1;
        java.util.HashMap $r2;
        org.apache.pdfbox.pdmodel.font.PDTrueTypeFont r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDTrueTypeFont;

        r1 := @parameter0: org.apache.pdfbox.cos.COSDictionary;

        specialinvoke r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: void <init>(org.apache.pdfbox.cos.COSDictionary)>(r1);

        r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.fontbox.ttf.CMAPEncodingEntry cmapWinUnicode> = null;

        r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.fontbox.ttf.CMAPEncodingEntry cmapWinSymbol> = null;

        r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.fontbox.ttf.CMAPEncodingEntry cmapMacintoshSymbol> = null;

        r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: boolean cmapInitialized> = 0;

        r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.fontbox.ttf.TrueTypeFont trueTypeFont> = null;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: java.util.HashMap advanceWidths> = $r2;

        r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: java.awt.Font awtFont> = null;

        specialinvoke r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: void ensureFontDescriptor()>();

        return;
    }

    public static org.apache.pdfbox.pdmodel.font.PDTrueTypeFont loadTTF(org.apache.pdfbox.pdmodel.PDDocument, java.lang.String) throws java.io.IOException
    {
        org.apache.pdfbox.pdmodel.PDDocument r0;
        java.lang.String r2;
        org.apache.pdfbox.pdmodel.font.PDTrueTypeFont $r3;
        java.io.File $r1;

        r0 := @parameter0: org.apache.pdfbox.pdmodel.PDDocument;

        r2 := @parameter1: java.lang.String;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>(r2);

        $r3 = staticinvoke <org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.pdfbox.pdmodel.font.PDTrueTypeFont loadTTF(org.apache.pdfbox.pdmodel.PDDocument,java.io.File)>(r0, $r1);

        return $r3;
    }

    public static org.apache.pdfbox.pdmodel.font.PDTrueTypeFont loadTTF(org.apache.pdfbox.pdmodel.PDDocument, java.io.File) throws java.io.IOException
    {
        org.apache.pdfbox.pdmodel.PDDocument r0;
        java.io.FileInputStream $r1;
        org.apache.pdfbox.pdmodel.font.PDTrueTypeFont $r3;
        java.io.File r2;

        r0 := @parameter0: org.apache.pdfbox.pdmodel.PDDocument;

        r2 := @parameter1: java.io.File;

        $r1 = new java.io.FileInputStream;

        specialinvoke $r1.<java.io.FileInputStream: void <init>(java.io.File)>(r2);

        $r3 = staticinvoke <org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.pdfbox.pdmodel.font.PDTrueTypeFont loadTTF(org.apache.pdfbox.pdmodel.PDDocument,java.io.InputStream)>(r0, $r1);

        return $r3;
    }

    public static org.apache.pdfbox.pdmodel.font.PDTrueTypeFont loadTTF(org.apache.pdfbox.pdmodel.PDDocument, java.io.InputStream) throws java.io.IOException
    {
        org.apache.pdfbox.encoding.WinAnsiEncoding $r2;
        org.apache.pdfbox.pdmodel.PDDocument r0;
        org.apache.pdfbox.pdmodel.font.PDTrueTypeFont $r3;
        java.io.InputStream r1;

        r0 := @parameter0: org.apache.pdfbox.pdmodel.PDDocument;

        r1 := @parameter1: java.io.InputStream;

        $r2 = new org.apache.pdfbox.encoding.WinAnsiEncoding;

        specialinvoke $r2.<org.apache.pdfbox.encoding.WinAnsiEncoding: void <init>()>();

        $r3 = staticinvoke <org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.pdfbox.pdmodel.font.PDTrueTypeFont loadTTF(org.apache.pdfbox.pdmodel.PDDocument,java.io.InputStream,org.apache.pdfbox.encoding.Encoding)>(r0, r1, $r2);

        return $r3;
    }

    public static org.apache.pdfbox.pdmodel.font.PDTrueTypeFont loadTTF(org.apache.pdfbox.pdmodel.PDDocument, java.io.InputStream, org.apache.pdfbox.encoding.Encoding) throws java.io.IOException
    {
        org.apache.pdfbox.cos.COSName $r4;
        byte[] $r5;
        org.apache.pdfbox.encoding.Encoding r6;
        org.apache.pdfbox.pdmodel.PDDocument r1;
        org.apache.pdfbox.pdmodel.common.PDStream $r0;
        org.apache.pdfbox.pdmodel.font.PDTrueTypeFont $r7;
        int $i0;
        org.apache.pdfbox.cos.COSStream $r3;
        java.io.InputStream r2;

        r1 := @parameter0: org.apache.pdfbox.pdmodel.PDDocument;

        r2 := @parameter1: java.io.InputStream;

        r6 := @parameter2: org.apache.pdfbox.encoding.Encoding;

        $r0 = new org.apache.pdfbox.pdmodel.common.PDStream;

        specialinvoke $r0.<org.apache.pdfbox.pdmodel.common.PDStream: void <init>(org.apache.pdfbox.pdmodel.PDDocument,java.io.InputStream,boolean)>(r1, r2, 0);

        $r3 = virtualinvoke $r0.<org.apache.pdfbox.pdmodel.common.PDStream: org.apache.pdfbox.cos.COSStream getStream()>();

        $r4 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName LENGTH1>;

        $r5 = virtualinvoke $r0.<org.apache.pdfbox.pdmodel.common.PDStream: byte[] getByteArray()>();

        $i0 = lengthof $r5;

        virtualinvoke $r3.<org.apache.pdfbox.cos.COSStream: void setInt(org.apache.pdfbox.cos.COSName,int)>($r4, $i0);

        virtualinvoke $r0.<org.apache.pdfbox.pdmodel.common.PDStream: void addCompression()>();

        $r7 = staticinvoke <org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.pdfbox.pdmodel.font.PDTrueTypeFont loadTTF(org.apache.pdfbox.pdmodel.common.PDStream,org.apache.pdfbox.encoding.Encoding)>($r0, r6);

        return $r7;
    }

    public static org.apache.pdfbox.pdmodel.font.PDTrueTypeFont loadTTF(org.apache.pdfbox.pdmodel.common.PDStream, org.apache.pdfbox.encoding.Encoding) throws java.io.IOException
    {
        java.lang.Throwable $r6;
        org.apache.pdfbox.encoding.Encoding r1;
        org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary $r3;
        org.apache.pdfbox.cos.COSBase $r2;
        org.apache.pdfbox.pdmodel.common.PDStream r4;
        org.apache.pdfbox.pdmodel.font.PDTrueTypeFont $r0;
        java.io.InputStream $r5;

        r4 := @parameter0: org.apache.pdfbox.pdmodel.common.PDStream;

        r1 := @parameter1: org.apache.pdfbox.encoding.Encoding;

        $r0 = new org.apache.pdfbox.pdmodel.font.PDTrueTypeFont;

        specialinvoke $r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: void <init>()>();

        virtualinvoke $r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: void setFontEncoding(org.apache.pdfbox.encoding.Encoding)>(r1);

        $r2 = virtualinvoke r1.<org.apache.pdfbox.encoding.Encoding: org.apache.pdfbox.cos.COSBase getCOSObject()>();

        virtualinvoke $r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: void setEncoding(org.apache.pdfbox.cos.COSBase)>($r2);

        $r3 = new org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary;

        specialinvoke $r3.<org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary: void <init>()>();

        virtualinvoke $r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: void setFontDescriptor(org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary)>($r3);

        virtualinvoke $r3.<org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary: void setFontFile2(org.apache.pdfbox.pdmodel.common.PDStream)>(r4);

        $r5 = virtualinvoke r4.<org.apache.pdfbox.pdmodel.common.PDStream: java.io.InputStream createInputStream()>();

     label1:
        specialinvoke $r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: void loadDescriptorDictionary(org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary,java.io.InputStream)>($r3, $r5);

        goto label6;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        goto label7;

     label4:
        throw $r6;

     label5:
        return $r0;

     label6:
        virtualinvoke $r5.<java.io.InputStream: void close()>();

        goto label2;

     label7:
        virtualinvoke $r5.<java.io.InputStream: void close()>();

        goto label4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void ensureFontDescriptor() throws java.io.IOException
    {
        java.lang.Throwable $r4;
        org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary $r2;
        org.apache.pdfbox.pdmodel.font.PDTrueTypeFont r0;
        org.apache.pdfbox.pdmodel.font.PDFontDescriptor $r1;
        java.io.InputStream $r3;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDTrueTypeFont;

        $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.pdfbox.pdmodel.font.PDFontDescriptor getFontDescriptor()>();

        if $r1 != null goto label5;

        $r2 = new org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary;

        specialinvoke $r2.<org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary: void <init>()>();

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: void setFontDescriptor(org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary)>($r2);

        $r3 = specialinvoke r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: java.io.InputStream getExternalTTFData()>();

        if $r3 == null goto label5;

     label1:
        specialinvoke r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: void loadDescriptorDictionary(org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary,java.io.InputStream)>($r2, $r3);

        goto label6;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        goto label7;

     label4:
        throw $r4;

     label5:
        return;

     label6:
        virtualinvoke $r3.<java.io.InputStream: void close()>();

        goto label2;

     label7:
        virtualinvoke $r3.<java.io.InputStream: void close()>();

        goto label4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void loadDescriptorDictionary(org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary, java.io.InputStream) throws java.io.IOException
    {
        java.lang.Integer $r22, $r25, $r37, $r40;
        byte $b10;
        java.util.Map $r19;
        org.apache.fontbox.ttf.TTFParser $r60;
        org.apache.fontbox.ttf.OS2WindowsMetricsTable $r5;
        org.apache.fontbox.util.BoundingBox $r48, $r50;
        long $l9;
        short $s3, $s4, $s5, $s6, $s7, $s8;
        org.apache.fontbox.ttf.NameRecord r57;
        org.apache.fontbox.ttf.HorizontalHeaderTable $r9;
        int[] $r27;
        org.apache.fontbox.ttf.NamingTable $r3;
        org.apache.fontbox.ttf.CMAPEncodingEntry $r43, $r44, r58;
        org.apache.fontbox.ttf.TrueTypeFont $r2, r56;
        org.apache.fontbox.ttf.HorizontalMetricsTable $r26;
        int $i0, $i1, $i2, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, i30, $i31, $i32, i33, i34, $i35, i36, $i37;
        org.apache.fontbox.ttf.CMAPEncodingEntry[] $r16;
        java.lang.Object $r21, $r24, $r31, $r33, $r36, $r39, $r51;
        java.lang.Float $r38, $r41, $r42;
        org.apache.fontbox.ttf.GlyphData $r47, $r49;
        java.util.Set $r20, $r23, $r29;
        org.apache.pdfbox.pdmodel.font.PDTrueTypeFont r17;
        org.apache.fontbox.ttf.GlyphTable $r10;
        org.apache.fontbox.ttf.GlyphData[] $r11;
        java.lang.Throwable $r55;
        java.util.ArrayList $r62;
        org.apache.fontbox.ttf.CMAPTable $r15;
        java.lang.String r34, $r35, $r45, $r46, $r52, $r53, $r54;
        java.util.Map$Entry r32;
        org.apache.fontbox.ttf.PostScriptTable $r12;
        org.apache.pdfbox.encoding.Encoding $r18;
        boolean $z0, $z1, $z2, $z3, z4, $z5, $z6, z7, z8;
        org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary r6;
        java.util.List $r4;
        org.apache.pdfbox.encoding.WinAnsiEncoding r59;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28;
        java.lang.String[] $r13;
        org.apache.fontbox.ttf.HeaderTable $r7;
        java.util.Iterator $r30;
        org.apache.pdfbox.pdmodel.common.PDRectangle $r14, $r61;
        java.io.InputStream r1;

        r17 := @this: org.apache.pdfbox.pdmodel.font.PDTrueTypeFont;

        r6 := @parameter0: org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary;

        r1 := @parameter1: java.io.InputStream;

        r56 = null;

     label01:
        $r60 = new org.apache.fontbox.ttf.TTFParser;

        specialinvoke $r60.<org.apache.fontbox.ttf.TTFParser: void <init>()>();

        $r2 = virtualinvoke $r60.<org.apache.fontbox.ttf.TTFParser: org.apache.fontbox.ttf.TrueTypeFont parseTTF(java.io.InputStream)>(r1);

        r56 = $r2;

        $r3 = virtualinvoke $r2.<org.apache.fontbox.ttf.TrueTypeFont: org.apache.fontbox.ttf.NamingTable getNaming()>();

        $r4 = virtualinvoke $r3.<org.apache.fontbox.ttf.NamingTable: java.util.List getNameRecords()>();

        i30 = 0;

     label02:
        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        if i30 >= $i0 goto label05;

        $r51 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i30);

        r57 = (org.apache.fontbox.ttf.NameRecord) $r51;

        $i28 = virtualinvoke r57.<org.apache.fontbox.ttf.NameRecord: int getNameId()>();

        if $i28 != 6 goto label03;

        $r53 = virtualinvoke r57.<org.apache.fontbox.ttf.NameRecord: java.lang.String getString()>();

        virtualinvoke r17.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: void setBaseFont(java.lang.String)>($r53);

        $r54 = virtualinvoke r57.<org.apache.fontbox.ttf.NameRecord: java.lang.String getString()>();

        virtualinvoke r6.<org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary: void setFontName(java.lang.String)>($r54);

        goto label04;

     label03:
        $i29 = virtualinvoke r57.<org.apache.fontbox.ttf.NameRecord: int getNameId()>();

        if $i29 != 1 goto label04;

        $r52 = virtualinvoke r57.<org.apache.fontbox.ttf.NameRecord: java.lang.String getString()>();

        virtualinvoke r6.<org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary: void setFontFamily(java.lang.String)>($r52);

     label04:
        i30 = i30 + 1;

        goto label02;

     label05:
        $r5 = virtualinvoke $r2.<org.apache.fontbox.ttf.TrueTypeFont: org.apache.fontbox.ttf.OS2WindowsMetricsTable getOS2Windows()>();

        z4 = 0;

        z8 = 0;

        z7 = 0;

        $i1 = virtualinvoke $r5.<org.apache.fontbox.ttf.OS2WindowsMetricsTable: int getFamilyClass()>();

        tableswitch($i1)
        {
            case 1: goto label08;
            case 2: goto label09;
            case 3: goto label08;
            case 4: goto label08;
            case 5: goto label08;
            case 6: goto label09;
            case 7: goto label08;
            case 8: goto label09;
            case 9: goto label09;
            case 10: goto label07;
            case 11: goto label09;
            case 12: goto label06;
            default: goto label09;
        };

     label06:
        z4 = 1;

        z8 = 1;

        z7 = 1;

        goto label09;

     label07:
        virtualinvoke r6.<org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary: void setScript(boolean)>(1);

        goto label09;

     label08:
        virtualinvoke r6.<org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary: void setSerif(boolean)>(1);

        goto label09;

     label09:
        $i31 = virtualinvoke $r5.<org.apache.fontbox.ttf.OS2WindowsMetricsTable: int getWidthClass()>();

        tableswitch($i31)
        {
            case 1: goto label10;
            case 2: goto label11;
            case 3: goto label12;
            case 4: goto label13;
            case 5: goto label14;
            case 6: goto label15;
            case 7: goto label16;
            case 8: goto label17;
            case 9: goto label18;
            default: goto label19;
        };

     label10:
        virtualinvoke r6.<org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary: void setFontStretch(java.lang.String)>("UltraCondensed");

        goto label19;

     label11:
        virtualinvoke r6.<org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary: void setFontStretch(java.lang.String)>("ExtraCondensed");

        goto label19;

     label12:
        virtualinvoke r6.<org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary: void setFontStretch(java.lang.String)>("Condensed");

        goto label19;

     label13:
        virtualinvoke r6.<org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary: void setFontStretch(java.lang.String)>("SemiCondensed");

        goto label19;

     label14:
        virtualinvoke r6.<org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary: void setFontStretch(java.lang.String)>("Normal");

        goto label19;

     label15:
        virtualinvoke r6.<org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary: void setFontStretch(java.lang.String)>("SemiExpanded");

        goto label19;

     label16:
        virtualinvoke r6.<org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary: void setFontStretch(java.lang.String)>("Expanded");

        goto label19;

     label17:
        virtualinvoke r6.<org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary: void setFontStretch(java.lang.String)>("ExtraExpanded");

        goto label19;

     label18:
        virtualinvoke r6.<org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary: void setFontStretch(java.lang.String)>("UltraExpanded");

        goto label19;

     label19:
        $i32 = virtualinvoke $r5.<org.apache.fontbox.ttf.OS2WindowsMetricsTable: int getWeightClass()>();

        $f28 = (float) $i32;

        virtualinvoke r6.<org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary: void setFontWeight(float)>($f28);

        virtualinvoke r6.<org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary: void setSymbolic(boolean)>(z8);

        if z7 != 0 goto label20;

        $z5 = 1;

        goto label21;

     label20:
        $z5 = 0;

     label21:
        virtualinvoke r6.<org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary: void setNonSymbolic(boolean)>($z5);

        $r7 = virtualinvoke $r2.<org.apache.fontbox.ttf.TrueTypeFont: org.apache.fontbox.ttf.HeaderTable getHeader()>();

        $r61 = new org.apache.pdfbox.pdmodel.common.PDRectangle;

        specialinvoke $r61.<org.apache.pdfbox.pdmodel.common.PDRectangle: void <init>()>();

        $i2 = virtualinvoke $r7.<org.apache.fontbox.ttf.HeaderTable: int getUnitsPerEm()>();

        $f0 = (float) $i2;

        $f27 = 1000.0F / $f0;

        $s3 = virtualinvoke $r7.<org.apache.fontbox.ttf.HeaderTable: short getXMin()>();

        $f1 = (float) $s3;

        $f2 = $f1 * $f27;

        virtualinvoke $r61.<org.apache.pdfbox.pdmodel.common.PDRectangle: void setLowerLeftX(float)>($f2);

        $s4 = virtualinvoke $r7.<org.apache.fontbox.ttf.HeaderTable: short getYMin()>();

        $f3 = (float) $s4;

        $f4 = $f3 * $f27;

        virtualinvoke $r61.<org.apache.pdfbox.pdmodel.common.PDRectangle: void setLowerLeftY(float)>($f4);

        $s5 = virtualinvoke $r7.<org.apache.fontbox.ttf.HeaderTable: short getXMax()>();

        $f5 = (float) $s5;

        $f6 = $f5 * $f27;

        virtualinvoke $r61.<org.apache.pdfbox.pdmodel.common.PDRectangle: void setUpperRightX(float)>($f6);

        $s6 = virtualinvoke $r7.<org.apache.fontbox.ttf.HeaderTable: short getYMax()>();

        $f7 = (float) $s6;

        $f8 = $f7 * $f27;

        virtualinvoke $r61.<org.apache.pdfbox.pdmodel.common.PDRectangle: void setUpperRightY(float)>($f8);

        virtualinvoke r6.<org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary: void setFontBoundingBox(org.apache.pdfbox.pdmodel.common.PDRectangle)>($r61);

        $r9 = virtualinvoke $r2.<org.apache.fontbox.ttf.TrueTypeFont: org.apache.fontbox.ttf.HorizontalHeaderTable getHorizontalHeader()>();

        $s7 = virtualinvoke $r9.<org.apache.fontbox.ttf.HorizontalHeaderTable: short getAscender()>();

        $f9 = (float) $s7;

        $f10 = $f9 * $f27;

        virtualinvoke r6.<org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary: void setAscent(float)>($f10);

        $s8 = virtualinvoke $r9.<org.apache.fontbox.ttf.HorizontalHeaderTable: short getDescender()>();

        $f11 = (float) $s8;

        $f12 = $f11 * $f27;

        virtualinvoke r6.<org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary: void setDescent(float)>($f12);

        $r10 = virtualinvoke $r2.<org.apache.fontbox.ttf.TrueTypeFont: org.apache.fontbox.ttf.GlyphTable getGlyph()>();

        $r11 = virtualinvoke $r10.<org.apache.fontbox.ttf.GlyphTable: org.apache.fontbox.ttf.GlyphData[] getGlyphs()>();

        $r12 = virtualinvoke $r2.<org.apache.fontbox.ttf.TrueTypeFont: org.apache.fontbox.ttf.PostScriptTable getPostScript()>();

        $l9 = virtualinvoke $r12.<org.apache.fontbox.ttf.PostScriptTable: long getIsFixedPitch()>();

        $b10 = $l9 cmp 0L;

        $i37 = (int) $b10;

        if $i37 <= 0 goto label22;

        $z6 = 1;

        goto label23;

     label22:
        $z6 = 0;

     label23:
        virtualinvoke r6.<org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary: void setFixedPitch(boolean)>($z6);

        $f13 = virtualinvoke $r12.<org.apache.fontbox.ttf.PostScriptTable: float getItalicAngle()>();

        virtualinvoke r6.<org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary: void setItalicAngle(float)>($f13);

        $r13 = virtualinvoke $r12.<org.apache.fontbox.ttf.PostScriptTable: java.lang.String[] getGlyphNames()>();

        if $r13 == null goto label27;

        i33 = 0;

     label24:
        $i27 = lengthof $r13;

        if i33 >= $i27 goto label27;

        $r45 = $r13[i33];

        $z2 = virtualinvoke $r45.<java.lang.String: boolean equals(java.lang.Object)>("H");

        if $z2 == 0 goto label25;

        $r49 = $r11[i33];

        $r50 = virtualinvoke $r49.<org.apache.fontbox.ttf.GlyphData: org.apache.fontbox.util.BoundingBox getBoundingBox()>();

        $f25 = virtualinvoke $r50.<org.apache.fontbox.util.BoundingBox: float getUpperRightY()>();

        $f26 = $f25 / $f27;

        virtualinvoke r6.<org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary: void setCapHeight(float)>($f26);

     label25:
        $r46 = $r13[i33];

        $z3 = virtualinvoke $r46.<java.lang.String: boolean equals(java.lang.Object)>("x");

        if $z3 == 0 goto label26;

        $r47 = $r11[i33];

        $r48 = virtualinvoke $r47.<org.apache.fontbox.ttf.GlyphData: org.apache.fontbox.util.BoundingBox getBoundingBox()>();

        $f23 = virtualinvoke $r48.<org.apache.fontbox.util.BoundingBox: float getUpperRightY()>();

        $f24 = $f23 / $f27;

        virtualinvoke r6.<org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary: void setXHeight(float)>($f24);

     label26:
        i33 = i33 + 1;

        goto label24;

     label27:
        $r14 = virtualinvoke r6.<org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary: org.apache.pdfbox.pdmodel.common.PDRectangle getFontBoundingBox()>();

        $f14 = virtualinvoke $r14.<org.apache.pdfbox.pdmodel.common.PDRectangle: float getWidth()>();

        $f15 = $f14 * 0.13F;

        virtualinvoke r6.<org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary: void setStemV(float)>($f15);

        $r15 = virtualinvoke $r2.<org.apache.fontbox.ttf.TrueTypeFont: org.apache.fontbox.ttf.CMAPTable getCMAP()>();

        $r16 = virtualinvoke $r15.<org.apache.fontbox.ttf.CMAPTable: org.apache.fontbox.ttf.CMAPEncodingEntry[] getCmaps()>();

        r58 = null;

        i34 = 0;

     label28:
        $i35 = lengthof $r16;

        if i34 >= $i35 goto label30;

        $r43 = $r16[i34];

        $i24 = virtualinvoke $r43.<org.apache.fontbox.ttf.CMAPEncodingEntry: int getPlatformId()>();

        if $i24 != 3 goto label29;

        $r44 = $r16[i34];

        $i25 = virtualinvoke $r44.<org.apache.fontbox.ttf.CMAPEncodingEntry: int getPlatformEncodingId()>();

        if 1 != $i25 goto label29;

        r58 = $r16[i34];

        goto label30;

     label29:
        i34 = i34 + 1;

        goto label28;

     label30:
        $r18 = virtualinvoke r17.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.pdfbox.encoding.Encoding getFontEncoding()>();

        $r19 = virtualinvoke $r18.<org.apache.pdfbox.encoding.Encoding: java.util.Map getCodeToNameMap()>();

        $r20 = interfaceinvoke $r19.<java.util.Map: java.util.Set keySet()>();

        $r21 = staticinvoke <java.util.Collections: java.lang.Object min(java.util.Collection)>($r20);

        $r22 = (java.lang.Integer) $r21;

        $i11 = virtualinvoke $r22.<java.lang.Integer: int intValue()>();

        $r23 = interfaceinvoke $r19.<java.util.Map: java.util.Set keySet()>();

        $r24 = staticinvoke <java.util.Collections: java.lang.Object max(java.util.Collection)>($r23);

        $r25 = (java.lang.Integer) $r24;

        $i12 = virtualinvoke $r25.<java.lang.Integer: int intValue()>();

        $r26 = virtualinvoke $r2.<org.apache.fontbox.ttf.TrueTypeFont: org.apache.fontbox.ttf.HorizontalMetricsTable getHorizontalMetrics()>();

        $r27 = virtualinvoke $r26.<org.apache.fontbox.ttf.HorizontalMetricsTable: int[] getAdvanceWidth()>();

        $z0 = virtualinvoke r6.<org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary: boolean isFixedPitch()>();

        $i13 = $i12 - $i11;

        $i26 = $i13 + 1;

        $r62 = new java.util.ArrayList;

        specialinvoke $r62.<java.util.ArrayList: void <init>(int)>($i26);

        $i14 = $r27[0];

        $f16 = (float) $i14;

        $f17 = $f16 * $f27;

        $i15 = staticinvoke <java.lang.Math: int round(float)>($f17);

        i36 = 0;

     label31:
        if i36 >= $i26 goto label32;

        $f22 = (float) $i15;

        $r42 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f22);

        interfaceinvoke $r62.<java.util.List: boolean add(java.lang.Object)>($r42);

        i36 = i36 + 1;

        goto label31;

     label32:
        r59 = <org.apache.pdfbox.encoding.WinAnsiEncoding: org.apache.pdfbox.encoding.WinAnsiEncoding INSTANCE>;

        $r29 = interfaceinvoke $r19.<java.util.Map: java.util.Set entrySet()>();

        $r30 = interfaceinvoke $r29.<java.util.Set: java.util.Iterator iterator()>();

     label33:
        $z1 = interfaceinvoke $r30.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label36;

        $r31 = interfaceinvoke $r30.<java.util.Iterator: java.lang.Object next()>();

        r32 = (java.util.Map$Entry) $r31;

        $r33 = interfaceinvoke r32.<java.util.Map$Entry: java.lang.Object getValue()>();

        r34 = (java.lang.String) $r33;

        $r35 = virtualinvoke r59.<org.apache.pdfbox.encoding.Encoding: java.lang.String getCharacter(java.lang.String)>(r34);

        $i16 = virtualinvoke $r35.<java.lang.String: int codePointAt(int)>(0);

        $i17 = virtualinvoke r58.<org.apache.fontbox.ttf.CMAPEncodingEntry: int getGlyphId(int)>($i16);

        if $i17 == 0 goto label35;

        if $z0 == 0 goto label34;

        $r39 = interfaceinvoke r32.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r40 = (java.lang.Integer) $r39;

        $i22 = virtualinvoke $r40.<java.lang.Integer: int intValue()>();

        $i23 = $i22 - $i11;

        $f21 = (float) $i15;

        $r41 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f21);

        interfaceinvoke $r62.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i23, $r41);

        goto label35;

     label34:
        $r36 = interfaceinvoke r32.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r37 = (java.lang.Integer) $r36;

        $i18 = virtualinvoke $r37.<java.lang.Integer: int intValue()>();

        $i20 = $i18 - $i11;

        $i19 = $r27[$i17];

        $f18 = (float) $i19;

        $f19 = $f18 * $f27;

        $i21 = staticinvoke <java.lang.Math: int round(float)>($f19);

        $f20 = (float) $i21;

        $r38 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f20);

        interfaceinvoke $r62.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i20, $r38);

     label35:
        goto label33;

     label36:
        virtualinvoke r17.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: void setWidths(java.util.List)>($r62);

        virtualinvoke r17.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: void setFirstChar(int)>($i11);

        virtualinvoke r17.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: void setLastChar(int)>($i12);

        goto label41;

     label37:
        goto label40;

     label38:
        $r55 := @caughtexception;

        goto label43;

     label39:
        throw $r55;

     label40:
        return;

     label41:
        if $r2 == null goto label42;

        virtualinvoke $r2.<org.apache.fontbox.ttf.TrueTypeFont: void close()>();

     label42:
        goto label37;

     label43:
        if r56 == null goto label44;

        virtualinvoke r56.<org.apache.fontbox.ttf.TrueTypeFont: void close()>();

     label44:
        goto label39;

        catch java.lang.Throwable from label01 to label37 with label38;
        catch java.lang.Throwable from label38 to label39 with label38;
    }

    public java.awt.Font getawtFont() throws java.io.IOException
    {
        byte[] $r57;
        java.io.ByteArrayInputStream $r58;
        org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary r2;
        java.awt.Font $r3, $r6, $r7, $r11, $r24, $r26, $r28, $r30, $r34, $r40, $r59, $r60, $r61, $r62;
        org.apache.pdfbox.pdmodel.font.PDTrueTypeFont r0;
        org.apache.fontbox.ttf.TrueTypeFont $r22;
        java.lang.StringBuilder $r8, $r10, $r13, $r14, $r16, $r18, $r20, $r31, $r33, $r36, $r37, $r42, $r44, $r46, $r49, $r51, $r53;
        org.apache.pdfbox.pdmodel.font.PDFontDescriptor $r1;
        java.awt.FontFormatException $r41, $r48, $r55;
        java.lang.String $r5, $r12, $r15, $r19, $r21, $r25, $r29, $r35, $r38, $r39, $r45, $r47, $r52, $r54;
        org.apache.pdfbox.pdmodel.common.PDStream $r4;
        org.apache.commons.logging.Log $r9, $r17, $r32, $r43, $r50;
        java.io.InputStream $r23, $r27, $r56;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDTrueTypeFont;

        $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.pdfbox.pdmodel.font.PDFontDescriptor getFontDescriptor()>();

        r2 = (org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary) $r1;

        $r3 = r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: java.awt.Font awtFont>;

        if $r3 != null goto label16;

        $r4 = virtualinvoke r2.<org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary: org.apache.pdfbox.pdmodel.common.PDStream getFontFile2()>();

        if $r4 == null goto label10;

     label01:
        $r27 = virtualinvoke $r4.<org.apache.pdfbox.pdmodel.common.PDStream: java.io.InputStream createInputStream()>();

        $r28 = staticinvoke <java.awt.Font: java.awt.Font createFont(int,java.io.InputStream)>(0, $r27);

        r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: java.awt.Font awtFont> = $r28;

     label02:
        goto label07;

     label03:
        $r55 := @caughtexception;

     label04:
        $r56 = virtualinvoke $r4.<org.apache.pdfbox.pdmodel.common.PDStream: java.io.InputStream createInputStream()>();

        $r57 = specialinvoke r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: byte[] rebuildTTF(org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary,java.io.InputStream)>(r2, $r56);

        if $r57 == null goto label05;

        $r58 = new java.io.ByteArrayInputStream;

        specialinvoke $r58.<java.io.ByteArrayInputStream: void <init>(byte[])>($r57);

        $r59 = staticinvoke <java.awt.Font: java.awt.Font createFont(int,java.io.InputStream)>(0, $r58);

        r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: java.awt.Font awtFont> = $r59;

     label05:
        goto label07;

     label06:
        $r48 := @caughtexception;

        $r50 = <org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.commons.logging.Log log>;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r51 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t read the embedded font ");

        $r52 = virtualinvoke r2.<org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary: java.lang.String getFontName()>();

        $r53 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r52);

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r50.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r54);

     label07:
        $r60 = r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: java.awt.Font awtFont>;

        if $r60 != null goto label15;

        $r29 = virtualinvoke r2.<org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary: java.lang.String getFontName()>();

        if $r29 == null goto label08;

        $r39 = virtualinvoke r2.<org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary: java.lang.String getFontName()>();

        $r40 = staticinvoke <org.apache.pdfbox.pdmodel.font.FontManager: java.awt.Font getAwtFont(java.lang.String)>($r39);

        r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: java.awt.Font awtFont> = $r40;

     label08:
        $r30 = r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: java.awt.Font awtFont>;

        if $r30 == null goto label09;

        $r32 = <org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.commons.logging.Log log>;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using font ");

        $r34 = r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: java.awt.Font awtFont>;

        $r35 = virtualinvoke $r34.<java.awt.Font: java.lang.String getName()>();

        $r36 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" instead");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r32.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r38);

     label09:
        virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: void setIsFontSubstituted(boolean)>(1);

        goto label15;

     label10:
        $r5 = virtualinvoke r2.<org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary: java.lang.String getFontName()>();

        if $r5 == null goto label11;

        $r25 = virtualinvoke r2.<org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary: java.lang.String getFontName()>();

        $r26 = staticinvoke <org.apache.pdfbox.pdmodel.font.FontManager: java.awt.Font getAwtFont(java.lang.String)>($r25);

        r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: java.awt.Font awtFont> = $r26;

     label11:
        $r6 = r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: java.awt.Font awtFont>;

        if $r6 != null goto label15;

        $r17 = <org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.commons.logging.Log log>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t find the specified font ");

        $r19 = virtualinvoke r2.<org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary: java.lang.String getFontName()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r17.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r21);

        $r22 = specialinvoke r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.fontbox.ttf.TrueTypeFont getExternalFontFile2(org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary)>(r2);

        if $r22 == null goto label15;

     label12:
        $r23 = virtualinvoke $r22.<org.apache.fontbox.ttf.TrueTypeFont: java.io.InputStream getOriginalData()>();

        $r24 = staticinvoke <java.awt.Font: java.awt.Font createFont(int,java.io.InputStream)>(0, $r23);

        r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: java.awt.Font awtFont> = $r24;

     label13:
        goto label15;

     label14:
        $r41 := @caughtexception;

        $r43 = <org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.commons.logging.Log log>;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t read the external fontfile ");

        $r45 = virtualinvoke r2.<org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary: java.lang.String getFontName()>();

        $r46 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r43.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r47);

     label15:
        $r61 = r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: java.awt.Font awtFont>;

        if $r61 != null goto label16;

        $r7 = staticinvoke <org.apache.pdfbox.pdmodel.font.FontManager: java.awt.Font getStandardFont()>();

        r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: java.awt.Font awtFont> = $r7;

        $r9 = <org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.commons.logging.Log log>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using font ");

        $r11 = r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: java.awt.Font awtFont>;

        $r12 = virtualinvoke $r11.<java.awt.Font: java.lang.String getName()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" instead");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r15);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: void setIsFontSubstituted(boolean)>(1);

     label16:
        $r62 = r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: java.awt.Font awtFont>;

        return $r62;

        catch java.awt.FontFormatException from label01 to label02 with label03;
        catch java.awt.FontFormatException from label04 to label05 with label06;
        catch java.awt.FontFormatException from label12 to label13 with label14;
    }

    private byte[] rebuildTTF(org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary, java.io.InputStream) throws java.io.IOException
    {
        byte[] $r7;
        org.apache.pdfbox.encoding.Encoding $r1;
        java.io.ByteArrayOutputStream $r6;
        org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary r8;
        org.apache.pdfbox.pdmodel.font.PDTrueTypeFont r0;
        org.apache.fontbox.ttf.TrueTypeFont $r4;
        org.apache.fontbox.ttf.TTFSubFont $r5;
        int $i0, i1;
        org.apache.fontbox.ttf.TTFParser $r2;
        boolean $z0;
        java.io.InputStream r3;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDTrueTypeFont;

        r8 := @parameter0: org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary;

        r3 := @parameter1: java.io.InputStream;

        $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.pdfbox.encoding.Encoding getFontEncoding()>();

        $z0 = $r1 instanceof org.apache.pdfbox.encoding.WinAnsiEncoding;

        if $z0 == 0 goto label3;

        $r2 = new org.apache.fontbox.ttf.TTFParser;

        specialinvoke $r2.<org.apache.fontbox.ttf.TTFParser: void <init>(boolean)>(1);

        $r4 = virtualinvoke $r2.<org.apache.fontbox.ttf.TTFParser: org.apache.fontbox.ttf.TrueTypeFont parseTTF(java.io.InputStream)>(r3);

        $r5 = new org.apache.fontbox.ttf.TTFSubFont;

        specialinvoke $r5.<org.apache.fontbox.ttf.TTFSubFont: void <init>(org.apache.fontbox.ttf.TrueTypeFont,java.lang.String)>($r4, "PDFBox-Rebuild");

        i1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: int getFirstChar()>();

     label1:
        $i0 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: int getLastChar()>();

        if i1 > $i0 goto label2;

        virtualinvoke $r5.<org.apache.fontbox.ttf.TTFSubFont: void addCharCode(int)>(i1);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r6 = new java.io.ByteArrayOutputStream;

        specialinvoke $r6.<java.io.ByteArrayOutputStream: void <init>()>();

        virtualinvoke $r5.<org.apache.fontbox.ttf.TTFSubFont: void writeToStream(java.io.OutputStream)>($r6);

        $r7 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r7;

     label3:
        return null;
    }

    private java.io.InputStream getExternalTTFData() throws java.io.IOException
    {
        java.util.Properties $r0, $r3, $r4;
        org.apache.pdfbox.pdmodel.font.PDTrueTypeFont r1;
        java.lang.String $r2, r5;
        boolean $z0;
        java.io.InputStream $r6;

        r1 := @this: org.apache.pdfbox.pdmodel.font.PDTrueTypeFont;

        $r0 = <org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: java.util.Properties externalFonts>;

        r5 = virtualinvoke $r0.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("UNKNOWN_FONT");

        $r2 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: java.lang.String getBaseFont()>();

        if $r2 == null goto label1;

        $r3 = <org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: java.util.Properties externalFonts>;

        $z0 = virtualinvoke $r3.<java.util.Properties: boolean containsKey(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $r4 = <org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: java.util.Properties externalFonts>;

        r5 = virtualinvoke $r4.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($r2);

     label1:
        if r5 == null goto label2;

        $r6 = staticinvoke <org.apache.pdfbox.util.ResourceLoader: java.io.InputStream loadResource(java.lang.String)>(r5);

        goto label3;

     label2:
        $r6 = null;

     label3:
        return $r6;
    }

    private org.apache.fontbox.ttf.TrueTypeFont getExternalFontFile2(org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary) throws java.io.IOException
    {
        java.util.Map $r5, $r10;
        java.lang.String $r2, $r18, r22;
        org.apache.fontbox.ttf.TTFParser $r7;
        boolean $z0;
        java.util.Properties $r4, $r14, $r19, $r20;
        org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary r0;
        java.io.IOException $r11;
        org.apache.pdfbox.pdmodel.font.PDTrueTypeFont r1;
        org.apache.fontbox.ttf.TrueTypeFont $r3, $r9, r21;
        java.lang.Object $r6, $r15;
        java.lang.StringBuilder $r12, $r13, $r16, $r17;
        java.io.InputStream $r8;

        r1 := @this: org.apache.pdfbox.pdmodel.font.PDTrueTypeFont;

        r0 := @parameter0: org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary;

        r21 = null;

        if r0 == null goto label3;

        $r2 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: java.lang.String getBaseFont()>();

        $r3 = staticinvoke <org.apache.fontbox.util.FontManager: org.apache.fontbox.ttf.TrueTypeFont findTTFont(java.lang.String)>($r2);

        r21 = $r3;

        if $r3 != null goto label3;

        $r4 = <org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: java.util.Properties externalFonts>;

        r22 = virtualinvoke $r4.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("UNKNOWN_FONT");

        if $r2 == null goto label1;

        $r19 = <org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: java.util.Properties externalFonts>;

        $z0 = virtualinvoke $r19.<java.util.Properties: boolean containsKey(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $r20 = <org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: java.util.Properties externalFonts>;

        r22 = virtualinvoke $r20.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($r2);

     label1:
        if r22 == null goto label3;

        $r5 = <org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: java.util.Map loadedExternalFonts>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r21 = (org.apache.fontbox.ttf.TrueTypeFont) $r6;

        if r21 != null goto label3;

        $r7 = new org.apache.fontbox.ttf.TTFParser;

        specialinvoke $r7.<org.apache.fontbox.ttf.TTFParser: void <init>()>();

        $r8 = staticinvoke <org.apache.pdfbox.util.ResourceLoader: java.io.InputStream loadResource(java.lang.String)>(r22);

        if $r8 != null goto label2;

        $r11 = new java.io.IOException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error missing font resource \'");

        $r14 = <org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: java.util.Properties externalFonts>;

        $r15 = virtualinvoke $r14.<java.util.Properties: java.lang.Object get(java.lang.Object)>($r2);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>($r18);

        throw $r11;

     label2:
        $r9 = virtualinvoke $r7.<org.apache.fontbox.ttf.TTFParser: org.apache.fontbox.ttf.TrueTypeFont parseTTF(java.io.InputStream)>($r8);

        r21 = $r9;

        $r10 = <org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: java.util.Map loadedExternalFonts>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r9);

     label3:
        return r21;
    }

    public org.apache.fontbox.ttf.TrueTypeFont getTTFFont() throws java.io.IOException
    {
        org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary r3;
        org.apache.pdfbox.pdmodel.common.PDStream $r6;
        org.apache.pdfbox.pdmodel.font.PDTrueTypeFont r0;
        org.apache.pdfbox.pdmodel.font.PDFontDescriptor $r2;
        org.apache.fontbox.ttf.TrueTypeFont $r1, $r5, $r9, $r10, $r11;
        java.lang.String $r4;
        org.apache.fontbox.ttf.TTFParser $r7;
        java.io.InputStream $r8;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDTrueTypeFont;

        $r1 = r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.fontbox.ttf.TrueTypeFont trueTypeFont>;

        if $r1 != null goto label2;

        $r2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.pdfbox.pdmodel.font.PDFontDescriptor getFontDescriptor()>();

        r3 = (org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary) $r2;

        if r3 == null goto label1;

        $r6 = virtualinvoke r3.<org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary: org.apache.pdfbox.pdmodel.common.PDStream getFontFile2()>();

        if $r6 == null goto label1;

        $r7 = new org.apache.fontbox.ttf.TTFParser;

        specialinvoke $r7.<org.apache.fontbox.ttf.TTFParser: void <init>(boolean)>(1);

        $r8 = virtualinvoke $r6.<org.apache.pdfbox.pdmodel.common.PDStream: java.io.InputStream createInputStream()>();

        $r9 = virtualinvoke $r7.<org.apache.fontbox.ttf.TTFParser: org.apache.fontbox.ttf.TrueTypeFont parseTTF(java.io.InputStream)>($r8);

        r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.fontbox.ttf.TrueTypeFont trueTypeFont> = $r9;

     label1:
        $r10 = r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.fontbox.ttf.TrueTypeFont trueTypeFont>;

        if $r10 != null goto label2;

        $r4 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: java.lang.String getBaseFont()>();

        $r5 = staticinvoke <org.apache.fontbox.util.FontManager: org.apache.fontbox.ttf.TrueTypeFont findTTFont(java.lang.String)>($r4);

        r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.fontbox.ttf.TrueTypeFont trueTypeFont> = $r5;

     label2:
        $r11 = r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.fontbox.ttf.TrueTypeFont trueTypeFont>;

        return $r11;
    }

    public void clear()
    {
        java.util.HashMap $r1, $r2;
        org.apache.pdfbox.pdmodel.font.PDTrueTypeFont r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDTrueTypeFont;

        specialinvoke r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: void clear()>();

        r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.fontbox.ttf.CMAPEncodingEntry cmapWinUnicode> = null;

        r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.fontbox.ttf.CMAPEncodingEntry cmapWinSymbol> = null;

        r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.fontbox.ttf.CMAPEncodingEntry cmapMacintoshSymbol> = null;

        r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.fontbox.ttf.TrueTypeFont trueTypeFont> = null;

        $r1 = r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: java.util.HashMap advanceWidths>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: java.util.HashMap advanceWidths>;

        virtualinvoke $r2.<java.util.HashMap: void clear()>();

     label1:
        return;
    }

    public float getFontWidth(int)
    {
        java.lang.Float $r6, $r10;
        java.util.HashMap $r1, $r4, $r7;
        java.lang.Integer $r2, $r5, $r8;
        byte $b1;
        int i0, $i2, $i3, $i4, $i5;
        boolean $z0;
        java.io.IOException $r11;
        org.apache.pdfbox.pdmodel.font.PDTrueTypeFont r0;
        org.apache.fontbox.ttf.TrueTypeFont $r3;
        float $f0, $f1, $f2, f3;
        java.lang.Object $r9;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDTrueTypeFont;

        i0 := @parameter0: int;

        $f0 = specialinvoke r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: float getFontWidth(int)>(i0);

        f3 = $f0;

        $b1 = $f0 cmpg 0.0F;

        $i5 = (int) $b1;

        if $i5 > 0 goto label5;

        $r1 = r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: java.util.HashMap advanceWidths>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z0 = virtualinvoke $r1.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $r7 = r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: java.util.HashMap advanceWidths>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r9 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r8);

        $r10 = (java.lang.Float) $r9;

        f3 = virtualinvoke $r10.<java.lang.Float: float floatValue()>();

        goto label5;

     label1:
        $r3 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.fontbox.ttf.TrueTypeFont getTTFFont()>();

        if $r3 == null goto label2;

        $i2 = specialinvoke r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: int getGlyphcode(int)>(i0);

        $i3 = virtualinvoke $r3.<org.apache.fontbox.ttf.TrueTypeFont: int getAdvanceWidth(int)>($i2);

        f3 = (float) $i3;

        $i4 = virtualinvoke $r3.<org.apache.fontbox.ttf.TrueTypeFont: int getUnitsPerEm()>();

        if $i4 == 1000 goto label2;

        $f1 = (float) $i4;

        $f2 = 1000.0F / $f1;

        f3 = f3 * $f2;

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        f3 = 250.0F;

     label4:
        $r4 = r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: java.util.HashMap advanceWidths>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f3);

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r6);

     label5:
        return f3;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private int getGlyphcode(int)
    {
        org.apache.pdfbox.encoding.Encoding $r1, $r2, $r10;
        org.apache.fontbox.ttf.CMAPEncodingEntry $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r12, $r13, $r14, $r15, $r18, $r20;
        boolean $z0, $z1, $z2;
        org.apache.pdfbox.pdmodel.font.PDTrueTypeFont r0;
        org.apache.pdfbox.encoding.MacOSRomanEncoding $r16, $r17;
        java.lang.StringBuilder $r24, $r25, $r27;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, $i8, $i10, $i12;
        java.lang.String $r11, $r19, $r26;
        java.io.IOException $r21;
        org.apache.commons.logging.Log $r23;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDTrueTypeFont;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: void extractCMaps()>();

        i6 = 0;

        $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.pdfbox.encoding.Encoding getFontEncoding()>();

        if $r1 == null goto label07;

        $z1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: boolean isSymbolicFont()>();

        if $z1 != 0 goto label07;

     label01:
        $r10 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.pdfbox.encoding.Encoding getFontEncoding()>();

        $r11 = virtualinvoke $r10.<org.apache.pdfbox.encoding.Encoding: java.lang.String getName(int)>(i0);

        if $r11 == null goto label05;

        $r12 = r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.fontbox.ttf.CMAPEncodingEntry cmapWinUnicode>;

        if $r12 == null goto label03;

        $r19 = staticinvoke <org.apache.pdfbox.encoding.Encoding: java.lang.String getCharacterForName(java.lang.String)>($r11);

        if $r19 == null goto label02;

        i6 = virtualinvoke $r19.<java.lang.String: int codePointAt(int)>(0);

     label02:
        $r20 = r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.fontbox.ttf.CMAPEncodingEntry cmapWinUnicode>;

        i6 = virtualinvoke $r20.<org.apache.fontbox.ttf.CMAPEncodingEntry: int getGlyphId(int)>(i6);

        goto label05;

     label03:
        $r13 = r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.fontbox.ttf.CMAPEncodingEntry cmapMacintoshSymbol>;

        if $r13 == null goto label04;

        $r16 = <org.apache.pdfbox.encoding.MacOSRomanEncoding: org.apache.pdfbox.encoding.MacOSRomanEncoding INSTANCE>;

        $z2 = virtualinvoke $r16.<org.apache.pdfbox.encoding.MacOSRomanEncoding: boolean hasCodeForName(java.lang.String)>($r11);

        if $z2 == 0 goto label04;

        $r17 = <org.apache.pdfbox.encoding.MacOSRomanEncoding: org.apache.pdfbox.encoding.MacOSRomanEncoding INSTANCE>;

        $i5 = virtualinvoke $r17.<org.apache.pdfbox.encoding.MacOSRomanEncoding: int getCode(java.lang.String)>($r11);

        i6 = $i5;

        $r18 = r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.fontbox.ttf.CMAPEncodingEntry cmapMacintoshSymbol>;

        i6 = virtualinvoke $r18.<org.apache.fontbox.ttf.CMAPEncodingEntry: int getGlyphId(int)>($i5);

        goto label05;

     label04:
        $r14 = r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.fontbox.ttf.CMAPEncodingEntry cmapWinSymbol>;

        if $r14 == null goto label05;

        $r15 = r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.fontbox.ttf.CMAPEncodingEntry cmapWinSymbol>;

        i6 = virtualinvoke $r15.<org.apache.fontbox.ttf.CMAPEncodingEntry: int getGlyphId(int)>(i0);

     label05:
        goto label12;

     label06:
        $r21 := @caughtexception;

        $r23 = <org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.commons.logging.Log log>;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Caught an exception getGlyhcode: ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r23.<org.apache.commons.logging.Log: void error(java.lang.Object)>($r26);

        goto label12;

     label07:
        $r2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.pdfbox.encoding.Encoding getFontEncoding()>();

        if $r2 == null goto label08;

        $z0 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: boolean isSymbolicFont()>();

        if $z0 == 0 goto label12;

     label08:
        $r3 = r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.fontbox.ttf.CMAPEncodingEntry cmapWinSymbol>;

        if $r3 == null goto label11;

        $r6 = r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.fontbox.ttf.CMAPEncodingEntry cmapWinSymbol>;

        $i1 = virtualinvoke $r6.<org.apache.fontbox.ttf.CMAPEncodingEntry: int getGlyphId(int)>(i0);

        i6 = $i1;

        if i0 < 0 goto label12;

        if i0 > 255 goto label12;

        if $i1 != 0 goto label09;

        $r9 = r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.fontbox.ttf.CMAPEncodingEntry cmapWinSymbol>;

        $i8 = (int) 61440;

        $i4 = i0 + $i8;

        i6 = virtualinvoke $r9.<org.apache.fontbox.ttf.CMAPEncodingEntry: int getGlyphId(int)>($i4);

     label09:
        if i6 != 0 goto label10;

        $r8 = r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.fontbox.ttf.CMAPEncodingEntry cmapWinSymbol>;

        $i10 = (int) 61696;

        $i3 = i0 + $i10;

        i6 = virtualinvoke $r8.<org.apache.fontbox.ttf.CMAPEncodingEntry: int getGlyphId(int)>($i3);

     label10:
        if i6 != 0 goto label12;

        $r7 = r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.fontbox.ttf.CMAPEncodingEntry cmapWinSymbol>;

        $i12 = (int) 61952;

        $i2 = i0 + $i12;

        i6 = virtualinvoke $r7.<org.apache.fontbox.ttf.CMAPEncodingEntry: int getGlyphId(int)>($i2);

        goto label12;

     label11:
        $r4 = r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.fontbox.ttf.CMAPEncodingEntry cmapMacintoshSymbol>;

        if $r4 == null goto label12;

        $r5 = r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.fontbox.ttf.CMAPEncodingEntry cmapMacintoshSymbol>;

        i6 = virtualinvoke $r5.<org.apache.fontbox.ttf.CMAPEncodingEntry: int getGlyphId(int)>(i0);

     label12:
        return i6;

        catch java.io.IOException from label01 to label05 with label06;
    }

    private void extractCMaps()
    {
        org.apache.fontbox.ttf.CMAPTable $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        org.apache.fontbox.ttf.CMAPEncodingEntry $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        boolean $z0;
        java.io.IOException $r12;
        org.apache.pdfbox.pdmodel.font.PDTrueTypeFont r0;
        org.apache.fontbox.ttf.CMAPEncodingEntry[] $r3;
        org.apache.fontbox.ttf.TrueTypeFont $r1;
        org.apache.commons.logging.Log $r13;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDTrueTypeFont;

        $z0 = r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: boolean cmapInitialized>;

        if $z0 != 0 goto label10;

     label01:
        virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.fontbox.ttf.TrueTypeFont getTTFFont()>();

     label02:
        goto label04;

     label03:
        $r12 := @caughtexception;

        $r13 = <org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.commons.logging.Log log>;

        interfaceinvoke $r13.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>("Can\'t read the true type font", $r12);

     label04:
        $r1 = r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.fontbox.ttf.TrueTypeFont trueTypeFont>;

        $r2 = virtualinvoke $r1.<org.apache.fontbox.ttf.TrueTypeFont: org.apache.fontbox.ttf.CMAPTable getCMAP()>();

        if $r2 == null goto label09;

        $r3 = virtualinvoke $r2.<org.apache.fontbox.ttf.CMAPTable: org.apache.fontbox.ttf.CMAPEncodingEntry[] getCmaps()>();

        i6 = 0;

     label05:
        $i0 = lengthof $r3;

        if i6 >= $i0 goto label09;

        $r4 = $r3[i6];

        $i1 = virtualinvoke $r4.<org.apache.fontbox.ttf.CMAPEncodingEntry: int getPlatformId()>();

        if 3 != $i1 goto label07;

        $r8 = $r3[i6];

        $i4 = virtualinvoke $r8.<org.apache.fontbox.ttf.CMAPEncodingEntry: int getPlatformEncodingId()>();

        if 1 != $i4 goto label06;

        $r11 = $r3[i6];

        r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.fontbox.ttf.CMAPEncodingEntry cmapWinUnicode> = $r11;

        goto label08;

     label06:
        $r9 = $r3[i6];

        $i5 = virtualinvoke $r9.<org.apache.fontbox.ttf.CMAPEncodingEntry: int getPlatformEncodingId()>();

        if 0 != $i5 goto label08;

        $r10 = $r3[i6];

        r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.fontbox.ttf.CMAPEncodingEntry cmapWinSymbol> = $r10;

        goto label08;

     label07:
        $r5 = $r3[i6];

        $i2 = virtualinvoke $r5.<org.apache.fontbox.ttf.CMAPEncodingEntry: int getPlatformId()>();

        if 1 != $i2 goto label08;

        $r6 = $r3[i6];

        $i3 = virtualinvoke $r6.<org.apache.fontbox.ttf.CMAPEncodingEntry: int getPlatformEncodingId()>();

        if 0 != $i3 goto label08;

        $r7 = $r3[i6];

        r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.fontbox.ttf.CMAPEncodingEntry cmapMacintoshSymbol> = $r7;

     label08:
        i6 = i6 + 1;

        goto label05;

     label09:
        r0.<org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: boolean cmapInitialized> = 1;

     label10:
        return;

        catch java.io.IOException from label01 to label02 with label03;
    }

    static void <clinit>()
    {
        java.util.Properties $r1, $r3;
        org.apache.commons.logging.Log $r0;
        java.util.HashMap $r2;
        java.io.IOException $r4;
        java.lang.RuntimeException $r5;

        <org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: java.lang.String UNKNOWN_FONT> = "UNKNOWN_FONT";

        <org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: int START_RANGE_F200> = 61952;

        <org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: int START_RANGE_F100> = 61696;

        <org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: int START_RANGE_F000> = 61440;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/apache/pdfbox/pdmodel/font/PDTrueTypeFont;");

        <org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: org.apache.commons.logging.Log log> = $r0;

        $r1 = new java.util.Properties;

        specialinvoke $r1.<java.util.Properties: void <init>()>();

        <org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: java.util.Properties externalFonts> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        <org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: java.util.Map loadedExternalFonts> = $r2;

     label1:
        $r3 = <org.apache.pdfbox.pdmodel.font.PDTrueTypeFont: java.util.Properties externalFonts>;

        staticinvoke <org.apache.pdfbox.util.ResourceLoader: java.util.Properties loadProperties(java.lang.String,java.util.Properties)>("org/apache/pdfbox/resources/PDFBox_External_Fonts.properties", $r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error loading font resources", $r4);

        throw $r5;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }
}
