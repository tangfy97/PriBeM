public class org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery extends org.apache.lucene.search.MultiTermQuery
{
    private java.lang.String lowerTerm;
    private java.lang.String upperTerm;
    private boolean includeLower;
    private boolean includeUpper;
    private java.text.Collator collator;

    public void <init>(java.lang.String, java.lang.String, java.lang.String, boolean, boolean, java.text.Collator)
    {
        java.lang.String r1, r2, r3;
        org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery r0;
        boolean z0, z1;
        java.text.Collator r4;

        r0 := @this: org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        r4 := @parameter5: java.text.Collator;

        specialinvoke r0.<org.apache.lucene.search.MultiTermQuery: void <init>(java.lang.String)>(r1);

        r0.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: java.lang.String lowerTerm> = r2;

        r0.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: java.lang.String upperTerm> = r3;

        r0.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: boolean includeLower> = z0;

        r0.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: boolean includeUpper> = z1;

        r0.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: java.text.Collator collator> = r4;

        return;
    }

    public java.lang.String getLowerTerm()
    {
        java.lang.String $r1;
        org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery r0;

        r0 := @this: org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery;

        $r1 = r0.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: java.lang.String lowerTerm>;

        return $r1;
    }

    public java.lang.String getUpperTerm()
    {
        java.lang.String $r1;
        org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery r0;

        r0 := @this: org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery;

        $r1 = r0.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: java.lang.String upperTerm>;

        return $r1;
    }

    public boolean includesLower()
    {
        org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery;

        $z0 = r0.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: boolean includeLower>;

        return $z0;
    }

    public boolean includesUpper()
    {
        org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery;

        $z0 = r0.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: boolean includeUpper>;

        return $z0;
    }

    public java.text.Collator getCollator()
    {
        org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery r0;
        java.text.Collator $r1;

        r0 := @this: org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery;

        $r1 = r0.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: java.text.Collator collator>;

        return $r1;
    }

    protected org.apache.lucene.index.TermsEnum getTermsEnum(org.apache.lucene.index.Terms, org.apache.lucene.util.AttributeSource) throws java.io.IOException
    {
        org.apache.lucene.sandbox.queries.SlowCollatedTermRangeTermsEnum $r3;
        org.apache.lucene.index.TermsEnum $r12, $r14;
        int $i0;
        org.apache.lucene.util.AttributeSource r13;
        java.lang.String $r1, $r5, $r6, $r7, $r8, $r9, $r10, $r15;
        java.text.Collator $r4, $r11;
        boolean $z0, $z1;
        org.apache.lucene.index.Terms r2;
        org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery r0;

        r0 := @this: org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery;

        r2 := @parameter0: org.apache.lucene.index.Terms;

        r13 := @parameter1: org.apache.lucene.util.AttributeSource;

        $r1 = r0.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: java.lang.String lowerTerm>;

        if $r1 == null goto label1;

        $r8 = r0.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: java.lang.String upperTerm>;

        if $r8 == null goto label1;

        $r11 = r0.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: java.text.Collator collator>;

        $r10 = r0.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: java.lang.String lowerTerm>;

        $r9 = r0.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: java.lang.String upperTerm>;

        $i0 = virtualinvoke $r11.<java.text.Collator: int compare(java.lang.String,java.lang.String)>($r10, $r9);

        if $i0 <= 0 goto label1;

        $r12 = <org.apache.lucene.index.TermsEnum: org.apache.lucene.index.TermsEnum EMPTY>;

        return $r12;

     label1:
        $r14 = virtualinvoke r2.<org.apache.lucene.index.Terms: org.apache.lucene.index.TermsEnum iterator(org.apache.lucene.index.TermsEnum)>(null);

        $r15 = r0.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: java.lang.String lowerTerm>;

        if $r15 != null goto label2;

        $r7 = r0.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: java.lang.String upperTerm>;

        if $r7 != null goto label2;

        return $r14;

     label2:
        $r3 = new org.apache.lucene.sandbox.queries.SlowCollatedTermRangeTermsEnum;

        $r6 = r0.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: java.lang.String lowerTerm>;

        $r5 = r0.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: java.lang.String upperTerm>;

        $z1 = r0.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: boolean includeLower>;

        $z0 = r0.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: boolean includeUpper>;

        $r4 = r0.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: java.text.Collator collator>;

        specialinvoke $r3.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeTermsEnum: void <init>(org.apache.lucene.index.TermsEnum,java.lang.String,java.lang.String,boolean,boolean,java.text.Collator)>($r14, $r6, $r5, $z1, $z0, $r4);

        return $r3;
    }

    public java.lang.String field()
    {
        java.lang.String $r1;
        org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery r0;

        r0 := @this: org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery;

        $r1 = virtualinvoke r0.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: java.lang.String getField()>();

        return $r1;
    }

    public java.lang.String toString(java.lang.String)
    {
        java.lang.String $r2, r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        boolean $z0, $z1, $z2;
        char $c0, $c1;
        org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery r1;
        float $f0;
        java.lang.StringBuilder $r0;

        r1 := @this: org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery;

        r3 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: java.lang.String getField()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z0 != 0 goto label1;

        $r8 = virtualinvoke r1.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: java.lang.String getField()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

     label1:
        $z1 = r1.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: boolean includeLower>;

        if $z1 == 0 goto label2;

        $c0 = 91;

        goto label3;

     label2:
        $c0 = 123;

     label3:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        $r4 = r1.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: java.lang.String lowerTerm>;

        if $r4 == null goto label4;

        $r9 = r1.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: java.lang.String lowerTerm>;

        goto label5;

     label4:
        $r9 = "*";

     label5:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" TO ");

        $r5 = r1.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: java.lang.String upperTerm>;

        if $r5 == null goto label6;

        $r10 = r1.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: java.lang.String upperTerm>;

        goto label7;

     label6:
        $r10 = "*";

     label7:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $z2 = r1.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: boolean includeUpper>;

        if $z2 == 0 goto label8;

        $c1 = 93;

        goto label9;

     label8:
        $c1 = 125;

     label9:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $f0 = virtualinvoke r1.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: float getBoost()>();

        $r6 = staticinvoke <org.apache.lucene.util.ToStringUtils: java.lang.String boost(float)>($f0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r7 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public int hashCode()
    {
        short $s12, $s13;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i14, $i15;
        java.lang.String $r3, $r4, $r5, $r6;
        java.text.Collator $r1, $r2;
        boolean $z0, $z1;
        org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery r0;

        r0 := @this: org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery;

        $i0 = specialinvoke r0.<org.apache.lucene.search.MultiTermQuery: int hashCode()>();

        $i1 = 31 * $i0;

        $r1 = r0.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: java.text.Collator collator>;

        if $r1 != null goto label01;

        $i11 = 0;

        goto label02;

     label01:
        $r2 = r0.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: java.text.Collator collator>;

        $i11 = virtualinvoke $r2.<java.text.Collator: int hashCode()>();

     label02:
        $i10 = $i1 + $i11;

        $i2 = 31 * $i10;

        $z0 = r0.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: boolean includeLower>;

        if $z0 == 0 goto label03;

        $s12 = 1231;

        goto label04;

     label03:
        $s12 = 1237;

     label04:
        $i9 = $i2 + $s12;

        $i3 = 31 * $i9;

        $z1 = r0.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: boolean includeUpper>;

        if $z1 == 0 goto label05;

        $s13 = 1231;

        goto label06;

     label05:
        $s13 = 1237;

     label06:
        $i8 = $i3 + $s13;

        $i4 = 31 * $i8;

        $r3 = r0.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: java.lang.String lowerTerm>;

        if $r3 != null goto label07;

        $i14 = 0;

        goto label08;

     label07:
        $r4 = r0.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: java.lang.String lowerTerm>;

        $i14 = virtualinvoke $r4.<java.lang.String: int hashCode()>();

     label08:
        $i7 = $i4 + $i14;

        $i5 = 31 * $i7;

        $r5 = r0.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: java.lang.String upperTerm>;

        if $r5 != null goto label09;

        $i15 = 0;

        goto label10;

     label09:
        $r6 = r0.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: java.lang.String upperTerm>;

        $i15 = virtualinvoke $r6.<java.lang.String: int hashCode()>();

     label10:
        $i6 = $i5 + $i15;

        return $i6;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.String $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.text.Collator $r5, $r6, $r7, $r16;
        org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery r0, r4;
        java.lang.Object r1;
        java.lang.Class $r2, $r3;

        r0 := @this: org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label01;

        return 1;

     label01:
        $z0 = specialinvoke r0.<org.apache.lucene.search.MultiTermQuery: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label02;

        return 0;

     label02:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == $r3 goto label03;

        return 0;

     label03:
        r4 = (org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery) r1;

        $r5 = r0.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: java.text.Collator collator>;

        if $r5 != null goto label04;

        $r16 = r4.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: java.text.Collator collator>;

        if $r16 == null goto label05;

        return 0;

     label04:
        $r7 = r0.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: java.text.Collator collator>;

        $r6 = r4.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: java.text.Collator collator>;

        $z1 = virtualinvoke $r7.<java.text.Collator: boolean equals(java.lang.Object)>($r6);

        if $z1 != 0 goto label05;

        return 0;

     label05:
        $z3 = r0.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: boolean includeLower>;

        $z2 = r4.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: boolean includeLower>;

        if $z3 == $z2 goto label06;

        return 0;

     label06:
        $z5 = r0.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: boolean includeUpper>;

        $z4 = r4.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: boolean includeUpper>;

        if $z5 == $z4 goto label07;

        return 0;

     label07:
        $r8 = r0.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: java.lang.String lowerTerm>;

        if $r8 != null goto label08;

        $r15 = r4.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: java.lang.String lowerTerm>;

        if $r15 == null goto label09;

        return 0;

     label08:
        $r10 = r0.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: java.lang.String lowerTerm>;

        $r9 = r4.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: java.lang.String lowerTerm>;

        $z6 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z6 != 0 goto label09;

        return 0;

     label09:
        $r11 = r0.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: java.lang.String upperTerm>;

        if $r11 != null goto label10;

        $r14 = r4.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: java.lang.String upperTerm>;

        if $r14 == null goto label11;

        return 0;

     label10:
        $r13 = r0.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: java.lang.String upperTerm>;

        $r12 = r4.<org.apache.lucene.sandbox.queries.SlowCollatedTermRangeQuery: java.lang.String upperTerm>;

        $z7 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z7 != 0 goto label11;

        return 0;

     label11:
        return 1;
    }
}
