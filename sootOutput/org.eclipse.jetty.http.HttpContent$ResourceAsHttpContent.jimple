public class org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent extends java.lang.Object implements org.eclipse.jetty.http.HttpContent
{
    private static final org.eclipse.jetty.util.log.Logger LOG;
    final org.eclipse.jetty.util.resource.Resource _resource;
    final org.eclipse.jetty.io.Buffer _mimeType;
    final int _maxBuffer;
    final org.eclipse.jetty.io.Buffer _etag;

    public void <init>(org.eclipse.jetty.util.resource.Resource, org.eclipse.jetty.io.Buffer)
    {
        org.eclipse.jetty.util.resource.Resource r1;
        org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent r0;
        int $i1;
        org.eclipse.jetty.io.Buffer r2;

        r0 := @this: org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent;

        r1 := @parameter0: org.eclipse.jetty.util.resource.Resource;

        r2 := @parameter1: org.eclipse.jetty.io.Buffer;

        $i1 = (int) -1;

        specialinvoke r0.<org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent: void <init>(org.eclipse.jetty.util.resource.Resource,org.eclipse.jetty.io.Buffer,int,boolean)>(r1, r2, $i1, 0);

        return;
    }

    public void <init>(org.eclipse.jetty.util.resource.Resource, org.eclipse.jetty.io.Buffer, int)
    {
        org.eclipse.jetty.util.resource.Resource r1;
        org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent r0;
        int i0;
        org.eclipse.jetty.io.Buffer r2;

        r0 := @this: org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent;

        r1 := @parameter0: org.eclipse.jetty.util.resource.Resource;

        r2 := @parameter1: org.eclipse.jetty.io.Buffer;

        i0 := @parameter2: int;

        specialinvoke r0.<org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent: void <init>(org.eclipse.jetty.util.resource.Resource,org.eclipse.jetty.io.Buffer,int,boolean)>(r1, r2, i0, 0);

        return;
    }

    public void <init>(org.eclipse.jetty.util.resource.Resource, org.eclipse.jetty.io.Buffer, boolean)
    {
        org.eclipse.jetty.util.resource.Resource r1;
        org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent r0;
        int $i1;
        org.eclipse.jetty.io.Buffer r2;
        boolean z0;

        r0 := @this: org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent;

        r1 := @parameter0: org.eclipse.jetty.util.resource.Resource;

        r2 := @parameter1: org.eclipse.jetty.io.Buffer;

        z0 := @parameter2: boolean;

        $i1 = (int) -1;

        specialinvoke r0.<org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent: void <init>(org.eclipse.jetty.util.resource.Resource,org.eclipse.jetty.io.Buffer,int,boolean)>(r1, r2, $i1, z0);

        return;
    }

    public void <init>(org.eclipse.jetty.util.resource.Resource, org.eclipse.jetty.io.Buffer, int, boolean)
    {
        org.eclipse.jetty.io.ByteArrayBuffer $r4;
        org.eclipse.jetty.util.resource.Resource r1;
        org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent r0;
        int i0;
        java.lang.String $r3;
        org.eclipse.jetty.io.Buffer r2;
        boolean z0;

        r0 := @this: org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent;

        r1 := @parameter0: org.eclipse.jetty.util.resource.Resource;

        r2 := @parameter1: org.eclipse.jetty.io.Buffer;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent: org.eclipse.jetty.util.resource.Resource _resource> = r1;

        r0.<org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent: org.eclipse.jetty.io.Buffer _mimeType> = r2;

        r0.<org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent: int _maxBuffer> = i0;

        if z0 == 0 goto label1;

        $r4 = new org.eclipse.jetty.io.ByteArrayBuffer;

        $r3 = virtualinvoke r1.<org.eclipse.jetty.util.resource.Resource: java.lang.String getWeakETag()>();

        specialinvoke $r4.<org.eclipse.jetty.io.ByteArrayBuffer: void <init>(java.lang.String)>($r3);

        goto label2;

     label1:
        $r4 = null;

     label2:
        r0.<org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent: org.eclipse.jetty.io.Buffer _etag> = $r4;

        return;
    }

    public org.eclipse.jetty.io.Buffer getContentType()
    {
        org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent r0;
        org.eclipse.jetty.io.Buffer $r1;

        r0 := @this: org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent;

        $r1 = r0.<org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent: org.eclipse.jetty.io.Buffer _mimeType>;

        return $r1;
    }

    public org.eclipse.jetty.io.Buffer getLastModified()
    {
        org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent r0;

        r0 := @this: org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent;

        return null;
    }

    public org.eclipse.jetty.io.Buffer getDirectBuffer()
    {
        org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent r0;

        r0 := @this: org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent;

        return null;
    }

    public org.eclipse.jetty.io.Buffer getETag()
    {
        org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent r0;
        org.eclipse.jetty.io.Buffer $r1;

        r0 := @this: org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent;

        $r1 = r0.<org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent: org.eclipse.jetty.io.Buffer _etag>;

        return $r1;
    }

    public org.eclipse.jetty.io.Buffer getIndirectBuffer()
    {
        java.lang.Throwable $r10;
        org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent r0;
        long $l0, $l3, $l4, $l6, $l8;
        org.eclipse.jetty.io.ByteArrayBuffer $r18;
        byte $b1, $b5;
        int $i2, $i7, $i9, $i10, $i11;
        java.io.IOException $r8, $r11, $r13, $r15;
        java.lang.RuntimeException $r19;
        org.eclipse.jetty.util.resource.Resource $r1, $r2, $r4, $r5, $r7;
        org.eclipse.jetty.util.log.Logger $r9, $r14, $r16;
        java.io.InputStream $r6, r17;

        r0 := @this: org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent;

        r17 = null;

     label01:
        $r1 = r0.<org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent: org.eclipse.jetty.util.resource.Resource _resource>;

        $l0 = virtualinvoke $r1.<org.eclipse.jetty.util.resource.Resource: long length()>();

        $b1 = $l0 cmp 0L;

        $i10 = (int) $b1;

        if $i10 <= 0 goto label02;

        $i2 = r0.<org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent: int _maxBuffer>;

        $l3 = (long) $i2;

        $r2 = r0.<org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent: org.eclipse.jetty.util.resource.Resource _resource>;

        $l4 = virtualinvoke $r2.<org.eclipse.jetty.util.resource.Resource: long length()>();

        $b5 = $l3 cmp $l4;

        $i11 = (int) $b5;

        if $i11 >= 0 goto label07;

     label02:
        if null == null goto label06;

     label03:
        virtualinvoke r17.<java.io.InputStream: void close()>();

     label04:
        goto label06;

     label05:
        $r15 := @caughtexception;

        $r16 = <org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent: org.eclipse.jetty.util.log.Logger LOG>;

        interfaceinvoke $r16.<org.eclipse.jetty.util.log.Logger: void warn(java.lang.String,java.lang.Throwable)>("Couldn\'t close inputStream. Possible file handle leak", $r15);

     label06:
        return null;

     label07:
        $r18 = new org.eclipse.jetty.io.ByteArrayBuffer;

        $r4 = r0.<org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent: org.eclipse.jetty.util.resource.Resource _resource>;

        $l6 = virtualinvoke $r4.<org.eclipse.jetty.util.resource.Resource: long length()>();

        $i7 = (int) $l6;

        specialinvoke $r18.<org.eclipse.jetty.io.ByteArrayBuffer: void <init>(int)>($i7);

        $r5 = r0.<org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent: org.eclipse.jetty.util.resource.Resource _resource>;

        $r6 = virtualinvoke $r5.<org.eclipse.jetty.util.resource.Resource: java.io.InputStream getInputStream()>();

        r17 = $r6;

        $r7 = r0.<org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent: org.eclipse.jetty.util.resource.Resource _resource>;

        $l8 = virtualinvoke $r7.<org.eclipse.jetty.util.resource.Resource: long length()>();

        $i9 = (int) $l8;

        virtualinvoke $r18.<org.eclipse.jetty.io.ByteArrayBuffer: int readFrom(java.io.InputStream,int)>($r6, $i9);

     label08:
        if $r6 == null goto label12;

     label09:
        virtualinvoke $r6.<java.io.InputStream: void close()>();

     label10:
        goto label12;

     label11:
        $r13 := @caughtexception;

        $r14 = <org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent: org.eclipse.jetty.util.log.Logger LOG>;

        interfaceinvoke $r14.<org.eclipse.jetty.util.log.Logger: void warn(java.lang.String,java.lang.Throwable)>("Couldn\'t close inputStream. Possible file handle leak", $r13);

     label12:
        return $r18;

     label13:
        $r11 := @caughtexception;

        $r19 = new java.lang.RuntimeException;

        specialinvoke $r19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r11);

        throw $r19;

     label14:
        $r10 := @caughtexception;

     label15:
        if r17 == null goto label19;

     label16:
        virtualinvoke r17.<java.io.InputStream: void close()>();

     label17:
        goto label19;

     label18:
        $r8 := @caughtexception;

        $r9 = <org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent: org.eclipse.jetty.util.log.Logger LOG>;

        interfaceinvoke $r9.<org.eclipse.jetty.util.log.Logger: void warn(java.lang.String,java.lang.Throwable)>("Couldn\'t close inputStream. Possible file handle leak", $r8);

     label19:
        throw $r10;

        catch java.io.IOException from label03 to label04 with label05;
        catch java.io.IOException from label09 to label10 with label11;
        catch java.io.IOException from label01 to label02 with label13;
        catch java.io.IOException from label07 to label08 with label13;
        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.io.IOException from label16 to label17 with label18;
        catch java.lang.Throwable from label13 to label15 with label14;
    }

    public long getContentLength()
    {
        org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent r0;
        long $l0;
        org.eclipse.jetty.util.resource.Resource $r1;

        r0 := @this: org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent;

        $r1 = r0.<org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent: org.eclipse.jetty.util.resource.Resource _resource>;

        $l0 = virtualinvoke $r1.<org.eclipse.jetty.util.resource.Resource: long length()>();

        return $l0;
    }

    public java.io.InputStream getInputStream() throws java.io.IOException
    {
        org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent r0;
        org.eclipse.jetty.util.resource.Resource $r1;
        java.io.InputStream $r2;

        r0 := @this: org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent;

        $r1 = r0.<org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent: org.eclipse.jetty.util.resource.Resource _resource>;

        $r2 = virtualinvoke $r1.<org.eclipse.jetty.util.resource.Resource: java.io.InputStream getInputStream()>();

        return $r2;
    }

    public org.eclipse.jetty.util.resource.Resource getResource()
    {
        org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent r0;
        org.eclipse.jetty.util.resource.Resource $r1;

        r0 := @this: org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent;

        $r1 = r0.<org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent: org.eclipse.jetty.util.resource.Resource _resource>;

        return $r1;
    }

    public void release()
    {
        org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent r0;
        org.eclipse.jetty.util.resource.Resource $r1;

        r0 := @this: org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent;

        $r1 = r0.<org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent: org.eclipse.jetty.util.resource.Resource _resource>;

        virtualinvoke $r1.<org.eclipse.jetty.util.resource.Resource: void release()>();

        return;
    }

    static void <clinit>()
    {
        org.eclipse.jetty.util.log.Logger $r0;

        $r0 = staticinvoke <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger getLogger(java.lang.Class)>(class "Lorg/eclipse/jetty/http/HttpContent$ResourceAsHttpContent;");

        <org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent: org.eclipse.jetty.util.log.Logger LOG> = $r0;

        return;
    }
}
