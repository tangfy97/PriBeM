public class com.hp.hpl.jena.query.ResultSetFormatter extends java.lang.Object
{

    private void <init>()
    {
        com.hp.hpl.jena.query.ResultSetFormatter r0;

        r0 := @this: com.hp.hpl.jena.query.ResultSetFormatter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void out(com.hp.hpl.jena.query.ResultSet)
    {
        java.io.PrintStream $r1;
        com.hp.hpl.jena.query.ResultSet r0;

        r0 := @parameter0: com.hp.hpl.jena.query.ResultSet;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void out(java.io.OutputStream,com.hp.hpl.jena.query.ResultSet)>($r1, r0);

        return;
    }

    public static void out(java.io.OutputStream, com.hp.hpl.jena.query.ResultSet)
    {
        java.io.OutputStream r0;
        com.hp.hpl.jena.query.ResultSet r1;

        r0 := @parameter0: java.io.OutputStream;

        r1 := @parameter1: com.hp.hpl.jena.query.ResultSet;

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void out(java.io.OutputStream,com.hp.hpl.jena.query.ResultSet,com.hp.hpl.jena.shared.PrefixMapping)>(r0, r1, null);

        return;
    }

    public static void out(com.hp.hpl.jena.query.ResultSet, com.hp.hpl.jena.query.Query)
    {
        java.io.PrintStream $r2;
        com.hp.hpl.jena.query.Query r1;
        com.hp.hpl.jena.query.ResultSet r0;

        r0 := @parameter0: com.hp.hpl.jena.query.ResultSet;

        r1 := @parameter1: com.hp.hpl.jena.query.Query;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void out(java.io.OutputStream,com.hp.hpl.jena.query.ResultSet,com.hp.hpl.jena.sparql.core.Prologue)>($r2, r0, r1);

        return;
    }

    public static void out(com.hp.hpl.jena.query.ResultSet, com.hp.hpl.jena.sparql.core.Prologue)
    {
        java.io.PrintStream $r2;
        com.hp.hpl.jena.query.ResultSet r0;
        com.hp.hpl.jena.sparql.core.Prologue r1;

        r0 := @parameter0: com.hp.hpl.jena.query.ResultSet;

        r1 := @parameter1: com.hp.hpl.jena.sparql.core.Prologue;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void out(java.io.OutputStream,com.hp.hpl.jena.query.ResultSet,com.hp.hpl.jena.sparql.core.Prologue)>($r2, r0, r1);

        return;
    }

    public static void out(com.hp.hpl.jena.query.ResultSet, com.hp.hpl.jena.shared.PrefixMapping)
    {
        java.io.PrintStream $r2;
        com.hp.hpl.jena.query.ResultSet r0;
        com.hp.hpl.jena.shared.PrefixMapping r1;

        r0 := @parameter0: com.hp.hpl.jena.query.ResultSet;

        r1 := @parameter1: com.hp.hpl.jena.shared.PrefixMapping;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void out(java.io.OutputStream,com.hp.hpl.jena.query.ResultSet,com.hp.hpl.jena.shared.PrefixMapping)>($r2, r0, r1);

        return;
    }

    public static void out(java.io.OutputStream, com.hp.hpl.jena.query.ResultSet, com.hp.hpl.jena.shared.PrefixMapping)
    {
        java.io.OutputStream r2;
        com.hp.hpl.jena.sparql.resultset.TextOutput $r0;
        com.hp.hpl.jena.query.ResultSet r3;
        com.hp.hpl.jena.shared.PrefixMapping r1;

        r2 := @parameter0: java.io.OutputStream;

        r3 := @parameter1: com.hp.hpl.jena.query.ResultSet;

        r1 := @parameter2: com.hp.hpl.jena.shared.PrefixMapping;

        $r0 = new com.hp.hpl.jena.sparql.resultset.TextOutput;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.resultset.TextOutput: void <init>(com.hp.hpl.jena.shared.PrefixMapping)>(r1);

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.resultset.TextOutput: void format(java.io.OutputStream,com.hp.hpl.jena.query.ResultSet)>(r2, r3);

        return;
    }

    public static void out(java.io.OutputStream, com.hp.hpl.jena.query.ResultSet, com.hp.hpl.jena.sparql.core.Prologue)
    {
        java.io.OutputStream r2;
        com.hp.hpl.jena.sparql.core.Prologue r1;
        com.hp.hpl.jena.sparql.resultset.TextOutput $r0;
        com.hp.hpl.jena.query.ResultSet r3;

        r2 := @parameter0: java.io.OutputStream;

        r3 := @parameter1: com.hp.hpl.jena.query.ResultSet;

        r1 := @parameter2: com.hp.hpl.jena.sparql.core.Prologue;

        $r0 = new com.hp.hpl.jena.sparql.resultset.TextOutput;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.resultset.TextOutput: void <init>(com.hp.hpl.jena.sparql.core.Prologue)>(r1);

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.resultset.TextOutput: void format(java.io.OutputStream,com.hp.hpl.jena.query.ResultSet)>(r2, r3);

        return;
    }

    public static void out(boolean)
    {
        java.io.PrintStream $r0;
        boolean z0;

        z0 := @parameter0: boolean;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void out(java.io.OutputStream,boolean)>($r0, z0);

        return;
    }

    public static void out(java.io.OutputStream, boolean)
    {
        java.io.OutputStream r1;
        com.hp.hpl.jena.sparql.resultset.TextOutput $r0;
        boolean z0;

        r1 := @parameter0: java.io.OutputStream;

        z0 := @parameter1: boolean;

        $r0 = new com.hp.hpl.jena.sparql.resultset.TextOutput;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.resultset.TextOutput: void <init>(com.hp.hpl.jena.sparql.serializer.SerializationContext)>(null);

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.resultset.TextOutput: void format(java.io.OutputStream,boolean)>(r1, z0);

        return;
    }

    public static java.lang.String asText(com.hp.hpl.jena.query.ResultSet)
    {
        byte[] $r3;
        java.io.ByteArrayOutputStream $r0;
        java.lang.String $r2;
        com.hp.hpl.jena.query.ResultSet r1;
        java.io.UnsupportedEncodingException $r4;

        r1 := @parameter0: com.hp.hpl.jena.query.ResultSet;

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void out(java.io.OutputStream,com.hp.hpl.jena.query.ResultSet)>($r0, r1);

     label1:
        $r2 = new java.lang.String;

        $r3 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r2.<java.lang.String: void <init>(byte[],java.lang.String)>($r3, "UTF-8");

     label2:
        return $r2;

     label3:
        $r4 := @caughtexception;

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Class,java.lang.String)>(class "Lcom/hp/hpl/jena/query/ResultSetFormatter;", "UnsupportedEncodingException");

        return null;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public static java.lang.String asText(com.hp.hpl.jena.query.ResultSet, com.hp.hpl.jena.sparql.core.Prologue)
    {
        byte[] $r4;
        java.io.ByteArrayOutputStream $r0;
        com.hp.hpl.jena.sparql.core.Prologue r2;
        java.lang.String $r3;
        com.hp.hpl.jena.query.ResultSet r1;
        java.io.UnsupportedEncodingException $r5;

        r1 := @parameter0: com.hp.hpl.jena.query.ResultSet;

        r2 := @parameter1: com.hp.hpl.jena.sparql.core.Prologue;

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void out(java.io.OutputStream,com.hp.hpl.jena.query.ResultSet,com.hp.hpl.jena.sparql.core.Prologue)>($r0, r1, r2);

     label1:
        $r3 = new java.lang.String;

        $r4 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r3.<java.lang.String: void <init>(byte[],java.lang.String)>($r4, "UTF-8");

     label2:
        return $r3;

     label3:
        $r5 := @caughtexception;

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Class,java.lang.String)>(class "Lcom/hp/hpl/jena/query/ResultSetFormatter;", "UnsupportedEncodingException");

        return null;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public static int consume(com.hp.hpl.jena.query.ResultSet)
    {
        java.util.Iterator $r2;
        com.hp.hpl.jena.query.ResultSet r0;
        com.hp.hpl.jena.query.QuerySolution $r1;
        int i0;
        java.lang.Object $r3;
        java.lang.String r4;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.query.ResultSet;

        i0 = 0;

     label1:
        $z0 = interfaceinvoke r0.<com.hp.hpl.jena.query.ResultSet: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.query.ResultSet: com.hp.hpl.jena.query.QuerySolution nextSolution()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.query.QuerySolution: java.util.Iterator varNames()>();

     label2:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r3;

        interfaceinvoke $r1.<com.hp.hpl.jena.query.QuerySolution: com.hp.hpl.jena.rdf.model.RDFNode get(java.lang.String)>(r4);

        goto label2;

     label3:
        i0 = i0 + 1;

        goto label1;

     label4:
        return i0;
    }

    public static java.util.List toList(com.hp.hpl.jena.query.ResultSet)
    {
        com.hp.hpl.jena.query.QuerySolution $r2;
        com.hp.hpl.jena.query.ResultSet r1;
        java.util.ArrayList $r0;
        boolean $z0;

        r1 := @parameter0: com.hp.hpl.jena.query.ResultSet;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

     label1:
        $z0 = interfaceinvoke r1.<com.hp.hpl.jena.query.ResultSet: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.query.ResultSet: com.hp.hpl.jena.query.QuerySolution nextSolution()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r2);

        goto label1;

     label2:
        return $r0;
    }

    public static com.hp.hpl.jena.rdf.model.Model toModel(com.hp.hpl.jena.query.ResultSet)
    {
        com.hp.hpl.jena.rdf.model.Model $r2;
        com.hp.hpl.jena.sparql.resultset.RDFOutput $r0;
        com.hp.hpl.jena.query.ResultSet r1;

        r1 := @parameter0: com.hp.hpl.jena.query.ResultSet;

        $r0 = new com.hp.hpl.jena.sparql.resultset.RDFOutput;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.resultset.RDFOutput: void <init>()>();

        $r2 = virtualinvoke $r0.<com.hp.hpl.jena.sparql.resultset.RDFOutput: com.hp.hpl.jena.rdf.model.Model toModel(com.hp.hpl.jena.query.ResultSet)>(r1);

        return $r2;
    }

    public static com.hp.hpl.jena.rdf.model.Model toModel(boolean)
    {
        com.hp.hpl.jena.rdf.model.Model $r1;
        com.hp.hpl.jena.sparql.resultset.RDFOutput $r0;
        boolean z0;

        z0 := @parameter0: boolean;

        $r0 = new com.hp.hpl.jena.sparql.resultset.RDFOutput;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.resultset.RDFOutput: void <init>()>();

        $r1 = virtualinvoke $r0.<com.hp.hpl.jena.sparql.resultset.RDFOutput: com.hp.hpl.jena.rdf.model.Model toModel(boolean)>(z0);

        return $r1;
    }

    public static com.hp.hpl.jena.rdf.model.Resource asRDF(com.hp.hpl.jena.rdf.model.Model, com.hp.hpl.jena.query.ResultSet)
    {
        com.hp.hpl.jena.rdf.model.Model r1;
        com.hp.hpl.jena.sparql.resultset.RDFOutput $r0;
        com.hp.hpl.jena.query.ResultSet r2;
        com.hp.hpl.jena.rdf.model.Resource $r3;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r2 := @parameter1: com.hp.hpl.jena.query.ResultSet;

        $r0 = new com.hp.hpl.jena.sparql.resultset.RDFOutput;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.resultset.RDFOutput: void <init>()>();

        $r3 = virtualinvoke $r0.<com.hp.hpl.jena.sparql.resultset.RDFOutput: com.hp.hpl.jena.rdf.model.Resource asRDF(com.hp.hpl.jena.rdf.model.Model,com.hp.hpl.jena.query.ResultSet)>(r1, r2);

        return $r3;
    }

    public static com.hp.hpl.jena.rdf.model.Resource asRDF(com.hp.hpl.jena.rdf.model.Model, boolean)
    {
        com.hp.hpl.jena.rdf.model.Model r1;
        com.hp.hpl.jena.sparql.resultset.RDFOutput $r0;
        com.hp.hpl.jena.rdf.model.Resource $r2;
        boolean z0;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        z0 := @parameter1: boolean;

        $r0 = new com.hp.hpl.jena.sparql.resultset.RDFOutput;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.resultset.RDFOutput: void <init>()>();

        $r2 = virtualinvoke $r0.<com.hp.hpl.jena.sparql.resultset.RDFOutput: com.hp.hpl.jena.rdf.model.Resource asRDF(com.hp.hpl.jena.rdf.model.Model,boolean)>(r1, z0);

        return $r2;
    }

    public static void output(com.hp.hpl.jena.query.ResultSet, com.hp.hpl.jena.sparql.resultset.ResultsFormat)
    {
        java.io.PrintStream $r2;
        com.hp.hpl.jena.sparql.resultset.ResultsFormat r1;
        com.hp.hpl.jena.query.ResultSet r0;

        r0 := @parameter0: com.hp.hpl.jena.query.ResultSet;

        r1 := @parameter1: com.hp.hpl.jena.sparql.resultset.ResultsFormat;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void output(java.io.OutputStream,com.hp.hpl.jena.query.ResultSet,com.hp.hpl.jena.sparql.resultset.ResultsFormat)>($r2, r0, r1);

        return;
    }

    public static void output(java.io.OutputStream, com.hp.hpl.jena.query.ResultSet, com.hp.hpl.jena.sparql.resultset.ResultsFormat)
    {
        com.hp.hpl.jena.sparql.resultset.ResultsFormat r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        java.lang.String $r14;
        com.hp.hpl.jena.sparql.ARQException $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.io.OutputStream r15;
        com.hp.hpl.jena.query.ResultSet r16;
        java.lang.StringBuilder $r11, $r12, $r13;

        r15 := @parameter0: java.io.OutputStream;

        r16 := @parameter1: com.hp.hpl.jena.query.ResultSet;

        r0 := @parameter2: com.hp.hpl.jena.sparql.resultset.ResultsFormat;

        $r1 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_RS_XML>;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.ResultsFormat: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void outputAsXML(java.io.OutputStream,com.hp.hpl.jena.query.ResultSet)>(r15, r16);

        return;

     label1:
        $r2 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_RS_JSON>;

        $z1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.ResultsFormat: boolean equals(java.lang.Object)>($r2);

        if $z1 == 0 goto label2;

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void outputAsJSON(java.io.OutputStream,com.hp.hpl.jena.query.ResultSet)>(r15, r16);

        return;

     label2:
        $r3 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_RS_CSV>;

        $z2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.ResultsFormat: boolean equals(java.lang.Object)>($r3);

        if $z2 == 0 goto label3;

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void outputAsCSV(java.io.OutputStream,com.hp.hpl.jena.query.ResultSet)>(r15, r16);

        return;

     label3:
        $r4 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_RS_TSV>;

        $z3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.ResultsFormat: boolean equals(java.lang.Object)>($r4);

        if $z3 == 0 goto label4;

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void outputAsTSV(java.io.OutputStream,com.hp.hpl.jena.query.ResultSet)>(r15, r16);

        return;

     label4:
        $r5 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_RS_BIO>;

        $z4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.ResultsFormat: boolean equals(java.lang.Object)>($r5);

        if $z4 == 0 goto label5;

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void outputAsBIO(java.io.OutputStream,com.hp.hpl.jena.query.ResultSet)>(r15, r16);

        return;

     label5:
        $r6 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_RS_JSON>;

        $z5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.ResultsFormat: boolean equals(java.lang.Object)>($r6);

        if $z5 == 0 goto label6;

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void outputAsJSON(java.io.OutputStream,com.hp.hpl.jena.query.ResultSet)>(r15, r16);

        return;

     label6:
        $r7 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_RDF_XML>;

        $z6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.ResultsFormat: boolean equals(java.lang.Object)>($r7);

        if $z6 == 0 goto label7;

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void outputAsRDF(java.io.OutputStream,java.lang.String,com.hp.hpl.jena.query.ResultSet)>(r15, "RDF/XML-ABBREV", r16);

        return;

     label7:
        $r8 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_RDF_TTL>;

        $z7 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.ResultsFormat: boolean equals(java.lang.Object)>($r8);

        if $z7 == 0 goto label8;

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void outputAsRDF(java.io.OutputStream,java.lang.String,com.hp.hpl.jena.query.ResultSet)>(r15, "TTL", r16);

        return;

     label8:
        $r9 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_RDF_NT>;

        $z8 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.ResultsFormat: boolean equals(java.lang.Object)>($r9);

        if $z8 == 0 goto label9;

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void outputAsRDF(java.io.OutputStream,java.lang.String,com.hp.hpl.jena.query.ResultSet)>(r15, "N-TRIPLES", r16);

        return;

     label9:
        $r10 = new com.hp.hpl.jena.sparql.ARQException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown ResultSet format: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.String)>($r14);

        throw $r10;
    }

    public static void outputAsRDF(java.lang.String, com.hp.hpl.jena.query.ResultSet)
    {
        java.io.PrintStream $r2;
        java.lang.String r0;
        com.hp.hpl.jena.query.ResultSet r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.hp.hpl.jena.query.ResultSet;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void outputAsRDF(java.io.OutputStream,java.lang.String,com.hp.hpl.jena.query.ResultSet)>($r2, r0, r1);

        return;
    }

    public static void outputAsRDF(java.io.OutputStream, java.lang.String, com.hp.hpl.jena.query.ResultSet)
    {
        java.io.OutputStream r0;
        java.io.PrintWriter $r1;
        java.lang.String r2;
        com.hp.hpl.jena.query.ResultSet r3;

        r0 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: com.hp.hpl.jena.query.ResultSet;

        $r1 = staticinvoke <com.hp.hpl.jena.util.FileUtils: java.io.PrintWriter asPrintWriterUTF8(java.io.OutputStream)>(r0);

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void outputAsRDF(java.io.PrintWriter,java.lang.String,com.hp.hpl.jena.query.ResultSet)>($r1, r2, r3);

        virtualinvoke $r1.<java.io.PrintWriter: void flush()>();

        return;
    }

    private static void outputAsRDF(java.io.PrintWriter, java.lang.String, com.hp.hpl.jena.query.ResultSet)
    {
        java.io.PrintWriter r2;
        com.hp.hpl.jena.rdf.model.Model $r1;
        java.lang.String r3;
        com.hp.hpl.jena.query.ResultSet r0;

        r2 := @parameter0: java.io.PrintWriter;

        r3 := @parameter1: java.lang.String;

        r0 := @parameter2: com.hp.hpl.jena.query.ResultSet;

        $r1 = staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: com.hp.hpl.jena.rdf.model.Model toModel(com.hp.hpl.jena.query.ResultSet)>(r0);

        interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Model write(java.io.Writer,java.lang.String)>(r2, r3);

        virtualinvoke r2.<java.io.PrintWriter: void flush()>();

        return;
    }

    public static void outputAsRDF(java.lang.String, boolean)
    {
        java.io.PrintStream $r1;
        java.lang.String r0;
        boolean z0;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void outputAsRDF(java.io.OutputStream,java.lang.String,boolean)>($r1, r0, z0);

        return;
    }

    public static void outputAsRDF(java.io.OutputStream, java.lang.String, boolean)
    {
        java.io.OutputStream r0;
        java.io.PrintWriter $r1;
        java.lang.String r2;
        boolean z0;

        r0 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r1 = staticinvoke <com.hp.hpl.jena.util.FileUtils: java.io.PrintWriter asPrintWriterUTF8(java.io.OutputStream)>(r0);

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void outputAsRDF(java.io.PrintWriter,java.lang.String,boolean)>($r1, r2, z0);

        virtualinvoke $r1.<java.io.PrintWriter: void flush()>();

        return;
    }

    private static void outputAsRDF(java.io.PrintWriter, java.lang.String, boolean)
    {
        java.io.PrintWriter r1;
        com.hp.hpl.jena.rdf.model.Model $r0;
        java.lang.String r2;
        boolean z0;

        r1 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r0 = staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: com.hp.hpl.jena.rdf.model.Model toModel(boolean)>(z0);

        interfaceinvoke $r0.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Model write(java.io.Writer,java.lang.String)>(r1, r2);

        virtualinvoke r1.<java.io.PrintWriter: void flush()>();

        return;
    }

    public static void outputAsXML(com.hp.hpl.jena.query.ResultSet)
    {
        java.io.PrintStream $r1;
        com.hp.hpl.jena.query.ResultSet r0;

        r0 := @parameter0: com.hp.hpl.jena.query.ResultSet;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void outputAsXML(java.io.OutputStream,com.hp.hpl.jena.query.ResultSet)>($r1, r0);

        return;
    }

    public static void outputAsXML(java.io.OutputStream, com.hp.hpl.jena.query.ResultSet)
    {
        java.io.OutputStream r0;
        com.hp.hpl.jena.query.ResultSet r1;

        r0 := @parameter0: java.io.OutputStream;

        r1 := @parameter1: com.hp.hpl.jena.query.ResultSet;

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void outputAsXML(java.io.OutputStream,com.hp.hpl.jena.query.ResultSet,java.lang.String)>(r0, r1, null);

        return;
    }

    public static void outputAsXML(com.hp.hpl.jena.query.ResultSet, java.lang.String)
    {
        java.io.PrintStream $r2;
        java.lang.String r1;
        com.hp.hpl.jena.query.ResultSet r0;

        r0 := @parameter0: com.hp.hpl.jena.query.ResultSet;

        r1 := @parameter1: java.lang.String;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void outputAsXML(java.io.OutputStream,com.hp.hpl.jena.query.ResultSet,java.lang.String)>($r2, r0, r1);

        return;
    }

    public static void outputAsXML(java.io.OutputStream, com.hp.hpl.jena.query.ResultSet, java.lang.String)
    {
        java.io.OutputStream r2;
        java.lang.String r1;
        com.hp.hpl.jena.query.ResultSet r3;
        com.hp.hpl.jena.sparql.resultset.XMLOutput $r0;

        r2 := @parameter0: java.io.OutputStream;

        r3 := @parameter1: com.hp.hpl.jena.query.ResultSet;

        r1 := @parameter2: java.lang.String;

        $r0 = new com.hp.hpl.jena.sparql.resultset.XMLOutput;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.resultset.XMLOutput: void <init>(java.lang.String)>(r1);

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.resultset.XMLOutput: void format(java.io.OutputStream,com.hp.hpl.jena.query.ResultSet)>(r2, r3);

        return;
    }

    public static void outputAsXML(boolean)
    {
        java.io.PrintStream $r0;
        boolean z0;

        z0 := @parameter0: boolean;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void outputAsXML(java.io.OutputStream,boolean)>($r0, z0);

        return;
    }

    public static void outputAsXML(java.io.OutputStream, boolean)
    {
        java.io.OutputStream r0;
        boolean z0;

        r0 := @parameter0: java.io.OutputStream;

        z0 := @parameter1: boolean;

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void outputAsXML(java.io.OutputStream,boolean,java.lang.String)>(r0, z0, null);

        return;
    }

    public static void outputAsXML(boolean, java.lang.String)
    {
        java.io.PrintStream $r1;
        java.lang.String r0;
        boolean z0;

        z0 := @parameter0: boolean;

        r0 := @parameter1: java.lang.String;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void outputAsXML(java.io.OutputStream,boolean,java.lang.String)>($r1, z0, r0);

        return;
    }

    public static void outputAsXML(java.io.OutputStream, boolean, java.lang.String)
    {
        java.io.OutputStream r1;
        com.hp.hpl.jena.sparql.resultset.XMLOutputASK $r0;
        java.lang.String r2;
        boolean z0;

        r1 := @parameter0: java.io.OutputStream;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.lang.String;

        $r0 = new com.hp.hpl.jena.sparql.resultset.XMLOutputASK;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.resultset.XMLOutputASK: void <init>(java.io.OutputStream,java.lang.String)>(r1, r2);

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.resultset.XMLOutputASK: void exec(boolean)>(z0);

        return;
    }

    public static java.lang.String asXMLString(com.hp.hpl.jena.query.ResultSet)
    {
        java.lang.String $r1;
        com.hp.hpl.jena.query.ResultSet r0;

        r0 := @parameter0: com.hp.hpl.jena.query.ResultSet;

        $r1 = staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: java.lang.String asXMLString(com.hp.hpl.jena.query.ResultSet,java.lang.String)>(r0, null);

        return $r1;
    }

    public static java.lang.String asXMLString(com.hp.hpl.jena.query.ResultSet, java.lang.String)
    {
        java.lang.String r1, $r3;
        com.hp.hpl.jena.query.ResultSet r2;
        com.hp.hpl.jena.sparql.resultset.XMLOutput $r0;

        r2 := @parameter0: com.hp.hpl.jena.query.ResultSet;

        r1 := @parameter1: java.lang.String;

        $r0 = new com.hp.hpl.jena.sparql.resultset.XMLOutput;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.resultset.XMLOutput: void <init>(java.lang.String)>(r1);

        $r3 = virtualinvoke $r0.<com.hp.hpl.jena.sparql.resultset.XMLOutput: java.lang.String asString(com.hp.hpl.jena.query.ResultSet)>(r2);

        return $r3;
    }

    public static java.lang.String asXMLString(boolean)
    {
        java.lang.String $r0;
        boolean z0;

        z0 := @parameter0: boolean;

        $r0 = staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: java.lang.String asXMLString(boolean,java.lang.String)>(z0, null);

        return $r0;
    }

    public static java.lang.String asXMLString(boolean, java.lang.String)
    {
        java.lang.String r1, $r2;
        com.hp.hpl.jena.sparql.resultset.XMLOutput $r0;
        boolean z0;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.String;

        $r0 = new com.hp.hpl.jena.sparql.resultset.XMLOutput;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.resultset.XMLOutput: void <init>(java.lang.String)>(r1);

        $r2 = virtualinvoke $r0.<com.hp.hpl.jena.sparql.resultset.XMLOutput: java.lang.String asString(boolean)>(z0);

        return $r2;
    }

    public static void outputAsJSON(com.hp.hpl.jena.query.ResultSet)
    {
        java.io.PrintStream $r1;
        com.hp.hpl.jena.query.ResultSet r0;

        r0 := @parameter0: com.hp.hpl.jena.query.ResultSet;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void outputAsJSON(java.io.OutputStream,com.hp.hpl.jena.query.ResultSet)>($r1, r0);

        return;
    }

    public static void outputAsJSON(java.io.OutputStream, com.hp.hpl.jena.query.ResultSet)
    {
        java.io.OutputStream r1;
        com.hp.hpl.jena.sparql.resultset.JSONOutput $r0;
        com.hp.hpl.jena.query.ResultSet r2;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: com.hp.hpl.jena.query.ResultSet;

        $r0 = new com.hp.hpl.jena.sparql.resultset.JSONOutput;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.resultset.JSONOutput: void <init>()>();

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.resultset.JSONOutput: void format(java.io.OutputStream,com.hp.hpl.jena.query.ResultSet)>(r1, r2);

        return;
    }

    public static void outputAsJSON(boolean)
    {
        java.io.PrintStream $r0;
        boolean z0;

        z0 := @parameter0: boolean;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void outputAsJSON(java.io.OutputStream,boolean)>($r0, z0);

        return;
    }

    public static void outputAsJSON(java.io.OutputStream, boolean)
    {
        java.io.OutputStream r1;
        com.hp.hpl.jena.sparql.resultset.JSONOutput $r0;
        boolean z0;

        r1 := @parameter0: java.io.OutputStream;

        z0 := @parameter1: boolean;

        $r0 = new com.hp.hpl.jena.sparql.resultset.JSONOutput;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.resultset.JSONOutput: void <init>()>();

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.resultset.JSONOutput: void format(java.io.OutputStream,boolean)>(r1, z0);

        return;
    }

    public static void outputAsSSE(boolean)
    {
        java.io.PrintStream $r0;
        boolean z0;

        z0 := @parameter0: boolean;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void outputAsSSE(java.io.OutputStream,boolean)>($r0, z0);

        return;
    }

    public static void outputAsSSE(java.io.OutputStream, boolean)
    {
        java.io.OutputStream r1;
        com.hp.hpl.jena.sparql.ARQNotImplemented $r0;
        boolean z0;

        r1 := @parameter0: java.io.OutputStream;

        z0 := @parameter1: boolean;

        $r0 = new com.hp.hpl.jena.sparql.ARQNotImplemented;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.ARQNotImplemented: void <init>(java.lang.String)>("outputAsSSE");

        throw $r0;
    }

    public static void outputAsSSE(com.hp.hpl.jena.query.ResultSet)
    {
        java.io.PrintStream $r1;
        com.hp.hpl.jena.query.ResultSet r0;

        r0 := @parameter0: com.hp.hpl.jena.query.ResultSet;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void outputAsSSE(java.io.OutputStream,com.hp.hpl.jena.query.ResultSet)>($r1, r0);

        return;
    }

    public static void outputAsSSE(com.hp.hpl.jena.query.ResultSet, com.hp.hpl.jena.sparql.core.Prologue)
    {
        java.io.PrintStream $r2;
        com.hp.hpl.jena.query.ResultSet r0;
        com.hp.hpl.jena.sparql.core.Prologue r1;

        r0 := @parameter0: com.hp.hpl.jena.query.ResultSet;

        r1 := @parameter1: com.hp.hpl.jena.sparql.core.Prologue;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void outputAsSSE(java.io.OutputStream,com.hp.hpl.jena.query.ResultSet,com.hp.hpl.jena.sparql.core.Prologue)>($r2, r0, r1);

        return;
    }

    public static void outputAsSSE(java.io.OutputStream, com.hp.hpl.jena.query.ResultSet)
    {
        java.io.OutputStream r0;
        com.hp.hpl.jena.query.ResultSet r1;

        r0 := @parameter0: java.io.OutputStream;

        r1 := @parameter1: com.hp.hpl.jena.query.ResultSet;

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void outputAsSSE(java.io.OutputStream,com.hp.hpl.jena.query.ResultSet,com.hp.hpl.jena.sparql.core.Prologue)>(r0, r1, null);

        return;
    }

    public static void outputAsSSE(java.io.OutputStream, com.hp.hpl.jena.query.ResultSet, com.hp.hpl.jena.sparql.core.Prologue)
    {
        java.io.OutputStream r1;
        com.hp.hpl.jena.sparql.ARQNotImplemented $r0;
        com.hp.hpl.jena.sparql.core.Prologue r3;
        com.hp.hpl.jena.query.ResultSet r2;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: com.hp.hpl.jena.query.ResultSet;

        r3 := @parameter2: com.hp.hpl.jena.sparql.core.Prologue;

        $r0 = new com.hp.hpl.jena.sparql.ARQNotImplemented;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.ARQNotImplemented: void <init>(java.lang.String)>("outputAsSSE");

        throw $r0;
    }

    public static void outputAsCSV(boolean)
    {
        java.io.PrintStream $r0;
        boolean z0;

        z0 := @parameter0: boolean;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void outputAsCSV(java.io.OutputStream,boolean)>($r0, z0);

        return;
    }

    public static void outputAsCSV(java.io.OutputStream, boolean)
    {
        java.io.OutputStream r1;
        com.hp.hpl.jena.sparql.resultset.CSVOutput $r0;
        boolean z0;

        r1 := @parameter0: java.io.OutputStream;

        z0 := @parameter1: boolean;

        $r0 = new com.hp.hpl.jena.sparql.resultset.CSVOutput;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.resultset.CSVOutput: void <init>()>();

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.resultset.CSVOutput: void format(java.io.OutputStream,boolean)>(r1, z0);

        return;
    }

    public static void outputAsCSV(com.hp.hpl.jena.query.ResultSet)
    {
        java.io.PrintStream $r1;
        com.hp.hpl.jena.query.ResultSet r0;

        r0 := @parameter0: com.hp.hpl.jena.query.ResultSet;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void outputAsCSV(java.io.OutputStream,com.hp.hpl.jena.query.ResultSet)>($r1, r0);

        return;
    }

    public static void outputAsCSV(java.io.OutputStream, com.hp.hpl.jena.query.ResultSet)
    {
        java.io.OutputStream r1;
        com.hp.hpl.jena.query.ResultSet r2;
        com.hp.hpl.jena.sparql.resultset.CSVOutput $r0;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: com.hp.hpl.jena.query.ResultSet;

        $r0 = new com.hp.hpl.jena.sparql.resultset.CSVOutput;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.resultset.CSVOutput: void <init>()>();

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.resultset.CSVOutput: void format(java.io.OutputStream,com.hp.hpl.jena.query.ResultSet)>(r1, r2);

        return;
    }

    public static void outputAsTSV(boolean)
    {
        java.io.PrintStream $r0;
        boolean z0;

        z0 := @parameter0: boolean;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void outputAsTSV(java.io.OutputStream,boolean)>($r0, z0);

        return;
    }

    public static void outputAsTSV(java.io.OutputStream, boolean)
    {
        java.io.OutputStream r1;
        com.hp.hpl.jena.sparql.resultset.TSVOutput $r0;
        boolean z0;

        r1 := @parameter0: java.io.OutputStream;

        z0 := @parameter1: boolean;

        $r0 = new com.hp.hpl.jena.sparql.resultset.TSVOutput;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.resultset.TSVOutput: void <init>()>();

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.resultset.TSVOutput: void format(java.io.OutputStream,boolean)>(r1, z0);

        return;
    }

    public static void outputAsTSV(com.hp.hpl.jena.query.ResultSet)
    {
        java.io.PrintStream $r1;
        com.hp.hpl.jena.query.ResultSet r0;

        r0 := @parameter0: com.hp.hpl.jena.query.ResultSet;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void outputAsTSV(java.io.OutputStream,com.hp.hpl.jena.query.ResultSet)>($r1, r0);

        return;
    }

    public static void outputAsTSV(java.io.OutputStream, com.hp.hpl.jena.query.ResultSet)
    {
        java.io.OutputStream r1;
        com.hp.hpl.jena.sparql.resultset.TSVOutput $r0;
        com.hp.hpl.jena.query.ResultSet r2;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: com.hp.hpl.jena.query.ResultSet;

        $r0 = new com.hp.hpl.jena.sparql.resultset.TSVOutput;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.resultset.TSVOutput: void <init>()>();

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.resultset.TSVOutput: void format(java.io.OutputStream,com.hp.hpl.jena.query.ResultSet)>(r1, r2);

        return;
    }

    public static void outputAsBIO(java.io.OutputStream, com.hp.hpl.jena.query.ResultSet)
    {
        java.io.OutputStream r4;
        com.hp.hpl.jena.sparql.engine.binding.BindingOutputStream $r3;
        com.hp.hpl.jena.query.ResultSet r0;
        java.util.List $r1, $r2;
        com.hp.hpl.jena.sparql.engine.binding.Binding $r6;
        com.hp.hpl.jena.query.QuerySolution $r5;
        boolean $z0;

        r4 := @parameter0: java.io.OutputStream;

        r0 := @parameter1: com.hp.hpl.jena.query.ResultSet;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.query.ResultSet: java.util.List getResultVars()>();

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: java.util.List varList(java.util.Collection)>($r1);

        $r3 = new com.hp.hpl.jena.sparql.engine.binding.BindingOutputStream;

        specialinvoke $r3.<com.hp.hpl.jena.sparql.engine.binding.BindingOutputStream: void <init>(java.io.OutputStream,java.util.List)>(r4, $r2);

     label1:
        $z0 = interfaceinvoke r0.<com.hp.hpl.jena.query.ResultSet: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r0.<com.hp.hpl.jena.query.ResultSet: com.hp.hpl.jena.query.QuerySolution next()>();

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingUtils: com.hp.hpl.jena.sparql.engine.binding.Binding asBinding(com.hp.hpl.jena.query.QuerySolution)>($r5);

        virtualinvoke $r3.<com.hp.hpl.jena.sparql.engine.binding.BindingOutputStream: void write(com.hp.hpl.jena.sparql.engine.binding.Binding)>($r6);

        goto label1;

     label2:
        virtualinvoke $r3.<com.hp.hpl.jena.sparql.engine.binding.BindingOutputStream: void flush()>();

        return;
    }
}
