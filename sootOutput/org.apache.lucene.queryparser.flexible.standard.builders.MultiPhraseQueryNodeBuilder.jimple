public class org.apache.lucene.queryparser.flexible.standard.builders.MultiPhraseQueryNodeBuilder extends java.lang.Object implements org.apache.lucene.queryparser.flexible.standard.builders.StandardQueryBuilder
{

    public void <init>()
    {
        org.apache.lucene.queryparser.flexible.standard.builders.MultiPhraseQueryNodeBuilder r0;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.builders.MultiPhraseQueryNodeBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.apache.lucene.search.MultiPhraseQuery build(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.index.Term $r21;
        java.lang.Integer $r9, $r10, $r19, $r23;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r0, r25;
        org.apache.lucene.index.Term[] $r12, $r14;
        boolean $z0, $z1;
        java.util.Set $r6;
        java.util.List $r3, r27, r28;
        java.lang.Object[] $r13;
        org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode r26;
        org.apache.lucene.search.MultiPhraseQuery $r2;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r16;
        java.util.LinkedList $r22;
        org.apache.lucene.queryparser.flexible.standard.builders.MultiPhraseQueryNodeBuilder r24;
        java.util.Iterator $r5, $r7;
        org.apache.lucene.queryparser.flexible.standard.nodes.MultiPhraseQueryNode r1;
        org.apache.lucene.search.TermQuery r18;
        java.util.TreeMap $r4;
        java.lang.Object $r8, $r11, $r15, $r17, $r20;

        r24 := @this: org.apache.lucene.queryparser.flexible.standard.builders.MultiPhraseQueryNodeBuilder;

        r0 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        r1 = (org.apache.lucene.queryparser.flexible.standard.nodes.MultiPhraseQueryNode) r0;

        $r2 = new org.apache.lucene.search.MultiPhraseQuery;

        specialinvoke $r2.<org.apache.lucene.search.MultiPhraseQuery: void <init>()>();

        $r3 = virtualinvoke r1.<org.apache.lucene.queryparser.flexible.standard.nodes.MultiPhraseQueryNode: java.util.List getChildren()>();

        if $r3 == null goto label5;

        $r4 = new java.util.TreeMap;

        specialinvoke $r4.<java.util.TreeMap: void <init>()>();

        $r5 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r15 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r25 = (org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) $r15;

        r26 = (org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode) r25;

        $r16 = <org.apache.lucene.queryparser.flexible.core.builders.QueryTreeBuilder: java.lang.String QUERY_TREE_BUILDER_TAGID>;

        $r17 = virtualinvoke r26.<org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode: java.lang.Object getTag(java.lang.String)>($r16);

        r18 = (org.apache.lucene.search.TermQuery) $r17;

        $i2 = virtualinvoke r26.<org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode: int getPositionIncrement()>();

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r20 = virtualinvoke $r4.<java.util.TreeMap: java.lang.Object get(java.lang.Object)>($r19);

        r27 = (java.util.List) $r20;

        if r27 != null goto label2;

        $r22 = new java.util.LinkedList;

        specialinvoke $r22.<java.util.LinkedList: void <init>()>();

        r27 = $r22;

        $i3 = virtualinvoke r26.<org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode: int getPositionIncrement()>();

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        virtualinvoke $r4.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r23, $r22);

     label2:
        $r21 = virtualinvoke r18.<org.apache.lucene.search.TermQuery: org.apache.lucene.index.Term getTerm()>();

        interfaceinvoke r27.<java.util.List: boolean add(java.lang.Object)>($r21);

        goto label1;

     label3:
        $r6 = virtualinvoke $r4.<java.util.TreeMap: java.util.Set keySet()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (java.lang.Integer) $r8;

        $i0 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r11 = virtualinvoke $r4.<java.util.TreeMap: java.lang.Object get(java.lang.Object)>($r10);

        r28 = (java.util.List) $r11;

        $i1 = interfaceinvoke r28.<java.util.List: int size()>();

        $r12 = newarray (org.apache.lucene.index.Term)[$i1];

        $r13 = interfaceinvoke r28.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r12);

        $r14 = (org.apache.lucene.index.Term[]) $r13;

        virtualinvoke $r2.<org.apache.lucene.search.MultiPhraseQuery: void add(org.apache.lucene.index.Term[],int)>($r14, $i0);

        goto label4;

     label5:
        return $r2;
    }

    public volatile org.apache.lucene.search.Query build(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r1;
        org.apache.lucene.queryparser.flexible.standard.builders.MultiPhraseQueryNodeBuilder r0;
        org.apache.lucene.search.MultiPhraseQuery $r2;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.builders.MultiPhraseQueryNodeBuilder;

        r1 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        $r2 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.builders.MultiPhraseQueryNodeBuilder: org.apache.lucene.search.MultiPhraseQuery build(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)>(r1);

        return $r2;
    }

    public volatile java.lang.Object build(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r1;
        org.apache.lucene.queryparser.flexible.standard.builders.MultiPhraseQueryNodeBuilder r0;
        org.apache.lucene.search.MultiPhraseQuery $r2;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.builders.MultiPhraseQueryNodeBuilder;

        r1 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        $r2 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.builders.MultiPhraseQueryNodeBuilder: org.apache.lucene.search.MultiPhraseQuery build(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)>(r1);

        return $r2;
    }
}
