public class org.apache.batik.transcoder.wmf.tosvg.AbstractWMFPainter extends java.lang.Object
{
    public static final java.lang.String WMF_FILE_EXTENSION;
    protected org.apache.batik.transcoder.wmf.tosvg.WMFFont wmfFont;
    protected int currentHorizAlign;
    protected int currentVertAlign;
    public static final int PEN;
    public static final int BRUSH;
    public static final int FONT;
    public static final int NULL_PEN;
    public static final int NULL_BRUSH;
    public static final int PALETTE;
    public static final int OBJ_BITMAP;
    public static final int OBJ_REGION;
    protected org.apache.batik.transcoder.wmf.tosvg.WMFRecordStore currentStore;
    protected transient boolean bReadingWMF;
    protected transient java.io.BufferedInputStream bufStream;

    public void <init>()
    {
        org.apache.batik.transcoder.wmf.tosvg.AbstractWMFPainter r0;

        r0 := @this: org.apache.batik.transcoder.wmf.tosvg.AbstractWMFPainter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.batik.transcoder.wmf.tosvg.AbstractWMFPainter: org.apache.batik.transcoder.wmf.tosvg.WMFFont wmfFont> = null;

        r0.<org.apache.batik.transcoder.wmf.tosvg.AbstractWMFPainter: int currentHorizAlign> = 0;

        r0.<org.apache.batik.transcoder.wmf.tosvg.AbstractWMFPainter: int currentVertAlign> = 0;

        r0.<org.apache.batik.transcoder.wmf.tosvg.AbstractWMFPainter: boolean bReadingWMF> = 1;

        r0.<org.apache.batik.transcoder.wmf.tosvg.AbstractWMFPainter: java.io.BufferedInputStream bufStream> = null;

        return;
    }

    protected java.awt.image.BufferedImage getImage(byte[], int, int)
    {
        byte[] r0;
        byte $b0, $b2, $b6, $b10, $b14, $b16, $b20, $b24;
        java.awt.image.BufferedImage $r2;
        org.apache.batik.transcoder.wmf.tosvg.AbstractWMFPainter r1;
        short $s1, $s3, $s7, $s11, $s15, $s17, $s21, $s25, $s30, $s32, $s34, $s36, $s38, $s40, $s42, $s44;
        int $i4, $i5, $i8, $i9, $i12, i13, $i18, $i19, $i22, $i23, $i26, i27, i28, i29, $i31, $i33, $i35, $i37, $i39, $i41, $i43, $i45;

        r1 := @this: org.apache.batik.transcoder.wmf.tosvg.AbstractWMFPainter;

        r0 := @parameter0: byte[];

        i28 := @parameter1: int;

        i29 := @parameter2: int;

        $b0 = r0[7];

        $s30 = (short) $b0;

        $s1 = $s30 & 255;

        $i31 = (int) $s1;

        $i5 = $i31 << 24;

        $b2 = r0[6];

        $s32 = (short) $b2;

        $s3 = $s32 & 255;

        $i33 = (int) $s3;

        $i4 = $i33 << 16;

        $i9 = $i5 | $i4;

        $b6 = r0[5];

        $s34 = (short) $b6;

        $s7 = $s34 & 255;

        $i35 = (int) $s7;

        $i8 = $i35 << 8;

        $i12 = $i9 | $i8;

        $b10 = r0[4];

        $s36 = (short) $b10;

        $s11 = $s36 & 255;

        $i37 = (int) $s11;

        i13 = $i12 | $i37;

        $b14 = r0[11];

        $s38 = (short) $b14;

        $s15 = $s38 & 255;

        $i39 = (int) $s15;

        $i19 = $i39 << 24;

        $b16 = r0[10];

        $s40 = (short) $b16;

        $s17 = $s40 & 255;

        $i41 = (int) $s17;

        $i18 = $i41 << 16;

        $i23 = $i19 | $i18;

        $b20 = r0[9];

        $s42 = (short) $b20;

        $s21 = $s42 & 255;

        $i43 = (int) $s21;

        $i22 = $i43 << 8;

        $i26 = $i23 | $i22;

        $b24 = r0[8];

        $s44 = (short) $b24;

        $s25 = $s44 & 255;

        $i45 = (int) $s25;

        i27 = $i26 | $i45;

        if i28 != i13 goto label1;

        if i29 == i27 goto label2;

     label1:
        return null;

     label2:
        $r2 = virtualinvoke r1.<org.apache.batik.transcoder.wmf.tosvg.AbstractWMFPainter: java.awt.image.BufferedImage getImage(byte[])>(r0);

        return $r2;
    }

    protected java.awt.Dimension getImageDimension(byte[])
    {
        byte[] r0;
        byte $b0, $b2, $b6, $b10, $b14, $b16, $b20, $b24;
        java.awt.Dimension $r3;
        org.apache.batik.transcoder.wmf.tosvg.AbstractWMFPainter r2;
        short $s1, $s3, $s7, $s11, $s15, $s17, $s21, $s25, $s28, $s30, $s32, $s34, $s36, $s38, $s40, $s42;
        int $i4, $i5, $i8, $i9, $i12, i13, $i18, $i19, $i22, $i23, $i26, i27, $i29, $i31, $i33, $i35, $i37, $i39, $i41, $i43;

        r2 := @this: org.apache.batik.transcoder.wmf.tosvg.AbstractWMFPainter;

        r0 := @parameter0: byte[];

        $b0 = r0[7];

        $s28 = (short) $b0;

        $s1 = $s28 & 255;

        $i29 = (int) $s1;

        $i5 = $i29 << 24;

        $b2 = r0[6];

        $s30 = (short) $b2;

        $s3 = $s30 & 255;

        $i31 = (int) $s3;

        $i4 = $i31 << 16;

        $i9 = $i5 | $i4;

        $b6 = r0[5];

        $s32 = (short) $b6;

        $s7 = $s32 & 255;

        $i33 = (int) $s7;

        $i8 = $i33 << 8;

        $i12 = $i9 | $i8;

        $b10 = r0[4];

        $s34 = (short) $b10;

        $s11 = $s34 & 255;

        $i35 = (int) $s11;

        i13 = $i12 | $i35;

        $b14 = r0[11];

        $s36 = (short) $b14;

        $s15 = $s36 & 255;

        $i37 = (int) $s15;

        $i19 = $i37 << 24;

        $b16 = r0[10];

        $s38 = (short) $b16;

        $s17 = $s38 & 255;

        $i39 = (int) $s17;

        $i18 = $i39 << 16;

        $i23 = $i19 | $i18;

        $b20 = r0[9];

        $s40 = (short) $b20;

        $s21 = $s40 & 255;

        $i41 = (int) $s21;

        $i22 = $i41 << 8;

        $i26 = $i23 | $i22;

        $b24 = r0[8];

        $s42 = (short) $b24;

        $s25 = $s42 & 255;

        $i43 = (int) $s25;

        i27 = $i26 | $i43;

        $r3 = new java.awt.Dimension;

        specialinvoke $r3.<java.awt.Dimension: void <init>(int,int)>(i13, i27);

        return $r3;
    }

    protected java.awt.image.BufferedImage getImage(byte[])
    {
        byte[] r0;
        byte $b0, $b2, $b6, $b10, $b14, $b16, $b20, $b24, $b29, $b31, $b35, $b39, $b43, $b44, $b45, $b47, $b51, $b53, $b57, $b61, $b64, $b66, $b70, $b74, $b78, $b82, $b86, $b106, $b110, $b114, $b123, $b133, $b137, $b141, b166;
        org.apache.batik.transcoder.wmf.tosvg.AbstractWMFPainter r5;
        short $s1, $s3, $s7, $s11, $s15, $s17, $s21, $s25, $s30, $s32, $s36, $s40, $s46, $s48, $s52, $s54, $s58, $s62, $s65, $s67, $s71, $s75, $s79, $s83, $s87, $s107, $s111, $s115, $s124, $s134, $s138, $s142, $s170, $s172, $s174, $s176, $s178, $s180, $s182, $s184, $s186, $s188, $s190, $s192, $s194, $s196, $s198, $s200, $s202, $s204, $s208, $s210, $s212, $s214, $s216, $s218, $s220, $s222, $s224, $s226, $s228, $s230, $s232, $s234;
        int[] r1, $r4, r6;
        int $i4, $i5, $i8, $i9, $i12, i13, $i18, $i19, $i22, $i23, $i26, i27, $i28, $i33, $i34, $i37, $i38, $i41, i42, $i49, i50, $i55, $i56, $i59, $i60, $i63, $i68, $i69, $i72, $i73, $i76, $i77, $i80, $i81, $i84, $i85, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i108, $i109, $i112, $i113, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i135, $i136, $i139, $i140, $i143, $i144, $i145, $i146, $i147, $i148, $i149, $i150, i151, i152, i153, i154, i155, i156, i157, i158, i159, i160, i161, i162, i163, i164, i165, i167, i168, i169, $i171, $i173, $i175, $i177, $i179, $i181, $i183, $i185, $i187, $i189, $i191, $i193, $i195, $i197, $i199, $i201, $i203, $i205, $i207, $i209, $i211, $i213, $i215, $i217, $i219, $i221, $i223, $i225, $i227, $i229, $i231, $i233, $i235, $i236, $i238, $i240;
        java.awt.image.WritableRaster $r3;
        java.awt.image.BufferedImage $r7;

        r5 := @this: org.apache.batik.transcoder.wmf.tosvg.AbstractWMFPainter;

        r0 := @parameter0: byte[];

        $b0 = r0[7];

        $s170 = (short) $b0;

        $s1 = $s170 & 255;

        $i171 = (int) $s1;

        $i5 = $i171 << 24;

        $b2 = r0[6];

        $s172 = (short) $b2;

        $s3 = $s172 & 255;

        $i173 = (int) $s3;

        $i4 = $i173 << 16;

        $i9 = $i5 | $i4;

        $b6 = r0[5];

        $s174 = (short) $b6;

        $s7 = $s174 & 255;

        $i175 = (int) $s7;

        $i8 = $i175 << 8;

        $i12 = $i9 | $i8;

        $b10 = r0[4];

        $s176 = (short) $b10;

        $s11 = $s176 & 255;

        $i177 = (int) $s11;

        i13 = $i12 | $i177;

        $b14 = r0[11];

        $s178 = (short) $b14;

        $s15 = $s178 & 255;

        $i179 = (int) $s15;

        $i19 = $i179 << 24;

        $b16 = r0[10];

        $s180 = (short) $b16;

        $s17 = $s180 & 255;

        $i181 = (int) $s17;

        $i18 = $i181 << 16;

        $i23 = $i19 | $i18;

        $b20 = r0[9];

        $s182 = (short) $b20;

        $s21 = $s182 & 255;

        $i183 = (int) $s21;

        $i22 = $i183 << 8;

        $i26 = $i23 | $i22;

        $b24 = r0[8];

        $s184 = (short) $b24;

        $s25 = $s184 & 255;

        $i185 = (int) $s25;

        i27 = $i26 | $i185;

        $i28 = i13 * i27;

        r1 = newarray (int)[$i28];

        $r7 = new java.awt.image.BufferedImage;

        specialinvoke $r7.<java.awt.image.BufferedImage: void <init>(int,int,int)>(i13, i27, 1);

        $r3 = virtualinvoke $r7.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        $b29 = r0[3];

        $s186 = (short) $b29;

        $s30 = $s186 & 255;

        $i187 = (int) $s30;

        $i34 = $i187 << 24;

        $b31 = r0[2];

        $s188 = (short) $b31;

        $s32 = $s188 & 255;

        $i189 = (int) $s32;

        $i33 = $i189 << 16;

        $i38 = $i34 | $i33;

        $b35 = r0[1];

        $s190 = (short) $b35;

        $s36 = $s190 & 255;

        $i191 = (int) $s36;

        $i37 = $i191 << 8;

        $i41 = $i38 | $i37;

        $b39 = r0[0];

        $s192 = (short) $b39;

        $s40 = $s192 & 255;

        $i193 = (int) $s40;

        i42 = $i41 | $i193;

        $b43 = r0[13];

        $b44 = r0[12];

        $b45 = r0[15];

        $s194 = (short) $b45;

        $s46 = $s194 & 255;

        $i195 = (int) $s46;

        $i49 = $i195 << 8;

        $b47 = r0[14];

        $s196 = (short) $b47;

        $s48 = $s196 & 255;

        $i197 = (int) $s48;

        i50 = $i49 | $i197;

        $b51 = r0[23];

        $s198 = (short) $b51;

        $s52 = $s198 & 255;

        $i199 = (int) $s52;

        $i56 = $i199 << 24;

        $b53 = r0[22];

        $s200 = (short) $b53;

        $s54 = $s200 & 255;

        $i201 = (int) $s54;

        $i55 = $i201 << 16;

        $i60 = $i56 | $i55;

        $b57 = r0[21];

        $s202 = (short) $b57;

        $s58 = $s202 & 255;

        $i203 = (int) $s58;

        $i59 = $i203 << 8;

        $i63 = $i60 | $i59;

        $b61 = r0[20];

        $s204 = (short) $b61;

        $s62 = $s204 & 255;

        $i205 = (int) $s62;

        i151 = $i63 | $i205;

        if i151 != 0 goto label01;

        $i146 = i13 * i50;

        $i147 = $i146 + 31;

        $i207 = (int) -32;

        $i148 = $i147 & $i207;

        $i149 = $i148 >> 3;

        i151 = $i149 * i27;

     label01:
        $b64 = r0[35];

        $s208 = (short) $b64;

        $s65 = $s208 & 255;

        $i209 = (int) $s65;

        $i69 = $i209 << 24;

        $b66 = r0[34];

        $s210 = (short) $b66;

        $s67 = $s210 & 255;

        $i211 = (int) $s67;

        $i68 = $i211 << 16;

        $i73 = $i69 | $i68;

        $b70 = r0[33];

        $s212 = (short) $b70;

        $s71 = $s212 & 255;

        $i213 = (int) $s71;

        $i72 = $i213 << 8;

        $i76 = $i73 | $i72;

        $b74 = r0[32];

        $s214 = (short) $b74;

        $s75 = $s214 & 255;

        $i215 = (int) $s75;

        $i150 = $i76 | $i215;

        if i50 != 24 goto label06;

        $i128 = i151 / i27;

        $i127 = i13 * 3;

        i152 = $i128 - $i127;

        i153 = i42;

        i154 = 0;

        goto label05;

     label02:
        i155 = 0;

        goto label04;

     label03:
        $i129 = i27 - i154;

        $i130 = $i129 - 1;

        $i131 = i13 * $i130;

        $i145 = $i131 + i155;

        $i132 = i153 + 2;

        $b133 = r0[$i132];

        $s216 = (short) $b133;

        $s134 = $s216 & 255;

        $i217 = (int) $s134;

        $i135 = $i217 << 16;

        $i140 = -16777216 | $i135;

        $i136 = i153 + 1;

        $b137 = r0[$i136];

        $s218 = (short) $b137;

        $s138 = $s218 & 255;

        $i219 = (int) $s138;

        $i139 = $i219 << 8;

        $i143 = $i140 | $i139;

        $b141 = r0[i153];

        $s220 = (short) $b141;

        $s142 = $s220 & 255;

        $i221 = (int) $s142;

        $i144 = $i143 | $i221;

        r1[$i145] = $i144;

        i153 = i153 + 3;

        i155 = i155 + 1;

     label04:
        if i155 < i13 goto label03;

        i153 = i153 + i152;

        i154 = i154 + 1;

     label05:
        if i154 < i27 goto label02;

        goto label26;

     label06:
        if i50 != 8 goto label15;

        if $i150 <= 0 goto label07;

        i156 = $i150;

        goto label08;

     label07:
        i156 = 256;

     label08:
        i157 = i42;

        $r4 = newarray (int)[i156];

        i158 = 0;

        goto label10;

     label09:
        $i105 = i157 + 2;

        $b106 = r0[$i105];

        $s222 = (short) $b106;

        $s107 = $s222 & 255;

        $i223 = (int) $s107;

        $i108 = $i223 << 16;

        $i113 = -16777216 | $i108;

        $i109 = i157 + 1;

        $b110 = r0[$i109];

        $s224 = (short) $b110;

        $s111 = $s224 & 255;

        $i225 = (int) $s111;

        $i112 = $i225 << 8;

        $i116 = $i113 | $i112;

        $b114 = r0[i157];

        $s226 = (short) $b114;

        $s115 = $s226 & 255;

        $i227 = (int) $s115;

        $i117 = $i116 | $i227;

        $r4[i158] = $i117;

        i157 = i157 + 4;

        i158 = i158 + 1;

     label10:
        if i158 < i156 goto label09;

        $i118 = lengthof r0;

        i159 = $i118 - i157;

        $i119 = i159 / i27;

        i160 = $i119 - i13;

        i161 = 0;

        goto label14;

     label11:
        i162 = 0;

        goto label13;

     label12:
        $i120 = i27 - i161;

        $i121 = $i120 - 1;

        $i122 = i13 * $i121;

        $i126 = $i122 + i162;

        $b123 = r0[i157];

        $s228 = (short) $b123;

        $s124 = $s228 & 255;

        $i229 = (int) $s124;

        $i125 = $r4[$i229];

        r1[$i126] = $i125;

        i157 = i157 + 1;

        i162 = i162 + 1;

     label13:
        if i162 < i13 goto label12;

        i157 = i157 + i160;

        i161 = i161 + 1;

     label14:
        if i161 < i27 goto label11;

        goto label26;

     label15:
        if i50 != 1 goto label26;

        i163 = i42;

        r6 = newarray (int)[2];

        i164 = 0;

        goto label17;

     label16:
        $i77 = i163 + 2;

        $b78 = r0[$i77];

        $s230 = (short) $b78;

        $s79 = $s230 & 255;

        $i231 = (int) $s79;

        $i80 = $i231 << 16;

        $i85 = -16777216 | $i80;

        $i81 = i163 + 1;

        $b82 = r0[$i81];

        $s232 = (short) $b82;

        $s83 = $s232 & 255;

        $i233 = (int) $s83;

        $i84 = $i233 << 8;

        $i88 = $i85 | $i84;

        $b86 = r0[i163];

        $s234 = (short) $b86;

        $s87 = $s234 & 255;

        $i235 = (int) $s87;

        $i89 = $i88 | $i235;

        r6[i164] = $i89;

        i163 = i163 + 4;

        i164 = i164 + 1;

     label17:
        if i164 < 2 goto label16;

        i165 = 7;

        b166 = r0[i163];

        $i91 = i151 / i27;

        $i90 = i13 / 8;

        i167 = $i91 - $i90;

        i168 = 0;

        goto label25;

     label18:
        i169 = 0;

        goto label23;

     label19:
        $i92 = 1 << i165;

        $i236 = (int) b166;

        $i93 = $i236 & $i92;

        if $i93 == 0 goto label20;

        $i99 = i27 - i168;

        $i100 = $i99 - 1;

        $i101 = i13 * $i100;

        $i103 = $i101 + i169;

        $i102 = r6[1];

        r1[$i103] = $i102;

        goto label21;

     label20:
        $i94 = i27 - i168;

        $i95 = $i94 - 1;

        $i96 = i13 * $i95;

        $i98 = $i96 + i169;

        $i97 = r6[0];

        r1[$i98] = $i97;

     label21:
        $i238 = (int) -1;

        i165 = i165 + $i238;

        $i240 = (int) -1;

        if i165 != $i240 goto label22;

        i165 = 7;

        i163 = i163 + 1;

        b166 = r0[i163];

     label22:
        i169 = i169 + 1;

     label23:
        if i169 < i13 goto label19;

        i163 = i163 + i167;

        i165 = 7;

        $i104 = lengthof r0;

        if i163 >= $i104 goto label24;

        b166 = r0[i163];

     label24:
        i168 = i168 + 1;

     label25:
        if i168 < i27 goto label18;

     label26:
        virtualinvoke $r3.<java.awt.image.WritableRaster: void setDataElements(int,int,int,int,java.lang.Object)>(0, 0, i13, i27, r1);

        return $r7;
    }

    protected java.text.AttributedCharacterIterator getCharacterIterator(java.awt.Graphics2D, java.lang.String, org.apache.batik.transcoder.wmf.tosvg.WMFFont)
    {
        org.apache.batik.transcoder.wmf.tosvg.WMFFont r3;
        org.apache.batik.transcoder.wmf.tosvg.AbstractWMFPainter r0;
        java.text.AttributedCharacterIterator $r5;
        java.awt.Graphics2D r1;
        java.lang.String r2;
        java.text.AttributedString $r4;

        r0 := @this: org.apache.batik.transcoder.wmf.tosvg.AbstractWMFPainter;

        r1 := @parameter0: java.awt.Graphics2D;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.apache.batik.transcoder.wmf.tosvg.WMFFont;

        $r4 = virtualinvoke r0.<org.apache.batik.transcoder.wmf.tosvg.AbstractWMFPainter: java.text.AttributedString getAttributedString(java.awt.Graphics2D,java.lang.String,org.apache.batik.transcoder.wmf.tosvg.WMFFont)>(r1, r2, r3);

        $r5 = virtualinvoke $r4.<java.text.AttributedString: java.text.AttributedCharacterIterator getIterator()>();

        return $r5;
    }

    protected java.text.AttributedCharacterIterator getCharacterIterator(java.awt.Graphics2D, java.lang.String, org.apache.batik.transcoder.wmf.tosvg.WMFFont, int)
    {
        org.apache.batik.transcoder.wmf.tosvg.WMFFont r3;
        org.apache.batik.transcoder.wmf.tosvg.AbstractWMFPainter r0;
        java.text.AttributedCharacterIterator $r5;
        java.awt.Graphics2D r1;
        int i0;
        java.lang.String r2;
        java.text.AttributedString $r4;

        r0 := @this: org.apache.batik.transcoder.wmf.tosvg.AbstractWMFPainter;

        r1 := @parameter0: java.awt.Graphics2D;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.apache.batik.transcoder.wmf.tosvg.WMFFont;

        i0 := @parameter3: int;

        $r4 = virtualinvoke r0.<org.apache.batik.transcoder.wmf.tosvg.AbstractWMFPainter: java.text.AttributedString getAttributedString(java.awt.Graphics2D,java.lang.String,org.apache.batik.transcoder.wmf.tosvg.WMFFont)>(r1, r2, r3);

        $r5 = virtualinvoke $r4.<java.text.AttributedString: java.text.AttributedCharacterIterator getIterator()>();

        return $r5;
    }

    protected java.text.AttributedString getAttributedString(java.awt.Graphics2D, java.lang.String, org.apache.batik.transcoder.wmf.tosvg.WMFFont)
    {
        org.apache.batik.transcoder.wmf.tosvg.WMFFont $r8, $r9, $r12, r21;
        java.lang.Float $r4, $r10, $r13, $r15, $r17;
        org.apache.batik.transcoder.wmf.tosvg.AbstractWMFPainter r7;
        java.awt.font.TextAttribute $r5, $r6, $r11, $r14, $r16, $r18, $r20;
        java.lang.Integer $r19;
        java.awt.Graphics2D r2;
        int $i0, $i1, $i2;
        java.lang.String r1;
        java.awt.Font $r3;
        java.text.AttributedString $r0;
        float $f0;

        r7 := @this: org.apache.batik.transcoder.wmf.tosvg.AbstractWMFPainter;

        r2 := @parameter0: java.awt.Graphics2D;

        r1 := @parameter1: java.lang.String;

        r21 := @parameter2: org.apache.batik.transcoder.wmf.tosvg.WMFFont;

        $r0 = new java.text.AttributedString;

        specialinvoke $r0.<java.text.AttributedString: void <init>(java.lang.String)>(r1);

        $r3 = virtualinvoke r2.<java.awt.Graphics: java.awt.Font getFont()>();

        $r5 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute SIZE>;

        $r4 = new java.lang.Float;

        $f0 = virtualinvoke $r3.<java.awt.Font: float getSize2D()>();

        specialinvoke $r4.<java.lang.Float: void <init>(float)>($f0);

        virtualinvoke $r0.<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object)>($r5, $r4);

        $r6 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute FONT>;

        virtualinvoke $r0.<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object)>($r6, $r3);

        $r8 = r7.<org.apache.batik.transcoder.wmf.tosvg.AbstractWMFPainter: org.apache.batik.transcoder.wmf.tosvg.WMFFont wmfFont>;

        $i0 = $r8.<org.apache.batik.transcoder.wmf.tosvg.WMFFont: int underline>;

        if $i0 == 0 goto label1;

        $r20 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute UNDERLINE>;

        $r19 = <java.awt.font.TextAttribute: java.lang.Integer UNDERLINE_ON>;

        virtualinvoke $r0.<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object)>($r20, $r19);

     label1:
        $r9 = r7.<org.apache.batik.transcoder.wmf.tosvg.AbstractWMFPainter: org.apache.batik.transcoder.wmf.tosvg.WMFFont wmfFont>;

        $i1 = $r9.<org.apache.batik.transcoder.wmf.tosvg.WMFFont: int italic>;

        if $i1 == 0 goto label2;

        $r18 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute POSTURE>;

        $r17 = <java.awt.font.TextAttribute: java.lang.Float POSTURE_OBLIQUE>;

        virtualinvoke $r0.<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object)>($r18, $r17);

        goto label3;

     label2:
        $r11 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute POSTURE>;

        $r10 = <java.awt.font.TextAttribute: java.lang.Float POSTURE_REGULAR>;

        virtualinvoke $r0.<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object)>($r11, $r10);

     label3:
        $r12 = r7.<org.apache.batik.transcoder.wmf.tosvg.AbstractWMFPainter: org.apache.batik.transcoder.wmf.tosvg.WMFFont wmfFont>;

        $i2 = $r12.<org.apache.batik.transcoder.wmf.tosvg.WMFFont: int weight>;

        if $i2 <= 400 goto label4;

        $r16 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute WEIGHT>;

        $r15 = <java.awt.font.TextAttribute: java.lang.Float WEIGHT_BOLD>;

        virtualinvoke $r0.<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object)>($r16, $r15);

        goto label5;

     label4:
        $r14 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute WEIGHT>;

        $r13 = <java.awt.font.TextAttribute: java.lang.Float WEIGHT_REGULAR>;

        virtualinvoke $r0.<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object)>($r14, $r13);

     label5:
        return $r0;
    }

    public void setRecordStore(org.apache.batik.transcoder.wmf.tosvg.WMFRecordStore)
    {
        org.apache.batik.transcoder.wmf.tosvg.AbstractWMFPainter r1;
        java.lang.IllegalArgumentException $r2;
        org.apache.batik.transcoder.wmf.tosvg.WMFRecordStore r0;

        r1 := @this: org.apache.batik.transcoder.wmf.tosvg.AbstractWMFPainter;

        r0 := @parameter0: org.apache.batik.transcoder.wmf.tosvg.WMFRecordStore;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label1:
        r1.<org.apache.batik.transcoder.wmf.tosvg.AbstractWMFPainter: org.apache.batik.transcoder.wmf.tosvg.WMFRecordStore currentStore> = r0;

        return;
    }

    public org.apache.batik.transcoder.wmf.tosvg.WMFRecordStore getRecordStore()
    {
        org.apache.batik.transcoder.wmf.tosvg.AbstractWMFPainter r0;
        org.apache.batik.transcoder.wmf.tosvg.WMFRecordStore $r1;

        r0 := @this: org.apache.batik.transcoder.wmf.tosvg.AbstractWMFPainter;

        $r1 = r0.<org.apache.batik.transcoder.wmf.tosvg.AbstractWMFPainter: org.apache.batik.transcoder.wmf.tosvg.WMFRecordStore currentStore>;

        return $r1;
    }

    protected int addObject(org.apache.batik.transcoder.wmf.tosvg.WMFRecordStore, int, java.lang.Object)
    {
        org.apache.batik.transcoder.wmf.tosvg.AbstractWMFPainter r0;
        org.apache.batik.transcoder.wmf.tosvg.WMFRecordStore $r2, r3;
        int i0, $i1;
        java.lang.Object r1;

        r0 := @this: org.apache.batik.transcoder.wmf.tosvg.AbstractWMFPainter;

        r3 := @parameter0: org.apache.batik.transcoder.wmf.tosvg.WMFRecordStore;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.Object;

        $r2 = r0.<org.apache.batik.transcoder.wmf.tosvg.AbstractWMFPainter: org.apache.batik.transcoder.wmf.tosvg.WMFRecordStore currentStore>;

        $i1 = virtualinvoke $r2.<org.apache.batik.transcoder.wmf.tosvg.AbstractWMFReader: int addObject(int,java.lang.Object)>(i0, r1);

        return $i1;
    }

    protected int addObjectAt(org.apache.batik.transcoder.wmf.tosvg.WMFRecordStore, int, java.lang.Object, int)
    {
        org.apache.batik.transcoder.wmf.tosvg.AbstractWMFPainter r0;
        org.apache.batik.transcoder.wmf.tosvg.WMFRecordStore $r2, r3;
        int i0, i1, $i2;
        java.lang.Object r1;

        r0 := @this: org.apache.batik.transcoder.wmf.tosvg.AbstractWMFPainter;

        r3 := @parameter0: org.apache.batik.transcoder.wmf.tosvg.WMFRecordStore;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.Object;

        i1 := @parameter3: int;

        $r2 = r0.<org.apache.batik.transcoder.wmf.tosvg.AbstractWMFPainter: org.apache.batik.transcoder.wmf.tosvg.WMFRecordStore currentStore>;

        $i2 = virtualinvoke $r2.<org.apache.batik.transcoder.wmf.tosvg.AbstractWMFReader: int addObjectAt(int,java.lang.Object,int)>(i0, r1, i1);

        return $i2;
    }

    public static void <clinit>()
    {
        <org.apache.batik.transcoder.wmf.tosvg.AbstractWMFPainter: int OBJ_REGION> = 8;

        <org.apache.batik.transcoder.wmf.tosvg.AbstractWMFPainter: int OBJ_BITMAP> = 7;

        <org.apache.batik.transcoder.wmf.tosvg.AbstractWMFPainter: int PALETTE> = 6;

        <org.apache.batik.transcoder.wmf.tosvg.AbstractWMFPainter: int NULL_BRUSH> = 5;

        <org.apache.batik.transcoder.wmf.tosvg.AbstractWMFPainter: int NULL_PEN> = 4;

        <org.apache.batik.transcoder.wmf.tosvg.AbstractWMFPainter: int FONT> = 3;

        <org.apache.batik.transcoder.wmf.tosvg.AbstractWMFPainter: int BRUSH> = 2;

        <org.apache.batik.transcoder.wmf.tosvg.AbstractWMFPainter: int PEN> = 1;

        <org.apache.batik.transcoder.wmf.tosvg.AbstractWMFPainter: java.lang.String WMF_FILE_EXTENSION> = ".wmf";

        return;
    }
}
