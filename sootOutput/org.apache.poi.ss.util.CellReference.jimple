public class org.apache.poi.ss.util.CellReference extends java.lang.Object
{
    private static final char ABSOLUTE_REFERENCE_MARKER;
    private static final char SHEET_NAME_DELIMITER;
    private static final char SPECIAL_NAME_DELIMITER;
    private static final java.util.regex.Pattern CELL_REF_PATTERN;
    private static final java.util.regex.Pattern COLUMN_REF_PATTERN;
    private static final java.util.regex.Pattern ROW_REF_PATTERN;
    private static final java.util.regex.Pattern NAMED_RANGE_NAME_PATTERN;
    private final int _rowIndex;
    private final int _colIndex;
    private final java.lang.String _sheetName;
    private final boolean _isRowAbs;
    private final boolean _isColAbs;

    public void <init>(java.lang.String)
    {
        java.lang.String[] $r2;
        org.apache.poi.ss.util.CellReference r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i9, $i11, $i12, $i14;
        java.lang.String r1, $r3, $r4, $r9, r10, r11;
        boolean $z0, $z1, $z2, $z3, $z4;
        char $c7, $c8;
        java.lang.IllegalArgumentException $r13;
        java.lang.StringBuilder $r7, $r8, $r12;

        r0 := @this: org.apache.poi.ss.util.CellReference;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>("#REF!");

        if $z0 == 0 goto label01;

        $r13 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cell reference invalid: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r13;

     label01:
        $r2 = staticinvoke <org.apache.poi.ss.util.CellReference: java.lang.String[] separateRefParts(java.lang.String)>(r1);

        $r3 = $r2[0];

        r0.<org.apache.poi.ss.util.CellReference: java.lang.String _sheetName> = $r3;

        r10 = $r2[1];

        $i0 = virtualinvoke r10.<java.lang.String: int length()>();

        if $i0 <= 0 goto label02;

        $c8 = virtualinvoke r10.<java.lang.String: char charAt(int)>(0);

        $i9 = (int) $c8;

        if $i9 != 36 goto label02;

        $z1 = 1;

        goto label03;

     label02:
        $z1 = 0;

     label03:
        r0.<org.apache.poi.ss.util.CellReference: boolean _isColAbs> = $z1;

        $z2 = r0.<org.apache.poi.ss.util.CellReference: boolean _isColAbs>;

        if $z2 == 0 goto label04;

        r10 = virtualinvoke r10.<java.lang.String: java.lang.String substring(int)>(1);

     label04:
        $i1 = virtualinvoke r10.<java.lang.String: int length()>();

        if $i1 != 0 goto label05;

        $i11 = (int) -1;

        r0.<org.apache.poi.ss.util.CellReference: int _colIndex> = $i11;

        goto label06;

     label05:
        $i2 = staticinvoke <org.apache.poi.ss.util.CellReference: int convertColStringToIndex(java.lang.String)>(r10);

        r0.<org.apache.poi.ss.util.CellReference: int _colIndex> = $i2;

     label06:
        $r4 = $r2[2];

        r11 = $r4;

        $i3 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i3 <= 0 goto label07;

        $c7 = virtualinvoke $r4.<java.lang.String: char charAt(int)>(0);

        $i12 = (int) $c7;

        if $i12 != 36 goto label07;

        $z3 = 1;

        goto label08;

     label07:
        $z3 = 0;

     label08:
        r0.<org.apache.poi.ss.util.CellReference: boolean _isRowAbs> = $z3;

        $z4 = r0.<org.apache.poi.ss.util.CellReference: boolean _isRowAbs>;

        if $z4 == 0 goto label09;

        r11 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int)>(1);

     label09:
        $i4 = virtualinvoke r11.<java.lang.String: int length()>();

        if $i4 != 0 goto label10;

        $i14 = (int) -1;

        r0.<org.apache.poi.ss.util.CellReference: int _rowIndex> = $i14;

        goto label11;

     label10:
        $i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r11);

        $i6 = $i5 - 1;

        r0.<org.apache.poi.ss.util.CellReference: int _rowIndex> = $i6;

     label11:
        return;
    }

    public void <init>(int, int)
    {
        int i0, i1;
        org.apache.poi.ss.util.CellReference r0;

        r0 := @this: org.apache.poi.ss.util.CellReference;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<org.apache.poi.ss.util.CellReference: void <init>(int,int,boolean,boolean)>(i0, i1, 0, 0);

        return;
    }

    public void <init>(int, short)
    {
        short s1;
        int i0, $i2, $i3, $i5;
        org.apache.poi.ss.util.CellReference r0;

        r0 := @this: org.apache.poi.ss.util.CellReference;

        i0 := @parameter0: int;

        s1 := @parameter1: short;

        $i3 = (int) s1;

        $i5 = (int) 65535;

        $i2 = $i3 & $i5;

        specialinvoke r0.<org.apache.poi.ss.util.CellReference: void <init>(int,int,boolean,boolean)>(i0, $i2, 0, 0);

        return;
    }

    public void <init>(org.apache.poi.ss.usermodel.Cell)
    {
        org.apache.poi.ss.usermodel.Cell r1;
        int $i0, $i1;
        org.apache.poi.ss.util.CellReference r0;

        r0 := @this: org.apache.poi.ss.util.CellReference;

        r1 := @parameter0: org.apache.poi.ss.usermodel.Cell;

        $i0 = interfaceinvoke r1.<org.apache.poi.ss.usermodel.Cell: int getRowIndex()>();

        $i1 = interfaceinvoke r1.<org.apache.poi.ss.usermodel.Cell: int getColumnIndex()>();

        specialinvoke r0.<org.apache.poi.ss.util.CellReference: void <init>(int,int,boolean,boolean)>($i0, $i1, 0, 0);

        return;
    }

    public void <init>(int, int, boolean, boolean)
    {
        int i0, i1;
        org.apache.poi.ss.util.CellReference r0;
        boolean z0, z1;

        r0 := @this: org.apache.poi.ss.util.CellReference;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        specialinvoke r0.<org.apache.poi.ss.util.CellReference: void <init>(java.lang.String,int,int,boolean,boolean)>(null, i0, i1, z0, z1);

        return;
    }

    public void <init>(java.lang.String, int, int, boolean, boolean)
    {
        java.lang.IllegalArgumentException $r4, $r5;
        org.apache.poi.ss.util.CellReference r0;
        int i0, i1, $i3, $i5;
        java.lang.String r1;
        boolean z0, z1;

        r0 := @this: org.apache.poi.ss.util.CellReference;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i3 = (int) -1;

        if i0 >= $i3 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("row index may not be negative");

        throw $r4;

     label1:
        $i5 = (int) -1;

        if i1 >= $i5 goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("column index may not be negative");

        throw $r5;

     label2:
        r0.<org.apache.poi.ss.util.CellReference: java.lang.String _sheetName> = r1;

        r0.<org.apache.poi.ss.util.CellReference: int _rowIndex> = i0;

        r0.<org.apache.poi.ss.util.CellReference: int _colIndex> = i1;

        r0.<org.apache.poi.ss.util.CellReference: boolean _isRowAbs> = z0;

        r0.<org.apache.poi.ss.util.CellReference: boolean _isColAbs> = z1;

        return;
    }

    public int getRow()
    {
        int $i0;
        org.apache.poi.ss.util.CellReference r0;

        r0 := @this: org.apache.poi.ss.util.CellReference;

        $i0 = r0.<org.apache.poi.ss.util.CellReference: int _rowIndex>;

        return $i0;
    }

    public short getCol()
    {
        int $i0;
        short $s1;
        org.apache.poi.ss.util.CellReference r0;

        r0 := @this: org.apache.poi.ss.util.CellReference;

        $i0 = r0.<org.apache.poi.ss.util.CellReference: int _colIndex>;

        $s1 = (short) $i0;

        return $s1;
    }

    public boolean isRowAbsolute()
    {
        org.apache.poi.ss.util.CellReference r0;
        boolean $z0;

        r0 := @this: org.apache.poi.ss.util.CellReference;

        $z0 = r0.<org.apache.poi.ss.util.CellReference: boolean _isRowAbs>;

        return $z0;
    }

    public boolean isColAbsolute()
    {
        org.apache.poi.ss.util.CellReference r0;
        boolean $z0;

        r0 := @this: org.apache.poi.ss.util.CellReference;

        $z0 = r0.<org.apache.poi.ss.util.CellReference: boolean _isColAbs>;

        return $z0;
    }

    public java.lang.String getSheetName()
    {
        java.lang.String $r1;
        org.apache.poi.ss.util.CellReference r0;

        r0 := @this: org.apache.poi.ss.util.CellReference;

        $r1 = r0.<org.apache.poi.ss.util.CellReference: java.lang.String _sheetName>;

        return $r1;
    }

    public static boolean isPartAbsolute(java.lang.String)
    {
        int $i1;
        char $c0;
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $c0 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i1 = (int) $c0;

        if $i1 != 36 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static int convertColStringToIndex(java.lang.String)
    {
        int $i0, $i1, $i3, $i4, $i5, i6, i7, $i8, $i9;
        java.lang.String r0, $r1, $r8;
        char c2;
        java.lang.IllegalArgumentException $r10;
        char[] $r2;
        java.lang.StringBuilder $r5, $r6, $r7, $r9;

        r0 := @parameter0: java.lang.String;

        i6 = 0;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String toUpperCase()>();

        $r2 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        i7 = 0;

     label1:
        $i0 = lengthof $r2;

        if i7 >= $i0 goto label4;

        c2 = $r2[i7];

        $i8 = (int) c2;

        if $i8 != 36 goto label2;

        if i7 == 0 goto label3;

        $r10 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad col ref format \'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r10;

     label2:
        $i5 = i6 * 26;

        $i9 = (int) c2;

        $i3 = $i9 - 65;

        $i4 = $i3 + 1;

        i6 = $i5 + $i4;

     label3:
        i7 = i7 + 1;

        goto label1;

     label4:
        $i1 = i6 - 1;

        return $i1;
    }

    public static org.apache.poi.ss.util.CellReference$NameType classifyCellReference(java.lang.String, org.apache.poi.ss.SpreadsheetVersion)
    {
        org.apache.poi.ss.util.CellReference$NameType $r6, $r7, $r8, $r9, $r10;
        java.util.regex.Matcher $r2;
        int $i0, $i2, $i3, $i5;
        java.lang.String r0, $r3, $r4, $r16;
        boolean $z0, $z1, $z2, $z3, $z4;
        char $c1, $c4;
        java.lang.IllegalArgumentException $r18, $r20;
        org.apache.poi.ss.SpreadsheetVersion r5;
        java.lang.StringBuilder $r13, $r14, $r15, $r19;
        java.util.regex.Pattern $r1;

        r0 := @parameter0: java.lang.String;

        r5 := @parameter1: org.apache.poi.ss.SpreadsheetVersion;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 >= 1 goto label1;

        $r18 = new java.lang.IllegalArgumentException;

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Empty string not allowed");

        throw $r18;

     label1:
        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i5 = (int) $c1;

        lookupswitch($i5)
        {
            case 36: goto label2;
            case 46: goto label2;
            case 95: goto label2;
            default: goto label3;
        };

     label2:
        goto label4;

     label3:
        $z2 = staticinvoke <java.lang.Character: boolean isLetter(char)>($c1);

        if $z2 != 0 goto label4;

        $z3 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c1);

        if $z3 != 0 goto label4;

        $r20 = new java.lang.IllegalArgumentException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid first char (");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") of cell reference or named range.  Letter expected");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r20;

     label4:
        $i3 = $i0 - 1;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i3);

        $z4 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c4);

        if $z4 != 0 goto label5;

        $r10 = staticinvoke <org.apache.poi.ss.util.CellReference: org.apache.poi.ss.util.CellReference$NameType validateNamedRangeName(java.lang.String,org.apache.poi.ss.SpreadsheetVersion)>(r0, r5);

        return $r10;

     label5:
        $r1 = <org.apache.poi.ss.util.CellReference: java.util.regex.Pattern CELL_REF_PATTERN>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean matches()>();

        if $z0 != 0 goto label6;

        $r9 = staticinvoke <org.apache.poi.ss.util.CellReference: org.apache.poi.ss.util.CellReference$NameType validateNamedRangeName(java.lang.String,org.apache.poi.ss.SpreadsheetVersion)>(r0, r5);

        return $r9;

     label6:
        $r3 = virtualinvoke $r2.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r4 = virtualinvoke $r2.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        $z1 = staticinvoke <org.apache.poi.ss.util.CellReference: boolean cellReferenceIsWithinRange(java.lang.String,java.lang.String,org.apache.poi.ss.SpreadsheetVersion)>($r3, $r4, r5);

        if $z1 == 0 goto label7;

        $r8 = <org.apache.poi.ss.util.CellReference$NameType: org.apache.poi.ss.util.CellReference$NameType CELL>;

        return $r8;

     label7:
        $i2 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(36);

        if $i2 < 0 goto label8;

        $r7 = <org.apache.poi.ss.util.CellReference$NameType: org.apache.poi.ss.util.CellReference$NameType BAD_CELL_OR_NAMED_RANGE>;

        return $r7;

     label8:
        $r6 = <org.apache.poi.ss.util.CellReference$NameType: org.apache.poi.ss.util.CellReference$NameType NAMED_RANGE>;

        return $r6;
    }

    private static org.apache.poi.ss.util.CellReference$NameType validateNamedRangeName(java.lang.String, org.apache.poi.ss.SpreadsheetVersion)
    {
        org.apache.poi.ss.util.CellReference$NameType $r7, $r8, $r11, $r13;
        java.util.regex.Matcher $r2, $r4, $r6;
        java.lang.String r0, $r9, $r12;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.poi.ss.SpreadsheetVersion r10;
        java.util.regex.Pattern $r1, $r3, $r5;

        r0 := @parameter0: java.lang.String;

        r10 := @parameter1: org.apache.poi.ss.SpreadsheetVersion;

        $r1 = <org.apache.poi.ss.util.CellReference: java.util.regex.Pattern COLUMN_REF_PATTERN>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean matches()>();

        if $z0 == 0 goto label1;

        $r12 = virtualinvoke $r2.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $z4 = staticinvoke <org.apache.poi.ss.util.CellReference: boolean isColumnWithnRange(java.lang.String,org.apache.poi.ss.SpreadsheetVersion)>($r12, r10);

        if $z4 == 0 goto label1;

        $r13 = <org.apache.poi.ss.util.CellReference$NameType: org.apache.poi.ss.util.CellReference$NameType COLUMN>;

        return $r13;

     label1:
        $r3 = <org.apache.poi.ss.util.CellReference: java.util.regex.Pattern ROW_REF_PATTERN>;

        $r4 = virtualinvoke $r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z1 = virtualinvoke $r4.<java.util.regex.Matcher: boolean matches()>();

        if $z1 == 0 goto label2;

        $r9 = virtualinvoke $r4.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $z3 = staticinvoke <org.apache.poi.ss.util.CellReference: boolean isRowWithnRange(java.lang.String,org.apache.poi.ss.SpreadsheetVersion)>($r9, r10);

        if $z3 == 0 goto label2;

        $r11 = <org.apache.poi.ss.util.CellReference$NameType: org.apache.poi.ss.util.CellReference$NameType ROW>;

        return $r11;

     label2:
        $r5 = <org.apache.poi.ss.util.CellReference: java.util.regex.Pattern NAMED_RANGE_NAME_PATTERN>;

        $r6 = virtualinvoke $r5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z2 = virtualinvoke $r6.<java.util.regex.Matcher: boolean matches()>();

        if $z2 != 0 goto label3;

        $r8 = <org.apache.poi.ss.util.CellReference$NameType: org.apache.poi.ss.util.CellReference$NameType BAD_CELL_OR_NAMED_RANGE>;

        return $r8;

     label3:
        $r7 = <org.apache.poi.ss.util.CellReference$NameType: org.apache.poi.ss.util.CellReference$NameType NAMED_RANGE>;

        return $r7;
    }

    public static boolean cellReferenceIsWithinRange(java.lang.String, java.lang.String, org.apache.poi.ss.SpreadsheetVersion)
    {
        org.apache.poi.ss.SpreadsheetVersion r1;
        java.lang.String r0, r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r1 := @parameter2: org.apache.poi.ss.SpreadsheetVersion;

        $z0 = staticinvoke <org.apache.poi.ss.util.CellReference: boolean isColumnWithnRange(java.lang.String,org.apache.poi.ss.SpreadsheetVersion)>(r0, r1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $z1 = staticinvoke <org.apache.poi.ss.util.CellReference: boolean isRowWithnRange(java.lang.String,org.apache.poi.ss.SpreadsheetVersion)>(r2, r1);

        return $z1;
    }

    public static boolean isColumnWithnRange(java.lang.String, org.apache.poi.ss.SpreadsheetVersion)
    {
        org.apache.poi.ss.SpreadsheetVersion r0;
        int $i0, $i1, $i2;
        java.lang.String $r1, r2, $r3;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: org.apache.poi.ss.SpreadsheetVersion;

        $r1 = virtualinvoke r0.<org.apache.poi.ss.SpreadsheetVersion: java.lang.String getLastColumnName()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i1 <= $i0 goto label1;

        return 0;

     label1:
        if $i1 != $i0 goto label2;

        $r3 = virtualinvoke r2.<java.lang.String: java.lang.String toUpperCase()>();

        $i2 = virtualinvoke $r3.<java.lang.String: int compareTo(java.lang.String)>($r1);

        if $i2 <= 0 goto label2;

        return 0;

     label2:
        return 1;
    }

    public static boolean isRowWithnRange(java.lang.String, org.apache.poi.ss.SpreadsheetVersion)
    {
        java.lang.IllegalStateException $r2;
        org.apache.poi.ss.SpreadsheetVersion r1;
        int $i0, $i1;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.String r0, $r7;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.poi.ss.SpreadsheetVersion;

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r0);

        if $i0 >= 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid rowStr \'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label1:
        if $i0 != 0 goto label2;

        return 0;

     label2:
        $i1 = virtualinvoke r1.<org.apache.poi.ss.SpreadsheetVersion: int getMaxRows()>();

        if $i0 > $i1 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    private static java.lang.String[] separateRefParts(java.lang.String)
    {
        char $c3, $c4;
        java.lang.String[] $r2;
        int $i0, i1, $i2, i5, $i6, $i7;
        java.lang.String r0, $r1, $r3, $r4;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(33);

        $r1 = staticinvoke <org.apache.poi.ss.util.CellReference: java.lang.String parseSheetName(java.lang.String,int)>(r0, $i0);

        i1 = $i0 + 1;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        i5 = i1;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i1);

        $i6 = (int) $c3;

        if $i6 != 36 goto label1;

        i5 = i1 + 1;

     label1:
        if i5 >= $i2 goto label3;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i5);

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c4);

        if $z0 != 0 goto label3;

        $i7 = (int) $c4;

        if $i7 != 36 goto label2;

        goto label3;

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        $r2 = newarray (java.lang.String)[3];

        $r2[0] = $r1;

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i1, i5);

        $r2[1] = $r3;

        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i5);

        $r2[2] = $r4;

        return $r2;
    }

    private static java.lang.String parseSheetName(java.lang.String, int)
    {
        java.lang.StringBuffer $r18;
        int i0, i2, $i5, i7, $i8, $i9, $i10, $i11;
        java.lang.String r0, $r2, $r8, $r14, $r15;
        boolean $z0;
        char $c1, $c3, $c4, $c6;
        java.lang.RuntimeException $r17, $r20;
        java.lang.StringBuilder $r5, $r6, $r7, $r11, $r12, $r13, $r16, $r19;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if i0 >= 0 goto label01;

        return null;

     label01:
        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i8 = (int) $c1;

        if $i8 != 39 goto label02;

        $z0 = 1;

        goto label03;

     label02:
        $z0 = 0;

     label03:
        if $z0 != 0 goto label04;

        $r15 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        return $r15;

     label04:
        i2 = i0 - 1;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        $i9 = (int) $c3;

        if $i9 == 39 goto label05;

        $r17 = new java.lang.RuntimeException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mismatched quotes: (");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.RuntimeException: void <init>(java.lang.String)>($r14);

        throw $r17;

     label05:
        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>(int)>(i0);

        i7 = 1;

     label06:
        if i7 >= i2 goto label10;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i7);

        $i10 = (int) $c4;

        if $i10 == 39 goto label07;

        virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4);

        goto label09;

     label07:
        if i7 >= i2 goto label08;

        $i5 = i7 + 1;

        $c6 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i5);

        $i11 = (int) $c6;

        if $i11 != 39 goto label08;

        i7 = i7 + 1;

        virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4);

        goto label09;

     label08:
        $r20 = new java.lang.RuntimeException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad sheet name quote escaping: (");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.RuntimeException: void <init>(java.lang.String)>($r8);

        throw $r20;

     label09:
        i7 = i7 + 1;

        goto label06;

     label10:
        $r2 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.String convertNumToColString(int)
    {
        char $c4;
        int i0, i1, $i2, $i3, i5, i6;
        java.lang.StringBuilder $r0;
        java.lang.String $r1;

        i0 := @parameter0: int;

        i1 = i0 + 1;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(int)>(2);

        i5 = i1;

     label1:
        if i5 <= 0 goto label3;

        i6 = i5 % 26;

        if i6 != 0 goto label2;

        i6 = 26;

     label2:
        $i2 = i5 - i6;

        i5 = $i2 / 26;

        $i3 = i6 + 64;

        $c4 = (char) $i3;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>(0, $c4);

        goto label1;

     label3:
        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }

    public java.lang.String formatAsString()
    {
        java.lang.StringBuffer $r0;
        java.lang.String $r2, $r3, $r4;
        org.apache.poi.ss.util.CellReference r1;

        r1 := @this: org.apache.poi.ss.util.CellReference;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(int)>(32);

        $r2 = r1.<org.apache.poi.ss.util.CellReference: java.lang.String _sheetName>;

        if $r2 == null goto label1;

        $r4 = r1.<org.apache.poi.ss.util.CellReference: java.lang.String _sheetName>;

        staticinvoke <org.apache.poi.ss.formula.SheetNameFormatter: void appendFormat(java.lang.StringBuffer,java.lang.String)>($r0, $r4);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(33);

     label1:
        virtualinvoke r1.<org.apache.poi.ss.util.CellReference: void appendCellReference(java.lang.StringBuffer)>($r0);

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuffer $r0, $r4;
        java.lang.Class $r2;
        java.lang.String $r3, $r5, $r6;
        org.apache.poi.ss.util.CellReference r1;

        r1 := @this: org.apache.poi.ss.util.CellReference;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(int)>(64);

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" [");

        $r5 = virtualinvoke r1.<org.apache.poi.ss.util.CellReference: java.lang.String formatAsString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r6 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }

    public java.lang.String[] getCellRefParts()
    {
        java.lang.String[] $r0;
        org.apache.poi.ss.util.CellReference r1;
        int $i0, $i1, $i2;
        java.lang.String $r2, $r3, $r4;

        r1 := @this: org.apache.poi.ss.util.CellReference;

        $r0 = newarray (java.lang.String)[3];

        $r2 = r1.<org.apache.poi.ss.util.CellReference: java.lang.String _sheetName>;

        $r0[0] = $r2;

        $i0 = r1.<org.apache.poi.ss.util.CellReference: int _rowIndex>;

        $i1 = $i0 + 1;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i1);

        $r0[1] = $r3;

        $i2 = r1.<org.apache.poi.ss.util.CellReference: int _colIndex>;

        $r4 = staticinvoke <org.apache.poi.ss.util.CellReference: java.lang.String convertNumToColString(int)>($i2);

        $r0[2] = $r4;

        return $r0;
    }

    void appendCellReference(java.lang.StringBuffer)
    {
        org.apache.poi.ss.util.CellReference r0;
        java.lang.StringBuffer r1;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i8;
        java.lang.String $r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.poi.ss.util.CellReference;

        r1 := @parameter0: java.lang.StringBuffer;

        $i0 = r0.<org.apache.poi.ss.util.CellReference: int _colIndex>;

        $i6 = (int) -1;

        if $i0 == $i6 goto label2;

        $z1 = r0.<org.apache.poi.ss.util.CellReference: boolean _isColAbs>;

        if $z1 == 0 goto label1;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(36);

     label1:
        $i3 = r0.<org.apache.poi.ss.util.CellReference: int _colIndex>;

        $r2 = staticinvoke <org.apache.poi.ss.util.CellReference: java.lang.String convertNumToColString(int)>($i3);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

     label2:
        $i4 = r0.<org.apache.poi.ss.util.CellReference: int _rowIndex>;

        $i8 = (int) -1;

        if $i4 == $i8 goto label4;

        $z0 = r0.<org.apache.poi.ss.util.CellReference: boolean _isRowAbs>;

        if $z0 == 0 goto label3;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(36);

     label3:
        $i1 = r0.<org.apache.poi.ss.util.CellReference: int _rowIndex>;

        $i2 = $i1 + 1;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

     label4:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.poi.ss.util.CellReference r0, r2;
        int $i0, $i1, $i2, $i3;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: org.apache.poi.ss.util.CellReference;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.apache.poi.ss.util.CellReference;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.apache.poi.ss.util.CellReference) r1;

        $i1 = r0.<org.apache.poi.ss.util.CellReference: int _rowIndex>;

        $i0 = r2.<org.apache.poi.ss.util.CellReference: int _rowIndex>;

        if $i1 != $i0 goto label3;

        $i3 = r0.<org.apache.poi.ss.util.CellReference: int _colIndex>;

        $i2 = r2.<org.apache.poi.ss.util.CellReference: int _colIndex>;

        if $i3 != $i2 goto label3;

        $z2 = r0.<org.apache.poi.ss.util.CellReference: boolean _isRowAbs>;

        $z1 = r2.<org.apache.poi.ss.util.CellReference: boolean _isRowAbs>;

        if $z2 != $z1 goto label3;

        $z4 = r0.<org.apache.poi.ss.util.CellReference: boolean _isColAbs>;

        $z3 = r2.<org.apache.poi.ss.util.CellReference: boolean _isColAbs>;

        if $z4 != $z3 goto label3;

        $z5 = 1;

        goto label4;

     label3:
        $z5 = 0;

     label4:
        return $z5;
    }

    public int hashCode()
    {
        org.apache.poi.ss.util.CellReference r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.poi.ss.util.CellReference;

        $i0 = r0.<org.apache.poi.ss.util.CellReference: int _rowIndex>;

        i7 = 527 + $i0;

        $i2 = 31 * i7;

        $i1 = r0.<org.apache.poi.ss.util.CellReference: int _colIndex>;

        i8 = $i2 + $i1;

        $i3 = 31 * i8;

        $z0 = r0.<org.apache.poi.ss.util.CellReference: boolean _isRowAbs>;

        if $z0 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        $i6 = $i3 + $z2;

        $i4 = 31 * $i6;

        $z1 = r0.<org.apache.poi.ss.util.CellReference: boolean _isColAbs>;

        if $z1 == 0 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        $i5 = $i4 + $z3;

        return $i5;
    }

    static void <clinit>()
    {
        java.util.regex.Pattern $r0, $r1, $r2, $r3;

        <org.apache.poi.ss.util.CellReference: char SPECIAL_NAME_DELIMITER> = 39;

        <org.apache.poi.ss.util.CellReference: char SHEET_NAME_DELIMITER> = 33;

        <org.apache.poi.ss.util.CellReference: char ABSOLUTE_REFERENCE_MARKER> = 36;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\$?([A-Za-z]+)\\$?([0-9]+)");

        <org.apache.poi.ss.util.CellReference: java.util.regex.Pattern CELL_REF_PATTERN> = $r0;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\$?([A-Za-z]+)");

        <org.apache.poi.ss.util.CellReference: java.util.regex.Pattern COLUMN_REF_PATTERN> = $r1;

        $r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\$?([0-9]+)");

        <org.apache.poi.ss.util.CellReference: java.util.regex.Pattern ROW_REF_PATTERN> = $r2;

        $r3 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[_A-Za-z][_.A-Za-z0-9]*");

        <org.apache.poi.ss.util.CellReference: java.util.regex.Pattern NAMED_RANGE_NAME_PATTERN> = $r3;

        return;
    }
}
