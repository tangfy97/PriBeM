public abstract class com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker extends com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker
{
    protected final com.google.gxp.compiler.base.Template template;
    protected com.google.gxp.com.google.common.base.Function parameterToAnnotatedCallParameter;
    private final com.google.gxp.compiler.base.ImplementsVisitor javaNameImplementsVisitor;
    private final com.google.gxp.com.google.common.base.Function getInterfaceFromImplementsDeclaration;
    private static final java.lang.String GET_ARG_LIST_FORMAT;

    protected void <init>(java.lang.Appendable, com.google.gxp.compiler.alerts.AlertSink, com.google.gxp.compiler.base.Template)
    {
        com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker r0;
        java.lang.Appendable r1;
        com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker$2 $r4;
        com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker$1 $r3;
        com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker$3 $r5;
        com.google.gxp.compiler.alerts.AlertSink r2;
        java.lang.Object $r7;
        com.google.gxp.compiler.base.Template r6, $r8;

        r0 := @this: com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker;

        r1 := @parameter0: java.lang.Appendable;

        r2 := @parameter1: com.google.gxp.compiler.alerts.AlertSink;

        r6 := @parameter2: com.google.gxp.compiler.base.Template;

        specialinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$Worker: void <init>(java.lang.Appendable,com.google.gxp.compiler.alerts.AlertSink)>(r1, r2);

        $r3 = new com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker$1;

        specialinvoke $r3.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker$1: void <init>(com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker)>(r0);

        r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: com.google.gxp.com.google.common.base.Function parameterToAnnotatedCallParameter> = $r3;

        $r4 = new com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker$2;

        specialinvoke $r4.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker$2: void <init>(com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker)>(r0);

        r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.ImplementsVisitor javaNameImplementsVisitor> = $r4;

        $r5 = new com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker$3;

        specialinvoke $r5.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker$3: void <init>(com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker)>(r0);

        r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: com.google.gxp.com.google.common.base.Function getInterfaceFromImplementsDeclaration> = $r5;

        $r7 = staticinvoke <com.google.gxp.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r6);

        $r8 = (com.google.gxp.compiler.base.Template) $r7;

        r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template> = $r8;

        return;
    }

    public void run()
    {
        java.util.Iterator $r3;
        com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker r0;
        java.util.List $r2;
        com.google.gxp.compiler.base.OutputLanguage $r8;
        com.google.gxp.compiler.alerts.AlertSink $r9;
        com.google.gxp.compiler.base.Parameter r7;
        java.lang.Object $r6;
        java.lang.String $r10;
        com.google.gxp.compiler.base.Template $r1, $r4, $r5;
        boolean $z0;

        r0 := @this: com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker;

        $r1 = r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r2 = virtualinvoke $r1.<com.google.gxp.compiler.base.Template: java.util.List getAllParameters()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.google.gxp.compiler.base.Parameter) $r6;

        $r8 = <com.google.gxp.compiler.base.OutputLanguage: com.google.gxp.compiler.base.OutputLanguage JAVA>;

        $r9 = r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.alerts.AlertSink alertSink>;

        $r10 = virtualinvoke r7.<com.google.gxp.compiler.base.Parameter: java.lang.String getPrimaryName()>();

        virtualinvoke $r8.<com.google.gxp.compiler.base.OutputLanguage: java.lang.String validateName(com.google.gxp.compiler.alerts.AlertSink,com.google.gxp.compiler.base.Node,java.lang.String)>($r9, r7, $r10);

        goto label1;

     label2:
        $r4 = r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendHeader(com.google.gxp.compiler.base.Root)>($r4);

        $r5 = r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendImports(com.google.gxp.compiler.base.Root)>($r5);

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendLine()>();

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendClass()>();

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendLine()>();

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendFooter()>();

        return;
    }

    protected java.lang.String getFullClassName(com.google.gxp.compiler.base.TemplateName)
    {
        com.google.gxp.compiler.base.TemplateName r0;
        java.lang.String $r2;
        com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker r1;

        r1 := @this: com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker;

        r0 := @parameter0: com.google.gxp.compiler.base.TemplateName;

        if r0 != null goto label1;

        $r2 = null;

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<com.google.gxp.compiler.base.TemplateName: java.lang.String toString()>();

     label2:
        return $r2;
    }

    protected abstract java.lang.String getBaseClassName();

    protected abstract void appendClass();

    private void appendImplementsDeclaration(java.lang.StringBuilder, java.util.List)
    {
        java.util.List r0;
        com.google.gxp.com.google.common.base.Function $r3;
        com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker r2;
        java.lang.StringBuilder r1;
        java.lang.Iterable $r4;
        boolean $z0;

        r2 := @this: com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker;

        r1 := @parameter0: java.lang.StringBuilder;

        r0 := @parameter1: java.util.List;

        $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" extends ");

        $r3 = r2.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: com.google.gxp.com.google.common.base.Function getInterfaceFromImplementsDeclaration>;

        $r4 = staticinvoke <com.google.gxp.com.google.common.collect.Iterables: java.lang.Iterable transform(java.lang.Iterable,com.google.gxp.com.google.common.base.Function)>(r0, $r3);

        staticinvoke <com.google.gxp.com.google.common.base.Join: java.lang.Appendable join(java.lang.Appendable,java.lang.String,java.lang.Iterable)>(r1, ", ", $r4);

     label1:
        return;
    }

    protected abstract void appendWriteMethodBody();

    protected void appendWriteMethod()
    {
        com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5;

        r0 := @this: com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = specialinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: java.lang.String getWriteMethodSignature(boolean)>(1);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" {");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>($r5);

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendWriteMethodBody()>();

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("}");

        return;
    }

    protected java.lang.String getBaseName(java.lang.String)
    {
        com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker r3;
        int $i0, $i1;
        java.lang.String[] $r1;
        java.lang.String r0, $r2;

        r3 := @this: com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\.");

        $i0 = lengthof $r1;

        $i1 = $i0 - 1;

        $r2 = $r1[$i1];

        return $r2;
    }

    protected void appendGetGxpClosureMethod(boolean)
    {
        com.google.gxp.compiler.base.TemplateName$FullyQualified $r32;
        com.google.gxp.compiler.schema.Schema $r2;
        com.google.gxp.compiler.base.Parameter r28;
        boolean z0, $z1;
        java.util.List $r23, $r36;
        java.lang.StringBuilder $r4, $r5, $r7, $r9, $r11, $r12, $r15, $r16, $r17, $r19, $r20, $r24;
        java.lang.Object[] $r14, $r33, $r34;
        com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker r0;
        java.lang.String $r3, $r6, $r8, $r10, $r13, $r18, $r21, $r29, $r35;
        com.google.gxp.compiler.base.Template $r1, $r22, $r25, $r30, $r31;
        java.util.Iterator $r26;
        java.lang.Object $r27;

        r0 := @this: com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r2 = virtualinvoke $r1.<com.google.gxp.compiler.base.Template: com.google.gxp.compiler.schema.Schema getSchema()>();

        $r3 = virtualinvoke $r2.<com.google.gxp.compiler.schema.Schema: java.lang.String getJavaType()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tunneling");

        $r6 = virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: java.lang.String getBaseName(java.lang.String)>($r3);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        if z0 == 0 goto label1;

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendLine()>();

        $r33 = newarray (java.lang.Object)[1];

        $r33[0] = $r8;

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void formatLine(java.lang.String,java.lang.Object[])>("private abstract static class %s", $r33);

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("    extends GxpTemplate.TunnelingGxpClosure");

        $r34 = newarray (java.lang.Object)[1];

        $r34[0] = $r3;

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void formatLine(java.lang.String,java.lang.Object[])>("    implements %s {", $r34);

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("}");

     label1:
        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendLine()>();

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = specialinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: java.lang.String getGetGxpClosureMethodSignature(boolean)>(z0);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" {");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>($r13);

        $r14 = newarray (java.lang.Object)[1];

        $r14[0] = $r8;

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void formatLine(java.lang.String,java.lang.Object[])>("return new %s() {", $r14);

        $r15 = new java.lang.StringBuilder;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("public void writeImpl(");

        $r18 = <com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: java.lang.String GXP_SIG>;

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>($r21);

        $r22 = r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r23 = virtualinvoke $r22.<com.google.gxp.compiler.base.Template: java.util.List getThrowsDeclarations()>();

        staticinvoke <com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendJavaThrowsDeclaration(java.lang.StringBuilder,java.lang.Iterable)>($r15, $r23);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" {");

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>($r15);

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        if z0 == 0 goto label2;

        $r31 = r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r32 = virtualinvoke $r31.<com.google.gxp.compiler.base.Template: com.google.gxp.compiler.base.TemplateName$FullyQualified getName()>();

        $r35 = virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: java.lang.String getFullClassName(com.google.gxp.compiler.base.TemplateName)>($r32);

        goto label3;

     label2:
        $r35 = "Instance.this";

     label3:
        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".write(gxp$out, gxp_context");

        if z0 == 0 goto label4;

        $r30 = r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r36 = virtualinvoke $r30.<com.google.gxp.compiler.base.Template: java.util.List getAllParameters()>();

        goto label5;

     label4:
        $r25 = r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r36 = virtualinvoke $r25.<com.google.gxp.compiler.base.Template: java.util.List getParameters()>();

     label5:
        $r26 = interfaceinvoke $r36.<java.util.List: java.util.Iterator iterator()>();

     label6:
        $z1 = interfaceinvoke $r26.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r27 = interfaceinvoke $r26.<java.util.Iterator: java.lang.Object next()>();

        r28 = (com.google.gxp.compiler.base.Parameter) $r27;

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r29 = virtualinvoke r28.<com.google.gxp.compiler.base.Parameter: java.lang.String getPrimaryName()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        goto label6;

     label7:
        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(");");

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>($r24);

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("}");

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("};");

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("}");

        return;
    }

    protected void appendGetArgListMethod()
    {
        java.util.Iterator $r5;
        com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker r2;
        java.util.ArrayList $r1;
        java.util.List $r4;
        com.google.gxp.compiler.base.OutputLanguage $r9;
        com.google.gxp.compiler.base.Parameter r8;
        java.lang.StringBuilder $r0;
        java.lang.Object $r7;
        java.lang.String $r6, $r10, $r11;
        com.google.gxp.compiler.base.Template $r3;
        boolean $z0, $z1;

        r2 := @this: com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("private static final java.util.List<String> GXP$ARGLIST = ");

        $r1 = staticinvoke <com.google.gxp.com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        $r3 = r2.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r4 = virtualinvoke $r3.<com.google.gxp.compiler.base.Template: java.util.List getAllParameters()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.google.gxp.compiler.base.Parameter) $r7;

        $r9 = <com.google.gxp.compiler.base.OutputLanguage: com.google.gxp.compiler.base.OutputLanguage JAVA>;

        $r10 = virtualinvoke r8.<com.google.gxp.compiler.base.Parameter: java.lang.String getPrimaryName()>();

        $r11 = virtualinvoke $r9.<com.google.gxp.compiler.base.OutputLanguage: java.lang.String toStringLiteral(java.lang.String)>($r10);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r11);

        goto label1;

     label2:
        $z1 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label3;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("java.util.Collections.emptyList();");

        goto label4;

     label3:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("java.util.Collections.unmodifiableList(java.util.Arrays.asList(");

        staticinvoke <com.google.gxp.com.google.common.base.Join: java.lang.Appendable join(java.lang.Appendable,java.lang.String,java.lang.Iterable)>($r0, ", ", $r1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("));");

     label4:
        virtualinvoke r2.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendLine()>();

        virtualinvoke r2.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>($r0);

        virtualinvoke r2.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendLine()>();

        $r6 = <com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: java.lang.String GET_ARG_LIST_FORMAT>;

        virtualinvoke r2.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>($r6);

        return;
    }

    private java.lang.String getWriteMethodSignature(boolean)
    {
        com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker r0;
        com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker$Access $r1;
        java.lang.String $r2;
        boolean z0;

        r0 := @this: com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker;

        z0 := @parameter0: boolean;

        $r1 = <com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker$Access: com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker$Access _public>;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: java.lang.String getWriteMethodSignature(com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker$Access,boolean,java.lang.String)>($r1, z0, "write");

        return $r2;
    }

    protected java.lang.String getWriteMethodSignature(com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker$Access, boolean, java.lang.String)
    {
        com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker r0;
        com.google.gxp.com.google.common.base.Function $r12;
        com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker$Access r4;
        com.google.gxp.compiler.base.Parameter r11;
        java.lang.String $r5, r6, $r9, $r14, $r23, $r25;
        boolean z0, $z1, $z2;
        com.google.gxp.compiler.base.Template $r1, $r7, $r15, $r17, $r19;
        java.util.Iterator $r26;
        java.util.List r2, $r8, $r16, $r18, $r20;
        java.lang.StringBuilder $r3, $r21, $r22, $r24;
        java.lang.Object $r10, $r13;

        r0 := @this: com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker;

        r4 := @parameter0: com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker$Access;

        z0 := @parameter1: boolean;

        r6 := @parameter2: java.lang.String;

        if z0 == 0 goto label1;

        $r19 = r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r20 = virtualinvoke $r19.<com.google.gxp.compiler.base.Template: java.util.List getAllParameters()>();

        goto label2;

     label1:
        $r1 = r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r20 = virtualinvoke $r1.<com.google.gxp.compiler.base.Template: java.util.List getParameters()>();

     label2:
        r2 = $r20;

        $r3 = new java.lang.StringBuilder;

        $r5 = virtualinvoke r4.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker$Access: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>($r5);

        if z0 == 0 goto label4;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" static");

        $r15 = r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r16 = virtualinvoke $r15.<com.google.gxp.compiler.base.Template: java.util.List getFormalTypeParameters()>();

        $z1 = interfaceinvoke $r16.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label3;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

     label3:
        $r17 = r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r18 = virtualinvoke $r17.<com.google.gxp.compiler.base.Template: java.util.List getFormalTypeParameters()>();

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendJavaFormalTypeParameters(java.lang.StringBuilder,boolean,java.util.List)>($r3, 1, $r18);

     label4:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" void ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r23 = <com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: java.lang.String GXP_SIG>;

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r26 = interfaceinvoke r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label5:
        $z2 = interfaceinvoke $r26.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r10 = interfaceinvoke $r26.<java.util.Iterator: java.lang.Object next()>();

        r11 = (com.google.gxp.compiler.base.Parameter) $r10;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r12 = r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: com.google.gxp.com.google.common.base.Function parameterToCallName>;

        $r13 = interfaceinvoke $r12.<com.google.gxp.com.google.common.base.Function: java.lang.Object apply(java.lang.Object)>(r11);

        $r14 = (java.lang.String) $r13;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        goto label5;

     label6:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r7 = r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r8 = virtualinvoke $r7.<com.google.gxp.compiler.base.Template: java.util.List getThrowsDeclarations()>();

        staticinvoke <com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendJavaThrowsDeclaration(java.lang.StringBuilder,java.lang.Iterable)>($r3, $r8);

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    private java.lang.String getGetGxpClosureMethodSignature(boolean)
    {
        com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker r0;
        com.google.gxp.compiler.schema.Schema $r11;
        java.lang.Iterable $r14;
        com.google.gxp.com.google.common.base.Function $r13;
        java.lang.String $r12, $r15;
        boolean z0, $z1;
        com.google.gxp.compiler.base.Template $r1, $r4, $r6, $r8, $r10;
        java.util.List r2, $r5, $r7, $r9;
        java.lang.StringBuilder $r3;

        r0 := @this: com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r8 = r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r9 = virtualinvoke $r8.<com.google.gxp.compiler.base.Template: java.util.List getAllParameters()>();

        goto label2;

     label1:
        $r1 = r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r9 = virtualinvoke $r1.<com.google.gxp.compiler.base.Template: java.util.List getParameters()>();

     label2:
        r2 = $r9;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("public");

        if z0 == 0 goto label4;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" static");

        $r4 = r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r5 = virtualinvoke $r4.<com.google.gxp.compiler.base.Template: java.util.List getFormalTypeParameters()>();

        $z1 = interfaceinvoke $r5.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label3;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

     label3:
        $r6 = r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r7 = virtualinvoke $r6.<com.google.gxp.compiler.base.Template: java.util.List getFormalTypeParameters()>();

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendJavaFormalTypeParameters(java.lang.StringBuilder,boolean,java.util.List)>($r3, 1, $r7);

     label4:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r10 = r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r11 = virtualinvoke $r10.<com.google.gxp.compiler.base.Template: com.google.gxp.compiler.schema.Schema getSchema()>();

        $r12 = virtualinvoke $r11.<com.google.gxp.compiler.schema.Schema: java.lang.String getJavaType()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" getGxpClosure(");

        $r13 = r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: com.google.gxp.com.google.common.base.Function parameterToCallName>;

        $r14 = staticinvoke <com.google.gxp.com.google.common.collect.Iterables: java.lang.Iterable transform(java.lang.Iterable,com.google.gxp.com.google.common.base.Function)>(r2, $r13);

        staticinvoke <com.google.gxp.com.google.common.base.Join: java.lang.Appendable join(java.lang.Appendable,java.lang.String,java.lang.Iterable)>($r3, ", ", $r14);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r15 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r15;
    }

    protected void appendInterface()
    {
        com.google.gxp.compiler.base.Parameter r38, r39;
        boolean $z0, $z1;
        com.google.gxp.compiler.base.Type $r28, $r35;
        java.util.List $r6, $r8, $r20, $r23;
        java.lang.StringBuilder $r4, $r9, $r11, $r12, $r14, $r16, $r17;
        com.google.gxp.compiler.base.JavaAnnotation$Element $r1;
        com.google.gxp.compiler.base.Expression $r26, $r33;
        java.lang.Object[] $r27, $r34;
        com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker r0;
        java.lang.Iterable $r3;
        java.lang.String $r10, $r13, $r15, $r18, $r29, $r30, $r31, $r36, $r37;
        com.google.gxp.compiler.base.Template $r2, $r5, $r7, $r19, $r22;
        java.util.Iterator $r21, $r24;
        java.lang.Object $r25, $r32;

        r0 := @this: com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker;

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendLine()>();

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("/**\n * Interface that defines a strategy for writing this GXP\n */");

        $r2 = r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r1 = <com.google.gxp.compiler.base.JavaAnnotation$Element: com.google.gxp.compiler.base.JavaAnnotation$Element INTERFACE>;

        $r3 = virtualinvoke $r2.<com.google.gxp.compiler.base.Template: java.lang.Iterable getJavaAnnotations(com.google.gxp.compiler.base.JavaAnnotation$Element)>($r1);

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendAnnotations(java.lang.Iterable)>($r3);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("public interface Interface");

        $r5 = r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r6 = virtualinvoke $r5.<com.google.gxp.compiler.base.Template: java.util.List getFormalTypeParameters()>();

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendJavaFormalTypeParameters(java.lang.StringBuilder,boolean,java.util.List)>($r4, 1, $r6);

        $r7 = r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r8 = virtualinvoke $r7.<com.google.gxp.compiler.base.Template: java.util.List getImplementsDeclarations()>();

        specialinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendImplementsDeclaration(java.lang.StringBuilder,java.util.List)>($r4, $r8);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" {");

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>($r4);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = specialinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: java.lang.String getWriteMethodSignature(boolean)>(0);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>($r13);

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendLine()>();

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = specialinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: java.lang.String getGetGxpClosureMethodSignature(boolean)>(0);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>($r18);

        $r19 = r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r20 = virtualinvoke $r19.<com.google.gxp.compiler.base.Template: java.util.List getParameters()>();

        $r21 = interfaceinvoke $r20.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r21.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r32 = interfaceinvoke $r21.<java.util.Iterator: java.lang.Object next()>();

        r38 = (com.google.gxp.compiler.base.Parameter) $r32;

        $r33 = virtualinvoke r38.<com.google.gxp.compiler.base.Parameter: com.google.gxp.compiler.base.Expression getDefaultValue()>();

        if $r33 == null goto label2;

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendLine()>();

        $r34 = newarray (java.lang.Object)[2];

        $r35 = virtualinvoke r38.<com.google.gxp.compiler.base.Parameter: com.google.gxp.compiler.base.Type getType()>();

        $r36 = virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: java.lang.String toJavaType(com.google.gxp.compiler.base.Type)>($r35);

        $r34[0] = $r36;

        $r37 = staticinvoke <com.google.gxp.compiler.java.BaseJavaCodeGenerator: java.lang.String access$900(com.google.gxp.compiler.base.Parameter)>(r38);

        $r34[1] = $r37;

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void formatLine(java.lang.String,java.lang.Object[])>("%s %s();", $r34);

     label2:
        goto label1;

     label3:
        $r22 = r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r23 = virtualinvoke $r22.<com.google.gxp.compiler.base.Template: java.util.List getParameters()>();

        $r24 = interfaceinvoke $r23.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke $r24.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r25 = interfaceinvoke $r24.<java.util.Iterator: java.lang.Object next()>();

        r39 = (com.google.gxp.compiler.base.Parameter) $r25;

        $r26 = virtualinvoke r39.<com.google.gxp.compiler.base.Parameter: com.google.gxp.compiler.base.Expression getConstructor()>();

        if $r26 == null goto label5;

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendLine()>();

        $r27 = newarray (java.lang.Object)[3];

        $r28 = virtualinvoke r39.<com.google.gxp.compiler.base.Parameter: com.google.gxp.compiler.base.Type getType()>();

        $r29 = virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: java.lang.String toJavaType(com.google.gxp.compiler.base.Type)>($r28);

        $r27[0] = $r29;

        $r30 = staticinvoke <com.google.gxp.compiler.java.BaseJavaCodeGenerator: java.lang.String access$1000(com.google.gxp.compiler.base.Parameter)>(r39);

        $r27[1] = $r30;

        $r31 = virtualinvoke r39.<com.google.gxp.compiler.base.Parameter: java.lang.String getPrimaryName()>();

        $r27[2] = $r31;

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void formatLine(java.lang.String,java.lang.Object[])>("%s %s(String %s);", $r27);

     label5:
        goto label4;

     label6:
        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("}");

        return;
    }

    protected void appendInstance()
    {
        com.google.gxp.com.google.common.base.Function $r15, $r61;
        com.google.gxp.compiler.base.Parameter r73, r74, r75, r76, r77;
        com.google.gxp.compiler.base.Type $r39, $r52, $r70;
        java.lang.StringBuilder $r7, $r14, $r18, $r20, $r21, $r23;
        com.google.gxp.compiler.base.JavaAnnotation$Element $r4;
        com.google.gxp.compiler.base.Expression $r37, $r50;
        java.lang.Object[] $r38, $r43, $r51, $r55, $r65, $r69;
        com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker r0;
        java.lang.String $r19, $r22, $r26, $r40, $r41, $r42, $r46, $r47, $r48, $r53, $r54, $r58, $r59, $r63, $r66, $r67, $r71, $r72;
        com.google.gxp.compiler.base.Template $r1, $r5, $r8, $r10, $r24, $r27, $r30, $r33, $r44, $r56;
        com.google.gxp.compiler.base.TemplateName$FullyQualified $r25, $r45, $r57;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.google.gxp.compiler.base.Constructor $r2;
        java.util.List $r3, $r9, $r11, $r13, $r28, $r31, $r34;
        java.lang.Iterable $r6, $r16;
        java.util.Iterator $r12, $r17, $r29, $r32, $r35;
        java.lang.Object $r36, $r49, $r60, $r62, $r64, $r68;

        r0 := @this: com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker;

        $r1 = r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r2 = virtualinvoke $r1.<com.google.gxp.compiler.base.Template: com.google.gxp.compiler.base.Constructor getConstructor()>();

        $r3 = virtualinvoke $r2.<com.google.gxp.compiler.base.Constructor: java.util.List getParameters()>();

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendLine()>();

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("/**\n * Instantiable instance of this GXP\n */");

        $r5 = r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r4 = <com.google.gxp.compiler.base.JavaAnnotation$Element: com.google.gxp.compiler.base.JavaAnnotation$Element INSTANCE>;

        $r6 = virtualinvoke $r5.<com.google.gxp.compiler.base.Template: java.lang.Iterable getJavaAnnotations(com.google.gxp.compiler.base.JavaAnnotation$Element)>($r4);

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendAnnotations(java.lang.Iterable)>($r6);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("public static class Instance");

        $r8 = r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r9 = virtualinvoke $r8.<com.google.gxp.compiler.base.Template: java.util.List getFormalTypeParameters()>();

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendJavaFormalTypeParameters(java.lang.StringBuilder,boolean,java.util.List)>($r7, 1, $r9);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" implements Interface");

        $r10 = r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r11 = virtualinvoke $r10.<com.google.gxp.compiler.base.Template: java.util.List getFormalTypeParameters()>();

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendJavaFormalTypeParameters(java.lang.StringBuilder,boolean,java.util.List)>($r7, 0, $r11);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" {");

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>($r7);

        $r12 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label02;

        $r68 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r73 = (com.google.gxp.compiler.base.Parameter) $r68;

        $r69 = newarray (java.lang.Object)[2];

        $r70 = virtualinvoke r73.<com.google.gxp.compiler.base.Parameter: com.google.gxp.compiler.base.Type getType()>();

        $r71 = virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: java.lang.String toJavaType(com.google.gxp.compiler.base.Type)>($r70);

        $r69[0] = $r71;

        $r72 = virtualinvoke r73.<com.google.gxp.compiler.base.Parameter: java.lang.String getPrimaryName()>();

        $r69[1] = $r72;

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void formatLine(java.lang.String,java.lang.Object[])>("private final %s %s;", $r69);

        goto label01;

     label02:
        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendLine()>();

        $r13 = virtualinvoke $r2.<com.google.gxp.compiler.base.Constructor: java.util.List getJavaAnnotations()>();

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendAnnotations(java.lang.Iterable)>($r13);

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("public Instance(");

        $r15 = r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: com.google.gxp.com.google.common.base.Function parameterToAnnotatedCallParameter>;

        $r16 = staticinvoke <com.google.gxp.com.google.common.collect.Iterables: java.lang.Iterable transform(java.lang.Iterable,com.google.gxp.com.google.common.base.Function)>($r3, $r15);

        staticinvoke <com.google.gxp.com.google.common.base.Join: java.lang.Appendable join(java.lang.Appendable,java.lang.String,java.lang.Iterable)>($r14, ", ", $r16);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") {");

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>($r14);

        $r17 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z1 = interfaceinvoke $r17.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label04;

        $r64 = interfaceinvoke $r17.<java.util.Iterator: java.lang.Object next()>();

        r74 = (com.google.gxp.compiler.base.Parameter) $r64;

        $r65 = newarray (java.lang.Object)[2];

        $r66 = virtualinvoke r74.<com.google.gxp.compiler.base.Parameter: java.lang.String getPrimaryName()>();

        $r65[0] = $r66;

        $r67 = virtualinvoke r74.<com.google.gxp.compiler.base.Parameter: java.lang.String getPrimaryName()>();

        $r65[1] = $r67;

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void formatLine(java.lang.String,java.lang.Object[])>("this.%s = %s;", $r65);

        goto label03;

     label04:
        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("}");

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendLine()>();

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = specialinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: java.lang.String getWriteMethodSignature(boolean)>(0);

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" {");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>($r22);

        $r23 = new java.lang.StringBuilder;

        $r24 = r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r25 = virtualinvoke $r24.<com.google.gxp.compiler.base.Template: com.google.gxp.compiler.base.TemplateName$FullyQualified getName()>();

        $r26 = virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: java.lang.String getFullClassName(com.google.gxp.compiler.base.TemplateName)>($r25);

        specialinvoke $r23.<java.lang.StringBuilder: void <init>(java.lang.String)>($r26);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".write(gxp$out, gxp_context");

        $r27 = r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r28 = virtualinvoke $r27.<com.google.gxp.compiler.base.Template: java.util.List getAllParameters()>();

        $r29 = interfaceinvoke $r28.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z2 = interfaceinvoke $r29.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label06;

        $r60 = interfaceinvoke $r29.<java.util.Iterator: java.lang.Object next()>();

        r75 = (com.google.gxp.compiler.base.Parameter) $r60;

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r61 = r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: com.google.gxp.com.google.common.base.Function paramToCallName>;

        $r62 = interfaceinvoke $r61.<com.google.gxp.com.google.common.base.Function: java.lang.Object apply(java.lang.Object)>(r75);

        $r63 = (java.lang.String) $r62;

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r63);

        goto label05;

     label06:
        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(");");

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>($r23);

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("}");

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendGetGxpClosureMethod(boolean)>(0);

        $r30 = r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r31 = virtualinvoke $r30.<com.google.gxp.compiler.base.Template: java.util.List getParameters()>();

        $r32 = interfaceinvoke $r31.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z3 = interfaceinvoke $r32.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label09;

        $r49 = interfaceinvoke $r32.<java.util.Iterator: java.lang.Object next()>();

        r76 = (com.google.gxp.compiler.base.Parameter) $r49;

        $r50 = virtualinvoke r76.<com.google.gxp.compiler.base.Parameter: com.google.gxp.compiler.base.Expression getDefaultValue()>();

        if $r50 == null goto label08;

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendLine()>();

        $r51 = newarray (java.lang.Object)[2];

        $r52 = virtualinvoke r76.<com.google.gxp.compiler.base.Parameter: com.google.gxp.compiler.base.Type getType()>();

        $r53 = virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: java.lang.String toJavaType(com.google.gxp.compiler.base.Type)>($r52);

        $r51[0] = $r53;

        $r54 = staticinvoke <com.google.gxp.compiler.java.BaseJavaCodeGenerator: java.lang.String access$1100(com.google.gxp.compiler.base.Parameter)>(r76);

        $r51[1] = $r54;

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void formatLine(java.lang.String,java.lang.Object[])>("public %s %s() {", $r51);

        $r55 = newarray (java.lang.Object)[2];

        $r56 = r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r57 = virtualinvoke $r56.<com.google.gxp.compiler.base.Template: com.google.gxp.compiler.base.TemplateName$FullyQualified getName()>();

        $r58 = virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: java.lang.String getFullClassName(com.google.gxp.compiler.base.TemplateName)>($r57);

        $r55[0] = $r58;

        $r59 = staticinvoke <com.google.gxp.compiler.java.BaseJavaCodeGenerator: java.lang.String access$1200(com.google.gxp.compiler.base.Parameter)>(r76);

        $r55[1] = $r59;

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void formatLine(java.lang.String,java.lang.Object[])>("return %s.%s();", $r55);

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("}");

     label08:
        goto label07;

     label09:
        $r33 = r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r34 = virtualinvoke $r33.<com.google.gxp.compiler.base.Template: java.util.List getParameters()>();

        $r35 = interfaceinvoke $r34.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $z4 = interfaceinvoke $r35.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label12;

        $r36 = interfaceinvoke $r35.<java.util.Iterator: java.lang.Object next()>();

        r77 = (com.google.gxp.compiler.base.Parameter) $r36;

        $r37 = virtualinvoke r77.<com.google.gxp.compiler.base.Parameter: com.google.gxp.compiler.base.Expression getConstructor()>();

        if $r37 == null goto label11;

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendLine()>();

        $r38 = newarray (java.lang.Object)[3];

        $r39 = virtualinvoke r77.<com.google.gxp.compiler.base.Parameter: com.google.gxp.compiler.base.Type getType()>();

        $r40 = virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: java.lang.String toJavaType(com.google.gxp.compiler.base.Type)>($r39);

        $r38[0] = $r40;

        $r41 = staticinvoke <com.google.gxp.compiler.java.BaseJavaCodeGenerator: java.lang.String access$1300(com.google.gxp.compiler.base.Parameter)>(r77);

        $r38[1] = $r41;

        $r42 = virtualinvoke r77.<com.google.gxp.compiler.base.Parameter: java.lang.String getPrimaryName()>();

        $r38[2] = $r42;

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void formatLine(java.lang.String,java.lang.Object[])>("public %s %s(String %s) {", $r38);

        $r43 = newarray (java.lang.Object)[3];

        $r44 = r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r45 = virtualinvoke $r44.<com.google.gxp.compiler.base.Template: com.google.gxp.compiler.base.TemplateName$FullyQualified getName()>();

        $r46 = virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: java.lang.String getFullClassName(com.google.gxp.compiler.base.TemplateName)>($r45);

        $r43[0] = $r46;

        $r47 = staticinvoke <com.google.gxp.compiler.java.BaseJavaCodeGenerator: java.lang.String access$1400(com.google.gxp.compiler.base.Parameter)>(r77);

        $r43[1] = $r47;

        $r48 = virtualinvoke r77.<com.google.gxp.compiler.base.Parameter: java.lang.String getPrimaryName()>();

        $r43[2] = $r48;

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void formatLine(java.lang.String,java.lang.Object[])>("return %s.%s(%s);", $r43);

        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("}");

     label11:
        goto label10;

     label12:
        virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("}");

        return;
    }

    static com.google.gxp.compiler.alerts.AlertSink access$700(com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker)
    {
        com.google.gxp.compiler.alerts.AlertSink $r1;
        com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker r0;

        r0 := @parameter0: com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker;

        $r1 = r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.alerts.AlertSink alertSink>;

        return $r1;
    }

    static com.google.gxp.compiler.base.ImplementsVisitor access$800(com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker)
    {
        com.google.gxp.compiler.base.ImplementsVisitor $r1;
        com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker r0;

        r0 := @parameter0: com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker;

        $r1 = r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.ImplementsVisitor javaNameImplementsVisitor>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: java.lang.String loadFormat(java.lang.String)>("getArgList");

        <com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: java.lang.String GET_ARG_LIST_FORMAT> = $r0;

        return;
    }
}
