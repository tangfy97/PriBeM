public final class org.apache.poi.openxml4j.opc.ZipPackage extends org.apache.poi.openxml4j.opc.Package
{
    private static org.apache.poi.util.POILogger logger;
    private final org.apache.poi.openxml4j.util.ZipEntrySource zipArchive;

    public void <init>()
    {
        org.apache.poi.openxml4j.opc.internal.ZipContentTypeManager $r2;
        org.apache.poi.openxml4j.exceptions.InvalidFormatException $r3;
        org.apache.poi.openxml4j.opc.PackageAccess $r1;
        org.apache.poi.openxml4j.opc.ZipPackage r0;

        r0 := @this: org.apache.poi.openxml4j.opc.ZipPackage;

        $r1 = <org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.openxml4j.opc.PackageAccess defaultPackageAccess>;

        specialinvoke r0.<org.apache.poi.openxml4j.opc.Package: void <init>(org.apache.poi.openxml4j.opc.PackageAccess)>($r1);

        r0.<org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.openxml4j.util.ZipEntrySource zipArchive> = null;

     label1:
        $r2 = new org.apache.poi.openxml4j.opc.internal.ZipContentTypeManager;

        specialinvoke $r2.<org.apache.poi.openxml4j.opc.internal.ZipContentTypeManager: void <init>(java.io.InputStream,org.apache.poi.openxml4j.opc.OPCPackage)>(null, r0);

        r0.<org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.openxml4j.opc.internal.ContentTypeManager contentTypeManager> = $r2;

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch org.apache.poi.openxml4j.exceptions.InvalidFormatException from label1 to label2 with label3;
    }

    void <init>(java.io.InputStream, org.apache.poi.openxml4j.opc.PackageAccess) throws java.io.IOException
    {
        java.util.zip.ZipInputStream $r3;
        org.apache.poi.openxml4j.opc.PackageAccess r1;
        org.apache.poi.openxml4j.opc.ZipPackage r0;
        org.apache.poi.openxml4j.util.ZipInputStreamZipEntrySource $r2;
        java.io.InputStream r4;

        r0 := @this: org.apache.poi.openxml4j.opc.ZipPackage;

        r4 := @parameter0: java.io.InputStream;

        r1 := @parameter1: org.apache.poi.openxml4j.opc.PackageAccess;

        specialinvoke r0.<org.apache.poi.openxml4j.opc.Package: void <init>(org.apache.poi.openxml4j.opc.PackageAccess)>(r1);

        $r2 = new org.apache.poi.openxml4j.util.ZipInputStreamZipEntrySource;

        $r3 = new java.util.zip.ZipInputStream;

        specialinvoke $r3.<java.util.zip.ZipInputStream: void <init>(java.io.InputStream)>(r4);

        specialinvoke $r2.<org.apache.poi.openxml4j.util.ZipInputStreamZipEntrySource: void <init>(java.util.zip.ZipInputStream)>($r3);

        r0.<org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.openxml4j.util.ZipEntrySource zipArchive> = $r2;

        return;
    }

    void <init>(java.lang.String, org.apache.poi.openxml4j.opc.PackageAccess)
    {
        org.apache.poi.openxml4j.util.ZipFileZipEntrySource $r4;
        java.io.IOException $r5;
        org.apache.poi.openxml4j.opc.PackageAccess r1;
        org.apache.poi.openxml4j.exceptions.InvalidOperationException $r6;
        java.util.zip.ZipFile $r3;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;
        java.lang.String r2, $r11;
        org.apache.poi.openxml4j.opc.ZipPackage r0;

        r0 := @this: org.apache.poi.openxml4j.opc.ZipPackage;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.poi.openxml4j.opc.PackageAccess;

        specialinvoke r0.<org.apache.poi.openxml4j.opc.Package: void <init>(org.apache.poi.openxml4j.opc.PackageAccess)>(r1);

     label1:
        $r3 = staticinvoke <org.apache.poi.openxml4j.opc.internal.ZipHelper: java.util.zip.ZipFile openZipFile(java.lang.String)>(r2);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.apache.poi.openxml4j.exceptions.InvalidOperationException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t open the specified file: \'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.apache.poi.openxml4j.exceptions.InvalidOperationException: void <init>(java.lang.String,java.lang.Throwable)>($r11, $r5);

        throw $r6;

     label4:
        $r4 = new org.apache.poi.openxml4j.util.ZipFileZipEntrySource;

        specialinvoke $r4.<org.apache.poi.openxml4j.util.ZipFileZipEntrySource: void <init>(java.util.zip.ZipFile)>($r3);

        r0.<org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.openxml4j.util.ZipEntrySource zipArchive> = $r4;

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    void <init>(java.io.File, org.apache.poi.openxml4j.opc.PackageAccess)
    {
        org.apache.poi.openxml4j.util.ZipFileZipEntrySource $r4;
        java.io.IOException $r5;
        org.apache.poi.openxml4j.opc.PackageAccess r1;
        org.apache.poi.openxml4j.exceptions.InvalidOperationException $r6;
        java.io.File r2;
        java.util.zip.ZipFile $r3;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;
        java.lang.String $r11;
        org.apache.poi.openxml4j.opc.ZipPackage r0;

        r0 := @this: org.apache.poi.openxml4j.opc.ZipPackage;

        r2 := @parameter0: java.io.File;

        r1 := @parameter1: org.apache.poi.openxml4j.opc.PackageAccess;

        specialinvoke r0.<org.apache.poi.openxml4j.opc.Package: void <init>(org.apache.poi.openxml4j.opc.PackageAccess)>(r1);

     label1:
        $r3 = staticinvoke <org.apache.poi.openxml4j.opc.internal.ZipHelper: java.util.zip.ZipFile openZipFile(java.io.File)>(r2);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.apache.poi.openxml4j.exceptions.InvalidOperationException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t open the specified file: \'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.apache.poi.openxml4j.exceptions.InvalidOperationException: void <init>(java.lang.String,java.lang.Throwable)>($r11, $r5);

        throw $r6;

     label4:
        $r4 = new org.apache.poi.openxml4j.util.ZipFileZipEntrySource;

        specialinvoke $r4.<org.apache.poi.openxml4j.util.ZipFileZipEntrySource: void <init>(java.util.zip.ZipFile)>($r3);

        r0.<org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.openxml4j.util.ZipEntrySource zipArchive> = $r4;

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    void <init>(org.apache.poi.openxml4j.util.ZipEntrySource, org.apache.poi.openxml4j.opc.PackageAccess)
    {
        org.apache.poi.openxml4j.opc.PackageAccess r1;
        org.apache.poi.openxml4j.opc.ZipPackage r0;
        org.apache.poi.openxml4j.util.ZipEntrySource r2;

        r0 := @this: org.apache.poi.openxml4j.opc.ZipPackage;

        r2 := @parameter0: org.apache.poi.openxml4j.util.ZipEntrySource;

        r1 := @parameter1: org.apache.poi.openxml4j.opc.PackageAccess;

        specialinvoke r0.<org.apache.poi.openxml4j.opc.Package: void <init>(org.apache.poi.openxml4j.opc.PackageAccess)>(r1);

        r0.<org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.openxml4j.util.ZipEntrySource zipArchive> = r2;

        return;
    }

    protected org.apache.poi.openxml4j.opc.PackagePart[] getPartsImpl() throws org.apache.poi.openxml4j.exceptions.InvalidFormatException
    {
        java.util.Enumeration $r4, $r7, $r9;
        org.apache.poi.openxml4j.opc.PackagePartCollection $r1, $r10, $r12, $r29, $r35, $r42, $r44, $r49;
        org.apache.poi.openxml4j.opc.PackagePartName $r17, $r31;
        org.apache.poi.openxml4j.exceptions.InvalidOperationException $r50, $r53;
        org.apache.poi.openxml4j.opc.internal.ContentTypeManager $r5, $r18, $r32;
        java.lang.StringBuilder $r21, $r22, $r25, $r26;
        org.apache.poi.openxml4j.opc.ZipPackage r0;
        org.apache.poi.openxml4j.opc.internal.ZipContentTypeManager $r39;
        java.lang.Object[] $r14, $r47;
        java.lang.String $r19, $r24, $r27, $r33, $r38, $r52, $r55, $r58;
        java.io.IOException $r56;
        org.apache.poi.openxml4j.opc.PackagePart[] $r15, $r46, $r48;
        org.apache.poi.openxml4j.util.ZipEntrySource $r2, $r3, $r6, $r8, $r40;
        java.net.URI $r23;
        java.util.zip.ZipEntry r59, r60, r61;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.poi.openxml4j.opc.ZipPackagePart[] $r13;
        org.apache.poi.openxml4j.exceptions.InvalidFormatException $r20, $r36, $r51, $r54, $r57;
        java.util.Collection $r11, $r43, $r45;
        org.apache.poi.openxml4j.opc.ZipPackagePart $r28, $r34;
        int $i0, $i1;
        java.lang.Object $r16, $r30, $r37;
        java.io.InputStream $r41;

        r0 := @this: org.apache.poi.openxml4j.opc.ZipPackage;

        $r1 = r0.<org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.openxml4j.opc.PackagePartCollection partList>;

        if $r1 != null goto label01;

        $r49 = new org.apache.poi.openxml4j.opc.PackagePartCollection;

        specialinvoke $r49.<org.apache.poi.openxml4j.opc.PackagePartCollection: void <init>()>();

        r0.<org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.openxml4j.opc.PackagePartCollection partList> = $r49;

     label01:
        $r2 = r0.<org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.openxml4j.util.ZipEntrySource zipArchive>;

        if $r2 != null goto label02;

        $r42 = r0.<org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.openxml4j.opc.PackagePartCollection partList>;

        $r43 = virtualinvoke $r42.<org.apache.poi.openxml4j.opc.PackagePartCollection: java.util.Collection values()>();

        $r44 = r0.<org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.openxml4j.opc.PackagePartCollection partList>;

        $r45 = virtualinvoke $r44.<org.apache.poi.openxml4j.opc.PackagePartCollection: java.util.Collection values()>();

        $i1 = interfaceinvoke $r45.<java.util.Collection: int size()>();

        $r46 = newarray (org.apache.poi.openxml4j.opc.PackagePart)[$i1];

        $r47 = interfaceinvoke $r43.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r46);

        $r48 = (org.apache.poi.openxml4j.opc.PackagePart[]) $r47;

        return $r48;

     label02:
        $r3 = r0.<org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.openxml4j.util.ZipEntrySource zipArchive>;

        $r4 = interfaceinvoke $r3.<org.apache.poi.openxml4j.util.ZipEntrySource: java.util.Enumeration getEntries()>();

     label03:
        $z0 = interfaceinvoke $r4.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label08;

        $r37 = interfaceinvoke $r4.<java.util.Enumeration: java.lang.Object nextElement()>();

        r59 = (java.util.zip.ZipEntry) $r37;

        $r38 = virtualinvoke r59.<java.util.zip.ZipEntry: java.lang.String getName()>();

        $z3 = virtualinvoke $r38.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("[Content_Types].xml");

        if $z3 == 0 goto label07;

     label04:
        $r39 = new org.apache.poi.openxml4j.opc.internal.ZipContentTypeManager;

        $r40 = virtualinvoke r0.<org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.openxml4j.util.ZipEntrySource getZipArchive()>();

        $r41 = interfaceinvoke $r40.<org.apache.poi.openxml4j.util.ZipEntrySource: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>(r59);

        specialinvoke $r39.<org.apache.poi.openxml4j.opc.internal.ZipContentTypeManager: void <init>(java.io.InputStream,org.apache.poi.openxml4j.opc.OPCPackage)>($r41, r0);

        r0.<org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.openxml4j.opc.internal.ContentTypeManager contentTypeManager> = $r39;

     label05:
        goto label08;

     label06:
        $r56 := @caughtexception;

        $r57 = new org.apache.poi.openxml4j.exceptions.InvalidFormatException;

        $r58 = virtualinvoke $r56.<java.io.IOException: java.lang.String getMessage()>();

        specialinvoke $r57.<org.apache.poi.openxml4j.exceptions.InvalidFormatException: void <init>(java.lang.String)>($r58);

        throw $r57;

     label07:
        goto label03;

     label08:
        $r5 = r0.<org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.openxml4j.opc.internal.ContentTypeManager contentTypeManager>;

        if $r5 != null goto label09;

        $r36 = new org.apache.poi.openxml4j.exceptions.InvalidFormatException;

        specialinvoke $r36.<org.apache.poi.openxml4j.exceptions.InvalidFormatException: void <init>(java.lang.String)>("Package should contain a content type part [M1.13]");

        throw $r36;

     label09:
        $r6 = r0.<org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.openxml4j.util.ZipEntrySource zipArchive>;

        $r7 = interfaceinvoke $r6.<org.apache.poi.openxml4j.util.ZipEntrySource: java.util.Enumeration getEntries()>();

     label10:
        $z4 = interfaceinvoke $r7.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z4 == 0 goto label16;

        $r30 = interfaceinvoke $r7.<java.util.Enumeration: java.lang.Object nextElement()>();

        r60 = (java.util.zip.ZipEntry) $r30;

        $r31 = specialinvoke r0.<org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.openxml4j.opc.PackagePartName buildPartName(java.util.zip.ZipEntry)>(r60);

        if $r31 != null goto label11;

        goto label10;

     label11:
        $r32 = r0.<org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.openxml4j.opc.internal.ContentTypeManager contentTypeManager>;

        $r33 = virtualinvoke $r32.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: java.lang.String getContentType(org.apache.poi.openxml4j.opc.PackagePartName)>($r31);

        if $r33 == null goto label15;

        $z2 = virtualinvoke $r33.<java.lang.String: boolean equals(java.lang.Object)>("application/vnd.openxmlformats-package.relationships+xml");

        if $z2 == 0 goto label15;

     label12:
        $r35 = r0.<org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.openxml4j.opc.PackagePartCollection partList>;

        $r34 = new org.apache.poi.openxml4j.opc.ZipPackagePart;

        specialinvoke $r34.<org.apache.poi.openxml4j.opc.ZipPackagePart: void <init>(org.apache.poi.openxml4j.opc.OPCPackage,java.util.zip.ZipEntry,org.apache.poi.openxml4j.opc.PackagePartName,java.lang.String)>(r0, r60, $r31, $r33);

        virtualinvoke $r35.<org.apache.poi.openxml4j.opc.PackagePartCollection: org.apache.poi.openxml4j.opc.PackagePart put(org.apache.poi.openxml4j.opc.PackagePartName,org.apache.poi.openxml4j.opc.PackagePart)>($r31, $r34);

     label13:
        goto label15;

     label14:
        $r53 := @caughtexception;

        $r54 = new org.apache.poi.openxml4j.exceptions.InvalidFormatException;

        $r55 = virtualinvoke $r53.<org.apache.poi.openxml4j.exceptions.InvalidOperationException: java.lang.String getMessage()>();

        specialinvoke $r54.<org.apache.poi.openxml4j.exceptions.InvalidFormatException: void <init>(java.lang.String)>($r55);

        throw $r54;

     label15:
        goto label10;

     label16:
        $r8 = r0.<org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.openxml4j.util.ZipEntrySource zipArchive>;

        $r9 = interfaceinvoke $r8.<org.apache.poi.openxml4j.util.ZipEntrySource: java.util.Enumeration getEntries()>();

     label17:
        $z5 = interfaceinvoke $r9.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z5 == 0 goto label25;

        $r16 = interfaceinvoke $r9.<java.util.Enumeration: java.lang.Object nextElement()>();

        r61 = (java.util.zip.ZipEntry) $r16;

        $r17 = specialinvoke r0.<org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.openxml4j.opc.PackagePartName buildPartName(java.util.zip.ZipEntry)>(r61);

        if $r17 != null goto label18;

        goto label17;

     label18:
        $r18 = r0.<org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.openxml4j.opc.internal.ContentTypeManager contentTypeManager>;

        $r19 = virtualinvoke $r18.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: java.lang.String getContentType(org.apache.poi.openxml4j.opc.PackagePartName)>($r17);

        if $r19 == null goto label19;

        $z1 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>("application/vnd.openxmlformats-package.relationships+xml");

        if $z1 == 0 goto label19;

        goto label24;

     label19:
        if $r19 == null goto label23;

     label20:
        $r29 = r0.<org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.openxml4j.opc.PackagePartCollection partList>;

        $r28 = new org.apache.poi.openxml4j.opc.ZipPackagePart;

        specialinvoke $r28.<org.apache.poi.openxml4j.opc.ZipPackagePart: void <init>(org.apache.poi.openxml4j.opc.OPCPackage,java.util.zip.ZipEntry,org.apache.poi.openxml4j.opc.PackagePartName,java.lang.String)>(r0, r61, $r17, $r19);

        virtualinvoke $r29.<org.apache.poi.openxml4j.opc.PackagePartCollection: org.apache.poi.openxml4j.opc.PackagePart put(org.apache.poi.openxml4j.opc.PackagePartName,org.apache.poi.openxml4j.opc.PackagePart)>($r17, $r28);

     label21:
        goto label24;

     label22:
        $r50 := @caughtexception;

        $r51 = new org.apache.poi.openxml4j.exceptions.InvalidFormatException;

        $r52 = virtualinvoke $r50.<org.apache.poi.openxml4j.exceptions.InvalidOperationException: java.lang.String getMessage()>();

        specialinvoke $r51.<org.apache.poi.openxml4j.exceptions.InvalidFormatException: void <init>(java.lang.String)>($r52);

        throw $r51;

     label23:
        $r20 = new org.apache.poi.openxml4j.exceptions.InvalidFormatException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The part ");

        $r23 = virtualinvoke $r17.<org.apache.poi.openxml4j.opc.PackagePartName: java.net.URI getURI()>();

        $r24 = virtualinvoke $r23.<java.net.URI: java.lang.String getPath()>();

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not have any content type ! Rule: Package require content types when retrieving a part from a package. [M.1.14]");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<org.apache.poi.openxml4j.exceptions.InvalidFormatException: void <init>(java.lang.String)>($r27);

        throw $r20;

     label24:
        goto label17;

     label25:
        $r10 = r0.<org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.openxml4j.opc.PackagePartCollection partList>;

        $r11 = virtualinvoke $r10.<org.apache.poi.openxml4j.opc.PackagePartCollection: java.util.Collection values()>();

        $r12 = r0.<org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.openxml4j.opc.PackagePartCollection partList>;

        $i0 = virtualinvoke $r12.<org.apache.poi.openxml4j.opc.PackagePartCollection: int size()>();

        $r13 = newarray (org.apache.poi.openxml4j.opc.ZipPackagePart)[$i0];

        $r14 = interfaceinvoke $r11.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r13);

        $r15 = (org.apache.poi.openxml4j.opc.PackagePart[]) $r14;

        return $r15;

        catch java.io.IOException from label04 to label05 with label06;
        catch org.apache.poi.openxml4j.exceptions.InvalidOperationException from label12 to label13 with label14;
        catch org.apache.poi.openxml4j.exceptions.InvalidOperationException from label20 to label21 with label22;
    }

    private org.apache.poi.openxml4j.opc.PackagePartName buildPartName(java.util.zip.ZipEntry)
    {
        org.apache.poi.openxml4j.opc.PackagePartName $r4;
        org.apache.poi.util.POILogger $r7;
        java.lang.Exception $r5;
        java.lang.StringBuilder $r6, $r8, $r10, $r11;
        java.lang.String $r1, $r2, $r3, $r9, $r12;
        java.util.zip.ZipEntry r0;
        org.apache.poi.openxml4j.opc.ZipPackage r13;
        boolean $z0;

        r13 := @this: org.apache.poi.openxml4j.opc.ZipPackage;

        r0 := @parameter0: java.util.zip.ZipEntry;

     label1:
        $r1 = virtualinvoke r0.<java.util.zip.ZipEntry: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("[Content_Types].xml");

        if $z0 == 0 goto label3;

     label2:
        return null;

     label3:
        $r2 = virtualinvoke r0.<java.util.zip.ZipEntry: java.lang.String getName()>();

        $r3 = staticinvoke <org.apache.poi.openxml4j.opc.internal.ZipHelper: java.lang.String getOPCNameFromZipItemName(java.lang.String)>($r2);

        $r4 = staticinvoke <org.apache.poi.openxml4j.opc.PackagingURIHelper: org.apache.poi.openxml4j.opc.PackagePartName createPartName(java.lang.String)>($r3);

     label4:
        return $r4;

     label5:
        $r5 := @caughtexception;

        $r7 = <org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.util.POILogger logger>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Entry ");

        $r9 = virtualinvoke r0.<java.util.zip.ZipEntry: java.lang.String getName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not valid, so this part won\'t be add to the package.");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<org.apache.poi.util.POILogger: void log(int,java.lang.Object,java.lang.Throwable)>(5, $r12, $r5);

        return null;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }

    protected org.apache.poi.openxml4j.opc.PackagePart createPartImpl(org.apache.poi.openxml4j.opc.PackagePartName, java.lang.String, boolean)
    {
        org.apache.poi.openxml4j.exceptions.InvalidFormatException $r6;
        org.apache.poi.openxml4j.opc.PackagePartName r1;
        org.apache.poi.openxml4j.opc.internal.MemoryPackagePart $r2;
        org.apache.poi.util.POILogger $r7;
        java.lang.IllegalArgumentException $r4, $r5;
        java.lang.String r0;
        org.apache.poi.openxml4j.opc.ZipPackage r3;
        boolean z0;

        r3 := @this: org.apache.poi.openxml4j.opc.ZipPackage;

        r1 := @parameter0: org.apache.poi.openxml4j.opc.PackagePartName;

        r0 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        if r0 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("contentType");

        throw $r5;

     label1:
        if r1 != null goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("partName");

        throw $r4;

     label2:
        $r2 = new org.apache.poi.openxml4j.opc.internal.MemoryPackagePart;

        specialinvoke $r2.<org.apache.poi.openxml4j.opc.internal.MemoryPackagePart: void <init>(org.apache.poi.openxml4j.opc.OPCPackage,org.apache.poi.openxml4j.opc.PackagePartName,java.lang.String,boolean)>(r3, r1, r0, z0);

     label3:
        return $r2;

     label4:
        $r6 := @caughtexception;

        $r7 = <org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.util.POILogger logger>;

        virtualinvoke $r7.<org.apache.poi.util.POILogger: void log(int,java.lang.Throwable)>(5, $r6);

        return null;

        catch org.apache.poi.openxml4j.exceptions.InvalidFormatException from label2 to label3 with label4;
    }

    protected void removePartImpl(org.apache.poi.openxml4j.opc.PackagePartName)
    {
        java.lang.IllegalArgumentException $r1;
        org.apache.poi.openxml4j.opc.PackagePartName r0;
        org.apache.poi.openxml4j.opc.ZipPackage r2;

        r2 := @this: org.apache.poi.openxml4j.opc.ZipPackage;

        r0 := @parameter0: org.apache.poi.openxml4j.opc.PackagePartName;

        if r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("partUri");

        throw $r1;

     label1:
        return;
    }

    protected void flushImpl()
    {
        org.apache.poi.openxml4j.opc.ZipPackage r0;

        r0 := @this: org.apache.poi.openxml4j.opc.ZipPackage;

        return;
    }

    protected void closeImpl() throws java.io.IOException
    {
        java.lang.Throwable $r18;
        org.apache.poi.openxml4j.util.ZipEntrySource $r10;
        java.lang.String $r1, $r2, $r3, $r5, $r8, $r14, $r17, $r22, $r25;
        boolean $z0, $z1, $z2, $z3;
        org.apache.poi.util.POILogger $r12, $r20;
        org.apache.poi.openxml4j.exceptions.InvalidOperationException $r6;
        java.io.File $r4, $r7, $r9;
        java.lang.StringBuilder $r11, $r13, $r15, $r16, $r19, $r21, $r23, $r24;
        org.apache.poi.openxml4j.opc.ZipPackage r0;

        r0 := @this: org.apache.poi.openxml4j.opc.ZipPackage;

        virtualinvoke r0.<org.apache.poi.openxml4j.opc.ZipPackage: void flush()>();

        $r1 = r0.<org.apache.poi.openxml4j.opc.ZipPackage: java.lang.String originalPackagePath>;

        if $r1 == null goto label8;

        $r3 = "";

        $r2 = r0.<org.apache.poi.openxml4j.opc.ZipPackage: java.lang.String originalPackagePath>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label8;

        $r4 = new java.io.File;

        $r5 = r0.<org.apache.poi.openxml4j.opc.ZipPackage: java.lang.String originalPackagePath>;

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>($r5);

        $z1 = virtualinvoke $r4.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label7;

        $r7 = staticinvoke <org.apache.poi.openxml4j.opc.internal.FileHelper: java.io.File getDirectory(java.io.File)>($r4);

        $r8 = specialinvoke r0.<org.apache.poi.openxml4j.opc.ZipPackage: java.lang.String generateTempFileName(java.io.File)>($r7);

        $r9 = staticinvoke <org.apache.poi.util.TempFile: java.io.File createTempFile(java.lang.String,java.lang.String)>($r8, ".tmp");

     label1:
        virtualinvoke r0.<org.apache.poi.openxml4j.opc.ZipPackage: void save(java.io.File)>($r9);

        $r10 = r0.<org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.openxml4j.util.ZipEntrySource zipArchive>;

        interfaceinvoke $r10.<org.apache.poi.openxml4j.util.ZipEntrySource: void close()>();

        staticinvoke <org.apache.poi.openxml4j.opc.internal.FileHelper: void copyFile(java.io.File,java.io.File)>($r9, $r4);

     label2:
        $z2 = virtualinvoke $r9.<java.io.File: boolean delete()>();

        if $z2 != 0 goto label6;

        $r12 = <org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.util.POILogger logger>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The temporary file: \'");

        $r14 = virtualinvoke $r4.<java.io.File: java.lang.String getAbsolutePath()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' cannot be deleted ! Make sure that no other application use it.");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r12.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(5, $r17);

        goto label6;

     label3:
        $r18 := @caughtexception;

     label4:
        $z3 = virtualinvoke $r9.<java.io.File: boolean delete()>();

        if $z3 != 0 goto label5;

        $r20 = <org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.util.POILogger logger>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The temporary file: \'");

        $r22 = virtualinvoke $r4.<java.io.File: java.lang.String getAbsolutePath()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' cannot be deleted ! Make sure that no other application use it.");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r20.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(5, $r25);

     label5:
        throw $r18;

     label6:
        goto label8;

     label7:
        $r6 = new org.apache.poi.openxml4j.exceptions.InvalidOperationException;

        specialinvoke $r6.<org.apache.poi.openxml4j.exceptions.InvalidOperationException: void <init>(java.lang.String)>("Can\'t close a package not previously open with the open() method !");

        throw $r6;

     label8:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private synchronized java.lang.String generateTempFileName(java.io.File)
    {
        long $l0;
        java.io.File $r0, r2, $r3, $r10;
        java.lang.StringBuilder $r1, $r4, $r6, $r7, $r8;
        java.lang.String $r5, $r9, $r11;
        org.apache.poi.openxml4j.opc.ZipPackage r12;
        boolean $z0;

        r12 := @this: org.apache.poi.openxml4j.opc.ZipPackage;

        r2 := @parameter0: java.io.File;

     label1:
        $r0 = new java.io.File;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r2.<java.io.File: java.io.File getAbsoluteFile()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = <java.io.File: java.lang.String separator>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("OpenXML4J");

        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>($r9);

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $r10 = virtualinvoke $r0.<java.io.File: java.io.File getAbsoluteFile()>();

        $r11 = staticinvoke <org.apache.poi.openxml4j.opc.internal.FileHelper: java.lang.String getFilename(java.io.File)>($r10);

        return $r11;
    }

    protected void revertImpl()
    {
        org.apache.poi.openxml4j.util.ZipEntrySource $r1, $r2;
        java.io.IOException $r3;
        org.apache.poi.openxml4j.opc.ZipPackage r0;

        r0 := @this: org.apache.poi.openxml4j.opc.ZipPackage;

     label1:
        $r1 = r0.<org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.openxml4j.util.ZipEntrySource zipArchive>;

        if $r1 == null goto label2;

        $r2 = r0.<org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.openxml4j.util.ZipEntrySource zipArchive>;

        interfaceinvoke $r2.<org.apache.poi.openxml4j.util.ZipEntrySource: void close()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    protected org.apache.poi.openxml4j.opc.PackagePart getPartImpl(org.apache.poi.openxml4j.opc.PackagePartName)
    {
        org.apache.poi.openxml4j.opc.PackagePartName r1;
        org.apache.poi.openxml4j.opc.PackagePartCollection $r2, $r3;
        java.lang.Object $r4;
        org.apache.poi.openxml4j.opc.PackagePart $r5;
        org.apache.poi.openxml4j.opc.ZipPackage r0;
        boolean $z0;

        r0 := @this: org.apache.poi.openxml4j.opc.ZipPackage;

        r1 := @parameter0: org.apache.poi.openxml4j.opc.PackagePartName;

        $r2 = r0.<org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.openxml4j.opc.PackagePartCollection partList>;

        $z0 = virtualinvoke $r2.<org.apache.poi.openxml4j.opc.PackagePartCollection: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.openxml4j.opc.PackagePartCollection partList>;

        $r4 = virtualinvoke $r3.<org.apache.poi.openxml4j.opc.PackagePartCollection: java.lang.Object get(java.lang.Object)>(r1);

        $r5 = (org.apache.poi.openxml4j.opc.PackagePart) $r4;

        return $r5;

     label1:
        return null;
    }

    public void saveImpl(java.io.OutputStream)
    {
        org.apache.poi.openxml4j.opc.internal.ContentType $r14;
        org.apache.poi.openxml4j.opc.internal.PackagePropertiesPart $r40, $r41, $r47;
        org.apache.poi.openxml4j.opc.PackagePartName $r8, $r22, $r32, $r43, $r49, $r61;
        java.lang.Exception $r51;
        org.apache.poi.openxml4j.opc.internal.ContentTypeManager $r46, $r48, $r63;
        java.lang.StringBuilder $r5, $r7, $r11, $r12, $r20, $r21, $r24, $r25, $r27, $r30, $r31, $r34, $r35, $r36, $r53, $r54, $r56;
        org.apache.poi.openxml4j.opc.ZipPackage r0;
        java.util.zip.ZipOutputStream $r50, r58;
        java.util.ArrayList $r2, $r38, $r64;
        org.apache.poi.openxml4j.opc.PackageRelationshipCollection $r42, $r60;
        java.lang.String $r9, $r10, $r13, $r28, $r37, $r55, $r57;
        org.apache.poi.openxml4j.exceptions.OpenXML4JRuntimeException $r52;
        org.apache.poi.openxml4j.opc.PackagePart r4;
        java.net.URI $r23, $r33, $r44;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.poi.openxml4j.exceptions.OpenXML4JException $r19, $r29;
        org.apache.poi.util.POILogger $r6, $r39, $r59, $r62;
        org.apache.poi.openxml4j.opc.internal.PartMarshaller r17, $r18, $r26;
        int $i0, $i1;
        java.util.Hashtable $r15;
        java.io.OutputStream r1;
        java.util.Iterator $r65;
        org.apache.poi.openxml4j.opc.TargetMode $r45;
        java.lang.Object $r3, $r16;

        r0 := @this: org.apache.poi.openxml4j.opc.ZipPackage;

        r1 := @parameter0: java.io.OutputStream;

        virtualinvoke r0.<org.apache.poi.openxml4j.opc.ZipPackage: void throwExceptionIfReadOnly()>();

     label01:
        $z0 = r1 instanceof java.util.zip.ZipOutputStream;

        if $z0 != 0 goto label02;

        $r50 = new java.util.zip.ZipOutputStream;

        specialinvoke $r50.<java.util.zip.ZipOutputStream: void <init>(java.io.OutputStream)>(r1);

        r58 = $r50;

        goto label03;

     label02:
        r58 = (java.util.zip.ZipOutputStream) r1;

     label03:
        $r2 = virtualinvoke r0.<org.apache.poi.openxml4j.opc.ZipPackage: java.util.ArrayList getPartsByRelationshipType(java.lang.String)>("http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties");

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if $i0 != 0 goto label04;

        $r38 = virtualinvoke r0.<org.apache.poi.openxml4j.opc.ZipPackage: java.util.ArrayList getPartsByRelationshipType(java.lang.String)>("http://schemas.openxmlformats.org/officedocument/2006/relationships/metadata/core-properties");

        $i1 = virtualinvoke $r38.<java.util.ArrayList: int size()>();

        if $i1 != 0 goto label04;

        $r39 = <org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.util.POILogger logger>;

        virtualinvoke $r39.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(1, "Save core properties part");

        $r40 = r0.<org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.openxml4j.opc.internal.PackagePropertiesPart packageProperties>;

        virtualinvoke r0.<org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.openxml4j.opc.PackagePart addPackagePart(org.apache.poi.openxml4j.opc.PackagePart)>($r40);

        $r42 = r0.<org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.openxml4j.opc.PackageRelationshipCollection relationships>;

        $r41 = r0.<org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.openxml4j.opc.internal.PackagePropertiesPart packageProperties>;

        $r43 = virtualinvoke $r41.<org.apache.poi.openxml4j.opc.internal.PackagePropertiesPart: org.apache.poi.openxml4j.opc.PackagePartName getPartName()>();

        $r44 = virtualinvoke $r43.<org.apache.poi.openxml4j.opc.PackagePartName: java.net.URI getURI()>();

        $r45 = <org.apache.poi.openxml4j.opc.TargetMode: org.apache.poi.openxml4j.opc.TargetMode INTERNAL>;

        virtualinvoke $r42.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: org.apache.poi.openxml4j.opc.PackageRelationship addRelationship(java.net.URI,org.apache.poi.openxml4j.opc.TargetMode,java.lang.String,java.lang.String)>($r44, $r45, "http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties", null);

        $r46 = r0.<org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.openxml4j.opc.internal.ContentTypeManager contentTypeManager>;

        $z4 = virtualinvoke $r46.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: boolean isContentTypeRegister(java.lang.String)>("application/vnd.openxmlformats-package.core-properties+xml");

        if $z4 != 0 goto label04;

        $r48 = r0.<org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.openxml4j.opc.internal.ContentTypeManager contentTypeManager>;

        $r47 = r0.<org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.openxml4j.opc.internal.PackagePropertiesPart packageProperties>;

        $r49 = virtualinvoke $r47.<org.apache.poi.openxml4j.opc.internal.PackagePropertiesPart: org.apache.poi.openxml4j.opc.PackagePartName getPartName()>();

        virtualinvoke $r48.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: void addContentType(org.apache.poi.openxml4j.opc.PackagePartName,java.lang.String)>($r49, "application/vnd.openxmlformats-package.core-properties+xml");

     label04:
        $r59 = <org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.util.POILogger logger>;

        virtualinvoke $r59.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(1, "Save package relationships");

        $r60 = virtualinvoke r0.<org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.openxml4j.opc.PackageRelationshipCollection getRelationships()>();

        $r61 = <org.apache.poi.openxml4j.opc.PackagingURIHelper: org.apache.poi.openxml4j.opc.PackagePartName PACKAGE_RELATIONSHIPS_ROOT_PART_NAME>;

        staticinvoke <org.apache.poi.openxml4j.opc.internal.marshallers.ZipPartMarshaller: boolean marshallRelationshipPart(org.apache.poi.openxml4j.opc.PackageRelationshipCollection,org.apache.poi.openxml4j.opc.PackagePartName,java.util.zip.ZipOutputStream)>($r60, $r61, r58);

        $r62 = <org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.util.POILogger logger>;

        virtualinvoke $r62.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(1, "Save content types part");

        $r63 = r0.<org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.openxml4j.opc.internal.ContentTypeManager contentTypeManager>;

        virtualinvoke $r63.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: boolean save(java.io.OutputStream)>(r58);

        $r64 = virtualinvoke r0.<org.apache.poi.openxml4j.opc.ZipPackage: java.util.ArrayList getParts()>();

        $r65 = virtualinvoke $r64.<java.util.ArrayList: java.util.Iterator iterator()>();

     label05:
        $z5 = interfaceinvoke $r65.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label09;

        $r3 = interfaceinvoke $r65.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.poi.openxml4j.opc.PackagePart) $r3;

        $z1 = virtualinvoke r4.<org.apache.poi.openxml4j.opc.PackagePart: boolean isRelationshipPart()>();

        if $z1 == 0 goto label06;

        goto label05;

     label06:
        $r6 = <org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.util.POILogger logger>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Save part \'");

        $r8 = virtualinvoke r4.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackagePartName getPartName()>();

        $r9 = virtualinvoke $r8.<org.apache.poi.openxml4j.opc.PackagePartName: java.lang.String getName()>();

        $r10 = staticinvoke <org.apache.poi.openxml4j.opc.internal.ZipHelper: java.lang.String getZipItemNameFromOPCName(java.lang.String)>($r9);

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(1, $r13);

        $r15 = r0.<org.apache.poi.openxml4j.opc.ZipPackage: java.util.Hashtable partMarshallers>;

        $r14 = r4.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.internal.ContentType _contentType>;

        $r16 = virtualinvoke $r15.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r14);

        r17 = (org.apache.poi.openxml4j.opc.internal.PartMarshaller) $r16;

        if r17 == null goto label07;

        $z3 = interfaceinvoke r17.<org.apache.poi.openxml4j.opc.internal.PartMarshaller: boolean marshall(org.apache.poi.openxml4j.opc.PackagePart,java.io.OutputStream)>(r4, r58);

        if $z3 != 0 goto label08;

        $r29 = new org.apache.poi.openxml4j.exceptions.OpenXML4JException;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The part ");

        $r32 = virtualinvoke r4.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackagePartName getPartName()>();

        $r33 = virtualinvoke $r32.<org.apache.poi.openxml4j.opc.PackagePartName: java.net.URI getURI()>();

        $r34 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" fail to be saved in the stream with marshaller ");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r17);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<org.apache.poi.openxml4j.exceptions.OpenXML4JException: void <init>(java.lang.String)>($r37);

        throw $r29;

     label07:
        $r18 = r0.<org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.openxml4j.opc.internal.PartMarshaller defaultPartMarshaller>;

        $z2 = interfaceinvoke $r18.<org.apache.poi.openxml4j.opc.internal.PartMarshaller: boolean marshall(org.apache.poi.openxml4j.opc.PackagePart,java.io.OutputStream)>(r4, r58);

        if $z2 != 0 goto label08;

        $r19 = new org.apache.poi.openxml4j.exceptions.OpenXML4JException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The part ");

        $r22 = virtualinvoke r4.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackagePartName getPartName()>();

        $r23 = virtualinvoke $r22.<org.apache.poi.openxml4j.opc.PackagePartName: java.net.URI getURI()>();

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" fail to be saved in the stream with marshaller ");

        $r26 = r0.<org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.openxml4j.opc.internal.PartMarshaller defaultPartMarshaller>;

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<org.apache.poi.openxml4j.exceptions.OpenXML4JException: void <init>(java.lang.String)>($r28);

        throw $r19;

     label08:
        goto label05;

     label09:
        virtualinvoke r58.<java.util.zip.ZipOutputStream: void close()>();

     label10:
        goto label12;

     label11:
        $r51 := @caughtexception;

        $r52 = new org.apache.poi.openxml4j.exceptions.OpenXML4JRuntimeException;

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Fail to save: an error occurs while saving the package : ");

        $r55 = virtualinvoke $r51.<java.lang.Exception: java.lang.String getMessage()>();

        $r56 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r55);

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r52.<org.apache.poi.openxml4j.exceptions.OpenXML4JRuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r57, $r51);

        throw $r52;

     label12:
        return;

        catch java.lang.Exception from label01 to label10 with label11;
    }

    public org.apache.poi.openxml4j.util.ZipEntrySource getZipArchive()
    {
        org.apache.poi.openxml4j.opc.ZipPackage r0;
        org.apache.poi.openxml4j.util.ZipEntrySource $r1;

        r0 := @this: org.apache.poi.openxml4j.opc.ZipPackage;

        $r1 = r0.<org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.openxml4j.util.ZipEntrySource zipArchive>;

        return $r1;
    }

    static void <clinit>()
    {
        org.apache.poi.util.POILogger $r0;

        $r0 = staticinvoke <org.apache.poi.util.POILogFactory: org.apache.poi.util.POILogger getLogger(java.lang.Class)>(class "Lorg/apache/poi/openxml4j/opc/ZipPackage;");

        <org.apache.poi.openxml4j.opc.ZipPackage: org.apache.poi.util.POILogger logger> = $r0;

        return;
    }
}
