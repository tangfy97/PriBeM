public class org.codehaus.groovy.classgen.VariableScopeVisitor extends org.codehaus.groovy.ast.ClassCodeVisitorSupport
{
    private static final org.codehaus.groovy.ast.expr.Expression CALL;
    private org.codehaus.groovy.ast.VariableScope currentScope;
    private org.codehaus.groovy.ast.VariableScope headScope;
    private org.codehaus.groovy.ast.ClassNode currentClass;
    private org.codehaus.groovy.control.SourceUnit source;
    private boolean inClosure;
    private boolean inPropertyExpression;
    private boolean isSpecialConstructorCall;
    private java.util.LinkedList stateStack;
    static java.lang.Class class$org$codehaus$groovy$ast$FieldNode;
    static java.lang.Class class$org$codehaus$groovy$ast$PropertyNode;

    public void <init>(org.codehaus.groovy.control.SourceUnit)
    {
        org.codehaus.groovy.classgen.VariableScopeVisitor r0;
        org.codehaus.groovy.ast.VariableScope $r1, $r4;
        org.codehaus.groovy.control.SourceUnit r3;
        java.util.LinkedList $r2;

        r0 := @this: org.codehaus.groovy.classgen.VariableScopeVisitor;

        r3 := @parameter0: org.codehaus.groovy.control.SourceUnit;

        specialinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void <init>()>();

        r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.ast.VariableScope currentScope> = null;

        $r1 = new org.codehaus.groovy.ast.VariableScope;

        specialinvoke $r1.<org.codehaus.groovy.ast.VariableScope: void <init>()>();

        r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.ast.VariableScope headScope> = $r1;

        r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.ast.ClassNode currentClass> = null;

        r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: boolean inClosure> = 0;

        r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: boolean inPropertyExpression> = 0;

        r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: boolean isSpecialConstructorCall> = 0;

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: java.util.LinkedList stateStack> = $r2;

        r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.control.SourceUnit source> = r3;

        $r4 = r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.ast.VariableScope headScope>;

        r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.ast.VariableScope currentScope> = $r4;

        return;
    }

    private void pushState(boolean)
    {
        org.codehaus.groovy.classgen.VariableScopeVisitor r0;
        org.codehaus.groovy.ast.VariableScope $r3, $r4, $r5;
        org.codehaus.groovy.classgen.VariableScopeVisitor$StateStackElement $r1;
        java.util.LinkedList $r2;
        boolean z0;

        r0 := @this: org.codehaus.groovy.classgen.VariableScopeVisitor;

        z0 := @parameter0: boolean;

        $r2 = r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: java.util.LinkedList stateStack>;

        $r1 = new org.codehaus.groovy.classgen.VariableScopeVisitor$StateStackElement;

        specialinvoke $r1.<org.codehaus.groovy.classgen.VariableScopeVisitor$StateStackElement: void <init>(org.codehaus.groovy.classgen.VariableScopeVisitor)>(r0);

        virtualinvoke $r2.<java.util.LinkedList: boolean add(java.lang.Object)>($r1);

        $r3 = new org.codehaus.groovy.ast.VariableScope;

        $r4 = r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.ast.VariableScope currentScope>;

        specialinvoke $r3.<org.codehaus.groovy.ast.VariableScope: void <init>(org.codehaus.groovy.ast.VariableScope)>($r4);

        r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.ast.VariableScope currentScope> = $r3;

        $r5 = r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.ast.VariableScope currentScope>;

        virtualinvoke $r5.<org.codehaus.groovy.ast.VariableScope: void setInStaticContext(boolean)>(z0);

        return;
    }

    private void pushState()
    {
        org.codehaus.groovy.classgen.VariableScopeVisitor r0;
        org.codehaus.groovy.ast.VariableScope $r1;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.classgen.VariableScopeVisitor;

        $r1 = r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.ast.VariableScope currentScope>;

        $z0 = virtualinvoke $r1.<org.codehaus.groovy.ast.VariableScope: boolean isInStaticContext()>();

        specialinvoke r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: void pushState(boolean)>($z0);

        return;
    }

    private void popState()
    {
        org.codehaus.groovy.classgen.VariableScopeVisitor r0;
        org.codehaus.groovy.ast.VariableScope $r3, $r5;
        org.codehaus.groovy.ast.ClassNode $r4;
        org.codehaus.groovy.classgen.VariableScopeVisitor$StateStackElement $r6;
        java.lang.Object $r2;
        java.util.LinkedList $r1;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.groovy.classgen.VariableScopeVisitor;

        $z0 = r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: boolean inClosure>;

        if $z0 == 0 goto label1;

        $r5 = r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.ast.VariableScope currentScope>;

        virtualinvoke $r5.<org.codehaus.groovy.ast.VariableScope: void setInStaticContext(boolean)>(0);

     label1:
        $r1 = r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: java.util.LinkedList stateStack>;

        $r2 = virtualinvoke $r1.<java.util.LinkedList: java.lang.Object removeLast()>();

        $r6 = (org.codehaus.groovy.classgen.VariableScopeVisitor$StateStackElement) $r2;

        $r3 = $r6.<org.codehaus.groovy.classgen.VariableScopeVisitor$StateStackElement: org.codehaus.groovy.ast.VariableScope scope>;

        r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.ast.VariableScope currentScope> = $r3;

        $r4 = $r6.<org.codehaus.groovy.classgen.VariableScopeVisitor$StateStackElement: org.codehaus.groovy.ast.ClassNode clazz>;

        r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.ast.ClassNode currentClass> = $r4;

        $z1 = $r6.<org.codehaus.groovy.classgen.VariableScopeVisitor$StateStackElement: boolean closure>;

        r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: boolean inClosure> = $z1;

        return;
    }

    private void declare(org.codehaus.groovy.ast.Parameter[], org.codehaus.groovy.ast.ASTNode)
    {
        org.codehaus.groovy.classgen.VariableScopeVisitor r2;
        org.codehaus.groovy.ast.Parameter $r1, $r4, $r5;
        org.codehaus.groovy.ast.Parameter[] r0;
        org.codehaus.groovy.ast.ASTNode r3;
        int $i0, i1;
        org.codehaus.groovy.ast.expr.Expression $r6;
        boolean $z0;

        r2 := @this: org.codehaus.groovy.classgen.VariableScopeVisitor;

        r0 := @parameter0: org.codehaus.groovy.ast.Parameter[];

        r3 := @parameter1: org.codehaus.groovy.ast.ASTNode;

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label3;

        $r1 = r0[i1];

        $z0 = virtualinvoke $r1.<org.codehaus.groovy.ast.Parameter: boolean hasInitialExpression()>();

        if $z0 == 0 goto label2;

        $r5 = r0[i1];

        $r6 = virtualinvoke $r5.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.expr.Expression getInitialExpression()>();

        virtualinvoke $r6.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

     label2:
        $r4 = r0[i1];

        specialinvoke r2.<org.codehaus.groovy.classgen.VariableScopeVisitor: void declare(org.codehaus.groovy.ast.Variable,org.codehaus.groovy.ast.ASTNode)>($r4, r3);

        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    private void declare(org.codehaus.groovy.ast.expr.VariableExpression)
    {
        org.codehaus.groovy.classgen.VariableScopeVisitor r0;
        org.codehaus.groovy.ast.expr.VariableExpression r1;

        r0 := @this: org.codehaus.groovy.classgen.VariableScopeVisitor;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.VariableExpression;

        specialinvoke r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: void declare(org.codehaus.groovy.ast.Variable,org.codehaus.groovy.ast.ASTNode)>(r1, r1);

        return;
    }

    private void declare(org.codehaus.groovy.ast.Variable, org.codehaus.groovy.ast.ASTNode)
    {
        org.codehaus.groovy.ast.VariableScope $r7, $r22, r25, $r26;
        org.codehaus.groovy.ast.Variable r5, $r10, $r24;
        java.lang.StringBuffer $r17, $r18, $r19, $r20;
        java.lang.String $r9, $r11, $r12, r13, r14, $r21, $r23;
        org.codehaus.groovy.classgen.VariableScopeVisitor r6;
        org.codehaus.groovy.ast.ClassNode $r8;
        org.codehaus.groovy.ast.ASTNode r0;
        java.lang.Class $r1, $r2, $r3, $r4, $r15, $r16;

        r6 := @this: org.codehaus.groovy.classgen.VariableScopeVisitor;

        r5 := @parameter0: org.codehaus.groovy.ast.Variable;

        r0 := @parameter1: org.codehaus.groovy.ast.ASTNode;

        r13 = "scope";

        r14 = "variable";

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = <org.codehaus.groovy.classgen.VariableScopeVisitor: java.lang.Class class$org$codehaus$groovy$ast$FieldNode>;

        if $r2 != null goto label01;

        $r15 = staticinvoke <org.codehaus.groovy.classgen.VariableScopeVisitor: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.ast.FieldNode");

        <org.codehaus.groovy.classgen.VariableScopeVisitor: java.lang.Class class$org$codehaus$groovy$ast$FieldNode> = $r15;

        goto label02;

     label01:
        $r15 = <org.codehaus.groovy.classgen.VariableScopeVisitor: java.lang.Class class$org$codehaus$groovy$ast$FieldNode>;

     label02:
        if $r1 != $r15 goto label03;

        r13 = "class";

        r14 = "field";

        goto label06;

     label03:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = <org.codehaus.groovy.classgen.VariableScopeVisitor: java.lang.Class class$org$codehaus$groovy$ast$PropertyNode>;

        if $r4 != null goto label04;

        $r16 = staticinvoke <org.codehaus.groovy.classgen.VariableScopeVisitor: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.ast.PropertyNode");

        <org.codehaus.groovy.classgen.VariableScopeVisitor: java.lang.Class class$org$codehaus$groovy$ast$PropertyNode> = $r16;

        goto label05;

     label04:
        $r16 = <org.codehaus.groovy.classgen.VariableScopeVisitor: java.lang.Class class$org$codehaus$groovy$ast$PropertyNode>;

     label05:
        if $r3 != $r16 goto label06;

        r13 = "class";

        r14 = "property";

     label06:
        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The current ");

        virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r13);

        $r19 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" already contains a ");

        virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r14);

        $r20 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" of the name ");

        $r21 = interfaceinvoke r5.<org.codehaus.groovy.ast.Variable: java.lang.String getName()>();

        virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r21);

        $r22 = r6.<org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.ast.VariableScope currentScope>;

        $r23 = interfaceinvoke r5.<org.codehaus.groovy.ast.Variable: java.lang.String getName()>();

        $r24 = virtualinvoke $r22.<org.codehaus.groovy.ast.VariableScope: org.codehaus.groovy.ast.Variable getDeclaredVariable(java.lang.String)>($r23);

        if $r24 == null goto label07;

        $r12 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r6.<org.codehaus.groovy.classgen.VariableScopeVisitor: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r12, r0);

        return;

     label07:
        $r7 = r6.<org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.ast.VariableScope currentScope>;

        r25 = virtualinvoke $r7.<org.codehaus.groovy.ast.VariableScope: org.codehaus.groovy.ast.VariableScope getParent()>();

     label08:
        if r25 == null goto label11;

        $r8 = virtualinvoke r25.<org.codehaus.groovy.ast.VariableScope: org.codehaus.groovy.ast.ClassNode getClassScope()>();

        if $r8 == null goto label09;

        goto label11;

     label09:
        $r9 = interfaceinvoke r5.<org.codehaus.groovy.ast.Variable: java.lang.String getName()>();

        $r10 = virtualinvoke r25.<org.codehaus.groovy.ast.VariableScope: org.codehaus.groovy.ast.Variable getDeclaredVariable(java.lang.String)>($r9);

        if $r10 == null goto label10;

        $r11 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r6.<org.codehaus.groovy.classgen.VariableScopeVisitor: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r11, r0);

        goto label11;

     label10:
        r25 = virtualinvoke r25.<org.codehaus.groovy.ast.VariableScope: org.codehaus.groovy.ast.VariableScope getParent()>();

        goto label08;

     label11:
        $r26 = r6.<org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.ast.VariableScope currentScope>;

        virtualinvoke $r26.<org.codehaus.groovy.ast.VariableScope: void putDeclaredVariable(org.codehaus.groovy.ast.Variable)>(r5);

        return;
    }

    protected org.codehaus.groovy.control.SourceUnit getSourceUnit()
    {
        org.codehaus.groovy.classgen.VariableScopeVisitor r0;
        org.codehaus.groovy.control.SourceUnit $r1;

        r0 := @this: org.codehaus.groovy.classgen.VariableScopeVisitor;

        $r1 = r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.control.SourceUnit source>;

        return $r1;
    }

    private org.codehaus.groovy.ast.Variable findClassMember(org.codehaus.groovy.ast.ClassNode, java.lang.String)
    {
        org.codehaus.groovy.ast.Variable $r10, $r12;
        org.codehaus.groovy.ast.PropertyNode $r17, r24;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.List $r1, $r3, $r5;
        org.codehaus.groovy.ast.DynamicVariable $r21;
        org.codehaus.groovy.ast.MethodNode r23;
        int $i0;
        java.lang.String r9, $r14, $r16, $r20;
        org.codehaus.groovy.classgen.VariableScopeVisitor r7;
        java.util.Iterator $r2, $r4, $r6;
        org.codehaus.groovy.ast.ClassNode r0, $r8, $r11, $r18;
        org.codehaus.groovy.ast.FieldNode r22;
        java.lang.Object $r13, $r15, $r19;

        r7 := @this: org.codehaus.groovy.classgen.VariableScopeVisitor;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        r9 := @parameter1: java.lang.String;

        if r0 != null goto label01;

        return null;

     label01:
        $z0 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: boolean isScript()>();

        if $z0 == 0 goto label02;

        $r21 = new org.codehaus.groovy.ast.DynamicVariable;

        specialinvoke $r21.<org.codehaus.groovy.ast.DynamicVariable: void <init>(java.lang.String,boolean)>(r9, 0);

        return $r21;

     label02:
        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.util.List getFields()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label05;

        $r19 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r22 = (org.codehaus.groovy.ast.FieldNode) $r19;

        $r20 = virtualinvoke r22.<org.codehaus.groovy.ast.FieldNode: java.lang.String getName()>();

        $z5 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>(r9);

        if $z5 == 0 goto label04;

        return r22;

     label04:
        goto label03;

     label05:
        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.util.List getMethods()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z6 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label09;

        $r15 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r23 = (org.codehaus.groovy.ast.MethodNode) $r15;

        virtualinvoke r23.<org.codehaus.groovy.ast.MethodNode: java.lang.String getName()>();

        $r16 = specialinvoke r7.<org.codehaus.groovy.classgen.VariableScopeVisitor: java.lang.String getPropertyName(org.codehaus.groovy.ast.MethodNode)>(r23);

        if $r16 != null goto label07;

        goto label06;

     label07:
        $z4 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>(r9);

        if $z4 != 0 goto label08;

        goto label06;

     label08:
        $r17 = new org.codehaus.groovy.ast.PropertyNode;

        $i0 = virtualinvoke r23.<org.codehaus.groovy.ast.MethodNode: int getModifiers()>();

        $r18 = specialinvoke r7.<org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.ast.ClassNode getPropertyType(org.codehaus.groovy.ast.MethodNode)>(r23);

        specialinvoke $r17.<org.codehaus.groovy.ast.PropertyNode: void <init>(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.stmt.Statement,org.codehaus.groovy.ast.stmt.Statement)>($r16, $i0, $r18, r0, null, null, null);

        return $r17;

     label09:
        $r5 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.util.List getProperties()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $z2 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label12;

        $r13 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r24 = (org.codehaus.groovy.ast.PropertyNode) $r13;

        $r14 = virtualinvoke r24.<org.codehaus.groovy.ast.PropertyNode: java.lang.String getName()>();

        $z3 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r9);

        if $z3 == 0 goto label11;

        return r24;

     label11:
        goto label10;

     label12:
        $r8 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getSuperClass()>();

        $r10 = specialinvoke r7.<org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.ast.Variable findClassMember(org.codehaus.groovy.ast.ClassNode,java.lang.String)>($r8, r9);

        if $r10 == null goto label13;

        return $r10;

     label13:
        $r11 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getOuterClass()>();

        $r12 = specialinvoke r7.<org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.ast.Variable findClassMember(org.codehaus.groovy.ast.ClassNode,java.lang.String)>($r11, r9);

        return $r12;
    }

    private org.codehaus.groovy.ast.ClassNode getPropertyType(org.codehaus.groovy.ast.MethodNode)
    {
        org.codehaus.groovy.classgen.VariableScopeVisitor r7;
        org.codehaus.groovy.ast.Parameter $r4;
        org.codehaus.groovy.ast.ClassNode $r1, $r2, $r5, $r6;
        org.codehaus.groovy.ast.Parameter[] $r3;
        org.codehaus.groovy.ast.MethodNode r0;

        r7 := @this: org.codehaus.groovy.classgen.VariableScopeVisitor;

        r0 := @parameter0: org.codehaus.groovy.ast.MethodNode;

        virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: java.lang.String getName()>();

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.ClassNode getReturnType()>();

        $r2 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode VOID_TYPE>;

        if $r1 == $r2 goto label1;

        $r6 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.ClassNode getReturnType()>();

        return $r6;

     label1:
        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.Parameter[] getParameters()>();

        $r4 = $r3[0];

        $r5 = virtualinvoke $r4.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.ClassNode getType()>();

        return $r5;
    }

    private java.lang.String getPropertyName(org.codehaus.groovy.ast.MethodNode)
    {
        org.codehaus.groovy.ast.MethodNode r0;
        java.lang.StringBuffer $r6, $r7, $r8;
        int $i0, $i1;
        java.lang.String $r1, $r2, $r3, $r4, $r5, $r9;
        boolean $z0, $z1, $z2, $z3;
        org.codehaus.groovy.classgen.VariableScopeVisitor r13;
        org.codehaus.groovy.ast.ClassNode $r11, $r12;
        org.codehaus.groovy.ast.Parameter[] $r10;

        r13 := @this: org.codehaus.groovy.classgen.VariableScopeVisitor;

        r0 := @parameter0: org.codehaus.groovy.ast.MethodNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("set");

        if $z0 != 0 goto label1;

        $z3 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("get");

        if $z3 != 0 goto label1;

        return null;

     label1:
        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>(3);

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

        return null;

     label2:
        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, 1);

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String toLowerCase()>();

        $r5 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>(1);

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        $z1 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("get");

        if $z1 == 0 goto label3;

        $r11 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.ClassNode getReturnType()>();

        $r12 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode VOID_TYPE>;

        if $r11 != $r12 goto label3;

        return null;

     label3:
        $z2 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("set");

        if $z2 == 0 goto label4;

        $r10 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.Parameter[] getParameters()>();

        $i1 = lengthof $r10;

        if $i1 == 1 goto label4;

        return null;

     label4:
        return $r9;
    }

    private org.codehaus.groovy.ast.Variable checkVariableNameForDeclaration(java.lang.String, org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.ast.Variable $r7, $r8, $r9, $r18, $r20, $r23, r26, $r29;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18;
        org.codehaus.groovy.ast.DynamicVariable $r4;
        org.codehaus.groovy.ast.VariableScope $r5, $r24, r25, r27, r30, r31;
        java.lang.StringBuffer $r11, $r12, $r14, $r15;
        java.lang.String r0, $r1, $r2, $r6, $r13, $r16, $r17, $r19, $r22, $r28;
        org.codehaus.groovy.ast.expr.Expression r10;
        org.codehaus.groovy.classgen.VariableScopeVisitor r3;
        org.codehaus.groovy.ast.ClassNode $r21;

        r3 := @this: org.codehaus.groovy.classgen.VariableScopeVisitor;

        r0 := @parameter0: java.lang.String;

        r10 := @parameter1: org.codehaus.groovy.ast.expr.Expression;

        $r1 = "super";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 != 0 goto label01;

        $r2 = "this";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label02;

     label01:
        return null;

     label02:
        r25 = r3.<org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.ast.VariableScope currentScope>;

        $r4 = new org.codehaus.groovy.ast.DynamicVariable;

        $r5 = r3.<org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.ast.VariableScope currentScope>;

        $z2 = virtualinvoke $r5.<org.codehaus.groovy.ast.VariableScope: boolean isInStaticContext()>();

        specialinvoke $r4.<org.codehaus.groovy.ast.DynamicVariable: void <init>(java.lang.String,boolean)>(r0, $z2);

        r26 = $r4;

        r27 = null;

     label03:
        $z3 = virtualinvoke r25.<org.codehaus.groovy.ast.VariableScope: boolean isRoot()>();

        if $z3 != 0 goto label14;

        if r27 != null goto label04;

        $z14 = virtualinvoke r25.<org.codehaus.groovy.ast.VariableScope: boolean isResolvingDynamic()>();

        if $z14 == 0 goto label04;

        r27 = r25;

     label04:
        $r28 = interfaceinvoke $r4.<org.codehaus.groovy.ast.Variable: java.lang.String getName()>();

        $r29 = virtualinvoke r25.<org.codehaus.groovy.ast.VariableScope: org.codehaus.groovy.ast.Variable getDeclaredVariable(java.lang.String)>($r28);

        if $r29 == null goto label05;

        r26 = $r29;

        goto label14;

     label05:
        $r17 = interfaceinvoke $r4.<org.codehaus.groovy.ast.Variable: java.lang.String getName()>();

        $r18 = virtualinvoke r25.<org.codehaus.groovy.ast.VariableScope: org.codehaus.groovy.ast.Variable getReferencedLocalVariable(java.lang.String)>($r17);

        if $r18 == null goto label06;

        r26 = $r18;

        goto label14;

     label06:
        $r19 = interfaceinvoke $r4.<org.codehaus.groovy.ast.Variable: java.lang.String getName()>();

        $r20 = virtualinvoke r25.<org.codehaus.groovy.ast.VariableScope: org.codehaus.groovy.ast.Variable getReferencedClassVariable(java.lang.String)>($r19);

        if $r20 == null goto label07;

        r26 = $r20;

        goto label14;

     label07:
        $r21 = virtualinvoke r25.<org.codehaus.groovy.ast.VariableScope: org.codehaus.groovy.ast.ClassNode getClassScope()>();

        if $r21 == null goto label13;

        $r22 = interfaceinvoke $r4.<org.codehaus.groovy.ast.Variable: java.lang.String getName()>();

        $r23 = specialinvoke r3.<org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.ast.Variable findClassMember(org.codehaus.groovy.ast.ClassNode,java.lang.String)>($r21, $r22);

        if $r23 == null goto label14;

        $r24 = r3.<org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.ast.VariableScope currentScope>;

        $z11 = virtualinvoke $r24.<org.codehaus.groovy.ast.VariableScope: boolean isInStaticContext()>();

        if $z11 != 0 goto label08;

        $z13 = r3.<org.codehaus.groovy.classgen.VariableScopeVisitor: boolean isSpecialConstructorCall>;

        if $z13 == 0 goto label09;

     label08:
        $z15 = 1;

        goto label10;

     label09:
        $z15 = 0;

     label10:
        $z12 = interfaceinvoke $r23.<org.codehaus.groovy.ast.Variable: boolean isInStaticContext()>();

        if $z12 != 0 goto label11;

        if $z12 != $z15 goto label12;

     label11:
        r26 = $r23;

     label12:
        goto label14;

     label13:
        r25 = virtualinvoke r25.<org.codehaus.groovy.ast.VariableScope: org.codehaus.groovy.ast.VariableScope getParent()>();

        goto label03;

     label14:
        r30 = r25;

        $z16 = virtualinvoke r25.<org.codehaus.groovy.ast.VariableScope: boolean isRoot()>();

        if $z16 == 0 goto label15;

        if r27 != null goto label15;

        specialinvoke r3.<org.codehaus.groovy.classgen.VariableScopeVisitor: void declare(org.codehaus.groovy.ast.Variable,org.codehaus.groovy.ast.ASTNode)>(r26, r10);

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The variable ");

        $r13 = interfaceinvoke r26.<org.codehaus.groovy.ast.Variable: java.lang.String getName()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is undefined in the current scope");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r3.<org.codehaus.groovy.classgen.VariableScopeVisitor: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r16, r10);

        goto label16;

     label15:
        $z4 = virtualinvoke r25.<org.codehaus.groovy.ast.VariableScope: boolean isRoot()>();

        if $z4 == 0 goto label16;

        if r27 == null goto label16;

        r25 = r27;

     label16:
        $z17 = virtualinvoke r25.<org.codehaus.groovy.ast.VariableScope: boolean isRoot()>();

        if $z17 != 0 goto label25;

        r31 = r3.<org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.ast.VariableScope currentScope>;

     label17:
        if r31 == r30 goto label24;

        $z6 = virtualinvoke r30.<org.codehaus.groovy.ast.VariableScope: boolean isClassScope()>();

        if $z6 != 0 goto label18;

        $z7 = virtualinvoke r30.<org.codehaus.groovy.ast.VariableScope: boolean isRoot()>();

        if $z7 != 0 goto label18;

        $z8 = virtualinvoke r30.<org.codehaus.groovy.ast.VariableScope: boolean isReferencedClassVariable(java.lang.String)>(r0);

        if $z8 == 0 goto label19;

        $r9 = virtualinvoke r30.<org.codehaus.groovy.ast.VariableScope: org.codehaus.groovy.ast.Variable getDeclaredVariable(java.lang.String)>(r0);

        if $r9 != null goto label19;

     label18:
        virtualinvoke r31.<org.codehaus.groovy.ast.VariableScope: void putReferencedClassVariable(org.codehaus.groovy.ast.Variable)>(r26);

        goto label23;

     label19:
        $r8 = r26;

        $z9 = interfaceinvoke r26.<org.codehaus.groovy.ast.Variable: boolean isClosureSharedVariable()>();

        if $z9 != 0 goto label20;

        $z10 = r3.<org.codehaus.groovy.classgen.VariableScopeVisitor: boolean inClosure>;

        if $z10 == 0 goto label21;

     label20:
        $z18 = 1;

        goto label22;

     label21:
        $z18 = 0;

     label22:
        interfaceinvoke $r8.<org.codehaus.groovy.ast.Variable: void setClosureSharedVariable(boolean)>($z18);

        virtualinvoke r31.<org.codehaus.groovy.ast.VariableScope: void putReferencedLocalVariable(org.codehaus.groovy.ast.Variable)>(r26);

     label23:
        r31 = virtualinvoke r31.<org.codehaus.groovy.ast.VariableScope: org.codehaus.groovy.ast.VariableScope getParent()>();

        goto label17;

     label24:
        $z5 = virtualinvoke r30.<org.codehaus.groovy.ast.VariableScope: boolean isResolvingDynamic()>();

        if $z5 == 0 goto label25;

        $r6 = interfaceinvoke r26.<org.codehaus.groovy.ast.Variable: java.lang.String getName()>();

        $r7 = virtualinvoke r30.<org.codehaus.groovy.ast.VariableScope: org.codehaus.groovy.ast.Variable getDeclaredVariable(java.lang.String)>($r6);

        if $r7 != null goto label25;

        virtualinvoke r30.<org.codehaus.groovy.ast.VariableScope: void putDeclaredVariable(org.codehaus.groovy.ast.Variable)>(r26);

     label25:
        return r26;
    }

    private void checkPropertyOnExplicitThis(org.codehaus.groovy.ast.expr.PropertyExpression)
    {
        org.codehaus.groovy.classgen.VariableScopeVisitor r0;
        org.codehaus.groovy.ast.VariableScope $r1;
        org.codehaus.groovy.ast.expr.PropertyExpression r2;
        org.codehaus.groovy.ast.expr.VariableExpression r4;
        org.codehaus.groovy.ast.ClassNode $r7;
        org.codehaus.groovy.ast.Variable $r8;
        org.codehaus.groovy.ast.expr.Expression $r3;
        java.lang.String $r5, $r6;
        boolean $z0, $z1, $z2;

        r0 := @this: org.codehaus.groovy.classgen.VariableScopeVisitor;

        r2 := @parameter0: org.codehaus.groovy.ast.expr.PropertyExpression;

        $r1 = r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.ast.VariableScope currentScope>;

        $z0 = virtualinvoke $r1.<org.codehaus.groovy.ast.VariableScope: boolean isInStaticContext()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = virtualinvoke r2.<org.codehaus.groovy.ast.expr.PropertyExpression: org.codehaus.groovy.ast.expr.Expression getObjectExpression()>();

        $z1 = $r3 instanceof org.codehaus.groovy.ast.expr.VariableExpression;

        if $z1 != 0 goto label2;

        return;

     label2:
        r4 = (org.codehaus.groovy.ast.expr.VariableExpression) $r3;

        $r5 = virtualinvoke r4.<org.codehaus.groovy.ast.expr.VariableExpression: java.lang.String getName()>();

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("this");

        if $z2 != 0 goto label3;

        return;

     label3:
        $r6 = virtualinvoke r2.<org.codehaus.groovy.ast.expr.PropertyExpression: java.lang.String getPropertyAsString()>();

        if $r6 != null goto label4;

        return;

     label4:
        $r7 = r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.ast.ClassNode currentClass>;

        $r8 = specialinvoke r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.ast.Variable findClassMember(org.codehaus.groovy.ast.ClassNode,java.lang.String)>($r7, $r6);

        if $r8 != null goto label5;

        return;

     label5:
        specialinvoke r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: void checkVariableContextAccess(org.codehaus.groovy.ast.Variable,org.codehaus.groovy.ast.expr.Expression)>($r8, r2);

        return;
    }

    private void checkVariableContextAccess(org.codehaus.groovy.ast.Variable, org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.ast.VariableScope $r2, $r12, $r13;
        org.codehaus.groovy.ast.Variable r1;
        java.lang.StringBuffer $r3, $r5, $r6, $r7;
        java.lang.String $r4, $r8, $r11;
        org.codehaus.groovy.ast.expr.Expression r9;
        boolean $z0, $z1, $z2, $z3;
        org.codehaus.groovy.classgen.VariableScopeVisitor r0;
        org.codehaus.groovy.ast.DynamicVariable $r10;

        r0 := @this: org.codehaus.groovy.classgen.VariableScopeVisitor;

        r1 := @parameter0: org.codehaus.groovy.ast.Variable;

        r9 := @parameter1: org.codehaus.groovy.ast.expr.Expression;

        $z0 = r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: boolean inPropertyExpression>;

        if $z0 != 0 goto label1;

        $z1 = interfaceinvoke r1.<org.codehaus.groovy.ast.Variable: boolean isInStaticContext()>();

        if $z1 != 0 goto label1;

        $r2 = r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.ast.VariableScope currentScope>;

        $z2 = virtualinvoke $r2.<org.codehaus.groovy.ast.VariableScope: boolean isInStaticContext()>();

        if $z2 != 0 goto label2;

     label1:
        return;

     label2:
        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = interfaceinvoke r1.<org.codehaus.groovy.ast.Variable: java.lang.String getName()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is declared in a dynamic context, but you tried to");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" access it from a static context.");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r8, r9);

        $r10 = new org.codehaus.groovy.ast.DynamicVariable;

        $r11 = interfaceinvoke r1.<org.codehaus.groovy.ast.Variable: java.lang.String getName()>();

        $r12 = r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.ast.VariableScope currentScope>;

        $z3 = virtualinvoke $r12.<org.codehaus.groovy.ast.VariableScope: boolean isInStaticContext()>();

        specialinvoke $r10.<org.codehaus.groovy.ast.DynamicVariable: void <init>(java.lang.String,boolean)>($r11, $z3);

        $r13 = r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.ast.VariableScope currentScope>;

        virtualinvoke $r13.<org.codehaus.groovy.ast.VariableScope: void putDeclaredVariable(org.codehaus.groovy.ast.Variable)>($r10);

        return;
    }

    public void visitBlockStatement(org.codehaus.groovy.ast.stmt.BlockStatement)
    {
        org.codehaus.groovy.classgen.VariableScopeVisitor r0;
        org.codehaus.groovy.ast.VariableScope $r2;
        org.codehaus.groovy.ast.stmt.BlockStatement r1;

        r0 := @this: org.codehaus.groovy.classgen.VariableScopeVisitor;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.BlockStatement;

        specialinvoke r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: void pushState()>();

        $r2 = r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.ast.VariableScope currentScope>;

        virtualinvoke r1.<org.codehaus.groovy.ast.stmt.BlockStatement: void setVariableScope(org.codehaus.groovy.ast.VariableScope)>($r2);

        specialinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitBlockStatement(org.codehaus.groovy.ast.stmt.BlockStatement)>(r1);

        specialinvoke r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: void popState()>();

        return;
    }

    public void visitForLoop(org.codehaus.groovy.ast.stmt.ForStatement)
    {
        org.codehaus.groovy.classgen.VariableScopeVisitor r0;
        org.codehaus.groovy.ast.VariableScope $r2, $r4;
        org.codehaus.groovy.ast.Parameter $r3, $r5;
        org.codehaus.groovy.ast.stmt.ForStatement r1;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.classgen.VariableScopeVisitor;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.ForStatement;

        specialinvoke r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: void pushState()>();

        $r2 = r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.ast.VariableScope currentScope>;

        virtualinvoke r1.<org.codehaus.groovy.ast.stmt.ForStatement: void setVariableScope(org.codehaus.groovy.ast.VariableScope)>($r2);

        $r3 = virtualinvoke r1.<org.codehaus.groovy.ast.stmt.ForStatement: org.codehaus.groovy.ast.Parameter getVariable()>();

        $r4 = r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.ast.VariableScope currentScope>;

        $z0 = virtualinvoke $r4.<org.codehaus.groovy.ast.VariableScope: boolean isInStaticContext()>();

        virtualinvoke $r3.<org.codehaus.groovy.ast.Parameter: void setInStaticContext(boolean)>($z0);

        $r5 = <org.codehaus.groovy.ast.stmt.ForStatement: org.codehaus.groovy.ast.Parameter FOR_LOOP_DUMMY>;

        if $r3 == $r5 goto label1;

        specialinvoke r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: void declare(org.codehaus.groovy.ast.Variable,org.codehaus.groovy.ast.ASTNode)>($r3, r1);

     label1:
        specialinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitForLoop(org.codehaus.groovy.ast.stmt.ForStatement)>(r1);

        specialinvoke r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: void popState()>();

        return;
    }

    public void visitDeclarationExpression(org.codehaus.groovy.ast.expr.DeclarationExpression)
    {
        org.codehaus.groovy.classgen.VariableScopeVisitor r2;
        org.codehaus.groovy.ast.VariableScope $r4;
        org.codehaus.groovy.ast.expr.VariableExpression $r3;
        org.codehaus.groovy.ast.expr.Expression $r1;
        org.codehaus.groovy.ast.expr.DeclarationExpression r0;
        boolean $z0;

        r2 := @this: org.codehaus.groovy.classgen.VariableScopeVisitor;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.DeclarationExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.DeclarationExpression: org.codehaus.groovy.ast.expr.Expression getRightExpression()>();

        virtualinvoke $r1.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.DeclarationExpression: org.codehaus.groovy.ast.expr.VariableExpression getVariableExpression()>();

        $r4 = r2.<org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.ast.VariableScope currentScope>;

        $z0 = virtualinvoke $r4.<org.codehaus.groovy.ast.VariableScope: boolean isInStaticContext()>();

        virtualinvoke $r3.<org.codehaus.groovy.ast.expr.VariableExpression: void setInStaticContext(boolean)>($z0);

        specialinvoke r2.<org.codehaus.groovy.classgen.VariableScopeVisitor: void declare(org.codehaus.groovy.ast.expr.VariableExpression)>($r3);

        virtualinvoke $r3.<org.codehaus.groovy.ast.expr.VariableExpression: void setAccessedVariable(org.codehaus.groovy.ast.Variable)>($r3);

        return;
    }

    public void visitVariableExpression(org.codehaus.groovy.ast.expr.VariableExpression)
    {
        org.codehaus.groovy.classgen.VariableScopeVisitor r2;
        org.codehaus.groovy.ast.Variable $r3;
        org.codehaus.groovy.ast.expr.VariableExpression r0;
        java.lang.String $r1;

        r2 := @this: org.codehaus.groovy.classgen.VariableScopeVisitor;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.VariableExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.VariableExpression: java.lang.String getName()>();

        $r3 = specialinvoke r2.<org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.ast.Variable checkVariableNameForDeclaration(java.lang.String,org.codehaus.groovy.ast.expr.Expression)>($r1, r0);

        if $r3 != null goto label1;

        return;

     label1:
        virtualinvoke r0.<org.codehaus.groovy.ast.expr.VariableExpression: void setAccessedVariable(org.codehaus.groovy.ast.Variable)>($r3);

        specialinvoke r2.<org.codehaus.groovy.classgen.VariableScopeVisitor: void checkVariableContextAccess(org.codehaus.groovy.ast.Variable,org.codehaus.groovy.ast.expr.Expression)>($r3, r0);

        return;
    }

    public void visitPropertyExpression(org.codehaus.groovy.ast.expr.PropertyExpression)
    {
        org.codehaus.groovy.classgen.VariableScopeVisitor r0;
        org.codehaus.groovy.ast.expr.PropertyExpression r1;
        org.codehaus.groovy.ast.expr.Expression $r2, $r3;
        boolean z0;

        r0 := @this: org.codehaus.groovy.classgen.VariableScopeVisitor;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.PropertyExpression;

        z0 = r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: boolean inPropertyExpression>;

        r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: boolean inPropertyExpression> = 1;

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.PropertyExpression: org.codehaus.groovy.ast.expr.Expression getObjectExpression()>();

        virtualinvoke $r2.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r0);

        r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: boolean inPropertyExpression> = 0;

        $r3 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.PropertyExpression: org.codehaus.groovy.ast.expr.Expression getProperty()>();

        virtualinvoke $r3.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r0);

        specialinvoke r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: void checkPropertyOnExplicitThis(org.codehaus.groovy.ast.expr.PropertyExpression)>(r1);

        r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: boolean inPropertyExpression> = z0;

        return;
    }

    public void visitClosureExpression(org.codehaus.groovy.ast.expr.ClosureExpression)
    {
        org.codehaus.groovy.ast.VariableScope $r1, $r3, $r7, $r8, $r10;
        int $i0, i1;
        org.codehaus.groovy.ast.expr.Expression $r15;
        boolean $z0, $z1, $z2, $z3;
        org.codehaus.groovy.classgen.VariableScopeVisitor r0;
        org.codehaus.groovy.ast.Parameter $r5, $r11, $r12, $r13, $r14;
        org.codehaus.groovy.ast.ClassNode $r6;
        org.codehaus.groovy.ast.expr.ClosureExpression r2;
        org.codehaus.groovy.ast.Parameter[] $r4, $r9;

        r0 := @this: org.codehaus.groovy.classgen.VariableScopeVisitor;

        r2 := @parameter0: org.codehaus.groovy.ast.expr.ClosureExpression;

        specialinvoke r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: void pushState()>();

        r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: boolean inClosure> = 1;

        $r1 = r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.ast.VariableScope currentScope>;

        virtualinvoke $r1.<org.codehaus.groovy.ast.VariableScope: void setDynamicResolving(boolean)>(1);

        $r3 = r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.ast.VariableScope currentScope>;

        virtualinvoke r2.<org.codehaus.groovy.ast.expr.ClosureExpression: void setVariableScope(org.codehaus.groovy.ast.VariableScope)>($r3);

        $z0 = virtualinvoke r2.<org.codehaus.groovy.ast.expr.ClosureExpression: boolean isParameterSpecified()>();

        if $z0 == 0 goto label4;

        $r9 = virtualinvoke r2.<org.codehaus.groovy.ast.expr.ClosureExpression: org.codehaus.groovy.ast.Parameter[] getParameters()>();

        i1 = 0;

     label1:
        $i0 = lengthof $r9;

        if i1 >= $i0 goto label3;

        $r11 = $r9[i1];

        $r10 = r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.ast.VariableScope currentScope>;

        $z2 = virtualinvoke $r10.<org.codehaus.groovy.ast.VariableScope: boolean isInStaticContext()>();

        virtualinvoke $r11.<org.codehaus.groovy.ast.Parameter: void setInStaticContext(boolean)>($z2);

        $r12 = $r9[i1];

        $z3 = virtualinvoke $r12.<org.codehaus.groovy.ast.Parameter: boolean hasInitialExpression()>();

        if $z3 == 0 goto label2;

        $r14 = $r9[i1];

        $r15 = virtualinvoke $r14.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.expr.Expression getInitialExpression()>();

        virtualinvoke $r15.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r0);

     label2:
        $r13 = $r9[i1];

        specialinvoke r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: void declare(org.codehaus.groovy.ast.Variable,org.codehaus.groovy.ast.ASTNode)>($r13, r2);

        i1 = i1 + 1;

        goto label1;

     label3:
        goto label5;

     label4:
        $r4 = virtualinvoke r2.<org.codehaus.groovy.ast.expr.ClosureExpression: org.codehaus.groovy.ast.Parameter[] getParameters()>();

        if $r4 == null goto label5;

        $r5 = new org.codehaus.groovy.ast.Parameter;

        $r6 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode OBJECT_TYPE>;

        specialinvoke $r5.<org.codehaus.groovy.ast.Parameter: void <init>(org.codehaus.groovy.ast.ClassNode,java.lang.String)>($r6, "it");

        $r7 = r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.ast.VariableScope currentScope>;

        $z1 = virtualinvoke $r7.<org.codehaus.groovy.ast.VariableScope: boolean isInStaticContext()>();

        virtualinvoke $r5.<org.codehaus.groovy.ast.Parameter: void setInStaticContext(boolean)>($z1);

        $r8 = r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.ast.VariableScope currentScope>;

        virtualinvoke $r8.<org.codehaus.groovy.ast.VariableScope: void putDeclaredVariable(org.codehaus.groovy.ast.Variable)>($r5);

     label5:
        specialinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitClosureExpression(org.codehaus.groovy.ast.expr.ClosureExpression)>(r2);

        specialinvoke r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: void popState()>();

        return;
    }

    public void visitCatchStatement(org.codehaus.groovy.ast.stmt.CatchStatement)
    {
        org.codehaus.groovy.classgen.VariableScopeVisitor r0;
        org.codehaus.groovy.ast.VariableScope $r3;
        org.codehaus.groovy.ast.Parameter $r2;
        org.codehaus.groovy.ast.stmt.CatchStatement r1;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.classgen.VariableScopeVisitor;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.CatchStatement;

        specialinvoke r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: void pushState()>();

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.stmt.CatchStatement: org.codehaus.groovy.ast.Parameter getVariable()>();

        $r3 = r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.ast.VariableScope currentScope>;

        $z0 = virtualinvoke $r3.<org.codehaus.groovy.ast.VariableScope: boolean isInStaticContext()>();

        virtualinvoke $r2.<org.codehaus.groovy.ast.Parameter: void setInStaticContext(boolean)>($z0);

        specialinvoke r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: void declare(org.codehaus.groovy.ast.Variable,org.codehaus.groovy.ast.ASTNode)>($r2, r1);

        specialinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitCatchStatement(org.codehaus.groovy.ast.stmt.CatchStatement)>(r1);

        specialinvoke r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: void popState()>();

        return;
    }

    public void visitFieldExpression(org.codehaus.groovy.ast.expr.FieldExpression)
    {
        org.codehaus.groovy.classgen.VariableScopeVisitor r2;
        org.codehaus.groovy.ast.Variable $r3;
        org.codehaus.groovy.ast.expr.FieldExpression r0;
        java.lang.String $r1;

        r2 := @this: org.codehaus.groovy.classgen.VariableScopeVisitor;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.FieldExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.FieldExpression: java.lang.String getFieldName()>();

        $r3 = specialinvoke r2.<org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.ast.Variable checkVariableNameForDeclaration(java.lang.String,org.codehaus.groovy.ast.expr.Expression)>($r1, r0);

        specialinvoke r2.<org.codehaus.groovy.classgen.VariableScopeVisitor: void checkVariableContextAccess(org.codehaus.groovy.ast.Variable,org.codehaus.groovy.ast.expr.Expression)>($r3, r0);

        return;
    }

    public void visitClass(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.classgen.VariableScopeVisitor r0;
        org.codehaus.groovy.ast.VariableScope $r2, $r3;
        org.codehaus.groovy.ast.ClassNode r1;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.classgen.VariableScopeVisitor;

        r1 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        specialinvoke r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: void pushState()>();

        r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.ast.ClassNode currentClass> = r1;

        $z0 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: boolean isScript()>();

        $r2 = r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.ast.VariableScope currentScope>;

        virtualinvoke $r2.<org.codehaus.groovy.ast.VariableScope: void setDynamicResolving(boolean)>($z0);

        $r3 = r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.ast.VariableScope currentScope>;

        virtualinvoke $r3.<org.codehaus.groovy.ast.VariableScope: void setClassScope(org.codehaus.groovy.ast.ClassNode)>(r1);

        specialinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitClass(org.codehaus.groovy.ast.ClassNode)>(r1);

        specialinvoke r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: void popState()>();

        return;
    }

    protected void visitConstructorOrMethod(org.codehaus.groovy.ast.MethodNode, boolean)
    {
        org.codehaus.groovy.classgen.VariableScopeVisitor r0;
        org.codehaus.groovy.ast.VariableScope $r2;
        org.codehaus.groovy.ast.Parameter r5;
        org.codehaus.groovy.ast.Parameter[] $r3, $r4;
        org.codehaus.groovy.ast.MethodNode r1;
        int $i0, i1;
        boolean $z0, z1;

        r0 := @this: org.codehaus.groovy.classgen.VariableScopeVisitor;

        r1 := @parameter0: org.codehaus.groovy.ast.MethodNode;

        z1 := @parameter1: boolean;

        $z0 = virtualinvoke r1.<org.codehaus.groovy.ast.MethodNode: boolean isStatic()>();

        specialinvoke r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: void pushState(boolean)>($z0);

        $r2 = r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.ast.VariableScope currentScope>;

        virtualinvoke r1.<org.codehaus.groovy.ast.MethodNode: void setVariableScope(org.codehaus.groovy.ast.VariableScope)>($r2);

        $r3 = virtualinvoke r1.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.Parameter[] getParameters()>();

        i1 = 0;

     label1:
        $i0 = lengthof $r3;

        if i1 >= $i0 goto label2;

        r5 = $r3[i1];

        virtualinvoke r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: void visitAnnotations(org.codehaus.groovy.ast.AnnotatedNode)>(r5);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r4 = virtualinvoke r1.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.Parameter[] getParameters()>();

        specialinvoke r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: void declare(org.codehaus.groovy.ast.Parameter[],org.codehaus.groovy.ast.ASTNode)>($r4, r1);

        specialinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitConstructorOrMethod(org.codehaus.groovy.ast.MethodNode,boolean)>(r1, z1);

        specialinvoke r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: void popState()>();

        return;
    }

    public void visitMethodCallExpression(org.codehaus.groovy.ast.expr.MethodCallExpression)
    {
        org.codehaus.groovy.ast.expr.ConstantExpression r4;
        org.codehaus.groovy.ast.Variable $r7;
        org.codehaus.groovy.ast.expr.MethodCallExpression r0;
        org.codehaus.groovy.ast.expr.Expression $r2, $r3, $r9;
        java.lang.String $r5, r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.codehaus.groovy.classgen.VariableScopeVisitor r1;
        org.codehaus.groovy.ast.expr.VariableExpression $r8;
        org.codehaus.groovy.GroovyBugError $r10;

        r1 := @this: org.codehaus.groovy.classgen.VariableScopeVisitor;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.MethodCallExpression;

        $z0 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: boolean isImplicitThis()>();

        if $z0 == 0 goto label4;

        $r2 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression getMethod()>();

        $z1 = $r2 instanceof org.codehaus.groovy.ast.expr.ConstantExpression;

        if $z1 == 0 goto label4;

        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression getMethod()>();

        r4 = (org.codehaus.groovy.ast.expr.ConstantExpression) $r3;

        $r5 = virtualinvoke r4.<org.codehaus.groovy.ast.expr.ConstantExpression: java.lang.String getText()>();

        $z2 = $r5 instanceof java.lang.String;

        if $z2 != 0 goto label1;

        $r10 = new org.codehaus.groovy.GroovyBugError;

        specialinvoke $r10.<org.codehaus.groovy.GroovyBugError: void <init>(java.lang.String)>("tried to make a method call with a non-String constant method name.");

        throw $r10;

     label1:
        r6 = (java.lang.String) $r5;

        $r7 = specialinvoke r1.<org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.ast.Variable checkVariableNameForDeclaration(java.lang.String,org.codehaus.groovy.ast.expr.Expression)>(r6, r0);

        if $r7 == null goto label2;

        $z4 = $r7 instanceof org.codehaus.groovy.ast.DynamicVariable;

        if $z4 != 0 goto label2;

        specialinvoke r1.<org.codehaus.groovy.classgen.VariableScopeVisitor: void checkVariableContextAccess(org.codehaus.groovy.ast.Variable,org.codehaus.groovy.ast.expr.Expression)>($r7, r0);

     label2:
        $z5 = $r7 instanceof org.codehaus.groovy.ast.expr.VariableExpression;

        if $z5 != 0 goto label3;

        $z3 = $r7 instanceof org.codehaus.groovy.ast.Parameter;

        if $z3 == 0 goto label4;

     label3:
        $r8 = new org.codehaus.groovy.ast.expr.VariableExpression;

        specialinvoke $r8.<org.codehaus.groovy.ast.expr.VariableExpression: void <init>(org.codehaus.groovy.ast.Variable)>($r7);

        virtualinvoke $r8.<org.codehaus.groovy.ast.expr.VariableExpression: void setSourcePosition(org.codehaus.groovy.ast.ASTNode)>(r4);

        virtualinvoke r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: void setObjectExpression(org.codehaus.groovy.ast.expr.Expression)>($r8);

        $r9 = <org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.ast.expr.Expression CALL>;

        virtualinvoke r0.<org.codehaus.groovy.ast.expr.MethodCallExpression: void setMethod(org.codehaus.groovy.ast.expr.Expression)>($r9);

     label4:
        specialinvoke r1.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitMethodCallExpression(org.codehaus.groovy.ast.expr.MethodCallExpression)>(r0);

        return;
    }

    public void visitConstructorCallExpression(org.codehaus.groovy.ast.expr.ConstructorCallExpression)
    {
        org.codehaus.groovy.classgen.VariableScopeVisitor r0;
        org.codehaus.groovy.ast.expr.ConstructorCallExpression r1;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.classgen.VariableScopeVisitor;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.ConstructorCallExpression;

        $z0 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.ConstructorCallExpression: boolean isSpecialCall()>();

        r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: boolean isSpecialConstructorCall> = $z0;

        specialinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitConstructorCallExpression(org.codehaus.groovy.ast.expr.ConstructorCallExpression)>(r1);

        r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: boolean isSpecialConstructorCall> = 0;

        return;
    }

    public void visitProperty(org.codehaus.groovy.ast.PropertyNode)
    {
        org.codehaus.groovy.classgen.VariableScopeVisitor r0;
        org.codehaus.groovy.ast.PropertyNode r1;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.classgen.VariableScopeVisitor;

        r1 := @parameter0: org.codehaus.groovy.ast.PropertyNode;

        $z0 = virtualinvoke r1.<org.codehaus.groovy.ast.PropertyNode: boolean isStatic()>();

        specialinvoke r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: void pushState(boolean)>($z0);

        specialinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitProperty(org.codehaus.groovy.ast.PropertyNode)>(r1);

        specialinvoke r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: void popState()>();

        return;
    }

    public void visitField(org.codehaus.groovy.ast.FieldNode)
    {
        org.codehaus.groovy.classgen.VariableScopeVisitor r0;
        org.codehaus.groovy.ast.FieldNode r1;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.classgen.VariableScopeVisitor;

        r1 := @parameter0: org.codehaus.groovy.ast.FieldNode;

        $z0 = virtualinvoke r1.<org.codehaus.groovy.ast.FieldNode: boolean isStatic()>();

        specialinvoke r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: void pushState(boolean)>($z0);

        specialinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitField(org.codehaus.groovy.ast.FieldNode)>(r1);

        specialinvoke r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: void popState()>();

        return;
    }

    static org.codehaus.groovy.ast.VariableScope access$000(org.codehaus.groovy.classgen.VariableScopeVisitor)
    {
        org.codehaus.groovy.classgen.VariableScopeVisitor r0;
        org.codehaus.groovy.ast.VariableScope $r1;

        r0 := @parameter0: org.codehaus.groovy.classgen.VariableScopeVisitor;

        $r1 = r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.ast.VariableScope currentScope>;

        return $r1;
    }

    static org.codehaus.groovy.ast.ClassNode access$100(org.codehaus.groovy.classgen.VariableScopeVisitor)
    {
        org.codehaus.groovy.classgen.VariableScopeVisitor r0;
        org.codehaus.groovy.ast.ClassNode $r1;

        r0 := @parameter0: org.codehaus.groovy.classgen.VariableScopeVisitor;

        $r1 = r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.ast.ClassNode currentClass>;

        return $r1;
    }

    static boolean access$200(org.codehaus.groovy.classgen.VariableScopeVisitor)
    {
        org.codehaus.groovy.classgen.VariableScopeVisitor r0;
        boolean $z0;

        r0 := @parameter0: org.codehaus.groovy.classgen.VariableScopeVisitor;

        $z0 = r0.<org.codehaus.groovy.classgen.VariableScopeVisitor: boolean inClosure>;

        return $z0;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        org.codehaus.groovy.ast.expr.ConstantExpression $r0;

        $r0 = new org.codehaus.groovy.ast.expr.ConstantExpression;

        specialinvoke $r0.<org.codehaus.groovy.ast.expr.ConstantExpression: void <init>(java.lang.Object)>("call");

        <org.codehaus.groovy.classgen.VariableScopeVisitor: org.codehaus.groovy.ast.expr.Expression CALL> = $r0;

        return;
    }
}
