public final class com.sun.xml.bind.v2.runtime.unmarshaller.IntArrayData extends com.sun.xml.bind.v2.runtime.output.Pcdata
{
    private int[] data;
    private int start;
    private int len;
    private java.lang.StringBuilder literal;

    public void <init>(int[], int, int)
    {
        com.sun.xml.bind.v2.runtime.unmarshaller.IntArrayData r0;
        int[] r1;
        int i0, i1;

        r0 := @this: com.sun.xml.bind.v2.runtime.unmarshaller.IntArrayData;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<com.sun.xml.bind.v2.runtime.output.Pcdata: void <init>()>();

        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.unmarshaller.IntArrayData: void set(int[],int,int)>(r1, i0, i1);

        return;
    }

    public void <init>()
    {
        com.sun.xml.bind.v2.runtime.unmarshaller.IntArrayData r0;

        r0 := @this: com.sun.xml.bind.v2.runtime.unmarshaller.IntArrayData;

        specialinvoke r0.<com.sun.xml.bind.v2.runtime.output.Pcdata: void <init>()>();

        return;
    }

    public void set(int[], int, int)
    {
        com.sun.xml.bind.v2.runtime.unmarshaller.IntArrayData r0;
        int[] r1;
        int i0, i1;

        r0 := @this: com.sun.xml.bind.v2.runtime.unmarshaller.IntArrayData;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r0.<com.sun.xml.bind.v2.runtime.unmarshaller.IntArrayData: int[] data> = r1;

        r0.<com.sun.xml.bind.v2.runtime.unmarshaller.IntArrayData: int start> = i0;

        r0.<com.sun.xml.bind.v2.runtime.unmarshaller.IntArrayData: int len> = i1;

        r0.<com.sun.xml.bind.v2.runtime.unmarshaller.IntArrayData: java.lang.StringBuilder literal> = null;

        return;
    }

    public int length()
    {
        int $i0;
        com.sun.xml.bind.v2.runtime.unmarshaller.IntArrayData r0;
        java.lang.StringBuilder $r1;

        r0 := @this: com.sun.xml.bind.v2.runtime.unmarshaller.IntArrayData;

        $r1 = specialinvoke r0.<com.sun.xml.bind.v2.runtime.unmarshaller.IntArrayData: java.lang.StringBuilder getLiteral()>();

        $i0 = virtualinvoke $r1.<java.lang.StringBuilder: int length()>();

        return $i0;
    }

    public char charAt(int)
    {
        com.sun.xml.bind.v2.runtime.unmarshaller.IntArrayData r0;
        int i0;
        java.lang.StringBuilder $r1;
        char $c1;

        r0 := @this: com.sun.xml.bind.v2.runtime.unmarshaller.IntArrayData;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<com.sun.xml.bind.v2.runtime.unmarshaller.IntArrayData: java.lang.StringBuilder getLiteral()>();

        $c1 = virtualinvoke $r1.<java.lang.StringBuilder: char charAt(int)>(i0);

        return $c1;
    }

    public java.lang.CharSequence subSequence(int, int)
    {
        com.sun.xml.bind.v2.runtime.unmarshaller.IntArrayData r0;
        java.lang.CharSequence $r2;
        int i0, i1;
        java.lang.StringBuilder $r1;

        r0 := @this: com.sun.xml.bind.v2.runtime.unmarshaller.IntArrayData;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = specialinvoke r0.<com.sun.xml.bind.v2.runtime.unmarshaller.IntArrayData: java.lang.StringBuilder getLiteral()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.CharSequence subSequence(int,int)>(i0, i1);

        return $r2;
    }

    private java.lang.StringBuilder getLiteral()
    {
        com.sun.xml.bind.v2.runtime.unmarshaller.IntArrayData r0;
        int[] $r5;
        int $i0, $i1, $i2, i3, i4, $i6;
        java.lang.StringBuilder $r1, $r3, $r4, $r6, $r7, $r8, $r9;

        r0 := @this: com.sun.xml.bind.v2.runtime.unmarshaller.IntArrayData;

        $r1 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.IntArrayData: java.lang.StringBuilder literal>;

        if $r1 == null goto label1;

        $r8 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.IntArrayData: java.lang.StringBuilder literal>;

        return $r8;

     label1:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        r0.<com.sun.xml.bind.v2.runtime.unmarshaller.IntArrayData: java.lang.StringBuilder literal> = $r9;

        i3 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.IntArrayData: int start>;

        i4 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.IntArrayData: int len>;

     label2:
        if i4 <= 0 goto label4;

        $r4 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.IntArrayData: java.lang.StringBuilder literal>;

        $i0 = virtualinvoke $r4.<java.lang.StringBuilder: int length()>();

        if $i0 <= 0 goto label3;

        $r7 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.IntArrayData: java.lang.StringBuilder literal>;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label3:
        $r6 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.IntArrayData: java.lang.StringBuilder literal>;

        $r5 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.IntArrayData: int[] data>;

        $i1 = i3;

        i3 = i3 + 1;

        $i2 = $r5[$i1];

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $i6 = (int) -1;

        i4 = i4 + $i6;

        goto label2;

     label4:
        $r3 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.IntArrayData: java.lang.StringBuilder literal>;

        return $r3;
    }

    public java.lang.String toString()
    {
        com.sun.xml.bind.v2.runtime.unmarshaller.IntArrayData r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        r0 := @this: com.sun.xml.bind.v2.runtime.unmarshaller.IntArrayData;

        $r1 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.IntArrayData: java.lang.StringBuilder literal>;

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public void writeTo(com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput) throws java.io.IOException
    {
        com.sun.xml.bind.v2.runtime.unmarshaller.IntArrayData r0;
        com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput r1;
        int[] $r2;
        int $i0, $i1, $i2, i3, i4, $i6;

        r0 := @this: com.sun.xml.bind.v2.runtime.unmarshaller.IntArrayData;

        r1 := @parameter0: com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput;

        i3 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.IntArrayData: int start>;

        i4 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.IntArrayData: int len>;

     label1:
        if i4 <= 0 goto label3;

        $i0 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.IntArrayData: int len>;

        if i4 == $i0 goto label2;

        virtualinvoke r1.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void write(int)>(32);

     label2:
        $r2 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.IntArrayData: int[] data>;

        $i1 = i3;

        i3 = i3 + 1;

        $i2 = $r2[$i1];

        virtualinvoke r1.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void text(int)>($i2);

        $i6 = (int) -1;

        i4 = i4 + $i6;

        goto label1;

     label3:
        return;
    }
}
