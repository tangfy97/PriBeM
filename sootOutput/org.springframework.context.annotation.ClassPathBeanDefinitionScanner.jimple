public class org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner extends org.springframework.context.'annotation'.ClassPathScanningCandidateComponentProvider
{
    private final org.springframework.beans.factory.support.BeanDefinitionRegistry registry;
    private org.springframework.beans.factory.support.BeanDefinitionDefaults beanDefinitionDefaults;
    private java.lang.String[] autowireCandidatePatterns;
    private org.springframework.beans.factory.support.BeanNameGenerator beanNameGenerator;
    private org.springframework.context.'annotation'.ScopeMetadataResolver scopeMetadataResolver;
    private boolean includeAnnotationConfig;

    public void <init>(org.springframework.beans.factory.support.BeanDefinitionRegistry)
    {
        org.springframework.beans.factory.support.BeanDefinitionRegistry r1;
        org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner r0;

        r0 := @this: org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner;

        r1 := @parameter0: org.springframework.beans.factory.support.BeanDefinitionRegistry;

        specialinvoke r0.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: void <init>(org.springframework.beans.factory.support.BeanDefinitionRegistry,boolean)>(r1, 1);

        return;
    }

    public void <init>(org.springframework.beans.factory.support.BeanDefinitionRegistry, boolean)
    {
        org.springframework.core.io.ResourceLoader $r7;
        org.springframework.beans.factory.support.BeanDefinitionDefaults $r1;
        org.springframework.beans.factory.support.BeanDefinitionRegistry r4, $r5, $r6;
        org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner r0;
        org.springframework.context.'annotation'.AnnotationBeanNameGenerator $r2;
        org.springframework.context.'annotation'.AnnotationScopeMetadataResolver $r3;
        boolean z0, $z1;

        r0 := @this: org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner;

        r4 := @parameter0: org.springframework.beans.factory.support.BeanDefinitionRegistry;

        z0 := @parameter1: boolean;

        specialinvoke r0.<org.springframework.context.'annotation'.ClassPathScanningCandidateComponentProvider: void <init>(boolean)>(z0);

        $r1 = new org.springframework.beans.factory.support.BeanDefinitionDefaults;

        specialinvoke $r1.<org.springframework.beans.factory.support.BeanDefinitionDefaults: void <init>()>();

        r0.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: org.springframework.beans.factory.support.BeanDefinitionDefaults beanDefinitionDefaults> = $r1;

        $r2 = new org.springframework.context.'annotation'.AnnotationBeanNameGenerator;

        specialinvoke $r2.<org.springframework.context.'annotation'.AnnotationBeanNameGenerator: void <init>()>();

        r0.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: org.springframework.beans.factory.support.BeanNameGenerator beanNameGenerator> = $r2;

        $r3 = new org.springframework.context.'annotation'.AnnotationScopeMetadataResolver;

        specialinvoke $r3.<org.springframework.context.'annotation'.AnnotationScopeMetadataResolver: void <init>()>();

        r0.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: org.springframework.context.'annotation'.ScopeMetadataResolver scopeMetadataResolver> = $r3;

        r0.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: boolean includeAnnotationConfig> = 1;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r4, "BeanDefinitionRegistry must not be null");

        r0.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: org.springframework.beans.factory.support.BeanDefinitionRegistry registry> = r4;

        $r5 = r0.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: org.springframework.beans.factory.support.BeanDefinitionRegistry registry>;

        $z1 = $r5 instanceof org.springframework.core.io.ResourceLoader;

        if $z1 == 0 goto label1;

        $r6 = r0.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: org.springframework.beans.factory.support.BeanDefinitionRegistry registry>;

        $r7 = (org.springframework.core.io.ResourceLoader) $r6;

        virtualinvoke r0.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: void setResourceLoader(org.springframework.core.io.ResourceLoader)>($r7);

     label1:
        return;
    }

    public final org.springframework.beans.factory.support.BeanDefinitionRegistry getRegistry()
    {
        org.springframework.beans.factory.support.BeanDefinitionRegistry $r1;
        org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner r0;

        r0 := @this: org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner;

        $r1 = r0.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: org.springframework.beans.factory.support.BeanDefinitionRegistry registry>;

        return $r1;
    }

    public void setBeanDefinitionDefaults(org.springframework.beans.factory.support.BeanDefinitionDefaults)
    {
        org.springframework.beans.factory.support.BeanDefinitionDefaults r1, $r2;
        org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner r0;

        r0 := @this: org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner;

        r1 := @parameter0: org.springframework.beans.factory.support.BeanDefinitionDefaults;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r2 = new org.springframework.beans.factory.support.BeanDefinitionDefaults;

        specialinvoke $r2.<org.springframework.beans.factory.support.BeanDefinitionDefaults: void <init>()>();

     label2:
        r0.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: org.springframework.beans.factory.support.BeanDefinitionDefaults beanDefinitionDefaults> = $r2;

        return;
    }

    public void setAutowireCandidatePatterns(java.lang.String[])
    {
        java.lang.String[] r1;
        org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner r0;

        r0 := @this: org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner;

        r1 := @parameter0: java.lang.String[];

        r0.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: java.lang.String[] autowireCandidatePatterns> = r1;

        return;
    }

    public void setBeanNameGenerator(org.springframework.beans.factory.support.BeanNameGenerator)
    {
        org.springframework.context.'annotation'.AnnotationBeanNameGenerator $r3;
        org.springframework.beans.factory.support.BeanNameGenerator r1, $r2;
        org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner r0;

        r0 := @this: org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner;

        r1 := @parameter0: org.springframework.beans.factory.support.BeanNameGenerator;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r3 = new org.springframework.context.'annotation'.AnnotationBeanNameGenerator;

        $r2 = $r3;

        specialinvoke $r3.<org.springframework.context.'annotation'.AnnotationBeanNameGenerator: void <init>()>();

     label2:
        r0.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: org.springframework.beans.factory.support.BeanNameGenerator beanNameGenerator> = $r2;

        return;
    }

    public void setScopeMetadataResolver(org.springframework.context.'annotation'.ScopeMetadataResolver)
    {
        org.springframework.context.'annotation'.ScopeMetadataResolver r1, $r2;
        org.springframework.context.'annotation'.AnnotationScopeMetadataResolver $r3;
        org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner r0;

        r0 := @this: org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner;

        r1 := @parameter0: org.springframework.context.'annotation'.ScopeMetadataResolver;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r3 = new org.springframework.context.'annotation'.AnnotationScopeMetadataResolver;

        $r2 = $r3;

        specialinvoke $r3.<org.springframework.context.'annotation'.AnnotationScopeMetadataResolver: void <init>()>();

     label2:
        r0.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: org.springframework.context.'annotation'.ScopeMetadataResolver scopeMetadataResolver> = $r2;

        return;
    }

    public void setScopedProxyMode(org.springframework.context.'annotation'.ScopedProxyMode)
    {
        org.springframework.context.'annotation'.ScopedProxyMode r2;
        org.springframework.context.'annotation'.AnnotationScopeMetadataResolver $r1;
        org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner r0;

        r0 := @this: org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner;

        r2 := @parameter0: org.springframework.context.'annotation'.ScopedProxyMode;

        $r1 = new org.springframework.context.'annotation'.AnnotationScopeMetadataResolver;

        specialinvoke $r1.<org.springframework.context.'annotation'.AnnotationScopeMetadataResolver: void <init>(org.springframework.context.'annotation'.ScopedProxyMode)>(r2);

        r0.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: org.springframework.context.'annotation'.ScopeMetadataResolver scopeMetadataResolver> = $r1;

        return;
    }

    public void setIncludeAnnotationConfig(boolean)
    {
        org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner r0;
        boolean z0;

        r0 := @this: org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner;

        z0 := @parameter0: boolean;

        r0.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: boolean includeAnnotationConfig> = z0;

        return;
    }

    public transient int scan(java.lang.String[])
    {
        java.lang.String[] r2;
        org.springframework.beans.factory.support.BeanDefinitionRegistry $r1, $r3, $r4;
        org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner r0;
        int $i0, $i1, $i2;
        boolean $z0;

        r0 := @this: org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner;

        r2 := @parameter0: java.lang.String[];

        $r1 = r0.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: org.springframework.beans.factory.support.BeanDefinitionRegistry registry>;

        $i0 = interfaceinvoke $r1.<org.springframework.beans.factory.support.BeanDefinitionRegistry: int getBeanDefinitionCount()>();

        virtualinvoke r0.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: java.util.Set doScan(java.lang.String[])>(r2);

        $z0 = r0.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: boolean includeAnnotationConfig>;

        if $z0 == 0 goto label1;

        $r4 = r0.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: org.springframework.beans.factory.support.BeanDefinitionRegistry registry>;

        staticinvoke <org.springframework.context.'annotation'.AnnotationConfigUtils: void registerAnnotationConfigProcessors(org.springframework.beans.factory.support.BeanDefinitionRegistry)>($r4);

     label1:
        $r3 = r0.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: org.springframework.beans.factory.support.BeanDefinitionRegistry registry>;

        $i1 = interfaceinvoke $r3.<org.springframework.beans.factory.support.BeanDefinitionRegistry: int getBeanDefinitionCount()>();

        $i2 = $i1 - $i0;

        return $i2;
    }

    protected transient java.util.Set doScan(java.lang.String[])
    {
        org.springframework.beans.factory.'annotation'.AnnotatedBeanDefinition $r18;
        java.lang.String[] r1;
        org.springframework.beans.factory.support.AbstractBeanDefinition $r19;
        org.springframework.beans.factory.support.BeanDefinitionRegistry $r11, $r15, $r17;
        org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner r3;
        org.springframework.context.'annotation'.ScopeMetadata $r9;
        org.springframework.beans.factory.config.BeanDefinitionHolder $r14, $r16;
        int i0, i1;
        org.springframework.beans.factory.config.BeanDefinition r7;
        java.lang.String r2, $r10, $r13;
        java.util.LinkedHashSet $r0;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r5;
        java.util.Set $r4;
        org.springframework.context.'annotation'.ScopeMetadataResolver $r8;
        org.springframework.beans.factory.support.BeanNameGenerator $r12;
        java.lang.Object $r6;

        r3 := @this: org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner;

        r1 := @parameter0: java.lang.String[];

        $r0 = new java.util.LinkedHashSet;

        specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>();

        i0 = lengthof r1;

        i1 = 0;

        goto label6;

     label1:
        r2 = r1[i1];

        $r4 = virtualinvoke r3.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: java.util.Set findCandidateComponents(java.lang.String)>(r2);

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

        goto label5;

     label2:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.springframework.beans.factory.config.BeanDefinition) $r6;

        $r8 = r3.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: org.springframework.context.'annotation'.ScopeMetadataResolver scopeMetadataResolver>;

        $r9 = interfaceinvoke $r8.<org.springframework.context.'annotation'.ScopeMetadataResolver: org.springframework.context.'annotation'.ScopeMetadata resolveScopeMetadata(org.springframework.beans.factory.config.BeanDefinition)>(r7);

        $r10 = virtualinvoke $r9.<org.springframework.context.'annotation'.ScopeMetadata: java.lang.String getScopeName()>();

        interfaceinvoke r7.<org.springframework.beans.factory.config.BeanDefinition: void setScope(java.lang.String)>($r10);

        $r12 = r3.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: org.springframework.beans.factory.support.BeanNameGenerator beanNameGenerator>;

        $r11 = r3.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: org.springframework.beans.factory.support.BeanDefinitionRegistry registry>;

        $r13 = interfaceinvoke $r12.<org.springframework.beans.factory.support.BeanNameGenerator: java.lang.String generateBeanName(org.springframework.beans.factory.config.BeanDefinition,org.springframework.beans.factory.support.BeanDefinitionRegistry)>(r7, $r11);

        $z0 = r7 instanceof org.springframework.beans.factory.support.AbstractBeanDefinition;

        if $z0 == 0 goto label3;

        $r19 = (org.springframework.beans.factory.support.AbstractBeanDefinition) r7;

        virtualinvoke r3.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: void postProcessBeanDefinition(org.springframework.beans.factory.support.AbstractBeanDefinition,java.lang.String)>($r19, $r13);

     label3:
        $z1 = r7 instanceof org.springframework.beans.factory.'annotation'.AnnotatedBeanDefinition;

        if $z1 == 0 goto label4;

        $r18 = (org.springframework.beans.factory.'annotation'.AnnotatedBeanDefinition) r7;

        staticinvoke <org.springframework.context.'annotation'.AnnotationConfigUtils: void processCommonDefinitionAnnotations(org.springframework.beans.factory.'annotation'.AnnotatedBeanDefinition)>($r18);

     label4:
        $z2 = virtualinvoke r3.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: boolean checkCandidate(java.lang.String,org.springframework.beans.factory.config.BeanDefinition)>($r13, r7);

        if $z2 == 0 goto label5;

        $r14 = new org.springframework.beans.factory.config.BeanDefinitionHolder;

        specialinvoke $r14.<org.springframework.beans.factory.config.BeanDefinitionHolder: void <init>(org.springframework.beans.factory.config.BeanDefinition,java.lang.String)>(r7, $r13);

        $r15 = r3.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: org.springframework.beans.factory.support.BeanDefinitionRegistry registry>;

        $r16 = staticinvoke <org.springframework.context.'annotation'.AnnotationConfigUtils: org.springframework.beans.factory.config.BeanDefinitionHolder applyScopedProxyMode(org.springframework.context.'annotation'.ScopeMetadata,org.springframework.beans.factory.config.BeanDefinitionHolder,org.springframework.beans.factory.support.BeanDefinitionRegistry)>($r9, $r14, $r15);

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r16);

        $r17 = r3.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: org.springframework.beans.factory.support.BeanDefinitionRegistry registry>;

        virtualinvoke r3.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: void registerBeanDefinition(org.springframework.beans.factory.config.BeanDefinitionHolder,org.springframework.beans.factory.support.BeanDefinitionRegistry)>($r16, $r17);

     label5:
        $z3 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label2;

        i1 = i1 + 1;

     label6:
        if i1 < i0 goto label1;

        return $r0;
    }

    protected void postProcessBeanDefinition(org.springframework.beans.factory.support.AbstractBeanDefinition, java.lang.String)
    {
        org.springframework.beans.factory.support.BeanDefinitionDefaults $r2;
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        java.lang.String[] $r3, $r5;
        java.lang.String r4;
        org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner r1;
        boolean $z0;

        r1 := @this: org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner;

        r0 := @parameter0: org.springframework.beans.factory.support.AbstractBeanDefinition;

        r4 := @parameter1: java.lang.String;

        $r2 = r1.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: org.springframework.beans.factory.support.BeanDefinitionDefaults beanDefinitionDefaults>;

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: void applyDefaults(org.springframework.beans.factory.support.BeanDefinitionDefaults)>($r2);

        $r3 = r1.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: java.lang.String[] autowireCandidatePatterns>;

        if $r3 == null goto label1;

        $r5 = r1.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: java.lang.String[] autowireCandidatePatterns>;

        $z0 = staticinvoke <org.springframework.util.PatternMatchUtils: boolean simpleMatch(java.lang.String[],java.lang.String)>($r5, r4);

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setAutowireCandidate(boolean)>($z0);

     label1:
        return;
    }

    protected void registerBeanDefinition(org.springframework.beans.factory.config.BeanDefinitionHolder, org.springframework.beans.factory.support.BeanDefinitionRegistry)
    {
        org.springframework.beans.factory.config.BeanDefinitionHolder r0;
        org.springframework.beans.factory.support.BeanDefinitionRegistry r1;
        org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner r2;

        r2 := @this: org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner;

        r0 := @parameter0: org.springframework.beans.factory.config.BeanDefinitionHolder;

        r1 := @parameter1: org.springframework.beans.factory.support.BeanDefinitionRegistry;

        staticinvoke <org.springframework.beans.factory.support.BeanDefinitionReaderUtils: void registerBeanDefinition(org.springframework.beans.factory.config.BeanDefinitionHolder,org.springframework.beans.factory.support.BeanDefinitionRegistry)>(r0, r1);

        return;
    }

    protected boolean checkCandidate(java.lang.String, org.springframework.beans.factory.config.BeanDefinition) throws java.lang.IllegalStateException
    {
        java.lang.IllegalStateException $r7;
        org.springframework.beans.factory.support.BeanDefinitionRegistry $r2, $r3;
        org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner r0;
        org.springframework.beans.factory.config.BeanDefinition $r4, $r5, r6, r19;
        java.lang.String r1, $r11, $r15, $r18;
        boolean $z0, $z1;
        java.lang.StringBuilder $r8, $r9, $r10, $r12, $r13, $r14, $r16, $r17;

        r0 := @this: org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner;

        r1 := @parameter0: java.lang.String;

        r6 := @parameter1: org.springframework.beans.factory.config.BeanDefinition;

        $r2 = r0.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: org.springframework.beans.factory.support.BeanDefinitionRegistry registry>;

        $z0 = interfaceinvoke $r2.<org.springframework.beans.factory.support.BeanDefinitionRegistry: boolean containsBeanDefinition(java.lang.String)>(r1);

        if $z0 != 0 goto label1;

        return 1;

     label1:
        $r3 = r0.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: org.springframework.beans.factory.support.BeanDefinitionRegistry registry>;

        $r4 = interfaceinvoke $r3.<org.springframework.beans.factory.support.BeanDefinitionRegistry: org.springframework.beans.factory.config.BeanDefinition getBeanDefinition(java.lang.String)>(r1);

        r19 = $r4;

        $r5 = interfaceinvoke $r4.<org.springframework.beans.factory.config.BeanDefinition: org.springframework.beans.factory.config.BeanDefinition getOriginatingBeanDefinition()>();

        if $r5 == null goto label2;

        r19 = $r5;

     label2:
        $z1 = virtualinvoke r0.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: boolean isCompatible(org.springframework.beans.factory.config.BeanDefinition,org.springframework.beans.factory.config.BeanDefinition)>(r6, r19);

        if $z1 == 0 goto label3;

        return 0;

     label3:
        $r7 = new java.lang.IllegalStateException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Annotation-specified bean name \'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' for bean class [");

        $r11 = interfaceinvoke r6.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getBeanClassName()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] conflicts with existing, ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("non-compatible bean definition of same name and class [");

        $r15 = interfaceinvoke r19.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getBeanClassName()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r18);

        throw $r7;
    }

    protected boolean isCompatible(org.springframework.beans.factory.config.BeanDefinition, org.springframework.beans.factory.config.BeanDefinition)
    {
        org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner r4;
        org.springframework.beans.factory.config.BeanDefinition r0, r1;
        java.lang.Object $r2, $r3;
        boolean $z0, $z1, $z2;

        r4 := @this: org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner;

        r1 := @parameter0: org.springframework.beans.factory.config.BeanDefinition;

        r0 := @parameter1: org.springframework.beans.factory.config.BeanDefinition;

        $z0 = r0 instanceof org.springframework.beans.factory.'annotation'.AnnotatedBeanDefinition;

        if $z0 == 0 goto label1;

        $r2 = interfaceinvoke r1.<org.springframework.beans.factory.config.BeanDefinition: java.lang.Object getSource()>();

        $r3 = interfaceinvoke r0.<org.springframework.beans.factory.config.BeanDefinition: java.lang.Object getSource()>();

        $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z2 != 0 goto label1;

        return 0;

     label1:
        return 1;
    }
}
