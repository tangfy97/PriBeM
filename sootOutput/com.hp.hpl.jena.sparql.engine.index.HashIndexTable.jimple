public class com.hp.hpl.jena.sparql.engine.index.HashIndexTable extends java.lang.Object implements com.hp.hpl.jena.sparql.engine.index.IndexTable
{
    private final java.util.Set table;
    private java.util.Map varColumns;
    private boolean missingValue;

    public void <init>(java.util.Set, com.hp.hpl.jena.sparql.engine.QueryIterator) throws com.hp.hpl.jena.sparql.engine.index.HashIndexTable$MissingBindingException
    {
        java.util.HashSet $r2;
        com.hp.hpl.jena.sparql.engine.binding.Binding $r4;
        com.hp.hpl.jena.sparql.engine.index.HashIndexTable r0;
        int $i0;
        java.util.Set r1;
        com.hp.hpl.jena.sparql.engine.QueryIterator r3;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.index.HashIndexTable;

        r1 := @parameter0: java.util.Set;

        r3 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.engine.index.HashIndexTable: void initColumnMappings(java.util.Set)>(r1);

        $i0 = interfaceinvoke r1.<java.util.Set: int size()>();

        if $i0 != 0 goto label1;

        r0.<com.hp.hpl.jena.sparql.engine.index.HashIndexTable: java.util.Set table> = null;

        return;

     label1:
        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.engine.index.HashIndexTable: java.util.Set table> = $r2;

        r0.<com.hp.hpl.jena.sparql.engine.index.HashIndexTable: boolean missingValue> = 0;

     label2:
        $z0 = interfaceinvoke r3.<com.hp.hpl.jena.sparql.engine.QueryIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r3.<com.hp.hpl.jena.sparql.engine.QueryIterator: com.hp.hpl.jena.sparql.engine.binding.Binding nextBinding()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.engine.index.HashIndexTable: void addBindingToTable(com.hp.hpl.jena.sparql.engine.binding.Binding)>($r4);

        goto label2;

     label3:
        interfaceinvoke r3.<com.hp.hpl.jena.sparql.engine.QueryIterator: void close()>();

        return;
    }

    public boolean containsCompatibleWithSharedDomain(com.hp.hpl.jena.sparql.engine.binding.Binding)
    {
        com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key $r3;
        java.util.Set $r1, $r4;
        com.hp.hpl.jena.sparql.engine.binding.Binding r2;
        com.hp.hpl.jena.sparql.engine.index.HashIndexTable r0;
        boolean $z0, $z1, $z2;

        r0 := @this: com.hp.hpl.jena.sparql.engine.index.HashIndexTable;

        r2 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        $r1 = r0.<com.hp.hpl.jena.sparql.engine.index.HashIndexTable: java.util.Set table>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r3 = specialinvoke r0.<com.hp.hpl.jena.sparql.engine.index.HashIndexTable: com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key convertToKey(com.hp.hpl.jena.sparql.engine.binding.Binding)>(r2);

        $r4 = r0.<com.hp.hpl.jena.sparql.engine.index.HashIndexTable: java.util.Set table>;

        $z0 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $z1 = specialinvoke r0.<com.hp.hpl.jena.sparql.engine.index.HashIndexTable: boolean anyUnbound(com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key)>($r3);

        if $z1 == 0 goto label3;

        $z2 = specialinvoke r0.<com.hp.hpl.jena.sparql.engine.index.HashIndexTable: boolean exhaustiveSearch(com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key)>($r3);

        return $z2;

     label3:
        return 0;
    }

    private boolean anyUnbound(com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key)
    {
        com.hp.hpl.jena.graph.Node[] $r1;
        com.hp.hpl.jena.sparql.engine.index.HashIndexTable r3;
        com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key r0;
        int i0, i1;
        com.hp.hpl.jena.graph.Node r2;

        r3 := @this: com.hp.hpl.jena.sparql.engine.index.HashIndexTable;

        r0 := @parameter0: com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key: com.hp.hpl.jena.graph.Node[] getNodes()>();

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = $r1[i1];

        if r2 != null goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    private void initColumnMappings(java.util.Set)
    {
        java.util.Iterator $r3;
        java.util.Set r2;
        java.util.HashMap $r1;
        com.hp.hpl.jena.sparql.core.Var r5;
        java.lang.Integer $r7;
        com.hp.hpl.jena.sparql.engine.index.HashIndexTable r0;
        java.util.Map $r6;
        int $i0, i1;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.index.HashIndexTable;

        r2 := @parameter0: java.util.Set;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.engine.index.HashIndexTable: java.util.Map varColumns> = $r1;

        i1 = 0;

        $r3 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.hp.hpl.jena.sparql.core.Var) $r4;

        $r6 = r0.<com.hp.hpl.jena.sparql.engine.index.HashIndexTable: java.util.Map varColumns>;

        $i0 = i1;

        i1 = i1 + 1;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, $r7);

        goto label1;

     label2:
        return;
    }

    private void addBindingToTable(com.hp.hpl.jena.sparql.engine.binding.Binding) throws com.hp.hpl.jena.sparql.engine.index.HashIndexTable$MissingBindingException
    {
        com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key $r2;
        java.util.Set $r3, $r6;
        com.hp.hpl.jena.sparql.engine.binding.Binding r1;
        com.hp.hpl.jena.sparql.engine.index.HashIndexTable$MissingBindingException $r4;
        com.hp.hpl.jena.sparql.engine.index.HashIndexTable r0;
        java.util.Map $r5;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.index.HashIndexTable;

        r1 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        $r2 = specialinvoke r0.<com.hp.hpl.jena.sparql.engine.index.HashIndexTable: com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key convertToKey(com.hp.hpl.jena.sparql.engine.binding.Binding)>(r1);

        $r3 = r0.<com.hp.hpl.jena.sparql.engine.index.HashIndexTable: java.util.Set table>;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r2);

        $z0 = r0.<com.hp.hpl.jena.sparql.engine.index.HashIndexTable: boolean missingValue>;

        if $z0 == 0 goto label1;

        $r4 = new com.hp.hpl.jena.sparql.engine.index.HashIndexTable$MissingBindingException;

        $r6 = r0.<com.hp.hpl.jena.sparql.engine.index.HashIndexTable: java.util.Set table>;

        $r5 = r0.<com.hp.hpl.jena.sparql.engine.index.HashIndexTable: java.util.Map varColumns>;

        specialinvoke $r4.<com.hp.hpl.jena.sparql.engine.index.HashIndexTable$MissingBindingException: void <init>(java.util.Set,java.util.Map)>($r6, $r5);

        throw $r4;

     label1:
        return;
    }

    private com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key convertToKey(com.hp.hpl.jena.sparql.engine.binding.Binding)
    {
        com.hp.hpl.jena.graph.Node $r12;
        java.lang.Integer $r14;
        com.hp.hpl.jena.sparql.engine.index.HashIndexTable r0;
        java.util.Map $r1, $r3;
        int $i0, $i1;
        boolean $z0;
        com.hp.hpl.jena.graph.Node[] r2;
        java.util.Map$Entry r8;
        java.util.Iterator $r5;
        com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key $r6;
        java.util.Set $r4;
        com.hp.hpl.jena.sparql.core.Var $r11;
        com.hp.hpl.jena.sparql.engine.binding.Binding r9;
        java.lang.Object $r7, $r10, $r13;

        r0 := @this: com.hp.hpl.jena.sparql.engine.index.HashIndexTable;

        r9 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        $r1 = r0.<com.hp.hpl.jena.sparql.engine.index.HashIndexTable: java.util.Map varColumns>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        r2 = newarray (com.hp.hpl.jena.graph.Node)[$i0];

        $r3 = r0.<com.hp.hpl.jena.sparql.engine.index.HashIndexTable: java.util.Map varColumns>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.util.Map$Entry) $r7;

        $r10 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r11 = (com.hp.hpl.jena.sparql.core.Var) $r10;

        $r12 = interfaceinvoke r9.<com.hp.hpl.jena.sparql.engine.binding.Binding: com.hp.hpl.jena.graph.Node get(com.hp.hpl.jena.sparql.core.Var)>($r11);

        if $r12 != null goto label2;

        r0.<com.hp.hpl.jena.sparql.engine.index.HashIndexTable: boolean missingValue> = 1;

     label2:
        $r13 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r14 = (java.lang.Integer) $r13;

        $i1 = virtualinvoke $r14.<java.lang.Integer: int intValue()>();

        r2[$i1] = $r12;

        goto label1;

     label3:
        $r6 = new com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key: void <init>(com.hp.hpl.jena.graph.Node[])>(r2);

        return $r6;
    }

    private boolean exhaustiveSearch(com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key)
    {
        java.util.Iterator $r2;
        com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key r4, r5;
        java.util.Set $r1;
        com.hp.hpl.jena.sparql.engine.index.HashIndexTable r0;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.sparql.engine.index.HashIndexTable;

        r5 := @parameter0: com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key;

        $r1 = r0.<com.hp.hpl.jena.sparql.engine.index.HashIndexTable: java.util.Set table>;

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key) $r3;

        $z1 = virtualinvoke r5.<com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key: boolean compatibleAndSharedDomain(com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key)>(r4);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }
}
