public final class kodkod.ast.UnaryExpression extends kodkod.ast.Expression
{
    private final kodkod.ast.Expression expression;
    private final kodkod.ast.operator.ExprOperator op;
    private final int arity;

    void <init>(kodkod.ast.operator.ExprOperator, kodkod.ast.Expression)
    {
        int $i0, $i1;
        java.lang.String $r8, $r12;
        boolean $z0;
        kodkod.ast.Expression r2;
        java.lang.IllegalArgumentException $r3, $r9;
        kodkod.ast.UnaryExpression r0;
        kodkod.ast.operator.ExprOperator r1;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r10, $r11;

        r0 := @this: kodkod.ast.UnaryExpression;

        r1 := @parameter0: kodkod.ast.operator.ExprOperator;

        r2 := @parameter1: kodkod.ast.Expression;

        specialinvoke r0.<kodkod.ast.Expression: void <init>()>();

        $z0 = virtualinvoke r1.<kodkod.ast.operator.ExprOperator: boolean unary()>();

        if $z0 != 0 goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("Not a unary operator: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r9;

     label1:
        $i0 = virtualinvoke r2.<kodkod.ast.Expression: int arity()>();

        if $i0 == 2 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Invalid arity: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("::");

        $i1 = virtualinvoke r2.<kodkod.ast.Expression: int arity()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label2:
        r0.<kodkod.ast.UnaryExpression: kodkod.ast.Expression expression> = r2;

        r0.<kodkod.ast.UnaryExpression: kodkod.ast.operator.ExprOperator op> = r1;

        r0.<kodkod.ast.UnaryExpression: int arity> = 2;

        return;
    }

    public int arity()
    {
        int $i0;
        kodkod.ast.UnaryExpression r0;

        r0 := @this: kodkod.ast.UnaryExpression;

        $i0 = r0.<kodkod.ast.UnaryExpression: int arity>;

        return $i0;
    }

    public kodkod.ast.Expression expression()
    {
        kodkod.ast.Expression $r1;
        kodkod.ast.UnaryExpression r0;

        r0 := @this: kodkod.ast.UnaryExpression;

        $r1 = r0.<kodkod.ast.UnaryExpression: kodkod.ast.Expression expression>;

        return $r1;
    }

    public kodkod.ast.operator.ExprOperator op()
    {
        kodkod.ast.operator.ExprOperator $r1;
        kodkod.ast.UnaryExpression r0;

        r0 := @this: kodkod.ast.UnaryExpression;

        $r1 = r0.<kodkod.ast.UnaryExpression: kodkod.ast.operator.ExprOperator op>;

        return $r1;
    }

    public java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)
    {
        java.lang.Object $r2;
        kodkod.ast.visitor.ReturnVisitor r0;
        kodkod.ast.UnaryExpression r1;

        r1 := @this: kodkod.ast.UnaryExpression;

        r0 := @parameter0: kodkod.ast.visitor.ReturnVisitor;

        $r2 = interfaceinvoke r0.<kodkod.ast.visitor.ReturnVisitor: java.lang.Object visit(kodkod.ast.UnaryExpression)>(r1);

        return $r2;
    }

    public void accept(kodkod.ast.visitor.VoidVisitor)
    {
        kodkod.ast.visitor.VoidVisitor r0;
        kodkod.ast.UnaryExpression r1;

        r1 := @this: kodkod.ast.UnaryExpression;

        r0 := @parameter0: kodkod.ast.visitor.VoidVisitor;

        interfaceinvoke r0.<kodkod.ast.visitor.VoidVisitor: void visit(kodkod.ast.UnaryExpression)>(r1);

        return;
    }

    public java.lang.String toString()
    {
        kodkod.ast.Expression $r5;
        kodkod.ast.UnaryExpression r1;
        kodkod.ast.operator.ExprOperator $r2;
        java.lang.StringBuilder $r0, $r7;
        java.lang.String $r3, $r4, $r6, $r8;

        r1 := @this: kodkod.ast.UnaryExpression;

        $r0 = new java.lang.StringBuilder;

        $r2 = r1.<kodkod.ast.UnaryExpression: kodkod.ast.operator.ExprOperator op>;

        $r3 = virtualinvoke $r2.<kodkod.ast.operator.ExprOperator: java.lang.String toString()>();

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        $r5 = r1.<kodkod.ast.UnaryExpression: kodkod.ast.Expression expression>;

        $r6 = virtualinvoke $r5.<kodkod.ast.Expression: java.lang.String toString()>();

        $r7 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }
}
