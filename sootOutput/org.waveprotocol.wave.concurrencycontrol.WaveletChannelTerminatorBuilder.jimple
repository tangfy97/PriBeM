public final class org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminatorBuilder extends java.lang.Object
{
    private org.waveprotocol.wave.concurrencycontrol.ResponseStatus status;

    public void <init>()
    {
        org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminatorBuilder r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminatorBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminatorBuilder setStatus(org.waveprotocol.wave.concurrencycontrol.ResponseStatus)
    {
        org.waveprotocol.wave.concurrencycontrol.ResponseStatus r1;
        org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminatorBuilder r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminatorBuilder;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ResponseStatus;

        r0.<org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminatorBuilder: org.waveprotocol.wave.concurrencycontrol.ResponseStatus status> = r1;

        return r0;
    }

    public org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminator build(org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminatorBuilder$Factory)
    {
        org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminator $r1;
        org.waveprotocol.wave.concurrencycontrol.ResponseStatus $r3;
        org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminatorBuilder r2;
        org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminatorBuilder$Factory r0;

        r2 := @this: org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminatorBuilder;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminatorBuilder$Factory;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminatorBuilder$Factory: org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminator create()>();

        $r3 = r2.<org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminatorBuilder: org.waveprotocol.wave.concurrencycontrol.ResponseStatus status>;

        interfaceinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminator: void setStatus(org.waveprotocol.wave.concurrencycontrol.ResponseStatus)>($r3);

        return $r1;
    }
}
