final class org.apache.lucene.index.TermVectorsConsumerPerField extends org.apache.lucene.index.TermsHashConsumerPerField
{
    final org.apache.lucene.index.TermsHashPerField termsHashPerField;
    final org.apache.lucene.index.TermVectorsConsumer termsWriter;
    final org.apache.lucene.index.FieldInfo fieldInfo;
    final org.apache.lucene.index.DocumentsWriterPerThread$DocState docState;
    final org.apache.lucene.index.FieldInvertState fieldState;
    boolean doVectors;
    boolean doVectorPositions;
    boolean doVectorOffsets;
    boolean doVectorPayloads;
    int maxNumPostings;
    org.apache.lucene.analysis.tokenattributes.OffsetAttribute offsetAttribute;
    org.apache.lucene.analysis.tokenattributes.PayloadAttribute payloadAttribute;
    boolean hasPayloads;
    static final boolean $assertionsDisabled;

    public void <init>(org.apache.lucene.index.TermsHashPerField, org.apache.lucene.index.TermVectorsConsumer, org.apache.lucene.index.FieldInfo)
    {
        org.apache.lucene.index.TermVectorsConsumer r2;
        org.apache.lucene.index.TermVectorsConsumerPerField r0;
        org.apache.lucene.index.FieldInvertState $r5;
        org.apache.lucene.index.DocumentsWriterPerThread$DocState $r4;
        org.apache.lucene.index.TermsHashPerField r1;
        org.apache.lucene.index.FieldInfo r3;

        r0 := @this: org.apache.lucene.index.TermVectorsConsumerPerField;

        r1 := @parameter0: org.apache.lucene.index.TermsHashPerField;

        r2 := @parameter1: org.apache.lucene.index.TermVectorsConsumer;

        r3 := @parameter2: org.apache.lucene.index.FieldInfo;

        specialinvoke r0.<org.apache.lucene.index.TermsHashConsumerPerField: void <init>()>();

        r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.index.TermsHashPerField termsHashPerField> = r1;

        r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.index.TermVectorsConsumer termsWriter> = r2;

        r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.index.FieldInfo fieldInfo> = r3;

        $r4 = r1.<org.apache.lucene.index.TermsHashPerField: org.apache.lucene.index.DocumentsWriterPerThread$DocState docState>;

        r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.index.DocumentsWriterPerThread$DocState docState> = $r4;

        $r5 = r1.<org.apache.lucene.index.TermsHashPerField: org.apache.lucene.index.FieldInvertState fieldState>;

        r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.index.FieldInvertState fieldState> = $r5;

        return;
    }

    int getStreamCount()
    {
        org.apache.lucene.index.TermVectorsConsumerPerField r0;

        r0 := @this: org.apache.lucene.index.TermVectorsConsumerPerField;

        return 2;
    }

    boolean start(org.apache.lucene.index.IndexableField[], int)
    {
        org.apache.lucene.index.TermVectorsConsumer $r1;
        org.apache.lucene.util.BytesRefHash $r3;
        org.apache.lucene.index.TermVectorsConsumerPerField r0;
        java.lang.StringBuilder $r13, $r14, $r16, $r19, $r20, $r22, $r25, $r26, $r28, $r31, $r32, $r34, $r41, $r42, $r44, $r47, $r48, $r50, $r53, $r54, $r56, $r62, $r63, $r64, $r65;
        java.lang.String $r15, $r17, $r21, $r23, $r27, $r29, $r33, $r35, $r43, $r45, $r49, $r51, $r55, $r57, $r66;
        org.apache.lucene.index.IndexableField r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21;
        org.apache.lucene.index.IndexableField[] r5;
        org.apache.lucene.index.TermsHashPerField $r2, $r4;
        org.apache.lucene.index.IndexableFieldType $r7, $r8, $r9, $r10, $r11, $r36, $r37, $r38, $r39, $r58, $r59, $r60, $r67;
        int i0, $i1, i2;
        java.lang.IllegalArgumentException $r12, $r18, $r24, $r30, $r40, $r46, $r52, $r61;

        r0 := @this: org.apache.lucene.index.TermVectorsConsumerPerField;

        r5 := @parameter0: org.apache.lucene.index.IndexableField[];

        i0 := @parameter1: int;

        r0.<org.apache.lucene.index.TermVectorsConsumerPerField: boolean doVectors> = 0;

        r0.<org.apache.lucene.index.TermVectorsConsumerPerField: boolean doVectorPositions> = 0;

        r0.<org.apache.lucene.index.TermVectorsConsumerPerField: boolean doVectorOffsets> = 0;

        r0.<org.apache.lucene.index.TermVectorsConsumerPerField: boolean doVectorPayloads> = 0;

        r0.<org.apache.lucene.index.TermVectorsConsumerPerField: boolean hasPayloads> = 0;

        i2 = 0;

     label01:
        if i2 >= i0 goto label11;

        r6 = r5[i2];

        $r7 = interfaceinvoke r6.<org.apache.lucene.index.IndexableField: org.apache.lucene.index.IndexableFieldType fieldType()>();

        $z1 = interfaceinvoke $r7.<org.apache.lucene.index.IndexableFieldType: boolean indexed()>();

        if $z1 == 0 goto label06;

        $r36 = interfaceinvoke r6.<org.apache.lucene.index.IndexableField: org.apache.lucene.index.IndexableFieldType fieldType()>();

        $z6 = interfaceinvoke $r36.<org.apache.lucene.index.IndexableFieldType: boolean storeTermVectors()>();

        if $z6 == 0 goto label03;

        r0.<org.apache.lucene.index.TermVectorsConsumerPerField: boolean doVectors> = 1;

        $z10 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: boolean doVectorPositions>;

        $r58 = interfaceinvoke r6.<org.apache.lucene.index.IndexableField: org.apache.lucene.index.IndexableFieldType fieldType()>();

        $z11 = interfaceinvoke $r58.<org.apache.lucene.index.IndexableFieldType: boolean storeTermVectorPositions()>();

        $z12 = $z10 | $z11;

        r0.<org.apache.lucene.index.TermVectorsConsumerPerField: boolean doVectorPositions> = $z12;

        $z13 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: boolean doVectorOffsets>;

        $r59 = interfaceinvoke r6.<org.apache.lucene.index.IndexableField: org.apache.lucene.index.IndexableFieldType fieldType()>();

        $z14 = interfaceinvoke $r59.<org.apache.lucene.index.IndexableFieldType: boolean storeTermVectorOffsets()>();

        $z15 = $z13 | $z14;

        r0.<org.apache.lucene.index.TermVectorsConsumerPerField: boolean doVectorOffsets> = $z15;

        $z16 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: boolean doVectorPositions>;

        if $z16 == 0 goto label02;

        $z18 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: boolean doVectorPayloads>;

        $r67 = interfaceinvoke r6.<org.apache.lucene.index.IndexableField: org.apache.lucene.index.IndexableFieldType fieldType()>();

        $z19 = interfaceinvoke $r67.<org.apache.lucene.index.IndexableFieldType: boolean storeTermVectorPayloads()>();

        $z20 = $z18 | $z19;

        r0.<org.apache.lucene.index.TermVectorsConsumerPerField: boolean doVectorPayloads> = $z20;

        goto label10;

     label02:
        $r60 = interfaceinvoke r6.<org.apache.lucene.index.IndexableField: org.apache.lucene.index.IndexableFieldType fieldType()>();

        $z17 = interfaceinvoke $r60.<org.apache.lucene.index.IndexableFieldType: boolean storeTermVectorPayloads()>();

        if $z17 == 0 goto label10;

        $r61 = new java.lang.IllegalArgumentException;

        $r62 = new java.lang.StringBuilder;

        specialinvoke $r62.<java.lang.StringBuilder: void <init>()>();

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot index term vector payloads for field: ");

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" without term vector positions");

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r61.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r66);

        throw $r61;

     label03:
        $r37 = interfaceinvoke r6.<org.apache.lucene.index.IndexableField: org.apache.lucene.index.IndexableFieldType fieldType()>();

        $z7 = interfaceinvoke $r37.<org.apache.lucene.index.IndexableFieldType: boolean storeTermVectorOffsets()>();

        if $z7 == 0 goto label04;

        $r52 = new java.lang.IllegalArgumentException;

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot index term vector offsets when term vectors are not indexed (field=\"");

        $r55 = interfaceinvoke r6.<org.apache.lucene.index.IndexableField: java.lang.String name()>();

        $r56 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r55);

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r52.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r57);

        throw $r52;

     label04:
        $r38 = interfaceinvoke r6.<org.apache.lucene.index.IndexableField: org.apache.lucene.index.IndexableFieldType fieldType()>();

        $z8 = interfaceinvoke $r38.<org.apache.lucene.index.IndexableFieldType: boolean storeTermVectorPositions()>();

        if $z8 == 0 goto label05;

        $r46 = new java.lang.IllegalArgumentException;

        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>()>();

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot index term vector positions when term vectors are not indexed (field=\"");

        $r49 = interfaceinvoke r6.<org.apache.lucene.index.IndexableField: java.lang.String name()>();

        $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r49);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r46.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r51);

        throw $r46;

     label05:
        $r39 = interfaceinvoke r6.<org.apache.lucene.index.IndexableField: org.apache.lucene.index.IndexableFieldType fieldType()>();

        $z9 = interfaceinvoke $r39.<org.apache.lucene.index.IndexableFieldType: boolean storeTermVectorPayloads()>();

        if $z9 == 0 goto label10;

        $r40 = new java.lang.IllegalArgumentException;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot index term vector payloads when term vectors are not indexed (field=\"");

        $r43 = interfaceinvoke r6.<org.apache.lucene.index.IndexableField: java.lang.String name()>();

        $r44 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r40.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r45);

        throw $r40;

     label06:
        $r8 = interfaceinvoke r6.<org.apache.lucene.index.IndexableField: org.apache.lucene.index.IndexableFieldType fieldType()>();

        $z2 = interfaceinvoke $r8.<org.apache.lucene.index.IndexableFieldType: boolean storeTermVectors()>();

        if $z2 == 0 goto label07;

        $r30 = new java.lang.IllegalArgumentException;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot index term vectors when field is not indexed (field=\"");

        $r33 = interfaceinvoke r6.<org.apache.lucene.index.IndexableField: java.lang.String name()>();

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r35);

        throw $r30;

     label07:
        $r9 = interfaceinvoke r6.<org.apache.lucene.index.IndexableField: org.apache.lucene.index.IndexableFieldType fieldType()>();

        $z3 = interfaceinvoke $r9.<org.apache.lucene.index.IndexableFieldType: boolean storeTermVectorOffsets()>();

        if $z3 == 0 goto label08;

        $r24 = new java.lang.IllegalArgumentException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot index term vector offsets when field is not indexed (field=\"");

        $r27 = interfaceinvoke r6.<org.apache.lucene.index.IndexableField: java.lang.String name()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r29);

        throw $r24;

     label08:
        $r10 = interfaceinvoke r6.<org.apache.lucene.index.IndexableField: org.apache.lucene.index.IndexableFieldType fieldType()>();

        $z4 = interfaceinvoke $r10.<org.apache.lucene.index.IndexableFieldType: boolean storeTermVectorPositions()>();

        if $z4 == 0 goto label09;

        $r18 = new java.lang.IllegalArgumentException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot index term vector positions when field is not indexed (field=\"");

        $r21 = interfaceinvoke r6.<org.apache.lucene.index.IndexableField: java.lang.String name()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r23);

        throw $r18;

     label09:
        $r11 = interfaceinvoke r6.<org.apache.lucene.index.IndexableField: org.apache.lucene.index.IndexableFieldType fieldType()>();

        $z5 = interfaceinvoke $r11.<org.apache.lucene.index.IndexableFieldType: boolean storeTermVectorPayloads()>();

        if $z5 == 0 goto label10;

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot index term vector payloads when field is not indexed (field=\"");

        $r15 = interfaceinvoke r6.<org.apache.lucene.index.IndexableField: java.lang.String name()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r12;

     label10:
        i2 = i2 + 1;

        goto label01;

     label11:
        $z0 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: boolean doVectors>;

        if $z0 == 0 goto label12;

        $r1 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.index.TermVectorsConsumer termsWriter>;

        $r1.<org.apache.lucene.index.TermVectorsConsumer: boolean hasVectors> = 1;

        $r2 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.index.TermsHashPerField termsHashPerField>;

        $r3 = $r2.<org.apache.lucene.index.TermsHashPerField: org.apache.lucene.util.BytesRefHash bytesHash>;

        $i1 = virtualinvoke $r3.<org.apache.lucene.util.BytesRefHash: int size()>();

        if $i1 == 0 goto label12;

        $r4 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.index.TermsHashPerField termsHashPerField>;

        virtualinvoke $r4.<org.apache.lucene.index.TermsHashPerField: void reset()>();

     label12:
        $z21 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: boolean doVectors>;

        return $z21;
    }

    public void abort()
    {
        org.apache.lucene.index.TermVectorsConsumerPerField r0;

        r0 := @this: org.apache.lucene.index.TermVectorsConsumerPerField;

        return;
    }

    void finish()
    {
        org.apache.lucene.index.TermVectorsConsumer $r3;
        org.apache.lucene.index.TermVectorsConsumerPerField r0;
        org.apache.lucene.util.BytesRefHash $r2;
        int $i0;
        org.apache.lucene.index.TermsHashPerField $r1;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.TermVectorsConsumerPerField;

        $z0 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: boolean doVectors>;

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.index.TermsHashPerField termsHashPerField>;

        $r2 = $r1.<org.apache.lucene.index.TermsHashPerField: org.apache.lucene.util.BytesRefHash bytesHash>;

        $i0 = virtualinvoke $r2.<org.apache.lucene.util.BytesRefHash: int size()>();

        if $i0 != 0 goto label2;

     label1:
        return;

     label2:
        $r3 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.index.TermVectorsConsumer termsWriter>;

        virtualinvoke $r3.<org.apache.lucene.index.TermVectorsConsumer: void addFieldToFlush(org.apache.lucene.index.TermVectorsConsumerPerField)>(r0);

        return;
    }

    void finishDocument() throws java.io.IOException
    {
        org.apache.lucene.index.TermVectorsConsumer $r3, $r6, $r20, $r22, $r24;
        org.apache.lucene.util.BytesRefHash $r2;
        int[] $r9, $r16, $r17;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        org.apache.lucene.util.BytesRef $r30;
        org.apache.lucene.index.TermVectorsConsumerPerField r0;
        org.apache.lucene.codecs.TermVectorsWriter $r26;
        org.apache.lucene.index.TermsHashPerField $r1, $r4, $r7, $r13, $r14, $r18, $r19;
        org.apache.lucene.index.ParallelPostingsArray $r5;
        java.lang.AssertionError $r27, $r28, $r31;
        org.apache.lucene.util.ByteBlockPool $r21;
        int $i0, $i1, i2, i3, $i4, i5;
        org.apache.lucene.index.DocumentsWriterPerThread$DocState $r29;
        org.apache.lucene.index.ByteSliceReader r11, r12, $r32, $r33;
        org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray $r25;
        org.apache.lucene.index.FieldInfo $r10, $r15, $r23;
        java.util.Comparator $r8;

        r0 := @this: org.apache.lucene.index.TermVectorsConsumerPerField;

        $z0 = <org.apache.lucene.index.TermVectorsConsumerPerField: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $r29 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.index.DocumentsWriterPerThread$DocState docState>;

        $z11 = virtualinvoke $r29.<org.apache.lucene.index.DocumentsWriterPerThread$DocState: boolean testPoint(java.lang.String)>("TermVectorsTermsWriterPerField.finish start");

        if $z11 != 0 goto label01;

        $r31 = new java.lang.AssertionError;

        specialinvoke $r31.<java.lang.AssertionError: void <init>()>();

        throw $r31;

     label01:
        $r1 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.index.TermsHashPerField termsHashPerField>;

        $r2 = $r1.<org.apache.lucene.index.TermsHashPerField: org.apache.lucene.util.BytesRefHash bytesHash>;

        $i0 = virtualinvoke $r2.<org.apache.lucene.util.BytesRefHash: int size()>();

        $r3 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.index.TermVectorsConsumer termsWriter>;

        $r30 = $r3.<org.apache.lucene.index.TermVectorsConsumer: org.apache.lucene.util.BytesRef flushTerm>;

        $z1 = <org.apache.lucene.index.TermVectorsConsumerPerField: boolean $assertionsDisabled>;

        if $z1 != 0 goto label02;

        if $i0 >= 0 goto label02;

        $r28 = new java.lang.AssertionError;

        specialinvoke $r28.<java.lang.AssertionError: void <init>()>();

        throw $r28;

     label02:
        $i1 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: int maxNumPostings>;

        if $i0 <= $i1 goto label03;

        r0.<org.apache.lucene.index.TermVectorsConsumerPerField: int maxNumPostings> = $i0;

     label03:
        $z2 = <org.apache.lucene.index.TermVectorsConsumerPerField: boolean $assertionsDisabled>;

        if $z2 != 0 goto label04;

        $r24 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.index.TermVectorsConsumer termsWriter>;

        $r23 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.index.FieldInfo fieldInfo>;

        $z10 = virtualinvoke $r24.<org.apache.lucene.index.TermVectorsConsumer: boolean vectorFieldsInOrder(org.apache.lucene.index.FieldInfo)>($r23);

        if $z10 != 0 goto label04;

        $r27 = new java.lang.AssertionError;

        specialinvoke $r27.<java.lang.AssertionError: void <init>()>();

        throw $r27;

     label04:
        $r4 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.index.TermsHashPerField termsHashPerField>;

        $r5 = $r4.<org.apache.lucene.index.TermsHashPerField: org.apache.lucene.index.ParallelPostingsArray postingsArray>;

        $r25 = (org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray) $r5;

        $r6 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.index.TermVectorsConsumer termsWriter>;

        $r26 = $r6.<org.apache.lucene.index.TermVectorsConsumer: org.apache.lucene.codecs.TermVectorsWriter writer>;

        $r7 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.index.TermsHashPerField termsHashPerField>;

        $r8 = virtualinvoke $r26.<org.apache.lucene.codecs.TermVectorsWriter: java.util.Comparator getComparator()>();

        $r9 = virtualinvoke $r7.<org.apache.lucene.index.TermsHashPerField: int[] sortPostings(java.util.Comparator)>($r8);

        $r10 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.index.FieldInfo fieldInfo>;

        $z5 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: boolean doVectorPositions>;

        $z4 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: boolean doVectorOffsets>;

        $z3 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: boolean hasPayloads>;

        virtualinvoke $r26.<org.apache.lucene.codecs.TermVectorsWriter: void startField(org.apache.lucene.index.FieldInfo,int,boolean,boolean,boolean)>($r10, $i0, $z5, $z4, $z3);

        $z6 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: boolean doVectorPositions>;

        if $z6 == 0 goto label05;

        $r22 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.index.TermVectorsConsumer termsWriter>;

        $r32 = $r22.<org.apache.lucene.index.TermVectorsConsumer: org.apache.lucene.index.ByteSliceReader vectorSliceReaderPos>;

        goto label06;

     label05:
        $r32 = null;

     label06:
        r11 = $r32;

        $z7 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: boolean doVectorOffsets>;

        if $z7 == 0 goto label07;

        $r20 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.index.TermVectorsConsumer termsWriter>;

        $r33 = $r20.<org.apache.lucene.index.TermVectorsConsumer: org.apache.lucene.index.ByteSliceReader vectorSliceReaderOff>;

        goto label08;

     label07:
        $r33 = null;

     label08:
        r12 = $r33;

        $r13 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.index.TermsHashPerField termsHashPerField>;

        $r21 = $r13.<org.apache.lucene.index.TermsHashPerField: org.apache.lucene.util.ByteBlockPool termBytePool>;

        i5 = 0;

     label09:
        if i5 >= $i0 goto label14;

        i2 = $r9[i5];

        $r16 = $r25.<org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray: int[] freqs>;

        i3 = $r16[i2];

        $r17 = $r25.<org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray: int[] textStarts>;

        $i4 = $r17[i2];

        virtualinvoke $r21.<org.apache.lucene.util.ByteBlockPool: void setBytesRef(org.apache.lucene.util.BytesRef,int)>($r30, $i4);

        virtualinvoke $r26.<org.apache.lucene.codecs.TermVectorsWriter: void startTerm(org.apache.lucene.util.BytesRef,int)>($r30, i3);

        $z8 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: boolean doVectorPositions>;

        if $z8 != 0 goto label10;

        $z9 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: boolean doVectorOffsets>;

        if $z9 == 0 goto label13;

     label10:
        if r11 == null goto label11;

        $r19 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.index.TermsHashPerField termsHashPerField>;

        virtualinvoke $r19.<org.apache.lucene.index.TermsHashPerField: void initReader(org.apache.lucene.index.ByteSliceReader,int,int)>(r11, i2, 0);

     label11:
        if r12 == null goto label12;

        $r18 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.index.TermsHashPerField termsHashPerField>;

        virtualinvoke $r18.<org.apache.lucene.index.TermsHashPerField: void initReader(org.apache.lucene.index.ByteSliceReader,int,int)>(r12, i2, 1);

     label12:
        virtualinvoke $r26.<org.apache.lucene.codecs.TermVectorsWriter: void addProx(int,org.apache.lucene.store.DataInput,org.apache.lucene.store.DataInput)>(i3, r11, r12);

     label13:
        virtualinvoke $r26.<org.apache.lucene.codecs.TermVectorsWriter: void finishTerm()>();

        i5 = i5 + 1;

        goto label09;

     label14:
        virtualinvoke $r26.<org.apache.lucene.codecs.TermVectorsWriter: void finishField()>();

        $r14 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.index.TermsHashPerField termsHashPerField>;

        virtualinvoke $r14.<org.apache.lucene.index.TermsHashPerField: void reset()>();

        $r15 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.index.FieldInfo fieldInfo>;

        virtualinvoke $r15.<org.apache.lucene.index.FieldInfo: void setStoreTermVectors()>();

        return;
    }

    void shrinkHash()
    {
        int $i0;
        org.apache.lucene.index.TermsHashPerField $r1;
        org.apache.lucene.index.TermVectorsConsumerPerField r0;

        r0 := @this: org.apache.lucene.index.TermVectorsConsumerPerField;

        $r1 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.index.TermsHashPerField termsHashPerField>;

        $i0 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: int maxNumPostings>;

        virtualinvoke $r1.<org.apache.lucene.index.TermsHashPerField: void shrinkHash(int)>($i0);

        r0.<org.apache.lucene.index.TermVectorsConsumerPerField: int maxNumPostings> = 0;

        return;
    }

    void start(org.apache.lucene.index.IndexableField)
    {
        org.apache.lucene.analysis.tokenattributes.PayloadAttribute $r6;
        org.apache.lucene.index.IndexableField r11;
        org.apache.lucene.analysis.tokenattributes.OffsetAttribute $r10;
        org.apache.lucene.index.TermVectorsConsumerPerField r0;
        org.apache.lucene.index.FieldInvertState $r1, $r3, $r7;
        org.apache.lucene.util.AttributeSource $r2, $r4, $r8;
        org.apache.lucene.util.Attribute $r5, $r9;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.lucene.index.TermVectorsConsumerPerField;

        r11 := @parameter0: org.apache.lucene.index.IndexableField;

        $z0 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: boolean doVectorOffsets>;

        if $z0 == 0 goto label1;

        $r7 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.index.FieldInvertState fieldState>;

        $r8 = $r7.<org.apache.lucene.index.FieldInvertState: org.apache.lucene.util.AttributeSource attributeSource>;

        $r9 = virtualinvoke $r8.<org.apache.lucene.util.AttributeSource: org.apache.lucene.util.Attribute addAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/OffsetAttribute;");

        $r10 = (org.apache.lucene.analysis.tokenattributes.OffsetAttribute) $r9;

        r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.analysis.tokenattributes.OffsetAttribute offsetAttribute> = $r10;

        goto label2;

     label1:
        r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.analysis.tokenattributes.OffsetAttribute offsetAttribute> = null;

     label2:
        $z1 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: boolean doVectorPayloads>;

        if $z1 == 0 goto label3;

        $r1 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.index.FieldInvertState fieldState>;

        $r2 = $r1.<org.apache.lucene.index.FieldInvertState: org.apache.lucene.util.AttributeSource attributeSource>;

        $z2 = virtualinvoke $r2.<org.apache.lucene.util.AttributeSource: boolean hasAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/PayloadAttribute;");

        if $z2 == 0 goto label3;

        $r3 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.index.FieldInvertState fieldState>;

        $r4 = $r3.<org.apache.lucene.index.FieldInvertState: org.apache.lucene.util.AttributeSource attributeSource>;

        $r5 = virtualinvoke $r4.<org.apache.lucene.util.AttributeSource: org.apache.lucene.util.Attribute getAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/PayloadAttribute;");

        $r6 = (org.apache.lucene.analysis.tokenattributes.PayloadAttribute) $r5;

        r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.analysis.tokenattributes.PayloadAttribute payloadAttribute> = $r6;

        goto label4;

     label3:
        r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.analysis.tokenattributes.PayloadAttribute payloadAttribute> = null;

     label4:
        return;
    }

    void writeProx(org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray, int)
    {
        byte[] $r9;
        int[] $r5, $r15, $r18, $r20;
        boolean $z0, $z1;
        org.apache.lucene.util.BytesRef r19;
        org.apache.lucene.analysis.tokenattributes.OffsetAttribute $r12, $r14;
        org.apache.lucene.index.TermVectorsConsumerPerField r0;
        org.apache.lucene.index.FieldInvertState $r3, $r11, $r13, $r21;
        org.apache.lucene.index.TermsHashPerField $r6, $r7, $r8, $r10, $r16, $r17;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i18, i19, $i20;
        org.apache.lucene.analysis.tokenattributes.PayloadAttribute $r1, $r2;
        org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray r4;

        r0 := @this: org.apache.lucene.index.TermVectorsConsumerPerField;

        r4 := @parameter0: org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray;

        i0 := @parameter1: int;

        $z0 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: boolean doVectorOffsets>;

        if $z0 == 0 goto label1;

        $r11 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.index.FieldInvertState fieldState>;

        $i11 = $r11.<org.apache.lucene.index.FieldInvertState: int offset>;

        $r12 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.analysis.tokenattributes.OffsetAttribute offsetAttribute>;

        $i12 = interfaceinvoke $r12.<org.apache.lucene.analysis.tokenattributes.OffsetAttribute: int startOffset()>();

        i18 = $i11 + $i12;

        $r13 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.index.FieldInvertState fieldState>;

        $i13 = $r13.<org.apache.lucene.index.FieldInvertState: int offset>;

        $r14 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.analysis.tokenattributes.OffsetAttribute offsetAttribute>;

        $i14 = interfaceinvoke $r14.<org.apache.lucene.analysis.tokenattributes.OffsetAttribute: int endOffset()>();

        i19 = $i13 + $i14;

        $r16 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.index.TermsHashPerField termsHashPerField>;

        $r15 = r4.<org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray: int[] lastOffsets>;

        $i15 = $r15[i0];

        $i16 = i18 - $i15;

        virtualinvoke $r16.<org.apache.lucene.index.TermsHashPerField: void writeVInt(int,int)>(1, $i16);

        $r17 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.index.TermsHashPerField termsHashPerField>;

        $i17 = i19 - i18;

        virtualinvoke $r17.<org.apache.lucene.index.TermsHashPerField: void writeVInt(int,int)>(1, $i17);

        $r18 = r4.<org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray: int[] lastOffsets>;

        $r18[i0] = i19;

     label1:
        $z1 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: boolean doVectorPositions>;

        if $z1 == 0 goto label6;

        $r1 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.analysis.tokenattributes.PayloadAttribute payloadAttribute>;

        if $r1 != null goto label2;

        r19 = null;

        goto label3;

     label2:
        $r2 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.analysis.tokenattributes.PayloadAttribute payloadAttribute>;

        r19 = interfaceinvoke $r2.<org.apache.lucene.analysis.tokenattributes.PayloadAttribute: org.apache.lucene.util.BytesRef getPayload()>();

     label3:
        $r3 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.index.FieldInvertState fieldState>;

        $i2 = $r3.<org.apache.lucene.index.FieldInvertState: int position>;

        $r5 = r4.<org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray: int[] lastPositions>;

        $i1 = $r5[i0];

        $i10 = $i2 - $i1;

        if r19 == null goto label4;

        $i4 = r19.<org.apache.lucene.util.BytesRef: int length>;

        if $i4 <= 0 goto label4;

        $r7 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.index.TermsHashPerField termsHashPerField>;

        $i5 = $i10 << 1;

        $i6 = $i5 | 1;

        virtualinvoke $r7.<org.apache.lucene.index.TermsHashPerField: void writeVInt(int,int)>(0, $i6);

        $r8 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.index.TermsHashPerField termsHashPerField>;

        $i7 = r19.<org.apache.lucene.util.BytesRef: int length>;

        virtualinvoke $r8.<org.apache.lucene.index.TermsHashPerField: void writeVInt(int,int)>(0, $i7);

        $r10 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.index.TermsHashPerField termsHashPerField>;

        $r9 = r19.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        $i9 = r19.<org.apache.lucene.util.BytesRef: int offset>;

        $i8 = r19.<org.apache.lucene.util.BytesRef: int length>;

        virtualinvoke $r10.<org.apache.lucene.index.TermsHashPerField: void writeBytes(int,byte[],int,int)>(0, $r9, $i9, $i8);

        r0.<org.apache.lucene.index.TermVectorsConsumerPerField: boolean hasPayloads> = 1;

        goto label5;

     label4:
        $r6 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.index.TermsHashPerField termsHashPerField>;

        $i3 = $i10 << 1;

        virtualinvoke $r6.<org.apache.lucene.index.TermsHashPerField: void writeVInt(int,int)>(0, $i3);

     label5:
        $r20 = r4.<org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray: int[] lastPositions>;

        $r21 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.index.FieldInvertState fieldState>;

        $i20 = $r21.<org.apache.lucene.index.FieldInvertState: int position>;

        $r20[i0] = $i20;

     label6:
        return;
    }

    void newTerm(int)
    {
        org.apache.lucene.index.TermsHashPerField $r1;
        org.apache.lucene.index.ParallelPostingsArray $r2;
        java.lang.AssertionError $r8;
        org.apache.lucene.index.TermVectorsConsumerPerField r0;
        org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray $r7;
        int[] $r3, $r4, $r5;
        int i0;
        org.apache.lucene.index.DocumentsWriterPerThread$DocState $r6;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.index.TermVectorsConsumerPerField;

        i0 := @parameter0: int;

        $z0 = <org.apache.lucene.index.TermVectorsConsumerPerField: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r6 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.index.DocumentsWriterPerThread$DocState docState>;

        $z1 = virtualinvoke $r6.<org.apache.lucene.index.DocumentsWriterPerThread$DocState: boolean testPoint(java.lang.String)>("TermVectorsTermsWriterPerField.newTerm start");

        if $z1 != 0 goto label1;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label1:
        $r1 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.index.TermsHashPerField termsHashPerField>;

        $r2 = $r1.<org.apache.lucene.index.TermsHashPerField: org.apache.lucene.index.ParallelPostingsArray postingsArray>;

        $r7 = (org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray) $r2;

        $r3 = $r7.<org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray: int[] freqs>;

        $r3[i0] = 1;

        $r4 = $r7.<org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray: int[] lastOffsets>;

        $r4[i0] = 0;

        $r5 = $r7.<org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray: int[] lastPositions>;

        $r5[i0] = 0;

        virtualinvoke r0.<org.apache.lucene.index.TermVectorsConsumerPerField: void writeProx(org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray,int)>($r7, i0);

        return;
    }

    void addTerm(int)
    {
        org.apache.lucene.index.TermsHashPerField $r1;
        org.apache.lucene.index.ParallelPostingsArray $r2;
        java.lang.AssertionError $r6;
        org.apache.lucene.index.TermVectorsConsumerPerField r0;
        org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray $r5;
        int[] $r3;
        int i0, $i1, $i2;
        org.apache.lucene.index.DocumentsWriterPerThread$DocState $r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.index.TermVectorsConsumerPerField;

        i0 := @parameter0: int;

        $z0 = <org.apache.lucene.index.TermVectorsConsumerPerField: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r4 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.index.DocumentsWriterPerThread$DocState docState>;

        $z1 = virtualinvoke $r4.<org.apache.lucene.index.DocumentsWriterPerThread$DocState: boolean testPoint(java.lang.String)>("TermVectorsTermsWriterPerField.addTerm start");

        if $z1 != 0 goto label1;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label1:
        $r1 = r0.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.index.TermsHashPerField termsHashPerField>;

        $r2 = $r1.<org.apache.lucene.index.TermsHashPerField: org.apache.lucene.index.ParallelPostingsArray postingsArray>;

        $r5 = (org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray) $r2;

        $r3 = $r5.<org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray: int[] freqs>;

        $i1 = $r3[i0];

        $i2 = $i1 + 1;

        $r3[i0] = $i2;

        virtualinvoke r0.<org.apache.lucene.index.TermVectorsConsumerPerField: void writeProx(org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray,int)>($r5, i0);

        return;
    }

    void skippingLongTerm()
    {
        org.apache.lucene.index.TermVectorsConsumerPerField r0;

        r0 := @this: org.apache.lucene.index.TermVectorsConsumerPerField;

        return;
    }

    org.apache.lucene.index.ParallelPostingsArray createPostingsArray(int)
    {
        int i0;
        org.apache.lucene.index.TermVectorsConsumerPerField r1;
        org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray $r0;

        r1 := @this: org.apache.lucene.index.TermVectorsConsumerPerField;

        i0 := @parameter0: int;

        $r0 = new org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray;

        specialinvoke $r0.<org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray: void <init>(int)>(i0);

        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/index/TermVectorsConsumerPerField;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.index.TermVectorsConsumerPerField: boolean $assertionsDisabled> = $z1;

        return;
    }
}
