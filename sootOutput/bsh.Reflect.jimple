class bsh.Reflect extends java.lang.Object
{

    void <init>()
    {
        bsh.Reflect r0;

        r0 := @this: bsh.Reflect;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.Object invokeObjectMethod(java.lang.Object, java.lang.String, java.lang.Object[], bsh.Interpreter, bsh.CallStack, bsh.SimpleNode) throws bsh.ReflectError, bsh.EvalError, java.lang.reflect.InvocationTargetException
    {
        java.lang.Object[] r4;
        bsh.UtilEvalError $r11;
        bsh.SimpleNode r8;
        bsh.CallStack r7;
        bsh.BshClassManager $r13;
        bsh.This $r9;
        java.lang.String r3;
        java.lang.reflect.Method $r5;
        boolean $z0, $z1;
        bsh.EvalError $r12;
        bsh.Interpreter r1;
        java.lang.Object r0, $r6, $r10;
        java.lang.Class $r2;

        r0 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.Object[];

        r1 := @parameter3: bsh.Interpreter;

        r7 := @parameter4: bsh.CallStack;

        r8 := @parameter5: bsh.SimpleNode;

        $z0 = r0 instanceof bsh.This;

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <bsh.This: boolean isExposedThisMethod(java.lang.String)>(r3);

        if $z1 != 0 goto label1;

        $r9 = (bsh.This) r0;

        $r10 = virtualinvoke $r9.<bsh.This: java.lang.Object invokeMethod(java.lang.String,java.lang.Object[],bsh.Interpreter,bsh.CallStack,bsh.SimpleNode,boolean)>(r3, r4, r1, r7, r8, 0);

        return $r10;

     label1:
        if r1 != null goto label2;

        $r13 = null;

        goto label3;

     label2:
        $r13 = virtualinvoke r1.<bsh.Interpreter: bsh.BshClassManager getClassManager()>();

     label3:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = staticinvoke <bsh.Reflect: java.lang.reflect.Method resolveExpectedJavaMethod(bsh.BshClassManager,java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[],boolean)>($r13, $r2, r0, r3, r4, 0);

        $r6 = staticinvoke <bsh.Reflect: java.lang.Object invokeMethod(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>($r5, r0, r4);

     label4:
        return $r6;

     label5:
        $r11 := @caughtexception;

        $r12 = virtualinvoke $r11.<bsh.UtilEvalError: bsh.EvalError toEvalError(bsh.SimpleNode,bsh.CallStack)>(r8, r7);

        throw $r12;

        catch bsh.UtilEvalError from label1 to label4 with label5;
    }

    public static java.lang.Object invokeStaticMethod(bsh.BshClassManager, java.lang.Class, java.lang.String, java.lang.Object[]) throws bsh.ReflectError, bsh.UtilEvalError, java.lang.reflect.InvocationTargetException
    {
        java.lang.Object[] r3;
        java.lang.Class r1;
        java.lang.Object $r5;
        java.lang.String r2;
        java.lang.reflect.Method $r4;
        bsh.BshClassManager r0;

        r0 := @parameter0: bsh.BshClassManager;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.Object[];

        staticinvoke <bsh.Interpreter: void debug(java.lang.String)>("invoke static Method");

        $r4 = staticinvoke <bsh.Reflect: java.lang.reflect.Method resolveExpectedJavaMethod(bsh.BshClassManager,java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[],boolean)>(r0, r1, null, r2, r3, 1);

        $r5 = staticinvoke <bsh.Reflect: java.lang.Object invokeMethod(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>($r4, null, r3);

        return $r5;
    }

    static java.lang.Object invokeMethod(java.lang.reflect.Method, java.lang.Object, java.lang.Object[]) throws bsh.ReflectError, java.lang.reflect.InvocationTargetException
    {
        java.lang.reflect.Method r0;
        java.lang.IllegalAccessException $r11;
        bsh.InterpreterError $r26;
        java.lang.Object[] $r5, $r10, r31;
        bsh.UtilEvalError $r25;
        java.lang.StringBuffer $r13, $r14, $r18, $r19, $r21, $r22, $r23, $r27, $r28, $r29;
        int $i0, $i1, i2;
        java.lang.String $r15, $r17, $r24, $r30;
        bsh.ReflectError $r12;
        java.lang.Class[] $r1, $r16;
        java.lang.Class $r2, $r8, $r20;
        java.lang.Object $r3, $r4, r6, $r7, $r9, r32;

        r0 := @parameter0: java.lang.reflect.Method;

        r6 := @parameter1: java.lang.Object;

        r31 := @parameter2: java.lang.Object[];

        if r31 != null goto label01;

        r31 = newarray (java.lang.Object)[0];

     label01:
        staticinvoke <bsh.Reflect: void logInvokeMethod(java.lang.String,java.lang.reflect.Method,java.lang.Object[])>("Invoking method (entry): ", r0, r31);

        $i0 = lengthof r31;

        $r10 = newarray (java.lang.Object)[$i0];

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

     label02:
        i2 = 0;

        goto label04;

     label03:
        $r3 = r31[i2];

        $r2 = $r1[i2];

        $r4 = staticinvoke <bsh.Types: java.lang.Object castObject(java.lang.Object,java.lang.Class,int)>($r3, $r2, 1);

        $r10[i2] = $r4;

        i2 = i2 + 1;

     label04:
        $i1 = lengthof r31;

        if i2 < $i1 goto label03;

     label05:
        goto label07;

     label06:
        $r25 := @caughtexception;

        $r26 = new bsh.InterpreterError;

        $r27 = new java.lang.StringBuffer;

        specialinvoke $r27.<java.lang.StringBuffer: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("illegal argument type in method invocation: ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r25);

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r26.<bsh.InterpreterError: void <init>(java.lang.String)>($r30);

        throw $r26;

     label07:
        $r5 = staticinvoke <bsh.Primitive: java.lang.Object[] unwrap(java.lang.Object[])>($r10);

        staticinvoke <bsh.Reflect: void logInvokeMethod(java.lang.String,java.lang.reflect.Method,java.lang.Object[])>("Invoking method (after massaging values): ", r0, $r5);

     label08:
        $r7 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r6, $r5);

        r32 = $r7;

        if $r7 != null goto label09;

        r32 = <bsh.Primitive: bsh.Primitive NULL>;

     label09:
        $r8 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r9 = staticinvoke <bsh.Primitive: java.lang.Object wrap(java.lang.Object,java.lang.Class)>(r32, $r8);

     label10:
        return $r9;

     label11:
        $r11 := @caughtexception;

        $r12 = new bsh.ReflectError;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot access method ");

        $r15 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        $r16 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r17 = staticinvoke <bsh.StringUtil: java.lang.String methodString(java.lang.String,java.lang.Class[])>($r15, $r16);

        $r18 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" in \'");

        $r20 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' :");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r11);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r12.<bsh.ReflectError: void <init>(java.lang.String)>($r24);

        throw $r12;

        catch bsh.UtilEvalError from label02 to label05 with label06;
        catch java.lang.IllegalAccessException from label08 to label10 with label11;
    }

    public static java.lang.Object getIndex(java.lang.Object, int) throws bsh.ReflectError, bsh.UtilTargetError
    {
        bsh.UtilTargetError $r18;
        java.lang.StringBuffer $r5, $r6, $r7, $r8, $r9, $r13, $r14, $r15;
        int i0;
        java.lang.String $r10, $r16;
        boolean $z0;
        bsh.ReflectError $r12;
        java.lang.ArrayIndexOutOfBoundsException $r17;
        java.lang.Exception $r11;
        java.lang.Object r0, $r1, $r4;
        java.lang.Class $r2, $r3;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $z0 = <bsh.Interpreter: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("getIndex: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", index=");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <bsh.Interpreter: void debug(java.lang.String)>($r10);

     label1:
        $r1 = staticinvoke <java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>(r0, i0);

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.Class getComponentType()>();

        $r4 = staticinvoke <bsh.Primitive: java.lang.Object wrap(java.lang.Object,java.lang.Class)>($r1, $r3);

     label2:
        return $r4;

     label3:
        $r17 := @caughtexception;

        $r18 = new bsh.UtilTargetError;

        specialinvoke $r18.<bsh.UtilTargetError: void <init>(java.lang.Throwable)>($r17);

        throw $r18;

     label4:
        $r11 := @caughtexception;

        $r12 = new bsh.ReflectError;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Array access:");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r11);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r12.<bsh.ReflectError: void <init>(java.lang.String)>($r16);

        throw $r12;

        catch java.lang.ArrayIndexOutOfBoundsException from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label4;
    }

    public static void setIndex(java.lang.Object, int, java.lang.Object) throws bsh.ReflectError, bsh.UtilTargetError
    {
        bsh.UtilTargetError $r9, $r13;
        java.lang.StringBuffer $r4, $r5, $r6;
        int i0;
        java.lang.String $r7, $r11;
        bsh.ReflectError $r3;
        java.lang.IllegalArgumentException $r8;
        java.lang.Exception $r2;
        java.lang.Object $r0, r1, r14;
        java.lang.ArrayStoreException $r10, $r12;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        r14 := @parameter2: java.lang.Object;

     label1:
        $r0 = staticinvoke <bsh.Primitive: java.lang.Object unwrap(java.lang.Object)>(r14);

        staticinvoke <java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>(r1, i0, $r0);

     label2:
        goto label6;

     label3:
        $r12 := @caughtexception;

        $r13 = new bsh.UtilTargetError;

        specialinvoke $r13.<bsh.UtilTargetError: void <init>(java.lang.Throwable)>($r12);

        throw $r13;

     label4:
        $r8 := @caughtexception;

        $r9 = new bsh.UtilTargetError;

        $r10 = new java.lang.ArrayStoreException;

        $r11 = virtualinvoke $r8.<java.lang.IllegalArgumentException: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.ArrayStoreException: void <init>(java.lang.String)>($r11);

        specialinvoke $r9.<bsh.UtilTargetError: void <init>(java.lang.Throwable)>($r10);

        throw $r9;

     label5:
        $r2 := @caughtexception;

        $r3 = new bsh.ReflectError;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Array access:");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<bsh.ReflectError: void <init>(java.lang.String)>($r7);

        throw $r3;

     label6:
        return;

        catch java.lang.ArrayStoreException from label1 to label2 with label3;
        catch java.lang.IllegalArgumentException from label1 to label2 with label4;
        catch java.lang.Exception from label1 to label2 with label5;
    }

    public static java.lang.Object getStaticFieldValue(java.lang.Class, java.lang.String) throws bsh.UtilEvalError, bsh.ReflectError
    {
        java.lang.Class r0;
        java.lang.Object $r2;
        java.lang.String r1;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <bsh.Reflect: java.lang.Object getFieldValue(java.lang.Class,java.lang.Object,java.lang.String,boolean)>(r0, null, r1, 1);

        return $r2;
    }

    public static java.lang.Object getObjectFieldValue(java.lang.Object, java.lang.String) throws bsh.UtilEvalError, bsh.ReflectError
    {
        bsh.ReflectError $r7;
        bsh.NameSpace $r5;
        bsh.This $r4;
        java.lang.Object r0, $r3, $r6, $r9;
        java.lang.Class $r1, $r8;
        java.lang.String r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        $z0 = r0 instanceof bsh.This;

        if $z0 == 0 goto label1;

        $r4 = (bsh.This) r0;

        $r5 = $r4.<bsh.This: bsh.NameSpace namespace>;

        $r6 = virtualinvoke $r5.<bsh.NameSpace: java.lang.Object getVariable(java.lang.String)>(r2);

        return $r6;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = staticinvoke <bsh.Reflect: java.lang.Object getFieldValue(java.lang.Class,java.lang.Object,java.lang.String,boolean)>($r1, r0, r2, 0);

     label2:
        return $r3;

     label3:
        $r7 := @caughtexception;

        $r8 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = staticinvoke <bsh.Reflect: boolean hasObjectPropertyGetter(java.lang.Class,java.lang.String)>($r8, r2);

        if $z1 == 0 goto label4;

        $r9 = staticinvoke <bsh.Reflect: java.lang.Object getObjectProperty(java.lang.Object,java.lang.String)>(r0, r2);

        return $r9;

     label4:
        throw $r7;

        catch bsh.ReflectError from label1 to label2 with label3;
    }

    static bsh.LHS getLHSStaticField(java.lang.Class, java.lang.String) throws bsh.UtilEvalError, bsh.ReflectError
    {
        java.lang.Class r0;
        java.lang.String r1;
        java.lang.reflect.Field $r2;
        bsh.LHS $r3;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <bsh.Reflect: java.lang.reflect.Field resolveExpectedJavaField(java.lang.Class,java.lang.String,boolean)>(r0, r1, 1);

        $r3 = new bsh.LHS;

        specialinvoke $r3.<bsh.LHS: void <init>(java.lang.reflect.Field)>($r2);

        return $r3;
    }

    static bsh.LHS getLHSObjectField(java.lang.Object, java.lang.String) throws bsh.UtilEvalError, bsh.ReflectError
    {
        bsh.ReflectError $r8;
        bsh.NameSpace $r7;
        java.lang.reflect.Field $r3;
        bsh.LHS $r4, $r5, $r10;
        bsh.This $r6;
        java.lang.Object r0;
        java.lang.Class $r1, $r9;
        java.lang.String r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        $z0 = r0 instanceof bsh.This;

        if $z0 == 0 goto label1;

        $r5 = new bsh.LHS;

        $r6 = (bsh.This) r0;

        $r7 = $r6.<bsh.This: bsh.NameSpace namespace>;

        specialinvoke $r5.<bsh.LHS: void <init>(bsh.NameSpace,java.lang.String,boolean)>($r7, r2, 0);

        return $r5;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = staticinvoke <bsh.Reflect: java.lang.reflect.Field resolveExpectedJavaField(java.lang.Class,java.lang.String,boolean)>($r1, r2, 0);

        $r4 = new bsh.LHS;

        specialinvoke $r4.<bsh.LHS: void <init>(java.lang.Object,java.lang.reflect.Field)>(r0, $r3);

     label2:
        return $r4;

     label3:
        $r8 := @caughtexception;

        $r9 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = staticinvoke <bsh.Reflect: boolean hasObjectPropertySetter(java.lang.Class,java.lang.String)>($r9, r2);

        if $z1 == 0 goto label4;

        $r10 = new bsh.LHS;

        specialinvoke $r10.<bsh.LHS: void <init>(java.lang.Object,java.lang.String)>(r0, r2);

        return $r10;

     label4:
        throw $r8;

        catch bsh.ReflectError from label1 to label2 with label3;
    }

    private static java.lang.Object getFieldValue(java.lang.Class, java.lang.Object, java.lang.String, boolean) throws bsh.UtilEvalError, bsh.ReflectError
    {
        java.lang.NullPointerException $r13;
        java.lang.StringBuffer $r9, $r10, $r11, $r15, $r16, $r17, $r18;
        java.lang.String r1, $r12, $r19;
        boolean z0;
        bsh.ReflectError $r8, $r14;
        java.lang.IllegalAccessException $r7;
        java.lang.reflect.Field $r2;
        java.lang.Class r0, $r5;
        java.lang.Object r3, $r4, $r6;

        r0 := @parameter0: java.lang.Class;

        r3 := @parameter1: java.lang.Object;

        r1 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

     label1:
        $r2 = staticinvoke <bsh.Reflect: java.lang.reflect.Field resolveExpectedJavaField(java.lang.Class,java.lang.String,boolean)>(r0, r1, z0);

        $r4 = virtualinvoke $r2.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r3);

        $r5 = virtualinvoke $r2.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r6 = staticinvoke <bsh.Primitive: java.lang.Object wrap(java.lang.Object,java.lang.Class)>($r4, $r5);

     label2:
        return $r6;

     label3:
        $r13 := @caughtexception;

        $r14 = new bsh.ReflectError;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("???");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not a static field.");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r14.<bsh.ReflectError: void <init>(java.lang.String)>($r19);

        throw $r14;

     label4:
        $r7 := @caughtexception;

        $r8 = new bsh.ReflectError;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Can\'t access field: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r8.<bsh.ReflectError: void <init>(java.lang.String)>($r12);

        throw $r8;

        catch java.lang.NullPointerException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
    }

    protected static java.lang.reflect.Field resolveJavaField(java.lang.Class, java.lang.String, boolean) throws bsh.UtilEvalError
    {
        bsh.ReflectError $r3;
        java.lang.Class r0;
        java.lang.String r1;
        java.lang.reflect.Field $r2;
        boolean z0;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

     label1:
        $r2 = staticinvoke <bsh.Reflect: java.lang.reflect.Field resolveExpectedJavaField(java.lang.Class,java.lang.String,boolean)>(r0, r1, z0);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        return null;

        catch bsh.ReflectError from label1 to label2 with label3;
    }

    protected static java.lang.reflect.Field resolveExpectedJavaField(java.lang.Class, java.lang.String, boolean) throws bsh.UtilEvalError, bsh.ReflectError
    {
        bsh.UtilTargetError $r11;
        bsh.UtilEvalError $r2;
        java.lang.NoSuchFieldException $r16;
        java.lang.StringBuffer $r3, $r4, $r5, $r6, $r8, $r12, $r13, $r14, $r18, $r19, $r20;
        int $i0;
        java.lang.SecurityException $r10;
        java.lang.String r1, $r7, $r9, $r15, $r21;
        boolean $z0, z1, $z2;
        bsh.ReflectError $r17;
        java.lang.reflect.Field r22;
        java.lang.Class r0;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        z1 := @parameter2: boolean;

     label1:
        $z0 = staticinvoke <bsh.Capabilities: boolean haveAccessibility()>();

        if $z0 == 0 goto label2;

        r22 = staticinvoke <bsh.Reflect: java.lang.reflect.Field findAccessibleField(java.lang.Class,java.lang.String)>(r0, r1);

        goto label3;

     label2:
        r22 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(r1);

     label3:
        goto label6;

     label4:
        $r16 := @caughtexception;

        $r17 = new bsh.ReflectError;

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No such field: ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r17.<bsh.ReflectError: void <init>(java.lang.String)>($r21);

        throw $r17;

     label5:
        $r10 := @caughtexception;

        $r11 = new bsh.UtilTargetError;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Security Exception while searching fields of: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r11.<bsh.UtilTargetError: void <init>(java.lang.String,java.lang.Throwable)>($r15, $r10);

        throw $r11;

     label6:
        if z1 == 0 goto label7;

        $i0 = virtualinvoke r22.<java.lang.reflect.Field: int getModifiers()>();

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z2 != 0 goto label7;

        $r2 = new bsh.UtilEvalError;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Can\'t reach instance field: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" from static context: ");

        $r7 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<bsh.UtilEvalError: void <init>(java.lang.String)>($r9);

        throw $r2;

     label7:
        return r22;

        catch java.lang.NoSuchFieldException from label1 to label3 with label4;
        catch java.lang.SecurityException from label1 to label3 with label5;
    }

    private static java.lang.reflect.Field findAccessibleField(java.lang.Class, java.lang.String) throws bsh.UtilEvalError, java.lang.NoSuchFieldException
    {
        java.lang.NoSuchFieldException $r2, $r4, $r5;
        java.lang.Class r6;
        java.lang.String r0;
        java.lang.reflect.Field $r1, $r3;

        r6 := @parameter0: java.lang.Class;

        r0 := @parameter1: java.lang.String;

     label1:
        $r1 = virtualinvoke r6.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(r0);

        staticinvoke <bsh.ReflectManager: boolean RMSetAccessible(java.lang.Object)>($r1);

     label2:
        return $r1;

     label3:
        $r5 := @caughtexception;

        goto label8;

     label4:
        $r3 = virtualinvoke r6.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>(r0);

        staticinvoke <bsh.ReflectManager: boolean RMSetAccessible(java.lang.Object)>($r3);

     label5:
        return $r3;

     label6:
        $r2 := @caughtexception;

        goto label7;

     label7:
        r6 = virtualinvoke r6.<java.lang.Class: java.lang.Class getSuperclass()>();

     label8:
        if r6 != null goto label4;

        $r4 = new java.lang.NoSuchFieldException;

        specialinvoke $r4.<java.lang.NoSuchFieldException: void <init>(java.lang.String)>(r0);

        throw $r4;

        catch java.lang.NoSuchFieldException from label1 to label2 with label3;
        catch java.lang.NoSuchFieldException from label4 to label5 with label6;
    }

    protected static java.lang.reflect.Method resolveExpectedJavaMethod(bsh.BshClassManager, java.lang.Class, java.lang.Object, java.lang.String, java.lang.Object[], boolean) throws bsh.ReflectError, bsh.UtilEvalError
    {
        java.lang.Object[] r2;
        bsh.UtilTargetError $r18;
        bsh.BshClassManager r4;
        java.lang.NullPointerException $r19;
        java.lang.StringBuffer $r9, $r10, $r12, $r13, $r15, $r16, $r20, $r21, $r22, $r23;
        java.lang.String r6, $r11, $r14, $r17, $r24, $r25;
        java.lang.reflect.Method $r7;
        boolean z0;
        bsh.ReflectError $r8;
        java.lang.Class[] $r3;
        bsh.Primitive $r1;
        java.lang.Object r0;
        java.lang.Class r5;

        r4 := @parameter0: bsh.BshClassManager;

        r5 := @parameter1: java.lang.Class;

        r0 := @parameter2: java.lang.Object;

        r6 := @parameter3: java.lang.String;

        r2 := @parameter4: java.lang.Object[];

        z0 := @parameter5: boolean;

        $r1 = <bsh.Primitive: bsh.Primitive NULL>;

        if r0 != $r1 goto label1;

        $r18 = new bsh.UtilTargetError;

        $r19 = new java.lang.NullPointerException;

        $r20 = new java.lang.StringBuffer;

        specialinvoke $r20.<java.lang.StringBuffer: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Attempt to invoke method ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r6);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" on null value");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.NullPointerException: void <init>(java.lang.String)>($r24);

        specialinvoke $r18.<bsh.UtilTargetError: void <init>(java.lang.Throwable)>($r19);

        throw $r18;

     label1:
        $r3 = staticinvoke <bsh.Types: java.lang.Class[] getTypes(java.lang.Object[])>(r2);

        $r7 = staticinvoke <bsh.Reflect: java.lang.reflect.Method resolveJavaMethod(bsh.BshClassManager,java.lang.Class,java.lang.String,java.lang.Class[],boolean)>(r4, r5, r6, $r3, z0);

        if $r7 != null goto label4;

        $r8 = new bsh.ReflectError;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        if z0 == 0 goto label2;

        $r25 = "Static method ";

        goto label3;

     label2:
        $r25 = "Method ";

     label3:
        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r25);

        $r11 = staticinvoke <bsh.StringUtil: java.lang.String methodString(java.lang.String,java.lang.Class[])>(r6, $r3);

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" not found in class\'");

        $r14 = virtualinvoke r5.<java.lang.Class: java.lang.String getName()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r8.<bsh.ReflectError: void <init>(java.lang.String)>($r17);

        throw $r8;

     label4:
        return $r7;
    }

    protected static java.lang.reflect.Method resolveJavaMethod(bsh.BshClassManager, java.lang.Class, java.lang.String, java.lang.Class[], boolean) throws bsh.UtilEvalError
    {
        bsh.UtilTargetError $r8;
        bsh.UtilEvalError $r6;
        bsh.BshClassManager r1;
        java.lang.StringBuffer $r9, $r10, $r11;
        java.lang.SecurityException $r7;
        java.lang.String r2, $r12;
        java.lang.reflect.Method $r4, r13;
        boolean z0, $z1, $z3, $z4;
        java.lang.Class[] r3;
        java.lang.Class r0;
        bsh.InterpreterError $r5;

        r1 := @parameter0: bsh.BshClassManager;

        r0 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.Class[];

        z0 := @parameter4: boolean;

        if r0 != null goto label01;

        $r5 = new bsh.InterpreterError;

        specialinvoke $r5.<bsh.InterpreterError: void <init>(java.lang.String)>("null class");

        throw $r5;

     label01:
        r13 = null;

        if r1 != null goto label02;

        staticinvoke <bsh.Interpreter: void debug(java.lang.String)>("resolveJavaMethod UNOPTIMIZED lookup");

        goto label03;

     label02:
        r13 = virtualinvoke r1.<bsh.BshClassManager: java.lang.reflect.Method getResolvedMethod(java.lang.Class,java.lang.String,java.lang.Class[],boolean)>(r0, r2, r3, z0);

     label03:
        if r13 != null goto label13;

        $z1 = staticinvoke <bsh.Capabilities: boolean haveAccessibility()>();

        if $z1 != 0 goto label04;

        $z4 = 1;

        $z3 = 1;

        goto label05;

     label04:
        $z4 = 0;

        $z3 = 0;

     label05:
        $r4 = staticinvoke <bsh.Reflect: java.lang.reflect.Method findOverloadedMethod(java.lang.Class,java.lang.String,java.lang.Class[],boolean)>(r0, r2, r3, $z4);

        r13 = $r4;

     label06:
        goto label08;

     label07:
        $r7 := @caughtexception;

        $r8 = new bsh.UtilTargetError;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Security Exception while searching methods of: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r8.<bsh.UtilTargetError: void <init>(java.lang.String,java.lang.Throwable)>($r12, $r7);

        throw $r8;

     label08:
        staticinvoke <bsh.Reflect: void checkFoundStaticMethod(java.lang.reflect.Method,boolean,java.lang.Class)>($r4, z0, r0);

        if $r4 == null goto label12;

        if $z3 != 0 goto label12;

     label09:
        staticinvoke <bsh.ReflectManager: boolean RMSetAccessible(java.lang.Object)>($r4);

     label10:
        goto label12;

     label11:
        $r6 := @caughtexception;

        goto label12;

     label12:
        if $r4 == null goto label13;

        if r1 == null goto label13;

        virtualinvoke r1.<bsh.BshClassManager: void cacheResolvedMethod(java.lang.Class,java.lang.Class[],java.lang.reflect.Method)>(r0, r3, $r4);

     label13:
        return r13;

        catch java.lang.SecurityException from label05 to label06 with label07;
        catch bsh.UtilEvalError from label09 to label10 with label11;
    }

    private static java.lang.reflect.Method findOverloadedMethod(java.lang.Class, java.lang.String, java.lang.Class[], boolean)
    {
        java.lang.reflect.Method[] $r3;
        java.lang.StringBuffer $r5, $r6, $r7, $r9, $r10, $r12, $r13, $r15, $r16;
        int $i0;
        java.lang.String r1, $r8, $r11, $r14, $r17;
        java.lang.reflect.Method $r4;
        boolean $z0, z1, $z2;
        java.lang.Class[] r2;
        java.lang.Class r0;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Class[];

        z1 := @parameter3: boolean;

        $z0 = <bsh.Interpreter: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Searching for method: ");

        $r11 = staticinvoke <bsh.StringUtil: java.lang.String methodString(java.lang.String,java.lang.Class[])>(r1, r2);

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" in \'");

        $r14 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <bsh.Interpreter: void debug(java.lang.String)>($r17);

     label1:
        $i0 = lengthof r2;

        $r3 = staticinvoke <bsh.Reflect: java.lang.reflect.Method[] getCandidateMethods(java.lang.Class,java.lang.String,int,boolean)>(r0, r1, $i0, z1);

        $z2 = <bsh.Interpreter: boolean DEBUG>;

        if $z2 == 0 goto label2;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Looking for most specific method: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <bsh.Interpreter: void debug(java.lang.String)>($r8);

     label2:
        $r4 = staticinvoke <bsh.Reflect: java.lang.reflect.Method findMostSpecificMethod(java.lang.Class[],java.lang.reflect.Method[])>(r2, $r3);

        return $r4;
    }

    static java.lang.reflect.Method[] getCandidateMethods(java.lang.Class, java.lang.String, int, boolean)
    {
        java.util.Vector $r2;
        int i0, $i1;
        java.lang.Class r0;
        java.lang.String r1;
        java.lang.reflect.Method[] r3;
        boolean z0;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        $r2 = staticinvoke <bsh.Reflect: java.util.Vector gatherMethodsRecursive(java.lang.Class,java.lang.String,int,boolean,java.util.Vector)>(r0, r1, i0, z0, null);

        $i1 = virtualinvoke $r2.<java.util.Vector: int size()>();

        r3 = newarray (java.lang.reflect.Method)[$i1];

        virtualinvoke $r2.<java.util.Vector: void copyInto(java.lang.Object[])>(r3);

        return r3;
    }

    private static java.util.Vector gatherMethodsRecursive(java.lang.Class, java.lang.String, int, boolean, java.util.Vector)
    {
        java.lang.Class[] $r8;
        java.lang.reflect.Method[] $r1, $r5;
        java.util.Vector $r6, r7;
        int i0, $i1, i2;
        java.lang.Class r0, $r3, $r4;
        java.lang.String r2;
        boolean z0, $z1;

        r0 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        r7 := @parameter4: java.util.Vector;

        if r7 != null goto label1;

        $r6 = new java.util.Vector;

        specialinvoke $r6.<java.util.Vector: void <init>()>();

        r7 = $r6;

     label1:
        if z0 == 0 goto label2;

        $z1 = staticinvoke <bsh.Reflect: boolean isPublic(java.lang.Class)>(r0);

        if $z1 == 0 goto label3;

        $r5 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        staticinvoke <bsh.Reflect: java.util.Vector addCandidates(java.lang.reflect.Method[],java.lang.String,int,boolean,java.util.Vector)>($r5, r2, i0, z0, r7);

        goto label3;

     label2:
        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        staticinvoke <bsh.Reflect: java.util.Vector addCandidates(java.lang.reflect.Method[],java.lang.String,int,boolean,java.util.Vector)>($r1, r2, i0, z0, r7);

     label3:
        $r8 = virtualinvoke r0.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        i2 = 0;

        goto label5;

     label4:
        $r3 = $r8[i2];

        staticinvoke <bsh.Reflect: java.util.Vector gatherMethodsRecursive(java.lang.Class,java.lang.String,int,boolean,java.util.Vector)>($r3, r2, i0, z0, r7);

        i2 = i2 + 1;

     label5:
        $i1 = lengthof $r8;

        if i2 < $i1 goto label4;

        $r4 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        if $r4 == null goto label6;

        staticinvoke <bsh.Reflect: java.util.Vector gatherMethodsRecursive(java.lang.Class,java.lang.String,int,boolean,java.util.Vector)>($r4, r2, i0, z0, r7);

     label6:
        return r7;
    }

    private static java.util.Vector addCandidates(java.lang.reflect.Method[], java.lang.String, int, boolean, java.util.Vector)
    {
        java.lang.Class[] $r4;
        java.lang.reflect.Method[] r0;
        java.util.Vector r5;
        int i0, $i1, i2, $i3;
        java.lang.String $r2, r3;
        java.lang.reflect.Method r1;
        boolean $z0, z1, $z2;

        r0 := @parameter0: java.lang.reflect.Method[];

        r3 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        z1 := @parameter3: boolean;

        r5 := @parameter4: java.util.Vector;

        i2 = 0;

        goto label4;

     label1:
        r1 = r0[i2];

        $r2 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z0 == 0 goto label3;

        $r4 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i1 = lengthof $r4;

        if $i1 != i0 goto label3;

        if z1 == 0 goto label2;

        $z2 = staticinvoke <bsh.Reflect: boolean isPublic(java.lang.reflect.Method)>(r1);

        if $z2 == 0 goto label3;

     label2:
        virtualinvoke r5.<java.util.Vector: boolean add(java.lang.Object)>(r1);

     label3:
        i2 = i2 + 1;

     label4:
        $i3 = lengthof r0;

        if i2 < $i3 goto label1;

        return r5;
    }

    static java.lang.Object constructObject(java.lang.Class, java.lang.Object[]) throws bsh.ReflectError, java.lang.reflect.InvocationTargetException
    {
        java.lang.InstantiationException $r19;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalAccessException $r17;
        java.lang.Object[] r27, $r29;
        bsh.UtilEvalError $r26;
        java.lang.reflect.Constructor $r3;
        java.lang.reflect.Constructor[] r2, $r28;
        java.lang.StringBuffer $r6, $r7, $r8, $r11, $r12, $r13, $r21, $r22, $r23, $r24;
        java.lang.String $r9, $r14, $r25;
        bsh.ReflectError $r4, $r5, $r10, $r16, $r18, $r20;
        java.lang.Class[] $r1;
        java.lang.IllegalArgumentException $r15;
        java.lang.Class r0;
        java.lang.Object $r30;

        r0 := @parameter0: java.lang.Class;

        r27 := @parameter1: java.lang.Object[];

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isInterface()>();

        if $z0 == 0 goto label01;

        $r10 = new bsh.ReflectError;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Can\'t create instance of an interface: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r10.<bsh.ReflectError: void <init>(java.lang.String)>($r14);

        throw $r10;

     label01:
        $r1 = staticinvoke <bsh.Types: java.lang.Class[] getTypes(java.lang.Object[])>(r27);

        $z1 = staticinvoke <bsh.Capabilities: boolean haveAccessibility()>();

        if $z1 == 0 goto label02;

        $r28 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>();

        goto label03;

     label02:
        $r28 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>();

     label03:
        r2 = $r28;

        $z2 = <bsh.Interpreter: boolean DEBUG>;

        if $z2 == 0 goto label04;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Looking for most specific constructor: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <bsh.Interpreter: void debug(java.lang.String)>($r9);

     label04:
        $r3 = staticinvoke <bsh.Reflect: java.lang.reflect.Constructor findMostSpecificConstructor(java.lang.Class[],java.lang.reflect.Constructor[])>($r1, r2);

        if $r3 != null goto label05;

        $r5 = staticinvoke <bsh.Reflect: bsh.ReflectError cantFindConstructor(java.lang.Class,java.lang.Class[])>(r0, $r1);

        throw $r5;

     label05:
        $z3 = staticinvoke <bsh.Reflect: boolean isPublic(java.lang.reflect.Constructor)>($r3);

        if $z3 != 0 goto label09;

     label06:
        staticinvoke <bsh.ReflectManager: boolean RMSetAccessible(java.lang.Object)>($r3);

     label07:
        goto label09;

     label08:
        $r26 := @caughtexception;

        goto label09;

     label09:
        $r29 = staticinvoke <bsh.Primitive: java.lang.Object[] unwrap(java.lang.Object[])>(r27);

     label10:
        $r30 = virtualinvoke $r3.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r29);

     label11:
        goto label15;

     label12:
        $r19 := @caughtexception;

        $r20 = new bsh.ReflectError;

        $r21 = new java.lang.StringBuffer;

        specialinvoke $r21.<java.lang.StringBuffer: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The class ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is abstract ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r20.<bsh.ReflectError: void <init>(java.lang.String)>($r25);

        throw $r20;

     label13:
        $r17 := @caughtexception;

        $r18 = new bsh.ReflectError;

        specialinvoke $r18.<bsh.ReflectError: void <init>(java.lang.String)>("We don\'t have permission to create an instance.Use setAccessibility(true) to enable access.");

        throw $r18;

     label14:
        $r15 := @caughtexception;

        $r16 = new bsh.ReflectError;

        specialinvoke $r16.<bsh.ReflectError: void <init>(java.lang.String)>("The number of arguments was wrong");

        throw $r16;

     label15:
        if $r30 != null goto label16;

        $r4 = new bsh.ReflectError;

        specialinvoke $r4.<bsh.ReflectError: void <init>(java.lang.String)>("Couldn\'t construct the object");

        throw $r4;

     label16:
        return $r30;

        catch bsh.UtilEvalError from label06 to label07 with label08;
        catch java.lang.InstantiationException from label10 to label11 with label12;
        catch java.lang.IllegalAccessException from label10 to label11 with label13;
        catch java.lang.IllegalArgumentException from label10 to label11 with label14;
    }

    static java.lang.reflect.Constructor findMostSpecificConstructor(java.lang.Class[], java.lang.reflect.Constructor[])
    {
        java.lang.reflect.Constructor[] r1;
        int $i0, $i2;
        java.lang.Class[] r0;
        java.lang.reflect.Constructor $r2;

        r0 := @parameter0: java.lang.Class[];

        r1 := @parameter1: java.lang.reflect.Constructor[];

        $i0 = staticinvoke <bsh.Reflect: int findMostSpecificConstructorIndex(java.lang.Class[],java.lang.reflect.Constructor[])>(r0, r1);

        $i2 = (int) -1;

        if $i0 != $i2 goto label1;

        $r2 = null;

        goto label2;

     label1:
        $r2 = r1[$i0];

     label2:
        return $r2;
    }

    static int findMostSpecificConstructorIndex(java.lang.Class[], java.lang.reflect.Constructor[])
    {
        java.lang.Class[] $r3, r4;
        java.lang.reflect.Constructor $r2;
        java.lang.reflect.Constructor[] r0;
        int $i0, $i1, $i2, i3;
        java.lang.Class[][] r1;

        r4 := @parameter0: java.lang.Class[];

        r0 := @parameter1: java.lang.reflect.Constructor[];

        $i0 = lengthof r0;

        r1 = newarray (java.lang.Class[])[$i0];

        i3 = 0;

        goto label2;

     label1:
        $r2 = r0[i3];

        $r3 = virtualinvoke $r2.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        r1[i3] = $r3;

        i3 = i3 + 1;

     label2:
        $i1 = lengthof r1;

        if i3 < $i1 goto label1;

        $i2 = staticinvoke <bsh.Reflect: int findMostSpecificSignature(java.lang.Class[],java.lang.Class[][])>(r4, r1);

        return $i2;
    }

    static java.lang.reflect.Method findMostSpecificMethod(java.lang.Class[], java.lang.reflect.Method[])
    {
        java.lang.Class[] $r3, r4;
        java.lang.reflect.Method[] r0;
        int $i0, $i1, $i2, i3, $i5;
        java.lang.Class[][] r1;
        java.lang.reflect.Method $r2, $r5;

        r4 := @parameter0: java.lang.Class[];

        r0 := @parameter1: java.lang.reflect.Method[];

        $i0 = lengthof r0;

        r1 = newarray (java.lang.Class[])[$i0];

        i3 = 0;

        goto label2;

     label1:
        $r2 = r0[i3];

        $r3 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        r1[i3] = $r3;

        i3 = i3 + 1;

     label2:
        $i1 = lengthof r0;

        if i3 < $i1 goto label1;

        $i2 = staticinvoke <bsh.Reflect: int findMostSpecificSignature(java.lang.Class[],java.lang.Class[][])>(r4, r1);

        $i5 = (int) -1;

        if $i2 != $i5 goto label3;

        $r5 = null;

        goto label4;

     label3:
        $r5 = r0[$i2];

     label4:
        return $r5;
    }

    static int findMostSpecificSignature(java.lang.Class[], java.lang.Class[][])
    {
        java.lang.Class[] r1, r2, r3;
        int i0, i1, i2, $i3, $i5, $i7;
        java.lang.Class[][] r0;
        boolean $z0, $z1;

        r2 := @parameter0: java.lang.Class[];

        r0 := @parameter1: java.lang.Class[][];

        i0 = 1;

        goto label7;

     label1:
        r3 = null;

        $i5 = (int) -1;

        i1 = $i5;

        i2 = 0;

        goto label5;

     label2:
        r1 = r0[i2];

        $z0 = staticinvoke <bsh.Types: boolean isSignatureAssignable(java.lang.Class[],java.lang.Class[],int)>(r2, r1, i0);

        if $z0 == 0 goto label4;

        if r3 == null goto label3;

        $z1 = staticinvoke <bsh.Types: boolean isSignatureAssignable(java.lang.Class[],java.lang.Class[],int)>(r1, r3, 1);

        if $z1 == 0 goto label4;

     label3:
        r3 = r1;

        i1 = i2;

     label4:
        i2 = i2 + 1;

     label5:
        $i3 = lengthof r0;

        if i2 < $i3 goto label2;

        if r3 == null goto label6;

        return i1;

     label6:
        i0 = i0 + 1;

     label7:
        if i0 <= 4 goto label1;

        $i7 = (int) -1;

        return $i7;
    }

    private static java.lang.String accessorName(java.lang.String, java.lang.String)
    {
        char $c0, $c1;
        java.lang.StringBuffer $r0, $r2, $r5, $r7;
        java.lang.String r1, r3, $r4, $r6, $r8;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $c0 = virtualinvoke r3.<java.lang.String: char charAt(int)>(0);

        $c1 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c0);

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c1);

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>(1);

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r8;
    }

    public static boolean hasObjectPropertyGetter(java.lang.Class, java.lang.String)
    {
        java.lang.NoSuchMethodException $r4, $r5;
        java.lang.Class[] $r3, $r7;
        java.lang.Class r2, $r9, $r10;
        java.lang.String r0, $r1, $r6;
        java.lang.reflect.Method $r8;
        boolean $z0;

        r2 := @parameter0: java.lang.Class;

        r0 := @parameter1: java.lang.String;

        $r1 = staticinvoke <bsh.Reflect: java.lang.String accessorName(java.lang.String,java.lang.String)>("get", r0);

     label1:
        $r3 = newarray (java.lang.Class)[0];

        virtualinvoke r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>($r1, $r3);

     label2:
        return 1;

     label3:
        $r5 := @caughtexception;

        goto label4;

     label4:
        $r6 = staticinvoke <bsh.Reflect: java.lang.String accessorName(java.lang.String,java.lang.String)>("is", r0);

     label5:
        $r7 = newarray (java.lang.Class)[0];

        $r8 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>($r6, $r7);

        $r9 = virtualinvoke $r8.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r10 = <java.lang.Boolean: java.lang.Class TYPE>;

        if $r9 != $r10 goto label6;

        $z0 = 1;

        goto label7;

     label6:
        $z0 = 0;

     label7:
        return $z0;

     label8:
        $r4 := @caughtexception;

        return 0;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
        catch java.lang.NoSuchMethodException from label5 to label7 with label8;
    }

    public static boolean hasObjectPropertySetter(java.lang.Class, java.lang.String)
    {
        java.lang.reflect.Method[] $r3;
        int $i0, i1;
        java.lang.Class r2;
        java.lang.String r0, $r1, $r5;
        java.lang.reflect.Method $r4;
        boolean $z0;

        r2 := @parameter0: java.lang.Class;

        r0 := @parameter1: java.lang.String;

        $r1 = staticinvoke <bsh.Reflect: java.lang.String accessorName(java.lang.String,java.lang.String)>("set", r0);

        $r3 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i1 = 0;

        goto label3;

     label1:
        $r4 = $r3[i1];

        $r5 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

     label3:
        $i0 = lengthof $r3;

        if i1 < $i0 goto label1;

        return 0;
    }

    public static java.lang.Object getObjectProperty(java.lang.Object, java.lang.String) throws bsh.UtilEvalError, bsh.ReflectError
    {
        java.lang.reflect.Method $r17, r29;
        java.lang.Exception $r27, $r28, r30, r31;
        java.lang.reflect.InvocationTargetException $r20;
        java.lang.Throwable $r24;
        java.lang.Object[] r0;
        bsh.UtilEvalError $r21;
        java.lang.StringBuffer $r7, $r8, $r9, $r10, $r12, $r13, $r14, $r22, $r23, $r25;
        java.lang.String r1, $r2, $r11, $r15, $r26, $r32;
        bsh.ReflectError $r6;
        java.lang.Object r3, $r5;
        java.lang.Class $r4, $r16, $r18, $r19;

        r3 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        r0 = newarray (java.lang.Object)[0];

        staticinvoke <bsh.Interpreter: void debug(java.lang.String)>("property access: ");

        r29 = null;

        r30 = null;

        r31 = null;

     label01:
        $r2 = staticinvoke <bsh.Reflect: java.lang.String accessorName(java.lang.String,java.lang.String)>("get", r1);

        $r4 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        r29 = staticinvoke <bsh.Reflect: java.lang.reflect.Method resolveExpectedJavaMethod(bsh.BshClassManager,java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[],boolean)>(null, $r4, r3, $r2, r0, 0);

     label02:
        goto label04;

     label03:
        $r28 := @caughtexception;

        r30 = $r28;

        goto label04;

     label04:
        if r29 != null goto label08;

     label05:
        $r15 = staticinvoke <bsh.Reflect: java.lang.String accessorName(java.lang.String,java.lang.String)>("is", r1);

        $r16 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r17 = staticinvoke <bsh.Reflect: java.lang.reflect.Method resolveExpectedJavaMethod(bsh.BshClassManager,java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[],boolean)>(null, $r16, r3, $r15, r0, 0);

        r29 = $r17;

        $r18 = virtualinvoke $r17.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r19 = <java.lang.Boolean: java.lang.Class TYPE>;

        if $r18 == $r19 goto label06;

        r29 = null;

     label06:
        goto label08;

     label07:
        $r27 := @caughtexception;

        r31 = $r27;

        goto label08;

     label08:
        if r29 != null goto label11;

        $r6 = new bsh.ReflectError;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Error in property getter: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r30);

        if r31 == null goto label09;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" : ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r31);

        $r32 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label10;

     label09:
        $r32 = "";

     label10:
        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r32);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<bsh.ReflectError: void <init>(java.lang.String)>($r11);

        throw $r6;

     label11:
        $r5 = staticinvoke <bsh.Reflect: java.lang.Object invokeMethod(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>(r29, r3, r0);

     label12:
        return $r5;

     label13:
        $r20 := @caughtexception;

        $r21 = new bsh.UtilEvalError;

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Property accessor threw exception: ");

        $r24 = virtualinvoke $r20.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r21.<bsh.UtilEvalError: void <init>(java.lang.String)>($r26);

        throw $r21;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Exception from label05 to label06 with label07;
        catch java.lang.reflect.InvocationTargetException from label11 to label12 with label13;
    }

    public static void setObjectProperty(java.lang.Object, java.lang.String, java.lang.Object) throws bsh.ReflectError, bsh.UtilEvalError
    {
        java.lang.Throwable $r11;
        java.lang.Object[] $r2;
        bsh.UtilEvalError $r8;
        java.lang.reflect.InvocationTargetException $r7;
        java.lang.StringBuffer $r9, $r10, $r12;
        java.lang.Object r3, r4;
        java.lang.Class $r5;
        java.lang.String r0, $r1, $r13;
        java.lang.reflect.Method $r6;

        r4 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object;

        $r1 = staticinvoke <bsh.Reflect: java.lang.String accessorName(java.lang.String,java.lang.String)>("set", r0);

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r3;

        staticinvoke <bsh.Interpreter: void debug(java.lang.String)>("property access: ");

     label1:
        $r5 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = staticinvoke <bsh.Reflect: java.lang.reflect.Method resolveExpectedJavaMethod(bsh.BshClassManager,java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[],boolean)>(null, $r5, r4, $r1, $r2, 0);

        staticinvoke <bsh.Reflect: java.lang.Object invokeMethod(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>($r6, r4, $r2);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        $r8 = new bsh.UtilEvalError;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Property accessor threw exception: ");

        $r11 = virtualinvoke $r7.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r8.<bsh.UtilEvalError: void <init>(java.lang.String)>($r13);

        throw $r8;

     label4:
        return;

        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
    }

    public static java.lang.String normalizeClassName(java.lang.Class)
    {
        bsh.ReflectError $r10;
        java.lang.StringBuffer $r1, $r2, $r5, $r6;
        int $i0, i1;
        java.lang.Class r0, $r3;
        java.lang.String $r4, $r7, $r8, $r9;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();

        if $z0 != 0 goto label1;

        $r9 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        return $r9;

     label1:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

     label2:
        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = staticinvoke <bsh.Reflect: java.lang.Class getArrayBaseType(java.lang.Class)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        i1 = 0;

        goto label4;

     label3:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[]");

        i1 = i1 + 1;

     label4:
        $i0 = staticinvoke <bsh.Reflect: int getArrayDimensions(java.lang.Class)>(r0);

        if i1 < $i0 goto label3;

     label5:
        goto label7;

     label6:
        $r10 := @caughtexception;

        goto label7;

     label7:
        $r8 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r8;

        catch bsh.ReflectError from label2 to label5 with label6;
    }

    public static int getArrayDimensions(java.lang.Class)
    {
        int $i0, $i1;
        java.lang.Class r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int lastIndexOf(int)>(91);

        $i1 = $i0 + 1;

        return $i1;
    }

    public static java.lang.Class getArrayBaseType(java.lang.Class) throws bsh.ReflectError
    {
        bsh.ReflectError $r2;
        java.lang.Class r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();

        if $z0 != 0 goto label1;

        $r2 = new bsh.ReflectError;

        specialinvoke $r2.<bsh.ReflectError: void <init>(java.lang.String)>("The class is not an array.");

        throw $r2;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.Class getComponentType()>();

        return $r1;
    }

    public static java.lang.Object invokeCompiledCommand(java.lang.Class, java.lang.Object[], bsh.Interpreter, bsh.CallStack) throws bsh.UtilEvalError
    {
        java.lang.Throwable $r17;
        java.lang.Object[] r0, r1;
        bsh.UtilEvalError $r8, $r14;
        bsh.CallStack r3;
        bsh.BshClassManager $r4;
        java.lang.StringBuffer $r9, $r10, $r11, $r15, $r16, $r18;
        int $i0, $i1, $i2;
        java.lang.String $r12, $r19;
        bsh.ReflectError $r7;
        bsh.Interpreter r2;
        java.lang.reflect.InvocationTargetException $r13;
        java.lang.Class r5;
        java.lang.Object $r6;

        r5 := @parameter0: java.lang.Class;

        r0 := @parameter1: java.lang.Object[];

        r2 := @parameter2: bsh.Interpreter;

        r3 := @parameter3: bsh.CallStack;

        $i0 = lengthof r0;

        $i1 = $i0 + 2;

        r1 = newarray (java.lang.Object)[$i1];

        r1[0] = r2;

        r1[1] = r3;

        $i2 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 2, $i2);

        $r4 = virtualinvoke r2.<bsh.Interpreter: bsh.BshClassManager getClassManager()>();

     label1:
        $r6 = staticinvoke <bsh.Reflect: java.lang.Object invokeStaticMethod(bsh.BshClassManager,java.lang.Class,java.lang.String,java.lang.Object[])>($r4, r5, "invoke", r1);

     label2:
        return $r6;

     label3:
        $r13 := @caughtexception;

        $r14 = new bsh.UtilEvalError;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Error in compiled command: ");

        $r17 = virtualinvoke $r13.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r14.<bsh.UtilEvalError: void <init>(java.lang.String)>($r19);

        throw $r14;

     label4:
        $r7 := @caughtexception;

        $r8 = new bsh.UtilEvalError;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Error invoking compiled command: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r7);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r8.<bsh.UtilEvalError: void <init>(java.lang.String)>($r12);

        throw $r8;

        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
        catch bsh.ReflectError from label1 to label2 with label4;
    }

    private static void logInvokeMethod(java.lang.String, java.lang.reflect.Method, java.lang.Object[])
    {
        java.lang.Object[] r7;
        java.lang.StringBuffer $r0, $r2, $r4, $r5, $r8, $r9, $r10, $r11, $r13, $r14, $r17;
        int $i0, i1;
        java.lang.String r1, $r6, $r18;
        java.lang.reflect.Method r3;
        boolean $z0;
        java.lang.Object $r12, $r15;
        java.lang.Class $r16;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.reflect.Method;

        r7 := @parameter2: java.lang.Object[];

        $z0 = <bsh.Interpreter: boolean DEBUG>;

        if $z0 == 0 goto label3;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" with args:");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <bsh.Interpreter: void debug(java.lang.String)>($r6);

        i1 = 0;

        goto label2;

     label1:
        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("args[");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] = ");

        $r12 = r7[i1];

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" type = ");

        $r15 = r7[i1];

        $r16 = virtualinvoke $r15.<java.lang.Object: java.lang.Class getClass()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <bsh.Interpreter: void debug(java.lang.String)>($r18);

        i1 = i1 + 1;

     label2:
        $i0 = lengthof r7;

        if i1 < $i0 goto label1;

     label3:
        return;
    }

    private static void checkFoundStaticMethod(java.lang.reflect.Method, boolean, java.lang.Class) throws bsh.UtilEvalError
    {
        bsh.UtilEvalError $r1;
        java.lang.Class[] $r5;
        java.lang.StringBuffer $r2, $r3, $r7, $r8, $r11;
        java.lang.Class r9;
        java.lang.String $r4, $r6, $r10, $r12;
        java.lang.reflect.Method r0;
        boolean z0, $z1;

        r0 := @parameter0: java.lang.reflect.Method;

        z0 := @parameter1: boolean;

        r9 := @parameter2: java.lang.Class;

        if r0 == null goto label1;

        if z0 == 0 goto label1;

        $z1 = staticinvoke <bsh.Reflect: boolean isStatic(java.lang.reflect.Method)>(r0);

        if $z1 != 0 goto label1;

        $r1 = new bsh.UtilEvalError;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot reach instance method: ");

        $r4 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        $r5 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r6 = staticinvoke <bsh.StringUtil: java.lang.String methodString(java.lang.String,java.lang.Class[])>($r4, $r5);

        $r7 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" from static context: ");

        $r10 = virtualinvoke r9.<java.lang.Class: java.lang.String getName()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<bsh.UtilEvalError: void <init>(java.lang.String)>($r12);

        throw $r1;

     label1:
        return;
    }

    private static bsh.ReflectError cantFindConstructor(java.lang.Class, java.lang.Class[])
    {
        java.lang.StringBuffer $r2, $r3, $r7, $r8, $r10, $r13, $r14, $r15;
        int $i0;
        java.lang.String $r5, $r6, $r9, $r11, $r16;
        bsh.ReflectError $r1, $r12;
        java.lang.Class[] r0;
        java.lang.Class r4;

        r4 := @parameter0: java.lang.Class;

        r0 := @parameter1: java.lang.Class[];

        $i0 = lengthof r0;

        if $i0 != 0 goto label1;

        $r12 = new bsh.ReflectError;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Can\'t find default constructor for: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r4);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r12.<bsh.ReflectError: void <init>(java.lang.String)>($r16);

        return $r12;

     label1:
        $r1 = new bsh.ReflectError;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Can\'t find constructor: ");

        $r5 = virtualinvoke r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = staticinvoke <bsh.StringUtil: java.lang.String methodString(java.lang.String,java.lang.Class[])>($r5, r0);

        $r7 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" in class: ");

        $r9 = virtualinvoke r4.<java.lang.Class: java.lang.String getName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<bsh.ReflectError: void <init>(java.lang.String)>($r11);

        return $r1;
    }

    private static boolean isPublic(java.lang.Class)
    {
        int $i0;
        java.lang.Class r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        $i0 = virtualinvoke r0.<java.lang.Class: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        return $z0;
    }

    private static boolean isPublic(java.lang.reflect.Method)
    {
        int $i0;
        java.lang.reflect.Method r0;
        boolean $z0;

        r0 := @parameter0: java.lang.reflect.Method;

        $i0 = virtualinvoke r0.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        return $z0;
    }

    private static boolean isPublic(java.lang.reflect.Constructor)
    {
        int $i0;
        java.lang.reflect.Constructor r0;
        boolean $z0;

        r0 := @parameter0: java.lang.reflect.Constructor;

        $i0 = virtualinvoke r0.<java.lang.reflect.Constructor: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        return $z0;
    }

    private static boolean isStatic(java.lang.reflect.Method)
    {
        int $i0;
        java.lang.reflect.Method r0;
        boolean $z0;

        r0 := @parameter0: java.lang.reflect.Method;

        $i0 = virtualinvoke r0.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        return $z0;
    }
}
