class com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor extends com.google.gxp.compiler.base.DefaultingExpressionVisitor implements com.google.gxp.compiler.base.CallVisitor
{
    private com.google.gxp.compiler.schema.ContentFamilyVisitor STRING_CONSTANT_VISITOR;
    final com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0;

    private void <init>(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker)
    {
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor$1 $r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r1;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor r0;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0> = r1;

        specialinvoke r0.<com.google.gxp.compiler.base.DefaultingExpressionVisitor: void <init>()>();

        $r2 = new com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor$1;

        specialinvoke $r2.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor$1: void <init>(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor)>(r0);

        r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor: com.google.gxp.compiler.schema.ContentFamilyVisitor STRING_CONSTANT_VISITOR> = $r2;

        return;
    }

    public java.lang.String defaultVisitExpression(com.google.gxp.compiler.base.Expression)
    {
        com.google.gxp.compiler.base.UnexpectedNodeException $r0;
        com.google.gxp.compiler.base.Expression r1;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor r2;

        r2 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.Expression;

        $r0 = new com.google.gxp.compiler.base.UnexpectedNodeException;

        specialinvoke $r0.<com.google.gxp.compiler.base.UnexpectedNodeException: void <init>(com.google.gxp.compiler.base.Node)>(r1);

        throw $r0;
    }

    public java.lang.String visitAbbrExpression(com.google.gxp.compiler.base.AbbrExpression)
    {
        com.google.gxp.compiler.base.AbbrExpression r1;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker $r2;
        java.lang.String $r3;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor r0;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.AbbrExpression;

        $r2 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        $r3 = staticinvoke <com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String access$3900(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker,com.google.gxp.compiler.base.Expression)>($r2, r1);

        return $r3;
    }

    public java.lang.String visitAttrBundleParam(com.google.gxp.compiler.base.AttrBundleParam)
    {
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker $r23, $r36;
        com.google.gxp.compiler.schema.Schema $r37;
        java.util.Map $r3, $r30;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Set $r1, $r4, $r39;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor r2;
        com.google.gxp.compiler.base.AttrBundleParam r0;
        java.util.List $r6, $r31, $r32;
        java.lang.StringBuilder $r35;
        com.google.gxp.compiler.base.Expression $r15, $r18;
        com.google.gxp.compiler.schema.AttributeValidator$Flag $r22;
        int $i0;
        java.lang.String $r8, $r20, $r21, $r25, $r29, $r34, $r38, r41, $r43, r44;
        java.util.Map$Entry r42;
        java.util.Iterator $r5, $r7, $r40;
        com.google.gxp.compiler.reparent.Attribute $r14, $r17;
        com.google.gxp.compiler.base.OutputLanguage $r19, $r28;
        com.google.gxp.compiler.schema.AttributeValidator r12;
        java.lang.Object $r9, $r10, $r11, $r13, $r16, $r24, $r26, $r27, $r33;

        r2 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r0 := @parameter0: com.google.gxp.compiler.base.AttrBundleParam;

        $r1 = virtualinvoke r0.<com.google.gxp.compiler.base.AttrBundleParam: java.util.Set getIncludeAttrs()>();

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean isEmpty()>();

        if $z0 == 0 goto label01;

        $r30 = virtualinvoke r0.<com.google.gxp.compiler.base.AttrBundleParam: java.util.Map getAttrs()>();

        $z4 = interfaceinvoke $r30.<java.util.Map: boolean isEmpty()>();

        if $z4 == 0 goto label01;

        $r31 = virtualinvoke r0.<com.google.gxp.compiler.base.AttrBundleParam: java.util.List getSubBundles()>();

        $i0 = interfaceinvoke $r31.<java.util.List: int size()>();

        if $i0 != 1 goto label01;

        $r32 = virtualinvoke r0.<com.google.gxp.compiler.base.AttrBundleParam: java.util.List getSubBundles()>();

        $r33 = interfaceinvoke $r32.<java.util.List: java.lang.Object get(int)>(0);

        $r34 = (java.lang.String) $r33;

        return $r34;

     label01:
        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>(java.lang.String)>("new goog.gxp.base.GxpAttrBundle.Builder(");

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $r36 = r2.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        $r37 = virtualinvoke r0.<com.google.gxp.compiler.base.AttrBundleParam: com.google.gxp.compiler.schema.Schema getSchema()>();

        $r38 = staticinvoke <com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String access$1700(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker,com.google.gxp.compiler.schema.Schema)>($r36, $r37);

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $r39 = virtualinvoke r0.<com.google.gxp.compiler.base.AttrBundleParam: java.util.Set getIncludeAttrs()>();

        $r40 = interfaceinvoke $r39.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z5 = interfaceinvoke $r40.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label03;

        $r27 = interfaceinvoke $r40.<java.util.Iterator: java.lang.Object next()>();

        r41 = (java.lang.String) $r27;

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r28 = <com.google.gxp.compiler.base.OutputLanguage: com.google.gxp.compiler.base.OutputLanguage JAVASCRIPT>;

        $r29 = virtualinvoke $r28.<com.google.gxp.compiler.base.OutputLanguage: java.lang.String toStringLiteral(java.lang.String)>(r41);

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        goto label02;

     label03:
        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r3 = virtualinvoke r0.<com.google.gxp.compiler.base.AttrBundleParam: java.util.Map getAttrs()>();

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label04:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label08;

        $r10 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r42 = (java.util.Map$Entry) $r10;

        $r11 = interfaceinvoke r42.<java.util.Map$Entry: java.lang.Object getKey()>();

        r12 = (com.google.gxp.compiler.schema.AttributeValidator) $r11;

        $r13 = interfaceinvoke r42.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r14 = (com.google.gxp.compiler.reparent.Attribute) $r13;

        $r15 = virtualinvoke $r14.<com.google.gxp.compiler.reparent.Attribute: com.google.gxp.compiler.base.Expression getCondition()>();

        $r16 = interfaceinvoke r42.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r17 = (com.google.gxp.compiler.reparent.Attribute) $r16;

        $r18 = virtualinvoke $r17.<com.google.gxp.compiler.reparent.Attribute: com.google.gxp.compiler.base.Expression getValue()>();

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".attr(");

        $r19 = <com.google.gxp.compiler.base.OutputLanguage: com.google.gxp.compiler.base.OutputLanguage JAVASCRIPT>;

        $r20 = virtualinvoke r12.<com.google.gxp.compiler.schema.AttributeValidator: java.lang.String getName()>();

        $r21 = virtualinvoke $r19.<com.google.gxp.compiler.base.OutputLanguage: java.lang.String toStringLiteral(java.lang.String)>($r20);

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r22 = <com.google.gxp.compiler.schema.AttributeValidator$Flag: com.google.gxp.compiler.schema.AttributeValidator$Flag BOOLEAN>;

        $z3 = virtualinvoke r12.<com.google.gxp.compiler.schema.AttributeValidator: boolean isFlagSet(com.google.gxp.compiler.schema.AttributeValidator$Flag)>($r22);

        if $z3 == 0 goto label05;

        $r26 = virtualinvoke $r18.<com.google.gxp.compiler.base.Expression: java.lang.Object acceptVisitor(com.google.gxp.compiler.base.ExpressionVisitor)>(r2);

        $r43 = (java.lang.String) $r26;

        goto label06;

     label05:
        $r23 = r2.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        $r43 = staticinvoke <com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String access$3900(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker,com.google.gxp.compiler.base.Expression)>($r23, $r18);

     label06:
        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        if $r15 == null goto label07;

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r24 = virtualinvoke $r15.<com.google.gxp.compiler.base.Expression: java.lang.Object acceptVisitor(com.google.gxp.compiler.base.ExpressionVisitor)>(r2);

        $r25 = (java.lang.String) $r24;

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

     label07:
        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        goto label04;

     label08:
        $r6 = virtualinvoke r0.<com.google.gxp.compiler.base.AttrBundleParam: java.util.List getSubBundles()>();

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z2 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label10;

        $r9 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r44 = (java.lang.String) $r9;

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".addBundle(");

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r44);

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        goto label09;

     label10:
        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".build()");

        $r8 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public java.lang.String visitBooleanConstant(com.google.gxp.compiler.base.BooleanConstant)
    {
        com.google.gxp.compiler.base.BooleanConstant r0;
        java.lang.Boolean $r1;
        java.lang.String $r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor r3;

        r3 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r0 := @parameter0: com.google.gxp.compiler.base.BooleanConstant;

        $r1 = virtualinvoke r0.<com.google.gxp.compiler.base.BooleanConstant: java.lang.Boolean getValue()>();

        $r2 = virtualinvoke $r1.<java.lang.Boolean: java.lang.String toString()>();

        return $r2;
    }

    public java.lang.String visitConcatenation(com.google.gxp.compiler.base.Concatenation)
    {
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker $r2;
        java.lang.String $r3;
        com.google.gxp.compiler.base.Concatenation r1;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor r0;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.Concatenation;

        $r2 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        $r3 = staticinvoke <com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String access$3900(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker,com.google.gxp.compiler.base.Expression)>($r2, r1);

        return $r3;
    }

    public java.lang.String visitConditional(com.google.gxp.compiler.base.Conditional)
    {
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker $r2;
        com.google.gxp.compiler.base.Conditional r1;
        java.lang.String $r3;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor r0;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.Conditional;

        $r2 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        $r3 = staticinvoke <com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String access$3900(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker,com.google.gxp.compiler.base.Expression)>($r2, r1);

        return $r3;
    }

    public java.lang.String visitConstructedConstant(com.google.gxp.compiler.base.ConstructedConstant)
    {
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker $r3;
        com.google.gxp.compiler.base.ConstructedConstant r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor r1;
        com.google.gxp.compiler.base.FormalParameter $r6;
        java.lang.StringBuilder $r0;
        java.lang.String $r5, $r7, $r8, $r9;
        com.google.gxp.compiler.base.Callable $r4;

        r1 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r2 := @parameter0: com.google.gxp.compiler.base.ConstructedConstant;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r3 = r1.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        $r4 = virtualinvoke r2.<com.google.gxp.compiler.base.ConstructedConstant: com.google.gxp.compiler.base.Callable getCallee()>();

        $r5 = virtualinvoke $r3.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String getCalleeName(com.google.gxp.compiler.base.Callable)>($r4);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r6 = virtualinvoke r2.<com.google.gxp.compiler.base.ConstructedConstant: com.google.gxp.compiler.base.FormalParameter getParam()>();

        $r7 = staticinvoke <com.google.gxp.compiler.js.JavaScriptCodeGenerator: java.lang.String access$4000(com.google.gxp.compiler.base.FormalParameter)>($r6);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(\"");

        $r8 = virtualinvoke r2.<com.google.gxp.compiler.base.ConstructedConstant: java.lang.String getValue()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\")");

        $r9 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public java.lang.String visitConvertibleToContent(com.google.gxp.compiler.base.ConvertibleToContent)
    {
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker $r2;
        java.lang.String $r3;
        com.google.gxp.compiler.base.ConvertibleToContent r1;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor r0;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.ConvertibleToContent;

        $r2 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        $r3 = staticinvoke <com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String access$3900(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker,com.google.gxp.compiler.base.Expression)>($r2, r1);

        return $r3;
    }

    public java.lang.String visitEscapeExpression(com.google.gxp.compiler.base.EscapeExpression)
    {
        com.google.gxp.compiler.base.Expression $r1;
        java.lang.Object $r3;
        java.lang.String $r4;
        com.google.gxp.compiler.base.EscapeExpression r0;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor r2;

        r2 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r0 := @parameter0: com.google.gxp.compiler.base.EscapeExpression;

        $r1 = virtualinvoke r0.<com.google.gxp.compiler.base.EscapeExpression: com.google.gxp.compiler.base.Expression getSubexpression()>();

        $r3 = virtualinvoke $r1.<com.google.gxp.compiler.base.Expression: java.lang.Object acceptVisitor(com.google.gxp.compiler.base.ExpressionVisitor)>(r2);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    public java.lang.String visitExampleExpression(com.google.gxp.compiler.base.ExampleExpression)
    {
        com.google.gxp.compiler.base.ExampleExpression r0;
        com.google.gxp.compiler.base.Expression $r1;
        java.lang.Object $r3;
        java.lang.String $r4;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor r2;

        r2 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r0 := @parameter0: com.google.gxp.compiler.base.ExampleExpression;

        $r1 = virtualinvoke r0.<com.google.gxp.compiler.base.ExampleExpression: com.google.gxp.compiler.base.Expression getSubexpression()>();

        $r3 = virtualinvoke $r1.<com.google.gxp.compiler.base.Expression: java.lang.Object acceptVisitor(com.google.gxp.compiler.base.ExpressionVisitor)>(r2);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    public java.lang.String visitExtractedMessage(com.google.gxp.compiler.base.ExtractedMessage)
    {
        com.google.gxp.compiler.base.ExtractedMessage r1;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker $r2;
        java.lang.String $r3;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor r0;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.ExtractedMessage;

        $r2 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        $r3 = staticinvoke <com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String access$3900(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker,com.google.gxp.compiler.base.Expression)>($r2, r1);

        return $r3;
    }

    public java.lang.String visitLoopExpression(com.google.gxp.compiler.base.LoopExpression)
    {
        com.google.gxp.compiler.base.LoopExpression r1;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker $r2;
        java.lang.String $r3;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor r0;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.LoopExpression;

        $r2 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        $r3 = staticinvoke <com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String access$3900(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker,com.google.gxp.compiler.base.Expression)>($r2, r1);

        return $r3;
    }

    public java.lang.String visitIsXmlExpression(com.google.gxp.compiler.base.IsXmlExpression)
    {
        com.google.gxp.compiler.base.IsXmlExpression r1;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor r0;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.IsXmlExpression;

        return "gxp_context.isUsingXmlSyntax()";
    }

    public java.lang.String visitNativeExpression(com.google.gxp.compiler.base.NativeExpression)
    {
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker $r1;
        com.google.gxp.compiler.base.OutputLanguage $r2;
        com.google.gxp.compiler.alerts.AlertSink $r3;
        com.google.gxp.compiler.base.NativeExpression r4;
        java.lang.String $r5;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor r0;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r4 := @parameter0: com.google.gxp.compiler.base.NativeExpression;

        $r2 = <com.google.gxp.compiler.base.OutputLanguage: com.google.gxp.compiler.base.OutputLanguage JAVASCRIPT>;

        $r1 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        $r3 = staticinvoke <com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.alerts.AlertSink access$4100(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker)>($r1);

        $r5 = virtualinvoke $r2.<com.google.gxp.compiler.base.OutputLanguage: java.lang.String validateExpression(com.google.gxp.compiler.alerts.AlertSink,com.google.gxp.compiler.base.NativeExpression)>($r3, r4);

        return $r5;
    }

    public java.lang.String visitObjectConstant(com.google.gxp.compiler.base.ObjectConstant)
    {
        com.google.gxp.compiler.base.ObjectConstant r0;
        com.google.gxp.compiler.base.OutputLanguage $r1;
        java.lang.String $r2, $r3;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor r4;

        r4 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r0 := @parameter0: com.google.gxp.compiler.base.ObjectConstant;

        $r1 = <com.google.gxp.compiler.base.OutputLanguage: com.google.gxp.compiler.base.OutputLanguage JAVASCRIPT>;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.base.ObjectConstant: java.lang.String getValue()>();

        $r3 = virtualinvoke $r1.<com.google.gxp.compiler.base.OutputLanguage: java.lang.String toStringLiteral(java.lang.String)>($r2);

        return $r3;
    }

    public java.lang.String visitStringConstant(com.google.gxp.compiler.base.StringConstant)
    {
        com.google.gxp.compiler.schema.ContentFamily $r3;
        com.google.gxp.compiler.schema.Schema $r1, $r2;
        java.lang.AssertionError $r8;
        com.google.gxp.compiler.schema.ContentFamilyVisitor $r5;
        com.google.gxp.compiler.base.StringConstant r0;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor r4;
        java.lang.Object $r6;
        java.lang.String $r7;

        r4 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r0 := @parameter0: com.google.gxp.compiler.base.StringConstant;

        $r1 = virtualinvoke r0.<com.google.gxp.compiler.base.StringConstant: com.google.gxp.compiler.schema.Schema getSchema()>();

        if $r1 != null goto label1;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label1:
        $r2 = virtualinvoke r0.<com.google.gxp.compiler.base.StringConstant: com.google.gxp.compiler.schema.Schema getSchema()>();

        $r3 = virtualinvoke $r2.<com.google.gxp.compiler.schema.Schema: com.google.gxp.compiler.schema.ContentFamily getContentFamily()>();

        $r5 = r4.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor: com.google.gxp.compiler.schema.ContentFamilyVisitor STRING_CONSTANT_VISITOR>;

        $r6 = virtualinvoke $r3.<com.google.gxp.compiler.schema.ContentFamily: java.lang.Object acceptVisitor(com.google.gxp.compiler.schema.ContentFamilyVisitor,java.lang.Object)>($r5, r0);

        $r7 = (java.lang.String) $r6;

        return $r7;
    }

    public java.lang.String visitCall(com.google.gxp.compiler.base.Call)
    {
        java.lang.Object $r2;
        java.lang.String $r3;
        com.google.gxp.compiler.base.Call r0;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor r1;

        r1 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r0 := @parameter0: com.google.gxp.compiler.base.Call;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.base.Call: java.lang.Object acceptCallVisitor(com.google.gxp.compiler.base.CallVisitor)>(r1);

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    public java.lang.String visitBoundCall(com.google.gxp.compiler.base.BoundCall)
    {
        com.google.gxp.compiler.base.BoundCall r1;
        com.google.gxp.compiler.base.UnexpectedNodeException $r0;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor r2;

        r2 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.BoundCall;

        $r0 = new com.google.gxp.compiler.base.UnexpectedNodeException;

        specialinvoke $r0.<com.google.gxp.compiler.base.UnexpectedNodeException: void <init>(com.google.gxp.compiler.base.Node)>(r1);

        throw $r0;
    }

    public java.lang.String visitUnboundCall(com.google.gxp.compiler.base.UnboundCall)
    {
        com.google.gxp.compiler.base.UnexpectedNodeException $r0;
        com.google.gxp.compiler.base.UnboundCall r1;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor r2;

        r2 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.UnboundCall;

        $r0 = new com.google.gxp.compiler.base.UnexpectedNodeException;

        specialinvoke $r0.<com.google.gxp.compiler.base.UnexpectedNodeException: void <init>(com.google.gxp.compiler.base.Node)>(r1);

        throw $r0;
    }

    public java.lang.String visitValidatedCall(com.google.gxp.compiler.base.ValidatedCall)
    {
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor$2 $r3;
        com.google.gxp.compiler.base.ValidatedCall r0;
        java.lang.StringBuilder $r2;
        java.lang.String $r5;
        com.google.gxp.compiler.base.Callable $r1;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor r4;

        r4 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r0 := @parameter0: com.google.gxp.compiler.base.ValidatedCall;

        $r1 = virtualinvoke r0.<com.google.gxp.compiler.base.ValidatedCall: com.google.gxp.compiler.base.Callable getCallee()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = new com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor$2;

        specialinvoke $r3.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor$2: void <init>(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor,java.lang.StringBuilder,com.google.gxp.compiler.base.Callable,com.google.gxp.compiler.base.ValidatedCall)>(r4, $r2, $r1, r0);

        interfaceinvoke $r1.<com.google.gxp.compiler.base.Callable: java.lang.Object acceptCallableVisitor(com.google.gxp.compiler.base.CallableVisitor)>($r3);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public volatile java.lang.Object visitStringConstant(com.google.gxp.compiler.base.StringConstant)
    {
        java.lang.String $r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor r0;
        com.google.gxp.compiler.base.StringConstant r1;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.StringConstant;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor: java.lang.String visitStringConstant(com.google.gxp.compiler.base.StringConstant)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitObjectConstant(com.google.gxp.compiler.base.ObjectConstant)
    {
        com.google.gxp.compiler.base.ObjectConstant r1;
        java.lang.String $r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor r0;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.ObjectConstant;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor: java.lang.String visitObjectConstant(com.google.gxp.compiler.base.ObjectConstant)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitNativeExpression(com.google.gxp.compiler.base.NativeExpression)
    {
        java.lang.String $r2;
        com.google.gxp.compiler.base.NativeExpression r1;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor r0;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.NativeExpression;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor: java.lang.String visitNativeExpression(com.google.gxp.compiler.base.NativeExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitLoopExpression(com.google.gxp.compiler.base.LoopExpression)
    {
        java.lang.String $r2;
        com.google.gxp.compiler.base.LoopExpression r1;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor r0;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.LoopExpression;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor: java.lang.String visitLoopExpression(com.google.gxp.compiler.base.LoopExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitIsXmlExpression(com.google.gxp.compiler.base.IsXmlExpression)
    {
        com.google.gxp.compiler.base.IsXmlExpression r1;
        java.lang.String $r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor r0;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.IsXmlExpression;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor: java.lang.String visitIsXmlExpression(com.google.gxp.compiler.base.IsXmlExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitExtractedMessage(com.google.gxp.compiler.base.ExtractedMessage)
    {
        java.lang.String $r2;
        com.google.gxp.compiler.base.ExtractedMessage r1;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor r0;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.ExtractedMessage;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor: java.lang.String visitExtractedMessage(com.google.gxp.compiler.base.ExtractedMessage)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitExampleExpression(com.google.gxp.compiler.base.ExampleExpression)
    {
        com.google.gxp.compiler.base.ExampleExpression r1;
        java.lang.String $r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor r0;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.ExampleExpression;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor: java.lang.String visitExampleExpression(com.google.gxp.compiler.base.ExampleExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitEscapeExpression(com.google.gxp.compiler.base.EscapeExpression)
    {
        java.lang.String $r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor r0;
        com.google.gxp.compiler.base.EscapeExpression r1;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.EscapeExpression;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor: java.lang.String visitEscapeExpression(com.google.gxp.compiler.base.EscapeExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitConvertibleToContent(com.google.gxp.compiler.base.ConvertibleToContent)
    {
        java.lang.String $r2;
        com.google.gxp.compiler.base.ConvertibleToContent r1;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor r0;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.ConvertibleToContent;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor: java.lang.String visitConvertibleToContent(com.google.gxp.compiler.base.ConvertibleToContent)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitConstructedConstant(com.google.gxp.compiler.base.ConstructedConstant)
    {
        com.google.gxp.compiler.base.ConstructedConstant r1;
        java.lang.String $r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor r0;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.ConstructedConstant;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor: java.lang.String visitConstructedConstant(com.google.gxp.compiler.base.ConstructedConstant)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitConditional(com.google.gxp.compiler.base.Conditional)
    {
        java.lang.String $r2;
        com.google.gxp.compiler.base.Conditional r1;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor r0;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.Conditional;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor: java.lang.String visitConditional(com.google.gxp.compiler.base.Conditional)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitConcatenation(com.google.gxp.compiler.base.Concatenation)
    {
        java.lang.String $r2;
        com.google.gxp.compiler.base.Concatenation r1;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor r0;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.Concatenation;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor: java.lang.String visitConcatenation(com.google.gxp.compiler.base.Concatenation)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitCall(com.google.gxp.compiler.base.Call)
    {
        java.lang.String $r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor r0;
        com.google.gxp.compiler.base.Call r1;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.Call;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor: java.lang.String visitCall(com.google.gxp.compiler.base.Call)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitBooleanConstant(com.google.gxp.compiler.base.BooleanConstant)
    {
        com.google.gxp.compiler.base.BooleanConstant r1;
        java.lang.String $r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor r0;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.BooleanConstant;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor: java.lang.String visitBooleanConstant(com.google.gxp.compiler.base.BooleanConstant)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitAttrBundleParam(com.google.gxp.compiler.base.AttrBundleParam)
    {
        com.google.gxp.compiler.base.AttrBundleParam r1;
        java.lang.String $r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor r0;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.AttrBundleParam;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor: java.lang.String visitAttrBundleParam(com.google.gxp.compiler.base.AttrBundleParam)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitAbbrExpression(com.google.gxp.compiler.base.AbbrExpression)
    {
        java.lang.String $r2;
        com.google.gxp.compiler.base.AbbrExpression r1;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor r0;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.AbbrExpression;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor: java.lang.String visitAbbrExpression(com.google.gxp.compiler.base.AbbrExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object defaultVisitExpression(com.google.gxp.compiler.base.Expression)
    {
        com.google.gxp.compiler.base.Expression r1;
        java.lang.String $r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor r0;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.Expression;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor: java.lang.String defaultVisitExpression(com.google.gxp.compiler.base.Expression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitValidatedCall(com.google.gxp.compiler.base.ValidatedCall)
    {
        com.google.gxp.compiler.base.ValidatedCall r1;
        java.lang.String $r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor r0;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.ValidatedCall;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor: java.lang.String visitValidatedCall(com.google.gxp.compiler.base.ValidatedCall)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitBoundCall(com.google.gxp.compiler.base.BoundCall)
    {
        com.google.gxp.compiler.base.BoundCall r1;
        java.lang.String $r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor r0;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.BoundCall;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor: java.lang.String visitBoundCall(com.google.gxp.compiler.base.BoundCall)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitUnboundCall(com.google.gxp.compiler.base.UnboundCall)
    {
        com.google.gxp.compiler.base.UnboundCall r1;
        java.lang.String $r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor r0;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.UnboundCall;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor: java.lang.String visitUnboundCall(com.google.gxp.compiler.base.UnboundCall)>(r1);

        return $r2;
    }

    void <init>(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker, com.google.gxp.compiler.js.JavaScriptCodeGenerator$1)
    {
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$1 r2;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r1;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor r0;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        r2 := @parameter1: com.google.gxp.compiler.js.JavaScriptCodeGenerator$1;

        specialinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToExpressionVisitor: void <init>(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker)>(r1);

        return;
    }
}
