public abstract class com.hp.hpl.jena.sparql.core.DatasetGraphTriplesQuads extends com.hp.hpl.jena.sparql.core.DatasetGraphBaseFind
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphTriplesQuads r0;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphTriplesQuads;

        specialinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphBaseFind: void <init>()>();

        return;
    }

    public final void add(com.hp.hpl.jena.sparql.core.Quad)
    {
        com.hp.hpl.jena.graph.Node $r2, $r3, $r4, $r5;
        com.hp.hpl.jena.sparql.core.DatasetGraphTriplesQuads r0;
        com.hp.hpl.jena.sparql.core.Quad r1;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphTriplesQuads;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.Quad;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getGraph()>();

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getSubject()>();

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getObject()>();

        virtualinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphTriplesQuads: void add(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r2, $r3, $r4, $r5);

        return;
    }

    public final void delete(com.hp.hpl.jena.sparql.core.Quad)
    {
        com.hp.hpl.jena.graph.Node $r2, $r3, $r4, $r5;
        com.hp.hpl.jena.sparql.core.DatasetGraphTriplesQuads r0;
        com.hp.hpl.jena.sparql.core.Quad r1;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphTriplesQuads;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.Quad;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getGraph()>();

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getSubject()>();

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getObject()>();

        virtualinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphTriplesQuads: void delete(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r2, $r3, $r4, $r5);

        return;
    }

    public void add(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0, r2, r3, r4;
        boolean $z0, $z1;
        com.hp.hpl.jena.sparql.core.DatasetGraphTriplesQuads r1;

        r1 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphTriplesQuads;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.graph.Node;

        r4 := @parameter3: com.hp.hpl.jena.graph.Node;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Quad: boolean isDefaultGraphGenerated(com.hp.hpl.jena.graph.Node)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <com.hp.hpl.jena.sparql.core.Quad: boolean isDefaultGraphExplicit(com.hp.hpl.jena.graph.Node)>(r0);

        if $z1 == 0 goto label2;

     label1:
        virtualinvoke r1.<com.hp.hpl.jena.sparql.core.DatasetGraphTriplesQuads: void addToDftGraph(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r2, r3, r4);

        goto label3;

     label2:
        virtualinvoke r1.<com.hp.hpl.jena.sparql.core.DatasetGraphTriplesQuads: void addToNamedGraph(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r0, r2, r3, r4);

     label3:
        return;
    }

    public void delete(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0, r2, r3, r4;
        boolean $z0, $z1;
        com.hp.hpl.jena.sparql.core.DatasetGraphTriplesQuads r1;

        r1 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphTriplesQuads;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.graph.Node;

        r4 := @parameter3: com.hp.hpl.jena.graph.Node;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Quad: boolean isDefaultGraphGenerated(com.hp.hpl.jena.graph.Node)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <com.hp.hpl.jena.sparql.core.Quad: boolean isDefaultGraphExplicit(com.hp.hpl.jena.graph.Node)>(r0);

        if $z1 == 0 goto label2;

     label1:
        virtualinvoke r1.<com.hp.hpl.jena.sparql.core.DatasetGraphTriplesQuads: void deleteFromDftGraph(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r2, r3, r4);

        goto label3;

     label2:
        virtualinvoke r1.<com.hp.hpl.jena.sparql.core.DatasetGraphTriplesQuads: void deleteFromNamedGraph(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r0, r2, r3, r4);

     label3:
        return;
    }

    protected abstract void addToDftGraph(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node);

    protected abstract void addToNamedGraph(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node);

    protected abstract void deleteFromDftGraph(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node);

    protected abstract void deleteFromNamedGraph(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node);
}
