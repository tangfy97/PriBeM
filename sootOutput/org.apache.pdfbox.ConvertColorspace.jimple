public class org.apache.pdfbox.ConvertColorspace extends java.lang.Object
{
    private static final java.lang.String PASSWORD;
    private static final java.lang.String CONVERSION;
    private static final java.lang.String DEST_COLORSPACE;

    private void <init>()
    {
        org.apache.pdfbox.ConvertColorspace r0;

        r0 := @this: org.apache.pdfbox.ConvertColorspace;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private void replaceColors(org.apache.pdfbox.pdmodel.PDDocument, java.util.Hashtable, java.lang.String) throws java.io.IOException
    {
        org.apache.pdfbox.ConvertColorspace r19;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        org.apache.pdfbox.pdmodel.PDDocument r1;
        org.apache.pdfbox.pdfparser.PDFStreamParser $r5;
        java.util.List $r3, $r8;
        java.lang.StringBuilder $r26, $r27, $r28;
        org.apache.pdfbox.pdmodel.PDPage r30;
        org.apache.pdfbox.util.PDFOperator r14, $r21, $r22, $r23, $r24;
        java.util.ArrayList $r9;
        int $i0, $i1, i2, i3;
        java.lang.String r0, $r15, $r16, $r17, $r18, $r29;
        org.apache.pdfbox.cos.COSStream $r7;
        org.apache.pdfbox.pdfwriter.ContentStreamWriter $r11;
        java.util.Hashtable r20;
        org.apache.pdfbox.pdmodel.PDDocumentCatalog $r2;
        java.io.OutputStream $r12;
        java.io.IOException $r25;
        org.apache.pdfbox.pdmodel.common.PDStream $r6, $r10;
        java.lang.Object $r4, $r13;

        r19 := @this: org.apache.pdfbox.ConvertColorspace;

        r1 := @parameter0: org.apache.pdfbox.pdmodel.PDDocument;

        r20 := @parameter1: java.util.Hashtable;

        r0 := @parameter2: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("CMYK");

        if $z0 != 0 goto label01;

        $r25 = new java.io.IOException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Unknown colorspace ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.io.IOException: void <init>(java.lang.String)>($r29);

        throw $r25;

     label01:
        $r2 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocumentCatalog getDocumentCatalog()>();

        $r3 = virtualinvoke $r2.<org.apache.pdfbox.pdmodel.PDDocumentCatalog: java.util.List getAllPages()>();

        i2 = 0;

     label02:
        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i2 >= $i0 goto label12;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i2);

        r30 = (org.apache.pdfbox.pdmodel.PDPage) $r4;

        $r5 = new org.apache.pdfbox.pdfparser.PDFStreamParser;

        $r6 = virtualinvoke r30.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.pdmodel.common.PDStream getContents()>();

        $r7 = virtualinvoke $r6.<org.apache.pdfbox.pdmodel.common.PDStream: org.apache.pdfbox.cos.COSStream getStream()>();

        specialinvoke $r5.<org.apache.pdfbox.pdfparser.PDFStreamParser: void <init>(org.apache.pdfbox.cos.COSStream)>($r7);

        virtualinvoke $r5.<org.apache.pdfbox.pdfparser.PDFStreamParser: void parse()>();

        $r8 = virtualinvoke $r5.<org.apache.pdfbox.pdfparser.PDFStreamParser: java.util.List getTokens()>();

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        i3 = 0;

     label03:
        $i1 = interfaceinvoke $r8.<java.util.List: int size()>();

        if i3 >= $i1 goto label11;

        $r13 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(i3);

        $z1 = $r13 instanceof org.apache.pdfbox.util.PDFOperator;

        if $z1 == 0 goto label09;

        r14 = (org.apache.pdfbox.util.PDFOperator) $r13;

        $r15 = virtualinvoke r14.<org.apache.pdfbox.util.PDFOperator: java.lang.String getOperation()>();

        $z2 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>("rg");

        if $z2 == 0 goto label04;

        $z9 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("CMYK");

        if $z9 == 0 goto label08;

        specialinvoke r19.<org.apache.pdfbox.ConvertColorspace: void replaceRGBTokensWithCMYKTokens(java.util.List,java.util.List,int,java.util.Hashtable)>($r9, $r8, i3, r20);

        $r24 = staticinvoke <org.apache.pdfbox.util.PDFOperator: org.apache.pdfbox.util.PDFOperator getOperator(java.lang.String)>("k");

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r24);

        goto label08;

     label04:
        $r16 = virtualinvoke r14.<org.apache.pdfbox.util.PDFOperator: java.lang.String getOperation()>();

        $z3 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>("RG");

        if $z3 == 0 goto label05;

        $z8 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("CMYK");

        if $z8 == 0 goto label08;

        specialinvoke r19.<org.apache.pdfbox.ConvertColorspace: void replaceRGBTokensWithCMYKTokens(java.util.List,java.util.List,int,java.util.Hashtable)>($r9, $r8, i3, r20);

        $r23 = staticinvoke <org.apache.pdfbox.util.PDFOperator: org.apache.pdfbox.util.PDFOperator getOperator(java.lang.String)>("K");

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r23);

        goto label08;

     label05:
        $r17 = virtualinvoke r14.<org.apache.pdfbox.util.PDFOperator: java.lang.String getOperation()>();

        $z4 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>("g");

        if $z4 == 0 goto label06;

        $z7 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("CMYK");

        if $z7 == 0 goto label08;

        specialinvoke r19.<org.apache.pdfbox.ConvertColorspace: void replaceGrayTokensWithCMYKTokens(java.util.List,java.util.List,int,java.util.Hashtable)>($r9, $r8, i3, r20);

        $r22 = staticinvoke <org.apache.pdfbox.util.PDFOperator: org.apache.pdfbox.util.PDFOperator getOperator(java.lang.String)>("k");

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r22);

        goto label08;

     label06:
        $r18 = virtualinvoke r14.<org.apache.pdfbox.util.PDFOperator: java.lang.String getOperation()>();

        $z5 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>("G");

        if $z5 == 0 goto label07;

        $z6 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("CMYK");

        if $z6 == 0 goto label08;

        specialinvoke r19.<org.apache.pdfbox.ConvertColorspace: void replaceGrayTokensWithCMYKTokens(java.util.List,java.util.List,int,java.util.Hashtable)>($r9, $r8, i3, r20);

        $r21 = staticinvoke <org.apache.pdfbox.util.PDFOperator: org.apache.pdfbox.util.PDFOperator getOperator(java.lang.String)>("K");

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r21);

        goto label08;

     label07:
        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r13);

     label08:
        goto label10;

     label09:
        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r13);

     label10:
        i3 = i3 + 1;

        goto label03;

     label11:
        $r10 = new org.apache.pdfbox.pdmodel.common.PDStream;

        specialinvoke $r10.<org.apache.pdfbox.pdmodel.common.PDStream: void <init>(org.apache.pdfbox.pdmodel.PDDocument)>(r1);

        $r11 = new org.apache.pdfbox.pdfwriter.ContentStreamWriter;

        $r12 = virtualinvoke $r10.<org.apache.pdfbox.pdmodel.common.PDStream: java.io.OutputStream createOutputStream()>();

        specialinvoke $r11.<org.apache.pdfbox.pdfwriter.ContentStreamWriter: void <init>(java.io.OutputStream)>($r12);

        virtualinvoke $r11.<org.apache.pdfbox.pdfwriter.ContentStreamWriter: void writeTokens(java.util.List)>($r9);

        virtualinvoke r30.<org.apache.pdfbox.pdmodel.PDPage: void setContents(org.apache.pdfbox.pdmodel.common.PDStream)>($r10);

        i2 = i2 + 1;

        goto label02;

     label12:
        return;
    }

    private void replaceRGBTokensWithCMYKTokens(java.util.List, java.util.List, int, java.util.Hashtable)
    {
        org.apache.pdfbox.cos.COSFloat $r13, $r14, $r15, $r16;
        org.apache.pdfbox.cos.COSNumber $r2, $r4, $r6;
        int[] $r8, $r18, $r19, $r20, $r21;
        org.apache.pdfbox.ConvertColorspace r22;
        java.util.List r0, r12;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17;
        float[] $r17, r23;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        java.util.Hashtable r9;
        org.apache.pdfbox.ConvertColorspace$ColorSpaceInstance $r7, r11;
        java.lang.Object $r1, $r3, $r5, $r10;

        r22 := @this: org.apache.pdfbox.ConvertColorspace;

        r12 := @parameter0: java.util.List;

        r0 := @parameter1: java.util.List;

        i0 := @parameter2: int;

        r9 := @parameter3: java.util.Hashtable;

        $i1 = i0 - 3;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i1);

        $r2 = (org.apache.pdfbox.cos.COSNumber) $r1;

        $f0 = virtualinvoke $r2.<org.apache.pdfbox.cos.COSNumber: float floatValue()>();

        $i2 = i0 - 2;

        $r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i2);

        $r4 = (org.apache.pdfbox.cos.COSNumber) $r3;

        $f1 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSNumber: float floatValue()>();

        $i3 = i0 - 1;

        $r5 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i3);

        $r6 = (org.apache.pdfbox.cos.COSNumber) $r5;

        $f2 = virtualinvoke $r6.<org.apache.pdfbox.cos.COSNumber: float floatValue()>();

        $f3 = $f0 * 255.0F;

        $i4 = staticinvoke <java.lang.Math: int round(float)>($f3);

        $f4 = $f1 * 255.0F;

        $i5 = staticinvoke <java.lang.Math: int round(float)>($f4);

        $f5 = $f2 * 255.0F;

        $i6 = staticinvoke <java.lang.Math: int round(float)>($f5);

        $r7 = new org.apache.pdfbox.ConvertColorspace$ColorSpaceInstance;

        specialinvoke $r7.<org.apache.pdfbox.ConvertColorspace$ColorSpaceInstance: void <init>(org.apache.pdfbox.ConvertColorspace$1)>(null);

        staticinvoke <org.apache.pdfbox.ConvertColorspace$ColorSpaceInstance: java.lang.String access$102(org.apache.pdfbox.ConvertColorspace$ColorSpaceInstance,java.lang.String)>($r7, "RGB");

        $r8 = newarray (int)[3];

        $r8[0] = $i4;

        $r8[1] = $i5;

        $r8[2] = $i6;

        staticinvoke <org.apache.pdfbox.ConvertColorspace$ColorSpaceInstance: int[] access$202(org.apache.pdfbox.ConvertColorspace$ColorSpaceInstance,int[])>($r7, $r8);

        $r10 = virtualinvoke r9.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r7);

        r11 = (org.apache.pdfbox.ConvertColorspace$ColorSpaceInstance) $r10;

        if r11 == null goto label1;

        $r17 = newarray (float)[4];

        $r18 = staticinvoke <org.apache.pdfbox.ConvertColorspace$ColorSpaceInstance: int[] access$200(org.apache.pdfbox.ConvertColorspace$ColorSpaceInstance)>(r11);

        $i13 = $r18[0];

        $f10 = (float) $i13;

        $f11 = $f10 / 100.0F;

        $r17[0] = $f11;

        $r19 = staticinvoke <org.apache.pdfbox.ConvertColorspace$ColorSpaceInstance: int[] access$200(org.apache.pdfbox.ConvertColorspace$ColorSpaceInstance)>(r11);

        $i14 = $r19[1];

        $f12 = (float) $i14;

        $f13 = $f12 / 100.0F;

        $r17[1] = $f13;

        $r20 = staticinvoke <org.apache.pdfbox.ConvertColorspace$ColorSpaceInstance: int[] access$200(org.apache.pdfbox.ConvertColorspace$ColorSpaceInstance)>(r11);

        $i15 = $r20[2];

        $f14 = (float) $i15;

        $f15 = $f14 / 100.0F;

        $r17[2] = $f15;

        $r21 = staticinvoke <org.apache.pdfbox.ConvertColorspace$ColorSpaceInstance: int[] access$200(org.apache.pdfbox.ConvertColorspace$ColorSpaceInstance)>(r11);

        $i16 = $r21[3];

        $f16 = (float) $i16;

        $f17 = $f16 / 100.0F;

        $r17[3] = $f17;

        r23 = $r17;

        goto label2;

     label1:
        r23 = staticinvoke <org.apache.pdfbox.ConvertColorspace: float[] convertRGBToCMYK(float,float,float)>($f0, $f1, $f2);

     label2:
        $i7 = interfaceinvoke r12.<java.util.List: int size()>();

        $i8 = $i7 - 1;

        interfaceinvoke r12.<java.util.List: java.lang.Object remove(int)>($i8);

        $i9 = interfaceinvoke r12.<java.util.List: int size()>();

        $i10 = $i9 - 1;

        interfaceinvoke r12.<java.util.List: java.lang.Object remove(int)>($i10);

        $i11 = interfaceinvoke r12.<java.util.List: int size()>();

        $i12 = $i11 - 1;

        interfaceinvoke r12.<java.util.List: java.lang.Object remove(int)>($i12);

        $r13 = new org.apache.pdfbox.cos.COSFloat;

        $f6 = r23[0];

        specialinvoke $r13.<org.apache.pdfbox.cos.COSFloat: void <init>(float)>($f6);

        interfaceinvoke r12.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r14 = new org.apache.pdfbox.cos.COSFloat;

        $f7 = r23[1];

        specialinvoke $r14.<org.apache.pdfbox.cos.COSFloat: void <init>(float)>($f7);

        interfaceinvoke r12.<java.util.List: boolean add(java.lang.Object)>($r14);

        $r15 = new org.apache.pdfbox.cos.COSFloat;

        $f8 = r23[2];

        specialinvoke $r15.<org.apache.pdfbox.cos.COSFloat: void <init>(float)>($f8);

        interfaceinvoke r12.<java.util.List: boolean add(java.lang.Object)>($r15);

        $r16 = new org.apache.pdfbox.cos.COSFloat;

        $f9 = r23[3];

        specialinvoke $r16.<org.apache.pdfbox.cos.COSFloat: void <init>(float)>($f9);

        interfaceinvoke r12.<java.util.List: boolean add(java.lang.Object)>($r16);

        return;
    }

    private void replaceGrayTokensWithCMYKTokens(java.util.List, java.util.List, int, java.util.Hashtable)
    {
        org.apache.pdfbox.cos.COSFloat $r10, $r11, $r12, $r13;
        org.apache.pdfbox.cos.COSNumber $r2;
        int[] $r4, $r15, $r16, $r17, $r18;
        org.apache.pdfbox.ConvertColorspace r19;
        java.util.List r0, r9;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13;
        float[] $r8, $r14, r20;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.util.Hashtable r5;
        org.apache.pdfbox.ConvertColorspace$ColorSpaceInstance $r3, r7;
        java.lang.Object $r1, $r6;

        r19 := @this: org.apache.pdfbox.ConvertColorspace;

        r9 := @parameter0: java.util.List;

        r0 := @parameter1: java.util.List;

        i0 := @parameter2: int;

        r5 := @parameter3: java.util.Hashtable;

        $i1 = i0 - 1;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i1);

        $r2 = (org.apache.pdfbox.cos.COSNumber) $r1;

        $f0 = virtualinvoke $r2.<org.apache.pdfbox.cos.COSNumber: float floatValue()>();

        $r3 = new org.apache.pdfbox.ConvertColorspace$ColorSpaceInstance;

        specialinvoke $r3.<org.apache.pdfbox.ConvertColorspace$ColorSpaceInstance: void <init>(org.apache.pdfbox.ConvertColorspace$1)>(null);

        staticinvoke <org.apache.pdfbox.ConvertColorspace$ColorSpaceInstance: java.lang.String access$102(org.apache.pdfbox.ConvertColorspace$ColorSpaceInstance,java.lang.String)>($r3, "Grayscale");

        $r4 = newarray (int)[1];

        $f1 = $f0 * 100.0F;

        $i2 = staticinvoke <java.lang.Math: int round(float)>($f1);

        $r4[0] = $i2;

        staticinvoke <org.apache.pdfbox.ConvertColorspace$ColorSpaceInstance: int[] access$202(org.apache.pdfbox.ConvertColorspace$ColorSpaceInstance,int[])>($r3, $r4);

        $r6 = virtualinvoke r5.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r3);

        r7 = (org.apache.pdfbox.ConvertColorspace$ColorSpaceInstance) $r6;

        if r7 == null goto label1;

        $r14 = newarray (float)[4];

        $r15 = staticinvoke <org.apache.pdfbox.ConvertColorspace$ColorSpaceInstance: int[] access$200(org.apache.pdfbox.ConvertColorspace$ColorSpaceInstance)>(r7);

        $i5 = $r15[0];

        $f6 = (float) $i5;

        $f7 = $f6 / 100.0F;

        $r14[0] = $f7;

        $r16 = staticinvoke <org.apache.pdfbox.ConvertColorspace$ColorSpaceInstance: int[] access$200(org.apache.pdfbox.ConvertColorspace$ColorSpaceInstance)>(r7);

        $i6 = $r16[1];

        $f8 = (float) $i6;

        $f9 = $f8 / 100.0F;

        $r14[1] = $f9;

        $r17 = staticinvoke <org.apache.pdfbox.ConvertColorspace$ColorSpaceInstance: int[] access$200(org.apache.pdfbox.ConvertColorspace$ColorSpaceInstance)>(r7);

        $i7 = $r17[2];

        $f10 = (float) $i7;

        $f11 = $f10 / 100.0F;

        $r14[2] = $f11;

        $r18 = staticinvoke <org.apache.pdfbox.ConvertColorspace$ColorSpaceInstance: int[] access$200(org.apache.pdfbox.ConvertColorspace$ColorSpaceInstance)>(r7);

        $i8 = $r18[3];

        $f12 = (float) $i8;

        $f13 = $f12 / 100.0F;

        $r14[3] = $f13;

        r20 = $r14;

        goto label2;

     label1:
        $r8 = newarray (float)[4];

        $r8[0] = 0.0F;

        $r8[1] = 0.0F;

        $r8[2] = 0.0F;

        $r8[3] = $f0;

        r20 = $r8;

     label2:
        $i3 = interfaceinvoke r9.<java.util.List: int size()>();

        $i4 = $i3 - 1;

        interfaceinvoke r9.<java.util.List: java.lang.Object remove(int)>($i4);

        $r10 = new org.apache.pdfbox.cos.COSFloat;

        $f2 = r20[0];

        specialinvoke $r10.<org.apache.pdfbox.cos.COSFloat: void <init>(float)>($f2);

        interfaceinvoke r9.<java.util.List: boolean add(java.lang.Object)>($r10);

        $r11 = new org.apache.pdfbox.cos.COSFloat;

        $f3 = r20[1];

        specialinvoke $r11.<org.apache.pdfbox.cos.COSFloat: void <init>(float)>($f3);

        interfaceinvoke r9.<java.util.List: boolean add(java.lang.Object)>($r11);

        $r12 = new org.apache.pdfbox.cos.COSFloat;

        $f4 = r20[2];

        specialinvoke $r12.<org.apache.pdfbox.cos.COSFloat: void <init>(float)>($f4);

        interfaceinvoke r9.<java.util.List: boolean add(java.lang.Object)>($r12);

        $r13 = new org.apache.pdfbox.cos.COSFloat;

        $f5 = r20[3];

        specialinvoke $r13.<org.apache.pdfbox.cos.COSFloat: void <init>(float)>($f5);

        interfaceinvoke r9.<java.util.List: boolean add(java.lang.Object)>($r13);

        return;
    }

    private static float[] convertRGBToCMYK(float, float, float)
    {
        float[] $r0;
        float f0, f1, f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, f12, f13, f14, f15, f16, f17;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f12 = 1.0F - f0;

        f13 = 1.0F - f1;

        f14 = 1.0F - f2;

        $f3 = staticinvoke <java.lang.Math: float min(float,float)>(f12, 1.0F);

        $f4 = staticinvoke <java.lang.Math: float min(float,float)>($f3, f13);

        $f5 = staticinvoke <java.lang.Math: float min(float,float)>($f4, f14);

        $f7 = f12 - $f5;

        $f6 = 1.0F - $f5;

        f15 = $f7 / $f6;

        $f9 = f13 - $f5;

        $f8 = 1.0F - $f5;

        f16 = $f9 / $f8;

        $f11 = f14 - $f5;

        $f10 = 1.0F - $f5;

        f17 = $f11 / $f10;

        $r0 = newarray (float)[4];

        $r0[0] = f15;

        $r0[1] = f16;

        $r0[2] = f17;

        $r0[3] = $f5;

        return $r0;
    }

    private static int[] stringToIntArray(java.lang.String)
    {
        java.lang.String[] $r1;
        int[] r2;
        int $i0, $i1, $i2, i3;
        java.lang.String r0, $r3;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        $i0 = lengthof $r1;

        r2 = newarray (int)[$i0];

        i3 = 0;

     label1:
        $i1 = lengthof $r1;

        if i3 >= $i1 goto label2;

        $r3 = $r1[i3];

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        r2[i3] = $i2;

        i3 = i3 + 1;

        goto label1;

     label2:
        return r2;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.util.regex.Matcher $r6;
        int[] $r12, $r14;
        org.apache.pdfbox.ConvertColorspace $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.pdfbox.pdmodel.PDDocument r22, $r23;
        java.util.regex.Pattern $r0;
        java.lang.Throwable $r15;
        java.lang.String[] r2;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String $r4, $r5, $r7, $r8, $r9, $r10, r16, r17, r18, r19, $r20, $r21;
        java.util.Hashtable $r1;
        org.apache.pdfbox.ConvertColorspace$ColorSpaceInstance $r11, $r13;

        r2 := @parameter0: java.lang.String[];

        r16 = "";

        r17 = null;

        r18 = null;

        r19 = "CMYK";

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^(.*):\\((.*)\\)=(.*):\\((.*)\\)$");

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>()>();

        i4 = 0;

     label01:
        $i0 = lengthof r2;

        if i4 >= $i0 goto label11;

        $r4 = r2[i4];

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("-password");

        if $z1 == 0 goto label03;

        i4 = i4 + 1;

        $i3 = lengthof r2;

        if i4 < $i3 goto label02;

        staticinvoke <org.apache.pdfbox.ConvertColorspace: void usage()>();

     label02:
        r16 = r2[i4];

     label03:
        $r20 = r2[i4];

        $z3 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>("-toColorspace");

        if $z3 == 0 goto label05;

        i4 = i4 + 1;

        $i2 = lengthof r2;

        if i4 < $i2 goto label04;

        staticinvoke <org.apache.pdfbox.ConvertColorspace: void usage()>();

     label04:
        r19 = r2[i4];

     label05:
        $r21 = r2[i4];

        $z4 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>("-equiv");

        if $z4 == 0 goto label08;

        i4 = i4 + 1;

        $i1 = lengthof r2;

        if i4 < $i1 goto label06;

        staticinvoke <org.apache.pdfbox.ConvertColorspace: void usage()>();

     label06:
        $r5 = r2[i4];

        $r6 = virtualinvoke $r0.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r5);

        $z2 = virtualinvoke $r6.<java.util.regex.Matcher: boolean matches()>();

        if $z2 != 0 goto label07;

        staticinvoke <org.apache.pdfbox.ConvertColorspace: void usage()>();

     label07:
        $r7 = virtualinvoke $r6.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r8 = virtualinvoke $r6.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        $r9 = virtualinvoke $r6.<java.util.regex.Matcher: java.lang.String group(int)>(3);

        $r10 = virtualinvoke $r6.<java.util.regex.Matcher: java.lang.String group(int)>(4);

        $r11 = new org.apache.pdfbox.ConvertColorspace$ColorSpaceInstance;

        specialinvoke $r11.<org.apache.pdfbox.ConvertColorspace$ColorSpaceInstance: void <init>(org.apache.pdfbox.ConvertColorspace$1)>(null);

        staticinvoke <org.apache.pdfbox.ConvertColorspace$ColorSpaceInstance: java.lang.String access$102(org.apache.pdfbox.ConvertColorspace$ColorSpaceInstance,java.lang.String)>($r11, $r7);

        $r12 = staticinvoke <org.apache.pdfbox.ConvertColorspace: int[] stringToIntArray(java.lang.String)>($r8);

        staticinvoke <org.apache.pdfbox.ConvertColorspace$ColorSpaceInstance: int[] access$202(org.apache.pdfbox.ConvertColorspace$ColorSpaceInstance,int[])>($r11, $r12);

        $r13 = new org.apache.pdfbox.ConvertColorspace$ColorSpaceInstance;

        specialinvoke $r13.<org.apache.pdfbox.ConvertColorspace$ColorSpaceInstance: void <init>(org.apache.pdfbox.ConvertColorspace$1)>(null);

        staticinvoke <org.apache.pdfbox.ConvertColorspace$ColorSpaceInstance: java.lang.String access$102(org.apache.pdfbox.ConvertColorspace$ColorSpaceInstance,java.lang.String)>($r13, $r9);

        $r14 = staticinvoke <org.apache.pdfbox.ConvertColorspace: int[] stringToIntArray(java.lang.String)>($r10);

        staticinvoke <org.apache.pdfbox.ConvertColorspace$ColorSpaceInstance: int[] access$202(org.apache.pdfbox.ConvertColorspace$ColorSpaceInstance,int[])>($r13, $r14);

        virtualinvoke $r1.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, $r13);

        goto label10;

     label08:
        if r17 != null goto label09;

        r17 = r2[i4];

        goto label10;

     label09:
        r18 = r2[i4];

     label10:
        i4 = i4 + 1;

        goto label01;

     label11:
        if r17 != null goto label12;

        staticinvoke <org.apache.pdfbox.ConvertColorspace: void usage()>();

     label12:
        if r18 == null goto label13;

        $z0 = virtualinvoke r18.<java.lang.String: boolean equals(java.lang.Object)>(r17);

        if $z0 == 0 goto label14;

     label13:
        staticinvoke <org.apache.pdfbox.ConvertColorspace: void usage()>();

     label14:
        r22 = null;

     label15:
        $r23 = staticinvoke <org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocument load(java.lang.String)>(r17);

        r22 = $r23;

        $z5 = virtualinvoke $r23.<org.apache.pdfbox.pdmodel.PDDocument: boolean isEncrypted()>();

        if $z5 == 0 goto label16;

        virtualinvoke $r23.<org.apache.pdfbox.pdmodel.PDDocument: void decrypt(java.lang.String)>(r16);

     label16:
        $r3 = new org.apache.pdfbox.ConvertColorspace;

        specialinvoke $r3.<org.apache.pdfbox.ConvertColorspace: void <init>()>();

        specialinvoke $r3.<org.apache.pdfbox.ConvertColorspace: void replaceColors(org.apache.pdfbox.pdmodel.PDDocument,java.util.Hashtable,java.lang.String)>($r23, $r1, r19);

        virtualinvoke $r23.<org.apache.pdfbox.pdmodel.PDDocument: void save(java.lang.String)>(r18);

     label17:
        if $r23 == null goto label21;

        virtualinvoke $r23.<org.apache.pdfbox.pdmodel.PDDocument: void close()>();

        goto label21;

     label18:
        $r15 := @caughtexception;

     label19:
        if r22 == null goto label20;

        virtualinvoke r22.<org.apache.pdfbox.pdmodel.PDDocument: void close()>();

     label20:
        throw $r15;

     label21:
        return;

        catch java.lang.Throwable from label15 to label17 with label18;
        catch java.lang.Throwable from label18 to label19 with label18;
    }

    private static void usage()
    {
        java.io.PrintStream $r0;

        $r0 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("Usage: java org.apache.pdfbox.ConvertColorspace [OPTIONS] <PDF Input file> <PDF Output File>\n  -password  <password>                Password to decrypt document\n  -equiv <color equivalent>            Color equivalent to use for conversion.\n  -destColorspace <color equivalent>   The destination colorspace, CMYK is the only \'supported colorspace.  \n The equiv format is : <source colorspace>:(colorspace value)=<dest colorspace>:(colorspace value) This option can be used as many times as necessary\n The supported equiv colorspaces are RGB and CMYK.\n RGB color values are integers between 0 and 255 CMYK color values are integer between 0 and 100.\n Example: java org.apache.pdfbox.ConvertColorspace -equiv RGB:(255,0,0)=CMYK(0,99,100,0) input.pdf output.pdf\n  <PDF Input file>             The PDF document to use\n  <PDF Output file>            The PDF file to write the result to. Must be different of input file\n");

        staticinvoke <java.lang.System: void exit(int)>(1);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.pdfbox.ConvertColorspace: java.lang.String DEST_COLORSPACE> = "-toColorspace";

        <org.apache.pdfbox.ConvertColorspace: java.lang.String CONVERSION> = "-equiv";

        <org.apache.pdfbox.ConvertColorspace: java.lang.String PASSWORD> = "-password";

        return;
    }
}
