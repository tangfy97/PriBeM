public class com.hp.hpl.jena.assembler.ModelExpansion extends java.lang.Object
{
    private static final com.hp.hpl.jena.rdf.model.Property ANY;

    public void <init>()
    {
        com.hp.hpl.jena.assembler.ModelExpansion r0;

        r0 := @this: com.hp.hpl.jena.assembler.ModelExpansion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.hp.hpl.jena.rdf.model.Model withSchema(com.hp.hpl.jena.rdf.model.Model, com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.rdf.model.Model $r0, r1, $r2, r3;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r3 := @parameter1: com.hp.hpl.jena.rdf.model.Model;

        $r0 = staticinvoke <com.hp.hpl.jena.rdf.model.ModelFactory: com.hp.hpl.jena.rdf.model.Model createDefaultModel()>();

        $r2 = interfaceinvoke $r0.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Model add(com.hp.hpl.jena.rdf.model.Model)>(r1);

        staticinvoke <com.hp.hpl.jena.assembler.ModelExpansion: void addSubclassesFrom(com.hp.hpl.jena.rdf.model.Model,com.hp.hpl.jena.rdf.model.Model)>($r2, r3);

        staticinvoke <com.hp.hpl.jena.assembler.ModelExpansion: void addSubClassClosure(com.hp.hpl.jena.rdf.model.Model)>($r2);

        staticinvoke <com.hp.hpl.jena.assembler.ModelExpansion: void addDomainTypes(com.hp.hpl.jena.rdf.model.Model,com.hp.hpl.jena.rdf.model.Model)>($r2, r3);

        staticinvoke <com.hp.hpl.jena.assembler.ModelExpansion: void addRangeTypes(com.hp.hpl.jena.rdf.model.Model,com.hp.hpl.jena.rdf.model.Model)>($r2, r3);

        staticinvoke <com.hp.hpl.jena.assembler.ModelExpansion: void addIntersections(com.hp.hpl.jena.rdf.model.Model,com.hp.hpl.jena.rdf.model.Model)>($r2, r3);

        staticinvoke <com.hp.hpl.jena.assembler.ModelExpansion: void addSupertypes(com.hp.hpl.jena.rdf.model.Model)>($r2);

        return $r2;
    }

    protected static void addSubclassesFrom(com.hp.hpl.jena.rdf.model.Model, com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.rdf.model.RDFNode $r7;
        com.hp.hpl.jena.rdf.model.Statement $r5;
        com.hp.hpl.jena.rdf.model.Resource $r6;
        com.hp.hpl.jena.rdf.model.StmtIterator $r4;
        com.hp.hpl.jena.rdf.model.Property $r1, $r2, $r3;
        com.hp.hpl.jena.rdf.model.Model r0, r8;
        boolean $z0, $z1, $z2;

        r8 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r0 := @parameter1: com.hp.hpl.jena.rdf.model.Model;

        $r3 = <com.hp.hpl.jena.assembler.ModelExpansion: com.hp.hpl.jena.rdf.model.Property ANY>;

        $r2 = <com.hp.hpl.jena.vocabulary.RDFS: com.hp.hpl.jena.rdf.model.Property subClassOf>;

        $r1 = <com.hp.hpl.jena.assembler.ModelExpansion: com.hp.hpl.jena.rdf.model.Property ANY>;

        $r4 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.StmtIterator listStatements(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>($r3, $r2, $r1);

     label1:
        $z0 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getSubject()>();

        $z1 = interfaceinvoke $r6.<com.hp.hpl.jena.rdf.model.Resource: boolean isURIResource()>();

        if $z1 == 0 goto label2;

        $r7 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        $z2 = interfaceinvoke $r7.<com.hp.hpl.jena.rdf.model.RDFNode: boolean isURIResource()>();

        if $z2 == 0 goto label2;

        interfaceinvoke r8.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Model add(com.hp.hpl.jena.rdf.model.Statement)>($r5);

     label2:
        goto label1;

     label3:
        return;
    }

    public static void addSubClassClosure(com.hp.hpl.jena.rdf.model.Model)
    {
        java.util.Iterator $r3;
        com.hp.hpl.jena.rdf.model.Model r0;
        java.util.Set $r1, $r2;
        java.lang.Object $r4;
        com.hp.hpl.jena.rdf.model.Resource $r5;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        $r1 = staticinvoke <com.hp.hpl.jena.assembler.ModelExpansion: java.util.Set findClassesBySubClassOf(com.hp.hpl.jena.rdf.model.Model)>(r0);

        $r2 = staticinvoke <com.hp.hpl.jena.assembler.ModelExpansion: java.util.Set selectRootClasses(com.hp.hpl.jena.rdf.model.Model,java.util.Set)>(r0, $r1);

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.hp.hpl.jena.rdf.model.Resource) $r4;

        staticinvoke <com.hp.hpl.jena.assembler.ModelExpansion: void addSuperClasses(com.hp.hpl.jena.rdf.model.Model,com.hp.hpl.jena.rdf.model.Resource)>(r0, $r5);

        goto label1;

     label2:
        return;
    }

    private static void addSuperClasses(com.hp.hpl.jena.rdf.model.Model, com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.rdf.model.Model r0;
        com.hp.hpl.jena.assembler.ModelExpansion$LinkedSeq $r1;
        com.hp.hpl.jena.rdf.model.Resource r2;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r2 := @parameter1: com.hp.hpl.jena.rdf.model.Resource;

        $r1 = new com.hp.hpl.jena.assembler.ModelExpansion$LinkedSeq;

        specialinvoke $r1.<com.hp.hpl.jena.assembler.ModelExpansion$LinkedSeq: void <init>(com.hp.hpl.jena.rdf.model.Resource)>(r2);

        staticinvoke <com.hp.hpl.jena.assembler.ModelExpansion: void addSuperClasses(com.hp.hpl.jena.rdf.model.Model,com.hp.hpl.jena.assembler.ModelExpansion$LinkedSeq)>(r0, $r1);

        return;
    }

    private static void addSuperClasses(com.hp.hpl.jena.rdf.model.Model, com.hp.hpl.jena.assembler.ModelExpansion$LinkedSeq)
    {
        com.hp.hpl.jena.rdf.model.Model $r0, r1;
        com.hp.hpl.jena.assembler.ModelExpansion$LinkedSeq r2;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r2 := @parameter1: com.hp.hpl.jena.assembler.ModelExpansion$LinkedSeq;

        $r0 = staticinvoke <com.hp.hpl.jena.rdf.model.ModelFactory: com.hp.hpl.jena.rdf.model.Model createDefaultModel()>();

        staticinvoke <com.hp.hpl.jena.assembler.ModelExpansion: void addSuperClasses(com.hp.hpl.jena.rdf.model.Model,com.hp.hpl.jena.assembler.ModelExpansion$LinkedSeq,com.hp.hpl.jena.rdf.model.Model)>(r1, r2, $r0);

        interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Model add(com.hp.hpl.jena.rdf.model.Model)>($r0);

        return;
    }

    private static void addSuperClasses(com.hp.hpl.jena.rdf.model.Model, com.hp.hpl.jena.assembler.ModelExpansion$LinkedSeq, com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.rdf.model.Statement $r5;
        com.hp.hpl.jena.rdf.model.Resource r1, $r6, $r9;
        com.hp.hpl.jena.assembler.ModelExpansion$LinkedSeq r0, $r7, r11;
        com.hp.hpl.jena.rdf.model.StmtIterator $r4;
        com.hp.hpl.jena.rdf.model.Property $r3, $r10;
        com.hp.hpl.jena.rdf.model.Model r2, r8;
        boolean $z0;

        r2 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r0 := @parameter1: com.hp.hpl.jena.assembler.ModelExpansion$LinkedSeq;

        r8 := @parameter2: com.hp.hpl.jena.rdf.model.Model;

        r1 = r0.<com.hp.hpl.jena.assembler.ModelExpansion$LinkedSeq: com.hp.hpl.jena.rdf.model.Resource item>;

        $r3 = <com.hp.hpl.jena.vocabulary.RDFS: com.hp.hpl.jena.rdf.model.Property subClassOf>;

        $r4 = interfaceinvoke r2.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.StmtIterator listStatements(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(null, $r3, r1);

     label1:
        $z0 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getSubject()>();

        r11 = r0.<com.hp.hpl.jena.assembler.ModelExpansion$LinkedSeq: com.hp.hpl.jena.assembler.ModelExpansion$LinkedSeq rest>;

     label2:
        if r11 == null goto label3;

        $r10 = <com.hp.hpl.jena.vocabulary.RDFS: com.hp.hpl.jena.rdf.model.Property subClassOf>;

        $r9 = r11.<com.hp.hpl.jena.assembler.ModelExpansion$LinkedSeq: com.hp.hpl.jena.rdf.model.Resource item>;

        interfaceinvoke r8.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Model add(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>($r6, $r10, $r9);

        r11 = r11.<com.hp.hpl.jena.assembler.ModelExpansion$LinkedSeq: com.hp.hpl.jena.assembler.ModelExpansion$LinkedSeq rest>;

        goto label2;

     label3:
        $r7 = virtualinvoke r0.<com.hp.hpl.jena.assembler.ModelExpansion$LinkedSeq: com.hp.hpl.jena.assembler.ModelExpansion$LinkedSeq push(com.hp.hpl.jena.rdf.model.Resource)>($r6);

        staticinvoke <com.hp.hpl.jena.assembler.ModelExpansion: void addSuperClasses(com.hp.hpl.jena.rdf.model.Model,com.hp.hpl.jena.assembler.ModelExpansion$LinkedSeq,com.hp.hpl.jena.rdf.model.Model)>(r2, $r7, r8);

        goto label1;

     label4:
        return;
    }

    private static java.util.Set selectRootClasses(com.hp.hpl.jena.rdf.model.Model, java.util.Set)
    {
        java.util.Iterator $r2;
        java.util.Set r1;
        com.hp.hpl.jena.rdf.model.Resource r4;
        java.util.HashSet $r0;
        com.hp.hpl.jena.rdf.model.Property $r6;
        com.hp.hpl.jena.rdf.model.Model r5;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r5 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r1 := @parameter1: java.util.Set;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r2 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.hp.hpl.jena.rdf.model.Resource) $r3;

        $r6 = <com.hp.hpl.jena.vocabulary.RDFS: com.hp.hpl.jena.rdf.model.Property subClassOf>;

        $z1 = interfaceinvoke r5.<com.hp.hpl.jena.rdf.model.Model: boolean contains(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(r4, $r6, null);

        if $z1 != 0 goto label2;

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>(r4);

     label2:
        goto label1;

     label3:
        return $r0;
    }

    private static java.util.Set findClassesBySubClassOf(com.hp.hpl.jena.rdf.model.Model)
    {
        java.util.HashSet $r0;
        com.hp.hpl.jena.rdf.model.StmtIterator $r3;
        com.hp.hpl.jena.rdf.model.Property $r2;
        com.hp.hpl.jena.rdf.model.Model r1;
        com.hp.hpl.jena.rdf.model.Statement $r4;
        boolean $z0;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r2 = <com.hp.hpl.jena.vocabulary.RDFS: com.hp.hpl.jena.rdf.model.Property subClassOf>;

        $r3 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.StmtIterator listStatements(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(null, $r2, null);

     label1:
        $z0 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        staticinvoke <com.hp.hpl.jena.assembler.ModelExpansion: void addClasses(java.util.Set,com.hp.hpl.jena.rdf.model.Statement)>($r0, $r4);

        goto label1;

     label2:
        return $r0;
    }

    private static void addClasses(java.util.Set, com.hp.hpl.jena.rdf.model.Statement)
    {
        com.hp.hpl.jena.rdf.model.RDFNode $r3;
        java.util.Set r0;
        com.hp.hpl.jena.rdf.model.Statement r1;
        com.hp.hpl.jena.rdf.model.Resource $r2;

        r0 := @parameter0: java.util.Set;

        r1 := @parameter1: com.hp.hpl.jena.rdf.model.Statement;

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getSubject()>();

        interfaceinvoke r0.<java.util.Set: boolean add(java.lang.Object)>($r2);

        $r3 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        interfaceinvoke r0.<java.util.Set: boolean add(java.lang.Object)>($r3);

        return;
    }

    protected static void addDomainTypes(com.hp.hpl.jena.rdf.model.Model, com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.rdf.model.StmtIterator $r4, $r13;
        com.hp.hpl.jena.rdf.model.Property $r1, $r2, $r3, r8, $r11, $r12, $r16;
        boolean $z0, $z1;
        com.hp.hpl.jena.rdf.model.RDFNode $r7, $r9;
        com.hp.hpl.jena.rdf.model.Statement $r5, $r14;
        com.hp.hpl.jena.rdf.model.Resource $r6, $r15;
        com.hp.hpl.jena.rdf.model.Model r0, r10;

        r10 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r0 := @parameter1: com.hp.hpl.jena.rdf.model.Model;

        $r3 = <com.hp.hpl.jena.assembler.ModelExpansion: com.hp.hpl.jena.rdf.model.Property ANY>;

        $r2 = <com.hp.hpl.jena.vocabulary.RDFS: com.hp.hpl.jena.rdf.model.Property domain>;

        $r1 = <com.hp.hpl.jena.assembler.ModelExpansion: com.hp.hpl.jena.rdf.model.Property ANY>;

        $r4 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.StmtIterator listStatements(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>($r3, $r2, $r1);

     label1:
        $z0 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getSubject()>();

        $r7 = interfaceinvoke $r6.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.RDFNode as(java.lang.Class)>(class "Lcom/hp/hpl/jena/rdf/model/Property;");

        r8 = (com.hp.hpl.jena.rdf.model.Property) $r7;

        $r9 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        $r12 = <com.hp.hpl.jena.assembler.ModelExpansion: com.hp.hpl.jena.rdf.model.Property ANY>;

        $r11 = <com.hp.hpl.jena.assembler.ModelExpansion: com.hp.hpl.jena.rdf.model.Property ANY>;

        $r13 = interfaceinvoke r10.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.StmtIterator listStatements(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>($r12, r8, $r11);

     label2:
        $z1 = interfaceinvoke $r13.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r14 = interfaceinvoke $r13.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r15 = interfaceinvoke $r14.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getSubject()>();

        $r16 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        interfaceinvoke r10.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Model add(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>($r15, $r16, $r9);

        goto label2;

     label3:
        goto label1;

     label4:
        return;
    }

    protected static void addRangeTypes(com.hp.hpl.jena.rdf.model.Model, com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.rdf.model.StmtIterator $r5, $r14;
        com.hp.hpl.jena.rdf.model.Property $r2, $r3, $r4, r11, $r12, $r13, $r17;
        boolean $z0, $z1, $z2;
        com.hp.hpl.jena.rdf.model.RDFNode $r8, $r10, $r16;
        com.hp.hpl.jena.rdf.model.Statement $r7, $r15;
        com.hp.hpl.jena.rdf.model.Resource $r9, $r18;
        com.hp.hpl.jena.rdf.model.Model $r0, r1, r6;

        r6 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r1 := @parameter1: com.hp.hpl.jena.rdf.model.Model;

        $r0 = staticinvoke <com.hp.hpl.jena.rdf.model.ModelFactory: com.hp.hpl.jena.rdf.model.Model createDefaultModel()>();

        $r4 = <com.hp.hpl.jena.assembler.ModelExpansion: com.hp.hpl.jena.rdf.model.Property ANY>;

        $r3 = <com.hp.hpl.jena.vocabulary.RDFS: com.hp.hpl.jena.rdf.model.Property range>;

        $r2 = <com.hp.hpl.jena.assembler.ModelExpansion: com.hp.hpl.jena.rdf.model.Property ANY>;

        $r5 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.StmtIterator listStatements(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>($r4, $r3, $r2);

     label1:
        $z0 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r7 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r8 = interfaceinvoke $r7.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        $r9 = interfaceinvoke $r7.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getSubject()>();

        $r10 = interfaceinvoke $r9.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.RDFNode as(java.lang.Class)>(class "Lcom/hp/hpl/jena/rdf/model/Property;");

        r11 = (com.hp.hpl.jena.rdf.model.Property) $r10;

        $r13 = <com.hp.hpl.jena.assembler.ModelExpansion: com.hp.hpl.jena.rdf.model.Property ANY>;

        $r12 = <com.hp.hpl.jena.assembler.ModelExpansion: com.hp.hpl.jena.rdf.model.Property ANY>;

        $r14 = interfaceinvoke r6.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.StmtIterator listStatements(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>($r13, r11, $r12);

     label2:
        $z1 = interfaceinvoke $r14.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r15 = interfaceinvoke $r14.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r16 = interfaceinvoke $r15.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        $z2 = interfaceinvoke $r16.<com.hp.hpl.jena.rdf.model.RDFNode: boolean isResource()>();

        if $z2 == 0 goto label3;

        $r18 = (com.hp.hpl.jena.rdf.model.Resource) $r16;

        $r17 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        interfaceinvoke $r0.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Model add(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>($r18, $r17, $r8);

     label3:
        goto label2;

     label4:
        goto label1;

     label5:
        interfaceinvoke r6.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Model add(com.hp.hpl.jena.rdf.model.Model)>($r0);

        return;
    }

    protected static void addSupertypes(com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.rdf.model.StmtIterator $r5, $r10;
        com.hp.hpl.jena.rdf.model.Property $r2, $r3, $r4, $r8, $r9, $r14;
        boolean $z0, $z1;
        com.hp.hpl.jena.rdf.model.RDFNode $r12;
        com.hp.hpl.jena.rdf.model.Statement $r6, $r11;
        com.hp.hpl.jena.rdf.model.Resource $r7, $r13;
        com.hp.hpl.jena.rdf.model.Model $r0, r1;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        $r0 = staticinvoke <com.hp.hpl.jena.rdf.model.ModelFactory: com.hp.hpl.jena.rdf.model.Model createDefaultModel()>();

        $r4 = <com.hp.hpl.jena.assembler.ModelExpansion: com.hp.hpl.jena.rdf.model.Property ANY>;

        $r3 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        $r2 = <com.hp.hpl.jena.assembler.ModelExpansion: com.hp.hpl.jena.rdf.model.Property ANY>;

        $r5 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.StmtIterator listStatements(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>($r4, $r3, $r2);

     label1:
        $z0 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r7 = staticinvoke <com.hp.hpl.jena.assembler.AssemblerHelp: com.hp.hpl.jena.rdf.model.Resource getResource(com.hp.hpl.jena.rdf.model.Statement)>($r6);

        $r9 = <com.hp.hpl.jena.vocabulary.RDFS: com.hp.hpl.jena.rdf.model.Property subClassOf>;

        $r8 = <com.hp.hpl.jena.assembler.ModelExpansion: com.hp.hpl.jena.rdf.model.Property ANY>;

        $r10 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.StmtIterator listStatements(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>($r7, $r9, $r8);

     label2:
        $z1 = interfaceinvoke $r10.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r11 = interfaceinvoke $r10.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r12 = interfaceinvoke $r11.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        $r13 = interfaceinvoke $r6.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getSubject()>();

        $r14 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        interfaceinvoke $r0.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Model add(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>($r13, $r14, $r12);

        goto label2;

     label3:
        goto label1;

     label4:
        interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Model add(com.hp.hpl.jena.rdf.model.Model)>($r0);

        return;
    }

    private static void addIntersections(com.hp.hpl.jena.rdf.model.Model, com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.rdf.model.Statement $r6;
        com.hp.hpl.jena.rdf.model.StmtIterator $r4;
        com.hp.hpl.jena.rdf.model.Property $r1, $r2, $r3;
        com.hp.hpl.jena.rdf.model.Model r0, r5;
        boolean $z0;

        r5 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r0 := @parameter1: com.hp.hpl.jena.rdf.model.Model;

        $r3 = <com.hp.hpl.jena.assembler.ModelExpansion: com.hp.hpl.jena.rdf.model.Property ANY>;

        $r2 = <com.hp.hpl.jena.vocabulary.OWL: com.hp.hpl.jena.rdf.model.Property intersectionOf>;

        $r1 = <com.hp.hpl.jena.assembler.ModelExpansion: com.hp.hpl.jena.rdf.model.Property ANY>;

        $r4 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.StmtIterator listStatements(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>($r3, $r2, $r1);

     label1:
        $z0 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        staticinvoke <com.hp.hpl.jena.assembler.ModelExpansion: void addIntersections(com.hp.hpl.jena.rdf.model.Model,com.hp.hpl.jena.rdf.model.Model,com.hp.hpl.jena.rdf.model.Statement)>(r5, r0, $r6);

        goto label1;

     label2:
        return;
    }

    private static void addIntersections(com.hp.hpl.jena.rdf.model.Model, com.hp.hpl.jena.rdf.model.Model, com.hp.hpl.jena.rdf.model.Statement)
    {
        com.hp.hpl.jena.rdf.model.RDFNode $r8;
        java.util.Set $r9;
        com.hp.hpl.jena.rdf.model.Statement r0;
        com.hp.hpl.jena.rdf.model.Resource $r1, $r2, $r11;
        java.util.List $r3;
        com.hp.hpl.jena.rdf.model.Property $r5, $r6;
        com.hp.hpl.jena.rdf.model.Model r4, r12;
        int $i0, i1;
        java.lang.Object $r7, $r10;

        r4 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r12 := @parameter1: com.hp.hpl.jena.rdf.model.Model;

        r0 := @parameter2: com.hp.hpl.jena.rdf.model.Statement;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getSubject()>();

        $r2 = staticinvoke <com.hp.hpl.jena.assembler.AssemblerHelp: com.hp.hpl.jena.rdf.model.Resource getResource(com.hp.hpl.jena.rdf.model.Statement)>(r0);

        $r3 = staticinvoke <com.hp.hpl.jena.assembler.ModelExpansion: java.util.List asJavaList(com.hp.hpl.jena.rdf.model.Resource)>($r2);

        $r5 = <com.hp.hpl.jena.assembler.ModelExpansion: com.hp.hpl.jena.rdf.model.Property ANY>;

        $r6 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        $r7 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(0);

        $r8 = (com.hp.hpl.jena.rdf.model.RDFNode) $r7;

        $r9 = staticinvoke <com.hp.hpl.jena.assembler.ModelExpansion: java.util.Set subjectSet(com.hp.hpl.jena.rdf.model.Model,com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(r4, $r5, $r6, $r8);

        i1 = 1;

     label1:
        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i1 >= $i0 goto label2;

        $r10 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i1);

        $r11 = (com.hp.hpl.jena.rdf.model.Resource) $r10;

        staticinvoke <com.hp.hpl.jena.assembler.ModelExpansion: void removeElementsWithoutType(java.util.Set,com.hp.hpl.jena.rdf.model.Resource)>($r9, $r11);

        i1 = i1 + 1;

        goto label1;

     label2:
        staticinvoke <com.hp.hpl.jena.assembler.ModelExpansion: void addTypeToAll(com.hp.hpl.jena.rdf.model.Resource,java.util.Set)>($r1, $r9);

        return;
    }

    private static void addTypeToAll(com.hp.hpl.jena.rdf.model.Resource, java.util.Set)
    {
        java.util.Iterator $r3;
        com.hp.hpl.jena.rdf.model.RDFNode $r8;
        java.util.Set r2;
        com.hp.hpl.jena.rdf.model.Resource r0, r5;
        java.util.List $r1;
        com.hp.hpl.jena.rdf.model.Property $r6;
        int $i0, i1;
        java.lang.Object $r4, $r7;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        r2 := @parameter1: java.util.Set;

        $r1 = staticinvoke <com.hp.hpl.jena.assembler.ModelExpansion: java.util.List equivalentTypes(com.hp.hpl.jena.rdf.model.Resource)>(r0);

        $r3 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.hp.hpl.jena.rdf.model.Resource) $r4;

        i1 = 0;

     label2:
        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i1 >= $i0 goto label3;

        $r6 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        $r7 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i1);

        $r8 = (com.hp.hpl.jena.rdf.model.RDFNode) $r7;

        interfaceinvoke r5.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Resource addProperty(com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>($r6, $r8);

        i1 = i1 + 1;

        goto label2;

     label3:
        goto label1;

     label4:
        return;
    }

    private static java.util.List equivalentTypes(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.rdf.model.Statement $r6;
        com.hp.hpl.jena.rdf.model.Resource r1, $r7;
        java.util.ArrayList $r0;
        com.hp.hpl.jena.rdf.model.StmtIterator $r5;
        com.hp.hpl.jena.rdf.model.Property $r3, $r4;
        com.hp.hpl.jena.rdf.model.Model $r2;
        boolean $z0;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Model getModel()>();

        $r4 = <com.hp.hpl.jena.assembler.ModelExpansion: com.hp.hpl.jena.rdf.model.Property ANY>;

        $r3 = <com.hp.hpl.jena.vocabulary.OWL: com.hp.hpl.jena.rdf.model.Property equivalentClass>;

        $r5 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.StmtIterator listStatements(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>($r4, $r3, r1);

     label1:
        $z0 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r7 = interfaceinvoke $r6.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getSubject()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label1;

     label2:
        return $r0;
    }

    private static void removeElementsWithoutType(java.util.Set, com.hp.hpl.jena.rdf.model.Resource)
    {
        java.util.Iterator $r1;
        java.util.Set r0;
        com.hp.hpl.jena.rdf.model.Resource r3, r4;
        com.hp.hpl.jena.rdf.model.Property $r5;
        java.lang.Object $r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Set;

        r4 := @parameter1: com.hp.hpl.jena.rdf.model.Resource;

        $r1 = interfaceinvoke r0.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.hp.hpl.jena.rdf.model.Resource) $r2;

        $r5 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        $z1 = interfaceinvoke r3.<com.hp.hpl.jena.rdf.model.Resource: boolean hasProperty(com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>($r5, r4);

        if $z1 != 0 goto label2;

        interfaceinvoke $r1.<java.util.Iterator: void remove()>();

     label2:
        goto label1;

     label3:
        return;
    }

    private static java.util.Set subjectSet(com.hp.hpl.jena.rdf.model.Model, com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.rdf.model.Property, com.hp.hpl.jena.rdf.model.RDFNode)
    {
        com.hp.hpl.jena.rdf.model.RDFNode r3;
        java.util.Set $r7;
        com.hp.hpl.jena.util.iterator.Map1 $r5;
        com.hp.hpl.jena.rdf.model.Resource r1;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r6;
        com.hp.hpl.jena.rdf.model.StmtIterator $r4;
        com.hp.hpl.jena.rdf.model.Property r2;
        com.hp.hpl.jena.rdf.model.Model r0;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r1 := @parameter1: com.hp.hpl.jena.rdf.model.Resource;

        r2 := @parameter2: com.hp.hpl.jena.rdf.model.Property;

        r3 := @parameter3: com.hp.hpl.jena.rdf.model.RDFNode;

        $r4 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.StmtIterator listStatements(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(r1, r2, r3);

        $r5 = <com.hp.hpl.jena.rdf.model.Statement$Util: com.hp.hpl.jena.util.iterator.Map1 getSubject>;

        $r6 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator mapWith(com.hp.hpl.jena.util.iterator.Map1)>($r5);

        $r7 = interfaceinvoke $r6.<com.hp.hpl.jena.util.iterator.ExtendedIterator: java.util.Set toSet()>();

        return $r7;
    }

    private static java.util.List asJavaList(com.hp.hpl.jena.rdf.model.Resource)
    {
        java.util.List $r3;
        com.hp.hpl.jena.rdf.model.RDFNode $r1;
        com.hp.hpl.jena.rdf.model.RDFList $r2;
        com.hp.hpl.jena.rdf.model.Resource r0;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.RDFNode as(java.lang.Class)>(class "Lcom/hp/hpl/jena/rdf/model/RDFList;");

        $r2 = (com.hp.hpl.jena.rdf.model.RDFList) $r1;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.RDFList: java.util.List asJavaList()>();

        return $r3;
    }

    static void <clinit>()
    {
        <com.hp.hpl.jena.assembler.ModelExpansion: com.hp.hpl.jena.rdf.model.Property ANY> = null;

        return;
    }
}
