class org.waveprotocol.wave.client.editor.harness.EditorHarness$EditorBundle extends java.lang.Object
{
    private final org.waveprotocol.wave.client.editor.harness.HighlightingDiffState diffState;
    private final boolean is1;
    private boolean showDiffs;
    final org.waveprotocol.wave.client.editor.harness.EditorHarness this$0;

    void <init>(org.waveprotocol.wave.client.editor.harness.EditorHarness, org.waveprotocol.wave.client.editor.Editor, boolean)
    {
        org.waveprotocol.wave.client.editor.Editor r3;
        org.waveprotocol.wave.client.editor.harness.HighlightingDiffState $r2;
        org.waveprotocol.wave.client.editor.harness.EditorHarness r1;
        org.waveprotocol.wave.client.editor.harness.EditorHarness$EditorBundle r0;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.client.editor.harness.EditorHarness$EditorBundle;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.harness.EditorHarness;

        r3 := @parameter1: org.waveprotocol.wave.client.editor.Editor;

        z0 := @parameter2: boolean;

        r0.<org.waveprotocol.wave.client.editor.harness.EditorHarness$EditorBundle: org.waveprotocol.wave.client.editor.harness.EditorHarness this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new org.waveprotocol.wave.client.editor.harness.HighlightingDiffState;

        specialinvoke $r2.<org.waveprotocol.wave.client.editor.harness.HighlightingDiffState: void <init>(org.waveprotocol.wave.client.editor.Editor)>(r3);

        r0.<org.waveprotocol.wave.client.editor.harness.EditorHarness$EditorBundle: org.waveprotocol.wave.client.editor.harness.HighlightingDiffState diffState> = $r2;

        r0.<org.waveprotocol.wave.client.editor.harness.EditorHarness$EditorBundle: boolean is1> = z0;

        return;
    }

    void setShowDiffMode(boolean)
    {
        org.waveprotocol.wave.client.editor.harness.EditorHarness$EditorBundle r0;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.client.editor.harness.EditorHarness$EditorBundle;

        z0 := @parameter0: boolean;

        r0.<org.waveprotocol.wave.client.editor.harness.EditorHarness$EditorBundle: boolean showDiffs> = z0;

        return;
    }

    void execute(org.waveprotocol.wave.model.document.operation.DocOp) throws org.waveprotocol.wave.model.operation.OperationException
    {
        org.waveprotocol.wave.client.editor.harness.HighlightingDiffState $r4;
        org.waveprotocol.wave.model.document.operation.DocOp r2;
        org.waveprotocol.wave.client.editor.harness.EditorHarness $r1, $r3;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r5;
        org.waveprotocol.wave.client.editor.harness.EditorHarness$EditorBundle r0;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.client.editor.harness.EditorHarness$EditorBundle;

        r2 := @parameter0: org.waveprotocol.wave.model.document.operation.DocOp;

        $z0 = r0.<org.waveprotocol.wave.client.editor.harness.EditorHarness$EditorBundle: boolean showDiffs>;

        if $z0 == 0 goto label1;

        $r4 = r0.<org.waveprotocol.wave.client.editor.harness.EditorHarness$EditorBundle: org.waveprotocol.wave.client.editor.harness.HighlightingDiffState diffState>;

        virtualinvoke $r4.<org.waveprotocol.wave.client.editor.harness.HighlightingDiffState: void consume(org.waveprotocol.wave.model.document.operation.DocOp)>(r2);

        goto label4;

     label1:
        $z1 = r0.<org.waveprotocol.wave.client.editor.harness.EditorHarness$EditorBundle: boolean is1>;

        if $z1 == 0 goto label2;

        $r3 = r0.<org.waveprotocol.wave.client.editor.harness.EditorHarness$EditorBundle: org.waveprotocol.wave.client.editor.harness.EditorHarness this$0>;

        $r5 = $r3.<org.waveprotocol.wave.client.editor.harness.EditorHarness: org.waveprotocol.wave.client.editor.content.ContentDocument doc1>;

        goto label3;

     label2:
        $r1 = r0.<org.waveprotocol.wave.client.editor.harness.EditorHarness$EditorBundle: org.waveprotocol.wave.client.editor.harness.EditorHarness this$0>;

        $r5 = $r1.<org.waveprotocol.wave.client.editor.harness.EditorHarness: org.waveprotocol.wave.client.editor.content.ContentDocument doc2>;

     label3:
        virtualinvoke $r5.<org.waveprotocol.wave.client.editor.content.ContentDocument: void consume(org.waveprotocol.wave.model.document.operation.DocOp)>(r2);

     label4:
        return;
    }

    void clearDiffs()
    {
        org.waveprotocol.wave.client.editor.harness.EditorHarness$EditorBundle r0;
        org.waveprotocol.wave.client.editor.harness.HighlightingDiffState $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.harness.EditorHarness$EditorBundle;

        $r1 = r0.<org.waveprotocol.wave.client.editor.harness.EditorHarness$EditorBundle: org.waveprotocol.wave.client.editor.harness.HighlightingDiffState diffState>;

        virtualinvoke $r1.<org.waveprotocol.wave.client.editor.harness.HighlightingDiffState: void clearDiffs()>();

        return;
    }
}
