public class org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl extends java.lang.Object implements org.waveprotocol.wave.concurrencycontrol.channel.ViewChannel, org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$OpenCallback
{
    private static final java.lang.String SUBMITTING;
    private final org.waveprotocol.wave.model.id.WaveId waveId;
    private final org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService waveService;
    private final org.waveprotocol.wave.common.logging.LoggerBundle logger;
    private static final java.util.Map viewChannelsPerWave;
    private static final int DEFAULT_MAX_VIEW_CHANNELS_PER_WAVE;
    private static int maxViewChannelsPerWave;
    private final java.util.Map debugLastSubmit;
    private org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State state;
    private java.lang.String channelId;
    private org.waveprotocol.wave.concurrencycontrol.channel.ViewChannel$Listener openListener;

    public static org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelFactory factory(org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService, org.waveprotocol.wave.common.logging.LoggerBundle)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService r1;
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$1 $r0;
        org.waveprotocol.wave.common.logging.LoggerBundle r2;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService;

        r2 := @parameter1: org.waveprotocol.wave.common.logging.LoggerBundle;

        $r0 = new org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$1;

        specialinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$1: void <init>(org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService,org.waveprotocol.wave.common.logging.LoggerBundle)>(r1, r2);

        return $r0;
    }

    public void <init>(org.waveprotocol.wave.model.id.WaveId, org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService, org.waveprotocol.wave.common.logging.LoggerBundle)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService r3;
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State $r5;
        org.waveprotocol.wave.model.id.WaveId r2;
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl r0;
        java.util.HashMap $r1;
        org.waveprotocol.wave.common.logging.LoggerBundle r4;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl;

        r2 := @parameter0: org.waveprotocol.wave.model.id.WaveId;

        r3 := @parameter1: org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService;

        r4 := @parameter2: org.waveprotocol.wave.common.logging.LoggerBundle;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: java.util.Map debugLastSubmit> = $r1;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.model.id.WaveId waveId> = r2;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService waveService> = r3;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.common.logging.LoggerBundle logger> = r4;

        $r5 = <org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State INITIAL>;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State state> = $r5;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: void registerChannel()>();

        return;
    }

    public void open(org.waveprotocol.wave.concurrencycontrol.channel.ViewChannel$Listener, org.waveprotocol.wave.model.id.IdFilter, java.util.Map)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannel$Listener r5;
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State $r1, $r2, $r4;
        java.lang.Object[] $r3;
        org.waveprotocol.wave.common.logging.Logger $r7;
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl r0;
        org.waveprotocol.wave.common.logging.LoggerBundle $r6;
        java.util.Map r9;
        org.waveprotocol.wave.model.id.IdFilter r8;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl;

        r5 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannel$Listener;

        r8 := @parameter1: org.waveprotocol.wave.model.id.IdFilter;

        r9 := @parameter2: java.util.Map;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State state>;

        $r1 = <org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State INITIAL>;

        if $r2 != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r0;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.String,java.lang.Object[])>($z0, "Cannot re-open view channel: %s", $r3);

        $r4 = <org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State CONNECTING>;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State state> = $r4;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannel$Listener openListener> = r5;

        $r6 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r7 = interfaceinvoke $r6.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        interfaceinvoke $r7.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>("connect: new view channel initialized");

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: void doOpen(org.waveprotocol.wave.model.id.IdFilter,java.util.Map)>(r8, r9);

        return;
    }

    private void doOpen(org.waveprotocol.wave.model.id.IdFilter, java.util.Map)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService $r3;
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl r0;
        java.util.Map r2;
        org.waveprotocol.wave.model.id.IdFilter r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.IdFilter;

        r2 := @parameter1: java.util.Map;

        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService waveService>;

        interfaceinvoke $r3.<org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService: void viewOpen(org.waveprotocol.wave.model.id.IdFilter,java.util.Map,org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$OpenCallback)>(r1, r2, r0);

        return;
    }

    public void close()
    {
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: void terminate(java.lang.String)>(null);

        return;
    }

    public void submitDelta(org.waveprotocol.wave.model.id.WaveletId, org.waveprotocol.wave.model.operation.wave.WaveletDelta, org.waveprotocol.wave.concurrencycontrol.channel.SubmitCallback)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.SubmitCallback r7;
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State $r1, $r2;
        java.lang.Object[] $r3;
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl r0;
        org.waveprotocol.wave.model.operation.wave.WaveletDelta r4;
        org.waveprotocol.wave.model.id.WaveletId r6;
        org.waveprotocol.wave.model.version.HashedVersion $r5;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl;

        r6 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        r4 := @parameter1: org.waveprotocol.wave.model.operation.wave.WaveletDelta;

        r7 := @parameter2: org.waveprotocol.wave.concurrencycontrol.channel.SubmitCallback;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State state>;

        $r1 = <org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State CONNECTED>;

        if $r2 != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = r0;

        $r5 = virtualinvoke r4.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: org.waveprotocol.wave.model.version.HashedVersion getTargetVersion()>();

        $r3[1] = $r5;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.String,java.lang.Object[])>($z0, "Cannot submit to disconnected view channel: %s, delta version %s", $r3);

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: void doSubmitDelta(org.waveprotocol.wave.model.id.WaveletId,org.waveprotocol.wave.model.operation.wave.WaveletDelta,org.waveprotocol.wave.concurrencycontrol.channel.SubmitCallback)>(r6, r4, r7);

        return;
    }

    private void doSubmitDelta(org.waveprotocol.wave.model.id.WaveletId, org.waveprotocol.wave.model.operation.wave.WaveletDelta, org.waveprotocol.wave.concurrencycontrol.channel.SubmitCallback)
    {
        org.waveprotocol.wave.model.id.WaveletName $r6;
        org.waveprotocol.wave.concurrencycontrol.channel.SubmitCallback r9;
        org.waveprotocol.wave.model.id.WaveId r4;
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl r0;
        org.waveprotocol.wave.model.operation.wave.WaveletDelta r7;
        org.waveprotocol.wave.model.id.WaveletId r1;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService $r5;
        java.util.Map $r2, $r11, $r12;
        java.lang.String r3, $r10;
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$2 $r8;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        r7 := @parameter1: org.waveprotocol.wave.model.operation.wave.WaveletDelta;

        r9 := @parameter2: org.waveprotocol.wave.concurrencycontrol.channel.SubmitCallback;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: java.util.Map debugLastSubmit>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, "Submitting");

        r3 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: java.lang.String channelId>;

        r4 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.model.id.WaveId waveId>;

        $r5 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService waveService>;

        $r6 = staticinvoke <org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletName of(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId)>(r4, r1);

        $r8 = new org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$2;

        specialinvoke $r8.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$2: void <init>(org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl,org.waveprotocol.wave.model.id.WaveletId,org.waveprotocol.wave.concurrencycontrol.channel.SubmitCallback,org.waveprotocol.wave.model.id.WaveId)>(r0, r1, r9, r4);

        $r10 = interfaceinvoke $r5.<org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService: java.lang.String viewSubmit(org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.wave.model.operation.wave.WaveletDelta,java.lang.String,org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$SubmitCallback)>($r6, r7, r3, $r8);

        $r11 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: java.util.Map debugLastSubmit>;

        $z0 = interfaceinvoke $r11.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r12 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: java.util.Map debugLastSubmit>;

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r10);

     label1:
        return;
    }

    private boolean hasChannelId()
    {
        java.lang.String $r1;
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: java.lang.String channelId>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void checkUpdateProtocolRestrictions(org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$WaveViewServiceUpdate) throws org.waveprotocol.wave.concurrencycontrol.common.ChannelException
    {
        org.waveprotocol.wave.concurrencycontrol.common.Recoverable $r2, $r4, $r10;
        java.lang.String $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17;
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl r11;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$WaveViewServiceUpdate r0;
        org.waveprotocol.wave.concurrencycontrol.common.ChannelException $r1, $r3, $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r12;

        r11 := @this: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$WaveViewServiceUpdate;

        $z0 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$WaveViewServiceUpdate: boolean hasChannelId()>();

        if $z0 == 0 goto label07;

        $z7 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$WaveViewServiceUpdate: boolean hasMarker()>();

        if $z7 != 0 goto label01;

        $z12 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$WaveViewServiceUpdate: boolean hasWaveletSnapshot()>();

        if $z12 != 0 goto label01;

        $z13 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$WaveViewServiceUpdate: boolean hasDeltas()>();

        if $z13 != 0 goto label01;

        $z14 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$WaveViewServiceUpdate: boolean hasLastCommittedVersion()>();

        if $z14 != 0 goto label01;

        $z15 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$WaveViewServiceUpdate: boolean hasCurrentVersion()>();

        if $z15 == 0 goto label07;

     label01:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $z16 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$WaveViewServiceUpdate: boolean hasMarker()>();

        if $z16 == 0 goto label02;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("marker, ");

     label02:
        $z8 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$WaveViewServiceUpdate: boolean hasWaveletSnapshot()>();

        if $z8 == 0 goto label03;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("snapshot, ");

     label03:
        $z9 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$WaveViewServiceUpdate: boolean hasDeltas()>();

        if $z9 == 0 goto label04;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("deltas, ");

     label04:
        $z10 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$WaveViewServiceUpdate: boolean hasLastCommittedVersion()>();

        if $z10 == 0 goto label05;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("lastCommittedVersion, ");

     label05:
        $z11 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$WaveViewServiceUpdate: boolean hasCurrentVersion()>();

        if $z11 == 0 goto label06;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("currentVersion");

     label06:
        $r5 = new org.waveprotocol.wave.concurrencycontrol.common.ChannelException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("An update contained a channel id AND other data: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = <org.waveprotocol.wave.concurrencycontrol.common.Recoverable: org.waveprotocol.wave.concurrencycontrol.common.Recoverable NOT_RECOVERABLE>;

        specialinvoke $r5.<org.waveprotocol.wave.concurrencycontrol.common.ChannelException: void <init>(java.lang.String,org.waveprotocol.wave.concurrencycontrol.common.Recoverable)>($r9, $r10);

        throw $r5;

     label07:
        $z1 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$WaveViewServiceUpdate: boolean hasWaveletSnapshot()>();

        if $z1 != 0 goto label08;

        $z4 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$WaveViewServiceUpdate: boolean hasDeltas()>();

        if $z4 != 0 goto label08;

        $z5 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$WaveViewServiceUpdate: boolean hasLastCommittedVersion()>();

        if $z5 != 0 goto label08;

        $z6 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$WaveViewServiceUpdate: boolean hasCurrentVersion()>();

        if $z6 == 0 goto label09;

     label08:
        $z17 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$WaveViewServiceUpdate: boolean hasWaveletId()>();

        if $z17 != 0 goto label09;

        $r3 = new org.waveprotocol.wave.concurrencycontrol.common.ChannelException;

        $r4 = <org.waveprotocol.wave.concurrencycontrol.common.Recoverable: org.waveprotocol.wave.concurrencycontrol.common.Recoverable NOT_RECOVERABLE>;

        specialinvoke $r3.<org.waveprotocol.wave.concurrencycontrol.common.ChannelException: void <init>(java.lang.String,org.waveprotocol.wave.concurrencycontrol.common.Recoverable)>("An update lacked a required wavelet id.", $r4);

        throw $r3;

     label09:
        $z2 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$WaveViewServiceUpdate: boolean hasWaveletSnapshot()>();

        if $z2 == 0 goto label10;

        $z3 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$WaveViewServiceUpdate: boolean hasDeltas()>();

        if $z3 == 0 goto label10;

        $r1 = new org.waveprotocol.wave.concurrencycontrol.common.ChannelException;

        $r2 = <org.waveprotocol.wave.concurrencycontrol.common.Recoverable: org.waveprotocol.wave.concurrencycontrol.common.Recoverable NOT_RECOVERABLE>;

        specialinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.common.ChannelException: void <init>(java.lang.String,org.waveprotocol.wave.concurrencycontrol.common.Recoverable)>("Message has both snapshot and deltas", $r2);

        throw $r1;

     label10:
        return;
    }

    public void onUpdate(org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$WaveViewServiceUpdate)
    {
        org.waveprotocol.wave.model.id.WaveId $r6, $r31;
        org.waveprotocol.wave.concurrencycontrol.common.ChannelException $r3, $r28, $r43, $r49;
        java.lang.StringBuilder $r4, $r5, $r7, $r8, $r9, $r20, $r21, $r22, $r29, $r30, $r32, $r33, $r34, $r38, $r39, $r41, $r44, $r45, $r47, $r50, $r51, $r53;
        org.waveprotocol.wave.concurrencycontrol.common.Recoverable $r11, $r36;
        java.lang.Object[] $r37;
        org.waveprotocol.wave.common.logging.Logger $r19;
        org.waveprotocol.wave.model.id.WaveletId $r55, $r58, r59;
        org.waveprotocol.wave.model.version.HashedVersion r13, r14, $r60, $r61;
        java.lang.String $r2, $r10, $r23, $r24, $r35, $r42, $r46, $r48, $r52, $r54;
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannel$Listener $r12, $r15, $r16, $r26, $r27, $r62;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData $r17;
        int[] $r56;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl r0;
        org.waveprotocol.wave.common.logging.LoggerBundle $r18;
        java.util.List $r63;
        int $i0, $i1;
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State $r25, $r40, $r57, $r64;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$WaveViewServiceUpdate r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$WaveViewServiceUpdate;

     label01:
        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: void checkUpdateProtocolRestrictions(org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$WaveViewServiceUpdate)>(r1);

     label02:
        goto label06;

     label03:
        $r49 := @caughtexception;

        $z11 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$WaveViewServiceUpdate: boolean hasWaveletId()>();

        if $z11 == 0 goto label04;

        $r55 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$WaveViewServiceUpdate: org.waveprotocol.wave.model.id.WaveletId getWaveletId()>();

        goto label05;

     label04:
        $r55 = null;

     label05:
        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: void triggerOnException(org.waveprotocol.wave.concurrencycontrol.common.ChannelException,org.waveprotocol.wave.model.id.WaveletId)>($r49, $r55);

        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>()>();

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("View update raised exception: ");

        $r52 = virtualinvoke $r49.<org.waveprotocol.wave.concurrencycontrol.common.ChannelException: java.lang.String toString()>();

        $r53 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r52);

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: void terminate(java.lang.String)>($r54);

     label06:
        $r56 = <org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$4: int[] $SwitchMap$org$waveprotocol$wave$concurrencycontrol$channel$ViewChannelImpl$State>;

        $r57 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State state>;

        $i0 = virtualinvoke $r57.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State: int ordinal()>();

        $i1 = $r56[$i0];

        tableswitch($i1)
        {
            case 1: goto label07;
            case 2: goto label08;
            case 3: goto label10;
            case 4: goto label25;
            case 5: goto label28;
            default: goto label29;
        };

     label07:
        $r37 = newarray (java.lang.Object)[2];

        $r37[0] = r0;

        $r37[1] = r1;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void illegalState(java.lang.String,java.lang.Object[])>("Unexpected update before view channel opened: %s, update: %s", $r37);

        goto label30;

     label08:
        $z10 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$WaveViewServiceUpdate: boolean hasChannelId()>();

        if $z10 != 0 goto label09;

        $r28 = new org.waveprotocol.wave.concurrencycontrol.common.ChannelException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("First update did not contain channel id. Wave id: ");

        $r31 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.model.id.WaveId waveId>;

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", update: ");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        $r36 = <org.waveprotocol.wave.concurrencycontrol.common.Recoverable: org.waveprotocol.wave.concurrencycontrol.common.Recoverable NOT_RECOVERABLE>;

        specialinvoke $r28.<org.waveprotocol.wave.concurrencycontrol.common.ChannelException: void <init>(java.lang.String,org.waveprotocol.wave.concurrencycontrol.common.Recoverable)>($r35, $r36);

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: void onException(org.waveprotocol.wave.concurrencycontrol.common.ChannelException)>($r28);

        return;

     label09:
        $r24 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$WaveViewServiceUpdate: java.lang.String getChannelId()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: java.lang.String channelId> = $r24;

        $r25 = <org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State CONNECTED>;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State state> = $r25;

        $r26 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannel$Listener openListener>;

        if $r26 == null goto label30;

        $r27 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannel$Listener openListener>;

        interfaceinvoke $r27.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannel$Listener: void onConnected()>();

        goto label30;

     label10:
        $z2 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$WaveViewServiceUpdate: boolean hasChannelId()>();

        if $z2 == 0 goto label11;

        $r18 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r19 = interfaceinvoke $r18.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("A non-first update contained a channel id: ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r19.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>($r23);

     label11:
        $r12 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannel$Listener openListener>;

        if $r12 == null goto label30;

        $z3 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$WaveViewServiceUpdate: boolean hasWaveletId()>();

        if $z3 == 0 goto label12;

        $r58 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$WaveViewServiceUpdate: org.waveprotocol.wave.model.id.WaveletId getWaveletId()>();

        goto label13;

     label12:
        $r58 = null;

     label13:
        r59 = $r58;

        $z4 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$WaveViewServiceUpdate: boolean hasLastCommittedVersion()>();

        if $z4 == 0 goto label14;

        $r60 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$WaveViewServiceUpdate: org.waveprotocol.wave.model.version.HashedVersion getLastCommittedVersion()>();

        goto label15;

     label14:
        $r60 = null;

     label15:
        r13 = $r60;

        $z5 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$WaveViewServiceUpdate: boolean hasCurrentVersion()>();

        if $z5 == 0 goto label16;

        $r61 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$WaveViewServiceUpdate: org.waveprotocol.wave.model.version.HashedVersion getCurrentVersion()>();

        goto label17;

     label16:
        $r61 = null;

     label17:
        r14 = $r61;

     label18:
        $z6 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$WaveViewServiceUpdate: boolean hasWaveletSnapshot()>();

        if $z6 == 0 goto label19;

        $r16 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannel$Listener openListener>;

        $r17 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$WaveViewServiceUpdate: org.waveprotocol.wave.model.wave.data.ObservableWaveletData getWaveletSnapshot()>();

        interfaceinvoke $r16.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannel$Listener: void onSnapshot(org.waveprotocol.wave.model.id.WaveletId,org.waveprotocol.wave.model.wave.data.ObservableWaveletData,org.waveprotocol.wave.model.version.HashedVersion,org.waveprotocol.wave.model.version.HashedVersion)>(r59, $r17, r13, $r61);

        goto label21;

     label19:
        $z7 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$WaveViewServiceUpdate: boolean hasDeltas()>();

        if $z7 != 0 goto label20;

        $z8 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$WaveViewServiceUpdate: boolean hasLastCommittedVersion()>();

        if $z8 != 0 goto label20;

        $z9 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$WaveViewServiceUpdate: boolean hasCurrentVersion()>();

        if $z9 == 0 goto label21;

     label20:
        $r62 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannel$Listener openListener>;

        $r63 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$WaveViewServiceUpdate: java.util.List getDeltaList()>();

        interfaceinvoke $r62.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannel$Listener: void onUpdate(org.waveprotocol.wave.model.id.WaveletId,java.util.List,org.waveprotocol.wave.model.version.HashedVersion,org.waveprotocol.wave.model.version.HashedVersion)>(r59, $r63, r13, r14);

     label21:
        $z12 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$WaveViewServiceUpdate: boolean hasMarker()>();

        if $z12 == 0 goto label22;

        $r15 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannel$Listener openListener>;

        interfaceinvoke $r15.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannel$Listener: void onOpenFinished()>();

     label22:
        goto label24;

     label23:
        $r43 := @caughtexception;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: void triggerOnException(org.waveprotocol.wave.concurrencycontrol.common.ChannelException,org.waveprotocol.wave.model.id.WaveletId)>($r43, r59);

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("View update raised exception: ");

        $r46 = virtualinvoke $r43.<org.waveprotocol.wave.concurrencycontrol.common.ChannelException: java.lang.String toString()>();

        $r47 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: void terminate(java.lang.String)>($r48);

     label24:
        goto label30;

     label25:
        $z0 = specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: boolean hasChannelId()>();

        if $z0 != 0 goto label27;

        $z1 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$WaveViewServiceUpdate: boolean hasChannelId()>();

        if $z1 != 0 goto label26;

        $r3 = new org.waveprotocol.wave.concurrencycontrol.common.ChannelException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("First update did not contain channel id. Wave id: ");

        $r6 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.model.id.WaveId waveId>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", update: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = <org.waveprotocol.wave.concurrencycontrol.common.Recoverable: org.waveprotocol.wave.concurrencycontrol.common.Recoverable NOT_RECOVERABLE>;

        specialinvoke $r3.<org.waveprotocol.wave.concurrencycontrol.common.ChannelException: void <init>(java.lang.String,org.waveprotocol.wave.concurrencycontrol.common.Recoverable)>($r10, $r11);

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: void onException(org.waveprotocol.wave.concurrencycontrol.common.ChannelException)>($r3);

     label26:
        $r2 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$WaveViewServiceUpdate: java.lang.String getChannelId()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: java.lang.String channelId> = $r2;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: void requestViewClose()>();

     label27:
        $r64 = <org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State CLOSED>;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State state> = $r64;

        goto label30;

     label28:
        goto label30;

     label29:
        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("update in unknown state");

        $r40 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State state>;

        $r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r40);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void illegalState(java.lang.Object)>($r42);

     label30:
        return;

        catch org.waveprotocol.wave.concurrencycontrol.common.ChannelException from label01 to label02 with label03;
        catch org.waveprotocol.wave.concurrencycontrol.common.ChannelException from label18 to label22 with label23;
    }

    public void onSuccess(java.lang.String)
    {
        org.waveprotocol.wave.concurrencycontrol.common.Recoverable $r18;
        java.lang.Object[] $r19;
        int[] $r4;
        int $i0, $i1;
        java.lang.String r0, r1, $r12, $r17, $r24, $r25;
        boolean z0, $z2, $z3;
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State $r3, $r5, $r8, $r22;
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl r2;
        org.waveprotocol.wave.concurrencycontrol.common.ChannelException $r13;
        java.lang.StringBuilder $r6, $r7, $r9, $r10, $r11, $r14, $r15, $r16, $r20, $r21, $r23;

        r2 := @this: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label01;

        $z3 = 1;

        $z2 = 1;

        goto label02;

     label01:
        $z3 = 0;

        $z2 = 0;

     label02:
        z0 = $z2;

        if $z3 == 0 goto label03;

        $r25 = r0;

        goto label04;

     label03:
        $r25 = "<no remote error specified>";

     label04:
        r1 = $r25;

        $r4 = <org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$4: int[] $SwitchMap$org$waveprotocol$wave$concurrencycontrol$channel$ViewChannelImpl$State>;

        $r3 = r2.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State state>;

        $i0 = virtualinvoke $r3.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State: int ordinal()>();

        $i1 = $r4[$i0];

        tableswitch($i1)
        {
            case 1: goto label05;
            case 2: goto label06;
            case 3: goto label06;
            case 4: goto label08;
            case 5: goto label09;
            default: goto label10;
        };

     label05:
        $r19 = newarray (java.lang.Object)[2];

        $r19[0] = r2;

        $r19[1] = r0;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void illegalState(java.lang.String,java.lang.Object[])>("View channel received success before open: %s, response: %s", $r19);

        goto label11;

     label06:
        if z0 == 0 goto label07;

        $r13 = new org.waveprotocol.wave.concurrencycontrol.common.ChannelException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Server unexpectedly closed channel with error: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = <org.waveprotocol.wave.concurrencycontrol.common.Recoverable: org.waveprotocol.wave.concurrencycontrol.common.Recoverable NOT_RECOVERABLE>;

        specialinvoke $r13.<org.waveprotocol.wave.concurrencycontrol.common.ChannelException: void <init>(java.lang.String,org.waveprotocol.wave.concurrencycontrol.common.Recoverable)>($r17, $r18);

        specialinvoke r2.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: void triggerOnException(org.waveprotocol.wave.concurrencycontrol.common.ChannelException,org.waveprotocol.wave.model.id.WaveletId)>($r13, null);

     label07:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Received onSuccess in state ");

        $r8 = r2.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State state>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with message: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r2.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: void terminate(java.lang.String)>($r12);

        goto label11;

     label08:
        $r5 = <org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State CLOSED>;

        r2.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State state> = $r5;

        goto label11;

     label09:
        goto label11;

     label10:
        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("success in unknown state");

        $r22 = r2.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State state>;

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void illegalState(java.lang.Object)>($r24);

     label11:
        return;
    }

    public void onFailure(java.lang.String)
    {
        java.lang.Object[] $r9;
        int[] $r2;
        int $i0, $i1;
        java.lang.String r6, $r8, $r14;
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State $r1, $r3, $r12;
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl r0;
        java.lang.StringBuilder $r4, $r5, $r7, $r10, $r11, $r13;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl;

        r6 := @parameter0: java.lang.String;

        $r2 = <org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$4: int[] $SwitchMap$org$waveprotocol$wave$concurrencycontrol$channel$ViewChannelImpl$State>;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State state>;

        $i0 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State: int ordinal()>();

        $i1 = $r2[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label2;
            case 4: goto label3;
            case 5: goto label4;
            default: goto label5;
        };

     label1:
        $r9 = newarray (java.lang.Object)[2];

        $r9[0] = r0;

        $r9[1] = r6;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void illegalState(java.lang.String,java.lang.Object[])>("View channel received failure before open: %s, response: %s", $r9);

        goto label6;

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Received failure: ");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: void terminate(java.lang.String)>($r8);

        goto label6;

     label3:
        $r3 = <org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State CLOSED>;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State state> = $r3;

        goto label6;

     label4:
        goto label6;

     label5:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failure in unknown state");

        $r12 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State state>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void illegalState(java.lang.Object)>($r14);

     label6:
        return;
    }

    public void onException(org.waveprotocol.wave.concurrencycontrol.common.ChannelException)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl r0;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        org.waveprotocol.wave.concurrencycontrol.common.ChannelException r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.common.ChannelException;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: void triggerOnException(org.waveprotocol.wave.concurrencycontrol.common.ChannelException,org.waveprotocol.wave.model.id.WaveletId)>(r1, null);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WaveService raised exception (probably in translation): ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: void terminate(java.lang.String)>($r5);

        return;
    }

    public java.lang.String toString()
    {
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State $r9;
        org.waveprotocol.wave.model.id.WaveId $r6;
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl r2;
        java.lang.StringBuilder $r0, $r1, $r4, $r5, $r7, $r8, $r10, $r11;
        java.lang.String $r3, $r12;

        r2 := @this: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ViewChannel id: ");

        $r3 = r2.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: java.lang.String channelId>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n waveId: ");

        $r6 = r2.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.model.id.WaveId waveId>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n state: ");

        $r9 = r2.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State state>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;
    }

    private void triggerOnException(org.waveprotocol.wave.concurrencycontrol.common.ChannelException, org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannel$Listener $r1, $r4;
        org.waveprotocol.wave.concurrencycontrol.common.Recoverable $r10;
        org.waveprotocol.wave.model.id.WaveId $r12;
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl r0;
        org.waveprotocol.wave.concurrencycontrol.common.ResponseCode $r5;
        org.waveprotocol.wave.model.id.WaveletId r11;
        org.waveprotocol.wave.concurrencycontrol.common.ChannelException $r2, r3;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl;

        r3 := @parameter0: org.waveprotocol.wave.concurrencycontrol.common.ChannelException;

        r11 := @parameter1: org.waveprotocol.wave.model.id.WaveletId;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannel$Listener openListener>;

        if $r1 == null goto label1;

        $r4 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannel$Listener openListener>;

        $r2 = new org.waveprotocol.wave.concurrencycontrol.common.ChannelException;

        $r5 = virtualinvoke r3.<org.waveprotocol.wave.concurrencycontrol.common.ChannelException: org.waveprotocol.wave.concurrencycontrol.common.ResponseCode getResponseCode()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in view channel, state ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = virtualinvoke r3.<org.waveprotocol.wave.concurrencycontrol.common.ChannelException: org.waveprotocol.wave.concurrencycontrol.common.Recoverable getRecoverable()>();

        $r12 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.model.id.WaveId waveId>;

        specialinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.common.ChannelException: void <init>(org.waveprotocol.wave.concurrencycontrol.common.ResponseCode,java.lang.String,java.lang.Throwable,org.waveprotocol.wave.concurrencycontrol.common.Recoverable,org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId)>($r5, $r9, r3, $r10, $r12, r11);

        interfaceinvoke $r4.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannel$Listener: void onException(org.waveprotocol.wave.concurrencycontrol.common.ChannelException)>($r2);

     label1:
        return;
    }

    private void terminate(java.lang.String)
    {
        org.waveprotocol.wave.common.logging.Logger $r7, $r18;
        int[] $r2;
        int $i0, $i1;
        java.lang.String $r9, r12, $r14;
        boolean $z0, $z1;
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannel$Listener $r4, $r5;
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State $r1, $r3, $r15, $r16;
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl r0;
        org.waveprotocol.wave.common.logging.LoggerBundle $r6, $r17;
        java.lang.StringBuilder $r8, $r10, $r11, $r13;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl;

        r12 := @parameter0: java.lang.String;

        $r2 = <org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$4: int[] $SwitchMap$org$waveprotocol$wave$concurrencycontrol$channel$ViewChannelImpl$State>;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State state>;

        $i0 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State: int ordinal()>();

        $i1 = $r2[$i0];

        lookupswitch($i1)
        {
            case 1: goto label2;
            case 5: goto label1;
            default: goto label3;
        };

     label1:
        return;

     label2:
        $r3 = <org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State CLOSED>;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State state> = $r3;

        goto label5;

     label3:
        $z0 = specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: boolean hasChannelId()>();

        if $z0 == 0 goto label4;

        $r16 = <org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State CLOSED>;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State state> = $r16;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: void requestViewClose()>();

        goto label5;

     label4:
        $r15 = <org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State CLOSING>;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$State state> = $r15;

     label5:
        $r17 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r18 = interfaceinvoke $r17.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        $z1 = interfaceinvoke $r18.<org.waveprotocol.wave.common.logging.Logger: boolean shouldLog()>();

        if $z1 == 0 goto label6;

        $r6 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r7 = interfaceinvoke $r6.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: java.lang.String toString()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" terminated: ");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>($r14);

     label6:
        $r4 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannel$Listener openListener>;

        if $r4 == null goto label7;

        $r5 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannel$Listener openListener>;

        interfaceinvoke $r5.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannel$Listener: void onClosed()>();

     label7:
        r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannel$Listener openListener> = null;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: void unregisterChannel()>();

        return;
    }

    private void requestViewClose()
    {
        org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService $r2;
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$3 $r1;
        org.waveprotocol.wave.model.id.WaveId $r3;
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl r0;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: boolean hasChannelId()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "ViewClose requested without a channel id");

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService waveService>;

        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.model.id.WaveId waveId>;

        $r4 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: java.lang.String channelId>;

        $r1 = new org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$3;

        specialinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl$3: void <init>(org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl)>(r0);

        interfaceinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService: void viewClose(org.waveprotocol.wave.model.id.WaveId,java.lang.String,org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$CloseCallback)>($r3, $r4, $r1);

        return;
    }

    private void registerChannel()
    {
        java.lang.Throwable $r19;
        java.lang.Integer r5, $r8, $r18;
        java.util.Map $r0, $r3, $r6, $r16;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r15;
        org.waveprotocol.wave.model.id.WaveId $r2, $r7, $r13, $r17;
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl r1;
        java.lang.Object $r4;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r14;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl;

        $r0 = <org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: java.util.Map viewChannelsPerWave>;

        entermonitor $r0;

     label1:
        $r3 = <org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: java.util.Map viewChannelsPerWave>;

        $r2 = r1.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.model.id.WaveId waveId>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r5 = (java.lang.Integer) $r4;

        if r5 != null goto label2;

        $r16 = <org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: java.util.Map viewChannelsPerWave>;

        $r17 = r1.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.model.id.WaveId waveId>;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, $r18);

        goto label4;

     label2:
        $i0 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

        $i1 = <org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: int maxViewChannelsPerWave>;

        if $i0 < $i1 goto label3;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot create more than ");

        $i4 = <org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: int maxViewChannelsPerWave>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" channels per wave. Wave id: ");

        $r13 = r1.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.model.id.WaveId waveId>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void illegalState(java.lang.Object)>($r15);

        goto label4;

     label3:
        $r6 = <org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: java.util.Map viewChannelsPerWave>;

        $r7 = r1.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.model.id.WaveId waveId>;

        $i2 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

        $i3 = $i2 + 1;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r8);

     label4:
        exitmonitor $r0;

     label5:
        goto label8;

     label6:
        $r19 := @caughtexception;

        exitmonitor $r0;

     label7:
        throw $r19;

     label8:
        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private void unregisterChannel()
    {
        java.lang.Throwable $r11;
        org.waveprotocol.wave.model.id.WaveId $r2, $r7, $r9;
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl r1;
        java.lang.Integer r5, $r8;
        java.util.Map $r0, $r3, $r6, $r10;
        int $i0, $i1, $i2;
        java.lang.Object $r4;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl;

        $r0 = <org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: java.util.Map viewChannelsPerWave>;

        entermonitor $r0;

     label1:
        $r3 = <org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: java.util.Map viewChannelsPerWave>;

        $r2 = r1.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.model.id.WaveId waveId>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r5 = (java.lang.Integer) $r4;

        if r5 == null goto label3;

        $i0 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

        if $i0 > 1 goto label2;

        $r10 = <org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: java.util.Map viewChannelsPerWave>;

        $r9 = r1.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.model.id.WaveId waveId>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r9);

        goto label3;

     label2:
        $r6 = <org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: java.util.Map viewChannelsPerWave>;

        $r7 = r1.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.model.id.WaveId waveId>;

        $i1 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

        $i2 = $i1 - 1;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r8);

     label3:
        exitmonitor $r0;

     label4:
        goto label7;

     label5:
        $r11 := @caughtexception;

        exitmonitor $r0;

     label6:
        throw $r11;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public static void setMaxViewChannelsPerWave(int)
    {
        int i0;

        i0 := @parameter0: int;

        <org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: int maxViewChannelsPerWave> = i0;

        return;
    }

    public java.lang.String debugGetProfilingInfo(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl r0;
        org.waveprotocol.wave.model.id.WaveletId r1;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService $r4;
        java.util.Map $r2, $r3;
        java.lang.Object $r5;
        java.lang.StringBuilder $r8, $r9, $r10;
        java.lang.String $r6, $r7, $r11;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: java.util.Map debugLastSubmit>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ViewChannelImpl: No submits to the server for ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;

     label1:
        $r4 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService waveService>;

        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: java.util.Map debugLastSubmit>;

        $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r6 = (java.lang.String) $r5;

        $r7 = interfaceinvoke $r4.<org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService: java.lang.String debugGetProfilingInfo(java.lang.String)>($r6);

        return $r7;
    }

    static java.util.Map access$000(org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl r0;
        java.util.Map $r1;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: java.util.Map debugLastSubmit>;

        return $r1;
    }

    static void access$100(org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl, org.waveprotocol.wave.concurrencycontrol.common.ChannelException, org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.id.WaveletId r2;
        org.waveprotocol.wave.concurrencycontrol.common.ChannelException r1;
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl;

        r1 := @parameter1: org.waveprotocol.wave.concurrencycontrol.common.ChannelException;

        r2 := @parameter2: org.waveprotocol.wave.model.id.WaveletId;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: void triggerOnException(org.waveprotocol.wave.concurrencycontrol.common.ChannelException,org.waveprotocol.wave.model.id.WaveletId)>(r1, r2);

        return;
    }

    static void access$200(org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl, java.lang.String)
    {
        java.lang.String r1;
        org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: void terminate(java.lang.String)>(r1);

        return;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0;

        <org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: int DEFAULT_MAX_VIEW_CHANNELS_PER_WAVE> = 4;

        <org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: java.lang.String SUBMITTING> = "Submitting";

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: java.util.Map viewChannelsPerWave> = $r0;

        <org.waveprotocol.wave.concurrencycontrol.channel.ViewChannelImpl: int maxViewChannelsPerWave> = 4;

        return;
    }
}
