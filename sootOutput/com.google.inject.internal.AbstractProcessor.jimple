abstract class com.google.inject.internal.AbstractProcessor extends com.google.inject.spi.DefaultElementVisitor
{
    protected com.google.inject.internal.Errors errors;
    protected com.google.inject.internal.InjectorImpl injector;

    protected void <init>(com.google.inject.internal.Errors)
    {
        com.google.inject.internal.AbstractProcessor r0;
        com.google.inject.internal.Errors r1;

        r0 := @this: com.google.inject.internal.AbstractProcessor;

        r1 := @parameter0: com.google.inject.internal.Errors;

        specialinvoke r0.<com.google.inject.spi.DefaultElementVisitor: void <init>()>();

        r0.<com.google.inject.internal.AbstractProcessor: com.google.inject.internal.Errors errors> = r1;

        return;
    }

    public void process(java.lang.Iterable)
    {
        java.util.Iterator $r1;
        com.google.inject.internal.AbstractProcessor r4;
        java.lang.Iterable r0;
        java.util.List $r6;
        com.google.inject.internal.InjectorImpl $r5;
        java.lang.Object $r2;
        com.google.inject.internal.InjectorShell r3;
        boolean $z0;

        r4 := @this: com.google.inject.internal.AbstractProcessor;

        r0 := @parameter0: java.lang.Iterable;

        $r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.google.inject.internal.InjectorShell) $r2;

        $r5 = virtualinvoke r3.<com.google.inject.internal.InjectorShell: com.google.inject.internal.InjectorImpl getInjector()>();

        $r6 = virtualinvoke r3.<com.google.inject.internal.InjectorShell: java.util.List getElements()>();

        virtualinvoke r4.<com.google.inject.internal.AbstractProcessor: void process(com.google.inject.internal.InjectorImpl,java.util.List)>($r5, $r6);

        goto label1;

     label2:
        return;
    }

    public void process(com.google.inject.internal.InjectorImpl, java.util.List)
    {
        java.lang.Throwable $r11;
        java.util.Iterator $r4;
        com.google.inject.internal.AbstractProcessor r0;
        com.google.inject.internal.Errors r1, $r8;
        java.util.List r3;
        com.google.inject.internal.InjectorImpl r2;
        com.google.inject.spi.Element r6;
        java.lang.Boolean r10;
        java.lang.Object $r5, $r7, $r9;
        boolean $z0, $z1;

        r0 := @this: com.google.inject.internal.AbstractProcessor;

        r2 := @parameter0: com.google.inject.internal.InjectorImpl;

        r3 := @parameter1: java.util.List;

        r1 = r0.<com.google.inject.internal.AbstractProcessor: com.google.inject.internal.Errors errors>;

        r0.<com.google.inject.internal.AbstractProcessor: com.google.inject.internal.InjectorImpl injector> = r2;

     label1:
        $r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.google.inject.spi.Element) $r5;

        $r7 = interfaceinvoke r6.<com.google.inject.spi.Element: java.lang.Object getSource()>();

        $r8 = virtualinvoke r1.<com.google.inject.internal.Errors: com.google.inject.internal.Errors withSource(java.lang.Object)>($r7);

        r0.<com.google.inject.internal.AbstractProcessor: com.google.inject.internal.Errors errors> = $r8;

        $r9 = interfaceinvoke r6.<com.google.inject.spi.Element: java.lang.Object acceptVisitor(com.google.inject.spi.ElementVisitor)>(r0);

        r10 = (java.lang.Boolean) $r9;

        $z1 = virtualinvoke r10.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label3;

        interfaceinvoke $r4.<java.util.Iterator: void remove()>();

     label3:
        goto label2;

     label4:
        r0.<com.google.inject.internal.AbstractProcessor: com.google.inject.internal.Errors errors> = r1;

        r0.<com.google.inject.internal.AbstractProcessor: com.google.inject.internal.InjectorImpl injector> = null;

        goto label7;

     label5:
        $r11 := @caughtexception;

     label6:
        r0.<com.google.inject.internal.AbstractProcessor: com.google.inject.internal.Errors errors> = r1;

        r0.<com.google.inject.internal.AbstractProcessor: com.google.inject.internal.InjectorImpl injector> = null;

        throw $r11;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    protected java.lang.Boolean visitOther(com.google.inject.spi.Element)
    {
        com.google.inject.internal.AbstractProcessor r1;
        com.google.inject.spi.Element r2;
        java.lang.Boolean $r0;

        r1 := @this: com.google.inject.internal.AbstractProcessor;

        r2 := @parameter0: com.google.inject.spi.Element;

        $r0 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        return $r0;
    }

    protected volatile java.lang.Object visitOther(com.google.inject.spi.Element)
    {
        com.google.inject.internal.AbstractProcessor r0;
        com.google.inject.spi.Element r1;
        java.lang.Boolean $r2;

        r0 := @this: com.google.inject.internal.AbstractProcessor;

        r1 := @parameter0: com.google.inject.spi.Element;

        $r2 = virtualinvoke r0.<com.google.inject.internal.AbstractProcessor: java.lang.Boolean visitOther(com.google.inject.spi.Element)>(r1);

        return $r2;
    }
}
