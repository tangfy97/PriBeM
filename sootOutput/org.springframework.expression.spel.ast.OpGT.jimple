public class org.springframework.expression.spel.ast.OpGT extends org.springframework.expression.spel.ast.Operator
{

    public transient void <init>(int, org.springframework.expression.spel.ast.SpelNodeImpl[])
    {
        int i0;
        org.springframework.expression.spel.ast.OpGT r0;
        org.springframework.expression.spel.ast.SpelNodeImpl[] r1;

        r0 := @this: org.springframework.expression.spel.ast.OpGT;

        i0 := @parameter0: int;

        r1 := @parameter1: org.springframework.expression.spel.ast.SpelNodeImpl[];

        specialinvoke r0.<org.springframework.expression.spel.ast.Operator: void <init>(java.lang.String,int,org.springframework.expression.spel.ast.SpelNodeImpl[])>(">", i0, r1);

        return;
    }

    public org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.spel.support.BooleanTypedValue $r9, $r12, $r13, $r14;
        byte $b1, $b4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        org.springframework.expression.spel.ast.OpGT r0;
        org.springframework.expression.spel.ExpressionState r2;
        org.springframework.expression.spel.ast.SpelNodeImpl $r1, $r5;
        long $l2, $l3;
        int $i0, $i5, $i6, $i7, $i8;
        org.springframework.expression.TypedValue $r3, $r6;
        java.lang.Number r10, r11;
        double $d0, $d1;
        org.springframework.expression.TypeComparator $r8;
        java.lang.Object $r4, $r7;

        r0 := @this: org.springframework.expression.spel.ast.OpGT;

        r2 := @parameter0: org.springframework.expression.spel.ExpressionState;

        $r1 = virtualinvoke r0.<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.ast.SpelNodeImpl getLeftOperand()>();

        $r3 = virtualinvoke $r1.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>(r2);

        $r4 = virtualinvoke $r3.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        $r5 = virtualinvoke r0.<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.ast.SpelNodeImpl getRightOperand()>();

        $r6 = virtualinvoke $r5.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>(r2);

        $r7 = virtualinvoke $r6.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        $z0 = $r4 instanceof java.lang.Number;

        if $z0 == 0 goto label11;

        $z1 = $r7 instanceof java.lang.Number;

        if $z1 == 0 goto label11;

        r10 = (java.lang.Number) $r4;

        r11 = (java.lang.Number) $r7;

        $z2 = r10 instanceof java.lang.Double;

        if $z2 != 0 goto label01;

        $z3 = r11 instanceof java.lang.Double;

        if $z3 == 0 goto label04;

     label01:
        $d0 = virtualinvoke r10.<java.lang.Number: double doubleValue()>();

        $d1 = virtualinvoke r11.<java.lang.Number: double doubleValue()>();

        $b1 = $d0 cmpl $d1;

        $i7 = (int) $b1;

        if $i7 <= 0 goto label02;

        $z6 = 1;

        goto label03;

     label02:
        $z6 = 0;

     label03:
        $r12 = staticinvoke <org.springframework.expression.spel.support.BooleanTypedValue: org.springframework.expression.spel.support.BooleanTypedValue forValue(boolean)>($z6);

        return $r12;

     label04:
        $z4 = r10 instanceof java.lang.Long;

        if $z4 != 0 goto label05;

        $z5 = r11 instanceof java.lang.Long;

        if $z5 == 0 goto label08;

     label05:
        $l2 = virtualinvoke r10.<java.lang.Number: long longValue()>();

        $l3 = virtualinvoke r11.<java.lang.Number: long longValue()>();

        $b4 = $l2 cmp $l3;

        $i8 = (int) $b4;

        if $i8 <= 0 goto label06;

        $z7 = 1;

        goto label07;

     label06:
        $z7 = 0;

     label07:
        $r13 = staticinvoke <org.springframework.expression.spel.support.BooleanTypedValue: org.springframework.expression.spel.support.BooleanTypedValue forValue(boolean)>($z7);

        return $r13;

     label08:
        $i5 = virtualinvoke r10.<java.lang.Number: int intValue()>();

        $i6 = virtualinvoke r11.<java.lang.Number: int intValue()>();

        if $i5 <= $i6 goto label09;

        $z8 = 1;

        goto label10;

     label09:
        $z8 = 0;

     label10:
        $r14 = staticinvoke <org.springframework.expression.spel.support.BooleanTypedValue: org.springframework.expression.spel.support.BooleanTypedValue forValue(boolean)>($z8);

        return $r14;

     label11:
        $r8 = virtualinvoke r2.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypeComparator getTypeComparator()>();

        $i0 = interfaceinvoke $r8.<org.springframework.expression.TypeComparator: int compare(java.lang.Object,java.lang.Object)>($r4, $r7);

        if $i0 <= 0 goto label12;

        $z9 = 1;

        goto label13;

     label12:
        $z9 = 0;

     label13:
        $r9 = staticinvoke <org.springframework.expression.spel.support.BooleanTypedValue: org.springframework.expression.spel.support.BooleanTypedValue forValue(boolean)>($z9);

        return $r9;
    }

    public volatile org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.spel.ast.OpGT r0;
        org.springframework.expression.spel.ExpressionState r1;
        org.springframework.expression.spel.support.BooleanTypedValue $r2;

        r0 := @this: org.springframework.expression.spel.ast.OpGT;

        r1 := @parameter0: org.springframework.expression.spel.ExpressionState;

        $r2 = virtualinvoke r0.<org.springframework.expression.spel.ast.OpGT: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>(r1);

        return $r2;
    }
}
