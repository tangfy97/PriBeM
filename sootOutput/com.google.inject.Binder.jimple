public interface  com.google.inject.Binder extends java.lang.Object
{

    public abstract transient void bindInterceptor(com.google.inject.matcher.Matcher, com.google.inject.matcher.Matcher, org.aopalliance.intercept.MethodInterceptor[]);

    public abstract void bindScope(java.lang.Class, com.google.inject.Scope);

    public abstract com.google.inject.binder.LinkedBindingBuilder bind(com.google.inject.Key);

    public abstract com.google.inject.binder.AnnotatedBindingBuilder bind(com.google.inject.TypeLiteral);

    public abstract com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class);

    public abstract com.google.inject.binder.AnnotatedConstantBindingBuilder bindConstant();

    public abstract void requestInjection(com.google.inject.TypeLiteral, java.lang.Object);

    public abstract void requestInjection(java.lang.Object);

    public abstract transient void requestStaticInjection(java.lang.Class[]);

    public abstract void install(com.google.inject.Module);

    public abstract com.google.inject.Stage currentStage();

    public abstract transient void addError(java.lang.String, java.lang.Object[]);

    public abstract void addError(java.lang.Throwable);

    public abstract void addError(com.google.inject.spi.Message);

    public abstract com.google.inject.Provider getProvider(com.google.inject.Key);

    public abstract com.google.inject.Provider getProvider(java.lang.Class);

    public abstract com.google.inject.MembersInjector getMembersInjector(com.google.inject.TypeLiteral);

    public abstract com.google.inject.MembersInjector getMembersInjector(java.lang.Class);

    public abstract void convertToTypes(com.google.inject.matcher.Matcher, com.google.inject.spi.TypeConverter);

    public abstract void bindListener(com.google.inject.matcher.Matcher, com.google.inject.spi.TypeListener);

    public abstract com.google.inject.Binder withSource(java.lang.Object);

    public abstract transient com.google.inject.Binder skipSources(java.lang.Class[]);

    public abstract com.google.inject.PrivateBinder newPrivateBinder();

    public abstract void requireExplicitBindings();

    public abstract void disableCircularProxies();
}
