public abstract class com.mycila.inject.internal.cglib.reflect.ConstructorDelegate extends java.lang.Object
{
    private static final com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$ConstructorKey KEY_FACTORY;
    static java.lang.Class class$net$sf$cglib$reflect$ConstructorDelegate$ConstructorKey;
    static java.lang.Class class$net$sf$cglib$reflect$ConstructorDelegate;

    protected void <init>()
    {
        com.mycila.inject.internal.cglib.reflect.ConstructorDelegate r0;

        r0 := @this: com.mycila.inject.internal.cglib.reflect.ConstructorDelegate;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.mycila.inject.internal.cglib.reflect.ConstructorDelegate create(java.lang.Class, java.lang.Class)
    {
        com.mycila.inject.internal.cglib.reflect.ConstructorDelegate $r3;
        java.lang.Class r1, r2;
        com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$Generator $r0;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class;

        $r0 = new com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$Generator;

        specialinvoke $r0.<com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$Generator: void <init>()>();

        virtualinvoke $r0.<com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$Generator: void setTargetClass(java.lang.Class)>(r1);

        virtualinvoke $r0.<com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$Generator: void setInterface(java.lang.Class)>(r2);

        $r3 = virtualinvoke $r0.<com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$Generator: com.mycila.inject.internal.cglib.reflect.ConstructorDelegate create()>();

        return $r3;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$ConstructorKey access$000()
    {
        com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$ConstructorKey $r0;

        $r0 = <com.mycila.inject.internal.cglib.reflect.ConstructorDelegate: com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$ConstructorKey KEY_FACTORY>;

        return $r0;
    }

    static void <clinit>()
    {
        com.mycila.inject.internal.cglib.core.KeyFactory $r2;
        com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$ConstructorKey $r3;
        java.lang.Class $r0, $r4;
        com.mycila.inject.internal.cglib.core.Customizer $r1;

        $r0 = <com.mycila.inject.internal.cglib.reflect.ConstructorDelegate: java.lang.Class class$net$sf$cglib$reflect$ConstructorDelegate$ConstructorKey>;

        if $r0 != null goto label1;

        $r4 = staticinvoke <com.mycila.inject.internal.cglib.reflect.ConstructorDelegate: java.lang.Class class$(java.lang.String)>("com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$ConstructorKey");

        <com.mycila.inject.internal.cglib.reflect.ConstructorDelegate: java.lang.Class class$net$sf$cglib$reflect$ConstructorDelegate$ConstructorKey> = $r4;

        goto label2;

     label1:
        $r4 = <com.mycila.inject.internal.cglib.reflect.ConstructorDelegate: java.lang.Class class$net$sf$cglib$reflect$ConstructorDelegate$ConstructorKey>;

     label2:
        $r1 = <com.mycila.inject.internal.cglib.core.KeyFactory: com.mycila.inject.internal.cglib.core.Customizer CLASS_BY_NAME>;

        $r2 = staticinvoke <com.mycila.inject.internal.cglib.core.KeyFactory: com.mycila.inject.internal.cglib.core.KeyFactory create(java.lang.Class,com.mycila.inject.internal.cglib.core.Customizer)>($r4, $r1);

        $r3 = (com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$ConstructorKey) $r2;

        <com.mycila.inject.internal.cglib.reflect.ConstructorDelegate: com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$ConstructorKey KEY_FACTORY> = $r3;

        return;
    }
}
