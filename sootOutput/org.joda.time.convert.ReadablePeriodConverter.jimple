class org.joda.time.convert.ReadablePeriodConverter extends org.joda.time.convert.AbstractConverter implements org.joda.time.convert.PeriodConverter
{
    static final org.joda.time.convert.ReadablePeriodConverter INSTANCE;
    static java.lang.Class class$org$joda$time$ReadablePeriod;

    protected void <init>()
    {
        org.joda.time.convert.ReadablePeriodConverter r0;

        r0 := @this: org.joda.time.convert.ReadablePeriodConverter;

        specialinvoke r0.<org.joda.time.convert.AbstractConverter: void <init>()>();

        return;
    }

    public void setInto(org.joda.time.ReadWritablePeriod, java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.ReadablePeriod $r2;
        org.joda.time.convert.ReadablePeriodConverter r3;
        org.joda.time.ReadWritablePeriod r0;
        org.joda.time.Chronology r4;
        java.lang.Object r1;

        r3 := @this: org.joda.time.convert.ReadablePeriodConverter;

        r0 := @parameter0: org.joda.time.ReadWritablePeriod;

        r1 := @parameter1: java.lang.Object;

        r4 := @parameter2: org.joda.time.Chronology;

        $r2 = (org.joda.time.ReadablePeriod) r1;

        interfaceinvoke r0.<org.joda.time.ReadWritablePeriod: void setPeriod(org.joda.time.ReadablePeriod)>($r2);

        return;
    }

    public org.joda.time.PeriodType getPeriodType(java.lang.Object)
    {
        org.joda.time.ReadablePeriod r1;
        org.joda.time.convert.ReadablePeriodConverter r3;
        java.lang.Object r0;
        org.joda.time.PeriodType $r2;

        r3 := @this: org.joda.time.convert.ReadablePeriodConverter;

        r0 := @parameter0: java.lang.Object;

        r1 = (org.joda.time.ReadablePeriod) r0;

        $r2 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: org.joda.time.PeriodType getPeriodType()>();

        return $r2;
    }

    public java.lang.Class getSupportedType()
    {
        java.lang.Class $r0, $r2;
        org.joda.time.convert.ReadablePeriodConverter r1;

        r1 := @this: org.joda.time.convert.ReadablePeriodConverter;

        $r0 = <org.joda.time.convert.ReadablePeriodConverter: java.lang.Class class$org$joda$time$ReadablePeriod>;

        if $r0 != null goto label1;

        $r2 = staticinvoke <org.joda.time.convert.ReadablePeriodConverter: java.lang.Class class$(java.lang.String)>("org.joda.time.ReadablePeriod");

        <org.joda.time.convert.ReadablePeriodConverter: java.lang.Class class$org$joda$time$ReadablePeriod> = $r2;

        goto label2;

     label1:
        $r2 = <org.joda.time.convert.ReadablePeriodConverter: java.lang.Class class$org$joda$time$ReadablePeriod>;

     label2:
        return $r2;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        org.joda.time.convert.ReadablePeriodConverter $r0;

        $r0 = new org.joda.time.convert.ReadablePeriodConverter;

        specialinvoke $r0.<org.joda.time.convert.ReadablePeriodConverter: void <init>()>();

        <org.joda.time.convert.ReadablePeriodConverter: org.joda.time.convert.ReadablePeriodConverter INSTANCE> = $r0;

        return;
    }
}
