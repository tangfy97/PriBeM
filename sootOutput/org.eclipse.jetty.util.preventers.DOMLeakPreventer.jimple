public class org.eclipse.jetty.util.preventers.DOMLeakPreventer extends org.eclipse.jetty.util.preventers.AbstractLeakPreventer
{

    public void <init>()
    {
        org.eclipse.jetty.util.preventers.DOMLeakPreventer r0;

        r0 := @this: org.eclipse.jetty.util.preventers.DOMLeakPreventer;

        specialinvoke r0.<org.eclipse.jetty.util.preventers.AbstractLeakPreventer: void <init>()>();

        return;
    }

    public void prevent(java.lang.ClassLoader)
    {
        org.eclipse.jetty.util.preventers.DOMLeakPreventer r3;
        javax.xml.parsers.DocumentBuilderFactory $r0;
        org.eclipse.jetty.util.log.Logger $r2;
        java.lang.ClassLoader r4;
        java.lang.Exception $r1;

        r3 := @this: org.eclipse.jetty.util.preventers.DOMLeakPreventer;

        r4 := @parameter0: java.lang.ClassLoader;

        $r0 = staticinvoke <javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory newInstance()>();

     label1:
        virtualinvoke $r0.<javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilder newDocumentBuilder()>();

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        $r2 = <org.eclipse.jetty.util.preventers.DOMLeakPreventer: org.eclipse.jetty.util.log.Logger LOG>;

        interfaceinvoke $r2.<org.eclipse.jetty.util.log.Logger: void warn(java.lang.Throwable)>($r1);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
