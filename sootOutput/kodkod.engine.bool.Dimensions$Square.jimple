final class kodkod.engine.bool.Dimensions$Square extends kodkod.engine.bool.Dimensions
{
    private final int n;
    private final int size;

    void <init>(int, int)
    {
        int i0, i1, $i2;
        kodkod.engine.bool.Dimensions$Square r0;

        r0 := @this: kodkod.engine.bool.Dimensions$Square;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = staticinvoke <kodkod.engine.bool.Dimensions$Square: int capacity(int,int)>(i0, i1);

        specialinvoke r0.<kodkod.engine.bool.Dimensions: void <init>(int,kodkod.engine.bool.Dimensions)>($i2, null);

        r0.<kodkod.engine.bool.Dimensions$Square: int size> = i1;

        r0.<kodkod.engine.bool.Dimensions$Square: int n> = i0;

        return;
    }

    static int capacity(int, int)
    {
        long $l2;
        byte $b3, $b4;
        kodkod.engine.CapacityExceededException $r6;
        int i0, i1, $i5, $i6, $i7;
        java.lang.String $r3;
        double $d0, $d1, $d2;
        kodkod.util.ints.IntVector $r4;
        java.lang.StringBuilder $r2, $r5;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        $d1 = (double) i0;

        $d0 = (double) i1;

        $d2 = staticinvoke <java.lang.Math: double pow(double,double)>($d1, $d0);

        $l2 = staticinvoke <java.lang.Math: long round(double)>($d2);

        $b3 = $l2 cmp 2147483647L;

        $i6 = (int) $b3;

        if $i6 > 0 goto label1;

        $b4 = $l2 cmp 0L;

        $i7 = (int) $b4;

        if $i7 > 0 goto label2;

     label1:
        $r6 = new kodkod.engine.CapacityExceededException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Matrix too large: requested capacity of ");

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = staticinvoke <kodkod.util.ints.Ints: kodkod.util.ints.IntVector nCopies(int,int)>(i1, i0);

        specialinvoke $r6.<kodkod.engine.CapacityExceededException: void <init>(java.lang.String,kodkod.util.ints.IntVector)>($r3, $r4);

        throw $r6;

     label2:
        $i5 = (int) $l2;

        return $i5;
    }

    void copy(int, int[], int, int)
    {
        java.lang.ArrayIndexOutOfBoundsException $r2;
        kodkod.engine.bool.Dimensions$Square r0;
        int[] r1;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, i7;

        r0 := @this: kodkod.engine.bool.Dimensions$Square;

        i6 := @parameter0: int;

        r1 := @parameter1: int[];

        i7 := @parameter2: int;

        i0 := @parameter3: int;

        if i6 < 0 goto label1;

        if i0 < 0 goto label1;

        $i2 = i6 + i0;

        $i1 = r0.<kodkod.engine.bool.Dimensions$Square: int n>;

        if $i2 <= $i1 goto label3;

     label1:
        $r2 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label2:
        $i4 = i7;

        i7 = i7 + 1;

        $i5 = r0.<kodkod.engine.bool.Dimensions$Square: int size>;

        r1[$i4] = $i5;

     label3:
        $i3 = i6;

        i6 = i6 + 1;

        if $i3 < i0 goto label2;

        return;
    }

    boolean isSquare(int, int)
    {
        int i0, i1, $i2;
        java.lang.ArrayIndexOutOfBoundsException $r1;
        kodkod.engine.bool.Dimensions$Square r0;

        r0 := @this: kodkod.engine.bool.Dimensions$Square;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 > i1 goto label1;

        if i0 < 0 goto label1;

        $i2 = r0.<kodkod.engine.bool.Dimensions$Square: int n>;

        if i1 > $i2 goto label1;

        return 1;

     label1:
        $r1 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r1;
    }

    public int numDimensions()
    {
        int $i0;
        kodkod.engine.bool.Dimensions$Square r0;

        r0 := @this: kodkod.engine.bool.Dimensions$Square;

        $i0 = r0.<kodkod.engine.bool.Dimensions$Square: int n>;

        return $i0;
    }

    public int dimension(int)
    {
        int i0, $i1, $i2;
        java.lang.ArrayIndexOutOfBoundsException $r1;
        kodkod.engine.bool.Dimensions$Square r0;
        boolean $z0;

        r0 := @this: kodkod.engine.bool.Dimensions$Square;

        i0 := @parameter0: int;

        $i1 = r0.<kodkod.engine.bool.Dimensions$Square: int n>;

        $z0 = staticinvoke <kodkod.engine.bool.Dimensions: boolean access$1(int,int)>(i0, $i1);

        if $z0 != 0 goto label1;

        $r1 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r1;

     label1:
        $i2 = r0.<kodkod.engine.bool.Dimensions$Square: int size>;

        return $i2;
    }

    public boolean isSquare()
    {
        kodkod.engine.bool.Dimensions$Square r0;

        r0 := @this: kodkod.engine.bool.Dimensions$Square;

        return 1;
    }

    public kodkod.engine.bool.Dimensions transpose()
    {
        int $i0;
        java.lang.UnsupportedOperationException $r1;
        kodkod.engine.bool.Dimensions$Square r0;

        r0 := @this: kodkod.engine.bool.Dimensions$Square;

        $i0 = virtualinvoke r0.<kodkod.engine.bool.Dimensions$Square: int numDimensions()>();

        if $i0 == 2 goto label1;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("n!=2");

        throw $r1;

     label1:
        return r0;
    }

    public boolean equals(java.lang.Object)
    {
        kodkod.engine.bool.Dimensions$Square r1, r2;
        int $i0, $i1, $i2, $i3;
        java.lang.Object r0;
        boolean $z0;

        r2 := @this: kodkod.engine.bool.Dimensions$Square;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof kodkod.engine.bool.Dimensions$Square;

        if $z0 == 0 goto label2;

        r1 = (kodkod.engine.bool.Dimensions$Square) r0;

        $i1 = r2.<kodkod.engine.bool.Dimensions$Square: int n>;

        $i0 = r1.<kodkod.engine.bool.Dimensions$Square: int n>;

        if $i1 != $i0 goto label1;

        $i3 = r2.<kodkod.engine.bool.Dimensions$Square: int size>;

        $i2 = r1.<kodkod.engine.bool.Dimensions$Square: int size>;

        if $i3 != $i2 goto label1;

        return 1;

     label1:
        return 0;

     label2:
        return 0;
    }

    public int hashCode()
    {
        int $i0, $i1, $i2;
        kodkod.engine.bool.Dimensions$Square r0;

        r0 := @this: kodkod.engine.bool.Dimensions$Square;

        $i1 = r0.<kodkod.engine.bool.Dimensions$Square: int n>;

        $i0 = r0.<kodkod.engine.bool.Dimensions$Square: int size>;

        $i2 = $i1 ^ $i0;

        return $i2;
    }
}
