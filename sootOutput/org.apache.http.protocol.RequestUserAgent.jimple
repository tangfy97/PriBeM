public class org.apache.http.protocol.RequestUserAgent extends java.lang.Object implements org.apache.http.HttpRequestInterceptor
{

    public void <init>()
    {
        org.apache.http.protocol.RequestUserAgent r0;

        r0 := @this: org.apache.http.protocol.RequestUserAgent;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void process(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException
    {
        org.apache.http.protocol.HttpContext r5;
        org.apache.http.params.HttpParams $r1;
        org.apache.http.protocol.RequestUserAgent r4;
        java.lang.String $r2;
        java.lang.IllegalArgumentException $r3;
        org.apache.http.HttpRequest r0;
        boolean $z0;

        r4 := @this: org.apache.http.protocol.RequestUserAgent;

        r0 := @parameter0: org.apache.http.HttpRequest;

        r5 := @parameter1: org.apache.http.protocol.HttpContext;

        if r0 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP request may not be null");

        throw $r3;

     label1:
        $z0 = interfaceinvoke r0.<org.apache.http.HttpRequest: boolean containsHeader(java.lang.String)>("User-Agent");

        if $z0 != 0 goto label2;

        $r1 = interfaceinvoke r0.<org.apache.http.HttpRequest: org.apache.http.params.HttpParams getParams()>();

        $r2 = staticinvoke <org.apache.http.params.HttpProtocolParams: java.lang.String getUserAgent(org.apache.http.params.HttpParams)>($r1);

        if $r2 == null goto label2;

        interfaceinvoke r0.<org.apache.http.HttpRequest: void addHeader(java.lang.String,java.lang.String)>("User-Agent", $r2);

     label2:
        return;
    }
}
