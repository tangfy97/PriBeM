public class ucar.nc2.iosp.hdf4.H4iosp extends ucar.nc2.iosp.AbstractIOServiceProvider
{
    private static org.slf4j.Logger log;
    private static boolean showLayoutTypes;
    private ucar.nc2.iosp.hdf4.H4header header;

    public void <init>()
    {
        ucar.nc2.iosp.hdf4.H4header $r1;
        ucar.nc2.iosp.hdf4.H4iosp r0;

        r0 := @this: ucar.nc2.iosp.hdf4.H4iosp;

        specialinvoke r0.<ucar.nc2.iosp.AbstractIOServiceProvider: void <init>()>();

        $r1 = new ucar.nc2.iosp.hdf4.H4header;

        specialinvoke $r1.<ucar.nc2.iosp.hdf4.H4header: void <init>()>();

        r0.<ucar.nc2.iosp.hdf4.H4iosp: ucar.nc2.iosp.hdf4.H4header header> = $r1;

        return;
    }

    public boolean isValidFile(ucar.unidata.io.RandomAccessFile) throws java.io.IOException
    {
        ucar.unidata.io.RandomAccessFile r0;
        ucar.nc2.iosp.hdf4.H4iosp r1;
        boolean $z0;

        r1 := @this: ucar.nc2.iosp.hdf4.H4iosp;

        r0 := @parameter0: ucar.unidata.io.RandomAccessFile;

        $z0 = staticinvoke <ucar.nc2.iosp.hdf4.H4header: boolean isValidFile(ucar.unidata.io.RandomAccessFile)>(r0);

        return $z0;
    }

    public java.lang.String getFileTypeId()
    {
        ucar.nc2.iosp.hdf4.H4iosp r0;

        r0 := @this: ucar.nc2.iosp.hdf4.H4iosp;

        return "HDF4";
    }

    public java.lang.String getFileTypeDescription()
    {
        ucar.nc2.iosp.hdf4.H4iosp r0;

        r0 := @this: ucar.nc2.iosp.hdf4.H4iosp;

        return "Hierarchical Data Format, version 4";
    }

    public void open(ucar.unidata.io.RandomAccessFile, ucar.nc2.NetcdfFile, ucar.nc2.util.CancelTask) throws java.io.IOException
    {
        ucar.unidata.io.RandomAccessFile r1;
        ucar.nc2.util.CancelTask r4;
        ucar.nc2.iosp.hdf4.H4header $r3;
        ucar.nc2.iosp.hdf4.H4iosp r0;
        ucar.nc2.NetcdfFile r2;

        r0 := @this: ucar.nc2.iosp.hdf4.H4iosp;

        r1 := @parameter0: ucar.unidata.io.RandomAccessFile;

        r2 := @parameter1: ucar.nc2.NetcdfFile;

        r4 := @parameter2: ucar.nc2.util.CancelTask;

        r0.<ucar.nc2.iosp.hdf4.H4iosp: ucar.unidata.io.RandomAccessFile raf> = r1;

        $r3 = r0.<ucar.nc2.iosp.hdf4.H4iosp: ucar.nc2.iosp.hdf4.H4header header>;

        virtualinvoke $r3.<ucar.nc2.iosp.hdf4.H4header: void read(ucar.unidata.io.RandomAccessFile,ucar.nc2.NetcdfFile)>(r1, r2);

        virtualinvoke r2.<ucar.nc2.NetcdfFile: void finish()>();

        return;
    }

    public ucar.ma2.Array readData(ucar.nc2.Variable, ucar.ma2.Section) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        byte[] $r69, $r70;
        ucar.nc2.iosp.LayoutBBTiled $r85;
        ucar.nc2.iosp.hdf4.H4iosp$H4CompressedChunkIterator $r84;
        ucar.nc2.iosp.hdf4.H4header$Vinfo r2;
        ucar.ma2.Section $r5, r73;
        long $l6, $l8, $l10;
        ucar.nc2.Structure $r71;
        ucar.nc2.iosp.LayoutSegmented $r77;
        ucar.nc2.iosp.LayoutRegular $r76, $r80, $r82;
        ucar.ma2.Array $r15, $r24, $r34, $r44, $r54, $r62, $r68;
        java.lang.IllegalStateException $r86;
        ucar.unidata.io.RandomAccessFile $r40, $r50, $r58;
        ucar.nc2.iosp.hdf4.H4iosp$H4ChunkIterator $r78;
        ucar.ma2.ArrayStructure $r72;
        int[] $r4, $r10, $r14, $r17, $r23, $r27, $r33, $r38, $r43, $r47, $r48, $r53, $r56, $r61, $r67;
        ucar.nc2.iosp.LayoutTiled $r79;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        ucar.ma2.DataType $r3, $r65;
        ucar.unidata.io.PositioningDataInputStream $r81, $r83;
        ucar.nc2.iosp.hdf4.H4iosp r8;
        long[] $r46;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i9, $i11, $i13, $i15, $i17;
        ucar.nc2.Variable r0;
        java.io.PrintStream $r25, $r35;
        java.lang.Object $r1, $r11, $r12, $r20, $r21, $r30, $r31, $r39, $r41, $r49, $r51, $r57, $r59, $r63, $r64, $r74, r75;
        java.lang.Class $r13, $r22, $r32, $r42, $r52, $r60, $r66;
        java.io.InputStream $r18, $r28;

        r8 := @this: ucar.nc2.iosp.hdf4.H4iosp;

        r0 := @parameter0: ucar.nc2.Variable;

        r73 := @parameter1: ucar.ma2.Section;

        $z0 = r0 instanceof ucar.nc2.Structure;

        if $z0 == 0 goto label01;

        $r71 = (ucar.nc2.Structure) r0;

        $r72 = specialinvoke r8.<ucar.nc2.iosp.hdf4.H4iosp: ucar.ma2.ArrayStructure readStructureData(ucar.nc2.Structure,ucar.ma2.Section)>($r71, r73);

        return $r72;

     label01:
        $r1 = virtualinvoke r0.<ucar.nc2.Variable: java.lang.Object getSPobject()>();

        r2 = (ucar.nc2.iosp.hdf4.H4header$Vinfo) $r1;

        $r3 = virtualinvoke r0.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        virtualinvoke r2.<ucar.nc2.iosp.hdf4.H4header$Vinfo: void setLayoutInfo()>();

        $r4 = virtualinvoke r0.<ucar.nc2.Variable: int[] getShape()>();

        $r5 = staticinvoke <ucar.ma2.Section: ucar.ma2.Section fill(ucar.ma2.Section,int[])>(r73, $r4);

        $z1 = r2.<ucar.nc2.iosp.hdf4.H4header$Vinfo: boolean hasNoData>;

        if $z1 == 0 goto label05;

        $r63 = r2.<ucar.nc2.iosp.hdf4.H4header$Vinfo: java.lang.Object fillValue>;

        if $r63 != null goto label02;

        $l10 = virtualinvoke $r5.<ucar.ma2.Section: long computeSize()>();

        $i11 = (int) $l10;

        $r74 = staticinvoke <ucar.nc2.iosp.IospHelper: java.lang.Object makePrimitiveArray(int,ucar.ma2.DataType)>($i11, $r3);

        goto label03;

     label02:
        $l8 = virtualinvoke $r5.<ucar.ma2.Section: long computeSize()>();

        $i9 = (int) $l8;

        $r64 = r2.<ucar.nc2.iosp.hdf4.H4header$Vinfo: java.lang.Object fillValue>;

        $r74 = staticinvoke <ucar.nc2.iosp.IospHelper: java.lang.Object makePrimitiveArray(int,ucar.ma2.DataType,java.lang.Object)>($i9, $r3, $r64);

     label03:
        r75 = $r74;

        $r65 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        if $r3 != $r65 goto label04;

        $r69 = (byte[]) $r74;

        $r70 = (byte[]) $r69;

        r75 = staticinvoke <ucar.nc2.iosp.IospHelper: char[] convertByteToChar(byte[])>($r70);

     label04:
        $r66 = virtualinvoke $r3.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r67 = virtualinvoke $r5.<ucar.ma2.Section: int[] getShape()>();

        $r68 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r66, $r67, r75);

        return $r68;

     label05:
        $z2 = r2.<ucar.nc2.iosp.hdf4.H4header$Vinfo: boolean isCompressed>;

        if $z2 != 0 goto label08;

        $z9 = r2.<ucar.nc2.iosp.hdf4.H4header$Vinfo: boolean isLinked>;

        if $z9 != 0 goto label06;

        $z12 = r2.<ucar.nc2.iosp.hdf4.H4header$Vinfo: boolean isChunked>;

        if $z12 != 0 goto label06;

        $r76 = new ucar.nc2.iosp.LayoutRegular;

        $i5 = r2.<ucar.nc2.iosp.hdf4.H4header$Vinfo: int start>;

        $l6 = (long) $i5;

        $i7 = virtualinvoke r0.<ucar.nc2.Variable: int getElementSize()>();

        $r56 = virtualinvoke r0.<ucar.nc2.Variable: int[] getShape()>();

        specialinvoke $r76.<ucar.nc2.iosp.LayoutRegular: void <init>(long,int,int[],ucar.ma2.Section)>($l6, $i7, $r56, $r5);

        $r58 = r8.<ucar.nc2.iosp.hdf4.H4iosp: ucar.unidata.io.RandomAccessFile raf>;

        $r57 = r2.<ucar.nc2.iosp.hdf4.H4header$Vinfo: java.lang.Object fillValue>;

        $i13 = (int) -1;

        $r59 = staticinvoke <ucar.nc2.iosp.IospHelper: java.lang.Object readDataFill(ucar.unidata.io.RandomAccessFile,ucar.nc2.iosp.Layout,ucar.ma2.DataType,java.lang.Object,int)>($r58, $r76, $r3, $r57, $i13);

        $r60 = virtualinvoke $r3.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r61 = virtualinvoke $r5.<ucar.ma2.Section: int[] getShape()>();

        $r62 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r60, $r61, $r59);

        return $r62;

     label06:
        $z10 = r2.<ucar.nc2.iosp.hdf4.H4header$Vinfo: boolean isLinked>;

        if $z10 == 0 goto label07;

        $r77 = new ucar.nc2.iosp.LayoutSegmented;

        $r46 = r2.<ucar.nc2.iosp.hdf4.H4header$Vinfo: long[] segPos>;

        $r47 = r2.<ucar.nc2.iosp.hdf4.H4header$Vinfo: int[] segSize>;

        $i4 = virtualinvoke r0.<ucar.nc2.Variable: int getElementSize()>();

        $r48 = virtualinvoke r0.<ucar.nc2.Variable: int[] getShape()>();

        specialinvoke $r77.<ucar.nc2.iosp.LayoutSegmented: void <init>(long[],int[],int,int[],ucar.ma2.Section)>($r46, $r47, $i4, $r48, $r5);

        $r50 = r8.<ucar.nc2.iosp.hdf4.H4iosp: ucar.unidata.io.RandomAccessFile raf>;

        $r49 = r2.<ucar.nc2.iosp.hdf4.H4header$Vinfo: java.lang.Object fillValue>;

        $i15 = (int) -1;

        $r51 = staticinvoke <ucar.nc2.iosp.IospHelper: java.lang.Object readDataFill(ucar.unidata.io.RandomAccessFile,ucar.nc2.iosp.Layout,ucar.ma2.DataType,java.lang.Object,int)>($r50, $r77, $r3, $r49, $i15);

        $r52 = virtualinvoke $r3.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r53 = virtualinvoke $r5.<ucar.ma2.Section: int[] getShape()>();

        $r54 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r52, $r53, $r51);

        return $r54;

     label07:
        $z11 = r2.<ucar.nc2.iosp.hdf4.H4header$Vinfo: boolean isChunked>;

        if $z11 == 0 goto label13;

        $r78 = new ucar.nc2.iosp.hdf4.H4iosp$H4ChunkIterator;

        specialinvoke $r78.<ucar.nc2.iosp.hdf4.H4iosp$H4ChunkIterator: void <init>(ucar.nc2.iosp.hdf4.H4iosp,ucar.nc2.iosp.hdf4.H4header$Vinfo)>(r8, r2);

        $r79 = new ucar.nc2.iosp.LayoutTiled;

        $r38 = r2.<ucar.nc2.iosp.hdf4.H4header$Vinfo: int[] chunkSize>;

        $i3 = virtualinvoke r0.<ucar.nc2.Variable: int getElementSize()>();

        specialinvoke $r79.<ucar.nc2.iosp.LayoutTiled: void <init>(ucar.nc2.iosp.LayoutTiled$DataChunkIterator,int[],int,ucar.ma2.Section)>($r78, $r38, $i3, $r5);

        $r40 = r8.<ucar.nc2.iosp.hdf4.H4iosp: ucar.unidata.io.RandomAccessFile raf>;

        $r39 = r2.<ucar.nc2.iosp.hdf4.H4header$Vinfo: java.lang.Object fillValue>;

        $i17 = (int) -1;

        $r41 = staticinvoke <ucar.nc2.iosp.IospHelper: java.lang.Object readDataFill(ucar.unidata.io.RandomAccessFile,ucar.nc2.iosp.Layout,ucar.ma2.DataType,java.lang.Object,int)>($r40, $r79, $r3, $r39, $i17);

        $r42 = virtualinvoke $r3.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r43 = virtualinvoke $r5.<ucar.ma2.Section: int[] getShape()>();

        $r44 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r42, $r43, $r41);

        return $r44;

     label08:
        $z3 = r2.<ucar.nc2.iosp.hdf4.H4header$Vinfo: boolean isLinked>;

        if $z3 != 0 goto label10;

        $z7 = r2.<ucar.nc2.iosp.hdf4.H4header$Vinfo: boolean isChunked>;

        if $z7 != 0 goto label10;

        $z8 = <ucar.nc2.iosp.hdf4.H4iosp: boolean showLayoutTypes>;

        if $z8 == 0 goto label09;

        $r35 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r35.<java.io.PrintStream: void println(java.lang.String)>("***notLinked, compressed");

     label09:
        $r80 = new ucar.nc2.iosp.LayoutRegular;

        $i2 = virtualinvoke r0.<ucar.nc2.Variable: int getElementSize()>();

        $r27 = virtualinvoke r0.<ucar.nc2.Variable: int[] getShape()>();

        specialinvoke $r80.<ucar.nc2.iosp.LayoutRegular: void <init>(long,int,int[],ucar.ma2.Section)>(0L, $i2, $r27, $r5);

        $r28 = specialinvoke r8.<ucar.nc2.iosp.hdf4.H4iosp: java.io.InputStream getCompressedInputStream(ucar.nc2.iosp.hdf4.H4header$Vinfo)>(r2);

        $r81 = new ucar.unidata.io.PositioningDataInputStream;

        specialinvoke $r81.<ucar.unidata.io.PositioningDataInputStream: void <init>(java.io.InputStream)>($r28);

        $r30 = r2.<ucar.nc2.iosp.hdf4.H4header$Vinfo: java.lang.Object fillValue>;

        $r31 = staticinvoke <ucar.nc2.iosp.IospHelper: java.lang.Object readDataFill(ucar.unidata.io.PositioningDataInputStream,ucar.nc2.iosp.Layout,ucar.ma2.DataType,java.lang.Object)>($r81, $r80, $r3, $r30);

        $r32 = virtualinvoke $r3.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r33 = virtualinvoke $r5.<ucar.ma2.Section: int[] getShape()>();

        $r34 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r32, $r33, $r31);

        return $r34;

     label10:
        $z4 = r2.<ucar.nc2.iosp.hdf4.H4header$Vinfo: boolean isLinked>;

        if $z4 == 0 goto label12;

        $z6 = <ucar.nc2.iosp.hdf4.H4iosp: boolean showLayoutTypes>;

        if $z6 == 0 goto label11;

        $r25 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r25.<java.io.PrintStream: void println(java.lang.String)>("***Linked, compressed");

     label11:
        $r82 = new ucar.nc2.iosp.LayoutRegular;

        $i1 = virtualinvoke r0.<ucar.nc2.Variable: int getElementSize()>();

        $r17 = virtualinvoke r0.<ucar.nc2.Variable: int[] getShape()>();

        specialinvoke $r82.<ucar.nc2.iosp.LayoutRegular: void <init>(long,int,int[],ucar.ma2.Section)>(0L, $i1, $r17, $r5);

        $r18 = specialinvoke r8.<ucar.nc2.iosp.hdf4.H4iosp: java.io.InputStream getLinkedCompressedInputStream(ucar.nc2.iosp.hdf4.H4header$Vinfo)>(r2);

        $r83 = new ucar.unidata.io.PositioningDataInputStream;

        specialinvoke $r83.<ucar.unidata.io.PositioningDataInputStream: void <init>(java.io.InputStream)>($r18);

        $r20 = r2.<ucar.nc2.iosp.hdf4.H4header$Vinfo: java.lang.Object fillValue>;

        $r21 = staticinvoke <ucar.nc2.iosp.IospHelper: java.lang.Object readDataFill(ucar.unidata.io.PositioningDataInputStream,ucar.nc2.iosp.Layout,ucar.ma2.DataType,java.lang.Object)>($r83, $r82, $r3, $r20);

        $r22 = virtualinvoke $r3.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r23 = virtualinvoke $r5.<ucar.ma2.Section: int[] getShape()>();

        $r24 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r22, $r23, $r21);

        return $r24;

     label12:
        $z5 = r2.<ucar.nc2.iosp.hdf4.H4header$Vinfo: boolean isChunked>;

        if $z5 == 0 goto label13;

        $r84 = new ucar.nc2.iosp.hdf4.H4iosp$H4CompressedChunkIterator;

        specialinvoke $r84.<ucar.nc2.iosp.hdf4.H4iosp$H4CompressedChunkIterator: void <init>(ucar.nc2.iosp.hdf4.H4iosp,ucar.nc2.iosp.hdf4.H4header$Vinfo)>(r8, r2);

        $r85 = new ucar.nc2.iosp.LayoutBBTiled;

        $r10 = r2.<ucar.nc2.iosp.hdf4.H4header$Vinfo: int[] chunkSize>;

        $i0 = virtualinvoke r0.<ucar.nc2.Variable: int getElementSize()>();

        specialinvoke $r85.<ucar.nc2.iosp.LayoutBBTiled: void <init>(ucar.nc2.iosp.LayoutBBTiled$DataChunkIterator,int[],int,ucar.ma2.Section)>($r84, $r10, $i0, $r5);

        $r11 = r2.<ucar.nc2.iosp.hdf4.H4header$Vinfo: java.lang.Object fillValue>;

        $r12 = staticinvoke <ucar.nc2.iosp.IospHelper: java.lang.Object readDataFill(ucar.nc2.iosp.LayoutBB,ucar.ma2.DataType,java.lang.Object)>($r85, $r3, $r11);

        $r13 = virtualinvoke $r3.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r14 = virtualinvoke $r5.<ucar.ma2.Section: int[] getShape()>();

        $r15 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r13, $r14, $r12);

        return $r15;

     label13:
        $r86 = new java.lang.IllegalStateException;

        specialinvoke $r86.<java.lang.IllegalStateException: void <init>()>();

        throw $r86;
    }

    private ucar.ma2.ArrayStructure readStructureData(ucar.nc2.Structure, ucar.ma2.Section) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        byte[] $r10;
        java.lang.IllegalStateException $r47;
        ucar.unidata.io.RandomAccessFile $r31;
        ucar.nc2.iosp.hdf4.H4iosp$LinkedInputStream $r40;
        java.nio.ByteBuffer $r9;
        ucar.ma2.StructureMembers$Member r36;
        ucar.ma2.ArrayStructureBB $r38;
        int[] $r8, $r16, $r21, $r26, $r29;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        ucar.ma2.DataType $r17, $r22, $r27, $r30;
        java.util.List $r4;
        ucar.ma2.StructureMembers $r3;
        ucar.unidata.io.PositioningDataInputStream $r41, $r43, $r45;
        ucar.nc2.iosp.hdf4.H4header$Vinfo r2;
        ucar.ma2.Section r7;
        ucar.nc2.iosp.hdf4.H4iosp r12;
        long $l2;
        ucar.nc2.Structure r0;
        int i0, $i1, $i3, $i5;
        ucar.nc2.Variable $r34;
        java.lang.String $r33;
        ucar.nc2.iosp.hdf4.H4header$Minfo r37;
        java.util.Iterator $r5;
        ucar.nc2.iosp.LayoutRegular $r39, $r42, $r44, $r46;
        java.lang.Object $r1, $r32, $r35;
        java.io.InputStream $r13, $r18;

        r12 := @this: ucar.nc2.iosp.hdf4.H4iosp;

        r0 := @parameter0: ucar.nc2.Structure;

        r7 := @parameter1: ucar.ma2.Section;

        $r1 = virtualinvoke r0.<ucar.nc2.Structure: java.lang.Object getSPobject()>();

        r2 = (ucar.nc2.iosp.hdf4.H4header$Vinfo) $r1;

        virtualinvoke r2.<ucar.nc2.iosp.hdf4.H4header$Vinfo: void setLayoutInfo()>();

        i0 = r2.<ucar.nc2.iosp.hdf4.H4header$Vinfo: int elemSize>;

        $r3 = virtualinvoke r0.<ucar.nc2.Structure: ucar.ma2.StructureMembers makeStructureMembers()>();

        $r4 = virtualinvoke $r3.<ucar.ma2.StructureMembers: java.util.List getMembers()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r32 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r36 = (ucar.ma2.StructureMembers$Member) $r32;

        $r33 = virtualinvoke r36.<ucar.ma2.StructureMembers$Member: java.lang.String getName()>();

        $r34 = virtualinvoke r0.<ucar.nc2.Structure: ucar.nc2.Variable findVariable(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<ucar.nc2.Variable: java.lang.Object getSPobject()>();

        r37 = (ucar.nc2.iosp.hdf4.H4header$Minfo) $r35;

        $i3 = r37.<ucar.nc2.iosp.hdf4.H4header$Minfo: int offset>;

        virtualinvoke r36.<ucar.ma2.StructureMembers$Member: void setDataParam(int)>($i3);

        goto label1;

     label2:
        virtualinvoke $r3.<ucar.ma2.StructureMembers: void setStructureSize(int)>(i0);

        $r38 = new ucar.ma2.ArrayStructureBB;

        $r8 = virtualinvoke r7.<ucar.ma2.Section: int[] getShape()>();

        specialinvoke $r38.<ucar.ma2.ArrayStructureBB: void <init>(ucar.ma2.StructureMembers,int[])>($r3, $r8);

        $r9 = virtualinvoke $r38.<ucar.ma2.ArrayStructureBB: java.nio.ByteBuffer getByteBuffer()>();

        $r10 = virtualinvoke $r9.<java.nio.ByteBuffer: byte[] array()>();

        $z1 = r2.<ucar.nc2.iosp.hdf4.H4header$Vinfo: boolean isLinked>;

        if $z1 != 0 goto label3;

        $z8 = r2.<ucar.nc2.iosp.hdf4.H4header$Vinfo: boolean isCompressed>;

        if $z8 != 0 goto label3;

        $r39 = new ucar.nc2.iosp.LayoutRegular;

        $i1 = r2.<ucar.nc2.iosp.hdf4.H4header$Vinfo: int start>;

        $l2 = (long) $i1;

        $r29 = virtualinvoke r0.<ucar.nc2.Structure: int[] getShape()>();

        specialinvoke $r39.<ucar.nc2.iosp.LayoutRegular: void <init>(long,int,int[],ucar.ma2.Section)>($l2, i0, $r29, r7);

        $r31 = r12.<ucar.nc2.iosp.hdf4.H4iosp: ucar.unidata.io.RandomAccessFile raf>;

        $r30 = <ucar.ma2.DataType: ucar.ma2.DataType STRUCTURE>;

        $i5 = (int) -1;

        staticinvoke <ucar.nc2.iosp.IospHelper: java.lang.Object readData(ucar.unidata.io.RandomAccessFile,ucar.nc2.iosp.Layout,ucar.ma2.DataType,java.lang.Object,int,boolean)>($r31, $r39, $r30, $r10, $i5, 1);

        goto label7;

     label3:
        $z2 = r2.<ucar.nc2.iosp.hdf4.H4header$Vinfo: boolean isLinked>;

        if $z2 == 0 goto label4;

        $z7 = r2.<ucar.nc2.iosp.hdf4.H4header$Vinfo: boolean isCompressed>;

        if $z7 != 0 goto label4;

        $r40 = new ucar.nc2.iosp.hdf4.H4iosp$LinkedInputStream;

        specialinvoke $r40.<ucar.nc2.iosp.hdf4.H4iosp$LinkedInputStream: void <init>(ucar.nc2.iosp.hdf4.H4iosp,ucar.nc2.iosp.hdf4.H4header$Vinfo)>(r12, r2);

        $r41 = new ucar.unidata.io.PositioningDataInputStream;

        specialinvoke $r41.<ucar.unidata.io.PositioningDataInputStream: void <init>(java.io.InputStream)>($r40);

        $r42 = new ucar.nc2.iosp.LayoutRegular;

        $r26 = virtualinvoke r0.<ucar.nc2.Structure: int[] getShape()>();

        specialinvoke $r42.<ucar.nc2.iosp.LayoutRegular: void <init>(long,int,int[],ucar.ma2.Section)>(0L, i0, $r26, r7);

        $r27 = <ucar.ma2.DataType: ucar.ma2.DataType STRUCTURE>;

        staticinvoke <ucar.nc2.iosp.IospHelper: java.lang.Object readData(ucar.unidata.io.PositioningDataInputStream,ucar.nc2.iosp.Layout,ucar.ma2.DataType,java.lang.Object)>($r41, $r42, $r27, $r10);

        goto label7;

     label4:
        $z3 = r2.<ucar.nc2.iosp.hdf4.H4header$Vinfo: boolean isLinked>;

        if $z3 != 0 goto label5;

        $z6 = r2.<ucar.nc2.iosp.hdf4.H4header$Vinfo: boolean isCompressed>;

        if $z6 == 0 goto label5;

        $r18 = specialinvoke r12.<ucar.nc2.iosp.hdf4.H4iosp: java.io.InputStream getCompressedInputStream(ucar.nc2.iosp.hdf4.H4header$Vinfo)>(r2);

        $r43 = new ucar.unidata.io.PositioningDataInputStream;

        specialinvoke $r43.<ucar.unidata.io.PositioningDataInputStream: void <init>(java.io.InputStream)>($r18);

        $r44 = new ucar.nc2.iosp.LayoutRegular;

        $r21 = virtualinvoke r0.<ucar.nc2.Structure: int[] getShape()>();

        specialinvoke $r44.<ucar.nc2.iosp.LayoutRegular: void <init>(long,int,int[],ucar.ma2.Section)>(0L, i0, $r21, r7);

        $r22 = <ucar.ma2.DataType: ucar.ma2.DataType STRUCTURE>;

        staticinvoke <ucar.nc2.iosp.IospHelper: java.lang.Object readData(ucar.unidata.io.PositioningDataInputStream,ucar.nc2.iosp.Layout,ucar.ma2.DataType,java.lang.Object)>($r43, $r44, $r22, $r10);

        goto label7;

     label5:
        $z4 = r2.<ucar.nc2.iosp.hdf4.H4header$Vinfo: boolean isLinked>;

        if $z4 == 0 goto label6;

        $z5 = r2.<ucar.nc2.iosp.hdf4.H4header$Vinfo: boolean isCompressed>;

        if $z5 == 0 goto label6;

        $r13 = specialinvoke r12.<ucar.nc2.iosp.hdf4.H4iosp: java.io.InputStream getLinkedCompressedInputStream(ucar.nc2.iosp.hdf4.H4header$Vinfo)>(r2);

        $r45 = new ucar.unidata.io.PositioningDataInputStream;

        specialinvoke $r45.<ucar.unidata.io.PositioningDataInputStream: void <init>(java.io.InputStream)>($r13);

        $r46 = new ucar.nc2.iosp.LayoutRegular;

        $r16 = virtualinvoke r0.<ucar.nc2.Structure: int[] getShape()>();

        specialinvoke $r46.<ucar.nc2.iosp.LayoutRegular: void <init>(long,int,int[],ucar.ma2.Section)>(0L, i0, $r16, r7);

        $r17 = <ucar.ma2.DataType: ucar.ma2.DataType STRUCTURE>;

        staticinvoke <ucar.nc2.iosp.IospHelper: java.lang.Object readData(ucar.unidata.io.PositioningDataInputStream,ucar.nc2.iosp.Layout,ucar.ma2.DataType,java.lang.Object)>($r45, $r46, $r17, $r10);

        goto label7;

     label6:
        $r47 = new java.lang.IllegalStateException;

        specialinvoke $r47.<java.lang.IllegalStateException: void <init>()>();

        throw $r47;

     label7:
        return $r38;
    }

    public java.lang.String toStringDebug(java.lang.Object)
    {
        ucar.nc2.iosp.hdf4.H4header$Vinfo r3;
        ucar.nc2.iosp.hdf4.H4iosp r4;
        java.lang.Object r0, $r2;
        ucar.nc2.Variable r1;
        java.lang.String $r5;
        boolean $z0;

        r4 := @this: ucar.nc2.iosp.hdf4.H4iosp;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof ucar.nc2.Variable;

        if $z0 == 0 goto label3;

        r1 = (ucar.nc2.Variable) r0;

        $r2 = virtualinvoke r1.<ucar.nc2.Variable: java.lang.Object getSPobject()>();

        r3 = (ucar.nc2.iosp.hdf4.H4header$Vinfo) $r2;

        if r3 == null goto label1;

        $r5 = virtualinvoke r3.<ucar.nc2.iosp.hdf4.H4header$Vinfo: java.lang.String toString()>();

        goto label2;

     label1:
        $r5 = "";

     label2:
        return $r5;

     label3:
        return null;
    }

    private java.io.InputStream getCompressedInputStream(ucar.nc2.iosp.hdf4.H4header$Vinfo) throws java.io.IOException
    {
        ucar.nc2.iosp.hdf4.H4header$Vinfo r0;
        byte[] r1;
        ucar.unidata.io.RandomAccessFile $r3, $r4;
        ucar.nc2.iosp.hdf4.H4iosp r2;
        java.util.zip.InflaterInputStream $r6;
        long $l2;
        java.io.ByteArrayInputStream $r5;
        int $i0, $i1;

        r2 := @this: ucar.nc2.iosp.hdf4.H4iosp;

        r0 := @parameter0: ucar.nc2.iosp.hdf4.H4header$Vinfo;

        $i0 = r0.<ucar.nc2.iosp.hdf4.H4header$Vinfo: int length>;

        r1 = newarray (byte)[$i0];

        $r3 = r2.<ucar.nc2.iosp.hdf4.H4iosp: ucar.unidata.io.RandomAccessFile raf>;

        $i1 = r0.<ucar.nc2.iosp.hdf4.H4header$Vinfo: int start>;

        $l2 = (long) $i1;

        virtualinvoke $r3.<ucar.unidata.io.RandomAccessFile: void seek(long)>($l2);

        $r4 = r2.<ucar.nc2.iosp.hdf4.H4iosp: ucar.unidata.io.RandomAccessFile raf>;

        virtualinvoke $r4.<ucar.unidata.io.RandomAccessFile: void readFully(byte[])>(r1);

        $r5 = new java.io.ByteArrayInputStream;

        specialinvoke $r5.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1);

        $r6 = new java.util.zip.InflaterInputStream;

        specialinvoke $r6.<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream)>($r5);

        return $r6;
    }

    private java.io.InputStream getLinkedCompressedInputStream(ucar.nc2.iosp.hdf4.H4header$Vinfo)
    {
        ucar.nc2.iosp.hdf4.H4header$Vinfo r3;
        ucar.nc2.iosp.hdf4.H4iosp$LinkedInputStream $r1;
        ucar.nc2.iosp.hdf4.H4iosp r2;
        java.util.zip.InflaterInputStream $r0;

        r2 := @this: ucar.nc2.iosp.hdf4.H4iosp;

        r3 := @parameter0: ucar.nc2.iosp.hdf4.H4header$Vinfo;

        $r0 = new java.util.zip.InflaterInputStream;

        $r1 = new ucar.nc2.iosp.hdf4.H4iosp$LinkedInputStream;

        specialinvoke $r1.<ucar.nc2.iosp.hdf4.H4iosp$LinkedInputStream: void <init>(ucar.nc2.iosp.hdf4.H4iosp,ucar.nc2.iosp.hdf4.H4header$Vinfo)>(r2, r3);

        specialinvoke $r0.<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream)>($r1);

        return $r0;
    }

    private java.io.InputStream getChunkedInputStream(ucar.nc2.iosp.hdf4.H4header$Vinfo)
    {
        ucar.nc2.iosp.hdf4.H4iosp$ChunkedInputStream $r0;
        ucar.nc2.iosp.hdf4.H4header$Vinfo r2;
        ucar.nc2.iosp.hdf4.H4iosp r1;

        r1 := @this: ucar.nc2.iosp.hdf4.H4iosp;

        r2 := @parameter0: ucar.nc2.iosp.hdf4.H4header$Vinfo;

        $r0 = new ucar.nc2.iosp.hdf4.H4iosp$ChunkedInputStream;

        specialinvoke $r0.<ucar.nc2.iosp.hdf4.H4iosp$ChunkedInputStream: void <init>(ucar.nc2.iosp.hdf4.H4iosp,ucar.nc2.iosp.hdf4.H4header$Vinfo)>(r1, r2);

        return $r0;
    }

    public java.lang.Object sendIospMessage(java.lang.Object)
    {
        ucar.nc2.iosp.hdf4.H4header $r4;
        ucar.nc2.iosp.hdf4.H4iosp r2;
        java.lang.Object r0, $r3;
        java.lang.String $r1;
        boolean $z0;

        r2 := @this: ucar.nc2.iosp.hdf4.H4iosp;

        r0 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("header");

        if $z0 == 0 goto label1;

        $r4 = r2.<ucar.nc2.iosp.hdf4.H4iosp: ucar.nc2.iosp.hdf4.H4header header>;

        return $r4;

     label1:
        $r3 = specialinvoke r2.<ucar.nc2.iosp.AbstractIOServiceProvider: java.lang.Object sendIospMessage(java.lang.Object)>(r0);

        return $r3;
    }

    static ucar.unidata.io.RandomAccessFile access$000(ucar.nc2.iosp.hdf4.H4iosp)
    {
        ucar.unidata.io.RandomAccessFile $r1;
        ucar.nc2.iosp.hdf4.H4iosp r0;

        r0 := @parameter0: ucar.nc2.iosp.hdf4.H4iosp;

        $r1 = r0.<ucar.nc2.iosp.hdf4.H4iosp: ucar.unidata.io.RandomAccessFile raf>;

        return $r1;
    }

    static ucar.unidata.io.RandomAccessFile access$100(ucar.nc2.iosp.hdf4.H4iosp)
    {
        ucar.unidata.io.RandomAccessFile $r1;
        ucar.nc2.iosp.hdf4.H4iosp r0;

        r0 := @parameter0: ucar.nc2.iosp.hdf4.H4iosp;

        $r1 = r0.<ucar.nc2.iosp.hdf4.H4iosp: ucar.unidata.io.RandomAccessFile raf>;

        return $r1;
    }

    static ucar.unidata.io.RandomAccessFile access$200(ucar.nc2.iosp.hdf4.H4iosp)
    {
        ucar.unidata.io.RandomAccessFile $r1;
        ucar.nc2.iosp.hdf4.H4iosp r0;

        r0 := @parameter0: ucar.nc2.iosp.hdf4.H4iosp;

        $r1 = r0.<ucar.nc2.iosp.hdf4.H4iosp: ucar.unidata.io.RandomAccessFile raf>;

        return $r1;
    }

    static ucar.unidata.io.RandomAccessFile access$300(ucar.nc2.iosp.hdf4.H4iosp)
    {
        ucar.unidata.io.RandomAccessFile $r1;
        ucar.nc2.iosp.hdf4.H4iosp r0;

        r0 := @parameter0: ucar.nc2.iosp.hdf4.H4iosp;

        $r1 = r0.<ucar.nc2.iosp.hdf4.H4iosp: ucar.unidata.io.RandomAccessFile raf>;

        return $r1;
    }

    static ucar.unidata.io.RandomAccessFile access$400(ucar.nc2.iosp.hdf4.H4iosp)
    {
        ucar.unidata.io.RandomAccessFile $r1;
        ucar.nc2.iosp.hdf4.H4iosp r0;

        r0 := @parameter0: ucar.nc2.iosp.hdf4.H4iosp;

        $r1 = r0.<ucar.nc2.iosp.hdf4.H4iosp: ucar.unidata.io.RandomAccessFile raf>;

        return $r1;
    }

    static ucar.unidata.io.RandomAccessFile access$500(ucar.nc2.iosp.hdf4.H4iosp)
    {
        ucar.unidata.io.RandomAccessFile $r1;
        ucar.nc2.iosp.hdf4.H4iosp r0;

        r0 := @parameter0: ucar.nc2.iosp.hdf4.H4iosp;

        $r1 = r0.<ucar.nc2.iosp.hdf4.H4iosp: ucar.unidata.io.RandomAccessFile raf>;

        return $r1;
    }

    static ucar.unidata.io.RandomAccessFile access$600(ucar.nc2.iosp.hdf4.H4iosp)
    {
        ucar.unidata.io.RandomAccessFile $r1;
        ucar.nc2.iosp.hdf4.H4iosp r0;

        r0 := @parameter0: ucar.nc2.iosp.hdf4.H4iosp;

        $r1 = r0.<ucar.nc2.iosp.hdf4.H4iosp: ucar.unidata.io.RandomAccessFile raf>;

        return $r1;
    }

    static ucar.unidata.io.RandomAccessFile access$700(ucar.nc2.iosp.hdf4.H4iosp)
    {
        ucar.unidata.io.RandomAccessFile $r1;
        ucar.nc2.iosp.hdf4.H4iosp r0;

        r0 := @parameter0: ucar.nc2.iosp.hdf4.H4iosp;

        $r1 = r0.<ucar.nc2.iosp.hdf4.H4iosp: ucar.unidata.io.RandomAccessFile raf>;

        return $r1;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lucar/nc2/iosp/hdf4/H4iosp;");

        <ucar.nc2.iosp.hdf4.H4iosp: org.slf4j.Logger log> = $r0;

        <ucar.nc2.iosp.hdf4.H4iosp: boolean showLayoutTypes> = 0;

        return;
    }
}
