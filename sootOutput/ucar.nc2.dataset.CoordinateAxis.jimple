public class ucar.nc2.dataset.CoordinateAxis extends ucar.nc2.dataset.VariableDS
{
    private static org.slf4j.Logger log;
    private static final int axisSizeToCache;
    protected ucar.nc2.dataset.NetcdfDataset ncd;
    protected ucar.nc2.constants.AxisType axisType;
    protected java.lang.String positive;
    protected java.lang.String boundaryRef;
    protected boolean isContiguous;
    private ucar.ma2.MAMath$MinMax minmax;
    private int hashCode;

    public static ucar.nc2.dataset.CoordinateAxis factory(ucar.nc2.dataset.NetcdfDataset, ucar.nc2.dataset.VariableDS)
    {
        ucar.nc2.dataset.VariableDS r0;
        ucar.ma2.DataType $r5, $r6;
        ucar.nc2.dataset.CoordinateAxis $r3;
        ucar.nc2.dataset.CoordinateAxis1D $r1;
        ucar.nc2.dataset.CoordinateAxis2D $r4;
        int $i0, $i1, $i2;
        ucar.nc2.dataset.NetcdfDataset r2;

        r2 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r0 := @parameter1: ucar.nc2.dataset.VariableDS;

        $i0 = virtualinvoke r0.<ucar.nc2.dataset.VariableDS: int getRank()>();

        if $i0 == 1 goto label1;

        $i1 = virtualinvoke r0.<ucar.nc2.dataset.VariableDS: int getRank()>();

        if $i1 != 2 goto label2;

        $r5 = virtualinvoke r0.<ucar.nc2.dataset.VariableDS: ucar.ma2.DataType getDataType()>();

        $r6 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        if $r5 != $r6 goto label2;

     label1:
        $r1 = new ucar.nc2.dataset.CoordinateAxis1D;

        specialinvoke $r1.<ucar.nc2.dataset.CoordinateAxis1D: void <init>(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.dataset.VariableDS)>(r2, r0);

        return $r1;

     label2:
        $i2 = virtualinvoke r0.<ucar.nc2.dataset.VariableDS: int getRank()>();

        if $i2 != 2 goto label3;

        $r4 = new ucar.nc2.dataset.CoordinateAxis2D;

        specialinvoke $r4.<ucar.nc2.dataset.CoordinateAxis2D: void <init>(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.dataset.VariableDS)>(r2, r0);

        return $r4;

     label3:
        $r3 = new ucar.nc2.dataset.CoordinateAxis;

        specialinvoke $r3.<ucar.nc2.dataset.CoordinateAxis: void <init>(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.dataset.VariableDS)>(r2, r0);

        return $r3;
    }

    protected void <init>(ucar.nc2.dataset.NetcdfDataset, ucar.nc2.dataset.VariableDS)
    {
        ucar.nc2.dataset.VariableDS r1;
        ucar.nc2.dataset.CoordinateAxis r0, r3;
        ucar.nc2.constants.AxisType $r4;
        java.lang.String $r5, $r6;
        ucar.nc2.dataset.NetcdfDataset r2;
        boolean $z0, $z1;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis;

        r2 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r1 := @parameter1: ucar.nc2.dataset.VariableDS;

        specialinvoke r0.<ucar.nc2.dataset.VariableDS: void <init>(ucar.nc2.dataset.VariableDS,boolean)>(r1, 0);

        r0.<ucar.nc2.dataset.CoordinateAxis: ucar.nc2.constants.AxisType axisType> = null;

        r0.<ucar.nc2.dataset.CoordinateAxis: java.lang.String positive> = null;

        r0.<ucar.nc2.dataset.CoordinateAxis: java.lang.String boundaryRef> = null;

        r0.<ucar.nc2.dataset.CoordinateAxis: boolean isContiguous> = 1;

        r0.<ucar.nc2.dataset.CoordinateAxis: ucar.ma2.MAMath$MinMax minmax> = null;

        r0.<ucar.nc2.dataset.CoordinateAxis: int hashCode> = 0;

        r0.<ucar.nc2.dataset.CoordinateAxis: ucar.nc2.dataset.NetcdfDataset ncd> = r2;

        $z0 = r1 instanceof ucar.nc2.dataset.CoordinateAxis;

        if $z0 == 0 goto label1;

        r3 = (ucar.nc2.dataset.CoordinateAxis) r1;

        $r4 = r3.<ucar.nc2.dataset.CoordinateAxis: ucar.nc2.constants.AxisType axisType>;

        r0.<ucar.nc2.dataset.CoordinateAxis: ucar.nc2.constants.AxisType axisType> = $r4;

        $r5 = r3.<ucar.nc2.dataset.CoordinateAxis: java.lang.String boundaryRef>;

        r0.<ucar.nc2.dataset.CoordinateAxis: java.lang.String boundaryRef> = $r5;

        $z1 = r3.<ucar.nc2.dataset.CoordinateAxis: boolean isContiguous>;

        r0.<ucar.nc2.dataset.CoordinateAxis: boolean isContiguous> = $z1;

        $r6 = r3.<ucar.nc2.dataset.CoordinateAxis: java.lang.String positive>;

        r0.<ucar.nc2.dataset.CoordinateAxis: java.lang.String positive> = $r6;

     label1:
        virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis: void setSizeToCache(int)>(100000);

        return;
    }

    public void <init>(ucar.nc2.dataset.NetcdfDataset, ucar.nc2.Group, java.lang.String, ucar.ma2.DataType, java.lang.String, java.lang.String, java.lang.String)
    {
        ucar.ma2.DataType r4;
        ucar.nc2.Group r2;
        ucar.nc2.dataset.CoordinateAxis r0;
        java.lang.String r3, r5, r6, r7;
        ucar.nc2.dataset.NetcdfDataset r1;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis;

        r1 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r2 := @parameter1: ucar.nc2.Group;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: ucar.ma2.DataType;

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: java.lang.String;

        r7 := @parameter6: java.lang.String;

        specialinvoke r0.<ucar.nc2.dataset.VariableDS: void <init>(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.Group,ucar.nc2.Structure,java.lang.String,ucar.ma2.DataType,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, null, r3, r4, r5, r6, r7);

        r0.<ucar.nc2.dataset.CoordinateAxis: ucar.nc2.constants.AxisType axisType> = null;

        r0.<ucar.nc2.dataset.CoordinateAxis: java.lang.String positive> = null;

        r0.<ucar.nc2.dataset.CoordinateAxis: java.lang.String boundaryRef> = null;

        r0.<ucar.nc2.dataset.CoordinateAxis: boolean isContiguous> = 1;

        r0.<ucar.nc2.dataset.CoordinateAxis: ucar.ma2.MAMath$MinMax minmax> = null;

        r0.<ucar.nc2.dataset.CoordinateAxis: int hashCode> = 0;

        r0.<ucar.nc2.dataset.CoordinateAxis: ucar.nc2.dataset.NetcdfDataset ncd> = r1;

        virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis: void setSizeToCache(int)>(100000);

        return;
    }

    public ucar.nc2.dataset.CoordinateAxis copyNoCache()
    {
        ucar.ma2.DataType $r5;
        ucar.nc2.Group $r3;
        ucar.nc2.dataset.CoordinateAxis $r0, r1;
        ucar.nc2.constants.AxisType $r9;
        java.lang.String $r4, $r6, $r7, $r8, $r10, $r11;
        ucar.nc2.dataset.NetcdfDataset $r2;
        ucar.nc2.Variable$Cache $r12;
        boolean $z0;

        r1 := @this: ucar.nc2.dataset.CoordinateAxis;

        $r0 = new ucar.nc2.dataset.CoordinateAxis;

        $r2 = r1.<ucar.nc2.dataset.CoordinateAxis: ucar.nc2.dataset.NetcdfDataset ncd>;

        $r3 = virtualinvoke r1.<ucar.nc2.dataset.CoordinateAxis: ucar.nc2.Group getParentGroup()>();

        $r4 = virtualinvoke r1.<ucar.nc2.dataset.CoordinateAxis: java.lang.String getShortName()>();

        $r5 = virtualinvoke r1.<ucar.nc2.dataset.CoordinateAxis: ucar.ma2.DataType getDataType()>();

        $r6 = virtualinvoke r1.<ucar.nc2.dataset.CoordinateAxis: java.lang.String getDimensionsString()>();

        $r7 = virtualinvoke r1.<ucar.nc2.dataset.CoordinateAxis: java.lang.String getUnitsString()>();

        $r8 = virtualinvoke r1.<ucar.nc2.dataset.CoordinateAxis: java.lang.String getDescription()>();

        specialinvoke $r0.<ucar.nc2.dataset.CoordinateAxis: void <init>(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.Group,java.lang.String,ucar.ma2.DataType,java.lang.String,java.lang.String,java.lang.String)>($r2, $r3, $r4, $r5, $r6, $r7, $r8);

        $r9 = r1.<ucar.nc2.dataset.CoordinateAxis: ucar.nc2.constants.AxisType axisType>;

        $r0.<ucar.nc2.dataset.CoordinateAxis: ucar.nc2.constants.AxisType axisType> = $r9;

        $r10 = r1.<ucar.nc2.dataset.CoordinateAxis: java.lang.String boundaryRef>;

        $r0.<ucar.nc2.dataset.CoordinateAxis: java.lang.String boundaryRef> = $r10;

        $z0 = r1.<ucar.nc2.dataset.CoordinateAxis: boolean isContiguous>;

        $r0.<ucar.nc2.dataset.CoordinateAxis: boolean isContiguous> = $z0;

        $r11 = r1.<ucar.nc2.dataset.CoordinateAxis: java.lang.String positive>;

        $r0.<ucar.nc2.dataset.CoordinateAxis: java.lang.String positive> = $r11;

        $r12 = new ucar.nc2.Variable$Cache;

        specialinvoke $r12.<ucar.nc2.Variable$Cache: void <init>()>();

        $r0.<ucar.nc2.dataset.CoordinateAxis: ucar.nc2.Variable$Cache cache> = $r12;

        return $r0;
    }

    protected ucar.nc2.Variable copy()
    {
        ucar.nc2.dataset.CoordinateAxis $r0, r1;
        ucar.nc2.dataset.NetcdfDataset $r2;

        r1 := @this: ucar.nc2.dataset.CoordinateAxis;

        $r0 = new ucar.nc2.dataset.CoordinateAxis;

        $r2 = r1.<ucar.nc2.dataset.CoordinateAxis: ucar.nc2.dataset.NetcdfDataset ncd>;

        specialinvoke $r0.<ucar.nc2.dataset.CoordinateAxis: void <init>(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.dataset.VariableDS)>($r2, r1);

        return $r0;
    }

    public ucar.nc2.constants.AxisType getAxisType()
    {
        ucar.nc2.dataset.CoordinateAxis r0;
        ucar.nc2.constants.AxisType $r1;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis;

        $r1 = r0.<ucar.nc2.dataset.CoordinateAxis: ucar.nc2.constants.AxisType axisType>;

        return $r1;
    }

    public void setAxisType(ucar.nc2.constants.AxisType)
    {
        ucar.nc2.dataset.CoordinateAxis r0;
        ucar.nc2.constants.AxisType r1;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis;

        r1 := @parameter0: ucar.nc2.constants.AxisType;

        r0.<ucar.nc2.dataset.CoordinateAxis: ucar.nc2.constants.AxisType axisType> = r1;

        return;
    }

    public java.lang.String getUnitsString()
    {
        ucar.nc2.dataset.CoordinateAxis r0;
        java.lang.String $r1, $r2;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis;

        $r1 = specialinvoke r0.<ucar.nc2.dataset.VariableDS: java.lang.String getUnitsString()>();

        if $r1 != null goto label1;

        $r2 = "";

        goto label2;

     label1:
        $r2 = $r1;

     label2:
        return $r2;
    }

    public boolean isNumeric()
    {
        ucar.ma2.DataType $r1, $r2, $r3, $r4, $r5, $r6;
        ucar.nc2.dataset.CoordinateAxis r0;
        boolean $z0;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis;

        $r1 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        if $r1 == $r2 goto label1;

        $r3 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis: ucar.ma2.DataType getDataType()>();

        $r4 = <ucar.ma2.DataType: ucar.ma2.DataType STRING>;

        if $r3 == $r4 goto label1;

        $r5 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis: ucar.ma2.DataType getDataType()>();

        $r6 = <ucar.ma2.DataType: ucar.ma2.DataType STRUCTURE>;

        if $r5 == $r6 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isContiguous()
    {
        ucar.nc2.dataset.CoordinateAxis r0;
        boolean $z0;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis;

        $z0 = r0.<ucar.nc2.dataset.CoordinateAxis: boolean isContiguous>;

        return $z0;
    }

    public java.lang.String getPositive()
    {
        ucar.nc2.dataset.CoordinateAxis r0;
        java.lang.String $r1;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis;

        $r1 = r0.<ucar.nc2.dataset.CoordinateAxis: java.lang.String positive>;

        return $r1;
    }

    public void setPositive(java.lang.String)
    {
        ucar.nc2.dataset.CoordinateAxis r0;
        java.lang.String r1;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis;

        r1 := @parameter0: java.lang.String;

        r0.<ucar.nc2.dataset.CoordinateAxis: java.lang.String positive> = r1;

        return;
    }

    public java.lang.String getBoundaryRef()
    {
        ucar.nc2.dataset.CoordinateAxis r0;
        java.lang.String $r1;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis;

        $r1 = r0.<ucar.nc2.dataset.CoordinateAxis: java.lang.String boundaryRef>;

        return $r1;
    }

    public void setBoundaryRef(java.lang.String)
    {
        ucar.nc2.dataset.CoordinateAxis r0;
        java.lang.String r1;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis;

        r1 := @parameter0: java.lang.String;

        r0.<ucar.nc2.dataset.CoordinateAxis: java.lang.String boundaryRef> = r1;

        return;
    }

    private void init()
    {
        ucar.nc2.dataset.CoordinateAxis r0;
        java.lang.IllegalStateException $r5;
        ucar.ma2.MAMath$MinMax $r2;
        org.slf4j.Logger $r4;
        java.io.IOException $r3;
        ucar.ma2.Array $r1;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis;

     label1:
        $r1 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis: ucar.ma2.Array read()>();

        $r2 = staticinvoke <ucar.ma2.MAMath: ucar.ma2.MAMath$MinMax getMinMax(ucar.ma2.Array)>($r1);

        r0.<ucar.nc2.dataset.CoordinateAxis: ucar.ma2.MAMath$MinMax minmax> = $r2;

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = <ucar.nc2.dataset.CoordinateAxis: org.slf4j.Logger log>;

        interfaceinvoke $r4.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Error reading coordinate values ", $r3);

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r3);

        throw $r5;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public double getMinValue()
    {
        ucar.nc2.dataset.CoordinateAxis r0;
        ucar.ma2.MAMath$MinMax $r1, $r2;
        double $d0;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis;

        $r1 = r0.<ucar.nc2.dataset.CoordinateAxis: ucar.ma2.MAMath$MinMax minmax>;

        if $r1 != null goto label1;

        specialinvoke r0.<ucar.nc2.dataset.CoordinateAxis: void init()>();

     label1:
        $r2 = r0.<ucar.nc2.dataset.CoordinateAxis: ucar.ma2.MAMath$MinMax minmax>;

        $d0 = $r2.<ucar.ma2.MAMath$MinMax: double min>;

        return $d0;
    }

    public double getMaxValue()
    {
        ucar.nc2.dataset.CoordinateAxis r0;
        ucar.ma2.MAMath$MinMax $r1, $r2;
        double $d0;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis;

        $r1 = r0.<ucar.nc2.dataset.CoordinateAxis: ucar.ma2.MAMath$MinMax minmax>;

        if $r1 != null goto label1;

        specialinvoke r0.<ucar.nc2.dataset.CoordinateAxis: void init()>();

     label1:
        $r2 = r0.<ucar.nc2.dataset.CoordinateAxis: ucar.ma2.MAMath$MinMax minmax>;

        $d0 = $r2.<ucar.ma2.MAMath$MinMax: double max>;

        return $d0;
    }

    public void getInfo(java.util.Formatter)
    {
        java.lang.Object[] $r1, $r4, $r7, $r9;
        java.util.Formatter r0;
        ucar.nc2.dataset.CoordinateAxis r2;
        ucar.nc2.constants.AxisType $r6, $r10;
        java.lang.String $r3, $r5, $r8, $r11;

        r2 := @this: ucar.nc2.dataset.CoordinateAxis;

        r0 := @parameter0: java.util.Formatter;

        $r1 = newarray (java.lang.Object)[1];

        $r3 = virtualinvoke r2.<ucar.nc2.dataset.CoordinateAxis: java.lang.String getNameAndDimensions()>();

        $r1[0] = $r3;

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%-30s", $r1);

        $r4 = newarray (java.lang.Object)[1];

        $r5 = virtualinvoke r2.<ucar.nc2.dataset.CoordinateAxis: java.lang.String getUnitsString()>();

        $r4[0] = $r5;

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%-20s", $r4);

        $r6 = r2.<ucar.nc2.dataset.CoordinateAxis: ucar.nc2.constants.AxisType axisType>;

        if $r6 == null goto label1;

        $r9 = newarray (java.lang.Object)[1];

        $r10 = r2.<ucar.nc2.dataset.CoordinateAxis: ucar.nc2.constants.AxisType axisType>;

        $r11 = virtualinvoke $r10.<ucar.nc2.constants.AxisType: java.lang.String toString()>();

        $r9[0] = $r11;

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%-10s", $r9);

     label1:
        $r7 = newarray (java.lang.Object)[1];

        $r8 = virtualinvoke r2.<ucar.nc2.dataset.CoordinateAxis: java.lang.String getDescription()>();

        $r7[0] = $r8;

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%s", $r7);

        return;
    }

    public boolean equals(java.lang.Object)
    {
        ucar.nc2.dataset.CoordinateAxis r0, r2;
        ucar.nc2.constants.AxisType $r3, $r7, $r8;
        java.lang.Object r1;
        java.lang.String $r4, $r5, $r6;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof ucar.nc2.dataset.CoordinateAxis;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $z1 = specialinvoke r0.<ucar.nc2.dataset.VariableDS: boolean equals(java.lang.Object)>(r1);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        r2 = (ucar.nc2.dataset.CoordinateAxis) r1;

        $r3 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis: ucar.nc2.constants.AxisType getAxisType()>();

        if $r3 == null goto label4;

        $r7 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis: ucar.nc2.constants.AxisType getAxisType()>();

        $r8 = virtualinvoke r2.<ucar.nc2.dataset.CoordinateAxis: ucar.nc2.constants.AxisType getAxisType()>();

        $z3 = virtualinvoke $r7.<ucar.nc2.constants.AxisType: boolean equals(java.lang.Object)>($r8);

        if $z3 != 0 goto label4;

        return 0;

     label4:
        $r4 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis: java.lang.String getPositive()>();

        if $r4 == null goto label5;

        $r5 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis: java.lang.String getPositive()>();

        $r6 = virtualinvoke r2.<ucar.nc2.dataset.CoordinateAxis: java.lang.String getPositive()>();

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z2 != 0 goto label5;

        return 0;

     label5:
        return 1;
    }

    public int hashCode()
    {
        ucar.nc2.dataset.CoordinateAxis r0;
        ucar.nc2.constants.AxisType $r1, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i7;
        java.lang.String $r2, $r3;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis;

        $i0 = r0.<ucar.nc2.dataset.CoordinateAxis: int hashCode>;

        if $i0 != 0 goto label3;

        $i1 = specialinvoke r0.<ucar.nc2.dataset.VariableDS: int hashCode()>();

        i6 = $i1;

        $r1 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis: ucar.nc2.constants.AxisType getAxisType()>();

        if $r1 == null goto label1;

        $i4 = 37 * $i1;

        $r4 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis: ucar.nc2.constants.AxisType getAxisType()>();

        $i5 = virtualinvoke $r4.<ucar.nc2.constants.AxisType: int hashCode()>();

        i6 = $i4 + $i5;

     label1:
        $r2 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis: java.lang.String getPositive()>();

        if $r2 == null goto label2;

        $i2 = 37 * i6;

        $r3 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis: java.lang.String getPositive()>();

        $i3 = virtualinvoke $r3.<java.lang.String: int hashCode()>();

        i6 = $i2 + $i3;

     label2:
        r0.<ucar.nc2.dataset.CoordinateAxis: int hashCode> = i6;

     label3:
        $i7 = r0.<ucar.nc2.dataset.CoordinateAxis: int hashCode>;

        return $i7;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        <ucar.nc2.dataset.CoordinateAxis: int axisSizeToCache> = 100000;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lucar/nc2/dataset/CoordinateAxis;");

        <ucar.nc2.dataset.CoordinateAxis: org.slf4j.Logger log> = $r0;

        return;
    }
}
