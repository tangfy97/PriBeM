public class com.jidesoft.range.IntegerRange extends com.jidesoft.range.AbstractNumericRange
{
    protected int _min;
    protected int _max;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        com.jidesoft.range.IntegerRange r0;

        r0 := @this: com.jidesoft.range.IntegerRange;

        specialinvoke r0.<com.jidesoft.range.IntegerRange: void <init>(int,int)>(0, 1);

        return;
    }

    public void <init>(int, int)
    {
        com.jidesoft.range.IntegerRange r0;
        int i0, i1, $i2, $i3;

        r0 := @this: com.jidesoft.range.IntegerRange;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<com.jidesoft.range.AbstractNumericRange: void <init>()>();

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>(i0, i1);

        r0.<com.jidesoft.range.IntegerRange: int _min> = $i2;

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>(i0, i1);

        r0.<com.jidesoft.range.IntegerRange: int _max> = $i3;

        return;
    }

    public void <init>(com.jidesoft.range.IntegerRange)
    {
        com.jidesoft.range.IntegerRange r0, r1;
        int $i0, $i1;
        double $d0, $d1;

        r0 := @this: com.jidesoft.range.IntegerRange;

        r1 := @parameter0: com.jidesoft.range.IntegerRange;

        $d0 = virtualinvoke r1.<com.jidesoft.range.IntegerRange: double minimum()>();

        $i0 = (int) $d0;

        $d1 = virtualinvoke r1.<com.jidesoft.range.IntegerRange: double maximum()>();

        $i1 = (int) $d1;

        specialinvoke r0.<com.jidesoft.range.IntegerRange: void <init>(int,int)>($i0, $i1);

        return;
    }

    public com.jidesoft.range.Range copy()
    {
        com.jidesoft.range.IntegerRange $r0, r1;

        r1 := @this: com.jidesoft.range.IntegerRange;

        $r0 = new com.jidesoft.range.IntegerRange;

        specialinvoke $r0.<com.jidesoft.range.IntegerRange: void <init>(com.jidesoft.range.IntegerRange)>(r1);

        return $r0;
    }

    public double minimum()
    {
        int $i0;
        com.jidesoft.range.IntegerRange r0;
        double $d0;

        r0 := @this: com.jidesoft.range.IntegerRange;

        $i0 = r0.<com.jidesoft.range.IntegerRange: int _min>;

        $d0 = (double) $i0;

        return $d0;
    }

    public double maximum()
    {
        int $i0;
        com.jidesoft.range.IntegerRange r0;
        double $d0;

        r0 := @this: com.jidesoft.range.IntegerRange;

        $i0 = r0.<com.jidesoft.range.IntegerRange: int _max>;

        $d0 = (double) $i0;

        return $d0;
    }

    public int getMin()
    {
        int $i0;
        com.jidesoft.range.IntegerRange r0;

        r0 := @this: com.jidesoft.range.IntegerRange;

        $i0 = r0.<com.jidesoft.range.IntegerRange: int _min>;

        return $i0;
    }

    public void setMin(int)
    {
        com.jidesoft.range.IntegerRange r0;
        java.lang.AssertionError $r1;
        int i0, i1, $i2, $i3;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6;
        java.lang.String $r7;
        boolean $z0;

        r0 := @this: com.jidesoft.range.IntegerRange;

        i1 := @parameter0: int;

        i0 = r0.<com.jidesoft.range.IntegerRange: int _min>;

        if i0 != i1 goto label1;

        return;

     label1:
        $z0 = <com.jidesoft.range.IntegerRange: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $i2 = r0.<com.jidesoft.range.IntegerRange: int _max>;

        if i1 <= $i2 goto label2;

        $r1 = new java.lang.AssertionError;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("minimum ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not <= ");

        $i3 = r0.<com.jidesoft.range.IntegerRange: int _max>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>($r7);

        throw $r1;

     label2:
        r0.<com.jidesoft.range.IntegerRange: int _min> = i1;

        virtualinvoke r0.<com.jidesoft.range.IntegerRange: void firePropertyChange(java.lang.String,int,int)>("min", i0, i1);

        return;
    }

    public int getMax()
    {
        int $i0;
        com.jidesoft.range.IntegerRange r0;

        r0 := @this: com.jidesoft.range.IntegerRange;

        $i0 = r0.<com.jidesoft.range.IntegerRange: int _max>;

        return $i0;
    }

    public void setMax(int)
    {
        com.jidesoft.range.IntegerRange r0;
        java.lang.AssertionError $r1;
        int i0, i1, $i2, $i3;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6;
        java.lang.String $r7;
        boolean $z0;

        r0 := @this: com.jidesoft.range.IntegerRange;

        i1 := @parameter0: int;

        i0 = r0.<com.jidesoft.range.IntegerRange: int _max>;

        if i0 != i1 goto label1;

        return;

     label1:
        $z0 = <com.jidesoft.range.IntegerRange: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $i2 = r0.<com.jidesoft.range.IntegerRange: int _min>;

        if i1 >= $i2 goto label2;

        $r1 = new java.lang.AssertionError;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("maximum ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not >= ");

        $i3 = r0.<com.jidesoft.range.IntegerRange: int _min>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>($r7);

        throw $r1;

     label2:
        r0.<com.jidesoft.range.IntegerRange: int _max> = i1;

        virtualinvoke r0.<com.jidesoft.range.IntegerRange: void firePropertyChange(java.lang.String,int,int)>("max", i0, i1);

        return;
    }

    public void adjust(java.lang.Integer, java.lang.Integer)
    {
        com.jidesoft.range.IntegerRange r0;
        int $i0, $i1;
        java.lang.Integer r1, r2;

        r0 := @this: com.jidesoft.range.IntegerRange;

        r1 := @parameter0: java.lang.Integer;

        r2 := @parameter1: java.lang.Integer;

        $i0 = virtualinvoke r1.<java.lang.Integer: int intValue()>();

        virtualinvoke r0.<com.jidesoft.range.IntegerRange: void setMin(int)>($i0);

        $i1 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        virtualinvoke r0.<com.jidesoft.range.IntegerRange: void setMax(int)>($i1);

        return;
    }

    public double size()
    {
        com.jidesoft.range.IntegerRange r0;
        int $i0, $i1, $i2;
        double $d0;

        r0 := @this: com.jidesoft.range.IntegerRange;

        $i1 = r0.<com.jidesoft.range.IntegerRange: int _max>;

        $i0 = r0.<com.jidesoft.range.IntegerRange: int _min>;

        $i2 = $i1 - $i0;

        $d0 = (double) $i2;

        return $d0;
    }

    public java.lang.Integer lower()
    {
        com.jidesoft.range.IntegerRange r0;
        int $i0;
        java.lang.Integer $r1;
        double $d0;

        r0 := @this: com.jidesoft.range.IntegerRange;

        $d0 = virtualinvoke r0.<com.jidesoft.range.IntegerRange: double minimum()>();

        $i0 = (int) $d0;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r1;
    }

    public java.lang.Integer upper()
    {
        com.jidesoft.range.IntegerRange r0;
        int $i0;
        java.lang.Integer $r1;
        double $d0;

        r0 := @this: com.jidesoft.range.IntegerRange;

        $d0 = virtualinvoke r0.<com.jidesoft.range.IntegerRange: double maximum()>();

        $i0 = (int) $d0;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r1;
    }

    public boolean contains(java.lang.Integer)
    {
        com.jidesoft.range.IntegerRange r1;
        int $i0, $i1, $i2, $i3;
        java.lang.Integer r0;
        boolean $z0;

        r1 := @this: com.jidesoft.range.IntegerRange;

        r0 := @parameter0: java.lang.Integer;

        $i0 = virtualinvoke r0.<java.lang.Integer: int intValue()>();

        $i1 = r1.<com.jidesoft.range.IntegerRange: int _min>;

        if $i0 < $i1 goto label1;

        $i2 = virtualinvoke r0.<java.lang.Integer: int intValue()>();

        $i3 = r1.<com.jidesoft.range.IntegerRange: int _max>;

        if $i2 > $i3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean equals(java.lang.Object)
    {
        com.jidesoft.range.IntegerRange r1, r2;
        int $i0, $i1, $i2, $i3;
        java.lang.Object r0;
        boolean $z0, $z1;

        r2 := @this: com.jidesoft.range.IntegerRange;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof com.jidesoft.range.IntegerRange;

        if $z0 == 0 goto label3;

        r1 = (com.jidesoft.range.IntegerRange) r0;

        $i1 = r2.<com.jidesoft.range.IntegerRange: int _min>;

        $i0 = r1.<com.jidesoft.range.IntegerRange: int _min>;

        if $i1 != $i0 goto label1;

        $i3 = r2.<com.jidesoft.range.IntegerRange: int _max>;

        $i2 = r1.<com.jidesoft.range.IntegerRange: int _max>;

        if $i3 != $i2 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;

     label3:
        return 0;
    }

    public int hashCode()
    {
        com.jidesoft.range.IntegerRange r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: com.jidesoft.range.IntegerRange;

        $i0 = r0.<com.jidesoft.range.IntegerRange: int _max>;

        $i2 = $i0 * 29;

        $i1 = r0.<com.jidesoft.range.IntegerRange: int _min>;

        $i3 = $i2 + $i1;

        return $i3;
    }

    public java.lang.String toString()
    {
        java.lang.Object[] $r0;
        com.jidesoft.range.IntegerRange r1;
        int $i0, $i1;
        java.lang.String $r4;
        java.lang.Integer $r2, $r3;

        r1 := @this: com.jidesoft.range.IntegerRange;

        $r0 = newarray (java.lang.Object)[2];

        $i0 = r1.<com.jidesoft.range.IntegerRange: int _min>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r0[0] = $r2;

        $i1 = r1.<com.jidesoft.range.IntegerRange: int _max>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r0[1] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("#<IntegerRange min=%d max=%d>", $r0);

        return $r4;
    }

    public volatile boolean contains(java.lang.Object)
    {
        com.jidesoft.range.IntegerRange r0;
        java.lang.Object r1;
        java.lang.Integer $r2;
        boolean $z0;

        r0 := @this: com.jidesoft.range.IntegerRange;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Integer) r1;

        $z0 = virtualinvoke r0.<com.jidesoft.range.IntegerRange: boolean contains(java.lang.Integer)>($r2);

        return $z0;
    }

    public volatile void adjust(java.lang.Object, java.lang.Object)
    {
        com.jidesoft.range.IntegerRange r0;
        java.lang.Object r1, r2;
        java.lang.Integer $r3, $r4;

        r0 := @this: com.jidesoft.range.IntegerRange;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.lang.Integer) r1;

        $r3 = (java.lang.Integer) r2;

        virtualinvoke r0.<com.jidesoft.range.IntegerRange: void adjust(java.lang.Integer,java.lang.Integer)>($r4, $r3);

        return;
    }

    public volatile java.lang.Object upper()
    {
        java.lang.Integer $r1;
        com.jidesoft.range.IntegerRange r0;

        r0 := @this: com.jidesoft.range.IntegerRange;

        $r1 = virtualinvoke r0.<com.jidesoft.range.IntegerRange: java.lang.Integer upper()>();

        return $r1;
    }

    public volatile java.lang.Object lower()
    {
        java.lang.Integer $r1;
        com.jidesoft.range.IntegerRange r0;

        r0 := @this: com.jidesoft.range.IntegerRange;

        $r1 = virtualinvoke r0.<com.jidesoft.range.IntegerRange: java.lang.Integer lower()>();

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lcom/jidesoft/range/IntegerRange;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.jidesoft.range.IntegerRange: boolean $assertionsDisabled> = $z1;

        return;
    }
}
