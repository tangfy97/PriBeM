final class com.mycila.inject.internal.guava.collect.Iterators$8 extends java.lang.Object implements java.util.Iterator
{
    final java.util.Iterator val$fromIterator;
    final com.mycila.inject.internal.guava.base.Function val$function;

    void <init>(java.util.Iterator, com.mycila.inject.internal.guava.base.Function)
    {
        com.mycila.inject.internal.guava.base.Function r2;
        java.util.Iterator r1;
        com.mycila.inject.internal.guava.collect.Iterators$8 r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Iterators$8;

        r1 := @parameter0: java.util.Iterator;

        r2 := @parameter1: com.mycila.inject.internal.guava.base.Function;

        r0.<com.mycila.inject.internal.guava.collect.Iterators$8: java.util.Iterator val$fromIterator> = r1;

        r0.<com.mycila.inject.internal.guava.collect.Iterators$8: com.mycila.inject.internal.guava.base.Function val$function> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean hasNext()
    {
        java.util.Iterator $r1;
        com.mycila.inject.internal.guava.collect.Iterators$8 r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Iterators$8;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Iterators$8: java.util.Iterator val$fromIterator>;

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        return $z0;
    }

    public java.lang.Object next()
    {
        java.util.Iterator $r1;
        com.mycila.inject.internal.guava.collect.Iterators$8 r0;
        java.lang.Object $r2, $r4;
        com.mycila.inject.internal.guava.base.Function $r3;

        r0 := @this: com.mycila.inject.internal.guava.collect.Iterators$8;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Iterators$8: java.util.Iterator val$fromIterator>;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r3 = r0.<com.mycila.inject.internal.guava.collect.Iterators$8: com.mycila.inject.internal.guava.base.Function val$function>;

        $r4 = interfaceinvoke $r3.<com.mycila.inject.internal.guava.base.Function: java.lang.Object apply(java.lang.Object)>($r2);

        return $r4;
    }

    public void remove()
    {
        java.util.Iterator $r1;
        com.mycila.inject.internal.guava.collect.Iterators$8 r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Iterators$8;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Iterators$8: java.util.Iterator val$fromIterator>;

        interfaceinvoke $r1.<java.util.Iterator: void remove()>();

        return;
    }
}
