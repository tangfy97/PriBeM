class bsh.BSHAmbiguousName extends bsh.SimpleNode
{
    public java.lang.String text;

    void <init>(int)
    {
        int i0;
        bsh.BSHAmbiguousName r0;

        r0 := @this: bsh.BSHAmbiguousName;

        i0 := @parameter0: int;

        specialinvoke r0.<bsh.SimpleNode: void <init>(int)>(i0);

        return;
    }

    public bsh.Name getName(bsh.NameSpace)
    {
        bsh.BSHAmbiguousName r1;
        bsh.Name $r3;
        bsh.NameSpace r0;
        java.lang.String $r2;

        r1 := @this: bsh.BSHAmbiguousName;

        r0 := @parameter0: bsh.NameSpace;

        $r2 = r1.<bsh.BSHAmbiguousName: java.lang.String text>;

        $r3 = virtualinvoke r0.<bsh.NameSpace: bsh.Name getNameResolver(java.lang.String)>($r2);

        return $r3;
    }

    public java.lang.Object toObject(bsh.CallStack, bsh.Interpreter) throws bsh.EvalError
    {
        bsh.Interpreter r2;
        bsh.BSHAmbiguousName r0;
        java.lang.Object $r3;
        bsh.CallStack r1;

        r0 := @this: bsh.BSHAmbiguousName;

        r1 := @parameter0: bsh.CallStack;

        r2 := @parameter1: bsh.Interpreter;

        $r3 = virtualinvoke r0.<bsh.BSHAmbiguousName: java.lang.Object toObject(bsh.CallStack,bsh.Interpreter,boolean)>(r1, r2, 0);

        return $r3;
    }

    java.lang.Object toObject(bsh.CallStack, bsh.Interpreter, boolean) throws bsh.EvalError
    {
        bsh.EvalError $r7;
        bsh.Interpreter r4;
        bsh.Name $r3;
        bsh.NameSpace $r2;
        bsh.UtilEvalError $r6;
        bsh.CallStack r1;
        bsh.BSHAmbiguousName r0;
        java.lang.Object $r5;
        boolean z0;

        r0 := @this: bsh.BSHAmbiguousName;

        r1 := @parameter0: bsh.CallStack;

        r4 := @parameter1: bsh.Interpreter;

        z0 := @parameter2: boolean;

     label1:
        $r2 = virtualinvoke r1.<bsh.CallStack: bsh.NameSpace top()>();

        $r3 = virtualinvoke r0.<bsh.BSHAmbiguousName: bsh.Name getName(bsh.NameSpace)>($r2);

        $r5 = virtualinvoke $r3.<bsh.Name: java.lang.Object toObject(bsh.CallStack,bsh.Interpreter,boolean)>(r1, r4, z0);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<bsh.UtilEvalError: bsh.EvalError toEvalError(bsh.SimpleNode,bsh.CallStack)>(r0, r1);

        throw $r7;

        catch bsh.UtilEvalError from label1 to label2 with label3;
    }

    public java.lang.Class toClass(bsh.CallStack, bsh.Interpreter) throws bsh.EvalError
    {
        bsh.EvalError $r6, $r8;
        bsh.Interpreter r10;
        bsh.Name $r3;
        bsh.NameSpace $r2;
        bsh.UtilEvalError $r5;
        bsh.CallStack r1;
        bsh.BSHAmbiguousName r0;
        java.lang.Class $r4;
        java.lang.ClassNotFoundException $r7;
        java.lang.String $r9;

        r0 := @this: bsh.BSHAmbiguousName;

        r1 := @parameter0: bsh.CallStack;

        r10 := @parameter1: bsh.Interpreter;

     label1:
        $r2 = virtualinvoke r1.<bsh.CallStack: bsh.NameSpace top()>();

        $r3 = virtualinvoke r0.<bsh.BSHAmbiguousName: bsh.Name getName(bsh.NameSpace)>($r2);

        $r4 = virtualinvoke $r3.<bsh.Name: java.lang.Class toClass()>();

     label2:
        return $r4;

     label3:
        $r7 := @caughtexception;

        $r8 = new bsh.EvalError;

        $r9 = virtualinvoke $r7.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r8.<bsh.EvalError: void <init>(java.lang.String,bsh.SimpleNode,bsh.CallStack)>($r9, r0, r1);

        throw $r8;

     label4:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<bsh.UtilEvalError: bsh.EvalError toEvalError(bsh.SimpleNode,bsh.CallStack)>(r0, r1);

        throw $r6;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch bsh.UtilEvalError from label1 to label2 with label4;
    }

    public bsh.LHS toLHS(bsh.CallStack, bsh.Interpreter) throws bsh.EvalError
    {
        bsh.EvalError $r7;
        bsh.Interpreter r4;
        bsh.Name $r3;
        bsh.NameSpace $r2;
        bsh.UtilEvalError $r6;
        bsh.CallStack r1;
        bsh.LHS $r5;
        bsh.BSHAmbiguousName r0;

        r0 := @this: bsh.BSHAmbiguousName;

        r1 := @parameter0: bsh.CallStack;

        r4 := @parameter1: bsh.Interpreter;

     label1:
        $r2 = virtualinvoke r1.<bsh.CallStack: bsh.NameSpace top()>();

        $r3 = virtualinvoke r0.<bsh.BSHAmbiguousName: bsh.Name getName(bsh.NameSpace)>($r2);

        $r5 = virtualinvoke $r3.<bsh.Name: bsh.LHS toLHS(bsh.CallStack,bsh.Interpreter)>(r1, r4);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<bsh.UtilEvalError: bsh.EvalError toEvalError(bsh.SimpleNode,bsh.CallStack)>(r0, r1);

        throw $r7;

        catch bsh.UtilEvalError from label1 to label2 with label3;
    }

    public java.lang.Object eval(bsh.CallStack, bsh.Interpreter) throws bsh.EvalError
    {
        bsh.Interpreter r3;
        bsh.BSHAmbiguousName r1;
        bsh.InterpreterError $r0;
        bsh.CallStack r2;

        r1 := @this: bsh.BSHAmbiguousName;

        r2 := @parameter0: bsh.CallStack;

        r3 := @parameter1: bsh.Interpreter;

        $r0 = new bsh.InterpreterError;

        specialinvoke $r0.<bsh.InterpreterError: void <init>(java.lang.String)>("Don\'t know how to eval an ambiguous name!  Use toObject() if you want an object.");

        throw $r0;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuffer $r0, $r1, $r4;
        bsh.BSHAmbiguousName r2;
        java.lang.String $r3, $r5;

        r2 := @this: bsh.BSHAmbiguousName;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("AmbigousName: ");

        $r3 = r2.<bsh.BSHAmbiguousName: java.lang.String text>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;
    }
}
