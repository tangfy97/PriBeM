public class org.waveprotocol.wave.model.schema.SchemaUtils extends java.lang.Object
{
    public static final java.lang.String[] BOOLEAN_VALUES;

    public static boolean isValidInteger(java.lang.String, int)
    {
        int $i0, i1;
        java.lang.NumberFormatException $r1;
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

     label1:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r0);

        if $i0 < i1 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;

     label4:
        $r1 := @caughtexception;

        return 0;

        catch java.lang.NumberFormatException from label1 to label3 with label4;
    }

    public static boolean isNonNegativeInteger(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.waveprotocol.wave.model.schema.SchemaUtils: boolean isValidInteger(java.lang.String,int)>(r0, 0);

        return $z0;
    }

    public static boolean isPositiveInteger(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.waveprotocol.wave.model.schema.SchemaUtils: boolean isValidInteger(java.lang.String,int)>(r0, 1);

        return $z0;
    }

    public static boolean isWaveletId(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        return 1;
    }

    public static boolean isLong(java.lang.String)
    {
        java.lang.NumberFormatException $r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

     label1:
        staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r0);

     label2:
        return 1;

     label3:
        $r1 := @caughtexception;

        return 0;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public static boolean isDouble(java.lang.String)
    {
        java.lang.NumberFormatException $r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

     label1:
        staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r0);

     label2:
        return 1;

     label3:
        $r1 := @caughtexception;

        return 0;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    private void <init>()
    {
        org.waveprotocol.wave.model.schema.SchemaUtils r0;

        r0 := @this: org.waveprotocol.wave.model.schema.SchemaUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;

        $r0 = newarray (java.lang.String)[2];

        $r0[0] = "true";

        $r0[1] = "false";

        <org.waveprotocol.wave.model.schema.SchemaUtils: java.lang.String[] BOOLEAN_VALUES> = $r0;

        return;
    }
}
