public class ucar.nc2.dt.radial.Dorade2Dataset extends ucar.nc2.dt.radial.RadialDatasetSweepAdapter implements ucar.nc2.dt.TypedDatasetFactoryIF
{
    protected ucar.nc2.units.DateUnit dateUnits;
    private ucar.nc2.dataset.NetcdfDataset ncd;
    float[] elev;
    float[] aziv;
    float[] disv;
    float[] lonv;
    float[] altv;
    float[] latv;
    double[] timv;
    float ranv;
    float cellv;
    float angv;
    float nyqv;
    float rangv;
    float contv;
    float rgainv;
    float bwidthv;

    public boolean isMine(ucar.nc2.dataset.NetcdfDataset)
    {
        java.lang.String $r1, $r2;
        ucar.nc2.dt.radial.Dorade2Dataset r3;
        ucar.nc2.dataset.NetcdfDataset r0;
        boolean $z0, $z1;

        r3 := @this: ucar.nc2.dt.radial.Dorade2Dataset;

        r0 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        $r1 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: java.lang.String findAttValueIgnoreCase(ucar.nc2.Variable,java.lang.String,java.lang.String)>(null, "Conventions", null);

        if null == $r1 goto label1;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("_Coordinates");

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: java.lang.String findAttValueIgnoreCase(ucar.nc2.Variable,java.lang.String,java.lang.String)>(null, "Format", null);

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("Unidata/netCDF/Dorade");

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public ucar.nc2.dt.TypedDataset open(ucar.nc2.dataset.NetcdfDataset, ucar.nc2.util.CancelTask, java.lang.StringBuilder) throws java.io.IOException
    {
        ucar.nc2.util.CancelTask r3;
        java.lang.StringBuilder r4;
        ucar.nc2.dt.radial.Dorade2Dataset $r0, r2;
        ucar.nc2.dataset.NetcdfDataset r1;

        r2 := @this: ucar.nc2.dt.radial.Dorade2Dataset;

        r1 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r3 := @parameter1: ucar.nc2.util.CancelTask;

        r4 := @parameter2: java.lang.StringBuilder;

        $r0 = new ucar.nc2.dt.radial.Dorade2Dataset;

        specialinvoke $r0.<ucar.nc2.dt.radial.Dorade2Dataset: void <init>(ucar.nc2.dataset.NetcdfDataset)>(r1);

        return $r0;
    }

    public ucar.nc2.constants.FeatureType getScientificDataType()
    {
        ucar.nc2.dt.radial.Dorade2Dataset r1;
        ucar.nc2.constants.FeatureType $r0;

        r1 := @this: ucar.nc2.dt.radial.Dorade2Dataset;

        $r0 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType RADIAL>;

        return $r0;
    }

    public void <init>()
    {
        ucar.nc2.dt.radial.Dorade2Dataset r0;

        r0 := @this: ucar.nc2.dt.radial.Dorade2Dataset;

        specialinvoke r0.<ucar.nc2.dt.radial.RadialDatasetSweepAdapter: void <init>()>();

        return;
    }

    public void <init>(ucar.nc2.dataset.NetcdfDataset)
    {
        double[] $r49, $r50;
        float[] $r7, $r8, $r14, $r15, $r21, $r22, $r28, $r29, $r35, $r36, $r42, $r43;
        java.io.IOException $r61;
        ucar.ma2.Array $r4, $r11, $r18, $r25, $r32, $r39, $r46;
        ucar.nc2.dt.radial.Dorade2Dataset r0;
        ucar.nc2.dataset.NetcdfDataset r1, $r2, $r9, $r16, $r23, $r30, $r37, $r44, $r51, $r53, $r55, $r57, $r59;
        float $f0, $f1, $f2, $f3, $f4;
        ucar.nc2.Variable $r3, $r10, $r17, $r24, $r31, $r38, $r45, $r52, $r54, $r56, $r58, $r60;
        java.lang.Class $r5, $r12, $r19, $r26, $r33, $r40, $r47;
        java.lang.Object $r6, $r13, $r20, $r27, $r34, $r41, $r48;

        r0 := @this: ucar.nc2.dt.radial.Dorade2Dataset;

        r1 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        specialinvoke r0.<ucar.nc2.dt.radial.RadialDatasetSweepAdapter: void <init>(ucar.nc2.dataset.NetcdfDataset)>(r1);

        r0.<ucar.nc2.dt.radial.Dorade2Dataset: ucar.nc2.dataset.NetcdfDataset ncd> = r1;

        r0.<ucar.nc2.dt.radial.Dorade2Dataset: java.lang.String desc> = "dorade radar dataset";

     label1:
        $r2 = r0.<ucar.nc2.dt.radial.Dorade2Dataset: ucar.nc2.dataset.NetcdfDataset ncd>;

        $r3 = virtualinvoke $r2.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable findVariable(java.lang.String)>("elevation");

        $r4 = virtualinvoke $r3.<ucar.nc2.Variable: ucar.ma2.Array read()>();

        $r5 = <java.lang.Float: java.lang.Class TYPE>;

        $r6 = virtualinvoke $r4.<ucar.ma2.Array: java.lang.Object get1DJavaArray(java.lang.Class)>($r5);

        $r7 = (float[]) $r6;

        $r8 = (float[]) $r7;

        r0.<ucar.nc2.dt.radial.Dorade2Dataset: float[] elev> = $r8;

        $r9 = r0.<ucar.nc2.dt.radial.Dorade2Dataset: ucar.nc2.dataset.NetcdfDataset ncd>;

        $r10 = virtualinvoke $r9.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable findVariable(java.lang.String)>("azimuth");

        $r11 = virtualinvoke $r10.<ucar.nc2.Variable: ucar.ma2.Array read()>();

        $r12 = <java.lang.Float: java.lang.Class TYPE>;

        $r13 = virtualinvoke $r11.<ucar.ma2.Array: java.lang.Object get1DJavaArray(java.lang.Class)>($r12);

        $r14 = (float[]) $r13;

        $r15 = (float[]) $r14;

        r0.<ucar.nc2.dt.radial.Dorade2Dataset: float[] aziv> = $r15;

        $r16 = r0.<ucar.nc2.dt.radial.Dorade2Dataset: ucar.nc2.dataset.NetcdfDataset ncd>;

        $r17 = virtualinvoke $r16.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable findVariable(java.lang.String)>("altitudes_1");

        $r18 = virtualinvoke $r17.<ucar.nc2.Variable: ucar.ma2.Array read()>();

        $r19 = <java.lang.Float: java.lang.Class TYPE>;

        $r20 = virtualinvoke $r18.<ucar.ma2.Array: java.lang.Object get1DJavaArray(java.lang.Class)>($r19);

        $r21 = (float[]) $r20;

        $r22 = (float[]) $r21;

        r0.<ucar.nc2.dt.radial.Dorade2Dataset: float[] altv> = $r22;

        $r23 = r0.<ucar.nc2.dt.radial.Dorade2Dataset: ucar.nc2.dataset.NetcdfDataset ncd>;

        $r24 = virtualinvoke $r23.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable findVariable(java.lang.String)>("longitudes_1");

        $r25 = virtualinvoke $r24.<ucar.nc2.Variable: ucar.ma2.Array read()>();

        $r26 = <java.lang.Float: java.lang.Class TYPE>;

        $r27 = virtualinvoke $r25.<ucar.ma2.Array: java.lang.Object get1DJavaArray(java.lang.Class)>($r26);

        $r28 = (float[]) $r27;

        $r29 = (float[]) $r28;

        r0.<ucar.nc2.dt.radial.Dorade2Dataset: float[] lonv> = $r29;

        $r30 = r0.<ucar.nc2.dt.radial.Dorade2Dataset: ucar.nc2.dataset.NetcdfDataset ncd>;

        $r31 = virtualinvoke $r30.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable findVariable(java.lang.String)>("latitudes_1");

        $r32 = virtualinvoke $r31.<ucar.nc2.Variable: ucar.ma2.Array read()>();

        $r33 = <java.lang.Float: java.lang.Class TYPE>;

        $r34 = virtualinvoke $r32.<ucar.ma2.Array: java.lang.Object get1DJavaArray(java.lang.Class)>($r33);

        $r35 = (float[]) $r34;

        $r36 = (float[]) $r35;

        r0.<ucar.nc2.dt.radial.Dorade2Dataset: float[] latv> = $r36;

        $r37 = r0.<ucar.nc2.dt.radial.Dorade2Dataset: ucar.nc2.dataset.NetcdfDataset ncd>;

        $r38 = virtualinvoke $r37.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable findVariable(java.lang.String)>("distance_1");

        $r39 = virtualinvoke $r38.<ucar.nc2.Variable: ucar.ma2.Array read()>();

        $r40 = <java.lang.Float: java.lang.Class TYPE>;

        $r41 = virtualinvoke $r39.<ucar.ma2.Array: java.lang.Object get1DJavaArray(java.lang.Class)>($r40);

        $r42 = (float[]) $r41;

        $r43 = (float[]) $r42;

        r0.<ucar.nc2.dt.radial.Dorade2Dataset: float[] disv> = $r43;

        $r44 = r0.<ucar.nc2.dt.radial.Dorade2Dataset: ucar.nc2.dataset.NetcdfDataset ncd>;

        $r45 = virtualinvoke $r44.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable findVariable(java.lang.String)>("rays_time");

        $r46 = virtualinvoke $r45.<ucar.nc2.Variable: ucar.ma2.Array read()>();

        $r47 = <java.lang.Double: java.lang.Class TYPE>;

        $r48 = virtualinvoke $r46.<ucar.ma2.Array: java.lang.Object get1DJavaArray(java.lang.Class)>($r47);

        $r49 = (double[]) $r48;

        $r50 = (double[]) $r49;

        r0.<ucar.nc2.dt.radial.Dorade2Dataset: double[] timv> = $r50;

        $r51 = r0.<ucar.nc2.dt.radial.Dorade2Dataset: ucar.nc2.dataset.NetcdfDataset ncd>;

        $r52 = virtualinvoke $r51.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable findVariable(java.lang.String)>("Fixed_Angle");

        $f0 = virtualinvoke $r52.<ucar.nc2.Variable: float readScalarFloat()>();

        r0.<ucar.nc2.dt.radial.Dorade2Dataset: float angv> = $f0;

        $r53 = r0.<ucar.nc2.dt.radial.Dorade2Dataset: ucar.nc2.dataset.NetcdfDataset ncd>;

        $r54 = virtualinvoke $r53.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable findVariable(java.lang.String)>("Nyquist_Velocity");

        $f1 = virtualinvoke $r54.<ucar.nc2.Variable: float readScalarFloat()>();

        r0.<ucar.nc2.dt.radial.Dorade2Dataset: float nyqv> = $f1;

        $r55 = r0.<ucar.nc2.dt.radial.Dorade2Dataset: ucar.nc2.dataset.NetcdfDataset ncd>;

        $r56 = virtualinvoke $r55.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable findVariable(java.lang.String)>("Unambiguous_Range");

        $f2 = virtualinvoke $r56.<ucar.nc2.Variable: float readScalarFloat()>();

        r0.<ucar.nc2.dt.radial.Dorade2Dataset: float rangv> = $f2;

        $r57 = r0.<ucar.nc2.dt.radial.Dorade2Dataset: ucar.nc2.dataset.NetcdfDataset ncd>;

        $r58 = virtualinvoke $r57.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable findVariable(java.lang.String)>("Radar_Constant");

        $f3 = virtualinvoke $r58.<ucar.nc2.Variable: float readScalarFloat()>();

        r0.<ucar.nc2.dt.radial.Dorade2Dataset: float contv> = $f3;

        $r59 = r0.<ucar.nc2.dt.radial.Dorade2Dataset: ucar.nc2.dataset.NetcdfDataset ncd>;

        $r60 = virtualinvoke $r59.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable findVariable(java.lang.String)>("rcvr_gain");

        $f4 = virtualinvoke $r60.<ucar.nc2.Variable: float readScalarFloat()>();

        r0.<ucar.nc2.dt.radial.Dorade2Dataset: float rgainv> = $f4;

     label2:
        goto label4;

     label3:
        $r61 := @caughtexception;

        virtualinvoke $r61.<java.io.IOException: void printStackTrace()>();

     label4:
        virtualinvoke r0.<ucar.nc2.dt.radial.Dorade2Dataset: void setStartDate()>();

        virtualinvoke r0.<ucar.nc2.dt.radial.Dorade2Dataset: void setEndDate()>();

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.lang.String getRadarID()
    {
        ucar.nc2.Attribute $r2;
        ucar.nc2.dt.radial.Dorade2Dataset r0;
        java.lang.String $r3;
        ucar.nc2.dataset.NetcdfDataset $r1;

        r0 := @this: ucar.nc2.dt.radial.Dorade2Dataset;

        $r1 = r0.<ucar.nc2.dt.radial.Dorade2Dataset: ucar.nc2.dataset.NetcdfDataset ncd>;

        $r2 = virtualinvoke $r1.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Attribute findGlobalAttribute(java.lang.String)>("radar_name");

        $r3 = virtualinvoke $r2.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

        return $r3;
    }

    public java.lang.String getRadarName()
    {
        ucar.nc2.dt.radial.Dorade2Dataset r0;

        r0 := @this: ucar.nc2.dt.radial.Dorade2Dataset;

        return "Dorade Radar";
    }

    public java.lang.String getDataFormat()
    {
        ucar.nc2.dt.radial.Dorade2Dataset r0;

        r0 := @this: ucar.nc2.dt.radial.Dorade2Dataset;

        return "DORADE";
    }

    public ucar.unidata.geoloc.EarthLocation getCommonOrigin()
    {
        ucar.unidata.geoloc.EarthLocationImpl $r1;
        float[] $r2, $r3, $r4;
        float $f0, $f1, $f2;
        ucar.nc2.dt.radial.Dorade2Dataset r0;
        boolean $z0;
        double $d0, $d1, $d2;

        r0 := @this: ucar.nc2.dt.radial.Dorade2Dataset;

        $z0 = virtualinvoke r0.<ucar.nc2.dt.radial.Dorade2Dataset: boolean isStationary()>();

        if $z0 == 0 goto label1;

        $r1 = new ucar.unidata.geoloc.EarthLocationImpl;

        $r2 = r0.<ucar.nc2.dt.radial.Dorade2Dataset: float[] latv>;

        $f0 = $r2[0];

        $d2 = (double) $f0;

        $r3 = r0.<ucar.nc2.dt.radial.Dorade2Dataset: float[] lonv>;

        $f1 = $r3[0];

        $d1 = (double) $f1;

        $r4 = r0.<ucar.nc2.dt.radial.Dorade2Dataset: float[] elev>;

        $f2 = $r4[0];

        $d0 = (double) $f2;

        specialinvoke $r1.<ucar.unidata.geoloc.EarthLocationImpl: void <init>(double,double,double)>($d2, $d1, $d0);

        return $r1;

     label1:
        return null;
    }

    public boolean isStationary()
    {
        ucar.nc2.Attribute $r2;
        ucar.nc2.dt.radial.Dorade2Dataset r0;
        java.lang.String $r3;
        ucar.nc2.dataset.NetcdfDataset $r1;
        boolean $z0;

        r0 := @this: ucar.nc2.dt.radial.Dorade2Dataset;

        $r1 = r0.<ucar.nc2.dt.radial.Dorade2Dataset: ucar.nc2.dataset.NetcdfDataset ncd>;

        $r2 = virtualinvoke $r1.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Attribute findGlobalAttribute(java.lang.String)>("IsStationary");

        $r3 = virtualinvoke $r2.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("1");

        return $z0;
    }

    public boolean isVolume()
    {
        ucar.nc2.dt.radial.Dorade2Dataset r0;

        r0 := @this: ucar.nc2.dt.radial.Dorade2Dataset;

        return 0;
    }

    protected void setEarthLocation()
    {
        ucar.unidata.geoloc.EarthLocationImpl $r1;
        float[] $r2, $r3, $r4;
        float $f0, $f1, $f2;
        ucar.nc2.dt.radial.Dorade2Dataset r0;
        boolean $z0;
        double $d0, $d1, $d2;

        r0 := @this: ucar.nc2.dt.radial.Dorade2Dataset;

        $z0 = virtualinvoke r0.<ucar.nc2.dt.radial.Dorade2Dataset: boolean isStationary()>();

        if $z0 == 0 goto label1;

        $r1 = new ucar.unidata.geoloc.EarthLocationImpl;

        $r2 = r0.<ucar.nc2.dt.radial.Dorade2Dataset: float[] latv>;

        $f0 = $r2[0];

        $d2 = (double) $f0;

        $r3 = r0.<ucar.nc2.dt.radial.Dorade2Dataset: float[] lonv>;

        $f1 = $r3[0];

        $d1 = (double) $f1;

        $r4 = r0.<ucar.nc2.dt.radial.Dorade2Dataset: float[] elev>;

        $f2 = $r4[0];

        $d0 = (double) $f2;

        specialinvoke $r1.<ucar.unidata.geoloc.EarthLocationImpl: void <init>(double,double,double)>($d2, $d1, $d0);

        r0.<ucar.nc2.dt.radial.Dorade2Dataset: ucar.unidata.geoloc.EarthLocation origin> = $r1;

     label1:
        r0.<ucar.nc2.dt.radial.Dorade2Dataset: ucar.unidata.geoloc.EarthLocation origin> = null;

        return;
    }

    protected void addRadialVariable(ucar.nc2.dataset.NetcdfDataset, ucar.nc2.Variable)
    {
        ucar.nc2.dt.radial.RadialDatasetSweepAdapter$MyRadialVariableAdapter $r4;
        java.util.List $r3, $r5;
        ucar.nc2.dt.RadialDatasetSweep$RadialVariable r7;
        int $i0;
        ucar.nc2.Variable r0;
        java.lang.String $r1;
        ucar.nc2.dt.radial.Dorade2Dataset r2;
        ucar.nc2.dataset.NetcdfDataset r6;

        r2 := @this: ucar.nc2.dt.radial.Dorade2Dataset;

        r6 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r0 := @parameter1: ucar.nc2.Variable;

        r7 = null;

        $r1 = virtualinvoke r0.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $i0 = virtualinvoke r0.<ucar.nc2.Variable: int getRank()>();

        if $i0 != 2 goto label1;

        $r4 = new ucar.nc2.dt.radial.RadialDatasetSweepAdapter$MyRadialVariableAdapter;

        $r5 = virtualinvoke r0.<ucar.nc2.Variable: java.util.List getAttributes()>();

        specialinvoke $r4.<ucar.nc2.dt.radial.RadialDatasetSweepAdapter$MyRadialVariableAdapter: void <init>(ucar.nc2.dt.radial.RadialDatasetSweepAdapter,java.lang.String,java.util.List)>(r2, $r1, $r5);

        r7 = virtualinvoke r2.<ucar.nc2.dt.radial.Dorade2Dataset: ucar.nc2.dt.RadialDatasetSweep$RadialVariable makeRadialVariable(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.VariableSimpleIF,ucar.nc2.Variable)>(r6, $r4, r0);

     label1:
        if r7 == null goto label2;

        $r3 = r2.<ucar.nc2.dt.radial.Dorade2Dataset: java.util.List dataVariables>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r7);

     label2:
        return;
    }

    protected ucar.nc2.dt.RadialDatasetSweep$RadialVariable makeRadialVariable(ucar.nc2.dataset.NetcdfDataset, ucar.nc2.VariableSimpleIF, ucar.nc2.Variable)
    {
        ucar.nc2.VariableSimpleIF r3;
        ucar.nc2.dt.radial.Dorade2Dataset$Dorade2Variable $r0;
        ucar.nc2.Variable r4;
        ucar.nc2.dt.radial.Dorade2Dataset r1;
        ucar.nc2.dataset.NetcdfDataset r2;

        r1 := @this: ucar.nc2.dt.radial.Dorade2Dataset;

        r2 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r3 := @parameter1: ucar.nc2.VariableSimpleIF;

        r4 := @parameter2: ucar.nc2.Variable;

        $r0 = new ucar.nc2.dt.radial.Dorade2Dataset$Dorade2Variable;

        specialinvoke $r0.<ucar.nc2.dt.radial.Dorade2Dataset$Dorade2Variable: void <init>(ucar.nc2.dt.radial.Dorade2Dataset,ucar.nc2.dataset.NetcdfDataset,ucar.nc2.VariableSimpleIF,ucar.nc2.Variable,ucar.nc2.dt.radial.Dorade2Dataset$1)>(r1, r2, r3, r4, null);

        return $r0;
    }

    public java.util.List getDataVariables()
    {
        java.util.List $r1;
        ucar.nc2.dt.radial.Dorade2Dataset r0;

        r0 := @this: ucar.nc2.dt.radial.Dorade2Dataset;

        $r1 = r0.<ucar.nc2.dt.radial.Dorade2Dataset: java.util.List dataVariables>;

        return $r1;
    }

    protected void setStartDate()
    {
        java.util.Date $r0;
        java.lang.StringBuffer $r4;
        double[] $r2;
        long $l0;
        ucar.nc2.dt.radial.Dorade2Dataset r1;
        java.lang.String $r3;
        double $d0;

        r1 := @this: ucar.nc2.dt.radial.Dorade2Dataset;

        $r0 = new java.util.Date;

        $r2 = r1.<ucar.nc2.dt.radial.Dorade2Dataset: double[] timv>;

        $d0 = $r2[0];

        $l0 = (long) $d0;

        specialinvoke $r0.<java.util.Date: void <init>(long)>($l0);

        $r3 = virtualinvoke $r0.<java.util.Date: java.lang.String toString()>();

        if $r3 == null goto label1;

        r1.<ucar.nc2.dt.radial.Dorade2Dataset: java.util.Date startDate> = $r0;

        goto label2;

     label1:
        $r4 = r1.<ucar.nc2.dt.radial.Dorade2Dataset: java.lang.StringBuffer parseInfo>;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("*** start_datetime not Found\n");

     label2:
        return;
    }

    protected void setEndDate()
    {
        java.util.Date $r0;
        double[] $r2, $r3;
        long $l2;
        java.lang.StringBuffer $r5;
        int $i0, $i1;
        ucar.nc2.dt.radial.Dorade2Dataset r1;
        java.lang.String $r4;
        double $d0;

        r1 := @this: ucar.nc2.dt.radial.Dorade2Dataset;

        $r0 = new java.util.Date;

        $r3 = r1.<ucar.nc2.dt.radial.Dorade2Dataset: double[] timv>;

        $r2 = r1.<ucar.nc2.dt.radial.Dorade2Dataset: double[] timv>;

        $i0 = lengthof $r2;

        $i1 = $i0 - 1;

        $d0 = $r3[$i1];

        $l2 = (long) $d0;

        specialinvoke $r0.<java.util.Date: void <init>(long)>($l2);

        $r4 = virtualinvoke $r0.<java.util.Date: java.lang.String toString()>();

        if $r4 == null goto label1;

        r1.<ucar.nc2.dt.radial.Dorade2Dataset: java.util.Date endDate> = $r0;

        goto label2;

     label1:
        $r5 = r1.<ucar.nc2.dt.radial.Dorade2Dataset: java.lang.StringBuffer parseInfo>;

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("*** end_datetime not Found\n");

     label2:
        return;
    }

    protected void setTimeUnits() throws java.lang.Exception
    {
        ucar.nc2.units.DateUnit $r9;
        ucar.nc2.dataset.CoordinateAxis r5;
        java.util.List $r2;
        java.lang.StringBuffer $r3;
        ucar.nc2.constants.AxisType $r6, $r7;
        int $i0, i1;
        java.lang.Object $r4;
        ucar.nc2.dt.radial.Dorade2Dataset r0;
        java.lang.String $r8;
        ucar.nc2.dataset.NetcdfDataset $r1;

        r0 := @this: ucar.nc2.dt.radial.Dorade2Dataset;

        $r1 = r0.<ucar.nc2.dt.radial.Dorade2Dataset: ucar.nc2.dataset.NetcdfDataset ncd>;

        $r2 = virtualinvoke $r1.<ucar.nc2.dataset.NetcdfDataset: java.util.List getCoordinateAxes()>();

        i1 = 0;

     label1:
        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i1 >= $i0 goto label3;

        $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i1);

        r5 = (ucar.nc2.dataset.CoordinateAxis) $r4;

        $r6 = virtualinvoke r5.<ucar.nc2.dataset.CoordinateAxis: ucar.nc2.constants.AxisType getAxisType()>();

        $r7 = <ucar.nc2.constants.AxisType: ucar.nc2.constants.AxisType Time>;

        if $r6 != $r7 goto label2;

        $r8 = virtualinvoke r5.<ucar.nc2.dataset.CoordinateAxis: java.lang.String getUnitsString()>();

        $r9 = new ucar.nc2.units.DateUnit;

        specialinvoke $r9.<ucar.nc2.units.DateUnit: void <init>(java.lang.String)>($r8);

        r0.<ucar.nc2.dt.radial.Dorade2Dataset: ucar.nc2.units.DateUnit dateUnits> = $r9;

        return;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r3 = r0.<ucar.nc2.dt.radial.Dorade2Dataset: java.lang.StringBuffer parseInfo>;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("*** Time Units not Found\n");

        return;
    }

    public java.util.List getAttributes()
    {
        java.util.List $r3;
        ucar.nc2.dt.radial.Dorade2Dataset r0;
        ucar.nc2.dataset.NetcdfDataset $r1;
        ucar.nc2.Group $r2;

        r0 := @this: ucar.nc2.dt.radial.Dorade2Dataset;

        $r1 = r0.<ucar.nc2.dt.radial.Dorade2Dataset: ucar.nc2.dataset.NetcdfDataset ncd>;

        $r2 = virtualinvoke $r1.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Group getRootGroup()>();

        $r3 = virtualinvoke $r2.<ucar.nc2.Group: java.util.List getAttributes()>();

        return $r3;
    }

    public ucar.nc2.units.DateUnit getTimeUnits()
    {
        ucar.nc2.units.DateUnit $r1;
        ucar.nc2.dt.radial.Dorade2Dataset r0;

        r0 := @this: ucar.nc2.dt.radial.Dorade2Dataset;

        $r1 = r0.<ucar.nc2.dt.radial.Dorade2Dataset: ucar.nc2.units.DateUnit dateUnits>;

        return $r1;
    }

    public void getTimeUnits(ucar.nc2.units.DateUnit)
    {
        ucar.nc2.units.DateUnit r1;
        ucar.nc2.dt.radial.Dorade2Dataset r0;

        r0 := @this: ucar.nc2.dt.radial.Dorade2Dataset;

        r1 := @parameter0: ucar.nc2.units.DateUnit;

        r0.<ucar.nc2.dt.radial.Dorade2Dataset: ucar.nc2.units.DateUnit dateUnits> = r1;

        return;
    }

    public void clearDatasetMemory()
    {
        java.util.List $r1;
        java.util.Iterator $r2;
        ucar.nc2.dt.RadialDatasetSweep$RadialVariable r4;
        java.lang.Object $r3;
        ucar.nc2.dt.radial.Dorade2Dataset r0;
        boolean $z0;

        r0 := @this: ucar.nc2.dt.radial.Dorade2Dataset;

        $r1 = virtualinvoke r0.<ucar.nc2.dt.radial.Dorade2Dataset: java.util.List getDataVariables()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (ucar.nc2.dt.RadialDatasetSweep$RadialVariable) $r3;

        interfaceinvoke r4.<ucar.nc2.dt.RadialDatasetSweep$RadialVariable: void clearVariableMemory()>();

        goto label1;

     label2:
        return;
    }

    private static void testRadialVariable(ucar.nc2.dt.RadialDatasetSweep$RadialVariable) throws java.io.IOException
    {
        ucar.nc2.dt.RadialDatasetSweep$Sweep $r1;
        java.util.Date $r2;
        long $l2;
        ucar.nc2.dt.RadialDatasetSweep$RadialVariable r0;
        ucar.unidata.geoloc.EarthLocation $r3, $r4, $r5;
        int $i0, $i1, i3;
        float $f0;
        double d0;

        r0 := @parameter0: ucar.nc2.dt.RadialDatasetSweep$RadialVariable;

        $i0 = interfaceinvoke r0.<ucar.nc2.dt.RadialDatasetSweep$RadialVariable: int getNumSweeps()>();

        if $i0 == 1 goto label1;

     label1:
        $r1 = interfaceinvoke r0.<ucar.nc2.dt.RadialDatasetSweep$RadialVariable: ucar.nc2.dt.RadialDatasetSweep$Sweep getSweep(int)>(0);

        $i1 = interfaceinvoke $r1.<ucar.nc2.dt.RadialDatasetSweep$Sweep: int getRadialNumber()>();

        interfaceinvoke $r1.<ucar.nc2.dt.RadialDatasetSweep$Sweep: float[] readData()>();

        i3 = 0;

     label2:
        if i3 >= $i1 goto label3;

        interfaceinvoke $r1.<ucar.nc2.dt.RadialDatasetSweep$Sweep: int getGateNumber()>();

        interfaceinvoke $r1.<ucar.nc2.dt.RadialDatasetSweep$Sweep: float[] readData(int)>(i3);

        interfaceinvoke $r1.<ucar.nc2.dt.RadialDatasetSweep$Sweep: float getAzimuth(int)>(i3);

        interfaceinvoke $r1.<ucar.nc2.dt.RadialDatasetSweep$Sweep: float getElevation(int)>(i3);

        $f0 = interfaceinvoke $r1.<ucar.nc2.dt.RadialDatasetSweep$Sweep: float getTime(int)>(i3);

        d0 = (double) $f0;

        $r2 = new java.util.Date;

        $l2 = (long) d0;

        specialinvoke $r2.<java.util.Date: void <init>(long)>($l2);

        virtualinvoke $r2.<java.util.Date: java.lang.String toString()>();

        interfaceinvoke $r1.<ucar.nc2.dt.RadialDatasetSweep$Sweep: float getRangeToFirstGate()>();

        interfaceinvoke $r1.<ucar.nc2.dt.RadialDatasetSweep$Sweep: float getBeamWidth()>();

        interfaceinvoke $r1.<ucar.nc2.dt.RadialDatasetSweep$Sweep: float getGateSize()>();

        $r3 = interfaceinvoke $r1.<ucar.nc2.dt.RadialDatasetSweep$Sweep: ucar.unidata.geoloc.EarthLocation getOrigin(int)>(i3);

        interfaceinvoke $r3.<ucar.unidata.geoloc.EarthLocation: double getLatitude()>();

        $r4 = interfaceinvoke $r1.<ucar.nc2.dt.RadialDatasetSweep$Sweep: ucar.unidata.geoloc.EarthLocation getOrigin(int)>(i3);

        interfaceinvoke $r4.<ucar.unidata.geoloc.EarthLocation: double getLongitude()>();

        $r5 = interfaceinvoke $r1.<ucar.nc2.dt.RadialDatasetSweep$Sweep: ucar.unidata.geoloc.EarthLocation getOrigin(int)>(i3);

        interfaceinvoke $r5.<ucar.unidata.geoloc.EarthLocation: double getAltitude()>();

        i3 = i3 + 1;

        goto label2;

     label3:
        return;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception, java.io.IOException, java.lang.InstantiationException, java.lang.IllegalAccessException
    {
        ucar.nc2.dt.RadialDatasetSweep r3;
        java.util.Date $r4, $r5;
        java.lang.String[] r12;
        ucar.nc2.dt.TypedDataset $r2;
        ucar.nc2.dt.RadialDatasetSweep$RadialVariable r9, $r11;
        int i0, $i1;
        ucar.nc2.constants.FeatureType $r1;
        boolean $z0;
        java.io.PrintStream $r10;
        java.util.List $r6;
        ucar.nc2.VariableSimpleIF $r7;
        java.lang.StringBuilder $r0;
        java.lang.Object $r8;

        r12 := @parameter0: java.lang.String[];

        $r1 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType RADIAL>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = staticinvoke <ucar.nc2.dt.TypedDatasetFactory: ucar.nc2.dt.TypedDataset open(ucar.nc2.constants.FeatureType,java.lang.String,ucar.nc2.util.CancelTask,java.lang.StringBuilder)>($r1, "/home/yuanho/dorade/swp.1020511015815.SP0L.573.1.2_SUR_v1", null, $r0);

        r3 = (ucar.nc2.dt.RadialDatasetSweep) $r2;

        $r4 = interfaceinvoke r3.<ucar.nc2.dt.RadialDatasetSweep: java.util.Date getStartDate()>();

        virtualinvoke $r4.<java.util.Date: java.lang.String toString()>();

        $r5 = interfaceinvoke r3.<ucar.nc2.dt.RadialDatasetSweep: java.util.Date getEndDate()>();

        virtualinvoke $r5.<java.util.Date: java.lang.String toString()>();

        $z0 = interfaceinvoke r3.<ucar.nc2.dt.RadialDatasetSweep: boolean isStationary()>();

        if $z0 == 0 goto label1;

        $r10 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("*** radar is stationary\n");

     label1:
        $r6 = interfaceinvoke r3.<ucar.nc2.dt.RadialDatasetSweep: java.util.List getDataVariables()>();

        $r7 = interfaceinvoke r3.<ucar.nc2.dt.RadialDatasetSweep: ucar.nc2.VariableSimpleIF getDataVariable(java.lang.String)>("DM");

        $r11 = (ucar.nc2.dt.RadialDatasetSweep$RadialVariable) $r7;

        staticinvoke <ucar.nc2.dt.radial.Dorade2Dataset: void testRadialVariable(ucar.nc2.dt.RadialDatasetSweep$RadialVariable)>($r11);

        i0 = 0;

     label2:
        $i1 = interfaceinvoke $r6.<java.util.List: int size()>();

        if i0 >= $i1 goto label3;

        $r8 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(i0);

        r9 = (ucar.nc2.dt.RadialDatasetSweep$RadialVariable) $r8;

        staticinvoke <ucar.nc2.dt.radial.Dorade2Dataset: void testRadialVariable(ucar.nc2.dt.RadialDatasetSweep$RadialVariable)>(r9);

        i0 = i0 + 1;

        goto label2;

     label3:
        return;
    }

    static ucar.nc2.dataset.NetcdfDataset access$100(ucar.nc2.dt.radial.Dorade2Dataset)
    {
        ucar.nc2.dt.radial.Dorade2Dataset r0;
        ucar.nc2.dataset.NetcdfDataset $r1;

        r0 := @parameter0: ucar.nc2.dt.radial.Dorade2Dataset;

        $r1 = r0.<ucar.nc2.dt.radial.Dorade2Dataset: ucar.nc2.dataset.NetcdfDataset ncd>;

        return $r1;
    }

    static java.util.Date access$200(ucar.nc2.dt.radial.Dorade2Dataset)
    {
        ucar.nc2.dt.radial.Dorade2Dataset r0;
        java.util.Date $r1;

        r0 := @parameter0: ucar.nc2.dt.radial.Dorade2Dataset;

        $r1 = r0.<ucar.nc2.dt.radial.Dorade2Dataset: java.util.Date startDate>;

        return $r1;
    }

    static java.util.Date access$300(ucar.nc2.dt.radial.Dorade2Dataset)
    {
        ucar.nc2.dt.radial.Dorade2Dataset r0;
        java.util.Date $r1;

        r0 := @parameter0: ucar.nc2.dt.radial.Dorade2Dataset;

        $r1 = r0.<ucar.nc2.dt.radial.Dorade2Dataset: java.util.Date endDate>;

        return $r1;
    }
}
