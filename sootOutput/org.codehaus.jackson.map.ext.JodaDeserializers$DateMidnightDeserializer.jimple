public class org.codehaus.jackson.map.ext.JodaDeserializers$DateMidnightDeserializer extends org.codehaus.jackson.map.ext.JodaDeserializers$JodaDeserializer
{

    public void <init>()
    {
        org.codehaus.jackson.map.ext.JodaDeserializers$DateMidnightDeserializer r0;

        r0 := @this: org.codehaus.jackson.map.ext.JodaDeserializers$DateMidnightDeserializer;

        specialinvoke r0.<org.codehaus.jackson.map.ext.JodaDeserializers$JodaDeserializer: void <init>(java.lang.Class)>(class "Lorg/joda/time/DateMidnight;");

        return;
    }

    public org.joda.time.DateMidnight deserialize(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.JsonToken $r2, $r8, $r10, $r11, $r13;
        long $l2;
        org.codehaus.jackson.map.DeserializationContext r7;
        org.codehaus.jackson.map.JsonMappingException $r9, $r14;
        int[] $r1;
        int $i0, $i1, $i3, $i4, $i5;
        org.codehaus.jackson.map.ext.JodaDeserializers$DateMidnightDeserializer r3;
        org.codehaus.jackson.JsonParser r0;
        boolean $z0;
        org.joda.time.DateTime $r4;
        org.joda.time.DateMidnight $r5, $r6, $r12;

        r3 := @this: org.codehaus.jackson.map.ext.JodaDeserializers$DateMidnightDeserializer;

        r0 := @parameter0: org.codehaus.jackson.JsonParser;

        r7 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: boolean isExpectedStartArrayToken()>();

        if $z0 == 0 goto label2;

        virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        $i3 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: int getIntValue()>();

        virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        $i4 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: int getIntValue()>();

        virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        $i5 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: int getIntValue()>();

        $r10 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        $r11 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_ARRAY>;

        if $r10 == $r11 goto label1;

        $r13 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_ARRAY>;

        $r14 = virtualinvoke r7.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException wrongTokenException(org.codehaus.jackson.JsonParser,org.codehaus.jackson.JsonToken,java.lang.String)>(r0, $r13, "after DateMidnight ints");

        throw $r14;

     label1:
        $r12 = new org.joda.time.DateMidnight;

        specialinvoke $r12.<org.joda.time.DateMidnight: void <init>(int,int,int)>($i3, $i4, $i5);

        return $r12;

     label2:
        $r1 = <org.codehaus.jackson.map.ext.JodaDeserializers$1: int[] $SwitchMap$org$codehaus$jackson$JsonToken>;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $i0 = virtualinvoke $r2.<org.codehaus.jackson.JsonToken: int ordinal()>();

        $i1 = $r1[$i0];

        lookupswitch($i1)
        {
            case 1: goto label3;
            case 2: goto label4;
            default: goto label6;
        };

     label3:
        $r6 = new org.joda.time.DateMidnight;

        $l2 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: long getLongValue()>();

        specialinvoke $r6.<org.joda.time.DateMidnight: void <init>(long)>($l2);

        return $r6;

     label4:
        $r4 = virtualinvoke r3.<org.codehaus.jackson.map.ext.JodaDeserializers$DateMidnightDeserializer: org.joda.time.DateTime parseLocal(org.codehaus.jackson.JsonParser)>(r0);

        if $r4 != null goto label5;

        return null;

     label5:
        $r5 = virtualinvoke $r4.<org.joda.time.DateTime: org.joda.time.DateMidnight toDateMidnight()>();

        return $r5;

     label6:
        $r8 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_ARRAY>;

        $r9 = virtualinvoke r7.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException wrongTokenException(org.codehaus.jackson.JsonParser,org.codehaus.jackson.JsonToken,java.lang.String)>(r0, $r8, "expected JSON Array, Number or String");

        throw $r9;
    }

    public volatile java.lang.Object deserialize(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.joda.time.DateMidnight $r3;
        org.codehaus.jackson.map.ext.JodaDeserializers$DateMidnightDeserializer r0;
        org.codehaus.jackson.JsonParser r1;
        org.codehaus.jackson.map.DeserializationContext r2;

        r0 := @this: org.codehaus.jackson.map.ext.JodaDeserializers$DateMidnightDeserializer;

        r1 := @parameter0: org.codehaus.jackson.JsonParser;

        r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.ext.JodaDeserializers$DateMidnightDeserializer: org.joda.time.DateMidnight deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>(r1, r2);

        return $r3;
    }
}
