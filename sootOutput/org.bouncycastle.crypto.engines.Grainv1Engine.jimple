public class org.bouncycastle.crypto.engines.Grainv1Engine extends java.lang.Object implements org.bouncycastle.crypto.StreamCipher
{
    private static final int STATE_SIZE;
    private byte[] workingKey;
    private byte[] workingIV;
    private byte[] out;
    private int[] lfsr;
    private int[] nfsr;
    private int output;
    private int index;
    private boolean initialised;

    public void <init>()
    {
        org.bouncycastle.crypto.engines.Grainv1Engine r0;

        r0 := @this: org.bouncycastle.crypto.engines.Grainv1Engine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int index> = 2;

        r0.<org.bouncycastle.crypto.engines.Grainv1Engine: boolean initialised> = 0;

        return;
    }

    public java.lang.String getAlgorithmName()
    {
        org.bouncycastle.crypto.engines.Grainv1Engine r0;

        r0 := @this: org.bouncycastle.crypto.engines.Grainv1Engine;

        return "Grain v1";
    }

    public void init(boolean, org.bouncycastle.crypto.CipherParameters) throws java.lang.IllegalArgumentException
    {
        byte[] $r2, $r8, $r9, $r10, $r11, $r14, $r15, $r16, $r17, $r18, $r19, $r20;
        org.bouncycastle.crypto.params.ParametersWithIV r1;
        org.bouncycastle.crypto.engines.Grainv1Engine r7;
        int[] $r12, $r13;
        int $i0, $i1, $i2, $i3, $i4;
        org.bouncycastle.crypto.params.KeyParameter r6;
        org.bouncycastle.crypto.CipherParameters r0, $r4, $r5;
        boolean $z0, $z1, z2;
        java.lang.IllegalArgumentException $r3, $r21, $r22;

        r7 := @this: org.bouncycastle.crypto.engines.Grainv1Engine;

        z2 := @parameter0: boolean;

        r0 := @parameter1: org.bouncycastle.crypto.CipherParameters;

        $z0 = r0 instanceof org.bouncycastle.crypto.params.ParametersWithIV;

        if $z0 != 0 goto label1;

        $r22 = new java.lang.IllegalArgumentException;

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Grain v1 Init parameters must include an IV");

        throw $r22;

     label1:
        r1 = (org.bouncycastle.crypto.params.ParametersWithIV) r0;

        $r2 = virtualinvoke r1.<org.bouncycastle.crypto.params.ParametersWithIV: byte[] getIV()>();

        if $r2 == null goto label2;

        $i0 = lengthof $r2;

        if $i0 == 8 goto label3;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Grain v1 requires exactly 8 bytes of IV");

        throw $r3;

     label3:
        $r4 = virtualinvoke r1.<org.bouncycastle.crypto.params.ParametersWithIV: org.bouncycastle.crypto.CipherParameters getParameters()>();

        $z1 = $r4 instanceof org.bouncycastle.crypto.params.KeyParameter;

        if $z1 != 0 goto label4;

        $r21 = new java.lang.IllegalArgumentException;

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Grain v1 Init parameters must include a key");

        throw $r21;

     label4:
        $r5 = virtualinvoke r1.<org.bouncycastle.crypto.params.ParametersWithIV: org.bouncycastle.crypto.CipherParameters getParameters()>();

        r6 = (org.bouncycastle.crypto.params.KeyParameter) $r5;

        $r8 = virtualinvoke r6.<org.bouncycastle.crypto.params.KeyParameter: byte[] getKey()>();

        $i1 = lengthof $r8;

        $r9 = newarray (byte)[$i1];

        r7.<org.bouncycastle.crypto.engines.Grainv1Engine: byte[] workingIV> = $r9;

        $r10 = virtualinvoke r6.<org.bouncycastle.crypto.params.KeyParameter: byte[] getKey()>();

        $i2 = lengthof $r10;

        $r11 = newarray (byte)[$i2];

        r7.<org.bouncycastle.crypto.engines.Grainv1Engine: byte[] workingKey> = $r11;

        $r12 = newarray (int)[5];

        r7.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] lfsr> = $r12;

        $r13 = newarray (int)[5];

        r7.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] nfsr> = $r13;

        $r14 = newarray (byte)[2];

        r7.<org.bouncycastle.crypto.engines.Grainv1Engine: byte[] out> = $r14;

        $r15 = r7.<org.bouncycastle.crypto.engines.Grainv1Engine: byte[] workingIV>;

        $i3 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r15, 0, $i3);

        $r16 = virtualinvoke r6.<org.bouncycastle.crypto.params.KeyParameter: byte[] getKey()>();

        $r17 = r7.<org.bouncycastle.crypto.engines.Grainv1Engine: byte[] workingKey>;

        $r18 = virtualinvoke r6.<org.bouncycastle.crypto.params.KeyParameter: byte[] getKey()>();

        $i4 = lengthof $r18;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r16, 0, $r17, 0, $i4);

        $r20 = r7.<org.bouncycastle.crypto.engines.Grainv1Engine: byte[] workingKey>;

        $r19 = r7.<org.bouncycastle.crypto.engines.Grainv1Engine: byte[] workingIV>;

        specialinvoke r7.<org.bouncycastle.crypto.engines.Grainv1Engine: void setKey(byte[],byte[])>($r20, $r19);

        specialinvoke r7.<org.bouncycastle.crypto.engines.Grainv1Engine: void initGrain()>();

        return;
    }

    private void initGrain()
    {
        org.bouncycastle.crypto.engines.Grainv1Engine r0;
        int[] $r1, $r2, $r3, $r4, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;

        r0 := @this: org.bouncycastle.crypto.engines.Grainv1Engine;

        i9 = 0;

     label1:
        if i9 >= 10 goto label2;

        $i0 = specialinvoke r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int getOutput()>();

        r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int output> = $i0;

        $r1 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        $i1 = specialinvoke r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int getOutputNFSR()>();

        $r2 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] lfsr>;

        $i2 = $r2[0];

        $i4 = $i1 ^ $i2;

        $i3 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int output>;

        $i5 = $i4 ^ $i3;

        $r3 = specialinvoke r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] shift(int[],int)>($r1, $i5);

        r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] nfsr> = $r3;

        $r4 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] lfsr>;

        $i6 = specialinvoke r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int getOutputLFSR()>();

        $i7 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int output>;

        $i8 = $i6 ^ $i7;

        $r5 = specialinvoke r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] shift(int[],int)>($r4, $i8);

        r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] lfsr> = $r5;

        i9 = i9 + 1;

        goto label1;

     label2:
        r0.<org.bouncycastle.crypto.engines.Grainv1Engine: boolean initialised> = 1;

        return;
    }

    private int getOutputNFSR()
    {
        int[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25;
        int i0, $i1, $i2, $i3, $i4, i5, $i6, $i7, $i8, $i9, i10, $i11, $i12, $i13, $i14, i15, $i16, $i17, $i18, $i19, i20, $i21, $i22, $i23, $i24, i25, $i26, $i27, $i28, $i29, i30, $i31, $i32, $i33, $i34, i35, $i36, $i37, $i38, $i39, i40, $i41, $i42, $i43, $i44, i45, $i46, $i47, $i48, $i49, i50, $i51, $i52, $i53, $i54, i55, $i56, $i57, $i58, $i59, i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i113;
        org.bouncycastle.crypto.engines.Grainv1Engine r0;

        r0 := @this: org.bouncycastle.crypto.engines.Grainv1Engine;

        $r1 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        i0 = $r1[0];

        $r2 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        $i1 = $r2[0];

        $i4 = $i1 >>> 9;

        $r3 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        $i2 = $r3[1];

        $i3 = $i2 << 7;

        i5 = $i4 | $i3;

        $r4 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        $i6 = $r4[0];

        $i9 = $i6 >>> 14;

        $r5 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        $i7 = $r5[1];

        $i8 = $i7 << 2;

        i10 = $i9 | $i8;

        $r6 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        $i11 = $r6[0];

        $i14 = $i11 >>> 15;

        $r7 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        $i12 = $r7[1];

        $i13 = $i12 << 1;

        i15 = $i14 | $i13;

        $r8 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        $i16 = $r8[1];

        $i19 = $i16 >>> 5;

        $r9 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        $i17 = $r9[2];

        $i18 = $i17 << 11;

        i20 = $i19 | $i18;

        $r10 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        $i21 = $r10[1];

        $i24 = $i21 >>> 12;

        $r11 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        $i22 = $r11[2];

        $i23 = $i22 << 4;

        i25 = $i24 | $i23;

        $r12 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        $i26 = $r12[2];

        $i29 = $i26 >>> 1;

        $r13 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        $i27 = $r13[3];

        $i28 = $i27 << 15;

        i30 = $i29 | $i28;

        $r14 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        $i31 = $r14[2];

        $i34 = $i31 >>> 5;

        $r15 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        $i32 = $r15[3];

        $i33 = $i32 << 11;

        i35 = $i34 | $i33;

        $r16 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        $i36 = $r16[2];

        $i39 = $i36 >>> 13;

        $r17 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        $i37 = $r17[3];

        $i38 = $i37 << 3;

        i40 = $i39 | $i38;

        $r18 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        $i41 = $r18[3];

        $i44 = $i41 >>> 4;

        $r19 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        $i42 = $r19[4];

        $i43 = $i42 << 12;

        i45 = $i44 | $i43;

        $r20 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        $i46 = $r20[3];

        $i49 = $i46 >>> 12;

        $r21 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        $i47 = $r21[4];

        $i48 = $i47 << 4;

        i50 = $i49 | $i48;

        $r22 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        $i51 = $r22[3];

        $i54 = $i51 >>> 14;

        $r23 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        $i52 = $r23[4];

        $i53 = $i52 << 2;

        i55 = $i54 | $i53;

        $r24 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        $i56 = $r24[3];

        $i59 = $i56 >>> 15;

        $r25 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        $i57 = $r25[4];

        $i58 = $i57 << 1;

        i60 = $i59 | $i58;

        $i61 = i55 ^ i50;

        $i62 = $i61 ^ i45;

        $i63 = $i62 ^ i40;

        $i64 = $i63 ^ i35;

        $i65 = $i64 ^ i30;

        $i66 = $i65 ^ i25;

        $i67 = $i66 ^ i20;

        $i68 = $i67 ^ i10;

        $i69 = $i68 ^ i5;

        $i71 = $i69 ^ i0;

        $i70 = i60 & i50;

        $i73 = $i71 ^ $i70;

        $i72 = i35 & i30;

        $i75 = $i73 ^ $i72;

        $i74 = i15 & i5;

        $i78 = $i75 ^ $i74;

        $i76 = i50 & i45;

        $i77 = $i76 & i40;

        $i81 = $i78 ^ $i77;

        $i79 = i30 & i25;

        $i80 = $i79 & i20;

        $i85 = $i81 ^ $i80;

        $i82 = i60 & i40;

        $i83 = $i82 & i25;

        $i84 = $i83 & i5;

        $i89 = $i85 ^ $i84;

        $i86 = i50 & i45;

        $i87 = $i86 & i35;

        $i88 = $i87 & i30;

        $i93 = $i89 ^ $i88;

        $i90 = i60 & i50;

        $i91 = $i90 & i20;

        $i92 = $i91 & i15;

        $i98 = $i93 ^ $i92;

        $i94 = i60 & i50;

        $i95 = $i94 & i45;

        $i96 = $i95 & i40;

        $i97 = $i96 & i35;

        $i103 = $i98 ^ $i97;

        $i99 = i30 & i25;

        $i100 = $i99 & i20;

        $i101 = $i100 & i15;

        $i102 = $i101 & i5;

        $i109 = $i103 ^ $i102;

        $i104 = i45 & i40;

        $i105 = $i104 & i35;

        $i106 = $i105 & i30;

        $i107 = $i106 & i25;

        $i108 = $i107 & i20;

        $i110 = $i109 ^ $i108;

        $i113 = (int) 65535;

        $i111 = $i110 & $i113;

        return $i111;
    }

    private int getOutputLFSR()
    {
        int[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        org.bouncycastle.crypto.engines.Grainv1Engine r0;
        int i0, $i1, $i2, $i3, $i4, i5, $i6, $i7, $i8, $i9, i10, $i11, $i12, $i13, $i14, i15, $i16, $i17, $i18, $i19, i20, $i21, $i22, $i23, $i24, i25, $i26, $i27, $i28, $i29, $i30, $i31, $i33;

        r0 := @this: org.bouncycastle.crypto.engines.Grainv1Engine;

        $r1 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] lfsr>;

        i0 = $r1[0];

        $r2 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] lfsr>;

        $i1 = $r2[0];

        $i4 = $i1 >>> 13;

        $r3 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] lfsr>;

        $i2 = $r3[1];

        $i3 = $i2 << 3;

        i5 = $i4 | $i3;

        $r4 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] lfsr>;

        $i6 = $r4[1];

        $i9 = $i6 >>> 7;

        $r5 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] lfsr>;

        $i7 = $r5[2];

        $i8 = $i7 << 9;

        i10 = $i9 | $i8;

        $r6 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] lfsr>;

        $i11 = $r6[2];

        $i14 = $i11 >>> 6;

        $r7 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] lfsr>;

        $i12 = $r7[3];

        $i13 = $i12 << 10;

        i15 = $i14 | $i13;

        $r8 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] lfsr>;

        $i16 = $r8[3];

        $i19 = $i16 >>> 3;

        $r9 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] lfsr>;

        $i17 = $r9[4];

        $i18 = $i17 << 13;

        i20 = $i19 | $i18;

        $r10 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] lfsr>;

        $i21 = $r10[3];

        $i24 = $i21 >>> 14;

        $r11 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] lfsr>;

        $i22 = $r11[4];

        $i23 = $i22 << 2;

        i25 = $i24 | $i23;

        $i26 = i0 ^ i5;

        $i27 = $i26 ^ i10;

        $i28 = $i27 ^ i15;

        $i29 = $i28 ^ i20;

        $i30 = $i29 ^ i25;

        $i33 = (int) 65535;

        $i31 = $i30 & $i33;

        return $i31;
    }

    private int getOutput()
    {
        int[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23;
        org.bouncycastle.crypto.engines.Grainv1Engine r0;
        int $i0, $i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, i9, $i10, $i11, $i12, $i13, i14, $i15, $i16, $i17, $i18, i19, $i20, $i21, $i22, $i23, i24, $i25, $i26, $i27, $i28, i29, $i30, $i31, $i32, $i33, i34, $i35, $i36, $i37, $i38, i39, $i40, $i41, $i42, $i43, i44, $i45, $i46, $i47, $i48, i49, $i50, $i51, $i52, $i53, i54, i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i87;

        r0 := @this: org.bouncycastle.crypto.engines.Grainv1Engine;

        $r1 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        $i0 = $r1[0];

        $i3 = $i0 >>> 1;

        $r2 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        $i1 = $r2[1];

        $i2 = $i1 << 15;

        i4 = $i3 | $i2;

        $r3 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        $i5 = $r3[0];

        $i8 = $i5 >>> 2;

        $r4 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        $i6 = $r4[1];

        $i7 = $i6 << 14;

        i9 = $i8 | $i7;

        $r5 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        $i10 = $r5[0];

        $i13 = $i10 >>> 4;

        $r6 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        $i11 = $r6[1];

        $i12 = $i11 << 12;

        i14 = $i13 | $i12;

        $r7 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        $i15 = $r7[0];

        $i18 = $i15 >>> 10;

        $r8 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        $i16 = $r8[1];

        $i17 = $i16 << 6;

        i19 = $i18 | $i17;

        $r9 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        $i20 = $r9[1];

        $i23 = $i20 >>> 15;

        $r10 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        $i21 = $r10[2];

        $i22 = $i21 << 1;

        i24 = $i23 | $i22;

        $r11 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        $i25 = $r11[2];

        $i28 = $i25 >>> 11;

        $r12 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        $i26 = $r12[3];

        $i27 = $i26 << 5;

        i29 = $i28 | $i27;

        $r13 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        $i30 = $r13[3];

        $i33 = $i30 >>> 8;

        $r14 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        $i31 = $r14[4];

        $i32 = $i31 << 8;

        i34 = $i33 | $i32;

        $r15 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        $i35 = $r15[3];

        $i38 = $i35 >>> 15;

        $r16 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        $i36 = $r16[4];

        $i37 = $i36 << 1;

        i39 = $i38 | $i37;

        $r17 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] lfsr>;

        $i40 = $r17[0];

        $i43 = $i40 >>> 3;

        $r18 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] lfsr>;

        $i41 = $r18[1];

        $i42 = $i41 << 13;

        i44 = $i43 | $i42;

        $r19 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] lfsr>;

        $i45 = $r19[1];

        $i48 = $i45 >>> 9;

        $r20 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] lfsr>;

        $i46 = $r20[2];

        $i47 = $i46 << 7;

        i49 = $i48 | $i47;

        $r21 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] lfsr>;

        $i50 = $r21[2];

        $i53 = $i50 >>> 14;

        $r22 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] lfsr>;

        $i51 = $r22[3];

        $i52 = $i51 << 2;

        i54 = $i53 | $i52;

        $r23 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] lfsr>;

        i55 = $r23[4];

        $i57 = i49 ^ i39;

        $i56 = i44 & i55;

        $i59 = $i57 ^ $i56;

        $i58 = i54 & i55;

        $i61 = $i59 ^ $i58;

        $i60 = i55 & i39;

        $i64 = $i61 ^ $i60;

        $i62 = i44 & i49;

        $i63 = $i62 & i54;

        $i67 = $i64 ^ $i63;

        $i65 = i44 & i54;

        $i66 = $i65 & i55;

        $i70 = $i67 ^ $i66;

        $i68 = i44 & i54;

        $i69 = $i68 & i39;

        $i73 = $i70 ^ $i69;

        $i71 = i49 & i54;

        $i72 = $i71 & i39;

        $i76 = $i73 ^ $i72;

        $i74 = i54 & i55;

        $i75 = $i74 & i39;

        $i77 = $i76 ^ $i75;

        $i78 = $i77 ^ i4;

        $i79 = $i78 ^ i9;

        $i80 = $i79 ^ i14;

        $i81 = $i80 ^ i19;

        $i82 = $i81 ^ i24;

        $i83 = $i82 ^ i29;

        $i84 = $i83 ^ i34;

        $i87 = (int) 65535;

        $i85 = $i84 & $i87;

        return $i85;
    }

    private int[] shift(int[], int)
    {
        int[] r0;
        int $i0, $i1, $i2, $i3, i4;
        org.bouncycastle.crypto.engines.Grainv1Engine r1;

        r1 := @this: org.bouncycastle.crypto.engines.Grainv1Engine;

        r0 := @parameter0: int[];

        i4 := @parameter1: int;

        $i0 = r0[1];

        r0[0] = $i0;

        $i1 = r0[2];

        r0[1] = $i1;

        $i2 = r0[3];

        r0[2] = $i2;

        $i3 = r0[4];

        r0[3] = $i3;

        r0[4] = i4;

        return r0;
    }

    private void setKey(byte[], byte[])
    {
        byte[] r0, r2, $r4, $r5, $r7, $r8;
        byte $b2, $b3, $b9, $b10;
        int[] $r3, $r6, $r9;
        org.bouncycastle.crypto.engines.Grainv1Engine r1;
        short $s4, $s11, $s18, $s23;
        int $i0, $i1, $i5, $i6, $i7, $i8, $i12, $i13, $i14, i15, i16, $i17, $i19, $i21, $i22, $i24, $i26;

        r1 := @this: org.bouncycastle.crypto.engines.Grainv1Engine;

        r2 := @parameter0: byte[];

        r0 := @parameter1: byte[];

        r0[8] = -1;

        r0[9] = -1;

        r1.<org.bouncycastle.crypto.engines.Grainv1Engine: byte[] workingKey> = r2;

        r1.<org.bouncycastle.crypto.engines.Grainv1Engine: byte[] workingIV> = r0;

        i15 = 0;

        i16 = 0;

     label1:
        $r3 = r1.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        $i0 = lengthof $r3;

        if i16 >= $i0 goto label2;

        $r6 = r1.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        $r4 = r1.<org.bouncycastle.crypto.engines.Grainv1Engine: byte[] workingKey>;

        $i1 = i15 + 1;

        $b2 = $r4[$i1];

        $i17 = (int) $b2;

        $i5 = $i17 << 8;

        $r5 = r1.<org.bouncycastle.crypto.engines.Grainv1Engine: byte[] workingKey>;

        $b3 = $r5[i15];

        $s18 = (short) $b3;

        $s4 = $s18 & 255;

        $i19 = (int) $s4;

        $i6 = $i5 | $i19;

        $i21 = (int) 65535;

        $i7 = $i6 & $i21;

        $r6[i16] = $i7;

        $r9 = r1.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] lfsr>;

        $r7 = r1.<org.bouncycastle.crypto.engines.Grainv1Engine: byte[] workingIV>;

        $i8 = i15 + 1;

        $b9 = $r7[$i8];

        $i22 = (int) $b9;

        $i12 = $i22 << 8;

        $r8 = r1.<org.bouncycastle.crypto.engines.Grainv1Engine: byte[] workingIV>;

        $b10 = $r8[i15];

        $s23 = (short) $b10;

        $s11 = $s23 & 255;

        $i24 = (int) $s11;

        $i13 = $i12 | $i24;

        $i26 = (int) 65535;

        $i14 = $i13 & $i26;

        $r9[i16] = $i14;

        i15 = i15 + 2;

        i16 = i16 + 1;

        goto label1;

     label2:
        return;
    }

    public void processBytes(byte[], int, int, byte[], int) throws org.bouncycastle.crypto.DataLengthException
    {
        byte[] r1, r2;
        java.lang.IllegalStateException $r5;
        org.bouncycastle.crypto.engines.Grainv1Engine r0;
        org.bouncycastle.crypto.DataLengthException $r3, $r4;
        byte $b9, $b10, $b11, $b12;
        int i0, i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, i13;
        java.lang.String $r7, $r10;
        boolean $z0;
        java.lang.StringBuilder $r6, $r8, $r9;

        r0 := @this: org.bouncycastle.crypto.engines.Grainv1Engine;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: byte[];

        i4 := @parameter4: int;

        $z0 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: boolean initialised>;

        if $z0 != 0 goto label1;

        $r5 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke r0.<org.bouncycastle.crypto.engines.Grainv1Engine: java.lang.String getAlgorithmName()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not initialised");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label1:
        $i3 = i0 + i1;

        $i2 = lengthof r1;

        if $i3 <= $i2 goto label2;

        $r4 = new org.bouncycastle.crypto.DataLengthException;

        specialinvoke $r4.<org.bouncycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input buffer too short");

        throw $r4;

     label2:
        $i6 = i4 + i1;

        $i5 = lengthof r2;

        if $i6 <= $i5 goto label3;

        $r3 = new org.bouncycastle.crypto.DataLengthException;

        specialinvoke $r3.<org.bouncycastle.crypto.DataLengthException: void <init>(java.lang.String)>("output buffer too short");

        throw $r3;

     label3:
        i13 = 0;

     label4:
        if i13 >= i1 goto label5;

        $i8 = i4 + i13;

        $i7 = i0 + i13;

        $b9 = r1[$i7];

        $b10 = specialinvoke r0.<org.bouncycastle.crypto.engines.Grainv1Engine: byte getKeyStream()>();

        $b11 = $b9 ^ $b10;

        $b12 = (byte) $b11;

        r2[$i8] = $b12;

        i13 = i13 + 1;

        goto label4;

     label5:
        return;
    }

    public void reset()
    {
        byte[] $r1, $r2;
        org.bouncycastle.crypto.engines.Grainv1Engine r0;

        r0 := @this: org.bouncycastle.crypto.engines.Grainv1Engine;

        r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int index> = 2;

        $r2 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: byte[] workingKey>;

        $r1 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: byte[] workingIV>;

        specialinvoke r0.<org.bouncycastle.crypto.engines.Grainv1Engine: void setKey(byte[],byte[])>($r2, $r1);

        specialinvoke r0.<org.bouncycastle.crypto.engines.Grainv1Engine: void initGrain()>();

        return;
    }

    private void oneRound()
    {
        byte[] $r1, $r2;
        org.bouncycastle.crypto.engines.Grainv1Engine r0;
        byte $b2, $b5;
        int[] $r3, $r4, $r5, $r6, $r7;
        int $i0, $i1, $i3, $i4, $i6, $i7, $i8, $i9;

        r0 := @this: org.bouncycastle.crypto.engines.Grainv1Engine;

        $i0 = specialinvoke r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int getOutput()>();

        r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int output> = $i0;

        $r1 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: byte[] out>;

        $i1 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int output>;

        $b2 = (byte) $i1;

        $r1[0] = $b2;

        $r2 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: byte[] out>;

        $i3 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int output>;

        $i4 = $i3 >> 8;

        $b5 = (byte) $i4;

        $r2[1] = $b5;

        $r3 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] nfsr>;

        $i6 = specialinvoke r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int getOutputNFSR()>();

        $r4 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] lfsr>;

        $i7 = $r4[0];

        $i8 = $i6 ^ $i7;

        $r5 = specialinvoke r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] shift(int[],int)>($r3, $i8);

        r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] nfsr> = $r5;

        $r6 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] lfsr>;

        $i9 = specialinvoke r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int getOutputLFSR()>();

        $r7 = specialinvoke r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] shift(int[],int)>($r6, $i9);

        r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int[] lfsr> = $r7;

        return;
    }

    public byte returnByte(byte)
    {
        java.lang.IllegalStateException $r1;
        org.bouncycastle.crypto.engines.Grainv1Engine r0;
        byte b0, $b1, $b2, $b3;
        java.lang.StringBuilder $r2, $r4, $r5;
        java.lang.String $r3, $r6;
        boolean $z0;

        r0 := @this: org.bouncycastle.crypto.engines.Grainv1Engine;

        b0 := @parameter0: byte;

        $z0 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: boolean initialised>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r0.<org.bouncycastle.crypto.engines.Grainv1Engine: java.lang.String getAlgorithmName()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not initialised");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r1;

     label1:
        $b1 = specialinvoke r0.<org.bouncycastle.crypto.engines.Grainv1Engine: byte getKeyStream()>();

        $b2 = b0 ^ $b1;

        $b3 = (byte) $b2;

        return $b3;
    }

    private byte getKeyStream()
    {
        byte[] $r1;
        byte $b3;
        int $i0, $i1, $i2;
        org.bouncycastle.crypto.engines.Grainv1Engine r0;

        r0 := @this: org.bouncycastle.crypto.engines.Grainv1Engine;

        $i0 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int index>;

        if $i0 <= 1 goto label1;

        specialinvoke r0.<org.bouncycastle.crypto.engines.Grainv1Engine: void oneRound()>();

        r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int index> = 0;

     label1:
        $r1 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: byte[] out>;

        $i1 = r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int index>;

        $i2 = $i1 + 1;

        r0.<org.bouncycastle.crypto.engines.Grainv1Engine: int index> = $i2;

        $b3 = $r1[$i1];

        return $b3;
    }

    public static void <clinit>()
    {
        <org.bouncycastle.crypto.engines.Grainv1Engine: int STATE_SIZE> = 5;

        return;
    }
}
