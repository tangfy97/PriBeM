public class org.codehaus.groovy.runtime.typehandling.LongMath extends org.codehaus.groovy.runtime.typehandling.NumberMath
{
    public static final org.codehaus.groovy.runtime.typehandling.LongMath INSTANCE;

    private void <init>()
    {
        org.codehaus.groovy.runtime.typehandling.LongMath r0;

        r0 := @this: org.codehaus.groovy.runtime.typehandling.LongMath;

        specialinvoke r0.<org.codehaus.groovy.runtime.typehandling.NumberMath: void <init>()>();

        return;
    }

    protected java.lang.Number absImpl(java.lang.Number)
    {
        java.lang.Long $r0;
        org.codehaus.groovy.runtime.typehandling.LongMath r2;
        long $l0, $l1;
        java.lang.Number r1;

        r2 := @this: org.codehaus.groovy.runtime.typehandling.LongMath;

        r1 := @parameter0: java.lang.Number;

        $r0 = new java.lang.Long;

        $l0 = virtualinvoke r1.<java.lang.Number: long longValue()>();

        $l1 = staticinvoke <java.lang.Math: long abs(long)>($l0);

        specialinvoke $r0.<java.lang.Long: void <init>(long)>($l1);

        return $r0;
    }

    protected java.lang.Number addImpl(java.lang.Number, java.lang.Number)
    {
        java.lang.Long $r0;
        org.codehaus.groovy.runtime.typehandling.LongMath r3;
        long $l0, $l1, $l2;
        java.lang.Number r1, r2;

        r3 := @this: org.codehaus.groovy.runtime.typehandling.LongMath;

        r1 := @parameter0: java.lang.Number;

        r2 := @parameter1: java.lang.Number;

        $r0 = new java.lang.Long;

        $l0 = virtualinvoke r1.<java.lang.Number: long longValue()>();

        $l1 = virtualinvoke r2.<java.lang.Number: long longValue()>();

        $l2 = $l0 + $l1;

        specialinvoke $r0.<java.lang.Long: void <init>(long)>($l2);

        return $r0;
    }

    protected java.lang.Number subtractImpl(java.lang.Number, java.lang.Number)
    {
        java.lang.Long $r0;
        org.codehaus.groovy.runtime.typehandling.LongMath r3;
        long $l0, $l1, $l2;
        java.lang.Number r1, r2;

        r3 := @this: org.codehaus.groovy.runtime.typehandling.LongMath;

        r1 := @parameter0: java.lang.Number;

        r2 := @parameter1: java.lang.Number;

        $r0 = new java.lang.Long;

        $l0 = virtualinvoke r1.<java.lang.Number: long longValue()>();

        $l1 = virtualinvoke r2.<java.lang.Number: long longValue()>();

        $l2 = $l0 - $l1;

        specialinvoke $r0.<java.lang.Long: void <init>(long)>($l2);

        return $r0;
    }

    protected java.lang.Number multiplyImpl(java.lang.Number, java.lang.Number)
    {
        java.lang.Long $r0;
        org.codehaus.groovy.runtime.typehandling.LongMath r3;
        long $l0, $l1, $l2;
        java.lang.Number r1, r2;

        r3 := @this: org.codehaus.groovy.runtime.typehandling.LongMath;

        r1 := @parameter0: java.lang.Number;

        r2 := @parameter1: java.lang.Number;

        $r0 = new java.lang.Long;

        $l0 = virtualinvoke r1.<java.lang.Number: long longValue()>();

        $l1 = virtualinvoke r2.<java.lang.Number: long longValue()>();

        $l2 = $l0 * $l1;

        specialinvoke $r0.<java.lang.Long: void <init>(long)>($l2);

        return $r0;
    }

    protected java.lang.Number divideImpl(java.lang.Number, java.lang.Number)
    {
        org.codehaus.groovy.runtime.typehandling.LongMath r4;
        java.lang.Number r0, r1, $r3;
        org.codehaus.groovy.runtime.typehandling.BigDecimalMath $r2;

        r4 := @this: org.codehaus.groovy.runtime.typehandling.LongMath;

        r0 := @parameter0: java.lang.Number;

        r1 := @parameter1: java.lang.Number;

        $r2 = <org.codehaus.groovy.runtime.typehandling.BigDecimalMath: org.codehaus.groovy.runtime.typehandling.BigDecimalMath INSTANCE>;

        $r3 = virtualinvoke $r2.<org.codehaus.groovy.runtime.typehandling.BigDecimalMath: java.lang.Number divideImpl(java.lang.Number,java.lang.Number)>(r0, r1);

        return $r3;
    }

    protected int compareToImpl(java.lang.Number, java.lang.Number)
    {
        long $l0, $l1;
        byte $b2, $b3, $b4;
        org.codehaus.groovy.runtime.typehandling.LongMath r2;
        int $i5;
        java.lang.Number r0, r1;

        r2 := @this: org.codehaus.groovy.runtime.typehandling.LongMath;

        r0 := @parameter0: java.lang.Number;

        r1 := @parameter1: java.lang.Number;

        $l0 = virtualinvoke r0.<java.lang.Number: long longValue()>();

        $l1 = virtualinvoke r1.<java.lang.Number: long longValue()>();

        $b2 = $l0 cmp $l1;

        $i5 = (int) $b2;

        if $i5 >= 0 goto label1;

        $b4 = -1;

        goto label3;

     label1:
        $b3 = $l0 cmp $l1;

        if $b3 != 0 goto label2;

        $b4 = 0;

        goto label3;

     label2:
        $b4 = 1;

     label3:
        return $b4;
    }

    protected java.lang.Number intdivImpl(java.lang.Number, java.lang.Number)
    {
        java.lang.Long $r0;
        org.codehaus.groovy.runtime.typehandling.LongMath r3;
        long $l0, $l1, $l2;
        java.lang.Number r1, r2;

        r3 := @this: org.codehaus.groovy.runtime.typehandling.LongMath;

        r1 := @parameter0: java.lang.Number;

        r2 := @parameter1: java.lang.Number;

        $r0 = new java.lang.Long;

        $l0 = virtualinvoke r1.<java.lang.Number: long longValue()>();

        $l1 = virtualinvoke r2.<java.lang.Number: long longValue()>();

        $l2 = $l0 / $l1;

        specialinvoke $r0.<java.lang.Long: void <init>(long)>($l2);

        return $r0;
    }

    protected java.lang.Number modImpl(java.lang.Number, java.lang.Number)
    {
        java.lang.Long $r0;
        org.codehaus.groovy.runtime.typehandling.LongMath r3;
        long $l0, $l1, $l2;
        java.lang.Number r1, r2;

        r3 := @this: org.codehaus.groovy.runtime.typehandling.LongMath;

        r1 := @parameter0: java.lang.Number;

        r2 := @parameter1: java.lang.Number;

        $r0 = new java.lang.Long;

        $l0 = virtualinvoke r1.<java.lang.Number: long longValue()>();

        $l1 = virtualinvoke r2.<java.lang.Number: long longValue()>();

        $l2 = $l0 % $l1;

        specialinvoke $r0.<java.lang.Long: void <init>(long)>($l2);

        return $r0;
    }

    protected java.lang.Number unaryMinusImpl(java.lang.Number)
    {
        java.lang.Long $r0;
        org.codehaus.groovy.runtime.typehandling.LongMath r2;
        long $l0, $l1;
        java.lang.Number r1;

        r2 := @this: org.codehaus.groovy.runtime.typehandling.LongMath;

        r1 := @parameter0: java.lang.Number;

        $r0 = new java.lang.Long;

        $l0 = virtualinvoke r1.<java.lang.Number: long longValue()>();

        $l1 = neg $l0;

        specialinvoke $r0.<java.lang.Long: void <init>(long)>($l1);

        return $r0;
    }

    protected java.lang.Number bitwiseNegateImpl(java.lang.Number)
    {
        java.lang.Long $r0;
        org.codehaus.groovy.runtime.typehandling.LongMath r2;
        long $l0, $l1;
        java.lang.Number r1;

        r2 := @this: org.codehaus.groovy.runtime.typehandling.LongMath;

        r1 := @parameter0: java.lang.Number;

        $r0 = new java.lang.Long;

        $l0 = virtualinvoke r1.<java.lang.Number: long longValue()>();

        $l1 = $l0 ^ -1L;

        specialinvoke $r0.<java.lang.Long: void <init>(long)>($l1);

        return $r0;
    }

    protected java.lang.Number orImpl(java.lang.Number, java.lang.Number)
    {
        java.lang.Long $r0;
        org.codehaus.groovy.runtime.typehandling.LongMath r3;
        long $l0, $l1, $l2;
        java.lang.Number r1, r2;

        r3 := @this: org.codehaus.groovy.runtime.typehandling.LongMath;

        r1 := @parameter0: java.lang.Number;

        r2 := @parameter1: java.lang.Number;

        $r0 = new java.lang.Long;

        $l0 = virtualinvoke r1.<java.lang.Number: long longValue()>();

        $l1 = virtualinvoke r2.<java.lang.Number: long longValue()>();

        $l2 = $l0 | $l1;

        specialinvoke $r0.<java.lang.Long: void <init>(long)>($l2);

        return $r0;
    }

    protected java.lang.Number andImpl(java.lang.Number, java.lang.Number)
    {
        java.lang.Long $r0;
        org.codehaus.groovy.runtime.typehandling.LongMath r3;
        long $l0, $l1, $l2;
        java.lang.Number r1, r2;

        r3 := @this: org.codehaus.groovy.runtime.typehandling.LongMath;

        r1 := @parameter0: java.lang.Number;

        r2 := @parameter1: java.lang.Number;

        $r0 = new java.lang.Long;

        $l0 = virtualinvoke r1.<java.lang.Number: long longValue()>();

        $l1 = virtualinvoke r2.<java.lang.Number: long longValue()>();

        $l2 = $l0 & $l1;

        specialinvoke $r0.<java.lang.Long: void <init>(long)>($l2);

        return $r0;
    }

    protected java.lang.Number xorImpl(java.lang.Number, java.lang.Number)
    {
        java.lang.Long $r0;
        org.codehaus.groovy.runtime.typehandling.LongMath r3;
        long $l0, $l1, $l2;
        java.lang.Number r1, r2;

        r3 := @this: org.codehaus.groovy.runtime.typehandling.LongMath;

        r1 := @parameter0: java.lang.Number;

        r2 := @parameter1: java.lang.Number;

        $r0 = new java.lang.Long;

        $l0 = virtualinvoke r1.<java.lang.Number: long longValue()>();

        $l1 = virtualinvoke r2.<java.lang.Number: long longValue()>();

        $l2 = $l0 ^ $l1;

        specialinvoke $r0.<java.lang.Long: void <init>(long)>($l2);

        return $r0;
    }

    protected java.lang.Number leftShiftImpl(java.lang.Number, java.lang.Number)
    {
        long $l0, $l1, $l3;
        java.lang.Long $r0;
        org.codehaus.groovy.runtime.typehandling.LongMath r3;
        int $i2;
        java.lang.Number r1, r2;

        r3 := @this: org.codehaus.groovy.runtime.typehandling.LongMath;

        r1 := @parameter0: java.lang.Number;

        r2 := @parameter1: java.lang.Number;

        $r0 = new java.lang.Long;

        $l0 = virtualinvoke r1.<java.lang.Number: long longValue()>();

        $l1 = virtualinvoke r2.<java.lang.Number: long longValue()>();

        $i2 = (int) $l1;

        $l3 = $l0 << $i2;

        specialinvoke $r0.<java.lang.Long: void <init>(long)>($l3);

        return $r0;
    }

    protected java.lang.Number rightShiftImpl(java.lang.Number, java.lang.Number)
    {
        long $l0, $l1, $l3;
        java.lang.Long $r0;
        org.codehaus.groovy.runtime.typehandling.LongMath r3;
        int $i2;
        java.lang.Number r1, r2;

        r3 := @this: org.codehaus.groovy.runtime.typehandling.LongMath;

        r1 := @parameter0: java.lang.Number;

        r2 := @parameter1: java.lang.Number;

        $r0 = new java.lang.Long;

        $l0 = virtualinvoke r1.<java.lang.Number: long longValue()>();

        $l1 = virtualinvoke r2.<java.lang.Number: long longValue()>();

        $i2 = (int) $l1;

        $l3 = $l0 >> $i2;

        specialinvoke $r0.<java.lang.Long: void <init>(long)>($l3);

        return $r0;
    }

    protected java.lang.Number rightShiftUnsignedImpl(java.lang.Number, java.lang.Number)
    {
        long $l0, $l1, $l3;
        java.lang.Long $r0;
        org.codehaus.groovy.runtime.typehandling.LongMath r3;
        int $i2;
        java.lang.Number r1, r2;

        r3 := @this: org.codehaus.groovy.runtime.typehandling.LongMath;

        r1 := @parameter0: java.lang.Number;

        r2 := @parameter1: java.lang.Number;

        $r0 = new java.lang.Long;

        $l0 = virtualinvoke r1.<java.lang.Number: long longValue()>();

        $l1 = virtualinvoke r2.<java.lang.Number: long longValue()>();

        $i2 = (int) $l1;

        $l3 = $l0 >>> $i2;

        specialinvoke $r0.<java.lang.Long: void <init>(long)>($l3);

        return $r0;
    }

    protected java.lang.Number bitAndImpl(java.lang.Number, java.lang.Number)
    {
        java.lang.Long $r0;
        org.codehaus.groovy.runtime.typehandling.LongMath r3;
        long $l0, $l1, $l2;
        java.lang.Number r1, r2;

        r3 := @this: org.codehaus.groovy.runtime.typehandling.LongMath;

        r1 := @parameter0: java.lang.Number;

        r2 := @parameter1: java.lang.Number;

        $r0 = new java.lang.Long;

        $l0 = virtualinvoke r1.<java.lang.Number: long longValue()>();

        $l1 = virtualinvoke r2.<java.lang.Number: long longValue()>();

        $l2 = $l0 & $l1;

        specialinvoke $r0.<java.lang.Long: void <init>(long)>($l2);

        return $r0;
    }

    static void <clinit>()
    {
        org.codehaus.groovy.runtime.typehandling.LongMath $r0;

        $r0 = new org.codehaus.groovy.runtime.typehandling.LongMath;

        specialinvoke $r0.<org.codehaus.groovy.runtime.typehandling.LongMath: void <init>()>();

        <org.codehaus.groovy.runtime.typehandling.LongMath: org.codehaus.groovy.runtime.typehandling.LongMath INSTANCE> = $r0;

        return;
    }
}
