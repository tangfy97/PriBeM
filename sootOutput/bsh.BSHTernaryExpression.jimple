class bsh.BSHTernaryExpression extends bsh.SimpleNode
{

    void <init>(int)
    {
        int i0;
        bsh.BSHTernaryExpression r0;

        r0 := @this: bsh.BSHTernaryExpression;

        i0 := @parameter0: int;

        specialinvoke r0.<bsh.SimpleNode: void <init>(int)>(i0);

        return;
    }

    public java.lang.Object eval(bsh.CallStack, bsh.Interpreter) throws bsh.EvalError
    {
        bsh.Interpreter r8;
        bsh.SimpleNode r2, r4, r6;
        bsh.CallStack r7;
        bsh.BSHTernaryExpression r0;
        java.lang.Object $r9, $r10;
        bsh.Node $r1, $r3, $r5;
        boolean $z0;

        r0 := @this: bsh.BSHTernaryExpression;

        r7 := @parameter0: bsh.CallStack;

        r8 := @parameter1: bsh.Interpreter;

        $r1 = virtualinvoke r0.<bsh.BSHTernaryExpression: bsh.Node jjtGetChild(int)>(0);

        r2 = (bsh.SimpleNode) $r1;

        $r3 = virtualinvoke r0.<bsh.BSHTernaryExpression: bsh.Node jjtGetChild(int)>(1);

        r4 = (bsh.SimpleNode) $r3;

        $r5 = virtualinvoke r0.<bsh.BSHTernaryExpression: bsh.Node jjtGetChild(int)>(2);

        r6 = (bsh.SimpleNode) $r5;

        $z0 = staticinvoke <bsh.BSHIfStatement: boolean evaluateCondition(bsh.SimpleNode,bsh.CallStack,bsh.Interpreter)>(r2, r7, r8);

        if $z0 == 0 goto label1;

        $r10 = virtualinvoke r4.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>(r7, r8);

        return $r10;

     label1:
        $r9 = virtualinvoke r6.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>(r7, r8);

        return $r9;
    }
}
