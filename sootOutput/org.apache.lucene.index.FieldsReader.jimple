final class org.apache.lucene.index.FieldsReader extends java.lang.Object implements java.lang.Cloneable, java.io.Closeable
{
    private final org.apache.lucene.index.FieldInfos fieldInfos;
    private final org.apache.lucene.store.IndexInput cloneableFieldsStream;
    private final org.apache.lucene.store.IndexInput fieldsStream;
    private final org.apache.lucene.store.IndexInput cloneableIndexStream;
    private final org.apache.lucene.store.IndexInput indexStream;
    private int numTotalDocs;
    private int size;
    private boolean closed;
    private final int format;
    private final int formatSize;
    private int docStoreOffset;
    private org.apache.lucene.util.CloseableThreadLocal fieldsStreamTL;
    private boolean isOriginal;
    static final boolean $assertionsDisabled;

    public java.lang.Object clone()
    {
        org.apache.lucene.store.IndexInput $r2, $r3;
        org.apache.lucene.index.FieldsReader r0, $r1;
        int $i0, $i1, $i2, $i3, $i4;
        org.apache.lucene.index.FieldInfos $r4;

        r0 := @this: org.apache.lucene.index.FieldsReader;

        specialinvoke r0.<org.apache.lucene.index.FieldsReader: void ensureOpen()>();

        $r1 = new org.apache.lucene.index.FieldsReader;

        $r4 = r0.<org.apache.lucene.index.FieldsReader: org.apache.lucene.index.FieldInfos fieldInfos>;

        $i4 = r0.<org.apache.lucene.index.FieldsReader: int numTotalDocs>;

        $i3 = r0.<org.apache.lucene.index.FieldsReader: int size>;

        $i2 = r0.<org.apache.lucene.index.FieldsReader: int format>;

        $i1 = r0.<org.apache.lucene.index.FieldsReader: int formatSize>;

        $i0 = r0.<org.apache.lucene.index.FieldsReader: int docStoreOffset>;

        $r3 = r0.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput cloneableFieldsStream>;

        $r2 = r0.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput cloneableIndexStream>;

        specialinvoke $r1.<org.apache.lucene.index.FieldsReader: void <init>(org.apache.lucene.index.FieldInfos,int,int,int,int,int,org.apache.lucene.store.IndexInput,org.apache.lucene.store.IndexInput)>($r4, $i4, $i3, $i2, $i1, $i0, $r3, $r2);

        return $r1;
    }

    static java.lang.String detectCodeVersion(org.apache.lucene.store.Directory, java.lang.String) throws java.io.IOException
    {
        java.lang.Throwable $r4;
        org.apache.lucene.store.IndexInput $r3;
        org.apache.lucene.store.Directory r0;
        int $i0;
        java.lang.String r1, $r2;

        r0 := @parameter0: org.apache.lucene.store.Directory;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String segmentFileName(java.lang.String,java.lang.String)>(r1, "fdx");

        $r3 = virtualinvoke r0.<org.apache.lucene.store.Directory: org.apache.lucene.store.IndexInput openInput(java.lang.String,int)>($r2, 1024);

     label1:
        $i0 = virtualinvoke $r3.<org.apache.lucene.store.IndexInput: int readInt()>();

        if $i0 >= 2 goto label3;

     label2:
        virtualinvoke $r3.<org.apache.lucene.store.IndexInput: void close()>();

        return "2.x";

     label3:
        virtualinvoke $r3.<org.apache.lucene.store.IndexInput: void close()>();

        return "3.0";

     label4:
        $r4 := @caughtexception;

     label5:
        virtualinvoke $r3.<org.apache.lucene.store.IndexInput: void close()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void <init>(org.apache.lucene.index.FieldInfos, int, int, int, int, int, org.apache.lucene.store.IndexInput, org.apache.lucene.store.IndexInput)
    {
        org.apache.lucene.store.IndexInput r3, r4, $r6, $r8;
        org.apache.lucene.util.CloseableThreadLocal $r1;
        org.apache.lucene.index.FieldsReader r0;
        int i0, i1, i2, i3, i4;
        java.lang.Object $r5, $r7;
        org.apache.lucene.index.FieldInfos r2;

        r0 := @this: org.apache.lucene.index.FieldsReader;

        r2 := @parameter0: org.apache.lucene.index.FieldInfos;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i4 := @parameter5: int;

        r3 := @parameter6: org.apache.lucene.store.IndexInput;

        r4 := @parameter7: org.apache.lucene.store.IndexInput;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.lucene.util.CloseableThreadLocal;

        specialinvoke $r1.<org.apache.lucene.util.CloseableThreadLocal: void <init>()>();

        r0.<org.apache.lucene.index.FieldsReader: org.apache.lucene.util.CloseableThreadLocal fieldsStreamTL> = $r1;

        r0.<org.apache.lucene.index.FieldsReader: boolean isOriginal> = 0;

        r0.<org.apache.lucene.index.FieldsReader: org.apache.lucene.index.FieldInfos fieldInfos> = r2;

        r0.<org.apache.lucene.index.FieldsReader: int numTotalDocs> = i0;

        r0.<org.apache.lucene.index.FieldsReader: int size> = i1;

        r0.<org.apache.lucene.index.FieldsReader: int format> = i2;

        r0.<org.apache.lucene.index.FieldsReader: int formatSize> = i3;

        r0.<org.apache.lucene.index.FieldsReader: int docStoreOffset> = i4;

        r0.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput cloneableFieldsStream> = r3;

        r0.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput cloneableIndexStream> = r4;

        $r5 = virtualinvoke r3.<org.apache.lucene.store.IndexInput: java.lang.Object clone()>();

        $r6 = (org.apache.lucene.store.IndexInput) $r5;

        r0.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput fieldsStream> = $r6;

        $r7 = virtualinvoke r4.<org.apache.lucene.store.IndexInput: java.lang.Object clone()>();

        $r8 = (org.apache.lucene.store.IndexInput) $r7;

        r0.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput indexStream> = $r8;

        return;
    }

    void <init>(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.index.FieldInfos) throws java.io.IOException
    {
        org.apache.lucene.index.FieldsReader r0;
        org.apache.lucene.store.Directory r1;
        int $i1;
        java.lang.String r2;
        org.apache.lucene.index.FieldInfos r3;

        r0 := @this: org.apache.lucene.index.FieldsReader;

        r1 := @parameter0: org.apache.lucene.store.Directory;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.apache.lucene.index.FieldInfos;

        $i1 = (int) -1;

        specialinvoke r0.<org.apache.lucene.index.FieldsReader: void <init>(org.apache.lucene.store.Directory,java.lang.String,org.apache.lucene.index.FieldInfos,int,int,int)>(r1, r2, r3, 1024, $i1, 0);

        return;
    }

    void <init>(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.index.FieldInfos, int) throws java.io.IOException
    {
        org.apache.lucene.index.FieldsReader r0;
        org.apache.lucene.store.Directory r1;
        int i0, $i2;
        java.lang.String r2;
        org.apache.lucene.index.FieldInfos r3;

        r0 := @this: org.apache.lucene.index.FieldsReader;

        r1 := @parameter0: org.apache.lucene.store.Directory;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.apache.lucene.index.FieldInfos;

        i0 := @parameter3: int;

        $i2 = (int) -1;

        specialinvoke r0.<org.apache.lucene.index.FieldsReader: void <init>(org.apache.lucene.store.Directory,java.lang.String,org.apache.lucene.index.FieldInfos,int,int,int)>(r1, r2, r3, i0, $i2, 0);

        return;
    }

    void <init>(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.index.FieldInfos, int, int, int) throws java.io.IOException
    {
        org.apache.lucene.index.IndexFormatTooNewException $r31;
        org.apache.lucene.store.Directory r3;
        org.apache.lucene.index.FieldInfos r2;
        boolean $z0;
        org.apache.lucene.index.FieldsReader r0;
        java.lang.StringBuilder $r16, $r17, $r18, $r19, $r20, $r21, $r32;
        java.lang.Throwable $r26;
        long $l5, $l7, $l9, $l12, $l16, $l18;
        java.lang.AssertionError $r33;
        int i0, $i1, $i2, $i3, $i4, $i6, i8, $i10, i11, $i13, $i14, $i15, $i17, $i19, $i21;
        java.lang.String r4, $r5, $r7, $r22;
        org.apache.lucene.store.IndexInput $r6, $r8, $r9, $r10, $r12, $r13, $r23, $r25, $r27, $r29;
        org.apache.lucene.util.CloseableThreadLocal $r30;
        java.lang.Object $r11, $r28;

        r0 := @this: org.apache.lucene.index.FieldsReader;

        r3 := @parameter0: org.apache.lucene.store.Directory;

        r4 := @parameter1: java.lang.String;

        r2 := @parameter2: org.apache.lucene.index.FieldInfos;

        i0 := @parameter3: int;

        i8 := @parameter4: int;

        i11 := @parameter5: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r30 = new org.apache.lucene.util.CloseableThreadLocal;

        specialinvoke $r30.<org.apache.lucene.util.CloseableThreadLocal: void <init>()>();

        r0.<org.apache.lucene.index.FieldsReader: org.apache.lucene.util.CloseableThreadLocal fieldsStreamTL> = $r30;

        r0.<org.apache.lucene.index.FieldsReader: boolean isOriginal> = 0;

        r0.<org.apache.lucene.index.FieldsReader: boolean isOriginal> = 1;

     label01:
        r0.<org.apache.lucene.index.FieldsReader: org.apache.lucene.index.FieldInfos fieldInfos> = r2;

        $r5 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String segmentFileName(java.lang.String,java.lang.String)>(r4, "fdt");

        $r6 = virtualinvoke r3.<org.apache.lucene.store.Directory: org.apache.lucene.store.IndexInput openInput(java.lang.String,int)>($r5, i0);

        r0.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput cloneableFieldsStream> = $r6;

        $r7 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String segmentFileName(java.lang.String,java.lang.String)>(r4, "fdx");

        $r8 = virtualinvoke r3.<org.apache.lucene.store.Directory: org.apache.lucene.store.IndexInput openInput(java.lang.String,int)>($r7, i0);

        r0.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput cloneableIndexStream> = $r8;

        $r9 = r0.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput cloneableIndexStream>;

        $i1 = virtualinvoke $r9.<org.apache.lucene.store.IndexInput: int readInt()>();

        if $i1 != 0 goto label02;

        r0.<org.apache.lucene.index.FieldsReader: int format> = 0;

        goto label03;

     label02:
        r0.<org.apache.lucene.index.FieldsReader: int format> = $i1;

     label03:
        $i2 = r0.<org.apache.lucene.index.FieldsReader: int format>;

        if $i2 <= 3 goto label04;

        $r31 = new org.apache.lucene.index.IndexFormatTooNewException;

        $r25 = r0.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput cloneableIndexStream>;

        $i17 = r0.<org.apache.lucene.index.FieldsReader: int format>;

        specialinvoke $r31.<org.apache.lucene.index.IndexFormatTooNewException: void <init>(org.apache.lucene.store.DataInput,int,int,int)>($r25, $i17, 0, 3);

        throw $r31;

     label04:
        $i3 = r0.<org.apache.lucene.index.FieldsReader: int format>;

        if $i3 <= 0 goto label05;

        r0.<org.apache.lucene.index.FieldsReader: int formatSize> = 4;

        goto label06;

     label05:
        r0.<org.apache.lucene.index.FieldsReader: int formatSize> = 0;

     label06:
        $i4 = r0.<org.apache.lucene.index.FieldsReader: int format>;

        if $i4 >= 1 goto label07;

        $r23 = r0.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput cloneableFieldsStream>;

        virtualinvoke $r23.<org.apache.lucene.store.IndexInput: void setModifiedUTF8StringsMode()>();

     label07:
        $r10 = r0.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput cloneableFieldsStream>;

        $r11 = virtualinvoke $r10.<org.apache.lucene.store.IndexInput: java.lang.Object clone()>();

        $r12 = (org.apache.lucene.store.IndexInput) $r11;

        r0.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput fieldsStream> = $r12;

        $r13 = r0.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput cloneableIndexStream>;

        $l5 = virtualinvoke $r13.<org.apache.lucene.store.IndexInput: long length()>();

        $i6 = r0.<org.apache.lucene.index.FieldsReader: int formatSize>;

        $l7 = (long) $i6;

        $l16 = $l5 - $l7;

        $i21 = (int) -1;

        if i8 == $i21 goto label08;

        r0.<org.apache.lucene.index.FieldsReader: int docStoreOffset> = i8;

        r0.<org.apache.lucene.index.FieldsReader: int size> = i11;

        $z0 = <org.apache.lucene.index.FieldsReader: boolean $assertionsDisabled>;

        if $z0 != 0 goto label09;

        $l12 = $l16 / 8L;

        $i15 = (int) $l12;

        $i13 = r0.<org.apache.lucene.index.FieldsReader: int docStoreOffset>;

        $i14 = i11 + $i13;

        if $i15 >= $i14 goto label09;

        $r33 = new java.lang.AssertionError;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("indexSize=");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" size=");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" docStoreOffset=");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r33.<java.lang.AssertionError: void <init>(java.lang.Object)>($r22);

        throw $r33;

     label08:
        r0.<org.apache.lucene.index.FieldsReader: int docStoreOffset> = 0;

        $l9 = $l16 >> 3;

        $i10 = (int) $l9;

        r0.<org.apache.lucene.index.FieldsReader: int size> = $i10;

     label09:
        $r27 = r0.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput cloneableIndexStream>;

        $r28 = virtualinvoke $r27.<org.apache.lucene.store.IndexInput: java.lang.Object clone()>();

        $r29 = (org.apache.lucene.store.IndexInput) $r28;

        r0.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput indexStream> = $r29;

        $l18 = $l16 >> 3;

        $i19 = (int) $l18;

        r0.<org.apache.lucene.index.FieldsReader: int numTotalDocs> = $i19;

     label10:
        if 1 != 0 goto label14;

        virtualinvoke r0.<org.apache.lucene.index.FieldsReader: void close()>();

        goto label14;

     label11:
        $r26 := @caughtexception;

     label12:
        if 0 != 0 goto label13;

        virtualinvoke r0.<org.apache.lucene.index.FieldsReader: void close()>();

     label13:
        throw $r26;

     label14:
        return;

        catch java.lang.Throwable from label01 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    private void ensureOpen() throws org.apache.lucene.store.AlreadyClosedException
    {
        org.apache.lucene.index.FieldsReader r0;
        org.apache.lucene.store.AlreadyClosedException $r1;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.FieldsReader;

        $z0 = r0.<org.apache.lucene.index.FieldsReader: boolean closed>;

        if $z0 == 0 goto label1;

        $r1 = new org.apache.lucene.store.AlreadyClosedException;

        specialinvoke $r1.<org.apache.lucene.store.AlreadyClosedException: void <init>(java.lang.String)>("this FieldsReader is closed");

        throw $r1;

     label1:
        return;
    }

    public final void close() throws java.io.IOException
    {
        org.apache.lucene.store.IndexInput $r2, $r3, $r6, $r7, $r9, $r10;
        org.apache.lucene.util.CloseableThreadLocal $r4, $r8;
        org.apache.lucene.index.FieldsReader r0;
        java.io.Closeable[] $r1, $r5;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.index.FieldsReader;

        $z0 = r0.<org.apache.lucene.index.FieldsReader: boolean closed>;

        if $z0 != 0 goto label3;

        $z1 = r0.<org.apache.lucene.index.FieldsReader: boolean isOriginal>;

        if $z1 == 0 goto label1;

        $r5 = newarray (java.io.Closeable)[5];

        $r6 = r0.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        $r5[0] = $r6;

        $r7 = r0.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput indexStream>;

        $r5[1] = $r7;

        $r8 = r0.<org.apache.lucene.index.FieldsReader: org.apache.lucene.util.CloseableThreadLocal fieldsStreamTL>;

        $r5[2] = $r8;

        $r9 = r0.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput cloneableFieldsStream>;

        $r5[3] = $r9;

        $r10 = r0.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput cloneableIndexStream>;

        $r5[4] = $r10;

        staticinvoke <org.apache.lucene.util.IOUtils: void close(java.io.Closeable[])>($r5);

        goto label2;

     label1:
        $r1 = newarray (java.io.Closeable)[3];

        $r2 = r0.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        $r1[0] = $r2;

        $r3 = r0.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput indexStream>;

        $r1[1] = $r3;

        $r4 = r0.<org.apache.lucene.index.FieldsReader: org.apache.lucene.util.CloseableThreadLocal fieldsStreamTL>;

        $r1[2] = $r4;

        staticinvoke <org.apache.lucene.util.IOUtils: void close(java.io.Closeable[])>($r1);

     label2:
        r0.<org.apache.lucene.index.FieldsReader: boolean closed> = 1;

     label3:
        return;
    }

    final int size()
    {
        org.apache.lucene.index.FieldsReader r0;
        int $i0;

        r0 := @this: org.apache.lucene.index.FieldsReader;

        $i0 = r0.<org.apache.lucene.index.FieldsReader: int size>;

        return $i0;
    }

    private final void seekIndex(int) throws java.io.IOException
    {
        org.apache.lucene.store.IndexInput $r1;
        long $l4, $l5, $l6, $l7;
        org.apache.lucene.index.FieldsReader r0;
        int $i0, i1, $i2, $i3;

        r0 := @this: org.apache.lucene.index.FieldsReader;

        i1 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput indexStream>;

        $i0 = r0.<org.apache.lucene.index.FieldsReader: int formatSize>;

        $l6 = (long) $i0;

        $i2 = r0.<org.apache.lucene.index.FieldsReader: int docStoreOffset>;

        $i3 = i1 + $i2;

        $l4 = (long) $i3;

        $l5 = $l4 * 8L;

        $l7 = $l6 + $l5;

        virtualinvoke $r1.<org.apache.lucene.store.IndexInput: void seek(long)>($l7);

        return;
    }

    boolean canReadRawDocs()
    {
        org.apache.lucene.index.FieldsReader r0;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.FieldsReader;

        $i0 = r0.<org.apache.lucene.index.FieldsReader: int format>;

        if $i0 < 2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    final org.apache.lucene.document.Document doc(int, org.apache.lucene.document.FieldSelector) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException
    {
        org.apache.lucene.document.FieldSelector r8;
        org.apache.lucene.document.Document $r21;
        byte $b4;
        int[] $r12;
        org.apache.lucene.index.FieldInfos $r6;
        boolean $z0, z1, $z2, z3, $z5, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16;
        org.apache.lucene.index.FieldsReader r0;
        java.lang.StringBuilder $r16, $r18, $r22;
        org.apache.lucene.document.FieldSelectorResult r10, $r20;
        long $l1;
        java.lang.AssertionError $r23, $r24;
        short $s5, $s6, $s10, $s12, $s14, $s15;
        int i0, $i2, $i3, $i7, $i8, $i9, $i11, i13, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24;
        java.lang.String $r9, $r17, $r19;
        org.apache.lucene.store.IndexInput $r1, $r2, $r4, $r5, $r11;
        org.apache.lucene.index.FieldInfo $r7;

        r0 := @this: org.apache.lucene.index.FieldsReader;

        i0 := @parameter0: int;

        r8 := @parameter1: org.apache.lucene.document.FieldSelector;

        specialinvoke r0.<org.apache.lucene.index.FieldsReader: void seekIndex(int)>(i0);

        $r1 = r0.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput indexStream>;

        $l1 = virtualinvoke $r1.<org.apache.lucene.store.IndexInput: long readLong()>();

        $r2 = r0.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        virtualinvoke $r2.<org.apache.lucene.store.IndexInput: void seek(long)>($l1);

        $r21 = new org.apache.lucene.document.Document;

        specialinvoke $r21.<org.apache.lucene.document.Document: void <init>()>();

        $r4 = r0.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        $i2 = virtualinvoke $r4.<org.apache.lucene.store.IndexInput: int readVInt()>();

        i13 = 0;

     label01:
        if i13 >= $i2 goto label21;

        $r5 = r0.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        $i3 = virtualinvoke $r5.<org.apache.lucene.store.IndexInput: int readVInt()>();

        $r6 = r0.<org.apache.lucene.index.FieldsReader: org.apache.lucene.index.FieldInfos fieldInfos>;

        $r7 = virtualinvoke $r6.<org.apache.lucene.index.FieldInfos: org.apache.lucene.index.FieldInfo fieldInfo(int)>($i3);

        if r8 != null goto label02;

        $r20 = <org.apache.lucene.document.FieldSelectorResult: org.apache.lucene.document.FieldSelectorResult LOAD>;

        goto label03;

     label02:
        $r9 = $r7.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        $r20 = interfaceinvoke r8.<org.apache.lucene.document.FieldSelector: org.apache.lucene.document.FieldSelectorResult accept(java.lang.String)>($r9);

     label03:
        r10 = $r20;

        $r11 = r0.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        $b4 = virtualinvoke $r11.<org.apache.lucene.store.IndexInput: byte readByte()>();

        $s15 = (short) $b4;

        $s12 = $s15 & 255;

        $z0 = <org.apache.lucene.index.FieldsReader: boolean $assertionsDisabled>;

        if $z0 != 0 goto label04;

        $i16 = (int) $s12;

        if $i16 <= 63 goto label04;

        $r23 = new java.lang.AssertionError;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bits=");

        $i17 = (int) $s12;

        $r17 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i17);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.AssertionError: void <init>(java.lang.Object)>($r19);

        throw $r23;

     label04:
        $s5 = $s12 & 4;

        if $s5 == 0 goto label05;

        $z8 = 1;

        $z7 = 1;

        goto label06;

     label05:
        $z8 = 0;

        $z7 = 0;

     label06:
        z1 = $z8;

        $z2 = <org.apache.lucene.index.FieldsReader: boolean $assertionsDisabled>;

        if $z2 != 0 goto label08;

        if $z7 == 0 goto label08;

        $i11 = r0.<org.apache.lucene.index.FieldsReader: int format>;

        if $i11 >= 2 goto label07;

        goto label08;

     label07:
        $r24 = new java.lang.AssertionError;

        specialinvoke $r24.<java.lang.AssertionError: void <init>(java.lang.Object)>("compressed fields are only allowed in indexes of version <= 2.9");

        throw $r24;

     label08:
        $s14 = $s12 & 1;

        if $s14 == 0 goto label09;

        $z5 = 1;

        goto label10;

     label09:
        $z5 = 0;

     label10:
        z3 = $z5;

        $s6 = $s12 & 2;

        if $s6 == 0 goto label11;

        $z16 = 1;

        $z15 = 1;

        $z14 = 1;

        $z13 = 1;

        $z12 = 1;

        $z11 = 1;

        $z10 = 1;

        $z9 = 1;

        goto label12;

     label11:
        $z16 = 0;

        $z15 = 0;

        $z14 = 0;

        $z13 = 0;

        $z12 = 0;

        $z11 = 0;

        $z10 = 0;

        $z9 = 0;

     label12:
        $s10 = $s12 & 56;

        $r12 = <org.apache.lucene.index.FieldsReader$1: int[] $SwitchMap$org$apache$lucene$document$FieldSelectorResult>;

        $i7 = virtualinvoke r10.<org.apache.lucene.document.FieldSelectorResult: int ordinal()>();

        $i8 = $r12[$i7];

        tableswitch($i8)
        {
            case 1: goto label13;
            case 2: goto label14;
            case 3: goto label15;
            case 4: goto label16;
            case 5: goto label17;
            case 6: goto label18;
            default: goto label19;
        };

     label13:
        $i18 = (int) $s10;

        specialinvoke r0.<org.apache.lucene.index.FieldsReader: void addField(org.apache.lucene.document.Document,org.apache.lucene.index.FieldInfo,boolean,boolean,boolean,int)>($r21, $r7, $z14, z1, z3, $i18);

        goto label20;

     label14:
        $i19 = (int) $s10;

        specialinvoke r0.<org.apache.lucene.index.FieldsReader: void addField(org.apache.lucene.document.Document,org.apache.lucene.index.FieldInfo,boolean,boolean,boolean,int)>($r21, $r7, $z11, z1, z3, $i19);

        goto label21;

     label15:
        $i20 = (int) $s10;

        specialinvoke r0.<org.apache.lucene.index.FieldsReader: void addFieldLazy(org.apache.lucene.document.Document,org.apache.lucene.index.FieldInfo,boolean,boolean,boolean,boolean,int)>($r21, $r7, $z16, z1, z3, 1, $i20);

        goto label20;

     label16:
        $i21 = (int) $s10;

        specialinvoke r0.<org.apache.lucene.index.FieldsReader: void addFieldLazy(org.apache.lucene.document.Document,org.apache.lucene.index.FieldInfo,boolean,boolean,boolean,boolean,int)>($r21, $r7, $z10, z1, z3, 0, $i21);

        goto label20;

     label17:
        $i22 = (int) $s10;

        $i9 = specialinvoke r0.<org.apache.lucene.index.FieldsReader: int addFieldSize(org.apache.lucene.document.Document,org.apache.lucene.index.FieldInfo,boolean,boolean,int)>($r21, $r7, $z9, z1, $i22);

        specialinvoke r0.<org.apache.lucene.index.FieldsReader: void skipFieldBytes(boolean,boolean,int)>($z13, z1, $i9);

        goto label20;

     label18:
        $i23 = (int) $s10;

        specialinvoke r0.<org.apache.lucene.index.FieldsReader: int addFieldSize(org.apache.lucene.document.Document,org.apache.lucene.index.FieldInfo,boolean,boolean,int)>($r21, $r7, $z15, z1, $i23);

        goto label21;

     label19:
        $i24 = (int) $s10;

        specialinvoke r0.<org.apache.lucene.index.FieldsReader: void skipField(boolean,boolean,int)>($z12, z1, $i24);

     label20:
        i13 = i13 + 1;

        goto label01;

     label21:
        return $r21;
    }

    final org.apache.lucene.store.IndexInput rawDocs(int[], int, int) throws java.io.IOException
    {
        long $l1, $l9, l12, l14;
        java.lang.AssertionError $r7;
        int[] r5;
        int i0, i2, $i3, $i4, $i5, i6, $i7, $i8, $i10, $i11, i13;
        boolean $z0;
        org.apache.lucene.store.IndexInput $r1, $r2, $r3, $r4, $r6;
        org.apache.lucene.index.FieldsReader r0;

        r0 := @this: org.apache.lucene.index.FieldsReader;

        r5 := @parameter0: int[];

        i0 := @parameter1: int;

        i2 := @parameter2: int;

        specialinvoke r0.<org.apache.lucene.index.FieldsReader: void seekIndex(int)>(i0);

        $r1 = r0.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput indexStream>;

        $l1 = virtualinvoke $r1.<org.apache.lucene.store.IndexInput: long readLong()>();

        l12 = $l1;

        i13 = 0;

     label1:
        if i13 >= i2 goto label5;

        $i3 = r0.<org.apache.lucene.index.FieldsReader: int docStoreOffset>;

        $i4 = $i3 + i0;

        $i5 = $i4 + i13;

        i6 = $i5 + 1;

        $z0 = <org.apache.lucene.index.FieldsReader: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $i11 = r0.<org.apache.lucene.index.FieldsReader: int numTotalDocs>;

        if i6 <= $i11 goto label2;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label2:
        $i7 = r0.<org.apache.lucene.index.FieldsReader: int numTotalDocs>;

        if i6 >= $i7 goto label3;

        $r6 = r0.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput indexStream>;

        l14 = virtualinvoke $r6.<org.apache.lucene.store.IndexInput: long readLong()>();

        goto label4;

     label3:
        $r4 = r0.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        l14 = virtualinvoke $r4.<org.apache.lucene.store.IndexInput: long length()>();

     label4:
        $i8 = i13;

        i13 = i13 + 1;

        $l9 = l14 - l12;

        $i10 = (int) $l9;

        r5[$i8] = $i10;

        l12 = l14;

        goto label1;

     label5:
        $r2 = r0.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        virtualinvoke $r2.<org.apache.lucene.store.IndexInput: void seek(long)>($l1);

        $r3 = r0.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        return $r3;
    }

    private void skipField(boolean, boolean, int) throws java.io.IOException
    {
        org.apache.lucene.store.IndexInput $r1;
        org.apache.lucene.index.FieldReaderException $r2;
        org.apache.lucene.index.FieldsReader r0;
        int i0, i1;
        java.lang.StringBuilder $r3, $r4, $r6;
        java.lang.String $r5, $r7;
        boolean z0, z1;

        r0 := @this: org.apache.lucene.index.FieldsReader;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        i0 := @parameter2: int;

        lookupswitch(i0)
        {
            case 0: goto label1;
            case 8: goto label2;
            case 16: goto label3;
            case 24: goto label2;
            case 32: goto label3;
            default: goto label4;
        };

     label1:
        $r1 = r0.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        i1 = virtualinvoke $r1.<org.apache.lucene.store.IndexInput: int readVInt()>();

        goto label5;

     label2:
        i1 = 4;

        goto label5;

     label3:
        i1 = 8;

        goto label5;

     label4:
        $r2 = new org.apache.lucene.index.FieldReaderException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid numeric type: ");

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<org.apache.lucene.index.FieldReaderException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label5:
        specialinvoke r0.<org.apache.lucene.index.FieldsReader: void skipFieldBytes(boolean,boolean,int)>(z0, z1, i1);

        return;
    }

    private void skipFieldBytes(boolean, boolean, int) throws java.io.IOException
    {
        org.apache.lucene.store.IndexInput $r1, $r2, $r3;
        long $l2, $l3, $l4;
        org.apache.lucene.index.FieldsReader r0;
        int $i0, i1;
        boolean z0, z1;

        r0 := @this: org.apache.lucene.index.FieldsReader;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        i1 := @parameter2: int;

        $i0 = r0.<org.apache.lucene.index.FieldsReader: int format>;

        if $i0 >= 1 goto label1;

        if z0 != 0 goto label1;

        if z1 == 0 goto label2;

     label1:
        $r2 = r0.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        $r3 = r0.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        $l2 = virtualinvoke $r3.<org.apache.lucene.store.IndexInput: long getFilePointer()>();

        $l3 = (long) i1;

        $l4 = $l2 + $l3;

        virtualinvoke $r2.<org.apache.lucene.store.IndexInput: void seek(long)>($l4);

        goto label3;

     label2:
        $r1 = r0.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        virtualinvoke $r1.<org.apache.lucene.store.IndexInput: void skipChars(int)>(i1);

     label3:
        return;
    }

    private org.apache.lucene.document.NumericField loadNumericField(org.apache.lucene.index.FieldInfo, int) throws java.io.IOException
    {
        org.apache.lucene.index.FieldReaderException $r22;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.lucene.index.FieldsReader r4;
        org.apache.lucene.document.NumericField $r0, $r6, $r7, $r11, $r12, $r16, $r17, $r21;
        float $f0;
        java.lang.StringBuilder $r23, $r24, $r26;
        long $l1, $l3;
        java.lang.AssertionError $r28;
        int i0, $i2, $i4;
        java.lang.String $r3, $r9, $r14, $r19, $r25, $r27;
        double $d0;
        org.apache.lucene.document.Field$Store $r2, $r8, $r13, $r18;
        org.apache.lucene.store.IndexInput $r5, $r10, $r15, $r20;
        org.apache.lucene.index.FieldInfo r1;

        r4 := @this: org.apache.lucene.index.FieldsReader;

        r1 := @parameter0: org.apache.lucene.index.FieldInfo;

        i0 := @parameter1: int;

        $z0 = <org.apache.lucene.index.FieldsReader: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 != 0 goto label1;

        $r28 = new java.lang.AssertionError;

        specialinvoke $r28.<java.lang.AssertionError: void <init>()>();

        throw $r28;

     label1:
        lookupswitch(i0)
        {
            case 8: goto label2;
            case 16: goto label3;
            case 24: goto label4;
            case 32: goto label5;
            default: goto label6;
        };

     label2:
        $r17 = new org.apache.lucene.document.NumericField;

        $r19 = r1.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        $r18 = <org.apache.lucene.document.Field$Store: org.apache.lucene.document.Field$Store YES>;

        $z4 = r1.<org.apache.lucene.index.FieldInfo: boolean isIndexed>;

        specialinvoke $r17.<org.apache.lucene.document.NumericField: void <init>(java.lang.String,org.apache.lucene.document.Field$Store,boolean)>($r19, $r18, $z4);

        $r20 = r4.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        $i4 = virtualinvoke $r20.<org.apache.lucene.store.IndexInput: int readInt()>();

        $r21 = virtualinvoke $r17.<org.apache.lucene.document.NumericField: org.apache.lucene.document.NumericField setIntValue(int)>($i4);

        return $r21;

     label3:
        $r12 = new org.apache.lucene.document.NumericField;

        $r14 = r1.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        $r13 = <org.apache.lucene.document.Field$Store: org.apache.lucene.document.Field$Store YES>;

        $z3 = r1.<org.apache.lucene.index.FieldInfo: boolean isIndexed>;

        specialinvoke $r12.<org.apache.lucene.document.NumericField: void <init>(java.lang.String,org.apache.lucene.document.Field$Store,boolean)>($r14, $r13, $z3);

        $r15 = r4.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        $l3 = virtualinvoke $r15.<org.apache.lucene.store.IndexInput: long readLong()>();

        $r16 = virtualinvoke $r12.<org.apache.lucene.document.NumericField: org.apache.lucene.document.NumericField setLongValue(long)>($l3);

        return $r16;

     label4:
        $r7 = new org.apache.lucene.document.NumericField;

        $r9 = r1.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        $r8 = <org.apache.lucene.document.Field$Store: org.apache.lucene.document.Field$Store YES>;

        $z2 = r1.<org.apache.lucene.index.FieldInfo: boolean isIndexed>;

        specialinvoke $r7.<org.apache.lucene.document.NumericField: void <init>(java.lang.String,org.apache.lucene.document.Field$Store,boolean)>($r9, $r8, $z2);

        $r10 = r4.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        $i2 = virtualinvoke $r10.<org.apache.lucene.store.IndexInput: int readInt()>();

        $f0 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i2);

        $r11 = virtualinvoke $r7.<org.apache.lucene.document.NumericField: org.apache.lucene.document.NumericField setFloatValue(float)>($f0);

        return $r11;

     label5:
        $r0 = new org.apache.lucene.document.NumericField;

        $r3 = r1.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        $r2 = <org.apache.lucene.document.Field$Store: org.apache.lucene.document.Field$Store YES>;

        $z1 = r1.<org.apache.lucene.index.FieldInfo: boolean isIndexed>;

        specialinvoke $r0.<org.apache.lucene.document.NumericField: void <init>(java.lang.String,org.apache.lucene.document.Field$Store,boolean)>($r3, $r2, $z1);

        $r5 = r4.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        $l1 = virtualinvoke $r5.<org.apache.lucene.store.IndexInput: long readLong()>();

        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l1);

        $r6 = virtualinvoke $r0.<org.apache.lucene.document.NumericField: org.apache.lucene.document.NumericField setDoubleValue(double)>($d0);

        return $r6;

     label6:
        $r22 = new org.apache.lucene.index.FieldReaderException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid numeric type: ");

        $r25 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<org.apache.lucene.index.FieldReaderException: void <init>(java.lang.String)>($r27);

        throw $r22;
    }

    private void addFieldLazy(org.apache.lucene.document.Document, org.apache.lucene.index.FieldInfo, boolean, boolean, boolean, boolean, int) throws java.io.IOException
    {
        org.apache.lucene.index.FieldsReader$LazyField $r7, $r13, $r18;
        org.apache.lucene.document.Document r9;
        boolean z0, z1, $z2, $z3, $z4, $z5, z6, z7, $z8;
        org.apache.lucene.index.FieldInfo$IndexOptions $r24;
        org.apache.lucene.index.FieldsReader r3;
        long $l2, $l4, $l5, $l7, $l8, $l9, $l11, $l12, $l13;
        int i0, $i1, $i3, $i6, $i10;
        java.lang.String $r8, $r14, $r20;
        org.apache.lucene.document.Field$Store $r19, r23;
        org.apache.lucene.document.Field$Index $r1;
        org.apache.lucene.store.IndexInput $r4, $r5, $r6, $r10, $r11, $r12, $r15, $r16, $r17, $r21;
        org.apache.lucene.document.Field$TermVector $r2;
        org.apache.lucene.document.AbstractField r22;
        org.apache.lucene.index.FieldInfo r0;

        r3 := @this: org.apache.lucene.index.FieldsReader;

        r9 := @parameter0: org.apache.lucene.document.Document;

        r0 := @parameter1: org.apache.lucene.index.FieldInfo;

        z0 := @parameter2: boolean;

        z6 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        z7 := @parameter5: boolean;

        i0 := @parameter6: int;

        if z0 == 0 goto label1;

        $r16 = r3.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        $i10 = virtualinvoke $r16.<org.apache.lucene.store.IndexInput: int readVInt()>();

        $r17 = r3.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        $l11 = virtualinvoke $r17.<org.apache.lucene.store.IndexInput: long getFilePointer()>();

        $r18 = new org.apache.lucene.index.FieldsReader$LazyField;

        $r20 = r0.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        $r19 = <org.apache.lucene.document.Field$Store: org.apache.lucene.document.Field$Store YES>;

        specialinvoke $r18.<org.apache.lucene.index.FieldsReader$LazyField: void <init>(org.apache.lucene.index.FieldsReader,java.lang.String,org.apache.lucene.document.Field$Store,int,long,boolean,boolean,boolean)>(r3, $r20, $r19, $i10, $l11, z0, z6, z7);

        r22 = $r18;

        $r21 = r3.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        $l12 = (long) $i10;

        $l13 = $l11 + $l12;

        virtualinvoke $r21.<org.apache.lucene.store.IndexInput: void seek(long)>($l13);

        goto label6;

     label1:
        if i0 == 0 goto label2;

        r22 = specialinvoke r3.<org.apache.lucene.index.FieldsReader: org.apache.lucene.document.NumericField loadNumericField(org.apache.lucene.index.FieldInfo,int)>(r0, i0);

        goto label6;

     label2:
        r23 = <org.apache.lucene.document.Field$Store: org.apache.lucene.document.Field$Store YES>;

        $z2 = r0.<org.apache.lucene.index.FieldInfo: boolean isIndexed>;

        $r1 = staticinvoke <org.apache.lucene.document.Field$Index: org.apache.lucene.document.Field$Index toIndex(boolean,boolean)>($z2, z1);

        $z5 = r0.<org.apache.lucene.index.FieldInfo: boolean storeTermVector>;

        $z4 = r0.<org.apache.lucene.index.FieldInfo: boolean storeOffsetWithTermVector>;

        $z3 = r0.<org.apache.lucene.index.FieldInfo: boolean storePositionWithTermVector>;

        $r2 = staticinvoke <org.apache.lucene.document.Field$TermVector: org.apache.lucene.document.Field$TermVector toTermVector(boolean,boolean,boolean)>($z5, $z4, $z3);

        if z6 == 0 goto label3;

        $r11 = r3.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        $i6 = virtualinvoke $r11.<org.apache.lucene.store.IndexInput: int readVInt()>();

        $r12 = r3.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        $l7 = virtualinvoke $r12.<org.apache.lucene.store.IndexInput: long getFilePointer()>();

        $r13 = new org.apache.lucene.index.FieldsReader$LazyField;

        $r14 = r0.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        specialinvoke $r13.<org.apache.lucene.index.FieldsReader$LazyField: void <init>(org.apache.lucene.index.FieldsReader,java.lang.String,org.apache.lucene.document.Field$Store,int,long,boolean,boolean,boolean)>(r3, $r14, r23, $i6, $l7, z0, z6, z7);

        r22 = $r13;

        $r15 = r3.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        $l8 = (long) $i6;

        $l9 = $l7 + $l8;

        virtualinvoke $r15.<org.apache.lucene.store.IndexInput: void seek(long)>($l9);

        goto label6;

     label3:
        $r4 = r3.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        $i1 = virtualinvoke $r4.<org.apache.lucene.store.IndexInput: int readVInt()>();

        $r5 = r3.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        $l2 = virtualinvoke $r5.<org.apache.lucene.store.IndexInput: long getFilePointer()>();

        $i3 = r3.<org.apache.lucene.index.FieldsReader: int format>;

        if $i3 < 1 goto label4;

        $r10 = r3.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        $l4 = (long) $i1;

        $l5 = $l2 + $l4;

        virtualinvoke $r10.<org.apache.lucene.store.IndexInput: void seek(long)>($l5);

        goto label5;

     label4:
        $r6 = r3.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        virtualinvoke $r6.<org.apache.lucene.store.IndexInput: void skipChars(int)>($i1);

     label5:
        $r7 = new org.apache.lucene.index.FieldsReader$LazyField;

        $r8 = r0.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        specialinvoke $r7.<org.apache.lucene.index.FieldsReader$LazyField: void <init>(org.apache.lucene.index.FieldsReader,java.lang.String,org.apache.lucene.document.Field$Store,org.apache.lucene.document.Field$Index,org.apache.lucene.document.Field$TermVector,int,long,boolean,boolean,boolean)>(r3, $r8, r23, $r1, $r2, $i1, $l2, z0, z6, z7);

        r22 = $r7;

     label6:
        $z8 = r0.<org.apache.lucene.index.FieldInfo: boolean omitNorms>;

        virtualinvoke r22.<org.apache.lucene.document.AbstractField: void setOmitNorms(boolean)>($z8);

        $r24 = r0.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$IndexOptions indexOptions>;

        virtualinvoke r22.<org.apache.lucene.document.AbstractField: void setIndexOptions(org.apache.lucene.index.FieldInfo$IndexOptions)>($r24);

        virtualinvoke r9.<org.apache.lucene.document.Document: void add(org.apache.lucene.document.Fieldable)>(r22);

        return;
    }

    private void addField(org.apache.lucene.document.Document, org.apache.lucene.index.FieldInfo, boolean, boolean, boolean, int) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException
    {
        byte[] r10, $r15, $r22, r23;
        org.apache.lucene.document.Document r8;
        boolean z0, z1, $z2, $z3, $z4, $z5, z6, $z7;
        org.apache.lucene.index.FieldInfo$IndexOptions $r26;
        org.apache.lucene.index.FieldsReader r4;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.String $r6, $r7, $r13, $r14, $r19, $r21;
        org.apache.lucene.document.Field$Store r25;
        org.apache.lucene.document.Field$Index $r1;
        org.apache.lucene.store.IndexInput $r5, $r9, $r11, $r16, $r17;
        org.apache.lucene.document.Field$TermVector $r2;
        org.apache.lucene.document.AbstractField r24;
        org.apache.lucene.document.Field $r3, $r12, $r18, $r20;
        org.apache.lucene.index.FieldInfo r0;

        r4 := @this: org.apache.lucene.index.FieldsReader;

        r8 := @parameter0: org.apache.lucene.document.Document;

        r0 := @parameter1: org.apache.lucene.index.FieldInfo;

        z0 := @parameter2: boolean;

        z6 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        i0 := @parameter5: int;

        if z0 == 0 goto label3;

        $r16 = r4.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        $i3 = virtualinvoke $r16.<org.apache.lucene.store.IndexInput: int readVInt()>();

        r23 = newarray (byte)[$i3];

        $r17 = r4.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        $i4 = lengthof r23;

        virtualinvoke $r17.<org.apache.lucene.store.IndexInput: void readBytes(byte[],int,int)>(r23, 0, $i4);

        if z6 == 0 goto label1;

        $r20 = new org.apache.lucene.document.Field;

        $r21 = r0.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        $r22 = specialinvoke r4.<org.apache.lucene.index.FieldsReader: byte[] uncompress(byte[])>(r23);

        specialinvoke $r20.<org.apache.lucene.document.Field: void <init>(java.lang.String,byte[])>($r21, $r22);

        r24 = $r20;

        goto label2;

     label1:
        $r18 = new org.apache.lucene.document.Field;

        $r19 = r0.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        specialinvoke $r18.<org.apache.lucene.document.Field: void <init>(java.lang.String,byte[])>($r19, r23);

        r24 = $r18;

     label2:
        goto label6;

     label3:
        if i0 == 0 goto label4;

        r24 = specialinvoke r4.<org.apache.lucene.index.FieldsReader: org.apache.lucene.document.NumericField loadNumericField(org.apache.lucene.index.FieldInfo,int)>(r0, i0);

        goto label6;

     label4:
        r25 = <org.apache.lucene.document.Field$Store: org.apache.lucene.document.Field$Store YES>;

        $z2 = r0.<org.apache.lucene.index.FieldInfo: boolean isIndexed>;

        $r1 = staticinvoke <org.apache.lucene.document.Field$Index: org.apache.lucene.document.Field$Index toIndex(boolean,boolean)>($z2, z1);

        $z5 = r0.<org.apache.lucene.index.FieldInfo: boolean storeTermVector>;

        $z4 = r0.<org.apache.lucene.index.FieldInfo: boolean storeOffsetWithTermVector>;

        $z3 = r0.<org.apache.lucene.index.FieldInfo: boolean storePositionWithTermVector>;

        $r2 = staticinvoke <org.apache.lucene.document.Field$TermVector: org.apache.lucene.document.Field$TermVector toTermVector(boolean,boolean,boolean)>($z5, $z4, $z3);

        if z6 == 0 goto label5;

        $r9 = r4.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        $i1 = virtualinvoke $r9.<org.apache.lucene.store.IndexInput: int readVInt()>();

        r10 = newarray (byte)[$i1];

        $r11 = r4.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        $i2 = lengthof r10;

        virtualinvoke $r11.<org.apache.lucene.store.IndexInput: void readBytes(byte[],int,int)>(r10, 0, $i2);

        $r12 = new org.apache.lucene.document.Field;

        $r14 = r0.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        $r13 = new java.lang.String;

        $r15 = specialinvoke r4.<org.apache.lucene.index.FieldsReader: byte[] uncompress(byte[])>(r10);

        specialinvoke $r13.<java.lang.String: void <init>(byte[],java.lang.String)>($r15, "UTF-8");

        specialinvoke $r12.<org.apache.lucene.document.Field: void <init>(java.lang.String,boolean,java.lang.String,org.apache.lucene.document.Field$Store,org.apache.lucene.document.Field$Index,org.apache.lucene.document.Field$TermVector)>($r14, 0, $r13, r25, $r1, $r2);

        r24 = $r12;

        goto label6;

     label5:
        $r3 = new org.apache.lucene.document.Field;

        $r6 = r0.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        $r5 = r4.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        $r7 = virtualinvoke $r5.<org.apache.lucene.store.IndexInput: java.lang.String readString()>();

        specialinvoke $r3.<org.apache.lucene.document.Field: void <init>(java.lang.String,boolean,java.lang.String,org.apache.lucene.document.Field$Store,org.apache.lucene.document.Field$Index,org.apache.lucene.document.Field$TermVector)>($r6, 0, $r7, r25, $r1, $r2);

        r24 = $r3;

     label6:
        $r26 = r0.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$IndexOptions indexOptions>;

        virtualinvoke r24.<org.apache.lucene.document.AbstractField: void setIndexOptions(org.apache.lucene.index.FieldInfo$IndexOptions)>($r26);

        $z7 = r0.<org.apache.lucene.index.FieldInfo: boolean omitNorms>;

        virtualinvoke r24.<org.apache.lucene.document.AbstractField: void setOmitNorms(boolean)>($z7);

        virtualinvoke r8.<org.apache.lucene.document.Document: void add(org.apache.lucene.document.Fieldable)>(r24);

        return;
    }

    private int addFieldSize(org.apache.lucene.document.Document, org.apache.lucene.index.FieldInfo, boolean, boolean, int) throws java.io.IOException
    {
        byte[] $r10;
        org.apache.lucene.index.FieldReaderException $r4;
        org.apache.lucene.document.Document r0;
        byte $b6, $b8, $b10, $b11;
        int i0, $i1, i2, $i3, i4, $i5, $i7, $i9;
        java.lang.String $r7, $r9, $r12;
        boolean z0, z1;
        org.apache.lucene.store.IndexInput $r3;
        org.apache.lucene.index.FieldsReader r2;
        org.apache.lucene.document.Field $r11;
        org.apache.lucene.index.FieldInfo r1;
        java.lang.StringBuilder $r5, $r6, $r8;

        r2 := @this: org.apache.lucene.index.FieldsReader;

        r0 := @parameter0: org.apache.lucene.document.Document;

        r1 := @parameter1: org.apache.lucene.index.FieldInfo;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        i0 := @parameter4: int;

        lookupswitch(i0)
        {
            case 0: goto label1;
            case 8: goto label5;
            case 16: goto label6;
            case 24: goto label5;
            case 32: goto label6;
            default: goto label7;
        };

     label1:
        $r3 = r2.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput fieldsStream>;

        $i1 = virtualinvoke $r3.<org.apache.lucene.store.IndexInput: int readVInt()>();

        i2 = $i1;

        if z0 != 0 goto label2;

        if z1 == 0 goto label3;

     label2:
        $i3 = $i1;

        goto label4;

     label3:
        $i3 = 2 * $i1;

     label4:
        i4 = $i3;

        goto label8;

     label5:
        i4 = 4;

        i2 = 4;

        goto label8;

     label6:
        i4 = 8;

        i2 = 8;

        goto label8;

     label7:
        $r4 = new org.apache.lucene.index.FieldReaderException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid numeric type: ");

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.apache.lucene.index.FieldReaderException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label8:
        $r10 = newarray (byte)[4];

        $i5 = i4 >>> 24;

        $b6 = (byte) $i5;

        $r10[0] = $b6;

        $i7 = i4 >>> 16;

        $b8 = (byte) $i7;

        $r10[1] = $b8;

        $i9 = i4 >>> 8;

        $b10 = (byte) $i9;

        $r10[2] = $b10;

        $b11 = (byte) i4;

        $r10[3] = $b11;

        $r11 = new org.apache.lucene.document.Field;

        $r12 = r1.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        specialinvoke $r11.<org.apache.lucene.document.Field: void <init>(java.lang.String,byte[])>($r12, $r10);

        virtualinvoke r0.<org.apache.lucene.document.Document: void add(org.apache.lucene.document.Fieldable)>($r11);

        return i2;
    }

    private byte[] uncompress(byte[]) throws org.apache.lucene.index.CorruptIndexException
    {
        byte[] r0, $r1;
        org.apache.lucene.index.CorruptIndexException $r3;
        org.apache.lucene.index.FieldsReader r9;
        java.util.zip.DataFormatException $r2;
        java.lang.StringBuilder $r4, $r5, $r7;
        java.lang.String $r6, $r8;

        r9 := @this: org.apache.lucene.index.FieldsReader;

        r0 := @parameter0: byte[];

     label1:
        $r1 = staticinvoke <org.apache.lucene.document.CompressionTools: byte[] decompress(byte[])>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new org.apache.lucene.index.CorruptIndexException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("field data are in wrong format: ");

        $r6 = virtualinvoke $r2.<java.util.zip.DataFormatException: java.lang.String toString()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.apache.lucene.index.CorruptIndexException: void <init>(java.lang.String)>($r8);

        virtualinvoke $r3.<org.apache.lucene.index.CorruptIndexException: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r3;

        catch java.util.zip.DataFormatException from label1 to label2 with label3;
    }

    static org.apache.lucene.util.CloseableThreadLocal access$000(org.apache.lucene.index.FieldsReader)
    {
        org.apache.lucene.index.FieldsReader r0;
        org.apache.lucene.util.CloseableThreadLocal $r1;

        r0 := @parameter0: org.apache.lucene.index.FieldsReader;

        $r1 = r0.<org.apache.lucene.index.FieldsReader: org.apache.lucene.util.CloseableThreadLocal fieldsStreamTL>;

        return $r1;
    }

    static org.apache.lucene.store.IndexInput access$100(org.apache.lucene.index.FieldsReader)
    {
        org.apache.lucene.index.FieldsReader r0;
        org.apache.lucene.store.IndexInput $r1;

        r0 := @parameter0: org.apache.lucene.index.FieldsReader;

        $r1 = r0.<org.apache.lucene.index.FieldsReader: org.apache.lucene.store.IndexInput cloneableFieldsStream>;

        return $r1;
    }

    static void access$200(org.apache.lucene.index.FieldsReader) throws org.apache.lucene.store.AlreadyClosedException
    {
        org.apache.lucene.index.FieldsReader r0;

        r0 := @parameter0: org.apache.lucene.index.FieldsReader;

        specialinvoke r0.<org.apache.lucene.index.FieldsReader: void ensureOpen()>();

        return;
    }

    static byte[] access$300(org.apache.lucene.index.FieldsReader, byte[]) throws org.apache.lucene.index.CorruptIndexException
    {
        org.apache.lucene.index.FieldsReader r0;
        byte[] r1, $r2;

        r0 := @parameter0: org.apache.lucene.index.FieldsReader;

        r1 := @parameter1: byte[];

        $r2 = specialinvoke r0.<org.apache.lucene.index.FieldsReader: byte[] uncompress(byte[])>(r1);

        return $r2;
    }

    static int access$400(org.apache.lucene.index.FieldsReader)
    {
        org.apache.lucene.index.FieldsReader r0;
        int $i0;

        r0 := @parameter0: org.apache.lucene.index.FieldsReader;

        $i0 = r0.<org.apache.lucene.index.FieldsReader: int format>;

        return $i0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/index/FieldsReader;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.index.FieldsReader: boolean $assertionsDisabled> = $z1;

        return;
    }
}
