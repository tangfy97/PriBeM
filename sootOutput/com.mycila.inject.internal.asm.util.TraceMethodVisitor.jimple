public class com.mycila.inject.internal.asm.util.TraceMethodVisitor extends com.mycila.inject.internal.asm.util.TraceAbstractVisitor implements com.mycila.inject.internal.asm.MethodVisitor
{
    protected com.mycila.inject.internal.asm.MethodVisitor mv;
    protected java.lang.String tab2;
    protected java.lang.String tab3;
    protected java.lang.String ltab;
    protected final java.util.Map labelNames;

    public void <init>()
    {
        com.mycila.inject.internal.asm.util.TraceMethodVisitor r0;

        r0 := @this: com.mycila.inject.internal.asm.util.TraceMethodVisitor;

        specialinvoke r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: void <init>(com.mycila.inject.internal.asm.MethodVisitor)>(null);

        return;
    }

    public void <init>(com.mycila.inject.internal.asm.MethodVisitor)
    {
        com.mycila.inject.internal.asm.util.TraceMethodVisitor r0;
        java.util.HashMap $r1;
        com.mycila.inject.internal.asm.MethodVisitor r2;

        r0 := @this: com.mycila.inject.internal.asm.util.TraceMethodVisitor;

        r2 := @parameter0: com.mycila.inject.internal.asm.MethodVisitor;

        specialinvoke r0.<com.mycila.inject.internal.asm.util.TraceAbstractVisitor: void <init>()>();

        r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.String tab2> = "    ";

        r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.String tab3> = "      ";

        r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.String ltab> = "   ";

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.util.Map labelNames> = $r1;

        r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.MethodVisitor mv> = r2;

        return;
    }

    public com.mycila.inject.internal.asm.AnnotationVisitor visitAnnotation(java.lang.String, boolean)
    {
        com.mycila.inject.internal.asm.util.TraceAnnotationVisitor $r5;
        com.mycila.inject.internal.asm.MethodVisitor $r3, $r4;
        com.mycila.inject.internal.asm.AnnotationVisitor $r2, $r6;
        com.mycila.inject.internal.asm.util.TraceMethodVisitor r0;
        java.lang.String r1;
        boolean z0;

        r0 := @this: com.mycila.inject.internal.asm.util.TraceMethodVisitor;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = specialinvoke r0.<com.mycila.inject.internal.asm.util.TraceAbstractVisitor: com.mycila.inject.internal.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>(r1, z0);

        $r3 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.MethodVisitor mv>;

        if $r3 == null goto label1;

        $r5 = (com.mycila.inject.internal.asm.util.TraceAnnotationVisitor) $r2;

        $r4 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $r6 = interfaceinvoke $r4.<com.mycila.inject.internal.asm.MethodVisitor: com.mycila.inject.internal.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>(r1, z0);

        $r5.<com.mycila.inject.internal.asm.util.TraceAnnotationVisitor: com.mycila.inject.internal.asm.AnnotationVisitor av> = $r6;

     label1:
        return $r2;
    }

    public void visitAttribute(com.mycila.inject.internal.asm.Attribute)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r11, $r12;
        java.lang.StringBuffer $r1, $r3, $r4, $r7, $r8, $r14;
        java.util.Map $r13;
        int $i1;
        java.lang.String $r2, $r6, $r10;
        boolean $z0;
        com.mycila.inject.internal.asm.util.Traceable $r15;
        java.util.List $r9;
        com.mycila.inject.internal.asm.util.TraceMethodVisitor r0;
        com.mycila.inject.internal.asm.Attribute r5;

        r0 := @this: com.mycila.inject.internal.asm.util.TraceMethodVisitor;

        r5 := @parameter0: com.mycila.inject.internal.asm.Attribute;

        $r1 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>(0);

        $r3 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r2 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.String tab>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ATTRIBUTE ");

        $r6 = r5.<com.mycila.inject.internal.asm.Attribute: java.lang.String type>;

        $i1 = (int) -1;

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: void appendDescriptor(int,java.lang.String)>($i1, $r6);

        $z0 = r5 instanceof com.mycila.inject.internal.asm.util.Traceable;

        if $z0 == 0 goto label1;

        $r15 = (com.mycila.inject.internal.asm.util.Traceable) r5;

        $r14 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r13 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.util.Map labelNames>;

        interfaceinvoke $r15.<com.mycila.inject.internal.asm.util.Traceable: void trace(java.lang.StringBuffer,java.util.Map)>($r14, $r13);

        goto label2;

     label1:
        $r7 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" : unknown\n");

     label2:
        $r9 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.util.List text>;

        $r8 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r10);

        $r11 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.MethodVisitor mv>;

        if $r11 == null goto label3;

        $r12 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r12.<com.mycila.inject.internal.asm.MethodVisitor: void visitAttribute(com.mycila.inject.internal.asm.Attribute)>(r5);

     label3:
        return;
    }

    public com.mycila.inject.internal.asm.AnnotationVisitor visitAnnotationDefault()
    {
        java.util.List $r2, $r8, $r9, $r10;
        com.mycila.inject.internal.asm.util.TraceAnnotationVisitor $r7;
        com.mycila.inject.internal.asm.MethodVisitor $r11, $r12;
        java.lang.StringBuffer $r1, $r4, $r5;
        com.mycila.inject.internal.asm.AnnotationVisitor $r13;
        com.mycila.inject.internal.asm.util.TraceMethodVisitor r0;
        java.lang.String $r3, $r6;

        r0 := @this: com.mycila.inject.internal.asm.util.TraceMethodVisitor;

        $r2 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.util.List text>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.String tab2>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("default=");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r6);

        $r7 = virtualinvoke r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.util.TraceAnnotationVisitor createTraceAnnotationVisitor()>();

        $r8 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.util.List text>;

        $r9 = virtualinvoke $r7.<com.mycila.inject.internal.asm.util.TraceAnnotationVisitor: java.util.List getText()>();

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r9);

        $r10 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.util.List text>;

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>("\n");

        $r11 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.MethodVisitor mv>;

        if $r11 == null goto label1;

        $r12 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $r13 = interfaceinvoke $r12.<com.mycila.inject.internal.asm.MethodVisitor: com.mycila.inject.internal.asm.AnnotationVisitor visitAnnotationDefault()>();

        $r7.<com.mycila.inject.internal.asm.util.TraceAnnotationVisitor: com.mycila.inject.internal.asm.AnnotationVisitor av> = $r13;

     label1:
        return $r7;
    }

    public com.mycila.inject.internal.asm.AnnotationVisitor visitParameterAnnotation(int, java.lang.String, boolean)
    {
        java.lang.Integer $r14;
        com.mycila.inject.internal.asm.util.TraceAnnotationVisitor $r10;
        com.mycila.inject.internal.asm.MethodVisitor $r17, $r18;
        java.lang.StringBuffer $r1, $r3, $r4, $r6, $r7;
        int i0;
        com.mycila.inject.internal.asm.AnnotationVisitor $r19;
        java.lang.String $r2, r5, $r9, $r20;
        boolean z0;
        java.util.List $r8, $r11, $r12, $r13, $r15, $r16;
        com.mycila.inject.internal.asm.util.TraceMethodVisitor r0;

        r0 := @this: com.mycila.inject.internal.asm.util.TraceMethodVisitor;

        i0 := @parameter0: int;

        r5 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r1 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>(0);

        $r3 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r2 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.String tab2>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(64);

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: void appendDescriptor(int,java.lang.String)>(1, r5);

        $r6 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(40);

        $r8 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.util.List text>;

        $r7 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r9);

        $r10 = virtualinvoke r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.util.TraceAnnotationVisitor createTraceAnnotationVisitor()>();

        $r11 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.util.List text>;

        $r12 = virtualinvoke $r10.<com.mycila.inject.internal.asm.util.TraceAnnotationVisitor: java.util.List getText()>();

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r12);

        $r13 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.util.List text>;

        if z0 == 0 goto label1;

        $r20 = ") // parameter ";

        goto label2;

     label1:
        $r20 = ") // invisible, parameter ";

     label2:
        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>($r20);

        $r15 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.util.List text>;

        $r14 = new java.lang.Integer;

        specialinvoke $r14.<java.lang.Integer: void <init>(int)>(i0);

        interfaceinvoke $r15.<java.util.List: boolean add(java.lang.Object)>($r14);

        $r16 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.util.List text>;

        interfaceinvoke $r16.<java.util.List: boolean add(java.lang.Object)>("\n");

        $r17 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.MethodVisitor mv>;

        if $r17 == null goto label3;

        $r18 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $r19 = interfaceinvoke $r18.<com.mycila.inject.internal.asm.MethodVisitor: com.mycila.inject.internal.asm.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)>(i0, r5, z0);

        $r10.<com.mycila.inject.internal.asm.util.TraceAnnotationVisitor: com.mycila.inject.internal.asm.AnnotationVisitor av> = $r19;

     label3:
        return $r10;
    }

    public void visitCode()
    {
        com.mycila.inject.internal.asm.util.TraceMethodVisitor r0;
        com.mycila.inject.internal.asm.MethodVisitor $r1, $r2;

        r0 := @this: com.mycila.inject.internal.asm.util.TraceMethodVisitor;

        $r1 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.MethodVisitor mv>;

        if $r1 == null goto label1;

        $r2 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitCode()>();

     label1:
        return;
    }

    public void visitFrame(int, int, java.lang.Object[], int, java.lang.Object[])
    {
        java.lang.Object[] r6, r7;
        com.mycila.inject.internal.asm.MethodVisitor $r8, $r21;
        java.lang.StringBuffer $r1, $r3, $r4, $r5, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r19;
        int i0, i1, i2;
        java.lang.String $r2, $r20;
        java.util.List $r18;
        com.mycila.inject.internal.asm.util.TraceMethodVisitor r0;

        r0 := @this: com.mycila.inject.internal.asm.util.TraceMethodVisitor;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r7 := @parameter2: java.lang.Object[];

        i2 := @parameter3: int;

        r6 := @parameter4: java.lang.Object[];

        $r1 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>(0);

        $r3 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r2 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.String ltab>;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r4 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FRAME ");

        tableswitch(i0)
        {
            case -1: goto label1;
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label5;
            default: goto label6;
        };

     label1:
        $r14 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FULL [");

        specialinvoke r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: void appendFrameTypes(int,java.lang.Object[])>(i1, r7);

        $r15 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] [");

        specialinvoke r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: void appendFrameTypes(int,java.lang.Object[])>(i2, r6);

        $r16 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        goto label6;

     label2:
        $r12 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("APPEND [");

        specialinvoke r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: void appendFrameTypes(int,java.lang.Object[])>(i1, r7);

        $r13 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        goto label6;

     label3:
        $r10 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("CHOP ");

        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        goto label6;

     label4:
        $r9 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("SAME");

        goto label6;

     label5:
        $r5 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("SAME1 ");

        specialinvoke r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: void appendFrameTypes(int,java.lang.Object[])>(1, r6);

     label6:
        $r17 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        $r18 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.util.List text>;

        $r19 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r18.<java.util.List: boolean add(java.lang.Object)>($r20);

        $r21 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.MethodVisitor mv>;

        if $r21 == null goto label7;

        $r8 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r8.<com.mycila.inject.internal.asm.MethodVisitor: void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])>(i0, i1, r7, i2, r6);

     label7:
        return;
    }

    public void visitInsn(int)
    {
        java.lang.String[] $r5;
        java.util.List $r9;
        com.mycila.inject.internal.asm.MethodVisitor $r11, $r12;
        java.lang.StringBuffer $r1, $r3, $r4, $r7, $r8;
        int i0;
        com.mycila.inject.internal.asm.util.TraceMethodVisitor r0;
        java.lang.String $r2, $r6, $r10;

        r0 := @this: com.mycila.inject.internal.asm.util.TraceMethodVisitor;

        i0 := @parameter0: int;

        $r1 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>(0);

        $r3 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r2 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.String tab2>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r5 = <com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.String[] OPCODES>;

        $r6 = $r5[i0];

        $r7 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        $r9 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.util.List text>;

        $r8 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r10);

        $r11 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.MethodVisitor mv>;

        if $r11 == null goto label1;

        $r12 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r12.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(i0);

     label1:
        return;
    }

    public void visitIntInsn(int, int)
    {
        java.lang.String[] $r5, $r15;
        com.mycila.inject.internal.asm.MethodVisitor $r13, $r14;
        java.lang.StringBuffer $r1, $r3, $r4, $r7, $r8, $r9, $r10;
        int i0, i1;
        java.lang.String $r2, $r6, $r12, $r16;
        java.util.List $r11;
        com.mycila.inject.internal.asm.util.TraceMethodVisitor r0;

        r0 := @this: com.mycila.inject.internal.asm.util.TraceMethodVisitor;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>(0);

        $r3 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r2 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.String tab2>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r5 = <com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.String[] OPCODES>;

        $r6 = $r5[i0];

        $r7 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        if i0 != 188 goto label1;

        $r15 = <com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.String[] TYPES>;

        $r16 = $r15[i1];

        goto label2;

     label1:
        $r16 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i1);

     label2:
        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        $r11 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.util.List text>;

        $r10 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r12);

        $r13 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.MethodVisitor mv>;

        if $r13 == null goto label3;

        $r14 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r14.<com.mycila.inject.internal.asm.MethodVisitor: void visitIntInsn(int,int)>(i0, i1);

     label3:
        return;
    }

    public void visitVarInsn(int, int)
    {
        java.lang.String[] $r5;
        com.mycila.inject.internal.asm.MethodVisitor $r13, $r14;
        java.lang.StringBuffer $r1, $r3, $r4, $r7, $r8, $r9, $r10;
        int i0, i1;
        java.lang.String $r2, $r6, $r12;
        java.util.List $r11;
        com.mycila.inject.internal.asm.util.TraceMethodVisitor r0;

        r0 := @this: com.mycila.inject.internal.asm.util.TraceMethodVisitor;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>(0);

        $r3 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r2 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.String tab2>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r5 = <com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.String[] OPCODES>;

        $r6 = $r5[i0];

        $r7 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        $r11 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.util.List text>;

        $r10 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r12);

        $r13 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.MethodVisitor mv>;

        if $r13 == null goto label1;

        $r14 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r14.<com.mycila.inject.internal.asm.MethodVisitor: void visitVarInsn(int,int)>(i0, i1);

     label1:
        return;
    }

    public void visitTypeInsn(int, java.lang.String)
    {
        java.lang.String[] $r5;
        com.mycila.inject.internal.asm.MethodVisitor $r13, $r14;
        java.lang.StringBuffer $r1, $r3, $r4, $r7, $r9, $r10;
        int i0;
        java.lang.String $r2, $r6, r8, $r12;
        java.util.List $r11;
        com.mycila.inject.internal.asm.util.TraceMethodVisitor r0;

        r0 := @this: com.mycila.inject.internal.asm.util.TraceMethodVisitor;

        i0 := @parameter0: int;

        r8 := @parameter1: java.lang.String;

        $r1 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>(0);

        $r3 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r2 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.String tab2>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r5 = <com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.String[] OPCODES>;

        $r6 = $r5[i0];

        $r7 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: void appendDescriptor(int,java.lang.String)>(0, r8);

        $r9 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        $r11 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.util.List text>;

        $r10 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r12);

        $r13 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.MethodVisitor mv>;

        if $r13 == null goto label1;

        $r14 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r14.<com.mycila.inject.internal.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(i0, r8);

     label1:
        return;
    }

    public void visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String[] $r5;
        com.mycila.inject.internal.asm.MethodVisitor $r18, $r19;
        java.lang.StringBuffer $r1, $r3, $r4, $r7, $r9, $r10, $r12, $r14, $r15;
        int i0;
        java.lang.String $r2, $r6, r8, r11, r13, $r17;
        java.util.List $r16;
        com.mycila.inject.internal.asm.util.TraceMethodVisitor r0;

        r0 := @this: com.mycila.inject.internal.asm.util.TraceMethodVisitor;

        i0 := @parameter0: int;

        r8 := @parameter1: java.lang.String;

        r11 := @parameter2: java.lang.String;

        r13 := @parameter3: java.lang.String;

        $r1 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>(0);

        $r3 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r2 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.String tab2>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r5 = <com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.String[] OPCODES>;

        $r6 = $r5[i0];

        $r7 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: void appendDescriptor(int,java.lang.String)>(0, r8);

        $r9 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r11);

        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" : ");

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: void appendDescriptor(int,java.lang.String)>(1, r13);

        $r14 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        $r16 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.util.List text>;

        $r15 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r17 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r16.<java.util.List: boolean add(java.lang.Object)>($r17);

        $r18 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.MethodVisitor mv>;

        if $r18 == null goto label1;

        $r19 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r19.<com.mycila.inject.internal.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(i0, r8, r11, r13);

     label1:
        return;
    }

    public void visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String[] $r5;
        com.mycila.inject.internal.asm.MethodVisitor $r18, $r19;
        java.lang.StringBuffer $r1, $r3, $r4, $r7, $r9, $r10, $r12, $r14, $r15;
        int i0;
        java.lang.String $r2, $r6, r8, r11, r13, $r17;
        java.util.List $r16;
        com.mycila.inject.internal.asm.util.TraceMethodVisitor r0;

        r0 := @this: com.mycila.inject.internal.asm.util.TraceMethodVisitor;

        i0 := @parameter0: int;

        r8 := @parameter1: java.lang.String;

        r11 := @parameter2: java.lang.String;

        r13 := @parameter3: java.lang.String;

        $r1 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>(0);

        $r3 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r2 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.String tab2>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r5 = <com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.String[] OPCODES>;

        $r6 = $r5[i0];

        $r7 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: void appendDescriptor(int,java.lang.String)>(0, r8);

        $r9 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r11);

        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: void appendDescriptor(int,java.lang.String)>(3, r13);

        $r14 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        $r16 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.util.List text>;

        $r15 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r17 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r16.<java.util.List: boolean add(java.lang.Object)>($r17);

        $r18 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.MethodVisitor mv>;

        if $r18 == null goto label1;

        $r19 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r19.<com.mycila.inject.internal.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(i0, r8, r11, r13);

     label1:
        return;
    }

    public void visitJumpInsn(int, com.mycila.inject.internal.asm.Label)
    {
        java.lang.String[] $r5;
        com.mycila.inject.internal.asm.MethodVisitor $r13, $r14;
        java.lang.StringBuffer $r1, $r3, $r4, $r7, $r9, $r10;
        int i0;
        java.lang.String $r2, $r6, $r12;
        java.util.List $r11;
        com.mycila.inject.internal.asm.Label r8;
        com.mycila.inject.internal.asm.util.TraceMethodVisitor r0;

        r0 := @this: com.mycila.inject.internal.asm.util.TraceMethodVisitor;

        i0 := @parameter0: int;

        r8 := @parameter1: com.mycila.inject.internal.asm.Label;

        $r1 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>(0);

        $r3 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r2 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.String tab2>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r5 = <com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.String[] OPCODES>;

        $r6 = $r5[i0];

        $r7 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: void appendLabel(com.mycila.inject.internal.asm.Label)>(r8);

        $r9 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        $r11 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.util.List text>;

        $r10 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r12);

        $r13 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.MethodVisitor mv>;

        if $r13 == null goto label1;

        $r14 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r14.<com.mycila.inject.internal.asm.MethodVisitor: void visitJumpInsn(int,com.mycila.inject.internal.asm.Label)>(i0, r8);

     label1:
        return;
    }

    public void visitLabel(com.mycila.inject.internal.asm.Label)
    {
        java.util.List $r7;
        com.mycila.inject.internal.asm.MethodVisitor $r9, $r10;
        java.lang.StringBuffer $r1, $r3, $r5, $r6;
        com.mycila.inject.internal.asm.Label r4;
        com.mycila.inject.internal.asm.util.TraceMethodVisitor r0;
        java.lang.String $r2, $r8;

        r0 := @this: com.mycila.inject.internal.asm.util.TraceMethodVisitor;

        r4 := @parameter0: com.mycila.inject.internal.asm.Label;

        $r1 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>(0);

        $r3 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r2 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.String ltab>;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: void appendLabel(com.mycila.inject.internal.asm.Label)>(r4);

        $r5 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        $r7 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.util.List text>;

        $r6 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r8);

        $r9 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.MethodVisitor mv>;

        if $r9 == null goto label1;

        $r10 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r10.<com.mycila.inject.internal.asm.MethodVisitor: void visitLabel(com.mycila.inject.internal.asm.Label)>(r4);

     label1:
        return;
    }

    public void visitLdcInsn(java.lang.Object)
    {
        com.mycila.inject.internal.asm.Type $r8;
        com.mycila.inject.internal.asm.MethodVisitor $r7, $r18;
        java.lang.StringBuffer $r1, $r3, $r4, $r6, $r9, $r11, $r13, $r14, $r16;
        java.lang.String $r2, $r10, $r12, $r17;
        boolean $z0, $z1;
        java.util.List $r15;
        com.mycila.inject.internal.asm.util.TraceMethodVisitor r0;
        java.lang.Object r5;

        r0 := @this: com.mycila.inject.internal.asm.util.TraceMethodVisitor;

        r5 := @parameter0: java.lang.Object;

        $r1 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>(0);

        $r3 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r2 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.String tab2>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("LDC ");

        $z0 = r5 instanceof java.lang.String;

        if $z0 == 0 goto label1;

        $r13 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r12 = (java.lang.String) r5;

        staticinvoke <com.mycila.inject.internal.asm.util.AbstractVisitor: void appendString(java.lang.StringBuffer,java.lang.String)>($r13, $r12);

        goto label3;

     label1:
        $z1 = r5 instanceof com.mycila.inject.internal.asm.Type;

        if $z1 == 0 goto label2;

        $r9 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r8 = (com.mycila.inject.internal.asm.Type) r5;

        $r10 = virtualinvoke $r8.<com.mycila.inject.internal.asm.Type: java.lang.String getDescriptor()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".class");

        goto label3;

     label2:
        $r6 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r5);

     label3:
        $r14 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        $r15 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.util.List text>;

        $r16 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r15.<java.util.List: boolean add(java.lang.Object)>($r17);

        $r18 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.MethodVisitor mv>;

        if $r18 == null goto label4;

        $r7 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r7.<com.mycila.inject.internal.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>(r5);

     label4:
        return;
    }

    public void visitIincInsn(int, int)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r12, $r13;
        java.lang.StringBuffer $r1, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        int i0, i1;
        java.lang.String $r2, $r11;
        java.util.List $r10;
        com.mycila.inject.internal.asm.util.TraceMethodVisitor r0;

        r0 := @this: com.mycila.inject.internal.asm.util.TraceMethodVisitor;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>(0);

        $r3 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r2 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.String tab2>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("IINC ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        $r10 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.util.List text>;

        $r9 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r11);

        $r12 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.MethodVisitor mv>;

        if $r12 == null goto label1;

        $r13 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r13.<com.mycila.inject.internal.asm.MethodVisitor: void visitIincInsn(int,int)>(i0, i1);

     label1:
        return;
    }

    public void visitTableSwitchInsn(int, int, com.mycila.inject.internal.asm.Label, com.mycila.inject.internal.asm.Label[])
    {
        com.mycila.inject.internal.asm.Label[] r5;
        com.mycila.inject.internal.asm.MethodVisitor $r14, $r15;
        java.lang.StringBuffer $r1, $r3, $r4, $r7, $r8, $r10, $r11, $r17, $r18, $r19, $r21;
        int $i0, i1, i2, $i3, i4;
        java.lang.String $r2, $r6, $r13, $r16;
        java.util.List $r12;
        com.mycila.inject.internal.asm.Label r9, $r20;
        com.mycila.inject.internal.asm.util.TraceMethodVisitor r0;

        r0 := @this: com.mycila.inject.internal.asm.util.TraceMethodVisitor;

        i1 := @parameter0: int;

        i2 := @parameter1: int;

        r9 := @parameter2: com.mycila.inject.internal.asm.Label;

        r5 := @parameter3: com.mycila.inject.internal.asm.Label[];

        $r1 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>(0);

        $r3 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r2 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.String tab2>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("TABLESWITCH\n");

        i4 = 0;

     label1:
        $i0 = lengthof r5;

        if i4 >= $i0 goto label2;

        $r17 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r16 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.String tab3>;

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        $i3 = i1 + i4;

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

        virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r20 = r5[i4];

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: void appendLabel(com.mycila.inject.internal.asm.Label)>($r20);

        $r21 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        i4 = i4 + 1;

        goto label1;

     label2:
        $r7 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r6 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.String tab3>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("default: ");

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: void appendLabel(com.mycila.inject.internal.asm.Label)>(r9);

        $r10 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        $r12 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.util.List text>;

        $r11 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r14 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.MethodVisitor mv>;

        if $r14 == null goto label3;

        $r15 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r15.<com.mycila.inject.internal.asm.MethodVisitor: void visitTableSwitchInsn(int,int,com.mycila.inject.internal.asm.Label,com.mycila.inject.internal.asm.Label[])>(i1, i2, r9, r5);

     label3:
        return;
    }

    public void visitLookupSwitchInsn(com.mycila.inject.internal.asm.Label, int[], com.mycila.inject.internal.asm.Label[])
    {
        com.mycila.inject.internal.asm.Label[] r5;
        com.mycila.inject.internal.asm.MethodVisitor $r14, $r16;
        int[] r15;
        java.lang.StringBuffer $r1, $r3, $r4, $r7, $r8, $r10, $r11, $r18, $r19, $r20, $r22;
        int $i0, $i1, i2;
        java.lang.String $r2, $r6, $r13, $r17;
        java.util.List $r12;
        com.mycila.inject.internal.asm.Label r9, $r21;
        com.mycila.inject.internal.asm.util.TraceMethodVisitor r0;

        r0 := @this: com.mycila.inject.internal.asm.util.TraceMethodVisitor;

        r9 := @parameter0: com.mycila.inject.internal.asm.Label;

        r15 := @parameter1: int[];

        r5 := @parameter2: com.mycila.inject.internal.asm.Label[];

        $r1 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>(0);

        $r3 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r2 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.String tab2>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("LOOKUPSWITCH\n");

        i2 = 0;

     label1:
        $i0 = lengthof r5;

        if i2 >= $i0 goto label2;

        $r18 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r17 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.String tab3>;

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        $i1 = r15[i2];

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r21 = r5[i2];

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: void appendLabel(com.mycila.inject.internal.asm.Label)>($r21);

        $r22 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r7 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r6 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.String tab3>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("default: ");

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: void appendLabel(com.mycila.inject.internal.asm.Label)>(r9);

        $r10 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        $r12 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.util.List text>;

        $r11 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r14 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.MethodVisitor mv>;

        if $r14 == null goto label3;

        $r16 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r16.<com.mycila.inject.internal.asm.MethodVisitor: void visitLookupSwitchInsn(com.mycila.inject.internal.asm.Label,int[],com.mycila.inject.internal.asm.Label[])>(r9, r15, r5);

     label3:
        return;
    }

    public void visitMultiANewArrayInsn(java.lang.String, int)
    {
        java.util.List $r10;
        com.mycila.inject.internal.asm.MethodVisitor $r12, $r13;
        java.lang.StringBuffer $r1, $r3, $r4, $r6, $r7, $r8, $r9;
        int i0;
        com.mycila.inject.internal.asm.util.TraceMethodVisitor r0;
        java.lang.String $r2, r5, $r11;

        r0 := @this: com.mycila.inject.internal.asm.util.TraceMethodVisitor;

        r5 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>(0);

        $r3 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r2 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.String tab2>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("MULTIANEWARRAY ");

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: void appendDescriptor(int,java.lang.String)>(1, r5);

        $r6 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        $r10 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.util.List text>;

        $r9 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r11);

        $r12 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.MethodVisitor mv>;

        if $r12 == null goto label1;

        $r13 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r13.<com.mycila.inject.internal.asm.MethodVisitor: void visitMultiANewArrayInsn(java.lang.String,int)>(r5, i0);

     label1:
        return;
    }

    public void visitTryCatchBlock(com.mycila.inject.internal.asm.Label, com.mycila.inject.internal.asm.Label, com.mycila.inject.internal.asm.Label, java.lang.String)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r16, $r17;
        java.lang.StringBuffer $r1, $r3, $r4, $r6, $r8, $r10, $r12, $r13;
        java.lang.String $r2, r11, $r15;
        java.util.List $r14;
        com.mycila.inject.internal.asm.Label r5, r7, r9;
        com.mycila.inject.internal.asm.util.TraceMethodVisitor r0;

        r0 := @this: com.mycila.inject.internal.asm.util.TraceMethodVisitor;

        r5 := @parameter0: com.mycila.inject.internal.asm.Label;

        r7 := @parameter1: com.mycila.inject.internal.asm.Label;

        r9 := @parameter2: com.mycila.inject.internal.asm.Label;

        r11 := @parameter3: java.lang.String;

        $r1 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>(0);

        $r3 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r2 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.String tab2>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("TRYCATCHBLOCK ");

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: void appendLabel(com.mycila.inject.internal.asm.Label)>(r5);

        $r6 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: void appendLabel(com.mycila.inject.internal.asm.Label)>(r7);

        $r8 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: void appendLabel(com.mycila.inject.internal.asm.Label)>(r9);

        $r10 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: void appendDescriptor(int,java.lang.String)>(0, r11);

        $r12 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        $r14 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.util.List text>;

        $r13 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>($r15);

        $r16 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.MethodVisitor mv>;

        if $r16 == null goto label1;

        $r17 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r17.<com.mycila.inject.internal.asm.MethodVisitor: void visitTryCatchBlock(com.mycila.inject.internal.asm.Label,com.mycila.inject.internal.asm.Label,com.mycila.inject.internal.asm.Label,java.lang.String)>(r5, r7, r9, r11);

     label1:
        return;
    }

    public void visitLocalVariable(java.lang.String, java.lang.String, java.lang.String, com.mycila.inject.internal.asm.Label, com.mycila.inject.internal.asm.Label, int)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r20, $r21;
        com.mycila.inject.internal.asm.signature.SignatureReader $r25;
        java.util.List $r18;
        com.mycila.inject.internal.asm.util.TraceMethodVisitor r0;
        java.lang.StringBuffer $r1, $r3, $r4, $r5, $r7, $r9, $r11, $r13, $r14, $r15, $r17, $r23, $r27, $r28, $r29, $r31;
        int i0;
        java.lang.String $r2, r6, r8, r16, $r19, $r22, $r26, $r30;
        com.mycila.inject.internal.asm.util.TraceSignatureVisitor $r24;
        com.mycila.inject.internal.asm.Label r10, r12;

        r0 := @this: com.mycila.inject.internal.asm.util.TraceMethodVisitor;

        r6 := @parameter0: java.lang.String;

        r8 := @parameter1: java.lang.String;

        r16 := @parameter2: java.lang.String;

        r10 := @parameter3: com.mycila.inject.internal.asm.Label;

        r12 := @parameter4: com.mycila.inject.internal.asm.Label;

        i0 := @parameter5: int;

        $r1 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>(0);

        $r3 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r2 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.String tab2>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("LOCALVARIABLE ");

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r6);

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: void appendDescriptor(int,java.lang.String)>(1, r8);

        $r9 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: void appendLabel(com.mycila.inject.internal.asm.Label)>(r10);

        $r11 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: void appendLabel(com.mycila.inject.internal.asm.Label)>(r12);

        $r13 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        if r16 == null goto label1;

        $r23 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r22 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.String tab2>;

        virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r22);

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: void appendDescriptor(int,java.lang.String)>(2, r16);

        $r24 = new com.mycila.inject.internal.asm.util.TraceSignatureVisitor;

        specialinvoke $r24.<com.mycila.inject.internal.asm.util.TraceSignatureVisitor: void <init>(int)>(0);

        $r25 = new com.mycila.inject.internal.asm.signature.SignatureReader;

        specialinvoke $r25.<com.mycila.inject.internal.asm.signature.SignatureReader: void <init>(java.lang.String)>(r16);

        virtualinvoke $r25.<com.mycila.inject.internal.asm.signature.SignatureReader: void acceptType(com.mycila.inject.internal.asm.signature.SignatureVisitor)>($r24);

        $r27 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r26 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.String tab2>;

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r26);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("// declaration: ");

        $r30 = virtualinvoke $r24.<com.mycila.inject.internal.asm.util.TraceSignatureVisitor: java.lang.String getDeclaration()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r30);

        virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

     label1:
        $r18 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.util.List text>;

        $r17 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r19 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r18.<java.util.List: boolean add(java.lang.Object)>($r19);

        $r20 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.MethodVisitor mv>;

        if $r20 == null goto label2;

        $r21 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r21.<com.mycila.inject.internal.asm.MethodVisitor: void visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,com.mycila.inject.internal.asm.Label,com.mycila.inject.internal.asm.Label,int)>(r6, r8, r16, r10, r12, i0);

     label2:
        return;
    }

    public void visitLineNumber(int, com.mycila.inject.internal.asm.Label)
    {
        java.util.List $r10;
        com.mycila.inject.internal.asm.MethodVisitor $r12, $r13;
        java.lang.StringBuffer $r1, $r3, $r4, $r5, $r6, $r8, $r9;
        int i0;
        com.mycila.inject.internal.asm.Label r7;
        com.mycila.inject.internal.asm.util.TraceMethodVisitor r0;
        java.lang.String $r2, $r11;

        r0 := @this: com.mycila.inject.internal.asm.util.TraceMethodVisitor;

        i0 := @parameter0: int;

        r7 := @parameter1: com.mycila.inject.internal.asm.Label;

        $r1 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>(0);

        $r3 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r2 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.String tab2>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("LINENUMBER ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        virtualinvoke r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: void appendLabel(com.mycila.inject.internal.asm.Label)>(r7);

        $r8 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        $r10 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.util.List text>;

        $r9 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r11);

        $r12 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.MethodVisitor mv>;

        if $r12 == null goto label1;

        $r13 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r13.<com.mycila.inject.internal.asm.MethodVisitor: void visitLineNumber(int,com.mycila.inject.internal.asm.Label)>(i0, r7);

     label1:
        return;
    }

    public void visitMaxs(int, int)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r19, $r20;
        java.lang.StringBuffer $r1, $r3, $r4, $r5, $r6, $r7, $r10, $r12, $r13, $r14, $r15, $r16;
        int i0, i1;
        java.lang.String $r2, $r9, $r11, $r18;
        java.util.List $r8, $r17;
        com.mycila.inject.internal.asm.util.TraceMethodVisitor r0;

        r0 := @this: com.mycila.inject.internal.asm.util.TraceMethodVisitor;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>(0);

        $r3 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r2 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.String tab2>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("MAXSTACK = ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        $r8 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.util.List text>;

        $r7 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r9);

        $r10 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r10.<java.lang.StringBuffer: void setLength(int)>(0);

        $r12 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r11 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.String tab2>;

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("MAXLOCALS = ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        $r17 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.util.List text>;

        $r16 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        $r18 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r17.<java.util.List: boolean add(java.lang.Object)>($r18);

        $r19 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.MethodVisitor mv>;

        if $r19 == null goto label1;

        $r20 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r20.<com.mycila.inject.internal.asm.MethodVisitor: void visitMaxs(int,int)>(i0, i1);

     label1:
        return;
    }

    public void visitEnd()
    {
        com.mycila.inject.internal.asm.util.TraceMethodVisitor r0;
        com.mycila.inject.internal.asm.MethodVisitor $r1, $r2;

        r0 := @this: com.mycila.inject.internal.asm.util.TraceMethodVisitor;

        specialinvoke r0.<com.mycila.inject.internal.asm.util.TraceAbstractVisitor: void visitEnd()>();

        $r1 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.MethodVisitor mv>;

        if $r1 == null goto label1;

        $r2 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitEnd()>();

     label1:
        return;
    }

    private void appendFrameTypes(int, java.lang.Object[])
    {
        java.lang.Object[] r0;
        java.lang.Integer $r7;
        java.lang.StringBuffer $r10;
        int i0, $i1, i2;
        java.lang.String r9;
        boolean $z0, $z1, $z2;
        com.mycila.inject.internal.asm.Label $r5;
        java.lang.Object $r1, $r2, $r4, $r6, $r8;
        com.mycila.inject.internal.asm.util.TraceMethodVisitor r3;

        r3 := @this: com.mycila.inject.internal.asm.util.TraceMethodVisitor;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.Object[];

        i2 = 0;

     label01:
        if i2 >= i0 goto label16;

        if i2 <= 0 goto label02;

        $r10 = r3.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

     label02:
        $r1 = r0[i2];

        $z0 = $r1 instanceof java.lang.String;

        if $z0 == 0 goto label05;

        $r8 = r0[i2];

        r9 = (java.lang.String) $r8;

        $z2 = virtualinvoke r9.<java.lang.String: boolean startsWith(java.lang.String)>("[");

        if $z2 == 0 goto label03;

        virtualinvoke r3.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: void appendDescriptor(int,java.lang.String)>(1, r9);

        goto label04;

     label03:
        virtualinvoke r3.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: void appendDescriptor(int,java.lang.String)>(0, r9);

     label04:
        goto label15;

     label05:
        $r2 = r0[i2];

        $z1 = $r2 instanceof java.lang.Integer;

        if $z1 == 0 goto label14;

        $r6 = r0[i2];

        $r7 = (java.lang.Integer) $r6;

        $i1 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        tableswitch($i1)
        {
            case 0: goto label06;
            case 1: goto label07;
            case 2: goto label08;
            case 3: goto label09;
            case 4: goto label10;
            case 5: goto label11;
            case 6: goto label12;
            default: goto label13;
        };

     label06:
        virtualinvoke r3.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: void appendDescriptor(int,java.lang.String)>(1, "T");

        goto label13;

     label07:
        virtualinvoke r3.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: void appendDescriptor(int,java.lang.String)>(1, "I");

        goto label13;

     label08:
        virtualinvoke r3.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: void appendDescriptor(int,java.lang.String)>(1, "F");

        goto label13;

     label09:
        virtualinvoke r3.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: void appendDescriptor(int,java.lang.String)>(1, "D");

        goto label13;

     label10:
        virtualinvoke r3.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: void appendDescriptor(int,java.lang.String)>(1, "J");

        goto label13;

     label11:
        virtualinvoke r3.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: void appendDescriptor(int,java.lang.String)>(1, "N");

        goto label13;

     label12:
        virtualinvoke r3.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: void appendDescriptor(int,java.lang.String)>(1, "U");

     label13:
        goto label15;

     label14:
        $r4 = r0[i2];

        $r5 = (com.mycila.inject.internal.asm.Label) $r4;

        virtualinvoke r3.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: void appendLabel(com.mycila.inject.internal.asm.Label)>($r5);

     label15:
        i2 = i2 + 1;

        goto label01;

     label16:
        return;
    }

    protected void appendLabel(com.mycila.inject.internal.asm.Label)
    {
        java.lang.StringBuffer $r4, $r5, $r6, $r8;
        java.util.Map $r2, $r7, $r10;
        com.mycila.inject.internal.asm.Label r1;
        int $i0;
        com.mycila.inject.internal.asm.util.TraceMethodVisitor r0;
        java.lang.Object $r3;
        java.lang.String $r9, r11;

        r0 := @this: com.mycila.inject.internal.asm.util.TraceMethodVisitor;

        r1 := @parameter0: com.mycila.inject.internal.asm.Label;

        $r2 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.util.Map labelNames>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r11 = (java.lang.String) $r3;

        if r11 != null goto label1;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("L");

        $r7 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.util.Map labelNames>;

        $i0 = interfaceinvoke $r7.<java.util.Map: int size()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        r11 = $r9;

        $r10 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.util.Map labelNames>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r9);

     label1:
        $r4 = r0.<com.mycila.inject.internal.asm.util.TraceMethodVisitor: java.lang.StringBuffer buf>;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r11);

        return;
    }
}
