public class org.apache.batik.ext.awt.image.rendered.TranslateRed extends org.apache.batik.ext.awt.image.rendered.AbstractRed
{
    protected int deltaX;
    protected int deltaY;

    public void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed, int, int)
    {
        java.awt.Rectangle $r2;
        java.awt.image.SampleModel $r4;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        org.apache.batik.ext.awt.image.rendered.TranslateRed r0;
        org.apache.batik.ext.awt.image.rendered.CachableRed r1;
        java.awt.image.ColorModel $r3;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.TranslateRed;

        r1 := @parameter0: org.apache.batik.ext.awt.image.rendered.CachableRed;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = new java.awt.Rectangle;

        $i2 = interfaceinvoke r1.<java.awt.image.RenderedImage: int getWidth()>();

        $i3 = interfaceinvoke r1.<java.awt.image.RenderedImage: int getHeight()>();

        specialinvoke $r2.<java.awt.Rectangle: void <init>(int,int,int,int)>(i0, i1, $i2, $i3);

        $r3 = interfaceinvoke r1.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        $r4 = interfaceinvoke r1.<java.awt.image.RenderedImage: java.awt.image.SampleModel getSampleModel()>();

        $i4 = interfaceinvoke r1.<java.awt.image.RenderedImage: int getTileGridXOffset()>();

        $i5 = $i4 + i0;

        $i6 = interfaceinvoke r1.<java.awt.image.RenderedImage: int getMinX()>();

        $i7 = $i5 - $i6;

        $i8 = interfaceinvoke r1.<java.awt.image.RenderedImage: int getTileGridYOffset()>();

        $i9 = $i8 + i1;

        $i10 = interfaceinvoke r1.<java.awt.image.RenderedImage: int getMinY()>();

        $i11 = $i9 - $i10;

        specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)>(r1, $r2, $r3, $r4, $i7, $i11, null);

        $i12 = interfaceinvoke r1.<java.awt.image.RenderedImage: int getMinX()>();

        $i13 = i0 - $i12;

        r0.<org.apache.batik.ext.awt.image.rendered.TranslateRed: int deltaX> = $i13;

        $i14 = interfaceinvoke r1.<java.awt.image.RenderedImage: int getMinY()>();

        $i15 = i1 - $i14;

        r0.<org.apache.batik.ext.awt.image.rendered.TranslateRed: int deltaY> = $i15;

        return;
    }

    public int getDeltaX()
    {
        int $i0;
        org.apache.batik.ext.awt.image.rendered.TranslateRed r0;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.TranslateRed;

        $i0 = r0.<org.apache.batik.ext.awt.image.rendered.TranslateRed: int deltaX>;

        return $i0;
    }

    public int getDeltaY()
    {
        int $i0;
        org.apache.batik.ext.awt.image.rendered.TranslateRed r0;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.TranslateRed;

        $i0 = r0.<org.apache.batik.ext.awt.image.rendered.TranslateRed: int deltaY>;

        return $i0;
    }

    public org.apache.batik.ext.awt.image.rendered.CachableRed getSource()
    {
        org.apache.batik.ext.awt.image.rendered.TranslateRed r0;
        java.util.Vector $r1;
        org.apache.batik.ext.awt.image.rendered.CachableRed $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.TranslateRed;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.util.Vector getSources()>();

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object get(int)>(0);

        $r3 = (org.apache.batik.ext.awt.image.rendered.CachableRed) $r2;

        return $r3;
    }

    public java.lang.Object getProperty(java.lang.String)
    {
        org.apache.batik.ext.awt.image.rendered.TranslateRed r0;
        org.apache.batik.ext.awt.image.rendered.CachableRed $r1;
        java.lang.Object $r3;
        java.lang.String r2;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.TranslateRed;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.TranslateRed: org.apache.batik.ext.awt.image.rendered.CachableRed getSource()>();

        $r3 = interfaceinvoke $r1.<java.awt.image.RenderedImage: java.lang.Object getProperty(java.lang.String)>(r2);

        return $r3;
    }

    public java.lang.String[] getPropertyNames()
    {
        org.apache.batik.ext.awt.image.rendered.TranslateRed r0;
        java.lang.String[] $r2;
        org.apache.batik.ext.awt.image.rendered.CachableRed $r1;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.TranslateRed;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.TranslateRed: org.apache.batik.ext.awt.image.rendered.CachableRed getSource()>();

        $r2 = interfaceinvoke $r1.<java.awt.image.RenderedImage: java.lang.String[] getPropertyNames()>();

        return $r2;
    }

    public java.awt.image.Raster getTile(int, int)
    {
        org.apache.batik.ext.awt.image.rendered.TranslateRed r0;
        org.apache.batik.ext.awt.image.rendered.CachableRed $r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.awt.image.Raster $r2, $r3;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.TranslateRed;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.TranslateRed: org.apache.batik.ext.awt.image.rendered.CachableRed getSource()>();

        $r2 = interfaceinvoke $r1.<java.awt.image.RenderedImage: java.awt.image.Raster getTile(int,int)>(i0, i1);

        $i2 = virtualinvoke $r2.<java.awt.image.Raster: int getMinX()>();

        $i3 = r0.<org.apache.batik.ext.awt.image.rendered.TranslateRed: int deltaX>;

        $i4 = $i2 + $i3;

        $i5 = virtualinvoke $r2.<java.awt.image.Raster: int getMinY()>();

        $i6 = r0.<org.apache.batik.ext.awt.image.rendered.TranslateRed: int deltaY>;

        $i7 = $i5 + $i6;

        $r3 = virtualinvoke $r2.<java.awt.image.Raster: java.awt.image.Raster createTranslatedChild(int,int)>($i4, $i7);

        return $r3;
    }

    public java.awt.image.Raster getData()
    {
        org.apache.batik.ext.awt.image.rendered.TranslateRed r0;
        org.apache.batik.ext.awt.image.rendered.CachableRed $r1;
        java.awt.image.Raster $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.TranslateRed;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.TranslateRed: org.apache.batik.ext.awt.image.rendered.CachableRed getSource()>();

        $r2 = interfaceinvoke $r1.<java.awt.image.RenderedImage: java.awt.image.Raster getData()>();

        $i0 = virtualinvoke $r2.<java.awt.image.Raster: int getMinX()>();

        $i1 = r0.<org.apache.batik.ext.awt.image.rendered.TranslateRed: int deltaX>;

        $i2 = $i0 + $i1;

        $i3 = virtualinvoke $r2.<java.awt.image.Raster: int getMinY()>();

        $i4 = r0.<org.apache.batik.ext.awt.image.rendered.TranslateRed: int deltaY>;

        $i5 = $i3 + $i4;

        $r3 = virtualinvoke $r2.<java.awt.image.Raster: java.awt.image.Raster createTranslatedChild(int,int)>($i2, $i5);

        return $r3;
    }

    public java.awt.image.Raster getData(java.awt.Rectangle)
    {
        java.awt.Rectangle r0, r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.awt.image.Raster $r5, $r6;
        org.apache.batik.ext.awt.image.rendered.TranslateRed r3;
        org.apache.batik.ext.awt.image.rendered.CachableRed $r4;
        java.lang.Object $r1;

        r3 := @this: org.apache.batik.ext.awt.image.rendered.TranslateRed;

        r0 := @parameter0: java.awt.Rectangle;

        $r1 = virtualinvoke r0.<java.awt.geom.RectangularShape: java.lang.Object clone()>();

        r2 = (java.awt.Rectangle) $r1;

        $i0 = r3.<org.apache.batik.ext.awt.image.rendered.TranslateRed: int deltaX>;

        $i3 = neg $i0;

        $i1 = r3.<org.apache.batik.ext.awt.image.rendered.TranslateRed: int deltaY>;

        $i2 = neg $i1;

        virtualinvoke r2.<java.awt.Rectangle: void translate(int,int)>($i3, $i2);

        $r4 = virtualinvoke r3.<org.apache.batik.ext.awt.image.rendered.TranslateRed: org.apache.batik.ext.awt.image.rendered.CachableRed getSource()>();

        $r5 = interfaceinvoke $r4.<java.awt.image.RenderedImage: java.awt.image.Raster getData(java.awt.Rectangle)>(r2);

        $i4 = virtualinvoke $r5.<java.awt.image.Raster: int getMinX()>();

        $i5 = r3.<org.apache.batik.ext.awt.image.rendered.TranslateRed: int deltaX>;

        $i6 = $i4 + $i5;

        $i7 = virtualinvoke $r5.<java.awt.image.Raster: int getMinY()>();

        $i8 = r3.<org.apache.batik.ext.awt.image.rendered.TranslateRed: int deltaY>;

        $i9 = $i7 + $i8;

        $r6 = virtualinvoke $r5.<java.awt.image.Raster: java.awt.image.Raster createTranslatedChild(int,int)>($i6, $i9);

        return $r6;
    }

    public java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster)
    {
        org.apache.batik.ext.awt.image.rendered.TranslateRed r1;
        org.apache.batik.ext.awt.image.rendered.CachableRed $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.awt.image.WritableRaster r0, $r2;

        r1 := @this: org.apache.batik.ext.awt.image.rendered.TranslateRed;

        r0 := @parameter0: java.awt.image.WritableRaster;

        $i0 = virtualinvoke r0.<java.awt.image.Raster: int getMinX()>();

        $i1 = r1.<org.apache.batik.ext.awt.image.rendered.TranslateRed: int deltaX>;

        $i2 = $i0 - $i1;

        $i3 = virtualinvoke r0.<java.awt.image.Raster: int getMinY()>();

        $i4 = r1.<org.apache.batik.ext.awt.image.rendered.TranslateRed: int deltaY>;

        $i5 = $i3 - $i4;

        $r2 = virtualinvoke r0.<java.awt.image.WritableRaster: java.awt.image.WritableRaster createWritableTranslatedChild(int,int)>($i2, $i5);

        $r3 = virtualinvoke r1.<org.apache.batik.ext.awt.image.rendered.TranslateRed: org.apache.batik.ext.awt.image.rendered.CachableRed getSource()>();

        interfaceinvoke $r3.<java.awt.image.RenderedImage: java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster)>($r2);

        return r0;
    }
}
