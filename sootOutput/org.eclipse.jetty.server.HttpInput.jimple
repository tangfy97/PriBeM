public class org.eclipse.jetty.server.HttpInput extends javax.servlet.ServletInputStream
{
    protected final org.eclipse.jetty.server.AbstractHttpConnection _connection;
    protected final org.eclipse.jetty.http.HttpParser _parser;

    public void <init>(org.eclipse.jetty.server.AbstractHttpConnection)
    {
        org.eclipse.jetty.server.AbstractHttpConnection r1;
        org.eclipse.jetty.http.Parser $r2;
        org.eclipse.jetty.server.HttpInput r0;
        org.eclipse.jetty.http.HttpParser $r3;

        r0 := @this: org.eclipse.jetty.server.HttpInput;

        r1 := @parameter0: org.eclipse.jetty.server.AbstractHttpConnection;

        specialinvoke r0.<javax.servlet.ServletInputStream: void <init>()>();

        r0.<org.eclipse.jetty.server.HttpInput: org.eclipse.jetty.server.AbstractHttpConnection _connection> = r1;

        $r2 = virtualinvoke r1.<org.eclipse.jetty.server.AbstractHttpConnection: org.eclipse.jetty.http.Parser getParser()>();

        $r3 = (org.eclipse.jetty.http.HttpParser) $r2;

        r0.<org.eclipse.jetty.server.HttpInput: org.eclipse.jetty.http.HttpParser _parser> = $r3;

        return;
    }

    public int read() throws java.io.IOException
    {
        byte[] r0;
        short $s2;
        byte $b1;
        int $i0;
        org.eclipse.jetty.server.HttpInput r1;

        r1 := @this: org.eclipse.jetty.server.HttpInput;

        r0 = newarray (byte)[1];

        $i0 = virtualinvoke r1.<org.eclipse.jetty.server.HttpInput: int read(byte[],int,int)>(r0, 0, 1);

        if $i0 >= 0 goto label1;

        $s2 = -1;

        goto label2;

     label1:
        $b1 = r0[0];

        $s2 = 255 & $b1;

     label2:
        return $s2;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        byte[] r6;
        org.eclipse.jetty.server.AbstractHttpConnection $r1, $r4;
        long $l1;
        org.eclipse.jetty.http.HttpParser $r2;
        org.eclipse.jetty.io.EofException $r7;
        int $i0, i2, i3, i4, $i6;
        org.eclipse.jetty.server.HttpInput r0;
        org.eclipse.jetty.io.Buffer $r3;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.server.HttpInput;

        r6 := @parameter0: byte[];

        i2 := @parameter1: int;

        i3 := @parameter2: int;

        $i6 = (int) -1;

        i4 = $i6;

        $r2 = r0.<org.eclipse.jetty.server.HttpInput: org.eclipse.jetty.http.HttpParser _parser>;

        $r1 = r0.<org.eclipse.jetty.server.HttpInput: org.eclipse.jetty.server.AbstractHttpConnection _connection>;

        $i0 = virtualinvoke $r1.<org.eclipse.jetty.server.AbstractHttpConnection: int getMaxIdleTime()>();

        $l1 = (long) $i0;

        $r3 = virtualinvoke $r2.<org.eclipse.jetty.http.HttpParser: org.eclipse.jetty.io.Buffer blockForContent(long)>($l1);

        if $r3 == null goto label1;

        i4 = interfaceinvoke $r3.<org.eclipse.jetty.io.Buffer: int get(byte[],int,int)>(r6, i2, i3);

        goto label2;

     label1:
        $r4 = r0.<org.eclipse.jetty.server.HttpInput: org.eclipse.jetty.server.AbstractHttpConnection _connection>;

        $z0 = virtualinvoke $r4.<org.eclipse.jetty.server.AbstractHttpConnection: boolean isEarlyEOF()>();

        if $z0 == 0 goto label2;

        $r7 = new org.eclipse.jetty.io.EofException;

        specialinvoke $r7.<org.eclipse.jetty.io.EofException: void <init>(java.lang.String)>("early EOF");

        throw $r7;

     label2:
        return i4;
    }

    public int available() throws java.io.IOException
    {
        int $i0;
        org.eclipse.jetty.server.HttpInput r0;
        org.eclipse.jetty.http.HttpParser $r1;

        r0 := @this: org.eclipse.jetty.server.HttpInput;

        $r1 = r0.<org.eclipse.jetty.server.HttpInput: org.eclipse.jetty.http.HttpParser _parser>;

        $i0 = virtualinvoke $r1.<org.eclipse.jetty.http.HttpParser: int available()>();

        return $i0;
    }
}
