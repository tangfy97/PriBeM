public final class org.apache.http.conn.MultihomePlainSocketFactory extends java.lang.Object implements org.apache.http.conn.scheme.SocketFactory
{
    private static final org.apache.http.conn.MultihomePlainSocketFactory DEFAULT_FACTORY;

    public static org.apache.http.conn.MultihomePlainSocketFactory getSocketFactory()
    {
        org.apache.http.conn.MultihomePlainSocketFactory $r0;

        $r0 = <org.apache.http.conn.MultihomePlainSocketFactory: org.apache.http.conn.MultihomePlainSocketFactory DEFAULT_FACTORY>;

        return $r0;
    }

    private void <init>()
    {
        org.apache.http.conn.MultihomePlainSocketFactory r0;

        r0 := @this: org.apache.http.conn.MultihomePlainSocketFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.net.Socket createSocket()
    {
        org.apache.http.conn.MultihomePlainSocketFactory r1;
        java.net.Socket $r0;

        r1 := @this: org.apache.http.conn.MultihomePlainSocketFactory;

        $r0 = new java.net.Socket;

        specialinvoke $r0.<java.net.Socket: void <init>()>();

        return $r0;
    }

    public java.net.Socket connectSocket(java.net.Socket, java.lang.String, int, java.net.InetAddress, int, org.apache.http.params.HttpParams) throws java.io.IOException
    {
        java.net.Socket $r11, r19;
        java.net.InetAddress[] $r20;
        java.util.ArrayList $r21;
        java.net.InetAddress r2, r5;
        org.apache.http.conn.ConnectTimeoutException $r13;
        java.net.SocketTimeoutException $r12;
        int i0, i1, $i2, $i3;
        org.apache.http.conn.MultihomePlainSocketFactory r7;
        java.lang.String r0, $r18;
        boolean $z0;
        java.util.Iterator $r24;
        java.io.IOException $r10, r23;
        java.lang.IllegalArgumentException $r8, $r9;
        java.net.InetSocketAddress $r3, $r6;
        java.util.List $r22;
        org.apache.http.params.HttpParams r1;
        java.lang.Object $r4;
        java.lang.StringBuilder $r14, $r15, $r16, $r17;

        r7 := @this: org.apache.http.conn.MultihomePlainSocketFactory;

        r19 := @parameter0: java.net.Socket;

        r0 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r2 := @parameter3: java.net.InetAddress;

        i1 := @parameter4: int;

        r1 := @parameter5: org.apache.http.params.HttpParams;

        if r0 != null goto label01;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Target host may not be null.");

        throw $r9;

     label01:
        if r1 != null goto label02;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameters may not be null.");

        throw $r8;

     label02:
        if r19 != null goto label03;

        r19 = virtualinvoke r7.<org.apache.http.conn.MultihomePlainSocketFactory: java.net.Socket createSocket()>();

     label03:
        if r2 != null goto label04;

        if i1 <= 0 goto label06;

     label04:
        if i1 >= 0 goto label05;

        i1 = 0;

     label05:
        $r3 = new java.net.InetSocketAddress;

        specialinvoke $r3.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>(r2, i1);

        virtualinvoke r19.<java.net.Socket: void bind(java.net.SocketAddress)>($r3);

     label06:
        $i2 = staticinvoke <org.apache.http.params.HttpConnectionParams: int getConnectionTimeout(org.apache.http.params.HttpParams)>(r1);

        $r20 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>(r0);

        $r21 = new java.util.ArrayList;

        $i3 = lengthof $r20;

        specialinvoke $r21.<java.util.ArrayList: void <init>(int)>($i3);

        $r22 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r20);

        interfaceinvoke $r21.<java.util.List: boolean addAll(java.util.Collection)>($r22);

        staticinvoke <java.util.Collections: void shuffle(java.util.List)>($r21);

        r23 = null;

        $r24 = interfaceinvoke $r21.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z0 = interfaceinvoke $r24.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label12;

        $r4 = interfaceinvoke $r24.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.net.InetAddress) $r4;

     label08:
        $r6 = new java.net.InetSocketAddress;

        specialinvoke $r6.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>(r5, i0);

        virtualinvoke r19.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r6, $i2);

     label09:
        goto label12;

     label10:
        $r12 := @caughtexception;

        $r13 = new org.apache.http.conn.ConnectTimeoutException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Connect to ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" timed out");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<org.apache.http.conn.ConnectTimeoutException: void <init>(java.lang.String)>($r18);

        throw $r13;

     label11:
        $r10 := @caughtexception;

        $r11 = new java.net.Socket;

        specialinvoke $r11.<java.net.Socket: void <init>()>();

        r19 = $r11;

        r23 = $r10;

        goto label07;

     label12:
        if r23 == null goto label13;

        throw r23;

     label13:
        return r19;

        catch java.net.SocketTimeoutException from label08 to label09 with label10;
        catch java.io.IOException from label08 to label09 with label11;
    }

    public final boolean isSecure(java.net.Socket) throws java.lang.IllegalArgumentException
    {
        java.net.Socket r0;
        org.apache.http.conn.MultihomePlainSocketFactory r5;
        java.lang.Class $r1;
        java.lang.IllegalArgumentException $r2, $r3, $r4;
        boolean $z0;

        r5 := @this: org.apache.http.conn.MultihomePlainSocketFactory;

        r0 := @parameter0: java.net.Socket;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Socket may not be null.");

        throw $r4;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r1 == class "Ljava/net/Socket;" goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Socket not created by this factory.");

        throw $r3;

     label2:
        $z0 = virtualinvoke r0.<java.net.Socket: boolean isClosed()>();

        if $z0 == 0 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Socket is closed.");

        throw $r2;

     label3:
        return 0;
    }

    static void <clinit>()
    {
        org.apache.http.conn.MultihomePlainSocketFactory $r0;

        $r0 = new org.apache.http.conn.MultihomePlainSocketFactory;

        specialinvoke $r0.<org.apache.http.conn.MultihomePlainSocketFactory: void <init>()>();

        <org.apache.http.conn.MultihomePlainSocketFactory: org.apache.http.conn.MultihomePlainSocketFactory DEFAULT_FACTORY> = $r0;

        return;
    }
}
