class org.apache.lucene.search.ConstantScoreAutoRewrite extends org.apache.lucene.search.TermCollectingRewrite
{
    public static int DEFAULT_TERM_COUNT_CUTOFF;
    public static double DEFAULT_DOC_COUNT_PERCENT;
    private int termCountCutoff;
    private double docCountPercent;

    void <init>()
    {
        int $i0;
        org.apache.lucene.search.ConstantScoreAutoRewrite r0;
        double $d0;

        r0 := @this: org.apache.lucene.search.ConstantScoreAutoRewrite;

        specialinvoke r0.<org.apache.lucene.search.TermCollectingRewrite: void <init>()>();

        $i0 = <org.apache.lucene.search.ConstantScoreAutoRewrite: int DEFAULT_TERM_COUNT_CUTOFF>;

        r0.<org.apache.lucene.search.ConstantScoreAutoRewrite: int termCountCutoff> = $i0;

        $d0 = <org.apache.lucene.search.ConstantScoreAutoRewrite: double DEFAULT_DOC_COUNT_PERCENT>;

        r0.<org.apache.lucene.search.ConstantScoreAutoRewrite: double docCountPercent> = $d0;

        return;
    }

    public void setTermCountCutoff(int)
    {
        int i0;
        org.apache.lucene.search.ConstantScoreAutoRewrite r0;

        r0 := @this: org.apache.lucene.search.ConstantScoreAutoRewrite;

        i0 := @parameter0: int;

        r0.<org.apache.lucene.search.ConstantScoreAutoRewrite: int termCountCutoff> = i0;

        return;
    }

    public int getTermCountCutoff()
    {
        int $i0;
        org.apache.lucene.search.ConstantScoreAutoRewrite r0;

        r0 := @this: org.apache.lucene.search.ConstantScoreAutoRewrite;

        $i0 = r0.<org.apache.lucene.search.ConstantScoreAutoRewrite: int termCountCutoff>;

        return $i0;
    }

    public void setDocCountPercent(double)
    {
        org.apache.lucene.search.ConstantScoreAutoRewrite r0;
        double d0;

        r0 := @this: org.apache.lucene.search.ConstantScoreAutoRewrite;

        d0 := @parameter0: double;

        r0.<org.apache.lucene.search.ConstantScoreAutoRewrite: double docCountPercent> = d0;

        return;
    }

    public double getDocCountPercent()
    {
        org.apache.lucene.search.ConstantScoreAutoRewrite r0;
        double $d0;

        r0 := @this: org.apache.lucene.search.ConstantScoreAutoRewrite;

        $d0 = r0.<org.apache.lucene.search.ConstantScoreAutoRewrite: double docCountPercent>;

        return $d0;
    }

    protected org.apache.lucene.search.BooleanQuery getTopLevelQuery()
    {
        org.apache.lucene.search.ConstantScoreAutoRewrite r1;
        org.apache.lucene.search.BooleanQuery $r0;

        r1 := @this: org.apache.lucene.search.ConstantScoreAutoRewrite;

        $r0 = new org.apache.lucene.search.BooleanQuery;

        specialinvoke $r0.<org.apache.lucene.search.BooleanQuery: void <init>(boolean)>(1);

        return $r0;
    }

    protected void addClause(org.apache.lucene.search.BooleanQuery, org.apache.lucene.index.Term, int, float, org.apache.lucene.index.TermContext)
    {
        org.apache.lucene.index.Term r2;
        org.apache.lucene.index.TermContext r3;
        org.apache.lucene.search.ConstantScoreAutoRewrite r5;
        org.apache.lucene.search.TermQuery $r1;
        org.apache.lucene.search.BooleanQuery r0;
        int i0;
        float f0;
        org.apache.lucene.search.BooleanClause$Occur $r4;

        r5 := @this: org.apache.lucene.search.ConstantScoreAutoRewrite;

        r0 := @parameter0: org.apache.lucene.search.BooleanQuery;

        r2 := @parameter1: org.apache.lucene.index.Term;

        i0 := @parameter2: int;

        f0 := @parameter3: float;

        r3 := @parameter4: org.apache.lucene.index.TermContext;

        $r1 = new org.apache.lucene.search.TermQuery;

        specialinvoke $r1.<org.apache.lucene.search.TermQuery: void <init>(org.apache.lucene.index.Term,org.apache.lucene.index.TermContext)>(r2, r3);

        $r4 = <org.apache.lucene.search.BooleanClause$Occur: org.apache.lucene.search.BooleanClause$Occur SHOULD>;

        virtualinvoke r0.<org.apache.lucene.search.BooleanQuery: void add(org.apache.lucene.search.Query,org.apache.lucene.search.BooleanClause$Occur)>($r1, $r4);

        return;
    }

    public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery) throws java.io.IOException
    {
        org.apache.lucene.search.Query $r20;
        org.apache.lucene.util.BytesRefHash $r4, r6;
        org.apache.lucene.index.Term $r11;
        org.apache.lucene.search.ConstantScoreAutoRewrite$TermStateByteStart $r15;
        org.apache.lucene.search.MultiTermQuery r3;
        int[] $r9;
        org.apache.lucene.index.TermsEnum $r7;
        org.apache.lucene.search.ConstantScoreAutoRewrite$CutOffTermCollector $r2;
        org.apache.lucene.search.MultiTermQuery$RewriteMethod $r19;
        boolean $z0;
        org.apache.lucene.util.BytesRef $r12, $r14;
        org.apache.lucene.search.ConstantScoreAutoRewrite r0;
        float $f0;
        org.apache.lucene.index.IndexReader r1;
        org.apache.lucene.search.ConstantScoreQuery $r10;
        int $i0, i1, $i2, $i3, $i4, $i5, i6, i7;
        java.lang.String $r13;
        double $d0, $d1, $d2, $d3;
        org.apache.lucene.index.TermContext $r17;
        org.apache.lucene.search.BooleanQuery $r5, $r18;
        org.apache.lucene.index.TermContext[] $r16;
        java.util.Comparator $r8;

        r0 := @this: org.apache.lucene.search.ConstantScoreAutoRewrite;

        r1 := @parameter0: org.apache.lucene.index.IndexReader;

        r3 := @parameter1: org.apache.lucene.search.MultiTermQuery;

        $d0 = r0.<org.apache.lucene.search.ConstantScoreAutoRewrite: double docCountPercent>;

        $d1 = $d0 / 100.0;

        $i0 = virtualinvoke r1.<org.apache.lucene.index.IndexReader: int maxDoc()>();

        $d2 = (double) $i0;

        $d3 = $d1 * $d2;

        i1 = (int) $d3;

        $i2 = staticinvoke <org.apache.lucene.search.BooleanQuery: int getMaxClauseCount()>();

        $i3 = r0.<org.apache.lucene.search.ConstantScoreAutoRewrite: int termCountCutoff>;

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i3);

        $r2 = new org.apache.lucene.search.ConstantScoreAutoRewrite$CutOffTermCollector;

        specialinvoke $r2.<org.apache.lucene.search.ConstantScoreAutoRewrite$CutOffTermCollector: void <init>(int,int)>(i1, $i4);

        virtualinvoke r0.<org.apache.lucene.search.ConstantScoreAutoRewrite: void collectTerms(org.apache.lucene.index.IndexReader,org.apache.lucene.search.MultiTermQuery,org.apache.lucene.search.TermCollectingRewrite$TermCollector)>(r1, r3, $r2);

        $r4 = $r2.<org.apache.lucene.search.ConstantScoreAutoRewrite$CutOffTermCollector: org.apache.lucene.util.BytesRefHash pendingTerms>;

        $i5 = virtualinvoke $r4.<org.apache.lucene.util.BytesRefHash: int size()>();

        $z0 = $r2.<org.apache.lucene.search.ConstantScoreAutoRewrite$CutOffTermCollector: boolean hasCutOff>;

        if $z0 == 0 goto label1;

        $r19 = <org.apache.lucene.search.MultiTermQuery: org.apache.lucene.search.MultiTermQuery$RewriteMethod CONSTANT_SCORE_FILTER_REWRITE>;

        $r20 = virtualinvoke $r19.<org.apache.lucene.search.MultiTermQuery$RewriteMethod: org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader,org.apache.lucene.search.MultiTermQuery)>(r1, r3);

        return $r20;

     label1:
        if $i5 != 0 goto label2;

        $r18 = virtualinvoke r0.<org.apache.lucene.search.ConstantScoreAutoRewrite: org.apache.lucene.search.BooleanQuery getTopLevelQuery()>();

        return $r18;

     label2:
        $r5 = virtualinvoke r0.<org.apache.lucene.search.ConstantScoreAutoRewrite: org.apache.lucene.search.BooleanQuery getTopLevelQuery()>();

        r6 = $r2.<org.apache.lucene.search.ConstantScoreAutoRewrite$CutOffTermCollector: org.apache.lucene.util.BytesRefHash pendingTerms>;

        $r7 = $r2.<org.apache.lucene.search.ConstantScoreAutoRewrite$CutOffTermCollector: org.apache.lucene.index.TermsEnum termsEnum>;

        $r8 = virtualinvoke $r7.<org.apache.lucene.index.TermsEnum: java.util.Comparator getComparator()>();

        $r9 = virtualinvoke r6.<org.apache.lucene.util.BytesRefHash: int[] sort(java.util.Comparator)>($r8);

        i7 = 0;

     label3:
        if i7 >= $i5 goto label4;

        i6 = $r9[i7];

        $r11 = new org.apache.lucene.index.Term;

        $r13 = r3.<org.apache.lucene.search.MultiTermQuery: java.lang.String field>;

        $r12 = new org.apache.lucene.util.BytesRef;

        specialinvoke $r12.<org.apache.lucene.util.BytesRef: void <init>()>();

        $r14 = virtualinvoke r6.<org.apache.lucene.util.BytesRefHash: org.apache.lucene.util.BytesRef get(int,org.apache.lucene.util.BytesRef)>(i6, $r12);

        specialinvoke $r11.<org.apache.lucene.index.Term: void <init>(java.lang.String,org.apache.lucene.util.BytesRef)>($r13, $r14);

        $r15 = $r2.<org.apache.lucene.search.ConstantScoreAutoRewrite$CutOffTermCollector: org.apache.lucene.search.ConstantScoreAutoRewrite$TermStateByteStart array>;

        $r16 = $r15.<org.apache.lucene.search.ConstantScoreAutoRewrite$TermStateByteStart: org.apache.lucene.index.TermContext[] termState>;

        $r17 = $r16[i6];

        virtualinvoke r0.<org.apache.lucene.search.ConstantScoreAutoRewrite: void addClause(org.apache.lucene.search.BooleanQuery,org.apache.lucene.index.Term,int,float,org.apache.lucene.index.TermContext)>($r5, $r11, 1, 1.0F, $r17);

        i7 = i7 + 1;

        goto label3;

     label4:
        $r10 = new org.apache.lucene.search.ConstantScoreQuery;

        specialinvoke $r10.<org.apache.lucene.search.ConstantScoreQuery: void <init>(org.apache.lucene.search.Query)>($r5);

        $f0 = virtualinvoke r3.<org.apache.lucene.search.MultiTermQuery: float getBoost()>();

        virtualinvoke $r10.<org.apache.lucene.search.Query: void setBoost(float)>($f0);

        return $r10;
    }

    public int hashCode()
    {
        long $l2, $l3, $l4;
        org.apache.lucene.search.ConstantScoreAutoRewrite r0;
        int $i0, $i1, $i5;
        double $d0;

        r0 := @this: org.apache.lucene.search.ConstantScoreAutoRewrite;

        $i0 = r0.<org.apache.lucene.search.ConstantScoreAutoRewrite: int termCountCutoff>;

        $i1 = 1279 * $i0;

        $l2 = (long) $i1;

        $d0 = r0.<org.apache.lucene.search.ConstantScoreAutoRewrite: double docCountPercent>;

        $l3 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $l4 = $l2 + $l3;

        $i5 = (int) $l4;

        return $i5;
    }

    public boolean equals(java.lang.Object)
    {
        long $l2, $l3;
        org.apache.lucene.search.ConstantScoreAutoRewrite r0, r4;
        byte $b4;
        int $i0, $i1;
        java.lang.Object r1;
        java.lang.Class $r2, $r3;
        double $d0, $d1;

        r0 := @this: org.apache.lucene.search.ConstantScoreAutoRewrite;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 != null goto label2;

        return 0;

     label2:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == $r3 goto label3;

        return 0;

     label3:
        r4 = (org.apache.lucene.search.ConstantScoreAutoRewrite) r1;

        $i1 = r4.<org.apache.lucene.search.ConstantScoreAutoRewrite: int termCountCutoff>;

        $i0 = r0.<org.apache.lucene.search.ConstantScoreAutoRewrite: int termCountCutoff>;

        if $i1 == $i0 goto label4;

        return 0;

     label4:
        $d0 = r4.<org.apache.lucene.search.ConstantScoreAutoRewrite: double docCountPercent>;

        $l2 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $d1 = r0.<org.apache.lucene.search.ConstantScoreAutoRewrite: double docCountPercent>;

        $l3 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d1);

        $b4 = $l2 cmp $l3;

        if $b4 == 0 goto label5;

        return 0;

     label5:
        return 1;
    }

    protected volatile void addClause(org.apache.lucene.search.Query, org.apache.lucene.index.Term, int, float, org.apache.lucene.index.TermContext) throws java.io.IOException
    {
        org.apache.lucene.search.Query r1;
        org.apache.lucene.search.ConstantScoreAutoRewrite r0;
        org.apache.lucene.search.BooleanQuery $r4;
        org.apache.lucene.index.Term r2;
        int i0;
        float f0;
        org.apache.lucene.index.TermContext r3;

        r0 := @this: org.apache.lucene.search.ConstantScoreAutoRewrite;

        r1 := @parameter0: org.apache.lucene.search.Query;

        r2 := @parameter1: org.apache.lucene.index.Term;

        i0 := @parameter2: int;

        f0 := @parameter3: float;

        r3 := @parameter4: org.apache.lucene.index.TermContext;

        $r4 = (org.apache.lucene.search.BooleanQuery) r1;

        virtualinvoke r0.<org.apache.lucene.search.ConstantScoreAutoRewrite: void addClause(org.apache.lucene.search.BooleanQuery,org.apache.lucene.index.Term,int,float,org.apache.lucene.index.TermContext)>($r4, r2, i0, f0, r3);

        return;
    }

    protected volatile org.apache.lucene.search.Query getTopLevelQuery() throws java.io.IOException
    {
        org.apache.lucene.search.ConstantScoreAutoRewrite r0;
        org.apache.lucene.search.BooleanQuery $r1;

        r0 := @this: org.apache.lucene.search.ConstantScoreAutoRewrite;

        $r1 = virtualinvoke r0.<org.apache.lucene.search.ConstantScoreAutoRewrite: org.apache.lucene.search.BooleanQuery getTopLevelQuery()>();

        return $r1;
    }

    static void <clinit>()
    {
        <org.apache.lucene.search.ConstantScoreAutoRewrite: int DEFAULT_TERM_COUNT_CUTOFF> = 350;

        <org.apache.lucene.search.ConstantScoreAutoRewrite: double DEFAULT_DOC_COUNT_PERCENT> = 0.1;

        return;
    }
}
