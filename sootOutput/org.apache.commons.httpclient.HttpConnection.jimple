public class org.apache.commons.httpclient.HttpConnection extends java.lang.Object
{
    private static final byte[] CRLF;
    private static final org.apache.commons.logging.Log LOG;
    private java.lang.String hostName;
    private int portNumber;
    private java.lang.String proxyHostName;
    private int proxyPortNumber;
    private java.net.Socket socket;
    private java.io.InputStream inputStream;
    private java.io.OutputStream outputStream;
    private java.io.InputStream lastResponseInputStream;
    protected boolean isOpen;
    private org.apache.commons.httpclient.protocol.Protocol protocolInUse;
    private org.apache.commons.httpclient.params.HttpConnectionParams params;
    private boolean locked;
    private boolean usingSecureSocket;
    private boolean tunnelEstablished;
    private org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager;
    private java.net.InetAddress localAddress;
    static java.lang.Class class$org$apache$commons$httpclient$HttpConnection;

    public void <init>(java.lang.String, int)
    {
        org.apache.commons.httpclient.HttpConnection r0;
        int i0, $i2;
        org.apache.commons.httpclient.protocol.Protocol $r2;
        java.lang.String r1;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = staticinvoke <org.apache.commons.httpclient.protocol.Protocol: org.apache.commons.httpclient.protocol.Protocol getProtocol(java.lang.String)>("http");

        $i2 = (int) -1;

        specialinvoke r0.<org.apache.commons.httpclient.HttpConnection: void <init>(java.lang.String,int,java.lang.String,java.lang.String,int,org.apache.commons.httpclient.protocol.Protocol)>(null, $i2, r1, null, i0, $r2);

        return;
    }

    public void <init>(java.lang.String, int, org.apache.commons.httpclient.protocol.Protocol)
    {
        org.apache.commons.httpclient.HttpConnection r0;
        int i0, $i2;
        org.apache.commons.httpclient.protocol.Protocol r2;
        java.lang.String r1;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: org.apache.commons.httpclient.protocol.Protocol;

        $i2 = (int) -1;

        specialinvoke r0.<org.apache.commons.httpclient.HttpConnection: void <init>(java.lang.String,int,java.lang.String,java.lang.String,int,org.apache.commons.httpclient.protocol.Protocol)>(null, $i2, r1, null, i0, r2);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, int, org.apache.commons.httpclient.protocol.Protocol)
    {
        org.apache.commons.httpclient.HttpConnection r0;
        int i0, $i2;
        org.apache.commons.httpclient.protocol.Protocol r3;
        java.lang.String r1, r2;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: org.apache.commons.httpclient.protocol.Protocol;

        $i2 = (int) -1;

        specialinvoke r0.<org.apache.commons.httpclient.HttpConnection: void <init>(java.lang.String,int,java.lang.String,java.lang.String,int,org.apache.commons.httpclient.protocol.Protocol)>(null, $i2, r1, r2, i0, r3);

        return;
    }

    public void <init>(java.lang.String, int, java.lang.String, int)
    {
        org.apache.commons.httpclient.HttpConnection r0;
        int i0, i1;
        org.apache.commons.httpclient.protocol.Protocol $r3;
        java.lang.String r1, r2;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        i1 := @parameter3: int;

        $r3 = staticinvoke <org.apache.commons.httpclient.protocol.Protocol: org.apache.commons.httpclient.protocol.Protocol getProtocol(java.lang.String)>("http");

        specialinvoke r0.<org.apache.commons.httpclient.HttpConnection: void <init>(java.lang.String,int,java.lang.String,java.lang.String,int,org.apache.commons.httpclient.protocol.Protocol)>(r1, i0, r2, null, i1, $r3);

        return;
    }

    public void <init>(org.apache.commons.httpclient.HostConfiguration)
    {
        org.apache.commons.httpclient.HttpConnection r0;
        java.net.InetAddress $r5;
        org.apache.commons.httpclient.HostConfiguration r1;
        int $i0, $i1;
        org.apache.commons.httpclient.protocol.Protocol $r4;
        java.lang.String $r2, $r3;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        r1 := @parameter0: org.apache.commons.httpclient.HostConfiguration;

        $r2 = virtualinvoke r1.<org.apache.commons.httpclient.HostConfiguration: java.lang.String getProxyHost()>();

        $i0 = virtualinvoke r1.<org.apache.commons.httpclient.HostConfiguration: int getProxyPort()>();

        $r3 = virtualinvoke r1.<org.apache.commons.httpclient.HostConfiguration: java.lang.String getHost()>();

        $i1 = virtualinvoke r1.<org.apache.commons.httpclient.HostConfiguration: int getPort()>();

        $r4 = virtualinvoke r1.<org.apache.commons.httpclient.HostConfiguration: org.apache.commons.httpclient.protocol.Protocol getProtocol()>();

        specialinvoke r0.<org.apache.commons.httpclient.HttpConnection: void <init>(java.lang.String,int,java.lang.String,int,org.apache.commons.httpclient.protocol.Protocol)>($r2, $i0, $r3, $i1, $r4);

        $r5 = virtualinvoke r1.<org.apache.commons.httpclient.HostConfiguration: java.net.InetAddress getLocalAddress()>();

        r0.<org.apache.commons.httpclient.HttpConnection: java.net.InetAddress localAddress> = $r5;

        return;
    }

    public void <init>(java.lang.String, int, java.lang.String, java.lang.String, int, org.apache.commons.httpclient.protocol.Protocol)
    {
        org.apache.commons.httpclient.HttpConnection r0;
        int i0, i1;
        org.apache.commons.httpclient.protocol.Protocol r3;
        java.lang.String r1, r2, r4;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        i1 := @parameter4: int;

        r3 := @parameter5: org.apache.commons.httpclient.protocol.Protocol;

        specialinvoke r0.<org.apache.commons.httpclient.HttpConnection: void <init>(java.lang.String,int,java.lang.String,int,org.apache.commons.httpclient.protocol.Protocol)>(r1, i0, r2, i1, r3);

        return;
    }

    public void <init>(java.lang.String, int, java.lang.String, int, org.apache.commons.httpclient.protocol.Protocol)
    {
        org.apache.commons.httpclient.HttpConnection r0;
        java.lang.IllegalArgumentException $r8, $r9;
        org.apache.commons.httpclient.params.HttpConnectionParams $r7;
        int i0, i1, $i2, $i4, $i6;
        org.apache.commons.httpclient.protocol.Protocol r3;
        java.lang.String r2, r4;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        i1 := @parameter3: int;

        r3 := @parameter4: org.apache.commons.httpclient.protocol.Protocol;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.httpclient.HttpConnection: java.lang.String hostName> = null;

        $i4 = (int) -1;

        r0.<org.apache.commons.httpclient.HttpConnection: int portNumber> = $i4;

        r0.<org.apache.commons.httpclient.HttpConnection: java.lang.String proxyHostName> = null;

        $i6 = (int) -1;

        r0.<org.apache.commons.httpclient.HttpConnection: int proxyPortNumber> = $i6;

        r0.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket> = null;

        r0.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream inputStream> = null;

        r0.<org.apache.commons.httpclient.HttpConnection: java.io.OutputStream outputStream> = null;

        r0.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream lastResponseInputStream> = null;

        r0.<org.apache.commons.httpclient.HttpConnection: boolean isOpen> = 0;

        $r7 = new org.apache.commons.httpclient.params.HttpConnectionParams;

        specialinvoke $r7.<org.apache.commons.httpclient.params.HttpConnectionParams: void <init>()>();

        r0.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams params> = $r7;

        r0.<org.apache.commons.httpclient.HttpConnection: boolean locked> = 0;

        r0.<org.apache.commons.httpclient.HttpConnection: boolean usingSecureSocket> = 0;

        r0.<org.apache.commons.httpclient.HttpConnection: boolean tunnelEstablished> = 0;

        if r2 != null goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("host parameter is null");

        throw $r8;

     label1:
        if r3 != null goto label2;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("protocol is null");

        throw $r9;

     label2:
        r0.<org.apache.commons.httpclient.HttpConnection: java.lang.String proxyHostName> = r4;

        r0.<org.apache.commons.httpclient.HttpConnection: int proxyPortNumber> = i0;

        r0.<org.apache.commons.httpclient.HttpConnection: java.lang.String hostName> = r2;

        $i2 = virtualinvoke r3.<org.apache.commons.httpclient.protocol.Protocol: int resolvePort(int)>(i1);

        r0.<org.apache.commons.httpclient.HttpConnection: int portNumber> = $i2;

        r0.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.protocol.Protocol protocolInUse> = r3;

        return;
    }

    protected java.net.Socket getSocket()
    {
        java.net.Socket $r1;
        org.apache.commons.httpclient.HttpConnection r0;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 = r0.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        return $r1;
    }

    public java.lang.String getHost()
    {
        java.lang.String $r1;
        org.apache.commons.httpclient.HttpConnection r0;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 = r0.<org.apache.commons.httpclient.HttpConnection: java.lang.String hostName>;

        return $r1;
    }

    public void setHost(java.lang.String) throws java.lang.IllegalStateException
    {
        java.lang.String r0;
        java.lang.IllegalArgumentException $r2;
        org.apache.commons.httpclient.HttpConnection r1;

        r1 := @this: org.apache.commons.httpclient.HttpConnection;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("host parameter is null");

        throw $r2;

     label1:
        virtualinvoke r1.<org.apache.commons.httpclient.HttpConnection: void assertNotOpen()>();

        r1.<org.apache.commons.httpclient.HttpConnection: java.lang.String hostName> = r0;

        return;
    }

    public java.lang.String getVirtualHost()
    {
        java.lang.String $r1;
        org.apache.commons.httpclient.HttpConnection r0;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 = r0.<org.apache.commons.httpclient.HttpConnection: java.lang.String hostName>;

        return $r1;
    }

    public void setVirtualHost(java.lang.String) throws java.lang.IllegalStateException
    {
        java.lang.String r1;
        org.apache.commons.httpclient.HttpConnection r0;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: void assertNotOpen()>();

        return;
    }

    public int getPort()
    {
        short $s2;
        org.apache.commons.httpclient.HttpConnection r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $i0 = r0.<org.apache.commons.httpclient.HttpConnection: int portNumber>;

        if $i0 >= 0 goto label3;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: boolean isSecure()>();

        if $z0 == 0 goto label1;

        $s2 = 443;

        goto label2;

     label1:
        $s2 = 80;

     label2:
        return $s2;

     label3:
        $i1 = r0.<org.apache.commons.httpclient.HttpConnection: int portNumber>;

        return $i1;
    }

    public void setPort(int) throws java.lang.IllegalStateException
    {
        int i0;
        org.apache.commons.httpclient.HttpConnection r0;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: void assertNotOpen()>();

        r0.<org.apache.commons.httpclient.HttpConnection: int portNumber> = i0;

        return;
    }

    public java.lang.String getProxyHost()
    {
        java.lang.String $r1;
        org.apache.commons.httpclient.HttpConnection r0;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 = r0.<org.apache.commons.httpclient.HttpConnection: java.lang.String proxyHostName>;

        return $r1;
    }

    public void setProxyHost(java.lang.String) throws java.lang.IllegalStateException
    {
        java.lang.String r1;
        org.apache.commons.httpclient.HttpConnection r0;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: void assertNotOpen()>();

        r0.<org.apache.commons.httpclient.HttpConnection: java.lang.String proxyHostName> = r1;

        return;
    }

    public int getProxyPort()
    {
        int $i0;
        org.apache.commons.httpclient.HttpConnection r0;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $i0 = r0.<org.apache.commons.httpclient.HttpConnection: int proxyPortNumber>;

        return $i0;
    }

    public void setProxyPort(int) throws java.lang.IllegalStateException
    {
        int i0;
        org.apache.commons.httpclient.HttpConnection r0;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: void assertNotOpen()>();

        r0.<org.apache.commons.httpclient.HttpConnection: int proxyPortNumber> = i0;

        return;
    }

    public boolean isSecure()
    {
        org.apache.commons.httpclient.protocol.Protocol $r1;
        org.apache.commons.httpclient.HttpConnection r0;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 = r0.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.protocol.Protocol protocolInUse>;

        $z0 = virtualinvoke $r1.<org.apache.commons.httpclient.protocol.Protocol: boolean isSecure()>();

        return $z0;
    }

    public org.apache.commons.httpclient.protocol.Protocol getProtocol()
    {
        org.apache.commons.httpclient.protocol.Protocol $r1;
        org.apache.commons.httpclient.HttpConnection r0;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 = r0.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.protocol.Protocol protocolInUse>;

        return $r1;
    }

    public void setProtocol(org.apache.commons.httpclient.protocol.Protocol)
    {
        org.apache.commons.httpclient.protocol.Protocol r1;
        java.lang.IllegalArgumentException $r2;
        org.apache.commons.httpclient.HttpConnection r0;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        r1 := @parameter0: org.apache.commons.httpclient.protocol.Protocol;

        virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: void assertNotOpen()>();

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("protocol is null");

        throw $r2;

     label1:
        r0.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.protocol.Protocol protocolInUse> = r1;

        return;
    }

    public java.net.InetAddress getLocalAddress()
    {
        java.net.InetAddress $r1;
        org.apache.commons.httpclient.HttpConnection r0;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 = r0.<org.apache.commons.httpclient.HttpConnection: java.net.InetAddress localAddress>;

        return $r1;
    }

    public void setLocalAddress(java.net.InetAddress)
    {
        java.net.InetAddress r1;
        org.apache.commons.httpclient.HttpConnection r0;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        r1 := @parameter0: java.net.InetAddress;

        virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: void assertNotOpen()>();

        r0.<org.apache.commons.httpclient.HttpConnection: java.net.InetAddress localAddress> = r1;

        return;
    }

    public boolean isOpen()
    {
        org.apache.commons.httpclient.HttpConnection r0;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $z0 = r0.<org.apache.commons.httpclient.HttpConnection: boolean isOpen>;

        return $z0;
    }

    public boolean closeIfStale() throws java.io.IOException
    {
        org.apache.commons.httpclient.HttpConnection r0;
        org.apache.commons.logging.Log $r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $z0 = r0.<org.apache.commons.httpclient.HttpConnection: boolean isOpen>;

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: boolean isStale()>();

        if $z1 == 0 goto label1;

        $r1 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Connection is stale, closing...");

        virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: void close()>();

        return 1;

     label1:
        return 0;
    }

    public boolean isStaleCheckingEnabled()
    {
        org.apache.commons.httpclient.params.HttpConnectionParams $r1;
        org.apache.commons.httpclient.HttpConnection r0;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 = r0.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams params>;

        $z0 = virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpConnectionParams: boolean isStaleCheckingEnabled()>();

        return $z0;
    }

    public void setStaleCheckingEnabled(boolean)
    {
        org.apache.commons.httpclient.params.HttpConnectionParams $r1;
        org.apache.commons.httpclient.HttpConnection r0;
        boolean z0;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams params>;

        virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpConnectionParams: void setStaleCheckingEnabled(boolean)>(z0);

        return;
    }

    protected boolean isStale() throws java.io.IOException
    {
        java.lang.Throwable $r11;
        java.net.Socket $r2, $r7, $r13;
        org.apache.commons.httpclient.HttpConnection r0;
        java.io.InterruptedIOException $r10;
        int $i0, $i1, $i2, $i3, $i5;
        boolean $z0, $z1, z2;
        java.io.IOException $r8;
        org.apache.commons.httpclient.params.HttpConnectionParams $r6, $r12;
        org.apache.commons.logging.Log $r9;
        java.io.InputStream $r1, $r3, $r4, $r5;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        z2 = 1;

        $z0 = r0.<org.apache.commons.httpclient.HttpConnection: boolean isOpen>;

        if $z0 == 0 goto label11;

        z2 = 0;

     label01:
        $r1 = r0.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream inputStream>;

        $i0 = virtualinvoke $r1.<java.io.InputStream: int available()>();

        if $i0 > 0 goto label07;

     label02:
        $r2 = r0.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        virtualinvoke $r2.<java.net.Socket: void setSoTimeout(int)>(1);

        $r3 = r0.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream inputStream>;

        virtualinvoke $r3.<java.io.InputStream: void mark(int)>(1);

        $r4 = r0.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream inputStream>;

        $i1 = virtualinvoke $r4.<java.io.InputStream: int read()>();

        $i5 = (int) -1;

        if $i1 != $i5 goto label03;

        z2 = 1;

        goto label04;

     label03:
        $r5 = r0.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream inputStream>;

        virtualinvoke $r5.<java.io.InputStream: void reset()>();

     label04:
        $r7 = r0.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        $r6 = r0.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams params>;

        $i2 = virtualinvoke $r6.<org.apache.commons.httpclient.params.HttpConnectionParams: int getSoTimeout()>();

        virtualinvoke $r7.<java.net.Socket: void setSoTimeout(int)>($i2);

        goto label07;

     label05:
        $r11 := @caughtexception;

     label06:
        $r13 = r0.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        $r12 = r0.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams params>;

        $i3 = virtualinvoke $r12.<org.apache.commons.httpclient.params.HttpConnectionParams: int getSoTimeout()>();

        virtualinvoke $r13.<java.net.Socket: void setSoTimeout(int)>($i3);

        throw $r11;

     label07:
        goto label11;

     label08:
        $r10 := @caughtexception;

        $z1 = staticinvoke <org.apache.commons.httpclient.util.ExceptionUtil: boolean isSocketTimeoutException(java.io.InterruptedIOException)>($r10);

        if $z1 != 0 goto label09;

        throw $r10;

     label09:
        goto label11;

     label10:
        $r8 := @caughtexception;

        $r9 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r9.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("An error occurred while reading from the socket, is appears to be stale", $r8);

        z2 = 1;

     label11:
        return z2;

        catch java.lang.Throwable from label02 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.io.InterruptedIOException from label01 to label07 with label08;
        catch java.io.IOException from label01 to label07 with label10;
    }

    public boolean isProxied()
    {
        org.apache.commons.httpclient.HttpConnection r0;
        int $i0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 = r0.<org.apache.commons.httpclient.HttpConnection: java.lang.String proxyHostName>;

        if null == $r1 goto label1;

        $i0 = r0.<org.apache.commons.httpclient.HttpConnection: int proxyPortNumber>;

        if 0 >= $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setLastResponseInputStream(java.io.InputStream)
    {
        org.apache.commons.httpclient.HttpConnection r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        r1 := @parameter0: java.io.InputStream;

        r0.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream lastResponseInputStream> = r1;

        return;
    }

    public java.io.InputStream getLastResponseInputStream()
    {
        org.apache.commons.httpclient.HttpConnection r0;
        java.io.InputStream $r1;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 = r0.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream lastResponseInputStream>;

        return $r1;
    }

    public org.apache.commons.httpclient.params.HttpConnectionParams getParams()
    {
        org.apache.commons.httpclient.params.HttpConnectionParams $r1;
        org.apache.commons.httpclient.HttpConnection r0;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 = r0.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams params>;

        return $r1;
    }

    public void setParams(org.apache.commons.httpclient.params.HttpConnectionParams)
    {
        org.apache.commons.httpclient.params.HttpConnectionParams r0;
        java.lang.IllegalArgumentException $r2;
        org.apache.commons.httpclient.HttpConnection r1;

        r1 := @this: org.apache.commons.httpclient.HttpConnection;

        r0 := @parameter0: org.apache.commons.httpclient.params.HttpConnectionParams;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameters may not be null");

        throw $r2;

     label1:
        r1.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams params> = r0;

        return;
    }

    public void setSoTimeout(int) throws java.net.SocketException, java.lang.IllegalStateException
    {
        java.net.Socket $r2, $r3;
        org.apache.commons.httpclient.params.HttpConnectionParams $r1;
        org.apache.commons.httpclient.HttpConnection r0;
        int i0;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams params>;

        virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpConnectionParams: void setSoTimeout(int)>(i0);

        $r2 = r0.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        if $r2 == null goto label1;

        $r3 = r0.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        virtualinvoke $r3.<java.net.Socket: void setSoTimeout(int)>(i0);

     label1:
        return;
    }

    public void setSocketTimeout(int) throws java.net.SocketException, java.lang.IllegalStateException
    {
        java.net.Socket $r1, $r2;
        org.apache.commons.httpclient.HttpConnection r0;
        int i0;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: void assertOpen()>();

        $r1 = r0.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        virtualinvoke $r2.<java.net.Socket: void setSoTimeout(int)>(i0);

     label1:
        return;
    }

    public int getSoTimeout() throws java.net.SocketException
    {
        int $i0;
        org.apache.commons.httpclient.params.HttpConnectionParams $r1;
        org.apache.commons.httpclient.HttpConnection r0;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 = r0.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams params>;

        $i0 = virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpConnectionParams: int getSoTimeout()>();

        return $i0;
    }

    public void setConnectionTimeout(int)
    {
        int i0;
        org.apache.commons.httpclient.params.HttpConnectionParams $r1;
        org.apache.commons.httpclient.HttpConnection r0;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams params>;

        virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpConnectionParams: void setConnectionTimeout(int)>(i0);

        return;
    }

    public void open() throws java.io.IOException
    {
        java.io.BufferedInputStream $r34;
        java.net.InetAddress $r24;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.apache.commons.httpclient.params.HttpConnectionParams $r7, $r25, $r28, $r30, $r31, $r32;
        java.net.Socket $r6, $r8, $r9, $r10, $r11, $r26, $r27, $r29, $r33, $r35, $r38;
        org.apache.commons.httpclient.HttpConnection r1;
        java.io.BufferedOutputStream $r37;
        java.lang.StringBuffer $r14, $r16, $r17, $r18, $r19;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i8, i9;
        java.lang.String $r2, r3, $r4, $r20, $r22;
        java.io.OutputStream $r39;
        java.io.IOException $r21;
        org.apache.commons.httpclient.protocol.ProtocolSocketFactory r23;
        org.apache.commons.httpclient.protocol.Protocol $r12, $r13;
        org.apache.commons.logging.Log $r0, $r5, $r15;
        java.io.InputStream $r36;

        r1 := @this: org.apache.commons.httpclient.HttpConnection;

        $r0 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnection.open()");

        $r2 = r1.<org.apache.commons.httpclient.HttpConnection: java.lang.String proxyHostName>;

        if $r2 != null goto label01;

        $r22 = r1.<org.apache.commons.httpclient.HttpConnection: java.lang.String hostName>;

        goto label02;

     label01:
        $r22 = r1.<org.apache.commons.httpclient.HttpConnection: java.lang.String proxyHostName>;

     label02:
        r3 = $r22;

        $r4 = r1.<org.apache.commons.httpclient.HttpConnection: java.lang.String proxyHostName>;

        if $r4 != null goto label03;

        $i3 = r1.<org.apache.commons.httpclient.HttpConnection: int portNumber>;

        goto label04;

     label03:
        $i3 = r1.<org.apache.commons.httpclient.HttpConnection: int proxyPortNumber>;

     label04:
        i0 = $i3;

        virtualinvoke r1.<org.apache.commons.httpclient.HttpConnection: void assertNotOpen()>();

        $r5 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label05;

        $r15 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Open connection to ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r15.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r20);

     label05:
        $r6 = r1.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        if $r6 != null goto label10;

        $z1 = virtualinvoke r1.<org.apache.commons.httpclient.HttpConnection: boolean isSecure()>();

        if $z1 == 0 goto label06;

        $z3 = virtualinvoke r1.<org.apache.commons.httpclient.HttpConnection: boolean isProxied()>();

        if $z3 != 0 goto label06;

        $z4 = 1;

        goto label07;

     label06:
        $z4 = 0;

     label07:
        r1.<org.apache.commons.httpclient.HttpConnection: boolean usingSecureSocket> = $z4;

        $z5 = virtualinvoke r1.<org.apache.commons.httpclient.HttpConnection: boolean isSecure()>();

        if $z5 == 0 goto label08;

        $z2 = virtualinvoke r1.<org.apache.commons.httpclient.HttpConnection: boolean isProxied()>();

        if $z2 == 0 goto label08;

        $r13 = staticinvoke <org.apache.commons.httpclient.protocol.Protocol: org.apache.commons.httpclient.protocol.Protocol getProtocol(java.lang.String)>("http");

        r23 = virtualinvoke $r13.<org.apache.commons.httpclient.protocol.Protocol: org.apache.commons.httpclient.protocol.ProtocolSocketFactory getSocketFactory()>();

        goto label09;

     label08:
        $r12 = r1.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.protocol.Protocol protocolInUse>;

        r23 = virtualinvoke $r12.<org.apache.commons.httpclient.protocol.Protocol: org.apache.commons.httpclient.protocol.ProtocolSocketFactory getSocketFactory()>();

     label09:
        $r24 = r1.<org.apache.commons.httpclient.HttpConnection: java.net.InetAddress localAddress>;

        $r25 = r1.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams params>;

        $r26 = interfaceinvoke r23.<org.apache.commons.httpclient.protocol.ProtocolSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int,org.apache.commons.httpclient.params.HttpConnectionParams)>(r3, i0, $r24, 0, $r25);

        r1.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket> = $r26;

     label10:
        $r27 = r1.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        $r28 = r1.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams params>;

        $z6 = virtualinvoke $r28.<org.apache.commons.httpclient.params.HttpConnectionParams: boolean getTcpNoDelay()>();

        virtualinvoke $r27.<java.net.Socket: void setTcpNoDelay(boolean)>($z6);

        $r29 = r1.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        $r30 = r1.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams params>;

        $i4 = virtualinvoke $r30.<org.apache.commons.httpclient.params.HttpConnectionParams: int getSoTimeout()>();

        virtualinvoke $r29.<java.net.Socket: void setSoTimeout(int)>($i4);

        $r31 = r1.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams params>;

        $i5 = virtualinvoke $r31.<org.apache.commons.httpclient.params.HttpConnectionParams: int getLinger()>();

        if $i5 < 0 goto label13;

        $r11 = r1.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        if $i5 <= 0 goto label11;

        $z7 = 1;

        goto label12;

     label11:
        $z7 = 0;

     label12:
        virtualinvoke $r11.<java.net.Socket: void setSoLinger(boolean,int)>($z7, $i5);

     label13:
        $r32 = r1.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams params>;

        $i6 = virtualinvoke $r32.<org.apache.commons.httpclient.params.HttpConnectionParams: int getSendBufferSize()>();

        if $i6 < 0 goto label14;

        $r10 = r1.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        virtualinvoke $r10.<java.net.Socket: void setSendBufferSize(int)>($i6);

     label14:
        $r7 = r1.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams params>;

        $i1 = virtualinvoke $r7.<org.apache.commons.httpclient.params.HttpConnectionParams: int getReceiveBufferSize()>();

        if $i1 < 0 goto label15;

        $r9 = r1.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        virtualinvoke $r9.<java.net.Socket: void setReceiveBufferSize(int)>($i1);

     label15:
        $r8 = r1.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        $i2 = virtualinvoke $r8.<java.net.Socket: int getSendBufferSize()>();

        i7 = $i2;

        if $i2 > 2048 goto label16;

        if $i2 > 0 goto label17;

     label16:
        i7 = 2048;

     label17:
        $r33 = r1.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        $i8 = virtualinvoke $r33.<java.net.Socket: int getReceiveBufferSize()>();

        i9 = $i8;

        if $i8 > 2048 goto label18;

        if $i8 > 0 goto label19;

     label18:
        i9 = 2048;

     label19:
        $r34 = new java.io.BufferedInputStream;

        $r35 = r1.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        $r36 = virtualinvoke $r35.<java.net.Socket: java.io.InputStream getInputStream()>();

        specialinvoke $r34.<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>($r36, i9);

        r1.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream inputStream> = $r34;

        $r37 = new java.io.BufferedOutputStream;

        $r38 = r1.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        $r39 = virtualinvoke $r38.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        specialinvoke $r37.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream,int)>($r39, i7);

        r1.<org.apache.commons.httpclient.HttpConnection: java.io.OutputStream outputStream> = $r37;

        r1.<org.apache.commons.httpclient.HttpConnection: boolean isOpen> = 1;

     label20:
        goto label22;

     label21:
        $r21 := @caughtexception;

        virtualinvoke r1.<org.apache.commons.httpclient.HttpConnection: void closeSocketAndStreams()>();

        throw $r21;

     label22:
        return;

        catch java.io.IOException from label05 to label20 with label21;
    }

    public void tunnelCreated() throws java.lang.IllegalStateException, java.io.IOException
    {
        java.lang.IllegalStateException $r2, $r30;
        java.io.BufferedInputStream $r13;
        boolean $z0, $z1, $z2, $z3;
        org.apache.commons.httpclient.params.HttpConnectionParams $r9, $r10;
        java.net.Socket $r7, $r8, $r11, $r12, $r14, $r17, $r19, $r20;
        org.apache.commons.httpclient.HttpConnection r1;
        java.io.BufferedOutputStream $r16;
        java.lang.StringBuffer $r21, $r23, $r25, $r26, $r27;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        java.lang.String $r6, $r24, $r28;
        org.apache.commons.httpclient.protocol.SecureProtocolSocketFactory $r29;
        java.io.OutputStream $r18;
        org.apache.commons.httpclient.protocol.ProtocolSocketFactory $r5;
        org.apache.commons.httpclient.protocol.Protocol $r4;
        org.apache.commons.logging.Log $r0, $r3, $r22;
        java.io.InputStream $r15;

        r1 := @this: org.apache.commons.httpclient.HttpConnection;

        $r0 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnection.tunnelCreated()");

        $z0 = virtualinvoke r1.<org.apache.commons.httpclient.HttpConnection: boolean isSecure()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r1.<org.apache.commons.httpclient.HttpConnection: boolean isProxied()>();

        if $z1 != 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection must be secure and proxied to use this feature");

        throw $r2;

     label2:
        $z2 = r1.<org.apache.commons.httpclient.HttpConnection: boolean usingSecureSocket>;

        if $z2 == 0 goto label3;

        $r30 = new java.lang.IllegalStateException;

        specialinvoke $r30.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Already using a secure socket");

        throw $r30;

     label3:
        $r3 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        $z3 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z3 == 0 goto label4;

        $r22 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        $r21 = new java.lang.StringBuffer;

        specialinvoke $r21.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Secure tunnel to ");

        $r24 = r1.<org.apache.commons.httpclient.HttpConnection: java.lang.String hostName>;

        $r25 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $i5 = r1.<org.apache.commons.httpclient.HttpConnection: int portNumber>;

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i5);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r22.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r28);

     label4:
        $r4 = r1.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.protocol.Protocol protocolInUse>;

        $r5 = virtualinvoke $r4.<org.apache.commons.httpclient.protocol.Protocol: org.apache.commons.httpclient.protocol.ProtocolSocketFactory getSocketFactory()>();

        $r29 = (org.apache.commons.httpclient.protocol.SecureProtocolSocketFactory) $r5;

        $r7 = r1.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        $r6 = r1.<org.apache.commons.httpclient.HttpConnection: java.lang.String hostName>;

        $i0 = r1.<org.apache.commons.httpclient.HttpConnection: int portNumber>;

        $r8 = interfaceinvoke $r29.<org.apache.commons.httpclient.protocol.SecureProtocolSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>($r7, $r6, $i0, 1);

        r1.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket> = $r8;

        $r9 = r1.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams params>;

        $i1 = virtualinvoke $r9.<org.apache.commons.httpclient.params.HttpConnectionParams: int getSendBufferSize()>();

        if $i1 < 0 goto label5;

        $r20 = r1.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        virtualinvoke $r20.<java.net.Socket: void setSendBufferSize(int)>($i1);

     label5:
        $r10 = r1.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams params>;

        $i2 = virtualinvoke $r10.<org.apache.commons.httpclient.params.HttpConnectionParams: int getReceiveBufferSize()>();

        if $i2 < 0 goto label6;

        $r19 = r1.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        virtualinvoke $r19.<java.net.Socket: void setReceiveBufferSize(int)>($i2);

     label6:
        $r11 = r1.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        $i3 = virtualinvoke $r11.<java.net.Socket: int getSendBufferSize()>();

        i6 = $i3;

        if $i3 <= 2048 goto label7;

        i6 = 2048;

     label7:
        $r12 = r1.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        $i4 = virtualinvoke $r12.<java.net.Socket: int getReceiveBufferSize()>();

        i7 = $i4;

        if $i4 <= 2048 goto label8;

        i7 = 2048;

     label8:
        $r13 = new java.io.BufferedInputStream;

        $r14 = r1.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        $r15 = virtualinvoke $r14.<java.net.Socket: java.io.InputStream getInputStream()>();

        specialinvoke $r13.<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>($r15, i7);

        r1.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream inputStream> = $r13;

        $r16 = new java.io.BufferedOutputStream;

        $r17 = r1.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        $r18 = virtualinvoke $r17.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        specialinvoke $r16.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream,int)>($r18, i6);

        r1.<org.apache.commons.httpclient.HttpConnection: java.io.OutputStream outputStream> = $r16;

        r1.<org.apache.commons.httpclient.HttpConnection: boolean usingSecureSocket> = 1;

        r1.<org.apache.commons.httpclient.HttpConnection: boolean tunnelEstablished> = 1;

        return;
    }

    public boolean isTransparent()
    {
        org.apache.commons.httpclient.HttpConnection r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.HttpConnection: boolean isProxied()>();

        if $z0 == 0 goto label1;

        $z1 = r0.<org.apache.commons.httpclient.HttpConnection: boolean tunnelEstablished>;

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public void flushRequestOutputStream() throws java.io.IOException
    {
        java.io.OutputStream $r2;
        org.apache.commons.logging.Log $r0;
        org.apache.commons.httpclient.HttpConnection r1;

        r1 := @this: org.apache.commons.httpclient.HttpConnection;

        $r0 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnection.flushRequestOutputStream()");

        virtualinvoke r1.<org.apache.commons.httpclient.HttpConnection: void assertOpen()>();

        $r2 = r1.<org.apache.commons.httpclient.HttpConnection: java.io.OutputStream outputStream>;

        virtualinvoke $r2.<java.io.OutputStream: void flush()>();

        return;
    }

    public java.io.OutputStream getRequestOutputStream() throws java.io.IOException, java.lang.IllegalStateException
    {
        java.io.OutputStream r5;
        org.apache.commons.httpclient.HttpConnection r1;
        org.apache.commons.logging.Log $r0;
        org.apache.commons.httpclient.WireLogOutputStream $r3;
        org.apache.commons.httpclient.Wire $r2, $r4;
        boolean $z0;

        r1 := @this: org.apache.commons.httpclient.HttpConnection;

        $r0 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnection.getRequestOutputStream()");

        virtualinvoke r1.<org.apache.commons.httpclient.HttpConnection: void assertOpen()>();

        r5 = r1.<org.apache.commons.httpclient.HttpConnection: java.io.OutputStream outputStream>;

        $r2 = <org.apache.commons.httpclient.Wire: org.apache.commons.httpclient.Wire CONTENT_WIRE>;

        $z0 = virtualinvoke $r2.<org.apache.commons.httpclient.Wire: boolean enabled()>();

        if $z0 == 0 goto label1;

        $r3 = new org.apache.commons.httpclient.WireLogOutputStream;

        $r4 = <org.apache.commons.httpclient.Wire: org.apache.commons.httpclient.Wire CONTENT_WIRE>;

        specialinvoke $r3.<org.apache.commons.httpclient.WireLogOutputStream: void <init>(java.io.OutputStream,org.apache.commons.httpclient.Wire)>(r5, $r4);

        r5 = $r3;

     label1:
        return r5;
    }

    public java.io.InputStream getResponseInputStream() throws java.io.IOException, java.lang.IllegalStateException
    {
        org.apache.commons.logging.Log $r0;
        org.apache.commons.httpclient.HttpConnection r1;
        java.io.InputStream $r2;

        r1 := @this: org.apache.commons.httpclient.HttpConnection;

        $r0 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnection.getResponseInputStream()");

        virtualinvoke r1.<org.apache.commons.httpclient.HttpConnection: void assertOpen()>();

        $r2 = r1.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream inputStream>;

        return $r2;
    }

    public boolean isResponseAvailable() throws java.io.IOException
    {
        org.apache.commons.httpclient.HttpConnection r1;
        int $i0;
        org.apache.commons.logging.Log $r0;
        boolean $z0, $z1;
        java.io.InputStream $r2;

        r1 := @this: org.apache.commons.httpclient.HttpConnection;

        $r0 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnection.isResponseAvailable()");

        $z0 = r1.<org.apache.commons.httpclient.HttpConnection: boolean isOpen>;

        if $z0 == 0 goto label3;

        $r2 = r1.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream inputStream>;

        $i0 = virtualinvoke $r2.<java.io.InputStream: int available()>();

        if $i0 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;

     label3:
        return 0;
    }

    public boolean isResponseAvailable(int) throws java.io.IOException
    {
        boolean $z0, $z1, z2;
        org.apache.commons.httpclient.params.HttpConnectionParams $r7, $r14, $r20;
        java.lang.Throwable $r13;
        java.net.Socket $r3, $r8, $r15, $r21;
        org.apache.commons.httpclient.HttpConnection r1;
        java.io.InterruptedIOException $r18;
        java.lang.StringBuffer $r24, $r25, $r26, $r30;
        int $i0, i1, $i2, $i3, $i4, $i5, $i7;
        java.lang.String $r27;
        java.io.IOException $r11, $r16, $r28;
        org.apache.commons.logging.Log $r0, $r6, $r10, $r12, $r17, $r19, $r23, $r29;
        java.io.InputStream $r2, $r4, $r5, $r9;

        r1 := @this: org.apache.commons.httpclient.HttpConnection;

        i1 := @parameter0: int;

        $r0 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnection.isResponseAvailable(int)");

        virtualinvoke r1.<org.apache.commons.httpclient.HttpConnection: void assertOpen()>();

        z2 = 0;

        $r2 = r1.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream inputStream>;

        $i0 = virtualinvoke $r2.<java.io.InputStream: int available()>();

        if $i0 <= 0 goto label01;

        z2 = 1;

        goto label16;

     label01:
        $r3 = r1.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        virtualinvoke $r3.<java.net.Socket: void setSoTimeout(int)>(i1);

        $r4 = r1.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream inputStream>;

        virtualinvoke $r4.<java.io.InputStream: void mark(int)>(1);

        $r5 = r1.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream inputStream>;

        $i2 = virtualinvoke $r5.<java.io.InputStream: int read()>();

        $i7 = (int) -1;

        if $i2 == $i7 goto label02;

        $r9 = r1.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream inputStream>;

        virtualinvoke $r9.<java.io.InputStream: void reset()>();

        $r10 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r10.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Input data available");

        z2 = 1;

        goto label03;

     label02:
        $r6 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r6.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Input data not available");

     label03:
        $r8 = r1.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        $r7 = r1.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams params>;

        $i3 = virtualinvoke $r7.<org.apache.commons.httpclient.params.HttpConnectionParams: int getSoTimeout()>();

        virtualinvoke $r8.<java.net.Socket: void setSoTimeout(int)>($i3);

     label04:
        goto label16;

     label05:
        $r28 := @caughtexception;

        $r29 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r29.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("An error ocurred while resetting soTimeout, we will assume that no response is available.", $r28);

        z2 = 0;

        goto label16;

     label06:
        $r18 := @caughtexception;

        $z0 = staticinvoke <org.apache.commons.httpclient.util.ExceptionUtil: boolean isSocketTimeoutException(java.io.InterruptedIOException)>($r18);

        if $z0 != 0 goto label07;

        throw $r18;

     label07:
        $r19 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        $z1 = interfaceinvoke $r19.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label08;

        $r23 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        $r30 = new java.lang.StringBuffer;

        specialinvoke $r30.<java.lang.StringBuffer: void <init>()>();

        $r24 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Input data not available after ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ms");

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r23.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r27);

     label08:
        $r21 = r1.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        $r20 = r1.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams params>;

        $i5 = virtualinvoke $r20.<org.apache.commons.httpclient.params.HttpConnectionParams: int getSoTimeout()>();

        virtualinvoke $r21.<java.net.Socket: void setSoTimeout(int)>($i5);

     label09:
        goto label16;

     label10:
        $r16 := @caughtexception;

        $r17 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r17.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("An error ocurred while resetting soTimeout, we will assume that no response is available.", $r16);

        z2 = 0;

        goto label16;

     label11:
        $r13 := @caughtexception;

     label12:
        $r15 = r1.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        $r14 = r1.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams params>;

        $i4 = virtualinvoke $r14.<org.apache.commons.httpclient.params.HttpConnectionParams: int getSoTimeout()>();

        virtualinvoke $r15.<java.net.Socket: void setSoTimeout(int)>($i4);

     label13:
        goto label15;

     label14:
        $r11 := @caughtexception;

        $r12 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r12.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("An error ocurred while resetting soTimeout, we will assume that no response is available.", $r11);

     label15:
        throw $r13;

     label16:
        return z2;

        catch java.io.IOException from label03 to label04 with label05;
        catch java.io.InterruptedIOException from label01 to label03 with label06;
        catch java.io.IOException from label08 to label09 with label10;
        catch java.lang.Throwable from label01 to label03 with label11;
        catch java.lang.Throwable from label06 to label08 with label11;
        catch java.io.IOException from label12 to label13 with label14;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public void write(byte[]) throws java.io.IOException, java.lang.IllegalStateException
    {
        byte[] r2;
        org.apache.commons.httpclient.HttpConnection r1;
        int $i0;
        org.apache.commons.logging.Log $r0;

        r1 := @this: org.apache.commons.httpclient.HttpConnection;

        r2 := @parameter0: byte[];

        $r0 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnection.write(byte[])");

        $i0 = lengthof r2;

        virtualinvoke r1.<org.apache.commons.httpclient.HttpConnection: void write(byte[],int,int)>(r2, 0, $i0);

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException, java.lang.IllegalStateException
    {
        java.io.OutputStream $r3;
        byte[] r1;
        org.apache.commons.httpclient.HttpConnection r2;
        java.lang.IllegalArgumentException $r4, $r5, $r6;
        int i0, i1, $i2, $i3;
        org.apache.commons.logging.Log $r0;

        r2 := @this: org.apache.commons.httpclient.HttpConnection;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r0 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnection.write(byte[], int, int)");

        if i0 >= 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Array offset may not be negative");

        throw $r6;

     label1:
        if i1 >= 0 goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Array length may not be negative");

        throw $r5;

     label2:
        $i3 = i0 + i1;

        $i2 = lengthof r1;

        if $i3 <= $i2 goto label3;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Given offset and length exceed the array length");

        throw $r4;

     label3:
        virtualinvoke r2.<org.apache.commons.httpclient.HttpConnection: void assertOpen()>();

        $r3 = r2.<org.apache.commons.httpclient.HttpConnection: java.io.OutputStream outputStream>;

        virtualinvoke $r3.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1);

        return;
    }

    public void writeLine(byte[]) throws java.io.IOException, java.lang.IllegalStateException
    {
        byte[] r2;
        org.apache.commons.logging.Log $r0;
        org.apache.commons.httpclient.HttpConnection r1;

        r1 := @this: org.apache.commons.httpclient.HttpConnection;

        r2 := @parameter0: byte[];

        $r0 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnection.writeLine(byte[])");

        virtualinvoke r1.<org.apache.commons.httpclient.HttpConnection: void write(byte[])>(r2);

        virtualinvoke r1.<org.apache.commons.httpclient.HttpConnection: void writeLine()>();

        return;
    }

    public void writeLine() throws java.io.IOException, java.lang.IllegalStateException
    {
        byte[] $r2;
        org.apache.commons.logging.Log $r0;
        org.apache.commons.httpclient.HttpConnection r1;

        r1 := @this: org.apache.commons.httpclient.HttpConnection;

        $r0 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnection.writeLine()");

        $r2 = <org.apache.commons.httpclient.HttpConnection: byte[] CRLF>;

        virtualinvoke r1.<org.apache.commons.httpclient.HttpConnection: void write(byte[])>($r2);

        return;
    }

    public void print(java.lang.String) throws java.io.IOException, java.lang.IllegalStateException
    {
        byte[] $r3;
        org.apache.commons.httpclient.HttpConnection r1;
        org.apache.commons.logging.Log $r0;
        java.lang.String r2;

        r1 := @this: org.apache.commons.httpclient.HttpConnection;

        r2 := @parameter0: java.lang.String;

        $r0 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnection.print(String)");

        $r3 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getBytes(java.lang.String,java.lang.String)>(r2, "ISO-8859-1");

        virtualinvoke r1.<org.apache.commons.httpclient.HttpConnection: void write(byte[])>($r3);

        return;
    }

    public void print(java.lang.String, java.lang.String) throws java.io.IOException, java.lang.IllegalStateException
    {
        byte[] $r4;
        org.apache.commons.httpclient.HttpConnection r1;
        org.apache.commons.logging.Log $r0;
        java.lang.String r2, r3;

        r1 := @this: org.apache.commons.httpclient.HttpConnection;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r0 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnection.print(String)");

        $r4 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getBytes(java.lang.String,java.lang.String)>(r2, r3);

        virtualinvoke r1.<org.apache.commons.httpclient.HttpConnection: void write(byte[])>($r4);

        return;
    }

    public void printLine(java.lang.String) throws java.io.IOException, java.lang.IllegalStateException
    {
        byte[] $r3;
        org.apache.commons.httpclient.HttpConnection r1;
        org.apache.commons.logging.Log $r0;
        java.lang.String r2;

        r1 := @this: org.apache.commons.httpclient.HttpConnection;

        r2 := @parameter0: java.lang.String;

        $r0 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnection.printLine(String)");

        $r3 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getBytes(java.lang.String,java.lang.String)>(r2, "ISO-8859-1");

        virtualinvoke r1.<org.apache.commons.httpclient.HttpConnection: void writeLine(byte[])>($r3);

        return;
    }

    public void printLine(java.lang.String, java.lang.String) throws java.io.IOException, java.lang.IllegalStateException
    {
        byte[] $r4;
        org.apache.commons.httpclient.HttpConnection r1;
        org.apache.commons.logging.Log $r0;
        java.lang.String r2, r3;

        r1 := @this: org.apache.commons.httpclient.HttpConnection;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r0 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnection.printLine(String)");

        $r4 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getBytes(java.lang.String,java.lang.String)>(r2, r3);

        virtualinvoke r1.<org.apache.commons.httpclient.HttpConnection: void writeLine(byte[])>($r4);

        return;
    }

    public void printLine() throws java.io.IOException, java.lang.IllegalStateException
    {
        org.apache.commons.logging.Log $r0;
        org.apache.commons.httpclient.HttpConnection r1;

        r1 := @this: org.apache.commons.httpclient.HttpConnection;

        $r0 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnection.printLine()");

        virtualinvoke r1.<org.apache.commons.httpclient.HttpConnection: void writeLine()>();

        return;
    }

    public java.lang.String readLine() throws java.io.IOException, java.lang.IllegalStateException
    {
        org.apache.commons.httpclient.HttpConnection r1;
        org.apache.commons.logging.Log $r0;
        java.lang.String $r3;
        java.io.InputStream $r2;

        r1 := @this: org.apache.commons.httpclient.HttpConnection;

        $r0 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnection.readLine()");

        virtualinvoke r1.<org.apache.commons.httpclient.HttpConnection: void assertOpen()>();

        $r2 = r1.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream inputStream>;

        $r3 = staticinvoke <org.apache.commons.httpclient.HttpParser: java.lang.String readLine(java.io.InputStream)>($r2);

        return $r3;
    }

    public java.lang.String readLine(java.lang.String) throws java.io.IOException, java.lang.IllegalStateException
    {
        org.apache.commons.httpclient.HttpConnection r1;
        org.apache.commons.logging.Log $r0;
        java.lang.String r2, $r4;
        java.io.InputStream $r3;

        r1 := @this: org.apache.commons.httpclient.HttpConnection;

        r2 := @parameter0: java.lang.String;

        $r0 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnection.readLine()");

        virtualinvoke r1.<org.apache.commons.httpclient.HttpConnection: void assertOpen()>();

        $r3 = r1.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream inputStream>;

        $r4 = staticinvoke <org.apache.commons.httpclient.HttpParser: java.lang.String readLine(java.io.InputStream,java.lang.String)>($r3, r2);

        return $r4;
    }

    public void shutdownOutput()
    {
        java.net.Socket $r2, $r6;
        java.lang.Object[] r5;
        org.apache.commons.httpclient.HttpConnection r1;
        java.lang.Class[] r9;
        java.lang.Exception $r7;
        org.apache.commons.logging.Log $r0, $r8;
        java.lang.Class $r3;
        java.lang.reflect.Method $r4;

        r1 := @this: org.apache.commons.httpclient.HttpConnection;

        $r0 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnection.shutdownOutput()");

     label1:
        r9 = newarray (java.lang.Class)[0];

        $r2 = r1.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("shutdownOutput", r9);

        r5 = newarray (java.lang.Object)[0];

        $r6 = r1.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r6, r5);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        $r8 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r8.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("Unexpected Exception caught", $r7);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void close()
    {
        org.apache.commons.logging.Log $r0;
        org.apache.commons.httpclient.HttpConnection r1;

        r1 := @this: org.apache.commons.httpclient.HttpConnection;

        $r0 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnection.close()");

        virtualinvoke r1.<org.apache.commons.httpclient.HttpConnection: void closeSocketAndStreams()>();

        return;
    }

    public org.apache.commons.httpclient.HttpConnectionManager getHttpConnectionManager()
    {
        org.apache.commons.httpclient.HttpConnectionManager $r1;
        org.apache.commons.httpclient.HttpConnection r0;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 = r0.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager>;

        return $r1;
    }

    public void setHttpConnectionManager(org.apache.commons.httpclient.HttpConnectionManager)
    {
        org.apache.commons.httpclient.HttpConnectionManager r1;
        org.apache.commons.httpclient.HttpConnection r0;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        r1 := @parameter0: org.apache.commons.httpclient.HttpConnectionManager;

        r0.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager> = r1;

        return;
    }

    public void releaseConnection()
    {
        org.apache.commons.httpclient.HttpConnection r1;
        org.apache.commons.httpclient.HttpConnectionManager $r2, $r5;
        org.apache.commons.logging.Log $r0, $r3, $r4, $r6;
        boolean $z0;

        r1 := @this: org.apache.commons.httpclient.HttpConnection;

        $r0 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnection.releaseConnection()");

        $z0 = r1.<org.apache.commons.httpclient.HttpConnection: boolean locked>;

        if $z0 == 0 goto label1;

        $r6 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r6.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Connection is locked.  Call to releaseConnection() ignored.");

        goto label3;

     label1:
        $r2 = r1.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager>;

        if $r2 == null goto label2;

        $r4 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Releasing connection back to connection manager.");

        $r5 = r1.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.HttpConnectionManager httpConnectionManager>;

        interfaceinvoke $r5.<org.apache.commons.httpclient.HttpConnectionManager: void releaseConnection(org.apache.commons.httpclient.HttpConnection)>(r1);

        goto label3;

     label2:
        $r3 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("HttpConnectionManager is null.  Connection cannot be released.");

     label3:
        return;
    }

    protected boolean isLocked()
    {
        org.apache.commons.httpclient.HttpConnection r0;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $z0 = r0.<org.apache.commons.httpclient.HttpConnection: boolean locked>;

        return $z0;
    }

    protected void setLocked(boolean)
    {
        org.apache.commons.httpclient.HttpConnection r0;
        boolean z0;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        z0 := @parameter0: boolean;

        r0.<org.apache.commons.httpclient.HttpConnection: boolean locked> = z0;

        return;
    }

    protected void closeSocketAndStreams()
    {
        java.io.OutputStream $r2, r9;
        java.net.Socket $r12, r13;
        org.apache.commons.httpclient.HttpConnection r1;
        java.lang.Exception $r3, $r5, $r7;
        org.apache.commons.logging.Log $r0, $r4, $r6, $r8;
        java.io.InputStream $r10, r11;

        r1 := @this: org.apache.commons.httpclient.HttpConnection;

        $r0 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpConnection.closeSockedAndStreams()");

        r1.<org.apache.commons.httpclient.HttpConnection: boolean isOpen> = 0;

        r1.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream lastResponseInputStream> = null;

        $r2 = r1.<org.apache.commons.httpclient.HttpConnection: java.io.OutputStream outputStream>;

        if null == $r2 goto label04;

        r9 = r1.<org.apache.commons.httpclient.HttpConnection: java.io.OutputStream outputStream>;

        r1.<org.apache.commons.httpclient.HttpConnection: java.io.OutputStream outputStream> = null;

     label01:
        virtualinvoke r9.<java.io.OutputStream: void close()>();

     label02:
        goto label04;

     label03:
        $r7 := @caughtexception;

        $r8 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r8.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("Exception caught when closing output", $r7);

     label04:
        $r10 = r1.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream inputStream>;

        if null == $r10 goto label08;

        r11 = r1.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream inputStream>;

        r1.<org.apache.commons.httpclient.HttpConnection: java.io.InputStream inputStream> = null;

     label05:
        virtualinvoke r11.<java.io.InputStream: void close()>();

     label06:
        goto label08;

     label07:
        $r5 := @caughtexception;

        $r6 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r6.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("Exception caught when closing input", $r5);

     label08:
        $r12 = r1.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        if null == $r12 goto label12;

        r13 = r1.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        r1.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket> = null;

     label09:
        virtualinvoke r13.<java.net.Socket: void close()>();

     label10:
        goto label12;

     label11:
        $r3 := @caughtexception;

        $r4 = <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("Exception caught when closing socket", $r3);

     label12:
        r1.<org.apache.commons.httpclient.HttpConnection: boolean tunnelEstablished> = 0;

        r1.<org.apache.commons.httpclient.HttpConnection: boolean usingSecureSocket> = 0;

        return;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Exception from label05 to label06 with label07;
        catch java.lang.Exception from label09 to label10 with label11;
    }

    protected void assertNotOpen() throws java.lang.IllegalStateException
    {
        java.lang.IllegalStateException $r1;
        org.apache.commons.httpclient.HttpConnection r0;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $z0 = r0.<org.apache.commons.httpclient.HttpConnection: boolean isOpen>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection is open");

        throw $r1;

     label1:
        return;
    }

    protected void assertOpen() throws java.lang.IllegalStateException
    {
        java.lang.IllegalStateException $r1;
        org.apache.commons.httpclient.HttpConnection r0;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $z0 = r0.<org.apache.commons.httpclient.HttpConnection: boolean isOpen>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection is not open");

        throw $r1;

     label1:
        return;
    }

    public int getSendBufferSize() throws java.net.SocketException
    {
        java.net.Socket $r1, $r2;
        org.apache.commons.httpclient.HttpConnection r0;
        int $i0, $i2;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        $r1 = r0.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        if $r1 != null goto label1;

        $i2 = (int) -1;

        return $i2;

     label1:
        $r2 = r0.<org.apache.commons.httpclient.HttpConnection: java.net.Socket socket>;

        $i0 = virtualinvoke $r2.<java.net.Socket: int getSendBufferSize()>();

        return $i0;
    }

    public void setSendBufferSize(int) throws java.net.SocketException
    {
        int i0;
        org.apache.commons.httpclient.params.HttpConnectionParams $r1;
        org.apache.commons.httpclient.HttpConnection r0;

        r0 := @this: org.apache.commons.httpclient.HttpConnection;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams params>;

        virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpConnectionParams: void setSendBufferSize(int)>(i0);

        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        byte[] $r0;
        java.lang.Class $r1, $r3;
        org.apache.commons.logging.Log $r2;

        $r0 = newarray (byte)[2];

        $r0[0] = 13;

        $r0[1] = 10;

        <org.apache.commons.httpclient.HttpConnection: byte[] CRLF> = $r0;

        $r1 = <org.apache.commons.httpclient.HttpConnection: java.lang.Class class$org$apache$commons$httpclient$HttpConnection>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <org.apache.commons.httpclient.HttpConnection: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.HttpConnection");

        <org.apache.commons.httpclient.HttpConnection: java.lang.Class class$org$apache$commons$httpclient$HttpConnection> = $r3;

        goto label2;

     label1:
        $r3 = <org.apache.commons.httpclient.HttpConnection: java.lang.Class class$org$apache$commons$httpclient$HttpConnection>;

     label2:
        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r3);

        <org.apache.commons.httpclient.HttpConnection: org.apache.commons.logging.Log LOG> = $r2;

        return;
    }
}
