public class org.springframework.core.type.filter.AssignableTypeFilter extends org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter
{
    private final java.lang.Class targetType;

    public void <init>(java.lang.Class)
    {
        java.lang.Class r1;
        org.springframework.core.type.filter.AssignableTypeFilter r0;

        r0 := @this: org.springframework.core.type.filter.AssignableTypeFilter;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter: void <init>(boolean,boolean)>(1, 1);

        r0.<org.springframework.core.type.filter.AssignableTypeFilter: java.lang.Class targetType> = r1;

        return;
    }

    protected boolean matchClassName(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.String $r2, r3;
        org.springframework.core.type.filter.AssignableTypeFilter r0;
        boolean $z0;

        r0 := @this: org.springframework.core.type.filter.AssignableTypeFilter;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<org.springframework.core.type.filter.AssignableTypeFilter: java.lang.Class targetType>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        return $z0;
    }

    protected java.lang.Boolean matchSuperClass(java.lang.String)
    {
        java.lang.Boolean $r2;
        java.lang.String r1;
        org.springframework.core.type.filter.AssignableTypeFilter r0;

        r0 := @this: org.springframework.core.type.filter.AssignableTypeFilter;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.springframework.core.type.filter.AssignableTypeFilter: java.lang.Boolean matchTargetType(java.lang.String)>(r1);

        return $r2;
    }

    protected java.lang.Boolean matchInterface(java.lang.String)
    {
        java.lang.Boolean $r2;
        java.lang.String r1;
        org.springframework.core.type.filter.AssignableTypeFilter r0;

        r0 := @this: org.springframework.core.type.filter.AssignableTypeFilter;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.springframework.core.type.filter.AssignableTypeFilter: java.lang.Boolean matchTargetType(java.lang.String)>(r1);

        return $r2;
    }

    protected java.lang.Boolean matchTargetType(java.lang.String)
    {
        java.lang.Boolean $r10, $r11, $r12;
        java.lang.String $r2, r3, $r5;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Class $r1, $r4, $r6, $r8, $r9;
        java.lang.ClassNotFoundException $r13;
        java.lang.ClassLoader $r7;
        org.springframework.core.type.filter.AssignableTypeFilter r0;

        r0 := @this: org.springframework.core.type.filter.AssignableTypeFilter;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<org.springframework.core.type.filter.AssignableTypeFilter: java.lang.Class targetType>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z0 == 0 goto label1;

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        return $r12;

     label1:
        $r4 = class "Ljava/lang/Object;";

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z1 == 0 goto label2;

        $r11 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return $r11;

     label2:
        $z2 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>("java.");

        if $z2 == 0 goto label6;

     label3:
        $r6 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r8 = virtualinvoke $r7.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r3);

        $r9 = r0.<org.springframework.core.type.filter.AssignableTypeFilter: java.lang.Class targetType>;

        $z3 = virtualinvoke $r9.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r8);

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3);

     label4:
        return $r10;

     label5:
        $r13 := @caughtexception;

     label6:
        return null;

        catch java.lang.ClassNotFoundException from label3 to label4 with label5;
    }
}
