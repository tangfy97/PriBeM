public class org.apache.batik.bridge.svg12.DefaultXBLManager extends java.lang.Object implements org.apache.batik.dom.xbl.XBLManager, org.apache.batik.util.XBLConstants
{
    protected boolean isProcessing;
    protected org.w3c.dom.Document document;
    protected org.apache.batik.bridge.BridgeContext ctx;
    protected org.apache.batik.util.DoublyIndexedTable definitionLists;
    protected org.apache.batik.util.DoublyIndexedTable definitions;
    protected java.util.Map contentManagers;
    protected java.util.Map imports;
    protected org.apache.batik.bridge.svg12.DefaultXBLManager$DocInsertedListener docInsertedListener;
    protected org.apache.batik.bridge.svg12.DefaultXBLManager$DocRemovedListener docRemovedListener;
    protected org.apache.batik.bridge.svg12.DefaultXBLManager$DocSubtreeListener docSubtreeListener;
    protected org.apache.batik.bridge.svg12.DefaultXBLManager$ImportAttrListener importAttrListener;
    protected org.apache.batik.bridge.svg12.DefaultXBLManager$RefAttrListener refAttrListener;
    protected javax.swing.event.EventListenerList bindingListenerList;
    protected javax.swing.event.EventListenerList contentSelectionChangedListenerList;
    static java.lang.Class class$org$apache$batik$bridge$svg12$ContentSelectionChangedListener;
    static java.lang.Class class$org$apache$batik$bridge$svg12$BindingListener;

    public void <init>(org.w3c.dom.Document, org.apache.batik.bridge.BridgeContext)
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager$RefAttrListener $r9;
        org.apache.batik.bridge.svg12.DefaultXBLManager r0;
        org.apache.batik.bridge.svg12.DefaultXBLManager$DocSubtreeListener $r7;
        java.util.HashMap $r3, $r4;
        org.apache.batik.bridge.svg12.DefaultXBLManager$DocRemovedListener $r6;
        org.apache.batik.bridge.svg12.DefaultXBLManager$ImportAttrListener $r8;
        javax.swing.event.EventListenerList $r10, $r11;
        org.w3c.dom.Document r12;
        java.util.Map $r15;
        org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord $r14;
        org.apache.batik.bridge.BridgeContext r13;
        org.apache.batik.util.DoublyIndexedTable $r1, $r2;
        org.apache.batik.bridge.svg12.DefaultXBLManager$DocInsertedListener $r5;

        r0 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        r12 := @parameter0: org.w3c.dom.Document;

        r13 := @parameter1: org.apache.batik.bridge.BridgeContext;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.batik.util.DoublyIndexedTable;

        specialinvoke $r1.<org.apache.batik.util.DoublyIndexedTable: void <init>()>();

        r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.util.DoublyIndexedTable definitionLists> = $r1;

        $r2 = new org.apache.batik.util.DoublyIndexedTable;

        specialinvoke $r2.<org.apache.batik.util.DoublyIndexedTable: void <init>()>();

        r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.util.DoublyIndexedTable definitions> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: java.util.Map contentManagers> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: java.util.Map imports> = $r4;

        $r5 = new org.apache.batik.bridge.svg12.DefaultXBLManager$DocInsertedListener;

        specialinvoke $r5.<org.apache.batik.bridge.svg12.DefaultXBLManager$DocInsertedListener: void <init>(org.apache.batik.bridge.svg12.DefaultXBLManager)>(r0);

        r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.bridge.svg12.DefaultXBLManager$DocInsertedListener docInsertedListener> = $r5;

        $r6 = new org.apache.batik.bridge.svg12.DefaultXBLManager$DocRemovedListener;

        specialinvoke $r6.<org.apache.batik.bridge.svg12.DefaultXBLManager$DocRemovedListener: void <init>(org.apache.batik.bridge.svg12.DefaultXBLManager)>(r0);

        r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.bridge.svg12.DefaultXBLManager$DocRemovedListener docRemovedListener> = $r6;

        $r7 = new org.apache.batik.bridge.svg12.DefaultXBLManager$DocSubtreeListener;

        specialinvoke $r7.<org.apache.batik.bridge.svg12.DefaultXBLManager$DocSubtreeListener: void <init>(org.apache.batik.bridge.svg12.DefaultXBLManager)>(r0);

        r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.bridge.svg12.DefaultXBLManager$DocSubtreeListener docSubtreeListener> = $r7;

        $r8 = new org.apache.batik.bridge.svg12.DefaultXBLManager$ImportAttrListener;

        specialinvoke $r8.<org.apache.batik.bridge.svg12.DefaultXBLManager$ImportAttrListener: void <init>(org.apache.batik.bridge.svg12.DefaultXBLManager)>(r0);

        r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.bridge.svg12.DefaultXBLManager$ImportAttrListener importAttrListener> = $r8;

        $r9 = new org.apache.batik.bridge.svg12.DefaultXBLManager$RefAttrListener;

        specialinvoke $r9.<org.apache.batik.bridge.svg12.DefaultXBLManager$RefAttrListener: void <init>(org.apache.batik.bridge.svg12.DefaultXBLManager)>(r0);

        r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.bridge.svg12.DefaultXBLManager$RefAttrListener refAttrListener> = $r9;

        $r10 = new javax.swing.event.EventListenerList;

        specialinvoke $r10.<javax.swing.event.EventListenerList: void <init>()>();

        r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: javax.swing.event.EventListenerList bindingListenerList> = $r10;

        $r11 = new javax.swing.event.EventListenerList;

        specialinvoke $r11.<javax.swing.event.EventListenerList: void <init>()>();

        r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: javax.swing.event.EventListenerList contentSelectionChangedListenerList> = $r11;

        r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.w3c.dom.Document document> = r12;

        r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.bridge.BridgeContext ctx> = r13;

        $r14 = new org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord;

        specialinvoke $r14.<org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord: void <init>(org.apache.batik.bridge.svg12.DefaultXBLManager,org.w3c.dom.Element,org.w3c.dom.Node)>(r0, null, null);

        $r15 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: java.util.Map imports>;

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(null, $r14);

        return;
    }

    public void startProcessing()
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager$DocSubtreeListener $r17;
        org.apache.batik.dom.svg12.XBLOMDefinitionElement $r5, $r18, $r20, $r22, $r24, $r25;
        org.w3c.dom.Document $r1, $r6, $r11, $r27;
        boolean $z0;
        org.apache.batik.dom.svg12.XBLEventSupport r14;
        org.apache.batik.dom.svg12.XBLOMDefinitionElement[] r3;
        org.apache.batik.bridge.svg12.DefaultXBLManager$DocInsertedListener $r16;
        org.apache.batik.bridge.svg12.DefaultXBLManager r0;
        org.apache.batik.bridge.svg12.DefaultXBLManager$DocRemovedListener $r15;
        org.w3c.dom.Node $r4, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8, $i9, i10;
        java.lang.String $r19, $r21, $r23;
        org.w3c.dom.NodeList $r2, $r7;
        org.apache.batik.dom.events.EventSupport $r13;
        org.apache.batik.dom.AbstractDocument r12;
        org.w3c.dom.Element $r10, $r26, $r28;
        org.w3c.dom.Element[] r8;

        r0 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        $z0 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: boolean isProcessing>;

        if $z0 == 0 goto label01;

        return;

     label01:
        $r1 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.w3c.dom.Document document>;

        $r2 = interfaceinvoke $r1.<org.w3c.dom.Document: org.w3c.dom.NodeList getElementsByTagNameNS(java.lang.String,java.lang.String)>("http://www.w3.org/2004/xbl", "definition");

        $i0 = interfaceinvoke $r2.<org.w3c.dom.NodeList: int getLength()>();

        r3 = newarray (org.apache.batik.dom.svg12.XBLOMDefinitionElement)[$i0];

        i6 = 0;

        goto label03;

     label02:
        $r4 = interfaceinvoke $r2.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i6);

        $r5 = (org.apache.batik.dom.svg12.XBLOMDefinitionElement) $r4;

        r3[i6] = $r5;

        i6 = i6 + 1;

     label03:
        $i1 = lengthof r3;

        if i6 < $i1 goto label02;

        $r6 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.w3c.dom.Document document>;

        $r7 = interfaceinvoke $r6.<org.w3c.dom.Document: org.w3c.dom.NodeList getElementsByTagNameNS(java.lang.String,java.lang.String)>("http://www.w3.org/2004/xbl", "import");

        $i2 = interfaceinvoke $r7.<org.w3c.dom.NodeList: int getLength()>();

        r8 = newarray (org.w3c.dom.Element)[$i2];

        i7 = 0;

        goto label05;

     label04:
        $r9 = interfaceinvoke $r7.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i7);

        $r10 = (org.w3c.dom.Element) $r9;

        r8[i7] = $r10;

        i7 = i7 + 1;

     label05:
        $i3 = lengthof r8;

        if i7 < $i3 goto label04;

        $r11 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.w3c.dom.Document document>;

        r12 = (org.apache.batik.dom.AbstractDocument) $r11;

        $r13 = virtualinvoke r12.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.events.EventSupport initializeEventSupport()>();

        r14 = (org.apache.batik.dom.svg12.XBLEventSupport) $r13;

        $r15 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.bridge.svg12.DefaultXBLManager$DocRemovedListener docRemovedListener>;

        virtualinvoke r14.<org.apache.batik.dom.svg12.XBLEventSupport: void addImplementationEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "DOMNodeRemoved", $r15, 1);

        $r16 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.bridge.svg12.DefaultXBLManager$DocInsertedListener docInsertedListener>;

        virtualinvoke r14.<org.apache.batik.dom.svg12.XBLEventSupport: void addImplementationEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "DOMNodeInserted", $r16, 1);

        $r17 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.bridge.svg12.DefaultXBLManager$DocSubtreeListener docSubtreeListener>;

        virtualinvoke r14.<org.apache.batik.dom.svg12.XBLEventSupport: void addImplementationEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "DOMSubtreeModified", $r17, 1);

        i8 = 0;

        goto label09;

     label06:
        $r18 = r3[i8];

        $r19 = virtualinvoke $r18.<org.apache.batik.dom.AbstractElement: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "ref");

        $i4 = virtualinvoke $r19.<java.lang.String: int length()>();

        if $i4 == 0 goto label07;

        $r25 = r3[i8];

        virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: void addDefinitionRef(org.w3c.dom.Element)>($r25);

        goto label08;

     label07:
        $r20 = r3[i8];

        $r21 = virtualinvoke $r20.<org.apache.batik.dom.svg12.XBLOMDefinitionElement: java.lang.String getElementNamespaceURI()>();

        $r22 = r3[i8];

        $r23 = virtualinvoke $r22.<org.apache.batik.dom.svg12.XBLOMDefinitionElement: java.lang.String getElementLocalName()>();

        $r24 = r3[i8];

        virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: void addDefinition(java.lang.String,java.lang.String,org.apache.batik.dom.svg12.XBLOMDefinitionElement,org.w3c.dom.Element)>($r21, $r23, $r24, null);

     label08:
        i8 = i8 + 1;

     label09:
        $i9 = lengthof r3;

        if i8 < $i9 goto label06;

        i10 = 0;

        goto label11;

     label10:
        $r26 = r8[i10];

        virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: void addImport(org.w3c.dom.Element)>($r26);

        i10 = i10 + 1;

     label11:
        $i5 = lengthof r8;

        if i10 < $i5 goto label10;

        r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: boolean isProcessing> = 1;

        $r27 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.w3c.dom.Document document>;

        $r28 = interfaceinvoke $r27.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: void bind(org.w3c.dom.Element)>($r28);

        return;
    }

    public void stopProcessing()
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager$DocSubtreeListener $r7;
        org.w3c.dom.Document $r1;
        java.util.Map $r8, $r11, $r31;
        boolean $z0, $z1, $z2;
        java.util.Collection $r9, $r12;
        org.apache.batik.util.DoublyIndexedTable $r17, $r19, $r23, $r29, $r30;
        org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord r33;
        org.apache.batik.dom.svg12.XBLEventSupport r4;
        org.apache.batik.bridge.svg12.DefaultXBLManager$DocInsertedListener $r6;
        org.apache.batik.bridge.svg12.DefaultXBLManager r0;
        java.lang.Object[] $r18;
        org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord[] r10;
        java.util.TreeSet r25;
        org.apache.batik.bridge.svg12.DefaultXBLManager$DocRemovedListener $r5;
        int $i0, i1, $i2, i3, $i4;
        java.lang.String $r14, $r21, $r22, $r27, $r28;
        org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord r32;
        org.apache.batik.dom.events.EventSupport $r3;
        org.apache.batik.dom.AbstractDocument r2;
        org.w3c.dom.Element $r13, $r15, $r16;
        java.lang.Object $r20, $r24, $r26;

        r0 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        $z0 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: boolean isProcessing>;

        if $z0 != 0 goto label01;

        return;

     label01:
        r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: boolean isProcessing> = 0;

        $r1 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.w3c.dom.Document document>;

        r2 = (org.apache.batik.dom.AbstractDocument) $r1;

        $r3 = virtualinvoke r2.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.events.EventSupport initializeEventSupport()>();

        r4 = (org.apache.batik.dom.svg12.XBLEventSupport) $r3;

        $r5 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.bridge.svg12.DefaultXBLManager$DocRemovedListener docRemovedListener>;

        virtualinvoke r4.<org.apache.batik.dom.svg12.XBLEventSupport: void removeImplementationEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "DOMNodeRemoved", $r5, 1);

        $r6 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.bridge.svg12.DefaultXBLManager$DocInsertedListener docInsertedListener>;

        virtualinvoke r4.<org.apache.batik.dom.svg12.XBLEventSupport: void removeImplementationEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "DOMNodeInserted", $r6, 1);

        $r7 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.bridge.svg12.DefaultXBLManager$DocSubtreeListener docSubtreeListener>;

        virtualinvoke r4.<org.apache.batik.dom.svg12.XBLEventSupport: void removeImplementationEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "DOMSubtreeModified", $r7, 1);

        $r8 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: java.util.Map imports>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Collection values()>();

        $i0 = interfaceinvoke $r9.<java.util.Collection: int size()>();

        r10 = newarray (org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord)[$i0];

        $r11 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: java.util.Map imports>;

        $r12 = interfaceinvoke $r11.<java.util.Map: java.util.Collection values()>();

        interfaceinvoke $r12.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>(r10);

        i1 = 0;

        goto label05;

     label02:
        r32 = r10[i1];

        $r13 = r32.<org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord: org.w3c.dom.Element importElement>;

        $r14 = interfaceinvoke $r13.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z1 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>("definition");

        if $z1 == 0 goto label03;

        $r16 = r32.<org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord: org.w3c.dom.Element importElement>;

        virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: void removeDefinitionRef(org.w3c.dom.Element)>($r16);

        goto label04;

     label03:
        $r15 = r32.<org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord: org.w3c.dom.Element importElement>;

        virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: void removeImport(org.w3c.dom.Element)>($r15);

     label04:
        i1 = i1 + 1;

     label05:
        $i2 = lengthof r10;

        if i1 < $i2 goto label02;

        $r17 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.util.DoublyIndexedTable definitions>;

        $r18 = virtualinvoke $r17.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object[] getValuesArray()>();

        $r19 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.util.DoublyIndexedTable definitions>;

        virtualinvoke $r19.<org.apache.batik.util.DoublyIndexedTable: void clear()>();

        i3 = 0;

        goto label10;

     label06:
        $r20 = $r18[i3];

        r33 = (org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord) $r20;

        $r23 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.util.DoublyIndexedTable definitionLists>;

        $r22 = r33.<org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord: java.lang.String namespaceURI>;

        $r21 = r33.<org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord: java.lang.String localName>;

        $r24 = virtualinvoke $r23.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object get(java.lang.Object,java.lang.Object)>($r22, $r21);

        r25 = (java.util.TreeSet) $r24;

        if r25 == null goto label09;

        goto label08;

     label07:
        $r26 = virtualinvoke r25.<java.util.TreeSet: java.lang.Object first()>();

        r33 = (org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord) $r26;

        virtualinvoke r25.<java.util.TreeSet: boolean remove(java.lang.Object)>(r33);

        virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: void removeDefinition(org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord)>(r33);

     label08:
        $z2 = virtualinvoke r25.<java.util.TreeSet: boolean isEmpty()>();

        if $z2 == 0 goto label07;

        $r29 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.util.DoublyIndexedTable definitionLists>;

        $r28 = r33.<org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord: java.lang.String namespaceURI>;

        $r27 = r33.<org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord: java.lang.String localName>;

        virtualinvoke $r29.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)>($r28, $r27, null);

     label09:
        i3 = i3 + 1;

     label10:
        $i4 = lengthof $r18;

        if i3 < $i4 goto label06;

        $r30 = new org.apache.batik.util.DoublyIndexedTable;

        specialinvoke $r30.<org.apache.batik.util.DoublyIndexedTable: void <init>()>();

        r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.util.DoublyIndexedTable definitionLists> = $r30;

        $r31 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: java.util.Map contentManagers>;

        interfaceinvoke $r31.<java.util.Map: void clear()>();

        return;
    }

    public boolean isProcessing()
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager r0;
        boolean $z0;

        r0 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        $z0 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: boolean isProcessing>;

        return $z0;
    }

    protected void addDefinitionRef(org.w3c.dom.Element)
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager$RefAttrListener $r15;
        org.apache.batik.bridge.svg12.DefaultXBLManager r2;
        java.lang.Object[] $r8;
        org.apache.batik.dom.svg12.XBLOMDefinitionElement r16, $r19;
        java.util.Map $r13;
        java.lang.String $r1, $r5, $r6, $r10, $r11, $r17, $r18;
        boolean $z0, $z1;
        org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord $r12;
        org.apache.batik.bridge.BridgeException $r7;
        org.apache.batik.bridge.BridgeContext $r3, $r9;
        org.apache.batik.dom.events.NodeEventTarget r14;
        org.w3c.dom.Element r0, $r4;

        r2 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        r0 := @parameter0: org.w3c.dom.Element;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "ref");

        $r3 = r2.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.bridge.BridgeContext ctx>;

        $r4 = virtualinvoke $r3.<org.apache.batik.bridge.BridgeContext: org.w3c.dom.Element getReferencedElement(org.w3c.dom.Element,java.lang.String)>(r0, $r1);

        $r5 = "http://www.w3.org/2004/xbl";

        $r6 = interfaceinvoke $r4.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label1;

        $r10 = "definition";

        $r11 = interfaceinvoke $r4.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z1 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z1 != 0 goto label2;

     label1:
        $r7 = new org.apache.batik.bridge.BridgeException;

        $r9 = r2.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.bridge.BridgeContext ctx>;

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = $r1;

        specialinvoke $r7.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.String,java.lang.Object[])>($r9, r0, "uri.badTarget", $r8);

        throw $r7;

     label2:
        $r12 = new org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord;

        specialinvoke $r12.<org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord: void <init>(org.apache.batik.bridge.svg12.DefaultXBLManager,org.w3c.dom.Element,org.w3c.dom.Node)>(r2, r0, $r4);

        $r13 = r2.<org.apache.batik.bridge.svg12.DefaultXBLManager: java.util.Map imports>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r12);

        r14 = (org.apache.batik.dom.events.NodeEventTarget) r0;

        $r15 = r2.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.bridge.svg12.DefaultXBLManager$RefAttrListener refAttrListener>;

        interfaceinvoke r14.<org.apache.batik.dom.events.NodeEventTarget: void addEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean,java.lang.Object)>("http://www.w3.org/2001/xml-events", "DOMAttrModified", $r15, 0, null);

        r16 = (org.apache.batik.dom.svg12.XBLOMDefinitionElement) r0;

        $r17 = virtualinvoke r16.<org.apache.batik.dom.svg12.XBLOMDefinitionElement: java.lang.String getElementNamespaceURI()>();

        $r18 = virtualinvoke r16.<org.apache.batik.dom.svg12.XBLOMDefinitionElement: java.lang.String getElementLocalName()>();

        $r19 = (org.apache.batik.dom.svg12.XBLOMDefinitionElement) $r4;

        virtualinvoke r2.<org.apache.batik.bridge.svg12.DefaultXBLManager: void addDefinition(java.lang.String,java.lang.String,org.apache.batik.dom.svg12.XBLOMDefinitionElement,org.w3c.dom.Element)>($r17, $r18, $r19, r0);

        return;
    }

    protected void removeDefinitionRef(org.w3c.dom.Element)
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager$RefAttrListener $r6;
        org.apache.batik.bridge.svg12.DefaultXBLManager r0;
        org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord r4;
        org.apache.batik.util.DoublyIndexedTable $r8;
        org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord r10;
        org.apache.batik.dom.events.NodeEventTarget r5;
        org.w3c.dom.Element r1;
        java.util.Map $r2, $r11;
        org.w3c.dom.Node $r7;
        java.lang.Object $r3, $r9;

        r0 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        r1 := @parameter0: org.w3c.dom.Element;

        $r2 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: java.util.Map imports>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord) $r3;

        r5 = (org.apache.batik.dom.events.NodeEventTarget) r1;

        $r6 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.bridge.svg12.DefaultXBLManager$RefAttrListener refAttrListener>;

        interfaceinvoke r5.<org.apache.batik.dom.events.NodeEventTarget: void removeEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "DOMAttrModified", $r6, 0);

        $r8 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.util.DoublyIndexedTable definitions>;

        $r7 = r4.<org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord: org.w3c.dom.Node node>;

        $r9 = virtualinvoke $r8.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object get(java.lang.Object,java.lang.Object)>($r7, r1);

        r10 = (org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord) $r9;

        virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: void removeDefinition(org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord)>(r10);

        $r11 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: java.util.Map imports>;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }

    protected void addImport(org.w3c.dom.Element)
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager r2;
        java.lang.Object[] $r14;
        org.apache.batik.bridge.svg12.DefaultXBLManager$ImportSubtreeListener $r10;
        org.apache.batik.bridge.svg12.DefaultXBLManager$ImportInsertedListener $r8;
        org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRemovedListener $r9;
        org.apache.batik.bridge.svg12.DefaultXBLManager$ImportAttrListener $r7;
        short $s0;
        org.w3c.dom.Node $r4;
        java.util.Map $r6;
        java.lang.String $r1, $r11, $r12, $r16, $r17;
        boolean $z0, $z1;
        org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord $r5;
        org.apache.batik.bridge.BridgeException $r13;
        org.apache.batik.bridge.BridgeContext $r3, $r15;
        org.apache.batik.dom.events.NodeEventTarget $r18, $r19;
        org.w3c.dom.Element r0;

        r2 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        r0 := @parameter0: org.w3c.dom.Element;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "bindings");

        $r3 = r2.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.bridge.BridgeContext ctx>;

        $r4 = virtualinvoke $r3.<org.apache.batik.bridge.BridgeContext: org.w3c.dom.Node getReferencedNode(org.w3c.dom.Element,java.lang.String)>(r0, $r1);

        $s0 = interfaceinvoke $r4.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label2;

        $r11 = "http://www.w3.org/2004/xbl";

        $r12 = interfaceinvoke $r4.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z0 == 0 goto label1;

        $r16 = "xbl";

        $r17 = interfaceinvoke $r4.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z1 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r17);

        if $z1 != 0 goto label2;

     label1:
        $r13 = new org.apache.batik.bridge.BridgeException;

        $r15 = r2.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.bridge.BridgeContext ctx>;

        $r14 = newarray (java.lang.Object)[1];

        $r14[0] = $r4;

        specialinvoke $r13.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.String,java.lang.Object[])>($r15, r0, "uri.badTarget", $r14);

        throw $r13;

     label2:
        $r5 = new org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord;

        specialinvoke $r5.<org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord: void <init>(org.apache.batik.bridge.svg12.DefaultXBLManager,org.w3c.dom.Element,org.w3c.dom.Node)>(r2, r0, $r4);

        $r6 = r2.<org.apache.batik.bridge.svg12.DefaultXBLManager: java.util.Map imports>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r5);

        $r18 = (org.apache.batik.dom.events.NodeEventTarget) r0;

        $r7 = r2.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.bridge.svg12.DefaultXBLManager$ImportAttrListener importAttrListener>;

        interfaceinvoke $r18.<org.apache.batik.dom.events.NodeEventTarget: void addEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean,java.lang.Object)>("http://www.w3.org/2001/xml-events", "DOMAttrModified", $r7, 0, null);

        $r19 = (org.apache.batik.dom.events.NodeEventTarget) $r4;

        $r8 = $r5.<org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord: org.apache.batik.bridge.svg12.DefaultXBLManager$ImportInsertedListener importInsertedListener>;

        interfaceinvoke $r19.<org.apache.batik.dom.events.NodeEventTarget: void addEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean,java.lang.Object)>("http://www.w3.org/2001/xml-events", "DOMNodeInserted", $r8, 0, null);

        $r9 = $r5.<org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord: org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRemovedListener importRemovedListener>;

        interfaceinvoke $r19.<org.apache.batik.dom.events.NodeEventTarget: void addEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean,java.lang.Object)>("http://www.w3.org/2001/xml-events", "DOMNodeRemoved", $r9, 0, null);

        $r10 = $r5.<org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord: org.apache.batik.bridge.svg12.DefaultXBLManager$ImportSubtreeListener importSubtreeListener>;

        interfaceinvoke $r19.<org.apache.batik.dom.events.NodeEventTarget: void addEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean,java.lang.Object)>("http://www.w3.org/2001/xml-events", "DOMSubtreeModified", $r10, 0, null);

        virtualinvoke r2.<org.apache.batik.bridge.svg12.DefaultXBLManager: void addImportedDefinitions(org.w3c.dom.Element,org.w3c.dom.Node)>(r0, $r4);

        return;
    }

    protected void addImportedDefinitions(org.w3c.dom.Element, org.w3c.dom.Node)
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager r0;
        org.apache.batik.dom.svg12.XBLOMDefinitionElement r2;
        org.w3c.dom.Element r1;
        org.w3c.dom.Node r5, r6;
        java.lang.String $r3, $r4;
        boolean $z0;

        r0 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        r1 := @parameter0: org.w3c.dom.Element;

        r5 := @parameter1: org.w3c.dom.Node;

        $z0 = r5 instanceof org.apache.batik.dom.svg12.XBLOMDefinitionElement;

        if $z0 == 0 goto label1;

        r2 = (org.apache.batik.dom.svg12.XBLOMDefinitionElement) r5;

        $r3 = virtualinvoke r2.<org.apache.batik.dom.svg12.XBLOMDefinitionElement: java.lang.String getElementNamespaceURI()>();

        $r4 = virtualinvoke r2.<org.apache.batik.dom.svg12.XBLOMDefinitionElement: java.lang.String getElementLocalName()>();

        virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: void addDefinition(java.lang.String,java.lang.String,org.apache.batik.dom.svg12.XBLOMDefinitionElement,org.w3c.dom.Element)>($r3, $r4, r2, r1);

        goto label4;

     label1:
        r6 = interfaceinvoke r5.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label3;

     label2:
        virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: void addImportedDefinitions(org.w3c.dom.Element,org.w3c.dom.Node)>(r1, r6);

        r6 = interfaceinvoke r6.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label3:
        if r6 != null goto label2;

     label4:
        return;
    }

    protected void removeImport(org.w3c.dom.Element)
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager r0;
        java.lang.Object[] $r11;
        org.apache.batik.bridge.svg12.DefaultXBLManager$ImportSubtreeListener $r8;
        org.apache.batik.bridge.svg12.DefaultXBLManager$ImportInsertedListener $r6;
        org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRemovedListener $r7;
        org.apache.batik.bridge.svg12.DefaultXBLManager$ImportAttrListener $r9;
        java.util.Map $r2, $r15;
        org.w3c.dom.Node $r5;
        int i0, $i1;
        org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord r4;
        org.apache.batik.util.DoublyIndexedTable $r10;
        org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord r13;
        org.apache.batik.dom.events.NodeEventTarget r16, r17;
        org.w3c.dom.Element r1, $r14;
        java.lang.Object $r3, $r12;

        r0 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        r1 := @parameter0: org.w3c.dom.Element;

        $r2 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: java.util.Map imports>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord) $r3;

        $r5 = r4.<org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord: org.w3c.dom.Node node>;

        r16 = (org.apache.batik.dom.events.NodeEventTarget) $r5;

        $r6 = r4.<org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord: org.apache.batik.bridge.svg12.DefaultXBLManager$ImportInsertedListener importInsertedListener>;

        interfaceinvoke r16.<org.apache.batik.dom.events.NodeEventTarget: void removeEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "DOMNodeInserted", $r6, 0);

        $r7 = r4.<org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord: org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRemovedListener importRemovedListener>;

        interfaceinvoke r16.<org.apache.batik.dom.events.NodeEventTarget: void removeEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "DOMNodeRemoved", $r7, 0);

        $r8 = r4.<org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord: org.apache.batik.bridge.svg12.DefaultXBLManager$ImportSubtreeListener importSubtreeListener>;

        interfaceinvoke r16.<org.apache.batik.dom.events.NodeEventTarget: void removeEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "DOMSubtreeModified", $r8, 0);

        r17 = (org.apache.batik.dom.events.NodeEventTarget) r1;

        $r9 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.bridge.svg12.DefaultXBLManager$ImportAttrListener importAttrListener>;

        interfaceinvoke r17.<org.apache.batik.dom.events.NodeEventTarget: void removeEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "DOMAttrModified", $r9, 0);

        $r10 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.util.DoublyIndexedTable definitions>;

        $r11 = virtualinvoke $r10.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object[] getValuesArray()>();

        i0 = 0;

        goto label3;

     label1:
        $r12 = $r11[i0];

        r13 = (org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord) $r12;

        $r14 = r13.<org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord: org.w3c.dom.Element importElement>;

        if $r14 != r1 goto label2;

        virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: void removeDefinition(org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord)>(r13);

     label2:
        i0 = i0 + 1;

     label3:
        $i1 = lengthof $r11;

        if i0 < $i1 goto label1;

        $r15 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: java.util.Map imports>;

        interfaceinvoke $r15.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }

    protected void addDefinition(java.lang.String, java.lang.String, org.apache.batik.dom.svg12.XBLOMDefinitionElement, org.w3c.dom.Element)
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager r0;
        org.apache.batik.dom.svg12.XBLOMDefinitionElement r9, r15;
        java.util.TreeSet $r18, r21;
        org.w3c.dom.Document $r13;
        java.util.Map $r2;
        org.w3c.dom.Node r23;
        int $i0;
        java.lang.String r5, r6;
        org.apache.batik.dom.svg12.XBLOMTemplateElement r16, r22;
        boolean $z0, $z1;
        org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord r4;
        org.apache.batik.util.DoublyIndexedTable $r7, $r11, $r19;
        org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord $r10, r20;
        org.w3c.dom.Element r1, $r14;
        java.lang.Object $r3, $r8, $r12, $r17;

        r0 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        r5 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        r9 := @parameter2: org.apache.batik.dom.svg12.XBLOMDefinitionElement;

        r1 := @parameter3: org.w3c.dom.Element;

        $r2 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: java.util.Map imports>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord) $r3;

        r20 = null;

        $r7 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.util.DoublyIndexedTable definitionLists>;

        $r8 = virtualinvoke $r7.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object get(java.lang.Object,java.lang.Object)>(r5, r6);

        r21 = (java.util.TreeSet) $r8;

        if r21 != null goto label01;

        $r18 = new java.util.TreeSet;

        specialinvoke $r18.<java.util.TreeSet: void <init>()>();

        r21 = $r18;

        $r19 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.util.DoublyIndexedTable definitionLists>;

        virtualinvoke $r19.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)>(r5, r6, $r18);

        goto label02;

     label01:
        $i0 = virtualinvoke r21.<java.util.TreeSet: int size()>();

        if $i0 <= 0 goto label02;

        $r17 = virtualinvoke r21.<java.util.TreeSet: java.lang.Object first()>();

        r20 = (org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord) $r17;

     label02:
        r22 = null;

        r23 = virtualinvoke r9.<org.apache.batik.dom.AbstractParentNode: org.w3c.dom.Node getFirstChild()>();

        goto label05;

     label03:
        $z0 = r23 instanceof org.apache.batik.dom.svg12.XBLOMTemplateElement;

        if $z0 == 0 goto label04;

        r22 = (org.apache.batik.dom.svg12.XBLOMTemplateElement) r23;

        goto label06;

     label04:
        r23 = interfaceinvoke r23.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label05:
        if r23 != null goto label03;

     label06:
        $r10 = new org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord;

        specialinvoke $r10.<org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord: void <init>(org.apache.batik.bridge.svg12.DefaultXBLManager,java.lang.String,java.lang.String,org.apache.batik.dom.svg12.XBLOMDefinitionElement,org.apache.batik.dom.svg12.XBLOMTemplateElement,org.w3c.dom.Element)>(r0, r5, r6, r9, r22, r1);

        virtualinvoke r21.<java.util.TreeSet: boolean add(java.lang.Object)>($r10);

        $r11 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.util.DoublyIndexedTable definitions>;

        virtualinvoke $r11.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)>(r9, r1, $r10);

        virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: void addDefinitionElementListeners(org.apache.batik.dom.svg12.XBLOMDefinitionElement,org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord)>(r9, r4);

        $r12 = virtualinvoke r21.<java.util.TreeSet: java.lang.Object first()>();

        if $r12 == $r10 goto label07;

        return;

     label07:
        if r20 == null goto label09;

        r15 = r20.<org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord: org.apache.batik.dom.svg12.XBLOMDefinitionElement definition>;

        r16 = r20.<org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord: org.apache.batik.dom.svg12.XBLOMTemplateElement template>;

        if r16 == null goto label08;

        virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: void removeTemplateElementListeners(org.apache.batik.dom.svg12.XBLOMTemplateElement,org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord)>(r16, r4);

     label08:
        virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: void removeDefinitionElementListeners(org.apache.batik.dom.svg12.XBLOMDefinitionElement,org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord)>(r15, r4);

     label09:
        if r22 == null goto label10;

        virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: void addTemplateElementListeners(org.apache.batik.dom.svg12.XBLOMTemplateElement,org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord)>(r22, r4);

     label10:
        $z1 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: boolean isProcessing>;

        if $z1 == 0 goto label11;

        $r13 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.w3c.dom.Document document>;

        $r14 = interfaceinvoke $r13.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: void rebind(java.lang.String,java.lang.String,org.w3c.dom.Element)>(r5, r6, $r14);

     label11:
        return;
    }

    protected void addDefinitionElementListeners(org.apache.batik.dom.svg12.XBLOMDefinitionElement, org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord)
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager r7;
        org.apache.batik.bridge.svg12.DefaultXBLManager$DefNodeRemovedListener $r6;
        org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord r3;
        org.apache.batik.dom.events.EventSupport $r1;
        org.apache.batik.bridge.svg12.DefaultXBLManager$DefNodeInsertedListener $r5;
        org.apache.batik.dom.svg12.XBLOMDefinitionElement r0;
        org.apache.batik.bridge.svg12.DefaultXBLManager$DefAttrListener $r4;
        org.apache.batik.dom.svg12.XBLEventSupport r2;

        r7 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        r0 := @parameter0: org.apache.batik.dom.svg12.XBLOMDefinitionElement;

        r3 := @parameter1: org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.events.EventSupport initializeEventSupport()>();

        r2 = (org.apache.batik.dom.svg12.XBLEventSupport) $r1;

        $r4 = r3.<org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord: org.apache.batik.bridge.svg12.DefaultXBLManager$DefAttrListener defAttrListener>;

        virtualinvoke r2.<org.apache.batik.dom.svg12.XBLEventSupport: void addImplementationEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "DOMAttrModified", $r4, 0);

        $r5 = r3.<org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord: org.apache.batik.bridge.svg12.DefaultXBLManager$DefNodeInsertedListener defNodeInsertedListener>;

        virtualinvoke r2.<org.apache.batik.dom.svg12.XBLEventSupport: void addImplementationEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "DOMNodeInserted", $r5, 0);

        $r6 = r3.<org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord: org.apache.batik.bridge.svg12.DefaultXBLManager$DefNodeRemovedListener defNodeRemovedListener>;

        virtualinvoke r2.<org.apache.batik.dom.svg12.XBLEventSupport: void addImplementationEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "DOMNodeRemoved", $r6, 0);

        return;
    }

    protected void addTemplateElementListeners(org.apache.batik.dom.svg12.XBLOMTemplateElement, org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord)
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager r8;
        org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord r3;
        org.apache.batik.bridge.svg12.DefaultXBLManager$TemplateMutationListener $r4, $r5, $r6, $r7;
        org.apache.batik.dom.events.EventSupport $r1;
        org.apache.batik.dom.svg12.XBLEventSupport r2;
        org.apache.batik.dom.svg12.XBLOMTemplateElement r0;

        r8 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        r0 := @parameter0: org.apache.batik.dom.svg12.XBLOMTemplateElement;

        r3 := @parameter1: org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.events.EventSupport initializeEventSupport()>();

        r2 = (org.apache.batik.dom.svg12.XBLEventSupport) $r1;

        $r4 = r3.<org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord: org.apache.batik.bridge.svg12.DefaultXBLManager$TemplateMutationListener templateMutationListener>;

        virtualinvoke r2.<org.apache.batik.dom.svg12.XBLEventSupport: void addImplementationEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "DOMAttrModified", $r4, 0);

        $r5 = r3.<org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord: org.apache.batik.bridge.svg12.DefaultXBLManager$TemplateMutationListener templateMutationListener>;

        virtualinvoke r2.<org.apache.batik.dom.svg12.XBLEventSupport: void addImplementationEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "DOMNodeInserted", $r5, 0);

        $r6 = r3.<org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord: org.apache.batik.bridge.svg12.DefaultXBLManager$TemplateMutationListener templateMutationListener>;

        virtualinvoke r2.<org.apache.batik.dom.svg12.XBLEventSupport: void addImplementationEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "DOMNodeRemoved", $r6, 0);

        $r7 = r3.<org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord: org.apache.batik.bridge.svg12.DefaultXBLManager$TemplateMutationListener templateMutationListener>;

        virtualinvoke r2.<org.apache.batik.dom.svg12.XBLEventSupport: void addImplementationEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "DOMCharacterDataModified", $r7, 0);

        return;
    }

    protected void removeDefinition(org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord)
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager r0;
        org.apache.batik.dom.svg12.XBLOMDefinitionElement $r13, $r15;
        java.util.TreeSet r6;
        org.w3c.dom.Document $r17;
        java.util.Map $r8;
        java.lang.String $r2, $r3, $r18, $r19;
        org.apache.batik.dom.svg12.XBLOMTemplateElement $r16, $r21;
        org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord r10;
        org.apache.batik.util.DoublyIndexedTable $r4, $r14;
        org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord r1, r12;
        org.w3c.dom.Element r7, $r20;
        java.lang.Object $r5, $r9, $r11;

        r0 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        r1 := @parameter0: org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord;

        $r4 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.util.DoublyIndexedTable definitionLists>;

        $r3 = r1.<org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord: java.lang.String namespaceURI>;

        $r2 = r1.<org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord: java.lang.String localName>;

        $r5 = virtualinvoke $r4.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object get(java.lang.Object,java.lang.Object)>($r3, $r2);

        r6 = (java.util.TreeSet) $r5;

        if r6 != null goto label1;

        return;

     label1:
        r7 = r1.<org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord: org.w3c.dom.Element importElement>;

        $r8 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: java.util.Map imports>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7);

        r10 = (org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord) $r9;

        $r11 = virtualinvoke r6.<java.util.TreeSet: java.lang.Object first()>();

        r12 = (org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord) $r11;

        virtualinvoke r6.<java.util.TreeSet: boolean remove(java.lang.Object)>(r1);

        $r14 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.util.DoublyIndexedTable definitions>;

        $r13 = r1.<org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord: org.apache.batik.dom.svg12.XBLOMDefinitionElement definition>;

        virtualinvoke $r14.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object remove(java.lang.Object,java.lang.Object)>($r13, r7);

        $r15 = r1.<org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord: org.apache.batik.dom.svg12.XBLOMDefinitionElement definition>;

        virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: void removeDefinitionElementListeners(org.apache.batik.dom.svg12.XBLOMDefinitionElement,org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord)>($r15, r10);

        if r1 == r12 goto label2;

        return;

     label2:
        $r16 = r1.<org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord: org.apache.batik.dom.svg12.XBLOMTemplateElement template>;

        if $r16 == null goto label3;

        $r21 = r1.<org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord: org.apache.batik.dom.svg12.XBLOMTemplateElement template>;

        virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: void removeTemplateElementListeners(org.apache.batik.dom.svg12.XBLOMTemplateElement,org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord)>($r21, r10);

     label3:
        $r18 = r1.<org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord: java.lang.String namespaceURI>;

        $r19 = r1.<org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord: java.lang.String localName>;

        $r17 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.w3c.dom.Document document>;

        $r20 = interfaceinvoke $r17.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: void rebind(java.lang.String,java.lang.String,org.w3c.dom.Element)>($r18, $r19, $r20);

        return;
    }

    protected void removeDefinitionElementListeners(org.apache.batik.dom.svg12.XBLOMDefinitionElement, org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord)
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager r7;
        org.apache.batik.bridge.svg12.DefaultXBLManager$DefNodeRemovedListener $r6;
        org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord r3;
        org.apache.batik.dom.events.EventSupport $r1;
        org.apache.batik.bridge.svg12.DefaultXBLManager$DefNodeInsertedListener $r5;
        org.apache.batik.dom.svg12.XBLOMDefinitionElement r0;
        org.apache.batik.bridge.svg12.DefaultXBLManager$DefAttrListener $r4;
        org.apache.batik.dom.svg12.XBLEventSupport r2;

        r7 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        r0 := @parameter0: org.apache.batik.dom.svg12.XBLOMDefinitionElement;

        r3 := @parameter1: org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.events.EventSupport initializeEventSupport()>();

        r2 = (org.apache.batik.dom.svg12.XBLEventSupport) $r1;

        $r4 = r3.<org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord: org.apache.batik.bridge.svg12.DefaultXBLManager$DefAttrListener defAttrListener>;

        virtualinvoke r2.<org.apache.batik.dom.svg12.XBLEventSupport: void removeImplementationEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "DOMAttrModified", $r4, 0);

        $r5 = r3.<org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord: org.apache.batik.bridge.svg12.DefaultXBLManager$DefNodeInsertedListener defNodeInsertedListener>;

        virtualinvoke r2.<org.apache.batik.dom.svg12.XBLEventSupport: void removeImplementationEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "DOMNodeInserted", $r5, 0);

        $r6 = r3.<org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord: org.apache.batik.bridge.svg12.DefaultXBLManager$DefNodeRemovedListener defNodeRemovedListener>;

        virtualinvoke r2.<org.apache.batik.dom.svg12.XBLEventSupport: void removeImplementationEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "DOMNodeRemoved", $r6, 0);

        return;
    }

    protected void removeTemplateElementListeners(org.apache.batik.dom.svg12.XBLOMTemplateElement, org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord)
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager r8;
        org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord r3;
        org.apache.batik.bridge.svg12.DefaultXBLManager$TemplateMutationListener $r4, $r5, $r6, $r7;
        org.apache.batik.dom.events.EventSupport $r1;
        org.apache.batik.dom.svg12.XBLEventSupport r2;
        org.apache.batik.dom.svg12.XBLOMTemplateElement r0;

        r8 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        r0 := @parameter0: org.apache.batik.dom.svg12.XBLOMTemplateElement;

        r3 := @parameter1: org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.events.EventSupport initializeEventSupport()>();

        r2 = (org.apache.batik.dom.svg12.XBLEventSupport) $r1;

        $r4 = r3.<org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord: org.apache.batik.bridge.svg12.DefaultXBLManager$TemplateMutationListener templateMutationListener>;

        virtualinvoke r2.<org.apache.batik.dom.svg12.XBLEventSupport: void removeImplementationEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "DOMAttrModified", $r4, 0);

        $r5 = r3.<org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord: org.apache.batik.bridge.svg12.DefaultXBLManager$TemplateMutationListener templateMutationListener>;

        virtualinvoke r2.<org.apache.batik.dom.svg12.XBLEventSupport: void removeImplementationEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "DOMNodeInserted", $r5, 0);

        $r6 = r3.<org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord: org.apache.batik.bridge.svg12.DefaultXBLManager$TemplateMutationListener templateMutationListener>;

        virtualinvoke r2.<org.apache.batik.dom.svg12.XBLEventSupport: void removeImplementationEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "DOMNodeRemoved", $r6, 0);

        $r7 = r3.<org.apache.batik.bridge.svg12.DefaultXBLManager$ImportRecord: org.apache.batik.bridge.svg12.DefaultXBLManager$TemplateMutationListener templateMutationListener>;

        virtualinvoke r2.<org.apache.batik.dom.svg12.XBLEventSupport: void removeImplementationEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "DOMCharacterDataModified", $r7, 0);

        return;
    }

    protected org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord getActiveDefinition(java.lang.String, java.lang.String)
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager r0;
        org.apache.batik.util.DoublyIndexedTable $r3;
        java.util.TreeSet r5;
        org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord $r7;
        int $i0;
        java.lang.Object $r4, $r6;
        java.lang.String r1, r2;

        r0 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.util.DoublyIndexedTable definitionLists>;

        $r4 = virtualinvoke $r3.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object get(java.lang.Object,java.lang.Object)>(r1, r2);

        r5 = (java.util.TreeSet) $r4;

        if r5 == null goto label1;

        $i0 = virtualinvoke r5.<java.util.TreeSet: int size()>();

        if $i0 != 0 goto label2;

     label1:
        return null;

     label2:
        $r6 = virtualinvoke r5.<java.util.TreeSet: java.lang.Object first()>();

        $r7 = (org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord) $r6;

        return $r7;
    }

    protected void unbind(org.w3c.dom.Element)
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager r1;
        org.w3c.dom.NodeList $r2;
        org.apache.batik.dom.svg12.BindableElement $r5;
        short $s0;
        org.w3c.dom.Element r0, $r4;
        org.w3c.dom.Node $r3;
        int i1, $i2;
        boolean $z0;

        r1 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        r0 := @parameter0: org.w3c.dom.Element;

        $z0 = r0 instanceof org.apache.batik.dom.svg12.BindableElement;

        if $z0 == 0 goto label1;

        $r5 = (org.apache.batik.dom.svg12.BindableElement) r0;

        virtualinvoke r1.<org.apache.batik.bridge.svg12.DefaultXBLManager: void setActiveDefinition(org.apache.batik.dom.svg12.BindableElement,org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord)>($r5, null);

        goto label5;

     label1:
        $r2 = virtualinvoke r1.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.w3c.dom.NodeList getXblScopedChildNodes(org.w3c.dom.Node)>(r0);

        i1 = 0;

        goto label4;

     label2:
        $r3 = interfaceinvoke $r2.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i1);

        $s0 = interfaceinvoke $r3.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label3;

        $r4 = (org.w3c.dom.Element) $r3;

        virtualinvoke r1.<org.apache.batik.bridge.svg12.DefaultXBLManager: void unbind(org.w3c.dom.Element)>($r4);

     label3:
        i1 = i1 + 1;

     label4:
        $i2 = interfaceinvoke $r2.<org.w3c.dom.NodeList: int getLength()>();

        if i1 < $i2 goto label2;

     label5:
        return;
    }

    protected void bind(org.w3c.dom.Element)
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager r3, $r13;
        org.apache.batik.dom.svg12.BindableElement $r11;
        short $s0;
        org.w3c.dom.Document $r1, $r4;
        org.w3c.dom.Node $r6;
        int i1, $i2;
        java.lang.String $r8, $r9;
        boolean $z0, $z1;
        org.w3c.dom.NodeList $r5;
        org.apache.batik.dom.AbstractDocument r2;
        org.apache.batik.dom.xbl.XBLManager $r12;
        org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord $r10;
        org.w3c.dom.Element r0, $r7;

        r3 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        r0 := @parameter0: org.w3c.dom.Element;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        r2 = (org.apache.batik.dom.AbstractDocument) $r1;

        $r4 = r3.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.w3c.dom.Document document>;

        if r2 == $r4 goto label1;

        $r12 = virtualinvoke r2.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.xbl.XBLManager getXBLManager()>();

        $z1 = $r12 instanceof org.apache.batik.bridge.svg12.DefaultXBLManager;

        if $z1 == 0 goto label1;

        $r13 = (org.apache.batik.bridge.svg12.DefaultXBLManager) $r12;

        virtualinvoke $r13.<org.apache.batik.bridge.svg12.DefaultXBLManager: void bind(org.w3c.dom.Element)>(r0);

        return;

     label1:
        $z0 = r0 instanceof org.apache.batik.dom.svg12.BindableElement;

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $r9 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $r10 = virtualinvoke r3.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord getActiveDefinition(java.lang.String,java.lang.String)>($r8, $r9);

        $r11 = (org.apache.batik.dom.svg12.BindableElement) r0;

        virtualinvoke r3.<org.apache.batik.bridge.svg12.DefaultXBLManager: void setActiveDefinition(org.apache.batik.dom.svg12.BindableElement,org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord)>($r11, $r10);

        goto label6;

     label2:
        $r5 = virtualinvoke r3.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.w3c.dom.NodeList getXblScopedChildNodes(org.w3c.dom.Node)>(r0);

        i1 = 0;

        goto label5;

     label3:
        $r6 = interfaceinvoke $r5.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i1);

        $s0 = interfaceinvoke $r6.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label4;

        $r7 = (org.w3c.dom.Element) $r6;

        virtualinvoke r3.<org.apache.batik.bridge.svg12.DefaultXBLManager: void bind(org.w3c.dom.Element)>($r7);

     label4:
        i1 = i1 + 1;

     label5:
        $i2 = interfaceinvoke $r5.<org.w3c.dom.NodeList: int getLength()>();

        if i1 < $i2 goto label3;

     label6:
        return;
    }

    protected void rebind(java.lang.String, java.lang.String, org.w3c.dom.Element)
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager r3, $r16;
        org.apache.batik.dom.svg12.BindableElement $r14;
        short $s0;
        org.w3c.dom.Document $r1, $r4;
        org.w3c.dom.Node $r5;
        int i1, $i2;
        java.lang.String r6, r7, $r9, $r10, $r11, $r12;
        boolean $z0, $z1, $z2, $z3;
        org.w3c.dom.NodeList $r17;
        org.apache.batik.dom.AbstractDocument r2;
        org.apache.batik.dom.xbl.XBLManager $r15;
        org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord $r13;
        org.w3c.dom.Element r0, $r8;

        r3 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        r6 := @parameter0: java.lang.String;

        r7 := @parameter1: java.lang.String;

        r0 := @parameter2: org.w3c.dom.Element;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        r2 = (org.apache.batik.dom.AbstractDocument) $r1;

        $r4 = r3.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.w3c.dom.Document document>;

        if r2 == $r4 goto label1;

        $r15 = virtualinvoke r2.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.xbl.XBLManager getXBLManager()>();

        $z3 = $r15 instanceof org.apache.batik.bridge.svg12.DefaultXBLManager;

        if $z3 == 0 goto label1;

        $r16 = (org.apache.batik.bridge.svg12.DefaultXBLManager) $r15;

        virtualinvoke $r16.<org.apache.batik.bridge.svg12.DefaultXBLManager: void rebind(java.lang.String,java.lang.String,org.w3c.dom.Element)>(r6, r7, r0);

        return;

     label1:
        $z0 = r0 instanceof org.apache.batik.dom.svg12.BindableElement;

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $z1 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z1 == 0 goto label2;

        $r10 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z2 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z2 == 0 goto label2;

        $r11 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $r12 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $r13 = virtualinvoke r3.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord getActiveDefinition(java.lang.String,java.lang.String)>($r11, $r12);

        $r14 = (org.apache.batik.dom.svg12.BindableElement) r0;

        virtualinvoke r3.<org.apache.batik.bridge.svg12.DefaultXBLManager: void setActiveDefinition(org.apache.batik.dom.svg12.BindableElement,org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord)>($r14, $r13);

        goto label6;

     label2:
        $r17 = virtualinvoke r3.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.w3c.dom.NodeList getXblScopedChildNodes(org.w3c.dom.Node)>(r0);

        i1 = 0;

        goto label5;

     label3:
        $r5 = interfaceinvoke $r17.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i1);

        $s0 = interfaceinvoke $r5.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label4;

        $r8 = (org.w3c.dom.Element) $r5;

        virtualinvoke r3.<org.apache.batik.bridge.svg12.DefaultXBLManager: void rebind(java.lang.String,java.lang.String,org.w3c.dom.Element)>(r6, r7, $r8);

     label4:
        i1 = i1 + 1;

     label5:
        $i2 = interfaceinvoke $r17.<org.w3c.dom.NodeList: int getLength()>();

        if i1 < $i2 goto label3;

     label6:
        return;
    }

    protected void setActiveDefinition(org.apache.batik.dom.svg12.BindableElement, org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord)
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager r0;
        org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord $r2;
        org.apache.batik.dom.svg12.XBLOMDefinitionElement $r4, $r8;
        org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord r3;
        org.apache.batik.dom.svg12.BindableElement r1;
        org.apache.batik.dom.svg12.XBLOMShadowTreeElement $r7;
        org.apache.batik.dom.svg12.XBLOMTemplateElement $r5, $r6;

        r0 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        r1 := @parameter0: org.apache.batik.dom.svg12.BindableElement;

        r3 := @parameter1: org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord;

        $r2 = virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord getRecord(org.w3c.dom.Node)>(r1);

        if r3 != null goto label1;

        $r8 = null;

        goto label2;

     label1:
        $r8 = r3.<org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord: org.apache.batik.dom.svg12.XBLOMDefinitionElement definition>;

     label2:
        $r2.<org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord: org.apache.batik.dom.svg12.XBLOMDefinitionElement definitionElement> = $r8;

        if r3 == null goto label3;

        $r4 = r3.<org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord: org.apache.batik.dom.svg12.XBLOMDefinitionElement definition>;

        if $r4 == null goto label3;

        $r5 = r3.<org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord: org.apache.batik.dom.svg12.XBLOMTemplateElement template>;

        if $r5 == null goto label3;

        $r6 = r3.<org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord: org.apache.batik.dom.svg12.XBLOMTemplateElement template>;

        $r7 = virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.dom.svg12.XBLOMShadowTreeElement cloneTemplate(org.apache.batik.dom.svg12.XBLOMTemplateElement)>($r6);

        virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: void setXblShadowTree(org.apache.batik.dom.svg12.BindableElement,org.apache.batik.dom.svg12.XBLOMShadowTreeElement)>(r1, $r7);

        goto label4;

     label3:
        virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: void setXblShadowTree(org.apache.batik.dom.svg12.BindableElement,org.apache.batik.dom.svg12.XBLOMShadowTreeElement)>(r1, null);

     label4:
        return;
    }

    protected void setXblShadowTree(org.apache.batik.dom.svg12.BindableElement, org.apache.batik.dom.svg12.XBLOMShadowTreeElement)
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager r0;
        org.apache.batik.bridge.svg12.DefaultXBLManager$DocSubtreeListener $r8, $r15;
        org.apache.batik.dom.svg12.BindableElement r1;
        short $s0;
        org.apache.batik.dom.svg12.XBLOMShadowTreeElement r3, r4;
        org.w3c.dom.Document $r10;
        org.w3c.dom.Node $r6;
        int i1, $i2;
        org.w3c.dom.NodeList $r5;
        org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord $r9, $r14;
        org.apache.batik.dom.AbstractDocument r16;
        org.apache.batik.dom.xbl.XBLManager $r11;
        org.w3c.dom.Element $r2, $r7;
        org.apache.batik.bridge.svg12.ContentManager $r12, $r13;

        r0 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        r1 := @parameter0: org.apache.batik.dom.svg12.BindableElement;

        r4 := @parameter1: org.apache.batik.dom.svg12.XBLOMShadowTreeElement;

        $r2 = virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.w3c.dom.Element getXblShadowTree(org.w3c.dom.Node)>(r1);

        r3 = (org.apache.batik.dom.svg12.XBLOMShadowTreeElement) $r2;

        if r3 == null goto label2;

        virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: void fireShadowTreeEvent(org.apache.batik.dom.svg12.BindableElement,java.lang.String,org.apache.batik.dom.xbl.XBLShadowTreeElement)>(r1, "unbinding", r3);

        $r13 = virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.bridge.svg12.ContentManager getContentManager(org.w3c.dom.Node)>(r3);

        if $r13 == null goto label1;

        virtualinvoke $r13.<org.apache.batik.bridge.svg12.ContentManager: void dispose()>();

     label1:
        virtualinvoke r1.<org.apache.batik.dom.svg12.BindableElement: void setShadowTree(org.apache.batik.dom.svg12.XBLOMShadowTreeElement)>(null);

        $r14 = virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord getRecord(org.w3c.dom.Node)>(r3);

        $r14.<org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord: org.apache.batik.dom.svg12.BindableElement boundElement> = null;

        $r15 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.bridge.svg12.DefaultXBLManager$DocSubtreeListener docSubtreeListener>;

        virtualinvoke r3.<org.apache.batik.dom.AbstractNode: void removeEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "DOMSubtreeModified", $r15, 0);

     label2:
        if r4 == null goto label3;

        $r8 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.bridge.svg12.DefaultXBLManager$DocSubtreeListener docSubtreeListener>;

        virtualinvoke r4.<org.apache.batik.dom.AbstractNode: void addEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean,java.lang.Object)>("http://www.w3.org/2001/xml-events", "DOMSubtreeModified", $r8, 0, null);

        virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: void fireShadowTreeEvent(org.apache.batik.dom.svg12.BindableElement,java.lang.String,org.apache.batik.dom.xbl.XBLShadowTreeElement)>(r1, "prebind", r4);

        virtualinvoke r1.<org.apache.batik.dom.svg12.BindableElement: void setShadowTree(org.apache.batik.dom.svg12.XBLOMShadowTreeElement)>(r4);

        $r9 = virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord getRecord(org.w3c.dom.Node)>(r4);

        $r9.<org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord: org.apache.batik.dom.svg12.BindableElement boundElement> = r1;

        $r10 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Document getOwnerDocument()>();

        r16 = (org.apache.batik.dom.AbstractDocument) $r10;

        $r11 = virtualinvoke r16.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.xbl.XBLManager getXBLManager()>();

        $r12 = new org.apache.batik.bridge.svg12.ContentManager;

        specialinvoke $r12.<org.apache.batik.bridge.svg12.ContentManager: void <init>(org.apache.batik.dom.svg12.XBLOMShadowTreeElement,org.apache.batik.dom.xbl.XBLManager)>(r4, $r11);

        virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: void setContentManager(org.w3c.dom.Element,org.apache.batik.bridge.svg12.ContentManager)>(r4, $r12);

     label3:
        virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: void invalidateChildNodes(org.w3c.dom.Node)>(r1);

        if r4 == null goto label7;

        $r5 = virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.w3c.dom.NodeList getXblScopedChildNodes(org.w3c.dom.Node)>(r1);

        i1 = 0;

        goto label6;

     label4:
        $r6 = interfaceinvoke $r5.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i1);

        $s0 = interfaceinvoke $r6.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label5;

        $r7 = (org.w3c.dom.Element) $r6;

        virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: void bind(org.w3c.dom.Element)>($r7);

     label5:
        i1 = i1 + 1;

     label6:
        $i2 = interfaceinvoke $r5.<org.w3c.dom.NodeList: int getLength()>();

        if i1 < $i2 goto label4;

        virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: void dispatchBindingChangedEvent(org.w3c.dom.Element,org.w3c.dom.Element)>(r1, r4);

        virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: void fireShadowTreeEvent(org.apache.batik.dom.svg12.BindableElement,java.lang.String,org.apache.batik.dom.xbl.XBLShadowTreeElement)>(r1, "bound", r4);

        goto label8;

     label7:
        virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: void dispatchBindingChangedEvent(org.w3c.dom.Element,org.w3c.dom.Element)>(r1, r4);

     label8:
        return;
    }

    protected void fireShadowTreeEvent(org.apache.batik.dom.svg12.BindableElement, java.lang.String, org.apache.batik.dom.xbl.XBLShadowTreeElement)
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager r7;
        org.w3c.dom.events.DocumentEvent r2;
        org.apache.batik.dom.svg12.BindableElement r0;
        org.w3c.dom.Document $r1;
        org.w3c.dom.events.Event $r3;
        org.apache.batik.dom.xbl.ShadowTreeEvent r4;
        java.lang.String r5;
        org.apache.batik.dom.xbl.XBLShadowTreeElement r6;

        r7 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        r0 := @parameter0: org.apache.batik.dom.svg12.BindableElement;

        r5 := @parameter1: java.lang.String;

        r6 := @parameter2: org.apache.batik.dom.xbl.XBLShadowTreeElement;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Document getOwnerDocument()>();

        r2 = (org.w3c.dom.events.DocumentEvent) $r1;

        $r3 = interfaceinvoke r2.<org.w3c.dom.events.DocumentEvent: org.w3c.dom.events.Event createEvent(java.lang.String)>("ShadowTreeEvent");

        r4 = (org.apache.batik.dom.xbl.ShadowTreeEvent) $r3;

        interfaceinvoke r4.<org.apache.batik.dom.xbl.ShadowTreeEvent: void initShadowTreeEventNS(java.lang.String,java.lang.String,boolean,boolean,org.apache.batik.dom.xbl.XBLShadowTreeElement)>("http://www.w3.org/2004/xbl", r5, 1, 0, r6);

        virtualinvoke r0.<org.apache.batik.dom.AbstractNode: boolean dispatchEvent(org.w3c.dom.events.Event)>(r4);

        return;
    }

    protected org.apache.batik.dom.svg12.XBLOMShadowTreeElement cloneTemplate(org.apache.batik.dom.svg12.XBLOMTemplateElement)
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager r7;
        org.w3c.dom.Attr r8;
        org.w3c.dom.Element $r2;
        org.apache.batik.dom.svg12.XBLOMShadowTreeElement r3;
        org.w3c.dom.Document $r1;
        org.w3c.dom.Node $r5, $r6, r9;
        int i0, $i1;
        org.w3c.dom.NamedNodeMap $r4;
        org.apache.batik.dom.svg12.XBLOMTemplateElement r0;
        boolean $z0;

        r7 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        r0 := @parameter0: org.apache.batik.dom.svg12.XBLOMTemplateElement;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Document getOwnerDocument()>();

        $r2 = interfaceinvoke $r1.<org.w3c.dom.Document: org.w3c.dom.Element createElementNS(java.lang.String,java.lang.String)>("http://www.w3.org/2004/xbl", "shadowTree");

        r3 = (org.apache.batik.dom.svg12.XBLOMShadowTreeElement) $r2;

        $r4 = virtualinvoke r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap getAttributes()>();

        i0 = 0;

        goto label4;

     label1:
        $r5 = interfaceinvoke $r4.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i0);

        r8 = (org.w3c.dom.Attr) $r5;

        $z0 = r8 instanceof org.apache.batik.dom.AbstractAttrNS;

        if $z0 == 0 goto label2;

        virtualinvoke r3.<org.apache.batik.dom.AbstractElement: org.w3c.dom.Attr setAttributeNodeNS(org.w3c.dom.Attr)>(r8);

        goto label3;

     label2:
        virtualinvoke r3.<org.apache.batik.dom.AbstractElement: org.w3c.dom.Attr setAttributeNode(org.w3c.dom.Attr)>(r8);

     label3:
        i0 = i0 + 1;

     label4:
        $i1 = interfaceinvoke $r4.<org.w3c.dom.NamedNodeMap: int getLength()>();

        if i0 < $i1 goto label1;

        r9 = virtualinvoke r0.<org.apache.batik.dom.AbstractParentNode: org.w3c.dom.Node getFirstChild()>();

        goto label6;

     label5:
        $r6 = interfaceinvoke r9.<org.w3c.dom.Node: org.w3c.dom.Node cloneNode(boolean)>(1);

        virtualinvoke r3.<org.apache.batik.dom.AbstractParentNode: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r6);

        r9 = interfaceinvoke r9.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label6:
        if r9 != null goto label5;

        return r3;
    }

    public org.w3c.dom.Node getXblParentNode(org.w3c.dom.Node)
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager r0;
        org.w3c.dom.Node r1, $r3, r4;
        org.apache.batik.dom.svg12.XBLOMContentElement $r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        r1 := @parameter0: org.w3c.dom.Node;

        $r2 = virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.dom.svg12.XBLOMContentElement getXblContentElement(org.w3c.dom.Node)>(r1);

        if $r2 != null goto label1;

        $r3 = interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke $r2.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

     label2:
        r4 = $r3;

        $z0 = $r3 instanceof org.apache.batik.dom.svg12.XBLOMContentElement;

        if $z0 == 0 goto label3;

        r4 = interfaceinvoke $r3.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

     label3:
        $z1 = r4 instanceof org.apache.batik.dom.svg12.XBLOMShadowTreeElement;

        if $z1 == 0 goto label4;

        r4 = virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.w3c.dom.Element getXblBoundElement(org.w3c.dom.Node)>(r4);

     label4:
        return r4;
    }

    public org.w3c.dom.NodeList getXblChildNodes(org.w3c.dom.Node)
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager r0;
        org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord $r2;
        org.w3c.dom.Node r1;
        org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes $r3, $r4, $r5;

        r0 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        r1 := @parameter0: org.w3c.dom.Node;

        $r2 = virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord getRecord(org.w3c.dom.Node)>(r1);

        $r3 = $r2.<org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord: org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes childNodes>;

        if $r3 != null goto label1;

        $r5 = new org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes;

        specialinvoke $r5.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes: void <init>(org.apache.batik.bridge.svg12.DefaultXBLManager,org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord)>(r0, $r2);

        $r2.<org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord: org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes childNodes> = $r5;

     label1:
        $r4 = $r2.<org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord: org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes childNodes>;

        return $r4;
    }

    public org.w3c.dom.NodeList getXblScopedChildNodes(org.w3c.dom.Node)
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager$XblScopedChildNodes $r3, $r4, $r5;
        org.apache.batik.bridge.svg12.DefaultXBLManager r0;
        org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord $r2;
        org.w3c.dom.Node r1;

        r0 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        r1 := @parameter0: org.w3c.dom.Node;

        $r2 = virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord getRecord(org.w3c.dom.Node)>(r1);

        $r3 = $r2.<org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord: org.apache.batik.bridge.svg12.DefaultXBLManager$XblScopedChildNodes scopedChildNodes>;

        if $r3 != null goto label1;

        $r5 = new org.apache.batik.bridge.svg12.DefaultXBLManager$XblScopedChildNodes;

        specialinvoke $r5.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblScopedChildNodes: void <init>(org.apache.batik.bridge.svg12.DefaultXBLManager,org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord)>(r0, $r2);

        $r2.<org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord: org.apache.batik.bridge.svg12.DefaultXBLManager$XblScopedChildNodes scopedChildNodes> = $r5;

     label1:
        $r4 = $r2.<org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord: org.apache.batik.bridge.svg12.DefaultXBLManager$XblScopedChildNodes scopedChildNodes>;

        return $r4;
    }

    public org.w3c.dom.Node getXblFirstChild(org.w3c.dom.Node)
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager r0;
        org.w3c.dom.NodeList $r2;
        org.w3c.dom.Node r1, $r3;

        r0 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        r1 := @parameter0: org.w3c.dom.Node;

        $r2 = virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.w3c.dom.NodeList getXblChildNodes(org.w3c.dom.Node)>(r1);

        $r3 = interfaceinvoke $r2.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        return $r3;
    }

    public org.w3c.dom.Node getXblLastChild(org.w3c.dom.Node)
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager r0;
        org.w3c.dom.NodeList $r2;
        org.w3c.dom.Node r1, $r3;
        int $i0, $i1;

        r0 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        r1 := @parameter0: org.w3c.dom.Node;

        $r2 = virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.w3c.dom.NodeList getXblChildNodes(org.w3c.dom.Node)>(r1);

        $i0 = interfaceinvoke $r2.<org.w3c.dom.NodeList: int getLength()>();

        $i1 = $i0 - 1;

        $r3 = interfaceinvoke $r2.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>($i1);

        return $r3;
    }

    public org.w3c.dom.Node getXblPreviousSibling(org.w3c.dom.Node)
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager r0;
        org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord $r4, $r6;
        org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes $r5;
        org.w3c.dom.Node r1, $r2, $r3, $r7;
        boolean $z0;

        r0 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        r1 := @parameter0: org.w3c.dom.Node;

        $r2 = virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.w3c.dom.Node getXblParentNode(org.w3c.dom.Node)>(r1);

        if $r2 == null goto label1;

        $r4 = virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord getRecord(org.w3c.dom.Node)>($r2);

        $r5 = $r4.<org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord: org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes childNodes>;

        if $r5 != null goto label2;

     label1:
        $r3 = interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.Node getPreviousSibling()>();

        return $r3;

     label2:
        $r6 = virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord getRecord(org.w3c.dom.Node)>(r1);

        $z0 = $r6.<org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord: boolean linksValid>;

        if $z0 != 0 goto label3;

        virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: void updateLinks(org.w3c.dom.Node)>(r1);

     label3:
        $r7 = $r6.<org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord: org.w3c.dom.Node previousSibling>;

        return $r7;
    }

    public org.w3c.dom.Node getXblNextSibling(org.w3c.dom.Node)
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager r0;
        org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord $r4, $r6;
        org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes $r5;
        org.w3c.dom.Node r1, $r2, $r3, $r7;
        boolean $z0;

        r0 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        r1 := @parameter0: org.w3c.dom.Node;

        $r2 = virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.w3c.dom.Node getXblParentNode(org.w3c.dom.Node)>(r1);

        if $r2 == null goto label1;

        $r4 = virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord getRecord(org.w3c.dom.Node)>($r2);

        $r5 = $r4.<org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord: org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes childNodes>;

        if $r5 != null goto label2;

     label1:
        $r3 = interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        return $r3;

     label2:
        $r6 = virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord getRecord(org.w3c.dom.Node)>(r1);

        $z0 = $r6.<org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord: boolean linksValid>;

        if $z0 != 0 goto label3;

        virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: void updateLinks(org.w3c.dom.Node)>(r1);

     label3:
        $r7 = $r6.<org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord: org.w3c.dom.Node nextSibling>;

        return $r7;
    }

    public org.w3c.dom.Element getXblFirstElementChild(org.w3c.dom.Node)
    {
        short $s0;
        org.apache.batik.bridge.svg12.DefaultXBLManager r0;
        org.w3c.dom.Element $r1;
        org.w3c.dom.Node r2, r3;

        r0 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        r2 := @parameter0: org.w3c.dom.Node;

        r3 = virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.w3c.dom.Node getXblFirstChild(org.w3c.dom.Node)>(r2);

        goto label2;

     label1:
        r3 = virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.w3c.dom.Node getXblNextSibling(org.w3c.dom.Node)>(r3);

     label2:
        if r3 == null goto label3;

        $s0 = interfaceinvoke r3.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label1;

     label3:
        $r1 = (org.w3c.dom.Element) r3;

        return $r1;
    }

    public org.w3c.dom.Element getXblLastElementChild(org.w3c.dom.Node)
    {
        short $s0;
        org.apache.batik.bridge.svg12.DefaultXBLManager r0;
        org.w3c.dom.Element $r1;
        org.w3c.dom.Node r2, r3;

        r0 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        r2 := @parameter0: org.w3c.dom.Node;

        r3 = virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.w3c.dom.Node getXblLastChild(org.w3c.dom.Node)>(r2);

        goto label2;

     label1:
        r3 = virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.w3c.dom.Node getXblPreviousSibling(org.w3c.dom.Node)>(r3);

     label2:
        if r3 == null goto label3;

        $s0 = interfaceinvoke r3.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label1;

     label3:
        $r1 = (org.w3c.dom.Element) r3;

        return $r1;
    }

    public org.w3c.dom.Element getXblPreviousElementSibling(org.w3c.dom.Node)
    {
        short $s0;
        org.apache.batik.bridge.svg12.DefaultXBLManager r0;
        org.w3c.dom.Element $r2;
        org.w3c.dom.Node $r1, r3;

        r0 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        r3 := @parameter0: org.w3c.dom.Node;

     label1:
        $r1 = virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.w3c.dom.Node getXblPreviousSibling(org.w3c.dom.Node)>(r3);

        r3 = $r1;

        if $r1 == null goto label2;

        $s0 = interfaceinvoke $r1.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label1;

     label2:
        $r2 = (org.w3c.dom.Element) $r1;

        return $r2;
    }

    public org.w3c.dom.Element getXblNextElementSibling(org.w3c.dom.Node)
    {
        short $s0;
        org.apache.batik.bridge.svg12.DefaultXBLManager r0;
        org.w3c.dom.Element $r2;
        org.w3c.dom.Node $r1, r3;

        r0 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        r3 := @parameter0: org.w3c.dom.Node;

     label1:
        $r1 = virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.w3c.dom.Node getXblNextSibling(org.w3c.dom.Node)>(r3);

        r3 = $r1;

        if $r1 == null goto label2;

        $s0 = interfaceinvoke $r1.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label1;

     label2:
        $r2 = (org.w3c.dom.Element) $r1;

        return $r2;
    }

    public org.w3c.dom.Element getXblBoundElement(org.w3c.dom.Node)
    {
        org.apache.batik.dom.svg12.BindableElement $r2;
        org.apache.batik.bridge.svg12.DefaultXBLManager r0;
        org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord $r1;
        org.w3c.dom.Node r4;
        boolean $z0;
        org.apache.batik.dom.svg12.XBLOMContentElement $r3;

        r0 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        r4 := @parameter0: org.w3c.dom.Node;

        goto label3;

     label1:
        $r3 = virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.dom.svg12.XBLOMContentElement getXblContentElement(org.w3c.dom.Node)>(r4);

        if $r3 == null goto label2;

        r4 = $r3;

     label2:
        r4 = interfaceinvoke r4.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

     label3:
        if r4 == null goto label4;

        $z0 = r4 instanceof org.apache.batik.dom.xbl.XBLShadowTreeElement;

        if $z0 == 0 goto label1;

     label4:
        if r4 != null goto label5;

        return null;

     label5:
        $r1 = virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord getRecord(org.w3c.dom.Node)>(r4);

        $r2 = $r1.<org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord: org.apache.batik.dom.svg12.BindableElement boundElement>;

        return $r2;
    }

    public org.w3c.dom.Element getXblShadowTree(org.w3c.dom.Node)
    {
        org.apache.batik.dom.svg12.BindableElement r1;
        org.apache.batik.dom.svg12.XBLOMShadowTreeElement $r2;
        org.apache.batik.bridge.svg12.DefaultXBLManager r3;
        org.w3c.dom.Node r0;
        boolean $z0;

        r3 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        r0 := @parameter0: org.w3c.dom.Node;

        $z0 = r0 instanceof org.apache.batik.dom.svg12.BindableElement;

        if $z0 == 0 goto label1;

        r1 = (org.apache.batik.dom.svg12.BindableElement) r0;

        $r2 = virtualinvoke r1.<org.apache.batik.dom.svg12.BindableElement: org.apache.batik.dom.svg12.XBLOMShadowTreeElement getShadowTree()>();

        return $r2;

     label1:
        return null;
    }

    public org.w3c.dom.NodeList getXblDefinitions(org.w3c.dom.Node)
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager r4;
        org.w3c.dom.Node r0;
        java.lang.String $r1, $r2;
        org.apache.batik.bridge.svg12.DefaultXBLManager$1 $r3;

        r4 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        r0 := @parameter0: org.w3c.dom.Node;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $r2 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $r3 = new org.apache.batik.bridge.svg12.DefaultXBLManager$1;

        specialinvoke $r3.<org.apache.batik.bridge.svg12.DefaultXBLManager$1: void <init>(org.apache.batik.bridge.svg12.DefaultXBLManager,java.lang.String,java.lang.String)>(r4, $r1, $r2);

        return $r3;
    }

    protected org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord getRecord(org.w3c.dom.Node)
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord $r3, r5;
        org.apache.batik.bridge.svg12.DefaultXBLManager r4;
        org.w3c.dom.Node r0;
        java.lang.Object $r2;
        org.apache.batik.dom.xbl.XBLManagerData r1;

        r4 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        r0 := @parameter0: org.w3c.dom.Node;

        r1 = (org.apache.batik.dom.xbl.XBLManagerData) r0;

        $r2 = interfaceinvoke r1.<org.apache.batik.dom.xbl.XBLManagerData: java.lang.Object getManagerData()>();

        r5 = (org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord) $r2;

        if r5 != null goto label1;

        $r3 = new org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord;

        specialinvoke $r3.<org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord: void <init>(org.apache.batik.bridge.svg12.DefaultXBLManager)>(r4);

        r5 = $r3;

        $r3.<org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord: org.w3c.dom.Node node> = r0;

        interfaceinvoke r1.<org.apache.batik.dom.xbl.XBLManagerData: void setManagerData(java.lang.Object)>($r3);

     label1:
        return r5;
    }

    protected void updateLinks(org.w3c.dom.Node)
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager r0;
        org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord $r2;
        org.w3c.dom.NodeList $r4;
        org.w3c.dom.Node r1, $r3;
        boolean $z0;
        org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes $r5;

        r0 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        r1 := @parameter0: org.w3c.dom.Node;

        $r2 = virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord getRecord(org.w3c.dom.Node)>(r1);

        $r2.<org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord: org.w3c.dom.Node previousSibling> = null;

        $r2.<org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord: org.w3c.dom.Node nextSibling> = null;

        $r2.<org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord: boolean linksValid> = 1;

        $r3 = virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.w3c.dom.Node getXblParentNode(org.w3c.dom.Node)>(r1);

        if $r3 == null goto label1;

        $r4 = virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.w3c.dom.NodeList getXblChildNodes(org.w3c.dom.Node)>($r3);

        $z0 = $r4 instanceof org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes;

        if $z0 == 0 goto label1;

        $r5 = (org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes) $r4;

        virtualinvoke $r5.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes: void update()>();

     label1:
        return;
    }

    public org.apache.batik.dom.svg12.XBLOMContentElement getXblContentElement(org.w3c.dom.Node)
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager r0;
        org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord $r2;
        org.w3c.dom.Node r1;
        org.apache.batik.dom.svg12.XBLOMContentElement $r3;

        r0 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        r1 := @parameter0: org.w3c.dom.Node;

        $r2 = virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord getRecord(org.w3c.dom.Node)>(r1);

        $r3 = $r2.<org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord: org.apache.batik.dom.svg12.XBLOMContentElement contentElement>;

        return $r3;
    }

    public static int computeBubbleLimit(org.w3c.dom.Node, org.w3c.dom.Node)
    {
        java.util.ArrayList $r13, $r14;
        org.w3c.dom.Node r5, r7, r11, r12;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i12;
        org.apache.batik.dom.xbl.NodeXBL $r2, $r3, $r8;
        org.w3c.dom.Element $r9;
        java.lang.Object $r4, $r6, $r10;

        r11 := @parameter0: org.w3c.dom.Node;

        r12 := @parameter1: org.w3c.dom.Node;

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>(int)>(10);

        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>(int)>(10);

        goto label02;

     label01:
        virtualinvoke $r13.<java.util.ArrayList: boolean add(java.lang.Object)>(r11);

        $r2 = (org.apache.batik.dom.xbl.NodeXBL) r11;

        r11 = interfaceinvoke $r2.<org.apache.batik.dom.xbl.NodeXBL: org.w3c.dom.Node getXblParentNode()>();

     label02:
        if r11 != null goto label01;

        goto label04;

     label03:
        virtualinvoke $r14.<java.util.ArrayList: boolean add(java.lang.Object)>(r12);

        $r3 = (org.apache.batik.dom.xbl.NodeXBL) r12;

        r12 = interfaceinvoke $r3.<org.apache.batik.dom.xbl.NodeXBL: org.w3c.dom.Node getXblParentNode()>();

     label04:
        if r12 != null goto label03;

        $i0 = virtualinvoke $r13.<java.util.ArrayList: int size()>();

        $i1 = virtualinvoke $r14.<java.util.ArrayList: int size()>();

        i10 = 0;

        goto label10;

     label05:
        $i2 = $i0 - i10;

        $i3 = $i2 - 1;

        $r4 = virtualinvoke $r13.<java.util.ArrayList: java.lang.Object get(int)>($i3);

        r5 = (org.w3c.dom.Node) $r4;

        $i4 = $i1 - i10;

        $i5 = $i4 - 1;

        $r6 = virtualinvoke $r14.<java.util.ArrayList: java.lang.Object get(int)>($i5);

        r7 = (org.w3c.dom.Node) $r6;

        if r5 == r7 goto label09;

        $r8 = (org.apache.batik.dom.xbl.NodeXBL) r5;

        $r9 = interfaceinvoke $r8.<org.apache.batik.dom.xbl.NodeXBL: org.w3c.dom.Element getXblBoundElement()>();

        goto label07;

     label06:
        $i12 = (int) -1;

        i10 = i10 + $i12;

     label07:
        if i10 <= 0 goto label08;

        $i8 = $i0 - i10;

        $i9 = $i8 - 1;

        $r10 = virtualinvoke $r13.<java.util.ArrayList: java.lang.Object get(int)>($i9);

        if $r9 != $r10 goto label06;

     label08:
        $i6 = $i0 - i10;

        $i7 = $i6 - 1;

        return $i7;

     label09:
        i10 = i10 + 1;

     label10:
        if i10 >= $i0 goto label11;

        if i10 < $i1 goto label05;

     label11:
        return 1;
    }

    public org.apache.batik.bridge.svg12.ContentManager getContentManager(org.w3c.dom.Node)
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager r0, r10;
        org.apache.batik.dom.AbstractDocument $r8;
        org.apache.batik.dom.xbl.XBLManager $r9;
        org.w3c.dom.Element $r2, $r3;
        org.w3c.dom.Document $r4, $r5;
        org.w3c.dom.Node r1;
        java.util.Map $r6, $r11;
        org.apache.batik.bridge.svg12.ContentManager r13;
        java.lang.Object $r7, $r12;

        r0 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        r1 := @parameter0: org.w3c.dom.Node;

        $r2 = virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.w3c.dom.Element getXblBoundElement(org.w3c.dom.Node)>(r1);

        if $r2 == null goto label3;

        $r3 = virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.w3c.dom.Element getXblShadowTree(org.w3c.dom.Node)>($r2);

        if $r3 == null goto label3;

        $r4 = interfaceinvoke $r2.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        $r5 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.w3c.dom.Document document>;

        if $r4 == $r5 goto label1;

        $r8 = (org.apache.batik.dom.AbstractDocument) $r4;

        $r9 = virtualinvoke $r8.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.xbl.XBLManager getXBLManager()>();

        r10 = (org.apache.batik.bridge.svg12.DefaultXBLManager) $r9;

        $r11 = r10.<org.apache.batik.bridge.svg12.DefaultXBLManager: java.util.Map contentManagers>;

        $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        r13 = (org.apache.batik.bridge.svg12.ContentManager) $r12;

        goto label2;

     label1:
        $r6 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: java.util.Map contentManagers>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        r13 = (org.apache.batik.bridge.svg12.ContentManager) $r7;

     label2:
        return r13;

     label3:
        return null;
    }

    void setContentManager(org.w3c.dom.Element, org.apache.batik.bridge.svg12.ContentManager)
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager r1;
        org.w3c.dom.Element r2;
        java.util.Map $r3, $r4;
        org.apache.batik.bridge.svg12.ContentManager r0;

        r1 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        r2 := @parameter0: org.w3c.dom.Element;

        r0 := @parameter1: org.apache.batik.bridge.svg12.ContentManager;

        if r0 != null goto label1;

        $r4 = r1.<org.apache.batik.bridge.svg12.DefaultXBLManager: java.util.Map contentManagers>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2);

        goto label2;

     label1:
        $r3 = r1.<org.apache.batik.bridge.svg12.DefaultXBLManager: java.util.Map contentManagers>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r0);

     label2:
        return;
    }

    public void invalidateChildNodes(org.w3c.dom.Node)
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager$XblScopedChildNodes $r4, $r5;
        org.apache.batik.bridge.svg12.DefaultXBLManager r0;
        org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord $r2;
        org.w3c.dom.Node r1;
        org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes $r3, $r6;

        r0 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        r1 := @parameter0: org.w3c.dom.Node;

        $r2 = virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord getRecord(org.w3c.dom.Node)>(r1);

        $r3 = $r2.<org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord: org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes childNodes>;

        if $r3 == null goto label1;

        $r6 = $r2.<org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord: org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes childNodes>;

        virtualinvoke $r6.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes: void invalidate()>();

     label1:
        $r4 = $r2.<org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord: org.apache.batik.bridge.svg12.DefaultXBLManager$XblScopedChildNodes scopedChildNodes>;

        if $r4 == null goto label2;

        $r5 = $r2.<org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord: org.apache.batik.bridge.svg12.DefaultXBLManager$XblScopedChildNodes scopedChildNodes>;

        virtualinvoke $r5.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes: void invalidate()>();

     label2:
        return;
    }

    public void addContentSelectionChangedListener(org.apache.batik.bridge.svg12.ContentSelectionChangedListener)
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager r0;
        javax.swing.event.EventListenerList $r3;
        java.lang.Class $r1, $r4;
        org.apache.batik.bridge.svg12.ContentSelectionChangedListener r2;

        r0 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        r2 := @parameter0: org.apache.batik.bridge.svg12.ContentSelectionChangedListener;

        $r3 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: javax.swing.event.EventListenerList contentSelectionChangedListenerList>;

        $r1 = <org.apache.batik.bridge.svg12.DefaultXBLManager: java.lang.Class class$org$apache$batik$bridge$svg12$ContentSelectionChangedListener>;

        if $r1 != null goto label1;

        $r4 = staticinvoke <org.apache.batik.bridge.svg12.DefaultXBLManager: java.lang.Class class$(java.lang.String)>("org.apache.batik.bridge.svg12.ContentSelectionChangedListener");

        <org.apache.batik.bridge.svg12.DefaultXBLManager: java.lang.Class class$org$apache$batik$bridge$svg12$ContentSelectionChangedListener> = $r4;

        goto label2;

     label1:
        $r4 = <org.apache.batik.bridge.svg12.DefaultXBLManager: java.lang.Class class$org$apache$batik$bridge$svg12$ContentSelectionChangedListener>;

     label2:
        virtualinvoke $r3.<javax.swing.event.EventListenerList: void add(java.lang.Class,java.util.EventListener)>($r4, r2);

        return;
    }

    public void removeContentSelectionChangedListener(org.apache.batik.bridge.svg12.ContentSelectionChangedListener)
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager r0;
        javax.swing.event.EventListenerList $r3;
        java.lang.Class $r1, $r4;
        org.apache.batik.bridge.svg12.ContentSelectionChangedListener r2;

        r0 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        r2 := @parameter0: org.apache.batik.bridge.svg12.ContentSelectionChangedListener;

        $r3 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: javax.swing.event.EventListenerList contentSelectionChangedListenerList>;

        $r1 = <org.apache.batik.bridge.svg12.DefaultXBLManager: java.lang.Class class$org$apache$batik$bridge$svg12$ContentSelectionChangedListener>;

        if $r1 != null goto label1;

        $r4 = staticinvoke <org.apache.batik.bridge.svg12.DefaultXBLManager: java.lang.Class class$(java.lang.String)>("org.apache.batik.bridge.svg12.ContentSelectionChangedListener");

        <org.apache.batik.bridge.svg12.DefaultXBLManager: java.lang.Class class$org$apache$batik$bridge$svg12$ContentSelectionChangedListener> = $r4;

        goto label2;

     label1:
        $r4 = <org.apache.batik.bridge.svg12.DefaultXBLManager: java.lang.Class class$org$apache$batik$bridge$svg12$ContentSelectionChangedListener>;

     label2:
        virtualinvoke $r3.<javax.swing.event.EventListenerList: void remove(java.lang.Class,java.util.EventListener)>($r4, r2);

        return;
    }

    protected java.lang.Object[] getContentSelectionChangedListeners()
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager r0;
        java.lang.Object[] $r2;
        javax.swing.event.EventListenerList $r1;

        r0 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        $r1 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: javax.swing.event.EventListenerList contentSelectionChangedListenerList>;

        $r2 = virtualinvoke $r1.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>();

        return $r2;
    }

    void shadowTreeSelectedContentChanged(java.util.Set, java.util.Set)
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager r3;
        java.util.Iterator $r1, $r6;
        java.util.Set r0, r5;
        short $s0, $s1;
        org.w3c.dom.Element $r4, $r8;
        org.w3c.dom.Node r9, r10;
        java.lang.Object $r2, $r7;
        boolean $z0, $z1;

        r3 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        r0 := @parameter0: java.util.Set;

        r5 := @parameter1: java.util.Set;

        $r1 = interfaceinvoke r0.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.w3c.dom.Node) $r2;

        $s0 = interfaceinvoke r9.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label2;

        $r4 = (org.w3c.dom.Element) r9;

        virtualinvoke r3.<org.apache.batik.bridge.svg12.DefaultXBLManager: void unbind(org.w3c.dom.Element)>($r4);

     label2:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r6 = interfaceinvoke r5.<java.util.Set: java.util.Iterator iterator()>();

        goto label4;

     label3:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.w3c.dom.Node) $r7;

        $s1 = interfaceinvoke r10.<org.w3c.dom.Node: short getNodeType()>();

        if $s1 != 1 goto label4;

        $r8 = (org.w3c.dom.Element) r10;

        virtualinvoke r3.<org.apache.batik.bridge.svg12.DefaultXBLManager: void bind(org.w3c.dom.Element)>($r8);

     label4:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label3;

        return;
    }

    public void addBindingListener(org.apache.batik.bridge.svg12.BindingListener)
    {
        org.apache.batik.bridge.svg12.BindingListener r2;
        org.apache.batik.bridge.svg12.DefaultXBLManager r0;
        javax.swing.event.EventListenerList $r3;
        java.lang.Class $r1, $r4;

        r0 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        r2 := @parameter0: org.apache.batik.bridge.svg12.BindingListener;

        $r3 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: javax.swing.event.EventListenerList bindingListenerList>;

        $r1 = <org.apache.batik.bridge.svg12.DefaultXBLManager: java.lang.Class class$org$apache$batik$bridge$svg12$BindingListener>;

        if $r1 != null goto label1;

        $r4 = staticinvoke <org.apache.batik.bridge.svg12.DefaultXBLManager: java.lang.Class class$(java.lang.String)>("org.apache.batik.bridge.svg12.BindingListener");

        <org.apache.batik.bridge.svg12.DefaultXBLManager: java.lang.Class class$org$apache$batik$bridge$svg12$BindingListener> = $r4;

        goto label2;

     label1:
        $r4 = <org.apache.batik.bridge.svg12.DefaultXBLManager: java.lang.Class class$org$apache$batik$bridge$svg12$BindingListener>;

     label2:
        virtualinvoke $r3.<javax.swing.event.EventListenerList: void add(java.lang.Class,java.util.EventListener)>($r4, r2);

        return;
    }

    public void removeBindingListener(org.apache.batik.bridge.svg12.BindingListener)
    {
        org.apache.batik.bridge.svg12.BindingListener r2;
        org.apache.batik.bridge.svg12.DefaultXBLManager r0;
        javax.swing.event.EventListenerList $r3;
        java.lang.Class $r1, $r4;

        r0 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        r2 := @parameter0: org.apache.batik.bridge.svg12.BindingListener;

        $r3 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: javax.swing.event.EventListenerList bindingListenerList>;

        $r1 = <org.apache.batik.bridge.svg12.DefaultXBLManager: java.lang.Class class$org$apache$batik$bridge$svg12$BindingListener>;

        if $r1 != null goto label1;

        $r4 = staticinvoke <org.apache.batik.bridge.svg12.DefaultXBLManager: java.lang.Class class$(java.lang.String)>("org.apache.batik.bridge.svg12.BindingListener");

        <org.apache.batik.bridge.svg12.DefaultXBLManager: java.lang.Class class$org$apache$batik$bridge$svg12$BindingListener> = $r4;

        goto label2;

     label1:
        $r4 = <org.apache.batik.bridge.svg12.DefaultXBLManager: java.lang.Class class$org$apache$batik$bridge$svg12$BindingListener>;

     label2:
        virtualinvoke $r3.<javax.swing.event.EventListenerList: void remove(java.lang.Class,java.util.EventListener)>($r4, r2);

        return;
    }

    protected void dispatchBindingChangedEvent(org.w3c.dom.Element, org.w3c.dom.Element)
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager r0;
        java.lang.Object[] $r2;
        org.apache.batik.bridge.svg12.BindingListener r4;
        org.w3c.dom.Element r5, r6;
        javax.swing.event.EventListenerList $r1;
        int $i0, $i1, i2, $i4;
        java.lang.Object $r3;

        r0 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        r5 := @parameter0: org.w3c.dom.Element;

        r6 := @parameter1: org.w3c.dom.Element;

        $r1 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: javax.swing.event.EventListenerList bindingListenerList>;

        $r2 = virtualinvoke $r1.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>();

        $i0 = lengthof $r2;

        i2 = $i0 - 2;

        goto label2;

     label1:
        $i1 = i2 + 1;

        $r3 = $r2[$i1];

        r4 = (org.apache.batik.bridge.svg12.BindingListener) $r3;

        interfaceinvoke r4.<org.apache.batik.bridge.svg12.BindingListener: void bindingChanged(org.w3c.dom.Element,org.w3c.dom.Element)>(r5, r6);

        $i4 = (int) -2;

        i2 = i2 + $i4;

     label2:
        if i2 >= 0 goto label1;

        return;
    }

    protected boolean isActiveDefinition(org.apache.batik.dom.svg12.XBLOMDefinitionElement, org.w3c.dom.Element)
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager r0;
        org.apache.batik.util.DoublyIndexedTable $r3;
        org.apache.batik.dom.svg12.XBLOMDefinitionElement r1;
        org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord r5, $r8;
        org.w3c.dom.Element r2;
        java.lang.Object $r4;
        java.lang.String $r6, $r7;
        boolean $z0;

        r0 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager;

        r1 := @parameter0: org.apache.batik.dom.svg12.XBLOMDefinitionElement;

        r2 := @parameter1: org.w3c.dom.Element;

        $r3 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.util.DoublyIndexedTable definitions>;

        $r4 = virtualinvoke $r3.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object get(java.lang.Object,java.lang.Object)>(r1, r2);

        r5 = (org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord) $r4;

        if r5 != null goto label1;

        return 0;

     label1:
        $r7 = r5.<org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord: java.lang.String namespaceURI>;

        $r6 = r5.<org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord: java.lang.String localName>;

        $r8 = virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.bridge.svg12.DefaultXBLManager$DefinitionRecord getActiveDefinition(java.lang.String,java.lang.String)>($r7, $r6);

        if r5 != $r8 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        return $r1;

     label2:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label2;
    }
}
