public class org.waveprotocol.box.server.persistence.file.FileDeltaCollection extends java.lang.Object implements org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess
{
    public static final java.lang.String DELTAS_FILE_SUFFIX;
    public static final java.lang.String INDEX_FILE_SUFFIX;
    private static final byte[] FILE_MAGIC_BYTES;
    private static final int FILE_PROTOCOL_VERSION;
    private static final int FILE_HEADER_LENGTH;
    private static final int DELTA_PROTOCOL_VERSION;
    private static final org.waveprotocol.wave.util.logging.Log LOG;
    private final org.waveprotocol.wave.model.id.WaveletName waveletName;
    private final java.io.RandomAccessFile file;
    private final org.waveprotocol.box.server.persistence.file.DeltaIndex index;
    private org.waveprotocol.wave.model.version.HashedVersion endVersion;
    private boolean isOpen;

    public static org.waveprotocol.box.server.persistence.file.FileDeltaCollection open(org.waveprotocol.wave.model.id.WaveletName, java.lang.String) throws java.io.IOException
    {
        org.waveprotocol.wave.model.id.WaveletName r0;
        java.io.RandomAccessFile $r3;
        org.waveprotocol.box.server.persistence.file.DeltaIndex $r4;
        org.waveprotocol.box.server.persistence.file.FileDeltaCollection $r6;
        java.lang.String r1;
        java.io.File $r2, $r5;

        r0 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r1 := @parameter1: java.lang.String;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "null wavelet name");

        $r2 = staticinvoke <org.waveprotocol.box.server.persistence.file.FileDeltaCollection: java.io.File deltasFile(java.lang.String,org.waveprotocol.wave.model.id.WaveletName)>(r1, r0);

        $r3 = staticinvoke <org.waveprotocol.box.server.persistence.file.FileUtils: java.io.RandomAccessFile getOrCreateFile(java.io.File)>($r2);

        staticinvoke <org.waveprotocol.box.server.persistence.file.FileDeltaCollection: void setOrCheckFileHeader(java.io.RandomAccessFile)>($r3);

        $r4 = new org.waveprotocol.box.server.persistence.file.DeltaIndex;

        $r5 = staticinvoke <org.waveprotocol.box.server.persistence.file.FileDeltaCollection: java.io.File indexFile(java.lang.String,org.waveprotocol.wave.model.id.WaveletName)>(r1, r0);

        specialinvoke $r4.<org.waveprotocol.box.server.persistence.file.DeltaIndex: void <init>(java.io.File)>($r5);

        $r6 = new org.waveprotocol.box.server.persistence.file.FileDeltaCollection;

        specialinvoke $r6.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: void <init>(org.waveprotocol.wave.model.id.WaveletName,java.io.RandomAccessFile,org.waveprotocol.box.server.persistence.file.DeltaIndex)>(r0, $r3, $r4);

        virtualinvoke $r4.<org.waveprotocol.box.server.persistence.file.DeltaIndex: void openForCollection(org.waveprotocol.box.server.persistence.file.FileDeltaCollection)>($r6);

        specialinvoke $r6.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: void initializeEndVersionAndTruncateTrailingJunk()>();

        return $r6;
    }

    public static void delete(org.waveprotocol.wave.model.id.WaveletName, java.lang.String) throws org.waveprotocol.box.server.persistence.PersistenceException
    {
        org.waveprotocol.box.server.persistence.PersistenceException $r3;
        java.lang.String r0, $r7, $r12, r15;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.waveprotocol.wave.model.id.WaveletName r1;
        java.io.File $r2, $r16;
        java.lang.StringBuilder $r4, $r5, $r6, $r8, $r9, $r10, $r11, $r13, $r14;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r0 := @parameter1: java.lang.String;

        r15 = "";

        $r2 = staticinvoke <org.waveprotocol.box.server.persistence.file.FileDeltaCollection: java.io.File deltasFile(java.lang.String,org.waveprotocol.wave.model.id.WaveletName)>(r0, r1);

        $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $z2 = virtualinvoke $r2.<java.io.File: boolean delete()>();

        if $z2 != 0 goto label1;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not delete deltas file: ");

        $r12 = virtualinvoke $r2.<java.io.File: java.lang.String getAbsolutePath()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". ");

        r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r16 = staticinvoke <org.waveprotocol.box.server.persistence.file.FileDeltaCollection: java.io.File indexFile(java.lang.String,org.waveprotocol.wave.model.id.WaveletName)>(r0, r1);

        $z3 = virtualinvoke $r16.<java.io.File: boolean exists()>();

        if $z3 == 0 goto label2;

        $z1 = virtualinvoke $r16.<java.io.File: boolean delete()>();

        if $z1 != 0 goto label2;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not delete index file: ");

        $r7 = virtualinvoke $r16.<java.io.File: java.lang.String getAbsolutePath()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        r15 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $z4 = virtualinvoke r15.<java.lang.String: boolean isEmpty()>();

        if $z4 != 0 goto label3;

        $r3 = new org.waveprotocol.box.server.persistence.PersistenceException;

        specialinvoke $r3.<org.waveprotocol.box.server.persistence.PersistenceException: void <init>(java.lang.String)>(r15);

        throw $r3;

     label3:
        return;
    }

    public void <init>(org.waveprotocol.wave.model.id.WaveletName, java.io.RandomAccessFile, org.waveprotocol.box.server.persistence.file.DeltaIndex)
    {
        org.waveprotocol.wave.model.id.WaveletName r1;
        java.io.RandomAccessFile r2;
        org.waveprotocol.box.server.persistence.file.DeltaIndex r3;
        org.waveprotocol.box.server.persistence.file.FileDeltaCollection r0;

        r0 := @this: org.waveprotocol.box.server.persistence.file.FileDeltaCollection;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r2 := @parameter1: java.io.RandomAccessFile;

        r3 := @parameter2: org.waveprotocol.box.server.persistence.file.DeltaIndex;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: org.waveprotocol.wave.model.id.WaveletName waveletName> = r1;

        r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: java.io.RandomAccessFile file> = r2;

        r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: org.waveprotocol.box.server.persistence.file.DeltaIndex index> = r3;

        r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: boolean isOpen> = 1;

        return;
    }

    public org.waveprotocol.wave.model.id.WaveletName getWaveletName()
    {
        org.waveprotocol.wave.model.id.WaveletName $r1;
        org.waveprotocol.box.server.persistence.file.FileDeltaCollection r0;

        r0 := @this: org.waveprotocol.box.server.persistence.file.FileDeltaCollection;

        $r1 = r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: org.waveprotocol.wave.model.id.WaveletName waveletName>;

        return $r1;
    }

    public org.waveprotocol.wave.model.version.HashedVersion getEndVersion()
    {
        org.waveprotocol.wave.model.version.HashedVersion $r1;
        org.waveprotocol.box.server.persistence.file.FileDeltaCollection r0;

        r0 := @this: org.waveprotocol.box.server.persistence.file.FileDeltaCollection;

        $r1 = r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: org.waveprotocol.wave.model.version.HashedVersion endVersion>;

        return $r1;
    }

    public org.waveprotocol.box.server.waveserver.WaveletDeltaRecord getDelta(long) throws java.io.IOException
    {
        org.waveprotocol.box.server.persistence.file.FileDeltaCollection r0;
        long l0;
        org.waveprotocol.box.server.waveserver.WaveletDeltaRecord $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.server.persistence.file.FileDeltaCollection;

        l0 := @parameter0: long;

        specialinvoke r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: void checkIsOpen()>();

        $z0 = specialinvoke r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: boolean seekToRecord(long)>(l0);

        if $z0 == 0 goto label1;

        $r1 = specialinvoke r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: org.waveprotocol.box.server.waveserver.WaveletDeltaRecord readRecord()>();

        goto label2;

     label1:
        $r1 = null;

     label2:
        return $r1;
    }

    public org.waveprotocol.box.server.waveserver.WaveletDeltaRecord getDeltaByEndVersion(long) throws java.io.IOException
    {
        org.waveprotocol.box.server.persistence.file.FileDeltaCollection r0;
        long l0;
        org.waveprotocol.box.server.waveserver.WaveletDeltaRecord $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.server.persistence.file.FileDeltaCollection;

        l0 := @parameter0: long;

        specialinvoke r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: void checkIsOpen()>();

        $z0 = specialinvoke r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: boolean seekToEndRecord(long)>(l0);

        if $z0 == 0 goto label1;

        $r1 = specialinvoke r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: org.waveprotocol.box.server.waveserver.WaveletDeltaRecord readRecord()>();

        goto label2;

     label1:
        $r1 = null;

     label2:
        return $r1;
    }

    public org.waveprotocol.box.server.waveserver.ByteStringMessage getAppliedDelta(long) throws java.io.IOException
    {
        org.waveprotocol.box.server.persistence.file.FileDeltaCollection r0;
        long l0;
        org.waveprotocol.box.server.waveserver.ByteStringMessage $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.server.persistence.file.FileDeltaCollection;

        l0 := @parameter0: long;

        specialinvoke r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: void checkIsOpen()>();

        $z0 = specialinvoke r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: boolean seekToRecord(long)>(l0);

        if $z0 == 0 goto label1;

        $r1 = specialinvoke r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: org.waveprotocol.box.server.waveserver.ByteStringMessage readAppliedDeltaFromRecord()>();

        goto label2;

     label1:
        $r1 = null;

     label2:
        return $r1;
    }

    public org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta getTransformedDelta(long) throws java.io.IOException
    {
        org.waveprotocol.box.server.persistence.file.FileDeltaCollection r0;
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta $r1;
        long l0;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.server.persistence.file.FileDeltaCollection;

        l0 := @parameter0: long;

        specialinvoke r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: void checkIsOpen()>();

        $z0 = specialinvoke r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: boolean seekToRecord(long)>(l0);

        if $z0 == 0 goto label1;

        $r1 = specialinvoke r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta readTransformedDeltaFromRecord()>();

        goto label2;

     label1:
        $r1 = null;

     label2:
        return $r1;
    }

    public org.waveprotocol.wave.model.version.HashedVersion getAppliedAtVersion(long) throws java.io.IOException
    {
        org.waveprotocol.box.server.persistence.file.FileDeltaCollection r0;
        org.waveprotocol.wave.model.version.HashedVersion $r2;
        long l0;
        org.waveprotocol.box.server.waveserver.ByteStringMessage $r1;

        r0 := @this: org.waveprotocol.box.server.persistence.file.FileDeltaCollection;

        l0 := @parameter0: long;

        specialinvoke r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: void checkIsOpen()>();

        $r1 = virtualinvoke r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: org.waveprotocol.box.server.waveserver.ByteStringMessage getAppliedDelta(long)>(l0);

        if $r1 == null goto label1;

        $r2 = staticinvoke <org.waveprotocol.box.server.waveserver.AppliedDeltaUtil: org.waveprotocol.wave.model.version.HashedVersion getHashedVersionAppliedAt(org.waveprotocol.box.server.waveserver.ByteStringMessage)>($r1);

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public org.waveprotocol.wave.model.version.HashedVersion getResultingVersion(long) throws java.io.IOException
    {
        org.waveprotocol.box.server.persistence.file.FileDeltaCollection r0;
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta $r1;
        org.waveprotocol.wave.model.version.HashedVersion $r2;
        long l0;

        r0 := @this: org.waveprotocol.box.server.persistence.file.FileDeltaCollection;

        l0 := @parameter0: long;

        specialinvoke r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: void checkIsOpen()>();

        $r1 = virtualinvoke r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta getTransformedDelta(long)>(l0);

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: org.waveprotocol.wave.model.version.HashedVersion getResultingVersion()>();

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public void close() throws java.io.IOException
    {
        java.io.RandomAccessFile $r1;
        org.waveprotocol.box.server.persistence.file.DeltaIndex $r2;
        org.waveprotocol.box.server.persistence.file.FileDeltaCollection r0;

        r0 := @this: org.waveprotocol.box.server.persistence.file.FileDeltaCollection;

        $r1 = r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: java.io.RandomAccessFile file>;

        virtualinvoke $r1.<java.io.RandomAccessFile: void close()>();

        $r2 = r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: org.waveprotocol.box.server.persistence.file.DeltaIndex index>;

        virtualinvoke $r2.<org.waveprotocol.box.server.persistence.file.DeltaIndex: void close()>();

        r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: org.waveprotocol.wave.model.version.HashedVersion endVersion> = null;

        r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: boolean isOpen> = 0;

        return;
    }

    public void append(java.util.Collection) throws org.waveprotocol.box.server.persistence.PersistenceException
    {
        java.io.RandomAccessFile $r1, $r2, $r5, $r14;
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta $r7, $r11, $r13;
        long $l0, $l1, $l3;
        org.waveprotocol.box.server.persistence.PersistenceException $r16;
        org.waveprotocol.box.server.persistence.file.DeltaIndex $r12;
        org.waveprotocol.wave.model.version.HashedVersion $r8;
        int $i2;
        org.waveprotocol.box.server.waveserver.WaveletDeltaRecord r10, r17;
        boolean $z0;
        java.util.Iterator $r4;
        java.util.Collection r3;
        java.io.IOException $r15;
        org.waveprotocol.box.server.persistence.file.FileDeltaCollection r0;
        java.lang.Object $r9;
        java.nio.channels.FileChannel $r6;

        r0 := @this: org.waveprotocol.box.server.persistence.file.FileDeltaCollection;

        r3 := @parameter0: java.util.Collection;

        specialinvoke r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: void checkIsOpen()>();

     label1:
        $r2 = r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: java.io.RandomAccessFile file>;

        $r1 = r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: java.io.RandomAccessFile file>;

        $l0 = virtualinvoke $r1.<java.io.RandomAccessFile: long length()>();

        virtualinvoke $r2.<java.io.RandomAccessFile: void seek(long)>($l0);

        r17 = null;

        $r4 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r9 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.waveprotocol.box.server.waveserver.WaveletDeltaRecord) $r9;

        $r12 = r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: org.waveprotocol.box.server.persistence.file.DeltaIndex index>;

        $r11 = r10.<org.waveprotocol.box.server.waveserver.WaveletDeltaRecord: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta transformed>;

        $l1 = virtualinvoke $r11.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: long getAppliedAtVersion()>();

        $r13 = r10.<org.waveprotocol.box.server.waveserver.WaveletDeltaRecord: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta transformed>;

        $i2 = virtualinvoke $r13.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: int size()>();

        $r14 = r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: java.io.RandomAccessFile file>;

        $l3 = virtualinvoke $r14.<java.io.RandomAccessFile: long getFilePointer()>();

        virtualinvoke $r12.<org.waveprotocol.box.server.persistence.file.DeltaIndex: void addDelta(long,int,long)>($l1, $i2, $l3);

        specialinvoke r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: long writeDelta(org.waveprotocol.box.server.waveserver.WaveletDeltaRecord)>(r10);

        r17 = r10;

        goto label2;

     label3:
        $r5 = r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: java.io.RandomAccessFile file>;

        $r6 = virtualinvoke $r5.<java.io.RandomAccessFile: java.nio.channels.FileChannel getChannel()>();

        virtualinvoke $r6.<java.nio.channels.FileChannel: void force(boolean)>(1);

        $r7 = r17.<org.waveprotocol.box.server.waveserver.WaveletDeltaRecord: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta transformed>;

        $r8 = virtualinvoke $r7.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: org.waveprotocol.wave.model.version.HashedVersion getResultingVersion()>();

        r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: org.waveprotocol.wave.model.version.HashedVersion endVersion> = $r8;

     label4:
        goto label6;

     label5:
        $r15 := @caughtexception;

        $r16 = new org.waveprotocol.box.server.persistence.PersistenceException;

        specialinvoke $r16.<org.waveprotocol.box.server.persistence.PersistenceException: void <init>(java.lang.Throwable)>($r15);

        throw $r16;

     label6:
        return;

        catch java.io.IOException from label1 to label4 with label5;
    }

    public boolean isEmpty()
    {
        org.waveprotocol.box.server.persistence.file.DeltaIndex $r1;
        byte $b1;
        org.waveprotocol.box.server.persistence.file.FileDeltaCollection r0;
        long $l0;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.server.persistence.file.FileDeltaCollection;

        specialinvoke r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: void checkIsOpen()>();

        $r1 = r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: org.waveprotocol.box.server.persistence.file.DeltaIndex index>;

        $l0 = virtualinvoke $r1.<org.waveprotocol.box.server.persistence.file.DeltaIndex: long length()>();

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    java.lang.Iterable getOffsetsIterator() throws java.io.IOException
    {
        org.waveprotocol.box.server.persistence.file.FileDeltaCollection$1 $r1;
        org.waveprotocol.box.server.persistence.file.FileDeltaCollection r0;

        r0 := @this: org.waveprotocol.box.server.persistence.file.FileDeltaCollection;

        specialinvoke r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: void checkIsOpen()>();

        $r1 = new org.waveprotocol.box.server.persistence.file.FileDeltaCollection$1;

        specialinvoke $r1.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection$1: void <init>(org.waveprotocol.box.server.persistence.file.FileDeltaCollection)>(r0);

        return $r1;
    }

    static final java.io.File deltasFile(java.lang.String, org.waveprotocol.wave.model.id.WaveletName)
    {
        org.waveprotocol.wave.model.id.WaveletName r0;
        java.io.File $r2;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r1, r3, $r7;

        r3 := @parameter0: java.lang.String;

        r0 := @parameter1: org.waveprotocol.wave.model.id.WaveletName;

        $r1 = staticinvoke <org.waveprotocol.box.server.persistence.file.FileUtils: java.lang.String waveletNameToPathSegment(org.waveprotocol.wave.model.id.WaveletName)>(r0);

        $r2 = new java.io.File;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".deltas");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String,java.lang.String)>(r3, $r7);

        return $r2;
    }

    static final java.io.File indexFile(java.lang.String, org.waveprotocol.wave.model.id.WaveletName)
    {
        org.waveprotocol.wave.model.id.WaveletName r0;
        java.io.File $r2;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r1, r3, $r7;

        r3 := @parameter0: java.lang.String;

        r0 := @parameter1: org.waveprotocol.wave.model.id.WaveletName;

        $r1 = staticinvoke <org.waveprotocol.box.server.persistence.file.FileUtils: java.lang.String waveletNameToPathSegment(org.waveprotocol.wave.model.id.WaveletName)>(r0);

        $r2 = new java.io.File;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".index");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String,java.lang.String)>(r3, $r7);

        return $r2;
    }

    private static void setOrCheckFileHeader(java.io.RandomAccessFile) throws java.io.IOException
    {
        java.io.RandomAccessFile r0;
        byte[] r1, $r2, $r9;
        java.lang.Object[] $r4;
        long $l0;
        java.io.IOException $r10, $r11;
        java.lang.Integer $r5, $r6;
        byte $b1;
        int $i2, $i3;
        java.lang.String $r7;
        boolean $z0;

        r0 := @parameter0: java.io.RandomAccessFile;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        virtualinvoke r0.<java.io.RandomAccessFile: void seek(long)>(0L);

        $l0 = virtualinvoke r0.<java.io.RandomAccessFile: long length()>();

        $b1 = $l0 cmp 8L;

        $i3 = (int) $b1;

        if $i3 >= 0 goto label1;

        $r9 = <org.waveprotocol.box.server.persistence.file.FileDeltaCollection: byte[] FILE_MAGIC_BYTES>;

        virtualinvoke r0.<java.io.RandomAccessFile: void write(byte[])>($r9);

        virtualinvoke r0.<java.io.RandomAccessFile: void writeInt(int)>(1);

        goto label3;

     label1:
        r1 = newarray (byte)[4];

        virtualinvoke r0.<java.io.RandomAccessFile: void readFully(byte[])>(r1);

        $r2 = <org.waveprotocol.box.server.persistence.file.FileDeltaCollection: byte[] FILE_MAGIC_BYTES>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r2, r1);

        if $z0 != 0 goto label2;

        $r10 = new java.io.IOException;

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("Delta file magic bytes are incorrect");

        throw $r10;

     label2:
        $i2 = virtualinvoke r0.<java.io.RandomAccessFile: int readInt()>();

        if $i2 == 1 goto label3;

        $r11 = new java.io.IOException;

        $r4 = newarray (java.lang.Object)[2];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r4[0] = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r4[1] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("File protocol version mismatch - expected %d got %d", $r4);

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>($r7);

        throw $r11;

     label3:
        return;
    }

    private void checkIsOpen()
    {
        org.waveprotocol.box.server.persistence.file.FileDeltaCollection r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.server.persistence.file.FileDeltaCollection;

        $z0 = r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: boolean isOpen>;

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Delta collection closed");

        return;
    }

    private boolean seekToRecord(long) throws java.io.IOException
    {
        long l0, $l2;
        org.waveprotocol.box.server.persistence.file.DeltaIndex $r1;
        byte $b1;
        org.waveprotocol.box.server.persistence.file.FileDeltaCollection r0;
        int $i3;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.box.server.persistence.file.FileDeltaCollection;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        $i3 = (int) $b1;

        if $i3 < 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "Version can\'t be negative");

        $r1 = r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: org.waveprotocol.box.server.persistence.file.DeltaIndex index>;

        $l2 = virtualinvoke $r1.<org.waveprotocol.box.server.persistence.file.DeltaIndex: long getOffsetForVersion(long)>(l0);

        $z0 = specialinvoke r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: boolean seekTo(long)>($l2);

        return $z0;
    }

    private boolean seekToEndRecord(long) throws java.io.IOException
    {
        long l0, $l2;
        org.waveprotocol.box.server.persistence.file.DeltaIndex $r1;
        byte $b1;
        org.waveprotocol.box.server.persistence.file.FileDeltaCollection r0;
        int $i3;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.box.server.persistence.file.FileDeltaCollection;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        $i3 = (int) $b1;

        if $i3 < 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "Version can\'t be negative");

        $r1 = r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: org.waveprotocol.box.server.persistence.file.DeltaIndex index>;

        $l2 = virtualinvoke $r1.<org.waveprotocol.box.server.persistence.file.DeltaIndex: long getOffsetForEndVersion(long)>(l0);

        $z0 = specialinvoke r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: boolean seekTo(long)>($l2);

        return $z0;
    }

    private boolean seekTo(long) throws java.io.IOException
    {
        java.io.RandomAccessFile $r1;
        byte $b1;
        org.waveprotocol.box.server.persistence.file.FileDeltaCollection r0;
        long l0;

        r0 := @this: org.waveprotocol.box.server.persistence.file.FileDeltaCollection;

        l0 := @parameter0: long;

        $b1 = l0 cmp -1L;

        if $b1 != 0 goto label1;

        return 0;

     label1:
        $r1 = r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: java.io.RandomAccessFile file>;

        virtualinvoke $r1.<java.io.RandomAccessFile: void seek(long)>(l0);

        return 1;
    }

    private org.waveprotocol.box.server.waveserver.WaveletDeltaRecord readRecord() throws java.io.IOException
    {
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta $r3;
        org.waveprotocol.box.server.waveserver.ByteStringMessage $r2;
        org.waveprotocol.box.server.persistence.file.FileDeltaCollection r0;
        int $i0, $i1;
        org.waveprotocol.wave.model.version.HashedVersion $r5;
        org.waveprotocol.box.server.waveserver.WaveletDeltaRecord $r4;
        org.waveprotocol.box.server.persistence.file.FileDeltaCollection$DeltaHeader $r1;

        r0 := @this: org.waveprotocol.box.server.persistence.file.FileDeltaCollection;

        $r1 = specialinvoke r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: org.waveprotocol.box.server.persistence.file.FileDeltaCollection$DeltaHeader readDeltaHeader()>();

        $i0 = $r1.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection$DeltaHeader: int appliedDeltaLength>;

        $r2 = specialinvoke r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: org.waveprotocol.box.server.waveserver.ByteStringMessage readAppliedDelta(int)>($i0);

        $i1 = $r1.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection$DeltaHeader: int transformedDeltaLength>;

        $r3 = specialinvoke r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta readTransformedWaveletDelta(int)>($i1);

        $r4 = new org.waveprotocol.box.server.waveserver.WaveletDeltaRecord;

        $r5 = staticinvoke <org.waveprotocol.box.server.waveserver.AppliedDeltaUtil: org.waveprotocol.wave.model.version.HashedVersion getHashedVersionAppliedAt(org.waveprotocol.box.server.waveserver.ByteStringMessage)>($r2);

        specialinvoke $r4.<org.waveprotocol.box.server.waveserver.WaveletDeltaRecord: void <init>(org.waveprotocol.wave.model.version.HashedVersion,org.waveprotocol.box.server.waveserver.ByteStringMessage,org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta)>($r5, $r2, $r3);

        return $r4;
    }

    private org.waveprotocol.box.server.waveserver.ByteStringMessage readAppliedDeltaFromRecord() throws java.io.IOException
    {
        java.io.RandomAccessFile $r3;
        org.waveprotocol.box.server.persistence.file.FileDeltaCollection r0;
        int $i0, $i1;
        org.waveprotocol.box.server.waveserver.ByteStringMessage $r2;
        org.waveprotocol.box.server.persistence.file.FileDeltaCollection$DeltaHeader $r1;

        r0 := @this: org.waveprotocol.box.server.persistence.file.FileDeltaCollection;

        $r1 = specialinvoke r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: org.waveprotocol.box.server.persistence.file.FileDeltaCollection$DeltaHeader readDeltaHeader()>();

        $i0 = $r1.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection$DeltaHeader: int appliedDeltaLength>;

        $r2 = specialinvoke r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: org.waveprotocol.box.server.waveserver.ByteStringMessage readAppliedDelta(int)>($i0);

        $r3 = r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: java.io.RandomAccessFile file>;

        $i1 = $r1.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection$DeltaHeader: int transformedDeltaLength>;

        virtualinvoke $r3.<java.io.RandomAccessFile: int skipBytes(int)>($i1);

        return $r2;
    }

    private org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta readTransformedDeltaFromRecord() throws java.io.IOException
    {
        java.io.RandomAccessFile $r2;
        org.waveprotocol.box.server.persistence.file.FileDeltaCollection r0;
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta $r3;
        int $i0, $i1;
        org.waveprotocol.box.server.persistence.file.FileDeltaCollection$DeltaHeader $r1;

        r0 := @this: org.waveprotocol.box.server.persistence.file.FileDeltaCollection;

        $r1 = specialinvoke r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: org.waveprotocol.box.server.persistence.file.FileDeltaCollection$DeltaHeader readDeltaHeader()>();

        $r2 = r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: java.io.RandomAccessFile file>;

        $i0 = $r1.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection$DeltaHeader: int appliedDeltaLength>;

        virtualinvoke $r2.<java.io.RandomAccessFile: int skipBytes(int)>($i0);

        $i1 = $r1.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection$DeltaHeader: int transformedDeltaLength>;

        $r3 = specialinvoke r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta readTransformedWaveletDelta(int)>($i1);

        return $r3;
    }

    private org.waveprotocol.box.server.persistence.file.FileDeltaCollection$DeltaHeader readDeltaHeader() throws java.io.IOException
    {
        java.io.RandomAccessFile $r1, $r2, $r3, $r5, $r6;
        long $l3, $l4, l5, $l7, l8;
        byte $b9;
        int $i0, $i1, $i2, $i6, $i10;
        java.lang.String $r12;
        java.io.IOException $r14, $r17;
        org.waveprotocol.box.server.persistence.file.FileDeltaCollection r0;
        java.lang.StringBuilder $r9, $r10, $r11, $r16;
        org.waveprotocol.box.server.persistence.file.FileDeltaCollection$DeltaHeader $r15;

        r0 := @this: org.waveprotocol.box.server.persistence.file.FileDeltaCollection;

        $r1 = r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: java.io.RandomAccessFile file>;

        $i0 = virtualinvoke $r1.<java.io.RandomAccessFile: int readInt()>();

        if $i0 == 1 goto label1;

        $r14 = new java.io.IOException;

        specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String)>("Delta header invalid");

        throw $r14;

     label1:
        $r2 = r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: java.io.RandomAccessFile file>;

        $i1 = virtualinvoke $r2.<java.io.RandomAccessFile: int readInt()>();

        $r3 = r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: java.io.RandomAccessFile file>;

        $i2 = virtualinvoke $r3.<java.io.RandomAccessFile: int readInt()>();

        $r15 = new org.waveprotocol.box.server.persistence.file.FileDeltaCollection$DeltaHeader;

        specialinvoke $r15.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection$DeltaHeader: void <init>(org.waveprotocol.box.server.persistence.file.FileDeltaCollection,int,int,int)>(r0, $i0, $i1, $i2);

        virtualinvoke $r15.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection$DeltaHeader: void checkVersion()>();

        $r5 = r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: java.io.RandomAccessFile file>;

        $l3 = virtualinvoke $r5.<java.io.RandomAccessFile: long length()>();

        $r6 = r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: java.io.RandomAccessFile file>;

        $l4 = virtualinvoke $r6.<java.io.RandomAccessFile: long getFilePointer()>();

        l5 = $l3 - $l4;

        $i6 = $i1 + $i2;

        $l7 = (long) $i6;

        l8 = $l7 - l5;

        $b9 = l8 cmp 0L;

        $i10 = (int) $b9;

        if $i10 <= 0 goto label2;

        $r17 = new java.io.IOException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File is corrupted, missing ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l8);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.io.IOException: void <init>(java.lang.String)>($r12);

        throw $r17;

     label2:
        return $r15;
    }

    private void writeDeltaHeader(org.waveprotocol.box.server.persistence.file.FileDeltaCollection$DeltaHeader) throws java.io.IOException
    {
        java.io.RandomAccessFile $r2, $r3, $r4;
        org.waveprotocol.box.server.persistence.file.FileDeltaCollection r0;
        int $i0, $i1, $i2;
        org.waveprotocol.box.server.persistence.file.FileDeltaCollection$DeltaHeader r1;

        r0 := @this: org.waveprotocol.box.server.persistence.file.FileDeltaCollection;

        r1 := @parameter0: org.waveprotocol.box.server.persistence.file.FileDeltaCollection$DeltaHeader;

        $r2 = r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: java.io.RandomAccessFile file>;

        $i0 = r1.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection$DeltaHeader: int protoVersion>;

        virtualinvoke $r2.<java.io.RandomAccessFile: void writeInt(int)>($i0);

        $r3 = r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: java.io.RandomAccessFile file>;

        $i1 = r1.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection$DeltaHeader: int appliedDeltaLength>;

        virtualinvoke $r3.<java.io.RandomAccessFile: void writeInt(int)>($i1);

        $r4 = r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: java.io.RandomAccessFile file>;

        $i2 = r1.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection$DeltaHeader: int transformedDeltaLength>;

        virtualinvoke $r4.<java.io.RandomAccessFile: void writeInt(int)>($i2);

        return;
    }

    private org.waveprotocol.box.server.waveserver.ByteStringMessage readAppliedDelta(int) throws java.io.IOException
    {
        byte[] r0;
        java.io.RandomAccessFile $r2;
        com.google.protobuf.InvalidProtocolBufferException $r5;
        org.waveprotocol.box.server.waveserver.ByteStringMessage $r4;
        java.io.IOException $r6;
        com.google.protobuf.ByteString $r3;
        org.waveprotocol.box.server.persistence.file.FileDeltaCollection r1;
        int i0;

        r1 := @this: org.waveprotocol.box.server.persistence.file.FileDeltaCollection;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return null;

     label1:
        r0 = newarray (byte)[i0];

        $r2 = r1.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: java.io.RandomAccessFile file>;

        virtualinvoke $r2.<java.io.RandomAccessFile: void readFully(byte[])>(r0);

     label2:
        $r3 = staticinvoke <com.google.protobuf.ByteString: com.google.protobuf.ByteString copyFrom(byte[])>(r0);

        $r4 = staticinvoke <org.waveprotocol.box.server.waveserver.ByteStringMessage: org.waveprotocol.box.server.waveserver.ByteStringMessage parseProtocolAppliedWaveletDelta(com.google.protobuf.ByteString)>($r3);

     label3:
        return $r4;

     label4:
        $r5 := @caughtexception;

        $r6 = new java.io.IOException;

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.Throwable)>($r5);

        throw $r6;

        catch com.google.protobuf.InvalidProtocolBufferException from label2 to label3 with label4;
    }

    private int writeAppliedDelta(org.waveprotocol.box.server.waveserver.ByteStringMessage) throws java.io.IOException
    {
        byte[] $r1;
        java.io.RandomAccessFile $r3;
        org.waveprotocol.box.server.persistence.file.FileDeltaCollection r2;
        int $i0;
        org.waveprotocol.box.server.waveserver.ByteStringMessage r0;

        r2 := @this: org.waveprotocol.box.server.persistence.file.FileDeltaCollection;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.ByteStringMessage;

        if r0 == null goto label1;

        $r1 = virtualinvoke r0.<org.waveprotocol.box.server.waveserver.ByteStringMessage: byte[] getByteArray()>();

        $r3 = r2.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: java.io.RandomAccessFile file>;

        virtualinvoke $r3.<java.io.RandomAccessFile: void write(byte[])>($r1);

        $i0 = lengthof $r1;

        return $i0;

     label1:
        return 0;
    }

    private org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta readTransformedWaveletDelta(int) throws java.io.IOException
    {
        org.waveprotocol.box.server.persistence.protos.ProtoDeltaStoreData$ProtoTransformedWaveletDelta $r3;
        byte[] r0;
        java.io.RandomAccessFile $r2;
        com.google.protobuf.InvalidProtocolBufferException $r6;
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta $r4;
        java.io.IOException $r5, $r7;
        org.waveprotocol.box.server.persistence.file.FileDeltaCollection r1;
        int i0;

        r1 := @this: org.waveprotocol.box.server.persistence.file.FileDeltaCollection;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("Invalid delta length");

        throw $r5;

     label1:
        r0 = newarray (byte)[i0];

        $r2 = r1.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: java.io.RandomAccessFile file>;

        virtualinvoke $r2.<java.io.RandomAccessFile: void readFully(byte[])>(r0);

     label2:
        $r3 = staticinvoke <org.waveprotocol.box.server.persistence.protos.ProtoDeltaStoreData$ProtoTransformedWaveletDelta: org.waveprotocol.box.server.persistence.protos.ProtoDeltaStoreData$ProtoTransformedWaveletDelta parseFrom(byte[])>(r0);

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        $r7 = new java.io.IOException;

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.Throwable)>($r6);

        throw $r7;

     label5:
        $r4 = staticinvoke <org.waveprotocol.box.server.persistence.protos.ProtoDeltaStoreDataSerializer: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta deserialize(org.waveprotocol.box.server.persistence.protos.ProtoDeltaStoreData$ProtoTransformedWaveletDelta)>($r3);

        return $r4;

        catch com.google.protobuf.InvalidProtocolBufferException from label2 to label3 with label4;
    }

    private int writeTransformedWaveletDelta(org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta) throws java.io.IOException
    {
        org.waveprotocol.box.server.persistence.protos.ProtoDeltaStoreData$ProtoTransformedWaveletDelta $r3;
        java.io.OutputStream $r6;
        java.io.RandomAccessFile $r1, $r4, $r7;
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta r2;
        long $l0, $l1, $l2;
        org.waveprotocol.box.server.persistence.file.FileDeltaCollection r0;
        int $i3;
        java.nio.channels.FileChannel $r5;

        r0 := @this: org.waveprotocol.box.server.persistence.file.FileDeltaCollection;

        r2 := @parameter0: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta;

        $r1 = r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: java.io.RandomAccessFile file>;

        $l0 = virtualinvoke $r1.<java.io.RandomAccessFile: long getFilePointer()>();

        $r3 = staticinvoke <org.waveprotocol.box.server.persistence.protos.ProtoDeltaStoreDataSerializer: org.waveprotocol.box.server.persistence.protos.ProtoDeltaStoreData$ProtoTransformedWaveletDelta serialize(org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta)>(r2);

        $r4 = r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: java.io.RandomAccessFile file>;

        $r5 = virtualinvoke $r4.<java.io.RandomAccessFile: java.nio.channels.FileChannel getChannel()>();

        $r6 = staticinvoke <java.nio.channels.Channels: java.io.OutputStream newOutputStream(java.nio.channels.WritableByteChannel)>($r5);

        virtualinvoke $r3.<org.waveprotocol.box.server.persistence.protos.ProtoDeltaStoreData$ProtoTransformedWaveletDelta: void writeTo(java.io.OutputStream)>($r6);

        $r7 = r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: java.io.RandomAccessFile file>;

        $l1 = virtualinvoke $r7.<java.io.RandomAccessFile: long getFilePointer()>();

        $l2 = $l1 - $l0;

        $i3 = (int) $l2;

        return $i3;
    }

    private long writeDelta(org.waveprotocol.box.server.waveserver.WaveletDeltaRecord) throws java.io.IOException
    {
        java.io.RandomAccessFile $r1, $r3, $r7, $r8, $r10;
        byte[] $r2;
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta $r6;
        long $l0, $l3, $l4;
        org.waveprotocol.box.server.waveserver.ByteStringMessage $r5;
        int $i1, $i2;
        org.waveprotocol.box.server.waveserver.WaveletDeltaRecord r4;
        org.waveprotocol.box.server.persistence.file.FileDeltaCollection r0;
        org.waveprotocol.box.server.persistence.file.FileDeltaCollection$DeltaHeader $r9;

        r0 := @this: org.waveprotocol.box.server.persistence.file.FileDeltaCollection;

        r4 := @parameter0: org.waveprotocol.box.server.waveserver.WaveletDeltaRecord;

        $r1 = r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: java.io.RandomAccessFile file>;

        $l0 = virtualinvoke $r1.<java.io.RandomAccessFile: long getFilePointer()>();

        $r3 = r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: java.io.RandomAccessFile file>;

        $r2 = newarray (byte)[12];

        virtualinvoke $r3.<java.io.RandomAccessFile: void write(byte[])>($r2);

        $r5 = r4.<org.waveprotocol.box.server.waveserver.WaveletDeltaRecord: org.waveprotocol.box.server.waveserver.ByteStringMessage applied>;

        $i1 = specialinvoke r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: int writeAppliedDelta(org.waveprotocol.box.server.waveserver.ByteStringMessage)>($r5);

        $r6 = r4.<org.waveprotocol.box.server.waveserver.WaveletDeltaRecord: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta transformed>;

        $i2 = specialinvoke r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: int writeTransformedWaveletDelta(org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta)>($r6);

        $r7 = r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: java.io.RandomAccessFile file>;

        $l3 = virtualinvoke $r7.<java.io.RandomAccessFile: long getFilePointer()>();

        $r8 = r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: java.io.RandomAccessFile file>;

        virtualinvoke $r8.<java.io.RandomAccessFile: void seek(long)>($l0);

        $r9 = new org.waveprotocol.box.server.persistence.file.FileDeltaCollection$DeltaHeader;

        specialinvoke $r9.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection$DeltaHeader: void <init>(org.waveprotocol.box.server.persistence.file.FileDeltaCollection,int,int,int)>(r0, 1, $i1, $i2);

        specialinvoke r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: void writeDeltaHeader(org.waveprotocol.box.server.persistence.file.FileDeltaCollection$DeltaHeader)>($r9);

        $r10 = r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: java.io.RandomAccessFile file>;

        virtualinvoke $r10.<java.io.RandomAccessFile: void seek(long)>($l3);

        $l4 = $l3 - $l0;

        return $l4;
    }

    private void initializeEndVersionAndTruncateTrailingJunk() throws java.io.IOException
    {
        java.io.RandomAccessFile $r2, $r3;
        long $l0, $l2;
        org.waveprotocol.box.server.persistence.file.DeltaIndex $r1;
        byte $b1;
        org.waveprotocol.box.server.persistence.file.FileDeltaCollection r0;
        org.waveprotocol.wave.model.version.HashedVersion $r5;
        int $i3;
        org.waveprotocol.box.server.waveserver.WaveletDeltaRecord $r4;

        r0 := @this: org.waveprotocol.box.server.persistence.file.FileDeltaCollection;

        $r1 = r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: org.waveprotocol.box.server.persistence.file.DeltaIndex index>;

        $l0 = virtualinvoke $r1.<org.waveprotocol.box.server.persistence.file.DeltaIndex: long length()>();

        $b1 = $l0 cmp 1L;

        $i3 = (int) $b1;

        if $i3 < 0 goto label1;

        $r4 = virtualinvoke r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: org.waveprotocol.box.server.waveserver.WaveletDeltaRecord getDeltaByEndVersion(long)>($l0);

        $r5 = virtualinvoke $r4.<org.waveprotocol.box.server.waveserver.WaveletDeltaRecord: org.waveprotocol.wave.model.version.HashedVersion getResultingVersion()>();

        r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: org.waveprotocol.wave.model.version.HashedVersion endVersion> = $r5;

        goto label2;

     label1:
        r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: org.waveprotocol.wave.model.version.HashedVersion endVersion> = null;

     label2:
        $r3 = r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: java.io.RandomAccessFile file>;

        $r2 = r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: java.io.RandomAccessFile file>;

        $l2 = virtualinvoke $r2.<java.io.RandomAccessFile: long getFilePointer()>();

        virtualinvoke $r3.<java.io.RandomAccessFile: void setLength(long)>($l2);

        return;
    }

    static java.io.RandomAccessFile access$000(org.waveprotocol.box.server.persistence.file.FileDeltaCollection)
    {
        java.io.RandomAccessFile $r1;
        org.waveprotocol.box.server.persistence.file.FileDeltaCollection r0;

        r0 := @parameter0: org.waveprotocol.box.server.persistence.file.FileDeltaCollection;

        $r1 = r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: java.io.RandomAccessFile file>;

        return $r1;
    }

    static org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta access$100(org.waveprotocol.box.server.persistence.file.FileDeltaCollection) throws java.io.IOException
    {
        org.waveprotocol.box.server.persistence.file.FileDeltaCollection r0;
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta $r1;

        r0 := @parameter0: org.waveprotocol.box.server.persistence.file.FileDeltaCollection;

        $r1 = specialinvoke r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta readTransformedDeltaFromRecord()>();

        return $r1;
    }

    static org.waveprotocol.wave.model.id.WaveletName access$200(org.waveprotocol.box.server.persistence.file.FileDeltaCollection)
    {
        org.waveprotocol.wave.model.id.WaveletName $r1;
        org.waveprotocol.box.server.persistence.file.FileDeltaCollection r0;

        r0 := @parameter0: org.waveprotocol.box.server.persistence.file.FileDeltaCollection;

        $r1 = r0.<org.waveprotocol.box.server.persistence.file.FileDeltaCollection: org.waveprotocol.wave.model.id.WaveletName waveletName>;

        return $r1;
    }

    static org.waveprotocol.wave.util.logging.Log access$300()
    {
        org.waveprotocol.wave.util.logging.Log $r0;

        $r0 = <org.waveprotocol.box.server.persistence.file.FileDeltaCollection: org.waveprotocol.wave.util.logging.Log LOG>;

        return $r0;
    }

    static void <clinit>()
    {
        byte[] $r0;
        org.waveprotocol.wave.util.logging.Log $r1;

        <org.waveprotocol.box.server.persistence.file.FileDeltaCollection: int DELTA_PROTOCOL_VERSION> = 1;

        <org.waveprotocol.box.server.persistence.file.FileDeltaCollection: int FILE_HEADER_LENGTH> = 8;

        <org.waveprotocol.box.server.persistence.file.FileDeltaCollection: int FILE_PROTOCOL_VERSION> = 1;

        <org.waveprotocol.box.server.persistence.file.FileDeltaCollection: java.lang.String INDEX_FILE_SUFFIX> = ".index";

        <org.waveprotocol.box.server.persistence.file.FileDeltaCollection: java.lang.String DELTAS_FILE_SUFFIX> = ".deltas";

        $r0 = newarray (byte)[4];

        $r0[0] = 87;

        $r0[1] = 65;

        $r0[2] = 86;

        $r0[3] = 69;

        <org.waveprotocol.box.server.persistence.file.FileDeltaCollection: byte[] FILE_MAGIC_BYTES> = $r0;

        $r1 = staticinvoke <org.waveprotocol.wave.util.logging.Log: org.waveprotocol.wave.util.logging.Log get(java.lang.Class)>(class "Lorg/waveprotocol/box/server/persistence/file/FileDeltaCollection;");

        <org.waveprotocol.box.server.persistence.file.FileDeltaCollection: org.waveprotocol.wave.util.logging.Log LOG> = $r1;

        return;
    }
}
