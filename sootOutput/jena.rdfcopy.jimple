public class jena.rdfcopy extends java.lang.Object
{

    public void <init>()
    {
        jena.rdfcopy r0;

        r0 := @this: jena.rdfcopy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static transient void main(java.lang.String[])
    {
        java.lang.Exception $r19;
        java.lang.StringBuilder $r23, $r25, $r31, $r34, $r42, $r44;
        java.lang.Throwable $r28;
        java.lang.String $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r24, $r26, $r32, $r33, $r35, $r37, r38, r39, r40;
        java.io.File $r41;
        com.hp.hpl.jena.rdf.model.Model $r1;
        boolean $z0, $z1;
        com.hp.hpl.jena.shared.JenaException $r27;
        java.lang.String[] r0;
        com.hp.hpl.jena.rdf.model.RDFReader $r2;
        int $i0, i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, $i14, i15, $i16, i17, i18, $i20, $i22, $i24, $i26, $i28;
        com.hp.hpl.jena.rdf.model.RDFWriter $r3;
        java.io.PrintStream $r4, $r20, $r22;
        java.io.FileInputStream $r43;

        r0 := @parameter0: java.lang.String[];

        $i0 = lengthof r0;

        if $i0 < 1 goto label01;

        $r18 = "-h";

        $r17 = r0[0];

        $z0 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>($r17);

        if $z0 == 0 goto label02;

     label01:
        staticinvoke <jena.rdfcopy: void usage()>();

        $i20 = (int) -1;

        staticinvoke <java.lang.System: void exit(int)>($i20);

     label02:
        $r37 = r0[0];

        r38 = "RDF/XML";

        i13 = 1;

     label03:
        $i14 = lengthof r0;

        if i13 >= $i14 goto label04;

        $r16 = r0[i13];

        $i12 = virtualinvoke $r16.<java.lang.String: int indexOf(java.lang.String)>("=");

        $i22 = (int) -1;

        if $i12 == $i22 goto label04;

        i13 = i13 + 1;

        goto label03;

     label04:
        i1 = i13;

        $i2 = lengthof r0;

        if i13 >= $i2 goto label05;

        r38 = r0[i13];

     label05:
        i15 = i13 + 1;

        r39 = "N-TRIPLE";

     label06:
        $i16 = lengthof r0;

        if i15 >= $i16 goto label07;

        $r15 = r0[i15];

        $i11 = virtualinvoke $r15.<java.lang.String: int indexOf(java.lang.String)>("=");

        $i24 = (int) -1;

        if $i11 == $i24 goto label07;

        i15 = i15 + 1;

        goto label06;

     label07:
        i3 = i15;

        $i4 = lengthof r0;

        if i15 >= $i4 goto label08;

        r39 = r0[i15];

     label08:
        $i6 = i15 + 1;

        $i5 = lengthof r0;

        if $i6 >= $i5 goto label09;

        staticinvoke <jena.rdfcopy: void usage()>();

        $i26 = (int) -1;

        staticinvoke <java.lang.System: void exit(int)>($i26);

     label09:
        $r1 = staticinvoke <com.hp.hpl.jena.rdf.model.ModelFactory: com.hp.hpl.jena.rdf.model.Model createDefaultModel()>();

        r40 = $r37;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.RDFReader getReader(java.lang.String)>(r38);

        i17 = 1;

     label10:
        if i17 >= i1 goto label11;

        $r10 = r0[i17];

        $i9 = virtualinvoke $r10.<java.lang.String: int indexOf(java.lang.String)>("=");

        $r11 = r0[i17];

        $r12 = virtualinvoke $r11.<java.lang.String: java.lang.String substring(int,int)>(0, $i9);

        $r13 = r0[i17];

        $i10 = $i9 + 1;

        $r14 = virtualinvoke $r13.<java.lang.String: java.lang.String substring(int)>($i10);

        interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.RDFReader: java.lang.Object setProperty(java.lang.String,java.lang.Object)>($r12, $r14);

        i17 = i17 + 1;

        goto label10;

     label11:
        interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.RDFReader: void read(com.hp.hpl.jena.rdf.model.Model,java.lang.String)>($r1, $r37);

     label12:
        goto label15;

     label13:
        $r27 := @caughtexception;

        $r28 = virtualinvoke $r27.<com.hp.hpl.jena.shared.JenaException: java.lang.Throwable getCause()>();

        $z1 = $r28 instanceof java.net.MalformedURLException;

        if $z1 != 0 goto label14;

        throw $r27;

     label14:
        $r41 = new java.io.File;

        specialinvoke $r41.<java.io.File: void <init>(java.lang.String)>($r37);

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file:///");

        $r32 = virtualinvoke $r41.<java.io.File: java.lang.String getCanonicalPath()>();

        $r33 = virtualinvoke $r32.<java.lang.String: java.lang.String replace(char,char)>(92, 47);

        $r34 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        r40 = $r35;

        $r43 = new java.io.FileInputStream;

        specialinvoke $r43.<java.io.FileInputStream: void <init>(java.lang.String)>($r37);

        interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.RDFReader: void read(com.hp.hpl.jena.rdf.model.Model,java.io.InputStream,java.lang.String)>($r1, $r43, $r35);

     label15:
        $r3 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.RDFWriter getWriter(java.lang.String)>(r39);

        i18 = i17 + 1;

     label16:
        if i18 >= i3 goto label17;

        $r5 = r0[i18];

        $i7 = virtualinvoke $r5.<java.lang.String: int indexOf(java.lang.String)>("=");

        $r6 = r0[i18];

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int,int)>(0, $i7);

        $r8 = r0[i18];

        $i8 = $i7 + 1;

        $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String substring(int)>($i8);

        interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.RDFWriter: java.lang.Object setProperty(java.lang.String,java.lang.Object)>($r7, $r9);

        i18 = i18 + 1;

        goto label16;

     label17:
        $r4 = <java.lang.System: java.io.PrintStream out>;

        interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.RDFWriter: void write(com.hp.hpl.jena.rdf.model.Model,java.io.OutputStream,java.lang.String)>($r1, $r4, r40);

        staticinvoke <java.lang.System: void exit(int)>(0);

     label18:
        goto label20;

     label19:
        $r19 := @caughtexception;

        $r20 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r20.<java.io.PrintStream: void println(java.lang.String)>("Unhandled exception:");

        $r22 = <java.lang.System: java.io.PrintStream err>;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r24 = virtualinvoke $r19.<java.lang.Exception: java.lang.String toString()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r22.<java.io.PrintStream: void println(java.lang.String)>($r26);

        $i28 = (int) -1;

        staticinvoke <java.lang.System: void exit(int)>($i28);

     label20:
        return;

        catch com.hp.hpl.jena.shared.JenaException from label11 to label12 with label13;
        catch java.lang.Exception from label09 to label18 with label19;
    }

    protected static void usage()
    {
        java.io.PrintStream $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;

        $r0 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("usage:");

        $r1 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("    java jena.rdfcopy in {inprop=inval}* [ inlang  {outprop=outval}* outlang]]");

        $r2 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r2.<java.io.PrintStream: void println()>();

        $r3 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("    in can be a URL or a filename");

        $r4 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("    inlang and outlang can take values:");

        $r5 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("      RDF/XML");

        $r6 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>("      RDF/XML-ABBREV");

        $r7 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>("      N-TRIPLE");

        $r8 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>("      TURTLE");

        $r9 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("      N3");

        $r10 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("    inlang defaults to RDF/XML, outlang to N-TRIPLE");

        $r11 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("    The legal values for inprop and outprop depend on inlang and outlang.");

        $r12 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>("    The legal values for inval and outval depend on inprop and outprop.");

        $r13 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r13.<java.io.PrintStream: void println()>();

        return;
    }

    protected static void read(com.hp.hpl.jena.rdf.model.Model, java.lang.String, java.lang.String) throws java.io.FileNotFoundException
    {
        java.net.MalformedURLException $r4;
        java.net.URL $r0;
        com.hp.hpl.jena.rdf.model.Model r2;
        java.lang.String r1, r3;
        java.io.FileInputStream $r5;

        r2 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

     label1:
        $r0 = new java.net.URL;

        specialinvoke $r0.<java.net.URL: void <init>(java.lang.String)>(r1);

        interfaceinvoke r2.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Model read(java.lang.String,java.lang.String)>(r1, r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.io.FileInputStream;

        specialinvoke $r5.<java.io.FileInputStream: void <init>(java.lang.String)>(r1);

        interfaceinvoke r2.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Model read(java.io.InputStream,java.lang.String,java.lang.String)>($r5, "", r3);

     label4:
        return;

        catch java.net.MalformedURLException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        staticinvoke <jena.cmdline.CmdLineUtils: void setLog4jConfiguration()>();

        return;
    }
}
