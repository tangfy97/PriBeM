class org.xmlpull.v1.builder.impl.XmlElementImpl$RequiredElementContentIterator extends java.lang.Object implements java.util.Iterator
{
    private java.util.Iterator children;
    private org.xmlpull.v1.builder.XmlElement currentEl;

    void <init>(java.util.Iterator)
    {
        java.util.Iterator r1;
        org.xmlpull.v1.builder.impl.XmlElementImpl$RequiredElementContentIterator r0;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl$RequiredElementContentIterator;

        r1 := @parameter0: java.util.Iterator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.xmlpull.v1.builder.impl.XmlElementImpl$RequiredElementContentIterator: java.util.Iterator children> = r1;

        specialinvoke r0.<org.xmlpull.v1.builder.impl.XmlElementImpl$RequiredElementContentIterator: void findNextEl()>();

        return;
    }

    private void findNextEl()
    {
        java.lang.StringBuffer $r5, $r6, $r8;
        java.lang.Boolean $r10, $r11;
        org.xmlpull.v1.builder.XmlBuilderException $r4, $r12, $r15;
        java.lang.String $r9, $r13, $r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.xmlpull.v1.builder.XmlCharacters r17;
        java.util.Iterator $r1, $r2;
        org.xmlpull.v1.builder.impl.XmlElementImpl$RequiredElementContentIterator r0;
        org.xmlpull.v1.builder.XmlElement $r16;
        java.lang.Object $r3;
        java.lang.Class $r7;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl$RequiredElementContentIterator;

        r0.<org.xmlpull.v1.builder.impl.XmlElementImpl$RequiredElementContentIterator: org.xmlpull.v1.builder.XmlElement currentEl> = null;

     label1:
        $r1 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl$RequiredElementContentIterator: java.util.Iterator children>;

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r2 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl$RequiredElementContentIterator: java.util.Iterator children>;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $z1 = $r3 instanceof org.xmlpull.v1.builder.XmlElement;

        if $z1 == 0 goto label2;

        $r16 = (org.xmlpull.v1.builder.XmlElement) $r3;

        r0.<org.xmlpull.v1.builder.impl.XmlElementImpl$RequiredElementContentIterator: org.xmlpull.v1.builder.XmlElement currentEl> = $r16;

        goto label9;

     label2:
        $z2 = $r3 instanceof java.lang.String;

        if $z2 == 0 goto label4;

        $r14 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        $z6 = staticinvoke <org.xmlpull.v1.builder.impl.XmlElementImpl: boolean access$100(java.lang.String)>($r14);

        if 0 != $z6 goto label3;

        $r15 = new org.xmlpull.v1.builder.XmlBuilderException;

        specialinvoke $r15.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String)>("only whitespace string children allowed for non mixed element content");

        throw $r15;

     label3:
        goto label8;

     label4:
        $z3 = $r3 instanceof org.xmlpull.v1.builder.XmlCharacters;

        if $z3 == 0 goto label7;

        r17 = (org.xmlpull.v1.builder.XmlCharacters) $r3;

        $r10 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $r11 = interfaceinvoke r17.<org.xmlpull.v1.builder.XmlCharacters: java.lang.Boolean isWhitespaceContent()>();

        $z4 = virtualinvoke $r10.<java.lang.Boolean: boolean equals(java.lang.Object)>($r11);

        if $z4 == 0 goto label5;

        $r13 = interfaceinvoke r17.<org.xmlpull.v1.builder.XmlCharacters: java.lang.String getText()>();

        $z5 = staticinvoke <org.xmlpull.v1.builder.impl.XmlElementImpl: boolean access$100(java.lang.String)>($r13);

        if 0 != $z5 goto label6;

     label5:
        $r12 = new org.xmlpull.v1.builder.XmlBuilderException;

        specialinvoke $r12.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String)>("only whitespace characters children allowed for non mixed element content");

        throw $r12;

     label6:
        goto label8;

     label7:
        $r4 = new org.xmlpull.v1.builder.XmlBuilderException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("only whitespace characters and element children allowed for non mixed element content and not ");

        $r7 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label8:
        goto label1;

     label9:
        return;
    }

    public boolean hasNext()
    {
        org.xmlpull.v1.builder.XmlElement $r1;
        org.xmlpull.v1.builder.impl.XmlElementImpl$RequiredElementContentIterator r0;
        boolean $z0;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl$RequiredElementContentIterator;

        $r1 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl$RequiredElementContentIterator: org.xmlpull.v1.builder.XmlElement currentEl>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.Object next()
    {
        org.xmlpull.v1.builder.XmlElement $r1, r2;
        org.xmlpull.v1.builder.impl.XmlElementImpl$RequiredElementContentIterator r0;
        org.xmlpull.v1.builder.XmlBuilderException $r3;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl$RequiredElementContentIterator;

        $r1 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl$RequiredElementContentIterator: org.xmlpull.v1.builder.XmlElement currentEl>;

        if $r1 != null goto label1;

        $r3 = new org.xmlpull.v1.builder.XmlBuilderException;

        specialinvoke $r3.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String)>("this iterator has no content and next() is not allowed");

        throw $r3;

     label1:
        r2 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl$RequiredElementContentIterator: org.xmlpull.v1.builder.XmlElement currentEl>;

        specialinvoke r0.<org.xmlpull.v1.builder.impl.XmlElementImpl$RequiredElementContentIterator: void findNextEl()>();

        return r2;
    }

    public void remove()
    {
        org.xmlpull.v1.builder.XmlBuilderException $r0;
        org.xmlpull.v1.builder.impl.XmlElementImpl$RequiredElementContentIterator r1;

        r1 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl$RequiredElementContentIterator;

        $r0 = new org.xmlpull.v1.builder.XmlBuilderException;

        specialinvoke $r0.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String)>("this iterator does nto support remove()");

        throw $r0;
    }
}
