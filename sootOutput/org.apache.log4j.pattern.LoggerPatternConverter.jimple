public final class org.apache.log4j.pattern.LoggerPatternConverter extends org.apache.log4j.pattern.NamePatternConverter
{
    private static final org.apache.log4j.pattern.LoggerPatternConverter INSTANCE;

    private void <init>(java.lang.String[])
    {
        org.apache.log4j.pattern.LoggerPatternConverter r0;
        java.lang.String[] r1;

        r0 := @this: org.apache.log4j.pattern.LoggerPatternConverter;

        r1 := @parameter0: java.lang.String[];

        specialinvoke r0.<org.apache.log4j.pattern.NamePatternConverter: void <init>(java.lang.String,java.lang.String,java.lang.String[])>("Logger", "logger", r1);

        return;
    }

    public static org.apache.log4j.pattern.LoggerPatternConverter newInstance(java.lang.String[])
    {
        org.apache.log4j.pattern.LoggerPatternConverter $r1, $r2;
        int $i0;
        java.lang.String[] r0;

        r0 := @parameter0: java.lang.String[];

        if r0 == null goto label1;

        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

     label1:
        $r1 = <org.apache.log4j.pattern.LoggerPatternConverter: org.apache.log4j.pattern.LoggerPatternConverter INSTANCE>;

        return $r1;

     label2:
        $r2 = new org.apache.log4j.pattern.LoggerPatternConverter;

        specialinvoke $r2.<org.apache.log4j.pattern.LoggerPatternConverter: void <init>(java.lang.String[])>(r0);

        return $r2;
    }

    public void format(org.apache.log4j.spi.LoggingEvent, java.lang.StringBuffer)
    {
        java.lang.StringBuffer r0;
        int $i0;
        org.apache.log4j.pattern.LoggerPatternConverter r3;
        org.apache.log4j.spi.LoggingEvent r1;
        java.lang.String $r2;

        r3 := @this: org.apache.log4j.pattern.LoggerPatternConverter;

        r1 := @parameter0: org.apache.log4j.spi.LoggingEvent;

        r0 := @parameter1: java.lang.StringBuffer;

        $i0 = virtualinvoke r0.<java.lang.StringBuffer: int length()>();

        $r2 = virtualinvoke r1.<org.apache.log4j.spi.LoggingEvent: java.lang.String getLoggerName()>();

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        virtualinvoke r3.<org.apache.log4j.pattern.NamePatternConverter: void abbreviate(int,java.lang.StringBuffer)>($i0, r0);

        return;
    }

    static void <clinit>()
    {
        org.apache.log4j.pattern.LoggerPatternConverter $r0;

        $r0 = new org.apache.log4j.pattern.LoggerPatternConverter;

        specialinvoke $r0.<org.apache.log4j.pattern.LoggerPatternConverter: void <init>(java.lang.String[])>(null);

        <org.apache.log4j.pattern.LoggerPatternConverter: org.apache.log4j.pattern.LoggerPatternConverter INSTANCE> = $r0;

        return;
    }
}
