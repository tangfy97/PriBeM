public class com.google.wave.api.Markup extends com.google.wave.api.BlipContent
{
    private static final java.util.regex.Pattern MARKUP_PATTERN;
    private final java.lang.String markup;
    private final java.lang.String plain;

    public static com.google.wave.api.Markup of(java.lang.String)
    {
        com.google.wave.api.Markup $r0;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        $r0 = new com.google.wave.api.Markup;

        specialinvoke $r0.<com.google.wave.api.Markup: void <init>(java.lang.String)>(r1);

        return $r0;
    }

    public void <init>(java.lang.String)
    {
        com.google.wave.api.Markup r0;
        java.lang.String r1, $r2;

        r0 := @this: com.google.wave.api.Markup;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.google.wave.api.BlipContent: void <init>()>();

        r0.<com.google.wave.api.Markup: java.lang.String markup> = r1;

        $r2 = staticinvoke <com.google.wave.api.Markup: java.lang.String convertToPlainText(java.lang.String)>(r1);

        r0.<com.google.wave.api.Markup: java.lang.String plain> = $r2;

        return;
    }

    public java.lang.String getMarkup()
    {
        com.google.wave.api.Markup r0;
        java.lang.String $r1;

        r0 := @this: com.google.wave.api.Markup;

        $r1 = r0.<com.google.wave.api.Markup: java.lang.String markup>;

        return $r1;
    }

    public java.lang.String getText()
    {
        com.google.wave.api.Markup r0;
        java.lang.String $r1;

        r0 := @this: com.google.wave.api.Markup;

        $r1 = r0.<com.google.wave.api.Markup: java.lang.String plain>;

        return $r1;
    }

    private static java.lang.String convertToPlainText(java.lang.String)
    {
        java.lang.String[] $r8;
        java.util.regex.Matcher $r3;
        java.lang.StringBuffer $r0;
        int $i0, $i1;
        java.lang.String r1, $r4, $r5, $r6, $r7, r9, $r10, $r11, r12;
        boolean $z0, $z1, $z2;
        java.util.regex.Pattern $r2;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = <com.google.wave.api.Markup: java.util.regex.Pattern MARKUP_PATTERN>;

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

     label1:
        $z0 = virtualinvoke $r3.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label4;

        r12 = "";

        $r5 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group()>();

        $r6 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group()>();

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        $i1 = $i0 - 1;

        $r7 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int,int)>(1, $i1);

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ");

        r9 = $r8[0];

        $r10 = "p";

        $z1 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r9);

        if $z1 != 0 goto label2;

        $r11 = "br";

        $z2 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r9);

        if $z2 == 0 goto label3;

     label2:
        r12 = "\n";

     label3:
        virtualinvoke $r3.<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>($r0, r12);

        goto label1;

     label4:
        virtualinvoke $r3.<java.util.regex.Matcher: java.lang.StringBuffer appendTail(java.lang.StringBuffer)>($r0);

        $r4 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\<.*?\\>");

        <com.google.wave.api.Markup: java.util.regex.Pattern MARKUP_PATTERN> = $r0;

        return;
    }
}
