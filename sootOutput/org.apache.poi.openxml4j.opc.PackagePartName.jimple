public final class org.apache.poi.openxml4j.opc.PackagePartName extends java.lang.Object implements java.lang.Comparable
{
    private java.net.URI partNameURI;
    private static java.lang.String[] RFC3986_PCHAR_SUB_DELIMS;
    private static java.lang.String[] RFC3986_PCHAR_UNRESERVED_SUP;
    private static java.lang.String[] RFC3986_PCHAR_AUTHORIZED_SUP;
    private boolean isRelationship;

    void <init>(java.net.URI, boolean) throws org.apache.poi.openxml4j.exceptions.InvalidFormatException
    {
        org.apache.poi.openxml4j.opc.PackagePartName r0;
        org.apache.poi.openxml4j.exceptions.OpenXML4JRuntimeException $r4;
        java.net.URI r1, $r2, $r3;
        boolean z0, $z1, $z2;

        r0 := @this: org.apache.poi.openxml4j.opc.PackagePartName;

        r1 := @parameter0: java.net.URI;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if z0 == 0 goto label1;

        staticinvoke <org.apache.poi.openxml4j.opc.PackagePartName: void throwExceptionIfInvalidPartUri(java.net.URI)>(r1);

        goto label2;

     label1:
        $r2 = <org.apache.poi.openxml4j.opc.PackagingURIHelper: java.net.URI PACKAGE_ROOT_URI>;

        $z1 = virtualinvoke $r2.<java.net.URI: boolean equals(java.lang.Object)>(r1);

        if $z1 != 0 goto label2;

        $r4 = new org.apache.poi.openxml4j.exceptions.OpenXML4JRuntimeException;

        specialinvoke $r4.<org.apache.poi.openxml4j.exceptions.OpenXML4JRuntimeException: void <init>(java.lang.String)>("OCP conformance must be check for ALL part name except special cases : [\'/\']");

        throw $r4;

     label2:
        r0.<org.apache.poi.openxml4j.opc.PackagePartName: java.net.URI partNameURI> = r1;

        $r3 = r0.<org.apache.poi.openxml4j.opc.PackagePartName: java.net.URI partNameURI>;

        $z2 = specialinvoke r0.<org.apache.poi.openxml4j.opc.PackagePartName: boolean isRelationshipPartURI(java.net.URI)>($r3);

        r0.<org.apache.poi.openxml4j.opc.PackagePartName: boolean isRelationship> = $z2;

        return;
    }

    void <init>(java.lang.String, boolean) throws org.apache.poi.openxml4j.exceptions.InvalidFormatException
    {
        org.apache.poi.openxml4j.opc.PackagePartName r0;
        java.net.URISyntaxException $r6;
        org.apache.poi.openxml4j.exceptions.OpenXML4JRuntimeException $r5;
        java.lang.IllegalArgumentException $r7;
        java.net.URI $r1, $r3, $r4;
        java.lang.String r2;
        boolean z0, $z1, $z2;

        r0 := @this: org.apache.poi.openxml4j.opc.PackagePartName;

        r2 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

     label1:
        $r1 = new java.net.URI;

        specialinvoke $r1.<java.net.URI: void <init>(java.lang.String)>(r2);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("partName argmument is not a valid OPC part name !");

        throw $r7;

     label4:
        if z0 == 0 goto label5;

        staticinvoke <org.apache.poi.openxml4j.opc.PackagePartName: void throwExceptionIfInvalidPartUri(java.net.URI)>($r1);

        goto label6;

     label5:
        $r3 = <org.apache.poi.openxml4j.opc.PackagingURIHelper: java.net.URI PACKAGE_ROOT_URI>;

        $z1 = virtualinvoke $r3.<java.net.URI: boolean equals(java.lang.Object)>($r1);

        if $z1 != 0 goto label6;

        $r5 = new org.apache.poi.openxml4j.exceptions.OpenXML4JRuntimeException;

        specialinvoke $r5.<org.apache.poi.openxml4j.exceptions.OpenXML4JRuntimeException: void <init>(java.lang.String)>("OCP conformance must be check for ALL part name except special cases : [\'/\']");

        throw $r5;

     label6:
        r0.<org.apache.poi.openxml4j.opc.PackagePartName: java.net.URI partNameURI> = $r1;

        $r4 = r0.<org.apache.poi.openxml4j.opc.PackagePartName: java.net.URI partNameURI>;

        $z2 = specialinvoke r0.<org.apache.poi.openxml4j.opc.PackagePartName: boolean isRelationshipPartURI(java.net.URI)>($r4);

        r0.<org.apache.poi.openxml4j.opc.PackagePartName: boolean isRelationship> = $z2;

        return;

        catch java.net.URISyntaxException from label1 to label2 with label3;
    }

    private boolean isRelationshipPartURI(java.net.URI)
    {
        org.apache.poi.openxml4j.opc.PackagePartName r12;
        java.lang.IllegalArgumentException $r11;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r8, $r9;
        java.net.URI r0;
        java.lang.String $r1, $r4, $r7, $r10;
        boolean $z0;

        r12 := @this: org.apache.poi.openxml4j.opc.PackagePartName;

        r0 := @parameter0: java.net.URI;

        if r0 != null goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("partUri");

        throw $r11;

     label1:
        $r1 = virtualinvoke r0.<java.net.URI: java.lang.String getPath()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("^.*/");

        $r4 = <org.apache.poi.openxml4j.opc.PackagingURIHelper: java.lang.String RELATIONSHIP_PART_SEGMENT_NAME>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/.*\\");

        $r7 = <org.apache.poi.openxml4j.opc.PackagingURIHelper: java.lang.String RELATIONSHIP_PART_EXTENSION_NAME>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean matches(java.lang.String)>($r10);

        return $z0;
    }

    public boolean isRelationshipPartURI()
    {
        org.apache.poi.openxml4j.opc.PackagePartName r0;
        boolean $z0;

        r0 := @this: org.apache.poi.openxml4j.opc.PackagePartName;

        $z0 = r0.<org.apache.poi.openxml4j.opc.PackagePartName: boolean isRelationship>;

        return $z0;
    }

    private static void throwExceptionIfInvalidPartUri(java.net.URI) throws org.apache.poi.openxml4j.exceptions.InvalidFormatException
    {
        java.net.URI r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @parameter0: java.net.URI;

        if r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("partUri");

        throw $r1;

     label1:
        staticinvoke <org.apache.poi.openxml4j.opc.PackagePartName: void throwExceptionIfEmptyURI(java.net.URI)>(r0);

        staticinvoke <org.apache.poi.openxml4j.opc.PackagePartName: void throwExceptionIfAbsoluteUri(java.net.URI)>(r0);

        staticinvoke <org.apache.poi.openxml4j.opc.PackagePartName: void throwExceptionIfPartNameNotStartsWithForwardSlashChar(java.net.URI)>(r0);

        staticinvoke <org.apache.poi.openxml4j.opc.PackagePartName: void throwExceptionIfPartNameEndsWithForwardSlashChar(java.net.URI)>(r0);

        staticinvoke <org.apache.poi.openxml4j.opc.PackagePartName: void throwExceptionIfPartNameHaveInvalidSegments(java.net.URI)>(r0);

        return;
    }

    private static void throwExceptionIfEmptyURI(java.net.URI) throws org.apache.poi.openxml4j.exceptions.InvalidFormatException
    {
        org.apache.poi.openxml4j.exceptions.InvalidFormatException $r11;
        char $c2, $c3;
        java.lang.IllegalArgumentException $r9;
        int $i0, $i1, $i4, $i5;
        java.lang.StringBuilder $r4, $r6, $r10;
        java.net.URI r0;
        java.lang.String $r1, $r5, $r7;

        r0 := @parameter0: java.net.URI;

        if r0 != null goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("partURI");

        throw $r9;

     label1:
        $r1 = virtualinvoke r0.<java.net.URI: java.lang.String getPath()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 == 0 goto label2;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i1 != 1 goto label3;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(0);

        $c3 = <org.apache.poi.openxml4j.opc.PackagingURIHelper: char FORWARD_SLASH_CHAR>;

        $i4 = (int) $c2;

        $i5 = (int) $c3;

        if $i4 != $i5 goto label3;

     label2:
        $r11 = new org.apache.poi.openxml4j.exceptions.InvalidFormatException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("A part name shall not be empty [M1.1]: ");

        $r5 = virtualinvoke r0.<java.net.URI: java.lang.String getPath()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<org.apache.poi.openxml4j.exceptions.InvalidFormatException: void <init>(java.lang.String)>($r7);

        throw $r11;

     label3:
        return;
    }

    private static void throwExceptionIfPartNameHaveInvalidSegments(java.net.URI) throws org.apache.poi.openxml4j.exceptions.InvalidFormatException
    {
        java.net.URI r0;
        boolean $z0, $z1, $z2, $z3;
        org.apache.poi.openxml4j.exceptions.InvalidFormatException $r3, $r11, $r20, $r26;
        java.lang.StringBuilder $r4, $r5, $r7, $r12, $r13, $r15, $r21, $r22, $r24, $r27, $r28, $r30;
        java.lang.String[] $r2;
        int $i0, $i1, i2;
        java.lang.String $r1, $r6, $r8, $r9, r10, $r14, $r16, $r17, $r18, $r19, $r23, $r25, $r29, $r31;
        java.lang.IllegalArgumentException $r32;

        r0 := @parameter0: java.net.URI;

        if r0 != null goto label1;

        $r32 = new java.lang.IllegalArgumentException;

        specialinvoke $r32.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("partUri");

        throw $r32;

     label1:
        $r1 = virtualinvoke r0.<java.net.URI: java.lang.String toASCIIString()>();

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String[] split(java.lang.String)>("/");

        $i0 = lengthof $r2;

        if $i0 <= 1 goto label2;

        $r9 = $r2[0];

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 != 0 goto label3;

     label2:
        $r3 = new org.apache.poi.openxml4j.exceptions.InvalidFormatException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("A part name shall not have empty segments [M1.3]: ");

        $r6 = virtualinvoke r0.<java.net.URI: java.lang.String getPath()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.apache.poi.openxml4j.exceptions.InvalidFormatException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label3:
        i2 = 1;

     label4:
        $i1 = lengthof $r2;

        if i2 >= $i1 goto label9;

        r10 = $r2[i2];

        if r10 == null goto label5;

        $r17 = "";

        $z1 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>(r10);

        if $z1 == 0 goto label6;

     label5:
        $r11 = new org.apache.poi.openxml4j.exceptions.InvalidFormatException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("A part name shall not have empty segments [M1.3]: ");

        $r14 = virtualinvoke r0.<java.net.URI: java.lang.String getPath()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<org.apache.poi.openxml4j.exceptions.InvalidFormatException: void <init>(java.lang.String)>($r16);

        throw $r11;

     label6:
        $z2 = virtualinvoke r10.<java.lang.String: boolean endsWith(java.lang.String)>(".");

        if $z2 == 0 goto label7;

        $r26 = new org.apache.poi.openxml4j.exceptions.InvalidFormatException;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("A segment shall not end with a dot (\'.\') character [M1.9]: ");

        $r29 = virtualinvoke r0.<java.net.URI: java.lang.String getPath()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<org.apache.poi.openxml4j.exceptions.InvalidFormatException: void <init>(java.lang.String)>($r31);

        throw $r26;

     label7:
        $r18 = "";

        $r19 = virtualinvoke r10.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\\\.", "");

        $z3 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>($r19);

        if $z3 == 0 goto label8;

        $r20 = new org.apache.poi.openxml4j.exceptions.InvalidFormatException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("A segment shall include at least one non-dot character. [M1.10]: ");

        $r23 = virtualinvoke r0.<java.net.URI: java.lang.String getPath()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<org.apache.poi.openxml4j.exceptions.InvalidFormatException: void <init>(java.lang.String)>($r25);

        throw $r20;

     label8:
        staticinvoke <org.apache.poi.openxml4j.opc.PackagePartName: void checkPCharCompliance(java.lang.String)>(r10);

        i2 = i2 + 1;

        goto label4;

     label9:
        return;
    }

    private static void checkPCharCompliance(java.lang.String) throws org.apache.poi.openxml4j.exceptions.InvalidFormatException
    {
        java.lang.StringBuilder $r10, $r11, $r12, $r23;
        java.lang.String r0, $r2, $r7, $r13, $r16, $r19, $r21;
        boolean z0, z1, z2, z3, z4, z5, z6;
        org.apache.poi.openxml4j.exceptions.InvalidFormatException $r24, $r25, $r26, $r27;
        java.lang.String[] $r5, $r6, $r14, $r15, $r17, $r18, $r20, $r22;
        int $i0, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i11, i14, i15, $i16, i17, i18, i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43;
        char $c1, $c8, $c10, $c12, $c13, c19;

        r0 := @parameter0: java.lang.String;

        i14 = 0;

     label01:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i14 >= $i0 goto label27;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i14);

        z0 = 1;

        z6 = 1;

        z5 = 1;

        z3 = 1;

        z1 = 1;

        $i21 = (int) $c1;

        if $i21 < 65 goto label02;

        $i22 = (int) $c1;

        if $i22 <= 90 goto label04;

     label02:
        $i23 = (int) $c1;

        if $i23 < 97 goto label03;

        $i24 = (int) $c1;

        if $i24 <= 122 goto label04;

     label03:
        $i25 = (int) $c1;

        if $i25 < 48 goto label05;

        $i26 = (int) $c1;

        if $i26 > 57 goto label05;

     label04:
        z0 = 0;

        z5 = 0;

        z3 = 0;

        goto label14;

     label05:
        i15 = 0;

     label06:
        $r22 = <org.apache.poi.openxml4j.opc.PackagePartName: java.lang.String[] RFC3986_PCHAR_UNRESERVED_SUP>;

        $i16 = lengthof $r22;

        if i15 >= $i16 goto label08;

        $r20 = <org.apache.poi.openxml4j.opc.PackagePartName: java.lang.String[] RFC3986_PCHAR_UNRESERVED_SUP>;

        $r21 = $r20[i15];

        $c13 = virtualinvoke $r21.<java.lang.String: char charAt(int)>(0);

        $i27 = (int) $c1;

        $i28 = (int) $c13;

        if $i27 != $i28 goto label07;

        z0 = 0;

        z6 = 0;

        z5 = 0;

        z3 = 0;

        z1 = 0;

        goto label08;

     label07:
        i15 = i15 + 1;

        goto label06;

     label08:
        i17 = 0;

     label09:
        if z6 == 0 goto label11;

        $r17 = <org.apache.poi.openxml4j.opc.PackagePartName: java.lang.String[] RFC3986_PCHAR_AUTHORIZED_SUP>;

        $i11 = lengthof $r17;

        if i17 >= $i11 goto label11;

        $r18 = <org.apache.poi.openxml4j.opc.PackagePartName: java.lang.String[] RFC3986_PCHAR_AUTHORIZED_SUP>;

        $r19 = $r18[i17];

        $c12 = virtualinvoke $r19.<java.lang.String: char charAt(int)>(0);

        $i29 = (int) $c1;

        $i30 = (int) $c12;

        if $i29 != $i30 goto label10;

        z0 = 0;

        z6 = 0;

        z5 = 0;

        z3 = 0;

        z1 = 0;

     label10:
        i17 = i17 + 1;

        goto label09;

     label11:
        i18 = 0;

     label12:
        if z1 == 0 goto label14;

        $r14 = <org.apache.poi.openxml4j.opc.PackagePartName: java.lang.String[] RFC3986_PCHAR_SUB_DELIMS>;

        $i9 = lengthof $r14;

        if i18 >= $i9 goto label14;

        $r15 = <org.apache.poi.openxml4j.opc.PackagePartName: java.lang.String[] RFC3986_PCHAR_SUB_DELIMS>;

        $r16 = $r15[i18];

        $c10 = virtualinvoke $r16.<java.lang.String: char charAt(int)>(0);

        $i31 = (int) $c1;

        $i32 = (int) $c10;

        if $i31 != $i32 goto label13;

        z0 = 0;

        z5 = 0;

        z3 = 0;

        z1 = 0;

     label13:
        i18 = i18 + 1;

        goto label12;

     label14:
        if z5 == 0 goto label25;

        $i33 = (int) $c1;

        if $i33 != 37 goto label25;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        $i3 = $i2 - i14;

        if $i3 >= 2 goto label15;

        $r24 = new org.apache.poi.openxml4j.exceptions.InvalidFormatException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The segment ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" contain invalid encoded character !");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<org.apache.poi.openxml4j.exceptions.InvalidFormatException: void <init>(java.lang.String)>($r13);

        throw $r24;

     label15:
        z0 = 0;

        z4 = 0;

        z3 = 0;

        z2 = 0;

        $i5 = i14 + 1;

        $i4 = i14 + 3;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i5, $i4);

        $i6 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r2, 16);

        c19 = (char) $i6;

        i14 = i14 + 2;

        $i34 = (int) c19;

        if $i34 == 47 goto label16;

        $i35 = (int) c19;

        if $i35 != 92 goto label17;

     label16:
        $r25 = new org.apache.poi.openxml4j.exceptions.InvalidFormatException;

        specialinvoke $r25.<org.apache.poi.openxml4j.exceptions.InvalidFormatException: void <init>(java.lang.String)>("A segment shall not contain percent-encoded forward slash (\'/\'), or backward slash (\'\') characters. [M1.7]");

        throw $r25;

     label17:
        $i36 = (int) c19;

        if $i36 < 65 goto label18;

        $i37 = (int) c19;

        if $i37 <= 90 goto label20;

     label18:
        $i38 = (int) c19;

        if $i38 < 97 goto label19;

        $i39 = (int) c19;

        if $i39 <= 122 goto label20;

     label19:
        $i40 = (int) c19;

        if $i40 < 48 goto label21;

        $i41 = (int) c19;

        if $i41 > 57 goto label21;

     label20:
        z0 = 1;

        z4 = 1;

        z3 = 1;

        z2 = 1;

     label21:
        i20 = 0;

     label22:
        if z2 != 0 goto label24;

        $r5 = <org.apache.poi.openxml4j.opc.PackagePartName: java.lang.String[] RFC3986_PCHAR_UNRESERVED_SUP>;

        $i7 = lengthof $r5;

        if i20 >= $i7 goto label24;

        $r6 = <org.apache.poi.openxml4j.opc.PackagePartName: java.lang.String[] RFC3986_PCHAR_UNRESERVED_SUP>;

        $r7 = $r6[i20];

        $c8 = virtualinvoke $r7.<java.lang.String: char charAt(int)>(0);

        $i42 = (int) $c1;

        $i43 = (int) $c8;

        if $i42 != $i43 goto label23;

        z0 = 1;

        z4 = 1;

        z3 = 1;

        goto label24;

     label23:
        i20 = i20 + 1;

        goto label22;

     label24:
        if z4 == 0 goto label25;

        $r26 = new org.apache.poi.openxml4j.exceptions.InvalidFormatException;

        specialinvoke $r26.<org.apache.poi.openxml4j.exceptions.InvalidFormatException: void <init>(java.lang.String)>("A segment shall not contain percent-encoded unreserved characters. [M1.8]");

        throw $r26;

     label25:
        if z3 == 0 goto label26;

        $r27 = new org.apache.poi.openxml4j.exceptions.InvalidFormatException;

        specialinvoke $r27.<org.apache.poi.openxml4j.exceptions.InvalidFormatException: void <init>(java.lang.String)>("A segment shall not hold any characters other than pchar characters. [M1.6]");

        throw $r27;

     label26:
        i14 = i14 + 1;

        goto label01;

     label27:
        return;
    }

    private static void throwExceptionIfPartNameNotStartsWithForwardSlashChar(java.net.URI) throws org.apache.poi.openxml4j.exceptions.InvalidFormatException
    {
        org.apache.poi.openxml4j.exceptions.InvalidFormatException $r9;
        char $c1, $c2;
        int $i0, $i3, $i4;
        java.lang.StringBuilder $r4, $r6, $r8;
        java.net.URI r0;
        java.lang.String $r1, $r5, $r7;

        r0 := @parameter0: java.net.URI;

        $r1 = virtualinvoke r0.<java.net.URI: java.lang.String getPath()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(0);

        $c2 = <org.apache.poi.openxml4j.opc.PackagingURIHelper: char FORWARD_SLASH_CHAR>;

        $i3 = (int) $c1;

        $i4 = (int) $c2;

        if $i3 == $i4 goto label1;

        $r9 = new org.apache.poi.openxml4j.exceptions.InvalidFormatException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("A part name shall start with a forward slash (\'/\') character [M1.4]: ");

        $r5 = virtualinvoke r0.<java.net.URI: java.lang.String getPath()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<org.apache.poi.openxml4j.exceptions.InvalidFormatException: void <init>(java.lang.String)>($r7);

        throw $r9;

     label1:
        return;
    }

    private static void throwExceptionIfPartNameEndsWithForwardSlashChar(java.net.URI) throws org.apache.poi.openxml4j.exceptions.InvalidFormatException
    {
        org.apache.poi.openxml4j.exceptions.InvalidFormatException $r9;
        char $c3, $c4;
        int $i0, $i1, $i2, $i5, $i6;
        java.lang.StringBuilder $r4, $r6, $r8;
        java.net.URI r0;
        java.lang.String $r1, $r5, $r7;

        r0 := @parameter0: java.net.URI;

        $r1 = virtualinvoke r0.<java.net.URI: java.lang.String getPath()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i2 = $i1 - 1;

        $c3 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i2);

        $c4 = <org.apache.poi.openxml4j.opc.PackagingURIHelper: char FORWARD_SLASH_CHAR>;

        $i5 = (int) $c3;

        $i6 = (int) $c4;

        if $i5 != $i6 goto label1;

        $r9 = new org.apache.poi.openxml4j.exceptions.InvalidFormatException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("A part name shall not have a forward slash as the last character [M1.5]: ");

        $r5 = virtualinvoke r0.<java.net.URI: java.lang.String getPath()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<org.apache.poi.openxml4j.exceptions.InvalidFormatException: void <init>(java.lang.String)>($r7);

        throw $r9;

     label1:
        return;
    }

    private static void throwExceptionIfAbsoluteUri(java.net.URI) throws org.apache.poi.openxml4j.exceptions.InvalidFormatException
    {
        org.apache.poi.openxml4j.exceptions.InvalidFormatException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.net.URI r0;
        java.lang.String $r5;
        boolean $z0;

        r0 := @parameter0: java.net.URI;

        $z0 = virtualinvoke r0.<java.net.URI: boolean isAbsolute()>();

        if $z0 == 0 goto label1;

        $r1 = new org.apache.poi.openxml4j.exceptions.InvalidFormatException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Absolute URI forbidden: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<org.apache.poi.openxml4j.exceptions.InvalidFormatException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label1:
        return;
    }

    public int compareTo(org.apache.poi.openxml4j.opc.PackagePartName)
    {
        org.apache.poi.openxml4j.opc.PackagePartName r0, r1;
        int $i0, $i2;
        java.net.URI $r2, $r5;
        java.lang.String $r3, $r4, $r6, $r7;

        r1 := @this: org.apache.poi.openxml4j.opc.PackagePartName;

        r0 := @parameter0: org.apache.poi.openxml4j.opc.PackagePartName;

        if r0 != null goto label1;

        $i2 = (int) -1;

        return $i2;

     label1:
        $r2 = r1.<org.apache.poi.openxml4j.opc.PackagePartName: java.net.URI partNameURI>;

        $r3 = virtualinvoke $r2.<java.net.URI: java.lang.String toASCIIString()>();

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String toLowerCase()>();

        $r5 = r0.<org.apache.poi.openxml4j.opc.PackagePartName: java.net.URI partNameURI>;

        $r6 = virtualinvoke $r5.<java.net.URI: java.lang.String toASCIIString()>();

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String toLowerCase()>();

        $i0 = virtualinvoke $r4.<java.lang.String: int compareTo(java.lang.String)>($r7);

        return $i0;
    }

    public java.lang.String getExtension()
    {
        org.apache.poi.openxml4j.opc.PackagePartName r0;
        int $i0, $i1, $i2, $i4;
        java.net.URI $r1;
        java.lang.String $r2, $r3;

        r0 := @this: org.apache.poi.openxml4j.opc.PackagePartName;

        $r1 = r0.<org.apache.poi.openxml4j.opc.PackagePartName: java.net.URI partNameURI>;

        $r2 = virtualinvoke $r1.<java.net.URI: java.lang.String getPath()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $i1 = virtualinvoke $r2.<java.lang.String: int lastIndexOf(java.lang.String)>(".");

        $i4 = (int) -1;

        if $i1 <= $i4 goto label1;

        $i2 = $i1 + 1;

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>($i2);

        return $r3;

     label1:
        return "";
    }

    public java.lang.String getName()
    {
        java.net.URI $r1;
        java.lang.String $r2;
        org.apache.poi.openxml4j.opc.PackagePartName r0;

        r0 := @this: org.apache.poi.openxml4j.opc.PackagePartName;

        $r1 = r0.<org.apache.poi.openxml4j.opc.PackagePartName: java.net.URI partNameURI>;

        $r2 = virtualinvoke $r1.<java.net.URI: java.lang.String toASCIIString()>();

        return $r2;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.poi.openxml4j.opc.PackagePartName r1, $r5;
        java.lang.Object r0;
        java.net.URI $r2, $r6;
        java.lang.String $r3, $r4, $r7, $r8;
        boolean $z0, $z1;

        r1 := @this: org.apache.poi.openxml4j.opc.PackagePartName;

        r0 := @parameter0: java.lang.Object;

        if r0 == null goto label1;

        $z0 = r0 instanceof org.apache.poi.openxml4j.opc.PackagePartName;

        if $z0 != 0 goto label2;

     label1:
        return 0;

     label2:
        $r2 = r1.<org.apache.poi.openxml4j.opc.PackagePartName: java.net.URI partNameURI>;

        $r3 = virtualinvoke $r2.<java.net.URI: java.lang.String toASCIIString()>();

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String toLowerCase()>();

        $r5 = (org.apache.poi.openxml4j.opc.PackagePartName) r0;

        $r6 = $r5.<org.apache.poi.openxml4j.opc.PackagePartName: java.net.URI partNameURI>;

        $r7 = virtualinvoke $r6.<java.net.URI: java.lang.String toASCIIString()>();

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String toLowerCase()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        return $z1;
    }

    public int hashCode()
    {
        org.apache.poi.openxml4j.opc.PackagePartName r0;
        int $i0;
        java.net.URI $r1;
        java.lang.String $r2, $r3;

        r0 := @this: org.apache.poi.openxml4j.opc.PackagePartName;

        $r1 = r0.<org.apache.poi.openxml4j.opc.PackagePartName: java.net.URI partNameURI>;

        $r2 = virtualinvoke $r1.<java.net.URI: java.lang.String toASCIIString()>();

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String toLowerCase()>();

        $i0 = virtualinvoke $r3.<java.lang.String: int hashCode()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        java.lang.String $r1;
        org.apache.poi.openxml4j.opc.PackagePartName r0;

        r0 := @this: org.apache.poi.openxml4j.opc.PackagePartName;

        $r1 = virtualinvoke r0.<org.apache.poi.openxml4j.opc.PackagePartName: java.lang.String getName()>();

        return $r1;
    }

    public java.net.URI getURI()
    {
        java.net.URI $r1;
        org.apache.poi.openxml4j.opc.PackagePartName r0;

        r0 := @this: org.apache.poi.openxml4j.opc.PackagePartName;

        $r1 = r0.<org.apache.poi.openxml4j.opc.PackagePartName: java.net.URI partNameURI>;

        return $r1;
    }

    public volatile int compareTo(java.lang.Object)
    {
        org.apache.poi.openxml4j.opc.PackagePartName r0, $r2;
        int $i0;
        java.lang.Object r1;

        r0 := @this: org.apache.poi.openxml4j.opc.PackagePartName;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.poi.openxml4j.opc.PackagePartName) r1;

        $i0 = virtualinvoke r0.<org.apache.poi.openxml4j.opc.PackagePartName: int compareTo(org.apache.poi.openxml4j.opc.PackagePartName)>($r2);

        return $i0;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0, $r1, $r2;

        $r0 = newarray (java.lang.String)[11];

        $r0[0] = "!";

        $r0[1] = "$";

        $r0[2] = "&";

        $r0[3] = "\'";

        $r0[4] = "(";

        $r0[5] = ")";

        $r0[6] = "*";

        $r0[7] = "+";

        $r0[8] = ",";

        $r0[9] = ";";

        $r0[10] = "=";

        <org.apache.poi.openxml4j.opc.PackagePartName: java.lang.String[] RFC3986_PCHAR_SUB_DELIMS> = $r0;

        $r1 = newarray (java.lang.String)[4];

        $r1[0] = "-";

        $r1[1] = ".";

        $r1[2] = "_";

        $r1[3] = "~";

        <org.apache.poi.openxml4j.opc.PackagePartName: java.lang.String[] RFC3986_PCHAR_UNRESERVED_SUP> = $r1;

        $r2 = newarray (java.lang.String)[2];

        $r2[0] = ":";

        $r2[1] = "@";

        <org.apache.poi.openxml4j.opc.PackagePartName: java.lang.String[] RFC3986_PCHAR_AUTHORIZED_SUP> = $r2;

        return;
    }
}
