class org.apache.tika.fork.ClassLoaderProxy extends java.lang.ClassLoader implements org.apache.tika.fork.ForkProxy
{
    private static final long serialVersionUID;
    private final java.util.Set notFound;
    private final int resource;
    private transient java.io.DataInputStream input;
    private transient java.io.DataOutputStream output;

    public void <init>(int)
    {
        java.util.HashSet $r1;
        int i0;
        org.apache.tika.fork.ClassLoaderProxy r0;

        r0 := @this: org.apache.tika.fork.ClassLoaderProxy;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.ClassLoader: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r0.<org.apache.tika.fork.ClassLoaderProxy: java.util.Set notFound> = $r1;

        r0.<org.apache.tika.fork.ClassLoaderProxy: int resource> = i0;

        return;
    }

    public void init(java.io.DataInputStream, java.io.DataOutputStream)
    {
        org.apache.tika.fork.ClassLoaderProxy r0;
        java.io.DataInputStream r1;
        java.io.DataOutputStream r2;

        r0 := @this: org.apache.tika.fork.ClassLoaderProxy;

        r1 := @parameter0: java.io.DataInputStream;

        r2 := @parameter1: java.io.DataOutputStream;

        r0.<org.apache.tika.fork.ClassLoaderProxy: java.io.DataInputStream input> = r1;

        r0.<org.apache.tika.fork.ClassLoaderProxy: java.io.DataOutputStream output> = r2;

        return;
    }

    protected synchronized java.net.URL findResource(java.lang.String)
    {
        java.io.DataInputStream $r8;
        byte[] $r10;
        java.net.URL $r11;
        java.io.DataOutputStream $r3, $r4, $r5, $r6, $r7;
        int $i0;
        java.lang.String r1;
        boolean $z0, $z1;
        java.util.Set $r2, $r9;
        java.io.IOException $r12;
        org.apache.tika.fork.ClassLoaderProxy r0;

        r0 := @this: org.apache.tika.fork.ClassLoaderProxy;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.tika.fork.ClassLoaderProxy: java.util.Set notFound>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r3 = r0.<org.apache.tika.fork.ClassLoaderProxy: java.io.DataOutputStream output>;

        virtualinvoke $r3.<java.io.DataOutputStream: void write(int)>(3);

        $r4 = r0.<org.apache.tika.fork.ClassLoaderProxy: java.io.DataOutputStream output>;

        $i0 = r0.<org.apache.tika.fork.ClassLoaderProxy: int resource>;

        virtualinvoke $r4.<java.io.DataOutputStream: void write(int)>($i0);

        $r5 = r0.<org.apache.tika.fork.ClassLoaderProxy: java.io.DataOutputStream output>;

        virtualinvoke $r5.<java.io.DataOutputStream: void write(int)>(1);

        $r6 = r0.<org.apache.tika.fork.ClassLoaderProxy: java.io.DataOutputStream output>;

        virtualinvoke $r6.<java.io.DataOutputStream: void writeUTF(java.lang.String)>(r1);

        $r7 = r0.<org.apache.tika.fork.ClassLoaderProxy: java.io.DataOutputStream output>;

        virtualinvoke $r7.<java.io.DataOutputStream: void flush()>();

        $r8 = r0.<org.apache.tika.fork.ClassLoaderProxy: java.io.DataInputStream input>;

        $z1 = virtualinvoke $r8.<java.io.DataInputStream: boolean readBoolean()>();

        if $z1 == 0 goto label3;

        $r10 = specialinvoke r0.<org.apache.tika.fork.ClassLoaderProxy: byte[] readStream()>();

        $r11 = staticinvoke <org.apache.tika.fork.MemoryURLStreamHandler: java.net.URL createURL(byte[])>($r10);

     label2:
        return $r11;

     label3:
        $r9 = r0.<org.apache.tika.fork.ClassLoaderProxy: java.util.Set notFound>;

        interfaceinvoke $r9.<java.util.Set: boolean add(java.lang.Object)>(r1);

     label4:
        return null;

     label5:
        $r12 := @caughtexception;

        return null;

        catch java.io.IOException from label1 to label2 with label5;
        catch java.io.IOException from label3 to label4 with label5;
    }

    protected synchronized java.util.Enumeration findResources(java.lang.String) throws java.io.IOException
    {
        java.io.DataInputStream $r8;
        byte[] $r10;
        java.util.Enumeration $r9;
        java.net.URL $r11;
        java.util.ArrayList $r7;
        org.apache.tika.fork.ClassLoaderProxy r0;
        java.io.DataOutputStream $r1, $r2, $r3, $r5, $r6;
        int $i0;
        java.lang.String r4;
        boolean $z0;

        r0 := @this: org.apache.tika.fork.ClassLoaderProxy;

        r4 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.tika.fork.ClassLoaderProxy: java.io.DataOutputStream output>;

        virtualinvoke $r1.<java.io.DataOutputStream: void write(int)>(3);

        $r2 = r0.<org.apache.tika.fork.ClassLoaderProxy: java.io.DataOutputStream output>;

        $i0 = r0.<org.apache.tika.fork.ClassLoaderProxy: int resource>;

        virtualinvoke $r2.<java.io.DataOutputStream: void write(int)>($i0);

        $r3 = r0.<org.apache.tika.fork.ClassLoaderProxy: java.io.DataOutputStream output>;

        virtualinvoke $r3.<java.io.DataOutputStream: void write(int)>(2);

        $r5 = r0.<org.apache.tika.fork.ClassLoaderProxy: java.io.DataOutputStream output>;

        virtualinvoke $r5.<java.io.DataOutputStream: void writeUTF(java.lang.String)>(r4);

        $r6 = r0.<org.apache.tika.fork.ClassLoaderProxy: java.io.DataOutputStream output>;

        virtualinvoke $r6.<java.io.DataOutputStream: void flush()>();

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

     label1:
        $r8 = r0.<org.apache.tika.fork.ClassLoaderProxy: java.io.DataInputStream input>;

        $z0 = virtualinvoke $r8.<java.io.DataInputStream: boolean readBoolean()>();

        if $z0 == 0 goto label2;

        $r10 = specialinvoke r0.<org.apache.tika.fork.ClassLoaderProxy: byte[] readStream()>();

        $r11 = staticinvoke <org.apache.tika.fork.MemoryURLStreamHandler: java.net.URL createURL(byte[])>($r10);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r11);

        goto label1;

     label2:
        $r9 = staticinvoke <java.util.Collections: java.util.Enumeration enumeration(java.util.Collection)>($r7);

        return $r9;
    }

    protected synchronized java.lang.Class findClass(java.lang.String) throws java.lang.ClassNotFoundException
    {
        java.io.DataInputStream $r12;
        byte[] $r18;
        java.io.DataOutputStream $r1, $r2, $r3, $r5, $r11;
        int $i0, $i1;
        java.lang.String r6, $r7, $r10, $r17, $r25;
        boolean $z0;
        java.io.IOException $r20;
        org.apache.tika.fork.ClassLoaderProxy r0;
        java.lang.StringBuilder $r4, $r8, $r9, $r14, $r15, $r16, $r22, $r23, $r24;
        java.lang.ClassNotFoundException $r13, $r21;
        java.lang.Class $r19;

        r0 := @this: org.apache.tika.fork.ClassLoaderProxy;

        r6 := @parameter0: java.lang.String;

     label1:
        $r1 = r0.<org.apache.tika.fork.ClassLoaderProxy: java.io.DataOutputStream output>;

        virtualinvoke $r1.<java.io.DataOutputStream: void write(int)>(3);

        $r2 = r0.<org.apache.tika.fork.ClassLoaderProxy: java.io.DataOutputStream output>;

        $i0 = r0.<org.apache.tika.fork.ClassLoaderProxy: int resource>;

        virtualinvoke $r2.<java.io.DataOutputStream: void write(int)>($i0);

        $r3 = r0.<org.apache.tika.fork.ClassLoaderProxy: java.io.DataOutputStream output>;

        virtualinvoke $r3.<java.io.DataOutputStream: void write(int)>(1);

        $r5 = r0.<org.apache.tika.fork.ClassLoaderProxy: java.io.DataOutputStream output>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke r6.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".class");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.DataOutputStream: void writeUTF(java.lang.String)>($r10);

        $r11 = r0.<org.apache.tika.fork.ClassLoaderProxy: java.io.DataOutputStream output>;

        virtualinvoke $r11.<java.io.DataOutputStream: void flush()>();

        $r12 = r0.<org.apache.tika.fork.ClassLoaderProxy: java.io.DataInputStream input>;

        $z0 = virtualinvoke $r12.<java.io.DataInputStream: boolean readBoolean()>();

        if $z0 == 0 goto label3;

        $r18 = specialinvoke r0.<org.apache.tika.fork.ClassLoaderProxy: byte[] readStream()>();

        $i1 = lengthof $r18;

        $r19 = virtualinvoke r0.<org.apache.tika.fork.ClassLoaderProxy: java.lang.Class defineClass(java.lang.String,byte[],int,int)>(r6, $r18, 0, $i1);

     label2:
        return $r19;

     label3:
        $r13 = new java.lang.ClassNotFoundException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to find class ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.ClassNotFoundException: void <init>(java.lang.String)>($r17);

        throw $r13;

     label4:
        $r20 := @caughtexception;

        $r21 = new java.lang.ClassNotFoundException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to load class ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>($r25, $r20);

        throw $r21;

        catch java.io.IOException from label1 to label2 with label4;
        catch java.io.IOException from label3 to label4 with label4;
    }

    private byte[] readStream() throws java.io.IOException
    {
        byte[] r1, $r4;
        java.io.DataInputStream $r3, $r5;
        java.io.ByteArrayOutputStream $r6;
        org.apache.tika.fork.ClassLoaderProxy r2;
        int $i0, $i2;

        r2 := @this: org.apache.tika.fork.ClassLoaderProxy;

        $r6 = new java.io.ByteArrayOutputStream;

        specialinvoke $r6.<java.io.ByteArrayOutputStream: void <init>()>();

        $i2 = (int) 65535;

        r1 = newarray (byte)[$i2];

     label1:
        $r3 = r2.<org.apache.tika.fork.ClassLoaderProxy: java.io.DataInputStream input>;

        $i0 = virtualinvoke $r3.<java.io.DataInputStream: int readUnsignedShort()>();

        if $i0 <= 0 goto label2;

        $r5 = r2.<org.apache.tika.fork.ClassLoaderProxy: java.io.DataInputStream input>;

        virtualinvoke $r5.<java.io.DataInputStream: void readFully(byte[],int,int)>(r1, 0, $i0);

        virtualinvoke $r6.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r1, 0, $i0);

        goto label1;

     label2:
        $r4 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r4;
    }

    public static void <clinit>()
    {
        <org.apache.tika.fork.ClassLoaderProxy: long serialVersionUID> = -7303109260448540420L;

        return;
    }
}
