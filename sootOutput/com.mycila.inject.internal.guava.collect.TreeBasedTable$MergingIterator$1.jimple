class com.mycila.inject.internal.guava.collect.TreeBasedTable$MergingIterator$1 extends java.lang.Object implements java.util.Comparator
{
    final com.mycila.inject.internal.guava.collect.TreeBasedTable$MergingIterator this$0;

    void <init>(com.mycila.inject.internal.guava.collect.TreeBasedTable$MergingIterator)
    {
        com.mycila.inject.internal.guava.collect.TreeBasedTable$MergingIterator r1;
        com.mycila.inject.internal.guava.collect.TreeBasedTable$MergingIterator$1 r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.TreeBasedTable$MergingIterator$1;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.TreeBasedTable$MergingIterator;

        r0.<com.mycila.inject.internal.guava.collect.TreeBasedTable$MergingIterator$1: com.mycila.inject.internal.guava.collect.TreeBasedTable$MergingIterator this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int compare(com.mycila.inject.internal.guava.collect.PeekingIterator, com.mycila.inject.internal.guava.collect.PeekingIterator)
    {
        com.mycila.inject.internal.guava.collect.TreeBasedTable$MergingIterator$1 r0;
        com.mycila.inject.internal.guava.collect.PeekingIterator r3, r5;
        int $i0;
        java.lang.Object $r4, $r6;
        com.mycila.inject.internal.guava.collect.TreeBasedTable$MergingIterator $r1;
        java.util.Comparator $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.TreeBasedTable$MergingIterator$1;

        r3 := @parameter0: com.mycila.inject.internal.guava.collect.PeekingIterator;

        r5 := @parameter1: com.mycila.inject.internal.guava.collect.PeekingIterator;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.TreeBasedTable$MergingIterator$1: com.mycila.inject.internal.guava.collect.TreeBasedTable$MergingIterator this$0>;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.TreeBasedTable$MergingIterator: java.util.Comparator access$000(com.mycila.inject.internal.guava.collect.TreeBasedTable$MergingIterator)>($r1);

        $r4 = interfaceinvoke r3.<com.mycila.inject.internal.guava.collect.PeekingIterator: java.lang.Object peek()>();

        $r6 = interfaceinvoke r5.<com.mycila.inject.internal.guava.collect.PeekingIterator: java.lang.Object peek()>();

        $i0 = interfaceinvoke $r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r4, $r6);

        return $i0;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.PeekingIterator $r3, $r4;
        int $i0;
        java.lang.Object r1, r2;
        com.mycila.inject.internal.guava.collect.TreeBasedTable$MergingIterator$1 r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.TreeBasedTable$MergingIterator$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (com.mycila.inject.internal.guava.collect.PeekingIterator) r1;

        $r3 = (com.mycila.inject.internal.guava.collect.PeekingIterator) r2;

        $i0 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.TreeBasedTable$MergingIterator$1: int compare(com.mycila.inject.internal.guava.collect.PeekingIterator,com.mycila.inject.internal.guava.collect.PeekingIterator)>($r4, $r3);

        return $i0;
    }
}
