public class org.apache.lucene.queryparser.flexible.standard.processors.StandardQueryNodeProcessorPipeline extends org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorPipeline
{

    public void <init>(org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler)
    {
        org.apache.lucene.queryparser.flexible.standard.processors.TermRangeQueryNodeProcessor $r10;
        org.apache.lucene.queryparser.flexible.standard.processors.AllowLeadingWildcardProcessor $r11;
        org.apache.lucene.queryparser.flexible.standard.processors.RemoveEmptyNonLeafQueryNodeProcessor $r17;
        org.apache.lucene.queryparser.flexible.core.processors.NoChildOptimizationQueryNodeProcessor $r15;
        org.apache.lucene.queryparser.flexible.core.processors.RemoveDeletedQueryNodesProcessor $r16;
        org.apache.lucene.queryparser.flexible.standard.processors.BoostQueryNodeProcessor $r20;
        org.apache.lucene.queryparser.flexible.standard.processors.DefaultPhraseSlopQueryNodeProcessor $r19;
        org.apache.lucene.queryparser.flexible.standard.processors.NumericQueryNodeProcessor $r7;
        org.apache.lucene.queryparser.flexible.standard.processors.OpenRangeQueryNodeProcessor $r6;
        org.apache.lucene.queryparser.flexible.standard.processors.MatchAllDocsQueryNodeProcessor $r5;
        org.apache.lucene.queryparser.flexible.standard.processors.NumericRangeQueryNodeProcessor $r8;
        org.apache.lucene.queryparser.flexible.standard.processors.AnalyzerQueryNodeProcessor $r12;
        org.apache.lucene.queryparser.flexible.standard.processors.LowercaseExpandedTermsQueryNodeProcessor $r9;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler r1;
        org.apache.lucene.queryparser.flexible.standard.processors.FuzzyQueryNodeProcessor $r4;
        org.apache.lucene.queryparser.flexible.standard.processors.BooleanSingleChildOptimizationQueryNodeProcessor $r18;
        org.apache.lucene.queryparser.flexible.standard.processors.MultiTermRewriteMethodProcessor $r21;
        org.apache.lucene.queryparser.flexible.standard.processors.WildcardQueryNodeProcessor $r2;
        org.apache.lucene.queryparser.flexible.standard.processors.PhraseSlopQueryNodeProcessor $r13;
        org.apache.lucene.queryparser.flexible.standard.processors.MultiFieldQueryNodeProcessor $r3;
        org.apache.lucene.queryparser.flexible.standard.processors.StandardQueryNodeProcessorPipeline r0;
        org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor $r14;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.processors.StandardQueryNodeProcessorPipeline;

        r1 := @parameter0: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler;

        specialinvoke r0.<org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorPipeline: void <init>(org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler)>(r1);

        $r2 = new org.apache.lucene.queryparser.flexible.standard.processors.WildcardQueryNodeProcessor;

        specialinvoke $r2.<org.apache.lucene.queryparser.flexible.standard.processors.WildcardQueryNodeProcessor: void <init>()>();

        virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.processors.StandardQueryNodeProcessorPipeline: boolean add(org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessor)>($r2);

        $r3 = new org.apache.lucene.queryparser.flexible.standard.processors.MultiFieldQueryNodeProcessor;

        specialinvoke $r3.<org.apache.lucene.queryparser.flexible.standard.processors.MultiFieldQueryNodeProcessor: void <init>()>();

        virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.processors.StandardQueryNodeProcessorPipeline: boolean add(org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessor)>($r3);

        $r4 = new org.apache.lucene.queryparser.flexible.standard.processors.FuzzyQueryNodeProcessor;

        specialinvoke $r4.<org.apache.lucene.queryparser.flexible.standard.processors.FuzzyQueryNodeProcessor: void <init>()>();

        virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.processors.StandardQueryNodeProcessorPipeline: boolean add(org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessor)>($r4);

        $r5 = new org.apache.lucene.queryparser.flexible.standard.processors.MatchAllDocsQueryNodeProcessor;

        specialinvoke $r5.<org.apache.lucene.queryparser.flexible.standard.processors.MatchAllDocsQueryNodeProcessor: void <init>()>();

        virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.processors.StandardQueryNodeProcessorPipeline: boolean add(org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessor)>($r5);

        $r6 = new org.apache.lucene.queryparser.flexible.standard.processors.OpenRangeQueryNodeProcessor;

        specialinvoke $r6.<org.apache.lucene.queryparser.flexible.standard.processors.OpenRangeQueryNodeProcessor: void <init>()>();

        virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.processors.StandardQueryNodeProcessorPipeline: boolean add(org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessor)>($r6);

        $r7 = new org.apache.lucene.queryparser.flexible.standard.processors.NumericQueryNodeProcessor;

        specialinvoke $r7.<org.apache.lucene.queryparser.flexible.standard.processors.NumericQueryNodeProcessor: void <init>()>();

        virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.processors.StandardQueryNodeProcessorPipeline: boolean add(org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessor)>($r7);

        $r8 = new org.apache.lucene.queryparser.flexible.standard.processors.NumericRangeQueryNodeProcessor;

        specialinvoke $r8.<org.apache.lucene.queryparser.flexible.standard.processors.NumericRangeQueryNodeProcessor: void <init>()>();

        virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.processors.StandardQueryNodeProcessorPipeline: boolean add(org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessor)>($r8);

        $r9 = new org.apache.lucene.queryparser.flexible.standard.processors.LowercaseExpandedTermsQueryNodeProcessor;

        specialinvoke $r9.<org.apache.lucene.queryparser.flexible.standard.processors.LowercaseExpandedTermsQueryNodeProcessor: void <init>()>();

        virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.processors.StandardQueryNodeProcessorPipeline: boolean add(org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessor)>($r9);

        $r10 = new org.apache.lucene.queryparser.flexible.standard.processors.TermRangeQueryNodeProcessor;

        specialinvoke $r10.<org.apache.lucene.queryparser.flexible.standard.processors.TermRangeQueryNodeProcessor: void <init>()>();

        virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.processors.StandardQueryNodeProcessorPipeline: boolean add(org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessor)>($r10);

        $r11 = new org.apache.lucene.queryparser.flexible.standard.processors.AllowLeadingWildcardProcessor;

        specialinvoke $r11.<org.apache.lucene.queryparser.flexible.standard.processors.AllowLeadingWildcardProcessor: void <init>()>();

        virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.processors.StandardQueryNodeProcessorPipeline: boolean add(org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessor)>($r11);

        $r12 = new org.apache.lucene.queryparser.flexible.standard.processors.AnalyzerQueryNodeProcessor;

        specialinvoke $r12.<org.apache.lucene.queryparser.flexible.standard.processors.AnalyzerQueryNodeProcessor: void <init>()>();

        virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.processors.StandardQueryNodeProcessorPipeline: boolean add(org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessor)>($r12);

        $r13 = new org.apache.lucene.queryparser.flexible.standard.processors.PhraseSlopQueryNodeProcessor;

        specialinvoke $r13.<org.apache.lucene.queryparser.flexible.standard.processors.PhraseSlopQueryNodeProcessor: void <init>()>();

        virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.processors.StandardQueryNodeProcessorPipeline: boolean add(org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessor)>($r13);

        $r14 = new org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor;

        specialinvoke $r14.<org.apache.lucene.queryparser.flexible.standard.processors.BooleanQuery2ModifierNodeProcessor: void <init>()>();

        virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.processors.StandardQueryNodeProcessorPipeline: boolean add(org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessor)>($r14);

        $r15 = new org.apache.lucene.queryparser.flexible.core.processors.NoChildOptimizationQueryNodeProcessor;

        specialinvoke $r15.<org.apache.lucene.queryparser.flexible.core.processors.NoChildOptimizationQueryNodeProcessor: void <init>()>();

        virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.processors.StandardQueryNodeProcessorPipeline: boolean add(org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessor)>($r15);

        $r16 = new org.apache.lucene.queryparser.flexible.core.processors.RemoveDeletedQueryNodesProcessor;

        specialinvoke $r16.<org.apache.lucene.queryparser.flexible.core.processors.RemoveDeletedQueryNodesProcessor: void <init>()>();

        virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.processors.StandardQueryNodeProcessorPipeline: boolean add(org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessor)>($r16);

        $r17 = new org.apache.lucene.queryparser.flexible.standard.processors.RemoveEmptyNonLeafQueryNodeProcessor;

        specialinvoke $r17.<org.apache.lucene.queryparser.flexible.standard.processors.RemoveEmptyNonLeafQueryNodeProcessor: void <init>()>();

        virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.processors.StandardQueryNodeProcessorPipeline: boolean add(org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessor)>($r17);

        $r18 = new org.apache.lucene.queryparser.flexible.standard.processors.BooleanSingleChildOptimizationQueryNodeProcessor;

        specialinvoke $r18.<org.apache.lucene.queryparser.flexible.standard.processors.BooleanSingleChildOptimizationQueryNodeProcessor: void <init>()>();

        virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.processors.StandardQueryNodeProcessorPipeline: boolean add(org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessor)>($r18);

        $r19 = new org.apache.lucene.queryparser.flexible.standard.processors.DefaultPhraseSlopQueryNodeProcessor;

        specialinvoke $r19.<org.apache.lucene.queryparser.flexible.standard.processors.DefaultPhraseSlopQueryNodeProcessor: void <init>()>();

        virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.processors.StandardQueryNodeProcessorPipeline: boolean add(org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessor)>($r19);

        $r20 = new org.apache.lucene.queryparser.flexible.standard.processors.BoostQueryNodeProcessor;

        specialinvoke $r20.<org.apache.lucene.queryparser.flexible.standard.processors.BoostQueryNodeProcessor: void <init>()>();

        virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.processors.StandardQueryNodeProcessorPipeline: boolean add(org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessor)>($r20);

        $r21 = new org.apache.lucene.queryparser.flexible.standard.processors.MultiTermRewriteMethodProcessor;

        specialinvoke $r21.<org.apache.lucene.queryparser.flexible.standard.processors.MultiTermRewriteMethodProcessor: void <init>()>();

        virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.processors.StandardQueryNodeProcessorPipeline: boolean add(org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessor)>($r21);

        return;
    }
}
