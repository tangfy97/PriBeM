public class org.apache.batik.dom.svg.SAXSVGDocumentFactory extends org.apache.batik.dom.util.SAXDocumentFactory implements org.apache.batik.dom.svg.SVGDocumentFactory
{
    public static final java.lang.Object LOCK;
    public static final java.lang.String KEY_PUBLIC_IDS;
    public static final java.lang.String KEY_SKIPPABLE_PUBLIC_IDS;
    public static final java.lang.String KEY_SKIP_DTD;
    public static final java.lang.String KEY_SYSTEM_ID;
    protected static final java.lang.String DTDIDS;
    protected static final java.lang.String HTTP_CHARSET;
    protected static java.lang.String dtdids;
    protected static java.lang.String skippable_dtdids;
    protected static java.lang.String skip_dtd;
    protected static java.util.Properties dtdProps;
    static java.lang.Class class$org$apache$batik$dom$svg$SAXSVGDocumentFactory;

    public void <init>(java.lang.String)
    {
        org.apache.batik.dom.svg.SAXSVGDocumentFactory r0;
        java.lang.String r2;
        org.w3c.dom.DOMImplementation $r1;

        r0 := @this: org.apache.batik.dom.svg.SAXSVGDocumentFactory;

        r2 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.batik.dom.svg.SVGDOMImplementation: org.w3c.dom.DOMImplementation getDOMImplementation()>();

        specialinvoke r0.<org.apache.batik.dom.util.SAXDocumentFactory: void <init>(org.w3c.dom.DOMImplementation,java.lang.String)>($r1, r2);

        return;
    }

    public void <init>(java.lang.String, boolean)
    {
        org.apache.batik.dom.svg.SAXSVGDocumentFactory r0;
        java.lang.String r2;
        org.w3c.dom.DOMImplementation $r1;
        boolean z0;

        r0 := @this: org.apache.batik.dom.svg.SAXSVGDocumentFactory;

        r2 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r1 = staticinvoke <org.apache.batik.dom.svg.SVGDOMImplementation: org.w3c.dom.DOMImplementation getDOMImplementation()>();

        specialinvoke r0.<org.apache.batik.dom.util.SAXDocumentFactory: void <init>(org.w3c.dom.DOMImplementation,java.lang.String,boolean)>($r1, r2, z0);

        return;
    }

    public org.w3c.dom.svg.SVGDocument createSVGDocument(java.lang.String) throws java.io.IOException
    {
        org.apache.batik.dom.svg.SAXSVGDocumentFactory r0;
        org.w3c.dom.svg.SVGDocument $r3;
        org.w3c.dom.Document $r2;
        java.lang.String r1;

        r0 := @this: org.apache.batik.dom.svg.SAXSVGDocumentFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.batik.dom.svg.SAXSVGDocumentFactory: org.w3c.dom.Document createDocument(java.lang.String)>(r1);

        $r3 = (org.w3c.dom.svg.SVGDocument) $r2;

        return $r3;
    }

    public org.w3c.dom.svg.SVGDocument createSVGDocument(java.lang.String, java.io.InputStream) throws java.io.IOException
    {
        org.apache.batik.dom.svg.SAXSVGDocumentFactory r0;
        org.w3c.dom.svg.SVGDocument $r4;
        org.w3c.dom.Document $r3;
        java.lang.String r1;
        java.io.InputStream r2;

        r0 := @this: org.apache.batik.dom.svg.SAXSVGDocumentFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.InputStream;

        $r3 = virtualinvoke r0.<org.apache.batik.dom.svg.SAXSVGDocumentFactory: org.w3c.dom.Document createDocument(java.lang.String,java.io.InputStream)>(r1, r2);

        $r4 = (org.w3c.dom.svg.SVGDocument) $r3;

        return $r4;
    }

    public org.w3c.dom.svg.SVGDocument createSVGDocument(java.lang.String, java.io.Reader) throws java.io.IOException
    {
        org.apache.batik.dom.svg.SAXSVGDocumentFactory r0;
        org.w3c.dom.svg.SVGDocument $r4;
        org.w3c.dom.Document $r3;
        java.lang.String r1;
        java.io.Reader r2;

        r0 := @this: org.apache.batik.dom.svg.SAXSVGDocumentFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.Reader;

        $r3 = virtualinvoke r0.<org.apache.batik.dom.svg.SAXSVGDocumentFactory: org.w3c.dom.Document createDocument(java.lang.String,java.io.Reader)>(r1, r2);

        $r4 = (org.w3c.dom.svg.SVGDocument) $r3;

        return $r4;
    }

    public org.w3c.dom.Document createDocument(java.lang.String) throws java.io.IOException
    {
        org.apache.batik.dom.svg.SAXSVGDocumentFactory r6;
        java.lang.String[] $r2;
        org.w3c.dom.Document $r13;
        int $i0, $i1, $i2, $i3, i4, i5, i6, i7, $i9, $i11, $i13, $i15, $i17, $i19;
        java.lang.String r1, $r5, $r7, $r8, $r9, r10, r11, r12, $r15;
        boolean $z0;
        org.xml.sax.InputSource $r17;
        org.apache.batik.dom.svg.SVGOMDocument $r14;
        org.apache.batik.util.ParsedURL $r16;
        java.io.InputStream $r3;

        r6 := @this: org.apache.batik.dom.svg.SAXSVGDocumentFactory;

        r1 := @parameter0: java.lang.String;

        $r16 = new org.apache.batik.util.ParsedURL;

        specialinvoke $r16.<org.apache.batik.util.ParsedURL: void <init>(java.lang.String)>(r1);

        $r2 = <org.apache.batik.util.MimeTypeConstants: java.lang.String[] MIME_TYPES_SVG>;

        $r3 = virtualinvoke $r16.<org.apache.batik.util.ParsedURL: java.io.InputStream openStream(java.lang.String[])>($r2);

        $r17 = new org.xml.sax.InputSource;

        specialinvoke $r17.<org.xml.sax.InputSource: void <init>(java.io.InputStream)>($r3);

        $r5 = virtualinvoke $r16.<org.apache.batik.util.ParsedURL: java.lang.String getContentType()>();

        r10 = $r5;

        $i9 = (int) -1;

        i4 = $i9;

        if $r5 == null goto label1;

        $r9 = virtualinvoke $r5.<java.lang.String: java.lang.String toLowerCase()>();

        r10 = $r9;

        i4 = virtualinvoke $r9.<java.lang.String: int indexOf(java.lang.String)>("charset");

     label1:
        r11 = null;

        $i11 = (int) -1;

        if i4 == $i11 goto label6;

        $r7 = "charset";

        $i0 = virtualinvoke $r7.<java.lang.String: int length()>();

        i5 = i4 + $i0;

        $i1 = virtualinvoke r10.<java.lang.String: int indexOf(int,int)>(61, i5);

        $i13 = (int) -1;

        if $i1 == $i13 goto label6;

        i6 = $i1 + 1;

        $i2 = virtualinvoke r10.<java.lang.String: int indexOf(int,int)>(44, i6);

        i7 = $i2;

        $i3 = virtualinvoke r10.<java.lang.String: int indexOf(int,int)>(59, i6);

        $i15 = (int) -1;

        if $i3 == $i15 goto label3;

        if $i3 < $i2 goto label2;

        $i17 = (int) -1;

        if $i2 != $i17 goto label3;

     label2:
        i7 = $i3;

     label3:
        $i19 = (int) -1;

        if i7 == $i19 goto label4;

        r12 = virtualinvoke r10.<java.lang.String: java.lang.String substring(int,int)>(i6, i7);

        goto label5;

     label4:
        r12 = virtualinvoke r10.<java.lang.String: java.lang.String substring(int)>(i6);

     label5:
        $r8 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>();

        r11 = $r8;

        virtualinvoke $r17.<org.xml.sax.InputSource: void setEncoding(java.lang.String)>($r8);

     label6:
        virtualinvoke $r17.<org.xml.sax.InputSource: void setSystemId(java.lang.String)>(r1);

        $r13 = specialinvoke r6.<org.apache.batik.dom.util.SAXDocumentFactory: org.w3c.dom.Document createDocument(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.InputSource)>("http://www.w3.org/2000/svg", "svg", r1, $r17);

        $r14 = (org.apache.batik.dom.svg.SVGOMDocument) $r13;

        virtualinvoke $r14.<org.apache.batik.dom.svg.SVGOMDocument: void setParsedURL(org.apache.batik.util.ParsedURL)>($r16);

        virtualinvoke $r14.<org.apache.batik.dom.AbstractDocument: void setDocumentInputEncoding(java.lang.String)>(r11);

        $z0 = r6.<org.apache.batik.dom.util.SAXDocumentFactory: boolean isStandalone>;

        virtualinvoke $r14.<org.apache.batik.dom.AbstractDocument: void setXmlStandalone(boolean)>($z0);

        $r15 = r6.<org.apache.batik.dom.util.SAXDocumentFactory: java.lang.String xmlVersion>;

        virtualinvoke $r14.<org.apache.batik.dom.AbstractDocument: void setXmlVersion(java.lang.String)>($r15);

        return $r14;
    }

    public org.w3c.dom.Document createDocument(java.lang.String, java.io.InputStream) throws java.io.IOException
    {
        org.xml.sax.InputSource $r0;
        org.apache.batik.dom.svg.SAXSVGDocumentFactory r3;
        java.net.MalformedURLException $r9;
        org.apache.batik.dom.AbstractDocument $r8;
        java.io.IOException $r10;
        org.apache.batik.dom.svg.SVGOMDocument $r7;
        org.apache.batik.util.ParsedURL $r6;
        org.w3c.dom.Document $r4;
        java.lang.String r2, $r5, $r11;
        java.io.InputStream r1;
        boolean $z0;

        r3 := @this: org.apache.batik.dom.svg.SAXSVGDocumentFactory;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: java.io.InputStream;

        $r0 = new org.xml.sax.InputSource;

        specialinvoke $r0.<org.xml.sax.InputSource: void <init>(java.io.InputStream)>(r1);

        virtualinvoke $r0.<org.xml.sax.InputSource: void setSystemId(java.lang.String)>(r2);

     label1:
        $r4 = specialinvoke r3.<org.apache.batik.dom.util.SAXDocumentFactory: org.w3c.dom.Document createDocument(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.InputSource)>("http://www.w3.org/2000/svg", "svg", r2, $r0);

        if r2 == null goto label2;

        $r7 = (org.apache.batik.dom.svg.SVGOMDocument) $r4;

        $r6 = new org.apache.batik.util.ParsedURL;

        specialinvoke $r6.<org.apache.batik.util.ParsedURL: void <init>(java.lang.String)>(r2);

        virtualinvoke $r7.<org.apache.batik.dom.svg.SVGOMDocument: void setParsedURL(org.apache.batik.util.ParsedURL)>($r6);

     label2:
        $r8 = (org.apache.batik.dom.AbstractDocument) $r4;

        virtualinvoke $r8.<org.apache.batik.dom.AbstractDocument: void setDocumentURI(java.lang.String)>(r2);

        $z0 = r3.<org.apache.batik.dom.util.SAXDocumentFactory: boolean isStandalone>;

        virtualinvoke $r8.<org.apache.batik.dom.AbstractDocument: void setXmlStandalone(boolean)>($z0);

        $r5 = r3.<org.apache.batik.dom.util.SAXDocumentFactory: java.lang.String xmlVersion>;

        virtualinvoke $r8.<org.apache.batik.dom.AbstractDocument: void setXmlVersion(java.lang.String)>($r5);

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;

        $r10 = new java.io.IOException;

        $r11 = virtualinvoke $r9.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>($r11);

        throw $r10;

     label5:
        return $r4;

        catch java.net.MalformedURLException from label1 to label3 with label4;
    }

    public org.w3c.dom.Document createDocument(java.lang.String, java.io.Reader) throws java.io.IOException
    {
        org.xml.sax.InputSource $r0;
        org.apache.batik.dom.svg.SAXSVGDocumentFactory r3;
        java.net.MalformedURLException $r9;
        org.apache.batik.dom.AbstractDocument $r8;
        java.io.IOException $r10;
        java.io.Reader r1;
        org.apache.batik.dom.svg.SVGOMDocument $r7;
        org.apache.batik.util.ParsedURL $r6;
        org.w3c.dom.Document $r4;
        java.lang.String r2, $r5, $r11;
        boolean $z0;

        r3 := @this: org.apache.batik.dom.svg.SAXSVGDocumentFactory;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: java.io.Reader;

        $r0 = new org.xml.sax.InputSource;

        specialinvoke $r0.<org.xml.sax.InputSource: void <init>(java.io.Reader)>(r1);

        virtualinvoke $r0.<org.xml.sax.InputSource: void setSystemId(java.lang.String)>(r2);

     label1:
        $r4 = specialinvoke r3.<org.apache.batik.dom.util.SAXDocumentFactory: org.w3c.dom.Document createDocument(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.InputSource)>("http://www.w3.org/2000/svg", "svg", r2, $r0);

        if r2 == null goto label2;

        $r7 = (org.apache.batik.dom.svg.SVGOMDocument) $r4;

        $r6 = new org.apache.batik.util.ParsedURL;

        specialinvoke $r6.<org.apache.batik.util.ParsedURL: void <init>(java.lang.String)>(r2);

        virtualinvoke $r7.<org.apache.batik.dom.svg.SVGOMDocument: void setParsedURL(org.apache.batik.util.ParsedURL)>($r6);

     label2:
        $r8 = (org.apache.batik.dom.AbstractDocument) $r4;

        virtualinvoke $r8.<org.apache.batik.dom.AbstractDocument: void setDocumentURI(java.lang.String)>(r2);

        $z0 = r3.<org.apache.batik.dom.util.SAXDocumentFactory: boolean isStandalone>;

        virtualinvoke $r8.<org.apache.batik.dom.AbstractDocument: void setXmlStandalone(boolean)>($z0);

        $r5 = r3.<org.apache.batik.dom.util.SAXDocumentFactory: java.lang.String xmlVersion>;

        virtualinvoke $r8.<org.apache.batik.dom.AbstractDocument: void setXmlVersion(java.lang.String)>($r5);

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;

        $r10 = new java.io.IOException;

        $r11 = virtualinvoke $r9.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>($r11);

        throw $r10;

     label5:
        return $r4;

        catch java.net.MalformedURLException from label1 to label3 with label4;
    }

    public org.w3c.dom.Document createDocument(java.lang.String, java.lang.String, java.lang.String) throws java.io.IOException
    {
        org.apache.batik.dom.svg.SAXSVGDocumentFactory r5;
        java.lang.RuntimeException $r2;
        org.w3c.dom.Document $r7;
        java.lang.String r0, $r1, r3, $r4, r6;
        boolean $z0, $z1;

        r5 := @this: org.apache.batik.dom.svg.SAXSVGDocumentFactory;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r6 := @parameter2: java.lang.String;

        $r1 = "http://www.w3.org/2000/svg";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $r4 = "svg";

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z1 != 0 goto label2;

     label1:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Bad root element");

        throw $r2;

     label2:
        $r7 = virtualinvoke r5.<org.apache.batik.dom.svg.SAXSVGDocumentFactory: org.w3c.dom.Document createDocument(java.lang.String)>(r6);

        return $r7;
    }

    public org.w3c.dom.Document createDocument(java.lang.String, java.lang.String, java.lang.String, java.io.InputStream) throws java.io.IOException
    {
        org.apache.batik.dom.svg.SAXSVGDocumentFactory r5;
        java.lang.RuntimeException $r2;
        org.w3c.dom.Document $r8;
        java.lang.String r0, $r1, r3, $r4, r6;
        boolean $z0, $z1;
        java.io.InputStream r7;

        r5 := @this: org.apache.batik.dom.svg.SAXSVGDocumentFactory;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r6 := @parameter2: java.lang.String;

        r7 := @parameter3: java.io.InputStream;

        $r1 = "http://www.w3.org/2000/svg";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $r4 = "svg";

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z1 != 0 goto label2;

     label1:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Bad root element");

        throw $r2;

     label2:
        $r8 = virtualinvoke r5.<org.apache.batik.dom.svg.SAXSVGDocumentFactory: org.w3c.dom.Document createDocument(java.lang.String,java.io.InputStream)>(r6, r7);

        return $r8;
    }

    public org.w3c.dom.Document createDocument(java.lang.String, java.lang.String, java.lang.String, java.io.Reader) throws java.io.IOException
    {
        org.apache.batik.dom.svg.SAXSVGDocumentFactory r5;
        java.lang.RuntimeException $r2;
        java.io.Reader r7;
        org.w3c.dom.Document $r8;
        java.lang.String r0, $r1, r3, $r4, r6;
        boolean $z0, $z1;

        r5 := @this: org.apache.batik.dom.svg.SAXSVGDocumentFactory;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r6 := @parameter2: java.lang.String;

        r7 := @parameter3: java.io.Reader;

        $r1 = "http://www.w3.org/2000/svg";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $r4 = "svg";

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z1 != 0 goto label2;

     label1:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Bad root element");

        throw $r2;

     label2:
        $r8 = virtualinvoke r5.<org.apache.batik.dom.svg.SAXSVGDocumentFactory: org.w3c.dom.Document createDocument(java.lang.String,java.io.Reader)>(r6, r7);

        return $r8;
    }

    public org.w3c.dom.DOMImplementation getDOMImplementation(java.lang.String)
    {
        org.apache.batik.dom.svg.SAXSVGDocumentFactory r8;
        java.lang.RuntimeException $r1;
        java.lang.StringBuffer $r2, $r3, $r4, $r5;
        int $i0;
        java.lang.String r0, $r6;
        org.w3c.dom.DOMImplementation $r7, $r9;
        boolean $z0, $z1, $z2;

        r8 := @this: org.apache.batik.dom.svg.SAXSVGDocumentFactory;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 == 0 goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("1.0");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("1.1");

        if $z1 == 0 goto label2;

     label1:
        $r9 = staticinvoke <org.apache.batik.dom.svg.SVGDOMImplementation: org.w3c.dom.DOMImplementation getDOMImplementation()>();

        return $r9;

     label2:
        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("1.2");

        if $z2 == 0 goto label3;

        $r7 = staticinvoke <org.apache.batik.dom.svg12.SVG12DOMImplementation: org.w3c.dom.DOMImplementation getDOMImplementation()>();

        return $r7;

     label3:
        $r1 = new java.lang.RuntimeException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unsupport SVG version \'");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r6);

        throw $r1;
    }

    public void startDocument() throws org.xml.sax.SAXException
    {
        org.apache.batik.dom.svg.SAXSVGDocumentFactory r0;

        r0 := @this: org.apache.batik.dom.svg.SAXSVGDocumentFactory;

        specialinvoke r0.<org.apache.batik.dom.util.SAXDocumentFactory: void startDocument()>();

        return;
    }

    public org.xml.sax.InputSource resolveEntity(java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.apache.batik.dom.svg.SAXSVGDocumentFactory r5;
        java.net.URL $r17;
        boolean $z0, $z1;
        java.util.MissingResourceException $r33;
        org.xml.sax.SAXException $r42, $r47;
        java.lang.Throwable $r35;
        java.lang.StringBuffer $r9, $r11, $r45;
        int $i0, $i1, $i3, $i5;
        java.lang.String $r1, $r2, $r3, r4, $r6, $r10, $r12, $r13, $r14, $r18, $r19, $r22, $r24, $r26, $r28, r38;
        org.xml.sax.InputSource $r44, $r46;
        java.util.Properties $r0, $r8, $r23, $r25, $r27, $r32, $r41;
        java.io.IOException $r36;
        java.io.StringReader $r43;
        java.lang.Class $r16, $r30, $r40;
        java.lang.Object r39;
        java.io.InputStream $r31;

        r5 := @this: org.apache.batik.dom.svg.SAXSVGDocumentFactory;

        r4 := @parameter0: java.lang.String;

        r38 := @parameter1: java.lang.String;

     label01:
        r39 = <org.apache.batik.dom.svg.SAXSVGDocumentFactory: java.lang.Object LOCK>;

        entermonitor r39;

     label02:
        $r0 = <org.apache.batik.dom.svg.SAXSVGDocumentFactory: java.util.Properties dtdProps>;

        if $r0 != null goto label08;

        $r41 = new java.util.Properties;

        specialinvoke $r41.<java.util.Properties: void <init>()>();

        <org.apache.batik.dom.svg.SAXSVGDocumentFactory: java.util.Properties dtdProps> = $r41;

     label03:
        $r30 = <org.apache.batik.dom.svg.SAXSVGDocumentFactory: java.lang.Class class$org$apache$batik$dom$svg$SAXSVGDocumentFactory>;

        if $r30 != null goto label04;

        $r40 = staticinvoke <org.apache.batik.dom.svg.SAXSVGDocumentFactory: java.lang.Class class$(java.lang.String)>("org.apache.batik.dom.svg.SAXSVGDocumentFactory");

        <org.apache.batik.dom.svg.SAXSVGDocumentFactory: java.lang.Class class$org$apache$batik$dom$svg$SAXSVGDocumentFactory> = $r40;

        goto label05;

     label04:
        $r40 = <org.apache.batik.dom.svg.SAXSVGDocumentFactory: java.lang.Class class$org$apache$batik$dom$svg$SAXSVGDocumentFactory>;

     label05:
        $r31 = virtualinvoke $r40.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>("resources/dtdids.properties");

        $r32 = <org.apache.batik.dom.svg.SAXSVGDocumentFactory: java.util.Properties dtdProps>;

        virtualinvoke $r32.<java.util.Properties: void load(java.io.InputStream)>($r31);

     label06:
        goto label08;

     label07:
        $r36 := @caughtexception;

        $r42 = new org.xml.sax.SAXException;

        specialinvoke $r42.<org.xml.sax.SAXException: void <init>(java.lang.Exception)>($r36);

        throw $r42;

     label08:
        $r1 = <org.apache.batik.dom.svg.SAXSVGDocumentFactory: java.lang.String dtdids>;

        if $r1 != null goto label09;

        $r27 = <org.apache.batik.dom.svg.SAXSVGDocumentFactory: java.util.Properties dtdProps>;

        $r28 = virtualinvoke $r27.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("publicIds");

        <org.apache.batik.dom.svg.SAXSVGDocumentFactory: java.lang.String dtdids> = $r28;

     label09:
        $r2 = <org.apache.batik.dom.svg.SAXSVGDocumentFactory: java.lang.String skippable_dtdids>;

        if $r2 != null goto label10;

        $r25 = <org.apache.batik.dom.svg.SAXSVGDocumentFactory: java.util.Properties dtdProps>;

        $r26 = virtualinvoke $r25.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("skippablePublicIds");

        <org.apache.batik.dom.svg.SAXSVGDocumentFactory: java.lang.String skippable_dtdids> = $r26;

     label10:
        $r3 = <org.apache.batik.dom.svg.SAXSVGDocumentFactory: java.lang.String skip_dtd>;

        if $r3 != null goto label11;

        $r23 = <org.apache.batik.dom.svg.SAXSVGDocumentFactory: java.util.Properties dtdProps>;

        $r24 = virtualinvoke $r23.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("skipDTD");

        <org.apache.batik.dom.svg.SAXSVGDocumentFactory: java.lang.String skip_dtd> = $r24;

     label11:
        exitmonitor r39;

        goto label13;

     label12:
        $r35 := @caughtexception;

        exitmonitor r39;

        throw $r35;

     label13:
        if r4 != null goto label14;

        return null;

     label14:
        $z0 = r5.<org.apache.batik.dom.util.SAXDocumentFactory: boolean isValidating>;

        if $z0 != 0 goto label15;

        $r19 = <org.apache.batik.dom.svg.SAXSVGDocumentFactory: java.lang.String skippable_dtdids>;

        $i1 = virtualinvoke $r19.<java.lang.String: int indexOf(java.lang.String)>(r4);

        $i3 = (int) -1;

        if $i1 == $i3 goto label15;

        $r44 = new org.xml.sax.InputSource;

        $r43 = new java.io.StringReader;

        $r22 = <org.apache.batik.dom.svg.SAXSVGDocumentFactory: java.lang.String skip_dtd>;

        specialinvoke $r43.<java.io.StringReader: void <init>(java.lang.String)>($r22);

        specialinvoke $r44.<org.xml.sax.InputSource: void <init>(java.io.Reader)>($r43);

        return $r44;

     label15:
        $r6 = <org.apache.batik.dom.svg.SAXSVGDocumentFactory: java.lang.String dtdids>;

        $i0 = virtualinvoke $r6.<java.lang.String: int indexOf(java.lang.String)>(r4);

        $i5 = (int) -1;

        if $i0 == $i5 goto label16;

        $r8 = <org.apache.batik.dom.svg.SAXSVGDocumentFactory: java.util.Properties dtdProps>;

        $r45 = new java.lang.StringBuffer;

        specialinvoke $r45.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("systemId.");

        $r10 = virtualinvoke r4.<java.lang.String: java.lang.String replace(char,char)>(32, 95);

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        $r13 = virtualinvoke $r8.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($r12);

        if $r13 == null goto label16;

        $r14 = "";

        $z1 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z1 != 0 goto label16;

        $r46 = new org.xml.sax.InputSource;

        $r16 = virtualinvoke r5.<java.lang.Object: java.lang.Class getClass()>();

        $r17 = virtualinvoke $r16.<java.lang.Class: java.net.URL getResource(java.lang.String)>($r13);

        $r18 = virtualinvoke $r17.<java.net.URL: java.lang.String toString()>();

        specialinvoke $r46.<org.xml.sax.InputSource: void <init>(java.lang.String)>($r18);

        return $r46;

     label16:
        goto label18;

     label17:
        $r33 := @caughtexception;

        $r47 = new org.xml.sax.SAXException;

        specialinvoke $r47.<org.xml.sax.SAXException: void <init>(java.lang.Exception)>($r33);

        throw $r47;

     label18:
        return null;

        catch java.io.IOException from label03 to label06 with label07;
        catch java.lang.Throwable from label02 to label12 with label12;
        catch java.util.MissingResourceException from label01 to label16 with label17;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        return $r1;

     label2:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label2;
    }

    static void <clinit>()
    {
        java.lang.Object $r0;

        <org.apache.batik.dom.svg.SAXSVGDocumentFactory: java.lang.String HTTP_CHARSET> = "charset";

        <org.apache.batik.dom.svg.SAXSVGDocumentFactory: java.lang.String DTDIDS> = "org.apache.batik.dom.svg.resources.dtdids";

        <org.apache.batik.dom.svg.SAXSVGDocumentFactory: java.lang.String KEY_SYSTEM_ID> = "systemId.";

        <org.apache.batik.dom.svg.SAXSVGDocumentFactory: java.lang.String KEY_SKIP_DTD> = "skipDTD";

        <org.apache.batik.dom.svg.SAXSVGDocumentFactory: java.lang.String KEY_SKIPPABLE_PUBLIC_IDS> = "skippablePublicIds";

        <org.apache.batik.dom.svg.SAXSVGDocumentFactory: java.lang.String KEY_PUBLIC_IDS> = "publicIds";

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <org.apache.batik.dom.svg.SAXSVGDocumentFactory: java.lang.Object LOCK> = $r0;

        return;
    }
}
