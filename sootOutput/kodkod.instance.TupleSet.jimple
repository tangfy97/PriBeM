public final class kodkod.instance.TupleSet extends java.util.AbstractSet implements java.lang.Cloneable
{
    private final kodkod.instance.Universe universe;
    private final int arity;
    private final kodkod.util.ints.IntSet tuples;
    private kodkod.util.ints.IntSet indexView;

    void <init>(kodkod.instance.Universe, int)
    {
        kodkod.util.ints.IntSet $r3;
        int i0, $i1;
        kodkod.instance.Universe r1;
        java.lang.IllegalArgumentException $r4;
        kodkod.instance.TupleFactory $r2;
        kodkod.instance.TupleSet r0;

        r0 := @this: kodkod.instance.TupleSet;

        r1 := @parameter0: kodkod.instance.Universe;

        i0 := @parameter1: int;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        r0.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet indexView> = null;

        if i0 >= 1 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("arity < 1");

        throw $r4;

     label1:
        $r2 = virtualinvoke r1.<kodkod.instance.Universe: kodkod.instance.TupleFactory factory()>();

        virtualinvoke $r2.<kodkod.instance.TupleFactory: void checkCapacity(int)>(i0);

        r0.<kodkod.instance.TupleSet: kodkod.instance.Universe universe> = r1;

        r0.<kodkod.instance.TupleSet: int arity> = i0;

        $i1 = virtualinvoke r0.<kodkod.instance.TupleSet: int capacity()>();

        $r3 = staticinvoke <kodkod.util.ints.Ints: kodkod.util.ints.IntSet bestSet(int)>($i1);

        r0.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet tuples> = $r3;

        return;
    }

    void <init>(kodkod.instance.Universe, int, int, int)
    {
        kodkod.util.ints.IntSet $r2;
        int i0, i1, $i2, $i3, i4, i5;
        kodkod.instance.Universe r1;
        kodkod.instance.TupleSet r0;

        r0 := @this: kodkod.instance.TupleSet;

        r1 := @parameter0: kodkod.instance.Universe;

        i0 := @parameter1: int;

        i4 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<kodkod.instance.TupleSet: void <init>(kodkod.instance.Universe,int)>(r1, i0);

        $i2 = virtualinvoke r0.<kodkod.instance.TupleSet: int capacity()>();

        $i3 = $i2 - 1;

        specialinvoke r0.<kodkod.instance.TupleSet: void checkRange(int,int,int)>(i1, 0, $i3);

        specialinvoke r0.<kodkod.instance.TupleSet: void checkRange(int,int,int)>(i4, 0, i1);

        i5 = i4;

        goto label2;

     label1:
        $r2 = r0.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet tuples>;

        interfaceinvoke $r2.<kodkod.util.ints.IntSet: boolean add(int)>(i5);

        i5 = i5 + 1;

     label2:
        if i5 <= i1 goto label1;

        return;
    }

    void <init>(kodkod.instance.Universe, int, kodkod.util.ints.IntSet)
    {
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        kodkod.instance.Universe r1;
        java.lang.String $r6, $r13;
        kodkod.instance.TupleFactory $r2;
        kodkod.instance.TupleSet r0;
        boolean $z0;
        kodkod.util.ints.IntSet r3;
        java.lang.IllegalArgumentException $r4, $r14;
        java.lang.StringBuilder $r5, $r7, $r8, $r9, $r10, $r11, $r12;

        r0 := @this: kodkod.instance.TupleSet;

        r1 := @parameter0: kodkod.instance.Universe;

        i0 := @parameter1: int;

        r3 := @parameter2: kodkod.util.ints.IntSet;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        r0.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet indexView> = null;

        if i0 >= 1 goto label1;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("arity < 1");

        throw $r14;

     label1:
        $r2 = virtualinvoke r1.<kodkod.instance.Universe: kodkod.instance.TupleFactory factory()>();

        virtualinvoke $r2.<kodkod.instance.TupleFactory: void checkCapacity(int)>(i0);

        r0.<kodkod.instance.TupleSet: kodkod.instance.Universe universe> = r1;

        r0.<kodkod.instance.TupleSet: int arity> = i0;

        $z0 = interfaceinvoke r3.<kodkod.util.ints.IntSet: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $i1 = interfaceinvoke r3.<kodkod.util.ints.IntSet: int min()>();

        if $i1 < 0 goto label2;

        $i5 = interfaceinvoke r3.<kodkod.util.ints.IntSet: int max()>();

        $i6 = virtualinvoke r0.<kodkod.instance.TupleSet: int capacity()>();

        if $i5 < $i6 goto label3;

     label2:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        $i2 = interfaceinvoke r3.<kodkod.util.ints.IntSet: int min()>();

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i2);

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>($r6);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<0 || ");

        $i3 = interfaceinvoke r3.<kodkod.util.ints.IntSet: int max()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">=");

        $i4 = virtualinvoke r1.<kodkod.instance.Universe: int size()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("^");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r4;

     label3:
        r0.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet tuples> = r3;

        return;
    }

    private void <init>(kodkod.instance.TupleSet)
    {
        kodkod.util.ints.IntSet $r3, $r4;
        java.lang.CloneNotSupportedException $r5;
        int $i0;
        java.lang.InternalError $r6;
        kodkod.instance.Universe $r2;
        kodkod.instance.TupleSet r0, r1;

        r0 := @this: kodkod.instance.TupleSet;

        r1 := @parameter0: kodkod.instance.TupleSet;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        r0.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet indexView> = null;

        $r2 = r1.<kodkod.instance.TupleSet: kodkod.instance.Universe universe>;

        r0.<kodkod.instance.TupleSet: kodkod.instance.Universe universe> = $r2;

        $i0 = r1.<kodkod.instance.TupleSet: int arity>;

        r0.<kodkod.instance.TupleSet: int arity> = $i0;

     label1:
        $r3 = r1.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet tuples>;

        $r4 = interfaceinvoke $r3.<kodkod.util.ints.IntSet: kodkod.util.ints.IntSet clone()>();

        r0.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet tuples> = $r4;

        goto label3;

     label2:
        $r5 := @caughtexception;

        $r6 = new java.lang.InternalError;

        specialinvoke $r6.<java.lang.InternalError: void <init>()>();

        throw $r6;

     label3:
        r0.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet indexView> = null;

        return;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label2;
    }

    private final void checkRange(int, int, int)
    {
        java.lang.IndexOutOfBoundsException $r0;
        int i0, i1, i2;
        java.lang.StringBuilder $r1, $r3, $r4, $r5, $r6, $r7, $r8;
        java.lang.String $r2, $r9;
        kodkod.instance.TupleSet r10;

        r10 := @this: kodkod.instance.TupleSet;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        if i0 < i1 goto label1;

        if i0 <= i2 goto label2;

     label1:
        $r0 = new java.lang.IndexOutOfBoundsException;

        $r1 = new java.lang.StringBuilder;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" !in ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("..");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r9);

        throw $r0;

     label2:
        return;
    }

    public final int capacity()
    {
        int $i0, $i1, $i2;
        kodkod.instance.Universe $r1;
        kodkod.instance.TupleSet r0;
        double $d0, $d1, $d2;

        r0 := @this: kodkod.instance.TupleSet;

        $r1 = r0.<kodkod.instance.TupleSet: kodkod.instance.Universe universe>;

        $i0 = virtualinvoke $r1.<kodkod.instance.Universe: int size()>();

        $d1 = (double) $i0;

        $i1 = r0.<kodkod.instance.TupleSet: int arity>;

        $d0 = (double) $i1;

        $d2 = staticinvoke <java.lang.StrictMath: double pow(double,double)>($d1, $d0);

        $i2 = (int) $d2;

        return $i2;
    }

    public kodkod.instance.Universe universe()
    {
        kodkod.instance.Universe $r1;
        kodkod.instance.TupleSet r0;

        r0 := @this: kodkod.instance.TupleSet;

        $r1 = r0.<kodkod.instance.TupleSet: kodkod.instance.Universe universe>;

        return $r1;
    }

    public int arity()
    {
        int $i0;
        kodkod.instance.TupleSet r0;

        r0 := @this: kodkod.instance.TupleSet;

        $i0 = r0.<kodkod.instance.TupleSet: int arity>;

        return $i0;
    }

    public kodkod.util.ints.IntSet indexView()
    {
        kodkod.util.ints.IntSet $r1, $r2, $r3, $r4;
        kodkod.instance.TupleSet r0;

        r0 := @this: kodkod.instance.TupleSet;

        $r1 = r0.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet indexView>;

        if $r1 != null goto label1;

        $r3 = r0.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet tuples>;

        $r4 = staticinvoke <kodkod.util.ints.Ints: kodkod.util.ints.IntSet unmodifiableIntSet(kodkod.util.ints.IntSet)>($r3);

        r0.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet indexView> = $r4;

     label1:
        $r2 = r0.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet indexView>;

        return $r2;
    }

    public kodkod.instance.TupleSet unmodifiableView()
    {
        kodkod.util.ints.IntSet $r3;
        int $i0;
        kodkod.instance.Universe $r2;
        kodkod.instance.TupleSet $r0, r1;

        r1 := @this: kodkod.instance.TupleSet;

        $r0 = new kodkod.instance.TupleSet;

        $r2 = r1.<kodkod.instance.TupleSet: kodkod.instance.Universe universe>;

        $i0 = r1.<kodkod.instance.TupleSet: int arity>;

        $r3 = virtualinvoke r1.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet indexView()>();

        specialinvoke $r0.<kodkod.instance.TupleSet: void <init>(kodkod.instance.Universe,int,kodkod.util.ints.IntSet)>($r2, $i0, $r3);

        return $r0;
    }

    public kodkod.instance.TupleSet product(kodkod.instance.TupleSet)
    {
        kodkod.util.ints.IntIterator $r8, $r10;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, i7, $i8, $i9;
        kodkod.instance.Universe $r1, $r3, $r5, $r6;
        kodkod.instance.TupleSet r0, r2, $r4;
        boolean $z0, $z1, $z2, $z3;
        double $d0, $d1, $d2;
        kodkod.util.ints.IntSet $r7, $r9, $r11;
        java.lang.IllegalArgumentException $r12;

        r2 := @this: kodkod.instance.TupleSet;

        r0 := @parameter0: kodkod.instance.TupleSet;

        $r1 = virtualinvoke r0.<kodkod.instance.TupleSet: kodkod.instance.Universe universe()>();

        $r3 = r2.<kodkod.instance.TupleSet: kodkod.instance.Universe universe>;

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("s.universe != this.universe");

        throw $r12;

     label1:
        $r4 = new kodkod.instance.TupleSet;

        $r5 = r2.<kodkod.instance.TupleSet: kodkod.instance.Universe universe>;

        $i0 = r2.<kodkod.instance.TupleSet: int arity>;

        $i1 = virtualinvoke r0.<kodkod.instance.TupleSet: int arity()>();

        $i2 = $i0 + $i1;

        specialinvoke $r4.<kodkod.instance.TupleSet: void <init>(kodkod.instance.Universe,int)>($r5, $i2);

        $z1 = virtualinvoke r0.<kodkod.instance.TupleSet: boolean isEmpty()>();

        if $z1 != 0 goto label6;

        $r6 = r2.<kodkod.instance.TupleSet: kodkod.instance.Universe universe>;

        $i3 = virtualinvoke $r6.<kodkod.instance.Universe: int size()>();

        $d1 = (double) $i3;

        $i4 = r0.<kodkod.instance.TupleSet: int arity>;

        $d0 = (double) $i4;

        $d2 = staticinvoke <java.lang.StrictMath: double pow(double,double)>($d1, $d0);

        i5 = (int) $d2;

        $r7 = r2.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet tuples>;

        $r8 = interfaceinvoke $r7.<kodkod.util.ints.IntSet: kodkod.util.ints.IntIterator iterator()>();

        goto label5;

     label2:
        $i6 = interfaceinvoke $r8.<kodkod.util.ints.IntIterator: int next()>();

        i7 = i5 * $i6;

        $r9 = r0.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet tuples>;

        $r10 = interfaceinvoke $r9.<kodkod.util.ints.IntSet: kodkod.util.ints.IntIterator iterator()>();

        goto label4;

     label3:
        $r11 = $r4.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet tuples>;

        $i8 = interfaceinvoke $r10.<kodkod.util.ints.IntIterator: int next()>();

        $i9 = i7 + $i8;

        interfaceinvoke $r11.<kodkod.util.ints.IntSet: boolean add(int)>($i9);

     label4:
        $z3 = interfaceinvoke $r10.<kodkod.util.ints.IntIterator: boolean hasNext()>();

        if $z3 != 0 goto label3;

     label5:
        $z2 = interfaceinvoke $r8.<kodkod.util.ints.IntIterator: boolean hasNext()>();

        if $z2 != 0 goto label2;

     label6:
        return $r4;
    }

    public kodkod.instance.TupleSet project(int)
    {
        kodkod.util.ints.IntIterator $r7;
        int i0, $i1, $i2, $i3, $i4, $i5;
        kodkod.instance.Universe $r2, $r4, $r9;
        kodkod.instance.TupleFactory $r5;
        kodkod.instance.TupleSet r1, $r8;
        boolean $z0;
        kodkod.util.ints.IntSet $r3, $r6;
        java.lang.IllegalArgumentException $r0;

        r1 := @this: kodkod.instance.TupleSet;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i1 = r1.<kodkod.instance.TupleSet: int arity>;

        if i0 < $i1 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("dimension < 0 || dimension >= this.arity");

        throw $r0;

     label2:
        $r2 = r1.<kodkod.instance.TupleSet: kodkod.instance.Universe universe>;

        $i2 = virtualinvoke $r2.<kodkod.instance.Universe: int size()>();

        $r3 = staticinvoke <kodkod.util.ints.Ints: kodkod.util.ints.IntSet bestSet(int)>($i2);

        $r4 = r1.<kodkod.instance.TupleSet: kodkod.instance.Universe universe>;

        $r5 = virtualinvoke $r4.<kodkod.instance.Universe: kodkod.instance.TupleFactory factory()>();

        $r6 = r1.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet tuples>;

        $r7 = interfaceinvoke $r6.<kodkod.util.ints.IntSet: kodkod.util.ints.IntIterator iterator()>();

        goto label4;

     label3:
        $i3 = interfaceinvoke $r7.<kodkod.util.ints.IntIterator: int next()>();

        $i4 = r1.<kodkod.instance.TupleSet: int arity>;

        $i5 = virtualinvoke $r5.<kodkod.instance.TupleFactory: int project(int,int,int)>($i3, $i4, i0);

        interfaceinvoke $r3.<kodkod.util.ints.IntSet: boolean add(int)>($i5);

     label4:
        $z0 = interfaceinvoke $r7.<kodkod.util.ints.IntIterator: boolean hasNext()>();

        if $z0 != 0 goto label3;

        $r8 = new kodkod.instance.TupleSet;

        $r9 = r1.<kodkod.instance.TupleSet: kodkod.instance.Universe universe>;

        specialinvoke $r8.<kodkod.instance.TupleSet: void <init>(kodkod.instance.Universe,int,kodkod.util.ints.IntSet)>($r9, 1, $r3);

        return $r8;
    }

    public kodkod.instance.TupleSet clone()
    {
        kodkod.instance.TupleSet $r0, r1;

        r1 := @this: kodkod.instance.TupleSet;

        $r0 = new kodkod.instance.TupleSet;

        specialinvoke $r0.<kodkod.instance.TupleSet: void <init>(kodkod.instance.TupleSet)>(r1);

        return $r0;
    }

    public java.util.Iterator iterator()
    {
        kodkod.instance.TupleSet$1 $r0;
        kodkod.instance.TupleSet r1;

        r1 := @this: kodkod.instance.TupleSet;

        $r0 = new kodkod.instance.TupleSet$1;

        specialinvoke $r0.<kodkod.instance.TupleSet$1: void <init>(kodkod.instance.TupleSet)>(r1);

        return $r0;
    }

    private final int extractIndex(kodkod.instance.Tuple)
    {
        kodkod.instance.Tuple r0;
        java.lang.IllegalArgumentException $r2;
        int $i0, $i1, $i2;
        kodkod.instance.Universe $r3, $r4;
        kodkod.instance.TupleSet r1;
        boolean $z0;

        r1 := @this: kodkod.instance.TupleSet;

        r0 := @parameter0: kodkod.instance.Tuple;

        $i0 = virtualinvoke r0.<kodkod.instance.Tuple: int arity()>();

        $i1 = r1.<kodkod.instance.TupleSet: int arity>;

        if $i0 != $i1 goto label1;

        $r3 = virtualinvoke r0.<kodkod.instance.Tuple: kodkod.instance.Universe universe()>();

        $r4 = r1.<kodkod.instance.TupleSet: kodkod.instance.Universe universe>;

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("t.arity != this.arity || t.universe != this.universe");

        throw $r2;

     label2:
        $i2 = virtualinvoke r0.<kodkod.instance.Tuple: int index()>();

        return $i2;
    }

    public boolean contains(java.lang.Object)
    {
        kodkod.instance.Tuple $r2;
        kodkod.util.ints.IntSet $r3;
        int $i0;
        java.lang.Object r1;
        kodkod.instance.TupleSet r0;
        boolean $z0;

        r0 := @this: kodkod.instance.TupleSet;

        r1 := @parameter0: java.lang.Object;

        $r3 = r0.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet tuples>;

        $r2 = (kodkod.instance.Tuple) r1;

        $i0 = specialinvoke r0.<kodkod.instance.TupleSet: int extractIndex(kodkod.instance.Tuple)>($r2);

        $z0 = interfaceinvoke $r3.<kodkod.util.ints.IntSet: boolean contains(int)>($i0);

        return $z0;
    }

    public int size()
    {
        int $i0;
        kodkod.instance.TupleSet r0;
        kodkod.util.ints.IntSet $r1;

        r0 := @this: kodkod.instance.TupleSet;

        $r1 = r0.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet tuples>;

        $i0 = interfaceinvoke $r1.<kodkod.util.ints.IntSet: int size()>();

        return $i0;
    }

    public void clear()
    {
        kodkod.instance.TupleSet r0;
        kodkod.util.ints.IntSet $r1;

        r0 := @this: kodkod.instance.TupleSet;

        $r1 = r0.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet tuples>;

        interfaceinvoke $r1.<kodkod.util.ints.IntSet: void clear()>();

        return;
    }

    public boolean add(kodkod.instance.Tuple)
    {
        kodkod.instance.Tuple r1;
        kodkod.util.ints.IntSet $r2;
        int $i0;
        kodkod.instance.TupleSet r0;
        boolean $z0;

        r0 := @this: kodkod.instance.TupleSet;

        r1 := @parameter0: kodkod.instance.Tuple;

        $r2 = r0.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet tuples>;

        $i0 = specialinvoke r0.<kodkod.instance.TupleSet: int extractIndex(kodkod.instance.Tuple)>(r1);

        $z0 = interfaceinvoke $r2.<kodkod.util.ints.IntSet: boolean add(int)>($i0);

        return $z0;
    }

    public boolean remove(java.lang.Object)
    {
        kodkod.instance.Tuple $r2;
        kodkod.util.ints.IntSet $r3;
        int $i0;
        java.lang.Object r1;
        kodkod.instance.TupleSet r0;
        boolean $z0;

        r0 := @this: kodkod.instance.TupleSet;

        r1 := @parameter0: java.lang.Object;

        $r3 = r0.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet tuples>;

        $r2 = (kodkod.instance.Tuple) r1;

        $i0 = specialinvoke r0.<kodkod.instance.TupleSet: int extractIndex(kodkod.instance.Tuple)>($r2);

        $z0 = interfaceinvoke $r3.<kodkod.util.ints.IntSet: boolean remove(int)>($i0);

        return $z0;
    }

    private kodkod.util.ints.IntSet extractTuples(java.util.Collection)
    {
        java.util.Collection r0;
        kodkod.util.ints.IntSet $r6;
        java.lang.IllegalArgumentException $r5;
        int $i0, $i1;
        kodkod.instance.Universe $r3, $r4;
        boolean $z0, $z1;
        kodkod.instance.TupleSet r1, r2;

        r2 := @this: kodkod.instance.TupleSet;

        r0 := @parameter0: java.util.Collection;

        $z0 = r0 instanceof kodkod.instance.TupleSet;

        if $z0 == 0 goto label4;

        r1 = (kodkod.instance.TupleSet) r0;

        $i0 = r2.<kodkod.instance.TupleSet: int arity>;

        $i1 = virtualinvoke r1.<kodkod.instance.TupleSet: int arity()>();

        if $i0 == $i1 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("this.arity!=c.arity");

        throw $r5;

     label1:
        $r3 = r2.<kodkod.instance.TupleSet: kodkod.instance.Universe universe>;

        $r4 = virtualinvoke r1.<kodkod.instance.TupleSet: kodkod.instance.Universe universe()>();

        $z1 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label2;

        $r6 = r1.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet tuples>;

        goto label3;

     label2:
        $r6 = null;

     label3:
        return $r6;

     label4:
        return null;
    }

    public boolean containsAll(java.util.Collection)
    {
        java.util.Collection r1;
        kodkod.util.ints.IntSet $r2, $r3;
        kodkod.instance.TupleSet r0;
        boolean $z0;

        r0 := @this: kodkod.instance.TupleSet;

        r1 := @parameter0: java.util.Collection;

        $r2 = specialinvoke r0.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet extractTuples(java.util.Collection)>(r1);

        if $r2 != null goto label1;

        $z0 = specialinvoke r0.<java.util.AbstractSet: boolean containsAll(java.util.Collection)>(r1);

        goto label2;

     label1:
        $r3 = r0.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet tuples>;

        $z0 = interfaceinvoke $r3.<kodkod.util.ints.IntSet: boolean containsAll(kodkod.util.ints.IntCollection)>($r2);

     label2:
        return $z0;
    }

    public boolean addAll(java.util.Collection)
    {
        java.util.Collection r1;
        kodkod.util.ints.IntSet $r2, $r3;
        kodkod.instance.TupleSet r0;
        boolean $z0;

        r0 := @this: kodkod.instance.TupleSet;

        r1 := @parameter0: java.util.Collection;

        $r2 = specialinvoke r0.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet extractTuples(java.util.Collection)>(r1);

        if $r2 != null goto label1;

        $z0 = specialinvoke r0.<java.util.AbstractSet: boolean addAll(java.util.Collection)>(r1);

        goto label2;

     label1:
        $r3 = r0.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet tuples>;

        $z0 = interfaceinvoke $r3.<kodkod.util.ints.IntSet: boolean addAll(kodkod.util.ints.IntCollection)>($r2);

     label2:
        return $z0;
    }

    public boolean removeAll(java.util.Collection)
    {
        java.util.Collection r1;
        kodkod.util.ints.IntSet $r2, $r3;
        kodkod.instance.TupleSet r0;
        boolean $z0;

        r0 := @this: kodkod.instance.TupleSet;

        r1 := @parameter0: java.util.Collection;

        $r2 = specialinvoke r0.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet extractTuples(java.util.Collection)>(r1);

        if $r2 != null goto label1;

        $z0 = specialinvoke r0.<java.util.AbstractSet: boolean removeAll(java.util.Collection)>(r1);

        goto label2;

     label1:
        $r3 = r0.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet tuples>;

        $z0 = interfaceinvoke $r3.<kodkod.util.ints.IntSet: boolean removeAll(kodkod.util.ints.IntCollection)>($r2);

     label2:
        return $z0;
    }

    public boolean retainAll(java.util.Collection)
    {
        java.util.Collection r1;
        kodkod.util.ints.IntSet $r2, $r3;
        kodkod.instance.TupleSet r0;
        boolean $z0;

        r0 := @this: kodkod.instance.TupleSet;

        r1 := @parameter0: java.util.Collection;

        $r2 = specialinvoke r0.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet extractTuples(java.util.Collection)>(r1);

        if $r2 != null goto label1;

        $z0 = specialinvoke r0.<java.util.AbstractSet: boolean retainAll(java.util.Collection)>(r1);

        goto label2;

     label1:
        $r3 = r0.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet tuples>;

        $z0 = interfaceinvoke $r3.<kodkod.util.ints.IntSet: boolean retainAll(kodkod.util.ints.IntCollection)>($r2);

     label2:
        return $z0;
    }

    public boolean equals(java.lang.Object)
    {
        kodkod.util.ints.IntSet $r5, $r6;
        int $i0, $i1;
        java.lang.Object r1;
        kodkod.instance.Universe $r3, $r4;
        kodkod.instance.TupleSet r0, r2;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: kodkod.instance.TupleSet;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof kodkod.instance.TupleSet;

        if $z0 == 0 goto label3;

        r2 = (kodkod.instance.TupleSet) r1;

        $i1 = r0.<kodkod.instance.TupleSet: int arity>;

        $i0 = r2.<kodkod.instance.TupleSet: int arity>;

        if $i1 != $i0 goto label2;

        $r4 = r0.<kodkod.instance.TupleSet: kodkod.instance.Universe universe>;

        $r3 = r2.<kodkod.instance.TupleSet: kodkod.instance.Universe universe>;

        $z2 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z2 == 0 goto label2;

        $r6 = r0.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet tuples>;

        $r5 = r2.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet tuples>;

        $z3 = interfaceinvoke $r6.<kodkod.util.ints.IntSet: boolean equals(java.lang.Object)>($r5);

        if $z3 == 0 goto label2;

        return 1;

     label2:
        return 0;

     label3:
        $z1 = specialinvoke r0.<java.util.AbstractSet: boolean equals(java.lang.Object)>(r1);

        return $z1;
    }

    public int hashCode()
    {
        int $i0;
        kodkod.instance.TupleSet r0;
        kodkod.util.ints.IntSet $r1;

        r0 := @this: kodkod.instance.TupleSet;

        $r1 = r0.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet tuples>;

        $i0 = interfaceinvoke $r1.<kodkod.util.ints.IntSet: int hashCode()>();

        return $i0;
    }

    protected volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        kodkod.instance.TupleSet r0, $r1;

        r0 := @this: kodkod.instance.TupleSet;

        $r1 = virtualinvoke r0.<kodkod.instance.TupleSet: kodkod.instance.TupleSet clone()>();

        return $r1;
    }

    public volatile boolean add(java.lang.Object)
    {
        kodkod.instance.Tuple $r2;
        java.lang.Object r1;
        kodkod.instance.TupleSet r0;
        boolean $z0;

        r0 := @this: kodkod.instance.TupleSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = (kodkod.instance.Tuple) r1;

        $z0 = virtualinvoke r0.<kodkod.instance.TupleSet: boolean add(kodkod.instance.Tuple)>($r2);

        return $z0;
    }

    static kodkod.util.ints.IntSet access$2(kodkod.instance.TupleSet)
    {
        kodkod.instance.TupleSet r0;
        kodkod.util.ints.IntSet $r1;

        r0 := @parameter0: kodkod.instance.TupleSet;

        $r1 = r0.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet tuples>;

        return $r1;
    }

    static kodkod.instance.Universe access$3(kodkod.instance.TupleSet)
    {
        kodkod.instance.Universe $r1;
        kodkod.instance.TupleSet r0;

        r0 := @parameter0: kodkod.instance.TupleSet;

        $r1 = r0.<kodkod.instance.TupleSet: kodkod.instance.Universe universe>;

        return $r1;
    }

    static int access$4(kodkod.instance.TupleSet)
    {
        int $i0;
        kodkod.instance.TupleSet r0;

        r0 := @parameter0: kodkod.instance.TupleSet;

        $i0 = r0.<kodkod.instance.TupleSet: int arity>;

        return $i0;
    }
}
