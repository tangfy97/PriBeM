public class org.apache.commons.collections.list.NodeCachingLinkedList extends org.apache.commons.collections.list.AbstractLinkedList implements java.io.Serializable
{
    private static final long serialVersionUID;
    protected static final int DEFAULT_MAXIMUM_CACHE_SIZE;
    protected transient org.apache.commons.collections.list.AbstractLinkedList$Node firstCachedNode;
    protected transient int cacheSize;
    protected int maximumCacheSize;

    public void <init>()
    {
        org.apache.commons.collections.list.NodeCachingLinkedList r0;

        r0 := @this: org.apache.commons.collections.list.NodeCachingLinkedList;

        specialinvoke r0.<org.apache.commons.collections.list.NodeCachingLinkedList: void <init>(int)>(20);

        return;
    }

    public void <init>(java.util.Collection)
    {
        org.apache.commons.collections.list.NodeCachingLinkedList r0;
        java.util.Collection r1;

        r0 := @this: org.apache.commons.collections.list.NodeCachingLinkedList;

        r1 := @parameter0: java.util.Collection;

        specialinvoke r0.<org.apache.commons.collections.list.AbstractLinkedList: void <init>(java.util.Collection)>(r1);

        r0.<org.apache.commons.collections.list.NodeCachingLinkedList: int maximumCacheSize> = 20;

        return;
    }

    public void <init>(int)
    {
        int i0;
        org.apache.commons.collections.list.NodeCachingLinkedList r0;

        r0 := @this: org.apache.commons.collections.list.NodeCachingLinkedList;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.commons.collections.list.AbstractLinkedList: void <init>()>();

        r0.<org.apache.commons.collections.list.NodeCachingLinkedList: int maximumCacheSize> = i0;

        virtualinvoke r0.<org.apache.commons.collections.list.NodeCachingLinkedList: void init()>();

        return;
    }

    protected int getMaximumCacheSize()
    {
        int $i0;
        org.apache.commons.collections.list.NodeCachingLinkedList r0;

        r0 := @this: org.apache.commons.collections.list.NodeCachingLinkedList;

        $i0 = r0.<org.apache.commons.collections.list.NodeCachingLinkedList: int maximumCacheSize>;

        return $i0;
    }

    protected void setMaximumCacheSize(int)
    {
        int i0;
        org.apache.commons.collections.list.NodeCachingLinkedList r0;

        r0 := @this: org.apache.commons.collections.list.NodeCachingLinkedList;

        i0 := @parameter0: int;

        r0.<org.apache.commons.collections.list.NodeCachingLinkedList: int maximumCacheSize> = i0;

        virtualinvoke r0.<org.apache.commons.collections.list.NodeCachingLinkedList: void shrinkCacheToMaximumSize()>();

        return;
    }

    protected void shrinkCacheToMaximumSize()
    {
        int $i0, $i1;
        org.apache.commons.collections.list.NodeCachingLinkedList r0;

        r0 := @this: org.apache.commons.collections.list.NodeCachingLinkedList;

     label1:
        $i1 = r0.<org.apache.commons.collections.list.NodeCachingLinkedList: int cacheSize>;

        $i0 = r0.<org.apache.commons.collections.list.NodeCachingLinkedList: int maximumCacheSize>;

        if $i1 <= $i0 goto label2;

        virtualinvoke r0.<org.apache.commons.collections.list.NodeCachingLinkedList: org.apache.commons.collections.list.AbstractLinkedList$Node getNodeFromCache()>();

        goto label1;

     label2:
        return;
    }

    protected org.apache.commons.collections.list.AbstractLinkedList$Node getNodeFromCache()
    {
        org.apache.commons.collections.list.AbstractLinkedList$Node r1, $r2;
        int $i0, $i1, $i2;
        org.apache.commons.collections.list.NodeCachingLinkedList r0;

        r0 := @this: org.apache.commons.collections.list.NodeCachingLinkedList;

        $i0 = r0.<org.apache.commons.collections.list.NodeCachingLinkedList: int cacheSize>;

        if $i0 != 0 goto label1;

        return null;

     label1:
        r1 = r0.<org.apache.commons.collections.list.NodeCachingLinkedList: org.apache.commons.collections.list.AbstractLinkedList$Node firstCachedNode>;

        $r2 = r1.<org.apache.commons.collections.list.AbstractLinkedList$Node: org.apache.commons.collections.list.AbstractLinkedList$Node next>;

        r0.<org.apache.commons.collections.list.NodeCachingLinkedList: org.apache.commons.collections.list.AbstractLinkedList$Node firstCachedNode> = $r2;

        r1.<org.apache.commons.collections.list.AbstractLinkedList$Node: org.apache.commons.collections.list.AbstractLinkedList$Node next> = null;

        $i1 = r0.<org.apache.commons.collections.list.NodeCachingLinkedList: int cacheSize>;

        $i2 = $i1 - 1;

        r0.<org.apache.commons.collections.list.NodeCachingLinkedList: int cacheSize> = $i2;

        return r1;
    }

    protected boolean isCacheFull()
    {
        int $i0, $i1;
        org.apache.commons.collections.list.NodeCachingLinkedList r0;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.list.NodeCachingLinkedList;

        $i1 = r0.<org.apache.commons.collections.list.NodeCachingLinkedList: int cacheSize>;

        $i0 = r0.<org.apache.commons.collections.list.NodeCachingLinkedList: int maximumCacheSize>;

        if $i1 < $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected void addNodeToCache(org.apache.commons.collections.list.AbstractLinkedList$Node)
    {
        org.apache.commons.collections.list.AbstractLinkedList$Node r1, r2;
        int $i0, $i1;
        org.apache.commons.collections.list.NodeCachingLinkedList r0;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.list.NodeCachingLinkedList;

        r2 := @parameter0: org.apache.commons.collections.list.AbstractLinkedList$Node;

        $z0 = virtualinvoke r0.<org.apache.commons.collections.list.NodeCachingLinkedList: boolean isCacheFull()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        r1 = r0.<org.apache.commons.collections.list.NodeCachingLinkedList: org.apache.commons.collections.list.AbstractLinkedList$Node firstCachedNode>;

        r2.<org.apache.commons.collections.list.AbstractLinkedList$Node: org.apache.commons.collections.list.AbstractLinkedList$Node previous> = null;

        r2.<org.apache.commons.collections.list.AbstractLinkedList$Node: org.apache.commons.collections.list.AbstractLinkedList$Node next> = r1;

        virtualinvoke r2.<org.apache.commons.collections.list.AbstractLinkedList$Node: void setValue(java.lang.Object)>(null);

        r0.<org.apache.commons.collections.list.NodeCachingLinkedList: org.apache.commons.collections.list.AbstractLinkedList$Node firstCachedNode> = r2;

        $i0 = r0.<org.apache.commons.collections.list.NodeCachingLinkedList: int cacheSize>;

        $i1 = $i0 + 1;

        r0.<org.apache.commons.collections.list.NodeCachingLinkedList: int cacheSize> = $i1;

        return;
    }

    protected org.apache.commons.collections.list.AbstractLinkedList$Node createNode(java.lang.Object)
    {
        org.apache.commons.collections.list.AbstractLinkedList$Node $r1, $r3;
        java.lang.Object r2;
        org.apache.commons.collections.list.NodeCachingLinkedList r0;

        r0 := @this: org.apache.commons.collections.list.NodeCachingLinkedList;

        r2 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<org.apache.commons.collections.list.NodeCachingLinkedList: org.apache.commons.collections.list.AbstractLinkedList$Node getNodeFromCache()>();

        if $r1 != null goto label1;

        $r3 = specialinvoke r0.<org.apache.commons.collections.list.AbstractLinkedList: org.apache.commons.collections.list.AbstractLinkedList$Node createNode(java.lang.Object)>(r2);

        return $r3;

     label1:
        virtualinvoke $r1.<org.apache.commons.collections.list.AbstractLinkedList$Node: void setValue(java.lang.Object)>(r2);

        return $r1;
    }

    protected void removeNode(org.apache.commons.collections.list.AbstractLinkedList$Node)
    {
        org.apache.commons.collections.list.AbstractLinkedList$Node r1;
        org.apache.commons.collections.list.NodeCachingLinkedList r0;

        r0 := @this: org.apache.commons.collections.list.NodeCachingLinkedList;

        r1 := @parameter0: org.apache.commons.collections.list.AbstractLinkedList$Node;

        specialinvoke r0.<org.apache.commons.collections.list.AbstractLinkedList: void removeNode(org.apache.commons.collections.list.AbstractLinkedList$Node)>(r1);

        virtualinvoke r0.<org.apache.commons.collections.list.NodeCachingLinkedList: void addNodeToCache(org.apache.commons.collections.list.AbstractLinkedList$Node)>(r1);

        return;
    }

    protected void removeAllNodes()
    {
        org.apache.commons.collections.list.AbstractLinkedList$Node $r1, r2, r3;
        int $i0, $i1, $i2, $i3, $i4, i5;
        org.apache.commons.collections.list.NodeCachingLinkedList r0;

        r0 := @this: org.apache.commons.collections.list.NodeCachingLinkedList;

        $i3 = r0.<org.apache.commons.collections.list.NodeCachingLinkedList: int size>;

        $i1 = r0.<org.apache.commons.collections.list.NodeCachingLinkedList: int maximumCacheSize>;

        $i0 = r0.<org.apache.commons.collections.list.NodeCachingLinkedList: int cacheSize>;

        $i2 = $i1 - $i0;

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>($i3, $i2);

        $r1 = r0.<org.apache.commons.collections.list.NodeCachingLinkedList: org.apache.commons.collections.list.AbstractLinkedList$Node header>;

        r3 = $r1.<org.apache.commons.collections.list.AbstractLinkedList$Node: org.apache.commons.collections.list.AbstractLinkedList$Node next>;

        i5 = 0;

     label1:
        if i5 >= $i4 goto label2;

        r2 = r3;

        r3 = r3.<org.apache.commons.collections.list.AbstractLinkedList$Node: org.apache.commons.collections.list.AbstractLinkedList$Node next>;

        virtualinvoke r0.<org.apache.commons.collections.list.NodeCachingLinkedList: void addNodeToCache(org.apache.commons.collections.list.AbstractLinkedList$Node)>(r2);

        i5 = i5 + 1;

        goto label1;

     label2:
        specialinvoke r0.<org.apache.commons.collections.list.AbstractLinkedList: void removeAllNodes()>();

        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        org.apache.commons.collections.list.NodeCachingLinkedList r1;

        r1 := @this: org.apache.commons.collections.list.NodeCachingLinkedList;

        r0 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r0.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        virtualinvoke r1.<org.apache.commons.collections.list.NodeCachingLinkedList: void doWriteObject(java.io.ObjectOutputStream)>(r0);

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream r0;
        org.apache.commons.collections.list.NodeCachingLinkedList r1;

        r1 := @this: org.apache.commons.collections.list.NodeCachingLinkedList;

        r0 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r0.<java.io.ObjectInputStream: void defaultReadObject()>();

        virtualinvoke r1.<org.apache.commons.collections.list.NodeCachingLinkedList: void doReadObject(java.io.ObjectInputStream)>(r0);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.commons.collections.list.NodeCachingLinkedList: int DEFAULT_MAXIMUM_CACHE_SIZE> = 20;

        <org.apache.commons.collections.list.NodeCachingLinkedList: long serialVersionUID> = 6897789178562232073L;

        return;
    }
}
