public class org.jdesktop.swingx.JXLabel extends javax.swing.JLabel
{
    public static final double NORMAL;
    public static final double INVERTED;
    public static final double VERTICAL_LEFT;
    public static final double VERTICAL_RIGHT;
    private double textRotation;
    private boolean painting;
    private org.jdesktop.swingx.painter.Painter foregroundPainter;
    private org.jdesktop.swingx.painter.Painter backgroundPainter;
    private boolean multiLine;
    private int pWidth;
    private int pHeight;
    private boolean dontIgnoreRepaint;
    private int occupiedWidth;
    private static final java.lang.String oldRendererKey;
    private boolean paintBorderInsets;
    private int maxLineSpan;
    public boolean painted;
    private org.jdesktop.swingx.JXLabel$TextAlignment textAlignment;

    public void <init>()
    {
        int $i1;
        org.jdesktop.swingx.JXLabel$TextAlignment $r1;
        org.jdesktop.swingx.JXLabel r0;

        r0 := @this: org.jdesktop.swingx.JXLabel;

        specialinvoke r0.<javax.swing.JLabel: void <init>()>();

        r0.<org.jdesktop.swingx.JXLabel: double textRotation> = 0.0;

        r0.<org.jdesktop.swingx.JXLabel: boolean painting> = 0;

        r0.<org.jdesktop.swingx.JXLabel: boolean dontIgnoreRepaint> = 0;

        r0.<org.jdesktop.swingx.JXLabel: boolean paintBorderInsets> = 1;

        $i1 = (int) -1;

        r0.<org.jdesktop.swingx.JXLabel: int maxLineSpan> = $i1;

        $r1 = <org.jdesktop.swingx.JXLabel$TextAlignment: org.jdesktop.swingx.JXLabel$TextAlignment LEFT>;

        r0.<org.jdesktop.swingx.JXLabel: org.jdesktop.swingx.JXLabel$TextAlignment textAlignment> = $r1;

        specialinvoke r0.<org.jdesktop.swingx.JXLabel: void initPainterSupport()>();

        specialinvoke r0.<org.jdesktop.swingx.JXLabel: void initLineWrapSupport()>();

        return;
    }

    public void <init>(javax.swing.Icon)
    {
        org.jdesktop.swingx.JXLabel$TextAlignment $r2;
        org.jdesktop.swingx.JXLabel r0;
        int $i1;
        javax.swing.Icon r1;

        r0 := @this: org.jdesktop.swingx.JXLabel;

        r1 := @parameter0: javax.swing.Icon;

        specialinvoke r0.<javax.swing.JLabel: void <init>(javax.swing.Icon)>(r1);

        r0.<org.jdesktop.swingx.JXLabel: double textRotation> = 0.0;

        r0.<org.jdesktop.swingx.JXLabel: boolean painting> = 0;

        r0.<org.jdesktop.swingx.JXLabel: boolean dontIgnoreRepaint> = 0;

        r0.<org.jdesktop.swingx.JXLabel: boolean paintBorderInsets> = 1;

        $i1 = (int) -1;

        r0.<org.jdesktop.swingx.JXLabel: int maxLineSpan> = $i1;

        $r2 = <org.jdesktop.swingx.JXLabel$TextAlignment: org.jdesktop.swingx.JXLabel$TextAlignment LEFT>;

        r0.<org.jdesktop.swingx.JXLabel: org.jdesktop.swingx.JXLabel$TextAlignment textAlignment> = $r2;

        specialinvoke r0.<org.jdesktop.swingx.JXLabel: void initPainterSupport()>();

        specialinvoke r0.<org.jdesktop.swingx.JXLabel: void initLineWrapSupport()>();

        return;
    }

    public void <init>(javax.swing.Icon, int)
    {
        org.jdesktop.swingx.JXLabel$TextAlignment $r2;
        org.jdesktop.swingx.JXLabel r0;
        int i0, $i2;
        javax.swing.Icon r1;

        r0 := @this: org.jdesktop.swingx.JXLabel;

        r1 := @parameter0: javax.swing.Icon;

        i0 := @parameter1: int;

        specialinvoke r0.<javax.swing.JLabel: void <init>(javax.swing.Icon,int)>(r1, i0);

        r0.<org.jdesktop.swingx.JXLabel: double textRotation> = 0.0;

        r0.<org.jdesktop.swingx.JXLabel: boolean painting> = 0;

        r0.<org.jdesktop.swingx.JXLabel: boolean dontIgnoreRepaint> = 0;

        r0.<org.jdesktop.swingx.JXLabel: boolean paintBorderInsets> = 1;

        $i2 = (int) -1;

        r0.<org.jdesktop.swingx.JXLabel: int maxLineSpan> = $i2;

        $r2 = <org.jdesktop.swingx.JXLabel$TextAlignment: org.jdesktop.swingx.JXLabel$TextAlignment LEFT>;

        r0.<org.jdesktop.swingx.JXLabel: org.jdesktop.swingx.JXLabel$TextAlignment textAlignment> = $r2;

        specialinvoke r0.<org.jdesktop.swingx.JXLabel: void initPainterSupport()>();

        specialinvoke r0.<org.jdesktop.swingx.JXLabel: void initLineWrapSupport()>();

        return;
    }

    public void <init>(java.lang.String)
    {
        org.jdesktop.swingx.JXLabel$TextAlignment $r2;
        org.jdesktop.swingx.JXLabel r0;
        int $i1;
        java.lang.String r1;

        r0 := @this: org.jdesktop.swingx.JXLabel;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<javax.swing.JLabel: void <init>(java.lang.String)>(r1);

        r0.<org.jdesktop.swingx.JXLabel: double textRotation> = 0.0;

        r0.<org.jdesktop.swingx.JXLabel: boolean painting> = 0;

        r0.<org.jdesktop.swingx.JXLabel: boolean dontIgnoreRepaint> = 0;

        r0.<org.jdesktop.swingx.JXLabel: boolean paintBorderInsets> = 1;

        $i1 = (int) -1;

        r0.<org.jdesktop.swingx.JXLabel: int maxLineSpan> = $i1;

        $r2 = <org.jdesktop.swingx.JXLabel$TextAlignment: org.jdesktop.swingx.JXLabel$TextAlignment LEFT>;

        r0.<org.jdesktop.swingx.JXLabel: org.jdesktop.swingx.JXLabel$TextAlignment textAlignment> = $r2;

        specialinvoke r0.<org.jdesktop.swingx.JXLabel: void initPainterSupport()>();

        specialinvoke r0.<org.jdesktop.swingx.JXLabel: void initLineWrapSupport()>();

        return;
    }

    public void <init>(java.lang.String, javax.swing.Icon, int)
    {
        org.jdesktop.swingx.JXLabel$TextAlignment $r3;
        org.jdesktop.swingx.JXLabel r0;
        int i0, $i2;
        javax.swing.Icon r2;
        java.lang.String r1;

        r0 := @this: org.jdesktop.swingx.JXLabel;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: javax.swing.Icon;

        i0 := @parameter2: int;

        specialinvoke r0.<javax.swing.JLabel: void <init>(java.lang.String,javax.swing.Icon,int)>(r1, r2, i0);

        r0.<org.jdesktop.swingx.JXLabel: double textRotation> = 0.0;

        r0.<org.jdesktop.swingx.JXLabel: boolean painting> = 0;

        r0.<org.jdesktop.swingx.JXLabel: boolean dontIgnoreRepaint> = 0;

        r0.<org.jdesktop.swingx.JXLabel: boolean paintBorderInsets> = 1;

        $i2 = (int) -1;

        r0.<org.jdesktop.swingx.JXLabel: int maxLineSpan> = $i2;

        $r3 = <org.jdesktop.swingx.JXLabel$TextAlignment: org.jdesktop.swingx.JXLabel$TextAlignment LEFT>;

        r0.<org.jdesktop.swingx.JXLabel: org.jdesktop.swingx.JXLabel$TextAlignment textAlignment> = $r3;

        specialinvoke r0.<org.jdesktop.swingx.JXLabel: void initPainterSupport()>();

        specialinvoke r0.<org.jdesktop.swingx.JXLabel: void initLineWrapSupport()>();

        return;
    }

    public void <init>(java.lang.String, int)
    {
        org.jdesktop.swingx.JXLabel$TextAlignment $r2;
        org.jdesktop.swingx.JXLabel r0;
        int i0, $i2;
        java.lang.String r1;

        r0 := @this: org.jdesktop.swingx.JXLabel;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<javax.swing.JLabel: void <init>(java.lang.String,int)>(r1, i0);

        r0.<org.jdesktop.swingx.JXLabel: double textRotation> = 0.0;

        r0.<org.jdesktop.swingx.JXLabel: boolean painting> = 0;

        r0.<org.jdesktop.swingx.JXLabel: boolean dontIgnoreRepaint> = 0;

        r0.<org.jdesktop.swingx.JXLabel: boolean paintBorderInsets> = 1;

        $i2 = (int) -1;

        r0.<org.jdesktop.swingx.JXLabel: int maxLineSpan> = $i2;

        $r2 = <org.jdesktop.swingx.JXLabel$TextAlignment: org.jdesktop.swingx.JXLabel$TextAlignment LEFT>;

        r0.<org.jdesktop.swingx.JXLabel: org.jdesktop.swingx.JXLabel$TextAlignment textAlignment> = $r2;

        specialinvoke r0.<org.jdesktop.swingx.JXLabel: void initPainterSupport()>();

        specialinvoke r0.<org.jdesktop.swingx.JXLabel: void initLineWrapSupport()>();

        return;
    }

    private void initPainterSupport()
    {
        org.jdesktop.swingx.painter.Painter $r2;
        org.jdesktop.swingx.JXLabel r0;
        org.jdesktop.swingx.painter.AbstractPainter $r3;
        org.jdesktop.swingx.JXLabel$1 $r1;

        r0 := @this: org.jdesktop.swingx.JXLabel;

        $r1 = new org.jdesktop.swingx.JXLabel$1;

        specialinvoke $r1.<org.jdesktop.swingx.JXLabel$1: void <init>(org.jdesktop.swingx.JXLabel)>(r0);

        r0.<org.jdesktop.swingx.JXLabel: org.jdesktop.swingx.painter.Painter foregroundPainter> = $r1;

        $r2 = r0.<org.jdesktop.swingx.JXLabel: org.jdesktop.swingx.painter.Painter foregroundPainter>;

        $r3 = (org.jdesktop.swingx.painter.AbstractPainter) $r2;

        virtualinvoke $r3.<org.jdesktop.swingx.painter.AbstractPainter: void setAntialiasing(boolean)>(0);

        return;
    }

    private void initLineWrapSupport()
    {
        org.jdesktop.swingx.JXLabel$MultiLineSupport $r1;
        org.jdesktop.swingx.JXLabel r0;
        org.jdesktop.swingx.JXLabel$2 $r2;

        r0 := @this: org.jdesktop.swingx.JXLabel;

        $r1 = new org.jdesktop.swingx.JXLabel$MultiLineSupport;

        specialinvoke $r1.<org.jdesktop.swingx.JXLabel$MultiLineSupport: void <init>()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXLabel: void addPropertyChangeListener(java.beans.PropertyChangeListener)>($r1);

        $r2 = new org.jdesktop.swingx.JXLabel$2;

        specialinvoke $r2.<org.jdesktop.swingx.JXLabel$2: void <init>(org.jdesktop.swingx.JXLabel)>(r0);

        virtualinvoke r0.<org.jdesktop.swingx.JXLabel: void addHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)>($r2);

        return;
    }

    public final org.jdesktop.swingx.painter.Painter getForegroundPainter()
    {
        org.jdesktop.swingx.painter.Painter $r1;
        org.jdesktop.swingx.JXLabel r0;

        r0 := @this: org.jdesktop.swingx.JXLabel;

        $r1 = r0.<org.jdesktop.swingx.JXLabel: org.jdesktop.swingx.painter.Painter foregroundPainter>;

        return $r1;
    }

    public void reshape(int, int, int, int)
    {
        java.awt.Rectangle $r1, $r3;
        org.jdesktop.swingx.JXLabel r0;
        int $i0, i1, i2, i3, $i4, $i5, $i6, i7;
        boolean $z0, $z1;
        float $f0, $f1;
        javax.swing.text.View $r4;
        java.lang.Object $r2;

        r0 := @this: org.jdesktop.swingx.JXLabel;

        i1 := @parameter0: int;

        i2 := @parameter1: int;

        i7 := @parameter2: int;

        i3 := @parameter3: int;

        $i0 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: int getHeight()>();

        specialinvoke r0.<javax.swing.JLabel: void reshape(int,int,int,int)>(i1, i2, i7, i3);

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: boolean isLineWrap()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        if $i0 != 0 goto label2;

        return;

     label2:
        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: java.awt.Rectangle getVisibleRect()>();

        $i4 = $r1.<java.awt.Rectangle: int width>;

        if i7 <= $i4 goto label3;

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: java.awt.Rectangle getVisibleRect()>();

        i7 = $r3.<java.awt.Rectangle: int width>;

     label3:
        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: java.lang.Object getClientProperty(java.lang.Object)>("html");

        $r4 = (javax.swing.text.View) $r2;

        if $r4 == null goto label4;

        $z1 = $r4 instanceof org.jdesktop.swingx.JXLabel$Renderer;

        if $z1 == 0 goto label4;

        $i5 = r0.<org.jdesktop.swingx.JXLabel: int occupiedWidth>;

        $i6 = i7 - $i5;

        $f1 = (float) $i6;

        $f0 = (float) i3;

        virtualinvoke $r4.<javax.swing.text.View: void setSize(float,float)>($f1, $f0);

     label4:
        return;
    }

    public void setForegroundPainter(org.jdesktop.swingx.painter.Painter)
    {
        org.jdesktop.swingx.painter.Painter $r1, r2, $r3;
        org.jdesktop.swingx.JXLabel r0;

        r0 := @this: org.jdesktop.swingx.JXLabel;

        r2 := @parameter0: org.jdesktop.swingx.painter.Painter;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: org.jdesktop.swingx.painter.Painter getForegroundPainter()>();

        if r2 != null goto label1;

        specialinvoke r0.<org.jdesktop.swingx.JXLabel: void initPainterSupport()>();

        goto label2;

     label1:
        r0.<org.jdesktop.swingx.JXLabel: org.jdesktop.swingx.painter.Painter foregroundPainter> = r2;

     label2:
        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: org.jdesktop.swingx.painter.Painter getForegroundPainter()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXLabel: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("foregroundPainter", $r1, $r3);

        virtualinvoke r0.<org.jdesktop.swingx.JXLabel: void repaint()>();

        return;
    }

    public void setBackgroundPainter(org.jdesktop.swingx.painter.Painter)
    {
        org.jdesktop.swingx.painter.Painter $r1, r2, $r3;
        org.jdesktop.swingx.JXLabel r0;

        r0 := @this: org.jdesktop.swingx.JXLabel;

        r2 := @parameter0: org.jdesktop.swingx.painter.Painter;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: org.jdesktop.swingx.painter.Painter getBackgroundPainter()>();

        r0.<org.jdesktop.swingx.JXLabel: org.jdesktop.swingx.painter.Painter backgroundPainter> = r2;

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: org.jdesktop.swingx.painter.Painter getBackgroundPainter()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXLabel: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("backgroundPainter", $r1, $r3);

        virtualinvoke r0.<org.jdesktop.swingx.JXLabel: void repaint()>();

        return;
    }

    public final org.jdesktop.swingx.painter.Painter getBackgroundPainter()
    {
        org.jdesktop.swingx.painter.Painter $r1;
        org.jdesktop.swingx.JXLabel r0;

        r0 := @this: org.jdesktop.swingx.JXLabel;

        $r1 = r0.<org.jdesktop.swingx.JXLabel: org.jdesktop.swingx.painter.Painter backgroundPainter>;

        return $r1;
    }

    public double getTextRotation()
    {
        org.jdesktop.swingx.JXLabel r0;
        double $d0;

        r0 := @this: org.jdesktop.swingx.JXLabel;

        $d0 = r0.<org.jdesktop.swingx.JXLabel: double textRotation>;

        return $d0;
    }

    public java.awt.Dimension getPreferredSize()
    {
        org.jdesktop.swingx.JXLabel r0;
        javax.swing.border.Border $r11;
        byte $b0, $b99;
        java.awt.Container $r8;
        java.awt.Insets $r3, $r12;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, i111, $i112, $i113, i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, i142, $i143, i144, $i145, $i146, $i147, $i148, $i149, $i150, $i151, $i152, $i153;
        java.lang.Object $r16;
        javax.swing.text.View $r2, $r15, r17;
        javax.swing.JPanel r18;
        java.lang.String $r7, $r13, $r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.awt.Font $r10;
        java.awt.Dimension $r1, $r21;
        float $f0, $f1, $f2, $f3, $f4;
        java.awt.Rectangle $r6, $r19, $r20;
        double $d0, $d1;

        r0 := @this: org.jdesktop.swingx.JXLabel;

        $r1 = specialinvoke r0.<javax.swing.JLabel: java.awt.Dimension getPreferredSize()>();

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: boolean isPreferredSizeSet()>();

        if $z0 == 0 goto label01;

        return $r1;

     label01:
        $d0 = r0.<org.jdesktop.swingx.JXLabel: double textRotation>;

        $b0 = $d0 cmpl 0.0;

        if $b0 == 0 goto label02;

        $d1 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: double getTextRotation()>();

        $i109 = staticinvoke <org.jdesktop.swingx.JXLabel: int rotateWidth(java.awt.Dimension,double)>($r1, $d1);

        $i110 = staticinvoke <org.jdesktop.swingx.JXLabel: int rotateHeight(java.awt.Dimension,double)>($r1, $d1);

        virtualinvoke $r1.<java.awt.Dimension: void setSize(int,int)>($i109, $i110);

        goto label31;

     label02:
        $r2 = specialinvoke r0.<org.jdesktop.swingx.JXLabel: javax.swing.text.View getWrappingView()>();

        r17 = $r2;

        if $r2 != null goto label04;

        $z3 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: boolean isLineWrap()>();

        if $z3 == 0 goto label03;

        $r14 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: java.lang.String getText()>();

        $z4 = staticinvoke <org.jdesktop.swingx.JXLabel$MultiLineSupport: boolean access$100(java.lang.String)>($r14);

        if $z4 != 0 goto label03;

        virtualinvoke r0.<org.jdesktop.swingx.JXLabel: org.jdesktop.swingx.JXLabel$MultiLineSupport getMultiLineSupport()>();

        $r15 = staticinvoke <org.jdesktop.swingx.JXLabel$MultiLineSupport: javax.swing.text.View createView(org.jdesktop.swingx.JXLabel)>(r0);

        virtualinvoke r0.<org.jdesktop.swingx.JXLabel: void putClientProperty(java.lang.Object,java.lang.Object)>("html", $r15);

        $r16 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: java.lang.Object getClientProperty(java.lang.Object)>("html");

        r17 = (javax.swing.text.View) $r16;

        goto label04;

     label03:
        return $r1;

     label04:
        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: java.awt.Insets getInsets()>();

        $i2 = $r3.<java.awt.Insets: int left>;

        $i1 = $r3.<java.awt.Insets: int right>;

        $i107 = $i2 + $i1;

        $i4 = $r3.<java.awt.Insets: int top>;

        $i3 = $r3.<java.awt.Insets: int bottom>;

        $i108 = $i4 + $i3;

        $r19 = new java.awt.Rectangle;

        specialinvoke $r19.<java.awt.Rectangle: void <init>()>();

        $r20 = new java.awt.Rectangle;

        specialinvoke $r20.<java.awt.Rectangle: void <init>()>();

        $r19.<java.awt.Rectangle: int height> = 0;

        $r19.<java.awt.Rectangle: int width> = 0;

        $r19.<java.awt.Rectangle: int y> = 0;

        $r19.<java.awt.Rectangle: int x> = 0;

        $r20.<java.awt.Rectangle: int x> = $i107;

        $r20.<java.awt.Rectangle: int y> = $i108;

        $r20.<java.awt.Rectangle: int height> = 32767;

        $r20.<java.awt.Rectangle: int width> = 32767;

        $r6 = specialinvoke r0.<org.jdesktop.swingx.JXLabel: java.awt.Rectangle calculateIconRect()>();

        $r7 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: java.lang.String getText()>();

        if $r7 == null goto label05;

        $r13 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: java.lang.String getText()>();

        $z2 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z2 == 0 goto label06;

     label05:
        $z5 = 1;

        goto label07;

     label06:
        $z5 = 0;

     label07:
        if $z5 == 0 goto label08;

        $r19.<java.awt.Rectangle: int height> = 0;

        $r19.<java.awt.Rectangle: int width> = 0;

        i111 = 0;

        goto label15;

     label08:
        $i5 = $r6.<java.awt.Rectangle: int width>;

        if $i5 != 0 goto label09;

        $i112 = 0;

        goto label10;

     label09:
        $i112 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: int getIconTextGap()>();

     label10:
        i111 = $i112;

        $i6 = $r6.<java.awt.Rectangle: int width>;

        $i7 = $i107 + $i6;

        $i8 = $i7 + $i112;

        r0.<org.jdesktop.swingx.JXLabel: int occupiedWidth> = $i8;

        $r8 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: java.awt.Container getParent()>();

        if $r8 == null goto label11;

        $z1 = $r8 instanceof javax.swing.JPanel;

        if $z1 == 0 goto label11;

        r18 = (javax.swing.JPanel) $r8;

        $r11 = virtualinvoke r18.<javax.swing.JPanel: javax.swing.border.Border getBorder()>();

        if $r11 == null goto label11;

        $r12 = interfaceinvoke $r11.<javax.swing.border.Border: java.awt.Insets getBorderInsets(java.awt.Component)>(r18);

        $i105 = r0.<org.jdesktop.swingx.JXLabel: int occupiedWidth>;

        $i103 = $r12.<java.awt.Insets: int left>;

        $i102 = $r12.<java.awt.Insets: int right>;

        $i104 = $i103 + $i102;

        $i106 = $i105 + $i104;

        r0.<org.jdesktop.swingx.JXLabel: int occupiedWidth> = $i106;

     label11:
        $i113 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: int getHorizontalTextPosition()>();

        if $i113 != 0 goto label12;

        i114 = $r20.<java.awt.Rectangle: int width>;

        goto label13;

     label12:
        $i11 = $r20.<java.awt.Rectangle: int width>;

        $i9 = $r6.<java.awt.Rectangle: int width>;

        $i10 = $i9 + i111;

        i114 = $i11 - $i10;

     label13:
        $f0 = virtualinvoke r17.<javax.swing.text.View: float getPreferredSpan(int)>(0);

        $i12 = (int) $f0;

        $i13 = staticinvoke <java.lang.Math: int min(int,int)>(i114, $i12);

        $r19.<java.awt.Rectangle: int width> = $i13;

        $i14 = r0.<org.jdesktop.swingx.JXLabel: int maxLineSpan>;

        if $i14 <= 0 goto label14;

        $i96 = $r19.<java.awt.Rectangle: int width>;

        $i95 = r0.<org.jdesktop.swingx.JXLabel: int maxLineSpan>;

        $i97 = staticinvoke <java.lang.Math: int min(int,int)>($i96, $i95);

        $r19.<java.awt.Rectangle: int width> = $i97;

        $i98 = r0.<org.jdesktop.swingx.JXLabel: int maxLineSpan>;

        $f1 = (float) $i98;

        $b99 = $f0 cmpl $f1;

        $i153 = (int) $b99;

        if $i153 <= 0 goto label14;

        $i100 = r0.<org.jdesktop.swingx.JXLabel: int maxLineSpan>;

        $f3 = (float) $i100;

        $i101 = $r19.<java.awt.Rectangle: int height>;

        $f2 = (float) $i101;

        virtualinvoke r17.<javax.swing.text.View: void setSize(float,float)>($f3, $f2);

     label14:
        $f4 = virtualinvoke r17.<javax.swing.text.View: float getPreferredSpan(int)>(1);

        $i115 = (int) $f4;

        $r19.<java.awt.Rectangle: int height> = $i115;

        $i116 = $r19.<java.awt.Rectangle: int height>;

        if $i116 != 0 goto label15;

        $r10 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: java.awt.Font getFont()>();

        $i94 = virtualinvoke $r10.<java.awt.Font: int getSize()>();

        $r19.<java.awt.Rectangle: int height> = $i94;

     label15:
        $i117 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: int getVerticalTextPosition()>();

        if $i117 != 1 goto label17;

        $i90 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: int getHorizontalTextPosition()>();

        if $i90 == 0 goto label16;

        $r19.<java.awt.Rectangle: int y> = 0;

        goto label20;

     label16:
        $i91 = $r19.<java.awt.Rectangle: int height>;

        $i92 = $i91 + i111;

        $i93 = neg $i92;

        $r19.<java.awt.Rectangle: int y> = $i93;

        goto label20;

     label17:
        $i15 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: int getVerticalTextPosition()>();

        if $i15 != 0 goto label18;

        $i85 = $r6.<java.awt.Rectangle: int height>;

        $i88 = $i85 / 2;

        $i86 = $r19.<java.awt.Rectangle: int height>;

        $i87 = $i86 / 2;

        $i89 = $i88 - $i87;

        $r19.<java.awt.Rectangle: int y> = $i89;

        goto label20;

     label18:
        $i16 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: int getVerticalTextPosition()>();

        if $i16 == 0 goto label19;

        $i83 = $r6.<java.awt.Rectangle: int height>;

        $i82 = $r19.<java.awt.Rectangle: int height>;

        $i84 = $i83 - $i82;

        $r19.<java.awt.Rectangle: int y> = $i84;

        goto label20;

     label19:
        $i17 = $r6.<java.awt.Rectangle: int height>;

        $i18 = $i17 + i111;

        $r19.<java.awt.Rectangle: int y> = $i18;

     label20:
        $i118 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: int getHorizontalTextPosition()>();

        if $i118 != 2 goto label21;

        $i79 = $r19.<java.awt.Rectangle: int width>;

        $i80 = $i79 + i111;

        $i81 = neg $i80;

        $r19.<java.awt.Rectangle: int x> = $i81;

        goto label23;

     label21:
        $i19 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: int getHorizontalTextPosition()>();

        if $i19 != 0 goto label22;

        $i74 = $r6.<java.awt.Rectangle: int width>;

        $i77 = $i74 / 2;

        $i75 = $r19.<java.awt.Rectangle: int width>;

        $i76 = $i75 / 2;

        $i78 = $i77 - $i76;

        $r19.<java.awt.Rectangle: int x> = $i78;

        goto label23;

     label22:
        $i20 = $r6.<java.awt.Rectangle: int width>;

        $i21 = $i20 + i111;

        $r19.<java.awt.Rectangle: int x> = $i21;

     label23:
        $i119 = $r6.<java.awt.Rectangle: int x>;

        $i120 = $r19.<java.awt.Rectangle: int x>;

        $i121 = staticinvoke <java.lang.Math: int min(int,int)>($i119, $i120);

        $i122 = $r6.<java.awt.Rectangle: int x>;

        $i123 = $r6.<java.awt.Rectangle: int width>;

        $i124 = $i122 + $i123;

        $i125 = $r19.<java.awt.Rectangle: int x>;

        $i126 = $r19.<java.awt.Rectangle: int width>;

        $i127 = $i125 + $i126;

        $i128 = staticinvoke <java.lang.Math: int max(int,int)>($i124, $i127);

        $i129 = $i128 - $i121;

        $i130 = $r6.<java.awt.Rectangle: int y>;

        $i131 = $r19.<java.awt.Rectangle: int y>;

        $i132 = staticinvoke <java.lang.Math: int min(int,int)>($i130, $i131);

        $i133 = $r6.<java.awt.Rectangle: int y>;

        $i134 = $r6.<java.awt.Rectangle: int height>;

        $i135 = $i133 + $i134;

        $i136 = $r19.<java.awt.Rectangle: int y>;

        $i137 = $r19.<java.awt.Rectangle: int height>;

        $i138 = $i136 + $i137;

        $i139 = staticinvoke <java.lang.Math: int max(int,int)>($i135, $i138);

        $i140 = $i139 - $i132;

        $i141 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: int getVerticalAlignment()>();

        if $i141 != 1 goto label24;

        $i73 = $r20.<java.awt.Rectangle: int y>;

        i142 = $i73 - $i132;

        goto label26;

     label24:
        $i22 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: int getVerticalAlignment()>();

        if $i22 != 0 goto label25;

        $i69 = $r20.<java.awt.Rectangle: int y>;

        $i67 = $r20.<java.awt.Rectangle: int height>;

        $i68 = $i67 / 2;

        $i72 = $i69 + $i68;

        $i70 = $i140 / 2;

        $i71 = $i132 + $i70;

        i142 = $i72 - $i71;

        goto label26;

     label25:
        $i24 = $r20.<java.awt.Rectangle: int y>;

        $i23 = $r20.<java.awt.Rectangle: int height>;

        $i26 = $i24 + $i23;

        $i25 = $i132 + $i140;

        i142 = $i26 - $i25;

     label26:
        $i143 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: int getHorizontalAlignment()>();

        if $i143 != 2 goto label27;

        $i66 = $r20.<java.awt.Rectangle: int x>;

        i144 = $i66 - $i121;

        goto label29;

     label27:
        $i27 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: int getHorizontalAlignment()>();

        if $i27 != 4 goto label28;

        $i63 = $r20.<java.awt.Rectangle: int x>;

        $i62 = $r20.<java.awt.Rectangle: int width>;

        $i65 = $i63 + $i62;

        $i64 = $i121 + $i129;

        i144 = $i65 - $i64;

        goto label29;

     label28:
        $i30 = $r20.<java.awt.Rectangle: int x>;

        $i28 = $r20.<java.awt.Rectangle: int width>;

        $i29 = $i28 / 2;

        $i33 = $i30 + $i29;

        $i31 = $i129 / 2;

        $i32 = $i121 + $i31;

        i144 = $i33 - $i32;

     label29:
        $i145 = $r19.<java.awt.Rectangle: int x>;

        $i146 = $i145 + i144;

        $r19.<java.awt.Rectangle: int x> = $i146;

        $i147 = $r19.<java.awt.Rectangle: int y>;

        $i148 = $i147 + i142;

        $r19.<java.awt.Rectangle: int y> = $i148;

        $i149 = $r6.<java.awt.Rectangle: int x>;

        $i150 = $i149 + i144;

        $r6.<java.awt.Rectangle: int x> = $i150;

        $i151 = $r6.<java.awt.Rectangle: int y>;

        $i152 = $i151 + i142;

        $r6.<java.awt.Rectangle: int y> = $i152;

        if 0 >= 0 goto label30;

        $i60 = $r19.<java.awt.Rectangle: int x>;

        $i61 = $i60 - 0;

        $r19.<java.awt.Rectangle: int x> = $i61;

     label30:
        $i35 = $r6.<java.awt.Rectangle: int x>;

        $i34 = $r19.<java.awt.Rectangle: int x>;

        $i36 = staticinvoke <java.lang.Math: int min(int,int)>($i35, $i34);

        $i38 = $r6.<java.awt.Rectangle: int x>;

        $i37 = $r6.<java.awt.Rectangle: int width>;

        $i42 = $i38 + $i37;

        $i40 = $r19.<java.awt.Rectangle: int x>;

        $i39 = $r19.<java.awt.Rectangle: int width>;

        $i41 = $i40 + $i39;

        $i43 = staticinvoke <java.lang.Math: int max(int,int)>($i42, $i41);

        $i45 = $r6.<java.awt.Rectangle: int y>;

        $i44 = $r19.<java.awt.Rectangle: int y>;

        $i46 = staticinvoke <java.lang.Math: int min(int,int)>($i45, $i44);

        $i48 = $r6.<java.awt.Rectangle: int y>;

        $i47 = $r6.<java.awt.Rectangle: int height>;

        $i52 = $i48 + $i47;

        $i50 = $r19.<java.awt.Rectangle: int y>;

        $i49 = $r19.<java.awt.Rectangle: int height>;

        $i51 = $i50 + $i49;

        $i53 = staticinvoke <java.lang.Math: int max(int,int)>($i52, $i51);

        $r21 = new java.awt.Dimension;

        $i55 = $i43 - $i36;

        $i54 = $i53 - $i46;

        specialinvoke $r21.<java.awt.Dimension: void <init>(int,int)>($i55, $i54);

        $i56 = $r21.<java.awt.Dimension: int width>;

        $i57 = $i56 + $i107;

        $r21.<java.awt.Dimension: int width> = $i57;

        $i58 = $r21.<java.awt.Dimension: int height>;

        $i59 = $i58 + $i108;

        $r21.<java.awt.Dimension: int height> = $i59;

        return $r21;

     label31:
        return $r1;
    }

    private javax.swing.text.View getWrappingView()
    {
        org.jdesktop.swingx.JXLabel r0;
        javax.swing.text.View r3;
        java.lang.Object $r2;
        java.awt.Container $r1;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXLabel;

        $r1 = specialinvoke r0.<javax.swing.JLabel: java.awt.Container getTopLevelAncestor()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: java.lang.Object getClientProperty(java.lang.Object)>("html");

        r3 = (javax.swing.text.View) $r2;

        $z0 = r3 instanceof org.jdesktop.swingx.JXLabel$Renderer;

        if $z0 != 0 goto label2;

        return null;

     label2:
        return r3;
    }

    private java.awt.Container getViewport()
    {
        org.jdesktop.swingx.JXLabel r0;
        java.awt.Container r1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.jdesktop.swingx.JXLabel;

        r1 = r0;

     label1:
        if r1 == null goto label4;

        $z0 = r1 instanceof java.awt.Window;

        if $z0 != 0 goto label2;

        $z1 = r1 instanceof java.applet.Applet;

        if $z1 != 0 goto label2;

        $z2 = r1 instanceof javax.swing.JViewport;

        if $z2 == 0 goto label3;

     label2:
        return r1;

     label3:
        r1 = virtualinvoke r1.<java.awt.Container: java.awt.Container getParent()>();

        goto label1;

     label4:
        return null;
    }

    private java.awt.Rectangle calculateIconRect()
    {
        java.awt.Rectangle $r0;
        org.jdesktop.swingx.JXLabel r1;
        int $i0, $i1;
        javax.swing.Icon $r2;
        boolean $z0;

        r1 := @this: org.jdesktop.swingx.JXLabel;

        $r0 = new java.awt.Rectangle;

        specialinvoke $r0.<java.awt.Rectangle: void <init>()>();

        $z0 = virtualinvoke r1.<org.jdesktop.swingx.JXLabel: boolean isEnabled()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r1.<org.jdesktop.swingx.JXLabel: javax.swing.Icon getIcon()>();

        goto label2;

     label1:
        $r2 = virtualinvoke r1.<org.jdesktop.swingx.JXLabel: javax.swing.Icon getDisabledIcon()>();

     label2:
        $r0.<java.awt.Rectangle: int height> = 0;

        $r0.<java.awt.Rectangle: int width> = 0;

        $r0.<java.awt.Rectangle: int y> = 0;

        $r0.<java.awt.Rectangle: int x> = 0;

        if $r2 == null goto label3;

        $i0 = interfaceinvoke $r2.<javax.swing.Icon: int getIconWidth()>();

        $r0.<java.awt.Rectangle: int width> = $i0;

        $i1 = interfaceinvoke $r2.<javax.swing.Icon: int getIconHeight()>();

        $r0.<java.awt.Rectangle: int height> = $i1;

        goto label4;

     label3:
        $r0.<java.awt.Rectangle: int height> = 0;

        $r0.<java.awt.Rectangle: int width> = 0;

     label4:
        return $r0;
    }

    public int getMaxLineSpan()
    {
        int $i0;
        org.jdesktop.swingx.JXLabel r0;

        r0 := @this: org.jdesktop.swingx.JXLabel;

        $i0 = r0.<org.jdesktop.swingx.JXLabel: int maxLineSpan>;

        return $i0;
    }

    public void setMaxLineSpan(int)
    {
        org.jdesktop.swingx.JXLabel r0;
        int $i0, i1, $i2;

        r0 := @this: org.jdesktop.swingx.JXLabel;

        i1 := @parameter0: int;

        $i0 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: int getMaxLineSpan()>();

        r0.<org.jdesktop.swingx.JXLabel: int maxLineSpan> = i1;

        $i2 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: int getMaxLineSpan()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXLabel: void firePropertyChange(java.lang.String,int,int)>("maxLineSpan", $i0, $i2);

        return;
    }

    private static int rotateWidth(java.awt.Dimension, double)
    {
        long $l2;
        java.awt.Dimension r0;
        int $i0, $i1, $i3;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;

        r0 := @parameter0: java.awt.Dimension;

        d0 := @parameter1: double;

        $i0 = r0.<java.awt.Dimension: int width>;

        $d1 = (double) $i0;

        $d2 = staticinvoke <java.lang.Math: double cos(double)>(d0);

        $d3 = staticinvoke <java.lang.Math: double abs(double)>($d2);

        $d4 = $d1 * $d3;

        $i1 = r0.<java.awt.Dimension: int height>;

        $d5 = (double) $i1;

        $d6 = staticinvoke <java.lang.Math: double sin(double)>(d0);

        $d7 = staticinvoke <java.lang.Math: double abs(double)>($d6);

        $d8 = $d5 * $d7;

        $d9 = $d4 + $d8;

        $l2 = staticinvoke <java.lang.Math: long round(double)>($d9);

        $i3 = (int) $l2;

        return $i3;
    }

    private static int rotateHeight(java.awt.Dimension, double)
    {
        long $l2;
        java.awt.Dimension r0;
        int $i0, $i1, $i3;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;

        r0 := @parameter0: java.awt.Dimension;

        d0 := @parameter1: double;

        $i0 = r0.<java.awt.Dimension: int width>;

        $d1 = (double) $i0;

        $d2 = staticinvoke <java.lang.Math: double sin(double)>(d0);

        $d3 = staticinvoke <java.lang.Math: double abs(double)>($d2);

        $d4 = $d1 * $d3;

        $i1 = r0.<java.awt.Dimension: int height>;

        $d5 = (double) $i1;

        $d6 = staticinvoke <java.lang.Math: double cos(double)>(d0);

        $d7 = staticinvoke <java.lang.Math: double abs(double)>($d6);

        $d8 = $d5 * $d7;

        $d9 = $d4 + $d8;

        $l2 = staticinvoke <java.lang.Math: long round(double)>($d9);

        $i3 = (int) $l2;

        return $i3;
    }

    public void setTextRotation(double)
    {
        byte $b0;
        org.jdesktop.swingx.JXLabel r0;
        double $d0, d1, $d2, $d3;

        r0 := @this: org.jdesktop.swingx.JXLabel;

        d1 := @parameter0: double;

        $d0 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: double getTextRotation()>();

        r0.<org.jdesktop.swingx.JXLabel: double textRotation> = d1;

        $d2 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: double getTextRotation()>();

        $b0 = $d0 cmpl $d2;

        if $b0 == 0 goto label1;

        $d3 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: double getTextRotation()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXLabel: void firePropertyChange(java.lang.String,double,double)>("textRotation", $d0, $d3);

     label1:
        virtualinvoke r0.<org.jdesktop.swingx.JXLabel: void repaint()>();

        return;
    }

    public void setLineWrap(boolean)
    {
        org.jdesktop.swingx.painter.Painter $r1, $r2;
        org.jdesktop.swingx.JXLabel r0;
        org.jdesktop.swingx.painter.AbstractPainter $r3;
        boolean $z0, z1, $z2, $z3, $z4;

        r0 := @this: org.jdesktop.swingx.JXLabel;

        z1 := @parameter0: boolean;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: boolean isLineWrap()>();

        r0.<org.jdesktop.swingx.JXLabel: boolean multiLine> = z1;

        $z2 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: boolean isLineWrap()>();

        if $z2 == $z0 goto label3;

        $z3 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: boolean isLineWrap()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXLabel: void firePropertyChange(java.lang.String,boolean,boolean)>("lineWrap", $z0, $z3);

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: org.jdesktop.swingx.painter.Painter getForegroundPainter()>();

        if $r1 == null goto label3;

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: org.jdesktop.swingx.painter.Painter getForegroundPainter()>();

        $r3 = (org.jdesktop.swingx.painter.AbstractPainter) $r2;

        if z1 != 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        virtualinvoke $r3.<org.jdesktop.swingx.painter.AbstractPainter: void setCacheable(boolean)>($z4);

     label3:
        return;
    }

    public boolean isLineWrap()
    {
        org.jdesktop.swingx.JXLabel r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXLabel;

        $z0 = r0.<org.jdesktop.swingx.JXLabel: boolean multiLine>;

        return $z0;
    }

    public org.jdesktop.swingx.JXLabel$TextAlignment getTextAlignment()
    {
        org.jdesktop.swingx.JXLabel$TextAlignment $r1;
        org.jdesktop.swingx.JXLabel r0;

        r0 := @this: org.jdesktop.swingx.JXLabel;

        $r1 = r0.<org.jdesktop.swingx.JXLabel: org.jdesktop.swingx.JXLabel$TextAlignment textAlignment>;

        return $r1;
    }

    public void setTextAlignment(org.jdesktop.swingx.JXLabel$TextAlignment)
    {
        org.jdesktop.swingx.JXLabel$TextAlignment $r1, r2, $r3;
        org.jdesktop.swingx.JXLabel r0;

        r0 := @this: org.jdesktop.swingx.JXLabel;

        r2 := @parameter0: org.jdesktop.swingx.JXLabel$TextAlignment;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: org.jdesktop.swingx.JXLabel$TextAlignment getTextAlignment()>();

        r0.<org.jdesktop.swingx.JXLabel: org.jdesktop.swingx.JXLabel$TextAlignment textAlignment> = r2;

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: org.jdesktop.swingx.JXLabel$TextAlignment getTextAlignment()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXLabel: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("textAlignment", $r1, $r3);

        return;
    }

    public boolean isPaintBorderInsets()
    {
        org.jdesktop.swingx.JXLabel r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXLabel;

        $z0 = r0.<org.jdesktop.swingx.JXLabel: boolean paintBorderInsets>;

        return $z0;
    }

    public boolean isOpaque()
    {
        org.jdesktop.swingx.JXLabel r0;
        boolean $z0, $z1;

        r0 := @this: org.jdesktop.swingx.JXLabel;

        $z0 = r0.<org.jdesktop.swingx.JXLabel: boolean painting>;

        if $z0 == 0 goto label1;

        $z1 = 0;

        goto label2;

     label1:
        $z1 = specialinvoke r0.<javax.swing.JLabel: boolean isOpaque()>();

     label2:
        return $z1;
    }

    public void setPaintBorderInsets(boolean)
    {
        org.jdesktop.swingx.JXLabel r0;
        boolean $z0, z1, $z2;

        r0 := @this: org.jdesktop.swingx.JXLabel;

        z1 := @parameter0: boolean;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: boolean isPaintBorderInsets()>();

        r0.<org.jdesktop.swingx.JXLabel: boolean paintBorderInsets> = z1;

        $z2 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: boolean isPaintBorderInsets()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXLabel: void firePropertyChange(java.lang.String,boolean,boolean)>("paintBorderInsets", $z0, $z2);

        return;
    }

    protected void paintComponent(java.awt.Graphics)
    {
        org.jdesktop.swingx.JXLabel r0;
        java.lang.Throwable $r13;
        org.jdesktop.swingx.painter.Painter $r2, $r4, $r5, $r9, $r11, $r12;
        java.awt.geom.Point2D $r6;
        boolean $z0, $z1;
        java.awt.Graphics r1, $r7, $r10;
        java.awt.Insets $r3;
        java.awt.Graphics2D r8, r14;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, d24, $d25, $d26, d27, $d28, $d29, $d30, $d31, $d32, d33;

        r0 := @this: org.jdesktop.swingx.JXLabel;

        r1 := @parameter0: java.awt.Graphics;

        r0.<org.jdesktop.swingx.JXLabel: boolean painted> = 1;

        $z0 = r0.<org.jdesktop.swingx.JXLabel: boolean painting>;

        if $z0 != 0 goto label01;

        $r2 = r0.<org.jdesktop.swingx.JXLabel: org.jdesktop.swingx.painter.Painter backgroundPainter>;

        if $r2 != null goto label02;

        $r12 = r0.<org.jdesktop.swingx.JXLabel: org.jdesktop.swingx.painter.Painter foregroundPainter>;

        if $r12 != null goto label02;

     label01:
        specialinvoke r0.<javax.swing.JLabel: void paintComponent(java.awt.Graphics)>(r1);

        goto label11;

     label02:
        $i0 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: int getWidth()>();

        r0.<org.jdesktop.swingx.JXLabel: int pWidth> = $i0;

        $i1 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: int getHeight()>();

        r0.<org.jdesktop.swingx.JXLabel: int pHeight> = $i1;

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: java.awt.Insets getInsets()>();

        $r4 = r0.<org.jdesktop.swingx.JXLabel: org.jdesktop.swingx.painter.Painter backgroundPainter>;

        if $r4 == null goto label08;

        $r10 = virtualinvoke r1.<java.awt.Graphics: java.awt.Graphics create()>();

        r14 = (java.awt.Graphics2D) $r10;

     label03:
        $z1 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: boolean isPaintBorderInsets()>();

        if $z1 != 0 goto label04;

        $i21 = $r3.<java.awt.Insets: int left>;

        $i20 = $r3.<java.awt.Insets: int top>;

        virtualinvoke r14.<java.awt.Graphics2D: void translate(int,int)>($i21, $i20);

        $i23 = r0.<org.jdesktop.swingx.JXLabel: int pWidth>;

        $i22 = $r3.<java.awt.Insets: int left>;

        $i25 = $i23 - $i22;

        $i24 = $r3.<java.awt.Insets: int right>;

        $i26 = $i25 - $i24;

        r0.<org.jdesktop.swingx.JXLabel: int pWidth> = $i26;

        $i28 = r0.<org.jdesktop.swingx.JXLabel: int pHeight>;

        $i27 = $r3.<java.awt.Insets: int top>;

        $i30 = $i28 - $i27;

        $i29 = $r3.<java.awt.Insets: int bottom>;

        $i31 = $i30 - $i29;

        r0.<org.jdesktop.swingx.JXLabel: int pHeight> = $i31;

     label04:
        $r11 = r0.<org.jdesktop.swingx.JXLabel: org.jdesktop.swingx.painter.Painter backgroundPainter>;

        $i19 = r0.<org.jdesktop.swingx.JXLabel: int pWidth>;

        $i18 = r0.<org.jdesktop.swingx.JXLabel: int pHeight>;

        interfaceinvoke $r11.<org.jdesktop.swingx.painter.Painter: void paint(java.awt.Graphics2D,java.lang.Object,int,int)>(r14, r0, $i19, $i18);

     label05:
        virtualinvoke r14.<java.awt.Graphics2D: void dispose()>();

        goto label08;

     label06:
        $r13 := @caughtexception;

     label07:
        virtualinvoke r14.<java.awt.Graphics2D: void dispose()>();

        throw $r13;

     label08:
        $r5 = r0.<org.jdesktop.swingx.JXLabel: org.jdesktop.swingx.painter.Painter foregroundPainter>;

        if $r5 == null goto label11;

        $i2 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: int getWidth()>();

        $i3 = $r3.<java.awt.Insets: int left>;

        $i5 = $i2 - $i3;

        $i4 = $r3.<java.awt.Insets: int right>;

        $i6 = $i5 - $i4;

        r0.<org.jdesktop.swingx.JXLabel: int pWidth> = $i6;

        $i7 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: int getHeight()>();

        $i8 = $r3.<java.awt.Insets: int top>;

        $i10 = $i7 - $i8;

        $i9 = $r3.<java.awt.Insets: int bottom>;

        $i11 = $i10 - $i9;

        r0.<org.jdesktop.swingx.JXLabel: int pHeight> = $i11;

        $r6 = specialinvoke r0.<org.jdesktop.swingx.JXLabel: java.awt.geom.Point2D calculateT()>();

        $d0 = r0.<org.jdesktop.swingx.JXLabel: double textRotation>;

        $d1 = staticinvoke <java.lang.Math: double sin(double)>($d0);

        $d2 = virtualinvoke $r6.<java.awt.geom.Point2D: double getY()>();

        $d4 = $d1 * $d2;

        $d3 = r0.<org.jdesktop.swingx.JXLabel: double textRotation>;

        $d5 = staticinvoke <java.lang.Math: double cos(double)>($d3);

        $d6 = virtualinvoke $r6.<java.awt.geom.Point2D: double getX()>();

        $d7 = $d5 * $d6;

        d33 = $d4 + $d7;

        $d8 = r0.<org.jdesktop.swingx.JXLabel: double textRotation>;

        $d9 = staticinvoke <java.lang.Math: double sin(double)>($d8);

        $d10 = virtualinvoke $r6.<java.awt.geom.Point2D: double getX()>();

        $d12 = $d9 * $d10;

        $d11 = r0.<org.jdesktop.swingx.JXLabel: double textRotation>;

        $d13 = staticinvoke <java.lang.Math: double cos(double)>($d11);

        $d14 = virtualinvoke $r6.<java.awt.geom.Point2D: double getY()>();

        $d15 = $d13 * $d14;

        d16 = $d12 + $d15;

        $i12 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: int getWidth()>();

        $d17 = (double) $i12;

        $d18 = $d17 - d33;

        $d20 = $d18 / 2.0;

        $d19 = r0.<org.jdesktop.swingx.JXLabel: double textRotation>;

        $d21 = staticinvoke <java.lang.Math: double sin(double)>($d19);

        $d22 = virtualinvoke $r6.<java.awt.geom.Point2D: double getY()>();

        $d23 = $d21 * $d22;

        d24 = $d20 + $d23;

        $i13 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: int getHeight()>();

        $d25 = (double) $i13;

        $d26 = $d25 - d16;

        d27 = $d26 / 2.0;

        $r7 = virtualinvoke r1.<java.awt.Graphics: java.awt.Graphics create()>();

        r8 = (java.awt.Graphics2D) $r7;

        if $r3 == null goto label09;

        $i16 = $r3.<java.awt.Insets: int left>;

        $d29 = (double) $i16;

        $d32 = $d29 + d24;

        $i17 = $r3.<java.awt.Insets: int top>;

        $d30 = (double) $i17;

        $d31 = $d30 + d27;

        virtualinvoke r8.<java.awt.Graphics2D: void translate(double,double)>($d32, $d31);

        goto label10;

     label09:
        virtualinvoke r8.<java.awt.Graphics2D: void translate(double,double)>(d24, d27);

     label10:
        $d28 = r0.<org.jdesktop.swingx.JXLabel: double textRotation>;

        virtualinvoke r8.<java.awt.Graphics2D: void rotate(double)>($d28);

        r0.<org.jdesktop.swingx.JXLabel: boolean painting> = 1;

        $r9 = r0.<org.jdesktop.swingx.JXLabel: org.jdesktop.swingx.painter.Painter foregroundPainter>;

        $i15 = r0.<org.jdesktop.swingx.JXLabel: int pWidth>;

        $i14 = r0.<org.jdesktop.swingx.JXLabel: int pHeight>;

        interfaceinvoke $r9.<org.jdesktop.swingx.painter.Painter: void paint(java.awt.Graphics2D,java.lang.Object,int,int)>(r8, r0, $i15, $i14);

        virtualinvoke r8.<java.awt.Graphics2D: void dispose()>();

        r0.<org.jdesktop.swingx.JXLabel: boolean painting> = 0;

        r0.<org.jdesktop.swingx.JXLabel: int pWidth> = 0;

        r0.<org.jdesktop.swingx.JXLabel: int pHeight> = 0;

     label11:
        return;

        catch java.lang.Throwable from label03 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
    }

    private java.awt.geom.Point2D calculateT()
    {
        org.jdesktop.swingx.JXLabel r0;
        byte $b2, $b3, $b4, $b5, $b9, $b10, $b11, $b14, $b15, $b16, $b20, $b21, $b22, $b25, $b26, $b30, $b32;
        java.awt.geom.Point2D$Double $r6;
        int $i0, $i1, $i6, $i7, $i8, $i12, $i13, $i17, $i18, $i19, $i23, $i24, $i27, $i28, $i29, $i31, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50;
        java.lang.Object $r1;
        javax.swing.text.View $r4;
        java.awt.FontMetrics $r3;
        boolean z0;
        java.awt.Font $r2;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, f9, f10;
        double $d0, $d1, $d2, $d3, $d4, $d5, d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, d51, d52, d53, d54, $d55, $d56, $d57, $d58;

        r0 := @this: org.jdesktop.swingx.JXLabel;

        $i0 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: int getWidth()>();

        d51 = (double) $i0;

        $i1 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: int getHeight()>();

        d52 = (double) $i1;

        $d0 = r0.<org.jdesktop.swingx.JXLabel: double textRotation>;

        $b2 = $d0 cmpl 4.697;

        $i35 = (int) $b2;

        if $i35 <= 0 goto label01;

        $d50 = r0.<org.jdesktop.swingx.JXLabel: double textRotation>;

        $b30 = $d50 cmpg 4.727;

        $i36 = (int) $b30;

        if $i36 < 0 goto label02;

     label01:
        $d1 = r0.<org.jdesktop.swingx.JXLabel: double textRotation>;

        $b3 = $d1 cmpl 1.555;

        $i37 = (int) $b3;

        if $i37 <= 0 goto label03;

        $d49 = r0.<org.jdesktop.swingx.JXLabel: double textRotation>;

        $b26 = $d49 cmpg 1.585;

        $i38 = (int) $b26;

        if $i38 >= 0 goto label03;

     label02:
        $i31 = r0.<org.jdesktop.swingx.JXLabel: int pHeight>;

        $i27 = r0.<org.jdesktop.swingx.JXLabel: int pWidth>;

        r0.<org.jdesktop.swingx.JXLabel: int pHeight> = $i27;

        r0.<org.jdesktop.swingx.JXLabel: int pWidth> = $i31;

        $i28 = r0.<org.jdesktop.swingx.JXLabel: int pWidth>;

        d51 = (double) $i28;

        $i29 = r0.<org.jdesktop.swingx.JXLabel: int pHeight>;

        d52 = (double) $i29;

        goto label24;

     label03:
        $d2 = r0.<org.jdesktop.swingx.JXLabel: double textRotation>;

        $b4 = $d2 cmpl -0.015;

        $i39 = (int) $b4;

        if $i39 <= 0 goto label04;

        $d48 = r0.<org.jdesktop.swingx.JXLabel: double textRotation>;

        $b25 = $d48 cmpg 0.015;

        $i40 = (int) $b25;

        if $i40 < 0 goto label05;

     label04:
        $d3 = r0.<org.jdesktop.swingx.JXLabel: double textRotation>;

        $b5 = $d3 cmpl 3.14;

        $i41 = (int) $b5;

        if $i41 <= 0 goto label06;

        $d46 = r0.<org.jdesktop.swingx.JXLabel: double textRotation>;

        $b22 = $d46 cmpg 3.143;

        $i42 = (int) $b22;

        if $i42 >= 0 goto label06;

     label05:
        $i23 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: int getHeight()>();

        r0.<org.jdesktop.swingx.JXLabel: int pHeight> = $i23;

        $i24 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: int getWidth()>();

        r0.<org.jdesktop.swingx.JXLabel: int pWidth> = $i24;

        goto label24;

     label06:
        r0.<org.jdesktop.swingx.JXLabel: boolean dontIgnoreRepaint> = 0;

        $i6 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: int getHeight()>();

        $i7 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: int getWidth()>();

        $i8 = staticinvoke <java.lang.Math: int min(int,int)>($i6, $i7);

        $d4 = (double) $i8;

        $d5 = staticinvoke <java.lang.Math: double cos(double)>(0.7853981633974483);

        $d47 = $d4 * $d5;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: java.lang.Object getClientProperty(java.lang.Object)>("html");

        $r4 = (javax.swing.text.View) $r1;

        if $r4 != null goto label10;

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: java.awt.Font getFont()>();

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: java.awt.FontMetrics getFontMetrics(java.awt.Font)>($r2);

        $i17 = virtualinvoke $r3.<java.awt.FontMetrics: int getHeight()>();

        d52 = (double) $i17;

        $i18 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: int getWidth()>();

        $d29 = (double) $i18;

        $d28 = r0.<org.jdesktop.swingx.JXLabel: double textRotation>;

        $d30 = staticinvoke <java.lang.Math: double sin(double)>($d28);

        $d31 = d52 * $d30;

        $d32 = staticinvoke <java.lang.Math: double abs(double)>($d31);

        $d34 = $d29 - $d32;

        $d33 = r0.<org.jdesktop.swingx.JXLabel: double textRotation>;

        $d35 = staticinvoke <java.lang.Math: double cos(double)>($d33);

        $d36 = staticinvoke <java.lang.Math: double abs(double)>($d35);

        d53 = $d34 / $d36;

        $i19 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: int getHeight()>();

        $d38 = (double) $i19;

        $d37 = r0.<org.jdesktop.swingx.JXLabel: double textRotation>;

        $d39 = staticinvoke <java.lang.Math: double cos(double)>($d37);

        $d40 = d52 * $d39;

        $d41 = staticinvoke <java.lang.Math: double abs(double)>($d40);

        $d43 = $d38 - $d41;

        $d42 = r0.<org.jdesktop.swingx.JXLabel: double textRotation>;

        $d44 = staticinvoke <java.lang.Math: double sin(double)>($d42);

        $d45 = staticinvoke <java.lang.Math: double abs(double)>($d44);

        d54 = $d43 / $d45;

        $b20 = d53 cmpg 0.0;

        $i43 = (int) $b20;

        if $i43 >= 0 goto label07;

        $d55 = d54;

        goto label09;

     label07:
        $b21 = d54 cmpl 0.0;

        $i44 = (int) $b21;

        if $i44 <= 0 goto label08;

        $d55 = staticinvoke <java.lang.Math: double min(double,double)>(d53, d54);

        goto label09;

     label08:
        $d55 = d53;

     label09:
        d51 = $d55;

        goto label23;

     label10:
        f9 = virtualinvoke $r4.<javax.swing.text.View: float getPreferredSpan(int)>(0);

        f10 = virtualinvoke $r4.<javax.swing.text.View: float getPreferredSpan(int)>(1);

        d6 = r0.<org.jdesktop.swingx.JXLabel: double textRotation>;

        z0 = 0;

     label11:
        if z0 != 0 goto label22;

     label12:
        $f0 = virtualinvoke $r4.<javax.swing.text.View: float getPreferredSpan(int)>(1);

        $b9 = f10 cmpl $f0;

        if $b9 != 0 goto label13;

        f9 = f9 - 10.0F;

        virtualinvoke $r4.<javax.swing.text.View: void setSize(float,float)>(f9, f10);

        goto label12;

     label13:
        $d8 = (double) f9;

        $b10 = $d8 cmpg $d47;

        $i45 = (int) $b10;

        if $i45 < 0 goto label14;

        $d9 = (double) f10;

        $b11 = $d9 cmpl $d47;

        $i46 = (int) $b11;

        if $i46 <= 0 goto label15;

     label14:
        $f1 = (float) $d47;

        f10 = $f1;

        f9 = $f1;

        virtualinvoke $r4.<javax.swing.text.View: void setSize(float,float)>($f1, 100000.0F);

        goto label22;

     label15:
        $f2 = virtualinvoke $r4.<javax.swing.text.View: float getPreferredSpan(int)>(1);

        f10 = $f2;

        $i12 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: int getWidth()>();

        $d10 = (double) $i12;

        $d11 = (double) $f2;

        $d12 = staticinvoke <java.lang.Math: double sin(double)>(d6);

        $d13 = $d11 * $d12;

        $d14 = staticinvoke <java.lang.Math: double abs(double)>($d13);

        $d15 = $d10 - $d14;

        $d16 = staticinvoke <java.lang.Math: double cos(double)>(d6);

        $d17 = staticinvoke <java.lang.Math: double abs(double)>($d16);

        d18 = $d15 / $d17;

        $i13 = virtualinvoke r0.<org.jdesktop.swingx.JXLabel: int getHeight()>();

        $d19 = (double) $i13;

        $d20 = (double) $f2;

        $d21 = staticinvoke <java.lang.Math: double cos(double)>(d6);

        $d22 = $d20 * $d21;

        $d23 = staticinvoke <java.lang.Math: double abs(double)>($d22);

        $d24 = $d19 - $d23;

        $d25 = staticinvoke <java.lang.Math: double sin(double)>(d6);

        $d26 = staticinvoke <java.lang.Math: double abs(double)>($d25);

        d27 = $d24 / $d26;

        $b14 = d18 cmpg 0.0;

        $i47 = (int) $b14;

        if $i47 >= 0 goto label16;

        $d56 = d27;

        goto label18;

     label16:
        $b15 = d27 cmpl 0.0;

        $i48 = (int) $b15;

        if $i48 <= 0 goto label17;

        $d56 = staticinvoke <java.lang.Math: double min(double,double)>(d18, d27);

        goto label18;

     label17:
        $d56 = d18;

     label18:
        $d57 = $d56 - 1.0;

        $d58 = (double) f9;

        $b32 = $d57 cmpl $d58;

        $i49 = (int) $b32;

        if $i49 <= 0 goto label19;

        $f8 = (float) $d57;

        $f7 = 10.0F * $f2;

        virtualinvoke $r4.<javax.swing.text.View: void setSize(float,float)>($f8, $f7);

        z0 = 1;

        goto label21;

     label19:
        $f4 = (float) $d57;

        $f3 = 10.0F * $f2;

        virtualinvoke $r4.<javax.swing.text.View: void setSize(float,float)>($f4, $f3);

        $f5 = virtualinvoke $r4.<javax.swing.text.View: float getPreferredSpan(int)>(1);

        $b16 = $f5 cmpl $f2;

        $i50 = (int) $b16;

        if $i50 <= 0 goto label20;

        $f6 = 10.0F * $f2;

        virtualinvoke $r4.<javax.swing.text.View: void setSize(float,float)>(f9, $f6);

        goto label21;

     label20:
        f9 = (float) $d57;

        z0 = 1;

     label21:
        goto label11;

     label22:
        $d7 = (double) f9;

        d51 = staticinvoke <java.lang.Math: double floor(double)>($d7);

        d52 = (double) f10;

     label23:
        $i33 = (int) d51;

        r0.<org.jdesktop.swingx.JXLabel: int pWidth> = $i33;

        $i34 = (int) d52;

        r0.<org.jdesktop.swingx.JXLabel: int pHeight> = $i34;

        r0.<org.jdesktop.swingx.JXLabel: boolean dontIgnoreRepaint> = 1;

     label24:
        $r6 = new java.awt.geom.Point2D$Double;

        specialinvoke $r6.<java.awt.geom.Point2D$Double: void <init>(double,double)>(d51, d52);

        return $r6;
    }

    public void repaint()
    {
        org.jdesktop.swingx.JXLabel r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXLabel;

        $z0 = r0.<org.jdesktop.swingx.JXLabel: boolean dontIgnoreRepaint>;

        if $z0 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<javax.swing.JLabel: void repaint()>();

        return;
    }

    public void repaint(int, int, int, int)
    {
        org.jdesktop.swingx.JXLabel r0;
        int i0, i1, i2, i3;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXLabel;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $z0 = r0.<org.jdesktop.swingx.JXLabel: boolean dontIgnoreRepaint>;

        if $z0 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<javax.swing.JLabel: void repaint(int,int,int,int)>(i0, i1, i2, i3);

        return;
    }

    public void repaint(long)
    {
        long l0;
        org.jdesktop.swingx.JXLabel r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXLabel;

        l0 := @parameter0: long;

        $z0 = r0.<org.jdesktop.swingx.JXLabel: boolean dontIgnoreRepaint>;

        if $z0 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<javax.swing.JLabel: void repaint(long)>(l0);

        return;
    }

    public void repaint(long, int, int, int, int)
    {
        org.jdesktop.swingx.JXLabel r0;
        int i1, i2, i3, i4;
        long l0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXLabel;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        $z0 = r0.<org.jdesktop.swingx.JXLabel: boolean dontIgnoreRepaint>;

        if $z0 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<javax.swing.JLabel: void repaint(long,int,int,int,int)>(l0, i1, i2, i3, i4);

        return;
    }

    public int getHeight()
    {
        int i0;
        org.jdesktop.swingx.JXLabel r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXLabel;

        i0 = specialinvoke r0.<javax.swing.JLabel: int getHeight()>();

        $z0 = r0.<org.jdesktop.swingx.JXLabel: boolean painting>;

        if $z0 == 0 goto label1;

        i0 = r0.<org.jdesktop.swingx.JXLabel: int pHeight>;

     label1:
        return i0;
    }

    public int getWidth()
    {
        int i0;
        org.jdesktop.swingx.JXLabel r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXLabel;

        i0 = specialinvoke r0.<javax.swing.JLabel: int getWidth()>();

        $z0 = r0.<org.jdesktop.swingx.JXLabel: boolean painting>;

        if $z0 == 0 goto label1;

        i0 = r0.<org.jdesktop.swingx.JXLabel: int pWidth>;

     label1:
        return i0;
    }

    protected org.jdesktop.swingx.JXLabel$MultiLineSupport getMultiLineSupport()
    {
        org.jdesktop.swingx.JXLabel$MultiLineSupport $r0;
        org.jdesktop.swingx.JXLabel r1;

        r1 := @this: org.jdesktop.swingx.JXLabel;

        $r0 = new org.jdesktop.swingx.JXLabel$MultiLineSupport;

        specialinvoke $r0.<org.jdesktop.swingx.JXLabel$MultiLineSupport: void <init>()>();

        return $r0;
    }

    protected int getOccupiedWidth()
    {
        int $i0;
        org.jdesktop.swingx.JXLabel r0;

        r0 := @this: org.jdesktop.swingx.JXLabel;

        $i0 = r0.<org.jdesktop.swingx.JXLabel: int occupiedWidth>;

        return $i0;
    }

    static javax.swing.text.View access$000(org.jdesktop.swingx.JXLabel)
    {
        javax.swing.text.View $r1;
        org.jdesktop.swingx.JXLabel r0;

        r0 := @parameter0: org.jdesktop.swingx.JXLabel;

        $r1 = specialinvoke r0.<org.jdesktop.swingx.JXLabel: javax.swing.text.View getWrappingView()>();

        return $r1;
    }

    static boolean access$202(org.jdesktop.swingx.JXLabel, boolean)
    {
        org.jdesktop.swingx.JXLabel r0;
        boolean z0;

        r0 := @parameter0: org.jdesktop.swingx.JXLabel;

        z0 := @parameter1: boolean;

        r0.<org.jdesktop.swingx.JXLabel: boolean dontIgnoreRepaint> = z0;

        return z0;
    }

    static int access$600(org.jdesktop.swingx.JXLabel)
    {
        int $i0;
        org.jdesktop.swingx.JXLabel r0;

        r0 := @parameter0: org.jdesktop.swingx.JXLabel;

        $i0 = r0.<org.jdesktop.swingx.JXLabel: int maxLineSpan>;

        return $i0;
    }

    public static void <clinit>()
    {
        <org.jdesktop.swingx.JXLabel: java.lang.String oldRendererKey> = "washtml";

        <org.jdesktop.swingx.JXLabel: double VERTICAL_RIGHT> = 1.5707963267948966;

        <org.jdesktop.swingx.JXLabel: double VERTICAL_LEFT> = 4.71238898038469;

        <org.jdesktop.swingx.JXLabel: double INVERTED> = 3.141592653589793;

        <org.jdesktop.swingx.JXLabel: double NORMAL> = 0.0;

        return;
    }
}
