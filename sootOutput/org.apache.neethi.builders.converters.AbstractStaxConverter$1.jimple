class org.apache.neethi.builders.converters.AbstractStaxConverter$1 extends java.lang.Object implements java.util.Iterator
{
    boolean first;
    final javax.xml.stream.XMLStreamReader val$s;
    final javax.xml.namespace.QName val$base;
    final org.apache.neethi.builders.converters.AbstractStaxConverter this$0;

    void <init>(org.apache.neethi.builders.converters.AbstractStaxConverter, javax.xml.stream.XMLStreamReader, javax.xml.namespace.QName)
    {
        org.apache.neethi.builders.converters.AbstractStaxConverter$1 r0;
        javax.xml.stream.XMLStreamReader r2;
        org.apache.neethi.builders.converters.AbstractStaxConverter r1;
        javax.xml.namespace.QName r3;

        r0 := @this: org.apache.neethi.builders.converters.AbstractStaxConverter$1;

        r1 := @parameter0: org.apache.neethi.builders.converters.AbstractStaxConverter;

        r2 := @parameter1: javax.xml.stream.XMLStreamReader;

        r3 := @parameter2: javax.xml.namespace.QName;

        r0.<org.apache.neethi.builders.converters.AbstractStaxConverter$1: org.apache.neethi.builders.converters.AbstractStaxConverter this$0> = r1;

        r0.<org.apache.neethi.builders.converters.AbstractStaxConverter$1: javax.xml.stream.XMLStreamReader val$s> = r2;

        r0.<org.apache.neethi.builders.converters.AbstractStaxConverter$1: javax.xml.namespace.QName val$base> = r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.neethi.builders.converters.AbstractStaxConverter$1: boolean first> = 1;

        return;
    }

    public boolean hasNext()
    {
        org.apache.neethi.builders.converters.AbstractStaxConverter$1 r0;
        javax.xml.stream.XMLStreamReader $r1, $r2, $r3, $r6, $r7, $r8, $r9, $r10;
        int $i0, i1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Exception $r11;
        javax.xml.namespace.QName $r4, $r5;

        r0 := @this: org.apache.neethi.builders.converters.AbstractStaxConverter$1;

        $z0 = r0.<org.apache.neethi.builders.converters.AbstractStaxConverter$1: boolean first>;

        if $z0 == 0 goto label03;

        r0.<org.apache.neethi.builders.converters.AbstractStaxConverter$1: boolean first> = 0;

        $r10 = r0.<org.apache.neethi.builders.converters.AbstractStaxConverter$1: javax.xml.stream.XMLStreamReader val$s>;

        $i0 = interfaceinvoke $r10.<javax.xml.stream.XMLStreamReader: int getEventType()>();

        if $i0 == 2 goto label01;

        $z4 = 1;

        goto label02;

     label01:
        $z4 = 0;

     label02:
        return $z4;

     label03:
        $r1 = r0.<org.apache.neethi.builders.converters.AbstractStaxConverter$1: javax.xml.stream.XMLStreamReader val$s>;

        i1 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: int next()>();

     label04:
        $r2 = r0.<org.apache.neethi.builders.converters.AbstractStaxConverter$1: javax.xml.stream.XMLStreamReader val$s>;

        $z1 = interfaceinvoke $r2.<javax.xml.stream.XMLStreamReader: boolean hasNext()>();

        if $z1 == 0 goto label05;

        if i1 == 2 goto label05;

        if i1 == 1 goto label05;

        $r9 = r0.<org.apache.neethi.builders.converters.AbstractStaxConverter$1: javax.xml.stream.XMLStreamReader val$s>;

        i1 = interfaceinvoke $r9.<javax.xml.stream.XMLStreamReader: int next()>();

        goto label04;

     label05:
        if i1 != 2 goto label07;

        $r3 = r0.<org.apache.neethi.builders.converters.AbstractStaxConverter$1: javax.xml.stream.XMLStreamReader val$s>;

        $r4 = interfaceinvoke $r3.<javax.xml.stream.XMLStreamReader: javax.xml.namespace.QName getName()>();

        $r5 = r0.<org.apache.neethi.builders.converters.AbstractStaxConverter$1: javax.xml.namespace.QName val$base>;

        $z2 = virtualinvoke $r4.<javax.xml.namespace.QName: boolean equals(java.lang.Object)>($r5);

        if $z2 != 0 goto label07;

        $r6 = r0.<org.apache.neethi.builders.converters.AbstractStaxConverter$1: javax.xml.stream.XMLStreamReader val$s>;

        i1 = interfaceinvoke $r6.<javax.xml.stream.XMLStreamReader: int next()>();

     label06:
        $r7 = r0.<org.apache.neethi.builders.converters.AbstractStaxConverter$1: javax.xml.stream.XMLStreamReader val$s>;

        $z3 = interfaceinvoke $r7.<javax.xml.stream.XMLStreamReader: boolean hasNext()>();

        if $z3 == 0 goto label07;

        if i1 == 2 goto label07;

        if i1 == 1 goto label07;

        $r8 = r0.<org.apache.neethi.builders.converters.AbstractStaxConverter$1: javax.xml.stream.XMLStreamReader val$s>;

        i1 = interfaceinvoke $r8.<javax.xml.stream.XMLStreamReader: int next()>();

        goto label06;

     label07:
        if i1 != 1 goto label08;

        $z5 = 1;

        goto label09;

     label08:
        $z5 = 0;

     label09:
        return $z5;

     label10:
        $r11 := @caughtexception;

        return 0;

        catch java.lang.Exception from label03 to label09 with label10;
    }

    public javax.xml.stream.XMLStreamReader next()
    {
        org.apache.neethi.builders.converters.AbstractStaxConverter$1 r0;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @this: org.apache.neethi.builders.converters.AbstractStaxConverter$1;

        $r1 = r0.<org.apache.neethi.builders.converters.AbstractStaxConverter$1: javax.xml.stream.XMLStreamReader val$s>;

        return $r1;
    }

    public void remove()
    {
        java.lang.UnsupportedOperationException $r0;
        org.apache.neethi.builders.converters.AbstractStaxConverter$1 r1;

        r1 := @this: org.apache.neethi.builders.converters.AbstractStaxConverter$1;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public volatile java.lang.Object next()
    {
        org.apache.neethi.builders.converters.AbstractStaxConverter$1 r0;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @this: org.apache.neethi.builders.converters.AbstractStaxConverter$1;

        $r1 = virtualinvoke r0.<org.apache.neethi.builders.converters.AbstractStaxConverter$1: javax.xml.stream.XMLStreamReader next()>();

        return $r1;
    }
}
