public class org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic extends java.lang.Object
{
    private final org.waveprotocol.wave.model.document.ReadableWDocument doc;
    private final org.waveprotocol.wave.model.document.util.AnnotationRegistry annotationLogic;

    public void <init>(org.waveprotocol.wave.model.document.ReadableWDocument, org.waveprotocol.wave.model.document.util.AnnotationRegistry)
    {
        org.waveprotocol.wave.model.document.ReadableWDocument r1;
        org.waveprotocol.wave.model.document.util.AnnotationRegistry r2;
        org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic r0;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic;

        r1 := @parameter0: org.waveprotocol.wave.model.document.ReadableWDocument;

        r2 := @parameter1: org.waveprotocol.wave.model.document.util.AnnotationRegistry;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic: org.waveprotocol.wave.model.document.ReadableWDocument doc> = r1;

        r0.<org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic: org.waveprotocol.wave.model.document.util.AnnotationRegistry annotationLogic> = r2;

        return;
    }

    public org.waveprotocol.wave.model.util.StringMap stripKeys(org.waveprotocol.wave.model.document.ReadableAnnotationSet, int, org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection, org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType, org.waveprotocol.wave.model.document.operation.Nindo$Builder)
    {
        org.waveprotocol.wave.model.document.ReadableAnnotationSet r2;
        org.waveprotocol.wave.model.util.StringMap $r0, $r1, r8, $r10, $r15, $r16;
        org.waveprotocol.wave.model.util.ReadableStringSet $r3, $r11;
        org.waveprotocol.wave.model.document.operation.Nindo$Builder r14;
        int i0;
        org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection r6, $r7, $r9;
        org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic r5;
        org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic$2 $r12;
        org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType r13;
        org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic$1 $r4;

        r5 := @this: org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic;

        r2 := @parameter0: org.waveprotocol.wave.model.document.ReadableAnnotationSet;

        i0 := @parameter1: int;

        r6 := @parameter2: org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection;

        r13 := @parameter3: org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType;

        r14 := @parameter4: org.waveprotocol.wave.model.document.operation.Nindo$Builder;

        $r0 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        $r3 = interfaceinvoke r2.<org.waveprotocol.wave.model.document.ReadableAnnotationSet: org.waveprotocol.wave.model.util.ReadableStringSet knownKeys()>();

        $r4 = new org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic$1;

        specialinvoke $r4.<org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic$1: void <init>(org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic,int,org.waveprotocol.wave.model.document.ReadableAnnotationSet,org.waveprotocol.wave.model.util.StringMap,org.waveprotocol.wave.model.util.StringMap)>(r5, i0, r2, $r0, $r1);

        interfaceinvoke $r3.<org.waveprotocol.wave.model.util.ReadableStringSet: void each(org.waveprotocol.wave.model.util.ReadableStringSet$Proc)>($r4);

        $r7 = <org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection: org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection RIGHT>;

        if r6 != $r7 goto label1;

        $r15 = $r1;

        goto label2;

     label1:
        $r15 = $r0;

     label2:
        r8 = $r15;

        $r9 = <org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection: org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection RIGHT>;

        if r6 != $r9 goto label3;

        $r16 = $r0;

        goto label4;

     label3:
        $r16 = $r1;

     label4:
        $r10 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        $r11 = interfaceinvoke r2.<org.waveprotocol.wave.model.document.ReadableAnnotationSet: org.waveprotocol.wave.model.util.ReadableStringSet knownKeys()>();

        $r12 = new org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic$2;

        specialinvoke $r12.<org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic$2: void <init>(org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic,org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType,org.waveprotocol.wave.model.document.operation.Nindo$Builder,org.waveprotocol.wave.model.util.StringMap,org.waveprotocol.wave.model.util.StringMap,org.waveprotocol.wave.model.util.StringMap,org.waveprotocol.wave.model.util.StringMap)>(r5, r13, r14, r8, $r16, $r0, $r10);

        interfaceinvoke $r11.<org.waveprotocol.wave.model.util.ReadableStringSet: void each(org.waveprotocol.wave.model.util.ReadableStringSet$Proc)>($r12);

        return $r10;
    }

    public void unstripKeys(org.waveprotocol.wave.model.document.operation.Nindo$Builder, org.waveprotocol.wave.model.util.ReadableStringSet, org.waveprotocol.wave.model.util.ReadableStringSet)
    {
        org.waveprotocol.wave.model.util.ReadableStringSet r0, r3;
        org.waveprotocol.wave.model.document.operation.Nindo$Builder r4;
        org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic$3 $r1;
        org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic r2;

        r2 := @this: org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic;

        r4 := @parameter0: org.waveprotocol.wave.model.document.operation.Nindo$Builder;

        r0 := @parameter1: org.waveprotocol.wave.model.util.ReadableStringSet;

        r3 := @parameter2: org.waveprotocol.wave.model.util.ReadableStringSet;

        $r1 = new org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic$3;

        specialinvoke $r1.<org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic$3: void <init>(org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic,org.waveprotocol.wave.model.util.ReadableStringSet,org.waveprotocol.wave.model.document.operation.Nindo$Builder)>(r2, r3, r4);

        interfaceinvoke r0.<org.waveprotocol.wave.model.util.ReadableStringSet: void each(org.waveprotocol.wave.model.util.ReadableStringSet$Proc)>($r1);

        return;
    }

    private boolean interpretReplace(java.lang.String, org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType, org.waveprotocol.wave.model.document.operation.Nindo$Builder, org.waveprotocol.wave.model.util.StringMap, org.waveprotocol.wave.model.util.StringMap, org.waveprotocol.wave.model.util.StringMap, org.waveprotocol.wave.model.util.StringMap)
    {
        org.waveprotocol.wave.model.util.StringMap r4, r5, r10, r12;
        org.waveprotocol.wave.model.document.util.AnnotationRegistry $r2;
        org.waveprotocol.wave.model.document.operation.Nindo$Builder r9;
        int[] $r7;
        int $i0, $i1;
        java.lang.String r1;
        boolean $z0, $z1, $z2;
        org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic r0;
        org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType r6;
        java.lang.Object $r11, $r13, $r14, $r15, $r16;
        org.waveprotocol.wave.model.document.AnnotationBehaviour $r3;
        org.waveprotocol.wave.model.document.AnnotationBehaviour$InheritDirection $r8;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic;

        r1 := @parameter0: java.lang.String;

        r6 := @parameter1: org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType;

        r9 := @parameter2: org.waveprotocol.wave.model.document.operation.Nindo$Builder;

        r4 := @parameter3: org.waveprotocol.wave.model.util.StringMap;

        r5 := @parameter4: org.waveprotocol.wave.model.util.StringMap;

        r10 := @parameter5: org.waveprotocol.wave.model.util.StringMap;

        r12 := @parameter6: org.waveprotocol.wave.model.util.StringMap;

        $r2 = r0.<org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic: org.waveprotocol.wave.model.document.util.AnnotationRegistry annotationLogic>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.util.AnnotationRegistry: org.waveprotocol.wave.model.document.AnnotationBehaviour getClosestBehaviour(java.lang.String)>(r1);

        if $r3 == null goto label4;

        $r7 = <org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic$5: int[] $SwitchMap$org$waveprotocol$wave$model$document$AnnotationBehaviour$InheritDirection>;

        $r8 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.AnnotationBehaviour: org.waveprotocol.wave.model.document.AnnotationBehaviour$InheritDirection replace(org.waveprotocol.wave.model.util.StringMap,org.waveprotocol.wave.model.util.StringMap,org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType)>(r4, r5, r6);

        $i0 = virtualinvoke $r8.<org.waveprotocol.wave.model.document.AnnotationBehaviour$InheritDirection: int ordinal()>();

        $i1 = $r7[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            default: goto label4;
        };

     label1:
        $r15 = interfaceinvoke r4.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>(r1);

        $r16 = interfaceinvoke r10.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>(r1);

        $z2 = specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic: boolean safeSet(org.waveprotocol.wave.model.document.operation.Nindo$Builder,java.lang.String,java.lang.Object,java.lang.Object,org.waveprotocol.wave.model.util.StringMap)>(r9, r1, $r15, $r16, r12);

        return $z2;

     label2:
        $r13 = interfaceinvoke r5.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>(r1);

        $r14 = interfaceinvoke r10.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>(r1);

        $z1 = specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic: boolean safeSet(org.waveprotocol.wave.model.document.operation.Nindo$Builder,java.lang.String,java.lang.Object,java.lang.Object,org.waveprotocol.wave.model.util.StringMap)>(r9, r1, $r13, $r14, r12);

        return $z1;

     label3:
        $r11 = interfaceinvoke r10.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>(r1);

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic: boolean safeSet(org.waveprotocol.wave.model.document.operation.Nindo$Builder,java.lang.String,java.lang.Object,java.lang.Object,org.waveprotocol.wave.model.util.StringMap)>(r9, r1, null, $r11, r12);

        return $z0;

     label4:
        return 0;
    }

    private boolean safeSet(org.waveprotocol.wave.model.document.operation.Nindo$Builder, java.lang.String, java.lang.Object, java.lang.Object, org.waveprotocol.wave.model.util.StringMap)
    {
        org.waveprotocol.wave.model.util.StringMap r5;
        org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic r6;
        org.waveprotocol.wave.model.document.operation.Nindo$Builder r3;
        java.lang.Object r0, r2;
        java.lang.String r1, r4, $r7, $r8;
        boolean $z0;

        r6 := @this: org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic;

        r3 := @parameter0: org.waveprotocol.wave.model.document.operation.Nindo$Builder;

        r4 := @parameter1: java.lang.String;

        r0 := @parameter2: java.lang.Object;

        r2 := @parameter3: java.lang.Object;

        r5 := @parameter4: org.waveprotocol.wave.model.util.StringMap;

        if r0 != null goto label1;

        $r7 = null;

        goto label2;

     label1:
        $r7 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

     label2:
        r1 = $r7;

        if r2 != null goto label3;

        $r8 = null;

        goto label4;

     label3:
        $r8 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

     label4:
        $z0 = staticinvoke <org.waveprotocol.wave.model.util.ValueUtils: boolean notEqual(java.lang.Object,java.lang.Object)>(r1, $r8);

        if $z0 == 0 goto label5;

        virtualinvoke r3.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void startAnnotation(java.lang.String,java.lang.String)>(r4, r1);

        interfaceinvoke r5.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>(r4, r1);

        return 1;

     label5:
        return 0;
    }

    public java.util.List extractNormalizedAnnotation(org.waveprotocol.wave.model.document.util.Point, org.waveprotocol.wave.model.document.util.Point)
    {
        java.lang.Iterable $r9;
        org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic r0;
        org.waveprotocol.wave.model.util.ReadableStringSet $r6, $r7;
        java.util.List $r10;
        int $i0, $i1, $i2;
        org.waveprotocol.wave.model.document.ReadableWDocument $r2, $r4, $r5, $r8;
        org.waveprotocol.wave.model.document.util.Point r1, r3;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        r3 := @parameter1: org.waveprotocol.wave.model.document.util.Point;

        $r2 = r0.<org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $i0 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ReadableWDocument: int getLocation(org.waveprotocol.wave.model.document.util.Point)>(r1);

        $r4 = r0.<org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $i1 = interfaceinvoke $r4.<org.waveprotocol.wave.model.document.ReadableWDocument: int getLocation(org.waveprotocol.wave.model.document.util.Point)>(r3);

        $r5 = r0.<org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.model.document.ReadableWDocument: org.waveprotocol.wave.model.util.ReadableStringSet knownKeys()>();

        $r7 = specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic: org.waveprotocol.wave.model.util.ReadableStringSet filterContentAnnotations(org.waveprotocol.wave.model.util.ReadableStringSet)>($r6);

        $r8 = r0.<org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r9 = interfaceinvoke $r8.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Iterable rangedAnnotations(int,int,org.waveprotocol.wave.model.util.ReadableStringSet)>($i0, $i1, $r7);

        $i2 = $i1 - $i0;

        $r10 = staticinvoke <org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic: java.util.List trimAnnotations(java.lang.Iterable,int,int)>($r9, $i0, $i2);

        return $r10;
    }

    private static java.util.List trimAnnotations(java.lang.Iterable, int, int)
    {
        org.waveprotocol.wave.model.document.util.RangedAnnotationImpl $r5;
        java.lang.Iterable r1;
        java.util.ArrayList $r0;
        int $i0, i1, $i2, $i3, $i4, i5, $i6, $i7;
        java.lang.String $r6;
        boolean $z0;
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.document.RangedAnnotation r4;
        java.lang.Object $r3, $r7;

        r1 := @parameter0: java.lang.Iterable;

        i1 := @parameter1: int;

        i5 := @parameter2: int;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.document.RangedAnnotation) $r3;

        $i0 = interfaceinvoke r4.<org.waveprotocol.wave.model.document.RangedAnnotation: int start()>();

        $i2 = $i0 - i1;

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i2);

        $i4 = interfaceinvoke r4.<org.waveprotocol.wave.model.document.RangedAnnotation: int end()>();

        $i6 = $i4 - i1;

        $i7 = staticinvoke <java.lang.Math: int min(int,int)>($i6, i5);

        $r5 = new org.waveprotocol.wave.model.document.util.RangedAnnotationImpl;

        $r6 = interfaceinvoke r4.<org.waveprotocol.wave.model.document.RangedAnnotation: java.lang.String key()>();

        $r7 = interfaceinvoke r4.<org.waveprotocol.wave.model.document.RangedAnnotation: java.lang.Object value()>();

        specialinvoke $r5.<org.waveprotocol.wave.model.document.util.RangedAnnotationImpl: void <init>(java.lang.String,java.lang.Object,int,int)>($r6, $r7, $i3, $i7);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label1;

     label2:
        return $r0;
    }

    private org.waveprotocol.wave.model.util.ReadableStringSet filterContentAnnotations(org.waveprotocol.wave.model.util.ReadableStringSet)
    {
        org.waveprotocol.wave.model.util.ReadableStringSet r1;
        org.waveprotocol.wave.model.util.StringSet $r0;
        org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic$4 $r2;
        org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic r3;

        r3 := @this: org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic;

        r1 := @parameter0: org.waveprotocol.wave.model.util.ReadableStringSet;

        $r0 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringSet createStringSet()>();

        $r2 = new org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic$4;

        specialinvoke $r2.<org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic$4: void <init>(org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic,org.waveprotocol.wave.model.util.StringSet)>(r3, $r0);

        interfaceinvoke r1.<org.waveprotocol.wave.model.util.ReadableStringSet: void each(org.waveprotocol.wave.model.util.ReadableStringSet$Proc)>($r2);

        return $r0;
    }

    static boolean access$000(org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic, java.lang.String, org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType, org.waveprotocol.wave.model.document.operation.Nindo$Builder, org.waveprotocol.wave.model.util.StringMap, org.waveprotocol.wave.model.util.StringMap, org.waveprotocol.wave.model.util.StringMap, org.waveprotocol.wave.model.util.StringMap)
    {
        org.waveprotocol.wave.model.util.StringMap r4, r5, r6, r7;
        org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic r0;
        org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType r2;
        org.waveprotocol.wave.model.document.operation.Nindo$Builder r3;
        java.lang.String r1;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType;

        r3 := @parameter3: org.waveprotocol.wave.model.document.operation.Nindo$Builder;

        r4 := @parameter4: org.waveprotocol.wave.model.util.StringMap;

        r5 := @parameter5: org.waveprotocol.wave.model.util.StringMap;

        r6 := @parameter6: org.waveprotocol.wave.model.util.StringMap;

        r7 := @parameter7: org.waveprotocol.wave.model.util.StringMap;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic: boolean interpretReplace(java.lang.String,org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType,org.waveprotocol.wave.model.document.operation.Nindo$Builder,org.waveprotocol.wave.model.util.StringMap,org.waveprotocol.wave.model.util.StringMap,org.waveprotocol.wave.model.util.StringMap,org.waveprotocol.wave.model.util.StringMap)>(r1, r2, r3, r4, r5, r6, r7);

        return $z0;
    }

    static org.waveprotocol.wave.model.document.util.AnnotationRegistry access$100(org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic)
    {
        org.waveprotocol.wave.model.document.util.AnnotationRegistry $r1;
        org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic;

        $r1 = r0.<org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic: org.waveprotocol.wave.model.document.util.AnnotationRegistry annotationLogic>;

        return $r1;
    }
}
