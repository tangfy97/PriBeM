public class org.springframework.expression.spel.ast.InlineList extends org.springframework.expression.spel.ast.SpelNodeImpl
{
    org.springframework.expression.TypedValue constant;

    public transient void <init>(int, org.springframework.expression.spel.ast.SpelNodeImpl[])
    {
        int i0;
        org.springframework.expression.spel.ast.InlineList r0;
        org.springframework.expression.spel.ast.SpelNodeImpl[] r1;

        r0 := @this: org.springframework.expression.spel.ast.InlineList;

        i0 := @parameter0: int;

        r1 := @parameter1: org.springframework.expression.spel.ast.SpelNodeImpl[];

        specialinvoke r0.<org.springframework.expression.spel.ast.SpelNodeImpl: void <init>(int,org.springframework.expression.spel.ast.SpelNodeImpl[])>(i0, r1);

        r0.<org.springframework.expression.spel.ast.InlineList: org.springframework.expression.TypedValue constant> = null;

        specialinvoke r0.<org.springframework.expression.spel.ast.InlineList: void checkIfConstant()>();

        return;
    }

    private void checkIfConstant()
    {
        org.springframework.expression.spel.ast.InlineList r0, $r4, r12;
        java.util.ArrayList $r2;
        org.springframework.core.convert.TypeDescriptor $r11;
        int $i0, $i1, i2, i3;
        org.springframework.expression.TypedValue $r7, $r9;
        boolean $z0, $z1, $z2, $z3, $z4, z5;
        org.springframework.expression.spel.ast.Literal $r6;
        java.util.List $r5, $r10;
        java.lang.Object $r8;
        org.springframework.expression.spel.SpelNode $r1, $r3;

        r0 := @this: org.springframework.expression.spel.ast.InlineList;

        z5 = 1;

        i2 = 0;

        $i0 = virtualinvoke r0.<org.springframework.expression.spel.ast.InlineList: int getChildCount()>();

        goto label4;

     label1:
        $r1 = virtualinvoke r0.<org.springframework.expression.spel.ast.InlineList: org.springframework.expression.spel.SpelNode getChild(int)>(i2);

        $z0 = $r1 instanceof org.springframework.expression.spel.ast.Literal;

        if $z0 != 0 goto label3;

        $z1 = $r1 instanceof org.springframework.expression.spel.ast.InlineList;

        if $z1 == 0 goto label2;

        r12 = (org.springframework.expression.spel.ast.InlineList) $r1;

        $z2 = virtualinvoke r12.<org.springframework.expression.spel.ast.InlineList: boolean isConstant()>();

        if $z2 != 0 goto label3;

        z5 = 0;

        goto label3;

     label2:
        z5 = 0;

     label3:
        i2 = i2 + 1;

     label4:
        if i2 < $i0 goto label1;

        if z5 == 0 goto label9;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $i1 = virtualinvoke r0.<org.springframework.expression.spel.ast.InlineList: int getChildCount()>();

        i3 = 0;

        goto label8;

     label5:
        $r3 = virtualinvoke r0.<org.springframework.expression.spel.ast.InlineList: org.springframework.expression.spel.SpelNode getChild(int)>(i3);

        $z3 = $r3 instanceof org.springframework.expression.spel.ast.Literal;

        if $z3 == 0 goto label6;

        $r6 = (org.springframework.expression.spel.ast.Literal) $r3;

        $r7 = virtualinvoke $r6.<org.springframework.expression.spel.ast.Literal: org.springframework.expression.TypedValue getLiteralValue()>();

        $r8 = virtualinvoke $r7.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label7;

     label6:
        $z4 = $r3 instanceof org.springframework.expression.spel.ast.InlineList;

        if $z4 == 0 goto label7;

        $r4 = (org.springframework.expression.spel.ast.InlineList) $r3;

        $r5 = specialinvoke $r4.<org.springframework.expression.spel.ast.InlineList: java.util.List getConstantValue()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r5);

     label7:
        i3 = i3 + 1;

     label8:
        if i3 < $i1 goto label5;

        $r9 = new org.springframework.expression.TypedValue;

        $r10 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r2);

        $r11 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>(class "Ljava/util/List;");

        specialinvoke $r9.<org.springframework.expression.TypedValue: void <init>(java.lang.Object,org.springframework.core.convert.TypeDescriptor)>($r10, $r11);

        r0.<org.springframework.expression.spel.ast.InlineList: org.springframework.expression.TypedValue constant> = $r9;

     label9:
        return;
    }

    public org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.spel.ast.InlineList r0;
        java.util.ArrayList $r2;
        org.springframework.core.convert.TypeDescriptor $r7;
        int $i0, i1;
        org.springframework.expression.spel.ExpressionState r4;
        java.lang.Object $r5;
        org.springframework.expression.TypedValue $r1, $r6, $r8;
        org.springframework.expression.spel.SpelNode $r3;

        r0 := @this: org.springframework.expression.spel.ast.InlineList;

        r4 := @parameter0: org.springframework.expression.spel.ExpressionState;

        $r1 = r0.<org.springframework.expression.spel.ast.InlineList: org.springframework.expression.TypedValue constant>;

        if $r1 == null goto label1;

        $r8 = r0.<org.springframework.expression.spel.ast.InlineList: org.springframework.expression.TypedValue constant>;

        return $r8;

     label1:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $i0 = virtualinvoke r0.<org.springframework.expression.spel.ast.InlineList: int getChildCount()>();

        i1 = 0;

        goto label3;

     label2:
        $r3 = virtualinvoke r0.<org.springframework.expression.spel.ast.InlineList: org.springframework.expression.spel.SpelNode getChild(int)>(i1);

        $r5 = interfaceinvoke $r3.<org.springframework.expression.spel.SpelNode: java.lang.Object getValue(org.springframework.expression.spel.ExpressionState)>(r4);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r5);

        i1 = i1 + 1;

     label3:
        if i1 < $i0 goto label2;

        $r6 = new org.springframework.expression.TypedValue;

        $r7 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>(class "Ljava/util/List;");

        specialinvoke $r6.<org.springframework.expression.TypedValue: void <init>(java.lang.Object,org.springframework.core.convert.TypeDescriptor)>($r2, $r7);

        return $r6;
    }

    public java.lang.String toStringAST()
    {
        int $i0, i1;
        java.lang.StringBuilder $r0;
        org.springframework.expression.spel.ast.InlineList r1;
        java.lang.String $r3, $r4;
        org.springframework.expression.spel.SpelNode $r2;

        r1 := @this: org.springframework.expression.spel.ast.InlineList;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(123);

        $i0 = virtualinvoke r1.<org.springframework.expression.spel.ast.InlineList: int getChildCount()>();

        i1 = 0;

        goto label3;

     label1:
        if i1 <= 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label2:
        $r2 = virtualinvoke r1.<org.springframework.expression.spel.ast.InlineList: org.springframework.expression.spel.SpelNode getChild(int)>(i1);

        $r3 = interfaceinvoke $r2.<org.springframework.expression.spel.SpelNode: java.lang.String toStringAST()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        i1 = i1 + 1;

     label3:
        if i1 < $i0 goto label1;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public boolean isConstant()
    {
        org.springframework.expression.spel.ast.InlineList r0;
        org.springframework.expression.TypedValue $r1;

        r0 := @this: org.springframework.expression.spel.ast.InlineList;

        $r1 = r0.<org.springframework.expression.spel.ast.InlineList: org.springframework.expression.TypedValue constant>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    private java.util.List getConstantValue()
    {
        java.util.List $r3;
        org.springframework.expression.spel.ast.InlineList r0;
        java.lang.Object $r2;
        org.springframework.expression.TypedValue $r1;

        r0 := @this: org.springframework.expression.spel.ast.InlineList;

        $r1 = r0.<org.springframework.expression.spel.ast.InlineList: org.springframework.expression.TypedValue constant>;

        $r2 = virtualinvoke $r1.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        $r3 = (java.util.List) $r2;

        return $r3;
    }
}
