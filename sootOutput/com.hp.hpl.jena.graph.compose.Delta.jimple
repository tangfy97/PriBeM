public class com.hp.hpl.jena.graph.compose.Delta extends com.hp.hpl.jena.graph.compose.Dyadic implements com.hp.hpl.jena.graph.Graph
{
    private com.hp.hpl.jena.graph.Graph base;

    public void <init>(com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.graph.compose.Delta r0;
        com.hp.hpl.jena.graph.Graph $r1, $r2, r3;

        r0 := @this: com.hp.hpl.jena.graph.compose.Delta;

        r3 := @parameter0: com.hp.hpl.jena.graph.Graph;

        $r1 = staticinvoke <com.hp.hpl.jena.graph.Factory: com.hp.hpl.jena.graph.Graph createGraphMem()>();

        $r2 = staticinvoke <com.hp.hpl.jena.graph.Factory: com.hp.hpl.jena.graph.Graph createGraphMem()>();

        specialinvoke r0.<com.hp.hpl.jena.graph.compose.Dyadic: void <init>(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Graph)>($r1, $r2);

        r0.<com.hp.hpl.jena.graph.compose.Delta: com.hp.hpl.jena.graph.Graph base> = r3;

        return;
    }

    public com.hp.hpl.jena.graph.Graph getAdditions()
    {
        com.hp.hpl.jena.graph.compose.Delta r0;
        com.hp.hpl.jena.graph.Graph $r1;

        r0 := @this: com.hp.hpl.jena.graph.compose.Delta;

        $r1 = r0.<com.hp.hpl.jena.graph.compose.Delta: com.hp.hpl.jena.graph.Graph L>;

        return $r1;
    }

    public com.hp.hpl.jena.graph.Graph getDeletions()
    {
        com.hp.hpl.jena.graph.compose.Delta r0;
        com.hp.hpl.jena.graph.Graph $r1;

        r0 := @this: com.hp.hpl.jena.graph.compose.Delta;

        $r1 = r0.<com.hp.hpl.jena.graph.compose.Delta: com.hp.hpl.jena.graph.Graph R>;

        return $r1;
    }

    public void performAdd(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.compose.Delta r0;
        com.hp.hpl.jena.graph.Graph $r2, $r3, $r4;
        com.hp.hpl.jena.graph.Triple r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.graph.compose.Delta;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r2 = r0.<com.hp.hpl.jena.graph.compose.Delta: com.hp.hpl.jena.graph.Graph base>;

        $z0 = interfaceinvoke $r2.<com.hp.hpl.jena.graph.Graph: boolean contains(com.hp.hpl.jena.graph.Triple)>(r1);

        if $z0 != 0 goto label1;

        $r4 = r0.<com.hp.hpl.jena.graph.compose.Delta: com.hp.hpl.jena.graph.Graph L>;

        interfaceinvoke $r4.<com.hp.hpl.jena.graph.Graph: void add(com.hp.hpl.jena.graph.Triple)>(r1);

     label1:
        $r3 = r0.<com.hp.hpl.jena.graph.compose.Delta: com.hp.hpl.jena.graph.Graph R>;

        interfaceinvoke $r3.<com.hp.hpl.jena.graph.Graph: void delete(com.hp.hpl.jena.graph.Triple)>(r1);

        return;
    }

    public void performDelete(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.compose.Delta r0;
        com.hp.hpl.jena.graph.Graph $r2, $r3, $r4;
        com.hp.hpl.jena.graph.Triple r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.graph.compose.Delta;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r2 = r0.<com.hp.hpl.jena.graph.compose.Delta: com.hp.hpl.jena.graph.Graph L>;

        interfaceinvoke $r2.<com.hp.hpl.jena.graph.Graph: void delete(com.hp.hpl.jena.graph.Triple)>(r1);

        $r3 = r0.<com.hp.hpl.jena.graph.compose.Delta: com.hp.hpl.jena.graph.Graph base>;

        $z0 = interfaceinvoke $r3.<com.hp.hpl.jena.graph.Graph: boolean contains(com.hp.hpl.jena.graph.Triple)>(r1);

        if $z0 == 0 goto label1;

        $r4 = r0.<com.hp.hpl.jena.graph.compose.Delta: com.hp.hpl.jena.graph.Graph R>;

        interfaceinvoke $r4.<com.hp.hpl.jena.graph.Graph: void add(com.hp.hpl.jena.graph.Triple)>(r1);

     label1:
        return;
    }

    protected com.hp.hpl.jena.util.iterator.ExtendedIterator _graphBaseFind(com.hp.hpl.jena.graph.TripleMatch)
    {
        com.hp.hpl.jena.util.iterator.Filter $r6;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r3, $r5, $r7, $r9, $r10;
        com.hp.hpl.jena.graph.compose.Delta r0;
        com.hp.hpl.jena.graph.TripleMatch r1;
        com.hp.hpl.jena.graph.Graph $r2, $r4, $r8;

        r0 := @this: com.hp.hpl.jena.graph.compose.Delta;

        r1 := @parameter0: com.hp.hpl.jena.graph.TripleMatch;

        $r2 = r0.<com.hp.hpl.jena.graph.compose.Delta: com.hp.hpl.jena.graph.Graph base>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.TripleMatch)>(r1);

        $r4 = r0.<com.hp.hpl.jena.graph.compose.Delta: com.hp.hpl.jena.graph.Graph R>;

        $r5 = staticinvoke <com.hp.hpl.jena.graph.GraphUtil: com.hp.hpl.jena.util.iterator.ExtendedIterator findAll(com.hp.hpl.jena.graph.Graph)>($r4);

        $r6 = staticinvoke <com.hp.hpl.jena.graph.compose.Delta: com.hp.hpl.jena.util.iterator.Filter ifIn(com.hp.hpl.jena.util.iterator.ClosableIterator)>($r5);

        $r7 = interfaceinvoke $r3.<com.hp.hpl.jena.util.iterator.ExtendedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator filterDrop(com.hp.hpl.jena.util.iterator.Filter)>($r6);

        $r8 = r0.<com.hp.hpl.jena.graph.compose.Delta: com.hp.hpl.jena.graph.Graph L>;

        $r9 = interfaceinvoke $r8.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.TripleMatch)>(r1);

        $r10 = interfaceinvoke $r7.<com.hp.hpl.jena.util.iterator.ExtendedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator andThen(java.util.Iterator)>($r9);

        return $r10;
    }

    public void close()
    {
        com.hp.hpl.jena.graph.compose.Delta r0;
        com.hp.hpl.jena.graph.Graph $r1;

        r0 := @this: com.hp.hpl.jena.graph.compose.Delta;

        specialinvoke r0.<com.hp.hpl.jena.graph.compose.Dyadic: void close()>();

        $r1 = r0.<com.hp.hpl.jena.graph.compose.Delta: com.hp.hpl.jena.graph.Graph base>;

        interfaceinvoke $r1.<com.hp.hpl.jena.graph.Graph: void close()>();

        return;
    }

    public int graphBaseSize()
    {
        int $i0, $i1, $i2, $i3, $i4;
        com.hp.hpl.jena.graph.compose.Delta r0;
        com.hp.hpl.jena.graph.Graph $r1, $r2, $r3;

        r0 := @this: com.hp.hpl.jena.graph.compose.Delta;

        $r1 = r0.<com.hp.hpl.jena.graph.compose.Delta: com.hp.hpl.jena.graph.Graph base>;

        $i0 = interfaceinvoke $r1.<com.hp.hpl.jena.graph.Graph: int size()>();

        $r2 = r0.<com.hp.hpl.jena.graph.compose.Delta: com.hp.hpl.jena.graph.Graph L>;

        $i1 = interfaceinvoke $r2.<com.hp.hpl.jena.graph.Graph: int size()>();

        $i2 = $i0 + $i1;

        $r3 = r0.<com.hp.hpl.jena.graph.compose.Delta: com.hp.hpl.jena.graph.Graph R>;

        $i3 = interfaceinvoke $r3.<com.hp.hpl.jena.graph.Graph: int size()>();

        $i4 = $i2 - $i3;

        return $i4;
    }
}
