final class org.apache.lucene.index.MultiBits extends java.lang.Object implements org.apache.lucene.util.Bits
{
    private final org.apache.lucene.util.Bits[] subs;
    private final int[] starts;
    private final boolean defaultValue;
    static final boolean $assertionsDisabled;

    public void <init>(org.apache.lucene.util.Bits[], int[], boolean)
    {
        java.lang.AssertionError $r3;
        org.apache.lucene.util.Bits[] r1;
        int[] r2;
        int $i0, $i1, $i2;
        org.apache.lucene.index.MultiBits r0;
        boolean $z0, z1;

        r0 := @this: org.apache.lucene.index.MultiBits;

        r1 := @parameter0: org.apache.lucene.util.Bits[];

        r2 := @parameter1: int[];

        z1 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = <org.apache.lucene.index.MultiBits: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i2 = lengthof r2;

        $i0 = lengthof r1;

        $i1 = 1 + $i0;

        if $i2 == $i1 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        r0.<org.apache.lucene.index.MultiBits: org.apache.lucene.util.Bits[] subs> = r1;

        r0.<org.apache.lucene.index.MultiBits: int[] starts> = r2;

        r0.<org.apache.lucene.index.MultiBits: boolean defaultValue> = z1;

        return;
    }

    private boolean checkLength(int, int)
    {
        java.lang.AssertionError $r4;
        int[] $r1, $r2, $r3, $r11;
        int i0, $i1, $i2, $i3, i4, i5, $i6, $i7, $i8;
        java.lang.String $r15;
        boolean $z0;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r10, $r12, $r13, $r14;
        org.apache.lucene.index.MultiBits r0;

        r0 := @this: org.apache.lucene.index.MultiBits;

        i0 := @parameter0: int;

        i5 := @parameter1: int;

        $r1 = r0.<org.apache.lucene.index.MultiBits: int[] starts>;

        $i1 = 1 + i0;

        $i3 = $r1[$i1];

        $r2 = r0.<org.apache.lucene.index.MultiBits: int[] starts>;

        $i2 = $r2[i0];

        i4 = $i3 - $i2;

        $z0 = <org.apache.lucene.index.MultiBits: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r3 = r0.<org.apache.lucene.index.MultiBits: int[] starts>;

        $i6 = $r3[i0];

        $i7 = i5 - $i6;

        if $i7 < i4 goto label1;

        $r4 = new java.lang.AssertionError;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("doc=");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" reader=");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" starts[reader]=");

        $r11 = r0.<org.apache.lucene.index.MultiBits: int[] starts>;

        $i8 = $r11[i0];

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" length=");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>($r15);

        throw $r4;

     label1:
        return 1;
    }

    public boolean get(int)
    {
        java.lang.AssertionError $r7, $r8;
        int[] $r1, $r3;
        int i0, $i1, $i2, $i3, $i5;
        org.apache.lucene.util.Bits $r5;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.lucene.util.Bits[] $r2;
        org.apache.lucene.index.MultiBits r0;

        r0 := @this: org.apache.lucene.index.MultiBits;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.index.MultiBits: int[] starts>;

        $i1 = staticinvoke <org.apache.lucene.index.ReaderUtil: int subIndex(int,int[])>(i0, $r1);

        $z0 = <org.apache.lucene.index.MultiBits: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i5 = (int) -1;

        if $i1 != $i5 goto label1;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label1:
        $r2 = r0.<org.apache.lucene.index.MultiBits: org.apache.lucene.util.Bits[] subs>;

        $r5 = $r2[$i1];

        if $r5 != null goto label2;

        $z4 = r0.<org.apache.lucene.index.MultiBits: boolean defaultValue>;

        return $z4;

     label2:
        $z1 = <org.apache.lucene.index.MultiBits: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        $z3 = specialinvoke r0.<org.apache.lucene.index.MultiBits: boolean checkLength(int,int)>($i1, i0);

        if $z3 != 0 goto label3;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label3:
        $r3 = r0.<org.apache.lucene.index.MultiBits: int[] starts>;

        $i2 = $r3[$i1];

        $i3 = i0 - $i2;

        $z2 = interfaceinvoke $r5.<org.apache.lucene.util.Bits: boolean get(int)>($i3);

        return $z2;
    }

    public java.lang.String toString()
    {
        int[] $r11, $r19, $r32;
        org.apache.lucene.util.Bits[] $r3, $r7, $r10, $r15, $r22, $r26;
        java.lang.StringBuilder $r0, $r1, $r4, $r5, $r8, $r9, $r12, $r17, $r18, $r20, $r21, $r24, $r25, $r28, $r30, $r31, $r33, $r34;
        org.apache.lucene.index.MultiBits r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        java.lang.String $r6, $r13, $r14, $r29, $r35;
        org.apache.lucene.util.Bits $r16, $r23, $r27;

        r2 := @this: org.apache.lucene.index.MultiBits;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = r2.<org.apache.lucene.index.MultiBits: org.apache.lucene.util.Bits[] subs>;

        $i0 = lengthof $r3;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" subs: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        i7 = 0;

     label1:
        $r7 = r2.<org.apache.lucene.index.MultiBits: org.apache.lucene.util.Bits[] subs>;

        $i1 = lengthof $r7;

        if i7 >= $i1 goto label5;

        if i7 == 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ");

     label2:
        $r15 = r2.<org.apache.lucene.index.MultiBits: org.apache.lucene.util.Bits[] subs>;

        $r16 = $r15[i7];

        if $r16 != null goto label3;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s=");

        $r32 = r2.<org.apache.lucene.index.MultiBits: int[] starts>;

        $i6 = $r32[i7];

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" l=null");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        goto label4;

     label3:
        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s=");

        $r19 = r2.<org.apache.lucene.index.MultiBits: int[] starts>;

        $i4 = $r19[i7];

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" l=");

        $r22 = r2.<org.apache.lucene.index.MultiBits: org.apache.lucene.util.Bits[] subs>;

        $r23 = $r22[i7];

        $i5 = interfaceinvoke $r23.<org.apache.lucene.util.Bits: int length()>();

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" b=");

        $r26 = r2.<org.apache.lucene.index.MultiBits: org.apache.lucene.util.Bits[] subs>;

        $r27 = $r26[i7];

        $r28 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

     label4:
        i7 = i7 + 1;

        goto label1;

     label5:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" end=");

        $r11 = r2.<org.apache.lucene.index.MultiBits: int[] starts>;

        $r10 = r2.<org.apache.lucene.index.MultiBits: org.apache.lucene.util.Bits[] subs>;

        $i2 = lengthof $r10;

        $i3 = $r11[$i2];

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r14 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r14;
    }

    public org.apache.lucene.index.MultiBits$SubResult getMatchingSub(org.apache.lucene.index.ReaderSlice)
    {
        int[] $r2, $r4, $r5, $r14, $r15;
        boolean $z0, $z1;
        org.apache.lucene.util.Bits[] $r6, $r8;
        java.lang.StringBuilder $r11, $r12, $r13, $r16, $r20;
        org.apache.lucene.index.MultiBits r1;
        java.lang.AssertionError $r19, $r21;
        org.apache.lucene.index.ReaderSlice r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14;
        java.lang.String $r17;
        org.apache.lucene.util.Bits $r7;
        org.apache.lucene.index.MultiBits$SubResult $r22;

        r1 := @this: org.apache.lucene.index.MultiBits;

        r0 := @parameter0: org.apache.lucene.index.ReaderSlice;

        $i0 = r0.<org.apache.lucene.index.ReaderSlice: int start>;

        $r2 = r1.<org.apache.lucene.index.MultiBits: int[] starts>;

        $i1 = staticinvoke <org.apache.lucene.index.ReaderUtil: int subIndex(int,int[])>($i0, $r2);

        $z0 = <org.apache.lucene.index.MultiBits: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i14 = (int) -1;

        if $i1 != $i14 goto label1;

        $r19 = new java.lang.AssertionError;

        specialinvoke $r19.<java.lang.AssertionError: void <init>()>();

        throw $r19;

     label1:
        $z1 = <org.apache.lucene.index.MultiBits: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $r8 = r1.<org.apache.lucene.index.MultiBits: org.apache.lucene.util.Bits[] subs>;

        $i9 = lengthof $r8;

        if $i1 < $i9 goto label2;

        $r21 = new java.lang.AssertionError;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("slice=");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" starts[-1]=");

        $r15 = r1.<org.apache.lucene.index.MultiBits: int[] starts>;

        $r14 = r1.<org.apache.lucene.index.MultiBits: int[] starts>;

        $i10 = lengthof $r14;

        $i11 = $i10 - 1;

        $i12 = $r15[$i11];

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.AssertionError: void <init>(java.lang.Object)>($r17);

        throw $r21;

     label2:
        $r22 = new org.apache.lucene.index.MultiBits$SubResult;

        specialinvoke $r22.<org.apache.lucene.index.MultiBits$SubResult: void <init>()>();

        $r4 = r1.<org.apache.lucene.index.MultiBits: int[] starts>;

        $i3 = $r4[$i1];

        $i2 = r0.<org.apache.lucene.index.ReaderSlice: int start>;

        if $i3 != $i2 goto label3;

        $r5 = r1.<org.apache.lucene.index.MultiBits: int[] starts>;

        $i4 = 1 + $i1;

        $i8 = $r5[$i4];

        $i6 = r0.<org.apache.lucene.index.ReaderSlice: int start>;

        $i5 = r0.<org.apache.lucene.index.ReaderSlice: int length>;

        $i7 = $i6 + $i5;

        if $i8 != $i7 goto label3;

        $r22.<org.apache.lucene.index.MultiBits$SubResult: boolean matches> = 1;

        $r6 = r1.<org.apache.lucene.index.MultiBits: org.apache.lucene.util.Bits[] subs>;

        $r7 = $r6[$i1];

        $r22.<org.apache.lucene.index.MultiBits$SubResult: org.apache.lucene.util.Bits result> = $r7;

        goto label4;

     label3:
        $r22.<org.apache.lucene.index.MultiBits$SubResult: boolean matches> = 0;

     label4:
        return $r22;
    }

    public int length()
    {
        int[] $r1, $r2;
        int $i0, $i1, $i2;
        org.apache.lucene.index.MultiBits r0;

        r0 := @this: org.apache.lucene.index.MultiBits;

        $r2 = r0.<org.apache.lucene.index.MultiBits: int[] starts>;

        $r1 = r0.<org.apache.lucene.index.MultiBits: int[] starts>;

        $i0 = lengthof $r1;

        $i1 = $i0 - 1;

        $i2 = $r2[$i1];

        return $i2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/index/MultiBits;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.index.MultiBits: boolean $assertionsDisabled> = $z1;

        return;
    }
}
