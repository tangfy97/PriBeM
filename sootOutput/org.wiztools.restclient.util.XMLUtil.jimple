public final class org.wiztools.restclient.util.XMLUtil extends java.lang.Object
{
    private static final java.util.logging.Logger LOG;
    private static final java.lang.String[] VERSIONS;
    public static final java.lang.String XML_MIME;

    private void <init>()
    {
        org.wiztools.restclient.util.XMLUtil r0;

        r0 := @this: org.wiztools.restclient.util.XMLUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected static void checkIfVersionValid(java.lang.String) throws org.wiztools.restclient.XMLException
    {
        int $i0, $i2;
        java.lang.String[] $r1;
        java.lang.String r0;
        org.wiztools.restclient.XMLException $r4, $r5;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r4 = new org.wiztools.restclient.XMLException;

        specialinvoke $r4.<org.wiztools.restclient.XMLException: void <init>(java.lang.String)>("Attribute `version\' not available for root element");

        throw $r4;

     label1:
        $r1 = <org.wiztools.restclient.util.XMLUtil: java.lang.String[] VERSIONS>;

        $i0 = staticinvoke <java.util.Arrays: int binarySearch(java.lang.Object[],java.lang.Object)>($r1, r0);

        $i2 = (int) -1;

        if $i0 != $i2 goto label2;

        $r5 = new org.wiztools.restclient.XMLException;

        specialinvoke $r5.<org.wiztools.restclient.XMLException: void <init>(java.lang.String)>("Version not supported");

        throw $r5;

     label2:
        return;
    }

    private static nu.xom.Element getRootElement()
    {
        nu.xom.Attribute $r1;
        nu.xom.Element $r0;

        $r0 = new nu.xom.Element;

        specialinvoke $r0.<nu.xom.Element: void <init>(java.lang.String)>("rest-client");

        $r1 = new nu.xom.Attribute;

        specialinvoke $r1.<nu.xom.Attribute: void <init>(java.lang.String,java.lang.String)>("version", "3.2.1");

        virtualinvoke $r0.<nu.xom.Element: void addAttribute(nu.xom.Attribute)>($r1);

        return $r0;
    }

    protected static nu.xom.Element getRequestElement(org.wiztools.restclient.bean.Request)
    {
        org.wiztools.restclient.bean.SSLReq $r12, $r37;
        java.net.URL $r6;
        java.net.HttpCookie r44;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.Collection $r31;
        java.util.Set $r28;
        java.util.List $r14;
        nu.xom.Element $r0, $r1, $r5, $r8, $r17, $r18, $r19, $r22, $r27, $r34, $r38, $r39, $r40, $r41;
        org.wiztools.restclient.bean.Request r2;
        org.wiztools.restclient.bean.Auth $r11;
        org.wiztools.restclient.bean.HTTPVersion $r3;
        java.lang.String $r4, $r7, $r10, $r16, $r24, $r26, r42, r43;
        org.wiztools.restclient.bean.HTTPMethod $r9;
        java.util.Iterator $r20, $r29, $r32;
        nu.xom.Attribute $r23, $r25, $r35, $r36;
        org.wiztools.restclient.bean.ReqEntity $r15;
        java.lang.Object $r21, $r30, $r33;
        org.wiztools.commons.MultiValueMap $r13;

        r2 := @parameter0: org.wiztools.restclient.bean.Request;

        $r0 = new nu.xom.Element;

        specialinvoke $r0.<nu.xom.Element: void <init>(java.lang.String)>("request");

        $r1 = new nu.xom.Element;

        specialinvoke $r1.<nu.xom.Element: void <init>(java.lang.String)>("http-version");

        $r3 = interfaceinvoke r2.<org.wiztools.restclient.bean.Request: org.wiztools.restclient.bean.HTTPVersion getHttpVersion()>();

        $r4 = virtualinvoke $r3.<org.wiztools.restclient.bean.HTTPVersion: java.lang.String versionNumber()>();

        virtualinvoke $r1.<nu.xom.Element: void appendChild(java.lang.String)>($r4);

        virtualinvoke $r0.<nu.xom.Element: void appendChild(nu.xom.Node)>($r1);

        $z0 = interfaceinvoke r2.<org.wiztools.restclient.bean.Request: boolean isFollowRedirect()>();

        if $z0 == 0 goto label01;

        $r41 = new nu.xom.Element;

        specialinvoke $r41.<nu.xom.Element: void <init>(java.lang.String)>("http-follow-redirects");

        virtualinvoke $r0.<nu.xom.Element: void appendChild(nu.xom.Node)>($r41);

     label01:
        $z1 = interfaceinvoke r2.<org.wiztools.restclient.bean.Request: boolean isIgnoreResponseBody()>();

        if $z1 == 0 goto label02;

        $r40 = new nu.xom.Element;

        specialinvoke $r40.<nu.xom.Element: void <init>(java.lang.String)>("ignore-response-body");

        virtualinvoke $r0.<nu.xom.Element: void appendChild(nu.xom.Node)>($r40);

     label02:
        $r5 = new nu.xom.Element;

        specialinvoke $r5.<nu.xom.Element: void <init>(java.lang.String)>("URL");

        $r6 = interfaceinvoke r2.<org.wiztools.restclient.bean.Request: java.net.URL getUrl()>();

        $r7 = virtualinvoke $r6.<java.net.URL: java.lang.String toString()>();

        virtualinvoke $r5.<nu.xom.Element: void appendChild(java.lang.String)>($r7);

        virtualinvoke $r0.<nu.xom.Element: void appendChild(nu.xom.Node)>($r5);

        $r8 = new nu.xom.Element;

        specialinvoke $r8.<nu.xom.Element: void <init>(java.lang.String)>("method");

        $r9 = interfaceinvoke r2.<org.wiztools.restclient.bean.Request: org.wiztools.restclient.bean.HTTPMethod getMethod()>();

        $r10 = virtualinvoke $r9.<org.wiztools.restclient.bean.HTTPMethod: java.lang.String name()>();

        virtualinvoke $r8.<nu.xom.Element: void appendChild(java.lang.String)>($r10);

        virtualinvoke $r0.<nu.xom.Element: void appendChild(nu.xom.Node)>($r8);

        $r11 = interfaceinvoke r2.<org.wiztools.restclient.bean.Request: org.wiztools.restclient.bean.Auth getAuth()>();

        if $r11 == null goto label03;

        $r39 = staticinvoke <org.wiztools.restclient.util.XmlAuthUtil: nu.xom.Element getAuthElement(org.wiztools.restclient.bean.Auth)>($r11);

        virtualinvoke $r0.<nu.xom.Element: void appendChild(nu.xom.Node)>($r39);

     label03:
        $r12 = interfaceinvoke r2.<org.wiztools.restclient.bean.Request: org.wiztools.restclient.bean.SSLReq getSslReq()>();

        if $r12 == null goto label04;

        $r37 = interfaceinvoke r2.<org.wiztools.restclient.bean.Request: org.wiztools.restclient.bean.SSLReq getSslReq()>();

        $r38 = staticinvoke <org.wiztools.restclient.util.XmlSslUtil: nu.xom.Element getSslReq(org.wiztools.restclient.bean.SSLReq)>($r37);

        virtualinvoke $r0.<nu.xom.Element: void appendChild(nu.xom.Node)>($r38);

     label04:
        $r13 = interfaceinvoke r2.<org.wiztools.restclient.bean.Request: org.wiztools.commons.MultiValueMap getHeaders()>();

        $z2 = interfaceinvoke $r13.<org.wiztools.commons.MultiValueMap: boolean isEmpty()>();

        if $z2 != 0 goto label09;

        $r27 = new nu.xom.Element;

        specialinvoke $r27.<nu.xom.Element: void <init>(java.lang.String)>("headers");

        $r28 = interfaceinvoke $r13.<org.wiztools.commons.MultiValueMap: java.util.Set keySet()>();

        $r29 = interfaceinvoke $r28.<java.util.Set: java.util.Iterator iterator()>();

     label05:
        $z5 = interfaceinvoke $r29.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label08;

        $r30 = interfaceinvoke $r29.<java.util.Iterator: java.lang.Object next()>();

        r42 = (java.lang.String) $r30;

        $r31 = interfaceinvoke $r13.<org.wiztools.commons.MultiValueMap: java.util.Collection get(java.lang.Object)>(r42);

        $r32 = interfaceinvoke $r31.<java.util.Collection: java.util.Iterator iterator()>();

     label06:
        $z6 = interfaceinvoke $r32.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label07;

        $r33 = interfaceinvoke $r32.<java.util.Iterator: java.lang.Object next()>();

        r43 = (java.lang.String) $r33;

        $r34 = new nu.xom.Element;

        specialinvoke $r34.<nu.xom.Element: void <init>(java.lang.String)>("header");

        $r35 = new nu.xom.Attribute;

        specialinvoke $r35.<nu.xom.Attribute: void <init>(java.lang.String,java.lang.String)>("key", r42);

        virtualinvoke $r34.<nu.xom.Element: void addAttribute(nu.xom.Attribute)>($r35);

        $r36 = new nu.xom.Attribute;

        specialinvoke $r36.<nu.xom.Attribute: void <init>(java.lang.String,java.lang.String)>("value", r43);

        virtualinvoke $r34.<nu.xom.Element: void addAttribute(nu.xom.Attribute)>($r36);

        virtualinvoke $r27.<nu.xom.Element: void appendChild(nu.xom.Node)>($r34);

        goto label06;

     label07:
        goto label05;

     label08:
        virtualinvoke $r0.<nu.xom.Element: void appendChild(nu.xom.Node)>($r27);

     label09:
        $r14 = interfaceinvoke r2.<org.wiztools.restclient.bean.Request: java.util.List getCookies()>();

        $z3 = interfaceinvoke $r14.<java.util.List: boolean isEmpty()>();

        if $z3 != 0 goto label12;

        $r19 = new nu.xom.Element;

        specialinvoke $r19.<nu.xom.Element: void <init>(java.lang.String)>("cookies");

        $r20 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $z4 = interfaceinvoke $r20.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label11;

        $r21 = interfaceinvoke $r20.<java.util.Iterator: java.lang.Object next()>();

        r44 = (java.net.HttpCookie) $r21;

        $r22 = new nu.xom.Element;

        specialinvoke $r22.<nu.xom.Element: void <init>(java.lang.String)>("cookie");

        $r23 = new nu.xom.Attribute;

        $r24 = virtualinvoke r44.<java.net.HttpCookie: java.lang.String getName()>();

        specialinvoke $r23.<nu.xom.Attribute: void <init>(java.lang.String,java.lang.String)>("name", $r24);

        virtualinvoke $r22.<nu.xom.Element: void addAttribute(nu.xom.Attribute)>($r23);

        $r25 = new nu.xom.Attribute;

        $r26 = virtualinvoke r44.<java.net.HttpCookie: java.lang.String getValue()>();

        specialinvoke $r25.<nu.xom.Attribute: void <init>(java.lang.String,java.lang.String)>("value", $r26);

        virtualinvoke $r22.<nu.xom.Element: void addAttribute(nu.xom.Attribute)>($r25);

        virtualinvoke $r19.<nu.xom.Element: void appendChild(nu.xom.Node)>($r22);

        goto label10;

     label11:
        virtualinvoke $r0.<nu.xom.Element: void appendChild(nu.xom.Node)>($r19);

     label12:
        $r15 = interfaceinvoke r2.<org.wiztools.restclient.bean.Request: org.wiztools.restclient.bean.ReqEntity getBody()>();

        if $r15 == null goto label13;

        $r18 = staticinvoke <org.wiztools.restclient.util.XmlBodyUtil: nu.xom.Element getReqEntity(org.wiztools.restclient.bean.ReqEntity)>($r15);

        virtualinvoke $r0.<nu.xom.Element: void appendChild(nu.xom.Node)>($r18);

     label13:
        $r16 = interfaceinvoke r2.<org.wiztools.restclient.bean.Request: java.lang.String getTestScript()>();

        if $r16 == null goto label14;

        $r17 = new nu.xom.Element;

        specialinvoke $r17.<nu.xom.Element: void <init>(java.lang.String)>("test-script");

        virtualinvoke $r17.<nu.xom.Element: void appendChild(java.lang.String)>($r16);

        virtualinvoke $r0.<nu.xom.Element: void appendChild(nu.xom.Node)>($r17);

     label14:
        return $r0;
    }

    protected static nu.xom.Document request2XML(org.wiztools.restclient.bean.Request) throws org.wiztools.restclient.XMLException
    {
        nu.xom.Element $r0, $r2;
        org.wiztools.restclient.bean.Request r1;
        nu.xom.Document $r3;

        r1 := @parameter0: org.wiztools.restclient.bean.Request;

        $r0 = staticinvoke <org.wiztools.restclient.util.XMLUtil: nu.xom.Element getRootElement()>();

        $r2 = staticinvoke <org.wiztools.restclient.util.XMLUtil: nu.xom.Element getRequestElement(org.wiztools.restclient.bean.Request)>(r1);

        virtualinvoke $r0.<nu.xom.Element: void appendChild(nu.xom.Node)>($r2);

        $r3 = new nu.xom.Document;

        specialinvoke $r3.<nu.xom.Document: void <init>(nu.xom.Element)>($r0);

        return $r3;
    }

    private static java.util.Map getHeadersFromHeaderNode(nu.xom.Element) throws org.wiztools.restclient.XMLException
    {
        nu.xom.Element r1, $r4;
        org.wiztools.restclient.XMLException $r9;
        java.util.LinkedHashMap $r0;
        int $i0, i1;
        java.lang.String $r5, $r6, $r7, $r8;
        nu.xom.Elements $r2, $r3;
        boolean $z0;

        r1 := @parameter0: nu.xom.Element;

        $r0 = new java.util.LinkedHashMap;

        specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>();

        i1 = 0;

     label1:
        $r2 = virtualinvoke r1.<nu.xom.Element: nu.xom.Elements getChildElements()>();

        $i0 = virtualinvoke $r2.<nu.xom.Elements: int size()>();

        if i1 >= $i0 goto label3;

        $r3 = virtualinvoke r1.<nu.xom.Element: nu.xom.Elements getChildElements()>();

        $r4 = virtualinvoke $r3.<nu.xom.Elements: nu.xom.Element get(int)>(i1);

        $r5 = "header";

        $r6 = virtualinvoke $r4.<nu.xom.Element: java.lang.String getQualifiedName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label2;

        $r9 = new org.wiztools.restclient.XMLException;

        specialinvoke $r9.<org.wiztools.restclient.XMLException: void <init>(java.lang.String)>("<headers> element should contain only <header> elements");

        throw $r9;

     label2:
        $r7 = virtualinvoke $r4.<nu.xom.Element: java.lang.String getAttributeValue(java.lang.String)>("key");

        $r8 = virtualinvoke $r4.<nu.xom.Element: java.lang.String getAttributeValue(java.lang.String)>("value");

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r8);

        i1 = i1 + 1;

        goto label1;

     label3:
        return $r0;
    }

    private static java.util.List getCookiesFromCookiesNode(nu.xom.Element) throws org.wiztools.restclient.XMLException
    {
        nu.xom.Element r1, $r4;
        java.util.ArrayList $r0;
        org.wiztools.restclient.XMLException $r10;
        java.net.HttpCookie $r7;
        int $i0, i1;
        java.lang.String $r5, $r6, $r8, $r9;
        nu.xom.Elements $r2, $r3;
        boolean $z0;

        r1 := @parameter0: nu.xom.Element;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        i1 = 0;

     label1:
        $r2 = virtualinvoke r1.<nu.xom.Element: nu.xom.Elements getChildElements()>();

        $i0 = virtualinvoke $r2.<nu.xom.Elements: int size()>();

        if i1 >= $i0 goto label3;

        $r3 = virtualinvoke r1.<nu.xom.Element: nu.xom.Elements getChildElements()>();

        $r4 = virtualinvoke $r3.<nu.xom.Elements: nu.xom.Element get(int)>(i1);

        $r5 = "cookie";

        $r6 = virtualinvoke $r4.<nu.xom.Element: java.lang.String getQualifiedName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label2;

        $r10 = new org.wiztools.restclient.XMLException;

        specialinvoke $r10.<org.wiztools.restclient.XMLException: void <init>(java.lang.String)>("<cookies> element should contain only <cookie> elements");

        throw $r10;

     label2:
        $r7 = new java.net.HttpCookie;

        $r8 = virtualinvoke $r4.<nu.xom.Element: java.lang.String getAttributeValue(java.lang.String)>("name");

        $r9 = virtualinvoke $r4.<nu.xom.Element: java.lang.String getAttributeValue(java.lang.String)>("value");

        specialinvoke $r7.<java.net.HttpCookie: void <init>(java.lang.String,java.lang.String)>($r8, $r9);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r7);

        i1 = i1 + 1;

        goto label1;

     label3:
        return $r0;
    }

    protected static org.wiztools.restclient.bean.Request getRequestBean(nu.xom.Element) throws java.net.MalformedURLException, org.wiztools.restclient.XMLException
    {
        org.wiztools.restclient.bean.SSLReq $r34;
        java.net.URL $r38;
        java.net.HttpCookie r44;
        java.util.Map $r28;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        java.util.Set $r29;
        java.util.List $r25;
        java.lang.StringBuilder $r18, $r19, $r20, $r21;
        org.wiztools.restclient.bean.RequestBean $r0;
        nu.xom.Element r1, $r4;
        org.wiztools.restclient.bean.Auth $r35;
        org.wiztools.restclient.bean.HTTPVersion $r42;
        org.wiztools.restclient.XMLException $r17;
        int $i0, i1;
        java.lang.String $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r22, $r23, $r33, $r36, $r39, $r40, $r41, r43;
        org.wiztools.restclient.bean.HTTPMethod $r37;
        java.util.Iterator $r26, $r30;
        org.wiztools.restclient.bean.ReqEntity $r24;
        java.lang.Object $r27, $r31, $r32;
        nu.xom.Elements $r2, $r3;

        r1 := @parameter0: nu.xom.Element;

        $r0 = new org.wiztools.restclient.bean.RequestBean;

        specialinvoke $r0.<org.wiztools.restclient.bean.RequestBean: void <init>()>();

        i1 = 0;

     label01:
        $r2 = virtualinvoke r1.<nu.xom.Element: nu.xom.Elements getChildElements()>();

        $i0 = virtualinvoke $r2.<nu.xom.Elements: int size()>();

        if i1 >= $i0 goto label20;

        $r3 = virtualinvoke r1.<nu.xom.Element: nu.xom.Elements getChildElements()>();

        $r4 = virtualinvoke $r3.<nu.xom.Elements: nu.xom.Element get(int)>(i1);

        $r5 = virtualinvoke $r4.<nu.xom.Element: java.lang.String getQualifiedName()>();

        $r6 = "http-version";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label04;

        $r40 = virtualinvoke $r4.<nu.xom.Element: java.lang.String getValue()>();

        $r41 = "1.1";

        $z13 = virtualinvoke $r41.<java.lang.String: boolean equals(java.lang.Object)>($r40);

        if $z13 == 0 goto label02;

        $r42 = <org.wiztools.restclient.bean.HTTPVersion: org.wiztools.restclient.bean.HTTPVersion HTTP_1_1>;

        goto label03;

     label02:
        $r42 = <org.wiztools.restclient.bean.HTTPVersion: org.wiztools.restclient.bean.HTTPVersion HTTP_1_0>;

     label03:
        virtualinvoke $r0.<org.wiztools.restclient.bean.RequestBean: void setHttpVersion(org.wiztools.restclient.bean.HTTPVersion)>($r42);

        goto label19;

     label04:
        $r7 = "http-follow-redirects";

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label05;

        virtualinvoke $r0.<org.wiztools.restclient.bean.RequestBean: void setFollowRedirect(boolean)>(1);

        goto label19;

     label05:
        $r8 = "ignore-response-body";

        $z2 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z2 == 0 goto label06;

        virtualinvoke $r0.<org.wiztools.restclient.bean.RequestBean: void setIgnoreResponseBody(boolean)>(1);

        goto label19;

     label06:
        $r9 = "URL";

        $z3 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z3 == 0 goto label07;

        $r38 = new java.net.URL;

        $r39 = virtualinvoke $r4.<nu.xom.Element: java.lang.String getValue()>();

        specialinvoke $r38.<java.net.URL: void <init>(java.lang.String)>($r39);

        virtualinvoke $r0.<org.wiztools.restclient.bean.RequestBean: void setUrl(java.net.URL)>($r38);

        goto label19;

     label07:
        $r10 = "method";

        $z4 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z4 == 0 goto label08;

        $r36 = virtualinvoke $r4.<nu.xom.Element: java.lang.String getValue()>();

        $r37 = staticinvoke <org.wiztools.restclient.bean.HTTPMethod: org.wiztools.restclient.bean.HTTPMethod get(java.lang.String)>($r36);

        virtualinvoke $r0.<org.wiztools.restclient.bean.RequestBean: void setMethod(org.wiztools.restclient.bean.HTTPMethod)>($r37);

        goto label19;

     label08:
        $r11 = "auth";

        $z5 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z5 == 0 goto label09;

        $r35 = staticinvoke <org.wiztools.restclient.util.XmlAuthUtil: org.wiztools.restclient.bean.Auth getAuth(nu.xom.Element)>($r4);

        virtualinvoke $r0.<org.wiztools.restclient.bean.RequestBean: void setAuth(org.wiztools.restclient.bean.Auth)>($r35);

        goto label19;

     label09:
        $r12 = "ssl";

        $z6 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z6 == 0 goto label10;

        $r34 = staticinvoke <org.wiztools.restclient.util.XmlSslUtil: org.wiztools.restclient.bean.SSLReq getSslReq(nu.xom.Element)>($r4);

        virtualinvoke $r0.<org.wiztools.restclient.bean.RequestBean: void setSslReq(org.wiztools.restclient.bean.SSLReq)>($r34);

        goto label19;

     label10:
        $r13 = "headers";

        $z7 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z7 == 0 goto label13;

        $r28 = staticinvoke <org.wiztools.restclient.util.XMLUtil: java.util.Map getHeadersFromHeaderNode(nu.xom.Element)>($r4);

        $r29 = interfaceinvoke $r28.<java.util.Map: java.util.Set keySet()>();

        $r30 = interfaceinvoke $r29.<java.util.Set: java.util.Iterator iterator()>();

     label11:
        $z12 = interfaceinvoke $r30.<java.util.Iterator: boolean hasNext()>();

        if $z12 == 0 goto label12;

        $r31 = interfaceinvoke $r30.<java.util.Iterator: java.lang.Object next()>();

        r43 = (java.lang.String) $r31;

        $r32 = interfaceinvoke $r28.<java.util.Map: java.lang.Object get(java.lang.Object)>(r43);

        $r33 = (java.lang.String) $r32;

        virtualinvoke $r0.<org.wiztools.restclient.bean.RequestBean: void addHeader(java.lang.String,java.lang.String)>(r43, $r33);

        goto label11;

     label12:
        goto label19;

     label13:
        $r14 = "cookies";

        $z8 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z8 == 0 goto label16;

        $r25 = staticinvoke <org.wiztools.restclient.util.XMLUtil: java.util.List getCookiesFromCookiesNode(nu.xom.Element)>($r4);

        $r26 = interfaceinvoke $r25.<java.util.List: java.util.Iterator iterator()>();

     label14:
        $z11 = interfaceinvoke $r26.<java.util.Iterator: boolean hasNext()>();

        if $z11 == 0 goto label15;

        $r27 = interfaceinvoke $r26.<java.util.Iterator: java.lang.Object next()>();

        r44 = (java.net.HttpCookie) $r27;

        virtualinvoke $r0.<org.wiztools.restclient.bean.RequestBean: void addCookie(java.net.HttpCookie)>(r44);

        goto label14;

     label15:
        goto label19;

     label16:
        $r15 = "body";

        $z9 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z9 == 0 goto label17;

        $r24 = staticinvoke <org.wiztools.restclient.util.XmlBodyUtil: org.wiztools.restclient.bean.ReqEntity getReqEntity(nu.xom.Element)>($r4);

        virtualinvoke $r0.<org.wiztools.restclient.bean.RequestBean: void setBody(org.wiztools.restclient.bean.ReqEntity)>($r24);

        goto label19;

     label17:
        $r16 = "test-script";

        $z10 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z10 == 0 goto label18;

        $r23 = virtualinvoke $r4.<nu.xom.Element: java.lang.String getValue()>();

        virtualinvoke $r0.<org.wiztools.restclient.bean.RequestBean: void setTestScript(java.lang.String)>($r23);

        goto label19;

     label18:
        $r17 = new org.wiztools.restclient.XMLException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid element encountered: <");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<org.wiztools.restclient.XMLException: void <init>(java.lang.String)>($r22);

        throw $r17;

     label19:
        i1 = i1 + 1;

        goto label01;

     label20:
        return $r0;
    }

    protected static org.wiztools.restclient.bean.Request xml2Request(nu.xom.Document) throws java.net.MalformedURLException, org.wiztools.restclient.XMLException
    {
        nu.xom.Element $r1, $r6, $r7;
        org.wiztools.restclient.bean.Request $r8;
        org.wiztools.restclient.XMLException $r9, $r10, $r11;
        int $i0;
        java.lang.String $r2, $r3, $r4;
        nu.xom.Document r0;
        nu.xom.Elements $r5;
        boolean $z0;

        r0 := @parameter0: nu.xom.Document;

        $r1 = virtualinvoke r0.<nu.xom.Document: nu.xom.Element getRootElement()>();

        $r2 = "rest-client";

        $r3 = virtualinvoke $r1.<nu.xom.Element: java.lang.String getQualifiedName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        $r11 = new org.wiztools.restclient.XMLException;

        specialinvoke $r11.<org.wiztools.restclient.XMLException: void <init>(java.lang.String)>("Root node is not <rest-client>");

        throw $r11;

     label1:
        $r4 = virtualinvoke $r1.<nu.xom.Element: java.lang.String getAttributeValue(java.lang.String)>("version");

        staticinvoke <org.wiztools.restclient.util.XMLUtil: void checkIfVersionValid(java.lang.String)>($r4);

        $r5 = virtualinvoke $r1.<nu.xom.Element: nu.xom.Elements getChildElements()>();

        $i0 = virtualinvoke $r5.<nu.xom.Elements: int size()>();

        if $i0 == 1 goto label2;

        $r10 = new org.wiztools.restclient.XMLException;

        specialinvoke $r10.<org.wiztools.restclient.XMLException: void <init>(java.lang.String)>("There can be only one child node for root node: <request>");

        throw $r10;

     label2:
        $r6 = virtualinvoke $r1.<nu.xom.Element: nu.xom.Element getFirstChildElement(java.lang.String)>("request");

        if $r6 != null goto label3;

        $r9 = new org.wiztools.restclient.XMLException;

        specialinvoke $r9.<org.wiztools.restclient.XMLException: void <init>(java.lang.String)>("The child node of <rest-client> should be <request>");

        throw $r9;

     label3:
        $r7 = virtualinvoke $r1.<nu.xom.Element: nu.xom.Element getFirstChildElement(java.lang.String)>("request");

        $r8 = staticinvoke <org.wiztools.restclient.util.XMLUtil: org.wiztools.restclient.bean.Request getRequestBean(nu.xom.Element)>($r7);

        return $r8;
    }

    protected static nu.xom.Element getResponseElement(org.wiztools.restclient.bean.Response)
    {
        byte[] $r9;
        org.wiztools.restclient.bean.TestExceptionResult r52, r53;
        java.util.Set $r41;
        nu.xom.Element $r0, $r1, $r4, $r11, $r12, $r14, $r16, $r18, $r20, $r24, $r26, $r28, $r29, $r33, $r35, $r37, $r38, $r40, $r47;
        long $l0;
        java.lang.String $r3, $r6, $r7, $r13, $r15, $r17, $r19, $r25, $r27, $r34, $r36, $r39, r50, r51;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Collection $r44;
        java.util.List $r21, $r30;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.util.Iterator $r22, $r31, $r42, $r45;
        nu.xom.Attribute $r5, $r48, $r49;
        java.lang.Object $r23, $r32, $r43, $r46;
        org.wiztools.restclient.bean.Response r2;
        org.wiztools.restclient.bean.TestResult $r10;
        org.wiztools.commons.MultiValueMap $r8;

        r2 := @parameter0: org.wiztools.restclient.bean.Response;

        $r0 = new nu.xom.Element;

        specialinvoke $r0.<nu.xom.Element: void <init>(java.lang.String)>("response");

        $r1 = new nu.xom.Element;

        specialinvoke $r1.<nu.xom.Element: void <init>(java.lang.String)>("execution-time");

        $l0 = interfaceinvoke r2.<org.wiztools.restclient.bean.Response: long getExecutionTime()>();

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l0);

        virtualinvoke $r1.<nu.xom.Element: void appendChild(java.lang.String)>($r3);

        virtualinvoke $r0.<nu.xom.Element: void appendChild(nu.xom.Node)>($r1);

        $r4 = new nu.xom.Element;

        specialinvoke $r4.<nu.xom.Element: void <init>(java.lang.String)>("status");

        $r5 = new nu.xom.Attribute;

        $i1 = interfaceinvoke r2.<org.wiztools.restclient.bean.Response: int getStatusCode()>();

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i1);

        specialinvoke $r5.<nu.xom.Attribute: void <init>(java.lang.String,java.lang.String)>("code", $r6);

        virtualinvoke $r4.<nu.xom.Element: void addAttribute(nu.xom.Attribute)>($r5);

        $r7 = interfaceinvoke r2.<org.wiztools.restclient.bean.Response: java.lang.String getStatusLine()>();

        virtualinvoke $r4.<nu.xom.Element: void appendChild(java.lang.String)>($r7);

        virtualinvoke $r0.<nu.xom.Element: void appendChild(nu.xom.Node)>($r4);

        $r8 = interfaceinvoke r2.<org.wiztools.restclient.bean.Response: org.wiztools.commons.MultiValueMap getHeaders()>();

        $z0 = interfaceinvoke $r8.<org.wiztools.commons.MultiValueMap: boolean isEmpty()>();

        if $z0 != 0 goto label05;

        $r40 = new nu.xom.Element;

        specialinvoke $r40.<nu.xom.Element: void <init>(java.lang.String)>("headers");

        $r41 = interfaceinvoke $r8.<org.wiztools.commons.MultiValueMap: java.util.Set keySet()>();

        $r42 = interfaceinvoke $r41.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z3 = interfaceinvoke $r42.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label04;

        $r43 = interfaceinvoke $r42.<java.util.Iterator: java.lang.Object next()>();

        r50 = (java.lang.String) $r43;

        $r44 = interfaceinvoke $r8.<org.wiztools.commons.MultiValueMap: java.util.Collection get(java.lang.Object)>(r50);

        $r45 = interfaceinvoke $r44.<java.util.Collection: java.util.Iterator iterator()>();

     label02:
        $z4 = interfaceinvoke $r45.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label03;

        $r46 = interfaceinvoke $r45.<java.util.Iterator: java.lang.Object next()>();

        r51 = (java.lang.String) $r46;

        $r47 = new nu.xom.Element;

        specialinvoke $r47.<nu.xom.Element: void <init>(java.lang.String)>("header");

        $r48 = new nu.xom.Attribute;

        specialinvoke $r48.<nu.xom.Attribute: void <init>(java.lang.String,java.lang.String)>("key", r50);

        $r49 = new nu.xom.Attribute;

        specialinvoke $r49.<nu.xom.Attribute: void <init>(java.lang.String,java.lang.String)>("value", r51);

        virtualinvoke $r47.<nu.xom.Element: void addAttribute(nu.xom.Attribute)>($r48);

        virtualinvoke $r47.<nu.xom.Element: void addAttribute(nu.xom.Attribute)>($r49);

        virtualinvoke $r40.<nu.xom.Element: void appendChild(nu.xom.Node)>($r47);

        goto label02;

     label03:
        goto label01;

     label04:
        virtualinvoke $r0.<nu.xom.Element: void appendChild(nu.xom.Node)>($r40);

     label05:
        $r9 = interfaceinvoke r2.<org.wiztools.restclient.bean.Response: byte[] getResponseBody()>();

        if $r9 == null goto label06;

        $r38 = new nu.xom.Element;

        specialinvoke $r38.<nu.xom.Element: void <init>(java.lang.String)>("body");

        $r39 = staticinvoke <org.wiztools.restclient.util.Util: java.lang.String base64encode(byte[])>($r9);

        virtualinvoke $r38.<nu.xom.Element: void appendChild(java.lang.String)>($r39);

        virtualinvoke $r0.<nu.xom.Element: void appendChild(nu.xom.Node)>($r38);

     label06:
        $r10 = interfaceinvoke r2.<org.wiztools.restclient.bean.Response: org.wiztools.restclient.bean.TestResult getTestResult()>();

        if $r10 == null goto label13;

        $r11 = new nu.xom.Element;

        specialinvoke $r11.<nu.xom.Element: void <init>(java.lang.String)>("test-result");

        $r12 = new nu.xom.Element;

        specialinvoke $r12.<nu.xom.Element: void <init>(java.lang.String)>("run-count");

        $i2 = interfaceinvoke $r10.<org.wiztools.restclient.bean.TestResult: int getRunCount()>();

        $r13 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i2);

        virtualinvoke $r12.<nu.xom.Element: void appendChild(java.lang.String)>($r13);

        $r14 = new nu.xom.Element;

        specialinvoke $r14.<nu.xom.Element: void <init>(java.lang.String)>("failure-count");

        $i3 = interfaceinvoke $r10.<org.wiztools.restclient.bean.TestResult: int getFailureCount()>();

        $r15 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i3);

        virtualinvoke $r14.<nu.xom.Element: void appendChild(java.lang.String)>($r15);

        $r16 = new nu.xom.Element;

        specialinvoke $r16.<nu.xom.Element: void <init>(java.lang.String)>("error-count");

        $i4 = interfaceinvoke $r10.<org.wiztools.restclient.bean.TestResult: int getErrorCount()>();

        $r17 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i4);

        virtualinvoke $r16.<nu.xom.Element: void appendChild(java.lang.String)>($r17);

        virtualinvoke $r11.<nu.xom.Element: void appendChild(nu.xom.Node)>($r12);

        virtualinvoke $r11.<nu.xom.Element: void appendChild(nu.xom.Node)>($r14);

        virtualinvoke $r11.<nu.xom.Element: void appendChild(nu.xom.Node)>($r16);

        $i5 = interfaceinvoke $r10.<org.wiztools.restclient.bean.TestResult: int getFailureCount()>();

        if $i5 <= 0 goto label09;

        $r29 = new nu.xom.Element;

        specialinvoke $r29.<nu.xom.Element: void <init>(java.lang.String)>("failures");

        $r30 = interfaceinvoke $r10.<org.wiztools.restclient.bean.TestResult: java.util.List getFailures()>();

        $r31 = interfaceinvoke $r30.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z2 = interfaceinvoke $r31.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label08;

        $r32 = interfaceinvoke $r31.<java.util.Iterator: java.lang.Object next()>();

        r52 = (org.wiztools.restclient.bean.TestExceptionResult) $r32;

        $r33 = new nu.xom.Element;

        specialinvoke $r33.<nu.xom.Element: void <init>(java.lang.String)>("message");

        $r34 = interfaceinvoke r52.<org.wiztools.restclient.bean.TestExceptionResult: java.lang.String getExceptionMessage()>();

        virtualinvoke $r33.<nu.xom.Element: void appendChild(java.lang.String)>($r34);

        $r35 = new nu.xom.Element;

        specialinvoke $r35.<nu.xom.Element: void <init>(java.lang.String)>("line-number");

        $i8 = interfaceinvoke r52.<org.wiztools.restclient.bean.TestExceptionResult: int getLineNumber()>();

        $r36 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i8);

        virtualinvoke $r35.<nu.xom.Element: void appendChild(java.lang.String)>($r36);

        $r37 = new nu.xom.Element;

        specialinvoke $r37.<nu.xom.Element: void <init>(java.lang.String)>("failure");

        virtualinvoke $r37.<nu.xom.Element: void appendChild(nu.xom.Node)>($r33);

        virtualinvoke $r37.<nu.xom.Element: void appendChild(nu.xom.Node)>($r35);

        virtualinvoke $r29.<nu.xom.Element: void appendChild(nu.xom.Node)>($r37);

        goto label07;

     label08:
        virtualinvoke $r11.<nu.xom.Element: void appendChild(nu.xom.Node)>($r29);

     label09:
        $i6 = interfaceinvoke $r10.<org.wiztools.restclient.bean.TestResult: int getErrorCount()>();

        if $i6 <= 0 goto label12;

        $r20 = new nu.xom.Element;

        specialinvoke $r20.<nu.xom.Element: void <init>(java.lang.String)>("errors");

        $r21 = interfaceinvoke $r10.<org.wiztools.restclient.bean.TestResult: java.util.List getErrors()>();

        $r22 = interfaceinvoke $r21.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $z1 = interfaceinvoke $r22.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label11;

        $r23 = interfaceinvoke $r22.<java.util.Iterator: java.lang.Object next()>();

        r53 = (org.wiztools.restclient.bean.TestExceptionResult) $r23;

        $r24 = new nu.xom.Element;

        specialinvoke $r24.<nu.xom.Element: void <init>(java.lang.String)>("message");

        $r25 = interfaceinvoke r53.<org.wiztools.restclient.bean.TestExceptionResult: java.lang.String getExceptionMessage()>();

        virtualinvoke $r24.<nu.xom.Element: void appendChild(java.lang.String)>($r25);

        $r26 = new nu.xom.Element;

        specialinvoke $r26.<nu.xom.Element: void <init>(java.lang.String)>("line-number");

        $i7 = interfaceinvoke r53.<org.wiztools.restclient.bean.TestExceptionResult: int getLineNumber()>();

        $r27 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i7);

        virtualinvoke $r26.<nu.xom.Element: void appendChild(java.lang.String)>($r27);

        $r28 = new nu.xom.Element;

        specialinvoke $r28.<nu.xom.Element: void <init>(java.lang.String)>("error");

        virtualinvoke $r28.<nu.xom.Element: void appendChild(nu.xom.Node)>($r24);

        virtualinvoke $r28.<nu.xom.Element: void appendChild(nu.xom.Node)>($r26);

        virtualinvoke $r20.<nu.xom.Element: void appendChild(nu.xom.Node)>($r28);

        goto label10;

     label11:
        virtualinvoke $r11.<nu.xom.Element: void appendChild(nu.xom.Node)>($r20);

     label12:
        $r18 = new nu.xom.Element;

        specialinvoke $r18.<nu.xom.Element: void <init>(java.lang.String)>("trace");

        $r19 = virtualinvoke $r10.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r18.<nu.xom.Element: void appendChild(java.lang.String)>($r19);

        virtualinvoke $r11.<nu.xom.Element: void appendChild(nu.xom.Node)>($r18);

        virtualinvoke $r0.<nu.xom.Element: void appendChild(nu.xom.Node)>($r11);

     label13:
        return $r0;
    }

    protected static nu.xom.Document response2XML(org.wiztools.restclient.bean.Response) throws org.wiztools.restclient.XMLException
    {
        nu.xom.Element $r0, $r2;
        org.wiztools.restclient.bean.Response r1;
        nu.xom.Document $r3;

        r1 := @parameter0: org.wiztools.restclient.bean.Response;

        $r0 = staticinvoke <org.wiztools.restclient.util.XMLUtil: nu.xom.Element getRootElement()>();

        $r2 = staticinvoke <org.wiztools.restclient.util.XMLUtil: nu.xom.Element getResponseElement(org.wiztools.restclient.bean.Response)>(r1);

        virtualinvoke $r0.<nu.xom.Element: void appendChild(nu.xom.Node)>($r2);

        $r3 = new nu.xom.Document;

        specialinvoke $r3.<nu.xom.Document: void <init>(nu.xom.Element)>($r0);

        return $r3;
    }

    protected static org.wiztools.restclient.bean.Response xml2Response(nu.xom.Document) throws org.wiztools.restclient.XMLException
    {
        byte[] $r37;
        java.util.Map $r38;
        java.util.Set $r39;
        java.lang.StringBuilder $r19, $r20, $r21, $r22;
        nu.xom.Element $r2, $r7, $r8, $r11;
        long $l4;
        org.wiztools.restclient.XMLException $r18, $r31, $r32, $r33, $r34, $r35, $r47, $r48, $r49;
        java.lang.String $r3, $r4, $r5, $r12, $r13, $r14, $r15, $r16, $r17, $r23, $r25, $r26, $r27, $r28, $r29, $r30, $r36, $r43, $r44, $r45, $r46, r50;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        org.wiztools.restclient.bean.ResponseBean $r0;
        int $i0, $i1, $i2, $i3, i5, i6;
        org.wiztools.restclient.bean.TestResultBean $r24;
        java.util.Iterator $r40;
        java.lang.Object $r41, $r42;
        nu.xom.Document r1;
        nu.xom.Elements $r6, $r9, $r10;

        r1 := @parameter0: nu.xom.Document;

        $r0 = new org.wiztools.restclient.bean.ResponseBean;

        specialinvoke $r0.<org.wiztools.restclient.bean.ResponseBean: void <init>()>();

        $r2 = virtualinvoke r1.<nu.xom.Document: nu.xom.Element getRootElement()>();

        $r3 = "rest-client";

        $r4 = virtualinvoke $r2.<nu.xom.Element: java.lang.String getQualifiedName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label01;

        $r49 = new org.wiztools.restclient.XMLException;

        specialinvoke $r49.<org.wiztools.restclient.XMLException: void <init>(java.lang.String)>("Root node is not <rest-client>");

        throw $r49;

     label01:
        $r5 = virtualinvoke $r2.<nu.xom.Element: java.lang.String getAttributeValue(java.lang.String)>("version");

        staticinvoke <org.wiztools.restclient.util.XMLUtil: void checkIfVersionValid(java.lang.String)>($r5);

        $r6 = virtualinvoke $r2.<nu.xom.Element: nu.xom.Elements getChildElements()>();

        $i0 = virtualinvoke $r6.<nu.xom.Elements: int size()>();

        if $i0 == 1 goto label02;

        $r48 = new org.wiztools.restclient.XMLException;

        specialinvoke $r48.<org.wiztools.restclient.XMLException: void <init>(java.lang.String)>("There can be only one child node for root node: <response>");

        throw $r48;

     label02:
        $r7 = virtualinvoke $r2.<nu.xom.Element: nu.xom.Element getFirstChildElement(java.lang.String)>("response");

        if $r7 != null goto label03;

        $r47 = new org.wiztools.restclient.XMLException;

        specialinvoke $r47.<org.wiztools.restclient.XMLException: void <init>(java.lang.String)>("The child node of <rest-client> should be <response>");

        throw $r47;

     label03:
        $r8 = virtualinvoke $r2.<nu.xom.Element: nu.xom.Element getFirstChildElement(java.lang.String)>("response");

        i5 = 0;

     label04:
        $r9 = virtualinvoke $r8.<nu.xom.Element: nu.xom.Elements getChildElements()>();

        $i1 = virtualinvoke $r9.<nu.xom.Elements: int size()>();

        if i5 >= $i1 goto label20;

        $r10 = virtualinvoke $r8.<nu.xom.Element: nu.xom.Elements getChildElements()>();

        $r11 = virtualinvoke $r10.<nu.xom.Elements: nu.xom.Element get(int)>(i5);

        $r12 = virtualinvoke $r11.<nu.xom.Element: java.lang.String getQualifiedName()>();

        $r13 = "execution-time";

        $z1 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z1 == 0 goto label05;

        $r46 = virtualinvoke $r11.<nu.xom.Element: java.lang.String getValue()>();

        $l4 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r46);

        virtualinvoke $r0.<org.wiztools.restclient.bean.ResponseBean: void setExecutionTime(long)>($l4);

        goto label19;

     label05:
        $r14 = "status";

        $z2 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z2 == 0 goto label06;

        $r44 = virtualinvoke $r11.<nu.xom.Element: java.lang.String getValue()>();

        virtualinvoke $r0.<org.wiztools.restclient.bean.ResponseBean: void setStatusLine(java.lang.String)>($r44);

        $r45 = virtualinvoke $r11.<nu.xom.Element: java.lang.String getAttributeValue(java.lang.String)>("code");

        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r45);

        virtualinvoke $r0.<org.wiztools.restclient.bean.ResponseBean: void setStatusCode(int)>($i3);

        goto label19;

     label06:
        $r15 = "headers";

        $z3 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z3 == 0 goto label09;

        $r38 = staticinvoke <org.wiztools.restclient.util.XMLUtil: java.util.Map getHeadersFromHeaderNode(nu.xom.Element)>($r11);

        $r39 = interfaceinvoke $r38.<java.util.Map: java.util.Set keySet()>();

        $r40 = interfaceinvoke $r39.<java.util.Set: java.util.Iterator iterator()>();

     label07:
        $z11 = interfaceinvoke $r40.<java.util.Iterator: boolean hasNext()>();

        if $z11 == 0 goto label08;

        $r41 = interfaceinvoke $r40.<java.util.Iterator: java.lang.Object next()>();

        r50 = (java.lang.String) $r41;

        $r42 = interfaceinvoke $r38.<java.util.Map: java.lang.Object get(java.lang.Object)>(r50);

        $r43 = (java.lang.String) $r42;

        virtualinvoke $r0.<org.wiztools.restclient.bean.ResponseBean: void addHeader(java.lang.String,java.lang.String)>(r50, $r43);

        goto label07;

     label08:
        goto label19;

     label09:
        $r16 = "body";

        $z4 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z4 == 0 goto label10;

        $r36 = virtualinvoke $r11.<nu.xom.Element: java.lang.String getValue()>();

        $r37 = staticinvoke <org.wiztools.restclient.util.Util: byte[] base64decodeByteArray(java.lang.String)>($r36);

        virtualinvoke $r0.<org.wiztools.restclient.bean.ResponseBean: void setResponseBody(byte[])>($r37);

        goto label19;

     label10:
        $r17 = "test-result";

        $z5 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z5 == 0 goto label18;

        $r24 = new org.wiztools.restclient.bean.TestResultBean;

        specialinvoke $r24.<org.wiztools.restclient.bean.TestResultBean: void <init>()>();

        i6 = 0;

     label11:
        $i2 = virtualinvoke $r11.<nu.xom.Element: int getChildCount()>();

        if i6 >= $i2 goto label17;

        $r25 = virtualinvoke $r11.<nu.xom.Element: java.lang.String getQualifiedName()>();

        $r26 = "run-count";

        $z6 = virtualinvoke $r26.<java.lang.String: boolean equals(java.lang.Object)>($r25);

        if $z6 == 0 goto label12;

        $r35 = new org.wiztools.restclient.XMLException;

        specialinvoke $r35.<org.wiztools.restclient.XMLException: void <init>(java.lang.String)>("<headers> element should contain only <header> elements");

        throw $r35;

     label12:
        $r27 = "failure-count";

        $z7 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>($r25);

        if $z7 == 0 goto label13;

        $r34 = new org.wiztools.restclient.XMLException;

        specialinvoke $r34.<org.wiztools.restclient.XMLException: void <init>(java.lang.String)>("<headers> element should contain only <header> elements");

        throw $r34;

     label13:
        $r28 = "error-count";

        $z8 = virtualinvoke $r28.<java.lang.String: boolean equals(java.lang.Object)>($r25);

        if $z8 == 0 goto label14;

        $r33 = new org.wiztools.restclient.XMLException;

        specialinvoke $r33.<org.wiztools.restclient.XMLException: void <init>(java.lang.String)>("<headers> element should contain only <header> elements");

        throw $r33;

     label14:
        $r29 = "failures";

        $z9 = virtualinvoke $r29.<java.lang.String: boolean equals(java.lang.Object)>($r25);

        if $z9 == 0 goto label15;

        $r32 = new org.wiztools.restclient.XMLException;

        specialinvoke $r32.<org.wiztools.restclient.XMLException: void <init>(java.lang.String)>("<headers> element should contain only <header> elements");

        throw $r32;

     label15:
        $r30 = "errors";

        $z10 = virtualinvoke $r30.<java.lang.String: boolean equals(java.lang.Object)>($r25);

        if $z10 == 0 goto label16;

        $r31 = new org.wiztools.restclient.XMLException;

        specialinvoke $r31.<org.wiztools.restclient.XMLException: void <init>(java.lang.String)>("<headers> element should contain only <header> elements");

        throw $r31;

     label16:
        i6 = i6 + 1;

        goto label11;

     label17:
        virtualinvoke $r0.<org.wiztools.restclient.bean.ResponseBean: void setTestResult(org.wiztools.restclient.bean.TestResult)>($r24);

        goto label19;

     label18:
        $r18 = new org.wiztools.restclient.XMLException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized element found: <");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<org.wiztools.restclient.XMLException: void <init>(java.lang.String)>($r23);

        throw $r18;

     label19:
        i5 = i5 + 1;

        goto label04;

     label20:
        return $r0;
    }

    protected static void writeXML(nu.xom.Document, java.io.File) throws java.io.IOException, org.wiztools.restclient.XMLException
    {
        java.io.FileOutputStream $r0;
        java.io.IOException $r6;
        java.io.File r1;
        java.io.BufferedOutputStream $r2;
        org.wiztools.restclient.XMLException $r7;
        nu.xom.Serializer $r3;
        java.lang.String $r4, $r8;
        nu.xom.Document r5;

        r5 := @parameter0: nu.xom.Document;

        r1 := @parameter1: java.io.File;

     label1:
        $r0 = new java.io.FileOutputStream;

        specialinvoke $r0.<java.io.FileOutputStream: void <init>(java.io.File)>(r1);

        $r2 = new java.io.BufferedOutputStream;

        specialinvoke $r2.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r0);

        $r3 = new nu.xom.Serializer;

        $r4 = staticinvoke <org.wiztools.restclient.util.XMLUtil: java.lang.String getDocumentCharset(java.io.File)>(r1);

        specialinvoke $r3.<nu.xom.Serializer: void <init>(java.io.OutputStream,java.lang.String)>($r2, $r4);

        virtualinvoke $r3.<nu.xom.Serializer: void write(nu.xom.Document)>(r5);

        virtualinvoke $r2.<java.io.OutputStream: void close()>();

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = new org.wiztools.restclient.XMLException;

        $r8 = virtualinvoke $r6.<java.io.IOException: java.lang.String getMessage()>();

        specialinvoke $r7.<org.wiztools.restclient.XMLException: void <init>(java.lang.String,java.lang.Throwable)>($r8, $r6);

        throw $r7;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    protected static nu.xom.Document getDocumentFromFile(java.io.File) throws java.io.IOException, org.wiztools.restclient.XMLException
    {
        nu.xom.Builder $r0;
        java.io.IOException $r3;
        nu.xom.ParsingException $r6;
        java.io.File r1;
        org.wiztools.restclient.XMLException $r4, $r7;
        java.lang.String $r5, $r8;
        nu.xom.Document $r2;

        r1 := @parameter0: java.io.File;

     label1:
        $r0 = new nu.xom.Builder;

        specialinvoke $r0.<nu.xom.Builder: void <init>()>();

        $r2 = virtualinvoke $r0.<nu.xom.Builder: nu.xom.Document build(java.io.File)>(r1);

     label2:
        return $r2;

     label3:
        $r6 := @caughtexception;

        $r7 = new org.wiztools.restclient.XMLException;

        $r8 = virtualinvoke $r6.<nu.xom.ParsingException: java.lang.String getMessage()>();

        specialinvoke $r7.<org.wiztools.restclient.XMLException: void <init>(java.lang.String,java.lang.Throwable)>($r8, $r6);

        throw $r7;

     label4:
        $r3 := @caughtexception;

        $r4 = new org.wiztools.restclient.XMLException;

        $r5 = virtualinvoke $r3.<java.io.IOException: java.lang.String getMessage()>();

        specialinvoke $r4.<org.wiztools.restclient.XMLException: void <init>(java.lang.String,java.lang.Throwable)>($r5, $r3);

        throw $r4;

        catch nu.xom.ParsingException from label1 to label2 with label3;
        catch java.io.IOException from label1 to label2 with label4;
    }

    public static java.lang.String getDocumentCharset(java.io.File) throws java.io.IOException, org.wiztools.restclient.XMLException
    {
        java.lang.Throwable $r10;
        javax.xml.stream.XMLInputFactory $r0;
        org.wiztools.restclient.XMLException $r12;
        javax.xml.stream.events.XMLEvent $r4;
        javax.xml.stream.XMLStreamException $r7, $r11, $r14;
        java.lang.String $r6, $r9, $r13, $r16;
        javax.xml.stream.XMLEventReader $r3, r17;
        java.io.FileInputStream $r1;
        java.util.logging.Logger $r8, $r15;
        java.io.File r2;
        javax.xml.stream.events.StartDocument r5;

        r2 := @parameter0: java.io.File;

        r17 = null;

     label01:
        $r0 = staticinvoke <javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLInputFactory newInstance()>();

        $r1 = new java.io.FileInputStream;

        specialinvoke $r1.<java.io.FileInputStream: void <init>(java.io.File)>(r2);

        $r3 = virtualinvoke $r0.<javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLEventReader createXMLEventReader(java.io.InputStream)>($r1);

        r17 = $r3;

        $r4 = interfaceinvoke $r3.<javax.xml.stream.XMLEventReader: javax.xml.stream.events.XMLEvent nextEvent()>();

        r5 = (javax.xml.stream.events.StartDocument) $r4;

        $r6 = interfaceinvoke r5.<javax.xml.stream.events.StartDocument: java.lang.String getCharacterEncodingScheme()>();

     label02:
        if $r3 == null goto label06;

     label03:
        interfaceinvoke $r3.<javax.xml.stream.XMLEventReader: void close()>();

     label04:
        goto label06;

     label05:
        $r14 := @caughtexception;

        $r15 = <org.wiztools.restclient.util.XMLUtil: java.util.logging.Logger LOG>;

        $r16 = virtualinvoke $r14.<javax.xml.stream.XMLStreamException: java.lang.String getMessage()>();

        virtualinvoke $r15.<java.util.logging.Logger: void warning(java.lang.String)>($r16);

     label06:
        return $r6;

     label07:
        $r11 := @caughtexception;

        $r12 = new org.wiztools.restclient.XMLException;

        $r13 = virtualinvoke $r11.<javax.xml.stream.XMLStreamException: java.lang.String getMessage()>();

        specialinvoke $r12.<org.wiztools.restclient.XMLException: void <init>(java.lang.String,java.lang.Throwable)>($r13, $r11);

        throw $r12;

     label08:
        $r10 := @caughtexception;

     label09:
        if r17 == null goto label13;

     label10:
        interfaceinvoke r17.<javax.xml.stream.XMLEventReader: void close()>();

     label11:
        goto label13;

     label12:
        $r7 := @caughtexception;

        $r8 = <org.wiztools.restclient.util.XMLUtil: java.util.logging.Logger LOG>;

        $r9 = virtualinvoke $r7.<javax.xml.stream.XMLStreamException: java.lang.String getMessage()>();

        virtualinvoke $r8.<java.util.logging.Logger: void warning(java.lang.String)>($r9);

     label13:
        throw $r10;

        catch javax.xml.stream.XMLStreamException from label03 to label04 with label05;
        catch javax.xml.stream.XMLStreamException from label01 to label02 with label07;
        catch java.lang.Throwable from label01 to label02 with label08;
        catch javax.xml.stream.XMLStreamException from label10 to label11 with label12;
        catch java.lang.Throwable from label07 to label09 with label08;
    }

    public static void writeRequestXML(org.wiztools.restclient.bean.Request, java.io.File) throws java.io.IOException, org.wiztools.restclient.XMLException
    {
        org.wiztools.restclient.bean.Request r0;
        nu.xom.Document $r1;
        java.io.File r2;

        r0 := @parameter0: org.wiztools.restclient.bean.Request;

        r2 := @parameter1: java.io.File;

        $r1 = staticinvoke <org.wiztools.restclient.util.XMLUtil: nu.xom.Document request2XML(org.wiztools.restclient.bean.Request)>(r0);

        staticinvoke <org.wiztools.restclient.util.XMLUtil: void writeXML(nu.xom.Document,java.io.File)>($r1, r2);

        return;
    }

    public static void writeResponseXML(org.wiztools.restclient.bean.Response, java.io.File) throws java.io.IOException, org.wiztools.restclient.XMLException
    {
        org.wiztools.restclient.bean.Response r0;
        nu.xom.Document $r1;
        java.io.File r2;

        r0 := @parameter0: org.wiztools.restclient.bean.Response;

        r2 := @parameter1: java.io.File;

        $r1 = staticinvoke <org.wiztools.restclient.util.XMLUtil: nu.xom.Document response2XML(org.wiztools.restclient.bean.Response)>(r0);

        staticinvoke <org.wiztools.restclient.util.XMLUtil: void writeXML(nu.xom.Document,java.io.File)>($r1, r2);

        return;
    }

    public static org.wiztools.restclient.bean.Request getRequestFromXMLFile(java.io.File) throws java.io.IOException, org.wiztools.restclient.XMLException
    {
        org.wiztools.restclient.bean.Request $r2;
        nu.xom.Document $r1;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        $r1 = staticinvoke <org.wiztools.restclient.util.XMLUtil: nu.xom.Document getDocumentFromFile(java.io.File)>(r0);

        $r2 = staticinvoke <org.wiztools.restclient.util.XMLUtil: org.wiztools.restclient.bean.Request xml2Request(nu.xom.Document)>($r1);

        return $r2;
    }

    public static org.wiztools.restclient.bean.Response getResponseFromXMLFile(java.io.File) throws java.io.IOException, org.wiztools.restclient.XMLException
    {
        org.wiztools.restclient.bean.Response $r2;
        nu.xom.Document $r1;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        $r1 = staticinvoke <org.wiztools.restclient.util.XMLUtil: nu.xom.Document getDocumentFromFile(java.io.File)>(r0);

        $r2 = staticinvoke <org.wiztools.restclient.util.XMLUtil: org.wiztools.restclient.bean.Response xml2Response(nu.xom.Document)>($r1);

        return $r2;
    }

    public static java.lang.String indentXML(java.lang.String) throws org.wiztools.restclient.XMLException, java.io.IOException
    {
        nu.xom.Builder $r0;
        byte[] $r6;
        java.io.ByteArrayOutputStream $r3;
        nu.xom.ParsingException $r7;
        org.wiztools.restclient.XMLException $r8;
        nu.xom.Serializer $r4;
        java.lang.String r1, $r5;
        nu.xom.Document $r2;

        r1 := @parameter0: java.lang.String;

     label1:
        $r0 = new nu.xom.Builder;

        specialinvoke $r0.<nu.xom.Builder: void <init>()>();

        $r2 = virtualinvoke $r0.<nu.xom.Builder: nu.xom.Document build(java.lang.String,java.lang.String)>(r1, null);

        $r3 = new java.io.ByteArrayOutputStream;

        specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>();

        $r4 = new nu.xom.Serializer;

        specialinvoke $r4.<nu.xom.Serializer: void <init>(java.io.OutputStream)>($r3);

        virtualinvoke $r4.<nu.xom.Serializer: void setIndent(int)>(4);

        virtualinvoke $r4.<nu.xom.Serializer: void setMaxLength(int)>(69);

        virtualinvoke $r4.<nu.xom.Serializer: void write(nu.xom.Document)>($r2);

        $r5 = new java.lang.String;

        $r6 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r5.<java.lang.String: void <init>(byte[])>($r6);

     label2:
        return $r5;

     label3:
        $r7 := @caughtexception;

        $r8 = new org.wiztools.restclient.XMLException;

        specialinvoke $r8.<org.wiztools.restclient.XMLException: void <init>(java.lang.String,java.lang.Throwable)>("XML indentation failed.", $r7);

        throw $r8;

        catch nu.xom.ParsingException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String[] $r3, $r4;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        <org.wiztools.restclient.util.XMLUtil: java.lang.String XML_MIME> = "application/xml";

        $r0 = class "Lorg/wiztools/restclient/util/XMLUtil;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <org.wiztools.restclient.util.XMLUtil: java.util.logging.Logger LOG> = $r2;

        $r3 = newarray (java.lang.String)[4];

        $r3[0] = "3.0";

        $r3[1] = "3.1";

        $r3[2] = "3.2";

        $r3[3] = "3.2.1";

        <org.wiztools.restclient.util.XMLUtil: java.lang.String[] VERSIONS> = $r3;

        $r4 = <org.wiztools.restclient.util.XMLUtil: java.lang.String[] VERSIONS>;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[])>($r4);

        return;
    }
}
