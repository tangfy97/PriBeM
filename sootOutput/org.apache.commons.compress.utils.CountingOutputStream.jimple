public class org.apache.commons.compress.utils.CountingOutputStream extends java.io.FilterOutputStream
{
    private long bytesWritten;

    public void <init>(java.io.OutputStream)
    {
        java.io.OutputStream r1;
        org.apache.commons.compress.utils.CountingOutputStream r0;

        r0 := @this: org.apache.commons.compress.utils.CountingOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        specialinvoke r0.<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>(r1);

        r0.<org.apache.commons.compress.utils.CountingOutputStream: long bytesWritten> = 0L;

        return;
    }

    public void write(int) throws java.io.IOException
    {
        int i0;
        java.io.OutputStream $r1;
        org.apache.commons.compress.utils.CountingOutputStream r0;

        r0 := @this: org.apache.commons.compress.utils.CountingOutputStream;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.compress.utils.CountingOutputStream: java.io.OutputStream out>;

        virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0);

        virtualinvoke r0.<org.apache.commons.compress.utils.CountingOutputStream: void count(long)>(1L);

        return;
    }

    public void write(byte[]) throws java.io.IOException
    {
        int $i0;
        org.apache.commons.compress.utils.CountingOutputStream r0;
        byte[] r1;

        r0 := @this: org.apache.commons.compress.utils.CountingOutputStream;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        virtualinvoke r0.<org.apache.commons.compress.utils.CountingOutputStream: void write(byte[],int,int)>(r1, 0, $i0);

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        java.io.OutputStream $r2;
        byte[] r1;
        int i0, i1;
        org.apache.commons.compress.utils.CountingOutputStream r0;
        long $l2;

        r0 := @this: org.apache.commons.compress.utils.CountingOutputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.apache.commons.compress.utils.CountingOutputStream: java.io.OutputStream out>;

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1);

        $l2 = (long) i1;

        virtualinvoke r0.<org.apache.commons.compress.utils.CountingOutputStream: void count(long)>($l2);

        return;
    }

    protected void count(long)
    {
        byte $b1;
        org.apache.commons.compress.utils.CountingOutputStream r0;
        long l0, $l2, $l3;

        r0 := @this: org.apache.commons.compress.utils.CountingOutputStream;

        l0 := @parameter0: long;

        $b1 = l0 cmp -1L;

        if $b1 == 0 goto label1;

        $l2 = r0.<org.apache.commons.compress.utils.CountingOutputStream: long bytesWritten>;

        $l3 = $l2 + l0;

        r0.<org.apache.commons.compress.utils.CountingOutputStream: long bytesWritten> = $l3;

     label1:
        return;
    }

    public long getBytesWritten()
    {
        org.apache.commons.compress.utils.CountingOutputStream r0;
        long $l0;

        r0 := @this: org.apache.commons.compress.utils.CountingOutputStream;

        $l0 = r0.<org.apache.commons.compress.utils.CountingOutputStream: long bytesWritten>;

        return $l0;
    }
}
