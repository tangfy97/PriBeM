public class com.hp.hpl.jena.sparql.algebra.AlgebraGenerator extends java.lang.Object
{
    private boolean fixedFilterPosition;
    private com.hp.hpl.jena.sparql.util.Context context;
    private final int subQueryDepth;
    private static final boolean applySimplification;
    private static final boolean simplifyTooEarlyInAlgebraGeneration;
    protected static com.hp.hpl.jena.sparql.algebra.Transform simplify;

    public void <init>(com.hp.hpl.jena.sparql.util.Context)
    {
        com.hp.hpl.jena.sparql.util.Context r1, $r2, $r3;
        com.hp.hpl.jena.sparql.algebra.AlgebraGenerator r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.AlgebraGenerator;

        r1 := @parameter0: com.hp.hpl.jena.sparql.util.Context;

        if r1 == null goto label1;

        $r3 = r1;

        goto label2;

     label1:
        $r2 = staticinvoke <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Context getContext()>();

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.util.Context: com.hp.hpl.jena.sparql.util.Context copy()>();

     label2:
        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: void <init>(com.hp.hpl.jena.sparql.util.Context,int)>($r3, 0);

        return;
    }

    public void <init>()
    {
        com.hp.hpl.jena.sparql.algebra.AlgebraGenerator r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.AlgebraGenerator;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: void <init>(com.hp.hpl.jena.sparql.util.Context)>(null);

        return;
    }

    protected void <init>(com.hp.hpl.jena.sparql.util.Context, int)
    {
        int i0;
        com.hp.hpl.jena.sparql.util.Context r1;
        com.hp.hpl.jena.sparql.algebra.AlgebraGenerator r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.AlgebraGenerator;

        r1 := @parameter0: com.hp.hpl.jena.sparql.util.Context;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: boolean fixedFilterPosition> = 0;

        r0.<com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: com.hp.hpl.jena.sparql.util.Context context> = r1;

        r0.<com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: int subQueryDepth> = i0;

        return;
    }

    public com.hp.hpl.jena.sparql.algebra.Op compile(com.hp.hpl.jena.query.Query)
    {
        com.hp.hpl.jena.query.Query r1;
        com.hp.hpl.jena.sparql.syntax.Element $r2;
        com.hp.hpl.jena.sparql.algebra.AlgebraGenerator r0;
        com.hp.hpl.jena.sparql.algebra.Op $r3, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.AlgebraGenerator;

        r1 := @parameter0: com.hp.hpl.jena.query.Query;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.syntax.Element getQueryPattern()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: com.hp.hpl.jena.sparql.algebra.Op compile(com.hp.hpl.jena.sparql.syntax.Element)>($r2);

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: com.hp.hpl.jena.sparql.algebra.Op compileModifiers(com.hp.hpl.jena.query.Query,com.hp.hpl.jena.sparql.algebra.Op)>(r1, $r3);

        return $r4;
    }

    public com.hp.hpl.jena.sparql.algebra.Op compile(com.hp.hpl.jena.sparql.syntax.Element)
    {
        com.hp.hpl.jena.sparql.syntax.Element r1;
        com.hp.hpl.jena.sparql.algebra.Transform $r3;
        com.hp.hpl.jena.sparql.algebra.AlgebraGenerator r0;
        com.hp.hpl.jena.sparql.algebra.Op $r2, r4;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.AlgebraGenerator;

        r1 := @parameter0: com.hp.hpl.jena.sparql.syntax.Element;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: com.hp.hpl.jena.sparql.algebra.Op compileElement(com.hp.hpl.jena.sparql.syntax.Element)>(r1);

        r4 = $r2;

        $r3 = <com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: com.hp.hpl.jena.sparql.algebra.Transform simplify>;

        if $r3 == null goto label1;

        r4 = staticinvoke <com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: com.hp.hpl.jena.sparql.algebra.Op simplify(com.hp.hpl.jena.sparql.algebra.Op)>($r2);

     label1:
        return r4;
    }

    protected static com.hp.hpl.jena.sparql.algebra.Op simplify(com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.Transform $r1;
        com.hp.hpl.jena.sparql.algebra.Op r0, $r2;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        $r1 = <com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: com.hp.hpl.jena.sparql.algebra.Transform simplify>;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.algebra.Transformer: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.Transform,com.hp.hpl.jena.sparql.algebra.Op)>($r1, r0);

        return $r2;
    }

    protected com.hp.hpl.jena.sparql.algebra.Op compileElement(com.hp.hpl.jena.sparql.syntax.Element)
    {
        com.hp.hpl.jena.sparql.algebra.Op $r7, $r10, $r12, $r15, $r18, $r20, $r22, $r24, $r26;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        com.hp.hpl.jena.sparql.syntax.ElementUnion $r23;
        com.hp.hpl.jena.sparql.syntax.ElementPathBlock $r13;
        com.hp.hpl.jena.sparql.syntax.ElementGroup $r25;
        com.hp.hpl.jena.sparql.syntax.Element r0;
        java.lang.StringBuilder $r2, $r3, $r5;
        com.hp.hpl.jena.sparql.syntax.ElementNamedGraph $r21;
        com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock $r16;
        com.hp.hpl.jena.sparql.algebra.op.OpNull $r8;
        com.hp.hpl.jena.sparql.syntax.ElementData $r9;
        com.hp.hpl.jena.sparql.syntax.ElementService $r19;
        com.hp.hpl.jena.sparql.syntax.ElementSubQuery $r11;
        com.hp.hpl.jena.sparql.core.PathBlock $r14;
        java.lang.String $r4, $r6;
        com.hp.hpl.jena.sparql.core.BasicPattern $r17;
        com.hp.hpl.jena.sparql.algebra.AlgebraGenerator r1;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.AlgebraGenerator;

        r0 := @parameter0: com.hp.hpl.jena.sparql.syntax.Element;

        $z0 = r0 instanceof com.hp.hpl.jena.sparql.syntax.ElementGroup;

        if $z0 == 0 goto label1;

        $r25 = (com.hp.hpl.jena.sparql.syntax.ElementGroup) r0;

        $r26 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: com.hp.hpl.jena.sparql.algebra.Op compileElementGroup(com.hp.hpl.jena.sparql.syntax.ElementGroup)>($r25);

        return $r26;

     label1:
        $z1 = r0 instanceof com.hp.hpl.jena.sparql.syntax.ElementUnion;

        if $z1 == 0 goto label2;

        $r23 = (com.hp.hpl.jena.sparql.syntax.ElementUnion) r0;

        $r24 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: com.hp.hpl.jena.sparql.algebra.Op compileElementUnion(com.hp.hpl.jena.sparql.syntax.ElementUnion)>($r23);

        return $r24;

     label2:
        $z2 = r0 instanceof com.hp.hpl.jena.sparql.syntax.ElementNamedGraph;

        if $z2 == 0 goto label3;

        $r21 = (com.hp.hpl.jena.sparql.syntax.ElementNamedGraph) r0;

        $r22 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: com.hp.hpl.jena.sparql.algebra.Op compileElementGraph(com.hp.hpl.jena.sparql.syntax.ElementNamedGraph)>($r21);

        return $r22;

     label3:
        $z3 = r0 instanceof com.hp.hpl.jena.sparql.syntax.ElementService;

        if $z3 == 0 goto label4;

        $r19 = (com.hp.hpl.jena.sparql.syntax.ElementService) r0;

        $r20 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: com.hp.hpl.jena.sparql.algebra.Op compileElementService(com.hp.hpl.jena.sparql.syntax.ElementService)>($r19);

        return $r20;

     label4:
        $z4 = r0 instanceof com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock;

        if $z4 == 0 goto label5;

        $r16 = (com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock) r0;

        $r17 = virtualinvoke $r16.<com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock: com.hp.hpl.jena.sparql.core.BasicPattern getPattern()>();

        $r18 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: com.hp.hpl.jena.sparql.algebra.Op compileBasicPattern(com.hp.hpl.jena.sparql.core.BasicPattern)>($r17);

        return $r18;

     label5:
        $z5 = r0 instanceof com.hp.hpl.jena.sparql.syntax.ElementPathBlock;

        if $z5 == 0 goto label6;

        $r13 = (com.hp.hpl.jena.sparql.syntax.ElementPathBlock) r0;

        $r14 = virtualinvoke $r13.<com.hp.hpl.jena.sparql.syntax.ElementPathBlock: com.hp.hpl.jena.sparql.core.PathBlock getPattern()>();

        $r15 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: com.hp.hpl.jena.sparql.algebra.Op compilePathBlock(com.hp.hpl.jena.sparql.core.PathBlock)>($r14);

        return $r15;

     label6:
        $z6 = r0 instanceof com.hp.hpl.jena.sparql.syntax.ElementSubQuery;

        if $z6 == 0 goto label7;

        $r11 = (com.hp.hpl.jena.sparql.syntax.ElementSubQuery) r0;

        $r12 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: com.hp.hpl.jena.sparql.algebra.Op compileElementSubquery(com.hp.hpl.jena.sparql.syntax.ElementSubQuery)>($r11);

        return $r12;

     label7:
        $z7 = r0 instanceof com.hp.hpl.jena.sparql.syntax.ElementData;

        if $z7 == 0 goto label8;

        $r9 = (com.hp.hpl.jena.sparql.syntax.ElementData) r0;

        $r10 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: com.hp.hpl.jena.sparql.algebra.Op compileElementData(com.hp.hpl.jena.sparql.syntax.ElementData)>($r9);

        return $r10;

     label8:
        if r0 != null goto label9;

        $r8 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpNull: com.hp.hpl.jena.sparql.algebra.op.OpNull create()>();

        return $r8;

     label9:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("compile(Element)/Not a structural element: ");

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.util.Utils: java.lang.String className(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: com.hp.hpl.jena.sparql.algebra.Op compileUnknownElement(com.hp.hpl.jena.sparql.syntax.Element,java.lang.String)>(r0, $r6);

        return $r7;
    }

    protected com.hp.hpl.jena.sparql.algebra.Op compileUnknownElement(com.hp.hpl.jena.sparql.syntax.Element, java.lang.String)
    {
        com.hp.hpl.jena.sparql.syntax.Element r2;
        java.lang.String r1;
        com.hp.hpl.jena.sparql.algebra.AlgebraGenerator r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.AlgebraGenerator;

        r2 := @parameter0: com.hp.hpl.jena.sparql.syntax.Element;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: void broken(java.lang.String)>(r1);

        return null;
    }

    protected com.hp.hpl.jena.sparql.algebra.Op compileElementGroup(com.hp.hpl.jena.sparql.syntax.ElementGroup)
    {
        java.util.ListIterator $r8;
        com.hp.hpl.jena.sparql.expr.Expr r14;
        com.hp.hpl.jena.sparql.algebra.Op r12;
        boolean $z0, $z1;
        java.util.Iterator $r9;
        java.util.List r4, r6;
        com.hp.hpl.jena.sparql.syntax.ElementGroup r1;
        org.apache.jena.atlas.lib.Pair $r2;
        com.hp.hpl.jena.sparql.syntax.Element r13;
        java.lang.Object $r3, $r5, $r10, $r11;
        java.util.ArrayDeque $r7;
        com.hp.hpl.jena.sparql.algebra.AlgebraGenerator r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.AlgebraGenerator;

        r1 := @parameter0: com.hp.hpl.jena.sparql.syntax.ElementGroup;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: org.apache.jena.atlas.lib.Pair prepareGroup(com.hp.hpl.jena.sparql.syntax.ElementGroup)>(r1);

        $r3 = virtualinvoke $r2.<org.apache.jena.atlas.lib.Pair: java.lang.Object getLeft()>();

        r4 = (java.util.List) $r3;

        $r5 = virtualinvoke $r2.<org.apache.jena.atlas.lib.Pair: java.lang.Object getRight()>();

        r6 = (java.util.List) $r5;

        r12 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpTable: com.hp.hpl.jena.sparql.algebra.op.OpTable unit()>();

        $r7 = new java.util.ArrayDeque;

        specialinvoke $r7.<java.util.ArrayDeque: void <init>()>();

        $r8 = interfaceinvoke r6.<java.util.List: java.util.ListIterator listIterator()>();

     label1:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r11 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r13 = (com.hp.hpl.jena.sparql.syntax.Element) $r11;

        if r13 == null goto label2;

        r12 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: com.hp.hpl.jena.sparql.algebra.Op compileOneInGroup(com.hp.hpl.jena.sparql.syntax.Element,com.hp.hpl.jena.sparql.algebra.Op,java.util.Deque)>(r13, r12, $r7);

     label2:
        goto label1;

     label3:
        if r4 == null goto label5;

        $r9 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r14 = (com.hp.hpl.jena.sparql.expr.Expr) $r10;

        r12 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.algebra.Op filter(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.algebra.Op)>(r14, r12);

        goto label4;

     label5:
        return r12;
    }

    protected org.apache.jena.atlas.lib.Pair prepareGroup(com.hp.hpl.jena.sparql.syntax.ElementGroup)
    {
        com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock r21;
        java.util.ArrayList $r0, $r17, r19;
        com.hp.hpl.jena.sparql.core.PathBlock $r8, r18;
        com.hp.hpl.jena.sparql.expr.Expr $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Iterator $r3, $r11;
        com.hp.hpl.jena.sparql.core.BasicPattern $r10;
        com.hp.hpl.jena.sparql.core.TriplePath $r14;
        com.hp.hpl.jena.sparql.syntax.ElementPathBlock $r9, $r15, r22;
        com.hp.hpl.jena.graph.Triple r13;
        java.util.List $r2;
        com.hp.hpl.jena.sparql.syntax.ElementFilter r20;
        com.hp.hpl.jena.sparql.syntax.ElementGroup r1;
        org.apache.jena.atlas.lib.Pair $r4;
        com.hp.hpl.jena.sparql.syntax.Element r6;
        java.lang.Object $r5, $r12;
        com.hp.hpl.jena.sparql.algebra.AlgebraGenerator r7;

        r7 := @this: com.hp.hpl.jena.sparql.algebra.AlgebraGenerator;

        r1 := @parameter0: com.hp.hpl.jena.sparql.syntax.ElementGroup;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        r18 = null;

        r19 = null;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.syntax.ElementGroup: java.util.List getElements()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z4 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label10;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.hp.hpl.jena.sparql.syntax.Element) $r5;

        $z0 = r7.<com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: boolean fixedFilterPosition>;

        if $z0 != 0 goto label03;

        $z3 = r6 instanceof com.hp.hpl.jena.sparql.syntax.ElementFilter;

        if $z3 == 0 goto label03;

        r20 = (com.hp.hpl.jena.sparql.syntax.ElementFilter) r6;

        if r19 != null goto label02;

        $r17 = new java.util.ArrayList;

        specialinvoke $r17.<java.util.ArrayList: void <init>()>();

        r19 = $r17;

     label02:
        $r16 = virtualinvoke r20.<com.hp.hpl.jena.sparql.syntax.ElementFilter: com.hp.hpl.jena.sparql.expr.Expr getExpr()>();

        interfaceinvoke r19.<java.util.List: boolean add(java.lang.Object)>($r16);

        goto label01;

     label03:
        $z1 = r6 instanceof com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock;

        if $z1 == 0 goto label07;

        r21 = (com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock) r6;

        if r18 != null goto label04;

        $r15 = new com.hp.hpl.jena.sparql.syntax.ElementPathBlock;

        specialinvoke $r15.<com.hp.hpl.jena.sparql.syntax.ElementPathBlock: void <init>()>();

        r18 = virtualinvoke $r15.<com.hp.hpl.jena.sparql.syntax.ElementPathBlock: com.hp.hpl.jena.sparql.core.PathBlock getPattern()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r15);

     label04:
        $r10 = virtualinvoke r21.<com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock: com.hp.hpl.jena.sparql.core.BasicPattern getPattern()>();

        $r11 = virtualinvoke $r10.<com.hp.hpl.jena.sparql.core.BasicPattern: java.util.Iterator iterator()>();

     label05:
        $z5 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label06;

        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r13 = (com.hp.hpl.jena.graph.Triple) $r12;

        $r14 = new com.hp.hpl.jena.sparql.core.TriplePath;

        specialinvoke $r14.<com.hp.hpl.jena.sparql.core.TriplePath: void <init>(com.hp.hpl.jena.graph.Triple)>(r13);

        virtualinvoke r18.<com.hp.hpl.jena.sparql.core.PathBlock: void add(com.hp.hpl.jena.sparql.core.TriplePath)>($r14);

        goto label05;

     label06:
        goto label01;

     label07:
        $z2 = r6 instanceof com.hp.hpl.jena.sparql.syntax.ElementPathBlock;

        if $z2 == 0 goto label09;

        r22 = (com.hp.hpl.jena.sparql.syntax.ElementPathBlock) r6;

        if r18 != null goto label08;

        $r9 = new com.hp.hpl.jena.sparql.syntax.ElementPathBlock;

        specialinvoke $r9.<com.hp.hpl.jena.sparql.syntax.ElementPathBlock: void <init>()>();

        r18 = virtualinvoke $r9.<com.hp.hpl.jena.sparql.syntax.ElementPathBlock: com.hp.hpl.jena.sparql.core.PathBlock getPattern()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r9);

     label08:
        $r8 = virtualinvoke r22.<com.hp.hpl.jena.sparql.syntax.ElementPathBlock: com.hp.hpl.jena.sparql.core.PathBlock getPattern()>();

        virtualinvoke r18.<com.hp.hpl.jena.sparql.core.PathBlock: void addAll(com.hp.hpl.jena.sparql.core.PathBlock)>($r8);

        goto label01;

     label09:
        r18 = null;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r6);

        goto label01;

     label10:
        $r4 = staticinvoke <org.apache.jena.atlas.lib.Pair: org.apache.jena.atlas.lib.Pair create(java.lang.Object,java.lang.Object)>(r19, $r0);

        return $r4;
    }

    protected com.hp.hpl.jena.sparql.algebra.Op compileOneInGroup(com.hp.hpl.jena.sparql.syntax.Element, com.hp.hpl.jena.sparql.algebra.Op, java.util.Deque)
    {
        com.hp.hpl.jena.sparql.expr.Expr $r9, $r16, $r19;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r8, $r10, $r11, $r12, $r13, $r14, $r17, $r20, $r26, $r27;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        com.hp.hpl.jena.sparql.syntax.ElementAssign r22;
        com.hp.hpl.jena.sparql.syntax.ElementOptional r24;
        com.hp.hpl.jena.sparql.syntax.ElementFilter r30;
        com.hp.hpl.jena.sparql.syntax.ElementExists r28;
        com.hp.hpl.jena.sparql.syntax.Element r0;
        java.lang.StringBuilder $r3, $r4, $r6;
        java.util.Deque r21;
        com.hp.hpl.jena.sparql.syntax.ElementBind r23;
        java.lang.String $r5, $r7;
        com.hp.hpl.jena.sparql.syntax.ElementNotExists r29;
        com.hp.hpl.jena.sparql.core.Var $r15, $r18;
        com.hp.hpl.jena.sparql.syntax.ElementMinus r25;
        com.hp.hpl.jena.sparql.algebra.AlgebraGenerator r1;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.AlgebraGenerator;

        r0 := @parameter0: com.hp.hpl.jena.sparql.syntax.Element;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        r21 := @parameter2: java.util.Deque;

        $z0 = r0 instanceof com.hp.hpl.jena.sparql.syntax.ElementAssign;

        if $z0 == 0 goto label1;

        r22 = (com.hp.hpl.jena.sparql.syntax.ElementAssign) r0;

        $r18 = virtualinvoke r22.<com.hp.hpl.jena.sparql.syntax.ElementAssign: com.hp.hpl.jena.sparql.core.Var getVar()>();

        $r19 = virtualinvoke r22.<com.hp.hpl.jena.sparql.syntax.ElementAssign: com.hp.hpl.jena.sparql.expr.Expr getExpr()>();

        $r20 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpAssign: com.hp.hpl.jena.sparql.algebra.Op assign(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.sparql.expr.Expr)>(r2, $r18, $r19);

        return $r20;

     label1:
        $z1 = r0 instanceof com.hp.hpl.jena.sparql.syntax.ElementBind;

        if $z1 == 0 goto label2;

        r23 = (com.hp.hpl.jena.sparql.syntax.ElementBind) r0;

        $r15 = virtualinvoke r23.<com.hp.hpl.jena.sparql.syntax.ElementBind: com.hp.hpl.jena.sparql.core.Var getVar()>();

        $r16 = virtualinvoke r23.<com.hp.hpl.jena.sparql.syntax.ElementBind: com.hp.hpl.jena.sparql.expr.Expr getExpr()>();

        $r17 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpExtend: com.hp.hpl.jena.sparql.algebra.Op extend(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.sparql.expr.Expr)>(r2, $r15, $r16);

        return $r17;

     label2:
        $z2 = r0 instanceof com.hp.hpl.jena.sparql.syntax.ElementOptional;

        if $z2 == 0 goto label3;

        r24 = (com.hp.hpl.jena.sparql.syntax.ElementOptional) r0;

        $r14 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: com.hp.hpl.jena.sparql.algebra.Op compileElementOptional(com.hp.hpl.jena.sparql.syntax.ElementOptional,com.hp.hpl.jena.sparql.algebra.Op)>(r24, r2);

        return $r14;

     label3:
        $z3 = r0 instanceof com.hp.hpl.jena.sparql.syntax.ElementMinus;

        if $z3 == 0 goto label4;

        r25 = (com.hp.hpl.jena.sparql.syntax.ElementMinus) r0;

        $r13 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: com.hp.hpl.jena.sparql.algebra.Op compileElementMinus(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.syntax.ElementMinus)>(r2, r25);

        return $r13;

     label4:
        $z4 = r0 instanceof com.hp.hpl.jena.sparql.syntax.ElementGroup;

        if $z4 != 0 goto label5;

        $z5 = r0 instanceof com.hp.hpl.jena.sparql.syntax.ElementNamedGraph;

        if $z5 != 0 goto label5;

        $z6 = r0 instanceof com.hp.hpl.jena.sparql.syntax.ElementService;

        if $z6 != 0 goto label5;

        $z7 = r0 instanceof com.hp.hpl.jena.sparql.syntax.ElementUnion;

        if $z7 != 0 goto label5;

        $z8 = r0 instanceof com.hp.hpl.jena.sparql.syntax.ElementSubQuery;

        if $z8 != 0 goto label5;

        $z9 = r0 instanceof com.hp.hpl.jena.sparql.syntax.ElementData;

        if $z9 != 0 goto label5;

        $z10 = r0 instanceof com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock;

        if $z10 != 0 goto label5;

        $z11 = r0 instanceof com.hp.hpl.jena.sparql.syntax.ElementPathBlock;

        if $z11 == 0 goto label6;

     label5:
        $r26 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: com.hp.hpl.jena.sparql.algebra.Op compileElement(com.hp.hpl.jena.sparql.syntax.Element)>(r0);

        $r27 = staticinvoke <com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: com.hp.hpl.jena.sparql.algebra.Op join(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r2, $r26);

        return $r27;

     label6:
        $z12 = r0 instanceof com.hp.hpl.jena.sparql.syntax.ElementExists;

        if $z12 == 0 goto label7;

        r28 = (com.hp.hpl.jena.sparql.syntax.ElementExists) r0;

        $r12 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: com.hp.hpl.jena.sparql.algebra.Op compileElementExists(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.syntax.ElementExists)>(r2, r28);

        return $r12;

     label7:
        $z13 = r0 instanceof com.hp.hpl.jena.sparql.syntax.ElementNotExists;

        if $z13 == 0 goto label8;

        r29 = (com.hp.hpl.jena.sparql.syntax.ElementNotExists) r0;

        $r11 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: com.hp.hpl.jena.sparql.algebra.Op compileElementNotExists(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.syntax.ElementNotExists)>(r2, r29);

        return $r11;

     label8:
        $z14 = r0 instanceof com.hp.hpl.jena.sparql.syntax.ElementFilter;

        if $z14 == 0 goto label9;

        r30 = (com.hp.hpl.jena.sparql.syntax.ElementFilter) r0;

        $r9 = virtualinvoke r30.<com.hp.hpl.jena.sparql.syntax.ElementFilter: com.hp.hpl.jena.sparql.expr.Expr getExpr()>();

        $r10 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.algebra.Op filter(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.algebra.Op)>($r9, r2);

        return $r10;

     label9:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("compile/Element not recognized: ");

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.util.Utils: java.lang.String className(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: com.hp.hpl.jena.sparql.algebra.Op compileUnknownElement(com.hp.hpl.jena.sparql.syntax.Element,java.lang.String)>(r0, $r7);

        return $r8;
    }

    protected com.hp.hpl.jena.sparql.algebra.Op compileElementUnion(com.hp.hpl.jena.sparql.syntax.ElementUnion)
    {
        com.hp.hpl.jena.sparql.syntax.ElementUnion r0;
        java.util.Iterator $r2;
        java.util.List $r1;
        com.hp.hpl.jena.sparql.syntax.Element r4;
        java.lang.Object $r3;
        com.hp.hpl.jena.sparql.algebra.AlgebraGenerator r5;
        com.hp.hpl.jena.sparql.algebra.Op $r6, r7;
        boolean $z0;

        r5 := @this: com.hp.hpl.jena.sparql.algebra.AlgebraGenerator;

        r0 := @parameter0: com.hp.hpl.jena.sparql.syntax.ElementUnion;

        r7 = null;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.syntax.ElementUnion: java.util.List getElements()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.hp.hpl.jena.sparql.syntax.Element) $r3;

        $r6 = virtualinvoke r5.<com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: com.hp.hpl.jena.sparql.algebra.Op compileElement(com.hp.hpl.jena.sparql.syntax.Element)>(r4);

        r7 = virtualinvoke r5.<com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: com.hp.hpl.jena.sparql.algebra.Op union(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r7, $r6);

        goto label1;

     label2:
        return r7;
    }

    protected com.hp.hpl.jena.sparql.algebra.Op compileElementNotExists(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.syntax.ElementNotExists)
    {
        com.hp.hpl.jena.sparql.expr.E_LogicalNot $r5;
        com.hp.hpl.jena.sparql.expr.E_Exists $r4;
        com.hp.hpl.jena.sparql.syntax.Element $r2;
        com.hp.hpl.jena.sparql.algebra.AlgebraGenerator r0;
        com.hp.hpl.jena.sparql.syntax.ElementNotExists r1;
        com.hp.hpl.jena.sparql.algebra.Op $r3, r6, $r7;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.AlgebraGenerator;

        r6 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r1 := @parameter1: com.hp.hpl.jena.sparql.syntax.ElementNotExists;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.syntax.ElementNotExists: com.hp.hpl.jena.sparql.syntax.Element getElement()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: com.hp.hpl.jena.sparql.algebra.Op compile(com.hp.hpl.jena.sparql.syntax.Element)>($r2);

        $r4 = new com.hp.hpl.jena.sparql.expr.E_Exists;

        specialinvoke $r4.<com.hp.hpl.jena.sparql.expr.E_Exists: void <init>(com.hp.hpl.jena.sparql.syntax.Element,com.hp.hpl.jena.sparql.algebra.Op)>(r1, $r3);

        $r5 = new com.hp.hpl.jena.sparql.expr.E_LogicalNot;

        specialinvoke $r5.<com.hp.hpl.jena.sparql.expr.E_LogicalNot: void <init>(com.hp.hpl.jena.sparql.expr.Expr)>($r4);

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.algebra.Op filter(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.algebra.Op)>($r5, r6);

        return $r7;
    }

    protected com.hp.hpl.jena.sparql.algebra.Op compileElementExists(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.syntax.ElementExists)
    {
        com.hp.hpl.jena.sparql.expr.E_Exists $r4;
        com.hp.hpl.jena.sparql.syntax.ElementExists r1;
        com.hp.hpl.jena.sparql.syntax.Element $r2;
        com.hp.hpl.jena.sparql.algebra.AlgebraGenerator r0;
        com.hp.hpl.jena.sparql.algebra.Op $r3, r5, $r6;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.AlgebraGenerator;

        r5 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r1 := @parameter1: com.hp.hpl.jena.sparql.syntax.ElementExists;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.syntax.ElementExists: com.hp.hpl.jena.sparql.syntax.Element getElement()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: com.hp.hpl.jena.sparql.algebra.Op compile(com.hp.hpl.jena.sparql.syntax.Element)>($r2);

        $r4 = new com.hp.hpl.jena.sparql.expr.E_Exists;

        specialinvoke $r4.<com.hp.hpl.jena.sparql.expr.E_Exists: void <init>(com.hp.hpl.jena.sparql.syntax.Element,com.hp.hpl.jena.sparql.algebra.Op)>(r1, $r3);

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.algebra.Op filter(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.algebra.Op)>($r4, r5);

        return $r6;
    }

    protected com.hp.hpl.jena.sparql.algebra.Op compileElementMinus(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.syntax.ElementMinus)
    {
        com.hp.hpl.jena.sparql.syntax.ElementMinus r1;
        com.hp.hpl.jena.sparql.syntax.Element $r2;
        com.hp.hpl.jena.sparql.algebra.AlgebraGenerator r0;
        com.hp.hpl.jena.sparql.algebra.Op $r3, r4, $r5;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.AlgebraGenerator;

        r4 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r1 := @parameter1: com.hp.hpl.jena.sparql.syntax.ElementMinus;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.syntax.ElementMinus: com.hp.hpl.jena.sparql.syntax.Element getMinusElement()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: com.hp.hpl.jena.sparql.algebra.Op compile(com.hp.hpl.jena.sparql.syntax.Element)>($r2);

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpMinus: com.hp.hpl.jena.sparql.algebra.Op create(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r4, $r3);

        return $r5;
    }

    protected com.hp.hpl.jena.sparql.algebra.Op compileElementData(com.hp.hpl.jena.sparql.syntax.ElementData)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpTable $r2;
        com.hp.hpl.jena.sparql.syntax.ElementData r0;
        com.hp.hpl.jena.sparql.algebra.Table $r1;
        com.hp.hpl.jena.sparql.algebra.AlgebraGenerator r3;

        r3 := @this: com.hp.hpl.jena.sparql.algebra.AlgebraGenerator;

        r0 := @parameter0: com.hp.hpl.jena.sparql.syntax.ElementData;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.syntax.ElementData: com.hp.hpl.jena.sparql.algebra.Table getTable()>();

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpTable: com.hp.hpl.jena.sparql.algebra.op.OpTable create(com.hp.hpl.jena.sparql.algebra.Table)>($r1);

        return $r2;
    }

    protected com.hp.hpl.jena.sparql.algebra.Op compileElementUnion(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.syntax.ElementUnion)
    {
        com.hp.hpl.jena.sparql.syntax.ElementUnion r1;
        java.util.List $r2;
        com.hp.hpl.jena.sparql.syntax.Element $r4;
        java.lang.Object $r3;
        com.hp.hpl.jena.sparql.algebra.AlgebraGenerator r0;
        com.hp.hpl.jena.sparql.algebra.Op $r5, r6, $r7;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.AlgebraGenerator;

        r6 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r1 := @parameter1: com.hp.hpl.jena.sparql.syntax.ElementUnion;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.syntax.ElementUnion: java.util.List getElements()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = (com.hp.hpl.jena.sparql.syntax.Element) $r3;

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: com.hp.hpl.jena.sparql.algebra.Op compile(com.hp.hpl.jena.sparql.syntax.Element)>($r4);

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpUnion: com.hp.hpl.jena.sparql.algebra.Op create(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r6, $r5);

        return $r7;
    }

    protected com.hp.hpl.jena.sparql.algebra.Op compileElementOptional(com.hp.hpl.jena.sparql.syntax.ElementOptional, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpFilter r4;
        com.hp.hpl.jena.sparql.syntax.ElementOptional r0;
        com.hp.hpl.jena.sparql.expr.ExprList r8;
        com.hp.hpl.jena.sparql.syntax.Element $r1;
        com.hp.hpl.jena.sparql.algebra.AlgebraGenerator r2;
        com.hp.hpl.jena.sparql.algebra.Op $r3, $r5, r6, r7, $r9;
        boolean $z0, $z1;

        r2 := @this: com.hp.hpl.jena.sparql.algebra.AlgebraGenerator;

        r0 := @parameter0: com.hp.hpl.jena.sparql.syntax.ElementOptional;

        r6 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.syntax.ElementOptional: com.hp.hpl.jena.sparql.syntax.Element getOptionalElement()>();

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: com.hp.hpl.jena.sparql.algebra.Op compileElement(com.hp.hpl.jena.sparql.syntax.Element)>($r1);

        r7 = $r3;

        r8 = null;

        $z0 = $r3 instanceof com.hp.hpl.jena.sparql.algebra.op.OpFilter;

        if $z0 == 0 goto label2;

        r4 = (com.hp.hpl.jena.sparql.algebra.op.OpFilter) $r3;

        $r5 = virtualinvoke r4.<com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $z1 = $r5 instanceof com.hp.hpl.jena.sparql.algebra.op.OpFilter;

        if $z1 == 0 goto label1;

        virtualinvoke r2.<com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: void broken(java.lang.String)>("compile/Optional/nested filters - unfinished");

     label1:
        r8 = virtualinvoke r4.<com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.expr.ExprList getExprs()>();

        r7 = $r5;

     label2:
        $r9 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin: com.hp.hpl.jena.sparql.algebra.Op create(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.expr.ExprList)>(r6, r7, r8);

        return $r9;
    }

    protected com.hp.hpl.jena.sparql.algebra.Op compileBasicPattern(com.hp.hpl.jena.sparql.core.BasicPattern)
    {
        com.hp.hpl.jena.sparql.core.BasicPattern r1;
        com.hp.hpl.jena.sparql.algebra.op.OpBGP $r0;
        com.hp.hpl.jena.sparql.algebra.AlgebraGenerator r2;

        r2 := @this: com.hp.hpl.jena.sparql.algebra.AlgebraGenerator;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.BasicPattern;

        $r0 = new com.hp.hpl.jena.sparql.algebra.op.OpBGP;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.algebra.op.OpBGP: void <init>(com.hp.hpl.jena.sparql.core.BasicPattern)>(r1);

        return $r0;
    }

    protected com.hp.hpl.jena.sparql.algebra.Op compilePathBlock(com.hp.hpl.jena.sparql.core.PathBlock)
    {
        com.hp.hpl.jena.sparql.core.PathBlock r0;
        com.hp.hpl.jena.sparql.algebra.op.OpTable $r2;
        int $i0;
        com.hp.hpl.jena.sparql.algebra.Op $r1;
        com.hp.hpl.jena.sparql.algebra.AlgebraGenerator r3;

        r3 := @this: com.hp.hpl.jena.sparql.algebra.AlgebraGenerator;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.PathBlock;

        $i0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.PathBlock: int size()>();

        if $i0 != 0 goto label1;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpTable: com.hp.hpl.jena.sparql.algebra.op.OpTable unit()>();

        return $r2;

     label1:
        $r1 = staticinvoke <com.hp.hpl.jena.sparql.path.PathLib: com.hp.hpl.jena.sparql.algebra.Op pathToTriples(com.hp.hpl.jena.sparql.core.PathBlock)>(r0);

        return $r1;
    }

    protected com.hp.hpl.jena.sparql.algebra.Op compileElementGraph(com.hp.hpl.jena.sparql.syntax.ElementNamedGraph)
    {
        com.hp.hpl.jena.sparql.syntax.ElementNamedGraph r0;
        com.hp.hpl.jena.sparql.algebra.op.OpGraph $r5;
        com.hp.hpl.jena.sparql.syntax.Element $r3;
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.sparql.algebra.AlgebraGenerator r2;
        com.hp.hpl.jena.sparql.algebra.Op $r4;

        r2 := @this: com.hp.hpl.jena.sparql.algebra.AlgebraGenerator;

        r0 := @parameter0: com.hp.hpl.jena.sparql.syntax.ElementNamedGraph;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.syntax.ElementNamedGraph: com.hp.hpl.jena.graph.Node getGraphNameNode()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.syntax.ElementNamedGraph: com.hp.hpl.jena.sparql.syntax.Element getElement()>();

        $r4 = virtualinvoke r2.<com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: com.hp.hpl.jena.sparql.algebra.Op compileElement(com.hp.hpl.jena.sparql.syntax.Element)>($r3);

        $r5 = new com.hp.hpl.jena.sparql.algebra.op.OpGraph;

        specialinvoke $r5.<com.hp.hpl.jena.sparql.algebra.op.OpGraph: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.algebra.Op)>($r1, $r4);

        return $r5;
    }

    protected com.hp.hpl.jena.sparql.algebra.Op compileElementService(com.hp.hpl.jena.sparql.syntax.ElementService)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpService $r5;
        com.hp.hpl.jena.sparql.syntax.Element $r3;
        com.hp.hpl.jena.sparql.syntax.ElementService r0;
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.sparql.algebra.AlgebraGenerator r2;
        com.hp.hpl.jena.sparql.algebra.Op $r4;
        boolean $z0;

        r2 := @this: com.hp.hpl.jena.sparql.algebra.AlgebraGenerator;

        r0 := @parameter0: com.hp.hpl.jena.sparql.syntax.ElementService;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.syntax.ElementService: com.hp.hpl.jena.graph.Node getServiceNode()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.syntax.ElementService: com.hp.hpl.jena.sparql.syntax.Element getElement()>();

        $r4 = virtualinvoke r2.<com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: com.hp.hpl.jena.sparql.algebra.Op compileElement(com.hp.hpl.jena.sparql.syntax.Element)>($r3);

        $r5 = new com.hp.hpl.jena.sparql.algebra.op.OpService;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.syntax.ElementService: boolean getSilent()>();

        specialinvoke $r5.<com.hp.hpl.jena.sparql.algebra.op.OpService: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.syntax.ElementService,boolean)>($r1, $r4, r0, $z0);

        return $r5;
    }

    protected com.hp.hpl.jena.sparql.algebra.Op compileElementSubquery(com.hp.hpl.jena.sparql.syntax.ElementSubQuery)
    {
        com.hp.hpl.jena.query.Query $r4;
        com.hp.hpl.jena.sparql.util.Context $r2;
        com.hp.hpl.jena.sparql.syntax.ElementSubQuery r3;
        int $i0, $i1;
        com.hp.hpl.jena.sparql.algebra.AlgebraGenerator $r0, r1;
        com.hp.hpl.jena.sparql.algebra.Op $r5;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.AlgebraGenerator;

        r3 := @parameter0: com.hp.hpl.jena.sparql.syntax.ElementSubQuery;

        $r0 = new com.hp.hpl.jena.sparql.algebra.AlgebraGenerator;

        $r2 = r1.<com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: com.hp.hpl.jena.sparql.util.Context context>;

        $i0 = r1.<com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: int subQueryDepth>;

        $i1 = $i0 + 1;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: void <init>(com.hp.hpl.jena.sparql.util.Context,int)>($r2, $i1);

        $r4 = virtualinvoke r3.<com.hp.hpl.jena.sparql.syntax.ElementSubQuery: com.hp.hpl.jena.query.Query getQuery()>();

        $r5 = virtualinvoke $r0.<com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: com.hp.hpl.jena.sparql.algebra.Op compile(com.hp.hpl.jena.query.Query)>($r4);

        return $r5;
    }

    protected com.hp.hpl.jena.sparql.algebra.Op compileModifiers(com.hp.hpl.jena.query.Query, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpGroup $r34;
        com.hp.hpl.jena.sparql.algebra.Op r4, r37;
        com.hp.hpl.jena.sparql.util.Context $r7;
        long $l1, $l2;
        java.util.ArrayList $r3, $r11;
        com.hp.hpl.jena.sparql.algebra.op.OpList $r19;
        com.hp.hpl.jena.sparql.algebra.AlgebraGenerator r5;
        com.hp.hpl.jena.sparql.algebra.op.OpSlice $r9;
        com.hp.hpl.jena.sparql.algebra.op.OpOrder $r14;
        com.hp.hpl.jena.sparql.expr.Expr $r16, $r17, $r29, $r32, $r33, r42;
        com.hp.hpl.jena.sparql.core.VarExprList $r1, $r2, $r31, $r35, $r38;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15;
        com.hp.hpl.jena.query.SortCondition $r18, r44;
        java.util.List $r8, $r12, $r20, $r22, $r26, $r36, $r39;
        com.hp.hpl.jena.sparql.engine.binding.Binding r43;
        com.hp.hpl.jena.sparql.algebra.Table $r21;
        com.hp.hpl.jena.query.Query r0;
        com.hp.hpl.jena.sparql.algebra.op.OpProject $r10;
        com.hp.hpl.jena.sparql.algebra.op.OpTable $r24;
        int $i0, $i3, $i4;
        com.hp.hpl.jena.sparql.util.Symbol $r6;
        java.util.Iterator $r13, $r23, $r27, $r40;
        com.hp.hpl.jena.sparql.core.Var r41;
        java.lang.Object $r15, $r25, $r28, $r30;

        r5 := @this: com.hp.hpl.jena.sparql.algebra.AlgebraGenerator;

        r0 := @parameter0: com.hp.hpl.jena.query.Query;

        r4 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.core.VarExprList getProject()>();

        $r2 = new com.hp.hpl.jena.sparql.core.VarExprList;

        specialinvoke $r2.<com.hp.hpl.jena.sparql.core.VarExprList: void <init>()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r37 = r4;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: boolean hasGroupBy()>();

        if $z0 == 0 goto label01;

        $r34 = new com.hp.hpl.jena.sparql.algebra.op.OpGroup;

        $r35 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.core.VarExprList getGroupBy()>();

        $r36 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: java.util.List getAggregators()>();

        specialinvoke $r34.<com.hp.hpl.jena.sparql.algebra.op.OpGroup: void <init>(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.core.VarExprList,java.util.List)>(r4, $r35, $r36);

        r37 = $r34;

     label01:
        $z1 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.core.VarExprList: boolean isEmpty()>();

        if $z1 != 0 goto label05;

        $z12 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: boolean isQueryResultStar()>();

        if $z12 != 0 goto label05;

        $i4 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.core.VarExprList: int size()>();

        if $i4 != 0 goto label02;

        $z13 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: boolean isSelectType()>();

        if $z13 == 0 goto label02;

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Object,java.lang.String)>(r5, "No project variables");

     label02:
        $r38 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.core.VarExprList getProject()>();

        $r39 = virtualinvoke $r38.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.List getVars()>();

        $r40 = interfaceinvoke $r39.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z14 = interfaceinvoke $r40.<java.util.Iterator: boolean hasNext()>();

        if $z14 == 0 goto label05;

        $r30 = interfaceinvoke $r40.<java.util.Iterator: java.lang.Object next()>();

        r41 = (com.hp.hpl.jena.sparql.core.Var) $r30;

        $r31 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.core.VarExprList getProject()>();

        $r32 = virtualinvoke $r31.<com.hp.hpl.jena.sparql.core.VarExprList: com.hp.hpl.jena.sparql.expr.Expr getExpr(com.hp.hpl.jena.sparql.core.Var)>(r41);

        if $r32 == null goto label04;

        $r33 = staticinvoke <com.hp.hpl.jena.sparql.expr.ExprLib: com.hp.hpl.jena.sparql.expr.Expr replaceAggregateByVariable(com.hp.hpl.jena.sparql.expr.Expr)>($r32);

        virtualinvoke $r2.<com.hp.hpl.jena.sparql.core.VarExprList: void add(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.sparql.expr.Expr)>(r41, $r33);

     label04:
        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r41);

        goto label03;

     label05:
        $z15 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.core.VarExprList: boolean isEmpty()>();

        if $z15 != 0 goto label06;

        r37 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpExtend: com.hp.hpl.jena.sparql.algebra.Op extend(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.core.VarExprList)>(r37, $r2);

     label06:
        $z2 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: boolean hasHaving()>();

        if $z2 == 0 goto label08;

        $r26 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: java.util.List getHavingExprs()>();

        $r27 = interfaceinvoke $r26.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z11 = interfaceinvoke $r27.<java.util.Iterator: boolean hasNext()>();

        if $z11 == 0 goto label08;

        $r28 = interfaceinvoke $r27.<java.util.Iterator: java.lang.Object next()>();

        r42 = (com.hp.hpl.jena.sparql.expr.Expr) $r28;

        $r29 = staticinvoke <com.hp.hpl.jena.sparql.expr.ExprLib: com.hp.hpl.jena.sparql.expr.Expr replaceAggregateByVariable(com.hp.hpl.jena.sparql.expr.Expr)>(r42);

        r37 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.algebra.Op filter(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.algebra.Op)>($r29, r37);

        goto label07;

     label08:
        $z3 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: boolean hasValues()>();

        if $z3 == 0 goto label11;

        $r20 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: java.util.List getValuesVariables()>();

        $r21 = staticinvoke <com.hp.hpl.jena.sparql.algebra.TableFactory: com.hp.hpl.jena.sparql.algebra.Table create(java.util.List)>($r20);

        $r22 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: java.util.List getValuesData()>();

        $r23 = interfaceinvoke $r22.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z10 = interfaceinvoke $r23.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label10;

        $r25 = interfaceinvoke $r23.<java.util.Iterator: java.lang.Object next()>();

        r43 = (com.hp.hpl.jena.sparql.engine.binding.Binding) $r25;

        interfaceinvoke $r21.<com.hp.hpl.jena.sparql.algebra.Table: void addBinding(com.hp.hpl.jena.sparql.engine.binding.Binding)>(r43);

        goto label09;

     label10:
        $r24 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpTable: com.hp.hpl.jena.sparql.algebra.op.OpTable create(com.hp.hpl.jena.sparql.algebra.Table)>($r21);

        r37 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpJoin: com.hp.hpl.jena.sparql.algebra.Op create(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r37, $r24);

     label11:
        $r7 = r5.<com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: com.hp.hpl.jena.sparql.util.Context context>;

        $r6 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol generateToList>;

        $z4 = virtualinvoke $r7.<com.hp.hpl.jena.sparql.util.Context: boolean isTrue(com.hp.hpl.jena.sparql.util.Symbol)>($r6);

        if $z4 == 0 goto label12;

        $r19 = new com.hp.hpl.jena.sparql.algebra.op.OpList;

        specialinvoke $r19.<com.hp.hpl.jena.sparql.algebra.op.OpList: void <init>(com.hp.hpl.jena.sparql.algebra.Op)>(r37);

        r37 = $r19;

     label12:
        $r8 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: java.util.List getOrderBy()>();

        if $r8 == null goto label15;

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        $r12 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: java.util.List getOrderBy()>();

        $r13 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();

     label13:
        $z9 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label14;

        $r15 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r44 = (com.hp.hpl.jena.query.SortCondition) $r15;

        $r16 = virtualinvoke r44.<com.hp.hpl.jena.query.SortCondition: com.hp.hpl.jena.sparql.expr.Expr getExpression()>();

        $r17 = staticinvoke <com.hp.hpl.jena.sparql.expr.ExprLib: com.hp.hpl.jena.sparql.expr.Expr replaceAggregateByVariable(com.hp.hpl.jena.sparql.expr.Expr)>($r16);

        $r18 = new com.hp.hpl.jena.query.SortCondition;

        $i3 = virtualinvoke r44.<com.hp.hpl.jena.query.SortCondition: int getDirection()>();

        specialinvoke $r18.<com.hp.hpl.jena.query.SortCondition: void <init>(com.hp.hpl.jena.sparql.expr.Expr,int)>($r17, $i3);

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r18);

        goto label13;

     label14:
        $r14 = new com.hp.hpl.jena.sparql.algebra.op.OpOrder;

        specialinvoke $r14.<com.hp.hpl.jena.sparql.algebra.op.OpOrder: void <init>(com.hp.hpl.jena.sparql.algebra.Op,java.util.List)>(r37, $r11);

        r37 = $r14;

     label15:
        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i0 <= 0 goto label16;

        $r10 = new com.hp.hpl.jena.sparql.algebra.op.OpProject;

        specialinvoke $r10.<com.hp.hpl.jena.sparql.algebra.op.OpProject: void <init>(com.hp.hpl.jena.sparql.algebra.Op,java.util.List)>(r37, $r3);

        r37 = $r10;

     label16:
        $z5 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: boolean isDistinct()>();

        if $z5 == 0 goto label17;

        r37 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpDistinct: com.hp.hpl.jena.sparql.algebra.Op create(com.hp.hpl.jena.sparql.algebra.Op)>(r37);

     label17:
        $z6 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: boolean isReduced()>();

        if $z6 == 0 goto label18;

        r37 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpReduced: com.hp.hpl.jena.sparql.algebra.Op create(com.hp.hpl.jena.sparql.algebra.Op)>(r37);

     label18:
        $z7 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: boolean hasLimit()>();

        if $z7 != 0 goto label19;

        $z8 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: boolean hasOffset()>();

        if $z8 == 0 goto label20;

     label19:
        $r9 = new com.hp.hpl.jena.sparql.algebra.op.OpSlice;

        $l1 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: long getOffset()>();

        $l2 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: long getLimit()>();

        specialinvoke $r9.<com.hp.hpl.jena.sparql.algebra.op.OpSlice: void <init>(com.hp.hpl.jena.sparql.algebra.Op,long,long)>(r37, $l1, $l2);

        r37 = $r9;

     label20:
        return r37;
    }

    protected static com.hp.hpl.jena.sparql.algebra.Op join(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.Op r0, r1, $r2;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r1 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpJoin: com.hp.hpl.jena.sparql.algebra.Op create(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r0, r1);

        return $r2;
    }

    protected com.hp.hpl.jena.sparql.algebra.Op sequence(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.Op r0, r1, $r2;
        com.hp.hpl.jena.sparql.algebra.AlgebraGenerator r3;

        r3 := @this: com.hp.hpl.jena.sparql.algebra.AlgebraGenerator;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r1 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpSequence: com.hp.hpl.jena.sparql.algebra.Op create(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r0, r1);

        return $r2;
    }

    protected com.hp.hpl.jena.sparql.algebra.Op union(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.Op r0, r1, $r2;
        com.hp.hpl.jena.sparql.algebra.AlgebraGenerator r3;

        r3 := @this: com.hp.hpl.jena.sparql.algebra.AlgebraGenerator;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r1 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpUnion: com.hp.hpl.jena.sparql.algebra.Op create(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r0, r1);

        return $r2;
    }

    protected final void broken(java.lang.String)
    {
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r0;
        java.lang.String r1;
        com.hp.hpl.jena.sparql.algebra.AlgebraGenerator r2;

        r2 := @this: com.hp.hpl.jena.sparql.algebra.AlgebraGenerator;

        r1 := @parameter0: java.lang.String;

        $r0 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>(r1);

        throw $r0;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.sparql.algebra.optimize.TransformSimplify $r0;

        <com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: boolean simplifyTooEarlyInAlgebraGeneration> = 0;

        <com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: boolean applySimplification> = 1;

        $r0 = new com.hp.hpl.jena.sparql.algebra.optimize.TransformSimplify;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.algebra.optimize.TransformSimplify: void <init>()>();

        <com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: com.hp.hpl.jena.sparql.algebra.Transform simplify> = $r0;

        return;
    }
}
