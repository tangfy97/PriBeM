public class org.apache.jena.iri.impl.Parser extends java.lang.Object implements org.apache.jena.iri.IRIComponents, org.apache.jena.iri.ViolationCodes
{
    static org.apache.jena.iri.impl.Lexer[][] lexers;
    static int nextLexer;
    static boolean DEBUG;
    static final int[] fields;
    static final int[] invFields;
    static final java.util.regex.Pattern p;
    final java.util.regex.Matcher m;
    final java.lang.String uri;
    int found;
    final long[] errors;
    org.apache.jena.iri.impl.IRIImpl iri;

    public void <init>(java.lang.String, org.apache.jena.iri.impl.IRIImpl)
    {
        java.lang.IndexOutOfBoundsException $r23;
        java.util.regex.Matcher $r6, $r7;
        byte $b4;
        int[] $r1, $r14, $r18;
        org.apache.jena.iri.impl.SchemeSpecificPart $r12, $r13, $r20, $r21, $r29, $r30, $r31;
        boolean $z0, $z1, $z2, $z3;
        org.apache.jena.iri.impl.Lexer $r28;
        java.lang.Exception $r27;
        org.apache.jena.iri.impl.IRIFactoryImpl $r9;
        org.apache.jena.iri.impl.Lexer[] $r8;
        java.util.regex.Pattern $r5;
        long $l2, $l3;
        long[] $r2, $r15;
        int $i0, $i1, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, $i15, $i16, i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i26;
        java.lang.String r3, $r10, $r11, $r16, $r17, $r19, $r26;
        org.apache.jena.iri.impl.IRIImpl r4;
        java.lang.RuntimeException $r32;
        org.apache.jena.iri.impl.Parser r0;
        java.lang.IllegalArgumentException $r24, $r25;

        r0 := @this: org.apache.jena.iri.impl.Parser;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: org.apache.jena.iri.impl.IRIImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <org.apache.jena.iri.impl.Parser: int[] fields>;

        $i0 = lengthof $r1;

        $r2 = newarray (long)[$i0];

        r0.<org.apache.jena.iri.impl.Parser: long[] errors> = $r2;

        r0.<org.apache.jena.iri.impl.Parser: java.lang.String uri> = r3;

        r0.<org.apache.jena.iri.impl.Parser: org.apache.jena.iri.impl.IRIImpl iri> = r4;

        $r5 = <org.apache.jena.iri.impl.Parser: java.util.regex.Pattern p>;

        $r6 = virtualinvoke $r5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r3);

        r0.<org.apache.jena.iri.impl.Parser: java.util.regex.Matcher m> = $r6;

        $r7 = r0.<org.apache.jena.iri.impl.Parser: java.util.regex.Matcher m>;

        $z0 = virtualinvoke $r7.<java.util.regex.Matcher: boolean matches()>();

        if $z0 != 0 goto label01;

        $r32 = new java.lang.RuntimeException;

        specialinvoke $r32.<java.lang.RuntimeException: void <init>(java.lang.String)>("not meant to happen");

        throw $r32;

     label01:
        $r8 = staticinvoke <org.apache.jena.iri.impl.Parser: org.apache.jena.iri.impl.Lexer[] nextLexer()>();

        $r9 = virtualinvoke r4.<org.apache.jena.iri.impl.IRIImpl: org.apache.jena.iri.impl.IRIFactoryImpl getFactory()>();

        $z1 = virtualinvoke r0.<org.apache.jena.iri.impl.Parser: boolean has(int)>(2);

        if $z1 != 0 goto label02;

        $r21 = virtualinvoke $r9.<org.apache.jena.iri.impl.IRIFactoryImpl: org.apache.jena.iri.impl.SchemeSpecificPart noScheme()>();

        r4.<org.apache.jena.iri.impl.IRIImpl: org.apache.jena.iri.impl.SchemeSpecificPart scheme> = $r21;

        goto label03;

     label02:
        $r10 = virtualinvoke r0.<org.apache.jena.iri.impl.Parser: java.lang.String get(int)>(2);

        $r11 = virtualinvoke $r10.<java.lang.String: java.lang.String toLowerCase()>();

        $r12 = virtualinvoke $r9.<org.apache.jena.iri.impl.IRIFactoryImpl: org.apache.jena.iri.impl.SchemeSpecificPart getScheme(java.lang.String,org.apache.jena.iri.impl.Parser)>($r11, r0);

        r4.<org.apache.jena.iri.impl.IRIImpl: org.apache.jena.iri.impl.SchemeSpecificPart scheme> = $r12;

     label03:
        i14 = 0;

     label04:
        $i15 = lengthof $r8;

        $i16 = $i15 - 1;

        if i14 >= $i16 goto label13;

        $r18 = <org.apache.jena.iri.impl.Parser: int[] fields>;

        i17 = $r18[i14];

        $z3 = virtualinvoke r0.<org.apache.jena.iri.impl.Parser: boolean has(int)>(i17);

        if $z3 == 0 goto label12;

        if i17 == 11 goto label05;

        if i17 != 7 goto label06;

     label05:
        $i7 = virtualinvoke r0.<org.apache.jena.iri.impl.Parser: int start(int)>(i17);

        $i8 = virtualinvoke r0.<org.apache.jena.iri.impl.Parser: int end(int)>(i17);

        if $i7 == $i8 goto label07;

     label06:
        $i12 = r0.<org.apache.jena.iri.impl.Parser: int found>;

        $i11 = 1 << i17;

        $i13 = $i12 | $i11;

        r0.<org.apache.jena.iri.impl.Parser: int found> = $i13;

     label07:
        $r28 = $r8[i14];

        interfaceinvoke $r28.<org.apache.jena.iri.impl.Lexer: void analyse(org.apache.jena.iri.impl.Parser,int)>(r0, i17);

        $r29 = r4.<org.apache.jena.iri.impl.IRIImpl: org.apache.jena.iri.impl.SchemeSpecificPart scheme>;

        virtualinvoke $r29.<org.apache.jena.iri.impl.SchemeSpecificPart: void analyse(org.apache.jena.iri.impl.Parser,int)>(r0, i17);

        if i17 != 10 goto label12;

     label08:
        $r19 = virtualinvoke r0.<org.apache.jena.iri.impl.Parser: java.lang.String get(int)>(10);

        $i9 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r19);

        $r20 = r4.<org.apache.jena.iri.impl.IRIImpl: org.apache.jena.iri.impl.SchemeSpecificPart scheme>;

        $i10 = virtualinvoke $r20.<org.apache.jena.iri.impl.SchemeSpecificPart: int port()>();

        if $i10 != $i9 goto label09;

        virtualinvoke r0.<org.apache.jena.iri.impl.Parser: void recordError(int,int)>(10, 13);

     label09:
        if $i9 >= 1024 goto label10;

        if $i9 < 0 goto label10;

        virtualinvoke r0.<org.apache.jena.iri.impl.Parser: void recordError(int,int)>(10, 14);

     label10:
        goto label12;

     label11:
        $r27 := @caughtexception;

     label12:
        i14 = i14 + 1;

        goto label04;

     label13:
        $z2 = virtualinvoke r0.<org.apache.jena.iri.impl.Parser: boolean has(int)>(4);

        if $z2 == 0 goto label14;

        $i5 = r0.<org.apache.jena.iri.impl.Parser: int found>;

        $i6 = $i5 | 16;

        r0.<org.apache.jena.iri.impl.Parser: int found> = $i6;

     label14:
        $r13 = r4.<org.apache.jena.iri.impl.IRIImpl: org.apache.jena.iri.impl.SchemeSpecificPart scheme>;

        virtualinvoke $r13.<org.apache.jena.iri.impl.SchemeSpecificPart: void analyse(org.apache.jena.iri.impl.Parser,int)>(r0, 31);

        $r15 = r0.<org.apache.jena.iri.impl.Parser: long[] errors>;

        $r14 = <org.apache.jena.iri.impl.Parser: int[] invFields>;

        $i1 = $r14[7];

        $l2 = $r15[$i1];

        $l3 = $l2 & 2152726528L;

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label23;

        $r16 = virtualinvoke r0.<org.apache.jena.iri.impl.Parser: java.lang.String get(int)>(7);

     label15:
        $r17 = staticinvoke <org.apache.jena.iri.impl.IDNP: java.lang.String toASCII(java.lang.String,int)>($r16, 2);

        staticinvoke <java.net.IDN: java.lang.String toUnicode(java.lang.String,int)>($r17, 3);

     label16:
        goto label21;

     label17:
        $r25 := @caughtexception;

     label18:
        $r26 = staticinvoke <org.apache.jena.iri.impl.IDNP: java.lang.String toASCII(java.lang.String,int)>($r16, 3);

        staticinvoke <java.net.IDN: java.lang.String toUnicode(java.lang.String,int)>($r26, 3);

        virtualinvoke r0.<org.apache.jena.iri.impl.Parser: void recordError(int,int,java.lang.Exception)>(7, 34, $r25);

     label19:
        goto label21;

     label20:
        $r24 := @caughtexception;

        virtualinvoke r0.<org.apache.jena.iri.impl.Parser: void recordError(int,int,java.lang.Exception)>(7, 35, $r25);

     label21:
        goto label23;

     label22:
        $r23 := @caughtexception;

        virtualinvoke r0.<org.apache.jena.iri.impl.Parser: void recordError(int,int,java.lang.Exception)>(7, 35, $r23);

     label23:
        $i18 = r0.<org.apache.jena.iri.impl.Parser: int found>;

        $i26 = (int) -1;

        $i19 = $i18 ^ $i26;

        $r30 = r4.<org.apache.jena.iri.impl.IRIImpl: org.apache.jena.iri.impl.SchemeSpecificPart scheme>;

        $i20 = virtualinvoke $r30.<org.apache.jena.iri.impl.SchemeSpecificPart: int getRequired()>();

        $i21 = $i19 & $i20;

        specialinvoke r0.<org.apache.jena.iri.impl.Parser: void hasComponents(int,int)>($i21, 57);

        $i22 = r0.<org.apache.jena.iri.impl.Parser: int found>;

        $r31 = r4.<org.apache.jena.iri.impl.IRIImpl: org.apache.jena.iri.impl.SchemeSpecificPart scheme>;

        $i23 = virtualinvoke $r31.<org.apache.jena.iri.impl.SchemeSpecificPart: int getProhibited()>();

        $i24 = $i22 & $i23;

        specialinvoke r0.<org.apache.jena.iri.impl.Parser: void hasComponents(int,int)>($i24, 58);

        return;

        catch java.lang.Exception from label08 to label10 with label11;
        catch java.lang.IllegalArgumentException from label15 to label16 with label17;
        catch java.lang.IllegalArgumentException from label18 to label19 with label20;
        catch java.lang.IndexOutOfBoundsException from label15 to label21 with label22;
    }

    private static org.apache.jena.iri.impl.Lexer[] nextLexer()
    {
        org.apache.jena.iri.impl.Lexer[][] $r0, $r2;
        org.apache.jena.iri.impl.Lexer[] r1;
        int $i0, $i1, $i2, $i3, $i4;

        $r0 = <org.apache.jena.iri.impl.Parser: org.apache.jena.iri.impl.Lexer[][] lexers>;

        $i0 = <org.apache.jena.iri.impl.Parser: int nextLexer>;

        r1 = $r0[$i0];

        $i1 = <org.apache.jena.iri.impl.Parser: int nextLexer>;

        $i3 = $i1 + 1;

        $r2 = <org.apache.jena.iri.impl.Parser: org.apache.jena.iri.impl.Lexer[][] lexers>;

        $i2 = lengthof $r2;

        $i4 = $i3 % $i2;

        <org.apache.jena.iri.impl.Parser: int nextLexer> = $i4;

        return r1;
    }

    static org.apache.jena.iri.impl.LexerHost hostLexer()
    {
        org.apache.jena.iri.impl.Lexer $r1;
        org.apache.jena.iri.impl.Lexer[] $r0;
        org.apache.jena.iri.impl.LexerHost $r2;

        $r0 = staticinvoke <org.apache.jena.iri.impl.Parser: org.apache.jena.iri.impl.Lexer[] nextLexer()>();

        $r1 = $r0[2];

        $r2 = (org.apache.jena.iri.impl.LexerHost) $r1;

        return $r2;
    }

    private void hasComponents(int, int)
    {
        int $i0, i1, i2, i3;
        org.apache.jena.iri.impl.Parser r0;

        r0 := @this: org.apache.jena.iri.impl.Parser;

        i2 := @parameter0: int;

        i1 := @parameter1: int;

        if i2 != 0 goto label1;

        return;

     label1:
        i3 = 0;

     label2:
        if i2 == 0 goto label4;

        $i0 = i2 & 1;

        if $i0 != 1 goto label3;

        virtualinvoke r0.<org.apache.jena.iri.impl.Parser: void recordError(int,int)>(i3, i1);

     label3:
        i3 = i3 + 1;

        i2 = i2 >> 1;

        goto label2;

     label4:
        return;
    }

    public boolean has(int)
    {
        java.util.regex.Matcher $r1;
        int i0, $i1, $i3;
        org.apache.jena.iri.impl.Parser r0;
        boolean $z0;

        r0 := @this: org.apache.jena.iri.impl.Parser;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.jena.iri.impl.Parser: java.util.regex.Matcher m>;

        $i1 = virtualinvoke $r1.<java.util.regex.Matcher: int start(int)>(i0);

        $i3 = (int) -1;

        if $i1 == $i3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int start(int)
    {
        java.util.regex.Matcher $r1;
        int i0, $i1, $i2;
        org.apache.jena.iri.impl.Parser r0;

        r0 := @this: org.apache.jena.iri.impl.Parser;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.jena.iri.impl.Parser: java.util.regex.Matcher m>;

        if i0 != 31 goto label1;

        $i2 = 11;

        goto label2;

     label1:
        $i2 = i0;

     label2:
        $i1 = virtualinvoke $r1.<java.util.regex.Matcher: int start(int)>($i2);

        return $i1;
    }

    public int end(int)
    {
        java.util.regex.Matcher $r1;
        int i0, $i1, $i2;
        org.apache.jena.iri.impl.Parser r0;
        boolean $z0;

        r0 := @this: org.apache.jena.iri.impl.Parser;

        i0 := @parameter0: int;

        if i0 == 31 goto label1;

        $r1 = r0.<org.apache.jena.iri.impl.Parser: java.util.regex.Matcher m>;

        $i1 = virtualinvoke $r1.<java.util.regex.Matcher: int end(int)>(i0);

        return $i1;

     label1:
        $z0 = virtualinvoke r0.<org.apache.jena.iri.impl.Parser: boolean has(int)>(13);

        if $z0 == 0 goto label2;

        $i2 = virtualinvoke r0.<org.apache.jena.iri.impl.Parser: int end(int)>(13);

        goto label3;

     label2:
        $i2 = virtualinvoke r0.<org.apache.jena.iri.impl.Parser: int end(int)>(11);

     label3:
        return $i2;
    }

    public java.lang.String get(int)
    {
        org.apache.jena.iri.impl.Parser r0;
        java.util.regex.Matcher $r3;
        int i0, $i1, $i2;
        java.lang.String $r1, $r2, $r4;

        r0 := @this: org.apache.jena.iri.impl.Parser;

        i0 := @parameter0: int;

        if i0 == 31 goto label1;

        $r3 = r0.<org.apache.jena.iri.impl.Parser: java.util.regex.Matcher m>;

        $r4 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(i0);

        return $r4;

     label1:
        $r1 = r0.<org.apache.jena.iri.impl.Parser: java.lang.String uri>;

        $i1 = virtualinvoke r0.<org.apache.jena.iri.impl.Parser: int start(int)>(11);

        $i2 = virtualinvoke r0.<org.apache.jena.iri.impl.Parser: int end(int)>(31);

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>($i1, $i2);

        return $r2;
    }

    private static void show(org.apache.jena.iri.IRI)
    {
        org.apache.jena.iri.impl.AbsIRIImpl $r48, $r50, $r52;
        org.apache.jena.iri.IRI r3;
        java.lang.StringBuilder $r0, $r2, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25, $r27, $r28, $r30, $r32, $r34, $r36, $r38, $r40, $r42, $r44, $r46, $r54, $r56, $r60, $r62, $r64, $r68;
        org.apache.jena.iri.Violation $r58, $r66, $r72;
        java.lang.String $r4, $r6, $r10, $r12, $r16, $r18, $r22, $r24, $r29, $r33, $r35, $r39, $r41, $r45, $r47, $r59, $r61, $r67, $r69, $r73;
        boolean $z0, $z1, $z2;
        int $i0;
        java.io.PrintStream $r1, $r8, $r14, $r20, $r26, $r31, $r37, $r43, $r55, $r63, $r70;
        java.util.Iterator $r49, $r51, $r53;
        java.lang.Object $r57, $r65, $r71;

        r3 := @parameter0: org.apache.jena.iri.IRI;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Scheme: ");

        $r4 = virtualinvoke r3.<org.apache.jena.iri.IRI: java.lang.String getScheme()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r6);

        $r8 = <java.lang.System: java.io.PrintStream out>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Authority: ");

        $r10 = virtualinvoke r3.<org.apache.jena.iri.IRI: java.lang.String getRawAuthority()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r12);

        $r14 = <java.lang.System: java.io.PrintStream out>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User: ");

        $r16 = virtualinvoke r3.<org.apache.jena.iri.IRI: java.lang.String getRawUserinfo()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>($r18);

        $r20 = <java.lang.System: java.io.PrintStream out>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Host: ");

        $r22 = virtualinvoke r3.<org.apache.jena.iri.IRI: java.lang.String getRawHost()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r20.<java.io.PrintStream: void println(java.lang.String)>($r24);

        $r26 = <java.lang.System: java.io.PrintStream out>;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Port: ");

        $i0 = virtualinvoke r3.<org.apache.jena.iri.IRI: int getPort()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r26.<java.io.PrintStream: void println(java.lang.String)>($r29);

        $r31 = <java.lang.System: java.io.PrintStream out>;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Path: ");

        $r33 = virtualinvoke r3.<org.apache.jena.iri.IRI: java.lang.String getRawPath()>();

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r31.<java.io.PrintStream: void println(java.lang.String)>($r35);

        $r37 = <java.lang.System: java.io.PrintStream out>;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Query: ");

        $r39 = virtualinvoke r3.<org.apache.jena.iri.IRI: java.lang.String getRawQuery()>();

        $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r37.<java.io.PrintStream: void println(java.lang.String)>($r41);

        $r43 = <java.lang.System: java.io.PrintStream out>;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Fragment: ");

        $r45 = virtualinvoke r3.<org.apache.jena.iri.IRI: java.lang.String getRawFragment()>();

        $r46 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r43.<java.io.PrintStream: void println(java.lang.String)>($r47);

        $r48 = (org.apache.jena.iri.impl.AbsIRIImpl) r3;

        $r49 = virtualinvoke $r48.<org.apache.jena.iri.impl.AbsIRIImpl: java.util.Iterator allViolations()>();

     label1:
        $z0 = interfaceinvoke $r49.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r70 = <java.lang.System: java.io.PrintStream out>;

        $r71 = interfaceinvoke $r49.<java.util.Iterator: java.lang.Object next()>();

        $r72 = (org.apache.jena.iri.Violation) $r71;

        $r73 = virtualinvoke $r72.<org.apache.jena.iri.Violation: java.lang.String getLongMessage()>();

        virtualinvoke $r70.<java.io.PrintStream: void println(java.lang.String)>($r73);

        goto label1;

     label2:
        $r50 = (org.apache.jena.iri.impl.AbsIRIImpl) r3;

        $r51 = virtualinvoke $r50.<org.apache.jena.iri.impl.AbsIRIImpl: java.util.Iterator violations(boolean)>(1);

     label3:
        $z1 = interfaceinvoke $r51.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r63 = <java.lang.System: java.io.PrintStream out>;

        $r62 = new java.lang.StringBuilder;

        specialinvoke $r62.<java.lang.StringBuilder: void <init>()>();

        $r64 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("+");

        $r65 = interfaceinvoke $r51.<java.util.Iterator: java.lang.Object next()>();

        $r66 = (org.apache.jena.iri.Violation) $r65;

        $r67 = virtualinvoke $r66.<org.apache.jena.iri.Violation: java.lang.String getLongMessage()>();

        $r68 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r67);

        $r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r63.<java.io.PrintStream: void println(java.lang.String)>($r69);

        goto label3;

     label4:
        $r52 = (org.apache.jena.iri.impl.AbsIRIImpl) r3;

        $r53 = virtualinvoke $r52.<org.apache.jena.iri.impl.AbsIRIImpl: java.util.Iterator violations(boolean)>(0);

     label5:
        $z2 = interfaceinvoke $r53.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r55 = <java.lang.System: java.io.PrintStream out>;

        $r54 = new java.lang.StringBuilder;

        specialinvoke $r54.<java.lang.StringBuilder: void <init>()>();

        $r56 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("++");

        $r57 = interfaceinvoke $r53.<java.util.Iterator: java.lang.Object next()>();

        $r58 = (org.apache.jena.iri.Violation) $r57;

        $r59 = virtualinvoke $r58.<org.apache.jena.iri.Violation: java.lang.String getLongMessage()>();

        $r60 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r59);

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r55.<java.io.PrintStream: void println(java.lang.String)>($r61);

        goto label5;

     label6:
        return;
    }

    public static void main(java.lang.String[]) throws java.io.IOException
    {
        org.apache.jena.iri.IRIFactory $r3;
        java.lang.String[] r15;
        java.lang.String $r4, $r5, $r12, $r14;
        org.apache.jena.iri.IRI $r6, $r8;
        boolean $z0;
        java.io.PrintStream $r10;
        org.apache.jena.iri.impl.IRIImpl r7, r16;
        java.io.LineNumberReader $r0;
        java.io.InputStreamReader $r1;
        java.lang.StringBuilder $r9, $r11, $r13;
        java.io.InputStream $r2;

        r15 := @parameter0: java.lang.String[];

        $r0 = new java.io.LineNumberReader;

        $r1 = new java.io.InputStreamReader;

        $r2 = <java.lang.System: java.io.InputStream in>;

        specialinvoke $r1.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r2);

        specialinvoke $r0.<java.io.LineNumberReader: void <init>(java.io.Reader)>($r1);

        r16 = null;

        <org.apache.jena.iri.impl.Parser: boolean DEBUG> = 1;

        $r3 = staticinvoke <org.apache.jena.iri.IRIFactory: org.apache.jena.iri.IRIFactory iriImplementation()>();

     label1:
        $r4 = virtualinvoke $r0.<java.io.LineNumberReader: java.lang.String readLine()>();

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("quit");

        if $z0 == 0 goto label2;

        return;

     label2:
        $r6 = virtualinvoke $r3.<org.apache.jena.iri.IRIFactory: org.apache.jena.iri.IRI create(java.lang.String)>($r5);

        r7 = (org.apache.jena.iri.impl.IRIImpl) $r6;

        staticinvoke <org.apache.jena.iri.impl.Parser: void show(org.apache.jena.iri.IRI)>(r7);

        if r16 == null goto label3;

        $r8 = virtualinvoke r16.<org.apache.jena.iri.impl.IRIImpl: org.apache.jena.iri.IRI create(org.apache.jena.iri.IRI)>(r7);

        $r10 = <java.lang.System: java.io.PrintStream out>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resolved: ");

        $r12 = virtualinvoke $r8.<org.apache.jena.iri.IRI: java.lang.String toString()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r14);

        staticinvoke <org.apache.jena.iri.impl.Parser: void show(org.apache.jena.iri.IRI)>($r8);

     label3:
        r16 = r7;

        goto label1;
    }

    public void recordError(int, int)
    {
        org.apache.jena.iri.impl.IRIImpl $r3;
        long $l3, $l4, $l5, $l6, $l7, $l8;
        org.apache.jena.iri.impl.Parser r0;
        long[] $r2;
        int[] $r1;
        int i0, $i1, i2;

        r0 := @this: org.apache.jena.iri.impl.Parser;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        $r2 = r0.<org.apache.jena.iri.impl.Parser: long[] errors>;

        $r1 = <org.apache.jena.iri.impl.Parser: int[] invFields>;

        $i1 = $r1[i0];

        $l4 = $r2[$i1];

        $l3 = 1L << i2;

        $l5 = $l4 | $l3;

        $r2[$i1] = $l5;

        $r3 = r0.<org.apache.jena.iri.impl.Parser: org.apache.jena.iri.impl.IRIImpl iri>;

        $l7 = $r3.<org.apache.jena.iri.impl.IRIImpl: long allErrors>;

        $l6 = 1L << i2;

        $l8 = $l7 | $l6;

        $r3.<org.apache.jena.iri.impl.IRIImpl: long allErrors> = $l8;

        return;
    }

    public void recordError(int, int, java.lang.Exception)
    {
        org.apache.jena.iri.impl.IRIImpl $r3, $r5;
        long $l3, $l4, $l5, $l6, $l7, $l8;
        org.apache.jena.iri.impl.Parser r0;
        java.lang.Exception r4;
        long[] $r2;
        int[] $r1;
        int i0, $i1, i2;

        r0 := @this: org.apache.jena.iri.impl.Parser;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        r4 := @parameter2: java.lang.Exception;

        $r2 = r0.<org.apache.jena.iri.impl.Parser: long[] errors>;

        $r1 = <org.apache.jena.iri.impl.Parser: int[] invFields>;

        $i1 = $r1[i0];

        $l4 = $r2[$i1];

        $l3 = 1L << i2;

        $l5 = $l4 | $l3;

        $r2[$i1] = $l5;

        $r3 = r0.<org.apache.jena.iri.impl.Parser: org.apache.jena.iri.impl.IRIImpl iri>;

        $l7 = $r3.<org.apache.jena.iri.impl.IRIImpl: long allErrors>;

        $l6 = 1L << i2;

        $l8 = $l7 | $l6;

        $r3.<org.apache.jena.iri.impl.IRIImpl: long allErrors> = $l8;

        $r5 = r0.<org.apache.jena.iri.impl.Parser: org.apache.jena.iri.impl.IRIImpl iri>;

        $r5.<org.apache.jena.iri.impl.IRIImpl: java.lang.Exception idnaException> = r4;

        return;
    }

    long errors(int)
    {
        long[] $r2;
        int[] $r1;
        int i0, $i1;
        long $l2;
        org.apache.jena.iri.impl.Parser r0;

        r0 := @this: org.apache.jena.iri.impl.Parser;

        i0 := @parameter0: int;

        $r2 = r0.<org.apache.jena.iri.impl.Parser: long[] errors>;

        $r1 = <org.apache.jena.iri.impl.Parser: int[] invFields>;

        $i1 = $r1[i0];

        $l2 = $r2[$i1];

        return $l2;
    }

    public void matchedRule(int, int)
    {
        java.io.PrintStream $r1;
        org.apache.jena.iri.impl.Parser r7;
        int i0, i1;
        java.lang.StringBuilder $r0, $r2, $r3, $r4, $r5;
        java.lang.String $r6;
        boolean $z0;

        r7 := @this: org.apache.jena.iri.impl.Parser;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        $z0 = <org.apache.jena.iri.impl.Parser: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Rule ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in range ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r6);

     label1:
        return;
    }

    public void matchedRule(int, int, java.lang.String)
    {
        java.io.PrintStream $r1;
        org.apache.jena.iri.impl.Parser r11;
        int i0, i1;
        java.lang.StringBuilder $r0, $r2, $r3, $r4, $r5, $r6, $r8, $r9;
        java.lang.String r7, $r10;
        boolean $z0;

        r11 := @this: org.apache.jena.iri.impl.Parser;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        r7 := @parameter2: java.lang.String;

        $z0 = <org.apache.jena.iri.impl.Parser: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Rule ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in range ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" yytext: \'");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r10);

     label1:
        return;
    }

    static void <clinit>()
    {
        org.apache.jena.iri.impl.LexerPath $r24;
        org.apache.jena.iri.impl.LexerHost $r22;
        int[] $r2, $r3, $r4, $r5, $r7, $r8, $r9;
        org.apache.jena.iri.impl.Lexer[][] $r0, $r1, $r12;
        int $i0, $i1, $i2, $i3, i4, i5, i6, $i8;
        org.apache.jena.iri.impl.LexerUserinfo $r21;
        org.apache.jena.iri.impl.LexerPort $r23;
        org.apache.jena.iri.impl.LexerFragment $r26;
        org.apache.jena.iri.impl.LexerXHost $r27;
        org.apache.jena.iri.impl.Lexer[] $r10;
        org.apache.jena.iri.impl.LexerScheme $r20;
        java.util.regex.Pattern $r6;
        org.apache.jena.iri.impl.LexerQuery $r25;

        $r0 = newarray (org.apache.jena.iri.impl.Lexer[])[8];

        <org.apache.jena.iri.impl.Parser: org.apache.jena.iri.impl.Lexer[][] lexers> = $r0;

        i4 = 0;

     label1:
        $r1 = <org.apache.jena.iri.impl.Parser: org.apache.jena.iri.impl.Lexer[][] lexers>;

        $i0 = lengthof $r1;

        if i4 >= $i0 goto label2;

        $r12 = <org.apache.jena.iri.impl.Parser: org.apache.jena.iri.impl.Lexer[][] lexers>;

        $r10 = newarray (org.apache.jena.iri.impl.Lexer)[8];

        $r20 = new org.apache.jena.iri.impl.LexerScheme;

        specialinvoke $r20.<org.apache.jena.iri.impl.LexerScheme: void <init>(java.io.Reader)>(null);

        $r10[0] = $r20;

        $r21 = new org.apache.jena.iri.impl.LexerUserinfo;

        specialinvoke $r21.<org.apache.jena.iri.impl.LexerUserinfo: void <init>(java.io.Reader)>(null);

        $r10[1] = $r21;

        $r22 = new org.apache.jena.iri.impl.LexerHost;

        specialinvoke $r22.<org.apache.jena.iri.impl.LexerHost: void <init>(java.io.Reader)>(null);

        $r10[2] = $r22;

        $r23 = new org.apache.jena.iri.impl.LexerPort;

        specialinvoke $r23.<org.apache.jena.iri.impl.LexerPort: void <init>(java.io.Reader)>(null);

        $r10[3] = $r23;

        $r24 = new org.apache.jena.iri.impl.LexerPath;

        specialinvoke $r24.<org.apache.jena.iri.impl.LexerPath: void <init>(java.io.Reader)>(null);

        $r10[4] = $r24;

        $r25 = new org.apache.jena.iri.impl.LexerQuery;

        specialinvoke $r25.<org.apache.jena.iri.impl.LexerQuery: void <init>(java.io.Reader)>(null);

        $r10[5] = $r25;

        $r26 = new org.apache.jena.iri.impl.LexerFragment;

        specialinvoke $r26.<org.apache.jena.iri.impl.LexerFragment: void <init>(java.io.Reader)>(null);

        $r10[6] = $r26;

        $r27 = new org.apache.jena.iri.impl.LexerXHost;

        specialinvoke $r27.<org.apache.jena.iri.impl.LexerXHost: void <init>(java.io.Reader)>(null);

        $r10[7] = $r27;

        $r12[i4] = $r10;

        i4 = i4 + 1;

        goto label1;

     label2:
        <org.apache.jena.iri.impl.Parser: int nextLexer> = 0;

        <org.apache.jena.iri.impl.Parser: boolean DEBUG> = 0;

        $r2 = newarray (int)[9];

        $r2[0] = 2;

        $r2[1] = 6;

        $r2[2] = 7;

        $r2[3] = 10;

        $r2[4] = 11;

        $r2[5] = 13;

        $r2[6] = 15;

        $r2[7] = 4;

        $r2[8] = 31;

        <org.apache.jena.iri.impl.Parser: int[] fields> = $r2;

        $r3 = newarray (int)[32];

        <org.apache.jena.iri.impl.Parser: int[] invFields> = $r3;

        i5 = 0;

     label3:
        $r4 = <org.apache.jena.iri.impl.Parser: int[] invFields>;

        $i1 = lengthof $r4;

        if i5 >= $i1 goto label4;

        $r9 = <org.apache.jena.iri.impl.Parser: int[] invFields>;

        $i8 = (int) -1;

        $r9[i5] = $i8;

        i5 = i5 + 1;

        goto label3;

     label4:
        i6 = 0;

     label5:
        $r5 = <org.apache.jena.iri.impl.Parser: int[] fields>;

        $i2 = lengthof $r5;

        if i6 >= $i2 goto label6;

        $r8 = <org.apache.jena.iri.impl.Parser: int[] invFields>;

        $r7 = <org.apache.jena.iri.impl.Parser: int[] fields>;

        $i3 = $r7[i6];

        $r8[$i3] = i6;

        i6 = i6 + 1;

        goto label5;

     label6:
        $r6 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>("(([^:/?#]*):)?(//((([^/?#@]*)@)?(\\[[^/?#]*\\]|([^/?#:]*))?(:([^/?#]*))?))?([^#?]*)?(\\?([^#]*))?(#(.*))?", 32);

        <org.apache.jena.iri.impl.Parser: java.util.regex.Pattern p> = $r6;

        return;
    }
}
