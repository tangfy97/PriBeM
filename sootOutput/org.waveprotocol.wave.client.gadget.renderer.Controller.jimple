public class org.waveprotocol.wave.client.gadget.renderer.Controller extends java.lang.Object
{
    private static final boolean TO_LOG;
    private final org.waveprotocol.wave.model.util.StringMap callbackMap;
    private final org.waveprotocol.wave.model.util.StringMap serviceMap;
    private com.google.gwt.core.client.JavaScriptObject hub;
    protected static org.waveprotocol.wave.client.gadget.renderer.Controller instance;

    private void <init>()
    {
        com.google.gwt.core.client.JavaScriptObject $r1;
        org.waveprotocol.wave.client.gadget.renderer.Controller r0;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.Controller;

        $r1 = staticinvoke <org.waveprotocol.wave.client.gadget.renderer.Controller: com.google.gwt.core.client.JavaScriptObject getStandardGadgetRpcLibrary()>();

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.Controller: void <init>(com.google.gwt.core.client.JavaScriptObject)>($r1);

        return;
    }

    protected void <init>(com.google.gwt.core.client.JavaScriptObject)
    {
        org.waveprotocol.wave.client.gadget.renderer.Controller$Service r5;
        com.google.gwt.core.client.JavaScriptObject r3;
        org.waveprotocol.wave.client.gadget.renderer.Controller r0;
        org.waveprotocol.wave.model.util.StringMap $r1, $r2, $r7;
        int i0, i1;
        java.lang.String $r6, $r8;
        org.waveprotocol.wave.client.gadget.renderer.Controller$Service[] $r4;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.Controller;

        r3 := @parameter0: com.google.gwt.core.client.JavaScriptObject;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        r0.<org.waveprotocol.wave.client.gadget.renderer.Controller: org.waveprotocol.wave.model.util.StringMap callbackMap> = $r1;

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        r0.<org.waveprotocol.wave.client.gadget.renderer.Controller: org.waveprotocol.wave.model.util.StringMap serviceMap> = $r2;

        virtualinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.Controller: void setGadgetRpcLibrary(com.google.gwt.core.client.JavaScriptObject)>(r3);

        $r4 = staticinvoke <org.waveprotocol.wave.client.gadget.renderer.Controller$Service: org.waveprotocol.wave.client.gadget.renderer.Controller$Service[] values()>();

        i0 = lengthof $r4;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r5 = $r4[i1];

        $r6 = virtualinvoke r5.<org.waveprotocol.wave.client.gadget.renderer.Controller$Service: java.lang.String getName()>();

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.Controller: void registerService(java.lang.String)>($r6);

        $r7 = r0.<org.waveprotocol.wave.client.gadget.renderer.Controller: org.waveprotocol.wave.model.util.StringMap serviceMap>;

        $r8 = virtualinvoke r5.<org.waveprotocol.wave.client.gadget.renderer.Controller$Service: java.lang.String getName()>();

        interfaceinvoke $r7.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>($r8, r5);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static org.waveprotocol.wave.client.gadget.renderer.Controller getInstance()
    {
        org.waveprotocol.wave.client.gadget.renderer.Controller $r0, $r1, $r2;

        $r0 = <org.waveprotocol.wave.client.gadget.renderer.Controller: org.waveprotocol.wave.client.gadget.renderer.Controller instance>;

        if $r0 != null goto label1;

        $r2 = new org.waveprotocol.wave.client.gadget.renderer.Controller;

        specialinvoke $r2.<org.waveprotocol.wave.client.gadget.renderer.Controller: void <init>()>();

        <org.waveprotocol.wave.client.gadget.renderer.Controller: org.waveprotocol.wave.client.gadget.renderer.Controller instance> = $r2;

     label1:
        $r1 = <org.waveprotocol.wave.client.gadget.renderer.Controller: org.waveprotocol.wave.client.gadget.renderer.Controller instance>;

        return $r1;
    }

    private void callback(java.lang.String, java.lang.String, org.waveprotocol.wave.client.gadget.renderer.Controller$JavaScriptFunction, org.waveprotocol.wave.client.gadget.renderer.Controller$JsArrayMixed)
    {
        org.waveprotocol.wave.client.gadget.renderer.Controller$Service $r7;
        org.waveprotocol.wave.model.util.StringMap $r3, $r4, $r6, $r27;
        org.waveprotocol.wave.client.gadget.renderer.GadgetRpcListener $r11;
        boolean $z0, $z1, $z2;
        org.waveprotocol.wave.client.gadget.renderer.Controller$JsArrayMixed r10;
        org.waveprotocol.wave.client.gadget.renderer.Controller$JavaScriptFunction r9;
        java.lang.StringBuilder $r12, $r13, $r14, $r15, $r16, $r19, $r20, $r21, $r22, $r24, $r25;
        org.waveprotocol.wave.client.gadget.renderer.Controller r0;
        int $i0, $i1, i2;
        java.lang.String r1, r2, $r17, $r18, $r23, $r26;
        java.lang.Object $r5, $r8;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.Controller;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r9 := @parameter2: org.waveprotocol.wave.client.gadget.renderer.Controller$JavaScriptFunction;

        r10 := @parameter3: org.waveprotocol.wave.client.gadget.renderer.Controller$JsArrayMixed;

        $z0 = <org.waveprotocol.wave.client.gadget.renderer.Controller: boolean TO_LOG>;

        if $z0 == 0 goto label3;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        if r10 == null goto label2;

        i2 = 0;

     label1:
        $i0 = virtualinvoke r10.<org.waveprotocol.wave.client.gadget.renderer.Controller$JsArrayMixed: int length()>();

        if i2 >= $i0 goto label2;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" arg");

        $i1 = i2 + 1;

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":\'");

        $r23 = virtualinvoke r10.<org.waveprotocol.wave.client.gadget.renderer.Controller$JsArrayMixed: java.lang.String getString(int)>(i2);

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r18 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.client.gadget.GadgetLog: void log(java.lang.String)>($r18);

     label3:
        $r27 = r0.<org.waveprotocol.wave.client.gadget.renderer.Controller: org.waveprotocol.wave.model.util.StringMap callbackMap>;

        $z2 = interfaceinvoke $r27.<org.waveprotocol.wave.model.util.StringMap: boolean containsKey(java.lang.String)>(r1);

        if $z2 == 0 goto label4;

        $r3 = r0.<org.waveprotocol.wave.client.gadget.renderer.Controller: org.waveprotocol.wave.model.util.StringMap serviceMap>;

        $z1 = interfaceinvoke $r3.<org.waveprotocol.wave.model.util.StringMap: boolean containsKey(java.lang.String)>(r2);

        if $z1 == 0 goto label4;

        $r4 = r0.<org.waveprotocol.wave.client.gadget.renderer.Controller: org.waveprotocol.wave.model.util.StringMap serviceMap>;

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>(r2);

        $r7 = (org.waveprotocol.wave.client.gadget.renderer.Controller$Service) $r5;

        $r6 = r0.<org.waveprotocol.wave.client.gadget.renderer.Controller: org.waveprotocol.wave.model.util.StringMap callbackMap>;

        $r8 = interfaceinvoke $r6.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>(r1);

        $r11 = (org.waveprotocol.wave.client.gadget.renderer.GadgetRpcListener) $r8;

        virtualinvoke $r7.<org.waveprotocol.wave.client.gadget.renderer.Controller$Service: void callService(org.waveprotocol.wave.client.gadget.renderer.GadgetRpcListener,org.waveprotocol.wave.client.gadget.renderer.Controller$JavaScriptFunction,org.waveprotocol.wave.client.gadget.renderer.Controller$JsArrayMixed)>($r11, r9, r10);

     label4:
        return;
    }

    private static native com.google.gwt.core.client.JavaScriptObject getStandardGadgetRpcLibrary();

    protected void setGadgetRpcLibrary(com.google.gwt.core.client.JavaScriptObject)
    {
        com.google.gwt.core.client.JavaScriptObject r1;
        org.waveprotocol.wave.client.gadget.renderer.Controller r0;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.Controller;

        r1 := @parameter0: com.google.gwt.core.client.JavaScriptObject;

        r0.<org.waveprotocol.wave.client.gadget.renderer.Controller: com.google.gwt.core.client.JavaScriptObject hub> = r1;

        return;
    }

    private native void registerService(java.lang.String);

    public native void call(java.lang.String, java.lang.String, org.waveprotocol.wave.client.gadget.renderer.Controller$JsArrayMixed);

    public native void setRelayUrl(java.lang.String, java.lang.String);

    public native void setRpcToken(java.lang.String, java.lang.String);

    public void registerGadgetListener(java.lang.String, org.waveprotocol.wave.client.gadget.renderer.GadgetRpcListener)
    {
        org.waveprotocol.wave.client.gadget.renderer.Controller r0;
        java.lang.String r1;
        org.waveprotocol.wave.model.util.StringMap $r3;
        org.waveprotocol.wave.client.gadget.renderer.GadgetRpcListener r2;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.Controller;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.waveprotocol.wave.client.gadget.renderer.GadgetRpcListener;

        $r3 = r0.<org.waveprotocol.wave.client.gadget.renderer.Controller: org.waveprotocol.wave.model.util.StringMap callbackMap>;

        interfaceinvoke $r3.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>(r1, r2);

        return;
    }

    public static native void initializeContainerConfiguration();

    static boolean access$200()
    {
        boolean $z0;

        $z0 = <org.waveprotocol.wave.client.gadget.renderer.Controller: boolean TO_LOG>;

        return $z0;
    }

    static void <clinit>()
    {
        boolean $z0;

        $z0 = staticinvoke <org.waveprotocol.wave.client.debug.logger.LogLevel: boolean showDebug()>();

        <org.waveprotocol.wave.client.gadget.renderer.Controller: boolean TO_LOG> = $z0;

        return;
    }
}
