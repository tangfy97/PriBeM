public class org.apache.solr.common.util.StrUtils extends java.lang.Object
{
    public static final char[] HEX_DIGITS;

    public void <init>()
    {
        org.apache.solr.common.util.StrUtils r0;

        r0 := @this: org.apache.solr.common.util.StrUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.List splitSmart(java.lang.String, char)
    {
        java.util.ArrayList $r4;
        int $i0, $i2, $i5, i6, i7, i8, $i10, $i11, $i12, $i13, $i14, $i15;
        java.lang.String r1, $r2, $r3;
        boolean $z0;
        char c1, $c3, c4, c9;

        r1 := @parameter0: java.lang.String;

        c4 := @parameter1: char;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>(4);

        i6 = 0;

        i7 = 0;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        i8 = 0;

        c9 = 0;

     label1:
        if i6 >= $i0 goto label7;

        c1 = c9;

        $i2 = i6;

        i6 = i6 + 1;

        $c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i2);

        c9 = $c3;

        $i10 = (int) $c3;

        if $i10 != 92 goto label2;

        i6 = i6 + 1;

        goto label6;

     label2:
        if i8 == 0 goto label3;

        $i11 = (int) $c3;

        if $i11 != i8 goto label3;

        i8 = 0;

        goto label6;

     label3:
        $i12 = (int) $c3;

        if $i12 == 39 goto label4;

        $i13 = (int) $c3;

        if $i13 != 34 goto label5;

     label4:
        $z0 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>(c1);

        if $z0 != 0 goto label6;

        i8 = $c3;

        goto label6;

     label5:
        $i14 = (int) $c3;

        $i15 = (int) c4;

        if $i14 != $i15 goto label6;

        if i8 != 0 goto label6;

        $i5 = i6 - 1;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i7, $i5);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        i7 = i6;

     label6:
        goto label1;

     label7:
        if i7 >= $i0 goto label8;

        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i7, $i0);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

     label8:
        return $r4;
    }

    public static java.util.List splitSmart(java.lang.String, java.lang.String, boolean)
    {
        java.util.ArrayList $r8;
        int $i0, $i1, $i2, $i4, $i6, $i7, i8, $i10, $i11;
        java.lang.String r2, $r3, r4, $r5;
        boolean $z0, z1;
        char $c3, $c5, c9;
        java.lang.StringBuilder r7, $r9, $r10;

        r2 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        z1 := @parameter2: boolean;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>(2);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        r7 = $r9;

        i8 = 0;

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

     label01:
        if i8 >= $i0 goto label12;

        $z0 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String,int)>(r4, i8);

        if $z0 == 0 goto label03;

        $i6 = virtualinvoke r7.<java.lang.StringBuilder: int length()>();

        if $i6 <= 0 goto label02;

        $r5 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        r7 = $r10;

     label02:
        $i7 = virtualinvoke r4.<java.lang.String: int length()>();

        i8 = i8 + $i7;

        goto label01;

     label03:
        $i2 = i8;

        i8 = i8 + 1;

        $c3 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i2);

        c9 = $c3;

        $i10 = (int) $c3;

        if $i10 != 92 goto label11;

        if z1 != 0 goto label04;

        virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

     label04:
        if i8 < $i0 goto label05;

        goto label12;

     label05:
        $i4 = i8;

        i8 = i8 + 1;

        $c5 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i4);

        c9 = $c5;

        if z1 == 0 goto label11;

        $i11 = (int) $c5;

        lookupswitch($i11)
        {
            case 98: goto label09;
            case 102: goto label10;
            case 110: goto label06;
            case 114: goto label08;
            case 116: goto label07;
            default: goto label11;
        };

     label06:
        c9 = 10;

        goto label11;

     label07:
        c9 = 9;

        goto label11;

     label08:
        c9 = 13;

        goto label11;

     label09:
        c9 = 8;

        goto label11;

     label10:
        c9 = 12;

     label11:
        virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c9);

        goto label01;

     label12:
        $i1 = virtualinvoke r7.<java.lang.StringBuilder: int length()>();

        if $i1 <= 0 goto label13;

        $r3 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

     label13:
        return $r8;
    }

    public static java.util.List splitFileNames(java.lang.String)
    {
        java.lang.String[] $r2;
        java.util.ArrayList $r1;
        java.util.List $r5;
        int i0, i1;
        java.lang.String r0, r3, $r4;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r5 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r5;

     label1:
        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>("(?<!\\\\),");

        i0 = lengthof $r2;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        r3 = $r2[i1];

        $r4 = virtualinvoke r3.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\\\(?=,)", "");

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r4);

        i1 = i1 + 1;

        goto label2;

     label3:
        return $r1;
    }

    public static java.lang.String join(java.util.List, char)
    {
        int $i0, $i1, i4, $i5, $i6, $i7, $i8;
        java.lang.String $r3, $r5;
        boolean $z0, z1;
        java.util.Iterator $r2;
        char c2, $c3;
        java.util.List r1;
        java.lang.Object $r4;
        java.lang.StringBuilder $r6;

        r1 := @parameter0: java.util.List;

        c2 := @parameter1: char;

        $r6 = new java.lang.StringBuilder;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $i1 = $i0 << 3;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(int)>($i1);

        z1 = 1;

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        if z1 == 0 goto label2;

        z1 = 0;

        goto label3;

     label2:
        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c2);

     label3:
        i4 = 0;

     label4:
        $i5 = virtualinvoke $r5.<java.lang.String: int length()>();

        if i4 >= $i5 goto label7;

        $c3 = virtualinvoke $r5.<java.lang.String: char charAt(int)>(i4);

        $i6 = (int) $c3;

        if $i6 == 92 goto label5;

        $i7 = (int) $c3;

        $i8 = (int) c2;

        if $i7 != $i8 goto label6;

     label5:
        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(92);

     label6:
        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        i4 = i4 + 1;

        goto label4;

     label7:
        goto label1;

     label8:
        $r3 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static java.util.List splitWS(java.lang.String, boolean)
    {
        java.util.ArrayList $r7;
        int $i0, $i1, $i2, $i4, $i6, i7, $i9, $i10;
        java.lang.String r2, $r3, $r4;
        boolean $z0, z1;
        char $c3, $c5, c8;
        java.lang.StringBuilder r6, $r8, $r9;

        r2 := @parameter0: java.lang.String;

        z1 := @parameter1: boolean;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>(2);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        r6 = $r8;

        i7 = 0;

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

     label01:
        if i7 >= $i0 goto label11;

        $i2 = i7;

        i7 = i7 + 1;

        $c3 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i2);

        c8 = $c3;

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c3);

        if $z0 == 0 goto label02;

        $i6 = virtualinvoke r6.<java.lang.StringBuilder: int length()>();

        if $i6 <= 0 goto label01;

        $r4 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        r6 = $r9;

        goto label01;

     label02:
        $i9 = (int) $c3;

        if $i9 != 92 goto label10;

        if z1 != 0 goto label03;

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

     label03:
        if i7 < $i0 goto label04;

        goto label11;

     label04:
        $i4 = i7;

        i7 = i7 + 1;

        $c5 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i4);

        c8 = $c5;

        if z1 == 0 goto label10;

        $i10 = (int) $c5;

        lookupswitch($i10)
        {
            case 98: goto label08;
            case 102: goto label09;
            case 110: goto label05;
            case 114: goto label07;
            case 116: goto label06;
            default: goto label10;
        };

     label05:
        c8 = 10;

        goto label10;

     label06:
        c8 = 9;

        goto label10;

     label07:
        c8 = 13;

        goto label10;

     label08:
        c8 = 8;

        goto label10;

     label09:
        c8 = 12;

     label10:
        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c8);

        goto label01;

     label11:
        $i1 = virtualinvoke r6.<java.lang.StringBuilder: int length()>();

        if $i1 <= 0 goto label12;

        $r3 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

     label12:
        return $r7;
    }

    public static java.util.List toLower(java.util.List)
    {
        java.util.Iterator $r2;
        java.util.ArrayList $r0;
        java.util.List r1;
        java.util.Locale $r5;
        int $i0;
        java.lang.Object $r3;
        java.lang.String r4, $r6;
        boolean $z0;

        r1 := @parameter0: java.util.List;

        $r0 = new java.util.ArrayList;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0);

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r3;

        $r5 = <java.util.Locale: java.util.Locale ROOT>;

        $r6 = virtualinvoke r4.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r5);

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        goto label1;

     label2:
        return $r0;
    }

    public static boolean parseBoolean(java.lang.String)
    {
        int $i0, $i1;
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $i1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        goto label2;

     label1:
        $i1 = 0;

     label2:
        if $i1 == 49 goto label3;

        if $i1 == 116 goto label3;

        if $i1 != 84 goto label4;

     label3:
        $z0 = 1;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        return $z0;
    }

    public static boolean parseBool(java.lang.String)
    {
        org.apache.solr.common.SolrException$ErrorCode $r3;
        org.apache.solr.common.SolrException $r1;
        java.lang.StringBuilder $r2, $r4, $r5;
        java.lang.String r0, $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label4;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("true");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("on");

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("yes");

        if $z2 == 0 goto label2;

     label1:
        return 1;

     label2:
        $z3 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("false");

        if $z3 != 0 goto label3;

        $z4 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("off");

        if $z4 != 0 goto label3;

        $z5 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("no");

        if $z5 == 0 goto label4;

     label3:
        return 0;

     label4:
        $r1 = new org.apache.solr.common.SolrException;

        $r3 = <org.apache.solr.common.SolrException$ErrorCode: org.apache.solr.common.SolrException$ErrorCode BAD_REQUEST>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid boolean value: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<org.apache.solr.common.SolrException: void <init>(org.apache.solr.common.SolrException$ErrorCode,java.lang.String)>($r3, $r6);

        throw $r1;
    }

    public static boolean parseBool(java.lang.String, boolean)
    {
        java.lang.String r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        if r0 == null goto label4;

        $z1 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("true");

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("on");

        if $z2 != 0 goto label1;

        $z3 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("yes");

        if $z3 == 0 goto label2;

     label1:
        return 1;

     label2:
        $z4 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("false");

        if $z4 != 0 goto label3;

        $z5 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("off");

        if $z5 != 0 goto label3;

        $z6 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("no");

        if $z6 == 0 goto label4;

     label3:
        return 0;

     label4:
        return z0;
    }

    public static void partialURLEncodeVal(java.lang.Appendable, java.lang.String) throws java.io.IOException
    {
        java.lang.Appendable r1;
        char $c1;
        int $i0, i2, $i3, $i4, $i5, $i6;
        java.lang.String r0, $r2;

        r1 := @parameter0: java.lang.Appendable;

        r0 := @parameter1: java.lang.String;

        i2 = 0;

     label01:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i2 >= $i0 goto label11;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        $i3 = (int) $c1;

        if $i3 >= 32 goto label03;

        interfaceinvoke r1.<java.lang.Appendable: java.lang.Appendable append(char)>(37);

        $i4 = (int) $c1;

        if $i4 >= 16 goto label02;

        interfaceinvoke r1.<java.lang.Appendable: java.lang.Appendable append(char)>(48);

     label02:
        $i5 = (int) $c1;

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i5);

        interfaceinvoke r1.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r2);

        goto label10;

     label03:
        $i6 = (int) $c1;

        lookupswitch($i6)
        {
            case 32: goto label04;
            case 37: goto label06;
            case 38: goto label05;
            case 43: goto label08;
            case 61: goto label07;
            default: goto label09;
        };

     label04:
        interfaceinvoke r1.<java.lang.Appendable: java.lang.Appendable append(char)>(43);

        goto label10;

     label05:
        interfaceinvoke r1.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>("%26");

        goto label10;

     label06:
        interfaceinvoke r1.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>("%25");

        goto label10;

     label07:
        interfaceinvoke r1.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>("%3D");

        goto label10;

     label08:
        interfaceinvoke r1.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>("%2B");

        goto label10;

     label09:
        interfaceinvoke r1.<java.lang.Appendable: java.lang.Appendable append(char)>($c1);

     label10:
        i2 = i2 + 1;

        goto label01;

     label11:
        return;
    }

    static void <clinit>()
    {
        char[] $r0;

        $r0 = newarray (char)[16];

        $r0[0] = 48;

        $r0[1] = 49;

        $r0[2] = 50;

        $r0[3] = 51;

        $r0[4] = 52;

        $r0[5] = 53;

        $r0[6] = 54;

        $r0[7] = 55;

        $r0[8] = 56;

        $r0[9] = 57;

        $r0[10] = 97;

        $r0[11] = 98;

        $r0[12] = 99;

        $r0[13] = 100;

        $r0[14] = 101;

        $r0[15] = 102;

        <org.apache.solr.common.util.StrUtils: char[] HEX_DIGITS> = $r0;

        return;
    }
}
