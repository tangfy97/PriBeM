public class org.springframework.core.io.ResourceEditor extends java.beans.PropertyEditorSupport
{
    private final org.springframework.core.io.ResourceLoader resourceLoader;
    private final boolean ignoreUnresolvablePlaceholders;

    public void <init>()
    {
        org.springframework.core.io.ResourceEditor r0;
        org.springframework.core.io.DefaultResourceLoader $r1;

        r0 := @this: org.springframework.core.io.ResourceEditor;

        $r1 = new org.springframework.core.io.DefaultResourceLoader;

        specialinvoke $r1.<org.springframework.core.io.DefaultResourceLoader: void <init>()>();

        specialinvoke r0.<org.springframework.core.io.ResourceEditor: void <init>(org.springframework.core.io.ResourceLoader)>($r1);

        return;
    }

    public void <init>(org.springframework.core.io.ResourceLoader)
    {
        org.springframework.core.io.ResourceEditor r0;
        org.springframework.core.io.ResourceLoader r1;

        r0 := @this: org.springframework.core.io.ResourceEditor;

        r1 := @parameter0: org.springframework.core.io.ResourceLoader;

        specialinvoke r0.<org.springframework.core.io.ResourceEditor: void <init>(org.springframework.core.io.ResourceLoader,boolean)>(r1, 1);

        return;
    }

    public void <init>(org.springframework.core.io.ResourceLoader, boolean)
    {
        org.springframework.core.io.ResourceEditor r0;
        org.springframework.core.io.ResourceLoader r1;
        boolean z0;

        r0 := @this: org.springframework.core.io.ResourceEditor;

        r1 := @parameter0: org.springframework.core.io.ResourceLoader;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.beans.PropertyEditorSupport: void <init>()>();

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "ResourceLoader must not be null");

        r0.<org.springframework.core.io.ResourceEditor: org.springframework.core.io.ResourceLoader resourceLoader> = r1;

        r0.<org.springframework.core.io.ResourceEditor: boolean ignoreUnresolvablePlaceholders> = z0;

        return;
    }

    public void setAsText(java.lang.String)
    {
        org.springframework.core.io.ResourceEditor r1;
        org.springframework.core.io.ResourceLoader $r4;
        java.lang.String r0, $r2, $r3;
        boolean $z0;
        org.springframework.core.io.Resource $r5;

        r1 := @this: org.springframework.core.io.ResourceEditor;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r1.<org.springframework.core.io.ResourceEditor: java.lang.String resolvePath(java.lang.String)>(r0);

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        $r4 = r1.<org.springframework.core.io.ResourceEditor: org.springframework.core.io.ResourceLoader resourceLoader>;

        $r5 = interfaceinvoke $r4.<org.springframework.core.io.ResourceLoader: org.springframework.core.io.Resource getResource(java.lang.String)>($r3);

        virtualinvoke r1.<org.springframework.core.io.ResourceEditor: void setValue(java.lang.Object)>($r5);

        goto label2;

     label1:
        virtualinvoke r1.<org.springframework.core.io.ResourceEditor: void setValue(java.lang.Object)>(null);

     label2:
        return;
    }

    protected java.lang.String resolvePath(java.lang.String)
    {
        org.springframework.core.io.ResourceEditor r1;
        java.lang.String r0, $r2;
        boolean $z0;

        r1 := @this: org.springframework.core.io.ResourceEditor;

        r0 := @parameter0: java.lang.String;

        $z0 = r1.<org.springframework.core.io.ResourceEditor: boolean ignoreUnresolvablePlaceholders>;

        $r2 = staticinvoke <org.springframework.util.SystemPropertyUtils: java.lang.String resolvePlaceholders(java.lang.String,boolean)>(r0, $z0);

        return $r2;
    }

    public java.lang.String getAsText()
    {
        org.springframework.core.io.ResourceEditor r0;
        java.net.URL $r3;
        java.lang.Object $r1;
        java.io.IOException $r4;
        java.lang.String $r5;
        org.springframework.core.io.Resource r2;

        r0 := @this: org.springframework.core.io.ResourceEditor;

        $r1 = virtualinvoke r0.<org.springframework.core.io.ResourceEditor: java.lang.Object getValue()>();

        r2 = (org.springframework.core.io.Resource) $r1;

     label1:
        if r2 == null goto label2;

        $r3 = interfaceinvoke r2.<org.springframework.core.io.Resource: java.net.URL getURL()>();

        $r5 = virtualinvoke $r3.<java.net.URL: java.lang.String toExternalForm()>();

        goto label3;

     label2:
        $r5 = "";

     label3:
        return $r5;

     label4:
        $r4 := @caughtexception;

        return null;

        catch java.io.IOException from label1 to label3 with label4;
    }
}
