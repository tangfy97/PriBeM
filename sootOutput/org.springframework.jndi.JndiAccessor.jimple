public class org.springframework.jndi.JndiAccessor extends java.lang.Object
{
    protected final org.apache.commons.logging.Log logger;
    private org.springframework.jndi.JndiTemplate jndiTemplate;

    public void <init>()
    {
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;
        org.springframework.jndi.JndiAccessor r0;
        org.springframework.jndi.JndiTemplate $r3;

        r0 := @this: org.springframework.jndi.JndiAccessor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.springframework.jndi.JndiAccessor: org.apache.commons.logging.Log logger> = $r2;

        $r3 = new org.springframework.jndi.JndiTemplate;

        specialinvoke $r3.<org.springframework.jndi.JndiTemplate: void <init>()>();

        r0.<org.springframework.jndi.JndiAccessor: org.springframework.jndi.JndiTemplate jndiTemplate> = $r3;

        return;
    }

    public void setJndiTemplate(org.springframework.jndi.JndiTemplate)
    {
        org.springframework.jndi.JndiAccessor r0;
        org.springframework.jndi.JndiTemplate r1, $r2;

        r0 := @this: org.springframework.jndi.JndiAccessor;

        r1 := @parameter0: org.springframework.jndi.JndiTemplate;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r2 = new org.springframework.jndi.JndiTemplate;

        specialinvoke $r2.<org.springframework.jndi.JndiTemplate: void <init>()>();

     label2:
        r0.<org.springframework.jndi.JndiAccessor: org.springframework.jndi.JndiTemplate jndiTemplate> = $r2;

        return;
    }

    public org.springframework.jndi.JndiTemplate getJndiTemplate()
    {
        org.springframework.jndi.JndiAccessor r0;
        org.springframework.jndi.JndiTemplate $r1;

        r0 := @this: org.springframework.jndi.JndiAccessor;

        $r1 = r0.<org.springframework.jndi.JndiAccessor: org.springframework.jndi.JndiTemplate jndiTemplate>;

        return $r1;
    }

    public void setJndiEnvironment(java.util.Properties)
    {
        java.util.Properties r2;
        org.springframework.jndi.JndiAccessor r0;
        org.springframework.jndi.JndiTemplate $r1;

        r0 := @this: org.springframework.jndi.JndiAccessor;

        r2 := @parameter0: java.util.Properties;

        $r1 = new org.springframework.jndi.JndiTemplate;

        specialinvoke $r1.<org.springframework.jndi.JndiTemplate: void <init>(java.util.Properties)>(r2);

        r0.<org.springframework.jndi.JndiAccessor: org.springframework.jndi.JndiTemplate jndiTemplate> = $r1;

        return;
    }

    public java.util.Properties getJndiEnvironment()
    {
        java.util.Properties $r2;
        org.springframework.jndi.JndiAccessor r0;
        org.springframework.jndi.JndiTemplate $r1;

        r0 := @this: org.springframework.jndi.JndiAccessor;

        $r1 = r0.<org.springframework.jndi.JndiAccessor: org.springframework.jndi.JndiTemplate jndiTemplate>;

        $r2 = virtualinvoke $r1.<org.springframework.jndi.JndiTemplate: java.util.Properties getEnvironment()>();

        return $r2;
    }
}
