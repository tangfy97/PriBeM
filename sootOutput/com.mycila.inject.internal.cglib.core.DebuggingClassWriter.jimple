public class com.mycila.inject.internal.cglib.core.DebuggingClassWriter extends com.mycila.inject.internal.asm.ClassWriter
{
    public static final java.lang.String DEBUG_LOCATION_PROPERTY;
    private static java.lang.String debugLocation;
    private static boolean traceEnabled;
    private java.lang.String className;
    private java.lang.String superName;

    public void <init>(int)
    {
        int i0;
        com.mycila.inject.internal.cglib.core.DebuggingClassWriter r0;

        r0 := @this: com.mycila.inject.internal.cglib.core.DebuggingClassWriter;

        i0 := @parameter0: int;

        specialinvoke r0.<com.mycila.inject.internal.asm.ClassWriter: void <init>(int)>(i0);

        return;
    }

    public void visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])
    {
        java.lang.String[] r6;
        com.mycila.inject.internal.cglib.core.DebuggingClassWriter r0;
        int i0, i1;
        java.lang.String r1, $r2, r3, $r4, r5;

        r0 := @this: com.mycila.inject.internal.cglib.core.DebuggingClassWriter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r5 := @parameter3: java.lang.String;

        r3 := @parameter4: java.lang.String;

        r6 := @parameter5: java.lang.String[];

        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String replace(char,char)>(47, 46);

        r0.<com.mycila.inject.internal.cglib.core.DebuggingClassWriter: java.lang.String className> = $r2;

        $r4 = virtualinvoke r3.<java.lang.String: java.lang.String replace(char,char)>(47, 46);

        r0.<com.mycila.inject.internal.cglib.core.DebuggingClassWriter: java.lang.String superName> = $r4;

        specialinvoke r0.<com.mycila.inject.internal.asm.ClassWriter: void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>(i0, i1, r1, r5, r3, r6);

        return;
    }

    public java.lang.String getClassName()
    {
        java.lang.String $r1;
        com.mycila.inject.internal.cglib.core.DebuggingClassWriter r0;

        r0 := @this: com.mycila.inject.internal.cglib.core.DebuggingClassWriter;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.DebuggingClassWriter: java.lang.String className>;

        return $r1;
    }

    public java.lang.String getSuperName()
    {
        java.lang.String $r1;
        com.mycila.inject.internal.cglib.core.DebuggingClassWriter r0;

        r0 := @this: com.mycila.inject.internal.cglib.core.DebuggingClassWriter;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.DebuggingClassWriter: java.lang.String superName>;

        return $r1;
    }

    public byte[] toByteArray()
    {
        byte[] $r3, $r4;
        com.mycila.inject.internal.cglib.core.DebuggingClassWriter r1;
        java.lang.Object $r2;
        com.mycila.inject.internal.cglib.core.DebuggingClassWriter$1 $r0;

        r1 := @this: com.mycila.inject.internal.cglib.core.DebuggingClassWriter;

        $r0 = new com.mycila.inject.internal.cglib.core.DebuggingClassWriter$1;

        specialinvoke $r0.<com.mycila.inject.internal.cglib.core.DebuggingClassWriter$1: void <init>(com.mycila.inject.internal.cglib.core.DebuggingClassWriter)>(r1);

        $r2 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0);

        $r3 = (byte[]) $r2;

        $r4 = (byte[]) $r3;

        return $r4;
    }

    static byte[] access$001(com.mycila.inject.internal.cglib.core.DebuggingClassWriter)
    {
        byte[] $r1;
        com.mycila.inject.internal.cglib.core.DebuggingClassWriter r0;

        r0 := @parameter0: com.mycila.inject.internal.cglib.core.DebuggingClassWriter;

        $r1 = specialinvoke r0.<com.mycila.inject.internal.asm.ClassWriter: byte[] toByteArray()>();

        return $r1;
    }

    static java.lang.String access$100()
    {
        java.lang.String $r0;

        $r0 = <com.mycila.inject.internal.cglib.core.DebuggingClassWriter: java.lang.String debugLocation>;

        return $r0;
    }

    static java.lang.String access$200(com.mycila.inject.internal.cglib.core.DebuggingClassWriter)
    {
        java.lang.String $r1;
        com.mycila.inject.internal.cglib.core.DebuggingClassWriter r0;

        r0 := @parameter0: com.mycila.inject.internal.cglib.core.DebuggingClassWriter;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.DebuggingClassWriter: java.lang.String className>;

        return $r1;
    }

    static boolean access$300()
    {
        boolean $z0;

        $z0 = <com.mycila.inject.internal.cglib.core.DebuggingClassWriter: boolean traceEnabled>;

        return $z0;
    }

    static void <clinit>()
    {
        java.io.PrintStream $r3;
        java.lang.Throwable $r9;
        java.lang.StringBuffer $r2, $r4, $r6, $r7;
        java.lang.String $r0, $r1, $r5, $r8;

        <com.mycila.inject.internal.cglib.core.DebuggingClassWriter: java.lang.String DEBUG_LOCATION_PROPERTY> = "cglib.debugLocation";

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("cglib.debugLocation");

        <com.mycila.inject.internal.cglib.core.DebuggingClassWriter: java.lang.String debugLocation> = $r0;

        $r1 = <com.mycila.inject.internal.cglib.core.DebuggingClassWriter: java.lang.String debugLocation>;

        if $r1 == null goto label4;

        $r3 = <java.lang.System: java.io.PrintStream err>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("CGLIB debugging enabled, writing to \'");

        $r5 = <com.mycila.inject.internal.cglib.core.DebuggingClassWriter: java.lang.String debugLocation>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r8);

     label1:
        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("com.mycila.inject.internal.asm.util.TraceClassVisitor");

        <com.mycila.inject.internal.cglib.core.DebuggingClassWriter: boolean traceEnabled> = 1;

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
