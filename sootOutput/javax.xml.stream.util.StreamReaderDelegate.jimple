public class javax.xml.stream.util.StreamReaderDelegate extends java.lang.Object implements javax.xml.stream.XMLStreamReader
{
    private javax.xml.stream.XMLStreamReader reader;

    public void <init>()
    {
        javax.xml.stream.util.StreamReaderDelegate r0;

        r0 := @this: javax.xml.stream.util.StreamReaderDelegate;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(javax.xml.stream.XMLStreamReader)
    {
        javax.xml.stream.util.StreamReaderDelegate r0;
        javax.xml.stream.XMLStreamReader r1;

        r0 := @this: javax.xml.stream.util.StreamReaderDelegate;

        r1 := @parameter0: javax.xml.stream.XMLStreamReader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<javax.xml.stream.util.StreamReaderDelegate: javax.xml.stream.XMLStreamReader reader> = r1;

        return;
    }

    public void setParent(javax.xml.stream.XMLStreamReader)
    {
        javax.xml.stream.util.StreamReaderDelegate r0;
        javax.xml.stream.XMLStreamReader r1;

        r0 := @this: javax.xml.stream.util.StreamReaderDelegate;

        r1 := @parameter0: javax.xml.stream.XMLStreamReader;

        r0.<javax.xml.stream.util.StreamReaderDelegate: javax.xml.stream.XMLStreamReader reader> = r1;

        return;
    }

    public javax.xml.stream.XMLStreamReader getParent()
    {
        javax.xml.stream.util.StreamReaderDelegate r0;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @this: javax.xml.stream.util.StreamReaderDelegate;

        $r1 = r0.<javax.xml.stream.util.StreamReaderDelegate: javax.xml.stream.XMLStreamReader reader>;

        return $r1;
    }

    public int next() throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.util.StreamReaderDelegate r0;
        int $i0;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @this: javax.xml.stream.util.StreamReaderDelegate;

        $r1 = r0.<javax.xml.stream.util.StreamReaderDelegate: javax.xml.stream.XMLStreamReader reader>;

        $i0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: int next()>();

        return $i0;
    }

    public int nextTag() throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.util.StreamReaderDelegate r0;
        int $i0;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @this: javax.xml.stream.util.StreamReaderDelegate;

        $r1 = r0.<javax.xml.stream.util.StreamReaderDelegate: javax.xml.stream.XMLStreamReader reader>;

        $i0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: int nextTag()>();

        return $i0;
    }

    public java.lang.String getElementText() throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.util.StreamReaderDelegate r0;
        java.lang.String $r2;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @this: javax.xml.stream.util.StreamReaderDelegate;

        $r1 = r0.<javax.xml.stream.util.StreamReaderDelegate: javax.xml.stream.XMLStreamReader reader>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getElementText()>();

        return $r2;
    }

    public void require(int, java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.util.StreamReaderDelegate r0;
        javax.xml.stream.XMLStreamReader $r3;
        int i0;
        java.lang.String r1, r2;

        r0 := @this: javax.xml.stream.util.StreamReaderDelegate;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r3 = r0.<javax.xml.stream.util.StreamReaderDelegate: javax.xml.stream.XMLStreamReader reader>;

        interfaceinvoke $r3.<javax.xml.stream.XMLStreamReader: void require(int,java.lang.String,java.lang.String)>(i0, r1, r2);

        return;
    }

    public boolean hasNext() throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.util.StreamReaderDelegate r0;
        javax.xml.stream.XMLStreamReader $r1;
        boolean $z0;

        r0 := @this: javax.xml.stream.util.StreamReaderDelegate;

        $r1 = r0.<javax.xml.stream.util.StreamReaderDelegate: javax.xml.stream.XMLStreamReader reader>;

        $z0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: boolean hasNext()>();

        return $z0;
    }

    public void close() throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.util.StreamReaderDelegate r0;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @this: javax.xml.stream.util.StreamReaderDelegate;

        $r1 = r0.<javax.xml.stream.util.StreamReaderDelegate: javax.xml.stream.XMLStreamReader reader>;

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: void close()>();

        return;
    }

    public java.lang.String getNamespaceURI(java.lang.String)
    {
        javax.xml.stream.util.StreamReaderDelegate r0;
        javax.xml.stream.XMLStreamReader $r2;
        java.lang.String r1, $r3;

        r0 := @this: javax.xml.stream.util.StreamReaderDelegate;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<javax.xml.stream.util.StreamReaderDelegate: javax.xml.stream.XMLStreamReader reader>;

        $r3 = interfaceinvoke $r2.<javax.xml.stream.XMLStreamReader: java.lang.String getNamespaceURI(java.lang.String)>(r1);

        return $r3;
    }

    public javax.xml.namespace.NamespaceContext getNamespaceContext()
    {
        javax.xml.stream.util.StreamReaderDelegate r0;
        javax.xml.namespace.NamespaceContext $r2;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @this: javax.xml.stream.util.StreamReaderDelegate;

        $r1 = r0.<javax.xml.stream.util.StreamReaderDelegate: javax.xml.stream.XMLStreamReader reader>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: javax.xml.namespace.NamespaceContext getNamespaceContext()>();

        return $r2;
    }

    public boolean isStartElement()
    {
        javax.xml.stream.util.StreamReaderDelegate r0;
        javax.xml.stream.XMLStreamReader $r1;
        boolean $z0;

        r0 := @this: javax.xml.stream.util.StreamReaderDelegate;

        $r1 = r0.<javax.xml.stream.util.StreamReaderDelegate: javax.xml.stream.XMLStreamReader reader>;

        $z0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: boolean isStartElement()>();

        return $z0;
    }

    public boolean isEndElement()
    {
        javax.xml.stream.util.StreamReaderDelegate r0;
        javax.xml.stream.XMLStreamReader $r1;
        boolean $z0;

        r0 := @this: javax.xml.stream.util.StreamReaderDelegate;

        $r1 = r0.<javax.xml.stream.util.StreamReaderDelegate: javax.xml.stream.XMLStreamReader reader>;

        $z0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: boolean isEndElement()>();

        return $z0;
    }

    public boolean isCharacters()
    {
        javax.xml.stream.util.StreamReaderDelegate r0;
        javax.xml.stream.XMLStreamReader $r1;
        boolean $z0;

        r0 := @this: javax.xml.stream.util.StreamReaderDelegate;

        $r1 = r0.<javax.xml.stream.util.StreamReaderDelegate: javax.xml.stream.XMLStreamReader reader>;

        $z0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: boolean isCharacters()>();

        return $z0;
    }

    public boolean isWhiteSpace()
    {
        javax.xml.stream.util.StreamReaderDelegate r0;
        javax.xml.stream.XMLStreamReader $r1;
        boolean $z0;

        r0 := @this: javax.xml.stream.util.StreamReaderDelegate;

        $r1 = r0.<javax.xml.stream.util.StreamReaderDelegate: javax.xml.stream.XMLStreamReader reader>;

        $z0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: boolean isWhiteSpace()>();

        return $z0;
    }

    public java.lang.String getAttributeValue(java.lang.String, java.lang.String)
    {
        javax.xml.stream.util.StreamReaderDelegate r0;
        javax.xml.stream.XMLStreamReader $r3;
        java.lang.String r1, r2, $r4;

        r0 := @this: javax.xml.stream.util.StreamReaderDelegate;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<javax.xml.stream.util.StreamReaderDelegate: javax.xml.stream.XMLStreamReader reader>;

        $r4 = interfaceinvoke $r3.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(r1, r2);

        return $r4;
    }

    public int getAttributeCount()
    {
        javax.xml.stream.util.StreamReaderDelegate r0;
        int $i0;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @this: javax.xml.stream.util.StreamReaderDelegate;

        $r1 = r0.<javax.xml.stream.util.StreamReaderDelegate: javax.xml.stream.XMLStreamReader reader>;

        $i0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: int getAttributeCount()>();

        return $i0;
    }

    public javax.xml.namespace.QName getAttributeName(int)
    {
        javax.xml.stream.util.StreamReaderDelegate r0;
        javax.xml.stream.XMLStreamReader $r1;
        int i0;
        javax.xml.namespace.QName $r2;

        r0 := @this: javax.xml.stream.util.StreamReaderDelegate;

        i0 := @parameter0: int;

        $r1 = r0.<javax.xml.stream.util.StreamReaderDelegate: javax.xml.stream.XMLStreamReader reader>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: javax.xml.namespace.QName getAttributeName(int)>(i0);

        return $r2;
    }

    public java.lang.String getAttributePrefix(int)
    {
        javax.xml.stream.util.StreamReaderDelegate r0;
        javax.xml.stream.XMLStreamReader $r1;
        int i0;
        java.lang.String $r2;

        r0 := @this: javax.xml.stream.util.StreamReaderDelegate;

        i0 := @parameter0: int;

        $r1 = r0.<javax.xml.stream.util.StreamReaderDelegate: javax.xml.stream.XMLStreamReader reader>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributePrefix(int)>(i0);

        return $r2;
    }

    public java.lang.String getAttributeNamespace(int)
    {
        javax.xml.stream.util.StreamReaderDelegate r0;
        javax.xml.stream.XMLStreamReader $r1;
        int i0;
        java.lang.String $r2;

        r0 := @this: javax.xml.stream.util.StreamReaderDelegate;

        i0 := @parameter0: int;

        $r1 = r0.<javax.xml.stream.util.StreamReaderDelegate: javax.xml.stream.XMLStreamReader reader>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeNamespace(int)>(i0);

        return $r2;
    }

    public java.lang.String getAttributeLocalName(int)
    {
        javax.xml.stream.util.StreamReaderDelegate r0;
        javax.xml.stream.XMLStreamReader $r1;
        int i0;
        java.lang.String $r2;

        r0 := @this: javax.xml.stream.util.StreamReaderDelegate;

        i0 := @parameter0: int;

        $r1 = r0.<javax.xml.stream.util.StreamReaderDelegate: javax.xml.stream.XMLStreamReader reader>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeLocalName(int)>(i0);

        return $r2;
    }

    public java.lang.String getAttributeType(int)
    {
        javax.xml.stream.util.StreamReaderDelegate r0;
        javax.xml.stream.XMLStreamReader $r1;
        int i0;
        java.lang.String $r2;

        r0 := @this: javax.xml.stream.util.StreamReaderDelegate;

        i0 := @parameter0: int;

        $r1 = r0.<javax.xml.stream.util.StreamReaderDelegate: javax.xml.stream.XMLStreamReader reader>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeType(int)>(i0);

        return $r2;
    }

    public java.lang.String getAttributeValue(int)
    {
        javax.xml.stream.util.StreamReaderDelegate r0;
        javax.xml.stream.XMLStreamReader $r1;
        int i0;
        java.lang.String $r2;

        r0 := @this: javax.xml.stream.util.StreamReaderDelegate;

        i0 := @parameter0: int;

        $r1 = r0.<javax.xml.stream.util.StreamReaderDelegate: javax.xml.stream.XMLStreamReader reader>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeValue(int)>(i0);

        return $r2;
    }

    public boolean isAttributeSpecified(int)
    {
        javax.xml.stream.util.StreamReaderDelegate r0;
        javax.xml.stream.XMLStreamReader $r1;
        int i0;
        boolean $z0;

        r0 := @this: javax.xml.stream.util.StreamReaderDelegate;

        i0 := @parameter0: int;

        $r1 = r0.<javax.xml.stream.util.StreamReaderDelegate: javax.xml.stream.XMLStreamReader reader>;

        $z0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: boolean isAttributeSpecified(int)>(i0);

        return $z0;
    }

    public int getNamespaceCount()
    {
        javax.xml.stream.util.StreamReaderDelegate r0;
        int $i0;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @this: javax.xml.stream.util.StreamReaderDelegate;

        $r1 = r0.<javax.xml.stream.util.StreamReaderDelegate: javax.xml.stream.XMLStreamReader reader>;

        $i0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: int getNamespaceCount()>();

        return $i0;
    }

    public java.lang.String getNamespacePrefix(int)
    {
        javax.xml.stream.util.StreamReaderDelegate r0;
        javax.xml.stream.XMLStreamReader $r1;
        int i0;
        java.lang.String $r2;

        r0 := @this: javax.xml.stream.util.StreamReaderDelegate;

        i0 := @parameter0: int;

        $r1 = r0.<javax.xml.stream.util.StreamReaderDelegate: javax.xml.stream.XMLStreamReader reader>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getNamespacePrefix(int)>(i0);

        return $r2;
    }

    public java.lang.String getNamespaceURI(int)
    {
        javax.xml.stream.util.StreamReaderDelegate r0;
        javax.xml.stream.XMLStreamReader $r1;
        int i0;
        java.lang.String $r2;

        r0 := @this: javax.xml.stream.util.StreamReaderDelegate;

        i0 := @parameter0: int;

        $r1 = r0.<javax.xml.stream.util.StreamReaderDelegate: javax.xml.stream.XMLStreamReader reader>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getNamespaceURI(int)>(i0);

        return $r2;
    }

    public int getEventType()
    {
        javax.xml.stream.util.StreamReaderDelegate r0;
        int $i0;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @this: javax.xml.stream.util.StreamReaderDelegate;

        $r1 = r0.<javax.xml.stream.util.StreamReaderDelegate: javax.xml.stream.XMLStreamReader reader>;

        $i0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: int getEventType()>();

        return $i0;
    }

    public java.lang.String getText()
    {
        javax.xml.stream.util.StreamReaderDelegate r0;
        java.lang.String $r2;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @this: javax.xml.stream.util.StreamReaderDelegate;

        $r1 = r0.<javax.xml.stream.util.StreamReaderDelegate: javax.xml.stream.XMLStreamReader reader>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getText()>();

        return $r2;
    }

    public int getTextCharacters(int, char[], int, int) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.util.StreamReaderDelegate r0;
        javax.xml.stream.XMLStreamReader $r2;
        int i0, i1, i2, $i3;
        char[] r1;

        r0 := @this: javax.xml.stream.util.StreamReaderDelegate;

        i0 := @parameter0: int;

        r1 := @parameter1: char[];

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r2 = r0.<javax.xml.stream.util.StreamReaderDelegate: javax.xml.stream.XMLStreamReader reader>;

        $i3 = interfaceinvoke $r2.<javax.xml.stream.XMLStreamReader: int getTextCharacters(int,char[],int,int)>(i0, r1, i1, i2);

        return $i3;
    }

    public char[] getTextCharacters()
    {
        javax.xml.stream.util.StreamReaderDelegate r0;
        char[] $r2;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @this: javax.xml.stream.util.StreamReaderDelegate;

        $r1 = r0.<javax.xml.stream.util.StreamReaderDelegate: javax.xml.stream.XMLStreamReader reader>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: char[] getTextCharacters()>();

        return $r2;
    }

    public int getTextStart()
    {
        javax.xml.stream.util.StreamReaderDelegate r0;
        int $i0;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @this: javax.xml.stream.util.StreamReaderDelegate;

        $r1 = r0.<javax.xml.stream.util.StreamReaderDelegate: javax.xml.stream.XMLStreamReader reader>;

        $i0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: int getTextStart()>();

        return $i0;
    }

    public int getTextLength()
    {
        javax.xml.stream.util.StreamReaderDelegate r0;
        int $i0;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @this: javax.xml.stream.util.StreamReaderDelegate;

        $r1 = r0.<javax.xml.stream.util.StreamReaderDelegate: javax.xml.stream.XMLStreamReader reader>;

        $i0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: int getTextLength()>();

        return $i0;
    }

    public java.lang.String getEncoding()
    {
        javax.xml.stream.util.StreamReaderDelegate r0;
        java.lang.String $r2;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @this: javax.xml.stream.util.StreamReaderDelegate;

        $r1 = r0.<javax.xml.stream.util.StreamReaderDelegate: javax.xml.stream.XMLStreamReader reader>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getEncoding()>();

        return $r2;
    }

    public boolean hasText()
    {
        javax.xml.stream.util.StreamReaderDelegate r0;
        javax.xml.stream.XMLStreamReader $r1;
        boolean $z0;

        r0 := @this: javax.xml.stream.util.StreamReaderDelegate;

        $r1 = r0.<javax.xml.stream.util.StreamReaderDelegate: javax.xml.stream.XMLStreamReader reader>;

        $z0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: boolean hasText()>();

        return $z0;
    }

    public javax.xml.stream.Location getLocation()
    {
        javax.xml.stream.util.StreamReaderDelegate r0;
        javax.xml.stream.XMLStreamReader $r1;
        javax.xml.stream.Location $r2;

        r0 := @this: javax.xml.stream.util.StreamReaderDelegate;

        $r1 = r0.<javax.xml.stream.util.StreamReaderDelegate: javax.xml.stream.XMLStreamReader reader>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: javax.xml.stream.Location getLocation()>();

        return $r2;
    }

    public javax.xml.namespace.QName getName()
    {
        javax.xml.stream.util.StreamReaderDelegate r0;
        javax.xml.namespace.QName $r2;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @this: javax.xml.stream.util.StreamReaderDelegate;

        $r1 = r0.<javax.xml.stream.util.StreamReaderDelegate: javax.xml.stream.XMLStreamReader reader>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: javax.xml.namespace.QName getName()>();

        return $r2;
    }

    public java.lang.String getLocalName()
    {
        javax.xml.stream.util.StreamReaderDelegate r0;
        java.lang.String $r2;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @this: javax.xml.stream.util.StreamReaderDelegate;

        $r1 = r0.<javax.xml.stream.util.StreamReaderDelegate: javax.xml.stream.XMLStreamReader reader>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getLocalName()>();

        return $r2;
    }

    public boolean hasName()
    {
        javax.xml.stream.util.StreamReaderDelegate r0;
        javax.xml.stream.XMLStreamReader $r1;
        boolean $z0;

        r0 := @this: javax.xml.stream.util.StreamReaderDelegate;

        $r1 = r0.<javax.xml.stream.util.StreamReaderDelegate: javax.xml.stream.XMLStreamReader reader>;

        $z0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: boolean hasName()>();

        return $z0;
    }

    public java.lang.String getNamespaceURI()
    {
        javax.xml.stream.util.StreamReaderDelegate r0;
        java.lang.String $r2;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @this: javax.xml.stream.util.StreamReaderDelegate;

        $r1 = r0.<javax.xml.stream.util.StreamReaderDelegate: javax.xml.stream.XMLStreamReader reader>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getNamespaceURI()>();

        return $r2;
    }

    public java.lang.String getPrefix()
    {
        javax.xml.stream.util.StreamReaderDelegate r0;
        java.lang.String $r2;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @this: javax.xml.stream.util.StreamReaderDelegate;

        $r1 = r0.<javax.xml.stream.util.StreamReaderDelegate: javax.xml.stream.XMLStreamReader reader>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getPrefix()>();

        return $r2;
    }

    public java.lang.String getVersion()
    {
        javax.xml.stream.util.StreamReaderDelegate r0;
        java.lang.String $r2;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @this: javax.xml.stream.util.StreamReaderDelegate;

        $r1 = r0.<javax.xml.stream.util.StreamReaderDelegate: javax.xml.stream.XMLStreamReader reader>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getVersion()>();

        return $r2;
    }

    public boolean isStandalone()
    {
        javax.xml.stream.util.StreamReaderDelegate r0;
        javax.xml.stream.XMLStreamReader $r1;
        boolean $z0;

        r0 := @this: javax.xml.stream.util.StreamReaderDelegate;

        $r1 = r0.<javax.xml.stream.util.StreamReaderDelegate: javax.xml.stream.XMLStreamReader reader>;

        $z0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: boolean isStandalone()>();

        return $z0;
    }

    public boolean standaloneSet()
    {
        javax.xml.stream.util.StreamReaderDelegate r0;
        javax.xml.stream.XMLStreamReader $r1;
        boolean $z0;

        r0 := @this: javax.xml.stream.util.StreamReaderDelegate;

        $r1 = r0.<javax.xml.stream.util.StreamReaderDelegate: javax.xml.stream.XMLStreamReader reader>;

        $z0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: boolean standaloneSet()>();

        return $z0;
    }

    public java.lang.String getCharacterEncodingScheme()
    {
        javax.xml.stream.util.StreamReaderDelegate r0;
        java.lang.String $r2;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @this: javax.xml.stream.util.StreamReaderDelegate;

        $r1 = r0.<javax.xml.stream.util.StreamReaderDelegate: javax.xml.stream.XMLStreamReader reader>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getCharacterEncodingScheme()>();

        return $r2;
    }

    public java.lang.String getPITarget()
    {
        javax.xml.stream.util.StreamReaderDelegate r0;
        java.lang.String $r2;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @this: javax.xml.stream.util.StreamReaderDelegate;

        $r1 = r0.<javax.xml.stream.util.StreamReaderDelegate: javax.xml.stream.XMLStreamReader reader>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getPITarget()>();

        return $r2;
    }

    public java.lang.String getPIData()
    {
        javax.xml.stream.util.StreamReaderDelegate r0;
        java.lang.String $r2;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @this: javax.xml.stream.util.StreamReaderDelegate;

        $r1 = r0.<javax.xml.stream.util.StreamReaderDelegate: javax.xml.stream.XMLStreamReader reader>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getPIData()>();

        return $r2;
    }

    public java.lang.Object getProperty(java.lang.String) throws java.lang.IllegalArgumentException
    {
        javax.xml.stream.util.StreamReaderDelegate r0;
        javax.xml.stream.XMLStreamReader $r2;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: javax.xml.stream.util.StreamReaderDelegate;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<javax.xml.stream.util.StreamReaderDelegate: javax.xml.stream.XMLStreamReader reader>;

        $r3 = interfaceinvoke $r2.<javax.xml.stream.XMLStreamReader: java.lang.Object getProperty(java.lang.String)>(r1);

        return $r3;
    }
}
