final class org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment extends java.lang.Object
{
    private final org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder attributesPattern;
    private final java.util.List prologue;
    private final java.util.Map allowedChildren;
    private final java.util.Set references;
    private final org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder characterPattern;

    void <init>(org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder, java.util.List, java.util.Map, java.util.Set, org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder)
    {
        java.util.List r2;
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder r1;
        java.util.Map r3;
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment r0;
        java.util.Set r4;
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder r5;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment;

        r1 := @parameter0: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: java.util.Map;

        r4 := @parameter3: java.util.Set;

        r5 := @parameter4: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder attributesPattern> = r1;

        r0.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment: java.util.List prologue> = r2;

        r0.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment: java.util.Map allowedChildren> = r3;

        r0.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment: java.util.Set references> = r4;

        r0.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder characterPattern> = r5;

        return;
    }

    private void importReferences(java.util.Map, org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CompilerState) throws org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException
    {
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CompilerState r5;
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder $r10, $r11;
        java.util.Map $r12, r19;
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment r0, $r6;
        java.lang.String r4, r18, $r25;
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder $r8, $r9;
        boolean $z0, $z1, $z2;
        org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException $r21;
        java.util.Map$Entry r16;
        java.util.Iterator $r2, $r14;
        java.util.Set $r1, $r13;
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$ReferenceData $r7;
        java.lang.Object $r3, $r15, $r17, $r20;
        java.lang.StringBuilder $r22, $r23, $r24;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment;

        r19 := @parameter0: java.util.Map;

        r5 := @parameter1: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CompilerState;

        $r1 = r0.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment: java.util.Set references>;

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r3;

        $r6 = virtualinvoke r5.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CompilerState: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment lookupDefinition(java.lang.String)>(r4);

        $r7 = specialinvoke $r6.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$ReferenceData resolveTopLevel(java.lang.String,org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CompilerState)>(r4, r5);

        $r9 = r0.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder characterPattern>;

        $r8 = $r7.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$ReferenceData: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder characterPattern>;

        virtualinvoke $r9.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder: void importFrom(org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder)>($r8);

        $r11 = r0.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder attributesPattern>;

        $r10 = $r7.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$ReferenceData: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder attributesPattern>;

        virtualinvoke $r11.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder: void importFrom(org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder)>($r10);

        $r12 = $r7.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$ReferenceData: java.util.Map potentialChildren>;

        $r13 = interfaceinvoke $r12.<java.util.Map: java.util.Set entrySet()>();

        $r14 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r15 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r16 = (java.util.Map$Entry) $r15;

        $r17 = interfaceinvoke r16.<java.util.Map$Entry: java.lang.Object getKey()>();

        r18 = (java.lang.String) $r17;

        $z2 = interfaceinvoke r19.<java.util.Map: boolean containsKey(java.lang.Object)>(r18);

        if $z2 == 0 goto label3;

        $r21 = new org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Subpattern defined more than once for element type: ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException: void <init>(java.lang.String)>($r25);

        throw $r21;

     label3:
        $r20 = interfaceinvoke r16.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r18, $r20);

        goto label2;

     label4:
        goto label1;

     label5:
        return;
    }

    private org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$ReferenceData resolveTopLevel(java.lang.String, org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CompilerState) throws org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException
    {
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$DeferredCompile $r31;
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CompilerState r0;
        java.util.Map $r3, $r9, $r24;
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment r8, $r34;
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder $r18, $r22;
        boolean $z0, $z1, $z2;
        java.util.Set $r2, $r5, $r10, $r20;
        org.waveprotocol.wave.model.experimental.schema.CharacterValidator $r19;
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$IntermediatePrologueFragment r38;
        java.util.List $r12, $r26, $r32;
        org.waveprotocol.wave.model.experimental.schema.AttributesValidator $r16;
        java.util.ArrayList $r6;
        org.waveprotocol.wave.model.experimental.schema.SchemaPattern$Prologue $r17;
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder $r15, $r23;
        java.lang.String r1, r29;
        org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException $r35;
        java.util.Map$Entry r37;
        java.util.Iterator $r11, $r13;
        java.util.TreeMap $r7;
        org.waveprotocol.wave.model.experimental.schema.SchemaPattern $r14, $r30;
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$ReferenceData $r21, r36;
        java.lang.Object $r4, $r25, $r27, $r28, $r33;

        r8 := @this: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CompilerState;

        $r2 = r0.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CompilerState: java.util.Set undergoingResolution>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r35 = new org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException;

        specialinvoke $r35.<org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException: void <init>(java.lang.String)>("Infinite recursion encountered");

        throw $r35;

     label1:
        $r3 = r0.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CompilerState: java.util.Map references>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r36 = (org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$ReferenceData) $r4;

        if r36 == null goto label2;

        return r36;

     label2:
        $r5 = r0.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CompilerState: java.util.Set undergoingResolution>;

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>(r1);

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $r7 = new java.util.TreeMap;

        specialinvoke $r7.<java.util.TreeMap: void <init>()>();

        $r9 = r8.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment: java.util.Map allowedChildren>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.util.Set entrySet()>();

        $r11 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r27 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r37 = (java.util.Map$Entry) $r27;

        $r28 = interfaceinvoke r37.<java.util.Map$Entry: java.lang.Object getKey()>();

        r29 = (java.lang.String) $r28;

        $r30 = new org.waveprotocol.wave.model.experimental.schema.SchemaPattern;

        specialinvoke $r30.<org.waveprotocol.wave.model.experimental.schema.SchemaPattern: void <init>()>();

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r29, $r30);

        $r32 = r0.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CompilerState: java.util.List deferredCompiles>;

        $r31 = new org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$DeferredCompile;

        $r33 = interfaceinvoke r37.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r34 = (org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment) $r33;

        specialinvoke $r31.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$DeferredCompile: void <init>(org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment,org.waveprotocol.wave.model.experimental.schema.SchemaPattern)>($r34, $r30);

        interfaceinvoke $r32.<java.util.List: boolean add(java.lang.Object)>($r31);

        goto label3;

     label4:
        specialinvoke r8.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment: void importReferences(java.util.Map,org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CompilerState)>($r7, r0);

        $r12 = r8.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment: java.util.List prologue>;

        $r13 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z2 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r25 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r38 = (org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$IntermediatePrologueFragment) $r25;

        $r26 = virtualinvoke r38.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$IntermediatePrologueFragment: java.util.List resolveTopLevel(org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CompilerState)>(r0);

        interfaceinvoke $r6.<java.util.List: boolean addAll(java.util.Collection)>($r26);

        goto label5;

     label6:
        $r14 = new org.waveprotocol.wave.model.experimental.schema.SchemaPattern;

        specialinvoke $r14.<org.waveprotocol.wave.model.experimental.schema.SchemaPattern: void <init>()>();

        $r15 = r8.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder attributesPattern>;

        $r16 = virtualinvoke $r15.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder: org.waveprotocol.wave.model.experimental.schema.AttributesValidator createValidator()>();

        $r17 = new org.waveprotocol.wave.model.experimental.schema.SchemaPattern$Prologue;

        specialinvoke $r17.<org.waveprotocol.wave.model.experimental.schema.SchemaPattern$Prologue: void <init>(java.util.List)>($r6);

        $r18 = r8.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder characterPattern>;

        $r19 = virtualinvoke $r18.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder: org.waveprotocol.wave.model.experimental.schema.CharacterValidator createValidator()>();

        virtualinvoke $r14.<org.waveprotocol.wave.model.experimental.schema.SchemaPattern: void initialize(org.waveprotocol.wave.model.experimental.schema.AttributesValidator,org.waveprotocol.wave.model.experimental.schema.SchemaPattern$Prologue,java.util.Map,org.waveprotocol.wave.model.experimental.schema.CharacterValidator)>($r16, $r17, $r7, $r19);

        $r20 = r0.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CompilerState: java.util.Set undergoingResolution>;

        interfaceinvoke $r20.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        $r21 = new org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$ReferenceData;

        $r23 = r8.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder attributesPattern>;

        $r22 = r8.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder characterPattern>;

        specialinvoke $r21.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$ReferenceData: void <init>(org.waveprotocol.wave.model.experimental.schema.SchemaPattern,java.util.Map,org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder,org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder)>($r14, $r7, $r23, $r22);

        $r24 = r0.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CompilerState: java.util.Map references>;

        interfaceinvoke $r24.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r21);

        return $r21;
    }

    private void compileTo(org.waveprotocol.wave.model.experimental.schema.SchemaPattern, org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CompilerState) throws org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException
    {
        org.waveprotocol.wave.model.experimental.schema.AttributesValidator $r11;
        java.util.ArrayList $r6;
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CompilerState r5;
        org.waveprotocol.wave.model.experimental.schema.SchemaPattern$Prologue $r12;
        java.util.Map $r2;
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder $r10;
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment r1, $r21;
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder $r13;
        boolean $z0, $z1;
        java.util.Map$Entry r23;
        java.util.Iterator $r4, $r8;
        java.util.Set $r3;
        org.waveprotocol.wave.model.experimental.schema.CharacterValidator $r14;
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$IntermediatePrologueFragment r16;
        java.util.List $r7, $r17;
        java.util.TreeMap $r0;
        org.waveprotocol.wave.model.experimental.schema.SchemaPattern r9, $r22;
        java.lang.Object $r15, $r18, $r19, $r20;

        r1 := @this: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment;

        r9 := @parameter0: org.waveprotocol.wave.model.experimental.schema.SchemaPattern;

        r5 := @parameter1: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CompilerState;

        $r0 = new java.util.TreeMap;

        specialinvoke $r0.<java.util.TreeMap: void <init>()>();

        $r2 = r1.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment: java.util.Map allowedChildren>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r18 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r23 = (java.util.Map$Entry) $r18;

        $r19 = interfaceinvoke r23.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r20 = interfaceinvoke r23.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r21 = (org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment) $r20;

        $r22 = specialinvoke $r21.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment: org.waveprotocol.wave.model.experimental.schema.SchemaPattern compile(org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CompilerState)>(r5);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, $r22);

        goto label1;

     label2:
        specialinvoke r1.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment: void importReferences(java.util.Map,org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CompilerState)>($r0, r5);

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $r7 = r1.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment: java.util.List prologue>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r15 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r16 = (org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$IntermediatePrologueFragment) $r15;

        $r17 = virtualinvoke r16.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$IntermediatePrologueFragment: java.util.List compile(org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CompilerState)>(r5);

        interfaceinvoke $r6.<java.util.List: boolean addAll(java.util.Collection)>($r17);

        goto label3;

     label4:
        $r10 = r1.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder attributesPattern>;

        $r11 = virtualinvoke $r10.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$AttributesPatternBuilder: org.waveprotocol.wave.model.experimental.schema.AttributesValidator createValidator()>();

        $r12 = new org.waveprotocol.wave.model.experimental.schema.SchemaPattern$Prologue;

        specialinvoke $r12.<org.waveprotocol.wave.model.experimental.schema.SchemaPattern$Prologue: void <init>(java.util.List)>($r6);

        $r13 = r1.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder characterPattern>;

        $r14 = virtualinvoke $r13.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CharacterPatternBuilder: org.waveprotocol.wave.model.experimental.schema.CharacterValidator createValidator()>();

        virtualinvoke r9.<org.waveprotocol.wave.model.experimental.schema.SchemaPattern: void initialize(org.waveprotocol.wave.model.experimental.schema.AttributesValidator,org.waveprotocol.wave.model.experimental.schema.SchemaPattern$Prologue,java.util.Map,org.waveprotocol.wave.model.experimental.schema.CharacterValidator)>($r11, $r12, $r0, $r14);

        return;
    }

    private org.waveprotocol.wave.model.experimental.schema.SchemaPattern compile(org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CompilerState) throws org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException
    {
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CompilerState r2;
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment r1;
        org.waveprotocol.wave.model.experimental.schema.SchemaPattern $r0;

        r1 := @this: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment;

        r2 := @parameter0: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CompilerState;

        $r0 = new org.waveprotocol.wave.model.experimental.schema.SchemaPattern;

        specialinvoke $r0.<org.waveprotocol.wave.model.experimental.schema.SchemaPattern: void <init>()>();

        specialinvoke r1.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment: void compileTo(org.waveprotocol.wave.model.experimental.schema.SchemaPattern,org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CompilerState)>($r0, r2);

        return $r0;
    }

    static org.waveprotocol.wave.model.experimental.schema.SchemaPattern compile(java.util.Map, java.lang.String) throws org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException
    {
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$DeferredCompile r20;
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CompilerState $r0;
        java.util.Map r1, $r7;
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment $r12, $r16;
        java.lang.String r6, $r18;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException $r10;
        java.util.Map$Entry r19;
        java.util.Iterator $r3, $r5;
        java.util.Set $r2;
        java.util.List $r4;
        org.waveprotocol.wave.model.experimental.schema.SchemaPattern $r9, $r13;
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$ReferenceData r21;
        java.lang.Object $r8, $r11, $r14, $r15, $r17;

        r1 := @parameter0: java.util.Map;

        r6 := @parameter1: java.lang.String;

        $r0 = new org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CompilerState;

        specialinvoke $r0.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CompilerState: void <init>(java.util.Map)>(r1);

        $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r14 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r19 = (java.util.Map$Entry) $r14;

        $r15 = interfaceinvoke r19.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r16 = (org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment) $r15;

        $r17 = interfaceinvoke r19.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r18 = (java.lang.String) $r17;

        specialinvoke $r16.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$ReferenceData resolveTopLevel(java.lang.String,org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CompilerState)>($r18, $r0);

        goto label1;

     label2:
        $r4 = $r0.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CompilerState: java.util.List deferredCompiles>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r11 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r20 = (org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$DeferredCompile) $r11;

        $r12 = staticinvoke <org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$DeferredCompile: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment access$400(org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$DeferredCompile)>(r20);

        $r13 = staticinvoke <org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$DeferredCompile: org.waveprotocol.wave.model.experimental.schema.SchemaPattern access$300(org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$DeferredCompile)>(r20);

        specialinvoke $r12.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment: void compileTo(org.waveprotocol.wave.model.experimental.schema.SchemaPattern,org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CompilerState)>($r13, $r0);

        goto label3;

     label4:
        $r7 = $r0.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CompilerState: java.util.Map references>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6);

        r21 = (org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$ReferenceData) $r8;

        if r21 != null goto label5;

        $r10 = new org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException;

        specialinvoke $r10.<org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException: void <init>(java.lang.String)>("Root not defined");

        throw $r10;

     label5:
        $r9 = r21.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$ReferenceData: org.waveprotocol.wave.model.experimental.schema.SchemaPattern pattern>;

        return $r9;
    }

    static org.waveprotocol.wave.model.experimental.schema.SchemaPattern access$100(org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment, org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CompilerState) throws org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException
    {
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CompilerState r1;
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment r0;
        org.waveprotocol.wave.model.experimental.schema.SchemaPattern $r2;

        r0 := @parameter0: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment;

        r1 := @parameter1: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CompilerState;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment: org.waveprotocol.wave.model.experimental.schema.SchemaPattern compile(org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CompilerState)>(r1);

        return $r2;
    }

    static org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$ReferenceData access$200(org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment, java.lang.String, org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CompilerState) throws org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException
    {
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CompilerState r2;
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$ReferenceData $r3;
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment r0;
        java.lang.String r1;

        r0 := @parameter0: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CompilerState;

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$ReferenceData resolveTopLevel(java.lang.String,org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment$CompilerState)>(r1, r2);

        return $r3;
    }
}
