public class org.eclipse.jdt.internal.compiler.ast.SuperReference extends org.eclipse.jdt.internal.compiler.ast.ThisReference
{

    public void <init>(int, int)
    {
        int i0, i1;
        org.eclipse.jdt.internal.compiler.ast.SuperReference r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.SuperReference;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.ThisReference: void <init>(int,int)>(i0, i1);

        return;
    }

    public static org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall implicitSuperConstructorCall()
    {
        org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall $r0;

        $r0 = new org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall: void <init>(int)>(1);

        return $r0;
    }

    public boolean isImplicitThis()
    {
        org.eclipse.jdt.internal.compiler.ast.SuperReference r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.SuperReference;

        return 0;
    }

    public boolean isSuper()
    {
        org.eclipse.jdt.internal.compiler.ast.SuperReference r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.SuperReference;

        return 1;
    }

    public boolean isThis()
    {
        org.eclipse.jdt.internal.compiler.ast.SuperReference r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.SuperReference;

        return 0;
    }

    public java.lang.StringBuffer printExpression(int, java.lang.StringBuffer)
    {
        org.eclipse.jdt.internal.compiler.ast.SuperReference r2;
        java.lang.StringBuffer r0, $r1;
        int i0;

        r2 := @this: org.eclipse.jdt.internal.compiler.ast.SuperReference;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.StringBuffer;

        $r1 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("super");

        return $r1;
    }

    public org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding $r4, $r5;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r6;
        org.eclipse.jdt.internal.compiler.lookup.MethodScope $r3;
        org.eclipse.jdt.internal.compiler.impl.Constant $r1;
        org.eclipse.jdt.internal.compiler.ast.SuperReference r0;
        int $i0;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.SuperReference;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        $r1 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        r0.<org.eclipse.jdt.internal.compiler.ast.SuperReference: org.eclipse.jdt.internal.compiler.impl.Constant constant> = $r1;

        $r3 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.lookup.MethodScope methodScope()>();

        $z0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.SuperReference: boolean checkAccess(org.eclipse.jdt.internal.compiler.lookup.MethodScope)>($r3);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r4 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding enclosingReceiverType()>();

        $i0 = $r4.<org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding: int id>;

        if $i0 != 1 goto label2;

        $r6 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void cannotUseSuperInJavaLangObject(org.eclipse.jdt.internal.compiler.ast.ASTNode)>(r0);

        return null;

     label2:
        $r5 = virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding superclass()>();

        r0.<org.eclipse.jdt.internal.compiler.ast.SuperReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType> = $r5;

        return $r5;
    }

    public void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor, org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.ASTVisitor r0;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.ast.SuperReference r1;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.SuperReference;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ASTVisitor;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: boolean visit(org.eclipse.jdt.internal.compiler.ast.SuperReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: void endVisit(org.eclipse.jdt.internal.compiler.ast.SuperReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        return;
    }
}
