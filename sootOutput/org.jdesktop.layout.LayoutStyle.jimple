public class org.jdesktop.layout.LayoutStyle extends java.lang.Object
{
    private static final boolean USE_CORE_LAYOUT_STYLE;
    public static final int RELATED;
    public static final int UNRELATED;
    public static final int INDENT;
    private static org.jdesktop.layout.LayoutStyle layoutStyle;
    private static javax.swing.LookAndFeel laf;
    static final boolean $assertionsDisabled;
    static java.lang.Class class$org$jdesktop$layout$LayoutStyle;

    public void <init>()
    {
        org.jdesktop.layout.LayoutStyle r0;

        r0 := @this: org.jdesktop.layout.LayoutStyle;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void setSharedInstance(org.jdesktop.layout.LayoutStyle)
    {
        javax.swing.UIDefaults $r0;
        org.jdesktop.layout.LayoutStyle r1;

        r1 := @parameter0: org.jdesktop.layout.LayoutStyle;

        $r0 = staticinvoke <javax.swing.UIManager: javax.swing.UIDefaults getLookAndFeelDefaults()>();

        virtualinvoke $r0.<javax.swing.UIDefaults: java.lang.Object put(java.lang.Object,java.lang.Object)>("LayoutStyle.instance", r1);

        return;
    }

    public static org.jdesktop.layout.LayoutStyle getSharedInstance()
    {
        org.jdesktop.layout.AquaLayoutStyle $r6;
        org.jdesktop.layout.GnomeLayoutStyle $r7;
        org.jdesktop.layout.SwingLayoutStyle $r10;
        java.lang.String $r4;
        boolean $z0, $z1;
        org.jdesktop.layout.LayoutStyle $r2, $r5, $r12, $r13;
        javax.swing.LookAndFeel $r1, $r3, $r11;
        org.jdesktop.layout.MetalLayoutStyle $r9;
        org.jdesktop.layout.WindowsLayoutStyle $r8;
        java.lang.Object $r0;

        $r0 = staticinvoke <javax.swing.UIManager: java.lang.Object get(java.lang.Object)>("LayoutStyle.instance");

        if $r0 == null goto label1;

        $z1 = $r0 instanceof org.jdesktop.layout.LayoutStyle;

        if $z1 == 0 goto label1;

        $r12 = (org.jdesktop.layout.LayoutStyle) $r0;

        return $r12;

     label1:
        $r1 = staticinvoke <javax.swing.UIManager: javax.swing.LookAndFeel getLookAndFeel()>();

        $r2 = <org.jdesktop.layout.LayoutStyle: org.jdesktop.layout.LayoutStyle layoutStyle>;

        if $r2 == null goto label2;

        $r11 = <org.jdesktop.layout.LayoutStyle: javax.swing.LookAndFeel laf>;

        if $r1 == $r11 goto label8;

     label2:
        <org.jdesktop.layout.LayoutStyle: javax.swing.LookAndFeel laf> = $r1;

        $r3 = <org.jdesktop.layout.LayoutStyle: javax.swing.LookAndFeel laf>;

        $r4 = virtualinvoke $r3.<javax.swing.LookAndFeel: java.lang.String getID()>();

        $z0 = <org.jdesktop.layout.LayoutStyle: boolean USE_CORE_LAYOUT_STYLE>;

        if $z0 == 0 goto label3;

        $r10 = new org.jdesktop.layout.SwingLayoutStyle;

        specialinvoke $r10.<org.jdesktop.layout.SwingLayoutStyle: void <init>()>();

        <org.jdesktop.layout.LayoutStyle: org.jdesktop.layout.LayoutStyle layoutStyle> = $r10;

        goto label8;

     label3:
        if "Metal" != $r4 goto label4;

        $r9 = new org.jdesktop.layout.MetalLayoutStyle;

        specialinvoke $r9.<org.jdesktop.layout.MetalLayoutStyle: void <init>()>();

        <org.jdesktop.layout.LayoutStyle: org.jdesktop.layout.LayoutStyle layoutStyle> = $r9;

        goto label8;

     label4:
        if "Windows" != $r4 goto label5;

        $r8 = new org.jdesktop.layout.WindowsLayoutStyle;

        specialinvoke $r8.<org.jdesktop.layout.WindowsLayoutStyle: void <init>()>();

        <org.jdesktop.layout.LayoutStyle: org.jdesktop.layout.LayoutStyle layoutStyle> = $r8;

        goto label8;

     label5:
        if "GTK" != $r4 goto label6;

        $r7 = new org.jdesktop.layout.GnomeLayoutStyle;

        specialinvoke $r7.<org.jdesktop.layout.GnomeLayoutStyle: void <init>()>();

        <org.jdesktop.layout.LayoutStyle: org.jdesktop.layout.LayoutStyle layoutStyle> = $r7;

        goto label8;

     label6:
        if "Aqua" != $r4 goto label7;

        $r6 = new org.jdesktop.layout.AquaLayoutStyle;

        specialinvoke $r6.<org.jdesktop.layout.AquaLayoutStyle: void <init>()>();

        <org.jdesktop.layout.LayoutStyle: org.jdesktop.layout.LayoutStyle layoutStyle> = $r6;

        goto label8;

     label7:
        $r5 = new org.jdesktop.layout.LayoutStyle;

        specialinvoke $r5.<org.jdesktop.layout.LayoutStyle: void <init>()>();

        <org.jdesktop.layout.LayoutStyle: org.jdesktop.layout.LayoutStyle layoutStyle> = $r5;

     label8:
        $r13 = <org.jdesktop.layout.LayoutStyle: org.jdesktop.layout.LayoutStyle layoutStyle>;

        return $r13;
    }

    public int getPreferredGap(javax.swing.JComponent, javax.swing.JComponent, int, int, java.awt.Container)
    {
        javax.swing.JComponent r0, r2;
        org.jdesktop.layout.LayoutStyle r4;
        java.lang.IllegalArgumentException $r1, $r3, $r5;
        int i0, i1, $i2;
        java.awt.Container r6;

        r4 := @this: org.jdesktop.layout.LayoutStyle;

        r0 := @parameter0: javax.swing.JComponent;

        r2 := @parameter1: javax.swing.JComponent;

        i1 := @parameter2: int;

        i0 := @parameter3: int;

        r6 := @parameter4: java.awt.Container;

        if i0 == 1 goto label1;

        if i0 == 5 goto label1;

        if i0 == 7 goto label1;

        if i0 == 3 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid position");

        throw $r5;

     label1:
        if r0 == null goto label2;

        if r2 != null goto label3;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Components must be non-null");

        throw $r1;

     label3:
        if i1 != 0 goto label4;

        return 6;

     label4:
        if i1 != 1 goto label5;

        return 12;

     label5:
        if i1 != 3 goto label9;

        if i0 == 3 goto label6;

        if i0 != 7 goto label8;

     label6:
        $i2 = virtualinvoke r4.<org.jdesktop.layout.LayoutStyle: int getButtonChildIndent(javax.swing.JComponent,int)>(r0, i0);

        if $i2 == 0 goto label7;

        return $i2;

     label7:
        return 6;

     label8:
        return 6;

     label9:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid type");

        throw $r3;
    }

    public int getContainerGap(javax.swing.JComponent, int, java.awt.Container)
    {
        javax.swing.JComponent r0;
        int i0;
        org.jdesktop.layout.LayoutStyle r3;
        java.awt.Container r4;
        java.lang.IllegalArgumentException $r1, $r2;

        r3 := @this: org.jdesktop.layout.LayoutStyle;

        r0 := @parameter0: javax.swing.JComponent;

        i0 := @parameter1: int;

        r4 := @parameter2: java.awt.Container;

        if i0 == 1 goto label1;

        if i0 == 5 goto label1;

        if i0 == 7 goto label1;

        if i0 == 3 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid position");

        throw $r2;

     label1:
        if r0 != null goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Component must be non-null");

        throw $r1;

     label2:
        return 12;
    }

    boolean isDialog(javax.swing.JComponent)
    {
        javax.swing.JComponent r0;
        org.jdesktop.layout.LayoutStyle r2;
        java.lang.String $r1;
        boolean $z0, $z1;

        r2 := @this: org.jdesktop.layout.LayoutStyle;

        r0 := @parameter0: javax.swing.JComponent;

        $r1 = virtualinvoke r0.<javax.swing.JComponent: java.lang.String getName()>();

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>(".contentPane");

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    int getCBRBPadding(javax.swing.JComponent, javax.swing.JComponent, int, int)
    {
        javax.swing.JComponent r1, r2;
        org.jdesktop.layout.LayoutStyle r0;
        int i0, $i1, $i2, $i3, i4, i5;

        r0 := @this: org.jdesktop.layout.LayoutStyle;

        r1 := @parameter0: javax.swing.JComponent;

        r2 := @parameter1: javax.swing.JComponent;

        i0 := @parameter2: int;

        i4 := @parameter3: int;

        $i1 = specialinvoke r0.<org.jdesktop.layout.LayoutStyle: int getCBRBPadding(javax.swing.JComponent,int)>(r1, i0);

        i5 = i4 - $i1;

        if i5 <= 0 goto label1;

        $i2 = virtualinvoke r0.<org.jdesktop.layout.LayoutStyle: int flipDirection(int)>(i0);

        $i3 = specialinvoke r0.<org.jdesktop.layout.LayoutStyle: int getCBRBPadding(javax.swing.JComponent,int)>(r2, $i2);

        i5 = i5 - $i3;

     label1:
        if i5 >= 0 goto label2;

        return 0;

     label2:
        return i5;
    }

    int getCBRBPadding(javax.swing.JComponent, int, int)
    {
        javax.swing.JComponent r1;
        int i0, $i1, $i2, i3, i4;
        org.jdesktop.layout.LayoutStyle r0;

        r0 := @this: org.jdesktop.layout.LayoutStyle;

        r1 := @parameter0: javax.swing.JComponent;

        i0 := @parameter1: int;

        i3 := @parameter2: int;

        $i1 = specialinvoke r0.<org.jdesktop.layout.LayoutStyle: int getCBRBPadding(javax.swing.JComponent,int)>(r1, i0);

        i4 = i3 - $i1;

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>(i4, 0);

        return $i2;
    }

    int flipDirection(int)
    {
        int i0;
        org.jdesktop.layout.LayoutStyle r1;
        java.lang.AssertionError $r0;
        boolean $z0;

        r1 := @this: org.jdesktop.layout.LayoutStyle;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label5;
            case 3: goto label3;
            case 4: goto label5;
            case 5: goto label2;
            case 6: goto label5;
            case 7: goto label4;
            default: goto label5;
        };

     label1:
        return 5;

     label2:
        return 1;

     label3:
        return 7;

     label4:
        return 3;

     label5:
        $z0 = <org.jdesktop.layout.LayoutStyle: boolean $assertionsDisabled>;

        if $z0 != 0 goto label6;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label6:
        return 0;
    }

    private int getCBRBPadding(javax.swing.JComponent, int)
    {
        javax.swing.JComponent r0;
        org.jdesktop.layout.LayoutStyle r3;
        javax.swing.border.Border $r2;
        int i0, $i1;
        java.lang.String $r1, $r4;
        boolean $z0;

        r3 := @this: org.jdesktop.layout.LayoutStyle;

        r0 := @parameter0: javax.swing.JComponent;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<javax.swing.JComponent: java.lang.String getUIClassID()>();

        if $r1 == "CheckBoxUI" goto label1;

        $r4 = virtualinvoke r0.<javax.swing.JComponent: java.lang.String getUIClassID()>();

        if $r4 != "RadioButtonUI" goto label2;

     label1:
        $r2 = virtualinvoke r0.<javax.swing.JComponent: javax.swing.border.Border getBorder()>();

        $z0 = $r2 instanceof javax.swing.plaf.UIResource;

        if $z0 == 0 goto label2;

        $i1 = specialinvoke r3.<org.jdesktop.layout.LayoutStyle: int getInset(javax.swing.JComponent,int)>(r0, i0);

        return $i1;

     label2:
        return 0;
    }

    private int getInset(javax.swing.JComponent, int)
    {
        javax.swing.JComponent r0;
        java.awt.Insets $r1;
        org.jdesktop.layout.LayoutStyle r3;
        java.lang.AssertionError $r2;
        int i0, $i1, $i2, $i3, $i4;
        boolean $z0;

        r3 := @this: org.jdesktop.layout.LayoutStyle;

        r0 := @parameter0: javax.swing.JComponent;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<javax.swing.JComponent: java.awt.Insets getInsets()>();

        tableswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label5;
            case 3: goto label3;
            case 4: goto label5;
            case 5: goto label2;
            case 6: goto label5;
            case 7: goto label4;
            default: goto label5;
        };

     label1:
        $i4 = $r1.<java.awt.Insets: int top>;

        return $i4;

     label2:
        $i2 = $r1.<java.awt.Insets: int bottom>;

        return $i2;

     label3:
        $i3 = $r1.<java.awt.Insets: int right>;

        return $i3;

     label4:
        $i1 = $r1.<java.awt.Insets: int left>;

        return $i1;

     label5:
        $z0 = <org.jdesktop.layout.LayoutStyle: boolean $assertionsDisabled>;

        if $z0 != 0 goto label6;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label6:
        return 0;
    }

    private boolean isLeftAligned(javax.swing.AbstractButton, int)
    {
        int i0, $i1;
        org.jdesktop.layout.LayoutStyle r2;
        javax.swing.AbstractButton r0;
        java.awt.ComponentOrientation $r1;
        boolean $z0, $z1;

        r2 := @this: org.jdesktop.layout.LayoutStyle;

        r0 := @parameter0: javax.swing.AbstractButton;

        i0 := @parameter1: int;

        if i0 != 7 goto label5;

        $r1 = virtualinvoke r0.<javax.swing.AbstractButton: java.awt.ComponentOrientation getComponentOrientation()>();

        $z0 = virtualinvoke $r1.<java.awt.ComponentOrientation: boolean isLeftToRight()>();

        $i1 = virtualinvoke r0.<javax.swing.AbstractButton: int getHorizontalAlignment()>();

        if $z0 == 0 goto label1;

        if $i1 == 2 goto label2;

        if $i1 == 10 goto label2;

     label1:
        if $z0 != 0 goto label3;

        if $i1 != 11 goto label3;

     label2:
        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;

     label5:
        return 0;
    }

    private boolean isRightAligned(javax.swing.AbstractButton, int)
    {
        int i0, $i1;
        org.jdesktop.layout.LayoutStyle r2;
        javax.swing.AbstractButton r0;
        java.awt.ComponentOrientation $r1;
        boolean $z0, $z1;

        r2 := @this: org.jdesktop.layout.LayoutStyle;

        r0 := @parameter0: javax.swing.AbstractButton;

        i0 := @parameter1: int;

        if i0 != 3 goto label5;

        $r1 = virtualinvoke r0.<javax.swing.AbstractButton: java.awt.ComponentOrientation getComponentOrientation()>();

        $z0 = virtualinvoke $r1.<java.awt.ComponentOrientation: boolean isLeftToRight()>();

        $i1 = virtualinvoke r0.<javax.swing.AbstractButton: int getHorizontalAlignment()>();

        if $z0 == 0 goto label1;

        if $i1 == 4 goto label2;

        if $i1 == 11 goto label2;

     label1:
        if $z0 != 0 goto label3;

        if $i1 != 10 goto label3;

     label2:
        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;

     label5:
        return 0;
    }

    private javax.swing.Icon getIcon(javax.swing.AbstractButton)
    {
        org.jdesktop.layout.LayoutStyle r4;
        javax.swing.Icon $r1, $r3;
        java.lang.Object $r2;
        javax.swing.AbstractButton r0;
        java.lang.String r5, r6, r7;
        boolean $z0, $z1, $z2;

        r4 := @this: org.jdesktop.layout.LayoutStyle;

        r0 := @parameter0: javax.swing.AbstractButton;

        $r1 = virtualinvoke r0.<javax.swing.AbstractButton: javax.swing.Icon getIcon()>();

        if $r1 == null goto label1;

        return $r1;

     label1:
        r5 = null;

        r7 = null;

        r6 = null;

        $z0 = r0 instanceof javax.swing.JCheckBox;

        if $z0 == 0 goto label2;

        r5 = "CheckBox.icon";

        r7 = "CheckBox.icon";

        r6 = "CheckBox.icon";

        goto label3;

     label2:
        $z1 = r0 instanceof javax.swing.JRadioButton;

        if $z1 == 0 goto label3;

        r5 = "RadioButton.icon";

        r7 = "RadioButton.icon";

        r6 = "RadioButton.icon";

     label3:
        if r6 == null goto label4;

        $r2 = staticinvoke <javax.swing.UIManager: java.lang.Object get(java.lang.Object)>(r7);

        $z2 = $r2 instanceof javax.swing.Icon;

        if $z2 == 0 goto label4;

        $r3 = (javax.swing.Icon) $r2;

        return $r3;

     label4:
        return null;
    }

    int getButtonChildIndent(javax.swing.JComponent, int)
    {
        java.awt.Insets $r1;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        javax.swing.AbstractButton $r4;
        boolean $z0, $z1, $z2, $z3;
        javax.swing.JComponent r0;
        org.jdesktop.layout.LayoutStyle r2;
        javax.swing.Icon $r3;

        r2 := @this: org.jdesktop.layout.LayoutStyle;

        r0 := @parameter0: javax.swing.JComponent;

        i1 := @parameter1: int;

        $z0 = r0 instanceof javax.swing.JRadioButton;

        if $z0 != 0 goto label1;

        $z3 = r0 instanceof javax.swing.JCheckBox;

        if $z3 == 0 goto label3;

     label1:
        $r4 = (javax.swing.AbstractButton) r0;

        $r1 = virtualinvoke r0.<javax.swing.JComponent: java.awt.Insets getInsets()>();

        $r3 = specialinvoke r2.<org.jdesktop.layout.LayoutStyle: javax.swing.Icon getIcon(javax.swing.AbstractButton)>($r4);

        $i0 = virtualinvoke $r4.<javax.swing.AbstractButton: int getIconTextGap()>();

        $z1 = specialinvoke r2.<org.jdesktop.layout.LayoutStyle: boolean isLeftAligned(javax.swing.AbstractButton,int)>($r4, i1);

        if $z1 == 0 goto label2;

        $i6 = $r1.<java.awt.Insets: int left>;

        $i7 = interfaceinvoke $r3.<javax.swing.Icon: int getIconWidth()>();

        $i8 = $i6 + $i7;

        $i9 = $i8 + $i0;

        return $i9;

     label2:
        $z2 = specialinvoke r2.<org.jdesktop.layout.LayoutStyle: boolean isRightAligned(javax.swing.AbstractButton,int)>($r4, i1);

        if $z2 == 0 goto label3;

        $i2 = $r1.<java.awt.Insets: int right>;

        $i3 = interfaceinvoke $r3.<javax.swing.Icon: int getIconWidth()>();

        $i4 = $i2 + $i3;

        $i5 = $i4 + $i0;

        return $i5;

     label3:
        return 0;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r2;
        java.lang.ClassNotFoundException $r1;
        boolean $z0, $z1, z2;

        <org.jdesktop.layout.LayoutStyle: int INDENT> = 3;

        <org.jdesktop.layout.LayoutStyle: int UNRELATED> = 1;

        <org.jdesktop.layout.LayoutStyle: int RELATED> = 0;

        $r0 = <org.jdesktop.layout.LayoutStyle: java.lang.Class class$org$jdesktop$layout$LayoutStyle>;

        if $r0 != null goto label1;

        $r2 = staticinvoke <org.jdesktop.layout.LayoutStyle: java.lang.Class class$(java.lang.String)>("org.jdesktop.layout.LayoutStyle");

        <org.jdesktop.layout.LayoutStyle: java.lang.Class class$org$jdesktop$layout$LayoutStyle> = $r2;

        goto label2;

     label1:
        $r2 = <org.jdesktop.layout.LayoutStyle: java.lang.Class class$org$jdesktop$layout$LayoutStyle>;

     label2:
        $z0 = virtualinvoke $r2.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        <org.jdesktop.layout.LayoutStyle: boolean $assertionsDisabled> = $z1;

        z2 = 0;

     label5:
        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("javax.swing.LayoutStyle");

        z2 = 1;

     label6:
        goto label8;

     label7:
        $r1 := @caughtexception;

     label8:
        <org.jdesktop.layout.LayoutStyle: boolean USE_CORE_LAYOUT_STYLE> = z2;

        return;

        catch java.lang.ClassNotFoundException from label5 to label6 with label7;
    }
}
