public class org.apache.pdfbox.pdfparser.PDFObjectStreamParser extends org.apache.pdfbox.pdfparser.BaseParser
{
    private static final org.apache.commons.logging.Log LOG;
    private java.util.List streamObjects;
    private java.util.List objectNumbers;
    private org.apache.pdfbox.cos.COSStream stream;

    public void <init>(org.apache.pdfbox.cos.COSStream, org.apache.pdfbox.cos.COSDocument, boolean) throws java.io.IOException
    {
        org.apache.pdfbox.cos.COSDocument r3;
        org.apache.pdfbox.pdfparser.PDFObjectStreamParser r0;
        org.apache.pdfbox.cos.COSStream r1;
        java.io.InputStream $r2;
        boolean z0;

        r0 := @this: org.apache.pdfbox.pdfparser.PDFObjectStreamParser;

        r1 := @parameter0: org.apache.pdfbox.cos.COSStream;

        r3 := @parameter1: org.apache.pdfbox.cos.COSDocument;

        z0 := @parameter2: boolean;

        $r2 = virtualinvoke r1.<org.apache.pdfbox.cos.COSStream: java.io.InputStream getUnfilteredStream()>();

        specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void <init>(java.io.InputStream,boolean)>($r2, z0);

        r0.<org.apache.pdfbox.pdfparser.PDFObjectStreamParser: java.util.List streamObjects> = null;

        r0.<org.apache.pdfbox.pdfparser.PDFObjectStreamParser: java.util.List objectNumbers> = null;

        virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFObjectStreamParser: void setDocument(org.apache.pdfbox.cos.COSDocument)>(r3);

        r0.<org.apache.pdfbox.pdfparser.PDFObjectStreamParser: org.apache.pdfbox.cos.COSStream stream> = r1;

        return;
    }

    public void <init>(org.apache.pdfbox.cos.COSStream, org.apache.pdfbox.cos.COSDocument) throws java.io.IOException
    {
        org.apache.pdfbox.cos.COSDocument r2;
        org.apache.pdfbox.pdfparser.PDFObjectStreamParser r0;
        org.apache.pdfbox.cos.COSStream r1;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdfparser.PDFObjectStreamParser;

        r1 := @parameter0: org.apache.pdfbox.cos.COSStream;

        r2 := @parameter1: org.apache.pdfbox.cos.COSDocument;

        $z0 = <org.apache.pdfbox.pdfparser.PDFObjectStreamParser: boolean FORCE_PARSING>;

        specialinvoke r0.<org.apache.pdfbox.pdfparser.PDFObjectStreamParser: void <init>(org.apache.pdfbox.cos.COSStream,org.apache.pdfbox.cos.COSDocument,boolean)>(r1, r2, $z0);

        return;
    }

    public void parse() throws java.io.IOException
    {
        java.lang.Throwable $r21;
        org.apache.pdfbox.cos.COSObject $r6;
        long $l2, $l3;
        java.util.ArrayList $r2, $r3;
        org.apache.pdfbox.pdfparser.PDFObjectStreamParser r0;
        org.apache.pdfbox.cos.COSInteger $r7, $r11;
        java.lang.Long $r10, $r19;
        int $i0, $i1, i4, i5;
        java.lang.String $r18;
        org.apache.pdfbox.cos.COSStream $r1;
        boolean $z0;
        org.apache.pdfbox.io.PushBackInputStream $r5, $r22;
        java.util.List $r8, $r12, $r20;
        org.apache.pdfbox.cos.COSBase $r4;
        java.lang.Object $r9;
        org.apache.commons.logging.Log $r13, $r15;
        java.lang.StringBuilder $r14, $r16, $r17;

        r0 := @this: org.apache.pdfbox.pdfparser.PDFObjectStreamParser;

     label1:
        $r1 = r0.<org.apache.pdfbox.pdfparser.PDFObjectStreamParser: org.apache.pdfbox.cos.COSStream stream>;

        $i0 = virtualinvoke $r1.<org.apache.pdfbox.cos.COSStream: int getInt(java.lang.String)>("N");

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i0);

        r0.<org.apache.pdfbox.pdfparser.PDFObjectStreamParser: java.util.List objectNumbers> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>($i0);

        r0.<org.apache.pdfbox.pdfparser.PDFObjectStreamParser: java.util.List streamObjects> = $r3;

        i4 = 0;

     label2:
        if i4 >= $i0 goto label3;

        $l3 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFObjectStreamParser: long readObjectNumber()>();

        virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFObjectStreamParser: long readLong()>();

        $r20 = r0.<org.apache.pdfbox.pdfparser.PDFObjectStreamParser: java.util.List objectNumbers>;

        $r19 = new java.lang.Long;

        specialinvoke $r19.<java.lang.Long: void <init>(long)>($l3);

        interfaceinvoke $r20.<java.util.List: boolean add(java.lang.Object)>($r19);

        i4 = i4 + 1;

        goto label2;

     label3:
        i5 = 0;

     label4:
        $r4 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFObjectStreamParser: org.apache.pdfbox.cos.COSBase parseDirObject()>();

        if $r4 == null goto label6;

        $r6 = new org.apache.pdfbox.cos.COSObject;

        specialinvoke $r6.<org.apache.pdfbox.cos.COSObject: void <init>(org.apache.pdfbox.cos.COSBase)>($r4);

        $r7 = <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger ZERO>;

        virtualinvoke $r6.<org.apache.pdfbox.cos.COSObject: void setGenerationNumber(org.apache.pdfbox.cos.COSInteger)>($r7);

        $r8 = r0.<org.apache.pdfbox.pdfparser.PDFObjectStreamParser: java.util.List objectNumbers>;

        $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(i5);

        $r10 = (java.lang.Long) $r9;

        $i1 = virtualinvoke $r10.<java.lang.Long: int intValue()>();

        $l2 = (long) $i1;

        $r11 = staticinvoke <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger get(long)>($l2);

        virtualinvoke $r6.<org.apache.pdfbox.cos.COSObject: void setObjectNumber(org.apache.pdfbox.cos.COSInteger)>($r11);

        $r12 = r0.<org.apache.pdfbox.pdfparser.PDFObjectStreamParser: java.util.List streamObjects>;

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r6);

        $r13 = <org.apache.pdfbox.pdfparser.PDFObjectStreamParser: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r13.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label5;

        $r15 = <org.apache.pdfbox.pdfparser.PDFObjectStreamParser: org.apache.commons.logging.Log LOG>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("parsed=");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r15.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r18);

     label5:
        i5 = i5 + 1;

        goto label4;

     label6:
        $r5 = r0.<org.apache.pdfbox.pdfparser.PDFObjectStreamParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        virtualinvoke $r5.<org.apache.pdfbox.io.PushBackInputStream: void close()>();

        goto label9;

     label7:
        $r21 := @caughtexception;

     label8:
        $r22 = r0.<org.apache.pdfbox.pdfparser.PDFObjectStreamParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        virtualinvoke $r22.<org.apache.pdfbox.io.PushBackInputStream: void close()>();

        throw $r21;

     label9:
        return;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public java.util.List getObjects()
    {
        org.apache.pdfbox.pdfparser.PDFObjectStreamParser r0;
        java.util.List $r1;

        r0 := @this: org.apache.pdfbox.pdfparser.PDFObjectStreamParser;

        $r1 = r0.<org.apache.pdfbox.pdfparser.PDFObjectStreamParser: java.util.List streamObjects>;

        return $r1;
    }

    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/apache/pdfbox/pdfparser/PDFObjectStreamParser;");

        <org.apache.pdfbox.pdfparser.PDFObjectStreamParser: org.apache.commons.logging.Log LOG> = $r0;

        return;
    }
}
