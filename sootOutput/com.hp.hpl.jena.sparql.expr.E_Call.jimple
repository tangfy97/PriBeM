public class com.hp.hpl.jena.sparql.expr.E_Call extends com.hp.hpl.jena.sparql.expr.ExprFunctionN
{
    private static final java.lang.String symbol;
    private java.util.Map functionCache;
    private com.hp.hpl.jena.sparql.expr.Expr identExpr;
    private java.util.List argExprs;

    public void <init>(com.hp.hpl.jena.sparql.expr.ExprList)
    {
        com.hp.hpl.jena.sparql.expr.ExprList r1;
        com.hp.hpl.jena.sparql.expr.E_Call r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.E_Call;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprList;

        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.E_Call: void <init>(java.lang.String,com.hp.hpl.jena.sparql.expr.ExprList)>("call", r1);

        return;
    }

    protected void <init>(java.lang.String, com.hp.hpl.jena.sparql.expr.ExprList)
    {
        java.util.HashMap $r3;
        java.util.List $r5, $r6;
        com.hp.hpl.jena.sparql.expr.Expr $r4;
        com.hp.hpl.jena.sparql.expr.ExprList r2;
        com.hp.hpl.jena.sparql.expr.E_Call r0;
        int $i0, $i1;
        java.lang.String r1;

        r0 := @this: com.hp.hpl.jena.sparql.expr.E_Call;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.ExprList;

        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprFunctionN: void <init>(java.lang.String,com.hp.hpl.jena.sparql.expr.ExprList)>(r1, r2);

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.expr.E_Call: java.util.Map functionCache> = $r3;

        $i0 = virtualinvoke r2.<com.hp.hpl.jena.sparql.expr.ExprList: int size()>();

        if $i0 != 0 goto label1;

        r0.<com.hp.hpl.jena.sparql.expr.E_Call: com.hp.hpl.jena.sparql.expr.Expr identExpr> = null;

        goto label2;

     label1:
        $r4 = virtualinvoke r2.<com.hp.hpl.jena.sparql.expr.ExprList: com.hp.hpl.jena.sparql.expr.Expr get(int)>(0);

        r0.<com.hp.hpl.jena.sparql.expr.E_Call: com.hp.hpl.jena.sparql.expr.Expr identExpr> = $r4;

        $r5 = virtualinvoke r2.<com.hp.hpl.jena.sparql.expr.ExprList: java.util.List getList()>();

        $i1 = virtualinvoke r2.<com.hp.hpl.jena.sparql.expr.ExprList: int size()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.List subList(int,int)>(1, $i1);

        r0.<com.hp.hpl.jena.sparql.expr.E_Call: java.util.List argExprs> = $r6;

     label2:
        return;
    }

    public com.hp.hpl.jena.sparql.expr.NodeValue evalSpecial(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.function.FunctionEnv)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r5, $r12;
        com.hp.hpl.jena.graph.Node $r7, $r16;
        com.hp.hpl.jena.sparql.expr.Expr $r1, $r4, $r11;
        com.hp.hpl.jena.sparql.expr.ExprEvalException $r6, $r13, $r21, $r22;
        com.hp.hpl.jena.sparql.expr.E_Call r0;
        java.lang.String $r8, $r17, $r20;
        boolean $z0;
        com.hp.hpl.jena.sparql.util.Context $r10;
        com.hp.hpl.jena.sparql.engine.binding.Binding r2;
        java.util.List $r9;
        java.lang.StringBuilder $r14, $r15, $r18, $r19;
        com.hp.hpl.jena.sparql.function.FunctionEnv r3;

        r0 := @this: com.hp.hpl.jena.sparql.expr.E_Call;

        r2 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r3 := @parameter1: com.hp.hpl.jena.sparql.function.FunctionEnv;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.E_Call: com.hp.hpl.jena.sparql.expr.Expr identExpr>;

        if $r1 != null goto label1;

        $r22 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        specialinvoke $r22.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>("CALL() has no arguments");

        throw $r22;

     label1:
        $r4 = r0.<com.hp.hpl.jena.sparql.expr.E_Call: com.hp.hpl.jena.sparql.expr.Expr identExpr>;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.function.FunctionEnv)>(r2, r3);

        if $r5 != null goto label2;

        $r21 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        specialinvoke $r21.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>("CALL: Function identifier unbound");

        throw $r21;

     label2:
        $z0 = virtualinvoke $r5.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isIRI()>();

        if $z0 == 0 goto label4;

        $r7 = virtualinvoke $r5.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node getNode()>();

        $r8 = virtualinvoke $r7.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        $r9 = r0.<com.hp.hpl.jena.sparql.expr.E_Call: java.util.List argExprs>;

        $r10 = interfaceinvoke r3.<com.hp.hpl.jena.sparql.function.FunctionEnv: com.hp.hpl.jena.sparql.util.Context getContext()>();

        $r11 = specialinvoke r0.<com.hp.hpl.jena.sparql.expr.E_Call: com.hp.hpl.jena.sparql.expr.Expr buildFunction(java.lang.String,java.util.List,com.hp.hpl.jena.sparql.util.Context)>($r8, $r9, $r10);

        if $r11 != null goto label3;

        $r13 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CALL: Function identifier <");

        $r16 = virtualinvoke $r5.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node getNode()>();

        $r17 = virtualinvoke $r16.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> does not identify a known function");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>($r20);

        throw $r13;

     label3:
        $r12 = interfaceinvoke $r11.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.function.FunctionEnv)>(r2, r3);

        return $r12;

     label4:
        $r6 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>("CALL: Function identifier not an IRI");

        throw $r6;
    }

    protected com.hp.hpl.jena.sparql.expr.Expr copy(com.hp.hpl.jena.sparql.expr.ExprList)
    {
        com.hp.hpl.jena.sparql.expr.ExprList r1;
        com.hp.hpl.jena.sparql.expr.E_Call $r0, r2;

        r2 := @this: com.hp.hpl.jena.sparql.expr.E_Call;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprList;

        $r0 = new com.hp.hpl.jena.sparql.expr.E_Call;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.E_Call: void <init>(com.hp.hpl.jena.sparql.expr.ExprList)>(r1);

        return $r0;
    }

    public com.hp.hpl.jena.sparql.expr.NodeValue eval(java.util.List, com.hp.hpl.jena.sparql.function.FunctionEnv)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r2, $r9;
        com.hp.hpl.jena.graph.Node $r6;
        com.hp.hpl.jena.sparql.expr.Expr $r11;
        com.hp.hpl.jena.sparql.expr.ExprList $r4;
        com.hp.hpl.jena.sparql.expr.ExprEvalException $r3, $r12;
        com.hp.hpl.jena.sparql.expr.E_Call r13;
        int $i0, i1;
        java.lang.String $r7;
        boolean $z0;
        java.util.List r0;
        com.hp.hpl.jena.sparql.expr.E_Function $r5;
        java.lang.Object $r1, $r10;
        com.hp.hpl.jena.sparql.function.FunctionEnv r8;

        r13 := @this: com.hp.hpl.jena.sparql.expr.E_Call;

        r0 := @parameter0: java.util.List;

        r8 := @parameter1: com.hp.hpl.jena.sparql.function.FunctionEnv;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        r2 = (com.hp.hpl.jena.sparql.expr.NodeValue) $r1;

        if r2 != null goto label1;

        $r12 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        specialinvoke $r12.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>("CALL: Function identifier unbound");

        throw $r12;

     label1:
        $z0 = virtualinvoke r2.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isIRI()>();

        if $z0 == 0 goto label4;

        $r4 = new com.hp.hpl.jena.sparql.expr.ExprList;

        specialinvoke $r4.<com.hp.hpl.jena.sparql.expr.ExprList: void <init>()>();

        i1 = 1;

     label2:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if i1 >= $i0 goto label3;

        $r10 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1);

        $r11 = (com.hp.hpl.jena.sparql.expr.Expr) $r10;

        virtualinvoke $r4.<com.hp.hpl.jena.sparql.expr.ExprList: void add(com.hp.hpl.jena.sparql.expr.Expr)>($r11);

        i1 = i1 + 1;

        goto label2;

     label3:
        $r5 = new com.hp.hpl.jena.sparql.expr.E_Function;

        $r6 = virtualinvoke r2.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node getNode()>();

        $r7 = virtualinvoke $r6.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        specialinvoke $r5.<com.hp.hpl.jena.sparql.expr.E_Function: void <init>(java.lang.String,com.hp.hpl.jena.sparql.expr.ExprList)>($r7, $r4);

        $r9 = interfaceinvoke $r5.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.function.FunctionEnv)>(null, r8);

        return $r9;

     label4:
        $r3 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        specialinvoke $r3.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>("CALL: Function identifier not an IRI");

        throw $r3;
    }

    protected com.hp.hpl.jena.sparql.expr.NodeValue eval(java.util.List)
    {
        java.util.List r2;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r0;
        com.hp.hpl.jena.sparql.expr.E_Call r1;

        r1 := @this: com.hp.hpl.jena.sparql.expr.E_Call;

        r2 := @parameter0: java.util.List;

        $r0 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>()>();

        throw $r0;
    }

    private com.hp.hpl.jena.sparql.expr.Expr buildFunction(java.lang.String, java.util.List, com.hp.hpl.jena.sparql.util.Context)
    {
        java.lang.Throwable $r11;
        com.hp.hpl.jena.sparql.util.Context r6;
        java.util.List r5;
        com.hp.hpl.jena.sparql.expr.E_Function $r3;
        com.hp.hpl.jena.sparql.expr.Expr $r10;
        com.hp.hpl.jena.sparql.expr.ExprList $r4;
        com.hp.hpl.jena.sparql.expr.E_Call r0;
        java.util.Map $r2, $r7, $r8, $r12;
        java.lang.Object $r9;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.E_Call;

        r1 := @parameter0: java.lang.String;

        r5 := @parameter1: java.util.List;

        r6 := @parameter2: com.hp.hpl.jena.sparql.util.Context;

        $r2 = r0.<com.hp.hpl.jena.sparql.expr.E_Call: java.util.Map functionCache>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r8 = r0.<com.hp.hpl.jena.sparql.expr.E_Call: java.util.Map functionCache>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r10 = (com.hp.hpl.jena.sparql.expr.Expr) $r9;

        return $r10;

     label1:
        $r3 = new com.hp.hpl.jena.sparql.expr.E_Function;

        $r4 = new com.hp.hpl.jena.sparql.expr.ExprList;

        specialinvoke $r4.<com.hp.hpl.jena.sparql.expr.ExprList: void <init>(java.util.List)>(r5);

        specialinvoke $r3.<com.hp.hpl.jena.sparql.expr.E_Function: void <init>(java.lang.String,com.hp.hpl.jena.sparql.expr.ExprList)>(r1, $r4);

        virtualinvoke $r3.<com.hp.hpl.jena.sparql.expr.E_Function: void buildFunction(com.hp.hpl.jena.sparql.util.Context)>(r6);

        $r7 = r0.<com.hp.hpl.jena.sparql.expr.E_Call: java.util.Map functionCache>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3);

     label2:
        return $r3;

     label3:
        $r11 := @caughtexception;

        $r12 = r0.<com.hp.hpl.jena.sparql.expr.E_Call: java.util.Map functionCache>;

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, null);

        return null;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <com.hp.hpl.jena.sparql.expr.E_Call: java.lang.String symbol> = "call";

        return;
    }
}
