class org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1 extends java.io.InputStream
{
    private boolean isInitialized;
    private javax.crypto.CipherInputStream cipherInputStream;
    final org.apache.commons.compress.archivers.sevenz.Coder val$coder;
    final byte[] val$passwordBytes;
    final java.io.InputStream val$in;
    final org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder this$0;

    void <init>(org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder, org.apache.commons.compress.archivers.sevenz.Coder, byte[], java.io.InputStream)
    {
        org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1 r0;
        byte[] r3;
        org.apache.commons.compress.archivers.sevenz.Coder r2;
        org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder r1;
        java.io.InputStream r4;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1;

        r1 := @parameter0: org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder;

        r2 := @parameter1: org.apache.commons.compress.archivers.sevenz.Coder;

        r3 := @parameter2: byte[];

        r4 := @parameter3: java.io.InputStream;

        r0.<org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1: org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder this$0> = r1;

        r0.<org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1: org.apache.commons.compress.archivers.sevenz.Coder val$coder> = r2;

        r0.<org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1: byte[] val$passwordBytes> = r3;

        r0.<org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1: java.io.InputStream val$in> = r4;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1: boolean isInitialized> = 0;

        r0.<org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1: javax.crypto.CipherInputStream cipherInputStream> = null;

        return;
    }

    private javax.crypto.CipherInputStream init() throws java.io.IOException
    {
        byte[] $r2, $r4, $r6, r7, $r9, r10, $r12, $r13, $r21, $r22, $r23, r31, r32;
        javax.crypto.spec.SecretKeySpec $r36;
        java.security.GeneralSecurityException $r27;
        byte $b0, $b3, $b18, $b20, $b22, $b23;
        org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1 r0;
        java.security.NoSuchAlgorithmException $r29;
        long $l17, l28;
        short s1, s2, s4, $s6, $s30, $s31;
        javax.crypto.spec.IvParameterSpec $r37;
        java.io.IOException $r33, $r34, $r35, $r39;
        boolean $z0;
        org.apache.commons.compress.archivers.sevenz.Coder $r1, $r3, $r5, $r8, $r11;
        java.security.MessageDigest $r14;
        javax.crypto.Cipher $r16;
        javax.crypto.CipherInputStream $r20, $r26, $r38;
        int $i5, $i7, i8, $i9, $i10, $i11, i12, $i13, $i14, $i15, $i16, $i19, $i21, $i24, $i25, $i26, $i27, i29, $i32, $i33, $i34, $i35, $i36, $i37, $i38;
        java.io.InputStream $r19;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1;

        $z0 = r0.<org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1: boolean isInitialized>;

        if $z0 == 0 goto label01;

        $r26 = r0.<org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1: javax.crypto.CipherInputStream cipherInputStream>;

        return $r26;

     label01:
        $r1 = r0.<org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1: org.apache.commons.compress.archivers.sevenz.Coder val$coder>;

        $r2 = $r1.<org.apache.commons.compress.archivers.sevenz.Coder: byte[] properties>;

        $b0 = $r2[0];

        $s30 = (short) $b0;

        s1 = 255 & $s30;

        s2 = s1 & 63;

        $r3 = r0.<org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1: org.apache.commons.compress.archivers.sevenz.Coder val$coder>;

        $r4 = $r3.<org.apache.commons.compress.archivers.sevenz.Coder: byte[] properties>;

        $b3 = $r4[1];

        $s31 = (short) $b3;

        s4 = 255 & $s31;

        $i32 = (int) s1;

        $i5 = $i32 >> 6;

        $i7 = $i5 & 1;

        $s6 = s4 & 15;

        $i33 = (int) $s6;

        i8 = $i7 + $i33;

        $i34 = (int) s1;

        $i9 = $i34 >> 7;

        $i11 = $i9 & 1;

        $i35 = (int) s4;

        $i10 = $i35 >> 4;

        i12 = $i11 + $i10;

        $i13 = 2 + i12;

        $i15 = $i13 + i8;

        $r5 = r0.<org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1: org.apache.commons.compress.archivers.sevenz.Coder val$coder>;

        $r6 = $r5.<org.apache.commons.compress.archivers.sevenz.Coder: byte[] properties>;

        $i14 = lengthof $r6;

        if $i15 <= $i14 goto label02;

        $r33 = new java.io.IOException;

        specialinvoke $r33.<java.io.IOException: void <init>(java.lang.String)>("Salt size + IV size too long");

        throw $r33;

     label02:
        r7 = newarray (byte)[i12];

        $r8 = r0.<org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1: org.apache.commons.compress.archivers.sevenz.Coder val$coder>;

        $r9 = $r8.<org.apache.commons.compress.archivers.sevenz.Coder: byte[] properties>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 2, r7, 0, i12);

        r10 = newarray (byte)[16];

        $r11 = r0.<org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1: org.apache.commons.compress.archivers.sevenz.Coder val$coder>;

        $r12 = $r11.<org.apache.commons.compress.archivers.sevenz.Coder: byte[] properties>;

        $i16 = 2 + i12;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, $i16, r10, 0, i8);

        $r13 = r0.<org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1: byte[] val$passwordBytes>;

        if $r13 != null goto label03;

        $r34 = new java.io.IOException;

        specialinvoke $r34.<java.io.IOException: void <init>(java.lang.String)>("Cannot read encrypted files without a password");

        throw $r34;

     label03:
        $i36 = (int) s2;

        if $i36 != 63 goto label04;

        r31 = newarray (byte)[32];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r7, 0, r31, 0, i12);

        $r23 = r0.<org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1: byte[] val$passwordBytes>;

        $r22 = r0.<org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1: byte[] val$passwordBytes>;

        $i26 = lengthof $r22;

        $i24 = lengthof r31;

        $i25 = $i24 - i12;

        $i27 = staticinvoke <java.lang.Math: int min(int,int)>($i26, $i25);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r23, 0, r31, i12, $i27);

        goto label13;

     label04:
        $r14 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-256");

     label05:
        goto label07;

     label06:
        $r29 := @caughtexception;

        $r35 = new java.io.IOException;

        specialinvoke $r35.<java.io.IOException: void <init>(java.lang.String)>("SHA-256 is unsupported by your Java implementation");

        virtualinvoke $r35.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>($r29);

        throw $r35;

     label07:
        r32 = newarray (byte)[8];

        l28 = 0L;

     label08:
        $l17 = 1L << s2;

        $b18 = l28 cmp $l17;

        $i37 = (int) $b18;

        if $i37 >= 0 goto label12;

        virtualinvoke $r14.<java.security.MessageDigest: void update(byte[])>(r7);

        $r21 = r0.<org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1: byte[] val$passwordBytes>;

        virtualinvoke $r14.<java.security.MessageDigest: void update(byte[])>($r21);

        virtualinvoke $r14.<java.security.MessageDigest: void update(byte[])>(r32);

        i29 = 0;

     label09:
        $i19 = lengthof r32;

        if i29 >= $i19 goto label11;

        $b20 = r32[i29];

        $i38 = (int) $b20;

        $i21 = $i38 + 1;

        $b22 = (byte) $i21;

        r32[i29] = $b22;

        $b23 = r32[i29];

        if $b23 == 0 goto label10;

        goto label11;

     label10:
        i29 = i29 + 1;

        goto label09;

     label11:
        l28 = l28 + 1L;

        goto label08;

     label12:
        r31 = virtualinvoke $r14.<java.security.MessageDigest: byte[] digest()>();

     label13:
        $r36 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r36.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r31, "AES");

     label14:
        $r16 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/CBC/NoPadding");

        $r37 = new javax.crypto.spec.IvParameterSpec;

        specialinvoke $r37.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r10);

        virtualinvoke $r16.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(2, $r36, $r37);

        $r38 = new javax.crypto.CipherInputStream;

        $r19 = r0.<org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1: java.io.InputStream val$in>;

        specialinvoke $r38.<javax.crypto.CipherInputStream: void <init>(java.io.InputStream,javax.crypto.Cipher)>($r19, $r16);

        r0.<org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1: javax.crypto.CipherInputStream cipherInputStream> = $r38;

        r0.<org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1: boolean isInitialized> = 1;

        $r20 = r0.<org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1: javax.crypto.CipherInputStream cipherInputStream>;

     label15:
        return $r20;

     label16:
        $r27 := @caughtexception;

        $r39 = new java.io.IOException;

        specialinvoke $r39.<java.io.IOException: void <init>(java.lang.String)>("Decryption error (do you have the JCE Unlimited Strength Jurisdiction Policy Files installed?)");

        virtualinvoke $r39.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>($r27);

        throw $r39;

        catch java.security.NoSuchAlgorithmException from label04 to label05 with label06;
        catch java.security.GeneralSecurityException from label14 to label15 with label16;
    }

    public int read() throws java.io.IOException
    {
        javax.crypto.CipherInputStream $r1;
        int $i0;
        org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1 r0;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1;

        $r1 = specialinvoke r0.<org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1: javax.crypto.CipherInputStream init()>();

        $i0 = virtualinvoke $r1.<javax.crypto.CipherInputStream: int read()>();

        return $i0;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        javax.crypto.CipherInputStream $r1;
        org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1 r0;
        byte[] r2;
        int i0, i1, $i2;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1;

        r2 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = specialinvoke r0.<org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1: javax.crypto.CipherInputStream init()>();

        $i2 = virtualinvoke $r1.<javax.crypto.CipherInputStream: int read(byte[],int,int)>(r2, i0, i1);

        return $i2;
    }

    public void close()
    {
        org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1 r0;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1;

        return;
    }
}
