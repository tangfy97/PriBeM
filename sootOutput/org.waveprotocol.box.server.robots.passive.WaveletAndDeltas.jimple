public class org.waveprotocol.box.server.robots.passive.WaveletAndDeltas extends java.lang.Object
{
    private final org.waveprotocol.wave.model.wave.data.ReadableWaveletData snapshotBeforeDeltas;
    private org.waveprotocol.box.common.DeltaSequence deltas;
    private org.waveprotocol.wave.model.wave.data.ObservableWaveletData snapshotAfterDeltas;
    private final org.waveprotocol.wave.model.id.WaveletName waveletName;

    public static org.waveprotocol.box.server.robots.passive.WaveletAndDeltas create(org.waveprotocol.wave.model.wave.data.ReadableWaveletData, org.waveprotocol.box.common.DeltaSequence) throws org.waveprotocol.wave.model.operation.OperationException
    {
        java.lang.Object[] $r3;
        org.waveprotocol.box.server.robots.passive.WaveletAndDeltas $r8;
        long $l0, $l1, $l3;
        org.waveprotocol.box.common.DeltaSequence r0;
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData r2;
        byte $b2;
        java.lang.Long $r4;
        org.waveprotocol.wave.model.version.HashedVersion r1, $r9;
        java.lang.String $r5;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData $r6, $r7;

        r2 := @parameter0: org.waveprotocol.wave.model.wave.data.ReadableWaveletData;

        r0 := @parameter1: org.waveprotocol.box.common.DeltaSequence;

        $z0 = virtualinvoke r0.<org.waveprotocol.box.common.DeltaSequence: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r9 = interfaceinvoke r2.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: org.waveprotocol.wave.model.version.HashedVersion getHashedVersion()>();

        goto label2;

     label1:
        $r9 = virtualinvoke r0.<org.waveprotocol.box.common.DeltaSequence: org.waveprotocol.wave.model.version.HashedVersion getEndVersion()>();

     label2:
        r1 = $r9;

        $l0 = interfaceinvoke r2.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: long getVersion()>();

        $l1 = virtualinvoke $r9.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        $r3 = newarray (java.lang.Object)[2];

        $l3 = interfaceinvoke r2.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: long getVersion()>();

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        $r3[0] = $r4;

        $r3[1] = r1;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Version of snapshot %s doesn\'t match the end version %s", $r3);

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, $r5);

        $r6 = staticinvoke <org.waveprotocol.box.server.util.WaveletDataUtil: org.waveprotocol.wave.model.wave.data.ObservableWaveletData copyWavelet(org.waveprotocol.wave.model.wave.data.ReadableWaveletData)>(r2);

        staticinvoke <org.waveprotocol.box.server.robots.passive.WaveletAndDeltas: void rollback(org.waveprotocol.wave.model.wave.data.ObservableWaveletData,java.util.List)>($r6, r0);

        $r7 = staticinvoke <org.waveprotocol.box.server.util.WaveletDataUtil: org.waveprotocol.wave.model.wave.data.ObservableWaveletData copyWavelet(org.waveprotocol.wave.model.wave.data.ReadableWaveletData)>(r2);

        $r8 = new org.waveprotocol.box.server.robots.passive.WaveletAndDeltas;

        specialinvoke $r8.<org.waveprotocol.box.server.robots.passive.WaveletAndDeltas: void <init>(org.waveprotocol.wave.model.wave.data.ObservableWaveletData,org.waveprotocol.wave.model.wave.data.ObservableWaveletData,org.waveprotocol.box.common.DeltaSequence)>($r6, $r7, r0);

        return $r8;
    }

    private static void rollback(org.waveprotocol.wave.model.wave.data.ObservableWaveletData, java.util.List) throws org.waveprotocol.wave.model.operation.OperationException
    {
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta r13;
        byte $b5;
        boolean $z0;
        java.util.List r1;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r17;
        org.waveprotocol.wave.model.operation.wave.WaveletOperation $r14, $r15, r16;
        long $l1, $l2, $l3, $l4, $l6, $l7, $l8;
        java.util.ArrayList $r0;
        org.waveprotocol.wave.model.operation.OperationException $r18;
        int $i0, $i9, i10, i11, i12, $i14, $i16;
        java.lang.String $r10;
        java.util.Iterator $r3;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData r2;
        java.lang.Object $r11, $r12;

        r2 := @parameter0: org.waveprotocol.wave.model.wave.data.ObservableWaveletData;

        r1 := @parameter1: java.util.List;

        $r0 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        i10 = $i0 - 1;

     label1:
        if i10 < 0 goto label4;

        $r12 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i10);

        r13 = (org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta) $r12;

        $i9 = virtualinvoke r13.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: int size()>();

        i11 = $i9 - 1;

     label2:
        if i11 < 0 goto label3;

        $r14 = virtualinvoke r13.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: org.waveprotocol.wave.model.operation.wave.WaveletOperation get(int)>(i11);

        $r15 = staticinvoke <org.waveprotocol.box.server.robots.passive.WaveletOperationInverter: org.waveprotocol.wave.model.operation.wave.WaveletOperation invert(org.waveprotocol.wave.model.operation.wave.WaveletOperation)>($r14);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r15);

        $i14 = (int) -1;

        i11 = i11 + $i14;

        goto label2;

     label3:
        $i16 = (int) -1;

        i10 = i10 + $i16;

        goto label1;

     label4:
        $l1 = interfaceinvoke r2.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData: long getVersion()>();

        i12 = 0;

        $r3 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r11 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r16 = (org.waveprotocol.wave.model.operation.wave.WaveletOperation) $r11;

        virtualinvoke r16.<org.waveprotocol.wave.model.operation.wave.WaveletOperation: void apply(org.waveprotocol.wave.model.wave.data.WaveletData)>(r2);

        i12 = i12 + 1;

        goto label5;

     label6:
        $l2 = interfaceinvoke r2.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData: long getVersion()>();

        $l3 = (long) i12;

        $l4 = $l1 - $l3;

        $b5 = $l2 cmp $l4;

        if $b5 == 0 goto label7;

        $r18 = new org.waveprotocol.wave.model.operation.OperationException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected end version ");

        $l6 = (long) i12;

        $l7 = $l1 - $l6;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l7);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" doesn\'t match the version of the wavelet ");

        $l8 = interfaceinvoke r2.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData: long getVersion()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<org.waveprotocol.wave.model.operation.OperationException: void <init>(java.lang.String)>($r10);

        throw $r18;

     label7:
        return;
    }

    private void <init>(org.waveprotocol.wave.model.wave.data.ObservableWaveletData, org.waveprotocol.wave.model.wave.data.ObservableWaveletData, org.waveprotocol.box.common.DeltaSequence)
    {
        org.waveprotocol.wave.model.id.WaveletName $r4;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData r1, r3;
        org.waveprotocol.box.server.robots.passive.WaveletAndDeltas r0;
        org.waveprotocol.box.common.DeltaSequence r2;

        r0 := @this: org.waveprotocol.box.server.robots.passive.WaveletAndDeltas;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.data.ObservableWaveletData;

        r3 := @parameter1: org.waveprotocol.wave.model.wave.data.ObservableWaveletData;

        r2 := @parameter2: org.waveprotocol.box.common.DeltaSequence;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.box.server.robots.passive.WaveletAndDeltas: org.waveprotocol.wave.model.wave.data.ReadableWaveletData snapshotBeforeDeltas> = r1;

        r0.<org.waveprotocol.box.server.robots.passive.WaveletAndDeltas: org.waveprotocol.box.common.DeltaSequence deltas> = r2;

        r0.<org.waveprotocol.box.server.robots.passive.WaveletAndDeltas: org.waveprotocol.wave.model.wave.data.ObservableWaveletData snapshotAfterDeltas> = r3;

        $r4 = staticinvoke <org.waveprotocol.box.server.util.WaveletDataUtil: org.waveprotocol.wave.model.id.WaveletName waveletNameOf(org.waveprotocol.wave.model.wave.data.ReadableWaveletData)>(r1);

        r0.<org.waveprotocol.box.server.robots.passive.WaveletAndDeltas: org.waveprotocol.wave.model.id.WaveletName waveletName> = $r4;

        return;
    }

    public org.waveprotocol.wave.model.wave.data.ReadableWaveletData getSnapshotBeforeDeltas()
    {
        org.waveprotocol.box.server.robots.passive.WaveletAndDeltas r0;
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData $r1;

        r0 := @this: org.waveprotocol.box.server.robots.passive.WaveletAndDeltas;

        $r1 = r0.<org.waveprotocol.box.server.robots.passive.WaveletAndDeltas: org.waveprotocol.wave.model.wave.data.ReadableWaveletData snapshotBeforeDeltas>;

        return $r1;
    }

    public org.waveprotocol.box.common.DeltaSequence getDeltas()
    {
        org.waveprotocol.box.server.robots.passive.WaveletAndDeltas r0;
        org.waveprotocol.box.common.DeltaSequence $r1;

        r0 := @this: org.waveprotocol.box.server.robots.passive.WaveletAndDeltas;

        $r1 = r0.<org.waveprotocol.box.server.robots.passive.WaveletAndDeltas: org.waveprotocol.box.common.DeltaSequence deltas>;

        return $r1;
    }

    public org.waveprotocol.wave.model.wave.data.ReadableWaveletData getSnapshotAfterDeltas()
    {
        org.waveprotocol.box.server.robots.passive.WaveletAndDeltas r0;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData $r1;

        r0 := @this: org.waveprotocol.box.server.robots.passive.WaveletAndDeltas;

        $r1 = r0.<org.waveprotocol.box.server.robots.passive.WaveletAndDeltas: org.waveprotocol.wave.model.wave.data.ObservableWaveletData snapshotAfterDeltas>;

        return $r1;
    }

    public org.waveprotocol.wave.model.version.HashedVersion getVersionAfterDeltas()
    {
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData $r3;
        org.waveprotocol.box.server.robots.passive.WaveletAndDeltas r0;
        org.waveprotocol.wave.model.version.HashedVersion $r4;
        org.waveprotocol.box.common.DeltaSequence $r1, $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.server.robots.passive.WaveletAndDeltas;

        $r1 = r0.<org.waveprotocol.box.server.robots.passive.WaveletAndDeltas: org.waveprotocol.box.common.DeltaSequence deltas>;

        $z0 = virtualinvoke $r1.<org.waveprotocol.box.common.DeltaSequence: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<org.waveprotocol.box.server.robots.passive.WaveletAndDeltas: org.waveprotocol.wave.model.wave.data.ObservableWaveletData snapshotAfterDeltas>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData: org.waveprotocol.wave.model.version.HashedVersion getHashedVersion()>();

        goto label2;

     label1:
        $r2 = r0.<org.waveprotocol.box.server.robots.passive.WaveletAndDeltas: org.waveprotocol.box.common.DeltaSequence deltas>;

        $r4 = virtualinvoke $r2.<org.waveprotocol.box.common.DeltaSequence: org.waveprotocol.wave.model.version.HashedVersion getEndVersion()>();

     label2:
        return $r4;
    }

    public void appendDeltas(org.waveprotocol.wave.model.wave.data.ReadableWaveletData, org.waveprotocol.box.common.DeltaSequence)
    {
        java.lang.Object[] $r3, $r7, $r13;
        org.waveprotocol.box.server.robots.passive.WaveletAndDeltas r6;
        long $l0, $l1, $l3;
        org.waveprotocol.box.common.DeltaSequence r0, $r9, $r18, $r19;
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData r2;
        byte $b2;
        java.lang.Long $r4;
        org.waveprotocol.wave.model.version.HashedVersion $r1, $r8;
        java.lang.String $r5, $r10, $r15;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.waveprotocol.wave.model.id.WaveletName $r11, $r12, $r14;
        org.waveprotocol.box.common.DeltaSequence[] $r17;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData $r16;

        r6 := @this: org.waveprotocol.box.server.robots.passive.WaveletAndDeltas;

        r2 := @parameter0: org.waveprotocol.wave.model.wave.data.ReadableWaveletData;

        r0 := @parameter1: org.waveprotocol.box.common.DeltaSequence;

        $r1 = virtualinvoke r0.<org.waveprotocol.box.common.DeltaSequence: org.waveprotocol.wave.model.version.HashedVersion getEndVersion()>();

        $z0 = virtualinvoke r0.<org.waveprotocol.box.common.DeltaSequence: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z3, "There were no new deltas passed to appendDeltas");

        $l0 = interfaceinvoke r2.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: long getVersion()>();

        $l1 = virtualinvoke $r1.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label3;

        $z4 = 1;

        goto label4;

     label3:
        $z4 = 0;

     label4:
        $r3 = newarray (java.lang.Object)[2];

        $l3 = interfaceinvoke r2.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: long getVersion()>();

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        $r3[0] = $r4;

        $r3[1] = $r1;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Version of snapshot %s doesn\'t match the HashedVersion %s", $r3);

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z4, $r5);

        $z1 = virtualinvoke r6.<org.waveprotocol.box.server.robots.passive.WaveletAndDeltas: boolean areContiguousToCurrentVersion(org.waveprotocol.box.common.DeltaSequence)>(r0);

        $r7 = newarray (java.lang.Object)[2];

        $r8 = virtualinvoke r6.<org.waveprotocol.box.server.robots.passive.WaveletAndDeltas: org.waveprotocol.wave.model.version.HashedVersion getVersionAfterDeltas()>();

        $r7[0] = $r8;

        $r9 = r6.<org.waveprotocol.box.server.robots.passive.WaveletAndDeltas: org.waveprotocol.box.common.DeltaSequence deltas>;

        $r7[1] = $r9;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Deltas are not contiguous to the current version(%s) %s", $r7);

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, $r10);

        $r11 = staticinvoke <org.waveprotocol.box.server.util.WaveletDataUtil: org.waveprotocol.wave.model.id.WaveletName waveletNameOf(org.waveprotocol.wave.model.wave.data.ReadableWaveletData)>(r2);

        $r12 = r6.<org.waveprotocol.box.server.robots.passive.WaveletAndDeltas: org.waveprotocol.wave.model.id.WaveletName waveletName>;

        $z2 = virtualinvoke $r11.<org.waveprotocol.wave.model.id.WaveletName: boolean equals(java.lang.Object)>($r12);

        $r13 = newarray (java.lang.Object)[2];

        $r13[0] = $r11;

        $r14 = r6.<org.waveprotocol.box.server.robots.passive.WaveletAndDeltas: org.waveprotocol.wave.model.id.WaveletName waveletName>;

        $r13[1] = $r14;

        $r15 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Updated wavelet doesn\'t have the same name as with which this class has been instantiated. %s != %s", $r13);

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z2, $r15);

        $r16 = staticinvoke <org.waveprotocol.box.server.util.WaveletDataUtil: org.waveprotocol.wave.model.wave.data.ObservableWaveletData copyWavelet(org.waveprotocol.wave.model.wave.data.ReadableWaveletData)>(r2);

        r6.<org.waveprotocol.box.server.robots.passive.WaveletAndDeltas: org.waveprotocol.wave.model.wave.data.ObservableWaveletData snapshotAfterDeltas> = $r16;

        $r18 = r6.<org.waveprotocol.box.server.robots.passive.WaveletAndDeltas: org.waveprotocol.box.common.DeltaSequence deltas>;

        $r17 = newarray (org.waveprotocol.box.common.DeltaSequence)[1];

        $r17[0] = r0;

        $r19 = staticinvoke <org.waveprotocol.box.common.DeltaSequence: org.waveprotocol.box.common.DeltaSequence join(org.waveprotocol.box.common.DeltaSequence,org.waveprotocol.box.common.DeltaSequence[])>($r18, $r17);

        r6.<org.waveprotocol.box.server.robots.passive.WaveletAndDeltas: org.waveprotocol.box.common.DeltaSequence deltas> = $r19;

        return;
    }

    public boolean areContiguousToCurrentVersion(org.waveprotocol.box.common.DeltaSequence)
    {
        byte $b2;
        org.waveprotocol.box.server.robots.passive.WaveletAndDeltas r1;
        org.waveprotocol.wave.model.version.HashedVersion $r2;
        long $l0, $l1;
        org.waveprotocol.box.common.DeltaSequence r0;
        boolean $z0;

        r1 := @this: org.waveprotocol.box.server.robots.passive.WaveletAndDeltas;

        r0 := @parameter0: org.waveprotocol.box.common.DeltaSequence;

        $l0 = virtualinvoke r0.<org.waveprotocol.box.common.DeltaSequence: long getStartVersion()>();

        $r2 = virtualinvoke r1.<org.waveprotocol.box.server.robots.passive.WaveletAndDeltas: org.waveprotocol.wave.model.version.HashedVersion getVersionAfterDeltas()>();

        $l1 = virtualinvoke $r2.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }
}
