public abstract class org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap extends java.lang.Object implements org.waveprotocol.wave.model.adt.ObservableBasicMap, org.waveprotocol.wave.model.util.ElementListener
{
    private final org.waveprotocol.wave.model.util.Serializer keySerializer;
    private final org.waveprotocol.wave.model.util.Serializer valueSerializer;
    private final java.lang.Object container;
    private final java.lang.String entryTagName;
    private final java.lang.String keyAttrName;
    private final java.lang.String valueAttrName;
    private final java.util.Map entries;
    private final java.util.Set obsoleteEntries;
    private final org.waveprotocol.wave.model.document.util.DocumentEventRouter router;
    private final org.waveprotocol.wave.model.util.CopyOnWriteSet listeners;
    private final boolean activeCleanUp;
    private boolean suppressBroadcasts;
    static final boolean $assertionsDisabled;

    protected void <init>(org.waveprotocol.wave.model.document.util.DocumentEventRouter, java.lang.Object, org.waveprotocol.wave.model.util.Serializer, org.waveprotocol.wave.model.util.Serializer, java.lang.String, java.lang.String, java.lang.String, boolean)
    {
        org.waveprotocol.wave.model.util.Serializer r5, r6;
        org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap r0;
        java.util.HashMap $r1;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter r10;
        java.util.HashSet $r2;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r3;
        java.lang.Object r4;
        java.lang.String r7, r8, r9;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap;

        r10 := @parameter0: org.waveprotocol.wave.model.document.util.DocumentEventRouter;

        r4 := @parameter1: java.lang.Object;

        r5 := @parameter2: org.waveprotocol.wave.model.util.Serializer;

        r6 := @parameter3: org.waveprotocol.wave.model.util.Serializer;

        r7 := @parameter4: java.lang.String;

        r8 := @parameter5: java.lang.String;

        r9 := @parameter6: java.lang.String;

        z0 := @parameter7: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: java.util.Map entries> = $r1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: java.util.Set obsoleteEntries> = $r2;

        $r3 = staticinvoke <org.waveprotocol.wave.model.util.CopyOnWriteSet: org.waveprotocol.wave.model.util.CopyOnWriteSet create()>();

        r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners> = $r3;

        r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: java.lang.Object container> = r4;

        r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: org.waveprotocol.wave.model.util.Serializer keySerializer> = r5;

        r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: org.waveprotocol.wave.model.util.Serializer valueSerializer> = r6;

        r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: java.lang.String entryTagName> = r7;

        r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: java.lang.String keyAttrName> = r8;

        r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: java.lang.String valueAttrName> = r9;

        r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: boolean activeCleanUp> = z0;

        r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: org.waveprotocol.wave.model.document.util.DocumentEventRouter router> = r10;

        r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: boolean suppressBroadcasts> = 0;

        return;
    }

    protected org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()
    {
        org.waveprotocol.wave.model.document.util.DocumentEventRouter $r1;
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r2;
        org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap r0;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap;

        $r1 = r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: org.waveprotocol.wave.model.document.util.DocumentEventRouter router>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.util.DocumentEventRouter: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        return $r2;
    }

    protected void dispatchAndLoad()
    {
        java.lang.Object $r1;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter $r2;
        org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap r0;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap;

        $r2 = r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: org.waveprotocol.wave.model.document.util.DocumentEventRouter router>;

        $r1 = r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: java.lang.Object container>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.document.util.DocumentEventRouter: org.waveprotocol.wave.model.document.util.ListenerRegistration addChildListener(java.lang.Object,org.waveprotocol.wave.model.util.ElementListener)>($r1, r0);

        specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: void load()>();

        return;
    }

    protected abstract boolean canReplace(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);

    protected abstract boolean isRedundantPut(java.lang.Object, java.lang.Object);

    private void load()
    {
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r1, $r3;
        org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap r0;
        java.lang.Object $r2, $r4, r5;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        $r2 = r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: java.lang.Object container>;

        r5 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object getFirstChildElement(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>($r1, $r2);

     label1:
        if r5 == null goto label2;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object getNextSiblingElement(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>($r3, r5);

        virtualinvoke r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: void onElementAdded(java.lang.Object)>(r5);

        r5 = $r4;

        goto label1;

     label2:
        return;
    }

    public java.lang.Object get(java.lang.Object)
    {
        org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap r0;
        java.util.Map $r2;
        java.lang.Object r1, $r3, $r4;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: java.util.Map entries>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        if $r3 == null goto label1;

        $r4 = specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: java.lang.Object valueOf(java.lang.Object)>($r3);

        goto label2;

     label1:
        $r4 = null;

     label2:
        return $r4;
    }

    public boolean put(java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap r2;
        java.lang.Object r0, r1, $r3;
        boolean $z0;

        r2 := @this: org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "key must not be null");

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "value must not be null");

        $r3 = virtualinvoke r2.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: java.lang.Object get(java.lang.Object)>(r0);

        $z0 = virtualinvoke r2.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: boolean isRedundantPut(java.lang.Object,java.lang.Object)>($r3, r1);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        r2.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: boolean suppressBroadcasts> = 1;

        virtualinvoke r2.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: void remove(java.lang.Object)>(r0);

        specialinvoke r2.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: java.lang.Object createEntry(java.lang.Object,java.lang.Object)>(r0, r1);

        r2.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: boolean suppressBroadcasts> = 0;

        specialinvoke r2.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: void triggerOnEntryChanged(java.lang.Object,java.lang.Object,java.lang.Object)>(r0, $r3, r1);

        return 1;
    }

    private void cleanup()
    {
        org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap r0;
        java.lang.AssertionError $r6, $r11;
        java.util.ArrayList $r1;
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.Iterator $r3, $r4;
        java.util.Set $r2, $r5, $r10;
        java.lang.Object $r7, $r9;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap;

        $z0 = r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: boolean activeCleanUp>;

        if $z0 != 0 goto label2;

        $z5 = <org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: boolean $assertionsDisabled>;

        if $z5 != 0 goto label1;

        $r10 = r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: java.util.Set obsoleteEntries>;

        $z6 = interfaceinvoke $r10.<java.util.Set: boolean isEmpty()>();

        if $z6 != 0 goto label1;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label1:
        return;

     label2:
        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: java.util.Set obsoleteEntries>;

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r9 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r1.<java.util.Collection: boolean add(java.lang.Object)>($r9);

        goto label3;

     label4:
        $r4 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label5:
        $z2 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r7 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r8 = virtualinvoke r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        interfaceinvoke $r8.<org.waveprotocol.wave.model.document.ObservableMutableDocument: void deleteNode(java.lang.Object)>($r7);

        goto label5;

     label6:
        $z3 = <org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: boolean $assertionsDisabled>;

        if $z3 != 0 goto label7;

        $r5 = r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: java.util.Set obsoleteEntries>;

        $z4 = interfaceinvoke $r5.<java.util.Set: boolean isEmpty()>();

        if $z4 != 0 goto label7;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label7:
        return;
    }

    public void remove(java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap r0;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: void invalidateCurrentCacheEntry(java.lang.Object)>(r1);

        specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: void cleanup()>();

        return;
    }

    public java.util.Set keySet()
    {
        org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap r0;
        java.util.Map $r1;
        java.util.Set $r2, $r3;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap;

        $r1 = r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: java.util.Map entries>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r2);

        return $r3;
    }

    static java.lang.Object prependChild(org.waveprotocol.wave.model.document.MutableDocument, java.lang.Object, java.lang.String, java.util.Map)
    {
        java.util.Map r4;
        java.lang.Object r1, $r5;
        org.waveprotocol.wave.model.document.MutableDocument r0;
        java.lang.String r3;
        org.waveprotocol.wave.model.document.util.Point$El $r2;

        r0 := @parameter0: org.waveprotocol.wave.model.document.MutableDocument;

        r1 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.util.Map;

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El start(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r0, r1);

        $r5 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object createElement(org.waveprotocol.wave.model.document.util.Point,java.lang.String,java.util.Map)>($r2, r3, r4);

        return $r5;
    }

    private java.lang.Object createEntry(java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.model.util.Serializer $r3, $r7;
        org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap r1;
        java.util.HashMap $r0;
        org.waveprotocol.wave.model.document.operation.impl.AttributesImpl $r11;
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r10;
        java.lang.Object r2, r6, $r12, $r14;
        java.lang.String $r4, $r5, $r8, $r9, $r13;

        r1 := @this: org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap;

        r2 := @parameter0: java.lang.Object;

        r6 := @parameter1: java.lang.Object;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r4 = r1.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: java.lang.String keyAttrName>;

        $r3 = r1.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: org.waveprotocol.wave.model.util.Serializer keySerializer>;

        $r5 = interfaceinvoke $r3.<org.waveprotocol.wave.model.util.Serializer: java.lang.String toString(java.lang.Object)>(r2);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r5);

        $r8 = r1.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: java.lang.String valueAttrName>;

        $r7 = r1.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: org.waveprotocol.wave.model.util.Serializer valueSerializer>;

        $r9 = interfaceinvoke $r7.<org.waveprotocol.wave.model.util.Serializer: java.lang.String toString(java.lang.Object)>(r6);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r9);

        $r10 = virtualinvoke r1.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        $r12 = r1.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: java.lang.Object container>;

        $r13 = r1.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: java.lang.String entryTagName>;

        $r11 = new org.waveprotocol.wave.model.document.operation.impl.AttributesImpl;

        specialinvoke $r11.<org.waveprotocol.wave.model.document.operation.impl.AttributesImpl: void <init>(java.util.Map)>($r0);

        $r14 = staticinvoke <org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: java.lang.Object prependChild(org.waveprotocol.wave.model.document.MutableDocument,java.lang.Object,java.lang.String,java.util.Map)>($r10, $r12, $r13, $r11);

        return $r14;
    }

    private void invalidateCurrentCacheEntry(java.lang.Object)
    {
        org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap r0;
        java.util.Map $r2;
        java.lang.Object r1, $r3;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: java.util.Map entries>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: void invalidateEntry(java.lang.Object)>($r3);

        return;
    }

    private void invalidateEntry(java.lang.Object)
    {
        org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap r1;
        java.util.Set $r2;
        java.lang.AssertionError $r6;
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r3;
        java.lang.Object r0, $r4, $r5;
        boolean $z0, $z1, $z2;

        r1 := @this: org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap;

        r0 := @parameter0: java.lang.Object;

        if r0 == null goto label2;

        $z0 = r1.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: boolean activeCleanUp>;

        if $z0 == 0 goto label2;

        $z1 = <org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: boolean $assertionsDisabled>;

        if $z1 != 0 goto label1;

        $r3 = virtualinvoke r1.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.ObservableMutableDocument: java.lang.Object getParentElement(java.lang.Object)>(r0);

        $r5 = r1.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: java.lang.Object container>;

        $z2 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z2 != 0 goto label1;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label1:
        $r2 = r1.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: java.util.Set obsoleteEntries>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r0);

     label2:
        return;
    }

    private java.lang.Object keyOf(java.lang.Object)
    {
        org.waveprotocol.wave.model.util.Serializer $r5;
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r1;
        org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap r0;
        java.lang.Object r2, $r6;
        java.lang.String $r3, $r4;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap;

        r2 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        $r3 = r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: java.lang.String keyAttrName>;

        $r4 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.ObservableMutableDocument: java.lang.String getAttribute(java.lang.Object,java.lang.String)>(r2, $r3);

        $r5 = r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: org.waveprotocol.wave.model.util.Serializer keySerializer>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.model.util.Serializer: java.lang.Object fromString(java.lang.String)>($r4);

        return $r6;
    }

    private java.lang.Object valueOf(java.lang.Object)
    {
        org.waveprotocol.wave.model.util.Serializer $r5;
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r1;
        org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap r0;
        java.lang.Object r2, $r6;
        java.lang.String $r3, $r4;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap;

        r2 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        $r3 = r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: java.lang.String valueAttrName>;

        $r4 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.ObservableMutableDocument: java.lang.String getAttribute(java.lang.Object,java.lang.String)>(r2, $r3);

        if $r4 == null goto label1;

        $r5 = r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: org.waveprotocol.wave.model.util.Serializer valueSerializer>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.model.util.Serializer: java.lang.Object fromString(java.lang.String)>($r4);

        goto label2;

     label1:
        $r6 = null;

     label2:
        return $r6;
    }

    public void onElementRemoved(java.lang.Object)
    {
        org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap r0;
        java.util.Set $r8;
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r2;
        java.util.Map $r6, $r9;
        java.lang.Object r3, $r5, $r7, $r10;
        java.lang.String $r1, $r4;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap;

        r3 := @parameter0: java.lang.Object;

        $r1 = r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: java.lang.String entryTagName>;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        $r4 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ObservableMutableDocument: java.lang.String getTagName(java.lang.Object)>(r3);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r5 = specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: java.lang.Object keyOf(java.lang.Object)>(r3);

        $r6 = r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: java.util.Map entries>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        if $r7 != r3 goto label2;

        $r9 = r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: java.util.Map entries>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r5);

        $r10 = specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: java.lang.Object valueOf(java.lang.Object)>(r3);

        specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: void triggerOnEntryChanged(java.lang.Object,java.lang.Object,java.lang.Object)>($r5, $r10, null);

     label2:
        $z1 = r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: boolean activeCleanUp>;

        if $z1 == 0 goto label3;

        $r8 = r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: java.util.Set obsoleteEntries>;

        interfaceinvoke $r8.<java.util.Set: boolean remove(java.lang.Object)>(r3);

     label3:
        return;
    }

    public void onElementAdded(java.lang.Object)
    {
        org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap r0;
        java.lang.AssertionError $r13;
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r2, $r10;
        java.util.Map $r7, $r9;
        java.lang.String $r1, $r4;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object r3, $r5, $r6, $r8, $r11, $r12, $r14;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap;

        r3 := @parameter0: java.lang.Object;

        $z0 = <org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r10 = virtualinvoke r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        $r11 = interfaceinvoke $r10.<org.waveprotocol.wave.model.document.ObservableMutableDocument: java.lang.Object getParentElement(java.lang.Object)>(r3);

        $r12 = r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: java.lang.Object container>;

        $z3 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>($r12);

        if $z3 != 0 goto label1;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>(java.lang.Object)>("Received event for unrelated element");

        throw $r13;

     label1:
        $r1 = r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: java.lang.String entryTagName>;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        $r4 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ObservableMutableDocument: java.lang.String getTagName(java.lang.Object)>(r3);

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 != 0 goto label2;

        return;

     label2:
        $r5 = specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: java.lang.Object keyOf(java.lang.Object)>(r3);

        $r6 = specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: java.lang.Object valueOf(java.lang.Object)>(r3);

        $r7 = r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: java.util.Map entries>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        if $r8 == null goto label3;

        $r14 = specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: java.lang.Object valueOf(java.lang.Object)>($r8);

        goto label4;

     label3:
        $r14 = null;

     label4:
        $z2 = virtualinvoke r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: boolean canReplace(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r8, r3, $r14, $r6);

        if $z2 == 0 goto label5;

        specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: void invalidateCurrentCacheEntry(java.lang.Object)>($r5);

        $r9 = r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: java.util.Map entries>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r3);

        specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: void triggerOnEntryChanged(java.lang.Object,java.lang.Object,java.lang.Object)>($r5, $r14, $r6);

        goto label6;

     label5:
        specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: void invalidateEntry(java.lang.Object)>(r3);

     label6:
        return;
    }

    private void triggerOnEntryChanged(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        java.lang.Object $r3, r5, r6, r7;
        org.waveprotocol.wave.model.adt.ObservableBasicMap$Listener r4;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap;

        r5 := @parameter0: java.lang.Object;

        r6 := @parameter1: java.lang.Object;

        r7 := @parameter2: java.lang.Object;

        $z0 = r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: boolean suppressBroadcasts>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.adt.ObservableBasicMap$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.adt.ObservableBasicMap$Listener: void onEntrySet(java.lang.Object,java.lang.Object,java.lang.Object)>(r5, r6, r7);

        goto label2;

     label3:
        return;
    }

    public void addListener(org.waveprotocol.wave.model.adt.ObservableBasicMap$Listener)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.adt.ObservableBasicMap$Listener r1;
        org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap r0;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap;

        r1 := @parameter0: org.waveprotocol.wave.model.adt.ObservableBasicMap$Listener;

        $r2 = r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void removeListener(org.waveprotocol.wave.model.adt.ObservableBasicMap$Listener)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.adt.ObservableBasicMap$Listener r1;
        org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap r0;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap;

        r1 := @parameter0: org.waveprotocol.wave.model.adt.ObservableBasicMap$Listener;

        $r2 = r0.<org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean remove(java.lang.Object)>(r1);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/adt/docbased/AbstractDocumentBasedMap;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.adt.docbased.AbstractDocumentBasedMap: boolean $assertionsDisabled> = $z1;

        return;
    }
}
