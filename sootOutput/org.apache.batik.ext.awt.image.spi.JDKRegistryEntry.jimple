public class org.apache.batik.ext.awt.image.spi.JDKRegistryEntry extends org.apache.batik.ext.awt.image.spi.AbstractRegistryEntry implements org.apache.batik.ext.awt.image.spi.URLRegistryEntry
{
    public static final float PRIORITY;

    public void <init>()
    {
        org.apache.batik.ext.awt.image.spi.JDKRegistryEntry r0;
        java.lang.String[] $r1, $r2;

        r0 := @this: org.apache.batik.ext.awt.image.spi.JDKRegistryEntry;

        $r2 = newarray (java.lang.String)[0];

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = "image/gif";

        specialinvoke r0.<org.apache.batik.ext.awt.image.spi.AbstractRegistryEntry: void <init>(java.lang.String,float,java.lang.String[],java.lang.String[])>("JDK", 1000000.0F, $r2, $r1);

        return;
    }

    public boolean isCompatibleURL(org.apache.batik.util.ParsedURL)
    {
        org.apache.batik.ext.awt.image.spi.JDKRegistryEntry r4;
        org.apache.batik.util.ParsedURL r1;
        java.net.MalformedURLException $r3;
        java.net.URL $r0;
        java.lang.String $r2;

        r4 := @this: org.apache.batik.ext.awt.image.spi.JDKRegistryEntry;

        r1 := @parameter0: org.apache.batik.util.ParsedURL;

     label1:
        $r0 = new java.net.URL;

        $r2 = virtualinvoke r1.<org.apache.batik.util.ParsedURL: java.lang.String toString()>();

        specialinvoke $r0.<java.net.URL: void <init>(java.lang.String)>($r2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        return 0;

     label4:
        return 1;

        catch java.net.MalformedURLException from label1 to label2 with label3;
    }

    public org.apache.batik.ext.awt.image.renderable.Filter handleURL(org.apache.batik.util.ParsedURL, boolean)
    {
        org.apache.batik.ext.awt.image.spi.JDKRegistryEntry r6;
        org.apache.batik.ext.awt.image.renderable.DeferRable $r3;
        java.lang.Object[] $r4, $r7, r10;
        org.apache.batik.ext.awt.image.spi.JDKRegistryEntry$1 $r5;
        java.net.MalformedURLException $r8;
        java.net.URL $r0;
        org.apache.batik.util.ParsedURL r1;
        java.lang.String $r2, r9;
        boolean z0;

        r6 := @this: org.apache.batik.ext.awt.image.spi.JDKRegistryEntry;

        r1 := @parameter0: org.apache.batik.util.ParsedURL;

        z0 := @parameter1: boolean;

     label1:
        $r0 = new java.net.URL;

        $r2 = virtualinvoke r1.<org.apache.batik.util.ParsedURL: java.lang.String toString()>();

        specialinvoke $r0.<java.net.URL: void <init>(java.lang.String)>($r2);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        return null;

     label4:
        $r3 = new org.apache.batik.ext.awt.image.renderable.DeferRable;

        specialinvoke $r3.<org.apache.batik.ext.awt.image.renderable.DeferRable: void <init>()>();

        if r1 == null goto label5;

        r9 = "url.format.unreadable";

        $r7 = newarray (java.lang.Object)[2];

        $r7[0] = "JDK";

        $r7[1] = $r0;

        r10 = $r7;

        goto label6;

     label5:
        r9 = "stream.format.unreadable";

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = "JDK";

        r10 = $r4;

     label6:
        $r5 = new org.apache.batik.ext.awt.image.spi.JDKRegistryEntry$1;

        specialinvoke $r5.<org.apache.batik.ext.awt.image.spi.JDKRegistryEntry$1: void <init>(org.apache.batik.ext.awt.image.spi.JDKRegistryEntry,java.net.URL,org.apache.batik.ext.awt.image.renderable.DeferRable,java.lang.String,java.lang.Object[])>(r6, $r0, $r3, r9, r10);

        virtualinvoke $r5.<java.lang.Thread: void start()>();

        return $r3;

        catch java.net.MalformedURLException from label1 to label2 with label3;
    }

    public java.awt.image.RenderedImage loadImage(java.awt.Image, org.apache.batik.ext.awt.image.renderable.DeferRable)
    {
        java.util.HashMap $r13;
        org.apache.batik.ext.awt.image.spi.JDKRegistryEntry$MyImgObs $r10;
        java.awt.Graphics2D $r6;
        int i0, i1, $i3, $i5;
        java.awt.geom.Rectangle2D$Double $r11;
        boolean $z0, $z1, $z2;
        double $d0, $d1;
        org.apache.batik.ext.awt.image.spi.JDKRegistryEntry r9;
        org.apache.batik.ext.awt.image.renderable.DeferRable r3;
        java.awt.Image r0;
        java.awt.image.BufferedImage $r12;
        java.awt.image.RenderedImage $r8;
        java.awt.Toolkit $r2;

        r9 := @this: org.apache.batik.ext.awt.image.spi.JDKRegistryEntry;

        r0 := @parameter0: java.awt.Image;

        r3 := @parameter1: org.apache.batik.ext.awt.image.renderable.DeferRable;

        $z0 = r0 instanceof java.awt.image.RenderedImage;

        if $z0 == 0 goto label1;

        $r8 = (java.awt.image.RenderedImage) r0;

        return $r8;

     label1:
        $r10 = new org.apache.batik.ext.awt.image.spi.JDKRegistryEntry$MyImgObs;

        specialinvoke $r10.<org.apache.batik.ext.awt.image.spi.JDKRegistryEntry$MyImgObs: void <init>()>();

        $r2 = staticinvoke <java.awt.Toolkit: java.awt.Toolkit getDefaultToolkit()>();

        $i3 = (int) -1;

        $i5 = (int) -1;

        virtualinvoke $r2.<java.awt.Toolkit: boolean prepareImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>(r0, $i3, $i5, $r10);

        virtualinvoke $r10.<org.apache.batik.ext.awt.image.spi.JDKRegistryEntry$MyImgObs: void waitTilWidthHeightDone()>();

        $z1 = $r10.<org.apache.batik.ext.awt.image.spi.JDKRegistryEntry$MyImgObs: boolean imageError>;

        if $z1 == 0 goto label2;

        return null;

     label2:
        i0 = $r10.<org.apache.batik.ext.awt.image.spi.JDKRegistryEntry$MyImgObs: int width>;

        i1 = $r10.<org.apache.batik.ext.awt.image.spi.JDKRegistryEntry$MyImgObs: int height>;

        $r11 = new java.awt.geom.Rectangle2D$Double;

        $d1 = (double) i0;

        $d0 = (double) i1;

        specialinvoke $r11.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(0.0, 0.0, $d1, $d0);

        virtualinvoke r3.<org.apache.batik.ext.awt.image.renderable.DeferRable: void setBounds(java.awt.geom.Rectangle2D)>($r11);

        $r12 = new java.awt.image.BufferedImage;

        specialinvoke $r12.<java.awt.image.BufferedImage: void <init>(int,int,int)>(i0, i1, 2);

        $r6 = virtualinvoke $r12.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        virtualinvoke $r10.<org.apache.batik.ext.awt.image.spi.JDKRegistryEntry$MyImgObs: void waitTilImageDone()>();

        $z2 = $r10.<org.apache.batik.ext.awt.image.spi.JDKRegistryEntry$MyImgObs: boolean imageError>;

        if $z2 == 0 goto label3;

        return null;

     label3:
        $r13 = new java.util.HashMap;

        specialinvoke $r13.<java.util.HashMap: void <init>()>();

        virtualinvoke r3.<org.apache.batik.ext.awt.image.renderable.DeferRable: void setProperties(java.util.Map)>($r13);

        virtualinvoke $r6.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>(r0, 0, 0, null);

        virtualinvoke $r6.<java.awt.Graphics: void dispose()>();

        return $r12;
    }

    public static void <clinit>()
    {
        <org.apache.batik.ext.awt.image.spi.JDKRegistryEntry: float PRIORITY> = 1000000.0F;

        return;
    }
}
