public class org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder extends java.lang.Object
{
    java.util.Map _globalElements;
    java.util.Map _globalAttributes;
    java.util.Map _globalTypes;
    static final boolean $assertionsDisabled;
    static java.lang.Class class$org$apache$xmlbeans$impl$inst2xsd$util$TypeSystemHolder;

    public void <init>()
    {
        java.util.LinkedHashMap $r1, $r2, $r3;
        org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder r0;

        r0 := @this: org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>()>();

        r0.<org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: java.util.Map _globalElements> = $r1;

        $r2 = new java.util.LinkedHashMap;

        specialinvoke $r2.<java.util.LinkedHashMap: void <init>()>();

        r0.<org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: java.util.Map _globalAttributes> = $r2;

        $r3 = new java.util.LinkedHashMap;

        specialinvoke $r3.<java.util.LinkedHashMap: void <init>()>();

        r0.<org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: java.util.Map _globalTypes> = $r3;

        return;
    }

    public void addGlobalElement(org.apache.xmlbeans.impl.inst2xsd.util.Element)
    {
        java.lang.AssertionError $r4;
        org.apache.xmlbeans.impl.inst2xsd.util.Element r1;
        org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder r0;
        java.util.Map $r2;
        javax.xml.namespace.QName $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder;

        r1 := @parameter0: org.apache.xmlbeans.impl.inst2xsd.util.Element;

        $z0 = <org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r1.<org.apache.xmlbeans.impl.inst2xsd.util.Element: boolean isGlobal()>();

        if $z1 == 0 goto label1;

        $z2 = virtualinvoke r1.<org.apache.xmlbeans.impl.inst2xsd.util.Element: boolean isRef()>();

        if $z2 == 0 goto label2;

     label1:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        $r2 = r0.<org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: java.util.Map _globalElements>;

        $r3 = virtualinvoke r1.<org.apache.xmlbeans.impl.inst2xsd.util.Element: javax.xml.namespace.QName getName()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1);

        return;
    }

    public org.apache.xmlbeans.impl.inst2xsd.util.Element getGlobalElement(javax.xml.namespace.QName)
    {
        org.apache.xmlbeans.impl.inst2xsd.util.Element $r4;
        org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder r0;
        java.util.Map $r2;
        java.lang.Object $r3;
        javax.xml.namespace.QName r1;

        r0 := @this: org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder;

        r1 := @parameter0: javax.xml.namespace.QName;

        $r2 = r0.<org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: java.util.Map _globalElements>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.apache.xmlbeans.impl.inst2xsd.util.Element) $r3;

        return $r4;
    }

    public org.apache.xmlbeans.impl.inst2xsd.util.Element[] getGlobalElements()
    {
        java.lang.Object[] $r4;
        java.util.Collection $r2;
        org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder r0;
        java.util.Map $r1;
        int $i0;
        org.apache.xmlbeans.impl.inst2xsd.util.Element[] $r3, $r5, $r6;

        r0 := @this: org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder;

        $r1 = r0.<org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: java.util.Map _globalElements>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $i0 = interfaceinvoke $r2.<java.util.Collection: int size()>();

        $r3 = newarray (org.apache.xmlbeans.impl.inst2xsd.util.Element)[$i0];

        $r4 = interfaceinvoke $r2.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (org.apache.xmlbeans.impl.inst2xsd.util.Element[]) $r4;

        $r6 = (org.apache.xmlbeans.impl.inst2xsd.util.Element[]) $r5;

        return $r6;
    }

    public void addGlobalAttribute(org.apache.xmlbeans.impl.inst2xsd.util.Attribute)
    {
        org.apache.xmlbeans.impl.inst2xsd.util.Attribute r1;
        java.lang.AssertionError $r4;
        org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder r0;
        java.util.Map $r2;
        javax.xml.namespace.QName $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder;

        r1 := @parameter0: org.apache.xmlbeans.impl.inst2xsd.util.Attribute;

        $z0 = <org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r1.<org.apache.xmlbeans.impl.inst2xsd.util.Attribute: boolean isGlobal()>();

        if $z1 == 0 goto label1;

        $z2 = virtualinvoke r1.<org.apache.xmlbeans.impl.inst2xsd.util.Attribute: boolean isRef()>();

        if $z2 == 0 goto label2;

     label1:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        $r2 = r0.<org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: java.util.Map _globalAttributes>;

        $r3 = virtualinvoke r1.<org.apache.xmlbeans.impl.inst2xsd.util.Attribute: javax.xml.namespace.QName getName()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1);

        return;
    }

    public org.apache.xmlbeans.impl.inst2xsd.util.Attribute getGlobalAttribute(javax.xml.namespace.QName)
    {
        org.apache.xmlbeans.impl.inst2xsd.util.Attribute $r4;
        org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder r0;
        java.util.Map $r2;
        java.lang.Object $r3;
        javax.xml.namespace.QName r1;

        r0 := @this: org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder;

        r1 := @parameter0: javax.xml.namespace.QName;

        $r2 = r0.<org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: java.util.Map _globalAttributes>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.apache.xmlbeans.impl.inst2xsd.util.Attribute) $r3;

        return $r4;
    }

    public org.apache.xmlbeans.impl.inst2xsd.util.Attribute[] getGlobalAttributes()
    {
        java.lang.Object[] $r4;
        java.util.Collection $r2;
        org.apache.xmlbeans.impl.inst2xsd.util.Attribute[] $r3, $r5, $r6;
        org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder r0;
        java.util.Map $r1;
        int $i0;

        r0 := @this: org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder;

        $r1 = r0.<org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: java.util.Map _globalAttributes>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $i0 = interfaceinvoke $r2.<java.util.Collection: int size()>();

        $r3 = newarray (org.apache.xmlbeans.impl.inst2xsd.util.Attribute)[$i0];

        $r4 = interfaceinvoke $r2.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (org.apache.xmlbeans.impl.inst2xsd.util.Attribute[]) $r4;

        $r6 = (org.apache.xmlbeans.impl.inst2xsd.util.Attribute[]) $r5;

        return $r6;
    }

    public void addGlobalType(org.apache.xmlbeans.impl.inst2xsd.util.Type)
    {
        java.lang.AssertionError $r4;
        org.apache.xmlbeans.impl.inst2xsd.util.Type r1;
        org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder r0;
        java.util.Map $r2;
        javax.xml.namespace.QName $r3, $r5;
        boolean $z0, $z1;

        r0 := @this: org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder;

        r1 := @parameter0: org.apache.xmlbeans.impl.inst2xsd.util.Type;

        $z0 = <org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r1.<org.apache.xmlbeans.impl.inst2xsd.util.Type: boolean isGlobal()>();

        if $z1 == 0 goto label1;

        $r5 = virtualinvoke r1.<org.apache.xmlbeans.impl.inst2xsd.util.Type: javax.xml.namespace.QName getName()>();

        if $r5 != null goto label2;

     label1:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>("type must be a global type before being added.");

        throw $r4;

     label2:
        $r2 = r0.<org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: java.util.Map _globalTypes>;

        $r3 = virtualinvoke r1.<org.apache.xmlbeans.impl.inst2xsd.util.Type: javax.xml.namespace.QName getName()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1);

        return;
    }

    public org.apache.xmlbeans.impl.inst2xsd.util.Type getGlobalType(javax.xml.namespace.QName)
    {
        org.apache.xmlbeans.impl.inst2xsd.util.Type $r4;
        org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder r0;
        java.util.Map $r2;
        java.lang.Object $r3;
        javax.xml.namespace.QName r1;

        r0 := @this: org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder;

        r1 := @parameter0: javax.xml.namespace.QName;

        $r2 = r0.<org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: java.util.Map _globalTypes>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.apache.xmlbeans.impl.inst2xsd.util.Type) $r3;

        return $r4;
    }

    public org.apache.xmlbeans.impl.inst2xsd.util.Type[] getGlobalTypes()
    {
        java.lang.Object[] $r4;
        java.util.Collection $r2;
        org.apache.xmlbeans.impl.inst2xsd.util.Type[] $r3, $r5, $r6;
        org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder r0;
        java.util.Map $r1;
        int $i0;

        r0 := @this: org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder;

        $r1 = r0.<org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: java.util.Map _globalTypes>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $i0 = interfaceinvoke $r2.<java.util.Collection: int size()>();

        $r3 = newarray (org.apache.xmlbeans.impl.inst2xsd.util.Type)[$i0];

        $r4 = interfaceinvoke $r2.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (org.apache.xmlbeans.impl.inst2xsd.util.Type[]) $r4;

        $r6 = (org.apache.xmlbeans.impl.inst2xsd.util.Type[]) $r5;

        return $r6;
    }

    public org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument[] getSchemaDocuments()
    {
        org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder r1;
        java.util.Map $r2, $r5, $r8, $r19, $r25, $r31;
        boolean $z0, $z1, $z2;
        org.apache.xmlbeans.impl.inst2xsd.util.Attribute $r27;
        java.util.Collection $r11;
        java.util.Set $r3, $r6, $r9;
        org.apache.xmlbeans.impl.inst2xsd.util.Element $r33;
        javax.xml.namespace.QName r34, r35, r36;
        java.lang.Object[] $r13;
        org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument[] $r12, $r14, $r15;
        java.util.LinkedHashMap $r0;
        int $i0;
        org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument $r18, $r24, $r30;
        java.lang.String $r17, $r23, $r29;
        java.util.Iterator $r4, $r7, $r10;
        org.apache.xmlbeans.impl.inst2xsd.util.Type $r21;
        java.lang.Object $r16, $r20, $r22, $r26, $r28, $r32;

        r1 := @this: org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder;

        $r0 = new java.util.LinkedHashMap;

        specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>();

        $r2 = r1.<org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: java.util.Map _globalElements>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r28 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r34 = (javax.xml.namespace.QName) $r28;

        $r29 = virtualinvoke r34.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $r30 = staticinvoke <org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument getSchemaDocumentForTNS(java.util.Map,java.lang.String)>($r0, $r29);

        $r31 = r1.<org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: java.util.Map _globalElements>;

        $r32 = interfaceinvoke $r31.<java.util.Map: java.lang.Object get(java.lang.Object)>(r34);

        $r33 = (org.apache.xmlbeans.impl.inst2xsd.util.Element) $r32;

        specialinvoke r1.<org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: void fillUpGlobalElement(org.apache.xmlbeans.impl.inst2xsd.util.Element,org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument,java.lang.String)>($r33, $r30, $r29);

        goto label1;

     label2:
        $r5 = r1.<org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: java.util.Map _globalAttributes>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set keySet()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r22 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r35 = (javax.xml.namespace.QName) $r22;

        $r23 = virtualinvoke r35.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $r24 = staticinvoke <org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument getSchemaDocumentForTNS(java.util.Map,java.lang.String)>($r0, $r23);

        $r25 = r1.<org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: java.util.Map _globalAttributes>;

        $r26 = interfaceinvoke $r25.<java.util.Map: java.lang.Object get(java.lang.Object)>(r35);

        $r27 = (org.apache.xmlbeans.impl.inst2xsd.util.Attribute) $r26;

        specialinvoke r1.<org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: void fillUpGlobalAttribute(org.apache.xmlbeans.impl.inst2xsd.util.Attribute,org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument,java.lang.String)>($r27, $r24, $r23);

        goto label3;

     label4:
        $r8 = r1.<org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: java.util.Map _globalTypes>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set keySet()>();

        $r10 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z2 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r16 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r36 = (javax.xml.namespace.QName) $r16;

        $r17 = virtualinvoke r36.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $r18 = staticinvoke <org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument getSchemaDocumentForTNS(java.util.Map,java.lang.String)>($r0, $r17);

        $r19 = r1.<org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: java.util.Map _globalTypes>;

        $r20 = interfaceinvoke $r19.<java.util.Map: java.lang.Object get(java.lang.Object)>(r36);

        $r21 = (org.apache.xmlbeans.impl.inst2xsd.util.Type) $r20;

        specialinvoke r1.<org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: void fillUpGlobalType(org.apache.xmlbeans.impl.inst2xsd.util.Type,org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument,java.lang.String)>($r21, $r18, $r17);

        goto label5;

     label6:
        $r11 = interfaceinvoke $r0.<java.util.Map: java.util.Collection values()>();

        $i0 = interfaceinvoke $r11.<java.util.Collection: int size()>();

        $r12 = newarray (org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument)[$i0];

        $r13 = interfaceinvoke $r11.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r12);

        $r14 = (org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument[]) $r13;

        $r15 = (org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument[]) $r14;

        return $r15;
    }

    private static org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument getSchemaDocumentForTNS(java.util.Map, java.lang.String)
    {
        java.util.Map r0;
        java.lang.Object $r2;
        org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument $r3, r4;
        java.lang.String r1;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.String;

        $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument) $r2;

        if r4 != null goto label1;

        $r3 = staticinvoke <org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Factory: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument newInstance()>();

        r4 = $r3;

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3);

     label1:
        return r4;
    }

    private static org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema getTopLevelSchemaElement(org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument, java.lang.String)
    {
        org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema $r1, $r2, r6;
        org.apache.xmlbeans.impl.xb.xsdschema.FormChoice$Enum $r3, $r4;
        org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument r0;
        java.lang.String r5;
        boolean $z0;

        r0 := @parameter0: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument;

        r5 := @parameter1: java.lang.String;

        $r1 = interfaceinvoke r0.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema getSchema()>();

        r6 = $r1;

        if $r1 != null goto label1;

        $r2 = interfaceinvoke r0.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema addNewSchema()>();

        r6 = $r2;

        $r3 = staticinvoke <org.apache.xmlbeans.impl.xb.xsdschema.FormChoice$Enum: org.apache.xmlbeans.impl.xb.xsdschema.FormChoice$Enum forString(java.lang.String)>("unqualified");

        interfaceinvoke $r2.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: void setAttributeFormDefault(org.apache.xmlbeans.impl.xb.xsdschema.FormChoice$Enum)>($r3);

        $r4 = staticinvoke <org.apache.xmlbeans.impl.xb.xsdschema.FormChoice$Enum: org.apache.xmlbeans.impl.xb.xsdschema.FormChoice$Enum forString(java.lang.String)>("qualified");

        interfaceinvoke $r2.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: void setElementFormDefault(org.apache.xmlbeans.impl.xb.xsdschema.FormChoice$Enum)>($r4);

        $z0 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 != 0 goto label1;

        interfaceinvoke $r2.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: void setTargetNamespace(java.lang.String)>(r5);

     label1:
        return r6;
    }

    private void fillUpGlobalElement(org.apache.xmlbeans.impl.inst2xsd.util.Element, org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument, java.lang.String)
    {
        java.lang.AssertionError $r12;
        org.apache.xmlbeans.impl.xb.xsdschema.TopLevelElement $r3;
        org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder r9;
        org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument r0;
        java.lang.String r1, $r6, $r7, $r11;
        boolean $z0, $z1, $z2, $z3;
        org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema $r2;
        org.apache.xmlbeans.impl.inst2xsd.util.Element r4;
        org.apache.xmlbeans.impl.inst2xsd.util.Type $r8;
        javax.xml.namespace.QName $r5, $r10;

        r9 := @this: org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder;

        r4 := @parameter0: org.apache.xmlbeans.impl.inst2xsd.util.Element;

        r0 := @parameter1: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument;

        r1 := @parameter2: java.lang.String;

        $z0 = <org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r10 = virtualinvoke r4.<org.apache.xmlbeans.impl.inst2xsd.util.Element: javax.xml.namespace.QName getName()>();

        $r11 = virtualinvoke $r10.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z3 != 0 goto label1;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label1:
        $r2 = staticinvoke <org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema getTopLevelSchemaElement(org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument,java.lang.String)>(r0, r1);

        $r3 = interfaceinvoke $r2.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: org.apache.xmlbeans.impl.xb.xsdschema.TopLevelElement addNewElement()>();

        $r5 = virtualinvoke r4.<org.apache.xmlbeans.impl.inst2xsd.util.Element: javax.xml.namespace.QName getName()>();

        $r6 = virtualinvoke $r5.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        interfaceinvoke $r3.<org.apache.xmlbeans.impl.xb.xsdschema.TopLevelElement: void setName(java.lang.String)>($r6);

        $z1 = virtualinvoke r4.<org.apache.xmlbeans.impl.inst2xsd.util.Element: boolean isNillable()>();

        if $z1 == 0 goto label2;

        $z2 = virtualinvoke r4.<org.apache.xmlbeans.impl.inst2xsd.util.Element: boolean isNillable()>();

        interfaceinvoke $r3.<org.apache.xmlbeans.impl.xb.xsdschema.TopLevelElement: void setNillable(boolean)>($z2);

     label2:
        $r7 = virtualinvoke r4.<org.apache.xmlbeans.impl.inst2xsd.util.Element: java.lang.String getComment()>();

        staticinvoke <org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: void fillUpElementDocumentation(org.apache.xmlbeans.impl.xb.xsdschema.Element,java.lang.String)>($r3, $r7);

        $r8 = virtualinvoke r4.<org.apache.xmlbeans.impl.inst2xsd.util.Element: org.apache.xmlbeans.impl.inst2xsd.util.Type getType()>();

        specialinvoke r9.<org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: void fillUpTypeOnElement(org.apache.xmlbeans.impl.inst2xsd.util.Type,org.apache.xmlbeans.impl.xb.xsdschema.Element,java.lang.String)>($r8, $r3, r1);

        return;
    }

    protected void fillUpLocalElement(org.apache.xmlbeans.impl.inst2xsd.util.Element, org.apache.xmlbeans.impl.xb.xsdschema.LocalElement, java.lang.String)
    {
        org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder r10;
        java.math.BigInteger $r23;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.apache.xmlbeans.impl.inst2xsd.util.Element r1;
        javax.xml.namespace.QName $r3, $r12, $r14, $r18;
        java.lang.AssertionError $r20, $r21;
        java.lang.StringBuffer $r6, $r7, $r22;
        int $i0, $i1, $i2, $i3, $i5;
        java.lang.String $r2, $r8, r11, $r13, $r15, $r19;
        org.apache.xmlbeans.impl.inst2xsd.util.Type $r17;
        org.apache.xmlbeans.impl.xb.xsdschema.LocalElement r0;

        r10 := @this: org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder;

        r1 := @parameter0: org.apache.xmlbeans.impl.inst2xsd.util.Element;

        r0 := @parameter1: org.apache.xmlbeans.impl.xb.xsdschema.LocalElement;

        r11 := @parameter2: java.lang.String;

        $r2 = virtualinvoke r1.<org.apache.xmlbeans.impl.inst2xsd.util.Element: java.lang.String getComment()>();

        staticinvoke <org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: void fillUpElementDocumentation(org.apache.xmlbeans.impl.xb.xsdschema.Element,java.lang.String)>(r0, $r2);

        $z0 = virtualinvoke r1.<org.apache.xmlbeans.impl.inst2xsd.util.Element: boolean isRef()>();

        if $z0 != 0 goto label2;

        $z5 = <org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: boolean $assertionsDisabled>;

        if $z5 != 0 goto label1;

        $r12 = virtualinvoke r1.<org.apache.xmlbeans.impl.inst2xsd.util.Element: javax.xml.namespace.QName getName()>();

        $r13 = virtualinvoke $r12.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $z6 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r11);

        if $z6 != 0 goto label1;

        $r14 = virtualinvoke r1.<org.apache.xmlbeans.impl.inst2xsd.util.Element: javax.xml.namespace.QName getName()>();

        $r15 = virtualinvoke $r14.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $i2 = virtualinvoke $r15.<java.lang.String: int length()>();

        if $i2 == 0 goto label1;

        $r20 = new java.lang.AssertionError;

        specialinvoke $r20.<java.lang.AssertionError: void <init>()>();

        throw $r20;

     label1:
        $r17 = virtualinvoke r1.<org.apache.xmlbeans.impl.inst2xsd.util.Element: org.apache.xmlbeans.impl.inst2xsd.util.Type getType()>();

        specialinvoke r10.<org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: void fillUpTypeOnElement(org.apache.xmlbeans.impl.inst2xsd.util.Type,org.apache.xmlbeans.impl.xb.xsdschema.Element,java.lang.String)>($r17, r0, r11);

        $r18 = virtualinvoke r1.<org.apache.xmlbeans.impl.inst2xsd.util.Element: javax.xml.namespace.QName getName()>();

        $r19 = virtualinvoke $r18.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        interfaceinvoke r0.<org.apache.xmlbeans.impl.xb.xsdschema.LocalElement: void setName(java.lang.String)>($r19);

        goto label3;

     label2:
        $r3 = virtualinvoke r1.<org.apache.xmlbeans.impl.inst2xsd.util.Element: javax.xml.namespace.QName getName()>();

        interfaceinvoke r0.<org.apache.xmlbeans.impl.xb.xsdschema.LocalElement: void setRef(javax.xml.namespace.QName)>($r3);

        $z1 = <org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        $z4 = virtualinvoke r1.<org.apache.xmlbeans.impl.inst2xsd.util.Element: boolean isNillable()>();

        if $z4 == 0 goto label3;

        $r21 = new java.lang.AssertionError;

        specialinvoke $r21.<java.lang.AssertionError: void <init>()>();

        throw $r21;

     label3:
        $i3 = virtualinvoke r1.<org.apache.xmlbeans.impl.inst2xsd.util.Element: int getMaxOccurs()>();

        $i5 = (int) -1;

        if $i3 != $i5 goto label4;

        interfaceinvoke r0.<org.apache.xmlbeans.impl.xb.xsdschema.LocalElement: void setMaxOccurs(java.lang.Object)>("unbounded");

     label4:
        $i0 = virtualinvoke r1.<org.apache.xmlbeans.impl.inst2xsd.util.Element: int getMinOccurs()>();

        if $i0 == 1 goto label5;

        $r23 = new java.math.BigInteger;

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $i1 = virtualinvoke r1.<org.apache.xmlbeans.impl.inst2xsd.util.Element: int getMinOccurs()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r23.<java.math.BigInteger: void <init>(java.lang.String)>($r8);

        interfaceinvoke r0.<org.apache.xmlbeans.impl.xb.xsdschema.LocalElement: void setMinOccurs(java.math.BigInteger)>($r23);

     label5:
        $z2 = virtualinvoke r1.<org.apache.xmlbeans.impl.inst2xsd.util.Element: boolean isNillable()>();

        if $z2 == 0 goto label6;

        $z3 = virtualinvoke r1.<org.apache.xmlbeans.impl.inst2xsd.util.Element: boolean isNillable()>();

        interfaceinvoke r0.<org.apache.xmlbeans.impl.xb.xsdschema.LocalElement: void setNillable(boolean)>($z3);

     label6:
        return;
    }

    private void fillUpTypeOnElement(org.apache.xmlbeans.impl.inst2xsd.util.Type, org.apache.xmlbeans.impl.xb.xsdschema.Element, java.lang.String)
    {
        org.apache.xmlbeans.impl.xb.xsdschema.LocalComplexType $r2;
        java.lang.AssertionError $r8;
        org.apache.xmlbeans.impl.inst2xsd.util.Type r0;
        org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder r3;
        org.apache.xmlbeans.impl.xb.xsdschema.Element r1;
        int $i0;
        java.lang.String r4;
        javax.xml.namespace.QName $r5, $r6, $r7;
        boolean $z0, $z1, $z2;

        r3 := @this: org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder;

        r0 := @parameter0: org.apache.xmlbeans.impl.inst2xsd.util.Type;

        r1 := @parameter1: org.apache.xmlbeans.impl.xb.xsdschema.Element;

        r4 := @parameter2: java.lang.String;

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.inst2xsd.util.Type: boolean isGlobal()>();

        if $z0 == 0 goto label2;

        $z2 = <org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: boolean $assertionsDisabled>;

        if $z2 != 0 goto label1;

        $r7 = virtualinvoke r0.<org.apache.xmlbeans.impl.inst2xsd.util.Type: javax.xml.namespace.QName getName()>();

        if $r7 != null goto label1;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>(java.lang.Object)>("Global type must have a name.");

        throw $r8;

     label1:
        $r6 = virtualinvoke r0.<org.apache.xmlbeans.impl.inst2xsd.util.Type: javax.xml.namespace.QName getName()>();

        interfaceinvoke r1.<org.apache.xmlbeans.impl.xb.xsdschema.Element: void setType(javax.xml.namespace.QName)>($r6);

        goto label5;

     label2:
        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.inst2xsd.util.Type: int getContentType()>();

        if $i0 != 1 goto label4;

        $z1 = virtualinvoke r0.<org.apache.xmlbeans.impl.inst2xsd.util.Type: boolean isEnumeration()>();

        if $z1 == 0 goto label3;

        specialinvoke r3.<org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: void fillUpEnumeration(org.apache.xmlbeans.impl.inst2xsd.util.Type,org.apache.xmlbeans.impl.xb.xsdschema.Element)>(r0, r1);

        goto label5;

     label3:
        $r5 = virtualinvoke r0.<org.apache.xmlbeans.impl.inst2xsd.util.Type: javax.xml.namespace.QName getName()>();

        interfaceinvoke r1.<org.apache.xmlbeans.impl.xb.xsdschema.Element: void setType(javax.xml.namespace.QName)>($r5);

        goto label5;

     label4:
        $r2 = interfaceinvoke r1.<org.apache.xmlbeans.impl.xb.xsdschema.Element: org.apache.xmlbeans.impl.xb.xsdschema.LocalComplexType addNewComplexType()>();

        virtualinvoke r3.<org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: void fillUpContentForComplexType(org.apache.xmlbeans.impl.inst2xsd.util.Type,org.apache.xmlbeans.impl.xb.xsdschema.ComplexType,java.lang.String)>(r0, $r2, r4);

     label5:
        return;
    }

    private void fillUpEnumeration(org.apache.xmlbeans.impl.inst2xsd.util.Type, org.apache.xmlbeans.impl.xb.xsdschema.Element)
    {
        org.apache.xmlbeans.XmlQName $r20;
        org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder r22;
        org.apache.xmlbeans.impl.xb.xsdschema.Element r0;
        boolean $z0, $z1, $z2, $z3;
        org.apache.xmlbeans.impl.xb.xsdschema.NoFixedFacet $r8, $r13;
        org.apache.xmlbeans.impl.xb.xsdschema.RestrictionDocument$Restriction $r2;
        java.util.List $r5, $r6, $r10, $r11;
        javax.xml.namespace.QName $r4, $r17, r23;
        org.apache.xmlbeans.impl.xb.xsdschema.LocalSimpleType $r1;
        org.apache.xmlbeans.XmlCursor $r14;
        java.lang.AssertionError $r21;
        int $i0, $i1, i2, i3;
        java.lang.String $r15, $r16, $r18, $r19, r24;
        org.apache.xmlbeans.impl.inst2xsd.util.Type r3;
        org.apache.xmlbeans.XmlString $r9;
        java.lang.Object $r7, $r12;

        r22 := @this: org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder;

        r3 := @parameter0: org.apache.xmlbeans.impl.inst2xsd.util.Type;

        r0 := @parameter1: org.apache.xmlbeans.impl.xb.xsdschema.Element;

        $z0 = <org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $z2 = virtualinvoke r3.<org.apache.xmlbeans.impl.inst2xsd.util.Type: boolean isEnumeration()>();

        if $z2 == 0 goto label1;

        $z3 = virtualinvoke r3.<org.apache.xmlbeans.impl.inst2xsd.util.Type: boolean isComplexType()>();

        if $z3 == 0 goto label2;

     label1:
        $r21 = new java.lang.AssertionError;

        specialinvoke $r21.<java.lang.AssertionError: void <init>(java.lang.Object)>("Enumerations must be on simple types only.");

        throw $r21;

     label2:
        $r1 = interfaceinvoke r0.<org.apache.xmlbeans.impl.xb.xsdschema.Element: org.apache.xmlbeans.impl.xb.xsdschema.LocalSimpleType addNewSimpleType()>();

        $r2 = interfaceinvoke $r1.<org.apache.xmlbeans.impl.xb.xsdschema.LocalSimpleType: org.apache.xmlbeans.impl.xb.xsdschema.RestrictionDocument$Restriction addNewRestriction()>();

        $r4 = virtualinvoke r3.<org.apache.xmlbeans.impl.inst2xsd.util.Type: javax.xml.namespace.QName getName()>();

        interfaceinvoke $r2.<org.apache.xmlbeans.impl.xb.xsdschema.RestrictionDocument$Restriction: void setBase(javax.xml.namespace.QName)>($r4);

        $z1 = virtualinvoke r3.<org.apache.xmlbeans.impl.inst2xsd.util.Type: boolean isQNameEnumeration()>();

        if $z1 == 0 goto label5;

        i2 = 0;

     label3:
        $r10 = virtualinvoke r3.<org.apache.xmlbeans.impl.inst2xsd.util.Type: java.util.List getEnumerationQNames()>();

        $i1 = interfaceinvoke $r10.<java.util.List: int size()>();

        if i2 >= $i1 goto label4;

        $r11 = virtualinvoke r3.<org.apache.xmlbeans.impl.inst2xsd.util.Type: java.util.List getEnumerationQNames()>();

        $r12 = interfaceinvoke $r11.<java.util.List: java.lang.Object get(int)>(i2);

        r23 = (javax.xml.namespace.QName) $r12;

        staticinvoke <org.apache.xmlbeans.XmlQName$Factory: org.apache.xmlbeans.XmlQName newValue(java.lang.Object)>(r23);

        $r13 = interfaceinvoke $r2.<org.apache.xmlbeans.impl.xb.xsdschema.RestrictionDocument$Restriction: org.apache.xmlbeans.impl.xb.xsdschema.NoFixedFacet addNewEnumeration()>();

        $r14 = interfaceinvoke $r13.<org.apache.xmlbeans.impl.xb.xsdschema.NoFixedFacet: org.apache.xmlbeans.XmlCursor newCursor()>();

        $r15 = virtualinvoke r23.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $r16 = interfaceinvoke $r14.<org.apache.xmlbeans.XmlCursor: java.lang.String prefixForNamespace(java.lang.String)>($r15);

        interfaceinvoke $r14.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        $r17 = new javax.xml.namespace.QName;

        $r18 = virtualinvoke r23.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $r19 = virtualinvoke r23.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        specialinvoke $r17.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r18, $r19, $r16);

        $r20 = staticinvoke <org.apache.xmlbeans.XmlQName$Factory: org.apache.xmlbeans.XmlQName newValue(java.lang.Object)>($r17);

        interfaceinvoke $r13.<org.apache.xmlbeans.impl.xb.xsdschema.NoFixedFacet: void setValue(org.apache.xmlbeans.XmlAnySimpleType)>($r20);

        i2 = i2 + 1;

        goto label3;

     label4:
        goto label7;

     label5:
        i3 = 0;

     label6:
        $r5 = virtualinvoke r3.<org.apache.xmlbeans.impl.inst2xsd.util.Type: java.util.List getEnumerationValues()>();

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        if i3 >= $i0 goto label7;

        $r6 = virtualinvoke r3.<org.apache.xmlbeans.impl.inst2xsd.util.Type: java.util.List getEnumerationValues()>();

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(i3);

        r24 = (java.lang.String) $r7;

        $r8 = interfaceinvoke $r2.<org.apache.xmlbeans.impl.xb.xsdschema.RestrictionDocument$Restriction: org.apache.xmlbeans.impl.xb.xsdschema.NoFixedFacet addNewEnumeration()>();

        $r9 = staticinvoke <org.apache.xmlbeans.XmlString$Factory: org.apache.xmlbeans.XmlString newValue(java.lang.Object)>(r24);

        interfaceinvoke $r8.<org.apache.xmlbeans.impl.xb.xsdschema.NoFixedFacet: void setValue(org.apache.xmlbeans.XmlAnySimpleType)>($r9);

        i3 = i3 + 1;

        goto label6;

     label7:
        return;
    }

    private void fillUpAttributesInComplexTypesSimpleContent(org.apache.xmlbeans.impl.inst2xsd.util.Type, org.apache.xmlbeans.impl.xb.xsdschema.SimpleExtensionType, java.lang.String)
    {
        org.apache.xmlbeans.impl.inst2xsd.util.Attribute r4;
        org.apache.xmlbeans.impl.xb.xsdschema.Attribute $r6;
        org.apache.xmlbeans.impl.inst2xsd.util.Type r0;
        java.util.List $r1, $r2;
        org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder r7;
        int $i0, i1;
        java.lang.Object $r3;
        java.lang.String r8;
        org.apache.xmlbeans.impl.xb.xsdschema.SimpleExtensionType r5;

        r7 := @this: org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder;

        r0 := @parameter0: org.apache.xmlbeans.impl.inst2xsd.util.Type;

        r5 := @parameter1: org.apache.xmlbeans.impl.xb.xsdschema.SimpleExtensionType;

        r8 := @parameter2: java.lang.String;

        i1 = 0;

     label1:
        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.inst2xsd.util.Type: java.util.List getAttributes()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i1 >= $i0 goto label2;

        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.inst2xsd.util.Type: java.util.List getAttributes()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i1);

        r4 = (org.apache.xmlbeans.impl.inst2xsd.util.Attribute) $r3;

        $r6 = interfaceinvoke r5.<org.apache.xmlbeans.impl.xb.xsdschema.SimpleExtensionType: org.apache.xmlbeans.impl.xb.xsdschema.Attribute addNewAttribute()>();

        virtualinvoke r7.<org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: void fillUpLocalAttribute(org.apache.xmlbeans.impl.inst2xsd.util.Attribute,org.apache.xmlbeans.impl.xb.xsdschema.Attribute,java.lang.String)>(r4, $r6, r8);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void fillUpAttributesInComplexTypesComplexContent(org.apache.xmlbeans.impl.inst2xsd.util.Type, org.apache.xmlbeans.impl.xb.xsdschema.ComplexType, java.lang.String)
    {
        org.apache.xmlbeans.impl.inst2xsd.util.Attribute r4;
        org.apache.xmlbeans.impl.xb.xsdschema.Attribute $r6;
        org.apache.xmlbeans.impl.inst2xsd.util.Type r0;
        java.util.List $r1, $r2;
        org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder r7;
        int $i0, i1;
        java.lang.Object $r3;
        java.lang.String r8;
        org.apache.xmlbeans.impl.xb.xsdschema.ComplexType r5;

        r7 := @this: org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder;

        r0 := @parameter0: org.apache.xmlbeans.impl.inst2xsd.util.Type;

        r5 := @parameter1: org.apache.xmlbeans.impl.xb.xsdschema.ComplexType;

        r8 := @parameter2: java.lang.String;

        i1 = 0;

     label1:
        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.inst2xsd.util.Type: java.util.List getAttributes()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i1 >= $i0 goto label2;

        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.inst2xsd.util.Type: java.util.List getAttributes()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i1);

        r4 = (org.apache.xmlbeans.impl.inst2xsd.util.Attribute) $r3;

        $r6 = interfaceinvoke r5.<org.apache.xmlbeans.impl.xb.xsdschema.ComplexType: org.apache.xmlbeans.impl.xb.xsdschema.Attribute addNewAttribute()>();

        virtualinvoke r7.<org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: void fillUpLocalAttribute(org.apache.xmlbeans.impl.inst2xsd.util.Attribute,org.apache.xmlbeans.impl.xb.xsdschema.Attribute,java.lang.String)>(r4, $r6, r8);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    protected void fillUpLocalAttribute(org.apache.xmlbeans.impl.inst2xsd.util.Attribute, org.apache.xmlbeans.impl.xb.xsdschema.Attribute, java.lang.String)
    {
        org.apache.xmlbeans.impl.xb.xsdschema.Attribute$Use$Enum $r2;
        java.lang.AssertionError $r8;
        org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder r11;
        java.lang.String $r4, r5, $r7, $r15;
        boolean $z0, $z1, $z2, $z3;
        org.apache.xmlbeans.impl.inst2xsd.util.Attribute r0, $r9;
        org.apache.xmlbeans.impl.xb.xsdschema.Attribute r1;
        org.apache.xmlbeans.impl.inst2xsd.util.Type $r12;
        javax.xml.namespace.QName $r3, $r6, $r10, $r13, $r14;

        r11 := @this: org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder;

        r0 := @parameter0: org.apache.xmlbeans.impl.inst2xsd.util.Attribute;

        r1 := @parameter1: org.apache.xmlbeans.impl.xb.xsdschema.Attribute;

        r5 := @parameter2: java.lang.String;

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.inst2xsd.util.Attribute: boolean isRef()>();

        if $z0 == 0 goto label1;

        $r9 = virtualinvoke r0.<org.apache.xmlbeans.impl.inst2xsd.util.Attribute: org.apache.xmlbeans.impl.inst2xsd.util.Attribute getRef()>();

        $r10 = virtualinvoke $r9.<org.apache.xmlbeans.impl.inst2xsd.util.Attribute: javax.xml.namespace.QName getName()>();

        interfaceinvoke r1.<org.apache.xmlbeans.impl.xb.xsdschema.Attribute: void setRef(javax.xml.namespace.QName)>($r10);

        goto label3;

     label1:
        $z1 = <org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.inst2xsd.util.Attribute: javax.xml.namespace.QName getName()>();

        $r4 = virtualinvoke $r3.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        if $r4 == r5 goto label2;

        $r6 = virtualinvoke r0.<org.apache.xmlbeans.impl.inst2xsd.util.Attribute: javax.xml.namespace.QName getName()>();

        $r7 = virtualinvoke $r6.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z2 != 0 goto label2;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label2:
        $r12 = virtualinvoke r0.<org.apache.xmlbeans.impl.inst2xsd.util.Attribute: org.apache.xmlbeans.impl.inst2xsd.util.Type getType()>();

        $r13 = virtualinvoke $r12.<org.apache.xmlbeans.impl.inst2xsd.util.Type: javax.xml.namespace.QName getName()>();

        interfaceinvoke r1.<org.apache.xmlbeans.impl.xb.xsdschema.Attribute: void setType(javax.xml.namespace.QName)>($r13);

        $r14 = virtualinvoke r0.<org.apache.xmlbeans.impl.inst2xsd.util.Attribute: javax.xml.namespace.QName getName()>();

        $r15 = virtualinvoke $r14.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        interfaceinvoke r1.<org.apache.xmlbeans.impl.xb.xsdschema.Attribute: void setName(java.lang.String)>($r15);

        $z3 = virtualinvoke r0.<org.apache.xmlbeans.impl.inst2xsd.util.Attribute: boolean isOptional()>();

        if $z3 == 0 goto label3;

        $r2 = <org.apache.xmlbeans.impl.xb.xsdschema.Attribute$Use: org.apache.xmlbeans.impl.xb.xsdschema.Attribute$Use$Enum OPTIONAL>;

        interfaceinvoke r1.<org.apache.xmlbeans.impl.xb.xsdschema.Attribute: void setUse(org.apache.xmlbeans.impl.xb.xsdschema.Attribute$Use$Enum)>($r2);

     label3:
        return;
    }

    protected void fillUpContentForComplexType(org.apache.xmlbeans.impl.inst2xsd.util.Type, org.apache.xmlbeans.impl.xb.xsdschema.ComplexType, java.lang.String)
    {
        java.lang.IllegalStateException $r1;
        org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder r5;
        java.math.BigInteger $r4;
        boolean $z0, $z1, $z2;
        org.apache.xmlbeans.impl.xb.xsdschema.SimpleExtensionType $r13;
        org.apache.xmlbeans.impl.inst2xsd.util.Element r9;
        java.util.List $r7, $r21;
        javax.xml.namespace.QName $r15, $r19;
        java.lang.AssertionError $r11, $r17;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6;
        java.lang.String r6;
        org.apache.xmlbeans.impl.xb.xsdschema.ComplexType r2;
        org.apache.xmlbeans.impl.xb.xsdschema.ExplicitGroup $r3, r20;
        org.apache.xmlbeans.impl.xb.xsdschema.SimpleContentDocument$SimpleContent $r12;
        org.apache.xmlbeans.impl.inst2xsd.util.Type r0, $r14, $r16, $r18;
        java.lang.Object $r8;
        org.apache.xmlbeans.impl.xb.xsdschema.LocalElement $r10;

        r5 := @this: org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder;

        r0 := @parameter0: org.apache.xmlbeans.impl.inst2xsd.util.Type;

        r2 := @parameter1: org.apache.xmlbeans.impl.xb.xsdschema.ComplexType;

        r6 := @parameter2: java.lang.String;

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.inst2xsd.util.Type: int getContentType()>();

        if $i0 != 2 goto label03;

        $r12 = interfaceinvoke r2.<org.apache.xmlbeans.impl.xb.xsdschema.ComplexType: org.apache.xmlbeans.impl.xb.xsdschema.SimpleContentDocument$SimpleContent addNewSimpleContent()>();

        $z2 = <org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: boolean $assertionsDisabled>;

        if $z2 != 0 goto label02;

        $r16 = virtualinvoke r0.<org.apache.xmlbeans.impl.inst2xsd.util.Type: org.apache.xmlbeans.impl.inst2xsd.util.Type getExtensionType()>();

        if $r16 == null goto label01;

        $r18 = virtualinvoke r0.<org.apache.xmlbeans.impl.inst2xsd.util.Type: org.apache.xmlbeans.impl.inst2xsd.util.Type getExtensionType()>();

        $r19 = virtualinvoke $r18.<org.apache.xmlbeans.impl.inst2xsd.util.Type: javax.xml.namespace.QName getName()>();

        if $r19 != null goto label02;

     label01:
        $r17 = new java.lang.AssertionError;

        specialinvoke $r17.<java.lang.AssertionError: void <init>(java.lang.Object)>("Extension type must exist and be named for a COMPLEX_TYPE_SIMPLE_CONTENT");

        throw $r17;

     label02:
        $r13 = interfaceinvoke $r12.<org.apache.xmlbeans.impl.xb.xsdschema.SimpleContentDocument$SimpleContent: org.apache.xmlbeans.impl.xb.xsdschema.SimpleExtensionType addNewExtension()>();

        $r14 = virtualinvoke r0.<org.apache.xmlbeans.impl.inst2xsd.util.Type: org.apache.xmlbeans.impl.inst2xsd.util.Type getExtensionType()>();

        $r15 = virtualinvoke $r14.<org.apache.xmlbeans.impl.inst2xsd.util.Type: javax.xml.namespace.QName getName()>();

        interfaceinvoke $r13.<org.apache.xmlbeans.impl.xb.xsdschema.SimpleExtensionType: void setBase(javax.xml.namespace.QName)>($r15);

        specialinvoke r5.<org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: void fillUpAttributesInComplexTypesSimpleContent(org.apache.xmlbeans.impl.inst2xsd.util.Type,org.apache.xmlbeans.impl.xb.xsdschema.SimpleExtensionType,java.lang.String)>(r0, $r13, r6);

        goto label12;

     label03:
        $i1 = virtualinvoke r0.<org.apache.xmlbeans.impl.inst2xsd.util.Type: int getContentType()>();

        if $i1 != 4 goto label04;

        interfaceinvoke r2.<org.apache.xmlbeans.impl.xb.xsdschema.ComplexType: void setMixed(boolean)>(1);

     label04:
        $i2 = virtualinvoke r0.<org.apache.xmlbeans.impl.inst2xsd.util.Type: int getContentType()>();

        if $i2 != 5 goto label05;

        r20 = null;

        goto label08;

     label05:
        $i3 = virtualinvoke r0.<org.apache.xmlbeans.impl.inst2xsd.util.Type: int getTopParticleForComplexOrMixedContent()>();

        if $i3 != 1 goto label06;

        r20 = interfaceinvoke r2.<org.apache.xmlbeans.impl.xb.xsdschema.ComplexType: org.apache.xmlbeans.impl.xb.xsdschema.ExplicitGroup addNewSequence()>();

        goto label08;

     label06:
        $i4 = virtualinvoke r0.<org.apache.xmlbeans.impl.inst2xsd.util.Type: int getTopParticleForComplexOrMixedContent()>();

        if $i4 != 2 goto label07;

        $r3 = interfaceinvoke r2.<org.apache.xmlbeans.impl.xb.xsdschema.ComplexType: org.apache.xmlbeans.impl.xb.xsdschema.ExplicitGroup addNewChoice()>();

        r20 = $r3;

        interfaceinvoke $r3.<org.apache.xmlbeans.impl.xb.xsdschema.ExplicitGroup: void setMaxOccurs(java.lang.Object)>("unbounded");

        $r4 = new java.math.BigInteger;

        specialinvoke $r4.<java.math.BigInteger: void <init>(java.lang.String)>("0");

        interfaceinvoke $r3.<org.apache.xmlbeans.impl.xb.xsdschema.ExplicitGroup: void setMinOccurs(java.math.BigInteger)>($r4);

        goto label08;

     label07:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unknown particle type in complex and mixed content");

        throw $r1;

     label08:
        i5 = 0;

     label09:
        $r21 = virtualinvoke r0.<org.apache.xmlbeans.impl.inst2xsd.util.Type: java.util.List getElements()>();

        $i6 = interfaceinvoke $r21.<java.util.List: int size()>();

        if i5 >= $i6 goto label11;

        $r7 = virtualinvoke r0.<org.apache.xmlbeans.impl.inst2xsd.util.Type: java.util.List getElements()>();

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(i5);

        r9 = (org.apache.xmlbeans.impl.inst2xsd.util.Element) $r8;

        $z0 = <org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: boolean $assertionsDisabled>;

        if $z0 != 0 goto label10;

        $z1 = virtualinvoke r9.<org.apache.xmlbeans.impl.inst2xsd.util.Element: boolean isGlobal()>();

        if $z1 == 0 goto label10;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label10:
        $r10 = interfaceinvoke r20.<org.apache.xmlbeans.impl.xb.xsdschema.ExplicitGroup: org.apache.xmlbeans.impl.xb.xsdschema.LocalElement addNewElement()>();

        virtualinvoke r5.<org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: void fillUpLocalElement(org.apache.xmlbeans.impl.inst2xsd.util.Element,org.apache.xmlbeans.impl.xb.xsdschema.LocalElement,java.lang.String)>(r9, $r10, r6);

        i5 = i5 + 1;

        goto label09;

     label11:
        specialinvoke r5.<org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: void fillUpAttributesInComplexTypesComplexContent(org.apache.xmlbeans.impl.inst2xsd.util.Type,org.apache.xmlbeans.impl.xb.xsdschema.ComplexType,java.lang.String)>(r0, r2, r6);

     label12:
        return;
    }

    private void fillUpGlobalAttribute(org.apache.xmlbeans.impl.inst2xsd.util.Attribute, org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument, java.lang.String)
    {
        java.lang.IllegalStateException $r8;
        java.lang.AssertionError $r12;
        org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder r13;
        int $i0;
        org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument r0;
        java.lang.String r1, $r6, $r11;
        boolean $z0, $z1;
        org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema $r2;
        org.apache.xmlbeans.impl.inst2xsd.util.Attribute r4;
        org.apache.xmlbeans.impl.xb.xsdschema.TopLevelAttribute $r3;
        org.apache.xmlbeans.impl.inst2xsd.util.Type $r7;
        javax.xml.namespace.QName $r5, $r9, $r10;

        r13 := @this: org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder;

        r4 := @parameter0: org.apache.xmlbeans.impl.inst2xsd.util.Attribute;

        r0 := @parameter1: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument;

        r1 := @parameter2: java.lang.String;

        $z0 = <org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r10 = virtualinvoke r4.<org.apache.xmlbeans.impl.inst2xsd.util.Attribute: javax.xml.namespace.QName getName()>();

        $r11 = virtualinvoke $r10.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z1 != 0 goto label1;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label1:
        $r2 = staticinvoke <org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema getTopLevelSchemaElement(org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument,java.lang.String)>(r0, r1);

        $r3 = interfaceinvoke $r2.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: org.apache.xmlbeans.impl.xb.xsdschema.TopLevelAttribute addNewAttribute()>();

        $r5 = virtualinvoke r4.<org.apache.xmlbeans.impl.inst2xsd.util.Attribute: javax.xml.namespace.QName getName()>();

        $r6 = virtualinvoke $r5.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        interfaceinvoke $r3.<org.apache.xmlbeans.impl.xb.xsdschema.TopLevelAttribute: void setName(java.lang.String)>($r6);

        $r7 = virtualinvoke r4.<org.apache.xmlbeans.impl.inst2xsd.util.Attribute: org.apache.xmlbeans.impl.inst2xsd.util.Type getType()>();

        $i0 = virtualinvoke $r7.<org.apache.xmlbeans.impl.inst2xsd.util.Type: int getContentType()>();

        if $i0 != 1 goto label2;

        $r9 = virtualinvoke $r7.<org.apache.xmlbeans.impl.inst2xsd.util.Type: javax.xml.namespace.QName getName()>();

        interfaceinvoke $r3.<org.apache.xmlbeans.impl.xb.xsdschema.TopLevelAttribute: void setType(javax.xml.namespace.QName)>($r9);

        goto label3;

     label2:
        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>()>();

        throw $r8;

     label3:
        return;
    }

    private static void fillUpElementDocumentation(org.apache.xmlbeans.impl.xb.xsdschema.Element, java.lang.String)
    {
        org.apache.xmlbeans.impl.xb.xsdschema.Element r1;
        int $i0;
        org.apache.xmlbeans.impl.xb.xsdschema.AnnotationDocument$Annotation $r2;
        org.apache.xmlbeans.XmlString $r4;
        java.lang.String r0;
        org.apache.xmlbeans.impl.xb.xsdschema.DocumentationDocument$Documentation $r3;

        r1 := @parameter0: org.apache.xmlbeans.impl.xb.xsdschema.Element;

        r0 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $r2 = interfaceinvoke r1.<org.apache.xmlbeans.impl.xb.xsdschema.Element: org.apache.xmlbeans.impl.xb.xsdschema.AnnotationDocument$Annotation addNewAnnotation()>();

        $r3 = interfaceinvoke $r2.<org.apache.xmlbeans.impl.xb.xsdschema.AnnotationDocument$Annotation: org.apache.xmlbeans.impl.xb.xsdschema.DocumentationDocument$Documentation addNewDocumentation()>();

        $r4 = staticinvoke <org.apache.xmlbeans.XmlString$Factory: org.apache.xmlbeans.XmlString newValue(java.lang.Object)>(r0);

        interfaceinvoke $r3.<org.apache.xmlbeans.impl.xb.xsdschema.DocumentationDocument$Documentation: org.apache.xmlbeans.XmlObject set(org.apache.xmlbeans.XmlObject)>($r4);

     label1:
        return;
    }

    private void fillUpGlobalType(org.apache.xmlbeans.impl.inst2xsd.util.Type, org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument, java.lang.String)
    {
        org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema $r2;
        org.apache.xmlbeans.impl.xb.xsdschema.TopLevelComplexType $r3;
        java.lang.AssertionError $r10;
        org.apache.xmlbeans.impl.inst2xsd.util.Type r4;
        org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder r7;
        org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument r0;
        java.lang.String r1, $r6, $r9;
        javax.xml.namespace.QName $r5, $r8;
        boolean $z0, $z1;

        r7 := @this: org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder;

        r4 := @parameter0: org.apache.xmlbeans.impl.inst2xsd.util.Type;

        r0 := @parameter1: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument;

        r1 := @parameter2: java.lang.String;

        $z0 = <org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r8 = virtualinvoke r4.<org.apache.xmlbeans.impl.inst2xsd.util.Type: javax.xml.namespace.QName getName()>();

        $r9 = virtualinvoke $r8.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z1 != 0 goto label1;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label1:
        $r2 = staticinvoke <org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema getTopLevelSchemaElement(org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument,java.lang.String)>(r0, r1);

        $r3 = interfaceinvoke $r2.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: org.apache.xmlbeans.impl.xb.xsdschema.TopLevelComplexType addNewComplexType()>();

        $r5 = virtualinvoke r4.<org.apache.xmlbeans.impl.inst2xsd.util.Type: javax.xml.namespace.QName getName()>();

        $r6 = virtualinvoke $r5.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        interfaceinvoke $r3.<org.apache.xmlbeans.impl.xb.xsdschema.TopLevelComplexType: void setName(java.lang.String)>($r6);

        virtualinvoke r7.<org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: void fillUpContentForComplexType(org.apache.xmlbeans.impl.inst2xsd.util.Type,org.apache.xmlbeans.impl.xb.xsdschema.ComplexType,java.lang.String)>(r4, $r3, r1);

        return;
    }

    public java.lang.String toString()
    {
        org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder r2;
        java.lang.StringBuffer $r0, $r1, $r4, $r5, $r7, $r8, $r10, $r11;
        java.util.Map $r3, $r6, $r9;
        java.lang.String $r12;

        r2 := @this: org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("TypeSystemHolder{\n\n_globalElements=");

        $r3 = r2.<org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: java.util.Map _globalElements>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\n_globalAttributes=");

        $r6 = r2.<org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: java.util.Map _globalAttributes>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\n_globalTypes=");

        $r9 = r2.<org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: java.util.Map _globalTypes>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n}");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r12;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        boolean $z0, $z1;

        $r0 = <org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: java.lang.Class class$org$apache$xmlbeans$impl$inst2xsd$util$TypeSystemHolder>;

        if $r0 != null goto label1;

        $r1 = staticinvoke <org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: java.lang.Class class$(java.lang.String)>("org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder");

        <org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: java.lang.Class class$org$apache$xmlbeans$impl$inst2xsd$util$TypeSystemHolder> = $r1;

        goto label2;

     label1:
        $r1 = <org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: java.lang.Class class$org$apache$xmlbeans$impl$inst2xsd$util$TypeSystemHolder>;

     label2:
        $z0 = virtualinvoke $r1.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        <org.apache.xmlbeans.impl.inst2xsd.util.TypeSystemHolder: boolean $assertionsDisabled> = $z1;

        return;
    }
}
