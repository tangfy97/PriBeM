public class org.apache.batik.ext.awt.image.rendered.FloodRed extends org.apache.batik.ext.awt.image.rendered.AbstractRed
{
    private java.awt.image.WritableRaster raster;

    public void <init>(java.awt.Rectangle)
    {
        java.awt.Color $r2;
        java.awt.Rectangle r1;
        org.apache.batik.ext.awt.image.rendered.FloodRed r0;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.FloodRed;

        r1 := @parameter0: java.awt.Rectangle;

        $r2 = new java.awt.Color;

        specialinvoke $r2.<java.awt.Color: void <init>(int,int,int,int)>(0, 0, 0, 0);

        specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.FloodRed: void <init>(java.awt.Rectangle,java.awt.Paint)>(r1, $r2);

        return;
    }

    public void <init>(java.awt.Rectangle, java.awt.Paint)
    {
        java.awt.Rectangle r2;
        java.awt.Point $r4;
        java.awt.image.SampleModel $r3;
        java.awt.Graphics2D $r8;
        int $i0, $i1, $i2, $i3, i4, i5;
        boolean $z0;
        org.apache.batik.ext.awt.image.rendered.FloodRed r0;
        java.awt.image.BufferedImage $r6;
        java.awt.image.ColorModel r1;
        java.awt.Paint r9;
        java.awt.image.WritableRaster $r5, $r7;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.FloodRed;

        r2 := @parameter0: java.awt.Rectangle;

        r9 := @parameter1: java.awt.Paint;

        specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: void <init>()>();

        r1 = <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel sRGB_Unpre>;

        $i0 = staticinvoke <org.apache.batik.ext.awt.image.rendered.AbstractTiledRed: int getDefaultTileSize()>();

        i4 = r2.<java.awt.Rectangle: int width>;

        if i4 <= $i0 goto label1;

        i4 = $i0;

     label1:
        $i3 = r2.<java.awt.Rectangle: int height>;

        i5 = $i3;

        if $i3 <= $i0 goto label2;

        i5 = $i0;

     label2:
        $r3 = virtualinvoke r1.<java.awt.image.ColorModel: java.awt.image.SampleModel createCompatibleSampleModel(int,int)>(i4, i5);

        virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: void init(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)>(null, r2, r1, $r3, 0, 0, null);

        $r4 = new java.awt.Point;

        specialinvoke $r4.<java.awt.Point: void <init>(int,int)>(0, 0);

        $r5 = staticinvoke <java.awt.image.Raster: java.awt.image.WritableRaster createWritableRaster(java.awt.image.SampleModel,java.awt.Point)>($r3, $r4);

        r0.<org.apache.batik.ext.awt.image.rendered.FloodRed: java.awt.image.WritableRaster raster> = $r5;

        $r6 = new java.awt.image.BufferedImage;

        $r7 = r0.<org.apache.batik.ext.awt.image.rendered.FloodRed: java.awt.image.WritableRaster raster>;

        $z0 = virtualinvoke r1.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        specialinvoke $r6.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>(r1, $r7, $z0, null);

        $r8 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.Graphics2D createGraphics(java.awt.image.BufferedImage)>($r6);

        virtualinvoke $r8.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(r9);

        $i2 = r2.<java.awt.Rectangle: int width>;

        $i1 = r2.<java.awt.Rectangle: int height>;

        virtualinvoke $r8.<java.awt.Graphics: void fillRect(int,int,int,int)>(0, 0, $i2, $i1);

        virtualinvoke $r8.<java.awt.Graphics: void dispose()>();

        return;
    }

    public java.awt.image.Raster getTile(int, int)
    {
        org.apache.batik.ext.awt.image.rendered.FloodRed r0;
        int i0, $i1, $i2, $i3, i4, i5, $i6, $i7, $i8, i9;
        java.awt.image.Raster $r2;
        java.awt.image.WritableRaster $r1;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.FloodRed;

        i0 := @parameter0: int;

        i5 := @parameter1: int;

        $i3 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileGridXOff>;

        $i1 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileWidth>;

        $i2 = i0 * $i1;

        i4 = $i3 + $i2;

        $i8 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileGridYOff>;

        $i6 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileHeight>;

        $i7 = i5 * $i6;

        i9 = $i8 + $i7;

        $r1 = r0.<org.apache.batik.ext.awt.image.rendered.FloodRed: java.awt.image.WritableRaster raster>;

        $r2 = virtualinvoke $r1.<java.awt.image.Raster: java.awt.image.Raster createTranslatedChild(int,int)>(i4, i9);

        return $r2;
    }

    public java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster)
    {
        java.awt.image.SampleModel $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15;
        java.awt.image.Raster $r3;
        boolean $z0;
        org.apache.batik.ext.awt.image.rendered.FloodRed r0;
        java.awt.image.WritableRaster r1;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.FloodRed;

        r1 := @parameter0: java.awt.image.WritableRaster;

        $i0 = virtualinvoke r1.<java.awt.image.Raster: int getMinX()>();

        $i1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getXTile(int)>($i0);

        $i2 = virtualinvoke r1.<java.awt.image.Raster: int getMinY()>();

        $i3 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getYTile(int)>($i2);

        $i4 = virtualinvoke r1.<java.awt.image.Raster: int getMinX()>();

        $i5 = virtualinvoke r1.<java.awt.image.Raster: int getWidth()>();

        $i6 = $i4 + $i5;

        $i7 = $i6 - 1;

        $i8 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getXTile(int)>($i7);

        $i9 = virtualinvoke r1.<java.awt.image.Raster: int getMinY()>();

        $i10 = virtualinvoke r1.<java.awt.image.Raster: int getHeight()>();

        $i11 = $i9 + $i10;

        $i12 = $i11 - 1;

        $i13 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getYTile(int)>($i12);

        $r2 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.image.SampleModel getSampleModel()>();

        $z0 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: boolean is_INT_PACK_Data(java.awt.image.SampleModel,boolean)>($r2, 0);

        i14 = $i3;

        goto label6;

     label1:
        i15 = $i1;

        goto label5;

     label2:
        $r3 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.FloodRed: java.awt.image.Raster getTile(int,int)>(i15, i14);

        if $z0 == 0 goto label3;

        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: void copyData_INT_PACK(java.awt.image.Raster,java.awt.image.WritableRaster)>($r3, r1);

        goto label4;

     label3:
        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: void copyData_FALLBACK(java.awt.image.Raster,java.awt.image.WritableRaster)>($r3, r1);

     label4:
        i15 = i15 + 1;

     label5:
        if i15 <= $i8 goto label2;

        i14 = i14 + 1;

     label6:
        if i14 <= $i13 goto label1;

        return r1;
    }
}
