final class org.jsoup.select.CombiningEvaluator$Or extends org.jsoup.select.CombiningEvaluator
{

    void <init>(java.util.Collection)
    {
        java.util.List $r2, $r4;
        org.jsoup.select.CombiningEvaluator$Or r0;
        java.util.Collection r1;
        int $i0;
        org.jsoup.select.CombiningEvaluator$And $r3;

        r0 := @this: org.jsoup.select.CombiningEvaluator$Or;

        r1 := @parameter0: java.util.Collection;

        specialinvoke r0.<org.jsoup.select.CombiningEvaluator: void <init>()>();

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        if $i0 <= 1 goto label1;

        $r4 = r0.<org.jsoup.select.CombiningEvaluator$Or: java.util.List evaluators>;

        $r3 = new org.jsoup.select.CombiningEvaluator$And;

        specialinvoke $r3.<org.jsoup.select.CombiningEvaluator$And: void <init>(java.util.Collection)>(r1);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r3);

        goto label2;

     label1:
        $r2 = r0.<org.jsoup.select.CombiningEvaluator$Or: java.util.List evaluators>;

        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>(r1);

     label2:
        return;
    }

    void <init>()
    {
        org.jsoup.select.CombiningEvaluator$Or r0;

        r0 := @this: org.jsoup.select.CombiningEvaluator$Or;

        specialinvoke r0.<org.jsoup.select.CombiningEvaluator: void <init>()>();

        return;
    }

    public void add(org.jsoup.select.Evaluator)
    {
        java.util.List $r2;
        org.jsoup.select.CombiningEvaluator$Or r0;
        org.jsoup.select.Evaluator r1;

        r0 := @this: org.jsoup.select.CombiningEvaluator$Or;

        r1 := @parameter0: org.jsoup.select.Evaluator;

        $r2 = r0.<org.jsoup.select.CombiningEvaluator$Or: java.util.List evaluators>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public boolean matches(org.jsoup.nodes.Element, org.jsoup.nodes.Element)
    {
        java.util.List $r1, $r2;
        org.jsoup.select.CombiningEvaluator$Or r0;
        org.jsoup.select.Evaluator r4;
        org.jsoup.nodes.Element r5, r6;
        int $i0, i1;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.jsoup.select.CombiningEvaluator$Or;

        r5 := @parameter0: org.jsoup.nodes.Element;

        r6 := @parameter1: org.jsoup.nodes.Element;

        i1 = 0;

     label1:
        $r1 = r0.<org.jsoup.select.CombiningEvaluator$Or: java.util.List evaluators>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i1 >= $i0 goto label3;

        $r2 = r0.<org.jsoup.select.CombiningEvaluator$Or: java.util.List evaluators>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i1);

        r4 = (org.jsoup.select.Evaluator) $r3;

        $z0 = virtualinvoke r4.<org.jsoup.select.Evaluator: boolean matches(org.jsoup.nodes.Element,org.jsoup.nodes.Element)>(r5, r6);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    public java.lang.String toString()
    {
        java.util.List $r2;
        java.lang.Object[] $r0;
        org.jsoup.select.CombiningEvaluator$Or r1;
        java.lang.String $r3;

        r1 := @this: org.jsoup.select.CombiningEvaluator$Or;

        $r0 = newarray (java.lang.Object)[1];

        $r2 = r1.<org.jsoup.select.CombiningEvaluator$Or: java.util.List evaluators>;

        $r0[0] = $r2;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(":or%s", $r0);

        return $r3;
    }
}
