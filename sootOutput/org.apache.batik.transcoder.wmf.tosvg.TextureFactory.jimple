public class org.apache.batik.transcoder.wmf.tosvg.TextureFactory extends java.lang.Object
{
    private static org.apache.batik.transcoder.wmf.tosvg.TextureFactory fac;
    private java.util.Map textures;
    private static final int SIZE;
    private float scale;

    private void <init>(float)
    {
        float f0;
        java.util.HashMap $r1;
        org.apache.batik.transcoder.wmf.tosvg.TextureFactory r0;

        r0 := @this: org.apache.batik.transcoder.wmf.tosvg.TextureFactory;

        f0 := @parameter0: float;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>(int)>(1);

        r0.<org.apache.batik.transcoder.wmf.tosvg.TextureFactory: java.util.Map textures> = $r1;

        r0.<org.apache.batik.transcoder.wmf.tosvg.TextureFactory: float scale> = 1.0F;

        return;
    }

    public static org.apache.batik.transcoder.wmf.tosvg.TextureFactory getInstance()
    {
        org.apache.batik.transcoder.wmf.tosvg.TextureFactory $r0, $r1, $r2;

        $r0 = <org.apache.batik.transcoder.wmf.tosvg.TextureFactory: org.apache.batik.transcoder.wmf.tosvg.TextureFactory fac>;

        if $r0 != null goto label1;

        $r2 = new org.apache.batik.transcoder.wmf.tosvg.TextureFactory;

        specialinvoke $r2.<org.apache.batik.transcoder.wmf.tosvg.TextureFactory: void <init>(float)>(1.0F);

        <org.apache.batik.transcoder.wmf.tosvg.TextureFactory: org.apache.batik.transcoder.wmf.tosvg.TextureFactory fac> = $r2;

     label1:
        $r1 = <org.apache.batik.transcoder.wmf.tosvg.TextureFactory: org.apache.batik.transcoder.wmf.tosvg.TextureFactory fac>;

        return $r1;
    }

    public static org.apache.batik.transcoder.wmf.tosvg.TextureFactory getInstance(float)
    {
        org.apache.batik.transcoder.wmf.tosvg.TextureFactory $r0, $r1, $r2;
        float f0;

        f0 := @parameter0: float;

        $r0 = <org.apache.batik.transcoder.wmf.tosvg.TextureFactory: org.apache.batik.transcoder.wmf.tosvg.TextureFactory fac>;

        if $r0 != null goto label1;

        $r2 = new org.apache.batik.transcoder.wmf.tosvg.TextureFactory;

        specialinvoke $r2.<org.apache.batik.transcoder.wmf.tosvg.TextureFactory: void <init>(float)>(f0);

        <org.apache.batik.transcoder.wmf.tosvg.TextureFactory: org.apache.batik.transcoder.wmf.tosvg.TextureFactory fac> = $r2;

     label1:
        $r1 = <org.apache.batik.transcoder.wmf.tosvg.TextureFactory: org.apache.batik.transcoder.wmf.tosvg.TextureFactory fac>;

        return $r1;
    }

    public void reset()
    {
        org.apache.batik.transcoder.wmf.tosvg.TextureFactory r0;
        java.util.Map $r1;

        r0 := @this: org.apache.batik.transcoder.wmf.tosvg.TextureFactory;

        $r1 = r0.<org.apache.batik.transcoder.wmf.tosvg.TextureFactory: java.util.Map textures>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        return;
    }

    public java.awt.Paint getTexture(int)
    {
        java.lang.Integer $r0;
        java.awt.Paint $r3, r7;
        org.apache.batik.transcoder.wmf.tosvg.TextureFactory r1;
        java.util.Map $r2, $r4, $r5;
        int i0;
        java.lang.Object $r6;
        boolean $z0;

        r1 := @this: org.apache.batik.transcoder.wmf.tosvg.TextureFactory;

        i0 := @parameter0: int;

        $r0 = new java.lang.Integer;

        specialinvoke $r0.<java.lang.Integer: void <init>(int)>(i0);

        $r2 = r1.<org.apache.batik.transcoder.wmf.tosvg.TextureFactory: java.util.Map textures>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r0);

        if $z0 == 0 goto label1;

        $r5 = r1.<org.apache.batik.transcoder.wmf.tosvg.TextureFactory: java.util.Map textures>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        r7 = (java.awt.Paint) $r6;

        return r7;

     label1:
        $r3 = specialinvoke r1.<org.apache.batik.transcoder.wmf.tosvg.TextureFactory: java.awt.Paint createTexture(int,java.awt.Color,java.awt.Color)>(i0, null, null);

        if $r3 == null goto label2;

        $r4 = r1.<org.apache.batik.transcoder.wmf.tosvg.TextureFactory: java.util.Map textures>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r0, $r3);

     label2:
        return $r3;
    }

    public java.awt.Paint getTexture(int, java.awt.Color)
    {
        java.awt.Color r2;
        org.apache.batik.transcoder.wmf.tosvg.TextureFactory$ColoredTexture $r0;
        java.awt.Paint $r4, r8;
        org.apache.batik.transcoder.wmf.tosvg.TextureFactory r1;
        java.util.Map $r3, $r5, $r6;
        int i0;
        java.lang.Object $r7;
        boolean $z0;

        r1 := @this: org.apache.batik.transcoder.wmf.tosvg.TextureFactory;

        i0 := @parameter0: int;

        r2 := @parameter1: java.awt.Color;

        $r0 = new org.apache.batik.transcoder.wmf.tosvg.TextureFactory$ColoredTexture;

        specialinvoke $r0.<org.apache.batik.transcoder.wmf.tosvg.TextureFactory$ColoredTexture: void <init>(org.apache.batik.transcoder.wmf.tosvg.TextureFactory,int,java.awt.Color,java.awt.Color)>(r1, i0, r2, null);

        $r3 = r1.<org.apache.batik.transcoder.wmf.tosvg.TextureFactory: java.util.Map textures>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>($r0);

        if $z0 == 0 goto label1;

        $r6 = r1.<org.apache.batik.transcoder.wmf.tosvg.TextureFactory: java.util.Map textures>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        r8 = (java.awt.Paint) $r7;

        return r8;

     label1:
        $r4 = specialinvoke r1.<org.apache.batik.transcoder.wmf.tosvg.TextureFactory: java.awt.Paint createTexture(int,java.awt.Color,java.awt.Color)>(i0, r2, null);

        if $r4 == null goto label2;

        $r5 = r1.<org.apache.batik.transcoder.wmf.tosvg.TextureFactory: java.util.Map textures>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r0, $r4);

     label2:
        return $r4;
    }

    public java.awt.Paint getTexture(int, java.awt.Color, java.awt.Color)
    {
        java.awt.Color r2, r3;
        org.apache.batik.transcoder.wmf.tosvg.TextureFactory$ColoredTexture $r0;
        java.awt.Paint $r5, r9;
        org.apache.batik.transcoder.wmf.tosvg.TextureFactory r1;
        java.util.Map $r4, $r6, $r7;
        int i0;
        java.lang.Object $r8;
        boolean $z0;

        r1 := @this: org.apache.batik.transcoder.wmf.tosvg.TextureFactory;

        i0 := @parameter0: int;

        r2 := @parameter1: java.awt.Color;

        r3 := @parameter2: java.awt.Color;

        $r0 = new org.apache.batik.transcoder.wmf.tosvg.TextureFactory$ColoredTexture;

        specialinvoke $r0.<org.apache.batik.transcoder.wmf.tosvg.TextureFactory$ColoredTexture: void <init>(org.apache.batik.transcoder.wmf.tosvg.TextureFactory,int,java.awt.Color,java.awt.Color)>(r1, i0, r2, r3);

        $r4 = r1.<org.apache.batik.transcoder.wmf.tosvg.TextureFactory: java.util.Map textures>;

        $z0 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>($r0);

        if $z0 == 0 goto label1;

        $r7 = r1.<org.apache.batik.transcoder.wmf.tosvg.TextureFactory: java.util.Map textures>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        r9 = (java.awt.Paint) $r8;

        return r9;

     label1:
        $r5 = specialinvoke r1.<org.apache.batik.transcoder.wmf.tosvg.TextureFactory: java.awt.Paint createTexture(int,java.awt.Color,java.awt.Color)>(i0, r2, r3);

        if $r5 == null goto label2;

        $r6 = r1.<org.apache.batik.transcoder.wmf.tosvg.TextureFactory: java.util.Map textures>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r0, $r5);

     label2:
        return $r5;
    }

    private java.awt.Paint createTexture(int, java.awt.Color, java.awt.Color)
    {
        java.awt.Color r3, r4, $r6;
        java.awt.geom.Rectangle2D$Float $r2;
        boolean z0;
        java.awt.image.BufferedImage $r0;
        java.awt.TexturePaint $r5, r8;
        java.awt.Graphics2D $r1;
        org.apache.batik.transcoder.wmf.tosvg.TextureFactory r7;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i19, i20, i21, i22, i23, i24;

        r7 := @this: org.apache.batik.transcoder.wmf.tosvg.TextureFactory;

        i0 := @parameter0: int;

        r4 := @parameter1: java.awt.Color;

        r3 := @parameter2: java.awt.Color;

        $r0 = new java.awt.image.BufferedImage;

        specialinvoke $r0.<java.awt.image.BufferedImage: void <init>(int,int,int)>(10, 10, 2);

        $r1 = virtualinvoke $r0.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        $r2 = new java.awt.geom.Rectangle2D$Float;

        specialinvoke $r2.<java.awt.geom.Rectangle2D$Float: void <init>(float,float,float,float)>(0.0F, 0.0F, 10.0F, 10.0F);

        r8 = null;

        z0 = 0;

        if r3 == null goto label01;

        virtualinvoke $r1.<java.awt.Graphics: void setColor(java.awt.Color)>(r3);

        virtualinvoke $r1.<java.awt.Graphics: void fillRect(int,int,int,int)>(0, 0, 10, 10);

     label01:
        if r4 != null goto label02;

        $r6 = <java.awt.Color: java.awt.Color black>;

        virtualinvoke $r1.<java.awt.Graphics: void setColor(java.awt.Color)>($r6);

        goto label03;

     label02:
        virtualinvoke $r1.<java.awt.Graphics: void setColor(java.awt.Color)>(r4);

     label03:
        if i0 != 1 goto label06;

        i19 = 0;

        goto label05;

     label04:
        $i18 = i19 * 10;

        $i17 = i19 * 10;

        virtualinvoke $r1.<java.awt.Graphics: void drawLine(int,int,int,int)>($i18, 0, $i17, 10);

        i19 = i19 + 1;

     label05:
        if i19 < 5 goto label04;

        z0 = 1;

        goto label21;

     label06:
        if i0 != 0 goto label09;

        i20 = 0;

        goto label08;

     label07:
        $i16 = i20 * 10;

        $i15 = i20 * 10;

        virtualinvoke $r1.<java.awt.Graphics: void drawLine(int,int,int,int)>(0, $i16, 10, $i15);

        i20 = i20 + 1;

     label08:
        if i20 < 5 goto label07;

        z0 = 1;

        goto label21;

     label09:
        if i0 != 3 goto label12;

        i21 = 0;

        goto label11;

     label10:
        $i14 = i21 * 10;

        $i13 = i21 * 10;

        virtualinvoke $r1.<java.awt.Graphics: void drawLine(int,int,int,int)>(0, $i14, $i13, 0);

        i21 = i21 + 1;

     label11:
        if i21 < 5 goto label10;

        z0 = 1;

        goto label21;

     label12:
        if i0 != 2 goto label15;

        i22 = 0;

        goto label14;

     label13:
        $i12 = i22 * 10;

        $i10 = i22 * 10;

        $i11 = 10 - $i10;

        virtualinvoke $r1.<java.awt.Graphics: void drawLine(int,int,int,int)>(0, $i12, $i11, 10);

        i22 = i22 + 1;

     label14:
        if i22 < 5 goto label13;

        z0 = 1;

        goto label21;

     label15:
        if i0 != 5 goto label18;

        i23 = 0;

        goto label17;

     label16:
        $i6 = i23 * 10;

        $i5 = i23 * 10;

        virtualinvoke $r1.<java.awt.Graphics: void drawLine(int,int,int,int)>(0, $i6, $i5, 0);

        $i9 = i23 * 10;

        $i7 = i23 * 10;

        $i8 = 10 - $i7;

        virtualinvoke $r1.<java.awt.Graphics: void drawLine(int,int,int,int)>(0, $i9, $i8, 10);

        i23 = i23 + 1;

     label17:
        if i23 < 5 goto label16;

        z0 = 1;

        goto label21;

     label18:
        if i0 != 4 goto label21;

        i24 = 0;

        goto label20;

     label19:
        $i2 = i24 * 10;

        $i1 = i24 * 10;

        virtualinvoke $r1.<java.awt.Graphics: void drawLine(int,int,int,int)>($i2, 0, $i1, 10);

        $i4 = i24 * 10;

        $i3 = i24 * 10;

        virtualinvoke $r1.<java.awt.Graphics: void drawLine(int,int,int,int)>(0, $i4, 10, $i3);

        i24 = i24 + 1;

     label20:
        if i24 < 5 goto label19;

        z0 = 1;

     label21:
        virtualinvoke $r0.<java.awt.image.BufferedImage: void flush()>();

        if z0 == 0 goto label22;

        $r5 = new java.awt.TexturePaint;

        specialinvoke $r5.<java.awt.TexturePaint: void <init>(java.awt.image.BufferedImage,java.awt.geom.Rectangle2D)>($r0, $r2);

        r8 = $r5;

     label22:
        return r8;
    }

    static void <clinit>()
    {
        <org.apache.batik.transcoder.wmf.tosvg.TextureFactory: int SIZE> = 10;

        <org.apache.batik.transcoder.wmf.tosvg.TextureFactory: org.apache.batik.transcoder.wmf.tosvg.TextureFactory fac> = null;

        return;
    }
}
