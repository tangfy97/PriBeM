public final class org.waveprotocol.wave.model.conversation.ConversationStructure extends java.lang.Object
{
    private final org.waveprotocol.wave.model.util.IdentityMap anchoring;
    private final java.util.Collection unanchored;
    private final org.waveprotocol.wave.model.conversation.Conversation mainConversation;

    private void <init>(org.waveprotocol.wave.model.util.IdentityMap, java.util.Collection, org.waveprotocol.wave.model.conversation.Conversation)
    {
        org.waveprotocol.wave.model.util.IdentityMap r1;
        org.waveprotocol.wave.model.conversation.Conversation r3;
        java.util.Collection r2;
        org.waveprotocol.wave.model.conversation.ConversationStructure r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.ConversationStructure;

        r1 := @parameter0: org.waveprotocol.wave.model.util.IdentityMap;

        r2 := @parameter1: java.util.Collection;

        r3 := @parameter2: org.waveprotocol.wave.model.conversation.Conversation;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.conversation.ConversationStructure: org.waveprotocol.wave.model.util.IdentityMap anchoring> = r1;

        r0.<org.waveprotocol.wave.model.conversation.ConversationStructure: java.util.Collection unanchored> = r2;

        r0.<org.waveprotocol.wave.model.conversation.ConversationStructure: org.waveprotocol.wave.model.conversation.Conversation mainConversation> = r3;

        return;
    }

    public static org.waveprotocol.wave.model.conversation.ConversationStructure of(org.waveprotocol.wave.model.conversation.ConversationView)
    {
        org.waveprotocol.wave.model.util.IdentityMap $r9, r10;
        java.util.Iterator $r3;
        java.util.Collection $r2, $r8, r11;
        org.waveprotocol.wave.model.conversation.Conversation$Anchor $r7;
        org.waveprotocol.wave.model.conversation.ConversationBlip $r12;
        org.waveprotocol.wave.model.conversation.Conversation $r1, r6;
        java.lang.Object $r5;
        org.waveprotocol.wave.model.conversation.ConversationStructure $r4;
        org.waveprotocol.wave.model.conversation.ConversationView r0;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.ConversationView;

        r10 = null;

        r11 = null;

        $r1 = staticinvoke <org.waveprotocol.wave.model.conversation.ConversationStructure: org.waveprotocol.wave.model.conversation.Conversation getMainConversation(org.waveprotocol.wave.model.conversation.ConversationView)>(r0);

        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.model.conversation.ConversationView: java.util.Collection getConversations()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.waveprotocol.wave.model.conversation.Conversation) $r5;

        if r6 != $r1 goto label2;

        goto label1;

     label2:
        $r7 = interfaceinvoke r6.<org.waveprotocol.wave.model.conversation.Conversation: org.waveprotocol.wave.model.conversation.Conversation$Anchor getAnchor()>();

        if $r7 == null goto label3;

        $r12 = virtualinvoke $r7.<org.waveprotocol.wave.model.conversation.Conversation$Anchor: org.waveprotocol.wave.model.conversation.ConversationBlip getBlip()>();

        goto label4;

     label3:
        $r12 = null;

     label4:
        if $r12 == null goto label5;

        $r9 = staticinvoke <org.waveprotocol.wave.model.conversation.ConversationStructure: org.waveprotocol.wave.model.util.IdentityMap createIfNull(org.waveprotocol.wave.model.util.IdentityMap)>(r10);

        r10 = $r9;

        staticinvoke <org.waveprotocol.wave.model.conversation.ConversationStructure: void addLazily(org.waveprotocol.wave.model.util.IdentityMap,java.lang.Object,java.lang.Object)>($r9, $r12, r6);

        goto label6;

     label5:
        $r8 = staticinvoke <org.waveprotocol.wave.model.conversation.ConversationStructure: java.util.Collection createIfNull(java.util.Collection)>(r11);

        r11 = $r8;

        interfaceinvoke $r8.<java.util.Collection: boolean add(java.lang.Object)>(r6);

     label6:
        goto label1;

     label7:
        if r10 != null goto label8;

        r10 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.IdentityMap emptyIdentityMap()>();

     label8:
        if r11 != null goto label9;

        r11 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

     label9:
        $r4 = new org.waveprotocol.wave.model.conversation.ConversationStructure;

        specialinvoke $r4.<org.waveprotocol.wave.model.conversation.ConversationStructure: void <init>(org.waveprotocol.wave.model.util.IdentityMap,java.util.Collection,org.waveprotocol.wave.model.conversation.Conversation)>(r10, r11, $r1);

        return $r4;
    }

    private static void addLazily(org.waveprotocol.wave.model.util.IdentityMap, java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.model.util.IdentityMap r0;
        java.util.Collection r5;
        java.lang.Object r1, $r2, r3;
        java.util.Queue $r4;

        r0 := @parameter0: org.waveprotocol.wave.model.util.IdentityMap;

        r1 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.model.util.IdentityMap: java.lang.Object get(java.lang.Object)>(r1);

        r5 = (java.util.Collection) $r2;

        if r5 != null goto label1;

        $r4 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.Queue createQueue()>();

        r5 = $r4;

        interfaceinvoke r0.<org.waveprotocol.wave.model.util.IdentityMap: void put(java.lang.Object,java.lang.Object)>(r1, $r4);

     label1:
        interfaceinvoke r5.<java.util.Collection: boolean add(java.lang.Object)>(r3);

        return;
    }

    private static java.util.Collection createIfNull(java.util.Collection)
    {
        java.util.Collection r0, $r1;

        r0 := @parameter0: java.util.Collection;

        if r0 == null goto label1;

        $r1 = r0;

        goto label2;

     label1:
        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.Queue createQueue()>();

     label2:
        return $r1;
    }

    private static org.waveprotocol.wave.model.util.IdentityMap createIfNull(org.waveprotocol.wave.model.util.IdentityMap)
    {
        org.waveprotocol.wave.model.util.IdentityMap r0, $r1;

        r0 := @parameter0: org.waveprotocol.wave.model.util.IdentityMap;

        if r0 == null goto label1;

        $r1 = r0;

        goto label2;

     label1:
        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.IdentityMap createIdentityMap()>();

     label2:
        return $r1;
    }

    public java.util.Collection getAnchoredConversations(org.waveprotocol.wave.model.conversation.ConversationBlip)
    {
        org.waveprotocol.wave.model.conversation.ConversationBlip r1;
        org.waveprotocol.wave.model.util.IdentityMap $r2;
        java.util.Collection r4, $r5;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.conversation.ConversationStructure r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.ConversationStructure;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.ConversationBlip;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.ConversationStructure: org.waveprotocol.wave.model.util.IdentityMap anchoring>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.IdentityMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.util.Collection) $r3;

        if r4 == null goto label1;

        $r5 = r4;

        goto label2;

     label1:
        $r5 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

     label2:
        return $r5;
    }

    public java.util.Collection getUnanchored()
    {
        org.waveprotocol.wave.model.conversation.ConversationStructure r0;
        java.util.Collection $r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.ConversationStructure;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.ConversationStructure: java.util.Collection unanchored>;

        return $r1;
    }

    public org.waveprotocol.wave.model.conversation.Conversation getMainConversation()
    {
        org.waveprotocol.wave.model.conversation.ConversationStructure r0;
        org.waveprotocol.wave.model.conversation.Conversation $r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.ConversationStructure;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.ConversationStructure: org.waveprotocol.wave.model.conversation.Conversation mainConversation>;

        return $r1;
    }

    public static org.waveprotocol.wave.model.conversation.Conversation getMainConversation(org.waveprotocol.wave.model.conversation.ConversationView)
    {
        java.util.Iterator $r3;
        java.util.Collection $r2;
        org.waveprotocol.wave.model.conversation.Conversation $r1, r5, r6;
        java.lang.Object $r4;
        org.waveprotocol.wave.model.conversation.ConversationView r0;
        boolean $z0, $z1;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.ConversationView;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.conversation.ConversationView: org.waveprotocol.wave.model.conversation.Conversation getRoot()>();

        r6 = $r1;

        if $r1 != null goto label3;

        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.model.conversation.ConversationView: java.util.Collection getConversations()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.waveprotocol.wave.model.conversation.Conversation) $r4;

        $z1 = interfaceinvoke r5.<org.waveprotocol.wave.model.conversation.Conversation: boolean hasAnchor()>();

        if $z1 != 0 goto label2;

        r6 = r5;

        goto label3;

     label2:
        goto label1;

     label3:
        return r6;
    }
}
