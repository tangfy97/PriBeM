public class org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl extends java.lang.Object implements org.waveprotocol.wave.client.editor.Responsibility$Manager
{
    private final java.util.Stack sequenceType;

    public void <init>()
    {
        org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl r0;
        java.util.Stack $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.Stack;

        specialinvoke $r1.<java.util.Stack: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl: java.util.Stack sequenceType> = $r1;

        return;
    }

    private org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl$SequenceType currentSequenceType()
    {
        org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl r0;
        java.lang.Object $r3;
        org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl$SequenceType $r4;
        java.util.Stack $r1, $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl: java.util.Stack sequenceType>;

        $z0 = virtualinvoke $r1.<java.util.Stack: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r4 = <org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl$SequenceType: org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl$SequenceType INDIRECT>;

        goto label2;

     label1:
        $r2 = r0.<org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl: java.util.Stack sequenceType>;

        $r3 = virtualinvoke $r2.<java.util.Stack: java.lang.Object peek()>();

        $r4 = (org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl$SequenceType) $r3;

     label2:
        return $r4;
    }

    public void startDirectSequence()
    {
        org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl r0;
        org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl$SequenceType $r1;
        java.util.Stack $r2;

        r0 := @this: org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl;

        $r2 = r0.<org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl: java.util.Stack sequenceType>;

        $r1 = <org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl$SequenceType: org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl$SequenceType DIRECT>;

        virtualinvoke $r2.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r1);

        return;
    }

    public void endDirectSequence()
    {
        org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl r0;
        java.util.Stack $r1, $r2, $r5;
        java.lang.Object $r3;
        org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl$SequenceType $r4;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl: java.util.Stack sequenceType>;

        $z0 = virtualinvoke $r1.<java.util.Stack: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r2 = r0.<org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl: java.util.Stack sequenceType>;

        $r3 = virtualinvoke $r2.<java.util.Stack: java.lang.Object peek()>();

        $r4 = <org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl$SequenceType: org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl$SequenceType DIRECT>;

        if $r3 != $r4 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z1, "end undoable sequence without begin");

        $r5 = r0.<org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl: java.util.Stack sequenceType>;

        virtualinvoke $r5.<java.util.Stack: java.lang.Object pop()>();

        return;
    }

    public void startIndirectSequence()
    {
        org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl r2;
        org.waveprotocol.wave.common.logging.Logger $r1;
        java.lang.Integer $r4;
        org.waveprotocol.wave.common.logging.LoggerBundle $r0;
        java.util.Stack $r3, $r6;
        int $i0;
        org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl$SequenceType $r5;

        r2 := @this: org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl;

        $r0 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r1 = interfaceinvoke $r0.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        $r3 = r2.<org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl: java.util.Stack sequenceType>;

        $i0 = virtualinvoke $r3.<java.util.Stack: int size()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r1.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String,java.lang.Object)>("Depth: ", $r4);

        $r6 = r2.<org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl: java.util.Stack sequenceType>;

        $r5 = <org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl$SequenceType: org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl$SequenceType INDIRECT>;

        virtualinvoke $r6.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r5);

        return;
    }

    public void endIndirectSequence()
    {
        org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl r0;
        java.util.Stack $r1, $r2, $r5;
        java.lang.Object $r3;
        org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl$SequenceType $r4;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl: java.util.Stack sequenceType>;

        $z0 = virtualinvoke $r1.<java.util.Stack: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r2 = r0.<org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl: java.util.Stack sequenceType>;

        $r3 = virtualinvoke $r2.<java.util.Stack: java.lang.Object peek()>();

        $r4 = <org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl$SequenceType: org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl$SequenceType INDIRECT>;

        if $r3 != $r4 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z1, "end non-undoable sequence without begin");

        $r5 = r0.<org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl: java.util.Stack sequenceType>;

        virtualinvoke $r5.<java.util.Stack: java.lang.Object pop()>();

        return;
    }

    public boolean withinDirectSequence()
    {
        org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl r0;
        org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl$SequenceType $r1, $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl: org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl$SequenceType currentSequenceType()>();

        $r2 = <org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl$SequenceType: org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl$SequenceType DIRECT>;

        if $r1 != $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }
}
