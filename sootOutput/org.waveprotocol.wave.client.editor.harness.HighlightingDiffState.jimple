public final class org.waveprotocol.wave.client.editor.harness.HighlightingDiffState extends java.lang.Object
{
    private final org.waveprotocol.wave.client.editor.Editor editor;
    private org.waveprotocol.wave.client.editor.content.ContentDocument currentContentDoc;
    private org.waveprotocol.wave.client.editor.content.DiffHighlightingFilter diffFilter;

    public void <init>(org.waveprotocol.wave.client.editor.Editor)
    {
        org.waveprotocol.wave.client.editor.Editor r1;
        org.waveprotocol.wave.client.editor.harness.HighlightingDiffState r0;

        r0 := @this: org.waveprotocol.wave.client.editor.harness.HighlightingDiffState;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.Editor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.harness.HighlightingDiffState: org.waveprotocol.wave.client.editor.Editor editor> = r1;

        return;
    }

    public void clearDiffs()
    {
        org.waveprotocol.wave.client.editor.content.DiffHighlightingFilter $r1;
        org.waveprotocol.wave.client.editor.harness.HighlightingDiffState r0;

        r0 := @this: org.waveprotocol.wave.client.editor.harness.HighlightingDiffState;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.client.editor.harness.HighlightingDiffState: org.waveprotocol.wave.client.editor.content.DiffHighlightingFilter getDiffFilter()>();

        virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.DiffHighlightingFilter: void clearDiffs()>();

        return;
    }

    public void consume(org.waveprotocol.wave.model.document.operation.DocOp) throws org.waveprotocol.wave.model.operation.OperationException
    {
        org.waveprotocol.wave.model.document.operation.DocOp r2;
        org.waveprotocol.wave.client.editor.content.DiffHighlightingFilter $r1;
        org.waveprotocol.wave.client.editor.harness.HighlightingDiffState r0;

        r0 := @this: org.waveprotocol.wave.client.editor.harness.HighlightingDiffState;

        r2 := @parameter0: org.waveprotocol.wave.model.document.operation.DocOp;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.client.editor.harness.HighlightingDiffState: org.waveprotocol.wave.client.editor.content.DiffHighlightingFilter getDiffFilter()>();

        virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.DiffHighlightingFilter: void consume(org.waveprotocol.wave.model.document.operation.DocOp)>(r2);

        return;
    }

    private org.waveprotocol.wave.client.editor.content.DiffHighlightingFilter getDiffFilter()
    {
        org.waveprotocol.wave.client.editor.Editor $r1, $r3, $r7;
        org.waveprotocol.wave.client.editor.content.DiffHighlightingFilter $r6, $r9;
        org.waveprotocol.wave.client.editor.harness.HighlightingDiffState r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r2, $r4, $r5, $r8, $r10;
        org.waveprotocol.wave.client.editor.content.DiffHighlightingFilter$DiffHighlightTarget $r11;

        r0 := @this: org.waveprotocol.wave.client.editor.harness.HighlightingDiffState;

        $r1 = r0.<org.waveprotocol.wave.client.editor.harness.HighlightingDiffState: org.waveprotocol.wave.client.editor.Editor editor>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.Editor: org.waveprotocol.wave.client.editor.content.ContentDocument getContent()>();

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        $r3 = r0.<org.waveprotocol.wave.client.editor.harness.HighlightingDiffState: org.waveprotocol.wave.client.editor.Editor editor>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.client.editor.Editor: org.waveprotocol.wave.client.editor.content.ContentDocument getContent()>();

        $r5 = r0.<org.waveprotocol.wave.client.editor.harness.HighlightingDiffState: org.waveprotocol.wave.client.editor.content.ContentDocument currentContentDoc>;

        if $r4 == $r5 goto label1;

        $r7 = r0.<org.waveprotocol.wave.client.editor.harness.HighlightingDiffState: org.waveprotocol.wave.client.editor.Editor editor>;

        $r8 = interfaceinvoke $r7.<org.waveprotocol.wave.client.editor.Editor: org.waveprotocol.wave.client.editor.content.ContentDocument getContent()>();

        r0.<org.waveprotocol.wave.client.editor.harness.HighlightingDiffState: org.waveprotocol.wave.client.editor.content.ContentDocument currentContentDoc> = $r8;

        $r9 = new org.waveprotocol.wave.client.editor.content.DiffHighlightingFilter;

        $r10 = r0.<org.waveprotocol.wave.client.editor.harness.HighlightingDiffState: org.waveprotocol.wave.client.editor.content.ContentDocument currentContentDoc>;

        $r11 = virtualinvoke $r10.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.DiffHighlightingFilter$DiffHighlightTarget getDiffTarget()>();

        specialinvoke $r9.<org.waveprotocol.wave.client.editor.content.DiffHighlightingFilter: void <init>(org.waveprotocol.wave.client.editor.content.DiffHighlightingFilter$DiffHighlightTarget)>($r11);

        r0.<org.waveprotocol.wave.client.editor.harness.HighlightingDiffState: org.waveprotocol.wave.client.editor.content.DiffHighlightingFilter diffFilter> = $r9;

     label1:
        $r6 = r0.<org.waveprotocol.wave.client.editor.harness.HighlightingDiffState: org.waveprotocol.wave.client.editor.content.DiffHighlightingFilter diffFilter>;

        return $r6;
    }
}
