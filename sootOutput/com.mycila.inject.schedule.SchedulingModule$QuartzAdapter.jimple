public final class com.mycila.inject.schedule.SchedulingModule$QuartzAdapter extends java.lang.Object implements org.quartz.InterruptableJob
{
    private java.util.concurrent.atomic.AtomicReference runningThread;

    public void <init>()
    {
        com.mycila.inject.schedule.SchedulingModule$QuartzAdapter r0;
        java.util.concurrent.atomic.AtomicReference $r1;

        r0 := @this: com.mycila.inject.schedule.SchedulingModule$QuartzAdapter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        r0.<com.mycila.inject.schedule.SchedulingModule$QuartzAdapter: java.util.concurrent.atomic.AtomicReference runningThread> = $r1;

        return;
    }

    public void interrupt() throws org.quartz.UnableToInterruptJobException
    {
        java.lang.Thread r3;
        java.lang.Object $r2;
        com.mycila.inject.schedule.SchedulingModule$QuartzAdapter r0;
        java.util.concurrent.atomic.AtomicReference $r1;

        r0 := @this: com.mycila.inject.schedule.SchedulingModule$QuartzAdapter;

        $r1 = r0.<com.mycila.inject.schedule.SchedulingModule$QuartzAdapter: java.util.concurrent.atomic.AtomicReference runningThread>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r3 = (java.lang.Thread) $r2;

        if r3 == null goto label1;

        virtualinvoke r3.<java.lang.Thread: void interrupt()>();

     label1:
        return;
    }

    public void execute(org.quartz.JobExecutionContext) throws org.quartz.JobExecutionException
    {
        java.lang.Runnable r6;
        java.lang.Thread $r9, $r15;
        boolean $z0;
        org.quartz.JobExecutionContext r0;
        java.util.logging.Logger $r24;
        org.quartz.JobExecutionException $r37, $r39, $r41;
        org.quartz.JobDataMap $r2;
        java.lang.StringBuilder $r12, $r17, $r27, $r30, $r31, $r33, $r38, $r40;
        java.lang.Throwable $r21, $r42, $r43, $r44;
        java.util.concurrent.atomic.AtomicReference $r8, $r13, $r19, $r22;
        java.util.logging.Level $r26;
        java.lang.String $r4, $r16, $r18, $r29, $r32, $r34, $r36;
        org.quartz.JobDetail $r1;
        java.lang.RuntimeException $r23;
        java.lang.Class $r3, $r28;
        java.lang.Object $r5, $r14;
        com.mycila.inject.schedule.SchedulingModule$QuartzAdapter r7;

        r7 := @this: com.mycila.inject.schedule.SchedulingModule$QuartzAdapter;

        r0 := @parameter0: org.quartz.JobExecutionContext;

        $r1 = interfaceinvoke r0.<org.quartz.JobExecutionContext: org.quartz.JobDetail getJobDetail()>();

        $r2 = interfaceinvoke $r1.<org.quartz.JobDetail: org.quartz.JobDataMap getJobDataMap()>();

        $r3 = class "Lcom/mycila/inject/schedule/SchedulingModule$QuartzAdapter;";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r2.<org.quartz.JobDataMap: java.lang.Object get(java.lang.Object)>($r4);

        r6 = (java.lang.Runnable) $r5;

        if r6 != null goto label1;

        $r37 = new org.quartz.JobExecutionException;

        specialinvoke $r37.<org.quartz.JobExecutionException: void <init>(java.lang.String)>("Job not found !");

        $r42 = (java.lang.Throwable) $r37;

        throw $r42;

     label1:
        $r8 = r7.<com.mycila.inject.schedule.SchedulingModule$QuartzAdapter: java.util.concurrent.atomic.AtomicReference runningThread>;

        $r9 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z0 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, $r9);

        if $z0 == 0 goto label8;

     label2:
        interfaceinvoke r6.<java.lang.Runnable: void run()>();

     label3:
        $r19 = r7.<com.mycila.inject.schedule.SchedulingModule$QuartzAdapter: java.util.concurrent.atomic.AtomicReference runningThread>;

        virtualinvoke $r19.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(null);

        goto label7;

     label4:
        $r23 := @caughtexception;

        $r24 = staticinvoke <com.mycila.inject.schedule.SchedulingModule: java.util.logging.Logger access$000()>();

        $r26 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error in job ");

        $r28 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>();

        $r29 = virtualinvoke $r28.<java.lang.Class: java.lang.String getName()>();

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : ");

        $r32 = virtualinvoke $r23.<java.lang.RuntimeException: java.lang.String getMessage()>();

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r24.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r26, $r34, $r23);

        $r39 = new org.quartz.JobExecutionException;

        $r36 = virtualinvoke $r23.<java.lang.RuntimeException: java.lang.String getMessage()>();

        specialinvoke $r39.<org.quartz.JobExecutionException: void <init>(java.lang.String,java.lang.Throwable)>($r36, $r23);

        $r43 = (java.lang.Throwable) $r39;

        throw $r43;

     label5:
        $r21 := @caughtexception;

     label6:
        $r22 = r7.<com.mycila.inject.schedule.SchedulingModule$QuartzAdapter: java.util.concurrent.atomic.AtomicReference runningThread>;

        virtualinvoke $r22.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(null);

        throw $r21;

     label7:
        goto label9;

     label8:
        $r41 = new org.quartz.JobExecutionException;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal invocation: job is already running from thread: ");

        $r13 = r7.<com.mycila.inject.schedule.SchedulingModule$QuartzAdapter: java.util.concurrent.atomic.AtomicReference runningThread>;

        $r14 = virtualinvoke $r13.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r15 = (java.lang.Thread) $r14;

        $r16 = virtualinvoke $r15.<java.lang.Thread: java.lang.String getName()>();

        $r17 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r41.<org.quartz.JobExecutionException: void <init>(java.lang.String)>($r18);

        $r44 = (java.lang.Throwable) $r41;

        throw $r44;

     label9:
        return;

        catch java.lang.RuntimeException from label2 to label3 with label4;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label4 to label6 with label5;
    }
}
