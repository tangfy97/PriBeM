class ucar.nc2.stream.NcStreamReader$StreamDataIterator extends java.lang.Object implements ucar.ma2.StructureDataIterator
{
    private java.io.InputStream is;
    private ucar.ma2.StructureMembers members;
    private ucar.ma2.StructureData curr;
    private int count;
    final ucar.nc2.stream.NcStreamReader this$0;

    void <init>(ucar.nc2.stream.NcStreamReader, java.io.InputStream, ucar.ma2.StructureMembers)
    {
        ucar.ma2.StructureMembers r3;
        ucar.nc2.stream.NcStreamReader$StreamDataIterator r0;
        ucar.nc2.stream.NcStreamReader r1;
        java.io.InputStream r2;

        r0 := @this: ucar.nc2.stream.NcStreamReader$StreamDataIterator;

        r1 := @parameter0: ucar.nc2.stream.NcStreamReader;

        r2 := @parameter1: java.io.InputStream;

        r3 := @parameter2: ucar.ma2.StructureMembers;

        r0.<ucar.nc2.stream.NcStreamReader$StreamDataIterator: ucar.nc2.stream.NcStreamReader this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ucar.nc2.stream.NcStreamReader$StreamDataIterator: ucar.ma2.StructureData curr> = null;

        r0.<ucar.nc2.stream.NcStreamReader$StreamDataIterator: int count> = 0;

        r0.<ucar.nc2.stream.NcStreamReader$StreamDataIterator: java.io.InputStream is> = r2;

        r0.<ucar.nc2.stream.NcStreamReader$StreamDataIterator: ucar.ma2.StructureMembers members> = r3;

        return;
    }

    public boolean hasNext() throws java.io.IOException
    {
        ucar.ma2.StructureData $r1;
        ucar.nc2.stream.NcStreamReader$StreamDataIterator r0;
        boolean $z0;

        r0 := @this: ucar.nc2.stream.NcStreamReader$StreamDataIterator;

        specialinvoke r0.<ucar.nc2.stream.NcStreamReader$StreamDataIterator: void readNext()>();

        $r1 = r0.<ucar.nc2.stream.NcStreamReader$StreamDataIterator: ucar.ma2.StructureData curr>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public ucar.ma2.StructureData next() throws java.io.IOException
    {
        ucar.ma2.StructureData $r1;
        ucar.nc2.stream.NcStreamReader$StreamDataIterator r0;
        int $i0, $i1;

        r0 := @this: ucar.nc2.stream.NcStreamReader$StreamDataIterator;

        $i0 = r0.<ucar.nc2.stream.NcStreamReader$StreamDataIterator: int count>;

        $i1 = $i0 + 1;

        r0.<ucar.nc2.stream.NcStreamReader$StreamDataIterator: int count> = $i1;

        $r1 = r0.<ucar.nc2.stream.NcStreamReader$StreamDataIterator: ucar.ma2.StructureData curr>;

        return $r1;
    }

    private void readNext() throws java.io.IOException
    {
        byte[] r0, $r3, $r5, r9;
        java.lang.IllegalStateException $r7;
        ucar.nc2.stream.NcStreamReader$StreamDataIterator r1;
        ucar.nc2.stream.NcStreamReader $r4, $r6;
        ucar.ma2.StructureData $r12;
        int $i0;
        boolean $z0, $z1;
        ucar.ma2.StructureMembers $r11;
        java.io.InputStream $r2, $r8, $r10;

        r1 := @this: ucar.nc2.stream.NcStreamReader$StreamDataIterator;

        r0 = newarray (byte)[4];

        $r2 = r1.<ucar.nc2.stream.NcStreamReader$StreamDataIterator: java.io.InputStream is>;

        staticinvoke <ucar.nc2.stream.NcStream: int readFully(java.io.InputStream,byte[])>($r2, r0);

        $r4 = r1.<ucar.nc2.stream.NcStreamReader$StreamDataIterator: ucar.nc2.stream.NcStreamReader this$0>;

        $r3 = <ucar.nc2.stream.NcStream: byte[] MAGIC_VDATA>;

        $z0 = staticinvoke <ucar.nc2.stream.NcStreamReader: boolean access$000(ucar.nc2.stream.NcStreamReader,byte[],byte[])>($r4, r0, $r3);

        if $z0 == 0 goto label1;

        $r8 = r1.<ucar.nc2.stream.NcStreamReader$StreamDataIterator: java.io.InputStream is>;

        $i0 = staticinvoke <ucar.nc2.stream.NcStream: int readVInt(java.io.InputStream)>($r8);

        r9 = newarray (byte)[$i0];

        $r10 = r1.<ucar.nc2.stream.NcStreamReader$StreamDataIterator: java.io.InputStream is>;

        staticinvoke <ucar.nc2.stream.NcStream: int readFully(java.io.InputStream,byte[])>($r10, r9);

        $r11 = r1.<ucar.nc2.stream.NcStreamReader$StreamDataIterator: ucar.ma2.StructureMembers members>;

        $r12 = staticinvoke <ucar.nc2.stream.NcStream: ucar.ma2.StructureData decodeStructureData(ucar.ma2.StructureMembers,byte[])>($r11, r9);

        r1.<ucar.nc2.stream.NcStreamReader$StreamDataIterator: ucar.ma2.StructureData curr> = $r12;

        goto label3;

     label1:
        $r6 = r1.<ucar.nc2.stream.NcStreamReader$StreamDataIterator: ucar.nc2.stream.NcStreamReader this$0>;

        $r5 = <ucar.nc2.stream.NcStream: byte[] MAGIC_VEND>;

        $z1 = staticinvoke <ucar.nc2.stream.NcStreamReader: boolean access$000(ucar.nc2.stream.NcStreamReader,byte[],byte[])>($r6, r0, $r5);

        if $z1 == 0 goto label2;

        r1.<ucar.nc2.stream.NcStreamReader$StreamDataIterator: ucar.ma2.StructureData curr> = null;

        goto label3;

     label2:
        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("bad stream");

        throw $r7;

     label3:
        return;
    }

    public void setBufferSize(int)
    {
        int i0;
        ucar.nc2.stream.NcStreamReader$StreamDataIterator r0;

        r0 := @this: ucar.nc2.stream.NcStreamReader$StreamDataIterator;

        i0 := @parameter0: int;

        return;
    }

    public ucar.ma2.StructureDataIterator reset()
    {
        int $i0;
        ucar.nc2.stream.NcStreamReader$StreamDataIterator r0, $r1;

        r0 := @this: ucar.nc2.stream.NcStreamReader$StreamDataIterator;

        $i0 = r0.<ucar.nc2.stream.NcStreamReader$StreamDataIterator: int count>;

        if $i0 != 0 goto label1;

        $r1 = r0;

        goto label2;

     label1:
        $r1 = null;

     label2:
        return $r1;
    }

    public int getCurrentRecno()
    {
        int $i0;
        ucar.nc2.stream.NcStreamReader$StreamDataIterator r0;

        r0 := @this: ucar.nc2.stream.NcStreamReader$StreamDataIterator;

        $i0 = r0.<ucar.nc2.stream.NcStreamReader$StreamDataIterator: int count>;

        return $i0;
    }

    public void finish()
    {
        ucar.nc2.stream.NcStreamReader$StreamDataIterator r0;
        java.io.IOException $r3;
        java.io.InputStream $r1, $r2;

        r0 := @this: ucar.nc2.stream.NcStreamReader$StreamDataIterator;

        $r1 = r0.<ucar.nc2.stream.NcStreamReader$StreamDataIterator: java.io.InputStream is>;

        if $r1 == null goto label4;

     label1:
        $r2 = r0.<ucar.nc2.stream.NcStreamReader$StreamDataIterator: java.io.InputStream is>;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }
}
