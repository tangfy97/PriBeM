public class org.waveprotocol.box.server.authentication.AccountStoreHolder extends java.lang.Object
{
    private static org.waveprotocol.box.server.persistence.AccountStore store;
    private static java.lang.String defaultDomain;

    public void <init>()
    {
        org.waveprotocol.box.server.authentication.AccountStoreHolder r0;

        r0 := @this: org.waveprotocol.box.server.authentication.AccountStoreHolder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static synchronized void init(org.waveprotocol.box.server.persistence.AccountStore, java.lang.String)
    {
        org.waveprotocol.box.server.persistence.AccountStore r0, $r2;
        java.lang.String r1, $r3;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.box.server.persistence.AccountStore;

        r1 := @parameter1: java.lang.String;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "Account store cannot be null");

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "Default domain cannot be null");

        $r2 = <org.waveprotocol.box.server.authentication.AccountStoreHolder: org.waveprotocol.box.server.persistence.AccountStore store>;

        if $r2 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Account store already set");

        <org.waveprotocol.box.server.authentication.AccountStoreHolder: org.waveprotocol.box.server.persistence.AccountStore store> = r0;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase()>();

        <org.waveprotocol.box.server.authentication.AccountStoreHolder: java.lang.String defaultDomain> = $r3;

        return;
    }

    public static org.waveprotocol.box.server.persistence.AccountStore getAccountStore()
    {
        org.waveprotocol.box.server.persistence.AccountStore $r0, $r1;

        $r0 = <org.waveprotocol.box.server.authentication.AccountStoreHolder: org.waveprotocol.box.server.persistence.AccountStore store>;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r0, "Account store not set");

        $r1 = <org.waveprotocol.box.server.authentication.AccountStoreHolder: org.waveprotocol.box.server.persistence.AccountStore store>;

        return $r1;
    }

    public static java.lang.String getDefaultDomain()
    {
        java.lang.String $r0, $r1;

        $r0 = <org.waveprotocol.box.server.authentication.AccountStoreHolder: java.lang.String defaultDomain>;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r0, "Default domain not set");

        $r1 = <org.waveprotocol.box.server.authentication.AccountStoreHolder: java.lang.String defaultDomain>;

        return $r1;
    }

    public static void resetForTesting()
    {
        <org.waveprotocol.box.server.authentication.AccountStoreHolder: org.waveprotocol.box.server.persistence.AccountStore store> = null;

        <org.waveprotocol.box.server.authentication.AccountStoreHolder: java.lang.String defaultDomain> = null;

        return;
    }

    static void <clinit>()
    {
        <org.waveprotocol.box.server.authentication.AccountStoreHolder: org.waveprotocol.box.server.persistence.AccountStore store> = null;

        <org.waveprotocol.box.server.authentication.AccountStoreHolder: java.lang.String defaultDomain> = null;

        return;
    }
}
