public class org.apache.log4j.net.SocketServer extends java.lang.Object
{
    static java.lang.String GENERIC;
    static java.lang.String CONFIG_FILE_EXT;
    static org.apache.log4j.Logger cat;
    static org.apache.log4j.net.SocketServer server;
    static int port;
    java.util.Hashtable hierarchyMap;
    org.apache.log4j.spi.LoggerRepository genericHierarchy;
    java.io.File dir;
    static java.lang.Class class$org$apache$log4j$net$SocketServer;

    public static void main(java.lang.String[])
    {
        java.net.Socket $r16;
        java.lang.String[] r0;
        java.net.ServerSocket $r6;
        java.net.InetAddress $r17;
        org.apache.log4j.Logger $r2, $r7, $r15, $r18;
        java.lang.StringBuffer $r1, $r3, $r4, $r19, $r20, $r21;
        java.lang.Thread $r8;
        int $i0, $i1, $i2;
        java.lang.String $r5, $r11, $r12, $r13, $r22;
        java.util.Hashtable $r24;
        org.apache.log4j.net.SocketServer $r10, $r23;
        java.lang.Exception $r14;
        java.lang.Object $r25;
        org.apache.log4j.spi.LoggerRepository $r26, r27;
        org.apache.log4j.net.SocketNode $r9;

        r0 := @parameter0: java.lang.String[];

        $i0 = lengthof r0;

        if $i0 != 3 goto label1;

        $r13 = r0[0];

        $r12 = r0[1];

        $r11 = r0[2];

        staticinvoke <org.apache.log4j.net.SocketServer: void init(java.lang.String,java.lang.String,java.lang.String)>($r13, $r12, $r11);

        goto label2;

     label1:
        staticinvoke <org.apache.log4j.net.SocketServer: void usage(java.lang.String)>("Wrong number of arguments.");

     label2:
        $r2 = <org.apache.log4j.net.SocketServer: org.apache.log4j.Logger cat>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Listening on port ");

        $i1 = <org.apache.log4j.net.SocketServer: int port>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<org.apache.log4j.Category: void info(java.lang.Object)>($r5);

        $r6 = new java.net.ServerSocket;

        $i2 = <org.apache.log4j.net.SocketServer: int port>;

        specialinvoke $r6.<java.net.ServerSocket: void <init>(int)>($i2);

     label3:
        $r15 = <org.apache.log4j.net.SocketServer: org.apache.log4j.Logger cat>;

        virtualinvoke $r15.<org.apache.log4j.Category: void info(java.lang.Object)>("Waiting to accept a new client.");

        $r16 = virtualinvoke $r6.<java.net.ServerSocket: java.net.Socket accept()>();

        $r17 = virtualinvoke $r16.<java.net.Socket: java.net.InetAddress getInetAddress()>();

        $r18 = <org.apache.log4j.net.SocketServer: org.apache.log4j.Logger cat>;

        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Connected to client at ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r17);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r18.<org.apache.log4j.Category: void info(java.lang.Object)>($r22);

        $r23 = <org.apache.log4j.net.SocketServer: org.apache.log4j.net.SocketServer server>;

        $r24 = $r23.<org.apache.log4j.net.SocketServer: java.util.Hashtable hierarchyMap>;

        $r25 = virtualinvoke $r24.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r17);

        $r26 = (org.apache.log4j.spi.LoggerRepository) $r25;

        r27 = $r26;

        if $r26 != null goto label4;

        $r10 = <org.apache.log4j.net.SocketServer: org.apache.log4j.net.SocketServer server>;

        r27 = virtualinvoke $r10.<org.apache.log4j.net.SocketServer: org.apache.log4j.spi.LoggerRepository configureHierarchy(java.net.InetAddress)>($r17);

     label4:
        $r7 = <org.apache.log4j.net.SocketServer: org.apache.log4j.Logger cat>;

        virtualinvoke $r7.<org.apache.log4j.Category: void info(java.lang.Object)>("Starting new socket node.");

        $r8 = new java.lang.Thread;

        $r9 = new org.apache.log4j.net.SocketNode;

        specialinvoke $r9.<org.apache.log4j.net.SocketNode: void <init>(java.net.Socket,org.apache.log4j.spi.LoggerRepository)>($r16, r27);

        specialinvoke $r8.<java.lang.Thread: void <init>(java.lang.Runnable)>($r9);

        virtualinvoke $r8.<java.lang.Thread: void start()>();

        goto label3;

     label5:
        $r14 := @caughtexception;

        virtualinvoke $r14.<java.lang.Throwable: void printStackTrace()>();

        return;

        catch java.lang.Exception from label2 to label5 with label5;
    }

    static void usage(java.lang.String)
    {
        java.io.PrintStream $r1, $r3;
        java.lang.StringBuffer $r2, $r4, $r7, $r8;
        java.lang.Class $r5, $r10;
        java.lang.String r0, $r6, $r9;

        r0 := @parameter0: java.lang.String;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>(r0);

        $r3 = <java.lang.System: java.io.PrintStream err>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Usage: java ");

        $r5 = <org.apache.log4j.net.SocketServer: java.lang.Class class$org$apache$log4j$net$SocketServer>;

        if $r5 != null goto label1;

        $r10 = staticinvoke <org.apache.log4j.net.SocketServer: java.lang.Class class$(java.lang.String)>("org.apache.log4j.net.SocketServer");

        <org.apache.log4j.net.SocketServer: java.lang.Class class$org$apache$log4j$net$SocketServer> = $r10;

        goto label2;

     label1:
        $r10 = <org.apache.log4j.net.SocketServer: java.lang.Class class$org$apache$log4j$net$SocketServer>;

     label2:
        $r6 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" port configFile directory");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r9);

        staticinvoke <java.lang.System: void exit(int)>(1);

        return;
    }

    static void init(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.StringBuffer $r5, $r6, $r7, $r8, $r11, $r12, $r13, $r14;
        int $i0;
        java.lang.String r0, r1, r3, $r9, $r15;
        boolean $z0;
        org.apache.log4j.net.SocketServer $r4;
        java.lang.NumberFormatException $r10;
        java.io.File $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

     label1:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r0);

        <org.apache.log4j.net.SocketServer: int port> = $i0;

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        virtualinvoke $r10.<java.lang.Throwable: void printStackTrace()>();

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not interpret port number [");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("].");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.net.SocketServer: void usage(java.lang.String)>($r15);

     label4:
        staticinvoke <org.apache.log4j.PropertyConfigurator: void configure(java.lang.String)>(r1);

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(r3);

        $z0 = virtualinvoke $r2.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label5;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] is not a directory.");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.net.SocketServer: void usage(java.lang.String)>($r9);

     label5:
        $r4 = new org.apache.log4j.net.SocketServer;

        specialinvoke $r4.<org.apache.log4j.net.SocketServer: void <init>(java.io.File)>($r2);

        <org.apache.log4j.net.SocketServer: org.apache.log4j.net.SocketServer server> = $r4;

        return;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public void <init>(java.io.File)
    {
        org.apache.log4j.net.SocketServer r0;
        java.io.File r1;
        java.util.Hashtable $r2;

        r0 := @this: org.apache.log4j.net.SocketServer;

        r1 := @parameter0: java.io.File;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.log4j.net.SocketServer: java.io.File dir> = r1;

        $r2 = new java.util.Hashtable;

        specialinvoke $r2.<java.util.Hashtable: void <init>(int)>(11);

        r0.<org.apache.log4j.net.SocketServer: java.util.Hashtable hierarchyMap> = $r2;

        return;
    }

    org.apache.log4j.spi.LoggerRepository configureHierarchy(java.net.InetAddress)
    {
        java.net.InetAddress r3;
        org.apache.log4j.Logger $r1, $r17, $r30;
        org.apache.log4j.Level $r25;
        boolean $z0;
        org.apache.log4j.net.SocketServer r9;
        org.apache.log4j.PropertyConfigurator $r42;
        org.apache.log4j.Hierarchy $r41;
        java.lang.StringBuffer $r2, $r4, $r12, $r14, $r18, $r19, $r20, $r31, $r32, $r33, $r36, $r37, $r38, $r43;
        int $i0, $i2;
        java.lang.String $r5, $r6, $r7, $r13, $r15, $r21, $r28, $r34;
        java.util.Hashtable $r26;
        org.apache.log4j.spi.RootLogger $r40;
        java.io.File $r11, $r39;
        org.apache.log4j.spi.LoggerRepository $r22, $r35;

        r9 := @this: org.apache.log4j.net.SocketServer;

        r3 := @parameter0: java.net.InetAddress;

        $r1 = <org.apache.log4j.net.SocketServer: org.apache.log4j.Logger cat>;

        $r36 = new java.lang.StringBuffer;

        specialinvoke $r36.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Locating configuration file for ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<org.apache.log4j.Category: void info(java.lang.Object)>($r5);

        $r6 = virtualinvoke r3.<java.net.InetAddress: java.lang.String toString()>();

        $i0 = virtualinvoke $r6.<java.lang.String: int indexOf(java.lang.String)>("/");

        $i2 = (int) -1;

        if $i0 != $i2 goto label1;

        $r30 = <org.apache.log4j.net.SocketServer: org.apache.log4j.Logger cat>;

        $r37 = new java.lang.StringBuffer;

        specialinvoke $r37.<java.lang.StringBuffer: void <init>()>();

        $r31 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not parse the inetAddress [");

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r3);

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]. Using default hierarchy.");

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r30.<org.apache.log4j.Category: void warn(java.lang.Object)>($r34);

        $r35 = virtualinvoke r9.<org.apache.log4j.net.SocketServer: org.apache.log4j.spi.LoggerRepository genericHierarchy()>();

        return $r35;

     label1:
        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r39 = new java.io.File;

        $r11 = r9.<org.apache.log4j.net.SocketServer: java.io.File dir>;

        $r38 = new java.lang.StringBuffer;

        specialinvoke $r38.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r13 = <org.apache.log4j.net.SocketServer: java.lang.String CONFIG_FILE_EXT>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r39.<java.io.File: void <init>(java.io.File,java.lang.String)>($r11, $r15);

        $z0 = virtualinvoke $r39.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label2;

        $r41 = new org.apache.log4j.Hierarchy;

        $r40 = new org.apache.log4j.spi.RootLogger;

        $r25 = <org.apache.log4j.Level: org.apache.log4j.Level DEBUG>;

        specialinvoke $r40.<org.apache.log4j.spi.RootLogger: void <init>(org.apache.log4j.Level)>($r25);

        specialinvoke $r41.<org.apache.log4j.Hierarchy: void <init>(org.apache.log4j.Logger)>($r40);

        $r26 = r9.<org.apache.log4j.net.SocketServer: java.util.Hashtable hierarchyMap>;

        virtualinvoke $r26.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r41);

        $r42 = new org.apache.log4j.PropertyConfigurator;

        specialinvoke $r42.<org.apache.log4j.PropertyConfigurator: void <init>()>();

        $r28 = virtualinvoke $r39.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r42.<org.apache.log4j.PropertyConfigurator: void doConfigure(java.lang.String,org.apache.log4j.spi.LoggerRepository)>($r28, $r41);

        return $r41;

     label2:
        $r17 = <org.apache.log4j.net.SocketServer: org.apache.log4j.Logger cat>;

        $r43 = new java.lang.StringBuffer;

        specialinvoke $r43.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not find config file [");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r39);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("].");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r17.<org.apache.log4j.Category: void warn(java.lang.Object)>($r21);

        $r22 = virtualinvoke r9.<org.apache.log4j.net.SocketServer: org.apache.log4j.spi.LoggerRepository genericHierarchy()>();

        return $r22;
    }

    org.apache.log4j.spi.LoggerRepository genericHierarchy()
    {
        org.apache.log4j.PropertyConfigurator $r20;
        org.apache.log4j.Hierarchy $r17;
        org.apache.log4j.Logger $r11;
        java.lang.StringBuffer $r3, $r6, $r8, $r10, $r12, $r13, $r14;
        org.apache.log4j.Level $r19;
        java.lang.String $r5, $r7, $r9, $r15, $r21;
        boolean $z0;
        org.apache.log4j.spi.RootLogger $r18;
        org.apache.log4j.net.SocketServer r0;
        java.io.File $r2, $r4;
        org.apache.log4j.spi.LoggerRepository $r1, $r16, $r22, $r23;

        r0 := @this: org.apache.log4j.net.SocketServer;

        $r1 = r0.<org.apache.log4j.net.SocketServer: org.apache.log4j.spi.LoggerRepository genericHierarchy>;

        if $r1 != null goto label2;

        $r2 = new java.io.File;

        $r4 = r0.<org.apache.log4j.net.SocketServer: java.io.File dir>;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r5 = <org.apache.log4j.net.SocketServer: java.lang.String GENERIC>;

        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = <org.apache.log4j.net.SocketServer: java.lang.String CONFIG_FILE_EXT>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, $r9);

        $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $r17 = new org.apache.log4j.Hierarchy;

        $r18 = new org.apache.log4j.spi.RootLogger;

        $r19 = <org.apache.log4j.Level: org.apache.log4j.Level DEBUG>;

        specialinvoke $r18.<org.apache.log4j.spi.RootLogger: void <init>(org.apache.log4j.Level)>($r19);

        specialinvoke $r17.<org.apache.log4j.Hierarchy: void <init>(org.apache.log4j.Logger)>($r18);

        r0.<org.apache.log4j.net.SocketServer: org.apache.log4j.spi.LoggerRepository genericHierarchy> = $r17;

        $r20 = new org.apache.log4j.PropertyConfigurator;

        specialinvoke $r20.<org.apache.log4j.PropertyConfigurator: void <init>()>();

        $r21 = virtualinvoke $r2.<java.io.File: java.lang.String getAbsolutePath()>();

        $r22 = r0.<org.apache.log4j.net.SocketServer: org.apache.log4j.spi.LoggerRepository genericHierarchy>;

        virtualinvoke $r20.<org.apache.log4j.PropertyConfigurator: void doConfigure(java.lang.String,org.apache.log4j.spi.LoggerRepository)>($r21, $r22);

        goto label2;

     label1:
        $r11 = <org.apache.log4j.net.SocketServer: org.apache.log4j.Logger cat>;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not find config file [");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]. Will use the default hierarchy.");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r11.<org.apache.log4j.Category: void warn(java.lang.Object)>($r15);

        $r16 = staticinvoke <org.apache.log4j.LogManager: org.apache.log4j.spi.LoggerRepository getLoggerRepository()>();

        r0.<org.apache.log4j.net.SocketServer: org.apache.log4j.spi.LoggerRepository genericHierarchy> = $r16;

     label2:
        $r23 = r0.<org.apache.log4j.net.SocketServer: org.apache.log4j.spi.LoggerRepository genericHierarchy>;

        return $r23;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        org.apache.log4j.Logger $r1;
        java.lang.Class $r0, $r2;

        <org.apache.log4j.net.SocketServer: java.lang.String GENERIC> = "generic";

        <org.apache.log4j.net.SocketServer: java.lang.String CONFIG_FILE_EXT> = ".lcf";

        $r0 = <org.apache.log4j.net.SocketServer: java.lang.Class class$org$apache$log4j$net$SocketServer>;

        if $r0 != null goto label1;

        $r2 = staticinvoke <org.apache.log4j.net.SocketServer: java.lang.Class class$(java.lang.String)>("org.apache.log4j.net.SocketServer");

        <org.apache.log4j.net.SocketServer: java.lang.Class class$org$apache$log4j$net$SocketServer> = $r2;

        goto label2;

     label1:
        $r2 = <org.apache.log4j.net.SocketServer: java.lang.Class class$org$apache$log4j$net$SocketServer>;

     label2:
        $r1 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.Class)>($r2);

        <org.apache.log4j.net.SocketServer: org.apache.log4j.Logger cat> = $r1;

        return;
    }
}
