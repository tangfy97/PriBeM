public abstract class com.mycila.inject.internal.cglib.util.ParallelSorter extends com.mycila.inject.internal.cglib.util.SorterTemplate
{
    protected java.lang.Object[] a;
    private com.mycila.inject.internal.cglib.util.ParallelSorter$Comparer comparer;
    static java.lang.Class class$net$sf$cglib$util$ParallelSorter;

    protected void <init>()
    {
        com.mycila.inject.internal.cglib.util.ParallelSorter r0;

        r0 := @this: com.mycila.inject.internal.cglib.util.ParallelSorter;

        specialinvoke r0.<com.mycila.inject.internal.cglib.util.SorterTemplate: void <init>()>();

        return;
    }

    public abstract com.mycila.inject.internal.cglib.util.ParallelSorter newInstance(java.lang.Object[]);

    public static com.mycila.inject.internal.cglib.util.ParallelSorter create(java.lang.Object[])
    {
        java.lang.Object[] r1;
        com.mycila.inject.internal.cglib.util.ParallelSorter $r2;
        com.mycila.inject.internal.cglib.util.ParallelSorter$Generator $r0;

        r1 := @parameter0: java.lang.Object[];

        $r0 = new com.mycila.inject.internal.cglib.util.ParallelSorter$Generator;

        specialinvoke $r0.<com.mycila.inject.internal.cglib.util.ParallelSorter$Generator: void <init>()>();

        virtualinvoke $r0.<com.mycila.inject.internal.cglib.util.ParallelSorter$Generator: void setArrays(java.lang.Object[])>(r1);

        $r2 = virtualinvoke $r0.<com.mycila.inject.internal.cglib.util.ParallelSorter$Generator: com.mycila.inject.internal.cglib.util.ParallelSorter create()>();

        return $r2;
    }

    private int len()
    {
        java.lang.Object[] $r1, $r3, $r4;
        int $i0;
        java.lang.Object $r2;
        com.mycila.inject.internal.cglib.util.ParallelSorter r0;

        r0 := @this: com.mycila.inject.internal.cglib.util.ParallelSorter;

        $r1 = r0.<com.mycila.inject.internal.cglib.util.ParallelSorter: java.lang.Object[] a>;

        $r2 = $r1[0];

        $r3 = (java.lang.Object[]) $r2;

        $r4 = (java.lang.Object[]) $r3;

        $i0 = lengthof $r4;

        return $i0;
    }

    public void quickSort(int)
    {
        int i0, $i1;
        com.mycila.inject.internal.cglib.util.ParallelSorter r0;

        r0 := @this: com.mycila.inject.internal.cglib.util.ParallelSorter;

        i0 := @parameter0: int;

        $i1 = specialinvoke r0.<com.mycila.inject.internal.cglib.util.ParallelSorter: int len()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.util.ParallelSorter: void quickSort(int,int,int,java.util.Comparator)>(i0, 0, $i1, null);

        return;
    }

    public void quickSort(int, int, int)
    {
        int i0, i1, i2;
        com.mycila.inject.internal.cglib.util.ParallelSorter r0;

        r0 := @this: com.mycila.inject.internal.cglib.util.ParallelSorter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.util.ParallelSorter: void quickSort(int,int,int,java.util.Comparator)>(i0, i1, i2, null);

        return;
    }

    public void quickSort(int, java.util.Comparator)
    {
        int i0, $i1;
        com.mycila.inject.internal.cglib.util.ParallelSorter r0;
        java.util.Comparator r1;

        r0 := @this: com.mycila.inject.internal.cglib.util.ParallelSorter;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Comparator;

        $i1 = specialinvoke r0.<com.mycila.inject.internal.cglib.util.ParallelSorter: int len()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.util.ParallelSorter: void quickSort(int,int,int,java.util.Comparator)>(i0, 0, $i1, r1);

        return;
    }

    public void quickSort(int, int, int, java.util.Comparator)
    {
        int i0, i1, i2, $i3;
        com.mycila.inject.internal.cglib.util.ParallelSorter r0;
        java.util.Comparator r1;

        r0 := @this: com.mycila.inject.internal.cglib.util.ParallelSorter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: java.util.Comparator;

        specialinvoke r0.<com.mycila.inject.internal.cglib.util.ParallelSorter: void chooseComparer(int,java.util.Comparator)>(i0, r1);

        $i3 = i2 - 1;

        specialinvoke r0.<com.mycila.inject.internal.cglib.util.SorterTemplate: void quickSort(int,int)>(i1, $i3);

        return;
    }

    public void mergeSort(int)
    {
        int i0, $i1;
        com.mycila.inject.internal.cglib.util.ParallelSorter r0;

        r0 := @this: com.mycila.inject.internal.cglib.util.ParallelSorter;

        i0 := @parameter0: int;

        $i1 = specialinvoke r0.<com.mycila.inject.internal.cglib.util.ParallelSorter: int len()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.util.ParallelSorter: void mergeSort(int,int,int,java.util.Comparator)>(i0, 0, $i1, null);

        return;
    }

    public void mergeSort(int, int, int)
    {
        int i0, i1, i2;
        com.mycila.inject.internal.cglib.util.ParallelSorter r0;

        r0 := @this: com.mycila.inject.internal.cglib.util.ParallelSorter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.util.ParallelSorter: void mergeSort(int,int,int,java.util.Comparator)>(i0, i1, i2, null);

        return;
    }

    public void mergeSort(int, java.util.Comparator)
    {
        int i0, $i1;
        com.mycila.inject.internal.cglib.util.ParallelSorter r0;
        java.util.Comparator r1;

        r0 := @this: com.mycila.inject.internal.cglib.util.ParallelSorter;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Comparator;

        $i1 = specialinvoke r0.<com.mycila.inject.internal.cglib.util.ParallelSorter: int len()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.util.ParallelSorter: void mergeSort(int,int,int,java.util.Comparator)>(i0, 0, $i1, r1);

        return;
    }

    public void mergeSort(int, int, int, java.util.Comparator)
    {
        int i0, i1, i2, $i3;
        com.mycila.inject.internal.cglib.util.ParallelSorter r0;
        java.util.Comparator r1;

        r0 := @this: com.mycila.inject.internal.cglib.util.ParallelSorter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: java.util.Comparator;

        specialinvoke r0.<com.mycila.inject.internal.cglib.util.ParallelSorter: void chooseComparer(int,java.util.Comparator)>(i0, r1);

        $i3 = i2 - 1;

        specialinvoke r0.<com.mycila.inject.internal.cglib.util.SorterTemplate: void mergeSort(int,int)>(i1, $i3);

        return;
    }

    private void chooseComparer(int, java.util.Comparator)
    {
        byte[] $r19, $r20;
        com.mycila.inject.internal.cglib.util.ParallelSorter$FloatComparer $r24;
        com.mycila.inject.internal.cglib.util.ParallelSorter$DoubleComparer $r27;
        com.mycila.inject.internal.cglib.util.ParallelSorter$IntComparer $r33;
        int[] $r34, $r35;
        com.mycila.inject.internal.cglib.util.ParallelSorter$ByteComparer $r18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        com.mycila.inject.internal.cglib.util.ParallelSorter$ComparatorComparer $r15;
        short[] $r22, $r23;
        java.lang.Object[] $r1, $r13, $r14, $r16, $r17;
        double[] $r28, $r29;
        float[] $r25, $r26;
        com.mycila.inject.internal.cglib.util.ParallelSorter r0;
        long[] $r31, $r32;
        com.mycila.inject.internal.cglib.util.ParallelSorter$LongComparer $r30;
        int i0;
        com.mycila.inject.internal.cglib.util.ParallelSorter$ShortComparer $r21;
        java.lang.Object r2;
        java.lang.Class $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        java.util.Comparator r11;
        com.mycila.inject.internal.cglib.util.ParallelSorter$ObjectComparer $r12;

        r0 := @this: com.mycila.inject.internal.cglib.util.ParallelSorter;

        i0 := @parameter0: int;

        r11 := @parameter1: java.util.Comparator;

        $r1 = r0.<com.mycila.inject.internal.cglib.util.ParallelSorter: java.lang.Object[] a>;

        r2 = $r1[i0];

        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Class getComponentType()>();

        $r5 = <java.lang.Integer: java.lang.Class TYPE>;

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label1;

        $r33 = new com.mycila.inject.internal.cglib.util.ParallelSorter$IntComparer;

        $r34 = (int[]) r2;

        $r35 = (int[]) $r34;

        specialinvoke $r33.<com.mycila.inject.internal.cglib.util.ParallelSorter$IntComparer: void <init>(int[])>($r35);

        r0.<com.mycila.inject.internal.cglib.util.ParallelSorter: com.mycila.inject.internal.cglib.util.ParallelSorter$Comparer comparer> = $r33;

        goto label8;

     label1:
        $r6 = <java.lang.Long: java.lang.Class TYPE>;

        $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label2;

        $r30 = new com.mycila.inject.internal.cglib.util.ParallelSorter$LongComparer;

        $r31 = (long[]) r2;

        $r32 = (long[]) $r31;

        specialinvoke $r30.<com.mycila.inject.internal.cglib.util.ParallelSorter$LongComparer: void <init>(long[])>($r32);

        r0.<com.mycila.inject.internal.cglib.util.ParallelSorter: com.mycila.inject.internal.cglib.util.ParallelSorter$Comparer comparer> = $r30;

        goto label8;

     label2:
        $r7 = <java.lang.Double: java.lang.Class TYPE>;

        $z2 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z2 == 0 goto label3;

        $r27 = new com.mycila.inject.internal.cglib.util.ParallelSorter$DoubleComparer;

        $r28 = (double[]) r2;

        $r29 = (double[]) $r28;

        specialinvoke $r27.<com.mycila.inject.internal.cglib.util.ParallelSorter$DoubleComparer: void <init>(double[])>($r29);

        r0.<com.mycila.inject.internal.cglib.util.ParallelSorter: com.mycila.inject.internal.cglib.util.ParallelSorter$Comparer comparer> = $r27;

        goto label8;

     label3:
        $r8 = <java.lang.Float: java.lang.Class TYPE>;

        $z3 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r8);

        if $z3 == 0 goto label4;

        $r24 = new com.mycila.inject.internal.cglib.util.ParallelSorter$FloatComparer;

        $r25 = (float[]) r2;

        $r26 = (float[]) $r25;

        specialinvoke $r24.<com.mycila.inject.internal.cglib.util.ParallelSorter$FloatComparer: void <init>(float[])>($r26);

        r0.<com.mycila.inject.internal.cglib.util.ParallelSorter: com.mycila.inject.internal.cglib.util.ParallelSorter$Comparer comparer> = $r24;

        goto label8;

     label4:
        $r9 = <java.lang.Short: java.lang.Class TYPE>;

        $z4 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r9);

        if $z4 == 0 goto label5;

        $r21 = new com.mycila.inject.internal.cglib.util.ParallelSorter$ShortComparer;

        $r22 = (short[]) r2;

        $r23 = (short[]) $r22;

        specialinvoke $r21.<com.mycila.inject.internal.cglib.util.ParallelSorter$ShortComparer: void <init>(short[])>($r23);

        r0.<com.mycila.inject.internal.cglib.util.ParallelSorter: com.mycila.inject.internal.cglib.util.ParallelSorter$Comparer comparer> = $r21;

        goto label8;

     label5:
        $r10 = <java.lang.Byte: java.lang.Class TYPE>;

        $z5 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r10);

        if $z5 == 0 goto label6;

        $r18 = new com.mycila.inject.internal.cglib.util.ParallelSorter$ByteComparer;

        $r19 = (byte[]) r2;

        $r20 = (byte[]) $r19;

        specialinvoke $r18.<com.mycila.inject.internal.cglib.util.ParallelSorter$ByteComparer: void <init>(byte[])>($r20);

        r0.<com.mycila.inject.internal.cglib.util.ParallelSorter: com.mycila.inject.internal.cglib.util.ParallelSorter$Comparer comparer> = $r18;

        goto label8;

     label6:
        if r11 == null goto label7;

        $r15 = new com.mycila.inject.internal.cglib.util.ParallelSorter$ComparatorComparer;

        $r16 = (java.lang.Object[]) r2;

        $r17 = (java.lang.Object[]) $r16;

        specialinvoke $r15.<com.mycila.inject.internal.cglib.util.ParallelSorter$ComparatorComparer: void <init>(java.lang.Object[],java.util.Comparator)>($r17, r11);

        r0.<com.mycila.inject.internal.cglib.util.ParallelSorter: com.mycila.inject.internal.cglib.util.ParallelSorter$Comparer comparer> = $r15;

        goto label8;

     label7:
        $r12 = new com.mycila.inject.internal.cglib.util.ParallelSorter$ObjectComparer;

        $r13 = (java.lang.Object[]) r2;

        $r14 = (java.lang.Object[]) $r13;

        specialinvoke $r12.<com.mycila.inject.internal.cglib.util.ParallelSorter$ObjectComparer: void <init>(java.lang.Object[])>($r14);

        r0.<com.mycila.inject.internal.cglib.util.ParallelSorter: com.mycila.inject.internal.cglib.util.ParallelSorter$Comparer comparer> = $r12;

     label8:
        return;
    }

    protected int compare(int, int)
    {
        com.mycila.inject.internal.cglib.util.ParallelSorter$Comparer $r1;
        int i0, i1, $i2;
        com.mycila.inject.internal.cglib.util.ParallelSorter r0;

        r0 := @this: com.mycila.inject.internal.cglib.util.ParallelSorter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.mycila.inject.internal.cglib.util.ParallelSorter: com.mycila.inject.internal.cglib.util.ParallelSorter$Comparer comparer>;

        $i2 = interfaceinvoke $r1.<com.mycila.inject.internal.cglib.util.ParallelSorter$Comparer: int compare(int,int)>(i0, i1);

        return $i2;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
}
