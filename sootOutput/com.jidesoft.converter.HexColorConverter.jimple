public class com.jidesoft.converter.HexColorConverter extends com.jidesoft.converter.ColorConverter
{
    private boolean _alphaIncluded;

    public void <init>()
    {
        com.jidesoft.converter.HexColorConverter r0;

        r0 := @this: com.jidesoft.converter.HexColorConverter;

        specialinvoke r0.<com.jidesoft.converter.ColorConverter: void <init>()>();

        r0.<com.jidesoft.converter.HexColorConverter: boolean _alphaIncluded> = 0;

        return;
    }

    public void <init>(boolean)
    {
        com.jidesoft.converter.HexColorConverter r0;
        boolean z0;

        r0 := @this: com.jidesoft.converter.HexColorConverter;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.jidesoft.converter.ColorConverter: void <init>()>();

        r0.<com.jidesoft.converter.HexColorConverter: boolean _alphaIncluded> = 0;

        r0.<com.jidesoft.converter.HexColorConverter: boolean _alphaIncluded> = z0;

        return;
    }

    public boolean isAlphaIncluded()
    {
        com.jidesoft.converter.HexColorConverter r0;
        boolean $z0;

        r0 := @this: com.jidesoft.converter.HexColorConverter;

        $z0 = r0.<com.jidesoft.converter.HexColorConverter: boolean _alphaIncluded>;

        return $z0;
    }

    public void setAlphaIncluded(boolean)
    {
        com.jidesoft.converter.HexColorConverter r0;
        boolean z0;

        r0 := @this: com.jidesoft.converter.HexColorConverter;

        z0 := @parameter0: boolean;

        r0.<com.jidesoft.converter.HexColorConverter: boolean _alphaIncluded> = z0;

        return;
    }

    protected java.lang.String getHexString(int)
    {
        com.jidesoft.converter.HexColorConverter r5;
        int i0, $i1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r0, $r1, r6;

        r5 := @this: com.jidesoft.converter.HexColorConverter;

        i0 := @parameter0: int;

        $r0 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r1 = virtualinvoke $r0.<java.lang.String: java.lang.String toUpperCase()>();

        r6 = $r1;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i1 != 1 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        return r6;
    }

    public java.lang.String toString(java.lang.Object, com.jidesoft.converter.ConverterContext)
    {
        java.awt.Color r1;
        java.lang.StringBuffer $r2;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r4, $r5, $r6, $r7, $r8;
        boolean $z0, $z1;
        com.jidesoft.converter.HexColorConverter r3;
        com.jidesoft.converter.ConverterContext r9;
        java.lang.Object r0;

        r3 := @this: com.jidesoft.converter.HexColorConverter;

        r0 := @parameter0: java.lang.Object;

        r9 := @parameter1: com.jidesoft.converter.ConverterContext;

        $z0 = r0 instanceof java.awt.Color;

        if $z0 == 0 goto label2;

        r1 = (java.awt.Color) r0;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>(java.lang.String)>("#");

        $z1 = virtualinvoke r3.<com.jidesoft.converter.HexColorConverter: boolean isAlphaIncluded()>();

        if $z1 == 0 goto label1;

        $i3 = virtualinvoke r1.<java.awt.Color: int getAlpha()>();

        $r8 = virtualinvoke r3.<com.jidesoft.converter.HexColorConverter: java.lang.String getHexString(int)>($i3);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

     label1:
        $i0 = virtualinvoke r1.<java.awt.Color: int getRed()>();

        $r4 = virtualinvoke r3.<com.jidesoft.converter.HexColorConverter: java.lang.String getHexString(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $i1 = virtualinvoke r1.<java.awt.Color: int getGreen()>();

        $r5 = virtualinvoke r3.<com.jidesoft.converter.HexColorConverter: java.lang.String getHexString(int)>($i1);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $i2 = virtualinvoke r1.<java.awt.Color: int getBlue()>();

        $r6 = virtualinvoke r3.<com.jidesoft.converter.HexColorConverter: java.lang.String getHexString(int)>($i2);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r7 = new java.lang.String;

        specialinvoke $r7.<java.lang.String: void <init>(java.lang.StringBuffer)>($r2);

        return $r7;

     label2:
        return "";
    }

    public boolean supportToString(java.lang.Object, com.jidesoft.converter.ConverterContext)
    {
        java.lang.Object r1;
        com.jidesoft.converter.ConverterContext r2;
        com.jidesoft.converter.HexColorConverter r0;

        r0 := @this: com.jidesoft.converter.HexColorConverter;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: com.jidesoft.converter.ConverterContext;

        return 1;
    }

    public boolean supportFromString(java.lang.String, com.jidesoft.converter.ConverterContext)
    {
        java.lang.String r1;
        com.jidesoft.converter.ConverterContext r2;
        com.jidesoft.converter.HexColorConverter r0;

        r0 := @this: com.jidesoft.converter.HexColorConverter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.jidesoft.converter.ConverterContext;

        return 1;
    }

    public java.lang.Object fromString(java.lang.String, com.jidesoft.converter.ConverterContext)
    {
        java.awt.Color $r2;
        long $l8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.String $r0, r5;
        boolean $z0, $z1, $z2;
        com.jidesoft.converter.HexColorConverter r1;
        java.lang.NumberFormatException $r3;
        com.jidesoft.converter.ConverterContext r4;

        r1 := @this: com.jidesoft.converter.HexColorConverter;

        r5 := @parameter0: java.lang.String;

        r4 := @parameter1: com.jidesoft.converter.ConverterContext;

        if r5 == null goto label1;

        $r0 = virtualinvoke r5.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        return null;

     label2:
        $z0 = virtualinvoke r5.<java.lang.String: boolean startsWith(java.lang.String)>("#");

        if $z0 == 0 goto label3;

        r5 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int)>(1);

     label3:
        $z1 = virtualinvoke r1.<com.jidesoft.converter.HexColorConverter: boolean isAlphaIncluded()>();

        if $z1 == 0 goto label4;

        $i5 = virtualinvoke r5.<java.lang.String: int length()>();

        if $i5 <= 8 goto label5;

        $i6 = virtualinvoke r5.<java.lang.String: int length()>();

        $i7 = $i6 - 8;

        r5 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int)>($i7);

        goto label5;

     label4:
        $i1 = virtualinvoke r5.<java.lang.String: int length()>();

        if $i1 <= 6 goto label5;

        $i3 = virtualinvoke r5.<java.lang.String: int length()>();

        $i4 = $i3 - 6;

        r5 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int)>($i4);

     label5:
        $l8 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>(r5, 16);

     label6:
        goto label8;

     label7:
        $r3 := @caughtexception;

        return null;

     label8:
        $r2 = new java.awt.Color;

        $i2 = (int) $l8;

        $z2 = virtualinvoke r1.<com.jidesoft.converter.HexColorConverter: boolean isAlphaIncluded()>();

        specialinvoke $r2.<java.awt.Color: void <init>(int,boolean)>($i2, $z2);

        return $r2;

        catch java.lang.NumberFormatException from label5 to label6 with label7;
    }
}
