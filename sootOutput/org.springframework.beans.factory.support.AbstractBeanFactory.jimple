public abstract class org.springframework.beans.factory.support.AbstractBeanFactory extends org.springframework.beans.factory.support.FactoryBeanRegistrySupport implements org.springframework.beans.factory.config.ConfigurableBeanFactory
{
    private org.springframework.beans.factory.BeanFactory parentBeanFactory;
    private java.lang.ClassLoader beanClassLoader;
    private java.lang.ClassLoader tempClassLoader;
    private boolean cacheBeanMetadata;
    private org.springframework.beans.factory.config.BeanExpressionResolver beanExpressionResolver;
    private org.springframework.core.convert.ConversionService conversionService;
    private final java.util.Set propertyEditorRegistrars;
    private org.springframework.beans.TypeConverter typeConverter;
    private final java.util.Map customEditors;
    private final java.util.List embeddedValueResolvers;
    private final java.util.List beanPostProcessors;
    private boolean hasInstantiationAwareBeanPostProcessors;
    private boolean hasDestructionAwareBeanPostProcessors;
    private final java.util.Map scopes;
    private org.springframework.beans.factory.support.SecurityContextProvider securityContextProvider;
    private final java.util.Map mergedBeanDefinitions;
    private final java.util.Set alreadyCreated;
    private final java.lang.ThreadLocal prototypesCurrentlyInCreation;

    public void <init>()
    {
        java.util.concurrent.ConcurrentHashMap $r7;
        java.util.Set $r9;
        java.util.HashMap $r3, $r6;
        java.util.ArrayList $r5;
        org.springframework.core.NamedThreadLocal $r10;
        java.util.HashSet $r8;
        org.springframework.beans.factory.support.AbstractBeanFactory r0;
        java.lang.ClassLoader $r1;
        java.util.LinkedList $r4;
        java.util.LinkedHashSet $r2;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        specialinvoke r0.<org.springframework.beans.factory.support.FactoryBeanRegistrySupport: void <init>()>();

        $r1 = staticinvoke <org.springframework.util.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>();

        r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.ClassLoader beanClassLoader> = $r1;

        r0.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean cacheBeanMetadata> = 1;

        $r2 = new java.util.LinkedHashSet;

        specialinvoke $r2.<java.util.LinkedHashSet: void <init>(int)>(4);

        r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.Set propertyEditorRegistrars> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>(int)>(4);

        r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.Map customEditors> = $r3;

        $r4 = new java.util.LinkedList;

        specialinvoke $r4.<java.util.LinkedList: void <init>()>();

        r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.List embeddedValueResolvers> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.List beanPostProcessors> = $r5;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.Map scopes> = $r6;

        $r7 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r7.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.Map mergedBeanDefinitions> = $r7;

        $r8 = new java.util.HashSet;

        specialinvoke $r8.<java.util.HashSet: void <init>()>();

        $r9 = staticinvoke <java.util.Collections: java.util.Set synchronizedSet(java.util.Set)>($r8);

        r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.Set alreadyCreated> = $r9;

        $r10 = new org.springframework.core.NamedThreadLocal;

        specialinvoke $r10.<org.springframework.core.NamedThreadLocal: void <init>(java.lang.String)>("Prototype beans currently in creation");

        r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.ThreadLocal prototypesCurrentlyInCreation> = $r10;

        return;
    }

    public void <init>(org.springframework.beans.factory.BeanFactory)
    {
        java.util.concurrent.ConcurrentHashMap $r7;
        java.util.Set $r9;
        java.util.HashMap $r3, $r6;
        java.util.ArrayList $r5;
        org.springframework.core.NamedThreadLocal $r10;
        java.util.HashSet $r8;
        org.springframework.beans.factory.support.AbstractBeanFactory r0;
        org.springframework.beans.factory.BeanFactory r11;
        java.lang.ClassLoader $r1;
        java.util.LinkedList $r4;
        java.util.LinkedHashSet $r2;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r11 := @parameter0: org.springframework.beans.factory.BeanFactory;

        specialinvoke r0.<org.springframework.beans.factory.support.FactoryBeanRegistrySupport: void <init>()>();

        $r1 = staticinvoke <org.springframework.util.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>();

        r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.ClassLoader beanClassLoader> = $r1;

        r0.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean cacheBeanMetadata> = 1;

        $r2 = new java.util.LinkedHashSet;

        specialinvoke $r2.<java.util.LinkedHashSet: void <init>(int)>(4);

        r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.Set propertyEditorRegistrars> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>(int)>(4);

        r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.Map customEditors> = $r3;

        $r4 = new java.util.LinkedList;

        specialinvoke $r4.<java.util.LinkedList: void <init>()>();

        r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.List embeddedValueResolvers> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.List beanPostProcessors> = $r5;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.Map scopes> = $r6;

        $r7 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r7.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.Map mergedBeanDefinitions> = $r7;

        $r8 = new java.util.HashSet;

        specialinvoke $r8.<java.util.HashSet: void <init>()>();

        $r9 = staticinvoke <java.util.Collections: java.util.Set synchronizedSet(java.util.Set)>($r8);

        r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.Set alreadyCreated> = $r9;

        $r10 = new org.springframework.core.NamedThreadLocal;

        specialinvoke $r10.<org.springframework.core.NamedThreadLocal: void <init>(java.lang.String)>("Prototype beans currently in creation");

        r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.ThreadLocal prototypesCurrentlyInCreation> = $r10;

        r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.BeanFactory parentBeanFactory> = r11;

        return;
    }

    public java.lang.Object getBean(java.lang.String) throws org.springframework.beans.BeansException
    {
        java.lang.Object $r2;
        java.lang.String r1;
        org.springframework.beans.factory.support.AbstractBeanFactory r0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.Object doGetBean(java.lang.String,java.lang.Class,java.lang.Object[],boolean)>(r1, null, null, 0);

        return $r2;
    }

    public java.lang.Object getBean(java.lang.String, java.lang.Class) throws org.springframework.beans.BeansException
    {
        org.springframework.beans.factory.support.AbstractBeanFactory r0;
        java.lang.Class r2;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class;

        $r3 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.Object doGetBean(java.lang.String,java.lang.Class,java.lang.Object[],boolean)>(r1, r2, null, 0);

        return $r3;
    }

    public transient java.lang.Object getBean(java.lang.String, java.lang.Object[]) throws org.springframework.beans.BeansException
    {
        java.lang.Object[] r2;
        org.springframework.beans.factory.support.AbstractBeanFactory r0;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        $r3 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.Object doGetBean(java.lang.String,java.lang.Class,java.lang.Object[],boolean)>(r1, null, r2, 0);

        return $r3;
    }

    public transient java.lang.Object getBean(java.lang.String, java.lang.Class, java.lang.Object[]) throws org.springframework.beans.BeansException
    {
        java.lang.Object[] r3;
        org.springframework.beans.factory.support.AbstractBeanFactory r0;
        java.lang.Class r2;
        java.lang.Object $r4;
        java.lang.String r1;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: java.lang.Object[];

        $r4 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.Object doGetBean(java.lang.String,java.lang.Class,java.lang.Object[],boolean)>(r1, r2, r3, 0);

        return $r4;
    }

    protected java.lang.Object doGetBean(java.lang.String, java.lang.Class, java.lang.Object[], boolean) throws org.springframework.beans.BeansException
    {
        java.util.Map $r9;
        org.springframework.beans.TypeConverter $r15;
        org.springframework.beans.TypeMismatchException $r40;
        java.lang.StringBuilder $r18, $r19, $r20, $r30, $r32, $r33, $r35, $r37, $r38, $r44, $r46, $r47, $r49, $r50, $r54, $r55, $r56, $r57;
        org.springframework.beans.factory.support.RootBeanDefinition $r5;
        java.lang.Throwable $r59;
        java.lang.Object[] r6;
        org.springframework.beans.factory.BeanCreationException $r53;
        java.lang.String r1, $r2, $r8, $r21, $r25, $r34, $r39, $r48, $r51, $r58, r61;
        org.springframework.beans.factory.BeanFactory $r4;
        java.lang.IllegalStateException $r17, $r52;
        org.springframework.beans.factory.BeanCurrentlyInCreationException $r28;
        org.springframework.beans.factory.support.AbstractBeanFactory r0;
        boolean $z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        org.springframework.beans.factory.support.AbstractBeanFactory$2 $r11;
        org.springframework.beans.factory.support.AbstractBeanFactory$1 $r23;
        java.lang.String[] $r7;
        org.springframework.beans.factory.config.Scope r62;
        org.springframework.beans.factory.BeanNotOfRequiredTypeException $r42;
        int i0, i1;
        java.lang.Object $r3, $r10, $r12, $r16, $r22, $r24, $r26, $r27, r60;
        java.lang.Class r13, $r14, $r43;
        org.apache.commons.logging.Log $r29, $r31, $r36, $r41, $r45;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r1 := @parameter0: java.lang.String;

        r13 := @parameter1: java.lang.Class;

        r6 := @parameter2: java.lang.Object[];

        z1 := @parameter3: boolean;

        $r2 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.String transformedBeanName(java.lang.String)>(r1);

        $r3 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.Object getSingleton(java.lang.String)>($r2);

        if $r3 == null goto label03;

        if r6 != null goto label03;

        $r29 = r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.apache.commons.logging.Log logger>;

        $z6 = interfaceinvoke $r29.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z6 == 0 goto label02;

        $z7 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isSingletonCurrentlyInCreation(java.lang.String)>($r2);

        if $z7 == 0 goto label01;

        $r36 = r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.apache.commons.logging.Log logger>;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>(java.lang.String)>("Returning eagerly cached instance of singleton bean \'");

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' that is not fully initialized yet - a consequence of a circular reference");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r36.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r39);

        goto label02;

     label01:
        $r31 = r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.apache.commons.logging.Log logger>;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>(java.lang.String)>("Returning cached instance of singleton bean \'");

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r31.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r34);

     label02:
        r60 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.Object getObjectForBeanInstance(java.lang.Object,java.lang.String,java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition)>($r3, r1, $r2, null);

        goto label19;

     label03:
        $z0 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isPrototypeCurrentlyInCreation(java.lang.String)>($r2);

        if $z0 == 0 goto label04;

        $r28 = new org.springframework.beans.factory.BeanCurrentlyInCreationException;

        specialinvoke $r28.<org.springframework.beans.factory.BeanCurrentlyInCreationException: void <init>(java.lang.String)>($r2);

        throw $r28;

     label04:
        $r4 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.BeanFactory getParentBeanFactory()>();

        if $r4 == null goto label06;

        $z5 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean containsBeanDefinition(java.lang.String)>($r2);

        if $z5 != 0 goto label06;

        $r25 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.String originalBeanName(java.lang.String)>(r1);

        if r6 == null goto label05;

        $r27 = interfaceinvoke $r4.<org.springframework.beans.factory.BeanFactory: java.lang.Object getBean(java.lang.String,java.lang.Object[])>($r25, r6);

        return $r27;

     label05:
        $r26 = interfaceinvoke $r4.<org.springframework.beans.factory.BeanFactory: java.lang.Object getBean(java.lang.String,java.lang.Class)>($r25, r13);

        return $r26;

     label06:
        if z1 != 0 goto label07;

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: void markBeanAsCreated(java.lang.String)>($r2);

     label07:
        $r5 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.support.RootBeanDefinition getMergedLocalBeanDefinition(java.lang.String)>($r2);

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: void checkMergedBeanDefinition(org.springframework.beans.factory.support.RootBeanDefinition,java.lang.String,java.lang.Object[])>($r5, $r2, r6);

        $r7 = virtualinvoke $r5.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String[] getDependsOn()>();

        if $r7 == null goto label10;

        i0 = lengthof $r7;

        i1 = 0;

        goto label09;

     label08:
        r61 = $r7[i1];

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.Object getBean(java.lang.String)>(r61);

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: void registerDependentBean(java.lang.String,java.lang.String)>(r61, $r2);

        i1 = i1 + 1;

     label09:
        if i1 < i0 goto label08;

     label10:
        $z2 = virtualinvoke $r5.<org.springframework.beans.factory.support.RootBeanDefinition: boolean isSingleton()>();

        if $z2 == 0 goto label11;

        $r23 = new org.springframework.beans.factory.support.AbstractBeanFactory$1;

        specialinvoke $r23.<org.springframework.beans.factory.support.AbstractBeanFactory$1: void <init>(org.springframework.beans.factory.support.AbstractBeanFactory,java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])>(r0, $r2, $r5, r6);

        $r24 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.Object getSingleton(java.lang.String,org.springframework.beans.factory.ObjectFactory)>($r2, $r23);

        r60 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.Object getObjectForBeanInstance(java.lang.Object,java.lang.String,java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition)>($r24, r1, $r2, $r5);

        goto label19;

     label11:
        $z3 = virtualinvoke $r5.<org.springframework.beans.factory.support.RootBeanDefinition: boolean isPrototype()>();

        if $z3 == 0 goto label15;

     label12:
        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: void beforePrototypeCreation(java.lang.String)>($r2);

        $r22 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.Object createBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])>($r2, $r5, r6);

        goto label14;

     label13:
        $r59 := @caughtexception;

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: void afterPrototypeCreation(java.lang.String)>($r2);

        throw $r59;

     label14:
        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: void afterPrototypeCreation(java.lang.String)>($r2);

        r60 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.Object getObjectForBeanInstance(java.lang.Object,java.lang.String,java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition)>($r22, r1, $r2, $r5);

        goto label19;

     label15:
        $r8 = virtualinvoke $r5.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String getScope()>();

        $r9 = r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.Map scopes>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);

        r62 = (org.springframework.beans.factory.config.Scope) $r10;

        if r62 != null goto label16;

        $r17 = new java.lang.IllegalStateException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>(java.lang.String)>("No Scope registered for scope \'");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r21);

        throw $r17;

     label16:
        $r11 = new org.springframework.beans.factory.support.AbstractBeanFactory$2;

        specialinvoke $r11.<org.springframework.beans.factory.support.AbstractBeanFactory$2: void <init>(org.springframework.beans.factory.support.AbstractBeanFactory,java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])>(r0, $r2, $r5, r6);

        $r12 = interfaceinvoke r62.<org.springframework.beans.factory.config.Scope: java.lang.Object get(java.lang.String,org.springframework.beans.factory.ObjectFactory)>($r2, $r11);

        r60 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.Object getObjectForBeanInstance(java.lang.Object,java.lang.String,java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition)>($r12, r1, $r2, $r5);

     label17:
        goto label19;

     label18:
        $r52 := @caughtexception;

        $r53 = new org.springframework.beans.factory.BeanCreationException;

        $r54 = new java.lang.StringBuilder;

        specialinvoke $r54.<java.lang.StringBuilder: void <init>(java.lang.String)>("Scope \'");

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not active for the current thread; ");

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("consider defining a scoped proxy for this bean if you intend to refer to it from a singleton");

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r53.<org.springframework.beans.factory.BeanCreationException: void <init>(java.lang.String,java.lang.String,java.lang.Throwable)>($r2, $r58, $r52);

        throw $r53;

     label19:
        if r13 == null goto label24;

        if r60 == null goto label24;

        $r14 = virtualinvoke r60.<java.lang.Object: java.lang.Class getClass()>();

        $z4 = virtualinvoke r13.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r14);

        if $z4 != 0 goto label24;

     label20:
        $r15 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.TypeConverter getTypeConverter()>();

        $r16 = interfaceinvoke $r15.<org.springframework.beans.TypeConverter: java.lang.Object convertIfNecessary(java.lang.Object,java.lang.Class)>(r60, r13);

     label21:
        return $r16;

     label22:
        $r40 := @caughtexception;

        $r41 = r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.apache.commons.logging.Log logger>;

        $z8 = interfaceinvoke $r41.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z8 == 0 goto label23;

        $r45 = r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.apache.commons.logging.Log logger>;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>(java.lang.String)>("Failed to convert bean \'");

        $r46 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' to required type [");

        $r48 = staticinvoke <org.springframework.util.ClassUtils: java.lang.String getQualifiedName(java.lang.Class)>(r13);

        $r49 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r48);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r45.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>($r51, $r40);

     label23:
        $r42 = new org.springframework.beans.factory.BeanNotOfRequiredTypeException;

        $r43 = virtualinvoke r60.<java.lang.Object: java.lang.Class getClass()>();

        specialinvoke $r42.<org.springframework.beans.factory.BeanNotOfRequiredTypeException: void <init>(java.lang.String,java.lang.Class,java.lang.Class)>(r1, r13, $r43);

        throw $r42;

     label24:
        return r60;

        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.IllegalStateException from label16 to label17 with label18;
        catch org.springframework.beans.TypeMismatchException from label20 to label21 with label22;
    }

    public boolean containsBean(java.lang.String)
    {
        org.springframework.beans.factory.support.AbstractBeanFactory r0;
        org.springframework.beans.factory.BeanFactory $r3;
        java.lang.String r1, $r2, $r4;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.String transformedBeanName(java.lang.String)>(r1);

        $z0 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean containsSingleton(java.lang.String)>($r2);

        if $z0 != 0 goto label1;

        $z3 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean containsBeanDefinition(java.lang.String)>($r2);

        if $z3 == 0 goto label3;

     label1:
        $z1 = staticinvoke <org.springframework.beans.factory.BeanFactoryUtils: boolean isFactoryDereference(java.lang.String)>(r1);

        if $z1 == 0 goto label2;

        $z2 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isFactoryBean(java.lang.String)>(r1);

        if $z2 != 0 goto label2;

        return 0;

     label2:
        return 1;

     label3:
        $r3 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.BeanFactory getParentBeanFactory()>();

        if $r3 == null goto label4;

        $r4 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.String originalBeanName(java.lang.String)>(r1);

        $z4 = interfaceinvoke $r3.<org.springframework.beans.factory.BeanFactory: boolean containsBean(java.lang.String)>($r4);

        if $z4 == 0 goto label4;

        return 1;

     label4:
        return 0;
    }

    public boolean isSingleton(java.lang.String) throws org.springframework.beans.factory.NoSuchBeanDefinitionException
    {
        org.springframework.beans.factory.support.RootBeanDefinition $r5;
        org.springframework.beans.factory.support.AbstractBeanFactory r0;
        org.springframework.beans.factory.FactoryBean r10, $r12;
        java.lang.String r1, $r2, $r8, $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        org.springframework.beans.factory.BeanFactory $r4;
        java.lang.Object $r3, $r9;
        java.lang.StringBuilder $r6, $r7;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.String transformedBeanName(java.lang.String)>(r1);

        $r3 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.Object getSingleton(java.lang.String,boolean)>($r2, 0);

        if $r3 == null goto label05;

        $z8 = $r3 instanceof org.springframework.beans.factory.FactoryBean;

        if $z8 == 0 goto label02;

        $z10 = staticinvoke <org.springframework.beans.factory.BeanFactoryUtils: boolean isFactoryDereference(java.lang.String)>(r1);

        if $z10 != 0 goto label01;

        $r12 = (org.springframework.beans.factory.FactoryBean) $r3;

        $z11 = interfaceinvoke $r12.<org.springframework.beans.factory.FactoryBean: boolean isSingleton()>();

        if $z11 != 0 goto label01;

        return 0;

     label01:
        return 1;

     label02:
        $z9 = staticinvoke <org.springframework.beans.factory.BeanFactoryUtils: boolean isFactoryDereference(java.lang.String)>(r1);

        if $z9 == 0 goto label03;

        $z12 = 0;

        goto label04;

     label03:
        $z12 = 1;

     label04:
        return $z12;

     label05:
        $z0 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean containsSingleton(java.lang.String)>($r2);

        if $z0 == 0 goto label06;

        return 1;

     label06:
        $r4 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.BeanFactory getParentBeanFactory()>();

        if $r4 == null goto label07;

        $z6 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean containsBeanDefinition(java.lang.String)>($r2);

        if $z6 != 0 goto label07;

        $r11 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.String originalBeanName(java.lang.String)>(r1);

        $z7 = interfaceinvoke $r4.<org.springframework.beans.factory.BeanFactory: boolean isSingleton(java.lang.String)>($r11);

        return $z7;

     label07:
        $r5 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.support.RootBeanDefinition getMergedLocalBeanDefinition(java.lang.String)>($r2);

        $z1 = virtualinvoke $r5.<org.springframework.beans.factory.support.RootBeanDefinition: boolean isSingleton()>();

        if $z1 == 0 goto label12;

        $z2 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isFactoryBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition)>($r2, $r5);

        if $z2 == 0 goto label09;

        $z4 = staticinvoke <org.springframework.beans.factory.BeanFactoryUtils: boolean isFactoryDereference(java.lang.String)>(r1);

        if $z4 == 0 goto label08;

        return 1;

     label08:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("&");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.Object getBean(java.lang.String)>($r8);

        r10 = (org.springframework.beans.factory.FactoryBean) $r9;

        $z5 = interfaceinvoke r10.<org.springframework.beans.factory.FactoryBean: boolean isSingleton()>();

        return $z5;

     label09:
        $z3 = staticinvoke <org.springframework.beans.factory.BeanFactoryUtils: boolean isFactoryDereference(java.lang.String)>(r1);

        if $z3 == 0 goto label10;

        $z13 = 0;

        goto label11;

     label10:
        $z13 = 1;

     label11:
        return $z13;

     label12:
        return 0;
    }

    public boolean isPrototype(java.lang.String) throws org.springframework.beans.factory.NoSuchBeanDefinitionException
    {
        org.springframework.beans.factory.support.RootBeanDefinition $r4;
        java.security.AccessControlContext $r13;
        org.springframework.beans.factory.support.AbstractBeanFactory r0;
        org.springframework.beans.factory.FactoryBean r9;
        java.lang.Boolean $r15;
        java.lang.String r1, $r2, $r7, $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        org.springframework.beans.factory.support.AbstractBeanFactory$3 $r12;
        java.lang.SecurityManager $r10;
        org.springframework.beans.factory.BeanFactory $r3;
        org.springframework.beans.factory.SmartFactoryBean $r11;
        java.lang.StringBuilder $r5, $r6;
        java.lang.Object $r8, $r14;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.String transformedBeanName(java.lang.String)>(r1);

        $r3 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.BeanFactory getParentBeanFactory()>();

        if $r3 == null goto label1;

        $z9 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean containsBeanDefinition(java.lang.String)>($r2);

        if $z9 != 0 goto label1;

        $r16 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.String originalBeanName(java.lang.String)>(r1);

        $z10 = interfaceinvoke $r3.<org.springframework.beans.factory.BeanFactory: boolean isPrototype(java.lang.String)>($r16);

        return $z10;

     label1:
        $r4 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.support.RootBeanDefinition getMergedLocalBeanDefinition(java.lang.String)>($r2);

        $z0 = virtualinvoke $r4.<org.springframework.beans.factory.support.RootBeanDefinition: boolean isPrototype()>();

        if $z0 == 0 goto label3;

        $z7 = staticinvoke <org.springframework.beans.factory.BeanFactoryUtils: boolean isFactoryDereference(java.lang.String)>(r1);

        if $z7 == 0 goto label2;

        $z8 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isFactoryBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition)>($r2, $r4);

        if $z8 != 0 goto label2;

        return 0;

     label2:
        return 1;

     label3:
        $z1 = staticinvoke <org.springframework.beans.factory.BeanFactoryUtils: boolean isFactoryDereference(java.lang.String)>(r1);

        if $z1 == 0 goto label4;

        return 0;

     label4:
        $z2 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isFactoryBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition)>($r2, $r4);

        if $z2 == 0 goto label8;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("&");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.Object getBean(java.lang.String)>($r7);

        r9 = (org.springframework.beans.factory.FactoryBean) $r8;

        $r10 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if $r10 == null goto label5;

        $r12 = new org.springframework.beans.factory.support.AbstractBeanFactory$3;

        specialinvoke $r12.<org.springframework.beans.factory.support.AbstractBeanFactory$3: void <init>(org.springframework.beans.factory.support.AbstractBeanFactory,org.springframework.beans.factory.FactoryBean)>(r0, r9);

        $r13 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.security.AccessControlContext getAccessControlContext()>();

        $r14 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>($r12, $r13);

        $r15 = (java.lang.Boolean) $r14;

        $z6 = virtualinvoke $r15.<java.lang.Boolean: boolean booleanValue()>();

        return $z6;

     label5:
        $z3 = r9 instanceof org.springframework.beans.factory.SmartFactoryBean;

        if $z3 == 0 goto label6;

        $r11 = (org.springframework.beans.factory.SmartFactoryBean) r9;

        $z5 = interfaceinvoke $r11.<org.springframework.beans.factory.SmartFactoryBean: boolean isPrototype()>();

        if $z5 != 0 goto label7;

     label6:
        $z4 = interfaceinvoke r9.<org.springframework.beans.factory.FactoryBean: boolean isSingleton()>();

        if $z4 == 0 goto label7;

        return 0;

     label7:
        return 1;

     label8:
        return 0;
    }

    public boolean isTypeMatch(java.lang.String, java.lang.Class) throws org.springframework.beans.factory.NoSuchBeanDefinitionException
    {
        org.springframework.beans.factory.support.AbstractBeanFactory r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18;
        org.springframework.beans.factory.support.RootBeanDefinition $r7, $r13;
        org.springframework.beans.factory.config.BeanDefinitionHolder $r8;
        org.springframework.beans.factory.FactoryBean $r21;
        org.springframework.beans.factory.config.BeanDefinition $r12;
        java.lang.String r1, $r2, $r11, $r14, $r18;
        java.lang.Class[] $r15, $r24;
        org.springframework.beans.factory.BeanFactory $r6;
        java.lang.Class r3, r4, $r9, $r10, $r16, $r17, $r19, $r20, $r22, $r23, $r25;
        java.lang.Object $r5;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Class;

        $r2 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.String transformedBeanName(java.lang.String)>(r1);

        if r3 == null goto label01;

        $r23 = r3;

        goto label02;

     label01:
        $r23 = class "Ljava/lang/Object;";

     label02:
        r4 = $r23;

        $r5 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.Object getSingleton(java.lang.String,boolean)>($r2, 0);

        if $r5 == null goto label07;

        $z13 = $r5 instanceof org.springframework.beans.factory.FactoryBean;

        if $z13 == 0 goto label05;

        $z16 = staticinvoke <org.springframework.beans.factory.BeanFactoryUtils: boolean isFactoryDereference(java.lang.String)>(r1);

        if $z16 != 0 goto label04;

        $r21 = (org.springframework.beans.factory.FactoryBean) $r5;

        $r22 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.Class getTypeForFactoryBean(org.springframework.beans.factory.FactoryBean)>($r21);

        if $r22 == null goto label03;

        $z18 = virtualinvoke $r23.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r22);

        if $z18 == 0 goto label03;

        return 1;

     label03:
        return 0;

     label04:
        $r20 = virtualinvoke $r5.<java.lang.Object: java.lang.Class getClass()>();

        $z17 = virtualinvoke $r23.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r20);

        return $z17;

     label05:
        $z14 = staticinvoke <org.springframework.beans.factory.BeanFactoryUtils: boolean isFactoryDereference(java.lang.String)>(r1);

        if $z14 != 0 goto label06;

        $r19 = virtualinvoke $r5.<java.lang.Object: java.lang.Class getClass()>();

        $z15 = virtualinvoke $r23.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r19);

        if $z15 == 0 goto label06;

        return 1;

     label06:
        return 0;

     label07:
        $z0 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean containsSingleton(java.lang.String)>($r2);

        if $z0 == 0 goto label08;

        $z12 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean containsBeanDefinition(java.lang.String)>($r2);

        if $z12 != 0 goto label08;

        return 0;

     label08:
        $r6 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.BeanFactory getParentBeanFactory()>();

        if $r6 == null goto label09;

        $z10 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean containsBeanDefinition(java.lang.String)>($r2);

        if $z10 != 0 goto label09;

        $r18 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.String originalBeanName(java.lang.String)>(r1);

        $z11 = interfaceinvoke $r6.<org.springframework.beans.factory.BeanFactory: boolean isTypeMatch(java.lang.String,java.lang.Class)>($r18, r3);

        return $z11;

     label09:
        $r7 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.support.RootBeanDefinition getMergedLocalBeanDefinition(java.lang.String)>($r2);

        $r8 = virtualinvoke $r7.<org.springframework.beans.factory.support.RootBeanDefinition: org.springframework.beans.factory.config.BeanDefinitionHolder getDecoratedDefinition()>();

        if $r8 == null goto label10;

        $z7 = staticinvoke <org.springframework.beans.factory.BeanFactoryUtils: boolean isFactoryDereference(java.lang.String)>(r1);

        if $z7 != 0 goto label10;

        $r11 = virtualinvoke $r8.<org.springframework.beans.factory.config.BeanDefinitionHolder: java.lang.String getBeanName()>();

        $r12 = virtualinvoke $r8.<org.springframework.beans.factory.config.BeanDefinitionHolder: org.springframework.beans.factory.config.BeanDefinition getBeanDefinition()>();

        $r13 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.support.RootBeanDefinition getMergedBeanDefinition(java.lang.String,org.springframework.beans.factory.config.BeanDefinition,org.springframework.beans.factory.config.BeanDefinition)>($r11, $r12, $r7);

        $r14 = virtualinvoke $r8.<org.springframework.beans.factory.config.BeanDefinitionHolder: java.lang.String getBeanName()>();

        $r15 = newarray (java.lang.Class)[2];

        $r15[0] = class "Lorg/springframework/beans/factory/FactoryBean;";

        $r15[1] = r4;

        $r16 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.Class predictBeanType(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Class[])>($r14, $r13, $r15);

        if $r16 == null goto label10;

        $r17 = class "Lorg/springframework/beans/factory/FactoryBean;";

        $z8 = virtualinvoke $r17.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r16);

        if $z8 != 0 goto label10;

        $z9 = virtualinvoke r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r16);

        return $z9;

     label10:
        $r24 = newarray (java.lang.Class)[2];

        $r24[0] = class "Lorg/springframework/beans/factory/FactoryBean;";

        $r24[1] = r4;

        $r25 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.Class predictBeanType(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Class[])>($r2, $r7, $r24);

        if $r25 != null goto label11;

        return 0;

     label11:
        $r9 = class "Lorg/springframework/beans/factory/FactoryBean;";

        $z1 = virtualinvoke $r9.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r25);

        if $z1 == 0 goto label14;

        $z4 = staticinvoke <org.springframework.beans.factory.BeanFactoryUtils: boolean isFactoryDereference(java.lang.String)>(r1);

        if $z4 != 0 goto label13;

        $r10 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.Class getTypeForFactoryBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition)>($r2, $r7);

        if $r10 == null goto label12;

        $z6 = virtualinvoke r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r10);

        if $z6 == 0 goto label12;

        return 1;

     label12:
        return 0;

     label13:
        $z5 = virtualinvoke r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r25);

        return $z5;

     label14:
        $z2 = staticinvoke <org.springframework.beans.factory.BeanFactoryUtils: boolean isFactoryDereference(java.lang.String)>(r1);

        if $z2 != 0 goto label15;

        $z3 = virtualinvoke r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r25);

        if $z3 == 0 goto label15;

        return 1;

     label15:
        return 0;
    }

    public java.lang.Class getType(java.lang.String) throws org.springframework.beans.factory.NoSuchBeanDefinitionException
    {
        org.springframework.beans.factory.support.AbstractBeanFactory r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        org.springframework.beans.factory.support.RootBeanDefinition $r5, $r11;
        org.springframework.beans.factory.config.BeanDefinitionHolder $r6;
        org.springframework.beans.factory.FactoryBean $r19;
        org.springframework.beans.factory.config.BeanDefinition $r10;
        java.lang.String r1, $r2, $r9, $r12, $r16;
        java.lang.Class[] $r13, $r21;
        org.springframework.beans.factory.BeanFactory $r4;
        java.lang.Object $r3;
        java.lang.Class $r7, $r8, $r14, $r15, $r17, $r18, $r20, $r22, $r23;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.String transformedBeanName(java.lang.String)>(r1);

        $r3 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.Object getSingleton(java.lang.String,boolean)>($r2, 0);

        if $r3 == null goto label2;

        $z8 = $r3 instanceof org.springframework.beans.factory.FactoryBean;

        if $z8 == 0 goto label1;

        $z9 = staticinvoke <org.springframework.beans.factory.BeanFactoryUtils: boolean isFactoryDereference(java.lang.String)>(r1);

        if $z9 != 0 goto label1;

        $r19 = (org.springframework.beans.factory.FactoryBean) $r3;

        $r20 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.Class getTypeForFactoryBean(org.springframework.beans.factory.FactoryBean)>($r19);

        return $r20;

     label1:
        $r18 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        return $r18;

     label2:
        $z0 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean containsSingleton(java.lang.String)>($r2);

        if $z0 == 0 goto label3;

        $z7 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean containsBeanDefinition(java.lang.String)>($r2);

        if $z7 != 0 goto label3;

        return null;

     label3:
        $r4 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.BeanFactory getParentBeanFactory()>();

        if $r4 == null goto label4;

        $z6 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean containsBeanDefinition(java.lang.String)>($r2);

        if $z6 != 0 goto label4;

        $r16 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.String originalBeanName(java.lang.String)>(r1);

        $r17 = interfaceinvoke $r4.<org.springframework.beans.factory.BeanFactory: java.lang.Class getType(java.lang.String)>($r16);

        return $r17;

     label4:
        $r5 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.support.RootBeanDefinition getMergedLocalBeanDefinition(java.lang.String)>($r2);

        $r6 = virtualinvoke $r5.<org.springframework.beans.factory.support.RootBeanDefinition: org.springframework.beans.factory.config.BeanDefinitionHolder getDecoratedDefinition()>();

        if $r6 == null goto label5;

        $z4 = staticinvoke <org.springframework.beans.factory.BeanFactoryUtils: boolean isFactoryDereference(java.lang.String)>(r1);

        if $z4 != 0 goto label5;

        $r9 = virtualinvoke $r6.<org.springframework.beans.factory.config.BeanDefinitionHolder: java.lang.String getBeanName()>();

        $r10 = virtualinvoke $r6.<org.springframework.beans.factory.config.BeanDefinitionHolder: org.springframework.beans.factory.config.BeanDefinition getBeanDefinition()>();

        $r11 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.support.RootBeanDefinition getMergedBeanDefinition(java.lang.String,org.springframework.beans.factory.config.BeanDefinition,org.springframework.beans.factory.config.BeanDefinition)>($r9, $r10, $r5);

        $r12 = virtualinvoke $r6.<org.springframework.beans.factory.config.BeanDefinitionHolder: java.lang.String getBeanName()>();

        $r13 = newarray (java.lang.Class)[0];

        $r14 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.Class predictBeanType(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Class[])>($r12, $r11, $r13);

        if $r14 == null goto label5;

        $r15 = class "Lorg/springframework/beans/factory/FactoryBean;";

        $z5 = virtualinvoke $r15.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r14);

        if $z5 != 0 goto label5;

        return $r14;

     label5:
        $r21 = newarray (java.lang.Class)[0];

        $r22 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.Class predictBeanType(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Class[])>($r2, $r5, $r21);

        if $r22 == null goto label7;

        $r7 = class "Lorg/springframework/beans/factory/FactoryBean;";

        $z2 = virtualinvoke $r7.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r22);

        if $z2 == 0 goto label7;

        $z3 = staticinvoke <org.springframework.beans.factory.BeanFactoryUtils: boolean isFactoryDereference(java.lang.String)>(r1);

        if $z3 != 0 goto label6;

        $r8 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.Class getTypeForFactoryBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition)>($r2, $r5);

        return $r8;

     label6:
        return $r22;

     label7:
        $z1 = staticinvoke <org.springframework.beans.factory.BeanFactoryUtils: boolean isFactoryDereference(java.lang.String)>(r1);

        if $z1 != 0 goto label8;

        $r23 = $r22;

        goto label9;

     label8:
        $r23 = null;

     label9:
        return $r23;
    }

    public java.lang.String[] getAliases(java.lang.String)
    {
        java.lang.String[] $r4, $r10, $r18;
        java.util.ArrayList $r3;
        org.springframework.beans.factory.support.AbstractBeanFactory r0;
        int $i0, i1;
        java.lang.String r1, $r2, $r6, $r8, r15, r16, $r17;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Collection $r12;
        java.util.List $r11;
        org.springframework.beans.factory.BeanFactory $r9;
        java.lang.StringBuilder $r5, $r7, $r13, $r14;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.String transformedBeanName(java.lang.String)>(r1);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("&");

        r15 = $r2;

        if $z0 == 0 goto label1;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>("&");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $z1 = virtualinvoke r15.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 != 0 goto label2;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r15);

     label2:
        $r4 = specialinvoke r0.<org.springframework.beans.factory.support.FactoryBeanRegistrySupport: java.lang.String[] getAliases(java.lang.String)>($r2);

        $i0 = lengthof $r4;

        i1 = 0;

        goto label7;

     label3:
        r16 = $r4[i1];

        $r5 = new java.lang.StringBuilder;

        if $z0 == 0 goto label4;

        $r17 = "&";

        goto label5;

     label4:
        $r17 = "";

     label5:
        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r17);

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>($r6);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $z2 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z2 != 0 goto label6;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r8);

     label6:
        i1 = i1 + 1;

     label7:
        if i1 < $i0 goto label3;

        $z3 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean containsSingleton(java.lang.String)>($r2);

        if $z3 != 0 goto label8;

        $z4 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean containsBeanDefinition(java.lang.String)>($r2);

        if $z4 != 0 goto label8;

        $r9 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.BeanFactory getParentBeanFactory()>();

        if $r9 == null goto label8;

        $r10 = interfaceinvoke $r9.<org.springframework.beans.factory.BeanFactory: java.lang.String[] getAliases(java.lang.String)>(r15);

        $r11 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r10);

        $r12 = (java.util.Collection) $r11;

        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>($r12);

     label8:
        $r18 = staticinvoke <org.springframework.util.StringUtils: java.lang.String[] toStringArray(java.util.Collection)>($r3);

        return $r18;
    }

    public org.springframework.beans.factory.BeanFactory getParentBeanFactory()
    {
        org.springframework.beans.factory.support.AbstractBeanFactory r0;
        org.springframework.beans.factory.BeanFactory $r1;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        $r1 = r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.BeanFactory parentBeanFactory>;

        return $r1;
    }

    public boolean containsLocalBean(java.lang.String)
    {
        org.springframework.beans.factory.support.AbstractBeanFactory r0;
        java.lang.String r1, $r2;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.String transformedBeanName(java.lang.String)>(r1);

        $z0 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean containsSingleton(java.lang.String)>($r2);

        if $z0 != 0 goto label1;

        $z3 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean containsBeanDefinition(java.lang.String)>($r2);

        if $z3 == 0 goto label3;

     label1:
        $z1 = staticinvoke <org.springframework.beans.factory.BeanFactoryUtils: boolean isFactoryDereference(java.lang.String)>(r1);

        if $z1 == 0 goto label2;

        $z2 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isFactoryBean(java.lang.String)>($r2);

        if $z2 == 0 goto label3;

     label2:
        return 1;

     label3:
        return 0;
    }

    public void setParentBeanFactory(org.springframework.beans.factory.BeanFactory)
    {
        java.lang.IllegalStateException $r4;
        org.springframework.beans.factory.support.AbstractBeanFactory r0;
        org.springframework.beans.factory.BeanFactory $r1, r2, $r3, $r6;
        java.lang.StringBuilder $r5, $r7;
        java.lang.String $r8;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r2 := @parameter0: org.springframework.beans.factory.BeanFactory;

        $r1 = r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.BeanFactory parentBeanFactory>;

        if $r1 == null goto label1;

        $r3 = r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.BeanFactory parentBeanFactory>;

        if $r3 == r2 goto label1;

        $r4 = new java.lang.IllegalStateException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Already associated with parent BeanFactory: ");

        $r6 = r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.BeanFactory parentBeanFactory>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label1:
        r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.BeanFactory parentBeanFactory> = r2;

        return;
    }

    public void setBeanClassLoader(java.lang.ClassLoader)
    {
        java.lang.ClassLoader r1, $r2;
        org.springframework.beans.factory.support.AbstractBeanFactory r0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r1 := @parameter0: java.lang.ClassLoader;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r2 = staticinvoke <org.springframework.util.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>();

     label2:
        r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.ClassLoader beanClassLoader> = $r2;

        return;
    }

    public java.lang.ClassLoader getBeanClassLoader()
    {
        java.lang.ClassLoader $r1;
        org.springframework.beans.factory.support.AbstractBeanFactory r0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        $r1 = r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.ClassLoader beanClassLoader>;

        return $r1;
    }

    public void setTempClassLoader(java.lang.ClassLoader)
    {
        java.lang.ClassLoader r1;
        org.springframework.beans.factory.support.AbstractBeanFactory r0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r1 := @parameter0: java.lang.ClassLoader;

        r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.ClassLoader tempClassLoader> = r1;

        return;
    }

    public java.lang.ClassLoader getTempClassLoader()
    {
        java.lang.ClassLoader $r1;
        org.springframework.beans.factory.support.AbstractBeanFactory r0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        $r1 = r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.ClassLoader tempClassLoader>;

        return $r1;
    }

    public void setCacheBeanMetadata(boolean)
    {
        org.springframework.beans.factory.support.AbstractBeanFactory r0;
        boolean z0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        z0 := @parameter0: boolean;

        r0.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean cacheBeanMetadata> = z0;

        return;
    }

    public boolean isCacheBeanMetadata()
    {
        org.springframework.beans.factory.support.AbstractBeanFactory r0;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        $z0 = r0.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean cacheBeanMetadata>;

        return $z0;
    }

    public void setBeanExpressionResolver(org.springframework.beans.factory.config.BeanExpressionResolver)
    {
        org.springframework.beans.factory.support.AbstractBeanFactory r0;
        org.springframework.beans.factory.config.BeanExpressionResolver r1;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r1 := @parameter0: org.springframework.beans.factory.config.BeanExpressionResolver;

        r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.config.BeanExpressionResolver beanExpressionResolver> = r1;

        return;
    }

    public org.springframework.beans.factory.config.BeanExpressionResolver getBeanExpressionResolver()
    {
        org.springframework.beans.factory.support.AbstractBeanFactory r0;
        org.springframework.beans.factory.config.BeanExpressionResolver $r1;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        $r1 = r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.config.BeanExpressionResolver beanExpressionResolver>;

        return $r1;
    }

    public void setConversionService(org.springframework.core.convert.ConversionService)
    {
        org.springframework.beans.factory.support.AbstractBeanFactory r0;
        org.springframework.core.convert.ConversionService r1;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r1 := @parameter0: org.springframework.core.convert.ConversionService;

        r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.core.convert.ConversionService conversionService> = r1;

        return;
    }

    public org.springframework.core.convert.ConversionService getConversionService()
    {
        org.springframework.beans.factory.support.AbstractBeanFactory r0;
        org.springframework.core.convert.ConversionService $r1;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        $r1 = r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.core.convert.ConversionService conversionService>;

        return $r1;
    }

    public void addPropertyEditorRegistrar(org.springframework.beans.PropertyEditorRegistrar)
    {
        java.util.Set $r2;
        org.springframework.beans.PropertyEditorRegistrar r0;
        org.springframework.beans.factory.support.AbstractBeanFactory r1;

        r1 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r0 := @parameter0: org.springframework.beans.PropertyEditorRegistrar;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "PropertyEditorRegistrar must not be null");

        $r2 = r1.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.Set propertyEditorRegistrars>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r0);

        return;
    }

    public java.util.Set getPropertyEditorRegistrars()
    {
        java.util.Set $r1;
        org.springframework.beans.factory.support.AbstractBeanFactory r0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        $r1 = r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.Set propertyEditorRegistrars>;

        return $r1;
    }

    public void registerCustomEditor(java.lang.Class, java.lang.Class)
    {
        org.springframework.beans.factory.support.AbstractBeanFactory r2;
        java.util.Map $r3;
        java.lang.Class r0, r1;

        r2 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Required type must not be null");

        staticinvoke <org.springframework.util.Assert: void isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/beans/PropertyEditor;", r1);

        $r3 = r2.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.Map customEditors>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1);

        return;
    }

    public void copyRegisteredEditorsTo(org.springframework.beans.PropertyEditorRegistry)
    {
        org.springframework.beans.PropertyEditorRegistry r1;
        org.springframework.beans.factory.support.AbstractBeanFactory r0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r1 := @parameter0: org.springframework.beans.PropertyEditorRegistry;

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: void registerCustomEditors(org.springframework.beans.PropertyEditorRegistry)>(r1);

        return;
    }

    public java.util.Map getCustomEditors()
    {
        org.springframework.beans.factory.support.AbstractBeanFactory r0;
        java.util.Map $r1;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        $r1 = r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.Map customEditors>;

        return $r1;
    }

    public void setTypeConverter(org.springframework.beans.TypeConverter)
    {
        org.springframework.beans.TypeConverter r1;
        org.springframework.beans.factory.support.AbstractBeanFactory r0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r1 := @parameter0: org.springframework.beans.TypeConverter;

        r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.TypeConverter typeConverter> = r1;

        return;
    }

    protected org.springframework.beans.TypeConverter getCustomTypeConverter()
    {
        org.springframework.beans.TypeConverter $r1;
        org.springframework.beans.factory.support.AbstractBeanFactory r0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        $r1 = r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.TypeConverter typeConverter>;

        return $r1;
    }

    public org.springframework.beans.TypeConverter getTypeConverter()
    {
        org.springframework.beans.factory.support.AbstractBeanFactory r0;
        org.springframework.beans.TypeConverter $r1;
        org.springframework.core.convert.ConversionService $r3;
        org.springframework.beans.SimpleTypeConverter $r2;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        $r1 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.TypeConverter getCustomTypeConverter()>();

        if $r1 == null goto label1;

        return $r1;

     label1:
        $r2 = new org.springframework.beans.SimpleTypeConverter;

        specialinvoke $r2.<org.springframework.beans.SimpleTypeConverter: void <init>()>();

        $r3 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.core.convert.ConversionService getConversionService()>();

        virtualinvoke $r2.<org.springframework.beans.SimpleTypeConverter: void setConversionService(org.springframework.core.convert.ConversionService)>($r3);

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: void registerCustomEditors(org.springframework.beans.PropertyEditorRegistry)>($r2);

        return $r2;
    }

    public void addEmbeddedValueResolver(org.springframework.util.StringValueResolver)
    {
        org.springframework.util.StringValueResolver r0;
        java.util.List $r2;
        org.springframework.beans.factory.support.AbstractBeanFactory r1;

        r1 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r0 := @parameter0: org.springframework.util.StringValueResolver;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "StringValueResolver must not be null");

        $r2 = r1.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.List embeddedValueResolvers>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r0);

        return;
    }

    public java.lang.String resolveEmbeddedValue(java.lang.String)
    {
        org.springframework.util.StringValueResolver r5;
        java.util.Iterator $r3;
        java.util.List $r2;
        org.springframework.beans.factory.support.AbstractBeanFactory r1;
        java.lang.Object $r4;
        java.lang.String r0, r6;
        boolean $z0;

        r1 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r0 := @parameter0: java.lang.String;

        r6 = r0;

        $r2 = r1.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.List embeddedValueResolvers>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.springframework.util.StringValueResolver) $r4;

        r6 = interfaceinvoke r5.<org.springframework.util.StringValueResolver: java.lang.String resolveStringValue(java.lang.String)>(r6);

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return r6;
    }

    public void addBeanPostProcessor(org.springframework.beans.factory.config.BeanPostProcessor)
    {
        org.springframework.beans.factory.config.BeanPostProcessor r0;
        java.util.List $r2, $r3;
        org.springframework.beans.factory.support.AbstractBeanFactory r1;
        boolean $z0, $z1;

        r1 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r0 := @parameter0: org.springframework.beans.factory.config.BeanPostProcessor;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "BeanPostProcessor must not be null");

        $r2 = r1.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.List beanPostProcessors>;

        interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r0);

        $r3 = r1.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.List beanPostProcessors>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r0);

        $z0 = r0 instanceof org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor;

        if $z0 == 0 goto label1;

        r1.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean hasInstantiationAwareBeanPostProcessors> = 1;

     label1:
        $z1 = r0 instanceof org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor;

        if $z1 == 0 goto label2;

        r1.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean hasDestructionAwareBeanPostProcessors> = 1;

     label2:
        return;
    }

    public int getBeanPostProcessorCount()
    {
        int $i0;
        java.util.List $r1;
        org.springframework.beans.factory.support.AbstractBeanFactory r0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        $r1 = r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.List beanPostProcessors>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public java.util.List getBeanPostProcessors()
    {
        java.util.List $r1;
        org.springframework.beans.factory.support.AbstractBeanFactory r0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        $r1 = r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.List beanPostProcessors>;

        return $r1;
    }

    protected boolean hasInstantiationAwareBeanPostProcessors()
    {
        org.springframework.beans.factory.support.AbstractBeanFactory r0;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        $z0 = r0.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean hasInstantiationAwareBeanPostProcessors>;

        return $z0;
    }

    protected boolean hasDestructionAwareBeanPostProcessors()
    {
        org.springframework.beans.factory.support.AbstractBeanFactory r0;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        $z0 = r0.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean hasDestructionAwareBeanPostProcessors>;

        return $z0;
    }

    public void registerScope(java.lang.String, org.springframework.beans.factory.config.Scope)
    {
        org.springframework.beans.factory.config.Scope r1;
        java.lang.IllegalArgumentException $r3;
        org.springframework.beans.factory.support.AbstractBeanFactory r5;
        java.util.Map $r6;
        java.lang.String r0, $r2, $r4;
        boolean $z0, $z1;

        r5 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.springframework.beans.factory.config.Scope;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Scope identifier must not be null");

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "Scope must not be null");

        $r2 = "singleton";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 != 0 goto label1;

        $r4 = "prototype";

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot replace existing scopes \'singleton\' and \'prototype\'");

        throw $r3;

     label2:
        $r6 = r5.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.Map scopes>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1);

        return;
    }

    public java.lang.String[] getRegisteredScopeNames()
    {
        org.springframework.beans.factory.support.AbstractBeanFactory r0;
        java.util.Map $r1;
        java.util.Collection $r3;
        java.util.Set $r2;
        java.lang.String[] $r4;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        $r1 = r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.Map scopes>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = (java.util.Collection) $r2;

        $r4 = staticinvoke <org.springframework.util.StringUtils: java.lang.String[] toStringArray(java.util.Collection)>($r3);

        return $r4;
    }

    public org.springframework.beans.factory.config.Scope getRegisteredScope(java.lang.String)
    {
        org.springframework.beans.factory.support.AbstractBeanFactory r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        org.springframework.beans.factory.config.Scope $r4;
        java.lang.String r0;

        r1 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Scope identifier must not be null");

        $r2 = r1.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.Map scopes>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r4 = (org.springframework.beans.factory.config.Scope) $r3;

        return $r4;
    }

    public void setSecurityContextProvider(org.springframework.beans.factory.support.SecurityContextProvider)
    {
        org.springframework.beans.factory.support.SecurityContextProvider r1;
        org.springframework.beans.factory.support.AbstractBeanFactory r0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r1 := @parameter0: org.springframework.beans.factory.support.SecurityContextProvider;

        r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.support.SecurityContextProvider securityContextProvider> = r1;

        return;
    }

    public java.security.AccessControlContext getAccessControlContext()
    {
        java.security.AccessControlContext $r3;
        org.springframework.beans.factory.support.SecurityContextProvider $r1, $r2;
        org.springframework.beans.factory.support.AbstractBeanFactory r0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        $r1 = r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.support.SecurityContextProvider securityContextProvider>;

        if $r1 == null goto label1;

        $r2 = r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.support.SecurityContextProvider securityContextProvider>;

        $r3 = interfaceinvoke $r2.<org.springframework.beans.factory.support.SecurityContextProvider: java.security.AccessControlContext getAccessControlContext()>();

        goto label2;

     label1:
        $r3 = staticinvoke <java.security.AccessController: java.security.AccessControlContext getContext()>();

     label2:
        return $r3;
    }

    public void copyConfigurationFrom(org.springframework.beans.factory.config.ConfigurableBeanFactory)
    {
        org.springframework.beans.factory.support.AbstractBeanFactory r1, r5;
        java.util.Map $r6, $r7, $r12, $r13;
        org.springframework.beans.TypeConverter $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.util.Set $r8, $r9;
        java.util.List $r10, $r11;
        org.springframework.beans.factory.support.SecurityContextProvider $r14;
        java.lang.ClassLoader $r2;
        org.springframework.beans.factory.config.ConfigurableBeanFactory r0;
        org.springframework.beans.factory.config.BeanExpressionResolver $r3;

        r1 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r0 := @parameter0: org.springframework.beans.factory.config.ConfigurableBeanFactory;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "BeanFactory must not be null");

        $r2 = interfaceinvoke r0.<org.springframework.beans.factory.config.ConfigurableBeanFactory: java.lang.ClassLoader getBeanClassLoader()>();

        virtualinvoke r1.<org.springframework.beans.factory.support.AbstractBeanFactory: void setBeanClassLoader(java.lang.ClassLoader)>($r2);

        $z0 = interfaceinvoke r0.<org.springframework.beans.factory.config.ConfigurableBeanFactory: boolean isCacheBeanMetadata()>();

        virtualinvoke r1.<org.springframework.beans.factory.support.AbstractBeanFactory: void setCacheBeanMetadata(boolean)>($z0);

        $r3 = interfaceinvoke r0.<org.springframework.beans.factory.config.ConfigurableBeanFactory: org.springframework.beans.factory.config.BeanExpressionResolver getBeanExpressionResolver()>();

        virtualinvoke r1.<org.springframework.beans.factory.support.AbstractBeanFactory: void setBeanExpressionResolver(org.springframework.beans.factory.config.BeanExpressionResolver)>($r3);

        $z1 = r0 instanceof org.springframework.beans.factory.support.AbstractBeanFactory;

        if $z1 == 0 goto label5;

        r5 = (org.springframework.beans.factory.support.AbstractBeanFactory) r0;

        $r7 = r1.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.Map customEditors>;

        $r6 = r5.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.Map customEditors>;

        interfaceinvoke $r7.<java.util.Map: void putAll(java.util.Map)>($r6);

        $r9 = r1.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.Set propertyEditorRegistrars>;

        $r8 = r5.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.Set propertyEditorRegistrars>;

        interfaceinvoke $r9.<java.util.Set: boolean addAll(java.util.Collection)>($r8);

        $r11 = r1.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.List beanPostProcessors>;

        $r10 = r5.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.List beanPostProcessors>;

        interfaceinvoke $r11.<java.util.List: boolean addAll(java.util.Collection)>($r10);

        $z2 = r1.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean hasInstantiationAwareBeanPostProcessors>;

        if $z2 != 0 goto label1;

        $z4 = r5.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean hasInstantiationAwareBeanPostProcessors>;

        if $z4 != 0 goto label1;

        $z5 = 0;

        goto label2;

     label1:
        $z5 = 1;

     label2:
        r1.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean hasInstantiationAwareBeanPostProcessors> = $z5;

        $z6 = r1.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean hasDestructionAwareBeanPostProcessors>;

        if $z6 != 0 goto label3;

        $z3 = r5.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean hasDestructionAwareBeanPostProcessors>;

        if $z3 != 0 goto label3;

        $z7 = 0;

        goto label4;

     label3:
        $z7 = 1;

     label4:
        r1.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean hasDestructionAwareBeanPostProcessors> = $z7;

        $r12 = r1.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.Map scopes>;

        $r13 = r5.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.Map scopes>;

        interfaceinvoke $r12.<java.util.Map: void putAll(java.util.Map)>($r13);

        $r14 = r5.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.support.SecurityContextProvider securityContextProvider>;

        r1.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.support.SecurityContextProvider securityContextProvider> = $r14;

        goto label6;

     label5:
        $r4 = interfaceinvoke r0.<org.springframework.beans.factory.config.ConfigurableBeanFactory: org.springframework.beans.TypeConverter getTypeConverter()>();

        virtualinvoke r1.<org.springframework.beans.factory.support.AbstractBeanFactory: void setTypeConverter(org.springframework.beans.TypeConverter)>($r4);

     label6:
        return;
    }

    public org.springframework.beans.factory.config.BeanDefinition getMergedBeanDefinition(java.lang.String) throws org.springframework.beans.BeansException
    {
        org.springframework.beans.factory.support.RootBeanDefinition $r3;
        org.springframework.beans.factory.support.AbstractBeanFactory r0;
        org.springframework.beans.factory.BeanFactory $r4, $r5;
        org.springframework.beans.factory.config.BeanDefinition $r7;
        java.lang.String r1, $r2;
        org.springframework.beans.factory.config.ConfigurableBeanFactory $r6;
        boolean $z0, $z1;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.String transformedBeanName(java.lang.String)>(r1);

        $z0 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean containsBeanDefinition(java.lang.String)>($r2);

        if $z0 != 0 goto label1;

        $r4 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.BeanFactory getParentBeanFactory()>();

        $z1 = $r4 instanceof org.springframework.beans.factory.config.ConfigurableBeanFactory;

        if $z1 == 0 goto label1;

        $r5 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.BeanFactory getParentBeanFactory()>();

        $r6 = (org.springframework.beans.factory.config.ConfigurableBeanFactory) $r5;

        $r7 = interfaceinvoke $r6.<org.springframework.beans.factory.config.ConfigurableBeanFactory: org.springframework.beans.factory.config.BeanDefinition getMergedBeanDefinition(java.lang.String)>($r2);

        return $r7;

     label1:
        $r3 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.support.RootBeanDefinition getMergedLocalBeanDefinition(java.lang.String)>($r2);

        return $r3;
    }

    public boolean isFactoryBean(java.lang.String) throws org.springframework.beans.factory.NoSuchBeanDefinitionException
    {
        org.springframework.beans.factory.support.RootBeanDefinition $r4;
        org.springframework.beans.factory.support.AbstractBeanFactory r0;
        org.springframework.beans.factory.BeanFactory $r5, $r6;
        java.lang.Object $r3;
        java.lang.String r1, $r2;
        org.springframework.beans.factory.config.ConfigurableBeanFactory $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.String transformedBeanName(java.lang.String)>(r1);

        $r3 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.Object getSingleton(java.lang.String,boolean)>($r2, 0);

        if $r3 == null goto label1;

        $z5 = $r3 instanceof org.springframework.beans.factory.FactoryBean;

        return $z5;

     label1:
        $z0 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean containsSingleton(java.lang.String)>($r2);

        if $z0 == 0 goto label2;

        return 0;

     label2:
        $z1 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean containsBeanDefinition(java.lang.String)>($r2);

        if $z1 != 0 goto label3;

        $r5 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.BeanFactory getParentBeanFactory()>();

        $z3 = $r5 instanceof org.springframework.beans.factory.config.ConfigurableBeanFactory;

        if $z3 == 0 goto label3;

        $r6 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.BeanFactory getParentBeanFactory()>();

        $r7 = (org.springframework.beans.factory.config.ConfigurableBeanFactory) $r6;

        $z4 = interfaceinvoke $r7.<org.springframework.beans.factory.config.ConfigurableBeanFactory: boolean isFactoryBean(java.lang.String)>(r1);

        return $z4;

     label3:
        $r4 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.support.RootBeanDefinition getMergedLocalBeanDefinition(java.lang.String)>($r2);

        $z2 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isFactoryBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition)>($r2, $r4);

        return $z2;
    }

    protected void beforePrototypeCreation(java.lang.String)
    {
        java.lang.ThreadLocal $r1, $r6, $r7;
        java.util.Set r8;
        java.util.HashSet $r4;
        org.springframework.beans.factory.support.AbstractBeanFactory r0;
        java.lang.Object $r2;
        java.lang.String r3, $r5;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.ThreadLocal prototypesCurrentlyInCreation>;

        $r2 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>();

        if $r2 != null goto label1;

        $r7 = r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.ThreadLocal prototypesCurrentlyInCreation>;

        virtualinvoke $r7.<java.lang.ThreadLocal: void set(java.lang.Object)>(r3);

        goto label3;

     label1:
        $z0 = $r2 instanceof java.lang.String;

        if $z0 == 0 goto label2;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>(int)>(2);

        $r5 = (java.lang.String) $r2;

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r5);

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>(r3);

        $r6 = r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.ThreadLocal prototypesCurrentlyInCreation>;

        virtualinvoke $r6.<java.lang.ThreadLocal: void set(java.lang.Object)>($r4);

        goto label3;

     label2:
        r8 = (java.util.Set) $r2;

        interfaceinvoke r8.<java.util.Set: boolean add(java.lang.Object)>(r3);

     label3:
        return;
    }

    protected void afterPrototypeCreation(java.lang.String)
    {
        java.lang.ThreadLocal $r1, $r5, $r6;
        java.util.Set r3;
        org.springframework.beans.factory.support.AbstractBeanFactory r0;
        java.lang.Object $r2;
        java.lang.String r4;
        boolean $z0, $z1, $z2;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r4 := @parameter0: java.lang.String;

        $r1 = r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.ThreadLocal prototypesCurrentlyInCreation>;

        $r2 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>();

        $z0 = $r2 instanceof java.lang.String;

        if $z0 == 0 goto label1;

        $r6 = r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.ThreadLocal prototypesCurrentlyInCreation>;

        virtualinvoke $r6.<java.lang.ThreadLocal: void remove()>();

        goto label2;

     label1:
        $z1 = $r2 instanceof java.util.Set;

        if $z1 == 0 goto label2;

        r3 = (java.util.Set) $r2;

        interfaceinvoke r3.<java.util.Set: boolean remove(java.lang.Object)>(r4);

        $z2 = interfaceinvoke r3.<java.util.Set: boolean isEmpty()>();

        if $z2 == 0 goto label2;

        $r5 = r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.ThreadLocal prototypesCurrentlyInCreation>;

        virtualinvoke $r5.<java.lang.ThreadLocal: void remove()>();

     label2:
        return;
    }

    protected final boolean isPrototypeCurrentlyInCreation(java.lang.String)
    {
        java.lang.ThreadLocal $r1;
        java.util.Set $r4;
        org.springframework.beans.factory.support.AbstractBeanFactory r0;
        java.lang.Object $r2;
        java.lang.String r3;
        boolean $z0, $z1, $z2;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.ThreadLocal prototypesCurrentlyInCreation>;

        $r2 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>();

        if $r2 == null goto label2;

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3);

        if $z0 != 0 goto label1;

        $z1 = $r2 instanceof java.util.Set;

        if $z1 == 0 goto label2;

        $r4 = (java.util.Set) $r2;

        $z2 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>(r3);

        if $z2 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public boolean isCurrentlyInCreation(java.lang.String)
    {
        org.springframework.beans.factory.support.AbstractBeanFactory r1;
        java.lang.String r0;
        boolean $z0, $z1;

        r1 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Bean name must not be null");

        $z0 = virtualinvoke r1.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isSingletonCurrentlyInCreation(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r1.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isPrototypeCurrentlyInCreation(java.lang.String)>(r0);

        if $z1 != 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    public void destroyBean(java.lang.String, java.lang.Object)
    {
        org.springframework.beans.factory.support.RootBeanDefinition $r3;
        org.springframework.beans.factory.support.AbstractBeanFactory r0;
        java.lang.Object r2;
        java.lang.String r1;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.support.RootBeanDefinition getMergedLocalBeanDefinition(java.lang.String)>(r1);

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: void destroyBean(java.lang.String,java.lang.Object,org.springframework.beans.factory.support.RootBeanDefinition)>(r1, r2, $r3);

        return;
    }

    protected void destroyBean(java.lang.String, java.lang.Object, org.springframework.beans.factory.support.RootBeanDefinition)
    {
        org.springframework.beans.factory.support.RootBeanDefinition r3;
        java.security.AccessControlContext $r6;
        java.util.List $r5;
        org.springframework.beans.factory.support.AbstractBeanFactory r4;
        java.lang.Object r1;
        java.lang.String r2;
        org.springframework.beans.factory.support.DisposableBeanAdapter $r0;

        r4 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object;

        r3 := @parameter2: org.springframework.beans.factory.support.RootBeanDefinition;

        $r0 = new org.springframework.beans.factory.support.DisposableBeanAdapter;

        $r5 = virtualinvoke r4.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.List getBeanPostProcessors()>();

        $r6 = virtualinvoke r4.<org.springframework.beans.factory.support.AbstractBeanFactory: java.security.AccessControlContext getAccessControlContext()>();

        specialinvoke $r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: void <init>(java.lang.Object,java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.util.List,java.security.AccessControlContext)>(r1, r2, r3, $r5, $r6);

        virtualinvoke $r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: void destroy()>();

        return;
    }

    public void destroyScopedBean(java.lang.String)
    {
        org.springframework.beans.factory.support.RootBeanDefinition $r2;
        java.lang.IllegalStateException $r13;
        org.springframework.beans.factory.config.Scope r11;
        org.springframework.beans.factory.support.AbstractBeanFactory r0;
        java.util.Map $r9;
        java.lang.String r1, $r7, $r8, $r17;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r14, $r15, $r16;
        java.lang.Object $r10, $r12;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.support.RootBeanDefinition getMergedLocalBeanDefinition(java.lang.String)>(r1);

        $z0 = virtualinvoke $r2.<org.springframework.beans.factory.support.RootBeanDefinition: boolean isSingleton()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke $r2.<org.springframework.beans.factory.support.RootBeanDefinition: boolean isPrototype()>();

        if $z1 == 0 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Bean name \'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not correspond to an object in a mutable scope");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label2:
        $r8 = virtualinvoke $r2.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String getScope()>();

        $r9 = r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.Map scopes>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);

        r11 = (org.springframework.beans.factory.config.Scope) $r10;

        if r11 != null goto label3;

        $r13 = new java.lang.IllegalStateException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("No Scope SPI registered for scope \'");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r17);

        throw $r13;

     label3:
        $r12 = interfaceinvoke r11.<org.springframework.beans.factory.config.Scope: java.lang.Object remove(java.lang.String)>(r1);

        if $r12 == null goto label4;

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: void destroyBean(java.lang.String,java.lang.Object,org.springframework.beans.factory.support.RootBeanDefinition)>(r1, $r12, $r2);

     label4:
        return;
    }

    protected java.lang.String transformedBeanName(java.lang.String)
    {
        org.springframework.beans.factory.support.AbstractBeanFactory r0;
        java.lang.String r1, $r2, $r3;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.springframework.beans.factory.BeanFactoryUtils: java.lang.String transformedBeanName(java.lang.String)>(r1);

        $r3 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.String canonicalName(java.lang.String)>($r2);

        return $r3;
    }

    protected java.lang.String originalBeanName(java.lang.String)
    {
        org.springframework.beans.factory.support.AbstractBeanFactory r0;
        java.lang.StringBuilder $r3, $r4;
        java.lang.String r1, $r2, r5;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.String transformedBeanName(java.lang.String)>(r1);

        r5 = $r2;

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("&");

        if $z0 == 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("&");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        return r5;
    }

    protected void initBeanWrapper(org.springframework.beans.BeanWrapper)
    {
        org.springframework.beans.BeanWrapper r0;
        org.springframework.beans.factory.support.AbstractBeanFactory r1;
        org.springframework.core.convert.ConversionService $r2;

        r1 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r0 := @parameter0: org.springframework.beans.BeanWrapper;

        $r2 = virtualinvoke r1.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.core.convert.ConversionService getConversionService()>();

        interfaceinvoke r0.<org.springframework.beans.BeanWrapper: void setConversionService(org.springframework.core.convert.ConversionService)>($r2);

        virtualinvoke r1.<org.springframework.beans.factory.support.AbstractBeanFactory: void registerCustomEditors(org.springframework.beans.PropertyEditorRegistry)>(r0);

        return;
    }

    protected void registerCustomEditors(org.springframework.beans.PropertyEditorRegistry)
    {
        org.springframework.beans.PropertyEditorRegistrySupport $r32;
        org.springframework.beans.PropertyEditorRegistry r0;
        org.springframework.beans.factory.support.AbstractBeanFactory r1;
        java.util.Map $r3, $r4;
        org.springframework.beans.PropertyEditorRegistrar r33;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.util.Set $r2, $r5, $r12;
        java.lang.StringBuilder $r20, $r24, $r25, $r27, $r28, $r30;
        java.lang.Throwable $r16;
        org.springframework.beans.factory.BeanCreationException $r15, r17;
        java.lang.String $r18, $r23, $r26, $r29, $r31;
        java.beans.PropertyEditor $r11;
        java.util.Map$Entry r34;
        java.util.Iterator $r6, $r13;
        java.lang.Object $r7, $r8, $r9, $r10, $r14;
        org.apache.commons.logging.Log $r19, $r21;
        java.lang.Class $r22, r35, r36;

        r1 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r0 := @parameter0: org.springframework.beans.PropertyEditorRegistry;

        $z0 = r0 instanceof org.springframework.beans.PropertyEditorRegistrySupport;

        if $z0 == 0 goto label01;

        $r32 = (org.springframework.beans.PropertyEditorRegistrySupport) r0;

        goto label02;

     label01:
        $r32 = null;

     label02:
        if $r32 == null goto label03;

        virtualinvoke $r32.<org.springframework.beans.PropertyEditorRegistrySupport: void useConfigValueEditors()>();

     label03:
        $r2 = r1.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.Set propertyEditorRegistrars>;

        $z1 = interfaceinvoke $r2.<java.util.Set: boolean isEmpty()>();

        if $z1 != 0 goto label11;

        $r12 = r1.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.Set propertyEditorRegistrars>;

        $r13 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();

        goto label10;

     label04:
        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r33 = (org.springframework.beans.PropertyEditorRegistrar) $r14;

     label05:
        interfaceinvoke r33.<org.springframework.beans.PropertyEditorRegistrar: void registerCustomEditors(org.springframework.beans.PropertyEditorRegistry)>(r0);

     label06:
        goto label10;

     label07:
        $r15 := @caughtexception;

        $r16 = virtualinvoke $r15.<org.springframework.beans.factory.BeanCreationException: java.lang.Throwable getMostSpecificCause()>();

        $z4 = $r16 instanceof org.springframework.beans.factory.BeanCurrentlyInCreationException;

        if $z4 == 0 goto label09;

        r17 = (org.springframework.beans.factory.BeanCreationException) $r16;

        $r18 = virtualinvoke r17.<org.springframework.beans.factory.BeanCreationException: java.lang.String getBeanName()>();

        $z5 = virtualinvoke r1.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isCurrentlyInCreation(java.lang.String)>($r18);

        if $z5 == 0 goto label09;

        $r19 = r1.<org.springframework.beans.factory.support.AbstractBeanFactory: org.apache.commons.logging.Log logger>;

        $z6 = interfaceinvoke $r19.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z6 == 0 goto label08;

        $r21 = r1.<org.springframework.beans.factory.support.AbstractBeanFactory: org.apache.commons.logging.Log logger>;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>(java.lang.String)>("PropertyEditorRegistrar [");

        $r22 = virtualinvoke r33.<java.lang.Object: java.lang.Class getClass()>();

        $r23 = virtualinvoke $r22.<java.lang.Class: java.lang.String getName()>();

        $r24 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] failed because it tried to obtain currently created bean \'");

        $r26 = virtualinvoke $r15.<org.springframework.beans.factory.BeanCreationException: java.lang.String getBeanName()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': ");

        $r29 = virtualinvoke $r15.<org.springframework.beans.factory.BeanCreationException: java.lang.String getMessage()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r21.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r31);

     label08:
        virtualinvoke r1.<org.springframework.beans.factory.support.AbstractBeanFactory: void onSuppressedException(java.lang.Exception)>($r15);

        goto label10;

     label09:
        throw $r15;

     label10:
        $z7 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z7 != 0 goto label04;

     label11:
        $r3 = r1.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.Map customEditors>;

        $z2 = interfaceinvoke $r3.<java.util.Map: boolean isEmpty()>();

        if $z2 != 0 goto label14;

        $r4 = r1.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.Map customEditors>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set entrySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

        goto label13;

     label12:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r34 = (java.util.Map$Entry) $r7;

        $r8 = interfaceinvoke r34.<java.util.Map$Entry: java.lang.Object getKey()>();

        r35 = (java.lang.Class) $r8;

        $r9 = interfaceinvoke r34.<java.util.Map$Entry: java.lang.Object getValue()>();

        r36 = (java.lang.Class) $r9;

        $r10 = staticinvoke <org.springframework.beans.BeanUtils: java.lang.Object instantiateClass(java.lang.Class)>(r36);

        $r11 = (java.beans.PropertyEditor) $r10;

        interfaceinvoke r0.<org.springframework.beans.PropertyEditorRegistry: void registerCustomEditor(java.lang.Class,java.beans.PropertyEditor)>(r35, $r11);

     label13:
        $z3 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label12;

     label14:
        return;

        catch org.springframework.beans.factory.BeanCreationException from label05 to label06 with label07;
    }

    protected org.springframework.beans.factory.support.RootBeanDefinition getMergedLocalBeanDefinition(java.lang.String) throws org.springframework.beans.BeansException
    {
        org.springframework.beans.factory.support.RootBeanDefinition r4, $r6;
        org.springframework.beans.factory.support.AbstractBeanFactory r0;
        java.util.Map $r2;
        org.springframework.beans.factory.config.BeanDefinition $r5;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.Map mergedBeanDefinitions>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.springframework.beans.factory.support.RootBeanDefinition) $r3;

        if r4 == null goto label1;

        return r4;

     label1:
        $r5 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.config.BeanDefinition getBeanDefinition(java.lang.String)>(r1);

        $r6 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.support.RootBeanDefinition getMergedBeanDefinition(java.lang.String,org.springframework.beans.factory.config.BeanDefinition)>(r1, $r5);

        return $r6;
    }

    protected org.springframework.beans.factory.support.RootBeanDefinition getMergedBeanDefinition(java.lang.String, org.springframework.beans.factory.config.BeanDefinition) throws org.springframework.beans.factory.BeanDefinitionStoreException
    {
        org.springframework.beans.factory.support.RootBeanDefinition $r3;
        org.springframework.beans.factory.support.AbstractBeanFactory r0;
        org.springframework.beans.factory.config.BeanDefinition r2;
        java.lang.String r1;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.springframework.beans.factory.config.BeanDefinition;

        $r3 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.support.RootBeanDefinition getMergedBeanDefinition(java.lang.String,org.springframework.beans.factory.config.BeanDefinition,org.springframework.beans.factory.config.BeanDefinition)>(r1, r2, null);

        return $r3;
    }

    protected org.springframework.beans.factory.support.RootBeanDefinition getMergedBeanDefinition(java.lang.String, org.springframework.beans.factory.config.BeanDefinition, org.springframework.beans.factory.config.BeanDefinition) throws org.springframework.beans.factory.BeanDefinitionStoreException
    {
        org.springframework.beans.factory.support.AbstractBeanFactory r0;
        java.util.Map $r1, $r21, $r25;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.StringBuilder $r11, $r13, $r14, $r15, $r16, $r31, $r33, $r34;
        org.springframework.beans.factory.support.RootBeanDefinition $r20, $r23, $r24, r36;
        java.lang.Throwable $r27;
        org.springframework.beans.factory.config.BeanDefinition r2, r3, r37;
        java.lang.String $r4, $r5, $r6, r7, $r10, $r12, $r17, $r22, $r30, $r32, $r35, $r38;
        org.springframework.beans.factory.BeanDefinitionStoreException $r29;
        org.springframework.beans.factory.BeanFactory $r8, $r18;
        org.springframework.beans.factory.NoSuchBeanDefinitionException $r9, $r28;
        java.lang.Object $r26;
        org.springframework.beans.factory.config.ConfigurableBeanFactory $r19;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r7 := @parameter0: java.lang.String;

        r3 := @parameter1: org.springframework.beans.factory.config.BeanDefinition;

        r2 := @parameter2: org.springframework.beans.factory.config.BeanDefinition;

        $r1 = r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.Map mergedBeanDefinitions>;

        entermonitor $r1;

     label01:
        r36 = null;

        if r2 != null goto label02;

        $r25 = r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.Map mergedBeanDefinitions>;

        $r26 = interfaceinvoke $r25.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7);

        r36 = (org.springframework.beans.factory.support.RootBeanDefinition) $r26;

     label02:
        if r36 != null goto label12;

        $r4 = interfaceinvoke r3.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getParentName()>();

        if $r4 != null goto label04;

        $z6 = r3 instanceof org.springframework.beans.factory.support.RootBeanDefinition;

        if $z6 == 0 goto label03;

        $r24 = (org.springframework.beans.factory.support.RootBeanDefinition) r3;

        r36 = virtualinvoke $r24.<org.springframework.beans.factory.support.RootBeanDefinition: org.springframework.beans.factory.support.RootBeanDefinition cloneBeanDefinition()>();

        goto label09;

     label03:
        $r23 = new org.springframework.beans.factory.support.RootBeanDefinition;

        specialinvoke $r23.<org.springframework.beans.factory.support.RootBeanDefinition: void <init>(org.springframework.beans.factory.config.BeanDefinition)>(r3);

        r36 = $r23;

        goto label09;

     label04:
        $r5 = interfaceinvoke r3.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getParentName()>();

        $r6 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.String transformedBeanName(java.lang.String)>($r5);

        $z0 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label05;

        r37 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.config.BeanDefinition getMergedBeanDefinition(java.lang.String)>($r6);

        goto label08;

     label05:
        $r8 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.BeanFactory getParentBeanFactory()>();

        $z1 = $r8 instanceof org.springframework.beans.factory.config.ConfigurableBeanFactory;

        if $z1 == 0 goto label06;

        $r18 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.BeanFactory getParentBeanFactory()>();

        $r19 = (org.springframework.beans.factory.config.ConfigurableBeanFactory) $r18;

        r37 = interfaceinvoke $r19.<org.springframework.beans.factory.config.ConfigurableBeanFactory: org.springframework.beans.factory.config.BeanDefinition getMergedBeanDefinition(java.lang.String)>($r6);

        goto label08;

     label06:
        $r9 = new org.springframework.beans.factory.NoSuchBeanDefinitionException;

        $r10 = interfaceinvoke r3.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getParentName()>();

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>("Parent name \'");

        $r12 = interfaceinvoke r3.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getParentName()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is equal to bean name \'");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': cannot be resolved without an AbstractBeanFactory parent");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<org.springframework.beans.factory.NoSuchBeanDefinitionException: void <init>(java.lang.String,java.lang.String)>($r10, $r17);

        throw $r9;

     label07:
        $r28 := @caughtexception;

        $r29 = new org.springframework.beans.factory.BeanDefinitionStoreException;

        $r30 = interfaceinvoke r3.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getResourceDescription()>();

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not resolve parent bean definition \'");

        $r32 = interfaceinvoke r3.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getParentName()>();

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<org.springframework.beans.factory.BeanDefinitionStoreException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r30, r7, $r35, $r28);

        throw $r29;

     label08:
        $r20 = new org.springframework.beans.factory.support.RootBeanDefinition;

        specialinvoke $r20.<org.springframework.beans.factory.support.RootBeanDefinition: void <init>(org.springframework.beans.factory.config.BeanDefinition)>(r37);

        r36 = $r20;

        virtualinvoke $r20.<org.springframework.beans.factory.support.RootBeanDefinition: void overrideFrom(org.springframework.beans.factory.config.BeanDefinition)>(r3);

     label09:
        $r38 = virtualinvoke r36.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String getScope()>();

        $z7 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r38);

        if $z7 != 0 goto label10;

        virtualinvoke r36.<org.springframework.beans.factory.support.RootBeanDefinition: void setScope(java.lang.String)>("singleton");

     label10:
        if r2 == null goto label11;

        $z4 = interfaceinvoke r2.<org.springframework.beans.factory.config.BeanDefinition: boolean isSingleton()>();

        if $z4 != 0 goto label11;

        $z5 = virtualinvoke r36.<org.springframework.beans.factory.support.RootBeanDefinition: boolean isSingleton()>();

        if $z5 == 0 goto label11;

        $r22 = interfaceinvoke r2.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getScope()>();

        virtualinvoke r36.<org.springframework.beans.factory.support.RootBeanDefinition: void setScope(java.lang.String)>($r22);

     label11:
        if r2 != null goto label12;

        $z2 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isCacheBeanMetadata()>();

        if $z2 == 0 goto label12;

        $z3 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isBeanEligibleForMetadataCaching(java.lang.String)>(r7);

        if $z3 == 0 goto label12;

        $r21 = r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.Map mergedBeanDefinitions>;

        interfaceinvoke $r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, r36);

     label12:
        exitmonitor $r1;

     label13:
        return r36;

     label14:
        $r27 := @caughtexception;

        exitmonitor $r1;

     label15:
        throw $r27;

        catch org.springframework.beans.factory.NoSuchBeanDefinitionException from label04 to label07 with label07;
        catch java.lang.Throwable from label01 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    protected void checkMergedBeanDefinition(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.String, java.lang.Object[]) throws org.springframework.beans.factory.BeanDefinitionStoreException
    {
        org.springframework.beans.factory.support.RootBeanDefinition r0;
        java.lang.Object[] r1;
        org.springframework.beans.factory.BeanDefinitionStoreException $r2;
        org.springframework.beans.factory.support.AbstractBeanFactory r5;
        java.lang.String r4;
        org.springframework.beans.factory.BeanIsAbstractException $r3;
        boolean $z0, $z1;

        r5 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r0 := @parameter0: org.springframework.beans.factory.support.RootBeanDefinition;

        r4 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.Object[];

        $z0 = virtualinvoke r0.<org.springframework.beans.factory.support.RootBeanDefinition: boolean isAbstract()>();

        if $z0 == 0 goto label1;

        $r3 = new org.springframework.beans.factory.BeanIsAbstractException;

        specialinvoke $r3.<org.springframework.beans.factory.BeanIsAbstractException: void <init>(java.lang.String)>(r4);

        throw $r3;

     label1:
        if r1 == null goto label2;

        $z1 = virtualinvoke r0.<org.springframework.beans.factory.support.RootBeanDefinition: boolean isPrototype()>();

        if $z1 != 0 goto label2;

        $r2 = new org.springframework.beans.factory.BeanDefinitionStoreException;

        specialinvoke $r2.<org.springframework.beans.factory.BeanDefinitionStoreException: void <init>(java.lang.String)>("Can only specify arguments for the getBean method when referring to a prototype bean definition");

        throw $r2;

     label2:
        return;
    }

    protected void clearMergedBeanDefinition(java.lang.String)
    {
        java.lang.String r1;
        org.springframework.beans.factory.support.AbstractBeanFactory r0;
        java.util.Map $r2;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.Map mergedBeanDefinitions>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }

    protected transient java.lang.Class resolveBeanClass(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.String, java.lang.Class[]) throws org.springframework.beans.factory.CannotLoadBeanClassException
    {
        org.springframework.beans.factory.support.RootBeanDefinition r0;
        java.security.AccessControlContext $r6;
        org.springframework.beans.factory.support.AbstractBeanFactory r2;
        java.lang.String $r12, r13, $r14, $r17, $r18, $r23, $r24;
        boolean $z0;
        java.security.PrivilegedActionException $r19;
        java.lang.LinkageError $r10;
        java.lang.Class[] r3;
        org.springframework.beans.factory.support.AbstractBeanFactory$4 $r5;
        java.lang.SecurityManager $r1;
        java.lang.Exception $r20;
        org.springframework.beans.factory.CannotLoadBeanClassException $r11, $r16, $r22;
        java.lang.Class $r4, $r8, $r9;
        java.lang.Object $r7;
        java.lang.ClassNotFoundException $r15, r21;

        r2 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r0 := @parameter0: org.springframework.beans.factory.support.RootBeanDefinition;

        r13 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Class[];

     label1:
        $z0 = virtualinvoke r0.<org.springframework.beans.factory.support.RootBeanDefinition: boolean hasBeanClass()>();

        if $z0 == 0 goto label3;

        $r9 = virtualinvoke r0.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.Class getBeanClass()>();

     label2:
        return $r9;

     label3:
        $r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if $r1 == null goto label5;

        $r5 = new org.springframework.beans.factory.support.AbstractBeanFactory$4;

        specialinvoke $r5.<org.springframework.beans.factory.support.AbstractBeanFactory$4: void <init>(org.springframework.beans.factory.support.AbstractBeanFactory,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Class[])>(r2, r0, r3);

        $r6 = virtualinvoke r2.<org.springframework.beans.factory.support.AbstractBeanFactory: java.security.AccessControlContext getAccessControlContext()>();

        $r7 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>($r5, $r6);

        $r8 = (java.lang.Class) $r7;

     label4:
        return $r8;

     label5:
        $r4 = specialinvoke r2.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.Class doResolveBeanClass(org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Class[])>(r0, r3);

     label6:
        return $r4;

     label7:
        $r19 := @caughtexception;

        $r20 = virtualinvoke $r19.<java.security.PrivilegedActionException: java.lang.Exception getException()>();

        r21 = (java.lang.ClassNotFoundException) $r20;

        $r22 = new org.springframework.beans.factory.CannotLoadBeanClassException;

        $r23 = virtualinvoke r0.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String getResourceDescription()>();

        $r24 = virtualinvoke r0.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String getBeanClassName()>();

        specialinvoke $r22.<org.springframework.beans.factory.CannotLoadBeanClassException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.ClassNotFoundException)>($r23, r13, $r24, r21);

        throw $r22;

     label8:
        $r15 := @caughtexception;

        $r16 = new org.springframework.beans.factory.CannotLoadBeanClassException;

        $r17 = virtualinvoke r0.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String getResourceDescription()>();

        $r18 = virtualinvoke r0.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String getBeanClassName()>();

        specialinvoke $r16.<org.springframework.beans.factory.CannotLoadBeanClassException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.ClassNotFoundException)>($r17, r13, $r18, $r15);

        throw $r16;

     label9:
        $r10 := @caughtexception;

        $r11 = new org.springframework.beans.factory.CannotLoadBeanClassException;

        $r12 = virtualinvoke r0.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String getResourceDescription()>();

        $r14 = virtualinvoke r0.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String getBeanClassName()>();

        specialinvoke $r11.<org.springframework.beans.factory.CannotLoadBeanClassException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.LinkageError)>($r12, r13, $r14, $r10);

        throw $r11;

        catch java.security.PrivilegedActionException from label1 to label2 with label7;
        catch java.security.PrivilegedActionException from label3 to label4 with label7;
        catch java.security.PrivilegedActionException from label5 to label6 with label7;
        catch java.lang.ClassNotFoundException from label1 to label2 with label8;
        catch java.lang.ClassNotFoundException from label3 to label4 with label8;
        catch java.lang.ClassNotFoundException from label5 to label6 with label8;
        catch java.lang.LinkageError from label1 to label2 with label9;
        catch java.lang.LinkageError from label3 to label4 with label9;
        catch java.lang.LinkageError from label5 to label6 with label9;
    }

    private transient java.lang.Class doResolveBeanClass(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Class[]) throws java.lang.ClassNotFoundException
    {
        org.springframework.beans.factory.support.RootBeanDefinition r1;
        org.springframework.core.DecoratingClassLoader r9;
        java.lang.Class[] r0;
        org.springframework.beans.factory.support.AbstractBeanFactory r2;
        int i0, i1;
        java.lang.Class $r4, r7, $r10;
        java.lang.ClassLoader $r3, $r5;
        java.lang.String $r6, $r8;
        boolean $z0, $z1;

        r2 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r1 := @parameter0: org.springframework.beans.factory.support.RootBeanDefinition;

        r0 := @parameter1: java.lang.Class[];

        $z0 = staticinvoke <org.springframework.util.ObjectUtils: boolean isEmpty(java.lang.Object[])>(r0);

        if $z0 != 0 goto label6;

        $r5 = virtualinvoke r2.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.ClassLoader getTempClassLoader()>();

        if $r5 == null goto label6;

        $z1 = $r5 instanceof org.springframework.core.DecoratingClassLoader;

        if $z1 == 0 goto label3;

        r9 = (org.springframework.core.DecoratingClassLoader) $r5;

        i0 = lengthof r0;

        i1 = 0;

        goto label2;

     label1:
        r7 = r0[i1];

        $r8 = virtualinvoke r7.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r9.<org.springframework.core.DecoratingClassLoader: void excludeClass(java.lang.String)>($r8);

        i1 = i1 + 1;

     label2:
        if i1 < i0 goto label1;

     label3:
        $r6 = virtualinvoke r1.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String getBeanClassName()>();

        if $r6 == null goto label4;

        $r10 = staticinvoke <org.springframework.util.ClassUtils: java.lang.Class forName(java.lang.String,java.lang.ClassLoader)>($r6, $r5);

        goto label5;

     label4:
        $r10 = null;

     label5:
        return $r10;

     label6:
        $r3 = virtualinvoke r2.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.ClassLoader getBeanClassLoader()>();

        $r4 = virtualinvoke r1.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.Class resolveBeanClass(java.lang.ClassLoader)>($r3);

        return $r4;
    }

    protected java.lang.Object evaluateBeanDefinitionString(java.lang.String, org.springframework.beans.factory.config.BeanDefinition)
    {
        org.springframework.beans.factory.config.Scope $r8;
        org.springframework.beans.factory.config.BeanExpressionContext $r4;
        org.springframework.beans.factory.support.AbstractBeanFactory r0;
        org.springframework.beans.factory.config.BeanDefinition r2;
        java.lang.Object $r6;
        java.lang.String r3, $r7;
        org.springframework.beans.factory.config.BeanExpressionResolver $r1, $r5;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r3 := @parameter0: java.lang.String;

        r2 := @parameter1: org.springframework.beans.factory.config.BeanDefinition;

        $r1 = r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.config.BeanExpressionResolver beanExpressionResolver>;

        if $r1 != null goto label1;

        return r3;

     label1:
        if r2 == null goto label2;

        $r7 = interfaceinvoke r2.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getScope()>();

        $r8 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.config.Scope getRegisteredScope(java.lang.String)>($r7);

        goto label3;

     label2:
        $r8 = null;

     label3:
        $r5 = r0.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.config.BeanExpressionResolver beanExpressionResolver>;

        $r4 = new org.springframework.beans.factory.config.BeanExpressionContext;

        specialinvoke $r4.<org.springframework.beans.factory.config.BeanExpressionContext: void <init>(org.springframework.beans.factory.config.ConfigurableBeanFactory,org.springframework.beans.factory.config.Scope)>(r0, $r8);

        $r6 = interfaceinvoke $r5.<org.springframework.beans.factory.config.BeanExpressionResolver: java.lang.Object evaluate(java.lang.String,org.springframework.beans.factory.config.BeanExpressionContext)>(r3, $r4);

        return $r6;
    }

    protected transient java.lang.Class predictBeanType(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Class[])
    {
        org.springframework.beans.factory.support.RootBeanDefinition r0;
        org.springframework.beans.factory.support.AbstractBeanFactory r2;
        java.lang.Class[] r4;
        java.lang.Class $r5;
        java.lang.String $r1, r3;

        r2 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r3 := @parameter0: java.lang.String;

        r0 := @parameter1: org.springframework.beans.factory.support.RootBeanDefinition;

        r4 := @parameter2: java.lang.Class[];

        $r1 = virtualinvoke r0.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String getFactoryMethodName()>();

        if $r1 == null goto label1;

        return null;

     label1:
        $r5 = virtualinvoke r2.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.Class resolveBeanClass(org.springframework.beans.factory.support.RootBeanDefinition,java.lang.String,java.lang.Class[])>(r0, r3, r4);

        return $r5;
    }

    protected boolean isFactoryBean(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition)
    {
        org.springframework.beans.factory.support.RootBeanDefinition r2;
        org.springframework.beans.factory.support.AbstractBeanFactory r0;
        java.lang.Class[] $r3;
        java.lang.Class $r4, $r5;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.springframework.beans.factory.support.RootBeanDefinition;

        $r3 = newarray (java.lang.Class)[1];

        $r3[0] = class "Lorg/springframework/beans/factory/FactoryBean;";

        $r4 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.Class predictBeanType(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Class[])>(r1, r2, $r3);

        if $r4 == null goto label1;

        $r5 = class "Lorg/springframework/beans/factory/FactoryBean;";

        $z0 = virtualinvoke $r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r4);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected java.lang.Class getTypeForFactoryBean(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition)
    {
        org.springframework.beans.factory.support.RootBeanDefinition r0;
        org.springframework.beans.factory.support.AbstractBeanFactory r1;
        org.springframework.beans.factory.BeanCreationException $r8;
        org.springframework.beans.factory.FactoryBean r14;
        java.lang.String r3, $r5, $r13;
        boolean $z0, $z1;
        java.lang.StringBuilder $r2, $r4, $r10, $r12;
        java.lang.Object $r6;
        java.lang.Class $r7;
        org.apache.commons.logging.Log $r9, $r11;

        r1 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r3 := @parameter0: java.lang.String;

        r0 := @parameter1: org.springframework.beans.factory.support.RootBeanDefinition;

        $z0 = virtualinvoke r0.<org.springframework.beans.factory.support.RootBeanDefinition: boolean isSingleton()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("&");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r1.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.Object doGetBean(java.lang.String,java.lang.Class,java.lang.Object[],boolean)>($r5, class "Lorg/springframework/beans/factory/FactoryBean;", null, 1);

        r14 = (org.springframework.beans.factory.FactoryBean) $r6;

        $r7 = virtualinvoke r1.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.Class getTypeForFactoryBean(org.springframework.beans.factory.FactoryBean)>(r14);

     label2:
        return $r7;

     label3:
        $r8 := @caughtexception;

        $r9 = r1.<org.springframework.beans.factory.support.AbstractBeanFactory: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r9.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label4;

        $r11 = r1.<org.springframework.beans.factory.support.AbstractBeanFactory: org.apache.commons.logging.Log logger>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("Ignoring bean creation exception on FactoryBean type check: ");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r11.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r13);

     label4:
        virtualinvoke r1.<org.springframework.beans.factory.support.AbstractBeanFactory: void onSuppressedException(java.lang.Exception)>($r8);

        return null;

        catch org.springframework.beans.factory.BeanCreationException from label1 to label2 with label3;
    }

    protected void markBeanAsCreated(java.lang.String)
    {
        java.util.Set $r2;
        java.lang.String r1;
        org.springframework.beans.factory.support.AbstractBeanFactory r0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.Set alreadyCreated>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    protected boolean isBeanEligibleForMetadataCaching(java.lang.String)
    {
        org.springframework.beans.factory.support.AbstractBeanFactory r0;
        java.util.Set $r2;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.Set alreadyCreated>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    protected boolean removeSingletonIfCreatedForTypeCheckOnly(java.lang.String)
    {
        org.springframework.beans.factory.support.AbstractBeanFactory r0;
        java.util.Set $r2;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.Set alreadyCreated>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: void removeSingleton(java.lang.String)>(r1);

        return 1;

     label1:
        return 0;
    }

    protected java.lang.Object getObjectForBeanInstance(java.lang.Object, java.lang.String, java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition)
    {
        org.springframework.beans.factory.support.RootBeanDefinition r8;
        org.springframework.beans.factory.FactoryBean r2;
        org.springframework.beans.factory.support.AbstractBeanFactory r3;
        java.lang.String r0, r4, $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.Object r1, r9;
        java.lang.Class $r7;
        org.springframework.beans.factory.BeanIsNotAFactoryException $r5;

        r3 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r1 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        r8 := @parameter3: org.springframework.beans.factory.support.RootBeanDefinition;

        $z0 = staticinvoke <org.springframework.beans.factory.BeanFactoryUtils: boolean isFactoryDereference(java.lang.String)>(r0);

        if $z0 == 0 goto label01;

        $z5 = r1 instanceof org.springframework.beans.factory.FactoryBean;

        if $z5 != 0 goto label01;

        $r5 = new org.springframework.beans.factory.BeanIsNotAFactoryException;

        $r6 = virtualinvoke r3.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.String transformedBeanName(java.lang.String)>(r0);

        $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        specialinvoke $r5.<org.springframework.beans.factory.BeanIsNotAFactoryException: void <init>(java.lang.String,java.lang.Class)>($r6, $r7);

        throw $r5;

     label01:
        $z1 = r1 instanceof org.springframework.beans.factory.FactoryBean;

        if $z1 == 0 goto label02;

        $z2 = staticinvoke <org.springframework.beans.factory.BeanFactoryUtils: boolean isFactoryDereference(java.lang.String)>(r0);

        if $z2 == 0 goto label03;

     label02:
        return r1;

     label03:
        r9 = null;

        if r8 != null goto label04;

        r9 = virtualinvoke r3.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.Object getCachedObjectForFactoryBean(java.lang.String)>(r4);

     label04:
        if r9 != null goto label10;

        r2 = (org.springframework.beans.factory.FactoryBean) r1;

        if r8 != null goto label05;

        $z4 = virtualinvoke r3.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean containsBeanDefinition(java.lang.String)>(r4);

        if $z4 == 0 goto label05;

        r8 = virtualinvoke r3.<org.springframework.beans.factory.support.AbstractBeanFactory: org.springframework.beans.factory.support.RootBeanDefinition getMergedLocalBeanDefinition(java.lang.String)>(r4);

     label05:
        if r8 == null goto label06;

        $z3 = virtualinvoke r8.<org.springframework.beans.factory.support.RootBeanDefinition: boolean isSynthetic()>();

        if $z3 == 0 goto label06;

        $z6 = 1;

        goto label07;

     label06:
        $z6 = 0;

     label07:
        if $z6 == 0 goto label08;

        $z7 = 0;

        goto label09;

     label08:
        $z7 = 1;

     label09:
        r9 = virtualinvoke r3.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.Object getObjectFromFactoryBean(org.springframework.beans.factory.FactoryBean,java.lang.String,boolean)>(r2, r4, $z7);

     label10:
        return r9;
    }

    public boolean isBeanNameInUse(java.lang.String)
    {
        org.springframework.beans.factory.support.AbstractBeanFactory r0;
        java.lang.String r1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean isAlias(java.lang.String)>(r1);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean containsLocalBean(java.lang.String)>(r1);

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean hasDependentBean(java.lang.String)>(r1);

        if $z2 != 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    protected boolean requiresDestruction(java.lang.Object, org.springframework.beans.factory.support.RootBeanDefinition)
    {
        org.springframework.beans.factory.support.RootBeanDefinition r1;
        org.springframework.beans.factory.support.AbstractBeanFactory r3;
        java.lang.Object r0;
        java.lang.String $r2;
        boolean $z0, $z1;

        r3 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: org.springframework.beans.factory.support.RootBeanDefinition;

        if r0 == null goto label2;

        $z0 = r0 instanceof org.springframework.beans.factory.DisposableBean;

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke r1.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String getDestroyMethodName()>();

        if $r2 != null goto label1;

        $z1 = virtualinvoke r3.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean hasDestructionAwareBeanPostProcessors()>();

        if $z1 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    protected void registerDisposableBeanIfNecessary(java.lang.String, java.lang.Object, org.springframework.beans.factory.support.RootBeanDefinition)
    {
        org.springframework.beans.factory.support.RootBeanDefinition r1;
        java.security.AccessControlContext $r19;
        java.lang.IllegalStateException $r11;
        org.springframework.beans.factory.config.Scope r7;
        org.springframework.beans.factory.support.AbstractBeanFactory r2;
        java.util.Map $r4;
        java.lang.String $r5, r8, $r13, $r16;
        boolean $z0, $z1, $z2;
        org.springframework.beans.factory.support.DisposableBeanAdapter $r9, $r17;
        java.lang.SecurityManager $r0;
        java.util.List $r10, $r18;
        java.lang.Object r3, $r6;
        java.lang.StringBuilder $r12, $r14, $r15;

        r2 := @this: org.springframework.beans.factory.support.AbstractBeanFactory;

        r8 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Object;

        r1 := @parameter2: org.springframework.beans.factory.support.RootBeanDefinition;

        $r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if $r0 == null goto label1;

        $r19 = virtualinvoke r2.<org.springframework.beans.factory.support.AbstractBeanFactory: java.security.AccessControlContext getAccessControlContext()>();

        goto label2;

     label1:
        $r19 = null;

     label2:
        $z0 = virtualinvoke r1.<org.springframework.beans.factory.support.RootBeanDefinition: boolean isPrototype()>();

        if $z0 != 0 goto label5;

        $z1 = virtualinvoke r2.<org.springframework.beans.factory.support.AbstractBeanFactory: boolean requiresDestruction(java.lang.Object,org.springframework.beans.factory.support.RootBeanDefinition)>(r3, r1);

        if $z1 == 0 goto label5;

        $z2 = virtualinvoke r1.<org.springframework.beans.factory.support.RootBeanDefinition: boolean isSingleton()>();

        if $z2 == 0 goto label3;

        $r17 = new org.springframework.beans.factory.support.DisposableBeanAdapter;

        $r18 = virtualinvoke r2.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.List getBeanPostProcessors()>();

        specialinvoke $r17.<org.springframework.beans.factory.support.DisposableBeanAdapter: void <init>(java.lang.Object,java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.util.List,java.security.AccessControlContext)>(r3, r8, r1, $r18, $r19);

        virtualinvoke r2.<org.springframework.beans.factory.support.AbstractBeanFactory: void registerDisposableBean(java.lang.String,org.springframework.beans.factory.DisposableBean)>(r8, $r17);

        goto label5;

     label3:
        $r4 = r2.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.Map scopes>;

        $r5 = virtualinvoke r1.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String getScope()>();

        $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        r7 = (org.springframework.beans.factory.config.Scope) $r6;

        if r7 != null goto label4;

        $r11 = new java.lang.IllegalStateException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("No Scope registered for scope \'");

        $r13 = virtualinvoke r1.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String getScope()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r16);

        throw $r11;

     label4:
        $r9 = new org.springframework.beans.factory.support.DisposableBeanAdapter;

        $r10 = virtualinvoke r2.<org.springframework.beans.factory.support.AbstractBeanFactory: java.util.List getBeanPostProcessors()>();

        specialinvoke $r9.<org.springframework.beans.factory.support.DisposableBeanAdapter: void <init>(java.lang.Object,java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.util.List,java.security.AccessControlContext)>(r3, r8, r1, $r10, $r19);

        interfaceinvoke r7.<org.springframework.beans.factory.config.Scope: void registerDestructionCallback(java.lang.String,java.lang.Runnable)>(r8, $r9);

     label5:
        return;
    }

    protected abstract boolean containsBeanDefinition(java.lang.String);

    protected abstract org.springframework.beans.factory.config.BeanDefinition getBeanDefinition(java.lang.String) throws org.springframework.beans.BeansException;

    protected abstract java.lang.Object createBean(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Object[]) throws org.springframework.beans.factory.BeanCreationException;

    static java.lang.Class access$0(org.springframework.beans.factory.support.AbstractBeanFactory, org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Class[]) throws java.lang.ClassNotFoundException
    {
        org.springframework.beans.factory.support.RootBeanDefinition r1;
        org.springframework.beans.factory.support.AbstractBeanFactory r0;
        java.lang.Class[] r2;
        java.lang.Class $r3;

        r0 := @parameter0: org.springframework.beans.factory.support.AbstractBeanFactory;

        r1 := @parameter1: org.springframework.beans.factory.support.RootBeanDefinition;

        r2 := @parameter2: java.lang.Class[];

        $r3 = specialinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.Class doResolveBeanClass(org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Class[])>(r1, r2);

        return $r3;
    }
}
