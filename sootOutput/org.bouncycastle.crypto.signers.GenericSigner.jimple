public class org.bouncycastle.crypto.signers.GenericSigner extends java.lang.Object implements org.bouncycastle.crypto.Signer
{
    private final org.bouncycastle.crypto.AsymmetricBlockCipher engine;
    private final org.bouncycastle.crypto.Digest digest;
    private boolean forSigning;

    public void <init>(org.bouncycastle.crypto.AsymmetricBlockCipher, org.bouncycastle.crypto.Digest)
    {
        org.bouncycastle.crypto.signers.GenericSigner r0;
        org.bouncycastle.crypto.Digest r2;
        org.bouncycastle.crypto.AsymmetricBlockCipher r1;

        r0 := @this: org.bouncycastle.crypto.signers.GenericSigner;

        r1 := @parameter0: org.bouncycastle.crypto.AsymmetricBlockCipher;

        r2 := @parameter1: org.bouncycastle.crypto.Digest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.bouncycastle.crypto.signers.GenericSigner: org.bouncycastle.crypto.AsymmetricBlockCipher engine> = r1;

        r0.<org.bouncycastle.crypto.signers.GenericSigner: org.bouncycastle.crypto.Digest digest> = r2;

        return;
    }

    public void init(boolean, org.bouncycastle.crypto.CipherParameters)
    {
        org.bouncycastle.crypto.signers.GenericSigner r0;
        org.bouncycastle.crypto.params.AsymmetricKeyParameter r7;
        java.lang.IllegalArgumentException $r3, $r4;
        org.bouncycastle.crypto.AsymmetricBlockCipher $r2;
        org.bouncycastle.crypto.params.ParametersWithRandom $r5;
        boolean z0, $z1, $z2, $z3;
        org.bouncycastle.crypto.CipherParameters r1, $r6;

        r0 := @this: org.bouncycastle.crypto.signers.GenericSigner;

        z0 := @parameter0: boolean;

        r1 := @parameter1: org.bouncycastle.crypto.CipherParameters;

        r0.<org.bouncycastle.crypto.signers.GenericSigner: boolean forSigning> = z0;

        $z1 = r1 instanceof org.bouncycastle.crypto.params.ParametersWithRandom;

        if $z1 == 0 goto label1;

        $r5 = (org.bouncycastle.crypto.params.ParametersWithRandom) r1;

        $r6 = virtualinvoke $r5.<org.bouncycastle.crypto.params.ParametersWithRandom: org.bouncycastle.crypto.CipherParameters getParameters()>();

        r7 = (org.bouncycastle.crypto.params.AsymmetricKeyParameter) $r6;

        goto label2;

     label1:
        r7 = (org.bouncycastle.crypto.params.AsymmetricKeyParameter) r1;

     label2:
        if z0 == 0 goto label3;

        $z3 = virtualinvoke r7.<org.bouncycastle.crypto.params.AsymmetricKeyParameter: boolean isPrivate()>();

        if $z3 != 0 goto label3;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("signing requires private key");

        throw $r4;

     label3:
        if z0 != 0 goto label4;

        $z2 = virtualinvoke r7.<org.bouncycastle.crypto.params.AsymmetricKeyParameter: boolean isPrivate()>();

        if $z2 == 0 goto label4;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("verification requires public key");

        throw $r3;

     label4:
        virtualinvoke r0.<org.bouncycastle.crypto.signers.GenericSigner: void reset()>();

        $r2 = r0.<org.bouncycastle.crypto.signers.GenericSigner: org.bouncycastle.crypto.AsymmetricBlockCipher engine>;

        interfaceinvoke $r2.<org.bouncycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.bouncycastle.crypto.CipherParameters)>(z0, r1);

        return;
    }

    public void update(byte)
    {
        org.bouncycastle.crypto.signers.GenericSigner r0;
        org.bouncycastle.crypto.Digest $r1;
        byte b0;

        r0 := @this: org.bouncycastle.crypto.signers.GenericSigner;

        b0 := @parameter0: byte;

        $r1 = r0.<org.bouncycastle.crypto.signers.GenericSigner: org.bouncycastle.crypto.Digest digest>;

        interfaceinvoke $r1.<org.bouncycastle.crypto.Digest: void update(byte)>(b0);

        return;
    }

    public void update(byte[], int, int)
    {
        byte[] r1;
        int i0, i1;
        org.bouncycastle.crypto.signers.GenericSigner r0;
        org.bouncycastle.crypto.Digest $r2;

        r0 := @this: org.bouncycastle.crypto.signers.GenericSigner;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.bouncycastle.crypto.signers.GenericSigner: org.bouncycastle.crypto.Digest digest>;

        interfaceinvoke $r2.<org.bouncycastle.crypto.Digest: void update(byte[],int,int)>(r1, i0, i1);

        return;
    }

    public byte[] generateSignature() throws org.bouncycastle.crypto.CryptoException, org.bouncycastle.crypto.DataLengthException
    {
        byte[] r2, $r5;
        java.lang.IllegalStateException $r6;
        org.bouncycastle.crypto.signers.GenericSigner r0;
        org.bouncycastle.crypto.Digest $r1, $r3;
        org.bouncycastle.crypto.AsymmetricBlockCipher $r4;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.bouncycastle.crypto.signers.GenericSigner;

        $z0 = r0.<org.bouncycastle.crypto.signers.GenericSigner: boolean forSigning>;

        if $z0 != 0 goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("GenericSigner not initialised for signature generation.");

        throw $r6;

     label1:
        $r1 = r0.<org.bouncycastle.crypto.signers.GenericSigner: org.bouncycastle.crypto.Digest digest>;

        $i0 = interfaceinvoke $r1.<org.bouncycastle.crypto.Digest: int getDigestSize()>();

        r2 = newarray (byte)[$i0];

        $r3 = r0.<org.bouncycastle.crypto.signers.GenericSigner: org.bouncycastle.crypto.Digest digest>;

        interfaceinvoke $r3.<org.bouncycastle.crypto.Digest: int doFinal(byte[],int)>(r2, 0);

        $r4 = r0.<org.bouncycastle.crypto.signers.GenericSigner: org.bouncycastle.crypto.AsymmetricBlockCipher engine>;

        $i1 = lengthof r2;

        $r5 = interfaceinvoke $r4.<org.bouncycastle.crypto.AsymmetricBlockCipher: byte[] processBlock(byte[],int,int)>(r2, 0, $i1);

        return $r5;
    }

    public boolean verifySignature(byte[])
    {
        byte[] r2, r4, $r6;
        java.lang.IllegalStateException $r7;
        org.bouncycastle.crypto.signers.GenericSigner r0;
        org.bouncycastle.crypto.Digest $r1, $r3;
        org.bouncycastle.crypto.AsymmetricBlockCipher $r5;
        java.lang.Exception $r8;
        int $i0, $i1;
        boolean $z0, $z1;

        r0 := @this: org.bouncycastle.crypto.signers.GenericSigner;

        r4 := @parameter0: byte[];

        $z0 = r0.<org.bouncycastle.crypto.signers.GenericSigner: boolean forSigning>;

        if $z0 == 0 goto label1;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("GenericSigner not initialised for verification");

        throw $r7;

     label1:
        $r1 = r0.<org.bouncycastle.crypto.signers.GenericSigner: org.bouncycastle.crypto.Digest digest>;

        $i0 = interfaceinvoke $r1.<org.bouncycastle.crypto.Digest: int getDigestSize()>();

        r2 = newarray (byte)[$i0];

        $r3 = r0.<org.bouncycastle.crypto.signers.GenericSigner: org.bouncycastle.crypto.Digest digest>;

        interfaceinvoke $r3.<org.bouncycastle.crypto.Digest: int doFinal(byte[],int)>(r2, 0);

     label2:
        $r5 = r0.<org.bouncycastle.crypto.signers.GenericSigner: org.bouncycastle.crypto.AsymmetricBlockCipher engine>;

        $i1 = lengthof r4;

        $r6 = interfaceinvoke $r5.<org.bouncycastle.crypto.AsymmetricBlockCipher: byte[] processBlock(byte[],int,int)>(r4, 0, $i1);

        $z1 = staticinvoke <org.bouncycastle.util.Arrays: boolean constantTimeAreEqual(byte[],byte[])>($r6, r2);

     label3:
        return $z1;

     label4:
        $r8 := @caughtexception;

        return 0;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public void reset()
    {
        org.bouncycastle.crypto.signers.GenericSigner r0;
        org.bouncycastle.crypto.Digest $r1;

        r0 := @this: org.bouncycastle.crypto.signers.GenericSigner;

        $r1 = r0.<org.bouncycastle.crypto.signers.GenericSigner: org.bouncycastle.crypto.Digest digest>;

        interfaceinvoke $r1.<org.bouncycastle.crypto.Digest: void reset()>();

        return;
    }
}
