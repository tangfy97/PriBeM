public abstract class com.hp.hpl.jena.sparql.modify.request.UpdateBinaryOp extends com.hp.hpl.jena.update.Update
{
    private com.hp.hpl.jena.sparql.modify.request.Target src;
    private com.hp.hpl.jena.sparql.modify.request.Target dest;
    private boolean silent;

    protected void <init>(com.hp.hpl.jena.sparql.modify.request.Target, com.hp.hpl.jena.sparql.modify.request.Target, boolean)
    {
        com.hp.hpl.jena.sparql.modify.request.UpdateBinaryOp r0;
        com.hp.hpl.jena.sparql.modify.request.Target r1, r2;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.sparql.modify.request.UpdateBinaryOp;

        r1 := @parameter0: com.hp.hpl.jena.sparql.modify.request.Target;

        r2 := @parameter1: com.hp.hpl.jena.sparql.modify.request.Target;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.hp.hpl.jena.update.Update: void <init>()>();

        staticinvoke <com.hp.hpl.jena.sparql.modify.request.UpdateBinaryOp: void checkTarget(com.hp.hpl.jena.sparql.modify.request.Target)>(r1);

        staticinvoke <com.hp.hpl.jena.sparql.modify.request.UpdateBinaryOp: void checkTarget(com.hp.hpl.jena.sparql.modify.request.Target)>(r2);

        r0.<com.hp.hpl.jena.sparql.modify.request.UpdateBinaryOp: com.hp.hpl.jena.sparql.modify.request.Target src> = r1;

        r0.<com.hp.hpl.jena.sparql.modify.request.UpdateBinaryOp: com.hp.hpl.jena.sparql.modify.request.Target dest> = r2;

        r0.<com.hp.hpl.jena.sparql.modify.request.UpdateBinaryOp: boolean silent> = z0;

        return;
    }

    private static void checkTarget(com.hp.hpl.jena.sparql.modify.request.Target)
    {
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        com.hp.hpl.jena.sparql.ARQException $r1;
        com.hp.hpl.jena.sparql.modify.request.Target r0;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.modify.request.Target;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.modify.request.Target: boolean isDefault()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.modify.request.Target: boolean isOneNamedGraph()>();

        if $z1 != 0 goto label1;

        $r1 = new com.hp.hpl.jena.sparql.ARQException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal target: must identify a single graph: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label1:
        return;
    }

    public com.hp.hpl.jena.sparql.modify.request.Target getSrc()
    {
        com.hp.hpl.jena.sparql.modify.request.UpdateBinaryOp r0;
        com.hp.hpl.jena.sparql.modify.request.Target $r1;

        r0 := @this: com.hp.hpl.jena.sparql.modify.request.UpdateBinaryOp;

        $r1 = r0.<com.hp.hpl.jena.sparql.modify.request.UpdateBinaryOp: com.hp.hpl.jena.sparql.modify.request.Target src>;

        return $r1;
    }

    public com.hp.hpl.jena.sparql.modify.request.Target getDest()
    {
        com.hp.hpl.jena.sparql.modify.request.UpdateBinaryOp r0;
        com.hp.hpl.jena.sparql.modify.request.Target $r1;

        r0 := @this: com.hp.hpl.jena.sparql.modify.request.UpdateBinaryOp;

        $r1 = r0.<com.hp.hpl.jena.sparql.modify.request.UpdateBinaryOp: com.hp.hpl.jena.sparql.modify.request.Target dest>;

        return $r1;
    }

    public boolean getSilent()
    {
        com.hp.hpl.jena.sparql.modify.request.UpdateBinaryOp r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.modify.request.UpdateBinaryOp;

        $z0 = r0.<com.hp.hpl.jena.sparql.modify.request.UpdateBinaryOp: boolean silent>;

        return $z0;
    }

    public final boolean equalTo(com.hp.hpl.jena.update.Update, com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)
    {
        com.hp.hpl.jena.sparql.modify.request.UpdateBinaryOp r0, r4;
        com.hp.hpl.jena.sparql.util.NodeIsomorphismMap r5;
        com.hp.hpl.jena.update.Update r1;
        java.lang.Class $r2, $r3;
        com.hp.hpl.jena.sparql.modify.request.Target $r6, $r7, $r8, $r9;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: com.hp.hpl.jena.sparql.modify.request.UpdateBinaryOp;

        r1 := @parameter0: com.hp.hpl.jena.update.Update;

        r5 := @parameter1: com.hp.hpl.jena.sparql.util.NodeIsomorphismMap;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == $r3 goto label2;

        return 0;

     label2:
        r4 = (com.hp.hpl.jena.sparql.modify.request.UpdateBinaryOp) r1;

        $z1 = r0.<com.hp.hpl.jena.sparql.modify.request.UpdateBinaryOp: boolean silent>;

        $z0 = r4.<com.hp.hpl.jena.sparql.modify.request.UpdateBinaryOp: boolean silent>;

        if $z1 == $z0 goto label3;

        return 0;

     label3:
        $r7 = r0.<com.hp.hpl.jena.sparql.modify.request.UpdateBinaryOp: com.hp.hpl.jena.sparql.modify.request.Target dest>;

        $r6 = r4.<com.hp.hpl.jena.sparql.modify.request.UpdateBinaryOp: com.hp.hpl.jena.sparql.modify.request.Target dest>;

        $z2 = virtualinvoke $r7.<com.hp.hpl.jena.sparql.modify.request.Target: boolean equalTo(com.hp.hpl.jena.sparql.modify.request.Target,com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)>($r6, r5);

        if $z2 == 0 goto label4;

        $r9 = r0.<com.hp.hpl.jena.sparql.modify.request.UpdateBinaryOp: com.hp.hpl.jena.sparql.modify.request.Target src>;

        $r8 = r4.<com.hp.hpl.jena.sparql.modify.request.UpdateBinaryOp: com.hp.hpl.jena.sparql.modify.request.Target src>;

        $z3 = virtualinvoke $r9.<com.hp.hpl.jena.sparql.modify.request.Target: boolean equalTo(com.hp.hpl.jena.sparql.modify.request.Target,com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)>($r8, r5);

        if $z3 == 0 goto label4;

        $z4 = 1;

        goto label5;

     label4:
        $z4 = 0;

     label5:
        return $z4;
    }
}
