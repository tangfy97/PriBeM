public class org.waveprotocol.wave.client.editor.content.AgentAdapter extends org.waveprotocol.wave.client.editor.content.ContentElement implements org.waveprotocol.wave.client.editor.content.MutatingNode, org.waveprotocol.wave.client.editor.gwt.HasGwtWidget
{
    public static final org.waveprotocol.wave.client.editor.content.AgentAdapter$Css css;
    static final org.waveprotocol.wave.client.editor.NodeMutationHandlerImpl defaultMutationHandler;
    static final org.waveprotocol.wave.client.editor.NodeEventHandler defaultEventHandler;
    static final org.waveprotocol.wave.client.editor.content.Renderer defaultRenderer;
    static final org.waveprotocol.wave.client.editor.content.Renderer noRenderer;
    static final org.waveprotocol.wave.client.editor.content.Renderer emptyRenderer;
    org.waveprotocol.wave.client.editor.NodeEventHandler nodeEventHandler;
    private org.waveprotocol.wave.client.editor.NodeMutationHandler nodeMutationHandler;
    private org.waveprotocol.wave.client.editor.content.Renderer renderer;
    private org.waveprotocol.wave.client.editor.ElementHandlerRegistry registry;
    private final org.waveprotocol.wave.client.editor.content.ContentElement element;
    static final boolean $assertionsDisabled;

    public void <init>(java.lang.String, java.util.Map, org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext, org.waveprotocol.wave.client.editor.ElementHandlerRegistry)
    {
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext r3;
        java.util.Map r2;
        org.waveprotocol.wave.client.editor.content.AgentAdapter r0;
        java.lang.String r1;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry r4;

        r0 := @this: org.waveprotocol.wave.client.editor.content.AgentAdapter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Map;

        r3 := @parameter2: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext;

        r4 := @parameter3: org.waveprotocol.wave.client.editor.ElementHandlerRegistry;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: void <init>(java.lang.String,java.util.Map,org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext,org.waveprotocol.wave.client.editor.ElementHandlerRegistry,boolean)>(r1, r2, r3, r4, 1);

        return;
    }

    public void <init>(java.lang.String, java.util.Map, org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext, org.waveprotocol.wave.client.editor.ElementHandlerRegistry, boolean)
    {
        org.waveprotocol.wave.client.editor.content.AgentAdapter r0;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry r6;
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext r2;
        org.waveprotocol.wave.client.editor.NodeMutationHandlerImpl $r4;
        org.waveprotocol.wave.client.editor.content.Renderer $r5;
        java.util.Map r7;
        java.lang.String r1;
        org.waveprotocol.wave.client.editor.NodeEventHandler $r3;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.AgentAdapter;

        r1 := @parameter0: java.lang.String;

        r7 := @parameter1: java.util.Map;

        r2 := @parameter2: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext;

        r6 := @parameter3: org.waveprotocol.wave.client.editor.ElementHandlerRegistry;

        z0 := @parameter4: boolean;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: void <init>(java.lang.String,org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext,boolean)>(r1, r2, 1);

        $r3 = <org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.NodeEventHandler defaultEventHandler>;

        r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.NodeEventHandler nodeEventHandler> = $r3;

        $r4 = <org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.NodeMutationHandlerImpl defaultMutationHandler>;

        r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.NodeMutationHandler nodeMutationHandler> = $r4;

        $r5 = <org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.content.Renderer noRenderer>;

        r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.content.Renderer renderer> = $r5;

        r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.content.ContentElement element> = r0;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: void setRegistry(org.waveprotocol.wave.client.editor.ElementHandlerRegistry)>(r6);

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: void init(java.util.Map)>(r7);

        return;
    }

    public void setRegistry(org.waveprotocol.wave.client.editor.ElementHandlerRegistry)
    {
        org.waveprotocol.wave.client.editor.content.AgentAdapter r0;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.AgentAdapter;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.ElementHandlerRegistry;

        r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.ElementHandlerRegistry registry> = r1;

        return;
    }

    public org.waveprotocol.wave.client.editor.ElementHandlerRegistry getRegistry()
    {
        org.waveprotocol.wave.client.editor.content.AgentAdapter r0;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.AgentAdapter;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.ElementHandlerRegistry registry>;

        return $r1;
    }

    org.waveprotocol.wave.client.editor.content.Renderer getRenderer()
    {
        org.waveprotocol.wave.client.editor.content.AgentAdapter r0;
        org.waveprotocol.wave.client.editor.content.Renderer $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.AgentAdapter;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.content.Renderer renderer>;

        return $r1;
    }

    void clearRenderer()
    {
        org.waveprotocol.wave.client.editor.content.AgentAdapter r0;
        org.waveprotocol.wave.client.editor.content.Renderer $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.AgentAdapter;

        $r1 = <org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.content.Renderer noRenderer>;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: void setRenderer(org.waveprotocol.wave.client.editor.content.Renderer)>($r1);

        return;
    }

    void setRenderer(org.waveprotocol.wave.client.editor.content.Renderer)
    {
        org.waveprotocol.wave.client.editor.content.AgentAdapter r1;
        java.lang.AssertionError $r9;
        org.waveprotocol.wave.client.editor.content.Renderer r0, $r2;
        com.google.gwt.dom.client.Element $r3, $r4, $r5, $r6, $r7;
        org.waveprotocol.wave.client.editor.content.ContentElement $r8;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.client.editor.content.AgentAdapter;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.Renderer;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "Null renderer");

        $r2 = r1.<org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.content.Renderer renderer>;

        if $r2 != r0 goto label1;

        return;

     label1:
        r1.<org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.content.Renderer renderer> = r0;

        $r3 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.AgentAdapter: com.google.gwt.dom.client.Element getImplNodelet()>();

        virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.AgentAdapter: void setContainerNodelet(com.google.gwt.dom.client.Element)>(null);

        $r4 = interfaceinvoke r0.<org.waveprotocol.wave.client.editor.content.Renderer: com.google.gwt.dom.client.Element createDomImpl(org.waveprotocol.wave.client.editor.content.Renderer$Renderable)>(r1);

        $r5 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.AgentAdapter: com.google.gwt.dom.client.Element getContainerNodelet()>();

        virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.AgentAdapter: void setImplNodelets(com.google.gwt.dom.client.Element,com.google.gwt.dom.client.Element)>($r4, $r5);

        $z0 = <org.waveprotocol.wave.client.editor.content.AgentAdapter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $r6 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.AgentAdapter: com.google.gwt.dom.client.Element getImplNodelet()>();

        if $r6 == null goto label2;

        $r7 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.AgentAdapter: com.google.gwt.dom.client.Element getImplNodelet()>();

        $r8 = staticinvoke <org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.client.editor.content.ContentElement getBackReference(com.google.gwt.dom.client.Element)>($r7);

        if $r8 == r1 goto label2;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label2:
        if $r3 == null goto label3;

        virtualinvoke $r3.<com.google.gwt.dom.client.Element: void removeFromParent()>();

     label3:
        return;
    }

    public void debugSetNodeMutationHandler(org.waveprotocol.wave.client.editor.NodeMutationHandler)
    {
        org.waveprotocol.wave.client.editor.NodeMutationHandler r1;
        org.waveprotocol.wave.client.editor.content.AgentAdapter r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.AgentAdapter;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.NodeMutationHandler;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: void setNodeMutationHandler(org.waveprotocol.wave.client.editor.NodeMutationHandler)>(r1);

        return;
    }

    void setNodeMutationHandler(org.waveprotocol.wave.client.editor.NodeMutationHandler)
    {
        org.waveprotocol.wave.client.editor.NodeMutationHandler $r1, $r2, r6, $r9, $r10;
        org.waveprotocol.wave.client.editor.content.AgentAdapter r0;
        java.lang.AssertionError $r5;
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r3;
        org.waveprotocol.wave.client.editor.NodeMutationHandlerImpl $r7;
        java.lang.Object $r4, $r8;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.AgentAdapter;

        r6 := @parameter0: org.waveprotocol.wave.client.editor.NodeMutationHandler;

        $z0 = <org.waveprotocol.wave.client.editor.content.AgentAdapter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: boolean isContentAttached()>();

        if $z1 != 0 goto label1;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.content.CMutableDocument getMutableDoc()>();

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.CMutableDocument: java.lang.Object getDocumentElement()>();

        if $r4 == r0 goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label1:
        $r7 = <org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.NodeMutationHandlerImpl defaultMutationHandler>;

        $r8 = staticinvoke <org.waveprotocol.wave.model.util.ValueUtils: java.lang.Object valueOrDefault(java.lang.Object,java.lang.Object)>(r6, $r7);

        $r9 = (org.waveprotocol.wave.client.editor.NodeMutationHandler) $r8;

        $r10 = r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.NodeMutationHandler nodeMutationHandler>;

        if $r10 != $r9 goto label2;

        return;

     label2:
        $r1 = r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.NodeMutationHandler nodeMutationHandler>;

        interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.NodeMutationHandler: void onDeactivated(java.lang.Object)>(r0);

        r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.NodeMutationHandler nodeMutationHandler> = $r9;

        $r2 = r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.NodeMutationHandler nodeMutationHandler>;

        interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.NodeMutationHandler: void onActivationStart(java.lang.Object)>(r0);

        return;
    }

    void triggerChildrenReady()
    {
        org.waveprotocol.wave.client.editor.NodeMutationHandler $r1;
        org.waveprotocol.wave.client.editor.content.AgentAdapter r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.AgentAdapter;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.NodeMutationHandler nodeMutationHandler>;

        interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.NodeMutationHandler: void onActivatedSubtree(java.lang.Object)>(r0);

        return;
    }

    void setNodeEventHandler(org.waveprotocol.wave.client.editor.NodeEventHandler)
    {
        org.waveprotocol.wave.client.editor.content.AgentAdapter r0;
        java.lang.AssertionError $r5;
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r3;
        java.lang.Object $r4, $r8;
        org.waveprotocol.wave.client.editor.NodeEventHandler $r1, $r2, r6, $r7, $r9, $r10;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.AgentAdapter;

        r6 := @parameter0: org.waveprotocol.wave.client.editor.NodeEventHandler;

        $z0 = <org.waveprotocol.wave.client.editor.content.AgentAdapter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: boolean isContentAttached()>();

        if $z1 != 0 goto label1;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.content.CMutableDocument getMutableDoc()>();

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.CMutableDocument: java.lang.Object getDocumentElement()>();

        if $r4 == r0 goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label1:
        $r7 = <org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.NodeEventHandler defaultEventHandler>;

        $r8 = staticinvoke <org.waveprotocol.wave.model.util.ValueUtils: java.lang.Object valueOrDefault(java.lang.Object,java.lang.Object)>(r6, $r7);

        $r9 = (org.waveprotocol.wave.client.editor.NodeEventHandler) $r8;

        $r10 = r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.NodeEventHandler nodeEventHandler>;

        if $r10 != $r9 goto label2;

        return;

     label2:
        $r1 = r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.NodeEventHandler nodeEventHandler>;

        interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.NodeEventHandler: void onDeactivated(org.waveprotocol.wave.client.editor.content.ContentElement)>(r0);

        r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.NodeEventHandler nodeEventHandler> = $r9;

        $r2 = r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.NodeEventHandler nodeEventHandler>;

        interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.NodeEventHandler: void onActivated(org.waveprotocol.wave.client.editor.content.ContentElement)>(r0);

        return;
    }

    public final void onAddedToParent(org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.client.editor.NodeMutationHandler $r3;
        org.waveprotocol.wave.client.editor.content.ContentElement r1, $r2;
        org.waveprotocol.wave.client.editor.content.AgentAdapter r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.AgentAdapter;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        $r3 = r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.NodeMutationHandler nodeMutationHandler>;

        $r2 = r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.content.ContentElement element>;

        interfaceinvoke $r3.<org.waveprotocol.wave.client.editor.NodeMutationHandler: void onAddedToParent(java.lang.Object,java.lang.Object)>($r2, r1);

        return;
    }

    public final void onRemovedFromParent(org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.client.editor.NodeMutationHandler $r3, $r5;
        org.waveprotocol.wave.client.editor.content.ContentElement r1, $r2;
        org.waveprotocol.wave.client.editor.content.AgentAdapter r0;
        org.waveprotocol.wave.client.editor.NodeEventHandler $r4;

        r0 := @this: org.waveprotocol.wave.client.editor.content.AgentAdapter;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        $r3 = r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.NodeMutationHandler nodeMutationHandler>;

        $r2 = r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.content.ContentElement element>;

        interfaceinvoke $r3.<org.waveprotocol.wave.client.editor.NodeMutationHandler: void onRemovedFromParent(java.lang.Object,java.lang.Object)>($r2, r1);

        if r1 != null goto label1;

        $r4 = r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.NodeEventHandler nodeEventHandler>;

        interfaceinvoke $r4.<org.waveprotocol.wave.client.editor.NodeEventHandler: void onDeactivated(org.waveprotocol.wave.client.editor.content.ContentElement)>(r0);

        $r5 = r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.NodeMutationHandler nodeMutationHandler>;

        interfaceinvoke $r5.<org.waveprotocol.wave.client.editor.NodeMutationHandler: void onDeactivated(java.lang.Object)>(r0);

        r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.content.Renderer renderer> = null;

        r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.NodeMutationHandler nodeMutationHandler> = null;

        r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.NodeEventHandler nodeEventHandler> = null;

     label1:
        return;
    }

    protected final void onRepair()
    {
        org.waveprotocol.wave.client.editor.NodeMutationHandler $r1;
        org.waveprotocol.wave.client.editor.content.AgentAdapter r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.AgentAdapter;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.NodeMutationHandler nodeMutationHandler>;

        interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.NodeMutationHandler: void onActivationStart(java.lang.Object)>(r0);

        return;
    }

    public final void onDescendantsMutated()
    {
        org.waveprotocol.wave.client.editor.NodeMutationHandler $r2;
        org.waveprotocol.wave.client.editor.content.ContentElement $r1;
        org.waveprotocol.wave.client.editor.content.AgentAdapter r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.AgentAdapter;

        $r2 = r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.NodeMutationHandler nodeMutationHandler>;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.content.ContentElement element>;

        interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.NodeMutationHandler: void onDescendantsMutated(java.lang.Object)>($r1);

        return;
    }

    public final void onEmptied()
    {
        org.waveprotocol.wave.client.editor.NodeMutationHandler $r2;
        org.waveprotocol.wave.client.editor.content.ContentElement $r1;
        org.waveprotocol.wave.client.editor.content.AgentAdapter r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.AgentAdapter;

        $r2 = r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.NodeMutationHandler nodeMutationHandler>;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.content.ContentElement element>;

        interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.NodeMutationHandler: void onEmptied(java.lang.Object)>($r1);

        return;
    }

    public final void onAttributeModified(java.lang.String, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.client.editor.NodeMutationHandler $r5;
        org.waveprotocol.wave.client.editor.content.ContentElement $r4;
        org.waveprotocol.wave.client.editor.content.AgentAdapter r0;
        java.lang.String r1, r2, r3;

        r0 := @this: org.waveprotocol.wave.client.editor.content.AgentAdapter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r5 = r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.NodeMutationHandler nodeMutationHandler>;

        $r4 = r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.content.ContentElement element>;

        interfaceinvoke $r5.<org.waveprotocol.wave.client.editor.NodeMutationHandler: void onAttributeModified(java.lang.Object,java.lang.String,java.lang.String,java.lang.String)>($r4, r1, r2, r3);

        return;
    }

    public final void onChildAdded(org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r1;
        org.waveprotocol.wave.client.editor.NodeMutationHandler $r3;
        org.waveprotocol.wave.client.editor.content.ContentElement $r2;
        org.waveprotocol.wave.client.editor.content.AgentAdapter r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.AgentAdapter;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r3 = r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.NodeMutationHandler nodeMutationHandler>;

        $r2 = r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.content.ContentElement element>;

        interfaceinvoke $r3.<org.waveprotocol.wave.client.editor.NodeMutationHandler: void onChildAdded(java.lang.Object,java.lang.Object)>($r2, r1);

        return;
    }

    public final void onChildRemoved(org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r1;
        org.waveprotocol.wave.client.editor.NodeMutationHandler $r3;
        org.waveprotocol.wave.client.editor.content.ContentElement $r2;
        org.waveprotocol.wave.client.editor.content.AgentAdapter r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.AgentAdapter;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r3 = r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.NodeMutationHandler nodeMutationHandler>;

        $r2 = r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.content.ContentElement element>;

        interfaceinvoke $r3.<org.waveprotocol.wave.client.editor.NodeMutationHandler: void onChildRemoved(java.lang.Object,java.lang.Object)>($r2, r1);

        return;
    }

    public void setLogicalParent(org.waveprotocol.wave.client.common.util.LogicalPanel)
    {
        org.waveprotocol.wave.client.common.util.LogicalPanel r3;
        org.waveprotocol.wave.client.editor.content.Renderer $r1, $r2;
        org.waveprotocol.wave.client.editor.content.AgentAdapter r0;
        boolean $z0;
        org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler $r4;

        r0 := @this: org.waveprotocol.wave.client.editor.content.AgentAdapter;

        r3 := @parameter0: org.waveprotocol.wave.client.common.util.LogicalPanel;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.content.Renderer renderer>;

        $z0 = $r1 instanceof org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler;

        if $z0 == 0 goto label1;

        $r2 = r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.content.Renderer renderer>;

        $r4 = (org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler) $r2;

        virtualinvoke $r4.<org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler: void setLogicalPanel(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.common.util.LogicalPanel)>(r0, r3);

     label1:
        return;
    }

    public volatile void onChildRemoved(java.lang.Object)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r2;
        java.lang.Object r1;
        org.waveprotocol.wave.client.editor.content.AgentAdapter r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.AgentAdapter;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.client.editor.content.ContentNode) r1;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: void onChildRemoved(org.waveprotocol.wave.client.editor.content.ContentNode)>($r2);

        return;
    }

    public volatile void onChildAdded(java.lang.Object)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r2;
        java.lang.Object r1;
        org.waveprotocol.wave.client.editor.content.AgentAdapter r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.AgentAdapter;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.client.editor.content.ContentNode) r1;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: void onChildAdded(org.waveprotocol.wave.client.editor.content.ContentNode)>($r2);

        return;
    }

    public volatile void onRemovedFromParent(java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.client.editor.content.ContentElement $r2;
        org.waveprotocol.wave.client.editor.content.AgentAdapter r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.AgentAdapter;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.client.editor.content.ContentElement) r1;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: void onRemovedFromParent(org.waveprotocol.wave.client.editor.content.ContentElement)>($r2);

        return;
    }

    public volatile void onAddedToParent(java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.client.editor.content.ContentElement $r2;
        org.waveprotocol.wave.client.editor.content.AgentAdapter r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.AgentAdapter;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.client.editor.content.ContentElement) r1;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.AgentAdapter: void onAddedToParent(org.waveprotocol.wave.client.editor.content.ContentElement)>($r2);

        return;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.client.editor.content.AgentAdapter$Css $r1, $r7, $r11;
        org.waveprotocol.wave.client.editor.content.AgentAdapter$Resources $r10;
        org.waveprotocol.wave.client.editor.content.AgentAdapter$2 $r5;
        org.waveprotocol.wave.client.editor.NodeMutationHandlerImpl $r2;
        org.waveprotocol.wave.client.editor.content.AgentAdapter$1 $r4;
        org.waveprotocol.wave.client.editor.content.AgentAdapter$3 $r6;
        java.lang.Class $r0;
        java.lang.Object $r9;
        java.lang.String $r8;
        org.waveprotocol.wave.client.editor.NodeEventHandler $r3;
        boolean $z0, $z1, $z2;

        $r0 = class "Lorg/waveprotocol/wave/client/editor/content/AgentAdapter;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        <org.waveprotocol.wave.client.editor.content.AgentAdapter: boolean $assertionsDisabled> = $z2;

        $z1 = staticinvoke <com.google.gwt.core.client.GWT: boolean isClient()>();

        if $z1 == 0 goto label3;

        $r9 = staticinvoke <com.google.gwt.core.client.GWT: java.lang.Object create(java.lang.Class)>(class "Lorg/waveprotocol/wave/client/editor/content/AgentAdapter$Resources;");

        $r10 = (org.waveprotocol.wave.client.editor.content.AgentAdapter$Resources) $r9;

        $r11 = interfaceinvoke $r10.<org.waveprotocol.wave.client.editor.content.AgentAdapter$Resources: org.waveprotocol.wave.client.editor.content.AgentAdapter$Css css()>();

        goto label4;

     label3:
        $r11 = null;

     label4:
        <org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.content.AgentAdapter$Css css> = $r11;

        $r1 = <org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.content.AgentAdapter$Css css>;

        if $r1 == null goto label5;

        $r7 = <org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.content.AgentAdapter$Css css>;

        $r8 = interfaceinvoke $r7.<org.waveprotocol.wave.client.editor.content.AgentAdapter$Css: java.lang.String getText()>();

        staticinvoke <com.google.gwt.dom.client.StyleInjector: void inject(java.lang.String,boolean)>($r8, 1);

     label5:
        $r2 = new org.waveprotocol.wave.client.editor.NodeMutationHandlerImpl;

        specialinvoke $r2.<org.waveprotocol.wave.client.editor.NodeMutationHandlerImpl: void <init>()>();

        <org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.NodeMutationHandlerImpl defaultMutationHandler> = $r2;

        $r3 = staticinvoke <org.waveprotocol.wave.client.editor.NodeEventHandlerImpl: org.waveprotocol.wave.client.editor.NodeEventHandler get()>();

        <org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.NodeEventHandler defaultEventHandler> = $r3;

        $r4 = new org.waveprotocol.wave.client.editor.content.AgentAdapter$1;

        specialinvoke $r4.<org.waveprotocol.wave.client.editor.content.AgentAdapter$1: void <init>()>();

        <org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.content.Renderer defaultRenderer> = $r4;

        $r5 = new org.waveprotocol.wave.client.editor.content.AgentAdapter$2;

        specialinvoke $r5.<org.waveprotocol.wave.client.editor.content.AgentAdapter$2: void <init>()>();

        <org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.content.Renderer noRenderer> = $r5;

        $r6 = new org.waveprotocol.wave.client.editor.content.AgentAdapter$3;

        specialinvoke $r6.<org.waveprotocol.wave.client.editor.content.AgentAdapter$3: void <init>()>();

        <org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.content.Renderer emptyRenderer> = $r6;

        return;
    }
}
