final class org.apache.jena.riot.process.normalize.NormalizeValue$3 extends java.lang.Object implements org.apache.jena.riot.process.normalize.DatatypeHandler
{

    void <init>()
    {
        org.apache.jena.riot.process.normalize.NormalizeValue$3 r0;

        r0 := @this: org.apache.jena.riot.process.normalize.NormalizeValue$3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public com.hp.hpl.jena.graph.Node handle(com.hp.hpl.jena.graph.Node, java.lang.String, com.hp.hpl.jena.datatypes.RDFDatatype)
    {
        com.hp.hpl.jena.graph.Node $r5, r6;
        org.apache.jena.riot.process.normalize.NormalizeValue$3 r8;
        int $i0, $i1, $i2;
        java.math.BigInteger $r7;
        java.lang.String r0, r9, r10;
        boolean $z0, $z1, $z2;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r3, $r4;
        com.hp.hpl.jena.datatypes.RDFDatatype r2;
        char[] $r1;

        r8 := @this: org.apache.jena.riot.process.normalize.NormalizeValue$3;

        r6 := @parameter0: com.hp.hpl.jena.graph.Node;

        r0 := @parameter1: java.lang.String;

        r2 := @parameter2: com.hp.hpl.jena.datatypes.RDFDatatype;

        $r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();

        $i0 = lengthof $r1;

        if $i0 != 0 goto label1;

        return r6;

     label1:
        r9 = r0;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("+");

        if $z0 == 0 goto label2;

        r9 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(1);

     label2:
        $i1 = virtualinvoke r9.<java.lang.String: int length()>();

        if $i1 <= 8 goto label3;

        $r7 = new java.math.BigInteger;

        specialinvoke $r7.<java.math.BigInteger: void <init>(java.lang.String)>(r0);

        r10 = virtualinvoke $r7.<java.math.BigInteger: java.lang.String toString()>();

        goto label4;

     label3:
        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r9);

        r10 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i2);

     label4:
        $r3 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDinteger>;

        $z1 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label5;

        $z2 = virtualinvoke r10.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z2 == 0 goto label5;

        return r6;

     label5:
        $r4 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDinteger>;

        $r5 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>(r10, null, $r4);

        return $r5;
    }
}
