public class org.waveprotocol.wave.client.editor.testing.FakeUser extends java.lang.Object implements org.waveprotocol.wave.client.editor.extract.TypingExtractor$SelectionSource
{
    private final org.waveprotocol.wave.client.editor.impl.HtmlView htmlView;
    private org.waveprotocol.wave.model.document.util.Point caret;

    public void <init>(org.waveprotocol.wave.client.editor.impl.HtmlView)
    {
        org.waveprotocol.wave.client.editor.testing.FakeUser r0;
        org.waveprotocol.wave.client.editor.impl.HtmlView r1;

        r0 := @this: org.waveprotocol.wave.client.editor.testing.FakeUser;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.impl.HtmlView;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.testing.FakeUser: org.waveprotocol.wave.client.editor.impl.HtmlView htmlView> = r1;

        return;
    }

    public transient void run(org.waveprotocol.wave.client.editor.extract.TypingExtractor, java.lang.Object[]) throws org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing, org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlInserted
    {
        java.lang.Integer $r18;
        com.google.gwt.dom.client.Text $r14, $r24, $r37;
        org.waveprotocol.wave.model.document.util.Point$Tx $r29;
        int[] $r10;
        boolean $z0;
        org.waveprotocol.wave.client.editor.testing.FakeUser r4;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor r15;
        java.lang.Object[] r0, $r2, r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        java.lang.String r21, $r31, $r33;
        org.waveprotocol.wave.model.document.util.Point $r5, $r16, $r22, $r35;
        com.google.gwt.core.client.JavaScriptObject $r8, $r13;
        org.waveprotocol.wave.client.editor.testing.FakeUser$Action $r19, $r36;
        java.lang.Object r1, $r6, $r9, $r11, $r17, $r20, $r25, $r27, $r30, $r32, $r34;
        com.google.gwt.dom.client.Node $r7, $r12, $r26, $r28, $r38;
        com.google.gwt.dom.client.Document $r23;

        r4 := @this: org.waveprotocol.wave.client.editor.testing.FakeUser;

        r15 := @parameter0: org.waveprotocol.wave.client.editor.extract.TypingExtractor;

        r0 := @parameter1: java.lang.Object[];

        i0 = lengthof r0;

        i9 = 0;

     label01:
        if i9 >= i0 goto label11;

        r1 = r0[i9];

        $r2 = (java.lang.Object[]) r1;

        r3 = (java.lang.Object[]) $r2;

        $r5 = virtualinvoke r4.<org.waveprotocol.wave.client.editor.testing.FakeUser: org.waveprotocol.wave.model.document.util.Point getSelectionStart()>();

        if $r5 != null goto label02;

        $r37 = null;

        goto label03;

     label02:
        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r7 = (com.google.gwt.dom.client.Node) $r6;

        $r8 = virtualinvoke $r7.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        $r37 = (com.google.gwt.dom.client.Text) $r8;

     label03:
        $r9 = r3[0];

        $r36 = (org.waveprotocol.wave.client.editor.testing.FakeUser$Action) $r9;

        $r10 = <org.waveprotocol.wave.client.editor.testing.FakeUser$1: int[] $SwitchMap$org$waveprotocol$wave$client$editor$testing$FakeUser$Action>;

        $i1 = virtualinvoke $r36.<org.waveprotocol.wave.client.editor.testing.FakeUser$Action: int ordinal()>();

        $i2 = $r10[$i1];

        tableswitch($i2)
        {
            case 1: goto label04;
            case 2: goto label05;
            case 3: goto label07;
            case 4: goto label07;
            case 5: goto label09;
            default: goto label10;
        };

     label04:
        $r34 = r3[1];

        $r35 = (org.waveprotocol.wave.model.document.util.Point) $r34;

        specialinvoke r4.<org.waveprotocol.wave.client.editor.testing.FakeUser: void setCaret(org.waveprotocol.wave.model.document.util.Point)>($r35);

        goto label10;

     label05:
        $r20 = r3[1];

        r21 = (java.lang.String) $r20;

        $r22 = virtualinvoke r4.<org.waveprotocol.wave.client.editor.testing.FakeUser: org.waveprotocol.wave.model.document.util.Point getSelectionStart()>();

        virtualinvoke r15.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: void somethingHappened(org.waveprotocol.wave.model.document.util.Point)>($r22);

        $z0 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z0 == 0 goto label06;

        $i7 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.util.Point: int getTextOffset()>();

        $r30 = r3[1];

        $r31 = (java.lang.String) $r30;

        virtualinvoke $r37.<com.google.gwt.dom.client.Text: void insertData(int,java.lang.String)>($i7, $r31);

        $r32 = r3[1];

        $r33 = (java.lang.String) $r32;

        $i8 = virtualinvoke $r33.<java.lang.String: int length()>();

        virtualinvoke r4.<org.waveprotocol.wave.client.editor.testing.FakeUser: void moveCaret(int)>($i8);

        goto label10;

     label06:
        $r23 = staticinvoke <com.google.gwt.dom.client.Document: com.google.gwt.dom.client.Document get()>();

        $r24 = virtualinvoke $r23.<com.google.gwt.dom.client.Document: com.google.gwt.dom.client.Text createTextNode(java.lang.String)>(r21);

        $r25 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r26 = (com.google.gwt.dom.client.Node) $r25;

        $r27 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

        $r28 = (com.google.gwt.dom.client.Node) $r27;

        $r38 = (com.google.gwt.dom.client.Node) $r24;

        virtualinvoke $r26.<com.google.gwt.dom.client.Node: com.google.gwt.dom.client.Node insertBefore(com.google.gwt.dom.client.Node,com.google.gwt.dom.client.Node)>($r38, $r28);

        $i6 = virtualinvoke r21.<java.lang.String: int length()>();

        $r29 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$Tx inText(java.lang.Object,int)>($r24, $i6);

        specialinvoke r4.<org.waveprotocol.wave.client.editor.testing.FakeUser: void setCaret(org.waveprotocol.wave.model.document.util.Point)>($r29);

        goto label10;

     label07:
        $r16 = virtualinvoke r4.<org.waveprotocol.wave.client.editor.testing.FakeUser: org.waveprotocol.wave.model.document.util.Point getSelectionStart()>();

        virtualinvoke r15.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: void somethingHappened(org.waveprotocol.wave.model.document.util.Point)>($r16);

        $r17 = r3[1];

        $r18 = (java.lang.Integer) $r17;

        $i4 = virtualinvoke $r18.<java.lang.Integer: int intValue()>();

        $r19 = <org.waveprotocol.wave.client.editor.testing.FakeUser$Action: org.waveprotocol.wave.client.editor.testing.FakeUser$Action BACKSPACE>;

        if $r36 != $r19 goto label08;

        $i5 = neg $i4;

        virtualinvoke r4.<org.waveprotocol.wave.client.editor.testing.FakeUser: void moveCaret(int)>($i5);

     label08:
        specialinvoke r4.<org.waveprotocol.wave.client.editor.testing.FakeUser: void deleteText(int)>($i4);

        goto label10;

     label09:
        $r11 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r12 = (com.google.gwt.dom.client.Node) $r11;

        $r13 = virtualinvoke $r12.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        $r14 = (com.google.gwt.dom.client.Text) $r13;

        $i3 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.util.Point: int getTextOffset()>();

        virtualinvoke $r14.<com.google.gwt.dom.client.Text: com.google.gwt.dom.client.Text splitText(int)>($i3);

        virtualinvoke r4.<org.waveprotocol.wave.client.editor.testing.FakeUser: void moveCaret(int)>(0);

     label10:
        i9 = i9 + 1;

        goto label01;

     label11:
        return;
    }

    private void deleteText(int)
    {
        com.google.gwt.dom.client.Text $r17, r18;
        int $i0, i1, $i2, i3, i4, i5;
        java.lang.String $r6, $r8, $r10, $r12;
        org.waveprotocol.wave.model.document.util.Point $r1;
        boolean $z0;
        com.google.gwt.core.client.JavaScriptObject $r4, $r16;
        java.lang.RuntimeException $r19;
        org.waveprotocol.wave.client.editor.impl.HtmlView $r13;
        org.waveprotocol.wave.client.editor.testing.FakeUser r0;
        java.lang.Object $r2, $r14;
        java.lang.StringBuilder $r9, $r11, $r20;
        com.google.gwt.dom.client.Node $r3, $r15, $r21;

        r0 := @this: org.waveprotocol.wave.client.editor.testing.FakeUser;

        i3 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.testing.FakeUser: org.waveprotocol.wave.model.document.util.Point getSelectionStart()>();

        if $r1 != null goto label1;

        $r17 = null;

        goto label2;

     label1:
        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r3 = (com.google.gwt.dom.client.Node) $r2;

        $r4 = virtualinvoke $r3.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        $r17 = (com.google.gwt.dom.client.Text) $r4;

     label2:
        r18 = $r17;

        i4 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.util.Point: int getTextOffset()>();

     label3:
        if i3 <= 0 goto label8;

        if r18 == null goto label4;

        $r21 = (com.google.gwt.dom.client.Node) r18;

        $z0 = staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: boolean isTextNode(com.google.gwt.dom.client.Node)>($r21);

        if $z0 != 0 goto label5;

     label4:
        $r19 = new java.lang.RuntimeException;

        specialinvoke $r19.<java.lang.RuntimeException: void <init>(java.lang.String)>("Action ran off end of text node");

        throw $r19;

     label5:
        $r6 = virtualinvoke r18.<com.google.gwt.dom.client.Text: java.lang.String getData()>();

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        i1 = $i0 - i4;

        if i1 < i3 goto label6;

        i5 = i3;

        goto label7;

     label6:
        i5 = i1;

     label7:
        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int,int)>(0, i4);

        $r9 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $i2 = i4 + i5;

        $r10 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int)>($i2);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r18.<com.google.gwt.dom.client.Text: void setData(java.lang.String)>($r12);

        i3 = i3 - i5;

        i4 = 0;

        $r13 = r0.<org.waveprotocol.wave.client.editor.testing.FakeUser: org.waveprotocol.wave.client.editor.impl.HtmlView htmlView>;

        $r14 = interfaceinvoke $r13.<org.waveprotocol.wave.client.editor.impl.HtmlView: java.lang.Object getNextSibling(java.lang.Object)>(r18);

        $r15 = (com.google.gwt.dom.client.Node) $r14;

        $r16 = virtualinvoke $r15.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        r18 = (com.google.gwt.dom.client.Text) $r16;

        goto label3;

     label8:
        virtualinvoke r0.<org.waveprotocol.wave.client.editor.testing.FakeUser: void moveCaret(int)>(0);

        return;
    }

    public void moveCaret(int)
    {
        org.waveprotocol.wave.model.document.util.Point$Tx $r2;
        com.google.gwt.dom.client.Text $r21, r27;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.waveprotocol.wave.model.document.util.Point$El $r14;
        org.waveprotocol.wave.client.editor.testing.FakeUser r0;
        int i0, $i1, $i2, $i3, $i4, $i5, i6;
        org.waveprotocol.wave.model.document.util.Point $r1, r22;
        com.google.gwt.core.client.JavaScriptObject $r6, $r11, $r20, $r26;
        java.lang.RuntimeException $r28, $r29, $r30;
        org.waveprotocol.wave.client.editor.impl.HtmlView $r3, $r8, $r13;
        java.lang.Object $r4, $r9, $r15, $r16, $r19, $r24;
        com.google.gwt.dom.client.Node $r5, $r10, $r17, r23, $r25, $r31, $r32;

        r0 := @this: org.waveprotocol.wave.client.editor.testing.FakeUser;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.testing.FakeUser: org.waveprotocol.wave.model.document.util.Point getSelectionStart()>();

        r22 = $r1;

        $z0 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z0 != 0 goto label3;

        $r13 = r0.<org.waveprotocol.wave.client.editor.testing.FakeUser: org.waveprotocol.wave.client.editor.impl.HtmlView htmlView>;

        $r14 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El asElementPoint()>();

        $r15 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: java.lang.Object nodeBefore(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.Point$El)>($r13, $r14);

        r23 = (com.google.gwt.dom.client.Node) $r15;

        $z3 = staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: boolean isTextNode(com.google.gwt.dom.client.Node)>(r23);

        if $z3 == 0 goto label1;

        $r20 = virtualinvoke r23.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        $r21 = (com.google.gwt.dom.client.Text) $r20;

        $i4 = virtualinvoke $r21.<com.google.gwt.dom.client.Text: int getLength()>();

        r22 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$Tx inText(java.lang.Object,int)>(r23, $i4);

        goto label3;

     label1:
        $r16 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

        $r17 = (com.google.gwt.dom.client.Node) $r16;

        $z4 = staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: boolean isTextNode(com.google.gwt.dom.client.Node)>($r17);

        if $z4 == 0 goto label2;

        $r19 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

        r22 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$Tx inText(java.lang.Object,int)>($r19, 0);

        goto label3;

     label2:
        $r28 = new java.lang.RuntimeException;

        specialinvoke $r28.<java.lang.RuntimeException: void <init>(java.lang.String)>("Unimplemented/Invalid");

        throw $r28;

     label3:
        $r24 = virtualinvoke r22.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r25 = (com.google.gwt.dom.client.Node) $r24;

        $r26 = virtualinvoke $r25.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        r27 = (com.google.gwt.dom.client.Text) $r26;

        $i5 = virtualinvoke r22.<org.waveprotocol.wave.model.document.util.Point: int getTextOffset()>();

        i6 = $i5 + i0;

     label4:
        if i6 >= 0 goto label7;

        $r8 = r0.<org.waveprotocol.wave.client.editor.testing.FakeUser: org.waveprotocol.wave.client.editor.impl.HtmlView htmlView>;

        $r9 = interfaceinvoke $r8.<org.waveprotocol.wave.client.editor.impl.HtmlView: java.lang.Object getPreviousSibling(java.lang.Object)>(r27);

        $r10 = (com.google.gwt.dom.client.Node) $r9;

        $r11 = virtualinvoke $r10.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        r27 = (com.google.gwt.dom.client.Text) $r11;

        if r27 == null goto label5;

        $r31 = (com.google.gwt.dom.client.Node) r27;

        $z2 = staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: boolean isTextNode(com.google.gwt.dom.client.Node)>($r31);

        if $z2 != 0 goto label6;

     label5:
        $r29 = new java.lang.RuntimeException;

        specialinvoke $r29.<java.lang.RuntimeException: void <init>(java.lang.String)>("Action ran off end of text node");

        throw $r29;

     label6:
        $i3 = virtualinvoke r27.<com.google.gwt.dom.client.Text: int getLength()>();

        i6 = i6 + $i3;

        goto label4;

     label7:
        $i1 = virtualinvoke r27.<com.google.gwt.dom.client.Text: int getLength()>();

        if i6 <= $i1 goto label9;

        $i2 = virtualinvoke r27.<com.google.gwt.dom.client.Text: int getLength()>();

        i6 = i6 - $i2;

        $r3 = r0.<org.waveprotocol.wave.client.editor.testing.FakeUser: org.waveprotocol.wave.client.editor.impl.HtmlView htmlView>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.client.editor.impl.HtmlView: java.lang.Object getPreviousSibling(java.lang.Object)>(r27);

        $r5 = (com.google.gwt.dom.client.Node) $r4;

        $r6 = virtualinvoke $r5.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        r27 = (com.google.gwt.dom.client.Text) $r6;

        if r27 == null goto label8;

        $r32 = (com.google.gwt.dom.client.Node) r27;

        $z1 = staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: boolean isTextNode(com.google.gwt.dom.client.Node)>($r32);

        if $z1 != 0 goto label7;

     label8:
        $r30 = new java.lang.RuntimeException;

        specialinvoke $r30.<java.lang.RuntimeException: void <init>(java.lang.String)>("Action ran off end of text node");

        throw $r30;

     label9:
        $r2 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$Tx inText(java.lang.Object,int)>(r27, i6);

        specialinvoke r0.<org.waveprotocol.wave.client.editor.testing.FakeUser: void setCaret(org.waveprotocol.wave.model.document.util.Point)>($r2);

        return;
    }

    private void setCaret(org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.client.editor.testing.FakeUser r0;
        org.waveprotocol.wave.model.document.util.Point r1;

        r0 := @this: org.waveprotocol.wave.client.editor.testing.FakeUser;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        r0.<org.waveprotocol.wave.client.editor.testing.FakeUser: org.waveprotocol.wave.model.document.util.Point caret> = r1;

        return;
    }

    public static java.lang.Object move(org.waveprotocol.wave.model.document.util.Point)
    {
        java.lang.Object[] $r0;
        org.waveprotocol.wave.client.editor.testing.FakeUser$Action $r1;
        org.waveprotocol.wave.model.document.util.Point r2;

        r2 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        $r0 = newarray (java.lang.Object)[3];

        $r1 = <org.waveprotocol.wave.client.editor.testing.FakeUser$Action: org.waveprotocol.wave.client.editor.testing.FakeUser$Action MOVE>;

        $r0[0] = $r1;

        $r0[1] = r2;

        $r0[2] = r2;

        return $r0;
    }

    public static java.lang.Object type(java.lang.String)
    {
        java.lang.Object[] $r0;
        org.waveprotocol.wave.client.editor.testing.FakeUser$Action $r1;
        java.lang.String r2;

        r2 := @parameter0: java.lang.String;

        $r0 = newarray (java.lang.Object)[2];

        $r1 = <org.waveprotocol.wave.client.editor.testing.FakeUser$Action: org.waveprotocol.wave.client.editor.testing.FakeUser$Action TYPE>;

        $r0[0] = $r1;

        $r0[1] = r2;

        return $r0;
    }

    public static java.lang.Object del()
    {
        java.lang.Object $r0;

        $r0 = staticinvoke <org.waveprotocol.wave.client.editor.testing.FakeUser: java.lang.Object del(int)>(1);

        return $r0;
    }

    public static java.lang.Object del(int)
    {
        java.lang.Object[] $r0;
        org.waveprotocol.wave.client.editor.testing.FakeUser$Action $r1;
        int i0;
        java.lang.Integer $r2;

        i0 := @parameter0: int;

        $r0 = newarray (java.lang.Object)[2];

        $r1 = <org.waveprotocol.wave.client.editor.testing.FakeUser$Action: org.waveprotocol.wave.client.editor.testing.FakeUser$Action DELETE>;

        $r0[0] = $r1;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r0[1] = $r2;

        return $r0;
    }

    public static java.lang.Object bksp()
    {
        java.lang.Object $r0;

        $r0 = staticinvoke <org.waveprotocol.wave.client.editor.testing.FakeUser: java.lang.Object bksp(int)>(1);

        return $r0;
    }

    public static java.lang.Object bksp(int)
    {
        java.lang.Object[] $r0;
        org.waveprotocol.wave.client.editor.testing.FakeUser$Action $r1;
        int i0;
        java.lang.Integer $r2;

        i0 := @parameter0: int;

        $r0 = newarray (java.lang.Object)[2];

        $r1 = <org.waveprotocol.wave.client.editor.testing.FakeUser$Action: org.waveprotocol.wave.client.editor.testing.FakeUser$Action BACKSPACE>;

        $r0[0] = $r1;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r0[1] = $r2;

        return $r0;
    }

    public static java.lang.Object split()
    {
        java.lang.Object[] $r0;
        org.waveprotocol.wave.client.editor.testing.FakeUser$Action $r1;

        $r0 = newarray (java.lang.Object)[1];

        $r1 = <org.waveprotocol.wave.client.editor.testing.FakeUser$Action: org.waveprotocol.wave.client.editor.testing.FakeUser$Action SPLIT>;

        $r0[0] = $r1;

        return $r0;
    }

    public org.waveprotocol.wave.model.document.util.Point getSelectionEnd()
    {
        org.waveprotocol.wave.client.editor.testing.FakeUser r0;
        org.waveprotocol.wave.model.document.util.Point $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.testing.FakeUser;

        $r1 = r0.<org.waveprotocol.wave.client.editor.testing.FakeUser: org.waveprotocol.wave.model.document.util.Point caret>;

        return $r1;
    }

    public org.waveprotocol.wave.model.document.util.Point getSelectionStart()
    {
        org.waveprotocol.wave.client.editor.testing.FakeUser r0;
        org.waveprotocol.wave.model.document.util.Point $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.testing.FakeUser;

        $r1 = r0.<org.waveprotocol.wave.client.editor.testing.FakeUser: org.waveprotocol.wave.model.document.util.Point caret>;

        return $r1;
    }
}
