abstract class com.mycila.inject.internal.guava.collect.Multimaps$Values extends java.util.AbstractCollection
{

    void <init>()
    {
        com.mycila.inject.internal.guava.collect.Multimaps$Values r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$Values;

        specialinvoke r0.<java.util.AbstractCollection: void <init>()>();

        return;
    }

    abstract com.mycila.inject.internal.guava.collect.Multimap multimap();

    public java.util.Iterator iterator()
    {
        com.mycila.inject.internal.guava.collect.Multimaps$Values r0;
        java.util.Iterator $r3;
        java.util.Collection $r2;
        com.mycila.inject.internal.guava.collect.Multimaps$Values$1 $r4;
        com.mycila.inject.internal.guava.collect.Multimap $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$Values;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Multimaps$Values: com.mycila.inject.internal.guava.collect.Multimap multimap()>();

        $r2 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.collect.Multimap: java.util.Collection entries()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

        $r4 = new com.mycila.inject.internal.guava.collect.Multimaps$Values$1;

        specialinvoke $r4.<com.mycila.inject.internal.guava.collect.Multimaps$Values$1: void <init>(com.mycila.inject.internal.guava.collect.Multimaps$Values,java.util.Iterator)>(r0, $r3);

        return $r4;
    }

    public int size()
    {
        int $i0;
        com.mycila.inject.internal.guava.collect.Multimap $r1;
        com.mycila.inject.internal.guava.collect.Multimaps$Values r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$Values;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Multimaps$Values: com.mycila.inject.internal.guava.collect.Multimap multimap()>();

        $i0 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.collect.Multimap: int size()>();

        return $i0;
    }

    public boolean contains(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.Multimaps$Values r0;
        com.mycila.inject.internal.guava.collect.Multimap $r1;
        java.lang.Object r2;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$Values;

        r2 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Multimaps$Values: com.mycila.inject.internal.guava.collect.Multimap multimap()>();

        $z0 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.collect.Multimap: boolean containsValue(java.lang.Object)>(r2);

        return $z0;
    }

    public void clear()
    {
        com.mycila.inject.internal.guava.collect.Multimap $r1;
        com.mycila.inject.internal.guava.collect.Multimaps$Values r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$Values;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Multimaps$Values: com.mycila.inject.internal.guava.collect.Multimap multimap()>();

        interfaceinvoke $r1.<com.mycila.inject.internal.guava.collect.Multimap: void clear()>();

        return;
    }
}
