class org.wiztools.restclient.util.XmlSslUtil extends java.lang.Object
{

    private void <init>()
    {
        org.wiztools.restclient.util.XmlSslUtil r0;

        r0 := @this: org.wiztools.restclient.util.XmlSslUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static nu.xom.Element getSslReq(org.wiztools.restclient.bean.SSLReq)
    {
        org.wiztools.restclient.bean.SSLReq r1;
        org.wiztools.restclient.bean.SSLHostnameVerifier $r3;
        nu.xom.Element $r0, $r2, $r7, $r14, $r21;
        java.lang.String $r4, $r5, $r6, $r9, $r11, $r13, $r16, $r18, $r20;
        boolean $z0, $z1, $z2;
        nu.xom.Attribute $r8, $r10, $r15, $r17;
        char[] $r12, $r19;

        r1 := @parameter0: org.wiztools.restclient.bean.SSLReq;

        $r0 = new nu.xom.Element;

        specialinvoke $r0.<nu.xom.Element: void <init>(java.lang.String)>("ssl");

        $z0 = interfaceinvoke r1.<org.wiztools.restclient.bean.SSLReq: boolean isTrustSelfSignedCert()>();

        if $z0 == 0 goto label1;

        $r21 = new nu.xom.Element;

        specialinvoke $r21.<nu.xom.Element: void <init>(java.lang.String)>("trust-self-signed-cert");

        virtualinvoke $r0.<nu.xom.Element: void appendChild(nu.xom.Node)>($r21);

     label1:
        $r2 = new nu.xom.Element;

        specialinvoke $r2.<nu.xom.Element: void <init>(java.lang.String)>("hostname-verifier");

        $r3 = interfaceinvoke r1.<org.wiztools.restclient.bean.SSLReq: org.wiztools.restclient.bean.SSLHostnameVerifier getHostNameVerifier()>();

        $r4 = virtualinvoke $r3.<org.wiztools.restclient.bean.SSLHostnameVerifier: java.lang.String name()>();

        virtualinvoke $r2.<nu.xom.Element: void appendChild(java.lang.String)>($r4);

        virtualinvoke $r0.<nu.xom.Element: void appendChild(nu.xom.Node)>($r2);

        $r5 = interfaceinvoke r1.<org.wiztools.restclient.bean.SSLReq: java.lang.String getKeyStore()>();

        $z1 = staticinvoke <org.wiztools.commons.StringUtil: boolean isNotEmpty(java.lang.String)>($r5);

        if $z1 == 0 goto label2;

        $r14 = new nu.xom.Element;

        specialinvoke $r14.<nu.xom.Element: void <init>(java.lang.String)>("keystore");

        $r15 = new nu.xom.Attribute;

        $r16 = interfaceinvoke r1.<org.wiztools.restclient.bean.SSLReq: java.lang.String getKeyStore()>();

        specialinvoke $r15.<nu.xom.Attribute: void <init>(java.lang.String,java.lang.String)>("file", $r16);

        virtualinvoke $r14.<nu.xom.Element: void addAttribute(nu.xom.Attribute)>($r15);

        $r17 = new nu.xom.Attribute;

        $r18 = new java.lang.String;

        $r19 = interfaceinvoke r1.<org.wiztools.restclient.bean.SSLReq: char[] getKeyStorePassword()>();

        specialinvoke $r18.<java.lang.String: void <init>(char[])>($r19);

        $r20 = staticinvoke <org.wiztools.restclient.util.Util: java.lang.String base64encode(java.lang.String)>($r18);

        specialinvoke $r17.<nu.xom.Attribute: void <init>(java.lang.String,java.lang.String)>("password", $r20);

        virtualinvoke $r14.<nu.xom.Element: void addAttribute(nu.xom.Attribute)>($r17);

        virtualinvoke $r0.<nu.xom.Element: void appendChild(nu.xom.Node)>($r14);

     label2:
        $r6 = interfaceinvoke r1.<org.wiztools.restclient.bean.SSLReq: java.lang.String getTrustStore()>();

        $z2 = staticinvoke <org.wiztools.commons.StringUtil: boolean isNotEmpty(java.lang.String)>($r6);

        if $z2 == 0 goto label3;

        $r7 = new nu.xom.Element;

        specialinvoke $r7.<nu.xom.Element: void <init>(java.lang.String)>("truststore");

        $r8 = new nu.xom.Attribute;

        $r9 = interfaceinvoke r1.<org.wiztools.restclient.bean.SSLReq: java.lang.String getTrustStore()>();

        specialinvoke $r8.<nu.xom.Attribute: void <init>(java.lang.String,java.lang.String)>("file", $r9);

        virtualinvoke $r7.<nu.xom.Element: void addAttribute(nu.xom.Attribute)>($r8);

        $r10 = new nu.xom.Attribute;

        $r11 = new java.lang.String;

        $r12 = interfaceinvoke r1.<org.wiztools.restclient.bean.SSLReq: char[] getTrustStorePassword()>();

        specialinvoke $r11.<java.lang.String: void <init>(char[])>($r12);

        $r13 = staticinvoke <org.wiztools.restclient.util.Util: java.lang.String base64encode(java.lang.String)>($r11);

        specialinvoke $r10.<nu.xom.Attribute: void <init>(java.lang.String,java.lang.String)>("password", $r13);

        virtualinvoke $r7.<nu.xom.Element: void addAttribute(nu.xom.Attribute)>($r10);

        virtualinvoke $r0.<nu.xom.Element: void appendChild(nu.xom.Node)>($r7);

     label3:
        return $r0;
    }

    static org.wiztools.restclient.bean.SSLReq getSslReq(nu.xom.Element)
    {
        org.wiztools.restclient.bean.SSLHostnameVerifier $r18;
        nu.xom.Element r1, $r3;
        int $i0, i1;
        java.lang.String $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r13, $r14, $r15, $r17;
        boolean $z0, $z1, $z2, $z3;
        char[] $r12, $r16;
        org.wiztools.restclient.bean.SSLReqBean $r0;
        nu.xom.Elements $r2;

        r1 := @parameter0: nu.xom.Element;

        $r0 = new org.wiztools.restclient.bean.SSLReqBean;

        specialinvoke $r0.<org.wiztools.restclient.bean.SSLReqBean: void <init>()>();

        $r2 = virtualinvoke r1.<nu.xom.Element: nu.xom.Elements getChildElements()>();

        i1 = 0;

     label1:
        $i0 = virtualinvoke $r2.<nu.xom.Elements: int size()>();

        if i1 >= $i0 goto label6;

        $r3 = virtualinvoke $r2.<nu.xom.Elements: nu.xom.Element get(int)>(i1);

        $r4 = virtualinvoke $r3.<nu.xom.Element: java.lang.String getLocalName()>();

        $r5 = "trust-self-signed-cert";

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        virtualinvoke $r0.<org.wiztools.restclient.bean.SSLReqBean: void setTrustSelfSignedCert(boolean)>(1);

        goto label5;

     label2:
        $r6 = "hostname-verifier";

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label3;

        $r17 = virtualinvoke $r3.<nu.xom.Element: java.lang.String getValue()>();

        $r18 = staticinvoke <org.wiztools.restclient.bean.SSLHostnameVerifier: org.wiztools.restclient.bean.SSLHostnameVerifier valueOf(java.lang.String)>($r17);

        virtualinvoke $r0.<org.wiztools.restclient.bean.SSLReqBean: void setHostNameVerifier(org.wiztools.restclient.bean.SSLHostnameVerifier)>($r18);

        goto label5;

     label3:
        $r7 = "keystore";

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z2 == 0 goto label4;

        $r13 = virtualinvoke $r3.<nu.xom.Element: java.lang.String getAttributeValue(java.lang.String)>("file");

        virtualinvoke $r0.<org.wiztools.restclient.bean.SSLReqBean: void setKeyStore(java.lang.String)>($r13);

        $r14 = virtualinvoke $r3.<nu.xom.Element: java.lang.String getAttributeValue(java.lang.String)>("password");

        $r15 = staticinvoke <org.wiztools.restclient.util.Util: java.lang.String base64decode(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.String: char[] toCharArray()>();

        virtualinvoke $r0.<org.wiztools.restclient.bean.SSLReqBean: void setKeyStorePassword(char[])>($r16);

        goto label5;

     label4:
        $r8 = "truststore";

        $z3 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z3 == 0 goto label5;

        $r9 = virtualinvoke $r3.<nu.xom.Element: java.lang.String getAttributeValue(java.lang.String)>("file");

        virtualinvoke $r0.<org.wiztools.restclient.bean.SSLReqBean: void setTrustStore(java.lang.String)>($r9);

        $r10 = virtualinvoke $r3.<nu.xom.Element: java.lang.String getAttributeValue(java.lang.String)>("password");

        $r11 = staticinvoke <org.wiztools.restclient.util.Util: java.lang.String base64decode(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.String: char[] toCharArray()>();

        virtualinvoke $r0.<org.wiztools.restclient.bean.SSLReqBean: void setTrustStorePassword(char[])>($r12);

     label5:
        i1 = i1 + 1;

        goto label1;

     label6:
        return $r0;
    }
}
