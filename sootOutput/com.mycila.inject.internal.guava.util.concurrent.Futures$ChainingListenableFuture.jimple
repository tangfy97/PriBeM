class com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture extends com.mycila.inject.internal.guava.util.concurrent.AbstractFuture implements java.lang.Runnable
{
    private com.mycila.inject.internal.guava.base.Function function;
    private com.mycila.inject.internal.guava.util.concurrent.ListenableFuture inputFuture;
    private volatile com.mycila.inject.internal.guava.util.concurrent.ListenableFuture outputFuture;
    private final java.util.concurrent.BlockingQueue mayInterruptIfRunningChannel;
    private final java.util.concurrent.CountDownLatch outputCreated;

    private void <init>(com.mycila.inject.internal.guava.base.Function, com.mycila.inject.internal.guava.util.concurrent.ListenableFuture)
    {
        com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture r0;
        java.util.concurrent.LinkedBlockingQueue $r1;
        java.util.concurrent.CountDownLatch $r2;
        com.mycila.inject.internal.guava.util.concurrent.ListenableFuture r6, $r8;
        java.lang.Object $r4, $r7;
        com.mycila.inject.internal.guava.base.Function r3, $r5;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture;

        r3 := @parameter0: com.mycila.inject.internal.guava.base.Function;

        r6 := @parameter1: com.mycila.inject.internal.guava.util.concurrent.ListenableFuture;

        specialinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.AbstractFuture: void <init>()>();

        $r1 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke $r1.<java.util.concurrent.LinkedBlockingQueue: void <init>(int)>(1);

        r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: java.util.concurrent.BlockingQueue mayInterruptIfRunningChannel> = $r1;

        $r2 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r2.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: java.util.concurrent.CountDownLatch outputCreated> = $r2;

        $r4 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r3);

        $r5 = (com.mycila.inject.internal.guava.base.Function) $r4;

        r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: com.mycila.inject.internal.guava.base.Function function> = $r5;

        $r7 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r6);

        $r8 = (com.mycila.inject.internal.guava.util.concurrent.ListenableFuture) $r7;

        r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: com.mycila.inject.internal.guava.util.concurrent.ListenableFuture inputFuture> = $r8;

        return;
    }

    public java.lang.Object get() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException
    {
        com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture r0;
        com.mycila.inject.internal.guava.util.concurrent.ListenableFuture r1, $r3;
        java.util.concurrent.CountDownLatch $r2;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture;

        $z0 = virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: boolean isDone()>();

        if $z0 != 0 goto label2;

        r1 = r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: com.mycila.inject.internal.guava.util.concurrent.ListenableFuture inputFuture>;

        if r1 == null goto label1;

        interfaceinvoke r1.<com.mycila.inject.internal.guava.util.concurrent.ListenableFuture: java.lang.Object get()>();

     label1:
        $r2 = r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: java.util.concurrent.CountDownLatch outputCreated>;

        virtualinvoke $r2.<java.util.concurrent.CountDownLatch: void await()>();

        $r3 = r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: com.mycila.inject.internal.guava.util.concurrent.ListenableFuture outputFuture>;

        if $r3 == null goto label2;

        interfaceinvoke $r3.<com.mycila.inject.internal.guava.util.concurrent.ListenableFuture: java.lang.Object get()>();

     label2:
        $r4 = specialinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.AbstractFuture: java.lang.Object get()>();

        return $r4;
    }

    public java.lang.Object get(long, java.util.concurrent.TimeUnit) throws java.util.concurrent.TimeoutException, java.util.concurrent.ExecutionException, java.lang.InterruptedException
    {
        java.util.concurrent.TimeoutException $r4;
        long $l0, $l1, $l2, $l3, $l4, $l5, $l6, $l7, l8;
        com.mycila.inject.internal.guava.util.concurrent.ListenableFuture r3, $r6;
        boolean $z0, $z1;
        com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture r0;
        java.util.concurrent.TimeUnit $r1, $r5, r7;
        java.util.concurrent.CountDownLatch $r2;
        java.lang.Object $r8;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture;

        l8 := @parameter0: long;

        r7 := @parameter1: java.util.concurrent.TimeUnit;

        $z0 = virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: boolean isDone()>();

        if $z0 != 0 goto label4;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        if r7 == $r1 goto label1;

        $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        l8 = virtualinvoke $r5.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>(l8, r7);

        r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

     label1:
        $r6 = r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: com.mycila.inject.internal.guava.util.concurrent.ListenableFuture inputFuture>;

        if $r6 == null goto label2;

        $l4 = staticinvoke <java.lang.System: long nanoTime()>();

        interfaceinvoke $r6.<com.mycila.inject.internal.guava.util.concurrent.ListenableFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)>(l8, r7);

        $l5 = staticinvoke <java.lang.System: long nanoTime()>();

        $l6 = $l5 - $l4;

        $l7 = staticinvoke <java.lang.Math: long max(long,long)>(0L, $l6);

        l8 = l8 - $l7;

     label2:
        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

        $r2 = r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: java.util.concurrent.CountDownLatch outputCreated>;

        $z1 = virtualinvoke $r2.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(l8, r7);

        if $z1 != 0 goto label3;

        $r4 = new java.util.concurrent.TimeoutException;

        specialinvoke $r4.<java.util.concurrent.TimeoutException: void <init>()>();

        throw $r4;

     label3:
        $l1 = staticinvoke <java.lang.System: long nanoTime()>();

        $l2 = $l1 - $l0;

        $l3 = staticinvoke <java.lang.Math: long max(long,long)>(0L, $l2);

        l8 = l8 - $l3;

        r3 = r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: com.mycila.inject.internal.guava.util.concurrent.ListenableFuture outputFuture>;

        if r3 == null goto label4;

        interfaceinvoke r3.<com.mycila.inject.internal.guava.util.concurrent.ListenableFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)>(l8, r7);

     label4:
        $r8 = specialinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.AbstractFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)>(l8, r7);

        return $r8;
    }

    public boolean cancel(boolean)
    {
        com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture r0;
        com.mycila.inject.internal.guava.util.concurrent.ListenableFuture $r3, $r4;
        java.lang.Boolean $r2;
        java.util.concurrent.BlockingQueue $r1;
        boolean z0, $z1;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture;

        z0 := @parameter0: boolean;

        $z1 = specialinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.AbstractFuture: boolean cancel(boolean)>(z0);

        if $z1 == 0 goto label1;

        $r1 = r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: java.util.concurrent.BlockingQueue mayInterruptIfRunningChannel>;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        staticinvoke <com.mycila.inject.internal.guava.util.concurrent.Uninterruptibles: void putUninterruptibly(java.util.concurrent.BlockingQueue,java.lang.Object)>($r1, $r2);

        $r3 = r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: com.mycila.inject.internal.guava.util.concurrent.ListenableFuture inputFuture>;

        specialinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: void cancel(java.util.concurrent.Future,boolean)>($r3, z0);

        $r4 = r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: com.mycila.inject.internal.guava.util.concurrent.ListenableFuture outputFuture>;

        specialinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: void cancel(java.util.concurrent.Future,boolean)>($r4, z0);

        return 1;

     label1:
        return 0;
    }

    private void cancel(java.util.concurrent.Future, boolean)
    {
        com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture r1;
        java.util.concurrent.Future r0;
        boolean z0;

        r1 := @this: com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture;

        r0 := @parameter0: java.util.concurrent.Future;

        z0 := @parameter1: boolean;

        if r0 == null goto label1;

        interfaceinvoke r0.<java.util.concurrent.Future: boolean cancel(boolean)>(z0);

     label1:
        return;
    }

    public void run()
    {
        java.lang.Throwable $r13, $r20, $r23;
        java.lang.Error $r15;
        com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture$1 $r6;
        com.mycila.inject.internal.guava.util.concurrent.ListenableFuture $r1, $r5;
        java.lang.Boolean $r11;
        com.mycila.inject.internal.guava.base.Function $r3;
        boolean $z0, $z1;
        com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture r0;
        java.util.concurrent.CancellationException $r25;
        java.util.concurrent.BlockingQueue $r9;
        java.lang.RuntimeException $r17;
        com.mycila.inject.internal.guava.util.concurrent.ListeningExecutorService $r7;
        java.lang.reflect.UndeclaredThrowableException $r19;
        java.util.concurrent.ExecutionException $r22;
        java.util.concurrent.CountDownLatch $r8, $r12, $r14, $r16, $r18, $r21, $r24, $r26;
        java.lang.Object $r2, $r4, $r10;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture;

     label01:
        $r1 = r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: com.mycila.inject.internal.guava.util.concurrent.ListenableFuture inputFuture>;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.util.concurrent.Uninterruptibles: java.lang.Object getUninterruptibly(java.util.concurrent.Future)>($r1);

     label02:
        goto label07;

     label03:
        $r25 := @caughtexception;

        virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: boolean cancel(boolean)>(0);

     label04:
        r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: com.mycila.inject.internal.guava.base.Function function> = null;

        r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: com.mycila.inject.internal.guava.util.concurrent.ListenableFuture inputFuture> = null;

        $r26 = r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: java.util.concurrent.CountDownLatch outputCreated>;

        virtualinvoke $r26.<java.util.concurrent.CountDownLatch: void countDown()>();

        return;

     label05:
        $r22 := @caughtexception;

        $r23 = virtualinvoke $r22.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: boolean setException(java.lang.Throwable)>($r23);

     label06:
        r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: com.mycila.inject.internal.guava.base.Function function> = null;

        r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: com.mycila.inject.internal.guava.util.concurrent.ListenableFuture inputFuture> = null;

        $r24 = r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: java.util.concurrent.CountDownLatch outputCreated>;

        virtualinvoke $r24.<java.util.concurrent.CountDownLatch: void countDown()>();

        return;

     label07:
        $r3 = r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: com.mycila.inject.internal.guava.base.Function function>;

        $r4 = interfaceinvoke $r3.<com.mycila.inject.internal.guava.base.Function: java.lang.Object apply(java.lang.Object)>($r2);

        $r5 = (com.mycila.inject.internal.guava.util.concurrent.ListenableFuture) $r4;

        r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: com.mycila.inject.internal.guava.util.concurrent.ListenableFuture outputFuture> = $r5;

        $z0 = virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: boolean isCancelled()>();

        if $z0 == 0 goto label09;

        $r9 = r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: java.util.concurrent.BlockingQueue mayInterruptIfRunningChannel>;

        $r10 = staticinvoke <com.mycila.inject.internal.guava.util.concurrent.Uninterruptibles: java.lang.Object takeUninterruptibly(java.util.concurrent.BlockingQueue)>($r9);

        $r11 = (java.lang.Boolean) $r10;

        $z1 = virtualinvoke $r11.<java.lang.Boolean: boolean booleanValue()>();

        interfaceinvoke $r5.<com.mycila.inject.internal.guava.util.concurrent.ListenableFuture: boolean cancel(boolean)>($z1);

        r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: com.mycila.inject.internal.guava.util.concurrent.ListenableFuture outputFuture> = null;

     label08:
        r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: com.mycila.inject.internal.guava.base.Function function> = null;

        r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: com.mycila.inject.internal.guava.util.concurrent.ListenableFuture inputFuture> = null;

        $r12 = r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: java.util.concurrent.CountDownLatch outputCreated>;

        virtualinvoke $r12.<java.util.concurrent.CountDownLatch: void countDown()>();

        return;

     label09:
        $r6 = new com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture$1;

        specialinvoke $r6.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture$1: void <init>(com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture,com.mycila.inject.internal.guava.util.concurrent.ListenableFuture)>(r0, $r5);

        $r7 = staticinvoke <com.mycila.inject.internal.guava.util.concurrent.MoreExecutors: com.mycila.inject.internal.guava.util.concurrent.ListeningExecutorService sameThreadExecutor()>();

        interfaceinvoke $r5.<com.mycila.inject.internal.guava.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r6, $r7);

     label10:
        r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: com.mycila.inject.internal.guava.base.Function function> = null;

        r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: com.mycila.inject.internal.guava.util.concurrent.ListenableFuture inputFuture> = null;

        $r8 = r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: java.util.concurrent.CountDownLatch outputCreated>;

        virtualinvoke $r8.<java.util.concurrent.CountDownLatch: void countDown()>();

        goto label19;

     label11:
        $r19 := @caughtexception;

        $r20 = virtualinvoke $r19.<java.lang.reflect.UndeclaredThrowableException: java.lang.Throwable getCause()>();

        virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: boolean setException(java.lang.Throwable)>($r20);

     label12:
        r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: com.mycila.inject.internal.guava.base.Function function> = null;

        r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: com.mycila.inject.internal.guava.util.concurrent.ListenableFuture inputFuture> = null;

        $r21 = r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: java.util.concurrent.CountDownLatch outputCreated>;

        virtualinvoke $r21.<java.util.concurrent.CountDownLatch: void countDown()>();

        goto label19;

     label13:
        $r17 := @caughtexception;

        virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: boolean setException(java.lang.Throwable)>($r17);

     label14:
        r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: com.mycila.inject.internal.guava.base.Function function> = null;

        r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: com.mycila.inject.internal.guava.util.concurrent.ListenableFuture inputFuture> = null;

        $r18 = r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: java.util.concurrent.CountDownLatch outputCreated>;

        virtualinvoke $r18.<java.util.concurrent.CountDownLatch: void countDown()>();

        goto label19;

     label15:
        $r15 := @caughtexception;

        virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: boolean setException(java.lang.Throwable)>($r15);

     label16:
        r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: com.mycila.inject.internal.guava.base.Function function> = null;

        r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: com.mycila.inject.internal.guava.util.concurrent.ListenableFuture inputFuture> = null;

        $r16 = r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: java.util.concurrent.CountDownLatch outputCreated>;

        virtualinvoke $r16.<java.util.concurrent.CountDownLatch: void countDown()>();

        goto label19;

     label17:
        $r13 := @caughtexception;

     label18:
        r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: com.mycila.inject.internal.guava.base.Function function> = null;

        r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: com.mycila.inject.internal.guava.util.concurrent.ListenableFuture inputFuture> = null;

        $r14 = r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: java.util.concurrent.CountDownLatch outputCreated>;

        virtualinvoke $r14.<java.util.concurrent.CountDownLatch: void countDown()>();

        throw $r13;

     label19:
        return;

        catch java.util.concurrent.CancellationException from label01 to label02 with label03;
        catch java.util.concurrent.ExecutionException from label01 to label02 with label05;
        catch java.lang.reflect.UndeclaredThrowableException from label01 to label04 with label11;
        catch java.lang.reflect.UndeclaredThrowableException from label05 to label06 with label11;
        catch java.lang.reflect.UndeclaredThrowableException from label07 to label08 with label11;
        catch java.lang.reflect.UndeclaredThrowableException from label09 to label10 with label11;
        catch java.lang.RuntimeException from label01 to label04 with label13;
        catch java.lang.RuntimeException from label05 to label06 with label13;
        catch java.lang.RuntimeException from label07 to label08 with label13;
        catch java.lang.RuntimeException from label09 to label10 with label13;
        catch java.lang.Error from label01 to label04 with label15;
        catch java.lang.Error from label05 to label06 with label15;
        catch java.lang.Error from label07 to label08 with label15;
        catch java.lang.Error from label09 to label10 with label15;
        catch java.lang.Throwable from label01 to label04 with label17;
        catch java.lang.Throwable from label05 to label06 with label17;
        catch java.lang.Throwable from label07 to label08 with label17;
        catch java.lang.Throwable from label09 to label10 with label17;
        catch java.lang.Throwable from label11 to label12 with label17;
        catch java.lang.Throwable from label13 to label14 with label17;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    void <init>(com.mycila.inject.internal.guava.base.Function, com.mycila.inject.internal.guava.util.concurrent.ListenableFuture, com.mycila.inject.internal.guava.util.concurrent.Futures$1)
    {
        com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture r0;
        com.mycila.inject.internal.guava.util.concurrent.ListenableFuture r2;
        com.mycila.inject.internal.guava.util.concurrent.Futures$1 r3;
        com.mycila.inject.internal.guava.base.Function r1;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture;

        r1 := @parameter0: com.mycila.inject.internal.guava.base.Function;

        r2 := @parameter1: com.mycila.inject.internal.guava.util.concurrent.ListenableFuture;

        r3 := @parameter2: com.mycila.inject.internal.guava.util.concurrent.Futures$1;

        specialinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: void <init>(com.mycila.inject.internal.guava.base.Function,com.mycila.inject.internal.guava.util.concurrent.ListenableFuture)>(r1, r2);

        return;
    }

    static com.mycila.inject.internal.guava.util.concurrent.ListenableFuture access$102(com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture, com.mycila.inject.internal.guava.util.concurrent.ListenableFuture)
    {
        com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture r0;
        com.mycila.inject.internal.guava.util.concurrent.ListenableFuture r1;

        r0 := @parameter0: com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture;

        r1 := @parameter1: com.mycila.inject.internal.guava.util.concurrent.ListenableFuture;

        r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ChainingListenableFuture: com.mycila.inject.internal.guava.util.concurrent.ListenableFuture outputFuture> = r1;

        return r1;
    }
}
