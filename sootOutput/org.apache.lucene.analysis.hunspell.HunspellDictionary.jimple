public class org.apache.lucene.analysis.hunspell.HunspellDictionary extends java.lang.Object
{
    static final org.apache.lucene.analysis.hunspell.HunspellWord NOFLAGS;
    private static final java.lang.String ALIAS_KEY;
    private static final java.lang.String PREFIX_KEY;
    private static final java.lang.String SUFFIX_KEY;
    private static final java.lang.String FLAG_KEY;
    private static final java.lang.String NUM_FLAG_TYPE;
    private static final java.lang.String UTF8_FLAG_TYPE;
    private static final java.lang.String LONG_FLAG_TYPE;
    private static final java.lang.String PREFIX_CONDITION_REGEX_PATTERN;
    private static final java.lang.String SUFFIX_CONDITION_REGEX_PATTERN;
    private static final boolean IGNORE_CASE_DEFAULT;
    private static final boolean STRICT_AFFIX_PARSING_DEFAULT;
    private org.apache.lucene.analysis.util.CharArrayMap words;
    private org.apache.lucene.analysis.util.CharArrayMap prefixes;
    private org.apache.lucene.analysis.util.CharArrayMap suffixes;
    private org.apache.lucene.analysis.hunspell.HunspellDictionary$FlagParsingStrategy flagParsingStrategy;
    private boolean ignoreCase;
    private final org.apache.lucene.util.Version version;
    private java.lang.String[] aliases;
    private int aliasCount;

    public void <init>(java.io.InputStream, java.io.InputStream, org.apache.lucene.util.Version) throws java.io.IOException, java.text.ParseException
    {
        java.io.InputStream[] $r2;
        org.apache.lucene.analysis.hunspell.HunspellDictionary r0;
        java.util.List $r4;
        org.apache.lucene.util.Version r5;
        java.io.InputStream r1, r3;

        r0 := @this: org.apache.lucene.analysis.hunspell.HunspellDictionary;

        r1 := @parameter0: java.io.InputStream;

        r3 := @parameter1: java.io.InputStream;

        r5 := @parameter2: org.apache.lucene.util.Version;

        $r2 = newarray (java.io.InputStream)[1];

        $r2[0] = r3;

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        specialinvoke r0.<org.apache.lucene.analysis.hunspell.HunspellDictionary: void <init>(java.io.InputStream,java.util.List,org.apache.lucene.util.Version,boolean)>(r1, $r4, r5, 0);

        return;
    }

    public void <init>(java.io.InputStream, java.io.InputStream, org.apache.lucene.util.Version, boolean) throws java.io.IOException, java.text.ParseException
    {
        java.io.InputStream[] $r2;
        org.apache.lucene.analysis.hunspell.HunspellDictionary r0;
        java.util.List $r4;
        org.apache.lucene.util.Version r5;
        java.io.InputStream r1, r3;
        boolean z0;

        r0 := @this: org.apache.lucene.analysis.hunspell.HunspellDictionary;

        r1 := @parameter0: java.io.InputStream;

        r3 := @parameter1: java.io.InputStream;

        r5 := @parameter2: org.apache.lucene.util.Version;

        z0 := @parameter3: boolean;

        $r2 = newarray (java.io.InputStream)[1];

        $r2[0] = r3;

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        specialinvoke r0.<org.apache.lucene.analysis.hunspell.HunspellDictionary: void <init>(java.io.InputStream,java.util.List,org.apache.lucene.util.Version,boolean)>(r1, $r4, r5, z0);

        return;
    }

    public void <init>(java.io.InputStream, java.util.List, org.apache.lucene.util.Version, boolean) throws java.io.IOException, java.text.ParseException
    {
        org.apache.lucene.analysis.hunspell.HunspellDictionary r0;
        java.util.List r2;
        org.apache.lucene.util.Version r3;
        java.io.InputStream r1;
        boolean z0;

        r0 := @this: org.apache.lucene.analysis.hunspell.HunspellDictionary;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: org.apache.lucene.util.Version;

        z0 := @parameter3: boolean;

        specialinvoke r0.<org.apache.lucene.analysis.hunspell.HunspellDictionary: void <init>(java.io.InputStream,java.util.List,org.apache.lucene.util.Version,boolean,boolean)>(r1, r2, r3, z0, 1);

        return;
    }

    public void <init>(java.io.InputStream, java.util.List, org.apache.lucene.util.Version, boolean, boolean) throws java.io.IOException, java.text.ParseException
    {
        org.apache.lucene.analysis.hunspell.HunspellDictionary r0;
        org.apache.lucene.analysis.hunspell.HunspellDictionary$SimpleFlagParsingStrategy $r11;
        int $i1;
        java.lang.String $r4;
        boolean z0, z1, $z2, $z3;
        java.util.Iterator $r8;
        java.nio.charset.CharsetDecoder $r5;
        org.apache.lucene.util.Version r2;
        java.util.List r7;
        java.lang.Object $r9;
        java.io.InputStream r3, r10;
        org.apache.lucene.analysis.util.CharArrayMap $r12;

        r0 := @this: org.apache.lucene.analysis.hunspell.HunspellDictionary;

        r3 := @parameter0: java.io.InputStream;

        r7 := @parameter1: java.util.List;

        r2 := @parameter2: org.apache.lucene.util.Version;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r11 = new org.apache.lucene.analysis.hunspell.HunspellDictionary$SimpleFlagParsingStrategy;

        specialinvoke $r11.<org.apache.lucene.analysis.hunspell.HunspellDictionary$SimpleFlagParsingStrategy: void <init>(org.apache.lucene.analysis.hunspell.HunspellDictionary$1)>(null);

        r0.<org.apache.lucene.analysis.hunspell.HunspellDictionary: org.apache.lucene.analysis.hunspell.HunspellDictionary$FlagParsingStrategy flagParsingStrategy> = $r11;

        r0.<org.apache.lucene.analysis.hunspell.HunspellDictionary: boolean ignoreCase> = 0;

        r0.<org.apache.lucene.analysis.hunspell.HunspellDictionary: int aliasCount> = 0;

        r0.<org.apache.lucene.analysis.hunspell.HunspellDictionary: org.apache.lucene.util.Version version> = r2;

        r0.<org.apache.lucene.analysis.hunspell.HunspellDictionary: boolean ignoreCase> = z0;

        $r4 = specialinvoke r0.<org.apache.lucene.analysis.hunspell.HunspellDictionary: java.lang.String getDictionaryEncoding(java.io.InputStream)>(r3);

        $r5 = specialinvoke r0.<org.apache.lucene.analysis.hunspell.HunspellDictionary: java.nio.charset.CharsetDecoder getJavaEncoding(java.lang.String)>($r4);

        specialinvoke r0.<org.apache.lucene.analysis.hunspell.HunspellDictionary: void readAffixFile(java.io.InputStream,java.nio.charset.CharsetDecoder,boolean)>(r3, $r5, z1);

        $r12 = new org.apache.lucene.analysis.util.CharArrayMap;

        $z2 = r0.<org.apache.lucene.analysis.hunspell.HunspellDictionary: boolean ignoreCase>;

        $i1 = (int) 65535;

        specialinvoke $r12.<org.apache.lucene.analysis.util.CharArrayMap: void <init>(org.apache.lucene.util.Version,int,boolean)>(r2, $i1, $z2);

        r0.<org.apache.lucene.analysis.hunspell.HunspellDictionary: org.apache.lucene.analysis.util.CharArrayMap words> = $r12;

        $r8 = interfaceinvoke r7.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label2;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.io.InputStream) $r9;

        specialinvoke r0.<org.apache.lucene.analysis.hunspell.HunspellDictionary: void readDictionaryFile(java.io.InputStream,java.nio.charset.CharsetDecoder)>(r10, $r5);

        goto label1;

     label2:
        return;
    }

    public java.util.List lookupWord(char[], int, int)
    {
        org.apache.lucene.analysis.hunspell.HunspellDictionary r0;
        java.util.List $r4;
        int i0, i1;
        char[] r1;
        java.lang.Object $r3;
        org.apache.lucene.analysis.util.CharArrayMap $r2;

        r0 := @this: org.apache.lucene.analysis.hunspell.HunspellDictionary;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.apache.lucene.analysis.hunspell.HunspellDictionary: org.apache.lucene.analysis.util.CharArrayMap words>;

        $r3 = virtualinvoke $r2.<org.apache.lucene.analysis.util.CharArrayMap: java.lang.Object get(char[],int,int)>(r1, i0, i1);

        $r4 = (java.util.List) $r3;

        return $r4;
    }

    public java.util.List lookupPrefix(char[], int, int)
    {
        org.apache.lucene.analysis.hunspell.HunspellDictionary r0;
        java.util.List $r4;
        int i0, i1;
        char[] r1;
        java.lang.Object $r3;
        org.apache.lucene.analysis.util.CharArrayMap $r2;

        r0 := @this: org.apache.lucene.analysis.hunspell.HunspellDictionary;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.apache.lucene.analysis.hunspell.HunspellDictionary: org.apache.lucene.analysis.util.CharArrayMap prefixes>;

        $r3 = virtualinvoke $r2.<org.apache.lucene.analysis.util.CharArrayMap: java.lang.Object get(char[],int,int)>(r1, i0, i1);

        $r4 = (java.util.List) $r3;

        return $r4;
    }

    public java.util.List lookupSuffix(char[], int, int)
    {
        org.apache.lucene.analysis.hunspell.HunspellDictionary r0;
        java.util.List $r4;
        int i0, i1;
        char[] r1;
        java.lang.Object $r3;
        org.apache.lucene.analysis.util.CharArrayMap $r2;

        r0 := @this: org.apache.lucene.analysis.hunspell.HunspellDictionary;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.apache.lucene.analysis.hunspell.HunspellDictionary: org.apache.lucene.analysis.util.CharArrayMap suffixes>;

        $r3 = virtualinvoke $r2.<org.apache.lucene.analysis.util.CharArrayMap: java.lang.Object get(char[],int,int)>(r1, i0, i1);

        $r4 = (java.util.List) $r3;

        return $r4;
    }

    private void readAffixFile(java.io.InputStream, java.nio.charset.CharsetDecoder, boolean) throws java.io.IOException, java.text.ParseException
    {
        org.apache.lucene.analysis.hunspell.HunspellDictionary r0;
        java.lang.String $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6;
        java.io.LineNumberReader $r5;
        java.nio.charset.CharsetDecoder r8;
        org.apache.lucene.util.Version $r2, $r4;
        java.io.InputStreamReader $r6;
        org.apache.lucene.analysis.hunspell.HunspellDictionary$FlagParsingStrategy $r9;
        org.apache.lucene.analysis.util.CharArrayMap $r1, $r3, $r10, $r11;
        java.io.InputStream r7;

        r0 := @this: org.apache.lucene.analysis.hunspell.HunspellDictionary;

        r7 := @parameter0: java.io.InputStream;

        r8 := @parameter1: java.nio.charset.CharsetDecoder;

        z6 := @parameter2: boolean;

        $r1 = new org.apache.lucene.analysis.util.CharArrayMap;

        $r2 = r0.<org.apache.lucene.analysis.hunspell.HunspellDictionary: org.apache.lucene.util.Version version>;

        $z0 = r0.<org.apache.lucene.analysis.hunspell.HunspellDictionary: boolean ignoreCase>;

        specialinvoke $r1.<org.apache.lucene.analysis.util.CharArrayMap: void <init>(org.apache.lucene.util.Version,int,boolean)>($r2, 8, $z0);

        r0.<org.apache.lucene.analysis.hunspell.HunspellDictionary: org.apache.lucene.analysis.util.CharArrayMap prefixes> = $r1;

        $r3 = new org.apache.lucene.analysis.util.CharArrayMap;

        $r4 = r0.<org.apache.lucene.analysis.hunspell.HunspellDictionary: org.apache.lucene.util.Version version>;

        $z1 = r0.<org.apache.lucene.analysis.hunspell.HunspellDictionary: boolean ignoreCase>;

        specialinvoke $r3.<org.apache.lucene.analysis.util.CharArrayMap: void <init>(org.apache.lucene.util.Version,int,boolean)>($r4, 8, $z1);

        r0.<org.apache.lucene.analysis.hunspell.HunspellDictionary: org.apache.lucene.analysis.util.CharArrayMap suffixes> = $r3;

        $r5 = new java.io.LineNumberReader;

        $r6 = new java.io.InputStreamReader;

        specialinvoke $r6.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.CharsetDecoder)>(r7, r8);

        specialinvoke $r5.<java.io.LineNumberReader: void <init>(java.io.Reader)>($r6);

     label1:
        $r12 = virtualinvoke $r5.<java.io.LineNumberReader: java.lang.String readLine()>();

        if $r12 == null goto label5;

        $z2 = virtualinvoke $r12.<java.lang.String: boolean startsWith(java.lang.String)>("AF");

        if $z2 == 0 goto label2;

        specialinvoke r0.<org.apache.lucene.analysis.hunspell.HunspellDictionary: void parseAlias(java.lang.String)>($r12);

        goto label1;

     label2:
        $z3 = virtualinvoke $r12.<java.lang.String: boolean startsWith(java.lang.String)>("PFX");

        if $z3 == 0 goto label3;

        $r11 = r0.<org.apache.lucene.analysis.hunspell.HunspellDictionary: org.apache.lucene.analysis.util.CharArrayMap prefixes>;

        specialinvoke r0.<org.apache.lucene.analysis.hunspell.HunspellDictionary: void parseAffix(org.apache.lucene.analysis.util.CharArrayMap,java.lang.String,java.io.LineNumberReader,java.lang.String,boolean)>($r11, $r12, $r5, "%s.*", z6);

        goto label1;

     label3:
        $z4 = virtualinvoke $r12.<java.lang.String: boolean startsWith(java.lang.String)>("SFX");

        if $z4 == 0 goto label4;

        $r10 = r0.<org.apache.lucene.analysis.hunspell.HunspellDictionary: org.apache.lucene.analysis.util.CharArrayMap suffixes>;

        specialinvoke r0.<org.apache.lucene.analysis.hunspell.HunspellDictionary: void parseAffix(org.apache.lucene.analysis.util.CharArrayMap,java.lang.String,java.io.LineNumberReader,java.lang.String,boolean)>($r10, $r12, $r5, ".*%s", z6);

        goto label1;

     label4:
        $z5 = virtualinvoke $r12.<java.lang.String: boolean startsWith(java.lang.String)>("FLAG");

        if $z5 == 0 goto label1;

        $r9 = specialinvoke r0.<org.apache.lucene.analysis.hunspell.HunspellDictionary: org.apache.lucene.analysis.hunspell.HunspellDictionary$FlagParsingStrategy getFlagParsingStrategy(java.lang.String)>($r12);

        r0.<org.apache.lucene.analysis.hunspell.HunspellDictionary: org.apache.lucene.analysis.hunspell.HunspellDictionary$FlagParsingStrategy flagParsingStrategy> = $r9;

        goto label1;

     label5:
        return;
    }

    private void parseAffix(org.apache.lucene.analysis.util.CharArrayMap, java.lang.String, java.io.LineNumberReader, java.lang.String, boolean) throws java.io.IOException, java.text.ParseException
    {
        org.apache.lucene.analysis.hunspell.HunspellDictionary r8;
        java.util.Locale $r14;
        java.text.ParseException $r32;
        boolean $z0, $z1, z2;
        java.io.LineNumberReader r4;
        java.util.List $r26, r31;
        org.apache.lucene.analysis.hunspell.HunspellAffix $r33;
        org.apache.lucene.analysis.util.CharArrayMap r16;
        java.lang.Object[] $r13;
        java.lang.String[] $r1, $r6;
        java.util.ArrayList $r34;
        int $i0, $i1, $i3, $i4, $i5, $i6, $i7, i8, $i10;
        java.lang.String r0, $r2, $r3, $r5, $r9, $r11, r12, $r15, $r17, $r20, $r21, $r24, $r25, $r27, $r29, r30;
        char $c2;
        org.apache.lucene.analysis.hunspell.HunspellDictionary$FlagParsingStrategy $r10, $r22;
        char[] $r23;
        java.lang.Object $r18;

        r8 := @this: org.apache.lucene.analysis.hunspell.HunspellDictionary;

        r16 := @parameter0: org.apache.lucene.analysis.util.CharArrayMap;

        r0 := @parameter1: java.lang.String;

        r4 := @parameter2: java.io.LineNumberReader;

        r12 := @parameter3: java.lang.String;

        z2 := @parameter4: boolean;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s+");

        $r2 = $r1[2];

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("Y");

        $r3 = $r1[3];

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        i8 = 0;

     label01:
        if i8 >= $i0 goto label10;

        $r5 = virtualinvoke r4.<java.io.LineNumberReader: java.lang.String readLine()>();

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s+");

        $i1 = lengthof $r6;

        if $i1 >= 5 goto label02;

        if z2 == 0 goto label09;

        $r32 = new java.text.ParseException;

        $i7 = virtualinvoke r4.<java.io.LineNumberReader: int getLineNumber()>();

        specialinvoke $r32.<java.text.ParseException: void <init>(java.lang.String,int)>("The affix file contains a rule with less than five elements", $i7);

        throw $r32;

     label02:
        $r33 = new org.apache.lucene.analysis.hunspell.HunspellAffix;

        specialinvoke $r33.<org.apache.lucene.analysis.hunspell.HunspellAffix: void <init>()>();

        $r10 = r8.<org.apache.lucene.analysis.hunspell.HunspellDictionary: org.apache.lucene.analysis.hunspell.HunspellDictionary$FlagParsingStrategy flagParsingStrategy>;

        $r9 = $r6[1];

        $c2 = virtualinvoke $r10.<org.apache.lucene.analysis.hunspell.HunspellDictionary$FlagParsingStrategy: char parseFlag(java.lang.String)>($r9);

        virtualinvoke $r33.<org.apache.lucene.analysis.hunspell.HunspellAffix: void setFlag(char)>($c2);

        $r11 = $r6[2];

        $z1 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("0");

        if $z1 == 0 goto label03;

        $r29 = "";

        goto label04;

     label03:
        $r29 = $r6[2];

     label04:
        virtualinvoke $r33.<org.apache.lucene.analysis.hunspell.HunspellAffix: void setStrip(java.lang.String)>($r29);

        $r27 = $r6[3];

        $i3 = virtualinvoke $r27.<java.lang.String: int lastIndexOf(int)>(47);

        $i10 = (int) -1;

        if $i3 == $i10 goto label06;

        $i4 = $i3 + 1;

        $r21 = virtualinvoke $r27.<java.lang.String: java.lang.String substring(int)>($i4);

        r30 = $r21;

        $i5 = r8.<org.apache.lucene.analysis.hunspell.HunspellDictionary: int aliasCount>;

        if $i5 <= 0 goto label05;

        $i6 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r21);

        r30 = specialinvoke r8.<org.apache.lucene.analysis.hunspell.HunspellDictionary: java.lang.String getAliasValue(int)>($i6);

     label05:
        $r22 = r8.<org.apache.lucene.analysis.hunspell.HunspellDictionary: org.apache.lucene.analysis.hunspell.HunspellDictionary$FlagParsingStrategy flagParsingStrategy>;

        $r23 = virtualinvoke $r22.<org.apache.lucene.analysis.hunspell.HunspellDictionary$FlagParsingStrategy: char[] parseFlags(java.lang.String)>(r30);

        staticinvoke <java.util.Arrays: void sort(char[])>($r23);

        virtualinvoke $r33.<org.apache.lucene.analysis.hunspell.HunspellAffix: void setAppendFlags(char[])>($r23);

        $r24 = virtualinvoke $r27.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

        virtualinvoke $r33.<org.apache.lucene.analysis.hunspell.HunspellAffix: void setAppend(java.lang.String)>($r24);

        goto label07;

     label06:
        virtualinvoke $r33.<org.apache.lucene.analysis.hunspell.HunspellAffix: void setAppend(java.lang.String)>($r27);

     label07:
        $r25 = $r6[4];

        $r14 = <java.util.Locale: java.util.Locale ROOT>;

        $r13 = newarray (java.lang.Object)[1];

        $r13[0] = $r25;

        $r15 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r14, r12, $r13);

        virtualinvoke $r33.<org.apache.lucene.analysis.hunspell.HunspellAffix: void setCondition(java.lang.String,java.lang.String)>($r25, $r15);

        virtualinvoke $r33.<org.apache.lucene.analysis.hunspell.HunspellAffix: void setCrossProduct(boolean)>($z0);

        $r17 = virtualinvoke $r33.<org.apache.lucene.analysis.hunspell.HunspellAffix: java.lang.String getAppend()>();

        $r18 = virtualinvoke r16.<org.apache.lucene.analysis.util.CharArrayMap: java.lang.Object get(java.lang.CharSequence)>($r17);

        $r26 = (java.util.List) $r18;

        r31 = $r26;

        if $r26 != null goto label08;

        $r34 = new java.util.ArrayList;

        specialinvoke $r34.<java.util.ArrayList: void <init>()>();

        r31 = $r34;

        $r20 = virtualinvoke $r33.<org.apache.lucene.analysis.hunspell.HunspellAffix: java.lang.String getAppend()>();

        virtualinvoke r16.<org.apache.lucene.analysis.util.CharArrayMap: java.lang.Object put(java.lang.String,java.lang.Object)>($r20, $r34);

     label08:
        interfaceinvoke r31.<java.util.List: boolean add(java.lang.Object)>($r33);

     label09:
        i8 = i8 + 1;

        goto label01;

     label10:
        return;
    }

    private java.lang.String getDictionaryEncoding(java.io.InputStream) throws java.io.IOException, java.text.ParseException
    {
        org.apache.lucene.analysis.hunspell.HunspellDictionary r15;
        int $i0, $i2, $i4, $i5;
        java.lang.String $r3, $r4, $r5, $r6, $r12, $r13, $r14;
        java.text.ParseException $r17, $r19;
        boolean $z0;
        char $c1, $c3;
        java.lang.StringBuilder $r9, $r10, $r11, $r16, $r18;
        java.io.InputStream r1;

        r15 := @this: org.apache.lucene.analysis.hunspell.HunspellDictionary;

        r1 := @parameter0: java.io.InputStream;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

     label1:
        virtualinvoke $r16.<java.lang.StringBuilder: void setLength(int)>(0);

     label2:
        $i4 = virtualinvoke r1.<java.io.InputStream: int read()>();

        if $i4 < 0 goto label4;

        if $i4 != 10 goto label3;

        goto label4;

     label3:
        if $i4 == 13 goto label2;

        $c3 = (char) $i4;

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        goto label2;

     label4:
        $i0 = virtualinvoke $r16.<java.lang.StringBuilder: int length()>();

        if $i0 == 0 goto label5;

        $c1 = virtualinvoke $r16.<java.lang.StringBuilder: char charAt(int)>(0);

        $i5 = (int) $c1;

        if $i5 == 35 goto label5;

        $r3 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String trim()>();

        $i2 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i2 != 0 goto label6;

     label5:
        if $i4 >= 0 goto label1;

        $r17 = new java.text.ParseException;

        specialinvoke $r17.<java.text.ParseException: void <init>(java.lang.String,int)>("Unexpected end of affix file.", 0);

        throw $r17;

     label6:
        $r5 = "SET ";

        $r6 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String substring(int,int)>(0, 4);

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label7;

        $r13 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String substring(int)>(4);

        $r14 = virtualinvoke $r13.<java.lang.String: java.lang.String trim()>();

        return $r14;

     label7:
        $r19 = new java.text.ParseException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The first non-comment line in the affix file must be a \'SET charset\', was: \'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.text.ParseException: void <init>(java.lang.String,int)>($r12, 0);

        throw $r19;
    }

    private java.nio.charset.CharsetDecoder getJavaEncoding(java.lang.String)
    {
        org.apache.lucene.analysis.hunspell.HunspellDictionary r3;
        java.nio.charset.Charset $r1;
        java.lang.String r0;
        java.nio.charset.CharsetDecoder $r2;

        r3 := @this: org.apache.lucene.analysis.hunspell.HunspellDictionary;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(r0);

        $r2 = virtualinvoke $r1.<java.nio.charset.Charset: java.nio.charset.CharsetDecoder newDecoder()>();

        return $r2;
    }

    private org.apache.lucene.analysis.hunspell.HunspellDictionary$FlagParsingStrategy getFlagParsingStrategy(java.lang.String)
    {
        org.apache.lucene.analysis.hunspell.HunspellDictionary$DoubleASCIIFlagParsingStrategy $r10;
        org.apache.lucene.analysis.hunspell.HunspellDictionary r13;
        org.apache.lucene.analysis.hunspell.HunspellDictionary$SimpleFlagParsingStrategy $r11;
        java.lang.String r0, $r1, $r2, $r3, $r4, $r9;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        org.apache.lucene.analysis.hunspell.HunspellDictionary$NumFlagParsingStrategy $r12;

        r13 := @this: org.apache.lucene.analysis.hunspell.HunspellDictionary;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(5);

        $r2 = "num";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r12 = new org.apache.lucene.analysis.hunspell.HunspellDictionary$NumFlagParsingStrategy;

        specialinvoke $r12.<org.apache.lucene.analysis.hunspell.HunspellDictionary$NumFlagParsingStrategy: void <init>(org.apache.lucene.analysis.hunspell.HunspellDictionary$1)>(null);

        return $r12;

     label1:
        $r3 = "UTF-8";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z1 == 0 goto label2;

        $r11 = new org.apache.lucene.analysis.hunspell.HunspellDictionary$SimpleFlagParsingStrategy;

        specialinvoke $r11.<org.apache.lucene.analysis.hunspell.HunspellDictionary$SimpleFlagParsingStrategy: void <init>(org.apache.lucene.analysis.hunspell.HunspellDictionary$1)>(null);

        return $r11;

     label2:
        $r4 = "long";

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z2 == 0 goto label3;

        $r10 = new org.apache.lucene.analysis.hunspell.HunspellDictionary$DoubleASCIIFlagParsingStrategy;

        specialinvoke $r10.<org.apache.lucene.analysis.hunspell.HunspellDictionary$DoubleASCIIFlagParsingStrategy: void <init>(org.apache.lucene.analysis.hunspell.HunspellDictionary$1)>(null);

        return $r10;

     label3:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown flag type: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r5;
    }

    private void readDictionaryFile(java.io.InputStream, java.nio.charset.CharsetDecoder) throws java.io.IOException
    {
        org.apache.lucene.analysis.hunspell.HunspellDictionary r7;
        org.apache.lucene.analysis.hunspell.HunspellWord r16, $r25;
        java.util.Locale $r15;
        boolean $z0;
        java.nio.charset.CharsetDecoder r3;
        java.util.List $r21, r22;
        org.apache.lucene.analysis.util.CharArrayMap $r14, $r19;
        java.util.ArrayList $r26;
        int $i0, $i1, $i2, $i3, $i4, i5, $i7, $i9;
        java.lang.String $r4, $r5, $r6, $r12, r17, r18;
        java.io.InputStreamReader $r23;
        org.apache.lucene.analysis.hunspell.HunspellDictionary$FlagParsingStrategy $r9;
        char[] $r10, $r11;
        java.lang.Object $r20;
        java.io.BufferedReader $r24;
        java.io.InputStream r2;

        r7 := @this: org.apache.lucene.analysis.hunspell.HunspellDictionary;

        r2 := @parameter0: java.io.InputStream;

        r3 := @parameter1: java.nio.charset.CharsetDecoder;

        $r24 = new java.io.BufferedReader;

        $r23 = new java.io.InputStreamReader;

        specialinvoke $r23.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.CharsetDecoder)>(r2, r3);

        specialinvoke $r24.<java.io.BufferedReader: void <init>(java.io.Reader)>($r23);

        $r4 = virtualinvoke $r24.<java.io.BufferedReader: java.lang.String readLine()>();

        staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

     label1:
        $r5 = virtualinvoke $r24.<java.io.BufferedReader: java.lang.String readLine()>();

        if $r5 == null goto label7;

        $i0 = virtualinvoke $r5.<java.lang.String: int lastIndexOf(int)>(47);

        $i7 = (int) -1;

        if $i0 != $i7 goto label2;

        r16 = <org.apache.lucene.analysis.hunspell.HunspellDictionary: org.apache.lucene.analysis.hunspell.HunspellWord NOFLAGS>;

        r17 = $r5;

        goto label5;

     label2:
        $i1 = virtualinvoke $r5.<java.lang.String: int indexOf(int,int)>(9, $i0);

        i5 = $i1;

        $i9 = (int) -1;

        if $i1 != $i9 goto label3;

        i5 = virtualinvoke $r5.<java.lang.String: int length()>();

     label3:
        $i2 = $i0 + 1;

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int,int)>($i2, i5);

        r18 = $r6;

        $i3 = r7.<org.apache.lucene.analysis.hunspell.HunspellDictionary: int aliasCount>;

        if $i3 <= 0 goto label4;

        $i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r6);

        r18 = specialinvoke r7.<org.apache.lucene.analysis.hunspell.HunspellDictionary: java.lang.String getAliasValue(int)>($i4);

     label4:
        $r25 = new org.apache.lucene.analysis.hunspell.HunspellWord;

        $r9 = r7.<org.apache.lucene.analysis.hunspell.HunspellDictionary: org.apache.lucene.analysis.hunspell.HunspellDictionary$FlagParsingStrategy flagParsingStrategy>;

        $r10 = virtualinvoke $r9.<org.apache.lucene.analysis.hunspell.HunspellDictionary$FlagParsingStrategy: char[] parseFlags(java.lang.String)>(r18);

        specialinvoke $r25.<org.apache.lucene.analysis.hunspell.HunspellWord: void <init>(char[])>($r10);

        r16 = $r25;

        $r11 = virtualinvoke $r25.<org.apache.lucene.analysis.hunspell.HunspellWord: char[] getFlags()>();

        staticinvoke <java.util.Arrays: void sort(char[])>($r11);

        $r12 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        r17 = $r12;

        $z0 = r7.<org.apache.lucene.analysis.hunspell.HunspellDictionary: boolean ignoreCase>;

        if $z0 == 0 goto label5;

        $r15 = <java.util.Locale: java.util.Locale ROOT>;

        r17 = virtualinvoke $r12.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r15);

     label5:
        $r19 = r7.<org.apache.lucene.analysis.hunspell.HunspellDictionary: org.apache.lucene.analysis.util.CharArrayMap words>;

        $r20 = virtualinvoke $r19.<org.apache.lucene.analysis.util.CharArrayMap: java.lang.Object get(java.lang.CharSequence)>(r17);

        $r21 = (java.util.List) $r20;

        r22 = $r21;

        if $r21 != null goto label6;

        $r26 = new java.util.ArrayList;

        specialinvoke $r26.<java.util.ArrayList: void <init>()>();

        r22 = $r26;

        $r14 = r7.<org.apache.lucene.analysis.hunspell.HunspellDictionary: org.apache.lucene.analysis.util.CharArrayMap words>;

        virtualinvoke $r14.<org.apache.lucene.analysis.util.CharArrayMap: java.lang.Object put(java.lang.String,java.lang.Object)>(r17, $r26);

     label6:
        interfaceinvoke r22.<java.util.List: boolean add(java.lang.Object)>(r16);

        goto label1;

     label7:
        return;
    }

    public org.apache.lucene.util.Version getVersion()
    {
        org.apache.lucene.analysis.hunspell.HunspellDictionary r0;
        org.apache.lucene.util.Version $r1;

        r0 := @this: org.apache.lucene.analysis.hunspell.HunspellDictionary;

        $r1 = r0.<org.apache.lucene.analysis.hunspell.HunspellDictionary: org.apache.lucene.util.Version version>;

        return $r1;
    }

    private void parseAlias(java.lang.String)
    {
        java.lang.String[] $r1, $r3, $r4, $r7;
        org.apache.lucene.analysis.hunspell.HunspellDictionary r2;
        int $i0, $i1, $i2;
        java.lang.String r0, $r5, $r6;

        r2 := @this: org.apache.lucene.analysis.hunspell.HunspellDictionary;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s+");

        $r3 = r2.<org.apache.lucene.analysis.hunspell.HunspellDictionary: java.lang.String[] aliases>;

        if $r3 != null goto label1;

        $r6 = $r1[1];

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r6);

        $r7 = newarray (java.lang.String)[$i2];

        r2.<org.apache.lucene.analysis.hunspell.HunspellDictionary: java.lang.String[] aliases> = $r7;

        goto label2;

     label1:
        $r4 = r2.<org.apache.lucene.analysis.hunspell.HunspellDictionary: java.lang.String[] aliases>;

        $i0 = r2.<org.apache.lucene.analysis.hunspell.HunspellDictionary: int aliasCount>;

        $i1 = $i0 + 1;

        r2.<org.apache.lucene.analysis.hunspell.HunspellDictionary: int aliasCount> = $i1;

        $r5 = $r1[1];

        $r4[$i0] = $r5;

     label2:
        return;
    }

    private java.lang.String getAliasValue(int)
    {
        java.lang.IndexOutOfBoundsException $r3;
        java.lang.String[] $r1;
        java.lang.IllegalArgumentException $r4;
        org.apache.lucene.analysis.hunspell.HunspellDictionary r0;
        int i0, $i1;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r2, $r8;

        r0 := @this: org.apache.lucene.analysis.hunspell.HunspellDictionary;

        i0 := @parameter0: int;

     label1:
        $r1 = r0.<org.apache.lucene.analysis.hunspell.HunspellDictionary: java.lang.String[] aliases>;

        $i1 = i0 - 1;

        $r2 = $r1[$i1];

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad flag alias number:");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r8, $r3);

        throw $r4;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
    }

    public boolean isIgnoreCase()
    {
        org.apache.lucene.analysis.hunspell.HunspellDictionary r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.analysis.hunspell.HunspellDictionary;

        $z0 = r0.<org.apache.lucene.analysis.hunspell.HunspellDictionary: boolean ignoreCase>;

        return $z0;
    }

    static void <clinit>()
    {
        org.apache.lucene.analysis.hunspell.HunspellWord $r0;

        <org.apache.lucene.analysis.hunspell.HunspellDictionary: boolean STRICT_AFFIX_PARSING_DEFAULT> = 1;

        <org.apache.lucene.analysis.hunspell.HunspellDictionary: boolean IGNORE_CASE_DEFAULT> = 0;

        <org.apache.lucene.analysis.hunspell.HunspellDictionary: java.lang.String SUFFIX_CONDITION_REGEX_PATTERN> = ".*%s";

        <org.apache.lucene.analysis.hunspell.HunspellDictionary: java.lang.String PREFIX_CONDITION_REGEX_PATTERN> = "%s.*";

        <org.apache.lucene.analysis.hunspell.HunspellDictionary: java.lang.String LONG_FLAG_TYPE> = "long";

        <org.apache.lucene.analysis.hunspell.HunspellDictionary: java.lang.String UTF8_FLAG_TYPE> = "UTF-8";

        <org.apache.lucene.analysis.hunspell.HunspellDictionary: java.lang.String NUM_FLAG_TYPE> = "num";

        <org.apache.lucene.analysis.hunspell.HunspellDictionary: java.lang.String FLAG_KEY> = "FLAG";

        <org.apache.lucene.analysis.hunspell.HunspellDictionary: java.lang.String SUFFIX_KEY> = "SFX";

        <org.apache.lucene.analysis.hunspell.HunspellDictionary: java.lang.String PREFIX_KEY> = "PFX";

        <org.apache.lucene.analysis.hunspell.HunspellDictionary: java.lang.String ALIAS_KEY> = "AF";

        $r0 = new org.apache.lucene.analysis.hunspell.HunspellWord;

        specialinvoke $r0.<org.apache.lucene.analysis.hunspell.HunspellWord: void <init>()>();

        <org.apache.lucene.analysis.hunspell.HunspellDictionary: org.apache.lucene.analysis.hunspell.HunspellWord NOFLAGS> = $r0;

        return;
    }
}
