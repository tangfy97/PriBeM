public abstract class org.springframework.web.context.request.AbstractRequestAttributes extends java.lang.Object implements org.springframework.web.context.request.RequestAttributes
{
    protected final java.util.Map requestDestructionCallbacks;
    private volatile boolean requestActive;

    public void <init>()
    {
        java.util.LinkedHashMap $r1;
        org.springframework.web.context.request.AbstractRequestAttributes r0;

        r0 := @this: org.springframework.web.context.request.AbstractRequestAttributes;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>(int)>(8);

        r0.<org.springframework.web.context.request.AbstractRequestAttributes: java.util.Map requestDestructionCallbacks> = $r1;

        r0.<org.springframework.web.context.request.AbstractRequestAttributes: boolean requestActive> = 1;

        return;
    }

    public void requestCompleted()
    {
        org.springframework.web.context.request.AbstractRequestAttributes r0;

        r0 := @this: org.springframework.web.context.request.AbstractRequestAttributes;

        specialinvoke r0.<org.springframework.web.context.request.AbstractRequestAttributes: void executeRequestDestructionCallbacks()>();

        virtualinvoke r0.<org.springframework.web.context.request.AbstractRequestAttributes: void updateAccessedSessionAttributes()>();

        r0.<org.springframework.web.context.request.AbstractRequestAttributes: boolean requestActive> = 0;

        return;
    }

    protected final boolean isRequestActive()
    {
        org.springframework.web.context.request.AbstractRequestAttributes r0;
        boolean $z0;

        r0 := @this: org.springframework.web.context.request.AbstractRequestAttributes;

        $z0 = r0.<org.springframework.web.context.request.AbstractRequestAttributes: boolean requestActive>;

        return $z0;
    }

    protected final void registerRequestDestructionCallback(java.lang.String, java.lang.Runnable)
    {
        java.lang.Throwable $r5;
        java.util.Map $r3, $r4;
        java.lang.String r0;
        org.springframework.web.context.request.AbstractRequestAttributes r2;
        java.lang.Runnable r1;

        r2 := @this: org.springframework.web.context.request.AbstractRequestAttributes;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Runnable;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Name must not be null");

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "Callback must not be null");

        $r3 = r2.<org.springframework.web.context.request.AbstractRequestAttributes: java.util.Map requestDestructionCallbacks>;

        entermonitor $r3;

     label1:
        $r4 = r2.<org.springframework.web.context.request.AbstractRequestAttributes: java.util.Map requestDestructionCallbacks>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1);

        exitmonitor $r3;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        exitmonitor $r3;

     label4:
        throw $r5;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected final void removeRequestDestructionCallback(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.util.Map $r2, $r3;
        java.lang.String r0;
        org.springframework.web.context.request.AbstractRequestAttributes r1;

        r1 := @this: org.springframework.web.context.request.AbstractRequestAttributes;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Name must not be null");

        $r2 = r1.<org.springframework.web.context.request.AbstractRequestAttributes: java.util.Map requestDestructionCallbacks>;

        entermonitor $r2;

     label1:
        $r3 = r1.<org.springframework.web.context.request.AbstractRequestAttributes: java.util.Map requestDestructionCallbacks>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r0);

        exitmonitor $r2;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r2;

     label4:
        throw $r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void executeRequestDestructionCallbacks()
    {
        java.lang.Throwable $r8;
        java.util.Iterator $r4;
        java.util.Collection $r3;
        org.springframework.web.context.request.AbstractRequestAttributes r0;
        java.lang.Runnable r6;
        java.util.Map $r1, $r2, $r7;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: org.springframework.web.context.request.AbstractRequestAttributes;

        $r1 = r0.<org.springframework.web.context.request.AbstractRequestAttributes: java.util.Map requestDestructionCallbacks>;

        entermonitor $r1;

     label1:
        $r2 = r0.<org.springframework.web.context.request.AbstractRequestAttributes: java.util.Map requestDestructionCallbacks>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.Runnable) $r5;

        interfaceinvoke r6.<java.lang.Runnable: void run()>();

     label3:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        $r7 = r0.<org.springframework.web.context.request.AbstractRequestAttributes: java.util.Map requestDestructionCallbacks>;

        interfaceinvoke $r7.<java.util.Map: void clear()>();

        exitmonitor $r1;

     label4:
        goto label7;

     label5:
        $r8 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r8;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    protected abstract void updateAccessedSessionAttributes();
}
