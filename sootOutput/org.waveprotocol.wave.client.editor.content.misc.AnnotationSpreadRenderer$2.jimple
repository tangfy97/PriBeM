class org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer$2 extends java.lang.Object implements org.waveprotocol.wave.model.util.ReadableStringMap$ProcV
{
    final org.waveprotocol.wave.client.editor.content.ContentElement val$element;
    final org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer this$0;

    void <init>(org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer, org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer$2 r0;
        org.waveprotocol.wave.client.editor.content.ContentElement r2;
        org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer$2;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentElement;

        r0.<org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer$2: org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer this$0> = r1;

        r0.<org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer$2: org.waveprotocol.wave.client.editor.content.ContentElement val$element> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void apply(java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer $r4;
        org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer$2 r0;
        org.waveprotocol.wave.client.editor.content.ContentElement $r3;
        java.lang.String r1, r2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer$2;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r4 = r0.<org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer$2: org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer this$0>;

        $r3 = r0.<org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer$2: org.waveprotocol.wave.client.editor.content.ContentElement val$element>;

        staticinvoke <org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer: void access$200(org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer,org.waveprotocol.wave.client.editor.content.ContentElement,java.lang.String,java.lang.String)>($r4, $r3, r1, r2);

        return;
    }

    public volatile void apply(java.lang.String, java.lang.Object)
    {
        org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer$2 r0;
        java.lang.Object r2;
        java.lang.String r1, $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer$2;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r3 = (java.lang.String) r2;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.misc.AnnotationSpreadRenderer$2: void apply(java.lang.String,java.lang.String)>(r1, $r3);

        return;
    }
}
