public class org.apache.commons.io.input.XmlStreamReader extends java.io.Reader
{
    private static final int BUFFER_SIZE;
    private static final java.lang.String UTF_8;
    private static final java.lang.String US_ASCII;
    private static final java.lang.String UTF_16BE;
    private static final java.lang.String UTF_16LE;
    private static final java.lang.String UTF_16;
    private static final java.lang.String EBCDIC;
    private static final org.apache.commons.io.ByteOrderMark[] BOMS;
    private static final org.apache.commons.io.ByteOrderMark[] XML_GUESS_BYTES;
    private final java.io.Reader reader;
    private final java.lang.String encoding;
    private final java.lang.String defaultEncoding;
    private static final java.util.regex.Pattern CHARSET_PATTERN;
    public static final java.util.regex.Pattern ENCODING_PATTERN;
    private static final java.lang.String RAW_EX_1;
    private static final java.lang.String RAW_EX_2;
    private static final java.lang.String HTTP_EX_1;
    private static final java.lang.String HTTP_EX_2;
    private static final java.lang.String HTTP_EX_3;

    public java.lang.String getDefaultEncoding()
    {
        java.lang.String $r1;
        org.apache.commons.io.input.XmlStreamReader r0;

        r0 := @this: org.apache.commons.io.input.XmlStreamReader;

        $r1 = r0.<org.apache.commons.io.input.XmlStreamReader: java.lang.String defaultEncoding>;

        return $r1;
    }

    public void <init>(java.io.File) throws java.io.IOException
    {
        java.io.FileInputStream $r1;
        org.apache.commons.io.input.XmlStreamReader r0;
        java.io.File r2;

        r0 := @this: org.apache.commons.io.input.XmlStreamReader;

        r2 := @parameter0: java.io.File;

        $r1 = new java.io.FileInputStream;

        specialinvoke $r1.<java.io.FileInputStream: void <init>(java.io.File)>(r2);

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream)>($r1);

        return;
    }

    public void <init>(java.io.InputStream) throws java.io.IOException
    {
        org.apache.commons.io.input.XmlStreamReader r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.commons.io.input.XmlStreamReader;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,boolean)>(r1, 1);

        return;
    }

    public void <init>(java.io.InputStream, boolean) throws java.io.IOException
    {
        org.apache.commons.io.input.XmlStreamReader r0;
        java.io.InputStream r1;
        boolean z0;

        r0 := @this: org.apache.commons.io.input.XmlStreamReader;

        r1 := @parameter0: java.io.InputStream;

        z0 := @parameter1: boolean;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,boolean,java.lang.String)>(r1, z0, null);

        return;
    }

    public void <init>(java.io.InputStream, boolean, java.lang.String) throws java.io.IOException
    {
        java.io.BufferedInputStream $r3;
        java.io.InputStreamReader $r9;
        org.apache.commons.io.ByteOrderMark[] $r5, $r7;
        org.apache.commons.io.input.XmlStreamReader r0;
        org.apache.commons.io.input.BOMInputStream $r2, $r6;
        java.lang.String r1, $r8, $r10;
        java.io.InputStream r4;
        boolean z0;

        r0 := @this: org.apache.commons.io.input.XmlStreamReader;

        r4 := @parameter0: java.io.InputStream;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.lang.String;

        specialinvoke r0.<java.io.Reader: void <init>()>();

        r0.<org.apache.commons.io.input.XmlStreamReader: java.lang.String defaultEncoding> = r1;

        $r2 = new org.apache.commons.io.input.BOMInputStream;

        $r3 = new java.io.BufferedInputStream;

        specialinvoke $r3.<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>(r4, 4096);

        $r5 = <org.apache.commons.io.input.XmlStreamReader: org.apache.commons.io.ByteOrderMark[] BOMS>;

        specialinvoke $r2.<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream,boolean,org.apache.commons.io.ByteOrderMark[])>($r3, 0, $r5);

        $r6 = new org.apache.commons.io.input.BOMInputStream;

        $r7 = <org.apache.commons.io.input.XmlStreamReader: org.apache.commons.io.ByteOrderMark[] XML_GUESS_BYTES>;

        specialinvoke $r6.<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream,boolean,org.apache.commons.io.ByteOrderMark[])>($r2, 1, $r7);

        $r8 = specialinvoke r0.<org.apache.commons.io.input.XmlStreamReader: java.lang.String doRawStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,boolean)>($r2, $r6, z0);

        r0.<org.apache.commons.io.input.XmlStreamReader: java.lang.String encoding> = $r8;

        $r9 = new java.io.InputStreamReader;

        $r10 = r0.<org.apache.commons.io.input.XmlStreamReader: java.lang.String encoding>;

        specialinvoke $r9.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r6, $r10);

        r0.<org.apache.commons.io.input.XmlStreamReader: java.io.Reader reader> = $r9;

        return;
    }

    public void <init>(java.net.URL) throws java.io.IOException
    {
        org.apache.commons.io.input.XmlStreamReader r0;
        java.net.URL r1;
        java.net.URLConnection $r2;

        r0 := @this: org.apache.commons.io.input.XmlStreamReader;

        r1 := @parameter0: java.net.URL;

        $r2 = virtualinvoke r1.<java.net.URL: java.net.URLConnection openConnection()>();

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReader: void <init>(java.net.URLConnection,java.lang.String)>($r2, null);

        return;
    }

    public void <init>(java.net.URLConnection, java.lang.String) throws java.io.IOException
    {
        java.io.BufferedInputStream $r6;
        java.io.InputStreamReader $r11;
        org.apache.commons.io.ByteOrderMark[] $r7, $r9;
        org.apache.commons.io.input.XmlStreamReader r0;
        java.net.URLConnection r2;
        org.apache.commons.io.input.BOMInputStream $r5, $r8;
        java.lang.String r1, $r3, $r10, $r12, $r13;
        java.io.InputStream $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.io.input.XmlStreamReader;

        r2 := @parameter0: java.net.URLConnection;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<java.io.Reader: void <init>()>();

        r0.<org.apache.commons.io.input.XmlStreamReader: java.lang.String defaultEncoding> = r1;

        $r3 = virtualinvoke r2.<java.net.URLConnection: java.lang.String getContentType()>();

        $r4 = virtualinvoke r2.<java.net.URLConnection: java.io.InputStream getInputStream()>();

        $r5 = new org.apache.commons.io.input.BOMInputStream;

        $r6 = new java.io.BufferedInputStream;

        specialinvoke $r6.<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>($r4, 4096);

        $r7 = <org.apache.commons.io.input.XmlStreamReader: org.apache.commons.io.ByteOrderMark[] BOMS>;

        specialinvoke $r5.<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream,boolean,org.apache.commons.io.ByteOrderMark[])>($r6, 0, $r7);

        $r8 = new org.apache.commons.io.input.BOMInputStream;

        $r9 = <org.apache.commons.io.input.XmlStreamReader: org.apache.commons.io.ByteOrderMark[] XML_GUESS_BYTES>;

        specialinvoke $r8.<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream,boolean,org.apache.commons.io.ByteOrderMark[])>($r5, 1, $r9);

        $z0 = r2 instanceof java.net.HttpURLConnection;

        if $z0 != 0 goto label1;

        if $r3 == null goto label2;

     label1:
        $r10 = specialinvoke r0.<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>($r5, $r8, $r3, 1);

        r0.<org.apache.commons.io.input.XmlStreamReader: java.lang.String encoding> = $r10;

        goto label3;

     label2:
        $r13 = specialinvoke r0.<org.apache.commons.io.input.XmlStreamReader: java.lang.String doRawStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,boolean)>($r5, $r8, 1);

        r0.<org.apache.commons.io.input.XmlStreamReader: java.lang.String encoding> = $r13;

     label3:
        $r11 = new java.io.InputStreamReader;

        $r12 = r0.<org.apache.commons.io.input.XmlStreamReader: java.lang.String encoding>;

        specialinvoke $r11.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r8, $r12);

        r0.<org.apache.commons.io.input.XmlStreamReader: java.io.Reader reader> = $r11;

        return;
    }

    public void <init>(java.io.InputStream, java.lang.String) throws java.io.IOException
    {
        java.lang.String r2;
        org.apache.commons.io.input.XmlStreamReader r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.commons.io.input.XmlStreamReader;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean)>(r1, r2, 1);

        return;
    }

    public void <init>(java.io.InputStream, java.lang.String, boolean, java.lang.String) throws java.io.IOException
    {
        java.io.BufferedInputStream $r3;
        java.io.InputStreamReader $r10;
        org.apache.commons.io.ByteOrderMark[] $r5, $r7;
        org.apache.commons.io.input.XmlStreamReader r0;
        org.apache.commons.io.input.BOMInputStream $r2, $r6;
        java.lang.String r1, r8, $r9, $r11;
        java.io.InputStream r4;
        boolean z0;

        r0 := @this: org.apache.commons.io.input.XmlStreamReader;

        r4 := @parameter0: java.io.InputStream;

        r8 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r1 := @parameter3: java.lang.String;

        specialinvoke r0.<java.io.Reader: void <init>()>();

        r0.<org.apache.commons.io.input.XmlStreamReader: java.lang.String defaultEncoding> = r1;

        $r2 = new org.apache.commons.io.input.BOMInputStream;

        $r3 = new java.io.BufferedInputStream;

        specialinvoke $r3.<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>(r4, 4096);

        $r5 = <org.apache.commons.io.input.XmlStreamReader: org.apache.commons.io.ByteOrderMark[] BOMS>;

        specialinvoke $r2.<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream,boolean,org.apache.commons.io.ByteOrderMark[])>($r3, 0, $r5);

        $r6 = new org.apache.commons.io.input.BOMInputStream;

        $r7 = <org.apache.commons.io.input.XmlStreamReader: org.apache.commons.io.ByteOrderMark[] XML_GUESS_BYTES>;

        specialinvoke $r6.<org.apache.commons.io.input.BOMInputStream: void <init>(java.io.InputStream,boolean,org.apache.commons.io.ByteOrderMark[])>($r2, 1, $r7);

        $r9 = specialinvoke r0.<org.apache.commons.io.input.XmlStreamReader: java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream,org.apache.commons.io.input.BOMInputStream,java.lang.String,boolean)>($r2, $r6, r8, z0);

        r0.<org.apache.commons.io.input.XmlStreamReader: java.lang.String encoding> = $r9;

        $r10 = new java.io.InputStreamReader;

        $r11 = r0.<org.apache.commons.io.input.XmlStreamReader: java.lang.String encoding>;

        specialinvoke $r10.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r6, $r11);

        r0.<org.apache.commons.io.input.XmlStreamReader: java.io.Reader reader> = $r10;

        return;
    }

    public void <init>(java.io.InputStream, java.lang.String, boolean) throws java.io.IOException
    {
        org.apache.commons.io.input.XmlStreamReader r0;
        java.lang.String r2;
        java.io.InputStream r1;
        boolean z0;

        r0 := @this: org.apache.commons.io.input.XmlStreamReader;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        specialinvoke r0.<org.apache.commons.io.input.XmlStreamReader: void <init>(java.io.InputStream,java.lang.String,boolean,java.lang.String)>(r1, r2, z0, null);

        return;
    }

    public java.lang.String getEncoding()
    {
        java.lang.String $r1;
        org.apache.commons.io.input.XmlStreamReader r0;

        r0 := @this: org.apache.commons.io.input.XmlStreamReader;

        $r1 = r0.<org.apache.commons.io.input.XmlStreamReader: java.lang.String encoding>;

        return $r1;
    }

    public int read(char[], int, int) throws java.io.IOException
    {
        org.apache.commons.io.input.XmlStreamReader r0;
        int i0, i1, $i2;
        char[] r1;
        java.io.Reader $r2;

        r0 := @this: org.apache.commons.io.input.XmlStreamReader;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.apache.commons.io.input.XmlStreamReader: java.io.Reader reader>;

        $i2 = virtualinvoke $r2.<java.io.Reader: int read(char[],int,int)>(r1, i0, i1);

        return $i2;
    }

    public void close() throws java.io.IOException
    {
        java.io.Reader $r1;
        org.apache.commons.io.input.XmlStreamReader r0;

        r0 := @this: org.apache.commons.io.input.XmlStreamReader;

        $r1 = r0.<org.apache.commons.io.input.XmlStreamReader: java.io.Reader reader>;

        virtualinvoke $r1.<java.io.Reader: void close()>();

        return;
    }

    private java.lang.String doRawStream(org.apache.commons.io.input.BOMInputStream, org.apache.commons.io.input.BOMInputStream, boolean) throws java.io.IOException
    {
        org.apache.commons.io.input.XmlStreamReaderException $r7;
        org.apache.commons.io.input.XmlStreamReader r5;
        org.apache.commons.io.input.BOMInputStream r0, r2;
        java.lang.String $r1, $r3, $r4, $r6, $r8;
        boolean z0;

        r5 := @this: org.apache.commons.io.input.XmlStreamReader;

        r0 := @parameter0: org.apache.commons.io.input.BOMInputStream;

        r2 := @parameter1: org.apache.commons.io.input.BOMInputStream;

        z0 := @parameter2: boolean;

        $r1 = virtualinvoke r0.<org.apache.commons.io.input.BOMInputStream: java.lang.String getBOMCharsetName()>();

        $r3 = virtualinvoke r2.<org.apache.commons.io.input.BOMInputStream: java.lang.String getBOMCharsetName()>();

        $r4 = staticinvoke <org.apache.commons.io.input.XmlStreamReader: java.lang.String getXmlProlog(java.io.InputStream,java.lang.String)>(r2, $r3);

     label1:
        $r6 = virtualinvoke r5.<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)>($r1, $r3, $r4);

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        if z0 == 0 goto label4;

        $r8 = specialinvoke r5.<org.apache.commons.io.input.XmlStreamReader: java.lang.String doLenientDetection(java.lang.String,org.apache.commons.io.input.XmlStreamReaderException)>(null, $r7);

        return $r8;

     label4:
        throw $r7;

        catch org.apache.commons.io.input.XmlStreamReaderException from label1 to label2 with label3;
    }

    private java.lang.String doHttpStream(org.apache.commons.io.input.BOMInputStream, org.apache.commons.io.input.BOMInputStream, java.lang.String, boolean) throws java.io.IOException
    {
        org.apache.commons.io.input.XmlStreamReaderException $r8;
        org.apache.commons.io.input.XmlStreamReader r5;
        org.apache.commons.io.input.BOMInputStream r0, r2;
        java.lang.String $r1, $r3, $r4, r6, $r7, $r9;
        boolean z0;

        r5 := @this: org.apache.commons.io.input.XmlStreamReader;

        r0 := @parameter0: org.apache.commons.io.input.BOMInputStream;

        r2 := @parameter1: org.apache.commons.io.input.BOMInputStream;

        r6 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        $r1 = virtualinvoke r0.<org.apache.commons.io.input.BOMInputStream: java.lang.String getBOMCharsetName()>();

        $r3 = virtualinvoke r2.<org.apache.commons.io.input.BOMInputStream: java.lang.String getBOMCharsetName()>();

        $r4 = staticinvoke <org.apache.commons.io.input.XmlStreamReader: java.lang.String getXmlProlog(java.io.InputStream,java.lang.String)>(r2, $r3);

     label1:
        $r7 = virtualinvoke r5.<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>(r6, $r1, $r3, $r4, z0);

     label2:
        return $r7;

     label3:
        $r8 := @caughtexception;

        if z0 == 0 goto label4;

        $r9 = specialinvoke r5.<org.apache.commons.io.input.XmlStreamReader: java.lang.String doLenientDetection(java.lang.String,org.apache.commons.io.input.XmlStreamReaderException)>(r6, $r8);

        return $r9;

     label4:
        throw $r8;

        catch org.apache.commons.io.input.XmlStreamReaderException from label1 to label2 with label3;
    }

    private java.lang.String doLenientDetection(java.lang.String, org.apache.commons.io.input.XmlStreamReaderException) throws java.io.IOException
    {
        org.apache.commons.io.input.XmlStreamReaderException $r12, r14;
        org.apache.commons.io.input.XmlStreamReader r0;
        int $i0;
        java.lang.String $r1, $r2, $r3, $r7, $r8, $r9, $r10, $r11, r13, $r15, r16, $r17;
        boolean $z0;
        java.lang.StringBuilder $r4, $r5, $r6;

        r0 := @this: org.apache.commons.io.input.XmlStreamReader;

        r13 := @parameter0: java.lang.String;

        r14 := @parameter1: org.apache.commons.io.input.XmlStreamReaderException;

        if r13 == null goto label4;

        $z0 = virtualinvoke r13.<java.lang.String: boolean startsWith(java.lang.String)>("text/html");

        if $z0 == 0 goto label4;

        $r2 = "text/html";

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        $r3 = virtualinvoke r13.<java.lang.String: java.lang.String substring(int)>($i0);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("text/xml");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r8 = virtualinvoke r14.<org.apache.commons.io.input.XmlStreamReaderException: java.lang.String getBomEncoding()>();

        $r9 = virtualinvoke r14.<org.apache.commons.io.input.XmlStreamReaderException: java.lang.String getXmlGuessEncoding()>();

        $r10 = virtualinvoke r14.<org.apache.commons.io.input.XmlStreamReaderException: java.lang.String getXmlEncoding()>();

        $r11 = virtualinvoke r0.<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateHttpEncoding(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>($r7, $r8, $r9, $r10, 1);

     label2:
        return $r11;

     label3:
        $r12 := @caughtexception;

        r14 = $r12;

     label4:
        $r15 = virtualinvoke r14.<org.apache.commons.io.input.XmlStreamReaderException: java.lang.String getXmlEncoding()>();

        r16 = $r15;

        if $r15 != null goto label5;

        r16 = virtualinvoke r14.<org.apache.commons.io.input.XmlStreamReaderException: java.lang.String getContentTypeEncoding()>();

     label5:
        if r16 != null goto label8;

        $r1 = r0.<org.apache.commons.io.input.XmlStreamReader: java.lang.String defaultEncoding>;

        if $r1 != null goto label6;

        $r17 = "UTF-8";

        goto label7;

     label6:
        $r17 = r0.<org.apache.commons.io.input.XmlStreamReader: java.lang.String defaultEncoding>;

     label7:
        r16 = $r17;

     label8:
        return r16;

        catch org.apache.commons.io.input.XmlStreamReaderException from label1 to label2 with label3;
    }

    java.lang.String calculateRawEncoding(java.lang.String, java.lang.String, java.lang.String) throws java.io.IOException
    {
        org.apache.commons.io.input.XmlStreamReaderException $r5, $r8, $r11, $r14, $r17;
        org.apache.commons.io.input.XmlStreamReader r18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.lang.Object[] $r3, $r6, $r9, $r12, $r15;
        java.lang.String r0, r1, r2, $r4, $r7, $r10, $r13, $r16, $r19, $r20;

        r18 := @this: org.apache.commons.io.input.XmlStreamReader;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        if r0 != null goto label07;

        if r1 == null goto label01;

        if r2 != null goto label04;

     label01:
        $r19 = r18.<org.apache.commons.io.input.XmlStreamReader: java.lang.String defaultEncoding>;

        if $r19 != null goto label02;

        $r20 = "UTF-8";

        goto label03;

     label02:
        $r20 = r18.<org.apache.commons.io.input.XmlStreamReader: java.lang.String defaultEncoding>;

     label03:
        return $r20;

     label04:
        $z8 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("UTF-16");

        if $z8 == 0 goto label06;

        $z9 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("UTF-16BE");

        if $z9 != 0 goto label05;

        $z10 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("UTF-16LE");

        if $z10 == 0 goto label06;

     label05:
        return r1;

     label06:
        return r2;

     label07:
        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("UTF-8");

        if $z0 == 0 goto label10;

        if r1 == null goto label08;

        $z7 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("UTF-8");

        if $z7 != 0 goto label08;

        $r15 = newarray (java.lang.Object)[3];

        $r15[0] = r0;

        $r15[1] = r1;

        $r15[2] = r2;

        $r16 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>("Invalid encoding, BOM [{0}] XML guess [{1}] XML prolog [{2}] encoding mismatch", $r15);

        $r17 = new org.apache.commons.io.input.XmlStreamReaderException;

        specialinvoke $r17.<org.apache.commons.io.input.XmlStreamReaderException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r16, r0, r1, r2);

        throw $r17;

     label08:
        if r2 == null goto label09;

        $z6 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("UTF-8");

        if $z6 != 0 goto label09;

        $r12 = newarray (java.lang.Object)[3];

        $r12[0] = r0;

        $r12[1] = r1;

        $r12[2] = r2;

        $r13 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>("Invalid encoding, BOM [{0}] XML guess [{1}] XML prolog [{2}] encoding mismatch", $r12);

        $r14 = new org.apache.commons.io.input.XmlStreamReaderException;

        specialinvoke $r14.<org.apache.commons.io.input.XmlStreamReaderException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r13, r0, r1, r2);

        throw $r14;

     label09:
        return r0;

     label10:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("UTF-16BE");

        if $z1 != 0 goto label11;

        $z5 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("UTF-16LE");

        if $z5 == 0 goto label14;

     label11:
        if r1 == null goto label12;

        $z4 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z4 != 0 goto label12;

        $r6 = newarray (java.lang.Object)[3];

        $r6[0] = r0;

        $r6[1] = r1;

        $r6[2] = r2;

        $r7 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>("Invalid encoding, BOM [{0}] XML guess [{1}] XML prolog [{2}] encoding mismatch", $r6);

        $r8 = new org.apache.commons.io.input.XmlStreamReaderException;

        specialinvoke $r8.<org.apache.commons.io.input.XmlStreamReaderException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r7, r0, r1, r2);

        throw $r8;

     label12:
        if r2 == null goto label13;

        $z2 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("UTF-16");

        if $z2 != 0 goto label13;

        $z3 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z3 != 0 goto label13;

        $r3 = newarray (java.lang.Object)[3];

        $r3[0] = r0;

        $r3[1] = r1;

        $r3[2] = r2;

        $r4 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>("Invalid encoding, BOM [{0}] XML guess [{1}] XML prolog [{2}] encoding mismatch", $r3);

        $r5 = new org.apache.commons.io.input.XmlStreamReaderException;

        specialinvoke $r5.<org.apache.commons.io.input.XmlStreamReaderException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r4, r0, r1, r2);

        throw $r5;

     label13:
        return r0;

     label14:
        $r9 = newarray (java.lang.Object)[3];

        $r9[0] = r0;

        $r9[1] = r1;

        $r9[2] = r2;

        $r10 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>("Invalid encoding, BOM [{0}] XML guess [{1}] XML prolog [{2}] unknown BOM", $r9);

        $r11 = new org.apache.commons.io.input.XmlStreamReaderException;

        specialinvoke $r11.<org.apache.commons.io.input.XmlStreamReaderException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r10, r0, r1, r2);

        throw $r11;
    }

    java.lang.String calculateHttpEncoding(java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean) throws java.io.IOException
    {
        java.lang.Object[] $r4, $r9, $r15;
        org.apache.commons.io.input.XmlStreamReaderException $r8, $r11, $r17;
        org.apache.commons.io.input.XmlStreamReader r12;
        java.lang.String r0, $r1, $r2, r3, r5, r6, $r7, $r10, $r13, $r14, $r16, $r18;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r12 := @this: org.apache.commons.io.input.XmlStreamReader;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.String;

        r6 := @parameter3: java.lang.String;

        z0 := @parameter4: boolean;

        if z0 == 0 goto label01;

        if r6 == null goto label01;

        return r6;

     label01:
        $r1 = staticinvoke <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeMime(java.lang.String)>(r0);

        $r2 = staticinvoke <org.apache.commons.io.input.XmlStreamReader: java.lang.String getContentTypeEncoding(java.lang.String)>(r0);

        $z1 = staticinvoke <org.apache.commons.io.input.XmlStreamReader: boolean isAppXml(java.lang.String)>($r1);

        $z2 = staticinvoke <org.apache.commons.io.input.XmlStreamReader: boolean isTextXml(java.lang.String)>($r1);

        if $z1 != 0 goto label02;

        if $z2 != 0 goto label02;

        $r15 = newarray (java.lang.Object)[5];

        $r15[0] = $r1;

        $r15[1] = $r2;

        $r15[2] = r3;

        $r15[3] = r5;

        $r15[4] = r6;

        $r16 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>("Invalid encoding, CT-MIME [{0}] CT-Enc [{1}] BOM [{2}] XML guess [{3}] XML prolog [{4}], Invalid MIME", $r15);

        $r17 = new org.apache.commons.io.input.XmlStreamReaderException;

        specialinvoke $r17.<org.apache.commons.io.input.XmlStreamReaderException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r16, $r1, $r2, r3, r5, r6);

        throw $r17;

     label02:
        if $r2 != null goto label06;

        if $z1 == 0 goto label03;

        $r14 = virtualinvoke r12.<org.apache.commons.io.input.XmlStreamReader: java.lang.String calculateRawEncoding(java.lang.String,java.lang.String,java.lang.String)>(r3, r5, r6);

        return $r14;

     label03:
        $r13 = r12.<org.apache.commons.io.input.XmlStreamReader: java.lang.String defaultEncoding>;

        if $r13 != null goto label04;

        $r18 = "US-ASCII";

        goto label05;

     label04:
        $r18 = r12.<org.apache.commons.io.input.XmlStreamReader: java.lang.String defaultEncoding>;

     label05:
        return $r18;

     label06:
        $z3 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("UTF-16BE");

        if $z3 != 0 goto label07;

        $z4 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("UTF-16LE");

        if $z4 == 0 goto label09;

     label07:
        if r3 == null goto label08;

        $r4 = newarray (java.lang.Object)[5];

        $r4[0] = $r1;

        $r4[1] = $r2;

        $r4[2] = r3;

        $r4[3] = r5;

        $r4[4] = r6;

        $r7 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>("Invalid encoding, CT-MIME [{0}] CT-Enc [{1}] BOM [{2}] XML guess [{3}] XML prolog [{4}], BOM must be NULL", $r4);

        $r8 = new org.apache.commons.io.input.XmlStreamReaderException;

        specialinvoke $r8.<org.apache.commons.io.input.XmlStreamReaderException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r7, $r1, $r2, r3, r5, r6);

        throw $r8;

     label08:
        return $r2;

     label09:
        $z5 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("UTF-16");

        if $z5 == 0 goto label11;

        if r3 == null goto label10;

        $z6 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>("UTF-16");

        if $z6 == 0 goto label10;

        return r3;

     label10:
        $r9 = newarray (java.lang.Object)[5];

        $r9[0] = $r1;

        $r9[1] = $r2;

        $r9[2] = r3;

        $r9[3] = r5;

        $r9[4] = r6;

        $r10 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>("Invalid encoding, CT-MIME [{0}] CT-Enc [{1}] BOM [{2}] XML guess [{3}] XML prolog [{4}], encoding mismatch", $r9);

        $r11 = new org.apache.commons.io.input.XmlStreamReaderException;

        specialinvoke $r11.<org.apache.commons.io.input.XmlStreamReaderException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r10, $r1, $r2, r3, r5, r6);

        throw $r11;

     label11:
        return $r2;
    }

    static java.lang.String getContentTypeMime(java.lang.String)
    {
        int $i0;
        java.lang.String r0, r1, r2;

        r0 := @parameter0: java.lang.String;

        r1 = null;

        if r0 == null goto label3;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>(";");

        if $i0 < 0 goto label1;

        r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        goto label2;

     label1:
        r2 = r0;

     label2:
        r1 = virtualinvoke r2.<java.lang.String: java.lang.String trim()>();

     label3:
        return r1;
    }

    static java.lang.String getContentTypeEncoding(java.lang.String)
    {
        java.util.regex.Matcher $r3;
        int $i0, $i1, $i3;
        java.lang.String r0, $r1, r4, $r5, $r6;
        java.util.regex.Pattern $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r4 = null;

        if r0 == null goto label5;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>(";");

        $i3 = (int) -1;

        if $i0 <= $i3 goto label5;

        $i1 = $i0 + 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1);

        $r2 = <org.apache.commons.io.input.XmlStreamReader: java.util.regex.Pattern CHARSET_PATTERN>;

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r1);

        $z0 = virtualinvoke $r3.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        goto label2;

     label1:
        $r5 = null;

     label2:
        if $r5 == null goto label3;

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String toUpperCase()>();

        goto label4;

     label3:
        $r6 = null;

     label4:
        r4 = $r6;

     label5:
        return r4;
    }

    private static java.lang.String getXmlProlog(java.io.InputStream, java.lang.String) throws java.io.IOException
    {
        byte[] r1;
        java.util.regex.Matcher $r8;
        boolean $z0;
        java.lang.StringBuilder $r13, $r14, $r15, $r24;
        java.util.regex.Pattern $r7;
        java.lang.StringBuffer $r28;
        int $i0, $i1, $i2, i3, i4, i5, i6, $i8, $i10, $i12, $i14, $i16;
        java.lang.String r0, $r5, $r9, $r10, $r16, r19, r20, r21, $r22;
        java.io.IOException $r23, $r25;
        java.io.StringReader $r26;
        java.io.BufferedReader $r27;
        java.io.InputStream r2;

        r2 := @parameter0: java.io.InputStream;

        r0 := @parameter1: java.lang.String;

        r19 = null;

        if r0 == null goto label7;

        r1 = newarray (byte)[4096];

        virtualinvoke r2.<java.io.InputStream: void mark(int)>(4096);

        i3 = 0;

        i4 = 4096;

        i5 = virtualinvoke r2.<java.io.InputStream: int read(byte[],int,int)>(r1, 0, 4096);

        $i8 = (int) -1;

        i6 = $i8;

        r20 = null;

     label1:
        $i10 = (int) -1;

        if i5 == $i10 goto label2;

        $i12 = (int) -1;

        if i6 != $i12 goto label2;

        if i3 >= 4096 goto label2;

        i3 = i3 + i5;

        i4 = i4 - i5;

        i5 = virtualinvoke r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i3, i4);

        $r22 = new java.lang.String;

        specialinvoke $r22.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>(r1, 0, i3, r0);

        r20 = $r22;

        i6 = virtualinvoke $r22.<java.lang.String: int indexOf(int)>(62);

        goto label1;

     label2:
        $i14 = (int) -1;

        if i6 != $i14 goto label4;

        $i16 = (int) -1;

        if i5 != $i16 goto label3;

        $r23 = new java.io.IOException;

        specialinvoke $r23.<java.io.IOException: void <init>(java.lang.String)>("Unexpected end of XML stream");

        throw $r23;

     label3:
        $r25 = new java.io.IOException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("XML prolog or ROOT element not found on first ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.io.IOException: void <init>(java.lang.String)>($r16);

        throw $r25;

     label4:
        if i3 <= 0 goto label7;

        virtualinvoke r2.<java.io.InputStream: void reset()>();

        $r27 = new java.io.BufferedReader;

        $r26 = new java.io.StringReader;

        $i0 = i6 + 1;

        $r5 = virtualinvoke r20.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        specialinvoke $r26.<java.io.StringReader: void <init>(java.lang.String)>($r5);

        specialinvoke $r27.<java.io.BufferedReader: void <init>(java.io.Reader)>($r26);

        $r28 = new java.lang.StringBuffer;

        specialinvoke $r28.<java.lang.StringBuffer: void <init>()>();

        r21 = virtualinvoke $r27.<java.io.BufferedReader: java.lang.String readLine()>();

     label5:
        if r21 == null goto label6;

        virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r21);

        r21 = virtualinvoke $r27.<java.io.BufferedReader: java.lang.String readLine()>();

        goto label5;

     label6:
        $r7 = <org.apache.commons.io.input.XmlStreamReader: java.util.regex.Pattern ENCODING_PATTERN>;

        $r8 = virtualinvoke $r7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r28);

        $z0 = virtualinvoke $r8.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label7;

        $r9 = virtualinvoke $r8.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r10 = virtualinvoke $r9.<java.lang.String: java.lang.String toUpperCase()>();

        $i1 = virtualinvoke $r10.<java.lang.String: int length()>();

        $i2 = $i1 - 1;

        r19 = virtualinvoke $r10.<java.lang.String: java.lang.String substring(int,int)>(1, $i2);

     label7:
        return r19;
    }

    static boolean isAppXml(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label2;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("application/xml");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("application/xml-dtd");

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("application/xml-external-parsed-entity");

        if $z2 != 0 goto label1;

        $z3 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("application/");

        if $z3 == 0 goto label2;

        $z4 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>("+xml");

        if $z4 == 0 goto label2;

     label1:
        $z5 = 1;

        goto label3;

     label2:
        $z5 = 0;

     label3:
        return $z5;
    }

    static boolean isTextXml(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label2;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("text/xml");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("text/xml-external-parsed-entity");

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("text/");

        if $z2 == 0 goto label2;

        $z3 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>("+xml");

        if $z3 == 0 goto label2;

     label1:
        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        return $z4;
    }

    static void <clinit>()
    {
        org.apache.commons.io.ByteOrderMark $r1, $r2, $r3, $r5, $r7, $r9, $r11;
        org.apache.commons.io.ByteOrderMark[] $r0, $r4;
        int[] $r6, $r8, $r10, $r12;
        java.util.regex.Pattern $r13, $r14;

        <org.apache.commons.io.input.XmlStreamReader: java.lang.String HTTP_EX_3> = "Invalid encoding, CT-MIME [{0}] CT-Enc [{1}] BOM [{2}] XML guess [{3}] XML prolog [{4}], Invalid MIME";

        <org.apache.commons.io.input.XmlStreamReader: java.lang.String HTTP_EX_2> = "Invalid encoding, CT-MIME [{0}] CT-Enc [{1}] BOM [{2}] XML guess [{3}] XML prolog [{4}], encoding mismatch";

        <org.apache.commons.io.input.XmlStreamReader: java.lang.String HTTP_EX_1> = "Invalid encoding, CT-MIME [{0}] CT-Enc [{1}] BOM [{2}] XML guess [{3}] XML prolog [{4}], BOM must be NULL";

        <org.apache.commons.io.input.XmlStreamReader: java.lang.String RAW_EX_2> = "Invalid encoding, BOM [{0}] XML guess [{1}] XML prolog [{2}] unknown BOM";

        <org.apache.commons.io.input.XmlStreamReader: java.lang.String RAW_EX_1> = "Invalid encoding, BOM [{0}] XML guess [{1}] XML prolog [{2}] encoding mismatch";

        <org.apache.commons.io.input.XmlStreamReader: java.lang.String EBCDIC> = "CP1047";

        <org.apache.commons.io.input.XmlStreamReader: java.lang.String UTF_16> = "UTF-16";

        <org.apache.commons.io.input.XmlStreamReader: java.lang.String UTF_16LE> = "UTF-16LE";

        <org.apache.commons.io.input.XmlStreamReader: java.lang.String UTF_16BE> = "UTF-16BE";

        <org.apache.commons.io.input.XmlStreamReader: java.lang.String US_ASCII> = "US-ASCII";

        <org.apache.commons.io.input.XmlStreamReader: java.lang.String UTF_8> = "UTF-8";

        <org.apache.commons.io.input.XmlStreamReader: int BUFFER_SIZE> = 4096;

        $r0 = newarray (org.apache.commons.io.ByteOrderMark)[3];

        $r1 = <org.apache.commons.io.ByteOrderMark: org.apache.commons.io.ByteOrderMark UTF_8>;

        $r0[0] = $r1;

        $r2 = <org.apache.commons.io.ByteOrderMark: org.apache.commons.io.ByteOrderMark UTF_16BE>;

        $r0[1] = $r2;

        $r3 = <org.apache.commons.io.ByteOrderMark: org.apache.commons.io.ByteOrderMark UTF_16LE>;

        $r0[2] = $r3;

        <org.apache.commons.io.input.XmlStreamReader: org.apache.commons.io.ByteOrderMark[] BOMS> = $r0;

        $r4 = newarray (org.apache.commons.io.ByteOrderMark)[4];

        $r5 = new org.apache.commons.io.ByteOrderMark;

        $r6 = newarray (int)[4];

        $r6[0] = 60;

        $r6[1] = 63;

        $r6[2] = 120;

        $r6[3] = 109;

        specialinvoke $r5.<org.apache.commons.io.ByteOrderMark: void <init>(java.lang.String,int[])>("UTF-8", $r6);

        $r4[0] = $r5;

        $r7 = new org.apache.commons.io.ByteOrderMark;

        $r8 = newarray (int)[4];

        $r8[0] = 0;

        $r8[1] = 60;

        $r8[2] = 0;

        $r8[3] = 63;

        specialinvoke $r7.<org.apache.commons.io.ByteOrderMark: void <init>(java.lang.String,int[])>("UTF-16BE", $r8);

        $r4[1] = $r7;

        $r9 = new org.apache.commons.io.ByteOrderMark;

        $r10 = newarray (int)[4];

        $r10[0] = 60;

        $r10[1] = 0;

        $r10[2] = 63;

        $r10[3] = 0;

        specialinvoke $r9.<org.apache.commons.io.ByteOrderMark: void <init>(java.lang.String,int[])>("UTF-16LE", $r10);

        $r4[2] = $r9;

        $r11 = new org.apache.commons.io.ByteOrderMark;

        $r12 = newarray (int)[4];

        $r12[0] = 76;

        $r12[1] = 111;

        $r12[2] = 167;

        $r12[3] = 148;

        specialinvoke $r11.<org.apache.commons.io.ByteOrderMark: void <init>(java.lang.String,int[])>("CP1047", $r12);

        $r4[3] = $r11;

        <org.apache.commons.io.input.XmlStreamReader: org.apache.commons.io.ByteOrderMark[] XML_GUESS_BYTES> = $r4;

        $r13 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("charset=[\"\']?([.[^; \"\']]*)[\"\']?");

        <org.apache.commons.io.input.XmlStreamReader: java.util.regex.Pattern CHARSET_PATTERN> = $r13;

        $r14 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>("<\\?xml.*encoding[\\s]*=[\\s]*((?:\".[^\"]*\")|(?:\'.[^\']*\'))", 8);

        <org.apache.commons.io.input.XmlStreamReader: java.util.regex.Pattern ENCODING_PATTERN> = $r14;

        return;
    }
}
