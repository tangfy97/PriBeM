final class org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$ByteDeser extends org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$Base
{

    public void <init>()
    {
        org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$ByteDeser r0;

        r0 := @this: org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$ByteDeser;

        specialinvoke r0.<org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$Base: void <init>(java.lang.Class)>(class "[B");

        return;
    }

    public byte[] deserialize(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        byte[] $r11, $r20, $r22, $r23, $r25, r26;
        org.codehaus.jackson.JsonToken $r1, $r2, $r3, $r8, $r9, $r12, $r14, $r15;
        byte b3;
        org.codehaus.jackson.Base64Variant $r24;
        boolean $z0, $z1;
        org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$ByteDeser r16;
        org.codehaus.jackson.map.util.ArrayBuilders $r5;
        org.codehaus.jackson.map.DeserializationContext r4;
        org.codehaus.jackson.map.JsonMappingException $r19;
        int $i0, $i1, i2;
        org.codehaus.jackson.JsonParser r0;
        org.codehaus.jackson.map.util.ArrayBuilders$ByteBuilder $r6;
        java.lang.Object $r7, $r10, $r13, $r21;
        java.lang.Class $r17, $r18;

        r16 := @this: org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$ByteDeser;

        r0 := @parameter0: org.codehaus.jackson.JsonParser;

        r4 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r2 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        if $r1 != $r2 goto label01;

        $r24 = virtualinvoke r4.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.Base64Variant getBase64Variant()>();

        $r25 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: byte[] getBinaryValue(org.codehaus.jackson.Base64Variant)>($r24);

        return $r25;

     label01:
        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_EMBEDDED_OBJECT>;

        if $r1 != $r3 goto label03;

        $r21 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.lang.Object getEmbeddedObject()>();

        if $r21 != null goto label02;

        return null;

     label02:
        $z1 = $r21 instanceof byte[];

        if $z1 == 0 goto label03;

        $r22 = (byte[]) $r21;

        $r23 = (byte[]) $r22;

        return $r23;

     label03:
        $z0 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: boolean isExpectedStartArrayToken()>();

        if $z0 != 0 goto label04;

        $r20 = specialinvoke r16.<org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$ByteDeser: byte[] handleNonArray(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>(r0, r4);

        return $r20;

     label04:
        $r5 = virtualinvoke r4.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.util.ArrayBuilders getArrayBuilders()>();

        $r6 = virtualinvoke $r5.<org.codehaus.jackson.map.util.ArrayBuilders: org.codehaus.jackson.map.util.ArrayBuilders$ByteBuilder getByteBuilder()>();

        $r7 = virtualinvoke $r6.<org.codehaus.jackson.map.util.ArrayBuilders$ByteBuilder: java.lang.Object resetAndStart()>();

        r26 = (byte[]) $r7;

        i2 = 0;

     label05:
        $r8 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        $r9 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_ARRAY>;

        if $r8 == $r9 goto label11;

        $r12 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_INT>;

        if $r8 == $r12 goto label06;

        $r14 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_FLOAT>;

        if $r8 != $r14 goto label07;

     label06:
        b3 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: byte getByteValue()>();

        goto label09;

     label07:
        $r15 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NULL>;

        if $r8 == $r15 goto label08;

        $r17 = r16.<org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$ByteDeser: java.lang.Class _valueClass>;

        $r18 = virtualinvoke $r17.<java.lang.Class: java.lang.Class getComponentType()>();

        $r19 = virtualinvoke r4.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class)>($r18);

        throw $r19;

     label08:
        b3 = 0;

     label09:
        $i0 = lengthof r26;

        if i2 < $i0 goto label10;

        $r13 = virtualinvoke $r6.<org.codehaus.jackson.map.util.ArrayBuilders$ByteBuilder: java.lang.Object appendCompletedChunk(java.lang.Object,int)>(r26, i2);

        r26 = (byte[]) $r13;

        i2 = 0;

     label10:
        $i1 = i2;

        i2 = i2 + 1;

        r26[$i1] = b3;

        goto label05;

     label11:
        $r10 = virtualinvoke $r6.<org.codehaus.jackson.map.util.ArrayBuilders$ByteBuilder: java.lang.Object completeAndClearBuffer(java.lang.Object,int)>(r26, i2);

        $r11 = (byte[]) $r10;

        return $r11;
    }

    private final byte[] handleNonArray(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        byte[] $r6;
        org.codehaus.jackson.JsonToken $r1, $r2, $r4, $r5, $r7, $r8;
        org.codehaus.jackson.map.DeserializationContext r3;
        org.codehaus.jackson.map.JsonMappingException $r12, $r14;
        byte b1;
        int $i0;
        java.lang.String $r16;
        org.codehaus.jackson.JsonParser r0;
        org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$ByteDeser r9;
        boolean $z0, $z1;
        org.codehaus.jackson.map.DeserializationConfig$Feature $r15, $r17;
        java.lang.Class $r10, $r11, $r13;

        r9 := @this: org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$ByteDeser;

        r0 := @parameter0: org.codehaus.jackson.JsonParser;

        r3 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r2 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        if $r1 != $r2 goto label1;

        $r15 = <org.codehaus.jackson.map.DeserializationConfig$Feature: org.codehaus.jackson.map.DeserializationConfig$Feature ACCEPT_EMPTY_STRING_AS_NULL_OBJECT>;

        $z0 = virtualinvoke r3.<org.codehaus.jackson.map.DeserializationContext: boolean isEnabled(org.codehaus.jackson.map.DeserializationConfig$Feature)>($r15);

        if $z0 == 0 goto label1;

        $r16 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        $i0 = virtualinvoke $r16.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        return null;

     label1:
        $r17 = <org.codehaus.jackson.map.DeserializationConfig$Feature: org.codehaus.jackson.map.DeserializationConfig$Feature ACCEPT_SINGLE_VALUE_AS_ARRAY>;

        $z1 = virtualinvoke r3.<org.codehaus.jackson.map.DeserializationContext: boolean isEnabled(org.codehaus.jackson.map.DeserializationConfig$Feature)>($r17);

        if $z1 != 0 goto label2;

        $r13 = r9.<org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$ByteDeser: java.lang.Class _valueClass>;

        $r14 = virtualinvoke r3.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class)>($r13);

        throw $r14;

     label2:
        $r4 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r5 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_INT>;

        if $r4 == $r5 goto label3;

        $r7 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_FLOAT>;

        if $r4 != $r7 goto label4;

     label3:
        b1 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: byte getByteValue()>();

        goto label6;

     label4:
        $r8 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NULL>;

        if $r4 == $r8 goto label5;

        $r10 = r9.<org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$ByteDeser: java.lang.Class _valueClass>;

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.Class getComponentType()>();

        $r12 = virtualinvoke r3.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class)>($r11);

        throw $r12;

     label5:
        b1 = 0;

     label6:
        $r6 = newarray (byte)[1];

        $r6[0] = b1;

        return $r6;
    }

    public volatile java.lang.Object deserialize(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        byte[] $r3;
        org.codehaus.jackson.JsonParser r1;
        org.codehaus.jackson.map.DeserializationContext r2;
        org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$ByteDeser r0;

        r0 := @this: org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$ByteDeser;

        r1 := @parameter0: org.codehaus.jackson.JsonParser;

        r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$ByteDeser: byte[] deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>(r1, r2);

        return $r3;
    }
}
