public class com.hp.hpl.jena.sparql.algebra.OpLib extends java.lang.Object
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.algebra.OpLib r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpLib;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.hp.hpl.jena.sparql.algebra.Op sub(com.hp.hpl.jena.sparql.algebra.op.Op1)
    {
        com.hp.hpl.jena.sparql.algebra.op.Op1 r0;
        com.hp.hpl.jena.sparql.algebra.Op $r1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.Op1;

        if r0 != null goto label1;

        $r1 = null;

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.Op1: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

     label2:
        return $r1;
    }

    public static boolean isProject(com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.Op r0;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        $z0 = r0 instanceof com.hp.hpl.jena.sparql.algebra.op.OpProject;

        return $z0;
    }

    public static com.hp.hpl.jena.sparql.algebra.op.OpProject asProject(com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.Op r0;
        com.hp.hpl.jena.sparql.algebra.op.OpProject $r1;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.algebra.OpLib: boolean isProject(com.hp.hpl.jena.sparql.algebra.Op)>(r0);

        if $z0 == 0 goto label1;

        $r1 = (com.hp.hpl.jena.sparql.algebra.op.OpProject) r0;

        goto label2;

     label1:
        $r1 = null;

     label2:
        return $r1;
    }

    public static boolean isDistinct(com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.Op r0;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        $z0 = r0 instanceof com.hp.hpl.jena.sparql.algebra.op.OpDistinct;

        return $z0;
    }

    public static com.hp.hpl.jena.sparql.algebra.op.OpDistinct asDistinct(com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpDistinct $r1;
        com.hp.hpl.jena.sparql.algebra.Op r0;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.algebra.OpLib: boolean isDistinct(com.hp.hpl.jena.sparql.algebra.Op)>(r0);

        if $z0 == 0 goto label1;

        $r1 = (com.hp.hpl.jena.sparql.algebra.op.OpDistinct) r0;

        goto label2;

     label1:
        $r1 = null;

     label2:
        return $r1;
    }

    public static boolean isReduced(com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.Op r0;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        $z0 = r0 instanceof com.hp.hpl.jena.sparql.algebra.op.OpReduced;

        return $z0;
    }

    public static com.hp.hpl.jena.sparql.algebra.op.OpReduced asReduced(com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpReduced $r1;
        com.hp.hpl.jena.sparql.algebra.Op r0;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.algebra.OpLib: boolean isReduced(com.hp.hpl.jena.sparql.algebra.Op)>(r0);

        if $z0 == 0 goto label1;

        $r1 = (com.hp.hpl.jena.sparql.algebra.op.OpReduced) r0;

        goto label2;

     label1:
        $r1 = null;

     label2:
        return $r1;
    }

    public static boolean isOrder(com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.Op r0;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        $z0 = r0 instanceof com.hp.hpl.jena.sparql.algebra.op.OpOrder;

        return $z0;
    }

    public static com.hp.hpl.jena.sparql.algebra.op.OpOrder asOrder(com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpOrder $r1;
        com.hp.hpl.jena.sparql.algebra.Op r0;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.algebra.OpLib: boolean isOrder(com.hp.hpl.jena.sparql.algebra.Op)>(r0);

        if $z0 == 0 goto label1;

        $r1 = (com.hp.hpl.jena.sparql.algebra.op.OpOrder) r0;

        goto label2;

     label1:
        $r1 = null;

     label2:
        return $r1;
    }

    public static boolean isSlice(com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.Op r0;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        $z0 = r0 instanceof com.hp.hpl.jena.sparql.algebra.op.OpSlice;

        return $z0;
    }

    public static com.hp.hpl.jena.sparql.algebra.op.OpSlice asSlice(com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpSlice $r1;
        com.hp.hpl.jena.sparql.algebra.Op r0;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.algebra.OpLib: boolean isSlice(com.hp.hpl.jena.sparql.algebra.Op)>(r0);

        if $z0 == 0 goto label1;

        $r1 = (com.hp.hpl.jena.sparql.algebra.op.OpSlice) r0;

        goto label2;

     label1:
        $r1 = null;

     label2:
        return $r1;
    }
}
