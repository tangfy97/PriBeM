public class org.apache.commons.compress.compressors.z.ZCompressorInputStream extends org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream
{
    private static final int MAGIC_1;
    private static final int MAGIC_2;
    private static final int BLOCK_MODE_MASK;
    private static final int MAX_CODE_SIZE_MASK;
    private final boolean blockMode;
    private final int maxCodeSize;
    private long totalCodesRead;

    public void <init>(java.io.InputStream) throws java.io.IOException
    {
        org.apache.commons.compress.compressors.z.ZCompressorInputStream r0;
        java.io.IOException $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.io.InputStream r1, $r2, $r3, $r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.compress.compressors.z.ZCompressorInputStream;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: void <init>(java.io.InputStream)>(r1);

        r0.<org.apache.commons.compress.compressors.z.ZCompressorInputStream: long totalCodesRead> = 0L;

        $r2 = r0.<org.apache.commons.compress.compressors.z.ZCompressorInputStream: java.io.InputStream in>;

        $i0 = virtualinvoke $r2.<java.io.InputStream: int read()>();

        $r3 = r0.<org.apache.commons.compress.compressors.z.ZCompressorInputStream: java.io.InputStream in>;

        $i1 = virtualinvoke $r3.<java.io.InputStream: int read()>();

        $r4 = r0.<org.apache.commons.compress.compressors.z.ZCompressorInputStream: java.io.InputStream in>;

        $i2 = virtualinvoke $r4.<java.io.InputStream: int read()>();

        if $i0 != 31 goto label1;

        if $i1 != 157 goto label1;

        if $i2 >= 0 goto label2;

     label1:
        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("Input is not in .Z format");

        throw $r5;

     label2:
        $i3 = $i2 & 128;

        if $i3 == 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        r0.<org.apache.commons.compress.compressors.z.ZCompressorInputStream: boolean blockMode> = $z1;

        $i4 = $i2 & 31;

        r0.<org.apache.commons.compress.compressors.z.ZCompressorInputStream: int maxCodeSize> = $i4;

        $z0 = r0.<org.apache.commons.compress.compressors.z.ZCompressorInputStream: boolean blockMode>;

        if $z0 == 0 goto label5;

        $i6 = r0.<org.apache.commons.compress.compressors.z.ZCompressorInputStream: int codeSize>;

        virtualinvoke r0.<org.apache.commons.compress.compressors.z.ZCompressorInputStream: void setClearCode(int)>($i6);

     label5:
        $i5 = r0.<org.apache.commons.compress.compressors.z.ZCompressorInputStream: int maxCodeSize>;

        virtualinvoke r0.<org.apache.commons.compress.compressors.z.ZCompressorInputStream: void initializeTables(int)>($i5);

        specialinvoke r0.<org.apache.commons.compress.compressors.z.ZCompressorInputStream: void clearEntries()>();

        return;
    }

    private void clearEntries()
    {
        int $i0, $i1;
        org.apache.commons.compress.compressors.z.ZCompressorInputStream r0;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.compressors.z.ZCompressorInputStream;

        r0.<org.apache.commons.compress.compressors.z.ZCompressorInputStream: int tableSize> = 256;

        $z0 = r0.<org.apache.commons.compress.compressors.z.ZCompressorInputStream: boolean blockMode>;

        if $z0 == 0 goto label1;

        $i0 = r0.<org.apache.commons.compress.compressors.z.ZCompressorInputStream: int tableSize>;

        $i1 = $i0 + 1;

        r0.<org.apache.commons.compress.compressors.z.ZCompressorInputStream: int tableSize> = $i1;

     label1:
        return;
    }

    protected int readNextCode() throws java.io.IOException
    {
        int $i0;
        org.apache.commons.compress.compressors.z.ZCompressorInputStream r0;
        long $l1, $l2;

        r0 := @this: org.apache.commons.compress.compressors.z.ZCompressorInputStream;

        $i0 = specialinvoke r0.<org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream: int readNextCode()>();

        if $i0 < 0 goto label1;

        $l1 = r0.<org.apache.commons.compress.compressors.z.ZCompressorInputStream: long totalCodesRead>;

        $l2 = $l1 + 1L;

        r0.<org.apache.commons.compress.compressors.z.ZCompressorInputStream: long totalCodesRead> = $l2;

     label1:
        return $i0;
    }

    private void reAlignReading() throws java.io.IOException
    {
        org.apache.commons.compress.compressors.z.ZCompressorInputStream r0;
        long $l0, $l1, l3, l4;
        byte $b2, $b5;
        int $i6;

        r0 := @this: org.apache.commons.compress.compressors.z.ZCompressorInputStream;

        $l0 = r0.<org.apache.commons.compress.compressors.z.ZCompressorInputStream: long totalCodesRead>;

        $l1 = $l0 % 8L;

        l3 = 8L - $l1;

        $b2 = l3 cmp 8L;

        if $b2 != 0 goto label1;

        l3 = 0L;

     label1:
        l4 = 0L;

     label2:
        $b5 = l4 cmp l3;

        $i6 = (int) $b5;

        if $i6 >= 0 goto label3;

        virtualinvoke r0.<org.apache.commons.compress.compressors.z.ZCompressorInputStream: int readNextCode()>();

        l4 = l4 + 1L;

        goto label2;

     label3:
        r0.<org.apache.commons.compress.compressors.z.ZCompressorInputStream: int bitsCached> = 0;

        r0.<org.apache.commons.compress.compressors.z.ZCompressorInputStream: int bitsCachedSize> = 0;

        return;
    }

    protected int addEntry(int, byte) throws java.io.IOException
    {
        org.apache.commons.compress.compressors.z.ZCompressorInputStream r0;
        byte b3;
        int $i0, i1, i2, $i4, $i5, $i6, $i7, $i8, $i9;

        r0 := @this: org.apache.commons.compress.compressors.z.ZCompressorInputStream;

        i2 := @parameter0: int;

        b3 := @parameter1: byte;

        $i0 = r0.<org.apache.commons.compress.compressors.z.ZCompressorInputStream: int codeSize>;

        i1 = 1 << $i0;

        $i4 = virtualinvoke r0.<org.apache.commons.compress.compressors.z.ZCompressorInputStream: int addEntry(int,byte,int)>(i2, b3, i1);

        $i5 = r0.<org.apache.commons.compress.compressors.z.ZCompressorInputStream: int tableSize>;

        if $i5 != i1 goto label1;

        $i7 = r0.<org.apache.commons.compress.compressors.z.ZCompressorInputStream: int codeSize>;

        $i6 = r0.<org.apache.commons.compress.compressors.z.ZCompressorInputStream: int maxCodeSize>;

        if $i7 >= $i6 goto label1;

        specialinvoke r0.<org.apache.commons.compress.compressors.z.ZCompressorInputStream: void reAlignReading()>();

        $i8 = r0.<org.apache.commons.compress.compressors.z.ZCompressorInputStream: int codeSize>;

        $i9 = $i8 + 1;

        r0.<org.apache.commons.compress.compressors.z.ZCompressorInputStream: int codeSize> = $i9;

     label1:
        return $i4;
    }

    protected int decompressNextSymbol() throws java.io.IOException
    {
        java.lang.Object[] $r2;
        java.lang.Integer $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i9;
        java.lang.String $r5;
        boolean $z0, z1;
        org.apache.commons.compress.compressors.z.ZCompressorInputStream r0;
        java.io.IOException $r6;

        r0 := @this: org.apache.commons.compress.compressors.z.ZCompressorInputStream;

        $i0 = virtualinvoke r0.<org.apache.commons.compress.compressors.z.ZCompressorInputStream: int readNextCode()>();

        if $i0 >= 0 goto label1;

        $i7 = (int) -1;

        return $i7;

     label1:
        $z0 = r0.<org.apache.commons.compress.compressors.z.ZCompressorInputStream: boolean blockMode>;

        if $z0 == 0 goto label2;

        $i5 = r0.<org.apache.commons.compress.compressors.z.ZCompressorInputStream: int clearCode>;

        if $i0 != $i5 goto label2;

        specialinvoke r0.<org.apache.commons.compress.compressors.z.ZCompressorInputStream: void clearEntries()>();

        specialinvoke r0.<org.apache.commons.compress.compressors.z.ZCompressorInputStream: void reAlignReading()>();

        r0.<org.apache.commons.compress.compressors.z.ZCompressorInputStream: int codeSize> = 9;

        $i9 = (int) -1;

        r0.<org.apache.commons.compress.compressors.z.ZCompressorInputStream: int previousCode> = $i9;

        return 0;

     label2:
        z1 = 0;

        $i1 = r0.<org.apache.commons.compress.compressors.z.ZCompressorInputStream: int tableSize>;

        if $i0 != $i1 goto label3;

        virtualinvoke r0.<org.apache.commons.compress.compressors.z.ZCompressorInputStream: int addRepeatOfPreviousCode()>();

        z1 = 1;

        goto label4;

     label3:
        $i2 = r0.<org.apache.commons.compress.compressors.z.ZCompressorInputStream: int tableSize>;

        if $i0 <= $i2 goto label4;

        $r6 = new java.io.IOException;

        $r2 = newarray (java.lang.Object)[2];

        $i4 = r0.<org.apache.commons.compress.compressors.z.ZCompressorInputStream: int codeSize>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r2[1] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Invalid %d bit code 0x%x", $r2);

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r6;

     label4:
        $i3 = virtualinvoke r0.<org.apache.commons.compress.compressors.z.ZCompressorInputStream: int expandCodeToOutputStack(int,boolean)>($i0, z1);

        return $i3;
    }

    public static boolean matches(byte[], int)
    {
        byte[] r0;
        byte $b1, $b2;
        int i0, $i3, $i4, $i6;
        boolean $z0;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        if i0 <= 3 goto label1;

        $b1 = r0[0];

        $i3 = (int) $b1;

        if $i3 != 31 goto label1;

        $b2 = r0[1];

        $i4 = (int) $b2;

        $i6 = (int) -99;

        if $i4 != $i6 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static void <clinit>()
    {
        <org.apache.commons.compress.compressors.z.ZCompressorInputStream: int MAX_CODE_SIZE_MASK> = 31;

        <org.apache.commons.compress.compressors.z.ZCompressorInputStream: int BLOCK_MODE_MASK> = 128;

        <org.apache.commons.compress.compressors.z.ZCompressorInputStream: int MAGIC_2> = 157;

        <org.apache.commons.compress.compressors.z.ZCompressorInputStream: int MAGIC_1> = 31;

        return;
    }
}
