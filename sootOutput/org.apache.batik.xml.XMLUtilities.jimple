public class org.apache.batik.xml.XMLUtilities extends org.apache.batik.xml.XMLCharacters
{

    protected void <init>()
    {
        org.apache.batik.xml.XMLUtilities r0;

        r0 := @this: org.apache.batik.xml.XMLUtilities;

        specialinvoke r0.<org.apache.batik.xml.XMLCharacters: void <init>()>();

        return;
    }

    public static boolean isXMLSpace(char)
    {
        byte $b3;
        int $i4;
        char c0;
        long $l1, $l2;
        boolean $z0;

        c0 := @parameter0: char;

        $i4 = (int) c0;

        if $i4 > 32 goto label1;

        $l1 = 4294977024L >> c0;

        $l2 = $l1 & 1L;

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isXMLNameFirstCharacter(char)
    {
        char c0;
        int[] $r0;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0;

        c0 := @parameter0: char;

        $r0 = <org.apache.batik.xml.XMLCharacters: int[] NAME_FIRST_CHARACTER>;

        $i6 = (int) c0;

        $i1 = $i6 / 32;

        $i4 = $r0[$i1];

        $i7 = (int) c0;

        $i2 = $i7 % 32;

        $i3 = 1 << $i2;

        $i5 = $i4 & $i3;

        if $i5 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isXML11NameFirstCharacter(char)
    {
        char c0;
        int[] $r0;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0;

        c0 := @parameter0: char;

        $r0 = <org.apache.batik.xml.XMLCharacters: int[] NAME11_FIRST_CHARACTER>;

        $i6 = (int) c0;

        $i1 = $i6 / 32;

        $i4 = $r0[$i1];

        $i7 = (int) c0;

        $i2 = $i7 % 32;

        $i3 = 1 << $i2;

        $i5 = $i4 & $i3;

        if $i5 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isXMLNameCharacter(char)
    {
        char c0;
        int[] $r0;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0;

        c0 := @parameter0: char;

        $r0 = <org.apache.batik.xml.XMLCharacters: int[] NAME_CHARACTER>;

        $i6 = (int) c0;

        $i1 = $i6 / 32;

        $i4 = $r0[$i1];

        $i7 = (int) c0;

        $i2 = $i7 % 32;

        $i3 = 1 << $i2;

        $i5 = $i4 & $i3;

        if $i5 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isXML11NameCharacter(char)
    {
        char c0;
        int[] $r0;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0;

        c0 := @parameter0: char;

        $r0 = <org.apache.batik.xml.XMLCharacters: int[] NAME11_CHARACTER>;

        $i6 = (int) c0;

        $i1 = $i6 / 32;

        $i4 = $r0[$i1];

        $i7 = (int) c0;

        $i2 = $i7 % 32;

        $i3 = 1 << $i2;

        $i5 = $i4 & $i3;

        if $i5 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isXMLCharacter(int)
    {
        int[] $r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0;

        i0 := @parameter0: int;

        $r0 = <org.apache.batik.xml.XMLCharacters: int[] XML_CHARACTER>;

        $i1 = i0 >>> 5;

        $i4 = $r0[$i1];

        $i2 = i0 & 31;

        $i3 = 1 << $i2;

        $i5 = $i4 & $i3;

        if $i5 != 0 goto label1;

        if i0 < 65536 goto label2;

        if i0 > 1114111 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public static boolean isXML11Character(int)
    {
        int i0, $i2, $i4, $i6;
        boolean $z0;

        i0 := @parameter0: int;

        if i0 < 1 goto label1;

        $i2 = (int) 55295;

        if i0 <= $i2 goto label3;

     label1:
        $i4 = (int) 57344;

        if i0 < $i4 goto label2;

        $i6 = (int) 65533;

        if i0 <= $i6 goto label3;

     label2:
        if i0 < 65536 goto label4;

        if i0 > 1114111 goto label4;

     label3:
        $z0 = 1;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        return $z0;
    }

    public static boolean isXMLPublicIdCharacter(char)
    {
        char c0;
        int[] $r0;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        boolean $z0;

        c0 := @parameter0: char;

        $i6 = (int) c0;

        if $i6 >= 128 goto label1;

        $r0 = <org.apache.batik.xml.XMLCharacters: int[] PUBLIC_ID_CHARACTER>;

        $i7 = (int) c0;

        $i1 = $i7 / 32;

        $i4 = $r0[$i1];

        $i8 = (int) c0;

        $i2 = $i8 % 32;

        $i3 = 1 << $i2;

        $i5 = $i4 & $i3;

        if $i5 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isXMLVersionCharacter(char)
    {
        char c0;
        int[] $r0;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        boolean $z0;

        c0 := @parameter0: char;

        $i6 = (int) c0;

        if $i6 >= 128 goto label1;

        $r0 = <org.apache.batik.xml.XMLCharacters: int[] VERSION_CHARACTER>;

        $i7 = (int) c0;

        $i1 = $i7 / 32;

        $i4 = $r0[$i1];

        $i8 = (int) c0;

        $i2 = $i8 % 32;

        $i3 = 1 << $i2;

        $i5 = $i4 & $i3;

        if $i5 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isXMLAlphabeticCharacter(char)
    {
        char c0;
        int[] $r0;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        boolean $z0;

        c0 := @parameter0: char;

        $i6 = (int) c0;

        if $i6 >= 128 goto label1;

        $r0 = <org.apache.batik.xml.XMLCharacters: int[] ALPHABETIC_CHARACTER>;

        $i7 = (int) c0;

        $i1 = $i7 / 32;

        $i4 = $r0[$i1];

        $i8 = (int) c0;

        $i2 = $i8 % 32;

        $i3 = 1 << $i2;

        $i5 = $i4 & $i3;

        if $i5 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static java.io.Reader createXMLDocumentReader(java.io.InputStream) throws java.io.IOException
    {
        byte[] r2;
        java.io.PushbackInputStream $r14;
        byte $b1, $b3, $b5, $b7, $b8, $b10, $b12, $b14, $b15, $b16, $b17, $b18, $b19, $b20;
        java.io.Reader $r5, $r8;
        short $s2, $s4, $s6, $s9, $s11, $s13, $s21, $s25, $s31, $s33, $s35, $s37;
        int $i0, $i22, $i23, $i24, $i26, $i27, $i28, $i29, $i30, $i32, $i34, $i36, $i38;
        java.lang.String $r6, $r9;
        java.io.InputStreamReader $r15, $r16, $r17, $r18, $r19, $r20, $r21;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        $r14 = new java.io.PushbackInputStream;

        specialinvoke $r14.<java.io.PushbackInputStream: void <init>(java.io.InputStream,int)>(r1, 128);

        r2 = newarray (byte)[4];

        $i0 = virtualinvoke $r14.<java.io.FilterInputStream: int read(byte[])>(r2);

        if $i0 <= 0 goto label01;

        virtualinvoke $r14.<java.io.PushbackInputStream: void unread(byte[],int,int)>(r2, 0, $i0);

     label01:
        if $i0 != 4 goto label10;

        $b1 = r2[0];

        $s21 = (short) $b1;

        $s2 = $s21 & 255;

        $i22 = (int) $s2;

        lookupswitch($i22)
        {
            case 0: goto label02;
            case 60: goto label03;
            case 76: goto label07;
            case 254: goto label08;
            case 255: goto label09;
            default: goto label10;
        };

     label02:
        $b18 = r2[1];

        $i23 = (int) $b18;

        if $i23 != 60 goto label10;

        $b19 = r2[2];

        if $b19 != 0 goto label10;

        $b20 = r2[3];

        $i24 = (int) $b20;

        if $i24 != 63 goto label10;

        $r15 = new java.io.InputStreamReader;

        specialinvoke $r15.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r14, "UnicodeBig");

        return $r15;

     label03:
        $b12 = r2[1];

        $s25 = (short) $b12;

        $s13 = $s25 & 255;

        $i26 = (int) $s13;

        lookupswitch($i26)
        {
            case 0: goto label04;
            case 63: goto label05;
            default: goto label06;
        };

     label04:
        $b16 = r2[2];

        $i27 = (int) $b16;

        if $i27 != 63 goto label06;

        $b17 = r2[3];

        if $b17 != 0 goto label06;

        $r16 = new java.io.InputStreamReader;

        specialinvoke $r16.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r14, "UnicodeLittle");

        return $r16;

     label05:
        $b14 = r2[2];

        $i28 = (int) $b14;

        if $i28 != 120 goto label06;

        $b15 = r2[3];

        $i29 = (int) $b15;

        if $i29 != 109 goto label06;

        $r8 = staticinvoke <org.apache.batik.xml.XMLUtilities: java.io.Reader createXMLDeclarationReader(java.io.PushbackInputStream,java.lang.String)>($r14, "UTF8");

        $r9 = staticinvoke <org.apache.batik.xml.XMLUtilities: java.lang.String getXMLDeclarationEncoding(java.io.Reader,java.lang.String)>($r8, "UTF8");

        $r17 = new java.io.InputStreamReader;

        specialinvoke $r17.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r14, $r9);

        return $r17;

     label06:
        goto label10;

     label07:
        $b7 = r2[1];

        $i30 = (int) $b7;

        if $i30 != 111 goto label10;

        $b8 = r2[2];

        $s31 = (short) $b8;

        $s9 = $s31 & 255;

        $i32 = (int) $s9;

        if $i32 != 167 goto label10;

        $b10 = r2[3];

        $s33 = (short) $b10;

        $s11 = $s33 & 255;

        $i34 = (int) $s11;

        if $i34 != 148 goto label10;

        $r5 = staticinvoke <org.apache.batik.xml.XMLUtilities: java.io.Reader createXMLDeclarationReader(java.io.PushbackInputStream,java.lang.String)>($r14, "CP037");

        $r6 = staticinvoke <org.apache.batik.xml.XMLUtilities: java.lang.String getXMLDeclarationEncoding(java.io.Reader,java.lang.String)>($r5, "CP037");

        $r18 = new java.io.InputStreamReader;

        specialinvoke $r18.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r14, $r6);

        return $r18;

     label08:
        $b5 = r2[1];

        $s35 = (short) $b5;

        $s6 = $s35 & 255;

        $i36 = (int) $s6;

        if $i36 != 255 goto label10;

        $r19 = new java.io.InputStreamReader;

        specialinvoke $r19.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r14, "Unicode");

        return $r19;

     label09:
        $b3 = r2[1];

        $s37 = (short) $b3;

        $s4 = $s37 & 255;

        $i38 = (int) $s4;

        if $i38 != 254 goto label10;

        $r20 = new java.io.InputStreamReader;

        specialinvoke $r20.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r14, "Unicode");

        return $r20;

     label10:
        $r21 = new java.io.InputStreamReader;

        specialinvoke $r21.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r14, "UTF8");

        return $r21;
    }

    protected static java.io.Reader createXMLDeclarationReader(java.io.PushbackInputStream, java.lang.String) throws java.io.IOException
    {
        byte[] r0;
        java.io.ByteArrayInputStream $r3;
        java.io.PushbackInputStream r1;
        int $i0;
        java.lang.String r4;
        java.io.InputStreamReader $r2;

        r1 := @parameter0: java.io.PushbackInputStream;

        r4 := @parameter1: java.lang.String;

        r0 = newarray (byte)[128];

        $i0 = virtualinvoke r1.<java.io.FilterInputStream: int read(byte[])>(r0);

        if $i0 <= 0 goto label1;

        virtualinvoke r1.<java.io.PushbackInputStream: void unread(byte[],int,int)>(r0, 0, $i0);

     label1:
        $r2 = new java.io.InputStreamReader;

        $r3 = new java.io.ByteArrayInputStream;

        specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[],int,int)>(r0, 4, $i0);

        specialinvoke $r2.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r3, r4);

        return $r2;
    }

    protected static java.lang.String getXMLDeclarationEncoding(java.io.Reader, java.lang.String) throws java.io.IOException
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.io.Reader r0;
        java.lang.StringBuffer $r5;
        int $i0, $i1, $i3, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i14, $i16, $i18, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i28, $i30, i34, i35, $i36, $i38, $i39;
        java.lang.String r1, $r3, $r4;
        char $c2, $c4, $c11, $c13, $c15, $c17, $c19, $c27, $c29, $c31, $c32, $c33;

        r0 := @parameter0: java.io.Reader;

        r1 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<java.io.Reader: int read()>();

        if $i0 == 108 goto label01;

        return r1;

     label01:
        $i1 = virtualinvoke r0.<java.io.Reader: int read()>();

        $c2 = (char) $i1;

        $z0 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLSpace(char)>($c2);

        if $z0 != 0 goto label02;

        return r1;

     label02:
        $i3 = virtualinvoke r0.<java.io.Reader: int read()>();

        $c4 = (char) $i3;

        $z1 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLSpace(char)>($c4);

        if $z1 != 0 goto label02;

        if $i3 == 118 goto label03;

        return r1;

     label03:
        $i5 = virtualinvoke r0.<java.io.Reader: int read()>();

        if $i5 == 101 goto label04;

        return r1;

     label04:
        $i6 = virtualinvoke r0.<java.io.Reader: int read()>();

        if $i6 == 114 goto label05;

        return r1;

     label05:
        $i7 = virtualinvoke r0.<java.io.Reader: int read()>();

        if $i7 == 115 goto label06;

        return r1;

     label06:
        $i8 = virtualinvoke r0.<java.io.Reader: int read()>();

        if $i8 == 105 goto label07;

        return r1;

     label07:
        $i9 = virtualinvoke r0.<java.io.Reader: int read()>();

        if $i9 == 111 goto label08;

        return r1;

     label08:
        $i10 = virtualinvoke r0.<java.io.Reader: int read()>();

        if $i10 == 110 goto label09;

        return r1;

     label09:
        i34 = virtualinvoke r0.<java.io.Reader: int read()>();

        goto label11;

     label10:
        i34 = virtualinvoke r0.<java.io.Reader: int read()>();

     label11:
        $c11 = (char) i34;

        $z2 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLSpace(char)>($c11);

        if $z2 != 0 goto label10;

        if i34 == 61 goto label12;

        return r1;

     label12:
        $i12 = virtualinvoke r0.<java.io.Reader: int read()>();

        $c13 = (char) $i12;

        $z3 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLSpace(char)>($c13);

        if $z3 != 0 goto label12;

        if $i12 == 34 goto label13;

        if $i12 == 39 goto label13;

        return r1;

     label13:
        $c33 = (char) $i12;

        goto label14;

     label14:
        $i14 = virtualinvoke r0.<java.io.Reader: int read()>();

        $i36 = (int) $c33;

        if $i14 != $i36 goto label15;

        goto label16;

     label15:
        $c15 = (char) $i14;

        $z4 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLVersionCharacter(char)>($c15);

        if $z4 != 0 goto label14;

        return r1;

     label16:
        $i16 = virtualinvoke r0.<java.io.Reader: int read()>();

        $c17 = (char) $i16;

        $z5 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLSpace(char)>($c17);

        if $z5 != 0 goto label17;

        return r1;

     label17:
        $i18 = virtualinvoke r0.<java.io.Reader: int read()>();

        $c19 = (char) $i18;

        $z6 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLSpace(char)>($c19);

        if $z6 != 0 goto label17;

        if $i18 == 101 goto label18;

        return r1;

     label18:
        $i20 = virtualinvoke r0.<java.io.Reader: int read()>();

        if $i20 == 110 goto label19;

        return r1;

     label19:
        $i21 = virtualinvoke r0.<java.io.Reader: int read()>();

        if $i21 == 99 goto label20;

        return r1;

     label20:
        $i22 = virtualinvoke r0.<java.io.Reader: int read()>();

        if $i22 == 111 goto label21;

        return r1;

     label21:
        $i23 = virtualinvoke r0.<java.io.Reader: int read()>();

        if $i23 == 100 goto label22;

        return r1;

     label22:
        $i24 = virtualinvoke r0.<java.io.Reader: int read()>();

        if $i24 == 105 goto label23;

        return r1;

     label23:
        $i25 = virtualinvoke r0.<java.io.Reader: int read()>();

        if $i25 == 110 goto label24;

        return r1;

     label24:
        $i26 = virtualinvoke r0.<java.io.Reader: int read()>();

        if $i26 == 103 goto label25;

        return r1;

     label25:
        i35 = virtualinvoke r0.<java.io.Reader: int read()>();

        goto label27;

     label26:
        i35 = virtualinvoke r0.<java.io.Reader: int read()>();

     label27:
        $c27 = (char) i35;

        $z7 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLSpace(char)>($c27);

        if $z7 != 0 goto label26;

        if i35 == 61 goto label28;

        return r1;

     label28:
        $i28 = virtualinvoke r0.<java.io.Reader: int read()>();

        $c29 = (char) $i28;

        $z8 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLSpace(char)>($c29);

        if $z8 != 0 goto label28;

        if $i28 == 34 goto label29;

        if $i28 == 39 goto label29;

        return r1;

     label29:
        $c32 = (char) $i28;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        goto label30;

     label30:
        $i30 = virtualinvoke r0.<java.io.Reader: int read()>();

        $i38 = (int) -1;

        if $i30 != $i38 goto label31;

        return r1;

     label31:
        $i39 = (int) $c32;

        if $i30 != $i39 goto label32;

        $r3 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        $r4 = staticinvoke <org.apache.batik.xml.XMLUtilities: java.lang.String encodingToJavaEncoding(java.lang.String,java.lang.String)>($r3, r1);

        return $r4;

     label32:
        $c31 = (char) $i30;

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c31);

        goto label30;
    }

    public static java.lang.String encodingToJavaEncoding(java.lang.String, java.lang.String)
    {
        java.lang.String r0, $r1, r2, $r3;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r1 = staticinvoke <org.apache.batik.util.EncodingUtilities: java.lang.String javaEncoding(java.lang.String)>(r0);

        if $r1 != null goto label1;

        $r3 = r2;

        goto label2;

     label1:
        $r3 = $r1;

     label2:
        return $r3;
    }
}
