public class org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit extends org.apache.batik.ext.awt.image.renderable.AbstractColorInterpolationRable implements org.apache.batik.ext.awt.image.renderable.SpecularLightingRable
{
    private double surfaceScale;
    private double ks;
    private double specularExponent;
    private org.apache.batik.ext.awt.image.Light light;
    private java.awt.geom.Rectangle2D litRegion;
    private float[] kernelUnitLength;

    public void <init>(org.apache.batik.ext.awt.image.renderable.Filter, java.awt.geom.Rectangle2D, org.apache.batik.ext.awt.image.Light, double, double, double, double[])
    {
        java.awt.geom.Rectangle2D r3;
        double[] r4;
        org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit r0;
        org.apache.batik.ext.awt.image.renderable.Filter r1;
        org.apache.batik.ext.awt.image.Light r2;
        double d0, d1, d2;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit;

        r1 := @parameter0: org.apache.batik.ext.awt.image.renderable.Filter;

        r3 := @parameter1: java.awt.geom.Rectangle2D;

        r2 := @parameter2: org.apache.batik.ext.awt.image.Light;

        d0 := @parameter3: double;

        d1 := @parameter4: double;

        d2 := @parameter5: double;

        r4 := @parameter6: double[];

        specialinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractColorInterpolationRable: void <init>(org.apache.batik.ext.awt.image.renderable.Filter,java.util.Map)>(r1, null);

        r0.<org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit: float[] kernelUnitLength> = null;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit: void setLight(org.apache.batik.ext.awt.image.Light)>(r2);

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit: void setKs(double)>(d0);

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit: void setSpecularExponent(double)>(d1);

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit: void setSurfaceScale(double)>(d2);

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit: void setLitRegion(java.awt.geom.Rectangle2D)>(r3);

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit: void setKernelUnitLength(double[])>(r4);

        return;
    }

    public org.apache.batik.ext.awt.image.renderable.Filter getSource()
    {
        java.util.Vector $r1;
        org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit r0;
        java.lang.Object $r2;
        org.apache.batik.ext.awt.image.renderable.Filter $r3;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.util.Vector getSources()>();

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object get(int)>(0);

        $r3 = (org.apache.batik.ext.awt.image.renderable.Filter) $r2;

        return $r3;
    }

    public void setSource(org.apache.batik.ext.awt.image.renderable.Filter)
    {
        org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit r0;
        org.apache.batik.ext.awt.image.renderable.Filter r1;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit;

        r1 := @parameter0: org.apache.batik.ext.awt.image.renderable.Filter;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void init(org.apache.batik.ext.awt.image.renderable.Filter,java.util.Map)>(r1, null);

        return;
    }

    public java.awt.geom.Rectangle2D getBounds2D()
    {
        java.awt.geom.Rectangle2D $r1, $r3;
        org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit r0;
        java.lang.Object $r2;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit;

        $r1 = r0.<org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit: java.awt.geom.Rectangle2D litRegion>;

        $r2 = virtualinvoke $r1.<java.awt.geom.RectangularShape: java.lang.Object clone()>();

        $r3 = (java.awt.geom.Rectangle2D) $r2;

        return $r3;
    }

    public java.awt.geom.Rectangle2D getLitRegion()
    {
        org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit r0;
        java.awt.geom.Rectangle2D $r1;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit: java.awt.geom.Rectangle2D getBounds2D()>();

        return $r1;
    }

    public void setLitRegion(java.awt.geom.Rectangle2D)
    {
        org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit r0;
        java.awt.geom.Rectangle2D r1;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit;

        r1 := @parameter0: java.awt.geom.Rectangle2D;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void touch()>();

        r0.<org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit: java.awt.geom.Rectangle2D litRegion> = r1;

        return;
    }

    public org.apache.batik.ext.awt.image.Light getLight()
    {
        org.apache.batik.ext.awt.image.Light $r1;
        org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit r0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit;

        $r1 = r0.<org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit: org.apache.batik.ext.awt.image.Light light>;

        return $r1;
    }

    public void setLight(org.apache.batik.ext.awt.image.Light)
    {
        org.apache.batik.ext.awt.image.Light r1;
        org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit r0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit;

        r1 := @parameter0: org.apache.batik.ext.awt.image.Light;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void touch()>();

        r0.<org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit: org.apache.batik.ext.awt.image.Light light> = r1;

        return;
    }

    public double getSurfaceScale()
    {
        org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit r0;
        double $d0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit;

        $d0 = r0.<org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit: double surfaceScale>;

        return $d0;
    }

    public void setSurfaceScale(double)
    {
        org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit r0;
        double d0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit;

        d0 := @parameter0: double;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void touch()>();

        r0.<org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit: double surfaceScale> = d0;

        return;
    }

    public double getKs()
    {
        org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit r0;
        double $d0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit;

        $d0 = r0.<org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit: double ks>;

        return $d0;
    }

    public void setKs(double)
    {
        org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit r0;
        double d0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit;

        d0 := @parameter0: double;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void touch()>();

        r0.<org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit: double ks> = d0;

        return;
    }

    public double getSpecularExponent()
    {
        org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit r0;
        double $d0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit;

        $d0 = r0.<org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit: double specularExponent>;

        return $d0;
    }

    public void setSpecularExponent(double)
    {
        org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit r0;
        double d0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit;

        d0 := @parameter0: double;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void touch()>();

        r0.<org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit: double specularExponent> = d0;

        return;
    }

    public double[] getKernelUnitLength()
    {
        double[] r2;
        org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit r0;
        float[] $r1, $r3, $r4;
        float $f0, $f1;
        double $d0, $d1;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit;

        $r1 = r0.<org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit: float[] kernelUnitLength>;

        if $r1 != null goto label1;

        return null;

     label1:
        r2 = newarray (double)[2];

        $r3 = r0.<org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit: float[] kernelUnitLength>;

        $f0 = $r3[0];

        $d0 = (double) $f0;

        r2[0] = $d0;

        $r4 = r0.<org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit: float[] kernelUnitLength>;

        $f1 = $r4[1];

        $d1 = (double) $f1;

        r2[1] = $d1;

        return r2;
    }

    public void setKernelUnitLength(double[])
    {
        double[] r1;
        org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit r0;
        float[] $r2, $r3, $r4, $r5;
        float $f0, $f1;
        double $d0, $d1;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit;

        r1 := @parameter0: double[];

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void touch()>();

        if r1 != null goto label1;

        r0.<org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit: float[] kernelUnitLength> = null;

        return;

     label1:
        $r2 = r0.<org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit: float[] kernelUnitLength>;

        if $r2 != null goto label2;

        $r5 = newarray (float)[2];

        r0.<org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit: float[] kernelUnitLength> = $r5;

     label2:
        $r3 = r0.<org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit: float[] kernelUnitLength>;

        $d0 = r1[0];

        $f0 = (float) $d0;

        $r3[0] = $f0;

        $r4 = r0.<org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit: float[] kernelUnitLength>;

        $d1 = r1[1];

        $f1 = (float) $d1;

        $r4[1] = $f1;

        return;
    }

    public java.awt.image.RenderedImage createRendering(java.awt.image.renderable.RenderContext)
    {
        java.awt.geom.Rectangle2D $r1, $r3;
        org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit r2;
        byte $b2, $b3, $b12, $b13;
        org.apache.batik.ext.awt.image.rendered.SpecularLightingRed $r33;
        org.apache.batik.ext.awt.image.rendered.AffineRed $r37;
        java.awt.geom.AffineTransform $r4, $r19, $r34;
        org.apache.batik.ext.awt.image.rendered.CachableRed $r26;
        float[] $r7, $r13, $r14, $r15, $r16;
        org.apache.batik.ext.awt.image.PadMode $r11;
        org.apache.batik.ext.awt.image.Light $r29;
        java.awt.RenderingHints $r8;
        boolean $z0, $z1;
        java.awt.Shape $r0, $r5, r18, $r20;
        java.awt.image.RenderedImage $r25;
        org.apache.batik.ext.awt.image.renderable.Filter $r24;
        java.awt.image.renderable.RenderContext r17, $r23;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        java.awt.Rectangle $r6, $r21, $r35;
        org.apache.batik.ext.awt.image.rendered.PadRed $r36;
        int $i0, $i1, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i14, $i15;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, d16, d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38;
        org.apache.batik.ext.awt.image.rendered.BumpMap $r32;
        org.apache.batik.ext.awt.image.rendered.AbstractRed r30;
        java.lang.Object $r22;

        r2 := @this: org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit;

        r17 := @parameter0: java.awt.image.renderable.RenderContext;

        $r0 = virtualinvoke r17.<java.awt.image.renderable.RenderContext: java.awt.Shape getAreaOfInterest()>();

        r18 = $r0;

        if $r0 != null goto label1;

        r18 = virtualinvoke r2.<org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit: java.awt.geom.Rectangle2D getBounds2D()>();

     label1:
        $r1 = interfaceinvoke r18.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $r3 = virtualinvoke r2.<org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit: java.awt.geom.Rectangle2D getBounds2D()>();

        staticinvoke <java.awt.geom.Rectangle2D: void intersect(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>($r1, $r3, $r1);

        $r4 = virtualinvoke r17.<java.awt.image.renderable.RenderContext: java.awt.geom.AffineTransform getTransform()>();

        $r5 = virtualinvoke $r4.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r1);

        $r6 = interfaceinvoke $r5.<java.awt.Shape: java.awt.Rectangle getBounds()>();

        $i0 = $r6.<java.awt.Rectangle: int width>;

        if $i0 == 0 goto label2;

        $i1 = $r6.<java.awt.Rectangle: int height>;

        if $i1 != 0 goto label3;

     label2:
        return null;

     label3:
        $d0 = virtualinvoke $r4.<java.awt.geom.AffineTransform: double getScaleX()>();

        $d1 = virtualinvoke $r4.<java.awt.geom.AffineTransform: double getScaleY()>();

        $d2 = virtualinvoke $r4.<java.awt.geom.AffineTransform: double getShearX()>();

        $d3 = virtualinvoke $r4.<java.awt.geom.AffineTransform: double getShearY()>();

        $d4 = virtualinvoke $r4.<java.awt.geom.AffineTransform: double getTranslateX()>();

        $d5 = virtualinvoke $r4.<java.awt.geom.AffineTransform: double getTranslateY()>();

        $d7 = $d0 * $d0;

        $d6 = $d3 * $d3;

        $d8 = $d7 + $d6;

        $d9 = staticinvoke <java.lang.Math: double sqrt(double)>($d8);

        d16 = $d9;

        $d11 = $d1 * $d1;

        $d10 = $d2 * $d2;

        $d12 = $d11 + $d10;

        $d13 = staticinvoke <java.lang.Math: double sqrt(double)>($d12);

        d17 = $d13;

        $b2 = $d9 cmpl 0.0;

        if $b2 == 0 goto label4;

        $b3 = $d13 cmpl 0.0;

        if $b3 != 0 goto label5;

     label4:
        return null;

     label5:
        $r7 = r2.<org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit: float[] kernelUnitLength>;

        if $r7 == null goto label7;

        $r13 = r2.<org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit: float[] kernelUnitLength>;

        $f0 = $r13[0];

        $f1 = 1.0F / $f0;

        $d14 = (double) $f1;

        $b12 = $d9 cmpl $d14;

        $i14 = (int) $b12;

        if $i14 < 0 goto label6;

        $r16 = r2.<org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit: float[] kernelUnitLength>;

        $f6 = $r16[0];

        $f7 = 1.0F / $f6;

        d16 = (double) $f7;

     label6:
        $r14 = r2.<org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit: float[] kernelUnitLength>;

        $f2 = $r14[1];

        $f3 = 1.0F / $f2;

        $d15 = (double) $f3;

        $b13 = $d13 cmpl $d15;

        $i15 = (int) $b13;

        if $i15 < 0 goto label7;

        $r15 = r2.<org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit: float[] kernelUnitLength>;

        $f4 = $r15[1];

        $f5 = 1.0F / $f4;

        d17 = (double) $f5;

     label7:
        $r19 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getScaleInstance(double,double)>(d16, d17);

        $r20 = virtualinvoke $r19.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r1);

        $r21 = interfaceinvoke $r20.<java.awt.Shape: java.awt.Rectangle getBounds()>();

        $d18 = virtualinvoke $r1.<java.awt.geom.RectangularShape: double getX()>();

        $d19 = 2.0 / d16;

        $d20 = $d18 - $d19;

        $d21 = virtualinvoke $r1.<java.awt.geom.RectangularShape: double getY()>();

        $d22 = 2.0 / d17;

        $d23 = $d21 - $d22;

        $d24 = virtualinvoke $r1.<java.awt.geom.RectangularShape: double getWidth()>();

        $d25 = 4.0 / d16;

        $d26 = $d24 + $d25;

        $d27 = virtualinvoke $r1.<java.awt.geom.RectangularShape: double getHeight()>();

        $d28 = 4.0 / d17;

        $d29 = $d27 + $d28;

        virtualinvoke $r1.<java.awt.geom.Rectangle2D: void setRect(double,double,double,double)>($d20, $d23, $d26, $d29);

        $r22 = virtualinvoke r17.<java.awt.image.renderable.RenderContext: java.lang.Object clone()>();

        $r23 = (java.awt.image.renderable.RenderContext) $r22;

        virtualinvoke $r23.<java.awt.image.renderable.RenderContext: void setAreaOfInterest(java.awt.Shape)>($r1);

        virtualinvoke $r23.<java.awt.image.renderable.RenderContext: void setTransform(java.awt.geom.AffineTransform)>($r19);

        $r24 = virtualinvoke r2.<org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit: org.apache.batik.ext.awt.image.renderable.Filter getSource()>();

        $r25 = interfaceinvoke $r24.<java.awt.image.renderable.RenderableImage: java.awt.image.RenderedImage createRendering(java.awt.image.renderable.RenderContext)>($r23);

        $r26 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: org.apache.batik.ext.awt.image.rendered.CachableRed wrap(java.awt.image.RenderedImage)>($r25);

        $r32 = new org.apache.batik.ext.awt.image.rendered.BumpMap;

        $d30 = r2.<org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit: double surfaceScale>;

        specialinvoke $r32.<org.apache.batik.ext.awt.image.rendered.BumpMap: void <init>(java.awt.image.RenderedImage,double,double,double)>($r26, $d30, d16, d17);

        $r33 = new org.apache.batik.ext.awt.image.rendered.SpecularLightingRed;

        $d31 = r2.<org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit: double ks>;

        $d32 = r2.<org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit: double specularExponent>;

        $r29 = r2.<org.apache.batik.ext.awt.image.renderable.SpecularLightingRable8Bit: org.apache.batik.ext.awt.image.Light light>;

        $d33 = 1.0 / d16;

        $d34 = 1.0 / d17;

        $z0 = virtualinvoke r2.<org.apache.batik.ext.awt.image.renderable.AbstractColorInterpolationRable: boolean isColorSpaceLinear()>();

        specialinvoke $r33.<org.apache.batik.ext.awt.image.rendered.SpecularLightingRed: void <init>(double,double,org.apache.batik.ext.awt.image.Light,org.apache.batik.ext.awt.image.rendered.BumpMap,java.awt.Rectangle,double,double,boolean)>($d31, $d32, $r29, $r32, $r21, $d33, $d34, $z0);

        r30 = $r33;

        $r34 = new java.awt.geom.AffineTransform;

        $d35 = $d0 / d16;

        $d36 = $d3 / d16;

        $d37 = $d2 / d17;

        $d38 = $d1 / d17;

        specialinvoke $r34.<java.awt.geom.AffineTransform: void <init>(double,double,double,double,double,double)>($d35, $d36, $d37, $d38, $d4, $d5);

        $z1 = virtualinvoke $r34.<java.awt.geom.AffineTransform: boolean isIdentity()>();

        if $z1 != 0 goto label8;

        $r8 = virtualinvoke $r23.<java.awt.image.renderable.RenderContext: java.awt.RenderingHints getRenderingHints()>();

        $r35 = new java.awt.Rectangle;

        $i4 = $r21.<java.awt.Rectangle: int x>;

        $i11 = $i4 - 1;

        $i5 = $r21.<java.awt.Rectangle: int y>;

        $i10 = $i5 - 1;

        $i6 = $r21.<java.awt.Rectangle: int width>;

        $i9 = $i6 + 2;

        $i7 = $r21.<java.awt.Rectangle: int height>;

        $i8 = $i7 + 2;

        specialinvoke $r35.<java.awt.Rectangle: void <init>(int,int,int,int)>($i11, $i10, $i9, $i8);

        $r36 = new org.apache.batik.ext.awt.image.rendered.PadRed;

        $r11 = <org.apache.batik.ext.awt.image.PadMode: org.apache.batik.ext.awt.image.PadMode REPLICATE>;

        specialinvoke $r36.<org.apache.batik.ext.awt.image.rendered.PadRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.Rectangle,org.apache.batik.ext.awt.image.PadMode,java.awt.RenderingHints)>($r33, $r35, $r11, $r8);

        $r37 = new org.apache.batik.ext.awt.image.rendered.AffineRed;

        specialinvoke $r37.<org.apache.batik.ext.awt.image.rendered.AffineRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.geom.AffineTransform,java.awt.RenderingHints)>($r36, $r34, $r8);

        r30 = $r37;

     label8:
        return r30;
    }
}
