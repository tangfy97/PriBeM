public class org.codehaus.groovy.ast.ClassNode extends org.codehaus.groovy.ast.AnnotatedNode implements groovyjarjarasm.asm.Opcodes
{
    public static org.codehaus.groovy.ast.ClassNode[] EMPTY_ARRAY;
    public static org.codehaus.groovy.ast.ClassNode THIS;
    public static org.codehaus.groovy.ast.ClassNode SUPER;
    private java.lang.String name;
    private final int modifiers;
    private org.codehaus.groovy.ast.ClassNode[] interfaces;
    private org.codehaus.groovy.ast.MixinNode[] mixins;
    private java.util.List constructors;
    private java.util.List objectInitializers;
    private org.codehaus.groovy.ast.ClassNode$MapOfLists methods;
    private java.util.List methodsList;
    private java.util.List fields;
    private java.util.List properties;
    private java.util.Map fieldIndex;
    private org.codehaus.groovy.ast.ModuleNode module;
    private org.codehaus.groovy.ast.CompileUnit compileUnit;
    private boolean staticClass;
    private boolean scriptBody;
    private boolean script;
    private org.codehaus.groovy.ast.ClassNode superClass;
    protected boolean isPrimaryNode;
    protected java.lang.Object lazyInitLock;
    protected java.lang.Class clazz;
    private boolean lazyInitDone;
    private org.codehaus.groovy.ast.ClassNode componentType;
    private org.codehaus.groovy.ast.ClassNode redirect;
    private boolean annotated;
    private org.codehaus.groovy.ast.GenericsType[] genericsTypes;
    private boolean usesGenerics;
    private boolean placeholder;
    private org.codehaus.groovy.ast.MethodNode enclosingMethod;
    static java.lang.Class class$java$lang$Object;
    static java.lang.Class class$groovy$lang$GroovyObject;

    public org.codehaus.groovy.ast.ClassNode redirect()
    {
        org.codehaus.groovy.ast.ClassNode r0, $r1, $r2, $r3;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        $r1 = r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect>;

        if $r1 != null goto label1;

        return r0;

     label1:
        $r2 = r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect>;

        $r3 = virtualinvoke $r2.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        return $r3;
    }

    public void setRedirect(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.ClassNode r0, r11;
        org.codehaus.groovy.GroovyBugError $r1;
        java.lang.StringBuffer $r2, $r3, $r5, $r6, $r8, $r9;
        java.lang.String $r4, $r7, $r10;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        r11 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $z0 = r0.<org.codehaus.groovy.ast.ClassNode: boolean isPrimaryNode>;

        if $z0 == 0 goto label1;

        $r1 = new org.codehaus.groovy.GroovyBugError;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("tried to set a redirect for a primary ClassNode (");

        $r4 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("->");

        $r7 = virtualinvoke r11.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(").");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<org.codehaus.groovy.GroovyBugError: void <init>(java.lang.String)>($r10);

        throw $r1;

     label1:
        if r11 == null goto label2;

        r11 = virtualinvoke r11.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

     label2:
        if r11 != r0 goto label3;

        return;

     label3:
        r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect> = r11;

        return;
    }

    public org.codehaus.groovy.ast.ClassNode makeArray()
    {
        org.codehaus.groovy.ast.ClassNode r0, $r1, $r3, $r7, $r8, $r9, r10;
        java.lang.Class $r2, $r4, $r6;
        java.lang.Object $r5;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        $r1 = r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect>;

        if $r1 == null goto label1;

        $r8 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $r9 = virtualinvoke $r8.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode makeArray()>();

        return $r9;

     label1:
        $r2 = r0.<org.codehaus.groovy.ast.ClassNode: java.lang.Class clazz>;

        if $r2 == null goto label2;

        $r4 = r0.<org.codehaus.groovy.ast.ClassNode: java.lang.Class clazz>;

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r4, 0);

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = new org.codehaus.groovy.ast.ClassNode;

        specialinvoke $r7.<org.codehaus.groovy.ast.ClassNode: void <init>(java.lang.Class,org.codehaus.groovy.ast.ClassNode)>($r6, r0);

        r10 = $r7;

        goto label3;

     label2:
        $r3 = new org.codehaus.groovy.ast.ClassNode;

        specialinvoke $r3.<org.codehaus.groovy.ast.ClassNode: void <init>(org.codehaus.groovy.ast.ClassNode)>(r0);

        r10 = $r3;

     label3:
        return r10;
    }

    public boolean isPrimaryClassNode()
    {
        org.codehaus.groovy.ast.ClassNode r0, $r1, $r2, $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $z0 = $r1.<org.codehaus.groovy.ast.ClassNode: boolean isPrimaryNode>;

        if $z0 != 0 goto label1;

        $r2 = r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode componentType>;

        if $r2 == null goto label2;

        $r3 = r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode componentType>;

        $z1 = virtualinvoke $r3.<org.codehaus.groovy.ast.ClassNode: boolean isPrimaryClassNode()>();

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private void <init>(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.ClassNode r0, r2, $r7, $r8;
        java.lang.StringBuffer $r1, $r4, $r5;
        java.lang.String $r3, $r6;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        r2 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke r2.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[]");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        $r7 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode OBJECT_TYPE>;

        specialinvoke r0.<org.codehaus.groovy.ast.ClassNode: void <init>(java.lang.String,int,org.codehaus.groovy.ast.ClassNode)>($r6, 1, $r7);

        $r8 = virtualinvoke r2.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode componentType> = $r8;

        r0.<org.codehaus.groovy.ast.ClassNode: boolean isPrimaryNode> = 0;

        return;
    }

    private void <init>(java.lang.Class, org.codehaus.groovy.ast.ClassNode)
    {
        java.lang.Class r1;
        org.codehaus.groovy.ast.ClassNode r0, r2;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.codehaus.groovy.ast.ClassNode;

        specialinvoke r0.<org.codehaus.groovy.ast.ClassNode: void <init>(java.lang.Class)>(r1);

        r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode componentType> = r2;

        r0.<org.codehaus.groovy.ast.ClassNode: boolean isPrimaryNode> = 0;

        return;
    }

    public void <init>(java.lang.Class)
    {
        org.codehaus.groovy.ast.MixinNode[] $r3;
        org.codehaus.groovy.ast.ClassNode r0;
        int $i0;
        java.lang.Class r1;
        org.codehaus.groovy.ast.CompileUnit $r4;
        java.lang.String $r2;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $i0 = virtualinvoke r1.<java.lang.Class: int getModifiers()>();

        $r3 = <org.codehaus.groovy.ast.MixinNode: org.codehaus.groovy.ast.MixinNode[] EMPTY_ARRAY>;

        specialinvoke r0.<org.codehaus.groovy.ast.ClassNode: void <init>(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.ClassNode[],org.codehaus.groovy.ast.MixinNode[])>($r2, $i0, null, null, $r3);

        r0.<org.codehaus.groovy.ast.ClassNode: java.lang.Class clazz> = r1;

        r0.<org.codehaus.groovy.ast.ClassNode: boolean lazyInitDone> = 0;

        $r4 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.CompileUnit getCompileUnit()>();

        if $r4 == null goto label1;

        virtualinvoke $r4.<org.codehaus.groovy.ast.CompileUnit: void addClass(org.codehaus.groovy.ast.ClassNode)>(r0);

     label1:
        r0.<org.codehaus.groovy.ast.ClassNode: boolean isPrimaryNode> = 0;

        return;
    }

    private void lazyClassInit()
    {
        java.lang.Throwable $r7;
        org.codehaus.groovy.ast.ClassNode r0, $r2, $r4;
        org.codehaus.groovy.vmplugin.VMPlugin $r3;
        org.codehaus.groovy.GroovyBugError $r6;
        java.lang.Object $r1;
        org.codehaus.groovy.ast.CompileUnit $r5;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        $r1 = r0.<org.codehaus.groovy.ast.ClassNode: java.lang.Object lazyInitLock>;

        entermonitor $r1;

     label1:
        $r2 = r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect>;

        if $r2 == null goto label2;

        $r6 = new org.codehaus.groovy.GroovyBugError;

        specialinvoke $r6.<org.codehaus.groovy.GroovyBugError: void <init>(java.lang.String)>("lazyClassInit called on a proxy ClassNode, that must not happen.A redirect() call is missing somewhere!");

        throw $r6;

     label2:
        $z0 = r0.<org.codehaus.groovy.ast.ClassNode: boolean lazyInitDone>;

        if $z0 == 0 goto label4;

        exitmonitor $r1;

     label3:
        return;

     label4:
        $r3 = staticinvoke <org.codehaus.groovy.vmplugin.VMPluginFactory: org.codehaus.groovy.vmplugin.VMPlugin getPlugin()>();

        $r4 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $r5 = $r4.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.CompileUnit compileUnit>;

        interfaceinvoke $r3.<org.codehaus.groovy.vmplugin.VMPlugin: void configureClassNode(org.codehaus.groovy.ast.CompileUnit,org.codehaus.groovy.ast.ClassNode)>($r5, r0);

        r0.<org.codehaus.groovy.ast.ClassNode: boolean lazyInitDone> = 1;

        exitmonitor $r1;

     label5:
        goto label8;

     label6:
        $r7 := @caughtexception;

        exitmonitor $r1;

     label7:
        throw $r7;

     label8:
        return;

        catch java.lang.Throwable from label1 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public org.codehaus.groovy.ast.MethodNode getEnclosingMethod()
    {
        org.codehaus.groovy.ast.MethodNode $r2;
        org.codehaus.groovy.ast.ClassNode r0, $r1;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $r2 = $r1.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.MethodNode enclosingMethod>;

        return $r2;
    }

    public void setEnclosingMethod(org.codehaus.groovy.ast.MethodNode)
    {
        org.codehaus.groovy.ast.MethodNode r2;
        org.codehaus.groovy.ast.ClassNode r0, $r1;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        r2 := @parameter0: org.codehaus.groovy.ast.MethodNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $r1.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.MethodNode enclosingMethod> = r2;

        return;
    }

    public void <init>(java.lang.String, int, org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.MixinNode[] $r3;
        org.codehaus.groovy.ast.ClassNode r0, r2;
        int i0;
        org.codehaus.groovy.ast.ClassNode[] $r4;
        java.lang.String r1;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: org.codehaus.groovy.ast.ClassNode;

        $r4 = <org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode[] EMPTY_ARRAY>;

        $r3 = <org.codehaus.groovy.ast.MixinNode: org.codehaus.groovy.ast.MixinNode[] EMPTY_ARRAY>;

        specialinvoke r0.<org.codehaus.groovy.ast.ClassNode: void <init>(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.ClassNode[],org.codehaus.groovy.ast.MixinNode[])>(r1, i0, r2, $r4, $r3);

        return;
    }

    public void <init>(java.lang.String, int, org.codehaus.groovy.ast.ClassNode, org.codehaus.groovy.ast.ClassNode[], org.codehaus.groovy.ast.MixinNode[])
    {
        java.util.HashMap $r5;
        java.util.ArrayList $r1, $r2, $r3, $r4, $r13;
        int i0, $i1, i2;
        org.codehaus.groovy.ast.ClassNode[] r9;
        org.codehaus.groovy.ast.ClassNode$MapOfLists $r12;
        java.lang.String r7;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.codehaus.groovy.ast.MixinNode[] r10;
        org.codehaus.groovy.ast.ClassNode r0, r8, $r11;
        java.lang.Object $r6;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        r7 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r8 := @parameter2: org.codehaus.groovy.ast.ClassNode;

        r9 := @parameter3: org.codehaus.groovy.ast.ClassNode[];

        r10 := @parameter4: org.codehaus.groovy.ast.MixinNode[];

        specialinvoke r0.<org.codehaus.groovy.ast.AnnotatedNode: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.codehaus.groovy.ast.ClassNode: java.util.List constructors> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.codehaus.groovy.ast.ClassNode: java.util.List objectInitializers> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.codehaus.groovy.ast.ClassNode: java.util.List fields> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<org.codehaus.groovy.ast.ClassNode: java.util.List properties> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<org.codehaus.groovy.ast.ClassNode: java.util.Map fieldIndex> = $r5;

        r0.<org.codehaus.groovy.ast.ClassNode: boolean staticClass> = 0;

        r0.<org.codehaus.groovy.ast.ClassNode: boolean scriptBody> = 0;

        $r6 = new java.lang.Object;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        r0.<org.codehaus.groovy.ast.ClassNode: java.lang.Object lazyInitLock> = $r6;

        r0.<org.codehaus.groovy.ast.ClassNode: boolean lazyInitDone> = 1;

        r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode componentType> = null;

        r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect> = null;

        r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.GenericsType[] genericsTypes> = null;

        r0.<org.codehaus.groovy.ast.ClassNode: boolean usesGenerics> = 0;

        r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.MethodNode enclosingMethod> = null;

        r0.<org.codehaus.groovy.ast.ClassNode: java.lang.String name> = r7;

        r0.<org.codehaus.groovy.ast.ClassNode: int modifiers> = i0;

        r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode superClass> = r8;

        r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode[] interfaces> = r9;

        r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.MixinNode[] mixins> = r10;

        r0.<org.codehaus.groovy.ast.ClassNode: boolean isPrimaryNode> = 1;

        if r8 == null goto label1;

        $z3 = virtualinvoke r8.<org.codehaus.groovy.ast.ClassNode: boolean isUsingGenerics()>();

        r0.<org.codehaus.groovy.ast.ClassNode: boolean usesGenerics> = $z3;

     label1:
        $z0 = r0.<org.codehaus.groovy.ast.ClassNode: boolean usesGenerics>;

        if $z0 != 0 goto label6;

        if r9 == null goto label6;

        i2 = 0;

     label2:
        $i1 = lengthof r9;

        if i2 >= $i1 goto label6;

        $z1 = r0.<org.codehaus.groovy.ast.ClassNode: boolean usesGenerics>;

        if $z1 != 0 goto label3;

        $r11 = r9[i2];

        $z2 = virtualinvoke $r11.<org.codehaus.groovy.ast.ClassNode: boolean isUsingGenerics()>();

        if $z2 == 0 goto label4;

     label3:
        $z4 = 1;

        goto label5;

     label4:
        $z4 = 0;

     label5:
        r0.<org.codehaus.groovy.ast.ClassNode: boolean usesGenerics> = $z4;

        i2 = i2 + 1;

        goto label2;

     label6:
        $r12 = new org.codehaus.groovy.ast.ClassNode$MapOfLists;

        specialinvoke $r12.<org.codehaus.groovy.ast.ClassNode$MapOfLists: void <init>(org.codehaus.groovy.ast.ClassNode$1)>(null);

        r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode$MapOfLists methods> = $r12;

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        r0.<org.codehaus.groovy.ast.ClassNode: java.util.List methodsList> = $r13;

        return;
    }

    public void setSuperClass(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.ClassNode r0, $r1, r2;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        r2 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $r1.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode superClass> = r2;

        return;
    }

    public java.util.List getFields()
    {
        org.codehaus.groovy.ast.ClassNode r0, $r1, $r2, $r4, $r6;
        java.util.List $r3, $r5;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $z0 = $r1.<org.codehaus.groovy.ast.ClassNode: boolean lazyInitDone>;

        if $z0 != 0 goto label1;

        $r6 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        specialinvoke $r6.<org.codehaus.groovy.ast.ClassNode: void lazyClassInit()>();

     label1:
        $r2 = r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect>;

        if $r2 == null goto label2;

        $r4 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $r5 = virtualinvoke $r4.<org.codehaus.groovy.ast.ClassNode: java.util.List getFields()>();

        return $r5;

     label2:
        $r3 = r0.<org.codehaus.groovy.ast.ClassNode: java.util.List fields>;

        return $r3;
    }

    public org.codehaus.groovy.ast.ClassNode[] getInterfaces()
    {
        org.codehaus.groovy.ast.ClassNode r0, $r1, $r2, $r4, $r6;
        org.codehaus.groovy.ast.ClassNode[] $r3, $r5;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $z0 = $r1.<org.codehaus.groovy.ast.ClassNode: boolean lazyInitDone>;

        if $z0 != 0 goto label1;

        $r6 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        specialinvoke $r6.<org.codehaus.groovy.ast.ClassNode: void lazyClassInit()>();

     label1:
        $r2 = r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect>;

        if $r2 == null goto label2;

        $r4 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $r5 = virtualinvoke $r4.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode[] getInterfaces()>();

        return $r5;

     label2:
        $r3 = r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode[] interfaces>;

        return $r3;
    }

    public void setInterfaces(org.codehaus.groovy.ast.ClassNode[])
    {
        org.codehaus.groovy.ast.ClassNode r0, $r1, $r3;
        org.codehaus.groovy.ast.ClassNode[] r2;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        r2 := @parameter0: org.codehaus.groovy.ast.ClassNode[];

        $r1 = r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect>;

        if $r1 == null goto label1;

        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        virtualinvoke $r3.<org.codehaus.groovy.ast.ClassNode: void setInterfaces(org.codehaus.groovy.ast.ClassNode[])>(r2);

        goto label2;

     label1:
        r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode[] interfaces> = r2;

     label2:
        return;
    }

    public org.codehaus.groovy.ast.MixinNode[] getMixins()
    {
        org.codehaus.groovy.ast.MixinNode[] $r2;
        org.codehaus.groovy.ast.ClassNode r0, $r1;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $r2 = $r1.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.MixinNode[] mixins>;

        return $r2;
    }

    public java.util.List getMethods()
    {
        org.codehaus.groovy.ast.ClassNode r0, $r1, $r2, $r4, $r6;
        java.util.List $r3, $r5;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $z0 = $r1.<org.codehaus.groovy.ast.ClassNode: boolean lazyInitDone>;

        if $z0 != 0 goto label1;

        $r6 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        specialinvoke $r6.<org.codehaus.groovy.ast.ClassNode: void lazyClassInit()>();

     label1:
        $r2 = r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect>;

        if $r2 == null goto label2;

        $r4 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $r5 = virtualinvoke $r4.<org.codehaus.groovy.ast.ClassNode: java.util.List getMethods()>();

        return $r5;

     label2:
        $r3 = r0.<org.codehaus.groovy.ast.ClassNode: java.util.List methodsList>;

        return $r3;
    }

    public java.util.List getAbstractMethods()
    {
        java.util.Iterator $r4;
        org.codehaus.groovy.ast.ClassNode r1;
        java.util.Collection $r3;
        java.util.ArrayList $r0;
        org.codehaus.groovy.ast.MethodNode r6;
        java.util.Map $r2;
        java.lang.Object $r5;
        boolean $z0, $z1, $z2;

        r1 := @this: org.codehaus.groovy.ast.ClassNode;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(3);

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: java.util.Map getDeclaredMethodsMap()>();

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.codehaus.groovy.ast.MethodNode) $r5;

        $z2 = virtualinvoke r6.<org.codehaus.groovy.ast.MethodNode: boolean isAbstract()>();

        if $z2 == 0 goto label2;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r6);

     label2:
        goto label1;

     label3:
        $z1 = interfaceinvoke $r0.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label4;

        return null;

     label4:
        return $r0;
    }

    public java.util.List getAllDeclaredMethods()
    {
        org.codehaus.groovy.ast.ClassNode r1;
        java.util.Map $r2;
        java.util.Collection $r3;
        java.util.ArrayList $r0;

        r1 := @this: org.codehaus.groovy.ast.ClassNode;

        $r0 = new java.util.ArrayList;

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: java.util.Map getDeclaredMethodsMap()>();

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        return $r0;
    }

    public java.util.Map getDeclaredMethodsMap()
    {
        java.util.HashMap $r2;
        org.codehaus.groovy.ast.MethodNode r14, r17;
        java.util.Map $r8, r15;
        org.codehaus.groovy.ast.ClassNode[] $r3;
        int i0, $i1;
        java.lang.String $r7, r12;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r5, $r10;
        org.codehaus.groovy.ast.ClassNode r0, $r1, r16;
        java.util.Set $r9;
        java.util.List $r4;
        java.lang.Object $r6, $r11, $r13;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getSuperClass()>();

        if $r1 == null goto label1;

        r15 = virtualinvoke $r1.<org.codehaus.groovy.ast.ClassNode: java.util.Map getDeclaredMethodsMap()>();

        goto label2;

     label1:
        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r15 = $r2;

     label2:
        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode[] getInterfaces()>();

        i0 = 0;

     label3:
        $i1 = lengthof $r3;

        if i0 >= $i1 goto label7;

        r16 = $r3[i0];

        $r8 = virtualinvoke r16.<org.codehaus.groovy.ast.ClassNode: java.util.Map getDeclaredMethodsMap()>();

        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set keySet()>();

        $r10 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.lang.String) $r11;

        $z2 = interfaceinvoke r15.<java.util.Map: boolean containsKey(java.lang.Object)>(r12);

        if $z2 != 0 goto label5;

        $r13 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r12);

        r14 = (org.codehaus.groovy.ast.MethodNode) $r13;

        interfaceinvoke r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r12, r14);

     label5:
        goto label4;

     label6:
        i0 = i0 + 1;

        goto label3;

     label7:
        $r4 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.util.List getMethods()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label8:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r17 = (org.codehaus.groovy.ast.MethodNode) $r6;

        $r7 = virtualinvoke r17.<org.codehaus.groovy.ast.MethodNode: java.lang.String getTypeDescriptor()>();

        interfaceinvoke r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r17);

        goto label8;

     label9:
        return r15;
    }

    public java.lang.String getName()
    {
        java.lang.String $r2;
        org.codehaus.groovy.ast.ClassNode r0, $r1;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $r2 = $r1.<org.codehaus.groovy.ast.ClassNode: java.lang.String name>;

        return $r2;
    }

    public java.lang.String setName(java.lang.String)
    {
        java.lang.String r2;
        org.codehaus.groovy.ast.ClassNode r0, $r1;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $r1.<org.codehaus.groovy.ast.ClassNode: java.lang.String name> = r2;

        return r2;
    }

    public int getModifiers()
    {
        int $i0;
        org.codehaus.groovy.ast.ClassNode r0, $r1;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $i0 = $r1.<org.codehaus.groovy.ast.ClassNode: int modifiers>;

        return $i0;
    }

    public java.util.List getProperties()
    {
        java.util.List $r2;
        org.codehaus.groovy.ast.ClassNode r0, $r1;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $r2 = $r1.<org.codehaus.groovy.ast.ClassNode: java.util.List properties>;

        return $r2;
    }

    public java.util.List getDeclaredConstructors()
    {
        java.util.List $r3;
        org.codehaus.groovy.ast.ClassNode r0, $r1, $r2, $r4;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $z0 = $r1.<org.codehaus.groovy.ast.ClassNode: boolean lazyInitDone>;

        if $z0 != 0 goto label1;

        $r4 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        specialinvoke $r4.<org.codehaus.groovy.ast.ClassNode: void lazyClassInit()>();

     label1:
        $r2 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $r3 = $r2.<org.codehaus.groovy.ast.ClassNode: java.util.List constructors>;

        return $r3;
    }

    public org.codehaus.groovy.ast.ModuleNode getModule()
    {
        org.codehaus.groovy.ast.ClassNode r0, $r1;
        org.codehaus.groovy.ast.ModuleNode $r2;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $r2 = $r1.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ModuleNode module>;

        return $r2;
    }

    public void setModule(org.codehaus.groovy.ast.ModuleNode)
    {
        org.codehaus.groovy.ast.ClassNode r0, $r1, $r3;
        org.codehaus.groovy.ast.CompileUnit $r4;
        org.codehaus.groovy.ast.ModuleNode r2;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        r2 := @parameter0: org.codehaus.groovy.ast.ModuleNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $r1.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ModuleNode module> = r2;

        if r2 == null goto label1;

        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $r4 = virtualinvoke r2.<org.codehaus.groovy.ast.ModuleNode: org.codehaus.groovy.ast.CompileUnit getUnit()>();

        $r3.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.CompileUnit compileUnit> = $r4;

     label1:
        return;
    }

    public void addField(org.codehaus.groovy.ast.FieldNode)
    {
        org.codehaus.groovy.ast.ClassNode r1, $r2, $r3, $r4, $r6;
        java.util.List $r5;
        org.codehaus.groovy.ast.FieldNode r0;
        java.util.Map $r7;
        java.lang.String $r8;

        r1 := @this: org.codehaus.groovy.ast.ClassNode;

        r0 := @parameter0: org.codehaus.groovy.ast.FieldNode;

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        virtualinvoke r0.<org.codehaus.groovy.ast.FieldNode: void setDeclaringClass(org.codehaus.groovy.ast.ClassNode)>($r2);

        $r3 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        virtualinvoke r0.<org.codehaus.groovy.ast.FieldNode: void setOwner(org.codehaus.groovy.ast.ClassNode)>($r3);

        $r4 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $r5 = $r4.<org.codehaus.groovy.ast.ClassNode: java.util.List fields>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r0);

        $r6 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $r7 = $r6.<org.codehaus.groovy.ast.ClassNode: java.util.Map fieldIndex>;

        $r8 = virtualinvoke r0.<org.codehaus.groovy.ast.FieldNode: java.lang.String getName()>();

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, r0);

        return;
    }

    public void addProperty(org.codehaus.groovy.ast.PropertyNode)
    {
        java.util.List $r5;
        org.codehaus.groovy.ast.ClassNode r1, $r2, $r4;
        org.codehaus.groovy.ast.FieldNode $r3;
        org.codehaus.groovy.ast.PropertyNode r0;

        r1 := @this: org.codehaus.groovy.ast.ClassNode;

        r0 := @parameter0: org.codehaus.groovy.ast.PropertyNode;

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        virtualinvoke r0.<org.codehaus.groovy.ast.PropertyNode: void setDeclaringClass(org.codehaus.groovy.ast.ClassNode)>($r2);

        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.PropertyNode: org.codehaus.groovy.ast.FieldNode getField()>();

        virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: void addField(org.codehaus.groovy.ast.FieldNode)>($r3);

        $r4 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $r5 = $r4.<org.codehaus.groovy.ast.ClassNode: java.util.List properties>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r0);

        return;
    }

    public org.codehaus.groovy.ast.PropertyNode addProperty(java.lang.String, int, org.codehaus.groovy.ast.ClassNode, org.codehaus.groovy.ast.expr.Expression, org.codehaus.groovy.ast.stmt.Statement, org.codehaus.groovy.ast.stmt.Statement)
    {
        org.codehaus.groovy.ast.stmt.Statement r8, r9;
        int i0;
        java.lang.String r4, $r12;
        org.codehaus.groovy.ast.expr.Expression r7;
        org.codehaus.groovy.ast.PropertyNode $r3, r11;
        boolean $z0, $z1;
        java.util.Iterator $r2;
        org.codehaus.groovy.ast.ClassNode r0, r5, $r6;
        java.util.List $r1;
        java.lang.Object $r10;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r5 := @parameter2: org.codehaus.groovy.ast.ClassNode;

        r7 := @parameter3: org.codehaus.groovy.ast.expr.Expression;

        r8 := @parameter4: org.codehaus.groovy.ast.stmt.Statement;

        r9 := @parameter5: org.codehaus.groovy.ast.stmt.Statement;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.util.List getProperties()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r10 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.codehaus.groovy.ast.PropertyNode) $r10;

        $r12 = virtualinvoke r11.<org.codehaus.groovy.ast.PropertyNode: java.lang.String getName()>();

        $z1 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z1 == 0 goto label2;

        return r11;

     label2:
        goto label1;

     label3:
        $r3 = new org.codehaus.groovy.ast.PropertyNode;

        $r6 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        specialinvoke $r3.<org.codehaus.groovy.ast.PropertyNode: void <init>(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.stmt.Statement,org.codehaus.groovy.ast.stmt.Statement)>(r4, i0, r5, $r6, r7, r8, r9);

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: void addProperty(org.codehaus.groovy.ast.PropertyNode)>($r3);

        return $r3;
    }

    public boolean hasProperty(java.lang.String)
    {
        org.codehaus.groovy.ast.ClassNode r0;
        java.lang.String r1;
        org.codehaus.groovy.ast.PropertyNode $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.PropertyNode getProperty(java.lang.String)>(r1);

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.codehaus.groovy.ast.PropertyNode getProperty(java.lang.String)
    {
        java.util.Iterator $r2;
        org.codehaus.groovy.ast.ClassNode r0;
        java.util.List $r1;
        java.lang.Object $r3;
        java.lang.String $r5, r6;
        org.codehaus.groovy.ast.PropertyNode r4;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        r6 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.util.List getProperties()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.codehaus.groovy.ast.PropertyNode) $r3;

        $r5 = virtualinvoke r4.<org.codehaus.groovy.ast.PropertyNode: java.lang.String getName()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z1 == 0 goto label2;

        return r4;

     label2:
        goto label1;

     label3:
        return null;
    }

    public void addConstructor(org.codehaus.groovy.ast.ConstructorNode)
    {
        java.util.List $r3;
        org.codehaus.groovy.ast.ClassNode r1, $r2;
        org.codehaus.groovy.ast.ConstructorNode r0;

        r1 := @this: org.codehaus.groovy.ast.ClassNode;

        r0 := @parameter0: org.codehaus.groovy.ast.ConstructorNode;

        virtualinvoke r0.<org.codehaus.groovy.ast.ConstructorNode: void setDeclaringClass(org.codehaus.groovy.ast.ClassNode)>(r1);

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $r3 = $r2.<org.codehaus.groovy.ast.ClassNode: java.util.List constructors>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r0);

        return;
    }

    public org.codehaus.groovy.ast.ConstructorNode addConstructor(int, org.codehaus.groovy.ast.Parameter[], org.codehaus.groovy.ast.ClassNode[], org.codehaus.groovy.ast.stmt.Statement)
    {
        org.codehaus.groovy.ast.stmt.Statement r3;
        org.codehaus.groovy.ast.Parameter[] r1;
        org.codehaus.groovy.ast.ClassNode r4;
        int i0;
        org.codehaus.groovy.ast.ClassNode[] r2;
        org.codehaus.groovy.ast.ConstructorNode $r0;

        r4 := @this: org.codehaus.groovy.ast.ClassNode;

        i0 := @parameter0: int;

        r1 := @parameter1: org.codehaus.groovy.ast.Parameter[];

        r2 := @parameter2: org.codehaus.groovy.ast.ClassNode[];

        r3 := @parameter3: org.codehaus.groovy.ast.stmt.Statement;

        $r0 = new org.codehaus.groovy.ast.ConstructorNode;

        specialinvoke $r0.<org.codehaus.groovy.ast.ConstructorNode: void <init>(int,org.codehaus.groovy.ast.Parameter[],org.codehaus.groovy.ast.ClassNode[],org.codehaus.groovy.ast.stmt.Statement)>(i0, r1, r2, r3);

        virtualinvoke r4.<org.codehaus.groovy.ast.ClassNode: void addConstructor(org.codehaus.groovy.ast.ConstructorNode)>($r0);

        return $r0;
    }

    public void addMethod(org.codehaus.groovy.ast.MethodNode)
    {
        java.util.List $r3;
        org.codehaus.groovy.ast.MethodNode r0;
        org.codehaus.groovy.ast.ClassNode r1, $r2, $r4;
        org.codehaus.groovy.ast.ClassNode$MapOfLists $r5;
        java.lang.String $r6;

        r1 := @this: org.codehaus.groovy.ast.ClassNode;

        r0 := @parameter0: org.codehaus.groovy.ast.MethodNode;

        virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: void setDeclaringClass(org.codehaus.groovy.ast.ClassNode)>(r1);

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $r3 = $r2.<org.codehaus.groovy.ast.ClassNode: java.util.List methodsList>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r0);

        $r4 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $r5 = $r4.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode$MapOfLists methods>;

        $r6 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: java.lang.String getName()>();

        virtualinvoke $r5.<org.codehaus.groovy.ast.ClassNode$MapOfLists: void put(java.lang.Object,java.lang.Object)>($r6, r0);

        return;
    }

    public org.codehaus.groovy.ast.MethodNode addMethod(java.lang.String, int, org.codehaus.groovy.ast.ClassNode, org.codehaus.groovy.ast.Parameter[], org.codehaus.groovy.ast.ClassNode[], org.codehaus.groovy.ast.stmt.Statement)
    {
        org.codehaus.groovy.ast.stmt.Statement r7;
        org.codehaus.groovy.ast.ClassNode r0, r5;
        org.codehaus.groovy.ast.Parameter[] r2;
        org.codehaus.groovy.ast.MethodNode $r3, $r4;
        int i0;
        org.codehaus.groovy.ast.ClassNode[] r6;
        java.lang.String r1;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r5 := @parameter2: org.codehaus.groovy.ast.ClassNode;

        r2 := @parameter3: org.codehaus.groovy.ast.Parameter[];

        r6 := @parameter4: org.codehaus.groovy.ast.ClassNode[];

        r7 := @parameter5: org.codehaus.groovy.ast.stmt.Statement;

        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.MethodNode getDeclaredMethod(java.lang.String,org.codehaus.groovy.ast.Parameter[])>(r1, r2);

        if $r3 == null goto label1;

        return $r3;

     label1:
        $r4 = new org.codehaus.groovy.ast.MethodNode;

        specialinvoke $r4.<org.codehaus.groovy.ast.MethodNode: void <init>(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.Parameter[],org.codehaus.groovy.ast.ClassNode[],org.codehaus.groovy.ast.stmt.Statement)>(r1, i0, r5, r2, r6, r7);

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: void addMethod(org.codehaus.groovy.ast.MethodNode)>($r4);

        return $r4;
    }

    public boolean hasDeclaredMethod(java.lang.String, org.codehaus.groovy.ast.Parameter[])
    {
        org.codehaus.groovy.ast.Parameter[] r2;
        org.codehaus.groovy.ast.MethodNode $r3;
        org.codehaus.groovy.ast.ClassNode r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.codehaus.groovy.ast.Parameter[];

        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.MethodNode getDeclaredMethod(java.lang.String,org.codehaus.groovy.ast.Parameter[])>(r1, r2);

        if $r3 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean hasMethod(java.lang.String, org.codehaus.groovy.ast.Parameter[])
    {
        org.codehaus.groovy.ast.Parameter[] r2;
        org.codehaus.groovy.ast.MethodNode $r3;
        org.codehaus.groovy.ast.ClassNode r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.codehaus.groovy.ast.Parameter[];

        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.MethodNode getMethod(java.lang.String,org.codehaus.groovy.ast.Parameter[])>(r1, r2);

        if $r3 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.codehaus.groovy.ast.MethodNode addSyntheticMethod(java.lang.String, int, org.codehaus.groovy.ast.ClassNode, org.codehaus.groovy.ast.Parameter[], org.codehaus.groovy.ast.ClassNode[], org.codehaus.groovy.ast.stmt.Statement)
    {
        org.codehaus.groovy.ast.stmt.Statement r5;
        org.codehaus.groovy.ast.ClassNode r0, r2;
        org.codehaus.groovy.ast.Parameter[] r3;
        org.codehaus.groovy.ast.MethodNode $r6;
        int i0;
        org.codehaus.groovy.ast.ClassNode[] r4;
        java.lang.String r1;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: org.codehaus.groovy.ast.ClassNode;

        r3 := @parameter3: org.codehaus.groovy.ast.Parameter[];

        r4 := @parameter4: org.codehaus.groovy.ast.ClassNode[];

        r5 := @parameter5: org.codehaus.groovy.ast.stmt.Statement;

        $r6 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.MethodNode addMethod(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.Parameter[],org.codehaus.groovy.ast.ClassNode[],org.codehaus.groovy.ast.stmt.Statement)>(r1, i0, r2, r3, r4, r5);

        virtualinvoke $r6.<org.codehaus.groovy.ast.MethodNode: void setSynthetic(boolean)>(1);

        return $r6;
    }

    public org.codehaus.groovy.ast.FieldNode addField(java.lang.String, int, org.codehaus.groovy.ast.ClassNode, org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.ast.FieldNode $r0;
        org.codehaus.groovy.ast.ClassNode r2, r3, $r4;
        int i0;
        java.lang.String r1;
        org.codehaus.groovy.ast.expr.Expression r5;

        r3 := @this: org.codehaus.groovy.ast.ClassNode;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: org.codehaus.groovy.ast.ClassNode;

        r5 := @parameter3: org.codehaus.groovy.ast.expr.Expression;

        $r0 = new org.codehaus.groovy.ast.FieldNode;

        $r4 = virtualinvoke r3.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        specialinvoke $r0.<org.codehaus.groovy.ast.FieldNode: void <init>(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.expr.Expression)>(r1, i0, r2, $r4, r5);

        virtualinvoke r3.<org.codehaus.groovy.ast.ClassNode: void addField(org.codehaus.groovy.ast.FieldNode)>($r0);

        return $r0;
    }

    public void addInterface(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.ClassNode r0, $r1, r3, $r4, $r5;
        org.codehaus.groovy.ast.ClassNode[] r2, r6;
        int $i0, $i1, $i2, $i3, $i4, i5;
        boolean $z0, z1;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        r3 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        z1 = 0;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        r2 = $r1.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode[] interfaces>;

        i5 = 0;

     label1:
        $i0 = lengthof r2;

        if i5 >= $i0 goto label3;

        $r5 = r2[i5];

        $z0 = virtualinvoke r3.<org.codehaus.groovy.ast.ClassNode: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label2;

        z1 = 1;

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        if z1 != 0 goto label4;

        $i1 = lengthof r2;

        $i2 = $i1 + 1;

        r6 = newarray (org.codehaus.groovy.ast.ClassNode)[$i2];

        $i3 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r6, 0, $i3);

        $i4 = lengthof r2;

        r6[$i4] = r3;

        $r4 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $r4.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode[] interfaces> = r6;

     label4:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        org.codehaus.groovy.ast.ClassNode r0, $r1, r3, $r6;
        java.lang.Object r2;
        java.lang.String $r4, $r5;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        r2 := @parameter0: java.lang.Object;

        $r1 = r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect>;

        if $r1 == null goto label1;

        $r6 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $z1 = virtualinvoke $r6.<org.codehaus.groovy.ast.ClassNode: boolean equals(java.lang.Object)>(r2);

        return $z1;

     label1:
        r3 = (org.codehaus.groovy.ast.ClassNode) r2;

        $r4 = virtualinvoke r3.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r5 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        return $z0;
    }

    public void addMixin(org.codehaus.groovy.ast.MixinNode)
    {
        org.codehaus.groovy.ast.MixinNode[] r2, r6;
        org.codehaus.groovy.ast.ClassNode r0, $r1, $r4;
        int $i0, $i1, $i2, $i3, $i4, i5;
        org.codehaus.groovy.ast.MixinNode r3, $r5;
        boolean $z0, z1;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        r3 := @parameter0: org.codehaus.groovy.ast.MixinNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        r2 = $r1.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.MixinNode[] mixins>;

        z1 = 0;

        i5 = 0;

     label1:
        $i0 = lengthof r2;

        if i5 >= $i0 goto label3;

        $r5 = r2[i5];

        $z0 = virtualinvoke r3.<org.codehaus.groovy.ast.MixinNode: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label2;

        z1 = 1;

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        if z1 != 0 goto label4;

        $i1 = lengthof r2;

        $i2 = $i1 + 1;

        r6 = newarray (org.codehaus.groovy.ast.MixinNode)[$i2];

        $i3 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r6, 0, $i3);

        $i4 = lengthof r2;

        r6[$i4] = r3;

        $r4 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $r4.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.MixinNode[] mixins> = r6;

     label4:
        return;
    }

    public org.codehaus.groovy.ast.FieldNode getDeclaredField(java.lang.String)
    {
        org.codehaus.groovy.ast.ClassNode r0, $r1;
        org.codehaus.groovy.ast.FieldNode $r5;
        java.util.Map $r3;
        java.lang.Object $r4;
        java.lang.String r2;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $r3 = $r1.<org.codehaus.groovy.ast.ClassNode: java.util.Map fieldIndex>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r5 = (org.codehaus.groovy.ast.FieldNode) $r4;

        return $r5;
    }

    public org.codehaus.groovy.ast.FieldNode getField(java.lang.String)
    {
        org.codehaus.groovy.ast.ClassNode r0, r3;
        org.codehaus.groovy.ast.FieldNode $r2;
        java.lang.String r1;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        r1 := @parameter0: java.lang.String;

        r3 = r0;

     label1:
        if r3 == null goto label3;

        $r2 = virtualinvoke r3.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.FieldNode getDeclaredField(java.lang.String)>(r1);

        if $r2 == null goto label2;

        return $r2;

     label2:
        r3 = virtualinvoke r3.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getSuperClass()>();

        goto label1;

     label3:
        return null;
    }

    public org.codehaus.groovy.ast.FieldNode getOuterField(java.lang.String)
    {
        java.lang.String r1;
        org.codehaus.groovy.ast.ClassNode r0;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    public org.codehaus.groovy.ast.ClassNode getOuterClass()
    {
        org.codehaus.groovy.ast.ClassNode r0;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        return null;
    }

    public void addObjectInitializerStatements(org.codehaus.groovy.ast.stmt.Statement)
    {
        org.codehaus.groovy.ast.stmt.Statement r1;
        java.util.List $r2;
        org.codehaus.groovy.ast.ClassNode r0;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.Statement;

        $r2 = r0.<org.codehaus.groovy.ast.ClassNode: java.util.List objectInitializers>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public java.util.List getObjectInitializerStatements()
    {
        java.util.List $r1;
        org.codehaus.groovy.ast.ClassNode r0;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        $r1 = r0.<org.codehaus.groovy.ast.ClassNode: java.util.List objectInitializers>;

        return $r1;
    }

    public void addStaticInitializerStatements(java.util.List, boolean)
    {
        org.codehaus.groovy.ast.stmt.Statement $r3;
        org.codehaus.groovy.ast.MethodNode $r12, r13;
        org.codehaus.groovy.ast.ClassNode[] $r11;
        boolean $z0, $z1, z2;
        org.codehaus.groovy.ast.ClassNode r0, $r9;
        java.util.List $r1, $r5, r6;
        org.codehaus.groovy.ast.Parameter[] $r10;
        org.codehaus.groovy.ast.stmt.BlockStatement $r4, $r7, $r8, r14;
        java.lang.Object $r2;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        r6 := @parameter0: java.util.List;

        z2 := @parameter1: boolean;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.util.List getDeclaredMethods(java.lang.String)>("<clinit>");

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r9 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode VOID_TYPE>;

        $r10 = <org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.Parameter[] EMPTY_ARRAY>;

        $r11 = <org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode[] EMPTY_ARRAY>;

        $r8 = new org.codehaus.groovy.ast.stmt.BlockStatement;

        specialinvoke $r8.<org.codehaus.groovy.ast.stmt.BlockStatement: void <init>()>();

        $r12 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.MethodNode addMethod(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.Parameter[],org.codehaus.groovy.ast.ClassNode[],org.codehaus.groovy.ast.stmt.Statement)>("<clinit>", 8, $r9, $r10, $r11, $r8);

        r13 = $r12;

        virtualinvoke $r12.<org.codehaus.groovy.ast.MethodNode: void setSynthetic(boolean)>(1);

        goto label2;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        r13 = (org.codehaus.groovy.ast.MethodNode) $r2;

     label2:
        $r3 = virtualinvoke r13.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.stmt.Statement getCode()>();

        if $r3 != null goto label3;

        $r7 = new org.codehaus.groovy.ast.stmt.BlockStatement;

        specialinvoke $r7.<org.codehaus.groovy.ast.stmt.BlockStatement: void <init>()>();

        r14 = $r7;

        goto label5;

     label3:
        $z1 = $r3 instanceof org.codehaus.groovy.ast.stmt.BlockStatement;

        if $z1 == 0 goto label4;

        r14 = (org.codehaus.groovy.ast.stmt.BlockStatement) $r3;

        goto label5;

     label4:
        $r4 = new org.codehaus.groovy.ast.stmt.BlockStatement;

        specialinvoke $r4.<org.codehaus.groovy.ast.stmt.BlockStatement: void <init>()>();

        r14 = $r4;

        virtualinvoke $r4.<org.codehaus.groovy.ast.stmt.BlockStatement: void addStatement(org.codehaus.groovy.ast.stmt.Statement)>($r3);

     label5:
        if z2 != 0 goto label6;

        virtualinvoke r14.<org.codehaus.groovy.ast.stmt.BlockStatement: void addStatements(java.util.List)>(r6);

        goto label7;

     label6:
        $r5 = virtualinvoke r14.<org.codehaus.groovy.ast.stmt.BlockStatement: java.util.List getStatements()>();

        interfaceinvoke r6.<java.util.List: boolean addAll(java.util.Collection)>($r5);

        interfaceinvoke $r5.<java.util.List: void clear()>();

        interfaceinvoke $r5.<java.util.List: boolean addAll(java.util.Collection)>(r6);

     label7:
        return;
    }

    public java.util.List getDeclaredMethods(java.lang.String)
    {
        org.codehaus.groovy.ast.ClassNode r0, $r1, $r2, $r6, $r8;
        java.util.List $r5, $r7;
        org.codehaus.groovy.ast.ClassNode$MapOfLists $r4;
        java.lang.String r3;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        r3 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $z0 = $r1.<org.codehaus.groovy.ast.ClassNode: boolean lazyInitDone>;

        if $z0 != 0 goto label1;

        $r8 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        specialinvoke $r8.<org.codehaus.groovy.ast.ClassNode: void lazyClassInit()>();

     label1:
        $r2 = r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect>;

        if $r2 == null goto label2;

        $r6 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $r7 = virtualinvoke $r6.<org.codehaus.groovy.ast.ClassNode: java.util.List getDeclaredMethods(java.lang.String)>(r3);

        return $r7;

     label2:
        $r4 = r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode$MapOfLists methods>;

        $r5 = virtualinvoke $r4.<org.codehaus.groovy.ast.ClassNode$MapOfLists: java.util.List getNotNull(java.lang.Object)>(r3);

        return $r5;
    }

    public java.util.List getMethods(java.lang.String)
    {
        java.util.List $r3, $r5;
        org.codehaus.groovy.ast.ClassNode r1, $r4;
        java.lang.String r2;
        java.util.ArrayList $r0;

        r1 := @this: org.codehaus.groovy.ast.ClassNode;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.util.ArrayList;

        $r3 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: java.util.List getDeclaredMethods(java.lang.String)>(r2);

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        $r4 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getSuperClass()>();

        if $r4 == null goto label1;

        $r5 = virtualinvoke $r4.<org.codehaus.groovy.ast.ClassNode: java.util.List getMethods(java.lang.String)>(r2);

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r5);

     label1:
        return $r0;
    }

    public org.codehaus.groovy.ast.MethodNode getDeclaredMethod(java.lang.String, org.codehaus.groovy.ast.Parameter[])
    {
        java.util.Iterator $r3;
        org.codehaus.groovy.ast.ClassNode r0;
        java.util.List $r2;
        org.codehaus.groovy.ast.Parameter[] $r6, r7;
        org.codehaus.groovy.ast.MethodNode r5;
        java.lang.Object $r4;
        java.lang.String r1;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        r1 := @parameter0: java.lang.String;

        r7 := @parameter1: org.codehaus.groovy.ast.Parameter[];

        $r2 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.util.List getDeclaredMethods(java.lang.String)>(r1);

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.codehaus.groovy.ast.MethodNode) $r4;

        $r6 = virtualinvoke r5.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.Parameter[] getParameters()>();

        $z1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: boolean parametersEqual(org.codehaus.groovy.ast.Parameter[],org.codehaus.groovy.ast.Parameter[])>($r6, r7);

        if $z1 == 0 goto label2;

        return r5;

     label2:
        goto label1;

     label3:
        return null;
    }

    public org.codehaus.groovy.ast.MethodNode getMethod(java.lang.String, org.codehaus.groovy.ast.Parameter[])
    {
        java.util.Iterator $r3;
        org.codehaus.groovy.ast.ClassNode r0;
        java.util.List $r2;
        org.codehaus.groovy.ast.Parameter[] $r6, r7;
        org.codehaus.groovy.ast.MethodNode r5;
        java.lang.Object $r4;
        java.lang.String r1;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        r1 := @parameter0: java.lang.String;

        r7 := @parameter1: org.codehaus.groovy.ast.Parameter[];

        $r2 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.util.List getMethods(java.lang.String)>(r1);

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.codehaus.groovy.ast.MethodNode) $r4;

        $r6 = virtualinvoke r5.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.Parameter[] getParameters()>();

        $z1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: boolean parametersEqual(org.codehaus.groovy.ast.Parameter[],org.codehaus.groovy.ast.Parameter[])>($r6, r7);

        if $z1 == 0 goto label2;

        return r5;

     label2:
        goto label1;

     label3:
        return null;
    }

    public boolean isDerivedFrom(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.ClassNode r0, $r1, r2, r3;
        boolean $z0, $z1;

        r2 := @this: org.codehaus.groovy.ast.ClassNode;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $r1 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode OBJECT_TYPE>;

        $z0 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        r3 = r2;

     label2:
        if r3 == null goto label4;

        $z1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: boolean equals(java.lang.Object)>(r3);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        r3 = virtualinvoke r3.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getSuperClass()>();

        goto label2;

     label4:
        return 0;
    }

    public boolean isDerivedFromGroovyObject()
    {
        org.codehaus.groovy.ast.ClassNode r0, $r2;
        java.lang.Class $r1, $r3;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        $r1 = <org.codehaus.groovy.ast.ClassNode: java.lang.Class class$groovy$lang$GroovyObject>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <org.codehaus.groovy.ast.ClassNode: java.lang.Class class$(java.lang.String)>("groovy.lang.GroovyObject");

        <org.codehaus.groovy.ast.ClassNode: java.lang.Class class$groovy$lang$GroovyObject> = $r3;

        goto label2;

     label1:
        $r3 = <org.codehaus.groovy.ast.ClassNode: java.lang.Class class$groovy$lang$GroovyObject>;

     label2:
        $r2 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode make(java.lang.Class)>($r3);

        $z0 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: boolean implementsInterface(org.codehaus.groovy.ast.ClassNode)>($r2);

        return $z0;
    }

    public boolean implementsInterface(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.ClassNode r0, r1, $r2, r3;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        r1 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        r3 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

     label1:
        $z0 = virtualinvoke r3.<org.codehaus.groovy.ast.ClassNode: boolean declaresInterface(org.codehaus.groovy.ast.ClassNode)>(r1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $r2 = virtualinvoke r3.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getSuperClass()>();

        r3 = $r2;

        if $r2 != null goto label1;

        return 0;
    }

    public boolean declaresInterface(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.ClassNode r0, $r1, r3, r6;
        java.util.ArrayList $r4;
        java.util.List $r8, r9;
        org.codehaus.groovy.ast.ClassNode[] $r2, $r7;
        int $i0, $i1, i2;
        java.lang.Object $r5;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        r3 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $r2 = virtualinvoke $r1.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode[] getInterfaces()>();

        $z0 = specialinvoke r0.<org.codehaus.groovy.ast.ClassNode: boolean declaresInterfaceDirect(org.codehaus.groovy.ast.ClassNode[],org.codehaus.groovy.ast.ClassNode)>($r2, r3);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        r9 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

     label2:
        $i0 = interfaceinvoke r9.<java.util.List: int size()>();

        if $i0 <= 0 goto label6;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        i2 = 0;

     label3:
        $i1 = interfaceinvoke r9.<java.util.List: int size()>();

        if i2 >= $i1 goto label5;

        $r5 = interfaceinvoke r9.<java.util.List: java.lang.Object get(int)>(i2);

        r6 = (org.codehaus.groovy.ast.ClassNode) $r5;

        $z1 = virtualinvoke r6.<org.codehaus.groovy.ast.ClassNode: boolean declaresInterface(org.codehaus.groovy.ast.ClassNode)>(r3);

        if $z1 == 0 goto label4;

        return 1;

     label4:
        $r7 = virtualinvoke r6.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode[] getInterfaces()>();

        $r8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r7);

        interfaceinvoke $r4.<java.util.List: boolean addAll(java.util.Collection)>($r8);

        i2 = i2 + 1;

        goto label3;

     label5:
        r9 = $r4;

        goto label2;

     label6:
        return 0;
    }

    private boolean declaresInterfaceDirect(org.codehaus.groovy.ast.ClassNode[], org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.ClassNode r1, $r2, r3;
        org.codehaus.groovy.ast.ClassNode[] r0;
        int i0, i1;
        boolean $z0;

        r3 := @this: org.codehaus.groovy.ast.ClassNode;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode[];

        r1 := @parameter1: org.codehaus.groovy.ast.ClassNode;

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r2 = r0[i1];

        $z0 = virtualinvoke $r2.<org.codehaus.groovy.ast.ClassNode: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    public org.codehaus.groovy.ast.ClassNode getSuperClass()
    {
        org.codehaus.groovy.ast.ClassNode r0, $r1, $r2, r10;
        org.codehaus.groovy.GroovyBugError $r3;
        java.lang.StringBuffer $r4, $r5, $r7, $r8;
        java.lang.String $r6, $r9;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        $z0 = r0.<org.codehaus.groovy.ast.ClassNode: boolean lazyInitDone>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: boolean isResolved()>();

        if $z1 != 0 goto label1;

        $r3 = new org.codehaus.groovy.GroovyBugError;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Classnode#getSuperClass for ");

        $r6 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" called before class resolving");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<org.codehaus.groovy.GroovyBugError: void <init>(java.lang.String)>($r9);

        throw $r3;

     label1:
        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $r2 = virtualinvoke $r1.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getUnresolvedSuperClass()>();

        r10 = $r2;

        if $r2 == null goto label2;

        r10 = virtualinvoke $r2.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

     label2:
        return r10;
    }

    public org.codehaus.groovy.ast.ClassNode getUnresolvedSuperClass()
    {
        org.codehaus.groovy.ast.ClassNode r0, $r1;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getUnresolvedSuperClass(boolean)>(1);

        return $r1;
    }

    public org.codehaus.groovy.ast.ClassNode getUnresolvedSuperClass(boolean)
    {
        org.codehaus.groovy.ast.ClassNode r0, $r1, $r2, $r3, $r4, $r5;
        boolean z0, $z1;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label1;

        $r5 = r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode superClass>;

        return $r5;

     label1:
        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $z1 = $r1.<org.codehaus.groovy.ast.ClassNode: boolean lazyInitDone>;

        if $z1 != 0 goto label2;

        $r4 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        specialinvoke $r4.<org.codehaus.groovy.ast.ClassNode: void lazyClassInit()>();

     label2:
        $r2 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $r3 = $r2.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode superClass>;

        return $r3;
    }

    public void setUnresolvedSuperClass(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.ClassNode r0, r1;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        r1 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode superClass> = r1;

        return;
    }

    public org.codehaus.groovy.ast.CompileUnit getCompileUnit()
    {
        org.codehaus.groovy.ast.ClassNode r0, $r1, $r6;
        org.codehaus.groovy.ast.ModuleNode $r3, $r4;
        org.codehaus.groovy.ast.CompileUnit $r2, $r5, $r7, $r8;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        $r1 = r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect>;

        if $r1 == null goto label1;

        $r6 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $r7 = virtualinvoke $r6.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.CompileUnit getCompileUnit()>();

        return $r7;

     label1:
        $r2 = r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.CompileUnit compileUnit>;

        if $r2 != null goto label2;

        $r3 = r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ModuleNode module>;

        if $r3 == null goto label2;

        $r4 = r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ModuleNode module>;

        $r5 = virtualinvoke $r4.<org.codehaus.groovy.ast.ModuleNode: org.codehaus.groovy.ast.CompileUnit getUnit()>();

        r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.CompileUnit compileUnit> = $r5;

     label2:
        $r8 = r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.CompileUnit compileUnit>;

        return $r8;
    }

    protected void setCompileUnit(org.codehaus.groovy.ast.CompileUnit)
    {
        org.codehaus.groovy.ast.ClassNode r0, $r1, $r4;
        org.codehaus.groovy.ast.CompileUnit $r2, r3;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        r3 := @parameter0: org.codehaus.groovy.ast.CompileUnit;

        $r1 = r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect>;

        if $r1 == null goto label1;

        $r4 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        virtualinvoke $r4.<org.codehaus.groovy.ast.ClassNode: void setCompileUnit(org.codehaus.groovy.ast.CompileUnit)>(r3);

     label1:
        $r2 = r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.CompileUnit compileUnit>;

        if $r2 == null goto label2;

        r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.CompileUnit compileUnit> = r3;

     label2:
        return;
    }

    protected boolean parametersEqual(org.codehaus.groovy.ast.Parameter[], org.codehaus.groovy.ast.Parameter[])
    {
        org.codehaus.groovy.ast.Parameter $r2, $r4;
        org.codehaus.groovy.ast.ClassNode $r3, $r5, r6;
        org.codehaus.groovy.ast.Parameter[] r0, r1;
        int $i0, $i1, $i2, i3;
        boolean $z0, z1;

        r6 := @this: org.codehaus.groovy.ast.ClassNode;

        r0 := @parameter0: org.codehaus.groovy.ast.Parameter[];

        r1 := @parameter1: org.codehaus.groovy.ast.Parameter[];

        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 != $i0 goto label4;

        z1 = 1;

        i3 = 0;

     label1:
        $i2 = lengthof r0;

        if i3 >= $i2 goto label3;

        $r2 = r0[i3];

        $r3 = virtualinvoke $r2.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.ClassNode getType()>();

        $r4 = r1[i3];

        $r5 = virtualinvoke $r4.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.ClassNode getType()>();

        $z0 = virtualinvoke $r3.<org.codehaus.groovy.ast.ClassNode: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label2;

        z1 = 0;

        goto label3;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return z1;

     label4:
        return 0;
    }

    public java.lang.String getPackageName()
    {
        org.codehaus.groovy.ast.ClassNode r0;
        int $i0;
        java.lang.String $r1, $r2, $r3;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int lastIndexOf(int)>(46);

        if $i0 <= 0 goto label1;

        $r2 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        return $r3;

     label1:
        return null;
    }

    public java.lang.String getNameWithoutPackage()
    {
        org.codehaus.groovy.ast.ClassNode r0;
        int $i0, $i1;
        java.lang.String $r1, $r2, $r3, $r4;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int lastIndexOf(int)>(46);

        if $i0 <= 0 goto label1;

        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $i1 = $i0 + 1;

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int)>($i1);

        return $r4;

     label1:
        $r2 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        return $r2;
    }

    public void visitContents(org.codehaus.groovy.ast.GroovyClassVisitor)
    {
        org.codehaus.groovy.ast.MethodNode r17;
        org.codehaus.groovy.ast.PropertyNode r14;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r2, $r4, $r6, $r8;
        org.codehaus.groovy.ast.ClassNode r0;
        java.util.List $r1, $r3, $r5, $r7;
        org.codehaus.groovy.ast.GroovyClassVisitor r10;
        org.codehaus.groovy.ast.FieldNode r15;
        java.lang.Object $r9, $r11, $r12, $r13;
        org.codehaus.groovy.ast.ConstructorNode r16;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        r10 := @parameter0: org.codehaus.groovy.ast.GroovyClassVisitor;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.util.List getProperties()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r13 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r14 = (org.codehaus.groovy.ast.PropertyNode) $r13;

        interfaceinvoke r10.<org.codehaus.groovy.ast.GroovyClassVisitor: void visitProperty(org.codehaus.groovy.ast.PropertyNode)>(r14);

        goto label1;

     label2:
        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.util.List getFields()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r12 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r15 = (org.codehaus.groovy.ast.FieldNode) $r12;

        interfaceinvoke r10.<org.codehaus.groovy.ast.GroovyClassVisitor: void visitField(org.codehaus.groovy.ast.FieldNode)>(r15);

        goto label3;

     label4:
        $r5 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.util.List getDeclaredConstructors()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z2 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r11 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r16 = (org.codehaus.groovy.ast.ConstructorNode) $r11;

        interfaceinvoke r10.<org.codehaus.groovy.ast.GroovyClassVisitor: void visitConstructor(org.codehaus.groovy.ast.ConstructorNode)>(r16);

        goto label5;

     label6:
        $r7 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.util.List getMethods()>();

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label7:
        $z3 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label8;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r17 = (org.codehaus.groovy.ast.MethodNode) $r9;

        interfaceinvoke r10.<org.codehaus.groovy.ast.GroovyClassVisitor: void visitMethod(org.codehaus.groovy.ast.MethodNode)>(r17);

        goto label7;

     label8:
        return;
    }

    public org.codehaus.groovy.ast.MethodNode getGetterMethod(java.lang.String)
    {
        java.util.Iterator $r3;
        org.codehaus.groovy.ast.ClassNode r0, $r4, $r9, $r10;
        java.util.List $r2;
        org.codehaus.groovy.ast.Parameter[] $r11;
        org.codehaus.groovy.ast.MethodNode $r5, r7;
        int $i0;
        java.lang.Object $r6;
        java.lang.String r1, $r8;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.util.List getDeclaredMethods(java.lang.String)>(r1);

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.codehaus.groovy.ast.MethodNode) $r6;

        $r8 = virtualinvoke r7.<org.codehaus.groovy.ast.MethodNode: java.lang.String getName()>();

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label2;

        $r9 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode VOID_TYPE>;

        $r10 = virtualinvoke r7.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.ClassNode getReturnType()>();

        if $r9 == $r10 goto label2;

        $r11 = virtualinvoke r7.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.Parameter[] getParameters()>();

        $i0 = lengthof $r11;

        if $i0 != 0 goto label2;

        return r7;

     label2:
        goto label1;

     label3:
        $r4 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getSuperClass()>();

        if $r4 == null goto label4;

        $r5 = virtualinvoke $r4.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.MethodNode getGetterMethod(java.lang.String)>(r1);

        return $r5;

     label4:
        return null;
    }

    public org.codehaus.groovy.ast.MethodNode getSetterMethod(java.lang.String)
    {
        java.util.Iterator $r3;
        org.codehaus.groovy.ast.ClassNode r0, $r4, $r9, $r10;
        java.util.List $r2;
        org.codehaus.groovy.ast.Parameter[] $r11;
        org.codehaus.groovy.ast.MethodNode $r5, r7;
        int $i0;
        java.lang.Object $r6;
        java.lang.String r1, $r8;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.util.List getDeclaredMethods(java.lang.String)>(r1);

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.codehaus.groovy.ast.MethodNode) $r6;

        $r8 = virtualinvoke r7.<org.codehaus.groovy.ast.MethodNode: java.lang.String getName()>();

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label2;

        $r9 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode VOID_TYPE>;

        $r10 = virtualinvoke r7.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.ClassNode getReturnType()>();

        if $r9 != $r10 goto label2;

        $r11 = virtualinvoke r7.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.Parameter[] getParameters()>();

        $i0 = lengthof $r11;

        if $i0 != 1 goto label2;

        return r7;

     label2:
        goto label1;

     label3:
        $r4 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getSuperClass()>();

        if $r4 == null goto label4;

        $r5 = virtualinvoke $r4.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.MethodNode getSetterMethod(java.lang.String)>(r1);

        return $r5;

     label4:
        return null;
    }

    public boolean isStaticClass()
    {
        org.codehaus.groovy.ast.ClassNode r0, $r1;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $z0 = $r1.<org.codehaus.groovy.ast.ClassNode: boolean staticClass>;

        return $z0;
    }

    public void setStaticClass(boolean)
    {
        org.codehaus.groovy.ast.ClassNode r0, $r1;
        boolean z0;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $r1.<org.codehaus.groovy.ast.ClassNode: boolean staticClass> = z0;

        return;
    }

    public boolean isScriptBody()
    {
        org.codehaus.groovy.ast.ClassNode r0, $r1;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $z0 = $r1.<org.codehaus.groovy.ast.ClassNode: boolean scriptBody>;

        return $z0;
    }

    public void setScriptBody(boolean)
    {
        org.codehaus.groovy.ast.ClassNode r0, $r1;
        boolean z0;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $r1.<org.codehaus.groovy.ast.ClassNode: boolean scriptBody> = z0;

        return;
    }

    public boolean isScript()
    {
        org.codehaus.groovy.ast.ClassNode r0, $r1, $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $z0 = $r1.<org.codehaus.groovy.ast.ClassNode: boolean script>;

        if $z0 != 0 goto label1;

        $r2 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode SCRIPT_TYPE>;

        $z1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: boolean isDerivedFrom(org.codehaus.groovy.ast.ClassNode)>($r2);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public void setScript(boolean)
    {
        org.codehaus.groovy.ast.ClassNode r0, $r1;
        boolean z0;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $r1.<org.codehaus.groovy.ast.ClassNode: boolean script> = z0;

        return;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuffer $r4, $r5, $r6, $r9, $r10, $r11, $r12, $r14, $r15, $r16, $r17, $r18, $r21, $r22, $r23, $r24;
        int $i0, i1;
        org.codehaus.groovy.ast.GenericsType[] $r2, $r13, $r19;
        java.lang.String $r1, $r8, r25, r26;
        org.codehaus.groovy.ast.ClassNode r0, $r3, $r7;
        org.codehaus.groovy.ast.GenericsType $r20;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        r25 = $r1;

        $r2 = r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.GenericsType[] genericsTypes>;

        if $r2 == null goto label4;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" <");

        r26 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        i1 = 0;

     label1:
        $r13 = r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.GenericsType[] genericsTypes>;

        $i0 = lengthof $r13;

        if i1 >= $i0 goto label3;

        if i1 == 0 goto label2;

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r26);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        r26 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

     label2:
        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r26);

        $r19 = r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.GenericsType[] genericsTypes>;

        $r20 = $r19[i1];

        $r21 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r20);

        r26 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        i1 = i1 + 1;

        goto label1;

     label3:
        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r26);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(">");

        r25 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

     label4:
        $r3 = r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect>;

        if $r3 == null goto label5;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r25);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" -> ");

        $r7 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $r8 = virtualinvoke $r7.<org.codehaus.groovy.ast.ClassNode: java.lang.String toString()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        r25 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

     label5:
        return r25;
    }

    public boolean hasPossibleMethod(java.lang.String, org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.ast.MethodNode r5;
        int $i0, i1;
        org.codehaus.groovy.ast.expr.Expression r0;
        java.lang.String r2;
        boolean $z0, $z1;
        java.util.Iterator $r11;
        org.codehaus.groovy.ast.ClassNode r1, $r3, r9;
        org.codehaus.groovy.ast.Parameter[] $r6;
        java.util.List $r7, $r10;
        org.codehaus.groovy.ast.expr.TupleExpression r8;
        java.lang.Object $r4;

        r1 := @this: org.codehaus.groovy.ast.ClassNode;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: org.codehaus.groovy.ast.expr.Expression;

        i1 = 0;

        $z0 = r0 instanceof org.codehaus.groovy.ast.expr.TupleExpression;

        if $z0 == 0 goto label1;

        r8 = (org.codehaus.groovy.ast.expr.TupleExpression) r0;

        $r7 = virtualinvoke r8.<org.codehaus.groovy.ast.expr.TupleExpression: java.util.List getExpressions()>();

        i1 = interfaceinvoke $r7.<java.util.List: int size()>();

     label1:
        r9 = r1;

     label2:
        $r10 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: java.util.List getMethods(java.lang.String)>(r2);

        $r11 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r4 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.codehaus.groovy.ast.MethodNode) $r4;

        $r6 = virtualinvoke r5.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.Parameter[] getParameters()>();

        $i0 = lengthof $r6;

        if $i0 != i1 goto label4;

        return 1;

     label4:
        goto label3;

     label5:
        $r3 = virtualinvoke r9.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getSuperClass()>();

        r9 = $r3;

        if $r3 != null goto label2;

        return 0;
    }

    public boolean hasPossibleStaticMethod(java.lang.String, org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.ast.MethodNode r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9, $i10;
        org.codehaus.groovy.ast.expr.Expression r0;
        java.lang.String r2;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.codehaus.groovy.ast.Parameter $r8, $r9;
        java.util.Iterator $r4;
        org.codehaus.groovy.ast.ClassNode r1, $r10;
        java.util.List $r3, $r11;
        org.codehaus.groovy.ast.Parameter[] $r7;
        org.codehaus.groovy.ast.expr.TupleExpression r12;
        java.lang.Object $r5;

        r1 := @this: org.codehaus.groovy.ast.ClassNode;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: org.codehaus.groovy.ast.expr.Expression;

        i7 = 0;

        $z0 = r0 instanceof org.codehaus.groovy.ast.expr.TupleExpression;

        if $z0 == 0 goto label1;

        r12 = (org.codehaus.groovy.ast.expr.TupleExpression) r0;

        $r11 = virtualinvoke r12.<org.codehaus.groovy.ast.expr.TupleExpression: java.util.List getExpressions()>();

        i7 = interfaceinvoke $r11.<java.util.List: int size()>();

     label1:
        $r3 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: java.util.List getMethods(java.lang.String)>(r2);

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z4 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label9;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.codehaus.groovy.ast.MethodNode) $r5;

        $z1 = virtualinvoke r6.<org.codehaus.groovy.ast.MethodNode: boolean isStatic()>();

        if $z1 == 0 goto label8;

        $r7 = virtualinvoke r6.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.Parameter[] getParameters()>();

        $i0 = lengthof $r7;

        if $i0 != i7 goto label3;

        return 1;

     label3:
        $i1 = lengthof $r7;

        if $i1 <= 0 goto label4;

        $i3 = lengthof $r7;

        $i4 = $i3 - 1;

        $r9 = $r7[$i4];

        $r10 = virtualinvoke $r9.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.ClassNode getType()>();

        $z3 = virtualinvoke $r10.<org.codehaus.groovy.ast.ClassNode: boolean isArray()>();

        if $z3 == 0 goto label4;

        $i5 = lengthof $r7;

        $i6 = $i5 - 1;

        if i7 < $i6 goto label4;

        return 1;

     label4:
        i8 = 0;

        i9 = 0;

     label5:
        $i10 = lengthof $r7;

        if i9 >= $i10 goto label7;

        $r8 = $r7[i9];

        $z2 = virtualinvoke $r8.<org.codehaus.groovy.ast.Parameter: boolean hasInitialExpression()>();

        if $z2 != 0 goto label6;

        i8 = i8 + 1;

     label6:
        i9 = i9 + 1;

        goto label5;

     label7:
        $i2 = lengthof $r7;

        if i7 >= $i2 goto label8;

        if i8 > i7 goto label8;

        return 1;

     label8:
        goto label2;

     label9:
        return 0;
    }

    public boolean isInterface()
    {
        org.codehaus.groovy.ast.ClassNode r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        $i0 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: int getModifiers()>();

        $i1 = $i0 & 512;

        if $i1 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isResolved()
    {
        org.codehaus.groovy.ast.ClassNode r0, $r1, $r3, $r4;
        java.lang.Class $r2;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $r2 = $r1.<org.codehaus.groovy.ast.ClassNode: java.lang.Class clazz>;

        if $r2 != null goto label1;

        $r3 = r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode componentType>;

        if $r3 == null goto label2;

        $r4 = r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode componentType>;

        $z0 = virtualinvoke $r4.<org.codehaus.groovy.ast.ClassNode: boolean isResolved()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public boolean isArray()
    {
        org.codehaus.groovy.ast.ClassNode r0, $r1;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        $r1 = r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode componentType>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.codehaus.groovy.ast.ClassNode getComponentType()
    {
        org.codehaus.groovy.ast.ClassNode r0, $r1;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        $r1 = r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode componentType>;

        return $r1;
    }

    public java.lang.Class getTypeClass()
    {
        java.lang.StringBuffer $r6, $r7, $r9, $r10;
        java.lang.String $r8, $r11;
        boolean $z0;
        org.codehaus.groovy.ast.ClassNode r0, $r1, $r3, r4, $r12, $r13;
        org.codehaus.groovy.GroovyBugError $r5;
        java.lang.Class r2, $r14;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        r2 = $r1.<org.codehaus.groovy.ast.ClassNode: java.lang.Class clazz>;

        if r2 == null goto label1;

        return r2;

     label1:
        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        r4 = $r3.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode componentType>;

        if r4 == null goto label2;

        $z0 = virtualinvoke r4.<org.codehaus.groovy.ast.ClassNode: boolean isResolved()>();

        if $z0 == 0 goto label2;

        $r12 = virtualinvoke r4.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode makeArray()>();

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: void setRedirect(org.codehaus.groovy.ast.ClassNode)>($r12);

        $r13 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $r14 = $r13.<org.codehaus.groovy.ast.ClassNode: java.lang.Class clazz>;

        return $r14;

     label2:
        $r5 = new org.codehaus.groovy.GroovyBugError;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ClassNode#getTypeClass for ");

        $r8 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is called before the type class is set ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<org.codehaus.groovy.GroovyBugError: void <init>(java.lang.String)>($r11);

        throw $r5;
    }

    public boolean hasPackageName()
    {
        org.codehaus.groovy.ast.ClassNode r0, $r1;
        int $i0;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $r2 = $r1.<org.codehaus.groovy.ast.ClassNode: java.lang.String name>;

        $i0 = virtualinvoke $r2.<java.lang.String: int indexOf(int)>(46);

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setAnnotated(boolean)
    {
        org.codehaus.groovy.ast.ClassNode r0;
        boolean z0;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        z0 := @parameter0: boolean;

        r0.<org.codehaus.groovy.ast.ClassNode: boolean annotated> = z0;

        return;
    }

    public boolean isAnnotated()
    {
        org.codehaus.groovy.ast.ClassNode r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        $z0 = r0.<org.codehaus.groovy.ast.ClassNode: boolean annotated>;

        return $z0;
    }

    public org.codehaus.groovy.ast.GenericsType[] getGenericsTypes()
    {
        org.codehaus.groovy.ast.GenericsType[] $r1;
        org.codehaus.groovy.ast.ClassNode r0;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        $r1 = r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.GenericsType[] genericsTypes>;

        return $r1;
    }

    public void setGenericsTypes(org.codehaus.groovy.ast.GenericsType[])
    {
        org.codehaus.groovy.ast.ClassNode r0;
        org.codehaus.groovy.ast.GenericsType[] r1;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        r1 := @parameter0: org.codehaus.groovy.ast.GenericsType[];

        $z0 = r0.<org.codehaus.groovy.ast.ClassNode: boolean usesGenerics>;

        if $z0 != 0 goto label1;

        if r1 == null goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        r0.<org.codehaus.groovy.ast.ClassNode: boolean usesGenerics> = $z1;

        r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.GenericsType[] genericsTypes> = r1;

        return;
    }

    public void setGenericsPlaceHolder(boolean)
    {
        org.codehaus.groovy.ast.ClassNode r0;
        boolean $z0, z1, $z2;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        z1 := @parameter0: boolean;

        $z0 = r0.<org.codehaus.groovy.ast.ClassNode: boolean usesGenerics>;

        if $z0 != 0 goto label1;

        if z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        r0.<org.codehaus.groovy.ast.ClassNode: boolean usesGenerics> = $z2;

        r0.<org.codehaus.groovy.ast.ClassNode: boolean placeholder> = z1;

        return;
    }

    public boolean isGenericsPlaceHolder()
    {
        org.codehaus.groovy.ast.ClassNode r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        $z0 = r0.<org.codehaus.groovy.ast.ClassNode: boolean placeholder>;

        return $z0;
    }

    public boolean isUsingGenerics()
    {
        org.codehaus.groovy.ast.ClassNode r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        $z0 = r0.<org.codehaus.groovy.ast.ClassNode: boolean usesGenerics>;

        return $z0;
    }

    public void setUsingGenerics(boolean)
    {
        org.codehaus.groovy.ast.ClassNode r0;
        boolean z0;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        z0 := @parameter0: boolean;

        r0.<org.codehaus.groovy.ast.ClassNode: boolean usesGenerics> = z0;

        return;
    }

    public org.codehaus.groovy.ast.ClassNode getPlainNodeReference()
    {
        org.codehaus.groovy.ast.ClassNode r0, $r1, $r3, $r4;
        int $i0;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.ClassNode;

        $z0 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: boolean isPrimitiveType(org.codehaus.groovy.ast.ClassNode)>(r0);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $r1 = new org.codehaus.groovy.ast.ClassNode;

        $r2 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $i0 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: int getModifiers()>();

        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getSuperClass()>();

        specialinvoke $r1.<org.codehaus.groovy.ast.ClassNode: void <init>(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.ClassNode[],org.codehaus.groovy.ast.MixinNode[])>($r2, $i0, $r3, null, null);

        $r1.<org.codehaus.groovy.ast.ClassNode: boolean isPrimaryNode> = 0;

        $r4 = r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect>;

        virtualinvoke $r1.<org.codehaus.groovy.ast.ClassNode: void setRedirect(org.codehaus.groovy.ast.ClassNode)>($r4);

        return $r1;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        org.codehaus.groovy.ast.ClassNode $r1, $r3;
        org.codehaus.groovy.ast.ClassNode[] $r0;
        java.lang.Class $r2, $r4, $r5, $r6;

        $r0 = newarray (org.codehaus.groovy.ast.ClassNode)[0];

        <org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode[] EMPTY_ARRAY> = $r0;

        $r1 = new org.codehaus.groovy.ast.ClassNode;

        $r2 = <org.codehaus.groovy.ast.ClassNode: java.lang.Class class$java$lang$Object>;

        if $r2 != null goto label1;

        $r5 = staticinvoke <org.codehaus.groovy.ast.ClassNode: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        <org.codehaus.groovy.ast.ClassNode: java.lang.Class class$java$lang$Object> = $r5;

        goto label2;

     label1:
        $r5 = <org.codehaus.groovy.ast.ClassNode: java.lang.Class class$java$lang$Object>;

     label2:
        specialinvoke $r1.<org.codehaus.groovy.ast.ClassNode: void <init>(java.lang.Class)>($r5);

        <org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode THIS> = $r1;

        $r3 = new org.codehaus.groovy.ast.ClassNode;

        $r4 = <org.codehaus.groovy.ast.ClassNode: java.lang.Class class$java$lang$Object>;

        if $r4 != null goto label3;

        $r6 = staticinvoke <org.codehaus.groovy.ast.ClassNode: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        <org.codehaus.groovy.ast.ClassNode: java.lang.Class class$java$lang$Object> = $r6;

        goto label4;

     label3:
        $r6 = <org.codehaus.groovy.ast.ClassNode: java.lang.Class class$java$lang$Object>;

     label4:
        specialinvoke $r3.<org.codehaus.groovy.ast.ClassNode: void <init>(java.lang.Class)>($r6);

        <org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode SUPER> = $r3;

        return;
    }
}
