final class org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$3 extends java.lang.Object implements org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener$WaveletListener
{
    final org.waveprotocol.wave.model.wave.opbased.WaveViewImpl val$view;
    final org.waveprotocol.wave.common.logging.LoggerBundle val$logger;
    final org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1LocalWaveletHolder val$holder;

    void <init>(org.waveprotocol.wave.model.wave.opbased.WaveViewImpl, org.waveprotocol.wave.common.logging.LoggerBundle, org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1LocalWaveletHolder)
    {
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1LocalWaveletHolder r3;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl r1;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$3 r0;
        org.waveprotocol.wave.common.logging.LoggerBundle r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$3;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl;

        r2 := @parameter1: org.waveprotocol.wave.common.logging.LoggerBundle;

        r3 := @parameter2: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1LocalWaveletHolder;

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$3: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl val$view> = r1;

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$3: org.waveprotocol.wave.common.logging.LoggerBundle val$logger> = r2;

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$3: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1LocalWaveletHolder val$holder> = r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onWaveletAdded(org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet)
    {
        org.waveprotocol.wave.common.logging.Logger $r9;
        org.waveprotocol.wave.model.id.WaveletId $r3, $r12;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1LocalWaveletHolder $r5, $r7;
        org.waveprotocol.wave.model.wave.ObservableWavelet $r4;
        java.lang.String $r18;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet r1;
        boolean $z0;
        org.waveprotocol.wave.model.id.WaveId $r16;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl $r2, $r6, $r15;
        org.waveprotocol.wave.common.logging.LoggerBundle $r8;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$3 r0;
        java.lang.StringBuilder $r10, $r11, $r13, $r14, $r17;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$3;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$3: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl val$view>;

        $r3 = virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: org.waveprotocol.wave.model.id.WaveletId getId()>();

        $r4 = virtualinvoke $r2.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.wave.ObservableWavelet getWavelet(org.waveprotocol.wave.model.id.WaveletId)>($r3);

        if $r4 == null goto label1;

        $r8 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$3: org.waveprotocol.wave.common.logging.LoggerBundle val$logger>;

        $r9 = interfaceinvoke $r8.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring new channel for existing wavelet ");

        $r12 = virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: org.waveprotocol.wave.model.id.WaveletId getId()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in wave ");

        $r15 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$3: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl val$view>;

        $r16 = virtualinvoke $r15.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.id.WaveId getWaveId()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>($r18);

        goto label3;

     label1:
        $r5 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$3: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1LocalWaveletHolder val$holder>;

        $z0 = virtualinvoke $r5.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1LocalWaveletHolder: boolean isExpecting()>();

        if $z0 == 0 goto label2;

        $r7 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$3: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1LocalWaveletHolder val$holder>;

        virtualinvoke $r7.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1LocalWaveletHolder: void push(org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet)>(r1);

        goto label3;

     label2:
        $r6 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$3: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl val$view>;

        virtualinvoke $r6.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: void addWavelet(org.waveprotocol.wave.model.wave.ObservableWavelet)>(r1);

     label3:
        return;
    }

    public void onWaveletRemoved(org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet)
    {
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl $r2;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$3 r0;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$3;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$3: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl val$view>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: void removeWavelet(org.waveprotocol.wave.model.wave.ObservableWavelet)>(r1);

        return;
    }
}
