public class com.hp.hpl.jena.sparql.util.graph.GraphList extends java.lang.Object
{
    private static final com.hp.hpl.jena.graph.Node CAR;
    private static final com.hp.hpl.jena.graph.Node CDR;
    private static final com.hp.hpl.jena.graph.Node NIL;

    public void <init>()
    {
        com.hp.hpl.jena.sparql.util.graph.GraphList r0;

        r0 := @this: com.hp.hpl.jena.sparql.util.graph.GraphList;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.List listFromMember(com.hp.hpl.jena.sparql.util.graph.GNode)
    {
        com.hp.hpl.jena.sparql.util.graph.GNode r1;
        java.util.ArrayList $r0;

        r1 := @parameter0: com.hp.hpl.jena.sparql.util.graph.GNode;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: void listFromMember(com.hp.hpl.jena.sparql.util.graph.GNode,java.util.Collection)>(r1, $r0);

        return $r0;
    }

    public static void listFromMember(com.hp.hpl.jena.sparql.util.graph.GNode, java.util.Collection)
    {
        java.util.Iterator $r2;
        java.util.Collection r5;
        java.util.Set $r1;
        com.hp.hpl.jena.graph.Node $r6;
        com.hp.hpl.jena.sparql.util.graph.GNode r0, $r4, r7;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.util.graph.GNode;

        r5 := @parameter1: java.util.Collection;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: java.util.Set findCellsWithMember(com.hp.hpl.jena.sparql.util.graph.GNode)>(r0);

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.hp.hpl.jena.sparql.util.graph.GNode) $r3;

     label2:
        if r7 == null goto label4;

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: com.hp.hpl.jena.sparql.util.graph.GNode previous(com.hp.hpl.jena.sparql.util.graph.GNode)>(r7);

        if $r4 != null goto label3;

        $r6 = r7.<com.hp.hpl.jena.sparql.util.graph.GNode: com.hp.hpl.jena.graph.Node node>;

        interfaceinvoke r5.<java.util.Collection: boolean add(java.lang.Object)>($r6);

        goto label4;

     label3:
        r7 = $r4;

        goto label2;

     label4:
        goto label1;

     label5:
        return;
    }

    private static java.util.Set findCellsWithMember(com.hp.hpl.jena.sparql.util.graph.GNode)
    {
        java.util.Iterator $r6;
        com.hp.hpl.jena.graph.Node $r2, $r3, $r4, $r10;
        com.hp.hpl.jena.graph.Triple r8;
        java.util.HashSet $r0;
        com.hp.hpl.jena.sparql.util.graph.GNode r1, $r9;
        com.hp.hpl.jena.sparql.util.graph.Findable $r5;
        java.lang.Object $r7;
        boolean $z0;

        r1 := @parameter0: com.hp.hpl.jena.sparql.util.graph.GNode;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r5 = r1.<com.hp.hpl.jena.sparql.util.graph.GNode: com.hp.hpl.jena.sparql.util.graph.Findable findable>;

        $r4 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r3 = <com.hp.hpl.jena.sparql.util.graph.GraphList: com.hp.hpl.jena.graph.Node CAR>;

        $r2 = r1.<com.hp.hpl.jena.sparql.util.graph.GNode: com.hp.hpl.jena.graph.Node node>;

        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.sparql.util.graph.Findable: java.util.Iterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r4, $r3, $r2);

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.hp.hpl.jena.graph.Triple) $r7;

        $r9 = new com.hp.hpl.jena.sparql.util.graph.GNode;

        $r10 = virtualinvoke r8.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        specialinvoke $r9.<com.hp.hpl.jena.sparql.util.graph.GNode: void <init>(com.hp.hpl.jena.sparql.util.graph.GNode,com.hp.hpl.jena.graph.Node)>(r1, $r10);

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r9);

        goto label1;

     label2:
        staticinvoke <com.hp.hpl.jena.util.iterator.NiceIterator: void close(java.util.Iterator)>($r6);

        return $r0;
    }

    private static com.hp.hpl.jena.sparql.util.graph.GNode previous(com.hp.hpl.jena.sparql.util.graph.GNode)
    {
        com.hp.hpl.jena.sparql.util.graph.GNode r0, $r3;
        com.hp.hpl.jena.graph.Node $r1, $r2;

        r0 := @parameter0: com.hp.hpl.jena.sparql.util.graph.GNode;

        $r1 = <com.hp.hpl.jena.sparql.util.graph.GraphList: com.hp.hpl.jena.graph.Node CDR>;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: com.hp.hpl.jena.graph.Node getNodeReverse(com.hp.hpl.jena.sparql.util.graph.GNode,com.hp.hpl.jena.graph.Node)>(r0, $r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = new com.hp.hpl.jena.sparql.util.graph.GNode;

        specialinvoke $r3.<com.hp.hpl.jena.sparql.util.graph.GNode: void <init>(com.hp.hpl.jena.sparql.util.graph.GNode,com.hp.hpl.jena.graph.Node)>(r0, $r2);

        return $r3;
    }

    private static com.hp.hpl.jena.graph.Node getNodeReverse(com.hp.hpl.jena.sparql.util.graph.GNode, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.util.graph.GNode r0;
        com.hp.hpl.jena.graph.Node r1, $r3;
        com.hp.hpl.jena.graph.Triple $r2;

        r0 := @parameter0: com.hp.hpl.jena.sparql.util.graph.GNode;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: com.hp.hpl.jena.graph.Triple getTripleReverse(com.hp.hpl.jena.sparql.util.graph.GNode,com.hp.hpl.jena.graph.Node)>(r0, r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        return $r3;
    }

    private static com.hp.hpl.jena.graph.Triple getTripleReverse(com.hp.hpl.jena.sparql.util.graph.GNode, com.hp.hpl.jena.graph.Node)
    {
        java.util.Iterator $r5;
        com.hp.hpl.jena.graph.Node r1, $r2, $r3;
        com.hp.hpl.jena.graph.Triple r7;
        com.hp.hpl.jena.sparql.util.graph.GNode r0;
        com.hp.hpl.jena.sparql.util.graph.Findable $r4;
        java.lang.Object $r6;
        java.lang.StringBuilder $r8, $r9, $r10, $r11;
        java.lang.String $r12;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.util.graph.GNode;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        $r4 = r0.<com.hp.hpl.jena.sparql.util.graph.GNode: com.hp.hpl.jena.sparql.util.graph.Findable findable>;

        $r3 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r2 = r0.<com.hp.hpl.jena.sparql.util.graph.GNode: com.hp.hpl.jena.graph.Node node>;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.sparql.util.graph.Findable: java.util.Iterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r3, r1, $r2);

        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.hp.hpl.jena.graph.Triple) $r6;

        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unusual list: two arcs with same property (");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Class,java.lang.String)>(class "Lcom/hp/hpl/jena/sparql/util/graph/GraphList;", $r12);

     label2:
        staticinvoke <com.hp.hpl.jena.util.iterator.NiceIterator: void close(java.util.Iterator)>($r5);

        return r7;
    }

    public static java.util.List members(com.hp.hpl.jena.sparql.util.graph.GNode)
    {
        com.hp.hpl.jena.sparql.util.graph.GNode r1;
        java.util.ArrayList $r0;

        r1 := @parameter0: com.hp.hpl.jena.sparql.util.graph.GNode;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: void members(com.hp.hpl.jena.sparql.util.graph.GNode,java.util.Collection)>(r1, $r0);

        return $r0;
    }

    public static void members(com.hp.hpl.jena.sparql.util.graph.GNode, java.util.Collection)
    {
        com.hp.hpl.jena.sparql.util.graph.GNode r2;
        java.util.Collection r1;
        com.hp.hpl.jena.graph.Node $r0;
        boolean $z0, $z1;

        r2 := @parameter0: com.hp.hpl.jena.sparql.util.graph.GNode;

        r1 := @parameter1: java.util.Collection;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: boolean isListNode(com.hp.hpl.jena.sparql.util.graph.GNode)>(r2);

        if $z0 != 0 goto label1;

        return;

     label1:
        $z1 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: boolean listEnd(com.hp.hpl.jena.sparql.util.graph.GNode)>(r2);

        if $z1 != 0 goto label3;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: com.hp.hpl.jena.graph.Node car(com.hp.hpl.jena.sparql.util.graph.GNode)>(r2);

        if $r0 == null goto label2;

        interfaceinvoke r1.<java.util.Collection: boolean add(java.lang.Object)>($r0);

     label2:
        r2 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: com.hp.hpl.jena.sparql.util.graph.GNode next(com.hp.hpl.jena.sparql.util.graph.GNode)>(r2);

        goto label1;

     label3:
        return;
    }

    public static int length(com.hp.hpl.jena.sparql.util.graph.GNode)
    {
        com.hp.hpl.jena.sparql.util.graph.GNode r0;
        int i0, $i2;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.util.graph.GNode;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: boolean isListNode(com.hp.hpl.jena.sparql.util.graph.GNode)>(r0);

        if $z0 != 0 goto label1;

        $i2 = (int) -1;

        return $i2;

     label1:
        i0 = 0;

     label2:
        $z1 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: boolean listEnd(com.hp.hpl.jena.sparql.util.graph.GNode)>(r0);

        if $z1 != 0 goto label3;

        i0 = i0 + 1;

        r0 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: com.hp.hpl.jena.sparql.util.graph.GNode next(com.hp.hpl.jena.sparql.util.graph.GNode)>(r0);

        goto label2;

     label3:
        return i0;
    }

    public static int occurs(com.hp.hpl.jena.sparql.util.graph.GNode, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.util.graph.GNode r0;
        java.util.List $r2;
        int $i0;
        com.hp.hpl.jena.graph.Node r1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.util.graph.GNode;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: java.util.List indexes(com.hp.hpl.jena.sparql.util.graph.GNode,com.hp.hpl.jena.graph.Node)>(r0, r1);

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        return $i0;
    }

    public static boolean contains(com.hp.hpl.jena.sparql.util.graph.GNode, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.util.graph.GNode r0;
        int $i0;
        com.hp.hpl.jena.graph.Node r1;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.util.graph.GNode;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        $i0 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: int index(com.hp.hpl.jena.sparql.util.graph.GNode,com.hp.hpl.jena.graph.Node)>(r0, r1);

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static com.hp.hpl.jena.graph.Node get(com.hp.hpl.jena.sparql.util.graph.GNode, int)
    {
        com.hp.hpl.jena.sparql.util.graph.GNode r1;
        int i0, $i2;
        com.hp.hpl.jena.graph.Node $r0;
        boolean $z0, $z1;

        r1 := @parameter0: com.hp.hpl.jena.sparql.util.graph.GNode;

        i0 := @parameter1: int;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: boolean isListNode(com.hp.hpl.jena.sparql.util.graph.GNode)>(r1);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $z1 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: boolean listEnd(com.hp.hpl.jena.sparql.util.graph.GNode)>(r1);

        if $z1 != 0 goto label3;

        if i0 != 0 goto label2;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: com.hp.hpl.jena.graph.Node car(com.hp.hpl.jena.sparql.util.graph.GNode)>(r1);

        return $r0;

     label2:
        r1 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: com.hp.hpl.jena.sparql.util.graph.GNode next(com.hp.hpl.jena.sparql.util.graph.GNode)>(r1);

        $i2 = (int) -1;

        i0 = i0 + $i2;

        goto label1;

     label3:
        return null;
    }

    public static int index(com.hp.hpl.jena.sparql.util.graph.GNode, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node $r0, r1;
        com.hp.hpl.jena.sparql.util.graph.GNode r2;
        int i0, $i2, $i4;
        boolean $z0, $z1, $z2;

        r2 := @parameter0: com.hp.hpl.jena.sparql.util.graph.GNode;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: boolean isListNode(com.hp.hpl.jena.sparql.util.graph.GNode)>(r2);

        if $z0 != 0 goto label1;

        $i2 = (int) -1;

        return $i2;

     label1:
        i0 = 0;

     label2:
        $z1 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: boolean listEnd(com.hp.hpl.jena.sparql.util.graph.GNode)>(r2);

        if $z1 != 0 goto label4;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: com.hp.hpl.jena.graph.Node car(com.hp.hpl.jena.sparql.util.graph.GNode)>(r2);

        if $r0 == null goto label3;

        $z2 = virtualinvoke $r0.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label3;

        return i0;

     label3:
        r2 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: com.hp.hpl.jena.sparql.util.graph.GNode next(com.hp.hpl.jena.sparql.util.graph.GNode)>(r2);

        i0 = i0 + 1;

        goto label2;

     label4:
        $i4 = (int) -1;

        return $i4;
    }

    public static java.util.List indexes(com.hp.hpl.jena.sparql.util.graph.GNode, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node $r1, r2;
        java.lang.Integer $r3;
        java.util.ArrayList $r0;
        com.hp.hpl.jena.sparql.util.graph.GNode r4;
        int i0;
        boolean $z0, $z1, $z2;

        r4 := @parameter0: com.hp.hpl.jena.sparql.util.graph.GNode;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: boolean isListNode(com.hp.hpl.jena.sparql.util.graph.GNode)>(r4);

        if $z0 != 0 goto label1;

        return $r0;

     label1:
        i0 = 0;

     label2:
        $z1 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: boolean listEnd(com.hp.hpl.jena.sparql.util.graph.GNode)>(r4);

        if $z1 != 0 goto label4;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: com.hp.hpl.jena.graph.Node car(com.hp.hpl.jena.sparql.util.graph.GNode)>(r4);

        if $r1 == null goto label3;

        $z2 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>(r2);

        if $z2 == 0 goto label3;

        $r3 = new java.lang.Integer;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>(i0);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r3);

     label3:
        r4 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: com.hp.hpl.jena.sparql.util.graph.GNode next(com.hp.hpl.jena.sparql.util.graph.GNode)>(r4);

        i0 = i0 + 1;

        goto label2;

     label4:
        return $r0;
    }

    public static void triples(com.hp.hpl.jena.sparql.util.graph.GNode, java.util.Collection)
    {
        com.hp.hpl.jena.sparql.util.graph.GNode r0;
        java.util.Collection r5;
        com.hp.hpl.jena.graph.Node $r1, $r3;
        boolean $z0;
        com.hp.hpl.jena.graph.Triple $r2, $r4;

        r0 := @parameter0: com.hp.hpl.jena.sparql.util.graph.GNode;

        r5 := @parameter1: java.util.Collection;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: boolean listEnd(com.hp.hpl.jena.sparql.util.graph.GNode)>(r0);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = <com.hp.hpl.jena.sparql.util.graph.GraphList: com.hp.hpl.jena.graph.Node CAR>;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: com.hp.hpl.jena.graph.Triple getTriple(com.hp.hpl.jena.sparql.util.graph.GNode,com.hp.hpl.jena.graph.Node)>(r0, $r1);

        if $r2 == null goto label2;

        interfaceinvoke r5.<java.util.Collection: boolean add(java.lang.Object)>($r2);

     label2:
        $r3 = <com.hp.hpl.jena.sparql.util.graph.GraphList: com.hp.hpl.jena.graph.Node CDR>;

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: com.hp.hpl.jena.graph.Triple getTriple(com.hp.hpl.jena.sparql.util.graph.GNode,com.hp.hpl.jena.graph.Node)>(r0, $r3);

        if $r4 == null goto label3;

        interfaceinvoke r5.<java.util.Collection: boolean add(java.lang.Object)>($r4);

     label3:
        return;
    }

    public static java.util.List allTriples(com.hp.hpl.jena.sparql.util.graph.GNode)
    {
        com.hp.hpl.jena.sparql.util.graph.GNode r1;
        java.util.ArrayList $r0;

        r1 := @parameter0: com.hp.hpl.jena.sparql.util.graph.GNode;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: void allTriples(com.hp.hpl.jena.sparql.util.graph.GNode,java.util.Collection)>(r1, $r0);

        return $r0;
    }

    public static void allTriples(com.hp.hpl.jena.sparql.util.graph.GNode, java.util.Collection)
    {
        com.hp.hpl.jena.sparql.util.graph.GNode r1;
        java.util.Collection r0;
        boolean $z0, $z1;

        r1 := @parameter0: com.hp.hpl.jena.sparql.util.graph.GNode;

        r0 := @parameter1: java.util.Collection;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: boolean isListNode(com.hp.hpl.jena.sparql.util.graph.GNode)>(r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $z1 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: boolean listEnd(com.hp.hpl.jena.sparql.util.graph.GNode)>(r1);

        if $z1 != 0 goto label2;

        staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: void triples(com.hp.hpl.jena.sparql.util.graph.GNode,java.util.Collection)>(r1, r0);

        r1 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: com.hp.hpl.jena.sparql.util.graph.GNode next(com.hp.hpl.jena.sparql.util.graph.GNode)>(r1);

        goto label1;

     label2:
        return;
    }

    public static java.util.Set findAllLists(com.hp.hpl.jena.graph.Graph)
    {
        java.lang.Throwable $r22, $r23;
        com.hp.hpl.jena.graph.Node $r2, $r3, $r4, $r6, $r7, $r8, $r10, $r11, $r12, $r13, $r15, $r16, $r17, $r19, $r20, $r21;
        java.util.HashSet $r0;
        com.hp.hpl.jena.graph.Graph r1;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.hp.hpl.jena.graph.Triple r24, r25;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r5, $r9;
        java.lang.Object $r14, $r18;

        r1 := @parameter0: com.hp.hpl.jena.graph.Graph;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r4 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r3 = <com.hp.hpl.jena.sparql.util.graph.GraphList: com.hp.hpl.jena.graph.Node CDR>;

        $r2 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r5 = interfaceinvoke r1.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r4, $r3, $r2);

     label01:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label03;

        $r18 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r24 = (com.hp.hpl.jena.graph.Triple) $r18;

        $r19 = virtualinvoke r24.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r21 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r20 = <com.hp.hpl.jena.sparql.util.graph.GraphList: com.hp.hpl.jena.graph.Node CDR>;

        $z4 = interfaceinvoke r1.<com.hp.hpl.jena.graph.Graph: boolean contains(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r21, $r20, $r19);

        if $z4 != 0 goto label02;

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r19);

     label02:
        goto label01;

     label03:
        staticinvoke <com.hp.hpl.jena.util.iterator.NiceIterator: void close(java.util.Iterator)>($r5);

        goto label06;

     label04:
        $r23 := @caughtexception;

     label05:
        staticinvoke <com.hp.hpl.jena.util.iterator.NiceIterator: void close(java.util.Iterator)>($r5);

        throw $r23;

     label06:
        $r8 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r7 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r6 = <com.hp.hpl.jena.sparql.util.graph.GraphList: com.hp.hpl.jena.graph.Node NIL>;

        $r9 = interfaceinvoke r1.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r8, $r7, $r6);

     label07:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label09;

        $r14 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r25 = (com.hp.hpl.jena.graph.Triple) $r14;

        $r15 = virtualinvoke r25.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r16 = <com.hp.hpl.jena.sparql.util.graph.GraphList: com.hp.hpl.jena.graph.Node CDR>;

        $z3 = virtualinvoke $r15.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r16);

        if $z3 != 0 goto label08;

        $r17 = <com.hp.hpl.jena.sparql.util.graph.GraphList: com.hp.hpl.jena.graph.Node NIL>;

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r17);

        goto label09;

     label08:
        goto label07;

     label09:
        staticinvoke <com.hp.hpl.jena.util.iterator.NiceIterator: void close(java.util.Iterator)>($r9);

        goto label12;

     label10:
        $r22 := @caughtexception;

     label11:
        staticinvoke <com.hp.hpl.jena.util.iterator.NiceIterator: void close(java.util.Iterator)>($r9);

        throw $r22;

     label12:
        $r12 = <com.hp.hpl.jena.sparql.util.graph.GraphList: com.hp.hpl.jena.graph.Node NIL>;

        $r11 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r10 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $z2 = interfaceinvoke r1.<com.hp.hpl.jena.graph.Graph: boolean contains(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r12, $r11, $r10);

        if $z2 == 0 goto label13;

        $r13 = <com.hp.hpl.jena.sparql.util.graph.GraphList: com.hp.hpl.jena.graph.Node NIL>;

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r13);

     label13:
        return $r0;

        catch java.lang.Throwable from label01 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label07 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public static com.hp.hpl.jena.graph.Node listToTriples(java.util.List, com.hp.hpl.jena.sparql.core.BasicPattern)
    {
        com.hp.hpl.jena.graph.Node $r1, $r4, $r5, r8, $r9, $r11, $r13, $r14, r15;
        int $i0;
        boolean $z0;
        java.util.Iterator $r2;
        com.hp.hpl.jena.sparql.core.BasicPattern r6;
        com.hp.hpl.jena.graph.Triple $r3, $r10, $r12;
        java.util.List r0;
        java.lang.Object $r7;

        r0 := @parameter0: java.util.List;

        r6 := @parameter1: com.hp.hpl.jena.sparql.core.BasicPattern;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        $r14 = <com.hp.hpl.jena.vocabulary.RDF$Nodes: com.hp.hpl.jena.graph.Node nil>;

        return $r14;

     label1:
        $r1 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createAnon()>();

        r15 = $r1;

        $r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.hp.hpl.jena.graph.Node) $r7;

        $r9 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createAnon()>();

        $r10 = new com.hp.hpl.jena.graph.Triple;

        $r11 = <com.hp.hpl.jena.vocabulary.RDF$Nodes: com.hp.hpl.jena.graph.Node rest>;

        specialinvoke $r10.<com.hp.hpl.jena.graph.Triple: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r15, $r11, $r9);

        $r12 = new com.hp.hpl.jena.graph.Triple;

        $r13 = <com.hp.hpl.jena.vocabulary.RDF$Nodes: com.hp.hpl.jena.graph.Node first>;

        specialinvoke $r12.<com.hp.hpl.jena.graph.Triple: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r9, $r13, r8);

        r15 = $r9;

        virtualinvoke r6.<com.hp.hpl.jena.sparql.core.BasicPattern: void add(com.hp.hpl.jena.graph.Triple)>($r10);

        virtualinvoke r6.<com.hp.hpl.jena.sparql.core.BasicPattern: void add(com.hp.hpl.jena.graph.Triple)>($r12);

        goto label2;

     label3:
        $r3 = new com.hp.hpl.jena.graph.Triple;

        $r5 = <com.hp.hpl.jena.vocabulary.RDF$Nodes: com.hp.hpl.jena.graph.Node rest>;

        $r4 = <com.hp.hpl.jena.vocabulary.RDF$Nodes: com.hp.hpl.jena.graph.Node nil>;

        specialinvoke $r3.<com.hp.hpl.jena.graph.Triple: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r15, $r5, $r4);

        virtualinvoke r6.<com.hp.hpl.jena.sparql.core.BasicPattern: void add(com.hp.hpl.jena.graph.Triple)>($r3);

        return $r1;
    }

    private static com.hp.hpl.jena.sparql.util.graph.GNode next(com.hp.hpl.jena.sparql.util.graph.GNode)
    {
        com.hp.hpl.jena.sparql.util.graph.GNode $r0, r1;
        com.hp.hpl.jena.graph.Node $r2;

        r1 := @parameter0: com.hp.hpl.jena.sparql.util.graph.GNode;

        $r0 = new com.hp.hpl.jena.sparql.util.graph.GNode;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: com.hp.hpl.jena.graph.Node cdr(com.hp.hpl.jena.sparql.util.graph.GNode)>(r1);

        specialinvoke $r0.<com.hp.hpl.jena.sparql.util.graph.GNode: void <init>(com.hp.hpl.jena.sparql.util.graph.GNode,com.hp.hpl.jena.graph.Node)>(r1, $r2);

        return $r0;
    }

    private static com.hp.hpl.jena.graph.Node value(com.hp.hpl.jena.sparql.util.graph.GNode)
    {
        com.hp.hpl.jena.sparql.util.graph.GNode r0;
        com.hp.hpl.jena.graph.Node $r1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.util.graph.GNode;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: com.hp.hpl.jena.graph.Node car(com.hp.hpl.jena.sparql.util.graph.GNode)>(r0);

        return $r1;
    }

    public static boolean isListNode(com.hp.hpl.jena.sparql.util.graph.GNode)
    {
        com.hp.hpl.jena.sparql.util.graph.GNode r0;
        com.hp.hpl.jena.graph.Node $r1, $r2;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: com.hp.hpl.jena.sparql.util.graph.GNode;

        $r2 = r0.<com.hp.hpl.jena.sparql.util.graph.GNode: com.hp.hpl.jena.graph.Node node>;

        $r1 = <com.hp.hpl.jena.sparql.util.graph.GraphList: com.hp.hpl.jena.graph.Node NIL>;

        $z0 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: boolean isCons(com.hp.hpl.jena.sparql.util.graph.GNode)>(r0);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private static boolean isCons(com.hp.hpl.jena.sparql.util.graph.GNode)
    {
        com.hp.hpl.jena.sparql.util.graph.GNode r0;
        com.hp.hpl.jena.sparql.util.graph.Findable $r3;
        com.hp.hpl.jena.graph.Node $r1, $r2;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.util.graph.GNode;

        $r3 = r0.<com.hp.hpl.jena.sparql.util.graph.GNode: com.hp.hpl.jena.sparql.util.graph.Findable findable>;

        $r2 = r0.<com.hp.hpl.jena.sparql.util.graph.GNode: com.hp.hpl.jena.graph.Node node>;

        $r1 = <com.hp.hpl.jena.sparql.util.graph.GraphList: com.hp.hpl.jena.graph.Node CDR>;

        $z0 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.util.graph.Findable: boolean contains(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r2, $r1, null);

        return $z0;
    }

    private static boolean listEnd(com.hp.hpl.jena.sparql.util.graph.GNode)
    {
        com.hp.hpl.jena.sparql.util.graph.GNode r0;
        com.hp.hpl.jena.graph.Node $r1, $r2, $r3;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.util.graph.GNode;

        $r1 = r0.<com.hp.hpl.jena.sparql.util.graph.GNode: com.hp.hpl.jena.graph.Node node>;

        if $r1 == null goto label1;

        $r3 = r0.<com.hp.hpl.jena.sparql.util.graph.GNode: com.hp.hpl.jena.graph.Node node>;

        $r2 = <com.hp.hpl.jena.sparql.util.graph.GraphList: com.hp.hpl.jena.graph.Node NIL>;

        $z0 = virtualinvoke $r3.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    private static com.hp.hpl.jena.graph.Node car(com.hp.hpl.jena.sparql.util.graph.GNode)
    {
        com.hp.hpl.jena.sparql.util.graph.GNode r0;
        com.hp.hpl.jena.graph.Node $r1, $r2;

        r0 := @parameter0: com.hp.hpl.jena.sparql.util.graph.GNode;

        $r1 = <com.hp.hpl.jena.sparql.util.graph.GraphList: com.hp.hpl.jena.graph.Node CAR>;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: com.hp.hpl.jena.graph.Node getNode(com.hp.hpl.jena.sparql.util.graph.GNode,com.hp.hpl.jena.graph.Node)>(r0, $r1);

        return $r2;
    }

    private static com.hp.hpl.jena.graph.Node cdr(com.hp.hpl.jena.sparql.util.graph.GNode)
    {
        com.hp.hpl.jena.sparql.util.graph.GNode r0;
        com.hp.hpl.jena.graph.Node $r1, $r2;

        r0 := @parameter0: com.hp.hpl.jena.sparql.util.graph.GNode;

        $r1 = <com.hp.hpl.jena.sparql.util.graph.GraphList: com.hp.hpl.jena.graph.Node CDR>;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: com.hp.hpl.jena.graph.Node getNode(com.hp.hpl.jena.sparql.util.graph.GNode,com.hp.hpl.jena.graph.Node)>(r0, $r1);

        return $r2;
    }

    private static com.hp.hpl.jena.graph.Node getNode(com.hp.hpl.jena.sparql.util.graph.GNode, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.util.graph.GNode r0;
        com.hp.hpl.jena.graph.Node r1, $r3;
        boolean $z0;
        com.hp.hpl.jena.graph.Triple $r2;

        r0 := @parameter0: com.hp.hpl.jena.sparql.util.graph.GNode;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: boolean listEnd(com.hp.hpl.jena.sparql.util.graph.GNode)>(r0);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: com.hp.hpl.jena.graph.Triple getTriple(com.hp.hpl.jena.sparql.util.graph.GNode,com.hp.hpl.jena.graph.Node)>(r0, r1);

        if $r2 != null goto label2;

        return null;

     label2:
        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        return $r3;
    }

    private static com.hp.hpl.jena.graph.Triple getTriple(com.hp.hpl.jena.sparql.util.graph.GNode, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r1, $r2, $r3;
        com.hp.hpl.jena.sparql.util.graph.Findable $r4;
        java.lang.String $r12;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r5;
        com.hp.hpl.jena.graph.Triple r7;
        com.hp.hpl.jena.sparql.util.graph.GNode r0;
        java.lang.Object $r6;
        java.lang.StringBuilder $r8, $r9, $r10, $r11;

        r0 := @parameter0: com.hp.hpl.jena.sparql.util.graph.GNode;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: boolean listEnd(com.hp.hpl.jena.sparql.util.graph.GNode)>(r0);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r4 = r0.<com.hp.hpl.jena.sparql.util.graph.GNode: com.hp.hpl.jena.sparql.util.graph.Findable findable>;

        $r3 = r0.<com.hp.hpl.jena.sparql.util.graph.GNode: com.hp.hpl.jena.graph.Node node>;

        $r2 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.sparql.util.graph.Findable: java.util.Iterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r3, r1, $r2);

        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label2;

        return null;

     label2:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.hp.hpl.jena.graph.Triple) $r6;

        $z2 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unusual list: two arcs with same property (");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Class,java.lang.String)>(class "Lcom/hp/hpl/jena/sparql/util/graph/GraphList;", $r12);

     label3:
        staticinvoke <com.hp.hpl.jena.util.iterator.NiceIterator: void close(java.util.Iterator)>($r5);

        return r7;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.rdf.model.Property $r0, $r2;
        com.hp.hpl.jena.graph.Node $r1, $r3, $r5;
        com.hp.hpl.jena.rdf.model.Resource $r4;

        $r0 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property first>;

        $r1 = interfaceinvoke $r0.<com.hp.hpl.jena.rdf.model.Property: com.hp.hpl.jena.graph.Node asNode()>();

        <com.hp.hpl.jena.sparql.util.graph.GraphList: com.hp.hpl.jena.graph.Node CAR> = $r1;

        $r2 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property rest>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.Property: com.hp.hpl.jena.graph.Node asNode()>();

        <com.hp.hpl.jena.sparql.util.graph.GraphList: com.hp.hpl.jena.graph.Node CDR> = $r3;

        $r4 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Resource nil>;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.graph.Node asNode()>();

        <com.hp.hpl.jena.sparql.util.graph.GraphList: com.hp.hpl.jena.graph.Node NIL> = $r5;

        return;
    }
}
