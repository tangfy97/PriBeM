final class com.mycila.inject.internal.guava.util.concurrent.Futures$1 extends java.lang.Object implements com.mycila.inject.internal.guava.util.concurrent.UninterruptibleFuture
{
    final java.util.concurrent.Future val$future;

    void <init>(java.util.concurrent.Future)
    {
        com.mycila.inject.internal.guava.util.concurrent.Futures$1 r0;
        java.util.concurrent.Future r1;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.Futures$1;

        r1 := @parameter0: java.util.concurrent.Future;

        r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$1: java.util.concurrent.Future val$future> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean cancel(boolean)
    {
        com.mycila.inject.internal.guava.util.concurrent.Futures$1 r0;
        java.util.concurrent.Future $r1;
        boolean z0, $z1;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.Futures$1;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$1: java.util.concurrent.Future val$future>;

        $z1 = interfaceinvoke $r1.<java.util.concurrent.Future: boolean cancel(boolean)>(z0);

        return $z1;
    }

    public boolean isCancelled()
    {
        com.mycila.inject.internal.guava.util.concurrent.Futures$1 r0;
        java.util.concurrent.Future $r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.Futures$1;

        $r1 = r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$1: java.util.concurrent.Future val$future>;

        $z0 = interfaceinvoke $r1.<java.util.concurrent.Future: boolean isCancelled()>();

        return $z0;
    }

    public boolean isDone()
    {
        com.mycila.inject.internal.guava.util.concurrent.Futures$1 r0;
        java.util.concurrent.Future $r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.Futures$1;

        $r1 = r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$1: java.util.concurrent.Future val$future>;

        $z0 = interfaceinvoke $r1.<java.util.concurrent.Future: boolean isDone()>();

        return $z0;
    }

    public java.lang.Object get(long, java.util.concurrent.TimeUnit) throws java.util.concurrent.TimeoutException, java.util.concurrent.ExecutionException
    {
        java.util.concurrent.TimeUnit r1;
        com.mycila.inject.internal.guava.util.concurrent.Futures$1 r0;
        java.util.concurrent.Future $r2;
        long l0;
        java.lang.Object $r3;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.Futures$1;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        $r2 = r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$1: java.util.concurrent.Future val$future>;

        $r3 = staticinvoke <com.mycila.inject.internal.guava.util.concurrent.Uninterruptibles: java.lang.Object getUninterruptibly(java.util.concurrent.Future,long,java.util.concurrent.TimeUnit)>($r2, l0, r1);

        return $r3;
    }

    public java.lang.Object get() throws java.util.concurrent.ExecutionException
    {
        com.mycila.inject.internal.guava.util.concurrent.Futures$1 r0;
        java.util.concurrent.Future $r1;
        java.lang.Object $r2;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.Futures$1;

        $r1 = r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$1: java.util.concurrent.Future val$future>;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.util.concurrent.Uninterruptibles: java.lang.Object getUninterruptibly(java.util.concurrent.Future)>($r1);

        return $r2;
    }
}
