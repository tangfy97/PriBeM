public class com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern extends com.hp.hpl.jena.sparql.algebra.op.Op0
{
    private com.hp.hpl.jena.graph.Node graphNode;
    private com.hp.hpl.jena.sparql.core.BasicPattern triples;
    private com.hp.hpl.jena.sparql.core.QuadPattern quads;

    public static boolean isQuadPattern(com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.Op r0;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        $z0 = r0 instanceof com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        return $z0;
    }

    public void <init>(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.core.BasicPattern)
    {
        com.hp.hpl.jena.sparql.core.BasicPattern r2;
        com.hp.hpl.jena.graph.Node r1;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.sparql.core.BasicPattern;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.Op0: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.sparql.core.QuadPattern quads> = null;

        r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.graph.Node graphNode> = r1;

        r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.sparql.core.BasicPattern triples> = r2;

        return;
    }

    private void initQuads()
    {
        java.util.Iterator $r4;
        com.hp.hpl.jena.sparql.core.QuadPattern $r1, $r2, $r9;
        com.hp.hpl.jena.sparql.core.BasicPattern $r3;
        com.hp.hpl.jena.graph.Node $r8;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern r0;
        com.hp.hpl.jena.graph.Triple r6;
        com.hp.hpl.jena.sparql.core.Quad $r7;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.sparql.core.QuadPattern quads>;

        if $r1 != null goto label2;

        $r2 = new com.hp.hpl.jena.sparql.core.QuadPattern;

        specialinvoke $r2.<com.hp.hpl.jena.sparql.core.QuadPattern: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.sparql.core.QuadPattern quads> = $r2;

        $r3 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.sparql.core.BasicPattern triples>;

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.core.BasicPattern: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.hp.hpl.jena.graph.Triple) $r5;

        $r9 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.sparql.core.QuadPattern quads>;

        $r7 = new com.hp.hpl.jena.sparql.core.Quad;

        $r8 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.graph.Node graphNode>;

        specialinvoke $r7.<com.hp.hpl.jena.sparql.core.Quad: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Triple)>($r8, r6);

        virtualinvoke $r9.<com.hp.hpl.jena.sparql.core.QuadPattern: void add(com.hp.hpl.jena.sparql.core.Quad)>($r7);

        goto label1;

     label2:
        return;
    }

    public com.hp.hpl.jena.sparql.core.QuadPattern getPattern()
    {
        com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern r0;
        com.hp.hpl.jena.sparql.core.QuadPattern $r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: void initQuads()>();

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.sparql.core.QuadPattern quads>;

        return $r1;
    }

    public com.hp.hpl.jena.graph.Node getGraphNode()
    {
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.graph.Node graphNode>;

        return $r1;
    }

    public com.hp.hpl.jena.sparql.core.BasicPattern getBasicPattern()
    {
        com.hp.hpl.jena.sparql.core.BasicPattern $r1;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.sparql.core.BasicPattern triples>;

        return $r1;
    }

    public boolean isEmpty()
    {
        com.hp.hpl.jena.sparql.core.BasicPattern $r1;
        int $i0;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.sparql.core.BasicPattern triples>;

        $i0 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.core.BasicPattern: int size()>();

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isDefaultGraph()
    {
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.graph.Node graphNode>;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Quad: boolean isDefaultGraph(com.hp.hpl.jena.graph.Node)>($r1);

        return $z0;
    }

    public boolean isExplicitDefaultGraph()
    {
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.graph.Node graphNode>;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Quad: boolean isDefaultGraphExplicit(com.hp.hpl.jena.graph.Node)>($r1);

        return $z0;
    }

    public boolean isUnionGraph()
    {
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.graph.Node graphNode>;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Quad: boolean isUnionGraph(com.hp.hpl.jena.graph.Node)>($r1);

        return $z0;
    }

    public java.lang.String getName()
    {
        com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        return "quadpattern";
    }

    public com.hp.hpl.jena.sparql.algebra.Op apply(com.hp.hpl.jena.sparql.algebra.Transform)
    {
        com.hp.hpl.jena.sparql.algebra.Transform r0;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern r1;
        com.hp.hpl.jena.sparql.algebra.Op $r2;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Transform;

        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.algebra.Transform: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern)>(r1);

        return $r2;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern r1;
        com.hp.hpl.jena.sparql.algebra.OpVisitor r0;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.OpVisitor;

        interfaceinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpVisitor: void visit(com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern)>(r1);

        return;
    }

    public com.hp.hpl.jena.sparql.algebra.op.Op0 copy()
    {
        com.hp.hpl.jena.sparql.core.BasicPattern $r2;
        com.hp.hpl.jena.graph.Node $r3;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern $r0, r1;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        $r0 = new com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        $r3 = r1.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.graph.Node graphNode>;

        $r2 = r1.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.sparql.core.BasicPattern triples>;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.core.BasicPattern)>($r3, $r2);

        return $r0;
    }

    public int hashCode()
    {
        int $i0, $i1, $i2;
        com.hp.hpl.jena.sparql.core.BasicPattern $r2;
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.graph.Node graphNode>;

        $i0 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: int hashCode()>();

        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.sparql.core.BasicPattern triples>;

        $i1 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.core.BasicPattern: int hashCode()>();

        $i2 = $i0 ^ $i1;

        return $i2;
    }

    public boolean equalTo(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)
    {
        com.hp.hpl.jena.sparql.core.BasicPattern $r6, $r7;
        com.hp.hpl.jena.graph.Node $r3, $r4;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern r1, r2;
        com.hp.hpl.jena.sparql.util.NodeIsomorphismMap r5;
        com.hp.hpl.jena.sparql.algebra.Op r0;
        boolean $z0, $z1, $z2;

        r2 := @this: com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r5 := @parameter1: com.hp.hpl.jena.sparql.util.NodeIsomorphismMap;

        $z0 = r0 instanceof com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = (com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern) r0;

        $r4 = r2.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.graph.Node graphNode>;

        $r3 = r1.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.graph.Node graphNode>;

        $z1 = virtualinvoke $r4.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r3);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        $r7 = r2.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.sparql.core.BasicPattern triples>;

        $r6 = r1.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.sparql.core.BasicPattern triples>;

        $z2 = virtualinvoke $r7.<com.hp.hpl.jena.sparql.core.BasicPattern: boolean equiv(com.hp.hpl.jena.sparql.core.BasicPattern,com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)>($r6, r5);

        return $z2;
    }
}
