class org.apache.solr.client.solrj.impl.HttpClientUtil$UseCompressionResponseInterceptor extends java.lang.Object implements org.apache.http.HttpResponseInterceptor
{

    private void <init>()
    {
        org.apache.solr.client.solrj.impl.HttpClientUtil$UseCompressionResponseInterceptor r0;

        r0 := @this: org.apache.solr.client.solrj.impl.HttpClientUtil$UseCompressionResponseInterceptor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void process(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException
    {
        org.apache.http.HeaderElement[] $r3;
        org.apache.solr.client.solrj.impl.HttpClientUtil$UseCompressionResponseInterceptor r12;
        org.apache.http.Header $r2;
        org.apache.solr.client.solrj.impl.HttpClientUtil$GzipDecompressingEntity $r10;
        int $i0, i1;
        org.apache.solr.client.solrj.impl.HttpClientUtil$DeflateDecompressingEntity $r8;
        java.lang.String $r5, $r7;
        boolean $z0, $z1;
        org.apache.http.HttpEntity $r1, $r9, $r11;
        org.apache.http.HeaderElement $r4, $r6;
        org.apache.http.protocol.HttpContext r13;
        org.apache.http.HttpResponse r0;

        r12 := @this: org.apache.solr.client.solrj.impl.HttpClientUtil$UseCompressionResponseInterceptor;

        r0 := @parameter0: org.apache.http.HttpResponse;

        r13 := @parameter1: org.apache.http.protocol.HttpContext;

        $r1 = interfaceinvoke r0.<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>();

        $r2 = interfaceinvoke $r1.<org.apache.http.HttpEntity: org.apache.http.Header getContentEncoding()>();

        if $r2 == null goto label4;

        $r3 = interfaceinvoke $r2.<org.apache.http.Header: org.apache.http.HeaderElement[] getElements()>();

        i1 = 0;

     label1:
        $i0 = lengthof $r3;

        if i1 >= $i0 goto label4;

        $r4 = $r3[i1];

        $r5 = interfaceinvoke $r4.<org.apache.http.HeaderElement: java.lang.String getName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("gzip");

        if $z0 == 0 goto label2;

        $r10 = new org.apache.solr.client.solrj.impl.HttpClientUtil$GzipDecompressingEntity;

        $r11 = interfaceinvoke r0.<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>();

        specialinvoke $r10.<org.apache.solr.client.solrj.impl.HttpClientUtil$GzipDecompressingEntity: void <init>(org.apache.http.HttpEntity)>($r11);

        interfaceinvoke r0.<org.apache.http.HttpResponse: void setEntity(org.apache.http.HttpEntity)>($r10);

        return;

     label2:
        $r6 = $r3[i1];

        $r7 = interfaceinvoke $r6.<org.apache.http.HeaderElement: java.lang.String getName()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("deflate");

        if $z1 == 0 goto label3;

        $r8 = new org.apache.solr.client.solrj.impl.HttpClientUtil$DeflateDecompressingEntity;

        $r9 = interfaceinvoke r0.<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>();

        specialinvoke $r8.<org.apache.solr.client.solrj.impl.HttpClientUtil$DeflateDecompressingEntity: void <init>(org.apache.http.HttpEntity)>($r9);

        interfaceinvoke r0.<org.apache.http.HttpResponse: void setEntity(org.apache.http.HttpEntity)>($r8);

        return;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return;
    }

    void <init>(org.apache.solr.client.solrj.impl.HttpClientUtil$1)
    {
        org.apache.solr.client.solrj.impl.HttpClientUtil$UseCompressionResponseInterceptor r0;
        org.apache.solr.client.solrj.impl.HttpClientUtil$1 r1;

        r0 := @this: org.apache.solr.client.solrj.impl.HttpClientUtil$UseCompressionResponseInterceptor;

        r1 := @parameter0: org.apache.solr.client.solrj.impl.HttpClientUtil$1;

        specialinvoke r0.<org.apache.solr.client.solrj.impl.HttpClientUtil$UseCompressionResponseInterceptor: void <init>()>();

        return;
    }
}
