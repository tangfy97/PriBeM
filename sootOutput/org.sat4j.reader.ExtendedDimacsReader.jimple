public class org.sat4j.reader.ExtendedDimacsReader extends org.sat4j.reader.DimacsReader
{
    public static final int FALSE;
    public static final int TRUE;
    public static final int NOT;
    public static final int AND;
    public static final int NAND;
    public static final int OR;
    public static final int NOR;
    public static final int XOR;
    public static final int XNOR;
    public static final int IMPLIES;
    public static final int IFF;
    public static final int IFTHENELSE;
    public static final int ATLEAST;
    public static final int ATMOST;
    public static final int COUNT;
    private static final long serialVersionUID;
    static final boolean $assertionsDisabled;

    public void <init>(org.sat4j.specs.ISolver)
    {
        org.sat4j.reader.ExtendedDimacsReader r0;
        org.sat4j.tools.GateTranslator $r1;
        org.sat4j.specs.ISolver r2;

        r0 := @this: org.sat4j.reader.ExtendedDimacsReader;

        r2 := @parameter0: org.sat4j.specs.ISolver;

        $r1 = new org.sat4j.tools.GateTranslator;

        specialinvoke $r1.<org.sat4j.tools.GateTranslator: void <init>(org.sat4j.specs.ISolver)>(r2);

        specialinvoke r0.<org.sat4j.reader.DimacsReader: void <init>(org.sat4j.specs.ISolver)>($r1);

        return;
    }

    protected void readProblemLine(java.io.LineNumberReader) throws java.io.IOException, org.sat4j.reader.ParseFormatException
    {
        org.sat4j.specs.ISolver $r7, $r8;
        org.sat4j.reader.ExtendedDimacsReader r6;
        java.lang.AssertionError $r10;
        java.util.StringTokenizer $r2;
        int $i0, $i1, $i2;
        java.lang.String $r1, $r3, $r4, $r5, $r15, $r22;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.sat4j.specs.ContradictionException $r16;
        org.sat4j.tools.GateTranslator $r9;
        java.io.LineNumberReader r0;
        org.sat4j.reader.ParseFormatException $r11, $r17, $r18;
        java.lang.StringBuilder $r12, $r13, $r14, $r19, $r20, $r21;

        r6 := @this: org.sat4j.reader.ExtendedDimacsReader;

        r0 := @parameter0: java.io.LineNumberReader;

        $r1 = virtualinvoke r0.<java.io.LineNumberReader: java.lang.String readLine()>();

        if $r1 != null goto label1;

        $r11 = new org.sat4j.reader.ParseFormatException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("premature end of file: <p noncnf ...> expected  on line ");

        $i1 = virtualinvoke r0.<java.io.LineNumberReader: int getLineNumber()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<org.sat4j.reader.ParseFormatException: void <init>(java.lang.String)>($r15);

        throw $r11;

     label1:
        $r2 = new java.util.StringTokenizer;

        specialinvoke $r2.<java.util.StringTokenizer: void <init>(java.lang.String)>($r1);

        $z0 = virtualinvoke $r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label2;

        $r3 = virtualinvoke $r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("p");

        if $z1 == 0 goto label2;

        $z2 = virtualinvoke $r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z2 == 0 goto label2;

        $r4 = virtualinvoke $r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("noncnf");

        if $z3 != 0 goto label3;

     label2:
        $r18 = new org.sat4j.reader.ParseFormatException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("problem line expected (p noncnf ...) on line ");

        $i2 = virtualinvoke r0.<java.io.LineNumberReader: int getLineNumber()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<org.sat4j.reader.ParseFormatException: void <init>(java.lang.String)>($r22);

        throw $r18;

     label3:
        $r5 = virtualinvoke $r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r5);

        $z4 = <org.sat4j.reader.ExtendedDimacsReader: boolean $assertionsDisabled>;

        if $z4 != 0 goto label4;

        if $i0 > 0 goto label4;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label4:
        $r7 = r6.<org.sat4j.reader.ExtendedDimacsReader: org.sat4j.specs.ISolver solver>;

        interfaceinvoke $r7.<org.sat4j.specs.ISolver: int newVar(int)>($i0);

     label5:
        $r8 = r6.<org.sat4j.reader.ExtendedDimacsReader: org.sat4j.specs.ISolver solver>;

        $r9 = (org.sat4j.tools.GateTranslator) $r8;

        virtualinvoke $r9.<org.sat4j.tools.GateTranslator: void gateTrue(int)>($i0);

     label6:
        goto label8;

     label7:
        $r16 := @caughtexception;

        $r17 = new org.sat4j.reader.ParseFormatException;

        specialinvoke $r17.<org.sat4j.reader.ParseFormatException: void <init>(java.lang.String)>("Contradiction when asserting root variable?");

        throw $r17;

     label8:
        virtualinvoke r6.<org.sat4j.reader.ExtendedDimacsReader: void disableNumberOfConstraintCheck()>();

        return;

        catch org.sat4j.specs.ContradictionException from label5 to label6 with label7;
    }

    protected boolean handleConstr(java.lang.String, org.sat4j.specs.IVecInt) throws org.sat4j.specs.ContradictionException
    {
        org.sat4j.reader.ExtendedDimacsReader r2;
        java.util.Scanner $r21;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.StringBuilder $r11, $r12, $r13, $r29;
        org.sat4j.specs.ISolver $r3;
        java.lang.AssertionError $r20, $r22, $r23, $r24, $r25, $r26, $r27, $r28;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, $i15;
        java.lang.String r1, $r14;
        java.lang.UnsupportedOperationException $r30;
        org.sat4j.tools.GateTranslator $r18;
        org.sat4j.specs.IVecInt r4;

        r2 := @this: org.sat4j.reader.ExtendedDimacsReader;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: org.sat4j.specs.IVecInt;

        $z0 = <org.sat4j.reader.ExtendedDimacsReader: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $i12 = interfaceinvoke r4.<org.sat4j.specs.IVecInt: int size()>();

        if $i12 == 0 goto label01;

        $r20 = new java.lang.AssertionError;

        specialinvoke $r20.<java.lang.AssertionError: void <init>()>();

        throw $r20;

     label01:
        $r21 = new java.util.Scanner;

        specialinvoke $r21.<java.util.Scanner: void <init>(java.lang.String)>(r1);

        $r3 = r2.<org.sat4j.reader.ExtendedDimacsReader: org.sat4j.specs.ISolver solver>;

        $r18 = (org.sat4j.tools.GateTranslator) $r3;

     label02:
        $z8 = virtualinvoke $r21.<java.util.Scanner: boolean hasNext()>();

        if $z8 == 0 goto label24;

        $i0 = virtualinvoke $r21.<java.util.Scanner: int nextInt()>();

        $z1 = <org.sat4j.reader.ExtendedDimacsReader: boolean $assertionsDisabled>;

        if $z1 != 0 goto label03;

        if $i0 > 0 goto label03;

        $r22 = new java.lang.AssertionError;

        specialinvoke $r22.<java.lang.AssertionError: void <init>()>();

        throw $r22;

     label03:
        $i1 = virtualinvoke $r21.<java.util.Scanner: int nextInt()>();

        $z2 = <org.sat4j.reader.ExtendedDimacsReader: boolean $assertionsDisabled>;

        if $z2 != 0 goto label04;

        if $i1 != 0 goto label04;

        $r23 = new java.lang.AssertionError;

        specialinvoke $r23.<java.lang.AssertionError: void <init>()>();

        throw $r23;

     label04:
        $z3 = <org.sat4j.reader.ExtendedDimacsReader: boolean $assertionsDisabled>;

        if $z3 != 0 goto label05;

        $i15 = (int) -1;

        if $i1 == $i15 goto label05;

        if $i0 >= 13 goto label05;

        $r24 = new java.lang.AssertionError;

        specialinvoke $r24.<java.lang.AssertionError: void <init>()>();

        throw $r24;

     label05:
        i13 = 0;

     label06:
        if i13 >= $i1 goto label07;

        virtualinvoke $r21.<java.util.Scanner: int nextInt()>();

        i13 = i13 + 1;

        goto label06;

     label07:
        $i2 = virtualinvoke $r21.<java.util.Scanner: int nextInt()>();

     label08:
        $i3 = virtualinvoke $r21.<java.util.Scanner: int nextInt()>();

        if $i3 == 0 goto label09;

        interfaceinvoke r4.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i3);

        goto label08;

     label09:
        tableswitch($i0)
        {
            case 1: goto label10;
            case 2: goto label12;
            case 3: goto label15;
            case 4: goto label17;
            case 5: goto label22;
            case 6: goto label14;
            case 7: goto label22;
            case 8: goto label18;
            case 9: goto label22;
            case 10: goto label22;
            case 11: goto label19;
            case 12: goto label20;
            default: goto label22;
        };

     label10:
        $z7 = <org.sat4j.reader.ExtendedDimacsReader: boolean $assertionsDisabled>;

        if $z7 != 0 goto label11;

        $i11 = interfaceinvoke r4.<org.sat4j.specs.IVecInt: int size()>();

        if $i11 == 0 goto label11;

        $r25 = new java.lang.AssertionError;

        specialinvoke $r25.<java.lang.AssertionError: void <init>()>();

        throw $r25;

     label11:
        virtualinvoke $r18.<org.sat4j.tools.GateTranslator: void gateFalse(int)>($i2);

        goto label23;

     label12:
        $z6 = <org.sat4j.reader.ExtendedDimacsReader: boolean $assertionsDisabled>;

        if $z6 != 0 goto label13;

        $i10 = interfaceinvoke r4.<org.sat4j.specs.IVecInt: int size()>();

        if $i10 == 0 goto label13;

        $r26 = new java.lang.AssertionError;

        specialinvoke $r26.<java.lang.AssertionError: void <init>()>();

        throw $r26;

     label13:
        virtualinvoke $r18.<org.sat4j.tools.GateTranslator: void gateTrue(int)>($i2);

        goto label23;

     label14:
        virtualinvoke $r18.<org.sat4j.tools.GateTranslator: void or(int,org.sat4j.specs.IVecInt)>($i2, r4);

        goto label23;

     label15:
        $z5 = <org.sat4j.reader.ExtendedDimacsReader: boolean $assertionsDisabled>;

        if $z5 != 0 goto label16;

        $i9 = interfaceinvoke r4.<org.sat4j.specs.IVecInt: int size()>();

        if $i9 == 1 goto label16;

        $r27 = new java.lang.AssertionError;

        specialinvoke $r27.<java.lang.AssertionError: void <init>()>();

        throw $r27;

     label16:
        $i8 = interfaceinvoke r4.<org.sat4j.specs.IVecInt: int get(int)>(0);

        virtualinvoke $r18.<org.sat4j.tools.GateTranslator: void not(int,int)>($i2, $i8);

        goto label23;

     label17:
        virtualinvoke $r18.<org.sat4j.tools.GateTranslator: void and(int,org.sat4j.specs.IVecInt)>($i2, r4);

        goto label23;

     label18:
        virtualinvoke $r18.<org.sat4j.tools.GateTranslator: void xor(int,org.sat4j.specs.IVecInt)>($i2, r4);

        goto label23;

     label19:
        virtualinvoke $r18.<org.sat4j.tools.GateTranslator: void iff(int,org.sat4j.specs.IVecInt)>($i2, r4);

        goto label23;

     label20:
        $z4 = <org.sat4j.reader.ExtendedDimacsReader: boolean $assertionsDisabled>;

        if $z4 != 0 goto label21;

        $i7 = interfaceinvoke r4.<org.sat4j.specs.IVecInt: int size()>();

        if $i7 == 3 goto label21;

        $r28 = new java.lang.AssertionError;

        specialinvoke $r28.<java.lang.AssertionError: void <init>()>();

        throw $r28;

     label21:
        $i4 = interfaceinvoke r4.<org.sat4j.specs.IVecInt: int get(int)>(0);

        $i5 = interfaceinvoke r4.<org.sat4j.specs.IVecInt: int get(int)>(1);

        $i6 = interfaceinvoke r4.<org.sat4j.specs.IVecInt: int get(int)>(2);

        virtualinvoke $r18.<org.sat4j.tools.GateTranslator: void ite(int,int,int,int)>($i2, $i4, $i5, $i6);

        goto label23;

     label22:
        $r30 = new java.lang.UnsupportedOperationException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Gate type ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not handled yet");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r14);

        throw $r30;

     label23:
        goto label02;

     label24:
        interfaceinvoke r4.<org.sat4j.specs.IVecInt: void clear()>();

        return 1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.sat4j.reader.ExtendedDimacsReader: long serialVersionUID> = 1L;

        <org.sat4j.reader.ExtendedDimacsReader: int COUNT> = 15;

        <org.sat4j.reader.ExtendedDimacsReader: int ATMOST> = 14;

        <org.sat4j.reader.ExtendedDimacsReader: int ATLEAST> = 13;

        <org.sat4j.reader.ExtendedDimacsReader: int IFTHENELSE> = 12;

        <org.sat4j.reader.ExtendedDimacsReader: int IFF> = 11;

        <org.sat4j.reader.ExtendedDimacsReader: int IMPLIES> = 10;

        <org.sat4j.reader.ExtendedDimacsReader: int XNOR> = 9;

        <org.sat4j.reader.ExtendedDimacsReader: int XOR> = 8;

        <org.sat4j.reader.ExtendedDimacsReader: int NOR> = 7;

        <org.sat4j.reader.ExtendedDimacsReader: int OR> = 6;

        <org.sat4j.reader.ExtendedDimacsReader: int NAND> = 5;

        <org.sat4j.reader.ExtendedDimacsReader: int AND> = 4;

        <org.sat4j.reader.ExtendedDimacsReader: int NOT> = 3;

        <org.sat4j.reader.ExtendedDimacsReader: int TRUE> = 2;

        <org.sat4j.reader.ExtendedDimacsReader: int FALSE> = 1;

        $r0 = class "Lorg/sat4j/reader/ExtendedDimacsReader;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.sat4j.reader.ExtendedDimacsReader: boolean $assertionsDisabled> = $z1;

        return;
    }
}
