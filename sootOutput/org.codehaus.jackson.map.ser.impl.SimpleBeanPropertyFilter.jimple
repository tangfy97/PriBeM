public abstract class org.codehaus.jackson.map.ser.impl.SimpleBeanPropertyFilter extends java.lang.Object implements org.codehaus.jackson.map.ser.BeanPropertyFilter
{

    protected void <init>()
    {
        org.codehaus.jackson.map.ser.impl.SimpleBeanPropertyFilter r0;

        r0 := @this: org.codehaus.jackson.map.ser.impl.SimpleBeanPropertyFilter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.codehaus.jackson.map.ser.impl.SimpleBeanPropertyFilter filterOutAllExcept(java.util.Set)
    {
        java.util.Set r1;
        org.codehaus.jackson.map.ser.impl.SimpleBeanPropertyFilter$FilterExceptFilter $r0;

        r1 := @parameter0: java.util.Set;

        $r0 = new org.codehaus.jackson.map.ser.impl.SimpleBeanPropertyFilter$FilterExceptFilter;

        specialinvoke $r0.<org.codehaus.jackson.map.ser.impl.SimpleBeanPropertyFilter$FilterExceptFilter: void <init>(java.util.Set)>(r1);

        return $r0;
    }

    public static transient org.codehaus.jackson.map.ser.impl.SimpleBeanPropertyFilter filterOutAllExcept(java.lang.String[])
    {
        java.util.HashSet $r0;
        int $i0;
        java.lang.String[] r1;
        org.codehaus.jackson.map.ser.impl.SimpleBeanPropertyFilter$FilterExceptFilter $r2;

        r1 := @parameter0: java.lang.String[];

        $r0 = new java.util.HashSet;

        $i0 = lengthof r1;

        specialinvoke $r0.<java.util.HashSet: void <init>(int)>($i0);

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r0, r1);

        $r2 = new org.codehaus.jackson.map.ser.impl.SimpleBeanPropertyFilter$FilterExceptFilter;

        specialinvoke $r2.<org.codehaus.jackson.map.ser.impl.SimpleBeanPropertyFilter$FilterExceptFilter: void <init>(java.util.Set)>($r0);

        return $r2;
    }

    public static org.codehaus.jackson.map.ser.impl.SimpleBeanPropertyFilter serializeAllExcept(java.util.Set)
    {
        java.util.Set r1;
        org.codehaus.jackson.map.ser.impl.SimpleBeanPropertyFilter$SerializeExceptFilter $r0;

        r1 := @parameter0: java.util.Set;

        $r0 = new org.codehaus.jackson.map.ser.impl.SimpleBeanPropertyFilter$SerializeExceptFilter;

        specialinvoke $r0.<org.codehaus.jackson.map.ser.impl.SimpleBeanPropertyFilter$SerializeExceptFilter: void <init>(java.util.Set)>(r1);

        return $r0;
    }

    public static transient org.codehaus.jackson.map.ser.impl.SimpleBeanPropertyFilter serializeAllExcept(java.lang.String[])
    {
        java.util.HashSet $r0;
        int $i0;
        java.lang.String[] r1;
        org.codehaus.jackson.map.ser.impl.SimpleBeanPropertyFilter$SerializeExceptFilter $r2;

        r1 := @parameter0: java.lang.String[];

        $r0 = new java.util.HashSet;

        $i0 = lengthof r1;

        specialinvoke $r0.<java.util.HashSet: void <init>(int)>($i0);

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r0, r1);

        $r2 = new org.codehaus.jackson.map.ser.impl.SimpleBeanPropertyFilter$SerializeExceptFilter;

        specialinvoke $r2.<org.codehaus.jackson.map.ser.impl.SimpleBeanPropertyFilter$SerializeExceptFilter: void <init>(java.util.Set)>($r0);

        return $r2;
    }
}
