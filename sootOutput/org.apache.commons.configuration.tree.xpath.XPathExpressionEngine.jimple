public class org.apache.commons.configuration.tree.xpath.XPathExpressionEngine extends java.lang.Object implements org.apache.commons.configuration.tree.ExpressionEngine
{
    static final java.lang.String PATH_DELIMITER;
    static final java.lang.String ATTR_DELIMITER;
    private static final java.lang.String NODE_PATH_DELIMITERS;

    public void <init>()
    {
        org.apache.commons.configuration.tree.xpath.XPathExpressionEngine r0;

        r0 := @this: org.apache.commons.configuration.tree.xpath.XPathExpressionEngine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.util.List query(org.apache.commons.configuration.tree.ConfigurationNode, java.lang.String)
    {
        org.apache.commons.configuration.tree.xpath.XPathExpressionEngine r1;
        org.apache.commons.configuration.tree.ConfigurationNode r2;
        java.util.ArrayList $r5;
        java.util.List $r4, $r6;
        java.lang.String r0;
        org.apache.commons.jxpath.JXPathContext $r3;
        boolean $z0;

        r1 := @this: org.apache.commons.configuration.tree.xpath.XPathExpressionEngine;

        r2 := @parameter0: org.apache.commons.configuration.tree.ConfigurationNode;

        r0 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>(1);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r2);

        return $r5;

     label1:
        $r3 = virtualinvoke r1.<org.apache.commons.configuration.tree.xpath.XPathExpressionEngine: org.apache.commons.jxpath.JXPathContext createContext(org.apache.commons.configuration.tree.ConfigurationNode,java.lang.String)>(r2, r0);

        $r4 = virtualinvoke $r3.<org.apache.commons.jxpath.JXPathContext: java.util.List selectNodes(java.lang.String)>(r0);

        if $r4 == null goto label2;

        $r6 = $r4;

        goto label3;

     label2:
        $r6 = <java.util.Collections: java.util.List EMPTY_LIST>;

     label3:
        return $r6;
    }

    public java.lang.String nodeKey(org.apache.commons.configuration.tree.ConfigurationNode, java.lang.String)
    {
        java.lang.StringBuffer $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String r0, $r2, $r4, $r5, $r6, $r7;
        boolean $z0;
        org.apache.commons.configuration.tree.xpath.XPathExpressionEngine r8;
        org.apache.commons.configuration.tree.ConfigurationNode r1;

        r8 := @this: org.apache.commons.configuration.tree.xpath.XPathExpressionEngine;

        r1 := @parameter0: org.apache.commons.configuration.tree.ConfigurationNode;

        r0 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        return "";

     label1:
        $r2 = interfaceinvoke r1.<org.apache.commons.configuration.tree.ConfigurationNode: java.lang.String getName()>();

        if $r2 != null goto label2;

        return r0;

     label2:
        $r3 = new java.lang.StringBuffer;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $r4 = interfaceinvoke r1.<org.apache.commons.configuration.tree.ConfigurationNode: java.lang.String getName()>();

        $i1 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i2 = $i0 + $i1;

        $r5 = "/";

        $i3 = virtualinvoke $r5.<java.lang.String: int length()>();

        $i4 = $i2 + $i3;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>(int)>($i4);

        $i5 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i5 <= 0 goto label3;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/");

     label3:
        $z0 = interfaceinvoke r1.<org.apache.commons.configuration.tree.ConfigurationNode: boolean isAttribute()>();

        if $z0 == 0 goto label4;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("@");

     label4:
        $r6 = interfaceinvoke r1.<org.apache.commons.configuration.tree.ConfigurationNode: java.lang.String getName()>();

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r7 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;
    }

    public org.apache.commons.configuration.tree.NodeAddData prepareAdd(org.apache.commons.configuration.tree.ConfigurationNode, java.lang.String)
    {
        int $i0, $i1, i3, $i5;
        java.lang.String r0, $r3, $r4, $r9, $r10;
        boolean $z0;
        org.apache.commons.configuration.tree.xpath.XPathExpressionEngine r1;
        char $c2;
        java.lang.IllegalArgumentException $r14, $r15, $r16;
        org.apache.commons.configuration.tree.ConfigurationNode r2, $r8;
        java.util.List $r5;
        org.apache.commons.configuration.tree.NodeAddData $r17;
        java.lang.Object $r7;

        r1 := @this: org.apache.commons.configuration.tree.xpath.XPathExpressionEngine;

        r2 := @parameter0: org.apache.commons.configuration.tree.ConfigurationNode;

        r0 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("prepareAdd: key must not be null!");

        throw $r14;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i3 = $i0 - 1;

     label2:
        if i3 < 0 goto label3;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c2);

        if $z0 != 0 goto label3;

        $i5 = (int) -1;

        i3 = i3 + $i5;

        goto label2;

     label3:
        if i3 >= 0 goto label4;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("prepareAdd: Passed in key must contain a whitespace!");

        throw $r15;

     label4:
        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i3);

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String trim()>();

        $r5 = virtualinvoke r1.<org.apache.commons.configuration.tree.xpath.XPathExpressionEngine: java.util.List query(org.apache.commons.configuration.tree.ConfigurationNode,java.lang.String)>(r2, $r4);

        $i1 = interfaceinvoke $r5.<java.util.List: int size()>();

        if $i1 == 1 goto label5;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("prepareAdd: key must select exactly one target node!");

        throw $r16;

     label5:
        $r17 = new org.apache.commons.configuration.tree.NodeAddData;

        specialinvoke $r17.<org.apache.commons.configuration.tree.NodeAddData: void <init>()>();

        $r7 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(0);

        $r8 = (org.apache.commons.configuration.tree.ConfigurationNode) $r7;

        virtualinvoke $r17.<org.apache.commons.configuration.tree.NodeAddData: void setParent(org.apache.commons.configuration.tree.ConfigurationNode)>($r8);

        $r9 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i3);

        $r10 = virtualinvoke $r9.<java.lang.String: java.lang.String trim()>();

        virtualinvoke r1.<org.apache.commons.configuration.tree.xpath.XPathExpressionEngine: void initNodeAddData(org.apache.commons.configuration.tree.NodeAddData,java.lang.String)>($r17, $r10);

        return $r17;
    }

    protected org.apache.commons.jxpath.JXPathContext createContext(org.apache.commons.configuration.tree.ConfigurationNode, java.lang.String)
    {
        org.apache.commons.configuration.tree.xpath.XPathExpressionEngine r2;
        java.lang.String r3;
        org.apache.commons.jxpath.JXPathContext $r1;
        org.apache.commons.configuration.tree.ConfigurationNode r0;

        r2 := @this: org.apache.commons.configuration.tree.xpath.XPathExpressionEngine;

        r0 := @parameter0: org.apache.commons.configuration.tree.ConfigurationNode;

        r3 := @parameter1: java.lang.String;

        $r1 = staticinvoke <org.apache.commons.jxpath.JXPathContext: org.apache.commons.jxpath.JXPathContext newContext(java.lang.Object)>(r0);

        virtualinvoke $r1.<org.apache.commons.jxpath.JXPathContext: void setLenient(boolean)>(1);

        return $r1;
    }

    protected void initNodeAddData(org.apache.commons.configuration.tree.NodeAddData, java.lang.String)
    {
        java.util.StringTokenizer $r0;
        java.lang.String r1, $r4, $r5, $r6, r7;
        boolean $z0, $z1, $z2, z3, z4, z5, z6, z7;
        org.apache.commons.configuration.tree.xpath.XPathExpressionEngine r3;
        org.apache.commons.configuration.tree.NodeAddData r2;

        r3 := @this: org.apache.commons.configuration.tree.xpath.XPathExpressionEngine;

        r2 := @parameter0: org.apache.commons.configuration.tree.NodeAddData;

        r1 := @parameter1: java.lang.String;

        r7 = null;

        z3 = 0;

        z7 = 0;

        z6 = 0;

        z5 = 0;

        z4 = 1;

        $r0 = new java.util.StringTokenizer;

        specialinvoke $r0.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String,boolean)>(r1, "/@", 1);

     label01:
        $z0 = virtualinvoke $r0.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label10;

        $r4 = virtualinvoke $r0.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r5 = "/";

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label04;

        if z5 == 0 goto label02;

        specialinvoke r3.<org.apache.commons.configuration.tree.xpath.XPathExpressionEngine: void invalidPath(java.lang.String,java.lang.String)>(r1, " contains an attribute delimiter at an unallowed position.");

     label02:
        if r7 != null goto label03;

        specialinvoke r3.<org.apache.commons.configuration.tree.xpath.XPathExpressionEngine: void invalidPath(java.lang.String,java.lang.String)>(r1, " contains a \'/\' at an unallowed position.");

     label03:
        virtualinvoke r2.<org.apache.commons.configuration.tree.NodeAddData: void addPathNode(java.lang.String)>(r7);

        r7 = null;

        goto label09;

     label04:
        $r6 = "@";

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z2 == 0 goto label08;

        if z6 == 0 goto label05;

        specialinvoke r3.<org.apache.commons.configuration.tree.xpath.XPathExpressionEngine: void invalidPath(java.lang.String,java.lang.String)>(r1, " contains multiple attribute delimiters.");

     label05:
        if r7 != null goto label06;

        if z4 != 0 goto label06;

        specialinvoke r3.<org.apache.commons.configuration.tree.xpath.XPathExpressionEngine: void invalidPath(java.lang.String,java.lang.String)>(r1, " contains an attribute delimiter at an unallowed position.");

     label06:
        if r7 == null goto label07;

        virtualinvoke r2.<org.apache.commons.configuration.tree.NodeAddData: void addPathNode(java.lang.String)>(r7);

     label07:
        z3 = 1;

        z7 = 1;

        z6 = 1;

        z5 = 1;

        r7 = null;

        goto label09;

     label08:
        r7 = $r4;

     label09:
        z4 = 0;

        goto label01;

     label10:
        if r7 != null goto label11;

        specialinvoke r3.<org.apache.commons.configuration.tree.xpath.XPathExpressionEngine: void invalidPath(java.lang.String,java.lang.String)>(r1, "contains no components.");

     label11:
        virtualinvoke r2.<org.apache.commons.configuration.tree.NodeAddData: void setNewNodeName(java.lang.String)>(r7);

        virtualinvoke r2.<org.apache.commons.configuration.tree.NodeAddData: void setAttribute(boolean)>(z7);

        return;
    }

    private void invalidPath(java.lang.String, java.lang.String)
    {
        org.apache.commons.configuration.tree.xpath.XPathExpressionEngine r9;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuffer $r1, $r2, $r4, $r5, $r7;
        java.lang.String r3, r6, $r8;

        r9 := @this: org.apache.commons.configuration.tree.xpath.XPathExpressionEngine;

        r3 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid node path: \"");

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" ");

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r0;
    }

    static void <clinit>()
    {
        org.apache.commons.configuration.tree.xpath.ConfigurationNodePointerFactory $r0;

        <org.apache.commons.configuration.tree.xpath.XPathExpressionEngine: java.lang.String NODE_PATH_DELIMITERS> = "/@";

        <org.apache.commons.configuration.tree.xpath.XPathExpressionEngine: java.lang.String ATTR_DELIMITER> = "@";

        <org.apache.commons.configuration.tree.xpath.XPathExpressionEngine: java.lang.String PATH_DELIMITER> = "/";

        $r0 = new org.apache.commons.configuration.tree.xpath.ConfigurationNodePointerFactory;

        specialinvoke $r0.<org.apache.commons.configuration.tree.xpath.ConfigurationNodePointerFactory: void <init>()>();

        staticinvoke <org.apache.commons.jxpath.ri.JXPathContextReferenceImpl: void addNodePointerFactory(org.apache.commons.jxpath.ri.model.NodePointerFactory)>($r0);

        return;
    }
}
