class ucar.nc2.iosp.hdf5.H5header$DataBTree$DataChunk extends java.lang.Object
{
    int size;
    int filterMask;
    int[] offset;
    long filePos;
    static final boolean $assertionsDisabled;
    final ucar.nc2.iosp.hdf5.H5header$DataBTree this$1;

    void <init>(ucar.nc2.iosp.hdf5.H5header$DataBTree, int, boolean) throws java.io.IOException
    {
        ucar.unidata.io.RandomAccessFile $r3, $r5, $r18;
        byte $b9;
        int[] $r6, $r19;
        boolean z0, $z1, $z2;
        ucar.nc2.iosp.hdf5.H5header $r2, $r4, $r7, $r8, $r9, $r17;
        ucar.nc2.iosp.hdf5.H5header$DataBTree$DataChunk r0;
        java.lang.StringBuilder $r12, $r14, $r15, $r22;
        long $l3, $l5, $l6, $l7, $l11;
        java.lang.AssertionError $r21;
        int $i0, $i1, i2, $i4, $i8, i10, $i12;
        ucar.nc2.Variable $r13;
        java.lang.String $r16;
        ucar.nc2.iosp.hdf5.H5header$MemTracker $r10;
        ucar.nc2.iosp.hdf5.H5header$DataBTree r1;

        r0 := @this: ucar.nc2.iosp.hdf5.H5header$DataBTree$DataChunk;

        r1 := @parameter0: ucar.nc2.iosp.hdf5.H5header$DataBTree;

        i2 := @parameter1: int;

        z0 := @parameter2: boolean;

        r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$DataChunk: ucar.nc2.iosp.hdf5.H5header$DataBTree this$1> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = r1.<ucar.nc2.iosp.hdf5.H5header$DataBTree: ucar.nc2.iosp.hdf5.H5header this$0>;

        $r3 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: ucar.unidata.io.RandomAccessFile access$1400(ucar.nc2.iosp.hdf5.H5header)>($r2);

        $i0 = virtualinvoke $r3.<ucar.unidata.io.RandomAccessFile: int readInt()>();

        r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$DataChunk: int size> = $i0;

        $r4 = r1.<ucar.nc2.iosp.hdf5.H5header$DataBTree: ucar.nc2.iosp.hdf5.H5header this$0>;

        $r5 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: ucar.unidata.io.RandomAccessFile access$1400(ucar.nc2.iosp.hdf5.H5header)>($r4);

        $i1 = virtualinvoke $r5.<ucar.unidata.io.RandomAccessFile: int readInt()>();

        r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$DataChunk: int filterMask> = $i1;

        $r6 = newarray (int)[i2];

        r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$DataChunk: int[] offset> = $r6;

        i10 = 0;

     label1:
        if i10 >= i2 goto label3;

        $r17 = r1.<ucar.nc2.iosp.hdf5.H5header$DataBTree: ucar.nc2.iosp.hdf5.H5header this$0>;

        $r18 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: ucar.unidata.io.RandomAccessFile access$1400(ucar.nc2.iosp.hdf5.H5header)>($r17);

        $l7 = virtualinvoke $r18.<ucar.unidata.io.RandomAccessFile: long readLong()>();

        $z2 = <ucar.nc2.iosp.hdf5.H5header$DataBTree$DataChunk: boolean $assertionsDisabled>;

        if $z2 != 0 goto label2;

        $b9 = $l7 cmp 2147483647L;

        $i12 = (int) $b9;

        if $i12 < 0 goto label2;

        $r21 = new java.lang.AssertionError;

        specialinvoke $r21.<java.lang.AssertionError: void <init>()>();

        throw $r21;

     label2:
        $r19 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$DataChunk: int[] offset>;

        $i8 = (int) $l7;

        $r19[i10] = $i8;

        i10 = i10 + 1;

        goto label1;

     label3:
        if z0 == 0 goto label4;

        $l11 = -1L;

        goto label5;

     label4:
        $r8 = r1.<ucar.nc2.iosp.hdf5.H5header$DataBTree: ucar.nc2.iosp.hdf5.H5header this$0>;

        $r7 = r1.<ucar.nc2.iosp.hdf5.H5header$DataBTree: ucar.nc2.iosp.hdf5.H5header this$0>;

        $l3 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: long access$4000(ucar.nc2.iosp.hdf5.H5header)>($r7);

        $l11 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: long access$100(ucar.nc2.iosp.hdf5.H5header,long)>($r8, $l3);

     label5:
        r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$DataChunk: long filePos> = $l11;

        $z1 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: boolean access$1700()>();

        if $z1 == 0 goto label6;

        $r9 = r1.<ucar.nc2.iosp.hdf5.H5header$DataBTree: ucar.nc2.iosp.hdf5.H5header this$0>;

        $r10 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: ucar.nc2.iosp.hdf5.H5header$MemTracker access$1800(ucar.nc2.iosp.hdf5.H5header)>($r9);

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Chunked Data (");

        $r13 = staticinvoke <ucar.nc2.iosp.hdf5.H5header$DataBTree: ucar.nc2.Variable access$6000(ucar.nc2.iosp.hdf5.H5header$DataBTree)>(r1);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $l6 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$DataChunk: long filePos>;

        $i4 = r0.<ucar.nc2.iosp.hdf5.H5header$DataBTree$DataChunk: int size>;

        $l5 = (long) $i4;

        virtualinvoke $r10.<ucar.nc2.iosp.hdf5.H5header$MemTracker: void addByLen(java.lang.String,long,long)>($r16, $l6, $l5);

     label6:
        return;
    }

    public java.lang.String toString()
    {
        long $l2, l5;
        int[] r8;
        int $i0, $i1, i3, $i4, i6;
        java.lang.String $r9;
        ucar.nc2.iosp.hdf5.H5header$DataBTree$DataChunk r2;
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r5, $r6, $r7, $r10;

        r2 := @this: ucar.nc2.iosp.hdf5.H5header$DataBTree$DataChunk;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ChunkedDataNode size=");

        $i0 = r2.<ucar.nc2.iosp.hdf5.H5header$DataBTree$DataChunk: int size>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" filterMask=");

        $i1 = r2.<ucar.nc2.iosp.hdf5.H5header$DataBTree$DataChunk: int filterMask>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" filePos=");

        $l2 = r2.<ucar.nc2.iosp.hdf5.H5header$DataBTree$DataChunk: long filePos>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" offsets= ");

        r8 = r2.<ucar.nc2.iosp.hdf5.H5header$DataBTree$DataChunk: int[] offset>;

        i3 = lengthof r8;

        i6 = 0;

     label1:
        if i6 >= i3 goto label2;

        $i4 = r8[i6];

        l5 = (long) $i4;

        $r10 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l5);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        i6 = i6 + 1;

        goto label1;

     label2:
        $r9 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lucar/nc2/iosp/hdf5/H5header;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <ucar.nc2.iosp.hdf5.H5header$DataBTree$DataChunk: boolean $assertionsDisabled> = $z1;

        return;
    }
}
