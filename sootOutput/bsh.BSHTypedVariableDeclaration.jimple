class bsh.BSHTypedVariableDeclaration extends bsh.SimpleNode
{
    public bsh.Modifiers modifiers;

    void <init>(int)
    {
        int i0;
        bsh.BSHTypedVariableDeclaration r0;

        r0 := @this: bsh.BSHTypedVariableDeclaration;

        i0 := @parameter0: int;

        specialinvoke r0.<bsh.SimpleNode: void <init>(int)>(i0);

        return;
    }

    private bsh.BSHType getTypeNode()
    {
        bsh.BSHTypedVariableDeclaration r0;
        bsh.BSHType $r2;
        bsh.Node $r1;

        r0 := @this: bsh.BSHTypedVariableDeclaration;

        $r1 = virtualinvoke r0.<bsh.BSHTypedVariableDeclaration: bsh.Node jjtGetChild(int)>(0);

        $r2 = (bsh.BSHType) $r1;

        return $r2;
    }

    java.lang.Class evalType(bsh.CallStack, bsh.Interpreter) throws bsh.EvalError
    {
        bsh.BSHType $r1;
        bsh.Interpreter r3;
        java.lang.Class $r4;
        bsh.BSHTypedVariableDeclaration r0;
        bsh.CallStack r2;

        r0 := @this: bsh.BSHTypedVariableDeclaration;

        r2 := @parameter0: bsh.CallStack;

        r3 := @parameter1: bsh.Interpreter;

        $r1 = specialinvoke r0.<bsh.BSHTypedVariableDeclaration: bsh.BSHType getTypeNode()>();

        $r4 = virtualinvoke $r1.<bsh.BSHType: java.lang.Class getType(bsh.CallStack,bsh.Interpreter)>(r2, r3);

        return $r4;
    }

    bsh.BSHVariableDeclarator[] getDeclarators()
    {
        bsh.BSHVariableDeclarator[] r1;
        int $i0, $i1, $i2, i3;
        bsh.BSHTypedVariableDeclaration r0;
        bsh.Node $r2;
        bsh.BSHVariableDeclarator $r3;

        r0 := @this: bsh.BSHTypedVariableDeclaration;

        $i0 = virtualinvoke r0.<bsh.BSHTypedVariableDeclaration: int jjtGetNumChildren()>();

        $i1 = $i0 - 1;

        r1 = newarray (bsh.BSHVariableDeclarator)[$i1];

        i3 = 1;

        goto label2;

     label1:
        $i2 = i3 - 1;

        $r2 = virtualinvoke r0.<bsh.BSHTypedVariableDeclaration: bsh.Node jjtGetChild(int)>(i3);

        $r3 = (bsh.BSHVariableDeclarator) $r2;

        r1[$i2] = $r3;

        i3 = i3 + 1;

     label2:
        if i3 < $i0 goto label1;

        return r1;
    }

    public java.lang.Object eval(bsh.CallStack, bsh.Interpreter) throws bsh.EvalError
    {
        bsh.NameSpace $r1;
        bsh.UtilEvalError $r13;
        bsh.CallStack r0;
        bsh.BSHVariableDeclarator[] $r6;
        bsh.BSHType $r3;
        bsh.Modifiers $r9;
        int $i0, i1;
        bsh.BSHTypedVariableDeclaration r2;
        java.lang.String $r10;
        bsh.BSHVariableDeclarator r7;
        bsh.EvalError $r12, $r14;
        bsh.Interpreter r4;
        bsh.Primitive $r11;
        java.lang.Class $r5;
        java.lang.Object $r8;

        r2 := @this: bsh.BSHTypedVariableDeclaration;

        r0 := @parameter0: bsh.CallStack;

        r4 := @parameter1: bsh.Interpreter;

     label01:
        $r1 = virtualinvoke r0.<bsh.CallStack: bsh.NameSpace top()>();

        $r3 = specialinvoke r2.<bsh.BSHTypedVariableDeclaration: bsh.BSHType getTypeNode()>();

        $r5 = virtualinvoke $r3.<bsh.BSHType: java.lang.Class getType(bsh.CallStack,bsh.Interpreter)>(r0, r4);

        $r6 = virtualinvoke r2.<bsh.BSHTypedVariableDeclaration: bsh.BSHVariableDeclarator[] getDeclarators()>();

        i1 = 0;

        goto label07;

     label02:
        r7 = $r6[i1];

        $r8 = virtualinvoke r7.<bsh.BSHVariableDeclarator: java.lang.Object eval(bsh.BSHType,bsh.CallStack,bsh.Interpreter)>($r3, r0, r4);

     label03:
        $r10 = r7.<bsh.BSHVariableDeclarator: java.lang.String name>;

        $r9 = r2.<bsh.BSHTypedVariableDeclaration: bsh.Modifiers modifiers>;

        virtualinvoke $r1.<bsh.NameSpace: void setTypedVariable(java.lang.String,java.lang.Class,java.lang.Object,bsh.Modifiers)>($r10, $r5, $r8, $r9);

     label04:
        goto label06;

     label05:
        $r13 := @caughtexception;

        $r14 = virtualinvoke $r13.<bsh.UtilEvalError: bsh.EvalError toEvalError(bsh.SimpleNode,bsh.CallStack)>(r2, r0);

        throw $r14;

     label06:
        i1 = i1 + 1;

     label07:
        $i0 = lengthof $r6;

        if i1 < $i0 goto label02;

     label08:
        goto label10;

     label09:
        $r12 := @caughtexception;

        virtualinvoke $r12.<bsh.EvalError: void reThrow(java.lang.String)>("Typed variable declaration");

        goto label10;

     label10:
        $r11 = <bsh.Primitive: bsh.Primitive VOID>;

        return $r11;

        catch bsh.UtilEvalError from label03 to label04 with label05;
        catch bsh.EvalError from label01 to label08 with label09;
    }

    public java.lang.String getTypeDescriptor(bsh.CallStack, bsh.Interpreter, java.lang.String)
    {
        bsh.BSHType $r1;
        bsh.Interpreter r3;
        bsh.BSHTypedVariableDeclaration r0;
        java.lang.String r4, $r5;
        bsh.CallStack r2;

        r0 := @this: bsh.BSHTypedVariableDeclaration;

        r2 := @parameter0: bsh.CallStack;

        r3 := @parameter1: bsh.Interpreter;

        r4 := @parameter2: java.lang.String;

        $r1 = specialinvoke r0.<bsh.BSHTypedVariableDeclaration: bsh.BSHType getTypeNode()>();

        $r5 = virtualinvoke $r1.<bsh.BSHType: java.lang.String getTypeDescriptor(bsh.CallStack,bsh.Interpreter,java.lang.String)>(r2, r3, r4);

        return $r5;
    }
}
