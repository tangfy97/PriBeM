public class com.hp.hpl.jena.sparql.core.GraphView extends com.hp.hpl.jena.graph.impl.GraphBase implements org.apache.jena.atlas.lib.Sync
{
    private final com.hp.hpl.jena.sparql.core.DatasetGraph dsg;
    private final com.hp.hpl.jena.graph.Node gn;

    public static com.hp.hpl.jena.sparql.core.GraphView createDefaultGraph(com.hp.hpl.jena.sparql.core.DatasetGraph)
    {
        com.hp.hpl.jena.sparql.core.GraphView $r0;
        com.hp.hpl.jena.graph.Node $r2;
        com.hp.hpl.jena.sparql.core.DatasetGraph r1;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.DatasetGraph;

        $r0 = new com.hp.hpl.jena.sparql.core.GraphView;

        $r2 = <com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node defaultGraphNodeGenerated>;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.core.GraphView: void <init>(com.hp.hpl.jena.sparql.core.DatasetGraph,com.hp.hpl.jena.graph.Node)>(r1, $r2);

        return $r0;
    }

    public static com.hp.hpl.jena.sparql.core.GraphView createNamedGraph(com.hp.hpl.jena.sparql.core.DatasetGraph, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.core.GraphView $r0;
        com.hp.hpl.jena.graph.Node r2;
        com.hp.hpl.jena.sparql.core.DatasetGraph r1;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.DatasetGraph;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        $r0 = new com.hp.hpl.jena.sparql.core.GraphView;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.core.GraphView: void <init>(com.hp.hpl.jena.sparql.core.DatasetGraph,com.hp.hpl.jena.graph.Node)>(r1, r2);

        return $r0;
    }

    protected void <init>(com.hp.hpl.jena.sparql.core.DatasetGraph, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.core.GraphView r0;
        com.hp.hpl.jena.graph.Node r2;
        com.hp.hpl.jena.sparql.core.DatasetGraph r1;

        r0 := @this: com.hp.hpl.jena.sparql.core.GraphView;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.DatasetGraph;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        specialinvoke r0.<com.hp.hpl.jena.graph.impl.GraphBase: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.core.GraphView: com.hp.hpl.jena.sparql.core.DatasetGraph dsg> = r1;

        r0.<com.hp.hpl.jena.sparql.core.GraphView: com.hp.hpl.jena.graph.Node gn> = r2;

        return;
    }

    public com.hp.hpl.jena.graph.Node getGraphName()
    {
        com.hp.hpl.jena.sparql.core.GraphView r0;
        com.hp.hpl.jena.graph.Node $r1, $r2, $r3;

        r0 := @this: com.hp.hpl.jena.sparql.core.GraphView;

        $r2 = r0.<com.hp.hpl.jena.sparql.core.GraphView: com.hp.hpl.jena.graph.Node gn>;

        $r1 = <com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node defaultGraphNodeGenerated>;

        if $r2 != $r1 goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r3 = r0.<com.hp.hpl.jena.sparql.core.GraphView: com.hp.hpl.jena.graph.Node gn>;

     label2:
        return $r3;
    }

    public com.hp.hpl.jena.sparql.core.DatasetGraph getDataset()
    {
        com.hp.hpl.jena.sparql.core.GraphView r0;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r1;

        r0 := @this: com.hp.hpl.jena.sparql.core.GraphView;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.GraphView: com.hp.hpl.jena.sparql.core.DatasetGraph dsg>;

        return $r1;
    }

    protected final boolean isDefaultGraph()
    {
        com.hp.hpl.jena.sparql.core.GraphView r0;
        com.hp.hpl.jena.graph.Node $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.core.GraphView;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.GraphView: com.hp.hpl.jena.graph.Node gn>;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.GraphView: boolean isDefaultGraph(com.hp.hpl.jena.graph.Node)>($r1);

        return $z0;
    }

    protected final boolean isUnionGraph()
    {
        com.hp.hpl.jena.sparql.core.GraphView r0;
        com.hp.hpl.jena.graph.Node $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.core.GraphView;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.GraphView: com.hp.hpl.jena.graph.Node gn>;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.GraphView: boolean isUnionGraph(com.hp.hpl.jena.graph.Node)>($r1);

        return $z0;
    }

    protected static final boolean isDefaultGraph(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        if r0 == null goto label1;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Quad: boolean isDefaultGraph(com.hp.hpl.jena.graph.Node)>(r0);

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    protected static final boolean isUnionGraph(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Quad: boolean isUnionGraph(com.hp.hpl.jena.graph.Node)>(r0);

        return $z0;
    }

    protected com.hp.hpl.jena.shared.PrefixMapping createPrefixMapping()
    {
        com.hp.hpl.jena.sparql.core.GraphView r1;
        com.hp.hpl.jena.shared.impl.PrefixMappingImpl $r0;

        r1 := @this: com.hp.hpl.jena.sparql.core.GraphView;

        $r0 = new com.hp.hpl.jena.shared.impl.PrefixMappingImpl;

        specialinvoke $r0.<com.hp.hpl.jena.shared.impl.PrefixMappingImpl: void <init>()>();

        return $r0;
    }

    protected com.hp.hpl.jena.util.iterator.ExtendedIterator graphBaseFind(com.hp.hpl.jena.graph.TripleMatch)
    {
        com.hp.hpl.jena.sparql.core.GraphView r3;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r4;
        com.hp.hpl.jena.graph.Node $r0, $r1, $r2;
        com.hp.hpl.jena.graph.TripleMatch r5;

        r3 := @this: com.hp.hpl.jena.sparql.core.GraphView;

        r5 := @parameter0: com.hp.hpl.jena.graph.TripleMatch;

        if r5 != null goto label1;

        r5 = <com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Triple ANY>;

     label1:
        $r0 = interfaceinvoke r5.<com.hp.hpl.jena.graph.TripleMatch: com.hp.hpl.jena.graph.Node getMatchSubject()>();

        $r1 = interfaceinvoke r5.<com.hp.hpl.jena.graph.TripleMatch: com.hp.hpl.jena.graph.Node getMatchPredicate()>();

        $r2 = interfaceinvoke r5.<com.hp.hpl.jena.graph.TripleMatch: com.hp.hpl.jena.graph.Node getMatchObject()>();

        $r4 = virtualinvoke r3.<com.hp.hpl.jena.sparql.core.GraphView: com.hp.hpl.jena.util.iterator.ExtendedIterator graphBaseFind(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r0, $r1, $r2);

        return $r4;
    }

    protected com.hp.hpl.jena.util.iterator.ExtendedIterator graphBaseFind(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        java.util.Iterator $r7;
        com.hp.hpl.jena.util.iterator.WrappedIterator $r10;
        com.hp.hpl.jena.graph.Node $r1, $r2, r3, r4, r5, $r9;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r6;
        com.hp.hpl.jena.sparql.core.GraphView r0;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r11;
        org.apache.jena.atlas.iterator.Iter $r8;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.core.GraphView;

        r3 := @parameter0: com.hp.hpl.jena.graph.Node;

        r4 := @parameter1: com.hp.hpl.jena.graph.Node;

        r5 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.GraphView: com.hp.hpl.jena.graph.Node gn>;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.core.GraphView: com.hp.hpl.jena.graph.Node graphNode(com.hp.hpl.jena.graph.Node)>($r1);

        $r6 = r0.<com.hp.hpl.jena.sparql.core.GraphView: com.hp.hpl.jena.sparql.core.DatasetGraph dsg>;

        $r7 = interfaceinvoke $r6.<com.hp.hpl.jena.sparql.core.DatasetGraph: java.util.Iterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r2, r3, r4, r5);

        $r8 = staticinvoke <org.apache.jena.riot.other.GLib: org.apache.jena.atlas.iterator.Iter quads2triples(java.util.Iterator)>($r7);

        $r9 = r0.<com.hp.hpl.jena.sparql.core.GraphView: com.hp.hpl.jena.graph.Node gn>;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Quad: boolean isUnionGraph(com.hp.hpl.jena.graph.Node)>($r9);

        if $z0 == 0 goto label1;

        $r11 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.GraphView: com.hp.hpl.jena.util.iterator.ExtendedIterator graphUnionFind(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r3, r4, r5);

        return $r11;

     label1:
        $r10 = staticinvoke <com.hp.hpl.jena.util.iterator.WrappedIterator: com.hp.hpl.jena.util.iterator.WrappedIterator createNoRemove(java.util.Iterator)>($r8);

        return $r10;
    }

    private static com.hp.hpl.jena.graph.Node graphNode(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0, $r1;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        if r0 != null goto label1;

        $r1 = <com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node defaultGraphNodeGenerated>;

        goto label2;

     label1:
        $r1 = r0;

     label2:
        return $r1;
    }

    protected com.hp.hpl.jena.util.iterator.ExtendedIterator graphUnionFind(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        java.util.Iterator $r7, $r9;
        com.hp.hpl.jena.util.iterator.WrappedIterator $r10;
        com.hp.hpl.jena.graph.Node $r1, $r2, r4, r5, r6;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r3;
        com.hp.hpl.jena.sparql.core.GraphView r0;
        org.apache.jena.atlas.iterator.Iter $r8;

        r0 := @this: com.hp.hpl.jena.sparql.core.GraphView;

        r4 := @parameter0: com.hp.hpl.jena.graph.Node;

        r5 := @parameter1: com.hp.hpl.jena.graph.Node;

        r6 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.GraphView: com.hp.hpl.jena.graph.Node gn>;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.core.GraphView: com.hp.hpl.jena.graph.Node graphNode(com.hp.hpl.jena.graph.Node)>($r1);

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.GraphView: com.hp.hpl.jena.sparql.core.DatasetGraph getDataset()>();

        $r7 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.core.DatasetGraph: java.util.Iterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r2, r4, r5, r6);

        $r8 = staticinvoke <org.apache.jena.riot.other.GLib: org.apache.jena.atlas.iterator.Iter quads2triples(java.util.Iterator)>($r7);

        $r9 = staticinvoke <org.apache.jena.atlas.iterator.Iter: java.util.Iterator distinct(java.util.Iterator)>($r8);

        $r10 = staticinvoke <com.hp.hpl.jena.util.iterator.WrappedIterator: com.hp.hpl.jena.util.iterator.WrappedIterator createNoRemove(java.util.Iterator)>($r9);

        return $r10;
    }

    public void performAdd(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.Node $r1, $r2, $r4, $r5, $r6;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r7;
        com.hp.hpl.jena.sparql.core.GraphView$GraphViewException $r8;
        com.hp.hpl.jena.graph.Triple r3;
        com.hp.hpl.jena.sparql.core.GraphView r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.core.GraphView;

        r3 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.GraphView: com.hp.hpl.jena.graph.Node gn>;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.core.GraphView: com.hp.hpl.jena.graph.Node graphNode(com.hp.hpl.jena.graph.Node)>($r1);

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Quad: boolean isUnionGraph(com.hp.hpl.jena.graph.Node)>($r2);

        if $z0 == 0 goto label1;

        $r8 = new com.hp.hpl.jena.sparql.core.GraphView$GraphViewException;

        specialinvoke $r8.<com.hp.hpl.jena.sparql.core.GraphView$GraphViewException: void <init>(java.lang.String)>("Can\'t update the default union graph of a dataset");

        throw $r8;

     label1:
        $r4 = virtualinvoke r3.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r5 = virtualinvoke r3.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r6 = virtualinvoke r3.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $r7 = r0.<com.hp.hpl.jena.sparql.core.GraphView: com.hp.hpl.jena.sparql.core.DatasetGraph dsg>;

        interfaceinvoke $r7.<com.hp.hpl.jena.sparql.core.DatasetGraph: void add(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r2, $r4, $r5, $r6);

        return;
    }

    public void performDelete(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.Node $r1, $r2, $r4, $r5, $r6;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r7;
        com.hp.hpl.jena.sparql.core.GraphView$GraphViewException $r8;
        com.hp.hpl.jena.graph.Triple r3;
        com.hp.hpl.jena.sparql.core.GraphView r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.core.GraphView;

        r3 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.GraphView: com.hp.hpl.jena.graph.Node gn>;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.core.GraphView: com.hp.hpl.jena.graph.Node graphNode(com.hp.hpl.jena.graph.Node)>($r1);

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Quad: boolean isUnionGraph(com.hp.hpl.jena.graph.Node)>($r2);

        if $z0 == 0 goto label1;

        $r8 = new com.hp.hpl.jena.sparql.core.GraphView$GraphViewException;

        specialinvoke $r8.<com.hp.hpl.jena.sparql.core.GraphView$GraphViewException: void <init>(java.lang.String)>("Can\'t update the default union graph of a dataset");

        throw $r8;

     label1:
        $r4 = virtualinvoke r3.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r5 = virtualinvoke r3.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r6 = virtualinvoke r3.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $r7 = r0.<com.hp.hpl.jena.sparql.core.GraphView: com.hp.hpl.jena.sparql.core.DatasetGraph dsg>;

        interfaceinvoke $r7.<com.hp.hpl.jena.sparql.core.DatasetGraph: void delete(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r2, $r4, $r5, $r6);

        return;
    }

    public void sync()
    {
        com.hp.hpl.jena.sparql.core.GraphView r0;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r1;

        r0 := @this: com.hp.hpl.jena.sparql.core.GraphView;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.GraphView: com.hp.hpl.jena.sparql.core.DatasetGraph dsg>;

        staticinvoke <com.hp.hpl.jena.sparql.SystemARQ: void sync(com.hp.hpl.jena.sparql.core.DatasetGraph)>($r1);

        return;
    }
}
