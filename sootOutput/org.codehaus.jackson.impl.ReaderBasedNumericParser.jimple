public abstract class org.codehaus.jackson.impl.ReaderBasedNumericParser extends org.codehaus.jackson.impl.ReaderBasedParserBase
{

    public void <init>(org.codehaus.jackson.io.IOContext, int, java.io.Reader)
    {
        org.codehaus.jackson.io.IOContext r1;
        int i0;
        java.io.Reader r2;
        org.codehaus.jackson.impl.ReaderBasedNumericParser r0;

        r0 := @this: org.codehaus.jackson.impl.ReaderBasedNumericParser;

        r1 := @parameter0: org.codehaus.jackson.io.IOContext;

        i0 := @parameter1: int;

        r2 := @parameter2: java.io.Reader;

        specialinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: void <init>(org.codehaus.jackson.io.IOContext,int,java.io.Reader)>(r1, i0, r2);

        return;
    }

    protected final org.codehaus.jackson.JsonToken parseNumberText(int) throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.JsonToken $r5, $r11;
        org.codehaus.jackson.util.TextBuffer $r9;
        boolean z0, $z2, $z3;
        org.codehaus.jackson.impl.ReaderBasedNumericParser r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i8, $i9, $i10, i11, i12, i14, $i15, i17, i18, i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i41;
        char $c6, c13, c16, c19;
        char[] $r1, $r2, $r3, $r4, $r6, $r7, $r8, $r10;

        r0 := @this: org.codehaus.jackson.impl.ReaderBasedNumericParser;

        i11 := @parameter0: int;

        if i11 != 45 goto label01;

        $z3 = 1;

        $z2 = 1;

        goto label02;

     label01:
        $z3 = 0;

        $z2 = 0;

     label02:
        z0 = $z2;

        $i8 = r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: int _inputPtr>;

        i12 = $i8;

        $i9 = $i8 - 1;

        $i10 = r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: int _inputEnd>;

        if $z3 == 0 goto label05;

        $i7 = r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: int _inputEnd>;

        if $i8 < $i7 goto label03;

        goto label23;

     label03:
        $r8 = r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: char[] _inputBuffer>;

        i12 = $i8 + 1;

        c13 = $r8[$i8];

        $i23 = (int) c13;

        if $i23 > 57 goto label04;

        $i24 = (int) c13;

        if $i24 >= 48 goto label05;

     label04:
        $i25 = (int) c13;

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: void reportUnexpectedNumberChar(int,java.lang.String)>($i25, "expected digit (0-9) to follow minus sign, for valid numeric value");

     label05:
        i14 = 1;

     label06:
        $i15 = r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: int _inputEnd>;

        if i12 < $i15 goto label07;

        goto label23;

     label07:
        $r1 = r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: char[] _inputBuffer>;

        $i0 = i12;

        i12 = i12 + 1;

        c16 = $r1[$i0];

        $i26 = (int) c16;

        if $i26 < 48 goto label09;

        $i27 = (int) c16;

        if $i27 <= 57 goto label08;

        goto label09;

     label08:
        i14 = i14 + 1;

        if i14 != 2 goto label06;

        $r7 = r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: char[] _inputBuffer>;

        $i5 = i12 - 2;

        $c6 = $r7[$i5];

        $i28 = (int) $c6;

        if $i28 != 48 goto label06;

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: void reportInvalidNumber(java.lang.String)>("Leading zeroes not allowed");

        goto label06;

     label09:
        i17 = 0;

        $i29 = (int) c16;

        if $i29 != 46 goto label14;

     label10:
        if i12 < $i10 goto label11;

        goto label23;

     label11:
        $r6 = r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: char[] _inputBuffer>;

        $i4 = i12;

        i12 = i12 + 1;

        c16 = $r6[$i4];

        $i30 = (int) c16;

        if $i30 < 48 goto label13;

        $i31 = (int) c16;

        if $i31 <= 57 goto label12;

        goto label13;

     label12:
        i17 = i17 + 1;

        goto label10;

     label13:
        if i17 != 0 goto label14;

        $i32 = (int) c16;

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: void reportUnexpectedNumberChar(int,java.lang.String)>($i32, "Decimal point not followed by a digit");

     label14:
        i18 = 0;

        $i33 = (int) c16;

        if $i33 == 101 goto label15;

        $i34 = (int) c16;

        if $i34 != 69 goto label22;

     label15:
        if i12 < $i10 goto label16;

        goto label23;

     label16:
        $r2 = r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: char[] _inputBuffer>;

        $i1 = i12;

        i12 = i12 + 1;

        c19 = $r2[$i1];

        $i35 = (int) c19;

        if $i35 == 45 goto label17;

        $i36 = (int) c19;

        if $i36 != 43 goto label19;

     label17:
        if i12 < $i10 goto label18;

        goto label23;

     label18:
        $r3 = r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: char[] _inputBuffer>;

        $i2 = i12;

        i12 = i12 + 1;

        c19 = $r3[$i2];

     label19:
        $i37 = (int) c19;

        if $i37 > 57 goto label21;

        $i38 = (int) c19;

        if $i38 < 48 goto label21;

        i18 = i18 + 1;

        if i12 < $i10 goto label20;

        goto label23;

     label20:
        $r4 = r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: char[] _inputBuffer>;

        $i3 = i12;

        i12 = i12 + 1;

        c19 = $r4[$i3];

        goto label19;

     label21:
        if i18 != 0 goto label22;

        $i39 = (int) c19;

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: void reportUnexpectedNumberChar(int,java.lang.String)>($i39, "Exponent indicator not followed by a digit");

     label22:
        $i41 = (int) -1;

        i20 = i12 + $i41;

        r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: int _inputPtr> = i20;

        $i21 = i20 - $i9;

        $r9 = r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        $r10 = r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: char[] _inputBuffer>;

        virtualinvoke $r9.<org.codehaus.jackson.util.TextBuffer: void resetWithShared(char[],int,int)>($r10, $i9, $i21);

        $r11 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: org.codehaus.jackson.JsonToken reset(boolean,int,int,int)>(z0, i14, i17, i18);

        return $r11;

     label23:
        if z0 == 0 goto label24;

        $i22 = $i9 + 1;

        goto label25;

     label24:
        $i22 = $i9;

     label25:
        r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: int _inputPtr> = $i22;

        $r5 = specialinvoke r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: org.codehaus.jackson.JsonToken parseNumberText2(boolean)>(z0);

        return $r5;
    }

    private final org.codehaus.jackson.JsonToken parseNumberText2(boolean) throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        java.lang.StringBuilder $r15, $r17, $r18, $r22;
        java.lang.String $r16, $r19;
        char[] $r2, $r3, $r6, $r8, $r10, $r12, r21;
        org.codehaus.jackson.JsonToken $r5;
        org.codehaus.jackson.util.TextBuffer $r1, $r4, $r7, $r9, $r11, $r13, $r20;
        boolean z0, $z1, $z2, $z3, z4;
        org.codehaus.jackson.impl.ReaderBasedNumericParser r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i30, $i31, i34, i35, $i36, $i37, $i39, i40, i41, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54;
        char $c29, $c32, $c33, c38, $c42, c43, $c44;

        r0 := @this: org.codehaus.jackson.impl.ReaderBasedNumericParser;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.util.TextBuffer: char[] emptyAndGetCurrentSegment()>();

        r21 = $r2;

        i34 = 0;

        if z0 == 0 goto label01;

        i34 = 1;

        $r2[0] = 45;

     label01:
        i35 = 0;

        z4 = 0;

     label02:
        $i36 = r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: int _inputPtr>;

        $i37 = r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: int _inputEnd>;

        if $i36 < $i37 goto label03;

        $z3 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: boolean loadMore()>();

        if $z3 != 0 goto label03;

        c38 = 0;

        z4 = 1;

        goto label07;

     label03:
        $r3 = r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: char[] _inputBuffer>;

        $i0 = r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: int _inputPtr>;

        $i1 = $i0 + 1;

        r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: int _inputPtr> = $i1;

        $c33 = $r3[$i0];

        c38 = $c33;

        $i45 = (int) $c33;

        if $i45 < 48 goto label07;

        $i46 = (int) $c33;

        if $i46 <= 57 goto label04;

        goto label07;

     label04:
        i35 = i35 + 1;

        if i35 != 2 goto label05;

        $i31 = i34 - 1;

        $c32 = r21[$i31];

        $i47 = (int) $c32;

        if $i47 != 48 goto label05;

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: void reportInvalidNumber(java.lang.String)>("Leading zeroes not allowed");

     label05:
        $i39 = lengthof r21;

        if i34 < $i39 goto label06;

        $r20 = r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        r21 = virtualinvoke $r20.<org.codehaus.jackson.util.TextBuffer: char[] finishCurrentSegment()>();

        i34 = 0;

     label06:
        $i30 = i34;

        i34 = i34 + 1;

        r21[$i30] = $c33;

        goto label02;

     label07:
        if i35 != 0 goto label08;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing integer part (next char ");

        $r16 = staticinvoke <org.codehaus.jackson.impl.ReaderBasedNumericParser: java.lang.String _getCharDesc(int)>(c38);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: void reportInvalidNumber(java.lang.String)>($r19);

     label08:
        i40 = 0;

        if c38 != 46 goto label14;

        $i22 = i34;

        i34 = i34 + 1;

        r21[$i22] = c38;

     label09:
        $i24 = r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: int _inputPtr>;

        $i23 = r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: int _inputEnd>;

        if $i24 < $i23 goto label10;

        $z2 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: boolean loadMore()>();

        if $z2 != 0 goto label10;

        z4 = 1;

        goto label13;

     label10:
        $r12 = r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: char[] _inputBuffer>;

        $i25 = r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: int _inputPtr>;

        $i26 = $i25 + 1;

        r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: int _inputPtr> = $i26;

        $c29 = $r12[$i25];

        c38 = $c29;

        $i48 = (int) $c29;

        if $i48 < 48 goto label13;

        $i49 = (int) $c29;

        if $i49 <= 57 goto label11;

        goto label13;

     label11:
        i40 = i40 + 1;

        $i27 = lengthof r21;

        if i34 < $i27 goto label12;

        $r13 = r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        r21 = virtualinvoke $r13.<org.codehaus.jackson.util.TextBuffer: char[] finishCurrentSegment()>();

        i34 = 0;

     label12:
        $i28 = i34;

        i34 = i34 + 1;

        r21[$i28] = $c29;

        goto label09;

     label13:
        if i40 != 0 goto label14;

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: void reportUnexpectedNumberChar(int,java.lang.String)>(c38, "Decimal point not followed by a digit");

     label14:
        i41 = 0;

        if c38 == 101 goto label15;

        if c38 != 69 goto label27;

     label15:
        $i2 = lengthof r21;

        if i34 < $i2 goto label16;

        $r11 = r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        r21 = virtualinvoke $r11.<org.codehaus.jackson.util.TextBuffer: char[] finishCurrentSegment()>();

        i34 = 0;

     label16:
        $i3 = i34;

        i34 = i34 + 1;

        r21[$i3] = c38;

        $i5 = r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: int _inputPtr>;

        $i4 = r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: int _inputEnd>;

        if $i5 >= $i4 goto label17;

        $r10 = r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: char[] _inputBuffer>;

        $i20 = r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: int _inputPtr>;

        $i21 = $i20 + 1;

        r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: int _inputPtr> = $i21;

        $c42 = $r10[$i20];

        goto label18;

     label17:
        $c42 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: char getNextChar(java.lang.String)>("expected a digit for number exponent");

     label18:
        c43 = $c42;

        $i50 = (int) $c42;

        if $i50 == 45 goto label19;

        $i51 = (int) $c42;

        if $i51 != 43 goto label23;

     label19:
        $i6 = lengthof r21;

        if i34 < $i6 goto label20;

        $r9 = r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        r21 = virtualinvoke $r9.<org.codehaus.jackson.util.TextBuffer: char[] finishCurrentSegment()>();

        i34 = 0;

     label20:
        $i7 = i34;

        i34 = i34 + 1;

        r21[$i7] = c43;

        $i9 = r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: int _inputPtr>;

        $i8 = r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: int _inputEnd>;

        if $i9 >= $i8 goto label21;

        $r8 = r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: char[] _inputBuffer>;

        $i18 = r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: int _inputPtr>;

        $i19 = $i18 + 1;

        r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: int _inputPtr> = $i19;

        $c44 = $r8[$i18];

        goto label22;

     label21:
        $c44 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: char getNextChar(java.lang.String)>("expected a digit for number exponent");

     label22:
        c43 = $c44;

     label23:
        $i52 = (int) c43;

        if $i52 > 57 goto label26;

        $i53 = (int) c43;

        if $i53 < 48 goto label26;

        i41 = i41 + 1;

        $i12 = lengthof r21;

        if i34 < $i12 goto label24;

        $r7 = r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        r21 = virtualinvoke $r7.<org.codehaus.jackson.util.TextBuffer: char[] finishCurrentSegment()>();

        i34 = 0;

     label24:
        $i13 = i34;

        i34 = i34 + 1;

        r21[$i13] = c43;

        $i15 = r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: int _inputPtr>;

        $i14 = r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: int _inputEnd>;

        if $i15 < $i14 goto label25;

        $z1 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: boolean loadMore()>();

        if $z1 != 0 goto label25;

        z4 = 1;

        goto label26;

     label25:
        $r6 = r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: char[] _inputBuffer>;

        $i16 = r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: int _inputPtr>;

        $i17 = $i16 + 1;

        r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: int _inputPtr> = $i17;

        c43 = $r6[$i16];

        goto label23;

     label26:
        if i41 != 0 goto label27;

        $i54 = (int) c43;

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: void reportUnexpectedNumberChar(int,java.lang.String)>($i54, "Exponent indicator not followed by a digit");

     label27:
        if z4 != 0 goto label28;

        $i10 = r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: int _inputPtr>;

        $i11 = $i10 - 1;

        r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: int _inputPtr> = $i11;

     label28:
        $r4 = r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        virtualinvoke $r4.<org.codehaus.jackson.util.TextBuffer: void setCurrentLength(int)>(i34);

        $r5 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: org.codehaus.jackson.JsonToken reset(boolean,int,int,int)>(z0, i35, i40, i41);

        return $r5;
    }
}
