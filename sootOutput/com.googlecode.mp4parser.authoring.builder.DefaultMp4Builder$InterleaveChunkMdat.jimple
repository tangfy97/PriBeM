class com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat extends java.lang.Object implements com.coremedia.iso.boxes.Box
{
    java.util.List tracks;
    java.util.List chunkList;
    com.coremedia.iso.boxes.Container parent;
    long contentSize;
    final com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder this$0;

    public com.coremedia.iso.boxes.Container getParent()
    {
        com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat r0;
        com.coremedia.iso.boxes.Container $r1;

        r0 := @this: com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat;

        $r1 = r0.<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: com.coremedia.iso.boxes.Container parent>;

        return $r1;
    }

    public long getOffset()
    {
        java.lang.RuntimeException $r0;
        com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat r1;

        r1 := @this: com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Doesn\'t have any meaning for programmatically created boxes");

        throw $r0;
    }

    public void setParent(com.coremedia.iso.boxes.Container)
    {
        com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat r0;
        com.coremedia.iso.boxes.Container r1;

        r0 := @this: com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat;

        r1 := @parameter0: com.coremedia.iso.boxes.Container;

        r0.<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: com.coremedia.iso.boxes.Container parent> = r1;

        return;
    }

    public void parse(com.googlecode.mp4parser.DataSource, java.nio.ByteBuffer, long, com.coremedia.iso.BoxParser) throws java.io.IOException
    {
        com.googlecode.mp4parser.DataSource r1;
        com.coremedia.iso.BoxParser r3;
        long l0;
        com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat r0;
        java.nio.ByteBuffer r2;

        r0 := @this: com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat;

        r1 := @parameter0: com.googlecode.mp4parser.DataSource;

        r2 := @parameter1: java.nio.ByteBuffer;

        l0 := @parameter2: long;

        r3 := @parameter3: com.coremedia.iso.BoxParser;

        return;
    }

    private void <init>(com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder, com.googlecode.mp4parser.authoring.Movie, java.util.Map, long)
    {
        int[] $r9, r15;
        java.util.Map r5;
        boolean $z0;
        java.util.Collection $r6;
        java.util.List $r4, $r10, $r18, $r19, $r20;
        com.googlecode.mp4parser.authoring.Track r13;
        long l0, $l3, $l6, $l7, l10;
        java.util.HashMap $r16;
        com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat r0;
        java.util.ArrayList $r2;
        int $i1, $i2, $i4, $i5, $i8, i9, i11;
        com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder r1;
        java.util.Iterator $r7, $r11;
        com.googlecode.mp4parser.authoring.Movie r3;
        java.lang.Object $r8, $r12, $r14, $r17;

        r0 := @this: com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat;

        r1 := @parameter0: com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder;

        r3 := @parameter1: com.googlecode.mp4parser.authoring.Movie;

        r5 := @parameter2: java.util.Map;

        l0 := @parameter3: long;

        r0.<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: java.util.List chunkList> = $r2;

        r0.<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: long contentSize> = l0;

        $r4 = virtualinvoke r3.<com.googlecode.mp4parser.authoring.Movie: java.util.List getTracks()>();

        r0.<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: java.util.List tracks> = $r4;

        i9 = 0;

        goto label6;

     label1:
        $r10 = r0.<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: java.util.List tracks>;

        $r11 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

        goto label5;

     label2:
        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r13 = (com.googlecode.mp4parser.authoring.Track) $r12;

        $r14 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r13);

        r15 = (int[]) $r14;

        l10 = 0L;

        i11 = 0;

        goto label4;

     label3:
        $i2 = r15[i11];

        $l3 = (long) $i2;

        l10 = l10 + $l3;

        i11 = i11 + 1;

     label4:
        if i11 < i9 goto label3;

        $r16 = r1.<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: java.util.HashMap track2Sample>;

        $r17 = virtualinvoke $r16.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r13);

        $r18 = (java.util.List) $r17;

        $i4 = staticinvoke <com.googlecode.mp4parser.util.CastUtils: int l2i(long)>(l10);

        $i5 = r15[i9];

        $l6 = (long) $i5;

        $l7 = l10 + $l6;

        $i8 = staticinvoke <com.googlecode.mp4parser.util.CastUtils: int l2i(long)>($l7);

        $r19 = interfaceinvoke $r18.<java.util.List: java.util.List subList(int,int)>($i4, $i8);

        $r20 = r0.<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: java.util.List chunkList>;

        interfaceinvoke $r20.<java.util.List: boolean add(java.lang.Object)>($r19);

     label5:
        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        i9 = i9 + 1;

     label6:
        $r6 = interfaceinvoke r5.<java.util.Map: java.util.Collection values()>();

        $r7 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (int[]) $r8;

        $i1 = lengthof $r9;

        if i9 < $i1 goto label1;

        return;
    }

    public long getDataOffset()
    {
        java.util.Iterator $r4;
        com.coremedia.iso.boxes.Box $r1, r6, $r7;
        long $l0, l1;
        com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat r0;
        com.coremedia.iso.boxes.Container $r2;
        java.util.List $r3;
        java.lang.Object $r5, r8;
        boolean $z0, $z1;

        r0 := @this: com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat;

        r8 = r0;

        l1 = 16L;

        goto label6;

     label1:
        $r1 = (com.coremedia.iso.boxes.Box) r8;

        $r2 = interfaceinvoke $r1.<com.coremedia.iso.boxes.Box: com.coremedia.iso.boxes.Container getParent()>();

        $r3 = interfaceinvoke $r2.<com.coremedia.iso.boxes.Container: java.util.List getBoxes()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

        goto label4;

     label2:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.coremedia.iso.boxes.Box) $r5;

        if r8 != r6 goto label3;

        goto label5;

     label3:
        $l0 = interfaceinvoke r6.<com.coremedia.iso.boxes.Box: long getSize()>();

        l1 = l1 + $l0;

     label4:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

     label5:
        $r7 = (com.coremedia.iso.boxes.Box) r8;

        r8 = interfaceinvoke $r7.<com.coremedia.iso.boxes.Box: com.coremedia.iso.boxes.Container getParent()>();

     label6:
        $z1 = r8 instanceof com.coremedia.iso.boxes.Box;

        if $z1 != 0 goto label1;

        return l1;
    }

    public java.lang.String getType()
    {
        com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat r0;

        r0 := @this: com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat;

        return "mdat";
    }

    public long getSize()
    {
        long $l0, $l1;
        com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat r0;

        r0 := @this: com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat;

        $l0 = r0.<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: long contentSize>;

        $l1 = 16L + $l0;

        return $l1;
    }

    private boolean isSmallBox(long)
    {
        byte $b2;
        int $i3;
        long l0, $l1;
        com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat r0;

        r0 := @this: com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat;

        l0 := @parameter0: long;

        $l1 = l0 + 8L;

        $b2 = $l1 cmp 4294967296L;

        $i3 = (int) $b2;

        if $i3 >= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void getBox(java.nio.channels.WritableByteChannel) throws java.io.IOException
    {
        byte[] $r2, $r11;
        long $l0;
        com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat r1;
        java.nio.ByteBuffer $r0;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r5, $r8;
        com.googlecode.mp4parser.authoring.Sample r10;
        java.util.List $r4, r7;
        java.nio.channels.WritableByteChannel r3;
        java.lang.Object $r6, $r9;

        r1 := @this: com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat;

        r3 := @parameter0: java.nio.channels.WritableByteChannel;

        $r0 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(16);

        $l0 = virtualinvoke r1.<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: long getSize()>();

        $z0 = specialinvoke r1.<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: boolean isSmallBox(long)>($l0);

        if $z0 == 0 goto label1;

        staticinvoke <com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>($r0, $l0);

        goto label2;

     label1:
        staticinvoke <com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>($r0, 1L);

     label2:
        $r2 = staticinvoke <com.coremedia.iso.IsoFile: byte[] fourCCtoBytes(java.lang.String)>("mdat");

        virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>($r2);

        $z1 = specialinvoke r1.<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: boolean isSmallBox(long)>($l0);

        if $z1 == 0 goto label3;

        $r11 = newarray (byte)[8];

        virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>($r11);

        goto label4;

     label3:
        staticinvoke <com.coremedia.iso.IsoTypeWriter: void writeUInt64(java.nio.ByteBuffer,long)>($r0, $l0);

     label4:
        virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        interfaceinvoke r3.<java.nio.channels.WritableByteChannel: int write(java.nio.ByteBuffer)>($r0);

        $r4 = r1.<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: java.util.List chunkList>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

        goto label8;

     label5:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.List) $r6;

        $r8 = interfaceinvoke r7.<java.util.List: java.util.Iterator iterator()>();

        goto label7;

     label6:
        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (com.googlecode.mp4parser.authoring.Sample) $r9;

        interfaceinvoke r10.<com.googlecode.mp4parser.authoring.Sample: void writeTo(java.nio.channels.WritableByteChannel)>(r3);

     label7:
        $z3 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label6;

     label8:
        $z2 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label5;

        return;
    }

    void <init>(com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder, com.googlecode.mp4parser.authoring.Movie, java.util.Map, long, com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat)
    {
        java.util.Map r3;
        com.googlecode.mp4parser.authoring.Movie r2;
        long l0;
        com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder r1;
        com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat r0, r4;

        r0 := @this: com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat;

        r1 := @parameter0: com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder;

        r2 := @parameter1: com.googlecode.mp4parser.authoring.Movie;

        r3 := @parameter2: java.util.Map;

        l0 := @parameter3: long;

        r4 := @parameter4: com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat;

        specialinvoke r0.<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: void <init>(com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder,com.googlecode.mp4parser.authoring.Movie,java.util.Map,long)>(r1, r2, r3, l0);

        return;
    }
}
