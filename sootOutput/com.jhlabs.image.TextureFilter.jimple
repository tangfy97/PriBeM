public class com.jhlabs.image.TextureFilter extends com.jhlabs.image.PointFilter implements java.io.Serializable
{
    static final long serialVersionUID;
    private float scale;
    private float stretch;
    private float angle;
    public float amount;
    public float turbulence;
    public float gain;
    public float bias;
    public int operation;
    private float m00;
    private float m01;
    private float m10;
    private float m11;
    private com.jhlabs.image.Colormap colormap;
    private com.jhlabs.math.Function2D function;

    public void <init>()
    {
        com.jhlabs.image.Gradient $r1;
        com.jhlabs.image.TextureFilter r0;
        com.jhlabs.math.Noise $r2;

        r0 := @this: com.jhlabs.image.TextureFilter;

        specialinvoke r0.<com.jhlabs.image.PointFilter: void <init>()>();

        r0.<com.jhlabs.image.TextureFilter: float scale> = 32.0F;

        r0.<com.jhlabs.image.TextureFilter: float stretch> = 1.0F;

        r0.<com.jhlabs.image.TextureFilter: float angle> = 0.0F;

        r0.<com.jhlabs.image.TextureFilter: float amount> = 1.0F;

        r0.<com.jhlabs.image.TextureFilter: float turbulence> = 1.0F;

        r0.<com.jhlabs.image.TextureFilter: float gain> = 0.5F;

        r0.<com.jhlabs.image.TextureFilter: float bias> = 0.5F;

        r0.<com.jhlabs.image.TextureFilter: float m00> = 1.0F;

        r0.<com.jhlabs.image.TextureFilter: float m01> = 0.0F;

        r0.<com.jhlabs.image.TextureFilter: float m10> = 0.0F;

        r0.<com.jhlabs.image.TextureFilter: float m11> = 1.0F;

        $r1 = new com.jhlabs.image.Gradient;

        specialinvoke $r1.<com.jhlabs.image.Gradient: void <init>()>();

        r0.<com.jhlabs.image.TextureFilter: com.jhlabs.image.Colormap colormap> = $r1;

        $r2 = new com.jhlabs.math.Noise;

        specialinvoke $r2.<com.jhlabs.math.Noise: void <init>()>();

        r0.<com.jhlabs.image.TextureFilter: com.jhlabs.math.Function2D function> = $r2;

        return;
    }

    public void setAmount(float)
    {
        float f0;
        com.jhlabs.image.TextureFilter r0;

        r0 := @this: com.jhlabs.image.TextureFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.TextureFilter: float amount> = f0;

        return;
    }

    public float getAmount()
    {
        float $f0;
        com.jhlabs.image.TextureFilter r0;

        r0 := @this: com.jhlabs.image.TextureFilter;

        $f0 = r0.<com.jhlabs.image.TextureFilter: float amount>;

        return $f0;
    }

    public void setFunction(com.jhlabs.math.Function2D)
    {
        com.jhlabs.math.Function2D r1;
        com.jhlabs.image.TextureFilter r0;

        r0 := @this: com.jhlabs.image.TextureFilter;

        r1 := @parameter0: com.jhlabs.math.Function2D;

        r0.<com.jhlabs.image.TextureFilter: com.jhlabs.math.Function2D function> = r1;

        return;
    }

    public com.jhlabs.math.Function2D getFunction()
    {
        com.jhlabs.math.Function2D $r1;
        com.jhlabs.image.TextureFilter r0;

        r0 := @this: com.jhlabs.image.TextureFilter;

        $r1 = r0.<com.jhlabs.image.TextureFilter: com.jhlabs.math.Function2D function>;

        return $r1;
    }

    public void setOperation(int)
    {
        int i0;
        com.jhlabs.image.TextureFilter r0;

        r0 := @this: com.jhlabs.image.TextureFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.TextureFilter: int operation> = i0;

        return;
    }

    public int getOperation()
    {
        int $i0;
        com.jhlabs.image.TextureFilter r0;

        r0 := @this: com.jhlabs.image.TextureFilter;

        $i0 = r0.<com.jhlabs.image.TextureFilter: int operation>;

        return $i0;
    }

    public void setScale(float)
    {
        float f0;
        com.jhlabs.image.TextureFilter r0;

        r0 := @this: com.jhlabs.image.TextureFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.TextureFilter: float scale> = f0;

        return;
    }

    public float getScale()
    {
        float $f0;
        com.jhlabs.image.TextureFilter r0;

        r0 := @this: com.jhlabs.image.TextureFilter;

        $f0 = r0.<com.jhlabs.image.TextureFilter: float scale>;

        return $f0;
    }

    public void setStretch(float)
    {
        float f0;
        com.jhlabs.image.TextureFilter r0;

        r0 := @this: com.jhlabs.image.TextureFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.TextureFilter: float stretch> = f0;

        return;
    }

    public float getStretch()
    {
        float $f0;
        com.jhlabs.image.TextureFilter r0;

        r0 := @this: com.jhlabs.image.TextureFilter;

        $f0 = r0.<com.jhlabs.image.TextureFilter: float stretch>;

        return $f0;
    }

    public void setAngle(float)
    {
        float f0, f1, f2, $f3;
        com.jhlabs.image.TextureFilter r0;
        double $d0, $d1, $d2, $d3;

        r0 := @this: com.jhlabs.image.TextureFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.TextureFilter: float angle> = f0;

        $d0 = (double) f0;

        $d1 = staticinvoke <java.lang.Math: double cos(double)>($d0);

        f1 = (float) $d1;

        $d2 = (double) f0;

        $d3 = staticinvoke <java.lang.Math: double sin(double)>($d2);

        f2 = (float) $d3;

        r0.<com.jhlabs.image.TextureFilter: float m00> = f1;

        r0.<com.jhlabs.image.TextureFilter: float m01> = f2;

        $f3 = neg f2;

        r0.<com.jhlabs.image.TextureFilter: float m10> = $f3;

        r0.<com.jhlabs.image.TextureFilter: float m11> = f1;

        return;
    }

    public float getAngle()
    {
        float $f0;
        com.jhlabs.image.TextureFilter r0;

        r0 := @this: com.jhlabs.image.TextureFilter;

        $f0 = r0.<com.jhlabs.image.TextureFilter: float angle>;

        return $f0;
    }

    public void setTurbulence(float)
    {
        float f0;
        com.jhlabs.image.TextureFilter r0;

        r0 := @this: com.jhlabs.image.TextureFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.TextureFilter: float turbulence> = f0;

        return;
    }

    public float getTurbulence()
    {
        float $f0;
        com.jhlabs.image.TextureFilter r0;

        r0 := @this: com.jhlabs.image.TextureFilter;

        $f0 = r0.<com.jhlabs.image.TextureFilter: float turbulence>;

        return $f0;
    }

    public void setColormap(com.jhlabs.image.Colormap)
    {
        com.jhlabs.image.Colormap r1;
        com.jhlabs.image.TextureFilter r0;

        r0 := @this: com.jhlabs.image.TextureFilter;

        r1 := @parameter0: com.jhlabs.image.Colormap;

        r0.<com.jhlabs.image.TextureFilter: com.jhlabs.image.Colormap colormap> = r1;

        return;
    }

    public com.jhlabs.image.Colormap getColormap()
    {
        com.jhlabs.image.Colormap $r1;
        com.jhlabs.image.TextureFilter r0;

        r0 := @this: com.jhlabs.image.TextureFilter;

        $r1 = r0.<com.jhlabs.image.TextureFilter: com.jhlabs.image.Colormap colormap>;

        return $r1;
    }

    public int filterRGB(int, int, int)
    {
        byte $b2;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, f27, f28, f29, f30, $f31;
        com.jhlabs.image.TextureFilter r0;
        int i0, i1, i3, $i4, $i5, i6, i7, $i8, $i9, $i10, $i11, $i12, i13;
        com.jhlabs.image.Colormap $r1, $r2;
        double $d0;

        r0 := @this: com.jhlabs.image.TextureFilter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i3 := @parameter2: int;

        $f1 = r0.<com.jhlabs.image.TextureFilter: float m00>;

        $f0 = (float) i0;

        $f5 = $f1 * $f0;

        $f3 = r0.<com.jhlabs.image.TextureFilter: float m01>;

        $f2 = (float) i1;

        $f4 = $f3 * $f2;

        f27 = $f5 + $f4;

        $f7 = r0.<com.jhlabs.image.TextureFilter: float m10>;

        $f6 = (float) i0;

        $f11 = $f7 * $f6;

        $f9 = r0.<com.jhlabs.image.TextureFilter: float m11>;

        $f8 = (float) i1;

        $f10 = $f9 * $f8;

        f28 = $f11 + $f10;

        $f12 = r0.<com.jhlabs.image.TextureFilter: float scale>;

        f29 = f27 / $f12;

        $f14 = r0.<com.jhlabs.image.TextureFilter: float scale>;

        $f13 = r0.<com.jhlabs.image.TextureFilter: float stretch>;

        $f15 = $f14 * $f13;

        f30 = f28 / $f15;

        $f16 = r0.<com.jhlabs.image.TextureFilter: float turbulence>;

        $d0 = (double) $f16;

        $b2 = $d0 cmpl 1.0;

        if $b2 != 0 goto label1;

        $f31 = staticinvoke <com.jhlabs.math.Noise: float noise2(float,float)>(f29, f30);

        goto label2;

     label1:
        $f17 = r0.<com.jhlabs.image.TextureFilter: float turbulence>;

        $f31 = staticinvoke <com.jhlabs.math.Noise: float turbulence2(float,float,float)>(f29, f30, $f17);

     label2:
        $f18 = $f31 * 0.5F;

        $f25 = $f18 + 0.5F;

        $f19 = r0.<com.jhlabs.image.TextureFilter: float gain>;

        $f20 = staticinvoke <com.jhlabs.image.ImageMath: float gain(float,float)>($f25, $f19);

        $f21 = r0.<com.jhlabs.image.TextureFilter: float bias>;

        $f22 = staticinvoke <com.jhlabs.image.ImageMath: float bias(float,float)>($f20, $f21);

        $f23 = r0.<com.jhlabs.image.TextureFilter: float amount>;

        $f26 = $f22 * $f23;

        $i12 = i3 & -16777216;

        $r1 = r0.<com.jhlabs.image.TextureFilter: com.jhlabs.image.Colormap colormap>;

        if $r1 == null goto label3;

        $r2 = r0.<com.jhlabs.image.TextureFilter: com.jhlabs.image.Colormap colormap>;

        i13 = interfaceinvoke $r2.<com.jhlabs.image.Colormap: int getColor(float)>($f26);

        goto label4;

     label3:
        $f24 = $f26 * 255.0F;

        $i4 = (int) $f24;

        $i5 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>($i4);

        i6 = $i5 << 16;

        i7 = $i5 << 8;

        $i8 = $i12 | i6;

        $i9 = $i8 | i7;

        i13 = $i9 | $i5;

     label4:
        $i10 = r0.<com.jhlabs.image.TextureFilter: int operation>;

        if $i10 == 0 goto label5;

        $i11 = r0.<com.jhlabs.image.TextureFilter: int operation>;

        i13 = staticinvoke <com.jhlabs.image.PixelUtils: int combinePixels(int,int,int)>(i3, i13, $i11);

     label5:
        return i13;
    }

    public java.lang.String toString()
    {
        com.jhlabs.image.TextureFilter r0;

        r0 := @this: com.jhlabs.image.TextureFilter;

        return "Texture/Noise...";
    }

    public static void <clinit>()
    {
        <com.jhlabs.image.TextureFilter: long serialVersionUID> = -7538331862272404352L;

        return;
    }
}
