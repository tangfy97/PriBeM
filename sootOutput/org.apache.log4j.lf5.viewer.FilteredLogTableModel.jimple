public class org.apache.log4j.lf5.viewer.FilteredLogTableModel extends javax.swing.table.AbstractTableModel
{
    protected org.apache.log4j.lf5.LogRecordFilter _filter;
    protected java.util.List _allRecords;
    protected java.util.List _filteredRecords;
    protected int _maxNumberOfLogRecords;
    protected java.lang.String[] _colNames;

    public void <init>()
    {
        org.apache.log4j.lf5.viewer.FilteredLogTableModel r0;
        org.apache.log4j.lf5.PassingLogRecordFilter $r1;
        java.lang.String[] $r3;
        java.util.ArrayList $r2;

        r0 := @this: org.apache.log4j.lf5.viewer.FilteredLogTableModel;

        specialinvoke r0.<javax.swing.table.AbstractTableModel: void <init>()>();

        $r1 = new org.apache.log4j.lf5.PassingLogRecordFilter;

        specialinvoke $r1.<org.apache.log4j.lf5.PassingLogRecordFilter: void <init>()>();

        r0.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: org.apache.log4j.lf5.LogRecordFilter _filter> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: java.util.List _allRecords> = $r2;

        r0.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: int _maxNumberOfLogRecords> = 5000;

        $r3 = newarray (java.lang.String)[9];

        $r3[0] = "Date";

        $r3[1] = "Thread";

        $r3[2] = "Message #";

        $r3[3] = "Level";

        $r3[4] = "NDC";

        $r3[5] = "Category";

        $r3[6] = "Message";

        $r3[7] = "Location";

        $r3[8] = "Thrown";

        r0.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: java.lang.String[] _colNames> = $r3;

        return;
    }

    public void setLogRecordFilter(org.apache.log4j.lf5.LogRecordFilter)
    {
        org.apache.log4j.lf5.viewer.FilteredLogTableModel r0;
        org.apache.log4j.lf5.LogRecordFilter r1;

        r0 := @this: org.apache.log4j.lf5.viewer.FilteredLogTableModel;

        r1 := @parameter0: org.apache.log4j.lf5.LogRecordFilter;

        r0.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: org.apache.log4j.lf5.LogRecordFilter _filter> = r1;

        return;
    }

    public org.apache.log4j.lf5.LogRecordFilter getLogRecordFilter()
    {
        org.apache.log4j.lf5.viewer.FilteredLogTableModel r0;
        org.apache.log4j.lf5.LogRecordFilter $r1;

        r0 := @this: org.apache.log4j.lf5.viewer.FilteredLogTableModel;

        $r1 = r0.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: org.apache.log4j.lf5.LogRecordFilter _filter>;

        return $r1;
    }

    public java.lang.String getColumnName(int)
    {
        org.apache.log4j.lf5.viewer.FilteredLogTableModel r0;
        int i0;
        java.lang.String[] $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.log4j.lf5.viewer.FilteredLogTableModel;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: java.lang.String[] _colNames>;

        $r2 = $r1[i0];

        return $r2;
    }

    public int getColumnCount()
    {
        org.apache.log4j.lf5.viewer.FilteredLogTableModel r0;
        int $i0;
        java.lang.String[] $r1;

        r0 := @this: org.apache.log4j.lf5.viewer.FilteredLogTableModel;

        $r1 = r0.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: java.lang.String[] _colNames>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public int getRowCount()
    {
        org.apache.log4j.lf5.viewer.FilteredLogTableModel r0;
        int $i0;
        java.util.List $r1;

        r0 := @this: org.apache.log4j.lf5.viewer.FilteredLogTableModel;

        $r1 = virtualinvoke r0.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: java.util.List getFilteredRecords()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public int getTotalRowCount()
    {
        org.apache.log4j.lf5.viewer.FilteredLogTableModel r0;
        int $i0;
        java.util.List $r1;

        r0 := @this: org.apache.log4j.lf5.viewer.FilteredLogTableModel;

        $r1 = r0.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: java.util.List _allRecords>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public java.lang.Object getValueAt(int, int)
    {
        org.apache.log4j.lf5.viewer.FilteredLogTableModel r0;
        org.apache.log4j.lf5.LogRecord $r1;
        int i0, i1;
        java.lang.Object $r2;

        r0 := @this: org.apache.log4j.lf5.viewer.FilteredLogTableModel;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: org.apache.log4j.lf5.LogRecord getFilteredRecord(int)>(i0);

        $r2 = virtualinvoke r0.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: java.lang.Object getColumn(int,org.apache.log4j.lf5.LogRecord)>(i1, $r1);

        return $r2;
    }

    public void setMaxNumberOfLogRecords(int)
    {
        int i0;
        org.apache.log4j.lf5.viewer.FilteredLogTableModel r0;

        r0 := @this: org.apache.log4j.lf5.viewer.FilteredLogTableModel;

        i0 := @parameter0: int;

        if i0 <= 0 goto label1;

        r0.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: int _maxNumberOfLogRecords> = i0;

     label1:
        return;
    }

    public synchronized boolean addLogRecord(org.apache.log4j.lf5.LogRecord)
    {
        org.apache.log4j.lf5.viewer.FilteredLogTableModel r0;
        org.apache.log4j.lf5.LogRecordFilter $r3;
        org.apache.log4j.lf5.LogRecord r1;
        java.util.List $r2, $r4;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.log4j.lf5.viewer.FilteredLogTableModel;

        r1 := @parameter0: org.apache.log4j.lf5.LogRecord;

        $r2 = r0.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: java.util.List _allRecords>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r3 = r0.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: org.apache.log4j.lf5.LogRecordFilter _filter>;

        $z0 = interfaceinvoke $r3.<org.apache.log4j.lf5.LogRecordFilter: boolean passes(org.apache.log4j.lf5.LogRecord)>(r1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r4 = virtualinvoke r0.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: java.util.List getFilteredRecords()>();

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r1);

        $i0 = virtualinvoke r0.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: int getRowCount()>();

        $i1 = virtualinvoke r0.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: int getRowCount()>();

        virtualinvoke r0.<javax.swing.table.AbstractTableModel: void fireTableRowsInserted(int,int)>($i0, $i1);

        virtualinvoke r0.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: void trimRecords()>();

        return 1;
    }

    public synchronized void refresh()
    {
        org.apache.log4j.lf5.viewer.FilteredLogTableModel r0;
        java.util.List $r1;

        r0 := @this: org.apache.log4j.lf5.viewer.FilteredLogTableModel;

        $r1 = virtualinvoke r0.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: java.util.List createFilteredRecordsList()>();

        r0.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: java.util.List _filteredRecords> = $r1;

        virtualinvoke r0.<javax.swing.table.AbstractTableModel: void fireTableDataChanged()>();

        return;
    }

    public synchronized void fastRefresh()
    {
        org.apache.log4j.lf5.viewer.FilteredLogTableModel r0;
        java.util.List $r1;

        r0 := @this: org.apache.log4j.lf5.viewer.FilteredLogTableModel;

        $r1 = r0.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: java.util.List _filteredRecords>;

        interfaceinvoke $r1.<java.util.List: java.lang.Object remove(int)>(0);

        virtualinvoke r0.<javax.swing.table.AbstractTableModel: void fireTableRowsDeleted(int,int)>(0, 0);

        return;
    }

    public synchronized void clear()
    {
        org.apache.log4j.lf5.viewer.FilteredLogTableModel r0;
        java.util.List $r1, $r2;

        r0 := @this: org.apache.log4j.lf5.viewer.FilteredLogTableModel;

        $r1 = r0.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: java.util.List _allRecords>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        $r2 = r0.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: java.util.List _filteredRecords>;

        interfaceinvoke $r2.<java.util.List: void clear()>();

        virtualinvoke r0.<javax.swing.table.AbstractTableModel: void fireTableDataChanged()>();

        return;
    }

    protected java.util.List getFilteredRecords()
    {
        org.apache.log4j.lf5.viewer.FilteredLogTableModel r0;
        java.util.List $r1, $r2;

        r0 := @this: org.apache.log4j.lf5.viewer.FilteredLogTableModel;

        $r1 = r0.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: java.util.List _filteredRecords>;

        if $r1 != null goto label1;

        virtualinvoke r0.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: void refresh()>();

     label1:
        $r2 = r0.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: java.util.List _filteredRecords>;

        return $r2;
    }

    protected java.util.List createFilteredRecordsList()
    {
        org.apache.log4j.lf5.viewer.FilteredLogTableModel r1;
        java.util.Iterator $r3;
        org.apache.log4j.lf5.LogRecordFilter $r6;
        java.util.ArrayList $r0;
        org.apache.log4j.lf5.LogRecord r5;
        java.util.List $r2;
        java.lang.Object $r4;
        boolean $z0, $z1;

        r1 := @this: org.apache.log4j.lf5.viewer.FilteredLogTableModel;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: java.util.List _allRecords>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.log4j.lf5.LogRecord) $r4;

        $r6 = r1.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: org.apache.log4j.lf5.LogRecordFilter _filter>;

        $z0 = interfaceinvoke $r6.<org.apache.log4j.lf5.LogRecordFilter: boolean passes(org.apache.log4j.lf5.LogRecord)>(r5);

        if $z0 == 0 goto label1;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r5);

        goto label1;

     label2:
        return $r0;
    }

    protected org.apache.log4j.lf5.LogRecord getFilteredRecord(int)
    {
        org.apache.log4j.lf5.viewer.FilteredLogTableModel r0;
        org.apache.log4j.lf5.LogRecord $r3, $r5;
        java.util.List $r1;
        int $i0, i1, $i2;
        java.lang.Object $r2, $r4;

        r0 := @this: org.apache.log4j.lf5.viewer.FilteredLogTableModel;

        i1 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: java.util.List getFilteredRecords()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i1 >= $i0 goto label1;

        $r4 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i1);

        $r5 = (org.apache.log4j.lf5.LogRecord) $r4;

        return $r5;

     label1:
        $i2 = $i0 - 1;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i2);

        $r3 = (org.apache.log4j.lf5.LogRecord) $r2;

        return $r3;
    }

    protected java.lang.Object getColumn(int, org.apache.log4j.lf5.LogRecord)
    {
        java.util.Date $r1;
        long $l0, $l2, $l3;
        org.apache.log4j.lf5.LogRecord r0;
        java.lang.Long $r9;
        java.lang.StringBuffer $r11, $r12, $r13, $r14, $r15, $r17, $r18, $r19, $r20;
        int i1;
        java.lang.String $r2, $r3, $r4, $r5, $r6, $r7, $r10, $r16, $r21;
        org.apache.log4j.lf5.viewer.FilteredLogTableModel r23;
        java.lang.IllegalArgumentException $r22;
        org.apache.log4j.lf5.LogLevel $r8;

        r23 := @this: org.apache.log4j.lf5.viewer.FilteredLogTableModel;

        i1 := @parameter0: int;

        r0 := @parameter1: org.apache.log4j.lf5.LogRecord;

        if r0 != null goto label01;

        return "NULL Column";

     label01:
        $r1 = new java.util.Date;

        $l0 = virtualinvoke r0.<org.apache.log4j.lf5.LogRecord: long getMillis()>();

        specialinvoke $r1.<java.util.Date: void <init>(long)>($l0);

        $r2 = virtualinvoke $r1.<java.util.Date: java.lang.String toString()>();

        tableswitch(i1)
        {
            case 0: goto label02;
            case 1: goto label03;
            case 2: goto label04;
            case 3: goto label05;
            case 4: goto label06;
            case 5: goto label07;
            case 6: goto label08;
            case 7: goto label09;
            case 8: goto label10;
            default: goto label11;
        };

     label02:
        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (");

        $l3 = virtualinvoke r0.<org.apache.log4j.lf5.LogRecord: long getMillis()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l3);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r16;

     label03:
        $r10 = virtualinvoke r0.<org.apache.log4j.lf5.LogRecord: java.lang.String getThreadDescription()>();

        return $r10;

     label04:
        $r9 = new java.lang.Long;

        $l2 = virtualinvoke r0.<org.apache.log4j.lf5.LogRecord: long getSequenceNumber()>();

        specialinvoke $r9.<java.lang.Long: void <init>(long)>($l2);

        return $r9;

     label05:
        $r8 = virtualinvoke r0.<org.apache.log4j.lf5.LogRecord: org.apache.log4j.lf5.LogLevel getLevel()>();

        return $r8;

     label06:
        $r7 = virtualinvoke r0.<org.apache.log4j.lf5.LogRecord: java.lang.String getNDC()>();

        return $r7;

     label07:
        $r6 = virtualinvoke r0.<org.apache.log4j.lf5.LogRecord: java.lang.String getCategory()>();

        return $r6;

     label08:
        $r5 = virtualinvoke r0.<org.apache.log4j.lf5.LogRecord: java.lang.String getMessage()>();

        return $r5;

     label09:
        $r4 = virtualinvoke r0.<org.apache.log4j.lf5.LogRecord: java.lang.String getLocation()>();

        return $r4;

     label10:
        $r3 = virtualinvoke r0.<org.apache.log4j.lf5.LogRecord: java.lang.String getThrownStackTrace()>();

        return $r3;

     label11:
        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The column number ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("must be between 0 and 8");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        $r22 = new java.lang.IllegalArgumentException;

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21);

        throw $r22;
    }

    protected void trimRecords()
    {
        org.apache.log4j.lf5.viewer.FilteredLogTableModel r0;
        boolean $z0;

        r0 := @this: org.apache.log4j.lf5.viewer.FilteredLogTableModel;

        $z0 = virtualinvoke r0.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: boolean needsTrimming()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: void trimOldestRecords()>();

     label1:
        return;
    }

    protected boolean needsTrimming()
    {
        org.apache.log4j.lf5.viewer.FilteredLogTableModel r0;
        java.util.List $r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.log4j.lf5.viewer.FilteredLogTableModel;

        $r1 = r0.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: java.util.List _allRecords>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = r0.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: int _maxNumberOfLogRecords>;

        if $i0 <= $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected void trimOldestRecords()
    {
        org.apache.log4j.lf5.viewer.FilteredLogTableModel r0;
        java.lang.Throwable $r5;
        java.util.List $r1, $r2, $r3, $r4;
        int $i0;

        r0 := @this: org.apache.log4j.lf5.viewer.FilteredLogTableModel;

        $r1 = r0.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: java.util.List _allRecords>;

        entermonitor $r1;

     label1:
        $i0 = specialinvoke r0.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: int numberOfRecordsToTrim()>();

        if $i0 <= 1 goto label2;

        $r3 = r0.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: java.util.List _allRecords>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.List subList(int,int)>(0, $i0);

        interfaceinvoke $r4.<java.util.List: void clear()>();

        virtualinvoke r0.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: void refresh()>();

        goto label3;

     label2:
        $r2 = r0.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: java.util.List _allRecords>;

        interfaceinvoke $r2.<java.util.List: java.lang.Object remove(int)>(0);

        virtualinvoke r0.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: void fastRefresh()>();

     label3:
        exitmonitor $r1;

     label4:
        goto label7;

     label5:
        $r5 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r5;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private int numberOfRecordsToTrim()
    {
        org.apache.log4j.lf5.viewer.FilteredLogTableModel r0;
        java.util.List $r1;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.log4j.lf5.viewer.FilteredLogTableModel;

        $r1 = r0.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: java.util.List _allRecords>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = r0.<org.apache.log4j.lf5.viewer.FilteredLogTableModel: int _maxNumberOfLogRecords>;

        $i2 = $i0 - $i1;

        return $i2;
    }
}
