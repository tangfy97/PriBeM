public final class org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs extends java.lang.Object
{
    final long first;
    final long second;
    static final boolean $assertionsDisabled;

    public void <init>(long, long)
    {
        long l0, l1;
        java.lang.AssertionError $r3, $r4;
        org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs r0;
        byte $b2, $b3;
        int $i4, $i5;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs: long first> = l0;

        r0.<org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs: long second> = l1;

        $z0 = <org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $b3 = l0 cmp 0L;

        $i4 = (int) $b3;

        if $i4 >= 0 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        $z1 = <org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $b2 = l1 cmp 0L;

        $i5 = (int) $b2;

        if $i5 >= 0 goto label2;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        return;
    }

    public java.lang.String toString()
    {
        long $l0, $l1;
        org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs r2;
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r5;
        java.lang.String $r6;

        r2 := @this: org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TwoLongs:");

        $l0 = r2.<org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs: long first>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $l1 = r2.<org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs: long second>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public boolean equals(java.lang.Object)
    {
        long $l0, $l1, $l3, $l4;
        org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs r1, r2;
        byte $b2, $b5;
        java.lang.Object r0;
        boolean $z0, $z1;

        r2 := @this: org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs;

        if $z0 == 0 goto label3;

        r1 = (org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs) r0;

        $l1 = r2.<org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs: long first>;

        $l0 = r1.<org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs: long first>;

        $b2 = $l1 cmp $l0;

        if $b2 != 0 goto label1;

        $l4 = r2.<org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs: long second>;

        $l3 = r1.<org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs: long second>;

        $b5 = $l4 cmp $l3;

        if $b5 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;

     label3:
        return 0;
    }

    public int hashCode()
    {
        long $l0, $l1, $l2, $l3, $l4, $l5, $l6, $l7, $l8;
        org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs r0;
        int $i9;

        r0 := @this: org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs;

        $l2 = r0.<org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs: long first>;

        $l0 = r0.<org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs: long first>;

        $l1 = $l0 >>> 32;

        $l7 = $l2 ^ $l1;

        $l5 = r0.<org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs: long second>;

        $l3 = r0.<org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs: long second>;

        $l4 = $l3 >> 32;

        $l6 = $l5 ^ $l4;

        $l8 = $l7 ^ $l6;

        $i9 = (int) $l8;

        return $i9;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/fst/UpToTwoPositiveIntOutputs;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs: boolean $assertionsDisabled> = $z1;

        return;
    }
}
