public class org.codehaus.groovy.ast.expr.BinaryExpression extends org.codehaus.groovy.ast.expr.Expression
{
    private org.codehaus.groovy.ast.expr.Expression leftExpression;
    private org.codehaus.groovy.ast.expr.Expression rightExpression;
    private final org.codehaus.groovy.syntax.Token operation;

    public void <init>(org.codehaus.groovy.ast.expr.Expression, org.codehaus.groovy.syntax.Token, org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.ast.expr.BinaryExpression r0;
        org.codehaus.groovy.ast.expr.Expression r1, r3;
        org.codehaus.groovy.syntax.Token r2;

        r0 := @this: org.codehaus.groovy.ast.expr.BinaryExpression;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        r2 := @parameter1: org.codehaus.groovy.syntax.Token;

        r3 := @parameter2: org.codehaus.groovy.ast.expr.Expression;

        specialinvoke r0.<org.codehaus.groovy.ast.expr.Expression: void <init>()>();

        r0.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression leftExpression> = r1;

        r0.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.syntax.Token operation> = r2;

        r0.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression rightExpression> = r3;

        return;
    }

    public java.lang.String toString()
    {
        org.codehaus.groovy.syntax.Token $r7;
        org.codehaus.groovy.ast.expr.BinaryExpression r1;
        java.lang.StringBuffer $r0, $r3, $r4, $r6, $r8, $r10, $r11;
        java.lang.String $r2, $r12;
        org.codehaus.groovy.ast.expr.Expression $r5, $r9;

        r1 := @this: org.codehaus.groovy.ast.expr.BinaryExpression;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = specialinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[");

        $r5 = r1.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression leftExpression>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r5);

        $r7 = r1.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.syntax.Token operation>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r7);

        $r9 = r1.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression rightExpression>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r12;
    }

    public void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)
    {
        org.codehaus.groovy.ast.expr.BinaryExpression r1;
        org.codehaus.groovy.ast.GroovyCodeVisitor r0;

        r1 := @this: org.codehaus.groovy.ast.expr.BinaryExpression;

        r0 := @parameter0: org.codehaus.groovy.ast.GroovyCodeVisitor;

        interfaceinvoke r0.<org.codehaus.groovy.ast.GroovyCodeVisitor: void visitBinaryExpression(org.codehaus.groovy.ast.expr.BinaryExpression)>(r1);

        return;
    }

    public org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)
    {
        org.codehaus.groovy.syntax.Token $r6;
        org.codehaus.groovy.ast.expr.BinaryExpression $r0, r2;
        org.codehaus.groovy.ast.expr.ExpressionTransformer r1;
        org.codehaus.groovy.ast.expr.Expression $r3, $r4, $r5, $r7;

        r2 := @this: org.codehaus.groovy.ast.expr.BinaryExpression;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.ExpressionTransformer;

        $r0 = new org.codehaus.groovy.ast.expr.BinaryExpression;

        $r3 = r2.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression leftExpression>;

        $r4 = interfaceinvoke r1.<org.codehaus.groovy.ast.expr.ExpressionTransformer: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r3);

        $r6 = r2.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.syntax.Token operation>;

        $r5 = r2.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression rightExpression>;

        $r7 = interfaceinvoke r1.<org.codehaus.groovy.ast.expr.ExpressionTransformer: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r5);

        specialinvoke $r0.<org.codehaus.groovy.ast.expr.BinaryExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.syntax.Token,org.codehaus.groovy.ast.expr.Expression)>($r4, $r6, $r7);

        virtualinvoke $r0.<org.codehaus.groovy.ast.expr.Expression: void setSourcePosition(org.codehaus.groovy.ast.ASTNode)>(r2);

        return $r0;
    }

    public org.codehaus.groovy.ast.expr.Expression getLeftExpression()
    {
        org.codehaus.groovy.ast.expr.BinaryExpression r0;
        org.codehaus.groovy.ast.expr.Expression $r1;

        r0 := @this: org.codehaus.groovy.ast.expr.BinaryExpression;

        $r1 = r0.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression leftExpression>;

        return $r1;
    }

    public void setLeftExpression(org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.ast.expr.BinaryExpression r0;
        org.codehaus.groovy.ast.expr.Expression r1;

        r0 := @this: org.codehaus.groovy.ast.expr.BinaryExpression;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        r0.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression leftExpression> = r1;

        return;
    }

    public void setRightExpression(org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.ast.expr.BinaryExpression r0;
        org.codehaus.groovy.ast.expr.Expression r1;

        r0 := @this: org.codehaus.groovy.ast.expr.BinaryExpression;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        r0.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression rightExpression> = r1;

        return;
    }

    public org.codehaus.groovy.syntax.Token getOperation()
    {
        org.codehaus.groovy.ast.expr.BinaryExpression r0;
        org.codehaus.groovy.syntax.Token $r1;

        r0 := @this: org.codehaus.groovy.ast.expr.BinaryExpression;

        $r1 = r0.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.syntax.Token operation>;

        return $r1;
    }

    public org.codehaus.groovy.ast.expr.Expression getRightExpression()
    {
        org.codehaus.groovy.ast.expr.BinaryExpression r0;
        org.codehaus.groovy.ast.expr.Expression $r1;

        r0 := @this: org.codehaus.groovy.ast.expr.BinaryExpression;

        $r1 = r0.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression rightExpression>;

        return $r1;
    }

    public java.lang.String getText()
    {
        java.lang.StringBuffer $r2, $r3, $r6, $r7, $r10, $r11, $r14, $r15, $r17, $r20, $r21, $r24, $r25;
        int $i0;
        org.codehaus.groovy.ast.expr.Expression $r4, $r12, $r18, $r22;
        java.lang.String $r5, $r9, $r13, $r16, $r19, $r23, $r26;
        org.codehaus.groovy.syntax.Token $r1, $r8;
        org.codehaus.groovy.ast.expr.BinaryExpression r0;

        r0 := @this: org.codehaus.groovy.ast.expr.BinaryExpression;

        $r1 = r0.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.syntax.Token operation>;

        $i0 = virtualinvoke $r1.<org.codehaus.groovy.syntax.Token: int getType()>();

        if $i0 != 30 goto label1;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r18 = r0.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression leftExpression>;

        $r19 = virtualinvoke $r18.<org.codehaus.groovy.ast.expr.Expression: java.lang.String getText()>();

        $r20 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[");

        $r22 = r0.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression rightExpression>;

        $r23 = virtualinvoke $r22.<org.codehaus.groovy.ast.expr.Expression: java.lang.String getText()>();

        $r24 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r26;

     label1:
        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $r4 = r0.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression leftExpression>;

        $r5 = virtualinvoke $r4.<org.codehaus.groovy.ast.expr.Expression: java.lang.String getText()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r8 = r0.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.syntax.Token operation>;

        $r9 = virtualinvoke $r8.<org.codehaus.groovy.syntax.Token: java.lang.String getText()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r12 = r0.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression rightExpression>;

        $r13 = virtualinvoke $r12.<org.codehaus.groovy.ast.expr.Expression: java.lang.String getText()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r16;
    }

    public static org.codehaus.groovy.ast.expr.BinaryExpression newAssignmentExpression(org.codehaus.groovy.ast.Variable, org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.ast.Variable r1;
        org.codehaus.groovy.ast.expr.BinaryExpression $r3;
        org.codehaus.groovy.ast.expr.VariableExpression $r0;
        org.codehaus.groovy.ast.expr.Expression r4;
        org.codehaus.groovy.syntax.Token $r2;

        r1 := @parameter0: org.codehaus.groovy.ast.Variable;

        r4 := @parameter1: org.codehaus.groovy.ast.expr.Expression;

        $r0 = new org.codehaus.groovy.ast.expr.VariableExpression;

        specialinvoke $r0.<org.codehaus.groovy.ast.expr.VariableExpression: void <init>(org.codehaus.groovy.ast.Variable)>(r1);

        $r2 = staticinvoke <org.codehaus.groovy.syntax.Token: org.codehaus.groovy.syntax.Token newPlaceholder(int)>(100);

        $r3 = new org.codehaus.groovy.ast.expr.BinaryExpression;

        specialinvoke $r3.<org.codehaus.groovy.ast.expr.BinaryExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.syntax.Token,org.codehaus.groovy.ast.expr.Expression)>($r0, $r2, r4);

        return $r3;
    }

    public static org.codehaus.groovy.ast.expr.BinaryExpression newInitializationExpression(java.lang.String, org.codehaus.groovy.ast.ClassNode, org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.ast.expr.BinaryExpression $r4;
        org.codehaus.groovy.ast.expr.VariableExpression $r0;
        org.codehaus.groovy.ast.ClassNode r2;
        java.lang.String r1;
        org.codehaus.groovy.ast.expr.Expression r5;
        org.codehaus.groovy.syntax.Token $r3;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.codehaus.groovy.ast.ClassNode;

        r5 := @parameter2: org.codehaus.groovy.ast.expr.Expression;

        $r0 = new org.codehaus.groovy.ast.expr.VariableExpression;

        specialinvoke $r0.<org.codehaus.groovy.ast.expr.VariableExpression: void <init>(java.lang.String)>(r1);

        if r2 == null goto label1;

        virtualinvoke $r0.<org.codehaus.groovy.ast.expr.VariableExpression: void setType(org.codehaus.groovy.ast.ClassNode)>(r2);

     label1:
        $r3 = staticinvoke <org.codehaus.groovy.syntax.Token: org.codehaus.groovy.syntax.Token newPlaceholder(int)>(100);

        $r4 = new org.codehaus.groovy.ast.expr.BinaryExpression;

        specialinvoke $r4.<org.codehaus.groovy.ast.expr.BinaryExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.syntax.Token,org.codehaus.groovy.ast.expr.Expression)>($r0, $r3, r5);

        return $r4;
    }
}
