public class org.waveprotocol.box.server.robots.dataapi.DataApiServlet extends org.waveprotocol.box.server.robots.dataapi.BaseApiServlet
{
    private static final org.waveprotocol.wave.util.logging.Log LOG;
    private final org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer tokenContainer;

    public void <init>(com.google.wave.api.RobotSerializer, com.google.wave.api.data.converter.EventDataConverterManager, org.waveprotocol.box.server.waveserver.WaveletProvider, org.waveprotocol.box.server.robots.OperationServiceRegistry, org.waveprotocol.box.server.robots.util.ConversationUtil, net.oauth.OAuthValidator, org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer)
    {
        com.google.wave.api.data.converter.EventDataConverterManager r2;
        org.waveprotocol.box.server.robots.util.ConversationUtil r5;
        org.waveprotocol.box.server.waveserver.WaveletProvider r3;
        org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer r7;
        net.oauth.OAuthValidator r6;
        com.google.wave.api.RobotSerializer r1;
        org.waveprotocol.box.server.robots.dataapi.DataApiServlet r0;
        org.waveprotocol.box.server.robots.OperationServiceRegistry r4;

        r0 := @this: org.waveprotocol.box.server.robots.dataapi.DataApiServlet;

        r1 := @parameter0: com.google.wave.api.RobotSerializer;

        r2 := @parameter1: com.google.wave.api.data.converter.EventDataConverterManager;

        r3 := @parameter2: org.waveprotocol.box.server.waveserver.WaveletProvider;

        r4 := @parameter3: org.waveprotocol.box.server.robots.OperationServiceRegistry;

        r5 := @parameter4: org.waveprotocol.box.server.robots.util.ConversationUtil;

        r6 := @parameter5: net.oauth.OAuthValidator;

        r7 := @parameter6: org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer;

        specialinvoke r0.<org.waveprotocol.box.server.robots.dataapi.BaseApiServlet: void <init>(com.google.wave.api.RobotSerializer,com.google.wave.api.data.converter.EventDataConverterManager,org.waveprotocol.box.server.waveserver.WaveletProvider,org.waveprotocol.box.server.robots.OperationServiceRegistry,org.waveprotocol.box.server.robots.util.ConversationUtil,net.oauth.OAuthValidator)>(r1, r2, r3, r4, r5, r6);

        r0.<org.waveprotocol.box.server.robots.dataapi.DataApiServlet: org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer tokenContainer> = r7;

        return;
    }

    protected void doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException
    {
        net.oauth.server.HttpRequestMessage $r0;
        org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer $r6;
        javax.servlet.http.HttpServletResponse r10;
        java.lang.String[] $r4;
        net.oauth.OAuthProblemException $r11;
        org.waveprotocol.wave.model.wave.ParticipantId r14;
        javax.servlet.http.HttpServletRequest r1;
        net.oauth.OAuthAccessor $r8;
        java.lang.StringBuffer $r2;
        java.lang.Object $r9;
        org.waveprotocol.wave.util.logging.Log $r12;
        java.lang.String $r3, $r7, $r13;
        org.waveprotocol.box.server.robots.dataapi.DataApiServlet r5;

        r5 := @this: org.waveprotocol.box.server.robots.dataapi.DataApiServlet;

        r1 := @parameter0: javax.servlet.http.HttpServletRequest;

        r10 := @parameter1: javax.servlet.http.HttpServletResponse;

        $r0 = new net.oauth.server.HttpRequestMessage;

        $r2 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.StringBuffer getRequestURL()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<net.oauth.server.HttpRequestMessage: void <init>(javax.servlet.http.HttpServletRequest,java.lang.String)>(r1, $r3);

     label1:
        $r4 = newarray (java.lang.String)[1];

        $r4[0] = "oauth_token";

        virtualinvoke $r0.<net.oauth.OAuthMessage: void requireParameters(java.lang.String[])>($r4);

        $r6 = r5.<org.waveprotocol.box.server.robots.dataapi.DataApiServlet: org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer tokenContainer>;

        $r7 = virtualinvoke $r0.<net.oauth.OAuthMessage: java.lang.String getParameter(java.lang.String)>("oauth_token");

        $r8 = virtualinvoke $r6.<org.waveprotocol.box.server.robots.dataapi.DataApiTokenContainer: net.oauth.OAuthAccessor getAccessTokenAccessor(java.lang.String)>($r7);

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        $r12 = <org.waveprotocol.box.server.robots.dataapi.DataApiServlet: org.waveprotocol.wave.util.logging.Log LOG>;

        virtualinvoke $r12.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String,java.lang.Throwable)>("No valid OAuth token present", $r11);

        $r13 = virtualinvoke $r11.<net.oauth.OAuthProblemException: java.lang.String getMessage()>();

        interfaceinvoke r10.<javax.servlet.http.HttpServletResponse: void sendError(int,java.lang.String)>(401, $r13);

        return;

     label4:
        $r9 = virtualinvoke $r8.<net.oauth.OAuthAccessor: java.lang.Object getProperty(java.lang.String)>("user");

        r14 = (org.waveprotocol.wave.model.wave.ParticipantId) $r9;

        virtualinvoke r5.<org.waveprotocol.box.server.robots.dataapi.DataApiServlet: void processOpsRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,net.oauth.OAuthMessage,net.oauth.OAuthAccessor,org.waveprotocol.wave.model.wave.ParticipantId)>(r1, r10, $r0, $r8, r14);

        return;

        catch net.oauth.OAuthProblemException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.util.logging.Log $r0;

        $r0 = staticinvoke <org.waveprotocol.wave.util.logging.Log: org.waveprotocol.wave.util.logging.Log get(java.lang.Class)>(class "Lorg/waveprotocol/box/server/robots/dataapi/DataApiServlet;");

        <org.waveprotocol.box.server.robots.dataapi.DataApiServlet: org.waveprotocol.wave.util.logging.Log LOG> = $r0;

        return;
    }
}
