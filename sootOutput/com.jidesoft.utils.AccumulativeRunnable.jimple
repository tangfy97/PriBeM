abstract class com.jidesoft.utils.AccumulativeRunnable extends java.lang.Object implements java.lang.Runnable
{
    private java.util.List arguments;

    void <init>()
    {
        com.jidesoft.utils.AccumulativeRunnable r0;

        r0 := @this: com.jidesoft.utils.AccumulativeRunnable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.jidesoft.utils.AccumulativeRunnable: java.util.List arguments> = null;

        return;
    }

    protected abstract void run(java.util.List);

    public final void run()
    {
        java.util.List $r1;
        com.jidesoft.utils.AccumulativeRunnable r0;

        r0 := @this: com.jidesoft.utils.AccumulativeRunnable;

        $r1 = specialinvoke r0.<com.jidesoft.utils.AccumulativeRunnable: java.util.List flush()>();

        virtualinvoke r0.<com.jidesoft.utils.AccumulativeRunnable: void run(java.util.List)>($r1);

        return;
    }

    public final synchronized transient void add(java.lang.Object[])
    {
        java.util.List $r1, $r3;
        java.lang.Object[] r2;
        com.jidesoft.utils.AccumulativeRunnable r0;
        java.util.ArrayList $r4;
        boolean z0;

        r0 := @this: com.jidesoft.utils.AccumulativeRunnable;

        r2 := @parameter0: java.lang.Object[];

        z0 = 1;

        $r1 = r0.<com.jidesoft.utils.AccumulativeRunnable: java.util.List arguments>;

        if $r1 != null goto label1;

        z0 = 0;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<com.jidesoft.utils.AccumulativeRunnable: java.util.List arguments> = $r4;

     label1:
        $r3 = r0.<com.jidesoft.utils.AccumulativeRunnable: java.util.List arguments>;

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r3, r2);

        if z0 != 0 goto label2;

        virtualinvoke r0.<com.jidesoft.utils.AccumulativeRunnable: void submit()>();

     label2:
        return;
    }

    protected void submit()
    {
        com.jidesoft.utils.AccumulativeRunnable r0;

        r0 := @this: com.jidesoft.utils.AccumulativeRunnable;

        staticinvoke <javax.swing.SwingUtilities: void invokeLater(java.lang.Runnable)>(r0);

        return;
    }

    private final synchronized java.util.List flush()
    {
        java.util.List r1;
        com.jidesoft.utils.AccumulativeRunnable r0;

        r0 := @this: com.jidesoft.utils.AccumulativeRunnable;

        r1 = r0.<com.jidesoft.utils.AccumulativeRunnable: java.util.List arguments>;

        r0.<com.jidesoft.utils.AccumulativeRunnable: java.util.List arguments> = null;

        return r1;
    }
}
