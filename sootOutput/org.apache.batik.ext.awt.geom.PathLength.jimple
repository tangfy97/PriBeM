public class org.apache.batik.ext.awt.geom.PathLength extends java.lang.Object
{
    protected java.awt.Shape path;
    protected java.util.List segments;
    protected int[] segmentIndexes;
    protected float pathLength;
    protected boolean initialised;

    public void <init>(java.awt.Shape)
    {
        java.awt.Shape r1;
        org.apache.batik.ext.awt.geom.PathLength r0;

        r0 := @this: org.apache.batik.ext.awt.geom.PathLength;

        r1 := @parameter0: java.awt.Shape;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<org.apache.batik.ext.awt.geom.PathLength: void setPath(java.awt.Shape)>(r1);

        return;
    }

    public java.awt.Shape getPath()
    {
        java.awt.Shape $r1;
        org.apache.batik.ext.awt.geom.PathLength r0;

        r0 := @this: org.apache.batik.ext.awt.geom.PathLength;

        $r1 = r0.<org.apache.batik.ext.awt.geom.PathLength: java.awt.Shape path>;

        return $r1;
    }

    public void setPath(java.awt.Shape)
    {
        java.awt.Shape r1;
        org.apache.batik.ext.awt.geom.PathLength r0;

        r0 := @this: org.apache.batik.ext.awt.geom.PathLength;

        r1 := @parameter0: java.awt.Shape;

        r0.<org.apache.batik.ext.awt.geom.PathLength: java.awt.Shape path> = r1;

        r0.<org.apache.batik.ext.awt.geom.PathLength: boolean initialised> = 0;

        return;
    }

    public float lengthOfPath()
    {
        float $f0;
        org.apache.batik.ext.awt.geom.PathLength r0;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.geom.PathLength;

        $z0 = r0.<org.apache.batik.ext.awt.geom.PathLength: boolean initialised>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.apache.batik.ext.awt.geom.PathLength: void initialise()>();

     label1:
        $f0 = r0.<org.apache.batik.ext.awt.geom.PathLength: float pathLength>;

        return $f0;
    }

    protected void initialise()
    {
        org.apache.batik.ext.awt.geom.PathLength$SingleSegmentPathIterator $r26;
        java.lang.Integer $r24, $r30;
        java.awt.geom.AffineTransform $r25;
        float[] r7;
        java.util.ArrayList $r27, $r28;
        org.apache.batik.ext.awt.geom.PathLength r0;
        org.apache.batik.ext.awt.geom.PathLength$PathSegment $r29, $r31, $r32, $r33, $r35;
        java.awt.geom.PathIterator $r3;
        int[] $r20, $r21, $r22;
        boolean $z0, $z1;
        java.awt.Shape $r2;
        java.util.List $r9, $r12, $r14, $r16, $r19;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, f20, f21, f22, f23;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7, $i9, $i11;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22;
        java.lang.Object $r23;
        java.awt.geom.FlatteningPathIterator $r34;

        r0 := @this: org.apache.batik.ext.awt.geom.PathLength;

        r0.<org.apache.batik.ext.awt.geom.PathLength: float pathLength> = 0.0F;

        $r2 = r0.<org.apache.batik.ext.awt.geom.PathLength: java.awt.Shape path>;

        $r25 = new java.awt.geom.AffineTransform;

        specialinvoke $r25.<java.awt.geom.AffineTransform: void <init>()>();

        $r3 = interfaceinvoke $r2.<java.awt.Shape: java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform)>($r25);

        $r26 = new org.apache.batik.ext.awt.geom.PathLength$SingleSegmentPathIterator;

        specialinvoke $r26.<org.apache.batik.ext.awt.geom.PathLength$SingleSegmentPathIterator: void <init>()>();

        $r27 = new java.util.ArrayList;

        specialinvoke $r27.<java.util.ArrayList: void <init>(int)>(20);

        r0.<org.apache.batik.ext.awt.geom.PathLength: java.util.List segments> = $r27;

        $r28 = new java.util.ArrayList;

        specialinvoke $r28.<java.util.ArrayList: void <init>(int)>(20);

        i5 = 0;

        $i9 = (int) -1;

        i6 = $i9;

        f20 = 0.0F;

        f21 = 0.0F;

        f22 = 0.0F;

        f23 = 0.0F;

        r7 = newarray (float)[6];

        $r9 = r0.<org.apache.batik.ext.awt.geom.PathLength: java.util.List segments>;

        $r29 = new org.apache.batik.ext.awt.geom.PathLength$PathSegment;

        $i11 = (int) -1;

        specialinvoke $r29.<org.apache.batik.ext.awt.geom.PathLength$PathSegment: void <init>(int,float,float,float,int)>(0, 0.0F, 0.0F, 0.0F, $i11);

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r29);

        goto label09;

     label01:
        i6 = i6 + 1;

        $r30 = new java.lang.Integer;

        specialinvoke $r30.<java.lang.Integer: void <init>(int)>(i5);

        interfaceinvoke $r28.<java.util.List: boolean add(java.lang.Object)>($r30);

        $i0 = interfaceinvoke $r3.<java.awt.geom.PathIterator: int currentSegment(float[])>(r7);

        tableswitch($i0)
        {
            case 0: goto label02;
            case 1: goto label03;
            case 2: goto label05;
            case 3: goto label05;
            case 4: goto label04;
            default: goto label05;
        };

     label02:
        $r16 = r0.<org.apache.batik.ext.awt.geom.PathLength: java.util.List segments>;

        $r31 = new org.apache.batik.ext.awt.geom.PathLength$PathSegment;

        $f12 = r7[0];

        $f11 = r7[1];

        $f10 = r0.<org.apache.batik.ext.awt.geom.PathLength: float pathLength>;

        specialinvoke $r31.<org.apache.batik.ext.awt.geom.PathLength$PathSegment: void <init>(int,float,float,float,int)>($i0, $f12, $f11, $f10, i6);

        interfaceinvoke $r16.<java.util.List: boolean add(java.lang.Object)>($r31);

        f22 = r7[0];

        f23 = r7[1];

        f20 = f22;

        f21 = f23;

        i5 = i5 + 1;

        interfaceinvoke $r3.<java.awt.geom.PathIterator: void next()>();

        goto label09;

     label03:
        $f3 = r0.<org.apache.batik.ext.awt.geom.PathLength: float pathLength>;

        $d11 = (double) $f3;

        $d10 = (double) f22;

        $d9 = (double) f23;

        $f4 = r7[0];

        $d8 = (double) $f4;

        $f5 = r7[1];

        $d7 = (double) $f5;

        $d12 = staticinvoke <java.awt.geom.Point2D: double distance(double,double,double,double)>($d10, $d9, $d8, $d7);

        $d13 = $d11 + $d12;

        $f6 = (float) $d13;

        r0.<org.apache.batik.ext.awt.geom.PathLength: float pathLength> = $f6;

        $r14 = r0.<org.apache.batik.ext.awt.geom.PathLength: java.util.List segments>;

        $r32 = new org.apache.batik.ext.awt.geom.PathLength$PathSegment;

        $f9 = r7[0];

        $f8 = r7[1];

        $f7 = r0.<org.apache.batik.ext.awt.geom.PathLength: float pathLength>;

        specialinvoke $r32.<org.apache.batik.ext.awt.geom.PathLength$PathSegment: void <init>(int,float,float,float,int)>($i0, $f9, $f8, $f7, i6);

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>($r32);

        f22 = r7[0];

        f23 = r7[1];

        i5 = i5 + 1;

        interfaceinvoke $r3.<java.awt.geom.PathIterator: void next()>();

        goto label09;

     label04:
        $f0 = r0.<org.apache.batik.ext.awt.geom.PathLength: float pathLength>;

        $d4 = (double) $f0;

        $d3 = (double) f22;

        $d2 = (double) f23;

        $d1 = (double) f20;

        $d0 = (double) f21;

        $d5 = staticinvoke <java.awt.geom.Point2D: double distance(double,double,double,double)>($d3, $d2, $d1, $d0);

        $d6 = $d4 + $d5;

        $f1 = (float) $d6;

        r0.<org.apache.batik.ext.awt.geom.PathLength: float pathLength> = $f1;

        $r12 = r0.<org.apache.batik.ext.awt.geom.PathLength: java.util.List segments>;

        $r33 = new org.apache.batik.ext.awt.geom.PathLength$PathSegment;

        $f2 = r0.<org.apache.batik.ext.awt.geom.PathLength: float pathLength>;

        specialinvoke $r33.<org.apache.batik.ext.awt.geom.PathLength$PathSegment: void <init>(int,float,float,float,int)>(1, f20, f21, $f2, i6);

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r33);

        f22 = f20;

        f23 = f21;

        i5 = i5 + 1;

        interfaceinvoke $r3.<java.awt.geom.PathIterator: void next()>();

        goto label09;

     label05:
        $d15 = (double) f22;

        $d14 = (double) f23;

        virtualinvoke $r26.<org.apache.batik.ext.awt.geom.PathLength$SingleSegmentPathIterator: void setPathIterator(java.awt.geom.PathIterator,double,double)>($r3, $d15, $d14);

        $r34 = new java.awt.geom.FlatteningPathIterator;

        specialinvoke $r34.<java.awt.geom.FlatteningPathIterator: void <init>(java.awt.geom.PathIterator,double)>($r26, 0.009999999776482582);

        goto label08;

     label06:
        $i1 = virtualinvoke $r34.<java.awt.geom.FlatteningPathIterator: int currentSegment(float[])>(r7);

        if $i1 != 1 goto label07;

        $f13 = r0.<org.apache.batik.ext.awt.geom.PathLength: float pathLength>;

        $d20 = (double) $f13;

        $d19 = (double) f22;

        $d18 = (double) f23;

        $f14 = r7[0];

        $d17 = (double) $f14;

        $f15 = r7[1];

        $d16 = (double) $f15;

        $d21 = staticinvoke <java.awt.geom.Point2D: double distance(double,double,double,double)>($d19, $d18, $d17, $d16);

        $d22 = $d20 + $d21;

        $f16 = (float) $d22;

        r0.<org.apache.batik.ext.awt.geom.PathLength: float pathLength> = $f16;

        $r19 = r0.<org.apache.batik.ext.awt.geom.PathLength: java.util.List segments>;

        $r35 = new org.apache.batik.ext.awt.geom.PathLength$PathSegment;

        $f19 = r7[0];

        $f18 = r7[1];

        $f17 = r0.<org.apache.batik.ext.awt.geom.PathLength: float pathLength>;

        specialinvoke $r35.<org.apache.batik.ext.awt.geom.PathLength$PathSegment: void <init>(int,float,float,float,int)>($i1, $f19, $f18, $f17, i6);

        interfaceinvoke $r19.<java.util.List: boolean add(java.lang.Object)>($r35);

        f22 = r7[0];

        f23 = r7[1];

        i5 = i5 + 1;

     label07:
        virtualinvoke $r34.<java.awt.geom.FlatteningPathIterator: void next()>();

     label08:
        $z0 = virtualinvoke $r34.<java.awt.geom.FlatteningPathIterator: boolean isDone()>();

        if $z0 == 0 goto label06;

     label09:
        $z1 = interfaceinvoke $r3.<java.awt.geom.PathIterator: boolean isDone()>();

        if $z1 == 0 goto label01;

        $i2 = interfaceinvoke $r28.<java.util.List: int size()>();

        $r20 = newarray (int)[$i2];

        r0.<org.apache.batik.ext.awt.geom.PathLength: int[] segmentIndexes> = $r20;

        i7 = 0;

        goto label11;

     label10:
        $r22 = r0.<org.apache.batik.ext.awt.geom.PathLength: int[] segmentIndexes>;

        $r23 = interfaceinvoke $r28.<java.util.List: java.lang.Object get(int)>(i7);

        $r24 = (java.lang.Integer) $r23;

        $i4 = virtualinvoke $r24.<java.lang.Integer: int intValue()>();

        $r22[i7] = $i4;

        i7 = i7 + 1;

     label11:
        $r21 = r0.<org.apache.batik.ext.awt.geom.PathLength: int[] segmentIndexes>;

        $i3 = lengthof $r21;

        if i7 < $i3 goto label10;

        r0.<org.apache.batik.ext.awt.geom.PathLength: boolean initialised> = 1;

        return;
    }

    public int getNumberOfSegments()
    {
        org.apache.batik.ext.awt.geom.PathLength r0;
        int[] $r1;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.geom.PathLength;

        $z0 = r0.<org.apache.batik.ext.awt.geom.PathLength: boolean initialised>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.apache.batik.ext.awt.geom.PathLength: void initialise()>();

     label1:
        $r1 = r0.<org.apache.batik.ext.awt.geom.PathLength: int[] segmentIndexes>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public float getLengthAtSegment(int)
    {
        org.apache.batik.ext.awt.geom.PathLength r0;
        org.apache.batik.ext.awt.geom.PathLength$PathSegment r5;
        java.util.List $r3;
        int[] $r1, $r2;
        int i0, $i1, $i2;
        float $f0, $f1;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.geom.PathLength;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.batik.ext.awt.geom.PathLength: boolean initialised>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.apache.batik.ext.awt.geom.PathLength: void initialise()>();

     label1:
        if i0 > 0 goto label2;

        return 0.0F;

     label2:
        $r1 = r0.<org.apache.batik.ext.awt.geom.PathLength: int[] segmentIndexes>;

        $i1 = lengthof $r1;

        if i0 < $i1 goto label3;

        $f1 = r0.<org.apache.batik.ext.awt.geom.PathLength: float pathLength>;

        return $f1;

     label3:
        $r3 = r0.<org.apache.batik.ext.awt.geom.PathLength: java.util.List segments>;

        $r2 = r0.<org.apache.batik.ext.awt.geom.PathLength: int[] segmentIndexes>;

        $i2 = $r2[i0];

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i2);

        r5 = (org.apache.batik.ext.awt.geom.PathLength$PathSegment) $r4;

        $f0 = virtualinvoke r5.<org.apache.batik.ext.awt.geom.PathLength$PathSegment: float getLength()>();

        return $f0;
    }

    public int segmentAtLength(float)
    {
        org.apache.batik.ext.awt.geom.PathLength r0;
        org.apache.batik.ext.awt.geom.PathLength$PathSegment r5, r6;
        java.util.List $r1, $r3;
        int $i0, $i1, $i2, $i3, $i5, $i7;
        float f0;
        java.lang.Object $r2, $r4;

        r0 := @this: org.apache.batik.ext.awt.geom.PathLength;

        f0 := @parameter0: float;

        $i0 = virtualinvoke r0.<org.apache.batik.ext.awt.geom.PathLength: int findUpperIndex(float)>(f0);

        $i5 = (int) -1;

        if $i0 != $i5 goto label1;

        $i7 = (int) -1;

        return $i7;

     label1:
        if $i0 != 0 goto label2;

        $r3 = r0.<org.apache.batik.ext.awt.geom.PathLength: java.util.List segments>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i0);

        r5 = (org.apache.batik.ext.awt.geom.PathLength$PathSegment) $r4;

        $i3 = virtualinvoke r5.<org.apache.batik.ext.awt.geom.PathLength$PathSegment: int getIndex()>();

        return $i3;

     label2:
        $r1 = r0.<org.apache.batik.ext.awt.geom.PathLength: java.util.List segments>;

        $i1 = $i0 - 1;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i1);

        r6 = (org.apache.batik.ext.awt.geom.PathLength$PathSegment) $r2;

        $i2 = virtualinvoke r6.<org.apache.batik.ext.awt.geom.PathLength$PathSegment: int getIndex()>();

        return $i2;
    }

    public java.awt.geom.Point2D pointAtLength(int, float)
    {
        java.awt.geom.Point2D $r9;
        org.apache.batik.ext.awt.geom.PathLength$PathSegment r10, r11;
        int[] $r1, $r2, $r5, $r6;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0;
        org.apache.batik.ext.awt.geom.PathLength r0;
        java.util.List $r3, $r7;
        float $f0, f1, $f2, $f3, $f4, f5;
        java.lang.Object $r4, $r8;

        r0 := @this: org.apache.batik.ext.awt.geom.PathLength;

        i0 := @parameter0: int;

        f1 := @parameter1: float;

        $z0 = r0.<org.apache.batik.ext.awt.geom.PathLength: boolean initialised>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.apache.batik.ext.awt.geom.PathLength: void initialise()>();

     label1:
        if i0 < 0 goto label2;

        $r1 = r0.<org.apache.batik.ext.awt.geom.PathLength: int[] segmentIndexes>;

        $i1 = lengthof $r1;

        if i0 < $i1 goto label3;

     label2:
        return null;

     label3:
        $r3 = r0.<org.apache.batik.ext.awt.geom.PathLength: java.util.List segments>;

        $r2 = r0.<org.apache.batik.ext.awt.geom.PathLength: int[] segmentIndexes>;

        $i2 = $r2[i0];

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i2);

        r10 = (org.apache.batik.ext.awt.geom.PathLength$PathSegment) $r4;

        $f0 = virtualinvoke r10.<org.apache.batik.ext.awt.geom.PathLength$PathSegment: float getLength()>();

        $r5 = r0.<org.apache.batik.ext.awt.geom.PathLength: int[] segmentIndexes>;

        $i3 = lengthof $r5;

        $i4 = $i3 - 1;

        if i0 != $i4 goto label4;

        f5 = r0.<org.apache.batik.ext.awt.geom.PathLength: float pathLength>;

        goto label5;

     label4:
        $r7 = r0.<org.apache.batik.ext.awt.geom.PathLength: java.util.List segments>;

        $r6 = r0.<org.apache.batik.ext.awt.geom.PathLength: int[] segmentIndexes>;

        $i5 = i0 + 1;

        $i6 = $r6[$i5];

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>($i6);

        r11 = (org.apache.batik.ext.awt.geom.PathLength$PathSegment) $r8;

        f5 = virtualinvoke r11.<org.apache.batik.ext.awt.geom.PathLength$PathSegment: float getLength()>();

     label5:
        $f2 = f5 - $f0;

        $f3 = $f2 * f1;

        $f4 = $f0 + $f3;

        $r9 = virtualinvoke r0.<org.apache.batik.ext.awt.geom.PathLength: java.awt.geom.Point2D pointAtLength(float)>($f4);

        return $r9;
    }

    public java.awt.geom.Point2D pointAtLength(float)
    {
        org.apache.batik.ext.awt.geom.PathLength$PathSegment r3, r6;
        java.util.List $r1, $r4;
        float f0, $f1, f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, f10, $f11, f12, $f13, $f14;
        int $i0, $i1, $i3;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12;
        org.apache.batik.ext.awt.geom.PathLength r0;
        java.awt.geom.Point2D$Float $r9, $r10;
        java.lang.Object $r2, $r5;

        r0 := @this: org.apache.batik.ext.awt.geom.PathLength;

        f0 := @parameter0: float;

        $i0 = virtualinvoke r0.<org.apache.batik.ext.awt.geom.PathLength: int findUpperIndex(float)>(f0);

        $i3 = (int) -1;

        if $i0 != $i3 goto label1;

        return null;

     label1:
        $r1 = r0.<org.apache.batik.ext.awt.geom.PathLength: java.util.List segments>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        r3 = (org.apache.batik.ext.awt.geom.PathLength$PathSegment) $r2;

        if $i0 != 0 goto label2;

        $r9 = new java.awt.geom.Point2D$Float;

        $f13 = virtualinvoke r3.<org.apache.batik.ext.awt.geom.PathLength$PathSegment: float getX()>();

        $f14 = virtualinvoke r3.<org.apache.batik.ext.awt.geom.PathLength$PathSegment: float getY()>();

        specialinvoke $r9.<java.awt.geom.Point2D$Float: void <init>(float,float)>($f13, $f14);

        return $r9;

     label2:
        $r4 = r0.<org.apache.batik.ext.awt.geom.PathLength: java.util.List segments>;

        $i1 = $i0 - 1;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i1);

        r6 = (org.apache.batik.ext.awt.geom.PathLength$PathSegment) $r5;

        $f1 = virtualinvoke r6.<org.apache.batik.ext.awt.geom.PathLength$PathSegment: float getLength()>();

        f2 = f0 - $f1;

        $f3 = virtualinvoke r3.<org.apache.batik.ext.awt.geom.PathLength$PathSegment: float getY()>();

        $f4 = virtualinvoke r6.<org.apache.batik.ext.awt.geom.PathLength$PathSegment: float getY()>();

        $f5 = $f3 - $f4;

        $d0 = (double) $f5;

        $f6 = virtualinvoke r3.<org.apache.batik.ext.awt.geom.PathLength$PathSegment: float getX()>();

        $f7 = virtualinvoke r6.<org.apache.batik.ext.awt.geom.PathLength$PathSegment: float getX()>();

        $f8 = $f6 - $f7;

        $d1 = (double) $f8;

        $d2 = staticinvoke <java.lang.Math: double atan2(double,double)>($d0, $d1);

        $f9 = virtualinvoke r6.<org.apache.batik.ext.awt.geom.PathLength$PathSegment: float getX()>();

        $d3 = (double) $f9;

        $d4 = (double) f2;

        $d5 = staticinvoke <java.lang.Math: double cos(double)>($d2);

        $d6 = $d4 * $d5;

        $d7 = $d3 + $d6;

        f10 = (float) $d7;

        $f11 = virtualinvoke r6.<org.apache.batik.ext.awt.geom.PathLength$PathSegment: float getY()>();

        $d8 = (double) $f11;

        $d9 = (double) f2;

        $d10 = staticinvoke <java.lang.Math: double sin(double)>($d2);

        $d11 = $d9 * $d10;

        $d12 = $d8 + $d11;

        f12 = (float) $d12;

        $r10 = new java.awt.geom.Point2D$Float;

        specialinvoke $r10.<java.awt.geom.Point2D$Float: void <init>(float,float)>(f10, f12);

        return $r10;
    }

    public float angleAtLength(int, float)
    {
        org.apache.batik.ext.awt.geom.PathLength$PathSegment r9, r10;
        int[] $r1, $r2, $r5, $r6;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0;
        org.apache.batik.ext.awt.geom.PathLength r0;
        java.util.List $r3, $r7;
        float $f0, f1, $f2, $f3, $f4, $f5, f6;
        java.lang.Object $r4, $r8;

        r0 := @this: org.apache.batik.ext.awt.geom.PathLength;

        i0 := @parameter0: int;

        f1 := @parameter1: float;

        $z0 = r0.<org.apache.batik.ext.awt.geom.PathLength: boolean initialised>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.apache.batik.ext.awt.geom.PathLength: void initialise()>();

     label1:
        if i0 < 0 goto label2;

        $r1 = r0.<org.apache.batik.ext.awt.geom.PathLength: int[] segmentIndexes>;

        $i1 = lengthof $r1;

        if i0 < $i1 goto label3;

     label2:
        return 0.0F;

     label3:
        $r3 = r0.<org.apache.batik.ext.awt.geom.PathLength: java.util.List segments>;

        $r2 = r0.<org.apache.batik.ext.awt.geom.PathLength: int[] segmentIndexes>;

        $i2 = $r2[i0];

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i2);

        r9 = (org.apache.batik.ext.awt.geom.PathLength$PathSegment) $r4;

        $f0 = virtualinvoke r9.<org.apache.batik.ext.awt.geom.PathLength$PathSegment: float getLength()>();

        $r5 = r0.<org.apache.batik.ext.awt.geom.PathLength: int[] segmentIndexes>;

        $i3 = lengthof $r5;

        $i4 = $i3 - 1;

        if i0 != $i4 goto label4;

        f6 = r0.<org.apache.batik.ext.awt.geom.PathLength: float pathLength>;

        goto label5;

     label4:
        $r7 = r0.<org.apache.batik.ext.awt.geom.PathLength: java.util.List segments>;

        $r6 = r0.<org.apache.batik.ext.awt.geom.PathLength: int[] segmentIndexes>;

        $i5 = i0 + 1;

        $i6 = $r6[$i5];

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>($i6);

        r10 = (org.apache.batik.ext.awt.geom.PathLength$PathSegment) $r8;

        f6 = virtualinvoke r10.<org.apache.batik.ext.awt.geom.PathLength$PathSegment: float getLength()>();

     label5:
        $f2 = f6 - $f0;

        $f3 = $f2 * f1;

        $f4 = $f0 + $f3;

        $f5 = virtualinvoke r0.<org.apache.batik.ext.awt.geom.PathLength: float angleAtLength(float)>($f4);

        return $f5;
    }

    public float angleAtLength(float)
    {
        org.apache.batik.ext.awt.geom.PathLength$PathSegment r3, $r6;
        int $i0, $i1, i2, $i4;
        double $d0, $d1, $d2;
        org.apache.batik.ext.awt.geom.PathLength r0;
        java.util.List $r1, $r4;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        java.lang.Object $r2, $r5;

        r0 := @this: org.apache.batik.ext.awt.geom.PathLength;

        f0 := @parameter0: float;

        $i0 = virtualinvoke r0.<org.apache.batik.ext.awt.geom.PathLength: int findUpperIndex(float)>(f0);

        i2 = $i0;

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        return 0.0F;

     label1:
        $r1 = r0.<org.apache.batik.ext.awt.geom.PathLength: java.util.List segments>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        r3 = (org.apache.batik.ext.awt.geom.PathLength$PathSegment) $r2;

        if $i0 != 0 goto label2;

        i2 = 1;

     label2:
        $r4 = r0.<org.apache.batik.ext.awt.geom.PathLength: java.util.List segments>;

        $i1 = i2 - 1;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i1);

        $r6 = (org.apache.batik.ext.awt.geom.PathLength$PathSegment) $r5;

        $f1 = virtualinvoke r3.<org.apache.batik.ext.awt.geom.PathLength$PathSegment: float getY()>();

        $f2 = virtualinvoke $r6.<org.apache.batik.ext.awt.geom.PathLength$PathSegment: float getY()>();

        $f3 = $f1 - $f2;

        $d0 = (double) $f3;

        $f4 = virtualinvoke r3.<org.apache.batik.ext.awt.geom.PathLength$PathSegment: float getX()>();

        $f5 = virtualinvoke $r6.<org.apache.batik.ext.awt.geom.PathLength$PathSegment: float getX()>();

        $f6 = $f4 - $f5;

        $d1 = (double) $f6;

        $d2 = staticinvoke <java.lang.Math: double atan2(double,double)>($d0, $d1);

        $f7 = (float) $d2;

        return $f7;
    }

    public int findUpperIndex(float)
    {
        org.apache.batik.ext.awt.geom.PathLength$PathSegment r9, $r11, r12;
        byte $b0, $b1, $b4, $b7;
        boolean $z0;
        java.util.List $r1, $r2, $r4, $r6, $r7, $r10;
        float f0, $f1, $f2, $f3;
        int $i2, $i3, $i5, $i6, $i8, $i9, $i10, i11, i12, i13, i14, i15, $i16, $i17, $i19, $i20, $i22, $i23;
        org.apache.batik.ext.awt.geom.PathLength r0;
        java.lang.Object $r3, $r5, $r8;

        r0 := @this: org.apache.batik.ext.awt.geom.PathLength;

        f0 := @parameter0: float;

        $z0 = r0.<org.apache.batik.ext.awt.geom.PathLength: boolean initialised>;

        if $z0 != 0 goto label01;

        virtualinvoke r0.<org.apache.batik.ext.awt.geom.PathLength: void initialise()>();

     label01:
        $b0 = f0 cmpg 0.0F;

        $i16 = (int) $b0;

        if $i16 < 0 goto label02;

        $f1 = r0.<org.apache.batik.ext.awt.geom.PathLength: float pathLength>;

        $b1 = f0 cmpl $f1;

        $i17 = (int) $b1;

        if $i17 <= 0 goto label03;

     label02:
        $i19 = (int) -1;

        return $i19;

     label03:
        i11 = 0;

        $r1 = r0.<org.apache.batik.ext.awt.geom.PathLength: java.util.List segments>;

        $i2 = interfaceinvoke $r1.<java.util.List: int size()>();

        i12 = $i2 - 1;

        goto label06;

     label04:
        $i3 = i11 + i12;

        i13 = $i3 >> 1;

        $r2 = r0.<org.apache.batik.ext.awt.geom.PathLength: java.util.List segments>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i13);

        r12 = (org.apache.batik.ext.awt.geom.PathLength$PathSegment) $r3;

        $f2 = virtualinvoke r12.<org.apache.batik.ext.awt.geom.PathLength$PathSegment: float getLength()>();

        $b4 = $f2 cmpl f0;

        $i20 = (int) $b4;

        if $i20 < 0 goto label05;

        i12 = i13;

        goto label06;

     label05:
        i11 = i13 + 1;

     label06:
        if i11 != i12 goto label04;

        goto label07;

     label07:
        $r4 = r0.<org.apache.batik.ext.awt.geom.PathLength: java.util.List segments>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i12);

        $r11 = (org.apache.batik.ext.awt.geom.PathLength$PathSegment) $r5;

        $i5 = virtualinvoke $r11.<org.apache.batik.ext.awt.geom.PathLength$PathSegment: int getSegType()>();

        if $i5 != 0 goto label09;

        $r10 = r0.<org.apache.batik.ext.awt.geom.PathLength: java.util.List segments>;

        $i9 = interfaceinvoke $r10.<java.util.List: int size()>();

        $i10 = $i9 - 1;

        if i12 != $i10 goto label08;

        goto label09;

     label08:
        i12 = i12 + 1;

        goto label07;

     label09:
        $i22 = (int) -1;

        i14 = $i22;

        i15 = 0;

        $r6 = r0.<org.apache.batik.ext.awt.geom.PathLength: java.util.List segments>;

        $i6 = interfaceinvoke $r6.<java.util.List: int size()>();

        goto label12;

     label10:
        $r7 = r0.<org.apache.batik.ext.awt.geom.PathLength: java.util.List segments>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(i15);

        r9 = (org.apache.batik.ext.awt.geom.PathLength$PathSegment) $r8;

        $f3 = virtualinvoke r9.<org.apache.batik.ext.awt.geom.PathLength$PathSegment: float getLength()>();

        $b7 = $f3 cmpl f0;

        $i23 = (int) $b7;

        if $i23 < 0 goto label11;

        $i8 = virtualinvoke r9.<org.apache.batik.ext.awt.geom.PathLength$PathSegment: int getSegType()>();

        if $i8 == 0 goto label11;

        i14 = i15;

     label11:
        i15 = i15 + 1;

     label12:
        if i14 > 0 goto label13;

        if i15 < $i6 goto label10;

     label13:
        return i14;
    }
}
