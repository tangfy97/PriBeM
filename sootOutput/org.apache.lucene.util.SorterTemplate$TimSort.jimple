class org.apache.lucene.util.SorterTemplate$TimSort extends java.lang.Object
{
    final int hi;
    final int minRun;
    final int[] runEnds;
    int stackSize;
    static final boolean $assertionsDisabled;
    final org.apache.lucene.util.SorterTemplate this$0;

    void <init>(org.apache.lucene.util.SorterTemplate, int, int)
    {
        org.apache.lucene.util.SorterTemplate r1;
        java.lang.AssertionError $r4;
        int[] $r2, $r3;
        int i0, i1, $i2, $i3, $i4;
        org.apache.lucene.util.SorterTemplate$TimSort r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.SorterTemplate$TimSort;

        r1 := @parameter0: org.apache.lucene.util.SorterTemplate;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r0.<org.apache.lucene.util.SorterTemplate$TimSort: org.apache.lucene.util.SorterTemplate this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = <org.apache.lucene.util.SorterTemplate$TimSort: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i1 > i0 goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label1:
        $r2 = newarray (int)[41];

        r0.<org.apache.lucene.util.SorterTemplate$TimSort: int[] runEnds> = $r2;

        $r3 = r0.<org.apache.lucene.util.SorterTemplate$TimSort: int[] runEnds>;

        $r3[0] = i0;

        r0.<org.apache.lucene.util.SorterTemplate$TimSort: int stackSize> = 0;

        r0.<org.apache.lucene.util.SorterTemplate$TimSort: int hi> = i1;

        $i2 = i1 - i0;

        $i3 = $i2 + 1;

        $i4 = virtualinvoke r0.<org.apache.lucene.util.SorterTemplate$TimSort: int minRun(int)>($i3);

        r0.<org.apache.lucene.util.SorterTemplate$TimSort: int minRun> = $i4;

        return;
    }

    int minRun(int)
    {
        java.lang.AssertionError $r0, $r1;
        int i0, i1, $i2, i3, i4;
        org.apache.lucene.util.SorterTemplate$TimSort r2;
        boolean $z0, $z1;

        r2 := @this: org.apache.lucene.util.SorterTemplate$TimSort;

        i0 := @parameter0: int;

        $z0 = <org.apache.lucene.util.SorterTemplate$TimSort: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 >= 32 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        i3 = i0;

        i4 = 0;

     label2:
        if i3 < 64 goto label3;

        $i2 = i3 & 1;

        i4 = i4 | $i2;

        i3 = i3 >>> 1;

        goto label2;

     label3:
        i1 = i3 + i4;

        $z1 = <org.apache.lucene.util.SorterTemplate$TimSort: boolean $assertionsDisabled>;

        if $z1 != 0 goto label5;

        if i1 < 32 goto label4;

        if i1 <= 64 goto label5;

     label4:
        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label5:
        return i1;
    }

    int runLen(int)
    {
        int[] $r1, $r2;
        int i0, $i1, i2, $i3, $i4, $i5, $i6;
        org.apache.lucene.util.SorterTemplate$TimSort r0;

        r0 := @this: org.apache.lucene.util.SorterTemplate$TimSort;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.lucene.util.SorterTemplate$TimSort: int stackSize>;

        i2 = $i1 - i0;

        $r1 = r0.<org.apache.lucene.util.SorterTemplate$TimSort: int[] runEnds>;

        $i5 = $r1[i2];

        $r2 = r0.<org.apache.lucene.util.SorterTemplate$TimSort: int[] runEnds>;

        $i3 = i2 - 1;

        $i4 = $r2[$i3];

        $i6 = $i5 - $i4;

        return $i6;
    }

    int runBase(int)
    {
        int[] $r1;
        int i0, $i1, $i2, $i3, $i4;
        org.apache.lucene.util.SorterTemplate$TimSort r0;

        r0 := @this: org.apache.lucene.util.SorterTemplate$TimSort;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.util.SorterTemplate$TimSort: int[] runEnds>;

        $i1 = r0.<org.apache.lucene.util.SorterTemplate$TimSort: int stackSize>;

        $i2 = $i1 - i0;

        $i3 = $i2 - 1;

        $i4 = $r1[$i3];

        return $i4;
    }

    int runEnd(int)
    {
        int[] $r1;
        int i0, $i1, $i2, $i3;
        org.apache.lucene.util.SorterTemplate$TimSort r0;

        r0 := @this: org.apache.lucene.util.SorterTemplate$TimSort;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.util.SorterTemplate$TimSort: int[] runEnds>;

        $i1 = r0.<org.apache.lucene.util.SorterTemplate$TimSort: int stackSize>;

        $i2 = $i1 - i0;

        $i3 = $r1[$i2];

        return $i3;
    }

    void setRunEnd(int, int)
    {
        int[] $r1;
        int i0, $i1, i2, $i3;
        org.apache.lucene.util.SorterTemplate$TimSort r0;

        r0 := @this: org.apache.lucene.util.SorterTemplate$TimSort;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        $r1 = r0.<org.apache.lucene.util.SorterTemplate$TimSort: int[] runEnds>;

        $i1 = r0.<org.apache.lucene.util.SorterTemplate$TimSort: int stackSize>;

        $i3 = $i1 - i0;

        $r1[$i3] = i2;

        return;
    }

    void pushRunLen(int)
    {
        int[] $r1, $r2;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7;
        org.apache.lucene.util.SorterTemplate$TimSort r0;

        r0 := @this: org.apache.lucene.util.SorterTemplate$TimSort;

        i2 := @parameter0: int;

        $r2 = r0.<org.apache.lucene.util.SorterTemplate$TimSort: int[] runEnds>;

        $i0 = r0.<org.apache.lucene.util.SorterTemplate$TimSort: int stackSize>;

        $i5 = $i0 + 1;

        $r1 = r0.<org.apache.lucene.util.SorterTemplate$TimSort: int[] runEnds>;

        $i1 = r0.<org.apache.lucene.util.SorterTemplate$TimSort: int stackSize>;

        $i3 = $r1[$i1];

        $i4 = $i3 + i2;

        $r2[$i5] = $i4;

        $i6 = r0.<org.apache.lucene.util.SorterTemplate$TimSort: int stackSize>;

        $i7 = $i6 + 1;

        r0.<org.apache.lucene.util.SorterTemplate$TimSort: int stackSize> = $i7;

        return;
    }

    void mergeAt(int)
    {
        java.lang.AssertionError $r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, $i15;
        org.apache.lucene.util.SorterTemplate$TimSort r0;
        boolean $z0;
        org.apache.lucene.util.SorterTemplate $r1;

        r0 := @this: org.apache.lucene.util.SorterTemplate$TimSort;

        i0 := @parameter0: int;

        $z0 = <org.apache.lucene.util.SorterTemplate$TimSort: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i12 = r0.<org.apache.lucene.util.SorterTemplate$TimSort: int stackSize>;

        $i11 = i0 + 1;

        if $i12 > $i11 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        $i1 = i0 + 1;

        $i2 = virtualinvoke r0.<org.apache.lucene.util.SorterTemplate$TimSort: int runBase(int)>($i1);

        $i3 = virtualinvoke r0.<org.apache.lucene.util.SorterTemplate$TimSort: int runBase(int)>(i0);

        $i4 = virtualinvoke r0.<org.apache.lucene.util.SorterTemplate$TimSort: int runEnd(int)>(i0);

        $r1 = r0.<org.apache.lucene.util.SorterTemplate$TimSort: org.apache.lucene.util.SorterTemplate this$0>;

        $i6 = $i3 - $i2;

        $i5 = $i4 - $i3;

        staticinvoke <org.apache.lucene.util.SorterTemplate: void access$000(org.apache.lucene.util.SorterTemplate,int,int,int,int,int)>($r1, $i2, $i3, $i4, $i6, $i5);

        i13 = i0 + 1;

     label2:
        if i13 <= 0 goto label3;

        $i9 = i13 - 1;

        $i10 = virtualinvoke r0.<org.apache.lucene.util.SorterTemplate$TimSort: int runEnd(int)>($i9);

        virtualinvoke r0.<org.apache.lucene.util.SorterTemplate$TimSort: void setRunEnd(int,int)>(i13, $i10);

        $i15 = (int) -1;

        i13 = i13 + $i15;

        goto label2;

     label3:
        $i7 = r0.<org.apache.lucene.util.SorterTemplate$TimSort: int stackSize>;

        $i8 = $i7 - 1;

        r0.<org.apache.lucene.util.SorterTemplate$TimSort: int stackSize> = $i8;

        return;
    }

    int nextRun()
    {
        org.apache.lucene.util.SorterTemplate $r1, $r2, $r3, $r4, $r5, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, i41, i42;
        org.apache.lucene.util.SorterTemplate$TimSort r0;

        r0 := @this: org.apache.lucene.util.SorterTemplate$TimSort;

        $i0 = virtualinvoke r0.<org.apache.lucene.util.SorterTemplate$TimSort: int runEnd(int)>(0);

        $i1 = r0.<org.apache.lucene.util.SorterTemplate$TimSort: int hi>;

        if $i0 != $i1 goto label1;

        return 1;

     label1:
        i41 = 1;

        $r1 = r0.<org.apache.lucene.util.SorterTemplate$TimSort: org.apache.lucene.util.SorterTemplate this$0>;

        $i2 = $i0 + 1;

        $i3 = virtualinvoke $r1.<org.apache.lucene.util.SorterTemplate: int compare(int,int)>($i0, $i2);

        if $i3 <= 0 goto label7;

     label2:
        $i21 = $i0 + i41;

        $i20 = r0.<org.apache.lucene.util.SorterTemplate$TimSort: int hi>;

        if $i21 > $i20 goto label3;

        $r6 = r0.<org.apache.lucene.util.SorterTemplate$TimSort: org.apache.lucene.util.SorterTemplate this$0>;

        $i37 = $i0 + i41;

        $i39 = $i37 - 1;

        $i38 = $i0 + i41;

        $i40 = virtualinvoke $r6.<org.apache.lucene.util.SorterTemplate: int compare(int,int)>($i39, $i38);

        if $i40 <= 0 goto label3;

        i41 = i41 + 1;

        goto label2;

     label3:
        $i22 = r0.<org.apache.lucene.util.SorterTemplate$TimSort: int minRun>;

        if i41 >= $i22 goto label4;

        $i28 = $i0 + i41;

        $i27 = r0.<org.apache.lucene.util.SorterTemplate$TimSort: int hi>;

        if $i28 > $i27 goto label4;

        $i30 = r0.<org.apache.lucene.util.SorterTemplate$TimSort: int hi>;

        $i31 = $i30 - $i0;

        $i33 = $i31 + 1;

        $i32 = r0.<org.apache.lucene.util.SorterTemplate$TimSort: int minRun>;

        $i34 = staticinvoke <java.lang.Math: int min(int,int)>($i33, $i32);

        i41 = $i34;

        $r5 = r0.<org.apache.lucene.util.SorterTemplate$TimSort: org.apache.lucene.util.SorterTemplate this$0>;

        $i35 = $i0 + $i34;

        $i36 = $i35 - 1;

        virtualinvoke $r5.<org.apache.lucene.util.SorterTemplate: void binarySort(int,int)>($i0, $i36);

        goto label9;

     label4:
        i42 = 0;

        $i29 = i41 >>> 1;

     label5:
        if i42 >= $i29 goto label6;

        $r4 = r0.<org.apache.lucene.util.SorterTemplate$TimSort: org.apache.lucene.util.SorterTemplate this$0>;

        $i26 = $i0 + i42;

        $i23 = $i0 + i41;

        $i24 = $i23 - i42;

        $i25 = $i24 - 1;

        virtualinvoke $r4.<org.apache.lucene.util.SorterTemplate: void swap(int,int)>($i26, $i25);

        i42 = i42 + 1;

        goto label5;

     label6:
        goto label9;

     label7:
        $i5 = $i0 + i41;

        $i4 = r0.<org.apache.lucene.util.SorterTemplate$TimSort: int hi>;

        if $i5 > $i4 goto label8;

        $r3 = r0.<org.apache.lucene.util.SorterTemplate$TimSort: org.apache.lucene.util.SorterTemplate this$0>;

        $i16 = $i0 + i41;

        $i18 = $i16 - 1;

        $i17 = $i0 + i41;

        $i19 = virtualinvoke $r3.<org.apache.lucene.util.SorterTemplate: int compare(int,int)>($i18, $i17);

        if $i19 > 0 goto label8;

        i41 = i41 + 1;

        goto label7;

     label8:
        $i6 = r0.<org.apache.lucene.util.SorterTemplate$TimSort: int minRun>;

        if i41 >= $i6 goto label9;

        $i8 = $i0 + i41;

        $i7 = r0.<org.apache.lucene.util.SorterTemplate$TimSort: int hi>;

        if $i8 > $i7 goto label9;

        $i9 = r0.<org.apache.lucene.util.SorterTemplate$TimSort: int hi>;

        $i10 = $i9 - $i0;

        $i12 = $i10 + 1;

        $i11 = r0.<org.apache.lucene.util.SorterTemplate$TimSort: int minRun>;

        $i13 = staticinvoke <java.lang.Math: int min(int,int)>($i12, $i11);

        i41 = $i13;

        $r2 = r0.<org.apache.lucene.util.SorterTemplate$TimSort: org.apache.lucene.util.SorterTemplate this$0>;

        $i14 = $i0 + $i13;

        $i15 = $i14 - 1;

        virtualinvoke $r2.<org.apache.lucene.util.SorterTemplate: void binarySort(int,int)>($i0, $i15);

     label9:
        return i41;
    }

    void ensureInvariants()
    {
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.apache.lucene.util.SorterTemplate$TimSort r0;

        r0 := @this: org.apache.lucene.util.SorterTemplate$TimSort;

     label1:
        $i5 = r0.<org.apache.lucene.util.SorterTemplate$TimSort: int stackSize>;

        if $i5 <= 1 goto label4;

        $i0 = virtualinvoke r0.<org.apache.lucene.util.SorterTemplate$TimSort: int runLen(int)>(0);

        $i1 = virtualinvoke r0.<org.apache.lucene.util.SorterTemplate$TimSort: int runLen(int)>(1);

        $i2 = r0.<org.apache.lucene.util.SorterTemplate$TimSort: int stackSize>;

        if $i2 <= 2 goto label3;

        $i3 = virtualinvoke r0.<org.apache.lucene.util.SorterTemplate$TimSort: int runLen(int)>(2);

        $i4 = $i1 + $i0;

        if $i3 > $i4 goto label3;

        if $i3 >= $i0 goto label2;

        virtualinvoke r0.<org.apache.lucene.util.SorterTemplate$TimSort: void mergeAt(int)>(1);

        goto label1;

     label2:
        virtualinvoke r0.<org.apache.lucene.util.SorterTemplate$TimSort: void mergeAt(int)>(0);

        goto label1;

     label3:
        if $i1 > $i0 goto label4;

        virtualinvoke r0.<org.apache.lucene.util.SorterTemplate$TimSort: void mergeAt(int)>(0);

        goto label1;

     label4:
        return;
    }

    void exhaustStack()
    {
        int $i0;
        org.apache.lucene.util.SorterTemplate$TimSort r0;

        r0 := @this: org.apache.lucene.util.SorterTemplate$TimSort;

     label1:
        $i0 = r0.<org.apache.lucene.util.SorterTemplate$TimSort: int stackSize>;

        if $i0 <= 1 goto label2;

        virtualinvoke r0.<org.apache.lucene.util.SorterTemplate$TimSort: void mergeAt(int)>(0);

        goto label1;

     label2:
        return;
    }

    void sort()
    {
        java.lang.AssertionError $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.apache.lucene.util.SorterTemplate$TimSort r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.SorterTemplate$TimSort;

     label1:
        virtualinvoke r0.<org.apache.lucene.util.SorterTemplate$TimSort: void ensureInvariants()>();

        $i0 = virtualinvoke r0.<org.apache.lucene.util.SorterTemplate$TimSort: int nextRun()>();

        virtualinvoke r0.<org.apache.lucene.util.SorterTemplate$TimSort: void pushRunLen(int)>($i0);

        $i1 = virtualinvoke r0.<org.apache.lucene.util.SorterTemplate$TimSort: int runEnd(int)>(0);

        $i2 = r0.<org.apache.lucene.util.SorterTemplate$TimSort: int hi>;

        if $i1 <= $i2 goto label1;

        virtualinvoke r0.<org.apache.lucene.util.SorterTemplate$TimSort: void exhaustStack()>();

        $z0 = <org.apache.lucene.util.SorterTemplate$TimSort: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $i3 = virtualinvoke r0.<org.apache.lucene.util.SorterTemplate$TimSort: int runEnd(int)>(0);

        $i4 = r0.<org.apache.lucene.util.SorterTemplate$TimSort: int hi>;

        $i5 = $i4 + 1;

        if $i3 == $i5 goto label2;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label2:
        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/SorterTemplate;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.SorterTemplate$TimSort: boolean $assertionsDisabled> = $z1;

        return;
    }
}
