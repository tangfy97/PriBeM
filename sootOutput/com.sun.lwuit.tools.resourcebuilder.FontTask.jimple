public class com.sun.lwuit.tools.resourcebuilder.FontTask extends com.sun.lwuit.tools.resourcebuilder.ResourceTask
{
    private java.lang.String charset;
    private java.io.File src;
    private int size;
    private boolean bold;
    private boolean italic;
    private boolean trueType;
    private boolean antiAliasing;
    private java.lang.String logicalName;
    private boolean createBitmap;
    private int systemFace;
    private int systemSize;
    private int systemStyle;

    public void <init>()
    {
        com.sun.lwuit.tools.resourcebuilder.FontTask r0;

        r0 := @this: com.sun.lwuit.tools.resourcebuilder.FontTask;

        specialinvoke r0.<com.sun.lwuit.tools.resourcebuilder.ResourceTask: void <init>()>();

        r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: java.lang.String charset> = " ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,;:!@/\\*()[]{}|#$%^&<>?\'\"";

        r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: int size> = 12;

        r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: boolean trueType> = 1;

        r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: boolean antiAliasing> = 1;

        r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: boolean createBitmap> = 1;

        r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: int systemFace> = 0;

        r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: int systemSize> = 0;

        r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: int systemStyle> = 0;

        return;
    }

    public void execute() throws org.apache.tools.ant.BuildException
    {
        com.sun.lwuit.tools.resourcebuilder.FontTask r0;

        r0 := @this: com.sun.lwuit.tools.resourcebuilder.FontTask;

        specialinvoke r0.<com.sun.lwuit.tools.resourcebuilder.ResourceTask: void execute()>();

        return;
    }

    public java.lang.String getIdentity()
    {
        com.sun.lwuit.tools.resourcebuilder.FontTask r0;
        boolean $z0, $z1, $z2;

        r0 := @this: com.sun.lwuit.tools.resourcebuilder.FontTask;

        $z0 = r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: boolean bold>;

        if $z0 == 0 goto label2;

        $z2 = r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: boolean italic>;

        if $z2 == 0 goto label1;

        return "-bolditalic-";

     label1:
        return "-bold-";

     label2:
        $z1 = r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: boolean italic>;

        if $z1 == 0 goto label3;

        return "-italic-";

     label3:
        return "-plain-";
    }

    public static java.lang.String generateSystemString(com.sun.lwuit.Font)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.StringBuilder $r0;
        java.lang.String $r2;
        com.sun.lwuit.Font r1;

        r1 := @parameter0: com.sun.lwuit.Font;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $i0 = virtualinvoke r1.<com.sun.lwuit.Font: int getFace()>();

        $i1 = $i0 & 32;

        if $i1 == 0 goto label1;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FACE_MONOSPACE | ");

        goto label3;

     label1:
        $i2 = virtualinvoke r1.<com.sun.lwuit.Font: int getFace()>();

        $i3 = $i2 & 64;

        if $i3 == 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FACE_PROPORTIONAL | ");

        goto label3;

     label2:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FACE_SYSTEM | ");

     label3:
        $i8 = virtualinvoke r1.<com.sun.lwuit.Font: int getStyle()>();

        $i9 = $i8 & 1;

        if $i9 == 0 goto label4;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("STYLE_BOLD | ");

        goto label6;

     label4:
        $i4 = virtualinvoke r1.<com.sun.lwuit.Font: int getStyle()>();

        $i5 = $i4 & 2;

        if $i5 == 0 goto label5;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("STYLE_ITALIC | ");

        goto label6;

     label5:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("STYLE_PLAIN | ");

     label6:
        $i10 = virtualinvoke r1.<com.sun.lwuit.Font: int getSize()>();

        $i11 = $i10 & 16;

        if $i11 == 0 goto label7;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SIZE_LARGE");

        goto label9;

     label7:
        $i6 = virtualinvoke r1.<com.sun.lwuit.Font: int getSize()>();

        $i7 = $i6 & 8;

        if $i7 == 0 goto label8;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SIZE_SMALL");

        goto label9;

     label8:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SIZE_MEDIUM");

     label9:
        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    private void parseSystemFont(java.lang.String)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i9, $i11, $i13, $i15, $i17;
        com.sun.lwuit.tools.resourcebuilder.FontTask r1;
        java.lang.String $r0, r2;

        r1 := @this: com.sun.lwuit.tools.resourcebuilder.FontTask;

        r2 := @parameter0: java.lang.String;

        $r0 = virtualinvoke r2.<java.lang.String: java.lang.String toUpperCase()>();

        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("FACE_MONOSPACE");

        $i7 = (int) -1;

        if $i0 <= $i7 goto label1;

        r1.<com.sun.lwuit.tools.resourcebuilder.FontTask: int systemFace> = 32;

        goto label3;

     label1:
        $i1 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("FACE_PROPORTIONAL");

        $i9 = (int) -1;

        if $i1 <= $i9 goto label2;

        r1.<com.sun.lwuit.tools.resourcebuilder.FontTask: int systemFace> = 64;

        goto label3;

     label2:
        r1.<com.sun.lwuit.tools.resourcebuilder.FontTask: int systemFace> = 0;

     label3:
        $i4 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("STYLE_BOLD");

        $i11 = (int) -1;

        if $i4 <= $i11 goto label4;

        r1.<com.sun.lwuit.tools.resourcebuilder.FontTask: int systemStyle> = 1;

        goto label6;

     label4:
        $i2 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("STYLE_ITALIC");

        $i13 = (int) -1;

        if $i2 <= $i13 goto label5;

        r1.<com.sun.lwuit.tools.resourcebuilder.FontTask: int systemStyle> = 2;

        goto label6;

     label5:
        r1.<com.sun.lwuit.tools.resourcebuilder.FontTask: int systemStyle> = 0;

     label6:
        $i5 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("SIZE_LARGE");

        $i15 = (int) -1;

        if $i5 <= $i15 goto label7;

        r1.<com.sun.lwuit.tools.resourcebuilder.FontTask: int systemSize> = 16;

        goto label9;

     label7:
        $i3 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("SIZE_SMALL");

        $i17 = (int) -1;

        if $i3 <= $i17 goto label8;

        r1.<com.sun.lwuit.tools.resourcebuilder.FontTask: int systemSize> = 8;

        goto label9;

     label8:
        r1.<com.sun.lwuit.tools.resourcebuilder.FontTask: int systemSize> = 0;

     label9:
        return;
    }

    public java.lang.String getFontName()
    {
        java.io.File $r2;
        int $i0;
        com.sun.lwuit.tools.resourcebuilder.FontTask r0;
        java.lang.String $r1, $r3, $r4, $r5, $r6, $r7;

        r0 := @this: com.sun.lwuit.tools.resourcebuilder.FontTask;

        $r1 = r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: java.lang.String logicalName>;

        if $r1 == null goto label1;

        $r6 = r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: java.lang.String logicalName>;

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String replace(char,char)>(45, 95);

        return $r7;

     label1:
        $r2 = r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: java.io.File src>;

        $r3 = virtualinvoke $r2.<java.io.File: java.lang.String getName()>();

        $i0 = virtualinvoke $r3.<java.lang.String: int lastIndexOf(int)>(46);

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String replace(char,char)>(45, 95);

        return $r5;
    }

    public java.lang.String getCharset()
    {
        com.sun.lwuit.tools.resourcebuilder.FontTask r0;
        java.lang.String $r1;

        r0 := @this: com.sun.lwuit.tools.resourcebuilder.FontTask;

        $r1 = r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: java.lang.String charset>;

        return $r1;
    }

    public void setCharset(java.lang.String)
    {
        com.sun.lwuit.tools.resourcebuilder.FontTask r0;
        java.lang.String r1;

        r0 := @this: com.sun.lwuit.tools.resourcebuilder.FontTask;

        r1 := @parameter0: java.lang.String;

        r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: java.lang.String charset> = r1;

        return;
    }

    public java.io.File getSrc()
    {
        com.sun.lwuit.tools.resourcebuilder.FontTask r0;
        java.io.File $r1;

        r0 := @this: com.sun.lwuit.tools.resourcebuilder.FontTask;

        $r1 = r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: java.io.File src>;

        return $r1;
    }

    public void setSrc(java.io.File)
    {
        com.sun.lwuit.tools.resourcebuilder.FontTask r0;
        java.io.File r1;

        r0 := @this: com.sun.lwuit.tools.resourcebuilder.FontTask;

        r1 := @parameter0: java.io.File;

        r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: java.io.File src> = r1;

        return;
    }

    public int getSize()
    {
        int $i0;
        com.sun.lwuit.tools.resourcebuilder.FontTask r0;

        r0 := @this: com.sun.lwuit.tools.resourcebuilder.FontTask;

        $i0 = r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: int size>;

        return $i0;
    }

    public void setSize(int)
    {
        int i0;
        com.sun.lwuit.tools.resourcebuilder.FontTask r0;

        r0 := @this: com.sun.lwuit.tools.resourcebuilder.FontTask;

        i0 := @parameter0: int;

        r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: int size> = i0;

        return;
    }

    public boolean isBold()
    {
        com.sun.lwuit.tools.resourcebuilder.FontTask r0;
        boolean $z0;

        r0 := @this: com.sun.lwuit.tools.resourcebuilder.FontTask;

        $z0 = r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: boolean bold>;

        return $z0;
    }

    public void setBold(boolean)
    {
        com.sun.lwuit.tools.resourcebuilder.FontTask r0;
        boolean z0;

        r0 := @this: com.sun.lwuit.tools.resourcebuilder.FontTask;

        z0 := @parameter0: boolean;

        r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: boolean bold> = z0;

        return;
    }

    public boolean isItalic()
    {
        com.sun.lwuit.tools.resourcebuilder.FontTask r0;
        boolean $z0;

        r0 := @this: com.sun.lwuit.tools.resourcebuilder.FontTask;

        $z0 = r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: boolean italic>;

        return $z0;
    }

    public void setItalic(boolean)
    {
        com.sun.lwuit.tools.resourcebuilder.FontTask r0;
        boolean z0;

        r0 := @this: com.sun.lwuit.tools.resourcebuilder.FontTask;

        z0 := @parameter0: boolean;

        r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: boolean italic> = z0;

        return;
    }

    public boolean isTrueType()
    {
        com.sun.lwuit.tools.resourcebuilder.FontTask r0;
        boolean $z0;

        r0 := @this: com.sun.lwuit.tools.resourcebuilder.FontTask;

        $z0 = r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: boolean trueType>;

        return $z0;
    }

    public void setTrueType(boolean)
    {
        com.sun.lwuit.tools.resourcebuilder.FontTask r0;
        boolean z0;

        r0 := @this: com.sun.lwuit.tools.resourcebuilder.FontTask;

        z0 := @parameter0: boolean;

        r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: boolean trueType> = z0;

        return;
    }

    public boolean isAntiAliasing()
    {
        com.sun.lwuit.tools.resourcebuilder.FontTask r0;
        boolean $z0;

        r0 := @this: com.sun.lwuit.tools.resourcebuilder.FontTask;

        $z0 = r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: boolean antiAliasing>;

        return $z0;
    }

    public void setAntiAliasing(boolean)
    {
        com.sun.lwuit.tools.resourcebuilder.FontTask r0;
        boolean z0;

        r0 := @this: com.sun.lwuit.tools.resourcebuilder.FontTask;

        z0 := @parameter0: boolean;

        r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: boolean antiAliasing> = z0;

        return;
    }

    public java.lang.String getLogicalName()
    {
        com.sun.lwuit.tools.resourcebuilder.FontTask r0;
        java.lang.String $r1;

        r0 := @this: com.sun.lwuit.tools.resourcebuilder.FontTask;

        $r1 = r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: java.lang.String logicalName>;

        return $r1;
    }

    public void setLogicalName(java.lang.String)
    {
        com.sun.lwuit.tools.resourcebuilder.FontTask r0;
        java.lang.String r1, $r2;

        r0 := @this: com.sun.lwuit.tools.resourcebuilder.FontTask;

        r1 := @parameter0: java.lang.String;

        r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: java.lang.String logicalName> = r1;

        $r2 = virtualinvoke r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: java.lang.String getName()>();

        if $r2 != null goto label1;

        virtualinvoke r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: void setName(java.lang.String)>(r1);

     label1:
        return;
    }

    public void addToResources(com.sun.lwuit.util.EditableResources)
    {
        com.sun.lwuit.EditorFont $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r1, $r2, $r5, $r6, $r8, $r10, $r12, $r15, $r18, $r21;
        boolean $z0, $z1;
        com.sun.lwuit.util.EditableResources r7;
        com.sun.lwuit.tools.resourcebuilder.FontTask r0;
        java.lang.StringBuilder $r9, $r11, $r13, $r14, $r16, $r17, $r19, $r20;
        java.lang.Object r22;
        com.sun.lwuit.Font $r4;

        r0 := @this: com.sun.lwuit.tools.resourcebuilder.FontTask;

        r7 := @parameter0: com.sun.lwuit.util.EditableResources;

        $r1 = r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: java.lang.String logicalName>;

        if $r1 != null goto label1;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Arial");

        $r18 = virtualinvoke r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: java.lang.String getIdentity()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $i5 = r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: int size>;

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: java.lang.String logicalName> = $r21;

        r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: boolean createBitmap> = 0;

        goto label2;

     label1:
        $r2 = r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: java.lang.String logicalName>;

        $i0 = virtualinvoke $r2.<java.lang.String: int indexOf(int)>(45);

        if $i0 >= 0 goto label2;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: java.lang.String logicalName>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: java.lang.String getIdentity()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $i4 = r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: int size>;

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: java.lang.String logicalName> = $r15;

     label2:
        $z1 = r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: boolean antiAliasing>;

        if $z1 == 0 goto label3;

        r22 = <java.awt.RenderingHints: java.lang.Object VALUE_TEXT_ANTIALIAS_ON>;

        goto label4;

     label3:
        r22 = <java.awt.RenderingHints: java.lang.Object VALUE_TEXT_ANTIALIAS_OFF>;

     label4:
        $r3 = new com.sun.lwuit.EditorFont;

        $i3 = r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: int systemFace>;

        $i2 = r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: int systemStyle>;

        $i1 = r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: int systemSize>;

        $r4 = staticinvoke <com.sun.lwuit.Font: com.sun.lwuit.Font createSystemFont(int,int,int)>($i3, $i2, $i1);

        $r6 = r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: java.lang.String logicalName>;

        $z0 = r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: boolean createBitmap>;

        $r5 = r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: java.lang.String charset>;

        specialinvoke $r3.<com.sun.lwuit.EditorFont: void <init>(com.sun.lwuit.Font,byte[],java.lang.String,boolean,java.lang.Object,java.lang.String)>($r4, null, $r6, $z0, r22, $r5);

        $r8 = virtualinvoke r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: java.lang.String getName()>();

        virtualinvoke r7.<com.sun.lwuit.util.EditableResources: void setFont(java.lang.String,com.sun.lwuit.Font)>($r8, $r3);

        return;
    }

    public boolean isCreateBitmap()
    {
        com.sun.lwuit.tools.resourcebuilder.FontTask r0;
        boolean $z0;

        r0 := @this: com.sun.lwuit.tools.resourcebuilder.FontTask;

        $z0 = r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: boolean createBitmap>;

        return $z0;
    }

    public void setCreateBitmap(boolean)
    {
        com.sun.lwuit.tools.resourcebuilder.FontTask r0;
        boolean z0;

        r0 := @this: com.sun.lwuit.tools.resourcebuilder.FontTask;

        z0 := @parameter0: boolean;

        r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: boolean createBitmap> = z0;

        return;
    }

    public void setSystem(java.lang.String)
    {
        com.sun.lwuit.tools.resourcebuilder.FontTask r0;
        java.lang.String r1;

        r0 := @this: com.sun.lwuit.tools.resourcebuilder.FontTask;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.sun.lwuit.tools.resourcebuilder.FontTask: void parseSystemFont(java.lang.String)>(r1);

        return;
    }
}
