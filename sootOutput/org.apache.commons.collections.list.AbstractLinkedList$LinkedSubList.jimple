public class org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList extends java.util.AbstractList
{
    org.apache.commons.collections.list.AbstractLinkedList parent;
    int offset;
    int size;
    int expectedModCount;

    protected void <init>(org.apache.commons.collections.list.AbstractLinkedList, int, int)
    {
        java.lang.IndexOutOfBoundsException $r10, $r15;
        java.lang.StringBuffer $r3, $r4, $r5, $r6, $r7, $r8, $r11, $r12, $r13, $r16, $r17, $r18;
        int i0, i1, $i2, $i3, $i4;
        java.lang.String $r9, $r14, $r19;
        org.apache.commons.collections.list.AbstractLinkedList r1;
        java.lang.IllegalArgumentException $r2;
        org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList r0;

        r0 := @this: org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList;

        r1 := @parameter0: org.apache.commons.collections.list.AbstractLinkedList;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.util.AbstractList: void <init>()>();

        if i0 >= 0 goto label1;

        $r15 = new java.lang.IndexOutOfBoundsException;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("fromIndex = ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r19);

        throw $r15;

     label1:
        $i2 = virtualinvoke r1.<org.apache.commons.collections.list.AbstractLinkedList: int size()>();

        if i1 <= $i2 goto label2;

        $r10 = new java.lang.IndexOutOfBoundsException;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("toIndex = ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label2:
        if i0 <= i1 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("fromIndex(");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") > toIndex(");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r2;

     label3:
        r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: org.apache.commons.collections.list.AbstractLinkedList parent> = r1;

        r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: int offset> = i0;

        $i3 = i1 - i0;

        r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: int size> = $i3;

        $i4 = r1.<org.apache.commons.collections.list.AbstractLinkedList: int modCount>;

        r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: int expectedModCount> = $i4;

        return;
    }

    public int size()
    {
        int $i0;
        org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList r0;

        r0 := @this: org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList;

        virtualinvoke r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: void checkModCount()>();

        $i0 = r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: int size>;

        return $i0;
    }

    public java.lang.Object get(int)
    {
        int i0, $i1, $i2, $i3;
        java.lang.Object $r2;
        org.apache.commons.collections.list.AbstractLinkedList $r1;
        org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList r0;

        r0 := @this: org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: int size>;

        virtualinvoke r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: void rangeCheck(int,int)>(i0, $i1);

        virtualinvoke r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: void checkModCount()>();

        $r1 = r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: org.apache.commons.collections.list.AbstractLinkedList parent>;

        $i2 = r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: int offset>;

        $i3 = i0 + $i2;

        $r2 = virtualinvoke $r1.<org.apache.commons.collections.list.AbstractLinkedList: java.lang.Object get(int)>($i3);

        return $r2;
    }

    public void add(int, java.lang.Object)
    {
        org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.Object r1;
        org.apache.commons.collections.list.AbstractLinkedList $r2, $r3;

        r0 := @this: org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $i1 = r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: int size>;

        $i2 = $i1 + 1;

        virtualinvoke r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: void rangeCheck(int,int)>(i0, $i2);

        virtualinvoke r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: void checkModCount()>();

        $r2 = r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: org.apache.commons.collections.list.AbstractLinkedList parent>;

        $i3 = r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: int offset>;

        $i4 = i0 + $i3;

        virtualinvoke $r2.<org.apache.commons.collections.list.AbstractLinkedList: void add(int,java.lang.Object)>($i4, r1);

        $r3 = r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: org.apache.commons.collections.list.AbstractLinkedList parent>;

        $i5 = $r3.<org.apache.commons.collections.list.AbstractLinkedList: int modCount>;

        r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: int expectedModCount> = $i5;

        $i6 = r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: int size>;

        $i7 = $i6 + 1;

        r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: int size> = $i7;

        $i8 = r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: int modCount>;

        $i9 = $i8 + 1;

        r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: int modCount> = $i9;

        return;
    }

    public java.lang.Object remove(int)
    {
        org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.Object $r2;
        org.apache.commons.collections.list.AbstractLinkedList $r1, $r3;

        r0 := @this: org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: int size>;

        virtualinvoke r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: void rangeCheck(int,int)>(i0, $i1);

        virtualinvoke r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: void checkModCount()>();

        $r1 = r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: org.apache.commons.collections.list.AbstractLinkedList parent>;

        $i2 = r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: int offset>;

        $i3 = i0 + $i2;

        $r2 = virtualinvoke $r1.<org.apache.commons.collections.list.AbstractLinkedList: java.lang.Object remove(int)>($i3);

        $r3 = r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: org.apache.commons.collections.list.AbstractLinkedList parent>;

        $i4 = $r3.<org.apache.commons.collections.list.AbstractLinkedList: int modCount>;

        r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: int expectedModCount> = $i4;

        $i5 = r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: int size>;

        $i6 = $i5 - 1;

        r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: int size> = $i6;

        $i7 = r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: int modCount>;

        $i8 = $i7 + 1;

        r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: int modCount> = $i8;

        return $r2;
    }

    public boolean addAll(java.util.Collection)
    {
        java.util.Collection r1;
        int $i0;
        org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList r0;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList;

        r1 := @parameter0: java.util.Collection;

        $i0 = r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: int size>;

        $z0 = virtualinvoke r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: boolean addAll(int,java.util.Collection)>($i0, r1);

        return $z0;
    }

    public boolean addAll(int, java.util.Collection)
    {
        java.util.Collection r1;
        org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        org.apache.commons.collections.list.AbstractLinkedList $r2, $r3;

        r0 := @this: org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Collection;

        $i1 = r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: int size>;

        $i2 = $i1 + 1;

        virtualinvoke r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: void rangeCheck(int,int)>(i0, $i2);

        $i3 = interfaceinvoke r1.<java.util.Collection: int size()>();

        if $i3 != 0 goto label1;

        return 0;

     label1:
        virtualinvoke r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: void checkModCount()>();

        $r2 = r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: org.apache.commons.collections.list.AbstractLinkedList parent>;

        $i4 = r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: int offset>;

        $i5 = $i4 + i0;

        virtualinvoke $r2.<org.apache.commons.collections.list.AbstractLinkedList: boolean addAll(int,java.util.Collection)>($i5, r1);

        $r3 = r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: org.apache.commons.collections.list.AbstractLinkedList parent>;

        $i6 = $r3.<org.apache.commons.collections.list.AbstractLinkedList: int modCount>;

        r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: int expectedModCount> = $i6;

        $i7 = r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: int size>;

        $i8 = $i7 + $i3;

        r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: int size> = $i8;

        $i9 = r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: int modCount>;

        $i10 = $i9 + 1;

        r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: int modCount> = $i10;

        return 1;
    }

    public java.lang.Object set(int, java.lang.Object)
    {
        org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList r0;
        int i0, $i1, $i2, $i3;
        java.lang.Object r1, $r3;
        org.apache.commons.collections.list.AbstractLinkedList $r2;

        r0 := @this: org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $i1 = r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: int size>;

        virtualinvoke r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: void rangeCheck(int,int)>(i0, $i1);

        virtualinvoke r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: void checkModCount()>();

        $r2 = r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: org.apache.commons.collections.list.AbstractLinkedList parent>;

        $i2 = r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: int offset>;

        $i3 = i0 + $i2;

        $r3 = virtualinvoke $r2.<org.apache.commons.collections.list.AbstractLinkedList: java.lang.Object set(int,java.lang.Object)>($i3, r1);

        return $r3;
    }

    public void clear()
    {
        java.util.Iterator $r1;
        org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList r0;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList;

        virtualinvoke r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: void checkModCount()>();

        $r1 = virtualinvoke r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r1.<java.util.Iterator: void remove()>();

        goto label1;

     label2:
        return;
    }

    public java.util.Iterator iterator()
    {
        java.util.Iterator $r2;
        org.apache.commons.collections.list.AbstractLinkedList $r1;
        org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList r0;

        r0 := @this: org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList;

        virtualinvoke r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: void checkModCount()>();

        $r1 = r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: org.apache.commons.collections.list.AbstractLinkedList parent>;

        $r2 = virtualinvoke $r1.<org.apache.commons.collections.list.AbstractLinkedList: java.util.Iterator createSubListIterator(org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList)>(r0);

        return $r2;
    }

    public java.util.ListIterator listIterator(int)
    {
        java.util.ListIterator $r2;
        int i0, $i1, $i2;
        org.apache.commons.collections.list.AbstractLinkedList $r1;
        org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList r0;

        r0 := @this: org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: int size>;

        $i2 = $i1 + 1;

        virtualinvoke r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: void rangeCheck(int,int)>(i0, $i2);

        virtualinvoke r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: void checkModCount()>();

        $r1 = r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: org.apache.commons.collections.list.AbstractLinkedList parent>;

        $r2 = virtualinvoke $r1.<org.apache.commons.collections.list.AbstractLinkedList: java.util.ListIterator createSubListListIterator(org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList,int)>(r0, i0);

        return $r2;
    }

    public java.util.List subList(int, int)
    {
        org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList $r0, r1;
        int i0, $i1, i2, $i3, $i4, $i5;
        org.apache.commons.collections.list.AbstractLinkedList $r2;

        r1 := @this: org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        $r0 = new org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList;

        $r2 = r1.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: org.apache.commons.collections.list.AbstractLinkedList parent>;

        $i1 = r1.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: int offset>;

        $i5 = i0 + $i1;

        $i3 = r1.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: int offset>;

        $i4 = i2 + $i3;

        specialinvoke $r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: void <init>(org.apache.commons.collections.list.AbstractLinkedList,int,int)>($r2, $i5, $i4);

        return $r0;
    }

    protected void rangeCheck(int, int)
    {
        java.lang.IndexOutOfBoundsException $r0;
        org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList r5;
        java.lang.StringBuffer $r1, $r2, $r3, $r4, $r6, $r7;
        int i0, $i1, i2;
        java.lang.String $r8;

        r5 := @this: org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        if i0 < 0 goto label1;

        if i0 < i2 goto label2;

     label1:
        $r0 = new java.lang.IndexOutOfBoundsException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Index \'");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' out of bounds for size \'");

        $i1 = r5.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: int size>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r8);

        throw $r0;

     label2:
        return;
    }

    protected void checkModCount()
    {
        int $i0, $i1;
        org.apache.commons.collections.list.AbstractLinkedList $r1;
        java.util.ConcurrentModificationException $r2;
        org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList r0;

        r0 := @this: org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList;

        $r1 = r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: org.apache.commons.collections.list.AbstractLinkedList parent>;

        $i1 = $r1.<org.apache.commons.collections.list.AbstractLinkedList: int modCount>;

        $i0 = r0.<org.apache.commons.collections.list.AbstractLinkedList$LinkedSubList: int expectedModCount>;

        if $i1 == $i0 goto label1;

        $r2 = new java.util.ConcurrentModificationException;

        specialinvoke $r2.<java.util.ConcurrentModificationException: void <init>()>();

        throw $r2;

     label1:
        return;
    }
}
