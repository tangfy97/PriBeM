abstract class kodkod.util.ints.RangeSequence$Entry extends kodkod.util.ints.IntTree$Node implements java.lang.Cloneable
{
    java.lang.Object value;

    void <init>(int, java.lang.Object)
    {
        int i0;
        java.lang.Object r1;
        kodkod.util.ints.RangeSequence$Entry r0;

        r0 := @this: kodkod.util.ints.RangeSequence$Entry;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        specialinvoke r0.<kodkod.util.ints.IntTree$Node: void <init>(int)>(i0);

        r0.<kodkod.util.ints.RangeSequence$Entry: java.lang.Object value> = r1;

        return;
    }

    java.lang.Object setValue(java.lang.Object)
    {
        java.lang.Object r1, r2;
        kodkod.util.ints.RangeSequence$Entry r0;

        r0 := @this: kodkod.util.ints.RangeSequence$Entry;

        r2 := @parameter0: java.lang.Object;

        r1 = r0.<kodkod.util.ints.RangeSequence$Entry: java.lang.Object value>;

        r0.<kodkod.util.ints.RangeSequence$Entry: java.lang.Object value> = r2;

        return r1;
    }

    abstract int min();

    final int max()
    {
        int $i0;
        kodkod.util.ints.RangeSequence$Entry r0;

        r0 := @this: kodkod.util.ints.RangeSequence$Entry;

        $i0 = r0.<kodkod.util.ints.RangeSequence$Entry: int key>;

        return $i0;
    }

    abstract boolean isPoint();

    protected kodkod.util.ints.RangeSequence$Entry clone() throws java.lang.CloneNotSupportedException
    {
        kodkod.util.ints.IntTree$Node $r1;
        kodkod.util.ints.RangeSequence$Entry r0, $r2, $r3;

        r0 := @this: kodkod.util.ints.RangeSequence$Entry;

        $r1 = specialinvoke r0.<kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node clone()>();

        $r2 = (kodkod.util.ints.RangeSequence$Entry) $r1;

        $r3 = (kodkod.util.ints.RangeSequence$Entry) $r2;

        return $r3;
    }

    protected volatile kodkod.util.ints.IntTree$Node clone() throws java.lang.CloneNotSupportedException
    {
        kodkod.util.ints.IntTree$Node $r2;
        kodkod.util.ints.RangeSequence$Entry r0, $r1;

        r0 := @this: kodkod.util.ints.RangeSequence$Entry;

        $r1 = virtualinvoke r0.<kodkod.util.ints.RangeSequence$Entry: kodkod.util.ints.RangeSequence$Entry clone()>();

        $r2 = (kodkod.util.ints.IntTree$Node) $r1;

        return $r2;
    }
}
