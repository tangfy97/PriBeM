public class org.waveprotocol.wave.client.editor.selection.html.SelectionImplW3C extends org.waveprotocol.wave.client.editor.selection.html.SelectionImpl
{
    static org.waveprotocol.wave.common.logging.LoggerBundle logger;
    private org.waveprotocol.wave.model.document.util.FocusedPointRange savedSelection;
    static final boolean $assertionsDisabled;

    void <init>()
    {
        org.waveprotocol.wave.common.logging.Logger $r2;
        org.waveprotocol.wave.client.editor.selection.html.SelectionImplW3C r0;
        org.waveprotocol.wave.common.logging.LoggerBundle $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.html.SelectionImplW3C;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.selection.html.SelectionImpl: void <init>()>();

        $r1 = <org.waveprotocol.wave.client.editor.selection.html.SelectionImplW3C: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        interfaceinvoke $r2.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>("Constructed SelectionImplW3C");

        return;
    }

    boolean selectionExists()
    {
        org.waveprotocol.wave.client.editor.selection.html.SelectionImplW3C r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.html.SelectionImplW3C;

        $z0 = staticinvoke <org.waveprotocol.wave.client.editor.selection.html.SelectionImplW3C: boolean nativeCheckSelectionExists()>();

        return $z0;
    }

    private static native boolean nativeCheckSelectionExists();

    org.waveprotocol.wave.model.document.util.FocusedPointRange get()
    {
        org.waveprotocol.wave.model.document.util.FocusedPointRange $r4;
        org.waveprotocol.wave.client.editor.selection.html.SelectionImplW3C r3;
        int $i0, $i1;
        org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative $r0;
        com.google.gwt.dom.client.Node $r1, $r2;

        r3 := @this: org.waveprotocol.wave.client.editor.selection.html.SelectionImplW3C;

        $r0 = staticinvoke <org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative: org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative getSelectionGuarded()>();

        if $r0 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke $r0.<org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative: com.google.gwt.dom.client.Node anchorNode()>();

        $r2 = virtualinvoke $r0.<org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative: com.google.gwt.dom.client.Node focusNode()>();

        if $r2 != null goto label2;

        $r4 = null;

        goto label3;

     label2:
        $i0 = virtualinvoke $r0.<org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative: int anchorOffset()>();

        $i1 = virtualinvoke $r0.<org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative: int focusOffset()>();

        $r4 = staticinvoke <org.waveprotocol.wave.client.editor.selection.html.SelectionImplW3C: org.waveprotocol.wave.model.document.util.FocusedPointRange constructRange(com.google.gwt.dom.client.Node,int,com.google.gwt.dom.client.Node,int)>($r1, $i0, $r2, $i1);

     label3:
        return $r4;
    }

    org.waveprotocol.wave.model.document.util.PointRange getOrdered()
    {
        org.waveprotocol.wave.client.editor.selection.html.JsRange $r1;
        org.waveprotocol.wave.model.document.util.PointRange $r2;
        org.waveprotocol.wave.client.editor.selection.html.SelectionImplW3C r0;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.html.SelectionImplW3C;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.selection.html.SelectionImplW3C: org.waveprotocol.wave.client.editor.selection.html.JsRange getSelectionRange()>();

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.selection.html.SelectionImplW3C: org.waveprotocol.wave.model.document.util.PointRange toOrderedPointRange(org.waveprotocol.wave.client.editor.selection.html.JsRange)>($r1);

        return $r2;
    }

    boolean isOrdered()
    {
        org.waveprotocol.wave.client.editor.selection.html.JsRange $r1;
        java.lang.AssertionError $r5;
        org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative $r2;
        org.waveprotocol.wave.client.editor.selection.html.SelectionImplW3C r0;
        int $i0, $i1;
        com.google.gwt.dom.client.Node $r3, $r4;
        boolean z0, $z1, $z3, $z4, $z5;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.html.SelectionImplW3C;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.selection.html.SelectionImplW3C: org.waveprotocol.wave.client.editor.selection.html.JsRange getSelectionRange()>();

        if $r1 != null goto label1;

        return 1;

     label1:
        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative: org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative getSelectionGuarded()>();

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative: com.google.gwt.dom.client.Node anchorNode()>();

        $i0 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative: int anchorOffset()>();

        $r4 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.selection.html.JsRange: com.google.gwt.dom.client.Node startContainer()>();

        if $r3 != $r4 goto label2;

        $i1 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.selection.html.JsRange: int startOffset()>();

        if $i0 != $i1 goto label2;

        $z5 = 1;

        $z4 = 1;

        goto label3;

     label2:
        $z5 = 0;

        $z4 = 0;

     label3:
        z0 = $z4;

        $z3 = <org.waveprotocol.wave.client.editor.selection.html.SelectionImplW3C: boolean $assertionsDisabled>;

        if $z3 != 0 goto label4;

        if $z5 != 0 goto label4;

        $z1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.selection.html.SelectionImplW3C: boolean focusIsAtStart(org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative,org.waveprotocol.wave.client.editor.selection.html.JsRange)>($r2, $r1);

        if $z1 != 0 goto label4;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label4:
        return z0;
    }

    boolean focusIsAtStart(org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative, org.waveprotocol.wave.client.editor.selection.html.JsRange)
    {
        org.waveprotocol.wave.client.editor.selection.html.JsRange r2;
        org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative r0;
        org.waveprotocol.wave.client.editor.selection.html.SelectionImplW3C r4;
        int $i0, $i1;
        com.google.gwt.dom.client.Node $r1, $r3;
        boolean $z0;

        r4 := @this: org.waveprotocol.wave.client.editor.selection.html.SelectionImplW3C;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.selection.html.JsRange;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative: com.google.gwt.dom.client.Node focusNode()>();

        $i0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative: int focusOffset()>();

        $r3 = virtualinvoke r2.<org.waveprotocol.wave.client.editor.selection.html.JsRange: com.google.gwt.dom.client.Node startContainer()>();

        if $r1 != $r3 goto label1;

        $i1 = virtualinvoke r2.<org.waveprotocol.wave.client.editor.selection.html.JsRange: int startOffset()>();

        if $i0 != $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    org.waveprotocol.wave.client.editor.selection.html.JsRange getSelectionRange()
    {
        org.waveprotocol.wave.client.editor.selection.html.JsRange $r2;
        org.waveprotocol.wave.client.editor.selection.html.SelectionImplW3C r1;
        int $i0;
        org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative $r0;

        r1 := @this: org.waveprotocol.wave.client.editor.selection.html.SelectionImplW3C;

        $r0 = staticinvoke <org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative: org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative getSelectionGuarded()>();

        if $r0 == null goto label1;

        $i0 = virtualinvoke $r0.<org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative: int rangeCount()>();

        if $i0 <= 0 goto label1;

        $r2 = virtualinvoke $r0.<org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative: org.waveprotocol.wave.client.editor.selection.html.JsRange getRangeAt(int)>(0);

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public static org.waveprotocol.wave.model.document.util.PointRange toOrderedPointRange(org.waveprotocol.wave.client.editor.selection.html.JsRange)
    {
        org.waveprotocol.wave.client.editor.selection.html.JsRange r0;
        org.waveprotocol.wave.model.document.util.PointRange $r1;
        int $i0, $i1;
        com.google.gwt.dom.client.Node $r2, $r4;
        org.waveprotocol.wave.model.document.util.Point $r3, $r5;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.selection.html.JsRange;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new org.waveprotocol.wave.model.document.util.PointRange;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.selection.html.JsRange: com.google.gwt.dom.client.Node startContainer()>();

        $i0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.selection.html.JsRange: int startOffset()>();

        $r3 = staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: org.waveprotocol.wave.model.document.util.Point nodeOffsetToNodeletPoint(com.google.gwt.dom.client.Node,int)>($r2, $i0);

        $r4 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.selection.html.JsRange: com.google.gwt.dom.client.Node endContainer()>();

        $i1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.selection.html.JsRange: int endOffset()>();

        $r5 = staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: org.waveprotocol.wave.model.document.util.Point nodeOffsetToNodeletPoint(com.google.gwt.dom.client.Node,int)>($r4, $i1);

        specialinvoke $r1.<org.waveprotocol.wave.model.document.util.PointRange: void <init>(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.Point)>($r3, $r5);

        return $r1;
    }

    void set(org.waveprotocol.wave.model.document.util.Point, org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.client.editor.selection.html.JsRange $r0;
        java.lang.AssertionError $r20, $r21, $r22;
        org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative $r19;
        org.waveprotocol.wave.client.editor.selection.html.SelectionImplW3C r16;
        int i0, i1;
        org.waveprotocol.wave.model.document.util.Point r1, r3;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.google.gwt.dom.client.Element $r12;
        java.lang.Object $r2, $r4, $r5, $r6, $r8, $r10, r17, r18;
        com.google.gwt.dom.client.Node $r7, $r9, r11, $r23, $r24, $r25, $r26;

        r16 := @this: org.waveprotocol.wave.client.editor.selection.html.SelectionImplW3C;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        r3 := @parameter1: org.waveprotocol.wave.model.document.util.Point;

        $r0 = staticinvoke <org.waveprotocol.wave.client.editor.selection.html.JsRange: org.waveprotocol.wave.client.editor.selection.html.JsRange create()>();

        $r2 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        r17 = (com.google.gwt.dom.client.Node) $r2;

        $r4 = virtualinvoke r3.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        r18 = (com.google.gwt.dom.client.Node) $r4;

        $z0 = <org.waveprotocol.wave.client.editor.selection.html.SelectionImplW3C: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r17 != null goto label1;

        $r20 = new java.lang.AssertionError;

        specialinvoke $r20.<java.lang.AssertionError: void <init>(java.lang.Object)>("Anchor node must not be null.");

        throw $r20;

     label1:
        $z1 = <org.waveprotocol.wave.client.editor.selection.html.SelectionImplW3C: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if r18 != null goto label2;

        $r21 = new java.lang.AssertionError;

        specialinvoke $r21.<java.lang.AssertionError: void <init>(java.lang.Object)>("Focus node must not be null.");

        throw $r21;

     label2:
        $z2 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z2 == 0 goto label3;

        i0 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Point: int getTextOffset()>();

        goto label5;

     label3:
        $r5 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

        if $r5 != null goto label4;

        $r23 = (com.google.gwt.dom.client.Node) r17;

        i0 = virtualinvoke $r23.<com.google.gwt.dom.client.Node: int getChildCount()>();

        goto label5;

     label4:
        $r6 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

        $r7 = (com.google.gwt.dom.client.Node) $r6;

        r17 = virtualinvoke $r7.<com.google.gwt.dom.client.Node: com.google.gwt.dom.client.Element getParentElement()>();

        $r8 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

        $r9 = (com.google.gwt.dom.client.Node) $r8;

        virtualinvoke $r0.<org.waveprotocol.wave.client.editor.selection.html.JsRange: void setStartBefore(com.google.gwt.dom.client.Node)>($r9);

        i0 = virtualinvoke $r0.<org.waveprotocol.wave.client.editor.selection.html.JsRange: int startOffset()>();

     label5:
        $z4 = virtualinvoke r3.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z4 == 0 goto label6;

        i1 = virtualinvoke r3.<org.waveprotocol.wave.model.document.util.Point: int getTextOffset()>();

        goto label9;

     label6:
        $r10 = virtualinvoke r3.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

        r11 = (com.google.gwt.dom.client.Node) $r10;

        if r11 != null goto label7;

        $r24 = (com.google.gwt.dom.client.Node) r18;

        i1 = virtualinvoke $r24.<com.google.gwt.dom.client.Node: int getChildCount()>();

        goto label9;

     label7:
        $r12 = virtualinvoke r11.<com.google.gwt.dom.client.Node: com.google.gwt.dom.client.Element getParentElement()>();

        r18 = $r12;

        $z3 = <org.waveprotocol.wave.client.editor.selection.html.SelectionImplW3C: boolean $assertionsDisabled>;

        if $z3 != 0 goto label8;

        if $r12 != null goto label8;

        $r22 = new java.lang.AssertionError;

        specialinvoke $r22.<java.lang.AssertionError: void <init>(java.lang.Object)>("focus node must not be null");

        throw $r22;

     label8:
        virtualinvoke $r0.<org.waveprotocol.wave.client.editor.selection.html.JsRange: void setStartBefore(com.google.gwt.dom.client.Node)>(r11);

        i1 = virtualinvoke $r0.<org.waveprotocol.wave.client.editor.selection.html.JsRange: int startOffset()>();

     label9:
        $r19 = staticinvoke <org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative: org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative getSelectionUnsafe()>();

        $r25 = (com.google.gwt.dom.client.Node) r17;

        $r26 = (com.google.gwt.dom.client.Node) r18;

        virtualinvoke $r19.<org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative: void setAnchorAndFocus(com.google.gwt.dom.client.Node,int,com.google.gwt.dom.client.Node,int)>($r25, i0, $r26, i1);

        return;
    }

    void set(org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.client.editor.selection.html.JsRange $r0;
        org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative $r8;
        org.waveprotocol.wave.client.editor.selection.html.SelectionImplW3C r7;
        int i0;
        java.lang.Object $r2, $r4, $r5;
        com.google.gwt.dom.client.Node r3, $r6;
        org.waveprotocol.wave.model.document.util.Point r1;
        boolean $z0;

        r7 := @this: org.waveprotocol.wave.client.editor.selection.html.SelectionImplW3C;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        $r0 = staticinvoke <org.waveprotocol.wave.client.editor.selection.html.JsRange: org.waveprotocol.wave.client.editor.selection.html.JsRange create()>();

        $r2 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        r3 = (com.google.gwt.dom.client.Node) $r2;

        $z0 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z0 == 0 goto label1;

        i0 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Point: int getTextOffset()>();

        goto label3;

     label1:
        $r4 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

        if $r4 != null goto label2;

        i0 = virtualinvoke r3.<com.google.gwt.dom.client.Node: int getChildCount()>();

        goto label3;

     label2:
        $r5 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

        $r6 = (com.google.gwt.dom.client.Node) $r5;

        virtualinvoke $r0.<org.waveprotocol.wave.client.editor.selection.html.JsRange: void setStartBefore(com.google.gwt.dom.client.Node)>($r6);

        i0 = virtualinvoke $r0.<org.waveprotocol.wave.client.editor.selection.html.JsRange: int startOffset()>();

     label3:
        $r8 = staticinvoke <org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative: org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative getSelectionUnsafe()>();

        virtualinvoke $r8.<org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative: void setCaret(com.google.gwt.dom.client.Node,int)>(r3, i0);

        return;
    }

    void clear()
    {
        org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative $r0;
        org.waveprotocol.wave.client.editor.selection.html.SelectionImplW3C r1;

        r1 := @this: org.waveprotocol.wave.client.editor.selection.html.SelectionImplW3C;

        $r0 = staticinvoke <org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative: org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative getSelectionUnsafe()>();

        virtualinvoke $r0.<org.waveprotocol.wave.client.editor.selection.html.SelectionW3CNative: void removeAllRanges()>();

        return;
    }

    private static org.waveprotocol.wave.model.document.util.FocusedPointRange constructRange(com.google.gwt.dom.client.Node, int, com.google.gwt.dom.client.Node, int)
    {
        org.waveprotocol.wave.model.document.util.FocusedPointRange $r0;
        int i0, i1;
        com.google.gwt.dom.client.Node r1, r3;
        org.waveprotocol.wave.model.document.util.Point $r2, $r4;

        r1 := @parameter0: com.google.gwt.dom.client.Node;

        i0 := @parameter1: int;

        r3 := @parameter2: com.google.gwt.dom.client.Node;

        i1 := @parameter3: int;

        $r0 = new org.waveprotocol.wave.model.document.util.FocusedPointRange;

        $r2 = staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: org.waveprotocol.wave.model.document.util.Point nodeOffsetToNodeletPoint(com.google.gwt.dom.client.Node,int)>(r1, i0);

        $r4 = staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: org.waveprotocol.wave.model.document.util.Point nodeOffsetToNodeletPoint(com.google.gwt.dom.client.Node,int)>(r3, i1);

        specialinvoke $r0.<org.waveprotocol.wave.model.document.util.FocusedPointRange: void <init>(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.Point)>($r2, $r4);

        return $r0;
    }

    void saveSelection()
    {
        org.waveprotocol.wave.model.document.util.FocusedPointRange $r1;
        org.waveprotocol.wave.client.editor.selection.html.SelectionImplW3C r0;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.html.SelectionImplW3C;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.selection.html.SelectionImplW3C: org.waveprotocol.wave.model.document.util.FocusedPointRange get()>();

        r0.<org.waveprotocol.wave.client.editor.selection.html.SelectionImplW3C: org.waveprotocol.wave.model.document.util.FocusedPointRange savedSelection> = $r1;

        return;
    }

    void restoreSelection()
    {
        org.waveprotocol.wave.model.document.util.FocusedPointRange $r1, $r2, $r4;
        org.waveprotocol.wave.client.editor.selection.html.SelectionImplW3C r0;
        org.waveprotocol.wave.model.document.util.Point $r3, $r5;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.html.SelectionImplW3C;

        $r1 = r0.<org.waveprotocol.wave.client.editor.selection.html.SelectionImplW3C: org.waveprotocol.wave.model.document.util.FocusedPointRange savedSelection>;

        if $r1 == null goto label1;

        $r2 = r0.<org.waveprotocol.wave.client.editor.selection.html.SelectionImplW3C: org.waveprotocol.wave.model.document.util.FocusedPointRange savedSelection>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.util.FocusedPointRange: org.waveprotocol.wave.model.document.util.Point getAnchor()>();

        $r4 = r0.<org.waveprotocol.wave.client.editor.selection.html.SelectionImplW3C: org.waveprotocol.wave.model.document.util.FocusedPointRange savedSelection>;

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.model.document.util.FocusedPointRange: org.waveprotocol.wave.model.document.util.Point getFocus()>();

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.selection.html.SelectionImplW3C: void set(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.Point)>($r3, $r5);

     label1:
        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        org.waveprotocol.wave.common.logging.LoggerBundle $r1;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/client/editor/selection/html/SelectionImplW3C;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.client.editor.selection.html.SelectionImplW3C: boolean $assertionsDisabled> = $z1;

        $r1 = <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: org.waveprotocol.wave.common.logging.LoggerBundle LOG>;

        <org.waveprotocol.wave.client.editor.selection.html.SelectionImplW3C: org.waveprotocol.wave.common.logging.LoggerBundle logger> = $r1;

        return;
    }
}
