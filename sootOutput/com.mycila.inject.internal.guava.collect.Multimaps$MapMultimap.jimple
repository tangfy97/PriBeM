class com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap extends java.lang.Object implements com.mycila.inject.internal.guava.collect.SetMultimap, java.io.Serializable
{
    final java.util.Map map;
    transient java.util.Map asMap;
    private static final com.mycila.inject.internal.guava.base.Joiner$MapJoiner JOINER;
    private static final long serialVersionUID;

    void <init>(java.util.Map)
    {
        com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap r0;
        java.util.Map r1, $r3;
        java.lang.Object $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.util.Map) $r2;

        r0.<com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap: java.util.Map map> = $r3;

        return;
    }

    public int size()
    {
        int $i0;
        com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap r0;
        java.util.Map $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap: java.util.Map map>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }

    public boolean isEmpty()
    {
        com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap r0;
        java.util.Map $r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap: java.util.Map map>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        return $z0;
    }

    public boolean containsKey(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap r0;
        java.util.Map $r2;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap: java.util.Map map>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean containsValue(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap r0;
        java.util.Map $r2;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap: java.util.Map map>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsValue(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean containsEntry(java.lang.Object, java.lang.Object)
    {
        java.util.Map$Entry $r5;
        com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap r0;
        java.util.Map $r1;
        java.util.Set $r2;
        java.lang.Object r3, r4;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap;

        r3 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.Object;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap: java.util.Map map>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r5 = staticinvoke <com.mycila.inject.internal.guava.collect.Maps: java.util.Map$Entry immutableEntry(java.lang.Object,java.lang.Object)>(r3, r4);

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r5);

        return $z0;
    }

    public java.util.Set get(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap$1 $r0;
        java.lang.Object r2;
        com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap;

        r2 := @parameter0: java.lang.Object;

        $r0 = new com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap$1;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap$1: void <init>(com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap,java.lang.Object)>(r1, r2);

        return $r0;
    }

    public boolean put(java.lang.Object, java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r0;
        com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap r1;
        java.lang.Object r2, r3;

        r1 := @this: com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public boolean putAll(java.lang.Object, java.lang.Iterable)
    {
        java.lang.UnsupportedOperationException $r0;
        com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap r1;
        java.lang.Object r2;
        java.lang.Iterable r3;

        r1 := @this: com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Iterable;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public boolean putAll(com.mycila.inject.internal.guava.collect.Multimap)
    {
        java.lang.UnsupportedOperationException $r0;
        com.mycila.inject.internal.guava.collect.Multimap r2;
        com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap;

        r2 := @parameter0: com.mycila.inject.internal.guava.collect.Multimap;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public java.util.Set replaceValues(java.lang.Object, java.lang.Iterable)
    {
        java.lang.UnsupportedOperationException $r0;
        com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap r1;
        java.lang.Object r2;
        java.lang.Iterable r3;

        r1 := @this: com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Iterable;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public boolean remove(java.lang.Object, java.lang.Object)
    {
        java.util.Map$Entry $r5;
        com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap r0;
        java.util.Map $r1;
        java.util.Set $r2;
        java.lang.Object r3, r4;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap;

        r3 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.Object;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap: java.util.Map map>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r5 = staticinvoke <com.mycila.inject.internal.guava.collect.Maps: java.util.Map$Entry immutableEntry(java.lang.Object,java.lang.Object)>(r3, r4);

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>($r5);

        return $z0;
    }

    public java.util.Set removeAll(java.lang.Object)
    {
        java.util.HashSet $r0;
        com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap r1;
        java.util.Map $r3, $r4;
        java.lang.Object r2, $r5;
        boolean $z0;

        r1 := @this: com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap;

        r2 := @parameter0: java.lang.Object;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>(int)>(2);

        $r3 = r1.<com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap: java.util.Map map>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r2);

        if $z0 != 0 goto label1;

        return $r0;

     label1:
        $r4 = r1.<com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap: java.util.Map map>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2);

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r5);

        return $r0;
    }

    public void clear()
    {
        com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap r0;
        java.util.Map $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap: java.util.Map map>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        return;
    }

    public java.util.Set keySet()
    {
        java.util.Set $r2;
        com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap r0;
        java.util.Map $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap: java.util.Map map>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        return $r2;
    }

    public com.mycila.inject.internal.guava.collect.Multiset keys()
    {
        com.mycila.inject.internal.guava.collect.Multiset $r3;
        com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap r0;
        java.util.Map $r1;
        java.util.Set $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap: java.util.Map map>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.Multisets: com.mycila.inject.internal.guava.collect.Multiset forSet(java.util.Set)>($r2);

        return $r3;
    }

    public java.util.Collection values()
    {
        com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap r0;
        java.util.Map $r1;
        java.util.Collection $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap: java.util.Map map>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        return $r2;
    }

    public java.util.Set entries()
    {
        java.util.Set $r2;
        com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap r0;
        java.util.Map $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap: java.util.Map map>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        return $r2;
    }

    public java.util.Map asMap()
    {
        com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap$AsMap $r1;
        com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap r0;
        java.util.Map r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap;

        r2 = r0.<com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap: java.util.Map asMap>;

        if r2 != null goto label1;

        $r1 = new com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap$AsMap;

        specialinvoke $r1.<com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap$AsMap: void <init>(com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap)>(r0);

        r2 = $r1;

        r0.<com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap: java.util.Map asMap> = $r1;

     label1:
        return r2;
    }

    public boolean equals(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.Multimap r2;
        com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap r1;
        java.util.Map $r3, $r4;
        int $i0, $i1;
        java.lang.Object r0;
        boolean $z0, $z1, $z2;

        r1 := @this: com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r0 instanceof com.mycila.inject.internal.guava.collect.Multimap;

        if $z0 == 0 goto label4;

        r2 = (com.mycila.inject.internal.guava.collect.Multimap) r0;

        $i0 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap: int size()>();

        $i1 = interfaceinvoke r2.<com.mycila.inject.internal.guava.collect.Multimap: int size()>();

        if $i0 != $i1 goto label2;

        $r3 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap: java.util.Map asMap()>();

        $r4 = interfaceinvoke r2.<com.mycila.inject.internal.guava.collect.Multimap: java.util.Map asMap()>();

        $z1 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;

     label4:
        return 0;
    }

    public int hashCode()
    {
        int $i0;
        com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap r0;
        java.util.Map $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap: java.util.Map map>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap r0;
        java.util.Map $r1, $r2, $r5;
        int $i0;
        java.lang.StringBuilder $r3, $r4, $r7;
        com.mycila.inject.internal.guava.base.Joiner$MapJoiner $r6;
        java.lang.String $r8;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap: java.util.Map map>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return "{}";

     label1:
        $r2 = r0.<com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap: java.util.Map map>;

        $i0 = interfaceinvoke $r2.<java.util.Map: int size()>();

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.Collections2: java.lang.StringBuilder newStringBuilderForCollection(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(123);

        $r6 = <com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap: com.mycila.inject.internal.guava.base.Joiner$MapJoiner JOINER>;

        $r5 = r0.<com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap: java.util.Map map>;

        virtualinvoke $r6.<com.mycila.inject.internal.guava.base.Joiner$MapJoiner: java.lang.StringBuilder appendTo(java.lang.StringBuilder,java.util.Map)>($r4, $r5);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]}");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public volatile java.util.Collection entries()
    {
        java.util.Set $r1;
        com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap: java.util.Set entries()>();

        return $r1;
    }

    public volatile java.util.Collection get(java.lang.Object)
    {
        java.util.Set $r2;
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap: java.util.Set get(java.lang.Object)>(r1);

        return $r2;
    }

    public volatile java.util.Collection removeAll(java.lang.Object)
    {
        java.util.Set $r2;
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap: java.util.Set removeAll(java.lang.Object)>(r1);

        return $r2;
    }

    public volatile java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)
    {
        com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap r0;
        java.util.Set $r3;
        java.lang.Object r1;
        java.lang.Iterable r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Iterable;

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap: java.util.Set replaceValues(java.lang.Object,java.lang.Iterable)>(r1, r2);

        return $r3;
    }

    static void <clinit>()
    {
        com.mycila.inject.internal.guava.base.Joiner $r0;
        com.mycila.inject.internal.guava.base.Joiner$MapJoiner $r1, $r2;

        <com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap: long serialVersionUID> = 7845222491160860175L;

        $r0 = staticinvoke <com.mycila.inject.internal.guava.base.Joiner: com.mycila.inject.internal.guava.base.Joiner on(java.lang.String)>("], ");

        $r1 = virtualinvoke $r0.<com.mycila.inject.internal.guava.base.Joiner: com.mycila.inject.internal.guava.base.Joiner$MapJoiner withKeyValueSeparator(java.lang.String)>("=[");

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.guava.base.Joiner$MapJoiner: com.mycila.inject.internal.guava.base.Joiner$MapJoiner useForNull(java.lang.String)>("null");

        <com.mycila.inject.internal.guava.collect.Multimaps$MapMultimap: com.mycila.inject.internal.guava.base.Joiner$MapJoiner JOINER> = $r2;

        return;
    }
}
