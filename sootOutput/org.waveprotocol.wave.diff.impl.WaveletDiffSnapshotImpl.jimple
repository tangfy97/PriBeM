public class org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl extends java.lang.Object implements org.waveprotocol.wave.diff.WaveletDiffSnapshot
{
    private java.lang.String waveletId;
    private final java.util.List participant;
    private final java.util.List addedParticipant;
    private final java.util.List removedParticipant;
    private final java.util.List document;
    private org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl version;
    private java.lang.Double lastModifiedTime;
    private java.lang.String creator;
    private java.lang.Double creationTime;

    public void <init>()
    {
        org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl r0;
        java.util.ArrayList $r1, $r2, $r3, $r4;

        r0 := @this: org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.util.List participant> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.util.List addedParticipant> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.util.List removedParticipant> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.util.List document> = $r4;

        return;
    }

    public void <init>(org.waveprotocol.wave.diff.WaveletDiffSnapshot)
    {
        org.waveprotocol.wave.diff.WaveletDiffSnapshot r5;
        org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl r0;
        java.util.ArrayList $r1, $r2, $r3, $r4;

        r0 := @this: org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl;

        r5 := @parameter0: org.waveprotocol.wave.diff.WaveletDiffSnapshot;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.util.List participant> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.util.List addedParticipant> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.util.List removedParticipant> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.util.List document> = $r4;

        virtualinvoke r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: void copyFrom(org.waveprotocol.wave.diff.WaveletDiffSnapshot)>(r5);

        return;
    }

    public void copyFrom(org.waveprotocol.wave.diff.WaveletDiffSnapshot)
    {
        org.waveprotocol.wave.diff.WaveletDiffSnapshot r1;
        java.lang.String $r2, $r12, r18, r19, r20;
        org.waveprotocol.wave.federation.ProtocolHashedVersion $r11;
        boolean $z0, $z1, $z2, $z3;
        double $d0, $d1;
        java.util.Iterator $r4, $r6, $r8, $r10;
        org.waveprotocol.wave.diff.impl.DocumentDiffSnapshotImpl $r14;
        java.util.List $r3, $r5, $r7, $r9;
        org.waveprotocol.wave.diff.DocumentDiffSnapshot r21;
        java.lang.Object $r13, $r15, $r16, $r17;
        org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl;

        r1 := @parameter0: org.waveprotocol.wave.diff.WaveletDiffSnapshot;

        $r2 = interfaceinvoke r1.<org.waveprotocol.wave.diff.WaveletDiffSnapshot: java.lang.String getWaveletId()>();

        virtualinvoke r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: void setWaveletId(java.lang.String)>($r2);

        virtualinvoke r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: void clearParticipant()>();

        $r3 = interfaceinvoke r1.<org.waveprotocol.wave.diff.WaveletDiffSnapshot: java.util.List getParticipant()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r17 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r18 = (java.lang.String) $r17;

        virtualinvoke r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: void addParticipant(java.lang.String)>(r18);

        goto label1;

     label2:
        virtualinvoke r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: void clearAddedParticipant()>();

        $r5 = interfaceinvoke r1.<org.waveprotocol.wave.diff.WaveletDiffSnapshot: java.util.List getAddedParticipant()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r16 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r19 = (java.lang.String) $r16;

        virtualinvoke r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: void addAddedParticipant(java.lang.String)>(r19);

        goto label3;

     label4:
        virtualinvoke r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: void clearRemovedParticipant()>();

        $r7 = interfaceinvoke r1.<org.waveprotocol.wave.diff.WaveletDiffSnapshot: java.util.List getRemovedParticipant()>();

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z2 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r15 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r20 = (java.lang.String) $r15;

        virtualinvoke r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: void addRemovedParticipant(java.lang.String)>(r20);

        goto label5;

     label6:
        virtualinvoke r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: void clearDocument()>();

        $r9 = interfaceinvoke r1.<org.waveprotocol.wave.diff.WaveletDiffSnapshot: java.util.List getDocument()>();

        $r10 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label7:
        $z3 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label8;

        $r13 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r21 = (org.waveprotocol.wave.diff.DocumentDiffSnapshot) $r13;

        $r14 = new org.waveprotocol.wave.diff.impl.DocumentDiffSnapshotImpl;

        specialinvoke $r14.<org.waveprotocol.wave.diff.impl.DocumentDiffSnapshotImpl: void <init>(org.waveprotocol.wave.diff.DocumentDiffSnapshot)>(r21);

        virtualinvoke r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: void addDocument(org.waveprotocol.wave.diff.DocumentDiffSnapshot)>($r14);

        goto label7;

     label8:
        $r11 = interfaceinvoke r1.<org.waveprotocol.wave.diff.WaveletDiffSnapshot: org.waveprotocol.wave.federation.ProtocolHashedVersion getVersion()>();

        virtualinvoke r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: void setVersion(org.waveprotocol.wave.federation.ProtocolHashedVersion)>($r11);

        $d0 = interfaceinvoke r1.<org.waveprotocol.wave.diff.WaveletDiffSnapshot: double getLastModifiedTime()>();

        virtualinvoke r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: void setLastModifiedTime(double)>($d0);

        $r12 = interfaceinvoke r1.<org.waveprotocol.wave.diff.WaveletDiffSnapshot: java.lang.String getCreator()>();

        virtualinvoke r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: void setCreator(java.lang.String)>($r12);

        $d1 = interfaceinvoke r1.<org.waveprotocol.wave.diff.WaveletDiffSnapshot: double getCreationTime()>();

        virtualinvoke r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: void setCreationTime(double)>($d1);

        return;
    }

    public java.lang.String getWaveletId()
    {
        java.lang.String $r1;
        org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl;

        $r1 = r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.lang.String waveletId>;

        return $r1;
    }

    public void setWaveletId(java.lang.String)
    {
        java.lang.String r1;
        org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl;

        r1 := @parameter0: java.lang.String;

        r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.lang.String waveletId> = r1;

        return;
    }

    public java.util.List getParticipant()
    {
        java.util.List $r1, $r2;
        org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl;

        $r1 = r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.util.List participant>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public void addAllParticipant(java.util.List)
    {
        java.util.List r1, $r2;
        org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl;

        r1 := @parameter0: java.util.List;

        $r2 = r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.util.List participant>;

        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>(r1);

        return;
    }

    public java.lang.String getParticipant(int)
    {
        java.util.List $r1;
        int i0;
        java.lang.Object $r2;
        java.lang.String $r3;
        org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.util.List participant>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    public void setParticipant(int, java.lang.String)
    {
        java.util.List $r2;
        int i0;
        java.lang.String r1;
        org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.util.List participant>;

        interfaceinvoke $r2.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, r1);

        return;
    }

    public int getParticipantSize()
    {
        int $i0;
        java.util.List $r1;
        org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl;

        $r1 = r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.util.List participant>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public void addParticipant(java.lang.String)
    {
        java.util.List $r2;
        java.lang.String r1;
        org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.util.List participant>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void clearParticipant()
    {
        java.util.List $r1;
        org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl;

        $r1 = r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.util.List participant>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        return;
    }

    public java.util.List getAddedParticipant()
    {
        java.util.List $r1, $r2;
        org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl;

        $r1 = r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.util.List addedParticipant>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public void addAllAddedParticipant(java.util.List)
    {
        java.util.List r1, $r2;
        org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl;

        r1 := @parameter0: java.util.List;

        $r2 = r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.util.List addedParticipant>;

        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>(r1);

        return;
    }

    public java.lang.String getAddedParticipant(int)
    {
        java.util.List $r1;
        int i0;
        java.lang.Object $r2;
        java.lang.String $r3;
        org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.util.List addedParticipant>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    public void setAddedParticipant(int, java.lang.String)
    {
        java.util.List $r2;
        int i0;
        java.lang.String r1;
        org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.util.List addedParticipant>;

        interfaceinvoke $r2.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, r1);

        return;
    }

    public int getAddedParticipantSize()
    {
        int $i0;
        java.util.List $r1;
        org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl;

        $r1 = r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.util.List addedParticipant>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public void addAddedParticipant(java.lang.String)
    {
        java.util.List $r2;
        java.lang.String r1;
        org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.util.List addedParticipant>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void clearAddedParticipant()
    {
        java.util.List $r1;
        org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl;

        $r1 = r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.util.List addedParticipant>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        return;
    }

    public java.util.List getRemovedParticipant()
    {
        java.util.List $r1, $r2;
        org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl;

        $r1 = r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.util.List removedParticipant>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public void addAllRemovedParticipant(java.util.List)
    {
        java.util.List r1, $r2;
        org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl;

        r1 := @parameter0: java.util.List;

        $r2 = r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.util.List removedParticipant>;

        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>(r1);

        return;
    }

    public java.lang.String getRemovedParticipant(int)
    {
        java.util.List $r1;
        int i0;
        java.lang.Object $r2;
        java.lang.String $r3;
        org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.util.List removedParticipant>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    public void setRemovedParticipant(int, java.lang.String)
    {
        java.util.List $r2;
        int i0;
        java.lang.String r1;
        org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.util.List removedParticipant>;

        interfaceinvoke $r2.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, r1);

        return;
    }

    public int getRemovedParticipantSize()
    {
        int $i0;
        java.util.List $r1;
        org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl;

        $r1 = r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.util.List removedParticipant>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public void addRemovedParticipant(java.lang.String)
    {
        java.util.List $r2;
        java.lang.String r1;
        org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.util.List removedParticipant>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void clearRemovedParticipant()
    {
        java.util.List $r1;
        org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl;

        $r1 = r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.util.List removedParticipant>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        return;
    }

    public java.util.List getDocument()
    {
        java.util.List $r1, $r2;
        org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl;

        $r1 = r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.util.List document>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public void addAllDocument(java.util.List)
    {
        java.util.List r0;
        java.util.Iterator $r1;
        org.waveprotocol.wave.diff.DocumentDiffSnapshot r3;
        java.lang.Object $r2;
        org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl r4;
        boolean $z0;

        r4 := @this: org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl;

        r0 := @parameter0: java.util.List;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.waveprotocol.wave.diff.DocumentDiffSnapshot) $r2;

        virtualinvoke r4.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: void addDocument(org.waveprotocol.wave.diff.DocumentDiffSnapshot)>(r3);

        goto label1;

     label2:
        return;
    }

    public org.waveprotocol.wave.diff.impl.DocumentDiffSnapshotImpl getDocument(int)
    {
        org.waveprotocol.wave.diff.impl.DocumentDiffSnapshotImpl $r0;
        java.util.List $r2;
        int i0;
        org.waveprotocol.wave.diff.DocumentDiffSnapshot $r4;
        java.lang.Object $r3;
        org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl r1;

        r1 := @this: org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl;

        i0 := @parameter0: int;

        $r0 = new org.waveprotocol.wave.diff.impl.DocumentDiffSnapshotImpl;

        $r2 = r1.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.util.List document>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i0);

        $r4 = (org.waveprotocol.wave.diff.DocumentDiffSnapshot) $r3;

        specialinvoke $r0.<org.waveprotocol.wave.diff.impl.DocumentDiffSnapshotImpl: void <init>(org.waveprotocol.wave.diff.DocumentDiffSnapshot)>($r4);

        return $r0;
    }

    public void setDocument(int, org.waveprotocol.wave.diff.DocumentDiffSnapshot)
    {
        org.waveprotocol.wave.diff.impl.DocumentDiffSnapshotImpl $r1;
        java.util.List $r3;
        int i0;
        org.waveprotocol.wave.diff.DocumentDiffSnapshot r2;
        org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl;

        i0 := @parameter0: int;

        r2 := @parameter1: org.waveprotocol.wave.diff.DocumentDiffSnapshot;

        $r3 = r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.util.List document>;

        $r1 = new org.waveprotocol.wave.diff.impl.DocumentDiffSnapshotImpl;

        specialinvoke $r1.<org.waveprotocol.wave.diff.impl.DocumentDiffSnapshotImpl: void <init>(org.waveprotocol.wave.diff.DocumentDiffSnapshot)>(r2);

        interfaceinvoke $r3.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, $r1);

        return;
    }

    public int getDocumentSize()
    {
        int $i0;
        java.util.List $r1;
        org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl;

        $r1 = r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.util.List document>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public void addDocument(org.waveprotocol.wave.diff.DocumentDiffSnapshot)
    {
        org.waveprotocol.wave.diff.impl.DocumentDiffSnapshotImpl $r1;
        java.util.List $r3;
        org.waveprotocol.wave.diff.DocumentDiffSnapshot r2;
        org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl;

        r2 := @parameter0: org.waveprotocol.wave.diff.DocumentDiffSnapshot;

        $r3 = r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.util.List document>;

        $r1 = new org.waveprotocol.wave.diff.impl.DocumentDiffSnapshotImpl;

        specialinvoke $r1.<org.waveprotocol.wave.diff.impl.DocumentDiffSnapshotImpl: void <init>(org.waveprotocol.wave.diff.DocumentDiffSnapshot)>(r2);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }

    public void clearDocument()
    {
        java.util.List $r1;
        org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl;

        $r1 = r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.util.List document>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        return;
    }

    public org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl getVersion()
    {
        org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl $r0, $r2;
        org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl r1;

        r1 := @this: org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl;

        $r0 = new org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl;

        $r2 = r1.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl version>;

        specialinvoke $r0.<org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl: void <init>(org.waveprotocol.wave.federation.ProtocolHashedVersion)>($r2);

        return $r0;
    }

    public void setVersion(org.waveprotocol.wave.federation.ProtocolHashedVersion)
    {
        org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl $r1;
        org.waveprotocol.wave.federation.ProtocolHashedVersion r2;
        org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl;

        r2 := @parameter0: org.waveprotocol.wave.federation.ProtocolHashedVersion;

        $r1 = new org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl;

        specialinvoke $r1.<org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl: void <init>(org.waveprotocol.wave.federation.ProtocolHashedVersion)>(r2);

        r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl version> = $r1;

        return;
    }

    public double getLastModifiedTime()
    {
        org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl r0;
        java.lang.Double $r1;
        double $d0;

        r0 := @this: org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl;

        $r1 = r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.lang.Double lastModifiedTime>;

        $d0 = virtualinvoke $r1.<java.lang.Double: double doubleValue()>();

        return $d0;
    }

    public void setLastModifiedTime(double)
    {
        org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl r0;
        java.lang.Double $r1;
        double d0;

        r0 := @this: org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl;

        d0 := @parameter0: double;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.lang.Double lastModifiedTime> = $r1;

        return;
    }

    public java.lang.String getCreator()
    {
        java.lang.String $r1;
        org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl;

        $r1 = r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.lang.String creator>;

        return $r1;
    }

    public void setCreator(java.lang.String)
    {
        java.lang.String r1;
        org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl;

        r1 := @parameter0: java.lang.String;

        r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.lang.String creator> = r1;

        return;
    }

    public double getCreationTime()
    {
        org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl r0;
        java.lang.Double $r1;
        double $d0;

        r0 := @this: org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl;

        $r1 = r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.lang.Double creationTime>;

        $d0 = virtualinvoke $r1.<java.lang.Double: double doubleValue()>();

        return $d0;
    }

    public void setCreationTime(double)
    {
        org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl r0;
        java.lang.Double $r1;
        double d0;

        r0 := @this: org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl;

        d0 := @parameter0: double;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.lang.Double creationTime> = $r1;

        return;
    }

    protected void reset()
    {
        java.util.List $r1, $r2, $r3, $r4;
        org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl;

        r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.lang.String waveletId> = null;

        $r1 = r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.util.List participant>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        $r2 = r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.util.List addedParticipant>;

        interfaceinvoke $r2.<java.util.List: void clear()>();

        $r3 = r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.util.List removedParticipant>;

        interfaceinvoke $r3.<java.util.List: void clear()>();

        $r4 = r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.util.List document>;

        interfaceinvoke $r4.<java.util.List: void clear()>();

        r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl version> = null;

        r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.lang.Double lastModifiedTime> = null;

        r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.lang.String creator> = null;

        r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: java.lang.Double creationTime> = null;

        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object r0;
        org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl r1;
        boolean $z0, $z1, $z2;

        r1 := @this: org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl;

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r1.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: boolean isEqualTo(java.lang.Object)>(r0);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean isEqualTo(java.lang.Object)
    {
        org.waveprotocol.wave.diff.WaveletDiffSnapshot $r2;
        java.lang.Object r0;
        org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl r1;
        boolean $z0, $z1;

        r1 := @this: org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r0 instanceof org.waveprotocol.wave.diff.WaveletDiffSnapshot;

        if $z0 == 0 goto label2;

        $r2 = (org.waveprotocol.wave.diff.WaveletDiffSnapshot) r0;

        $z1 = staticinvoke <org.waveprotocol.wave.diff.WaveletDiffSnapshotUtil: boolean isEqual(org.waveprotocol.wave.diff.WaveletDiffSnapshot,org.waveprotocol.wave.diff.WaveletDiffSnapshot)>(r1, $r2);

        return $z1;

     label2:
        return 0;
    }

    public int hashCode()
    {
        int $i0;
        org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl;

        $i0 = staticinvoke <org.waveprotocol.wave.diff.WaveletDiffSnapshotUtil: int getHashCode(org.waveprotocol.wave.diff.WaveletDiffSnapshot)>(r0);

        return $i0;
    }

    public volatile org.waveprotocol.wave.federation.ProtocolHashedVersion getVersion()
    {
        org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl $r1;
        org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl getVersion()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.diff.DocumentDiffSnapshot getDocument(int)
    {
        int i0;
        org.waveprotocol.wave.diff.impl.DocumentDiffSnapshotImpl $r1;
        org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.diff.impl.WaveletDiffSnapshotImpl: org.waveprotocol.wave.diff.impl.DocumentDiffSnapshotImpl getDocument(int)>(i0);

        return $r1;
    }
}
