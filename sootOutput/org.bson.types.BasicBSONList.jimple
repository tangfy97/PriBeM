public class org.bson.types.BasicBSONList extends java.util.ArrayList implements org.bson.BSONObject
{

    public void <init>()
    {
        org.bson.types.BasicBSONList r0;

        r0 := @this: org.bson.types.BasicBSONList;

        specialinvoke r0.<java.util.ArrayList: void <init>()>();

        return;
    }

    public java.lang.Object put(java.lang.String, java.lang.Object)
    {
        org.bson.types.BasicBSONList r0;
        int $i0;
        java.lang.Object r2, $r3;
        java.lang.String r1;

        r0 := @this: org.bson.types.BasicBSONList;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $i0 = virtualinvoke r0.<org.bson.types.BasicBSONList: int _getInt(java.lang.String)>(r1);

        $r3 = virtualinvoke r0.<org.bson.types.BasicBSONList: java.lang.Object put(int,java.lang.Object)>($i0, r2);

        return $r3;
    }

    public java.lang.Object put(int, java.lang.Object)
    {
        org.bson.types.BasicBSONList r0;
        int i0, $i1;
        java.lang.Object r1;

        r0 := @this: org.bson.types.BasicBSONList;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

     label1:
        $i1 = virtualinvoke r0.<org.bson.types.BasicBSONList: int size()>();

        if i0 < $i1 goto label2;

        virtualinvoke r0.<org.bson.types.BasicBSONList: boolean add(java.lang.Object)>(null);

        goto label1;

     label2:
        virtualinvoke r0.<org.bson.types.BasicBSONList: java.lang.Object set(int,java.lang.Object)>(i0, r1);

        return r1;
    }

    public void putAll(java.util.Map)
    {
        java.util.Map$Entry r4;
        org.bson.types.BasicBSONList r5;
        java.util.Iterator $r2;
        java.util.Set $r1;
        java.util.Map r0;
        java.lang.Object $r3, $r6, $r8;
        java.lang.String $r7;
        boolean $z0;

        r5 := @this: org.bson.types.BasicBSONList;

        r0 := @parameter0: java.util.Map;

        $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r3;

        $r6 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        $r8 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r5.<org.bson.types.BasicBSONList: java.lang.Object put(java.lang.String,java.lang.Object)>($r7, $r8);

        goto label1;

     label2:
        return;
    }

    public void putAll(org.bson.BSONObject)
    {
        org.bson.types.BasicBSONList r5;
        java.util.Iterator $r2;
        org.bson.BSONObject r0;
        java.util.Set $r1;
        java.lang.Object $r3, $r6;
        java.lang.String r4;
        boolean $z0;

        r5 := @this: org.bson.types.BasicBSONList;

        r0 := @parameter0: org.bson.BSONObject;

        $r1 = interfaceinvoke r0.<org.bson.BSONObject: java.util.Set keySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r3;

        $r6 = interfaceinvoke r0.<org.bson.BSONObject: java.lang.Object get(java.lang.String)>(r4);

        virtualinvoke r5.<org.bson.types.BasicBSONList: java.lang.Object put(java.lang.String,java.lang.Object)>(r4, $r6);

        goto label1;

     label2:
        return;
    }

    public java.lang.Object get(java.lang.String)
    {
        org.bson.types.BasicBSONList r0;
        int $i0, $i1;
        java.lang.Object $r2;
        java.lang.String r1;

        r0 := @this: org.bson.types.BasicBSONList;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<org.bson.types.BasicBSONList: int _getInt(java.lang.String)>(r1);

        if $i0 >= 0 goto label1;

        return null;

     label1:
        $i1 = virtualinvoke r0.<org.bson.types.BasicBSONList: int size()>();

        if $i0 < $i1 goto label2;

        return null;

     label2:
        $r2 = virtualinvoke r0.<org.bson.types.BasicBSONList: java.lang.Object get(int)>($i0);

        return $r2;
    }

    public java.lang.Object removeField(java.lang.String)
    {
        org.bson.types.BasicBSONList r0;
        int $i0, $i1;
        java.lang.Object $r2;
        java.lang.String r1;

        r0 := @this: org.bson.types.BasicBSONList;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<org.bson.types.BasicBSONList: int _getInt(java.lang.String)>(r1);

        if $i0 >= 0 goto label1;

        return null;

     label1:
        $i1 = virtualinvoke r0.<org.bson.types.BasicBSONList: int size()>();

        if $i0 < $i1 goto label2;

        return null;

     label2:
        $r2 = virtualinvoke r0.<org.bson.types.BasicBSONList: java.lang.Object remove(int)>($i0);

        return $r2;
    }

    public boolean containsKey(java.lang.String)
    {
        org.bson.types.BasicBSONList r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.bson.types.BasicBSONList;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.bson.types.BasicBSONList: boolean containsField(java.lang.String)>(r1);

        return $z0;
    }

    public boolean containsField(java.lang.String)
    {
        org.bson.types.BasicBSONList r0;
        int $i0, $i1;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.bson.types.BasicBSONList;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<org.bson.types.BasicBSONList: int _getInt(java.lang.String,boolean)>(r1, 0);

        if $i0 >= 0 goto label1;

        return 0;

     label1:
        if $i0 < 0 goto label2;

        $i1 = virtualinvoke r0.<org.bson.types.BasicBSONList: int size()>();

        if $i0 >= $i1 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public java.util.Set keySet()
    {
        com.mongodb.util.OrderedSet $r0;
        org.bson.types.BasicBSONList r1;
        int $i0, i1;
        java.lang.String $r2;

        r1 := @this: org.bson.types.BasicBSONList;

        $r0 = new com.mongodb.util.OrderedSet;

        specialinvoke $r0.<com.mongodb.util.OrderedSet: void <init>()>();

        i1 = 0;

     label1:
        $i0 = virtualinvoke r1.<org.bson.types.BasicBSONList: int size()>();

        if i1 >= $i0 goto label2;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i1);

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r0;
    }

    public java.util.Map toMap()
    {
        org.bson.types.BasicBSONList r1;
        java.util.Iterator $r3;
        java.util.Set $r2;
        java.util.HashMap $r0;
        java.lang.Object $r4, $r9;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;
        boolean $z0;

        r1 := @this: org.bson.types.BasicBSONList;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r2 = virtualinvoke r1.<org.bson.types.BasicBSONList: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = virtualinvoke r1.<org.bson.types.BasicBSONList: java.lang.Object get(java.lang.String)>($r8);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r9);

        goto label1;

     label2:
        return $r0;
    }

    int _getInt(java.lang.String)
    {
        int $i0;
        org.bson.types.BasicBSONList r0;
        java.lang.String r1;

        r0 := @this: org.bson.types.BasicBSONList;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<org.bson.types.BasicBSONList: int _getInt(java.lang.String,boolean)>(r1, 1);

        return $i0;
    }

    int _getInt(java.lang.String, boolean)
    {
        org.bson.types.BasicBSONList r8;
        java.lang.IllegalArgumentException $r10;
        java.lang.Exception $r1;
        int $i0, $i2;
        java.lang.StringBuilder $r4, $r5, $r6, $r9;
        java.lang.String r0, $r7;
        boolean z0;

        r8 := @this: org.bson.types.BasicBSONList;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

     label1:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r0);

     label2:
        return $i0;

     label3:
        $r1 := @caughtexception;

        if z0 == 0 goto label4;

        $r10 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BasicBSONList can only work with numeric keys, not: [");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r10;

     label4:
        $i2 = (int) -1;

        return $i2;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
