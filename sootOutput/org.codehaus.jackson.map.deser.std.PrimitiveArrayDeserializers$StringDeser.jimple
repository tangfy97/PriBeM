final class org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$StringDeser extends org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$Base
{

    public void <init>()
    {
        org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$StringDeser r0;

        r0 := @this: org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$StringDeser;

        specialinvoke r0.<org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$Base: void <init>(java.lang.Class)>(class "[Ljava/lang/String;");

        return;
    }

    public java.lang.String[] deserialize(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.JsonToken $r3, $r4, $r6;
        java.lang.Object[] $r5, r9;
        java.lang.String[] $r8, r12;
        org.codehaus.jackson.map.DeserializationContext r1;
        org.codehaus.jackson.map.util.ObjectBuffer $r2;
        int $i0, $i1, i2;
        org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$StringDeser r7;
        java.lang.String $r10, r11;
        org.codehaus.jackson.JsonParser r0;
        boolean $z0;

        r7 := @this: org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$StringDeser;

        r0 := @parameter0: org.codehaus.jackson.JsonParser;

        r1 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: boolean isExpectedStartArrayToken()>();

        if $z0 != 0 goto label1;

        $r8 = specialinvoke r7.<org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$StringDeser: java.lang.String[] handleNonArray(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>(r0, r1);

        return $r8;

     label1:
        $r2 = virtualinvoke r1.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.util.ObjectBuffer leaseObjectBuffer()>();

        r9 = virtualinvoke $r2.<org.codehaus.jackson.map.util.ObjectBuffer: java.lang.Object[] resetAndStart()>();

        i2 = 0;

     label2:
        $r3 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_ARRAY>;

        if $r3 == $r4 goto label6;

        $r6 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NULL>;

        if $r3 != $r6 goto label3;

        $r10 = null;

        goto label4;

     label3:
        $r10 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

     label4:
        r11 = $r10;

        $i0 = lengthof r9;

        if i2 < $i0 goto label5;

        r9 = virtualinvoke $r2.<org.codehaus.jackson.map.util.ObjectBuffer: java.lang.Object[] appendCompletedChunk(java.lang.Object[])>(r9);

        i2 = 0;

     label5:
        $i1 = i2;

        i2 = i2 + 1;

        r9[$i1] = r11;

        goto label2;

     label6:
        $r5 = virtualinvoke $r2.<org.codehaus.jackson.map.util.ObjectBuffer: java.lang.Object[] completeAndClearBuffer(java.lang.Object[],int,java.lang.Class)>(r9, i2, class "Ljava/lang/String;");

        r12 = (java.lang.String[]) $r5;

        virtualinvoke r1.<org.codehaus.jackson.map.DeserializationContext: void returnObjectBuffer(org.codehaus.jackson.map.util.ObjectBuffer)>($r2);

        return r12;
    }

    private final java.lang.String[] handleNonArray(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.JsonToken $r4, $r5, $r6, $r7;
        java.lang.String[] $r2;
        org.codehaus.jackson.map.DeserializationContext r0;
        org.codehaus.jackson.map.JsonMappingException $r12;
        org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$StringDeser r8;
        int $i0;
        java.lang.String $r10, $r13;
        org.codehaus.jackson.JsonParser r3;
        boolean $z0, $z1;
        org.codehaus.jackson.map.DeserializationConfig$Feature $r1, $r9;
        java.lang.Class $r11;

        r8 := @this: org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$StringDeser;

        r3 := @parameter0: org.codehaus.jackson.JsonParser;

        r0 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r1 = <org.codehaus.jackson.map.DeserializationConfig$Feature: org.codehaus.jackson.map.DeserializationConfig$Feature ACCEPT_SINGLE_VALUE_AS_ARRAY>;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.DeserializationContext: boolean isEnabled(org.codehaus.jackson.map.DeserializationConfig$Feature)>($r1);

        if $z0 != 0 goto label2;

        $r6 = virtualinvoke r3.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r7 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        if $r6 != $r7 goto label1;

        $r9 = <org.codehaus.jackson.map.DeserializationConfig$Feature: org.codehaus.jackson.map.DeserializationConfig$Feature ACCEPT_EMPTY_STRING_AS_NULL_OBJECT>;

        $z1 = virtualinvoke r0.<org.codehaus.jackson.map.DeserializationContext: boolean isEnabled(org.codehaus.jackson.map.DeserializationConfig$Feature)>($r9);

        if $z1 == 0 goto label1;

        $r10 = virtualinvoke r3.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        $i0 = virtualinvoke $r10.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        return null;

     label1:
        $r11 = r8.<org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$StringDeser: java.lang.Class _valueClass>;

        $r12 = virtualinvoke r0.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class)>($r11);

        throw $r12;

     label2:
        $r2 = newarray (java.lang.String)[1];

        $r4 = virtualinvoke r3.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r5 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NULL>;

        if $r4 != $r5 goto label3;

        $r13 = null;

        goto label4;

     label3:
        $r13 = virtualinvoke r3.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

     label4:
        $r2[0] = $r13;

        return $r2;
    }

    public volatile java.lang.Object deserialize(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$StringDeser r0;
        java.lang.String[] $r3;
        org.codehaus.jackson.JsonParser r1;
        org.codehaus.jackson.map.DeserializationContext r2;

        r0 := @this: org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$StringDeser;

        r1 := @parameter0: org.codehaus.jackson.JsonParser;

        r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$StringDeser: java.lang.String[] deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>(r1, r2);

        return $r3;
    }
}
