public class org.apache.fontbox.afm.FontMetric extends java.lang.Object
{
    private float afmVersion;
    private int metricSets;
    private java.lang.String fontName;
    private java.lang.String fullName;
    private java.lang.String familyName;
    private java.lang.String weight;
    private org.apache.fontbox.util.BoundingBox fontBBox;
    private java.lang.String fontVersion;
    private java.lang.String notice;
    private java.lang.String encodingScheme;
    private int mappingScheme;
    private int escChar;
    private java.lang.String characterSet;
    private int characters;
    private boolean isBaseFont;
    private float[] vVector;
    private boolean isFixedV;
    private float capHeight;
    private float xHeight;
    private float ascender;
    private float descender;
    private java.util.List comments;
    private float underlinePosition;
    private float underlineThickness;
    private float italicAngle;
    private float[] charWidth;
    private boolean isFixedPitch;
    private float standardHorizontalWidth;
    private float standardVerticalWidth;
    private java.util.List charMetrics;
    private java.util.Map charMetricsMap;
    private java.util.List trackKern;
    private java.util.List composites;
    private java.util.List kernPairs;
    private java.util.List kernPairs0;
    private java.util.List kernPairs1;

    public void <init>()
    {
        java.util.HashMap $r3;
        java.util.ArrayList $r1, $r2, $r4, $r5, $r6, $r7, $r8;
        org.apache.fontbox.afm.FontMetric r0;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.fontbox.afm.FontMetric: int metricSets> = 0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.fontbox.afm.FontMetric: java.util.List comments> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.fontbox.afm.FontMetric: java.util.List charMetrics> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.apache.fontbox.afm.FontMetric: java.util.Map charMetricsMap> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.fontbox.afm.FontMetric: java.util.List trackKern> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.fontbox.afm.FontMetric: java.util.List composites> = $r5;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.fontbox.afm.FontMetric: java.util.List kernPairs> = $r6;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.fontbox.afm.FontMetric: java.util.List kernPairs0> = $r7;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.fontbox.afm.FontMetric: java.util.List kernPairs1> = $r8;

        return;
    }

    public float getCharacterWidth(java.lang.String) throws java.io.IOException
    {
        org.apache.fontbox.afm.CharMetric r4;
        java.util.Map $r2;
        float f0;
        org.apache.fontbox.afm.FontMetric r0;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.fontbox.afm.FontMetric: java.util.Map charMetricsMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.apache.fontbox.afm.CharMetric) $r3;

        if r4 != null goto label1;

        f0 = 0.0F;

        goto label2;

     label1:
        f0 = virtualinvoke r4.<org.apache.fontbox.afm.CharMetric: float getWx()>();

     label2:
        return f0;
    }

    public float getCharacterHeight(java.lang.String) throws java.io.IOException
    {
        org.apache.fontbox.util.BoundingBox $r5;
        org.apache.fontbox.afm.CharMetric r4;
        byte $b0;
        java.util.Map $r2;
        float $f0, f1;
        org.apache.fontbox.afm.FontMetric r0;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.fontbox.afm.FontMetric: java.util.Map charMetricsMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.apache.fontbox.afm.CharMetric) $r3;

        if r4 != null goto label1;

        f1 = 0.0F;

        goto label3;

     label1:
        $f0 = virtualinvoke r4.<org.apache.fontbox.afm.CharMetric: float getWy()>();

        $b0 = $f0 cmpl 0.0F;

        if $b0 != 0 goto label2;

        $r5 = virtualinvoke r4.<org.apache.fontbox.afm.CharMetric: org.apache.fontbox.util.BoundingBox getBoundingBox()>();

        f1 = virtualinvoke $r5.<org.apache.fontbox.util.BoundingBox: float getHeight()>();

        goto label3;

     label2:
        f1 = virtualinvoke r4.<org.apache.fontbox.afm.CharMetric: float getWy()>();

     label3:
        return f1;
    }

    public float getAverageCharacterWidth() throws java.io.IOException
    {
        byte $b0, $b1;
        java.util.Map $r1;
        int $i2, $i3;
        org.apache.fontbox.afm.FontMetric r0;
        boolean $z0;
        java.util.Iterator $r3;
        java.util.Collection $r2;
        org.apache.fontbox.afm.CharMetric r5;
        float $f0, $f1, f2, f3, f4;
        java.lang.Object $r4;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        f2 = 0.0F;

        f3 = 0.0F;

        f4 = 0.0F;

        $r1 = r0.<org.apache.fontbox.afm.FontMetric: java.util.Map charMetricsMap>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.fontbox.afm.CharMetric) $r4;

        $f0 = virtualinvoke r5.<org.apache.fontbox.afm.CharMetric: float getWx()>();

        $b1 = $f0 cmpl 0.0F;

        $i2 = (int) $b1;

        if $i2 <= 0 goto label2;

        $f1 = virtualinvoke r5.<org.apache.fontbox.afm.CharMetric: float getWx()>();

        f3 = f3 + $f1;

        f4 = f4 + 1.0F;

     label2:
        goto label1;

     label3:
        $b0 = f3 cmpl 0.0F;

        $i3 = (int) $b0;

        if $i3 <= 0 goto label4;

        f2 = f3 / f4;

     label4:
        return f2;
    }

    public void addComment(java.lang.String)
    {
        org.apache.fontbox.afm.FontMetric r0;
        java.util.List $r2;
        java.lang.String r1;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.fontbox.afm.FontMetric: java.util.List comments>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public java.util.List getComments()
    {
        org.apache.fontbox.afm.FontMetric r0;
        java.util.List $r1;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        $r1 = r0.<org.apache.fontbox.afm.FontMetric: java.util.List comments>;

        return $r1;
    }

    public float getAFMVersion()
    {
        float $f0;
        org.apache.fontbox.afm.FontMetric r0;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        $f0 = r0.<org.apache.fontbox.afm.FontMetric: float afmVersion>;

        return $f0;
    }

    public int getMetricSets()
    {
        int $i0;
        org.apache.fontbox.afm.FontMetric r0;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        $i0 = r0.<org.apache.fontbox.afm.FontMetric: int metricSets>;

        return $i0;
    }

    public void setAFMVersion(float)
    {
        float f0;
        org.apache.fontbox.afm.FontMetric r0;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        f0 := @parameter0: float;

        r0.<org.apache.fontbox.afm.FontMetric: float afmVersion> = f0;

        return;
    }

    public void setMetricSets(int)
    {
        java.lang.RuntimeException $r0;
        int i0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4;
        org.apache.fontbox.afm.FontMetric r6;
        java.lang.String $r5;

        r6 := @this: org.apache.fontbox.afm.FontMetric;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        if i0 <= 2 goto label2;

     label1:
        $r0 = new java.lang.RuntimeException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The metricSets attribute must be in the set {0,1,2} and not \'");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>($r5);

        throw $r0;

     label2:
        r6.<org.apache.fontbox.afm.FontMetric: int metricSets> = i0;

        return;
    }

    public java.lang.String getFontName()
    {
        org.apache.fontbox.afm.FontMetric r0;
        java.lang.String $r1;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        $r1 = r0.<org.apache.fontbox.afm.FontMetric: java.lang.String fontName>;

        return $r1;
    }

    public void setFontName(java.lang.String)
    {
        org.apache.fontbox.afm.FontMetric r0;
        java.lang.String r1;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.fontbox.afm.FontMetric: java.lang.String fontName> = r1;

        return;
    }

    public java.lang.String getFullName()
    {
        org.apache.fontbox.afm.FontMetric r0;
        java.lang.String $r1;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        $r1 = r0.<org.apache.fontbox.afm.FontMetric: java.lang.String fullName>;

        return $r1;
    }

    public void setFullName(java.lang.String)
    {
        org.apache.fontbox.afm.FontMetric r0;
        java.lang.String r1;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.fontbox.afm.FontMetric: java.lang.String fullName> = r1;

        return;
    }

    public java.lang.String getFamilyName()
    {
        org.apache.fontbox.afm.FontMetric r0;
        java.lang.String $r1;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        $r1 = r0.<org.apache.fontbox.afm.FontMetric: java.lang.String familyName>;

        return $r1;
    }

    public void setFamilyName(java.lang.String)
    {
        org.apache.fontbox.afm.FontMetric r0;
        java.lang.String r1;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.fontbox.afm.FontMetric: java.lang.String familyName> = r1;

        return;
    }

    public java.lang.String getWeight()
    {
        org.apache.fontbox.afm.FontMetric r0;
        java.lang.String $r1;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        $r1 = r0.<org.apache.fontbox.afm.FontMetric: java.lang.String weight>;

        return $r1;
    }

    public void setWeight(java.lang.String)
    {
        org.apache.fontbox.afm.FontMetric r0;
        java.lang.String r1;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.fontbox.afm.FontMetric: java.lang.String weight> = r1;

        return;
    }

    public org.apache.fontbox.util.BoundingBox getFontBBox()
    {
        org.apache.fontbox.afm.FontMetric r0;
        org.apache.fontbox.util.BoundingBox $r1;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        $r1 = r0.<org.apache.fontbox.afm.FontMetric: org.apache.fontbox.util.BoundingBox fontBBox>;

        return $r1;
    }

    public void setFontBBox(org.apache.fontbox.util.BoundingBox)
    {
        org.apache.fontbox.afm.FontMetric r0;
        org.apache.fontbox.util.BoundingBox r1;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        r1 := @parameter0: org.apache.fontbox.util.BoundingBox;

        r0.<org.apache.fontbox.afm.FontMetric: org.apache.fontbox.util.BoundingBox fontBBox> = r1;

        return;
    }

    public java.lang.String getNotice()
    {
        org.apache.fontbox.afm.FontMetric r0;
        java.lang.String $r1;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        $r1 = r0.<org.apache.fontbox.afm.FontMetric: java.lang.String notice>;

        return $r1;
    }

    public void setNotice(java.lang.String)
    {
        org.apache.fontbox.afm.FontMetric r0;
        java.lang.String r1;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.fontbox.afm.FontMetric: java.lang.String notice> = r1;

        return;
    }

    public java.lang.String getEncodingScheme()
    {
        org.apache.fontbox.afm.FontMetric r0;
        java.lang.String $r1;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        $r1 = r0.<org.apache.fontbox.afm.FontMetric: java.lang.String encodingScheme>;

        return $r1;
    }

    public void setEncodingScheme(java.lang.String)
    {
        org.apache.fontbox.afm.FontMetric r0;
        java.lang.String r1;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.fontbox.afm.FontMetric: java.lang.String encodingScheme> = r1;

        return;
    }

    public int getMappingScheme()
    {
        int $i0;
        org.apache.fontbox.afm.FontMetric r0;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        $i0 = r0.<org.apache.fontbox.afm.FontMetric: int mappingScheme>;

        return $i0;
    }

    public void setMappingScheme(int)
    {
        int i0;
        org.apache.fontbox.afm.FontMetric r0;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        i0 := @parameter0: int;

        r0.<org.apache.fontbox.afm.FontMetric: int mappingScheme> = i0;

        return;
    }

    public int getEscChar()
    {
        int $i0;
        org.apache.fontbox.afm.FontMetric r0;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        $i0 = r0.<org.apache.fontbox.afm.FontMetric: int escChar>;

        return $i0;
    }

    public void setEscChar(int)
    {
        int i0;
        org.apache.fontbox.afm.FontMetric r0;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        i0 := @parameter0: int;

        r0.<org.apache.fontbox.afm.FontMetric: int escChar> = i0;

        return;
    }

    public java.lang.String getCharacterSet()
    {
        org.apache.fontbox.afm.FontMetric r0;
        java.lang.String $r1;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        $r1 = r0.<org.apache.fontbox.afm.FontMetric: java.lang.String characterSet>;

        return $r1;
    }

    public void setCharacterSet(java.lang.String)
    {
        org.apache.fontbox.afm.FontMetric r0;
        java.lang.String r1;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.fontbox.afm.FontMetric: java.lang.String characterSet> = r1;

        return;
    }

    public int getCharacters()
    {
        int $i0;
        org.apache.fontbox.afm.FontMetric r0;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        $i0 = r0.<org.apache.fontbox.afm.FontMetric: int characters>;

        return $i0;
    }

    public void setCharacters(int)
    {
        int i0;
        org.apache.fontbox.afm.FontMetric r0;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        i0 := @parameter0: int;

        r0.<org.apache.fontbox.afm.FontMetric: int characters> = i0;

        return;
    }

    public boolean isBaseFont()
    {
        org.apache.fontbox.afm.FontMetric r0;
        boolean $z0;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        $z0 = r0.<org.apache.fontbox.afm.FontMetric: boolean isBaseFont>;

        return $z0;
    }

    public void setIsBaseFont(boolean)
    {
        org.apache.fontbox.afm.FontMetric r0;
        boolean z0;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        z0 := @parameter0: boolean;

        r0.<org.apache.fontbox.afm.FontMetric: boolean isBaseFont> = z0;

        return;
    }

    public float[] getVVector()
    {
        org.apache.fontbox.afm.FontMetric r0;
        float[] $r1;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        $r1 = r0.<org.apache.fontbox.afm.FontMetric: float[] vVector>;

        return $r1;
    }

    public void setVVector(float[])
    {
        org.apache.fontbox.afm.FontMetric r0;
        float[] r1;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        r1 := @parameter0: float[];

        r0.<org.apache.fontbox.afm.FontMetric: float[] vVector> = r1;

        return;
    }

    public boolean isFixedV()
    {
        org.apache.fontbox.afm.FontMetric r0;
        boolean $z0;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        $z0 = r0.<org.apache.fontbox.afm.FontMetric: boolean isFixedV>;

        return $z0;
    }

    public void setIsFixedV(boolean)
    {
        org.apache.fontbox.afm.FontMetric r0;
        boolean z0;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        z0 := @parameter0: boolean;

        r0.<org.apache.fontbox.afm.FontMetric: boolean isFixedV> = z0;

        return;
    }

    public float getCapHeight()
    {
        float $f0;
        org.apache.fontbox.afm.FontMetric r0;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        $f0 = r0.<org.apache.fontbox.afm.FontMetric: float capHeight>;

        return $f0;
    }

    public void setCapHeight(float)
    {
        float f0;
        org.apache.fontbox.afm.FontMetric r0;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        f0 := @parameter0: float;

        r0.<org.apache.fontbox.afm.FontMetric: float capHeight> = f0;

        return;
    }

    public float getXHeight()
    {
        float $f0;
        org.apache.fontbox.afm.FontMetric r0;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        $f0 = r0.<org.apache.fontbox.afm.FontMetric: float xHeight>;

        return $f0;
    }

    public void setXHeight(float)
    {
        float f0;
        org.apache.fontbox.afm.FontMetric r0;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        f0 := @parameter0: float;

        r0.<org.apache.fontbox.afm.FontMetric: float xHeight> = f0;

        return;
    }

    public float getAscender()
    {
        float $f0;
        org.apache.fontbox.afm.FontMetric r0;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        $f0 = r0.<org.apache.fontbox.afm.FontMetric: float ascender>;

        return $f0;
    }

    public void setAscender(float)
    {
        float f0;
        org.apache.fontbox.afm.FontMetric r0;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        f0 := @parameter0: float;

        r0.<org.apache.fontbox.afm.FontMetric: float ascender> = f0;

        return;
    }

    public float getDescender()
    {
        float $f0;
        org.apache.fontbox.afm.FontMetric r0;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        $f0 = r0.<org.apache.fontbox.afm.FontMetric: float descender>;

        return $f0;
    }

    public void setDescender(float)
    {
        float f0;
        org.apache.fontbox.afm.FontMetric r0;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        f0 := @parameter0: float;

        r0.<org.apache.fontbox.afm.FontMetric: float descender> = f0;

        return;
    }

    public java.lang.String getFontVersion()
    {
        org.apache.fontbox.afm.FontMetric r0;
        java.lang.String $r1;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        $r1 = r0.<org.apache.fontbox.afm.FontMetric: java.lang.String fontVersion>;

        return $r1;
    }

    public void setFontVersion(java.lang.String)
    {
        org.apache.fontbox.afm.FontMetric r0;
        java.lang.String r1;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.fontbox.afm.FontMetric: java.lang.String fontVersion> = r1;

        return;
    }

    public float getUnderlinePosition()
    {
        float $f0;
        org.apache.fontbox.afm.FontMetric r0;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        $f0 = r0.<org.apache.fontbox.afm.FontMetric: float underlinePosition>;

        return $f0;
    }

    public void setUnderlinePosition(float)
    {
        float f0;
        org.apache.fontbox.afm.FontMetric r0;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        f0 := @parameter0: float;

        r0.<org.apache.fontbox.afm.FontMetric: float underlinePosition> = f0;

        return;
    }

    public float getUnderlineThickness()
    {
        float $f0;
        org.apache.fontbox.afm.FontMetric r0;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        $f0 = r0.<org.apache.fontbox.afm.FontMetric: float underlineThickness>;

        return $f0;
    }

    public void setUnderlineThickness(float)
    {
        float f0;
        org.apache.fontbox.afm.FontMetric r0;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        f0 := @parameter0: float;

        r0.<org.apache.fontbox.afm.FontMetric: float underlineThickness> = f0;

        return;
    }

    public float getItalicAngle()
    {
        float $f0;
        org.apache.fontbox.afm.FontMetric r0;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        $f0 = r0.<org.apache.fontbox.afm.FontMetric: float italicAngle>;

        return $f0;
    }

    public void setItalicAngle(float)
    {
        float f0;
        org.apache.fontbox.afm.FontMetric r0;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        f0 := @parameter0: float;

        r0.<org.apache.fontbox.afm.FontMetric: float italicAngle> = f0;

        return;
    }

    public float[] getCharWidth()
    {
        org.apache.fontbox.afm.FontMetric r0;
        float[] $r1;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        $r1 = r0.<org.apache.fontbox.afm.FontMetric: float[] charWidth>;

        return $r1;
    }

    public void setCharWidth(float[])
    {
        org.apache.fontbox.afm.FontMetric r0;
        float[] r1;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        r1 := @parameter0: float[];

        r0.<org.apache.fontbox.afm.FontMetric: float[] charWidth> = r1;

        return;
    }

    public boolean isFixedPitch()
    {
        org.apache.fontbox.afm.FontMetric r0;
        boolean $z0;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        $z0 = r0.<org.apache.fontbox.afm.FontMetric: boolean isFixedPitch>;

        return $z0;
    }

    public void setFixedPitch(boolean)
    {
        org.apache.fontbox.afm.FontMetric r0;
        boolean z0;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        z0 := @parameter0: boolean;

        r0.<org.apache.fontbox.afm.FontMetric: boolean isFixedPitch> = z0;

        return;
    }

    public java.util.List getCharMetrics()
    {
        org.apache.fontbox.afm.FontMetric r0;
        java.util.List $r1;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        $r1 = r0.<org.apache.fontbox.afm.FontMetric: java.util.List charMetrics>;

        return $r1;
    }

    public void setCharMetrics(java.util.List)
    {
        org.apache.fontbox.afm.FontMetric r0;
        java.util.List r1;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        r1 := @parameter0: java.util.List;

        r0.<org.apache.fontbox.afm.FontMetric: java.util.List charMetrics> = r1;

        return;
    }

    public void addCharMetric(org.apache.fontbox.afm.CharMetric)
    {
        java.util.List $r2;
        org.apache.fontbox.afm.CharMetric r1;
        java.util.Map $r3;
        org.apache.fontbox.afm.FontMetric r0;
        java.lang.String $r4;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        r1 := @parameter0: org.apache.fontbox.afm.CharMetric;

        $r2 = r0.<org.apache.fontbox.afm.FontMetric: java.util.List charMetrics>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r3 = r0.<org.apache.fontbox.afm.FontMetric: java.util.Map charMetricsMap>;

        $r4 = virtualinvoke r1.<org.apache.fontbox.afm.CharMetric: java.lang.String getName()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r1);

        return;
    }

    public java.util.List getTrackKern()
    {
        org.apache.fontbox.afm.FontMetric r0;
        java.util.List $r1;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        $r1 = r0.<org.apache.fontbox.afm.FontMetric: java.util.List trackKern>;

        return $r1;
    }

    public void setTrackKern(java.util.List)
    {
        org.apache.fontbox.afm.FontMetric r0;
        java.util.List r1;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        r1 := @parameter0: java.util.List;

        r0.<org.apache.fontbox.afm.FontMetric: java.util.List trackKern> = r1;

        return;
    }

    public void addTrackKern(org.apache.fontbox.afm.TrackKern)
    {
        org.apache.fontbox.afm.TrackKern r1;
        org.apache.fontbox.afm.FontMetric r0;
        java.util.List $r2;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        r1 := @parameter0: org.apache.fontbox.afm.TrackKern;

        $r2 = r0.<org.apache.fontbox.afm.FontMetric: java.util.List trackKern>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public java.util.List getComposites()
    {
        org.apache.fontbox.afm.FontMetric r0;
        java.util.List $r1;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        $r1 = r0.<org.apache.fontbox.afm.FontMetric: java.util.List composites>;

        return $r1;
    }

    public void setComposites(java.util.List)
    {
        org.apache.fontbox.afm.FontMetric r0;
        java.util.List r1;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        r1 := @parameter0: java.util.List;

        r0.<org.apache.fontbox.afm.FontMetric: java.util.List composites> = r1;

        return;
    }

    public void addComposite(org.apache.fontbox.afm.Composite)
    {
        org.apache.fontbox.afm.Composite r1;
        org.apache.fontbox.afm.FontMetric r0;
        java.util.List $r2;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        r1 := @parameter0: org.apache.fontbox.afm.Composite;

        $r2 = r0.<org.apache.fontbox.afm.FontMetric: java.util.List composites>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public java.util.List getKernPairs()
    {
        org.apache.fontbox.afm.FontMetric r0;
        java.util.List $r1;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        $r1 = r0.<org.apache.fontbox.afm.FontMetric: java.util.List kernPairs>;

        return $r1;
    }

    public void addKernPair(org.apache.fontbox.afm.KernPair)
    {
        org.apache.fontbox.afm.FontMetric r0;
        java.util.List $r2;
        org.apache.fontbox.afm.KernPair r1;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        r1 := @parameter0: org.apache.fontbox.afm.KernPair;

        $r2 = r0.<org.apache.fontbox.afm.FontMetric: java.util.List kernPairs>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void setKernPairs(java.util.List)
    {
        org.apache.fontbox.afm.FontMetric r0;
        java.util.List r1;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        r1 := @parameter0: java.util.List;

        r0.<org.apache.fontbox.afm.FontMetric: java.util.List kernPairs> = r1;

        return;
    }

    public java.util.List getKernPairs0()
    {
        org.apache.fontbox.afm.FontMetric r0;
        java.util.List $r1;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        $r1 = r0.<org.apache.fontbox.afm.FontMetric: java.util.List kernPairs0>;

        return $r1;
    }

    public void addKernPair0(org.apache.fontbox.afm.KernPair)
    {
        org.apache.fontbox.afm.FontMetric r0;
        java.util.List $r2;
        org.apache.fontbox.afm.KernPair r1;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        r1 := @parameter0: org.apache.fontbox.afm.KernPair;

        $r2 = r0.<org.apache.fontbox.afm.FontMetric: java.util.List kernPairs0>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void setKernPairs0(java.util.List)
    {
        org.apache.fontbox.afm.FontMetric r0;
        java.util.List r1;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        r1 := @parameter0: java.util.List;

        r0.<org.apache.fontbox.afm.FontMetric: java.util.List kernPairs0> = r1;

        return;
    }

    public java.util.List getKernPairs1()
    {
        org.apache.fontbox.afm.FontMetric r0;
        java.util.List $r1;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        $r1 = r0.<org.apache.fontbox.afm.FontMetric: java.util.List kernPairs1>;

        return $r1;
    }

    public void addKernPair1(org.apache.fontbox.afm.KernPair)
    {
        org.apache.fontbox.afm.FontMetric r0;
        java.util.List $r2;
        org.apache.fontbox.afm.KernPair r1;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        r1 := @parameter0: org.apache.fontbox.afm.KernPair;

        $r2 = r0.<org.apache.fontbox.afm.FontMetric: java.util.List kernPairs1>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void setKernPairs1(java.util.List)
    {
        org.apache.fontbox.afm.FontMetric r0;
        java.util.List r1;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        r1 := @parameter0: java.util.List;

        r0.<org.apache.fontbox.afm.FontMetric: java.util.List kernPairs1> = r1;

        return;
    }

    public float getStandardHorizontalWidth()
    {
        float $f0;
        org.apache.fontbox.afm.FontMetric r0;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        $f0 = r0.<org.apache.fontbox.afm.FontMetric: float standardHorizontalWidth>;

        return $f0;
    }

    public void setStandardHorizontalWidth(float)
    {
        float f0;
        org.apache.fontbox.afm.FontMetric r0;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        f0 := @parameter0: float;

        r0.<org.apache.fontbox.afm.FontMetric: float standardHorizontalWidth> = f0;

        return;
    }

    public float getStandardVerticalWidth()
    {
        float $f0;
        org.apache.fontbox.afm.FontMetric r0;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        $f0 = r0.<org.apache.fontbox.afm.FontMetric: float standardVerticalWidth>;

        return $f0;
    }

    public void setStandardVerticalWidth(float)
    {
        float f0;
        org.apache.fontbox.afm.FontMetric r0;

        r0 := @this: org.apache.fontbox.afm.FontMetric;

        f0 := @parameter0: float;

        r0.<org.apache.fontbox.afm.FontMetric: float standardVerticalWidth> = f0;

        return;
    }
}
