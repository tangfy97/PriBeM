public class com.hp.hpl.jena.assembler.ImportManager extends java.lang.Object
{
    public static final com.hp.hpl.jena.assembler.ImportManager instance;
    protected java.util.Map cache;

    public void <init>()
    {
        java.util.HashMap $r1;
        com.hp.hpl.jena.assembler.ImportManager r0;

        r0 := @this: com.hp.hpl.jena.assembler.ImportManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.hp.hpl.jena.assembler.ImportManager: java.util.Map cache> = $r1;

        return;
    }

    public void clear()
    {
        com.hp.hpl.jena.assembler.ImportManager r0;
        java.util.Map $r1;

        r0 := @this: com.hp.hpl.jena.assembler.ImportManager;

        $r1 = r0.<com.hp.hpl.jena.assembler.ImportManager: java.util.Map cache>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        return;
    }

    public com.hp.hpl.jena.rdf.model.Model withImports(com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.util.FileManager $r1;
        com.hp.hpl.jena.rdf.model.Model r2, $r3;
        com.hp.hpl.jena.assembler.ImportManager r0;

        r0 := @this: com.hp.hpl.jena.assembler.ImportManager;

        r2 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        $r1 = staticinvoke <com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.util.FileManager get()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.assembler.ImportManager: com.hp.hpl.jena.rdf.model.Model withImports(com.hp.hpl.jena.util.FileManager,com.hp.hpl.jena.rdf.model.Model)>($r1, r2);

        return $r3;
    }

    public com.hp.hpl.jena.rdf.model.Model withImports(com.hp.hpl.jena.util.FileManager, com.hp.hpl.jena.rdf.model.Model)
    {
        java.util.HashSet $r3;
        com.hp.hpl.jena.util.FileManager r1;
        com.hp.hpl.jena.rdf.model.Model r2, $r4;
        com.hp.hpl.jena.assembler.ImportManager r0;

        r0 := @this: com.hp.hpl.jena.assembler.ImportManager;

        r1 := @parameter0: com.hp.hpl.jena.util.FileManager;

        r2 := @parameter1: com.hp.hpl.jena.rdf.model.Model;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        $r4 = specialinvoke r0.<com.hp.hpl.jena.assembler.ImportManager: com.hp.hpl.jena.rdf.model.Model withImports(com.hp.hpl.jena.util.FileManager,com.hp.hpl.jena.rdf.model.Model,java.util.Set)>(r1, r2, $r3);

        return $r4;
    }

    private com.hp.hpl.jena.rdf.model.Model withImports(com.hp.hpl.jena.util.FileManager, com.hp.hpl.jena.rdf.model.Model, java.util.Set)
    {
        java.util.Set r10;
        com.hp.hpl.jena.graph.Graph[] $r6;
        com.hp.hpl.jena.rdf.model.StmtIterator $r2, $r4;
        com.hp.hpl.jena.rdf.model.Property $r1, $r3;
        com.hp.hpl.jena.graph.compose.MultiUnion $r5;
        com.hp.hpl.jena.rdf.model.Model r0, $r11;
        com.hp.hpl.jena.util.FileManager r9;
        com.hp.hpl.jena.assembler.ImportManager r8;
        com.hp.hpl.jena.graph.Graph $r7;
        boolean $z0, $z1;

        r8 := @this: com.hp.hpl.jena.assembler.ImportManager;

        r9 := @parameter0: com.hp.hpl.jena.util.FileManager;

        r0 := @parameter1: com.hp.hpl.jena.rdf.model.Model;

        r10 := @parameter2: java.util.Set;

        $r1 = <com.hp.hpl.jena.vocabulary.OWL: com.hp.hpl.jena.rdf.model.Property imports>;

        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.StmtIterator listStatements(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(null, $r1, null);

        $r3 = <com.hp.hpl.jena.assembler.JA: com.hp.hpl.jena.rdf.model.Property imports>;

        $r4 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.StmtIterator listStatements(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(null, $r3, null);

        $z0 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $z1 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

     label1:
        $r5 = new com.hp.hpl.jena.graph.compose.MultiUnion;

        $r6 = newarray (com.hp.hpl.jena.graph.Graph)[1];

        $r7 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.graph.Graph getGraph()>();

        $r6[0] = $r7;

        specialinvoke $r5.<com.hp.hpl.jena.graph.compose.MultiUnion: void <init>(com.hp.hpl.jena.graph.Graph[])>($r6);

        specialinvoke r8.<com.hp.hpl.jena.assembler.ImportManager: void addImportedGraphs(com.hp.hpl.jena.util.FileManager,java.util.Set,com.hp.hpl.jena.rdf.model.StmtIterator,com.hp.hpl.jena.graph.compose.MultiUnion)>(r9, r10, $r2, $r5);

        specialinvoke r8.<com.hp.hpl.jena.assembler.ImportManager: void addImportedGraphs(com.hp.hpl.jena.util.FileManager,java.util.Set,com.hp.hpl.jena.rdf.model.StmtIterator,com.hp.hpl.jena.graph.compose.MultiUnion)>(r9, r10, $r4, $r5);

        $r11 = staticinvoke <com.hp.hpl.jena.rdf.model.ModelFactory: com.hp.hpl.jena.rdf.model.Model createModelForGraph(com.hp.hpl.jena.graph.Graph)>($r5);

        return $r11;

     label2:
        return r0;
    }

    private void addImportedGraphs(com.hp.hpl.jena.util.FileManager, java.util.Set, com.hp.hpl.jena.rdf.model.StmtIterator, com.hp.hpl.jena.graph.compose.MultiUnion)
    {
        java.util.Set r4;
        com.hp.hpl.jena.rdf.model.Statement $r2;
        com.hp.hpl.jena.rdf.model.StmtIterator r0;
        com.hp.hpl.jena.graph.compose.MultiUnion r5;
        com.hp.hpl.jena.util.FileManager r6;
        java.lang.String $r3;
        com.hp.hpl.jena.assembler.ImportManager r1;
        com.hp.hpl.jena.graph.Graph $r7;
        boolean $z0, $z1;

        r1 := @this: com.hp.hpl.jena.assembler.ImportManager;

        r6 := @parameter0: com.hp.hpl.jena.util.FileManager;

        r4 := @parameter1: java.util.Set;

        r0 := @parameter2: com.hp.hpl.jena.rdf.model.StmtIterator;

        r5 := @parameter3: com.hp.hpl.jena.graph.compose.MultiUnion;

     label1:
        $z0 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r3 = specialinvoke r1.<com.hp.hpl.jena.assembler.ImportManager: java.lang.String getObjectURI(com.hp.hpl.jena.rdf.model.Statement)>($r2);

        $z1 = interfaceinvoke r4.<java.util.Set: boolean add(java.lang.Object)>($r3);

        if $z1 == 0 goto label2;

        $r7 = virtualinvoke r1.<com.hp.hpl.jena.assembler.ImportManager: com.hp.hpl.jena.graph.Graph graphFor(com.hp.hpl.jena.util.FileManager,java.util.Set,java.lang.String)>(r6, r4, $r3);

        virtualinvoke r5.<com.hp.hpl.jena.graph.compose.MultiUnion: void addGraph(com.hp.hpl.jena.graph.Graph)>($r7);

     label2:
        goto label1;

     label3:
        return;
    }

    private java.lang.String getObjectURI(com.hp.hpl.jena.rdf.model.Statement)
    {
        com.hp.hpl.jena.rdf.model.RDFNode $r1;
        com.hp.hpl.jena.rdf.model.Statement r0;
        com.hp.hpl.jena.rdf.model.Resource $r2;
        java.lang.String $r3, $r5;
        com.hp.hpl.jena.assembler.ImportManager r6;
        boolean $z0, $z1;
        com.hp.hpl.jena.assembler.BadObjectException $r4;

        r6 := @this: com.hp.hpl.jena.assembler.ImportManager;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Statement;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        $z0 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.RDFNode: boolean isLiteral()>();

        if $z0 == 0 goto label1;

        $r5 = staticinvoke <com.hp.hpl.jena.assembler.AssemblerHelp: java.lang.String getString(com.hp.hpl.jena.rdf.model.Statement)>(r0);

        return $r5;

     label1:
        $z1 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.RDFNode: boolean isAnon()>();

        if $z1 == 0 goto label2;

        $r4 = new com.hp.hpl.jena.assembler.BadObjectException;

        specialinvoke $r4.<com.hp.hpl.jena.assembler.BadObjectException: void <init>(com.hp.hpl.jena.rdf.model.Statement)>(r0);

        throw $r4;

     label2:
        $r2 = (com.hp.hpl.jena.rdf.model.Resource) $r1;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.Resource: java.lang.String getURI()>();

        return $r3;
    }

    protected com.hp.hpl.jena.graph.Graph graphFor(com.hp.hpl.jena.util.FileManager, java.util.Set, java.lang.String)
    {
        java.util.Set r7;
        java.util.Map $r2, $r10;
        com.hp.hpl.jena.util.FileManager r5;
        com.hp.hpl.jena.rdf.model.Model $r6, $r8;
        java.lang.Object $r3;
        java.lang.String r1;
        com.hp.hpl.jena.assembler.ImportManager r0;
        com.hp.hpl.jena.graph.Graph r4, $r9;

        r0 := @this: com.hp.hpl.jena.assembler.ImportManager;

        r5 := @parameter0: com.hp.hpl.jena.util.FileManager;

        r7 := @parameter1: java.util.Set;

        r1 := @parameter2: java.lang.String;

        $r2 = r0.<com.hp.hpl.jena.assembler.ImportManager: java.util.Map cache>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (com.hp.hpl.jena.graph.Graph) $r3;

        if r4 != null goto label1;

        $r6 = virtualinvoke r5.<com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.rdf.model.Model loadModel(java.lang.String)>(r1);

        $r8 = specialinvoke r0.<com.hp.hpl.jena.assembler.ImportManager: com.hp.hpl.jena.rdf.model.Model withImports(com.hp.hpl.jena.util.FileManager,com.hp.hpl.jena.rdf.model.Model,java.util.Set)>(r5, $r6, r7);

        $r9 = interfaceinvoke $r8.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.graph.Graph getGraph()>();

        $r10 = r0.<com.hp.hpl.jena.assembler.ImportManager: java.util.Map cache>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r9);

        return $r9;

     label1:
        return r4;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.assembler.ImportManager $r0;

        $r0 = new com.hp.hpl.jena.assembler.ImportManager;

        specialinvoke $r0.<com.hp.hpl.jena.assembler.ImportManager: void <init>()>();

        <com.hp.hpl.jena.assembler.ImportManager: com.hp.hpl.jena.assembler.ImportManager instance> = $r0;

        return;
    }
}
