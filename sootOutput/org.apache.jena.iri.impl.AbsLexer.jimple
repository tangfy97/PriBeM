abstract class org.apache.jena.iri.impl.AbsLexer extends java.lang.Object implements org.apache.jena.iri.ViolationCodes
{
    protected org.apache.jena.iri.impl.Parser parser;
    protected int range;

    void <init>()
    {
        org.apache.jena.iri.impl.AbsLexer r0;

        r0 := @this: org.apache.jena.iri.impl.AbsLexer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public synchronized void analyse(org.apache.jena.iri.impl.Parser, int)
    {
        org.apache.jena.iri.impl.AbsLexer r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r5;
        boolean $z0;
        java.io.IOException $r8;
        org.apache.jena.iri.impl.Parser r1, $r2, $r3, $r4, $r6;
        char[] $r7;

        r0 := @this: org.apache.jena.iri.impl.AbsLexer;

        r1 := @parameter0: org.apache.jena.iri.impl.Parser;

        i0 := @parameter1: int;

        r0.<org.apache.jena.iri.impl.AbsLexer: org.apache.jena.iri.impl.Parser parser> = r1;

        r0.<org.apache.jena.iri.impl.AbsLexer: int range> = i0;

        $r2 = r0.<org.apache.jena.iri.impl.AbsLexer: org.apache.jena.iri.impl.Parser parser>;

        $i1 = r0.<org.apache.jena.iri.impl.AbsLexer: int range>;

        $z0 = virtualinvoke $r2.<org.apache.jena.iri.impl.Parser: boolean has(int)>($i1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<org.apache.jena.iri.impl.AbsLexer: org.apache.jena.iri.impl.Parser parser>;

        $r5 = $r3.<org.apache.jena.iri.impl.Parser: java.lang.String uri>;

        $r4 = r0.<org.apache.jena.iri.impl.AbsLexer: org.apache.jena.iri.impl.Parser parser>;

        $i2 = r0.<org.apache.jena.iri.impl.AbsLexer: int range>;

        $i3 = virtualinvoke $r4.<org.apache.jena.iri.impl.Parser: int start(int)>($i2);

        $r6 = r0.<org.apache.jena.iri.impl.AbsLexer: org.apache.jena.iri.impl.Parser parser>;

        $i4 = r0.<org.apache.jena.iri.impl.AbsLexer: int range>;

        $i5 = virtualinvoke $r6.<org.apache.jena.iri.impl.Parser: int end(int)>($i4);

        $r7 = virtualinvoke r0.<org.apache.jena.iri.impl.AbsLexer: char[] zzBuffer()>();

        virtualinvoke $r5.<java.lang.String: void getChars(int,int,char[],int)>($i3, $i5, $r7, 0);

     label2:
        virtualinvoke r0.<org.apache.jena.iri.impl.AbsLexer: int yylex()>();

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

     label5:
        return;

        catch java.io.IOException from label2 to label3 with label4;
    }

    public synchronized void analyse(org.apache.jena.iri.impl.Parser, int, java.lang.String, int, int)
    {
        java.io.IOException $r4;
        org.apache.jena.iri.impl.AbsLexer r0;
        org.apache.jena.iri.impl.Parser r1;
        int i0, i1, i2;
        char[] $r3;
        java.lang.String r2;

        r0 := @this: org.apache.jena.iri.impl.AbsLexer;

        r1 := @parameter0: org.apache.jena.iri.impl.Parser;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        r0.<org.apache.jena.iri.impl.AbsLexer: org.apache.jena.iri.impl.Parser parser> = r1;

        r0.<org.apache.jena.iri.impl.AbsLexer: int range> = i0;

        $r3 = virtualinvoke r0.<org.apache.jena.iri.impl.AbsLexer: char[] zzBuffer()>();

        virtualinvoke r2.<java.lang.String: void getChars(int,int,char[],int)>(i1, i2, $r3, 0);

     label1:
        virtualinvoke r0.<org.apache.jena.iri.impl.AbsLexer: int yylex()>();

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    abstract int yylex() throws java.io.IOException;

    abstract char[] zzBuffer();

    protected void error(int)
    {
        int i0, $i1;
        org.apache.jena.iri.impl.AbsLexer r0;
        org.apache.jena.iri.impl.Parser $r1;

        r0 := @this: org.apache.jena.iri.impl.AbsLexer;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.jena.iri.impl.AbsLexer: org.apache.jena.iri.impl.Parser parser>;

        $i1 = r0.<org.apache.jena.iri.impl.AbsLexer: int range>;

        virtualinvoke $r1.<org.apache.jena.iri.impl.Parser: void recordError(int,int)>($i1, i0);

        return;
    }

    protected final void rule(int)
    {
        int i0, $i1;
        org.apache.jena.iri.impl.AbsLexer r0;
        java.lang.String $r2;
        org.apache.jena.iri.impl.Parser $r1;

        r0 := @this: org.apache.jena.iri.impl.AbsLexer;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.jena.iri.impl.AbsLexer: org.apache.jena.iri.impl.Parser parser>;

        $i1 = r0.<org.apache.jena.iri.impl.AbsLexer: int range>;

        $r2 = virtualinvoke r0.<org.apache.jena.iri.impl.AbsLexer: java.lang.String yytext()>();

        virtualinvoke $r1.<org.apache.jena.iri.impl.Parser: void matchedRule(int,int,java.lang.String)>($i1, i0, $r2);

        return;
    }

    abstract java.lang.String yytext();

    protected void surrogatePair()
    {
        int $i2;
        char $c0, $c1;
        org.apache.jena.iri.impl.AbsLexer r0;
        java.lang.String $r1;

        r0 := @this: org.apache.jena.iri.impl.AbsLexer;

        $r1 = virtualinvoke r0.<org.apache.jena.iri.impl.AbsLexer: java.lang.String yytext()>();

        $c0 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(0);

        $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(1);

        $i2 = staticinvoke <java.lang.Character: int toCodePoint(char,char)>($c0, $c1);

        specialinvoke r0.<org.apache.jena.iri.impl.AbsLexer: void difficultCodePoint(int,java.lang.String)>($i2, $r1);

        return;
    }

    private void difficultCodePoint(int, java.lang.String)
    {
        org.apache.jena.iri.impl.AbsLexer r0;
        int i0, $i1, i2, $i4, $i6, $i8, $i10, $i12, $i14, $i16, $i18;
        java.lang.String r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.text.Normalizer$Form $r2, $r3;

        r0 := @this: org.apache.jena.iri.impl.AbsLexer;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.apache.jena.iri.impl.AbsLexer: void error(int)>(22);

        $i4 = (int) 55295;

        if i0 <= $i4 goto label01;

        $i6 = (int) 57344;

        if i0 >= $i6 goto label01;

        virtualinvoke r0.<org.apache.jena.iri.impl.AbsLexer: void error(int)>(6);

     label01:
        $i8 = (int) 65533;

        if i0 <= $i8 goto label02;

        if i0 >= 65536 goto label02;

        virtualinvoke r0.<org.apache.jena.iri.impl.AbsLexer: void error(int)>(6);

     label02:
        $i10 = (int) 64976;

        if i0 < $i10 goto label03;

        $i12 = (int) 64991;

        if i0 > $i12 goto label03;

        virtualinvoke r0.<org.apache.jena.iri.impl.AbsLexer: void error(int)>(7);

     label03:
        if i0 <= 65536 goto label05;

        $i14 = (int) 65535;

        i2 = i0 & $i14;

        $i16 = (int) 65534;

        if i2 == $i16 goto label04;

        $i18 = (int) 65535;

        if i2 != $i18 goto label05;

     label04:
        virtualinvoke r0.<org.apache.jena.iri.impl.AbsLexer: void error(int)>(7);

     label05:
        $z4 = staticinvoke <org.apache.jena.iri.impl.AbsLexer: boolean isDeprecated(int)>(i0);

        if $z4 == 0 goto label06;

        virtualinvoke r0.<org.apache.jena.iri.impl.AbsLexer: void error(int)>(48);

     label06:
        $z0 = staticinvoke <java.lang.Character: boolean isDefined(int)>(i0);

        if $z0 != 0 goto label07;

        virtualinvoke r0.<org.apache.jena.iri.impl.AbsLexer: void error(int)>(49);

     label07:
        $i1 = staticinvoke <java.lang.Character: int getType(int)>(i0);

        lookupswitch($i1)
        {
            case 0: goto label10;
            case 15: goto label09;
            case 18: goto label08;
            default: goto label11;
        };

     label08:
        virtualinvoke r0.<org.apache.jena.iri.impl.AbsLexer: void error(int)>(50);

        goto label11;

     label09:
        virtualinvoke r0.<org.apache.jena.iri.impl.AbsLexer: void error(int)>(51);

        goto label11;

     label10:
        virtualinvoke r0.<org.apache.jena.iri.impl.AbsLexer: void error(int)>(52);

     label11:
        $r3 = <java.text.Normalizer$Form: java.text.Normalizer$Form NFC>;

        $z5 = staticinvoke <java.text.Normalizer: boolean isNormalized(java.lang.CharSequence,java.text.Normalizer$Form)>(r1, $r3);

        if $z5 != 0 goto label12;

        virtualinvoke r0.<org.apache.jena.iri.impl.AbsLexer: void error(int)>(46);

     label12:
        $r2 = <java.text.Normalizer$Form: java.text.Normalizer$Form NFKC>;

        $z1 = staticinvoke <java.text.Normalizer: boolean isNormalized(java.lang.CharSequence,java.text.Normalizer$Form)>(r1, $r2);

        if $z1 != 0 goto label13;

        virtualinvoke r0.<org.apache.jena.iri.impl.AbsLexer: void error(int)>(47);

     label13:
        $z2 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(i0);

        if $z2 == 0 goto label14;

        virtualinvoke r0.<org.apache.jena.iri.impl.AbsLexer: void error(int)>(55);

     label14:
        $z3 = specialinvoke r0.<org.apache.jena.iri.impl.AbsLexer: boolean isCompatibilityChar(int)>(i0);

        if $z3 == 0 goto label15;

        virtualinvoke r0.<org.apache.jena.iri.impl.AbsLexer: void error(int)>(56);

     label15:
        return;
    }

    private boolean isCompatibilityChar(int)
    {
        org.apache.jena.iri.impl.AbsLexer r13;
        java.lang.Character$UnicodeBlock $r0, $r1, $r2, $r3, $r4, $r5, $r6;
        int[] $r8;
        int i0;
        java.lang.String $r7, $r10, $r12;
        boolean $z0, $z1;
        java.text.Normalizer$Form $r9, $r11;

        r13 := @this: org.apache.jena.iri.impl.AbsLexer;

        i0 := @parameter0: int;

        $r0 = staticinvoke <java.lang.Character$UnicodeBlock: java.lang.Character$UnicodeBlock of(int)>(i0);

        $r1 = <java.lang.Character$UnicodeBlock: java.lang.Character$UnicodeBlock CJK_COMPATIBILITY>;

        if $r0 != $r1 goto label3;

        tableswitch(i0)
        {
            case 64014: goto label1;
            case 64015: goto label1;
            case 64016: goto label2;
            case 64017: goto label1;
            case 64018: goto label2;
            case 64019: goto label1;
            case 64020: goto label1;
            case 64021: goto label2;
            case 64022: goto label2;
            case 64023: goto label2;
            case 64024: goto label2;
            case 64025: goto label2;
            case 64026: goto label2;
            case 64027: goto label2;
            case 64028: goto label2;
            case 64029: goto label2;
            case 64030: goto label2;
            case 64031: goto label1;
            case 64032: goto label2;
            case 64033: goto label1;
            case 64034: goto label2;
            case 64035: goto label1;
            case 64036: goto label1;
            case 64037: goto label2;
            case 64038: goto label2;
            case 64039: goto label1;
            case 64040: goto label1;
            case 64041: goto label1;
            default: goto label2;
        };

     label1:
        return 0;

     label2:
        return 1;

     label3:
        $r2 = <java.lang.Character$UnicodeBlock: java.lang.Character$UnicodeBlock CJK_COMPATIBILITY_FORMS>;

        if $r0 == $r2 goto label4;

        $r3 = <java.lang.Character$UnicodeBlock: java.lang.Character$UnicodeBlock CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT>;

        if $r0 == $r3 goto label4;

        $r4 = <java.lang.Character$UnicodeBlock: java.lang.Character$UnicodeBlock CJK_RADICALS_SUPPLEMENT>;

        if $r0 == $r4 goto label4;

        $r5 = <java.lang.Character$UnicodeBlock: java.lang.Character$UnicodeBlock KANGXI_RADICALS>;

        if $r0 == $r5 goto label4;

        $r6 = <java.lang.Character$UnicodeBlock: java.lang.Character$UnicodeBlock HANGUL_COMPATIBILITY_JAMO>;

        if $r0 != $r6 goto label5;

     label4:
        return 1;

     label5:
        $r7 = new java.lang.String;

        $r8 = newarray (int)[1];

        $r8[0] = i0;

        specialinvoke $r7.<java.lang.String: void <init>(int[],int,int)>($r8, 0, 1);

        $r9 = <java.text.Normalizer$Form: java.text.Normalizer$Form NFD>;

        $r10 = staticinvoke <java.text.Normalizer: java.lang.String normalize(java.lang.CharSequence,java.text.Normalizer$Form)>($r7, $r9);

        $r11 = <java.text.Normalizer$Form: java.text.Normalizer$Form NFKD>;

        $r12 = staticinvoke <java.text.Normalizer: java.lang.String normalize(java.lang.CharSequence,java.text.Normalizer$Form)>($r7, $r11);

        $z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z0 != 0 goto label6;

        $z1 = 1;

        goto label7;

     label6:
        $z1 = 0;

     label7:
        return $z1;
    }

    protected void difficultChar()
    {
        int $i1;
        char $c0;
        org.apache.jena.iri.impl.AbsLexer r0;
        java.lang.String $r1, $r2;

        r0 := @this: org.apache.jena.iri.impl.AbsLexer;

        $r1 = virtualinvoke r0.<org.apache.jena.iri.impl.AbsLexer: java.lang.String yytext()>();

        $c0 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(0);

        $r2 = virtualinvoke r0.<org.apache.jena.iri.impl.AbsLexer: java.lang.String yytext()>();

        $i1 = (int) $c0;

        specialinvoke r0.<org.apache.jena.iri.impl.AbsLexer: void difficultCodePoint(int,java.lang.String)>($i1, $r2);

        return;
    }

    private static boolean isDeprecated(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 >= 329 goto label1;

        return 0;

     label1:
        if i0 < 917536 goto label2;

        if i0 > 917631 goto label2;

        return 1;

     label2:
        lookupswitch(i0)
        {
            case 329: goto label3;
            case 1651: goto label3;
            case 3959: goto label3;
            case 3961: goto label3;
            case 6051: goto label3;
            case 6052: goto label3;
            case 8298: goto label3;
            case 8299: goto label3;
            case 8300: goto label3;
            case 8301: goto label3;
            case 8302: goto label3;
            case 8303: goto label3;
            case 9001: goto label3;
            case 9002: goto label3;
            case 917505: goto label3;
            default: goto label4;
        };

     label3:
        return 1;

     label4:
        return 0;
    }
}
