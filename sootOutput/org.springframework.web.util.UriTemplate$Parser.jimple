class org.springframework.web.util.UriTemplate$Parser extends java.lang.Object
{
    private final java.util.List variableNames;
    private final java.lang.StringBuilder patternBuilder;

    private void <init>(java.lang.String)
    {
        org.springframework.web.util.UriTemplate$Parser r0;
        java.util.regex.Matcher $r5;
        int $i0, $i1, $i2, i3, i5, $i6;
        java.lang.String r3, $r7, $r10, $r12;
        java.util.LinkedList $r16;
        boolean $z0;
        char $c4;
        java.util.List $r9;
        java.lang.StringBuilder $r6, $r8, $r11, $r13, $r14, $r15, $r17;
        java.util.regex.Pattern $r4;

        r0 := @this: org.springframework.web.util.UriTemplate$Parser;

        r3 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r16 = new java.util.LinkedList;

        specialinvoke $r16.<java.util.LinkedList: void <init>()>();

        r0.<org.springframework.web.util.UriTemplate$Parser: java.util.List variableNames> = $r16;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        r0.<org.springframework.web.util.UriTemplate$Parser: java.lang.StringBuilder patternBuilder> = $r17;

        staticinvoke <org.springframework.util.Assert: void hasText(java.lang.String,java.lang.String)>(r3, "\'uriTemplate\' must not be null");

        $r4 = staticinvoke <org.springframework.web.util.UriTemplate: java.util.regex.Pattern access$0()>();

        $r5 = virtualinvoke $r4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r3);

        i5 = 0;

        goto label2;

     label1:
        $r6 = r0.<org.springframework.web.util.UriTemplate$Parser: java.lang.StringBuilder patternBuilder>;

        $i0 = virtualinvoke $r5.<java.util.regex.Matcher: int start()>();

        $r7 = specialinvoke r0.<org.springframework.web.util.UriTemplate$Parser: java.lang.String quote(java.lang.String,int,int)>(r3, i5, $i0);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r8 = r0.<org.springframework.web.util.UriTemplate$Parser: java.lang.StringBuilder patternBuilder>;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(.*)");

        $r9 = r0.<org.springframework.web.util.UriTemplate$Parser: java.util.List variableNames>;

        $r10 = virtualinvoke $r5.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r10);

        i5 = virtualinvoke $r5.<java.util.regex.Matcher: int end()>();

     label2:
        $z0 = virtualinvoke $r5.<java.util.regex.Matcher: boolean find()>();

        if $z0 != 0 goto label1;

        $r11 = r0.<org.springframework.web.util.UriTemplate$Parser: java.lang.StringBuilder patternBuilder>;

        $i1 = virtualinvoke r3.<java.lang.String: int length()>();

        $r12 = specialinvoke r0.<org.springframework.web.util.UriTemplate$Parser: java.lang.String quote(java.lang.String,int,int)>(r3, i5, $i1);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r13 = r0.<org.springframework.web.util.UriTemplate$Parser: java.lang.StringBuilder patternBuilder>;

        $i2 = virtualinvoke $r13.<java.lang.StringBuilder: int length()>();

        i3 = $i2 - 1;

        if i3 < 0 goto label3;

        $r14 = r0.<org.springframework.web.util.UriTemplate$Parser: java.lang.StringBuilder patternBuilder>;

        $c4 = virtualinvoke $r14.<java.lang.StringBuilder: char charAt(int)>(i3);

        $i6 = (int) $c4;

        if $i6 != 47 goto label3;

        $r15 = r0.<org.springframework.web.util.UriTemplate$Parser: java.lang.StringBuilder patternBuilder>;

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder deleteCharAt(int)>(i3);

     label3:
        return;
    }

    private java.lang.String quote(java.lang.String, int, int)
    {
        int i0, i1;
        org.springframework.web.util.UriTemplate$Parser r3;
        java.lang.String r0, $r1, $r2;

        r3 := @this: org.springframework.web.util.UriTemplate$Parser;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i0 != i1 goto label1;

        return "";

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i0, i1);

        $r2 = staticinvoke <java.util.regex.Pattern: java.lang.String quote(java.lang.String)>($r1);

        return $r2;
    }

    private java.util.List getVariableNames()
    {
        org.springframework.web.util.UriTemplate$Parser r0;
        java.util.List $r1, $r2;

        r0 := @this: org.springframework.web.util.UriTemplate$Parser;

        $r1 = r0.<org.springframework.web.util.UriTemplate$Parser: java.util.List variableNames>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    private java.util.regex.Pattern getMatchPattern()
    {
        org.springframework.web.util.UriTemplate$Parser r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        java.util.regex.Pattern $r3;

        r0 := @this: org.springframework.web.util.UriTemplate$Parser;

        $r1 = r0.<org.springframework.web.util.UriTemplate$Parser: java.lang.StringBuilder patternBuilder>;

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r2);

        return $r3;
    }

    void <init>(java.lang.String, org.springframework.web.util.UriTemplate$Parser)
    {
        org.springframework.web.util.UriTemplate$Parser r0, r2;
        java.lang.String r1;

        r0 := @this: org.springframework.web.util.UriTemplate$Parser;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.springframework.web.util.UriTemplate$Parser;

        specialinvoke r0.<org.springframework.web.util.UriTemplate$Parser: void <init>(java.lang.String)>(r1);

        return;
    }

    static java.util.List access$1(org.springframework.web.util.UriTemplate$Parser)
    {
        org.springframework.web.util.UriTemplate$Parser r0;
        java.util.List $r1, $r2;

        r0 := @parameter0: org.springframework.web.util.UriTemplate$Parser;

        $r1 = specialinvoke r0.<org.springframework.web.util.UriTemplate$Parser: java.util.List getVariableNames()>();

        $r2 = (java.util.List) $r1;

        return $r2;
    }

    static java.util.regex.Pattern access$2(org.springframework.web.util.UriTemplate$Parser)
    {
        org.springframework.web.util.UriTemplate$Parser r0;
        java.util.regex.Pattern $r1;

        r0 := @parameter0: org.springframework.web.util.UriTemplate$Parser;

        $r1 = specialinvoke r0.<org.springframework.web.util.UriTemplate$Parser: java.util.regex.Pattern getMatchPattern()>();

        return $r1;
    }
}
