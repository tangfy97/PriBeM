public class org.apache.velocity.util.StringUtils extends java.lang.Object
{
    private static final java.lang.String EOL;

    public void <init>()
    {
        org.apache.velocity.util.StringUtils r0;

        r0 := @this: org.apache.velocity.util.StringUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.String concat(java.util.List)
    {
        java.util.List r1;
        java.lang.StringBuffer $r0;
        int $i0, i1;
        org.apache.velocity.util.StringUtils r5;
        java.lang.Object $r3;
        java.lang.String $r2, $r4;

        r5 := @this: org.apache.velocity.util.StringUtils;

        r1 := @parameter0: java.util.List;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1);

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.String getPackageAsPath(java.lang.String)
    {
        char $c0;
        java.lang.StringBuffer $r0, $r4, $r6;
        java.lang.String r1, $r2, $r3, $r5, $r7;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = <java.io.File: java.lang.String separator>;

        $c0 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(0);

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String replace(char,char)>(46, $c0);

        $r4 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = <java.io.File: java.lang.String separator>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;
    }

    public static java.lang.String removeUnderScores(java.lang.String)
    {
        java.lang.StringBuffer $r0;
        java.util.StringTokenizer $r2;
        java.lang.Object $r4;
        java.lang.String r1, $r3, r5, $r6;
        boolean $z0;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = new java.util.StringTokenizer;

        specialinvoke $r2.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r1, "_");

     label1:
        $z0 = virtualinvoke $r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label2;

        $r4 = virtualinvoke $r2.<java.util.StringTokenizer: java.lang.Object nextElement()>();

        r5 = (java.lang.String) $r4;

        $r6 = staticinvoke <org.apache.velocity.util.StringUtils: java.lang.String firstLetterCaps(java.lang.String)>(r5);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        goto label1;

     label2:
        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String removeAndHump(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.velocity.util.StringUtils: java.lang.String removeAndHump(java.lang.String,java.lang.String)>(r0, "_");

        return $r1;
    }

    public static java.lang.String removeAndHump(java.lang.String, java.lang.String)
    {
        java.lang.StringBuffer $r0;
        java.util.StringTokenizer $r2;
        java.lang.Object $r5;
        java.lang.String r1, r3, $r4, r6, $r7;
        boolean $z0;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = new java.util.StringTokenizer;

        specialinvoke $r2.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r1, r3);

     label1:
        $z0 = virtualinvoke $r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label2;

        $r5 = virtualinvoke $r2.<java.util.StringTokenizer: java.lang.Object nextElement()>();

        r6 = (java.lang.String) $r5;

        $r7 = staticinvoke <org.apache.velocity.util.StringUtils: java.lang.String capitalizeFirstLetter(java.lang.String)>(r6);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        goto label1;

     label2:
        $r4 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public static java.lang.String firstLetterCaps(java.lang.String)
    {
        java.lang.StringBuffer $r5, $r6, $r7;
        java.lang.String r0, $r1, $r2, $r3, $r4, $r8;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, 1);

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String toUpperCase()>();

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(1);

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String toLowerCase()>();

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r8;
    }

    public static java.lang.String capitalizeFirstLetter(java.lang.String)
    {
        java.lang.StringBuffer $r4, $r5, $r6;
        java.lang.String r0, $r1, $r2, $r3, $r7;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, 1);

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String toUpperCase()>();

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(1);

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;
    }

    public static java.lang.String[] split(java.lang.String, java.lang.String)
    {
        java.lang.Object[] $r5;
        java.lang.String[] $r4, $r6;
        java.util.ArrayList $r0;
        java.util.StringTokenizer $r1;
        int $i0;
        java.lang.String r2, r3, $r7;
        boolean $z0;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r1 = new java.util.StringTokenizer;

        specialinvoke $r1.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r2, r3);

     label1:
        $z0 = virtualinvoke $r1.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label2;

        $r7 = virtualinvoke $r1.<java.util.StringTokenizer: java.lang.String nextToken()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label1;

     label2:
        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        $r4 = newarray (java.lang.String)[$i0];

        $r5 = interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r6 = (java.lang.String[]) $r5;

        return $r6;
    }

    public static java.lang.String chop(java.lang.String, int)
    {
        int i0;
        java.lang.String r0, $r1, $r2;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = <org.apache.velocity.util.StringUtils: java.lang.String EOL>;

        $r2 = staticinvoke <org.apache.velocity.util.StringUtils: java.lang.String chop(java.lang.String,int,java.lang.String)>(r0, i0, $r1);

        return $r2;
    }

    public static java.lang.String chop(java.lang.String, int, java.lang.String)
    {
        int $i0, $i1, i2, i3, $i5, $i7;
        java.lang.String r0, r1, $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        if i2 == 0 goto label1;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return r0;

     label2:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i3 = $i0;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i1 != 2 goto label3;

        $z0 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>(r1);

        if $z0 == 0 goto label3;

        $i5 = (int) -2;

        i3 = $i0 + $i5;

        $i7 = (int) -1;

        i2 = i2 + $i7;

     label3:
        if i2 <= 0 goto label4;

        i3 = i3 - i2;

     label4:
        if i3 >= 0 goto label5;

        i3 = 0;

     label5:
        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i3);

        return $r2;
    }

    public static java.lang.StringBuffer stringSubstitution(java.lang.String, java.util.Hashtable)
    {
        java.lang.String r0;
        java.util.Hashtable r1;
        java.lang.StringBuffer $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.Hashtable;

        $r2 = staticinvoke <org.apache.velocity.util.StringUtils: java.lang.StringBuffer stringSubstitution(java.lang.String,java.util.Map)>(r0, r1);

        return $r2;
    }

    public static java.lang.StringBuffer stringSubstitution(java.lang.String, java.util.Map)
    {
        java.lang.StringBuffer $r7, $r8;
        java.util.Map r3;
        int $i0, $i2, $i3, i5, $i6, $i7;
        java.lang.String r1, $r4, r6;
        boolean $z0;
        char $c1, $c4;
        java.lang.Object $r5;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.util.Map;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        i5 = 0;

     label1:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if i5 >= $i0 goto label9;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i5);

        $i6 = (int) $c1;

        lookupswitch($i6)
        {
            case 36: goto label2;
            default: goto label7;
        };

     label2:
        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        i5 = i5 + 1;

     label3:
        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        if i5 >= $i2 goto label5;

        $c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i5);

        $i7 = (int) $c4;

        if $i7 == 95 goto label4;

        $z0 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>($c4);

        if $z0 == 0 goto label5;

     label4:
        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4);

        i5 = i5 + 1;

        goto label3;

     label5:
        $i3 = virtualinvoke $r8.<java.lang.StringBuffer: int length()>();

        if $i3 <= 0 goto label8;

        $r4 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        $r5 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        r6 = (java.lang.String) $r5;

        if r6 == null goto label6;

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r6);

     label6:
        goto label8;

     label7:
        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

        i5 = i5 + 1;

     label8:
        goto label1;

     label9:
        return $r7;
    }

    public static java.lang.String fileContentsToString(java.lang.String)
    {
        java.lang.Throwable $r5;
        long $l0;
        java.io.File $r0;
        java.lang.Exception $r4, $r6;
        int $i1;
        char[] r9;
        java.lang.String r1, $r3, r7;
        java.io.FileReader $r2, r8;
        boolean $z0;

        r1 := @parameter0: java.lang.String;

        r7 = "";

     label01:
        $r0 = new java.io.File;

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(r1);

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label09;

        r8 = null;

     label02:
        $r2 = new java.io.FileReader;

        specialinvoke $r2.<java.io.FileReader: void <init>(java.io.File)>($r0);

        r8 = $r2;

        $l0 = virtualinvoke $r0.<java.io.File: long length()>();

        $i1 = (int) $l0;

        r9 = newarray (char)[$i1];

        virtualinvoke $r2.<java.io.FileReader: int read(char[])>(r9);

        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(char[])>(r9);

        r7 = $r3;

     label03:
        if $r2 == null goto label09;

        virtualinvoke $r2.<java.io.FileReader: void close()>();

        goto label09;

     label04:
        $r6 := @caughtexception;

        virtualinvoke $r6.<java.lang.Exception: void printStackTrace()>();

     label05:
        if r8 == null goto label09;

        virtualinvoke r8.<java.io.FileReader: void close()>();

        goto label09;

     label06:
        $r5 := @caughtexception;

     label07:
        if r8 == null goto label08;

        virtualinvoke r8.<java.io.FileReader: void close()>();

     label08:
        throw $r5;

     label09:
        goto label11;

     label10:
        $r4 := @caughtexception;

        virtualinvoke $r4.<java.lang.Exception: void printStackTrace()>();

     label11:
        return r7;

        catch java.lang.Exception from label02 to label03 with label04;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Exception from label01 to label09 with label10;
    }

    public static java.lang.String collapseNewlines(java.lang.String)
    {
        char $c1, c2;
        java.lang.StringBuffer $r3;
        int $i0, i3, $i4, $i5;
        java.lang.String r0, $r2;

        r0 := @parameter0: java.lang.String;

        c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        i3 = 0;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i3 >= $i0 goto label4;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        $i4 = (int) $c1;

        if $i4 != 10 goto label2;

        $i5 = (int) c2;

        if $i5 == 10 goto label3;

     label2:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

        c2 = $c1;

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        $r2 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.String collapseSpaces(java.lang.String)
    {
        char $c1, c2;
        java.lang.StringBuffer $r3;
        int $i0, i3, $i4, $i5;
        java.lang.String r0, $r2;

        r0 := @parameter0: java.lang.String;

        c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        i3 = 0;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i3 >= $i0 goto label4;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        $i4 = (int) $c1;

        if $i4 != 32 goto label2;

        $i5 = (int) c2;

        if $i5 == 32 goto label3;

     label2:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

        c2 = $c1;

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        $r2 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public static final java.lang.String sub(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.StringBuffer $r5, $r6, $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8;
        java.lang.String r0, r1, r3, $r7;
        char[] $r2, $r4;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String,int)>(r1, 0);

        if $i0 < 0 goto label3;

        $r2 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();

        $r4 = virtualinvoke r3.<java.lang.String: char[] toCharArray()>();

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $r5 = new java.lang.StringBuffer;

        $i2 = lengthof $r2;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>(int)>($i2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r2, 0, $i0);

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r4);

        i7 = $i0 + $i1;

        i8 = i7;

     label1:
        $i3 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String,int)>(r1, i7);

        if $i3 <= 0 goto label2;

        $i6 = $i3 - i8;

        $r8 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r2, i8, $i6);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r4);

        i7 = $i3 + $i1;

        i8 = i7;

        goto label1;

     label2:
        $i4 = lengthof $r2;

        $i5 = $i4 - i8;

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r2, i8, $i5);

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;

     label3:
        return r0;
    }

    public static final java.lang.String stackTrace(java.lang.Throwable)
    {
        java.lang.Throwable r1;
        java.io.PrintWriter $r2;
        java.io.ByteArrayOutputStream $r0;
        java.lang.String r4;
        java.lang.Exception $r3;

        r1 := @parameter0: java.lang.Throwable;

        r4 = null;

     label1:
        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        $r2 = new java.io.PrintWriter;

        specialinvoke $r2.<java.io.PrintWriter: void <init>(java.io.OutputStream,boolean)>($r0, 1);

        virtualinvoke r1.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>($r2);

        r4 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return r4;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static final java.lang.String normalizePath(java.lang.String)
    {
        boolean $z0;
        java.lang.StringBuffer $r1, $r3, $r5, $r6, $r8, $r9, $r11, $r12, $r14, $r16, $r17, $r19, $r21, $r22, $r23, $r24;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.lang.String r0, $r2, $r4, $r7, $r10, $r13, $r15, $r18, $r20, r25;

        r0 := @parameter0: java.lang.String;

        r25 = r0;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(92);

        if $i0 < 0 goto label01;

        r25 = virtualinvoke r0.<java.lang.String: java.lang.String replace(char,char)>(92, 47);

     label01:
        $z0 = virtualinvoke r25.<java.lang.String: boolean startsWith(java.lang.String)>("/");

        if $z0 != 0 goto label02;

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r25);

        r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

     label02:
        $i10 = virtualinvoke r25.<java.lang.String: int indexOf(java.lang.String)>("//");

        if $i10 >= 0 goto label03;

        goto label04;

     label03:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke r25.<java.lang.String: java.lang.String substring(int,int)>(0, $i10);

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $i1 = $i10 + 1;

        $r4 = virtualinvoke r25.<java.lang.String: java.lang.String substring(int)>($i1);

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        r25 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label02;

     label04:
        $i2 = virtualinvoke r25.<java.lang.String: int indexOf(java.lang.String)>("%20");

        if $i2 >= 0 goto label05;

        goto label06;

     label05:
        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke r25.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $i3 = $i2 + 3;

        $r10 = virtualinvoke r25.<java.lang.String: java.lang.String substring(int)>($i3);

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        r25 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label04;

     label06:
        $i4 = virtualinvoke r25.<java.lang.String: int indexOf(java.lang.String)>("/./");

        if $i4 >= 0 goto label07;

        goto label08;

     label07:
        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke r25.<java.lang.String: java.lang.String substring(int,int)>(0, $i4);

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $i5 = $i4 + 2;

        $r15 = virtualinvoke r25.<java.lang.String: java.lang.String substring(int)>($i5);

        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        r25 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label06;

     label08:
        $i6 = virtualinvoke r25.<java.lang.String: int indexOf(java.lang.String)>("/../");

        if $i6 >= 0 goto label09;

        goto label11;

     label09:
        if $i6 != 0 goto label10;

        return null;

     label10:
        $i7 = $i6 - 1;

        $i8 = virtualinvoke r25.<java.lang.String: int lastIndexOf(int,int)>(47, $i7);

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke r25.<java.lang.String: java.lang.String substring(int,int)>(0, $i8);

        $r19 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        $i9 = $i6 + 3;

        $r20 = virtualinvoke r25.<java.lang.String: java.lang.String substring(int)>($i9);

        $r21 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        r25 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label08;

     label11:
        return r25;
    }

    public java.lang.String select(boolean, java.lang.String, java.lang.String)
    {
        org.apache.velocity.util.StringUtils r2;
        java.lang.String r0, r1;
        boolean z0;

        r2 := @this: org.apache.velocity.util.StringUtils;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.String;

        r0 := @parameter2: java.lang.String;

        if z0 == 0 goto label1;

        return r1;

     label1:
        return r0;
    }

    public boolean allEmpty(java.util.List)
    {
        java.util.List r0;
        int $i0, $i1, i2;
        org.apache.velocity.util.StringUtils r4;
        java.lang.Object $r1, $r2;
        java.lang.String $r3;

        r4 := @this: org.apache.velocity.util.StringUtils;

        r0 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        i2 = 0;

     label1:
        if i2 >= $i0 goto label3;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i2);

        if $r1 == null goto label2;

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i2);

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i1 <= 0 goto label2;

        return 0;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return 1;
    }

    public static java.util.List trimStrings(java.util.List)
    {
        java.util.List r0;
        int $i0, i1;
        java.lang.Object $r1;
        java.lang.String $r2, $r3;

        r0 := @parameter0: java.util.List;

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        i1 = 0;

     label2:
        if i1 >= $i0 goto label3;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1);

        $r2 = (java.lang.String) $r1;

        $r3 = staticinvoke <org.apache.velocity.util.StringUtils: java.lang.String nullTrim(java.lang.String)>($r2);

        interfaceinvoke r0.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i1, $r3);

        i1 = i1 + 1;

        goto label2;

     label3:
        return r0;
    }

    public static java.lang.String nullTrim(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        <org.apache.velocity.util.StringUtils: java.lang.String EOL> = $r0;

        return;
    }
}
