public final class org.waveprotocol.wave.client.editor.content.ContentDocElement extends java.lang.Object
{
    public static final java.lang.String DEFAULT_TAGNAME;

    public static void register(org.waveprotocol.wave.client.editor.ElementHandlerRegistry, java.lang.String)
    {
        java.lang.String r1;
        org.waveprotocol.wave.client.editor.content.ContentDocElement$1 $r2;
        org.waveprotocol.wave.client.editor.content.ContentDocElement$2 $r3;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.ElementHandlerRegistry;

        r1 := @parameter1: java.lang.String;

        $r2 = new org.waveprotocol.wave.client.editor.content.ContentDocElement$1;

        specialinvoke $r2.<org.waveprotocol.wave.client.editor.content.ContentDocElement$1: void <init>()>();

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry: void registerRenderer(java.lang.String,org.waveprotocol.wave.client.editor.content.Renderer)>(r1, $r2);

        $r3 = new org.waveprotocol.wave.client.editor.content.ContentDocElement$2;

        specialinvoke $r3.<org.waveprotocol.wave.client.editor.content.ContentDocElement$2: void <init>()>();

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry: void registerEventHandler(java.lang.String,org.waveprotocol.wave.client.editor.NodeEventHandler)>(r1, $r3);

        return;
    }

    private void <init>()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocElement r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocElement;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void <clinit>()
    {
        <org.waveprotocol.wave.client.editor.content.ContentDocElement: java.lang.String DEFAULT_TAGNAME> = "doc";

        return;
    }
}
