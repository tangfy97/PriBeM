public final class org.waveprotocol.wave.model.conversation.BlipMappers extends java.lang.Object
{

    public void <init>()
    {
        org.waveprotocol.wave.model.conversation.BlipMappers r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.BlipMappers;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void depthFirst(org.waveprotocol.wave.model.util.Predicate, org.waveprotocol.wave.model.conversation.ConversationView)
    {
        org.waveprotocol.wave.model.conversation.BlipMappers$Exit $r3;
        org.waveprotocol.wave.model.conversation.BlipMappers$DepthFirst $r0;
        org.waveprotocol.wave.model.util.Predicate r1;
        org.waveprotocol.wave.model.conversation.ConversationView r2;

        r1 := @parameter0: org.waveprotocol.wave.model.util.Predicate;

        r2 := @parameter1: org.waveprotocol.wave.model.conversation.ConversationView;

     label1:
        $r0 = new org.waveprotocol.wave.model.conversation.BlipMappers$DepthFirst;

        specialinvoke $r0.<org.waveprotocol.wave.model.conversation.BlipMappers$DepthFirst: void <init>(org.waveprotocol.wave.model.util.Predicate)>(r1);

        virtualinvoke $r0.<org.waveprotocol.wave.model.conversation.BlipMappers$DepthFirst: void apply(org.waveprotocol.wave.model.conversation.ConversationView)>(r2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch org.waveprotocol.wave.model.conversation.BlipMappers$Exit from label1 to label2 with label3;
    }

    public static void depthFirst(org.waveprotocol.wave.model.util.Predicate, org.waveprotocol.wave.model.conversation.Conversation)
    {
        org.waveprotocol.wave.model.conversation.BlipMappers$Exit $r3;
        org.waveprotocol.wave.model.conversation.Conversation r2;
        org.waveprotocol.wave.model.conversation.BlipMappers$DepthFirst $r0;
        org.waveprotocol.wave.model.util.Predicate r1;

        r1 := @parameter0: org.waveprotocol.wave.model.util.Predicate;

        r2 := @parameter1: org.waveprotocol.wave.model.conversation.Conversation;

     label1:
        $r0 = new org.waveprotocol.wave.model.conversation.BlipMappers$DepthFirst;

        specialinvoke $r0.<org.waveprotocol.wave.model.conversation.BlipMappers$DepthFirst: void <init>(org.waveprotocol.wave.model.util.Predicate)>(r1);

        virtualinvoke $r0.<org.waveprotocol.wave.model.conversation.BlipMappers$DepthFirst: void apply(org.waveprotocol.wave.model.conversation.Conversation)>(r2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch org.waveprotocol.wave.model.conversation.BlipMappers$Exit from label1 to label2 with label3;
    }

    public static void depthFirst(org.waveprotocol.wave.model.util.Predicate, org.waveprotocol.wave.model.conversation.ConversationThread)
    {
        org.waveprotocol.wave.model.conversation.BlipMappers$Exit $r3;
        org.waveprotocol.wave.model.conversation.ConversationThread r2;
        org.waveprotocol.wave.model.conversation.BlipMappers$DepthFirst $r0;
        org.waveprotocol.wave.model.util.Predicate r1;

        r1 := @parameter0: org.waveprotocol.wave.model.util.Predicate;

        r2 := @parameter1: org.waveprotocol.wave.model.conversation.ConversationThread;

     label1:
        $r0 = new org.waveprotocol.wave.model.conversation.BlipMappers$DepthFirst;

        specialinvoke $r0.<org.waveprotocol.wave.model.conversation.BlipMappers$DepthFirst: void <init>(org.waveprotocol.wave.model.util.Predicate)>(r1);

        virtualinvoke $r0.<org.waveprotocol.wave.model.conversation.BlipMappers$DepthFirst: void apply(org.waveprotocol.wave.model.conversation.ConversationThread)>(r2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch org.waveprotocol.wave.model.conversation.BlipMappers$Exit from label1 to label2 with label3;
    }

    public static void depthFirst(org.waveprotocol.wave.model.util.Predicate, org.waveprotocol.wave.model.conversation.ConversationBlip)
    {
        org.waveprotocol.wave.model.conversation.ConversationBlip r2;
        org.waveprotocol.wave.model.conversation.BlipMappers$Exit $r3;
        org.waveprotocol.wave.model.conversation.BlipMappers$DepthFirst $r0;
        org.waveprotocol.wave.model.util.Predicate r1;

        r1 := @parameter0: org.waveprotocol.wave.model.util.Predicate;

        r2 := @parameter1: org.waveprotocol.wave.model.conversation.ConversationBlip;

     label1:
        $r0 = new org.waveprotocol.wave.model.conversation.BlipMappers$DepthFirst;

        specialinvoke $r0.<org.waveprotocol.wave.model.conversation.BlipMappers$DepthFirst: void <init>(org.waveprotocol.wave.model.util.Predicate)>(r1);

        virtualinvoke $r0.<org.waveprotocol.wave.model.conversation.BlipMappers$DepthFirst: void apply(org.waveprotocol.wave.model.conversation.ConversationBlip)>(r2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch org.waveprotocol.wave.model.conversation.BlipMappers$Exit from label1 to label2 with label3;
    }
}
