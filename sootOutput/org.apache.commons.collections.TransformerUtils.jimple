public class org.apache.commons.collections.TransformerUtils extends java.lang.Object
{

    public void <init>()
    {
        org.apache.commons.collections.TransformerUtils r0;

        r0 := @this: org.apache.commons.collections.TransformerUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.commons.collections.Transformer exceptionTransformer()
    {
        org.apache.commons.collections.Transformer $r0;

        $r0 = <org.apache.commons.collections.functors.ExceptionTransformer: org.apache.commons.collections.Transformer INSTANCE>;

        return $r0;
    }

    public static org.apache.commons.collections.Transformer nullTransformer()
    {
        org.apache.commons.collections.Transformer $r0;

        $r0 = <org.apache.commons.collections.functors.ConstantTransformer: org.apache.commons.collections.Transformer NULL_INSTANCE>;

        return $r0;
    }

    public static org.apache.commons.collections.Transformer nopTransformer()
    {
        org.apache.commons.collections.Transformer $r0;

        $r0 = <org.apache.commons.collections.functors.NOPTransformer: org.apache.commons.collections.Transformer INSTANCE>;

        return $r0;
    }

    public static org.apache.commons.collections.Transformer cloneTransformer()
    {
        org.apache.commons.collections.Transformer $r0;

        $r0 = <org.apache.commons.collections.functors.CloneTransformer: org.apache.commons.collections.Transformer INSTANCE>;

        return $r0;
    }

    public static org.apache.commons.collections.Transformer constantTransformer(java.lang.Object)
    {
        java.lang.Object r0;
        org.apache.commons.collections.Transformer $r1;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <org.apache.commons.collections.functors.ConstantTransformer: org.apache.commons.collections.Transformer getInstance(java.lang.Object)>(r0);

        return $r1;
    }

    public static org.apache.commons.collections.Transformer asTransformer(org.apache.commons.collections.Closure)
    {
        org.apache.commons.collections.Closure r0;
        org.apache.commons.collections.Transformer $r1;

        r0 := @parameter0: org.apache.commons.collections.Closure;

        $r1 = staticinvoke <org.apache.commons.collections.functors.ClosureTransformer: org.apache.commons.collections.Transformer getInstance(org.apache.commons.collections.Closure)>(r0);

        return $r1;
    }

    public static org.apache.commons.collections.Transformer asTransformer(org.apache.commons.collections.Predicate)
    {
        org.apache.commons.collections.Predicate r0;
        org.apache.commons.collections.Transformer $r1;

        r0 := @parameter0: org.apache.commons.collections.Predicate;

        $r1 = staticinvoke <org.apache.commons.collections.functors.PredicateTransformer: org.apache.commons.collections.Transformer getInstance(org.apache.commons.collections.Predicate)>(r0);

        return $r1;
    }

    public static org.apache.commons.collections.Transformer asTransformer(org.apache.commons.collections.Factory)
    {
        org.apache.commons.collections.Factory r0;
        org.apache.commons.collections.Transformer $r1;

        r0 := @parameter0: org.apache.commons.collections.Factory;

        $r1 = staticinvoke <org.apache.commons.collections.functors.FactoryTransformer: org.apache.commons.collections.Transformer getInstance(org.apache.commons.collections.Factory)>(r0);

        return $r1;
    }

    public static org.apache.commons.collections.Transformer chainedTransformer(org.apache.commons.collections.Transformer, org.apache.commons.collections.Transformer)
    {
        org.apache.commons.collections.Transformer r0, r1, $r2;

        r0 := @parameter0: org.apache.commons.collections.Transformer;

        r1 := @parameter1: org.apache.commons.collections.Transformer;

        $r2 = staticinvoke <org.apache.commons.collections.functors.ChainedTransformer: org.apache.commons.collections.Transformer getInstance(org.apache.commons.collections.Transformer,org.apache.commons.collections.Transformer)>(r0, r1);

        return $r2;
    }

    public static org.apache.commons.collections.Transformer chainedTransformer(org.apache.commons.collections.Transformer[])
    {
        org.apache.commons.collections.Transformer[] r0;
        org.apache.commons.collections.Transformer $r1;

        r0 := @parameter0: org.apache.commons.collections.Transformer[];

        $r1 = staticinvoke <org.apache.commons.collections.functors.ChainedTransformer: org.apache.commons.collections.Transformer getInstance(org.apache.commons.collections.Transformer[])>(r0);

        return $r1;
    }

    public static org.apache.commons.collections.Transformer chainedTransformer(java.util.Collection)
    {
        org.apache.commons.collections.Transformer $r1;
        java.util.Collection r0;

        r0 := @parameter0: java.util.Collection;

        $r1 = staticinvoke <org.apache.commons.collections.functors.ChainedTransformer: org.apache.commons.collections.Transformer getInstance(java.util.Collection)>(r0);

        return $r1;
    }

    public static org.apache.commons.collections.Transformer switchTransformer(org.apache.commons.collections.Predicate, org.apache.commons.collections.Transformer, org.apache.commons.collections.Transformer)
    {
        org.apache.commons.collections.Predicate r1;
        org.apache.commons.collections.Predicate[] $r0;
        org.apache.commons.collections.Transformer[] $r2;
        org.apache.commons.collections.Transformer r3, r4, $r5;

        r1 := @parameter0: org.apache.commons.collections.Predicate;

        r3 := @parameter1: org.apache.commons.collections.Transformer;

        r4 := @parameter2: org.apache.commons.collections.Transformer;

        $r0 = newarray (org.apache.commons.collections.Predicate)[1];

        $r0[0] = r1;

        $r2 = newarray (org.apache.commons.collections.Transformer)[1];

        $r2[0] = r3;

        $r5 = staticinvoke <org.apache.commons.collections.functors.SwitchTransformer: org.apache.commons.collections.Transformer getInstance(org.apache.commons.collections.Predicate[],org.apache.commons.collections.Transformer[],org.apache.commons.collections.Transformer)>($r0, $r2, r4);

        return $r5;
    }

    public static org.apache.commons.collections.Transformer switchTransformer(org.apache.commons.collections.Predicate[], org.apache.commons.collections.Transformer[])
    {
        org.apache.commons.collections.Predicate[] r0;
        org.apache.commons.collections.Transformer[] r1;
        org.apache.commons.collections.Transformer $r2;

        r0 := @parameter0: org.apache.commons.collections.Predicate[];

        r1 := @parameter1: org.apache.commons.collections.Transformer[];

        $r2 = staticinvoke <org.apache.commons.collections.functors.SwitchTransformer: org.apache.commons.collections.Transformer getInstance(org.apache.commons.collections.Predicate[],org.apache.commons.collections.Transformer[],org.apache.commons.collections.Transformer)>(r0, r1, null);

        return $r2;
    }

    public static org.apache.commons.collections.Transformer switchTransformer(org.apache.commons.collections.Predicate[], org.apache.commons.collections.Transformer[], org.apache.commons.collections.Transformer)
    {
        org.apache.commons.collections.Predicate[] r0;
        org.apache.commons.collections.Transformer[] r1;
        org.apache.commons.collections.Transformer r2, $r3;

        r0 := @parameter0: org.apache.commons.collections.Predicate[];

        r1 := @parameter1: org.apache.commons.collections.Transformer[];

        r2 := @parameter2: org.apache.commons.collections.Transformer;

        $r3 = staticinvoke <org.apache.commons.collections.functors.SwitchTransformer: org.apache.commons.collections.Transformer getInstance(org.apache.commons.collections.Predicate[],org.apache.commons.collections.Transformer[],org.apache.commons.collections.Transformer)>(r0, r1, r2);

        return $r3;
    }

    public static org.apache.commons.collections.Transformer switchTransformer(java.util.Map)
    {
        org.apache.commons.collections.Transformer $r1;
        java.util.Map r0;

        r0 := @parameter0: java.util.Map;

        $r1 = staticinvoke <org.apache.commons.collections.functors.SwitchTransformer: org.apache.commons.collections.Transformer getInstance(java.util.Map)>(r0);

        return $r1;
    }

    public static org.apache.commons.collections.Transformer switchMapTransformer(java.util.Map)
    {
        org.apache.commons.collections.Predicate[] r14;
        org.apache.commons.collections.Transformer[] r13;
        java.util.Map r0;
        int $i0, i1;
        boolean $z0;
        org.apache.commons.collections.Predicate $r9;
        java.util.Map$Entry r7;
        java.util.Iterator $r4;
        org.apache.commons.collections.Transformer r2, $r5, $r11;
        java.util.Set $r3;
        java.lang.IllegalArgumentException $r12;
        java.lang.Object $r1, $r6, $r8, $r10;

        r0 := @parameter0: java.util.Map;

        if r0 != null goto label1;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The object and transformer map must not be null");

        throw $r12;

     label1:
        $r1 = interfaceinvoke r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>(null);

        r2 = (org.apache.commons.collections.Transformer) $r1;

        $i0 = interfaceinvoke r0.<java.util.Map: int size()>();

        r13 = newarray (org.apache.commons.collections.Transformer)[$i0];

        r14 = newarray (org.apache.commons.collections.Predicate)[$i0];

        i1 = 0;

        $r3 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r8 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = staticinvoke <org.apache.commons.collections.functors.EqualPredicate: org.apache.commons.collections.Predicate getInstance(java.lang.Object)>($r8);

        r14[i1] = $r9;

        $r10 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r11 = (org.apache.commons.collections.Transformer) $r10;

        r13[i1] = $r11;

        i1 = i1 + 1;

        goto label2;

     label3:
        $r5 = staticinvoke <org.apache.commons.collections.TransformerUtils: org.apache.commons.collections.Transformer switchTransformer(org.apache.commons.collections.Predicate[],org.apache.commons.collections.Transformer[],org.apache.commons.collections.Transformer)>(r14, r13, r2);

        return $r5;
    }

    public static org.apache.commons.collections.Transformer instantiateTransformer()
    {
        org.apache.commons.collections.Transformer $r0;

        $r0 = <org.apache.commons.collections.functors.InstantiateTransformer: org.apache.commons.collections.Transformer NO_ARG_INSTANCE>;

        return $r0;
    }

    public static org.apache.commons.collections.Transformer instantiateTransformer(java.lang.Class[], java.lang.Object[])
    {
        java.lang.Class[] r0;
        java.lang.Object[] r1;
        org.apache.commons.collections.Transformer $r2;

        r0 := @parameter0: java.lang.Class[];

        r1 := @parameter1: java.lang.Object[];

        $r2 = staticinvoke <org.apache.commons.collections.functors.InstantiateTransformer: org.apache.commons.collections.Transformer getInstance(java.lang.Class[],java.lang.Object[])>(r0, r1);

        return $r2;
    }

    public static org.apache.commons.collections.Transformer mapTransformer(java.util.Map)
    {
        org.apache.commons.collections.Transformer $r1;
        java.util.Map r0;

        r0 := @parameter0: java.util.Map;

        $r1 = staticinvoke <org.apache.commons.collections.functors.MapTransformer: org.apache.commons.collections.Transformer getInstance(java.util.Map)>(r0);

        return $r1;
    }

    public static org.apache.commons.collections.Transformer invokerTransformer(java.lang.String)
    {
        java.lang.String r0;
        org.apache.commons.collections.Transformer $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.commons.collections.functors.InvokerTransformer: org.apache.commons.collections.Transformer getInstance(java.lang.String,java.lang.Class[],java.lang.Object[])>(r0, null, null);

        return $r1;
    }

    public static org.apache.commons.collections.Transformer invokerTransformer(java.lang.String, java.lang.Class[], java.lang.Object[])
    {
        java.lang.Object[] r2;
        org.apache.commons.collections.Transformer $r3;
        java.lang.Class[] r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Class[];

        r2 := @parameter2: java.lang.Object[];

        $r3 = staticinvoke <org.apache.commons.collections.functors.InvokerTransformer: org.apache.commons.collections.Transformer getInstance(java.lang.String,java.lang.Class[],java.lang.Object[])>(r0, r1, r2);

        return $r3;
    }

    public static org.apache.commons.collections.Transformer stringValueTransformer()
    {
        org.apache.commons.collections.Transformer $r0;

        $r0 = <org.apache.commons.collections.functors.StringValueTransformer: org.apache.commons.collections.Transformer INSTANCE>;

        return $r0;
    }
}
