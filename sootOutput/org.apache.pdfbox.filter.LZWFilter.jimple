public class org.apache.pdfbox.filter.LZWFilter extends java.lang.Object implements org.apache.pdfbox.filter.Filter
{
    private static final org.apache.commons.logging.Log LOG;
    public static final long CLEAR_TABLE;
    public static final long EOD;

    public void <init>()
    {
        org.apache.pdfbox.filter.LZWFilter r0;

        r0 := @this: org.apache.pdfbox.filter.LZWFilter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void decode(java.io.InputStream, java.io.OutputStream, org.apache.pdfbox.cos.COSDictionary, int) throws java.io.IOException
    {
        byte[] $r12, $r13;
        java.io.ByteArrayInputStream $r28;
        boolean $z0, $z1;
        org.apache.pdfbox.cos.COSDictionary r0, r23;
        org.apache.pdfbox.cos.COSBase $r3, $r22;
        java.lang.StringBuilder $r17, $r20, $r25;
        org.apache.pdfbox.cos.COSArray r24;
        java.io.ByteArrayOutputStream $r27;
        int $i0, $i1, $i2, i3, $i4, i5, $i7;
        java.lang.String $r19, $r21;
        org.apache.pdfbox.filter.LZWFilter r4;
        org.apache.pdfbox.cos.COSName $r1, $r2, $r7, $r8, $r9, $r14;
        java.io.OutputStream r6;
        java.io.IOException $r26;
        java.lang.Class $r18;
        java.io.InputStream r5;

        r4 := @this: org.apache.pdfbox.filter.LZWFilter;

        r5 := @parameter0: java.io.InputStream;

        r6 := @parameter1: java.io.OutputStream;

        r0 := @parameter2: org.apache.pdfbox.cos.COSDictionary;

        i3 := @parameter3: int;

        $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DECODE_PARMS>;

        $r1 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DP>;

        $r3 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)>($r2, $r1);

        r23 = null;

        $z0 = $r3 instanceof org.apache.pdfbox.cos.COSDictionary;

        if $z0 == 0 goto label1;

        r23 = (org.apache.pdfbox.cos.COSDictionary) $r3;

        goto label4;

     label1:
        $z1 = $r3 instanceof org.apache.pdfbox.cos.COSArray;

        if $z1 == 0 goto label3;

        r24 = (org.apache.pdfbox.cos.COSArray) $r3;

        $i4 = virtualinvoke r24.<org.apache.pdfbox.cos.COSArray: int size()>();

        if i3 >= $i4 goto label2;

        $r22 = virtualinvoke r24.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase getObject(int)>(i3);

        r23 = (org.apache.pdfbox.cos.COSDictionary) $r22;

     label2:
        goto label4;

     label3:
        if $r3 == null goto label4;

        $r26 = new java.io.IOException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Expected COSArray or COSDictionary and not ");

        $r18 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $r19 = virtualinvoke $r18.<java.lang.Class: java.lang.String getName()>();

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<java.io.IOException: void <init>(java.lang.String)>($r21);

        throw $r26;

     label4:
        $i7 = (int) -1;

        i5 = $i7;

        if r23 == null goto label5;

        $r14 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName PREDICTOR>;

        i5 = virtualinvoke r23.<org.apache.pdfbox.cos.COSDictionary: int getInt(org.apache.pdfbox.cos.COSName)>($r14);

     label5:
        if i5 <= 1 goto label6;

        $r7 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName COLORS>;

        $i0 = virtualinvoke r23.<org.apache.pdfbox.cos.COSDictionary: int getInt(org.apache.pdfbox.cos.COSName,int)>($r7, 1);

        $r8 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName BITS_PER_COMPONENT>;

        $i1 = virtualinvoke r23.<org.apache.pdfbox.cos.COSDictionary: int getInt(org.apache.pdfbox.cos.COSName,int)>($r8, 8);

        $r9 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName COLUMNS>;

        $i2 = virtualinvoke r23.<org.apache.pdfbox.cos.COSDictionary: int getInt(org.apache.pdfbox.cos.COSName,int)>($r9, 1);

        $r27 = new java.io.ByteArrayOutputStream;

        specialinvoke $r27.<java.io.ByteArrayOutputStream: void <init>()>();

        specialinvoke r4.<org.apache.pdfbox.filter.LZWFilter: void doLZWDecode(java.io.InputStream,java.io.OutputStream)>(r5, $r27);

        $r28 = new java.io.ByteArrayInputStream;

        $r12 = virtualinvoke $r27.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r28.<java.io.ByteArrayInputStream: void <init>(byte[])>($r12);

        $r13 = staticinvoke <org.apache.pdfbox.filter.Predictor: byte[] decodePredictor(int,int,int,int,java.io.InputStream)>(i5, $i0, $i1, $i2, $r28);

        virtualinvoke r6.<java.io.OutputStream: void write(byte[])>($r13);

        virtualinvoke r6.<java.io.OutputStream: void flush()>();

        virtualinvoke $r27.<java.io.ByteArrayOutputStream: void reset()>();

        virtualinvoke $r28.<java.io.ByteArrayInputStream: void reset()>();

        goto label7;

     label6:
        specialinvoke r4.<org.apache.pdfbox.filter.LZWFilter: void doLZWDecode(java.io.InputStream,java.io.OutputStream)>(r5, r6);

     label7:
        return;
    }

    private void doLZWDecode(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        byte[] r10, r11, r12, r13, r14;
        byte $b0, $b3, $b8, $b11, $b13, $b19, $b23, b24;
        java.io.EOFException $r7;
        long $l2, l21, $l22;
        java.util.ArrayList r9;
        javax.imageio.stream.MemoryCacheImageInputStream $r15;
        int $i1, $i4, $i5, $i6, $i7, $i9, $i10, $i12, $i14, $i15, $i16, $i17, $i18, i20, i25, i26, $i27;
        org.apache.pdfbox.filter.LZWFilter r4;
        java.io.OutputStream r2;
        java.lang.Object $r3, $r5, $r6;
        org.apache.commons.logging.Log $r8;
        java.io.InputStream r1;

        r4 := @this: org.apache.pdfbox.filter.LZWFilter;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.io.OutputStream;

        r9 = null;

        i20 = 9;

        $r15 = new javax.imageio.stream.MemoryCacheImageInputStream;

        specialinvoke $r15.<javax.imageio.stream.MemoryCacheImageInputStream: void <init>(java.io.InputStream)>(r1);

        l21 = -1L;

     label01:
        $l22 = virtualinvoke $r15.<javax.imageio.stream.MemoryCacheImageInputStream: long readBits(int)>(i20);

        $b23 = $l22 cmp 257L;

        if $b23 == 0 goto label10;

        $b0 = $l22 cmp 256L;

        if $b0 != 0 goto label02;

        i20 = 9;

        r9 = specialinvoke r4.<org.apache.pdfbox.filter.LZWFilter: java.util.ArrayList createCodeTable()>();

        l21 = -1L;

        goto label01;

     label02:
        $i1 = virtualinvoke r9.<java.util.ArrayList: int size()>();

        $l2 = (long) $i1;

        $b3 = $l22 cmp $l2;

        $i27 = (int) $b3;

        if $i27 >= 0 goto label06;

        $i12 = (int) $l22;

        $r5 = virtualinvoke r9.<java.util.ArrayList: java.lang.Object get(int)>($i12);

        r10 = (byte[]) $r5;

        b24 = r10[0];

        virtualinvoke r2.<java.io.OutputStream: void write(byte[])>(r10);

        $b13 = l21 cmp -1L;

        if $b13 == 0 goto label05;

        $i14 = (int) l21;

        $r6 = virtualinvoke r9.<java.util.ArrayList: java.lang.Object get(int)>($i14);

        r11 = (byte[]) $r6;

        $i15 = lengthof r11;

        $i16 = $i15 + 1;

        r12 = newarray (byte)[$i16];

        i25 = 0;

     label03:
        $i17 = lengthof r11;

        if i25 >= $i17 goto label04;

        $b19 = r11[i25];

        r12[i25] = $b19;

        i25 = i25 + 1;

        goto label03;

     label04:
        $i18 = lengthof r11;

        r12[$i18] = b24;

        virtualinvoke r9.<java.util.ArrayList: boolean add(java.lang.Object)>(r12);

     label05:
        goto label09;

     label06:
        $i4 = (int) l21;

        $r3 = virtualinvoke r9.<java.util.ArrayList: java.lang.Object get(int)>($i4);

        r13 = (byte[]) $r3;

        $i5 = lengthof r13;

        $i6 = $i5 + 1;

        r14 = newarray (byte)[$i6];

        i26 = 0;

     label07:
        $i7 = lengthof r13;

        if i26 >= $i7 goto label08;

        $b11 = r13[i26];

        r14[i26] = $b11;

        i26 = i26 + 1;

        goto label07;

     label08:
        $i9 = lengthof r13;

        $b8 = r13[0];

        r14[$i9] = $b8;

        virtualinvoke r2.<java.io.OutputStream: void write(byte[])>(r14);

        virtualinvoke r9.<java.util.ArrayList: boolean add(java.lang.Object)>(r14);

     label09:
        $i10 = virtualinvoke r9.<java.util.ArrayList: int size()>();

        i20 = specialinvoke r4.<org.apache.pdfbox.filter.LZWFilter: int calculateChunk(int)>($i10);

        l21 = $l22;

        goto label01;

     label10:
        goto label12;

     label11:
        $r7 := @caughtexception;

        $r8 = <org.apache.pdfbox.filter.LZWFilter: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r8.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("Premature EOF in LZW stream, EOD code missing");

     label12:
        virtualinvoke r2.<java.io.OutputStream: void flush()>();

        return;

        catch java.io.EOFException from label01 to label10 with label11;
    }

    public void encode(java.io.InputStream, java.io.OutputStream, org.apache.pdfbox.cos.COSDictionary, int) throws java.io.IOException
    {
        byte[] r4, $r5, $r6, r9;
        byte b7, $b19;
        org.apache.pdfbox.cos.COSDictionary r7;
        javax.imageio.stream.MemoryCacheImageOutputStream $r10;
        long $l6, $l17;
        java.util.ArrayList r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i18, i20, i21, i22, $i24, $i26, $i27, $i29, $i30, $i32;
        org.apache.pdfbox.filter.LZWFilter r0;
        java.io.OutputStream r2;
        java.io.InputStream r3;

        r0 := @this: org.apache.pdfbox.filter.LZWFilter;

        r3 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.io.OutputStream;

        r7 := @parameter2: org.apache.pdfbox.cos.COSDictionary;

        i20 := @parameter3: int;

        r8 = specialinvoke r0.<org.apache.pdfbox.filter.LZWFilter: java.util.ArrayList createCodeTable()>();

        r9 = null;

        $r10 = new javax.imageio.stream.MemoryCacheImageOutputStream;

        specialinvoke $r10.<javax.imageio.stream.MemoryCacheImageOutputStream: void <init>(java.io.OutputStream)>(r2);

        virtualinvoke $r10.<javax.imageio.stream.MemoryCacheImageOutputStream: void writeBits(long,int)>(256L, 9);

        $i24 = (int) -1;

        i21 = $i24;

     label1:
        $i0 = virtualinvoke r3.<java.io.InputStream: int read()>();

        $i26 = (int) -1;

        if $i0 == $i26 goto label8;

        b7 = (byte) $i0;

        if r9 != null goto label2;

        $r6 = newarray (byte)[1];

        $r6[0] = b7;

        r9 = $r6;

        $i27 = (int) b7;

        i21 = $i27 & 255;

        goto label7;

     label2:
        $i8 = lengthof r9;

        $i9 = $i8 + 1;

        r4 = newarray (byte)[$i9];

        i22 = 0;

     label3:
        $i10 = lengthof r9;

        if i22 >= $i10 goto label4;

        $b19 = r9[i22];

        r4[i22] = $b19;

        i22 = i22 + 1;

        goto label3;

     label4:
        r9 = r4;

        $i11 = lengthof r4;

        $i12 = $i11 - 1;

        r4[$i12] = b7;

        $i13 = specialinvoke r0.<org.apache.pdfbox.filter.LZWFilter: int findPatternCode(java.util.ArrayList,byte[])>(r8, r4);

        $i29 = (int) -1;

        if $i13 != $i29 goto label6;

        $i14 = virtualinvoke r8.<java.util.ArrayList: int size()>();

        $i15 = $i14 - 1;

        $i16 = specialinvoke r0.<org.apache.pdfbox.filter.LZWFilter: int calculateChunk(int)>($i15);

        $l17 = (long) i21;

        virtualinvoke $r10.<javax.imageio.stream.MemoryCacheImageOutputStream: void writeBits(long,int)>($l17, $i16);

        virtualinvoke r8.<java.util.ArrayList: boolean add(java.lang.Object)>(r4);

        $i18 = virtualinvoke r8.<java.util.ArrayList: int size()>();

        if $i18 != 4096 goto label5;

        virtualinvoke $r10.<javax.imageio.stream.MemoryCacheImageOutputStream: void writeBits(long,int)>(256L, $i16);

        r8 = specialinvoke r0.<org.apache.pdfbox.filter.LZWFilter: java.util.ArrayList createCodeTable()>();

     label5:
        $r5 = newarray (byte)[1];

        $r5[0] = b7;

        r9 = $r5;

        $i30 = (int) b7;

        i21 = $i30 & 255;

        goto label7;

     label6:
        i21 = $i13;

     label7:
        goto label1;

     label8:
        $i32 = (int) -1;

        if i21 == $i32 goto label9;

        $i3 = virtualinvoke r8.<java.util.ArrayList: int size()>();

        $i4 = $i3 - 1;

        $i5 = specialinvoke r0.<org.apache.pdfbox.filter.LZWFilter: int calculateChunk(int)>($i4);

        $l6 = (long) i21;

        virtualinvoke $r10.<javax.imageio.stream.MemoryCacheImageOutputStream: void writeBits(long,int)>($l6, $i5);

     label9:
        $i1 = virtualinvoke r8.<java.util.ArrayList: int size()>();

        $i2 = specialinvoke r0.<org.apache.pdfbox.filter.LZWFilter: int calculateChunk(int)>($i1);

        virtualinvoke $r10.<javax.imageio.stream.MemoryCacheImageOutputStream: void writeBits(long,int)>(257L, $i2);

        virtualinvoke $r10.<javax.imageio.stream.MemoryCacheImageOutputStream: void writeBits(long,int)>(0L, 7);

        virtualinvoke $r10.<javax.imageio.stream.MemoryCacheImageOutputStream: void flush()>();

        return;
    }

    private int findPatternCode(java.util.ArrayList, byte[])
    {
        byte[] r2, $r3;
        long $l1;
        java.util.ArrayList r0;
        byte $b2;
        int $i0, $i3, $i4, i5, i6, i7, $i9, $i10, $i12, $i14, $i16, $i18;
        boolean $z0;
        org.apache.pdfbox.filter.LZWFilter r4;
        java.lang.Object $r1;

        r4 := @this: org.apache.pdfbox.filter.LZWFilter;

        r0 := @parameter0: java.util.ArrayList;

        r2 := @parameter1: byte[];

        $i9 = (int) -1;

        i5 = $i9;

        i6 = 0;

        $i0 = virtualinvoke r0.<java.util.ArrayList: int size()>();

        i7 = $i0 - 1;

     label1:
        if i7 < 0 goto label6;

        $l1 = (long) i7;

        $b2 = $l1 cmp 257L;

        $i10 = (int) $b2;

        if $i10 > 0 goto label3;

        $i12 = (int) -1;

        if i5 == $i12 goto label2;

        return i5;

     label2:
        $i4 = lengthof r2;

        if $i4 <= 1 goto label3;

        $i14 = (int) -1;

        return $i14;

     label3:
        $r1 = virtualinvoke r0.<java.util.ArrayList: java.lang.Object get(int)>(i7);

        $r3 = (byte[]) $r1;

        $i16 = (int) -1;

        if i5 != $i16 goto label4;

        $i3 = lengthof $r3;

        if $i3 <= i6 goto label5;

     label4:
        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r3, r2);

        if $z0 == 0 goto label5;

        i5 = i7;

        i6 = lengthof $r3;

     label5:
        $i18 = (int) -1;

        i7 = i7 + $i18;

        goto label1;

     label6:
        return i5;
    }

    private java.util.ArrayList createCodeTable()
    {
        byte[] $r1;
        byte $b1;
        int $i0, i2;
        java.util.ArrayList $r0;
        org.apache.pdfbox.filter.LZWFilter r2;

        r2 := @this: org.apache.pdfbox.filter.LZWFilter;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(4096);

        i2 = 0;

     label1:
        if i2 >= 256 goto label2;

        $r1 = newarray (byte)[1];

        $i0 = i2 & 255;

        $b1 = (byte) $i0;

        $r1[0] = $b1;

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

        i2 = i2 + 1;

        goto label1;

     label2:
        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>(null);

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>(null);

        return $r0;
    }

    private int calculateChunk(int)
    {
        int i0;
        org.apache.pdfbox.filter.LZWFilter r0;

        r0 := @this: org.apache.pdfbox.filter.LZWFilter;

        i0 := @parameter0: int;

        if i0 < 2047 goto label1;

        return 12;

     label1:
        if i0 < 1023 goto label2;

        return 11;

     label2:
        if i0 < 511 goto label3;

        return 10;

     label3:
        return 9;
    }

    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;

        <org.apache.pdfbox.filter.LZWFilter: long EOD> = 257L;

        <org.apache.pdfbox.filter.LZWFilter: long CLEAR_TABLE> = 256L;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/apache/pdfbox/filter/LZWFilter;");

        <org.apache.pdfbox.filter.LZWFilter: org.apache.commons.logging.Log LOG> = $r0;

        return;
    }
}
