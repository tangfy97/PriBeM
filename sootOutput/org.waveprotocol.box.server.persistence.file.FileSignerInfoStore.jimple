public class org.waveprotocol.box.server.persistence.file.FileSignerInfoStore extends java.lang.Object implements org.waveprotocol.box.server.persistence.SignerInfoStore
{
    private static final java.lang.String SIGNER_FILE_EXTENSION;
    private final java.lang.String signerInfoStoreBasePath;
    private final org.waveprotocol.wave.crypto.CertPathStore certPathStore;
    private static final org.waveprotocol.wave.util.logging.Log LOG;

    public void <init>(java.lang.String)
    {
        org.waveprotocol.wave.crypto.DefaultCertPathStore $r1;
        org.waveprotocol.box.server.persistence.file.FileSignerInfoStore r0;
        java.lang.String r2;

        r0 := @this: org.waveprotocol.box.server.persistence.file.FileSignerInfoStore;

        r2 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.waveprotocol.wave.crypto.DefaultCertPathStore;

        specialinvoke $r1.<org.waveprotocol.wave.crypto.DefaultCertPathStore: void <init>()>();

        r0.<org.waveprotocol.box.server.persistence.file.FileSignerInfoStore: org.waveprotocol.wave.crypto.CertPathStore certPathStore> = $r1;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "Requested path is null");

        r0.<org.waveprotocol.box.server.persistence.file.FileSignerInfoStore: java.lang.String signerInfoStoreBasePath> = r2;

        return;
    }

    private java.lang.String signerIdToFileName(byte[])
    {
        byte[] r7;
        char[] $r8;
        java.lang.StringBuilder $r0, $r3, $r5, $r9, $r10;
        org.waveprotocol.box.server.persistence.file.FileSignerInfoStore r1;
        java.lang.String $r2, $r4, $r6, $r11;

        r1 := @this: org.waveprotocol.box.server.persistence.file.FileSignerInfoStore;

        r7 := @parameter0: byte[];

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = r1.<org.waveprotocol.box.server.persistence.file.FileSignerInfoStore: java.lang.String signerInfoStoreBasePath>;

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = <java.io.File: java.lang.String separator>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = new java.lang.String;

        $r8 = staticinvoke <org.apache.commons.codec.binary.Hex: char[] encodeHex(byte[])>(r7);

        specialinvoke $r6.<java.lang.String: void <init>(char[])>($r8);

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".signer");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    public void initializeSignerInfoStore() throws org.waveprotocol.box.server.persistence.PersistenceException
    {
        org.waveprotocol.box.server.persistence.file.FileSignerInfoStore r0;
        org.waveprotocol.wave.util.logging.Log $r1;
        java.lang.String $r2;

        r0 := @this: org.waveprotocol.box.server.persistence.file.FileSignerInfoStore;

        $r2 = r0.<org.waveprotocol.box.server.persistence.file.FileSignerInfoStore: java.lang.String signerInfoStoreBasePath>;

        $r1 = <org.waveprotocol.box.server.persistence.file.FileSignerInfoStore: org.waveprotocol.wave.util.logging.Log LOG>;

        staticinvoke <org.waveprotocol.box.server.persistence.file.FileUtils: void performDirectoryChecks(java.lang.String,java.lang.String,java.lang.String,org.waveprotocol.wave.util.logging.Log)>($r2, ".signer", "signer info store", $r1);

        return;
    }

    public org.waveprotocol.wave.crypto.SignerInfo getSignerInfo(byte[]) throws org.waveprotocol.wave.crypto.SignatureException
    {
        byte[] r2;
        com.google.protobuf.AbstractMessage$Builder $r9;
        org.waveprotocol.box.server.persistence.file.FileSignerInfoStore r0;
        org.waveprotocol.wave.util.logging.Log $r13, $r16;
        boolean $z0;
        org.waveprotocol.wave.crypto.CertPathStore $r1, $r3;
        java.lang.StringBuilder $r19, $r20, $r22, $r26, $r27, $r29;
        java.lang.Throwable $r14, $r15;
        org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo $r11;
        java.lang.String $r6, $r21, $r23, $r28, $r30;
        org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo$Builder $r8, $r10;
        java.io.IOException $r17;
        java.io.FileInputStream $r7, r32;
        java.io.File $r5;
        org.waveprotocol.wave.crypto.SignatureException $r18, $r24, $r25;
        org.waveprotocol.wave.crypto.SignerInfo $r4, $r12, r31;

        r0 := @this: org.waveprotocol.box.server.persistence.file.FileSignerInfoStore;

        r2 := @parameter0: byte[];

        $r1 = r0.<org.waveprotocol.box.server.persistence.file.FileSignerInfoStore: org.waveprotocol.wave.crypto.CertPathStore certPathStore>;

        entermonitor $r1;

     label01:
        $r3 = r0.<org.waveprotocol.box.server.persistence.file.FileSignerInfoStore: org.waveprotocol.wave.crypto.CertPathStore certPathStore>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.crypto.CertPathStore: org.waveprotocol.wave.crypto.SignerInfo getSignerInfo(byte[])>(r2);

        r31 = $r4;

        $r5 = new java.io.File;

        $r6 = specialinvoke r0.<org.waveprotocol.box.server.persistence.file.FileSignerInfoStore: java.lang.String signerIdToFileName(byte[])>(r2);

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>($r6);

        if $r4 != null goto label08;

        $z0 = virtualinvoke $r5.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label08;

        r32 = null;

     label02:
        $r7 = new java.io.FileInputStream;

        specialinvoke $r7.<java.io.FileInputStream: void <init>(java.io.File)>($r5);

        r32 = $r7;

        $r8 = staticinvoke <org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo: org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo$Builder newBuilder()>();

        $r9 = virtualinvoke $r8.<org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo$Builder: com.google.protobuf.AbstractMessage$Builder mergeFrom(java.io.InputStream)>($r7);

        $r10 = (org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo$Builder) $r9;

        $r11 = virtualinvoke $r10.<org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo$Builder: org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo build()>();

        $r12 = new org.waveprotocol.wave.crypto.SignerInfo;

        specialinvoke $r12.<org.waveprotocol.wave.crypto.SignerInfo: void <init>(org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo)>($r11);

        r31 = $r12;

     label03:
        $r13 = <org.waveprotocol.box.server.persistence.file.FileSignerInfoStore: org.waveprotocol.wave.util.logging.Log LOG>;

        staticinvoke <org.waveprotocol.box.server.persistence.file.FileUtils: void closeAndIgnoreException(java.io.Closeable,java.io.File,org.waveprotocol.wave.util.logging.Log)>($r7, $r5, $r13);

        goto label08;

     label04:
        $r24 := @caughtexception;

        $r25 = new org.waveprotocol.wave.crypto.SignatureException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to parse signer info from file: ");

        $r28 = virtualinvoke $r5.<java.io.File: java.lang.String getAbsolutePath()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<org.waveprotocol.wave.crypto.SignatureException: void <init>(java.lang.String,java.lang.Throwable)>($r30, $r24);

        throw $r25;

     label05:
        $r17 := @caughtexception;

        $r18 = new org.waveprotocol.wave.crypto.SignatureException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to parse signer info from file: ");

        $r21 = virtualinvoke $r5.<java.io.File: java.lang.String getAbsolutePath()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<org.waveprotocol.wave.crypto.SignatureException: void <init>(java.lang.String,java.lang.Throwable)>($r23, $r17);

        throw $r18;

     label06:
        $r15 := @caughtexception;

     label07:
        $r16 = <org.waveprotocol.box.server.persistence.file.FileSignerInfoStore: org.waveprotocol.wave.util.logging.Log LOG>;

        staticinvoke <org.waveprotocol.box.server.persistence.file.FileUtils: void closeAndIgnoreException(java.io.Closeable,java.io.File,org.waveprotocol.wave.util.logging.Log)>(r32, $r5, $r16);

        throw $r15;

     label08:
        exitmonitor $r1;

     label09:
        return r31;

     label10:
        $r14 := @caughtexception;

        exitmonitor $r1;

     label11:
        throw $r14;

        catch org.waveprotocol.wave.crypto.SignatureException from label02 to label03 with label04;
        catch java.io.IOException from label02 to label03 with label05;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label04 to label07 with label06;
        catch java.lang.Throwable from label01 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public void putSignerInfo(org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo) throws org.waveprotocol.wave.crypto.SignatureException
    {
        java.lang.Throwable $r11, $r12;
        byte[] $r5, $r8;
        org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo r3;
        org.waveprotocol.box.server.persistence.file.FileSignerInfoStore r0;
        org.waveprotocol.wave.util.logging.Log $r10, $r13;
        java.lang.String $r6, $r18, $r20;
        java.io.FileOutputStream $r7, r21;
        java.io.IOException $r14;
        java.io.File $r4;
        org.waveprotocol.wave.crypto.SignatureException $r15;
        org.waveprotocol.wave.crypto.CertPathStore $r1, $r9;
        org.waveprotocol.wave.crypto.SignerInfo $r2;
        java.lang.StringBuilder $r16, $r17, $r19;

        r0 := @this: org.waveprotocol.box.server.persistence.file.FileSignerInfoStore;

        r3 := @parameter0: org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo;

        $r1 = r0.<org.waveprotocol.box.server.persistence.file.FileSignerInfoStore: org.waveprotocol.wave.crypto.CertPathStore certPathStore>;

        entermonitor $r1;

     label01:
        $r2 = new org.waveprotocol.wave.crypto.SignerInfo;

        specialinvoke $r2.<org.waveprotocol.wave.crypto.SignerInfo: void <init>(org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo)>(r3);

        $r4 = new java.io.File;

        $r5 = virtualinvoke $r2.<org.waveprotocol.wave.crypto.SignerInfo: byte[] getSignerId()>();

        $r6 = specialinvoke r0.<org.waveprotocol.box.server.persistence.file.FileSignerInfoStore: java.lang.String signerIdToFileName(byte[])>($r5);

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>($r6);

        r21 = null;

     label02:
        $r7 = new java.io.FileOutputStream;

        specialinvoke $r7.<java.io.FileOutputStream: void <init>(java.io.File)>($r4);

        r21 = $r7;

        $r8 = virtualinvoke r3.<org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo: byte[] toByteArray()>();

        virtualinvoke $r7.<java.io.FileOutputStream: void write(byte[])>($r8);

        virtualinvoke $r7.<java.io.FileOutputStream: void flush()>();

        $r9 = r0.<org.waveprotocol.box.server.persistence.file.FileSignerInfoStore: org.waveprotocol.wave.crypto.CertPathStore certPathStore>;

        interfaceinvoke $r9.<org.waveprotocol.wave.crypto.CertPathStore: void putSignerInfo(org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo)>(r3);

     label03:
        $r10 = <org.waveprotocol.box.server.persistence.file.FileSignerInfoStore: org.waveprotocol.wave.util.logging.Log LOG>;

        staticinvoke <org.waveprotocol.box.server.persistence.file.FileUtils: void closeAndIgnoreException(java.io.Closeable,java.io.File,org.waveprotocol.wave.util.logging.Log)>($r7, $r4, $r10);

        goto label07;

     label04:
        $r14 := @caughtexception;

        $r15 = new org.waveprotocol.wave.crypto.SignatureException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to write signer info to file: ");

        $r18 = virtualinvoke $r4.<java.io.File: java.lang.String getAbsolutePath()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<org.waveprotocol.wave.crypto.SignatureException: void <init>(java.lang.String,java.lang.Throwable)>($r20, $r14);

        throw $r15;

     label05:
        $r12 := @caughtexception;

     label06:
        $r13 = <org.waveprotocol.box.server.persistence.file.FileSignerInfoStore: org.waveprotocol.wave.util.logging.Log LOG>;

        staticinvoke <org.waveprotocol.box.server.persistence.file.FileUtils: void closeAndIgnoreException(java.io.Closeable,java.io.File,org.waveprotocol.wave.util.logging.Log)>(r21, $r4, $r13);

        throw $r12;

     label07:
        exitmonitor $r1;

     label08:
        goto label11;

     label09:
        $r11 := @caughtexception;

        exitmonitor $r1;

     label10:
        throw $r11;

     label11:
        return;

        catch java.io.IOException from label02 to label03 with label04;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label04 to label06 with label05;
        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.util.logging.Log $r0;

        <org.waveprotocol.box.server.persistence.file.FileSignerInfoStore: java.lang.String SIGNER_FILE_EXTENSION> = ".signer";

        $r0 = staticinvoke <org.waveprotocol.wave.util.logging.Log: org.waveprotocol.wave.util.logging.Log get(java.lang.Class)>(class "Lorg/waveprotocol/box/server/persistence/file/FileSignerInfoStore;");

        <org.waveprotocol.box.server.persistence.file.FileSignerInfoStore: org.waveprotocol.wave.util.logging.Log LOG> = $r0;

        return;
    }
}
