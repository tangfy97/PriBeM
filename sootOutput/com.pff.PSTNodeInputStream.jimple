public class com.pff.PSTNodeInputStream extends java.io.InputStream
{
    private java.io.RandomAccessFile in;
    private com.pff.PSTFile pstFile;
    private java.util.LinkedList skipPoints;
    private java.util.LinkedList indexItems;
    private int currentBlock;
    private long currentLocation;
    private byte[] allData;
    private long length;
    private boolean encrypted;
    private int totalLoopCount;

    void <init>(com.pff.PSTFile, byte[])
    {
        byte[] r3, $r4;
        long $l1;
        int $i0, $i2;
        com.pff.PSTFile r5;
        com.pff.PSTNodeInputStream r0;
        java.util.LinkedList $r1, $r2;
        boolean $z0;

        r0 := @this: com.pff.PSTNodeInputStream;

        r5 := @parameter0: com.pff.PSTFile;

        r3 := @parameter1: byte[];

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        r0.<com.pff.PSTNodeInputStream: java.util.LinkedList skipPoints> = $r1;

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        r0.<com.pff.PSTNodeInputStream: java.util.LinkedList indexItems> = $r2;

        r0.<com.pff.PSTNodeInputStream: int currentBlock> = 0;

        r0.<com.pff.PSTNodeInputStream: long currentLocation> = 0L;

        r0.<com.pff.PSTNodeInputStream: byte[] allData> = null;

        r0.<com.pff.PSTNodeInputStream: long length> = 0L;

        r0.<com.pff.PSTNodeInputStream: boolean encrypted> = 0;

        r0.<com.pff.PSTNodeInputStream: int totalLoopCount> = 0;

        r0.<com.pff.PSTNodeInputStream: byte[] allData> = r3;

        $r4 = r0.<com.pff.PSTNodeInputStream: byte[] allData>;

        $i0 = lengthof $r4;

        $l1 = (long) $i0;

        r0.<com.pff.PSTNodeInputStream: long length> = $l1;

        $i2 = virtualinvoke r5.<com.pff.PSTFile: int getEncryptionType()>();

        if $i2 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        r0.<com.pff.PSTNodeInputStream: boolean encrypted> = $z0;

        r0.<com.pff.PSTNodeInputStream: int currentBlock> = 0;

        r0.<com.pff.PSTNodeInputStream: long currentLocation> = 0L;

        return;
    }

    void <init>(com.pff.PSTFile, byte[], boolean)
    {
        byte[] r3, $r4;
        long $l1;
        int $i0;
        com.pff.PSTFile r5;
        com.pff.PSTNodeInputStream r0;
        java.util.LinkedList $r1, $r2;
        boolean z0;

        r0 := @this: com.pff.PSTNodeInputStream;

        r5 := @parameter0: com.pff.PSTFile;

        r3 := @parameter1: byte[];

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        r0.<com.pff.PSTNodeInputStream: java.util.LinkedList skipPoints> = $r1;

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        r0.<com.pff.PSTNodeInputStream: java.util.LinkedList indexItems> = $r2;

        r0.<com.pff.PSTNodeInputStream: int currentBlock> = 0;

        r0.<com.pff.PSTNodeInputStream: long currentLocation> = 0L;

        r0.<com.pff.PSTNodeInputStream: byte[] allData> = null;

        r0.<com.pff.PSTNodeInputStream: long length> = 0L;

        r0.<com.pff.PSTNodeInputStream: boolean encrypted> = 0;

        r0.<com.pff.PSTNodeInputStream: int totalLoopCount> = 0;

        r0.<com.pff.PSTNodeInputStream: byte[] allData> = r3;

        r0.<com.pff.PSTNodeInputStream: boolean encrypted> = z0;

        $r4 = r0.<com.pff.PSTNodeInputStream: byte[] allData>;

        $i0 = lengthof $r4;

        $l1 = (long) $i0;

        r0.<com.pff.PSTNodeInputStream: long length> = $l1;

        r0.<com.pff.PSTNodeInputStream: int currentBlock> = 0;

        r0.<com.pff.PSTNodeInputStream: long currentLocation> = 0L;

        return;
    }

    void <init>(com.pff.PSTFile, com.pff.PSTDescriptorItem) throws java.io.IOException, com.pff.PSTException
    {
        java.io.RandomAccessFile $r4;
        com.pff.PSTDescriptorItem r5;
        long $l2;
        com.pff.OffsetIndexItem $r6;
        int $i0, $i1;
        com.pff.PSTFile r3;
        com.pff.PSTNodeInputStream r0;
        java.util.LinkedList $r1, $r2;
        boolean $z0;

        r0 := @this: com.pff.PSTNodeInputStream;

        r3 := @parameter0: com.pff.PSTFile;

        r5 := @parameter1: com.pff.PSTDescriptorItem;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        r0.<com.pff.PSTNodeInputStream: java.util.LinkedList skipPoints> = $r1;

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        r0.<com.pff.PSTNodeInputStream: java.util.LinkedList indexItems> = $r2;

        r0.<com.pff.PSTNodeInputStream: int currentBlock> = 0;

        r0.<com.pff.PSTNodeInputStream: long currentLocation> = 0L;

        r0.<com.pff.PSTNodeInputStream: byte[] allData> = null;

        r0.<com.pff.PSTNodeInputStream: long length> = 0L;

        r0.<com.pff.PSTNodeInputStream: boolean encrypted> = 0;

        r0.<com.pff.PSTNodeInputStream: int totalLoopCount> = 0;

        $r4 = virtualinvoke r3.<com.pff.PSTFile: java.io.RandomAccessFile getFileHandle()>();

        r0.<com.pff.PSTNodeInputStream: java.io.RandomAccessFile in> = $r4;

        r0.<com.pff.PSTNodeInputStream: com.pff.PSTFile pstFile> = r3;

        $i0 = virtualinvoke r3.<com.pff.PSTFile: int getEncryptionType()>();

        if $i0 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        r0.<com.pff.PSTNodeInputStream: boolean encrypted> = $z0;

        $i1 = r5.<com.pff.PSTDescriptorItem: int offsetIndexIdentifier>;

        $l2 = (long) $i1;

        $r6 = virtualinvoke r3.<com.pff.PSTFile: com.pff.OffsetIndexItem getOffsetIndexNode(long)>($l2);

        specialinvoke r0.<com.pff.PSTNodeInputStream: void loadFromOffsetItem(com.pff.OffsetIndexItem)>($r6);

        r0.<com.pff.PSTNodeInputStream: int currentBlock> = 0;

        r0.<com.pff.PSTNodeInputStream: long currentLocation> = 0L;

        return;
    }

    void <init>(com.pff.PSTFile, com.pff.OffsetIndexItem) throws java.io.IOException, com.pff.PSTException
    {
        java.io.RandomAccessFile $r4;
        com.pff.OffsetIndexItem r5;
        int $i0;
        com.pff.PSTFile r3;
        com.pff.PSTNodeInputStream r0;
        java.util.LinkedList $r1, $r2;
        boolean $z0;

        r0 := @this: com.pff.PSTNodeInputStream;

        r3 := @parameter0: com.pff.PSTFile;

        r5 := @parameter1: com.pff.OffsetIndexItem;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        r0.<com.pff.PSTNodeInputStream: java.util.LinkedList skipPoints> = $r1;

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        r0.<com.pff.PSTNodeInputStream: java.util.LinkedList indexItems> = $r2;

        r0.<com.pff.PSTNodeInputStream: int currentBlock> = 0;

        r0.<com.pff.PSTNodeInputStream: long currentLocation> = 0L;

        r0.<com.pff.PSTNodeInputStream: byte[] allData> = null;

        r0.<com.pff.PSTNodeInputStream: long length> = 0L;

        r0.<com.pff.PSTNodeInputStream: boolean encrypted> = 0;

        r0.<com.pff.PSTNodeInputStream: int totalLoopCount> = 0;

        $r4 = virtualinvoke r3.<com.pff.PSTFile: java.io.RandomAccessFile getFileHandle()>();

        r0.<com.pff.PSTNodeInputStream: java.io.RandomAccessFile in> = $r4;

        r0.<com.pff.PSTNodeInputStream: com.pff.PSTFile pstFile> = r3;

        $i0 = virtualinvoke r3.<com.pff.PSTFile: int getEncryptionType()>();

        if $i0 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        r0.<com.pff.PSTNodeInputStream: boolean encrypted> = $z0;

        specialinvoke r0.<com.pff.PSTNodeInputStream: void loadFromOffsetItem(com.pff.OffsetIndexItem)>(r5);

        r0.<com.pff.PSTNodeInputStream: int currentBlock> = 0;

        r0.<com.pff.PSTNodeInputStream: long currentLocation> = 0L;

        return;
    }

    private void loadFromOffsetItem(com.pff.OffsetIndexItem) throws java.io.IOException, com.pff.PSTException
    {
        java.io.RandomAccessFile $r2, $r3;
        byte[] $r4, $r6;
        long $l0, $l1, $l3, $l6, $l9;
        byte $b2, $b8;
        int $i4, $i5, $i7;
        boolean z1, $z2, $z3;
        com.pff.PSTException $r5;
        com.pff.OffsetIndexItem r0;
        com.pff.PSTNodeInputStream r1;

        r1 := @this: com.pff.PSTNodeInputStream;

        r0 := @parameter0: com.pff.OffsetIndexItem;

        $l0 = r0.<com.pff.OffsetIndexItem: long indexIdentifier>;

        $l1 = $l0 & 2L;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label1;

        $z3 = 1;

        $z2 = 1;

        goto label2;

     label1:
        $z3 = 0;

        $z2 = 0;

     label2:
        z1 = $z3;

        $r2 = r1.<com.pff.PSTNodeInputStream: java.io.RandomAccessFile in>;

        $l3 = r0.<com.pff.OffsetIndexItem: long fileOffset>;

        virtualinvoke $r2.<java.io.RandomAccessFile: void seek(long)>($l3);

        $i4 = r0.<com.pff.OffsetIndexItem: int size>;

        $r6 = newarray (byte)[$i4];

        $r3 = r1.<com.pff.PSTNodeInputStream: java.io.RandomAccessFile in>;

        virtualinvoke $r3.<java.io.RandomAccessFile: int read(byte[])>($r6);

        if $z2 == 0 goto label4;

        $i7 = r0.<com.pff.OffsetIndexItem: int size>;

        if $i7 >= 8 goto label3;

        $r5 = new com.pff.PSTException;

        specialinvoke $r5.<com.pff.PSTException: void <init>(java.lang.String)>("Invalid internal block size");

        throw $r5;

     label3:
        $b8 = $r6[0];

        if $b8 != 1 goto label4;

        $l9 = staticinvoke <com.pff.PSTObject: long convertLittleEndianBytesToLong(byte[],int,int)>($r6, 4, 8);

        r1.<com.pff.PSTNodeInputStream: long length> = $l9;

        specialinvoke r1.<com.pff.PSTNodeInputStream: void getBlockSkipPoints(byte[])>($r6);

        return;

     label4:
        if z1 == 0 goto label5;

        r1.<com.pff.PSTNodeInputStream: boolean encrypted> = 0;

     label5:
        r1.<com.pff.PSTNodeInputStream: byte[] allData> = $r6;

        $r4 = r1.<com.pff.PSTNodeInputStream: byte[] allData>;

        $i5 = lengthof $r4;

        $l6 = (long) $i5;

        r1.<com.pff.PSTNodeInputStream: long length> = $l6;

        return;
    }

    public boolean isEncrypted()
    {
        com.pff.PSTNodeInputStream r0;
        boolean $z0;

        r0 := @this: com.pff.PSTNodeInputStream;

        $z0 = r0.<com.pff.PSTNodeInputStream: boolean encrypted>;

        return $z0;
    }

    private void getBlockSkipPoints(byte[]) throws java.io.IOException, com.pff.PSTException
    {
        byte[] r0, r11;
        java.io.RandomAccessFile $r10, $r12;
        byte $b0, $b4, $b5, b17, b24, b25, b26, b27;
        java.lang.Long $r7;
        com.pff.PSTException $r14;
        com.pff.OffsetIndexItem $r4, $r9;
        com.pff.PSTFile $r2, $r3, $r8;
        com.pff.PSTNodeInputStream r1;
        long $l1, $l7, $l8, $l10, $l11, $l12, $l14, $l15, l20, l23;
        int i2, $i3, $i6, $i9, $i13, $i16, i18, i19, i21, i22, $i28;
        java.util.LinkedList $r5, $r6;

        r1 := @this: com.pff.PSTNodeInputStream;

        r0 := @parameter0: byte[];

        $b0 = r0[0];

        if $b0 == 1 goto label1;

        $r14 = new com.pff.PSTException;

        specialinvoke $r14.<com.pff.PSTException: void <init>(java.lang.String)>("Unable to process XBlock, incorrect identifier");

        throw $r14;

     label1:
        $l1 = staticinvoke <com.pff.PSTObject: long convertLittleEndianBytesToLong(byte[],int,int)>(r0, 2, 4);

        i2 = (int) $l1;

        b17 = 8;

        b27 = 8;

        b26 = 8;

        b25 = 8;

        b24 = 8;

        $r2 = r1.<com.pff.PSTNodeInputStream: com.pff.PSTFile pstFile>;

        $i3 = virtualinvoke $r2.<com.pff.PSTFile: int getPSTFileType()>();

        if $i3 != 14 goto label2;

        b17 = 4;

        b27 = 4;

        b26 = 4;

        b25 = 4;

        b24 = 4;

     label2:
        $b4 = r0[1];

        $i28 = (int) $b4;

        if $i28 != 2 goto label5;

        i18 = 8;

        i19 = 0;

     label3:
        if i19 >= i2 goto label4;

        $i13 = i18 + b25;

        $l14 = staticinvoke <com.pff.PSTObject: long convertLittleEndianBytesToLong(byte[],int,int)>(r0, i18, $i13);

        l20 = $l14 & -2L;

        $r8 = r1.<com.pff.PSTNodeInputStream: com.pff.PSTFile pstFile>;

        $r9 = virtualinvoke $r8.<com.pff.PSTFile: com.pff.OffsetIndexItem getOffsetIndexNode(long)>(l20);

        $r10 = r1.<com.pff.PSTNodeInputStream: java.io.RandomAccessFile in>;

        $l15 = $r9.<com.pff.OffsetIndexItem: long fileOffset>;

        virtualinvoke $r10.<java.io.RandomAccessFile: void seek(long)>($l15);

        $i16 = $r9.<com.pff.OffsetIndexItem: int size>;

        r11 = newarray (byte)[$i16];

        $r12 = r1.<com.pff.PSTNodeInputStream: java.io.RandomAccessFile in>;

        virtualinvoke $r12.<java.io.RandomAccessFile: int read(byte[])>(r11);

        specialinvoke r1.<com.pff.PSTNodeInputStream: void getBlockSkipPoints(byte[])>(r11);

        i18 = i18 + b26;

        i19 = i19 + 1;

        goto label3;

     label4:
        goto label7;

     label5:
        $b5 = r0[1];

        if $b5 != 1 goto label7;

        i21 = 8;

        i22 = 0;

     label6:
        if i22 >= i2 goto label7;

        $i6 = i21 + b27;

        $l7 = staticinvoke <com.pff.PSTObject: long convertLittleEndianBytesToLong(byte[],int,int)>(r0, i21, $i6);

        l23 = $l7 & -2L;

        $r3 = r1.<com.pff.PSTNodeInputStream: com.pff.PSTFile pstFile>;

        $r4 = virtualinvoke $r3.<com.pff.PSTFile: com.pff.OffsetIndexItem getOffsetIndexNode(long)>(l23);

        $r5 = r1.<com.pff.PSTNodeInputStream: java.util.LinkedList indexItems>;

        virtualinvoke $r5.<java.util.LinkedList: boolean add(java.lang.Object)>($r4);

        $r6 = r1.<com.pff.PSTNodeInputStream: java.util.LinkedList skipPoints>;

        $l8 = r1.<com.pff.PSTNodeInputStream: long currentLocation>;

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l8);

        virtualinvoke $r6.<java.util.LinkedList: boolean add(java.lang.Object)>($r7);

        $l11 = r1.<com.pff.PSTNodeInputStream: long currentLocation>;

        $i9 = $r4.<com.pff.OffsetIndexItem: int size>;

        $l10 = (long) $i9;

        $l12 = $l11 + $l10;

        r1.<com.pff.PSTNodeInputStream: long currentLocation> = $l12;

        i21 = i21 + b24;

        i22 = i22 + 1;

        goto label6;

     label7:
        return;
    }

    public long length()
    {
        long $l0;
        com.pff.PSTNodeInputStream r0;

        r0 := @this: com.pff.PSTNodeInputStream;

        $l0 = r0.<com.pff.PSTNodeInputStream: long length>;

        return $l0;
    }

    public int read() throws java.io.IOException
    {
        byte[] $r1, $r17;
        java.io.RandomAccessFile $r7, $r8, $r10;
        byte $b8, $b13, $b26, $b29;
        java.lang.Long $r6, $r16;
        int[] $r9, $r18;
        boolean $z0, $z1;
        com.pff.OffsetIndexItem r19;
        com.pff.PSTNodeInputStream r0;
        long $l2, $l3, $l5, $l6, $l7, $l9, $l10, $l11, $l12, $l15, $l16, $l23, $l24, $l25, $l27, $l30, $l31, l33;
        int $i0, $i1, $i4, $i14, $i17, $i18, $i19, $i20, $i21, $i22, $i28, i32, i34, $i36, $i37, $i38, $i40, $i42;
        java.util.LinkedList $r2, $r4, $r11, $r12, $r14;
        java.lang.Object $r3, $r5, $r13, $r15;

        r0 := @this: com.pff.PSTNodeInputStream;

        $r1 = r0.<com.pff.PSTNodeInputStream: byte[] allData>;

        if $r1 == null goto label3;

        $l25 = r0.<com.pff.PSTNodeInputStream: long currentLocation>;

        $l24 = r0.<com.pff.PSTNodeInputStream: long length>;

        $b26 = $l25 cmp $l24;

        if $b26 != 0 goto label1;

        $i36 = (int) -1;

        return $i36;

     label1:
        $r17 = r0.<com.pff.PSTNodeInputStream: byte[] allData>;

        $l27 = r0.<com.pff.PSTNodeInputStream: long currentLocation>;

        $i28 = (int) $l27;

        $b29 = $r17[$i28];

        $i37 = (int) $b29;

        i32 = $i37 & 255;

        $l30 = r0.<com.pff.PSTNodeInputStream: long currentLocation>;

        $l31 = $l30 + 1L;

        r0.<com.pff.PSTNodeInputStream: long currentLocation> = $l31;

        $z1 = r0.<com.pff.PSTNodeInputStream: boolean encrypted>;

        if $z1 == 0 goto label2;

        $r18 = <com.pff.PSTObject: int[] compEnc>;

        i32 = $r18[i32];

     label2:
        return i32;

     label3:
        $r2 = r0.<com.pff.PSTNodeInputStream: java.util.LinkedList indexItems>;

        $i0 = r0.<com.pff.PSTNodeInputStream: int currentBlock>;

        $r3 = virtualinvoke $r2.<java.util.LinkedList: java.lang.Object get(int)>($i0);

        r19 = (com.pff.OffsetIndexItem) $r3;

        $r4 = r0.<com.pff.PSTNodeInputStream: java.util.LinkedList skipPoints>;

        $i1 = r0.<com.pff.PSTNodeInputStream: int currentBlock>;

        $r5 = virtualinvoke $r4.<java.util.LinkedList: java.lang.Object get(int)>($i1);

        $r6 = (java.lang.Long) $r5;

        $l2 = virtualinvoke $r6.<java.lang.Long: long longValue()>();

        l33 = $l2;

        $l3 = r0.<com.pff.PSTNodeInputStream: long currentLocation>;

        $l7 = $l3 + 1L;

        $i4 = r19.<com.pff.OffsetIndexItem: int size>;

        $l5 = (long) $i4;

        $l6 = $l2 + $l5;

        $b8 = $l7 cmp $l6;

        $i38 = (int) $b8;

        if $i38 <= 0 goto label5;

        $i17 = r0.<com.pff.PSTNodeInputStream: int currentBlock>;

        $i18 = $i17 + 1;

        r0.<com.pff.PSTNodeInputStream: int currentBlock> = $i18;

        $i19 = r0.<com.pff.PSTNodeInputStream: int currentBlock>;

        $r11 = r0.<com.pff.PSTNodeInputStream: java.util.LinkedList indexItems>;

        $i20 = virtualinvoke $r11.<java.util.LinkedList: int size()>();

        if $i19 < $i20 goto label4;

        $i40 = (int) -1;

        return $i40;

     label4:
        $r12 = r0.<com.pff.PSTNodeInputStream: java.util.LinkedList indexItems>;

        $i21 = r0.<com.pff.PSTNodeInputStream: int currentBlock>;

        $r13 = virtualinvoke $r12.<java.util.LinkedList: java.lang.Object get(int)>($i21);

        r19 = (com.pff.OffsetIndexItem) $r13;

        $r14 = r0.<com.pff.PSTNodeInputStream: java.util.LinkedList skipPoints>;

        $i22 = r0.<com.pff.PSTNodeInputStream: int currentBlock>;

        $r15 = virtualinvoke $r14.<java.util.LinkedList: java.lang.Object get(int)>($i22);

        $r16 = (java.lang.Long) $r15;

        l33 = virtualinvoke $r16.<java.lang.Long: long longValue()>();

     label5:
        $l11 = r19.<com.pff.OffsetIndexItem: long fileOffset>;

        $l9 = r0.<com.pff.PSTNodeInputStream: long currentLocation>;

        $l10 = $l9 - l33;

        $l23 = $l11 + $l10;

        $r7 = r0.<com.pff.PSTNodeInputStream: java.io.RandomAccessFile in>;

        $l12 = virtualinvoke $r7.<java.io.RandomAccessFile: long getFilePointer()>();

        $b13 = $l12 cmp $l23;

        if $b13 == 0 goto label6;

        $r10 = r0.<com.pff.PSTNodeInputStream: java.io.RandomAccessFile in>;

        virtualinvoke $r10.<java.io.RandomAccessFile: void seek(long)>($l23);

     label6:
        $r8 = r0.<com.pff.PSTNodeInputStream: java.io.RandomAccessFile in>;

        $i14 = virtualinvoke $r8.<java.io.RandomAccessFile: int read()>();

        i34 = $i14;

        if $i14 >= 0 goto label7;

        $i42 = (int) -1;

        return $i42;

     label7:
        $z0 = r0.<com.pff.PSTNodeInputStream: boolean encrypted>;

        if $z0 == 0 goto label8;

        $r9 = <com.pff.PSTObject: int[] compEnc>;

        i34 = $r9[$i14];

     label8:
        $l15 = r0.<com.pff.PSTNodeInputStream: long currentLocation>;

        $l16 = $l15 + 1L;

        r0.<com.pff.PSTNodeInputStream: long currentLocation> = $l16;

        return i34;
    }

    public int read(byte[]) throws java.io.IOException
    {
        byte[] $r1, r2, r10, $r13, $r14, r15;
        java.io.RandomAccessFile $r9, $r11, $r12;
        byte $b2, $b23;
        java.lang.Long $r8;
        com.pff.OffsetIndexItem r5;
        com.pff.PSTNodeInputStream r0;
        long $l0, $l1, $l5, $l6, $l7, $l9, $l10, $l11, $l13, l14, $l16, $l17, $l18, $l20, $l21, $l22, $l27, $l28, $l29, $l32, $l33, $l34, $l35, $l36, $l37, $l38, $l39, $l40, $l42, $l46, $l47, $l48, $l50, $l52, $l53, $l54;
        boolean $z0, $z1, $z2, z3;
        int $i3, $i4, i8, $i12, $i15, $i19, $i24, $i25, $i26, $i30, $i31, $i41, $i43, $i44, $i45, $i49, $i51, i55, i56, i57, i58, $i60, $i61;
        java.util.LinkedList $r3, $r6;
        java.lang.Object $r4, $r7;

        r0 := @this: com.pff.PSTNodeInputStream;

        r2 := @parameter0: byte[];

        $l1 = r0.<com.pff.PSTNodeInputStream: long currentLocation>;

        $l0 = r0.<com.pff.PSTNodeInputStream: long length>;

        $b2 = $l1 cmp $l0;

        if $b2 != 0 goto label01;

        $i60 = (int) -1;

        return $i60;

     label01:
        $r1 = r0.<com.pff.PSTNodeInputStream: byte[] allData>;

        if $r1 == null goto label05;

        $l39 = r0.<com.pff.PSTNodeInputStream: long length>;

        $l38 = r0.<com.pff.PSTNodeInputStream: long currentLocation>;

        $l40 = $l39 - $l38;

        i55 = (int) $l40;

        $i41 = lengthof r2;

        if $i41 < i55 goto label03;

        $r14 = r0.<com.pff.PSTNodeInputStream: byte[] allData>;

        $l50 = r0.<com.pff.PSTNodeInputStream: long currentLocation>;

        $i51 = (int) $l50;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r14, $i51, r2, 0, i55);

        $z2 = r0.<com.pff.PSTNodeInputStream: boolean encrypted>;

        if $z2 == 0 goto label02;

        staticinvoke <com.pff.PSTObject: byte[] decode(byte[])>(r2);

     label02:
        $l53 = r0.<com.pff.PSTNodeInputStream: long currentLocation>;

        $l52 = (long) i55;

        $l54 = $l53 + $l52;

        r0.<com.pff.PSTNodeInputStream: long currentLocation> = $l54;

        return i55;

     label03:
        $r13 = r0.<com.pff.PSTNodeInputStream: byte[] allData>;

        $l42 = r0.<com.pff.PSTNodeInputStream: long currentLocation>;

        $i44 = (int) $l42;

        $i43 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r13, $i44, r2, 0, $i43);

        $z1 = r0.<com.pff.PSTNodeInputStream: boolean encrypted>;

        if $z1 == 0 goto label04;

        staticinvoke <com.pff.PSTObject: byte[] decode(byte[])>(r2);

     label04:
        $l47 = r0.<com.pff.PSTNodeInputStream: long currentLocation>;

        $i45 = lengthof r2;

        $l46 = (long) $i45;

        $l48 = $l47 + $l46;

        r0.<com.pff.PSTNodeInputStream: long currentLocation> = $l48;

        $i49 = lengthof r2;

        return $i49;

     label05:
        z3 = 0;

        i56 = 0;

     label06:
        if z3 != 0 goto label10;

        $r3 = r0.<com.pff.PSTNodeInputStream: java.util.LinkedList indexItems>;

        $i3 = r0.<com.pff.PSTNodeInputStream: int currentBlock>;

        $r4 = virtualinvoke $r3.<java.util.LinkedList: java.lang.Object get(int)>($i3);

        r5 = (com.pff.OffsetIndexItem) $r4;

        $r6 = r0.<com.pff.PSTNodeInputStream: java.util.LinkedList skipPoints>;

        $i4 = r0.<com.pff.PSTNodeInputStream: int currentBlock>;

        $r7 = virtualinvoke $r6.<java.util.LinkedList: java.lang.Object get(int)>($i4);

        $r8 = (java.lang.Long) $r7;

        $l5 = virtualinvoke $r8.<java.lang.Long: long longValue()>();

        $l6 = r0.<com.pff.PSTNodeInputStream: long currentLocation>;

        $l7 = $l6 - $l5;

        i8 = (int) $l7;

        $r9 = r0.<com.pff.PSTNodeInputStream: java.io.RandomAccessFile in>;

        $l10 = r5.<com.pff.OffsetIndexItem: long fileOffset>;

        $l9 = (long) i8;

        $l11 = $l10 + $l9;

        virtualinvoke $r9.<java.io.RandomAccessFile: void seek(long)>($l11);

        $i12 = r5.<com.pff.OffsetIndexItem: int size>;

        $l13 = (long) $i12;

        l14 = $l5 + $l13;

        $i15 = lengthof r2;

        i57 = $i15 - i56;

        $l17 = r0.<com.pff.PSTNodeInputStream: long length>;

        $l16 = r0.<com.pff.PSTNodeInputStream: long currentLocation>;

        $l18 = $l17 - $l16;

        $i19 = (int) $l18;

        if i57 <= $i19 goto label07;

        $l36 = r0.<com.pff.PSTNodeInputStream: long length>;

        $l35 = r0.<com.pff.PSTNodeInputStream: long currentLocation>;

        $l37 = $l36 - $l35;

        i57 = (int) $l37;

     label07:
        $l21 = r0.<com.pff.PSTNodeInputStream: long currentLocation>;

        $l20 = (long) i57;

        $l22 = $l21 + $l20;

        $b23 = l14 cmp $l22;

        $i61 = (int) $b23;

        if $i61 < 0 goto label08;

        r15 = newarray (byte)[i57];

        $r12 = r0.<com.pff.PSTNodeInputStream: java.io.RandomAccessFile in>;

        virtualinvoke $r12.<java.io.RandomAccessFile: int read(byte[])>(r15);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r15, 0, r2, i56, i57);

        i56 = i56 + i57;

        z3 = 1;

        $l33 = r0.<com.pff.PSTNodeInputStream: long currentLocation>;

        $l32 = (long) i57;

        $l34 = $l33 + $l32;

        r0.<com.pff.PSTNodeInputStream: long currentLocation> = $l34;

        goto label09;

     label08:
        $i24 = r5.<com.pff.OffsetIndexItem: int size>;

        i58 = $i24 - i8;

        r10 = newarray (byte)[i58];

        $r11 = r0.<com.pff.PSTNodeInputStream: java.io.RandomAccessFile in>;

        virtualinvoke $r11.<java.io.RandomAccessFile: int read(byte[])>(r10);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r10, 0, r2, i56, i58);

        i56 = i56 + i58;

        $i25 = r0.<com.pff.PSTNodeInputStream: int currentBlock>;

        $i26 = $i25 + 1;

        r0.<com.pff.PSTNodeInputStream: int currentBlock> = $i26;

        $l28 = r0.<com.pff.PSTNodeInputStream: long currentLocation>;

        $l27 = (long) i58;

        $l29 = $l28 + $l27;

        r0.<com.pff.PSTNodeInputStream: long currentLocation> = $l29;

     label09:
        $i30 = r0.<com.pff.PSTNodeInputStream: int totalLoopCount>;

        $i31 = $i30 + 1;

        r0.<com.pff.PSTNodeInputStream: int totalLoopCount> = $i31;

        goto label06;

     label10:
        $z0 = r0.<com.pff.PSTNodeInputStream: boolean encrypted>;

        if $z0 == 0 goto label11;

        staticinvoke <com.pff.PSTObject: byte[] decode(byte[])>(r2);

     label11:
        return i56;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        byte[] r1, $r2;
        long $l0, $l1;
        byte $b2;
        int $i3, $i4, i5, i6, $i8;
        com.pff.PSTNodeInputStream r0;

        r0 := @this: com.pff.PSTNodeInputStream;

        r1 := @parameter0: byte[];

        i5 := @parameter1: int;

        i6 := @parameter2: int;

        $l1 = r0.<com.pff.PSTNodeInputStream: long currentLocation>;

        $l0 = r0.<com.pff.PSTNodeInputStream: long length>;

        $b2 = $l1 cmp $l0;

        if $b2 != 0 goto label1;

        $i8 = (int) -1;

        return $i8;

     label1:
        $i3 = lengthof r1;

        if $i3 >= i6 goto label2;

        i6 = lengthof r1;

     label2:
        $r2 = newarray (byte)[i6];

        $i4 = virtualinvoke r0.<com.pff.PSTNodeInputStream: int read(byte[])>($r2);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, i5, $i4);

        return $i4;
    }

    public void reset()
    {
        com.pff.PSTNodeInputStream r0;

        r0 := @this: com.pff.PSTNodeInputStream;

        r0.<com.pff.PSTNodeInputStream: int currentBlock> = 0;

        r0.<com.pff.PSTNodeInputStream: long currentLocation> = 0L;

        return;
    }

    public boolean markSupported()
    {
        com.pff.PSTNodeInputStream r0;

        r0 := @this: com.pff.PSTNodeInputStream;

        return 0;
    }

    public java.lang.Long[] getBlockOffsets()
    {
        long $l3, $l5, $l6, $l7;
        java.lang.Long $r3, $r6, $r10;
        int $i0, $i1, $i2, $i4, i8;
        java.util.LinkedList $r1, $r2, $r4, $r7;
        java.lang.Long[] r11, r12;
        com.pff.OffsetIndexItem $r9;
        java.lang.Object $r5, $r8;
        com.pff.PSTNodeInputStream r0;

        r0 := @this: com.pff.PSTNodeInputStream;

        $r1 = r0.<com.pff.PSTNodeInputStream: java.util.LinkedList skipPoints>;

        $i0 = virtualinvoke $r1.<java.util.LinkedList: int size()>();

        if $i0 != 0 goto label1;

        r11 = newarray (java.lang.Long)[1];

        $l7 = r0.<com.pff.PSTNodeInputStream: long length>;

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l7);

        r11[0] = $r10;

        return r11;

     label1:
        $r2 = r0.<com.pff.PSTNodeInputStream: java.util.LinkedList skipPoints>;

        $i1 = virtualinvoke $r2.<java.util.LinkedList: int size()>();

        r12 = newarray (java.lang.Long)[$i1];

        i8 = 0;

     label2:
        $i2 = lengthof r12;

        if i8 >= $i2 goto label3;

        $r3 = new java.lang.Long;

        $r4 = r0.<com.pff.PSTNodeInputStream: java.util.LinkedList skipPoints>;

        $r5 = virtualinvoke $r4.<java.util.LinkedList: java.lang.Object get(int)>(i8);

        $r6 = (java.lang.Long) $r5;

        $l3 = virtualinvoke $r6.<java.lang.Long: long longValue()>();

        $r7 = r0.<com.pff.PSTNodeInputStream: java.util.LinkedList indexItems>;

        $r8 = virtualinvoke $r7.<java.util.LinkedList: java.lang.Object get(int)>(i8);

        $r9 = (com.pff.OffsetIndexItem) $r8;

        $i4 = $r9.<com.pff.OffsetIndexItem: int size>;

        $l5 = (long) $i4;

        $l6 = $l3 + $l5;

        specialinvoke $r3.<java.lang.Long: void <init>(long)>($l6);

        r12[i8] = $r3;

        i8 = i8 + 1;

        goto label2;

     label3:
        return r12;
    }

    public void seek(long) throws java.io.IOException, com.pff.PSTException
    {
        byte[] $r1, $r20;
        java.io.RandomAccessFile $r2;
        byte $b2, $b4, $b10;
        java.lang.Long $r8, $r12;
        com.pff.PSTException $r22;
        com.pff.OffsetIndexItem $r5;
        java.lang.StringBuilder $r15, $r16, $r17, $r18, $r21;
        com.pff.PSTNodeInputStream r0;
        long l0, $l1, $l3, $l5, $l7, $l18, l19, l20;
        int $i6, $i8, $i9, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i21, $i22;
        java.lang.String $r19;
        java.util.LinkedList $r3, $r6, $r9, $r10;
        java.lang.Object $r4, $r7, $r11;

        r0 := @this: com.pff.PSTNodeInputStream;

        l0 := @parameter0: long;

        $l1 = r0.<com.pff.PSTNodeInputStream: long length>;

        $b2 = l0 cmp $l1;

        $i21 = (int) $b2;

        if $i21 <= 0 goto label1;

        $r22 = new com.pff.PSTException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to seek past end of item! size = ");

        $l18 = r0.<com.pff.PSTNodeInputStream: long length>;

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l18);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", seeking to:");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<com.pff.PSTException: void <init>(java.lang.String)>($r19);

        throw $r22;

     label1:
        $l3 = r0.<com.pff.PSTNodeInputStream: long currentLocation>;

        $b4 = $l3 cmp l0;

        if $b4 != 0 goto label2;

        return;

     label2:
        l19 = 0L;

        r0.<com.pff.PSTNodeInputStream: int currentBlock> = 0;

        $r1 = r0.<com.pff.PSTNodeInputStream: byte[] allData>;

        if $r1 != null goto label5;

        $r6 = r0.<com.pff.PSTNodeInputStream: java.util.LinkedList skipPoints>;

        $i8 = r0.<com.pff.PSTNodeInputStream: int currentBlock>;

        $i9 = $i8 + 1;

        $r7 = virtualinvoke $r6.<java.util.LinkedList: java.lang.Object get(int)>($i9);

        $r8 = (java.lang.Long) $r7;

        l19 = virtualinvoke $r8.<java.lang.Long: long longValue()>();

     label3:
        $b10 = l0 cmp l19;

        $i22 = (int) $b10;

        if $i22 < 0 goto label5;

        $i11 = r0.<com.pff.PSTNodeInputStream: int currentBlock>;

        $i12 = $i11 + 1;

        r0.<com.pff.PSTNodeInputStream: int currentBlock> = $i12;

        $i13 = r0.<com.pff.PSTNodeInputStream: int currentBlock>;

        $r9 = r0.<com.pff.PSTNodeInputStream: java.util.LinkedList skipPoints>;

        $i14 = virtualinvoke $r9.<java.util.LinkedList: int size()>();

        $i15 = $i14 - 1;

        if $i13 != $i15 goto label4;

        goto label5;

     label4:
        $r10 = r0.<com.pff.PSTNodeInputStream: java.util.LinkedList skipPoints>;

        $i16 = r0.<com.pff.PSTNodeInputStream: int currentBlock>;

        $i17 = $i16 + 1;

        $r11 = virtualinvoke $r10.<java.util.LinkedList: java.lang.Object get(int)>($i17);

        $r12 = (java.lang.Long) $r11;

        l19 = virtualinvoke $r12.<java.lang.Long: long longValue()>();

        goto label3;

     label5:
        r0.<com.pff.PSTNodeInputStream: long currentLocation> = l0;

        l20 = 0L;

        $r20 = r0.<com.pff.PSTNodeInputStream: byte[] allData>;

        if $r20 != null goto label6;

        $r3 = r0.<com.pff.PSTNodeInputStream: java.util.LinkedList indexItems>;

        $i6 = r0.<com.pff.PSTNodeInputStream: int currentBlock>;

        $r4 = virtualinvoke $r3.<java.util.LinkedList: java.lang.Object get(int)>($i6);

        $r5 = (com.pff.OffsetIndexItem) $r4;

        l20 = $r5.<com.pff.OffsetIndexItem: long fileOffset>;

     label6:
        $l5 = l0 - l19;

        $l7 = l20 + $l5;

        $r2 = r0.<com.pff.PSTNodeInputStream: java.io.RandomAccessFile in>;

        virtualinvoke $r2.<java.io.RandomAccessFile: void seek(long)>($l7);

        return;
    }

    public long seekAndReadLong(long, int) throws java.io.IOException, com.pff.PSTException
    {
        byte[] r1;
        int i1;
        long l0, $l2;
        com.pff.PSTNodeInputStream r0;

        r0 := @this: com.pff.PSTNodeInputStream;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        virtualinvoke r0.<com.pff.PSTNodeInputStream: void seek(long)>(l0);

        r1 = newarray (byte)[i1];

        virtualinvoke r0.<com.pff.PSTNodeInputStream: int read(byte[])>(r1);

        $l2 = staticinvoke <com.pff.PSTObject: long convertLittleEndianBytesToLong(byte[])>(r1);

        return $l2;
    }

    public com.pff.PSTFile getPSTFile()
    {
        com.pff.PSTFile $r1;
        com.pff.PSTNodeInputStream r0;

        r0 := @this: com.pff.PSTNodeInputStream;

        $r1 = r0.<com.pff.PSTNodeInputStream: com.pff.PSTFile pstFile>;

        return $r1;
    }
}
