public class org.objectweb.asm.ClassWriter extends org.objectweb.asm.ClassVisitor
{
    public static final int COMPUTE_MAXS;
    public static final int COMPUTE_FRAMES;
    static final int ACC_SYNTHETIC_ATTRIBUTE;
    static final int TO_ACC_SYNTHETIC;
    static final int NOARG_INSN;
    static final int SBYTE_INSN;
    static final int SHORT_INSN;
    static final int VAR_INSN;
    static final int IMPLVAR_INSN;
    static final int TYPE_INSN;
    static final int FIELDORMETH_INSN;
    static final int ITFMETH_INSN;
    static final int INDYMETH_INSN;
    static final int LABEL_INSN;
    static final int LABELW_INSN;
    static final int LDC_INSN;
    static final int LDCW_INSN;
    static final int IINC_INSN;
    static final int TABL_INSN;
    static final int LOOK_INSN;
    static final int MANA_INSN;
    static final int WIDE_INSN;
    static final byte[] TYPE;
    static final int CLASS;
    static final int FIELD;
    static final int METH;
    static final int IMETH;
    static final int STR;
    static final int INT;
    static final int FLOAT;
    static final int LONG;
    static final int DOUBLE;
    static final int NAME_TYPE;
    static final int UTF8;
    static final int MTYPE;
    static final int HANDLE;
    static final int INDY;
    static final int HANDLE_BASE;
    static final int TYPE_NORMAL;
    static final int TYPE_UNINIT;
    static final int TYPE_MERGED;
    static final int BSM;
    org.objectweb.asm.ClassReader cr;
    int version;
    int index;
    final org.objectweb.asm.ByteVector pool;
    org.objectweb.asm.Item[] items;
    int threshold;
    final org.objectweb.asm.Item key;
    final org.objectweb.asm.Item key2;
    final org.objectweb.asm.Item key3;
    final org.objectweb.asm.Item key4;
    org.objectweb.asm.Item[] typeTable;
    private short typeCount;
    private int access;
    private int name;
    java.lang.String thisName;
    private int signature;
    private int superName;
    private int interfaceCount;
    private int[] interfaces;
    private int sourceFile;
    private org.objectweb.asm.ByteVector sourceDebug;
    private int enclosingMethodOwner;
    private int enclosingMethod;
    private org.objectweb.asm.AnnotationWriter anns;
    private org.objectweb.asm.AnnotationWriter ianns;
    private org.objectweb.asm.Attribute attrs;
    private int innerClassesCount;
    private org.objectweb.asm.ByteVector innerClasses;
    int bootstrapMethodsCount;
    org.objectweb.asm.ByteVector bootstrapMethods;
    org.objectweb.asm.FieldWriter firstField;
    org.objectweb.asm.FieldWriter lastField;
    org.objectweb.asm.MethodWriter firstMethod;
    org.objectweb.asm.MethodWriter lastMethod;
    private final boolean computeMaxs;
    private final boolean computeFrames;
    boolean invalidFrames;

    public void <init>(int)
    {
        org.objectweb.asm.ClassWriter r0;
        int $i0, $i1, i2, $i3, $i4;
        double $d0, $d1;
        boolean $z0, $z1;
        org.objectweb.asm.ByteVector $r1;
        org.objectweb.asm.Item[] $r2, $r3;
        org.objectweb.asm.Item $r4, $r5, $r6, $r7;

        r0 := @this: org.objectweb.asm.ClassWriter;

        i2 := @parameter0: int;

        specialinvoke r0.<org.objectweb.asm.ClassVisitor: void <init>(int)>(262144);

        r0.<org.objectweb.asm.ClassWriter: int index> = 1;

        $r1 = new org.objectweb.asm.ByteVector;

        specialinvoke $r1.<org.objectweb.asm.ByteVector: void <init>()>();

        r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.ByteVector pool> = $r1;

        $r2 = newarray (org.objectweb.asm.Item)[256];

        r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item[] items> = $r2;

        $r3 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item[] items>;

        $i0 = lengthof $r3;

        $d0 = (double) $i0;

        $d1 = 0.75 * $d0;

        $i1 = (int) $d1;

        r0.<org.objectweb.asm.ClassWriter: int threshold> = $i1;

        $r4 = new org.objectweb.asm.Item;

        specialinvoke $r4.<org.objectweb.asm.Item: void <init>()>();

        r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key> = $r4;

        $r5 = new org.objectweb.asm.Item;

        specialinvoke $r5.<org.objectweb.asm.Item: void <init>()>();

        r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key2> = $r5;

        $r6 = new org.objectweb.asm.Item;

        specialinvoke $r6.<org.objectweb.asm.Item: void <init>()>();

        r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key3> = $r6;

        $r7 = new org.objectweb.asm.Item;

        specialinvoke $r7.<org.objectweb.asm.Item: void <init>()>();

        r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key4> = $r7;

        $i3 = i2 & 1;

        if $i3 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        r0.<org.objectweb.asm.ClassWriter: boolean computeMaxs> = $z0;

        $i4 = i2 & 2;

        if $i4 == 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        r0.<org.objectweb.asm.ClassWriter: boolean computeFrames> = $z1;

        return;
    }

    public void <init>(org.objectweb.asm.ClassReader, int)
    {
        org.objectweb.asm.ClassWriter r0;
        int i0;
        org.objectweb.asm.ClassReader r1;

        r0 := @this: org.objectweb.asm.ClassWriter;

        r1 := @parameter0: org.objectweb.asm.ClassReader;

        i0 := @parameter1: int;

        specialinvoke r0.<org.objectweb.asm.ClassWriter: void <init>(int)>(i0);

        virtualinvoke r1.<org.objectweb.asm.ClassReader: void copyPool(org.objectweb.asm.ClassWriter)>(r0);

        r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.ClassReader cr> = r1;

        return;
    }

    public final void visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])
    {
        org.objectweb.asm.ClassWriter r0;
        java.lang.String[] r4;
        int[] $r5, $r7;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10;
        java.lang.String r1, r2, r3, $r6;

        r0 := @this: org.objectweb.asm.ClassWriter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        r3 := @parameter4: java.lang.String;

        r4 := @parameter5: java.lang.String[];

        r0.<org.objectweb.asm.ClassWriter: int version> = i0;

        r0.<org.objectweb.asm.ClassWriter: int access> = i1;

        $i2 = virtualinvoke r0.<org.objectweb.asm.ClassWriter: int newClass(java.lang.String)>(r1);

        r0.<org.objectweb.asm.ClassWriter: int name> = $i2;

        r0.<org.objectweb.asm.ClassWriter: java.lang.String thisName> = r1;

        if r2 == null goto label1;

        $i8 = virtualinvoke r0.<org.objectweb.asm.ClassWriter: int newUTF8(java.lang.String)>(r2);

        r0.<org.objectweb.asm.ClassWriter: int signature> = $i8;

     label1:
        if r3 != null goto label2;

        $i9 = 0;

        goto label3;

     label2:
        $i9 = virtualinvoke r0.<org.objectweb.asm.ClassWriter: int newClass(java.lang.String)>(r3);

     label3:
        r0.<org.objectweb.asm.ClassWriter: int superName> = $i9;

        if r4 == null goto label5;

        $i3 = lengthof r4;

        if $i3 <= 0 goto label5;

        $i4 = lengthof r4;

        r0.<org.objectweb.asm.ClassWriter: int interfaceCount> = $i4;

        $i5 = r0.<org.objectweb.asm.ClassWriter: int interfaceCount>;

        $r5 = newarray (int)[$i5];

        r0.<org.objectweb.asm.ClassWriter: int[] interfaces> = $r5;

        i10 = 0;

     label4:
        $i6 = r0.<org.objectweb.asm.ClassWriter: int interfaceCount>;

        if i10 >= $i6 goto label5;

        $r7 = r0.<org.objectweb.asm.ClassWriter: int[] interfaces>;

        $r6 = r4[i10];

        $i7 = virtualinvoke r0.<org.objectweb.asm.ClassWriter: int newClass(java.lang.String)>($r6);

        $r7[i10] = $i7;

        i10 = i10 + 1;

        goto label4;

     label5:
        return;
    }

    public final void visitSource(java.lang.String, java.lang.String)
    {
        org.objectweb.asm.ClassWriter r2;
        org.objectweb.asm.ByteVector $r3, $r4;
        int $i0;
        java.lang.String r0, r1;

        r2 := @this: org.objectweb.asm.ClassWriter;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r2.<org.objectweb.asm.ClassWriter: int newUTF8(java.lang.String)>(r0);

        r2.<org.objectweb.asm.ClassWriter: int sourceFile> = $i0;

     label1:
        if r1 == null goto label2;

        $r3 = new org.objectweb.asm.ByteVector;

        specialinvoke $r3.<org.objectweb.asm.ByteVector: void <init>()>();

        $r4 = virtualinvoke $r3.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putUTF8(java.lang.String)>(r1);

        r2.<org.objectweb.asm.ClassWriter: org.objectweb.asm.ByteVector sourceDebug> = $r4;

     label2:
        return;
    }

    public final void visitOuterClass(java.lang.String, java.lang.String, java.lang.String)
    {
        org.objectweb.asm.ClassWriter r0;
        int $i0, $i1;
        java.lang.String r1, r2, r3;

        r0 := @this: org.objectweb.asm.ClassWriter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $i0 = virtualinvoke r0.<org.objectweb.asm.ClassWriter: int newClass(java.lang.String)>(r1);

        r0.<org.objectweb.asm.ClassWriter: int enclosingMethodOwner> = $i0;

        if r2 == null goto label1;

        if r3 == null goto label1;

        $i1 = virtualinvoke r0.<org.objectweb.asm.ClassWriter: int newNameType(java.lang.String,java.lang.String)>(r2, r3);

        r0.<org.objectweb.asm.ClassWriter: int enclosingMethod> = $i1;

     label1:
        return;
    }

    public final org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String, boolean)
    {
        org.objectweb.asm.ClassWriter r1;
        org.objectweb.asm.ByteVector $r0, $r3;
        int $i0;
        org.objectweb.asm.AnnotationWriter $r4, $r5, $r6;
        java.lang.String r2;
        boolean z0;

        r1 := @this: org.objectweb.asm.ClassWriter;

        r2 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r0 = new org.objectweb.asm.ByteVector;

        specialinvoke $r0.<org.objectweb.asm.ByteVector: void <init>()>();

        $i0 = virtualinvoke r1.<org.objectweb.asm.ClassWriter: int newUTF8(java.lang.String)>(r2);

        $r3 = virtualinvoke $r0.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>($i0);

        virtualinvoke $r3.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>(0);

        $r4 = new org.objectweb.asm.AnnotationWriter;

        specialinvoke $r4.<org.objectweb.asm.AnnotationWriter: void <init>(org.objectweb.asm.ClassWriter,boolean,org.objectweb.asm.ByteVector,org.objectweb.asm.ByteVector,int)>(r1, 1, $r0, $r0, 2);

        if z0 == 0 goto label1;

        $r6 = r1.<org.objectweb.asm.ClassWriter: org.objectweb.asm.AnnotationWriter anns>;

        $r4.<org.objectweb.asm.AnnotationWriter: org.objectweb.asm.AnnotationWriter next> = $r6;

        r1.<org.objectweb.asm.ClassWriter: org.objectweb.asm.AnnotationWriter anns> = $r4;

        goto label2;

     label1:
        $r5 = r1.<org.objectweb.asm.ClassWriter: org.objectweb.asm.AnnotationWriter ianns>;

        $r4.<org.objectweb.asm.AnnotationWriter: org.objectweb.asm.AnnotationWriter next> = $r5;

        r1.<org.objectweb.asm.ClassWriter: org.objectweb.asm.AnnotationWriter ianns> = $r4;

     label2:
        return $r4;
    }

    public final void visitAttribute(org.objectweb.asm.Attribute)
    {
        org.objectweb.asm.Attribute r0, $r2;
        org.objectweb.asm.ClassWriter r1;

        r1 := @this: org.objectweb.asm.ClassWriter;

        r0 := @parameter0: org.objectweb.asm.Attribute;

        $r2 = r1.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Attribute attrs>;

        r0.<org.objectweb.asm.Attribute: org.objectweb.asm.Attribute next> = $r2;

        r1.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Attribute attrs> = r0;

        return;
    }

    public final void visitInnerClass(java.lang.String, java.lang.String, java.lang.String, int)
    {
        org.objectweb.asm.ClassWriter r0;
        int $i0, $i1, i2, $i3, $i4, $i5;
        java.lang.String r2, r4, r6;
        org.objectweb.asm.ByteVector $r1, $r3, $r5, $r7, $r8, $r9;

        r0 := @this: org.objectweb.asm.ClassWriter;

        r2 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        r6 := @parameter2: java.lang.String;

        i2 := @parameter3: int;

        $r1 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.ByteVector innerClasses>;

        if $r1 != null goto label1;

        $r9 = new org.objectweb.asm.ByteVector;

        specialinvoke $r9.<org.objectweb.asm.ByteVector: void <init>()>();

        r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.ByteVector innerClasses> = $r9;

     label1:
        $i0 = r0.<org.objectweb.asm.ClassWriter: int innerClassesCount>;

        $i1 = $i0 + 1;

        r0.<org.objectweb.asm.ClassWriter: int innerClassesCount> = $i1;

        $r3 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.ByteVector innerClasses>;

        if r2 != null goto label2;

        $i3 = 0;

        goto label3;

     label2:
        $i3 = virtualinvoke r0.<org.objectweb.asm.ClassWriter: int newClass(java.lang.String)>(r2);

     label3:
        virtualinvoke $r3.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>($i3);

        $r5 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.ByteVector innerClasses>;

        if r4 != null goto label4;

        $i4 = 0;

        goto label5;

     label4:
        $i4 = virtualinvoke r0.<org.objectweb.asm.ClassWriter: int newClass(java.lang.String)>(r4);

     label5:
        virtualinvoke $r5.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>($i4);

        $r7 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.ByteVector innerClasses>;

        if r6 != null goto label6;

        $i5 = 0;

        goto label7;

     label6:
        $i5 = virtualinvoke r0.<org.objectweb.asm.ClassWriter: int newUTF8(java.lang.String)>(r6);

     label7:
        virtualinvoke $r7.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>($i5);

        $r8 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.ByteVector innerClasses>;

        virtualinvoke $r8.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>(i2);

        return;
    }

    public final org.objectweb.asm.FieldVisitor visitField(int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)
    {
        org.objectweb.asm.ClassWriter r1;
        org.objectweb.asm.FieldWriter $r0;
        int i0;
        java.lang.Object r5;
        java.lang.String r2, r3, r4;

        r1 := @this: org.objectweb.asm.ClassWriter;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.Object;

        $r0 = new org.objectweb.asm.FieldWriter;

        specialinvoke $r0.<org.objectweb.asm.FieldWriter: void <init>(org.objectweb.asm.ClassWriter,int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)>(r1, i0, r2, r3, r4, r5);

        return $r0;
    }

    public final org.objectweb.asm.MethodVisitor visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])
    {
        org.objectweb.asm.ClassWriter r1;
        java.lang.String[] r5;
        int i0;
        org.objectweb.asm.MethodWriter $r0;
        java.lang.String r2, r3, r4;
        boolean $z0, $z1;

        r1 := @this: org.objectweb.asm.ClassWriter;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String[];

        $r0 = new org.objectweb.asm.MethodWriter;

        $z1 = r1.<org.objectweb.asm.ClassWriter: boolean computeMaxs>;

        $z0 = r1.<org.objectweb.asm.ClassWriter: boolean computeFrames>;

        specialinvoke $r0.<org.objectweb.asm.MethodWriter: void <init>(org.objectweb.asm.ClassWriter,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>(r1, i0, r2, r3, r4, r5, $z1, $z0);

        return $r0;
    }

    public final void visitEnd()
    {
        org.objectweb.asm.ClassWriter r0;

        r0 := @this: org.objectweb.asm.ClassWriter;

        return;
    }

    public byte[] toByteArray()
    {
        byte[] $r12, $r20, $r23, $r24, $r32, $r40, $r49;
        org.objectweb.asm.Attribute $r5, $r19, $r25, $r53, $r54;
        org.objectweb.asm.AnnotationWriter $r3, $r4, $r17, $r18, $r26, $r27, $r55, $r56;
        org.objectweb.asm.MethodVisitor $r50, $r60;
        int[] $r52;
        org.objectweb.asm.ClassReader $r72;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, i78, i79, i80, i81, i82, $i83, i84, $i86, $i88, $i90, $i92, $i94, $i96, $i98, $i100;
        org.objectweb.asm.MethodWriter r64, r67;
        org.objectweb.asm.ClassWriter r0, $r71;
        org.objectweb.asm.ByteVector $r1, $r2, $r6, $r8, $r9, $r10, $r11, $r13, $r14, $r15, $r16, $r28, $r29, $r30, $r31, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r57, $r58, $r59, $r65, $r68, $r70;
        java.lang.RuntimeException $r69;
        org.objectweb.asm.FieldWriter r63, r66;
        boolean $z0;
        org.objectweb.asm.FieldVisitor $r51, $r61;

        r0 := @this: org.objectweb.asm.ClassWriter;

        $i0 = r0.<org.objectweb.asm.ClassWriter: int index>;

        $i86 = (int) 65535;

        if $i0 <= $i86 goto label01;

        $r69 = new java.lang.RuntimeException;

        specialinvoke $r69.<java.lang.RuntimeException: void <init>(java.lang.String)>("Class file too large!");

        throw $r69;

     label01:
        $i1 = r0.<org.objectweb.asm.ClassWriter: int interfaceCount>;

        $i2 = 2 * $i1;

        i78 = 24 + $i2;

        i79 = 0;

        r63 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.FieldWriter firstField>;

     label02:
        if r63 == null goto label03;

        i79 = i79 + 1;

        $i77 = virtualinvoke r63.<org.objectweb.asm.FieldWriter: int getSize()>();

        i78 = i78 + $i77;

        $r61 = r63.<org.objectweb.asm.FieldWriter: org.objectweb.asm.FieldVisitor fv>;

        r63 = (org.objectweb.asm.FieldWriter) $r61;

        goto label02;

     label03:
        i80 = 0;

        r64 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.MethodWriter firstMethod>;

     label04:
        if r64 == null goto label05;

        i80 = i80 + 1;

        $i76 = virtualinvoke r64.<org.objectweb.asm.MethodWriter: int getSize()>();

        i78 = i78 + $i76;

        $r60 = r64.<org.objectweb.asm.MethodWriter: org.objectweb.asm.MethodVisitor mv>;

        r64 = (org.objectweb.asm.MethodWriter) $r60;

        goto label04;

     label05:
        i81 = 0;

        $r1 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.ByteVector bootstrapMethods>;

        if $r1 == null goto label06;

        i81 = 1;

        $r59 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.ByteVector bootstrapMethods>;

        $i74 = $r59.<org.objectweb.asm.ByteVector: int length>;

        $i75 = 8 + $i74;

        i78 = i78 + $i75;

        virtualinvoke r0.<org.objectweb.asm.ClassWriter: int newUTF8(java.lang.String)>("BootstrapMethods");

     label06:
        $i3 = r0.<org.objectweb.asm.ClassWriter: int signature>;

        if $i3 == 0 goto label07;

        i81 = i81 + 1;

        i78 = i78 + 8;

        virtualinvoke r0.<org.objectweb.asm.ClassWriter: int newUTF8(java.lang.String)>("Signature");

     label07:
        $i4 = r0.<org.objectweb.asm.ClassWriter: int sourceFile>;

        if $i4 == 0 goto label08;

        i81 = i81 + 1;

        i78 = i78 + 8;

        virtualinvoke r0.<org.objectweb.asm.ClassWriter: int newUTF8(java.lang.String)>("SourceFile");

     label08:
        $r2 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.ByteVector sourceDebug>;

        if $r2 == null goto label09;

        i81 = i81 + 1;

        $r58 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.ByteVector sourceDebug>;

        $i72 = $r58.<org.objectweb.asm.ByteVector: int length>;

        $i73 = $i72 + 4;

        i78 = i78 + $i73;

        virtualinvoke r0.<org.objectweb.asm.ClassWriter: int newUTF8(java.lang.String)>("SourceDebugExtension");

     label09:
        $i5 = r0.<org.objectweb.asm.ClassWriter: int enclosingMethodOwner>;

        if $i5 == 0 goto label10;

        i81 = i81 + 1;

        i78 = i78 + 10;

        virtualinvoke r0.<org.objectweb.asm.ClassWriter: int newUTF8(java.lang.String)>("EnclosingMethod");

     label10:
        $i6 = r0.<org.objectweb.asm.ClassWriter: int access>;

        $i7 = $i6 & 131072;

        if $i7 == 0 goto label11;

        i81 = i81 + 1;

        i78 = i78 + 6;

        virtualinvoke r0.<org.objectweb.asm.ClassWriter: int newUTF8(java.lang.String)>("Deprecated");

     label11:
        $i8 = r0.<org.objectweb.asm.ClassWriter: int access>;

        $i9 = $i8 & 4096;

        if $i9 == 0 goto label13;

        $i68 = r0.<org.objectweb.asm.ClassWriter: int version>;

        $i88 = (int) 65535;

        $i69 = $i68 & $i88;

        if $i69 < 49 goto label12;

        $i70 = r0.<org.objectweb.asm.ClassWriter: int access>;

        $i71 = $i70 & 262144;

        if $i71 == 0 goto label13;

     label12:
        i81 = i81 + 1;

        i78 = i78 + 6;

        virtualinvoke r0.<org.objectweb.asm.ClassWriter: int newUTF8(java.lang.String)>("Synthetic");

     label13:
        $r65 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.ByteVector innerClasses>;

        if $r65 == null goto label14;

        i81 = i81 + 1;

        $r57 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.ByteVector innerClasses>;

        $i66 = $r57.<org.objectweb.asm.ByteVector: int length>;

        $i67 = 8 + $i66;

        i78 = i78 + $i67;

        virtualinvoke r0.<org.objectweb.asm.ClassWriter: int newUTF8(java.lang.String)>("InnerClasses");

     label14:
        $r3 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.AnnotationWriter anns>;

        if $r3 == null goto label15;

        i81 = i81 + 1;

        $r56 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.AnnotationWriter anns>;

        $i64 = virtualinvoke $r56.<org.objectweb.asm.AnnotationWriter: int getSize()>();

        $i65 = 8 + $i64;

        i78 = i78 + $i65;

        virtualinvoke r0.<org.objectweb.asm.ClassWriter: int newUTF8(java.lang.String)>("RuntimeVisibleAnnotations");

     label15:
        $r4 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.AnnotationWriter ianns>;

        if $r4 == null goto label16;

        i81 = i81 + 1;

        $r55 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.AnnotationWriter ianns>;

        $i62 = virtualinvoke $r55.<org.objectweb.asm.AnnotationWriter: int getSize()>();

        $i63 = 8 + $i62;

        i78 = i78 + $i63;

        virtualinvoke r0.<org.objectweb.asm.ClassWriter: int newUTF8(java.lang.String)>("RuntimeInvisibleAnnotations");

     label16:
        $r5 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Attribute attrs>;

        if $r5 == null goto label17;

        $r53 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Attribute attrs>;

        $i58 = virtualinvoke $r53.<org.objectweb.asm.Attribute: int getCount()>();

        i81 = i81 + $i58;

        $r54 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Attribute attrs>;

        $i90 = (int) -1;

        $i92 = (int) -1;

        $i59 = virtualinvoke $r54.<org.objectweb.asm.Attribute: int getSize(org.objectweb.asm.ClassWriter,byte[],int,int,int)>(r0, null, 0, $i90, $i92);

        i78 = i78 + $i59;

     label17:
        $r6 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.ByteVector pool>;

        $i10 = $r6.<org.objectweb.asm.ByteVector: int length>;

        $i60 = i78 + $i10;

        $r70 = new org.objectweb.asm.ByteVector;

        specialinvoke $r70.<org.objectweb.asm.ByteVector: void <init>(int)>($i60);

        $r8 = virtualinvoke $r70.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putInt(int)>(-889275714);

        $i11 = r0.<org.objectweb.asm.ClassWriter: int version>;

        virtualinvoke $r8.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putInt(int)>($i11);

        $i12 = r0.<org.objectweb.asm.ClassWriter: int index>;

        $r9 = virtualinvoke $r70.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>($i12);

        $r10 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.ByteVector pool>;

        $r12 = $r10.<org.objectweb.asm.ByteVector: byte[] data>;

        $r11 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.ByteVector pool>;

        $i13 = $r11.<org.objectweb.asm.ByteVector: int length>;

        virtualinvoke $r9.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByteArray(byte[],int,int)>($r12, 0, $i13);

        $i14 = r0.<org.objectweb.asm.ClassWriter: int access>;

        $i15 = $i14 & 262144;

        $i16 = $i15 / 64;

        $i61 = 393216 | $i16;

        $i18 = r0.<org.objectweb.asm.ClassWriter: int access>;

        $i94 = (int) -1;

        $i17 = $i61 ^ $i94;

        $i19 = $i18 & $i17;

        $r13 = virtualinvoke $r70.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>($i19);

        $i20 = r0.<org.objectweb.asm.ClassWriter: int name>;

        $r14 = virtualinvoke $r13.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>($i20);

        $i21 = r0.<org.objectweb.asm.ClassWriter: int superName>;

        virtualinvoke $r14.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>($i21);

        $i22 = r0.<org.objectweb.asm.ClassWriter: int interfaceCount>;

        virtualinvoke $r70.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>($i22);

        i82 = 0;

     label18:
        $i83 = r0.<org.objectweb.asm.ClassWriter: int interfaceCount>;

        if i82 >= $i83 goto label19;

        $r52 = r0.<org.objectweb.asm.ClassWriter: int[] interfaces>;

        $i57 = $r52[i82];

        virtualinvoke $r70.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>($i57);

        i82 = i82 + 1;

        goto label18;

     label19:
        virtualinvoke $r70.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>(i79);

        r66 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.FieldWriter firstField>;

     label20:
        if r66 == null goto label21;

        virtualinvoke r66.<org.objectweb.asm.FieldWriter: void put(org.objectweb.asm.ByteVector)>($r70);

        $r51 = r66.<org.objectweb.asm.FieldWriter: org.objectweb.asm.FieldVisitor fv>;

        r66 = (org.objectweb.asm.FieldWriter) $r51;

        goto label20;

     label21:
        virtualinvoke $r70.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>(i80);

        r67 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.MethodWriter firstMethod>;

     label22:
        if r67 == null goto label23;

        virtualinvoke r67.<org.objectweb.asm.MethodWriter: void put(org.objectweb.asm.ByteVector)>($r70);

        $r50 = r67.<org.objectweb.asm.MethodWriter: org.objectweb.asm.MethodVisitor mv>;

        r67 = (org.objectweb.asm.MethodWriter) $r50;

        goto label22;

     label23:
        virtualinvoke $r70.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>(i81);

        $r15 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.ByteVector bootstrapMethods>;

        if $r15 == null goto label24;

        $i52 = virtualinvoke r0.<org.objectweb.asm.ClassWriter: int newUTF8(java.lang.String)>("BootstrapMethods");

        virtualinvoke $r70.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>($i52);

        $r45 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.ByteVector bootstrapMethods>;

        $i53 = $r45.<org.objectweb.asm.ByteVector: int length>;

        $i54 = $i53 + 2;

        $r46 = virtualinvoke $r70.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putInt(int)>($i54);

        $i55 = r0.<org.objectweb.asm.ClassWriter: int bootstrapMethodsCount>;

        virtualinvoke $r46.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>($i55);

        $r47 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.ByteVector bootstrapMethods>;

        $r49 = $r47.<org.objectweb.asm.ByteVector: byte[] data>;

        $r48 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.ByteVector bootstrapMethods>;

        $i56 = $r48.<org.objectweb.asm.ByteVector: int length>;

        virtualinvoke $r70.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByteArray(byte[],int,int)>($r49, 0, $i56);

     label24:
        $i23 = r0.<org.objectweb.asm.ClassWriter: int signature>;

        if $i23 == 0 goto label25;

        $i50 = virtualinvoke r0.<org.objectweb.asm.ClassWriter: int newUTF8(java.lang.String)>("Signature");

        $r43 = virtualinvoke $r70.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>($i50);

        $r44 = virtualinvoke $r43.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putInt(int)>(2);

        $i51 = r0.<org.objectweb.asm.ClassWriter: int signature>;

        virtualinvoke $r44.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>($i51);

     label25:
        $i24 = r0.<org.objectweb.asm.ClassWriter: int sourceFile>;

        if $i24 == 0 goto label26;

        $i48 = virtualinvoke r0.<org.objectweb.asm.ClassWriter: int newUTF8(java.lang.String)>("SourceFile");

        $r41 = virtualinvoke $r70.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>($i48);

        $r42 = virtualinvoke $r41.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putInt(int)>(2);

        $i49 = r0.<org.objectweb.asm.ClassWriter: int sourceFile>;

        virtualinvoke $r42.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>($i49);

     label26:
        $r16 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.ByteVector sourceDebug>;

        if $r16 == null goto label27;

        $r37 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.ByteVector sourceDebug>;

        $i46 = $r37.<org.objectweb.asm.ByteVector: int length>;

        i84 = $i46 - 2;

        $i47 = virtualinvoke r0.<org.objectweb.asm.ClassWriter: int newUTF8(java.lang.String)>("SourceDebugExtension");

        $r38 = virtualinvoke $r70.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>($i47);

        virtualinvoke $r38.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putInt(int)>(i84);

        $r39 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.ByteVector sourceDebug>;

        $r40 = $r39.<org.objectweb.asm.ByteVector: byte[] data>;

        virtualinvoke $r70.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByteArray(byte[],int,int)>($r40, 2, i84);

     label27:
        $i25 = r0.<org.objectweb.asm.ClassWriter: int enclosingMethodOwner>;

        if $i25 == 0 goto label28;

        $i43 = virtualinvoke r0.<org.objectweb.asm.ClassWriter: int newUTF8(java.lang.String)>("EnclosingMethod");

        $r35 = virtualinvoke $r70.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>($i43);

        virtualinvoke $r35.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putInt(int)>(4);

        $i44 = r0.<org.objectweb.asm.ClassWriter: int enclosingMethodOwner>;

        $r36 = virtualinvoke $r70.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>($i44);

        $i45 = r0.<org.objectweb.asm.ClassWriter: int enclosingMethod>;

        virtualinvoke $r36.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>($i45);

     label28:
        $i26 = r0.<org.objectweb.asm.ClassWriter: int access>;

        $i27 = $i26 & 131072;

        if $i27 == 0 goto label29;

        $i42 = virtualinvoke r0.<org.objectweb.asm.ClassWriter: int newUTF8(java.lang.String)>("Deprecated");

        $r34 = virtualinvoke $r70.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>($i42);

        virtualinvoke $r34.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putInt(int)>(0);

     label29:
        $i28 = r0.<org.objectweb.asm.ClassWriter: int access>;

        $i29 = $i28 & 4096;

        if $i29 == 0 goto label31;

        $i37 = r0.<org.objectweb.asm.ClassWriter: int version>;

        $i96 = (int) 65535;

        $i38 = $i37 & $i96;

        if $i38 < 49 goto label30;

        $i40 = r0.<org.objectweb.asm.ClassWriter: int access>;

        $i41 = $i40 & 262144;

        if $i41 == 0 goto label31;

     label30:
        $i39 = virtualinvoke r0.<org.objectweb.asm.ClassWriter: int newUTF8(java.lang.String)>("Synthetic");

        $r33 = virtualinvoke $r70.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>($i39);

        virtualinvoke $r33.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putInt(int)>(0);

     label31:
        $r68 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.ByteVector innerClasses>;

        if $r68 == null goto label32;

        $i32 = virtualinvoke r0.<org.objectweb.asm.ClassWriter: int newUTF8(java.lang.String)>("InnerClasses");

        virtualinvoke $r70.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>($i32);

        $r28 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.ByteVector innerClasses>;

        $i33 = $r28.<org.objectweb.asm.ByteVector: int length>;

        $i34 = $i33 + 2;

        $r29 = virtualinvoke $r70.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putInt(int)>($i34);

        $i35 = r0.<org.objectweb.asm.ClassWriter: int innerClassesCount>;

        virtualinvoke $r29.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>($i35);

        $r30 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.ByteVector innerClasses>;

        $r32 = $r30.<org.objectweb.asm.ByteVector: byte[] data>;

        $r31 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.ByteVector innerClasses>;

        $i36 = $r31.<org.objectweb.asm.ByteVector: int length>;

        virtualinvoke $r70.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByteArray(byte[],int,int)>($r32, 0, $i36);

     label32:
        $r17 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.AnnotationWriter anns>;

        if $r17 == null goto label33;

        $i31 = virtualinvoke r0.<org.objectweb.asm.ClassWriter: int newUTF8(java.lang.String)>("RuntimeVisibleAnnotations");

        virtualinvoke $r70.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>($i31);

        $r27 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.AnnotationWriter anns>;

        virtualinvoke $r27.<org.objectweb.asm.AnnotationWriter: void put(org.objectweb.asm.ByteVector)>($r70);

     label33:
        $r18 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.AnnotationWriter ianns>;

        if $r18 == null goto label34;

        $i30 = virtualinvoke r0.<org.objectweb.asm.ClassWriter: int newUTF8(java.lang.String)>("RuntimeInvisibleAnnotations");

        virtualinvoke $r70.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>($i30);

        $r26 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.AnnotationWriter ianns>;

        virtualinvoke $r26.<org.objectweb.asm.AnnotationWriter: void put(org.objectweb.asm.ByteVector)>($r70);

     label34:
        $r19 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Attribute attrs>;

        if $r19 == null goto label35;

        $r25 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Attribute attrs>;

        $i98 = (int) -1;

        $i100 = (int) -1;

        virtualinvoke $r25.<org.objectweb.asm.Attribute: void put(org.objectweb.asm.ClassWriter,byte[],int,int,int,org.objectweb.asm.ByteVector)>(r0, null, 0, $i98, $i100, $r70);

     label35:
        $z0 = r0.<org.objectweb.asm.ClassWriter: boolean invalidFrames>;

        if $z0 == 0 goto label36;

        $r71 = new org.objectweb.asm.ClassWriter;

        specialinvoke $r71.<org.objectweb.asm.ClassWriter: void <init>(int)>(2);

        $r72 = new org.objectweb.asm.ClassReader;

        $r23 = $r70.<org.objectweb.asm.ByteVector: byte[] data>;

        specialinvoke $r72.<org.objectweb.asm.ClassReader: void <init>(byte[])>($r23);

        virtualinvoke $r72.<org.objectweb.asm.ClassReader: void accept(org.objectweb.asm.ClassVisitor,int)>($r71, 4);

        $r24 = virtualinvoke $r71.<org.objectweb.asm.ClassWriter: byte[] toByteArray()>();

        return $r24;

     label36:
        $r20 = $r70.<org.objectweb.asm.ByteVector: byte[] data>;

        return $r20;
    }

    org.objectweb.asm.Item newConstItem(java.lang.Object)
    {
        java.lang.Float $r23;
        java.lang.Integer $r33;
        org.objectweb.asm.Type r35;
        java.lang.Character $r29;
        byte $b7;
        java.lang.Long $r21;
        java.lang.Short $r27;
        java.lang.Byte $r31;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        float $f0;
        java.lang.StringBuilder $r3, $r4, $r37;
        org.objectweb.asm.ClassWriter r6;
        java.lang.Double $r19;
        long $l2;
        int $i0, $i1, $i3, $i5, $i6, $i8;
        java.lang.Boolean $r25;
        java.lang.String $r5, $r7, $r8, $r9, $r11, $r13, $r15, $r17;
        double $d0;
        char $c4;
        java.lang.IllegalArgumentException $r38;
        org.objectweb.asm.Item $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r26, $r28, $r30, $r32, $r34;
        org.objectweb.asm.Handle r36;
        java.lang.Object r0;

        r6 := @this: org.objectweb.asm.ClassWriter;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.lang.Integer;

        if $z0 == 0 goto label01;

        $r33 = (java.lang.Integer) r0;

        $i6 = virtualinvoke $r33.<java.lang.Integer: int intValue()>();

        $r34 = virtualinvoke r6.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item newInteger(int)>($i6);

        return $r34;

     label01:
        $z1 = r0 instanceof java.lang.Byte;

        if $z1 == 0 goto label02;

        $r31 = (java.lang.Byte) r0;

        $i5 = virtualinvoke $r31.<java.lang.Byte: int intValue()>();

        $r32 = virtualinvoke r6.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item newInteger(int)>($i5);

        return $r32;

     label02:
        $z2 = r0 instanceof java.lang.Character;

        if $z2 == 0 goto label03;

        $r29 = (java.lang.Character) r0;

        $c4 = virtualinvoke $r29.<java.lang.Character: char charValue()>();

        $i8 = (int) $c4;

        $r30 = virtualinvoke r6.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item newInteger(int)>($i8);

        return $r30;

     label03:
        $z3 = r0 instanceof java.lang.Short;

        if $z3 == 0 goto label04;

        $r27 = (java.lang.Short) r0;

        $i3 = virtualinvoke $r27.<java.lang.Short: int intValue()>();

        $r28 = virtualinvoke r6.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item newInteger(int)>($i3);

        return $r28;

     label04:
        $z4 = r0 instanceof java.lang.Boolean;

        if $z4 == 0 goto label07;

        $r25 = (java.lang.Boolean) r0;

        $z11 = virtualinvoke $r25.<java.lang.Boolean: boolean booleanValue()>();

        if $z11 == 0 goto label05;

        $b7 = 1;

        goto label06;

     label05:
        $b7 = 0;

     label06:
        $r26 = virtualinvoke r6.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item newInteger(int)>($b7);

        return $r26;

     label07:
        $z5 = r0 instanceof java.lang.Float;

        if $z5 == 0 goto label08;

        $r23 = (java.lang.Float) r0;

        $f0 = virtualinvoke $r23.<java.lang.Float: float floatValue()>();

        $r24 = virtualinvoke r6.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item newFloat(float)>($f0);

        return $r24;

     label08:
        $z6 = r0 instanceof java.lang.Long;

        if $z6 == 0 goto label09;

        $r21 = (java.lang.Long) r0;

        $l2 = virtualinvoke $r21.<java.lang.Long: long longValue()>();

        $r22 = virtualinvoke r6.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item newLong(long)>($l2);

        return $r22;

     label09:
        $z7 = r0 instanceof java.lang.Double;

        if $z7 == 0 goto label10;

        $r19 = (java.lang.Double) r0;

        $d0 = virtualinvoke $r19.<java.lang.Double: double doubleValue()>();

        $r20 = virtualinvoke r6.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item newDouble(double)>($d0);

        return $r20;

     label10:
        $z8 = r0 instanceof java.lang.String;

        if $z8 == 0 goto label11;

        $r17 = (java.lang.String) r0;

        $r18 = specialinvoke r6.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item newString(java.lang.String)>($r17);

        return $r18;

     label11:
        $z9 = r0 instanceof org.objectweb.asm.Type;

        if $z9 == 0 goto label14;

        r35 = (org.objectweb.asm.Type) r0;

        $i1 = virtualinvoke r35.<org.objectweb.asm.Type: int getSort()>();

        if $i1 != 10 goto label12;

        $r15 = virtualinvoke r35.<org.objectweb.asm.Type: java.lang.String getInternalName()>();

        $r16 = virtualinvoke r6.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item newClassItem(java.lang.String)>($r15);

        return $r16;

     label12:
        if $i1 != 11 goto label13;

        $r13 = virtualinvoke r35.<org.objectweb.asm.Type: java.lang.String getDescriptor()>();

        $r14 = virtualinvoke r6.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item newMethodTypeItem(java.lang.String)>($r13);

        return $r14;

     label13:
        $r11 = virtualinvoke r35.<org.objectweb.asm.Type: java.lang.String getDescriptor()>();

        $r12 = virtualinvoke r6.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item newClassItem(java.lang.String)>($r11);

        return $r12;

     label14:
        $z10 = r0 instanceof org.objectweb.asm.Handle;

        if $z10 == 0 goto label15;

        r36 = (org.objectweb.asm.Handle) r0;

        $i0 = r36.<org.objectweb.asm.Handle: int tag>;

        $r9 = r36.<org.objectweb.asm.Handle: java.lang.String owner>;

        $r8 = r36.<org.objectweb.asm.Handle: java.lang.String name>;

        $r7 = r36.<org.objectweb.asm.Handle: java.lang.String desc>;

        $r10 = virtualinvoke r6.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item newHandleItem(int,java.lang.String,java.lang.String,java.lang.String)>($i0, $r9, $r8, $r7);

        return $r10;

     label15:
        $r38 = new java.lang.IllegalArgumentException;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("value ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r38.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r38;
    }

    public int newConst(java.lang.Object)
    {
        org.objectweb.asm.ClassWriter r0;
        org.objectweb.asm.Item $r2;
        int $i0;
        java.lang.Object r1;

        r0 := @this: org.objectweb.asm.ClassWriter;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item newConstItem(java.lang.Object)>(r1);

        $i0 = $r2.<org.objectweb.asm.Item: int index>;

        return $i0;
    }

    public int newUTF8(java.lang.String)
    {
        org.objectweb.asm.ClassWriter r0;
        org.objectweb.asm.ByteVector $r5, $r6;
        org.objectweb.asm.Item $r2, $r3, $r4, $r7, $r8, r9;
        int $i0, $i1, $i2;
        java.lang.String r1;

        r0 := @this: org.objectweb.asm.ClassWriter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key>;

        virtualinvoke $r2.<org.objectweb.asm.Item: void set(int,java.lang.String,java.lang.String,java.lang.String)>(1, r1, null, null);

        $r3 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key>;

        $r4 = specialinvoke r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item get(org.objectweb.asm.Item)>($r3);

        r9 = $r4;

        if $r4 != null goto label1;

        $r5 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.ByteVector pool>;

        $r6 = virtualinvoke $r5.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByte(int)>(1);

        virtualinvoke $r6.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putUTF8(java.lang.String)>(r1);

        $r7 = new org.objectweb.asm.Item;

        $i1 = r0.<org.objectweb.asm.ClassWriter: int index>;

        $i2 = $i1 + 1;

        r0.<org.objectweb.asm.ClassWriter: int index> = $i2;

        $r8 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key>;

        specialinvoke $r7.<org.objectweb.asm.Item: void <init>(int,org.objectweb.asm.Item)>($i1, $r8);

        r9 = $r7;

        specialinvoke r0.<org.objectweb.asm.ClassWriter: void put(org.objectweb.asm.Item)>($r7);

     label1:
        $i0 = r9.<org.objectweb.asm.Item: int index>;

        return $i0;
    }

    org.objectweb.asm.Item newClassItem(java.lang.String)
    {
        org.objectweb.asm.ClassWriter r0;
        org.objectweb.asm.ByteVector $r5;
        org.objectweb.asm.Item $r2, $r3, $r4, $r6, $r7, r8;
        int $i0, $i1, $i2;
        java.lang.String r1;

        r0 := @this: org.objectweb.asm.ClassWriter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key2>;

        virtualinvoke $r2.<org.objectweb.asm.Item: void set(int,java.lang.String,java.lang.String,java.lang.String)>(7, r1, null, null);

        $r3 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key2>;

        $r4 = specialinvoke r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item get(org.objectweb.asm.Item)>($r3);

        r8 = $r4;

        if $r4 != null goto label1;

        $r5 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.ByteVector pool>;

        $i0 = virtualinvoke r0.<org.objectweb.asm.ClassWriter: int newUTF8(java.lang.String)>(r1);

        virtualinvoke $r5.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put12(int,int)>(7, $i0);

        $r6 = new org.objectweb.asm.Item;

        $i1 = r0.<org.objectweb.asm.ClassWriter: int index>;

        $i2 = $i1 + 1;

        r0.<org.objectweb.asm.ClassWriter: int index> = $i2;

        $r7 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key2>;

        specialinvoke $r6.<org.objectweb.asm.Item: void <init>(int,org.objectweb.asm.Item)>($i1, $r7);

        r8 = $r6;

        specialinvoke r0.<org.objectweb.asm.ClassWriter: void put(org.objectweb.asm.Item)>($r6);

     label1:
        return r8;
    }

    public int newClass(java.lang.String)
    {
        org.objectweb.asm.ClassWriter r0;
        org.objectweb.asm.Item $r2;
        int $i0;
        java.lang.String r1;

        r0 := @this: org.objectweb.asm.ClassWriter;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item newClassItem(java.lang.String)>(r1);

        $i0 = $r2.<org.objectweb.asm.Item: int index>;

        return $i0;
    }

    org.objectweb.asm.Item newMethodTypeItem(java.lang.String)
    {
        org.objectweb.asm.ClassWriter r0;
        org.objectweb.asm.ByteVector $r5;
        org.objectweb.asm.Item $r2, $r3, $r4, $r6, $r7, r8;
        int $i0, $i1, $i2;
        java.lang.String r1;

        r0 := @this: org.objectweb.asm.ClassWriter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key2>;

        virtualinvoke $r2.<org.objectweb.asm.Item: void set(int,java.lang.String,java.lang.String,java.lang.String)>(16, r1, null, null);

        $r3 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key2>;

        $r4 = specialinvoke r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item get(org.objectweb.asm.Item)>($r3);

        r8 = $r4;

        if $r4 != null goto label1;

        $r5 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.ByteVector pool>;

        $i0 = virtualinvoke r0.<org.objectweb.asm.ClassWriter: int newUTF8(java.lang.String)>(r1);

        virtualinvoke $r5.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put12(int,int)>(16, $i0);

        $r6 = new org.objectweb.asm.Item;

        $i1 = r0.<org.objectweb.asm.ClassWriter: int index>;

        $i2 = $i1 + 1;

        r0.<org.objectweb.asm.ClassWriter: int index> = $i2;

        $r7 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key2>;

        specialinvoke $r6.<org.objectweb.asm.Item: void <init>(int,org.objectweb.asm.Item)>($i1, $r7);

        r8 = $r6;

        specialinvoke r0.<org.objectweb.asm.ClassWriter: void put(org.objectweb.asm.Item)>($r6);

     label1:
        return r8;
    }

    public int newMethodType(java.lang.String)
    {
        org.objectweb.asm.ClassWriter r0;
        org.objectweb.asm.Item $r2;
        int $i0;
        java.lang.String r1;

        r0 := @this: org.objectweb.asm.ClassWriter;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item newMethodTypeItem(java.lang.String)>(r1);

        $i0 = $r2.<org.objectweb.asm.Item: int index>;

        return $i0;
    }

    org.objectweb.asm.Item newHandleItem(int, java.lang.String, java.lang.String, java.lang.String)
    {
        org.objectweb.asm.ClassWriter r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String r1, r2, r3;
        boolean $z0;
        org.objectweb.asm.Item $r4, $r5, $r6, r7, $r8, $r9;

        r0 := @this: org.objectweb.asm.ClassWriter;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        $r4 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key4>;

        $i1 = 20 + i0;

        virtualinvoke $r4.<org.objectweb.asm.Item: void set(int,java.lang.String,java.lang.String,java.lang.String)>($i1, r1, r2, r3);

        $r5 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key4>;

        $r6 = specialinvoke r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item get(org.objectweb.asm.Item)>($r5);

        r7 = $r6;

        if $r6 != null goto label5;

        if i0 > 4 goto label1;

        $i3 = virtualinvoke r0.<org.objectweb.asm.ClassWriter: int newField(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3);

        specialinvoke r0.<org.objectweb.asm.ClassWriter: void put112(int,int,int)>(15, i0, $i3);

        goto label4;

     label1:
        if i0 != 9 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        $i2 = virtualinvoke r0.<org.objectweb.asm.ClassWriter: int newMethod(java.lang.String,java.lang.String,java.lang.String,boolean)>(r1, r2, r3, $z0);

        specialinvoke r0.<org.objectweb.asm.ClassWriter: void put112(int,int,int)>(15, i0, $i2);

     label4:
        $r8 = new org.objectweb.asm.Item;

        $i4 = r0.<org.objectweb.asm.ClassWriter: int index>;

        $i5 = $i4 + 1;

        r0.<org.objectweb.asm.ClassWriter: int index> = $i5;

        $r9 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key4>;

        specialinvoke $r8.<org.objectweb.asm.Item: void <init>(int,org.objectweb.asm.Item)>($i4, $r9);

        r7 = $r8;

        specialinvoke r0.<org.objectweb.asm.ClassWriter: void put(org.objectweb.asm.Item)>($r8);

     label5:
        return r7;
    }

    public int newHandle(int, java.lang.String, java.lang.String, java.lang.String)
    {
        org.objectweb.asm.ClassWriter r0;
        org.objectweb.asm.Item $r4;
        int i0, $i1;
        java.lang.String r1, r2, r3;

        r0 := @this: org.objectweb.asm.ClassWriter;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        $r4 = virtualinvoke r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item newHandleItem(int,java.lang.String,java.lang.String,java.lang.String)>(i0, r1, r2, r3);

        $i1 = $r4.<org.objectweb.asm.Item: int index>;

        return $i1;
    }

    transient org.objectweb.asm.Item newInvokeDynamicItem(java.lang.String, java.lang.String, org.objectweb.asm.Handle, java.lang.Object[])
    {
        byte[] r19;
        byte $b14, $b15;
        org.objectweb.asm.ClassWriter r0;
        java.lang.Object[] r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i16, $i17, $i18, $i19, i20, i21, i22, i23, i24, i25, i26, $i27, $i28;
        java.lang.String $r2, $r3, $r4, r9, r10;
        org.objectweb.asm.ByteVector r17, $r22;
        org.objectweb.asm.Item[] $r6, $r7;
        org.objectweb.asm.Handle r1;
        org.objectweb.asm.Item $r11, $r12, $r13, $r15, r20, r21, $r23, $r24;
        java.lang.Object r18;

        r0 := @this: org.objectweb.asm.ClassWriter;

        r9 := @parameter0: java.lang.String;

        r10 := @parameter1: java.lang.String;

        r1 := @parameter2: org.objectweb.asm.Handle;

        r5 := @parameter3: java.lang.Object[];

        r17 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.ByteVector bootstrapMethods>;

        if r17 != null goto label01;

        $r22 = new org.objectweb.asm.ByteVector;

        specialinvoke $r22.<org.objectweb.asm.ByteVector: void <init>()>();

        r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.ByteVector bootstrapMethods> = $r22;

        r17 = $r22;

     label01:
        $i18 = r17.<org.objectweb.asm.ByteVector: int length>;

        i20 = virtualinvoke r1.<org.objectweb.asm.Handle: int hashCode()>();

        $i0 = r1.<org.objectweb.asm.Handle: int tag>;

        $r4 = r1.<org.objectweb.asm.Handle: java.lang.String owner>;

        $r3 = r1.<org.objectweb.asm.Handle: java.lang.String name>;

        $r2 = r1.<org.objectweb.asm.Handle: java.lang.String desc>;

        $i1 = virtualinvoke r0.<org.objectweb.asm.ClassWriter: int newHandle(int,java.lang.String,java.lang.String,java.lang.String)>($i0, $r4, $r3, $r2);

        virtualinvoke r17.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>($i1);

        $i19 = lengthof r5;

        virtualinvoke r17.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>($i19);

        i21 = 0;

     label02:
        if i21 >= $i19 goto label03;

        r18 = r5[i21];

        $i16 = virtualinvoke r18.<java.lang.Object: int hashCode()>();

        i20 = i20 ^ $i16;

        $i17 = virtualinvoke r0.<org.objectweb.asm.ClassWriter: int newConst(java.lang.Object)>(r18);

        virtualinvoke r17.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>($i17);

        i21 = i21 + 1;

        goto label02;

     label03:
        r19 = r17.<org.objectweb.asm.ByteVector: byte[] data>;

        $i2 = 2 + $i19;

        i22 = $i2 << 1;

        i23 = i20 & 2147483647;

        $r7 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item[] items>;

        $r6 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item[] items>;

        $i3 = lengthof $r6;

        $i4 = i23 % $i3;

        r20 = $r7[$i4];

     label04:
        if r20 == null goto label10;

        $i10 = r20.<org.objectweb.asm.Item: int type>;

        if $i10 != 33 goto label05;

        $i11 = r20.<org.objectweb.asm.Item: int hashCode>;

        if $i11 == i23 goto label06;

     label05:
        r20 = r20.<org.objectweb.asm.Item: org.objectweb.asm.Item next>;

        goto label04;

     label06:
        i24 = r20.<org.objectweb.asm.Item: int intVal>;

        i25 = 0;

     label07:
        if i25 >= i22 goto label09;

        $i12 = $i18 + i25;

        $b15 = r19[$i12];

        $i13 = i24 + i25;

        $b14 = r19[$i13];

        $i27 = (int) $b15;

        $i28 = (int) $b14;

        if $i27 == $i28 goto label08;

        r20 = r20.<org.objectweb.asm.Item: org.objectweb.asm.Item next>;

        goto label04;

     label08:
        i25 = i25 + 1;

        goto label07;

     label09:
        goto label10;

     label10:
        if r20 == null goto label11;

        i26 = r20.<org.objectweb.asm.Item: int index>;

        r17.<org.objectweb.asm.ByteVector: int length> = $i18;

        goto label12;

     label11:
        $i5 = r0.<org.objectweb.asm.ClassWriter: int bootstrapMethodsCount>;

        $i6 = $i5 + 1;

        r0.<org.objectweb.asm.ClassWriter: int bootstrapMethodsCount> = $i6;

        i26 = $i5;

        $r23 = new org.objectweb.asm.Item;

        specialinvoke $r23.<org.objectweb.asm.Item: void <init>(int)>($i5);

        virtualinvoke $r23.<org.objectweb.asm.Item: void set(int,int)>($i18, i23);

        specialinvoke r0.<org.objectweb.asm.ClassWriter: void put(org.objectweb.asm.Item)>($r23);

     label12:
        $r11 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key3>;

        virtualinvoke $r11.<org.objectweb.asm.Item: void set(java.lang.String,java.lang.String,int)>(r9, r10, i26);

        $r12 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key3>;

        $r13 = specialinvoke r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item get(org.objectweb.asm.Item)>($r12);

        r21 = $r13;

        if $r13 != null goto label13;

        $i7 = virtualinvoke r0.<org.objectweb.asm.ClassWriter: int newNameType(java.lang.String,java.lang.String)>(r9, r10);

        specialinvoke r0.<org.objectweb.asm.ClassWriter: void put122(int,int,int)>(18, i26, $i7);

        $r24 = new org.objectweb.asm.Item;

        $i8 = r0.<org.objectweb.asm.ClassWriter: int index>;

        $i9 = $i8 + 1;

        r0.<org.objectweb.asm.ClassWriter: int index> = $i9;

        $r15 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key3>;

        specialinvoke $r24.<org.objectweb.asm.Item: void <init>(int,org.objectweb.asm.Item)>($i8, $r15);

        r21 = $r24;

        specialinvoke r0.<org.objectweb.asm.ClassWriter: void put(org.objectweb.asm.Item)>($r24);

     label13:
        return r21;
    }

    public transient int newInvokeDynamic(java.lang.String, java.lang.String, org.objectweb.asm.Handle, java.lang.Object[])
    {
        org.objectweb.asm.ClassWriter r0;
        org.objectweb.asm.Handle r3;
        org.objectweb.asm.Item $r5;
        java.lang.Object[] r4;
        int $i0;
        java.lang.String r1, r2;

        r0 := @this: org.objectweb.asm.ClassWriter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.objectweb.asm.Handle;

        r4 := @parameter3: java.lang.Object[];

        $r5 = virtualinvoke r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item newInvokeDynamicItem(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])>(r1, r2, r3, r4);

        $i0 = $r5.<org.objectweb.asm.Item: int index>;

        return $i0;
    }

    org.objectweb.asm.Item newFieldItem(java.lang.String, java.lang.String, java.lang.String)
    {
        org.objectweb.asm.ClassWriter r0;
        org.objectweb.asm.Item $r4, $r5, $r6, $r7, $r8, r9;
        int $i0, $i1, $i2, $i3;
        java.lang.String r1, r2, r3;

        r0 := @this: org.objectweb.asm.ClassWriter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key3>;

        virtualinvoke $r4.<org.objectweb.asm.Item: void set(int,java.lang.String,java.lang.String,java.lang.String)>(9, r1, r2, r3);

        $r5 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key3>;

        $r6 = specialinvoke r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item get(org.objectweb.asm.Item)>($r5);

        r9 = $r6;

        if $r6 != null goto label1;

        $i0 = virtualinvoke r0.<org.objectweb.asm.ClassWriter: int newClass(java.lang.String)>(r1);

        $i1 = virtualinvoke r0.<org.objectweb.asm.ClassWriter: int newNameType(java.lang.String,java.lang.String)>(r2, r3);

        specialinvoke r0.<org.objectweb.asm.ClassWriter: void put122(int,int,int)>(9, $i0, $i1);

        $r7 = new org.objectweb.asm.Item;

        $i2 = r0.<org.objectweb.asm.ClassWriter: int index>;

        $i3 = $i2 + 1;

        r0.<org.objectweb.asm.ClassWriter: int index> = $i3;

        $r8 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key3>;

        specialinvoke $r7.<org.objectweb.asm.Item: void <init>(int,org.objectweb.asm.Item)>($i2, $r8);

        r9 = $r7;

        specialinvoke r0.<org.objectweb.asm.ClassWriter: void put(org.objectweb.asm.Item)>($r7);

     label1:
        return r9;
    }

    public int newField(java.lang.String, java.lang.String, java.lang.String)
    {
        org.objectweb.asm.ClassWriter r0;
        org.objectweb.asm.Item $r4;
        int $i0;
        java.lang.String r1, r2, r3;

        r0 := @this: org.objectweb.asm.ClassWriter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = virtualinvoke r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item newFieldItem(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3);

        $i0 = $r4.<org.objectweb.asm.Item: int index>;

        return $i0;
    }

    org.objectweb.asm.Item newMethodItem(java.lang.String, java.lang.String, java.lang.String, boolean)
    {
        org.objectweb.asm.ClassWriter r0;
        byte $b5, $b6;
        int $i0, $i1, $i2, $i3;
        java.lang.String r1, r2, r3;
        boolean z0;
        org.objectweb.asm.Item $r4, $r5, $r6, $r7, $r8, r9;

        r0 := @this: org.objectweb.asm.ClassWriter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        if z0 == 0 goto label1;

        $b6 = 11;

        $b5 = 11;

        goto label2;

     label1:
        $b6 = 10;

        $b5 = 10;

     label2:
        $r4 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key3>;

        virtualinvoke $r4.<org.objectweb.asm.Item: void set(int,java.lang.String,java.lang.String,java.lang.String)>($b6, r1, r2, r3);

        $r5 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key3>;

        $r6 = specialinvoke r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item get(org.objectweb.asm.Item)>($r5);

        r9 = $r6;

        if $r6 != null goto label3;

        $i0 = virtualinvoke r0.<org.objectweb.asm.ClassWriter: int newClass(java.lang.String)>(r1);

        $i1 = virtualinvoke r0.<org.objectweb.asm.ClassWriter: int newNameType(java.lang.String,java.lang.String)>(r2, r3);

        specialinvoke r0.<org.objectweb.asm.ClassWriter: void put122(int,int,int)>($b5, $i0, $i1);

        $r7 = new org.objectweb.asm.Item;

        $i2 = r0.<org.objectweb.asm.ClassWriter: int index>;

        $i3 = $i2 + 1;

        r0.<org.objectweb.asm.ClassWriter: int index> = $i3;

        $r8 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key3>;

        specialinvoke $r7.<org.objectweb.asm.Item: void <init>(int,org.objectweb.asm.Item)>($i2, $r8);

        r9 = $r7;

        specialinvoke r0.<org.objectweb.asm.ClassWriter: void put(org.objectweb.asm.Item)>($r7);

     label3:
        return r9;
    }

    public int newMethod(java.lang.String, java.lang.String, java.lang.String, boolean)
    {
        org.objectweb.asm.ClassWriter r0;
        org.objectweb.asm.Item $r4;
        int $i0;
        java.lang.String r1, r2, r3;
        boolean z0;

        r0 := @this: org.objectweb.asm.ClassWriter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        $r4 = virtualinvoke r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item newMethodItem(java.lang.String,java.lang.String,java.lang.String,boolean)>(r1, r2, r3, z0);

        $i0 = $r4.<org.objectweb.asm.Item: int index>;

        return $i0;
    }

    org.objectweb.asm.Item newInteger(int)
    {
        org.objectweb.asm.ClassWriter r0;
        org.objectweb.asm.ByteVector $r4, $r5;
        org.objectweb.asm.Item $r1, $r2, $r3, $r6, $r7, r8;
        int i0, $i1, $i2;

        r0 := @this: org.objectweb.asm.ClassWriter;

        i0 := @parameter0: int;

        $r1 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key>;

        virtualinvoke $r1.<org.objectweb.asm.Item: void set(int)>(i0);

        $r2 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key>;

        $r3 = specialinvoke r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item get(org.objectweb.asm.Item)>($r2);

        r8 = $r3;

        if $r3 != null goto label1;

        $r4 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.ByteVector pool>;

        $r5 = virtualinvoke $r4.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByte(int)>(3);

        virtualinvoke $r5.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putInt(int)>(i0);

        $r6 = new org.objectweb.asm.Item;

        $i1 = r0.<org.objectweb.asm.ClassWriter: int index>;

        $i2 = $i1 + 1;

        r0.<org.objectweb.asm.ClassWriter: int index> = $i2;

        $r7 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key>;

        specialinvoke $r6.<org.objectweb.asm.Item: void <init>(int,org.objectweb.asm.Item)>($i1, $r7);

        r8 = $r6;

        specialinvoke r0.<org.objectweb.asm.ClassWriter: void put(org.objectweb.asm.Item)>($r6);

     label1:
        return r8;
    }

    org.objectweb.asm.Item newFloat(float)
    {
        org.objectweb.asm.ClassWriter r0;
        org.objectweb.asm.ByteVector $r4, $r5;
        org.objectweb.asm.Item $r1, $r2, $r3, $r6, $r7, $r8, r9;
        int $i0, $i1, $i2;
        float f0;

        r0 := @this: org.objectweb.asm.ClassWriter;

        f0 := @parameter0: float;

        $r1 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key>;

        virtualinvoke $r1.<org.objectweb.asm.Item: void set(float)>(f0);

        $r2 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key>;

        $r3 = specialinvoke r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item get(org.objectweb.asm.Item)>($r2);

        r9 = $r3;

        if $r3 != null goto label1;

        $r4 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.ByteVector pool>;

        $r5 = virtualinvoke $r4.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByte(int)>(4);

        $r6 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key>;

        $i0 = $r6.<org.objectweb.asm.Item: int intVal>;

        virtualinvoke $r5.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putInt(int)>($i0);

        $r7 = new org.objectweb.asm.Item;

        $i1 = r0.<org.objectweb.asm.ClassWriter: int index>;

        $i2 = $i1 + 1;

        r0.<org.objectweb.asm.ClassWriter: int index> = $i2;

        $r8 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key>;

        specialinvoke $r7.<org.objectweb.asm.Item: void <init>(int,org.objectweb.asm.Item)>($i1, $r8);

        r9 = $r7;

        specialinvoke r0.<org.objectweb.asm.ClassWriter: void put(org.objectweb.asm.Item)>($r7);

     label1:
        return r9;
    }

    org.objectweb.asm.Item newLong(long)
    {
        org.objectweb.asm.ClassWriter r0;
        org.objectweb.asm.ByteVector $r4, $r5;
        long l0;
        org.objectweb.asm.Item $r1, $r2, $r3, $r6, $r7, r8;
        int $i1, $i2, $i3;

        r0 := @this: org.objectweb.asm.ClassWriter;

        l0 := @parameter0: long;

        $r1 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key>;

        virtualinvoke $r1.<org.objectweb.asm.Item: void set(long)>(l0);

        $r2 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key>;

        $r3 = specialinvoke r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item get(org.objectweb.asm.Item)>($r2);

        r8 = $r3;

        if $r3 != null goto label1;

        $r4 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.ByteVector pool>;

        $r5 = virtualinvoke $r4.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByte(int)>(5);

        virtualinvoke $r5.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putLong(long)>(l0);

        $r6 = new org.objectweb.asm.Item;

        $i1 = r0.<org.objectweb.asm.ClassWriter: int index>;

        $r7 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key>;

        specialinvoke $r6.<org.objectweb.asm.Item: void <init>(int,org.objectweb.asm.Item)>($i1, $r7);

        r8 = $r6;

        $i2 = r0.<org.objectweb.asm.ClassWriter: int index>;

        $i3 = $i2 + 2;

        r0.<org.objectweb.asm.ClassWriter: int index> = $i3;

        specialinvoke r0.<org.objectweb.asm.ClassWriter: void put(org.objectweb.asm.Item)>($r6);

     label1:
        return r8;
    }

    org.objectweb.asm.Item newDouble(double)
    {
        org.objectweb.asm.ClassWriter r0;
        org.objectweb.asm.ByteVector $r4, $r5;
        long $l0;
        org.objectweb.asm.Item $r1, $r2, $r3, $r6, $r7, $r8, r9;
        int $i1, $i2, $i3;
        double d0;

        r0 := @this: org.objectweb.asm.ClassWriter;

        d0 := @parameter0: double;

        $r1 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key>;

        virtualinvoke $r1.<org.objectweb.asm.Item: void set(double)>(d0);

        $r2 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key>;

        $r3 = specialinvoke r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item get(org.objectweb.asm.Item)>($r2);

        r9 = $r3;

        if $r3 != null goto label1;

        $r4 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.ByteVector pool>;

        $r5 = virtualinvoke $r4.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putByte(int)>(6);

        $r6 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key>;

        $l0 = $r6.<org.objectweb.asm.Item: long longVal>;

        virtualinvoke $r5.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putLong(long)>($l0);

        $r7 = new org.objectweb.asm.Item;

        $i1 = r0.<org.objectweb.asm.ClassWriter: int index>;

        $r8 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key>;

        specialinvoke $r7.<org.objectweb.asm.Item: void <init>(int,org.objectweb.asm.Item)>($i1, $r8);

        r9 = $r7;

        $i2 = r0.<org.objectweb.asm.ClassWriter: int index>;

        $i3 = $i2 + 2;

        r0.<org.objectweb.asm.ClassWriter: int index> = $i3;

        specialinvoke r0.<org.objectweb.asm.ClassWriter: void put(org.objectweb.asm.Item)>($r7);

     label1:
        return r9;
    }

    private org.objectweb.asm.Item newString(java.lang.String)
    {
        org.objectweb.asm.ClassWriter r0;
        org.objectweb.asm.ByteVector $r5;
        org.objectweb.asm.Item $r2, $r3, $r4, $r6, $r7, r8;
        int $i0, $i1, $i2;
        java.lang.String r1;

        r0 := @this: org.objectweb.asm.ClassWriter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key2>;

        virtualinvoke $r2.<org.objectweb.asm.Item: void set(int,java.lang.String,java.lang.String,java.lang.String)>(8, r1, null, null);

        $r3 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key2>;

        $r4 = specialinvoke r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item get(org.objectweb.asm.Item)>($r3);

        r8 = $r4;

        if $r4 != null goto label1;

        $r5 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.ByteVector pool>;

        $i0 = virtualinvoke r0.<org.objectweb.asm.ClassWriter: int newUTF8(java.lang.String)>(r1);

        virtualinvoke $r5.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put12(int,int)>(8, $i0);

        $r6 = new org.objectweb.asm.Item;

        $i1 = r0.<org.objectweb.asm.ClassWriter: int index>;

        $i2 = $i1 + 1;

        r0.<org.objectweb.asm.ClassWriter: int index> = $i2;

        $r7 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key2>;

        specialinvoke $r6.<org.objectweb.asm.Item: void <init>(int,org.objectweb.asm.Item)>($i1, $r7);

        r8 = $r6;

        specialinvoke r0.<org.objectweb.asm.ClassWriter: void put(org.objectweb.asm.Item)>($r6);

     label1:
        return r8;
    }

    public int newNameType(java.lang.String, java.lang.String)
    {
        org.objectweb.asm.ClassWriter r0;
        org.objectweb.asm.Item $r3;
        int $i0;
        java.lang.String r1, r2;

        r0 := @this: org.objectweb.asm.ClassWriter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item newNameTypeItem(java.lang.String,java.lang.String)>(r1, r2);

        $i0 = $r3.<org.objectweb.asm.Item: int index>;

        return $i0;
    }

    org.objectweb.asm.Item newNameTypeItem(java.lang.String, java.lang.String)
    {
        org.objectweb.asm.ClassWriter r0;
        org.objectweb.asm.Item $r3, $r4, $r5, $r6, $r7, r8;
        int $i0, $i1, $i2, $i3;
        java.lang.String r1, r2;

        r0 := @this: org.objectweb.asm.ClassWriter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key2>;

        virtualinvoke $r3.<org.objectweb.asm.Item: void set(int,java.lang.String,java.lang.String,java.lang.String)>(12, r1, r2, null);

        $r4 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key2>;

        $r5 = specialinvoke r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item get(org.objectweb.asm.Item)>($r4);

        r8 = $r5;

        if $r5 != null goto label1;

        $i0 = virtualinvoke r0.<org.objectweb.asm.ClassWriter: int newUTF8(java.lang.String)>(r1);

        $i1 = virtualinvoke r0.<org.objectweb.asm.ClassWriter: int newUTF8(java.lang.String)>(r2);

        specialinvoke r0.<org.objectweb.asm.ClassWriter: void put122(int,int,int)>(12, $i0, $i1);

        $r6 = new org.objectweb.asm.Item;

        $i2 = r0.<org.objectweb.asm.ClassWriter: int index>;

        $i3 = $i2 + 1;

        r0.<org.objectweb.asm.ClassWriter: int index> = $i3;

        $r7 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key2>;

        specialinvoke $r6.<org.objectweb.asm.Item: void <init>(int,org.objectweb.asm.Item)>($i2, $r7);

        r8 = $r6;

        specialinvoke r0.<org.objectweb.asm.ClassWriter: void put(org.objectweb.asm.Item)>($r6);

     label1:
        return r8;
    }

    int addType(java.lang.String)
    {
        org.objectweb.asm.ClassWriter r0;
        org.objectweb.asm.Item $r2, $r3, $r4, $r5, r6;
        int $i0;
        java.lang.String r1;

        r0 := @this: org.objectweb.asm.ClassWriter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key>;

        virtualinvoke $r2.<org.objectweb.asm.Item: void set(int,java.lang.String,java.lang.String,java.lang.String)>(30, r1, null, null);

        $r3 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key>;

        $r4 = specialinvoke r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item get(org.objectweb.asm.Item)>($r3);

        r6 = $r4;

        if $r4 != null goto label1;

        $r5 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key>;

        r6 = specialinvoke r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item addType(org.objectweb.asm.Item)>($r5);

     label1:
        $i0 = r6.<org.objectweb.asm.Item: int index>;

        return $i0;
    }

    int addUninitializedType(java.lang.String, int)
    {
        org.objectweb.asm.ClassWriter r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String r3;
        org.objectweb.asm.Item $r1, $r2, $r4, $r5, $r6, $r7, $r8, r9;

        r0 := @this: org.objectweb.asm.ClassWriter;

        r3 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key>;

        $r1.<org.objectweb.asm.Item: int type> = 31;

        $r2 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key>;

        $r2.<org.objectweb.asm.Item: int intVal> = i0;

        $r4 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key>;

        $r4.<org.objectweb.asm.Item: java.lang.String strVal1> = r3;

        $r5 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key>;

        $i1 = virtualinvoke r3.<java.lang.String: int hashCode()>();

        $i2 = 31 + $i1;

        $i3 = $i2 + i0;

        $i4 = 2147483647 & $i3;

        $r5.<org.objectweb.asm.Item: int hashCode> = $i4;

        $r6 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key>;

        $r7 = specialinvoke r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item get(org.objectweb.asm.Item)>($r6);

        r9 = $r7;

        if $r7 != null goto label1;

        $r8 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key>;

        r9 = specialinvoke r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item addType(org.objectweb.asm.Item)>($r8);

     label1:
        $i5 = r9.<org.objectweb.asm.Item: int index>;

        return $i5;
    }

    private org.objectweb.asm.Item addType(org.objectweb.asm.Item)
    {
        org.objectweb.asm.ClassWriter r0;
        short $s0, $s2, $s3, $s5, $s6;
        int $i1, $i4, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        org.objectweb.asm.Item[] $r3, $r4, $r5, $r6, r7, $r8, $r9, $r10;
        org.objectweb.asm.Item $r2, r11, $r12;

        r0 := @this: org.objectweb.asm.ClassWriter;

        r11 := @parameter0: org.objectweb.asm.Item;

        $s0 = r0.<org.objectweb.asm.ClassWriter: short typeCount>;

        $i10 = (int) $s0;

        $i1 = $i10 + 1;

        $s2 = (short) $i1;

        r0.<org.objectweb.asm.ClassWriter: short typeCount> = $s2;

        $r12 = new org.objectweb.asm.Item;

        $s3 = r0.<org.objectweb.asm.ClassWriter: short typeCount>;

        $r2 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key>;

        $i11 = (int) $s3;

        specialinvoke $r12.<org.objectweb.asm.Item: void <init>(int,org.objectweb.asm.Item)>($i11, $r2);

        specialinvoke r0.<org.objectweb.asm.ClassWriter: void put(org.objectweb.asm.Item)>($r12);

        $r3 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item[] typeTable>;

        if $r3 != null goto label1;

        $r10 = newarray (org.objectweb.asm.Item)[16];

        r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item[] typeTable> = $r10;

     label1:
        $s5 = r0.<org.objectweb.asm.ClassWriter: short typeCount>;

        $r4 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item[] typeTable>;

        $i4 = lengthof $r4;

        $i12 = (int) $s5;

        if $i12 != $i4 goto label2;

        $r6 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item[] typeTable>;

        $i7 = lengthof $r6;

        $i8 = 2 * $i7;

        r7 = newarray (org.objectweb.asm.Item)[$i8];

        $r9 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item[] typeTable>;

        $r8 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item[] typeTable>;

        $i9 = lengthof $r8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, r7, 0, $i9);

        r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item[] typeTable> = r7;

     label2:
        $r5 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item[] typeTable>;

        $s6 = r0.<org.objectweb.asm.ClassWriter: short typeCount>;

        $i13 = (int) $s6;

        $r5[$i13] = $r12;

        return $r12;
    }

    int getMergedType(int, int)
    {
        org.objectweb.asm.ClassWriter r0;
        long $l2, $l3, $l4, $l5;
        int i0, i1, $i6, $i7, $i8, $i9, $i10;
        java.lang.String r8, r11, $r13;
        org.objectweb.asm.Item[] $r6, $r9;
        org.objectweb.asm.Item $r1, $r2, $r3, $r4, $r5, $r7, $r10, $r12, $r14, $r15, r16;

        r0 := @this: org.objectweb.asm.ClassWriter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key2>;

        $r1.<org.objectweb.asm.Item: int type> = 32;

        $r2 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key2>;

        $l4 = (long) i0;

        $l2 = (long) i1;

        $l3 = $l2 << 32;

        $l5 = $l4 | $l3;

        $r2.<org.objectweb.asm.Item: long longVal> = $l5;

        $r3 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key2>;

        $i6 = 32 + i0;

        $i7 = $i6 + i1;

        $i8 = 2147483647 & $i7;

        $r3.<org.objectweb.asm.Item: int hashCode> = $i8;

        $r4 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key2>;

        $r5 = specialinvoke r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item get(org.objectweb.asm.Item)>($r4);

        r16 = $r5;

        if $r5 != null goto label1;

        $r6 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item[] typeTable>;

        $r7 = $r6[i0];

        r8 = $r7.<org.objectweb.asm.Item: java.lang.String strVal1>;

        $r9 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item[] typeTable>;

        $r10 = $r9[i1];

        r11 = $r10.<org.objectweb.asm.Item: java.lang.String strVal1>;

        $r12 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key2>;

        $r13 = virtualinvoke r0.<org.objectweb.asm.ClassWriter: java.lang.String getCommonSuperClass(java.lang.String,java.lang.String)>(r8, r11);

        $i10 = virtualinvoke r0.<org.objectweb.asm.ClassWriter: int addType(java.lang.String)>($r13);

        $r12.<org.objectweb.asm.Item: int intVal> = $i10;

        $r14 = new org.objectweb.asm.Item;

        $r15 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item key2>;

        specialinvoke $r14.<org.objectweb.asm.Item: void <init>(int,org.objectweb.asm.Item)>(0, $r15);

        r16 = $r14;

        specialinvoke r0.<org.objectweb.asm.ClassWriter: void put(org.objectweb.asm.Item)>($r14);

     label1:
        $i9 = r16.<org.objectweb.asm.Item: int intVal>;

        return $i9;
    }

    protected java.lang.String getCommonSuperClass(java.lang.String, java.lang.String)
    {
        org.objectweb.asm.ClassWriter r0;
        java.lang.String r3, $r4, r6, $r7, $r10, $r11, $r14;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.RuntimeException $r13;
        java.lang.Exception $r12;
        java.lang.Class $r1, $r5, $r8, $r9, r15;
        java.lang.ClassLoader $r2;

        r0 := @this: org.objectweb.asm.ClassWriter;

        r3 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label1:
        $r4 = virtualinvoke r3.<java.lang.String: java.lang.String replace(char,char)>(47, 46);

        $r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r4, 0, $r2);

        r15 = $r5;

        $r7 = virtualinvoke r6.<java.lang.String: java.lang.String replace(char,char)>(47, 46);

        $r8 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r7, 0, $r2);

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;

        $r13 = new java.lang.RuntimeException;

        $r14 = virtualinvoke $r12.<java.lang.Exception: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String)>($r14);

        throw $r13;

     label4:
        $z0 = virtualinvoke $r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r8);

        if $z0 == 0 goto label5;

        return r3;

     label5:
        $z1 = virtualinvoke $r8.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r5);

        if $z1 == 0 goto label6;

        return r6;

     label6:
        $z2 = virtualinvoke $r5.<java.lang.Class: boolean isInterface()>();

        if $z2 != 0 goto label7;

        $z3 = virtualinvoke $r8.<java.lang.Class: boolean isInterface()>();

        if $z3 == 0 goto label8;

     label7:
        return "java/lang/Object";

     label8:
        $r9 = virtualinvoke r15.<java.lang.Class: java.lang.Class getSuperclass()>();

        r15 = $r9;

        $z4 = virtualinvoke $r9.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r8);

        if $z4 == 0 goto label8;

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>();

        $r11 = virtualinvoke $r10.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        return $r11;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private org.objectweb.asm.Item get(org.objectweb.asm.Item)
    {
        org.objectweb.asm.ClassWriter r0;
        org.objectweb.asm.Item[] $r2, $r3;
        org.objectweb.asm.Item r1, r4;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0;

        r0 := @this: org.objectweb.asm.ClassWriter;

        r1 := @parameter0: org.objectweb.asm.Item;

        $r3 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item[] items>;

        $i1 = r1.<org.objectweb.asm.Item: int hashCode>;

        $r2 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item[] items>;

        $i0 = lengthof $r2;

        $i2 = $i1 % $i0;

        r4 = $r3[$i2];

     label1:
        if r4 == null goto label3;

        $i4 = r4.<org.objectweb.asm.Item: int type>;

        $i3 = r1.<org.objectweb.asm.Item: int type>;

        if $i4 != $i3 goto label2;

        $z0 = virtualinvoke r1.<org.objectweb.asm.Item: boolean isEqualTo(org.objectweb.asm.Item)>(r4);

        if $z0 != 0 goto label3;

     label2:
        r4 = r4.<org.objectweb.asm.Item: org.objectweb.asm.Item next>;

        goto label1;

     label3:
        return r4;
    }

    private void put(org.objectweb.asm.Item)
    {
        org.objectweb.asm.ClassWriter r0;
        short $s0;
        int $i1, $i2, $i3, $i4, $i5, $i6, i7, $i8, $i9, $i10, $i11, i12, i13, i14, $i15, $i17;
        double $d0, $d1;
        org.objectweb.asm.Item[] $r2, $r3, $r5, $r6, r7, $r8;
        org.objectweb.asm.Item r1, $r4, r9, $r10, r11;

        r0 := @this: org.objectweb.asm.ClassWriter;

        r1 := @parameter0: org.objectweb.asm.Item;

        $i1 = r0.<org.objectweb.asm.ClassWriter: int index>;

        $s0 = r0.<org.objectweb.asm.ClassWriter: short typeCount>;

        $i15 = (int) $s0;

        $i3 = $i1 + $i15;

        $i2 = r0.<org.objectweb.asm.ClassWriter: int threshold>;

        if $i3 <= $i2 goto label5;

        $r6 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item[] items>;

        i13 = lengthof $r6;

        $i6 = i13 * 2;

        i7 = $i6 + 1;

        r7 = newarray (org.objectweb.asm.Item)[i7];

        i14 = i13 - 1;

     label1:
        if i14 < 0 goto label4;

        $r8 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item[] items>;

        r11 = $r8[i14];

     label2:
        if r11 == null goto label3;

        $i11 = r11.<org.objectweb.asm.Item: int hashCode>;

        $i10 = lengthof r7;

        i12 = $i11 % $i10;

        r9 = r11.<org.objectweb.asm.Item: org.objectweb.asm.Item next>;

        $r10 = r7[i12];

        r11.<org.objectweb.asm.Item: org.objectweb.asm.Item next> = $r10;

        r7[i12] = r11;

        r11 = r9;

        goto label2;

     label3:
        $i17 = (int) -1;

        i14 = i14 + $i17;

        goto label1;

     label4:
        r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item[] items> = r7;

        $d0 = (double) i7;

        $d1 = $d0 * 0.75;

        $i8 = (int) $d1;

        r0.<org.objectweb.asm.ClassWriter: int threshold> = $i8;

     label5:
        $i5 = r1.<org.objectweb.asm.Item: int hashCode>;

        $r2 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item[] items>;

        $i4 = lengthof $r2;

        $i9 = $i5 % $i4;

        $r3 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item[] items>;

        $r4 = $r3[$i9];

        r1.<org.objectweb.asm.Item: org.objectweb.asm.Item next> = $r4;

        $r5 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.Item[] items>;

        $r5[$i9] = r1;

        return;
    }

    private void put122(int, int, int)
    {
        org.objectweb.asm.ClassWriter r0;
        org.objectweb.asm.ByteVector $r1, $r2;
        int i0, i1, i2;

        r0 := @this: org.objectweb.asm.ClassWriter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r1 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.ByteVector pool>;

        $r2 = virtualinvoke $r1.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put12(int,int)>(i0, i1);

        virtualinvoke $r2.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>(i2);

        return;
    }

    private void put112(int, int, int)
    {
        org.objectweb.asm.ClassWriter r0;
        org.objectweb.asm.ByteVector $r1, $r2;
        int i0, i1, i2;

        r0 := @this: org.objectweb.asm.ClassWriter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r1 = r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.ByteVector pool>;

        $r2 = virtualinvoke $r1.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector put11(int,int)>(i0, i1);

        virtualinvoke $r2.<org.objectweb.asm.ByteVector: org.objectweb.asm.ByteVector putShort(int)>(i2);

        return;
    }

    static void <clinit>()
    {
        byte[] r0;
        char $c1;
        byte $b3;
        int $i0, $i2, i4, $i5;
        java.lang.String r1;

        <org.objectweb.asm.ClassWriter: int BSM> = 33;

        <org.objectweb.asm.ClassWriter: int TYPE_MERGED> = 32;

        <org.objectweb.asm.ClassWriter: int TYPE_UNINIT> = 31;

        <org.objectweb.asm.ClassWriter: int TYPE_NORMAL> = 30;

        <org.objectweb.asm.ClassWriter: int HANDLE_BASE> = 20;

        <org.objectweb.asm.ClassWriter: int INDY> = 18;

        <org.objectweb.asm.ClassWriter: int HANDLE> = 15;

        <org.objectweb.asm.ClassWriter: int MTYPE> = 16;

        <org.objectweb.asm.ClassWriter: int UTF8> = 1;

        <org.objectweb.asm.ClassWriter: int NAME_TYPE> = 12;

        <org.objectweb.asm.ClassWriter: int DOUBLE> = 6;

        <org.objectweb.asm.ClassWriter: int LONG> = 5;

        <org.objectweb.asm.ClassWriter: int FLOAT> = 4;

        <org.objectweb.asm.ClassWriter: int INT> = 3;

        <org.objectweb.asm.ClassWriter: int STR> = 8;

        <org.objectweb.asm.ClassWriter: int IMETH> = 11;

        <org.objectweb.asm.ClassWriter: int METH> = 10;

        <org.objectweb.asm.ClassWriter: int FIELD> = 9;

        <org.objectweb.asm.ClassWriter: int CLASS> = 7;

        <org.objectweb.asm.ClassWriter: int WIDE_INSN> = 17;

        <org.objectweb.asm.ClassWriter: int MANA_INSN> = 16;

        <org.objectweb.asm.ClassWriter: int LOOK_INSN> = 15;

        <org.objectweb.asm.ClassWriter: int TABL_INSN> = 14;

        <org.objectweb.asm.ClassWriter: int IINC_INSN> = 13;

        <org.objectweb.asm.ClassWriter: int LDCW_INSN> = 12;

        <org.objectweb.asm.ClassWriter: int LDC_INSN> = 11;

        <org.objectweb.asm.ClassWriter: int LABELW_INSN> = 10;

        <org.objectweb.asm.ClassWriter: int LABEL_INSN> = 9;

        <org.objectweb.asm.ClassWriter: int INDYMETH_INSN> = 8;

        <org.objectweb.asm.ClassWriter: int ITFMETH_INSN> = 7;

        <org.objectweb.asm.ClassWriter: int FIELDORMETH_INSN> = 6;

        <org.objectweb.asm.ClassWriter: int TYPE_INSN> = 5;

        <org.objectweb.asm.ClassWriter: int IMPLVAR_INSN> = 4;

        <org.objectweb.asm.ClassWriter: int VAR_INSN> = 3;

        <org.objectweb.asm.ClassWriter: int SHORT_INSN> = 2;

        <org.objectweb.asm.ClassWriter: int SBYTE_INSN> = 1;

        <org.objectweb.asm.ClassWriter: int NOARG_INSN> = 0;

        <org.objectweb.asm.ClassWriter: int TO_ACC_SYNTHETIC> = 64;

        <org.objectweb.asm.ClassWriter: int ACC_SYNTHETIC_ATTRIBUTE> = 262144;

        <org.objectweb.asm.ClassWriter: int COMPUTE_FRAMES> = 2;

        <org.objectweb.asm.ClassWriter: int COMPUTE_MAXS> = 1;

        r0 = newarray (byte)[220];

        r1 = "AAAAAAAAAAAAAAAABCLMMDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANAAAAAAAAAAAAAAAAAAAAJJJJJJJJJJJJJJJJDOPAAAAAAGGGGGGGHIFBFAAFFAARQJJKKJJJJJJJJJJJJJJJJJJ";

        i4 = 0;

     label1:
        $i0 = lengthof r0;

        if i4 >= $i0 goto label2;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i4);

        $i5 = (int) $c1;

        $i2 = $i5 - 65;

        $b3 = (byte) $i2;

        r0[i4] = $b3;

        i4 = i4 + 1;

        goto label1;

     label2:
        <org.objectweb.asm.ClassWriter: byte[] TYPE> = r0;

        return;
    }
}
