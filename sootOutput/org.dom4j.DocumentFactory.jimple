public class org.dom4j.DocumentFactory extends java.lang.Object implements java.io.Serializable
{
    private static org.dom4j.util.SingletonStrategy singleton;
    protected transient org.dom4j.tree.QNameCache cache;
    private java.util.Map xpathNamespaceURIs;
    static java.lang.Class class$org$dom4j$DocumentFactory;

    private static org.dom4j.util.SingletonStrategy createSingleton()
    {
        org.dom4j.util.SingletonStrategy r7;
        java.lang.Exception $r3, $r5;
        org.dom4j.util.SimpleSingleton $r4;
        java.lang.Class $r1;
        java.lang.Object $r2;
        java.lang.String $r0, r6;

     label1:
        r6 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("org.dom4j.factory", "org.dom4j.DocumentFactory");

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r6 = "org.dom4j.DocumentFactory";

     label4:
        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("org.dom4j.DocumentFactory.singleton.strategy", "org.dom4j.util.SimpleSingleton");

        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r0);

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Object newInstance()>();

        r7 = (org.dom4j.util.SingletonStrategy) $r2;

     label5:
        goto label7;

     label6:
        $r3 := @caughtexception;

        $r4 = new org.dom4j.util.SimpleSingleton;

        specialinvoke $r4.<org.dom4j.util.SimpleSingleton: void <init>()>();

        r7 = $r4;

     label7:
        interfaceinvoke r7.<org.dom4j.util.SingletonStrategy: void setSingletonClassName(java.lang.String)>(r6);

        return r7;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Exception from label4 to label5 with label6;
    }

    public void <init>()
    {
        org.dom4j.DocumentFactory r0;

        r0 := @this: org.dom4j.DocumentFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<org.dom4j.DocumentFactory: void init()>();

        return;
    }

    public static synchronized org.dom4j.DocumentFactory getInstance()
    {
        org.dom4j.util.SingletonStrategy $r0, $r1, $r4;
        java.lang.Object $r2;
        org.dom4j.DocumentFactory $r3;

        $r0 = <org.dom4j.DocumentFactory: org.dom4j.util.SingletonStrategy singleton>;

        if $r0 != null goto label1;

        $r4 = staticinvoke <org.dom4j.DocumentFactory: org.dom4j.util.SingletonStrategy createSingleton()>();

        <org.dom4j.DocumentFactory: org.dom4j.util.SingletonStrategy singleton> = $r4;

     label1:
        $r1 = <org.dom4j.DocumentFactory: org.dom4j.util.SingletonStrategy singleton>;

        $r2 = interfaceinvoke $r1.<org.dom4j.util.SingletonStrategy: java.lang.Object instance()>();

        $r3 = (org.dom4j.DocumentFactory) $r2;

        return $r3;
    }

    public org.dom4j.Document createDocument()
    {
        org.dom4j.tree.DefaultDocument $r0;
        org.dom4j.DocumentFactory r1;

        r1 := @this: org.dom4j.DocumentFactory;

        $r0 = new org.dom4j.tree.DefaultDocument;

        specialinvoke $r0.<org.dom4j.tree.DefaultDocument: void <init>()>();

        virtualinvoke $r0.<org.dom4j.tree.DefaultDocument: void setDocumentFactory(org.dom4j.DocumentFactory)>(r1);

        return $r0;
    }

    public org.dom4j.Document createDocument(java.lang.String)
    {
        org.dom4j.Document $r1;
        org.dom4j.tree.AbstractDocument $r3;
        java.lang.String r2;
        org.dom4j.DocumentFactory r0;
        boolean $z0;

        r0 := @this: org.dom4j.DocumentFactory;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.dom4j.DocumentFactory: org.dom4j.Document createDocument()>();

        $z0 = $r1 instanceof org.dom4j.tree.AbstractDocument;

        if $z0 == 0 goto label1;

        $r3 = (org.dom4j.tree.AbstractDocument) $r1;

        virtualinvoke $r3.<org.dom4j.tree.AbstractDocument: void setXMLEncoding(java.lang.String)>(r2);

     label1:
        return $r1;
    }

    public org.dom4j.Document createDocument(org.dom4j.Element)
    {
        org.dom4j.Document $r1;
        org.dom4j.Element r2;
        org.dom4j.DocumentFactory r0;

        r0 := @this: org.dom4j.DocumentFactory;

        r2 := @parameter0: org.dom4j.Element;

        $r1 = virtualinvoke r0.<org.dom4j.DocumentFactory: org.dom4j.Document createDocument()>();

        interfaceinvoke $r1.<org.dom4j.Document: void setRootElement(org.dom4j.Element)>(r2);

        return $r1;
    }

    public org.dom4j.DocumentType createDocType(java.lang.String, java.lang.String, java.lang.String)
    {
        org.dom4j.tree.DefaultDocumentType $r0;
        java.lang.String r1, r2, r3;
        org.dom4j.DocumentFactory r4;

        r4 := @this: org.dom4j.DocumentFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r0 = new org.dom4j.tree.DefaultDocumentType;

        specialinvoke $r0.<org.dom4j.tree.DefaultDocumentType: void <init>(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3);

        return $r0;
    }

    public org.dom4j.Element createElement(org.dom4j.QName)
    {
        org.dom4j.QName r1;
        org.dom4j.tree.DefaultElement $r0;
        org.dom4j.DocumentFactory r2;

        r2 := @this: org.dom4j.DocumentFactory;

        r1 := @parameter0: org.dom4j.QName;

        $r0 = new org.dom4j.tree.DefaultElement;

        specialinvoke $r0.<org.dom4j.tree.DefaultElement: void <init>(org.dom4j.QName)>(r1);

        return $r0;
    }

    public org.dom4j.Element createElement(java.lang.String)
    {
        org.dom4j.QName $r2;
        org.dom4j.Element $r3;
        java.lang.String r1;
        org.dom4j.DocumentFactory r0;

        r0 := @this: org.dom4j.DocumentFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.DocumentFactory: org.dom4j.QName createQName(java.lang.String)>(r1);

        $r3 = virtualinvoke r0.<org.dom4j.DocumentFactory: org.dom4j.Element createElement(org.dom4j.QName)>($r2);

        return $r3;
    }

    public org.dom4j.Element createElement(java.lang.String, java.lang.String)
    {
        org.dom4j.QName $r3;
        org.dom4j.Element $r4;
        java.lang.String r1, r2;
        org.dom4j.DocumentFactory r0;

        r0 := @this: org.dom4j.DocumentFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.dom4j.DocumentFactory: org.dom4j.QName createQName(java.lang.String,java.lang.String)>(r1, r2);

        $r4 = virtualinvoke r0.<org.dom4j.DocumentFactory: org.dom4j.Element createElement(org.dom4j.QName)>($r3);

        return $r4;
    }

    public org.dom4j.Attribute createAttribute(org.dom4j.Element, org.dom4j.QName, java.lang.String)
    {
        org.dom4j.tree.DefaultAttribute $r0;
        org.dom4j.QName r1;
        org.dom4j.Element r4;
        java.lang.String r2;
        org.dom4j.DocumentFactory r3;

        r3 := @this: org.dom4j.DocumentFactory;

        r4 := @parameter0: org.dom4j.Element;

        r1 := @parameter1: org.dom4j.QName;

        r2 := @parameter2: java.lang.String;

        $r0 = new org.dom4j.tree.DefaultAttribute;

        specialinvoke $r0.<org.dom4j.tree.DefaultAttribute: void <init>(org.dom4j.QName,java.lang.String)>(r1, r2);

        return $r0;
    }

    public org.dom4j.Attribute createAttribute(org.dom4j.Element, java.lang.String, java.lang.String)
    {
        org.dom4j.Element r1;
        org.dom4j.QName $r3;
        java.lang.String r2, r4;
        org.dom4j.Attribute $r5;
        org.dom4j.DocumentFactory r0;

        r0 := @this: org.dom4j.DocumentFactory;

        r1 := @parameter0: org.dom4j.Element;

        r2 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        $r3 = virtualinvoke r0.<org.dom4j.DocumentFactory: org.dom4j.QName createQName(java.lang.String)>(r2);

        $r5 = virtualinvoke r0.<org.dom4j.DocumentFactory: org.dom4j.Attribute createAttribute(org.dom4j.Element,org.dom4j.QName,java.lang.String)>(r1, $r3, r4);

        return $r5;
    }

    public org.dom4j.CDATA createCDATA(java.lang.String)
    {
        org.dom4j.tree.DefaultCDATA $r0;
        java.lang.String r1;
        org.dom4j.DocumentFactory r2;

        r2 := @this: org.dom4j.DocumentFactory;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.dom4j.tree.DefaultCDATA;

        specialinvoke $r0.<org.dom4j.tree.DefaultCDATA: void <init>(java.lang.String)>(r1);

        return $r0;
    }

    public org.dom4j.Comment createComment(java.lang.String)
    {
        java.lang.String r1;
        org.dom4j.tree.DefaultComment $r0;
        org.dom4j.DocumentFactory r2;

        r2 := @this: org.dom4j.DocumentFactory;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.dom4j.tree.DefaultComment;

        specialinvoke $r0.<org.dom4j.tree.DefaultComment: void <init>(java.lang.String)>(r1);

        return $r0;
    }

    public org.dom4j.Text createText(java.lang.String)
    {
        java.lang.String r0;
        org.dom4j.tree.DefaultText $r1;
        java.lang.IllegalArgumentException $r2;
        org.dom4j.DocumentFactory r3;

        r3 := @this: org.dom4j.DocumentFactory;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Adding text to an XML document must not be null");

        throw $r2;

     label1:
        $r1 = new org.dom4j.tree.DefaultText;

        specialinvoke $r1.<org.dom4j.tree.DefaultText: void <init>(java.lang.String)>(r0);

        return $r1;
    }

    public org.dom4j.Entity createEntity(java.lang.String, java.lang.String)
    {
        org.dom4j.tree.DefaultEntity $r0;
        java.lang.String r1, r2;
        org.dom4j.DocumentFactory r3;

        r3 := @this: org.dom4j.DocumentFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r0 = new org.dom4j.tree.DefaultEntity;

        specialinvoke $r0.<org.dom4j.tree.DefaultEntity: void <init>(java.lang.String,java.lang.String)>(r1, r2);

        return $r0;
    }

    public org.dom4j.Namespace createNamespace(java.lang.String, java.lang.String)
    {
        org.dom4j.Namespace $r2;
        java.lang.String r0, r1;
        org.dom4j.DocumentFactory r3;

        r3 := @this: org.dom4j.DocumentFactory;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.dom4j.Namespace: org.dom4j.Namespace get(java.lang.String,java.lang.String)>(r0, r1);

        return $r2;
    }

    public org.dom4j.ProcessingInstruction createProcessingInstruction(java.lang.String, java.lang.String)
    {
        org.dom4j.tree.DefaultProcessingInstruction $r0;
        java.lang.String r1, r2;
        org.dom4j.DocumentFactory r3;

        r3 := @this: org.dom4j.DocumentFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r0 = new org.dom4j.tree.DefaultProcessingInstruction;

        specialinvoke $r0.<org.dom4j.tree.DefaultProcessingInstruction: void <init>(java.lang.String,java.lang.String)>(r1, r2);

        return $r0;
    }

    public org.dom4j.ProcessingInstruction createProcessingInstruction(java.lang.String, java.util.Map)
    {
        org.dom4j.tree.DefaultProcessingInstruction $r0;
        java.util.Map r2;
        java.lang.String r1;
        org.dom4j.DocumentFactory r3;

        r3 := @this: org.dom4j.DocumentFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Map;

        $r0 = new org.dom4j.tree.DefaultProcessingInstruction;

        specialinvoke $r0.<org.dom4j.tree.DefaultProcessingInstruction: void <init>(java.lang.String,java.util.Map)>(r1, r2);

        return $r0;
    }

    public org.dom4j.QName createQName(java.lang.String, org.dom4j.Namespace)
    {
        org.dom4j.Namespace r2;
        org.dom4j.QName $r4;
        java.lang.String r1;
        org.dom4j.tree.QNameCache $r3;
        org.dom4j.DocumentFactory r0;

        r0 := @this: org.dom4j.DocumentFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.dom4j.Namespace;

        $r3 = r0.<org.dom4j.DocumentFactory: org.dom4j.tree.QNameCache cache>;

        $r4 = virtualinvoke $r3.<org.dom4j.tree.QNameCache: org.dom4j.QName get(java.lang.String,org.dom4j.Namespace)>(r1, r2);

        return $r4;
    }

    public org.dom4j.QName createQName(java.lang.String)
    {
        org.dom4j.QName $r3;
        java.lang.String r1;
        org.dom4j.tree.QNameCache $r2;
        org.dom4j.DocumentFactory r0;

        r0 := @this: org.dom4j.DocumentFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.dom4j.DocumentFactory: org.dom4j.tree.QNameCache cache>;

        $r3 = virtualinvoke $r2.<org.dom4j.tree.QNameCache: org.dom4j.QName get(java.lang.String)>(r1);

        return $r3;
    }

    public org.dom4j.QName createQName(java.lang.String, java.lang.String, java.lang.String)
    {
        org.dom4j.Namespace $r5;
        org.dom4j.QName $r6;
        java.lang.String r1, r2, r3;
        org.dom4j.tree.QNameCache $r4;
        org.dom4j.DocumentFactory r0;

        r0 := @this: org.dom4j.DocumentFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = r0.<org.dom4j.DocumentFactory: org.dom4j.tree.QNameCache cache>;

        $r5 = staticinvoke <org.dom4j.Namespace: org.dom4j.Namespace get(java.lang.String,java.lang.String)>(r2, r3);

        $r6 = virtualinvoke $r4.<org.dom4j.tree.QNameCache: org.dom4j.QName get(java.lang.String,org.dom4j.Namespace)>(r1, $r5);

        return $r6;
    }

    public org.dom4j.QName createQName(java.lang.String, java.lang.String)
    {
        org.dom4j.QName $r4;
        java.lang.String r1, r2;
        org.dom4j.tree.QNameCache $r3;
        org.dom4j.DocumentFactory r0;

        r0 := @this: org.dom4j.DocumentFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.dom4j.DocumentFactory: org.dom4j.tree.QNameCache cache>;

        $r4 = virtualinvoke $r3.<org.dom4j.tree.QNameCache: org.dom4j.QName get(java.lang.String,java.lang.String)>(r1, r2);

        return $r4;
    }

    public org.dom4j.XPath createXPath(java.lang.String) throws org.dom4j.InvalidXPathException
    {
        org.dom4j.xpath.DefaultXPath $r0;
        java.util.Map $r3, $r4;
        java.lang.String r1;
        org.dom4j.DocumentFactory r2;

        r2 := @this: org.dom4j.DocumentFactory;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.dom4j.xpath.DefaultXPath;

        specialinvoke $r0.<org.dom4j.xpath.DefaultXPath: void <init>(java.lang.String)>(r1);

        $r3 = r2.<org.dom4j.DocumentFactory: java.util.Map xpathNamespaceURIs>;

        if $r3 == null goto label1;

        $r4 = r2.<org.dom4j.DocumentFactory: java.util.Map xpathNamespaceURIs>;

        virtualinvoke $r0.<org.dom4j.xpath.DefaultXPath: void setNamespaceURIs(java.util.Map)>($r4);

     label1:
        return $r0;
    }

    public org.dom4j.XPath createXPath(java.lang.String, org.jaxen.VariableContext)
    {
        org.jaxen.VariableContext r3;
        org.dom4j.XPath $r2;
        java.lang.String r1;
        org.dom4j.DocumentFactory r0;

        r0 := @this: org.dom4j.DocumentFactory;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: org.jaxen.VariableContext;

        $r2 = virtualinvoke r0.<org.dom4j.DocumentFactory: org.dom4j.XPath createXPath(java.lang.String)>(r1);

        interfaceinvoke $r2.<org.dom4j.XPath: void setVariableContext(org.jaxen.VariableContext)>(r3);

        return $r2;
    }

    public org.dom4j.NodeFilter createXPathFilter(java.lang.String, org.jaxen.VariableContext)
    {
        org.jaxen.VariableContext r3;
        org.dom4j.XPath $r2;
        java.lang.String r1;
        org.dom4j.DocumentFactory r0;

        r0 := @this: org.dom4j.DocumentFactory;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: org.jaxen.VariableContext;

        $r2 = virtualinvoke r0.<org.dom4j.DocumentFactory: org.dom4j.XPath createXPath(java.lang.String)>(r1);

        interfaceinvoke $r2.<org.dom4j.XPath: void setVariableContext(org.jaxen.VariableContext)>(r3);

        return $r2;
    }

    public org.dom4j.NodeFilter createXPathFilter(java.lang.String)
    {
        java.lang.String r1;
        org.dom4j.XPath $r2;
        org.dom4j.DocumentFactory r0;

        r0 := @this: org.dom4j.DocumentFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.DocumentFactory: org.dom4j.XPath createXPath(java.lang.String)>(r1);

        return $r2;
    }

    public org.dom4j.rule.Pattern createPattern(java.lang.String)
    {
        org.dom4j.xpath.XPathPattern $r0;
        java.lang.String r1;
        org.dom4j.DocumentFactory r2;

        r2 := @this: org.dom4j.DocumentFactory;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.dom4j.xpath.XPathPattern;

        specialinvoke $r0.<org.dom4j.xpath.XPathPattern: void <init>(java.lang.String)>(r1);

        return $r0;
    }

    public java.util.List getQNames()
    {
        java.util.List $r2;
        org.dom4j.tree.QNameCache $r1;
        org.dom4j.DocumentFactory r0;

        r0 := @this: org.dom4j.DocumentFactory;

        $r1 = r0.<org.dom4j.DocumentFactory: org.dom4j.tree.QNameCache cache>;

        $r2 = virtualinvoke $r1.<org.dom4j.tree.QNameCache: java.util.List getQNames()>();

        return $r2;
    }

    public java.util.Map getXPathNamespaceURIs()
    {
        org.dom4j.DocumentFactory r0;
        java.util.Map $r1;

        r0 := @this: org.dom4j.DocumentFactory;

        $r1 = r0.<org.dom4j.DocumentFactory: java.util.Map xpathNamespaceURIs>;

        return $r1;
    }

    public void setXPathNamespaceURIs(java.util.Map)
    {
        org.dom4j.DocumentFactory r0;
        java.util.Map r1;

        r0 := @this: org.dom4j.DocumentFactory;

        r1 := @parameter0: java.util.Map;

        r0.<org.dom4j.DocumentFactory: java.util.Map xpathNamespaceURIs> = r1;

        return;
    }

    protected static org.dom4j.DocumentFactory createSingleton(java.lang.String)
    {
        java.lang.Throwable $r6;
        java.io.PrintStream $r8;
        org.dom4j.DocumentFactory $r5, $r12;
        java.lang.StringBuffer $r7, $r9, $r10;
        java.lang.Class $r1, $r3, $r13;
        java.lang.Object $r4;
        java.lang.String r0, $r11;
        java.lang.ClassLoader $r2;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = <org.dom4j.DocumentFactory: java.lang.Class class$org$dom4j$DocumentFactory>;

        if $r1 != null goto label2;

        $r13 = staticinvoke <org.dom4j.DocumentFactory: java.lang.Class class$(java.lang.String)>("org.dom4j.DocumentFactory");

        <org.dom4j.DocumentFactory: java.lang.Class class$org$dom4j$DocumentFactory> = $r13;

        goto label3;

     label2:
        $r13 = <org.dom4j.DocumentFactory: java.lang.Class class$org$dom4j$DocumentFactory>;

     label3:
        $r2 = virtualinvoke $r13.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r0, 1, $r2);

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Object newInstance()>();

        $r5 = (org.dom4j.DocumentFactory) $r4;

     label4:
        return $r5;

     label5:
        $r6 := @caughtexception;

        $r8 = <java.lang.System: java.io.PrintStream out>;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("WARNING: Cannot load DocumentFactory: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r11);

        $r12 = new org.dom4j.DocumentFactory;

        specialinvoke $r12.<org.dom4j.DocumentFactory: void <init>()>();

        return $r12;

        catch java.lang.Throwable from label1 to label4 with label5;
    }

    protected org.dom4j.QName intern(org.dom4j.QName)
    {
        org.dom4j.QName r1, $r3;
        org.dom4j.tree.QNameCache $r2;
        org.dom4j.DocumentFactory r0;

        r0 := @this: org.dom4j.DocumentFactory;

        r1 := @parameter0: org.dom4j.QName;

        $r2 = r0.<org.dom4j.DocumentFactory: org.dom4j.tree.QNameCache cache>;

        $r3 = virtualinvoke $r2.<org.dom4j.tree.QNameCache: org.dom4j.QName intern(org.dom4j.QName)>(r1);

        return $r3;
    }

    protected org.dom4j.tree.QNameCache createQNameCache()
    {
        org.dom4j.tree.QNameCache $r0;
        org.dom4j.DocumentFactory r1;

        r1 := @this: org.dom4j.DocumentFactory;

        $r0 = new org.dom4j.tree.QNameCache;

        specialinvoke $r0.<org.dom4j.tree.QNameCache: void <init>(org.dom4j.DocumentFactory)>(r1);

        return $r0;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream r0;
        org.dom4j.DocumentFactory r1;

        r1 := @this: org.dom4j.DocumentFactory;

        r0 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r0.<java.io.ObjectInputStream: void defaultReadObject()>();

        virtualinvoke r1.<org.dom4j.DocumentFactory: void init()>();

        return;
    }

    protected void init()
    {
        org.dom4j.tree.QNameCache $r1;
        org.dom4j.DocumentFactory r0;

        r0 := @this: org.dom4j.DocumentFactory;

        $r1 = virtualinvoke r0.<org.dom4j.DocumentFactory: org.dom4j.tree.QNameCache createQNameCache()>();

        r0.<org.dom4j.DocumentFactory: org.dom4j.tree.QNameCache cache> = $r1;

        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        <org.dom4j.DocumentFactory: org.dom4j.util.SingletonStrategy singleton> = null;

        return;
    }
}
