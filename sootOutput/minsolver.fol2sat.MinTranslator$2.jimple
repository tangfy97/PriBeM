class minsolver.fol2sat.MinTranslator$2 extends kodkod.ast.visitor.AbstractReplacer
{
    private kodkod.ast.RelationPredicate source;
    final minsolver.fol2sat.MinTranslator this$0;
    private final kodkod.util.nodes.AnnotatedNode val$annotated;
    private final java.util.Map val$sources;
    private final java.util.Map val$simplified;

    void <init>(minsolver.fol2sat.MinTranslator, java.util.Set, kodkod.util.nodes.AnnotatedNode, java.util.Map, java.util.Map)
    {
        minsolver.fol2sat.MinTranslator r1;
        minsolver.fol2sat.MinTranslator$2 r0;
        java.util.Map r3, r4;
        java.util.Set $r5;
        kodkod.util.nodes.AnnotatedNode r2;

        r0 := @this: minsolver.fol2sat.MinTranslator$2;

        r1 := @parameter0: minsolver.fol2sat.MinTranslator;

        $r5 := @parameter1: java.util.Set;

        r2 := @parameter2: kodkod.util.nodes.AnnotatedNode;

        r3 := @parameter3: java.util.Map;

        r4 := @parameter4: java.util.Map;

        r0.<minsolver.fol2sat.MinTranslator$2: minsolver.fol2sat.MinTranslator this$0> = r1;

        r0.<minsolver.fol2sat.MinTranslator$2: kodkod.util.nodes.AnnotatedNode val$annotated> = r2;

        r0.<minsolver.fol2sat.MinTranslator$2: java.util.Map val$sources> = r3;

        r0.<minsolver.fol2sat.MinTranslator$2: java.util.Map val$simplified> = r4;

        specialinvoke r0.<kodkod.ast.visitor.AbstractReplacer: void <init>(java.util.Set)>($r5);

        r0.<minsolver.fol2sat.MinTranslator$2: kodkod.ast.RelationPredicate source> = null;

        return;
    }

    protected kodkod.ast.Node cache(kodkod.ast.Node, kodkod.ast.Node)
    {
        minsolver.fol2sat.MinTranslator$2 r1;
        kodkod.ast.Node r0, r2, $r7, $r9;
        java.util.Map $r5, $r8;
        kodkod.ast.RelationPredicate $r3, $r4;
        kodkod.util.nodes.AnnotatedNode $r6;
        boolean $z0;

        r1 := @this: minsolver.fol2sat.MinTranslator$2;

        r2 := @parameter0: kodkod.ast.Node;

        r0 := @parameter1: kodkod.ast.Node;

        $z0 = r0 instanceof kodkod.ast.Formula;

        if $z0 == 0 goto label2;

        $r3 = r1.<minsolver.fol2sat.MinTranslator$2: kodkod.ast.RelationPredicate source>;

        if $r3 != null goto label1;

        $r6 = r1.<minsolver.fol2sat.MinTranslator$2: kodkod.util.nodes.AnnotatedNode val$annotated>;

        $r7 = virtualinvoke $r6.<kodkod.util.nodes.AnnotatedNode: kodkod.ast.Node sourceOf(kodkod.ast.Node)>(r2);

        if r0 == $r7 goto label2;

        $r8 = r1.<minsolver.fol2sat.MinTranslator$2: java.util.Map val$sources>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r7);

        goto label2;

     label1:
        $r5 = r1.<minsolver.fol2sat.MinTranslator$2: java.util.Map val$sources>;

        $r4 = r1.<minsolver.fol2sat.MinTranslator$2: kodkod.ast.RelationPredicate source>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r4);

     label2:
        $r9 = specialinvoke r1.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node cache(kodkod.ast.Node,kodkod.ast.Node)>(r2, r0);

        return $r9;
    }

    public kodkod.ast.Formula visit(kodkod.ast.RelationPredicate)
    {
        minsolver.fol2sat.MinTranslator$2 r0;
        kodkod.ast.Formula $r4, $r7, $r10, r12, r13;
        kodkod.ast.Node $r2, $r6;
        java.util.Map $r3, $r8;
        java.lang.Object $r5, $r9, $r11;
        kodkod.ast.RelationPredicate r1;
        boolean $z0;

        r0 := @this: minsolver.fol2sat.MinTranslator$2;

        r1 := @parameter0: kodkod.ast.RelationPredicate;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinTranslator$2: kodkod.ast.Node lookup(kodkod.ast.Node)>(r1);

        r12 = (kodkod.ast.Formula) $r2;

        if r12 == null goto label1;

        return r12;

     label1:
        r0.<minsolver.fol2sat.MinTranslator$2: kodkod.ast.RelationPredicate source> = r1;

        $r3 = r0.<minsolver.fol2sat.MinTranslator$2: java.util.Map val$simplified>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        $r8 = r0.<minsolver.fol2sat.MinTranslator$2: java.util.Map val$simplified>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r10 = (kodkod.ast.Formula) $r9;

        $r11 = virtualinvoke $r10.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r13 = (kodkod.ast.Formula) $r11;

        goto label3;

     label2:
        $r4 = virtualinvoke r1.<kodkod.ast.RelationPredicate: kodkod.ast.Formula toConstraints()>();

        $r5 = virtualinvoke $r4.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r13 = (kodkod.ast.Formula) $r5;

     label3:
        r0.<minsolver.fol2sat.MinTranslator$2: kodkod.ast.RelationPredicate source> = null;

        $r6 = virtualinvoke r0.<minsolver.fol2sat.MinTranslator$2: kodkod.ast.Node cache(kodkod.ast.Node,kodkod.ast.Node)>(r1, r13);

        $r7 = (kodkod.ast.Formula) $r6;

        return $r7;
    }
}
