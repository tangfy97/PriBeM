public class org.apache.batik.css.engine.StyleMap extends java.lang.Object
{
    public static final short IMPORTANT_MASK;
    public static final short COMPUTED_MASK;
    public static final short NULL_CASCADED_MASK;
    public static final short INHERITED_MASK;
    public static final short LINE_HEIGHT_RELATIVE_MASK;
    public static final short FONT_SIZE_RELATIVE_MASK;
    public static final short COLOR_RELATIVE_MASK;
    public static final short PARENT_RELATIVE_MASK;
    public static final short BLOCK_WIDTH_RELATIVE_MASK;
    public static final short BLOCK_HEIGHT_RELATIVE_MASK;
    public static final short BOX_RELATIVE_MASK;
    public static final short ORIGIN_MASK;
    public static final short USER_AGENT_ORIGIN;
    public static final short USER_ORIGIN;
    public static final short NON_CSS_ORIGIN;
    public static final short AUTHOR_ORIGIN;
    public static final short INLINE_AUTHOR_ORIGIN;
    public static final short OVERRIDE_ORIGIN;
    protected org.apache.batik.css.engine.value.Value[] values;
    protected short[] masks;
    protected boolean fixedCascadedValues;

    public void <init>(int)
    {
        org.apache.batik.css.engine.StyleMap r0;
        int i0;
        org.apache.batik.css.engine.value.Value[] $r1;
        short[] $r2;

        r0 := @this: org.apache.batik.css.engine.StyleMap;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (org.apache.batik.css.engine.value.Value)[i0];

        r0.<org.apache.batik.css.engine.StyleMap: org.apache.batik.css.engine.value.Value[] values> = $r1;

        $r2 = newarray (short)[i0];

        r0.<org.apache.batik.css.engine.StyleMap: short[] masks> = $r2;

        return;
    }

    public boolean hasFixedCascadedValues()
    {
        org.apache.batik.css.engine.StyleMap r0;
        boolean $z0;

        r0 := @this: org.apache.batik.css.engine.StyleMap;

        $z0 = r0.<org.apache.batik.css.engine.StyleMap: boolean fixedCascadedValues>;

        return $z0;
    }

    public void setFixedCascadedStyle(boolean)
    {
        org.apache.batik.css.engine.StyleMap r0;
        boolean z0;

        r0 := @this: org.apache.batik.css.engine.StyleMap;

        z0 := @parameter0: boolean;

        r0.<org.apache.batik.css.engine.StyleMap: boolean fixedCascadedValues> = z0;

        return;
    }

    public org.apache.batik.css.engine.value.Value getValue(int)
    {
        org.apache.batik.css.engine.StyleMap r0;
        int i0;
        org.apache.batik.css.engine.value.Value[] $r1;
        org.apache.batik.css.engine.value.Value $r2;

        r0 := @this: org.apache.batik.css.engine.StyleMap;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.batik.css.engine.StyleMap: org.apache.batik.css.engine.value.Value[] values>;

        $r2 = $r1[i0];

        return $r2;
    }

    public short getMask(int)
    {
        short $s1;
        org.apache.batik.css.engine.StyleMap r0;
        int i0;
        short[] $r1;

        r0 := @this: org.apache.batik.css.engine.StyleMap;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.batik.css.engine.StyleMap: short[] masks>;

        $s1 = $r1[i0];

        return $s1;
    }

    public boolean isImportant(int)
    {
        short $s1, $s2;
        org.apache.batik.css.engine.StyleMap r0;
        int i0;
        short[] $r1;
        boolean $z0;

        r0 := @this: org.apache.batik.css.engine.StyleMap;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.batik.css.engine.StyleMap: short[] masks>;

        $s1 = $r1[i0];

        $s2 = $s1 & 1;

        if $s2 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isComputed(int)
    {
        short $s1, $s2;
        org.apache.batik.css.engine.StyleMap r0;
        int i0;
        short[] $r1;
        boolean $z0;

        r0 := @this: org.apache.batik.css.engine.StyleMap;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.batik.css.engine.StyleMap: short[] masks>;

        $s1 = $r1[i0];

        $s2 = $s1 & 2;

        if $s2 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isNullCascaded(int)
    {
        short $s1, $s2;
        org.apache.batik.css.engine.StyleMap r0;
        int i0;
        short[] $r1;
        boolean $z0;

        r0 := @this: org.apache.batik.css.engine.StyleMap;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.batik.css.engine.StyleMap: short[] masks>;

        $s1 = $r1[i0];

        $s2 = $s1 & 4;

        if $s2 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isInherited(int)
    {
        short $s1, $s2;
        org.apache.batik.css.engine.StyleMap r0;
        int i0;
        short[] $r1;
        boolean $z0;

        r0 := @this: org.apache.batik.css.engine.StyleMap;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.batik.css.engine.StyleMap: short[] masks>;

        $s1 = $r1[i0];

        $s2 = $s1 & 8;

        if $s2 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public short getOrigin(int)
    {
        short $s1, $s2, $s3;
        org.apache.batik.css.engine.StyleMap r0;
        int i0;
        short[] $r1;

        r0 := @this: org.apache.batik.css.engine.StyleMap;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.batik.css.engine.StyleMap: short[] masks>;

        $s1 = $r1[i0];

        $s2 = $s1 & -8192;

        $s3 = (short) $s2;

        return $s3;
    }

    public boolean isColorRelative(int)
    {
        short $s1, $s2;
        org.apache.batik.css.engine.StyleMap r0;
        int i0;
        short[] $r1;
        boolean $z0;

        r0 := @this: org.apache.batik.css.engine.StyleMap;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.batik.css.engine.StyleMap: short[] masks>;

        $s1 = $r1[i0];

        $s2 = $s1 & 64;

        if $s2 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isParentRelative(int)
    {
        short $s1, $s2;
        org.apache.batik.css.engine.StyleMap r0;
        int i0;
        short[] $r1;
        boolean $z0;

        r0 := @this: org.apache.batik.css.engine.StyleMap;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.batik.css.engine.StyleMap: short[] masks>;

        $s1 = $r1[i0];

        $s2 = $s1 & 128;

        if $s2 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isLineHeightRelative(int)
    {
        short $s1, $s2;
        org.apache.batik.css.engine.StyleMap r0;
        int i0;
        short[] $r1;
        boolean $z0;

        r0 := @this: org.apache.batik.css.engine.StyleMap;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.batik.css.engine.StyleMap: short[] masks>;

        $s1 = $r1[i0];

        $s2 = $s1 & 16;

        if $s2 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isFontSizeRelative(int)
    {
        short $s1, $s2;
        org.apache.batik.css.engine.StyleMap r0;
        int i0;
        short[] $r1;
        boolean $z0;

        r0 := @this: org.apache.batik.css.engine.StyleMap;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.batik.css.engine.StyleMap: short[] masks>;

        $s1 = $r1[i0];

        $s2 = $s1 & 32;

        if $s2 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isBlockWidthRelative(int)
    {
        short $s1, $s2;
        org.apache.batik.css.engine.StyleMap r0;
        int i0;
        short[] $r1;
        boolean $z0;

        r0 := @this: org.apache.batik.css.engine.StyleMap;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.batik.css.engine.StyleMap: short[] masks>;

        $s1 = $r1[i0];

        $s2 = $s1 & 256;

        if $s2 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isBlockHeightRelative(int)
    {
        short $s1, $s2;
        org.apache.batik.css.engine.StyleMap r0;
        int i0;
        short[] $r1;
        boolean $z0;

        r0 := @this: org.apache.batik.css.engine.StyleMap;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.batik.css.engine.StyleMap: short[] masks>;

        $s1 = $r1[i0];

        $s2 = $s1 & 512;

        if $s2 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void putValue(int, org.apache.batik.css.engine.value.Value)
    {
        org.apache.batik.css.engine.StyleMap r0;
        int i0;
        org.apache.batik.css.engine.value.Value[] $r2;
        org.apache.batik.css.engine.value.Value r1;

        r0 := @this: org.apache.batik.css.engine.StyleMap;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.batik.css.engine.value.Value;

        $r2 = r0.<org.apache.batik.css.engine.StyleMap: org.apache.batik.css.engine.value.Value[] values>;

        $r2[i0] = r1;

        return;
    }

    public void putMask(int, short)
    {
        short s1;
        org.apache.batik.css.engine.StyleMap r0;
        int i0;
        short[] $r1;

        r0 := @this: org.apache.batik.css.engine.StyleMap;

        i0 := @parameter0: int;

        s1 := @parameter1: short;

        $r1 = r0.<org.apache.batik.css.engine.StyleMap: short[] masks>;

        $r1[i0] = s1;

        return;
    }

    public void putImportant(int, boolean)
    {
        short $s1, $s2, $s3, $s4, $s5, $s6, $s8;
        org.apache.batik.css.engine.StyleMap r0;
        int i0;
        short[] $r1, $r2;
        boolean z0;

        r0 := @this: org.apache.batik.css.engine.StyleMap;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r2 = r0.<org.apache.batik.css.engine.StyleMap: short[] masks>;

        $s4 = $r2[i0];

        $s5 = $s4 | 1;

        $s6 = (short) $s5;

        $r2[i0] = $s6;

        goto label2;

     label1:
        $r1 = r0.<org.apache.batik.css.engine.StyleMap: short[] masks>;

        $s1 = $r1[i0];

        $s8 = (short) -2;

        $s2 = $s1 & $s8;

        $s3 = (short) $s2;

        $r1[i0] = $s3;

     label2:
        return;
    }

    public void putOrigin(int, short)
    {
        short $s1, $s2, $s3, s4, $s5, $s6, $s7, $s8, $s9;
        org.apache.batik.css.engine.StyleMap r0;
        int i0;
        short[] $r1, $r2;

        r0 := @this: org.apache.batik.css.engine.StyleMap;

        i0 := @parameter0: int;

        s4 := @parameter1: short;

        $r1 = r0.<org.apache.batik.css.engine.StyleMap: short[] masks>;

        $s1 = $r1[i0];

        $s2 = $s1 & 8191;

        $s3 = (short) $s2;

        $r1[i0] = $s3;

        $r2 = r0.<org.apache.batik.css.engine.StyleMap: short[] masks>;

        $s7 = $r2[i0];

        $s5 = s4 & -8192;

        $s6 = (short) $s5;

        $s8 = $s7 | $s6;

        $s9 = (short) $s8;

        $r2[i0] = $s9;

        return;
    }

    public void putComputed(int, boolean)
    {
        short $s1, $s2, $s3, $s4, $s5, $s6, $s8;
        org.apache.batik.css.engine.StyleMap r0;
        int i0;
        short[] $r1, $r2;
        boolean z0;

        r0 := @this: org.apache.batik.css.engine.StyleMap;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r2 = r0.<org.apache.batik.css.engine.StyleMap: short[] masks>;

        $s4 = $r2[i0];

        $s5 = $s4 | 2;

        $s6 = (short) $s5;

        $r2[i0] = $s6;

        goto label2;

     label1:
        $r1 = r0.<org.apache.batik.css.engine.StyleMap: short[] masks>;

        $s1 = $r1[i0];

        $s8 = (short) -3;

        $s2 = $s1 & $s8;

        $s3 = (short) $s2;

        $r1[i0] = $s3;

     label2:
        return;
    }

    public void putNullCascaded(int, boolean)
    {
        short $s1, $s2, $s3, $s4, $s5, $s6, $s8;
        org.apache.batik.css.engine.StyleMap r0;
        int i0;
        short[] $r1, $r2;
        boolean z0;

        r0 := @this: org.apache.batik.css.engine.StyleMap;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r2 = r0.<org.apache.batik.css.engine.StyleMap: short[] masks>;

        $s4 = $r2[i0];

        $s5 = $s4 | 4;

        $s6 = (short) $s5;

        $r2[i0] = $s6;

        goto label2;

     label1:
        $r1 = r0.<org.apache.batik.css.engine.StyleMap: short[] masks>;

        $s1 = $r1[i0];

        $s8 = (short) -5;

        $s2 = $s1 & $s8;

        $s3 = (short) $s2;

        $r1[i0] = $s3;

     label2:
        return;
    }

    public void putInherited(int, boolean)
    {
        short $s1, $s2, $s3, $s4, $s5, $s6, $s8;
        org.apache.batik.css.engine.StyleMap r0;
        int i0;
        short[] $r1, $r2;
        boolean z0;

        r0 := @this: org.apache.batik.css.engine.StyleMap;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r2 = r0.<org.apache.batik.css.engine.StyleMap: short[] masks>;

        $s4 = $r2[i0];

        $s5 = $s4 | 8;

        $s6 = (short) $s5;

        $r2[i0] = $s6;

        goto label2;

     label1:
        $r1 = r0.<org.apache.batik.css.engine.StyleMap: short[] masks>;

        $s1 = $r1[i0];

        $s8 = (short) -9;

        $s2 = $s1 & $s8;

        $s3 = (short) $s2;

        $r1[i0] = $s3;

     label2:
        return;
    }

    public void putColorRelative(int, boolean)
    {
        short $s1, $s2, $s3, $s4, $s5, $s6, $s8;
        org.apache.batik.css.engine.StyleMap r0;
        int i0;
        short[] $r1, $r2;
        boolean z0;

        r0 := @this: org.apache.batik.css.engine.StyleMap;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r2 = r0.<org.apache.batik.css.engine.StyleMap: short[] masks>;

        $s4 = $r2[i0];

        $s5 = $s4 | 64;

        $s6 = (short) $s5;

        $r2[i0] = $s6;

        goto label2;

     label1:
        $r1 = r0.<org.apache.batik.css.engine.StyleMap: short[] masks>;

        $s1 = $r1[i0];

        $s8 = (short) -65;

        $s2 = $s1 & $s8;

        $s3 = (short) $s2;

        $r1[i0] = $s3;

     label2:
        return;
    }

    public void putParentRelative(int, boolean)
    {
        short $s1, $s2, $s3, $s4, $s5, $s6;
        org.apache.batik.css.engine.StyleMap r0;
        int i0;
        short[] $r1, $r2;
        boolean z0;

        r0 := @this: org.apache.batik.css.engine.StyleMap;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r2 = r0.<org.apache.batik.css.engine.StyleMap: short[] masks>;

        $s4 = $r2[i0];

        $s5 = $s4 | 128;

        $s6 = (short) $s5;

        $r2[i0] = $s6;

        goto label2;

     label1:
        $r1 = r0.<org.apache.batik.css.engine.StyleMap: short[] masks>;

        $s1 = $r1[i0];

        $s2 = $s1 & -129;

        $s3 = (short) $s2;

        $r1[i0] = $s3;

     label2:
        return;
    }

    public void putLineHeightRelative(int, boolean)
    {
        short $s1, $s2, $s3, $s4, $s5, $s6, $s8;
        org.apache.batik.css.engine.StyleMap r0;
        int i0;
        short[] $r1, $r2;
        boolean z0;

        r0 := @this: org.apache.batik.css.engine.StyleMap;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r2 = r0.<org.apache.batik.css.engine.StyleMap: short[] masks>;

        $s4 = $r2[i0];

        $s5 = $s4 | 16;

        $s6 = (short) $s5;

        $r2[i0] = $s6;

        goto label2;

     label1:
        $r1 = r0.<org.apache.batik.css.engine.StyleMap: short[] masks>;

        $s1 = $r1[i0];

        $s8 = (short) -17;

        $s2 = $s1 & $s8;

        $s3 = (short) $s2;

        $r1[i0] = $s3;

     label2:
        return;
    }

    public void putFontSizeRelative(int, boolean)
    {
        short $s1, $s2, $s3, $s4, $s5, $s6, $s8;
        org.apache.batik.css.engine.StyleMap r0;
        int i0;
        short[] $r1, $r2;
        boolean z0;

        r0 := @this: org.apache.batik.css.engine.StyleMap;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r2 = r0.<org.apache.batik.css.engine.StyleMap: short[] masks>;

        $s4 = $r2[i0];

        $s5 = $s4 | 32;

        $s6 = (short) $s5;

        $r2[i0] = $s6;

        goto label2;

     label1:
        $r1 = r0.<org.apache.batik.css.engine.StyleMap: short[] masks>;

        $s1 = $r1[i0];

        $s8 = (short) -33;

        $s2 = $s1 & $s8;

        $s3 = (short) $s2;

        $r1[i0] = $s3;

     label2:
        return;
    }

    public void putBlockWidthRelative(int, boolean)
    {
        short $s1, $s2, $s3, $s4, $s5, $s6;
        org.apache.batik.css.engine.StyleMap r0;
        int i0;
        short[] $r1, $r2;
        boolean z0;

        r0 := @this: org.apache.batik.css.engine.StyleMap;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r2 = r0.<org.apache.batik.css.engine.StyleMap: short[] masks>;

        $s4 = $r2[i0];

        $s5 = $s4 | 256;

        $s6 = (short) $s5;

        $r2[i0] = $s6;

        goto label2;

     label1:
        $r1 = r0.<org.apache.batik.css.engine.StyleMap: short[] masks>;

        $s1 = $r1[i0];

        $s2 = $s1 & -257;

        $s3 = (short) $s2;

        $r1[i0] = $s3;

     label2:
        return;
    }

    public void putBlockHeightRelative(int, boolean)
    {
        short $s1, $s2, $s3, $s4, $s5, $s6;
        org.apache.batik.css.engine.StyleMap r0;
        int i0;
        short[] $r1, $r2;
        boolean z0;

        r0 := @this: org.apache.batik.css.engine.StyleMap;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r2 = r0.<org.apache.batik.css.engine.StyleMap: short[] masks>;

        $s4 = $r2[i0];

        $s5 = $s4 | 512;

        $s6 = (short) $s5;

        $r2[i0] = $s6;

        goto label2;

     label1:
        $r1 = r0.<org.apache.batik.css.engine.StyleMap: short[] masks>;

        $s1 = $r1[i0];

        $s2 = $s1 & -513;

        $s3 = (short) $s2;

        $r1[i0] = $s3;

     label2:
        return;
    }

    public java.lang.String toString(org.apache.batik.css.engine.CSSEngine)
    {
        org.apache.batik.css.engine.value.Value r4;
        org.apache.batik.css.engine.CSSEngine r5;
        java.lang.StringBuffer $r2;
        org.apache.batik.css.engine.StyleMap r0;
        int i0, $i1, i2;
        org.apache.batik.css.engine.value.Value[] $r1, $r3;
        java.lang.String $r6, $r7;
        boolean $z0;

        r0 := @this: org.apache.batik.css.engine.StyleMap;

        r5 := @parameter0: org.apache.batik.css.engine.CSSEngine;

        $r1 = r0.<org.apache.batik.css.engine.StyleMap: org.apache.batik.css.engine.value.Value[] values>;

        i0 = lengthof $r1;

        $r2 = new java.lang.StringBuffer;

        $i1 = i0 * 8;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>(int)>($i1);

        i2 = 0;

        goto label5;

     label1:
        $r3 = r0.<org.apache.batik.css.engine.StyleMap: org.apache.batik.css.engine.value.Value[] values>;

        r4 = $r3[i2];

        if r4 != null goto label2;

        goto label4;

     label2:
        $r6 = virtualinvoke r5.<org.apache.batik.css.engine.CSSEngine: java.lang.String getPropertyName(int)>(i2);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r4);

        $z0 = virtualinvoke r0.<org.apache.batik.css.engine.StyleMap: boolean isImportant(int)>(i2);

        if $z0 == 0 goto label3;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" !important");

     label3:
        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";\n");

     label4:
        i2 = i2 + 1;

     label5:
        if i2 < i0 goto label1;

        $r7 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;
    }

    public static void <clinit>()
    {
        <org.apache.batik.css.engine.StyleMap: short OVERRIDE_ORIGIN> = -24576;

        <org.apache.batik.css.engine.StyleMap: short INLINE_AUTHOR_ORIGIN> = -32768;

        <org.apache.batik.css.engine.StyleMap: short AUTHOR_ORIGIN> = 24576;

        <org.apache.batik.css.engine.StyleMap: short NON_CSS_ORIGIN> = 16384;

        <org.apache.batik.css.engine.StyleMap: short USER_ORIGIN> = 8192;

        <org.apache.batik.css.engine.StyleMap: short USER_AGENT_ORIGIN> = 0;

        <org.apache.batik.css.engine.StyleMap: short ORIGIN_MASK> = -8192;

        <org.apache.batik.css.engine.StyleMap: short BOX_RELATIVE_MASK> = 1024;

        <org.apache.batik.css.engine.StyleMap: short BLOCK_HEIGHT_RELATIVE_MASK> = 512;

        <org.apache.batik.css.engine.StyleMap: short BLOCK_WIDTH_RELATIVE_MASK> = 256;

        <org.apache.batik.css.engine.StyleMap: short PARENT_RELATIVE_MASK> = 128;

        <org.apache.batik.css.engine.StyleMap: short COLOR_RELATIVE_MASK> = 64;

        <org.apache.batik.css.engine.StyleMap: short FONT_SIZE_RELATIVE_MASK> = 32;

        <org.apache.batik.css.engine.StyleMap: short LINE_HEIGHT_RELATIVE_MASK> = 16;

        <org.apache.batik.css.engine.StyleMap: short INHERITED_MASK> = 8;

        <org.apache.batik.css.engine.StyleMap: short NULL_CASCADED_MASK> = 4;

        <org.apache.batik.css.engine.StyleMap: short COMPUTED_MASK> = 2;

        <org.apache.batik.css.engine.StyleMap: short IMPORTANT_MASK> = 1;

        return;
    }
}
