public abstract class org.apache.xmlbeans.impl.values.JavaDoubleHolder extends org.apache.xmlbeans.impl.values.XmlObjectBase
{
    double _value;

    public void <init>()
    {
        org.apache.xmlbeans.impl.values.JavaDoubleHolder r0;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaDoubleHolder;

        specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void <init>()>();

        return;
    }

    public org.apache.xmlbeans.SchemaType schemaType()
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl $r0;
        org.apache.xmlbeans.impl.values.JavaDoubleHolder r1;

        r1 := @this: org.apache.xmlbeans.impl.values.JavaDoubleHolder;

        $r0 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_DOUBLE>;

        return $r0;
    }

    protected java.lang.String compute_text(org.apache.xmlbeans.impl.values.NamespaceManager)
    {
        org.apache.xmlbeans.impl.values.JavaDoubleHolder r0;
        org.apache.xmlbeans.impl.values.NamespaceManager r2;
        java.lang.String $r1;
        double $d0;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaDoubleHolder;

        r2 := @parameter0: org.apache.xmlbeans.impl.values.NamespaceManager;

        $d0 = r0.<org.apache.xmlbeans.impl.values.JavaDoubleHolder: double _value>;

        $r1 = staticinvoke <org.apache.xmlbeans.impl.values.JavaDoubleHolder: java.lang.String serialize(double)>($d0);

        return $r1;
    }

    public static java.lang.String serialize(double)
    {
        byte $b0, $b1, $b2;
        java.lang.String $r0;
        double d0;

        d0 := @parameter0: double;

        $b0 = d0 cmpl #Infinity;

        if $b0 != 0 goto label1;

        return "INF";

     label1:
        $b1 = d0 cmpl #-Infinity;

        if $b1 != 0 goto label2;

        return "-INF";

     label2:
        $b2 = d0 cmpl #NaN;

        if $b2 != 0 goto label3;

        return "NaN";

     label3:
        $r0 = staticinvoke <java.lang.Double: java.lang.String toString(double)>(d0);

        return $r0;
    }

    protected void set_text(java.lang.String)
    {
        org.apache.xmlbeans.impl.common.ValidationContext $r2;
        org.apache.xmlbeans.impl.values.JavaDoubleHolder r0;
        java.lang.String r1;
        double $d0;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaDoubleHolder;

        r1 := @parameter0: java.lang.String;

        $r2 = <org.apache.xmlbeans.impl.values.JavaDoubleHolder: org.apache.xmlbeans.impl.common.ValidationContext _voorVc>;

        $d0 = staticinvoke <org.apache.xmlbeans.impl.values.JavaDoubleHolder: double validateLexical(java.lang.String,org.apache.xmlbeans.impl.common.ValidationContext)>(r1, $r2);

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.JavaDoubleHolder: void set_double(double)>($d0);

        return;
    }

    public static double validateLexical(java.lang.String, org.apache.xmlbeans.impl.common.ValidationContext)
    {
        java.lang.Object[] $r3;
        org.apache.xmlbeans.impl.common.ValidationContext r2;
        java.lang.NumberFormatException $r1;
        java.lang.String r0;
        double $d0;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.xmlbeans.impl.common.ValidationContext;

     label1:
        $d0 = staticinvoke <org.apache.xmlbeans.impl.util.XsTypeConverter: double lexDouble(java.lang.CharSequence)>(r0);

     label2:
        return $d0;

     label3:
        $r1 := @caughtexception;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r0;

        interfaceinvoke r2.<org.apache.xmlbeans.impl.common.ValidationContext: void invalid(java.lang.String,java.lang.Object[])>("double", $r3);

        return #NaN;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    protected void set_nil()
    {
        org.apache.xmlbeans.impl.values.JavaDoubleHolder r0;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaDoubleHolder;

        r0.<org.apache.xmlbeans.impl.values.JavaDoubleHolder: double _value> = 0.0;

        return;
    }

    public java.math.BigDecimal getBigDecimalValue()
    {
        java.math.BigDecimal $r1;
        org.apache.xmlbeans.impl.values.JavaDoubleHolder r0;
        double $d0;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaDoubleHolder;

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.JavaDoubleHolder: void check_dated()>();

        $r1 = new java.math.BigDecimal;

        $d0 = r0.<org.apache.xmlbeans.impl.values.JavaDoubleHolder: double _value>;

        specialinvoke $r1.<java.math.BigDecimal: void <init>(double)>($d0);

        return $r1;
    }

    public double getDoubleValue()
    {
        org.apache.xmlbeans.impl.values.JavaDoubleHolder r0;
        double $d0;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaDoubleHolder;

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.JavaDoubleHolder: void check_dated()>();

        $d0 = r0.<org.apache.xmlbeans.impl.values.JavaDoubleHolder: double _value>;

        return $d0;
    }

    public float getFloatValue()
    {
        float $f0;
        org.apache.xmlbeans.impl.values.JavaDoubleHolder r0;
        double $d0;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaDoubleHolder;

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.JavaDoubleHolder: void check_dated()>();

        $d0 = r0.<org.apache.xmlbeans.impl.values.JavaDoubleHolder: double _value>;

        $f0 = (float) $d0;

        return $f0;
    }

    protected void set_double(double)
    {
        org.apache.xmlbeans.impl.values.JavaDoubleHolder r0;
        double d0;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaDoubleHolder;

        d0 := @parameter0: double;

        r0.<org.apache.xmlbeans.impl.values.JavaDoubleHolder: double _value> = d0;

        return;
    }

    protected void set_float(float)
    {
        float f0;
        org.apache.xmlbeans.impl.values.JavaDoubleHolder r0;
        double $d0;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaDoubleHolder;

        f0 := @parameter0: float;

        $d0 = (double) f0;

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.JavaDoubleHolder: void set_double(double)>($d0);

        return;
    }

    protected void set_long(long)
    {
        long l0;
        org.apache.xmlbeans.impl.values.JavaDoubleHolder r0;
        double $d0;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaDoubleHolder;

        l0 := @parameter0: long;

        $d0 = (double) l0;

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.JavaDoubleHolder: void set_double(double)>($d0);

        return;
    }

    protected void set_BigDecimal(java.math.BigDecimal)
    {
        java.math.BigDecimal r1;
        org.apache.xmlbeans.impl.values.JavaDoubleHolder r0;
        double $d0;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaDoubleHolder;

        r1 := @parameter0: java.math.BigDecimal;

        $d0 = virtualinvoke r1.<java.math.BigDecimal: double doubleValue()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.JavaDoubleHolder: void set_double(double)>($d0);

        return;
    }

    protected void set_BigInteger(java.math.BigInteger)
    {
        java.math.BigInteger r1;
        org.apache.xmlbeans.impl.values.JavaDoubleHolder r0;
        double $d0;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaDoubleHolder;

        r1 := @parameter0: java.math.BigInteger;

        $d0 = virtualinvoke r1.<java.math.BigInteger: double doubleValue()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.JavaDoubleHolder: void set_double(double)>($d0);

        return;
    }

    protected int compare_to(org.apache.xmlbeans.XmlObject)
    {
        org.apache.xmlbeans.impl.values.JavaDoubleHolder r0;
        org.apache.xmlbeans.impl.values.XmlObjectBase $r2;
        int $i0;
        org.apache.xmlbeans.XmlObject r1;
        double $d0, $d1;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaDoubleHolder;

        r1 := @parameter0: org.apache.xmlbeans.XmlObject;

        $d0 = r0.<org.apache.xmlbeans.impl.values.JavaDoubleHolder: double _value>;

        $r2 = (org.apache.xmlbeans.impl.values.XmlObjectBase) r1;

        $d1 = virtualinvoke $r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: double doubleValue()>();

        $i0 = staticinvoke <org.apache.xmlbeans.impl.values.JavaDoubleHolder: int compare(double,double)>($d0, $d1);

        return $i0;
    }

    static int compare(double, double)
    {
        long $l2, $l3;
        byte $b0, $b1, $b4, $b5, $b6;
        int $i7, $i9, $i10, $i11;
        double d0, d1;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $b0 = d0 cmpg d1;

        $i7 = (int) $b0;

        if $i7 >= 0 goto label1;

        $i9 = (int) -1;

        return $i9;

     label1:
        $b1 = d0 cmpl d1;

        $i10 = (int) $b1;

        if $i10 <= 0 goto label2;

        return 1;

     label2:
        $l2 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0);

        $l3 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d1);

        $b4 = $l2 cmp $l3;

        if $b4 != 0 goto label3;

        $b6 = 0;

        goto label5;

     label3:
        $b5 = $l2 cmp $l3;

        $i11 = (int) $b5;

        if $i11 >= 0 goto label4;

        $b6 = -1;

        goto label5;

     label4:
        $b6 = 1;

     label5:
        return $b6;
    }

    protected boolean equal_to(org.apache.xmlbeans.XmlObject)
    {
        org.apache.xmlbeans.impl.values.JavaDoubleHolder r0;
        org.apache.xmlbeans.impl.values.XmlObjectBase $r2;
        int $i0;
        org.apache.xmlbeans.XmlObject r1;
        double $d0, $d1;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaDoubleHolder;

        r1 := @parameter0: org.apache.xmlbeans.XmlObject;

        $d0 = r0.<org.apache.xmlbeans.impl.values.JavaDoubleHolder: double _value>;

        $r2 = (org.apache.xmlbeans.impl.values.XmlObjectBase) r1;

        $d1 = virtualinvoke $r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: double doubleValue()>();

        $i0 = staticinvoke <org.apache.xmlbeans.impl.values.JavaDoubleHolder: int compare(double,double)>($d0, $d1);

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected int value_hash_code()
    {
        org.apache.xmlbeans.impl.values.JavaDoubleHolder r0;
        int $i4;
        long $l0, $l1, $l2, $l3;
        double $d0;

        r0 := @this: org.apache.xmlbeans.impl.values.JavaDoubleHolder;

        $d0 = r0.<org.apache.xmlbeans.impl.values.JavaDoubleHolder: double _value>;

        $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $l1 = $l0 >> 32;

        $l2 = $l1 * 19L;

        $l3 = $l2 + $l0;

        $i4 = (int) $l3;

        return $i4;
    }
}
