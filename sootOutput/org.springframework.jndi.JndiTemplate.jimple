public class org.springframework.jndi.JndiTemplate extends java.lang.Object
{
    protected final org.apache.commons.logging.Log logger;
    private java.util.Properties environment;

    public void <init>()
    {
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;
        org.springframework.jndi.JndiTemplate r0;

        r0 := @this: org.springframework.jndi.JndiTemplate;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.springframework.jndi.JndiTemplate: org.apache.commons.logging.Log logger> = $r2;

        return;
    }

    public void <init>(java.util.Properties)
    {
        java.util.Properties r3;
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;
        org.springframework.jndi.JndiTemplate r0;

        r0 := @this: org.springframework.jndi.JndiTemplate;

        r3 := @parameter0: java.util.Properties;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.springframework.jndi.JndiTemplate: org.apache.commons.logging.Log logger> = $r2;

        r0.<org.springframework.jndi.JndiTemplate: java.util.Properties environment> = r3;

        return;
    }

    public void setEnvironment(java.util.Properties)
    {
        java.util.Properties r1;
        org.springframework.jndi.JndiTemplate r0;

        r0 := @this: org.springframework.jndi.JndiTemplate;

        r1 := @parameter0: java.util.Properties;

        r0.<org.springframework.jndi.JndiTemplate: java.util.Properties environment> = r1;

        return;
    }

    public java.util.Properties getEnvironment()
    {
        java.util.Properties $r1;
        org.springframework.jndi.JndiTemplate r0;

        r0 := @this: org.springframework.jndi.JndiTemplate;

        $r1 = r0.<org.springframework.jndi.JndiTemplate: java.util.Properties environment>;

        return $r1;
    }

    public java.lang.Object execute(org.springframework.jndi.JndiCallback) throws javax.naming.NamingException
    {
        java.lang.Throwable $r4;
        org.springframework.jndi.JndiCallback r2;
        java.lang.Object $r3;
        javax.naming.Context $r1;
        org.springframework.jndi.JndiTemplate r0;

        r0 := @this: org.springframework.jndi.JndiTemplate;

        r2 := @parameter0: org.springframework.jndi.JndiCallback;

        $r1 = virtualinvoke r0.<org.springframework.jndi.JndiTemplate: javax.naming.Context getContext()>();

     label1:
        $r3 = interfaceinvoke r2.<org.springframework.jndi.JndiCallback: java.lang.Object doInContext(javax.naming.Context)>($r1);

     label2:
        virtualinvoke r0.<org.springframework.jndi.JndiTemplate: void releaseContext(javax.naming.Context)>($r1);

        return $r3;

     label3:
        $r4 := @caughtexception;

        virtualinvoke r0.<org.springframework.jndi.JndiTemplate: void releaseContext(javax.naming.Context)>($r1);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public javax.naming.Context getContext() throws javax.naming.NamingException
    {
        javax.naming.Context $r1;
        org.springframework.jndi.JndiTemplate r0;

        r0 := @this: org.springframework.jndi.JndiTemplate;

        $r1 = virtualinvoke r0.<org.springframework.jndi.JndiTemplate: javax.naming.Context createInitialContext()>();

        return $r1;
    }

    public void releaseContext(javax.naming.Context)
    {
        org.apache.commons.logging.Log $r3;
        javax.naming.Context r0;
        javax.naming.NamingException $r1;
        org.springframework.jndi.JndiTemplate r2;

        r2 := @this: org.springframework.jndi.JndiTemplate;

        r0 := @parameter0: javax.naming.Context;

        if r0 == null goto label4;

     label1:
        interfaceinvoke r0.<javax.naming.Context: void close()>();

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        $r3 = r2.<org.springframework.jndi.JndiTemplate: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("Could not close JNDI InitialContext", $r1);

     label4:
        return;

        catch javax.naming.NamingException from label1 to label2 with label3;
    }

    protected javax.naming.Context createInitialContext() throws javax.naming.NamingException
    {
        javax.naming.InitialContext $r2;
        java.util.Properties $r1;
        int $i0;
        org.springframework.jndi.JndiTemplate r0;
        java.util.Hashtable $r3, r4;

        r0 := @this: org.springframework.jndi.JndiTemplate;

        r4 = null;

        $r1 = virtualinvoke r0.<org.springframework.jndi.JndiTemplate: java.util.Properties getEnvironment()>();

        if $r1 == null goto label1;

        $r3 = new java.util.Hashtable;

        $i0 = virtualinvoke $r1.<java.util.Properties: int size()>();

        specialinvoke $r3.<java.util.Hashtable: void <init>(int)>($i0);

        r4 = $r3;

        staticinvoke <org.springframework.util.CollectionUtils: void mergePropertiesIntoMap(java.util.Properties,java.util.Map)>($r1, $r3);

     label1:
        $r2 = new javax.naming.InitialContext;

        specialinvoke $r2.<javax.naming.InitialContext: void <init>(java.util.Hashtable)>(r4);

        return $r2;
    }

    public java.lang.Object lookup(java.lang.String) throws javax.naming.NamingException
    {
        org.springframework.jndi.JndiTemplate r0;
        org.springframework.jndi.JndiTemplate$1 $r2;
        org.apache.commons.logging.Log $r1, $r6;
        java.lang.Object $r4;
        java.lang.StringBuilder $r5, $r7, $r8;
        java.lang.String r3, $r9;
        boolean $z0;

        r0 := @this: org.springframework.jndi.JndiTemplate;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<org.springframework.jndi.JndiTemplate: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r1.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r6 = r0.<org.springframework.jndi.JndiTemplate: org.apache.commons.logging.Log logger>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Looking up JNDI object with name [");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r9);

     label1:
        $r2 = new org.springframework.jndi.JndiTemplate$1;

        specialinvoke $r2.<org.springframework.jndi.JndiTemplate$1: void <init>(org.springframework.jndi.JndiTemplate,java.lang.String)>(r0, r3);

        $r4 = virtualinvoke r0.<org.springframework.jndi.JndiTemplate: java.lang.Object execute(org.springframework.jndi.JndiCallback)>($r2);

        return $r4;
    }

    public java.lang.Object lookup(java.lang.String, java.lang.Class) throws javax.naming.NamingException
    {
        org.springframework.jndi.TypeMismatchNamingException $r4;
        java.lang.Object $r2;
        java.lang.Class r3, $r5;
        java.lang.String r1;
        org.springframework.jndi.JndiTemplate r0;
        boolean $z0;

        r0 := @this: org.springframework.jndi.JndiTemplate;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Class;

        $r2 = virtualinvoke r0.<org.springframework.jndi.JndiTemplate: java.lang.Object lookup(java.lang.String)>(r1);

        if r3 == null goto label3;

        $z0 = virtualinvoke r3.<java.lang.Class: boolean isInstance(java.lang.Object)>($r2);

        if $z0 != 0 goto label3;

        $r4 = new org.springframework.jndi.TypeMismatchNamingException;

        if $r2 == null goto label1;

        $r5 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        goto label2;

     label1:
        $r5 = null;

     label2:
        specialinvoke $r4.<org.springframework.jndi.TypeMismatchNamingException: void <init>(java.lang.String,java.lang.Class,java.lang.Class)>(r1, r3, $r5);

        throw $r4;

     label3:
        return $r2;
    }

    public void bind(java.lang.String, java.lang.Object) throws javax.naming.NamingException
    {
        org.springframework.jndi.JndiTemplate r0;
        org.springframework.jndi.JndiTemplate$2 $r2;
        org.apache.commons.logging.Log $r1, $r6;
        java.lang.Object r4;
        java.lang.StringBuilder $r5, $r7, $r8;
        java.lang.String r3, $r9;
        boolean $z0;

        r0 := @this: org.springframework.jndi.JndiTemplate;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.Object;

        $r1 = r0.<org.springframework.jndi.JndiTemplate: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r1.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r6 = r0.<org.springframework.jndi.JndiTemplate: org.apache.commons.logging.Log logger>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Binding JNDI object with name [");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r9);

     label1:
        $r2 = new org.springframework.jndi.JndiTemplate$2;

        specialinvoke $r2.<org.springframework.jndi.JndiTemplate$2: void <init>(org.springframework.jndi.JndiTemplate,java.lang.String,java.lang.Object)>(r0, r3, r4);

        virtualinvoke r0.<org.springframework.jndi.JndiTemplate: java.lang.Object execute(org.springframework.jndi.JndiCallback)>($r2);

        return;
    }

    public void rebind(java.lang.String, java.lang.Object) throws javax.naming.NamingException
    {
        org.springframework.jndi.JndiTemplate$3 $r2;
        org.springframework.jndi.JndiTemplate r0;
        org.apache.commons.logging.Log $r1, $r6;
        java.lang.Object r4;
        java.lang.StringBuilder $r5, $r7, $r8;
        java.lang.String r3, $r9;
        boolean $z0;

        r0 := @this: org.springframework.jndi.JndiTemplate;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.Object;

        $r1 = r0.<org.springframework.jndi.JndiTemplate: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r1.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r6 = r0.<org.springframework.jndi.JndiTemplate: org.apache.commons.logging.Log logger>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Rebinding JNDI object with name [");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r9);

     label1:
        $r2 = new org.springframework.jndi.JndiTemplate$3;

        specialinvoke $r2.<org.springframework.jndi.JndiTemplate$3: void <init>(org.springframework.jndi.JndiTemplate,java.lang.String,java.lang.Object)>(r0, r3, r4);

        virtualinvoke r0.<org.springframework.jndi.JndiTemplate: java.lang.Object execute(org.springframework.jndi.JndiCallback)>($r2);

        return;
    }

    public void unbind(java.lang.String) throws javax.naming.NamingException
    {
        org.springframework.jndi.JndiTemplate$4 $r2;
        org.springframework.jndi.JndiTemplate r0;
        org.apache.commons.logging.Log $r1, $r5;
        java.lang.StringBuilder $r4, $r6, $r7;
        java.lang.String r3, $r8;
        boolean $z0;

        r0 := @this: org.springframework.jndi.JndiTemplate;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<org.springframework.jndi.JndiTemplate: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r1.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r5 = r0.<org.springframework.jndi.JndiTemplate: org.apache.commons.logging.Log logger>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unbinding JNDI object with name [");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r8);

     label1:
        $r2 = new org.springframework.jndi.JndiTemplate$4;

        specialinvoke $r2.<org.springframework.jndi.JndiTemplate$4: void <init>(org.springframework.jndi.JndiTemplate,java.lang.String)>(r0, r3);

        virtualinvoke r0.<org.springframework.jndi.JndiTemplate: java.lang.Object execute(org.springframework.jndi.JndiCallback)>($r2);

        return;
    }
}
