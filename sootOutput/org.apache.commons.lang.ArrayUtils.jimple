public class org.apache.commons.lang.ArrayUtils extends java.lang.Object
{
    public static final java.lang.Object[] EMPTY_OBJECT_ARRAY;
    public static final java.lang.Class[] EMPTY_CLASS_ARRAY;
    public static final java.lang.String[] EMPTY_STRING_ARRAY;
    public static final long[] EMPTY_LONG_ARRAY;
    public static final java.lang.Long[] EMPTY_LONG_OBJECT_ARRAY;
    public static final int[] EMPTY_INT_ARRAY;
    public static final java.lang.Integer[] EMPTY_INTEGER_OBJECT_ARRAY;
    public static final short[] EMPTY_SHORT_ARRAY;
    public static final java.lang.Short[] EMPTY_SHORT_OBJECT_ARRAY;
    public static final byte[] EMPTY_BYTE_ARRAY;
    public static final java.lang.Byte[] EMPTY_BYTE_OBJECT_ARRAY;
    public static final double[] EMPTY_DOUBLE_ARRAY;
    public static final java.lang.Double[] EMPTY_DOUBLE_OBJECT_ARRAY;
    public static final float[] EMPTY_FLOAT_ARRAY;
    public static final java.lang.Float[] EMPTY_FLOAT_OBJECT_ARRAY;
    public static final boolean[] EMPTY_BOOLEAN_ARRAY;
    public static final java.lang.Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY;
    public static final char[] EMPTY_CHAR_ARRAY;
    public static final java.lang.Character[] EMPTY_CHARACTER_OBJECT_ARRAY;
    public static final int INDEX_NOT_FOUND;
    static java.lang.Class class$java$lang$Object;

    public void <init>()
    {
        org.apache.commons.lang.ArrayUtils r0;

        r0 := @this: org.apache.commons.lang.ArrayUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String toString(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.String $r1;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <org.apache.commons.lang.ArrayUtils: java.lang.String toString(java.lang.Object,java.lang.String)>(r0, "{}");

        return $r1;
    }

    public static java.lang.String toString(java.lang.Object, java.lang.String)
    {
        org.apache.commons.lang.builder.ToStringStyle $r2;
        org.apache.commons.lang.builder.ToStringBuilder $r1, $r3;
        java.lang.Object r0;
        java.lang.String $r4, r5;

        r0 := @parameter0: java.lang.Object;

        r5 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        return r5;

     label1:
        $r1 = new org.apache.commons.lang.builder.ToStringBuilder;

        $r2 = <org.apache.commons.lang.builder.ToStringStyle: org.apache.commons.lang.builder.ToStringStyle SIMPLE_STYLE>;

        specialinvoke $r1.<org.apache.commons.lang.builder.ToStringBuilder: void <init>(java.lang.Object,org.apache.commons.lang.builder.ToStringStyle)>(r0, $r2);

        $r3 = virtualinvoke $r1.<org.apache.commons.lang.builder.ToStringBuilder: org.apache.commons.lang.builder.ToStringBuilder append(java.lang.Object)>(r0);

        $r4 = virtualinvoke $r3.<org.apache.commons.lang.builder.ToStringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public static int hashCode(java.lang.Object)
    {
        int $i0;
        org.apache.commons.lang.builder.HashCodeBuilder $r0, $r2;
        java.lang.Object r1;

        r1 := @parameter0: java.lang.Object;

        $r0 = new org.apache.commons.lang.builder.HashCodeBuilder;

        specialinvoke $r0.<org.apache.commons.lang.builder.HashCodeBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<org.apache.commons.lang.builder.HashCodeBuilder: org.apache.commons.lang.builder.HashCodeBuilder append(java.lang.Object)>(r1);

        $i0 = virtualinvoke $r2.<org.apache.commons.lang.builder.HashCodeBuilder: int toHashCode()>();

        return $i0;
    }

    public static boolean isEquals(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.lang.builder.EqualsBuilder $r0, $r3;
        java.lang.Object r1, r2;
        boolean $z0;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r0 = new org.apache.commons.lang.builder.EqualsBuilder;

        specialinvoke $r0.<org.apache.commons.lang.builder.EqualsBuilder: void <init>()>();

        $r3 = virtualinvoke $r0.<org.apache.commons.lang.builder.EqualsBuilder: org.apache.commons.lang.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)>(r1, r2);

        $z0 = virtualinvoke $r3.<org.apache.commons.lang.builder.EqualsBuilder: boolean isEquals()>();

        return $z0;
    }

    public static java.util.Map toMap(java.lang.Object[])
    {
        boolean $z0, $z1;
        java.lang.Object[] r0, r24;
        java.util.HashMap $r1;
        java.lang.StringBuffer $r4, $r5, $r6, $r7, $r8, $r9, $r14, $r15, $r16, $r17, $r18, $r19;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String $r10, $r20;
        double $d0, $d1;
        java.util.Map$Entry r23;
        java.lang.IllegalArgumentException $r3, $r13;
        java.lang.Object r2, $r11, $r12, $r21, $r22;

        r0 := @parameter0: java.lang.Object[];

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new java.util.HashMap;

        $i0 = lengthof r0;

        $d0 = (double) $i0;

        $d1 = $d0 * 1.5;

        $i1 = (int) $d1;

        specialinvoke $r1.<java.util.HashMap: void <init>(int)>($i1);

        i4 = 0;

     label2:
        $i2 = lengthof r0;

        if i4 >= $i2 goto label7;

        r2 = r0[i4];

        $z0 = r2 instanceof java.util.Map$Entry;

        if $z0 == 0 goto label3;

        r23 = (java.util.Map$Entry) r2;

        $r21 = interfaceinvoke r23.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r22 = interfaceinvoke r23.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r21, $r22);

        goto label6;

     label3:
        $z1 = r2 instanceof java.lang.Object[];

        if $z1 == 0 goto label5;

        r24 = (java.lang.Object[]) r2;

        $i3 = lengthof r24;

        if $i3 >= 2 goto label4;

        $r13 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Array element ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i4);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", \'");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r2);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\', has a length less than 2");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r20);

        throw $r13;

     label4:
        $r12 = r24[0];

        $r11 = r24[1];

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r11);

        goto label6;

     label5:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Array element ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i4);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\', is neither of type Map.Entry nor an Array");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r3;

     label6:
        i4 = i4 + 1;

        goto label2;

     label7:
        return $r1;
    }

    public static java.lang.Object[] clone(java.lang.Object[])
    {
        java.lang.Object $r1;
        java.lang.Object[] r0, $r2;

        r0 := @parameter0: java.lang.Object[];

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (java.lang.Object[]) $r1;

        return $r2;
    }

    public static long[] clone(long[])
    {
        java.lang.Object $r1;
        long[] r0, $r2;

        r0 := @parameter0: long[];

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (long[]) $r1;

        return $r2;
    }

    public static int[] clone(int[])
    {
        java.lang.Object $r1;
        int[] r0, $r2;

        r0 := @parameter0: int[];

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (int[]) $r1;

        return $r2;
    }

    public static short[] clone(short[])
    {
        java.lang.Object $r1;
        short[] r0, $r2;

        r0 := @parameter0: short[];

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (short[]) $r1;

        return $r2;
    }

    public static char[] clone(char[])
    {
        char[] r0, $r2;
        java.lang.Object $r1;

        r0 := @parameter0: char[];

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (char[]) $r1;

        return $r2;
    }

    public static byte[] clone(byte[])
    {
        byte[] r0, $r2;
        java.lang.Object $r1;

        r0 := @parameter0: byte[];

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (byte[]) $r1;

        return $r2;
    }

    public static double[] clone(double[])
    {
        double[] r0, $r2;
        java.lang.Object $r1;

        r0 := @parameter0: double[];

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (double[]) $r1;

        return $r2;
    }

    public static float[] clone(float[])
    {
        float[] r0, $r2;
        java.lang.Object $r1;

        r0 := @parameter0: float[];

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (float[]) $r1;

        return $r2;
    }

    public static boolean[] clone(boolean[])
    {
        boolean[] r0, $r2;
        java.lang.Object $r1;

        r0 := @parameter0: boolean[];

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (boolean[]) $r1;

        return $r2;
    }

    public static java.lang.Object[] subarray(java.lang.Object[], int, int)
    {
        java.lang.Object[] r0, r4, $r6;
        int $i0, $i1, i2, i3;
        java.lang.Class $r1, $r2;
        java.lang.Object $r3, $r5;

        r0 := @parameter0: java.lang.Object[];

        i2 := @parameter1: int;

        i3 := @parameter2: int;

        if r0 != null goto label1;

        return null;

     label1:
        if i2 >= 0 goto label2;

        i2 = 0;

     label2:
        $i0 = lengthof r0;

        if i3 <= $i0 goto label3;

        i3 = lengthof r0;

     label3:
        $i1 = i3 - i2;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Class getComponentType()>();

        if $i1 > 0 goto label4;

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r2, 0);

        $r6 = (java.lang.Object[]) $r5;

        return $r6;

     label4:
        $r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r2, $i1);

        r4 = (java.lang.Object[]) $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i2, r4, 0, $i1);

        return r4;
    }

    public static long[] subarray(long[], int, int)
    {
        long[] r0, r1, $r2;
        int $i0, $i1, i2, i3;

        r0 := @parameter0: long[];

        i2 := @parameter1: int;

        i3 := @parameter2: int;

        if r0 != null goto label1;

        return null;

     label1:
        if i2 >= 0 goto label2;

        i2 = 0;

     label2:
        $i0 = lengthof r0;

        if i3 <= $i0 goto label3;

        i3 = lengthof r0;

     label3:
        $i1 = i3 - i2;

        if $i1 > 0 goto label4;

        $r2 = <org.apache.commons.lang.ArrayUtils: long[] EMPTY_LONG_ARRAY>;

        return $r2;

     label4:
        r1 = newarray (long)[$i1];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i2, r1, 0, $i1);

        return r1;
    }

    public static int[] subarray(int[], int, int)
    {
        int[] r0, r1, $r2;
        int $i0, $i1, i2, i3;

        r0 := @parameter0: int[];

        i2 := @parameter1: int;

        i3 := @parameter2: int;

        if r0 != null goto label1;

        return null;

     label1:
        if i2 >= 0 goto label2;

        i2 = 0;

     label2:
        $i0 = lengthof r0;

        if i3 <= $i0 goto label3;

        i3 = lengthof r0;

     label3:
        $i1 = i3 - i2;

        if $i1 > 0 goto label4;

        $r2 = <org.apache.commons.lang.ArrayUtils: int[] EMPTY_INT_ARRAY>;

        return $r2;

     label4:
        r1 = newarray (int)[$i1];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i2, r1, 0, $i1);

        return r1;
    }

    public static short[] subarray(short[], int, int)
    {
        int $i0, $i1, i2, i3;
        short[] r0, r1, $r2;

        r0 := @parameter0: short[];

        i2 := @parameter1: int;

        i3 := @parameter2: int;

        if r0 != null goto label1;

        return null;

     label1:
        if i2 >= 0 goto label2;

        i2 = 0;

     label2:
        $i0 = lengthof r0;

        if i3 <= $i0 goto label3;

        i3 = lengthof r0;

     label3:
        $i1 = i3 - i2;

        if $i1 > 0 goto label4;

        $r2 = <org.apache.commons.lang.ArrayUtils: short[] EMPTY_SHORT_ARRAY>;

        return $r2;

     label4:
        r1 = newarray (short)[$i1];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i2, r1, 0, $i1);

        return r1;
    }

    public static char[] subarray(char[], int, int)
    {
        int $i0, $i1, i2, i3;
        char[] r0, r1, $r2;

        r0 := @parameter0: char[];

        i2 := @parameter1: int;

        i3 := @parameter2: int;

        if r0 != null goto label1;

        return null;

     label1:
        if i2 >= 0 goto label2;

        i2 = 0;

     label2:
        $i0 = lengthof r0;

        if i3 <= $i0 goto label3;

        i3 = lengthof r0;

     label3:
        $i1 = i3 - i2;

        if $i1 > 0 goto label4;

        $r2 = <org.apache.commons.lang.ArrayUtils: char[] EMPTY_CHAR_ARRAY>;

        return $r2;

     label4:
        r1 = newarray (char)[$i1];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i2, r1, 0, $i1);

        return r1;
    }

    public static byte[] subarray(byte[], int, int)
    {
        byte[] r0, r1, $r2;
        int $i0, $i1, i2, i3;

        r0 := @parameter0: byte[];

        i2 := @parameter1: int;

        i3 := @parameter2: int;

        if r0 != null goto label1;

        return null;

     label1:
        if i2 >= 0 goto label2;

        i2 = 0;

     label2:
        $i0 = lengthof r0;

        if i3 <= $i0 goto label3;

        i3 = lengthof r0;

     label3:
        $i1 = i3 - i2;

        if $i1 > 0 goto label4;

        $r2 = <org.apache.commons.lang.ArrayUtils: byte[] EMPTY_BYTE_ARRAY>;

        return $r2;

     label4:
        r1 = newarray (byte)[$i1];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i2, r1, 0, $i1);

        return r1;
    }

    public static double[] subarray(double[], int, int)
    {
        double[] r0, r1, $r2;
        int $i0, $i1, i2, i3;

        r0 := @parameter0: double[];

        i2 := @parameter1: int;

        i3 := @parameter2: int;

        if r0 != null goto label1;

        return null;

     label1:
        if i2 >= 0 goto label2;

        i2 = 0;

     label2:
        $i0 = lengthof r0;

        if i3 <= $i0 goto label3;

        i3 = lengthof r0;

     label3:
        $i1 = i3 - i2;

        if $i1 > 0 goto label4;

        $r2 = <org.apache.commons.lang.ArrayUtils: double[] EMPTY_DOUBLE_ARRAY>;

        return $r2;

     label4:
        r1 = newarray (double)[$i1];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i2, r1, 0, $i1);

        return r1;
    }

    public static float[] subarray(float[], int, int)
    {
        int $i0, $i1, i2, i3;
        float[] r0, r1, $r2;

        r0 := @parameter0: float[];

        i2 := @parameter1: int;

        i3 := @parameter2: int;

        if r0 != null goto label1;

        return null;

     label1:
        if i2 >= 0 goto label2;

        i2 = 0;

     label2:
        $i0 = lengthof r0;

        if i3 <= $i0 goto label3;

        i3 = lengthof r0;

     label3:
        $i1 = i3 - i2;

        if $i1 > 0 goto label4;

        $r2 = <org.apache.commons.lang.ArrayUtils: float[] EMPTY_FLOAT_ARRAY>;

        return $r2;

     label4:
        r1 = newarray (float)[$i1];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i2, r1, 0, $i1);

        return r1;
    }

    public static boolean[] subarray(boolean[], int, int)
    {
        boolean[] r0, r1, $r2;
        int $i0, $i1, i2, i3;

        r0 := @parameter0: boolean[];

        i2 := @parameter1: int;

        i3 := @parameter2: int;

        if r0 != null goto label1;

        return null;

     label1:
        if i2 >= 0 goto label2;

        i2 = 0;

     label2:
        $i0 = lengthof r0;

        if i3 <= $i0 goto label3;

        i3 = lengthof r0;

     label3:
        $i1 = i3 - i2;

        if $i1 > 0 goto label4;

        $r2 = <org.apache.commons.lang.ArrayUtils: boolean[] EMPTY_BOOLEAN_ARRAY>;

        return $r2;

     label4:
        r1 = newarray (boolean)[$i1];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i2, r1, 0, $i1);

        return r1;
    }

    public static boolean isSameLength(java.lang.Object[], java.lang.Object[])
    {
        java.lang.Object[] r0, r1;
        int $i0, $i1, $i2, $i3;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.Object[];

        if r0 != null goto label1;

        if r1 == null goto label1;

        $i3 = lengthof r1;

        if $i3 > 0 goto label3;

     label1:
        if r1 != null goto label2;

        if r0 == null goto label2;

        $i2 = lengthof r0;

        if $i2 > 0 goto label3;

     label2:
        if r0 == null goto label4;

        if r1 == null goto label4;

        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 == $i0 goto label4;

     label3:
        return 0;

     label4:
        return 1;
    }

    public static boolean isSameLength(long[], long[])
    {
        long[] r0, r1;
        int $i0, $i1, $i2, $i3;

        r0 := @parameter0: long[];

        r1 := @parameter1: long[];

        if r0 != null goto label1;

        if r1 == null goto label1;

        $i3 = lengthof r1;

        if $i3 > 0 goto label3;

     label1:
        if r1 != null goto label2;

        if r0 == null goto label2;

        $i2 = lengthof r0;

        if $i2 > 0 goto label3;

     label2:
        if r0 == null goto label4;

        if r1 == null goto label4;

        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 == $i0 goto label4;

     label3:
        return 0;

     label4:
        return 1;
    }

    public static boolean isSameLength(int[], int[])
    {
        int[] r0, r1;
        int $i0, $i1, $i2, $i3;

        r0 := @parameter0: int[];

        r1 := @parameter1: int[];

        if r0 != null goto label1;

        if r1 == null goto label1;

        $i3 = lengthof r1;

        if $i3 > 0 goto label3;

     label1:
        if r1 != null goto label2;

        if r0 == null goto label2;

        $i2 = lengthof r0;

        if $i2 > 0 goto label3;

     label2:
        if r0 == null goto label4;

        if r1 == null goto label4;

        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 == $i0 goto label4;

     label3:
        return 0;

     label4:
        return 1;
    }

    public static boolean isSameLength(short[], short[])
    {
        int $i0, $i1, $i2, $i3;
        short[] r0, r1;

        r0 := @parameter0: short[];

        r1 := @parameter1: short[];

        if r0 != null goto label1;

        if r1 == null goto label1;

        $i3 = lengthof r1;

        if $i3 > 0 goto label3;

     label1:
        if r1 != null goto label2;

        if r0 == null goto label2;

        $i2 = lengthof r0;

        if $i2 > 0 goto label3;

     label2:
        if r0 == null goto label4;

        if r1 == null goto label4;

        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 == $i0 goto label4;

     label3:
        return 0;

     label4:
        return 1;
    }

    public static boolean isSameLength(char[], char[])
    {
        int $i0, $i1, $i2, $i3;
        char[] r0, r1;

        r0 := @parameter0: char[];

        r1 := @parameter1: char[];

        if r0 != null goto label1;

        if r1 == null goto label1;

        $i3 = lengthof r1;

        if $i3 > 0 goto label3;

     label1:
        if r1 != null goto label2;

        if r0 == null goto label2;

        $i2 = lengthof r0;

        if $i2 > 0 goto label3;

     label2:
        if r0 == null goto label4;

        if r1 == null goto label4;

        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 == $i0 goto label4;

     label3:
        return 0;

     label4:
        return 1;
    }

    public static boolean isSameLength(byte[], byte[])
    {
        byte[] r0, r1;
        int $i0, $i1, $i2, $i3;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        if r0 != null goto label1;

        if r1 == null goto label1;

        $i3 = lengthof r1;

        if $i3 > 0 goto label3;

     label1:
        if r1 != null goto label2;

        if r0 == null goto label2;

        $i2 = lengthof r0;

        if $i2 > 0 goto label3;

     label2:
        if r0 == null goto label4;

        if r1 == null goto label4;

        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 == $i0 goto label4;

     label3:
        return 0;

     label4:
        return 1;
    }

    public static boolean isSameLength(double[], double[])
    {
        double[] r0, r1;
        int $i0, $i1, $i2, $i3;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        if r0 != null goto label1;

        if r1 == null goto label1;

        $i3 = lengthof r1;

        if $i3 > 0 goto label3;

     label1:
        if r1 != null goto label2;

        if r0 == null goto label2;

        $i2 = lengthof r0;

        if $i2 > 0 goto label3;

     label2:
        if r0 == null goto label4;

        if r1 == null goto label4;

        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 == $i0 goto label4;

     label3:
        return 0;

     label4:
        return 1;
    }

    public static boolean isSameLength(float[], float[])
    {
        int $i0, $i1, $i2, $i3;
        float[] r0, r1;

        r0 := @parameter0: float[];

        r1 := @parameter1: float[];

        if r0 != null goto label1;

        if r1 == null goto label1;

        $i3 = lengthof r1;

        if $i3 > 0 goto label3;

     label1:
        if r1 != null goto label2;

        if r0 == null goto label2;

        $i2 = lengthof r0;

        if $i2 > 0 goto label3;

     label2:
        if r0 == null goto label4;

        if r1 == null goto label4;

        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 == $i0 goto label4;

     label3:
        return 0;

     label4:
        return 1;
    }

    public static boolean isSameLength(boolean[], boolean[])
    {
        boolean[] r0, r1;
        int $i0, $i1, $i2, $i3;

        r0 := @parameter0: boolean[];

        r1 := @parameter1: boolean[];

        if r0 != null goto label1;

        if r1 == null goto label1;

        $i3 = lengthof r1;

        if $i3 > 0 goto label3;

     label1:
        if r1 != null goto label2;

        if r0 == null goto label2;

        $i2 = lengthof r0;

        if $i2 > 0 goto label3;

     label2:
        if r0 == null goto label4;

        if r1 == null goto label4;

        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 == $i0 goto label4;

     label3:
        return 0;

     label4:
        return 1;
    }

    public static int getLength(java.lang.Object)
    {
        int $i0;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return 0;

     label1:
        $i0 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r0);

        return $i0;
    }

    public static boolean isSameType(java.lang.Object, java.lang.Object)
    {
        java.lang.IllegalArgumentException $r1;
        java.lang.Object r0, r2;
        java.lang.Class $r3, $r5;
        java.lang.String $r4, $r6;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        if r0 == null goto label1;

        if r2 != null goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The Array must not be null");

        throw $r1;

     label2:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        return $z0;
    }

    public static void reverse(java.lang.Object[])
    {
        java.lang.Object[] r0;
        int $i0, i1, i2, $i4;
        java.lang.Object r1, $r2;

        r0 := @parameter0: java.lang.Object[];

        if r0 != null goto label1;

        return;

     label1:
        i1 = 0;

        $i0 = lengthof r0;

        i2 = $i0 - 1;

     label2:
        if i2 <= i1 goto label3;

        r1 = r0[i2];

        $r2 = r0[i1];

        r0[i2] = $r2;

        r0[i1] = r1;

        $i4 = (int) -1;

        i2 = i2 + $i4;

        i1 = i1 + 1;

        goto label2;

     label3:
        return;
    }

    public static void reverse(long[])
    {
        long[] r0;
        int $i0, i3, i4, $i6;
        long l1, $l2;

        r0 := @parameter0: long[];

        if r0 != null goto label1;

        return;

     label1:
        i3 = 0;

        $i0 = lengthof r0;

        i4 = $i0 - 1;

     label2:
        if i4 <= i3 goto label3;

        l1 = r0[i4];

        $l2 = r0[i3];

        r0[i4] = $l2;

        r0[i3] = l1;

        $i6 = (int) -1;

        i4 = i4 + $i6;

        i3 = i3 + 1;

        goto label2;

     label3:
        return;
    }

    public static void reverse(int[])
    {
        int[] r0;
        int $i0, i1, $i2, i3, i4, $i6;

        r0 := @parameter0: int[];

        if r0 != null goto label1;

        return;

     label1:
        i3 = 0;

        $i0 = lengthof r0;

        i4 = $i0 - 1;

     label2:
        if i4 <= i3 goto label3;

        i1 = r0[i4];

        $i2 = r0[i3];

        r0[i4] = $i2;

        r0[i3] = i1;

        $i6 = (int) -1;

        i4 = i4 + $i6;

        i3 = i3 + 1;

        goto label2;

     label3:
        return;
    }

    public static void reverse(short[])
    {
        short s1, $s2;
        int $i0, i3, i4, $i6;
        short[] r0;

        r0 := @parameter0: short[];

        if r0 != null goto label1;

        return;

     label1:
        i3 = 0;

        $i0 = lengthof r0;

        i4 = $i0 - 1;

     label2:
        if i4 <= i3 goto label3;

        s1 = r0[i4];

        $s2 = r0[i3];

        r0[i4] = $s2;

        r0[i3] = s1;

        $i6 = (int) -1;

        i4 = i4 + $i6;

        i3 = i3 + 1;

        goto label2;

     label3:
        return;
    }

    public static void reverse(char[])
    {
        int $i0, i3, i4, $i6;
        char[] r0;
        char c1, $c2;

        r0 := @parameter0: char[];

        if r0 != null goto label1;

        return;

     label1:
        i3 = 0;

        $i0 = lengthof r0;

        i4 = $i0 - 1;

     label2:
        if i4 <= i3 goto label3;

        c1 = r0[i4];

        $c2 = r0[i3];

        r0[i4] = $c2;

        r0[i3] = c1;

        $i6 = (int) -1;

        i4 = i4 + $i6;

        i3 = i3 + 1;

        goto label2;

     label3:
        return;
    }

    public static void reverse(byte[])
    {
        byte[] r0;
        byte b1, $b2;
        int $i0, i3, i4, $i6;

        r0 := @parameter0: byte[];

        if r0 != null goto label1;

        return;

     label1:
        i3 = 0;

        $i0 = lengthof r0;

        i4 = $i0 - 1;

     label2:
        if i4 <= i3 goto label3;

        b1 = r0[i4];

        $b2 = r0[i3];

        r0[i4] = $b2;

        r0[i3] = b1;

        $i6 = (int) -1;

        i4 = i4 + $i6;

        i3 = i3 + 1;

        goto label2;

     label3:
        return;
    }

    public static void reverse(double[])
    {
        double[] r0;
        int $i0, i1, i2, $i4;
        double d0, $d1;

        r0 := @parameter0: double[];

        if r0 != null goto label1;

        return;

     label1:
        i1 = 0;

        $i0 = lengthof r0;

        i2 = $i0 - 1;

     label2:
        if i2 <= i1 goto label3;

        d0 = r0[i2];

        $d1 = r0[i1];

        r0[i2] = $d1;

        r0[i1] = d0;

        $i4 = (int) -1;

        i2 = i2 + $i4;

        i1 = i1 + 1;

        goto label2;

     label3:
        return;
    }

    public static void reverse(float[])
    {
        int $i0, i1, i2, $i4;
        float f0, $f1;
        float[] r0;

        r0 := @parameter0: float[];

        if r0 != null goto label1;

        return;

     label1:
        i1 = 0;

        $i0 = lengthof r0;

        i2 = $i0 - 1;

     label2:
        if i2 <= i1 goto label3;

        f0 = r0[i2];

        $f1 = r0[i1];

        r0[i2] = $f1;

        r0[i1] = f0;

        $i4 = (int) -1;

        i2 = i2 + $i4;

        i1 = i1 + 1;

        goto label2;

     label3:
        return;
    }

    public static void reverse(boolean[])
    {
        boolean[] r0;
        int $i0, i1, i2, $i4;
        boolean z0, $z1;

        r0 := @parameter0: boolean[];

        if r0 != null goto label1;

        return;

     label1:
        i1 = 0;

        $i0 = lengthof r0;

        i2 = $i0 - 1;

     label2:
        if i2 <= i1 goto label3;

        z0 = r0[i2];

        $z1 = r0[i1];

        r0[i2] = $z1;

        r0[i1] = z0;

        $i4 = (int) -1;

        i2 = i2 + $i4;

        i1 = i1 + 1;

        goto label2;

     label3:
        return;
    }

    public static int indexOf(java.lang.Object[], java.lang.Object)
    {
        int $i0;
        java.lang.Object r1;
        java.lang.Object[] r0;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.Object;

        $i0 = staticinvoke <org.apache.commons.lang.ArrayUtils: int indexOf(java.lang.Object[],java.lang.Object,int)>(r0, r1, 0);

        return $i0;
    }

    public static int indexOf(java.lang.Object[], java.lang.Object, int)
    {
        java.lang.Object[] r0;
        int $i0, $i1, i2, i3, i4, $i6, $i8;
        java.lang.Object r1, $r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.Object;

        i2 := @parameter2: int;

        if r0 != null goto label1;

        $i6 = (int) -1;

        return $i6;

     label1:
        if i2 >= 0 goto label2;

        i2 = 0;

     label2:
        if r1 != null goto label6;

        i3 = i2;

     label3:
        $i1 = lengthof r0;

        if i3 >= $i1 goto label5;

        $r3 = r0[i3];

        if $r3 != null goto label4;

        return i3;

     label4:
        i3 = i3 + 1;

        goto label3;

     label5:
        goto label9;

     label6:
        i4 = i2;

     label7:
        $i0 = lengthof r0;

        if i4 >= $i0 goto label9;

        $r2 = r0[i4];

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label8;

        return i4;

     label8:
        i4 = i4 + 1;

        goto label7;

     label9:
        $i8 = (int) -1;

        return $i8;
    }

    public static int lastIndexOf(java.lang.Object[], java.lang.Object)
    {
        int $i0;
        java.lang.Object r1;
        java.lang.Object[] r0;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.Object;

        $i0 = staticinvoke <org.apache.commons.lang.ArrayUtils: int lastIndexOf(java.lang.Object[],java.lang.Object,int)>(r0, r1, 2147483647);

        return $i0;
    }

    public static int lastIndexOf(java.lang.Object[], java.lang.Object, int)
    {
        java.lang.Object[] r0;
        int $i0, $i1, i2, i3, i4, $i6, $i8, $i10, $i12, $i14;
        java.lang.Object r1, $r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.Object;

        i2 := @parameter2: int;

        if r0 != null goto label01;

        $i6 = (int) -1;

        return $i6;

     label01:
        if i2 >= 0 goto label02;

        $i8 = (int) -1;

        return $i8;

     label02:
        $i0 = lengthof r0;

        if i2 < $i0 goto label03;

        $i1 = lengthof r0;

        i2 = $i1 - 1;

     label03:
        if r1 != null goto label07;

        i3 = i2;

     label04:
        if i3 < 0 goto label06;

        $r3 = r0[i3];

        if $r3 != null goto label05;

        return i3;

     label05:
        $i10 = (int) -1;

        i3 = i3 + $i10;

        goto label04;

     label06:
        goto label10;

     label07:
        i4 = i2;

     label08:
        if i4 < 0 goto label10;

        $r2 = r0[i4];

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label09;

        return i4;

     label09:
        $i12 = (int) -1;

        i4 = i4 + $i12;

        goto label08;

     label10:
        $i14 = (int) -1;

        return $i14;
    }

    public static boolean contains(java.lang.Object[], java.lang.Object)
    {
        java.lang.Object[] r0;
        int $i0, $i2;
        java.lang.Object r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.Object;

        $i0 = staticinvoke <org.apache.commons.lang.ArrayUtils: int indexOf(java.lang.Object[],java.lang.Object)>(r0, r1);

        $i2 = (int) -1;

        if $i0 == $i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static int indexOf(long[], long)
    {
        int $i1;
        long l0;
        long[] r0;

        r0 := @parameter0: long[];

        l0 := @parameter1: long;

        $i1 = staticinvoke <org.apache.commons.lang.ArrayUtils: int indexOf(long[],long,int)>(r0, l0, 0);

        return $i1;
    }

    public static int indexOf(long[], long, int)
    {
        long l0, $l1;
        long[] r0;
        byte $b2;
        int i3, i4, $i5, $i7, $i9;

        r0 := @parameter0: long[];

        l0 := @parameter1: long;

        i3 := @parameter2: int;

        if r0 != null goto label1;

        $i7 = (int) -1;

        return $i7;

     label1:
        if i3 >= 0 goto label2;

        i3 = 0;

     label2:
        i4 = i3;

     label3:
        $i5 = lengthof r0;

        if i4 >= $i5 goto label5;

        $l1 = r0[i4];

        $b2 = l0 cmp $l1;

        if $b2 != 0 goto label4;

        return i4;

     label4:
        i4 = i4 + 1;

        goto label3;

     label5:
        $i9 = (int) -1;

        return $i9;
    }

    public static int lastIndexOf(long[], long)
    {
        int $i1;
        long l0;
        long[] r0;

        r0 := @parameter0: long[];

        l0 := @parameter1: long;

        $i1 = staticinvoke <org.apache.commons.lang.ArrayUtils: int lastIndexOf(long[],long,int)>(r0, l0, 2147483647);

        return $i1;
    }

    public static int lastIndexOf(long[], long, int)
    {
        long l1, $l2;
        long[] r0;
        byte $b3;
        int $i0, $i4, i5, i6, $i8, $i10, $i12, $i14;

        r0 := @parameter0: long[];

        l1 := @parameter1: long;

        i5 := @parameter2: int;

        if r0 != null goto label1;

        $i8 = (int) -1;

        return $i8;

     label1:
        if i5 >= 0 goto label2;

        $i10 = (int) -1;

        return $i10;

     label2:
        $i0 = lengthof r0;

        if i5 < $i0 goto label3;

        $i4 = lengthof r0;

        i5 = $i4 - 1;

     label3:
        i6 = i5;

     label4:
        if i6 < 0 goto label6;

        $l2 = r0[i6];

        $b3 = l1 cmp $l2;

        if $b3 != 0 goto label5;

        return i6;

     label5:
        $i12 = (int) -1;

        i6 = i6 + $i12;

        goto label4;

     label6:
        $i14 = (int) -1;

        return $i14;
    }

    public static boolean contains(long[], long)
    {
        long[] r0;
        int $i1, $i3;
        long l0;
        boolean $z0;

        r0 := @parameter0: long[];

        l0 := @parameter1: long;

        $i1 = staticinvoke <org.apache.commons.lang.ArrayUtils: int indexOf(long[],long)>(r0, l0);

        $i3 = (int) -1;

        if $i1 == $i3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static int indexOf(int[], int)
    {
        int i0, $i1;
        int[] r0;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $i1 = staticinvoke <org.apache.commons.lang.ArrayUtils: int indexOf(int[],int,int)>(r0, i0, 0);

        return $i1;
    }

    public static int indexOf(int[], int, int)
    {
        int[] r0;
        int i0, $i1, i2, i3, $i4, $i6, $i8;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i2 := @parameter2: int;

        if r0 != null goto label1;

        $i6 = (int) -1;

        return $i6;

     label1:
        if i2 >= 0 goto label2;

        i2 = 0;

     label2:
        i3 = i2;

     label3:
        $i4 = lengthof r0;

        if i3 >= $i4 goto label5;

        $i1 = r0[i3];

        if i0 != $i1 goto label4;

        return i3;

     label4:
        i3 = i3 + 1;

        goto label3;

     label5:
        $i8 = (int) -1;

        return $i8;
    }

    public static int lastIndexOf(int[], int)
    {
        int i0, $i1;
        int[] r0;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $i1 = staticinvoke <org.apache.commons.lang.ArrayUtils: int lastIndexOf(int[],int,int)>(r0, i0, 2147483647);

        return $i1;
    }

    public static int lastIndexOf(int[], int, int)
    {
        int[] r0;
        int $i0, i1, $i2, $i3, i4, i5, $i7, $i9, $i11, $i13;

        r0 := @parameter0: int[];

        i1 := @parameter1: int;

        i4 := @parameter2: int;

        if r0 != null goto label1;

        $i7 = (int) -1;

        return $i7;

     label1:
        if i4 >= 0 goto label2;

        $i9 = (int) -1;

        return $i9;

     label2:
        $i0 = lengthof r0;

        if i4 < $i0 goto label3;

        $i3 = lengthof r0;

        i4 = $i3 - 1;

     label3:
        i5 = i4;

     label4:
        if i5 < 0 goto label6;

        $i2 = r0[i5];

        if i1 != $i2 goto label5;

        return i5;

     label5:
        $i11 = (int) -1;

        i5 = i5 + $i11;

        goto label4;

     label6:
        $i13 = (int) -1;

        return $i13;
    }

    public static boolean contains(int[], int)
    {
        int[] r0;
        int i0, $i1, $i3;
        boolean $z0;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $i1 = staticinvoke <org.apache.commons.lang.ArrayUtils: int indexOf(int[],int)>(r0, i0);

        $i3 = (int) -1;

        if $i1 == $i3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static int indexOf(short[], short)
    {
        int $i1;
        short s0;
        short[] r0;

        r0 := @parameter0: short[];

        s0 := @parameter1: short;

        $i1 = staticinvoke <org.apache.commons.lang.ArrayUtils: int indexOf(short[],short,int)>(r0, s0, 0);

        return $i1;
    }

    public static int indexOf(short[], short, int)
    {
        short s0, $s1;
        int i2, i3, $i4, $i6, $i7, $i8, $i10;
        short[] r0;

        r0 := @parameter0: short[];

        s0 := @parameter1: short;

        i2 := @parameter2: int;

        if r0 != null goto label1;

        $i6 = (int) -1;

        return $i6;

     label1:
        if i2 >= 0 goto label2;

        i2 = 0;

     label2:
        i3 = i2;

     label3:
        $i4 = lengthof r0;

        if i3 >= $i4 goto label5;

        $s1 = r0[i3];

        $i7 = (int) s0;

        $i8 = (int) $s1;

        if $i7 != $i8 goto label4;

        return i3;

     label4:
        i3 = i3 + 1;

        goto label3;

     label5:
        $i10 = (int) -1;

        return $i10;
    }

    public static int lastIndexOf(short[], short)
    {
        int $i1;
        short s0;
        short[] r0;

        r0 := @parameter0: short[];

        s0 := @parameter1: short;

        $i1 = staticinvoke <org.apache.commons.lang.ArrayUtils: int lastIndexOf(short[],short,int)>(r0, s0, 2147483647);

        return $i1;
    }

    public static int lastIndexOf(short[], short, int)
    {
        short s1, $s2;
        int $i0, $i3, i4, i5, $i7, $i9, $i10, $i11, $i13, $i15;
        short[] r0;

        r0 := @parameter0: short[];

        s1 := @parameter1: short;

        i4 := @parameter2: int;

        if r0 != null goto label1;

        $i7 = (int) -1;

        return $i7;

     label1:
        if i4 >= 0 goto label2;

        $i9 = (int) -1;

        return $i9;

     label2:
        $i0 = lengthof r0;

        if i4 < $i0 goto label3;

        $i3 = lengthof r0;

        i4 = $i3 - 1;

     label3:
        i5 = i4;

     label4:
        if i5 < 0 goto label6;

        $s2 = r0[i5];

        $i10 = (int) s1;

        $i11 = (int) $s2;

        if $i10 != $i11 goto label5;

        return i5;

     label5:
        $i13 = (int) -1;

        i5 = i5 + $i13;

        goto label4;

     label6:
        $i15 = (int) -1;

        return $i15;
    }

    public static boolean contains(short[], short)
    {
        short s0;
        int $i1, $i3;
        short[] r0;
        boolean $z0;

        r0 := @parameter0: short[];

        s0 := @parameter1: short;

        $i1 = staticinvoke <org.apache.commons.lang.ArrayUtils: int indexOf(short[],short)>(r0, s0);

        $i3 = (int) -1;

        if $i1 == $i3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static int indexOf(char[], char)
    {
        int $i1;
        char[] r0;
        char c0;

        r0 := @parameter0: char[];

        c0 := @parameter1: char;

        $i1 = staticinvoke <org.apache.commons.lang.ArrayUtils: int indexOf(char[],char,int)>(r0, c0, 0);

        return $i1;
    }

    public static int indexOf(char[], char, int)
    {
        char c0, $c1;
        int i2, i3, $i4, $i6, $i7, $i8, $i10;
        char[] r0;

        r0 := @parameter0: char[];

        c0 := @parameter1: char;

        i2 := @parameter2: int;

        if r0 != null goto label1;

        $i6 = (int) -1;

        return $i6;

     label1:
        if i2 >= 0 goto label2;

        i2 = 0;

     label2:
        i3 = i2;

     label3:
        $i4 = lengthof r0;

        if i3 >= $i4 goto label5;

        $c1 = r0[i3];

        $i7 = (int) c0;

        $i8 = (int) $c1;

        if $i7 != $i8 goto label4;

        return i3;

     label4:
        i3 = i3 + 1;

        goto label3;

     label5:
        $i10 = (int) -1;

        return $i10;
    }

    public static int lastIndexOf(char[], char)
    {
        int $i1;
        char[] r0;
        char c0;

        r0 := @parameter0: char[];

        c0 := @parameter1: char;

        $i1 = staticinvoke <org.apache.commons.lang.ArrayUtils: int lastIndexOf(char[],char,int)>(r0, c0, 2147483647);

        return $i1;
    }

    public static int lastIndexOf(char[], char, int)
    {
        char c1, $c2;
        int $i0, $i3, i4, i5, $i7, $i9, $i10, $i11, $i13, $i15;
        char[] r0;

        r0 := @parameter0: char[];

        c1 := @parameter1: char;

        i4 := @parameter2: int;

        if r0 != null goto label1;

        $i7 = (int) -1;

        return $i7;

     label1:
        if i4 >= 0 goto label2;

        $i9 = (int) -1;

        return $i9;

     label2:
        $i0 = lengthof r0;

        if i4 < $i0 goto label3;

        $i3 = lengthof r0;

        i4 = $i3 - 1;

     label3:
        i5 = i4;

     label4:
        if i5 < 0 goto label6;

        $c2 = r0[i5];

        $i10 = (int) c1;

        $i11 = (int) $c2;

        if $i10 != $i11 goto label5;

        return i5;

     label5:
        $i13 = (int) -1;

        i5 = i5 + $i13;

        goto label4;

     label6:
        $i15 = (int) -1;

        return $i15;
    }

    public static boolean contains(char[], char)
    {
        int $i1, $i3;
        char[] r0;
        char c0;
        boolean $z0;

        r0 := @parameter0: char[];

        c0 := @parameter1: char;

        $i1 = staticinvoke <org.apache.commons.lang.ArrayUtils: int indexOf(char[],char)>(r0, c0);

        $i3 = (int) -1;

        if $i1 == $i3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static int indexOf(byte[], byte)
    {
        int $i1;
        byte[] r0;
        byte b0;

        r0 := @parameter0: byte[];

        b0 := @parameter1: byte;

        $i1 = staticinvoke <org.apache.commons.lang.ArrayUtils: int indexOf(byte[],byte,int)>(r0, b0, 0);

        return $i1;
    }

    public static int indexOf(byte[], byte, int)
    {
        byte[] r0;
        byte b0, $b1;
        int i2, i3, $i4, $i6, $i7, $i8, $i10;

        r0 := @parameter0: byte[];

        b0 := @parameter1: byte;

        i2 := @parameter2: int;

        if r0 != null goto label1;

        $i6 = (int) -1;

        return $i6;

     label1:
        if i2 >= 0 goto label2;

        i2 = 0;

     label2:
        i3 = i2;

     label3:
        $i4 = lengthof r0;

        if i3 >= $i4 goto label5;

        $b1 = r0[i3];

        $i7 = (int) b0;

        $i8 = (int) $b1;

        if $i7 != $i8 goto label4;

        return i3;

     label4:
        i3 = i3 + 1;

        goto label3;

     label5:
        $i10 = (int) -1;

        return $i10;
    }

    public static int lastIndexOf(byte[], byte)
    {
        int $i1;
        byte[] r0;
        byte b0;

        r0 := @parameter0: byte[];

        b0 := @parameter1: byte;

        $i1 = staticinvoke <org.apache.commons.lang.ArrayUtils: int lastIndexOf(byte[],byte,int)>(r0, b0, 2147483647);

        return $i1;
    }

    public static int lastIndexOf(byte[], byte, int)
    {
        byte[] r0;
        byte b1, $b2;
        int $i0, $i3, i4, i5, $i7, $i9, $i10, $i11, $i13, $i15;

        r0 := @parameter0: byte[];

        b1 := @parameter1: byte;

        i4 := @parameter2: int;

        if r0 != null goto label1;

        $i7 = (int) -1;

        return $i7;

     label1:
        if i4 >= 0 goto label2;

        $i9 = (int) -1;

        return $i9;

     label2:
        $i0 = lengthof r0;

        if i4 < $i0 goto label3;

        $i3 = lengthof r0;

        i4 = $i3 - 1;

     label3:
        i5 = i4;

     label4:
        if i5 < 0 goto label6;

        $b2 = r0[i5];

        $i10 = (int) b1;

        $i11 = (int) $b2;

        if $i10 != $i11 goto label5;

        return i5;

     label5:
        $i13 = (int) -1;

        i5 = i5 + $i13;

        goto label4;

     label6:
        $i15 = (int) -1;

        return $i15;
    }

    public static boolean contains(byte[], byte)
    {
        byte[] r0;
        byte b0;
        int $i1, $i3;
        boolean $z0;

        r0 := @parameter0: byte[];

        b0 := @parameter1: byte;

        $i1 = staticinvoke <org.apache.commons.lang.ArrayUtils: int indexOf(byte[],byte)>(r0, b0);

        $i3 = (int) -1;

        if $i1 == $i3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static int indexOf(double[], double)
    {
        double[] r0;
        int $i0;
        double d0;

        r0 := @parameter0: double[];

        d0 := @parameter1: double;

        $i0 = staticinvoke <org.apache.commons.lang.ArrayUtils: int indexOf(double[],double,int)>(r0, d0, 0);

        return $i0;
    }

    public static int indexOf(double[], double, double)
    {
        double[] r0;
        int $i0;
        double d0, d1;

        r0 := @parameter0: double[];

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        $i0 = staticinvoke <org.apache.commons.lang.ArrayUtils: int indexOf(double[],double,int,double)>(r0, d0, 0, d1);

        return $i0;
    }

    public static int indexOf(double[], double, int)
    {
        double[] r0;
        byte $b0;
        int i1, i2, $i3, $i5, $i7;
        boolean $z0;
        double d0, $d1;

        r0 := @parameter0: double[];

        d0 := @parameter1: double;

        i1 := @parameter2: int;

        $z0 = staticinvoke <org.apache.commons.lang.ArrayUtils: boolean isEmpty(double[])>(r0);

        if $z0 == 0 goto label1;

        $i5 = (int) -1;

        return $i5;

     label1:
        if i1 >= 0 goto label2;

        i1 = 0;

     label2:
        i2 = i1;

     label3:
        $i3 = lengthof r0;

        if i2 >= $i3 goto label5;

        $d1 = r0[i2];

        $b0 = d0 cmpl $d1;

        if $b0 != 0 goto label4;

        return i2;

     label4:
        i2 = i2 + 1;

        goto label3;

     label5:
        $i7 = (int) -1;

        return $i7;
    }

    public static int indexOf(double[], double, int, double)
    {
        double[] r0;
        byte $b0, $b1;
        int i2, i3, $i4, $i6, $i7, $i8, $i10;
        boolean $z0;
        double d0, d1, $d2, $d3, $d4, $d5;

        r0 := @parameter0: double[];

        d0 := @parameter1: double;

        i2 := @parameter2: int;

        d1 := @parameter3: double;

        $z0 = staticinvoke <org.apache.commons.lang.ArrayUtils: boolean isEmpty(double[])>(r0);

        if $z0 == 0 goto label1;

        $i6 = (int) -1;

        return $i6;

     label1:
        if i2 >= 0 goto label2;

        i2 = 0;

     label2:
        $d4 = d0 - d1;

        $d5 = d0 + d1;

        i3 = i2;

     label3:
        $i4 = lengthof r0;

        if i3 >= $i4 goto label5;

        $d2 = r0[i3];

        $b0 = $d2 cmpl $d4;

        $i7 = (int) $b0;

        if $i7 < 0 goto label4;

        $d3 = r0[i3];

        $b1 = $d3 cmpg $d5;

        $i8 = (int) $b1;

        if $i8 > 0 goto label4;

        return i3;

     label4:
        i3 = i3 + 1;

        goto label3;

     label5:
        $i10 = (int) -1;

        return $i10;
    }

    public static int lastIndexOf(double[], double)
    {
        double[] r0;
        int $i0;
        double d0;

        r0 := @parameter0: double[];

        d0 := @parameter1: double;

        $i0 = staticinvoke <org.apache.commons.lang.ArrayUtils: int lastIndexOf(double[],double,int)>(r0, d0, 2147483647);

        return $i0;
    }

    public static int lastIndexOf(double[], double, double)
    {
        double[] r0;
        int $i0;
        double d0, d1;

        r0 := @parameter0: double[];

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        $i0 = staticinvoke <org.apache.commons.lang.ArrayUtils: int lastIndexOf(double[],double,int,double)>(r0, d0, 2147483647, d1);

        return $i0;
    }

    public static int lastIndexOf(double[], double, int)
    {
        double[] r0;
        byte $b1;
        int $i0, $i2, i3, i4, $i6, $i8, $i10, $i12;
        boolean $z0;
        double d0, $d1;

        r0 := @parameter0: double[];

        d0 := @parameter1: double;

        i3 := @parameter2: int;

        $z0 = staticinvoke <org.apache.commons.lang.ArrayUtils: boolean isEmpty(double[])>(r0);

        if $z0 == 0 goto label1;

        $i6 = (int) -1;

        return $i6;

     label1:
        if i3 >= 0 goto label2;

        $i8 = (int) -1;

        return $i8;

     label2:
        $i0 = lengthof r0;

        if i3 < $i0 goto label3;

        $i2 = lengthof r0;

        i3 = $i2 - 1;

     label3:
        i4 = i3;

     label4:
        if i4 < 0 goto label6;

        $d1 = r0[i4];

        $b1 = d0 cmpl $d1;

        if $b1 != 0 goto label5;

        return i4;

     label5:
        $i10 = (int) -1;

        i4 = i4 + $i10;

        goto label4;

     label6:
        $i12 = (int) -1;

        return $i12;
    }

    public static int lastIndexOf(double[], double, int, double)
    {
        double[] r0;
        byte $b1, $b2;
        int $i0, $i3, i4, i5, $i7, $i9, $i10, $i11, $i13, $i15;
        boolean $z0;
        double d0, d1, $d2, $d3, $d4, $d5;

        r0 := @parameter0: double[];

        d0 := @parameter1: double;

        i4 := @parameter2: int;

        d1 := @parameter3: double;

        $z0 = staticinvoke <org.apache.commons.lang.ArrayUtils: boolean isEmpty(double[])>(r0);

        if $z0 == 0 goto label1;

        $i7 = (int) -1;

        return $i7;

     label1:
        if i4 >= 0 goto label2;

        $i9 = (int) -1;

        return $i9;

     label2:
        $i0 = lengthof r0;

        if i4 < $i0 goto label3;

        $i3 = lengthof r0;

        i4 = $i3 - 1;

     label3:
        $d4 = d0 - d1;

        $d5 = d0 + d1;

        i5 = i4;

     label4:
        if i5 < 0 goto label6;

        $d2 = r0[i5];

        $b1 = $d2 cmpl $d4;

        $i10 = (int) $b1;

        if $i10 < 0 goto label5;

        $d3 = r0[i5];

        $b2 = $d3 cmpg $d5;

        $i11 = (int) $b2;

        if $i11 > 0 goto label5;

        return i5;

     label5:
        $i13 = (int) -1;

        i5 = i5 + $i13;

        goto label4;

     label6:
        $i15 = (int) -1;

        return $i15;
    }

    public static boolean contains(double[], double)
    {
        double[] r0;
        int $i0, $i2;
        double d0;
        boolean $z0;

        r0 := @parameter0: double[];

        d0 := @parameter1: double;

        $i0 = staticinvoke <org.apache.commons.lang.ArrayUtils: int indexOf(double[],double)>(r0, d0);

        $i2 = (int) -1;

        if $i0 == $i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean contains(double[], double, double)
    {
        double[] r0;
        int $i0, $i2;
        double d0, d1;
        boolean $z0;

        r0 := @parameter0: double[];

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        $i0 = staticinvoke <org.apache.commons.lang.ArrayUtils: int indexOf(double[],double,int,double)>(r0, d0, 0, d1);

        $i2 = (int) -1;

        if $i0 == $i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static int indexOf(float[], float)
    {
        int $i0;
        float f0;
        float[] r0;

        r0 := @parameter0: float[];

        f0 := @parameter1: float;

        $i0 = staticinvoke <org.apache.commons.lang.ArrayUtils: int indexOf(float[],float,int)>(r0, f0, 0);

        return $i0;
    }

    public static int indexOf(float[], float, int)
    {
        float[] r0;
        byte $b0;
        int i1, i2, $i3, $i5, $i7;
        float f0, $f1;
        boolean $z0;

        r0 := @parameter0: float[];

        f0 := @parameter1: float;

        i1 := @parameter2: int;

        $z0 = staticinvoke <org.apache.commons.lang.ArrayUtils: boolean isEmpty(float[])>(r0);

        if $z0 == 0 goto label1;

        $i5 = (int) -1;

        return $i5;

     label1:
        if i1 >= 0 goto label2;

        i1 = 0;

     label2:
        i2 = i1;

     label3:
        $i3 = lengthof r0;

        if i2 >= $i3 goto label5;

        $f1 = r0[i2];

        $b0 = f0 cmpl $f1;

        if $b0 != 0 goto label4;

        return i2;

     label4:
        i2 = i2 + 1;

        goto label3;

     label5:
        $i7 = (int) -1;

        return $i7;
    }

    public static int lastIndexOf(float[], float)
    {
        int $i0;
        float f0;
        float[] r0;

        r0 := @parameter0: float[];

        f0 := @parameter1: float;

        $i0 = staticinvoke <org.apache.commons.lang.ArrayUtils: int lastIndexOf(float[],float,int)>(r0, f0, 2147483647);

        return $i0;
    }

    public static int lastIndexOf(float[], float, int)
    {
        float[] r0;
        byte $b1;
        int $i0, $i2, i3, i4, $i6, $i8, $i10, $i12;
        float f0, $f1;
        boolean $z0;

        r0 := @parameter0: float[];

        f0 := @parameter1: float;

        i3 := @parameter2: int;

        $z0 = staticinvoke <org.apache.commons.lang.ArrayUtils: boolean isEmpty(float[])>(r0);

        if $z0 == 0 goto label1;

        $i6 = (int) -1;

        return $i6;

     label1:
        if i3 >= 0 goto label2;

        $i8 = (int) -1;

        return $i8;

     label2:
        $i0 = lengthof r0;

        if i3 < $i0 goto label3;

        $i2 = lengthof r0;

        i3 = $i2 - 1;

     label3:
        i4 = i3;

     label4:
        if i4 < 0 goto label6;

        $f1 = r0[i4];

        $b1 = f0 cmpl $f1;

        if $b1 != 0 goto label5;

        return i4;

     label5:
        $i10 = (int) -1;

        i4 = i4 + $i10;

        goto label4;

     label6:
        $i12 = (int) -1;

        return $i12;
    }

    public static boolean contains(float[], float)
    {
        int $i0, $i2;
        float f0;
        float[] r0;
        boolean $z0;

        r0 := @parameter0: float[];

        f0 := @parameter1: float;

        $i0 = staticinvoke <org.apache.commons.lang.ArrayUtils: int indexOf(float[],float)>(r0, f0);

        $i2 = (int) -1;

        if $i0 == $i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static int indexOf(boolean[], boolean)
    {
        boolean[] r0;
        int $i0;
        boolean z0;

        r0 := @parameter0: boolean[];

        z0 := @parameter1: boolean;

        $i0 = staticinvoke <org.apache.commons.lang.ArrayUtils: int indexOf(boolean[],boolean,int)>(r0, z0, 0);

        return $i0;
    }

    public static int indexOf(boolean[], boolean, int)
    {
        boolean[] r0;
        int i0, i1, $i2, $i4, $i6;
        boolean $z0, z1, $z2;

        r0 := @parameter0: boolean[];

        z1 := @parameter1: boolean;

        i0 := @parameter2: int;

        $z0 = staticinvoke <org.apache.commons.lang.ArrayUtils: boolean isEmpty(boolean[])>(r0);

        if $z0 == 0 goto label1;

        $i4 = (int) -1;

        return $i4;

     label1:
        if i0 >= 0 goto label2;

        i0 = 0;

     label2:
        i1 = i0;

     label3:
        $i2 = lengthof r0;

        if i1 >= $i2 goto label5;

        $z2 = r0[i1];

        if z1 != $z2 goto label4;

        return i1;

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        $i6 = (int) -1;

        return $i6;
    }

    public static int lastIndexOf(boolean[], boolean)
    {
        boolean[] r0;
        int $i0;
        boolean z0;

        r0 := @parameter0: boolean[];

        z0 := @parameter1: boolean;

        $i0 = staticinvoke <org.apache.commons.lang.ArrayUtils: int lastIndexOf(boolean[],boolean,int)>(r0, z0, 2147483647);

        return $i0;
    }

    public static int lastIndexOf(boolean[], boolean, int)
    {
        boolean[] r0;
        int $i0, $i1, i2, i3, $i5, $i7, $i9, $i11;
        boolean $z0, z1, $z2;

        r0 := @parameter0: boolean[];

        z1 := @parameter1: boolean;

        i2 := @parameter2: int;

        $z0 = staticinvoke <org.apache.commons.lang.ArrayUtils: boolean isEmpty(boolean[])>(r0);

        if $z0 == 0 goto label1;

        $i5 = (int) -1;

        return $i5;

     label1:
        if i2 >= 0 goto label2;

        $i7 = (int) -1;

        return $i7;

     label2:
        $i0 = lengthof r0;

        if i2 < $i0 goto label3;

        $i1 = lengthof r0;

        i2 = $i1 - 1;

     label3:
        i3 = i2;

     label4:
        if i3 < 0 goto label6;

        $z2 = r0[i3];

        if z1 != $z2 goto label5;

        return i3;

     label5:
        $i9 = (int) -1;

        i3 = i3 + $i9;

        goto label4;

     label6:
        $i11 = (int) -1;

        return $i11;
    }

    public static boolean contains(boolean[], boolean)
    {
        boolean[] r0;
        int $i0, $i2;
        boolean z0, $z1;

        r0 := @parameter0: boolean[];

        z0 := @parameter1: boolean;

        $i0 = staticinvoke <org.apache.commons.lang.ArrayUtils: int indexOf(boolean[],boolean)>(r0, z0);

        $i2 = (int) -1;

        if $i0 == $i2 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static char[] toPrimitive(java.lang.Character[])
    {
        char $c3;
        java.lang.Character $r2;
        int $i0, $i1, $i2, i4;
        java.lang.Character[] r0;
        char[] r1, $r3;

        r0 := @parameter0: java.lang.Character[];

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r3 = <org.apache.commons.lang.ArrayUtils: char[] EMPTY_CHAR_ARRAY>;

        return $r3;

     label2:
        $i1 = lengthof r0;

        r1 = newarray (char)[$i1];

        i4 = 0;

     label3:
        $i2 = lengthof r0;

        if i4 >= $i2 goto label4;

        $r2 = r0[i4];

        $c3 = virtualinvoke $r2.<java.lang.Character: char charValue()>();

        r1[i4] = $c3;

        i4 = i4 + 1;

        goto label3;

     label4:
        return r1;
    }

    public static char[] toPrimitive(java.lang.Character[], char)
    {
        char c3, $c6;
        java.lang.Character r2;
        int $i0, $i1, $i2, $i4, i5;
        java.lang.Character[] r0;
        char[] r1, $r3;

        r0 := @parameter0: java.lang.Character[];

        c3 := @parameter1: char;

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r3 = <org.apache.commons.lang.ArrayUtils: char[] EMPTY_CHAR_ARRAY>;

        return $r3;

     label2:
        $i1 = lengthof r0;

        r1 = newarray (char)[$i1];

        i5 = 0;

     label3:
        $i2 = lengthof r0;

        if i5 >= $i2 goto label6;

        r2 = r0[i5];

        $i4 = i5;

        if r2 != null goto label4;

        $c6 = c3;

        goto label5;

     label4:
        $c6 = virtualinvoke r2.<java.lang.Character: char charValue()>();

     label5:
        r1[$i4] = $c6;

        i5 = i5 + 1;

        goto label3;

     label6:
        return r1;
    }

    public static java.lang.Character[] toObject(char[])
    {
        char $c3;
        java.lang.Character $r2;
        int $i0, $i1, $i2, i4;
        char[] r0;
        java.lang.Character[] r1, $r3;

        r0 := @parameter0: char[];

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r3 = <org.apache.commons.lang.ArrayUtils: java.lang.Character[] EMPTY_CHARACTER_OBJECT_ARRAY>;

        return $r3;

     label2:
        $i1 = lengthof r0;

        r1 = newarray (java.lang.Character)[$i1];

        i4 = 0;

     label3:
        $i2 = lengthof r0;

        if i4 >= $i2 goto label4;

        $r2 = new java.lang.Character;

        $c3 = r0[i4];

        specialinvoke $r2.<java.lang.Character: void <init>(char)>($c3);

        r1[i4] = $r2;

        i4 = i4 + 1;

        goto label3;

     label4:
        return r1;
    }

    public static long[] toPrimitive(java.lang.Long[])
    {
        java.lang.Long[] r0;
        long $l3;
        long[] r1, $r3;
        java.lang.Long $r2;
        int $i0, $i1, $i2, i4;

        r0 := @parameter0: java.lang.Long[];

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r3 = <org.apache.commons.lang.ArrayUtils: long[] EMPTY_LONG_ARRAY>;

        return $r3;

     label2:
        $i1 = lengthof r0;

        r1 = newarray (long)[$i1];

        i4 = 0;

     label3:
        $i2 = lengthof r0;

        if i4 >= $i2 goto label4;

        $r2 = r0[i4];

        $l3 = virtualinvoke $r2.<java.lang.Long: long longValue()>();

        r1[i4] = $l3;

        i4 = i4 + 1;

        goto label3;

     label4:
        return r1;
    }

    public static long[] toPrimitive(java.lang.Long[], long)
    {
        java.lang.Long[] r0;
        long l3, $l6;
        long[] r1, $r3;
        java.lang.Long r2;
        int $i0, $i1, $i2, $i4, i5;

        r0 := @parameter0: java.lang.Long[];

        l3 := @parameter1: long;

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r3 = <org.apache.commons.lang.ArrayUtils: long[] EMPTY_LONG_ARRAY>;

        return $r3;

     label2:
        $i1 = lengthof r0;

        r1 = newarray (long)[$i1];

        i5 = 0;

     label3:
        $i2 = lengthof r0;

        if i5 >= $i2 goto label6;

        r2 = r0[i5];

        $i4 = i5;

        if r2 != null goto label4;

        $l6 = l3;

        goto label5;

     label4:
        $l6 = virtualinvoke r2.<java.lang.Long: long longValue()>();

     label5:
        r1[$i4] = $l6;

        i5 = i5 + 1;

        goto label3;

     label6:
        return r1;
    }

    public static java.lang.Long[] toObject(long[])
    {
        java.lang.Long[] r1, $r3;
        long $l3;
        long[] r0;
        java.lang.Long $r2;
        int $i0, $i1, $i2, i4;

        r0 := @parameter0: long[];

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r3 = <org.apache.commons.lang.ArrayUtils: java.lang.Long[] EMPTY_LONG_OBJECT_ARRAY>;

        return $r3;

     label2:
        $i1 = lengthof r0;

        r1 = newarray (java.lang.Long)[$i1];

        i4 = 0;

     label3:
        $i2 = lengthof r0;

        if i4 >= $i2 goto label4;

        $r2 = new java.lang.Long;

        $l3 = r0[i4];

        specialinvoke $r2.<java.lang.Long: void <init>(long)>($l3);

        r1[i4] = $r2;

        i4 = i4 + 1;

        goto label3;

     label4:
        return r1;
    }

    public static int[] toPrimitive(java.lang.Integer[])
    {
        java.lang.Integer $r2;
        int[] r1, $r3;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.Integer[] r0;

        r0 := @parameter0: java.lang.Integer[];

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r3 = <org.apache.commons.lang.ArrayUtils: int[] EMPTY_INT_ARRAY>;

        return $r3;

     label2:
        $i1 = lengthof r0;

        r1 = newarray (int)[$i1];

        i4 = 0;

     label3:
        $i2 = lengthof r0;

        if i4 >= $i2 goto label4;

        $r2 = r0[i4];

        $i3 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        r1[i4] = $i3;

        i4 = i4 + 1;

        goto label3;

     label4:
        return r1;
    }

    public static int[] toPrimitive(java.lang.Integer[], int)
    {
        java.lang.Integer r2;
        int[] r1, $r3;
        int $i0, $i1, $i2, i3, $i4, i5, $i6;
        java.lang.Integer[] r0;

        r0 := @parameter0: java.lang.Integer[];

        i3 := @parameter1: int;

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r3 = <org.apache.commons.lang.ArrayUtils: int[] EMPTY_INT_ARRAY>;

        return $r3;

     label2:
        $i1 = lengthof r0;

        r1 = newarray (int)[$i1];

        i5 = 0;

     label3:
        $i2 = lengthof r0;

        if i5 >= $i2 goto label6;

        r2 = r0[i5];

        $i4 = i5;

        if r2 != null goto label4;

        $i6 = i3;

        goto label5;

     label4:
        $i6 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

     label5:
        r1[$i4] = $i6;

        i5 = i5 + 1;

        goto label3;

     label6:
        return r1;
    }

    public static java.lang.Integer[] toObject(int[])
    {
        java.lang.Integer $r2;
        int[] r0;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.Integer[] r1, $r3;

        r0 := @parameter0: int[];

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r3 = <org.apache.commons.lang.ArrayUtils: java.lang.Integer[] EMPTY_INTEGER_OBJECT_ARRAY>;

        return $r3;

     label2:
        $i1 = lengthof r0;

        r1 = newarray (java.lang.Integer)[$i1];

        i4 = 0;

     label3:
        $i2 = lengthof r0;

        if i4 >= $i2 goto label4;

        $r2 = new java.lang.Integer;

        $i3 = r0[i4];

        specialinvoke $r2.<java.lang.Integer: void <init>(int)>($i3);

        r1[i4] = $r2;

        i4 = i4 + 1;

        goto label3;

     label4:
        return r1;
    }

    public static short[] toPrimitive(java.lang.Short[])
    {
        java.lang.Short[] r0;
        short $s3;
        java.lang.Short $r2;
        int $i0, $i1, $i2, i4;
        short[] r1, $r3;

        r0 := @parameter0: java.lang.Short[];

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r3 = <org.apache.commons.lang.ArrayUtils: short[] EMPTY_SHORT_ARRAY>;

        return $r3;

     label2:
        $i1 = lengthof r0;

        r1 = newarray (short)[$i1];

        i4 = 0;

     label3:
        $i2 = lengthof r0;

        if i4 >= $i2 goto label4;

        $r2 = r0[i4];

        $s3 = virtualinvoke $r2.<java.lang.Short: short shortValue()>();

        r1[i4] = $s3;

        i4 = i4 + 1;

        goto label3;

     label4:
        return r1;
    }

    public static short[] toPrimitive(java.lang.Short[], short)
    {
        java.lang.Short[] r0;
        short s3, $s6;
        java.lang.Short r2;
        int $i0, $i1, $i2, $i4, i5;
        short[] r1, $r3;

        r0 := @parameter0: java.lang.Short[];

        s3 := @parameter1: short;

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r3 = <org.apache.commons.lang.ArrayUtils: short[] EMPTY_SHORT_ARRAY>;

        return $r3;

     label2:
        $i1 = lengthof r0;

        r1 = newarray (short)[$i1];

        i5 = 0;

     label3:
        $i2 = lengthof r0;

        if i5 >= $i2 goto label6;

        r2 = r0[i5];

        $i4 = i5;

        if r2 != null goto label4;

        $s6 = s3;

        goto label5;

     label4:
        $s6 = virtualinvoke r2.<java.lang.Short: short shortValue()>();

     label5:
        r1[$i4] = $s6;

        i5 = i5 + 1;

        goto label3;

     label6:
        return r1;
    }

    public static java.lang.Short[] toObject(short[])
    {
        java.lang.Short[] r1, $r3;
        short $s3;
        java.lang.Short $r2;
        int $i0, $i1, $i2, i4;
        short[] r0;

        r0 := @parameter0: short[];

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r3 = <org.apache.commons.lang.ArrayUtils: java.lang.Short[] EMPTY_SHORT_OBJECT_ARRAY>;

        return $r3;

     label2:
        $i1 = lengthof r0;

        r1 = newarray (java.lang.Short)[$i1];

        i4 = 0;

     label3:
        $i2 = lengthof r0;

        if i4 >= $i2 goto label4;

        $r2 = new java.lang.Short;

        $s3 = r0[i4];

        specialinvoke $r2.<java.lang.Short: void <init>(short)>($s3);

        r1[i4] = $r2;

        i4 = i4 + 1;

        goto label3;

     label4:
        return r1;
    }

    public static byte[] toPrimitive(java.lang.Byte[])
    {
        byte[] r1, $r3;
        java.lang.Byte[] r0;
        byte $b3;
        int $i0, $i1, $i2, i4;
        java.lang.Byte $r2;

        r0 := @parameter0: java.lang.Byte[];

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r3 = <org.apache.commons.lang.ArrayUtils: byte[] EMPTY_BYTE_ARRAY>;

        return $r3;

     label2:
        $i1 = lengthof r0;

        r1 = newarray (byte)[$i1];

        i4 = 0;

     label3:
        $i2 = lengthof r0;

        if i4 >= $i2 goto label4;

        $r2 = r0[i4];

        $b3 = virtualinvoke $r2.<java.lang.Byte: byte byteValue()>();

        r1[i4] = $b3;

        i4 = i4 + 1;

        goto label3;

     label4:
        return r1;
    }

    public static byte[] toPrimitive(java.lang.Byte[], byte)
    {
        byte[] r1, $r3;
        java.lang.Byte[] r0;
        byte b3, $b6;
        int $i0, $i1, $i2, $i4, i5;
        java.lang.Byte r2;

        r0 := @parameter0: java.lang.Byte[];

        b3 := @parameter1: byte;

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r3 = <org.apache.commons.lang.ArrayUtils: byte[] EMPTY_BYTE_ARRAY>;

        return $r3;

     label2:
        $i1 = lengthof r0;

        r1 = newarray (byte)[$i1];

        i5 = 0;

     label3:
        $i2 = lengthof r0;

        if i5 >= $i2 goto label6;

        r2 = r0[i5];

        $i4 = i5;

        if r2 != null goto label4;

        $b6 = b3;

        goto label5;

     label4:
        $b6 = virtualinvoke r2.<java.lang.Byte: byte byteValue()>();

     label5:
        r1[$i4] = $b6;

        i5 = i5 + 1;

        goto label3;

     label6:
        return r1;
    }

    public static java.lang.Byte[] toObject(byte[])
    {
        byte[] r0;
        java.lang.Byte[] r1, $r3;
        byte $b3;
        int $i0, $i1, $i2, i4;
        java.lang.Byte $r2;

        r0 := @parameter0: byte[];

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r3 = <org.apache.commons.lang.ArrayUtils: java.lang.Byte[] EMPTY_BYTE_OBJECT_ARRAY>;

        return $r3;

     label2:
        $i1 = lengthof r0;

        r1 = newarray (java.lang.Byte)[$i1];

        i4 = 0;

     label3:
        $i2 = lengthof r0;

        if i4 >= $i2 goto label4;

        $r2 = new java.lang.Byte;

        $b3 = r0[i4];

        specialinvoke $r2.<java.lang.Byte: void <init>(byte)>($b3);

        r1[i4] = $r2;

        i4 = i4 + 1;

        goto label3;

     label4:
        return r1;
    }

    public static double[] toPrimitive(java.lang.Double[])
    {
        java.lang.Double $r2;
        java.lang.Double[] r0;
        double[] r1, $r3;
        int $i0, $i1, $i2, i3;
        double $d0;

        r0 := @parameter0: java.lang.Double[];

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r3 = <org.apache.commons.lang.ArrayUtils: double[] EMPTY_DOUBLE_ARRAY>;

        return $r3;

     label2:
        $i1 = lengthof r0;

        r1 = newarray (double)[$i1];

        i3 = 0;

     label3:
        $i2 = lengthof r0;

        if i3 >= $i2 goto label4;

        $r2 = r0[i3];

        $d0 = virtualinvoke $r2.<java.lang.Double: double doubleValue()>();

        r1[i3] = $d0;

        i3 = i3 + 1;

        goto label3;

     label4:
        return r1;
    }

    public static double[] toPrimitive(java.lang.Double[], double)
    {
        java.lang.Double r2;
        java.lang.Double[] r0;
        double[] r1, $r3;
        int $i0, $i1, $i2, $i3, i4;
        double d0, $d1;

        r0 := @parameter0: java.lang.Double[];

        d0 := @parameter1: double;

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r3 = <org.apache.commons.lang.ArrayUtils: double[] EMPTY_DOUBLE_ARRAY>;

        return $r3;

     label2:
        $i1 = lengthof r0;

        r1 = newarray (double)[$i1];

        i4 = 0;

     label3:
        $i2 = lengthof r0;

        if i4 >= $i2 goto label6;

        r2 = r0[i4];

        $i3 = i4;

        if r2 != null goto label4;

        $d1 = d0;

        goto label5;

     label4:
        $d1 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

     label5:
        r1[$i3] = $d1;

        i4 = i4 + 1;

        goto label3;

     label6:
        return r1;
    }

    public static java.lang.Double[] toObject(double[])
    {
        java.lang.Double $r2;
        double[] r0;
        java.lang.Double[] r1, $r3;
        int $i0, $i1, $i2, i3;
        double $d0;

        r0 := @parameter0: double[];

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r3 = <org.apache.commons.lang.ArrayUtils: java.lang.Double[] EMPTY_DOUBLE_OBJECT_ARRAY>;

        return $r3;

     label2:
        $i1 = lengthof r0;

        r1 = newarray (java.lang.Double)[$i1];

        i3 = 0;

     label3:
        $i2 = lengthof r0;

        if i3 >= $i2 goto label4;

        $r2 = new java.lang.Double;

        $d0 = r0[i3];

        specialinvoke $r2.<java.lang.Double: void <init>(double)>($d0);

        r1[i3] = $r2;

        i3 = i3 + 1;

        goto label3;

     label4:
        return r1;
    }

    public static float[] toPrimitive(java.lang.Float[])
    {
        java.lang.Float $r2;
        float[] r1, $r3;
        int $i0, $i1, $i2, i3;
        float $f0;
        java.lang.Float[] r0;

        r0 := @parameter0: java.lang.Float[];

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r3 = <org.apache.commons.lang.ArrayUtils: float[] EMPTY_FLOAT_ARRAY>;

        return $r3;

     label2:
        $i1 = lengthof r0;

        r1 = newarray (float)[$i1];

        i3 = 0;

     label3:
        $i2 = lengthof r0;

        if i3 >= $i2 goto label4;

        $r2 = r0[i3];

        $f0 = virtualinvoke $r2.<java.lang.Float: float floatValue()>();

        r1[i3] = $f0;

        i3 = i3 + 1;

        goto label3;

     label4:
        return r1;
    }

    public static float[] toPrimitive(java.lang.Float[], float)
    {
        java.lang.Float r2;
        float[] r1, $r3;
        int $i0, $i1, $i2, $i3, i4;
        float f0, $f1;
        java.lang.Float[] r0;

        r0 := @parameter0: java.lang.Float[];

        f0 := @parameter1: float;

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r3 = <org.apache.commons.lang.ArrayUtils: float[] EMPTY_FLOAT_ARRAY>;

        return $r3;

     label2:
        $i1 = lengthof r0;

        r1 = newarray (float)[$i1];

        i4 = 0;

     label3:
        $i2 = lengthof r0;

        if i4 >= $i2 goto label6;

        r2 = r0[i4];

        $i3 = i4;

        if r2 != null goto label4;

        $f1 = f0;

        goto label5;

     label4:
        $f1 = virtualinvoke r2.<java.lang.Float: float floatValue()>();

     label5:
        r1[$i3] = $f1;

        i4 = i4 + 1;

        goto label3;

     label6:
        return r1;
    }

    public static java.lang.Float[] toObject(float[])
    {
        java.lang.Float $r2;
        float[] r0;
        int $i0, $i1, $i2, i3;
        float $f0;
        java.lang.Float[] r1, $r3;

        r0 := @parameter0: float[];

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r3 = <org.apache.commons.lang.ArrayUtils: java.lang.Float[] EMPTY_FLOAT_OBJECT_ARRAY>;

        return $r3;

     label2:
        $i1 = lengthof r0;

        r1 = newarray (java.lang.Float)[$i1];

        i3 = 0;

     label3:
        $i2 = lengthof r0;

        if i3 >= $i2 goto label4;

        $r2 = new java.lang.Float;

        $f0 = r0[i3];

        specialinvoke $r2.<java.lang.Float: void <init>(float)>($f0);

        r1[i3] = $r2;

        i3 = i3 + 1;

        goto label3;

     label4:
        return r1;
    }

    public static boolean[] toPrimitive(java.lang.Boolean[])
    {
        boolean[] r1, $r3;
        java.lang.Boolean[] r0;
        int $i0, $i1, $i2, i3;
        java.lang.Boolean $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.Boolean[];

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r3 = <org.apache.commons.lang.ArrayUtils: boolean[] EMPTY_BOOLEAN_ARRAY>;

        return $r3;

     label2:
        $i1 = lengthof r0;

        r1 = newarray (boolean)[$i1];

        i3 = 0;

     label3:
        $i2 = lengthof r0;

        if i3 >= $i2 goto label4;

        $r2 = r0[i3];

        $z0 = virtualinvoke $r2.<java.lang.Boolean: boolean booleanValue()>();

        r1[i3] = $z0;

        i3 = i3 + 1;

        goto label3;

     label4:
        return r1;
    }

    public static boolean[] toPrimitive(java.lang.Boolean[], boolean)
    {
        boolean[] r1, $r3;
        java.lang.Boolean[] r0;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.Boolean r2;
        boolean z0, $z1;

        r0 := @parameter0: java.lang.Boolean[];

        z0 := @parameter1: boolean;

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r3 = <org.apache.commons.lang.ArrayUtils: boolean[] EMPTY_BOOLEAN_ARRAY>;

        return $r3;

     label2:
        $i1 = lengthof r0;

        r1 = newarray (boolean)[$i1];

        i4 = 0;

     label3:
        $i2 = lengthof r0;

        if i4 >= $i2 goto label6;

        r2 = r0[i4];

        $i3 = i4;

        if r2 != null goto label4;

        $z1 = z0;

        goto label5;

     label4:
        $z1 = virtualinvoke r2.<java.lang.Boolean: boolean booleanValue()>();

     label5:
        r1[$i3] = $z1;

        i4 = i4 + 1;

        goto label3;

     label6:
        return r1;
    }

    public static java.lang.Boolean[] toObject(boolean[])
    {
        boolean[] r0;
        java.lang.Boolean[] r1, $r2;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.Boolean $r3;
        boolean $z0;

        r0 := @parameter0: boolean[];

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r2 = <org.apache.commons.lang.ArrayUtils: java.lang.Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY>;

        return $r2;

     label2:
        $i1 = lengthof r0;

        r1 = newarray (java.lang.Boolean)[$i1];

        i4 = 0;

     label3:
        $i2 = lengthof r0;

        if i4 >= $i2 goto label6;

        $i3 = i4;

        $z0 = r0[i4];

        if $z0 == 0 goto label4;

        $r3 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        goto label5;

     label4:
        $r3 = <java.lang.Boolean: java.lang.Boolean FALSE>;

     label5:
        r1[$i3] = $r3;

        i4 = i4 + 1;

        goto label3;

     label6:
        return r1;
    }

    public static boolean isEmpty(java.lang.Object[])
    {
        int $i0;
        java.lang.Object[] r0;

        r0 := @parameter0: java.lang.Object[];

        if r0 == null goto label1;

        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public static boolean isEmpty(long[])
    {
        int $i0;
        long[] r0;

        r0 := @parameter0: long[];

        if r0 == null goto label1;

        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public static boolean isEmpty(int[])
    {
        int $i0;
        int[] r0;

        r0 := @parameter0: int[];

        if r0 == null goto label1;

        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public static boolean isEmpty(short[])
    {
        int $i0;
        short[] r0;

        r0 := @parameter0: short[];

        if r0 == null goto label1;

        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public static boolean isEmpty(char[])
    {
        int $i0;
        char[] r0;

        r0 := @parameter0: char[];

        if r0 == null goto label1;

        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public static boolean isEmpty(byte[])
    {
        int $i0;
        byte[] r0;

        r0 := @parameter0: byte[];

        if r0 == null goto label1;

        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public static boolean isEmpty(double[])
    {
        double[] r0;
        int $i0;

        r0 := @parameter0: double[];

        if r0 == null goto label1;

        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public static boolean isEmpty(float[])
    {
        int $i0;
        float[] r0;

        r0 := @parameter0: float[];

        if r0 == null goto label1;

        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public static boolean isEmpty(boolean[])
    {
        boolean[] r0;
        int $i0;

        r0 := @parameter0: boolean[];

        if r0 == null goto label1;

        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public static java.lang.Object[] addAll(java.lang.Object[], java.lang.Object[])
    {
        java.lang.Object[] r0, r1, r5, $r6, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Class $r2, $r3;
        java.lang.Object $r4;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.Object[];

        if r0 != null goto label1;

        $r7 = staticinvoke <org.apache.commons.lang.ArrayUtils: java.lang.Object[] clone(java.lang.Object[])>(r1);

        return $r7;

     label1:
        if r1 != null goto label2;

        $r6 = staticinvoke <org.apache.commons.lang.ArrayUtils: java.lang.Object[] clone(java.lang.Object[])>(r0);

        return $r6;

     label2:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.Class getComponentType()>();

        $i1 = lengthof r0;

        $i0 = lengthof r1;

        $i2 = $i1 + $i0;

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r3, $i2);

        r5 = (java.lang.Object[]) $r4;

        $i3 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r5, 0, $i3);

        $i5 = lengthof r0;

        $i4 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r5, $i5, $i4);

        return r5;
    }

    public static boolean[] addAll(boolean[], boolean[])
    {
        boolean[] r0, r1, r2, $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @parameter0: boolean[];

        r1 := @parameter1: boolean[];

        if r0 != null goto label1;

        $r4 = staticinvoke <org.apache.commons.lang.ArrayUtils: boolean[] clone(boolean[])>(r1);

        return $r4;

     label1:
        if r1 != null goto label2;

        $r3 = staticinvoke <org.apache.commons.lang.ArrayUtils: boolean[] clone(boolean[])>(r0);

        return $r3;

     label2:
        $i1 = lengthof r0;

        $i0 = lengthof r1;

        $i2 = $i1 + $i0;

        r2 = newarray (boolean)[$i2];

        $i3 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r2, 0, $i3);

        $i5 = lengthof r0;

        $i4 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, $i5, $i4);

        return r2;
    }

    public static char[] addAll(char[], char[])
    {
        int $i0, $i1, $i2, $i3, $i4, $i5;
        char[] r0, r1, r2, $r3, $r4;

        r0 := @parameter0: char[];

        r1 := @parameter1: char[];

        if r0 != null goto label1;

        $r4 = staticinvoke <org.apache.commons.lang.ArrayUtils: char[] clone(char[])>(r1);

        return $r4;

     label1:
        if r1 != null goto label2;

        $r3 = staticinvoke <org.apache.commons.lang.ArrayUtils: char[] clone(char[])>(r0);

        return $r3;

     label2:
        $i1 = lengthof r0;

        $i0 = lengthof r1;

        $i2 = $i1 + $i0;

        r2 = newarray (char)[$i2];

        $i3 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r2, 0, $i3);

        $i5 = lengthof r0;

        $i4 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, $i5, $i4);

        return r2;
    }

    public static byte[] addAll(byte[], byte[])
    {
        byte[] r0, r1, r2, $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        if r0 != null goto label1;

        $r4 = staticinvoke <org.apache.commons.lang.ArrayUtils: byte[] clone(byte[])>(r1);

        return $r4;

     label1:
        if r1 != null goto label2;

        $r3 = staticinvoke <org.apache.commons.lang.ArrayUtils: byte[] clone(byte[])>(r0);

        return $r3;

     label2:
        $i1 = lengthof r0;

        $i0 = lengthof r1;

        $i2 = $i1 + $i0;

        r2 = newarray (byte)[$i2];

        $i3 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r2, 0, $i3);

        $i5 = lengthof r0;

        $i4 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, $i5, $i4);

        return r2;
    }

    public static short[] addAll(short[], short[])
    {
        int $i0, $i1, $i2, $i3, $i4, $i5;
        short[] r0, r1, r2, $r3, $r4;

        r0 := @parameter0: short[];

        r1 := @parameter1: short[];

        if r0 != null goto label1;

        $r4 = staticinvoke <org.apache.commons.lang.ArrayUtils: short[] clone(short[])>(r1);

        return $r4;

     label1:
        if r1 != null goto label2;

        $r3 = staticinvoke <org.apache.commons.lang.ArrayUtils: short[] clone(short[])>(r0);

        return $r3;

     label2:
        $i1 = lengthof r0;

        $i0 = lengthof r1;

        $i2 = $i1 + $i0;

        r2 = newarray (short)[$i2];

        $i3 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r2, 0, $i3);

        $i5 = lengthof r0;

        $i4 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, $i5, $i4);

        return r2;
    }

    public static int[] addAll(int[], int[])
    {
        int[] r0, r1, r2, $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @parameter0: int[];

        r1 := @parameter1: int[];

        if r0 != null goto label1;

        $r4 = staticinvoke <org.apache.commons.lang.ArrayUtils: int[] clone(int[])>(r1);

        return $r4;

     label1:
        if r1 != null goto label2;

        $r3 = staticinvoke <org.apache.commons.lang.ArrayUtils: int[] clone(int[])>(r0);

        return $r3;

     label2:
        $i1 = lengthof r0;

        $i0 = lengthof r1;

        $i2 = $i1 + $i0;

        r2 = newarray (int)[$i2];

        $i3 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r2, 0, $i3);

        $i5 = lengthof r0;

        $i4 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, $i5, $i4);

        return r2;
    }

    public static long[] addAll(long[], long[])
    {
        long[] r0, r1, r2, $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @parameter0: long[];

        r1 := @parameter1: long[];

        if r0 != null goto label1;

        $r4 = staticinvoke <org.apache.commons.lang.ArrayUtils: long[] clone(long[])>(r1);

        return $r4;

     label1:
        if r1 != null goto label2;

        $r3 = staticinvoke <org.apache.commons.lang.ArrayUtils: long[] clone(long[])>(r0);

        return $r3;

     label2:
        $i1 = lengthof r0;

        $i0 = lengthof r1;

        $i2 = $i1 + $i0;

        r2 = newarray (long)[$i2];

        $i3 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r2, 0, $i3);

        $i5 = lengthof r0;

        $i4 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, $i5, $i4);

        return r2;
    }

    public static float[] addAll(float[], float[])
    {
        float[] r0, r1, r2, $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @parameter0: float[];

        r1 := @parameter1: float[];

        if r0 != null goto label1;

        $r4 = staticinvoke <org.apache.commons.lang.ArrayUtils: float[] clone(float[])>(r1);

        return $r4;

     label1:
        if r1 != null goto label2;

        $r3 = staticinvoke <org.apache.commons.lang.ArrayUtils: float[] clone(float[])>(r0);

        return $r3;

     label2:
        $i1 = lengthof r0;

        $i0 = lengthof r1;

        $i2 = $i1 + $i0;

        r2 = newarray (float)[$i2];

        $i3 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r2, 0, $i3);

        $i5 = lengthof r0;

        $i4 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, $i5, $i4);

        return r2;
    }

    public static double[] addAll(double[], double[])
    {
        double[] r0, r1, r2, $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        if r0 != null goto label1;

        $r4 = staticinvoke <org.apache.commons.lang.ArrayUtils: double[] clone(double[])>(r1);

        return $r4;

     label1:
        if r1 != null goto label2;

        $r3 = staticinvoke <org.apache.commons.lang.ArrayUtils: double[] clone(double[])>(r0);

        return $r3;

     label2:
        $i1 = lengthof r0;

        $i0 = lengthof r1;

        $i2 = $i1 + $i0;

        r2 = newarray (double)[$i2];

        $i3 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r2, 0, $i3);

        $i5 = lengthof r0;

        $i4 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, $i5, $i4);

        return r2;
    }

    public static java.lang.Object[] add(java.lang.Object[], java.lang.Object)
    {
        java.lang.Object[] r0, $r5;
        int $i0, $i1;
        java.lang.Object r1, $r4;
        java.lang.Class $r2, $r3;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.Object;

        if r0 == null goto label1;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        goto label4;

     label1:
        if r1 == null goto label2;

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        goto label4;

     label2:
        $r2 = <org.apache.commons.lang.ArrayUtils: java.lang.Class class$java$lang$Object>;

        if $r2 != null goto label3;

        $r3 = staticinvoke <org.apache.commons.lang.ArrayUtils: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        <org.apache.commons.lang.ArrayUtils: java.lang.Class class$java$lang$Object> = $r3;

        goto label4;

     label3:
        $r3 = <org.apache.commons.lang.ArrayUtils: java.lang.Class class$java$lang$Object>;

     label4:
        $r4 = staticinvoke <org.apache.commons.lang.ArrayUtils: java.lang.Object copyArrayGrow1(java.lang.Object,java.lang.Class)>(r0, $r3);

        $r5 = (java.lang.Object[]) $r4;

        $i0 = lengthof $r5;

        $i1 = $i0 - 1;

        $r5[$i1] = r1;

        return $r5;
    }

    public static boolean[] add(boolean[], boolean)
    {
        boolean[] r0, r3;
        int $i0, $i1;
        java.lang.Class $r1;
        java.lang.Object $r2;
        boolean z0;

        r0 := @parameter0: boolean[];

        z0 := @parameter1: boolean;

        $r1 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r2 = staticinvoke <org.apache.commons.lang.ArrayUtils: java.lang.Object copyArrayGrow1(java.lang.Object,java.lang.Class)>(r0, $r1);

        r3 = (boolean[]) $r2;

        $i0 = lengthof r3;

        $i1 = $i0 - 1;

        r3[$i1] = z0;

        return r3;
    }

    public static byte[] add(byte[], byte)
    {
        byte[] r0, r3;
        byte b1;
        int $i0, $i2;
        java.lang.Class $r1;
        java.lang.Object $r2;

        r0 := @parameter0: byte[];

        b1 := @parameter1: byte;

        $r1 = <java.lang.Byte: java.lang.Class TYPE>;

        $r2 = staticinvoke <org.apache.commons.lang.ArrayUtils: java.lang.Object copyArrayGrow1(java.lang.Object,java.lang.Class)>(r0, $r1);

        r3 = (byte[]) $r2;

        $i0 = lengthof r3;

        $i2 = $i0 - 1;

        r3[$i2] = b1;

        return r3;
    }

    public static char[] add(char[], char)
    {
        int $i0, $i2;
        char[] r0, r3;
        java.lang.Class $r1;
        java.lang.Object $r2;
        char c1;

        r0 := @parameter0: char[];

        c1 := @parameter1: char;

        $r1 = <java.lang.Character: java.lang.Class TYPE>;

        $r2 = staticinvoke <org.apache.commons.lang.ArrayUtils: java.lang.Object copyArrayGrow1(java.lang.Object,java.lang.Class)>(r0, $r1);

        r3 = (char[]) $r2;

        $i0 = lengthof r3;

        $i2 = $i0 - 1;

        r3[$i2] = c1;

        return r3;
    }

    public static double[] add(double[], double)
    {
        double[] r0, r3;
        int $i0, $i1;
        java.lang.Class $r1;
        java.lang.Object $r2;
        double d0;

        r0 := @parameter0: double[];

        d0 := @parameter1: double;

        $r1 = <java.lang.Double: java.lang.Class TYPE>;

        $r2 = staticinvoke <org.apache.commons.lang.ArrayUtils: java.lang.Object copyArrayGrow1(java.lang.Object,java.lang.Class)>(r0, $r1);

        r3 = (double[]) $r2;

        $i0 = lengthof r3;

        $i1 = $i0 - 1;

        r3[$i1] = d0;

        return r3;
    }

    public static float[] add(float[], float)
    {
        int $i0, $i1;
        float f0;
        float[] r0, r3;
        java.lang.Class $r1;
        java.lang.Object $r2;

        r0 := @parameter0: float[];

        f0 := @parameter1: float;

        $r1 = <java.lang.Float: java.lang.Class TYPE>;

        $r2 = staticinvoke <org.apache.commons.lang.ArrayUtils: java.lang.Object copyArrayGrow1(java.lang.Object,java.lang.Class)>(r0, $r1);

        r3 = (float[]) $r2;

        $i0 = lengthof r3;

        $i1 = $i0 - 1;

        r3[$i1] = f0;

        return r3;
    }

    public static int[] add(int[], int)
    {
        int[] r0, r3;
        int $i0, i1, $i2;
        java.lang.Class $r1;
        java.lang.Object $r2;

        r0 := @parameter0: int[];

        i1 := @parameter1: int;

        $r1 = <java.lang.Integer: java.lang.Class TYPE>;

        $r2 = staticinvoke <org.apache.commons.lang.ArrayUtils: java.lang.Object copyArrayGrow1(java.lang.Object,java.lang.Class)>(r0, $r1);

        r3 = (int[]) $r2;

        $i0 = lengthof r3;

        $i2 = $i0 - 1;

        r3[$i2] = i1;

        return r3;
    }

    public static long[] add(long[], long)
    {
        long[] r0, r3;
        int $i0, $i2;
        java.lang.Class $r1;
        java.lang.Object $r2;
        long l1;

        r0 := @parameter0: long[];

        l1 := @parameter1: long;

        $r1 = <java.lang.Long: java.lang.Class TYPE>;

        $r2 = staticinvoke <org.apache.commons.lang.ArrayUtils: java.lang.Object copyArrayGrow1(java.lang.Object,java.lang.Class)>(r0, $r1);

        r3 = (long[]) $r2;

        $i0 = lengthof r3;

        $i2 = $i0 - 1;

        r3[$i2] = l1;

        return r3;
    }

    public static short[] add(short[], short)
    {
        short s1;
        int $i0, $i2;
        java.lang.Class $r1;
        java.lang.Object $r2;
        short[] r0, r3;

        r0 := @parameter0: short[];

        s1 := @parameter1: short;

        $r1 = <java.lang.Short: java.lang.Class TYPE>;

        $r2 = staticinvoke <org.apache.commons.lang.ArrayUtils: java.lang.Object copyArrayGrow1(java.lang.Object,java.lang.Class)>(r0, $r1);

        r3 = (short[]) $r2;

        $i0 = lengthof r3;

        $i2 = $i0 - 1;

        r3[$i2] = s1;

        return r3;
    }

    private static java.lang.Object copyArrayGrow1(java.lang.Object, java.lang.Class)
    {
        int $i0, $i1;
        java.lang.Object r0, $r2, $r5;
        java.lang.Class r1, $r3, $r4;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Class;

        if r0 == null goto label1;

        $i0 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r0);

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Class getComponentType()>();

        $i1 = $i0 + 1;

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r4, $i1);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, $r5, 0, $i0);

        return $r5;

     label1:
        $r2 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r1, 1);

        return $r2;
    }

    public static java.lang.Object[] add(java.lang.Object[], int, java.lang.Object)
    {
        java.lang.Object[] r0, $r2, $r4;
        int i0;
        java.lang.Object r1, $r3;
        java.lang.Class $r5, r6;

        r0 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.Object;

        if r0 == null goto label1;

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r6 = virtualinvoke $r5.<java.lang.Class: java.lang.Class getComponentType()>();

        goto label3;

     label1:
        if r1 == null goto label2;

        r6 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        goto label3;

     label2:
        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = null;

        return $r2;

     label3:
        $r3 = staticinvoke <org.apache.commons.lang.ArrayUtils: java.lang.Object add(java.lang.Object,int,java.lang.Object,java.lang.Class)>(r0, i0, r1, r6);

        $r4 = (java.lang.Object[]) $r3;

        return $r4;
    }

    public static boolean[] add(boolean[], int, boolean)
    {
        boolean[] r0, $r4;
        int i0;
        java.lang.Boolean $r1;
        java.lang.Class $r2;
        java.lang.Object $r3;
        boolean z0;

        r0 := @parameter0: boolean[];

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r1 = staticinvoke <org.apache.commons.lang.BooleanUtils: java.lang.Boolean toBooleanObject(boolean)>(z0);

        $r2 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r3 = staticinvoke <org.apache.commons.lang.ArrayUtils: java.lang.Object add(java.lang.Object,int,java.lang.Object,java.lang.Class)>(r0, i0, $r1, $r2);

        $r4 = (boolean[]) $r3;

        return $r4;
    }

    public static char[] add(char[], int, char)
    {
        java.lang.Character $r1;
        int i0;
        char[] r0, $r4;
        char c1;
        java.lang.Class $r2;
        java.lang.Object $r3;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        c1 := @parameter2: char;

        $r1 = new java.lang.Character;

        specialinvoke $r1.<java.lang.Character: void <init>(char)>(c1);

        $r2 = <java.lang.Character: java.lang.Class TYPE>;

        $r3 = staticinvoke <org.apache.commons.lang.ArrayUtils: java.lang.Object add(java.lang.Object,int,java.lang.Object,java.lang.Class)>(r0, i0, $r1, $r2);

        $r4 = (char[]) $r3;

        return $r4;
    }

    public static byte[] add(byte[], int, byte)
    {
        byte[] r0, $r4;
        byte b1;
        int i0;
        java.lang.Class $r2;
        java.lang.Object $r3;
        java.lang.Byte $r1;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        b1 := @parameter2: byte;

        $r1 = new java.lang.Byte;

        specialinvoke $r1.<java.lang.Byte: void <init>(byte)>(b1);

        $r2 = <java.lang.Byte: java.lang.Class TYPE>;

        $r3 = staticinvoke <org.apache.commons.lang.ArrayUtils: java.lang.Object add(java.lang.Object,int,java.lang.Object,java.lang.Class)>(r0, i0, $r1, $r2);

        $r4 = (byte[]) $r3;

        return $r4;
    }

    public static short[] add(short[], int, short)
    {
        short s1;
        java.lang.Short $r1;
        int i0;
        java.lang.Class $r2;
        java.lang.Object $r3;
        short[] r0, $r4;

        r0 := @parameter0: short[];

        i0 := @parameter1: int;

        s1 := @parameter2: short;

        $r1 = new java.lang.Short;

        specialinvoke $r1.<java.lang.Short: void <init>(short)>(s1);

        $r2 = <java.lang.Short: java.lang.Class TYPE>;

        $r3 = staticinvoke <org.apache.commons.lang.ArrayUtils: java.lang.Object add(java.lang.Object,int,java.lang.Object,java.lang.Class)>(r0, i0, $r1, $r2);

        $r4 = (short[]) $r3;

        return $r4;
    }

    public static int[] add(int[], int, int)
    {
        int[] r0, $r4;
        int i0, i1;
        java.lang.Class $r2;
        java.lang.Object $r3;
        java.lang.Integer $r1;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = new java.lang.Integer;

        specialinvoke $r1.<java.lang.Integer: void <init>(int)>(i1);

        $r2 = <java.lang.Integer: java.lang.Class TYPE>;

        $r3 = staticinvoke <org.apache.commons.lang.ArrayUtils: java.lang.Object add(java.lang.Object,int,java.lang.Object,java.lang.Class)>(r0, i0, $r1, $r2);

        $r4 = (int[]) $r3;

        return $r4;
    }

    public static long[] add(long[], int, long)
    {
        long[] r0, $r4;
        java.lang.Long $r1;
        int i0;
        long l1;
        java.lang.Class $r2;
        java.lang.Object $r3;

        r0 := @parameter0: long[];

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        $r1 = new java.lang.Long;

        specialinvoke $r1.<java.lang.Long: void <init>(long)>(l1);

        $r2 = <java.lang.Long: java.lang.Class TYPE>;

        $r3 = staticinvoke <org.apache.commons.lang.ArrayUtils: java.lang.Object add(java.lang.Object,int,java.lang.Object,java.lang.Class)>(r0, i0, $r1, $r2);

        $r4 = (long[]) $r3;

        return $r4;
    }

    public static float[] add(float[], int, float)
    {
        java.lang.Float $r1;
        int i0;
        float f0;
        float[] r0, $r4;
        java.lang.Class $r2;
        java.lang.Object $r3;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        f0 := @parameter2: float;

        $r1 = new java.lang.Float;

        specialinvoke $r1.<java.lang.Float: void <init>(float)>(f0);

        $r2 = <java.lang.Float: java.lang.Class TYPE>;

        $r3 = staticinvoke <org.apache.commons.lang.ArrayUtils: java.lang.Object add(java.lang.Object,int,java.lang.Object,java.lang.Class)>(r0, i0, $r1, $r2);

        $r4 = (float[]) $r3;

        return $r4;
    }

    public static double[] add(double[], int, double)
    {
        java.lang.Double $r1;
        double[] r0, $r4;
        int i0;
        java.lang.Class $r2;
        java.lang.Object $r3;
        double d0;

        r0 := @parameter0: double[];

        i0 := @parameter1: int;

        d0 := @parameter2: double;

        $r1 = new java.lang.Double;

        specialinvoke $r1.<java.lang.Double: void <init>(double)>(d0);

        $r2 = <java.lang.Double: java.lang.Class TYPE>;

        $r3 = staticinvoke <org.apache.commons.lang.ArrayUtils: java.lang.Object add(java.lang.Object,int,java.lang.Object,java.lang.Class)>(r0, i0, $r1, $r2);

        $r4 = (double[]) $r3;

        return $r4;
    }

    private static java.lang.Object add(java.lang.Object, int, java.lang.Object, java.lang.Class)
    {
        java.lang.IndexOutOfBoundsException $r1, $r12;
        java.lang.StringBuffer $r2, $r3, $r4, $r5, $r6, $r13, $r14, $r15, $r16;
        int $i0, i1, $i2, $i3, $i4;
        java.lang.String $r7, $r17;
        java.lang.Object r0, $r9, r10, $r11;
        java.lang.Class r8;

        r0 := @parameter0: java.lang.Object;

        i1 := @parameter1: int;

        r10 := @parameter2: java.lang.Object;

        r8 := @parameter3: java.lang.Class;

        if r0 != null goto label2;

        if i1 == 0 goto label1;

        $r12 = new java.lang.IndexOutOfBoundsException;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Index: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", Length: 0");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r17);

        throw $r12;

     label1:
        $r11 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r8, 1);

        staticinvoke <java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>($r11, 0, r10);

        return $r11;

     label2:
        $i0 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r0);

        if i1 > $i0 goto label3;

        if i1 >= 0 goto label4;

     label3:
        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Index: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", Length: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r7);

        throw $r1;

     label4:
        $i2 = $i0 + 1;

        $r9 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r8, $i2);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, $r9, 0, i1);

        staticinvoke <java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>($r9, i1, r10);

        if i1 >= $i0 goto label5;

        $i4 = i1 + 1;

        $i3 = $i0 - i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i1, $r9, $i4, $i3);

     label5:
        return $r9;
    }

    public static java.lang.Object[] remove(java.lang.Object[], int)
    {
        java.lang.Object[] r0, $r2;
        int i0;
        java.lang.Object $r1;

        r0 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.commons.lang.ArrayUtils: java.lang.Object remove(java.lang.Object,int)>(r0, i0);

        $r2 = (java.lang.Object[]) $r1;

        return $r2;
    }

    public static java.lang.Object[] removeElement(java.lang.Object[], java.lang.Object)
    {
        java.lang.Object[] r0, $r2, $r3;
        int $i0, $i2;
        java.lang.Object r1;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.Object;

        $i0 = staticinvoke <org.apache.commons.lang.ArrayUtils: int indexOf(java.lang.Object[],java.lang.Object)>(r0, r1);

        $i2 = (int) -1;

        if $i0 != $i2 goto label1;

        $r3 = staticinvoke <org.apache.commons.lang.ArrayUtils: java.lang.Object[] clone(java.lang.Object[])>(r0);

        return $r3;

     label1:
        $r2 = staticinvoke <org.apache.commons.lang.ArrayUtils: java.lang.Object[] remove(java.lang.Object[],int)>(r0, $i0);

        return $r2;
    }

    public static boolean[] remove(boolean[], int)
    {
        boolean[] r0, $r2;
        int i0;
        java.lang.Object $r1;

        r0 := @parameter0: boolean[];

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.commons.lang.ArrayUtils: java.lang.Object remove(java.lang.Object,int)>(r0, i0);

        $r2 = (boolean[]) $r1;

        return $r2;
    }

    public static boolean[] removeElement(boolean[], boolean)
    {
        boolean[] r0, $r1, $r2;
        int $i0, $i2;
        boolean z0;

        r0 := @parameter0: boolean[];

        z0 := @parameter1: boolean;

        $i0 = staticinvoke <org.apache.commons.lang.ArrayUtils: int indexOf(boolean[],boolean)>(r0, z0);

        $i2 = (int) -1;

        if $i0 != $i2 goto label1;

        $r2 = staticinvoke <org.apache.commons.lang.ArrayUtils: boolean[] clone(boolean[])>(r0);

        return $r2;

     label1:
        $r1 = staticinvoke <org.apache.commons.lang.ArrayUtils: boolean[] remove(boolean[],int)>(r0, $i0);

        return $r1;
    }

    public static byte[] remove(byte[], int)
    {
        byte[] r0, $r2;
        int i0;
        java.lang.Object $r1;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.commons.lang.ArrayUtils: java.lang.Object remove(java.lang.Object,int)>(r0, i0);

        $r2 = (byte[]) $r1;

        return $r2;
    }

    public static byte[] removeElement(byte[], byte)
    {
        byte[] r0, $r1, $r2;
        byte b0;
        int $i1, $i3;

        r0 := @parameter0: byte[];

        b0 := @parameter1: byte;

        $i1 = staticinvoke <org.apache.commons.lang.ArrayUtils: int indexOf(byte[],byte)>(r0, b0);

        $i3 = (int) -1;

        if $i1 != $i3 goto label1;

        $r2 = staticinvoke <org.apache.commons.lang.ArrayUtils: byte[] clone(byte[])>(r0);

        return $r2;

     label1:
        $r1 = staticinvoke <org.apache.commons.lang.ArrayUtils: byte[] remove(byte[],int)>(r0, $i1);

        return $r1;
    }

    public static char[] remove(char[], int)
    {
        int i0;
        char[] r0, $r2;
        java.lang.Object $r1;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.commons.lang.ArrayUtils: java.lang.Object remove(java.lang.Object,int)>(r0, i0);

        $r2 = (char[]) $r1;

        return $r2;
    }

    public static char[] removeElement(char[], char)
    {
        int $i1, $i3;
        char[] r0, $r1, $r2;
        char c0;

        r0 := @parameter0: char[];

        c0 := @parameter1: char;

        $i1 = staticinvoke <org.apache.commons.lang.ArrayUtils: int indexOf(char[],char)>(r0, c0);

        $i3 = (int) -1;

        if $i1 != $i3 goto label1;

        $r2 = staticinvoke <org.apache.commons.lang.ArrayUtils: char[] clone(char[])>(r0);

        return $r2;

     label1:
        $r1 = staticinvoke <org.apache.commons.lang.ArrayUtils: char[] remove(char[],int)>(r0, $i1);

        return $r1;
    }

    public static double[] remove(double[], int)
    {
        double[] r0, $r2;
        int i0;
        java.lang.Object $r1;

        r0 := @parameter0: double[];

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.commons.lang.ArrayUtils: java.lang.Object remove(java.lang.Object,int)>(r0, i0);

        $r2 = (double[]) $r1;

        return $r2;
    }

    public static double[] removeElement(double[], double)
    {
        double[] r0, $r1, $r2;
        int $i0, $i2;
        double d0;

        r0 := @parameter0: double[];

        d0 := @parameter1: double;

        $i0 = staticinvoke <org.apache.commons.lang.ArrayUtils: int indexOf(double[],double)>(r0, d0);

        $i2 = (int) -1;

        if $i0 != $i2 goto label1;

        $r2 = staticinvoke <org.apache.commons.lang.ArrayUtils: double[] clone(double[])>(r0);

        return $r2;

     label1:
        $r1 = staticinvoke <org.apache.commons.lang.ArrayUtils: double[] remove(double[],int)>(r0, $i0);

        return $r1;
    }

    public static float[] remove(float[], int)
    {
        int i0;
        float[] r0, $r2;
        java.lang.Object $r1;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.commons.lang.ArrayUtils: java.lang.Object remove(java.lang.Object,int)>(r0, i0);

        $r2 = (float[]) $r1;

        return $r2;
    }

    public static float[] removeElement(float[], float)
    {
        int $i0, $i2;
        float f0;
        float[] r0, $r1, $r2;

        r0 := @parameter0: float[];

        f0 := @parameter1: float;

        $i0 = staticinvoke <org.apache.commons.lang.ArrayUtils: int indexOf(float[],float)>(r0, f0);

        $i2 = (int) -1;

        if $i0 != $i2 goto label1;

        $r2 = staticinvoke <org.apache.commons.lang.ArrayUtils: float[] clone(float[])>(r0);

        return $r2;

     label1:
        $r1 = staticinvoke <org.apache.commons.lang.ArrayUtils: float[] remove(float[],int)>(r0, $i0);

        return $r1;
    }

    public static int[] remove(int[], int)
    {
        int[] r0, $r2;
        int i0;
        java.lang.Object $r1;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.commons.lang.ArrayUtils: java.lang.Object remove(java.lang.Object,int)>(r0, i0);

        $r2 = (int[]) $r1;

        return $r2;
    }

    public static int[] removeElement(int[], int)
    {
        int[] r0, $r1, $r2;
        int i0, $i1, $i3;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $i1 = staticinvoke <org.apache.commons.lang.ArrayUtils: int indexOf(int[],int)>(r0, i0);

        $i3 = (int) -1;

        if $i1 != $i3 goto label1;

        $r2 = staticinvoke <org.apache.commons.lang.ArrayUtils: int[] clone(int[])>(r0);

        return $r2;

     label1:
        $r1 = staticinvoke <org.apache.commons.lang.ArrayUtils: int[] remove(int[],int)>(r0, $i1);

        return $r1;
    }

    public static long[] remove(long[], int)
    {
        long[] r0, $r2;
        int i0;
        java.lang.Object $r1;

        r0 := @parameter0: long[];

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.commons.lang.ArrayUtils: java.lang.Object remove(java.lang.Object,int)>(r0, i0);

        $r2 = (long[]) $r1;

        return $r2;
    }

    public static long[] removeElement(long[], long)
    {
        long[] r0, $r1, $r2;
        int $i1, $i3;
        long l0;

        r0 := @parameter0: long[];

        l0 := @parameter1: long;

        $i1 = staticinvoke <org.apache.commons.lang.ArrayUtils: int indexOf(long[],long)>(r0, l0);

        $i3 = (int) -1;

        if $i1 != $i3 goto label1;

        $r2 = staticinvoke <org.apache.commons.lang.ArrayUtils: long[] clone(long[])>(r0);

        return $r2;

     label1:
        $r1 = staticinvoke <org.apache.commons.lang.ArrayUtils: long[] remove(long[],int)>(r0, $i1);

        return $r1;
    }

    public static short[] remove(short[], int)
    {
        int i0;
        java.lang.Object $r1;
        short[] r0, $r2;

        r0 := @parameter0: short[];

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.commons.lang.ArrayUtils: java.lang.Object remove(java.lang.Object,int)>(r0, i0);

        $r2 = (short[]) $r1;

        return $r2;
    }

    public static short[] removeElement(short[], short)
    {
        short s0;
        int $i1, $i3;
        short[] r0, $r1, $r2;

        r0 := @parameter0: short[];

        s0 := @parameter1: short;

        $i1 = staticinvoke <org.apache.commons.lang.ArrayUtils: int indexOf(short[],short)>(r0, s0);

        $i3 = (int) -1;

        if $i1 != $i3 goto label1;

        $r2 = staticinvoke <org.apache.commons.lang.ArrayUtils: short[] clone(short[])>(r0);

        return $r2;

     label1:
        $r1 = staticinvoke <org.apache.commons.lang.ArrayUtils: short[] remove(short[],int)>(r0, $i1);

        return $r1;
    }

    private static java.lang.Object remove(java.lang.Object, int)
    {
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.StringBuffer $r2, $r3, $r4, $r5, $r6;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String $r7;
        java.lang.Object r0, $r10;
        java.lang.Class $r8, $r9;

        r0 := @parameter0: java.lang.Object;

        i1 := @parameter1: int;

        $i0 = staticinvoke <org.apache.commons.lang.ArrayUtils: int getLength(java.lang.Object)>(r0);

        if i1 < 0 goto label1;

        if i1 < $i0 goto label2;

     label1:
        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Index: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", Length: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r7);

        throw $r1;

     label2:
        $r8 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.Class getComponentType()>();

        $i2 = $i0 - 1;

        $r10 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r9, $i2);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, $r10, 0, i1);

        $i3 = $i0 - 1;

        if i1 >= $i3 goto label3;

        $i6 = i1 + 1;

        $i4 = $i0 - i1;

        $i5 = $i4 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, $i6, $r10, i1, $i5);

     label3:
        return $r10;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        byte[] $r9;
        java.lang.Object[] $r0;
        java.lang.Short[] $r8;
        double[] $r11;
        java.lang.String[] $r2;
        float[] $r13;
        long[] $r3;
        int[] $r5;
        java.lang.Long[] $r4;
        java.lang.Double[] $r12;
        boolean[] $r15;
        java.lang.Class[] $r1;
        java.lang.Boolean[] $r16;
        java.lang.Byte[] $r10;
        char[] $r17;
        java.lang.Character[] $r18;
        short[] $r7;
        java.lang.Integer[] $r6;
        java.lang.Float[] $r14;

        <org.apache.commons.lang.ArrayUtils: int INDEX_NOT_FOUND> = -1;

        $r0 = newarray (java.lang.Object)[0];

        <org.apache.commons.lang.ArrayUtils: java.lang.Object[] EMPTY_OBJECT_ARRAY> = $r0;

        $r1 = newarray (java.lang.Class)[0];

        <org.apache.commons.lang.ArrayUtils: java.lang.Class[] EMPTY_CLASS_ARRAY> = $r1;

        $r2 = newarray (java.lang.String)[0];

        <org.apache.commons.lang.ArrayUtils: java.lang.String[] EMPTY_STRING_ARRAY> = $r2;

        $r3 = newarray (long)[0];

        <org.apache.commons.lang.ArrayUtils: long[] EMPTY_LONG_ARRAY> = $r3;

        $r4 = newarray (java.lang.Long)[0];

        <org.apache.commons.lang.ArrayUtils: java.lang.Long[] EMPTY_LONG_OBJECT_ARRAY> = $r4;

        $r5 = newarray (int)[0];

        <org.apache.commons.lang.ArrayUtils: int[] EMPTY_INT_ARRAY> = $r5;

        $r6 = newarray (java.lang.Integer)[0];

        <org.apache.commons.lang.ArrayUtils: java.lang.Integer[] EMPTY_INTEGER_OBJECT_ARRAY> = $r6;

        $r7 = newarray (short)[0];

        <org.apache.commons.lang.ArrayUtils: short[] EMPTY_SHORT_ARRAY> = $r7;

        $r8 = newarray (java.lang.Short)[0];

        <org.apache.commons.lang.ArrayUtils: java.lang.Short[] EMPTY_SHORT_OBJECT_ARRAY> = $r8;

        $r9 = newarray (byte)[0];

        <org.apache.commons.lang.ArrayUtils: byte[] EMPTY_BYTE_ARRAY> = $r9;

        $r10 = newarray (java.lang.Byte)[0];

        <org.apache.commons.lang.ArrayUtils: java.lang.Byte[] EMPTY_BYTE_OBJECT_ARRAY> = $r10;

        $r11 = newarray (double)[0];

        <org.apache.commons.lang.ArrayUtils: double[] EMPTY_DOUBLE_ARRAY> = $r11;

        $r12 = newarray (java.lang.Double)[0];

        <org.apache.commons.lang.ArrayUtils: java.lang.Double[] EMPTY_DOUBLE_OBJECT_ARRAY> = $r12;

        $r13 = newarray (float)[0];

        <org.apache.commons.lang.ArrayUtils: float[] EMPTY_FLOAT_ARRAY> = $r13;

        $r14 = newarray (java.lang.Float)[0];

        <org.apache.commons.lang.ArrayUtils: java.lang.Float[] EMPTY_FLOAT_OBJECT_ARRAY> = $r14;

        $r15 = newarray (boolean)[0];

        <org.apache.commons.lang.ArrayUtils: boolean[] EMPTY_BOOLEAN_ARRAY> = $r15;

        $r16 = newarray (java.lang.Boolean)[0];

        <org.apache.commons.lang.ArrayUtils: java.lang.Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY> = $r16;

        $r17 = newarray (char)[0];

        <org.apache.commons.lang.ArrayUtils: char[] EMPTY_CHAR_ARRAY> = $r17;

        $r18 = newarray (java.lang.Character)[0];

        <org.apache.commons.lang.ArrayUtils: java.lang.Character[] EMPTY_CHARACTER_OBJECT_ARRAY> = $r18;

        return;
    }
}
