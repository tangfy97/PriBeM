public class org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler extends org.apache.pdfbox.pdmodel.encryption.SecurityHandler
{
    private static final org.apache.commons.logging.Log LOG;
    public static final java.lang.String FILTER;
    private static final java.lang.String SUBFILTER;
    private org.apache.pdfbox.pdmodel.encryption.PublicKeyProtectionPolicy policy;

    public void <init>()
    {
        org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler r0;

        r0 := @this: org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler;

        specialinvoke r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: void <init>()>();

        r0.<org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler: org.apache.pdfbox.pdmodel.encryption.PublicKeyProtectionPolicy policy> = null;

        return;
    }

    public void <init>(org.apache.pdfbox.pdmodel.encryption.PublicKeyProtectionPolicy)
    {
        int $i0;
        org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler r0;
        org.apache.pdfbox.pdmodel.encryption.PublicKeyProtectionPolicy r1, $r2;

        r0 := @this: org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler;

        r1 := @parameter0: org.apache.pdfbox.pdmodel.encryption.PublicKeyProtectionPolicy;

        specialinvoke r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: void <init>()>();

        r0.<org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler: org.apache.pdfbox.pdmodel.encryption.PublicKeyProtectionPolicy policy> = null;

        r0.<org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler: org.apache.pdfbox.pdmodel.encryption.PublicKeyProtectionPolicy policy> = r1;

        $r2 = r0.<org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler: org.apache.pdfbox.pdmodel.encryption.PublicKeyProtectionPolicy policy>;

        $i0 = virtualinvoke $r2.<org.apache.pdfbox.pdmodel.encryption.PublicKeyProtectionPolicy: int getEncryptionKeyLength()>();

        r0.<org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler: int keyLength> = $i0;

        return;
    }

    public void decryptDocument(org.apache.pdfbox.pdmodel.PDDocument, org.apache.pdfbox.pdmodel.encryption.DecryptionMaterial) throws org.apache.pdfbox.exceptions.CryptographyException, java.io.IOException
    {
        org.apache.pdfbox.cos.COSDocument $r3;
        org.apache.pdfbox.cos.COSArray $r4;
        org.apache.pdfbox.pdmodel.PDDocument r1;
        org.apache.pdfbox.pdmodel.encryption.DecryptionMaterial r5;
        org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler r0;
        org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary $r2;

        r0 := @this: org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler;

        r1 := @parameter0: org.apache.pdfbox.pdmodel.PDDocument;

        r5 := @parameter1: org.apache.pdfbox.pdmodel.encryption.DecryptionMaterial;

        r0.<org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler: org.apache.pdfbox.pdmodel.PDDocument document> = r1;

        $r2 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary getEncryptionDictionary()>();

        $r3 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.cos.COSDocument getDocument()>();

        $r4 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSArray getDocumentID()>();

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler: void prepareForDecryption(org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary,org.apache.pdfbox.cos.COSArray,org.apache.pdfbox.pdmodel.encryption.DecryptionMaterial)>($r2, $r4, r5);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler: void proceedDecryption()>();

        return;
    }

    public void prepareForDecryption(org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary, org.apache.pdfbox.cos.COSArray, org.apache.pdfbox.pdmodel.encryption.DecryptionMaterial) throws org.apache.pdfbox.exceptions.CryptographyException, java.io.IOException
    {
        byte[] $r9, $r10, $r11, $r12, $r13, $r14, $r17, r37, r38, r39;
        java.security.KeyStoreException $r32;
        org.bouncycastle.cms.RecipientInformation r23;
        org.apache.pdfbox.pdmodel.encryption.PublicKeyDecryptionMaterial r2;
        org.bouncycastle.cms.CMSEnvelopedData $r18;
        byte[][] r3;
        java.security.NoSuchAlgorithmException $r28;
        org.bouncycastle.cms.CMSException $r34;
        org.apache.pdfbox.cos.COSString $r16;
        org.bouncycastle.cms.RecipientInformationStore $r19;
        org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler r5;
        java.security.cert.X509Certificate $r25;
        org.apache.pdfbox.exceptions.CryptographyException $r4, $r15, $r27, $r29, $r31, $r33, $r35;
        org.apache.pdfbox.pdmodel.encryption.DecryptionMaterial r1;
        boolean $z0, $z1, $z2, z3, z4, z5;
        org.apache.pdfbox.pdmodel.encryption.AccessPermission $r6, $r7;
        java.util.Collection $r20;
        java.security.Key $r26;
        org.apache.pdfbox.cos.COSArray r36;
        java.security.MessageDigest $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15, i16, i17;
        java.util.Iterator $r21;
        org.bouncycastle.cms.RecipientId $r24;
        org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary r0;
        java.lang.Object $r22;
        java.security.NoSuchProviderException $r30;

        r5 := @this: org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler;

        r0 := @parameter0: org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary;

        r36 := @parameter1: org.apache.pdfbox.cos.COSArray;

        r1 := @parameter2: org.apache.pdfbox.pdmodel.encryption.DecryptionMaterial;

        $i0 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary: int getLength()>();

        if $i0 == 0 goto label01;

        $i13 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary: int getLength()>();

        r5.<org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler: int keyLength> = $i13;

     label01:
        $z0 = r1 instanceof org.apache.pdfbox.pdmodel.encryption.PublicKeyDecryptionMaterial;

        if $z0 != 0 goto label02;

        $r27 = new org.apache.pdfbox.exceptions.CryptographyException;

        specialinvoke $r27.<org.apache.pdfbox.exceptions.CryptographyException: void <init>(java.lang.String)>("Provided decryption material is not compatible with the document");

        throw $r27;

     label02:
        r2 = (org.apache.pdfbox.pdmodel.encryption.PublicKeyDecryptionMaterial) r1;

     label03:
        z3 = 0;

        z5 = 0;

        z4 = 0;

        r37 = null;

        $i1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary: int getRecipientsLength()>();

        r3 = newarray (byte[])[$i1];

        i14 = 0;

        i15 = 0;

     label04:
        $i2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary: int getRecipientsLength()>();

        if i15 >= $i2 goto label08;

        $r16 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary: org.apache.pdfbox.cos.COSString getRecipientStringAt(int)>(i15);

        $r17 = virtualinvoke $r16.<org.apache.pdfbox.cos.COSString: byte[] getBytes()>();

        $r18 = new org.bouncycastle.cms.CMSEnvelopedData;

        specialinvoke $r18.<org.bouncycastle.cms.CMSEnvelopedData: void <init>(byte[])>($r17);

        $r19 = virtualinvoke $r18.<org.bouncycastle.cms.CMSEnvelopedData: org.bouncycastle.cms.RecipientInformationStore getRecipientInfos()>();

        $r20 = virtualinvoke $r19.<org.bouncycastle.cms.RecipientInformationStore: java.util.Collection getRecipients()>();

        $r21 = interfaceinvoke $r20.<java.util.Collection: java.util.Iterator iterator()>();

     label05:
        $z1 = interfaceinvoke $r21.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label07;

        $r22 = interfaceinvoke $r21.<java.util.Iterator: java.lang.Object next()>();

        r23 = (org.bouncycastle.cms.RecipientInformation) $r22;

        $r24 = virtualinvoke r23.<org.bouncycastle.cms.RecipientInformation: org.bouncycastle.cms.RecipientId getRID()>();

        $r25 = virtualinvoke r2.<org.apache.pdfbox.pdmodel.encryption.PublicKeyDecryptionMaterial: java.security.cert.X509Certificate getCertificate()>();

        $z2 = virtualinvoke $r24.<org.bouncycastle.cms.RecipientId: boolean match(java.security.cert.Certificate)>($r25);

        if $z2 == 0 goto label06;

        if z5 != 0 goto label06;

        z3 = 1;

        z5 = 1;

        z4 = 1;

        $r26 = virtualinvoke r2.<org.apache.pdfbox.pdmodel.encryption.PublicKeyDecryptionMaterial: java.security.Key getPrivateKey()>();

        r37 = virtualinvoke r23.<org.bouncycastle.cms.RecipientInformation: byte[] getContent(java.security.Key,java.lang.String)>($r26, "BC");

        goto label07;

     label06:
        goto label05;

     label07:
        r3[i15] = $r17;

        $i12 = lengthof $r17;

        i14 = i14 + $i12;

        i15 = i15 + 1;

        goto label04;

     label08:
        if z4 == 0 goto label09;

        if r37 != null goto label10;

     label09:
        $r4 = new org.apache.pdfbox.exceptions.CryptographyException;

        specialinvoke $r4.<org.apache.pdfbox.exceptions.CryptographyException: void <init>(java.lang.String)>("The certificate matches no recipient entry");

        throw $r4;

     label10:
        $i3 = lengthof r37;

        if $i3 == 24 goto label11;

        $r15 = new org.apache.pdfbox.exceptions.CryptographyException;

        specialinvoke $r15.<org.apache.pdfbox.exceptions.CryptographyException: void <init>(java.lang.String)>("The enveloped data does not contain 24 bytes");

        throw $r15;

     label11:
        r38 = newarray (byte)[4];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r37, 20, r38, 0, 4);

        $r6 = new org.apache.pdfbox.pdmodel.encryption.AccessPermission;

        specialinvoke $r6.<org.apache.pdfbox.pdmodel.encryption.AccessPermission: void <init>(byte[])>(r38);

        r5.<org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler: org.apache.pdfbox.pdmodel.encryption.AccessPermission currentAccessPermission> = $r6;

        $r7 = r5.<org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler: org.apache.pdfbox.pdmodel.encryption.AccessPermission currentAccessPermission>;

        virtualinvoke $r7.<org.apache.pdfbox.pdmodel.encryption.AccessPermission: void setReadOnly()>();

        $i4 = i14 + 20;

        r39 = newarray (byte)[$i4];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r37, 0, r39, 0, 20);

        i16 = 20;

        i17 = 0;

     label12:
        $i5 = lengthof r3;

        if i17 >= $i5 goto label13;

        $r13 = r3[i17];

        $r12 = r3[i17];

        $i10 = lengthof $r12;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r13, 0, r39, i16, $i10);

        $r14 = r3[i17];

        $i11 = lengthof $r14;

        i16 = i16 + $i11;

        i17 = i17 + 1;

        goto label12;

     label13:
        $r8 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-1");

        $r9 = virtualinvoke $r8.<java.security.MessageDigest: byte[] digest(byte[])>(r39);

        $i6 = r5.<org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler: int keyLength>;

        $i7 = $i6 / 8;

        $r10 = newarray (byte)[$i7];

        r5.<org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler: byte[] encryptionKey> = $r10;

        $r11 = r5.<org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler: byte[] encryptionKey>;

        $i8 = r5.<org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler: int keyLength>;

        $i9 = $i8 / 8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, $r11, 0, $i9);

     label14:
        goto label19;

     label15:
        $r34 := @caughtexception;

        $r35 = new org.apache.pdfbox.exceptions.CryptographyException;

        specialinvoke $r35.<org.apache.pdfbox.exceptions.CryptographyException: void <init>(java.lang.Exception)>($r34);

        throw $r35;

     label16:
        $r32 := @caughtexception;

        $r33 = new org.apache.pdfbox.exceptions.CryptographyException;

        specialinvoke $r33.<org.apache.pdfbox.exceptions.CryptographyException: void <init>(java.lang.Exception)>($r32);

        throw $r33;

     label17:
        $r30 := @caughtexception;

        $r31 = new org.apache.pdfbox.exceptions.CryptographyException;

        specialinvoke $r31.<org.apache.pdfbox.exceptions.CryptographyException: void <init>(java.lang.Exception)>($r30);

        throw $r31;

     label18:
        $r28 := @caughtexception;

        $r29 = new org.apache.pdfbox.exceptions.CryptographyException;

        specialinvoke $r29.<org.apache.pdfbox.exceptions.CryptographyException: void <init>(java.lang.Exception)>($r28);

        throw $r29;

     label19:
        return;

        catch org.bouncycastle.cms.CMSException from label03 to label14 with label15;
        catch java.security.KeyStoreException from label03 to label14 with label16;
        catch java.security.NoSuchProviderException from label03 to label14 with label17;
        catch java.security.NoSuchAlgorithmException from label03 to label14 with label18;
    }

    public void prepareDocumentForEncryption(org.apache.pdfbox.pdmodel.PDDocument) throws org.apache.pdfbox.exceptions.CryptographyException
    {
        byte[] $r8, $r12, $r13, $r14, $r18, $r19, $r20, $r22, $r29, $r32, r42, r43;
        org.apache.pdfbox.pdmodel.encryption.PublicKeyRecipient r41;
        java.security.SecureRandom $r6;
        byte b13, b15, b17, b19;
        org.apache.pdfbox.pdmodel.PDDocument r1;
        java.lang.Exception $r33;
        byte[][] $r31;
        java.security.NoSuchAlgorithmException $r38;
        javax.crypto.SecretKey $r7;
        org.bouncycastle.asn1.DERObject $r26;
        java.io.ByteArrayOutputStream $r27;
        org.apache.pdfbox.cos.COSString $r17, $r21;
        org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler r3;
        org.apache.pdfbox.cos.COSDocument $r15;
        org.bouncycastle.jce.provider.BouncyCastleProvider $r0;
        org.bouncycastle.asn1.DEROutputStream $r28;
        java.security.cert.X509Certificate $r24;
        org.apache.pdfbox.exceptions.CryptographyException $r35, $r37, $r39;
        javax.crypto.KeyGenerator $r5;
        boolean $z0;
        org.apache.pdfbox.pdmodel.encryption.AccessPermission $r25;
        org.apache.pdfbox.cos.COSDictionary $r16;
        java.security.MessageDigest $r11;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14, $i16, i18, i20, i21, i22, i23;
        org.apache.pdfbox.pdmodel.encryption.PublicKeyProtectionPolicy $r4, $r9;
        java.util.Iterator $r10;
        org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary $r2, $r30, r40;
        java.lang.Object $r23;
        org.apache.commons.logging.Log $r34;
        java.security.NoSuchProviderException $r36;

        r3 := @this: org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler;

        r1 := @parameter0: org.apache.pdfbox.pdmodel.PDDocument;

     label01:
        $r0 = new org.bouncycastle.jce.provider.BouncyCastleProvider;

        specialinvoke $r0.<org.bouncycastle.jce.provider.BouncyCastleProvider: void <init>()>();

        staticinvoke <java.security.Security: int addProvider(java.security.Provider)>($r0);

        $r2 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary getEncryptionDictionary()>();

        r40 = $r2;

        if $r2 != null goto label02;

        $r30 = new org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary;

        specialinvoke $r30.<org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary: void <init>()>();

        r40 = $r30;

     label02:
        virtualinvoke r40.<org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary: void setFilter(java.lang.String)>("Adobe.PubSec");

        $i0 = r3.<org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler: int keyLength>;

        virtualinvoke r40.<org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary: void setLength(int)>($i0);

        virtualinvoke r40.<org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary: void setVersion(int)>(2);

        virtualinvoke r40.<org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary: void setSubFilter(java.lang.String)>("adbe.pkcs7.s4");

        $r4 = r3.<org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler: org.apache.pdfbox.pdmodel.encryption.PublicKeyProtectionPolicy policy>;

        $i1 = virtualinvoke $r4.<org.apache.pdfbox.pdmodel.encryption.PublicKeyProtectionPolicy: int getRecipientsNumber()>();

        $r31 = newarray (byte[])[$i1];

        $r32 = newarray (byte)[20];

        $r5 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>("AES");

        $r6 = new java.security.SecureRandom;

        specialinvoke $r6.<java.security.SecureRandom: void <init>()>();

        virtualinvoke $r5.<javax.crypto.KeyGenerator: void init(int,java.security.SecureRandom)>(192, $r6);

        $r7 = virtualinvoke $r5.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>();

        $r8 = interfaceinvoke $r7.<javax.crypto.SecretKey: byte[] getEncoded()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, $r32, 0, 20);

        $r9 = r3.<org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler: org.apache.pdfbox.pdmodel.encryption.PublicKeyProtectionPolicy policy>;

        $r10 = virtualinvoke $r9.<org.apache.pdfbox.pdmodel.encryption.PublicKeyProtectionPolicy: java.util.Iterator getRecipientsIterator()>();

        i18 = 0;

     label03:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r23 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r41 = (org.apache.pdfbox.pdmodel.encryption.PublicKeyRecipient) $r23;

        $r24 = virtualinvoke r41.<org.apache.pdfbox.pdmodel.encryption.PublicKeyRecipient: java.security.cert.X509Certificate getX509()>();

        $r25 = virtualinvoke r41.<org.apache.pdfbox.pdmodel.encryption.PublicKeyRecipient: org.apache.pdfbox.pdmodel.encryption.AccessPermission getPermission()>();

        $i11 = virtualinvoke $r25.<org.apache.pdfbox.pdmodel.encryption.AccessPermission: int getPermissionBytesForPublicKey()>();

        r42 = newarray (byte)[24];

        b19 = (byte) $i11;

        $i12 = $i11 >>> 8;

        b13 = (byte) $i12;

        $i14 = $i11 >>> 16;

        b15 = (byte) $i14;

        $i16 = $i11 >>> 24;

        b17 = (byte) $i16;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r32, 0, r42, 0, 20);

        r42[20] = b17;

        r42[21] = b15;

        r42[22] = b13;

        r42[23] = b19;

        $r26 = specialinvoke r3.<org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler: org.bouncycastle.asn1.DERObject createDERForRecipient(byte[],java.security.cert.X509Certificate)>(r42, $r24);

        $r27 = new java.io.ByteArrayOutputStream;

        specialinvoke $r27.<java.io.ByteArrayOutputStream: void <init>()>();

        $r28 = new org.bouncycastle.asn1.DEROutputStream;

        specialinvoke $r28.<org.bouncycastle.asn1.DEROutputStream: void <init>(java.io.OutputStream)>($r27);

        virtualinvoke $r28.<org.bouncycastle.asn1.DEROutputStream: void writeObject(java.lang.Object)>($r26);

        $r29 = virtualinvoke $r27.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r31[i18] = $r29;

        i18 = i18 + 1;

        goto label03;

     label04:
        virtualinvoke r40.<org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary: void setRecipients(byte[][])>($r31);

        i20 = lengthof $r32;

        i21 = 0;

     label05:
        $i2 = virtualinvoke r40.<org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary: int getRecipientsLength()>();

        if i21 >= $i2 goto label06;

        $r21 = virtualinvoke r40.<org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary: org.apache.pdfbox.cos.COSString getRecipientStringAt(int)>(i21);

        $r22 = virtualinvoke $r21.<org.apache.pdfbox.cos.COSString: byte[] getBytes()>();

        $i10 = lengthof $r22;

        i20 = i20 + $i10;

        i21 = i21 + 1;

        goto label05;

     label06:
        r43 = newarray (byte)[i20];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r32, 0, r43, 0, 20);

        i22 = 20;

        i23 = 0;

     label07:
        $i3 = virtualinvoke r40.<org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary: int getRecipientsLength()>();

        if i23 >= $i3 goto label08;

        $r17 = virtualinvoke r40.<org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary: org.apache.pdfbox.cos.COSString getRecipientStringAt(int)>(i23);

        $r18 = virtualinvoke $r17.<org.apache.pdfbox.cos.COSString: byte[] getBytes()>();

        $r19 = virtualinvoke $r17.<org.apache.pdfbox.cos.COSString: byte[] getBytes()>();

        $i8 = lengthof $r19;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r18, 0, r43, i22, $i8);

        $r20 = virtualinvoke $r17.<org.apache.pdfbox.cos.COSString: byte[] getBytes()>();

        $i9 = lengthof $r20;

        i22 = i22 + $i9;

        i23 = i23 + 1;

        goto label07;

     label08:
        $r11 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-1");

        $r12 = virtualinvoke $r11.<java.security.MessageDigest: byte[] digest(byte[])>(r43);

        $i4 = r3.<org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler: int keyLength>;

        $i5 = $i4 / 8;

        $r13 = newarray (byte)[$i5];

        r3.<org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler: byte[] encryptionKey> = $r13;

        $r14 = r3.<org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler: byte[] encryptionKey>;

        $i6 = r3.<org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler: int keyLength>;

        $i7 = $i6 / 8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, 0, $r14, 0, $i7);

        virtualinvoke r1.<org.apache.pdfbox.pdmodel.PDDocument: void setEncryptionDictionary(org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary)>(r40);

        $r15 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.cos.COSDocument getDocument()>();

        $r16 = r40.<org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary: org.apache.pdfbox.cos.COSDictionary encryptionDictionary>;

        virtualinvoke $r15.<org.apache.pdfbox.cos.COSDocument: void setEncryptionDictionary(org.apache.pdfbox.cos.COSDictionary)>($r16);

     label09:
        goto label13;

     label10:
        $r38 := @caughtexception;

        $r39 = new org.apache.pdfbox.exceptions.CryptographyException;

        specialinvoke $r39.<org.apache.pdfbox.exceptions.CryptographyException: void <init>(java.lang.Exception)>($r38);

        throw $r39;

     label11:
        $r36 := @caughtexception;

        $r37 = new org.apache.pdfbox.exceptions.CryptographyException;

        specialinvoke $r37.<org.apache.pdfbox.exceptions.CryptographyException: void <init>(java.lang.Exception)>($r36);

        throw $r37;

     label12:
        $r33 := @caughtexception;

        $r34 = <org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r34.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>($r33, $r33);

        $r35 = new org.apache.pdfbox.exceptions.CryptographyException;

        specialinvoke $r35.<org.apache.pdfbox.exceptions.CryptographyException: void <init>(java.lang.Exception)>($r33);

        throw $r35;

     label13:
        return;

        catch java.security.NoSuchAlgorithmException from label01 to label09 with label10;
        catch java.security.NoSuchProviderException from label01 to label09 with label11;
        catch java.lang.Exception from label01 to label09 with label12;
    }

    private org.bouncycastle.asn1.DERObject createDERForRecipient(byte[], java.security.cert.X509Certificate) throws java.io.IOException, java.security.GeneralSecurityException
    {
        java.security.cert.X509Certificate r13;
        byte[] $r3, r9, $r10, $r14;
        java.security.AlgorithmParameterGenerator $r0;
        org.bouncycastle.asn1.DERObject $r5, $r25;
        org.bouncycastle.asn1.cms.EncryptedContentInfo $r20;
        org.bouncycastle.asn1.DEROctetString $r11;
        org.bouncycastle.asn1.ASN1InputStream $r4;
        javax.crypto.Cipher $r8;
        javax.crypto.KeyGenerator $r6;
        org.bouncycastle.asn1.cms.KeyTransRecipientInfo $r15;
        java.io.ByteArrayInputStream $r2;
        org.bouncycastle.asn1.cms.EnvelopedData $r22;
        org.bouncycastle.asn1.cms.RecipientInfo $r17;
        org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler r12;
        org.bouncycastle.asn1.DERObjectIdentifier $r19, $r21, $r24;
        java.security.AlgorithmParameters $r1;
        org.bouncycastle.asn1.DERSet $r16;
        org.bouncycastle.asn1.cms.ContentInfo $r23;
        javax.crypto.SecretKey $r7;
        org.bouncycastle.asn1.x509.AlgorithmIdentifier $r18;

        r12 := @this: org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler;

        r9 := @parameter0: byte[];

        r13 := @parameter1: java.security.cert.X509Certificate;

        $r0 = staticinvoke <java.security.AlgorithmParameterGenerator: java.security.AlgorithmParameterGenerator getInstance(java.lang.String)>("1.2.840.113549.3.2");

        $r1 = virtualinvoke $r0.<java.security.AlgorithmParameterGenerator: java.security.AlgorithmParameters generateParameters()>();

        $r2 = new java.io.ByteArrayInputStream;

        $r3 = virtualinvoke $r1.<java.security.AlgorithmParameters: byte[] getEncoded(java.lang.String)>("ASN.1");

        specialinvoke $r2.<java.io.ByteArrayInputStream: void <init>(byte[])>($r3);

        $r4 = new org.bouncycastle.asn1.ASN1InputStream;

        specialinvoke $r4.<org.bouncycastle.asn1.ASN1InputStream: void <init>(java.io.InputStream)>($r2);

        $r5 = virtualinvoke $r4.<org.bouncycastle.asn1.ASN1InputStream: org.bouncycastle.asn1.DERObject readObject()>();

        $r6 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>("1.2.840.113549.3.2");

        virtualinvoke $r6.<javax.crypto.KeyGenerator: void init(int)>(128);

        $r7 = virtualinvoke $r6.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>();

        $r8 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("1.2.840.113549.3.2");

        virtualinvoke $r8.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters)>(1, $r7, $r1);

        $r10 = virtualinvoke $r8.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r9);

        $r11 = new org.bouncycastle.asn1.DEROctetString;

        specialinvoke $r11.<org.bouncycastle.asn1.DEROctetString: void <init>(byte[])>($r10);

        $r14 = interfaceinvoke $r7.<javax.crypto.SecretKey: byte[] getEncoded()>();

        $r15 = specialinvoke r12.<org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler: org.bouncycastle.asn1.cms.KeyTransRecipientInfo computeRecipientInfo(java.security.cert.X509Certificate,byte[])>(r13, $r14);

        $r16 = new org.bouncycastle.asn1.DERSet;

        $r17 = new org.bouncycastle.asn1.cms.RecipientInfo;

        specialinvoke $r17.<org.bouncycastle.asn1.cms.RecipientInfo: void <init>(org.bouncycastle.asn1.cms.KeyTransRecipientInfo)>($r15);

        specialinvoke $r16.<org.bouncycastle.asn1.DERSet: void <init>(org.bouncycastle.asn1.DEREncodable)>($r17);

        $r18 = new org.bouncycastle.asn1.x509.AlgorithmIdentifier;

        $r19 = new org.bouncycastle.asn1.DERObjectIdentifier;

        specialinvoke $r19.<org.bouncycastle.asn1.DERObjectIdentifier: void <init>(java.lang.String)>("1.2.840.113549.3.2");

        specialinvoke $r18.<org.bouncycastle.asn1.x509.AlgorithmIdentifier: void <init>(org.bouncycastle.asn1.DERObjectIdentifier,org.bouncycastle.asn1.DEREncodable)>($r19, $r5);

        $r20 = new org.bouncycastle.asn1.cms.EncryptedContentInfo;

        $r21 = <org.bouncycastle.asn1.pkcs.PKCSObjectIdentifiers: org.bouncycastle.asn1.DERObjectIdentifier data>;

        specialinvoke $r20.<org.bouncycastle.asn1.cms.EncryptedContentInfo: void <init>(org.bouncycastle.asn1.DERObjectIdentifier,org.bouncycastle.asn1.x509.AlgorithmIdentifier,org.bouncycastle.asn1.ASN1OctetString)>($r21, $r18, $r11);

        $r22 = new org.bouncycastle.asn1.cms.EnvelopedData;

        specialinvoke $r22.<org.bouncycastle.asn1.cms.EnvelopedData: void <init>(org.bouncycastle.asn1.cms.OriginatorInfo,org.bouncycastle.asn1.ASN1Set,org.bouncycastle.asn1.cms.EncryptedContentInfo,org.bouncycastle.asn1.ASN1Set)>(null, $r16, $r20, null);

        $r23 = new org.bouncycastle.asn1.cms.ContentInfo;

        $r24 = <org.bouncycastle.asn1.pkcs.PKCSObjectIdentifiers: org.bouncycastle.asn1.DERObjectIdentifier envelopedData>;

        specialinvoke $r23.<org.bouncycastle.asn1.cms.ContentInfo: void <init>(org.bouncycastle.asn1.DERObjectIdentifier,org.bouncycastle.asn1.DEREncodable)>($r24, $r22);

        $r25 = virtualinvoke $r23.<org.bouncycastle.asn1.cms.ContentInfo: org.bouncycastle.asn1.DERObject getDERObject()>();

        return $r25;
    }

    private org.bouncycastle.asn1.cms.KeyTransRecipientInfo computeRecipientInfo(java.security.cert.X509Certificate, byte[]) throws java.security.GeneralSecurityException, java.io.IOException
    {
        java.security.cert.X509Certificate r2;
        byte[] $r3, r17, $r18;
        org.bouncycastle.asn1.x509.SubjectPublicKeyInfo $r6;
        org.bouncycastle.asn1.DERObject $r4;
        org.bouncycastle.asn1.DEROctetString $r16;
        org.bouncycastle.asn1.ASN1InputStream $r0;
        javax.crypto.Cipher $r14;
        org.bouncycastle.asn1.cms.KeyTransRecipientInfo $r20;
        java.io.ByteArrayInputStream $r1;
        org.bouncycastle.asn1.cms.RecipientIdentifier $r19;
        java.math.BigInteger $r11;
        java.lang.String $r13;
        org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler r21;
        org.bouncycastle.asn1.DERObjectIdentifier $r12;
        org.bouncycastle.asn1.x509.X509Name $r9;
        org.bouncycastle.asn1.x509.TBSCertificateStructure $r5;
        java.security.PublicKey $r15;
        org.bouncycastle.asn1.DERInteger $r10;
        org.bouncycastle.asn1.cms.IssuerAndSerialNumber $r8;
        org.bouncycastle.asn1.x509.AlgorithmIdentifier $r7;

        r21 := @this: org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler;

        r2 := @parameter0: java.security.cert.X509Certificate;

        r17 := @parameter1: byte[];

        $r0 = new org.bouncycastle.asn1.ASN1InputStream;

        $r1 = new java.io.ByteArrayInputStream;

        $r3 = virtualinvoke r2.<java.security.cert.X509Certificate: byte[] getTBSCertificate()>();

        specialinvoke $r1.<java.io.ByteArrayInputStream: void <init>(byte[])>($r3);

        specialinvoke $r0.<org.bouncycastle.asn1.ASN1InputStream: void <init>(java.io.InputStream)>($r1);

        $r4 = virtualinvoke $r0.<org.bouncycastle.asn1.ASN1InputStream: org.bouncycastle.asn1.DERObject readObject()>();

        $r5 = staticinvoke <org.bouncycastle.asn1.x509.TBSCertificateStructure: org.bouncycastle.asn1.x509.TBSCertificateStructure getInstance(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<org.bouncycastle.asn1.x509.TBSCertificateStructure: org.bouncycastle.asn1.x509.SubjectPublicKeyInfo getSubjectPublicKeyInfo()>();

        $r7 = virtualinvoke $r6.<org.bouncycastle.asn1.x509.SubjectPublicKeyInfo: org.bouncycastle.asn1.x509.AlgorithmIdentifier getAlgorithmId()>();

        $r8 = new org.bouncycastle.asn1.cms.IssuerAndSerialNumber;

        $r9 = virtualinvoke $r5.<org.bouncycastle.asn1.x509.TBSCertificateStructure: org.bouncycastle.asn1.x509.X509Name getIssuer()>();

        $r10 = virtualinvoke $r5.<org.bouncycastle.asn1.x509.TBSCertificateStructure: org.bouncycastle.asn1.DERInteger getSerialNumber()>();

        $r11 = virtualinvoke $r10.<org.bouncycastle.asn1.DERInteger: java.math.BigInteger getValue()>();

        specialinvoke $r8.<org.bouncycastle.asn1.cms.IssuerAndSerialNumber: void <init>(org.bouncycastle.asn1.x509.X509Name,java.math.BigInteger)>($r9, $r11);

        $r12 = virtualinvoke $r7.<org.bouncycastle.asn1.x509.AlgorithmIdentifier: org.bouncycastle.asn1.DERObjectIdentifier getObjectId()>();

        $r13 = virtualinvoke $r12.<org.bouncycastle.asn1.DERObjectIdentifier: java.lang.String getId()>();

        $r14 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r13);

        $r15 = virtualinvoke r2.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();

        virtualinvoke $r14.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, $r15);

        $r16 = new org.bouncycastle.asn1.DEROctetString;

        $r18 = virtualinvoke $r14.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r17);

        specialinvoke $r16.<org.bouncycastle.asn1.DEROctetString: void <init>(byte[])>($r18);

        $r19 = new org.bouncycastle.asn1.cms.RecipientIdentifier;

        specialinvoke $r19.<org.bouncycastle.asn1.cms.RecipientIdentifier: void <init>(org.bouncycastle.asn1.cms.IssuerAndSerialNumber)>($r8);

        $r20 = new org.bouncycastle.asn1.cms.KeyTransRecipientInfo;

        specialinvoke $r20.<org.bouncycastle.asn1.cms.KeyTransRecipientInfo: void <init>(org.bouncycastle.asn1.cms.RecipientIdentifier,org.bouncycastle.asn1.x509.AlgorithmIdentifier,org.bouncycastle.asn1.ASN1OctetString)>($r19, $r7, $r16);

        return $r20;
    }

    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;

        <org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler: java.lang.String SUBFILTER> = "adbe.pkcs7.s4";

        <org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler: java.lang.String FILTER> = "Adobe.PubSec";

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler;");

        <org.apache.pdfbox.pdmodel.encryption.PublicKeySecurityHandler: org.apache.commons.logging.Log LOG> = $r0;

        return;
    }
}
