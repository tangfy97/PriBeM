public class org.mortbay.thread.BoundedThreadPool extends org.mortbay.component.AbstractLifeCycle implements java.io.Serializable, org.mortbay.thread.ThreadPool
{
    private static int __id;
    private boolean _daemon;
    private int _id;
    private java.util.List _idle;
    private final java.lang.Object _lock;
    private final java.lang.Object _joinLock;
    private long _lastShrink;
    private int _maxIdleTimeMs;
    private int _maxThreads;
    private int _minThreads;
    private java.lang.String _name;
    private java.util.List _queue;
    private java.util.Set _threads;
    private boolean _warned;
    int _lowThreads;
    int _priority;

    public void <init>()
    {
        org.mortbay.thread.BoundedThreadPool r0;
        java.lang.StringBuffer $r4, $r5, $r9;
        int $i0, $i1, $i3;
        java.lang.Object $r7, $r8;
        java.lang.String $r6;

        r0 := @this: org.mortbay.thread.BoundedThreadPool;

        specialinvoke r0.<org.mortbay.component.AbstractLifeCycle: void <init>()>();

        $r7 = new java.lang.Object;

        specialinvoke $r7.<java.lang.Object: void <init>()>();

        r0.<org.mortbay.thread.BoundedThreadPool: java.lang.Object _lock> = $r7;

        $r8 = new java.lang.Object;

        specialinvoke $r8.<java.lang.Object: void <init>()>();

        r0.<org.mortbay.thread.BoundedThreadPool: java.lang.Object _joinLock> = $r8;

        $i3 = (int) 60000;

        r0.<org.mortbay.thread.BoundedThreadPool: int _maxIdleTimeMs> = $i3;

        r0.<org.mortbay.thread.BoundedThreadPool: int _maxThreads> = 255;

        r0.<org.mortbay.thread.BoundedThreadPool: int _minThreads> = 1;

        r0.<org.mortbay.thread.BoundedThreadPool: boolean _warned> = 0;

        r0.<org.mortbay.thread.BoundedThreadPool: int _lowThreads> = 0;

        r0.<org.mortbay.thread.BoundedThreadPool: int _priority> = 5;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("btpool");

        $i0 = <org.mortbay.thread.BoundedThreadPool: int __id>;

        $i1 = $i0 + 1;

        <org.mortbay.thread.BoundedThreadPool: int __id> = $i1;

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        r0.<org.mortbay.thread.BoundedThreadPool: java.lang.String _name> = $r6;

        return;
    }

    public boolean dispatch(java.lang.Runnable)
    {
        java.lang.Throwable $r9;
        org.mortbay.thread.BoundedThreadPool$PoolThread r8;
        java.lang.Runnable r2;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1;
        java.util.Set $r4;
        org.mortbay.thread.BoundedThreadPool r0;
        java.util.List $r3, $r5, $r6;
        java.lang.Object $r1, $r7;

        r0 := @this: org.mortbay.thread.BoundedThreadPool;

        r2 := @parameter0: java.lang.Runnable;

        $r1 = r0.<org.mortbay.thread.BoundedThreadPool: java.lang.Object _lock>;

        entermonitor $r1;

     label01:
        $z0 = virtualinvoke r0.<org.mortbay.thread.BoundedThreadPool: boolean isRunning()>();

        if $z0 == 0 goto label02;

        if r2 != null goto label04;

     label02:
        exitmonitor $r1;

     label03:
        return 0;

     label04:
        $r3 = r0.<org.mortbay.thread.BoundedThreadPool: java.util.List _idle>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i0 <= 0 goto label05;

        $r6 = r0.<org.mortbay.thread.BoundedThreadPool: java.util.List _idle>;

        $i3 = $i0 - 1;

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object remove(int)>($i3);

        r8 = (org.mortbay.thread.BoundedThreadPool$PoolThread) $r7;

        virtualinvoke r8.<org.mortbay.thread.BoundedThreadPool$PoolThread: void dispatch(java.lang.Runnable)>(r2);

        goto label08;

     label05:
        $r4 = r0.<org.mortbay.thread.BoundedThreadPool: java.util.Set _threads>;

        $i1 = interfaceinvoke $r4.<java.util.Set: int size()>();

        $i2 = r0.<org.mortbay.thread.BoundedThreadPool: int _maxThreads>;

        if $i1 >= $i2 goto label06;

        virtualinvoke r0.<org.mortbay.thread.BoundedThreadPool: org.mortbay.thread.BoundedThreadPool$PoolThread newThread(java.lang.Runnable)>(r2);

        goto label08;

     label06:
        $z1 = r0.<org.mortbay.thread.BoundedThreadPool: boolean _warned>;

        if $z1 != 0 goto label07;

        r0.<org.mortbay.thread.BoundedThreadPool: boolean _warned> = 1;

        staticinvoke <org.mortbay.log.Log: void debug(java.lang.String,java.lang.Object)>("Out of threads for {}", r0);

     label07:
        $r5 = r0.<org.mortbay.thread.BoundedThreadPool: java.util.List _queue>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r2);

     label08:
        exitmonitor $r1;

     label09:
        goto label12;

     label10:
        $r9 := @caughtexception;

        exitmonitor $r1;

     label11:
        throw $r9;

     label12:
        return 1;

        catch java.lang.Throwable from label01 to label03 with label10;
        catch java.lang.Throwable from label04 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public int getIdleThreads()
    {
        java.util.List $r1, $r2;
        int $i0;
        org.mortbay.thread.BoundedThreadPool r0;

        r0 := @this: org.mortbay.thread.BoundedThreadPool;

        $r1 = r0.<org.mortbay.thread.BoundedThreadPool: java.util.List _idle>;

        if $r1 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $r2 = r0.<org.mortbay.thread.BoundedThreadPool: java.util.List _idle>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

     label2:
        return $i0;
    }

    public int getLowThreads()
    {
        int $i0;
        org.mortbay.thread.BoundedThreadPool r0;

        r0 := @this: org.mortbay.thread.BoundedThreadPool;

        $i0 = r0.<org.mortbay.thread.BoundedThreadPool: int _lowThreads>;

        return $i0;
    }

    public int getMaxIdleTimeMs()
    {
        int $i0;
        org.mortbay.thread.BoundedThreadPool r0;

        r0 := @this: org.mortbay.thread.BoundedThreadPool;

        $i0 = r0.<org.mortbay.thread.BoundedThreadPool: int _maxIdleTimeMs>;

        return $i0;
    }

    public int getMaxThreads()
    {
        int $i0;
        org.mortbay.thread.BoundedThreadPool r0;

        r0 := @this: org.mortbay.thread.BoundedThreadPool;

        $i0 = r0.<org.mortbay.thread.BoundedThreadPool: int _maxThreads>;

        return $i0;
    }

    public int getMinThreads()
    {
        int $i0;
        org.mortbay.thread.BoundedThreadPool r0;

        r0 := @this: org.mortbay.thread.BoundedThreadPool;

        $i0 = r0.<org.mortbay.thread.BoundedThreadPool: int _minThreads>;

        return $i0;
    }

    public java.lang.String getName()
    {
        java.lang.String $r1;
        org.mortbay.thread.BoundedThreadPool r0;

        r0 := @this: org.mortbay.thread.BoundedThreadPool;

        $r1 = r0.<org.mortbay.thread.BoundedThreadPool: java.lang.String _name>;

        return $r1;
    }

    public int getThreads()
    {
        int $i0;
        java.util.Set $r1;
        org.mortbay.thread.BoundedThreadPool r0;

        r0 := @this: org.mortbay.thread.BoundedThreadPool;

        $r1 = r0.<org.mortbay.thread.BoundedThreadPool: java.util.Set _threads>;

        $i0 = interfaceinvoke $r1.<java.util.Set: int size()>();

        return $i0;
    }

    public int getThreadsPriority()
    {
        int $i0;
        org.mortbay.thread.BoundedThreadPool r0;

        r0 := @this: org.mortbay.thread.BoundedThreadPool;

        $i0 = r0.<org.mortbay.thread.BoundedThreadPool: int _priority>;

        return $i0;
    }

    public int getQueueSize()
    {
        java.lang.Throwable $r3;
        java.util.List $r2;
        int $i0;
        java.lang.Object $r1;
        org.mortbay.thread.BoundedThreadPool r0;

        r0 := @this: org.mortbay.thread.BoundedThreadPool;

        $r1 = r0.<org.mortbay.thread.BoundedThreadPool: java.lang.Object _lock>;

        entermonitor $r1;

     label1:
        $r2 = r0.<org.mortbay.thread.BoundedThreadPool: java.util.List _queue>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        exitmonitor $r1;

     label2:
        return $i0;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean isDaemon()
    {
        org.mortbay.thread.BoundedThreadPool r0;
        boolean $z0;

        r0 := @this: org.mortbay.thread.BoundedThreadPool;

        $z0 = r0.<org.mortbay.thread.BoundedThreadPool: boolean _daemon>;

        return $z0;
    }

    public boolean isLowOnThreads()
    {
        java.lang.Throwable $r3;
        java.util.List $r2;
        int $i0, $i1;
        java.lang.Object $r1;
        org.mortbay.thread.BoundedThreadPool r0;
        boolean $z0;

        r0 := @this: org.mortbay.thread.BoundedThreadPool;

        $r1 = r0.<org.mortbay.thread.BoundedThreadPool: java.lang.Object _lock>;

        entermonitor $r1;

     label1:
        $r2 = r0.<org.mortbay.thread.BoundedThreadPool: java.util.List _queue>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i1 = r0.<org.mortbay.thread.BoundedThreadPool: int _lowThreads>;

        if $i0 <= $i1 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        exitmonitor $r1;

     label4:
        return $z0;

     label5:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void join() throws java.lang.InterruptedException
    {
        java.lang.Throwable $r3;
        java.lang.Object $r1, $r2;
        org.mortbay.thread.BoundedThreadPool r0;
        boolean $z0, $z1;

        r0 := @this: org.mortbay.thread.BoundedThreadPool;

        $r1 = r0.<org.mortbay.thread.BoundedThreadPool: java.lang.Object _joinLock>;

        entermonitor $r1;

     label1:
        $z0 = virtualinvoke r0.<org.mortbay.thread.BoundedThreadPool: boolean isRunning()>();

        if $z0 == 0 goto label2;

        $r2 = r0.<org.mortbay.thread.BoundedThreadPool: java.lang.Object _joinLock>;

        virtualinvoke $r2.<java.lang.Object: void wait()>();

        goto label1;

     label2:
        exitmonitor $r1;

     label3:
        goto label6;

     label4:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r3;

     label6:
        $z1 = virtualinvoke r0.<org.mortbay.thread.BoundedThreadPool: boolean isStopping()>();

        if $z1 == 0 goto label7;

        staticinvoke <java.lang.Thread: void sleep(long)>(10L);

        goto label6;

     label7:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void setDaemon(boolean)
    {
        org.mortbay.thread.BoundedThreadPool r0;
        boolean z0;

        r0 := @this: org.mortbay.thread.BoundedThreadPool;

        z0 := @parameter0: boolean;

        r0.<org.mortbay.thread.BoundedThreadPool: boolean _daemon> = z0;

        return;
    }

    public void setLowThreads(int)
    {
        int i0;
        org.mortbay.thread.BoundedThreadPool r0;

        r0 := @this: org.mortbay.thread.BoundedThreadPool;

        i0 := @parameter0: int;

        r0.<org.mortbay.thread.BoundedThreadPool: int _lowThreads> = i0;

        return;
    }

    public void setMaxIdleTimeMs(int)
    {
        int i0;
        org.mortbay.thread.BoundedThreadPool r0;

        r0 := @this: org.mortbay.thread.BoundedThreadPool;

        i0 := @parameter0: int;

        r0.<org.mortbay.thread.BoundedThreadPool: int _maxIdleTimeMs> = i0;

        return;
    }

    public void setMaxThreads(int)
    {
        int i0, $i1;
        java.lang.IllegalArgumentException $r1;
        org.mortbay.thread.BoundedThreadPool r0;
        boolean $z0;

        r0 := @this: org.mortbay.thread.BoundedThreadPool;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<org.mortbay.thread.BoundedThreadPool: boolean isStarted()>();

        if $z0 == 0 goto label1;

        $i1 = r0.<org.mortbay.thread.BoundedThreadPool: int _minThreads>;

        if i0 >= $i1 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("!minThreads<maxThreads");

        throw $r1;

     label1:
        r0.<org.mortbay.thread.BoundedThreadPool: int _maxThreads> = i0;

        return;
    }

    public void setMinThreads(int)
    {
        java.lang.Throwable $r4;
        java.util.Set $r2;
        java.lang.IllegalArgumentException $r3;
        org.mortbay.thread.BoundedThreadPool r0;
        int i0, $i1, $i2, $i3;
        java.lang.Object $r1;
        boolean $z0, $z1;

        r0 := @this: org.mortbay.thread.BoundedThreadPool;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<org.mortbay.thread.BoundedThreadPool: boolean isStarted()>();

        if $z0 == 0 goto label2;

        if i0 <= 0 goto label1;

        $i3 = r0.<org.mortbay.thread.BoundedThreadPool: int _maxThreads>;

        if i0 <= $i3 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("!0<=minThreads<maxThreads");

        throw $r3;

     label2:
        r0.<org.mortbay.thread.BoundedThreadPool: int _minThreads> = i0;

        $r1 = r0.<org.mortbay.thread.BoundedThreadPool: java.lang.Object _lock>;

        entermonitor $r1;

     label3:
        $z1 = virtualinvoke r0.<org.mortbay.thread.BoundedThreadPool: boolean isStarted()>();

        if $z1 == 0 goto label4;

        $r2 = r0.<org.mortbay.thread.BoundedThreadPool: java.util.Set _threads>;

        $i1 = interfaceinvoke $r2.<java.util.Set: int size()>();

        $i2 = r0.<org.mortbay.thread.BoundedThreadPool: int _minThreads>;

        if $i1 >= $i2 goto label4;

        virtualinvoke r0.<org.mortbay.thread.BoundedThreadPool: org.mortbay.thread.BoundedThreadPool$PoolThread newThread(java.lang.Runnable)>(null);

        goto label3;

     label4:
        exitmonitor $r1;

     label5:
        goto label8;

     label6:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label7:
        throw $r4;

     label8:
        return;

        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void setName(java.lang.String)
    {
        java.lang.String r1;
        org.mortbay.thread.BoundedThreadPool r0;

        r0 := @this: org.mortbay.thread.BoundedThreadPool;

        r1 := @parameter0: java.lang.String;

        r0.<org.mortbay.thread.BoundedThreadPool: java.lang.String _name> = r1;

        return;
    }

    public void setThreadsPriority(int)
    {
        int i0;
        org.mortbay.thread.BoundedThreadPool r0;

        r0 := @this: org.mortbay.thread.BoundedThreadPool;

        i0 := @parameter0: int;

        r0.<org.mortbay.thread.BoundedThreadPool: int _priority> = i0;

        return;
    }

    protected void doStart() throws java.lang.Exception
    {
        java.lang.IllegalArgumentException $r1;
        org.mortbay.thread.BoundedThreadPool r0;
        java.util.ArrayList $r3;
        java.util.HashSet $r2;
        int $i0, $i1, $i2, $i3, i4;
        java.util.LinkedList $r4;

        r0 := @this: org.mortbay.thread.BoundedThreadPool;

        $i1 = r0.<org.mortbay.thread.BoundedThreadPool: int _maxThreads>;

        $i0 = r0.<org.mortbay.thread.BoundedThreadPool: int _minThreads>;

        if $i1 < $i0 goto label1;

        $i2 = r0.<org.mortbay.thread.BoundedThreadPool: int _minThreads>;

        if $i2 > 0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("!0<minThreads<maxThreads");

        throw $r1;

     label2:
        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<org.mortbay.thread.BoundedThreadPool: java.util.Set _threads> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.mortbay.thread.BoundedThreadPool: java.util.List _idle> = $r3;

        $r4 = new java.util.LinkedList;

        specialinvoke $r4.<java.util.LinkedList: void <init>()>();

        r0.<org.mortbay.thread.BoundedThreadPool: java.util.List _queue> = $r4;

        i4 = 0;

     label3:
        $i3 = r0.<org.mortbay.thread.BoundedThreadPool: int _minThreads>;

        if i4 >= $i3 goto label4;

        virtualinvoke r0.<org.mortbay.thread.BoundedThreadPool: org.mortbay.thread.BoundedThreadPool$PoolThread newThread(java.lang.Runnable)>(null);

        i4 = i4 + 1;

        goto label3;

     label4:
        return;
    }

    protected void doStop() throws java.lang.Exception
    {
        java.lang.Throwable $r15, $r17;
        long $l4;
        java.lang.StringBuffer $r4, $r6, $r7;
        java.lang.Thread $r14;
        int $i0, $i1, $i2, $i3, i5;
        java.lang.String $r8;
        boolean $z0;
        java.util.Iterator $r11;
        java.util.Set $r1, $r5, $r10, $r12;
        org.mortbay.thread.BoundedThreadPool r0;
        java.lang.InterruptedException $r16;
        java.lang.Object $r2, $r3, $r9, $r13;

        r0 := @this: org.mortbay.thread.BoundedThreadPool;

        specialinvoke r0.<org.mortbay.component.AbstractLifeCycle: void doStop()>();

        i5 = 0;

     label01:
        if i5 >= 100 goto label13;

        $r9 = r0.<org.mortbay.thread.BoundedThreadPool: java.lang.Object _lock>;

        entermonitor $r9;

     label02:
        $r10 = r0.<org.mortbay.thread.BoundedThreadPool: java.util.Set _threads>;

        $r11 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r13 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        $r14 = (java.lang.Thread) $r13;

        virtualinvoke $r14.<java.lang.Thread: void interrupt()>();

        goto label03;

     label04:
        exitmonitor $r9;

     label05:
        goto label08;

     label06:
        $r17 := @caughtexception;

        exitmonitor $r9;

     label07:
        throw $r17;

     label08:
        staticinvoke <java.lang.Thread: void yield()>();

        $r12 = r0.<org.mortbay.thread.BoundedThreadPool: java.util.Set _threads>;

        $i2 = interfaceinvoke $r12.<java.util.Set: int size()>();

        if $i2 != 0 goto label09;

        goto label13;

     label09:
        $i3 = i5 * 100;

        $l4 = (long) $i3;

        staticinvoke <java.lang.Thread: void sleep(long)>($l4);

     label10:
        goto label12;

     label11:
        $r16 := @caughtexception;

     label12:
        i5 = i5 + 1;

        goto label01;

     label13:
        $r1 = r0.<org.mortbay.thread.BoundedThreadPool: java.util.Set _threads>;

        $i0 = interfaceinvoke $r1.<java.util.Set: int size()>();

        if $i0 <= 0 goto label14;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = r0.<org.mortbay.thread.BoundedThreadPool: java.util.Set _threads>;

        $i1 = interfaceinvoke $r5.<java.util.Set: int size()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" threads could not be stopped");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.mortbay.log.Log: void warn(java.lang.String)>($r8);

     label14:
        $r2 = r0.<org.mortbay.thread.BoundedThreadPool: java.lang.Object _joinLock>;

        entermonitor $r2;

     label15:
        $r3 = r0.<org.mortbay.thread.BoundedThreadPool: java.lang.Object _joinLock>;

        virtualinvoke $r3.<java.lang.Object: void notifyAll()>();

        exitmonitor $r2;

     label16:
        goto label19;

     label17:
        $r15 := @caughtexception;

        exitmonitor $r2;

     label18:
        throw $r15;

     label19:
        return;

        catch java.lang.Throwable from label02 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.InterruptedException from label09 to label10 with label11;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    protected org.mortbay.thread.BoundedThreadPool$PoolThread newThread(java.lang.Runnable)
    {
        java.lang.Throwable $r11;
        java.util.Set $r4;
        org.mortbay.thread.BoundedThreadPool$PoolThread $r2;
        java.lang.Runnable r3;
        org.mortbay.thread.BoundedThreadPool r0;
        java.lang.StringBuffer $r5, $r7, $r8, $r9;
        int $i0, $i1;
        java.lang.Object $r1;
        java.lang.String $r6, $r10;

        r0 := @this: org.mortbay.thread.BoundedThreadPool;

        r3 := @parameter0: java.lang.Runnable;

        $r1 = r0.<org.mortbay.thread.BoundedThreadPool: java.lang.Object _lock>;

        entermonitor $r1;

     label1:
        $r2 = new org.mortbay.thread.BoundedThreadPool$PoolThread;

        specialinvoke $r2.<org.mortbay.thread.BoundedThreadPool$PoolThread: void <init>(org.mortbay.thread.BoundedThreadPool,java.lang.Runnable)>(r0, r3);

        $r4 = r0.<org.mortbay.thread.BoundedThreadPool: java.util.Set _threads>;

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r2);

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = r0.<org.mortbay.thread.BoundedThreadPool: java.lang.String _name>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-");

        $i0 = r0.<org.mortbay.thread.BoundedThreadPool: int _id>;

        $i1 = $i0 + 1;

        r0.<org.mortbay.thread.BoundedThreadPool: int _id> = $i1;

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<org.mortbay.thread.BoundedThreadPool$PoolThread: void setName(java.lang.String)>($r10);

        virtualinvoke $r2.<org.mortbay.thread.BoundedThreadPool$PoolThread: void start()>();

        exitmonitor $r1;

     label2:
        return $r2;

     label3:
        $r11 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r11;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected void stopJob(java.lang.Thread, java.lang.Object)
    {
        java.lang.Object r2;
        java.lang.Thread r0;
        org.mortbay.thread.BoundedThreadPool r1;

        r1 := @this: org.mortbay.thread.BoundedThreadPool;

        r0 := @parameter0: java.lang.Thread;

        r2 := @parameter1: java.lang.Object;

        virtualinvoke r0.<java.lang.Thread: void interrupt()>();

        return;
    }

    static boolean access$000(org.mortbay.thread.BoundedThreadPool)
    {
        org.mortbay.thread.BoundedThreadPool r0;
        boolean $z0;

        r0 := @parameter0: org.mortbay.thread.BoundedThreadPool;

        $z0 = r0.<org.mortbay.thread.BoundedThreadPool: boolean _daemon>;

        return $z0;
    }

    static java.lang.Object access$100(org.mortbay.thread.BoundedThreadPool)
    {
        java.lang.Object $r1;
        org.mortbay.thread.BoundedThreadPool r0;

        r0 := @parameter0: org.mortbay.thread.BoundedThreadPool;

        $r1 = r0.<org.mortbay.thread.BoundedThreadPool: java.lang.Object _lock>;

        return $r1;
    }

    static java.util.List access$200(org.mortbay.thread.BoundedThreadPool)
    {
        java.util.List $r1;
        org.mortbay.thread.BoundedThreadPool r0;

        r0 := @parameter0: org.mortbay.thread.BoundedThreadPool;

        $r1 = r0.<org.mortbay.thread.BoundedThreadPool: java.util.List _queue>;

        return $r1;
    }

    static boolean access$302(org.mortbay.thread.BoundedThreadPool, boolean)
    {
        org.mortbay.thread.BoundedThreadPool r0;
        boolean z0;

        r0 := @parameter0: org.mortbay.thread.BoundedThreadPool;

        z0 := @parameter1: boolean;

        r0.<org.mortbay.thread.BoundedThreadPool: boolean _warned> = z0;

        return z0;
    }

    static java.util.Set access$400(org.mortbay.thread.BoundedThreadPool)
    {
        java.util.Set $r1;
        org.mortbay.thread.BoundedThreadPool r0;

        r0 := @parameter0: org.mortbay.thread.BoundedThreadPool;

        $r1 = r0.<org.mortbay.thread.BoundedThreadPool: java.util.Set _threads>;

        return $r1;
    }

    static int access$500(org.mortbay.thread.BoundedThreadPool)
    {
        int $i0;
        org.mortbay.thread.BoundedThreadPool r0;

        r0 := @parameter0: org.mortbay.thread.BoundedThreadPool;

        $i0 = r0.<org.mortbay.thread.BoundedThreadPool: int _maxThreads>;

        return $i0;
    }

    static java.util.List access$600(org.mortbay.thread.BoundedThreadPool)
    {
        java.util.List $r1;
        org.mortbay.thread.BoundedThreadPool r0;

        r0 := @parameter0: org.mortbay.thread.BoundedThreadPool;

        $r1 = r0.<org.mortbay.thread.BoundedThreadPool: java.util.List _idle>;

        return $r1;
    }

    static int access$700(org.mortbay.thread.BoundedThreadPool)
    {
        int $i0;
        org.mortbay.thread.BoundedThreadPool r0;

        r0 := @parameter0: org.mortbay.thread.BoundedThreadPool;

        $i0 = r0.<org.mortbay.thread.BoundedThreadPool: int _minThreads>;

        return $i0;
    }

    static long access$800(org.mortbay.thread.BoundedThreadPool)
    {
        long $l0;
        org.mortbay.thread.BoundedThreadPool r0;

        r0 := @parameter0: org.mortbay.thread.BoundedThreadPool;

        $l0 = r0.<org.mortbay.thread.BoundedThreadPool: long _lastShrink>;

        return $l0;
    }

    static long access$802(org.mortbay.thread.BoundedThreadPool, long)
    {
        long l0;
        org.mortbay.thread.BoundedThreadPool r0;

        r0 := @parameter0: org.mortbay.thread.BoundedThreadPool;

        l0 := @parameter1: long;

        r0.<org.mortbay.thread.BoundedThreadPool: long _lastShrink> = l0;

        return l0;
    }
}
