public final enum class org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo extends java.lang.Enum
{
    public static final enum org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo TYPE;
    public static final enum org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo KEYSIGNAL;
    public static final enum org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo KEYCODE;
    public static final enum org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo GETSHIFT;
    public static final enum org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo GETALT;
    public static final enum org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo GETCTRL;
    public static final enum org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo GETMETA;
    public static final enum org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo GETCOMMAND;
    private static final java.lang.String EVENT_INFO_PREFIX;
    private static final org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo[] $VALUES;

    public static org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo[] values()
    {
        java.lang.Object $r1;
        org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo[] $r0, $r2;

        $r0 = <org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo: org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo[]) $r1;

        return $r2;
    }

    public static org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/waveprotocol/wave/client/editor/testtools/TestConstants$EventInfo;", r0);

        $r2 = (org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        int i0;
        java.lang.String r1;
        org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo r0;

        r0 := @this: org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    public java.lang.String className()
    {
        org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo r2;
        java.lang.StringBuilder $r0, $r1, $r5;
        java.lang.String $r3, $r4, $r6;

        r2 := @this: org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("event-info-");

        $r3 = virtualinvoke r2.<org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo: java.lang.String toString()>();

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String toLowerCase()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo[] $r8;

        <org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo: java.lang.String EVENT_INFO_PREFIX> = "event-info-";

        $r0 = new org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo;

        specialinvoke $r0.<org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo: void <init>(java.lang.String,int)>("TYPE", 0);

        <org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo: org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo TYPE> = $r0;

        $r1 = new org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo;

        specialinvoke $r1.<org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo: void <init>(java.lang.String,int)>("KEYSIGNAL", 1);

        <org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo: org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo KEYSIGNAL> = $r1;

        $r2 = new org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo;

        specialinvoke $r2.<org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo: void <init>(java.lang.String,int)>("KEYCODE", 2);

        <org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo: org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo KEYCODE> = $r2;

        $r3 = new org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo;

        specialinvoke $r3.<org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo: void <init>(java.lang.String,int)>("GETSHIFT", 3);

        <org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo: org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo GETSHIFT> = $r3;

        $r4 = new org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo;

        specialinvoke $r4.<org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo: void <init>(java.lang.String,int)>("GETALT", 4);

        <org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo: org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo GETALT> = $r4;

        $r5 = new org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo;

        specialinvoke $r5.<org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo: void <init>(java.lang.String,int)>("GETCTRL", 5);

        <org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo: org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo GETCTRL> = $r5;

        $r6 = new org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo;

        specialinvoke $r6.<org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo: void <init>(java.lang.String,int)>("GETMETA", 6);

        <org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo: org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo GETMETA> = $r6;

        $r7 = new org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo;

        specialinvoke $r7.<org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo: void <init>(java.lang.String,int)>("GETCOMMAND", 7);

        <org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo: org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo GETCOMMAND> = $r7;

        $r8 = newarray (org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo)[8];

        $r9 = <org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo: org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo TYPE>;

        $r8[0] = $r9;

        $r10 = <org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo: org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo KEYSIGNAL>;

        $r8[1] = $r10;

        $r11 = <org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo: org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo KEYCODE>;

        $r8[2] = $r11;

        $r12 = <org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo: org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo GETSHIFT>;

        $r8[3] = $r12;

        $r13 = <org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo: org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo GETALT>;

        $r8[4] = $r13;

        $r14 = <org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo: org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo GETCTRL>;

        $r8[5] = $r14;

        $r15 = <org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo: org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo GETMETA>;

        $r8[6] = $r15;

        $r16 = <org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo: org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo GETCOMMAND>;

        $r8[7] = $r16;

        <org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo: org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo[] $VALUES> = $r8;

        return;
    }
}
