abstract class com.mycila.inject.internal.guava.base.Splitter$SplittingIterator extends com.mycila.inject.internal.guava.base.Splitter$AbstractIterator
{
    final java.lang.CharSequence toSplit;
    final com.mycila.inject.internal.guava.base.CharMatcher trimmer;
    final boolean omitEmptyStrings;
    int offset;
    int limit;

    abstract int separatorStart(int);

    abstract int separatorEnd(int);

    protected void <init>(com.mycila.inject.internal.guava.base.Splitter, java.lang.CharSequence)
    {
        java.lang.CharSequence r3;
        com.mycila.inject.internal.guava.base.Splitter$SplittingIterator r0;
        int $i0;
        com.mycila.inject.internal.guava.base.Splitter r1;
        com.mycila.inject.internal.guava.base.CharMatcher $r2;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.base.Splitter$SplittingIterator;

        r1 := @parameter0: com.mycila.inject.internal.guava.base.Splitter;

        r3 := @parameter1: java.lang.CharSequence;

        specialinvoke r0.<com.mycila.inject.internal.guava.base.Splitter$AbstractIterator: void <init>(com.mycila.inject.internal.guava.base.Splitter$1)>(null);

        r0.<com.mycila.inject.internal.guava.base.Splitter$SplittingIterator: int offset> = 0;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.base.Splitter: com.mycila.inject.internal.guava.base.CharMatcher access$300(com.mycila.inject.internal.guava.base.Splitter)>(r1);

        r0.<com.mycila.inject.internal.guava.base.Splitter$SplittingIterator: com.mycila.inject.internal.guava.base.CharMatcher trimmer> = $r2;

        $z0 = staticinvoke <com.mycila.inject.internal.guava.base.Splitter: boolean access$400(com.mycila.inject.internal.guava.base.Splitter)>(r1);

        r0.<com.mycila.inject.internal.guava.base.Splitter$SplittingIterator: boolean omitEmptyStrings> = $z0;

        $i0 = staticinvoke <com.mycila.inject.internal.guava.base.Splitter: int access$500(com.mycila.inject.internal.guava.base.Splitter)>(r1);

        r0.<com.mycila.inject.internal.guava.base.Splitter$SplittingIterator: int limit> = $i0;

        r0.<com.mycila.inject.internal.guava.base.Splitter$SplittingIterator: java.lang.CharSequence toSplit> = r3;

        return;
    }

    protected java.lang.String computeNext()
    {
        com.mycila.inject.internal.guava.base.CharMatcher $r5, $r7, $r9;
        boolean $z0, $z1, $z2, $z3;
        java.lang.CharSequence $r3, $r4, $r6, $r8, $r10, $r11, $r12;
        com.mycila.inject.internal.guava.base.Splitter$SplittingIterator r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, i12, i13, $i15, $i17, $i19, $i21, $i23, $i25;
        java.lang.String $r2, $r13;
        char $c8, $c10, $c11;
        java.lang.Object $r1;

        r0 := @this: com.mycila.inject.internal.guava.base.Splitter$SplittingIterator;

     label01:
        $i0 = r0.<com.mycila.inject.internal.guava.base.Splitter$SplittingIterator: int offset>;

        $i15 = (int) -1;

        if $i0 == $i15 goto label10;

        i12 = r0.<com.mycila.inject.internal.guava.base.Splitter$SplittingIterator: int offset>;

        $i1 = r0.<com.mycila.inject.internal.guava.base.Splitter$SplittingIterator: int offset>;

        $i2 = virtualinvoke r0.<com.mycila.inject.internal.guava.base.Splitter$SplittingIterator: int separatorStart(int)>($i1);

        $i17 = (int) -1;

        if $i2 != $i17 goto label02;

        $r10 = r0.<com.mycila.inject.internal.guava.base.Splitter$SplittingIterator: java.lang.CharSequence toSplit>;

        i13 = interfaceinvoke $r10.<java.lang.CharSequence: int length()>();

        $i19 = (int) -1;

        r0.<com.mycila.inject.internal.guava.base.Splitter$SplittingIterator: int offset> = $i19;

        goto label03;

     label02:
        i13 = $i2;

        $i3 = virtualinvoke r0.<com.mycila.inject.internal.guava.base.Splitter$SplittingIterator: int separatorEnd(int)>($i2);

        r0.<com.mycila.inject.internal.guava.base.Splitter$SplittingIterator: int offset> = $i3;

     label03:
        if i12 >= i13 goto label04;

        $r9 = r0.<com.mycila.inject.internal.guava.base.Splitter$SplittingIterator: com.mycila.inject.internal.guava.base.CharMatcher trimmer>;

        $r8 = r0.<com.mycila.inject.internal.guava.base.Splitter$SplittingIterator: java.lang.CharSequence toSplit>;

        $c11 = interfaceinvoke $r8.<java.lang.CharSequence: char charAt(int)>(i12);

        $z3 = virtualinvoke $r9.<com.mycila.inject.internal.guava.base.CharMatcher: boolean matches(char)>($c11);

        if $z3 == 0 goto label04;

        i12 = i12 + 1;

        goto label03;

     label04:
        if i13 <= i12 goto label05;

        $r7 = r0.<com.mycila.inject.internal.guava.base.Splitter$SplittingIterator: com.mycila.inject.internal.guava.base.CharMatcher trimmer>;

        $r6 = r0.<com.mycila.inject.internal.guava.base.Splitter$SplittingIterator: java.lang.CharSequence toSplit>;

        $i9 = i13 - 1;

        $c10 = interfaceinvoke $r6.<java.lang.CharSequence: char charAt(int)>($i9);

        $z2 = virtualinvoke $r7.<com.mycila.inject.internal.guava.base.CharMatcher: boolean matches(char)>($c10);

        if $z2 == 0 goto label05;

        $i21 = (int) -1;

        i13 = i13 + $i21;

        goto label04;

     label05:
        $z0 = r0.<com.mycila.inject.internal.guava.base.Splitter$SplittingIterator: boolean omitEmptyStrings>;

        if $z0 == 0 goto label06;

        if i12 != i13 goto label06;

        goto label01;

     label06:
        $i4 = r0.<com.mycila.inject.internal.guava.base.Splitter$SplittingIterator: int limit>;

        if $i4 != 1 goto label08;

        $r3 = r0.<com.mycila.inject.internal.guava.base.Splitter$SplittingIterator: java.lang.CharSequence toSplit>;

        i13 = interfaceinvoke $r3.<java.lang.CharSequence: int length()>();

        $i23 = (int) -1;

        r0.<com.mycila.inject.internal.guava.base.Splitter$SplittingIterator: int offset> = $i23;

     label07:
        if i13 <= i12 goto label09;

        $r5 = r0.<com.mycila.inject.internal.guava.base.Splitter$SplittingIterator: com.mycila.inject.internal.guava.base.CharMatcher trimmer>;

        $r4 = r0.<com.mycila.inject.internal.guava.base.Splitter$SplittingIterator: java.lang.CharSequence toSplit>;

        $i7 = i13 - 1;

        $c8 = interfaceinvoke $r4.<java.lang.CharSequence: char charAt(int)>($i7);

        $z1 = virtualinvoke $r5.<com.mycila.inject.internal.guava.base.CharMatcher: boolean matches(char)>($c8);

        if $z1 == 0 goto label09;

        $i25 = (int) -1;

        i13 = i13 + $i25;

        goto label07;

     label08:
        $i5 = r0.<com.mycila.inject.internal.guava.base.Splitter$SplittingIterator: int limit>;

        $i6 = $i5 - 1;

        r0.<com.mycila.inject.internal.guava.base.Splitter$SplittingIterator: int limit> = $i6;

     label09:
        $r11 = r0.<com.mycila.inject.internal.guava.base.Splitter$SplittingIterator: java.lang.CharSequence toSplit>;

        $r12 = interfaceinvoke $r11.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(i12, i13);

        $r13 = virtualinvoke $r12.<java.lang.Object: java.lang.String toString()>();

        return $r13;

     label10:
        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.base.Splitter$SplittingIterator: java.lang.Object endOfData()>();

        $r2 = (java.lang.String) $r1;

        return $r2;
    }

    protected volatile java.lang.Object computeNext()
    {
        java.lang.String $r1;
        com.mycila.inject.internal.guava.base.Splitter$SplittingIterator r0;

        r0 := @this: com.mycila.inject.internal.guava.base.Splitter$SplittingIterator;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.base.Splitter$SplittingIterator: java.lang.String computeNext()>();

        return $r1;
    }
}
