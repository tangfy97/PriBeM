public class org.springframework.context.'annotation'.ComponentScanBeanDefinitionParser extends java.lang.Object implements org.springframework.beans.factory.xml.BeanDefinitionParser
{
    private static final java.lang.String BASE_PACKAGE_ATTRIBUTE;
    private static final java.lang.String RESOURCE_PATTERN_ATTRIBUTE;
    private static final java.lang.String USE_DEFAULT_FILTERS_ATTRIBUTE;
    private static final java.lang.String ANNOTATION_CONFIG_ATTRIBUTE;
    private static final java.lang.String NAME_GENERATOR_ATTRIBUTE;
    private static final java.lang.String SCOPE_RESOLVER_ATTRIBUTE;
    private static final java.lang.String SCOPED_PROXY_ATTRIBUTE;
    private static final java.lang.String EXCLUDE_FILTER_ELEMENT;
    private static final java.lang.String INCLUDE_FILTER_ELEMENT;
    private static final java.lang.String FILTER_TYPE_ATTRIBUTE;
    private static final java.lang.String FILTER_EXPRESSION_ATTRIBUTE;

    public void <init>()
    {
        org.springframework.context.'annotation'.ComponentScanBeanDefinitionParser r0;

        r0 := @this: org.springframework.context.'annotation'.ComponentScanBeanDefinitionParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)
    {
        java.util.Set $r6;
        org.springframework.beans.factory.xml.XmlReaderContext $r7;
        java.lang.String[] $r2;
        org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner $r5;
        org.springframework.context.'annotation'.ComponentScanBeanDefinitionParser r3;
        org.w3c.dom.Element r0;
        org.springframework.beans.factory.xml.ParserContext r4;
        java.lang.String $r1;

        r3 := @this: org.springframework.context.'annotation'.ComponentScanBeanDefinitionParser;

        r0 := @parameter0: org.w3c.dom.Element;

        r4 := @parameter1: org.springframework.beans.factory.xml.ParserContext;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("base-package");

        $r2 = staticinvoke <org.springframework.util.StringUtils: java.lang.String[] tokenizeToStringArray(java.lang.String,java.lang.String)>($r1, ",; \t\n");

        $r5 = virtualinvoke r3.<org.springframework.context.'annotation'.ComponentScanBeanDefinitionParser: org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner configureScanner(org.springframework.beans.factory.xml.ParserContext,org.w3c.dom.Element)>(r4, r0);

        $r6 = virtualinvoke $r5.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: java.util.Set doScan(java.lang.String[])>($r2);

        $r7 = virtualinvoke r4.<org.springframework.beans.factory.xml.ParserContext: org.springframework.beans.factory.xml.XmlReaderContext getReaderContext()>();

        virtualinvoke r3.<org.springframework.context.'annotation'.ComponentScanBeanDefinitionParser: void registerComponents(org.springframework.beans.factory.xml.XmlReaderContext,java.util.Set,org.w3c.dom.Element)>($r7, $r6, r0);

        return null;
    }

    protected org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner configureScanner(org.springframework.beans.factory.xml.ParserContext, org.w3c.dom.Element)
    {
        java.lang.Throwable $r16, $r20;
        org.springframework.beans.factory.support.BeanDefinitionDefaults $r7;
        org.springframework.beans.factory.xml.XmlReaderContext $r1;
        java.lang.String[] $r9;
        org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner $r4;
        org.springframework.beans.factory.xml.ParserContext r0;
        org.springframework.beans.factory.xml.BeanDefinitionParserDelegate $r6, $r8;
        java.lang.Boolean $r12;
        java.lang.String $r10, $r11, $r14, $r18;
        boolean $z0, $z1, z2;
        org.springframework.core.io.ResourceLoader $r5;
        java.lang.Exception $r13, $r17;
        org.springframework.context.'annotation'.ComponentScanBeanDefinitionParser r3;
        org.w3c.dom.Element r2;
        java.lang.Object $r15, $r19;

        r3 := @this: org.springframework.context.'annotation'.ComponentScanBeanDefinitionParser;

        r0 := @parameter0: org.springframework.beans.factory.xml.ParserContext;

        r2 := @parameter1: org.w3c.dom.Element;

        $r1 = virtualinvoke r0.<org.springframework.beans.factory.xml.ParserContext: org.springframework.beans.factory.xml.XmlReaderContext getReaderContext()>();

        z2 = 1;

        $z0 = interfaceinvoke r2.<org.w3c.dom.Element: boolean hasAttribute(java.lang.String)>("use-default-filters");

        if $z0 == 0 goto label1;

        $r11 = interfaceinvoke r2.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("use-default-filters");

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r11);

        z2 = virtualinvoke $r12.<java.lang.Boolean: boolean booleanValue()>();

     label1:
        $r4 = virtualinvoke r3.<org.springframework.context.'annotation'.ComponentScanBeanDefinitionParser: org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner createScanner(org.springframework.beans.factory.xml.XmlReaderContext,boolean)>($r1, z2);

        $r5 = virtualinvoke $r1.<org.springframework.beans.factory.xml.XmlReaderContext: org.springframework.core.io.ResourceLoader getResourceLoader()>();

        virtualinvoke $r4.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: void setResourceLoader(org.springframework.core.io.ResourceLoader)>($r5);

        $r6 = virtualinvoke r0.<org.springframework.beans.factory.xml.ParserContext: org.springframework.beans.factory.xml.BeanDefinitionParserDelegate getDelegate()>();

        $r7 = virtualinvoke $r6.<org.springframework.beans.factory.xml.BeanDefinitionParserDelegate: org.springframework.beans.factory.support.BeanDefinitionDefaults getBeanDefinitionDefaults()>();

        virtualinvoke $r4.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: void setBeanDefinitionDefaults(org.springframework.beans.factory.support.BeanDefinitionDefaults)>($r7);

        $r8 = virtualinvoke r0.<org.springframework.beans.factory.xml.ParserContext: org.springframework.beans.factory.xml.BeanDefinitionParserDelegate getDelegate()>();

        $r9 = virtualinvoke $r8.<org.springframework.beans.factory.xml.BeanDefinitionParserDelegate: java.lang.String[] getAutowireCandidatePatterns()>();

        virtualinvoke $r4.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: void setAutowireCandidatePatterns(java.lang.String[])>($r9);

        $z1 = interfaceinvoke r2.<org.w3c.dom.Element: boolean hasAttribute(java.lang.String)>("resource-pattern");

        if $z1 == 0 goto label2;

        $r10 = interfaceinvoke r2.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("resource-pattern");

        virtualinvoke $r4.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: void setResourcePattern(java.lang.String)>($r10);

     label2:
        virtualinvoke r3.<org.springframework.context.'annotation'.ComponentScanBeanDefinitionParser: void parseBeanNameGenerator(org.w3c.dom.Element,org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner)>(r2, $r4);

     label3:
        goto label5;

     label4:
        $r17 := @caughtexception;

        $r18 = virtualinvoke $r17.<java.lang.Exception: java.lang.String getMessage()>();

        $r19 = virtualinvoke $r1.<org.springframework.beans.factory.xml.XmlReaderContext: java.lang.Object extractSource(java.lang.Object)>(r2);

        $r20 = virtualinvoke $r17.<java.lang.Exception: java.lang.Throwable getCause()>();

        virtualinvoke $r1.<org.springframework.beans.factory.xml.XmlReaderContext: void error(java.lang.String,java.lang.Object,java.lang.Throwable)>($r18, $r19, $r20);

     label5:
        virtualinvoke r3.<org.springframework.context.'annotation'.ComponentScanBeanDefinitionParser: void parseScope(org.w3c.dom.Element,org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner)>(r2, $r4);

     label6:
        goto label8;

     label7:
        $r13 := @caughtexception;

        $r14 = virtualinvoke $r13.<java.lang.Exception: java.lang.String getMessage()>();

        $r15 = virtualinvoke $r1.<org.springframework.beans.factory.xml.XmlReaderContext: java.lang.Object extractSource(java.lang.Object)>(r2);

        $r16 = virtualinvoke $r13.<java.lang.Exception: java.lang.Throwable getCause()>();

        virtualinvoke $r1.<org.springframework.beans.factory.xml.XmlReaderContext: void error(java.lang.String,java.lang.Object,java.lang.Throwable)>($r14, $r15, $r16);

     label8:
        virtualinvoke r3.<org.springframework.context.'annotation'.ComponentScanBeanDefinitionParser: void parseTypeFilters(org.w3c.dom.Element,org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner,org.springframework.beans.factory.xml.XmlReaderContext,org.springframework.beans.factory.xml.ParserContext)>(r2, $r4, $r1, r0);

        return $r4;

        catch java.lang.Exception from label2 to label3 with label4;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    protected org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner createScanner(org.springframework.beans.factory.xml.XmlReaderContext, boolean)
    {
        org.springframework.context.'annotation'.ComponentScanBeanDefinitionParser r3;
        org.springframework.beans.factory.xml.XmlReaderContext r1;
        org.springframework.beans.factory.support.BeanDefinitionRegistry $r2;
        org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner $r0;
        boolean z0;

        r3 := @this: org.springframework.context.'annotation'.ComponentScanBeanDefinitionParser;

        r1 := @parameter0: org.springframework.beans.factory.xml.XmlReaderContext;

        z0 := @parameter1: boolean;

        $r0 = new org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner;

        $r2 = virtualinvoke r1.<org.springframework.beans.factory.xml.XmlReaderContext: org.springframework.beans.factory.support.BeanDefinitionRegistry getRegistry()>();

        specialinvoke $r0.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: void <init>(org.springframework.beans.factory.support.BeanDefinitionRegistry,boolean)>($r2, z0);

        return $r0;
    }

    protected void registerComponents(org.springframework.beans.factory.xml.XmlReaderContext, java.util.Set, org.w3c.dom.Element)
    {
        org.springframework.beans.factory.xml.XmlReaderContext r0;
        org.springframework.beans.factory.support.BeanDefinitionRegistry $r9;
        org.springframework.beans.factory.config.BeanDefinitionHolder r13, r18;
        org.springframework.beans.factory.parsing.BeanComponentDefinition $r8, $r14;
        java.lang.Boolean $r16;
        java.lang.String $r4, $r15;
        boolean $z0, $z1, $z2, z3;
        java.util.Iterator $r6, $r11;
        java.util.Set r5, $r10;
        org.springframework.beans.factory.parsing.CompositeComponentDefinition $r3;
        org.springframework.context.'annotation'.ComponentScanBeanDefinitionParser r17;
        org.w3c.dom.Element r1;
        java.lang.Object $r2, $r7, $r12;

        r17 := @this: org.springframework.context.'annotation'.ComponentScanBeanDefinitionParser;

        r0 := @parameter0: org.springframework.beans.factory.xml.XmlReaderContext;

        r5 := @parameter1: java.util.Set;

        r1 := @parameter2: org.w3c.dom.Element;

        $r2 = virtualinvoke r0.<org.springframework.beans.factory.xml.XmlReaderContext: java.lang.Object extractSource(java.lang.Object)>(r1);

        $r3 = new org.springframework.beans.factory.parsing.CompositeComponentDefinition;

        $r4 = interfaceinvoke r1.<org.w3c.dom.Element: java.lang.String getTagName()>();

        specialinvoke $r3.<org.springframework.beans.factory.parsing.CompositeComponentDefinition: void <init>(java.lang.String,java.lang.Object)>($r4, $r2);

        $r6 = interfaceinvoke r5.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r18 = (org.springframework.beans.factory.config.BeanDefinitionHolder) $r7;

        $r8 = new org.springframework.beans.factory.parsing.BeanComponentDefinition;

        specialinvoke $r8.<org.springframework.beans.factory.parsing.BeanComponentDefinition: void <init>(org.springframework.beans.factory.config.BeanDefinitionHolder)>(r18);

        virtualinvoke $r3.<org.springframework.beans.factory.parsing.CompositeComponentDefinition: void addNestedComponent(org.springframework.beans.factory.parsing.ComponentDefinition)>($r8);

     label2:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        z3 = 1;

        $z1 = interfaceinvoke r1.<org.w3c.dom.Element: boolean hasAttribute(java.lang.String)>("annotation-config");

        if $z1 == 0 goto label3;

        $r15 = interfaceinvoke r1.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("annotation-config");

        $r16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r15);

        z3 = virtualinvoke $r16.<java.lang.Boolean: boolean booleanValue()>();

     label3:
        if z3 == 0 goto label6;

        $r9 = virtualinvoke r0.<org.springframework.beans.factory.xml.XmlReaderContext: org.springframework.beans.factory.support.BeanDefinitionRegistry getRegistry()>();

        $r10 = staticinvoke <org.springframework.context.'annotation'.AnnotationConfigUtils: java.util.Set registerAnnotationConfigProcessors(org.springframework.beans.factory.support.BeanDefinitionRegistry,java.lang.Object)>($r9, $r2);

        $r11 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

        goto label5;

     label4:
        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r13 = (org.springframework.beans.factory.config.BeanDefinitionHolder) $r12;

        $r14 = new org.springframework.beans.factory.parsing.BeanComponentDefinition;

        specialinvoke $r14.<org.springframework.beans.factory.parsing.BeanComponentDefinition: void <init>(org.springframework.beans.factory.config.BeanDefinitionHolder)>(r13);

        virtualinvoke $r3.<org.springframework.beans.factory.parsing.CompositeComponentDefinition: void addNestedComponent(org.springframework.beans.factory.parsing.ComponentDefinition)>($r14);

     label5:
        $z2 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label4;

     label6:
        virtualinvoke r0.<org.springframework.beans.factory.xml.XmlReaderContext: void fireComponentRegistered(org.springframework.beans.factory.parsing.ComponentDefinition)>($r3);

        return;
    }

    protected void parseBeanNameGenerator(org.w3c.dom.Element, org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner)
    {
        org.springframework.core.io.ResourceLoader $r4;
        org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner r3;
        org.springframework.context.'annotation'.ComponentScanBeanDefinitionParser r1;
        org.w3c.dom.Element r0;
        org.springframework.beans.factory.support.BeanNameGenerator r7;
        java.lang.Object $r6;
        java.lang.String $r2;
        java.lang.ClassLoader $r5;
        boolean $z0;

        r1 := @this: org.springframework.context.'annotation'.ComponentScanBeanDefinitionParser;

        r0 := @parameter0: org.w3c.dom.Element;

        r3 := @parameter1: org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner;

        $z0 = interfaceinvoke r0.<org.w3c.dom.Element: boolean hasAttribute(java.lang.String)>("name-generator");

        if $z0 == 0 goto label1;

        $r2 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("name-generator");

        $r4 = virtualinvoke r3.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: org.springframework.core.io.ResourceLoader getResourceLoader()>();

        $r5 = interfaceinvoke $r4.<org.springframework.core.io.ResourceLoader: java.lang.ClassLoader getClassLoader()>();

        $r6 = specialinvoke r1.<org.springframework.context.'annotation'.ComponentScanBeanDefinitionParser: java.lang.Object instantiateUserDefinedStrategy(java.lang.String,java.lang.Class,java.lang.ClassLoader)>($r2, class "Lorg/springframework/beans/factory/support/BeanNameGenerator;", $r5);

        r7 = (org.springframework.beans.factory.support.BeanNameGenerator) $r6;

        virtualinvoke r3.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: void setBeanNameGenerator(org.springframework.beans.factory.support.BeanNameGenerator)>(r7);

     label1:
        return;
    }

    protected void parseScope(org.w3c.dom.Element, org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner)
    {
        org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner r6;
        java.lang.String $r1, $r2, $r3, $r4, $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.springframework.core.io.ResourceLoader $r12;
        org.springframework.context.'annotation'.ScopedProxyMode $r7, $r8, $r9;
        java.lang.IllegalArgumentException $r5, $r15;
        org.springframework.context.'annotation'.ComponentScanBeanDefinitionParser r10;
        org.w3c.dom.Element r0;
        org.springframework.context.'annotation'.ScopeMetadataResolver r16;
        java.lang.Object $r14;
        java.lang.ClassLoader $r13;

        r10 := @this: org.springframework.context.'annotation'.ComponentScanBeanDefinitionParser;

        r0 := @parameter0: org.w3c.dom.Element;

        r6 := @parameter1: org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner;

        $z0 = interfaceinvoke r0.<org.w3c.dom.Element: boolean hasAttribute(java.lang.String)>("scope-resolver");

        if $z0 == 0 goto label2;

        $z5 = interfaceinvoke r0.<org.w3c.dom.Element: boolean hasAttribute(java.lang.String)>("scoped-proxy");

        if $z5 == 0 goto label1;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot define both \'scope-resolver\' and \'scoped-proxy\' on <component-scan> tag");

        throw $r15;

     label1:
        $r11 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("scope-resolver");

        $r12 = virtualinvoke r6.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: org.springframework.core.io.ResourceLoader getResourceLoader()>();

        $r13 = interfaceinvoke $r12.<org.springframework.core.io.ResourceLoader: java.lang.ClassLoader getClassLoader()>();

        $r14 = specialinvoke r10.<org.springframework.context.'annotation'.ComponentScanBeanDefinitionParser: java.lang.Object instantiateUserDefinedStrategy(java.lang.String,java.lang.Class,java.lang.ClassLoader)>($r11, class "Lorg/springframework/context/annotation/ScopeMetadataResolver;", $r13);

        r16 = (org.springframework.context.'annotation'.ScopeMetadataResolver) $r14;

        virtualinvoke r6.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: void setScopeMetadataResolver(org.springframework.context.'annotation'.ScopeMetadataResolver)>(r16);

     label2:
        $z1 = interfaceinvoke r0.<org.w3c.dom.Element: boolean hasAttribute(java.lang.String)>("scoped-proxy");

        if $z1 == 0 goto label6;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("scoped-proxy");

        $r2 = "targetClass";

        $z2 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z2 == 0 goto label3;

        $r9 = <org.springframework.context.'annotation'.ScopedProxyMode: org.springframework.context.'annotation'.ScopedProxyMode TARGET_CLASS>;

        virtualinvoke r6.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: void setScopedProxyMode(org.springframework.context.'annotation'.ScopedProxyMode)>($r9);

        goto label6;

     label3:
        $r3 = "interfaces";

        $z3 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z3 == 0 goto label4;

        $r8 = <org.springframework.context.'annotation'.ScopedProxyMode: org.springframework.context.'annotation'.ScopedProxyMode INTERFACES>;

        virtualinvoke r6.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: void setScopedProxyMode(org.springframework.context.'annotation'.ScopedProxyMode)>($r8);

        goto label6;

     label4:
        $r4 = "no";

        $z4 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z4 == 0 goto label5;

        $r7 = <org.springframework.context.'annotation'.ScopedProxyMode: org.springframework.context.'annotation'.ScopedProxyMode NO>;

        virtualinvoke r6.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: void setScopedProxyMode(org.springframework.context.'annotation'.ScopedProxyMode)>($r7);

        goto label6;

     label5:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("scoped-proxy only supports \'no\', \'interfaces\' and \'targetClass\'");

        throw $r5;

     label6:
        return;
    }

    protected void parseTypeFilters(org.w3c.dom.Element, org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner, org.springframework.beans.factory.xml.XmlReaderContext, org.springframework.beans.factory.xml.ParserContext)
    {
        java.lang.Throwable $r20;
        org.springframework.core.type.filter.TypeFilter $r13, $r15;
        org.springframework.beans.factory.xml.XmlReaderContext r17;
        org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner r0;
        short $s0;
        org.w3c.dom.Node $r5;
        org.springframework.beans.factory.xml.ParserContext r6;
        int i1, $i2;
        org.springframework.beans.factory.xml.BeanDefinitionParserDelegate $r7;
        java.lang.String $r8, $r9, $r10, $r18;
        boolean $z0, $z1;
        org.springframework.core.io.ResourceLoader $r1;
        org.w3c.dom.NodeList $r4;
        java.lang.Exception $r16;
        org.springframework.context.'annotation'.ComponentScanBeanDefinitionParser r11;
        org.w3c.dom.Element r3, $r12, $r14;
        java.lang.Object $r19;
        java.lang.ClassLoader $r2;

        r11 := @this: org.springframework.context.'annotation'.ComponentScanBeanDefinitionParser;

        r3 := @parameter0: org.w3c.dom.Element;

        r0 := @parameter1: org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner;

        r17 := @parameter2: org.springframework.beans.factory.xml.XmlReaderContext;

        r6 := @parameter3: org.springframework.beans.factory.xml.ParserContext;

        $r1 = virtualinvoke r0.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: org.springframework.core.io.ResourceLoader getResourceLoader()>();

        $r2 = interfaceinvoke $r1.<org.springframework.core.io.ResourceLoader: java.lang.ClassLoader getClassLoader()>();

        $r4 = interfaceinvoke r3.<org.w3c.dom.Element: org.w3c.dom.NodeList getChildNodes()>();

        i1 = 0;

        goto label7;

     label1:
        $r5 = interfaceinvoke $r4.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i1);

        $s0 = interfaceinvoke $r5.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label6;

        $r7 = virtualinvoke r6.<org.springframework.beans.factory.xml.ParserContext: org.springframework.beans.factory.xml.BeanDefinitionParserDelegate getDelegate()>();

        $r8 = virtualinvoke $r7.<org.springframework.beans.factory.xml.BeanDefinitionParserDelegate: java.lang.String getLocalName(org.w3c.dom.Node)>($r5);

     label2:
        $r9 = "include-filter";

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z0 == 0 goto label3;

        $r14 = (org.w3c.dom.Element) $r5;

        $r15 = virtualinvoke r11.<org.springframework.context.'annotation'.ComponentScanBeanDefinitionParser: org.springframework.core.type.filter.TypeFilter createTypeFilter(org.w3c.dom.Element,java.lang.ClassLoader)>($r14, $r2);

        virtualinvoke r0.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: void addIncludeFilter(org.springframework.core.type.filter.TypeFilter)>($r15);

        goto label6;

     label3:
        $r10 = "exclude-filter";

        $z1 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label6;

        $r12 = (org.w3c.dom.Element) $r5;

        $r13 = virtualinvoke r11.<org.springframework.context.'annotation'.ComponentScanBeanDefinitionParser: org.springframework.core.type.filter.TypeFilter createTypeFilter(org.w3c.dom.Element,java.lang.ClassLoader)>($r12, $r2);

        virtualinvoke r0.<org.springframework.context.'annotation'.ClassPathBeanDefinitionScanner: void addExcludeFilter(org.springframework.core.type.filter.TypeFilter)>($r13);

     label4:
        goto label6;

     label5:
        $r16 := @caughtexception;

        $r18 = virtualinvoke $r16.<java.lang.Exception: java.lang.String getMessage()>();

        $r19 = virtualinvoke r17.<org.springframework.beans.factory.xml.XmlReaderContext: java.lang.Object extractSource(java.lang.Object)>(r3);

        $r20 = virtualinvoke $r16.<java.lang.Exception: java.lang.Throwable getCause()>();

        virtualinvoke r17.<org.springframework.beans.factory.xml.XmlReaderContext: void error(java.lang.String,java.lang.Object,java.lang.Throwable)>($r18, $r19, $r20);

     label6:
        i1 = i1 + 1;

     label7:
        $i2 = interfaceinvoke $r4.<org.w3c.dom.NodeList: int getLength()>();

        if i1 < $i2 goto label1;

        return;

        catch java.lang.Exception from label2 to label4 with label5;
    }

    protected org.springframework.core.type.filter.TypeFilter createTypeFilter(org.w3c.dom.Element, java.lang.ClassLoader)
    {
        org.springframework.core.type.filter.TypeFilter $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.springframework.core.type.filter.AnnotationTypeFilter $r30;
        java.lang.StringBuilder $r9, $r10, $r18, $r21, $r22, $r23, $r34, $r35;
        java.lang.ClassLoader r12;
        java.util.regex.Pattern $r26;
        java.lang.String $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r11, $r20, $r24, $r36;
        org.springframework.core.type.filter.AspectJTypeFilter $r27;
        org.springframework.beans.FatalBeanException $r33;
        org.springframework.core.type.filter.RegexPatternTypeFilter $r25;
        java.lang.IllegalArgumentException $r8, $r17;
        org.springframework.context.'annotation'.ComponentScanBeanDefinitionParser r37;
        org.w3c.dom.Element r0;
        java.lang.Class $r13, $r14, $r19, $r29, $r31;
        java.lang.Object $r15;
        java.lang.ClassNotFoundException $r32;
        org.springframework.core.type.filter.AssignableTypeFilter $r28;

        r37 := @this: org.springframework.context.'annotation'.ComponentScanBeanDefinitionParser;

        r0 := @parameter0: org.w3c.dom.Element;

        r12 := @parameter1: java.lang.ClassLoader;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("type");

        $r2 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("expression");

     label01:
        $r3 = "annotation";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label03;

        $r30 = new org.springframework.core.type.filter.AnnotationTypeFilter;

        $r31 = virtualinvoke r12.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>($r2);

        specialinvoke $r30.<org.springframework.core.type.filter.AnnotationTypeFilter: void <init>(java.lang.Class)>($r31);

     label02:
        return $r30;

     label03:
        $r4 = "assignable";

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z1 == 0 goto label05;

        $r28 = new org.springframework.core.type.filter.AssignableTypeFilter;

        $r29 = virtualinvoke r12.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>($r2);

        specialinvoke $r28.<org.springframework.core.type.filter.AssignableTypeFilter: void <init>(java.lang.Class)>($r29);

     label04:
        return $r28;

     label05:
        $r5 = "aspectj";

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z2 == 0 goto label07;

        $r27 = new org.springframework.core.type.filter.AspectJTypeFilter;

        specialinvoke $r27.<org.springframework.core.type.filter.AspectJTypeFilter: void <init>(java.lang.String,java.lang.ClassLoader)>($r2, r12);

     label06:
        return $r27;

     label07:
        $r6 = "regex";

        $z3 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z3 == 0 goto label09;

        $r25 = new org.springframework.core.type.filter.RegexPatternTypeFilter;

        $r26 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r2);

        specialinvoke $r25.<org.springframework.core.type.filter.RegexPatternTypeFilter: void <init>(java.util.regex.Pattern)>($r26);

     label08:
        return $r25;

     label09:
        $r7 = "custom";

        $z4 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z4 == 0 goto label12;

        $r13 = virtualinvoke r12.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>($r2);

        $r14 = class "Lorg/springframework/core/type/filter/TypeFilter;";

        $z5 = virtualinvoke $r14.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r13);

        if $z5 != 0 goto label10;

        $r17 = new java.lang.IllegalArgumentException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>(java.lang.String)>("Class is not assignable to [");

        $r19 = class "Lorg/springframework/core/type/filter/TypeFilter;";

        $r20 = virtualinvoke $r19.<java.lang.Class: java.lang.String getName()>();

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]: ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r24);

        throw $r17;

     label10:
        $r15 = staticinvoke <org.springframework.beans.BeanUtils: java.lang.Object instantiateClass(java.lang.Class)>($r13);

        $r16 = (org.springframework.core.type.filter.TypeFilter) $r15;

     label11:
        return $r16;

     label12:
        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unsupported filter type: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r8;

     label13:
        $r32 := @caughtexception;

        $r33 = new org.springframework.beans.FatalBeanException;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>(java.lang.String)>("Type filter class not found: ");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r33.<org.springframework.beans.FatalBeanException: void <init>(java.lang.String,java.lang.Throwable)>($r36, $r32);

        throw $r33;

        catch java.lang.ClassNotFoundException from label01 to label02 with label13;
        catch java.lang.ClassNotFoundException from label03 to label04 with label13;
        catch java.lang.ClassNotFoundException from label05 to label06 with label13;
        catch java.lang.ClassNotFoundException from label07 to label08 with label13;
        catch java.lang.ClassNotFoundException from label09 to label11 with label13;
        catch java.lang.ClassNotFoundException from label12 to label13 with label13;
    }

    private java.lang.Object instantiateUserDefinedStrategy(java.lang.String, java.lang.Class, java.lang.ClassLoader)
    {
        java.lang.String r1, $r9, $r15, $r18, $r24, $r27;
        boolean $z0;
        java.lang.IllegalArgumentException $r6, $r11, $r20;
        java.lang.Exception $r10;
        org.springframework.context.'annotation'.ComponentScanBeanDefinitionParser r28;
        java.lang.Class $r2, r4, $r5;
        java.lang.Object $r3;
        java.lang.StringBuilder $r7, $r8, $r12, $r13, $r14, $r16, $r17, $r21, $r22, $r23, $r25, $r26;
        java.lang.ClassNotFoundException $r19;
        java.lang.ClassLoader r0;

        r28 := @this: org.springframework.context.'annotation'.ComponentScanBeanDefinitionParser;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.Class;

        r0 := @parameter2: java.lang.ClassLoader;

     label1:
        $r2 = virtualinvoke r0.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1);

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.Object newInstance()>();

     label2:
        goto label5;

     label3:
        $r19 := @caughtexception;

        $r20 = new java.lang.IllegalArgumentException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>(java.lang.String)>("Class [");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] for strategy [");

        $r24 = virtualinvoke r4.<java.lang.Class: java.lang.String getName()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] not found");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r27, $r19);

        throw $r20;

     label4:
        $r10 := @caughtexception;

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to instantiate class [");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] for strategy [");

        $r15 = virtualinvoke r4.<java.lang.Class: java.lang.String getName()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]. A zero-argument constructor is required");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r18, $r10);

        throw $r11;

     label5:
        $r5 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r5);

        if $z0 != 0 goto label6;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("Provided class name must be an implementation of ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r6;

     label6:
        return $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label4;
    }

    public static void <clinit>()
    {
        <org.springframework.context.'annotation'.ComponentScanBeanDefinitionParser: java.lang.String FILTER_EXPRESSION_ATTRIBUTE> = "expression";

        <org.springframework.context.'annotation'.ComponentScanBeanDefinitionParser: java.lang.String FILTER_TYPE_ATTRIBUTE> = "type";

        <org.springframework.context.'annotation'.ComponentScanBeanDefinitionParser: java.lang.String INCLUDE_FILTER_ELEMENT> = "include-filter";

        <org.springframework.context.'annotation'.ComponentScanBeanDefinitionParser: java.lang.String EXCLUDE_FILTER_ELEMENT> = "exclude-filter";

        <org.springframework.context.'annotation'.ComponentScanBeanDefinitionParser: java.lang.String SCOPED_PROXY_ATTRIBUTE> = "scoped-proxy";

        <org.springframework.context.'annotation'.ComponentScanBeanDefinitionParser: java.lang.String SCOPE_RESOLVER_ATTRIBUTE> = "scope-resolver";

        <org.springframework.context.'annotation'.ComponentScanBeanDefinitionParser: java.lang.String NAME_GENERATOR_ATTRIBUTE> = "name-generator";

        <org.springframework.context.'annotation'.ComponentScanBeanDefinitionParser: java.lang.String ANNOTATION_CONFIG_ATTRIBUTE> = "annotation-config";

        <org.springframework.context.'annotation'.ComponentScanBeanDefinitionParser: java.lang.String USE_DEFAULT_FILTERS_ATTRIBUTE> = "use-default-filters";

        <org.springframework.context.'annotation'.ComponentScanBeanDefinitionParser: java.lang.String RESOURCE_PATTERN_ATTRIBUTE> = "resource-pattern";

        <org.springframework.context.'annotation'.ComponentScanBeanDefinitionParser: java.lang.String BASE_PACKAGE_ATTRIBUTE> = "base-package";

        return;
    }
}
