public final class org.apache.lucene.search.NRTManager extends org.apache.lucene.search.ReferenceManager
{
    private static final long MAX_SEARCHER_GEN;
    private final org.apache.lucene.search.NRTManager$TrackingIndexWriter writer;
    private final java.util.List waitingListeners;
    private final java.util.concurrent.locks.ReentrantLock genLock;
    private final java.util.concurrent.locks.Condition newGeneration;
    private final org.apache.lucene.search.SearcherFactory searcherFactory;
    private volatile long searchingGen;
    private long lastRefreshGen;
    static final boolean $assertionsDisabled;

    public void <init>(org.apache.lucene.search.NRTManager$TrackingIndexWriter, org.apache.lucene.search.SearcherFactory) throws java.io.IOException
    {
        org.apache.lucene.search.NRTManager$TrackingIndexWriter r1;
        org.apache.lucene.search.SearcherFactory r2;
        org.apache.lucene.search.NRTManager r0;

        r0 := @this: org.apache.lucene.search.NRTManager;

        r1 := @parameter0: org.apache.lucene.search.NRTManager$TrackingIndexWriter;

        r2 := @parameter1: org.apache.lucene.search.SearcherFactory;

        specialinvoke r0.<org.apache.lucene.search.NRTManager: void <init>(org.apache.lucene.search.NRTManager$TrackingIndexWriter,org.apache.lucene.search.SearcherFactory,boolean)>(r1, r2, 1);

        return;
    }

    public void <init>(org.apache.lucene.search.NRTManager$TrackingIndexWriter, org.apache.lucene.search.SearcherFactory, boolean) throws java.io.IOException
    {
        org.apache.lucene.search.NRTManager$TrackingIndexWriter r5;
        java.util.concurrent.locks.ReentrantLock $r2, $r3;
        org.apache.lucene.search.NRTManager r0;
        org.apache.lucene.index.DirectoryReader $r7;
        java.util.concurrent.locks.Condition $r4;
        org.apache.lucene.index.IndexWriter $r6;
        org.apache.lucene.search.SearcherFactory $r9, r10;
        java.util.concurrent.CopyOnWriteArrayList $r1;
        boolean z0;
        org.apache.lucene.search.IndexSearcher $r8;

        r0 := @this: org.apache.lucene.search.NRTManager;

        r5 := @parameter0: org.apache.lucene.search.NRTManager$TrackingIndexWriter;

        r10 := @parameter1: org.apache.lucene.search.SearcherFactory;

        z0 := @parameter2: boolean;

        specialinvoke r0.<org.apache.lucene.search.ReferenceManager: void <init>()>();

        $r1 = new java.util.concurrent.CopyOnWriteArrayList;

        specialinvoke $r1.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();

        r0.<org.apache.lucene.search.NRTManager: java.util.List waitingListeners> = $r1;

        $r2 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r2.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        r0.<org.apache.lucene.search.NRTManager: java.util.concurrent.locks.ReentrantLock genLock> = $r2;

        $r3 = r0.<org.apache.lucene.search.NRTManager: java.util.concurrent.locks.ReentrantLock genLock>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.Condition newCondition()>();

        r0.<org.apache.lucene.search.NRTManager: java.util.concurrent.locks.Condition newGeneration> = $r4;

        r0.<org.apache.lucene.search.NRTManager: org.apache.lucene.search.NRTManager$TrackingIndexWriter writer> = r5;

        if r10 != null goto label1;

        $r9 = new org.apache.lucene.search.SearcherFactory;

        specialinvoke $r9.<org.apache.lucene.search.SearcherFactory: void <init>()>();

        r10 = $r9;

     label1:
        r0.<org.apache.lucene.search.NRTManager: org.apache.lucene.search.SearcherFactory searcherFactory> = r10;

        $r6 = virtualinvoke r5.<org.apache.lucene.search.NRTManager$TrackingIndexWriter: org.apache.lucene.index.IndexWriter getIndexWriter()>();

        $r7 = staticinvoke <org.apache.lucene.index.DirectoryReader: org.apache.lucene.index.DirectoryReader open(org.apache.lucene.index.IndexWriter,boolean)>($r6, z0);

        $r8 = staticinvoke <org.apache.lucene.search.SearcherManager: org.apache.lucene.search.IndexSearcher getSearcher(org.apache.lucene.search.SearcherFactory,org.apache.lucene.index.IndexReader)>(r10, $r7);

        r0.<org.apache.lucene.search.NRTManager: java.lang.Object current> = $r8;

        return;
    }

    protected void decRef(org.apache.lucene.search.IndexSearcher) throws java.io.IOException
    {
        org.apache.lucene.index.IndexReader $r1;
        org.apache.lucene.search.NRTManager r2;
        org.apache.lucene.search.IndexSearcher r0;

        r2 := @this: org.apache.lucene.search.NRTManager;

        r0 := @parameter0: org.apache.lucene.search.IndexSearcher;

        $r1 = virtualinvoke r0.<org.apache.lucene.search.IndexSearcher: org.apache.lucene.index.IndexReader getIndexReader()>();

        virtualinvoke $r1.<org.apache.lucene.index.IndexReader: void decRef()>();

        return;
    }

    protected boolean tryIncRef(org.apache.lucene.search.IndexSearcher)
    {
        org.apache.lucene.search.NRTManager r2;
        org.apache.lucene.index.IndexReader $r1;
        org.apache.lucene.search.IndexSearcher r0;
        boolean $z0;

        r2 := @this: org.apache.lucene.search.NRTManager;

        r0 := @parameter0: org.apache.lucene.search.IndexSearcher;

        $r1 = virtualinvoke r0.<org.apache.lucene.search.IndexSearcher: org.apache.lucene.index.IndexReader getIndexReader()>();

        $z0 = virtualinvoke $r1.<org.apache.lucene.index.IndexReader: boolean tryIncRef()>();

        return $z0;
    }

    public void addWaitingListener(org.apache.lucene.search.NRTManager$WaitingListener)
    {
        org.apache.lucene.search.NRTManager$WaitingListener r1;
        java.util.List $r2;
        org.apache.lucene.search.NRTManager r0;

        r0 := @this: org.apache.lucene.search.NRTManager;

        r1 := @parameter0: org.apache.lucene.search.NRTManager$WaitingListener;

        $r2 = r0.<org.apache.lucene.search.NRTManager: java.util.List waitingListeners>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void removeWaitingListener(org.apache.lucene.search.NRTManager$WaitingListener)
    {
        org.apache.lucene.search.NRTManager$WaitingListener r1;
        java.util.List $r2;
        org.apache.lucene.search.NRTManager r0;

        r0 := @this: org.apache.lucene.search.NRTManager;

        r1 := @parameter0: org.apache.lucene.search.NRTManager$WaitingListener;

        $r2 = r0.<org.apache.lucene.search.NRTManager: java.util.List waitingListeners>;

        interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public void waitForGeneration(long)
    {
        java.util.concurrent.TimeUnit $r1;
        long l0;
        org.apache.lucene.search.NRTManager r0;

        r0 := @this: org.apache.lucene.search.NRTManager;

        l0 := @parameter0: long;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        virtualinvoke r0.<org.apache.lucene.search.NRTManager: void waitForGeneration(long,long,java.util.concurrent.TimeUnit)>(l0, -1L, $r1);

        return;
    }

    public void waitForGeneration(long, long, java.util.concurrent.TimeUnit)
    {
        org.apache.lucene.search.NRTManager$TrackingIndexWriter $r1;
        byte $b2, $b4, $b6;
        boolean $z0, $z1;
        java.util.List $r4;
        java.lang.StringBuilder $r12, $r13, $r14, $r15, $r16, $r22;
        org.apache.lucene.util.ThreadInterruptedException $r24;
        java.lang.Throwable $r20;
        org.apache.lucene.search.NRTManager r0;
        long $l0, l1, $l3, $l5, l7;
        int $i8, $i9, $i10;
        java.lang.String $r17;
        java.util.concurrent.locks.ReentrantLock $r2, $r3, $r7, $r21;
        java.util.Iterator $r5;
        java.lang.IllegalArgumentException $r23;
        java.util.concurrent.TimeUnit r6;
        java.lang.InterruptedException $r18;
        org.apache.lucene.search.NRTManager$WaitingListener r9;
        java.lang.Object $r8;

        r0 := @this: org.apache.lucene.search.NRTManager;

        l1 := @parameter0: long;

        l7 := @parameter1: long;

        r6 := @parameter2: java.util.concurrent.TimeUnit;

     label01:
        $r1 = r0.<org.apache.lucene.search.NRTManager: org.apache.lucene.search.NRTManager$TrackingIndexWriter writer>;

        $l0 = virtualinvoke $r1.<org.apache.lucene.search.NRTManager$TrackingIndexWriter: long getGeneration()>();

        $b2 = l1 cmp $l0;

        $i8 = (int) $b2;

        if $i8 <= 0 goto label02;

        $r23 = new java.lang.IllegalArgumentException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("targetGen=");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was never returned by this NRTManager instance (current gen=");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r23;

     label02:
        $r2 = r0.<org.apache.lucene.search.NRTManager: java.util.concurrent.locks.ReentrantLock genLock>;

        virtualinvoke $r2.<java.util.concurrent.locks.ReentrantLock: void lockInterruptibly()>();

     label03:
        $l3 = r0.<org.apache.lucene.search.NRTManager: long searchingGen>;

        $b4 = l1 cmp $l3;

        $i9 = (int) $b4;

        if $i9 <= 0 goto label08;

        $r4 = r0.<org.apache.lucene.search.NRTManager: java.util.List waitingListeners>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label05;

        $r8 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.apache.lucene.search.NRTManager$WaitingListener) $r8;

        interfaceinvoke r9.<org.apache.lucene.search.NRTManager$WaitingListener: void waiting(long)>(l1);

        goto label04;

     label05:
        $l5 = r0.<org.apache.lucene.search.NRTManager: long searchingGen>;

        $b6 = l1 cmp $l5;

        $i10 = (int) $b6;

        if $i10 <= 0 goto label08;

        $z1 = specialinvoke r0.<org.apache.lucene.search.NRTManager: boolean waitOnGenCondition(long,java.util.concurrent.TimeUnit)>(l7, r6);

        if $z1 != 0 goto label05;

     label06:
        $r7 = r0.<org.apache.lucene.search.NRTManager: java.util.concurrent.locks.ReentrantLock genLock>;

        virtualinvoke $r7.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

     label07:
        return;

     label08:
        $r3 = r0.<org.apache.lucene.search.NRTManager: java.util.concurrent.locks.ReentrantLock genLock>;

        virtualinvoke $r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label11;

     label09:
        $r20 := @caughtexception;

     label10:
        $r21 = r0.<org.apache.lucene.search.NRTManager: java.util.concurrent.locks.ReentrantLock genLock>;

        virtualinvoke $r21.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r20;

     label11:
        goto label13;

     label12:
        $r18 := @caughtexception;

        $r24 = new org.apache.lucene.util.ThreadInterruptedException;

        specialinvoke $r24.<org.apache.lucene.util.ThreadInterruptedException: void <init>(java.lang.InterruptedException)>($r18);

        throw $r24;

     label13:
        return;

        catch java.lang.Throwable from label03 to label06 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch java.lang.InterruptedException from label01 to label07 with label12;
        catch java.lang.InterruptedException from label08 to label11 with label12;
    }

    private boolean waitOnGenCondition(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        java.util.concurrent.locks.ReentrantLock $r4;
        org.apache.lucene.search.NRTManager r0;
        long l0;
        java.lang.AssertionError $r6;
        java.util.concurrent.TimeUnit r1;
        java.util.concurrent.locks.Condition $r2, $r3;
        byte $b1;
        int $i2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.lucene.search.NRTManager;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        $z0 = <org.apache.lucene.search.NRTManager: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r4 = r0.<org.apache.lucene.search.NRTManager: java.util.concurrent.locks.ReentrantLock genLock>;

        $z2 = virtualinvoke $r4.<java.util.concurrent.locks.ReentrantLock: boolean isHeldByCurrentThread()>();

        if $z2 != 0 goto label1;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label1:
        $b1 = l0 cmp 0L;

        $i2 = (int) $b1;

        if $i2 >= 0 goto label2;

        $r3 = r0.<org.apache.lucene.search.NRTManager: java.util.concurrent.locks.Condition newGeneration>;

        interfaceinvoke $r3.<java.util.concurrent.locks.Condition: void await()>();

        return 1;

     label2:
        $r2 = r0.<org.apache.lucene.search.NRTManager: java.util.concurrent.locks.Condition newGeneration>;

        $z1 = interfaceinvoke $r2.<java.util.concurrent.locks.Condition: boolean await(long,java.util.concurrent.TimeUnit)>(l0, r1);

        return $z1;
    }

    public long getCurrentSearchingGen()
    {
        long $l0;
        org.apache.lucene.search.NRTManager r0;

        r0 := @this: org.apache.lucene.search.NRTManager;

        $l0 = r0.<org.apache.lucene.search.NRTManager: long searchingGen>;

        return $l0;
    }

    protected org.apache.lucene.search.IndexSearcher refreshIfNeeded(org.apache.lucene.search.IndexSearcher) throws java.io.IOException
    {
        org.apache.lucene.search.NRTManager$TrackingIndexWriter $r1;
        org.apache.lucene.search.NRTManager r0;
        long $l0;
        java.lang.AssertionError $r7;
        java.lang.String $r11;
        boolean $z0, $z1, $z2;
        org.apache.lucene.index.DirectoryReader $r4, $r6;
        org.apache.lucene.search.SearcherFactory $r5;
        java.lang.StringBuilder $r8, $r9, $r10;
        org.apache.lucene.index.IndexReader $r3;
        org.apache.lucene.search.IndexSearcher r2, r12;

        r0 := @this: org.apache.lucene.search.NRTManager;

        r2 := @parameter0: org.apache.lucene.search.IndexSearcher;

        $r1 = r0.<org.apache.lucene.search.NRTManager: org.apache.lucene.search.NRTManager$TrackingIndexWriter writer>;

        $l0 = virtualinvoke $r1.<org.apache.lucene.search.NRTManager$TrackingIndexWriter: long getAndIncrementGeneration()>();

        r0.<org.apache.lucene.search.NRTManager: long lastRefreshGen> = $l0;

        $r3 = virtualinvoke r2.<org.apache.lucene.search.IndexSearcher: org.apache.lucene.index.IndexReader getIndexReader()>();

        $z0 = <org.apache.lucene.search.NRTManager: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z2 = $r3 instanceof org.apache.lucene.index.DirectoryReader;

        if $z2 != 0 goto label1;

        $r7 = new java.lang.AssertionError;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("searcher\'s IndexReader should be a DirectoryReader, but got ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>($r11);

        throw $r7;

     label1:
        $r6 = (org.apache.lucene.index.DirectoryReader) $r3;

        r12 = null;

        $z1 = virtualinvoke $r6.<org.apache.lucene.index.DirectoryReader: boolean isCurrent()>();

        if $z1 != 0 goto label2;

        $r4 = staticinvoke <org.apache.lucene.index.DirectoryReader: org.apache.lucene.index.DirectoryReader openIfChanged(org.apache.lucene.index.DirectoryReader)>($r6);

        if $r4 == null goto label2;

        $r5 = r0.<org.apache.lucene.search.NRTManager: org.apache.lucene.search.SearcherFactory searcherFactory>;

        r12 = staticinvoke <org.apache.lucene.search.SearcherManager: org.apache.lucene.search.IndexSearcher getSearcher(org.apache.lucene.search.SearcherFactory,org.apache.lucene.index.IndexReader)>($r5, $r4);

     label2:
        return r12;
    }

    protected void afterMaybeRefresh()
    {
        java.lang.Throwable $r3;
        java.util.concurrent.locks.ReentrantLock $r1, $r4, $r6;
        org.apache.lucene.search.NRTManager r0;
        long $l0, $l2, $l3, $l4;
        java.lang.AssertionError $r7;
        java.util.concurrent.locks.Condition $r5;
        byte $b1, $b5;
        int $i6;
        boolean $z0;

        r0 := @this: org.apache.lucene.search.NRTManager;

        $r1 = r0.<org.apache.lucene.search.NRTManager: java.util.concurrent.locks.ReentrantLock genLock>;

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $l0 = r0.<org.apache.lucene.search.NRTManager: long searchingGen>;

        $b1 = $l0 cmp 9223372036854775807L;

        if $b1 == 0 goto label3;

        $z0 = <org.apache.lucene.search.NRTManager: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $l4 = r0.<org.apache.lucene.search.NRTManager: long lastRefreshGen>;

        $l3 = r0.<org.apache.lucene.search.NRTManager: long searchingGen>;

        $b5 = $l4 cmp $l3;

        $i6 = (int) $b5;

        if $i6 >= 0 goto label2;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label2:
        $l2 = r0.<org.apache.lucene.search.NRTManager: long lastRefreshGen>;

        r0.<org.apache.lucene.search.NRTManager: long searchingGen> = $l2;

     label3:
        $r5 = r0.<org.apache.lucene.search.NRTManager: java.util.concurrent.locks.Condition newGeneration>;

        interfaceinvoke $r5.<java.util.concurrent.locks.Condition: void signalAll()>();

     label4:
        $r6 = r0.<org.apache.lucene.search.NRTManager: java.util.concurrent.locks.ReentrantLock genLock>;

        virtualinvoke $r6.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label7;

     label5:
        $r3 := @caughtexception;

     label6:
        $r4 = r0.<org.apache.lucene.search.NRTManager: java.util.concurrent.locks.ReentrantLock genLock>;

        virtualinvoke $r4.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r3;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    protected synchronized void afterClose() throws java.io.IOException
    {
        java.lang.Throwable $r4;
        java.util.concurrent.locks.Condition $r2;
        java.util.concurrent.locks.ReentrantLock $r1, $r3, $r5;
        org.apache.lucene.search.NRTManager r0;

        r0 := @this: org.apache.lucene.search.NRTManager;

        $r1 = r0.<org.apache.lucene.search.NRTManager: java.util.concurrent.locks.ReentrantLock genLock>;

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        r0.<org.apache.lucene.search.NRTManager: long searchingGen> = 9223372036854775807L;

        $r2 = r0.<org.apache.lucene.search.NRTManager: java.util.concurrent.locks.Condition newGeneration>;

        interfaceinvoke $r2.<java.util.concurrent.locks.Condition: void signalAll()>();

     label2:
        $r3 = r0.<org.apache.lucene.search.NRTManager: java.util.concurrent.locks.ReentrantLock genLock>;

        virtualinvoke $r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label5;

     label3:
        $r4 := @caughtexception;

     label4:
        $r5 = r0.<org.apache.lucene.search.NRTManager: java.util.concurrent.locks.ReentrantLock genLock>;

        virtualinvoke $r5.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean isSearcherCurrent() throws java.io.IOException
    {
        java.lang.Throwable $r10;
        org.apache.lucene.search.NRTManager r0;
        org.apache.lucene.index.DirectoryReader $r4;
        java.lang.AssertionError $r5;
        java.lang.Object $r1;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;
        org.apache.lucene.index.IndexReader $r3;
        org.apache.lucene.search.IndexSearcher r2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.lucene.search.NRTManager;

        $r1 = virtualinvoke r0.<org.apache.lucene.search.NRTManager: java.lang.Object acquire()>();

        r2 = (org.apache.lucene.search.IndexSearcher) $r1;

     label1:
        $r3 = virtualinvoke r2.<org.apache.lucene.search.IndexSearcher: org.apache.lucene.index.IndexReader getIndexReader()>();

        $z0 = <org.apache.lucene.search.NRTManager: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $z2 = $r3 instanceof org.apache.lucene.index.DirectoryReader;

        if $z2 != 0 goto label2;

        $r5 = new java.lang.AssertionError;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("searcher\'s IndexReader should be a DirectoryReader, but got ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>($r9);

        throw $r5;

     label2:
        $r4 = (org.apache.lucene.index.DirectoryReader) $r3;

        $z1 = virtualinvoke $r4.<org.apache.lucene.index.DirectoryReader: boolean isCurrent()>();

     label3:
        virtualinvoke r0.<org.apache.lucene.search.NRTManager: void release(java.lang.Object)>(r2);

        return $z1;

     label4:
        $r10 := @caughtexception;

     label5:
        virtualinvoke r0.<org.apache.lucene.search.NRTManager: void release(java.lang.Object)>(r2);

        throw $r10;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    protected volatile boolean tryIncRef(java.lang.Object) throws java.io.IOException
    {
        org.apache.lucene.search.NRTManager r0;
        java.lang.Object r1;
        org.apache.lucene.search.IndexSearcher $r2;
        boolean $z0;

        r0 := @this: org.apache.lucene.search.NRTManager;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.lucene.search.IndexSearcher) r1;

        $z0 = virtualinvoke r0.<org.apache.lucene.search.NRTManager: boolean tryIncRef(org.apache.lucene.search.IndexSearcher)>($r2);

        return $z0;
    }

    protected volatile java.lang.Object refreshIfNeeded(java.lang.Object) throws java.io.IOException
    {
        org.apache.lucene.search.NRTManager r0;
        java.lang.Object r1;
        org.apache.lucene.search.IndexSearcher $r2, $r3;

        r0 := @this: org.apache.lucene.search.NRTManager;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.lucene.search.IndexSearcher) r1;

        $r3 = virtualinvoke r0.<org.apache.lucene.search.NRTManager: org.apache.lucene.search.IndexSearcher refreshIfNeeded(org.apache.lucene.search.IndexSearcher)>($r2);

        return $r3;
    }

    protected volatile void decRef(java.lang.Object) throws java.io.IOException
    {
        java.lang.Object r1;
        org.apache.lucene.search.NRTManager r0;
        org.apache.lucene.search.IndexSearcher $r2;

        r0 := @this: org.apache.lucene.search.NRTManager;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.lucene.search.IndexSearcher) r1;

        virtualinvoke r0.<org.apache.lucene.search.NRTManager: void decRef(org.apache.lucene.search.IndexSearcher)>($r2);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.apache.lucene.search.NRTManager: long MAX_SEARCHER_GEN> = 9223372036854775807L;

        $r0 = class "Lorg/apache/lucene/search/NRTManager;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.search.NRTManager: boolean $assertionsDisabled> = $z1;

        return;
    }
}
