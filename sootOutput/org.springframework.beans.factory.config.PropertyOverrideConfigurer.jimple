public class org.springframework.beans.factory.config.PropertyOverrideConfigurer extends org.springframework.beans.factory.config.PropertyResourceConfigurer
{
    public static final java.lang.String DEFAULT_BEAN_NAME_SEPARATOR;
    private java.lang.String beanNameSeparator;
    private boolean ignoreInvalidKeys;
    private java.util.Set beanNames;

    public void <init>()
    {
        java.util.HashSet $r1;
        java.util.Set $r2;
        org.springframework.beans.factory.config.PropertyOverrideConfigurer r0;

        r0 := @this: org.springframework.beans.factory.config.PropertyOverrideConfigurer;

        specialinvoke r0.<org.springframework.beans.factory.config.PropertyResourceConfigurer: void <init>()>();

        r0.<org.springframework.beans.factory.config.PropertyOverrideConfigurer: java.lang.String beanNameSeparator> = ".";

        r0.<org.springframework.beans.factory.config.PropertyOverrideConfigurer: boolean ignoreInvalidKeys> = 0;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        $r2 = staticinvoke <java.util.Collections: java.util.Set synchronizedSet(java.util.Set)>($r1);

        r0.<org.springframework.beans.factory.config.PropertyOverrideConfigurer: java.util.Set beanNames> = $r2;

        return;
    }

    public void setBeanNameSeparator(java.lang.String)
    {
        org.springframework.beans.factory.config.PropertyOverrideConfigurer r0;
        java.lang.String r1;

        r0 := @this: org.springframework.beans.factory.config.PropertyOverrideConfigurer;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.beans.factory.config.PropertyOverrideConfigurer: java.lang.String beanNameSeparator> = r1;

        return;
    }

    public void setIgnoreInvalidKeys(boolean)
    {
        org.springframework.beans.factory.config.PropertyOverrideConfigurer r0;
        boolean z0;

        r0 := @this: org.springframework.beans.factory.config.PropertyOverrideConfigurer;

        z0 := @parameter0: boolean;

        r0.<org.springframework.beans.factory.config.PropertyOverrideConfigurer: boolean ignoreInvalidKeys> = z0;

        return;
    }

    protected void processProperties(org.springframework.beans.factory.config.ConfigurableListableBeanFactory, java.util.Properties) throws org.springframework.beans.BeansException
    {
        java.util.Enumeration $r1;
        org.springframework.beans.factory.config.ConfigurableListableBeanFactory r5;
        org.springframework.beans.factory.BeanInitializationException $r14;
        org.springframework.beans.factory.config.PropertyOverrideConfigurer r4;
        java.lang.String r3, $r6, $r11;
        boolean $z0, $z1, $z2;
        java.util.Properties r0;
        org.springframework.beans.BeansException $r7;
        java.lang.Object $r2;
        java.lang.StringBuilder $r8, $r9, $r10;
        org.apache.commons.logging.Log $r12, $r13;

        r4 := @this: org.springframework.beans.factory.config.PropertyOverrideConfigurer;

        r5 := @parameter0: org.springframework.beans.factory.config.ConfigurableListableBeanFactory;

        r0 := @parameter1: java.util.Properties;

        $r1 = virtualinvoke r0.<java.util.Properties: java.util.Enumeration propertyNames()>();

        goto label6;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.Enumeration: java.lang.Object nextElement()>();

        r3 = (java.lang.String) $r2;

     label2:
        $r6 = virtualinvoke r0.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r3);

        virtualinvoke r4.<org.springframework.beans.factory.config.PropertyOverrideConfigurer: void processKey(org.springframework.beans.factory.config.ConfigurableListableBeanFactory,java.lang.String,java.lang.String)>(r5, r3, $r6);

     label3:
        goto label6;

     label4:
        $r7 := @caughtexception;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not process key \'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in PropertyOverrideConfigurer");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = r4.<org.springframework.beans.factory.config.PropertyOverrideConfigurer: boolean ignoreInvalidKeys>;

        if $z0 != 0 goto label5;

        $r14 = new org.springframework.beans.factory.BeanInitializationException;

        specialinvoke $r14.<org.springframework.beans.factory.BeanInitializationException: void <init>(java.lang.String,java.lang.Throwable)>($r11, $r7);

        throw $r14;

     label5:
        $r12 = r4.<org.springframework.beans.factory.config.PropertyOverrideConfigurer: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r12.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label6;

        $r13 = r4.<org.springframework.beans.factory.config.PropertyOverrideConfigurer: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r13.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>($r11, $r7);

     label6:
        $z2 = interfaceinvoke $r1.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z2 != 0 goto label1;

        return;

        catch org.springframework.beans.BeansException from label2 to label3 with label4;
    }

    protected void processKey(org.springframework.beans.factory.config.ConfigurableListableBeanFactory, java.lang.String, java.lang.String) throws org.springframework.beans.BeansException
    {
        org.springframework.beans.factory.config.ConfigurableListableBeanFactory r6;
        org.springframework.beans.factory.BeanInitializationException $r25;
        org.springframework.beans.factory.config.PropertyOverrideConfigurer r1;
        int $i0, $i1, $i3;
        java.lang.String r0, $r2, $r3, $r4, r7, $r15, $r20, $r23;
        boolean $z0;
        java.util.Set $r5;
        org.apache.commons.logging.Log $r8, $r10;
        java.lang.StringBuilder $r11, $r12, $r13, $r14, $r18, $r19, $r21, $r22, $r24, $r26;

        r1 := @this: org.springframework.beans.factory.config.PropertyOverrideConfigurer;

        r6 := @parameter0: org.springframework.beans.factory.config.ConfigurableListableBeanFactory;

        r0 := @parameter1: java.lang.String;

        r7 := @parameter2: java.lang.String;

        $r2 = r1.<org.springframework.beans.factory.config.PropertyOverrideConfigurer: java.lang.String beanNameSeparator>;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>($r2);

        $i3 = (int) -1;

        if $i0 != $i3 goto label1;

        $r25 = new org.springframework.beans.factory.BeanInitializationException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>(java.lang.String)>("Invalid key \'");

        $r18 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': expected \'beanName");

        $r20 = r1.<org.springframework.beans.factory.config.PropertyOverrideConfigurer: java.lang.String beanNameSeparator>;

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("property\'");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<org.springframework.beans.factory.BeanInitializationException: void <init>(java.lang.String)>($r23);

        throw $r25;

     label1:
        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $i1 = $i0 + 1;

        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1);

        $r5 = r1.<org.springframework.beans.factory.config.PropertyOverrideConfigurer: java.util.Set beanNames>;

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>($r3);

        virtualinvoke r1.<org.springframework.beans.factory.config.PropertyOverrideConfigurer: void applyPropertyValue(org.springframework.beans.factory.config.ConfigurableListableBeanFactory,java.lang.String,java.lang.String,java.lang.String)>(r6, $r3, $r4, r7);

        $r8 = r1.<org.springframework.beans.factory.config.PropertyOverrideConfigurer: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r8.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label2;

        $r10 = r1.<org.springframework.beans.factory.config.PropertyOverrideConfigurer: org.apache.commons.logging.Log logger>;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>(java.lang.String)>("Property \'");

        $r11 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' set to value [");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r15);

     label2:
        return;
    }

    protected void applyPropertyValue(org.springframework.beans.factory.config.ConfigurableListableBeanFactory, java.lang.String, java.lang.String, java.lang.String)
    {
        org.springframework.beans.PropertyValue $r3;
        org.springframework.beans.MutablePropertyValues $r7;
        org.springframework.beans.factory.config.ConfigurableListableBeanFactory r0;
        org.springframework.beans.factory.config.PropertyOverrideConfigurer r6;
        org.springframework.beans.factory.config.BeanDefinition $r2, r8;
        java.lang.String r1, r4, r5;
        boolean $z0;

        r6 := @this: org.springframework.beans.factory.config.PropertyOverrideConfigurer;

        r0 := @parameter0: org.springframework.beans.factory.config.ConfigurableListableBeanFactory;

        r1 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        r5 := @parameter3: java.lang.String;

        r8 = interfaceinvoke r0.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: org.springframework.beans.factory.config.BeanDefinition getBeanDefinition(java.lang.String)>(r1);

        goto label2;

     label1:
        r8 = interfaceinvoke r8.<org.springframework.beans.factory.config.BeanDefinition: org.springframework.beans.factory.config.BeanDefinition getOriginatingBeanDefinition()>();

     label2:
        $r2 = interfaceinvoke r8.<org.springframework.beans.factory.config.BeanDefinition: org.springframework.beans.factory.config.BeanDefinition getOriginatingBeanDefinition()>();

        if $r2 != null goto label1;

        $r3 = new org.springframework.beans.PropertyValue;

        specialinvoke $r3.<org.springframework.beans.PropertyValue: void <init>(java.lang.String,java.lang.Object)>(r4, r5);

        $z0 = r6.<org.springframework.beans.factory.config.PropertyOverrideConfigurer: boolean ignoreInvalidKeys>;

        virtualinvoke $r3.<org.springframework.beans.PropertyValue: void setOptional(boolean)>($z0);

        $r7 = interfaceinvoke r8.<org.springframework.beans.factory.config.BeanDefinition: org.springframework.beans.MutablePropertyValues getPropertyValues()>();

        virtualinvoke $r7.<org.springframework.beans.MutablePropertyValues: org.springframework.beans.MutablePropertyValues addPropertyValue(org.springframework.beans.PropertyValue)>($r3);

        return;
    }

    public boolean hasPropertyOverridesFor(java.lang.String)
    {
        org.springframework.beans.factory.config.PropertyOverrideConfigurer r0;
        java.util.Set $r2;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.config.PropertyOverrideConfigurer;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.beans.factory.config.PropertyOverrideConfigurer: java.util.Set beanNames>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public static void <clinit>()
    {
        <org.springframework.beans.factory.config.PropertyOverrideConfigurer: java.lang.String DEFAULT_BEAN_NAME_SEPARATOR> = ".";

        return;
    }
}
