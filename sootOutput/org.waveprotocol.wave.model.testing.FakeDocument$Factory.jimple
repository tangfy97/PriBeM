public class org.waveprotocol.wave.model.testing.FakeDocument$Factory extends java.lang.Object implements org.waveprotocol.wave.model.wave.data.DocumentFactory
{
    private final org.waveprotocol.wave.model.schema.SchemaProvider schemas;

    public static org.waveprotocol.wave.model.testing.FakeDocument$Factory create(org.waveprotocol.wave.model.schema.SchemaProvider)
    {
        org.waveprotocol.wave.model.schema.SchemaProvider r1;
        org.waveprotocol.wave.model.testing.FakeDocument$Factory $r0;

        r1 := @parameter0: org.waveprotocol.wave.model.schema.SchemaProvider;

        $r0 = new org.waveprotocol.wave.model.testing.FakeDocument$Factory;

        specialinvoke $r0.<org.waveprotocol.wave.model.testing.FakeDocument$Factory: void <init>(org.waveprotocol.wave.model.schema.SchemaProvider)>(r1);

        return $r0;
    }

    private void <init>(org.waveprotocol.wave.model.schema.SchemaProvider)
    {
        org.waveprotocol.wave.model.schema.SchemaProvider r1;
        org.waveprotocol.wave.model.testing.FakeDocument$Factory r0;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeDocument$Factory;

        r1 := @parameter0: org.waveprotocol.wave.model.schema.SchemaProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.testing.FakeDocument$Factory: org.waveprotocol.wave.model.schema.SchemaProvider schemas> = r1;

        return;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema getSchemaForId(org.waveprotocol.wave.model.id.WaveletId, java.lang.String)
    {
        org.waveprotocol.wave.model.schema.SchemaProvider $r3;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema $r4, $r5;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.String r2;
        org.waveprotocol.wave.model.testing.FakeDocument$Factory r0;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeDocument$Factory;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.waveprotocol.wave.model.testing.FakeDocument$Factory: org.waveprotocol.wave.model.schema.SchemaProvider schemas>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.schema.SchemaProvider: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema getSchemaForId(org.waveprotocol.wave.model.id.WaveletId,java.lang.String)>(r1, r2);

        if $r4 == null goto label1;

        $r5 = $r4;

        goto label2;

     label1:
        $r5 = <org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema NO_SCHEMA_CONSTRAINTS>;

     label2:
        return $r5;
    }

    public org.waveprotocol.wave.model.testing.FakeDocument create(org.waveprotocol.wave.model.id.WaveletId, java.lang.String, org.waveprotocol.wave.model.document.operation.DocInitialization)
    {
        org.waveprotocol.wave.model.testing.FakeDocument $r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema $r5;
        org.waveprotocol.wave.model.document.operation.DocInitialization r1;
        org.waveprotocol.wave.model.id.WaveletId r3;
        java.lang.String r4;
        org.waveprotocol.wave.model.testing.FakeDocument$Factory r2;

        r2 := @this: org.waveprotocol.wave.model.testing.FakeDocument$Factory;

        r3 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        r4 := @parameter1: java.lang.String;

        r1 := @parameter2: org.waveprotocol.wave.model.document.operation.DocInitialization;

        $r0 = new org.waveprotocol.wave.model.testing.FakeDocument;

        $r5 = specialinvoke r2.<org.waveprotocol.wave.model.testing.FakeDocument$Factory: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema getSchemaForId(org.waveprotocol.wave.model.id.WaveletId,java.lang.String)>(r3, r4);

        specialinvoke $r0.<org.waveprotocol.wave.model.testing.FakeDocument: void <init>(org.waveprotocol.wave.model.document.operation.DocInitialization,org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema)>(r1, $r5);

        return $r0;
    }

    public volatile org.waveprotocol.wave.model.wave.data.DocumentOperationSink create(org.waveprotocol.wave.model.id.WaveletId, java.lang.String, org.waveprotocol.wave.model.document.operation.DocInitialization)
    {
        org.waveprotocol.wave.model.testing.FakeDocument $r4;
        org.waveprotocol.wave.model.document.operation.DocInitialization r3;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.String r2;
        org.waveprotocol.wave.model.testing.FakeDocument$Factory r0;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeDocument$Factory;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.waveprotocol.wave.model.document.operation.DocInitialization;

        $r4 = virtualinvoke r0.<org.waveprotocol.wave.model.testing.FakeDocument$Factory: org.waveprotocol.wave.model.testing.FakeDocument create(org.waveprotocol.wave.model.id.WaveletId,java.lang.String,org.waveprotocol.wave.model.document.operation.DocInitialization)>(r1, r2, r3);

        return $r4;
    }
}
