public class org.apache.batik.util.resources.ResourceManager extends java.lang.Object
{
    protected java.util.ResourceBundle bundle;

    public void <init>(java.util.ResourceBundle)
    {
        org.apache.batik.util.resources.ResourceManager r0;
        java.util.ResourceBundle r1;

        r0 := @this: org.apache.batik.util.resources.ResourceManager;

        r1 := @parameter0: java.util.ResourceBundle;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.batik.util.resources.ResourceManager: java.util.ResourceBundle bundle> = r1;

        return;
    }

    public java.lang.String getString(java.lang.String) throws java.util.MissingResourceException
    {
        java.util.ResourceBundle $r2;
        org.apache.batik.util.resources.ResourceManager r0;
        java.lang.String r1, $r3;

        r0 := @this: org.apache.batik.util.resources.ResourceManager;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.batik.util.resources.ResourceManager: java.util.ResourceBundle bundle>;

        $r3 = virtualinvoke $r2.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>(r1);

        return $r3;
    }

    public java.util.List getStringList(java.lang.String) throws java.util.MissingResourceException
    {
        org.apache.batik.util.resources.ResourceManager r0;
        java.util.List $r2;
        java.lang.String r1;

        r0 := @this: org.apache.batik.util.resources.ResourceManager;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.batik.util.resources.ResourceManager: java.util.List getStringList(java.lang.String,java.lang.String,boolean)>(r1, " \t\n\r\f", 0);

        return $r2;
    }

    public java.util.List getStringList(java.lang.String, java.lang.String) throws java.util.MissingResourceException
    {
        java.util.List $r3;
        org.apache.batik.util.resources.ResourceManager r0;
        java.lang.String r1, r2;

        r0 := @this: org.apache.batik.util.resources.ResourceManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.apache.batik.util.resources.ResourceManager: java.util.List getStringList(java.lang.String,java.lang.String,boolean)>(r1, r2, 0);

        return $r3;
    }

    public java.util.List getStringList(java.lang.String, java.lang.String, boolean) throws java.util.MissingResourceException
    {
        java.util.ArrayList $r0;
        java.util.StringTokenizer $r1;
        org.apache.batik.util.resources.ResourceManager r2;
        java.lang.String r3, $r4, r5, $r6;
        boolean z0, $z1;

        r2 := @this: org.apache.batik.util.resources.ResourceManager;

        r3 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r1 = new java.util.StringTokenizer;

        $r4 = virtualinvoke r2.<org.apache.batik.util.resources.ResourceManager: java.lang.String getString(java.lang.String)>(r3);

        specialinvoke $r1.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String,boolean)>($r4, r5, z0);

        goto label2;

     label1:
        $r6 = virtualinvoke $r1.<java.util.StringTokenizer: java.lang.String nextToken()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r6);

     label2:
        $z1 = virtualinvoke $r1.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z1 != 0 goto label1;

        return $r0;
    }

    public boolean getBoolean(java.lang.String) throws java.util.MissingResourceException, org.apache.batik.util.resources.ResourceFormatException
    {
        org.apache.batik.util.resources.ResourceFormatException $r3;
        java.util.ResourceBundle $r4;
        org.apache.batik.util.resources.ResourceManager r0;
        java.lang.Class $r5;
        java.lang.String r1, $r2, $r6;
        boolean $z0, $z1;

        r0 := @this: org.apache.batik.util.resources.ResourceManager;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.batik.util.resources.ResourceManager: java.lang.String getString(java.lang.String)>(r1);

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("false");

        if $z1 == 0 goto label2;

        return 0;

     label2:
        $r3 = new org.apache.batik.util.resources.ResourceFormatException;

        $r4 = r0.<org.apache.batik.util.resources.ResourceManager: java.util.ResourceBundle bundle>;

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r3.<org.apache.batik.util.resources.ResourceFormatException: void <init>(java.lang.String,java.lang.String,java.lang.String)>("Malformed boolean", $r6, r1);

        throw $r3;
    }

    public int getInteger(java.lang.String) throws java.util.MissingResourceException, org.apache.batik.util.resources.ResourceFormatException
    {
        org.apache.batik.util.resources.ResourceFormatException $r4;
        java.lang.NumberFormatException $r3;
        java.util.ResourceBundle $r5;
        int $i0;
        org.apache.batik.util.resources.ResourceManager r0;
        java.lang.Class $r6;
        java.lang.String r1, $r2, $r7;

        r0 := @this: org.apache.batik.util.resources.ResourceManager;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.batik.util.resources.ResourceManager: java.lang.String getString(java.lang.String)>(r1);

     label1:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

        return $i0;

     label2:
        $r3 := @caughtexception;

        $r4 = new org.apache.batik.util.resources.ResourceFormatException;

        $r5 = r0.<org.apache.batik.util.resources.ResourceManager: java.util.ResourceBundle bundle>;

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r4.<org.apache.batik.util.resources.ResourceFormatException: void <init>(java.lang.String,java.lang.String,java.lang.String)>("Malformed integer", $r7, r1);

        throw $r4;

        catch java.lang.NumberFormatException from label1 to label2 with label2;
    }

    public int getCharacter(java.lang.String) throws java.util.MissingResourceException, org.apache.batik.util.resources.ResourceFormatException
    {
        org.apache.batik.util.resources.ResourceFormatException $r7;
        char $c1;
        java.util.ResourceBundle $r4;
        int $i0, $i2;
        org.apache.batik.util.resources.ResourceManager r0;
        java.lang.Class $r5;
        java.lang.String r1, $r2, $r6;

        r0 := @this: org.apache.batik.util.resources.ResourceManager;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.batik.util.resources.ResourceManager: java.lang.String getString(java.lang.String)>(r1);

        if $r2 == null goto label1;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $r7 = new org.apache.batik.util.resources.ResourceFormatException;

        $r4 = r0.<org.apache.batik.util.resources.ResourceManager: java.util.ResourceBundle bundle>;

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r7.<org.apache.batik.util.resources.ResourceFormatException: void <init>(java.lang.String,java.lang.String,java.lang.String)>("Malformed character", $r6, r1);

        throw $r7;

     label2:
        $c1 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(0);

        $i2 = (int) $c1;

        return $i2;
    }
}
