public final class com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords extends com.hp.hpl.jena.tdb.index.bplustree.BPTreePage
{
    private static org.slf4j.Logger log;
    private final com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPage rBuffPage;
    private com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff;

    void <init>(com.hp.hpl.jena.tdb.index.bplustree.BPlusTree, com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPage)
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords r0;
        com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPage r2, $r3;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r4;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTree r1;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords;

        r1 := @parameter0: com.hp.hpl.jena.tdb.index.bplustree.BPlusTree;

        r2 := @parameter1: com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPage;

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: void <init>(com.hp.hpl.jena.tdb.index.bplustree.BPlusTree)>(r1);

        r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPage rBuffPage> = r2;

        $r3 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPage rBuffPage>;

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPage: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer getRecordBuffer()>();

        r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff> = $r4;

        return;
    }

    com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPage getRecordBufferPage()
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords r0;
        com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPage $r1;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords;

        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPage rBuffPage>;

        return $r1;
    }

    public com.hp.hpl.jena.tdb.base.buffer.RecordBuffer getRecordBuffer()
    {
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r1;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords r0;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords;

        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        return $r1;
    }

    public final com.hp.hpl.jena.tdb.base.block.Block getBackingBlock()
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords r0;
        com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPage $r1;
        com.hp.hpl.jena.tdb.base.block.Block $r2;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords;

        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPage rBuffPage>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPage: com.hp.hpl.jena.tdb.base.block.Block getBackingBlock()>();

        return $r2;
    }

    public void reset(com.hp.hpl.jena.tdb.base.block.Block)
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords r0;
        com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPage $r2, $r3;
        com.hp.hpl.jena.tdb.base.block.Block r1;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r4;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords;

        r1 := @parameter0: com.hp.hpl.jena.tdb.base.block.Block;

        $r2 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPage rBuffPage>;

        virtualinvoke $r2.<com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPage: void reset(com.hp.hpl.jena.tdb.base.block.Block)>(r1);

        $r3 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPage rBuffPage>;

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPage: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer getRecordBuffer()>();

        r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff> = $r4;

        return;
    }

    int getLink()
    {
        int $i0;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords r0;
        com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPage $r1;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords;

        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPage rBuffPage>;

        $i0 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPage: int getLink()>();

        return $i0;
    }

    public boolean isFull()
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords r0;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r1, $r2;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords;

        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        $i0 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int size()>();

        $r2 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        $i1 = virtualinvoke $r2.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int maxSize()>();

        if $i0 < $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean hasAnyKeys()
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords r0;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r1;
        int $i0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords;

        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        $i0 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int size()>();

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isMinSize()
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords r0;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r1, $r2;
        int $i0, $i1, $i2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords;

        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        $i0 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int size()>();

        $r2 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        $i1 = virtualinvoke $r2.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int maxSize()>();

        $i2 = $i1 / 2;

        if $i0 > $i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public com.hp.hpl.jena.tdb.base.record.Record internalSearch(com.hp.hpl.jena.tdb.base.record.Record)
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords r0;
        com.hp.hpl.jena.tdb.base.record.Record r1, $r4;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r2, $r3;
        int $i0;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords;

        r1 := @parameter0: com.hp.hpl.jena.tdb.base.record.Record;

        $r2 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        $i0 = virtualinvoke $r2.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int find(com.hp.hpl.jena.tdb.base.record.Record)>(r1);

        if $i0 >= 0 goto label1;

        return null;

     label1:
        $r3 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: com.hp.hpl.jena.tdb.base.record.Record get(int)>($i0);

        return $r4;
    }

    public final void write()
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords r0;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTree $r1;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecordsMgr $r2;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords;

        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.index.bplustree.BPlusTree bpTree>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTree: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecordsMgr getRecordsMgr()>();

        virtualinvoke $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecordsMgr: void write(com.hp.hpl.jena.tdb.base.page.Page)>(r0);

        return;
    }

    public final void promote()
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords r0;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTree $r1;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecordsMgr $r2;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords;

        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.index.bplustree.BPlusTree bpTree>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTree: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecordsMgr getRecordsMgr()>();

        virtualinvoke $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecordsMgr: void promote(com.hp.hpl.jena.tdb.base.page.Page)>(r0);

        return;
    }

    public final void release()
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords r0;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTree $r1;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecordsMgr $r2;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords;

        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.index.bplustree.BPlusTree bpTree>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTree: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecordsMgr getRecordsMgr()>();

        virtualinvoke $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecordsMgr: void release(com.hp.hpl.jena.tdb.base.page.Page)>(r0);

        return;
    }

    public final void free()
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords r0;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTree $r1;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecordsMgr $r2;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords;

        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.index.bplustree.BPlusTree bpTree>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTree: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecordsMgr getRecordsMgr()>();

        virtualinvoke $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecordsMgr: void free(com.hp.hpl.jena.tdb.base.page.Page)>(r0);

        return;
    }

    public com.hp.hpl.jena.tdb.base.record.Record internalInsert(com.hp.hpl.jena.tdb.base.record.Record)
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords r0;
        com.hp.hpl.jena.tdb.base.record.Record r1, $r4, r10;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r2, $r3, $r5, $r6, $r7, $r8;
        int $i0, $i1, $i2, $i3, $i4;
        com.hp.hpl.jena.tdb.base.StorageException $r9;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords;

        r1 := @parameter0: com.hp.hpl.jena.tdb.base.record.Record;

        virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: void promote()>();

        $r2 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        $i0 = virtualinvoke $r2.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int find(com.hp.hpl.jena.tdb.base.record.Record)>(r1);

        r10 = null;

        if $i0 >= 0 goto label2;

        $i2 = staticinvoke <org.apache.jena.atlas.lib.Alg: int decodeIndex(int)>($i0);

        $r6 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        $i3 = virtualinvoke $r6.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int size()>();

        $r7 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        $i4 = virtualinvoke $r7.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int maxSize()>();

        if $i3 < $i4 goto label1;

        $r9 = new com.hp.hpl.jena.tdb.base.StorageException;

        specialinvoke $r9.<com.hp.hpl.jena.tdb.base.StorageException: void <init>(java.lang.String)>("RecordBlock.put overflow");

        throw $r9;

     label1:
        $r8 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        virtualinvoke $r8.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: void add(int,com.hp.hpl.jena.tdb.base.record.Record)>($i2, r1);

        goto label3;

     label2:
        $r3 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: com.hp.hpl.jena.tdb.base.record.Record get(int)>($i0);

        r10 = $r4;

        $i1 = staticinvoke <com.hp.hpl.jena.tdb.base.record.Record: int compareByKeyValue(com.hp.hpl.jena.tdb.base.record.Record,com.hp.hpl.jena.tdb.base.record.Record)>(r1, $r4);

        if $i1 == 0 goto label3;

        $r5 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        virtualinvoke $r5.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: void set(int,com.hp.hpl.jena.tdb.base.record.Record)>($i0, r1);

     label3:
        virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: void write()>();

        return r10;
    }

    public com.hp.hpl.jena.tdb.base.record.Record internalDelete(com.hp.hpl.jena.tdb.base.record.Record)
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords r0;
        com.hp.hpl.jena.tdb.base.record.Record r1, $r4;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r2, $r3, $r5;
        int $i0;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords;

        r1 := @parameter0: com.hp.hpl.jena.tdb.base.record.Record;

        virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: void promote()>();

        $r2 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        $i0 = virtualinvoke $r2.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int find(com.hp.hpl.jena.tdb.base.record.Record)>(r1);

        if $i0 >= 0 goto label1;

        return null;

     label1:
        $r3 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: com.hp.hpl.jena.tdb.base.record.Record get(int)>($i0);

        $r5 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        virtualinvoke $r5.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: void remove(int)>($i0);

        virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: void write()>();

        return $r4;
    }

    public final com.hp.hpl.jena.tdb.base.record.Record getSplitKey()
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords r0;
        com.hp.hpl.jena.tdb.base.record.Record $r3;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r1, $r2;
        int $i0, $i1, i2;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords;

        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        $i0 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int size()>();

        $i1 = $i0 / 2;

        i2 = $i1 - 1;

        $r2 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: com.hp.hpl.jena.tdb.base.record.Record get(int)>(i2);

        return $r3;
    }

    public final com.hp.hpl.jena.tdb.index.bplustree.BPTreePage split()
    {
        com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPage $r1, $r3, $r9;
        com.hp.hpl.jena.tdb.base.record.Record $r6, $r13;
        boolean $z0, $z1;
        java.lang.Object[] $r18;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords r0, $r2;
        int $i0, $i1, $i2, $i3, i4, $i5, $i6, i7, $i8, $i9, $i10;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r4, $r5, $r7, $r8, $r10, $r11, $r12, $r14, $r16;
        java.io.PrintStream $r15, $r17;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords;

        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPage rBuffPage>;

        $i0 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPage: int getLink()>();

        $r2 = specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords create(int)>($i0);

        $r3 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPage rBuffPage>;

        $i1 = virtualinvoke $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: int getId()>();

        virtualinvoke $r3.<com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPage: void setLink(int)>($i1);

        $r4 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        $i2 = virtualinvoke $r4.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int size()>();

        $i3 = $i2 / 2;

        i4 = $i3 - 1;

        $r5 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        $r6 = virtualinvoke $r5.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: com.hp.hpl.jena.tdb.base.record.Record get(int)>(i4);

        $r7 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        $i5 = virtualinvoke $r7.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int size()>();

        $i6 = i4 + 1;

        i7 = $i5 - $i6;

        $r8 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        $i8 = i4 + 1;

        $r9 = virtualinvoke $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPage getRecordBufferPage()>();

        $r10 = virtualinvoke $r9.<com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPage: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer getRecordBuffer()>();

        virtualinvoke $r8.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: void copy(int,com.hp.hpl.jena.tdb.base.buffer.BufferBase,int,int)>($i8, $r10, 0, i7);

        $r11 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        $i9 = i4 + 1;

        virtualinvoke $r11.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: void clear(int,int)>($i9, i7);

        $r12 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        $i10 = i4 + 1;

        virtualinvoke $r12.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: void setSize(int)>($i10);

        $z0 = <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: boolean CheckingNode>;

        if $z0 == 0 goto label1;

        $r13 = virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.record.Record maxRecord()>();

        $z1 = staticinvoke <com.hp.hpl.jena.tdb.base.record.Record: boolean keyEQ(com.hp.hpl.jena.tdb.base.record.Record,com.hp.hpl.jena.tdb.base.record.Record)>($r6, $r13);

        if $z1 != 0 goto label1;

        $r15 = <java.lang.System: java.io.PrintStream err>;

        $r14 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.Object)>($r14);

        $r17 = <java.lang.System: java.io.PrintStream err>;

        $r16 = $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.Object)>($r16);

        $r18 = newarray (java.lang.Object)[0];

        staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: void error(java.lang.String,java.lang.Object[])>("BPTreeRecords.split: Not returning expected record", $r18);

     label1:
        return $r2;
    }

    private com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords create(int)
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords r0, $r3;
        com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPage $r4;
        int i0;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTree $r1;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecordsMgr $r2;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords;

        i0 := @parameter0: int;

        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.index.bplustree.BPlusTree bpTree>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTree: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecordsMgr getRecordsMgr()>();

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecordsMgr: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords create()>();

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPage getRecordBufferPage()>();

        virtualinvoke $r4.<com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPage: void setLink(int)>(i0);

        return $r3;
    }

    public com.hp.hpl.jena.tdb.base.record.Record shiftRight(com.hp.hpl.jena.tdb.index.bplustree.BPTreePage, com.hp.hpl.jena.tdb.base.record.Record)
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreePage r0;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords $r1, r2;
        com.hp.hpl.jena.tdb.base.record.Record $r7, r8;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r3, $r4, $r5, $r6;
        int $i0;

        r2 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords;

        r0 := @parameter0: com.hp.hpl.jena.tdb.index.bplustree.BPTreePage;

        r8 := @parameter1: com.hp.hpl.jena.tdb.base.record.Record;

        $r1 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords cast(com.hp.hpl.jena.tdb.index.bplustree.BPTreePage)>(r0);

        $r4 = r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        $r3 = $r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        virtualinvoke $r4.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: void shiftRight(com.hp.hpl.jena.tdb.base.buffer.BufferBase)>($r3);

        $r5 = r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        $i0 = virtualinvoke $r5.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int size()>();

        if $i0 != 0 goto label1;

        return null;

     label1:
        $r6 = r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        $r7 = virtualinvoke $r6.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: com.hp.hpl.jena.tdb.base.record.Record getHigh()>();

        return $r7;
    }

    public com.hp.hpl.jena.tdb.base.record.Record shiftLeft(com.hp.hpl.jena.tdb.index.bplustree.BPTreePage, com.hp.hpl.jena.tdb.base.record.Record)
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreePage r0;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords $r1, r2;
        com.hp.hpl.jena.tdb.base.record.Record $r7, r8;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r3, $r4, $r5, $r6;
        int $i0;

        r2 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords;

        r0 := @parameter0: com.hp.hpl.jena.tdb.index.bplustree.BPTreePage;

        r8 := @parameter1: com.hp.hpl.jena.tdb.base.record.Record;

        $r1 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords cast(com.hp.hpl.jena.tdb.index.bplustree.BPTreePage)>(r0);

        $r4 = r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        $r3 = $r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        virtualinvoke $r4.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: void shiftLeft(com.hp.hpl.jena.tdb.base.buffer.BufferBase)>($r3);

        $r5 = r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        $i0 = virtualinvoke $r5.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int size()>();

        if $i0 != 0 goto label1;

        return null;

     label1:
        $r6 = r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        $r7 = virtualinvoke $r6.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: com.hp.hpl.jena.tdb.base.record.Record getHigh()>();

        return $r7;
    }

    public com.hp.hpl.jena.tdb.index.bplustree.BPTreePage merge(com.hp.hpl.jena.tdb.index.bplustree.BPTreePage, com.hp.hpl.jena.tdb.base.record.Record)
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords r0, $r2, $r3;
        com.hp.hpl.jena.tdb.base.record.Record r4;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreePage r1;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords;

        r1 := @parameter0: com.hp.hpl.jena.tdb.index.bplustree.BPTreePage;

        r4 := @parameter1: com.hp.hpl.jena.tdb.base.record.Record;

        $r2 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords cast(com.hp.hpl.jena.tdb.index.bplustree.BPTreePage)>(r1);

        $r3 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords merge(com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords,com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords)>(r0, $r2);

        return $r3;
    }

    private static com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords merge(com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords, com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords)
    {
        com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPage $r5, $r6;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords r0, r1;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r2, $r3, $r4;
        int $i0;

        r1 := @parameter0: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords;

        r0 := @parameter1: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords;

        $r3 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        $r2 = r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        virtualinvoke $r3.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: void copyToTop(com.hp.hpl.jena.tdb.base.buffer.BufferBase)>($r2);

        $r4 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        virtualinvoke $r4.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: void clear()>();

        $r6 = r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPage rBuffPage>;

        $r5 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPage rBuffPage>;

        $i0 = virtualinvoke $r5.<com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPage: int getLink()>();

        virtualinvoke $r6.<com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPage: void setLink(int)>($i0);

        return r1;
    }

    private static com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords cast(com.hp.hpl.jena.tdb.index.bplustree.BPTreePage)
    {
        java.lang.Object[] $r7;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreePage r0;
        java.lang.ClassCastException $r2;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords $r1;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @parameter0: com.hp.hpl.jena.tdb.index.bplustree.BPTreePage;

     label1:
        $r1 = (com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords) r0;

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wrong type: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = newarray (java.lang.Object)[0];

        staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: void error(java.lang.String,java.lang.Object[])>($r6, $r7);

        return null;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public final com.hp.hpl.jena.tdb.base.record.Record minRecord()
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords r0;
        com.hp.hpl.jena.tdb.base.record.Record $r1;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.record.Record getLowRecord()>();

        return $r1;
    }

    public final com.hp.hpl.jena.tdb.base.record.Record maxRecord()
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords r0;
        com.hp.hpl.jena.tdb.base.record.Record $r1;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.record.Record getHighRecord()>();

        return $r1;
    }

    private static transient void error(java.lang.String, java.lang.Object[])
    {
        java.io.PrintStream $r2, $r3;
        java.lang.Object[] r0;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeException $r4;
        java.lang.String $r1, r5;

        r5 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Object[];

        $r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r5, r0);

        $r2 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r1);

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void flush()>();

        $r4 = new com.hp.hpl.jena.tdb.index.bplustree.BPTreeException;

        specialinvoke $r4.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeException: void <init>(java.lang.String)>($r1);

        throw $r4;
    }

    public final com.hp.hpl.jena.tdb.base.record.Record getLowRecord()
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords r0;
        com.hp.hpl.jena.tdb.base.record.Record $r3;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r1, $r2;
        int $i0;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords;

        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        $i0 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int size()>();

        if $i0 != 0 goto label1;

        return null;

     label1:
        $r2 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: com.hp.hpl.jena.tdb.base.record.Record getLow()>();

        return $r3;
    }

    public final com.hp.hpl.jena.tdb.base.record.Record getHighRecord()
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords r0;
        com.hp.hpl.jena.tdb.base.record.Record $r3;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r1, $r2;
        int $i0;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords;

        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        $i0 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int size()>();

        if $i0 != 0 goto label1;

        return null;

     label1:
        $r2 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: com.hp.hpl.jena.tdb.base.record.Record getHigh()>();

        return $r3;
    }

    public final int getMaxSize()
    {
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r1;
        int $i0;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords r0;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords;

        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        $i0 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int maxSize()>();

        return $i0;
    }

    public final int getCount()
    {
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r1;
        int $i0;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords r0;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords;

        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        $i0 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int size()>();

        return $i0;
    }

    public final void setCount(int)
    {
        int i0;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r1;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords r0;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords;

        i0 := @parameter0: int;

        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        virtualinvoke $r1.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: void setSize(int)>(i0);

        return;
    }

    public java.lang.String toString()
    {
        java.lang.Object[] $r0;
        java.lang.Integer $r2, $r3;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords r1;
        int $i0, $i1;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r4;
        java.lang.String $r5, $r6;

        r1 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords;

        $r0 = newarray (java.lang.Object)[3];

        $i0 = virtualinvoke r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: int getId()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r0[0] = $r2;

        $i1 = virtualinvoke r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: int getLink()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r0[1] = $r3;

        $r4 = r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        $r5 = virtualinvoke $r4.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: java.lang.String toString()>();

        $r0[2] = $r5;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("BPTreeRecords[id=%d, link=%d]: %s", $r0);

        return $r6;
    }

    public final void checkNode()
    {
        java.lang.Object[] $r2, $r7;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords r0;
        com.hp.hpl.jena.tdb.base.record.Record $r4, $r6;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r1, $r3, $r5, $r8, $r9;
        int $i0, $i1, $i2, $i3, i4, $i5;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords;

        $z0 = <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: boolean CheckingNode>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        $i0 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int size()>();

        if $i0 < 0 goto label2;

        $r8 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        $i2 = virtualinvoke $r8.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int size()>();

        $r9 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        $i3 = virtualinvoke $r9.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int maxSize()>();

        if $i2 <= $i3 goto label3;

     label2:
        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r0;

        staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: void error(java.lang.String,java.lang.Object[])>("Misized: %s", $r2);

     label3:
        i4 = 1;

     label4:
        $i5 = virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: int getCount()>();

        if i4 >= $i5 goto label6;

        $r3 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        $i1 = i4 - 1;

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: com.hp.hpl.jena.tdb.base.record.Record get(int)>($i1);

        $r5 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer rBuff>;

        $r6 = virtualinvoke $r5.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: com.hp.hpl.jena.tdb.base.record.Record get(int)>(i4);

        $z1 = staticinvoke <com.hp.hpl.jena.tdb.base.record.Record: boolean keyGT(com.hp.hpl.jena.tdb.base.record.Record,com.hp.hpl.jena.tdb.base.record.Record)>($r4, $r6);

        if $z1 == 0 goto label5;

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = r0;

        staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: void error(java.lang.String,java.lang.Object[])>("Not sorted: %s", $r7);

     label5:
        i4 = i4 + 1;

        goto label4;

     label6:
        return;
    }

    public final void checkNodeDeep()
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords r0;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords;

        virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: void checkNode()>();

        return;
    }

    public int getId()
    {
        int $i0;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords r0;
        com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPage $r1;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords;

        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPage rBuffPage>;

        $i0 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPage: int getId()>();

        return $i0;
    }

    public void output(org.apache.jena.atlas.io.IndentedWriter)
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords r1;
        java.lang.String $r2;
        org.apache.jena.atlas.io.IndentedWriter r0;

        r1 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords;

        r0 := @parameter0: org.apache.jena.atlas.io.IndentedWriter;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.jena.atlas.io.IndentedWriter: void print(java.lang.String)>($r2);

        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/hp/hpl/jena/tdb/index/bplustree/BPTreeRecords;");

        <com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: org.slf4j.Logger log> = $r0;

        return;
    }
}
