public final class org.waveprotocol.wave.concurrencycontrol.jso.OpenWaveletChannelStreamJsoImpl extends org.waveprotocol.wave.communication.gwt.JsonMessage implements org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream
{
    private static final java.lang.String keyChannelId;
    private static final java.lang.String keyDelta;
    private static final java.lang.String keyCommitVersion;
    private static final java.lang.String keyTerminator;

    protected void <init>()
    {
        org.waveprotocol.wave.concurrencycontrol.jso.OpenWaveletChannelStreamJsoImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.jso.OpenWaveletChannelStreamJsoImpl;

        specialinvoke r0.<org.waveprotocol.wave.communication.gwt.JsonMessage: void <init>()>();

        return;
    }

    public static org.waveprotocol.wave.concurrencycontrol.jso.OpenWaveletChannelStreamJsoImpl create()
    {
        org.waveprotocol.wave.communication.gwt.JsonMessage $r0;
        org.waveprotocol.wave.concurrencycontrol.jso.OpenWaveletChannelStreamJsoImpl r1;

        $r0 = staticinvoke <org.waveprotocol.wave.communication.gwt.JsonMessage: org.waveprotocol.wave.communication.gwt.JsonMessage createJsonMessage()>();

        r1 = (org.waveprotocol.wave.concurrencycontrol.jso.OpenWaveletChannelStreamJsoImpl) $r0;

        return r1;
    }

    public void copyFrom(org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream)
    {
        org.waveprotocol.wave.concurrencycontrol.jso.OpenWaveletChannelStreamJsoImpl r0, $r2;
        org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.jso.OpenWaveletChannelStreamJsoImpl;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream;

        $r2 = (org.waveprotocol.wave.concurrencycontrol.jso.OpenWaveletChannelStreamJsoImpl) r1;

        specialinvoke r0.<org.waveprotocol.wave.communication.gwt.JsonMessage: void copyFrom(org.waveprotocol.wave.communication.gwt.JsonMessage)>($r2);

        return;
    }

    public boolean hasChannelId()
    {
        org.waveprotocol.wave.concurrencycontrol.jso.OpenWaveletChannelStreamJsoImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.jso.OpenWaveletChannelStreamJsoImpl;

        $z0 = staticinvoke <org.waveprotocol.wave.communication.gwt.JsonHelper: boolean hasProperty(com.google.gwt.core.client.JavaScriptObject,java.lang.String)>(r0, "1");

        return $z0;
    }

    public void clearChannelId()
    {
        org.waveprotocol.wave.concurrencycontrol.jso.OpenWaveletChannelStreamJsoImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.jso.OpenWaveletChannelStreamJsoImpl;

        $z0 = staticinvoke <org.waveprotocol.wave.communication.gwt.JsonHelper: boolean hasProperty(com.google.gwt.core.client.JavaScriptObject,java.lang.String)>(r0, "1");

        if $z0 == 0 goto label1;

        staticinvoke <org.waveprotocol.wave.communication.gwt.JsonHelper: void deleteProperty(com.google.gwt.core.client.JavaScriptObject,java.lang.String)>(r0, "1");

     label1:
        return;
    }

    public java.lang.String getChannelId()
    {
        java.lang.String $r1;
        org.waveprotocol.wave.concurrencycontrol.jso.OpenWaveletChannelStreamJsoImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.jso.OpenWaveletChannelStreamJsoImpl;

        $z0 = staticinvoke <org.waveprotocol.wave.communication.gwt.JsonHelper: boolean hasProperty(com.google.gwt.core.client.JavaScriptObject,java.lang.String)>(r0, "1");

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <org.waveprotocol.wave.communication.gwt.JsonHelper: java.lang.String getPropertyAsString(com.google.gwt.core.client.JavaScriptObject,java.lang.String)>(r0, "1");

        goto label2;

     label1:
        $r1 = null;

     label2:
        return $r1;
    }

    public void setChannelId(java.lang.String)
    {
        java.lang.String r1;
        org.waveprotocol.wave.concurrencycontrol.jso.OpenWaveletChannelStreamJsoImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.jso.OpenWaveletChannelStreamJsoImpl;

        r1 := @parameter0: java.lang.String;

        staticinvoke <org.waveprotocol.wave.communication.gwt.JsonHelper: void setPropertyAsString(com.google.gwt.core.client.JavaScriptObject,java.lang.String,java.lang.String)>(r0, "1", r1);

        return;
    }

    public boolean hasDelta()
    {
        org.waveprotocol.wave.concurrencycontrol.jso.OpenWaveletChannelStreamJsoImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.jso.OpenWaveletChannelStreamJsoImpl;

        $z0 = staticinvoke <org.waveprotocol.wave.communication.gwt.JsonHelper: boolean hasProperty(com.google.gwt.core.client.JavaScriptObject,java.lang.String)>(r0, "2");

        return $z0;
    }

    public void clearDelta()
    {
        org.waveprotocol.wave.concurrencycontrol.jso.OpenWaveletChannelStreamJsoImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.jso.OpenWaveletChannelStreamJsoImpl;

        $z0 = staticinvoke <org.waveprotocol.wave.communication.gwt.JsonHelper: boolean hasProperty(com.google.gwt.core.client.JavaScriptObject,java.lang.String)>(r0, "2");

        if $z0 == 0 goto label1;

        staticinvoke <org.waveprotocol.wave.communication.gwt.JsonHelper: void deleteProperty(com.google.gwt.core.client.JavaScriptObject,java.lang.String)>(r0, "2");

     label1:
        return;
    }

    public org.waveprotocol.wave.concurrencycontrol.WaveletUpdate getDelta()
    {
        com.google.gwt.core.client.JavaScriptObject $r1;
        org.waveprotocol.wave.concurrencycontrol.jso.WaveletUpdateJsoImpl $r2;
        org.waveprotocol.wave.concurrencycontrol.jso.OpenWaveletChannelStreamJsoImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.jso.OpenWaveletChannelStreamJsoImpl;

        $z0 = staticinvoke <org.waveprotocol.wave.communication.gwt.JsonHelper: boolean hasProperty(com.google.gwt.core.client.JavaScriptObject,java.lang.String)>(r0, "2");

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <org.waveprotocol.wave.communication.gwt.JsonHelper: com.google.gwt.core.client.JavaScriptObject getPropertyAsObject(com.google.gwt.core.client.JavaScriptObject,java.lang.String)>(r0, "2");

        $r2 = (org.waveprotocol.wave.concurrencycontrol.jso.WaveletUpdateJsoImpl) $r1;

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public void setDelta(org.waveprotocol.wave.concurrencycontrol.WaveletUpdate)
    {
        org.waveprotocol.wave.concurrencycontrol.jso.WaveletUpdateJsoImpl $r2;
        org.waveprotocol.wave.concurrencycontrol.WaveletUpdate r1;
        org.waveprotocol.wave.concurrencycontrol.jso.OpenWaveletChannelStreamJsoImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.jso.OpenWaveletChannelStreamJsoImpl;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.WaveletUpdate;

        $r2 = (org.waveprotocol.wave.concurrencycontrol.jso.WaveletUpdateJsoImpl) r1;

        staticinvoke <org.waveprotocol.wave.communication.gwt.JsonHelper: void setPropertyAsObject(com.google.gwt.core.client.JavaScriptObject,java.lang.String,com.google.gwt.core.client.JavaScriptObject)>(r0, "2", $r2);

        return;
    }

    public boolean hasCommitVersion()
    {
        org.waveprotocol.wave.concurrencycontrol.jso.OpenWaveletChannelStreamJsoImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.jso.OpenWaveletChannelStreamJsoImpl;

        $z0 = staticinvoke <org.waveprotocol.wave.communication.gwt.JsonHelper: boolean hasProperty(com.google.gwt.core.client.JavaScriptObject,java.lang.String)>(r0, "3");

        return $z0;
    }

    public void clearCommitVersion()
    {
        org.waveprotocol.wave.concurrencycontrol.jso.OpenWaveletChannelStreamJsoImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.jso.OpenWaveletChannelStreamJsoImpl;

        $z0 = staticinvoke <org.waveprotocol.wave.communication.gwt.JsonHelper: boolean hasProperty(com.google.gwt.core.client.JavaScriptObject,java.lang.String)>(r0, "3");

        if $z0 == 0 goto label1;

        staticinvoke <org.waveprotocol.wave.communication.gwt.JsonHelper: void deleteProperty(com.google.gwt.core.client.JavaScriptObject,java.lang.String)>(r0, "3");

     label1:
        return;
    }

    public org.waveprotocol.wave.federation.ProtocolHashedVersion getCommitVersion()
    {
        com.google.gwt.core.client.JavaScriptObject $r1;
        org.waveprotocol.wave.concurrencycontrol.jso.OpenWaveletChannelStreamJsoImpl r0;
        org.waveprotocol.wave.federation.jso.ProtocolHashedVersionJsoImpl $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.jso.OpenWaveletChannelStreamJsoImpl;

        $z0 = staticinvoke <org.waveprotocol.wave.communication.gwt.JsonHelper: boolean hasProperty(com.google.gwt.core.client.JavaScriptObject,java.lang.String)>(r0, "3");

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <org.waveprotocol.wave.communication.gwt.JsonHelper: com.google.gwt.core.client.JavaScriptObject getPropertyAsObject(com.google.gwt.core.client.JavaScriptObject,java.lang.String)>(r0, "3");

        $r2 = (org.waveprotocol.wave.federation.jso.ProtocolHashedVersionJsoImpl) $r1;

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public void setCommitVersion(org.waveprotocol.wave.federation.ProtocolHashedVersion)
    {
        org.waveprotocol.wave.federation.ProtocolHashedVersion r1;
        org.waveprotocol.wave.concurrencycontrol.jso.OpenWaveletChannelStreamJsoImpl r0;
        org.waveprotocol.wave.federation.jso.ProtocolHashedVersionJsoImpl $r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.jso.OpenWaveletChannelStreamJsoImpl;

        r1 := @parameter0: org.waveprotocol.wave.federation.ProtocolHashedVersion;

        $r2 = (org.waveprotocol.wave.federation.jso.ProtocolHashedVersionJsoImpl) r1;

        staticinvoke <org.waveprotocol.wave.communication.gwt.JsonHelper: void setPropertyAsObject(com.google.gwt.core.client.JavaScriptObject,java.lang.String,com.google.gwt.core.client.JavaScriptObject)>(r0, "3", $r2);

        return;
    }

    public boolean hasTerminator()
    {
        org.waveprotocol.wave.concurrencycontrol.jso.OpenWaveletChannelStreamJsoImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.jso.OpenWaveletChannelStreamJsoImpl;

        $z0 = staticinvoke <org.waveprotocol.wave.communication.gwt.JsonHelper: boolean hasProperty(com.google.gwt.core.client.JavaScriptObject,java.lang.String)>(r0, "4");

        return $z0;
    }

    public void clearTerminator()
    {
        org.waveprotocol.wave.concurrencycontrol.jso.OpenWaveletChannelStreamJsoImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.jso.OpenWaveletChannelStreamJsoImpl;

        $z0 = staticinvoke <org.waveprotocol.wave.communication.gwt.JsonHelper: boolean hasProperty(com.google.gwt.core.client.JavaScriptObject,java.lang.String)>(r0, "4");

        if $z0 == 0 goto label1;

        staticinvoke <org.waveprotocol.wave.communication.gwt.JsonHelper: void deleteProperty(com.google.gwt.core.client.JavaScriptObject,java.lang.String)>(r0, "4");

     label1:
        return;
    }

    public org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminator getTerminator()
    {
        com.google.gwt.core.client.JavaScriptObject $r1;
        org.waveprotocol.wave.concurrencycontrol.jso.WaveletChannelTerminatorJsoImpl $r2;
        org.waveprotocol.wave.concurrencycontrol.jso.OpenWaveletChannelStreamJsoImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.jso.OpenWaveletChannelStreamJsoImpl;

        $z0 = staticinvoke <org.waveprotocol.wave.communication.gwt.JsonHelper: boolean hasProperty(com.google.gwt.core.client.JavaScriptObject,java.lang.String)>(r0, "4");

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <org.waveprotocol.wave.communication.gwt.JsonHelper: com.google.gwt.core.client.JavaScriptObject getPropertyAsObject(com.google.gwt.core.client.JavaScriptObject,java.lang.String)>(r0, "4");

        $r2 = (org.waveprotocol.wave.concurrencycontrol.jso.WaveletChannelTerminatorJsoImpl) $r1;

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public void setTerminator(org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminator)
    {
        org.waveprotocol.wave.concurrencycontrol.jso.WaveletChannelTerminatorJsoImpl $r2;
        org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminator r1;
        org.waveprotocol.wave.concurrencycontrol.jso.OpenWaveletChannelStreamJsoImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.jso.OpenWaveletChannelStreamJsoImpl;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminator;

        $r2 = (org.waveprotocol.wave.concurrencycontrol.jso.WaveletChannelTerminatorJsoImpl) r1;

        staticinvoke <org.waveprotocol.wave.communication.gwt.JsonHelper: void setPropertyAsObject(com.google.gwt.core.client.JavaScriptObject,java.lang.String,com.google.gwt.core.client.JavaScriptObject)>(r0, "4", $r2);

        return;
    }

    public boolean isEqualTo(java.lang.Object)
    {
        java.lang.Object r0;
        org.waveprotocol.wave.concurrencycontrol.jso.OpenWaveletChannelStreamJsoImpl r1;
        boolean $z0, $z1, $z2, $z3;
        org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream $r2;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.jso.OpenWaveletChannelStreamJsoImpl;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.waveprotocol.wave.concurrencycontrol.jso.OpenWaveletChannelStreamJsoImpl;

        if $z0 == 0 goto label1;

        $z3 = virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.jso.OpenWaveletChannelStreamJsoImpl: boolean nativeIsEqualTo(java.lang.Object)>(r0);

        return $z3;

     label1:
        $z1 = r0 instanceof org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream;

        if $z1 == 0 goto label2;

        $r2 = (org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream) r0;

        $z2 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStreamUtil: boolean isEqual(org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream,org.waveprotocol.wave.concurrencycontrol.OpenWaveletChannelStream)>(r1, $r2);

        return $z2;

     label2:
        return 0;
    }

    public static void <clinit>()
    {
        <org.waveprotocol.wave.concurrencycontrol.jso.OpenWaveletChannelStreamJsoImpl: java.lang.String keyTerminator> = "4";

        <org.waveprotocol.wave.concurrencycontrol.jso.OpenWaveletChannelStreamJsoImpl: java.lang.String keyCommitVersion> = "3";

        <org.waveprotocol.wave.concurrencycontrol.jso.OpenWaveletChannelStreamJsoImpl: java.lang.String keyDelta> = "2";

        <org.waveprotocol.wave.concurrencycontrol.jso.OpenWaveletChannelStreamJsoImpl: java.lang.String keyChannelId> = "1";

        return;
    }
}
