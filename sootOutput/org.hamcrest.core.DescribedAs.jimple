public class org.hamcrest.core.DescribedAs extends org.hamcrest.BaseMatcher
{
    private final java.lang.String descriptionTemplate;
    private final org.hamcrest.Matcher matcher;
    private final java.lang.Object[] values;
    private static final java.util.regex.Pattern ARG_PATTERN;

    public void <init>(java.lang.String, org.hamcrest.Matcher, java.lang.Object[])
    {
        java.lang.Object[] r3, $r5;
        org.hamcrest.Matcher r2;
        java.lang.Object $r4;
        java.lang.String r1;
        org.hamcrest.core.DescribedAs r0;

        r0 := @this: org.hamcrest.core.DescribedAs;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.hamcrest.Matcher;

        r3 := @parameter2: java.lang.Object[];

        specialinvoke r0.<org.hamcrest.BaseMatcher: void <init>()>();

        r0.<org.hamcrest.core.DescribedAs: java.lang.String descriptionTemplate> = r1;

        r0.<org.hamcrest.core.DescribedAs: org.hamcrest.Matcher matcher> = r2;

        $r4 = virtualinvoke r3.<java.lang.Object: java.lang.Object clone()>();

        $r5 = (java.lang.Object[]) $r4;

        r0.<org.hamcrest.core.DescribedAs: java.lang.Object[] values> = $r5;

        return;
    }

    public boolean matches(java.lang.Object)
    {
        org.hamcrest.Matcher $r2;
        java.lang.Object r1;
        org.hamcrest.core.DescribedAs r0;
        boolean $z0;

        r0 := @this: org.hamcrest.core.DescribedAs;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.hamcrest.core.DescribedAs: org.hamcrest.Matcher matcher>;

        $z0 = interfaceinvoke $r2.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>(r1);

        return $z0;
    }

    public void describeTo(org.hamcrest.Description)
    {
        java.lang.Object[] $r10;
        java.util.regex.Matcher $r3;
        int $i0, $i1, $i2, i3;
        java.lang.String $r1, $r4, $r6, $r7, $r8, $r9, $r11;
        boolean $z0;
        org.hamcrest.Description r5;
        org.hamcrest.core.DescribedAs r0;
        java.lang.Object $r12;
        java.util.regex.Pattern $r2;

        r0 := @this: org.hamcrest.core.DescribedAs;

        r5 := @parameter0: org.hamcrest.Description;

        $r2 = <org.hamcrest.core.DescribedAs: java.util.regex.Pattern ARG_PATTERN>;

        $r1 = r0.<org.hamcrest.core.DescribedAs: java.lang.String descriptionTemplate>;

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r1);

        i3 = 0;

     label1:
        $z0 = virtualinvoke $r3.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label2;

        $r8 = r0.<org.hamcrest.core.DescribedAs: java.lang.String descriptionTemplate>;

        $i1 = virtualinvoke $r3.<java.util.regex.Matcher: int start()>();

        $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String substring(int,int)>(i3, $i1);

        interfaceinvoke r5.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>($r9);

        $r10 = r0.<org.hamcrest.core.DescribedAs: java.lang.Object[] values>;

        $r11 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r11);

        $r12 = $r10[$i2];

        interfaceinvoke r5.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r12);

        i3 = virtualinvoke $r3.<java.util.regex.Matcher: int end()>();

        goto label1;

     label2:
        $r4 = r0.<org.hamcrest.core.DescribedAs: java.lang.String descriptionTemplate>;

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        if i3 >= $i0 goto label3;

        $r6 = r0.<org.hamcrest.core.DescribedAs: java.lang.String descriptionTemplate>;

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int)>(i3);

        interfaceinvoke r5.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>($r7);

     label3:
        return;
    }

    public void describeMismatch(java.lang.Object, org.hamcrest.Description)
    {
        org.hamcrest.Description r2;
        org.hamcrest.Matcher $r3;
        java.lang.Object r1;
        org.hamcrest.core.DescribedAs r0;

        r0 := @this: org.hamcrest.core.DescribedAs;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = r0.<org.hamcrest.core.DescribedAs: org.hamcrest.Matcher matcher>;

        interfaceinvoke $r3.<org.hamcrest.Matcher: void describeMismatch(java.lang.Object,org.hamcrest.Description)>(r1, r2);

        return;
    }

    public static transient org.hamcrest.Matcher describedAs(java.lang.String, org.hamcrest.Matcher, java.lang.Object[])
    {
        java.lang.Object[] r3;
        org.hamcrest.Matcher r2;
        java.lang.String r1;
        org.hamcrest.core.DescribedAs $r0;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.hamcrest.Matcher;

        r3 := @parameter2: java.lang.Object[];

        $r0 = new org.hamcrest.core.DescribedAs;

        specialinvoke $r0.<org.hamcrest.core.DescribedAs: void <init>(java.lang.String,org.hamcrest.Matcher,java.lang.Object[])>(r1, r2, r3);

        return $r0;
    }

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("%([0-9]+)");

        <org.hamcrest.core.DescribedAs: java.util.regex.Pattern ARG_PATTERN> = $r0;

        return;
    }
}
