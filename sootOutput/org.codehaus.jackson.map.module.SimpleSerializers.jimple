public class org.codehaus.jackson.map.module.SimpleSerializers extends org.codehaus.jackson.map.Serializers$Base
{
    protected java.util.HashMap _classMappings;
    protected java.util.HashMap _interfaceMappings;

    public void <init>()
    {
        org.codehaus.jackson.map.module.SimpleSerializers r0;

        r0 := @this: org.codehaus.jackson.map.module.SimpleSerializers;

        specialinvoke r0.<org.codehaus.jackson.map.Serializers$Base: void <init>()>();

        r0.<org.codehaus.jackson.map.module.SimpleSerializers: java.util.HashMap _classMappings> = null;

        r0.<org.codehaus.jackson.map.module.SimpleSerializers: java.util.HashMap _interfaceMappings> = null;

        return;
    }

    public void addSerializer(org.codehaus.jackson.map.JsonSerializer)
    {
        org.codehaus.jackson.map.JsonSerializer r0;
        java.lang.IllegalArgumentException $r2;
        org.codehaus.jackson.map.module.SimpleSerializers r11;
        java.lang.Class $r1, $r5;
        java.lang.StringBuilder $r3, $r4, $r7, $r8, $r9;
        java.lang.String $r6, $r10;

        r11 := @this: org.codehaus.jackson.map.module.SimpleSerializers;

        r0 := @parameter0: org.codehaus.jackson.map.JsonSerializer;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.JsonSerializer: java.lang.Class handledType()>();

        if $r1 == null goto label1;

        if $r1 != class "Ljava/lang/Object;" goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JsonSerializer of type ");

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not define valid handledType() -- must either register with method that takes type argument ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" or make serializer extend \'org.codehaus.jackson.map.ser.std.SerializerBase\'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r2;

     label2:
        specialinvoke r11.<org.codehaus.jackson.map.module.SimpleSerializers: void _addSerializer(java.lang.Class,org.codehaus.jackson.map.JsonSerializer)>($r1, r0);

        return;
    }

    public void addSerializer(java.lang.Class, org.codehaus.jackson.map.JsonSerializer)
    {
        java.lang.Class r1;
        org.codehaus.jackson.map.JsonSerializer r2;
        org.codehaus.jackson.map.module.SimpleSerializers r0;

        r0 := @this: org.codehaus.jackson.map.module.SimpleSerializers;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.codehaus.jackson.map.JsonSerializer;

        specialinvoke r0.<org.codehaus.jackson.map.module.SimpleSerializers: void _addSerializer(java.lang.Class,org.codehaus.jackson.map.JsonSerializer)>(r1, r2);

        return;
    }

    private void _addSerializer(java.lang.Class, org.codehaus.jackson.map.JsonSerializer)
    {
        java.util.HashMap $r3, $r5, $r6, $r7, $r8, $r9;
        org.codehaus.jackson.map.JsonSerializer r4;
        org.codehaus.jackson.map.module.SimpleSerializers r2;
        java.lang.Class r1;
        org.codehaus.jackson.map.type.ClassKey $r0;
        boolean $z0;

        r2 := @this: org.codehaus.jackson.map.module.SimpleSerializers;

        r1 := @parameter0: java.lang.Class;

        r4 := @parameter1: org.codehaus.jackson.map.JsonSerializer;

        $r0 = new org.codehaus.jackson.map.type.ClassKey;

        specialinvoke $r0.<org.codehaus.jackson.map.type.ClassKey: void <init>(java.lang.Class)>(r1);

        $z0 = virtualinvoke r1.<java.lang.Class: boolean isInterface()>();

        if $z0 == 0 goto label2;

        $r7 = r2.<org.codehaus.jackson.map.module.SimpleSerializers: java.util.HashMap _interfaceMappings>;

        if $r7 != null goto label1;

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        r2.<org.codehaus.jackson.map.module.SimpleSerializers: java.util.HashMap _interfaceMappings> = $r9;

     label1:
        $r8 = r2.<org.codehaus.jackson.map.module.SimpleSerializers: java.util.HashMap _interfaceMappings>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r0, r4);

        goto label4;

     label2:
        $r3 = r2.<org.codehaus.jackson.map.module.SimpleSerializers: java.util.HashMap _classMappings>;

        if $r3 != null goto label3;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r2.<org.codehaus.jackson.map.module.SimpleSerializers: java.util.HashMap _classMappings> = $r6;

     label3:
        $r5 = r2.<org.codehaus.jackson.map.module.SimpleSerializers: java.util.HashMap _classMappings>;

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r0, r4);

     label4:
        return;
    }

    public org.codehaus.jackson.map.JsonSerializer findSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.BeanDescription, org.codehaus.jackson.map.BeanProperty)
    {
        java.util.HashMap $r4, $r8, $r10, $r12, $r13, $r23;
        org.codehaus.jackson.map.SerializationConfig r15;
        org.codehaus.jackson.type.JavaType r0;
        org.codehaus.jackson.map.type.ClassKey $r2;
        boolean $z0, $z1;
        org.codehaus.jackson.map.JsonSerializer $r5, $r7, r19, r20, r22;
        org.codehaus.jackson.map.BeanProperty r17;
        org.codehaus.jackson.map.module.SimpleSerializers r3;
        java.lang.Class $r1, $r6, r18, r21;
        java.lang.Object $r9, $r11, $r14;
        org.codehaus.jackson.map.BeanDescription r16;

        r3 := @this: org.codehaus.jackson.map.module.SimpleSerializers;

        r15 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        r0 := @parameter1: org.codehaus.jackson.type.JavaType;

        r16 := @parameter2: org.codehaus.jackson.map.BeanDescription;

        r17 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        r18 = $r1;

        $r2 = new org.codehaus.jackson.map.type.ClassKey;

        specialinvoke $r2.<org.codehaus.jackson.map.type.ClassKey: void <init>(java.lang.Class)>($r1);

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isInterface()>();

        if $z0 == 0 goto label1;

        $r12 = r3.<org.codehaus.jackson.map.module.SimpleSerializers: java.util.HashMap _interfaceMappings>;

        if $r12 == null goto label5;

        $r13 = r3.<org.codehaus.jackson.map.module.SimpleSerializers: java.util.HashMap _interfaceMappings>;

        $r14 = virtualinvoke $r13.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        r19 = (org.codehaus.jackson.map.JsonSerializer) $r14;

        if r19 == null goto label5;

        return r19;

     label1:
        $r4 = r3.<org.codehaus.jackson.map.module.SimpleSerializers: java.util.HashMap _classMappings>;

        if $r4 == null goto label5;

        $r8 = r3.<org.codehaus.jackson.map.module.SimpleSerializers: java.util.HashMap _classMappings>;

        $r9 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        r20 = (org.codehaus.jackson.map.JsonSerializer) $r9;

        if r20 == null goto label2;

        return r20;

     label2:
        r21 = $r1;

     label3:
        if r21 == null goto label5;

        virtualinvoke $r2.<org.codehaus.jackson.map.type.ClassKey: void reset(java.lang.Class)>(r21);

        $r10 = r3.<org.codehaus.jackson.map.module.SimpleSerializers: java.util.HashMap _classMappings>;

        $r11 = virtualinvoke $r10.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        r22 = (org.codehaus.jackson.map.JsonSerializer) $r11;

        if r22 == null goto label4;

        return r22;

     label4:
        r21 = virtualinvoke r21.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label3;

     label5:
        $r23 = r3.<org.codehaus.jackson.map.module.SimpleSerializers: java.util.HashMap _interfaceMappings>;

        if $r23 == null goto label8;

        $r5 = virtualinvoke r3.<org.codehaus.jackson.map.module.SimpleSerializers: org.codehaus.jackson.map.JsonSerializer _findInterfaceMapping(java.lang.Class,org.codehaus.jackson.map.type.ClassKey)>($r1, $r2);

        if $r5 == null goto label6;

        return $r5;

     label6:
        $z1 = virtualinvoke $r1.<java.lang.Class: boolean isInterface()>();

        if $z1 != 0 goto label8;

     label7:
        $r6 = virtualinvoke r18.<java.lang.Class: java.lang.Class getSuperclass()>();

        r18 = $r6;

        if $r6 == null goto label8;

        $r7 = virtualinvoke r3.<org.codehaus.jackson.map.module.SimpleSerializers: org.codehaus.jackson.map.JsonSerializer _findInterfaceMapping(java.lang.Class,org.codehaus.jackson.map.type.ClassKey)>($r6, $r2);

        if $r7 == null goto label7;

        return $r7;

     label8:
        return null;
    }

    public org.codehaus.jackson.map.JsonSerializer findArraySerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.type.ArrayType, org.codehaus.jackson.map.BeanDescription, org.codehaus.jackson.map.BeanProperty, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.JsonSerializer)
    {
        org.codehaus.jackson.map.JsonSerializer $r5, r7;
        org.codehaus.jackson.map.SerializationConfig r1;
        org.codehaus.jackson.map.BeanProperty r4;
        org.codehaus.jackson.map.module.SimpleSerializers r0;
        org.codehaus.jackson.map.TypeSerializer r6;
        org.codehaus.jackson.map.type.ArrayType r2;
        org.codehaus.jackson.map.BeanDescription r3;

        r0 := @this: org.codehaus.jackson.map.module.SimpleSerializers;

        r1 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        r2 := @parameter1: org.codehaus.jackson.map.type.ArrayType;

        r3 := @parameter2: org.codehaus.jackson.map.BeanDescription;

        r4 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        r6 := @parameter4: org.codehaus.jackson.map.TypeSerializer;

        r7 := @parameter5: org.codehaus.jackson.map.JsonSerializer;

        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.module.SimpleSerializers: org.codehaus.jackson.map.JsonSerializer findSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanDescription,org.codehaus.jackson.map.BeanProperty)>(r1, r2, r3, r4);

        return $r5;
    }

    public org.codehaus.jackson.map.JsonSerializer findCollectionSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.type.CollectionType, org.codehaus.jackson.map.BeanDescription, org.codehaus.jackson.map.BeanProperty, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.JsonSerializer)
    {
        org.codehaus.jackson.map.type.CollectionType r2;
        org.codehaus.jackson.map.JsonSerializer $r5, r7;
        org.codehaus.jackson.map.SerializationConfig r1;
        org.codehaus.jackson.map.BeanProperty r4;
        org.codehaus.jackson.map.module.SimpleSerializers r0;
        org.codehaus.jackson.map.TypeSerializer r6;
        org.codehaus.jackson.map.BeanDescription r3;

        r0 := @this: org.codehaus.jackson.map.module.SimpleSerializers;

        r1 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        r2 := @parameter1: org.codehaus.jackson.map.type.CollectionType;

        r3 := @parameter2: org.codehaus.jackson.map.BeanDescription;

        r4 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        r6 := @parameter4: org.codehaus.jackson.map.TypeSerializer;

        r7 := @parameter5: org.codehaus.jackson.map.JsonSerializer;

        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.module.SimpleSerializers: org.codehaus.jackson.map.JsonSerializer findSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanDescription,org.codehaus.jackson.map.BeanProperty)>(r1, r2, r3, r4);

        return $r5;
    }

    public org.codehaus.jackson.map.JsonSerializer findCollectionLikeSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.type.CollectionLikeType, org.codehaus.jackson.map.BeanDescription, org.codehaus.jackson.map.BeanProperty, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.JsonSerializer)
    {
        org.codehaus.jackson.map.type.CollectionLikeType r2;
        org.codehaus.jackson.map.JsonSerializer $r5, r7;
        org.codehaus.jackson.map.SerializationConfig r1;
        org.codehaus.jackson.map.BeanProperty r4;
        org.codehaus.jackson.map.module.SimpleSerializers r0;
        org.codehaus.jackson.map.TypeSerializer r6;
        org.codehaus.jackson.map.BeanDescription r3;

        r0 := @this: org.codehaus.jackson.map.module.SimpleSerializers;

        r1 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        r2 := @parameter1: org.codehaus.jackson.map.type.CollectionLikeType;

        r3 := @parameter2: org.codehaus.jackson.map.BeanDescription;

        r4 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        r6 := @parameter4: org.codehaus.jackson.map.TypeSerializer;

        r7 := @parameter5: org.codehaus.jackson.map.JsonSerializer;

        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.module.SimpleSerializers: org.codehaus.jackson.map.JsonSerializer findSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanDescription,org.codehaus.jackson.map.BeanProperty)>(r1, r2, r3, r4);

        return $r5;
    }

    public org.codehaus.jackson.map.JsonSerializer findMapSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.type.MapType, org.codehaus.jackson.map.BeanDescription, org.codehaus.jackson.map.BeanProperty, org.codehaus.jackson.map.JsonSerializer, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.JsonSerializer)
    {
        org.codehaus.jackson.map.JsonSerializer $r5, r6, r8;
        org.codehaus.jackson.map.SerializationConfig r1;
        org.codehaus.jackson.map.BeanProperty r4;
        org.codehaus.jackson.map.module.SimpleSerializers r0;
        org.codehaus.jackson.map.TypeSerializer r7;
        org.codehaus.jackson.map.type.MapType r2;
        org.codehaus.jackson.map.BeanDescription r3;

        r0 := @this: org.codehaus.jackson.map.module.SimpleSerializers;

        r1 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        r2 := @parameter1: org.codehaus.jackson.map.type.MapType;

        r3 := @parameter2: org.codehaus.jackson.map.BeanDescription;

        r4 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        r6 := @parameter4: org.codehaus.jackson.map.JsonSerializer;

        r7 := @parameter5: org.codehaus.jackson.map.TypeSerializer;

        r8 := @parameter6: org.codehaus.jackson.map.JsonSerializer;

        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.module.SimpleSerializers: org.codehaus.jackson.map.JsonSerializer findSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanDescription,org.codehaus.jackson.map.BeanProperty)>(r1, r2, r3, r4);

        return $r5;
    }

    public org.codehaus.jackson.map.JsonSerializer findMapLikeSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.type.MapLikeType, org.codehaus.jackson.map.BeanDescription, org.codehaus.jackson.map.BeanProperty, org.codehaus.jackson.map.JsonSerializer, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.JsonSerializer)
    {
        org.codehaus.jackson.map.JsonSerializer $r5, r6, r8;
        org.codehaus.jackson.map.SerializationConfig r1;
        org.codehaus.jackson.map.BeanProperty r4;
        org.codehaus.jackson.map.module.SimpleSerializers r0;
        org.codehaus.jackson.map.type.MapLikeType r2;
        org.codehaus.jackson.map.TypeSerializer r7;
        org.codehaus.jackson.map.BeanDescription r3;

        r0 := @this: org.codehaus.jackson.map.module.SimpleSerializers;

        r1 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        r2 := @parameter1: org.codehaus.jackson.map.type.MapLikeType;

        r3 := @parameter2: org.codehaus.jackson.map.BeanDescription;

        r4 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        r6 := @parameter4: org.codehaus.jackson.map.JsonSerializer;

        r7 := @parameter5: org.codehaus.jackson.map.TypeSerializer;

        r8 := @parameter6: org.codehaus.jackson.map.JsonSerializer;

        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.module.SimpleSerializers: org.codehaus.jackson.map.JsonSerializer findSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanDescription,org.codehaus.jackson.map.BeanProperty)>(r1, r2, r3, r4);

        return $r5;
    }

    protected org.codehaus.jackson.map.JsonSerializer _findInterfaceMapping(java.lang.Class, org.codehaus.jackson.map.type.ClassKey)
    {
        java.lang.Class[] $r1;
        java.util.HashMap $r5;
        org.codehaus.jackson.map.JsonSerializer $r7, r8;
        org.codehaus.jackson.map.module.SimpleSerializers r4;
        int i0, i1;
        java.lang.Class r0, r2;
        java.lang.Object $r6;
        org.codehaus.jackson.map.type.ClassKey r3;

        r4 := @this: org.codehaus.jackson.map.module.SimpleSerializers;

        r0 := @parameter0: java.lang.Class;

        r3 := @parameter1: org.codehaus.jackson.map.type.ClassKey;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r2 = $r1[i1];

        virtualinvoke r3.<org.codehaus.jackson.map.type.ClassKey: void reset(java.lang.Class)>(r2);

        $r5 = r4.<org.codehaus.jackson.map.module.SimpleSerializers: java.util.HashMap _interfaceMappings>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r3);

        r8 = (org.codehaus.jackson.map.JsonSerializer) $r6;

        if r8 == null goto label2;

        return r8;

     label2:
        $r7 = virtualinvoke r4.<org.codehaus.jackson.map.module.SimpleSerializers: org.codehaus.jackson.map.JsonSerializer _findInterfaceMapping(java.lang.Class,org.codehaus.jackson.map.type.ClassKey)>(r2, r3);

        if $r7 == null goto label3;

        return $r7;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return null;
    }
}
