final class kodkod.engine.bool.CBCFactory$10 extends kodkod.engine.bool.CBCFactory$Assembler
{
    final kodkod.engine.bool.CBCFactory this$0;

    void <init>(kodkod.engine.bool.CBCFactory)
    {
        kodkod.engine.bool.CBCFactory r1;
        kodkod.engine.bool.CBCFactory$10 r0;

        r0 := @this: kodkod.engine.bool.CBCFactory$10;

        r1 := @parameter0: kodkod.engine.bool.CBCFactory;

        r0.<kodkod.engine.bool.CBCFactory$10: kodkod.engine.bool.CBCFactory this$0> = r1;

        specialinvoke r0.<kodkod.engine.bool.CBCFactory$Assembler: void <init>(kodkod.engine.bool.CBCFactory$Assembler)>(null);

        return;
    }

    kodkod.engine.bool.BooleanValue assemble(kodkod.engine.bool.Operator$Nary, kodkod.engine.bool.BooleanFormula, kodkod.engine.bool.BooleanFormula)
    {
        kodkod.engine.bool.Operator$Nary r5;
        kodkod.engine.bool.BooleanValue $r6;
        kodkod.engine.bool.BooleanConstant $r7;
        kodkod.engine.bool.BooleanFormula r0, r1;
        java.lang.AssertionError $r10;
        kodkod.engine.bool.Operator $r8, $r9, $r11, $r12;
        int $i0, $i1, $i2;
        boolean $z0;
        kodkod.engine.bool.CBCFactory$10 r2;
        kodkod.engine.bool.CBCFactory$Assembler $r4;
        kodkod.engine.bool.CBCFactory $r3;

        r2 := @this: kodkod.engine.bool.CBCFactory$10;

        r5 := @parameter0: kodkod.engine.bool.Operator$Nary;

        r0 := @parameter1: kodkod.engine.bool.BooleanFormula;

        r1 := @parameter2: kodkod.engine.bool.BooleanFormula;

        $z0 = <kodkod.engine.bool.CBCFactory: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $r8 = virtualinvoke r0.<kodkod.engine.bool.BooleanFormula: kodkod.engine.bool.Operator op()>();

        $r9 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator NOT>;

        if $r8 != $r9 goto label1;

        $r11 = virtualinvoke r1.<kodkod.engine.bool.BooleanFormula: kodkod.engine.bool.Operator op()>();

        $r12 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator VAR>;

        if $r11 == $r12 goto label2;

     label1:
        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label2:
        $i0 = virtualinvoke r0.<kodkod.engine.bool.BooleanFormula: int label()>();

        $i1 = virtualinvoke r1.<kodkod.engine.bool.BooleanFormula: int label()>();

        $i2 = neg $i1;

        if $i0 != $i2 goto label3;

        $r7 = virtualinvoke r5.<kodkod.engine.bool.Operator$Nary: kodkod.engine.bool.BooleanConstant shortCircuit()>();

        return $r7;

     label3:
        $r3 = r2.<kodkod.engine.bool.CBCFactory$10: kodkod.engine.bool.CBCFactory this$0>;

        $r4 = staticinvoke <kodkod.engine.bool.CBCFactory: kodkod.engine.bool.CBCFactory$Assembler access$5(kodkod.engine.bool.CBCFactory)>($r3);

        $r6 = virtualinvoke $r4.<kodkod.engine.bool.CBCFactory$Assembler: kodkod.engine.bool.BooleanValue assemble(kodkod.engine.bool.Operator$Nary,kodkod.engine.bool.BooleanFormula,kodkod.engine.bool.BooleanFormula)>(r5, r0, r1);

        return $r6;
    }
}
