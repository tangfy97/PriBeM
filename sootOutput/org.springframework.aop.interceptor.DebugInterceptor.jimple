public class org.springframework.aop.interceptor.DebugInterceptor extends org.springframework.aop.interceptor.SimpleTraceInterceptor
{
    private volatile long count;

    public void <init>()
    {
        org.springframework.aop.interceptor.DebugInterceptor r0;

        r0 := @this: org.springframework.aop.interceptor.DebugInterceptor;

        specialinvoke r0.<org.springframework.aop.interceptor.SimpleTraceInterceptor: void <init>()>();

        return;
    }

    public void <init>(boolean)
    {
        org.springframework.aop.interceptor.DebugInterceptor r0;
        boolean z0;

        r0 := @this: org.springframework.aop.interceptor.DebugInterceptor;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.springframework.aop.interceptor.SimpleTraceInterceptor: void <init>()>();

        virtualinvoke r0.<org.springframework.aop.interceptor.DebugInterceptor: void setUseDynamicLogger(boolean)>(z0);

        return;
    }

    public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable
    {
        java.lang.Throwable $r3;
        org.aopalliance.intercept.MethodInvocation r1;
        long $l0, $l1;
        java.lang.Object $r2;
        org.springframework.aop.interceptor.DebugInterceptor r0;

        r0 := @this: org.springframework.aop.interceptor.DebugInterceptor;

        r1 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        entermonitor r0;

     label1:
        $l0 = r0.<org.springframework.aop.interceptor.DebugInterceptor: long count>;

        $l1 = $l0 + 1L;

        r0.<org.springframework.aop.interceptor.DebugInterceptor: long count> = $l1;

        exitmonitor r0;

     label2:
        goto label5;

     label3:
        $r3 := @caughtexception;

        exitmonitor r0;

     label4:
        throw $r3;

     label5:
        $r2 = specialinvoke r0.<org.springframework.aop.interceptor.SimpleTraceInterceptor: java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation)>(r1);

        return $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected java.lang.String getInvocationDescription(org.aopalliance.intercept.MethodInvocation)
    {
        long $l0;
        org.springframework.aop.interceptor.DebugInterceptor r4;
        org.aopalliance.intercept.MethodInvocation r1;
        java.lang.StringBuilder $r0, $r2, $r3, $r5;
        java.lang.String $r6;

        r4 := @this: org.springframework.aop.interceptor.DebugInterceptor;

        r1 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; count=");

        $l0 = r4.<org.springframework.aop.interceptor.DebugInterceptor: long count>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public long getCount()
    {
        long $l0;
        org.springframework.aop.interceptor.DebugInterceptor r0;

        r0 := @this: org.springframework.aop.interceptor.DebugInterceptor;

        $l0 = r0.<org.springframework.aop.interceptor.DebugInterceptor: long count>;

        return $l0;
    }

    public synchronized void resetCount()
    {
        org.springframework.aop.interceptor.DebugInterceptor r0;

        r0 := @this: org.springframework.aop.interceptor.DebugInterceptor;

        r0.<org.springframework.aop.interceptor.DebugInterceptor: long count> = 0L;

        return;
    }
}
