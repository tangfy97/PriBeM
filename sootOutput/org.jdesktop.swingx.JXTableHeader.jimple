public class org.jdesktop.swingx.JXTableHeader extends javax.swing.table.JTableHeader implements org.jdesktop.swingx.event.TableColumnModelExtListener
{
    private static final java.util.logging.Logger LOG;
    private org.jdesktop.swingx.JXTableHeader$SortGestureRecognizer sortGestureRecognizer;
    private java.beans.PropertyChangeListener tablePropertyChangeListener;
    private javax.swing.event.MouseInputListener headerListener;

    public void <init>()
    {
        org.jdesktop.swingx.JXTableHeader r0;

        r0 := @this: org.jdesktop.swingx.JXTableHeader;

        specialinvoke r0.<javax.swing.table.JTableHeader: void <init>()>();

        return;
    }

    public void <init>(javax.swing.table.TableColumnModel)
    {
        org.jdesktop.swingx.JXTableHeader r0;
        javax.swing.table.TableColumnModel r1;

        r0 := @this: org.jdesktop.swingx.JXTableHeader;

        r1 := @parameter0: javax.swing.table.TableColumnModel;

        specialinvoke r0.<javax.swing.table.JTableHeader: void <init>(javax.swing.table.TableColumnModel)>(r1);

        return;
    }

    public void setTable(javax.swing.JTable)
    {
        javax.swing.JTable r1;
        org.jdesktop.swingx.JXTableHeader r0;
        org.jdesktop.swingx.JXTable $r2;

        r0 := @this: org.jdesktop.swingx.JXTableHeader;

        r1 := @parameter0: javax.swing.JTable;

        virtualinvoke r0.<org.jdesktop.swingx.JXTableHeader: void uninstallTable()>();

        specialinvoke r0.<javax.swing.table.JTableHeader: void setTable(javax.swing.JTable)>(r1);

        virtualinvoke r0.<org.jdesktop.swingx.JXTableHeader: void installTable()>();

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTableHeader: org.jdesktop.swingx.JXTable getXTable()>();

        if $r2 == null goto label1;

        virtualinvoke r0.<org.jdesktop.swingx.JXTableHeader: void installHeaderListener()>();

        goto label2;

     label1:
        virtualinvoke r0.<org.jdesktop.swingx.JXTableHeader: void uninstallHeaderListener()>();

     label2:
        return;
    }

    protected void installTable()
    {
        org.jdesktop.swingx.JXTableHeader r0;
        java.beans.PropertyChangeListener $r3;
        javax.swing.JTable $r1, $r2;

        r0 := @this: org.jdesktop.swingx.JXTableHeader;

        virtualinvoke r0.<org.jdesktop.swingx.JXTableHeader: void updateEnabledFromTable()>();

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTableHeader: javax.swing.JTable getTable()>();

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTableHeader: javax.swing.JTable getTable()>();

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXTableHeader: java.beans.PropertyChangeListener getTablePropertyChangeListener()>();

        virtualinvoke $r2.<javax.swing.JTable: void addPropertyChangeListener(java.beans.PropertyChangeListener)>($r3);

        return;
    }

    protected void updateEnabledFromTable()
    {
        org.jdesktop.swingx.JXTableHeader r0;
        javax.swing.JTable $r1, $r2;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTableHeader;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTableHeader: javax.swing.JTable getTable()>();

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTableHeader: javax.swing.JTable getTable()>();

        $z0 = virtualinvoke $r2.<javax.swing.JTable: boolean isEnabled()>();

        goto label2;

     label1:
        $z0 = 1;

     label2:
        virtualinvoke r0.<org.jdesktop.swingx.JXTableHeader: void setEnabled(boolean)>($z0);

        return;
    }

    protected void uninstallTable()
    {
        org.jdesktop.swingx.JXTableHeader r0;
        java.beans.PropertyChangeListener $r3;
        javax.swing.JTable $r1, $r2;

        r0 := @this: org.jdesktop.swingx.JXTableHeader;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTableHeader: javax.swing.JTable getTable()>();

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTableHeader: javax.swing.JTable getTable()>();

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXTableHeader: java.beans.PropertyChangeListener getTablePropertyChangeListener()>();

        virtualinvoke $r2.<javax.swing.JTable: void removePropertyChangeListener(java.beans.PropertyChangeListener)>($r3);

        return;
    }

    public void columnPropertyChange(java.beans.PropertyChangeEvent)
    {
        org.jdesktop.swingx.JXTableHeader r0;
        java.beans.PropertyChangeEvent r1;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTableHeader;

        r1 := @parameter0: java.beans.PropertyChangeEvent;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXTableHeader: boolean isColumnEvent(java.beans.PropertyChangeEvent)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<org.jdesktop.swingx.JXTableHeader: void resizeAndRepaint()>();

        return;
    }

    protected boolean isColumnEvent(java.beans.PropertyChangeEvent)
    {
        org.jdesktop.swingx.JXTableHeader r7;
        java.lang.String $r1, $r2, $r3, $r4, $r5, $r6;
        java.beans.PropertyChangeEvent r0;
        boolean $z0, $z1, $z2, $z3;

        r7 := @this: org.jdesktop.swingx.JXTableHeader;

        r0 := @parameter0: java.beans.PropertyChangeEvent;

        $r1 = "width";

        $r2 = virtualinvoke r0.<java.beans.PropertyChangeEvent: java.lang.String getPropertyName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        $r3 = "preferredWidth";

        $r4 = virtualinvoke r0.<java.beans.PropertyChangeEvent: java.lang.String getPropertyName()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 != 0 goto label1;

        $r5 = "visible";

        $r6 = virtualinvoke r0.<java.beans.PropertyChangeEvent: java.lang.String getPropertyName()>();

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z2 == 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    public java.lang.String getToolTipText(java.awt.event.MouseEvent)
    {
        org.jdesktop.swingx.JXTableHeader r0;
        java.lang.String $r2, $r3;
        java.awt.event.MouseEvent r1;

        r0 := @this: org.jdesktop.swingx.JXTableHeader;

        r1 := @parameter0: java.awt.event.MouseEvent;

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTableHeader: java.lang.String getColumnToolTipText(java.awt.event.MouseEvent)>(r1);

        if $r2 == null goto label1;

        $r3 = $r2;

        goto label2;

     label1:
        $r3 = specialinvoke r0.<javax.swing.table.JTableHeader: java.lang.String getToolTipText(java.awt.event.MouseEvent)>(r1);

     label2:
        return $r3;
    }

    protected java.lang.String getColumnToolTipText(java.awt.event.MouseEvent)
    {
        java.awt.Point $r3;
        org.jdesktop.swingx.table.TableColumnExt $r5;
        org.jdesktop.swingx.JXTable $r1, $r4;
        java.awt.event.MouseEvent r2;
        org.jdesktop.swingx.JXTableHeader r0;
        int $i0;
        java.lang.String $r6;

        r0 := @this: org.jdesktop.swingx.JXTableHeader;

        r2 := @parameter0: java.awt.event.MouseEvent;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTableHeader: org.jdesktop.swingx.JXTable getXTable()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke r2.<java.awt.event.MouseEvent: java.awt.Point getPoint()>();

        $i0 = virtualinvoke r0.<org.jdesktop.swingx.JXTableHeader: int columnAtPoint(java.awt.Point)>($r3);

        if $i0 >= 0 goto label2;

        return null;

     label2:
        $r4 = virtualinvoke r0.<org.jdesktop.swingx.JXTableHeader: org.jdesktop.swingx.JXTable getXTable()>();

        $r5 = virtualinvoke $r4.<org.jdesktop.swingx.JXTable: org.jdesktop.swingx.table.TableColumnExt getColumnExt(int)>($i0);

        if $r5 == null goto label3;

        $r6 = virtualinvoke $r5.<org.jdesktop.swingx.table.TableColumnExt: java.lang.String getToolTipText()>();

        goto label4;

     label3:
        $r6 = null;

     label4:
        return $r6;
    }

    public org.jdesktop.swingx.JXTable getXTable()
    {
        org.jdesktop.swingx.JXTableHeader r0;
        javax.swing.JTable $r1, $r2;
        org.jdesktop.swingx.JXTable $r3;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTableHeader;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTableHeader: javax.swing.JTable getTable()>();

        $z0 = $r1 instanceof org.jdesktop.swingx.JXTable;

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTableHeader: javax.swing.JTable getTable()>();

        $r3 = (org.jdesktop.swingx.JXTable) $r2;

        return $r3;
    }

    public javax.swing.table.TableCellRenderer getCellRenderer(int)
    {
        org.jdesktop.swingx.JXTableHeader r0;
        javax.swing.table.TableColumnModel $r1;
        javax.swing.table.TableColumn $r2;
        int i0;
        javax.swing.table.TableCellRenderer $r3, $r4;

        r0 := @this: org.jdesktop.swingx.JXTableHeader;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTableHeader: javax.swing.table.TableColumnModel getColumnModel()>();

        $r2 = interfaceinvoke $r1.<javax.swing.table.TableColumnModel: javax.swing.table.TableColumn getColumn(int)>(i0);

        $r3 = virtualinvoke $r2.<javax.swing.table.TableColumn: javax.swing.table.TableCellRenderer getHeaderRenderer()>();

        if $r3 == null goto label1;

        $r4 = $r3;

        goto label2;

     label1:
        $r4 = virtualinvoke r0.<org.jdesktop.swingx.JXTableHeader: javax.swing.table.TableCellRenderer getDefaultRenderer()>();

     label2:
        return $r4;
    }

    public java.awt.Dimension getPreferredSize()
    {
        java.awt.Dimension $r1, $r2;
        org.jdesktop.swingx.JXTableHeader r0;
        int $i0, $i1;

        r0 := @this: org.jdesktop.swingx.JXTableHeader;

        $r1 = specialinvoke r0.<javax.swing.table.JTableHeader: java.awt.Dimension getPreferredSize()>();

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTableHeader: java.awt.Dimension getPreferredSize(java.awt.Dimension)>($r1);

        $i0 = $r2.<java.awt.Dimension: int height>;

        $i1 = virtualinvoke r0.<org.jdesktop.swingx.JXTableHeader: int getMinimumHeight(int)>($i0);

        $r2.<java.awt.Dimension: int height> = $i1;

        return $r2;
    }

    protected java.awt.Dimension getPreferredSize(java.awt.Dimension)
    {
        javax.swing.table.TableColumnModel $r2, $r5;
        javax.swing.table.TableColumn $r6;
        javax.swing.table.TableCellRenderer $r3;
        java.awt.Component $r8;
        java.awt.Dimension r0, $r9;
        org.jdesktop.swingx.JXTableHeader r1;
        int $i0, $i1, i2, i3, $i5;
        javax.swing.JTable $r4;
        java.lang.Object $r7;

        r1 := @this: org.jdesktop.swingx.JXTableHeader;

        r0 := @parameter0: java.awt.Dimension;

        i2 = r0.<java.awt.Dimension: int height>;

        i3 = 0;

     label1:
        $r2 = virtualinvoke r1.<org.jdesktop.swingx.JXTableHeader: javax.swing.table.TableColumnModel getColumnModel()>();

        $i0 = interfaceinvoke $r2.<javax.swing.table.TableColumnModel: int getColumnCount()>();

        if i3 >= $i0 goto label2;

        $r3 = virtualinvoke r1.<org.jdesktop.swingx.JXTableHeader: javax.swing.table.TableCellRenderer getCellRenderer(int)>(i3);

        $r4 = r1.<org.jdesktop.swingx.JXTableHeader: javax.swing.JTable table>;

        $r5 = virtualinvoke r1.<org.jdesktop.swingx.JXTableHeader: javax.swing.table.TableColumnModel getColumnModel()>();

        $r6 = interfaceinvoke $r5.<javax.swing.table.TableColumnModel: javax.swing.table.TableColumn getColumn(int)>(i3);

        $r7 = virtualinvoke $r6.<javax.swing.table.TableColumn: java.lang.Object getHeaderValue()>();

        $i5 = (int) -1;

        $r8 = interfaceinvoke $r3.<javax.swing.table.TableCellRenderer: java.awt.Component getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int)>($r4, $r7, 0, 0, $i5, i3);

        $r9 = virtualinvoke $r8.<java.awt.Component: java.awt.Dimension getPreferredSize()>();

        $i1 = $r9.<java.awt.Dimension: int height>;

        i2 = staticinvoke <java.lang.Math: int max(int,int)>(i2, $i1);

        i3 = i3 + 1;

        goto label1;

     label2:
        r0.<java.awt.Dimension: int height> = i2;

        return r0;
    }

    protected int getMinimumHeight(int)
    {
        javax.swing.table.TableCellRenderer $r1;
        java.awt.Component $r3;
        java.awt.Dimension $r4;
        org.jdesktop.swingx.JXTableHeader r0;
        int i0, $i2, $i4;
        javax.swing.JTable $r2;

        r0 := @this: org.jdesktop.swingx.JXTableHeader;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTableHeader: javax.swing.table.TableCellRenderer getDefaultRenderer()>();

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTableHeader: javax.swing.JTable getTable()>();

        $i2 = (int) -1;

        $i4 = (int) -1;

        $r3 = interfaceinvoke $r1.<javax.swing.table.TableCellRenderer: java.awt.Component getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int)>($r2, "dummy", 0, 0, $i2, $i4);

        $r4 = virtualinvoke $r3.<java.awt.Component: java.awt.Dimension getPreferredSize()>();

        i0 = $r4.<java.awt.Dimension: int height>;

     label1:
        return i0;
    }

    public void setDraggedDistance(int)
    {
        javax.swing.table.TableColumn $r2;
        org.jdesktop.swingx.JXTable $r1, $r3;
        org.jdesktop.swingx.JXTableHeader r0;
        int $i0, i1, $i2, $i3;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTableHeader;

        i1 := @parameter0: int;

        $i0 = virtualinvoke r0.<org.jdesktop.swingx.JXTableHeader: int getDraggedDistance()>();

        specialinvoke r0.<javax.swing.table.JTableHeader: void setDraggedDistance(int)>(i1);

        $i2 = virtualinvoke r0.<org.jdesktop.swingx.JXTableHeader: int getDraggedDistance()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTableHeader: void firePropertyChange(java.lang.String,int,int)>("draggedDistance", $i0, $i2);

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXTableHeader: boolean getAutoscrolls()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTableHeader: org.jdesktop.swingx.JXTable getXTable()>();

        if $r1 != null goto label2;

     label1:
        return;

     label2:
        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTableHeader: javax.swing.table.TableColumn getDraggedColumn()>();

        if $r2 == null goto label3;

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXTableHeader: org.jdesktop.swingx.JXTable getXTable()>();

        $i3 = specialinvoke r0.<org.jdesktop.swingx.JXTableHeader: int getViewIndexForColumn(javax.swing.table.TableColumn)>($r2);

        virtualinvoke $r3.<org.jdesktop.swingx.JXTable: void scrollColumnToVisible(int)>($i3);

     label3:
        return;
    }

    public javax.swing.table.TableColumn getDraggedColumn()
    {
        org.jdesktop.swingx.JXTableHeader r0;
        javax.swing.table.TableColumn $r1, $r2;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTableHeader;

        $r1 = r0.<org.jdesktop.swingx.JXTableHeader: javax.swing.table.TableColumn draggedColumn>;

        $z0 = specialinvoke r0.<org.jdesktop.swingx.JXTableHeader: boolean isVisible(javax.swing.table.TableColumn)>($r1);

        if $z0 == 0 goto label1;

        $r2 = r0.<org.jdesktop.swingx.JXTableHeader: javax.swing.table.TableColumn draggedColumn>;

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    private boolean isVisible(javax.swing.table.TableColumn)
    {
        org.jdesktop.swingx.JXTableHeader r0;
        javax.swing.table.TableColumn r1;
        int $i0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTableHeader;

        r1 := @parameter0: javax.swing.table.TableColumn;

        $i0 = specialinvoke r0.<org.jdesktop.swingx.JXTableHeader: int getViewIndexForColumn(javax.swing.table.TableColumn)>(r1);

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private int getViewIndexForColumn(javax.swing.table.TableColumn)
    {
        javax.swing.table.TableColumnModel $r2;
        javax.swing.table.TableColumn r0, $r3;
        org.jdesktop.swingx.JXTableHeader r1;
        int $i0, i1, $i3, $i5;

        r1 := @this: org.jdesktop.swingx.JXTableHeader;

        r0 := @parameter0: javax.swing.table.TableColumn;

        if r0 != null goto label1;

        $i3 = (int) -1;

        return $i3;

     label1:
        $r2 = virtualinvoke r1.<org.jdesktop.swingx.JXTableHeader: javax.swing.table.TableColumnModel getColumnModel()>();

        i1 = 0;

     label2:
        $i0 = interfaceinvoke $r2.<javax.swing.table.TableColumnModel: int getColumnCount()>();

        if i1 >= $i0 goto label4;

        $r3 = interfaceinvoke $r2.<javax.swing.table.TableColumnModel: javax.swing.table.TableColumn getColumn(int)>(i1);

        if $r3 != r0 goto label3;

        return i1;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        $i5 = (int) -1;

        return $i5;
    }

    protected java.beans.PropertyChangeListener getTablePropertyChangeListener()
    {
        org.jdesktop.swingx.JXTableHeader r0;
        java.beans.PropertyChangeListener $r1, $r2, $r3;

        r0 := @this: org.jdesktop.swingx.JXTableHeader;

        $r1 = r0.<org.jdesktop.swingx.JXTableHeader: java.beans.PropertyChangeListener tablePropertyChangeListener>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXTableHeader: java.beans.PropertyChangeListener createTablePropertyChangeListener()>();

        r0.<org.jdesktop.swingx.JXTableHeader: java.beans.PropertyChangeListener tablePropertyChangeListener> = $r3;

     label1:
        $r2 = r0.<org.jdesktop.swingx.JXTableHeader: java.beans.PropertyChangeListener tablePropertyChangeListener>;

        return $r2;
    }

    protected java.beans.PropertyChangeListener createTablePropertyChangeListener()
    {
        org.jdesktop.swingx.JXTableHeader$1 $r0;
        org.jdesktop.swingx.JXTableHeader r1;

        r1 := @this: org.jdesktop.swingx.JXTableHeader;

        $r0 = new org.jdesktop.swingx.JXTableHeader$1;

        specialinvoke $r0.<org.jdesktop.swingx.JXTableHeader$1: void <init>(org.jdesktop.swingx.JXTableHeader)>(r1);

        return $r0;
    }

    protected void installHeaderListener()
    {
        org.jdesktop.swingx.JXTableHeader r0;
        org.jdesktop.swingx.JXTableHeader$HeaderListener $r2;
        javax.swing.event.MouseInputListener $r1, $r3, $r4;

        r0 := @this: org.jdesktop.swingx.JXTableHeader;

        $r1 = r0.<org.jdesktop.swingx.JXTableHeader: javax.swing.event.MouseInputListener headerListener>;

        if $r1 != null goto label1;

        $r2 = new org.jdesktop.swingx.JXTableHeader$HeaderListener;

        specialinvoke $r2.<org.jdesktop.swingx.JXTableHeader$HeaderListener: void <init>(org.jdesktop.swingx.JXTableHeader,org.jdesktop.swingx.JXTableHeader$1)>(r0, null);

        r0.<org.jdesktop.swingx.JXTableHeader: javax.swing.event.MouseInputListener headerListener> = $r2;

        $r3 = r0.<org.jdesktop.swingx.JXTableHeader: javax.swing.event.MouseInputListener headerListener>;

        virtualinvoke r0.<org.jdesktop.swingx.JXTableHeader: void addMouseListener(java.awt.event.MouseListener)>($r3);

        $r4 = r0.<org.jdesktop.swingx.JXTableHeader: javax.swing.event.MouseInputListener headerListener>;

        virtualinvoke r0.<org.jdesktop.swingx.JXTableHeader: void addMouseMotionListener(java.awt.event.MouseMotionListener)>($r4);

     label1:
        return;
    }

    protected void uninstallHeaderListener()
    {
        org.jdesktop.swingx.JXTableHeader r0;
        javax.swing.event.MouseInputListener $r1, $r2, $r3;

        r0 := @this: org.jdesktop.swingx.JXTableHeader;

        $r1 = r0.<org.jdesktop.swingx.JXTableHeader: javax.swing.event.MouseInputListener headerListener>;

        if $r1 == null goto label1;

        $r2 = r0.<org.jdesktop.swingx.JXTableHeader: javax.swing.event.MouseInputListener headerListener>;

        virtualinvoke r0.<org.jdesktop.swingx.JXTableHeader: void removeMouseListener(java.awt.event.MouseListener)>($r2);

        $r3 = r0.<org.jdesktop.swingx.JXTableHeader: javax.swing.event.MouseInputListener headerListener>;

        virtualinvoke r0.<org.jdesktop.swingx.JXTableHeader: void removeMouseMotionListener(java.awt.event.MouseMotionListener)>($r3);

        r0.<org.jdesktop.swingx.JXTableHeader: javax.swing.event.MouseInputListener headerListener> = null;

     label1:
        return;
    }

    public org.jdesktop.swingx.JXTableHeader$SortGestureRecognizer getSortGestureRecognizer()
    {
        org.jdesktop.swingx.JXTableHeader$SortGestureRecognizer $r1, $r2, $r3;
        org.jdesktop.swingx.JXTableHeader r0;

        r0 := @this: org.jdesktop.swingx.JXTableHeader;

        $r1 = r0.<org.jdesktop.swingx.JXTableHeader: org.jdesktop.swingx.JXTableHeader$SortGestureRecognizer sortGestureRecognizer>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXTableHeader: org.jdesktop.swingx.JXTableHeader$SortGestureRecognizer createSortGestureRecognizer()>();

        r0.<org.jdesktop.swingx.JXTableHeader: org.jdesktop.swingx.JXTableHeader$SortGestureRecognizer sortGestureRecognizer> = $r3;

     label1:
        $r2 = r0.<org.jdesktop.swingx.JXTableHeader: org.jdesktop.swingx.JXTableHeader$SortGestureRecognizer sortGestureRecognizer>;

        return $r2;
    }

    public void setSortGestureRecognizer(org.jdesktop.swingx.JXTableHeader$SortGestureRecognizer)
    {
        org.jdesktop.swingx.JXTableHeader$SortGestureRecognizer $r1, r2, $r3;
        org.jdesktop.swingx.JXTableHeader r0;

        r0 := @this: org.jdesktop.swingx.JXTableHeader;

        r2 := @parameter0: org.jdesktop.swingx.JXTableHeader$SortGestureRecognizer;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTableHeader: org.jdesktop.swingx.JXTableHeader$SortGestureRecognizer getSortGestureRecognizer()>();

        r0.<org.jdesktop.swingx.JXTableHeader: org.jdesktop.swingx.JXTableHeader$SortGestureRecognizer sortGestureRecognizer> = r2;

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXTableHeader: org.jdesktop.swingx.JXTableHeader$SortGestureRecognizer getSortGestureRecognizer()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTableHeader: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("sortGestureRecognizer", $r1, $r3);

        return;
    }

    protected org.jdesktop.swingx.JXTableHeader$SortGestureRecognizer createSortGestureRecognizer()
    {
        org.jdesktop.swingx.JXTableHeader$SortGestureRecognizer $r0;
        org.jdesktop.swingx.JXTableHeader r1;

        r1 := @this: org.jdesktop.swingx.JXTableHeader;

        $r0 = new org.jdesktop.swingx.JXTableHeader$SortGestureRecognizer;

        specialinvoke $r0.<org.jdesktop.swingx.JXTableHeader$SortGestureRecognizer: void <init>()>();

        return $r0;
    }

    static javax.swing.JTable access$100(org.jdesktop.swingx.JXTableHeader)
    {
        javax.swing.JTable $r1;
        org.jdesktop.swingx.JXTableHeader r0;

        r0 := @parameter0: org.jdesktop.swingx.JXTableHeader;

        $r1 = r0.<org.jdesktop.swingx.JXTableHeader: javax.swing.JTable table>;

        return $r1;
    }

    static int access$200(org.jdesktop.swingx.JXTableHeader, javax.swing.table.TableColumn)
    {
        int $i0;
        org.jdesktop.swingx.JXTableHeader r0;
        javax.swing.table.TableColumn r1;

        r0 := @parameter0: org.jdesktop.swingx.JXTableHeader;

        r1 := @parameter1: javax.swing.table.TableColumn;

        $i0 = specialinvoke r0.<org.jdesktop.swingx.JXTableHeader: int getViewIndexForColumn(javax.swing.table.TableColumn)>(r1);

        return $i0;
    }

    static void <clinit>()
    {
        org.jdesktop.swingx.plaf.TableHeaderAddon $r3;
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        $r0 = class "Lorg/jdesktop/swingx/JXTableHeader;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <org.jdesktop.swingx.JXTableHeader: java.util.logging.Logger LOG> = $r2;

        $r3 = new org.jdesktop.swingx.plaf.TableHeaderAddon;

        specialinvoke $r3.<org.jdesktop.swingx.plaf.TableHeaderAddon: void <init>()>();

        staticinvoke <org.jdesktop.swingx.plaf.LookAndFeelAddons: void contribute(org.jdesktop.swingx.plaf.ComponentAddon)>($r3);

        return;
    }
}
