public class org.joda.time.format.DateTimeFormatter extends java.lang.Object
{
    private final org.joda.time.format.DateTimePrinter iPrinter;
    private final org.joda.time.format.DateTimeParser iParser;
    private final java.util.Locale iLocale;
    private final boolean iOffsetParsed;
    private final org.joda.time.Chronology iChrono;
    private final org.joda.time.DateTimeZone iZone;
    private final java.lang.Integer iPivotYear;

    public void <init>(org.joda.time.format.DateTimePrinter, org.joda.time.format.DateTimeParser)
    {
        org.joda.time.format.DateTimeParser r2;
        org.joda.time.format.DateTimeFormatter r0;
        org.joda.time.format.DateTimePrinter r1;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r1 := @parameter0: org.joda.time.format.DateTimePrinter;

        r2 := @parameter1: org.joda.time.format.DateTimeParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter iPrinter> = r1;

        r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser iParser> = r2;

        r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale> = null;

        r0.<org.joda.time.format.DateTimeFormatter: boolean iOffsetParsed> = 0;

        r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono> = null;

        r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone> = null;

        r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear> = null;

        return;
    }

    private void <init>(org.joda.time.format.DateTimePrinter, org.joda.time.format.DateTimeParser, java.util.Locale, boolean, org.joda.time.Chronology, org.joda.time.DateTimeZone, java.lang.Integer)
    {
        org.joda.time.DateTimeZone r5;
        org.joda.time.format.DateTimeParser r2;
        org.joda.time.format.DateTimeFormatter r0;
        org.joda.time.Chronology r4;
        java.lang.Integer r6;
        java.util.Locale r3;
        org.joda.time.format.DateTimePrinter r1;
        boolean z0;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r1 := @parameter0: org.joda.time.format.DateTimePrinter;

        r2 := @parameter1: org.joda.time.format.DateTimeParser;

        r3 := @parameter2: java.util.Locale;

        z0 := @parameter3: boolean;

        r4 := @parameter4: org.joda.time.Chronology;

        r5 := @parameter5: org.joda.time.DateTimeZone;

        r6 := @parameter6: java.lang.Integer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter iPrinter> = r1;

        r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser iParser> = r2;

        r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale> = r3;

        r0.<org.joda.time.format.DateTimeFormatter: boolean iOffsetParsed> = z0;

        r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono> = r4;

        r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone> = r5;

        r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear> = r6;

        return;
    }

    public boolean isPrinter()
    {
        org.joda.time.format.DateTimeFormatter r0;
        org.joda.time.format.DateTimePrinter $r1;
        boolean $z0;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter iPrinter>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.joda.time.format.DateTimePrinter getPrinter()
    {
        org.joda.time.format.DateTimeFormatter r0;
        org.joda.time.format.DateTimePrinter $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter iPrinter>;

        return $r1;
    }

    public boolean isParser()
    {
        org.joda.time.format.DateTimeParser $r1;
        org.joda.time.format.DateTimeFormatter r0;
        boolean $z0;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser iParser>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.joda.time.format.DateTimeParser getParser()
    {
        org.joda.time.format.DateTimeParser $r1;
        org.joda.time.format.DateTimeFormatter r0;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser iParser>;

        return $r1;
    }

    public org.joda.time.format.DateTimeFormatter withLocale(java.util.Locale)
    {
        org.joda.time.DateTimeZone $r5;
        org.joda.time.format.DateTimeParser $r7;
        org.joda.time.format.DateTimeFormatter r1, $r3;
        org.joda.time.Chronology $r6;
        java.lang.Integer $r4;
        java.util.Locale r0, $r2, $r9;
        org.joda.time.format.DateTimePrinter $r8;
        boolean $z0, $z1;

        r1 := @this: org.joda.time.format.DateTimeFormatter;

        r0 := @parameter0: java.util.Locale;

        $r2 = virtualinvoke r1.<org.joda.time.format.DateTimeFormatter: java.util.Locale getLocale()>();

        if r0 == $r2 goto label1;

        if r0 == null goto label2;

        $r9 = virtualinvoke r1.<org.joda.time.format.DateTimeFormatter: java.util.Locale getLocale()>();

        $z1 = virtualinvoke r0.<java.util.Locale: boolean equals(java.lang.Object)>($r9);

        if $z1 == 0 goto label2;

     label1:
        return r1;

     label2:
        $r3 = new org.joda.time.format.DateTimeFormatter;

        $r8 = r1.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter iPrinter>;

        $r7 = r1.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser iParser>;

        $z0 = r1.<org.joda.time.format.DateTimeFormatter: boolean iOffsetParsed>;

        $r6 = r1.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>;

        $r5 = r1.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>;

        $r4 = r1.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>;

        specialinvoke $r3.<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser,java.util.Locale,boolean,org.joda.time.Chronology,org.joda.time.DateTimeZone,java.lang.Integer)>($r8, $r7, r0, $z0, $r6, $r5, $r4);

        return $r3;
    }

    public java.util.Locale getLocale()
    {
        org.joda.time.format.DateTimeFormatter r0;
        java.util.Locale $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r1 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>;

        return $r1;
    }

    public org.joda.time.format.DateTimeFormatter withOffsetParsed()
    {
        org.joda.time.format.DateTimeParser $r5;
        org.joda.time.format.DateTimeFormatter r0, $r1;
        org.joda.time.Chronology $r3;
        java.lang.Integer $r2;
        java.util.Locale $r4;
        org.joda.time.format.DateTimePrinter $r6;
        boolean $z0;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $z0 = r0.<org.joda.time.format.DateTimeFormatter: boolean iOffsetParsed>;

        if $z0 != 1 goto label1;

        return r0;

     label1:
        $r1 = new org.joda.time.format.DateTimeFormatter;

        $r6 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter iPrinter>;

        $r5 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser iParser>;

        $r4 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>;

        $r3 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>;

        $r2 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>;

        specialinvoke $r1.<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser,java.util.Locale,boolean,org.joda.time.Chronology,org.joda.time.DateTimeZone,java.lang.Integer)>($r6, $r5, $r4, 1, $r3, null, $r2);

        return $r1;
    }

    public boolean isOffsetParsed()
    {
        org.joda.time.format.DateTimeFormatter r0;
        boolean $z0;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $z0 = r0.<org.joda.time.format.DateTimeFormatter: boolean iOffsetParsed>;

        return $z0;
    }

    public org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)
    {
        org.joda.time.DateTimeZone $r5;
        org.joda.time.format.DateTimeParser $r7;
        org.joda.time.format.DateTimeFormatter r0, $r3;
        org.joda.time.Chronology r1, $r2;
        java.lang.Integer $r4;
        java.util.Locale $r6;
        org.joda.time.format.DateTimePrinter $r8;
        boolean $z0;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r1 := @parameter0: org.joda.time.Chronology;

        $r2 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>;

        if $r2 != r1 goto label1;

        return r0;

     label1:
        $r3 = new org.joda.time.format.DateTimeFormatter;

        $r8 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter iPrinter>;

        $r7 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser iParser>;

        $r6 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>;

        $z0 = r0.<org.joda.time.format.DateTimeFormatter: boolean iOffsetParsed>;

        $r5 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>;

        $r4 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>;

        specialinvoke $r3.<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser,java.util.Locale,boolean,org.joda.time.Chronology,org.joda.time.DateTimeZone,java.lang.Integer)>($r8, $r7, $r6, $z0, r1, $r5, $r4);

        return $r3;
    }

    public org.joda.time.Chronology getChronolgy()
    {
        org.joda.time.Chronology $r1;
        org.joda.time.format.DateTimeFormatter r0;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>;

        return $r1;
    }

    public org.joda.time.format.DateTimeFormatter withZone(org.joda.time.DateTimeZone)
    {
        org.joda.time.DateTimeZone r1, $r2;
        org.joda.time.format.DateTimeParser $r7;
        org.joda.time.format.DateTimeFormatter r0, $r3;
        org.joda.time.Chronology $r5;
        java.lang.Integer $r4;
        java.util.Locale $r6;
        org.joda.time.format.DateTimePrinter $r8;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r1 := @parameter0: org.joda.time.DateTimeZone;

        $r2 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>;

        if $r2 != r1 goto label1;

        return r0;

     label1:
        $r3 = new org.joda.time.format.DateTimeFormatter;

        $r8 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter iPrinter>;

        $r7 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser iParser>;

        $r6 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>;

        $r5 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>;

        $r4 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>;

        specialinvoke $r3.<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser,java.util.Locale,boolean,org.joda.time.Chronology,org.joda.time.DateTimeZone,java.lang.Integer)>($r8, $r7, $r6, 0, $r5, r1, $r4);

        return $r3;
    }

    public org.joda.time.DateTimeZone getZone()
    {
        org.joda.time.DateTimeZone $r1;
        org.joda.time.format.DateTimeFormatter r0;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>;

        return $r1;
    }

    public org.joda.time.format.DateTimeFormatter withPivotYear(java.lang.Integer)
    {
        org.joda.time.DateTimeZone $r5;
        org.joda.time.format.DateTimeParser $r8;
        org.joda.time.format.DateTimeFormatter r0, $r4;
        org.joda.time.Chronology $r6;
        java.lang.Integer r1, $r2, $r3, $r10;
        java.util.Locale $r7;
        org.joda.time.format.DateTimePrinter $r9;
        boolean $z0, $z1;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r1 := @parameter0: java.lang.Integer;

        $r2 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>;

        if $r2 == r1 goto label1;

        $r3 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>;

        if $r3 == null goto label2;

        $r10 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>;

        $z1 = virtualinvoke $r10.<java.lang.Integer: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

     label1:
        return r0;

     label2:
        $r4 = new org.joda.time.format.DateTimeFormatter;

        $r9 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter iPrinter>;

        $r8 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser iParser>;

        $r7 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>;

        $z0 = r0.<org.joda.time.format.DateTimeFormatter: boolean iOffsetParsed>;

        $r6 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>;

        $r5 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>;

        specialinvoke $r4.<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser,java.util.Locale,boolean,org.joda.time.Chronology,org.joda.time.DateTimeZone,java.lang.Integer)>($r9, $r8, $r7, $z0, $r6, $r5, r1);

        return $r4;
    }

    public org.joda.time.format.DateTimeFormatter withPivotYear(int)
    {
        org.joda.time.format.DateTimeFormatter r0, $r2;
        int i0;
        java.lang.Integer $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        i0 := @parameter0: int;

        $r1 = new java.lang.Integer;

        specialinvoke $r1.<java.lang.Integer: void <init>(int)>(i0);

        $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withPivotYear(java.lang.Integer)>($r1);

        return $r2;
    }

    public java.lang.Integer getPivotYear()
    {
        org.joda.time.format.DateTimeFormatter r0;
        java.lang.Integer $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r1 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>;

        return $r1;
    }

    public void printTo(java.lang.StringBuffer, org.joda.time.ReadableInstant)
    {
        org.joda.time.format.DateTimeFormatter r2;
        java.lang.StringBuffer r3;
        org.joda.time.Chronology $r1;
        org.joda.time.ReadableInstant r0;
        long $l0;

        r2 := @this: org.joda.time.format.DateTimeFormatter;

        r3 := @parameter0: java.lang.StringBuffer;

        r0 := @parameter1: org.joda.time.ReadableInstant;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r0);

        $r1 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>(r0);

        specialinvoke r2.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology)>(r3, $l0, $r1);

        return;
    }

    public void printTo(java.io.Writer, org.joda.time.ReadableInstant) throws java.io.IOException
    {
        org.joda.time.format.DateTimeFormatter r2;
        org.joda.time.Chronology $r1;
        java.io.Writer r3;
        org.joda.time.ReadableInstant r0;
        long $l0;

        r2 := @this: org.joda.time.format.DateTimeFormatter;

        r3 := @parameter0: java.io.Writer;

        r0 := @parameter1: org.joda.time.ReadableInstant;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r0);

        $r1 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>(r0);

        specialinvoke r2.<org.joda.time.format.DateTimeFormatter: void printTo(java.io.Writer,long,org.joda.time.Chronology)>(r3, $l0, $r1);

        return;
    }

    public void printTo(java.lang.StringBuffer, long)
    {
        long l0;
        org.joda.time.format.DateTimeFormatter r0;
        java.lang.StringBuffer r1;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r1 := @parameter0: java.lang.StringBuffer;

        l0 := @parameter1: long;

        specialinvoke r0.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology)>(r1, l0, null);

        return;
    }

    public void printTo(java.io.Writer, long) throws java.io.IOException
    {
        java.io.Writer r1;
        long l0;
        org.joda.time.format.DateTimeFormatter r0;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r1 := @parameter0: java.io.Writer;

        l0 := @parameter1: long;

        specialinvoke r0.<org.joda.time.format.DateTimeFormatter: void printTo(java.io.Writer,long,org.joda.time.Chronology)>(r1, l0, null);

        return;
    }

    public void printTo(java.lang.StringBuffer, org.joda.time.ReadablePartial)
    {
        org.joda.time.format.DateTimeFormatter r0;
        java.lang.StringBuffer r3;
        java.util.Locale $r4;
        org.joda.time.format.DateTimePrinter $r1;
        org.joda.time.ReadablePartial r2;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r3 := @parameter0: java.lang.StringBuffer;

        r2 := @parameter1: org.joda.time.ReadablePartial;

        $r1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter requirePrinter()>();

        if r2 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The partial must not be null");

        throw $r5;

     label1:
        $r4 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>;

        interfaceinvoke $r1.<org.joda.time.format.DateTimePrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale)>(r3, r2, $r4);

        return;
    }

    public void printTo(java.io.Writer, org.joda.time.ReadablePartial) throws java.io.IOException
    {
        org.joda.time.format.DateTimeFormatter r0;
        java.util.Locale $r4;
        org.joda.time.format.DateTimePrinter $r1;
        org.joda.time.ReadablePartial r2;
        java.io.Writer r3;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r3 := @parameter0: java.io.Writer;

        r2 := @parameter1: org.joda.time.ReadablePartial;

        $r1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter requirePrinter()>();

        if r2 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The partial must not be null");

        throw $r5;

     label1:
        $r4 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>;

        interfaceinvoke $r1.<org.joda.time.format.DateTimePrinter: void printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale)>(r3, r2, $r4);

        return;
    }

    public java.lang.String print(org.joda.time.ReadableInstant)
    {
        org.joda.time.format.DateTimeFormatter r1;
        java.lang.StringBuffer $r0;
        org.joda.time.format.DateTimePrinter $r2;
        int $i0;
        org.joda.time.ReadableInstant r3;
        java.lang.String $r4;

        r1 := @this: org.joda.time.format.DateTimeFormatter;

        r3 := @parameter0: org.joda.time.ReadableInstant;

        $r0 = new java.lang.StringBuffer;

        $r2 = specialinvoke r1.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter requirePrinter()>();

        $i0 = interfaceinvoke $r2.<org.joda.time.format.DateTimePrinter: int estimatePrintedLength()>();

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(int)>($i0);

        virtualinvoke r1.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadableInstant)>($r0, r3);

        $r4 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public java.lang.String print(long)
    {
        org.joda.time.format.DateTimeFormatter r1;
        java.lang.StringBuffer $r0;
        org.joda.time.format.DateTimePrinter $r2;
        int $i0;
        long l1;
        java.lang.String $r3;

        r1 := @this: org.joda.time.format.DateTimeFormatter;

        l1 := @parameter0: long;

        $r0 = new java.lang.StringBuffer;

        $r2 = specialinvoke r1.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter requirePrinter()>();

        $i0 = interfaceinvoke $r2.<org.joda.time.format.DateTimePrinter: int estimatePrintedLength()>();

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(int)>($i0);

        virtualinvoke r1.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,long)>($r0, l1);

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    public java.lang.String print(org.joda.time.ReadablePartial)
    {
        org.joda.time.format.DateTimeFormatter r1;
        java.lang.StringBuffer $r0;
        org.joda.time.format.DateTimePrinter $r2;
        int $i0;
        org.joda.time.ReadablePartial r3;
        java.lang.String $r4;

        r1 := @this: org.joda.time.format.DateTimeFormatter;

        r3 := @parameter0: org.joda.time.ReadablePartial;

        $r0 = new java.lang.StringBuffer;

        $r2 = specialinvoke r1.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter requirePrinter()>();

        $i0 = interfaceinvoke $r2.<org.joda.time.format.DateTimePrinter: int estimatePrintedLength()>();

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(int)>($i0);

        virtualinvoke r1.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial)>($r0, r3);

        $r4 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    private void printTo(java.lang.StringBuffer, long, org.joda.time.Chronology)
    {
        org.joda.time.DateTimeZone $r3, r6;
        long l0, $l2, $l3, $l5, $l6, l9;
        byte $b4, $b7;
        java.lang.StringBuffer r4;
        java.util.Locale $r8;
        int $i1, i8, $i10, $i11;
        org.joda.time.format.DateTimeFormatter r0;
        org.joda.time.Chronology $r2, r5, $r7;
        org.joda.time.format.DateTimePrinter $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r4 := @parameter0: java.lang.StringBuffer;

        l0 := @parameter1: long;

        r5 := @parameter2: org.joda.time.Chronology;

        $r1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter requirePrinter()>();

        $r2 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>(r5);

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>();

        r6 = $r3;

        $i1 = virtualinvoke $r3.<org.joda.time.DateTimeZone: int getOffset(long)>(l0);

        i8 = $i1;

        $l2 = (long) $i1;

        l9 = l0 + $l2;

        $l3 = l0 ^ l9;

        $b4 = $l3 cmp 0L;

        $i10 = (int) $b4;

        if $i10 >= 0 goto label1;

        $l5 = (long) $i1;

        $l6 = l0 ^ $l5;

        $b7 = $l6 cmp 0L;

        $i11 = (int) $b7;

        if $i11 < 0 goto label1;

        r6 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        i8 = 0;

        l9 = l0;

     label1:
        $r7 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        $r8 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>;

        interfaceinvoke $r1.<org.joda.time.format.DateTimePrinter: void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>(r4, l9, $r7, i8, r6, $r8);

        return;
    }

    private void printTo(java.io.Writer, long, org.joda.time.Chronology) throws java.io.IOException
    {
        org.joda.time.DateTimeZone $r3, r6;
        long l0, $l2, $l3, $l5, $l6, l9;
        byte $b4, $b7;
        java.util.Locale $r8;
        int $i1, i8, $i10, $i11;
        org.joda.time.format.DateTimeFormatter r0;
        org.joda.time.Chronology $r2, r5, $r7;
        org.joda.time.format.DateTimePrinter $r1;
        java.io.Writer r4;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r4 := @parameter0: java.io.Writer;

        l0 := @parameter1: long;

        r5 := @parameter2: org.joda.time.Chronology;

        $r1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter requirePrinter()>();

        $r2 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>(r5);

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>();

        r6 = $r3;

        $i1 = virtualinvoke $r3.<org.joda.time.DateTimeZone: int getOffset(long)>(l0);

        i8 = $i1;

        $l2 = (long) $i1;

        l9 = l0 + $l2;

        $l3 = l0 ^ l9;

        $b4 = $l3 cmp 0L;

        $i10 = (int) $b4;

        if $i10 >= 0 goto label1;

        $l5 = (long) $i1;

        $l6 = l0 ^ $l5;

        $b7 = $l6 cmp 0L;

        $i11 = (int) $b7;

        if $i11 < 0 goto label1;

        r6 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        i8 = 0;

        l9 = l0;

     label1:
        $r7 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        $r8 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>;

        interfaceinvoke $r1.<org.joda.time.format.DateTimePrinter: void printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>(r4, l9, $r7, i8, r6, $r8);

        return;
    }

    private org.joda.time.format.DateTimePrinter requirePrinter()
    {
        java.lang.UnsupportedOperationException $r2;
        org.joda.time.format.DateTimeFormatter r0;
        org.joda.time.format.DateTimePrinter r1;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter iPrinter>;

        if r1 != null goto label1;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Printing not supported");

        throw $r2;

     label1:
        return r1;
    }

    public int parseInto(org.joda.time.ReadWritableInstant, java.lang.String, int)
    {
        org.joda.time.DateTimeZone $r4, $r10, $r11;
        org.joda.time.format.DateTimeParser $r1;
        long $l0, $l2, l3, $l6;
        java.lang.Integer $r7;
        java.util.Locale $r8;
        int $i1, i4, $i5, $i7;
        org.joda.time.format.DateTimeParserBucket $r6;
        java.lang.String r9;
        boolean $z0;
        org.joda.time.format.DateTimeFormatter r0;
        org.joda.time.Chronology $r3, $r5, r13;
        java.lang.IllegalArgumentException $r12;
        org.joda.time.ReadWritableInstant r2;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r2 := @parameter0: org.joda.time.ReadWritableInstant;

        r9 := @parameter1: java.lang.String;

        i4 := @parameter2: int;

        $r1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser requireParser()>();

        if r2 != null goto label1;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Instant must not be null");

        throw $r12;

     label1:
        $l0 = interfaceinvoke r2.<org.joda.time.ReadWritableInstant: long getMillis()>();

        $r3 = interfaceinvoke r2.<org.joda.time.ReadWritableInstant: org.joda.time.Chronology getChronology()>();

        $r4 = virtualinvoke $r3.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>();

        $i1 = virtualinvoke $r4.<org.joda.time.DateTimeZone: int getOffset(long)>($l0);

        $l2 = (long) $i1;

        l3 = $l0 + $l2;

        $r5 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>($r3);

        r13 = $r5;

        $r6 = new org.joda.time.format.DateTimeParserBucket;

        $r8 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>;

        $r7 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>;

        specialinvoke $r6.<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer)>(l3, $r5, $r8, $r7);

        $i5 = interfaceinvoke $r1.<org.joda.time.format.DateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>($r6, r9, i4);

        $l6 = virtualinvoke $r6.<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.String)>(0, r9);

        interfaceinvoke r2.<org.joda.time.ReadWritableInstant: void setMillis(long)>($l6);

        $z0 = r0.<org.joda.time.format.DateTimeFormatter: boolean iOffsetParsed>;

        if $z0 == 0 goto label2;

        $r10 = virtualinvoke $r6.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone getZone()>();

        if $r10 != null goto label2;

        $i7 = virtualinvoke $r6.<org.joda.time.format.DateTimeParserBucket: int getOffset()>();

        $r11 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>($i7);

        r13 = virtualinvoke $r5.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>($r11);

     label2:
        interfaceinvoke r2.<org.joda.time.ReadWritableInstant: void setChronology(org.joda.time.Chronology)>(r13);

        return $i5;
    }

    public long parseMillis(java.lang.String)
    {
        org.joda.time.format.DateTimeParser $r1;
        org.joda.time.format.DateTimeFormatter r0;
        org.joda.time.Chronology $r2, $r3;
        long $l2;
        java.lang.IllegalArgumentException $r11;
        java.lang.Integer $r5;
        java.util.Locale $r6;
        int $i0, $i1, i3, $i5;
        java.lang.String r7, $r9;
        org.joda.time.format.DateTimeParserBucket $r10;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r7 := @parameter0: java.lang.String;

        $r1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser requireParser()>();

        $r2 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>;

        $r3 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>($r2);

        $r10 = new org.joda.time.format.DateTimeParserBucket;

        $r6 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>;

        $r5 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>;

        specialinvoke $r10.<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer)>(0L, $r3, $r6, $r5);

        $i0 = interfaceinvoke $r1.<org.joda.time.format.DateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>($r10, r7, 0);

        i3 = $i0;

        if $i0 < 0 goto label1;

        $i1 = virtualinvoke r7.<java.lang.String: int length()>();

        if $i0 < $i1 goto label2;

        $l2 = virtualinvoke $r10.<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.String)>(1, r7);

        return $l2;

     label1:
        $i5 = (int) -1;

        i3 = $i0 ^ $i5;

     label2:
        $r11 = new java.lang.IllegalArgumentException;

        $r9 = staticinvoke <org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>(r7, i3);

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r11;
    }

    public org.joda.time.DateTime parseDateTime(java.lang.String)
    {
        org.joda.time.DateTimeZone $r9, $r10;
        org.joda.time.format.DateTimeParser $r1;
        long $l2;
        java.lang.Integer $r4;
        java.util.Locale $r5;
        int $i0, $i1, $i3, i4, $i6;
        java.lang.String r6, $r8;
        org.joda.time.format.DateTimeParserBucket $r13;
        boolean $z0;
        org.joda.time.format.DateTimeFormatter r0;
        org.joda.time.Chronology $r2, r11;
        org.joda.time.DateTime $r14;
        java.lang.IllegalArgumentException $r15;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r6 := @parameter0: java.lang.String;

        $r1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser requireParser()>();

        $r2 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>(null);

        r11 = $r2;

        $r13 = new org.joda.time.format.DateTimeParserBucket;

        $r5 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>;

        $r4 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>;

        specialinvoke $r13.<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer)>(0L, $r2, $r5, $r4);

        $i0 = interfaceinvoke $r1.<org.joda.time.format.DateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>($r13, r6, 0);

        i4 = $i0;

        if $i0 < 0 goto label2;

        $i1 = virtualinvoke r6.<java.lang.String: int length()>();

        if $i0 < $i1 goto label3;

        $l2 = virtualinvoke $r13.<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.String)>(1, r6);

        $z0 = r0.<org.joda.time.format.DateTimeFormatter: boolean iOffsetParsed>;

        if $z0 == 0 goto label1;

        $r9 = virtualinvoke $r13.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone getZone()>();

        if $r9 != null goto label1;

        $i3 = virtualinvoke $r13.<org.joda.time.format.DateTimeParserBucket: int getOffset()>();

        $r10 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>($i3);

        r11 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>($r10);

     label1:
        $r14 = new org.joda.time.DateTime;

        specialinvoke $r14.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>($l2, r11);

        return $r14;

     label2:
        $i6 = (int) -1;

        i4 = $i0 ^ $i6;

     label3:
        $r15 = new java.lang.IllegalArgumentException;

        $r8 = staticinvoke <org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>(r6, i4);

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r15;
    }

    public org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)
    {
        org.joda.time.DateTimeZone $r9, $r10;
        org.joda.time.format.DateTimeParser $r1;
        long $l2;
        java.lang.Integer $r4;
        java.util.Locale $r5;
        int $i0, $i1, $i3, i4, $i6;
        java.lang.String r6, $r8;
        org.joda.time.format.DateTimeParserBucket $r13;
        boolean $z0;
        org.joda.time.format.DateTimeFormatter r0;
        org.joda.time.Chronology $r2, r11;
        java.lang.IllegalArgumentException $r15;
        org.joda.time.MutableDateTime $r14;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r6 := @parameter0: java.lang.String;

        $r1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser requireParser()>();

        $r2 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>(null);

        r11 = $r2;

        $r13 = new org.joda.time.format.DateTimeParserBucket;

        $r5 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>;

        $r4 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>;

        specialinvoke $r13.<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer)>(0L, $r2, $r5, $r4);

        $i0 = interfaceinvoke $r1.<org.joda.time.format.DateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>($r13, r6, 0);

        i4 = $i0;

        if $i0 < 0 goto label2;

        $i1 = virtualinvoke r6.<java.lang.String: int length()>();

        if $i0 < $i1 goto label3;

        $l2 = virtualinvoke $r13.<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.String)>(1, r6);

        $z0 = r0.<org.joda.time.format.DateTimeFormatter: boolean iOffsetParsed>;

        if $z0 == 0 goto label1;

        $r9 = virtualinvoke $r13.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone getZone()>();

        if $r9 != null goto label1;

        $i3 = virtualinvoke $r13.<org.joda.time.format.DateTimeParserBucket: int getOffset()>();

        $r10 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>($i3);

        r11 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>($r10);

     label1:
        $r14 = new org.joda.time.MutableDateTime;

        specialinvoke $r14.<org.joda.time.MutableDateTime: void <init>(long,org.joda.time.Chronology)>($l2, r11);

        return $r14;

     label2:
        $i6 = (int) -1;

        i4 = $i0 ^ $i6;

     label3:
        $r15 = new java.lang.IllegalArgumentException;

        $r8 = staticinvoke <org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>(r6, i4);

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r15;
    }

    private org.joda.time.format.DateTimeParser requireParser()
    {
        java.lang.UnsupportedOperationException $r2;
        org.joda.time.format.DateTimeParser r1;
        org.joda.time.format.DateTimeFormatter r0;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser iParser>;

        if r1 != null goto label1;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Parsing not supported");

        throw $r2;

     label1:
        return r1;
    }

    private org.joda.time.Chronology selectChronology(org.joda.time.Chronology)
    {
        org.joda.time.DateTimeZone $r2, $r3;
        org.joda.time.format.DateTimeFormatter r0;
        org.joda.time.Chronology $r1, r4, r5;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r4 := @parameter0: org.joda.time.Chronology;

        r5 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r4);

        $r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>;

        if $r1 == null goto label1;

        r5 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>;

     label1:
        $r2 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>;

        if $r2 == null goto label2;

        $r3 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>;

        r5 = virtualinvoke r5.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>($r3);

     label2:
        return r5;
    }
}
