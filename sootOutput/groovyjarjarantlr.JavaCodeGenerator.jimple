public class groovyjarjarantlr.JavaCodeGenerator extends groovyjarjarantlr.CodeGenerator
{
    public static final int NO_MAPPING;
    public static final int CONTINUE_LAST_MAPPING;
    private groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager printWriterManager;
    private int defaultLine;
    protected int syntacticPredLevel;
    protected boolean genAST;
    protected boolean saveText;
    java.lang.String labeledElementType;
    java.lang.String labeledElementASTType;
    java.lang.String labeledElementInit;
    java.lang.String commonExtraArgs;
    java.lang.String commonExtraParams;
    java.lang.String commonLocalVars;
    java.lang.String lt1Value;
    java.lang.String exceptionThrown;
    java.lang.String throwNoViable;
    groovyjarjarantlr.RuleBlock currentRule;
    java.lang.String currentASTResult;
    java.util.Hashtable treeVariableMap;
    java.util.Hashtable declaredASTVariables;
    int astVarNumber;
    protected static final java.lang.String NONUNIQUE;
    public static final int caseSizeThreshold;
    private groovyjarjarantlr.collections.impl.Vector semPreds;

    public void <init>()
    {
        groovyjarjarantlr.JavaCodeGenerator r0;
        int $i1;
        groovyjarjarantlr.JavaCharFormatter $r6;
        java.util.Hashtable $r4, $r5;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        specialinvoke r0.<groovyjarjarantlr.CodeGenerator: void <init>()>();

        $i1 = (int) -999;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = $i1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int syntacticPredLevel> = 0;

        r0.<groovyjarjarantlr.JavaCodeGenerator: boolean genAST> = 0;

        r0.<groovyjarjarantlr.JavaCodeGenerator: boolean saveText> = 0;

        $r4 = new java.util.Hashtable;

        specialinvoke $r4.<java.util.Hashtable: void <init>()>();

        r0.<groovyjarjarantlr.JavaCodeGenerator: java.util.Hashtable treeVariableMap> = $r4;

        $r5 = new java.util.Hashtable;

        specialinvoke $r5.<java.util.Hashtable: void <init>()>();

        r0.<groovyjarjarantlr.JavaCodeGenerator: java.util.Hashtable declaredASTVariables> = $r5;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int astVarNumber> = 1;

        $r6 = new groovyjarjarantlr.JavaCharFormatter;

        specialinvoke $r6.<groovyjarjarantlr.JavaCharFormatter: void <init>()>();

        r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.CharFormatter charFormatter> = $r6;

        return;
    }

    protected void printAction(java.lang.String)
    {
        groovyjarjarantlr.JavaCodeGenerator r0;
        int $i0;
        java.lang.String r1;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r1 := @parameter0: java.lang.String;

        $i0 = r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine>;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void printAction(java.lang.String,int)>(r1, $i0);

        return;
    }

    protected void printAction(java.lang.String, int)
    {
        groovyjarjarantlr.JavaCodeGenerator r0;
        int i0;
        groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager $r1, $r3;
        java.lang.String r2;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r2 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager getPrintWriterManager()>();

        interfaceinvoke $r1.<groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager: void startMapping(int)>(i0);

        specialinvoke r0.<groovyjarjarantlr.CodeGenerator: void printAction(java.lang.String)>(r2);

        $r3 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager getPrintWriterManager()>();

        interfaceinvoke $r3.<groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager: void endMapping()>();

        return;
    }

    public void println(java.lang.String)
    {
        groovyjarjarantlr.JavaCodeGenerator r0;
        int $i0;
        java.lang.String r1;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r1 := @parameter0: java.lang.String;

        $i0 = r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine>;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String,int)>(r1, $i0);

        return;
    }

    public void println(java.lang.String, int)
    {
        int i0, $i2, $i4;
        groovyjarjarantlr.JavaCodeGenerator r0;
        groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager $r1, $r3;
        java.lang.String r2;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r2 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if i0 > 0 goto label1;

        $i2 = (int) -888;

        if i0 != $i2 goto label2;

     label1:
        $r1 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager getPrintWriterManager()>();

        interfaceinvoke $r1.<groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager: void startSingleSourceLineMapping(int)>(i0);

     label2:
        specialinvoke r0.<groovyjarjarantlr.CodeGenerator: void println(java.lang.String)>(r2);

        if i0 > 0 goto label3;

        $i4 = (int) -888;

        if i0 != $i4 goto label4;

     label3:
        $r3 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager getPrintWriterManager()>();

        interfaceinvoke $r3.<groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager: void endMapping()>();

     label4:
        return;
    }

    protected void print(java.lang.String)
    {
        groovyjarjarantlr.JavaCodeGenerator r0;
        int $i0;
        java.lang.String r1;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r1 := @parameter0: java.lang.String;

        $i0 = r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine>;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void print(java.lang.String,int)>(r1, $i0);

        return;
    }

    protected void print(java.lang.String, int)
    {
        int i0, $i2, $i4;
        groovyjarjarantlr.JavaCodeGenerator r0;
        groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager $r1, $r3;
        java.lang.String r2;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r2 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if i0 > 0 goto label1;

        $i2 = (int) -888;

        if i0 != $i2 goto label2;

     label1:
        $r1 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager getPrintWriterManager()>();

        interfaceinvoke $r1.<groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager: void startMapping(int)>(i0);

     label2:
        specialinvoke r0.<groovyjarjarantlr.CodeGenerator: void print(java.lang.String)>(r2);

        if i0 > 0 goto label3;

        $i4 = (int) -888;

        if i0 != $i4 goto label4;

     label3:
        $r3 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager getPrintWriterManager()>();

        interfaceinvoke $r3.<groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager: void endMapping()>();

     label4:
        return;
    }

    protected void _print(java.lang.String)
    {
        groovyjarjarantlr.JavaCodeGenerator r0;
        int $i0;
        java.lang.String r1;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r1 := @parameter0: java.lang.String;

        $i0 = r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine>;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void _print(java.lang.String,int)>(r1, $i0);

        return;
    }

    protected void _print(java.lang.String, int)
    {
        int i0, $i2, $i4;
        groovyjarjarantlr.JavaCodeGenerator r0;
        groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager $r1, $r3;
        java.lang.String r2;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r2 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if i0 > 0 goto label1;

        $i2 = (int) -888;

        if i0 != $i2 goto label2;

     label1:
        $r1 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager getPrintWriterManager()>();

        interfaceinvoke $r1.<groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager: void startMapping(int)>(i0);

     label2:
        specialinvoke r0.<groovyjarjarantlr.CodeGenerator: void _print(java.lang.String)>(r2);

        if i0 > 0 goto label3;

        $i4 = (int) -888;

        if i0 != $i4 goto label4;

     label3:
        $r3 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager getPrintWriterManager()>();

        interfaceinvoke $r3.<groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager: void endMapping()>();

     label4:
        return;
    }

    protected void _println(java.lang.String)
    {
        groovyjarjarantlr.JavaCodeGenerator r0;
        int $i0;
        java.lang.String r1;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r1 := @parameter0: java.lang.String;

        $i0 = r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine>;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void _println(java.lang.String,int)>(r1, $i0);

        return;
    }

    protected void _println(java.lang.String, int)
    {
        int i0, $i2, $i4;
        groovyjarjarantlr.JavaCodeGenerator r0;
        groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager $r1, $r3;
        java.lang.String r2;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r2 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if i0 > 0 goto label1;

        $i2 = (int) -888;

        if i0 != $i2 goto label2;

     label1:
        $r1 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager getPrintWriterManager()>();

        interfaceinvoke $r1.<groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager: void startMapping(int)>(i0);

     label2:
        specialinvoke r0.<groovyjarjarantlr.CodeGenerator: void _println(java.lang.String)>(r2);

        if i0 > 0 goto label3;

        $i4 = (int) -888;

        if i0 != $i4 goto label4;

     label3:
        $r3 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager getPrintWriterManager()>();

        interfaceinvoke $r3.<groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager: void endMapping()>();

     label4:
        return;
    }

    protected int addSemPred(java.lang.String)
    {
        groovyjarjarantlr.JavaCodeGenerator r0;
        int $i0, $i1;
        java.lang.String r1;
        groovyjarjarantlr.collections.impl.Vector $r2, $r3;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.collections.impl.Vector semPreds>;

        virtualinvoke $r2.<groovyjarjarantlr.collections.impl.Vector: void appendElement(java.lang.Object)>(r1);

        $r3 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.collections.impl.Vector semPreds>;

        $i0 = virtualinvoke $r3.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        $i1 = $i0 - 1;

        return $i1;
    }

    public void exitIfError()
    {
        groovyjarjarantlr.Tool $r1, $r2;
        groovyjarjarantlr.JavaCodeGenerator r0;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        $r1 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $z0 = virtualinvoke $r1.<groovyjarjarantlr.Tool: boolean hasError()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        virtualinvoke $r2.<groovyjarjarantlr.Tool: void fatalError(java.lang.String)>("Exiting due to errors.");

     label1:
        return;
    }

    public void gen()
    {
        java.util.Enumeration $r3, $r6;
        groovyjarjarantlr.LLkGrammarAnalyzer $r10, $r11;
        groovyjarjarantlr.Grammar r14;
        groovyjarjarantlr.Tool $r13;
        groovyjarjarantlr.TokenManager r8;
        java.util.Hashtable $r2, $r5;
        boolean $z0, $z1, $z2;
        groovyjarjarantlr.JavaCodeGenerator r0;
        java.io.IOException $r12;
        java.lang.Object $r7, $r9;
        groovyjarjarantlr.DefineGrammarSymbols $r1, $r4;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

     label1:
        $r1 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.DefineGrammarSymbols behavior>;

        $r2 = $r1.<groovyjarjarantlr.DefineGrammarSymbols: java.util.Hashtable grammars>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.util.Enumeration elements()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label3;

        $r9 = interfaceinvoke $r3.<java.util.Enumeration: java.lang.Object nextElement()>();

        r14 = (groovyjarjarantlr.Grammar) $r9;

        $r10 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.LLkGrammarAnalyzer analyzer>;

        virtualinvoke r14.<groovyjarjarantlr.Grammar: void setGrammarAnalyzer(groovyjarjarantlr.LLkGrammarAnalyzer)>($r10);

        virtualinvoke r14.<groovyjarjarantlr.Grammar: void setCodeGenerator(groovyjarjarantlr.CodeGenerator)>(r0);

        $r11 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.LLkGrammarAnalyzer analyzer>;

        interfaceinvoke $r11.<groovyjarjarantlr.LLkGrammarAnalyzer: void setGrammar(groovyjarjarantlr.Grammar)>(r14);

        specialinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void setupGrammarParameters(groovyjarjarantlr.Grammar)>(r14);

        virtualinvoke r14.<groovyjarjarantlr.Grammar: void generate()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void exitIfError()>();

        goto label2;

     label3:
        $r4 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.DefineGrammarSymbols behavior>;

        $r5 = $r4.<groovyjarjarantlr.DefineGrammarSymbols: java.util.Hashtable tokenManagers>;

        $r6 = virtualinvoke $r5.<java.util.Hashtable: java.util.Enumeration elements()>();

     label4:
        $z1 = interfaceinvoke $r6.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z1 == 0 goto label6;

        $r7 = interfaceinvoke $r6.<java.util.Enumeration: java.lang.Object nextElement()>();

        r8 = (groovyjarjarantlr.TokenManager) $r7;

        $z2 = interfaceinvoke r8.<groovyjarjarantlr.TokenManager: boolean isReadOnly()>();

        if $z2 != 0 goto label5;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genTokenTypes(groovyjarjarantlr.TokenManager)>(r8);

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genTokenInterchange(groovyjarjarantlr.TokenManager)>(r8);

     label5:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void exitIfError()>();

        goto label4;

     label6:
        goto label8;

     label7:
        $r12 := @caughtexception;

        $r13 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        virtualinvoke $r13.<groovyjarjarantlr.Tool: void reportException(java.lang.Exception,java.lang.String)>($r12, null);

     label8:
        return;

        catch java.io.IOException from label1 to label6 with label7;
    }

    public void gen(groovyjarjarantlr.ActionElement)
    {
        groovyjarjarantlr.RuleBlock $r5;
        java.lang.Throwable $r47;
        java.lang.StringBuffer $r10, $r12, $r13, $r16, $r18, $r19, $r21, $r22, $r26, $r27, $r29, $r30, $r34, $r35, $r37, $r38, $r43, $r44, $r45, $r48, $r50, $r51, $r52, $r53;
        groovyjarjarantlr.ActionElement r1;
        java.lang.String $r4, $r6, $r7, $r11, $r14, $r17, $r20, $r23, $r25, $r28, $r31, $r33, $r36, $r39, $r40, $r46;
        groovyjarjarantlr.ActionTransInfo $r49;
        groovyjarjarantlr.JavaCodeGenerator r0;
        groovyjarjarantlr.Grammar $r2, $r8;
        boolean $z0, $z1, $z2, $z3, $z4;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13, $i15;
        java.io.PrintStream $r42;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.ActionElement;

        i0 = r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine>;

     label01:
        $i1 = virtualinvoke r1.<groovyjarjarantlr.ActionElement: int getLine()>();

        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = $i1;

        $z0 = r0.<groovyjarjarantlr.JavaCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z0 == 0 goto label02;

        $r42 = <java.lang.System: java.io.PrintStream out>;

        $r48 = new java.lang.StringBuffer;

        specialinvoke $r48.<java.lang.StringBuffer: void <init>()>();

        $r43 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("genAction(");

        $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r46 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r42.<java.io.PrintStream: void println(java.lang.String)>($r46);

     label02:
        $z1 = r1.<groovyjarjarantlr.ActionElement: boolean isSemPred>;

        if $z1 == 0 goto label03;

        $r40 = r1.<groovyjarjarantlr.ActionElement: java.lang.String actionText>;

        $i11 = r1.<groovyjarjarantlr.ActionElement: int line>;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genSemPred(java.lang.String,int)>($r40, $i11);

        goto label07;

     label03:
        $r2 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z2 = $r2.<groovyjarjarantlr.Grammar: boolean hasSyntacticPredicate>;

        if $z2 == 0 goto label04;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("if ( inputState.guessing==0 ) {");

        $i9 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i10 = $i9 + 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i10;

     label04:
        $r49 = new groovyjarjarantlr.ActionTransInfo;

        specialinvoke $r49.<groovyjarjarantlr.ActionTransInfo: void <init>()>();

        $r4 = r1.<groovyjarjarantlr.ActionElement: java.lang.String actionText>;

        $i2 = virtualinvoke r1.<groovyjarjarantlr.ActionElement: int getLine()>();

        $r5 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        $r6 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String processActionForSpecialSymbols(java.lang.String,int,groovyjarjarantlr.RuleBlock,groovyjarjarantlr.ActionTransInfo)>($r4, $i2, $r5, $r49);

        $r7 = $r49.<groovyjarjarantlr.ActionTransInfo: java.lang.String refRuleRoot>;

        if $r7 == null goto label05;

        $r50 = new java.lang.StringBuffer;

        specialinvoke $r50.<java.lang.StringBuffer: void <init>()>();

        $r33 = $r49.<groovyjarjarantlr.ActionTransInfo: java.lang.String refRuleRoot>;

        $r34 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = (");

        $r36 = r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String labeledElementASTType>;

        $r37 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")currentAST.root;");

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r39);

     label05:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void printAction(java.lang.String)>($r6);

        $z3 = $r49.<groovyjarjarantlr.ActionTransInfo: boolean assignToRoot>;

        if $z3 == 0 goto label06;

        $r51 = new java.lang.StringBuffer;

        specialinvoke $r51.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("currentAST.root = ");

        $r11 = $r49.<groovyjarjarantlr.ActionTransInfo: java.lang.String refRuleRoot>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r14);

        $r52 = new java.lang.StringBuffer;

        specialinvoke $r52.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("currentAST.child = ");

        $r17 = $r49.<groovyjarjarantlr.ActionTransInfo: java.lang.String refRuleRoot>;

        $r18 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("!=null &&");

        $r20 = $r49.<groovyjarjarantlr.ActionTransInfo: java.lang.String refRuleRoot>;

        $r21 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".getFirstChild()!=null ?");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

        $i13 = (int) -999;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String,int)>($r23, $i13);

        $i5 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i6 = $i5 + 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i6;

        $r53 = new java.lang.StringBuffer;

        specialinvoke $r53.<java.lang.StringBuffer: void <init>()>();

        $r25 = $r49.<groovyjarjarantlr.ActionTransInfo: java.lang.String refRuleRoot>;

        $r26 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".getFirstChild() : ");

        $r28 = $r49.<groovyjarjarantlr.ActionTransInfo: java.lang.String refRuleRoot>;

        $r29 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r31);

        $i7 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i8 = $i7 - 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i8;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("currentAST.advanceChildToEnd();");

     label06:
        $r8 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z4 = $r8.<groovyjarjarantlr.Grammar: boolean hasSyntacticPredicate>;

        if $z4 == 0 goto label07;

        $i3 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i4 = $i3 - 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i4;

        $i15 = (int) -999;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String,int)>("}", $i15);

     label07:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        goto label10;

     label08:
        $r47 := @caughtexception;

     label09:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        throw $r47;

     label10:
        return;

        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public void gen(groovyjarjarantlr.AlternativeBlock)
    {
        groovyjarjarantlr.AlternativeBlock r1;
        groovyjarjarantlr.LLkGrammarAnalyzer $r4;
        groovyjarjarantlr.Grammar $r3;
        java.lang.StringBuffer $r10, $r11, $r12, $r15;
        int $i0, $i2, $i4;
        java.lang.String $r2, $r6, $r7, $r13, $r14;
        boolean $z0;
        groovyjarjarantlr.JavaBlockFinishingInfo $r5;
        java.io.PrintStream $r9;
        groovyjarjarantlr.JavaCodeGenerator r0;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.AlternativeBlock;

        $z0 = r0.<groovyjarjarantlr.JavaCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z0 == 0 goto label1;

        $r9 = <java.lang.System: java.io.PrintStream out>;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("gen(");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r13);

     label1:
        $i2 = (int) -999;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String,int)>("{", $i2);

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genBlockPreamble(groovyjarjarantlr.AlternativeBlock)>(r1);

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genBlockInitAction(groovyjarjarantlr.AlternativeBlock)>(r1);

        $r14 = r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String currentASTResult>;

        $r2 = virtualinvoke r1.<groovyjarjarantlr.AlternativeBlock: java.lang.String getLabel()>();

        if $r2 == null goto label2;

        $r7 = virtualinvoke r1.<groovyjarjarantlr.AlternativeBlock: java.lang.String getLabel()>();

        r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String currentASTResult> = $r7;

     label2:
        $r3 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r4 = $r3.<groovyjarjarantlr.Grammar: groovyjarjarantlr.LLkGrammarAnalyzer theLLkAnalyzer>;

        interfaceinvoke $r4.<groovyjarjarantlr.LLkGrammarAnalyzer: boolean deterministic(groovyjarjarantlr.AlternativeBlock)>(r1);

        $r5 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.JavaBlockFinishingInfo genCommonBlock(groovyjarjarantlr.AlternativeBlock,boolean)>(r1, 1);

        $r6 = r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String throwNoViable>;

        $i0 = virtualinvoke r1.<groovyjarjarantlr.AlternativeBlock: int getLine()>();

        specialinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genBlockFinish(groovyjarjarantlr.JavaBlockFinishingInfo,java.lang.String,int)>($r5, $r6, $i0);

        $i4 = (int) -999;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String,int)>("}", $i4);

        r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String currentASTResult> = $r14;

        return;
    }

    public void gen(groovyjarjarantlr.BlockEndElement)
    {
        java.io.PrintStream $r2;
        groovyjarjarantlr.BlockEndElement r4;
        groovyjarjarantlr.JavaCodeGenerator r0;
        java.lang.StringBuffer $r1, $r3, $r5, $r6;
        java.lang.String $r7;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r4 := @parameter0: groovyjarjarantlr.BlockEndElement;

        $z0 = r0.<groovyjarjarantlr.JavaCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z0 == 0 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("genRuleEnd(");

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r7);

     label1:
        return;
    }

    public void gen(groovyjarjarantlr.CharLiteralElement)
    {
        groovyjarjarantlr.CharLiteralElement r1;
        java.lang.StringBuffer $r3, $r5, $r6, $r8, $r9, $r11, $r13, $r14, $r15;
        int $i0, $i1;
        java.lang.String $r2, $r4, $r7, $r10, $r16;
        boolean $z0, $z1, $z2, $z3;
        java.io.PrintStream $r12;
        groovyjarjarantlr.JavaCodeGenerator r0;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.CharLiteralElement;

        $z0 = r0.<groovyjarjarantlr.JavaCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z0 == 0 goto label1;

        $r12 = <java.lang.System: java.io.PrintStream out>;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("genChar(");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>($r16);

     label1:
        $r2 = virtualinvoke r1.<groovyjarjarantlr.CharLiteralElement: java.lang.String getLabel()>();

        if $r2 == null goto label2;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke r1.<groovyjarjarantlr.CharLiteralElement: java.lang.String getLabel()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r7 = r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String lt1Value>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        $i1 = virtualinvoke r1.<groovyjarjarantlr.CharLiteralElement: int getLine()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String,int)>($r10, $i1);

     label2:
        $z2 = r0.<groovyjarjarantlr.JavaCodeGenerator: boolean saveText>;

        $z1 = r0.<groovyjarjarantlr.JavaCodeGenerator: boolean saveText>;

        if $z1 == 0 goto label3;

        $i0 = virtualinvoke r1.<groovyjarjarantlr.CharLiteralElement: int getAutoGenType()>();

        if $i0 != 1 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        r0.<groovyjarjarantlr.JavaCodeGenerator: boolean saveText> = $z3;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genMatch(groovyjarjarantlr.GrammarAtom)>(r1);

        r0.<groovyjarjarantlr.JavaCodeGenerator: boolean saveText> = $z2;

        return;
    }

    public void gen(groovyjarjarantlr.CharRangeElement)
    {
        java.lang.Throwable $r20;
        groovyjarjarantlr.CharRangeElement r1;
        groovyjarjarantlr.Grammar $r21;
        java.lang.StringBuffer $r3, $r4, $r6, $r7, $r9, $r10, $r12, $r14, $r15, $r17, $r18;
        int i0, $i1, $i2, $i3;
        java.lang.String $r2, $r5, $r8, $r11, $r13, $r16, $r19;
        boolean z0, $z1, $z2, $z4, $z5;
        groovyjarjarantlr.JavaCodeGenerator r0;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.CharRangeElement;

        i0 = r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine>;

     label01:
        $i1 = virtualinvoke r1.<groovyjarjarantlr.CharRangeElement: int getLine()>();

        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = $i1;

        $r2 = virtualinvoke r1.<groovyjarjarantlr.CharRangeElement: java.lang.String getLabel()>();

        if $r2 == null goto label02;

        $i3 = r0.<groovyjarjarantlr.JavaCodeGenerator: int syntacticPredLevel>;

        if $i3 != 0 goto label02;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke r1.<groovyjarjarantlr.CharRangeElement: java.lang.String getLabel()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r16 = r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String lt1Value>;

        $r17 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r19);

     label02:
        $r21 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z2 = $r21 instanceof groovyjarjarantlr.LexerGrammar;

        if $z2 == 0 goto label04;

        $z1 = r0.<groovyjarjarantlr.JavaCodeGenerator: boolean saveText>;

        if $z1 == 0 goto label03;

        $i2 = virtualinvoke r1.<groovyjarjarantlr.CharRangeElement: int getAutoGenType()>();

        if $i2 != 3 goto label04;

     label03:
        $z5 = 1;

        $z4 = 1;

        goto label05;

     label04:
        $z5 = 0;

        $z4 = 0;

     label05:
        z0 = $z4;

        if $z5 == 0 goto label06;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("_saveIndex=text.length();");

     label06:
        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("matchRange(");

        $r5 = r1.<groovyjarjarantlr.CharRangeElement: java.lang.String beginText>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r8 = r1.<groovyjarjarantlr.CharRangeElement: java.lang.String endText>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(");");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r11);

        if z0 == 0 goto label07;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("text.setLength(_saveIndex);");

     label07:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        goto label10;

     label08:
        $r20 := @caughtexception;

     label09:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        throw $r20;

     label10:
        return;

        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public void gen(groovyjarjarantlr.LexerGrammar) throws java.io.IOException
    {
        java.util.Enumeration $r52, $r56, $r67;
        java.lang.StringBuffer $r11, $r14, $r15, $r23, $r26, $r33, $r36, $r37, $r41, $r42, $r43, $r46, $r47, $r48, $r70, $r73, $r74, $r81, $r83, $r84, $r85, $r86, $r91, $r92, $r107, $r108, $r111, $r114, $r115, $r116, $r119, $r123, $r125, $r126, $r142, $r145, $r146, $r149, $r152, $r153, $r156, $r159, $r160, $r168, $r169, $r170, $r171, $r172, $r173, $r174, $r175, $r176, $r177, $r178, $r179, $r180, $r181;
        groovyjarjarantlr.DefineGrammarSymbols $r7, $r8;
        groovyjarjarantlr.StringLiteralSymbol r164;
        groovyjarjarantlr.Grammar $r2, $r4, $r12, $r17, $r20, $r24, $r27, $r29, $r34, $r39, $r50, $r53, $r54, $r57, $r58, $r65, $r77, $r96, $r99, $r112, $r120, $r128, $r132, $r135, $r139, $r143, $r150, $r157, $r162;
        groovyjarjarantlr.Token $r18, $r98, $r131, $r133, $r136, $r140;
        groovyjarjarantlr.TokenSymbol $r79;
        groovyjarjarantlr.LexerGrammar r1, $r59;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, i24, $i26, $i28, $i30, $i31;
        java.lang.Object $r31, $r63, $r68, $r76, $r130;
        groovyjarjarantlr.TokenManager $r51, $r78, $r121;
        groovyjarjarantlr.collections.impl.Vector $r55, $r61, $r66, $r167;
        java.io.PrintWriter $r6;
        groovyjarjarantlr.RuleBlock $r137;
        groovyjarjarantlr.GrammarSymbol r165;
        java.lang.Throwable $r102, $r103;
        groovyjarjarantlr.Tool $r5, $r100;
        java.lang.String $r9, $r13, $r16, $r19, $r21, $r25, $r28, $r35, $r38, $r44, $r49, $r64, $r72, $r75, $r82, $r87, $r88, $r89, $r93, $r94, $r95, $r97, r104, r105, $r109, $r113, $r117, $r122, $r124, $r127, $r134, $r138, $r144, $r147, $r151, $r154, $r158, $r161, r163;
        groovyjarjarantlr.JavaCodeGenerator r0;
        groovyjarjarantlr.RuleSymbol $r71, r166;
        groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager $r3, $r62;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        groovyjarjarantlr.collections.impl.BitSet $r60;
        java.util.Hashtable $r30, $r129;
        char $c10;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.LexerGrammar;

        i0 = r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine>;

     label01:
        $i26 = (int) -999;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = $i26;

        $z0 = r1.<groovyjarjarantlr.LexerGrammar: boolean debuggingOutput>;

        if $z0 == 0 goto label02;

        $r167 = new groovyjarjarantlr.collections.impl.Vector;

        specialinvoke $r167.<groovyjarjarantlr.collections.impl.Vector: void <init>()>();

        r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.collections.impl.Vector semPreds> = $r167;

     label02:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void setGrammar(groovyjarjarantlr.Grammar)>(r1);

        $r2 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z1 = $r2 instanceof groovyjarjarantlr.LexerGrammar;

        if $z1 != 0 goto label03;

        $r100 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        virtualinvoke $r100.<groovyjarjarantlr.Tool: void panic(java.lang.String)>("Internal error generating lexer");

     label03:
        $r3 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager getPrintWriterManager()>();

        $r5 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r4 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r6 = interfaceinvoke $r3.<groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager: java.io.PrintWriter setupOutput(groovyjarjarantlr.Tool,groovyjarjarantlr.Grammar)>($r5, $r4);

        r0.<groovyjarjarantlr.JavaCodeGenerator: java.io.PrintWriter currentOutput> = $r6;

        r0.<groovyjarjarantlr.JavaCodeGenerator: boolean genAST> = 0;

        r0.<groovyjarjarantlr.JavaCodeGenerator: boolean saveText> = 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = 0;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genHeader()>();

     label04:
        $r7 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.DefineGrammarSymbols behavior>;

        $i1 = virtualinvoke $r7.<groovyjarjarantlr.DefineGrammarSymbols: int getHeaderActionLine(java.lang.String)>("");

        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = $i1;

        $r8 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.DefineGrammarSymbols behavior>;

        $r9 = virtualinvoke $r8.<groovyjarjarantlr.DefineGrammarSymbols: java.lang.String getHeaderAction(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r9);

     label05:
        $i28 = (int) -999;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = $i28;

        goto label08;

     label06:
        $r103 := @caughtexception;

     label07:
        $i30 = (int) -999;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = $i30;

        throw $r103;

     label08:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("import java.io.InputStream;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("import antlr.TokenStreamException;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("import antlr.TokenStreamIOException;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("import antlr.TokenStreamRecognitionException;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("import antlr.CharStreamException;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("import antlr.CharStreamIOException;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("import antlr.ANTLRException;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("import java.io.Reader;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("import java.util.Hashtable;");

        $r168 = new java.lang.StringBuffer;

        specialinvoke $r168.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r168.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("import antlr.");

        $r12 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r13 = virtualinvoke $r12.<groovyjarjarantlr.Grammar: java.lang.String getSuperClass()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r16);

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("import antlr.InputBuffer;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("import antlr.ByteBuffer;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("import antlr.CharBuffer;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("import antlr.Token;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("import antlr.CommonToken;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("import antlr.RecognitionException;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("import antlr.NoViableAltForCharException;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("import antlr.MismatchedCharException;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("import antlr.TokenStream;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("import antlr.ANTLRHashString;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("import antlr.LexerSharedInputState;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("import antlr.collections.impl.BitSet;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("import antlr.SemanticException;");

        $r17 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r18 = $r17.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Token preambleAction>;

        $r19 = virtualinvoke $r18.<groovyjarjarantlr.Token: java.lang.String getText()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r19);

        $r20 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r21 = $r20.<groovyjarjarantlr.Grammar: java.lang.String superClass>;

        if $r21 == null goto label09;

        $r99 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        r104 = $r99.<groovyjarjarantlr.Grammar: java.lang.String superClass>;

        goto label10;

     label09:
        $r169 = new java.lang.StringBuffer;

        specialinvoke $r169.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r169.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("antlr.");

        $r24 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r25 = virtualinvoke $r24.<groovyjarjarantlr.Grammar: java.lang.String getSuperClass()>();

        $r26 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r25);

        r104 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.String toString()>();

     label10:
        $r27 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r28 = $r27.<groovyjarjarantlr.Grammar: java.lang.String comment>;

        if $r28 == null goto label11;

        $r96 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r97 = $r96.<groovyjarjarantlr.Grammar: java.lang.String comment>;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void _println(java.lang.String)>($r97);

     label11:
        r105 = "public";

        $r29 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r30 = $r29.<groovyjarjarantlr.Grammar: java.util.Hashtable options>;

        $r31 = virtualinvoke $r30.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("classHeaderPrefix");

        $r98 = (groovyjarjarantlr.Token) $r31;

        if $r98 == null goto label12;

        $r94 = virtualinvoke $r98.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r95 = staticinvoke <groovyjarjarantlr.StringUtils: java.lang.String stripFrontBack(java.lang.String,java.lang.String,java.lang.String)>($r94, "\"", "\"");

        if $r95 == null goto label12;

        r105 = $r95;

     label12:
        $r170 = new java.lang.StringBuffer;

        specialinvoke $r170.<java.lang.StringBuffer: void <init>()>();

        $r107 = virtualinvoke $r170.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r105);

        $r108 = virtualinvoke $r107.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r109 = virtualinvoke $r108.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void print(java.lang.String)>($r109);

        $r171 = new java.lang.StringBuffer;

        specialinvoke $r171.<java.lang.StringBuffer: void <init>()>();

        $r111 = virtualinvoke $r171.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("class ");

        $r112 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r113 = virtualinvoke $r112.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r114 = virtualinvoke $r111.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r113);

        $r115 = virtualinvoke $r114.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" extends ");

        $r116 = virtualinvoke $r115.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r104);

        $r117 = virtualinvoke $r116.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void print(java.lang.String)>($r117);

        $r172 = new java.lang.StringBuffer;

        specialinvoke $r172.<java.lang.StringBuffer: void <init>()>();

        $r119 = virtualinvoke $r172.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" implements ");

        $r120 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r121 = $r120.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $r122 = interfaceinvoke $r121.<groovyjarjarantlr.TokenManager: java.lang.String getName()>();

        $r123 = virtualinvoke $r119.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r122);

        $r124 = <groovyjarjarantlr.JavaCodeGenerator: java.lang.String TokenTypesFileSuffix>;

        $r125 = virtualinvoke $r123.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r124);

        $r126 = virtualinvoke $r125.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", TokenStream");

        $r127 = virtualinvoke $r126.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r127);

        $r128 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r129 = $r128.<groovyjarjarantlr.Grammar: java.util.Hashtable options>;

        $r130 = virtualinvoke $r129.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("classHeaderSuffix");

        $r131 = (groovyjarjarantlr.Token) $r130;

        if $r131 == null goto label13;

        $r88 = virtualinvoke $r131.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r89 = staticinvoke <groovyjarjarantlr.StringUtils: java.lang.String stripFrontBack(java.lang.String,java.lang.String,java.lang.String)>($r88, "\"", "\"");

        if $r89 == null goto label13;

        $r173 = new java.lang.StringBuffer;

        specialinvoke $r173.<java.lang.StringBuffer: void <init>()>();

        $r91 = virtualinvoke $r173.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r92 = virtualinvoke $r91.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r89);

        $r93 = virtualinvoke $r92.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void print(java.lang.String)>($r93);

     label13:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>(" {");

        $r132 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r133 = $r132.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Token classMemberAction>;

        $r134 = virtualinvoke $r133.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r135 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r136 = $r135.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Token classMemberAction>;

        $i12 = virtualinvoke $r136.<groovyjarjarantlr.Token: int getLine()>();

        $r137 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        $r138 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String processActionForSpecialSymbols(java.lang.String,int,groovyjarjarantlr.RuleBlock,groovyjarjarantlr.ActionTransInfo)>($r134, $i12, $r137, null);

        $r139 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r140 = $r139.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Token classMemberAction>;

        $i13 = virtualinvoke $r140.<groovyjarjarantlr.Token: int getLine()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void print(java.lang.String,int)>($r138, $i13);

        $r174 = new java.lang.StringBuffer;

        specialinvoke $r174.<java.lang.StringBuffer: void <init>()>();

        $r142 = virtualinvoke $r174.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("public ");

        $r143 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r144 = virtualinvoke $r143.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r145 = virtualinvoke $r142.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r144);

        $r146 = virtualinvoke $r145.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(InputStream in) {");

        $r147 = virtualinvoke $r146.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r147);

        $i14 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i15 = $i14 + 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i15;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("this(new ByteBuffer(in));");

        $i16 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i17 = $i16 - 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i17;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("}");

        $r175 = new java.lang.StringBuffer;

        specialinvoke $r175.<java.lang.StringBuffer: void <init>()>();

        $r149 = virtualinvoke $r175.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("public ");

        $r150 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r151 = virtualinvoke $r150.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r152 = virtualinvoke $r149.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r151);

        $r153 = virtualinvoke $r152.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(Reader in) {");

        $r154 = virtualinvoke $r153.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r154);

        $i18 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i19 = $i18 + 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i19;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("this(new CharBuffer(in));");

        $i20 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i21 = $i20 - 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i21;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("}");

        $r176 = new java.lang.StringBuffer;

        specialinvoke $r176.<java.lang.StringBuffer: void <init>()>();

        $r156 = virtualinvoke $r176.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("public ");

        $r157 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r158 = virtualinvoke $r157.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r159 = virtualinvoke $r156.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r158);

        $r160 = virtualinvoke $r159.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(InputBuffer ib) {");

        $r161 = virtualinvoke $r160.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r161);

        $i22 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i23 = $i22 + 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i23;

        $r162 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z10 = $r162.<groovyjarjarantlr.Grammar: boolean debuggingOutput>;

        if $z10 == 0 goto label14;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("this(new LexerSharedInputState(new antlr.debug.DebuggingInputBuffer(ib)));");

        goto label15;

     label14:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("this(new LexerSharedInputState(ib));");

     label15:
        $i2 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i3 = $i2 - 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i3;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("}");

        $r177 = new java.lang.StringBuffer;

        specialinvoke $r177.<java.lang.StringBuffer: void <init>()>();

        $r33 = virtualinvoke $r177.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("public ");

        $r34 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r35 = virtualinvoke $r34.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r36 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(LexerSharedInputState state) {");

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r38);

        $i4 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i5 = $i4 + 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i5;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("super(state);");

        $r39 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z2 = $r39.<groovyjarjarantlr.Grammar: boolean debuggingOutput>;

        if $z2 == 0 goto label16;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("  ruleNames  = _ruleNames;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("  semPredNames = _semPredNames;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("  setupDebugging();");

     label16:
        $r178 = new java.lang.StringBuffer;

        specialinvoke $r178.<java.lang.StringBuffer: void <init>()>();

        $r41 = virtualinvoke $r178.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("caseSensitiveLiterals = ");

        $z3 = r1.<groovyjarjarantlr.LexerGrammar: boolean caseSensitiveLiterals>;

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>($z3);

        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r44);

        $r179 = new java.lang.StringBuffer;

        specialinvoke $r179.<java.lang.StringBuffer: void <init>()>();

        $r46 = virtualinvoke $r179.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("setCaseSensitive(");

        $z4 = r1.<groovyjarjarantlr.LexerGrammar: boolean caseSensitive>;

        $r47 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>($z4);

        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(");");

        $r49 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r49);

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("literals = new Hashtable();");

        $r50 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r51 = $r50.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $r52 = interfaceinvoke $r51.<groovyjarjarantlr.TokenManager: java.util.Enumeration getTokenSymbolKeys()>();

     label17:
        $z11 = interfaceinvoke $r52.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z11 == 0 goto label19;

        $r76 = interfaceinvoke $r52.<java.util.Enumeration: java.lang.Object nextElement()>();

        r163 = (java.lang.String) $r76;

        $c10 = virtualinvoke r163.<java.lang.String: char charAt(int)>(0);

        $i31 = (int) $c10;

        if $i31 == 34 goto label18;

        goto label17;

     label18:
        $r77 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r78 = $r77.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $r79 = interfaceinvoke $r78.<groovyjarjarantlr.TokenManager: groovyjarjarantlr.TokenSymbol getTokenSymbol(java.lang.String)>(r163);

        $z9 = $r79 instanceof groovyjarjarantlr.StringLiteralSymbol;

        if $z9 == 0 goto label17;

        r164 = (groovyjarjarantlr.StringLiteralSymbol) $r79;

        $r180 = new java.lang.StringBuffer;

        specialinvoke $r180.<java.lang.StringBuffer: void <init>()>();

        $r81 = virtualinvoke $r180.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("literals.put(new ANTLRHashString(");

        $r82 = virtualinvoke r164.<groovyjarjarantlr.StringLiteralSymbol: java.lang.String getId()>();

        $r83 = virtualinvoke $r81.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r82);

        $r84 = virtualinvoke $r83.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", this), new Integer(");

        $i11 = virtualinvoke r164.<groovyjarjarantlr.StringLiteralSymbol: int getTokenType()>();

        $r85 = virtualinvoke $r84.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i11);

        $r86 = virtualinvoke $r85.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("));");

        $r87 = virtualinvoke $r86.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r87);

        goto label17;

     label19:
        $i6 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i7 = $i6 - 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i7;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("}");

        $r53 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z5 = $r53.<groovyjarjarantlr.Grammar: boolean debuggingOutput>;

        if $z5 == 0 goto label22;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("private static final String _ruleNames[] = {");

        $r65 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r66 = $r65.<groovyjarjarantlr.Grammar: groovyjarjarantlr.collections.impl.Vector rules>;

        $r67 = virtualinvoke $r66.<groovyjarjarantlr.collections.impl.Vector: java.util.Enumeration elements()>();

     label20:
        $z12 = interfaceinvoke $r67.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z12 == 0 goto label21;

        $r68 = interfaceinvoke $r67.<java.util.Enumeration: java.lang.Object nextElement()>();

        r165 = (groovyjarjarantlr.GrammarSymbol) $r68;

        $z8 = r165 instanceof groovyjarjarantlr.RuleSymbol;

        if $z8 == 0 goto label20;

        $r181 = new java.lang.StringBuffer;

        specialinvoke $r181.<java.lang.StringBuffer: void <init>()>();

        $r70 = virtualinvoke $r181.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  \"");

        $r71 = (groovyjarjarantlr.RuleSymbol) r165;

        $r72 = virtualinvoke $r71.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        $r73 = virtualinvoke $r70.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r72);

        $r74 = virtualinvoke $r73.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\",");

        $r75 = virtualinvoke $r74.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r75);

        goto label20;

     label21:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("};");

     label22:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genNextToken()>();

        $r54 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r55 = $r54.<groovyjarjarantlr.Grammar: groovyjarjarantlr.collections.impl.Vector rules>;

        $r56 = virtualinvoke $r55.<groovyjarjarantlr.collections.impl.Vector: java.util.Enumeration elements()>();

        i24 = 0;

     label23:
        $z13 = interfaceinvoke $r56.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z13 == 0 goto label25;

        $r63 = interfaceinvoke $r56.<java.util.Enumeration: java.lang.Object nextElement()>();

        r166 = (groovyjarjarantlr.RuleSymbol) $r63;

        $r64 = virtualinvoke r166.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        $z7 = virtualinvoke $r64.<java.lang.String: boolean equals(java.lang.Object)>("mnextToken");

        if $z7 != 0 goto label24;

        $i9 = i24;

        i24 = i24 + 1;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genRule(groovyjarjarantlr.RuleSymbol,boolean,int)>(r166, 0, $i9);

     label24:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void exitIfError()>();

        goto label23;

     label25:
        $r57 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z6 = $r57.<groovyjarjarantlr.Grammar: boolean debuggingOutput>;

        if $z6 == 0 goto label26;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genSemPredMap()>();

     label26:
        $r61 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.collections.impl.Vector bitsetsUsed>;

        $r58 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r59 = (groovyjarjarantlr.LexerGrammar) $r58;

        $r60 = $r59.<groovyjarjarantlr.LexerGrammar: groovyjarjarantlr.collections.impl.BitSet charVocabulary>;

        $i8 = virtualinvoke $r60.<groovyjarjarantlr.collections.impl.BitSet: int size()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genBitsets(groovyjarjarantlr.collections.impl.Vector,int)>($r61, $i8);

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("}");

        $r62 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager getPrintWriterManager()>();

        interfaceinvoke $r62.<groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager: void finishOutput()>();

     label27:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        goto label30;

     label28:
        $r102 := @caughtexception;

     label29:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        throw $r102;

     label30:
        return;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label01 to label27 with label28;
        catch java.lang.Throwable from label28 to label29 with label28;
    }

    public void gen(groovyjarjarantlr.OneOrMoreBlock)
    {
        groovyjarjarantlr.Lookahead[] $r23, $r40;
        groovyjarjarantlr.LLkGrammarAnalyzer $r21;
        groovyjarjarantlr.JavaBlockFinishingInfo $r57;
        groovyjarjarantlr.OneOrMoreBlock r1;
        java.lang.Throwable $r54;
        java.lang.StringBuffer $r4, $r5, $r7, $r8, $r9, $r13, $r14, $r16, $r17, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r36, $r37, $r45, $r47, $r50, $r51, $r52, $r59, $r60, $r61, $r62, $r63, $r65, $r66, $r69, $r70, $r72, $r73, $r74, $r75, $r76, $r77, $r78, $r79, $r80, $r81;
        java.lang.String $r2, $r10, $r11, $r18, $r19, $r24, $r33, $r38, $r42, $r43, $r46, $r53, r55, r56, $r64, $r67, $r71;
        groovyjarjarantlr.JavaCodeGenerator r0;
        groovyjarjarantlr.Grammar $r20, $r22, $r39;
        boolean $z0, $z1, $z2, $z3, z4, $z5;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, $i12, $i13, $i14, $i16, $i18, $i20;
        java.io.PrintStream $r35, $r49;
        groovyjarjarantlr.Lookahead $r41;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.OneOrMoreBlock;

        i0 = r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine>;

     label01:
        $i1 = virtualinvoke r1.<groovyjarjarantlr.OneOrMoreBlock: int getLine()>();

        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = $i1;

        $z0 = r0.<groovyjarjarantlr.JavaCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z0 == 0 goto label02;

        $r49 = <java.lang.System: java.io.PrintStream out>;

        $r72 = new java.lang.StringBuffer;

        specialinvoke $r72.<java.lang.StringBuffer: void <init>()>();

        $r50 = virtualinvoke $r72.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("gen+(");

        $r51 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r52 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r53 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r49.<java.io.PrintStream: void println(java.lang.String)>($r53);

     label02:
        $i16 = (int) -999;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String,int)>("{", $i16);

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genBlockPreamble(groovyjarjarantlr.AlternativeBlock)>(r1);

        $r2 = virtualinvoke r1.<groovyjarjarantlr.OneOrMoreBlock: java.lang.String getLabel()>();

        if $r2 == null goto label03;

        $r73 = new java.lang.StringBuffer;

        specialinvoke $r73.<java.lang.StringBuffer: void <init>()>();

        $r45 = virtualinvoke $r73.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_cnt_");

        $r46 = virtualinvoke r1.<groovyjarjarantlr.OneOrMoreBlock: java.lang.String getLabel()>();

        $r47 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r46);

        r55 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label04;

     label03:
        $r74 = new java.lang.StringBuffer;

        specialinvoke $r74.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r74.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_cnt");

        $i2 = r1.<groovyjarjarantlr.OneOrMoreBlock: int ID>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        r55 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

     label04:
        $r75 = new java.lang.StringBuffer;

        specialinvoke $r75.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r75.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("int ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r55);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=0;");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r10);

        $r11 = virtualinvoke r1.<groovyjarjarantlr.OneOrMoreBlock: java.lang.String getLabel()>();

        if $r11 == null goto label05;

        r56 = virtualinvoke r1.<groovyjarjarantlr.OneOrMoreBlock: java.lang.String getLabel()>();

        goto label06;

     label05:
        $r76 = new java.lang.StringBuffer;

        specialinvoke $r76.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r76.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_loop");

        $i3 = r1.<groovyjarjarantlr.OneOrMoreBlock: int ID>;

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

        r56 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

     label06:
        $r77 = new java.lang.StringBuffer;

        specialinvoke $r77.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r77.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r56);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r18);

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("do {");

        $i4 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i5 = $i4 + 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i5;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genBlockInitAction(groovyjarjarantlr.AlternativeBlock)>(r1);

        $r43 = r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String currentASTResult>;

        $r19 = virtualinvoke r1.<groovyjarjarantlr.OneOrMoreBlock: java.lang.String getLabel()>();

        if $r19 == null goto label07;

        $r42 = virtualinvoke r1.<groovyjarjarantlr.OneOrMoreBlock: java.lang.String getLabel()>();

        r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String currentASTResult> = $r42;

     label07:
        $r20 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r21 = $r20.<groovyjarjarantlr.Grammar: groovyjarjarantlr.LLkGrammarAnalyzer theLLkAnalyzer>;

        interfaceinvoke $r21.<groovyjarjarantlr.LLkGrammarAnalyzer: boolean deterministic(groovyjarjarantlr.OneOrMoreBlock)>(r1);

        z4 = 0;

        $r22 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        i11 = $r22.<groovyjarjarantlr.Grammar: int maxk>;

        $z1 = r1.<groovyjarjarantlr.OneOrMoreBlock: boolean greedy>;

        if $z1 != 0 goto label08;

        $i9 = r1.<groovyjarjarantlr.OneOrMoreBlock: int exitLookaheadDepth>;

        $r39 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $i8 = $r39.<groovyjarjarantlr.Grammar: int maxk>;

        if $i9 > $i8 goto label08;

        $r40 = r1.<groovyjarjarantlr.OneOrMoreBlock: groovyjarjarantlr.Lookahead[] exitCache>;

        $i10 = r1.<groovyjarjarantlr.OneOrMoreBlock: int exitLookaheadDepth>;

        $r41 = $r40[$i10];

        $z3 = virtualinvoke $r41.<groovyjarjarantlr.Lookahead: boolean containsEpsilon()>();

        if $z3 == 0 goto label08;

        z4 = 1;

        i11 = r1.<groovyjarjarantlr.OneOrMoreBlock: int exitLookaheadDepth>;

        goto label09;

     label08:
        $z5 = r1.<groovyjarjarantlr.OneOrMoreBlock: boolean greedy>;

        if $z5 != 0 goto label09;

        $i7 = r1.<groovyjarjarantlr.OneOrMoreBlock: int exitLookaheadDepth>;

        if $i7 != 2147483647 goto label09;

        z4 = 1;

     label09:
        if z4 == 0 goto label11;

        $z2 = r0.<groovyjarjarantlr.JavaCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z2 == 0 goto label10;

        $r35 = <java.lang.System: java.io.PrintStream out>;

        $r78 = new java.lang.StringBuffer;

        specialinvoke $r78.<java.lang.StringBuffer: void <init>()>();

        $r36 = virtualinvoke $r78.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("nongreedy (...)+ loop; exit depth is ");

        $i6 = r1.<groovyjarjarantlr.OneOrMoreBlock: int exitLookaheadDepth>;

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i6);

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r35.<java.io.PrintStream: void println(java.lang.String)>($r38);

     label10:
        $r23 = r1.<groovyjarjarantlr.OneOrMoreBlock: groovyjarjarantlr.Lookahead[] exitCache>;

        $r24 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String getLookaheadTestExpression(groovyjarjarantlr.Lookahead[],int)>($r23, i11);

        $i18 = (int) -999;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String,int)>("// nongreedy exit test", $i18);

        $r79 = new java.lang.StringBuffer;

        specialinvoke $r79.<java.lang.StringBuffer: void <init>()>();

        $r26 = virtualinvoke $r79.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("if ( ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r55);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(">=1 && ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r24);

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") break ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r56);

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.String toString()>();

        $i20 = (int) -888;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String,int)>($r33, $i20);

     label11:
        $r57 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.JavaBlockFinishingInfo genCommonBlock(groovyjarjarantlr.AlternativeBlock,boolean)>(r1, 0);

        $r80 = new java.lang.StringBuffer;

        specialinvoke $r80.<java.lang.StringBuffer: void <init>()>();

        $r59 = virtualinvoke $r80.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("if ( ");

        $r60 = virtualinvoke $r59.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r55);

        $r61 = virtualinvoke $r60.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(">=1 ) { break ");

        $r62 = virtualinvoke $r61.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r56);

        $r63 = virtualinvoke $r62.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("; } else {");

        $r64 = r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String throwNoViable>;

        $r65 = virtualinvoke $r63.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r64);

        $r66 = virtualinvoke $r65.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("}");

        $r67 = virtualinvoke $r66.<java.lang.StringBuffer: java.lang.String toString()>();

        $i12 = virtualinvoke r1.<groovyjarjarantlr.OneOrMoreBlock: int getLine()>();

        specialinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genBlockFinish(groovyjarjarantlr.JavaBlockFinishingInfo,java.lang.String,int)>($r57, $r67, $i12);

        $r81 = new java.lang.StringBuffer;

        specialinvoke $r81.<java.lang.StringBuffer: void <init>()>();

        $r69 = virtualinvoke $r81.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r55);

        $r70 = virtualinvoke $r69.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("++;");

        $r71 = virtualinvoke $r70.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r71);

        $i13 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i14 = $i13 - 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i14;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("} while (true);");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("}");

        r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String currentASTResult> = $r43;

     label12:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        goto label15;

     label13:
        $r54 := @caughtexception;

     label14:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        throw $r54;

     label15:
        return;

        catch java.lang.Throwable from label01 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public void gen(groovyjarjarantlr.ParserGrammar) throws java.io.IOException
    {
        java.util.Enumeration $r102, $r114;
        java.lang.StringBuffer $r12, $r15, $r16, $r24, $r27, $r43, $r46, $r47, $r52, $r55, $r56, $r59, $r61, $r62, $r65, $r68, $r69, $r74, $r77, $r78, $r81, $r83, $r84, $r87, $r90, $r91, $r94, $r96, $r97, $r117, $r120, $r121, $r126, $r127, $r142, $r143, $r146, $r149, $r150, $r151, $r154, $r158, $r160, $r170, $r171, $r172, $r173, $r174, $r175, $r176, $r177, $r178, $r179, $r180, $r181, $r182, $r183, $r184;
        groovyjarjarantlr.DefineGrammarSymbols $r8, $r9;
        groovyjarjarantlr.Grammar $r2, $r4, $r7, $r13, $r18, $r21, $r25, $r28, $r30, $r33, $r36, $r40, $r44, $r49, $r50, $r53, $r60, $r66, $r71, $r72, $r75, $r82, $r88, $r95, $r99, $r100, $r103, $r104, $r107, $r112, $r131, $r134, $r147, $r155, $r162, $r166;
        groovyjarjarantlr.Token $r19, $r34, $r37, $r41, $r133, $r165;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i12, $i14, $i16;
        groovyjarjarantlr.ParserGrammar r1;
        java.lang.Object $r32, $r109, $r115, $r164;
        groovyjarjarantlr.TokenManager $r105, $r156;
        groovyjarjarantlr.collections.impl.Vector $r101, $r106, $r111, $r113, $r169;
        java.io.PrintWriter $r6;
        groovyjarjarantlr.RuleBlock $r38;
        groovyjarjarantlr.GrammarSymbol r167, r168;
        java.lang.Throwable $r137, $r138;
        groovyjarjarantlr.Tool $r5, $r135;
        java.lang.String $r10, $r14, $r17, $r20, $r22, $r26, $r29, $r35, $r39, $r45, $r48, $r54, $r57, $r63, $r67, $r70, $r76, $r79, $r85, $r89, $r92, $r98, $r119, $r122, $r123, $r124, $r128, $r129, $r130, $r132, r139, r140, $r144, $r148, $r152, $r157, $r159, $r161;
        groovyjarjarantlr.JavaCodeGenerator r0;
        groovyjarjarantlr.RuleSymbol r110, $r118;
        groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager $r3, $r108;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16;
        java.util.Hashtable $r31, $r163;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.ParserGrammar;

        i0 = r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine>;

     label01:
        $i12 = (int) -999;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = $i12;

        $z0 = r1.<groovyjarjarantlr.ParserGrammar: boolean debuggingOutput>;

        if $z0 == 0 goto label02;

        $r169 = new groovyjarjarantlr.collections.impl.Vector;

        specialinvoke $r169.<groovyjarjarantlr.collections.impl.Vector: void <init>()>();

        r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.collections.impl.Vector semPreds> = $r169;

     label02:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void setGrammar(groovyjarjarantlr.Grammar)>(r1);

        $r2 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z1 = $r2 instanceof groovyjarjarantlr.ParserGrammar;

        if $z1 != 0 goto label03;

        $r135 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        virtualinvoke $r135.<groovyjarjarantlr.Tool: void panic(java.lang.String)>("Internal error generating parser");

     label03:
        $r3 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager getPrintWriterManager()>();

        $r5 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r4 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r6 = interfaceinvoke $r3.<groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager: java.io.PrintWriter setupOutput(groovyjarjarantlr.Tool,groovyjarjarantlr.Grammar)>($r5, $r4);

        r0.<groovyjarjarantlr.JavaCodeGenerator: java.io.PrintWriter currentOutput> = $r6;

        $r7 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z2 = $r7.<groovyjarjarantlr.Grammar: boolean buildAST>;

        r0.<groovyjarjarantlr.JavaCodeGenerator: boolean genAST> = $z2;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = 0;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genHeader()>();

     label04:
        $r8 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.DefineGrammarSymbols behavior>;

        $i1 = virtualinvoke $r8.<groovyjarjarantlr.DefineGrammarSymbols: int getHeaderActionLine(java.lang.String)>("");

        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = $i1;

        $r9 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.DefineGrammarSymbols behavior>;

        $r10 = virtualinvoke $r9.<groovyjarjarantlr.DefineGrammarSymbols: java.lang.String getHeaderAction(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r10);

     label05:
        $i14 = (int) -999;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = $i14;

        goto label08;

     label06:
        $r138 := @caughtexception;

     label07:
        $i16 = (int) -999;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = $i16;

        throw $r138;

     label08:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("import antlr.TokenBuffer;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("import antlr.TokenStreamException;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("import antlr.TokenStreamIOException;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("import antlr.ANTLRException;");

        $r170 = new java.lang.StringBuffer;

        specialinvoke $r170.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r170.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("import antlr.");

        $r13 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r14 = virtualinvoke $r13.<groovyjarjarantlr.Grammar: java.lang.String getSuperClass()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r17);

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("import antlr.Token;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("import antlr.TokenStream;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("import antlr.RecognitionException;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("import antlr.NoViableAltException;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("import antlr.MismatchedTokenException;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("import antlr.SemanticException;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("import antlr.ParserSharedInputState;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("import antlr.collections.impl.BitSet;");

        $z3 = r0.<groovyjarjarantlr.JavaCodeGenerator: boolean genAST>;

        if $z3 == 0 goto label09;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("import antlr.collections.AST;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("import java.util.Hashtable;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("import antlr.ASTFactory;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("import antlr.ASTPair;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("import antlr.collections.impl.ASTArray;");

     label09:
        $r18 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r19 = $r18.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Token preambleAction>;

        $r20 = virtualinvoke $r19.<groovyjarjarantlr.Token: java.lang.String getText()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r20);

        $r21 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r22 = $r21.<groovyjarjarantlr.Grammar: java.lang.String superClass>;

        if $r22 == null goto label10;

        $r134 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        r139 = $r134.<groovyjarjarantlr.Grammar: java.lang.String superClass>;

        goto label11;

     label10:
        $r171 = new java.lang.StringBuffer;

        specialinvoke $r171.<java.lang.StringBuffer: void <init>()>();

        $r24 = virtualinvoke $r171.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("antlr.");

        $r25 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r26 = virtualinvoke $r25.<groovyjarjarantlr.Grammar: java.lang.String getSuperClass()>();

        $r27 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r26);

        r139 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

     label11:
        $r28 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r29 = $r28.<groovyjarjarantlr.Grammar: java.lang.String comment>;

        if $r29 == null goto label12;

        $r131 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r132 = $r131.<groovyjarjarantlr.Grammar: java.lang.String comment>;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void _println(java.lang.String)>($r132);

     label12:
        r140 = "public";

        $r30 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r31 = $r30.<groovyjarjarantlr.Grammar: java.util.Hashtable options>;

        $r32 = virtualinvoke $r31.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("classHeaderPrefix");

        $r133 = (groovyjarjarantlr.Token) $r32;

        if $r133 == null goto label13;

        $r129 = virtualinvoke $r133.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r130 = staticinvoke <groovyjarjarantlr.StringUtils: java.lang.String stripFrontBack(java.lang.String,java.lang.String,java.lang.String)>($r129, "\"", "\"");

        if $r130 == null goto label13;

        r140 = $r130;

     label13:
        $r172 = new java.lang.StringBuffer;

        specialinvoke $r172.<java.lang.StringBuffer: void <init>()>();

        $r142 = virtualinvoke $r172.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r140);

        $r143 = virtualinvoke $r142.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r144 = virtualinvoke $r143.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void print(java.lang.String)>($r144);

        $r173 = new java.lang.StringBuffer;

        specialinvoke $r173.<java.lang.StringBuffer: void <init>()>();

        $r146 = virtualinvoke $r173.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("class ");

        $r147 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r148 = virtualinvoke $r147.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r149 = virtualinvoke $r146.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r148);

        $r150 = virtualinvoke $r149.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" extends ");

        $r151 = virtualinvoke $r150.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r139);

        $r152 = virtualinvoke $r151.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void print(java.lang.String)>($r152);

        $r174 = new java.lang.StringBuffer;

        specialinvoke $r174.<java.lang.StringBuffer: void <init>()>();

        $r154 = virtualinvoke $r174.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("       implements ");

        $r155 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r156 = $r155.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $r157 = interfaceinvoke $r156.<groovyjarjarantlr.TokenManager: java.lang.String getName()>();

        $r158 = virtualinvoke $r154.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r157);

        $r159 = <groovyjarjarantlr.JavaCodeGenerator: java.lang.String TokenTypesFileSuffix>;

        $r160 = virtualinvoke $r158.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r159);

        $r161 = virtualinvoke $r160.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r161);

        $r162 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r163 = $r162.<groovyjarjarantlr.Grammar: java.util.Hashtable options>;

        $r164 = virtualinvoke $r163.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("classHeaderSuffix");

        $r165 = (groovyjarjarantlr.Token) $r164;

        if $r165 == null goto label14;

        $r123 = virtualinvoke $r165.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r124 = staticinvoke <groovyjarjarantlr.StringUtils: java.lang.String stripFrontBack(java.lang.String,java.lang.String,java.lang.String)>($r123, "\"", "\"");

        if $r124 == null goto label14;

        $r175 = new java.lang.StringBuffer;

        specialinvoke $r175.<java.lang.StringBuffer: void <init>()>();

        $r126 = virtualinvoke $r175.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r127 = virtualinvoke $r126.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r124);

        $r128 = virtualinvoke $r127.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void print(java.lang.String)>($r128);

     label14:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>(" {");

        $r166 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z13 = $r166.<groovyjarjarantlr.Grammar: boolean debuggingOutput>;

        if $z13 == 0 goto label17;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("private static final String _ruleNames[] = {");

        $r112 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r113 = $r112.<groovyjarjarantlr.Grammar: groovyjarjarantlr.collections.impl.Vector rules>;

        $r114 = virtualinvoke $r113.<groovyjarjarantlr.collections.impl.Vector: java.util.Enumeration elements()>();

     label15:
        $z14 = interfaceinvoke $r114.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z14 == 0 goto label16;

        $r115 = interfaceinvoke $r114.<java.util.Enumeration: java.lang.Object nextElement()>();

        r167 = (groovyjarjarantlr.GrammarSymbol) $r115;

        $z12 = r167 instanceof groovyjarjarantlr.RuleSymbol;

        if $z12 == 0 goto label15;

        $r176 = new java.lang.StringBuffer;

        specialinvoke $r176.<java.lang.StringBuffer: void <init>()>();

        $r117 = virtualinvoke $r176.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  \"");

        $r118 = (groovyjarjarantlr.RuleSymbol) r167;

        $r119 = virtualinvoke $r118.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        $r120 = virtualinvoke $r117.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r119);

        $r121 = virtualinvoke $r120.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\",");

        $r122 = virtualinvoke $r121.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r122);

        goto label15;

     label16:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("};");

     label17:
        $r33 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r34 = $r33.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Token classMemberAction>;

        $r35 = virtualinvoke $r34.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r36 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r37 = $r36.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Token classMemberAction>;

        $i2 = virtualinvoke $r37.<groovyjarjarantlr.Token: int getLine()>();

        $r38 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        $r39 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String processActionForSpecialSymbols(java.lang.String,int,groovyjarjarantlr.RuleBlock,groovyjarjarantlr.ActionTransInfo)>($r35, $i2, $r38, null);

        $r40 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r41 = $r40.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Token classMemberAction>;

        $i3 = virtualinvoke $r41.<groovyjarjarantlr.Token: int getLine()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void print(java.lang.String,int)>($r39, $i3);

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("");

        $r177 = new java.lang.StringBuffer;

        specialinvoke $r177.<java.lang.StringBuffer: void <init>()>();

        $r43 = virtualinvoke $r177.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("protected ");

        $r44 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r45 = virtualinvoke $r44.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r46 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r45);

        $r47 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(TokenBuffer tokenBuf, int k) {");

        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r48);

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("  super(tokenBuf,k);");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("  tokenNames = _tokenNames;");

        $r49 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z4 = $r49.<groovyjarjarantlr.Grammar: boolean debuggingOutput>;

        if $z4 == 0 goto label18;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("  ruleNames  = _ruleNames;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("  semPredNames = _semPredNames;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("  setupDebugging(tokenBuf);");

     label18:
        $r50 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z5 = $r50.<groovyjarjarantlr.Grammar: boolean buildAST>;

        if $z5 == 0 goto label19;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("  buildTokenTypeASTClassMap();");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("  astFactory = new ASTFactory(getTokenTypeToASTClassMap());");

     label19:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("}");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("");

        $r178 = new java.lang.StringBuffer;

        specialinvoke $r178.<java.lang.StringBuffer: void <init>()>();

        $r52 = virtualinvoke $r178.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("public ");

        $r53 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r54 = virtualinvoke $r53.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r55 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r54);

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(TokenBuffer tokenBuf) {");

        $r57 = virtualinvoke $r56.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r57);

        $r179 = new java.lang.StringBuffer;

        specialinvoke $r179.<java.lang.StringBuffer: void <init>()>();

        $r59 = virtualinvoke $r179.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  this(tokenBuf,");

        $r60 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $i4 = $r60.<groovyjarjarantlr.Grammar: int maxk>;

        $r61 = virtualinvoke $r59.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i4);

        $r62 = virtualinvoke $r61.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(");");

        $r63 = virtualinvoke $r62.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r63);

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("}");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("");

        $r180 = new java.lang.StringBuffer;

        specialinvoke $r180.<java.lang.StringBuffer: void <init>()>();

        $r65 = virtualinvoke $r180.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("protected ");

        $r66 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r67 = virtualinvoke $r66.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r68 = virtualinvoke $r65.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r67);

        $r69 = virtualinvoke $r68.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(TokenStream lexer, int k) {");

        $r70 = virtualinvoke $r69.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r70);

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("  super(lexer,k);");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("  tokenNames = _tokenNames;");

        $r71 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z6 = $r71.<groovyjarjarantlr.Grammar: boolean debuggingOutput>;

        if $z6 == 0 goto label20;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("  ruleNames  = _ruleNames;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("  semPredNames = _semPredNames;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("  setupDebugging(lexer);");

     label20:
        $r72 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z7 = $r72.<groovyjarjarantlr.Grammar: boolean buildAST>;

        if $z7 == 0 goto label21;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("  buildTokenTypeASTClassMap();");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("  astFactory = new ASTFactory(getTokenTypeToASTClassMap());");

     label21:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("}");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("");

        $r181 = new java.lang.StringBuffer;

        specialinvoke $r181.<java.lang.StringBuffer: void <init>()>();

        $r74 = virtualinvoke $r181.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("public ");

        $r75 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r76 = virtualinvoke $r75.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r77 = virtualinvoke $r74.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r76);

        $r78 = virtualinvoke $r77.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(TokenStream lexer) {");

        $r79 = virtualinvoke $r78.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r79);

        $r182 = new java.lang.StringBuffer;

        specialinvoke $r182.<java.lang.StringBuffer: void <init>()>();

        $r81 = virtualinvoke $r182.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  this(lexer,");

        $r82 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $i5 = $r82.<groovyjarjarantlr.Grammar: int maxk>;

        $r83 = virtualinvoke $r81.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i5);

        $r84 = virtualinvoke $r83.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(");");

        $r85 = virtualinvoke $r84.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r85);

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("}");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("");

        $r183 = new java.lang.StringBuffer;

        specialinvoke $r183.<java.lang.StringBuffer: void <init>()>();

        $r87 = virtualinvoke $r183.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("public ");

        $r88 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r89 = virtualinvoke $r88.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r90 = virtualinvoke $r87.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r89);

        $r91 = virtualinvoke $r90.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(ParserSharedInputState state) {");

        $r92 = virtualinvoke $r91.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r92);

        $r184 = new java.lang.StringBuffer;

        specialinvoke $r184.<java.lang.StringBuffer: void <init>()>();

        $r94 = virtualinvoke $r184.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  super(state,");

        $r95 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $i6 = $r95.<groovyjarjarantlr.Grammar: int maxk>;

        $r96 = virtualinvoke $r94.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i6);

        $r97 = virtualinvoke $r96.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(");");

        $r98 = virtualinvoke $r97.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r98);

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("  tokenNames = _tokenNames;");

        $r99 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z8 = $r99.<groovyjarjarantlr.Grammar: boolean buildAST>;

        if $z8 == 0 goto label22;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("  buildTokenTypeASTClassMap();");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("  astFactory = new ASTFactory(getTokenTypeToASTClassMap());");

     label22:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("}");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("");

        $r100 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r101 = $r100.<groovyjarjarantlr.Grammar: groovyjarjarantlr.collections.impl.Vector rules>;

        $r102 = virtualinvoke $r101.<groovyjarjarantlr.collections.impl.Vector: java.util.Enumeration elements()>();

        i10 = 0;

     label23:
        $z15 = interfaceinvoke $r102.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z15 == 0 goto label27;

        $r109 = interfaceinvoke $r102.<java.util.Enumeration: java.lang.Object nextElement()>();

        r168 = (groovyjarjarantlr.GrammarSymbol) $r109;

        $z11 = r168 instanceof groovyjarjarantlr.RuleSymbol;

        if $z11 == 0 goto label26;

        r110 = (groovyjarjarantlr.RuleSymbol) r168;

        $r111 = r110.<groovyjarjarantlr.RuleSymbol: groovyjarjarantlr.collections.impl.Vector references>;

        $i8 = virtualinvoke $r111.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if $i8 != 0 goto label24;

        $z16 = 1;

        goto label25;

     label24:
        $z16 = 0;

     label25:
        $i9 = i10;

        i10 = i10 + 1;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genRule(groovyjarjarantlr.RuleSymbol,boolean,int)>(r110, $z16, $i9);

     label26:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void exitIfError()>();

        goto label23;

     label27:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genTokenStrings()>();

        $r103 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z9 = $r103.<groovyjarjarantlr.Grammar: boolean buildAST>;

        if $z9 == 0 goto label28;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genTokenASTNodeMap()>();

     label28:
        $r106 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.collections.impl.Vector bitsetsUsed>;

        $r104 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r105 = $r104.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $i7 = interfaceinvoke $r105.<groovyjarjarantlr.TokenManager: int maxTokenType()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genBitsets(groovyjarjarantlr.collections.impl.Vector,int)>($r106, $i7);

        $r107 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z10 = $r107.<groovyjarjarantlr.Grammar: boolean debuggingOutput>;

        if $z10 == 0 goto label29;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genSemPredMap()>();

     label29:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("}");

        $r108 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager getPrintWriterManager()>();

        interfaceinvoke $r108.<groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager: void finishOutput()>();

     label30:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        goto label33;

     label31:
        $r137 := @caughtexception;

     label32:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        throw $r137;

     label33:
        return;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label01 to label30 with label31;
        catch java.lang.Throwable from label31 to label32 with label31;
    }

    public void gen(groovyjarjarantlr.RuleRefElement)
    {
        java.lang.StringBuffer $r5, $r7, $r9, $r10, $r19, $r21, $r22, $r26, $r28, $r29, $r31, $r32, $r38, $r40, $r42, $r43, $r49, $r51, $r52, $r54, $r56, $r58, $r59, $r64, $r66, $r67, $r69, $r70, $r72, $r74, $r76, $r77, $r81, $r83, $r84, $r85;
        groovyjarjarantlr.Grammar $r3, $r12, $r14, $r15, $r16, $r17, $r34, $r45, $r61, $r79, $r89, $r91, $r92;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        java.io.PrintStream $r82;
        groovyjarjarantlr.RuleBlock $r36, $r47;
        groovyjarjarantlr.GrammarSymbol $r4;
        java.lang.Throwable $r88;
        groovyjarjarantlr.Tool $r6, $r24, $r39, $r55, $r73;
        java.lang.String $r2, $r8, $r11, $r13, $r18, $r20, $r23, $r25, $r27, $r30, $r33, $r35, $r37, $r41, $r44, $r46, $r48, $r50, $r53, $r57, $r60, $r62, $r63, $r65, $r68, $r71, $r75, $r78, $r80, $r86, $r90;
        groovyjarjarantlr.JavaCodeGenerator r0;
        groovyjarjarantlr.RuleSymbol $r87;
        groovyjarjarantlr.RuleRefElement r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z15, $z16, $z17, $z18;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.RuleRefElement;

        i0 = r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine>;

     label01:
        $i1 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: int getLine()>();

        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = $i1;

        $z0 = r0.<groovyjarjarantlr.JavaCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z0 == 0 goto label02;

        $r82 = <java.lang.System: java.io.PrintStream out>;

        $r81 = new java.lang.StringBuffer;

        specialinvoke $r81.<java.lang.StringBuffer: void <init>()>();

        $r83 = virtualinvoke $r81.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("genRR(");

        $r84 = virtualinvoke $r83.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r85 = virtualinvoke $r84.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r86 = virtualinvoke $r85.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r82.<java.io.PrintStream: void println(java.lang.String)>($r86);

     label02:
        $r3 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r2 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r4 = virtualinvoke $r3.<groovyjarjarantlr.Grammar: groovyjarjarantlr.GrammarSymbol getSymbol(java.lang.String)>($r2);

        $r87 = (groovyjarjarantlr.RuleSymbol) $r4;

        if $r87 == null goto label03;

        $z1 = virtualinvoke $r87.<groovyjarjarantlr.RuleSymbol: boolean isDefined()>();

        if $z1 != 0 goto label05;

     label03:
        $r6 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Rule \'");

        $r8 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' is not defined");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        $r12 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r13 = virtualinvoke $r12.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i2 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: int getLine()>();

        $i3 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: int getColumn()>();

        virtualinvoke $r6.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>($r11, $r13, $i2, $i3);

     label04:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        return;

     label05:
        $z2 = $r87 instanceof groovyjarjarantlr.RuleSymbol;

        if $z2 != 0 goto label07;

        $r73 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r72 = new java.lang.StringBuffer;

        specialinvoke $r72.<java.lang.StringBuffer: void <init>()>();

        $r74 = virtualinvoke $r72.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r75 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r76 = virtualinvoke $r74.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r75);

        $r77 = virtualinvoke $r76.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' does not name a grammar rule");

        $r78 = virtualinvoke $r77.<java.lang.StringBuffer: java.lang.String toString()>();

        $r79 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r80 = virtualinvoke $r79.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i14 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: int getLine()>();

        $i15 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: int getColumn()>();

        virtualinvoke $r73.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>($r78, $r80, $i14, $i15);

     label06:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        return;

     label07:
        specialinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genErrorTryForElement(groovyjarjarantlr.AlternativeElement)>(r1);

        $r14 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z3 = $r14 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z3 == 0 goto label08;

        $r63 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: java.lang.String getLabel()>();

        if $r63 == null goto label08;

        $i13 = r0.<groovyjarjarantlr.JavaCodeGenerator: int syntacticPredLevel>;

        if $i13 != 0 goto label08;

        $r64 = new java.lang.StringBuffer;

        specialinvoke $r64.<java.lang.StringBuffer: void <init>()>();

        $r65 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: java.lang.String getLabel()>();

        $r66 = virtualinvoke $r64.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r65);

        $r67 = virtualinvoke $r66.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = _t==ASTNULL ? null : ");

        $r68 = r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String lt1Value>;

        $r69 = virtualinvoke $r67.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r68);

        $r70 = virtualinvoke $r69.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r71 = virtualinvoke $r70.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r71);

     label08:
        $r89 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z12 = $r89 instanceof groovyjarjarantlr.LexerGrammar;

        if $z12 == 0 goto label10;

        $z11 = r0.<groovyjarjarantlr.JavaCodeGenerator: boolean saveText>;

        if $z11 == 0 goto label09;

        $i12 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: int getAutoGenType()>();

        if $i12 != 3 goto label10;

     label09:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("_saveIndex=text.length();");

     label10:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void printTabs()>();

        $r90 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String idAssign>;

        if $r90 == null goto label12;

        $r47 = $r87.<groovyjarjarantlr.RuleSymbol: groovyjarjarantlr.RuleBlock block>;

        $r48 = $r47.<groovyjarjarantlr.RuleBlock: java.lang.String returnAction>;

        if $r48 != null goto label11;

        $r55 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r54 = new java.lang.StringBuffer;

        specialinvoke $r54.<java.lang.StringBuffer: void <init>()>();

        $r56 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Rule \'");

        $r57 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r58 = virtualinvoke $r56.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r57);

        $r59 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' has no return type");

        $r60 = virtualinvoke $r59.<java.lang.StringBuffer: java.lang.String toString()>();

        $r61 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r62 = virtualinvoke $r61.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i10 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: int getLine()>();

        $i11 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: int getColumn()>();

        virtualinvoke $r55.<groovyjarjarantlr.Tool: void warning(java.lang.String,java.lang.String,int,int)>($r60, $r62, $i10, $i11);

     label11:
        $r49 = new java.lang.StringBuffer;

        specialinvoke $r49.<java.lang.StringBuffer: void <init>()>();

        $r50 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String idAssign>;

        $r51 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r50);

        $r52 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=");

        $r53 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void _print(java.lang.String)>($r53);

        goto label13;

     label12:
        $r15 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z4 = $r15 instanceof groovyjarjarantlr.LexerGrammar;

        if $z4 != 0 goto label13;

        $i7 = r0.<groovyjarjarantlr.JavaCodeGenerator: int syntacticPredLevel>;

        if $i7 != 0 goto label13;

        $r36 = $r87.<groovyjarjarantlr.RuleSymbol: groovyjarjarantlr.RuleBlock block>;

        $r37 = $r36.<groovyjarjarantlr.RuleBlock: java.lang.String returnAction>;

        if $r37 == null goto label13;

        $r39 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r38 = new java.lang.StringBuffer;

        specialinvoke $r38.<java.lang.StringBuffer: void <init>()>();

        $r40 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Rule \'");

        $r41 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r42 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r41);

        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' returns a value");

        $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.String toString()>();

        $r45 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r46 = virtualinvoke $r45.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i8 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: int getLine()>();

        $i9 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: int getColumn()>();

        virtualinvoke $r39.<groovyjarjarantlr.Tool: void warning(java.lang.String,java.lang.String,int,int)>($r44, $r46, $i8, $i9);

     label13:
        specialinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void GenRuleInvocation(groovyjarjarantlr.RuleRefElement)>(r1);

        $r91 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z13 = $r91 instanceof groovyjarjarantlr.LexerGrammar;

        if $z13 == 0 goto label15;

        $z10 = r0.<groovyjarjarantlr.JavaCodeGenerator: boolean saveText>;

        if $z10 == 0 goto label14;

        $i6 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: int getAutoGenType()>();

        if $i6 != 3 goto label15;

     label14:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("text.setLength(_saveIndex);");

     label15:
        $i16 = r0.<groovyjarjarantlr.JavaCodeGenerator: int syntacticPredLevel>;

        if $i16 != 0 goto label26;

        $r16 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z5 = $r16.<groovyjarjarantlr.Grammar: boolean hasSyntacticPredicate>;

        if $z5 == 0 goto label18;

        $r34 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z8 = $r34.<groovyjarjarantlr.Grammar: boolean buildAST>;

        if $z8 == 0 goto label16;

        $r35 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: java.lang.String getLabel()>();

        if $r35 != null goto label17;

     label16:
        $z9 = r0.<groovyjarjarantlr.JavaCodeGenerator: boolean genAST>;

        if $z9 == 0 goto label18;

        $i5 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: int getAutoGenType()>();

        if $i5 != 1 goto label18;

     label17:
        $z18 = 1;

        $z17 = 1;

        goto label19;

     label18:
        $z18 = 0;

        $z17 = 0;

     label19:
        z6 = $z17;

        if $z18 == 0 goto label20;

     label20:
        $r17 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z7 = $r17.<groovyjarjarantlr.Grammar: boolean buildAST>;

        if $z7 == 0 goto label21;

        $r25 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: java.lang.String getLabel()>();

        if $r25 == null goto label21;

        $r26 = new java.lang.StringBuffer;

        specialinvoke $r26.<java.lang.StringBuffer: void <init>()>();

        $r27 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: java.lang.String getLabel()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_AST = (");

        $r30 = r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String labeledElementASTType>;

        $r31 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")returnAST;");

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r33);

     label21:
        $z15 = r0.<groovyjarjarantlr.JavaCodeGenerator: boolean genAST>;

        if $z15 == 0 goto label24;

        $i4 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: int getAutoGenType()>();

        lookupswitch($i4)
        {
            case 1: goto label22;
            case 2: goto label23;
            default: goto label24;
        };

     label22:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("astFactory.addASTChild(currentAST, returnAST);");

        goto label24;

     label23:
        $r24 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        virtualinvoke $r24.<groovyjarjarantlr.Tool: void error(java.lang.String)>("Internal: encountered ^ after rule reference");

        goto label24;

     label24:
        $r92 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z16 = $r92 instanceof groovyjarjarantlr.LexerGrammar;

        if $z16 == 0 goto label25;

        $r18 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: java.lang.String getLabel()>();

        if $r18 == null goto label25;

        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r20 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: java.lang.String getLabel()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=_returnToken;");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r23);

     label25:
        if z6 == 0 goto label26;

     label26:
        specialinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genErrorCatchForElement(groovyjarjarantlr.AlternativeElement)>(r1);

     label27:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        goto label30;

     label28:
        $r88 := @caughtexception;

     label29:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        throw $r88;

     label30:
        return;

        catch java.lang.Throwable from label01 to label04 with label28;
        catch java.lang.Throwable from label05 to label06 with label28;
        catch java.lang.Throwable from label07 to label27 with label28;
        catch java.lang.Throwable from label28 to label29 with label28;
    }

    public void gen(groovyjarjarantlr.StringLiteralElement)
    {
        groovyjarjarantlr.Grammar $r17;
        java.lang.StringBuffer $r3, $r5, $r6, $r8, $r9, $r11, $r13, $r14, $r15;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r2, $r4, $r7, $r10, $r16;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.io.PrintStream $r12;
        groovyjarjarantlr.JavaCodeGenerator r0;
        groovyjarjarantlr.StringLiteralElement r1;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.StringLiteralElement;

        $z0 = r0.<groovyjarjarantlr.JavaCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z0 == 0 goto label1;

        $r12 = <java.lang.System: java.io.PrintStream out>;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("genString(");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>($r16);

     label1:
        $r2 = virtualinvoke r1.<groovyjarjarantlr.StringLiteralElement: java.lang.String getLabel()>();

        if $r2 == null goto label2;

        $i2 = r0.<groovyjarjarantlr.JavaCodeGenerator: int syntacticPredLevel>;

        if $i2 != 0 goto label2;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke r1.<groovyjarjarantlr.StringLiteralElement: java.lang.String getLabel()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r7 = r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String lt1Value>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        $i3 = virtualinvoke r1.<groovyjarjarantlr.StringLiteralElement: int getLine()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String,int)>($r10, $i3);

     label2:
        specialinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genElementAST(groovyjarjarantlr.AlternativeElement)>(r1);

        $z1 = r0.<groovyjarjarantlr.JavaCodeGenerator: boolean saveText>;

        $z2 = r0.<groovyjarjarantlr.JavaCodeGenerator: boolean saveText>;

        if $z2 == 0 goto label3;

        $i1 = virtualinvoke r1.<groovyjarjarantlr.StringLiteralElement: int getAutoGenType()>();

        if $i1 != 1 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        r0.<groovyjarjarantlr.JavaCodeGenerator: boolean saveText> = $z3;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genMatch(groovyjarjarantlr.GrammarAtom)>(r1);

        r0.<groovyjarjarantlr.JavaCodeGenerator: boolean saveText> = $z1;

        $r17 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z4 = $r17 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z4 == 0 goto label5;

        $i0 = virtualinvoke r1.<groovyjarjarantlr.StringLiteralElement: int getLine()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String,int)>("_t = _t.getNextSibling();", $i0);

     label5:
        return;
    }

    public void gen(groovyjarjarantlr.TokenRangeElement)
    {
        groovyjarjarantlr.TokenRangeElement r1;
        java.lang.StringBuffer $r3, $r5, $r6, $r8, $r9, $r11, $r12, $r14, $r15, $r17, $r18;
        int $i0, $i1, $i2;
        java.lang.String $r2, $r4, $r7, $r10, $r13, $r16, $r19;
        groovyjarjarantlr.JavaCodeGenerator r0;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.TokenRangeElement;

        specialinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genErrorTryForElement(groovyjarjarantlr.AlternativeElement)>(r1);

        $r2 = virtualinvoke r1.<groovyjarjarantlr.TokenRangeElement: java.lang.String getLabel()>();

        if $r2 == null goto label1;

        $i0 = r0.<groovyjarjarantlr.JavaCodeGenerator: int syntacticPredLevel>;

        if $i0 != 0 goto label1;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke r1.<groovyjarjarantlr.TokenRangeElement: java.lang.String getLabel()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r7 = r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String lt1Value>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        $i1 = virtualinvoke r1.<groovyjarjarantlr.TokenRangeElement: int getLine()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String,int)>($r10, $i1);

     label1:
        specialinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genElementAST(groovyjarjarantlr.AlternativeElement)>(r1);

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("matchRange(");

        $r13 = r1.<groovyjarjarantlr.TokenRangeElement: java.lang.String beginText>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r16 = r1.<groovyjarjarantlr.TokenRangeElement: java.lang.String endText>;

        $r17 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(");");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        $i2 = virtualinvoke r1.<groovyjarjarantlr.TokenRangeElement: int getLine()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String,int)>($r19, $i2);

        specialinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genErrorCatchForElement(groovyjarjarantlr.AlternativeElement)>(r1);

        return;
    }

    public void gen(groovyjarjarantlr.TokenRefElement)
    {
        groovyjarjarantlr.Grammar $r1, $r19;
        groovyjarjarantlr.Tool $r12;
        java.lang.StringBuffer $r4, $r6, $r7, $r9, $r10, $r13, $r15, $r16, $r17;
        int $i0, $i1, $i2;
        java.lang.String $r3, $r5, $r8, $r11, $r18;
        boolean $z0, $z1, $z2;
        java.io.PrintStream $r14;
        groovyjarjarantlr.JavaCodeGenerator r0;
        groovyjarjarantlr.TokenRefElement r2;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r2 := @parameter0: groovyjarjarantlr.TokenRefElement;

        $z0 = r0.<groovyjarjarantlr.JavaCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z0 == 0 goto label1;

        $r14 = <java.lang.System: java.io.PrintStream out>;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("genTokenRef(");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>($r18);

     label1:
        $r1 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z1 = $r1 instanceof groovyjarjarantlr.LexerGrammar;

        if $z1 == 0 goto label2;

        $r12 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        virtualinvoke $r12.<groovyjarjarantlr.Tool: void panic(java.lang.String)>("Token reference found in lexer");

     label2:
        specialinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genErrorTryForElement(groovyjarjarantlr.AlternativeElement)>(r2);

        $r3 = virtualinvoke r2.<groovyjarjarantlr.TokenRefElement: java.lang.String getLabel()>();

        if $r3 == null goto label3;

        $i1 = r0.<groovyjarjarantlr.JavaCodeGenerator: int syntacticPredLevel>;

        if $i1 != 0 goto label3;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke r2.<groovyjarjarantlr.TokenRefElement: java.lang.String getLabel()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r8 = r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String lt1Value>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        $i2 = virtualinvoke r2.<groovyjarjarantlr.TokenRefElement: int getLine()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String,int)>($r11, $i2);

     label3:
        specialinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genElementAST(groovyjarjarantlr.AlternativeElement)>(r2);

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genMatch(groovyjarjarantlr.GrammarAtom)>(r2);

        specialinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genErrorCatchForElement(groovyjarjarantlr.AlternativeElement)>(r2);

        $r19 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z2 = $r19 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z2 == 0 goto label4;

        $i0 = virtualinvoke r2.<groovyjarjarantlr.TokenRefElement: int getLine()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String,int)>("_t = _t.getNextSibling();", $i0);

     label4:
        return;
    }

    public void gen(groovyjarjarantlr.TreeElement)
    {
        groovyjarjarantlr.collections.impl.Vector $r52;
        java.lang.Throwable $r51;
        groovyjarjarantlr.Tool $r34, $r38;
        java.lang.StringBuffer $r2, $r3, $r4, $r5, $r16, $r17, $r18, $r19, $r21, $r22, $r23, $r24, $r28, $r29, $r30, $r31, $r41, $r44, $r45, $r47, $r48;
        java.lang.String $r6, $r8, $r20, $r25, $r32, $r35, $r39, $r43, $r46, $r49;
        groovyjarjarantlr.JavaCodeGenerator r0;
        groovyjarjarantlr.GrammarAtom $r7, $r9, $r10, $r11, $r13, $r14, $r27, $r36, $r40, $r42, $r50;
        groovyjarjarantlr.Grammar $r12, $r15, $r33, $r37;
        boolean $z0, $z1, $z2;
        groovyjarjarantlr.Alternative $r26;
        groovyjarjarantlr.AlternativeElement r53;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, $i15;
        groovyjarjarantlr.TreeElement r1;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.TreeElement;

        i0 = r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine>;

     label01:
        $i1 = virtualinvoke r1.<groovyjarjarantlr.TreeElement: int getLine()>();

        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = $i1;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("AST __t");

        $i2 = r1.<groovyjarjarantlr.TreeElement: int ID>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = _t;");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r6);

        $r7 = r1.<groovyjarjarantlr.TreeElement: groovyjarjarantlr.GrammarAtom root>;

        $r8 = virtualinvoke $r7.<groovyjarjarantlr.GrammarAtom: java.lang.String getLabel()>();

        if $r8 == null goto label02;

        $r41 = new java.lang.StringBuffer;

        specialinvoke $r41.<java.lang.StringBuffer: void <init>()>();

        $r42 = r1.<groovyjarjarantlr.TreeElement: groovyjarjarantlr.GrammarAtom root>;

        $r43 = virtualinvoke $r42.<groovyjarjarantlr.GrammarAtom: java.lang.String getLabel()>();

        $r44 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r43);

        $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = _t==ASTNULL ? null :(");

        $r46 = r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String labeledElementASTType>;

        $r47 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r46);

        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")_t;");

        $r49 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.String toString()>();

        $r50 = r1.<groovyjarjarantlr.TreeElement: groovyjarjarantlr.GrammarAtom root>;

        $i13 = virtualinvoke $r50.<groovyjarjarantlr.GrammarAtom: int getLine()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String,int)>($r49, $i13);

     label02:
        $r9 = r1.<groovyjarjarantlr.TreeElement: groovyjarjarantlr.GrammarAtom root>;

        $i3 = virtualinvoke $r9.<groovyjarjarantlr.GrammarAtom: int getAutoGenType()>();

        if $i3 != 3 goto label03;

        $r38 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r37 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r39 = virtualinvoke $r37.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i11 = virtualinvoke r1.<groovyjarjarantlr.TreeElement: int getLine()>();

        $i12 = virtualinvoke r1.<groovyjarjarantlr.TreeElement: int getColumn()>();

        virtualinvoke $r38.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("Suffixing a root node with \'!\' is not implemented", $r39, $i11, $i12);

        $r40 = r1.<groovyjarjarantlr.TreeElement: groovyjarjarantlr.GrammarAtom root>;

        virtualinvoke $r40.<groovyjarjarantlr.GrammarAtom: void setAutoGenType(int)>(1);

     label03:
        $r10 = r1.<groovyjarjarantlr.TreeElement: groovyjarjarantlr.GrammarAtom root>;

        $i4 = virtualinvoke $r10.<groovyjarjarantlr.GrammarAtom: int getAutoGenType()>();

        if $i4 != 2 goto label04;

        $r34 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r33 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r35 = virtualinvoke $r33.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i9 = virtualinvoke r1.<groovyjarjarantlr.TreeElement: int getLine()>();

        $i10 = virtualinvoke r1.<groovyjarjarantlr.TreeElement: int getColumn()>();

        virtualinvoke $r34.<groovyjarjarantlr.Tool: void warning(java.lang.String,java.lang.String,int,int)>("Suffixing a root node with \'^\' is redundant; already a root", $r35, $i9, $i10);

        $r36 = r1.<groovyjarjarantlr.TreeElement: groovyjarjarantlr.GrammarAtom root>;

        virtualinvoke $r36.<groovyjarjarantlr.GrammarAtom: void setAutoGenType(int)>(1);

     label04:
        $r11 = r1.<groovyjarjarantlr.TreeElement: groovyjarjarantlr.GrammarAtom root>;

        specialinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genElementAST(groovyjarjarantlr.AlternativeElement)>($r11);

        $r12 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r12.<groovyjarjarantlr.Grammar: boolean buildAST>;

        if $z0 == 0 goto label05;

        $r28 = new java.lang.StringBuffer;

        specialinvoke $r28.<java.lang.StringBuffer: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ASTPair __currentAST");

        $i8 = r1.<groovyjarjarantlr.TreeElement: int ID>;

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i8);

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = currentAST.copy();");

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r32);

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("currentAST.root = currentAST.child;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("currentAST.child = null;");

     label05:
        $r13 = r1.<groovyjarjarantlr.TreeElement: groovyjarjarantlr.GrammarAtom root>;

        $z1 = $r13 instanceof groovyjarjarantlr.WildcardElement;

        if $z1 == 0 goto label06;

        $r27 = r1.<groovyjarjarantlr.TreeElement: groovyjarjarantlr.GrammarAtom root>;

        $i7 = virtualinvoke $r27.<groovyjarjarantlr.GrammarAtom: int getLine()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String,int)>("if ( _t==null ) throw new MismatchedTokenException();", $i7);

        goto label07;

     label06:
        $r14 = r1.<groovyjarjarantlr.TreeElement: groovyjarjarantlr.GrammarAtom root>;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genMatch(groovyjarjarantlr.GrammarAtom)>($r14);

     label07:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("_t = _t.getFirstChild();");

        i14 = 0;

     label08:
        $r52 = virtualinvoke r1.<groovyjarjarantlr.TreeElement: groovyjarjarantlr.collections.impl.Vector getAlternatives()>();

        $i15 = virtualinvoke $r52.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i14 >= $i15 goto label11;

        $r26 = virtualinvoke r1.<groovyjarjarantlr.TreeElement: groovyjarjarantlr.Alternative getAlternativeAt(int)>(i14);

        r53 = $r26.<groovyjarjarantlr.Alternative: groovyjarjarantlr.AlternativeElement head>;

     label09:
        if r53 == null goto label10;

        virtualinvoke r53.<groovyjarjarantlr.AlternativeElement: void generate()>();

        r53 = r53.<groovyjarjarantlr.AlternativeElement: groovyjarjarantlr.AlternativeElement next>;

        goto label09;

     label10:
        i14 = i14 + 1;

        goto label08;

     label11:
        $r15 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z2 = $r15.<groovyjarjarantlr.Grammar: boolean buildAST>;

        if $z2 == 0 goto label12;

        $r21 = new java.lang.StringBuffer;

        specialinvoke $r21.<java.lang.StringBuffer: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("currentAST = __currentAST");

        $i6 = r1.<groovyjarjarantlr.TreeElement: int ID>;

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i6);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r25);

     label12:
        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_t = __t");

        $i5 = r1.<groovyjarjarantlr.TreeElement: int ID>;

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i5);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r20);

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("_t = _t.getNextSibling();");

     label13:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        goto label16;

     label14:
        $r51 := @caughtexception;

     label15:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        throw $r51;

     label16:
        return;

        catch java.lang.Throwable from label01 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    public void gen(groovyjarjarantlr.TreeWalkerGrammar) throws java.io.IOException
    {
        java.util.Enumeration $r101;
        groovyjarjarantlr.TokenManager $r34, $r73;
        groovyjarjarantlr.collections.impl.Vector $r35, $r40, $r100;
        java.io.PrintWriter $r6;
        groovyjarjarantlr.RuleBlock $r88;
        groovyjarjarantlr.GrammarSymbol r38;
        java.lang.Throwable $r54, $r55;
        groovyjarjarantlr.Tool $r5, $r53;
        java.lang.StringBuffer $r12, $r15, $r16, $r24, $r27, $r44, $r45, $r59, $r60, $r63, $r66, $r67, $r68, $r71, $r75, $r77, $r93, $r96, $r97, $r102, $r103, $r104, $r105, $r106, $r107, $r108;
        java.lang.String $r10, $r14, $r17, $r20, $r22, $r26, $r29, $r41, $r42, $r46, $r47, $r48, $r50, r56, r57, $r61, $r65, $r69, $r74, $r76, $r78, $r85, $r89, $r95, $r98;
        groovyjarjarantlr.JavaCodeGenerator r0;
        groovyjarjarantlr.RuleSymbol r39;
        groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager $r3, $r36;
        groovyjarjarantlr.DefineGrammarSymbols $r8, $r9;
        groovyjarjarantlr.Grammar $r2, $r4, $r7, $r13, $r18, $r21, $r25, $r28, $r30, $r33, $r49, $r52, $r64, $r72, $r79, $r83, $r86, $r90, $r94, $r99;
        groovyjarjarantlr.Token $r19, $r51, $r82, $r84, $r87, $r91;
        boolean $z0, $z1, $z2, $z3, $z4;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, $i13, $i15, $i17;
        java.util.Hashtable $r31, $r80;
        groovyjarjarantlr.TreeWalkerGrammar r1;
        java.lang.Object $r32, $r37, $r81;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.TreeWalkerGrammar;

        i0 = r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine>;

     label01:
        $i13 = (int) -999;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = $i13;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void setGrammar(groovyjarjarantlr.Grammar)>(r1);

        $r2 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r2 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z0 != 0 goto label02;

        $r53 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        virtualinvoke $r53.<groovyjarjarantlr.Tool: void panic(java.lang.String)>("Internal error generating tree-walker");

     label02:
        $r3 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager getPrintWriterManager()>();

        $r5 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r4 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r6 = interfaceinvoke $r3.<groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager: java.io.PrintWriter setupOutput(groovyjarjarantlr.Tool,groovyjarjarantlr.Grammar)>($r5, $r4);

        r0.<groovyjarjarantlr.JavaCodeGenerator: java.io.PrintWriter currentOutput> = $r6;

        $r7 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z1 = $r7.<groovyjarjarantlr.Grammar: boolean buildAST>;

        r0.<groovyjarjarantlr.JavaCodeGenerator: boolean genAST> = $z1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = 0;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genHeader()>();

     label03:
        $r8 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.DefineGrammarSymbols behavior>;

        $i1 = virtualinvoke $r8.<groovyjarjarantlr.DefineGrammarSymbols: int getHeaderActionLine(java.lang.String)>("");

        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = $i1;

        $r9 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.DefineGrammarSymbols behavior>;

        $r10 = virtualinvoke $r9.<groovyjarjarantlr.DefineGrammarSymbols: java.lang.String getHeaderAction(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r10);

     label04:
        $i15 = (int) -999;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = $i15;

        goto label07;

     label05:
        $r55 := @caughtexception;

     label06:
        $i17 = (int) -999;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = $i17;

        throw $r55;

     label07:
        $r102 = new java.lang.StringBuffer;

        specialinvoke $r102.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r102.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("import antlr.");

        $r13 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r14 = virtualinvoke $r13.<groovyjarjarantlr.Grammar: java.lang.String getSuperClass()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r17);

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("import antlr.Token;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("import antlr.collections.AST;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("import antlr.RecognitionException;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("import antlr.ANTLRException;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("import antlr.NoViableAltException;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("import antlr.MismatchedTokenException;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("import antlr.SemanticException;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("import antlr.collections.impl.BitSet;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("import antlr.ASTPair;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("import antlr.collections.impl.ASTArray;");

        $r18 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r19 = $r18.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Token preambleAction>;

        $r20 = virtualinvoke $r19.<groovyjarjarantlr.Token: java.lang.String getText()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r20);

        $r21 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r22 = $r21.<groovyjarjarantlr.Grammar: java.lang.String superClass>;

        if $r22 == null goto label08;

        $r52 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        r56 = $r52.<groovyjarjarantlr.Grammar: java.lang.String superClass>;

        goto label09;

     label08:
        $r103 = new java.lang.StringBuffer;

        specialinvoke $r103.<java.lang.StringBuffer: void <init>()>();

        $r24 = virtualinvoke $r103.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("antlr.");

        $r25 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r26 = virtualinvoke $r25.<groovyjarjarantlr.Grammar: java.lang.String getSuperClass()>();

        $r27 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r26);

        r56 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

     label09:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("");

        $r28 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r29 = $r28.<groovyjarjarantlr.Grammar: java.lang.String comment>;

        if $r29 == null goto label10;

        $r49 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r50 = $r49.<groovyjarjarantlr.Grammar: java.lang.String comment>;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void _println(java.lang.String)>($r50);

     label10:
        r57 = "public";

        $r30 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r31 = $r30.<groovyjarjarantlr.Grammar: java.util.Hashtable options>;

        $r32 = virtualinvoke $r31.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("classHeaderPrefix");

        $r51 = (groovyjarjarantlr.Token) $r32;

        if $r51 == null goto label11;

        $r47 = virtualinvoke $r51.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r48 = staticinvoke <groovyjarjarantlr.StringUtils: java.lang.String stripFrontBack(java.lang.String,java.lang.String,java.lang.String)>($r47, "\"", "\"");

        if $r48 == null goto label11;

        r57 = $r48;

     label11:
        $r104 = new java.lang.StringBuffer;

        specialinvoke $r104.<java.lang.StringBuffer: void <init>()>();

        $r59 = virtualinvoke $r104.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r57);

        $r60 = virtualinvoke $r59.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r61 = virtualinvoke $r60.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void print(java.lang.String)>($r61);

        $r105 = new java.lang.StringBuffer;

        specialinvoke $r105.<java.lang.StringBuffer: void <init>()>();

        $r63 = virtualinvoke $r105.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("class ");

        $r64 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r65 = virtualinvoke $r64.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r66 = virtualinvoke $r63.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r65);

        $r67 = virtualinvoke $r66.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" extends ");

        $r68 = virtualinvoke $r67.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r56);

        $r69 = virtualinvoke $r68.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void print(java.lang.String)>($r69);

        $r106 = new java.lang.StringBuffer;

        specialinvoke $r106.<java.lang.StringBuffer: void <init>()>();

        $r71 = virtualinvoke $r106.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("       implements ");

        $r72 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r73 = $r72.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $r74 = interfaceinvoke $r73.<groovyjarjarantlr.TokenManager: java.lang.String getName()>();

        $r75 = virtualinvoke $r71.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r74);

        $r76 = <groovyjarjarantlr.JavaCodeGenerator: java.lang.String TokenTypesFileSuffix>;

        $r77 = virtualinvoke $r75.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r76);

        $r78 = virtualinvoke $r77.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r78);

        $r79 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r80 = $r79.<groovyjarjarantlr.Grammar: java.util.Hashtable options>;

        $r81 = virtualinvoke $r80.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("classHeaderSuffix");

        $r82 = (groovyjarjarantlr.Token) $r81;

        if $r82 == null goto label12;

        $r41 = virtualinvoke $r82.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r42 = staticinvoke <groovyjarjarantlr.StringUtils: java.lang.String stripFrontBack(java.lang.String,java.lang.String,java.lang.String)>($r41, "\"", "\"");

        if $r42 == null goto label12;

        $r107 = new java.lang.StringBuffer;

        specialinvoke $r107.<java.lang.StringBuffer: void <init>()>();

        $r44 = virtualinvoke $r107.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r42);

        $r46 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void print(java.lang.String)>($r46);

     label12:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>(" {");

        $r83 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r84 = $r83.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Token classMemberAction>;

        $r85 = virtualinvoke $r84.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r86 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r87 = $r86.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Token classMemberAction>;

        $i5 = virtualinvoke $r87.<groovyjarjarantlr.Token: int getLine()>();

        $r88 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        $r89 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String processActionForSpecialSymbols(java.lang.String,int,groovyjarjarantlr.RuleBlock,groovyjarjarantlr.ActionTransInfo)>($r85, $i5, $r88, null);

        $r90 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r91 = $r90.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Token classMemberAction>;

        $i6 = virtualinvoke $r91.<groovyjarjarantlr.Token: int getLine()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void print(java.lang.String,int)>($r89, $i6);

        $r108 = new java.lang.StringBuffer;

        specialinvoke $r108.<java.lang.StringBuffer: void <init>()>();

        $r93 = virtualinvoke $r108.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("public ");

        $r94 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r95 = virtualinvoke $r94.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r96 = virtualinvoke $r93.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r95);

        $r97 = virtualinvoke $r96.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("() {");

        $r98 = virtualinvoke $r97.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r98);

        $i7 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i8 = $i7 + 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i8;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("tokenNames = _tokenNames;");

        $i9 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i10 = $i9 - 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i10;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("}");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("");

        $r99 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r100 = $r99.<groovyjarjarantlr.Grammar: groovyjarjarantlr.collections.impl.Vector rules>;

        $r101 = virtualinvoke $r100.<groovyjarjarantlr.collections.impl.Vector: java.util.Enumeration elements()>();

        i11 = 0;

     label13:
        $z3 = interfaceinvoke $r101.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z3 == 0 goto label17;

        $r37 = interfaceinvoke $r101.<java.util.Enumeration: java.lang.Object nextElement()>();

        r38 = (groovyjarjarantlr.GrammarSymbol) $r37;

        $z2 = r38 instanceof groovyjarjarantlr.RuleSymbol;

        if $z2 == 0 goto label16;

        r39 = (groovyjarjarantlr.RuleSymbol) r38;

        $r40 = r39.<groovyjarjarantlr.RuleSymbol: groovyjarjarantlr.collections.impl.Vector references>;

        $i3 = virtualinvoke $r40.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if $i3 != 0 goto label14;

        $z4 = 1;

        goto label15;

     label14:
        $z4 = 0;

     label15:
        $i4 = i11;

        i11 = i11 + 1;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genRule(groovyjarjarantlr.RuleSymbol,boolean,int)>(r39, $z4, $i4);

     label16:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void exitIfError()>();

        goto label13;

     label17:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genTokenStrings()>();

        $r35 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.collections.impl.Vector bitsetsUsed>;

        $r33 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r34 = $r33.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $i2 = interfaceinvoke $r34.<groovyjarjarantlr.TokenManager: int maxTokenType()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genBitsets(groovyjarjarantlr.collections.impl.Vector,int)>($r35, $i2);

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("}");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("");

        $r36 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager getPrintWriterManager()>();

        interfaceinvoke $r36.<groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager: void finishOutput()>();

     label18:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        goto label21;

     label19:
        $r54 := @caughtexception;

     label20:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        throw $r54;

     label21:
        return;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label01 to label18 with label19;
        catch java.lang.Throwable from label19 to label20 with label19;
    }

    public void gen(groovyjarjarantlr.WildcardElement)
    {
        groovyjarjarantlr.Grammar $r3, $r10, $r20, $r21, $r22;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.Throwable $r19;
        groovyjarjarantlr.WildcardElement r1;
        java.lang.StringBuffer $r4, $r5, $r7, $r8, $r11, $r13, $r14, $r16, $r17;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.String $r2, $r6, $r9, $r12, $r15, $r18;
        groovyjarjarantlr.JavaCodeGenerator r0;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.WildcardElement;

        i0 = r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine>;

     label01:
        $i1 = virtualinvoke r1.<groovyjarjarantlr.WildcardElement: int getLine()>();

        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = $i1;

        $r2 = virtualinvoke r1.<groovyjarjarantlr.WildcardElement: java.lang.String getLabel()>();

        if $r2 == null goto label02;

        $i4 = r0.<groovyjarjarantlr.JavaCodeGenerator: int syntacticPredLevel>;

        if $i4 != 0 goto label02;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke r1.<groovyjarjarantlr.WildcardElement: java.lang.String getLabel()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r15 = r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String lt1Value>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r18);

     label02:
        specialinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genElementAST(groovyjarjarantlr.AlternativeElement)>(r1);

        $r20 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z4 = $r20 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z4 == 0 goto label03;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("if ( _t==null ) throw new MismatchedTokenException();");

        goto label08;

     label03:
        $r3 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r3 instanceof groovyjarjarantlr.LexerGrammar;

        if $z0 == 0 goto label07;

        $r10 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z1 = $r10 instanceof groovyjarjarantlr.LexerGrammar;

        if $z1 == 0 goto label05;

        $z3 = r0.<groovyjarjarantlr.JavaCodeGenerator: boolean saveText>;

        if $z3 == 0 goto label04;

        $i3 = virtualinvoke r1.<groovyjarjarantlr.WildcardElement: int getAutoGenType()>();

        if $i3 != 3 goto label05;

     label04:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("_saveIndex=text.length();");

     label05:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("matchNot(EOF_CHAR);");

        $r21 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z5 = $r21 instanceof groovyjarjarantlr.LexerGrammar;

        if $z5 == 0 goto label08;

        $z2 = r0.<groovyjarjarantlr.JavaCodeGenerator: boolean saveText>;

        if $z2 == 0 goto label06;

        $i2 = virtualinvoke r1.<groovyjarjarantlr.WildcardElement: int getAutoGenType()>();

        if $i2 != 3 goto label08;

     label06:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("text.setLength(_saveIndex);");

        goto label08;

     label07:
        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("matchNot(");

        $r6 = specialinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String getValueString(int)>(1);

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(");");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r9);

     label08:
        $r22 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z6 = $r22 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z6 == 0 goto label09;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("_t = _t.getNextSibling();");

     label09:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        goto label12;

     label10:
        $r19 := @caughtexception;

     label11:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        throw $r19;

     label12:
        return;

        catch java.lang.Throwable from label01 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public void gen(groovyjarjarantlr.ZeroOrMoreBlock)
    {
        groovyjarjarantlr.Lookahead[] $r14, $r29;
        groovyjarjarantlr.LLkGrammarAnalyzer $r12;
        groovyjarjarantlr.ZeroOrMoreBlock r1;
        groovyjarjarantlr.JavaBlockFinishingInfo $r41;
        java.lang.Throwable $r39;
        java.lang.StringBuffer $r3, $r4, $r5, $r6, $r7, $r8, $r16, $r17, $r18, $r19, $r20, $r21, $r23, $r25, $r26, $r33, $r35, $r36, $r37, $r42, $r43, $r44, $r45;
        java.lang.String $r2, $r9, $r10, $r15, $r22, $r27, $r31, $r32, $r38, r40, $r46;
        groovyjarjarantlr.JavaCodeGenerator r0;
        groovyjarjarantlr.Grammar $r11, $r13, $r28;
        boolean $z0, $z1, $z2, $z3, z4, $z5;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i11, $i12, $i13;
        java.io.PrintStream $r24, $r34;
        groovyjarjarantlr.Lookahead $r30;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.ZeroOrMoreBlock;

        i0 = r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine>;

     label01:
        $i1 = virtualinvoke r1.<groovyjarjarantlr.ZeroOrMoreBlock: int getLine()>();

        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = $i1;

        $z0 = r0.<groovyjarjarantlr.JavaCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z0 == 0 goto label02;

        $r34 = <java.lang.System: java.io.PrintStream out>;

        $r33 = new java.lang.StringBuffer;

        specialinvoke $r33.<java.lang.StringBuffer: void <init>()>();

        $r35 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("gen*(");

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r34.<java.io.PrintStream: void println(java.lang.String)>($r38);

     label02:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("{");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genBlockPreamble(groovyjarjarantlr.AlternativeBlock)>(r1);

        $r2 = virtualinvoke r1.<groovyjarjarantlr.ZeroOrMoreBlock: java.lang.String getLabel()>();

        if $r2 == null goto label03;

        r40 = virtualinvoke r1.<groovyjarjarantlr.ZeroOrMoreBlock: java.lang.String getLabel()>();

        goto label04;

     label03:
        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_loop");

        $i2 = r1.<groovyjarjarantlr.ZeroOrMoreBlock: int ID>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        r40 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

     label04:
        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r40);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r9);

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("do {");

        $i3 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i4 = $i3 + 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i4;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genBlockInitAction(groovyjarjarantlr.AlternativeBlock)>(r1);

        $r32 = r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String currentASTResult>;

        $r10 = virtualinvoke r1.<groovyjarjarantlr.ZeroOrMoreBlock: java.lang.String getLabel()>();

        if $r10 == null goto label05;

        $r31 = virtualinvoke r1.<groovyjarjarantlr.ZeroOrMoreBlock: java.lang.String getLabel()>();

        r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String currentASTResult> = $r31;

     label05:
        $r11 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r12 = $r11.<groovyjarjarantlr.Grammar: groovyjarjarantlr.LLkGrammarAnalyzer theLLkAnalyzer>;

        interfaceinvoke $r12.<groovyjarjarantlr.LLkGrammarAnalyzer: boolean deterministic(groovyjarjarantlr.ZeroOrMoreBlock)>(r1);

        z4 = 0;

        $r13 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        i10 = $r13.<groovyjarjarantlr.Grammar: int maxk>;

        $z1 = r1.<groovyjarjarantlr.ZeroOrMoreBlock: boolean greedy>;

        if $z1 != 0 goto label06;

        $i8 = r1.<groovyjarjarantlr.ZeroOrMoreBlock: int exitLookaheadDepth>;

        $r28 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $i7 = $r28.<groovyjarjarantlr.Grammar: int maxk>;

        if $i8 > $i7 goto label06;

        $r29 = r1.<groovyjarjarantlr.ZeroOrMoreBlock: groovyjarjarantlr.Lookahead[] exitCache>;

        $i9 = r1.<groovyjarjarantlr.ZeroOrMoreBlock: int exitLookaheadDepth>;

        $r30 = $r29[$i9];

        $z3 = virtualinvoke $r30.<groovyjarjarantlr.Lookahead: boolean containsEpsilon()>();

        if $z3 == 0 goto label06;

        z4 = 1;

        i10 = r1.<groovyjarjarantlr.ZeroOrMoreBlock: int exitLookaheadDepth>;

        goto label07;

     label06:
        $z5 = r1.<groovyjarjarantlr.ZeroOrMoreBlock: boolean greedy>;

        if $z5 != 0 goto label07;

        $i6 = r1.<groovyjarjarantlr.ZeroOrMoreBlock: int exitLookaheadDepth>;

        if $i6 != 2147483647 goto label07;

        z4 = 1;

     label07:
        if z4 == 0 goto label09;

        $z2 = r0.<groovyjarjarantlr.JavaCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z2 == 0 goto label08;

        $r24 = <java.lang.System: java.io.PrintStream out>;

        $r23 = new java.lang.StringBuffer;

        specialinvoke $r23.<java.lang.StringBuffer: void <init>()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("nongreedy (...)* loop; exit depth is ");

        $i5 = r1.<groovyjarjarantlr.ZeroOrMoreBlock: int exitLookaheadDepth>;

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i5);

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r24.<java.io.PrintStream: void println(java.lang.String)>($r27);

     label08:
        $r14 = r1.<groovyjarjarantlr.ZeroOrMoreBlock: groovyjarjarantlr.Lookahead[] exitCache>;

        $r15 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String getLookaheadTestExpression(groovyjarjarantlr.Lookahead[],int)>($r14, i10);

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("// nongreedy exit test");

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("if (");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") break ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r40);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r22);

     label09:
        $r41 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.JavaBlockFinishingInfo genCommonBlock(groovyjarjarantlr.AlternativeBlock,boolean)>(r1, 0);

        $r42 = new java.lang.StringBuffer;

        specialinvoke $r42.<java.lang.StringBuffer: void <init>()>();

        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("break ");

        $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r40);

        $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r46 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.String toString()>();

        $i11 = virtualinvoke r1.<groovyjarjarantlr.ZeroOrMoreBlock: int getLine()>();

        specialinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genBlockFinish(groovyjarjarantlr.JavaBlockFinishingInfo,java.lang.String,int)>($r41, $r46, $i11);

        $i12 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i13 = $i12 - 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i13;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("} while (true);");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("}");

        r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String currentASTResult> = $r32;

     label10:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        goto label13;

     label11:
        $r39 := @caughtexception;

     label12:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        throw $r39;

     label13:
        return;

        catch java.lang.Throwable from label01 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    protected void genAlt(groovyjarjarantlr.Alternative, groovyjarjarantlr.AlternativeBlock)
    {
        groovyjarjarantlr.Grammar $r5, $r9, $r18;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        groovyjarjarantlr.RuleBlock r8;
        groovyjarjarantlr.Alternative r1;
        groovyjarjarantlr.AlternativeElement $r19, r23;
        groovyjarjarantlr.AlternativeBlock r3;
        groovyjarjarantlr.ExceptionSpec $r2, $r22, $r24;
        groovyjarjarantlr.Tool $r6;
        java.lang.StringBuffer $r12, $r13, $r15, $r16, $r26;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i10;
        java.lang.String $r4, $r7, $r11, $r14, $r17;
        java.util.Hashtable $r20, $r25;
        groovyjarjarantlr.JavaCodeGenerator r0;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.Alternative;

        r3 := @parameter1: groovyjarjarantlr.AlternativeBlock;

        z0 = r0.<groovyjarjarantlr.JavaCodeGenerator: boolean genAST>;

        $z1 = r0.<groovyjarjarantlr.JavaCodeGenerator: boolean genAST>;

        if $z1 == 0 goto label01;

        $z7 = virtualinvoke r1.<groovyjarjarantlr.Alternative: boolean getAutoGen()>();

        if $z7 == 0 goto label01;

        $z8 = 1;

        goto label02;

     label01:
        $z8 = 0;

     label02:
        r0.<groovyjarjarantlr.JavaCodeGenerator: boolean genAST> = $z8;

        $z9 = r0.<groovyjarjarantlr.JavaCodeGenerator: boolean saveText>;

        $z10 = r0.<groovyjarjarantlr.JavaCodeGenerator: boolean saveText>;

        if $z10 == 0 goto label03;

        $z6 = virtualinvoke r1.<groovyjarjarantlr.Alternative: boolean getAutoGen()>();

        if $z6 == 0 goto label03;

        $z11 = 1;

        goto label04;

     label03:
        $z11 = 0;

     label04:
        r0.<groovyjarjarantlr.JavaCodeGenerator: boolean saveText> = $z11;

        $r20 = r0.<groovyjarjarantlr.JavaCodeGenerator: java.util.Hashtable treeVariableMap>;

        $r25 = new java.util.Hashtable;

        specialinvoke $r25.<java.util.Hashtable: void <init>()>();

        r0.<groovyjarjarantlr.JavaCodeGenerator: java.util.Hashtable treeVariableMap> = $r25;

        $r22 = r1.<groovyjarjarantlr.Alternative: groovyjarjarantlr.ExceptionSpec exceptionSpec>;

        if $r22 == null goto label05;

        $r19 = r1.<groovyjarjarantlr.Alternative: groovyjarjarantlr.AlternativeElement head>;

        $i4 = virtualinvoke $r19.<groovyjarjarantlr.AlternativeElement: int getLine()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String,int)>("try {      // for error handling", $i4);

        $i5 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i6 = $i5 + 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i6;

     label05:
        r23 = r1.<groovyjarjarantlr.Alternative: groovyjarjarantlr.AlternativeElement head>;

     label06:
        $z12 = r23 instanceof groovyjarjarantlr.BlockEndElement;

        if $z12 != 0 goto label07;

        virtualinvoke r23.<groovyjarjarantlr.AlternativeElement: void generate()>();

        r23 = r23.<groovyjarjarantlr.AlternativeElement: groovyjarjarantlr.AlternativeElement next>;

        goto label06;

     label07:
        $z2 = r0.<groovyjarjarantlr.JavaCodeGenerator: boolean genAST>;

        if $z2 == 0 goto label10;

        $z3 = r3 instanceof groovyjarjarantlr.RuleBlock;

        if $z3 == 0 goto label09;

        r8 = (groovyjarjarantlr.RuleBlock) r3;

        $r9 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z4 = $r9.<groovyjarjarantlr.Grammar: boolean hasSyntacticPredicate>;

        if $z4 == 0 goto label08;

     label08:
        $r26 = new java.lang.StringBuffer;

        specialinvoke $r26.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke r8.<groovyjarjarantlr.RuleBlock: java.lang.String getRuleName()>();

        $r12 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_AST = (");

        $r14 = r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String labeledElementASTType>;

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")currentAST.root;");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        $i8 = (int) -888;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String,int)>($r17, $i8);

        $r18 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z5 = $r18.<groovyjarjarantlr.Grammar: boolean hasSyntacticPredicate>;

        if $z5 == 0 goto label10;

        goto label10;

     label09:
        $r4 = virtualinvoke r3.<groovyjarjarantlr.AlternativeBlock: java.lang.String getLabel()>();

        if $r4 == null goto label10;

        $r6 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r5 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r7 = virtualinvoke $r5.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i2 = virtualinvoke r3.<groovyjarjarantlr.AlternativeBlock: int getLine()>();

        $i3 = virtualinvoke r3.<groovyjarjarantlr.AlternativeBlock: int getColumn()>();

        virtualinvoke $r6.<groovyjarjarantlr.Tool: void warning(java.lang.String,java.lang.String,int,int)>("Labeled subrules not yet supported", $r7, $i2, $i3);

     label10:
        $r24 = r1.<groovyjarjarantlr.Alternative: groovyjarjarantlr.ExceptionSpec exceptionSpec>;

        if $r24 == null goto label11;

        $i0 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i1 = $i0 - 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i1;

        $i10 = (int) -999;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String,int)>("}", $i10);

        $r2 = r1.<groovyjarjarantlr.Alternative: groovyjarjarantlr.ExceptionSpec exceptionSpec>;

        specialinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genErrorHandler(groovyjarjarantlr.ExceptionSpec)>($r2);

     label11:
        r0.<groovyjarjarantlr.JavaCodeGenerator: boolean genAST> = z0;

        r0.<groovyjarjarantlr.JavaCodeGenerator: boolean saveText> = $z9;

        r0.<groovyjarjarantlr.JavaCodeGenerator: java.util.Hashtable treeVariableMap> = $r20;

        return;
    }

    protected void genBitsets(groovyjarjarantlr.collections.impl.Vector, int)
    {
        groovyjarjarantlr.JavaCodeGenerator r0;
        groovyjarjarantlr.collections.impl.BitSet r3;
        int $i0, i1, i2, $i4;
        java.lang.Object $r2;
        groovyjarjarantlr.collections.impl.Vector r1;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.collections.impl.Vector;

        i1 := @parameter1: int;

        $i4 = (int) -999;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String,int)>("", $i4);

        i2 = 0;

     label1:
        $i0 = virtualinvoke r1.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i2 >= $i0 goto label2;

        $r2 = virtualinvoke r1.<groovyjarjarantlr.collections.impl.Vector: java.lang.Object elementAt(int)>(i2);

        r3 = (groovyjarjarantlr.collections.impl.BitSet) $r2;

        virtualinvoke r3.<groovyjarjarantlr.collections.impl.BitSet: void growToInclude(int)>(i1);

        specialinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genBitSet(groovyjarjarantlr.collections.impl.BitSet,int)>(r3, i2);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    private void genBitSet(groovyjarjarantlr.collections.impl.BitSet, int)
    {
        byte $b4, $b11, $b17;
        java.lang.Throwable $r47;
        long $l3, $l7, $l9, $l10, $l14, $l15, $l16;
        java.lang.StringBuffer $r2, $r4, $r5, $r9, $r10, $r11, $r15, $r17, $r18, $r19, $r21, $r22, $r23, $r26, $r27, $r28, $r29, $r30, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r42, $r44, $r45, $r48, $r49, $r50, $r51, $r52, $r53;
        java.lang.String $r3, $r6, $r12, $r16, $r20, $r24, $r31, $r40, $r43, $r46;
        groovyjarjarantlr.JavaCodeGenerator r0;
        groovyjarjarantlr.collections.impl.BitSet r7;
        long[] $r13;
        int i0, i1, $i2, $i5, $i6, $i8, $i12, $i13, i18, $i19, i20, $i22;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r7 := @parameter0: groovyjarjarantlr.collections.impl.BitSet;

        i1 := @parameter1: int;

        i0 = r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine>;

     label01:
        $i22 = (int) -999;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = $i22;

        $r48 = new java.lang.StringBuffer;

        specialinvoke $r48.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("private static final long[] mk");

        $r3 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String getBitsetName(int)>(i1);

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("() {");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r6);

        $i2 = virtualinvoke r7.<groovyjarjarantlr.collections.impl.BitSet: int lengthInLongWords()>();

        if $i2 >= 8 goto label02;

        $r49 = new java.lang.StringBuffer;

        specialinvoke $r49.<java.lang.StringBuffer: void <init>()>();

        $r42 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\tlong[] data = { ");

        $r43 = virtualinvoke r7.<groovyjarjarantlr.collections.impl.BitSet: java.lang.String toStringOfWords()>();

        $r44 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r43);

        $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("};");

        $r46 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r46);

        goto label09;

     label02:
        $r50 = new java.lang.StringBuffer;

        specialinvoke $r50.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\tlong[] data = new long[");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("];");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r12);

        $r13 = virtualinvoke r7.<groovyjarjarantlr.collections.impl.BitSet: long[] toPackedArray()>();

        i18 = 0;

     label03:
        $i19 = lengthof $r13;

        if i18 >= $i19 goto label09;

        $l3 = $r13[i18];

        $b4 = $l3 cmp 0L;

        if $b4 != 0 goto label04;

        i18 = i18 + 1;

        goto label03;

     label04:
        $i6 = i18 + 1;

        $i5 = lengthof $r13;

        if $i6 == $i5 goto label05;

        $l10 = $r13[i18];

        $i8 = i18 + 1;

        $l9 = $r13[$i8];

        $b11 = $l10 cmp $l9;

        if $b11 == 0 goto label06;

     label05:
        $r51 = new java.lang.StringBuffer;

        specialinvoke $r51.<java.lang.StringBuffer: void <init>()>();

        $r26 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\tdata[");

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i18);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]=");

        $l7 = $r13[i18];

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l7);

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("L;");

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r31);

        i18 = i18 + 1;

        goto label03;

     label06:
        i20 = i18 + 1;

     label07:
        $i12 = lengthof $r13;

        if i20 >= $i12 goto label08;

        $l16 = $r13[i20];

        $l15 = $r13[i18];

        $b17 = $l16 cmp $l15;

        if $b17 != 0 goto label08;

        i20 = i20 + 1;

        goto label07;

     label08:
        $r52 = new java.lang.StringBuffer;

        specialinvoke $r52.<java.lang.StringBuffer: void <init>()>();

        $r33 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\tfor (int i = ");

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i18);

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("; i<=");

        $i13 = i20 - 1;

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i13);

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("; i++) { data[i]=");

        $l14 = $r13[i18];

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l14);

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("L; }");

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r40);

        i18 = i20;

        goto label03;

     label09:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("\treturn data;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("}");

        $r53 = new java.lang.StringBuffer;

        specialinvoke $r53.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("public static final BitSet ");

        $r16 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String getBitsetName(int)>(i1);

        $r17 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = new BitSet(");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("mk");

        $r20 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String getBitsetName(int)>(i1);

        $r21 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("()");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(");");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r24);

     label10:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        goto label13;

     label11:
        $r47 := @caughtexception;

     label12:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        throw $r47;

     label13:
        return;

        catch java.lang.Throwable from label01 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    private void genBlockFinish(groovyjarjarantlr.JavaBlockFinishingInfo, java.lang.String, int)
    {
        java.lang.Throwable $r4;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.String $r2, r3, $r5;
        boolean $z0, $z1, $z2, $z3;
        groovyjarjarantlr.JavaBlockFinishingInfo r1;
        groovyjarjarantlr.JavaCodeGenerator r0;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.JavaBlockFinishingInfo;

        r3 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        i0 = r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine>;

     label1:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i1;

        $z0 = r1.<groovyjarjarantlr.JavaBlockFinishingInfo: boolean needAnErrorClause>;

        if $z0 == 0 goto label5;

        $z1 = r1.<groovyjarjarantlr.JavaBlockFinishingInfo: boolean generatedAnIf>;

        if $z1 != 0 goto label2;

        $z3 = r1.<groovyjarjarantlr.JavaBlockFinishingInfo: boolean generatedSwitch>;

        if $z3 == 0 goto label5;

     label2:
        $z2 = r1.<groovyjarjarantlr.JavaBlockFinishingInfo: boolean generatedAnIf>;

        if $z2 == 0 goto label3;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("else {");

        goto label4;

     label3:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("{");

     label4:
        $i2 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i3 = $i2 + 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i3;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>(r3);

        $i4 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i5 = $i4 - 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i5;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("}");

     label5:
        $r5 = r1.<groovyjarjarantlr.JavaBlockFinishingInfo: java.lang.String postscript>;

        if $r5 == null goto label6;

        $r2 = r1.<groovyjarjarantlr.JavaBlockFinishingInfo: java.lang.String postscript>;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r2);

     label6:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        goto label9;

     label7:
        $r4 := @caughtexception;

     label8:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        throw $r4;

     label9:
        return;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    protected void genBlockInitAction(groovyjarjarantlr.AlternativeBlock)
    {
        groovyjarjarantlr.AlternativeBlock r0;
        groovyjarjarantlr.RuleBlock $r4;
        groovyjarjarantlr.JavaCodeGenerator r2;
        int $i0, $i1;
        java.lang.String $r1, $r3, $r5;

        r2 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.AlternativeBlock;

        $r1 = r0.<groovyjarjarantlr.AlternativeBlock: java.lang.String initAction>;

        if $r1 == null goto label1;

        $r3 = r0.<groovyjarjarantlr.AlternativeBlock: java.lang.String initAction>;

        $i0 = virtualinvoke r0.<groovyjarjarantlr.AlternativeBlock: int getLine()>();

        $r4 = r2.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        $r5 = virtualinvoke r2.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String processActionForSpecialSymbols(java.lang.String,int,groovyjarjarantlr.RuleBlock,groovyjarjarantlr.ActionTransInfo)>($r3, $i0, $r4, null);

        $i1 = virtualinvoke r0.<groovyjarjarantlr.AlternativeBlock: int getLine()>();

        virtualinvoke r2.<groovyjarjarantlr.JavaCodeGenerator: void printAction(java.lang.String,int)>($r5, $i1);

     label1:
        return;
    }

    protected void genBlockPreamble(groovyjarjarantlr.AlternativeBlock)
    {
        groovyjarjarantlr.LLkGrammarAnalyzer $r30;
        groovyjarjarantlr.collections.impl.Vector $r2, $r3, $r4;
        groovyjarjarantlr.RuleBlock r1;
        java.lang.Throwable $r47;
        java.lang.StringBuffer $r10, $r12, $r13, $r15, $r16, $r18, $r19, $r21, $r22, $r24, $r25, $r31, $r33, $r34, $r36, $r37, $r39, $r40, $r49, $r51, $r52, $r54, $r55, $r57, $r58;
        java.lang.String $r11, $r14, $r17, $r20, $r23, $r26, $r32, $r35, $r38, $r41, $r44, $r46, $r50, $r53, $r56, $r59;
        groovyjarjarantlr.JavaCodeGenerator r7;
        groovyjarjarantlr.GrammarAtom $r43, r45;
        groovyjarjarantlr.Grammar $r8, $r9, $r28, $r42, $r48, $r60;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        groovyjarjarantlr.AlternativeElement r6;
        groovyjarjarantlr.AlternativeBlock r0, $r27, $r29;
        int $i0, i1, $i2, i3;
        java.lang.Object $r5;

        r7 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.AlternativeBlock;

        $z0 = r0 instanceof groovyjarjarantlr.RuleBlock;

        if $z0 == 0 goto label13;

        r1 = (groovyjarjarantlr.RuleBlock) r0;

        $r2 = r1.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.collections.impl.Vector labeledElements>;

        if $r2 == null goto label13;

        i3 = 0;

     label01:
        $r3 = r1.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.collections.impl.Vector labeledElements>;

        $i0 = virtualinvoke $r3.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i3 >= $i0 goto label13;

        $r4 = r1.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.collections.impl.Vector labeledElements>;

        $r5 = virtualinvoke $r4.<groovyjarjarantlr.collections.impl.Vector: java.lang.Object elementAt(int)>(i3);

        r6 = (groovyjarjarantlr.AlternativeElement) $r5;

        i1 = r7.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine>;

     label02:
        $i2 = virtualinvoke r6.<groovyjarjarantlr.AlternativeElement: int getLine()>();

        r7.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = $i2;

        $z1 = r6 instanceof groovyjarjarantlr.RuleRefElement;

        if $z1 != 0 goto label03;

        $z9 = r6 instanceof groovyjarjarantlr.AlternativeBlock;

        if $z9 == 0 goto label07;

        $z11 = r6 instanceof groovyjarjarantlr.RuleBlock;

        if $z11 != 0 goto label07;

        $z12 = r6 instanceof groovyjarjarantlr.SynPredBlock;

        if $z12 != 0 goto label07;

     label03:
        $z2 = r6 instanceof groovyjarjarantlr.RuleRefElement;

        if $z2 != 0 goto label04;

        $r27 = (groovyjarjarantlr.AlternativeBlock) r6;

        $z5 = $r27.<groovyjarjarantlr.AlternativeBlock: boolean not>;

        if $z5 == 0 goto label04;

        $r30 = r7.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.LLkGrammarAnalyzer analyzer>;

        $r29 = (groovyjarjarantlr.AlternativeBlock) r6;

        $r28 = r7.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z6 = $r28 instanceof groovyjarjarantlr.LexerGrammar;

        $z7 = interfaceinvoke $r30.<groovyjarjarantlr.LLkGrammarAnalyzer: boolean subruleCanBeInverted(groovyjarjarantlr.AlternativeBlock,boolean)>($r29, $z6);

        if $z7 == 0 goto label04;

        $r31 = new java.lang.StringBuffer;

        specialinvoke $r31.<java.lang.StringBuffer: void <init>()>();

        $r32 = r7.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String labeledElementType>;

        $r33 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r35 = virtualinvoke r6.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        $r36 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r38 = r7.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String labeledElementInit>;

        $r39 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r38);

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r7.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r41);

        $r42 = r7.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z8 = $r42.<groovyjarjarantlr.Grammar: boolean buildAST>;

        if $z8 == 0 goto label09;

        virtualinvoke r7.<groovyjarjarantlr.JavaCodeGenerator: void genASTDeclaration(groovyjarjarantlr.AlternativeElement)>(r6);

        goto label09;

     label04:
        $r48 = r7.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z13 = $r48.<groovyjarjarantlr.Grammar: boolean buildAST>;

        if $z13 == 0 goto label05;

        virtualinvoke r7.<groovyjarjarantlr.JavaCodeGenerator: void genASTDeclaration(groovyjarjarantlr.AlternativeElement)>(r6);

     label05:
        $r8 = r7.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z3 = $r8 instanceof groovyjarjarantlr.LexerGrammar;

        if $z3 == 0 goto label06;

        $r21 = new java.lang.StringBuffer;

        specialinvoke $r21.<java.lang.StringBuffer: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Token ");

        $r23 = virtualinvoke r6.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=null;");

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r7.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r26);

     label06:
        $r9 = r7.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z4 = $r9 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z4 == 0 goto label09;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = r7.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String labeledElementType>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r14 = virtualinvoke r6.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r17 = r7.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String labeledElementInit>;

        $r18 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r7.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r20);

        goto label09;

     label07:
        $r49 = new java.lang.StringBuffer;

        specialinvoke $r49.<java.lang.StringBuffer: void <init>()>();

        $r50 = r7.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String labeledElementType>;

        $r51 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r50);

        $r52 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r53 = virtualinvoke r6.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        $r54 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r53);

        $r55 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r56 = r7.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String labeledElementInit>;

        $r57 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r56);

        $r58 = virtualinvoke $r57.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r59 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r7.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r59);

        $r60 = r7.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z14 = $r60.<groovyjarjarantlr.Grammar: boolean buildAST>;

        if $z14 == 0 goto label09;

        $z10 = r6 instanceof groovyjarjarantlr.GrammarAtom;

        if $z10 == 0 goto label08;

        $r43 = (groovyjarjarantlr.GrammarAtom) r6;

        $r44 = virtualinvoke $r43.<groovyjarjarantlr.GrammarAtom: java.lang.String getASTNodeType()>();

        if $r44 == null goto label08;

        r45 = (groovyjarjarantlr.GrammarAtom) r6;

        $r46 = virtualinvoke r45.<groovyjarjarantlr.GrammarAtom: java.lang.String getASTNodeType()>();

        virtualinvoke r7.<groovyjarjarantlr.JavaCodeGenerator: void genASTDeclaration(groovyjarjarantlr.AlternativeElement,java.lang.String)>(r6, $r46);

        goto label09;

     label08:
        virtualinvoke r7.<groovyjarjarantlr.JavaCodeGenerator: void genASTDeclaration(groovyjarjarantlr.AlternativeElement)>(r6);

     label09:
        r7.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i1;

        goto label12;

     label10:
        $r47 := @caughtexception;

     label11:
        r7.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i1;

        throw $r47;

     label12:
        i3 = i3 + 1;

        goto label01;

     label13:
        return;

        catch java.lang.Throwable from label02 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    protected void genCases(groovyjarjarantlr.collections.impl.BitSet, int)
    {
        java.lang.Throwable $r16;
        groovyjarjarantlr.Grammar $r3;
        byte b2, $b4;
        int[] $r2;
        java.lang.StringBuffer $r4, $r5, $r7, $r8, $r10, $r12, $r13, $r14;
        int i0, i1, $i3, i5, i6, $i7;
        java.lang.String $r6, $r9, $r15;
        boolean $z0, $z1, z2;
        java.io.PrintStream $r11;
        groovyjarjarantlr.JavaCodeGenerator r0;
        groovyjarjarantlr.collections.impl.BitSet r1;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.collections.impl.BitSet;

        i1 := @parameter1: int;

        i0 = r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine>;

     label01:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i1;

        $z0 = r0.<groovyjarjarantlr.JavaCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z0 == 0 goto label02;

        $r11 = <java.lang.System: java.io.PrintStream out>;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("genCases(");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r15);

     label02:
        $r2 = virtualinvoke r1.<groovyjarjarantlr.collections.impl.BitSet: int[] toArray()>();

        $r3 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z1 = $r3 instanceof groovyjarjarantlr.LexerGrammar;

        if $z1 == 0 goto label03;

        $b4 = 4;

        goto label04;

     label03:
        $b4 = 1;

     label04:
        b2 = $b4;

        i5 = 1;

        z2 = 1;

        i6 = 0;

     label05:
        $i7 = lengthof $r2;

        if i6 >= $i7 goto label10;

        if i5 != 1 goto label06;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void print(java.lang.String)>("");

        goto label07;

     label06:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void _print(java.lang.String)>("  ");

     label07:
        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("case ");

        $i3 = $r2[i6];

        $r6 = specialinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String getValueString(int)>($i3);

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void _print(java.lang.String)>($r9);

        if i5 != b2 goto label08;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void _println(java.lang.String)>("");

        z2 = 1;

        i5 = 1;

        goto label09;

     label08:
        i5 = i5 + 1;

        z2 = 0;

     label09:
        i6 = i6 + 1;

        goto label05;

     label10:
        if z2 != 0 goto label11;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void _println(java.lang.String)>("");

     label11:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        goto label14;

     label12:
        $r16 := @caughtexception;

     label13:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        throw $r16;

     label14:
        return;

        catch java.lang.Throwable from label01 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    public groovyjarjarantlr.JavaBlockFinishingInfo genCommonBlock(groovyjarjarantlr.AlternativeBlock, boolean)
    {
        groovyjarjarantlr.LLkGrammarAnalyzer $r124, $r125;
        groovyjarjarantlr.SynPredBlock $r20, $r27, $r28, $r34, $r35, $r60, $r113, $r120, $r122;
        java.lang.StringBuffer $r6, $r7, $r10, $r11, $r23, $r24, $r25, $r30, $r31, $r32, $r43, $r44, $r45, $r46, $r47, $r49, $r50, $r51, $r54, $r55, $r56, $r57, $r62, $r63, $r64, $r67, $r68, $r69, $r73, $r74, $r75, $r76, $r84, $r85, $r89, $r90, $r96, $r97, $r98, $r129, $r130, $r133, $r134, $r139, $r140, $r142, $r143, $r148, $r149, $r150, $r164, $r165, $r166, $r167, $r168, $r169, $r170, $r171, $r172, $r174, $r175, $r176, $r177, $r178, $r179;
        groovyjarjarantlr.Grammar $r4, $r13, $r14, $r15, $r21, $r40, $r41, $r58, $r80, $r92, $r94, $r106, $r116, $r123, $r136, $r155;
        groovyjarjarantlr.CharFormatter $r52;
        groovyjarjarantlr.AlternativeElement $r16, $r103, $r105, $r109, $r110;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, i36, i37, i38, i39, $i40, i41, $i42, $i43, i44, i45, $i46, i47, i48, $i50, $i52, $i54, $i56;
        java.io.PrintStream $r72, $r81, $r83, $r88, $r145, $r147;
        groovyjarjarantlr.Lookahead $r18, $r79, $r126, r158;
        groovyjarjarantlr.Lookahead[] $r17, $r78, $r101;
        groovyjarjarantlr.collections.impl.Vector $r3, $r156, $r157, $r159;
        groovyjarjarantlr.JavaBlockFinishingInfo $r163;
        groovyjarjarantlr.RuleBlock $r37;
        java.lang.Throwable $r152, $r153;
        groovyjarjarantlr.Tool $r107, $r117;
        java.lang.String $r8, $r26, $r33, $r38, $r39, $r53, $r59, $r65, $r70, $r77, $r86, $r91, $r93, $r99, $r108, $r114, $r115, $r118, $r127, $r132, $r135, $r138, $r141, $r144, $r151, r154, r160, $r161, r162;
        groovyjarjarantlr.ActionTransInfo $r173;
        groovyjarjarantlr.JavaCodeGenerator r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, z27, $z28, $z29, $z30, $z31, $z32, $z33, z34, $z35, $z36, z37, z38;
        groovyjarjarantlr.collections.impl.BitSet $r19, $r102, $r104, $r131;
        groovyjarjarantlr.Alternative $r12, $r100, $r111, $r112, $r119, $r121;
        groovyjarjarantlr.AlternativeBlock r1;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.AlternativeBlock;

        z19 := @parameter1: boolean;

        i0 = r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine>;

     label01:
        $i1 = virtualinvoke r1.<groovyjarjarantlr.AlternativeBlock: int getLine()>();

        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = $i1;

        i36 = 0;

        z27 = 0;

        z38 = 0;

        z37 = 0;

        i37 = 0;

        $r163 = new groovyjarjarantlr.JavaBlockFinishingInfo;

        specialinvoke $r163.<groovyjarjarantlr.JavaBlockFinishingInfo: void <init>()>();

        $z0 = r0.<groovyjarjarantlr.JavaCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z0 == 0 goto label02;

        $r147 = <java.lang.System: java.io.PrintStream out>;

        $r164 = new java.lang.StringBuffer;

        specialinvoke $r164.<java.lang.StringBuffer: void <init>()>();

        $r148 = virtualinvoke $r164.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("genCommonBlock(");

        $r149 = virtualinvoke $r148.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r150 = virtualinvoke $r149.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r151 = virtualinvoke $r150.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r147.<java.io.PrintStream: void println(java.lang.String)>($r151);

     label02:
        $z26 = r0.<groovyjarjarantlr.JavaCodeGenerator: boolean genAST>;

        $z1 = r0.<groovyjarjarantlr.JavaCodeGenerator: boolean genAST>;

        if $z1 == 0 goto label03;

        $z25 = virtualinvoke r1.<groovyjarjarantlr.AlternativeBlock: boolean getAutoGen()>();

        if $z25 == 0 goto label03;

        $z28 = 1;

        goto label04;

     label03:
        $z28 = 0;

     label04:
        r0.<groovyjarjarantlr.JavaCodeGenerator: boolean genAST> = $z28;

        $z29 = r0.<groovyjarjarantlr.JavaCodeGenerator: boolean saveText>;

        $z30 = r0.<groovyjarjarantlr.JavaCodeGenerator: boolean saveText>;

        if $z30 == 0 goto label05;

        $z24 = virtualinvoke r1.<groovyjarjarantlr.AlternativeBlock: boolean getAutoGen()>();

        if $z24 == 0 goto label05;

        $z31 = 1;

        goto label06;

     label05:
        $z31 = 0;

     label06:
        r0.<groovyjarjarantlr.JavaCodeGenerator: boolean saveText> = $z31;

        $z32 = r1.<groovyjarjarantlr.AlternativeBlock: boolean not>;

        if $z32 == 0 goto label11;

        $r124 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.LLkGrammarAnalyzer analyzer>;

        $r123 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z20 = $r123 instanceof groovyjarjarantlr.LexerGrammar;

        $z21 = interfaceinvoke $r124.<groovyjarjarantlr.LLkGrammarAnalyzer: boolean subruleCanBeInverted(groovyjarjarantlr.AlternativeBlock,boolean)>(r1, $z20);

        if $z21 == 0 goto label11;

        $z22 = r0.<groovyjarjarantlr.JavaCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z22 == 0 goto label07;

        $r145 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r145.<java.io.PrintStream: void println(java.lang.String)>("special case: ~(subrule)");

     label07:
        $r125 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.LLkGrammarAnalyzer analyzer>;

        $r126 = interfaceinvoke $r125.<groovyjarjarantlr.LLkGrammarAnalyzer: groovyjarjarantlr.Lookahead look(int,groovyjarjarantlr.AlternativeBlock)>(1, r1);

        $r127 = virtualinvoke r1.<groovyjarjarantlr.AlternativeBlock: java.lang.String getLabel()>();

        if $r127 == null goto label08;

        $i35 = r0.<groovyjarjarantlr.JavaCodeGenerator: int syntacticPredLevel>;

        if $i35 != 0 goto label08;

        $r165 = new java.lang.StringBuffer;

        specialinvoke $r165.<java.lang.StringBuffer: void <init>()>();

        $r138 = virtualinvoke r1.<groovyjarjarantlr.AlternativeBlock: java.lang.String getLabel()>();

        $r139 = virtualinvoke $r165.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r138);

        $r140 = virtualinvoke $r139.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r141 = r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String lt1Value>;

        $r142 = virtualinvoke $r140.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r141);

        $r143 = virtualinvoke $r142.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r144 = virtualinvoke $r143.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r144);

     label08:
        specialinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genElementAST(groovyjarjarantlr.AlternativeElement)>(r1);

        r154 = "";

        $r155 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z33 = $r155 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z33 == 0 goto label09;

        r154 = "_t,";

     label09:
        $r166 = new java.lang.StringBuffer;

        specialinvoke $r166.<java.lang.StringBuffer: void <init>()>();

        $r129 = virtualinvoke $r166.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("match(");

        $r130 = virtualinvoke $r129.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r154);

        $r131 = $r126.<groovyjarjarantlr.Lookahead: groovyjarjarantlr.collections.impl.BitSet fset>;

        $i34 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: int markBitsetForGen(groovyjarjarantlr.collections.impl.BitSet)>($r131);

        $r132 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String getBitsetName(int)>($i34);

        $r133 = virtualinvoke $r130.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r132);

        $r134 = virtualinvoke $r133.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(");");

        $r135 = virtualinvoke $r134.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r135);

        $r136 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z23 = $r136 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z23 == 0 goto label10;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("_t = _t.getNextSibling();");

     label10:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        return $r163;

     label11:
        $r3 = virtualinvoke r1.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.collections.impl.Vector getAlternatives()>();

        $i2 = virtualinvoke $r3.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if $i2 != 1 goto label15;

        $r112 = virtualinvoke r1.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Alternative getAlternativeAt(int)>(0);

        $r113 = $r112.<groovyjarjarantlr.Alternative: groovyjarjarantlr.SynPredBlock synPred>;

        if $r113 == null goto label12;

        $r117 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r116 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r118 = virtualinvoke $r116.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $r119 = virtualinvoke r1.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Alternative getAlternativeAt(int)>(0);

        $r120 = $r119.<groovyjarjarantlr.Alternative: groovyjarjarantlr.SynPredBlock synPred>;

        $i32 = virtualinvoke $r120.<groovyjarjarantlr.SynPredBlock: int getLine()>();

        $r121 = virtualinvoke r1.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Alternative getAlternativeAt(int)>(0);

        $r122 = $r121.<groovyjarjarantlr.Alternative: groovyjarjarantlr.SynPredBlock synPred>;

        $i33 = virtualinvoke $r122.<groovyjarjarantlr.SynPredBlock: int getColumn()>();

        virtualinvoke $r117.<groovyjarjarantlr.Tool: void warning(java.lang.String,java.lang.String,int,int)>("Syntactic predicate superfluous for single alternative", $r118, $i32, $i33);

     label12:
        if z19 == 0 goto label15;

        $r114 = $r112.<groovyjarjarantlr.Alternative: java.lang.String semPred>;

        if $r114 == null goto label13;

        $r115 = $r112.<groovyjarjarantlr.Alternative: java.lang.String semPred>;

        $i31 = r1.<groovyjarjarantlr.AlternativeBlock: int line>;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genSemPred(java.lang.String,int)>($r115, $i31);

     label13:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genAlt(groovyjarjarantlr.Alternative,groovyjarjarantlr.AlternativeBlock)>($r112, r1);

     label14:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        return $r163;

     label15:
        i38 = 0;

        i39 = 0;

     label16:
        $r156 = virtualinvoke r1.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.collections.impl.Vector getAlternatives()>();

        $i40 = virtualinvoke $r156.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i39 >= $i40 goto label18;

        $r111 = virtualinvoke r1.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Alternative getAlternativeAt(int)>(i39);

        $z18 = staticinvoke <groovyjarjarantlr.JavaCodeGenerator: boolean suitableForCaseExpression(groovyjarjarantlr.Alternative)>($r111);

        if $z18 == 0 goto label17;

        i38 = i38 + 1;

     label17:
        i39 = i39 + 1;

        goto label16;

     label18:
        $i3 = r0.<groovyjarjarantlr.JavaCodeGenerator: int makeSwitchThreshold>;

        if i38 < $i3 goto label25;

        $r93 = specialinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String lookaheadString(int)>(1);

        z27 = 1;

        z38 = 1;

        z37 = 1;

        $r94 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z15 = $r94 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z15 == 0 goto label19;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("if (_t==null) _t=ASTNULL;");

     label19:
        $r167 = new java.lang.StringBuffer;

        specialinvoke $r167.<java.lang.StringBuffer: void <init>()>();

        $r96 = virtualinvoke $r167.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("switch ( ");

        $r97 = virtualinvoke $r96.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r93);

        $r98 = virtualinvoke $r97.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") {");

        $r99 = virtualinvoke $r98.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r99);

        i41 = 0;

     label20:
        $r157 = r1.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.collections.impl.Vector alternatives>;

        $i42 = virtualinvoke $r157.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i41 >= $i42 goto label24;

        $r100 = virtualinvoke r1.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Alternative getAlternativeAt(int)>(i41);

        $z16 = staticinvoke <groovyjarjarantlr.JavaCodeGenerator: boolean suitableForCaseExpression(groovyjarjarantlr.Alternative)>($r100);

        if $z16 != 0 goto label21;

        goto label23;

     label21:
        $r101 = $r100.<groovyjarjarantlr.Alternative: groovyjarjarantlr.Lookahead[] cache>;

        r158 = $r101[1];

        $r102 = r158.<groovyjarjarantlr.Lookahead: groovyjarjarantlr.collections.impl.BitSet fset>;

        $i22 = virtualinvoke $r102.<groovyjarjarantlr.collections.impl.BitSet: int degree()>();

        if $i22 != 0 goto label22;

        $z17 = virtualinvoke r158.<groovyjarjarantlr.Lookahead: boolean containsEpsilon()>();

        if $z17 != 0 goto label22;

        $r107 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r106 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r108 = virtualinvoke $r106.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $r109 = $r100.<groovyjarjarantlr.Alternative: groovyjarjarantlr.AlternativeElement head>;

        $i29 = virtualinvoke $r109.<groovyjarjarantlr.AlternativeElement: int getLine()>();

        $r110 = $r100.<groovyjarjarantlr.Alternative: groovyjarjarantlr.AlternativeElement head>;

        $i30 = virtualinvoke $r110.<groovyjarjarantlr.AlternativeElement: int getColumn()>();

        virtualinvoke $r107.<groovyjarjarantlr.Tool: void warning(java.lang.String,java.lang.String,int,int)>("Alternate omitted due to empty prediction set", $r108, $i29, $i30);

        goto label23;

     label22:
        $r104 = r158.<groovyjarjarantlr.Lookahead: groovyjarjarantlr.collections.impl.BitSet fset>;

        $r103 = $r100.<groovyjarjarantlr.Alternative: groovyjarjarantlr.AlternativeElement head>;

        $i23 = virtualinvoke $r103.<groovyjarjarantlr.AlternativeElement: int getLine()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genCases(groovyjarjarantlr.collections.impl.BitSet,int)>($r104, $i23);

        $r105 = $r100.<groovyjarjarantlr.Alternative: groovyjarjarantlr.AlternativeElement head>;

        $i24 = virtualinvoke $r105.<groovyjarjarantlr.AlternativeElement: int getLine()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String,int)>("{", $i24);

        $i25 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i26 = $i25 + 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i26;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genAlt(groovyjarjarantlr.Alternative,groovyjarjarantlr.AlternativeBlock)>($r100, r1);

        $i50 = (int) -999;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String,int)>("break;", $i50);

        $i27 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i28 = $i27 - 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i28;

        $i52 = (int) -999;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String,int)>("}", $i52);

     label23:
        i41 = i41 + 1;

        goto label20;

     label24:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("default:");

        $i20 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i21 = $i20 + 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i21;

     label25:
        $r4 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z2 = $r4 instanceof groovyjarjarantlr.LexerGrammar;

        if $z2 == 0 goto label26;

        $r92 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $i43 = $r92.<groovyjarjarantlr.Grammar: int maxk>;

        goto label27;

     label26:
        $i43 = 0;

     label27:
        i44 = $i43;

     label28:
        if i44 < 0 goto label57;

        $z3 = r0.<groovyjarjarantlr.JavaCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z3 == 0 goto label29;

        $r88 = <java.lang.System: java.io.PrintStream out>;

        $r168 = new java.lang.StringBuffer;

        specialinvoke $r168.<java.lang.StringBuffer: void <init>()>();

        $r89 = virtualinvoke $r168.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("checking depth ");

        $r90 = virtualinvoke $r89.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i44);

        $r91 = virtualinvoke $r90.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r88.<java.io.PrintStream: void println(java.lang.String)>($r91);

     label29:
        i45 = 0;

     label30:
        $r159 = r1.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.collections.impl.Vector alternatives>;

        $i46 = virtualinvoke $r159.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i45 >= $i46 goto label56;

        $r12 = virtualinvoke r1.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Alternative getAlternativeAt(int)>(i45);

        $z4 = r0.<groovyjarjarantlr.JavaCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z4 == 0 goto label31;

        $r83 = <java.lang.System: java.io.PrintStream out>;

        $r169 = new java.lang.StringBuffer;

        specialinvoke $r169.<java.lang.StringBuffer: void <init>()>();

        $r84 = virtualinvoke $r169.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("genAlt: ");

        $r85 = virtualinvoke $r84.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i45);

        $r86 = virtualinvoke $r85.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r83.<java.io.PrintStream: void println(java.lang.String)>($r86);

     label31:
        if z38 == 0 goto label32;

        $z13 = staticinvoke <groovyjarjarantlr.JavaCodeGenerator: boolean suitableForCaseExpression(groovyjarjarantlr.Alternative)>($r12);

        if $z13 == 0 goto label32;

        $z14 = r0.<groovyjarjarantlr.JavaCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z14 == 0 goto label55;

        $r81 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r81.<java.io.PrintStream: void println(java.lang.String)>("ignoring alt because it was in the switch");

        goto label55;

     label32:
        $r13 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z5 = $r13 instanceof groovyjarjarantlr.LexerGrammar;

        if $z5 == 0 goto label36;

        i47 = $r12.<groovyjarjarantlr.Alternative: int lookaheadDepth>;

        if i47 != 2147483647 goto label33;

        $r80 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        i47 = $r80.<groovyjarjarantlr.Grammar: int maxk>;

     label33:
        if i47 < 1 goto label34;

        $r78 = $r12.<groovyjarjarantlr.Alternative: groovyjarjarantlr.Lookahead[] cache>;

        $r79 = $r78[i47];

        $z12 = virtualinvoke $r79.<groovyjarjarantlr.Lookahead: boolean containsEpsilon()>();

        if $z12 == 0 goto label34;

        $i54 = (int) -1;

        i47 = i47 + $i54;

        goto label33;

     label34:
        if i47 == i44 goto label35;

        $z11 = r0.<groovyjarjarantlr.JavaCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z11 == 0 goto label55;

        $r72 = <java.lang.System: java.io.PrintStream out>;

        $r170 = new java.lang.StringBuffer;

        specialinvoke $r170.<java.lang.StringBuffer: void <init>()>();

        $r73 = virtualinvoke $r170.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ignoring alt because effectiveDepth!=altDepth;");

        $r74 = virtualinvoke $r73.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i47);

        $r75 = virtualinvoke $r74.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("!=");

        $r76 = virtualinvoke $r75.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i44);

        $r77 = virtualinvoke $r76.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r72.<java.io.PrintStream: void println(java.lang.String)>($r77);

        goto label55;

     label35:
        z34 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: boolean lookaheadIsEmpty(groovyjarjarantlr.Alternative,int)>($r12, i47);

        r160 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String getLookaheadTestExpression(groovyjarjarantlr.Alternative,int)>($r12, i47);

        goto label37;

     label36:
        $r14 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $i6 = $r14.<groovyjarjarantlr.Grammar: int maxk>;

        z34 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: boolean lookaheadIsEmpty(groovyjarjarantlr.Alternative,int)>($r12, $i6);

        $r15 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $i7 = $r15.<groovyjarjarantlr.Grammar: int maxk>;

        r160 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String getLookaheadTestExpression(groovyjarjarantlr.Alternative,int)>($r12, $i7);

     label37:
        $i19 = r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine>;

     label38:
        $r16 = $r12.<groovyjarjarantlr.Alternative: groovyjarjarantlr.AlternativeElement head>;

        $i8 = virtualinvoke $r16.<groovyjarjarantlr.AlternativeElement: int getLine()>();

        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = $i8;

        $r17 = $r12.<groovyjarjarantlr.Alternative: groovyjarjarantlr.Lookahead[] cache>;

        $r18 = $r17[1];

        $r19 = $r18.<groovyjarjarantlr.Lookahead: groovyjarjarantlr.collections.impl.BitSet fset>;

        $i9 = virtualinvoke $r19.<groovyjarjarantlr.collections.impl.BitSet: int degree()>();

        if $i9 <= 127 goto label40;

        $z10 = staticinvoke <groovyjarjarantlr.JavaCodeGenerator: boolean suitableForCaseExpression(groovyjarjarantlr.Alternative)>($r12);

        if $z10 == 0 goto label40;

        if i36 != 0 goto label39;

        $r171 = new java.lang.StringBuffer;

        specialinvoke $r171.<java.lang.StringBuffer: void <init>()>();

        $r67 = virtualinvoke $r171.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("if ");

        $r68 = virtualinvoke $r67.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r160);

        $r69 = virtualinvoke $r68.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" {");

        $r70 = virtualinvoke $r69.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r70);

        goto label51;

     label39:
        $r172 = new java.lang.StringBuffer;

        specialinvoke $r172.<java.lang.StringBuffer: void <init>()>();

        $r62 = virtualinvoke $r172.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("else if ");

        $r63 = virtualinvoke $r62.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r160);

        $r64 = virtualinvoke $r63.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" {");

        $r65 = virtualinvoke $r64.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r65);

        goto label51;

     label40:
        if z34 == 0 goto label43;

        $r59 = $r12.<groovyjarjarantlr.Alternative: java.lang.String semPred>;

        if $r59 != null goto label43;

        $r60 = $r12.<groovyjarjarantlr.Alternative: groovyjarjarantlr.SynPredBlock synPred>;

        if $r60 != null goto label43;

        if i36 != 0 goto label41;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("{");

        goto label42;

     label41:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("else {");

     label42:
        $r163.<groovyjarjarantlr.JavaBlockFinishingInfo: boolean needAnErrorClause> = 0;

        goto label51;

     label43:
        $r161 = $r12.<groovyjarjarantlr.Alternative: java.lang.String semPred>;

        if $r161 == null goto label46;

        $r173 = new groovyjarjarantlr.ActionTransInfo;

        specialinvoke $r173.<groovyjarjarantlr.ActionTransInfo: void <init>()>();

        $r38 = $r12.<groovyjarjarantlr.Alternative: java.lang.String semPred>;

        $i17 = r1.<groovyjarjarantlr.AlternativeBlock: int line>;

        $r37 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        $r39 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String processActionForSpecialSymbols(java.lang.String,int,groovyjarjarantlr.RuleBlock,groovyjarjarantlr.ActionTransInfo)>($r38, $i17, $r37, $r173);

        $r40 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z7 = $r40 instanceof groovyjarjarantlr.ParserGrammar;

        if $z7 != 0 goto label44;

        $r58 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z9 = $r58 instanceof groovyjarjarantlr.LexerGrammar;

        if $z9 == 0 goto label45;

     label44:
        $r41 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z8 = $r41.<groovyjarjarantlr.Grammar: boolean debuggingOutput>;

        if $z8 == 0 goto label45;

        $r174 = new java.lang.StringBuffer;

        specialinvoke $r174.<java.lang.StringBuffer: void <init>()>();

        $r49 = virtualinvoke $r174.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $r50 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r160);

        $r51 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&& fireSemanticPredicateEvaluated(antlr.debug.SemanticPredicateEvent.PREDICTING,");

        $r52 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.CharFormatter charFormatter>;

        $r53 = interfaceinvoke $r52.<groovyjarjarantlr.CharFormatter: java.lang.String escapeString(java.lang.String)>($r39);

        $i18 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: int addSemPred(java.lang.String)>($r53);

        $r54 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i18);

        $r55 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r39);

        $r57 = virtualinvoke $r56.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("))");

        r160 = virtualinvoke $r57.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label46;

     label45:
        $r175 = new java.lang.StringBuffer;

        specialinvoke $r175.<java.lang.StringBuffer: void <init>()>();

        $r43 = virtualinvoke $r175.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r160);

        $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&&(");

        $r46 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r39);

        $r47 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("))");

        r160 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.String toString()>();

     label46:
        if i36 <= 0 goto label48;

        $r28 = $r12.<groovyjarjarantlr.Alternative: groovyjarjarantlr.SynPredBlock synPred>;

        if $r28 == null goto label47;

        $r34 = $r12.<groovyjarjarantlr.Alternative: groovyjarjarantlr.SynPredBlock synPred>;

        $i14 = virtualinvoke $r34.<groovyjarjarantlr.SynPredBlock: int getLine()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String,int)>("else {", $i14);

        $i15 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i16 = $i15 + 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i16;

        $r35 = $r12.<groovyjarjarantlr.Alternative: groovyjarjarantlr.SynPredBlock synPred>;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genSynPred(groovyjarjarantlr.SynPredBlock,java.lang.String)>($r35, r160);

        i37 = i37 + 1;

        goto label51;

     label47:
        $r176 = new java.lang.StringBuffer;

        specialinvoke $r176.<java.lang.StringBuffer: void <init>()>();

        $r30 = virtualinvoke $r176.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("else if ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r160);

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" {");

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r33);

        goto label51;

     label48:
        $r20 = $r12.<groovyjarjarantlr.Alternative: groovyjarjarantlr.SynPredBlock synPred>;

        if $r20 == null goto label49;

        $r27 = $r12.<groovyjarjarantlr.Alternative: groovyjarjarantlr.SynPredBlock synPred>;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genSynPred(groovyjarjarantlr.SynPredBlock,java.lang.String)>($r27, r160);

        goto label51;

     label49:
        $r21 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z6 = $r21 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z6 == 0 goto label50;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("if (_t==null) _t=ASTNULL;");

     label50:
        $r177 = new java.lang.StringBuffer;

        specialinvoke $r177.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r177.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("if ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r160);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" {");

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r26);

     label51:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = $i19;

        goto label54;

     label52:
        $r153 := @caughtexception;

     label53:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = $i19;

        throw $r153;

     label54:
        i36 = i36 + 1;

        $i10 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i11 = $i10 + 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i11;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genAlt(groovyjarjarantlr.Alternative,groovyjarjarantlr.AlternativeBlock)>($r12, r1);

        $i12 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i13 = $i12 - 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i13;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("}");

     label55:
        i45 = i45 + 1;

        goto label30;

     label56:
        $i56 = (int) -1;

        i44 = i44 + $i56;

        goto label28;

     label57:
        r162 = "";

        i48 = 1;

     label58:
        if i48 > i37 goto label59;

        $r178 = new java.lang.StringBuffer;

        specialinvoke $r178.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r178.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r162);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("}");

        r162 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        i48 = i48 + 1;

        goto label58;

     label59:
        r0.<groovyjarjarantlr.JavaCodeGenerator: boolean genAST> = $z26;

        r0.<groovyjarjarantlr.JavaCodeGenerator: boolean saveText> = $z29;

        if z37 == 0 goto label62;

        $i4 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i5 = $i4 - 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i5;

        $r179 = new java.lang.StringBuffer;

        specialinvoke $r179.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r179.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r162);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("}");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        $r163.<groovyjarjarantlr.JavaBlockFinishingInfo: java.lang.String postscript> = $r8;

        $r163.<groovyjarjarantlr.JavaBlockFinishingInfo: boolean generatedSwitch> = 1;

        if i36 <= 0 goto label60;

        $z35 = 1;

        goto label61;

     label60:
        $z35 = 0;

     label61:
        $r163.<groovyjarjarantlr.JavaBlockFinishingInfo: boolean generatedAnIf> = $z35;

        goto label65;

     label62:
        $r163.<groovyjarjarantlr.JavaBlockFinishingInfo: java.lang.String postscript> = r162;

        $r163.<groovyjarjarantlr.JavaBlockFinishingInfo: boolean generatedSwitch> = 0;

        if i36 <= 0 goto label63;

        $z36 = 1;

        goto label64;

     label63:
        $z36 = 0;

     label64:
        $r163.<groovyjarjarantlr.JavaBlockFinishingInfo: boolean generatedAnIf> = $z36;

     label65:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        return $r163;

     label66:
        $r152 := @caughtexception;

     label67:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        throw $r152;

        catch java.lang.Throwable from label38 to label51 with label52;
        catch java.lang.Throwable from label52 to label53 with label52;
        catch java.lang.Throwable from label01 to label10 with label66;
        catch java.lang.Throwable from label11 to label14 with label66;
        catch java.lang.Throwable from label15 to label65 with label66;
        catch java.lang.Throwable from label66 to label67 with label66;
    }

    private static boolean suitableForCaseExpression(groovyjarjarantlr.Alternative)
    {
        groovyjarjarantlr.Lookahead[] $r2, $r4;
        groovyjarjarantlr.collections.impl.BitSet $r6;
        groovyjarjarantlr.Alternative r0;
        groovyjarjarantlr.Lookahead $r3, $r5;
        int $i0, $i1;
        java.lang.String $r1;
        boolean $z0, $z1;

        r0 := @parameter0: groovyjarjarantlr.Alternative;

        $i0 = r0.<groovyjarjarantlr.Alternative: int lookaheadDepth>;

        if $i0 != 1 goto label1;

        $r1 = r0.<groovyjarjarantlr.Alternative: java.lang.String semPred>;

        if $r1 != null goto label1;

        $r2 = r0.<groovyjarjarantlr.Alternative: groovyjarjarantlr.Lookahead[] cache>;

        $r3 = $r2[1];

        $z0 = virtualinvoke $r3.<groovyjarjarantlr.Lookahead: boolean containsEpsilon()>();

        if $z0 != 0 goto label1;

        $r4 = r0.<groovyjarjarantlr.Alternative: groovyjarjarantlr.Lookahead[] cache>;

        $r5 = $r4[1];

        $r6 = $r5.<groovyjarjarantlr.Lookahead: groovyjarjarantlr.collections.impl.BitSet fset>;

        $i1 = virtualinvoke $r6.<groovyjarjarantlr.collections.impl.BitSet: int degree()>();

        if $i1 > 127 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private void genElementAST(groovyjarjarantlr.AlternativeElement)
    {
        java.lang.Throwable $r83;
        java.lang.StringBuffer $r4, $r5, $r6, $r8, $r9, $r10, $r11, $r13, $r14, $r15, $r16, $r18, $r19, $r20, $r22, $r23, $r26, $r27, $r28, $r29, $r30, $r32, $r33, $r34, $r37, $r38, $r40, $r41, $r42, $r44, $r45, $r47, $r48, $r49, $r52, $r53, $r55, $r57, $r58, $r59, $r60, $r69, $r70, $r71, $r72, $r74, $r76, $r77, $r78, $r79, $r80, $r81, $r90, $r91, $r92;
        java.lang.String $r7, $r12, $r17, $r21, $r24, $r31, $r36, $r39, $r43, $r46, $r51, $r54, $r56, $r61, $r62, $r63, $r64, $r65, $r66, $r68, $r73, $r75, $r82, r84, $r86, r87, r88, $r93, $r95, r96;
        groovyjarjarantlr.JavaCodeGenerator r0;
        groovyjarjarantlr.GrammarAtom $r35, $r50, r89;
        groovyjarjarantlr.Grammar $r2, $r3, $r25, $r67, $r85, $r94;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, z10, $z11, $z12, z13, $z14, $z15;
        groovyjarjarantlr.AlternativeElement r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.AlternativeElement;

        i0 = r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine>;

     label01:
        $i1 = virtualinvoke r1.<groovyjarjarantlr.AlternativeElement: int getLine()>();

        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = $i1;

        $r2 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r2 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z0 == 0 goto label03;

        $r67 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z8 = $r67.<groovyjarjarantlr.Grammar: boolean buildAST>;

        if $z8 != 0 goto label03;

        $r68 = virtualinvoke r1.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        if $r68 != null goto label02;

        r84 = r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String lt1Value>;

        $r69 = new java.lang.StringBuffer;

        specialinvoke $r69.<java.lang.StringBuffer: void <init>()>();

        $r70 = virtualinvoke $r69.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("tmp");

        $i8 = r0.<groovyjarjarantlr.JavaCodeGenerator: int astVarNumber>;

        $r71 = virtualinvoke $r70.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i8);

        $r72 = virtualinvoke $r71.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_AST");

        $r73 = virtualinvoke $r72.<java.lang.StringBuffer: java.lang.String toString()>();

        $i9 = r0.<groovyjarjarantlr.JavaCodeGenerator: int astVarNumber>;

        $i10 = $i9 + 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int astVarNumber> = $i10;

        specialinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void mapTreeVariable(groovyjarjarantlr.AlternativeElement,java.lang.String)>(r1, $r73);

        $r74 = new java.lang.StringBuffer;

        specialinvoke $r74.<java.lang.StringBuffer: void <init>()>();

        $r75 = r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String labeledElementASTType>;

        $r76 = virtualinvoke $r74.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r75);

        $r77 = virtualinvoke $r76.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r78 = virtualinvoke $r77.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r73);

        $r79 = virtualinvoke $r78.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_in = ");

        $r80 = virtualinvoke $r79.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r84);

        $r81 = virtualinvoke $r80.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r82 = virtualinvoke $r81.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r82);

     label02:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        return;

     label03:
        $r3 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z1 = $r3.<groovyjarjarantlr.Grammar: boolean buildAST>;

        if $z1 == 0 goto label25;

        $i2 = r0.<groovyjarjarantlr.JavaCodeGenerator: int syntacticPredLevel>;

        if $i2 != 0 goto label25;

        $z2 = r0.<groovyjarjarantlr.JavaCodeGenerator: boolean genAST>;

        if $z2 == 0 goto label05;

        $r66 = virtualinvoke r1.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        if $r66 != null goto label04;

        $i7 = virtualinvoke r1.<groovyjarjarantlr.AlternativeElement: int getAutoGenType()>();

        if $i7 == 3 goto label05;

     label04:
        $z9 = 1;

        goto label06;

     label05:
        $z9 = 0;

     label06:
        z10 = $z9;

        $i11 = virtualinvoke r1.<groovyjarjarantlr.AlternativeElement: int getAutoGenType()>();

        if $i11 == 3 goto label07;

        $z7 = r1 instanceof groovyjarjarantlr.TokenRefElement;

        if $z7 == 0 goto label07;

        z10 = 1;

     label07:
        $r85 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z11 = $r85.<groovyjarjarantlr.Grammar: boolean hasSyntacticPredicate>;

        if $z11 == 0 goto label08;

        if z10 == 0 goto label08;

        $z12 = 1;

        goto label09;

     label08:
        $z12 = 0;

     label09:
        z13 = $z12;

        $r86 = virtualinvoke r1.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        if $r86 == null goto label10;

        r87 = virtualinvoke r1.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        r88 = virtualinvoke r1.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        goto label11;

     label10:
        r87 = r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String lt1Value>;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("tmp");

        $i3 = r0.<groovyjarjarantlr.JavaCodeGenerator: int astVarNumber>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

        r88 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        $i4 = r0.<groovyjarjarantlr.JavaCodeGenerator: int astVarNumber>;

        $i5 = $i4 + 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int astVarNumber> = $i5;

     label11:
        if z10 == 0 goto label14;

        $z6 = r1 instanceof groovyjarjarantlr.GrammarAtom;

        if $z6 == 0 goto label13;

        r89 = (groovyjarjarantlr.GrammarAtom) r1;

        $r63 = virtualinvoke r89.<groovyjarjarantlr.GrammarAtom: java.lang.String getASTNodeType()>();

        if $r63 == null goto label12;

        $r65 = virtualinvoke r89.<groovyjarjarantlr.GrammarAtom: java.lang.String getASTNodeType()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genASTDeclaration(groovyjarjarantlr.AlternativeElement,java.lang.String,java.lang.String)>(r1, r88, $r65);

        goto label14;

     label12:
        $r64 = r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String labeledElementASTType>;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genASTDeclaration(groovyjarjarantlr.AlternativeElement,java.lang.String,java.lang.String)>(r1, r88, $r64);

        goto label14;

     label13:
        $r62 = r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String labeledElementASTType>;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genASTDeclaration(groovyjarjarantlr.AlternativeElement,java.lang.String,java.lang.String)>(r1, r88, $r62);

     label14:
        $r90 = new java.lang.StringBuffer;

        specialinvoke $r90.<java.lang.StringBuffer: void <init>()>();

        $r91 = virtualinvoke $r90.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r88);

        $r92 = virtualinvoke $r91.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_AST");

        $r93 = virtualinvoke $r92.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void mapTreeVariable(groovyjarjarantlr.AlternativeElement,java.lang.String)>(r1, $r93);

        $r94 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z14 = $r94 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z14 == 0 goto label15;

        $r55 = new java.lang.StringBuffer;

        specialinvoke $r55.<java.lang.StringBuffer: void <init>()>();

        $r56 = r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String labeledElementASTType>;

        $r57 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r56);

        $r58 = virtualinvoke $r57.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r59 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r93);

        $r60 = virtualinvoke $r59.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_in = null;");

        $r61 = virtualinvoke $r60.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r61);

     label15:
        if z13 == 0 goto label16;

     label16:
        $r7 = virtualinvoke r1.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        if $r7 == null goto label18;

        $z5 = r1 instanceof groovyjarjarantlr.GrammarAtom;

        if $z5 == 0 goto label17;

        $r47 = new java.lang.StringBuffer;

        specialinvoke $r47.<java.lang.StringBuffer: void <init>()>();

        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r93);

        $r49 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r50 = (groovyjarjarantlr.GrammarAtom) r1;

        $r51 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String getASTCreateString(groovyjarjarantlr.GrammarAtom,java.lang.String)>($r50, r87);

        $r52 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r51);

        $r53 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r54 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r54);

        goto label18;

     label17:
        $r40 = new java.lang.StringBuffer;

        specialinvoke $r40.<java.lang.StringBuffer: void <init>()>();

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r93);

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r43 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String getASTCreateString(java.lang.String)>(r87);

        $r44 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r43);

        $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r46 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r46);

     label18:
        $r95 = virtualinvoke r1.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        if $r95 != null goto label21;

        if z10 == 0 goto label21;

        r96 = r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String lt1Value>;

        $z3 = r1 instanceof groovyjarjarantlr.GrammarAtom;

        if $z3 == 0 goto label19;

        $r32 = new java.lang.StringBuffer;

        specialinvoke $r32.<java.lang.StringBuffer: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r93);

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r35 = (groovyjarjarantlr.GrammarAtom) r1;

        $r36 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String getASTCreateString(groovyjarjarantlr.GrammarAtom,java.lang.String)>($r35, r96);

        $r37 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r39);

        goto label20;

     label19:
        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r93);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r21 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String getASTCreateString(java.lang.String)>(r96);

        $r22 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r24);

     label20:
        $r25 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z4 = $r25 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z4 == 0 goto label21;

        $r26 = new java.lang.StringBuffer;

        specialinvoke $r26.<java.lang.StringBuffer: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r93);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_in = ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r96);

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r31);

     label21:
        $z15 = r0.<groovyjarjarantlr.JavaCodeGenerator: boolean genAST>;

        if $z15 == 0 goto label24;

        $i6 = virtualinvoke r1.<groovyjarjarantlr.AlternativeElement: int getAutoGenType()>();

        lookupswitch($i6)
        {
            case 1: goto label22;
            case 2: goto label23;
            default: goto label24;
        };

     label22:
        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("astFactory.addASTChild(currentAST, ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r93);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(");");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r17);

        goto label24;

     label23:
        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("astFactory.makeASTRoot(currentAST, ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r93);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(");");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r12);

        goto label24;

     label24:
        if z13 == 0 goto label25;

     label25:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        goto label28;

     label26:
        $r83 := @caughtexception;

     label27:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        throw $r83;

     label28:
        return;

        catch java.lang.Throwable from label01 to label02 with label26;
        catch java.lang.Throwable from label03 to label25 with label26;
        catch java.lang.Throwable from label26 to label27 with label26;
    }

    private void genErrorCatchForElement(groovyjarjarantlr.AlternativeElement)
    {
        groovyjarjarantlr.ExceptionSpec $r8;
        groovyjarjarantlr.Grammar $r3, $r4;
        groovyjarjarantlr.Tool $r9;
        int $i0, $i1, $i2;
        java.lang.String $r1, $r7, $r10, r12;
        boolean $z0;
        groovyjarjarantlr.RuleBlock $r6;
        groovyjarjarantlr.JavaCodeGenerator r2;
        groovyjarjarantlr.RuleSymbol $r11;
        groovyjarjarantlr.GrammarSymbol $r5;
        groovyjarjarantlr.AlternativeElement r0;

        r2 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.AlternativeElement;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        if $r1 != null goto label1;

        return;

     label1:
        r12 = r0.<groovyjarjarantlr.AlternativeElement: java.lang.String enclosingRuleName>;

        $r3 = r2.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r3 instanceof groovyjarjarantlr.LexerGrammar;

        if $z0 == 0 goto label2;

        $r10 = r0.<groovyjarjarantlr.AlternativeElement: java.lang.String enclosingRuleName>;

        r12 = staticinvoke <groovyjarjarantlr.CodeGenerator: java.lang.String encodeLexerRuleName(java.lang.String)>($r10);

     label2:
        $r4 = r2.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r5 = virtualinvoke $r4.<groovyjarjarantlr.Grammar: groovyjarjarantlr.GrammarSymbol getSymbol(java.lang.String)>(r12);

        $r11 = (groovyjarjarantlr.RuleSymbol) $r5;

        if $r11 != null goto label3;

        $r9 = r2.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        virtualinvoke $r9.<groovyjarjarantlr.Tool: void panic(java.lang.String)>("Enclosing rule not found!");

     label3:
        $r6 = $r11.<groovyjarjarantlr.RuleSymbol: groovyjarjarantlr.RuleBlock block>;

        $r7 = virtualinvoke r0.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        $r8 = virtualinvoke $r6.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.ExceptionSpec findExceptionSpec(java.lang.String)>($r7);

        if $r8 == null goto label4;

        $i0 = r2.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i1 = $i0 - 1;

        r2.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i1;

        $i2 = virtualinvoke r0.<groovyjarjarantlr.AlternativeElement: int getLine()>();

        virtualinvoke r2.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String,int)>("}", $i2);

        specialinvoke r2.<groovyjarjarantlr.JavaCodeGenerator: void genErrorHandler(groovyjarjarantlr.ExceptionSpec)>($r8);

     label4:
        return;
    }

    private void genErrorHandler(groovyjarjarantlr.ExceptionSpec)
    {
        groovyjarjarantlr.ExceptionHandler r4;
        groovyjarjarantlr.Grammar $r15, $r22;
        groovyjarjarantlr.collections.impl.Vector $r1, $r2;
        groovyjarjarantlr.Token $r6, $r9, $r14, $r17, $r19, $r25;
        boolean $z0, $z1;
        groovyjarjarantlr.RuleBlock $r20;
        java.lang.Throwable $r30;
        groovyjarjarantlr.ExceptionSpec r0;
        java.lang.StringBuffer $r7, $r8, $r11, $r12, $r23, $r24, $r27, $r28;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17;
        java.lang.String $r10, $r13, $r18, $r21, $r26, $r29;
        groovyjarjarantlr.ActionTransInfo $r16;
        groovyjarjarantlr.JavaCodeGenerator r5;
        java.lang.Object $r3;

        r5 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.ExceptionSpec;

        i17 = 0;

     label1:
        $r1 = r0.<groovyjarjarantlr.ExceptionSpec: groovyjarjarantlr.collections.impl.Vector handlers>;

        $i0 = virtualinvoke $r1.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i17 >= $i0 goto label9;

        $r2 = r0.<groovyjarjarantlr.ExceptionSpec: groovyjarjarantlr.collections.impl.Vector handlers>;

        $r3 = virtualinvoke $r2.<groovyjarjarantlr.collections.impl.Vector: java.lang.Object elementAt(int)>(i17);

        r4 = (groovyjarjarantlr.ExceptionHandler) $r3;

        i1 = r5.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine>;

     label2:
        $r6 = r4.<groovyjarjarantlr.ExceptionHandler: groovyjarjarantlr.Token action>;

        $i2 = virtualinvoke $r6.<groovyjarjarantlr.Token: int getLine()>();

        r5.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = $i2;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("catch (");

        $r9 = r4.<groovyjarjarantlr.ExceptionHandler: groovyjarjarantlr.Token exceptionTypeAndName>;

        $r10 = virtualinvoke $r9.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") {");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        $r14 = r4.<groovyjarjarantlr.ExceptionHandler: groovyjarjarantlr.Token exceptionTypeAndName>;

        $i3 = virtualinvoke $r14.<groovyjarjarantlr.Token: int getLine()>();

        virtualinvoke r5.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String,int)>($r13, $i3);

        $i4 = r5.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i5 = $i4 + 1;

        r5.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i5;

        $r15 = r5.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r15.<groovyjarjarantlr.Grammar: boolean hasSyntacticPredicate>;

        if $z0 == 0 goto label3;

        virtualinvoke r5.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("if (inputState.guessing==0) {");

        $i15 = r5.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i16 = $i15 + 1;

        r5.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i16;

     label3:
        $r16 = new groovyjarjarantlr.ActionTransInfo;

        specialinvoke $r16.<groovyjarjarantlr.ActionTransInfo: void <init>()>();

        $r17 = r4.<groovyjarjarantlr.ExceptionHandler: groovyjarjarantlr.Token action>;

        $r18 = virtualinvoke $r17.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r19 = r4.<groovyjarjarantlr.ExceptionHandler: groovyjarjarantlr.Token action>;

        $i6 = virtualinvoke $r19.<groovyjarjarantlr.Token: int getLine()>();

        $r20 = r5.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        $r21 = virtualinvoke r5.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String processActionForSpecialSymbols(java.lang.String,int,groovyjarjarantlr.RuleBlock,groovyjarjarantlr.ActionTransInfo)>($r18, $i6, $r20, $r16);

        virtualinvoke r5.<groovyjarjarantlr.JavaCodeGenerator: void printAction(java.lang.String)>($r21);

        $r22 = r5.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z1 = $r22.<groovyjarjarantlr.Grammar: boolean hasSyntacticPredicate>;

        if $z1 == 0 goto label4;

        $i9 = r5.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i10 = $i9 - 1;

        r5.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i10;

        virtualinvoke r5.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("} else {");

        $i11 = r5.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i12 = $i11 + 1;

        r5.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i12;

        $r23 = new java.lang.StringBuffer;

        specialinvoke $r23.<java.lang.StringBuffer: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("throw ");

        $r25 = r4.<groovyjarjarantlr.ExceptionHandler: groovyjarjarantlr.Token exceptionTypeAndName>;

        $r26 = virtualinvoke r5.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String extractIdOfAction(groovyjarjarantlr.Token)>($r25);

        $r27 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r5.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r29);

        $i13 = r5.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i14 = $i13 - 1;

        r5.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i14;

        virtualinvoke r5.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("}");

     label4:
        $i7 = r5.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i8 = $i7 - 1;

        r5.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i8;

        virtualinvoke r5.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("}");

     label5:
        r5.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i1;

        goto label8;

     label6:
        $r30 := @caughtexception;

     label7:
        r5.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i1;

        throw $r30;

     label8:
        i17 = i17 + 1;

        goto label1;

     label9:
        return;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private void genErrorTryForElement(groovyjarjarantlr.AlternativeElement)
    {
        groovyjarjarantlr.ExceptionSpec $r8;
        groovyjarjarantlr.Grammar $r3, $r4;
        groovyjarjarantlr.Tool $r9;
        int $i0, $i1, $i2;
        java.lang.String $r1, $r7, $r10, r12;
        boolean $z0;
        groovyjarjarantlr.RuleBlock $r6;
        groovyjarjarantlr.JavaCodeGenerator r2;
        groovyjarjarantlr.RuleSymbol $r11;
        groovyjarjarantlr.GrammarSymbol $r5;
        groovyjarjarantlr.AlternativeElement r0;

        r2 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.AlternativeElement;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        if $r1 != null goto label1;

        return;

     label1:
        r12 = r0.<groovyjarjarantlr.AlternativeElement: java.lang.String enclosingRuleName>;

        $r3 = r2.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r3 instanceof groovyjarjarantlr.LexerGrammar;

        if $z0 == 0 goto label2;

        $r10 = r0.<groovyjarjarantlr.AlternativeElement: java.lang.String enclosingRuleName>;

        r12 = staticinvoke <groovyjarjarantlr.CodeGenerator: java.lang.String encodeLexerRuleName(java.lang.String)>($r10);

     label2:
        $r4 = r2.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r5 = virtualinvoke $r4.<groovyjarjarantlr.Grammar: groovyjarjarantlr.GrammarSymbol getSymbol(java.lang.String)>(r12);

        $r11 = (groovyjarjarantlr.RuleSymbol) $r5;

        if $r11 != null goto label3;

        $r9 = r2.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        virtualinvoke $r9.<groovyjarjarantlr.Tool: void panic(java.lang.String)>("Enclosing rule not found!");

     label3:
        $r6 = $r11.<groovyjarjarantlr.RuleSymbol: groovyjarjarantlr.RuleBlock block>;

        $r7 = virtualinvoke r0.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        $r8 = virtualinvoke $r6.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.ExceptionSpec findExceptionSpec(java.lang.String)>($r7);

        if $r8 == null goto label4;

        $i0 = virtualinvoke r0.<groovyjarjarantlr.AlternativeElement: int getLine()>();

        virtualinvoke r2.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String,int)>("try { // for error handling", $i0);

        $i1 = r2.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i2 = $i1 + 1;

        r2.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i2;

     label4:
        return;
    }

    protected void genASTDeclaration(groovyjarjarantlr.AlternativeElement)
    {
        groovyjarjarantlr.JavaCodeGenerator r0;
        java.lang.String $r2;
        groovyjarjarantlr.AlternativeElement r1;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.AlternativeElement;

        $r2 = r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String labeledElementASTType>;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genASTDeclaration(groovyjarjarantlr.AlternativeElement,java.lang.String)>(r1, $r2);

        return;
    }

    protected void genASTDeclaration(groovyjarjarantlr.AlternativeElement, java.lang.String)
    {
        groovyjarjarantlr.JavaCodeGenerator r0;
        java.lang.String $r2, r3;
        groovyjarjarantlr.AlternativeElement r1;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.AlternativeElement;

        r3 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r1.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genASTDeclaration(groovyjarjarantlr.AlternativeElement,java.lang.String,java.lang.String)>(r1, $r2, r3);

        return;
    }

    protected void genASTDeclaration(groovyjarjarantlr.AlternativeElement, java.lang.String, java.lang.String)
    {
        groovyjarjarantlr.JavaCodeGenerator r0;
        java.lang.StringBuffer $r3, $r5, $r6, $r8, $r9;
        java.lang.String r4, r7, $r10;
        java.util.Hashtable $r2, $r11;
        groovyjarjarantlr.AlternativeElement r1;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.AlternativeElement;

        r7 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        $r2 = r0.<groovyjarjarantlr.JavaCodeGenerator: java.util.Hashtable declaredASTVariables>;

        $z0 = virtualinvoke $r2.<java.util.Hashtable: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_AST = null;");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r10);

        $r11 = r0.<groovyjarjarantlr.JavaCodeGenerator: java.util.Hashtable declaredASTVariables>;

        virtualinvoke $r11.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r1);

        return;
    }

    protected void genHeader()
    {
        groovyjarjarantlr.Grammar $r15;
        groovyjarjarantlr.Tool $r7, $r9;
        java.lang.StringBuffer $r2, $r4, $r5, $r6, $r11, $r12, $r13, $r14, $r17, $r18, $r20;
        int $i1;
        java.lang.String $r3, $r8, $r10, $r16, $r19;
        groovyjarjarantlr.JavaCodeGenerator r0;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        $r20 = new java.lang.StringBuffer;

        specialinvoke $r20.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("// $ANTLR ");

        $r3 = <groovyjarjarantlr.Tool: java.lang.String version>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r9 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r7 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r8 = $r7.<groovyjarjarantlr.Tool: java.lang.String grammarFile>;

        $r10 = virtualinvoke $r9.<groovyjarjarantlr.Tool: java.lang.String fileMinusPath(java.lang.String)>($r8);

        $r11 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" -> ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r15 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r16 = virtualinvoke $r15.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".java\"$");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        $i1 = (int) -999;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String,int)>($r19, $i1);

        return;
    }

    private void genLiteralsTest()
    {
        groovyjarjarantlr.JavaCodeGenerator r0;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("_ttype = testLiteralsTable(_ttype);");

        return;
    }

    private void genLiteralsTestForPartialToken()
    {
        groovyjarjarantlr.JavaCodeGenerator r0;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("_ttype = testLiteralsTable(new String(text.getBuffer(),_begin,text.length()-_begin),_ttype);");

        return;
    }

    protected void genMatch(groovyjarjarantlr.collections.impl.BitSet)
    {
        groovyjarjarantlr.JavaCodeGenerator r0;
        groovyjarjarantlr.collections.impl.BitSet r1;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.collections.impl.BitSet;

        return;
    }

    protected void genMatch(groovyjarjarantlr.GrammarAtom)
    {
        groovyjarjarantlr.Grammar $r3, $r9;
        groovyjarjarantlr.WildcardElement $r2;
        groovyjarjarantlr.Tool $r5;
        java.lang.StringBuffer $r4, $r6, $r7;
        java.lang.String $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        groovyjarjarantlr.JavaCodeGenerator r1;
        groovyjarjarantlr.GrammarAtom r0;

        r1 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.GrammarAtom;

        $z0 = r0 instanceof groovyjarjarantlr.StringLiteralElement;

        if $z0 == 0 goto label2;

        $r9 = r1.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z5 = $r9 instanceof groovyjarjarantlr.LexerGrammar;

        if $z5 == 0 goto label1;

        virtualinvoke r1.<groovyjarjarantlr.JavaCodeGenerator: void genMatchUsingAtomText(groovyjarjarantlr.GrammarAtom)>(r0);

        goto label6;

     label1:
        virtualinvoke r1.<groovyjarjarantlr.JavaCodeGenerator: void genMatchUsingAtomTokenType(groovyjarjarantlr.GrammarAtom)>(r0);

        goto label6;

     label2:
        $z1 = r0 instanceof groovyjarjarantlr.CharLiteralElement;

        if $z1 == 0 goto label4;

        $r3 = r1.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z4 = $r3 instanceof groovyjarjarantlr.LexerGrammar;

        if $z4 == 0 goto label3;

        virtualinvoke r1.<groovyjarjarantlr.JavaCodeGenerator: void genMatchUsingAtomText(groovyjarjarantlr.GrammarAtom)>(r0);

        goto label6;

     label3:
        $r5 = r1.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("cannot ref character literals in grammar: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<groovyjarjarantlr.Tool: void error(java.lang.String)>($r8);

        goto label6;

     label4:
        $z2 = r0 instanceof groovyjarjarantlr.TokenRefElement;

        if $z2 == 0 goto label5;

        virtualinvoke r1.<groovyjarjarantlr.JavaCodeGenerator: void genMatchUsingAtomText(groovyjarjarantlr.GrammarAtom)>(r0);

        goto label6;

     label5:
        $z3 = r0 instanceof groovyjarjarantlr.WildcardElement;

        if $z3 == 0 goto label6;

        $r2 = (groovyjarjarantlr.WildcardElement) r0;

        virtualinvoke r1.<groovyjarjarantlr.JavaCodeGenerator: void gen(groovyjarjarantlr.WildcardElement)>($r2);

     label6:
        return;
    }

    protected void genMatchUsingAtomText(groovyjarjarantlr.GrammarAtom)
    {
        java.lang.Throwable $r7;
        groovyjarjarantlr.Grammar $r2, $r3, $r6;
        int i0, $i1, $i2, $i3, $i5;
        java.lang.String $r4, $r5, r8, $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        groovyjarjarantlr.JavaCodeGenerator r0;
        groovyjarjarantlr.GrammarAtom r1;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.GrammarAtom;

        i0 = r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine>;

     label01:
        $i1 = virtualinvoke r1.<groovyjarjarantlr.GrammarAtom: int getLine()>();

        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = $i1;

        r8 = "";

        $r2 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r2 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z0 == 0 goto label02;

        r8 = "_t,";

     label02:
        $r3 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z1 = $r3 instanceof groovyjarjarantlr.LexerGrammar;

        if $z1 == 0 goto label04;

        $z5 = r0.<groovyjarjarantlr.JavaCodeGenerator: boolean saveText>;

        if $z5 == 0 goto label03;

        $i3 = virtualinvoke r1.<groovyjarjarantlr.GrammarAtom: int getAutoGenType()>();

        if $i3 != 3 goto label04;

     label03:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("_saveIndex=text.length();");

     label04:
        $z6 = r1.<groovyjarjarantlr.GrammarAtom: boolean not>;

        if $z6 == 0 goto label05;

        $r9 = "matchNot(";

        goto label06;

     label05:
        $r9 = "match(";

     label06:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void print(java.lang.String)>($r9);

        $i5 = (int) -999;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void _print(java.lang.String,int)>(r8, $i5);

        $r4 = r1.<groovyjarjarantlr.GrammarAtom: java.lang.String atomText>;

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("EOF");

        if $z2 == 0 goto label07;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void _print(java.lang.String)>("Token.EOF_TYPE");

        goto label08;

     label07:
        $r5 = r1.<groovyjarjarantlr.GrammarAtom: java.lang.String atomText>;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void _print(java.lang.String)>($r5);

     label08:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void _println(java.lang.String)>(");");

        $r6 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z3 = $r6 instanceof groovyjarjarantlr.LexerGrammar;

        if $z3 == 0 goto label10;

        $z4 = r0.<groovyjarjarantlr.JavaCodeGenerator: boolean saveText>;

        if $z4 == 0 goto label09;

        $i2 = virtualinvoke r1.<groovyjarjarantlr.GrammarAtom: int getAutoGenType()>();

        if $i2 != 3 goto label10;

     label09:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("text.setLength(_saveIndex);");

     label10:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        goto label13;

     label11:
        $r7 := @caughtexception;

     label12:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        throw $r7;

     label13:
        return;

        catch java.lang.Throwable from label01 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    protected void genMatchUsingAtomTokenType(groovyjarjarantlr.GrammarAtom)
    {
        groovyjarjarantlr.Grammar $r1;
        java.lang.StringBuffer $r2, $r3, $r6, $r8, $r9, $r10, $r11;
        int $i0, $i1;
        java.lang.String $r5, $r7, $r12, r13, $r14;
        boolean $z0, $z1;
        groovyjarjarantlr.JavaCodeGenerator r0;
        groovyjarjarantlr.GrammarAtom r4;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r4 := @parameter0: groovyjarjarantlr.GrammarAtom;

        r13 = "";

        $r1 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r1 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z0 == 0 goto label1;

        r13 = "_t,";

     label1:
        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r13);

        $i0 = virtualinvoke r4.<groovyjarjarantlr.GrammarAtom: int getType()>();

        $r5 = specialinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String getValueString(int)>($i0);

        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $z1 = r4.<groovyjarjarantlr.GrammarAtom: boolean not>;

        if $z1 == 0 goto label2;

        $r14 = "matchNot(";

        goto label3;

     label2:
        $r14 = "match(";

     label3:
        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(");");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        $i1 = virtualinvoke r4.<groovyjarjarantlr.GrammarAtom: int getLine()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String,int)>($r12, $i1);

        return;
    }

    public void genNextToken()
    {
        groovyjarjarantlr.LLkGrammarAnalyzer $r10;
        java.lang.StringBuffer $r18, $r19, $r20, $r25, $r26, $r28, $r29, $r33, $r34, $r35, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r59, $r61, $r62, $r71, $r72, $r73, $r84, $r85, $r86, $r91, $r92, $r93, $r98, $r99, $r100, $r120, $r121, $r122, $r123, $r124, $r125, $r126, $r127, $r128;
        groovyjarjarantlr.Grammar $r1, $r3, $r5, $r8, $r9, $r11, $r13, $r22, $r30, $r75, $r77, $r81, $r88, $r95, $r102, $r104, $r115, $r117;
        groovyjarjarantlr.AlternativeElement $r66;
        groovyjarjarantlr.LexerGrammar $r12, $r14, $r23, $r31, $r103, $r116, $r118;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, i22, $i23, $i24, $i25, $i26, i27, $i28, $i29, $i31;
        groovyjarjarantlr.Lookahead $r65;
        java.lang.Object $r106;
        groovyjarjarantlr.Lookahead[] $r64;
        groovyjarjarantlr.collections.impl.Vector $r2, $r4, $r105, $r112;
        groovyjarjarantlr.JavaBlockFinishingInfo $r16;
        groovyjarjarantlr.RuleBlock $r6;
        groovyjarjarantlr.GrammarSymbol $r79;
        java.lang.Throwable $r108;
        groovyjarjarantlr.Tool $r70, $r83, $r90, $r97;
        java.lang.String $r15, $r21, $r27, $r36, $r67, $r68, $r74, $r76, $r78, $r80, $r87, $r94, $r101, $r107, r110, r114;
        groovyjarjarantlr.JavaCodeGenerator r0;
        groovyjarjarantlr.RuleSymbol r109, r111, $r119;
        groovyjarjarantlr.RuleRefElement r113;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, z10, $z11, $z12, $z13;
        groovyjarjarantlr.Alternative $r63;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        i0 = r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine>;

     label01:
        $i31 = (int) -999;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = $i31;

        z10 = 0;

        i22 = 0;

     label02:
        $r1 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r2 = $r1.<groovyjarjarantlr.Grammar: groovyjarjarantlr.collections.impl.Vector rules>;

        $i1 = virtualinvoke $r2.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i22 >= $i1 goto label04;

        $r104 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r105 = $r104.<groovyjarjarantlr.Grammar: groovyjarjarantlr.collections.impl.Vector rules>;

        $r106 = virtualinvoke $r105.<groovyjarjarantlr.collections.impl.Vector: java.lang.Object elementAt(int)>(i22);

        r109 = (groovyjarjarantlr.RuleSymbol) $r106;

        $z8 = virtualinvoke r109.<groovyjarjarantlr.RuleSymbol: boolean isDefined()>();

        if $z8 == 0 goto label03;

        $r107 = r109.<groovyjarjarantlr.RuleSymbol: java.lang.String access>;

        $z9 = virtualinvoke $r107.<java.lang.String: boolean equals(java.lang.Object)>("public");

        if $z9 == 0 goto label03;

        z10 = 1;

        goto label04;

     label03:
        i22 = i22 + 1;

        goto label02;

     label04:
        if z10 != 0 goto label06;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("public Token nextToken() throws TokenStreamException {");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("\ttry {uponEOF();}");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("\tcatch(CharStreamIOException csioe) {");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("\t\tthrow new TokenStreamIOException(csioe.io);");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("\t}");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("\tcatch(CharStreamException cse) {");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("\t\tthrow new TokenStreamException(cse.getMessage());");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("\t}");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("\treturn new CommonToken(Token.EOF_TYPE, \"\");");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("}");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("");

     label05:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        return;

     label06:
        $r5 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r3 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r4 = $r3.<groovyjarjarantlr.Grammar: groovyjarjarantlr.collections.impl.Vector rules>;

        $r6 = staticinvoke <groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.RuleBlock createNextTokenRule(groovyjarjarantlr.Grammar,groovyjarjarantlr.collections.impl.Vector,java.lang.String)>($r5, $r4, "nextToken");

        $r119 = new groovyjarjarantlr.RuleSymbol;

        specialinvoke $r119.<groovyjarjarantlr.RuleSymbol: void <init>(java.lang.String)>("mnextToken");

        virtualinvoke $r119.<groovyjarjarantlr.RuleSymbol: void setDefined()>();

        virtualinvoke $r119.<groovyjarjarantlr.RuleSymbol: void setBlock(groovyjarjarantlr.RuleBlock)>($r6);

        $r119.<groovyjarjarantlr.RuleSymbol: java.lang.String access> = "private";

        $r8 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        virtualinvoke $r8.<groovyjarjarantlr.Grammar: void define(groovyjarjarantlr.RuleSymbol)>($r119);

        $r9 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r10 = $r9.<groovyjarjarantlr.Grammar: groovyjarjarantlr.LLkGrammarAnalyzer theLLkAnalyzer>;

        interfaceinvoke $r10.<groovyjarjarantlr.LLkGrammarAnalyzer: boolean deterministic(groovyjarjarantlr.AlternativeBlock)>($r6);

        r110 = null;

        $r11 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r12 = (groovyjarjarantlr.LexerGrammar) $r11;

        $z0 = $r12.<groovyjarjarantlr.LexerGrammar: boolean filterMode>;

        if $z0 == 0 goto label07;

        $r102 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r103 = (groovyjarjarantlr.LexerGrammar) $r102;

        r110 = $r103.<groovyjarjarantlr.LexerGrammar: java.lang.String filterRule>;

     label07:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("public Token nextToken() throws TokenStreamException {");

        $i2 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i3 = $i2 + 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i3;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("Token theRetToken=null;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void _println(java.lang.String)>("tryAgain:");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("for (;;) {");

        $i4 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i5 = $i4 + 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i5;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("Token _token = null;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("int _ttype = Token.INVALID_TYPE;");

        $r13 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r14 = (groovyjarjarantlr.LexerGrammar) $r13;

        $z1 = $r14.<groovyjarjarantlr.LexerGrammar: boolean filterMode>;

        if $z1 == 0 goto label11;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("setCommitToPath(false);");

        if r110 == null goto label11;

        $r75 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r76 = staticinvoke <groovyjarjarantlr.CodeGenerator: java.lang.String encodeLexerRuleName(java.lang.String)>(r110);

        $z5 = virtualinvoke $r75.<groovyjarjarantlr.Grammar: boolean isDefined(java.lang.String)>($r76);

        if $z5 != 0 goto label08;

        $r95 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r97 = $r95.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Tool antlrTool>;

        $r120 = new java.lang.StringBuffer;

        specialinvoke $r120.<java.lang.StringBuffer: void <init>()>();

        $r98 = virtualinvoke $r120.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Filter rule ");

        $r99 = virtualinvoke $r98.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r110);

        $r100 = virtualinvoke $r99.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" does not exist in this lexer");

        $r101 = virtualinvoke $r100.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r97.<groovyjarjarantlr.Tool: void error(java.lang.String)>($r101);

        goto label10;

     label08:
        $r77 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r78 = staticinvoke <groovyjarjarantlr.CodeGenerator: java.lang.String encodeLexerRuleName(java.lang.String)>(r110);

        $r79 = virtualinvoke $r77.<groovyjarjarantlr.Grammar: groovyjarjarantlr.GrammarSymbol getSymbol(java.lang.String)>($r78);

        r111 = (groovyjarjarantlr.RuleSymbol) $r79;

        $z6 = virtualinvoke r111.<groovyjarjarantlr.RuleSymbol: boolean isDefined()>();

        if $z6 != 0 goto label09;

        $r88 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r90 = $r88.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Tool antlrTool>;

        $r121 = new java.lang.StringBuffer;

        specialinvoke $r121.<java.lang.StringBuffer: void <init>()>();

        $r91 = virtualinvoke $r121.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Filter rule ");

        $r92 = virtualinvoke $r91.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r110);

        $r93 = virtualinvoke $r92.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" does not exist in this lexer");

        $r94 = virtualinvoke $r93.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r90.<groovyjarjarantlr.Tool: void error(java.lang.String)>($r94);

        goto label10;

     label09:
        $r80 = r111.<groovyjarjarantlr.RuleSymbol: java.lang.String access>;

        $z7 = virtualinvoke $r80.<java.lang.String: boolean equals(java.lang.Object)>("public");

        if $z7 == 0 goto label10;

        $r81 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r83 = $r81.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Tool antlrTool>;

        $r122 = new java.lang.StringBuffer;

        specialinvoke $r122.<java.lang.StringBuffer: void <init>()>();

        $r84 = virtualinvoke $r122.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Filter rule ");

        $r85 = virtualinvoke $r84.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r110);

        $r86 = virtualinvoke $r85.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" must be protected");

        $r87 = virtualinvoke $r86.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r83.<groovyjarjarantlr.Tool: void error(java.lang.String)>($r87);

     label10:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("int _m;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("_m = mark();");

     label11:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("resetText();");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("try {   // for char stream error handling");

        $i23 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i24 = $i23 + 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i24;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("try {   // for lexical error handling");

        $i25 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i26 = $i25 + 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i26;

        i27 = 0;

     label12:
        $r112 = virtualinvoke $r6.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.collections.impl.Vector getAlternatives()>();

        $i28 = virtualinvoke $r112.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i27 >= $i28 goto label14;

        $r63 = virtualinvoke $r6.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.Alternative getAlternativeAt(int)>(i27);

        $r64 = $r63.<groovyjarjarantlr.Alternative: groovyjarjarantlr.Lookahead[] cache>;

        $r65 = $r64[1];

        $z4 = virtualinvoke $r65.<groovyjarjarantlr.Lookahead: boolean containsEpsilon()>();

        if $z4 == 0 goto label13;

        $r66 = $r63.<groovyjarjarantlr.Alternative: groovyjarjarantlr.AlternativeElement head>;

        r113 = (groovyjarjarantlr.RuleRefElement) $r66;

        $r67 = r113.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r68 = staticinvoke <groovyjarjarantlr.CodeGenerator: java.lang.String decodeLexerRuleName(java.lang.String)>($r67);

        $r70 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r123 = new java.lang.StringBuffer;

        specialinvoke $r123.<java.lang.StringBuffer: void <init>()>();

        $r71 = virtualinvoke $r123.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("public lexical rule ");

        $r72 = virtualinvoke $r71.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r68);

        $r73 = virtualinvoke $r72.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is optional (can match \"nothing\")");

        $r74 = virtualinvoke $r73.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r70.<groovyjarjarantlr.Tool: void warning(java.lang.String)>($r74);

     label13:
        i27 = i27 + 1;

        goto label12;

     label14:
        $r15 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r16 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.JavaBlockFinishingInfo genCommonBlock(groovyjarjarantlr.AlternativeBlock,boolean)>($r6, 0);

        $r124 = new java.lang.StringBuffer;

        specialinvoke $r124.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r124.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("if (LA(1)==EOF_CHAR) {uponEOF(); _returnToken = makeToken(Token.EOF_TYPE);}");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t\t\t\t");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        $r22 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r23 = (groovyjarjarantlr.LexerGrammar) $r22;

        $z2 = $r23.<groovyjarjarantlr.LexerGrammar: boolean filterMode>;

        if $z2 == 0 goto label16;

        if r110 != null goto label15;

        $r125 = new java.lang.StringBuffer;

        specialinvoke $r125.<java.lang.StringBuffer: void <init>()>();

        $r61 = virtualinvoke $r125.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r21);

        $r62 = virtualinvoke $r61.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("else {consume(); continue tryAgain;}");

        r114 = virtualinvoke $r62.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label17;

     label15:
        $r126 = new java.lang.StringBuffer;

        specialinvoke $r126.<java.lang.StringBuffer: void <init>()>();

        $r38 = virtualinvoke $r126.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r21);

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("else {");

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t\t\t\t\tcommit();");

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t\t\t\t\ttry {m");

        $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r110);

        $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(false);}");

        $r46 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r47 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t\t\t\t\tcatch(RecognitionException e) {");

        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r49 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t\t\t\t\t\t// catastrophic failure");

        $r50 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r51 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t\t\t\t\t\treportError(e);");

        $r52 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r53 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t\t\t\t\t\tconsume();");

        $r54 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r55 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t\t\t\t\t}");

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r57 = virtualinvoke $r56.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t\t\t\t\tcontinue tryAgain;");

        $r58 = virtualinvoke $r57.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r59 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t\t\t\t}");

        r114 = virtualinvoke $r59.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label17;

     label16:
        $r127 = new java.lang.StringBuffer;

        specialinvoke $r127.<java.lang.StringBuffer: void <init>()>();

        $r25 = virtualinvoke $r127.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r21);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("else {");

        $r27 = r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String throwNoViable>;

        $r28 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("}");

        r114 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.String toString()>();

     label17:
        $i29 = virtualinvoke $r6.<groovyjarjarantlr.RuleBlock: int getLine()>();

        specialinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genBlockFinish(groovyjarjarantlr.JavaBlockFinishingInfo,java.lang.String,int)>($r16, r114, $i29);

        $r115 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r116 = (groovyjarjarantlr.LexerGrammar) $r115;

        $z11 = $r116.<groovyjarjarantlr.LexerGrammar: boolean filterMode>;

        if $z11 == 0 goto label18;

        if r110 == null goto label18;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("commit();");

     label18:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("if ( _returnToken==null ) continue tryAgain; // found SKIP token");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("_ttype = _returnToken.getType();");

        $r117 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r118 = (groovyjarjarantlr.LexerGrammar) $r117;

        $z12 = virtualinvoke $r118.<groovyjarjarantlr.LexerGrammar: boolean getTestLiterals()>();

        if $z12 == 0 goto label19;

        specialinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genLiteralsTest()>();

     label19:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("_returnToken.setType(_ttype);");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("return _returnToken;");

        $i6 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i7 = $i6 - 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i7;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("}");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("catch (RecognitionException e) {");

        $i8 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i9 = $i8 + 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i9;

        $r30 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r31 = (groovyjarjarantlr.LexerGrammar) $r30;

        $z3 = $r31.<groovyjarjarantlr.LexerGrammar: boolean filterMode>;

        if $z3 == 0 goto label21;

        if r110 != null goto label20;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("if ( !getCommitToPath() ) {consume(); continue tryAgain;}");

        goto label21;

     label20:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("if ( !getCommitToPath() ) {");

        $i18 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i19 = $i18 + 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i19;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("rewind(_m);");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("resetText();");

        $r128 = new java.lang.StringBuffer;

        specialinvoke $r128.<java.lang.StringBuffer: void <init>()>();

        $r33 = virtualinvoke $r128.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("try {m");

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r110);

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(false);}");

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r36);

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("catch(RecognitionException ee) {");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("\t// horrendous failure: error in filter rule");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("\treportError(ee);");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("\tconsume();");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("}");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("continue tryAgain;");

        $i20 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i21 = $i20 - 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i21;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("}");

     label21:
        $z13 = virtualinvoke $r6.<groovyjarjarantlr.RuleBlock: boolean getDefaultErrorHandler()>();

        if $z13 == 0 goto label22;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("reportError(e);");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("consume();");

        goto label23;

     label22:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("throw new TokenStreamRecognitionException(e);");

     label23:
        $i10 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i11 = $i10 - 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i11;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("}");

        $i12 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i13 = $i12 - 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i13;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("}");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("catch (CharStreamException cse) {");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("\tif ( cse instanceof CharStreamIOException ) {");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("\t\tthrow new TokenStreamIOException(((CharStreamIOException)cse).io);");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("\t}");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("\telse {");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("\t\tthrow new TokenStreamException(cse.getMessage());");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("\t}");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("}");

        $i14 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i15 = $i14 - 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i15;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("}");

        $i16 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i17 = $i16 - 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i17;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("}");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("");

     label24:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        goto label27;

     label25:
        $r108 := @caughtexception;

     label26:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        throw $r108;

     label27:
        return;

        catch java.lang.Throwable from label01 to label05 with label25;
        catch java.lang.Throwable from label06 to label24 with label25;
        catch java.lang.Throwable from label25 to label26 with label25;
    }

    public void genRule(groovyjarjarantlr.RuleSymbol, boolean, int)
    {
        java.lang.StringBuffer $r7, $r8, $r13, $r14, $r19, $r21, $r39, $r41, $r42, $r45, $r47, $r48, $r53, $r54, $r55, $r58, $r59, $r60, $r64, $r67, $r68, $r72, $r74, $r75, $r78, $r80, $r81, $r93, $r94, $r95, $r107, $r108, $r110, $r111, $r115, $r116, $r118, $r119, $r121, $r122, $r128, $r129, $r130, $r133, $r134, $r135, $r139, $r142, $r143, $r147, $r149, $r150, $r153, $r155, $r156, $r160, $r161, $r165, $r167, $r171, $r173, $r180, $r181, $r186, $r188, $r192, $r194, $r195, $r211, $r212, $r213, $r214, $r215, $r216, $r217, $r218, $r219, $r220, $r221, $r222, $r223, $r224, $r225, $r226, $r227, $r228, $r229, $r230, $r231, $r232, $r233, $r234;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i43;
        java.io.PrintStream $r191;
        groovyjarjarantlr.collections.impl.Vector $r206;
        groovyjarjarantlr.Tool $r100, $r170, $r185;
        java.lang.String $r3, $r6, $r9, $r10, $r12, $r15, $r16, $r17, $r20, $r22, $r25, $r32, $r34, $r40, $r43, $r46, $r49, $r56, $r61, $r65, $r66, $r69, $r70, $r73, $r76, $r79, $r82, $r91, $r96, $r101, $r106, $r109, $r112, $r114, $r117, $r120, $r123, $r131, $r136, $r137, $r140, $r141, $r144, $r148, $r151, $r154, $r157, $r159, $r162, $r166, $r168, $r172, $r174, $r175, $r176, $r178, $r179, $r182, $r183, $r187, $r189, $r193, $r196, $r198, $r199, $r200, $r201, r207;
        boolean $z0, $z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, z30, $z31, $z32, $z33, $z34, $z35, $z36, $z37, $z38, $z39;
        groovyjarjarantlr.LLkGrammarAnalyzer $r30, $r88;
        groovyjarjarantlr.SynPredBlock $r98, $r102, $r103;
        groovyjarjarantlr.RuleEndElement $r87;
        groovyjarjarantlr.Grammar $r23, $r24, $r26, $r27, $r29, $r33, $r35, $r36, $r37, $r50, $r51, $r62, $r83, $r84, $r85, $r86, $r99, $r124, $r125, $r126, $r145, $r163, $r202, $r203, $r204, $r205, $r208, $r209, $r210;
        groovyjarjarantlr.Lookahead $r89;
        groovyjarjarantlr.JavaBlockFinishingInfo $r31;
        groovyjarjarantlr.RuleBlock $r2, $r104;
        java.lang.Throwable $r197;
        groovyjarjarantlr.JavaCodeGenerator r0;
        groovyjarjarantlr.RuleSymbol r1;
        groovyjarjarantlr.collections.impl.BitSet $r90;
        groovyjarjarantlr.Alternative $r97;
        groovyjarjarantlr.ExceptionSpec $r28;
        java.util.Hashtable $r4;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.RuleSymbol;

        z30 := @parameter1: boolean;

        i14 := @parameter2: int;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = 1;

        $z0 = r0.<groovyjarjarantlr.JavaCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z0 == 0 goto label01;

        $r191 = <java.lang.System: java.io.PrintStream out>;

        $r211 = new java.lang.StringBuffer;

        specialinvoke $r211.<java.lang.StringBuffer: void <init>()>();

        $r192 = virtualinvoke $r211.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("genRule(");

        $r193 = virtualinvoke r1.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        $r194 = virtualinvoke $r192.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r193);

        $r195 = virtualinvoke $r194.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r196 = virtualinvoke $r195.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r191.<java.io.PrintStream: void println(java.lang.String)>($r196);

     label01:
        $z1 = virtualinvoke r1.<groovyjarjarantlr.RuleSymbol: boolean isDefined()>();

        if $z1 != 0 goto label02;

        $r185 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r212 = new java.lang.StringBuffer;

        specialinvoke $r212.<java.lang.StringBuffer: void <init>()>();

        $r186 = virtualinvoke $r212.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("undefined rule: ");

        $r187 = virtualinvoke r1.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        $r188 = virtualinvoke $r186.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r187);

        $r189 = virtualinvoke $r188.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r185.<groovyjarjarantlr.Tool: void error(java.lang.String)>($r189);

        return;

     label02:
        $r2 = virtualinvoke r1.<groovyjarjarantlr.RuleSymbol: groovyjarjarantlr.RuleBlock getBlock()>();

        i0 = r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine>;

     label03:
        $i1 = virtualinvoke $r2.<groovyjarjarantlr.RuleBlock: int getLine()>();

        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = $i1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.RuleBlock currentRule> = $r2;

        $r3 = virtualinvoke r1.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String currentASTResult> = $r3;

        $r4 = r0.<groovyjarjarantlr.JavaCodeGenerator: java.util.Hashtable declaredASTVariables>;

        virtualinvoke $r4.<java.util.Hashtable: void clear()>();

        z2 = r0.<groovyjarjarantlr.JavaCodeGenerator: boolean genAST>;

        $z3 = r0.<groovyjarjarantlr.JavaCodeGenerator: boolean genAST>;

        if $z3 == 0 goto label04;

        $z29 = virtualinvoke $r2.<groovyjarjarantlr.RuleBlock: boolean getAutoGen()>();

        if $z29 == 0 goto label04;

        $z31 = 1;

        goto label05;

     label04:
        $z31 = 0;

     label05:
        r0.<groovyjarjarantlr.JavaCodeGenerator: boolean genAST> = $z31;

        $z32 = virtualinvoke $r2.<groovyjarjarantlr.RuleBlock: boolean getAutoGen()>();

        r0.<groovyjarjarantlr.JavaCodeGenerator: boolean saveText> = $z32;

        $r198 = r1.<groovyjarjarantlr.RuleSymbol: java.lang.String comment>;

        if $r198 == null goto label06;

        $r183 = r1.<groovyjarjarantlr.RuleSymbol: java.lang.String comment>;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void _println(java.lang.String)>($r183);

     label06:
        $r213 = new java.lang.StringBuffer;

        specialinvoke $r213.<java.lang.StringBuffer: void <init>()>();

        $r6 = r1.<groovyjarjarantlr.RuleSymbol: java.lang.String access>;

        $r7 = virtualinvoke $r213.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" final ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void print(java.lang.String)>($r9);

        $r10 = $r2.<groovyjarjarantlr.RuleBlock: java.lang.String returnAction>;

        if $r10 == null goto label07;

        $r214 = new java.lang.StringBuffer;

        specialinvoke $r214.<java.lang.StringBuffer: void <init>()>();

        $r178 = $r2.<groovyjarjarantlr.RuleBlock: java.lang.String returnAction>;

        $i33 = virtualinvoke $r2.<groovyjarjarantlr.RuleBlock: int getLine()>();

        $i34 = virtualinvoke $r2.<groovyjarjarantlr.RuleBlock: int getColumn()>();

        $r179 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String extractTypeOfAction(java.lang.String,int,int)>($r178, $i33, $i34);

        $r180 = virtualinvoke $r214.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r179);

        $r181 = virtualinvoke $r180.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r182 = virtualinvoke $r181.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void _print(java.lang.String)>($r182);

        goto label08;

     label07:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void _print(java.lang.String)>("void ");

     label08:
        $r215 = new java.lang.StringBuffer;

        specialinvoke $r215.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke r1.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        $r13 = virtualinvoke $r215.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void _print(java.lang.String)>($r15);

        $r16 = r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String commonExtraParams>;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void _print(java.lang.String)>($r16);

        $r17 = r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String commonExtraParams>;

        $i2 = virtualinvoke $r17.<java.lang.String: int length()>();

        if $i2 == 0 goto label09;

        $r176 = $r2.<groovyjarjarantlr.RuleBlock: java.lang.String argAction>;

        if $r176 == null goto label09;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void _print(java.lang.String)>(",");

     label09:
        $r199 = $r2.<groovyjarjarantlr.RuleBlock: java.lang.String argAction>;

        if $r199 == null goto label10;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void _println(java.lang.String)>("");

        $i29 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i30 = $i29 + 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i30;

        $r175 = $r2.<groovyjarjarantlr.RuleBlock: java.lang.String argAction>;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r175);

        $i31 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i32 = $i31 - 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i32;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void print(java.lang.String)>(")");

        goto label11;

     label10:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void _print(java.lang.String)>(")");

     label11:
        $r216 = new java.lang.StringBuffer;

        specialinvoke $r216.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r216.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" throws ");

        $r20 = r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String exceptionThrown>;

        $r21 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void _print(java.lang.String)>($r22);

        $r23 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z4 = $r23 instanceof groovyjarjarantlr.ParserGrammar;

        if $z4 == 0 goto label12;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void _print(java.lang.String)>(", TokenStreamException");

        goto label13;

     label12:
        $r24 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z5 = $r24 instanceof groovyjarjarantlr.LexerGrammar;

        if $z5 == 0 goto label13;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void _print(java.lang.String)>(", CharStreamException, TokenStreamException");

     label13:
        $r200 = $r2.<groovyjarjarantlr.RuleBlock: java.lang.String throwsSpec>;

        if $r200 == null goto label15;

        $r163 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z28 = $r163 instanceof groovyjarjarantlr.LexerGrammar;

        if $z28 == 0 goto label14;

        $r170 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r217 = new java.lang.StringBuffer;

        specialinvoke $r217.<java.lang.StringBuffer: void <init>()>();

        $r171 = virtualinvoke $r217.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("user-defined throws spec not allowed (yet) for lexer rule ");

        $r172 = $r2.<groovyjarjarantlr.RuleBlock: java.lang.String ruleName>;

        $r173 = virtualinvoke $r171.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r172);

        $r174 = virtualinvoke $r173.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r170.<groovyjarjarantlr.Tool: void error(java.lang.String)>($r174);

        goto label15;

     label14:
        $r218 = new java.lang.StringBuffer;

        specialinvoke $r218.<java.lang.StringBuffer: void <init>()>();

        $r165 = virtualinvoke $r218.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r166 = $r2.<groovyjarjarantlr.RuleBlock: java.lang.String throwsSpec>;

        $r167 = virtualinvoke $r165.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r166);

        $r168 = virtualinvoke $r167.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void _print(java.lang.String)>($r168);

     label15:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void _println(java.lang.String)>(" {");

        $i35 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i36 = $i35 + 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i36;

        $r201 = $r2.<groovyjarjarantlr.RuleBlock: java.lang.String returnAction>;

        if $r201 == null goto label16;

        $r219 = new java.lang.StringBuffer;

        specialinvoke $r219.<java.lang.StringBuffer: void <init>()>();

        $r159 = $r2.<groovyjarjarantlr.RuleBlock: java.lang.String returnAction>;

        $r160 = virtualinvoke $r219.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r159);

        $r161 = virtualinvoke $r160.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r162 = virtualinvoke $r161.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r162);

     label16:
        $r25 = r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String commonLocalVars>;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r25);

        $r26 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z6 = $r26.<groovyjarjarantlr.Grammar: boolean traceRules>;

        if $z6 == 0 goto label18;

        $r145 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z27 = $r145 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z27 == 0 goto label17;

        $r220 = new java.lang.StringBuffer;

        specialinvoke $r220.<java.lang.StringBuffer: void <init>()>();

        $r153 = virtualinvoke $r220.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("traceIn(\"");

        $r154 = virtualinvoke r1.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        $r155 = virtualinvoke $r153.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r154);

        $r156 = virtualinvoke $r155.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\",_t);");

        $r157 = virtualinvoke $r156.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r157);

        goto label18;

     label17:
        $r221 = new java.lang.StringBuffer;

        specialinvoke $r221.<java.lang.StringBuffer: void <init>()>();

        $r147 = virtualinvoke $r221.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("traceIn(\"");

        $r148 = virtualinvoke r1.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        $r149 = virtualinvoke $r147.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r148);

        $r150 = virtualinvoke $r149.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\");");

        $r151 = virtualinvoke $r150.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r151);

     label18:
        $r202 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z33 = $r202 instanceof groovyjarjarantlr.LexerGrammar;

        if $z33 == 0 goto label21;

        $r137 = virtualinvoke r1.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        $z26 = virtualinvoke $r137.<java.lang.String: boolean equals(java.lang.Object)>("mEOF");

        if $z26 == 0 goto label19;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("_ttype = Token.EOF_TYPE;");

        goto label20;

     label19:
        $r222 = new java.lang.StringBuffer;

        specialinvoke $r222.<java.lang.StringBuffer: void <init>()>();

        $r139 = virtualinvoke $r222.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_ttype = ");

        $r140 = virtualinvoke r1.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        $r141 = virtualinvoke $r140.<java.lang.String: java.lang.String substring(int)>(1);

        $r142 = virtualinvoke $r139.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r141);

        $r143 = virtualinvoke $r142.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r144 = virtualinvoke $r143.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r144);

     label20:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("int _saveIndex;");

     label21:
        $r203 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z34 = $r203.<groovyjarjarantlr.Grammar: boolean debuggingOutput>;

        if $z34 == 0 goto label23;

        $r125 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z24 = $r125 instanceof groovyjarjarantlr.ParserGrammar;

        if $z24 == 0 goto label22;

        $r223 = new java.lang.StringBuffer;

        specialinvoke $r223.<java.lang.StringBuffer: void <init>()>();

        $r133 = virtualinvoke $r223.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("fireEnterRule(");

        $r134 = virtualinvoke $r133.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i14);

        $r135 = virtualinvoke $r134.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",0);");

        $r136 = virtualinvoke $r135.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r136);

        goto label23;

     label22:
        $r126 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z25 = $r126 instanceof groovyjarjarantlr.LexerGrammar;

        if $z25 == 0 goto label23;

        $r224 = new java.lang.StringBuffer;

        specialinvoke $r224.<java.lang.StringBuffer: void <init>()>();

        $r128 = virtualinvoke $r224.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("fireEnterRule(");

        $r129 = virtualinvoke $r128.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i14);

        $r130 = virtualinvoke $r129.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",_ttype);");

        $r131 = virtualinvoke $r130.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r131);

     label23:
        $r204 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z35 = $r204.<groovyjarjarantlr.Grammar: boolean debuggingOutput>;

        if $z35 != 0 goto label24;

        $r124 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z23 = $r124.<groovyjarjarantlr.Grammar: boolean traceRules>;

        if $z23 == 0 goto label25;

     label24:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("try { // debugging");

        $i3 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i4 = $i3 + 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i4;

     label25:
        $r205 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z36 = $r205 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z36 == 0 goto label26;

        $r225 = new java.lang.StringBuffer;

        specialinvoke $r225.<java.lang.StringBuffer: void <init>()>();

        $r114 = r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String labeledElementASTType>;

        $r115 = virtualinvoke $r225.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r114);

        $r116 = virtualinvoke $r115.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r117 = virtualinvoke r1.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        $r118 = virtualinvoke $r116.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r117);

        $r119 = virtualinvoke $r118.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_AST_in = (_t == ASTNULL) ? null : (");

        $r120 = r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String labeledElementASTType>;

        $r121 = virtualinvoke $r119.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r120);

        $r122 = virtualinvoke $r121.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")_t;");

        $r123 = virtualinvoke $r122.<java.lang.StringBuffer: java.lang.String toString()>();

        $i43 = (int) -999;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String,int)>($r123, $i43);

     label26:
        $r27 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z7 = $r27.<groovyjarjarantlr.Grammar: boolean buildAST>;

        if $z7 == 0 goto label27;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("returnAST = null;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("ASTPair currentAST = new ASTPair();");

        $r226 = new java.lang.StringBuffer;

        specialinvoke $r226.<java.lang.StringBuffer: void <init>()>();

        $r106 = r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String labeledElementASTType>;

        $r107 = virtualinvoke $r226.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r106);

        $r108 = virtualinvoke $r107.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r109 = virtualinvoke r1.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        $r110 = virtualinvoke $r108.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r109);

        $r111 = virtualinvoke $r110.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_AST = null;");

        $r112 = virtualinvoke $r111.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r112);

     label27:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genBlockPreamble(groovyjarjarantlr.AlternativeBlock)>($r2);

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genBlockInitAction(groovyjarjarantlr.AlternativeBlock)>($r2);

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("");

        $r28 = virtualinvoke $r2.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.ExceptionSpec findExceptionSpec(java.lang.String)>("");

        if $r28 != null goto label28;

        $z22 = virtualinvoke $r2.<groovyjarjarantlr.RuleBlock: boolean getDefaultErrorHandler()>();

        if $z22 == 0 goto label29;

     label28:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("try {      // for error handling");

        $i5 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i6 = $i5 + 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i6;

     label29:
        $r206 = $r2.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.collections.impl.Vector alternatives>;

        $i37 = virtualinvoke $r206.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if $i37 != 1 goto label32;

        $r97 = virtualinvoke $r2.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.Alternative getAlternativeAt(int)>(0);

        r207 = $r97.<groovyjarjarantlr.Alternative: java.lang.String semPred>;

        if r207 == null goto label30;

        $r104 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        $i28 = $r104.<groovyjarjarantlr.RuleBlock: int line>;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genSemPred(java.lang.String,int)>(r207, $i28);

     label30:
        $r98 = $r97.<groovyjarjarantlr.Alternative: groovyjarjarantlr.SynPredBlock synPred>;

        if $r98 == null goto label31;

        $r100 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r99 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r101 = virtualinvoke $r99.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $r102 = $r97.<groovyjarjarantlr.Alternative: groovyjarjarantlr.SynPredBlock synPred>;

        $i26 = virtualinvoke $r102.<groovyjarjarantlr.SynPredBlock: int getLine()>();

        $r103 = $r97.<groovyjarjarantlr.Alternative: groovyjarjarantlr.SynPredBlock synPred>;

        $i27 = virtualinvoke $r103.<groovyjarjarantlr.SynPredBlock: int getColumn()>();

        virtualinvoke $r100.<groovyjarjarantlr.Tool: void warning(java.lang.String,java.lang.String,int,int)>("Syntactic predicate ignored for single alternative", $r101, $i26, $i27);

     label31:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genAlt(groovyjarjarantlr.Alternative,groovyjarjarantlr.AlternativeBlock)>($r97, $r2);

        goto label33;

     label32:
        $r29 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r30 = $r29.<groovyjarjarantlr.Grammar: groovyjarjarantlr.LLkGrammarAnalyzer theLLkAnalyzer>;

        interfaceinvoke $r30.<groovyjarjarantlr.LLkGrammarAnalyzer: boolean deterministic(groovyjarjarantlr.AlternativeBlock)>($r2);

        $r31 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.JavaBlockFinishingInfo genCommonBlock(groovyjarjarantlr.AlternativeBlock,boolean)>($r2, 0);

        $r32 = r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String throwNoViable>;

        $i7 = virtualinvoke $r2.<groovyjarjarantlr.RuleBlock: int getLine()>();

        specialinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genBlockFinish(groovyjarjarantlr.JavaBlockFinishingInfo,java.lang.String,int)>($r31, $r32, $i7);

     label33:
        if $r28 != null goto label34;

        $z21 = virtualinvoke $r2.<groovyjarjarantlr.RuleBlock: boolean getDefaultErrorHandler()>();

        if $z21 == 0 goto label35;

     label34:
        $i8 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i9 = $i8 - 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i9;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("}");

     label35:
        if $r28 == null goto label36;

        specialinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genErrorHandler(groovyjarjarantlr.ExceptionSpec)>($r28);

        goto label41;

     label36:
        $z8 = virtualinvoke $r2.<groovyjarjarantlr.RuleBlock: boolean getDefaultErrorHandler()>();

        if $z8 == 0 goto label41;

        $r227 = new java.lang.StringBuffer;

        specialinvoke $r227.<java.lang.StringBuffer: void <init>()>();

        $r78 = virtualinvoke $r227.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("catch (");

        $r79 = r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String exceptionThrown>;

        $r80 = virtualinvoke $r78.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r79);

        $r81 = virtualinvoke $r80.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ex) {");

        $r82 = virtualinvoke $r81.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r82);

        $i17 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i18 = $i17 + 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i18;

        $r83 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z18 = $r83.<groovyjarjarantlr.Grammar: boolean hasSyntacticPredicate>;

        if $z18 == 0 goto label37;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("if (inputState.guessing==0) {");

        $i24 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i25 = $i24 + 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i25;

     label37:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("reportError(ex);");

        $r84 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z19 = $r84 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z19 != 0 goto label38;

        $r86 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r88 = $r86.<groovyjarjarantlr.Grammar: groovyjarjarantlr.LLkGrammarAnalyzer theLLkAnalyzer>;

        $r87 = $r2.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.RuleEndElement endNode>;

        $r89 = interfaceinvoke $r88.<groovyjarjarantlr.LLkGrammarAnalyzer: groovyjarjarantlr.Lookahead FOLLOW(int,groovyjarjarantlr.RuleEndElement)>(1, $r87);

        $r90 = $r89.<groovyjarjarantlr.Lookahead: groovyjarjarantlr.collections.impl.BitSet fset>;

        $i23 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: int markBitsetForGen(groovyjarjarantlr.collections.impl.BitSet)>($r90);

        $r91 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String getBitsetName(int)>($i23);

        $r228 = new java.lang.StringBuffer;

        specialinvoke $r228.<java.lang.StringBuffer: void <init>()>();

        $r93 = virtualinvoke $r228.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("recover(ex,");

        $r94 = virtualinvoke $r93.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r91);

        $r95 = virtualinvoke $r94.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(");");

        $r96 = virtualinvoke $r95.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r96);

        goto label39;

     label38:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("if (_t!=null) {_t = _t.getNextSibling();}");

     label39:
        $r85 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z20 = $r85.<groovyjarjarantlr.Grammar: boolean hasSyntacticPredicate>;

        if $z20 == 0 goto label40;

        $i21 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i22 = $i21 - 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i22;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("} else {");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("  throw ex;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("}");

     label40:
        $i19 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i20 = $i19 - 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i20;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("}");

     label41:
        $r208 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z37 = $r208.<groovyjarjarantlr.Grammar: boolean buildAST>;

        if $z37 == 0 goto label42;

        $r229 = new java.lang.StringBuffer;

        specialinvoke $r229.<java.lang.StringBuffer: void <init>()>();

        $r72 = virtualinvoke $r229.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("returnAST = ");

        $r73 = virtualinvoke r1.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        $r74 = virtualinvoke $r72.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r73);

        $r75 = virtualinvoke $r74.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_AST;");

        $r76 = virtualinvoke $r75.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r76);

     label42:
        $r33 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z9 = $r33 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z9 == 0 goto label43;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("_retTree = _t;");

     label43:
        $z10 = virtualinvoke $r2.<groovyjarjarantlr.RuleBlock: boolean getTestLiterals()>();

        if $z10 == 0 goto label45;

        $r70 = r1.<groovyjarjarantlr.RuleSymbol: java.lang.String access>;

        $z17 = virtualinvoke $r70.<java.lang.String: boolean equals(java.lang.Object)>("protected");

        if $z17 == 0 goto label44;

        specialinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genLiteralsTestForPartialToken()>();

        goto label45;

     label44:
        specialinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genLiteralsTest()>();

     label45:
        $r209 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z38 = $r209 instanceof groovyjarjarantlr.LexerGrammar;

        if $z38 == 0 goto label46;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("if ( _createToken && _token==null && _ttype!=Token.SKIP ) {");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("\t_token = makeToken(_ttype);");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("\t_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("}");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("_returnToken = _token;");

     label46:
        $r34 = $r2.<groovyjarjarantlr.RuleBlock: java.lang.String returnAction>;

        if $r34 == null goto label47;

        $r230 = new java.lang.StringBuffer;

        specialinvoke $r230.<java.lang.StringBuffer: void <init>()>();

        $r64 = virtualinvoke $r230.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("return ");

        $r65 = $r2.<groovyjarjarantlr.RuleBlock: java.lang.String returnAction>;

        $i15 = virtualinvoke $r2.<groovyjarjarantlr.RuleBlock: int getLine()>();

        $i16 = virtualinvoke $r2.<groovyjarjarantlr.RuleBlock: int getColumn()>();

        $r66 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String extractIdOfAction(java.lang.String,int,int)>($r65, $i15, $i16);

        $r67 = virtualinvoke $r64.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r66);

        $r68 = virtualinvoke $r67.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r69 = virtualinvoke $r68.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r69);

     label47:
        $r35 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z11 = $r35.<groovyjarjarantlr.Grammar: boolean debuggingOutput>;

        if $z11 != 0 goto label48;

        $r62 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z16 = $r62.<groovyjarjarantlr.Grammar: boolean traceRules>;

        if $z16 == 0 goto label53;

     label48:
        $i10 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i11 = $i10 - 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i11;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("} finally { // debugging");

        $i12 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i13 = $i12 + 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i13;

        $r36 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z12 = $r36.<groovyjarjarantlr.Grammar: boolean debuggingOutput>;

        if $z12 == 0 goto label50;

        $r50 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z14 = $r50 instanceof groovyjarjarantlr.ParserGrammar;

        if $z14 == 0 goto label49;

        $r231 = new java.lang.StringBuffer;

        specialinvoke $r231.<java.lang.StringBuffer: void <init>()>();

        $r58 = virtualinvoke $r231.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("fireExitRule(");

        $r59 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i14);

        $r60 = virtualinvoke $r59.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",0);");

        $r61 = virtualinvoke $r60.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r61);

        goto label50;

     label49:
        $r51 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z15 = $r51 instanceof groovyjarjarantlr.LexerGrammar;

        if $z15 == 0 goto label50;

        $r232 = new java.lang.StringBuffer;

        specialinvoke $r232.<java.lang.StringBuffer: void <init>()>();

        $r53 = virtualinvoke $r232.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("fireExitRule(");

        $r54 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i14);

        $r55 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",_ttype);");

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r56);

     label50:
        $r210 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z39 = $r210.<groovyjarjarantlr.Grammar: boolean traceRules>;

        if $z39 == 0 goto label52;

        $r37 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z13 = $r37 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z13 == 0 goto label51;

        $r233 = new java.lang.StringBuffer;

        specialinvoke $r233.<java.lang.StringBuffer: void <init>()>();

        $r45 = virtualinvoke $r233.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("traceOut(\"");

        $r46 = virtualinvoke r1.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        $r47 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r46);

        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\",_t);");

        $r49 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r49);

        goto label52;

     label51:
        $r234 = new java.lang.StringBuffer;

        specialinvoke $r234.<java.lang.StringBuffer: void <init>()>();

        $r39 = virtualinvoke $r234.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("traceOut(\"");

        $r40 = virtualinvoke r1.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        $r41 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r40);

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\");");

        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r43);

     label52:
        $i38 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i39 = $i38 - 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i39;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("}");

     label53:
        $i40 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i41 = $i40 - 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i41;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("}");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("");

        r0.<groovyjarjarantlr.JavaCodeGenerator: boolean genAST> = z2;

     label54:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        goto label57;

     label55:
        $r197 := @caughtexception;

     label56:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        throw $r197;

     label57:
        return;

        catch java.lang.Throwable from label03 to label54 with label55;
        catch java.lang.Throwable from label55 to label56 with label55;
    }

    private void GenRuleInvocation(groovyjarjarantlr.RuleRefElement)
    {
        groovyjarjarantlr.RuleBlock $r10, $r21, $r30, $r58;
        groovyjarjarantlr.GrammarSymbol $r55;
        java.lang.Throwable $r50;
        groovyjarjarantlr.Tool $r13, $r25, $r37;
        java.lang.StringBuffer $r3, $r5, $r6, $r12, $r14, $r16, $r24, $r26, $r28, $r29, $r32, $r36, $r38, $r40, $r41;
        java.lang.String $r4, $r7, $r11, $r15, $r17, $r19, $r22, $r23, $r27, $r31, $r33, $r35, $r39, $r42, $r44, $r45, $r46, $r47, $r48, $r49, $r51, $r52, $r54, $r57, $r59;
        groovyjarjarantlr.ActionTransInfo $r20;
        groovyjarjarantlr.JavaCodeGenerator r0;
        groovyjarjarantlr.RuleSymbol $r56;
        groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager $r2, $r8;
        groovyjarjarantlr.Grammar $r9, $r18, $r34, $r43, $r53, $r60;
        groovyjarjarantlr.RuleRefElement r1;
        boolean $z0, $z1, $z2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.RuleRefElement;

        i0 = r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine>;

     label01:
        $i1 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: int getLine()>();

        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = $i1;

        $r2 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager getPrintWriterManager()>();

        $i2 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: int getLine()>();

        interfaceinvoke $r2.<groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager: void startSingleSourceLineMapping(int)>($i2);

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void _print(java.lang.String)>($r7);

        $r8 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager getPrintWriterManager()>();

        interfaceinvoke $r8.<groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager: void endMapping()>();

        $r9 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r9 instanceof groovyjarjarantlr.LexerGrammar;

        if $z0 == 0 goto label05;

        $r47 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: java.lang.String getLabel()>();

        if $r47 == null goto label02;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void _print(java.lang.String)>("true");

        goto label03;

     label02:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void _print(java.lang.String)>("false");

     label03:
        $r48 = r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String commonExtraArgs>;

        $i9 = virtualinvoke $r48.<java.lang.String: int length()>();

        if $i9 != 0 goto label04;

        $r49 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String args>;

        if $r49 == null goto label05;

     label04:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void _print(java.lang.String)>(",");

     label05:
        $r51 = r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String commonExtraArgs>;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void _print(java.lang.String)>($r51);

        $r52 = r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String commonExtraArgs>;

        $i10 = virtualinvoke $r52.<java.lang.String: int length()>();

        if $i10 == 0 goto label06;

        $r46 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String args>;

        if $r46 == null goto label06;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void _print(java.lang.String)>(",");

     label06:
        $r53 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r54 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r55 = virtualinvoke $r53.<groovyjarjarantlr.Grammar: groovyjarjarantlr.GrammarSymbol getSymbol(java.lang.String)>($r54);

        $r56 = (groovyjarjarantlr.RuleSymbol) $r55;

        $r57 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String args>;

        if $r57 == null goto label09;

        $r20 = new groovyjarjarantlr.ActionTransInfo;

        specialinvoke $r20.<groovyjarjarantlr.ActionTransInfo: void <init>()>();

        $r22 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String args>;

        $r21 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        $r23 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String processActionForSpecialSymbols(java.lang.String,int,groovyjarjarantlr.RuleBlock,groovyjarjarantlr.ActionTransInfo)>($r22, 0, $r21, $r20);

        $z1 = $r20.<groovyjarjarantlr.ActionTransInfo: boolean assignToRoot>;

        if $z1 != 0 goto label07;

        $r45 = $r20.<groovyjarjarantlr.ActionTransInfo: java.lang.String refRuleRoot>;

        if $r45 == null goto label08;

     label07:
        $r25 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r24 = new java.lang.StringBuffer;

        specialinvoke $r24.<java.lang.StringBuffer: void <init>()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Arguments of rule reference \'");

        $r27 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r28 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' cannot set or ref #");

        $r30 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        $r31 = virtualinvoke $r30.<groovyjarjarantlr.RuleBlock: java.lang.String getRuleName()>();

        $r32 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.String toString()>();

        $r34 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r35 = virtualinvoke $r34.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i5 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: int getLine()>();

        $i6 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: int getColumn()>();

        virtualinvoke $r25.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>($r33, $r35, $i5, $i6);

     label08:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void _print(java.lang.String)>($r23);

        $r58 = $r56.<groovyjarjarantlr.RuleSymbol: groovyjarjarantlr.RuleBlock block>;

        $r59 = $r58.<groovyjarjarantlr.RuleBlock: java.lang.String argAction>;

        if $r59 != null goto label10;

        $r37 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r36 = new java.lang.StringBuffer;

        specialinvoke $r36.<java.lang.StringBuffer: void <init>()>();

        $r38 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Rule \'");

        $r39 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r40 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r39);

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' accepts no arguments");

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.String toString()>();

        $r43 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r44 = virtualinvoke $r43.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i7 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: int getLine()>();

        $i8 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: int getColumn()>();

        virtualinvoke $r37.<groovyjarjarantlr.Tool: void warning(java.lang.String,java.lang.String,int,int)>($r42, $r44, $i7, $i8);

        goto label10;

     label09:
        $r10 = $r56.<groovyjarjarantlr.RuleSymbol: groovyjarjarantlr.RuleBlock block>;

        $r11 = $r10.<groovyjarjarantlr.RuleBlock: java.lang.String argAction>;

        if $r11 == null goto label10;

        $r13 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Missing parameters on reference to rule ");

        $r15 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        $r18 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r19 = virtualinvoke $r18.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i3 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: int getLine()>();

        $i4 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: int getColumn()>();

        virtualinvoke $r13.<groovyjarjarantlr.Tool: void warning(java.lang.String,java.lang.String,int,int)>($r17, $r19, $i3, $i4);

     label10:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void _println(java.lang.String)>(");");

        $r60 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z2 = $r60 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z2 == 0 goto label11;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("_t = _retTree;");

     label11:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        goto label14;

     label12:
        $r50 := @caughtexception;

     label13:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        throw $r50;

     label14:
        return;

        catch java.lang.Throwable from label01 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    protected void genSemPred(java.lang.String, int)
    {
        groovyjarjarantlr.CharFormatter $r4;
        groovyjarjarantlr.Grammar $r6, $r7, $r14;
        boolean $z0, $z1, $z2;
        groovyjarjarantlr.RuleBlock $r2;
        java.lang.StringBuffer $r8, $r9, $r10, $r11, $r12, $r13, $r17, $r18, $r19, $r20, $r22, $r23, $r24, $r25;
        int i0, $i1;
        groovyjarjarantlr.ActionTransInfo $r0;
        java.lang.String $r3, $r5, r15, r16, $r21, $r26;
        groovyjarjarantlr.JavaCodeGenerator r1;

        r1 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r15 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r0 = new groovyjarjarantlr.ActionTransInfo;

        specialinvoke $r0.<groovyjarjarantlr.ActionTransInfo: void <init>()>();

        $r2 = r1.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        $r3 = virtualinvoke r1.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String processActionForSpecialSymbols(java.lang.String,int,groovyjarjarantlr.RuleBlock,groovyjarjarantlr.ActionTransInfo)>(r15, i0, $r2, $r0);

        r16 = $r3;

        $r4 = r1.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.CharFormatter charFormatter>;

        $r5 = interfaceinvoke $r4.<groovyjarjarantlr.CharFormatter: java.lang.String escapeString(java.lang.String)>($r3);

        $r6 = r1.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r6.<groovyjarjarantlr.Grammar: boolean debuggingOutput>;

        if $z0 == 0 goto label2;

        $r7 = r1.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z1 = $r7 instanceof groovyjarjarantlr.ParserGrammar;

        if $z1 != 0 goto label1;

        $r14 = r1.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z2 = $r14 instanceof groovyjarjarantlr.LexerGrammar;

        if $z2 == 0 goto label2;

     label1:
        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("fireSemanticPredicateEvaluated(antlr.debug.SemanticPredicateEvent.VALIDATING,");

        $i1 = virtualinvoke r1.<groovyjarjarantlr.JavaCodeGenerator: int addSemPred(java.lang.String)>($r5);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        r16 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

     label2:
        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("if (!(");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r16);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("))");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String,int)>($r21, i0);

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  throw new SemanticException(\"");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\");");

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String,int)>($r26, i0);

        return;
    }

    protected void genSemPredMap()
    {
        java.util.Enumeration $r2;
        groovyjarjarantlr.JavaCodeGenerator r0;
        java.lang.StringBuffer $r4, $r6, $r7, $r9;
        int $i1, $i3, $i5;
        java.lang.Object $r5;
        java.lang.String $r8;
        groovyjarjarantlr.collections.impl.Vector $r1;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        $r1 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.collections.impl.Vector semPreds>;

        $r2 = virtualinvoke $r1.<groovyjarjarantlr.collections.impl.Vector: java.util.Enumeration elements()>();

        $i1 = (int) -999;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String,int)>("private String _semPredNames[] = {", $i1);

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r5 = interfaceinvoke $r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\",");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        $i3 = (int) -999;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String,int)>($r8, $i3);

        goto label1;

     label2:
        $i5 = (int) -999;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String,int)>("};", $i5);

        return;
    }

    protected void genSynPred(groovyjarjarantlr.SynPredBlock, java.lang.String)
    {
        groovyjarjarantlr.SynPredBlock r1;
        java.lang.Throwable $r57;
        java.lang.StringBuffer $r2, $r3, $r4, $r5, $r8, $r9, $r11, $r12, $r15, $r16, $r17, $r18, $r20, $r21, $r22, $r23, $r26, $r27, $r28, $r29, $r33, $r34, $r35, $r36, $r39, $r40, $r41, $r42, $r46, $r47, $r48, $r49, $r51, $r53, $r54, $r55, $r58, $r59, $r61, $r62, $r64, $r65, $r66, $r67, $r70, $r71, $r72, $r73;
        java.lang.String $r6, r10, $r13, $r19, $r24, $r30, $r37, $r43, $r50, $r56, $r60, $r63, $r68, $r74;
        groovyjarjarantlr.JavaCodeGenerator r0;
        groovyjarjarantlr.Grammar $r7, $r14, $r25, $r31, $r32, $r38, $r44, $r45, $r69;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26;
        java.io.PrintStream $r52;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.SynPredBlock;

        r10 := @parameter1: java.lang.String;

        i0 = r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine>;

     label01:
        $i1 = virtualinvoke r1.<groovyjarjarantlr.SynPredBlock: int getLine()>();

        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = $i1;

        $z0 = r0.<groovyjarjarantlr.JavaCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z0 == 0 goto label02;

        $r52 = <java.lang.System: java.io.PrintStream out>;

        $r51 = new java.lang.StringBuffer;

        specialinvoke $r51.<java.lang.StringBuffer: void <init>()>();

        $r53 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("gen=>(");

        $r54 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r55 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r52.<java.io.PrintStream: void println(java.lang.String)>($r56);

     label02:
        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("boolean synPredMatched");

        $i2 = r1.<groovyjarjarantlr.SynPredBlock: int ID>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = false;");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r6);

        $r7 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z1 = $r7 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z1 == 0 goto label03;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("if (_t==null) _t=ASTNULL;");

     label03:
        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("if (");

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") {");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r13);

        $i3 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i4 = $i3 + 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i4;

        $r14 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z2 = $r14 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z2 == 0 goto label04;

        $r46 = new java.lang.StringBuffer;

        specialinvoke $r46.<java.lang.StringBuffer: void <init>()>();

        $r47 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("AST __t");

        $i10 = r1.<groovyjarjarantlr.SynPredBlock: int ID>;

        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i10);

        $r49 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = _t;");

        $r50 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r50);

        goto label05;

     label04:
        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("int _m");

        $i5 = r1.<groovyjarjarantlr.SynPredBlock: int ID>;

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i5);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = mark();");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r19);

     label05:
        $r20 = new java.lang.StringBuffer;

        specialinvoke $r20.<java.lang.StringBuffer: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("synPredMatched");

        $i6 = r1.<groovyjarjarantlr.SynPredBlock: int ID>;

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i6);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = true;");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r24);

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("inputState.guessing++;");

        $r25 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z3 = $r25.<groovyjarjarantlr.Grammar: boolean debuggingOutput>;

        if $z3 == 0 goto label07;

        $r44 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z7 = $r44 instanceof groovyjarjarantlr.ParserGrammar;

        if $z7 != 0 goto label06;

        $r45 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z8 = $r45 instanceof groovyjarjarantlr.LexerGrammar;

        if $z8 == 0 goto label07;

     label06:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("fireSyntacticPredicateStarted();");

     label07:
        $i11 = r0.<groovyjarjarantlr.JavaCodeGenerator: int syntacticPredLevel>;

        $i12 = $i11 + 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int syntacticPredLevel> = $i12;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("try {");

        $i13 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i14 = $i13 + 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i14;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void gen(groovyjarjarantlr.AlternativeBlock)>(r1);

        $i15 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i16 = $i15 - 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i16;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("}");

        $r58 = new java.lang.StringBuffer;

        specialinvoke $r58.<java.lang.StringBuffer: void <init>()>();

        $r59 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("catch (");

        $r60 = r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String exceptionThrown>;

        $r61 = virtualinvoke $r59.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r60);

        $r62 = virtualinvoke $r61.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" pe) {");

        $r63 = virtualinvoke $r62.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r63);

        $i17 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i18 = $i17 + 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i18;

        $r64 = new java.lang.StringBuffer;

        specialinvoke $r64.<java.lang.StringBuffer: void <init>()>();

        $r65 = virtualinvoke $r64.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("synPredMatched");

        $i19 = r1.<groovyjarjarantlr.SynPredBlock: int ID>;

        $r66 = virtualinvoke $r65.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i19);

        $r67 = virtualinvoke $r66.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = false;");

        $r68 = virtualinvoke $r67.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r68);

        $i20 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i21 = $i20 - 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i21;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("}");

        $r69 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z9 = $r69 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z9 == 0 goto label08;

        $r39 = new java.lang.StringBuffer;

        specialinvoke $r39.<java.lang.StringBuffer: void <init>()>();

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_t = __t");

        $i9 = r1.<groovyjarjarantlr.SynPredBlock: int ID>;

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i9);

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r43);

        goto label09;

     label08:
        $r26 = new java.lang.StringBuffer;

        specialinvoke $r26.<java.lang.StringBuffer: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("rewind(_m");

        $i7 = r1.<groovyjarjarantlr.SynPredBlock: int ID>;

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i7);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(");");

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r30);

     label09:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void _println(java.lang.String)>("inputState.guessing--;");

        $r31 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z4 = $r31.<groovyjarjarantlr.Grammar: boolean debuggingOutput>;

        if $z4 == 0 goto label11;

        $r32 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z5 = $r32 instanceof groovyjarjarantlr.ParserGrammar;

        if $z5 != 0 goto label10;

        $r38 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z6 = $r38 instanceof groovyjarjarantlr.LexerGrammar;

        if $z6 == 0 goto label11;

     label10:
        $r33 = new java.lang.StringBuffer;

        specialinvoke $r33.<java.lang.StringBuffer: void <init>()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("if (synPredMatched");

        $i8 = r1.<groovyjarjarantlr.SynPredBlock: int ID>;

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i8);

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r37);

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("  fireSyntacticPredicateSucceeded();");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("else");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("  fireSyntacticPredicateFailed();");

     label11:
        $i22 = r0.<groovyjarjarantlr.JavaCodeGenerator: int syntacticPredLevel>;

        $i23 = $i22 - 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int syntacticPredLevel> = $i23;

        $i24 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i25 = $i24 - 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i25;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("}");

        $r70 = new java.lang.StringBuffer;

        specialinvoke $r70.<java.lang.StringBuffer: void <init>()>();

        $r71 = virtualinvoke $r70.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("if ( synPredMatched");

        $i26 = r1.<groovyjarjarantlr.SynPredBlock: int ID>;

        $r72 = virtualinvoke $r71.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i26);

        $r73 = virtualinvoke $r72.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ) {");

        $r74 = virtualinvoke $r73.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r74);

     label12:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        goto label15;

     label13:
        $r57 := @caughtexception;

     label14:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        throw $r57;

     label15:
        return;

        catch java.lang.Throwable from label01 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public void genTokenStrings()
    {
        java.lang.Throwable $r15;
        groovyjarjarantlr.Grammar $r1, $r5;
        groovyjarjarantlr.CharFormatter $r17;
        java.lang.StringBuffer $r11, $r13, $r14, $r19;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, $i7, $i8, $i10;
        java.lang.String $r8, $r9, $r12, r16, $r18;
        groovyjarjarantlr.TokenManager $r2, $r6;
        groovyjarjarantlr.collections.impl.Vector $r3;
        boolean $z0, $z1;
        groovyjarjarantlr.TokenSymbol $r7;
        groovyjarjarantlr.JavaCodeGenerator r0;
        java.lang.Object $r4;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        i0 = r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine>;

     label01:
        $i10 = (int) -999;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = $i10;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("public static final String[] _tokenNames = {");

        $i1 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i2 = $i1 + 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i2;

        $r1 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r2 = $r1.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $r3 = interfaceinvoke $r2.<groovyjarjarantlr.TokenManager: groovyjarjarantlr.collections.impl.Vector getVocabulary()>();

        i6 = 0;

     label02:
        $i3 = virtualinvoke $r3.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i6 >= $i3 goto label06;

        $r4 = virtualinvoke $r3.<groovyjarjarantlr.collections.impl.Vector: java.lang.Object elementAt(int)>(i6);

        r16 = (java.lang.String) $r4;

        if r16 != null goto label03;

        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<");

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i6);

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(">");

        r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

     label03:
        $z0 = virtualinvoke r16.<java.lang.String: boolean startsWith(java.lang.String)>("\"");

        if $z0 != 0 goto label04;

        $z1 = virtualinvoke r16.<java.lang.String: boolean startsWith(java.lang.String)>("<");

        if $z1 != 0 goto label04;

        $r5 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r6 = $r5.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $r7 = interfaceinvoke $r6.<groovyjarjarantlr.TokenManager: groovyjarjarantlr.TokenSymbol getTokenSymbol(java.lang.String)>(r16);

        if $r7 == null goto label04;

        $r8 = virtualinvoke $r7.<groovyjarjarantlr.TokenSymbol: java.lang.String getParaphrase()>();

        if $r8 == null goto label04;

        $r9 = virtualinvoke $r7.<groovyjarjarantlr.TokenSymbol: java.lang.String getParaphrase()>();

        r16 = staticinvoke <groovyjarjarantlr.StringUtils: java.lang.String stripFrontBack(java.lang.String,java.lang.String,java.lang.String)>($r9, "\"", "\"");

     label04:
        $r17 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.CharFormatter charFormatter>;

        $r18 = interfaceinvoke $r17.<groovyjarjarantlr.CharFormatter: java.lang.String literalString(java.lang.String)>(r16);

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void print(java.lang.String)>($r18);

        $i7 = virtualinvoke $r3.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        $i8 = $i7 - 1;

        if i6 == $i8 goto label05;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void _print(java.lang.String)>(",");

     label05:
        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void _println(java.lang.String)>("");

        i6 = i6 + 1;

        goto label02;

     label06:
        $i4 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i5 = $i4 - 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i5;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("};");

     label07:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        goto label10;

     label08:
        $r15 := @caughtexception;

     label09:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        throw $r15;

     label10:
        return;

        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    protected void genTokenASTNodeMap()
    {
        java.lang.Throwable $r18;
        groovyjarjarantlr.Grammar $r1, $r6;
        java.lang.StringBuffer $r11, $r12, $r13, $r15, $r16, $r19;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, $i10;
        java.lang.String r5, $r9, $r14, $r17;
        groovyjarjarantlr.TokenManager $r2, $r7;
        groovyjarjarantlr.collections.impl.Vector $r3;
        boolean z0;
        groovyjarjarantlr.TokenSymbol $r8;
        groovyjarjarantlr.JavaCodeGenerator r0;
        java.lang.Object $r4;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        i0 = r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine>;

     label01:
        $i10 = (int) -999;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = $i10;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("protected void buildTokenTypeASTClassMap() {");

        $i1 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i2 = $i1 + 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i2;

        z0 = 0;

        i7 = 0;

        $r1 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r2 = $r1.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $r3 = interfaceinvoke $r2.<groovyjarjarantlr.TokenManager: groovyjarjarantlr.collections.impl.Vector getVocabulary()>();

        i8 = 0;

     label02:
        $i3 = virtualinvoke $r3.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i8 >= $i3 goto label05;

        $r4 = virtualinvoke $r3.<groovyjarjarantlr.collections.impl.Vector: java.lang.Object elementAt(int)>(i8);

        r5 = (java.lang.String) $r4;

        if r5 == null goto label04;

        $r6 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r7 = $r6.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $r8 = interfaceinvoke $r7.<groovyjarjarantlr.TokenManager: groovyjarjarantlr.TokenSymbol getTokenSymbol(java.lang.String)>(r5);

        if $r8 == null goto label04;

        $r9 = virtualinvoke $r8.<groovyjarjarantlr.TokenSymbol: java.lang.String getASTNodeType()>();

        if $r9 == null goto label04;

        i7 = i7 + 1;

        if z0 != 0 goto label03;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("tokenTypeToASTClassMap = new Hashtable();");

        z0 = 1;

     label03:
        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("tokenTypeToASTClassMap.put(new Integer(");

        $i6 = virtualinvoke $r8.<groovyjarjarantlr.TokenSymbol: int getTokenType()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i6);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("), ");

        $r14 = virtualinvoke $r8.<groovyjarjarantlr.TokenSymbol: java.lang.String getASTNodeType()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".class);");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r17);

     label04:
        i8 = i8 + 1;

        goto label02;

     label05:
        if i7 != 0 goto label06;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("tokenTypeToASTClassMap=null;");

     label06:
        $i4 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i5 = $i4 - 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i5;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("};");

     label07:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        goto label10;

     label08:
        $r18 := @caughtexception;

     label09:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        throw $r18;

     label10:
        return;

        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    protected void genTokenTypes(groovyjarjarantlr.TokenManager) throws java.io.IOException
    {
        groovyjarjarantlr.TokenManager r4;
        groovyjarjarantlr.collections.impl.Vector $r22;
        java.io.PrintWriter $r10;
        java.lang.Throwable $r64, $r65;
        groovyjarjarantlr.Tool $r3, $r59;
        java.lang.StringBuffer $r6, $r8, $r15, $r17, $r19, $r20, $r27, $r28, $r29, $r30, $r31, $r38, $r39, $r40, $r41, $r44, $r45, $r46, $r47, $r48, $r51, $r53, $r54, $r55, $r56, $r60, $r61, $r62, $r66, $r67, $r68, $r69, $r70, $r71, $r72;
        java.lang.String $r5, $r7, $r9, $r13, $r16, $r18, $r21, r25, $r32, $r35, $r36, $r42, $r49, $r52, $r57, $r63;
        groovyjarjarantlr.JavaCodeGenerator r0;
        groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager $r1, $r23;
        groovyjarjarantlr.DefineGrammarSymbols $r11, $r12;
        groovyjarjarantlr.StringLiteralSymbol r34;
        boolean $z0, $z1;
        groovyjarjarantlr.TokenSymbol $r33;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i9, $i11, $i13;
        java.lang.Object $r24;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r4 := @parameter0: groovyjarjarantlr.TokenManager;

        i0 = r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine>;

     label01:
        $i9 = (int) -999;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = $i9;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager getPrintWriterManager()>();

        $r3 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r66 = new java.lang.StringBuffer;

        specialinvoke $r66.<java.lang.StringBuffer: void <init>()>();

        $r5 = interfaceinvoke r4.<groovyjarjarantlr.TokenManager: java.lang.String getName()>();

        $r6 = virtualinvoke $r66.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = <groovyjarjarantlr.JavaCodeGenerator: java.lang.String TokenTypesFileSuffix>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        $r10 = interfaceinvoke $r1.<groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager: java.io.PrintWriter setupOutput(groovyjarjarantlr.Tool,java.lang.String)>($r3, $r9);

        r0.<groovyjarjarantlr.JavaCodeGenerator: java.io.PrintWriter currentOutput> = $r10;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = 0;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void genHeader()>();

     label02:
        $r11 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.DefineGrammarSymbols behavior>;

        $i1 = virtualinvoke $r11.<groovyjarjarantlr.DefineGrammarSymbols: int getHeaderActionLine(java.lang.String)>("");

        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = $i1;

        $r12 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.DefineGrammarSymbols behavior>;

        $r13 = virtualinvoke $r12.<groovyjarjarantlr.DefineGrammarSymbols: java.lang.String getHeaderAction(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r13);

     label03:
        $i11 = (int) -999;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = $i11;

        goto label06;

     label04:
        $r65 := @caughtexception;

     label05:
        $i13 = (int) -999;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = $i13;

        throw $r65;

     label06:
        $r67 = new java.lang.StringBuffer;

        specialinvoke $r67.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r67.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("public interface ");

        $r16 = interfaceinvoke r4.<groovyjarjarantlr.TokenManager: java.lang.String getName()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        $r18 = <groovyjarjarantlr.JavaCodeGenerator: java.lang.String TokenTypesFileSuffix>;

        $r19 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" {");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r21);

        $i2 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i3 = $i2 + 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i3;

        $r22 = interfaceinvoke r4.<groovyjarjarantlr.TokenManager: groovyjarjarantlr.collections.impl.Vector getVocabulary()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("int EOF = 1;");

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("int NULL_TREE_LOOKAHEAD = 3;");

        i7 = 4;

     label07:
        $i4 = virtualinvoke $r22.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i7 >= $i4 goto label13;

        $r24 = virtualinvoke $r22.<groovyjarjarantlr.collections.impl.Vector: java.lang.Object elementAt(int)>(i7);

        r25 = (java.lang.String) $r24;

        if r25 == null goto label12;

        $z0 = virtualinvoke r25.<java.lang.String: boolean startsWith(java.lang.String)>("\"");

        if $z0 == 0 goto label11;

        $r33 = interfaceinvoke r4.<groovyjarjarantlr.TokenManager: groovyjarjarantlr.TokenSymbol getTokenSymbol(java.lang.String)>(r25);

        r34 = (groovyjarjarantlr.StringLiteralSymbol) $r33;

        if r34 != null goto label08;

        $r59 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r68 = new java.lang.StringBuffer;

        specialinvoke $r68.<java.lang.StringBuffer: void <init>()>();

        $r60 = virtualinvoke $r68.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("String literal ");

        $r61 = virtualinvoke $r60.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r25);

        $r62 = virtualinvoke $r61.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" not in symbol table");

        $r63 = virtualinvoke $r62.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r59.<groovyjarjarantlr.Tool: void panic(java.lang.String)>($r63);

        goto label12;

     label08:
        $r35 = r34.<groovyjarjarantlr.StringLiteralSymbol: java.lang.String label>;

        if $r35 == null goto label09;

        $r69 = new java.lang.StringBuffer;

        specialinvoke $r69.<java.lang.StringBuffer: void <init>()>();

        $r51 = virtualinvoke $r69.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("int ");

        $r52 = r34.<groovyjarjarantlr.StringLiteralSymbol: java.lang.String label>;

        $r53 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r52);

        $r54 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r55 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i7);

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r57 = virtualinvoke $r56.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r57);

        goto label12;

     label09:
        $r36 = specialinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String mangleLiteral(java.lang.String)>(r25);

        if $r36 == null goto label10;

        $r70 = new java.lang.StringBuffer;

        specialinvoke $r70.<java.lang.StringBuffer: void <init>()>();

        $r44 = virtualinvoke $r70.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("int ");

        $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r36);

        $r46 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r47 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i7);

        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r49 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r49);

        r34.<groovyjarjarantlr.StringLiteralSymbol: java.lang.String label> = $r36;

        goto label12;

     label10:
        $r71 = new java.lang.StringBuffer;

        specialinvoke $r71.<java.lang.StringBuffer: void <init>()>();

        $r38 = virtualinvoke $r71.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("// ");

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r25);

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i7);

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r42);

        goto label12;

     label11:
        $z1 = virtualinvoke r25.<java.lang.String: boolean startsWith(java.lang.String)>("<");

        if $z1 != 0 goto label12;

        $r72 = new java.lang.StringBuffer;

        specialinvoke $r72.<java.lang.StringBuffer: void <init>()>();

        $r27 = virtualinvoke $r72.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("int ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r25);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i7);

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>($r32);

     label12:
        i7 = i7 + 1;

        goto label07;

     label13:
        $i5 = r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs>;

        $i6 = $i5 - 1;

        r0.<groovyjarjarantlr.JavaCodeGenerator: int tabs> = $i6;

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void println(java.lang.String)>("}");

        $r23 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager getPrintWriterManager()>();

        interfaceinvoke $r23.<groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager: void finishOutput()>();

        virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: void exitIfError()>();

     label14:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        goto label17;

     label15:
        $r64 := @caughtexception;

     label16:
        r0.<groovyjarjarantlr.JavaCodeGenerator: int defaultLine> = i0;

        throw $r64;

     label17:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label01 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    public java.lang.String getASTCreateString(groovyjarjarantlr.collections.impl.Vector)
    {
        java.lang.StringBuffer $r1, $r2, $r3, $r6, $r7, $r8, $r9, $r12, $r13, $r15, $r16;
        int $i0, $i1, $i2, i3;
        java.lang.String $r5, $r10, $r11, $r17;
        groovyjarjarantlr.collections.impl.Vector r0;
        groovyjarjarantlr.JavaCodeGenerator r4;
        java.lang.Object $r14;

        r4 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.collections.impl.Vector;

        $i0 = virtualinvoke r0.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if $i0 != 0 goto label1;

        return "";

     label1:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $r5 = r4.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String labeledElementASTType>;

        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")astFactory.make( (new ASTArray(");

        $i1 = virtualinvoke r0.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("))");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        i3 = 0;

     label2:
        $i2 = virtualinvoke r0.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i3 >= $i2 goto label3;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".add(");

        $r14 = virtualinvoke r0.<groovyjarjarantlr.collections.impl.Vector: java.lang.Object elementAt(int)>(i3);

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        i3 = i3 + 1;

        goto label2;

     label3:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r11 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r11;
    }

    public java.lang.String getASTCreateString(groovyjarjarantlr.GrammarAtom, java.lang.String)
    {
        java.lang.StringBuffer $r5, $r6, $r8, $r9, $r10, $r11, $r12, $r14, $r15;
        java.lang.String r2, $r3, $r4, $r7, $r13, $r16;
        groovyjarjarantlr.JavaCodeGenerator r1;
        groovyjarjarantlr.GrammarAtom r0;

        r1 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.GrammarAtom;

        r2 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        $r4 = virtualinvoke r0.<groovyjarjarantlr.GrammarAtom: java.lang.String getASTNodeType()>();

        if $r4 == null goto label1;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $r7 = virtualinvoke r0.<groovyjarjarantlr.GrammarAtom: java.lang.String getASTNodeType()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("astFactory.create(");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",\"");

        $r13 = virtualinvoke r0.<groovyjarjarantlr.GrammarAtom: java.lang.String getASTNodeType()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\")");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r16;

     label1:
        $r3 = virtualinvoke r1.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String getASTCreateString(java.lang.String)>(r2);

        return $r3;
    }

    public java.lang.String getASTCreateString(java.lang.String)
    {
        groovyjarjarantlr.Grammar $r9;
        groovyjarjarantlr.TokenManager $r10;
        boolean $z0;
        groovyjarjarantlr.TokenSymbol $r11;
        java.lang.StringBuffer $r1, $r4, $r5, $r6, $r7, $r14, $r16, $r17, $r18, $r19, $r20, $r23, $r24, $r25, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r42, $r43, $r44, $r45;
        int $i0, i2, i3, $i4, $i5;
        java.lang.String $r3, $r8, $r12, $r15, $r21, $r26, $r27, $r38, r39, r40, r41;
        groovyjarjarantlr.JavaCodeGenerator r2;
        char $c1;

        r2 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r39 := @parameter0: java.lang.String;

        if r39 != null goto label1;

        r39 = "";

     label1:
        i2 = 0;

        i3 = 0;

     label2:
        $i4 = virtualinvoke r39.<java.lang.String: int length()>();

        if i3 >= $i4 goto label4;

        $c1 = virtualinvoke r39.<java.lang.String: char charAt(int)>(i3);

        $i5 = (int) $c1;

        if $i5 != 44 goto label3;

        i2 = i2 + 1;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        if i2 >= 2 goto label9;

        $i0 = virtualinvoke r39.<java.lang.String: int indexOf(int)>(44);

        virtualinvoke r39.<java.lang.String: int lastIndexOf(int)>(44);

        r40 = r39;

        if i2 <= 0 goto label5;

        r40 = virtualinvoke r39.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label5:
        $r9 = r2.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r10 = $r9.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $r11 = interfaceinvoke $r10.<groovyjarjarantlr.TokenManager: groovyjarjarantlr.TokenSymbol getTokenSymbol(java.lang.String)>(r40);

        if $r11 == null goto label7;

        $r27 = virtualinvoke $r11.<groovyjarjarantlr.TokenSymbol: java.lang.String getASTNodeType()>();

        r41 = "";

        if i2 != 0 goto label6;

        r41 = ",\"\"";

     label6:
        if $r27 == null goto label7;

        $r42 = new java.lang.StringBuffer;

        specialinvoke $r42.<java.lang.StringBuffer: void <init>()>();

        $r29 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r27);

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("astFactory.create(");

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r39);

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r41);

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",\"");

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r27);

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\")");

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r38;

     label7:
        $r12 = r2.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String labeledElementASTType>;

        $z0 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>("AST");

        if $z0 == 0 goto label8;

        $r43 = new java.lang.StringBuffer;

        specialinvoke $r43.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("astFactory.create(");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r39);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r26;

     label8:
        $r44 = new java.lang.StringBuffer;

        specialinvoke $r44.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $r15 = r2.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String labeledElementASTType>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("astFactory.create(");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r39);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r21;

     label9:
        $r45 = new java.lang.StringBuffer;

        specialinvoke $r45.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $r3 = r2.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String labeledElementASTType>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")astFactory.create(");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r39);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r8;
    }

    protected java.lang.String getLookaheadTestExpression(groovyjarjarantlr.Lookahead[], int)
    {
        groovyjarjarantlr.Lookahead[] r2;
        groovyjarjarantlr.JavaCodeGenerator r6;
        groovyjarjarantlr.collections.impl.BitSet r4;
        java.lang.StringBuffer $r0;
        groovyjarjarantlr.Lookahead $r3, $r5;
        int i0, i1;
        java.lang.String $r1, $r7;
        boolean $z0, z1;

        r6 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r2 := @parameter0: groovyjarjarantlr.Lookahead[];

        i0 := @parameter1: int;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(int)>(100);

        z1 = 1;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        i1 = 1;

     label1:
        if i1 > i0 goto label5;

        $r3 = r2[i1];

        r4 = $r3.<groovyjarjarantlr.Lookahead: groovyjarjarantlr.collections.impl.BitSet fset>;

        if z1 != 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") && (");

     label2:
        z1 = 0;

        $r5 = r2[i1];

        $z0 = virtualinvoke $r5.<groovyjarjarantlr.Lookahead: boolean containsEpsilon()>();

        if $z0 == 0 goto label3;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("true");

        goto label4;

     label3:
        $r7 = virtualinvoke r6.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String getLookaheadTestTerm(int,groovyjarjarantlr.collections.impl.BitSet)>(i1, r4);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

     label4:
        i1 = i1 + 1;

        goto label1;

     label5:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r1;
    }

    protected java.lang.String getLookaheadTestExpression(groovyjarjarantlr.Alternative, int)
    {
        groovyjarjarantlr.Lookahead[] $r4;
        groovyjarjarantlr.JavaCodeGenerator r3;
        groovyjarjarantlr.Grammar $r9;
        groovyjarjarantlr.Alternative r0;
        java.lang.StringBuffer $r1, $r2, $r6, $r7;
        int i0, i1;
        java.lang.String $r5, $r8;

        r3 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.Alternative;

        i0 := @parameter1: int;

        i1 = r0.<groovyjarjarantlr.Alternative: int lookaheadDepth>;

        if i1 != 2147483647 goto label1;

        $r9 = r3.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        i1 = $r9.<groovyjarjarantlr.Grammar: int maxk>;

     label1:
        if i0 != 0 goto label2;

        return "( true )";

     label2:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $r4 = r0.<groovyjarjarantlr.Alternative: groovyjarjarantlr.Lookahead[] cache>;

        $r5 = virtualinvoke r3.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String getLookaheadTestExpression(groovyjarjarantlr.Lookahead[],int)>($r4, i1);

        $r6 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r8;
    }

    protected java.lang.String getLookaheadTestTerm(int, groovyjarjarantlr.collections.impl.BitSet)
    {
        int[] $r3;
        java.lang.StringBuffer $r4, $r7, $r9, $r10, $r11, $r12;
        int i0, $i1, $i2, $i3, $i4, $i5, i6;
        java.lang.String $r1, $r5, $r6, $r8, $r13, $r14;
        boolean $z0;
        groovyjarjarantlr.JavaCodeGenerator r0;
        groovyjarjarantlr.collections.impl.BitSet r2;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        i0 := @parameter0: int;

        r2 := @parameter1: groovyjarjarantlr.collections.impl.BitSet;

        $r1 = specialinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String lookaheadString(int)>(i0);

        $r3 = virtualinvoke r2.<groovyjarjarantlr.collections.impl.BitSet: int[] toArray()>();

        $z0 = staticinvoke <groovyjarjarantlr.JavaCodeGenerator: boolean elementsAreRange(int[])>($r3);

        if $z0 == 0 goto label1;

        $r14 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String getRangeExpression(int,int[])>(i0, $r3);

        return $r14;

     label1:
        $i1 = virtualinvoke r2.<groovyjarjarantlr.collections.impl.BitSet: int degree()>();

        if $i1 != 0 goto label2;

        return "true";

     label2:
        $i2 = r0.<groovyjarjarantlr.JavaCodeGenerator: int bitsetTestThreshold>;

        if $i1 < $i2 goto label3;

        $i5 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: int markBitsetForGen(groovyjarjarantlr.collections.impl.BitSet)>(r2);

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String getBitsetName(int)>($i5);

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".member(");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r13;

     label3:
        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        i6 = 0;

     label4:
        $i3 = lengthof $r3;

        if i6 >= $i3 goto label6;

        $i4 = $r3[i6];

        $r6 = specialinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String getValueString(int)>($i4);

        if i6 <= 0 goto label5;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("||");

     label5:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("==");

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        i6 = i6 + 1;

        goto label4;

     label6:
        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;
    }

    public java.lang.String getRangeExpression(int, int[])
    {
        int[] r0;
        groovyjarjarantlr.Tool $r17;
        java.lang.StringBuffer $r1, $r2, $r5, $r6, $r8, $r9, $r11, $r12, $r14, $r15;
        int $i0, $i1, i2, $i3, $i4;
        java.lang.String $r4, $r7, $r10, $r13, $r16;
        boolean $z0;
        groovyjarjarantlr.JavaCodeGenerator r3;

        r3 := @this: groovyjarjarantlr.JavaCodeGenerator;

        i2 := @parameter0: int;

        r0 := @parameter1: int[];

        $z0 = staticinvoke <groovyjarjarantlr.JavaCodeGenerator: boolean elementsAreRange(int[])>(r0);

        if $z0 != 0 goto label1;

        $r17 = r3.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        virtualinvoke $r17.<groovyjarjarantlr.Tool: void panic(java.lang.String)>("getRangeExpression called with non-range");

     label1:
        $i3 = r0[0];

        $i0 = lengthof r0;

        $i1 = $i0 - 1;

        $i4 = r0[$i1];

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $r4 = specialinvoke r3.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String lookaheadString(int)>(i2);

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" >= ");

        $r7 = specialinvoke r3.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String getValueString(int)>($i3);

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" && ");

        $r10 = specialinvoke r3.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String lookaheadString(int)>(i2);

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" <= ");

        $r13 = specialinvoke r3.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String getValueString(int)>($i4);

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r16;
    }

    private java.lang.String getValueString(int)
    {
        groovyjarjarantlr.StringLiteralSymbol r6;
        groovyjarjarantlr.Grammar $r1, $r2;
        groovyjarjarantlr.CharFormatter $r13;
        java.lang.StringBuffer $r9, $r10, $r11;
        int i0;
        java.lang.String $r5, $r7, $r8, $r12, r14;
        groovyjarjarantlr.TokenManager $r3;
        boolean $z0, $z1;
        groovyjarjarantlr.TokenSymbol $r4;
        groovyjarjarantlr.JavaCodeGenerator r0;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        i0 := @parameter0: int;

        $r1 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r1 instanceof groovyjarjarantlr.LexerGrammar;

        if $z0 == 0 goto label1;

        $r13 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.CharFormatter charFormatter>;

        r14 = interfaceinvoke $r13.<groovyjarjarantlr.CharFormatter: java.lang.String literalChar(int)>(i0);

        goto label5;

     label1:
        $r2 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r3 = $r2.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $r4 = interfaceinvoke $r3.<groovyjarjarantlr.TokenManager: groovyjarjarantlr.TokenSymbol getTokenSymbolAt(int)>(i0);

        if $r4 != null goto label2;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r12;

     label2:
        $r5 = virtualinvoke $r4.<groovyjarjarantlr.TokenSymbol: java.lang.String getId()>();

        $z1 = $r4 instanceof groovyjarjarantlr.StringLiteralSymbol;

        if $z1 == 0 goto label4;

        r6 = (groovyjarjarantlr.StringLiteralSymbol) $r4;

        $r7 = virtualinvoke r6.<groovyjarjarantlr.StringLiteralSymbol: java.lang.String getLabel()>();

        if $r7 == null goto label3;

        r14 = $r7;

        goto label5;

     label3:
        $r8 = specialinvoke r0.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String mangleLiteral(java.lang.String)>($r5);

        r14 = $r8;

        if $r8 != null goto label5;

        r14 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        goto label5;

     label4:
        r14 = $r5;

     label5:
        return r14;
    }

    protected boolean lookaheadIsEmpty(groovyjarjarantlr.Alternative, int)
    {
        groovyjarjarantlr.Lookahead[] $r1;
        groovyjarjarantlr.JavaCodeGenerator r4;
        groovyjarjarantlr.collections.impl.BitSet r3;
        groovyjarjarantlr.Grammar $r5;
        groovyjarjarantlr.Alternative r0;
        groovyjarjarantlr.Lookahead $r2;
        int i0, $i1, i2, i3;

        r4 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.Alternative;

        i0 := @parameter1: int;

        i2 = r0.<groovyjarjarantlr.Alternative: int lookaheadDepth>;

        if i2 != 2147483647 goto label1;

        $r5 = r4.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        i2 = $r5.<groovyjarjarantlr.Grammar: int maxk>;

     label1:
        i3 = 1;

     label2:
        if i3 > i2 goto label4;

        if i3 > i0 goto label4;

        $r1 = r0.<groovyjarjarantlr.Alternative: groovyjarjarantlr.Lookahead[] cache>;

        $r2 = $r1[i3];

        r3 = $r2.<groovyjarjarantlr.Lookahead: groovyjarjarantlr.collections.impl.BitSet fset>;

        $i1 = virtualinvoke r3.<groovyjarjarantlr.collections.impl.BitSet: int degree()>();

        if $i1 == 0 goto label3;

        return 0;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return 1;
    }

    private java.lang.String lookaheadString(int)
    {
        groovyjarjarantlr.JavaCodeGenerator r0;
        groovyjarjarantlr.Grammar $r1;
        java.lang.StringBuffer $r2, $r3, $r4, $r5;
        int i0;
        java.lang.String $r6;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        i0 := @parameter0: int;

        $r1 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r1 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z0 == 0 goto label1;

        return "_t.getType()";

     label1:
        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("LA(");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }

    private java.lang.String mangleLiteral(java.lang.String)
    {
        groovyjarjarantlr.Tool $r1, $r3;
        java.lang.StringBuffer $r5, $r6, $r8;
        int $i0, $i1, i5, $i6;
        java.lang.String r2, r7;
        boolean $z0, $z1;
        groovyjarjarantlr.JavaCodeGenerator r0;
        char $c2, $c3, $c4;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        r7 = $r1.<groovyjarjarantlr.Tool: java.lang.String literalsPrefix>;

        i5 = 1;

     label1:
        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        $i1 = $i0 - 1;

        if i5 >= $i1 goto label3;

        $c2 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i5);

        $z1 = staticinvoke <java.lang.Character: boolean isLetter(char)>($c2);

        if $z1 != 0 goto label2;

        $c4 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i5);

        $i6 = (int) $c4;

        if $i6 == 95 goto label2;

        return null;

     label2:
        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r7);

        $c3 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i5);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c3);

        r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        i5 = i5 + 1;

        goto label1;

     label3:
        $r3 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $z0 = $r3.<groovyjarjarantlr.Tool: boolean upperCaseMangledLiterals>;

        if $z0 == 0 goto label4;

        r7 = virtualinvoke r7.<java.lang.String: java.lang.String toUpperCase()>();

     label4:
        return r7;
    }

    public java.lang.String mapTreeId(java.lang.String, groovyjarjarantlr.ActionTransInfo)
    {
        groovyjarjarantlr.collections.impl.Vector $r40, $r49;
        groovyjarjarantlr.RuleBlock $r1, $r6, $r16, $r26, $r35, $r39, $r48;
        groovyjarjarantlr.Tool $r22, $r31;
        java.lang.StringBuffer $r8, $r9, $r10, $r12, $r13, $r14, $r18, $r19, $r20, $r21, $r23, $r24, $r25, $r28, $r30, $r32, $r33, $r34, $r37, $r43, $r44, $r45;
        java.lang.String r2, $r7, $r15, $r17, $r27, $r29, $r36, $r38, $r42, r47, $r51, r52, $r53, $r54, r55;
        groovyjarjarantlr.ActionTransInfo r11;
        groovyjarjarantlr.JavaCodeGenerator r0;
        groovyjarjarantlr.Grammar $r3, $r46;
        boolean $z0, $z1, $z2, $z3, $z4, z5, z6, z7, z8, z9;
        groovyjarjarantlr.AlternativeElement r50;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i7;
        java.util.Hashtable $r4;
        java.lang.Object $r5, $r41;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r2 := @parameter0: java.lang.String;

        r11 := @parameter1: groovyjarjarantlr.ActionTransInfo;

        $r1 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        if $r1 != null goto label01;

        return r2;

     label01:
        z5 = 0;

        z9 = 0;

        z8 = 0;

        z7 = 0;

        z6 = 0;

        r47 = r2;

        $r3 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r3 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z0 == 0 goto label03;

        $r46 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z4 = $r46.<groovyjarjarantlr.Grammar: boolean buildAST>;

        if $z4 != 0 goto label02;

        z5 = 1;

        z9 = 1;

        z8 = 1;

        z7 = 1;

        z6 = 1;

        goto label03;

     label02:
        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i0 <= 3 goto label03;

        $i1 = virtualinvoke r2.<java.lang.String: int lastIndexOf(java.lang.String)>("_in");

        $i2 = virtualinvoke r2.<java.lang.String: int length()>();

        $i3 = $i2 - 3;

        if $i1 != $i3 goto label03;

        $i4 = virtualinvoke r2.<java.lang.String: int length()>();

        $i5 = $i4 - 3;

        r47 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i5);

        z5 = 1;

        z9 = 1;

        z8 = 1;

        z7 = 1;

        z6 = 1;

     label03:
        i6 = 0;

     label04:
        $r48 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        $r49 = $r48.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.collections.impl.Vector labeledElements>;

        $i7 = virtualinvoke $r49.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i6 >= $i7 goto label08;

        $r39 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        $r40 = $r39.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.collections.impl.Vector labeledElements>;

        $r41 = virtualinvoke $r40.<groovyjarjarantlr.collections.impl.Vector: java.lang.Object elementAt(int)>(i6);

        r50 = (groovyjarjarantlr.AlternativeElement) $r41;

        $r42 = virtualinvoke r50.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        $z3 = virtualinvoke $r42.<java.lang.String: boolean equals(java.lang.Object)>(r47);

        if $z3 == 0 goto label07;

        if z7 == 0 goto label05;

        $r51 = r47;

        goto label06;

     label05:
        $r43 = new java.lang.StringBuffer;

        specialinvoke $r43.<java.lang.StringBuffer: void <init>()>();

        $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r47);

        $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_AST");

        $r51 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.String toString()>();

     label06:
        return $r51;

     label07:
        i6 = i6 + 1;

        goto label04;

     label08:
        $r4 = r0.<groovyjarjarantlr.JavaCodeGenerator: java.util.Hashtable treeVariableMap>;

        $r5 = virtualinvoke $r4.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r47);

        r52 = (java.lang.String) $r5;

        if r52 == null goto label13;

        $r15 = <groovyjarjarantlr.JavaCodeGenerator: java.lang.String NONUNIQUE>;

        if r52 != $r15 goto label09;

        $r31 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r30 = new java.lang.StringBuffer;

        specialinvoke $r30.<java.lang.StringBuffer: void <init>()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Ambiguous reference to AST element ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r47);

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" in rule ");

        $r35 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        $r36 = virtualinvoke $r35.<groovyjarjarantlr.RuleBlock: java.lang.String getRuleName()>();

        $r37 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r31.<groovyjarjarantlr.Tool: void error(java.lang.String)>($r38);

        return null;

     label09:
        $r16 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        $r17 = virtualinvoke $r16.<groovyjarjarantlr.RuleBlock: java.lang.String getRuleName()>();

        $z2 = virtualinvoke r52.<java.lang.String: boolean equals(java.lang.Object)>($r17);

        if $z2 == 0 goto label10;

        $r22 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r21 = new java.lang.StringBuffer;

        specialinvoke $r21.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Ambiguous reference to AST element ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r47);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" in rule ");

        $r26 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        $r27 = virtualinvoke $r26.<groovyjarjarantlr.RuleBlock: java.lang.String getRuleName()>();

        $r28 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r22.<groovyjarjarantlr.Tool: void error(java.lang.String)>($r29);

        return null;

     label10:
        if z8 == 0 goto label11;

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r52);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_in");

        $r53 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label12;

     label11:
        $r53 = r52;

     label12:
        return $r53;

     label13:
        $r6 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        $r7 = virtualinvoke $r6.<groovyjarjarantlr.RuleBlock: java.lang.String getRuleName()>();

        $z1 = virtualinvoke r47.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z1 == 0 goto label17;

        if z6 == 0 goto label14;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r47);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_AST_in");

        $r54 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label15;

     label14:
        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r47);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_AST");

        $r54 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

     label15:
        r55 = $r54;

        if r11 == null goto label16;

        if z9 != 0 goto label16;

        r11.<groovyjarjarantlr.ActionTransInfo: java.lang.String refRuleRoot> = $r54;

     label16:
        return r55;

     label17:
        return r47;
    }

    private void mapTreeVariable(groovyjarjarantlr.AlternativeElement, java.lang.String)
    {
        groovyjarjarantlr.RuleRefElement $r10;
        java.lang.String $r1, r5, $r8, r14;
        groovyjarjarantlr.TreeElement $r12;
        java.util.Hashtable $r3, $r6, $r7, $r9;
        boolean $z0, $z1, $z2;
        groovyjarjarantlr.JavaCodeGenerator r2;
        groovyjarjarantlr.TokenRefElement $r11;
        groovyjarjarantlr.GrammarAtom $r13;
        java.lang.Object $r4;
        groovyjarjarantlr.AlternativeElement r0;

        r2 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.AlternativeElement;

        r5 := @parameter1: java.lang.String;

        $z0 = r0 instanceof groovyjarjarantlr.TreeElement;

        if $z0 == 0 goto label1;

        $r12 = (groovyjarjarantlr.TreeElement) r0;

        $r13 = $r12.<groovyjarjarantlr.TreeElement: groovyjarjarantlr.GrammarAtom root>;

        specialinvoke r2.<groovyjarjarantlr.JavaCodeGenerator: void mapTreeVariable(groovyjarjarantlr.AlternativeElement,java.lang.String)>($r13, r5);

        return;

     label1:
        r14 = null;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        if $r1 != null goto label3;

        $z1 = r0 instanceof groovyjarjarantlr.TokenRefElement;

        if $z1 == 0 goto label2;

        $r11 = (groovyjarjarantlr.TokenRefElement) r0;

        r14 = $r11.<groovyjarjarantlr.TokenRefElement: java.lang.String atomText>;

        goto label3;

     label2:
        $z2 = r0 instanceof groovyjarjarantlr.RuleRefElement;

        if $z2 == 0 goto label3;

        $r10 = (groovyjarjarantlr.RuleRefElement) r0;

        r14 = $r10.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

     label3:
        if r14 == null goto label5;

        $r3 = r2.<groovyjarjarantlr.JavaCodeGenerator: java.util.Hashtable treeVariableMap>;

        $r4 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r14);

        if $r4 == null goto label4;

        $r7 = r2.<groovyjarjarantlr.JavaCodeGenerator: java.util.Hashtable treeVariableMap>;

        virtualinvoke $r7.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>(r14);

        $r9 = r2.<groovyjarjarantlr.JavaCodeGenerator: java.util.Hashtable treeVariableMap>;

        $r8 = <groovyjarjarantlr.JavaCodeGenerator: java.lang.String NONUNIQUE>;

        virtualinvoke $r9.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r14, $r8);

        goto label5;

     label4:
        $r6 = r2.<groovyjarjarantlr.JavaCodeGenerator: java.util.Hashtable treeVariableMap>;

        virtualinvoke $r6.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r14, r5);

     label5:
        return;
    }

    protected java.lang.String processActionForSpecialSymbols(java.lang.String, int, groovyjarjarantlr.RuleBlock, groovyjarjarantlr.ActionTransInfo)
    {
        groovyjarjarantlr.Grammar $r1, $r2, $r3, $r6, $r7, $r23;
        groovyjarjarantlr.Token $r26;
        boolean $z0, $z1, $z2, $z3;
        groovyjarjarantlr.RuleBlock r4;
        groovyjarjarantlr.CharStreamException $r8;
        groovyjarjarantlr.RecognitionException $r20;
        groovyjarjarantlr.Tool $r10, $r16, $r25;
        java.lang.StringBuffer $r11, $r12, $r17, $r18, $r28, $r29;
        int $i0, i1, $i2, $i3, $i5, $i7;
        groovyjarjarantlr.ActionTransInfo r5;
        java.lang.String $r13, $r19, r21, $r24;
        groovyjarjarantlr.actions.java.ActionLexer $r27;
        groovyjarjarantlr.JavaCodeGenerator r0;
        groovyjarjarantlr.TokenStreamException $r14;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r21 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        r4 := @parameter2: groovyjarjarantlr.RuleBlock;

        r5 := @parameter3: groovyjarjarantlr.ActionTransInfo;

        if r21 == null goto label01;

        $i0 = virtualinvoke r21.<java.lang.String: int length()>();

        if $i0 != 0 goto label02;

     label01:
        return null;

     label02:
        $r1 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        if $r1 != null goto label03;

        return r21;

     label03:
        $r2 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r2.<groovyjarjarantlr.Grammar: boolean buildAST>;

        if $z0 == 0 goto label04;

        $i3 = virtualinvoke r21.<java.lang.String: int indexOf(int)>(35);

        $i5 = (int) -1;

        if $i3 != $i5 goto label06;

     label04:
        $r3 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z1 = $r3 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z1 != 0 goto label06;

        $r6 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z2 = $r6 instanceof groovyjarjarantlr.LexerGrammar;

        if $z2 != 0 goto label05;

        $r7 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z3 = $r7 instanceof groovyjarjarantlr.ParserGrammar;

        if $z3 == 0 goto label12;

     label05:
        $i2 = virtualinvoke r21.<java.lang.String: int indexOf(int)>(36);

        $i7 = (int) -1;

        if $i2 == $i7 goto label12;

     label06:
        $r27 = new groovyjarjarantlr.actions.java.ActionLexer;

        specialinvoke $r27.<groovyjarjarantlr.actions.java.ActionLexer: void <init>(java.lang.String,groovyjarjarantlr.RuleBlock,groovyjarjarantlr.CodeGenerator,groovyjarjarantlr.ActionTransInfo)>(r21, r4, r0, r5);

        virtualinvoke $r27.<groovyjarjarantlr.actions.java.ActionLexer: void setLineOffset(int)>(i1);

        $r23 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r24 = virtualinvoke $r23.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        virtualinvoke $r27.<groovyjarjarantlr.actions.java.ActionLexer: void setFilename(java.lang.String)>($r24);

        $r25 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        virtualinvoke $r27.<groovyjarjarantlr.actions.java.ActionLexer: void setTool(groovyjarjarantlr.Tool)>($r25);

     label07:
        virtualinvoke $r27.<groovyjarjarantlr.actions.java.ActionLexer: void mACTION(boolean)>(1);

        $r26 = virtualinvoke $r27.<groovyjarjarantlr.actions.java.ActionLexer: groovyjarjarantlr.Token getTokenObject()>();

        r21 = virtualinvoke $r26.<groovyjarjarantlr.Token: java.lang.String getText()>();

     label08:
        goto label12;

     label09:
        $r20 := @caughtexception;

        virtualinvoke $r27.<groovyjarjarantlr.actions.java.ActionLexer: void reportError(groovyjarjarantlr.RecognitionException)>($r20);

        return r21;

     label10:
        $r14 := @caughtexception;

        $r16 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r28 = new java.lang.StringBuffer;

        specialinvoke $r28.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Error reading action:");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r21);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r16.<groovyjarjarantlr.Tool: void panic(java.lang.String)>($r19);

        return r21;

     label11:
        $r8 := @caughtexception;

        $r10 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r29 = new java.lang.StringBuffer;

        specialinvoke $r29.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Error reading action:");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r21);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r10.<groovyjarjarantlr.Tool: void panic(java.lang.String)>($r13);

        return r21;

     label12:
        return r21;

        catch groovyjarjarantlr.RecognitionException from label07 to label08 with label09;
        catch groovyjarjarantlr.TokenStreamException from label07 to label08 with label10;
        catch groovyjarjarantlr.CharStreamException from label07 to label08 with label11;
    }

    private void setupGrammarParameters(groovyjarjarantlr.Grammar)
    {
        groovyjarjarantlr.Grammar r0;
        groovyjarjarantlr.Tool $r2;
        java.lang.StringBuffer $r3, $r4, $r6, $r7;
        java.lang.String $r5, $r8, $r11, $r12, $r14, $r15;
        groovyjarjarantlr.Token $r9, $r10, $r13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        groovyjarjarantlr.JavaCodeGenerator r1;

        r1 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.Grammar;

        $z0 = r0 instanceof groovyjarjarantlr.ParserGrammar;

        if $z0 == 0 goto label2;

        r1.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String labeledElementASTType> = "AST";

        $z4 = virtualinvoke r0.<groovyjarjarantlr.Grammar: boolean hasOption(java.lang.String)>("ASTLabelType");

        if $z4 == 0 goto label1;

        $r13 = virtualinvoke r0.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Token getOption(java.lang.String)>("ASTLabelType");

        if $r13 == null goto label1;

        $r14 = virtualinvoke $r13.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r15 = staticinvoke <groovyjarjarantlr.StringUtils: java.lang.String stripFrontBack(java.lang.String,java.lang.String,java.lang.String)>($r14, "\"", "\"");

        if $r15 == null goto label1;

        r1.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String labeledElementASTType> = $r15;

     label1:
        r1.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String labeledElementType> = "Token ";

        r1.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String labeledElementInit> = "null";

        r1.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String commonExtraArgs> = "";

        r1.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String commonExtraParams> = "";

        r1.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String commonLocalVars> = "";

        r1.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String lt1Value> = "LT(1)";

        r1.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String exceptionThrown> = "RecognitionException";

        r1.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String throwNoViable> = "throw new NoViableAltException(LT(1), getFilename());";

        goto label7;

     label2:
        $z1 = r0 instanceof groovyjarjarantlr.LexerGrammar;

        if $z1 == 0 goto label3;

        r1.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String labeledElementType> = "char ";

        r1.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String labeledElementInit> = "\'\\0\'";

        r1.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String commonExtraArgs> = "";

        r1.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String commonExtraParams> = "boolean _createToken";

        r1.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String commonLocalVars> = "int _ttype; Token _token=null; int _begin=text.length();";

        r1.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String lt1Value> = "LA(1)";

        r1.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String exceptionThrown> = "RecognitionException";

        r1.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String throwNoViable> = "throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());";

        goto label7;

     label3:
        $z2 = r0 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z2 == 0 goto label6;

        r1.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String labeledElementASTType> = "AST";

        r1.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String labeledElementType> = "AST";

        $z3 = virtualinvoke r0.<groovyjarjarantlr.Grammar: boolean hasOption(java.lang.String)>("ASTLabelType");

        if $z3 == 0 goto label4;

        $r10 = virtualinvoke r0.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Token getOption(java.lang.String)>("ASTLabelType");

        if $r10 == null goto label4;

        $r11 = virtualinvoke $r10.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r12 = staticinvoke <groovyjarjarantlr.StringUtils: java.lang.String stripFrontBack(java.lang.String,java.lang.String,java.lang.String)>($r11, "\"", "\"");

        if $r12 == null goto label4;

        r1.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String labeledElementASTType> = $r12;

        r1.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String labeledElementType> = $r12;

     label4:
        $z5 = virtualinvoke r0.<groovyjarjarantlr.Grammar: boolean hasOption(java.lang.String)>("ASTLabelType");

        if $z5 != 0 goto label5;

        $r9 = new groovyjarjarantlr.Token;

        specialinvoke $r9.<groovyjarjarantlr.Token: void <init>(int,java.lang.String)>(6, "AST");

        virtualinvoke r0.<groovyjarjarantlr.Grammar: boolean setOption(java.lang.String,groovyjarjarantlr.Token)>("ASTLabelType", $r9);

     label5:
        r1.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String labeledElementInit> = "null";

        r1.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String commonExtraArgs> = "_t";

        r1.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String commonExtraParams> = "AST _t";

        r1.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String commonLocalVars> = "";

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $r5 = r1.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String labeledElementASTType>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")_t");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        r1.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String lt1Value> = $r8;

        r1.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String exceptionThrown> = "RecognitionException";

        r1.<groovyjarjarantlr.JavaCodeGenerator: java.lang.String throwNoViable> = "throw new NoViableAltException(_t);";

        goto label7;

     label6:
        $r2 = r1.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        virtualinvoke $r2.<groovyjarjarantlr.Tool: void panic(java.lang.String)>("Unknown grammar type");

     label7:
        return;
    }

    public groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager getPrintWriterManager()
    {
        groovyjarjarantlr.JavaCodeGenerator r0;
        groovyjarjarantlr.DefaultJavaCodeGeneratorPrintWriterManager $r3;
        groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager $r1, $r2;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        $r1 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager printWriterManager>;

        if $r1 != null goto label1;

        $r3 = new groovyjarjarantlr.DefaultJavaCodeGeneratorPrintWriterManager;

        specialinvoke $r3.<groovyjarjarantlr.DefaultJavaCodeGeneratorPrintWriterManager: void <init>()>();

        r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager printWriterManager> = $r3;

     label1:
        $r2 = r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager printWriterManager>;

        return $r2;
    }

    public void setPrintWriterManager(groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager)
    {
        groovyjarjarantlr.JavaCodeGenerator r0;
        groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager r1;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager;

        r0.<groovyjarjarantlr.JavaCodeGenerator: groovyjarjarantlr.JavaCodeGeneratorPrintWriterManager printWriterManager> = r1;

        return;
    }

    public void setTool(groovyjarjarantlr.Tool)
    {
        groovyjarjarantlr.JavaCodeGenerator r0;
        groovyjarjarantlr.Tool r1;

        r0 := @this: groovyjarjarantlr.JavaCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.Tool;

        specialinvoke r0.<groovyjarjarantlr.CodeGenerator: void setTool(groovyjarjarantlr.Tool)>(r1);

        return;
    }

    static void <clinit>()
    {
        java.lang.String $r0;

        <groovyjarjarantlr.JavaCodeGenerator: int caseSizeThreshold> = 127;

        <groovyjarjarantlr.JavaCodeGenerator: int CONTINUE_LAST_MAPPING> = -888;

        <groovyjarjarantlr.JavaCodeGenerator: int NO_MAPPING> = -999;

        $r0 = new java.lang.String;

        specialinvoke $r0.<java.lang.String: void <init>()>();

        <groovyjarjarantlr.JavaCodeGenerator: java.lang.String NONUNIQUE> = $r0;

        return;
    }
}
