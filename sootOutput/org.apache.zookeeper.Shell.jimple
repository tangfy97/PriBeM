public abstract class org.apache.zookeeper.Shell extends java.lang.Object
{
    org.apache.log4j.Logger LOG;
    public static final java.lang.String USER_NAME_COMMAND;
    public static final java.lang.String SET_PERMISSION_COMMAND;
    public static final java.lang.String SET_OWNER_COMMAND;
    public static final java.lang.String SET_GROUP_COMMAND;
    protected long timeOutInterval;
    private java.util.concurrent.atomic.AtomicBoolean timedOut;
    public static final java.lang.String ULIMIT_COMMAND;
    public static final boolean WINDOWS;
    private long interval;
    private long lastTime;
    private java.util.Map environment;
    private java.io.File dir;
    private java.lang.Process process;
    private int exitCode;
    private volatile java.util.concurrent.atomic.AtomicBoolean completed;

    public static java.lang.String[] getGroupsCommand()
    {
        java.lang.String[] $r0;

        $r0 = newarray (java.lang.String)[3];

        $r0[0] = "bash";

        $r0[1] = "-c";

        $r0[2] = "groups";

        return $r0;
    }

    public static java.lang.String[] getGroupsForUserCommand(java.lang.String)
    {
        java.lang.String[] $r0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String r3, $r5;

        r3 := @parameter0: java.lang.String;

        $r0 = newarray (java.lang.String)[3];

        $r0[0] = "bash";

        $r0[1] = "-c";

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("id -Gn ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r0[2] = $r5;

        return $r0;
    }

    public static java.lang.String[] getGET_PERMISSION_COMMAND()
    {
        java.lang.String[] $r0;
        java.lang.String $r1;
        boolean $z0;

        $r0 = newarray (java.lang.String)[2];

        $z0 = <org.apache.zookeeper.Shell: boolean WINDOWS>;

        if $z0 == 0 goto label1;

        $r1 = "ls";

        goto label2;

     label1:
        $r1 = "/bin/ls";

     label2:
        $r0[0] = $r1;

        $r0[1] = "-ld";

        return $r0;
    }

    public static java.lang.String[] getUlimitMemoryCommand(int)
    {
        int i0;
        java.lang.String[] $r0;
        java.lang.String $r1;
        boolean $z0;

        i0 := @parameter0: int;

        $z0 = <org.apache.zookeeper.Shell: boolean WINDOWS>;

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r0 = newarray (java.lang.String)[3];

        $r0[0] = "ulimit";

        $r0[1] = "-v";

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        $r0[2] = $r1;

        return $r0;
    }

    public void <init>()
    {
        org.apache.zookeeper.Shell r0;

        r0 := @this: org.apache.zookeeper.Shell;

        specialinvoke r0.<org.apache.zookeeper.Shell: void <init>(long)>(0L);

        return;
    }

    public void <init>(long)
    {
        org.apache.log4j.Logger $r1;
        byte $b1;
        org.apache.zookeeper.Shell r0;
        int $i3;
        long l0, $l2;

        r0 := @this: org.apache.zookeeper.Shell;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/zookeeper/Shell;");

        r0.<org.apache.zookeeper.Shell: org.apache.log4j.Logger LOG> = $r1;

        r0.<org.apache.zookeeper.Shell: long timeOutInterval> = 0L;

        r0.<org.apache.zookeeper.Shell: long interval> = l0;

        $b1 = l0 cmp 0L;

        $i3 = (int) $b1;

        if $i3 >= 0 goto label1;

        $l2 = 0L;

        goto label2;

     label1:
        $l2 = neg l0;

     label2:
        r0.<org.apache.zookeeper.Shell: long lastTime> = $l2;

        return;
    }

    protected void setEnvironment(java.util.Map)
    {
        org.apache.zookeeper.Shell r0;
        java.util.Map r1;

        r0 := @this: org.apache.zookeeper.Shell;

        r1 := @parameter0: java.util.Map;

        r0.<org.apache.zookeeper.Shell: java.util.Map environment> = r1;

        return;
    }

    protected void setWorkingDirectory(java.io.File)
    {
        org.apache.zookeeper.Shell r0;
        java.io.File r1;

        r0 := @this: org.apache.zookeeper.Shell;

        r1 := @parameter0: java.io.File;

        r0.<org.apache.zookeeper.Shell: java.io.File dir> = r1;

        return;
    }

    protected void run() throws java.io.IOException
    {
        byte $b4;
        org.apache.zookeeper.Shell r0;
        int $i5;
        long $l0, $l1, $l2, $l3;

        r0 := @this: org.apache.zookeeper.Shell;

        $l1 = r0.<org.apache.zookeeper.Shell: long lastTime>;

        $l0 = r0.<org.apache.zookeeper.Shell: long interval>;

        $l2 = $l1 + $l0;

        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $b4 = $l2 cmp $l3;

        $i5 = (int) $b4;

        if $i5 <= 0 goto label1;

        return;

     label1:
        r0.<org.apache.zookeeper.Shell: int exitCode> = 0;

        specialinvoke r0.<org.apache.zookeeper.Shell: void runCommand()>();

        return;
    }

    private void runCommand() throws java.io.IOException
    {
        java.lang.IllegalStateException $r47;
        java.util.Timer r48, $r53;
        org.apache.zookeeper.Shell$ShellTimeoutTimerTask $r54;
        org.apache.log4j.Logger $r31, $r34, $r37, $r39, $r46;
        byte $b1;
        java.util.Map $r5, $r28, $r29;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Process $r7, $r10, $r14, $r18, $r21, $r32;
        org.apache.zookeeper.Shell r1;
        java.lang.Throwable $r40;
        java.util.concurrent.atomic.AtomicBoolean $r19, $r20, $r22, $r35, $r41, $r51, $r52;
        java.lang.String[] $r2;
        long $l0, $l4, $l6, $l7;
        java.lang.StringBuffer $r59;
        int $i2, $i3, $i5, $i8;
        java.lang.String $r24, $r44, r49;
        java.lang.ProcessBuilder $r50;
        org.apache.zookeeper.Shell$1 $r60;
        java.io.IOException $r30, $r33, $r36, $r38, $r62;
        java.io.InputStreamReader $r55, $r57;
        java.io.File $r6, $r27;
        java.lang.InterruptedException $r42, $r45;
        org.apache.zookeeper.Shell$ExitCodeException $r61;
        java.io.BufferedReader $r56, $r58;
        java.io.InputStream $r11, $r15;

        r1 := @this: org.apache.zookeeper.Shell;

        $r50 = new java.lang.ProcessBuilder;

        $r2 = virtualinvoke r1.<org.apache.zookeeper.Shell: java.lang.String[] getExecString()>();

        specialinvoke $r50.<java.lang.ProcessBuilder: void <init>(java.lang.String[])>($r2);

        r48 = null;

        $r51 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r51.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r1.<org.apache.zookeeper.Shell: java.util.concurrent.atomic.AtomicBoolean timedOut> = $r51;

        $r52 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r52.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r1.<org.apache.zookeeper.Shell: java.util.concurrent.atomic.AtomicBoolean completed> = $r52;

        $r5 = r1.<org.apache.zookeeper.Shell: java.util.Map environment>;

        if $r5 == null goto label01;

        $r28 = virtualinvoke $r50.<java.lang.ProcessBuilder: java.util.Map environment()>();

        $r29 = r1.<org.apache.zookeeper.Shell: java.util.Map environment>;

        interfaceinvoke $r28.<java.util.Map: void putAll(java.util.Map)>($r29);

     label01:
        $r6 = r1.<org.apache.zookeeper.Shell: java.io.File dir>;

        if $r6 == null goto label02;

        $r27 = r1.<org.apache.zookeeper.Shell: java.io.File dir>;

        virtualinvoke $r50.<java.lang.ProcessBuilder: java.lang.ProcessBuilder directory(java.io.File)>($r27);

     label02:
        $r7 = virtualinvoke $r50.<java.lang.ProcessBuilder: java.lang.Process start()>();

        r1.<org.apache.zookeeper.Shell: java.lang.Process process> = $r7;

        $l0 = r1.<org.apache.zookeeper.Shell: long timeOutInterval>;

        $b1 = $l0 cmp 0L;

        $i8 = (int) $b1;

        if $i8 <= 0 goto label03;

        $r53 = new java.util.Timer;

        specialinvoke $r53.<java.util.Timer: void <init>()>();

        r48 = $r53;

        $r54 = new org.apache.zookeeper.Shell$ShellTimeoutTimerTask;

        specialinvoke $r54.<org.apache.zookeeper.Shell$ShellTimeoutTimerTask: void <init>(org.apache.zookeeper.Shell)>(r1);

        $l6 = r1.<org.apache.zookeeper.Shell: long timeOutInterval>;

        virtualinvoke $r53.<java.util.Timer: void schedule(java.util.TimerTask,long)>($r54, $l6);

     label03:
        $r56 = new java.io.BufferedReader;

        $r55 = new java.io.InputStreamReader;

        $r10 = r1.<org.apache.zookeeper.Shell: java.lang.Process process>;

        $r11 = virtualinvoke $r10.<java.lang.Process: java.io.InputStream getErrorStream()>();

        specialinvoke $r55.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r11);

        specialinvoke $r56.<java.io.BufferedReader: void <init>(java.io.Reader)>($r55);

        $r58 = new java.io.BufferedReader;

        $r57 = new java.io.InputStreamReader;

        $r14 = r1.<org.apache.zookeeper.Shell: java.lang.Process process>;

        $r15 = virtualinvoke $r14.<java.lang.Process: java.io.InputStream getInputStream()>();

        specialinvoke $r57.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r15);

        specialinvoke $r58.<java.io.BufferedReader: void <init>(java.io.Reader)>($r57);

        $r59 = new java.lang.StringBuffer;

        specialinvoke $r59.<java.lang.StringBuffer: void <init>()>();

        $r60 = new org.apache.zookeeper.Shell$1;

        specialinvoke $r60.<org.apache.zookeeper.Shell$1: void <init>(org.apache.zookeeper.Shell,java.io.BufferedReader,java.lang.StringBuffer)>(r1, $r56, $r59);

     label04:
        virtualinvoke $r60.<java.lang.Thread: void start()>();

     label05:
        goto label07;

     label06:
        $r47 := @caughtexception;

     label07:
        virtualinvoke r1.<org.apache.zookeeper.Shell: void parseExecResult(java.io.BufferedReader)>($r58);

        r49 = virtualinvoke $r58.<java.io.BufferedReader: java.lang.String readLine()>();

     label08:
        if r49 == null goto label09;

        r49 = virtualinvoke $r58.<java.io.BufferedReader: java.lang.String readLine()>();

        goto label08;

     label09:
        $r18 = r1.<org.apache.zookeeper.Shell: java.lang.Process process>;

        $i2 = virtualinvoke $r18.<java.lang.Process: int waitFor()>();

        r1.<org.apache.zookeeper.Shell: int exitCode> = $i2;

     label10:
        virtualinvoke $r60.<java.lang.Thread: void join()>();

     label11:
        goto label13;

     label12:
        $r45 := @caughtexception;

        $r46 = r1.<org.apache.zookeeper.Shell: org.apache.log4j.Logger LOG>;

        virtualinvoke $r46.<org.apache.log4j.Logger: void warn(java.lang.Object,java.lang.Throwable)>("Interrupted while reading the error stream", $r45);

     label13:
        $r19 = r1.<org.apache.zookeeper.Shell: java.util.concurrent.atomic.AtomicBoolean completed>;

        virtualinvoke $r19.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        $i3 = r1.<org.apache.zookeeper.Shell: int exitCode>;

        if $i3 == 0 goto label14;

        $r61 = new org.apache.zookeeper.Shell$ExitCodeException;

        $i5 = r1.<org.apache.zookeeper.Shell: int exitCode>;

        $r24 = virtualinvoke $r59.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r61.<org.apache.zookeeper.Shell$ExitCodeException: void <init>(int,java.lang.String)>($i5, $r24);

        throw $r61;

     label14:
        goto label20;

     label15:
        goto label19;

     label16:
        $r42 := @caughtexception;

        $r62 = new java.io.IOException;

        $r44 = virtualinvoke $r42.<java.lang.InterruptedException: java.lang.String toString()>();

        specialinvoke $r62.<java.io.IOException: void <init>(java.lang.String)>($r44);

        throw $r62;

     label17:
        $r40 := @caughtexception;

        goto label29;

     label18:
        throw $r40;

     label19:
        return;

     label20:
        if r48 == null goto label21;

        $r22 = r1.<org.apache.zookeeper.Shell: java.util.concurrent.atomic.AtomicBoolean timedOut>;

        $z1 = virtualinvoke $r22.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z1 != 0 goto label21;

        virtualinvoke r48.<java.util.Timer: void cancel()>();

     label21:
        virtualinvoke $r58.<java.io.BufferedReader: void close()>();

     label22:
        goto label24;

     label23:
        $r38 := @caughtexception;

        $r39 = r1.<org.apache.zookeeper.Shell: org.apache.log4j.Logger LOG>;

        virtualinvoke $r39.<org.apache.log4j.Logger: void warn(java.lang.Object,java.lang.Throwable)>("Error while closing the input stream", $r38);

     label24:
        $r20 = r1.<org.apache.zookeeper.Shell: java.util.concurrent.atomic.AtomicBoolean completed>;

        $z0 = virtualinvoke $r20.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 != 0 goto label25;

        virtualinvoke $r60.<java.lang.Thread: void interrupt()>();

     label25:
        virtualinvoke $r56.<java.io.BufferedReader: void close()>();

     label26:
        goto label28;

     label27:
        $r36 := @caughtexception;

        $r37 = r1.<org.apache.zookeeper.Shell: org.apache.log4j.Logger LOG>;

        virtualinvoke $r37.<org.apache.log4j.Logger: void warn(java.lang.Object,java.lang.Throwable)>("Error while closing the error stream", $r36);

     label28:
        $r21 = r1.<org.apache.zookeeper.Shell: java.lang.Process process>;

        virtualinvoke $r21.<java.lang.Process: void destroy()>();

        $l4 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r1.<org.apache.zookeeper.Shell: long lastTime> = $l4;

        goto label15;

     label29:
        if r48 == null goto label30;

        $r41 = r1.<org.apache.zookeeper.Shell: java.util.concurrent.atomic.AtomicBoolean timedOut>;

        $z3 = virtualinvoke $r41.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z3 != 0 goto label30;

        virtualinvoke r48.<java.util.Timer: void cancel()>();

     label30:
        virtualinvoke $r58.<java.io.BufferedReader: void close()>();

     label31:
        goto label33;

     label32:
        $r33 := @caughtexception;

        $r34 = r1.<org.apache.zookeeper.Shell: org.apache.log4j.Logger LOG>;

        virtualinvoke $r34.<org.apache.log4j.Logger: void warn(java.lang.Object,java.lang.Throwable)>("Error while closing the input stream", $r33);

     label33:
        $r35 = r1.<org.apache.zookeeper.Shell: java.util.concurrent.atomic.AtomicBoolean completed>;

        $z2 = virtualinvoke $r35.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z2 != 0 goto label34;

        virtualinvoke $r60.<java.lang.Thread: void interrupt()>();

     label34:
        virtualinvoke $r56.<java.io.BufferedReader: void close()>();

     label35:
        goto label37;

     label36:
        $r30 := @caughtexception;

        $r31 = r1.<org.apache.zookeeper.Shell: org.apache.log4j.Logger LOG>;

        virtualinvoke $r31.<org.apache.log4j.Logger: void warn(java.lang.Object,java.lang.Throwable)>("Error while closing the error stream", $r30);

     label37:
        $r32 = r1.<org.apache.zookeeper.Shell: java.lang.Process process>;

        virtualinvoke $r32.<java.lang.Process: void destroy()>();

        $l7 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r1.<org.apache.zookeeper.Shell: long lastTime> = $l7;

        goto label18;

        catch java.lang.IllegalStateException from label04 to label05 with label06;
        catch java.lang.InterruptedException from label10 to label11 with label12;
        catch java.lang.InterruptedException from label07 to label14 with label16;
        catch java.lang.Throwable from label07 to label15 with label17;
        catch java.lang.Throwable from label16 to label18 with label17;
        catch java.io.IOException from label21 to label22 with label23;
        catch java.io.IOException from label25 to label26 with label27;
        catch java.io.IOException from label30 to label31 with label32;
        catch java.io.IOException from label34 to label35 with label36;
    }

    protected abstract java.lang.String[] getExecString();

    protected abstract void parseExecResult(java.io.BufferedReader) throws java.io.IOException;

    public java.lang.Process getProcess()
    {
        org.apache.zookeeper.Shell r0;
        java.lang.Process $r1;

        r0 := @this: org.apache.zookeeper.Shell;

        $r1 = r0.<org.apache.zookeeper.Shell: java.lang.Process process>;

        return $r1;
    }

    public int getExitCode()
    {
        org.apache.zookeeper.Shell r0;
        int $i0;

        r0 := @this: org.apache.zookeeper.Shell;

        $i0 = r0.<org.apache.zookeeper.Shell: int exitCode>;

        return $i0;
    }

    public boolean isTimedOut()
    {
        org.apache.zookeeper.Shell r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;

        r0 := @this: org.apache.zookeeper.Shell;

        $r1 = r0.<org.apache.zookeeper.Shell: java.util.concurrent.atomic.AtomicBoolean timedOut>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        return $z0;
    }

    private void setTimedOut()
    {
        org.apache.zookeeper.Shell r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @this: org.apache.zookeeper.Shell;

        $r1 = r0.<org.apache.zookeeper.Shell: java.util.concurrent.atomic.AtomicBoolean timedOut>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        return;
    }

    public static transient java.lang.String execCommand(java.lang.String[]) throws java.io.IOException
    {
        java.lang.String[] r0;
        java.lang.String $r1;

        r0 := @parameter0: java.lang.String[];

        $r1 = staticinvoke <org.apache.zookeeper.Shell: java.lang.String execCommand(java.util.Map,java.lang.String[],long)>(null, r0, 0L);

        return $r1;
    }

    public static java.lang.String execCommand(java.util.Map, java.lang.String[], long) throws java.io.IOException
    {
        java.util.Map r2;
        org.apache.zookeeper.Shell$ShellCommandExecutor $r0;
        java.lang.String[] r1;
        long l0;
        java.lang.String $r3;

        r2 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.String[];

        l0 := @parameter2: long;

        $r0 = new org.apache.zookeeper.Shell$ShellCommandExecutor;

        specialinvoke $r0.<org.apache.zookeeper.Shell$ShellCommandExecutor: void <init>(java.lang.String[],java.io.File,java.util.Map,long)>(r1, null, r2, l0);

        virtualinvoke $r0.<org.apache.zookeeper.Shell$ShellCommandExecutor: void execute()>();

        $r3 = virtualinvoke $r0.<org.apache.zookeeper.Shell$ShellCommandExecutor: java.lang.String getOutput()>();

        return $r3;
    }

    public static transient java.lang.String execCommand(java.util.Map, java.lang.String[]) throws java.io.IOException
    {
        java.lang.String[] r1;
        java.lang.String $r2;
        java.util.Map r0;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.String[];

        $r2 = staticinvoke <org.apache.zookeeper.Shell: java.lang.String execCommand(java.util.Map,java.lang.String[],long)>(r0, r1, 0L);

        return $r2;
    }

    static java.util.concurrent.atomic.AtomicBoolean access$000(org.apache.zookeeper.Shell)
    {
        org.apache.zookeeper.Shell r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @parameter0: org.apache.zookeeper.Shell;

        $r1 = r0.<org.apache.zookeeper.Shell: java.util.concurrent.atomic.AtomicBoolean completed>;

        return $r1;
    }

    static void access$100(org.apache.zookeeper.Shell)
    {
        org.apache.zookeeper.Shell r0;

        r0 := @parameter0: org.apache.zookeeper.Shell;

        specialinvoke r0.<org.apache.zookeeper.Shell: void setTimedOut()>();

        return;
    }

    static void <clinit>()
    {
        java.lang.String $r0;
        boolean $z0;

        <org.apache.zookeeper.Shell: java.lang.String ULIMIT_COMMAND> = "ulimit";

        <org.apache.zookeeper.Shell: java.lang.String SET_GROUP_COMMAND> = "chgrp";

        <org.apache.zookeeper.Shell: java.lang.String SET_OWNER_COMMAND> = "chown";

        <org.apache.zookeeper.Shell: java.lang.String SET_PERMISSION_COMMAND> = "chmod";

        <org.apache.zookeeper.Shell: java.lang.String USER_NAME_COMMAND> = "whoami";

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name");

        $z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("Windows");

        <org.apache.zookeeper.Shell: boolean WINDOWS> = $z0;

        return;
    }
}
