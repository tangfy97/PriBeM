abstract class groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document$OutputSink extends groovy.lang.GroovyObjectSupport
{
    private final java.lang.String name;
    private final groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document this$0;

    public void <init>(groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document, java.lang.String)
    {
        java.lang.String r2;
        groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document$OutputSink r0;
        groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document r1;

        r0 := @this: groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document$OutputSink;

        r1 := @parameter0: groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document;

        r2 := @parameter1: java.lang.String;

        r0.<groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document$OutputSink: groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document this$0> = r1;

        specialinvoke r0.<groovy.lang.GroovyObjectSupport: void <init>()>();

        r0.<groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document$OutputSink: java.lang.String name> = r2;

        return;
    }

    public java.lang.Object invokeMethod(java.lang.String, java.lang.Object)
    {
        groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document $r2, $r5;
        java.lang.Object r4, $r6;
        java.lang.String $r1, r3;
        groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document$OutputSink r0;

        r0 := @this: groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document$OutputSink;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.Object;

        $r2 = r0.<groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document$OutputSink: groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document this$0>;

        $r1 = r0.<groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document$OutputSink: java.lang.String name>;

        staticinvoke <groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document: java.lang.String access$002(groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document,java.lang.String)>($r2, $r1);

        $r5 = r0.<groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document$OutputSink: groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document this$0>;

        $r6 = virtualinvoke $r5.<groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document: java.lang.Object invokeMethod(java.lang.String,java.lang.Object)>(r3, r4);

        return $r6;
    }

    public abstract java.lang.Object leftShift(java.lang.Object);

    protected java.lang.Object leftShift(java.lang.String, java.lang.Object)
    {
        java.lang.Object[] $r3;
        groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document $r1, $r5;
        java.lang.Object r4;
        java.lang.String r2;
        groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document$OutputSink r0;

        r0 := @this: groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document$OutputSink;

        r2 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.Object;

        $r1 = r0.<groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document$OutputSink: groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document this$0>;

        virtualinvoke $r1.<groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document: java.lang.Object getProperty(java.lang.String)>("mkp");

        $r5 = r0.<groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document$OutputSink: groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document this$0>;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r4;

        virtualinvoke $r5.<groovy.xml.streamingmarkupsupport.BaseMarkupBuilder$Document: java.lang.Object invokeMethod(java.lang.String,java.lang.Object)>(r2, $r3);

        return r0;
    }
}
