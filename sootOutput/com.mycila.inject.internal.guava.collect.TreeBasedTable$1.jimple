class com.mycila.inject.internal.guava.collect.TreeBasedTable$1 extends java.lang.Object implements com.mycila.inject.internal.guava.base.Function
{
    final com.mycila.inject.internal.guava.collect.TreeBasedTable this$0;

    void <init>(com.mycila.inject.internal.guava.collect.TreeBasedTable)
    {
        com.mycila.inject.internal.guava.collect.TreeBasedTable r1;
        com.mycila.inject.internal.guava.collect.TreeBasedTable$1 r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.TreeBasedTable$1;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.TreeBasedTable;

        r0.<com.mycila.inject.internal.guava.collect.TreeBasedTable$1: com.mycila.inject.internal.guava.collect.TreeBasedTable this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.util.Iterator apply(java.util.Map)
    {
        java.util.Iterator $r2;
        java.util.Map r0;
        java.util.Set $r1;
        com.mycila.inject.internal.guava.collect.TreeBasedTable$1 r3;

        r3 := @this: com.mycila.inject.internal.guava.collect.TreeBasedTable$1;

        r0 := @parameter0: java.util.Map;

        $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set keySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

        return $r2;
    }

    public volatile java.lang.Object apply(java.lang.Object)
    {
        java.util.Iterator $r3;
        java.util.Map $r2;
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.TreeBasedTable$1 r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.TreeBasedTable$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.util.Map) r1;

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.TreeBasedTable$1: java.util.Iterator apply(java.util.Map)>($r2);

        return $r3;
    }
}
