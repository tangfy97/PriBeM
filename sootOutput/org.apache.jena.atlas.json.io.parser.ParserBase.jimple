public class org.apache.jena.atlas.json.io.parser.ParserBase extends java.lang.Object
{
    protected boolean VERBOSE;
    private org.apache.jena.riot.tokens.Tokenizer tokens;
    private org.apache.jena.atlas.iterator.PeekIterator peekTokens;
    protected long currLine;
    protected long currCol;
    private static org.apache.jena.riot.tokens.Token tokenEOF;

    void <init>(org.apache.jena.riot.tokens.Tokenizer)
    {
        org.apache.jena.riot.tokens.Tokenizer r1;
        org.apache.jena.atlas.json.io.parser.ParserBase r0;
        org.apache.jena.atlas.iterator.PeekIterator $r2;

        r0 := @this: org.apache.jena.atlas.json.io.parser.ParserBase;

        r1 := @parameter0: org.apache.jena.riot.tokens.Tokenizer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.jena.atlas.json.io.parser.ParserBase: boolean VERBOSE> = 1;

        r0.<org.apache.jena.atlas.json.io.parser.ParserBase: long currLine> = -1L;

        r0.<org.apache.jena.atlas.json.io.parser.ParserBase: long currCol> = -1L;

        r0.<org.apache.jena.atlas.json.io.parser.ParserBase: org.apache.jena.riot.tokens.Tokenizer tokens> = r1;

        $r2 = new org.apache.jena.atlas.iterator.PeekIterator;

        specialinvoke $r2.<org.apache.jena.atlas.iterator.PeekIterator: void <init>(java.util.Iterator)>(r1);

        r0.<org.apache.jena.atlas.json.io.parser.ParserBase: org.apache.jena.atlas.iterator.PeekIterator peekTokens> = $r2;

        return;
    }

    protected final boolean eof()
    {
        long $l0, $l1;
        org.apache.jena.riot.tokens.Token $r0, $r2;
        org.apache.jena.riot.tokens.Tokenizer $r3, $r4;
        org.apache.jena.atlas.json.io.parser.ParserBase r1;
        boolean $z0;

        r1 := @this: org.apache.jena.atlas.json.io.parser.ParserBase;

        $r0 = <org.apache.jena.atlas.json.io.parser.ParserBase: org.apache.jena.riot.tokens.Token tokenEOF>;

        if $r0 == null goto label1;

        return 1;

     label1:
        $z0 = virtualinvoke r1.<org.apache.jena.atlas.json.io.parser.ParserBase: boolean moreTokens()>();

        if $z0 != 0 goto label2;

        $r2 = new org.apache.jena.riot.tokens.Token;

        $r3 = r1.<org.apache.jena.atlas.json.io.parser.ParserBase: org.apache.jena.riot.tokens.Tokenizer tokens>;

        $l0 = interfaceinvoke $r3.<org.apache.jena.riot.tokens.Tokenizer: long getLine()>();

        $r4 = r1.<org.apache.jena.atlas.json.io.parser.ParserBase: org.apache.jena.riot.tokens.Tokenizer tokens>;

        $l1 = interfaceinvoke $r4.<org.apache.jena.riot.tokens.Tokenizer: long getColumn()>();

        specialinvoke $r2.<org.apache.jena.riot.tokens.Token: void <init>(long,long)>($l0, $l1);

        <org.apache.jena.atlas.json.io.parser.ParserBase: org.apache.jena.riot.tokens.Token tokenEOF> = $r2;

        return 1;

     label2:
        return 0;
    }

    protected final boolean moreTokens()
    {
        org.apache.jena.atlas.json.io.parser.ParserBase r0;
        org.apache.jena.atlas.iterator.PeekIterator $r1;
        boolean $z0;

        r0 := @this: org.apache.jena.atlas.json.io.parser.ParserBase;

        $r1 = r0.<org.apache.jena.atlas.json.io.parser.ParserBase: org.apache.jena.atlas.iterator.PeekIterator peekTokens>;

        $z0 = virtualinvoke $r1.<org.apache.jena.atlas.iterator.PeekIterator: boolean hasNext()>();

        return $z0;
    }

    protected final boolean lookingAt(org.apache.jena.riot.tokens.TokenType)
    {
        org.apache.jena.riot.tokens.Token r3;
        org.apache.jena.riot.tokens.TokenType r4, $r5;
        org.apache.jena.atlas.iterator.PeekIterator $r1;
        java.lang.Object $r2;
        org.apache.jena.atlas.json.io.parser.ParserBase r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.jena.atlas.json.io.parser.ParserBase;

        r4 := @parameter0: org.apache.jena.riot.tokens.TokenType;

        $r1 = r0.<org.apache.jena.atlas.json.io.parser.ParserBase: org.apache.jena.atlas.iterator.PeekIterator peekTokens>;

        $r2 = virtualinvoke $r1.<org.apache.jena.atlas.iterator.PeekIterator: java.lang.Object peek()>();

        r3 = (org.apache.jena.riot.tokens.Token) $r2;

        if r3 != null goto label3;

        $r5 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType EOF>;

        if r4 != $r5 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;

     label3:
        $z0 = virtualinvoke r3.<org.apache.jena.riot.tokens.Token: boolean hasType(org.apache.jena.riot.tokens.TokenType)>(r4);

        return $z0;
    }

    protected final boolean lookingAtString()
    {
        org.apache.jena.riot.tokens.Token r3;
        org.apache.jena.riot.tokens.TokenType $r4, $r5, $r6, $r7;
        org.apache.jena.atlas.iterator.PeekIterator $r1;
        java.lang.Object $r2;
        org.apache.jena.atlas.json.io.parser.ParserBase r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.jena.atlas.json.io.parser.ParserBase;

        $r1 = r0.<org.apache.jena.atlas.json.io.parser.ParserBase: org.apache.jena.atlas.iterator.PeekIterator peekTokens>;

        $r2 = virtualinvoke $r1.<org.apache.jena.atlas.iterator.PeekIterator: java.lang.Object peek()>();

        r3 = (org.apache.jena.riot.tokens.Token) $r2;

        if r3 != null goto label1;

        return 0;

     label1:
        $r4 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType STRING1>;

        $z0 = virtualinvoke r3.<org.apache.jena.riot.tokens.Token: boolean hasType(org.apache.jena.riot.tokens.TokenType)>($r4);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $r5 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType STRING2>;

        $z1 = virtualinvoke r3.<org.apache.jena.riot.tokens.Token: boolean hasType(org.apache.jena.riot.tokens.TokenType)>($r5);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        $r6 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType LONG_STRING1>;

        $z2 = virtualinvoke r3.<org.apache.jena.riot.tokens.Token: boolean hasType(org.apache.jena.riot.tokens.TokenType)>($r6);

        if $z2 == 0 goto label4;

        return 1;

     label4:
        $r7 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType LONG_STRING2>;

        $z3 = virtualinvoke r3.<org.apache.jena.riot.tokens.Token: boolean hasType(org.apache.jena.riot.tokens.TokenType)>($r7);

        if $z3 == 0 goto label5;

        return 1;

     label5:
        return 0;
    }

    protected final boolean lookingAtNumber()
    {
        org.apache.jena.riot.tokens.Token r3;
        org.apache.jena.riot.tokens.TokenType $r4, $r5, $r6, $r7;
        org.apache.jena.atlas.iterator.PeekIterator $r1;
        java.lang.Object $r2;
        org.apache.jena.atlas.json.io.parser.ParserBase r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.jena.atlas.json.io.parser.ParserBase;

        $r1 = r0.<org.apache.jena.atlas.json.io.parser.ParserBase: org.apache.jena.atlas.iterator.PeekIterator peekTokens>;

        $r2 = virtualinvoke $r1.<org.apache.jena.atlas.iterator.PeekIterator: java.lang.Object peek()>();

        r3 = (org.apache.jena.riot.tokens.Token) $r2;

        if r3 != null goto label1;

        return 0;

     label1:
        $r4 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType INTEGER>;

        $z0 = virtualinvoke r3.<org.apache.jena.riot.tokens.Token: boolean hasType(org.apache.jena.riot.tokens.TokenType)>($r4);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $r5 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType HEX>;

        $z1 = virtualinvoke r3.<org.apache.jena.riot.tokens.Token: boolean hasType(org.apache.jena.riot.tokens.TokenType)>($r5);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        $r6 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType DECIMAL>;

        $z2 = virtualinvoke r3.<org.apache.jena.riot.tokens.Token: boolean hasType(org.apache.jena.riot.tokens.TokenType)>($r6);

        if $z2 == 0 goto label4;

        return 1;

     label4:
        $r7 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType DOUBLE>;

        $z3 = virtualinvoke r3.<org.apache.jena.riot.tokens.Token: boolean hasType(org.apache.jena.riot.tokens.TokenType)>($r7);

        if $z3 == 0 goto label5;

        return 1;

     label5:
        return 0;
    }

    protected final org.apache.jena.riot.tokens.Token peekToken()
    {
        org.apache.jena.atlas.iterator.PeekIterator $r1;
        java.lang.Object $r2;
        org.apache.jena.riot.tokens.Token $r3, $r4;
        org.apache.jena.atlas.json.io.parser.ParserBase r0;
        boolean $z0;

        r0 := @this: org.apache.jena.atlas.json.io.parser.ParserBase;

        $z0 = virtualinvoke r0.<org.apache.jena.atlas.json.io.parser.ParserBase: boolean eof()>();

        if $z0 == 0 goto label1;

        $r4 = <org.apache.jena.atlas.json.io.parser.ParserBase: org.apache.jena.riot.tokens.Token tokenEOF>;

        return $r4;

     label1:
        $r1 = r0.<org.apache.jena.atlas.json.io.parser.ParserBase: org.apache.jena.atlas.iterator.PeekIterator peekTokens>;

        $r2 = virtualinvoke $r1.<org.apache.jena.atlas.iterator.PeekIterator: java.lang.Object element()>();

        $r3 = (org.apache.jena.riot.tokens.Token) $r2;

        return $r3;
    }

    protected final org.apache.jena.riot.tokens.Token nextToken()
    {
        long $l0, $l1;
        org.apache.jena.riot.tokens.Token r3, $r4;
        org.apache.jena.atlas.iterator.PeekIterator $r1;
        java.lang.Object $r2;
        org.apache.jena.atlas.json.io.parser.ParserBase r0;
        boolean $z0;

        r0 := @this: org.apache.jena.atlas.json.io.parser.ParserBase;

        $z0 = virtualinvoke r0.<org.apache.jena.atlas.json.io.parser.ParserBase: boolean eof()>();

        if $z0 == 0 goto label1;

        $r4 = <org.apache.jena.atlas.json.io.parser.ParserBase: org.apache.jena.riot.tokens.Token tokenEOF>;

        return $r4;

     label1:
        $r1 = r0.<org.apache.jena.atlas.json.io.parser.ParserBase: org.apache.jena.atlas.iterator.PeekIterator peekTokens>;

        $r2 = virtualinvoke $r1.<org.apache.jena.atlas.iterator.PeekIterator: java.lang.Object next()>();

        r3 = (org.apache.jena.riot.tokens.Token) $r2;

        $l0 = virtualinvoke r3.<org.apache.jena.riot.tokens.Token: long getLine()>();

        r0.<org.apache.jena.atlas.json.io.parser.ParserBase: long currLine> = $l0;

        $l1 = virtualinvoke r3.<org.apache.jena.riot.tokens.Token: long getColumn()>();

        r0.<org.apache.jena.atlas.json.io.parser.ParserBase: long currCol> = $l1;

        return r3;
    }

    protected final void expectOrEOF(java.lang.String, org.apache.jena.riot.tokens.TokenType)
    {
        org.apache.jena.riot.tokens.TokenType r2;
        java.lang.String r1;
        org.apache.jena.atlas.json.io.parser.ParserBase r0;
        boolean $z0;

        r0 := @this: org.apache.jena.atlas.json.io.parser.ParserBase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.jena.riot.tokens.TokenType;

        $z0 = virtualinvoke r0.<org.apache.jena.atlas.json.io.parser.ParserBase: boolean eof()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<org.apache.jena.atlas.json.io.parser.ParserBase: void expect(java.lang.String,org.apache.jena.riot.tokens.TokenType)>(r1, r2);

        return;
    }

    protected final void expect(java.lang.String, org.apache.jena.riot.tokens.TokenType)
    {
        org.apache.jena.riot.tokens.TokenType r1;
        java.lang.Object[] $r3;
        java.lang.String r2;
        org.apache.jena.atlas.json.io.parser.ParserBase r0;
        boolean $z0;

        r0 := @this: org.apache.jena.atlas.json.io.parser.ParserBase;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.jena.riot.tokens.TokenType;

        $z0 = virtualinvoke r0.<org.apache.jena.atlas.json.io.parser.ParserBase: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>(r1);

        if $z0 != 0 goto label1;

        $r3 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<org.apache.jena.atlas.json.io.parser.ParserBase: void exception(java.lang.String,java.lang.Object[])>(r2, $r3);

     label1:
        virtualinvoke r0.<org.apache.jena.atlas.json.io.parser.ParserBase: org.apache.jena.riot.tokens.Token nextToken()>();

        return;
    }

    protected final transient void exception(java.lang.String, java.lang.Object[])
    {
        java.lang.Object[] r2;
        long $l0, $l2;
        org.apache.jena.riot.tokens.Tokenizer $r5, $r6;
        int $i1, $i3;
        org.apache.jena.atlas.json.JsonParseException $r0;
        java.lang.String r1, $r3;
        org.apache.jena.atlas.json.io.parser.ParserBase r4;

        r4 := @this: org.apache.jena.atlas.json.io.parser.ParserBase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        $r0 = new org.apache.jena.atlas.json.JsonParseException;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, r2);

        $r5 = r4.<org.apache.jena.atlas.json.io.parser.ParserBase: org.apache.jena.riot.tokens.Tokenizer tokens>;

        $l0 = interfaceinvoke $r5.<org.apache.jena.riot.tokens.Tokenizer: long getLine()>();

        $i1 = (int) $l0;

        $r6 = r4.<org.apache.jena.atlas.json.io.parser.ParserBase: org.apache.jena.riot.tokens.Tokenizer tokens>;

        $l2 = interfaceinvoke $r6.<org.apache.jena.riot.tokens.Tokenizer: long getColumn()>();

        $i3 = (int) $l2;

        specialinvoke $r0.<org.apache.jena.atlas.json.JsonParseException: void <init>(java.lang.String,int,int)>($r3, $i1, $i3);

        throw $r0;
    }

    static void <clinit>()
    {
        <org.apache.jena.atlas.json.io.parser.ParserBase: org.apache.jena.riot.tokens.Token tokenEOF> = null;

        return;
    }
}
