public class org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator extends org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator
{
    private static final java.util.Comparator DEFAULT_PRECEDENCE_COMPARATOR;

    static void <clinit>()
    {
        org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceComparator $r0;

        $r0 = new org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceComparator;

        specialinvoke $r0.<org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceComparator: void <init>()>();

        <org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator: java.util.Comparator DEFAULT_PRECEDENCE_COMPARATOR> = $r0;

        return;
    }

    public void <init>()
    {
        org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator r0;

        r0 := @this: org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator;

        specialinvoke r0.<org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator: void <init>()>();

        return;
    }

    protected java.util.List sortAdvisors(java.util.List)
    {
        org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator r13;
        java.util.LinkedList $r0, $r7;
        org.springframework.aop.Advisor $r11, r14;
        boolean $z0, $z1;
        java.util.Iterator $r2, $r8;
        java.lang.IllegalArgumentException $r12;
        java.util.List r1, $r6;
        java.lang.Object $r3, $r9;
        org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator$PartiallyComparableAdvisorHolder $r4, r10;
        java.util.Comparator $r5;

        r13 := @this: org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator;

        r1 := @parameter0: java.util.List;

        $r0 = new java.util.LinkedList;

        specialinvoke $r0.<java.util.LinkedList: void <init>()>();

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r14 = (org.springframework.aop.Advisor) $r3;

        $r4 = new org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator$PartiallyComparableAdvisorHolder;

        $r5 = <org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator: java.util.Comparator DEFAULT_PRECEDENCE_COMPARATOR>;

        specialinvoke $r4.<org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator$PartiallyComparableAdvisorHolder: void <init>(org.springframework.aop.Advisor,java.util.Comparator)>(r14, $r5);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r4);

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r6 = staticinvoke <org.aspectj.util.PartialOrder: java.util.List sort(java.util.List)>($r0);

        if $r6 != null goto label3;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Advice precedence circularity error");

        throw $r12;

     label3:
        $r7 = new java.util.LinkedList;

        specialinvoke $r7.<java.util.LinkedList: void <init>()>();

        $r8 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

        goto label5;

     label4:
        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator$PartiallyComparableAdvisorHolder) $r9;

        $r11 = virtualinvoke r10.<org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator$PartiallyComparableAdvisorHolder: org.springframework.aop.Advisor getAdvisor()>();

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r11);

     label5:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label4;

        return $r7;
    }

    protected void extendAdvisors(java.util.List)
    {
        org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator r1;
        java.util.List r0;

        r1 := @this: org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator;

        r0 := @parameter0: java.util.List;

        staticinvoke <org.springframework.aop.aspectj.AspectJProxyUtils: boolean makeAdvisorChainAspectJCapableIfNecessary(java.util.List)>(r0);

        return;
    }

    protected boolean shouldSkip(java.lang.Class, java.lang.String)
    {
        java.util.Iterator $r2;
        org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator r0;
        java.util.List $r1;
        org.springframework.aop.aspectj.AbstractAspectJAdvice $r6;
        org.aopalliance.aop.Advice $r5;
        java.lang.Object $r3;
        java.lang.Class r9;
        java.lang.String $r7, r8;
        org.springframework.aop.Advisor r4;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator;

        r9 := @parameter0: java.lang.Class;

        r8 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator: java.util.List findCandidateAdvisors()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.springframework.aop.Advisor) $r3;

        $z0 = r4 instanceof org.springframework.aop.aspectj.AspectJPointcutAdvisor;

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r4.<org.springframework.aop.Advisor: org.aopalliance.aop.Advice getAdvice()>();

        $r6 = (org.springframework.aop.aspectj.AbstractAspectJAdvice) $r5;

        $r7 = virtualinvoke $r6.<org.springframework.aop.aspectj.AbstractAspectJAdvice: java.lang.String getAspectName()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r8);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z3 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label1;

        $z2 = specialinvoke r0.<org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator: boolean shouldSkip(java.lang.Class,java.lang.String)>(r9, r8);

        return $z2;
    }
}
