public class org.apache.http.impl.client.DecompressingHttpClient extends java.lang.Object implements org.apache.http.client.HttpClient
{
    private org.apache.http.client.HttpClient backend;
    private org.apache.http.HttpRequestInterceptor acceptEncodingInterceptor;
    private org.apache.http.HttpResponseInterceptor contentEncodingInterceptor;

    public void <init>(org.apache.http.client.HttpClient)
    {
        org.apache.http.impl.client.DecompressingHttpClient r0;
        org.apache.http.client.HttpClient r1;
        org.apache.http.client.protocol.RequestAcceptEncoding $r2;
        org.apache.http.client.protocol.ResponseContentEncoding $r3;

        r0 := @this: org.apache.http.impl.client.DecompressingHttpClient;

        r1 := @parameter0: org.apache.http.client.HttpClient;

        $r2 = new org.apache.http.client.protocol.RequestAcceptEncoding;

        specialinvoke $r2.<org.apache.http.client.protocol.RequestAcceptEncoding: void <init>()>();

        $r3 = new org.apache.http.client.protocol.ResponseContentEncoding;

        specialinvoke $r3.<org.apache.http.client.protocol.ResponseContentEncoding: void <init>()>();

        specialinvoke r0.<org.apache.http.impl.client.DecompressingHttpClient: void <init>(org.apache.http.client.HttpClient,org.apache.http.HttpRequestInterceptor,org.apache.http.HttpResponseInterceptor)>(r1, $r2, $r3);

        return;
    }

    void <init>(org.apache.http.client.HttpClient, org.apache.http.HttpRequestInterceptor, org.apache.http.HttpResponseInterceptor)
    {
        org.apache.http.HttpResponseInterceptor r3;
        org.apache.http.impl.client.DecompressingHttpClient r0;
        org.apache.http.client.HttpClient r1;
        org.apache.http.HttpRequestInterceptor r2;

        r0 := @this: org.apache.http.impl.client.DecompressingHttpClient;

        r1 := @parameter0: org.apache.http.client.HttpClient;

        r2 := @parameter1: org.apache.http.HttpRequestInterceptor;

        r3 := @parameter2: org.apache.http.HttpResponseInterceptor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.http.impl.client.DecompressingHttpClient: org.apache.http.client.HttpClient backend> = r1;

        r0.<org.apache.http.impl.client.DecompressingHttpClient: org.apache.http.HttpRequestInterceptor acceptEncodingInterceptor> = r2;

        r0.<org.apache.http.impl.client.DecompressingHttpClient: org.apache.http.HttpResponseInterceptor contentEncodingInterceptor> = r3;

        return;
    }

    public org.apache.http.params.HttpParams getParams()
    {
        org.apache.http.impl.client.DecompressingHttpClient r0;
        org.apache.http.client.HttpClient $r1;
        org.apache.http.params.HttpParams $r2;

        r0 := @this: org.apache.http.impl.client.DecompressingHttpClient;

        $r1 = r0.<org.apache.http.impl.client.DecompressingHttpClient: org.apache.http.client.HttpClient backend>;

        $r2 = interfaceinvoke $r1.<org.apache.http.client.HttpClient: org.apache.http.params.HttpParams getParams()>();

        return $r2;
    }

    public org.apache.http.conn.ClientConnectionManager getConnectionManager()
    {
        org.apache.http.impl.client.DecompressingHttpClient r0;
        org.apache.http.client.HttpClient $r1;
        org.apache.http.conn.ClientConnectionManager $r2;

        r0 := @this: org.apache.http.impl.client.DecompressingHttpClient;

        $r1 = r0.<org.apache.http.impl.client.DecompressingHttpClient: org.apache.http.client.HttpClient backend>;

        $r2 = interfaceinvoke $r1.<org.apache.http.client.HttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>();

        return $r2;
    }

    public org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest) throws java.io.IOException, org.apache.http.client.ClientProtocolException
    {
        org.apache.http.impl.client.DecompressingHttpClient r0;
        org.apache.http.HttpResponse $r3;
        org.apache.http.client.methods.HttpUriRequest r1;
        org.apache.http.HttpHost $r2;

        r0 := @this: org.apache.http.impl.client.DecompressingHttpClient;

        r1 := @parameter0: org.apache.http.client.methods.HttpUriRequest;

        $r2 = virtualinvoke r0.<org.apache.http.impl.client.DecompressingHttpClient: org.apache.http.HttpHost getHttpHost(org.apache.http.client.methods.HttpUriRequest)>(r1);

        $r3 = virtualinvoke r0.<org.apache.http.impl.client.DecompressingHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>($r2, r1, null);

        return $r3;
    }

    org.apache.http.HttpHost getHttpHost(org.apache.http.client.methods.HttpUriRequest)
    {
        org.apache.http.impl.client.DecompressingHttpClient r3;
        org.apache.http.client.methods.HttpUriRequest r0;
        java.net.URI $r1;
        org.apache.http.HttpHost $r2;

        r3 := @this: org.apache.http.impl.client.DecompressingHttpClient;

        r0 := @parameter0: org.apache.http.client.methods.HttpUriRequest;

        $r1 = interfaceinvoke r0.<org.apache.http.client.methods.HttpUriRequest: java.net.URI getURI()>();

        $r2 = staticinvoke <org.apache.http.client.utils.URIUtils: org.apache.http.HttpHost extractHost(java.net.URI)>($r1);

        return $r2;
    }

    public org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.protocol.HttpContext) throws java.io.IOException, org.apache.http.client.ClientProtocolException
    {
        org.apache.http.impl.client.DecompressingHttpClient r0;
        org.apache.http.protocol.HttpContext r3;
        org.apache.http.HttpResponse $r4;
        org.apache.http.client.methods.HttpUriRequest r1;
        org.apache.http.HttpHost $r2;

        r0 := @this: org.apache.http.impl.client.DecompressingHttpClient;

        r1 := @parameter0: org.apache.http.client.methods.HttpUriRequest;

        r3 := @parameter1: org.apache.http.protocol.HttpContext;

        $r2 = virtualinvoke r0.<org.apache.http.impl.client.DecompressingHttpClient: org.apache.http.HttpHost getHttpHost(org.apache.http.client.methods.HttpUriRequest)>(r1);

        $r4 = virtualinvoke r0.<org.apache.http.impl.client.DecompressingHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>($r2, r1, r3);

        return $r4;
    }

    public org.apache.http.HttpResponse execute(org.apache.http.HttpHost, org.apache.http.HttpRequest) throws java.io.IOException, org.apache.http.client.ClientProtocolException
    {
        org.apache.http.impl.client.DecompressingHttpClient r0;
        org.apache.http.HttpResponse $r3;
        org.apache.http.HttpHost r1;
        org.apache.http.HttpRequest r2;

        r0 := @this: org.apache.http.impl.client.DecompressingHttpClient;

        r1 := @parameter0: org.apache.http.HttpHost;

        r2 := @parameter1: org.apache.http.HttpRequest;

        $r3 = virtualinvoke r0.<org.apache.http.impl.client.DecompressingHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>(r1, r2, null);

        return $r3;
    }

    public org.apache.http.HttpResponse execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws java.io.IOException, org.apache.http.client.ClientProtocolException
    {
        org.apache.http.client.ClientProtocolException $r14;
        org.apache.http.impl.client.DecompressingHttpClient r2;
        org.apache.http.client.HttpClient $r5;
        org.apache.http.impl.client.EntityEnclosingRequestWrapper $r10;
        java.lang.Boolean $r8;
        org.apache.http.HttpRequestInterceptor $r3;
        boolean $z0, $z1;
        org.apache.http.HttpEntityEnclosingRequest $r11;
        org.apache.http.HttpEntity $r16, $r18, $r20;
        java.io.IOException $r17;
        java.lang.RuntimeException $r15;
        org.apache.http.HttpRequest r0;
        org.apache.http.HttpException $r13, $r19;
        org.apache.http.HttpResponseInterceptor $r7;
        org.apache.http.impl.client.RequestWrapper $r1, r22;
        org.apache.http.protocol.BasicHttpContext $r12;
        org.apache.http.protocol.HttpContext r21;
        org.apache.http.HttpResponse $r6;
        java.lang.Object $r9;
        org.apache.http.HttpHost r4;

        r2 := @this: org.apache.http.impl.client.DecompressingHttpClient;

        r4 := @parameter0: org.apache.http.HttpHost;

        r0 := @parameter1: org.apache.http.HttpRequest;

        r21 := @parameter2: org.apache.http.protocol.HttpContext;

     label01:
        if r21 != null goto label02;

        $r12 = new org.apache.http.protocol.BasicHttpContext;

        specialinvoke $r12.<org.apache.http.protocol.BasicHttpContext: void <init>()>();

        r21 = $r12;

     label02:
        $z0 = r0 instanceof org.apache.http.HttpEntityEnclosingRequest;

        if $z0 == 0 goto label03;

        $r10 = new org.apache.http.impl.client.EntityEnclosingRequestWrapper;

        $r11 = (org.apache.http.HttpEntityEnclosingRequest) r0;

        specialinvoke $r10.<org.apache.http.impl.client.EntityEnclosingRequestWrapper: void <init>(org.apache.http.HttpEntityEnclosingRequest)>($r11);

        r22 = $r10;

        goto label04;

     label03:
        $r1 = new org.apache.http.impl.client.RequestWrapper;

        specialinvoke $r1.<org.apache.http.impl.client.RequestWrapper: void <init>(org.apache.http.HttpRequest)>(r0);

        r22 = $r1;

     label04:
        $r3 = r2.<org.apache.http.impl.client.DecompressingHttpClient: org.apache.http.HttpRequestInterceptor acceptEncodingInterceptor>;

        interfaceinvoke $r3.<org.apache.http.HttpRequestInterceptor: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>(r22, r21);

        $r5 = r2.<org.apache.http.impl.client.DecompressingHttpClient: org.apache.http.client.HttpClient backend>;

        $r6 = interfaceinvoke $r5.<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>(r4, r22, r21);

     label05:
        $r7 = r2.<org.apache.http.impl.client.DecompressingHttpClient: org.apache.http.HttpResponseInterceptor contentEncodingInterceptor>;

        interfaceinvoke $r7.<org.apache.http.HttpResponseInterceptor: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>($r6, r21);

        $r8 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $r9 = interfaceinvoke r21.<org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>("http.client.response.uncompressed");

        $z1 = virtualinvoke $r8.<java.lang.Boolean: boolean equals(java.lang.Object)>($r9);

        if $z1 == 0 goto label06;

        interfaceinvoke $r6.<org.apache.http.HttpResponse: void removeHeaders(java.lang.String)>("Content-Length");

        interfaceinvoke $r6.<org.apache.http.HttpResponse: void removeHeaders(java.lang.String)>("Content-Encoding");

        interfaceinvoke $r6.<org.apache.http.HttpResponse: void removeHeaders(java.lang.String)>("Content-MD5");

     label06:
        return $r6;

     label07:
        $r19 := @caughtexception;

        $r20 = interfaceinvoke $r6.<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>();

        staticinvoke <org.apache.http.util.EntityUtils: void consume(org.apache.http.HttpEntity)>($r20);

        throw $r19;

     label08:
        $r17 := @caughtexception;

        $r18 = interfaceinvoke $r6.<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>();

        staticinvoke <org.apache.http.util.EntityUtils: void consume(org.apache.http.HttpEntity)>($r18);

        throw $r17;

     label09:
        $r15 := @caughtexception;

        $r16 = interfaceinvoke $r6.<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>();

        staticinvoke <org.apache.http.util.EntityUtils: void consume(org.apache.http.HttpEntity)>($r16);

        throw $r15;

     label10:
        $r13 := @caughtexception;

        $r14 = new org.apache.http.client.ClientProtocolException;

        specialinvoke $r14.<org.apache.http.client.ClientProtocolException: void <init>(java.lang.Throwable)>($r13);

        throw $r14;

        catch org.apache.http.HttpException from label05 to label06 with label07;
        catch java.io.IOException from label05 to label06 with label08;
        catch java.lang.RuntimeException from label05 to label06 with label09;
        catch org.apache.http.HttpException from label01 to label06 with label10;
        catch org.apache.http.HttpException from label07 to label10 with label10;
    }

    public java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.client.ResponseHandler) throws java.io.IOException, org.apache.http.client.ClientProtocolException
    {
        org.apache.http.impl.client.DecompressingHttpClient r0;
        java.lang.Object $r4;
        org.apache.http.client.methods.HttpUriRequest r1;
        org.apache.http.client.ResponseHandler r3;
        org.apache.http.HttpHost $r2;

        r0 := @this: org.apache.http.impl.client.DecompressingHttpClient;

        r1 := @parameter0: org.apache.http.client.methods.HttpUriRequest;

        r3 := @parameter1: org.apache.http.client.ResponseHandler;

        $r2 = virtualinvoke r0.<org.apache.http.impl.client.DecompressingHttpClient: org.apache.http.HttpHost getHttpHost(org.apache.http.client.methods.HttpUriRequest)>(r1);

        $r4 = virtualinvoke r0.<org.apache.http.impl.client.DecompressingHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler)>($r2, r1, r3);

        return $r4;
    }

    public java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.client.ResponseHandler, org.apache.http.protocol.HttpContext) throws java.io.IOException, org.apache.http.client.ClientProtocolException
    {
        org.apache.http.impl.client.DecompressingHttpClient r0;
        org.apache.http.protocol.HttpContext r4;
        java.lang.Object $r5;
        org.apache.http.client.methods.HttpUriRequest r1;
        org.apache.http.client.ResponseHandler r3;
        org.apache.http.HttpHost $r2;

        r0 := @this: org.apache.http.impl.client.DecompressingHttpClient;

        r1 := @parameter0: org.apache.http.client.methods.HttpUriRequest;

        r3 := @parameter1: org.apache.http.client.ResponseHandler;

        r4 := @parameter2: org.apache.http.protocol.HttpContext;

        $r2 = virtualinvoke r0.<org.apache.http.impl.client.DecompressingHttpClient: org.apache.http.HttpHost getHttpHost(org.apache.http.client.methods.HttpUriRequest)>(r1);

        $r5 = virtualinvoke r0.<org.apache.http.impl.client.DecompressingHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>($r2, r1, r3, r4);

        return $r5;
    }

    public java.lang.Object execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.client.ResponseHandler) throws java.io.IOException, org.apache.http.client.ClientProtocolException
    {
        org.apache.http.impl.client.DecompressingHttpClient r0;
        java.lang.Object $r4;
        org.apache.http.client.ResponseHandler r3;
        org.apache.http.HttpHost r1;
        org.apache.http.HttpRequest r2;

        r0 := @this: org.apache.http.impl.client.DecompressingHttpClient;

        r1 := @parameter0: org.apache.http.HttpHost;

        r2 := @parameter1: org.apache.http.HttpRequest;

        r3 := @parameter2: org.apache.http.client.ResponseHandler;

        $r4 = virtualinvoke r0.<org.apache.http.impl.client.DecompressingHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>(r1, r2, r3, null);

        return $r4;
    }

    public java.lang.Object execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.client.ResponseHandler, org.apache.http.protocol.HttpContext) throws java.io.IOException, org.apache.http.client.ClientProtocolException
    {
        java.lang.Throwable $r8;
        org.apache.http.impl.client.DecompressingHttpClient r0;
        org.apache.http.HttpEntity $r7, $r9;
        org.apache.http.HttpRequest r2;
        org.apache.http.protocol.HttpContext r3;
        org.apache.http.HttpResponse $r4;
        java.lang.Object $r6;
        org.apache.http.client.ResponseHandler r5;
        org.apache.http.HttpHost r1;

        r0 := @this: org.apache.http.impl.client.DecompressingHttpClient;

        r1 := @parameter0: org.apache.http.HttpHost;

        r2 := @parameter1: org.apache.http.HttpRequest;

        r5 := @parameter2: org.apache.http.client.ResponseHandler;

        r3 := @parameter3: org.apache.http.protocol.HttpContext;

        $r4 = virtualinvoke r0.<org.apache.http.impl.client.DecompressingHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>(r1, r2, r3);

     label1:
        $r6 = interfaceinvoke r5.<org.apache.http.client.ResponseHandler: java.lang.Object handleResponse(org.apache.http.HttpResponse)>($r4);

     label2:
        $r7 = interfaceinvoke $r4.<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>();

        if $r7 == null goto label3;

        staticinvoke <org.apache.http.util.EntityUtils: void consume(org.apache.http.HttpEntity)>($r7);

     label3:
        return $r6;

     label4:
        $r8 := @caughtexception;

     label5:
        $r9 = interfaceinvoke $r4.<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>();

        if $r9 == null goto label6;

        staticinvoke <org.apache.http.util.EntityUtils: void consume(org.apache.http.HttpEntity)>($r9);

     label6:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }
}
