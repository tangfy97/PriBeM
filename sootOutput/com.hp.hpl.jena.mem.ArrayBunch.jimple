public class com.hp.hpl.jena.mem.ArrayBunch extends java.lang.Object implements com.hp.hpl.jena.mem.TripleBunch
{
    protected int size;
    protected com.hp.hpl.jena.graph.Triple[] elements;
    protected volatile int changes;

    public void <init>()
    {
        com.hp.hpl.jena.mem.ArrayBunch r0;
        com.hp.hpl.jena.graph.Triple[] $r1;

        r0 := @this: com.hp.hpl.jena.mem.ArrayBunch;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.mem.ArrayBunch: int size> = 0;

        r0.<com.hp.hpl.jena.mem.ArrayBunch: int changes> = 0;

        $r1 = newarray (com.hp.hpl.jena.graph.Triple)[5];

        r0.<com.hp.hpl.jena.mem.ArrayBunch: com.hp.hpl.jena.graph.Triple[] elements> = $r1;

        return;
    }

    public boolean containsBySameValueAs(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.mem.ArrayBunch r0;
        int i0, $i2;
        com.hp.hpl.jena.graph.Triple[] $r2;
        com.hp.hpl.jena.graph.Triple r1, $r3;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.mem.ArrayBunch;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        i0 = r0.<com.hp.hpl.jena.mem.ArrayBunch: int size>;

     label1:
        if i0 <= 0 goto label2;

        $r2 = r0.<com.hp.hpl.jena.mem.ArrayBunch: com.hp.hpl.jena.graph.Triple[] elements>;

        $i2 = (int) -1;

        i0 = i0 + $i2;

        $r3 = $r2[i0];

        $z0 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: boolean matches(com.hp.hpl.jena.graph.Triple)>($r3);

        if $z0 == 0 goto label1;

        return 1;

     label2:
        return 0;
    }

    public boolean contains(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.mem.ArrayBunch r0;
        int i0, $i2;
        com.hp.hpl.jena.graph.Triple[] $r2;
        com.hp.hpl.jena.graph.Triple r1, $r3;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.mem.ArrayBunch;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        i0 = r0.<com.hp.hpl.jena.mem.ArrayBunch: int size>;

     label1:
        if i0 <= 0 goto label2;

        $r2 = r0.<com.hp.hpl.jena.mem.ArrayBunch: com.hp.hpl.jena.graph.Triple[] elements>;

        $i2 = (int) -1;

        i0 = i0 + $i2;

        $r3 = $r2[i0];

        $z0 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        return 1;

     label2:
        return 0;
    }

    public int size()
    {
        com.hp.hpl.jena.mem.ArrayBunch r0;
        int $i0;

        r0 := @this: com.hp.hpl.jena.mem.ArrayBunch;

        $i0 = r0.<com.hp.hpl.jena.mem.ArrayBunch: int size>;

        return $i0;
    }

    public void add(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.Triple r3;
        com.hp.hpl.jena.mem.ArrayBunch r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        com.hp.hpl.jena.graph.Triple[] $r1, $r2;

        r0 := @this: com.hp.hpl.jena.mem.ArrayBunch;

        r3 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $i1 = r0.<com.hp.hpl.jena.mem.ArrayBunch: int size>;

        $r1 = r0.<com.hp.hpl.jena.mem.ArrayBunch: com.hp.hpl.jena.graph.Triple[] elements>;

        $i0 = lengthof $r1;

        if $i1 != $i0 goto label1;

        virtualinvoke r0.<com.hp.hpl.jena.mem.ArrayBunch: void grow()>();

     label1:
        $r2 = r0.<com.hp.hpl.jena.mem.ArrayBunch: com.hp.hpl.jena.graph.Triple[] elements>;

        $i2 = r0.<com.hp.hpl.jena.mem.ArrayBunch: int size>;

        $i3 = $i2 + 1;

        r0.<com.hp.hpl.jena.mem.ArrayBunch: int size> = $i3;

        $r2[$i2] = r3;

        $i4 = r0.<com.hp.hpl.jena.mem.ArrayBunch: int changes>;

        $i5 = $i4 + 1;

        r0.<com.hp.hpl.jena.mem.ArrayBunch: int changes> = $i5;

        return;
    }

    protected void grow()
    {
        com.hp.hpl.jena.mem.ArrayBunch r0;
        int $i0, $i1, $i2;
        com.hp.hpl.jena.graph.Triple[] r1, $r2;

        r0 := @this: com.hp.hpl.jena.mem.ArrayBunch;

        $i0 = r0.<com.hp.hpl.jena.mem.ArrayBunch: int size>;

        $i1 = $i0 + 4;

        r1 = newarray (com.hp.hpl.jena.graph.Triple)[$i1];

        $r2 = r0.<com.hp.hpl.jena.mem.ArrayBunch: com.hp.hpl.jena.graph.Triple[] elements>;

        $i2 = r0.<com.hp.hpl.jena.mem.ArrayBunch: int size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i2);

        r0.<com.hp.hpl.jena.mem.ArrayBunch: com.hp.hpl.jena.graph.Triple[] elements> = r1;

        return;
    }

    public void remove(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.Triple r1, $r3, $r6;
        com.hp.hpl.jena.mem.ArrayBunch r0;
        int $i0, $i1, $i2, $i3, $i4, i5;
        com.hp.hpl.jena.graph.Triple[] $r2, $r4, $r5;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.mem.ArrayBunch;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $i0 = r0.<com.hp.hpl.jena.mem.ArrayBunch: int changes>;

        $i1 = $i0 + 1;

        r0.<com.hp.hpl.jena.mem.ArrayBunch: int changes> = $i1;

        i5 = 0;

     label1:
        $i2 = r0.<com.hp.hpl.jena.mem.ArrayBunch: int size>;

        if i5 >= $i2 goto label3;

        $r2 = r0.<com.hp.hpl.jena.mem.ArrayBunch: com.hp.hpl.jena.graph.Triple[] elements>;

        $r3 = $r2[i5];

        $z0 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

        $r4 = r0.<com.hp.hpl.jena.mem.ArrayBunch: com.hp.hpl.jena.graph.Triple[] elements>;

        $r5 = r0.<com.hp.hpl.jena.mem.ArrayBunch: com.hp.hpl.jena.graph.Triple[] elements>;

        $i3 = r0.<com.hp.hpl.jena.mem.ArrayBunch: int size>;

        $i4 = $i3 - 1;

        r0.<com.hp.hpl.jena.mem.ArrayBunch: int size> = $i4;

        $r6 = $r5[$i4];

        $r4[i5] = $r6;

        return;

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        return;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator iterator()
    {
        com.hp.hpl.jena.mem.ArrayBunch r0;
        com.hp.hpl.jena.mem.ArrayBunch$1 $r1;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r2;

        r0 := @this: com.hp.hpl.jena.mem.ArrayBunch;

        $r1 = new com.hp.hpl.jena.mem.ArrayBunch$1;

        specialinvoke $r1.<com.hp.hpl.jena.mem.ArrayBunch$1: void <init>(com.hp.hpl.jena.mem.ArrayBunch)>(r0);

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.mem.ArrayBunch: com.hp.hpl.jena.util.iterator.ExtendedIterator iterator(com.hp.hpl.jena.mem.HashCommon$NotifyEmpty)>($r1);

        return $r2;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator iterator(com.hp.hpl.jena.mem.HashCommon$NotifyEmpty)
    {
        com.hp.hpl.jena.mem.ArrayBunch$2 $r0;
        com.hp.hpl.jena.mem.ArrayBunch r1;
        com.hp.hpl.jena.mem.HashCommon$NotifyEmpty r2;

        r1 := @this: com.hp.hpl.jena.mem.ArrayBunch;

        r2 := @parameter0: com.hp.hpl.jena.mem.HashCommon$NotifyEmpty;

        $r0 = new com.hp.hpl.jena.mem.ArrayBunch$2;

        specialinvoke $r0.<com.hp.hpl.jena.mem.ArrayBunch$2: void <init>(com.hp.hpl.jena.mem.ArrayBunch,com.hp.hpl.jena.mem.HashCommon$NotifyEmpty)>(r1, r2);

        return $r0;
    }
}
