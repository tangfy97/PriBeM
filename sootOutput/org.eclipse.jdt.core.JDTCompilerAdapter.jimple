public class org.eclipse.jdt.core.JDTCompilerAdapter extends org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter
{
    private static final char[] SEPARATOR_CHARS;
    private static final char[] ADAPTER_PREFIX;
    private static final char[] ADAPTER_ENCODING;
    private static final char[] ADAPTER_ACCESS;
    private static java.lang.String compilerClass;
    java.lang.String logFileName;
    java.util.Map customDefaultOptions;
    private java.util.Map fileEncodings;
    private java.util.Map dirEncodings;
    private java.util.List accessRules;
    static java.lang.Class class$0;
    static java.lang.Class class$1;
    static java.lang.Class class$2;
    static java.lang.Class class$3;

    static void <clinit>()
    {
        char[] $r0, $r2, $r4, $r6;
        java.lang.String $r1, $r3, $r5;

        $r0 = newarray (char)[2];

        $r0[0] = 47;

        $r0[1] = 92;

        <org.eclipse.jdt.core.JDTCompilerAdapter: char[] SEPARATOR_CHARS> = $r0;

        $r1 = "#ADAPTER#";

        $r2 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.core.JDTCompilerAdapter: char[] ADAPTER_PREFIX> = $r2;

        $r3 = "ENCODING#";

        $r4 = virtualinvoke $r3.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.core.JDTCompilerAdapter: char[] ADAPTER_ENCODING> = $r4;

        $r5 = "ACCESS#";

        $r6 = virtualinvoke $r5.<java.lang.String: char[] toCharArray()>();

        <org.eclipse.jdt.core.JDTCompilerAdapter: char[] ADAPTER_ACCESS> = $r6;

        <org.eclipse.jdt.core.JDTCompilerAdapter: java.lang.String compilerClass> = "org.eclipse.jdt.internal.compiler.batch.Main";

        return;
    }

    public void <init>()
    {
        org.eclipse.jdt.core.JDTCompilerAdapter r0;

        r0 := @this: org.eclipse.jdt.core.JDTCompilerAdapter;

        specialinvoke r0.<org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter: void <init>()>();

        r0.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.Map fileEncodings> = null;

        r0.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.Map dirEncodings> = null;

        r0.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.List accessRules> = null;

        return;
    }

    public boolean execute() throws org.apache.tools.ant.BuildException
    {
        org.apache.tools.ant.types.Commandline $r3;
        org.eclipse.jdt.core.JDTCompilerAdapter r0;
        org.apache.tools.ant.taskdefs.Javac $r1, $r25;
        java.util.Map $r15;
        java.lang.reflect.Method $r18;
        boolean $z0;
        java.io.PrintWriter $r51, $r52;
        java.lang.Exception $r27;
        java.lang.Throwable $r56, $r57;
        java.lang.Object[] $r9, $r19;
        java.lang.String[] $r20;
        java.lang.reflect.Constructor $r8;
        java.lang.Boolean $r14, $r22;
        java.lang.String $r2, $r4, $r23, $r24, $r26, $r31, $r34, $r37, $r40, $r43;
        java.lang.NoClassDefFoundError $r48, $r49, $r50, $r53;
        java.io.PrintStream $r11, $r13;
        java.lang.Class[] $r6, $r17;
        org.apache.tools.ant.BuildException $r54, $r55;
        java.lang.Class $r5, $r7, $r44, $r45, $r46, $r47;
        java.lang.Object $r16, $r21;
        java.lang.ClassNotFoundException $r29, $r32, $r35, $r38, $r41;

        r0 := @this: org.eclipse.jdt.core.JDTCompilerAdapter;

        $r1 = r0.<org.eclipse.jdt.core.JDTCompilerAdapter: org.apache.tools.ant.taskdefs.Javac attributes>;

        $r2 = staticinvoke <org.eclipse.jdt.internal.antadapter.AntAdapterMessages: java.lang.String getString(java.lang.String)>("ant.jdtadapter.info.usingJDTCompiler");

        virtualinvoke $r1.<org.apache.tools.ant.taskdefs.Javac: void log(java.lang.String,int)>($r2, 3);

        $r3 = virtualinvoke r0.<org.eclipse.jdt.core.JDTCompilerAdapter: org.apache.tools.ant.types.Commandline setupJavacCommand()>();

     label01:
        $r4 = <org.eclipse.jdt.core.JDTCompilerAdapter: java.lang.String compilerClass>;

        $r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r4);

        $r6 = newarray (java.lang.Class)[4];

        $r44 = <org.eclipse.jdt.core.JDTCompilerAdapter: java.lang.Class class$0>;

        if $r44 != null goto label05;

     label02:
        $r44 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.io.PrintWriter");

     label03:
        <org.eclipse.jdt.core.JDTCompilerAdapter: java.lang.Class class$0> = $r44;

        goto label05;

     label04:
        $r41 := @caughtexception;

        $r48 = new java.lang.NoClassDefFoundError;

        $r43 = virtualinvoke $r41.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r48.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r43);

        throw $r48;

     label05:
        $r6[0] = $r44;

        $r45 = <org.eclipse.jdt.core.JDTCompilerAdapter: java.lang.Class class$0>;

        if $r45 != null goto label09;

     label06:
        $r45 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.io.PrintWriter");

     label07:
        <org.eclipse.jdt.core.JDTCompilerAdapter: java.lang.Class class$0> = $r45;

        goto label09;

     label08:
        $r38 := @caughtexception;

        $r49 = new java.lang.NoClassDefFoundError;

        $r40 = virtualinvoke $r38.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r49.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r40);

        throw $r49;

     label09:
        $r6[1] = $r45;

        $r7 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r6[2] = $r7;

        $r46 = <org.eclipse.jdt.core.JDTCompilerAdapter: java.lang.Class class$1>;

        if $r46 != null goto label13;

     label10:
        $r46 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.util.Map");

     label11:
        <org.eclipse.jdt.core.JDTCompilerAdapter: java.lang.Class class$1> = $r46;

        goto label13;

     label12:
        $r35 := @caughtexception;

        $r50 = new java.lang.NoClassDefFoundError;

        $r37 = virtualinvoke $r35.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r50.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r37);

        throw $r50;

     label13:
        $r6[3] = $r46;

        $r8 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r6);

        $r9 = newarray (java.lang.Object)[4];

        $r51 = new java.io.PrintWriter;

        $r11 = <java.lang.System: java.io.PrintStream out>;

        specialinvoke $r51.<java.io.PrintWriter: void <init>(java.io.OutputStream)>($r11);

        $r9[0] = $r51;

        $r52 = new java.io.PrintWriter;

        $r13 = <java.lang.System: java.io.PrintStream err>;

        specialinvoke $r52.<java.io.PrintWriter: void <init>(java.io.OutputStream)>($r13);

        $r9[1] = $r52;

        $r14 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $r9[2] = $r14;

        $r15 = r0.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.Map customDefaultOptions>;

        $r9[3] = $r15;

        $r16 = virtualinvoke $r8.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r9);

        $r17 = newarray (java.lang.Class)[1];

        $r47 = <org.eclipse.jdt.core.JDTCompilerAdapter: java.lang.Class class$2>;

        if $r47 != null goto label17;

     label14:
        $r47 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("[Ljava.lang.String;");

     label15:
        <org.eclipse.jdt.core.JDTCompilerAdapter: java.lang.Class class$2> = $r47;

        goto label17;

     label16:
        $r32 := @caughtexception;

        $r53 = new java.lang.NoClassDefFoundError;

        $r34 = virtualinvoke $r32.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r53.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r34);

        throw $r53;

     label17:
        $r17[0] = $r47;

        $r18 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("compile", $r17);

        $r19 = newarray (java.lang.Object)[1];

        $r20 = virtualinvoke $r3.<org.apache.tools.ant.types.Commandline: java.lang.String[] getArguments()>();

        $r19[0] = $r20;

        $r21 = virtualinvoke $r18.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r16, $r19);

        $r22 = (java.lang.Boolean) $r21;

        $z0 = virtualinvoke $r22.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label18;

        $r23 = r0.<org.eclipse.jdt.core.JDTCompilerAdapter: java.lang.String logFileName>;

        if $r23 == null goto label18;

        $r25 = r0.<org.eclipse.jdt.core.JDTCompilerAdapter: org.apache.tools.ant.taskdefs.Javac attributes>;

        $r24 = r0.<org.eclipse.jdt.core.JDTCompilerAdapter: java.lang.String logFileName>;

        $r26 = staticinvoke <org.eclipse.jdt.internal.antadapter.AntAdapterMessages: java.lang.String getString(java.lang.String,java.lang.String)>("ant.jdtadapter.error.compilationFailed", $r24);

        virtualinvoke $r25.<org.apache.tools.ant.taskdefs.Javac: void log(java.lang.String)>($r26);

     label18:
        return $z0;

     label19:
        $r29 := @caughtexception;

        $r54 = new org.apache.tools.ant.BuildException;

        $r31 = staticinvoke <org.eclipse.jdt.internal.antadapter.AntAdapterMessages: java.lang.String getString(java.lang.String)>("ant.jdtadapter.error.cannotFindJDTCompiler");

        specialinvoke $r54.<org.apache.tools.ant.BuildException: void <init>(java.lang.String)>($r31);

        $r56 = (java.lang.Throwable) $r54;

        throw $r56;

     label20:
        $r27 := @caughtexception;

        $r55 = new org.apache.tools.ant.BuildException;

        specialinvoke $r55.<org.apache.tools.ant.BuildException: void <init>(java.lang.Throwable)>($r27);

        $r57 = (java.lang.Throwable) $r55;

        throw $r57;

        catch java.lang.ClassNotFoundException from label02 to label03 with label04;
        catch java.lang.ClassNotFoundException from label06 to label07 with label08;
        catch java.lang.ClassNotFoundException from label10 to label11 with label12;
        catch java.lang.ClassNotFoundException from label14 to label15 with label16;
        catch java.lang.ClassNotFoundException from label01 to label18 with label19;
        catch java.lang.Exception from label01 to label18 with label20;
    }

    protected org.apache.tools.ant.types.Commandline setupJavacCommand() throws org.apache.tools.ant.BuildException
    {
        java.util.Map $r3, $r13, $r14, $r15, $r16, $r17, $r18, $r31, $r33, $r40, $r41, $r42, $r43, $r51, $r54, $r55, $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r64, $r65, $r66;
        java.lang.Object[] $r45;
        java.lang.StringBuffer $r73, $r75, $r83, $r85, $r130, $r131;
        org.apache.tools.ant.types.Path $r7, $r8, $r93, $r95, $r99, $r112, r114, r115, $r129;
        java.lang.reflect.Method r113, r118;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9, i10, $i12, $i14, $i16;
        org.apache.tools.ant.types.Commandline$Argument $r6, $r9, $r28, $r29, $r34, $r35, $r36, $r37, $r70, $r80, $r91, $r92, $r94, $r96, $r98, $r123;
        java.lang.Class r4, $r109;
        java.lang.Object $r46, $r47, $r48, $r49, $r52, $r68, $r90;
        org.apache.tools.ant.types.Commandline $r126;
        java.util.Set $r44;
        java.lang.reflect.InvocationTargetException $r100, $r103;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r127;
        java.lang.String $r10, r11, $r12, $r20, $r22, $r23, r24, $r25, $r26, $r27, $r30, $r32, $r50, $r53, $r72, $r74, $r76, $r78, $r82, $r84, $r86, $r88, $r97, $r108, $r117, r119, $r124, $r125;
        java.util.Map$Entry r121;
        java.io.File $r38, $r39, $r122;
        java.lang.ClassNotFoundException $r106;
        org.eclipse.jdt.core.JDTCompilerAdapter r1;
        java.lang.NoSuchMethodException $r102, $r105;
        org.apache.tools.ant.taskdefs.Javac $r19, $r21, $r67, $r69, $r77, $r79, $r87, $r89, $r120;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        java.lang.IllegalAccessException $r101, $r104;
        java.lang.String[] $r5;
        org.apache.tools.ant.Project $r111;
        java.lang.NoClassDefFoundError $r128;

        r1 := @this: org.eclipse.jdt.core.JDTCompilerAdapter;

        $r126 = new org.apache.tools.ant.types.Commandline;

        specialinvoke $r126.<org.apache.tools.ant.types.Commandline: void <init>()>();

        $r127 = new org.eclipse.jdt.internal.compiler.impl.CompilerOptions;

        specialinvoke $r127.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void <init>()>();

        $r3 = virtualinvoke $r127.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.util.Map getMap()>();

        r1.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.Map customDefaultOptions> = $r3;

        $r109 = <org.eclipse.jdt.core.JDTCompilerAdapter: java.lang.Class class$3>;

        if $r109 != null goto label04;

     label01:
        $r109 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.apache.tools.ant.taskdefs.Javac");

     label02:
        <org.eclipse.jdt.core.JDTCompilerAdapter: java.lang.Class class$3> = $r109;

        goto label04;

     label03:
        $r106 := @caughtexception;

        $r128 = new java.lang.NoClassDefFoundError;

        $r108 = virtualinvoke $r106.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r128.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r108);

        throw $r128;

     label04:
        r4 = $r109;

        $r5 = specialinvoke r1.<org.eclipse.jdt.core.JDTCompilerAdapter: java.lang.String[] processCompilerArguments(java.lang.Class)>($r109);

        $r6 = virtualinvoke $r126.<org.apache.tools.ant.types.Commandline: org.apache.tools.ant.types.Commandline$Argument createArgument()>();

        virtualinvoke $r6.<org.apache.tools.ant.types.Commandline$Argument: void setValue(java.lang.String)>("-noExit");

        $r7 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: org.apache.tools.ant.types.Path bootclasspath>;

        if $r7 == null goto label06;

        $r94 = virtualinvoke $r126.<org.apache.tools.ant.types.Commandline: org.apache.tools.ant.types.Commandline$Argument createArgument()>();

        virtualinvoke $r94.<org.apache.tools.ant.types.Commandline$Argument: void setValue(java.lang.String)>("-bootclasspath");

        $r95 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: org.apache.tools.ant.types.Path bootclasspath>;

        $i6 = virtualinvoke $r95.<org.apache.tools.ant.types.Path: int size()>();

        if $i6 == 0 goto label05;

        $r98 = virtualinvoke $r126.<org.apache.tools.ant.types.Commandline: org.apache.tools.ant.types.Commandline$Argument createArgument()>();

        $r99 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: org.apache.tools.ant.types.Path bootclasspath>;

        virtualinvoke $r98.<org.apache.tools.ant.types.Commandline$Argument: void setPath(org.apache.tools.ant.types.Path)>($r99);

        goto label06;

     label05:
        $r96 = virtualinvoke $r126.<org.apache.tools.ant.types.Commandline: org.apache.tools.ant.types.Commandline$Argument createArgument()>();

        $r97 = <org.eclipse.jdt.internal.compiler.util.Util: java.lang.String EMPTY_STRING>;

        virtualinvoke $r96.<org.apache.tools.ant.types.Commandline$Argument: void setValue(java.lang.String)>($r97);

     label06:
        $r129 = new org.apache.tools.ant.types.Path;

        $r111 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: org.apache.tools.ant.Project project>;

        specialinvoke $r129.<org.apache.tools.ant.types.Path: void <init>(org.apache.tools.ant.Project)>($r111);

        $r112 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: org.apache.tools.ant.types.Path extdirs>;

        if $r112 == null goto label07;

        $r91 = virtualinvoke $r126.<org.apache.tools.ant.types.Commandline: org.apache.tools.ant.types.Commandline$Argument createArgument()>();

        virtualinvoke $r91.<org.apache.tools.ant.types.Commandline$Argument: void setValue(java.lang.String)>("-extdirs");

        $r92 = virtualinvoke $r126.<org.apache.tools.ant.types.Commandline: org.apache.tools.ant.types.Commandline$Argument createArgument()>();

        $r93 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: org.apache.tools.ant.types.Path extdirs>;

        virtualinvoke $r92.<org.apache.tools.ant.types.Commandline$Argument: void setPath(org.apache.tools.ant.types.Path)>($r93);

     label07:
        $r8 = virtualinvoke r1.<org.eclipse.jdt.core.JDTCompilerAdapter: org.apache.tools.ant.types.Path getCompileClasspath()>();

        virtualinvoke $r129.<org.apache.tools.ant.types.Path: void append(org.apache.tools.ant.types.Path)>($r8);

        r113 = null;

     label08:
        r113 = virtualinvoke r4.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getSourcepath", null);

     label09:
        goto label11;

     label10:
        $r105 := @caughtexception;

     label11:
        r114 = null;

        if r113 == null goto label16;

     label12:
        $r89 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: org.apache.tools.ant.taskdefs.Javac attributes>;

        $r90 = virtualinvoke r113.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r89, null);

        r114 = (org.apache.tools.ant.types.Path) $r90;

     label13:
        goto label16;

     label14:
        $r104 := @caughtexception;

        goto label16;

     label15:
        $r103 := @caughtexception;

     label16:
        if r114 == null goto label17;

        r115 = r114;

        goto label18;

     label17:
        r115 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: org.apache.tools.ant.types.Path src>;

     label18:
        virtualinvoke $r129.<org.apache.tools.ant.types.Path: void append(org.apache.tools.ant.types.Path)>(r115);

        $r9 = virtualinvoke $r126.<org.apache.tools.ant.types.Commandline: org.apache.tools.ant.types.Commandline$Argument createArgument()>();

        virtualinvoke $r9.<org.apache.tools.ant.types.Commandline$Argument: void setValue(java.lang.String)>("-classpath");

        specialinvoke r1.<org.eclipse.jdt.core.JDTCompilerAdapter: void createClasspathArgument(org.apache.tools.ant.types.Commandline,org.apache.tools.ant.types.Path)>($r126, $r129);

        $r10 = staticinvoke <org.apache.tools.ant.util.JavaEnvUtils: java.lang.String getJavaVersion()>();

        $z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>("1.1");

        if $z0 == 0 goto label19;

        $r125 = "-J-";

        $r124 = "-J-";

        goto label20;

     label19:
        $r125 = "-J-X";

        $r124 = "-J-X";

     label20:
        r11 = $r125;

        $r12 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: java.lang.String memoryInitialSize>;

        if $r12 == null goto label22;

        $r79 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: org.apache.tools.ant.taskdefs.Javac attributes>;

        $z10 = virtualinvoke $r79.<org.apache.tools.ant.taskdefs.Javac: boolean isForkedJavac()>();

        if $z10 != 0 goto label21;

        $r87 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: org.apache.tools.ant.taskdefs.Javac attributes>;

        $r88 = staticinvoke <org.eclipse.jdt.internal.antadapter.AntAdapterMessages: java.lang.String getString(java.lang.String)>("ant.jdtadapter.info.ignoringMemoryInitialSize");

        virtualinvoke $r87.<org.apache.tools.ant.taskdefs.Javac: void log(java.lang.String,int)>($r88, 1);

        goto label22;

     label21:
        $r80 = virtualinvoke $r126.<org.apache.tools.ant.types.Commandline: org.apache.tools.ant.types.Commandline$Argument createArgument()>();

        $r130 = new java.lang.StringBuffer;

        $r82 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r124);

        specialinvoke $r130.<java.lang.StringBuffer: void <init>(java.lang.String)>($r82);

        $r83 = virtualinvoke $r130.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ms");

        $r84 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: java.lang.String memoryInitialSize>;

        $r85 = virtualinvoke $r83.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r84);

        $r86 = virtualinvoke $r85.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r80.<org.apache.tools.ant.types.Commandline$Argument: void setValue(java.lang.String)>($r86);

     label22:
        $r117 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: java.lang.String memoryMaximumSize>;

        if $r117 == null goto label24;

        $r69 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: org.apache.tools.ant.taskdefs.Javac attributes>;

        $z9 = virtualinvoke $r69.<org.apache.tools.ant.taskdefs.Javac: boolean isForkedJavac()>();

        if $z9 != 0 goto label23;

        $r77 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: org.apache.tools.ant.taskdefs.Javac attributes>;

        $r78 = staticinvoke <org.eclipse.jdt.internal.antadapter.AntAdapterMessages: java.lang.String getString(java.lang.String)>("ant.jdtadapter.info.ignoringMemoryMaximumSize");

        virtualinvoke $r77.<org.apache.tools.ant.taskdefs.Javac: void log(java.lang.String,int)>($r78, 1);

        goto label24;

     label23:
        $r70 = virtualinvoke $r126.<org.apache.tools.ant.types.Commandline: org.apache.tools.ant.types.Commandline$Argument createArgument()>();

        $r131 = new java.lang.StringBuffer;

        $r72 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r11);

        specialinvoke $r131.<java.lang.StringBuffer: void <init>(java.lang.String)>($r72);

        $r73 = virtualinvoke $r131.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("mx");

        $r74 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: java.lang.String memoryMaximumSize>;

        $r75 = virtualinvoke $r73.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r74);

        $r76 = virtualinvoke $r75.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r70.<org.apache.tools.ant.types.Commandline$Argument: void setValue(java.lang.String)>($r76);

     label24:
        $z11 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: boolean debug>;

        if $z11 == 0 goto label37;

        r118 = null;

     label25:
        r118 = virtualinvoke r4.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getDebugLevel", null);

     label26:
        goto label28;

     label27:
        $r102 := @caughtexception;

     label28:
        r119 = null;

        if r118 == null goto label33;

     label29:
        $r67 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: org.apache.tools.ant.taskdefs.Javac attributes>;

        $r68 = virtualinvoke r118.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r67, null);

        r119 = (java.lang.String) $r68;

     label30:
        goto label33;

     label31:
        $r101 := @caughtexception;

        goto label33;

     label32:
        $r100 := @caughtexception;

     label33:
        if r119 == null goto label36;

        $r61 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.Map customDefaultOptions>;

        interfaceinvoke $r61.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.debug.localVariable", "do not generate");

        $r62 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.Map customDefaultOptions>;

        interfaceinvoke $r62.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.debug.lineNumber", "do not generate");

        $r63 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.Map customDefaultOptions>;

        interfaceinvoke $r63.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.debug.sourceFile", "do not generate");

        $i2 = virtualinvoke r119.<java.lang.String: int length()>();

        if $i2 == 0 goto label38;

        $i3 = virtualinvoke r119.<java.lang.String: int indexOf(java.lang.String)>("vars");

        $i12 = (int) -1;

        if $i3 == $i12 goto label34;

        $r66 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.Map customDefaultOptions>;

        interfaceinvoke $r66.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.debug.localVariable", "generate");

     label34:
        $i4 = virtualinvoke r119.<java.lang.String: int indexOf(java.lang.String)>("lines");

        $i14 = (int) -1;

        if $i4 == $i14 goto label35;

        $r65 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.Map customDefaultOptions>;

        interfaceinvoke $r65.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.debug.lineNumber", "generate");

     label35:
        $i5 = virtualinvoke r119.<java.lang.String: int indexOf(java.lang.String)>("source");

        $i16 = (int) -1;

        if $i5 == $i16 goto label38;

        $r64 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.Map customDefaultOptions>;

        interfaceinvoke $r64.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.debug.sourceFile", "generate");

        goto label38;

     label36:
        $r58 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.Map customDefaultOptions>;

        interfaceinvoke $r58.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.debug.localVariable", "generate");

        $r59 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.Map customDefaultOptions>;

        interfaceinvoke $r59.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.debug.lineNumber", "generate");

        $r60 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.Map customDefaultOptions>;

        interfaceinvoke $r60.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.debug.sourceFile", "generate");

        goto label38;

     label37:
        $r13 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.Map customDefaultOptions>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.debug.localVariable", "do not generate");

        $r14 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.Map customDefaultOptions>;

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.debug.lineNumber", "do not generate");

        $r15 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.Map customDefaultOptions>;

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.debug.sourceFile", "do not generate");

     label38:
        $r120 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: org.apache.tools.ant.taskdefs.Javac attributes>;

        $z12 = virtualinvoke $r120.<org.apache.tools.ant.taskdefs.Javac: boolean getNowarn()>();

        if $z12 == 0 goto label44;

        $r43 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.Map customDefaultOptions>;

        $r44 = interfaceinvoke $r43.<java.util.Map: java.util.Set entrySet()>();

        $r45 = interfaceinvoke $r44.<java.util.Set: java.lang.Object[] toArray()>();

        i7 = 0;

        i8 = lengthof $r45;

        goto label43;

     label39:
        $r46 = $r45[i7];

        r121 = (java.util.Map$Entry) $r46;

        $r47 = interfaceinvoke r121.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z5 = $r47 instanceof java.lang.String;

        if $z5 != 0 goto label40;

        goto label42;

     label40:
        $r48 = interfaceinvoke r121.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z6 = $r48 instanceof java.lang.String;

        if $z6 != 0 goto label41;

        goto label42;

     label41:
        $r49 = interfaceinvoke r121.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r50 = (java.lang.String) $r49;

        $z7 = virtualinvoke $r50.<java.lang.String: boolean equals(java.lang.Object)>("warning");

        if $z7 == 0 goto label42;

        $r51 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.Map customDefaultOptions>;

        $r52 = interfaceinvoke r121.<java.util.Map$Entry: java.lang.Object getKey()>();

        interfaceinvoke $r51.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r52, "ignore");

     label42:
        i7 = i7 + 1;

     label43:
        if i7 < i8 goto label39;

        $r54 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.Map customDefaultOptions>;

        $r53 = <org.eclipse.jdt.internal.compiler.util.Util: java.lang.String EMPTY_STRING>;

        interfaceinvoke $r54.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.taskTags", $r53);

        $z8 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: boolean deprecation>;

        if $z8 == 0 goto label46;

        $r55 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.Map customDefaultOptions>;

        interfaceinvoke $r55.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.deprecation", "warning");

        $r56 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.Map customDefaultOptions>;

        interfaceinvoke $r56.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.deprecationInDeprecatedCode", "enabled");

        $r57 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.Map customDefaultOptions>;

        interfaceinvoke $r57.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.deprecationWhenOverridingDeprecatedMethod", "enabled");

        goto label46;

     label44:
        $z1 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: boolean deprecation>;

        if $z1 == 0 goto label45;

        $r40 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.Map customDefaultOptions>;

        interfaceinvoke $r40.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.deprecation", "warning");

        $r41 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.Map customDefaultOptions>;

        interfaceinvoke $r41.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.deprecationInDeprecatedCode", "enabled");

        $r42 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.Map customDefaultOptions>;

        interfaceinvoke $r42.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.deprecationWhenOverridingDeprecatedMethod", "enabled");

        goto label46;

     label45:
        $r16 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.Map customDefaultOptions>;

        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.deprecation", "ignore");

        $r17 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.Map customDefaultOptions>;

        interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.deprecationInDeprecatedCode", "disabled");

        $r18 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.Map customDefaultOptions>;

        interfaceinvoke $r18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.deprecationWhenOverridingDeprecatedMethod", "disabled");

     label46:
        $r122 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: java.io.File destDir>;

        if $r122 == null goto label47;

        $r36 = virtualinvoke $r126.<org.apache.tools.ant.types.Commandline: org.apache.tools.ant.types.Commandline$Argument createArgument()>();

        virtualinvoke $r36.<org.apache.tools.ant.types.Commandline$Argument: void setValue(java.lang.String)>("-d");

        $r37 = virtualinvoke $r126.<org.apache.tools.ant.types.Commandline: org.apache.tools.ant.types.Commandline$Argument createArgument()>();

        $r38 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: java.io.File destDir>;

        $r39 = virtualinvoke $r38.<java.io.File: java.io.File getAbsoluteFile()>();

        virtualinvoke $r37.<org.apache.tools.ant.types.Commandline$Argument: void setFile(java.io.File)>($r39);

     label47:
        $z2 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: boolean verbose>;

        if $z2 == 0 goto label48;

        $r35 = virtualinvoke $r126.<org.apache.tools.ant.types.Commandline: org.apache.tools.ant.types.Commandline$Argument createArgument()>();

        virtualinvoke $r35.<org.apache.tools.ant.types.Commandline$Argument: void setValue(java.lang.String)>("-verbose");

     label48:
        $r19 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: org.apache.tools.ant.taskdefs.Javac attributes>;

        $z3 = virtualinvoke $r19.<org.apache.tools.ant.taskdefs.Javac: boolean getFailonerror()>();

        if $z3 != 0 goto label49;

        $r34 = virtualinvoke $r126.<org.apache.tools.ant.types.Commandline: org.apache.tools.ant.types.Commandline$Argument createArgument()>();

        virtualinvoke $r34.<org.apache.tools.ant.types.Commandline$Argument: void setValue(java.lang.String)>("-proceedOnError");

     label49:
        $r20 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: java.lang.String target>;

        if $r20 == null goto label50;

        $r33 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.Map customDefaultOptions>;

        $r32 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: java.lang.String target>;

        interfaceinvoke $r33.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.codegen.targetPlatform", $r32);

     label50:
        $r21 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: org.apache.tools.ant.taskdefs.Javac attributes>;

        $r22 = virtualinvoke $r21.<org.apache.tools.ant.taskdefs.Javac: java.lang.String getSource()>();

        if $r22 == null goto label51;

        $r31 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.Map customDefaultOptions>;

        interfaceinvoke $r31.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.source", $r22);

     label51:
        $r23 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: java.lang.String encoding>;

        if $r23 == null goto label52;

        $r28 = virtualinvoke $r126.<org.apache.tools.ant.types.Commandline: org.apache.tools.ant.types.Commandline$Argument createArgument()>();

        virtualinvoke $r28.<org.apache.tools.ant.types.Commandline$Argument: void setValue(java.lang.String)>("-encoding");

        $r29 = virtualinvoke $r126.<org.apache.tools.ant.types.Commandline: org.apache.tools.ant.types.Commandline$Argument createArgument()>();

        $r30 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: java.lang.String encoding>;

        virtualinvoke $r29.<org.apache.tools.ant.types.Commandline$Argument: void setValue(java.lang.String)>($r30);

     label52:
        if $r5 == null goto label56;

        i9 = lengthof $r5;

        if i9 == 0 goto label56;

        i10 = 0;

        goto label55;

     label53:
        r24 = $r5[i10];

        $r25 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: java.lang.String logFileName>;

        if $r25 != null goto label54;

        $r26 = "-log";

        $z4 = virtualinvoke $r26.<java.lang.String: boolean equals(java.lang.Object)>(r24);

        if $z4 == 0 goto label54;

        $i0 = i10 + 1;

        if $i0 >= i9 goto label54;

        $i1 = i10 + 1;

        $r27 = $r5[$i1];

        r1.<org.eclipse.jdt.core.JDTCompilerAdapter: java.lang.String logFileName> = $r27;

     label54:
        $r123 = virtualinvoke $r126.<org.apache.tools.ant.types.Commandline: org.apache.tools.ant.types.Commandline$Argument createArgument()>();

        virtualinvoke $r123.<org.apache.tools.ant.types.Commandline$Argument: void setValue(java.lang.String)>(r24);

        i10 = i10 + 1;

     label55:
        if i10 < i9 goto label53;

     label56:
        virtualinvoke r1.<org.eclipse.jdt.core.JDTCompilerAdapter: void logAndAddFilesToCompile(org.apache.tools.ant.types.Commandline)>($r126);

        return $r126;

        catch java.lang.ClassNotFoundException from label01 to label02 with label03;
        catch java.lang.NoSuchMethodException from label08 to label09 with label10;
        catch java.lang.IllegalAccessException from label12 to label13 with label14;
        catch java.lang.reflect.InvocationTargetException from label12 to label13 with label15;
        catch java.lang.NoSuchMethodException from label25 to label26 with label27;
        catch java.lang.IllegalAccessException from label29 to label30 with label31;
        catch java.lang.reflect.InvocationTargetException from label29 to label30 with label32;
    }

    private java.lang.String[] processCompilerArguments(java.lang.Class)
    {
        org.eclipse.jdt.core.JDTCompilerAdapter r1;
        java.lang.IllegalAccessException $r5;
        java.lang.NoSuchMethodException $r6;
        org.apache.tools.ant.taskdefs.Javac $r2;
        java.lang.String[] r8;
        java.lang.reflect.InvocationTargetException $r4;
        java.lang.Class r0;
        java.lang.Object $r3;
        java.lang.reflect.Method r7;

        r1 := @this: org.eclipse.jdt.core.JDTCompilerAdapter;

        r0 := @parameter0: java.lang.Class;

        r7 = null;

     label01:
        r7 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getCurrentCompilerArgs", null);

     label02:
        goto label04;

     label03:
        $r6 := @caughtexception;

     label04:
        r8 = (java.lang.String[]) null;

        if r7 == null goto label09;

     label05:
        $r2 = r1.<org.eclipse.jdt.core.JDTCompilerAdapter: org.apache.tools.ant.taskdefs.Javac attributes>;

        $r3 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r2, null);

        r8 = (java.lang.String[]) $r3;

     label06:
        goto label09;

     label07:
        $r5 := @caughtexception;

        goto label09;

     label08:
        $r4 := @caughtexception;

     label09:
        if r8 == null goto label10;

        specialinvoke r1.<org.eclipse.jdt.core.JDTCompilerAdapter: void checkCompilerArgs(java.lang.String[])>(r8);

     label10:
        return r8;

        catch java.lang.NoSuchMethodException from label01 to label02 with label03;
        catch java.lang.IllegalAccessException from label05 to label06 with label07;
        catch java.lang.reflect.InvocationTargetException from label05 to label06 with label08;
    }

    private void checkCompilerArgs(java.lang.String[])
    {
        java.util.Map $r25, $r26, $r28, $r29;
        java.util.ArrayList $r36;
        java.lang.String $r1, $r3, $r4, $r13, $r14, $r23, $r24;
        java.io.IOException $r31;
        java.io.File $r33;
        char[] $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r20, $r21, $r22, $r32;
        org.eclipse.jdt.core.JDTCompilerAdapter r15;
        boolean $z0, $z1, $z2, $z3;
        java.util.List $r16, $r17, $r18;
        java.lang.String[] r0;
        java.util.HashMap $r34, $r35;
        int i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i11, $i12, $i13, $i15, $i16, $i17, $i18, $i19, $i20, i21, i22, i23, i24, i26, i27, $i28, $i29, $i30, $i32, $i34, $i36;
        char $c0, $c9, $c14, $c25;

        r15 := @this: org.eclipse.jdt.core.JDTCompilerAdapter;

        r0 := @parameter0: java.lang.String[];

        i21 = 0;

        goto label16;

     label01:
        $r1 = r0[i21];

        $c0 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(0);

        $i30 = (int) $c0;

        if $i30 != 64 goto label15;

     label02:
        $r33 = new java.io.File;

        $r3 = r0[i21];

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int)>(1);

        specialinvoke $r33.<java.io.File: void <init>(java.lang.String)>($r4);

        $r5 = staticinvoke <org.eclipse.jdt.internal.compiler.util.Util: char[] getFileCharContent(java.io.File,java.lang.String)>($r33, null);

        i22 = 0;

        $r6 = <org.eclipse.jdt.core.JDTCompilerAdapter: char[] ADAPTER_PREFIX>;

        i1 = lengthof $r6;

        goto label12;

     label03:
        i23 = $i28 + i1;

        $i2 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: int indexOf(char,char[],int)>(10, $r5, i23);

        i24 = $i2;

        $i32 = (int) -1;

        if $i2 != $i32 goto label05;

        i24 = lengthof $r5;

        goto label05;

     label04:
        $i34 = (int) -1;

        i24 = i24 + $i34;

     label05:
        $c25 = $r5[i24];

        $z3 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: boolean isWhitespace(char)>($c25);

        if $z3 != 0 goto label04;

        $r8 = <org.eclipse.jdt.core.JDTCompilerAdapter: char[] ADAPTER_ENCODING>;

        $r7 = <org.eclipse.jdt.core.JDTCompilerAdapter: char[] ADAPTER_ENCODING>;

        $i3 = lengthof $r7;

        $i4 = i23 + $i3;

        $z0 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: boolean equals(char[],char[],int,int)>($r8, $r5, i23, $i4);

        if $z0 == 0 goto label09;

        $r20 = <org.eclipse.jdt.core.JDTCompilerAdapter: char[] SEPARATOR_CHARS>;

        $c14 = <java.io.File: char separatorChar>;

        $i13 = i24 + 1;

        staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: void replace(char[],char[],char,int,int)>($r5, $r20, $c14, i23, $i13);

        $r21 = <org.eclipse.jdt.core.JDTCompilerAdapter: char[] ADAPTER_ENCODING>;

        $i15 = lengthof $r21;

        i26 = i23 + $i15;

        $i16 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: int lastIndexOf(char,char[],int,int)>(91, $r5, i26, i24);

        if i26 >= $i16 goto label11;

        if $i16 >= i24 goto label11;

        $r22 = <org.eclipse.jdt.internal.compiler.util.SuffixConstants: char[] SUFFIX_java>;

        $i17 = $i16 - 5;

        $z2 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: boolean equals(char[],char[],int,int,boolean)>($r22, $r5, $i17, $i16, 0);

        $i18 = $i16 - i26;

        $r23 = staticinvoke <java.lang.String: java.lang.String valueOf(char[],int,int)>($r5, i26, $i18);

        $i19 = i24 - $i16;

        $i20 = $i19 + 1;

        $r24 = staticinvoke <java.lang.String: java.lang.String valueOf(char[],int,int)>($r5, $i16, $i20);

        if $z2 == 0 goto label07;

        $r28 = r15.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.Map fileEncodings>;

        if $r28 != null goto label06;

        $r34 = new java.util.HashMap;

        specialinvoke $r34.<java.util.HashMap: void <init>()>();

        r15.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.Map fileEncodings> = $r34;

     label06:
        $r29 = r15.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.Map fileEncodings>;

        interfaceinvoke $r29.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r23, $r24);

        goto label11;

     label07:
        $r25 = r15.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.Map dirEncodings>;

        if $r25 != null goto label08;

        $r35 = new java.util.HashMap;

        specialinvoke $r35.<java.util.HashMap: void <init>()>();

        r15.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.Map dirEncodings> = $r35;

     label08:
        $r26 = r15.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.Map dirEncodings>;

        interfaceinvoke $r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r23, $r24);

        goto label11;

     label09:
        $r10 = <org.eclipse.jdt.core.JDTCompilerAdapter: char[] ADAPTER_ACCESS>;

        $r9 = <org.eclipse.jdt.core.JDTCompilerAdapter: char[] ADAPTER_ACCESS>;

        $i5 = lengthof $r9;

        $i6 = i23 + $i5;

        $z1 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: boolean equals(char[],char[],int,int)>($r10, $r5, i23, $i6);

        if $z1 == 0 goto label11;

        $r11 = <org.eclipse.jdt.core.JDTCompilerAdapter: char[] ADAPTER_ACCESS>;

        $i7 = lengthof $r11;

        i27 = i23 + $i7;

        $i8 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: int indexOf(char,char[],int,int)>(91, $r5, i27, i24);

        $r12 = <org.eclipse.jdt.core.JDTCompilerAdapter: char[] SEPARATOR_CHARS>;

        $c9 = <java.io.File: char separatorChar>;

        staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: void replace(char[],char[],char,int,int)>($r5, $r12, $c9, i27, $i8);

        if i27 >= $i8 goto label11;

        if $i8 >= i24 goto label11;

        $i10 = $i8 - i27;

        $r13 = staticinvoke <java.lang.String: java.lang.String valueOf(char[],int,int)>($r5, i27, $i10);

        $i11 = i24 - $i8;

        $i12 = $i11 + 1;

        $r14 = staticinvoke <java.lang.String: java.lang.String valueOf(char[],int,int)>($r5, $i8, $i12);

        $r16 = r15.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.List accessRules>;

        if $r16 != null goto label10;

        $r36 = new java.util.ArrayList;

        specialinvoke $r36.<java.util.ArrayList: void <init>()>();

        r15.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.List accessRules> = $r36;

     label10:
        $r17 = r15.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.List accessRules>;

        interfaceinvoke $r17.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r18 = r15.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.List accessRules>;

        interfaceinvoke $r18.<java.util.List: boolean add(java.lang.Object)>($r14);

     label11:
        i22 = i24;

     label12:
        $r32 = <org.eclipse.jdt.core.JDTCompilerAdapter: char[] ADAPTER_PREFIX>;

        $i28 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: int indexOf(char[],char[],boolean,int)>($r32, $r5, 1, i22);

        $i36 = (int) -1;

        if $i28 > $i36 goto label03;

     label13:
        goto label15;

     label14:
        $r31 := @caughtexception;

     label15:
        i21 = i21 + 1;

     label16:
        $i29 = lengthof r0;

        if i21 < $i29 goto label01;

        return;

        catch java.io.IOException from label02 to label13 with label14;
    }

    private void createClasspathArgument(org.apache.tools.ant.types.Commandline, org.apache.tools.ant.types.Path)
    {
        org.apache.tools.ant.types.Commandline r0;
        org.eclipse.jdt.core.JDTCompilerAdapter r4;
        org.apache.tools.ant.types.Path r2;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.List $r5, $r6, $r8;
        java.lang.Object[] $r9;
        java.lang.String[] $r3, $r7, r10;
        java.lang.StringBuffer $r11;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i16, i17, i18;
        java.lang.String r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20;
        org.apache.tools.ant.types.Commandline$Argument $r1;
        char $c15;

        r4 := @this: org.eclipse.jdt.core.JDTCompilerAdapter;

        r0 := @parameter0: org.apache.tools.ant.types.Commandline;

        r2 := @parameter1: org.apache.tools.ant.types.Path;

        $r1 = virtualinvoke r0.<org.apache.tools.ant.types.Commandline: org.apache.tools.ant.types.Commandline$Argument createArgument()>();

        $r3 = virtualinvoke r2.<org.apache.tools.ant.types.Path: java.lang.String[] list()>();

        $i0 = lengthof $r3;

        if $i0 != 0 goto label01;

        $r20 = <org.eclipse.jdt.internal.compiler.util.Util: java.lang.String EMPTY_STRING>;

        virtualinvoke $r1.<org.apache.tools.ant.types.Commandline$Argument: void setValue(java.lang.String)>($r20);

        return;

     label01:
        $r5 = r4.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.List accessRules>;

        if $r5 != null goto label02;

        virtualinvoke $r1.<org.apache.tools.ant.types.Commandline$Argument: void setPath(org.apache.tools.ant.types.Path)>(r2);

        return;

     label02:
        $r6 = r4.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.List accessRules>;

        $i1 = interfaceinvoke $r6.<java.util.List: int size()>();

        $r8 = r4.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.List accessRules>;

        $r7 = newarray (java.lang.String)[$i1];

        $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        r10 = (java.lang.String[]) $r9;

        i16 = 0;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        i17 = 0;

        i2 = lengthof $r3;

        goto label11;

     label03:
        if i17 <= 0 goto label04;

        $c15 = <java.io.File: char pathSeparatorChar>;

        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c15);

     label04:
        $r18 = $r3[i17];

        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        i18 = i16;

        goto label09;

     label05:
        r12 = r10[i18];

        $z0 = virtualinvoke $r18.<java.lang.String: boolean endsWith(java.lang.String)>(r12);

        if $z0 == 0 goto label06;

        $i14 = i18 + 1;

        $r17 = r10[$i14];

        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        i16 = i18 + 2;

        goto label10;

     label06:
        $r13 = <java.io.File: java.lang.String separator>;

        $z1 = virtualinvoke r12.<java.lang.String: boolean endsWith(java.lang.String)>($r13);

        if $z1 == 0 goto label07;

        $i8 = virtualinvoke r12.<java.lang.String: int length()>();

        $i9 = virtualinvoke $r18.<java.lang.String: int length()>();

        $i10 = $i9 - $i8;

        $i12 = $i10 + 1;

        $i11 = $i8 - 1;

        $z4 = virtualinvoke $r18.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(0, $i12, r12, 0, $i11);

        if $z4 == 0 goto label08;

        $i13 = i18 + 1;

        $r16 = r10[$i13];

        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        i16 = i18 + 2;

        goto label10;

     label07:
        $r14 = <java.io.File: java.lang.String separator>;

        $z2 = virtualinvoke $r18.<java.lang.String: boolean endsWith(java.lang.String)>($r14);

        if $z2 == 0 goto label08;

        $i3 = virtualinvoke r12.<java.lang.String: int length()>();

        $i4 = virtualinvoke $r18.<java.lang.String: int length()>();

        $i5 = $i4 - $i3;

        $i6 = $i5 - 1;

        $z3 = virtualinvoke $r18.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(0, $i6, r12, 0, $i3);

        if $z3 == 0 goto label08;

        $i7 = i18 + 1;

        $r15 = r10[$i7];

        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        i16 = i18 + 2;

        goto label10;

     label08:
        i18 = i18 + 2;

     label09:
        if i18 < $i1 goto label05;

     label10:
        i17 = i17 + 1;

     label11:
        if i17 < i2 goto label03;

        $r19 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<org.apache.tools.ant.types.Commandline$Argument: void setValue(java.lang.String)>($r19);

        return;
    }

    protected void logAndAddFilesToCompile(org.apache.tools.ant.types.Commandline)
    {
        org.apache.tools.ant.types.Commandline r3;
        java.util.Map $r10, $r11, $r19, $r27, $r33, $r34, $r37, $r38;
        java.util.Set $r35, $r39;
        java.lang.StringBuffer $r5, $r22, $r30, $r45, $r47, $r50, $r51, $r53, $r54, $r55;
        java.lang.String $r4, $r6, $r9, $r14, $r15, $r17, $r18, $r21, $r23, $r25, $r26, $r29, $r32, r42, $r46, $r48;
        java.io.File $r13;
        org.eclipse.jdt.core.JDTCompilerAdapter r0;
        org.apache.tools.ant.taskdefs.Javac $r2, $r31;
        boolean $z0, z1;
        org.eclipse.jdt.core.JDTCompilerAdapter$1 $r52;
        java.lang.String[] r40, r41;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11, i12, $i13, $i15, $i17;
        org.apache.tools.ant.types.Commandline$Argument $r43;
        java.lang.Object $r20, $r28;
        java.io.File[] $r8, $r12, $r49;

        r0 := @this: org.eclipse.jdt.core.JDTCompilerAdapter;

        r3 := @parameter0: org.apache.tools.ant.types.Commandline;

        $r2 = r0.<org.eclipse.jdt.core.JDTCompilerAdapter: org.apache.tools.ant.taskdefs.Javac attributes>;

        $r50 = new java.lang.StringBuffer;

        specialinvoke $r50.<java.lang.StringBuffer: void <init>(java.lang.String)>("Compilation ");

        $r4 = virtualinvoke r3.<org.apache.tools.ant.types.Commandline: java.lang.String describeArguments()>();

        $r5 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<org.apache.tools.ant.taskdefs.Javac: void log(java.lang.String,int)>($r6, 3);

        $r51 = new java.lang.StringBuffer;

        specialinvoke $r51.<java.lang.StringBuffer: void <init>(java.lang.String)>("File");

        $r8 = r0.<org.eclipse.jdt.core.JDTCompilerAdapter: java.io.File[] compileList>;

        $i0 = lengthof $r8;

        if $i0 == 1 goto label01;

        virtualinvoke $r51.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("s");

     label01:
        virtualinvoke $r51.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" to be compiled:");

        $r9 = <org.eclipse.jdt.core.JDTCompilerAdapter: java.lang.String lSep>;

        virtualinvoke $r51.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        r40 = (java.lang.String[]) null;

        r41 = (java.lang.String[]) null;

        i8 = 0;

        i9 = 0;

        $r10 = r0.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.Map fileEncodings>;

        if $r10 == null goto label02;

        $r37 = r0.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.Map fileEncodings>;

        $i7 = interfaceinvoke $r37.<java.util.Map: int size()>();

        i8 = $i7;

        r40 = newarray (java.lang.String)[$i7];

        $r38 = r0.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.Map fileEncodings>;

        $r39 = interfaceinvoke $r38.<java.util.Map: java.util.Set keySet()>();

        interfaceinvoke $r39.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>(r40);

     label02:
        $r11 = r0.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.Map dirEncodings>;

        if $r11 == null goto label03;

        $r33 = r0.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.Map dirEncodings>;

        $i6 = interfaceinvoke $r33.<java.util.Map: int size()>();

        i9 = $i6;

        r41 = newarray (java.lang.String)[$i6];

        $r34 = r0.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.Map dirEncodings>;

        $r35 = interfaceinvoke $r34.<java.util.Map: java.util.Set keySet()>();

        interfaceinvoke $r35.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>(r41);

        $r52 = new org.eclipse.jdt.core.JDTCompilerAdapter$1;

        specialinvoke $r52.<org.eclipse.jdt.core.JDTCompilerAdapter$1: void <init>(org.eclipse.jdt.core.JDTCompilerAdapter)>(r0);

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(r41, $r52);

     label03:
        i10 = 0;

        goto label14;

     label04:
        $r12 = r0.<org.eclipse.jdt.core.JDTCompilerAdapter: java.io.File[] compileList>;

        $r13 = $r12[i10];

        $r14 = virtualinvoke $r13.<java.io.File: java.lang.String getAbsolutePath()>();

        r42 = $r14;

        z1 = 0;

        if r40 == null goto label09;

        i11 = 0;

        goto label08;

     label05:
        $r23 = r40[i11];

        $z0 = virtualinvoke $r14.<java.lang.String: boolean endsWith(java.lang.String)>($r23);

        if $z0 == 0 goto label07;

        $r53 = new java.lang.StringBuffer;

        $r25 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r14);

        specialinvoke $r53.<java.lang.StringBuffer: void <init>(java.lang.String)>($r25);

        $r27 = r0.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.Map fileEncodings>;

        $r26 = r40[i11];

        $r28 = interfaceinvoke $r27.<java.util.Map: java.lang.Object get(java.lang.Object)>($r26);

        $r29 = (java.lang.String) $r28;

        $r30 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r29);

        r42 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.String toString()>();

        $i2 = i8 - 1;

        if i11 >= $i2 goto label06;

        $i5 = i11 + 1;

        $i3 = i8 - i11;

        $i4 = $i3 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r40, $i5, r40, i11, $i4);

     label06:
        $i15 = (int) -1;

        i8 = i8 + $i15;

        r40[i8] = null;

        z1 = 1;

        goto label09;

     label07:
        i11 = i11 + 1;

     label08:
        if i11 < i8 goto label05;

     label09:
        if z1 != 0 goto label13;

        if r41 == null goto label13;

        i12 = 0;

        goto label12;

     label10:
        $r15 = r41[i12];

        $i1 = virtualinvoke r42.<java.lang.String: int lastIndexOf(java.lang.String)>($r15);

        $i17 = (int) -1;

        if $i1 == $i17 goto label11;

        $r54 = new java.lang.StringBuffer;

        $r17 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r42);

        specialinvoke $r54.<java.lang.StringBuffer: void <init>(java.lang.String)>($r17);

        $r19 = r0.<org.eclipse.jdt.core.JDTCompilerAdapter: java.util.Map dirEncodings>;

        $r18 = r41[i12];

        $r20 = interfaceinvoke $r19.<java.util.Map: java.lang.Object get(java.lang.Object)>($r18);

        $r21 = (java.lang.String) $r20;

        $r22 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r21);

        r42 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label13;

     label11:
        i12 = i12 + 1;

     label12:
        if i12 < i9 goto label10;

     label13:
        $r43 = virtualinvoke r3.<org.apache.tools.ant.types.Commandline: org.apache.tools.ant.types.Commandline$Argument createArgument()>();

        virtualinvoke $r43.<org.apache.tools.ant.types.Commandline$Argument: void setValue(java.lang.String)>(r42);

        $r55 = new java.lang.StringBuffer;

        specialinvoke $r55.<java.lang.StringBuffer: void <init>(java.lang.String)>("    ");

        $r45 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r42);

        $r46 = <org.eclipse.jdt.core.JDTCompilerAdapter: java.lang.String lSep>;

        $r47 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r46);

        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r51.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r48);

        i10 = i10 + 1;

     label14:
        $r49 = r0.<org.eclipse.jdt.core.JDTCompilerAdapter: java.io.File[] compileList>;

        $i13 = lengthof $r49;

        if i10 < $i13 goto label04;

        $r31 = r0.<org.eclipse.jdt.core.JDTCompilerAdapter: org.apache.tools.ant.taskdefs.Javac attributes>;

        $r32 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r31.<org.apache.tools.ant.taskdefs.Javac: void log(java.lang.String,int)>($r32, 3);

        return;
    }
}
