public class com.jhlabs.image.EdgeFilter extends com.jhlabs.image.WholeImageFilter
{
    static final long serialVersionUID;
    public static final float R2;
    public static final float[] ROBERTS_V;
    public static final float[] ROBERTS_H;
    public static final float[] PREWITT_V;
    public static final float[] PREWITT_H;
    public static final float[] SOBEL_V;
    public static float[] SOBEL_H;
    public static final float[] FREI_CHEN_V;
    public static float[] FREI_CHEN_H;
    protected float[] vEdgeMatrix;
    protected float[] hEdgeMatrix;

    public void <init>()
    {
        float[] $r1, $r2;
        com.jhlabs.image.EdgeFilter r0;

        r0 := @this: com.jhlabs.image.EdgeFilter;

        specialinvoke r0.<com.jhlabs.image.WholeImageFilter: void <init>()>();

        $r1 = <com.jhlabs.image.EdgeFilter: float[] SOBEL_V>;

        r0.<com.jhlabs.image.EdgeFilter: float[] vEdgeMatrix> = $r1;

        $r2 = <com.jhlabs.image.EdgeFilter: float[] SOBEL_H>;

        r0.<com.jhlabs.image.EdgeFilter: float[] hEdgeMatrix> = $r2;

        return;
    }

    public void setVEdgeMatrix(float[])
    {
        float[] r1;
        com.jhlabs.image.EdgeFilter r0;

        r0 := @this: com.jhlabs.image.EdgeFilter;

        r1 := @parameter0: float[];

        r0.<com.jhlabs.image.EdgeFilter: float[] vEdgeMatrix> = r1;

        return;
    }

    public float[] getVEdgeMatrix()
    {
        float[] $r1;
        com.jhlabs.image.EdgeFilter r0;

        r0 := @this: com.jhlabs.image.EdgeFilter;

        $r1 = r0.<com.jhlabs.image.EdgeFilter: float[] vEdgeMatrix>;

        return $r1;
    }

    public void setHEdgeMatrix(float[])
    {
        float[] r1;
        com.jhlabs.image.EdgeFilter r0;

        r0 := @this: com.jhlabs.image.EdgeFilter;

        r1 := @parameter0: float[];

        r0.<com.jhlabs.image.EdgeFilter: float[] hEdgeMatrix> = r1;

        return;
    }

    public float[] getHEdgeMatrix()
    {
        float[] $r1;
        com.jhlabs.image.EdgeFilter r0;

        r0 := @this: com.jhlabs.image.EdgeFilter;

        $r1 = r0.<com.jhlabs.image.EdgeFilter: float[] hEdgeMatrix>;

        return $r1;
    }

    protected int[] filterPixels(int, int, int[], java.awt.Rectangle)
    {
        float[] $r4, $r5;
        com.jhlabs.image.EdgeFilter r2;
        int[] r0, r1;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13;
        java.awt.Rectangle r3;
        int i0, i1, $i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, $i37, $i38, $i39, i40, i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, i57, i58, i59, $i61, $i63, $i65;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;

        r2 := @this: com.jhlabs.image.EdgeFilter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: int[];

        r3 := @parameter3: java.awt.Rectangle;

        i26 = 0;

        $i2 = i0 * i1;

        r0 = newarray (int)[$i2];

        i27 = 0;

     label01:
        if i27 >= i1 goto label12;

        i28 = 0;

     label02:
        if i28 >= i0 goto label11;

        i29 = 0;

        i30 = 0;

        i31 = 0;

        i32 = 0;

        i33 = 0;

        i34 = 0;

        $i3 = i27 * i0;

        $i4 = $i3 + i28;

        $i5 = r1[$i4];

        i6 = $i5 & -16777216;

        $i61 = (int) -1;

        i35 = $i61;

     label03:
        if i35 > 1 goto label10;

        i25 = i27 + i35;

        if 0 > i25 goto label04;

        if i25 >= i1 goto label04;

        i36 = i25 * i0;

        goto label05;

     label04:
        i36 = i27 * i0;

     label05:
        $i37 = i35 + 1;

        $i38 = 3 * $i37;

        $i39 = $i38 + 1;

        $i63 = (int) -1;

        i40 = $i63;

     label06:
        if i40 > 1 goto label09;

        i41 = i28 + i40;

        if 0 > i41 goto label07;

        if i41 < i0 goto label08;

     label07:
        i41 = i28;

     label08:
        $i42 = i36 + i41;

        $i43 = r1[$i42];

        $r4 = r2.<com.jhlabs.image.EdgeFilter: float[] hEdgeMatrix>;

        $i44 = $i39 + i40;

        $f0 = $r4[$i44];

        $r5 = r2.<com.jhlabs.image.EdgeFilter: float[] vEdgeMatrix>;

        $i45 = $i39 + i40;

        $f1 = $r5[$i45];

        $i46 = $i43 & 16711680;

        $i47 = $i46 >> 16;

        $i65 = (int) 65280;

        $i48 = $i43 & $i65;

        $i49 = $i48 >> 8;

        $i50 = $i43 & 255;

        $f2 = (float) $i47;

        $f3 = $f0 * $f2;

        $i51 = (int) $f3;

        i29 = i29 + $i51;

        $f4 = (float) $i49;

        $f5 = $f0 * $f4;

        $i52 = (int) $f5;

        i30 = i30 + $i52;

        $f6 = (float) $i50;

        $f7 = $f0 * $f6;

        $i53 = (int) $f7;

        i31 = i31 + $i53;

        $f8 = (float) $i47;

        $f9 = $f1 * $f8;

        $i54 = (int) $f9;

        i32 = i32 + $i54;

        $f10 = (float) $i49;

        $f11 = $f1 * $f10;

        $i55 = (int) $f11;

        i33 = i33 + $i55;

        $f12 = (float) $i50;

        $f13 = $f1 * $f12;

        $i56 = (int) $f13;

        i34 = i34 + $i56;

        i40 = i40 + 1;

        goto label06;

     label09:
        i35 = i35 + 1;

        goto label03;

     label10:
        $i8 = i29 * i29;

        $i7 = i32 * i32;

        $i9 = $i8 + $i7;

        $d0 = (double) $i9;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $d2 = $d1 / 1.8;

        i57 = (int) $d2;

        $i11 = i30 * i30;

        $i10 = i33 * i33;

        $i12 = $i11 + $i10;

        $d3 = (double) $i12;

        $d4 = staticinvoke <java.lang.Math: double sqrt(double)>($d3);

        $d5 = $d4 / 1.8;

        i58 = (int) $d5;

        $i14 = i31 * i31;

        $i13 = i34 * i34;

        $i15 = $i14 + $i13;

        $d6 = (double) $i15;

        $d7 = staticinvoke <java.lang.Math: double sqrt(double)>($d6);

        $d8 = $d7 / 1.8;

        i59 = (int) $d8;

        $i16 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>(i57);

        $i17 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>(i58);

        $i18 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>(i59);

        $i19 = i26;

        i26 = i26 + 1;

        $i20 = $i16 << 16;

        $i22 = i6 | $i20;

        $i21 = $i17 << 8;

        $i23 = $i22 | $i21;

        $i24 = $i23 | $i18;

        r0[$i19] = $i24;

        i28 = i28 + 1;

        goto label02;

     label11:
        i27 = i27 + 1;

        goto label01;

     label12:
        return r0;
    }

    public java.lang.String toString()
    {
        com.jhlabs.image.EdgeFilter r0;

        r0 := @this: com.jhlabs.image.EdgeFilter;

        return "Blur/Detect Edges";
    }

    static void <clinit>()
    {
        float[] $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        double $d0;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6;

        <com.jhlabs.image.EdgeFilter: long serialVersionUID> = -1084121755410916989L;

        $d0 = staticinvoke <java.lang.Math: double sqrt(double)>(2.0);

        $f0 = (float) $d0;

        <com.jhlabs.image.EdgeFilter: float R2> = $f0;

        $r0 = newarray (float)[9];

        $r0[0] = 0.0F;

        $r0[1] = 0.0F;

        $r0[2] = -1.0F;

        $r0[3] = 0.0F;

        $r0[4] = 1.0F;

        $r0[5] = 0.0F;

        $r0[6] = 0.0F;

        $r0[7] = 0.0F;

        $r0[8] = 0.0F;

        <com.jhlabs.image.EdgeFilter: float[] ROBERTS_V> = $r0;

        $r1 = newarray (float)[9];

        $r1[0] = -1.0F;

        $r1[1] = 0.0F;

        $r1[2] = 0.0F;

        $r1[3] = 0.0F;

        $r1[4] = 1.0F;

        $r1[5] = 0.0F;

        $r1[6] = 0.0F;

        $r1[7] = 0.0F;

        $r1[8] = 0.0F;

        <com.jhlabs.image.EdgeFilter: float[] ROBERTS_H> = $r1;

        $r2 = newarray (float)[9];

        $r2[0] = -1.0F;

        $r2[1] = 0.0F;

        $r2[2] = 1.0F;

        $r2[3] = -1.0F;

        $r2[4] = 0.0F;

        $r2[5] = 1.0F;

        $r2[6] = -1.0F;

        $r2[7] = 0.0F;

        $r2[8] = 1.0F;

        <com.jhlabs.image.EdgeFilter: float[] PREWITT_V> = $r2;

        $r3 = newarray (float)[9];

        $r3[0] = -1.0F;

        $r3[1] = -1.0F;

        $r3[2] = -1.0F;

        $r3[3] = 0.0F;

        $r3[4] = 0.0F;

        $r3[5] = 0.0F;

        $r3[6] = 1.0F;

        $r3[7] = 1.0F;

        $r3[8] = 1.0F;

        <com.jhlabs.image.EdgeFilter: float[] PREWITT_H> = $r3;

        $r4 = newarray (float)[9];

        $r4[0] = -1.0F;

        $r4[1] = 0.0F;

        $r4[2] = 1.0F;

        $r4[3] = -2.0F;

        $r4[4] = 0.0F;

        $r4[5] = 2.0F;

        $r4[6] = -1.0F;

        $r4[7] = 0.0F;

        $r4[8] = 1.0F;

        <com.jhlabs.image.EdgeFilter: float[] SOBEL_V> = $r4;

        $r5 = newarray (float)[9];

        $r5[0] = -1.0F;

        $r5[1] = -2.0F;

        $r5[2] = -1.0F;

        $r5[3] = 0.0F;

        $r5[4] = 0.0F;

        $r5[5] = 0.0F;

        $r5[6] = 1.0F;

        $r5[7] = 2.0F;

        $r5[8] = 1.0F;

        <com.jhlabs.image.EdgeFilter: float[] SOBEL_H> = $r5;

        $r6 = newarray (float)[9];

        $r6[0] = -1.0F;

        $r6[1] = 0.0F;

        $r6[2] = 1.0F;

        $f1 = <com.jhlabs.image.EdgeFilter: float R2>;

        $f2 = neg $f1;

        $r6[3] = $f2;

        $r6[4] = 0.0F;

        $f3 = <com.jhlabs.image.EdgeFilter: float R2>;

        $r6[5] = $f3;

        $r6[6] = -1.0F;

        $r6[7] = 0.0F;

        $r6[8] = 1.0F;

        <com.jhlabs.image.EdgeFilter: float[] FREI_CHEN_V> = $r6;

        $r7 = newarray (float)[9];

        $r7[0] = -1.0F;

        $f4 = <com.jhlabs.image.EdgeFilter: float R2>;

        $f5 = neg $f4;

        $r7[1] = $f5;

        $r7[2] = -1.0F;

        $r7[3] = 0.0F;

        $r7[4] = 0.0F;

        $r7[5] = 0.0F;

        $r7[6] = 1.0F;

        $f6 = <com.jhlabs.image.EdgeFilter: float R2>;

        $r7[7] = $f6;

        $r7[8] = 1.0F;

        <com.jhlabs.image.EdgeFilter: float[] FREI_CHEN_H> = $r7;

        return;
    }
}
