public class org.apache.batik.parser.PathArrayProducer extends java.lang.Object implements org.apache.batik.parser.PathHandler
{
    protected java.util.LinkedList ps;
    protected float[] p;
    protected java.util.LinkedList cs;
    protected short[] c;
    protected int cindex;
    protected int pindex;
    protected int ccount;
    protected int pcount;

    public void <init>()
    {
        org.apache.batik.parser.PathArrayProducer r0;

        r0 := @this: org.apache.batik.parser.PathArrayProducer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public short[] getPathCommands()
    {
        short[] $r1;
        org.apache.batik.parser.PathArrayProducer r0;

        r0 := @this: org.apache.batik.parser.PathArrayProducer;

        $r1 = r0.<org.apache.batik.parser.PathArrayProducer: short[] c>;

        return $r1;
    }

    public float[] getPathParameters()
    {
        float[] $r1;
        org.apache.batik.parser.PathArrayProducer r0;

        r0 := @this: org.apache.batik.parser.PathArrayProducer;

        $r1 = r0.<org.apache.batik.parser.PathArrayProducer: float[] p>;

        return $r1;
    }

    public void startPath() throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.parser.PathArrayProducer r0;
        float[] $r4;
        short[] $r2;
        java.util.LinkedList $r1, $r3;

        r0 := @this: org.apache.batik.parser.PathArrayProducer;

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.batik.parser.PathArrayProducer: java.util.LinkedList cs> = $r1;

        $r2 = newarray (short)[11];

        r0.<org.apache.batik.parser.PathArrayProducer: short[] c> = $r2;

        $r3 = new java.util.LinkedList;

        specialinvoke $r3.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.batik.parser.PathArrayProducer: java.util.LinkedList ps> = $r3;

        $r4 = newarray (float)[11];

        r0.<org.apache.batik.parser.PathArrayProducer: float[] p> = $r4;

        r0.<org.apache.batik.parser.PathArrayProducer: int ccount> = 0;

        r0.<org.apache.batik.parser.PathArrayProducer: int pcount> = 0;

        r0.<org.apache.batik.parser.PathArrayProducer: int cindex> = 0;

        r0.<org.apache.batik.parser.PathArrayProducer: int pindex> = 0;

        return;
    }

    public void movetoRel(float, float) throws org.apache.batik.parser.ParseException
    {
        float f0, f1;
        org.apache.batik.parser.PathArrayProducer r0;

        r0 := @this: org.apache.batik.parser.PathArrayProducer;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void command(short)>(3);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f0);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f1);

        return;
    }

    public void movetoAbs(float, float) throws org.apache.batik.parser.ParseException
    {
        float f0, f1;
        org.apache.batik.parser.PathArrayProducer r0;

        r0 := @this: org.apache.batik.parser.PathArrayProducer;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void command(short)>(2);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f0);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f1);

        return;
    }

    public void closePath() throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.parser.PathArrayProducer r0;

        r0 := @this: org.apache.batik.parser.PathArrayProducer;

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void command(short)>(1);

        return;
    }

    public void linetoRel(float, float) throws org.apache.batik.parser.ParseException
    {
        float f0, f1;
        org.apache.batik.parser.PathArrayProducer r0;

        r0 := @this: org.apache.batik.parser.PathArrayProducer;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void command(short)>(5);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f0);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f1);

        return;
    }

    public void linetoAbs(float, float) throws org.apache.batik.parser.ParseException
    {
        float f0, f1;
        org.apache.batik.parser.PathArrayProducer r0;

        r0 := @this: org.apache.batik.parser.PathArrayProducer;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void command(short)>(4);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f0);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f1);

        return;
    }

    public void linetoHorizontalRel(float) throws org.apache.batik.parser.ParseException
    {
        float f0;
        org.apache.batik.parser.PathArrayProducer r0;

        r0 := @this: org.apache.batik.parser.PathArrayProducer;

        f0 := @parameter0: float;

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void command(short)>(13);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f0);

        return;
    }

    public void linetoHorizontalAbs(float) throws org.apache.batik.parser.ParseException
    {
        float f0;
        org.apache.batik.parser.PathArrayProducer r0;

        r0 := @this: org.apache.batik.parser.PathArrayProducer;

        f0 := @parameter0: float;

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void command(short)>(12);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f0);

        return;
    }

    public void linetoVerticalRel(float) throws org.apache.batik.parser.ParseException
    {
        float f0;
        org.apache.batik.parser.PathArrayProducer r0;

        r0 := @this: org.apache.batik.parser.PathArrayProducer;

        f0 := @parameter0: float;

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void command(short)>(15);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f0);

        return;
    }

    public void linetoVerticalAbs(float) throws org.apache.batik.parser.ParseException
    {
        float f0;
        org.apache.batik.parser.PathArrayProducer r0;

        r0 := @this: org.apache.batik.parser.PathArrayProducer;

        f0 := @parameter0: float;

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void command(short)>(14);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f0);

        return;
    }

    public void curvetoCubicRel(float, float, float, float, float, float) throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.parser.PathArrayProducer r0;
        float f0, f1, f2, f3, f4, f5;

        r0 := @this: org.apache.batik.parser.PathArrayProducer;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        f4 := @parameter4: float;

        f5 := @parameter5: float;

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void command(short)>(7);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f0);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f1);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f2);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f3);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f4);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f5);

        return;
    }

    public void curvetoCubicAbs(float, float, float, float, float, float) throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.parser.PathArrayProducer r0;
        float f0, f1, f2, f3, f4, f5;

        r0 := @this: org.apache.batik.parser.PathArrayProducer;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        f4 := @parameter4: float;

        f5 := @parameter5: float;

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void command(short)>(6);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f0);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f1);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f2);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f3);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f4);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f5);

        return;
    }

    public void curvetoCubicSmoothRel(float, float, float, float) throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.parser.PathArrayProducer r0;
        float f0, f1, f2, f3;

        r0 := @this: org.apache.batik.parser.PathArrayProducer;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void command(short)>(17);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f0);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f1);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f2);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f3);

        return;
    }

    public void curvetoCubicSmoothAbs(float, float, float, float) throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.parser.PathArrayProducer r0;
        float f0, f1, f2, f3;

        r0 := @this: org.apache.batik.parser.PathArrayProducer;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void command(short)>(16);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f0);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f1);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f2);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f3);

        return;
    }

    public void curvetoQuadraticRel(float, float, float, float) throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.parser.PathArrayProducer r0;
        float f0, f1, f2, f3;

        r0 := @this: org.apache.batik.parser.PathArrayProducer;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void command(short)>(9);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f0);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f1);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f2);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f3);

        return;
    }

    public void curvetoQuadraticAbs(float, float, float, float) throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.parser.PathArrayProducer r0;
        float f0, f1, f2, f3;

        r0 := @this: org.apache.batik.parser.PathArrayProducer;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void command(short)>(8);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f0);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f1);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f2);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f3);

        return;
    }

    public void curvetoQuadraticSmoothRel(float, float) throws org.apache.batik.parser.ParseException
    {
        float f0, f1;
        org.apache.batik.parser.PathArrayProducer r0;

        r0 := @this: org.apache.batik.parser.PathArrayProducer;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void command(short)>(19);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f0);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f1);

        return;
    }

    public void curvetoQuadraticSmoothAbs(float, float) throws org.apache.batik.parser.ParseException
    {
        float f0, f1;
        org.apache.batik.parser.PathArrayProducer r0;

        r0 := @this: org.apache.batik.parser.PathArrayProducer;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void command(short)>(18);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f0);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f1);

        return;
    }

    public void arcRel(float, float, float, boolean, boolean, float, float) throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.parser.PathArrayProducer r0;
        float f0, f1, f2, f3, f4, $f5, $f6;
        boolean z0, z1;

        r0 := @this: org.apache.batik.parser.PathArrayProducer;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        f3 := @parameter5: float;

        f4 := @parameter6: float;

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void command(short)>(11);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f0);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f1);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f2);

        if z0 == 0 goto label1;

        $f5 = 1.0F;

        goto label2;

     label1:
        $f5 = 0.0F;

     label2:
        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>($f5);

        if z1 == 0 goto label3;

        $f6 = 1.0F;

        goto label4;

     label3:
        $f6 = 0.0F;

     label4:
        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>($f6);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f3);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f4);

        return;
    }

    public void arcAbs(float, float, float, boolean, boolean, float, float) throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.parser.PathArrayProducer r0;
        float f0, f1, f2, f3, f4, $f5, $f6;
        boolean z0, z1;

        r0 := @this: org.apache.batik.parser.PathArrayProducer;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        f3 := @parameter5: float;

        f4 := @parameter6: float;

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void command(short)>(10);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f0);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f1);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f2);

        if z0 == 0 goto label1;

        $f5 = 1.0F;

        goto label2;

     label1:
        $f5 = 0.0F;

     label2:
        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>($f5);

        if z1 == 0 goto label3;

        $f6 = 1.0F;

        goto label4;

     label3:
        $f6 = 0.0F;

     label4:
        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>($f6);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f3);

        virtualinvoke r0.<org.apache.batik.parser.PathArrayProducer: void param(float)>(f4);

        return;
    }

    protected void command(short) throws org.apache.batik.parser.ParseException
    {
        short s4;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9;
        java.util.LinkedList $r4;
        org.apache.batik.parser.PathArrayProducer r0;
        short[] $r1, $r2, $r3, $r5, $r6;

        r0 := @this: org.apache.batik.parser.PathArrayProducer;

        s4 := @parameter0: short;

        $i1 = r0.<org.apache.batik.parser.PathArrayProducer: int cindex>;

        $r1 = r0.<org.apache.batik.parser.PathArrayProducer: short[] c>;

        $i0 = lengthof $r1;

        if $i1 != $i0 goto label1;

        $r4 = r0.<org.apache.batik.parser.PathArrayProducer: java.util.LinkedList cs>;

        $r3 = r0.<org.apache.batik.parser.PathArrayProducer: short[] c>;

        virtualinvoke $r4.<java.util.LinkedList: boolean add(java.lang.Object)>($r3);

        $r5 = r0.<org.apache.batik.parser.PathArrayProducer: short[] c>;

        $i7 = lengthof $r5;

        $i8 = $i7 * 2;

        $i9 = $i8 + 1;

        $r6 = newarray (short)[$i9];

        r0.<org.apache.batik.parser.PathArrayProducer: short[] c> = $r6;

        r0.<org.apache.batik.parser.PathArrayProducer: int cindex> = 0;

     label1:
        $r2 = r0.<org.apache.batik.parser.PathArrayProducer: short[] c>;

        $i2 = r0.<org.apache.batik.parser.PathArrayProducer: int cindex>;

        $i3 = $i2 + 1;

        r0.<org.apache.batik.parser.PathArrayProducer: int cindex> = $i3;

        $r2[$i2] = s4;

        $i5 = r0.<org.apache.batik.parser.PathArrayProducer: int ccount>;

        $i6 = $i5 + 1;

        r0.<org.apache.batik.parser.PathArrayProducer: int ccount> = $i6;

        return;
    }

    protected void param(float) throws org.apache.batik.parser.ParseException
    {
        float[] $r1, $r2, $r3, $r5, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.util.LinkedList $r4;
        org.apache.batik.parser.PathArrayProducer r0;
        float f0;

        r0 := @this: org.apache.batik.parser.PathArrayProducer;

        f0 := @parameter0: float;

        $i1 = r0.<org.apache.batik.parser.PathArrayProducer: int pindex>;

        $r1 = r0.<org.apache.batik.parser.PathArrayProducer: float[] p>;

        $i0 = lengthof $r1;

        if $i1 != $i0 goto label1;

        $r4 = r0.<org.apache.batik.parser.PathArrayProducer: java.util.LinkedList ps>;

        $r3 = r0.<org.apache.batik.parser.PathArrayProducer: float[] p>;

        virtualinvoke $r4.<java.util.LinkedList: boolean add(java.lang.Object)>($r3);

        $r5 = r0.<org.apache.batik.parser.PathArrayProducer: float[] p>;

        $i6 = lengthof $r5;

        $i7 = $i6 * 2;

        $i8 = $i7 + 1;

        $r6 = newarray (float)[$i8];

        r0.<org.apache.batik.parser.PathArrayProducer: float[] p> = $r6;

        r0.<org.apache.batik.parser.PathArrayProducer: int pindex> = 0;

     label1:
        $r2 = r0.<org.apache.batik.parser.PathArrayProducer: float[] p>;

        $i2 = r0.<org.apache.batik.parser.PathArrayProducer: int pindex>;

        $i3 = $i2 + 1;

        r0.<org.apache.batik.parser.PathArrayProducer: int pindex> = $i3;

        $r2[$i2] = f0;

        $i4 = r0.<org.apache.batik.parser.PathArrayProducer: int pcount>;

        $i5 = $i4 + 1;

        r0.<org.apache.batik.parser.PathArrayProducer: int pcount> = $i5;

        return;
    }

    public void endPath() throws org.apache.batik.parser.ParseException
    {
        float[] r10, $r11, r14;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9;
        java.util.LinkedList $r2, $r6, $r7, $r12;
        boolean $z0, $z1;
        org.apache.batik.parser.PathArrayProducer r0;
        java.util.Iterator $r3, $r8;
        java.lang.Object $r4, $r9;
        short[] r1, $r5, r13;

        r0 := @this: org.apache.batik.parser.PathArrayProducer;

        $i0 = r0.<org.apache.batik.parser.PathArrayProducer: int ccount>;

        r1 = newarray (short)[$i0];

        i8 = 0;

        $r2 = r0.<org.apache.batik.parser.PathArrayProducer: java.util.LinkedList cs>;

        $r3 = virtualinvoke $r2.<java.util.AbstractSequentialList: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r13 = (short[]) $r4;

        $i1 = lengthof r13;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r13, 0, r1, i8, $i1);

        $i2 = lengthof r13;

        i8 = i8 + $i2;

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r5 = r0.<org.apache.batik.parser.PathArrayProducer: short[] c>;

        $i3 = r0.<org.apache.batik.parser.PathArrayProducer: int cindex>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r1, i8, $i3);

        $r6 = r0.<org.apache.batik.parser.PathArrayProducer: java.util.LinkedList cs>;

        virtualinvoke $r6.<java.util.LinkedList: void clear()>();

        r0.<org.apache.batik.parser.PathArrayProducer: short[] c> = r1;

        $i4 = r0.<org.apache.batik.parser.PathArrayProducer: int pcount>;

        r14 = newarray (float)[$i4];

        i9 = 0;

        $r7 = r0.<org.apache.batik.parser.PathArrayProducer: java.util.LinkedList ps>;

        $r8 = virtualinvoke $r7.<java.util.AbstractSequentialList: java.util.Iterator iterator()>();

        goto label4;

     label3:
        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (float[]) $r9;

        $i5 = lengthof r10;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r10, 0, r14, i9, $i5);

        $i6 = lengthof r10;

        i9 = i9 + $i6;

     label4:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label3;

        $r11 = r0.<org.apache.batik.parser.PathArrayProducer: float[] p>;

        $i7 = r0.<org.apache.batik.parser.PathArrayProducer: int pindex>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, 0, r14, i9, $i7);

        $r12 = r0.<org.apache.batik.parser.PathArrayProducer: java.util.LinkedList ps>;

        virtualinvoke $r12.<java.util.LinkedList: void clear()>();

        r0.<org.apache.batik.parser.PathArrayProducer: float[] p> = r14;

        return;
    }
}
