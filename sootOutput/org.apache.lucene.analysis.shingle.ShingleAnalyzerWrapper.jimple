public final class org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper extends org.apache.lucene.analysis.AnalyzerWrapper
{
    private final org.apache.lucene.analysis.Analyzer defaultAnalyzer;
    private final int maxShingleSize;
    private final int minShingleSize;
    private final java.lang.String tokenSeparator;
    private final boolean outputUnigrams;
    private final boolean outputUnigramsIfNoShingles;

    public void <init>(org.apache.lucene.analysis.Analyzer)
    {
        org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper r0;
        org.apache.lucene.analysis.Analyzer r1;

        r0 := @this: org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper;

        r1 := @parameter0: org.apache.lucene.analysis.Analyzer;

        specialinvoke r0.<org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper: void <init>(org.apache.lucene.analysis.Analyzer,int)>(r1, 2);

        return;
    }

    public void <init>(org.apache.lucene.analysis.Analyzer, int)
    {
        int i0;
        org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper r0;
        org.apache.lucene.analysis.Analyzer r1;

        r0 := @this: org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper;

        r1 := @parameter0: org.apache.lucene.analysis.Analyzer;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper: void <init>(org.apache.lucene.analysis.Analyzer,int,int)>(r1, 2, i0);

        return;
    }

    public void <init>(org.apache.lucene.analysis.Analyzer, int, int)
    {
        org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper r0;
        org.apache.lucene.analysis.Analyzer r1;
        int i0, i1;

        r0 := @this: org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper;

        r1 := @parameter0: org.apache.lucene.analysis.Analyzer;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper: void <init>(org.apache.lucene.analysis.Analyzer,int,int,java.lang.String,boolean,boolean)>(r1, i0, i1, " ", 1, 0);

        return;
    }

    public void <init>(org.apache.lucene.analysis.Analyzer, int, int, java.lang.String, boolean, boolean)
    {
        org.apache.lucene.analysis.Analyzer r1;
        java.lang.IllegalArgumentException $r3, $r4, $r5;
        org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper r0;
        int i0, i1;
        java.lang.String r2, $r6;
        boolean z0, z1;

        r0 := @this: org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper;

        r1 := @parameter0: org.apache.lucene.analysis.Analyzer;

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        z0 := @parameter4: boolean;

        z1 := @parameter5: boolean;

        specialinvoke r0.<org.apache.lucene.analysis.AnalyzerWrapper: void <init>()>();

        r0.<org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper: org.apache.lucene.analysis.Analyzer defaultAnalyzer> = r1;

        if i0 >= 2 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Max shingle size must be >= 2");

        throw $r5;

     label1:
        r0.<org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper: int maxShingleSize> = i0;

        if i1 >= 2 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Min shingle size must be >= 2");

        throw $r4;

     label2:
        if i1 <= i0 goto label3;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Min shingle size must be <= max shingle size");

        throw $r3;

     label3:
        r0.<org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper: int minShingleSize> = i1;

        if r2 != null goto label4;

        $r6 = "";

        goto label5;

     label4:
        $r6 = r2;

     label5:
        r0.<org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper: java.lang.String tokenSeparator> = $r6;

        r0.<org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper: boolean outputUnigrams> = z0;

        r0.<org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper: boolean outputUnigramsIfNoShingles> = z1;

        return;
    }

    public void <init>(org.apache.lucene.util.Version)
    {
        org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper r0;
        org.apache.lucene.util.Version r1;

        r0 := @this: org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper;

        r1 := @parameter0: org.apache.lucene.util.Version;

        specialinvoke r0.<org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper: void <init>(org.apache.lucene.util.Version,int,int)>(r1, 2, 2);

        return;
    }

    public void <init>(org.apache.lucene.util.Version, int, int)
    {
        org.apache.lucene.analysis.standard.StandardAnalyzer $r1;
        org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper r0;
        int i0, i1;
        org.apache.lucene.util.Version r2;

        r0 := @this: org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper;

        r2 := @parameter0: org.apache.lucene.util.Version;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = new org.apache.lucene.analysis.standard.StandardAnalyzer;

        specialinvoke $r1.<org.apache.lucene.analysis.standard.StandardAnalyzer: void <init>(org.apache.lucene.util.Version)>(r2);

        specialinvoke r0.<org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper: void <init>(org.apache.lucene.analysis.Analyzer,int,int)>($r1, i0, i1);

        return;
    }

    public int getMaxShingleSize()
    {
        int $i0;
        org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper r0;

        r0 := @this: org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper;

        $i0 = r0.<org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper: int maxShingleSize>;

        return $i0;
    }

    public int getMinShingleSize()
    {
        int $i0;
        org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper r0;

        r0 := @this: org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper;

        $i0 = r0.<org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper: int minShingleSize>;

        return $i0;
    }

    public java.lang.String getTokenSeparator()
    {
        java.lang.String $r1;
        org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper r0;

        r0 := @this: org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper;

        $r1 = r0.<org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper: java.lang.String tokenSeparator>;

        return $r1;
    }

    public boolean isOutputUnigrams()
    {
        org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper;

        $z0 = r0.<org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper: boolean outputUnigrams>;

        return $z0;
    }

    public boolean isOutputUnigramsIfNoShingles()
    {
        org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper;

        $z0 = r0.<org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper: boolean outputUnigramsIfNoShingles>;

        return $z0;
    }

    protected org.apache.lucene.analysis.Analyzer getWrappedAnalyzer(java.lang.String)
    {
        java.lang.String r2;
        org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper r0;
        org.apache.lucene.analysis.Analyzer $r1;

        r0 := @this: org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper: org.apache.lucene.analysis.Analyzer defaultAnalyzer>;

        return $r1;
    }

    protected org.apache.lucene.analysis.Analyzer$TokenStreamComponents wrapComponents(java.lang.String, org.apache.lucene.analysis.Analyzer$TokenStreamComponents)
    {
        org.apache.lucene.analysis.Tokenizer $r6;
        org.apache.lucene.analysis.TokenStream $r2;
        org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper r3;
        org.apache.lucene.analysis.Analyzer$TokenStreamComponents r1, $r5;
        org.apache.lucene.analysis.shingle.ShingleFilter $r0;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r4, r7;
        boolean $z0, $z1;

        r3 := @this: org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper;

        r7 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.lucene.analysis.Analyzer$TokenStreamComponents;

        $r0 = new org.apache.lucene.analysis.shingle.ShingleFilter;

        $r2 = virtualinvoke r1.<org.apache.lucene.analysis.Analyzer$TokenStreamComponents: org.apache.lucene.analysis.TokenStream getTokenStream()>();

        $i1 = r3.<org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper: int minShingleSize>;

        $i0 = r3.<org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper: int maxShingleSize>;

        specialinvoke $r0.<org.apache.lucene.analysis.shingle.ShingleFilter: void <init>(org.apache.lucene.analysis.TokenStream,int,int)>($r2, $i1, $i0);

        $i2 = r3.<org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper: int minShingleSize>;

        virtualinvoke $r0.<org.apache.lucene.analysis.shingle.ShingleFilter: void setMinShingleSize(int)>($i2);

        $i3 = r3.<org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper: int maxShingleSize>;

        virtualinvoke $r0.<org.apache.lucene.analysis.shingle.ShingleFilter: void setMaxShingleSize(int)>($i3);

        $r4 = r3.<org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper: java.lang.String tokenSeparator>;

        virtualinvoke $r0.<org.apache.lucene.analysis.shingle.ShingleFilter: void setTokenSeparator(java.lang.String)>($r4);

        $z0 = r3.<org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper: boolean outputUnigrams>;

        virtualinvoke $r0.<org.apache.lucene.analysis.shingle.ShingleFilter: void setOutputUnigrams(boolean)>($z0);

        $z1 = r3.<org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper: boolean outputUnigramsIfNoShingles>;

        virtualinvoke $r0.<org.apache.lucene.analysis.shingle.ShingleFilter: void setOutputUnigramsIfNoShingles(boolean)>($z1);

        $r5 = new org.apache.lucene.analysis.Analyzer$TokenStreamComponents;

        $r6 = virtualinvoke r1.<org.apache.lucene.analysis.Analyzer$TokenStreamComponents: org.apache.lucene.analysis.Tokenizer getTokenizer()>();

        specialinvoke $r5.<org.apache.lucene.analysis.Analyzer$TokenStreamComponents: void <init>(org.apache.lucene.analysis.Tokenizer,org.apache.lucene.analysis.TokenStream)>($r6, $r0);

        return $r5;
    }
}
