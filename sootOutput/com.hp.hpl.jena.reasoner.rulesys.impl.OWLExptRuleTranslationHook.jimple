public class com.hp.hpl.jena.reasoner.rulesys.impl.OWLExptRuleTranslationHook extends java.lang.Object implements com.hp.hpl.jena.reasoner.rulesys.RulePreprocessHook
{

    public void <init>()
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.OWLExptRuleTranslationHook r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.OWLExptRuleTranslationHook;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run(com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph, com.hp.hpl.jena.reasoner.Finder, com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r18;
        com.hp.hpl.jena.graph.Node $r3, $r7, $r9, $r16, $r24, $r28, r31;
        com.hp.hpl.jena.rdf.model.Property $r2, $r15, $r23, $r27;
        boolean $z0, $z1;
        com.hp.hpl.jena.graph.Triple r6;
        com.hp.hpl.jena.reasoner.TriplePattern $r1, $r14, $r22, $r26;
        com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] $r21, $r25;
        java.util.ArrayList $r8, $r10, $r13;
        com.hp.hpl.jena.graph.Graph r30;
        com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable $r11;
        java.util.Iterator $r12;
        com.hp.hpl.jena.reasoner.rulesys.Rule $r17, $r20;
        com.hp.hpl.jena.reasoner.Finder r0;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r4;
        java.lang.Object $r5, $r19;
        com.hp.hpl.jena.reasoner.rulesys.impl.OWLExptRuleTranslationHook r29;

        r29 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.OWLExptRuleTranslationHook;

        r18 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        r0 := @parameter1: com.hp.hpl.jena.reasoner.Finder;

        r30 := @parameter2: com.hp.hpl.jena.graph.Graph;

        $r1 = new com.hp.hpl.jena.reasoner.TriplePattern;

        $r2 = <com.hp.hpl.jena.vocabulary.OWL: com.hp.hpl.jena.rdf.model.Property intersectionOf>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.Property: com.hp.hpl.jena.graph.Node asNode()>();

        specialinvoke $r1.<com.hp.hpl.jena.reasoner.TriplePattern: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(null, $r3, null);

        $r4 = interfaceinvoke r0.<com.hp.hpl.jena.reasoner.Finder: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.reasoner.TriplePattern)>($r1);

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.hp.hpl.jena.graph.Triple) $r5;

        $r7 = virtualinvoke r6.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        $r9 = virtualinvoke r6.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        staticinvoke <com.hp.hpl.jena.reasoner.rulesys.impl.OWLExptRuleTranslationHook: void translateIntersectionList(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.reasoner.Finder,java.util.List)>($r9, r0, $r8);

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        $r11 = new com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        specialinvoke $r11.<com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: void <init>(java.lang.String,int)>("?x", 0);

        $r12 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r19 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r31 = (com.hp.hpl.jena.graph.Node) $r19;

        $r20 = new com.hp.hpl.jena.reasoner.rulesys.Rule;

        $r21 = newarray (com.hp.hpl.jena.reasoner.rulesys.ClauseEntry)[1];

        $r22 = new com.hp.hpl.jena.reasoner.TriplePattern;

        $r23 = <com.hp.hpl.jena.vocabulary.RDFS: com.hp.hpl.jena.rdf.model.Property subClassOf>;

        $r24 = interfaceinvoke $r23.<com.hp.hpl.jena.rdf.model.Property: com.hp.hpl.jena.graph.Node asNode()>();

        specialinvoke $r22.<com.hp.hpl.jena.reasoner.TriplePattern: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r7, $r24, r31);

        $r21[0] = $r22;

        $r25 = newarray (com.hp.hpl.jena.reasoner.rulesys.ClauseEntry)[0];

        specialinvoke $r20.<com.hp.hpl.jena.reasoner.rulesys.Rule: void <init>(java.lang.String,com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[],com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[])>("intersectionImplication", $r21, $r25);

        virtualinvoke $r20.<com.hp.hpl.jena.reasoner.rulesys.Rule: void setBackward(boolean)>(0);

        virtualinvoke r18.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: void addRuleDuringPrepare(com.hp.hpl.jena.reasoner.rulesys.Rule)>($r20);

        $r26 = new com.hp.hpl.jena.reasoner.TriplePattern;

        $r27 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        $r28 = interfaceinvoke $r27.<com.hp.hpl.jena.rdf.model.Property: com.hp.hpl.jena.graph.Node asNode()>();

        specialinvoke $r26.<com.hp.hpl.jena.reasoner.TriplePattern: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r11, $r28, r31);

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r26);

        goto label2;

     label3:
        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>(int)>(1);

        $r14 = new com.hp.hpl.jena.reasoner.TriplePattern;

        $r15 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        $r16 = interfaceinvoke $r15.<com.hp.hpl.jena.rdf.model.Property: com.hp.hpl.jena.graph.Node asNode()>();

        specialinvoke $r14.<com.hp.hpl.jena.reasoner.TriplePattern: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r11, $r16, $r7);

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>($r14);

        $r17 = new com.hp.hpl.jena.reasoner.rulesys.Rule;

        specialinvoke $r17.<com.hp.hpl.jena.reasoner.rulesys.Rule: void <init>(java.lang.String,java.util.List,java.util.List)>("intersectionRecognition", $r13, $r10);

        virtualinvoke $r17.<com.hp.hpl.jena.reasoner.rulesys.Rule: void setBackward(boolean)>(1);

        virtualinvoke r18.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: void addRuleDuringPrepare(com.hp.hpl.jena.reasoner.rulesys.Rule)>($r17);

        goto label1;

     label4:
        return;
    }

    protected static void translateIntersectionList(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.reasoner.Finder, java.util.List)
    {
        com.hp.hpl.jena.graph.Node r0, $r2, $r4, $r6, $r9, $r10;
        com.hp.hpl.jena.rdf.model.Resource $r1;
        java.util.List r7;
        com.hp.hpl.jena.reasoner.Finder r5;
        com.hp.hpl.jena.rdf.model.Property $r3, $r8;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r5 := @parameter1: com.hp.hpl.jena.reasoner.Finder;

        r7 := @parameter2: java.util.List;

        $r1 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Resource nil>;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.graph.Node asNode()>();

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property first>;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.Property: com.hp.hpl.jena.graph.Node asNode()>();

        $r6 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Util: com.hp.hpl.jena.graph.Node getPropValue(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.reasoner.Finder)>(r0, $r4, r5);

        interfaceinvoke r7.<java.util.List: boolean add(java.lang.Object)>($r6);

        $r8 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property rest>;

        $r9 = interfaceinvoke $r8.<com.hp.hpl.jena.rdf.model.Property: com.hp.hpl.jena.graph.Node asNode()>();

        $r10 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Util: com.hp.hpl.jena.graph.Node getPropValue(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.reasoner.Finder)>(r0, $r9, r5);

        staticinvoke <com.hp.hpl.jena.reasoner.rulesys.impl.OWLExptRuleTranslationHook: void translateIntersectionList(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.reasoner.Finder,java.util.List)>($r10, r5, r7);

        return;
    }

    public boolean needsRerun(com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph, com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r5;
        com.hp.hpl.jena.rdf.model.Property $r2;
        com.hp.hpl.jena.graph.Node $r1, $r3;
        com.hp.hpl.jena.graph.Triple r0;
        boolean $z0;
        com.hp.hpl.jena.reasoner.rulesys.impl.OWLExptRuleTranslationHook r4;

        r4 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.OWLExptRuleTranslationHook;

        r5 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        r0 := @parameter1: com.hp.hpl.jena.graph.Triple;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r2 = <com.hp.hpl.jena.vocabulary.OWL: com.hp.hpl.jena.rdf.model.Property intersectionOf>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.Property: com.hp.hpl.jena.graph.Node asNode()>();

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r3);

        return $z0;
    }
}
