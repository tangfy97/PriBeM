final class org.apache.lucene.util.StringHelper$1 extends java.lang.Object implements java.util.Comparator
{

    void <init>()
    {
        org.apache.lucene.util.StringHelper$1 r0;

        r0 := @this: org.apache.lucene.util.StringHelper$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int compare(java.lang.String, java.lang.String)
    {
        byte $b3;
        java.util.StringTokenizer $r8, $r9;
        int $i0, $i1, $i2, $i5;
        java.lang.String r1, r3, $r4, $r5, $r6;
        boolean $z0, $z1, $z2;
        org.apache.lucene.util.StringHelper$1 r7;

        r7 := @this: org.apache.lucene.util.StringHelper$1;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r8 = new java.util.StringTokenizer;

        specialinvoke $r8.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r1, ".");

        $r9 = new java.util.StringTokenizer;

        specialinvoke $r9.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r3, ".");

     label1:
        $z0 = virtualinvoke $r8.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label7;

        $r5 = virtualinvoke $r8.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r5);

        $z2 = virtualinvoke $r9.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z2 == 0 goto label5;

        $r6 = virtualinvoke $r9.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r6);

        if $i1 == $i2 goto label4;

        if $i1 >= $i2 goto label2;

        $b3 = -1;

        goto label3;

     label2:
        $b3 = 1;

     label3:
        return $b3;

     label4:
        goto label6;

     label5:
        if $i1 == 0 goto label6;

        return 1;

     label6:
        goto label1;

     label7:
        $z1 = virtualinvoke $r9.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z1 == 0 goto label8;

        $r4 = virtualinvoke $r9.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

        if $i0 == 0 goto label7;

        $i5 = (int) -1;

        return $i5;

     label8:
        return 0;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        int $i0;
        java.lang.Object r1, r2;
        java.lang.String $r3, $r4;
        org.apache.lucene.util.StringHelper$1 r0;

        r0 := @this: org.apache.lucene.util.StringHelper$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.lang.String) r1;

        $r3 = (java.lang.String) r2;

        $i0 = virtualinvoke r0.<org.apache.lucene.util.StringHelper$1: int compare(java.lang.String,java.lang.String)>($r4, $r3);

        return $i0;
    }
}
