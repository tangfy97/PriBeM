public final enum class org.xmpp.packet.PacketError$Type extends java.lang.Enum
{
    public static final enum org.xmpp.packet.PacketError$Type cancel;
    public static final enum org.xmpp.packet.PacketError$Type continue_processing;
    public static final enum org.xmpp.packet.PacketError$Type modify;
    public static final enum org.xmpp.packet.PacketError$Type auth;
    public static final enum org.xmpp.packet.PacketError$Type wait;
    private java.lang.String value;
    private static final org.xmpp.packet.PacketError$Type[] $VALUES;

    public static org.xmpp.packet.PacketError$Type[] values()
    {
        java.lang.Object $r1;
        org.xmpp.packet.PacketError$Type[] $r0, $r2;

        $r0 = <org.xmpp.packet.PacketError$Type: org.xmpp.packet.PacketError$Type[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (org.xmpp.packet.PacketError$Type[]) $r1;

        return $r2;
    }

    public static org.xmpp.packet.PacketError$Type valueOf(java.lang.String)
    {
        org.xmpp.packet.PacketError$Type $r2;
        java.lang.String r0;
        java.lang.Enum $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/xmpp/packet/PacketError$Type;", r0);

        $r2 = (org.xmpp.packet.PacketError$Type) $r1;

        return $r2;
    }

    public static org.xmpp.packet.PacketError$Type fromXMPP(java.lang.String)
    {
        java.lang.NullPointerException $r21;
        org.xmpp.packet.PacketError$Type $r1, $r3, $r5, $r7, $r9, $r16, $r17, $r18, $r19, $r20;
        java.lang.String $r0, $r2, $r4, $r6, $r8, $r10, $r15, r22;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.IllegalArgumentException $r11;
        java.lang.StringBuilder $r12, $r13, $r14;

        r22 := @parameter0: java.lang.String;

        if r22 != null goto label1;

        $r21 = new java.lang.NullPointerException;

        specialinvoke $r21.<java.lang.NullPointerException: void <init>()>();

        throw $r21;

     label1:
        $r0 = virtualinvoke r22.<java.lang.String: java.lang.String toLowerCase()>();

        $r1 = <org.xmpp.packet.PacketError$Type: org.xmpp.packet.PacketError$Type cancel>;

        $r2 = virtualinvoke $r1.<org.xmpp.packet.PacketError$Type: java.lang.String toXMPP()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label2;

        $r20 = <org.xmpp.packet.PacketError$Type: org.xmpp.packet.PacketError$Type cancel>;

        return $r20;

     label2:
        $r3 = <org.xmpp.packet.PacketError$Type: org.xmpp.packet.PacketError$Type continue_processing>;

        $r4 = virtualinvoke $r3.<org.xmpp.packet.PacketError$Type: java.lang.String toXMPP()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z1 == 0 goto label3;

        $r19 = <org.xmpp.packet.PacketError$Type: org.xmpp.packet.PacketError$Type continue_processing>;

        return $r19;

     label3:
        $r5 = <org.xmpp.packet.PacketError$Type: org.xmpp.packet.PacketError$Type modify>;

        $r6 = virtualinvoke $r5.<org.xmpp.packet.PacketError$Type: java.lang.String toXMPP()>();

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z2 == 0 goto label4;

        $r18 = <org.xmpp.packet.PacketError$Type: org.xmpp.packet.PacketError$Type modify>;

        return $r18;

     label4:
        $r7 = <org.xmpp.packet.PacketError$Type: org.xmpp.packet.PacketError$Type auth>;

        $r8 = virtualinvoke $r7.<org.xmpp.packet.PacketError$Type: java.lang.String toXMPP()>();

        $z3 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z3 == 0 goto label5;

        $r17 = <org.xmpp.packet.PacketError$Type: org.xmpp.packet.PacketError$Type auth>;

        return $r17;

     label5:
        $r9 = <org.xmpp.packet.PacketError$Type: org.xmpp.packet.PacketError$Type wait>;

        $r10 = virtualinvoke $r9.<org.xmpp.packet.PacketError$Type: java.lang.String toXMPP()>();

        $z4 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z4 == 0 goto label6;

        $r16 = <org.xmpp.packet.PacketError$Type: org.xmpp.packet.PacketError$Type wait>;

        return $r16;

     label6:
        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type invalid:");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r11;
    }

    private void <init>(java.lang.String, int, java.lang.String)
    {
        int i0;
        org.xmpp.packet.PacketError$Type r0;
        java.lang.String r1, r2;

        r0 := @this: org.xmpp.packet.PacketError$Type;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        r0.<org.xmpp.packet.PacketError$Type: java.lang.String value> = r2;

        return;
    }

    public java.lang.String toXMPP()
    {
        org.xmpp.packet.PacketError$Type r0;
        java.lang.String $r1;

        r0 := @this: org.xmpp.packet.PacketError$Type;

        $r1 = r0.<org.xmpp.packet.PacketError$Type: java.lang.String value>;

        return $r1;
    }

    static void <clinit>()
    {
        org.xmpp.packet.PacketError$Type[] $r5;
        org.xmpp.packet.PacketError$Type $r0, $r1, $r2, $r3, $r4, $r6, $r7, $r8, $r9, $r10;

        $r0 = new org.xmpp.packet.PacketError$Type;

        specialinvoke $r0.<org.xmpp.packet.PacketError$Type: void <init>(java.lang.String,int,java.lang.String)>("cancel", 0, "cancel");

        <org.xmpp.packet.PacketError$Type: org.xmpp.packet.PacketError$Type cancel> = $r0;

        $r1 = new org.xmpp.packet.PacketError$Type;

        specialinvoke $r1.<org.xmpp.packet.PacketError$Type: void <init>(java.lang.String,int,java.lang.String)>("continue_processing", 1, "continue");

        <org.xmpp.packet.PacketError$Type: org.xmpp.packet.PacketError$Type continue_processing> = $r1;

        $r2 = new org.xmpp.packet.PacketError$Type;

        specialinvoke $r2.<org.xmpp.packet.PacketError$Type: void <init>(java.lang.String,int,java.lang.String)>("modify", 2, "modify");

        <org.xmpp.packet.PacketError$Type: org.xmpp.packet.PacketError$Type modify> = $r2;

        $r3 = new org.xmpp.packet.PacketError$Type;

        specialinvoke $r3.<org.xmpp.packet.PacketError$Type: void <init>(java.lang.String,int,java.lang.String)>("auth", 3, "auth");

        <org.xmpp.packet.PacketError$Type: org.xmpp.packet.PacketError$Type auth> = $r3;

        $r4 = new org.xmpp.packet.PacketError$Type;

        specialinvoke $r4.<org.xmpp.packet.PacketError$Type: void <init>(java.lang.String,int,java.lang.String)>("wait", 4, "wait");

        <org.xmpp.packet.PacketError$Type: org.xmpp.packet.PacketError$Type wait> = $r4;

        $r5 = newarray (org.xmpp.packet.PacketError$Type)[5];

        $r6 = <org.xmpp.packet.PacketError$Type: org.xmpp.packet.PacketError$Type cancel>;

        $r5[0] = $r6;

        $r7 = <org.xmpp.packet.PacketError$Type: org.xmpp.packet.PacketError$Type continue_processing>;

        $r5[1] = $r7;

        $r8 = <org.xmpp.packet.PacketError$Type: org.xmpp.packet.PacketError$Type modify>;

        $r5[2] = $r8;

        $r9 = <org.xmpp.packet.PacketError$Type: org.xmpp.packet.PacketError$Type auth>;

        $r5[3] = $r9;

        $r10 = <org.xmpp.packet.PacketError$Type: org.xmpp.packet.PacketError$Type wait>;

        $r5[4] = $r10;

        <org.xmpp.packet.PacketError$Type: org.xmpp.packet.PacketError$Type[] $VALUES> = $r5;

        return;
    }
}
