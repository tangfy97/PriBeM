public class org.apache.tika.detect.DefaultDetector extends org.apache.tika.detect.CompositeDetector
{
    private static final long serialVersionUID;
    private final transient org.apache.tika.config.ServiceLoader loader;

    private static java.util.List getDefaultDetectors(org.apache.tika.mime.MimeTypes, org.apache.tika.config.ServiceLoader)
    {
        org.apache.tika.config.ServiceLoader r0;
        java.util.List $r1;
        org.apache.tika.mime.MimeTypes r3;
        org.apache.tika.detect.DefaultDetector$1 $r2;

        r3 := @parameter0: org.apache.tika.mime.MimeTypes;

        r0 := @parameter1: org.apache.tika.config.ServiceLoader;

        $r1 = virtualinvoke r0.<org.apache.tika.config.ServiceLoader: java.util.List loadStaticServiceProviders(java.lang.Class)>(class "Lorg/apache/tika/detect/Detector;");

        $r2 = new org.apache.tika.detect.DefaultDetector$1;

        specialinvoke $r2.<org.apache.tika.detect.DefaultDetector$1: void <init>()>();

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r1, $r2);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(r3);

        return $r1;
    }

    public void <init>(org.apache.tika.mime.MimeTypes, org.apache.tika.config.ServiceLoader)
    {
        org.apache.tika.config.ServiceLoader r3;
        java.util.List $r4;
        org.apache.tika.mime.MediaTypeRegistry $r2;
        org.apache.tika.mime.MimeTypes r1;
        org.apache.tika.detect.DefaultDetector r0;

        r0 := @this: org.apache.tika.detect.DefaultDetector;

        r1 := @parameter0: org.apache.tika.mime.MimeTypes;

        r3 := @parameter1: org.apache.tika.config.ServiceLoader;

        $r2 = virtualinvoke r1.<org.apache.tika.mime.MimeTypes: org.apache.tika.mime.MediaTypeRegistry getMediaTypeRegistry()>();

        $r4 = staticinvoke <org.apache.tika.detect.DefaultDetector: java.util.List getDefaultDetectors(org.apache.tika.mime.MimeTypes,org.apache.tika.config.ServiceLoader)>(r1, r3);

        specialinvoke r0.<org.apache.tika.detect.CompositeDetector: void <init>(org.apache.tika.mime.MediaTypeRegistry,java.util.List)>($r2, $r4);

        r0.<org.apache.tika.detect.DefaultDetector: org.apache.tika.config.ServiceLoader loader> = r3;

        return;
    }

    public void <init>(org.apache.tika.mime.MimeTypes, java.lang.ClassLoader)
    {
        org.apache.tika.config.ServiceLoader $r2;
        org.apache.tika.mime.MimeTypes r1;
        java.lang.ClassLoader r3;
        org.apache.tika.detect.DefaultDetector r0;

        r0 := @this: org.apache.tika.detect.DefaultDetector;

        r1 := @parameter0: org.apache.tika.mime.MimeTypes;

        r3 := @parameter1: java.lang.ClassLoader;

        $r2 = new org.apache.tika.config.ServiceLoader;

        specialinvoke $r2.<org.apache.tika.config.ServiceLoader: void <init>(java.lang.ClassLoader)>(r3);

        specialinvoke r0.<org.apache.tika.detect.DefaultDetector: void <init>(org.apache.tika.mime.MimeTypes,org.apache.tika.config.ServiceLoader)>(r1, $r2);

        return;
    }

    public void <init>(java.lang.ClassLoader)
    {
        org.apache.tika.mime.MimeTypes $r1;
        java.lang.ClassLoader r2;
        org.apache.tika.detect.DefaultDetector r0;

        r0 := @this: org.apache.tika.detect.DefaultDetector;

        r2 := @parameter0: java.lang.ClassLoader;

        $r1 = staticinvoke <org.apache.tika.mime.MimeTypes: org.apache.tika.mime.MimeTypes getDefaultMimeTypes()>();

        specialinvoke r0.<org.apache.tika.detect.DefaultDetector: void <init>(org.apache.tika.mime.MimeTypes,java.lang.ClassLoader)>($r1, r2);

        return;
    }

    public void <init>(org.apache.tika.mime.MimeTypes)
    {
        org.apache.tika.mime.MimeTypes r1;
        org.apache.tika.config.ServiceLoader $r2;
        org.apache.tika.detect.DefaultDetector r0;

        r0 := @this: org.apache.tika.detect.DefaultDetector;

        r1 := @parameter0: org.apache.tika.mime.MimeTypes;

        $r2 = new org.apache.tika.config.ServiceLoader;

        specialinvoke $r2.<org.apache.tika.config.ServiceLoader: void <init>()>();

        specialinvoke r0.<org.apache.tika.detect.DefaultDetector: void <init>(org.apache.tika.mime.MimeTypes,org.apache.tika.config.ServiceLoader)>(r1, $r2);

        return;
    }

    public void <init>()
    {
        org.apache.tika.mime.MimeTypes $r1;
        org.apache.tika.detect.DefaultDetector r0;

        r0 := @this: org.apache.tika.detect.DefaultDetector;

        $r1 = staticinvoke <org.apache.tika.mime.MimeTypes: org.apache.tika.mime.MimeTypes getDefaultMimeTypes()>();

        specialinvoke r0.<org.apache.tika.detect.DefaultDetector: void <init>(org.apache.tika.mime.MimeTypes)>($r1);

        return;
    }

    public java.util.List getDetectors()
    {
        org.apache.tika.config.ServiceLoader $r1, $r3;
        java.util.List $r2, $r4, $r5;
        org.apache.tika.detect.DefaultDetector r0;

        r0 := @this: org.apache.tika.detect.DefaultDetector;

        $r1 = r0.<org.apache.tika.detect.DefaultDetector: org.apache.tika.config.ServiceLoader loader>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.tika.detect.DefaultDetector: org.apache.tika.config.ServiceLoader loader>;

        $r4 = virtualinvoke $r3.<org.apache.tika.config.ServiceLoader: java.util.List loadDynamicServiceProviders(java.lang.Class)>(class "Lorg/apache/tika/detect/Detector;");

        $r5 = specialinvoke r0.<org.apache.tika.detect.CompositeDetector: java.util.List getDetectors()>();

        interfaceinvoke $r4.<java.util.List: boolean addAll(java.util.Collection)>($r5);

        return $r4;

     label1:
        $r2 = specialinvoke r0.<org.apache.tika.detect.CompositeDetector: java.util.List getDetectors()>();

        return $r2;
    }

    public static void <clinit>()
    {
        <org.apache.tika.detect.DefaultDetector: long serialVersionUID> = -8170114575326908027L;

        return;
    }
}
