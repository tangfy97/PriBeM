public class org.apache.poi.hsmf.datatypes.MessageSubmissionChunk extends org.apache.poi.hsmf.datatypes.Chunk
{
    private static org.apache.poi.util.POILogger logger;
    private java.lang.String rawId;
    private java.util.Calendar date;
    private static final java.util.regex.Pattern datePatern;

    public void <init>(java.lang.String, int, org.apache.poi.hsmf.datatypes.Types$MAPIType)
    {
        int i0;
        java.lang.String r1;
        org.apache.poi.hsmf.datatypes.Types$MAPIType r2;
        org.apache.poi.hsmf.datatypes.MessageSubmissionChunk r0;

        r0 := @this: org.apache.poi.hsmf.datatypes.MessageSubmissionChunk;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: org.apache.poi.hsmf.datatypes.Types$MAPIType;

        specialinvoke r0.<org.apache.poi.hsmf.datatypes.Chunk: void <init>(java.lang.String,int,org.apache.poi.hsmf.datatypes.Types$MAPIType)>(r1, i0, r2);

        return;
    }

    public void <init>(int, org.apache.poi.hsmf.datatypes.Types$MAPIType)
    {
        int i0;
        org.apache.poi.hsmf.datatypes.Types$MAPIType r1;
        org.apache.poi.hsmf.datatypes.MessageSubmissionChunk r0;

        r0 := @this: org.apache.poi.hsmf.datatypes.MessageSubmissionChunk;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.poi.hsmf.datatypes.Types$MAPIType;

        specialinvoke r0.<org.apache.poi.hsmf.datatypes.Chunk: void <init>(int,org.apache.poi.hsmf.datatypes.Types$MAPIType)>(i0, r1);

        return;
    }

    public void readValue(java.io.InputStream) throws java.io.IOException
    {
        byte[] $r1;
        java.util.regex.Matcher $r9;
        boolean $z0, $z1;
        org.apache.poi.util.POILogger $r11;
        java.lang.StringBuilder $r12, $r13, $r33;
        java.util.regex.Pattern $r8;
        java.io.UnsupportedEncodingException $r29;
        org.apache.poi.hsmf.datatypes.MessageSubmissionChunk r2;
        java.lang.String[] $r5;
        java.util.Calendar $r15, $r16, $r18, $r20, $r22, $r24, $r26, $r28;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, $i17;
        java.lang.String $r4, r6, $r7, $r14, $r17, $r19, $r21, $r23, $r25, $r27, $r31;
        java.lang.RuntimeException $r32;
        java.io.InputStream r0;

        r2 := @this: org.apache.poi.hsmf.datatypes.MessageSubmissionChunk;

        r0 := @parameter0: java.io.InputStream;

     label1:
        $r1 = staticinvoke <org.apache.poi.util.IOUtils: byte[] toByteArray(java.io.InputStream)>(r0);

        $r31 = new java.lang.String;

        specialinvoke $r31.<java.lang.String: void <init>(byte[],java.lang.String)>($r1, "ASCII");

        r2.<org.apache.poi.hsmf.datatypes.MessageSubmissionChunk: java.lang.String rawId> = $r31;

     label2:
        goto label4;

     label3:
        $r29 := @caughtexception;

        $r32 = new java.lang.RuntimeException;

        specialinvoke $r32.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Core encoding not found, JVM broken?", $r29);

        throw $r32;

     label4:
        $r4 = r2.<org.apache.poi.hsmf.datatypes.MessageSubmissionChunk: java.lang.String rawId>;

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String[] split(java.lang.String)>(";");

        i0 = lengthof $r5;

        i15 = 0;

     label5:
        if i15 >= i0 goto label8;

        r6 = $r5[i15];

        $z0 = virtualinvoke r6.<java.lang.String: boolean startsWith(java.lang.String)>("l=");

        if $z0 == 0 goto label7;

        $i1 = virtualinvoke r6.<java.lang.String: int indexOf(int)>(45);

        $i17 = (int) -1;

        if $i1 == $i17 goto label7;

        $i2 = virtualinvoke r6.<java.lang.String: int indexOf(int)>(45);

        $i3 = virtualinvoke r6.<java.lang.String: int lastIndexOf(int)>(45);

        if $i2 == $i3 goto label7;

        $i4 = virtualinvoke r6.<java.lang.String: int indexOf(int)>(45);

        $i5 = $i4 + 1;

        $i6 = virtualinvoke r6.<java.lang.String: int lastIndexOf(int)>(45);

        $r7 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int,int)>($i5, $i6);

        $r8 = <org.apache.poi.hsmf.datatypes.MessageSubmissionChunk: java.util.regex.Pattern datePatern>;

        $r9 = virtualinvoke $r8.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r7);

        $z1 = virtualinvoke $r9.<java.util.regex.Matcher: boolean matches()>();

        if $z1 == 0 goto label6;

        $r15 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        r2.<org.apache.poi.hsmf.datatypes.MessageSubmissionChunk: java.util.Calendar date> = $r15;

        $r16 = r2.<org.apache.poi.hsmf.datatypes.MessageSubmissionChunk: java.util.Calendar date>;

        $r17 = virtualinvoke $r9.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r17);

        $i8 = $i7 + 2000;

        virtualinvoke $r16.<java.util.Calendar: void set(int,int)>(1, $i8);

        $r18 = r2.<org.apache.poi.hsmf.datatypes.MessageSubmissionChunk: java.util.Calendar date>;

        $r19 = virtualinvoke $r9.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        $i9 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r19);

        $i10 = $i9 - 1;

        virtualinvoke $r18.<java.util.Calendar: void set(int,int)>(2, $i10);

        $r20 = r2.<org.apache.poi.hsmf.datatypes.MessageSubmissionChunk: java.util.Calendar date>;

        $r21 = virtualinvoke $r9.<java.util.regex.Matcher: java.lang.String group(int)>(3);

        $i11 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r21);

        virtualinvoke $r20.<java.util.Calendar: void set(int,int)>(5, $i11);

        $r22 = r2.<org.apache.poi.hsmf.datatypes.MessageSubmissionChunk: java.util.Calendar date>;

        $r23 = virtualinvoke $r9.<java.util.regex.Matcher: java.lang.String group(int)>(4);

        $i12 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r23);

        virtualinvoke $r22.<java.util.Calendar: void set(int,int)>(11, $i12);

        $r24 = r2.<org.apache.poi.hsmf.datatypes.MessageSubmissionChunk: java.util.Calendar date>;

        $r25 = virtualinvoke $r9.<java.util.regex.Matcher: java.lang.String group(int)>(5);

        $i13 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r25);

        virtualinvoke $r24.<java.util.Calendar: void set(int,int)>(12, $i13);

        $r26 = r2.<org.apache.poi.hsmf.datatypes.MessageSubmissionChunk: java.util.Calendar date>;

        $r27 = virtualinvoke $r9.<java.util.regex.Matcher: java.lang.String group(int)>(6);

        $i14 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r27);

        virtualinvoke $r26.<java.util.Calendar: void set(int,int)>(13, $i14);

        $r28 = r2.<org.apache.poi.hsmf.datatypes.MessageSubmissionChunk: java.util.Calendar date>;

        virtualinvoke $r28.<java.util.Calendar: void set(int,int)>(14, 0);

        goto label7;

     label6:
        $r11 = <org.apache.poi.hsmf.datatypes.MessageSubmissionChunk: org.apache.poi.util.POILogger logger>;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Warning - unable to make sense of date ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(5, $r14);

     label7:
        i15 = i15 + 1;

        goto label5;

     label8:
        return;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public void writeValue(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r3;
        byte[] $r2;
        java.lang.String $r1;
        java.lang.RuntimeException $r5;
        java.io.UnsupportedEncodingException $r4;
        org.apache.poi.hsmf.datatypes.MessageSubmissionChunk r0;

        r0 := @this: org.apache.poi.hsmf.datatypes.MessageSubmissionChunk;

        r3 := @parameter0: java.io.OutputStream;

     label1:
        $r1 = r0.<org.apache.poi.hsmf.datatypes.MessageSubmissionChunk: java.lang.String rawId>;

        $r2 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.lang.String)>("ASCII");

        virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r2);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Core encoding not found, JVM broken?", $r4);

        throw $r5;

     label4:
        return;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public java.util.Calendar getAcceptedAtTime()
    {
        java.util.Calendar $r1;
        org.apache.poi.hsmf.datatypes.MessageSubmissionChunk r0;

        r0 := @this: org.apache.poi.hsmf.datatypes.MessageSubmissionChunk;

        $r1 = r0.<org.apache.poi.hsmf.datatypes.MessageSubmissionChunk: java.util.Calendar date>;

        return $r1;
    }

    public java.lang.String getSubmissionId()
    {
        java.lang.String $r1;
        org.apache.poi.hsmf.datatypes.MessageSubmissionChunk r0;

        r0 := @this: org.apache.poi.hsmf.datatypes.MessageSubmissionChunk;

        $r1 = r0.<org.apache.poi.hsmf.datatypes.MessageSubmissionChunk: java.lang.String rawId>;

        return $r1;
    }

    static void <clinit>()
    {
        org.apache.poi.util.POILogger $r0;
        java.util.regex.Pattern $r1;

        $r0 = staticinvoke <org.apache.poi.util.POILogFactory: org.apache.poi.util.POILogger getLogger(java.lang.Class)>(class "Lorg/apache/poi/hsmf/datatypes/MessageSubmissionChunk;");

        <org.apache.poi.hsmf.datatypes.MessageSubmissionChunk: org.apache.poi.util.POILogger logger> = $r0;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(\\d\\d)(\\d\\d)(\\d\\d)(\\d\\d)(\\d\\d)(\\d\\d)Z?");

        <org.apache.poi.hsmf.datatypes.MessageSubmissionChunk: java.util.regex.Pattern datePatern> = $r1;

        return;
    }
}
