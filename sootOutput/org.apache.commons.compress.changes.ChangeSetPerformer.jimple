public class org.apache.commons.compress.changes.ChangeSetPerformer extends java.lang.Object
{
    private final java.util.Set changes;

    public void <init>(org.apache.commons.compress.changes.ChangeSet)
    {
        java.util.Set $r2;
        org.apache.commons.compress.changes.ChangeSetPerformer r0;
        org.apache.commons.compress.changes.ChangeSet r1;

        r0 := @this: org.apache.commons.compress.changes.ChangeSetPerformer;

        r1 := @parameter0: org.apache.commons.compress.changes.ChangeSet;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = virtualinvoke r1.<org.apache.commons.compress.changes.ChangeSet: java.util.Set getChanges()>();

        r0.<org.apache.commons.compress.changes.ChangeSetPerformer: java.util.Set changes> = $r2;

        return;
    }

    public org.apache.commons.compress.changes.ChangeSetResults perform(org.apache.commons.compress.archivers.ArchiveInputStream, org.apache.commons.compress.archivers.ArchiveOutputStream) throws java.io.IOException
    {
        org.apache.commons.compress.changes.ChangeSetResults $r4;
        org.apache.commons.compress.archivers.ArchiveOutputStream r3;
        org.apache.commons.compress.archivers.ArchiveInputStream r2;
        org.apache.commons.compress.changes.ChangeSetPerformer r0;
        org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveInputStreamIterator $r1;

        r0 := @this: org.apache.commons.compress.changes.ChangeSetPerformer;

        r2 := @parameter0: org.apache.commons.compress.archivers.ArchiveInputStream;

        r3 := @parameter1: org.apache.commons.compress.archivers.ArchiveOutputStream;

        $r1 = new org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveInputStreamIterator;

        specialinvoke $r1.<org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveInputStreamIterator: void <init>(org.apache.commons.compress.archivers.ArchiveInputStream)>(r2);

        $r4 = specialinvoke r0.<org.apache.commons.compress.changes.ChangeSetPerformer: org.apache.commons.compress.changes.ChangeSetResults perform(org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveEntryIterator,org.apache.commons.compress.archivers.ArchiveOutputStream)>($r1, r3);

        return $r4;
    }

    public org.apache.commons.compress.changes.ChangeSetResults perform(org.apache.commons.compress.archivers.zip.ZipFile, org.apache.commons.compress.archivers.ArchiveOutputStream) throws java.io.IOException
    {
        org.apache.commons.compress.changes.ChangeSetResults $r4;
        org.apache.commons.compress.changes.ChangeSetPerformer$ZipFileIterator $r1;
        org.apache.commons.compress.archivers.ArchiveOutputStream r3;
        org.apache.commons.compress.archivers.zip.ZipFile r2;
        org.apache.commons.compress.changes.ChangeSetPerformer r0;

        r0 := @this: org.apache.commons.compress.changes.ChangeSetPerformer;

        r2 := @parameter0: org.apache.commons.compress.archivers.zip.ZipFile;

        r3 := @parameter1: org.apache.commons.compress.archivers.ArchiveOutputStream;

        $r1 = new org.apache.commons.compress.changes.ChangeSetPerformer$ZipFileIterator;

        specialinvoke $r1.<org.apache.commons.compress.changes.ChangeSetPerformer$ZipFileIterator: void <init>(org.apache.commons.compress.archivers.zip.ZipFile)>(r2);

        $r4 = specialinvoke r0.<org.apache.commons.compress.changes.ChangeSetPerformer: org.apache.commons.compress.changes.ChangeSetResults perform(org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveEntryIterator,org.apache.commons.compress.archivers.ArchiveOutputStream)>($r1, r3);

        return $r4;
    }

    private org.apache.commons.compress.changes.ChangeSetResults perform(org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveEntryIterator, org.apache.commons.compress.archivers.ArchiveOutputStream) throws java.io.IOException
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, z11;
        org.apache.commons.compress.changes.ChangeSetResults $r0;
        java.util.Set $r3;
        org.apache.commons.compress.changes.ChangeSetPerformer r2;
        org.apache.commons.compress.changes.Change r21, r34, r35;
        org.apache.commons.compress.archivers.ArchiveOutputStream r7;
        java.lang.StringBuilder $r23, $r25, $r26;
        org.apache.commons.compress.archivers.ArchiveEntry $r9, $r12, $r13, $r15, $r31, $r32;
        org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveEntryIterator r5;
        int $i0, $i1, $i2;
        java.lang.String $r10, $r14, $r17, $r19, $r22, $r24, $r27, $r28, $r33;
        java.util.LinkedHashSet $r1;
        java.util.Iterator $r4, $r6, $r16;
        java.lang.Object $r8, $r20, $r29;
        java.io.InputStream $r11, $r18, $r30;

        r2 := @this: org.apache.commons.compress.changes.ChangeSetPerformer;

        r5 := @parameter0: org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveEntryIterator;

        r7 := @parameter1: org.apache.commons.compress.archivers.ArchiveOutputStream;

        $r0 = new org.apache.commons.compress.changes.ChangeSetResults;

        specialinvoke $r0.<org.apache.commons.compress.changes.ChangeSetResults: void <init>()>();

        $r1 = new java.util.LinkedHashSet;

        $r3 = r2.<org.apache.commons.compress.changes.ChangeSetPerformer: java.util.Set changes>;

        specialinvoke $r1.<java.util.LinkedHashSet: void <init>(java.util.Collection)>($r3);

        $r4 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label03;

        $r29 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r34 = (org.apache.commons.compress.changes.Change) $r29;

        $i2 = virtualinvoke r34.<org.apache.commons.compress.changes.Change: int type()>();

        if $i2 != 2 goto label02;

        $z10 = virtualinvoke r34.<org.apache.commons.compress.changes.Change: boolean isReplaceMode()>();

        if $z10 == 0 goto label02;

        $r30 = virtualinvoke r34.<org.apache.commons.compress.changes.Change: java.io.InputStream getInput()>();

        $r31 = virtualinvoke r34.<org.apache.commons.compress.changes.Change: org.apache.commons.compress.archivers.ArchiveEntry getEntry()>();

        specialinvoke r2.<org.apache.commons.compress.changes.ChangeSetPerformer: void copyStream(java.io.InputStream,org.apache.commons.compress.archivers.ArchiveOutputStream,org.apache.commons.compress.archivers.ArchiveEntry)>($r30, r7, $r31);

        interfaceinvoke $r4.<java.util.Iterator: void remove()>();

        $r32 = virtualinvoke r34.<org.apache.commons.compress.changes.Change: org.apache.commons.compress.archivers.ArchiveEntry getEntry()>();

        $r33 = interfaceinvoke $r32.<org.apache.commons.compress.archivers.ArchiveEntry: java.lang.String getName()>();

        virtualinvoke $r0.<org.apache.commons.compress.changes.ChangeSetResults: void addedFromChangeSet(java.lang.String)>($r33);

     label02:
        goto label01;

     label03:
        $z1 = interfaceinvoke r5.<org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveEntryIterator: boolean hasNext()>();

        if $z1 == 0 goto label09;

        $r15 = interfaceinvoke r5.<org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveEntryIterator: org.apache.commons.compress.archivers.ArchiveEntry next()>();

        z11 = 1;

        $r16 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label04:
        $z5 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label07;

        $r20 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        r21 = (org.apache.commons.compress.changes.Change) $r20;

        $i1 = virtualinvoke r21.<org.apache.commons.compress.changes.Change: int type()>();

        $r22 = interfaceinvoke $r15.<org.apache.commons.compress.archivers.ArchiveEntry: java.lang.String getName()>();

        if $i1 != 1 goto label05;

        if $r22 == null goto label05;

        $r28 = virtualinvoke r21.<org.apache.commons.compress.changes.Change: java.lang.String targetFile()>();

        $z9 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>($r28);

        if $z9 == 0 goto label06;

        z11 = 0;

        interfaceinvoke $r16.<java.util.Iterator: void remove()>();

        virtualinvoke $r0.<org.apache.commons.compress.changes.ChangeSetResults: void deleted(java.lang.String)>($r22);

        goto label07;

     label05:
        if $i1 != 4 goto label06;

        if $r22 == null goto label06;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke r21.<org.apache.commons.compress.changes.Change: java.lang.String targetFile()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        $z8 = virtualinvoke $r22.<java.lang.String: boolean startsWith(java.lang.String)>($r27);

        if $z8 == 0 goto label06;

        z11 = 0;

        virtualinvoke $r0.<org.apache.commons.compress.changes.ChangeSetResults: void deleted(java.lang.String)>($r22);

        goto label07;

     label06:
        goto label04;

     label07:
        if z11 == 0 goto label08;

        $z6 = specialinvoke r2.<org.apache.commons.compress.changes.ChangeSetPerformer: boolean isDeletedLater(java.util.Set,org.apache.commons.compress.archivers.ArchiveEntry)>($r1, $r15);

        if $z6 != 0 goto label08;

        $r17 = interfaceinvoke $r15.<org.apache.commons.compress.archivers.ArchiveEntry: java.lang.String getName()>();

        $z7 = virtualinvoke $r0.<org.apache.commons.compress.changes.ChangeSetResults: boolean hasBeenAdded(java.lang.String)>($r17);

        if $z7 != 0 goto label08;

        $r18 = interfaceinvoke r5.<org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveEntryIterator: java.io.InputStream getInputStream()>();

        specialinvoke r2.<org.apache.commons.compress.changes.ChangeSetPerformer: void copyStream(java.io.InputStream,org.apache.commons.compress.archivers.ArchiveOutputStream,org.apache.commons.compress.archivers.ArchiveEntry)>($r18, r7, $r15);

        $r19 = interfaceinvoke $r15.<org.apache.commons.compress.archivers.ArchiveEntry: java.lang.String getName()>();

        virtualinvoke $r0.<org.apache.commons.compress.changes.ChangeSetResults: void addedFromStream(java.lang.String)>($r19);

     label08:
        goto label03;

     label09:
        $r6 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label10:
        $z2 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label12;

        $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r35 = (org.apache.commons.compress.changes.Change) $r8;

        $i0 = virtualinvoke r35.<org.apache.commons.compress.changes.Change: int type()>();

        if $i0 != 2 goto label11;

        $z3 = virtualinvoke r35.<org.apache.commons.compress.changes.Change: boolean isReplaceMode()>();

        if $z3 != 0 goto label11;

        $r9 = virtualinvoke r35.<org.apache.commons.compress.changes.Change: org.apache.commons.compress.archivers.ArchiveEntry getEntry()>();

        $r10 = interfaceinvoke $r9.<org.apache.commons.compress.archivers.ArchiveEntry: java.lang.String getName()>();

        $z4 = virtualinvoke $r0.<org.apache.commons.compress.changes.ChangeSetResults: boolean hasBeenAdded(java.lang.String)>($r10);

        if $z4 != 0 goto label11;

        $r11 = virtualinvoke r35.<org.apache.commons.compress.changes.Change: java.io.InputStream getInput()>();

        $r12 = virtualinvoke r35.<org.apache.commons.compress.changes.Change: org.apache.commons.compress.archivers.ArchiveEntry getEntry()>();

        specialinvoke r2.<org.apache.commons.compress.changes.ChangeSetPerformer: void copyStream(java.io.InputStream,org.apache.commons.compress.archivers.ArchiveOutputStream,org.apache.commons.compress.archivers.ArchiveEntry)>($r11, r7, $r12);

        interfaceinvoke $r6.<java.util.Iterator: void remove()>();

        $r13 = virtualinvoke r35.<org.apache.commons.compress.changes.Change: org.apache.commons.compress.archivers.ArchiveEntry getEntry()>();

        $r14 = interfaceinvoke $r13.<org.apache.commons.compress.archivers.ArchiveEntry: java.lang.String getName()>();

        virtualinvoke $r0.<org.apache.commons.compress.changes.ChangeSetResults: void addedFromChangeSet(java.lang.String)>($r14);

     label11:
        goto label10;

     label12:
        virtualinvoke r7.<org.apache.commons.compress.archivers.ArchiveOutputStream: void finish()>();

        return $r0;
    }

    private boolean isDeletedLater(java.util.Set, org.apache.commons.compress.archivers.ArchiveEntry)
    {
        org.apache.commons.compress.archivers.ArchiveEntry r0;
        int $i0;
        java.lang.String $r1, $r6, $r10;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r3;
        java.util.Set r2;
        org.apache.commons.compress.changes.ChangeSetPerformer r11;
        org.apache.commons.compress.changes.Change r5;
        java.lang.Object $r4;
        java.lang.StringBuilder $r7, $r8, $r9;

        r11 := @this: org.apache.commons.compress.changes.ChangeSetPerformer;

        r2 := @parameter0: java.util.Set;

        r0 := @parameter1: org.apache.commons.compress.archivers.ArchiveEntry;

        $r1 = interfaceinvoke r0.<org.apache.commons.compress.archivers.ArchiveEntry: java.lang.String getName()>();

        $z0 = interfaceinvoke r2.<java.util.Set: boolean isEmpty()>();

        if $z0 != 0 goto label4;

        $r3 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.commons.compress.changes.Change) $r4;

        $i0 = virtualinvoke r5.<org.apache.commons.compress.changes.Change: int type()>();

        $r6 = virtualinvoke r5.<org.apache.commons.compress.changes.Change: java.lang.String targetFile()>();

        if $i0 != 1 goto label2;

        $z3 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z3 == 0 goto label2;

        return 1;

     label2:
        if $i0 != 4 goto label3;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $z2 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>($r10);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        goto label1;

     label4:
        return 0;
    }

    private void copyStream(java.io.InputStream, org.apache.commons.compress.archivers.ArchiveOutputStream, org.apache.commons.compress.archivers.ArchiveEntry) throws java.io.IOException
    {
        org.apache.commons.compress.archivers.ArchiveEntry r1;
        org.apache.commons.compress.archivers.ArchiveOutputStream r0;
        org.apache.commons.compress.changes.ChangeSetPerformer r3;
        java.io.InputStream r2;

        r3 := @this: org.apache.commons.compress.changes.ChangeSetPerformer;

        r2 := @parameter0: java.io.InputStream;

        r0 := @parameter1: org.apache.commons.compress.archivers.ArchiveOutputStream;

        r1 := @parameter2: org.apache.commons.compress.archivers.ArchiveEntry;

        virtualinvoke r0.<org.apache.commons.compress.archivers.ArchiveOutputStream: void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)>(r1);

        staticinvoke <org.apache.commons.compress.utils.IOUtils: long copy(java.io.InputStream,java.io.OutputStream)>(r2, r0);

        virtualinvoke r0.<org.apache.commons.compress.archivers.ArchiveOutputStream: void closeArchiveEntry()>();

        return;
    }
}
