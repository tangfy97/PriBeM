class org.apache.commons.compress.archivers.zip.BinaryTree extends java.lang.Object
{
    private static final int UNDEFINED;
    private static final int NODE;
    private final int[] tree;

    public void <init>(int)
    {
        int[] $r1, $r2;
        org.apache.commons.compress.archivers.zip.BinaryTree r0;
        int i0, $i1, $i2, $i3, $i5;

        r0 := @this: org.apache.commons.compress.archivers.zip.BinaryTree;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = i0 + 1;

        $i2 = 1 << $i1;

        $i3 = $i2 - 1;

        $r1 = newarray (int)[$i3];

        r0.<org.apache.commons.compress.archivers.zip.BinaryTree: int[] tree> = $r1;

        $r2 = r0.<org.apache.commons.compress.archivers.zip.BinaryTree: int[] tree>;

        $i5 = (int) -1;

        staticinvoke <java.util.Arrays: void fill(int[],int)>($r2, $i5);

        return;
    }

    public void addLeaf(int, int, int, int)
    {
        int[] $r1, $r2, $r8, $r12;
        org.apache.commons.compress.archivers.zip.BinaryTree r0;
        int i0, i1, $i2, i3, $i4, $i5, i6, i7, $i8, $i9, $i10, $i11, $i13, $i15;
        java.lang.String $r11;
        java.lang.IllegalArgumentException $r14;
        java.lang.StringBuilder $r5, $r6, $r7, $r9, $r10, $r13;

        r0 := @this: org.apache.commons.compress.archivers.zip.BinaryTree;

        i1 := @parameter0: int;

        i3 := @parameter1: int;

        i0 := @parameter2: int;

        i7 := @parameter3: int;

        if i0 != 0 goto label2;

        $r2 = r0.<org.apache.commons.compress.archivers.zip.BinaryTree: int[] tree>;

        $i10 = $r2[i1];

        $i13 = (int) -1;

        if $i10 != $i13 goto label1;

        $r12 = r0.<org.apache.commons.compress.archivers.zip.BinaryTree: int[] tree>;

        $r12[i1] = i7;

        goto label3;

     label1:
        $r14 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tree value at index ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has already been assigned (");

        $r8 = r0.<org.apache.commons.compress.archivers.zip.BinaryTree: int[] tree>;

        $i11 = $r8[i1];

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r14;

     label2:
        $r1 = r0.<org.apache.commons.compress.archivers.zip.BinaryTree: int[] tree>;

        $i15 = (int) -2;

        $r1[i1] = $i15;

        $i2 = 2 * i1;

        $i5 = $i2 + 1;

        $i4 = i3 & 1;

        i6 = $i5 + $i4;

        $i9 = i3 >>> 1;

        $i8 = i0 - 1;

        virtualinvoke r0.<org.apache.commons.compress.archivers.zip.BinaryTree: void addLeaf(int,int,int,int)>(i6, $i9, $i8, i7);

     label3:
        return;
    }

    public int read(org.apache.commons.compress.archivers.zip.BitStream) throws java.io.IOException
    {
        org.apache.commons.compress.archivers.zip.BitStream r0;
        int[] $r2;
        org.apache.commons.compress.archivers.zip.BinaryTree r1;
        int $i0, $i1, $i2, i3, i4, i5, $i7, $i9, $i11, $i13;
        java.lang.String $r10;
        java.io.IOException $r12;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r11;

        r1 := @this: org.apache.commons.compress.archivers.zip.BinaryTree;

        r0 := @parameter0: org.apache.commons.compress.archivers.zip.BitStream;

        i5 = 0;

     label1:
        $i0 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.BitStream: int nextBit()>();

        $i7 = (int) -1;

        if $i0 != $i7 goto label2;

        $i9 = (int) -1;

        return $i9;

     label2:
        $i1 = 2 * i5;

        $i2 = $i1 + 1;

        i3 = $i2 + $i0;

        $r2 = r1.<org.apache.commons.compress.archivers.zip.BinaryTree: int[] tree>;

        i4 = $r2[i3];

        $i11 = (int) -2;

        if i4 != $i11 goto label3;

        i5 = i3;

        goto label5;

     label3:
        $i13 = (int) -1;

        if i4 == $i13 goto label4;

        return i4;

     label4:
        $r12 = new java.io.IOException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The child ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of node at index ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not defined");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>($r10);

        throw $r12;

     label5:
        goto label1;
    }

    static org.apache.commons.compress.archivers.zip.BinaryTree decode(java.io.InputStream, int) throws java.io.IOException
    {
        byte[] r1;
        byte $b19, b25;
        int[] r3, r6, r7, r8;
        java.io.DataInputStream $r10;
        short $s17, $s38;
        org.apache.commons.compress.archivers.zip.BinaryTree $r11;
        int $i0, i1, i2, $i3, $i4, $i5, $i6, $i7, i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i18, $i20, i21, i22, i23, i24, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, $i39, $i40, $i42;
        java.io.IOException $r9;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        i2 := @parameter1: int;

        $i0 = virtualinvoke r0.<java.io.InputStream: int read()>();

        i1 = $i0 + 1;

        if i1 != 0 goto label01;

        $r9 = new java.io.IOException;

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>("Cannot read the size of the encoded tree, unexpected end of stream");

        throw $r9;

     label01:
        r1 = newarray (byte)[i1];

        $r10 = new java.io.DataInputStream;

        specialinvoke $r10.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r0);

        virtualinvoke $r10.<java.io.DataInputStream: void readFully(byte[])>(r1);

        i21 = 0;

        r3 = newarray (int)[i2];

        i22 = 0;

        i23 = lengthof r1;

        i24 = 0;

     label02:
        if i24 >= i23 goto label05;

        b25 = r1[i24];

        $s38 = (short) b25;

        $s17 = $s38 & 240;

        $i39 = (int) $s17;

        $i18 = $i39 >> 4;

        i26 = $i18 + 1;

        $b19 = b25 & 15;

        $i40 = (int) $b19;

        i27 = $i40 + 1;

        i28 = 0;

     label03:
        if i28 >= i26 goto label04;

        $i20 = i22;

        i22 = i22 + 1;

        r3[$i20] = i27;

        i28 = i28 + 1;

        goto label03;

     label04:
        i21 = staticinvoke <java.lang.Math: int max(int,int)>(i21, i27);

        i24 = i24 + 1;

        goto label02;

     label05:
        $i3 = lengthof r3;

        r6 = newarray (int)[$i3];

        i29 = 0;

     label06:
        $i4 = lengthof r6;

        if i29 >= $i4 goto label07;

        r6[i29] = i29;

        i29 = i29 + 1;

        goto label06;

     label07:
        i30 = 0;

        $i5 = lengthof r3;

        r7 = newarray (int)[$i5];

        i31 = 0;

     label08:
        $i6 = lengthof r3;

        if i31 >= $i6 goto label12;

        i32 = 0;

     label09:
        $i15 = lengthof r3;

        if i32 >= $i15 goto label11;

        $i16 = r3[i32];

        if $i16 != i31 goto label10;

        r7[i30] = i31;

        r6[i30] = i32;

        i30 = i30 + 1;

     label10:
        i32 = i32 + 1;

        goto label09;

     label11:
        i31 = i31 + 1;

        goto label08;

     label12:
        i33 = 0;

        i34 = 0;

        i35 = 0;

        r8 = newarray (int)[i2];

        i36 = i2 - 1;

     label13:
        if i36 < 0 goto label15;

        i33 = i33 + i34;

        $i12 = r7[i36];

        if $i12 == i35 goto label14;

        i35 = r7[i36];

        $i14 = 16 - i35;

        i34 = 1 << $i14;

     label14:
        $i13 = r6[i36];

        r8[$i13] = i33;

        $i42 = (int) -1;

        i36 = i36 + $i42;

        goto label13;

     label15:
        $r11 = new org.apache.commons.compress.archivers.zip.BinaryTree;

        specialinvoke $r11.<org.apache.commons.compress.archivers.zip.BinaryTree: void <init>(int)>(i21);

        i37 = 0;

     label16:
        $i7 = lengthof r8;

        if i37 >= $i7 goto label18;

        i8 = r3[i37];

        if i8 <= 0 goto label17;

        $i9 = r8[i37];

        $i10 = $i9 << 16;

        $i11 = staticinvoke <java.lang.Integer: int reverse(int)>($i10);

        virtualinvoke $r11.<org.apache.commons.compress.archivers.zip.BinaryTree: void addLeaf(int,int,int,int)>(0, $i11, i8, i37);

     label17:
        i37 = i37 + 1;

        goto label16;

     label18:
        return $r11;
    }

    public static void <clinit>()
    {
        <org.apache.commons.compress.archivers.zip.BinaryTree: int NODE> = -2;

        <org.apache.commons.compress.archivers.zip.BinaryTree: int UNDEFINED> = -1;

        return;
    }
}
