public abstract class org.springframework.web.filter.OncePerRequestFilter extends org.springframework.web.filter.GenericFilterBean
{
    public static final java.lang.String ALREADY_FILTERED_SUFFIX;

    public void <init>()
    {
        org.springframework.web.filter.OncePerRequestFilter r0;

        r0 := @this: org.springframework.web.filter.OncePerRequestFilter;

        specialinvoke r0.<org.springframework.web.filter.GenericFilterBean: void <init>()>();

        return;
    }

    public final void doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain) throws javax.servlet.ServletException, java.io.IOException
    {
        java.lang.Throwable $r10;
        javax.servlet.ServletRequest r0;
        javax.servlet.FilterChain r8;
        javax.servlet.ServletException $r1;
        javax.servlet.http.HttpServletResponse r4;
        org.springframework.web.filter.OncePerRequestFilter r5;
        javax.servlet.http.HttpServletRequest r3;
        javax.servlet.ServletResponse r2;
        java.lang.Boolean $r9;
        java.lang.Object $r7;
        java.lang.String $r6;
        boolean $z0, $z1, $z2;

        r5 := @this: org.springframework.web.filter.OncePerRequestFilter;

        r0 := @parameter0: javax.servlet.ServletRequest;

        r2 := @parameter1: javax.servlet.ServletResponse;

        r8 := @parameter2: javax.servlet.FilterChain;

        $z0 = r0 instanceof javax.servlet.http.HttpServletRequest;

        if $z0 == 0 goto label1;

        $z1 = r2 instanceof javax.servlet.http.HttpServletResponse;

        if $z1 != 0 goto label2;

     label1:
        $r1 = new javax.servlet.ServletException;

        specialinvoke $r1.<javax.servlet.ServletException: void <init>(java.lang.String)>("OncePerRequestFilter just supports HTTP requests");

        throw $r1;

     label2:
        r3 = (javax.servlet.http.HttpServletRequest) r0;

        r4 = (javax.servlet.http.HttpServletResponse) r2;

        $r6 = virtualinvoke r5.<org.springframework.web.filter.OncePerRequestFilter: java.lang.String getAlreadyFilteredAttributeName()>();

        $r7 = interfaceinvoke r0.<javax.servlet.ServletRequest: java.lang.Object getAttribute(java.lang.String)>($r6);

        if $r7 != null goto label3;

        $z2 = virtualinvoke r5.<org.springframework.web.filter.OncePerRequestFilter: boolean shouldNotFilter(javax.servlet.http.HttpServletRequest)>(r3);

        if $z2 == 0 goto label4;

     label3:
        interfaceinvoke r8.<javax.servlet.FilterChain: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)>(r0, r2);

        goto label8;

     label4:
        $r9 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke r0.<javax.servlet.ServletRequest: void setAttribute(java.lang.String,java.lang.Object)>($r6, $r9);

     label5:
        virtualinvoke r5.<org.springframework.web.filter.OncePerRequestFilter: void doFilterInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain)>(r3, r4, r8);

        goto label7;

     label6:
        $r10 := @caughtexception;

        interfaceinvoke r0.<javax.servlet.ServletRequest: void removeAttribute(java.lang.String)>($r6);

        throw $r10;

     label7:
        interfaceinvoke r0.<javax.servlet.ServletRequest: void removeAttribute(java.lang.String)>($r6);

     label8:
        return;

        catch java.lang.Throwable from label5 to label6 with label6;
    }

    protected java.lang.String getAlreadyFilteredAttributeName()
    {
        org.springframework.web.filter.OncePerRequestFilter r0;
        java.lang.StringBuilder $r2, $r4;
        java.lang.Class $r6;
        java.lang.String $r1, $r3, $r5, r7;

        r0 := @this: org.springframework.web.filter.OncePerRequestFilter;

        $r1 = virtualinvoke r0.<org.springframework.web.filter.OncePerRequestFilter: java.lang.String getFilterName()>();

        r7 = $r1;

        if $r1 != null goto label1;

        $r6 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

     label1:
        $r2 = new java.lang.StringBuilder;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r7);

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".FILTERED");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    protected boolean shouldNotFilter(javax.servlet.http.HttpServletRequest) throws javax.servlet.ServletException
    {
        org.springframework.web.filter.OncePerRequestFilter r0;
        javax.servlet.http.HttpServletRequest r1;

        r0 := @this: org.springframework.web.filter.OncePerRequestFilter;

        r1 := @parameter0: javax.servlet.http.HttpServletRequest;

        return 0;
    }

    protected abstract void doFilterInternal(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, javax.servlet.FilterChain) throws javax.servlet.ServletException, java.io.IOException;

    public static void <clinit>()
    {
        <org.springframework.web.filter.OncePerRequestFilter: java.lang.String ALREADY_FILTERED_SUFFIX> = ".FILTERED";

        return;
    }
}
