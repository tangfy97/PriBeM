public class com.hp.hpl.jena.mem.StoreTripleIterator extends com.hp.hpl.jena.mem.TrackingTripleIterator
{
    protected com.hp.hpl.jena.mem.NodeToTriplesMapBase X;
    protected com.hp.hpl.jena.mem.NodeToTriplesMapBase A;
    protected com.hp.hpl.jena.mem.NodeToTriplesMapBase B;
    protected com.hp.hpl.jena.graph.Graph toNotify;

    public void <init>(com.hp.hpl.jena.graph.Graph, java.util.Iterator, com.hp.hpl.jena.mem.NodeToTriplesMapBase, com.hp.hpl.jena.mem.NodeToTriplesMapBase, com.hp.hpl.jena.mem.NodeToTriplesMapBase)
    {
        com.hp.hpl.jena.mem.StoreTripleIterator r0;
        java.util.Iterator r1;
        com.hp.hpl.jena.graph.Graph r5;
        com.hp.hpl.jena.mem.NodeToTriplesMapBase r2, r3, r4;

        r0 := @this: com.hp.hpl.jena.mem.StoreTripleIterator;

        r5 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r1 := @parameter1: java.util.Iterator;

        r2 := @parameter2: com.hp.hpl.jena.mem.NodeToTriplesMapBase;

        r3 := @parameter3: com.hp.hpl.jena.mem.NodeToTriplesMapBase;

        r4 := @parameter4: com.hp.hpl.jena.mem.NodeToTriplesMapBase;

        specialinvoke r0.<com.hp.hpl.jena.mem.TrackingTripleIterator: void <init>(java.util.Iterator)>(r1);

        r0.<com.hp.hpl.jena.mem.StoreTripleIterator: com.hp.hpl.jena.mem.NodeToTriplesMapBase X> = r2;

        r0.<com.hp.hpl.jena.mem.StoreTripleIterator: com.hp.hpl.jena.mem.NodeToTriplesMapBase A> = r3;

        r0.<com.hp.hpl.jena.mem.StoreTripleIterator: com.hp.hpl.jena.mem.NodeToTriplesMapBase B> = r4;

        r0.<com.hp.hpl.jena.mem.StoreTripleIterator: com.hp.hpl.jena.graph.Graph toNotify> = r5;

        return;
    }

    public void remove()
    {
        com.hp.hpl.jena.mem.StoreTripleIterator r0;
        com.hp.hpl.jena.graph.GraphEventManager $r7;
        com.hp.hpl.jena.mem.NodeToTriplesMapBase $r1, $r3, $r5;
        com.hp.hpl.jena.graph.Triple $r2, $r4, $r8;
        com.hp.hpl.jena.graph.Graph $r6, $r9;

        r0 := @this: com.hp.hpl.jena.mem.StoreTripleIterator;

        specialinvoke r0.<com.hp.hpl.jena.mem.TrackingTripleIterator: void remove()>();

        $r1 = r0.<com.hp.hpl.jena.mem.StoreTripleIterator: com.hp.hpl.jena.mem.NodeToTriplesMapBase X>;

        virtualinvoke $r1.<com.hp.hpl.jena.mem.NodeToTriplesMapBase: void removedOneViaIterator()>();

        $r3 = r0.<com.hp.hpl.jena.mem.StoreTripleIterator: com.hp.hpl.jena.mem.NodeToTriplesMapBase A>;

        $r2 = r0.<com.hp.hpl.jena.mem.StoreTripleIterator: com.hp.hpl.jena.graph.Triple current>;

        virtualinvoke $r3.<com.hp.hpl.jena.mem.NodeToTriplesMapBase: boolean remove(com.hp.hpl.jena.graph.Triple)>($r2);

        $r5 = r0.<com.hp.hpl.jena.mem.StoreTripleIterator: com.hp.hpl.jena.mem.NodeToTriplesMapBase B>;

        $r4 = r0.<com.hp.hpl.jena.mem.StoreTripleIterator: com.hp.hpl.jena.graph.Triple current>;

        virtualinvoke $r5.<com.hp.hpl.jena.mem.NodeToTriplesMapBase: boolean remove(com.hp.hpl.jena.graph.Triple)>($r4);

        $r6 = r0.<com.hp.hpl.jena.mem.StoreTripleIterator: com.hp.hpl.jena.graph.Graph toNotify>;

        $r7 = interfaceinvoke $r6.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.graph.GraphEventManager getEventManager()>();

        $r9 = r0.<com.hp.hpl.jena.mem.StoreTripleIterator: com.hp.hpl.jena.graph.Graph toNotify>;

        $r8 = r0.<com.hp.hpl.jena.mem.StoreTripleIterator: com.hp.hpl.jena.graph.Triple current>;

        interfaceinvoke $r7.<com.hp.hpl.jena.graph.GraphEventManager: void notifyDeleteTriple(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Triple)>($r9, $r8);

        return;
    }
}
