public class com.mycila.inject.internal.asm.util.CheckFieldAdapter extends java.lang.Object implements com.mycila.inject.internal.asm.FieldVisitor
{
    private final com.mycila.inject.internal.asm.FieldVisitor fv;
    private boolean end;

    public void <init>(com.mycila.inject.internal.asm.FieldVisitor)
    {
        com.mycila.inject.internal.asm.util.CheckFieldAdapter r0;
        com.mycila.inject.internal.asm.FieldVisitor r1;

        r0 := @this: com.mycila.inject.internal.asm.util.CheckFieldAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.FieldVisitor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.mycila.inject.internal.asm.util.CheckFieldAdapter: com.mycila.inject.internal.asm.FieldVisitor fv> = r1;

        return;
    }

    public com.mycila.inject.internal.asm.AnnotationVisitor visitAnnotation(java.lang.String, boolean)
    {
        com.mycila.inject.internal.asm.util.CheckAnnotationAdapter $r2;
        com.mycila.inject.internal.asm.FieldVisitor $r3;
        com.mycila.inject.internal.asm.AnnotationVisitor $r4;
        com.mycila.inject.internal.asm.util.CheckFieldAdapter r0;
        java.lang.String r1;
        boolean z0;

        r0 := @this: com.mycila.inject.internal.asm.util.CheckFieldAdapter;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.mycila.inject.internal.asm.util.CheckFieldAdapter: void checkEnd()>();

        staticinvoke <com.mycila.inject.internal.asm.util.CheckMethodAdapter: void checkDesc(java.lang.String,boolean)>(r1, 0);

        $r2 = new com.mycila.inject.internal.asm.util.CheckAnnotationAdapter;

        $r3 = r0.<com.mycila.inject.internal.asm.util.CheckFieldAdapter: com.mycila.inject.internal.asm.FieldVisitor fv>;

        $r4 = interfaceinvoke $r3.<com.mycila.inject.internal.asm.FieldVisitor: com.mycila.inject.internal.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>(r1, z0);

        specialinvoke $r2.<com.mycila.inject.internal.asm.util.CheckAnnotationAdapter: void <init>(com.mycila.inject.internal.asm.AnnotationVisitor)>($r4);

        return $r2;
    }

    public void visitAttribute(com.mycila.inject.internal.asm.Attribute)
    {
        com.mycila.inject.internal.asm.FieldVisitor $r2;
        com.mycila.inject.internal.asm.util.CheckFieldAdapter r0;
        com.mycila.inject.internal.asm.Attribute r1;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: com.mycila.inject.internal.asm.util.CheckFieldAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Attribute;

        specialinvoke r0.<com.mycila.inject.internal.asm.util.CheckFieldAdapter: void checkEnd()>();

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid attribute (must not be null)");

        throw $r3;

     label1:
        $r2 = r0.<com.mycila.inject.internal.asm.util.CheckFieldAdapter: com.mycila.inject.internal.asm.FieldVisitor fv>;

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.FieldVisitor: void visitAttribute(com.mycila.inject.internal.asm.Attribute)>(r1);

        return;
    }

    public void visitEnd()
    {
        com.mycila.inject.internal.asm.util.CheckFieldAdapter r0;
        com.mycila.inject.internal.asm.FieldVisitor $r1;

        r0 := @this: com.mycila.inject.internal.asm.util.CheckFieldAdapter;

        specialinvoke r0.<com.mycila.inject.internal.asm.util.CheckFieldAdapter: void checkEnd()>();

        r0.<com.mycila.inject.internal.asm.util.CheckFieldAdapter: boolean end> = 1;

        $r1 = r0.<com.mycila.inject.internal.asm.util.CheckFieldAdapter: com.mycila.inject.internal.asm.FieldVisitor fv>;

        interfaceinvoke $r1.<com.mycila.inject.internal.asm.FieldVisitor: void visitEnd()>();

        return;
    }

    private void checkEnd()
    {
        java.lang.IllegalStateException $r1;
        com.mycila.inject.internal.asm.util.CheckFieldAdapter r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.asm.util.CheckFieldAdapter;

        $z0 = r0.<com.mycila.inject.internal.asm.util.CheckFieldAdapter: boolean end>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot call a visit method after visitEnd has been called");

        throw $r1;

     label1:
        return;
    }
}
