public class com.hp.hpl.jena.tdb.sys.LockMRSWLite extends java.lang.Object implements com.hp.hpl.jena.shared.Lock
{
    private java.util.concurrent.locks.ReadWriteLock mrswLock;
    private int count;

    public void <init>()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock $r1;
        com.hp.hpl.jena.tdb.sys.LockMRSWLite r0;

        r0 := @this: com.hp.hpl.jena.tdb.sys.LockMRSWLite;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.locks.ReentrantReadWriteLock;

        specialinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>();

        r0.<com.hp.hpl.jena.tdb.sys.LockMRSWLite: java.util.concurrent.locks.ReadWriteLock mrswLock> = $r1;

        r0.<com.hp.hpl.jena.tdb.sys.LockMRSWLite: int count> = 0;

        return;
    }

    public synchronized void enterCriticalSection(boolean)
    {
        java.util.concurrent.locks.Lock $r2, $r4;
        com.hp.hpl.jena.tdb.sys.LockMRSWLite r0;
        int $i0, $i1, $i3;
        java.util.concurrent.locks.ReadWriteLock $r1, $r3;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.tdb.sys.LockMRSWLite;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r3 = r0.<com.hp.hpl.jena.tdb.sys.LockMRSWLite: java.util.concurrent.locks.ReadWriteLock mrswLock>;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void lock()>();

        $i0 = r0.<com.hp.hpl.jena.tdb.sys.LockMRSWLite: int count>;

        $i1 = $i0 + 1;

        r0.<com.hp.hpl.jena.tdb.sys.LockMRSWLite: int count> = $i1;

        goto label2;

     label1:
        $r1 = r0.<com.hp.hpl.jena.tdb.sys.LockMRSWLite: java.util.concurrent.locks.ReadWriteLock mrswLock>;

        $r2 = interfaceinvoke $r1.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void lock()>();

        $i3 = (int) -1;

        r0.<com.hp.hpl.jena.tdb.sys.LockMRSWLite: int count> = $i3;

     label2:
        return;
    }

    public synchronized void leaveCriticalSection()
    {
        com.hp.hpl.jena.shared.JenaException $r5;
        java.util.concurrent.locks.Lock $r2, $r4;
        com.hp.hpl.jena.tdb.sys.LockMRSWLite r0;
        int $i0, $i1, $i2, $i3;
        java.util.concurrent.locks.ReadWriteLock $r1, $r3;

        r0 := @this: com.hp.hpl.jena.tdb.sys.LockMRSWLite;

        $i0 = r0.<com.hp.hpl.jena.tdb.sys.LockMRSWLite: int count>;

        if $i0 != 0 goto label1;

        $r5 = new com.hp.hpl.jena.shared.JenaException;

        specialinvoke $r5.<com.hp.hpl.jena.shared.JenaException: void <init>(java.lang.String)>("Bad lock release - don\'t appear to be in a critical section");

        throw $r5;

     label1:
        $i1 = r0.<com.hp.hpl.jena.tdb.sys.LockMRSWLite: int count>;

        if $i1 >= 0 goto label2;

        $r3 = r0.<com.hp.hpl.jena.tdb.sys.LockMRSWLite: java.util.concurrent.locks.ReadWriteLock mrswLock>;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        r0.<com.hp.hpl.jena.tdb.sys.LockMRSWLite: int count> = 0;

        return;

     label2:
        $r1 = r0.<com.hp.hpl.jena.tdb.sys.LockMRSWLite: java.util.concurrent.locks.ReadWriteLock mrswLock>;

        $r2 = interfaceinvoke $r1.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void unlock()>();

        $i2 = r0.<com.hp.hpl.jena.tdb.sys.LockMRSWLite: int count>;

        $i3 = $i2 - 1;

        r0.<com.hp.hpl.jena.tdb.sys.LockMRSWLite: int count> = $i3;

        return;
    }
}
