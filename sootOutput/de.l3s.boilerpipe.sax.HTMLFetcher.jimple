public class de.l3s.boilerpipe.sax.HTMLFetcher extends java.lang.Object
{

    private void <init>()
    {
        de.l3s.boilerpipe.sax.HTMLFetcher r0;

        r0 := @this: de.l3s.boilerpipe.sax.HTMLFetcher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static de.l3s.boilerpipe.sax.HTMLDocument fetch(java.net.URL) throws java.io.IOException
    {
        byte[] $r3, $r18;
        java.util.zip.GZIPInputStream $r19;
        java.io.ByteArrayOutputStream $r21;
        java.net.URL r0;
        de.l3s.boilerpipe.sax.HTMLDocument $r22;
        java.nio.charset.Charset r13;
        java.net.URLConnection $r1;
        int $i0, $i2;
        java.lang.String $r2, $r5, $r10, $r16;
        boolean $z0;
        java.io.PrintStream $r7;
        java.lang.StringBuilder $r8, $r9, $r20;
        java.nio.charset.UnsupportedCharsetException $r12;
        java.io.InputStream $r14, r15;

        r0 := @parameter0: java.net.URL;

        $r1 = virtualinvoke r0.<java.net.URL: java.net.URLConnection openConnection()>();

        $r2 = virtualinvoke $r1.<java.net.URLConnection: java.lang.String getContentEncoding()>();

        r13 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("Cp1252");

        if $r2 == null goto label4;

     label1:
        r13 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>($r2);

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;

     label4:
        $r14 = virtualinvoke $r1.<java.net.URLConnection: java.io.InputStream getInputStream()>();

        r15 = $r14;

        $r16 = virtualinvoke $r1.<java.net.URLConnection: java.lang.String getContentEncoding()>();

        if $r16 == null goto label6;

        $r5 = "gzip";

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r16);

        if $z0 == 0 goto label5;

        $r19 = new java.util.zip.GZIPInputStream;

        specialinvoke $r19.<java.util.zip.GZIPInputStream: void <init>(java.io.InputStream)>($r14);

        r15 = $r19;

        goto label6;

     label5:
        $r7 = <java.lang.System: java.io.PrintStream err>;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WARN: unsupported Content-Encoding: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r10);

     label6:
        $r21 = new java.io.ByteArrayOutputStream;

        specialinvoke $r21.<java.io.ByteArrayOutputStream: void <init>()>();

        $r18 = newarray (byte)[4096];

     label7:
        $i0 = virtualinvoke r15.<java.io.InputStream: int read(byte[])>($r18);

        $i2 = (int) -1;

        if $i0 == $i2 goto label8;

        virtualinvoke $r21.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r18, 0, $i0);

        goto label7;

     label8:
        virtualinvoke r15.<java.io.InputStream: void close()>();

        $r3 = virtualinvoke $r21.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r22 = new de.l3s.boilerpipe.sax.HTMLDocument;

        specialinvoke $r22.<de.l3s.boilerpipe.sax.HTMLDocument: void <init>(byte[],java.nio.charset.Charset)>($r3, r13);

        return $r22;

        catch java.nio.charset.UnsupportedCharsetException from label1 to label2 with label3;
    }
}
