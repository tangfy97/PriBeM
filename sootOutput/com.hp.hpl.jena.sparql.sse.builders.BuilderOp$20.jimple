class com.hp.hpl.jena.sparql.sse.builders.BuilderOp$20 extends java.lang.Object implements com.hp.hpl.jena.sparql.sse.builders.BuilderOp$Build
{
    final com.hp.hpl.jena.sparql.sse.builders.BuilderOp this$0;

    void <init>(com.hp.hpl.jena.sparql.sse.builders.BuilderOp)
    {
        com.hp.hpl.jena.sparql.sse.builders.BuilderOp r1;
        com.hp.hpl.jena.sparql.sse.builders.BuilderOp$20 r0;

        r0 := @this: com.hp.hpl.jena.sparql.sse.builders.BuilderOp$20;

        r1 := @parameter0: com.hp.hpl.jena.sparql.sse.builders.BuilderOp;

        r0.<com.hp.hpl.jena.sparql.sse.builders.BuilderOp$20: com.hp.hpl.jena.sparql.sse.builders.BuilderOp this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public com.hp.hpl.jena.sparql.algebra.Op make(com.hp.hpl.jena.sparql.sse.ItemList)
    {
        com.hp.hpl.jena.sparql.sse.builders.BuilderOp $r6;
        com.hp.hpl.jena.sparql.sse.ItemList r0;
        com.hp.hpl.jena.sparql.sse.Item $r1, $r3;
        com.hp.hpl.jena.graph.Node $r2;
        com.hp.hpl.jena.sparql.algebra.op.OpProcedure $r8;
        com.hp.hpl.jena.sparql.expr.ExprList $r4;
        com.hp.hpl.jena.sparql.sse.builders.BuilderOp$20 r5;
        com.hp.hpl.jena.sparql.algebra.Op $r7;
        boolean $z0;

        r5 := @this: com.hp.hpl.jena.sparql.sse.builders.BuilderOp$20;

        r0 := @parameter0: com.hp.hpl.jena.sparql.sse.ItemList;

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: void checkLength(int,com.hp.hpl.jena.sparql.sse.ItemList,java.lang.String)>(4, r0, "proc");

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(1);

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderNode: com.hp.hpl.jena.graph.Node buildNode(com.hp.hpl.jena.sparql.sse.Item)>($r1);

        $z0 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z0 != 0 goto label1;

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: void broken(com.hp.hpl.jena.sparql.sse.ItemList,java.lang.String)>(r0, "Procedure name must be a URI");

     label1:
        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(2);

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderExpr: com.hp.hpl.jena.sparql.expr.ExprList buildExprOrExprList(com.hp.hpl.jena.sparql.sse.Item)>($r3);

        $r6 = r5.<com.hp.hpl.jena.sparql.sse.builders.BuilderOp$20: com.hp.hpl.jena.sparql.sse.builders.BuilderOp this$0>;

        $r7 = virtualinvoke $r6.<com.hp.hpl.jena.sparql.sse.builders.BuilderOp: com.hp.hpl.jena.sparql.algebra.Op build(com.hp.hpl.jena.sparql.sse.ItemList,int)>(r0, 3);

        $r8 = new com.hp.hpl.jena.sparql.algebra.op.OpProcedure;

        specialinvoke $r8.<com.hp.hpl.jena.sparql.algebra.op.OpProcedure: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.expr.ExprList,com.hp.hpl.jena.sparql.algebra.Op)>($r2, $r4, $r7);

        return $r8;
    }
}
