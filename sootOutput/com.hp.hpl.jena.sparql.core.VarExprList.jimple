public class com.hp.hpl.jena.sparql.core.VarExprList extends java.lang.Object
{
    private java.util.List vars;
    private java.util.Map exprs;

    public void <init>(java.util.List)
    {
        com.hp.hpl.jena.sparql.core.VarExprList r0;
        java.util.List r1;
        java.util.HashMap $r2;

        r0 := @this: com.hp.hpl.jena.sparql.core.VarExprList;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.List vars> = r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.Map exprs> = $r2;

        return;
    }

    public void <init>(com.hp.hpl.jena.sparql.core.VarExprList)
    {
        java.util.List $r3;
        java.util.Map $r5;
        com.hp.hpl.jena.sparql.core.VarExprList r0, r2;
        java.util.HashMap $r4;
        java.util.ArrayList $r1;

        r0 := @this: com.hp.hpl.jena.sparql.core.VarExprList;

        r2 := @parameter0: com.hp.hpl.jena.sparql.core.VarExprList;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        $r3 = r2.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.List vars>;

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        r0.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.List vars> = $r1;

        $r4 = new java.util.HashMap;

        $r5 = r2.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.Map exprs>;

        specialinvoke $r4.<java.util.HashMap: void <init>(java.util.Map)>($r5);

        r0.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.Map exprs> = $r4;

        return;
    }

    public void <init>()
    {
        com.hp.hpl.jena.sparql.core.VarExprList r0;
        java.util.HashMap $r2;
        java.util.ArrayList $r1;

        r0 := @this: com.hp.hpl.jena.sparql.core.VarExprList;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.List vars> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.Map exprs> = $r2;

        return;
    }

    public void <init>(com.hp.hpl.jena.sparql.core.Var, com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.sparql.core.VarExprList r0;
        com.hp.hpl.jena.sparql.core.Var r1;
        com.hp.hpl.jena.sparql.expr.Expr r2;

        r0 := @this: com.hp.hpl.jena.sparql.core.VarExprList;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.Var;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.Expr;

        specialinvoke r0.<com.hp.hpl.jena.sparql.core.VarExprList: void <init>()>();

        virtualinvoke r0.<com.hp.hpl.jena.sparql.core.VarExprList: void add(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.sparql.expr.Expr)>(r1, r2);

        return;
    }

    public java.util.List getVars()
    {
        com.hp.hpl.jena.sparql.core.VarExprList r0;
        java.util.List $r1;

        r0 := @this: com.hp.hpl.jena.sparql.core.VarExprList;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.List vars>;

        return $r1;
    }

    public java.util.Map getExprs()
    {
        com.hp.hpl.jena.sparql.core.VarExprList r0;
        java.util.Map $r1;

        r0 := @this: com.hp.hpl.jena.sparql.core.VarExprList;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.Map exprs>;

        return $r1;
    }

    public boolean contains(com.hp.hpl.jena.sparql.core.Var)
    {
        java.util.List $r2;
        com.hp.hpl.jena.sparql.core.VarExprList r0;
        com.hp.hpl.jena.sparql.core.Var r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.core.VarExprList;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.Var;

        $r2 = r0.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.List vars>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean hasExpr(com.hp.hpl.jena.sparql.core.Var)
    {
        java.util.Map $r2;
        com.hp.hpl.jena.sparql.core.VarExprList r0;
        com.hp.hpl.jena.sparql.core.Var r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.core.VarExprList;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.Var;

        $r2 = r0.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.Map exprs>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public com.hp.hpl.jena.sparql.expr.Expr getExpr(com.hp.hpl.jena.sparql.core.Var)
    {
        com.hp.hpl.jena.sparql.expr.Expr $r4;
        java.util.Map $r2;
        com.hp.hpl.jena.sparql.core.VarExprList r0;
        java.lang.Object $r3;
        com.hp.hpl.jena.sparql.core.Var r1;

        r0 := @this: com.hp.hpl.jena.sparql.core.VarExprList;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.Var;

        $r2 = r0.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.Map exprs>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (com.hp.hpl.jena.sparql.expr.Expr) $r3;

        return $r4;
    }

    public com.hp.hpl.jena.graph.Node get(com.hp.hpl.jena.sparql.core.Var, com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.function.FunctionEnv)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r7;
        com.hp.hpl.jena.graph.Node $r8, $r9;
        com.hp.hpl.jena.sparql.core.Var r1;
        com.hp.hpl.jena.sparql.engine.binding.Binding r5;
        com.hp.hpl.jena.sparql.expr.Expr r4;
        com.hp.hpl.jena.sparql.expr.ExprEvalException $r10;
        java.util.Map $r2;
        com.hp.hpl.jena.sparql.core.VarExprList r0;
        java.lang.Object $r3;
        com.hp.hpl.jena.sparql.function.FunctionEnv r6;

        r0 := @this: com.hp.hpl.jena.sparql.core.VarExprList;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.Var;

        r5 := @parameter1: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r6 := @parameter2: com.hp.hpl.jena.sparql.function.FunctionEnv;

        $r2 = r0.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.Map exprs>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (com.hp.hpl.jena.sparql.expr.Expr) $r3;

        if r4 != null goto label1;

        $r9 = interfaceinvoke r5.<com.hp.hpl.jena.sparql.engine.binding.Binding: com.hp.hpl.jena.graph.Node get(com.hp.hpl.jena.sparql.core.Var)>(r1);

        return $r9;

     label1:
        $r7 = interfaceinvoke r4.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.function.FunctionEnv)>(r5, r6);

        if $r7 != null goto label3;

     label2:
        return null;

     label3:
        $r8 = virtualinvoke $r7.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

     label4:
        return $r8;

     label5:
        $r10 := @caughtexception;

        return null;

        catch com.hp.hpl.jena.sparql.expr.ExprEvalException from label1 to label2 with label5;
        catch com.hp.hpl.jena.sparql.expr.ExprEvalException from label3 to label4 with label5;
    }

    public void add(com.hp.hpl.jena.sparql.core.Var)
    {
        com.hp.hpl.jena.sparql.core.VarExprList r0;
        java.util.List $r2;
        com.hp.hpl.jena.sparql.core.Var r1;

        r0 := @this: com.hp.hpl.jena.sparql.core.VarExprList;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.Var;

        $r2 = r0.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.List vars>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void add(com.hp.hpl.jena.sparql.core.Var, com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.sparql.core.Var r1;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r5, $r6;
        com.hp.hpl.jena.sparql.expr.Expr r0;
        java.util.Map $r3, $r4;
        com.hp.hpl.jena.sparql.core.VarExprList r2;
        boolean $z0;

        r2 := @this: com.hp.hpl.jena.sparql.core.VarExprList;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.Var;

        r0 := @parameter1: com.hp.hpl.jena.sparql.expr.Expr;

        if r0 != null goto label1;

        virtualinvoke r2.<com.hp.hpl.jena.sparql.core.VarExprList: void add(com.hp.hpl.jena.sparql.core.Var)>(r1);

        return;

     label1:
        if r1 != null goto label2;

        $r6 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>("Attempt to add a named expression with a null variable");

        throw $r6;

     label2:
        $r3 = r2.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.Map exprs>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label3;

        $r5 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        specialinvoke $r5.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>("Attempt to assign an expression again");

        throw $r5;

     label3:
        virtualinvoke r2.<com.hp.hpl.jena.sparql.core.VarExprList: void add(com.hp.hpl.jena.sparql.core.Var)>(r1);

        $r4 = r2.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.Map exprs>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r0);

        return;
    }

    public void addAll(com.hp.hpl.jena.sparql.core.VarExprList)
    {
        java.util.Iterator $r2;
        com.hp.hpl.jena.sparql.core.Var r4;
        java.util.List $r1;
        com.hp.hpl.jena.sparql.expr.Expr $r5;
        com.hp.hpl.jena.sparql.core.VarExprList r0, r6;
        java.lang.Object $r3;
        boolean $z0;

        r6 := @this: com.hp.hpl.jena.sparql.core.VarExprList;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.VarExprList;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.List vars>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.hp.hpl.jena.sparql.core.Var) $r3;

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.VarExprList: com.hp.hpl.jena.sparql.expr.Expr getExpr(com.hp.hpl.jena.sparql.core.Var)>(r4);

        virtualinvoke r6.<com.hp.hpl.jena.sparql.core.VarExprList: void add(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.sparql.expr.Expr)>(r4, $r5);

        goto label1;

     label2:
        return;
    }

    public int size()
    {
        int $i0;
        com.hp.hpl.jena.sparql.core.VarExprList r0;
        java.util.List $r1;

        r0 := @this: com.hp.hpl.jena.sparql.core.VarExprList;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.List vars>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public boolean isEmpty()
    {
        com.hp.hpl.jena.sparql.core.VarExprList r0;
        java.util.List $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.core.VarExprList;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.List vars>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        return $z0;
    }

    public int hashCode()
    {
        java.util.List $r1;
        java.util.Map $r2;
        int $i0, $i1, i2;
        com.hp.hpl.jena.sparql.core.VarExprList r0;

        r0 := @this: com.hp.hpl.jena.sparql.core.VarExprList;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.List vars>;

        $i0 = interfaceinvoke $r1.<java.util.List: int hashCode()>();

        $r2 = r0.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.Map exprs>;

        $i1 = interfaceinvoke $r2.<java.util.Map: int hashCode()>();

        i2 = $i0 ^ $i1;

        return i2;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.List $r3, $r4;
        java.util.Map $r5, $r6;
        com.hp.hpl.jena.sparql.core.VarExprList r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.hp.hpl.jena.sparql.core.VarExprList;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof com.hp.hpl.jena.sparql.core.VarExprList;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (com.hp.hpl.jena.sparql.core.VarExprList) r1;

        $r4 = r0.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.List vars>;

        $r3 = r2.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.List vars>;

        $z1 = staticinvoke <org.apache.jena.atlas.lib.Lib: boolean equal(java.lang.Object,java.lang.Object)>($r4, $r3);

        if $z1 == 0 goto label3;

        $r6 = r0.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.Map exprs>;

        $r5 = r2.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.Map exprs>;

        $z2 = staticinvoke <org.apache.jena.atlas.lib.Lib: boolean equal(java.lang.Object,java.lang.Object)>($r6, $r5);

        if $z2 == 0 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        return $z3;
    }

    public java.lang.String toString()
    {
        java.util.List $r2;
        java.util.Map $r6;
        java.lang.StringBuilder $r0, $r4, $r5, $r8;
        com.hp.hpl.jena.sparql.core.VarExprList r1;
        java.lang.String $r3, $r7, $r9;

        r1 := @this: com.hp.hpl.jena.sparql.core.VarExprList;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = r1.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.List vars>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" // ");

        $r6 = r1.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.Map exprs>;

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }
}
