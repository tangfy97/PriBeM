public class org.apache.solr.common.util.IteratorChain extends java.lang.Object implements java.util.Iterator
{
    private final java.util.List iterators;
    private java.util.Iterator itit;
    private java.util.Iterator current;

    public void <init>()
    {
        org.apache.solr.common.util.IteratorChain r0;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.solr.common.util.IteratorChain;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.solr.common.util.IteratorChain: java.util.List iterators> = $r1;

        return;
    }

    public void addIterator(java.util.Iterator)
    {
        java.util.List $r3;
        java.util.Iterator $r1, r2;
        org.apache.solr.common.util.IteratorChain r0;
        java.lang.RuntimeException $r4;

        r0 := @this: org.apache.solr.common.util.IteratorChain;

        r2 := @parameter0: java.util.Iterator;

        $r1 = r0.<org.apache.solr.common.util.IteratorChain: java.util.Iterator itit>;

        if $r1 == null goto label1;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("all Iterators must be added before calling hasNext()");

        throw $r4;

     label1:
        $r3 = r0.<org.apache.solr.common.util.IteratorChain: java.util.List iterators>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2);

        return;
    }

    public boolean hasNext()
    {
        java.util.List $r2;
        java.util.Iterator $r1, $r3;
        org.apache.solr.common.util.IteratorChain r0;
        boolean $z0;

        r0 := @this: org.apache.solr.common.util.IteratorChain;

        $r1 = r0.<org.apache.solr.common.util.IteratorChain: java.util.Iterator itit>;

        if $r1 != null goto label1;

        $r2 = r0.<org.apache.solr.common.util.IteratorChain: java.util.List iterators>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        r0.<org.apache.solr.common.util.IteratorChain: java.util.Iterator itit> = $r3;

     label1:
        $z0 = specialinvoke r0.<org.apache.solr.common.util.IteratorChain: boolean recursiveHasNext()>();

        return $z0;
    }

    private boolean recursiveHasNext()
    {
        java.util.Iterator $r1, $r2, $r3, $r4, $r6;
        org.apache.solr.common.util.IteratorChain r0;
        java.lang.Object $r5;
        boolean $z0, $z1, z2;

        r0 := @this: org.apache.solr.common.util.IteratorChain;

        $r1 = r0.<org.apache.solr.common.util.IteratorChain: java.util.Iterator current>;

        if $r1 != null goto label2;

        $r3 = r0.<org.apache.solr.common.util.IteratorChain: java.util.Iterator itit>;

        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label1;

        $r4 = r0.<org.apache.solr.common.util.IteratorChain: java.util.Iterator itit>;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.util.Iterator) $r5;

        r0.<org.apache.solr.common.util.IteratorChain: java.util.Iterator current> = $r6;

        goto label2;

     label1:
        return 0;

     label2:
        $r2 = r0.<org.apache.solr.common.util.IteratorChain: java.util.Iterator current>;

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        z2 = $z0;

        if $z0 != 0 goto label3;

        r0.<org.apache.solr.common.util.IteratorChain: java.util.Iterator current> = null;

        z2 = specialinvoke r0.<org.apache.solr.common.util.IteratorChain: boolean recursiveHasNext()>();

     label3:
        return z2;
    }

    public java.lang.Object next()
    {
        java.util.Iterator $r1, $r2;
        org.apache.solr.common.util.IteratorChain r0;
        java.lang.Object $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: org.apache.solr.common.util.IteratorChain;

        $r1 = r0.<org.apache.solr.common.util.IteratorChain: java.util.Iterator current>;

        if $r1 != null goto label1;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("For an IteratorChain, hasNext() MUST be called before calling next()");

        throw $r4;

     label1:
        $r2 = r0.<org.apache.solr.common.util.IteratorChain: java.util.Iterator current>;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        return $r3;
    }

    public void remove()
    {
        java.lang.UnsupportedOperationException $r0;
        org.apache.solr.common.util.IteratorChain r1;

        r1 := @this: org.apache.solr.common.util.IteratorChain;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }
}
