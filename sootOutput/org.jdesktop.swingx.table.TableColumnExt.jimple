public class org.jdesktop.swingx.table.TableColumnExt extends javax.swing.table.TableColumn implements org.jdesktop.swingx.plaf.UIDependent
{
    protected boolean visible;
    protected java.lang.Object prototypeValue;
    protected java.util.Comparator comparator;
    protected boolean sortable;
    protected boolean editable;
    private java.lang.String toolTipText;
    protected java.util.Hashtable clientProperties;
    protected org.jdesktop.swingx.decorator.CompoundHighlighter compoundHighlighter;
    private javax.swing.event.ChangeListener highlighterChangeListener;
    private boolean ignoreHighlighterStateChange;

    public void <init>()
    {
        org.jdesktop.swingx.table.TableColumnExt r0;

        r0 := @this: org.jdesktop.swingx.table.TableColumnExt;

        specialinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: void <init>(int)>(0);

        return;
    }

    public void <init>(int)
    {
        int i0;
        org.jdesktop.swingx.table.TableColumnExt r0;

        r0 := @this: org.jdesktop.swingx.table.TableColumnExt;

        i0 := @parameter0: int;

        specialinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: void <init>(int,int)>(i0, 75);

        return;
    }

    public void <init>(int, int)
    {
        int i0, i1;
        org.jdesktop.swingx.table.TableColumnExt r0;

        r0 := @this: org.jdesktop.swingx.table.TableColumnExt;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: void <init>(int,int,javax.swing.table.TableCellRenderer,javax.swing.table.TableCellEditor)>(i0, i1, null, null);

        return;
    }

    public void <init>(int, int, javax.swing.table.TableCellRenderer, javax.swing.table.TableCellEditor)
    {
        javax.swing.table.TableCellEditor r2;
        int i0, i1;
        org.jdesktop.swingx.table.TableColumnExt r0;
        javax.swing.table.TableCellRenderer r1;

        r0 := @this: org.jdesktop.swingx.table.TableColumnExt;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: javax.swing.table.TableCellRenderer;

        r2 := @parameter3: javax.swing.table.TableCellEditor;

        specialinvoke r0.<javax.swing.table.TableColumn: void <init>(int,int,javax.swing.table.TableCellRenderer,javax.swing.table.TableCellEditor)>(i0, i1, r1, r2);

        r0.<org.jdesktop.swingx.table.TableColumnExt: boolean visible> = 1;

        r0.<org.jdesktop.swingx.table.TableColumnExt: boolean sortable> = 1;

        r0.<org.jdesktop.swingx.table.TableColumnExt: boolean editable> = 1;

        return;
    }

    public void <init>(org.jdesktop.swingx.table.TableColumnExt)
    {
        javax.swing.table.TableCellEditor $r3;
        int $i0, $i1;
        org.jdesktop.swingx.table.TableColumnExt r0, r1;
        javax.swing.table.TableCellRenderer $r2;

        r0 := @this: org.jdesktop.swingx.table.TableColumnExt;

        r1 := @parameter0: org.jdesktop.swingx.table.TableColumnExt;

        $i0 = virtualinvoke r1.<org.jdesktop.swingx.table.TableColumnExt: int getModelIndex()>();

        $i1 = virtualinvoke r1.<org.jdesktop.swingx.table.TableColumnExt: int getWidth()>();

        $r2 = virtualinvoke r1.<org.jdesktop.swingx.table.TableColumnExt: javax.swing.table.TableCellRenderer getCellRenderer()>();

        $r3 = virtualinvoke r1.<org.jdesktop.swingx.table.TableColumnExt: javax.swing.table.TableCellEditor getCellEditor()>();

        specialinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: void <init>(int,int,javax.swing.table.TableCellRenderer,javax.swing.table.TableCellEditor)>($i0, $i1, $r2, $r3);

        virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: void copyFrom(org.jdesktop.swingx.table.TableColumnExt)>(r1);

        return;
    }

    public transient void setHighlighters(org.jdesktop.swingx.decorator.Highlighter[])
    {
        org.jdesktop.swingx.decorator.CompoundHighlighter $r2;
        org.jdesktop.swingx.decorator.Highlighter[] $r1, r3, $r4;
        org.jdesktop.swingx.table.TableColumnExt r0;

        r0 := @this: org.jdesktop.swingx.table.TableColumnExt;

        r3 := @parameter0: org.jdesktop.swingx.decorator.Highlighter[];

        r0.<org.jdesktop.swingx.table.TableColumnExt: boolean ignoreHighlighterStateChange> = 1;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: org.jdesktop.swingx.decorator.Highlighter[] getHighlighters()>();

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: org.jdesktop.swingx.decorator.CompoundHighlighter getCompoundHighlighter()>();

        virtualinvoke $r2.<org.jdesktop.swingx.decorator.CompoundHighlighter: void setHighlighters(org.jdesktop.swingx.decorator.Highlighter[])>(r3);

        $r4 = virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: org.jdesktop.swingx.decorator.Highlighter[] getHighlighters()>();

        virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("highlighters", $r1, $r4);

        r0.<org.jdesktop.swingx.table.TableColumnExt: boolean ignoreHighlighterStateChange> = 0;

        return;
    }

    public org.jdesktop.swingx.decorator.Highlighter[] getHighlighters()
    {
        org.jdesktop.swingx.decorator.CompoundHighlighter $r1;
        org.jdesktop.swingx.table.TableColumnExt r0;
        org.jdesktop.swingx.decorator.Highlighter[] $r2;

        r0 := @this: org.jdesktop.swingx.table.TableColumnExt;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: org.jdesktop.swingx.decorator.CompoundHighlighter getCompoundHighlighter()>();

        $r2 = virtualinvoke $r1.<org.jdesktop.swingx.decorator.CompoundHighlighter: org.jdesktop.swingx.decorator.Highlighter[] getHighlighters()>();

        return $r2;
    }

    public void addHighlighter(org.jdesktop.swingx.decorator.Highlighter)
    {
        org.jdesktop.swingx.decorator.Highlighter r3;
        org.jdesktop.swingx.decorator.CompoundHighlighter $r2;
        org.jdesktop.swingx.decorator.Highlighter[] $r1, $r4;
        org.jdesktop.swingx.table.TableColumnExt r0;

        r0 := @this: org.jdesktop.swingx.table.TableColumnExt;

        r3 := @parameter0: org.jdesktop.swingx.decorator.Highlighter;

        r0.<org.jdesktop.swingx.table.TableColumnExt: boolean ignoreHighlighterStateChange> = 1;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: org.jdesktop.swingx.decorator.Highlighter[] getHighlighters()>();

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: org.jdesktop.swingx.decorator.CompoundHighlighter getCompoundHighlighter()>();

        virtualinvoke $r2.<org.jdesktop.swingx.decorator.CompoundHighlighter: void addHighlighter(org.jdesktop.swingx.decorator.Highlighter)>(r3);

        $r4 = virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: org.jdesktop.swingx.decorator.Highlighter[] getHighlighters()>();

        virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("highlighters", $r1, $r4);

        r0.<org.jdesktop.swingx.table.TableColumnExt: boolean ignoreHighlighterStateChange> = 0;

        return;
    }

    public void removeHighlighter(org.jdesktop.swingx.decorator.Highlighter)
    {
        org.jdesktop.swingx.decorator.Highlighter r3;
        org.jdesktop.swingx.decorator.CompoundHighlighter $r2;
        org.jdesktop.swingx.decorator.Highlighter[] $r1, $r4;
        org.jdesktop.swingx.table.TableColumnExt r0;

        r0 := @this: org.jdesktop.swingx.table.TableColumnExt;

        r3 := @parameter0: org.jdesktop.swingx.decorator.Highlighter;

        r0.<org.jdesktop.swingx.table.TableColumnExt: boolean ignoreHighlighterStateChange> = 1;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: org.jdesktop.swingx.decorator.Highlighter[] getHighlighters()>();

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: org.jdesktop.swingx.decorator.CompoundHighlighter getCompoundHighlighter()>();

        virtualinvoke $r2.<org.jdesktop.swingx.decorator.CompoundHighlighter: void removeHighlighter(org.jdesktop.swingx.decorator.Highlighter)>(r3);

        $r4 = virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: org.jdesktop.swingx.decorator.Highlighter[] getHighlighters()>();

        virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("highlighters", $r1, $r4);

        r0.<org.jdesktop.swingx.table.TableColumnExt: boolean ignoreHighlighterStateChange> = 0;

        return;
    }

    protected org.jdesktop.swingx.decorator.CompoundHighlighter getCompoundHighlighter()
    {
        org.jdesktop.swingx.decorator.CompoundHighlighter $r1, $r2, $r3, $r5;
        org.jdesktop.swingx.decorator.Highlighter[] $r4;
        javax.swing.event.ChangeListener $r6;
        org.jdesktop.swingx.table.TableColumnExt r0;

        r0 := @this: org.jdesktop.swingx.table.TableColumnExt;

        $r1 = r0.<org.jdesktop.swingx.table.TableColumnExt: org.jdesktop.swingx.decorator.CompoundHighlighter compoundHighlighter>;

        if $r1 != null goto label1;

        $r3 = new org.jdesktop.swingx.decorator.CompoundHighlighter;

        $r4 = newarray (org.jdesktop.swingx.decorator.Highlighter)[0];

        specialinvoke $r3.<org.jdesktop.swingx.decorator.CompoundHighlighter: void <init>(org.jdesktop.swingx.decorator.Highlighter[])>($r4);

        r0.<org.jdesktop.swingx.table.TableColumnExt: org.jdesktop.swingx.decorator.CompoundHighlighter compoundHighlighter> = $r3;

        $r5 = r0.<org.jdesktop.swingx.table.TableColumnExt: org.jdesktop.swingx.decorator.CompoundHighlighter compoundHighlighter>;

        $r6 = virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: javax.swing.event.ChangeListener getHighlighterChangeListener()>();

        virtualinvoke $r5.<org.jdesktop.swingx.decorator.CompoundHighlighter: void addChangeListener(javax.swing.event.ChangeListener)>($r6);

     label1:
        $r2 = r0.<org.jdesktop.swingx.table.TableColumnExt: org.jdesktop.swingx.decorator.CompoundHighlighter compoundHighlighter>;

        return $r2;
    }

    protected javax.swing.event.ChangeListener getHighlighterChangeListener()
    {
        javax.swing.event.ChangeListener $r1, $r2, $r3;
        org.jdesktop.swingx.table.TableColumnExt r0;

        r0 := @this: org.jdesktop.swingx.table.TableColumnExt;

        $r1 = r0.<org.jdesktop.swingx.table.TableColumnExt: javax.swing.event.ChangeListener highlighterChangeListener>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: javax.swing.event.ChangeListener createHighlighterChangeListener()>();

        r0.<org.jdesktop.swingx.table.TableColumnExt: javax.swing.event.ChangeListener highlighterChangeListener> = $r3;

     label1:
        $r2 = r0.<org.jdesktop.swingx.table.TableColumnExt: javax.swing.event.ChangeListener highlighterChangeListener>;

        return $r2;
    }

    protected javax.swing.event.ChangeListener createHighlighterChangeListener()
    {
        org.jdesktop.swingx.table.TableColumnExt$1 $r0;
        org.jdesktop.swingx.table.TableColumnExt r1;

        r1 := @this: org.jdesktop.swingx.table.TableColumnExt;

        $r0 = new org.jdesktop.swingx.table.TableColumnExt$1;

        specialinvoke $r0.<org.jdesktop.swingx.table.TableColumnExt$1: void <init>(org.jdesktop.swingx.table.TableColumnExt)>(r1);

        return $r0;
    }

    public boolean getResizable()
    {
        int $i0, $i1;
        org.jdesktop.swingx.table.TableColumnExt r0;
        boolean $z0, $z1;

        r0 := @this: org.jdesktop.swingx.table.TableColumnExt;

        $z0 = specialinvoke r0.<javax.swing.table.TableColumn: boolean getResizable()>();

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: int getMinWidth()>();

        $i1 = virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: int getMaxWidth()>();

        if $i0 >= $i1 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public void setEditable(boolean)
    {
        java.lang.Boolean $r1, $r2;
        org.jdesktop.swingx.table.TableColumnExt r0;
        boolean z0, z1;

        r0 := @this: org.jdesktop.swingx.table.TableColumnExt;

        z1 := @parameter0: boolean;

        z0 = r0.<org.jdesktop.swingx.table.TableColumnExt: boolean editable>;

        r0.<org.jdesktop.swingx.table.TableColumnExt: boolean editable> = z1;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("editable", $r1, $r2);

        return;
    }

    public boolean isEditable()
    {
        org.jdesktop.swingx.table.TableColumnExt r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.table.TableColumnExt;

        $z0 = r0.<org.jdesktop.swingx.table.TableColumnExt: boolean editable>;

        return $z0;
    }

    public void setPrototypeValue(java.lang.Object)
    {
        java.lang.Object r1, r2;
        org.jdesktop.swingx.table.TableColumnExt r0;

        r0 := @this: org.jdesktop.swingx.table.TableColumnExt;

        r2 := @parameter0: java.lang.Object;

        r1 = r0.<org.jdesktop.swingx.table.TableColumnExt: java.lang.Object prototypeValue>;

        r0.<org.jdesktop.swingx.table.TableColumnExt: java.lang.Object prototypeValue> = r2;

        virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("prototypeValue", r1, r2);

        return;
    }

    public java.lang.Object getPrototypeValue()
    {
        java.lang.Object $r1;
        org.jdesktop.swingx.table.TableColumnExt r0;

        r0 := @this: org.jdesktop.swingx.table.TableColumnExt;

        $r1 = r0.<org.jdesktop.swingx.table.TableColumnExt: java.lang.Object prototypeValue>;

        return $r1;
    }

    public void setComparator(java.util.Comparator)
    {
        org.jdesktop.swingx.table.TableColumnExt r0;
        java.util.Comparator $r1, r2, $r3;

        r0 := @this: org.jdesktop.swingx.table.TableColumnExt;

        r2 := @parameter0: java.util.Comparator;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: java.util.Comparator getComparator()>();

        r0.<org.jdesktop.swingx.table.TableColumnExt: java.util.Comparator comparator> = r2;

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: java.util.Comparator getComparator()>();

        virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("comparator", $r1, $r3);

        return;
    }

    public java.util.Comparator getComparator()
    {
        org.jdesktop.swingx.table.TableColumnExt r0;
        java.util.Comparator $r1;

        r0 := @this: org.jdesktop.swingx.table.TableColumnExt;

        $r1 = r0.<org.jdesktop.swingx.table.TableColumnExt: java.util.Comparator comparator>;

        return $r1;
    }

    public void setSortable(boolean)
    {
        java.lang.Boolean $r1, $r2;
        org.jdesktop.swingx.table.TableColumnExt r0;
        boolean $z0, z1, $z2;

        r0 := @this: org.jdesktop.swingx.table.TableColumnExt;

        z1 := @parameter0: boolean;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: boolean isSortable()>();

        r0.<org.jdesktop.swingx.table.TableColumnExt: boolean sortable> = z1;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $z2 = virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: boolean isSortable()>();

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("sortable", $r1, $r2);

        return;
    }

    public boolean isSortable()
    {
        org.jdesktop.swingx.table.TableColumnExt r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.table.TableColumnExt;

        $z0 = r0.<org.jdesktop.swingx.table.TableColumnExt: boolean sortable>;

        return $z0;
    }

    public void setToolTipText(java.lang.String)
    {
        java.lang.String $r1, r2, $r3;
        org.jdesktop.swingx.table.TableColumnExt r0;

        r0 := @this: org.jdesktop.swingx.table.TableColumnExt;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: java.lang.String getToolTipText()>();

        r0.<org.jdesktop.swingx.table.TableColumnExt: java.lang.String toolTipText> = r2;

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: java.lang.String getToolTipText()>();

        virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("toolTipText", $r1, $r3);

        return;
    }

    public java.lang.String getToolTipText()
    {
        java.lang.String $r1;
        org.jdesktop.swingx.table.TableColumnExt r0;

        r0 := @this: org.jdesktop.swingx.table.TableColumnExt;

        $r1 = r0.<org.jdesktop.swingx.table.TableColumnExt: java.lang.String toolTipText>;

        return $r1;
    }

    public void setTitle(java.lang.String)
    {
        java.lang.String r1;
        org.jdesktop.swingx.table.TableColumnExt r0;

        r0 := @this: org.jdesktop.swingx.table.TableColumnExt;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: void setHeaderValue(java.lang.Object)>(r1);

        return;
    }

    public java.lang.String getTitle()
    {
        java.lang.Object $r1;
        java.lang.String $r2;
        org.jdesktop.swingx.table.TableColumnExt r0;

        r0 := @this: org.jdesktop.swingx.table.TableColumnExt;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: java.lang.Object getHeaderValue()>();

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public void setVisible(boolean)
    {
        java.lang.Boolean $r1, $r2;
        org.jdesktop.swingx.table.TableColumnExt r0;
        boolean z0, z1;

        r0 := @this: org.jdesktop.swingx.table.TableColumnExt;

        z1 := @parameter0: boolean;

        z0 = r0.<org.jdesktop.swingx.table.TableColumnExt: boolean visible>;

        r0.<org.jdesktop.swingx.table.TableColumnExt: boolean visible> = z1;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("visible", $r1, $r2);

        return;
    }

    public boolean isVisible()
    {
        org.jdesktop.swingx.table.TableColumnExt r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.table.TableColumnExt;

        $z0 = r0.<org.jdesktop.swingx.table.TableColumnExt: boolean visible>;

        return $z0;
    }

    public void putClientProperty(java.lang.Object, java.lang.Object)
    {
        org.jdesktop.swingx.table.TableColumnExt r2;
        java.lang.IllegalArgumentException $r8;
        java.lang.Object r0, r1, $r3, $r7;
        java.lang.String $r5;
        java.util.Hashtable $r4, $r6;

        r2 := @this: org.jdesktop.swingx.table.TableColumnExt;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null key");

        throw $r8;

     label1:
        if r1 != null goto label2;

        $r7 = virtualinvoke r2.<org.jdesktop.swingx.table.TableColumnExt: java.lang.Object getClientProperty(java.lang.Object)>(r0);

        if $r7 != null goto label2;

        return;

     label2:
        $r3 = virtualinvoke r2.<org.jdesktop.swingx.table.TableColumnExt: java.lang.Object getClientProperty(java.lang.Object)>(r0);

        if r1 != null goto label3;

        $r6 = specialinvoke r2.<org.jdesktop.swingx.table.TableColumnExt: java.util.Hashtable getClientProperties()>();

        virtualinvoke $r6.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>(r0);

        goto label4;

     label3:
        $r4 = specialinvoke r2.<org.jdesktop.swingx.table.TableColumnExt: java.util.Hashtable getClientProperties()>();

        virtualinvoke $r4.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1);

     label4:
        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r2.<org.jdesktop.swingx.table.TableColumnExt: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>($r5, $r3, r1);

        return;
    }

    public java.lang.Object getClientProperty(java.lang.Object)
    {
        java.lang.Object r0, $r4;
        org.jdesktop.swingx.table.TableColumnExt r1;
        java.util.Hashtable $r2, $r3;

        r1 := @this: org.jdesktop.swingx.table.TableColumnExt;

        r0 := @parameter0: java.lang.Object;

        if r0 == null goto label1;

        $r2 = r1.<org.jdesktop.swingx.table.TableColumnExt: java.util.Hashtable clientProperties>;

        if $r2 != null goto label2;

     label1:
        $r4 = null;

        goto label3;

     label2:
        $r3 = r1.<org.jdesktop.swingx.table.TableColumnExt: java.util.Hashtable clientProperties>;

        $r4 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0);

     label3:
        return $r4;
    }

    private java.util.Hashtable getClientProperties()
    {
        org.jdesktop.swingx.table.TableColumnExt r0;
        java.util.Hashtable $r1, $r2, $r3;

        r0 := @this: org.jdesktop.swingx.table.TableColumnExt;

        $r1 = r0.<org.jdesktop.swingx.table.TableColumnExt: java.util.Hashtable clientProperties>;

        if $r1 != null goto label1;

        $r3 = new java.util.Hashtable;

        specialinvoke $r3.<java.util.Hashtable: void <init>()>();

        r0.<org.jdesktop.swingx.table.TableColumnExt: java.util.Hashtable clientProperties> = $r3;

     label1:
        $r2 = r0.<org.jdesktop.swingx.table.TableColumnExt: java.util.Hashtable clientProperties>;

        return $r2;
    }

    protected void copyFrom(org.jdesktop.swingx.table.TableColumnExt)
    {
        org.jdesktop.swingx.decorator.Highlighter[] $r8;
        org.jdesktop.swingx.table.TableColumnExt r0, r1;
        org.jdesktop.swingx.decorator.CompoundHighlighter $r7;
        int $i0, $i1, $i2;
        java.lang.String $r3;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r2, $r4, $r5;
        java.util.Comparator $r6;

        r0 := @this: org.jdesktop.swingx.table.TableColumnExt;

        r1 := @parameter0: org.jdesktop.swingx.table.TableColumnExt;

        $z0 = virtualinvoke r1.<org.jdesktop.swingx.table.TableColumnExt: boolean isEditable()>();

        virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: void setEditable(boolean)>($z0);

        $r2 = virtualinvoke r1.<org.jdesktop.swingx.table.TableColumnExt: java.lang.Object getHeaderValue()>();

        virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: void setHeaderValue(java.lang.Object)>($r2);

        $r3 = virtualinvoke r1.<org.jdesktop.swingx.table.TableColumnExt: java.lang.String getToolTipText()>();

        virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: void setToolTipText(java.lang.String)>($r3);

        $r4 = virtualinvoke r1.<org.jdesktop.swingx.table.TableColumnExt: java.lang.Object getIdentifier()>();

        virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: void setIdentifier(java.lang.Object)>($r4);

        $i0 = virtualinvoke r1.<org.jdesktop.swingx.table.TableColumnExt: int getMaxWidth()>();

        virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: void setMaxWidth(int)>($i0);

        $i1 = virtualinvoke r1.<org.jdesktop.swingx.table.TableColumnExt: int getMinWidth()>();

        virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: void setMinWidth(int)>($i1);

        $i2 = virtualinvoke r1.<org.jdesktop.swingx.table.TableColumnExt: int getPreferredWidth()>();

        virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: void setPreferredWidth(int)>($i2);

        $r5 = virtualinvoke r1.<org.jdesktop.swingx.table.TableColumnExt: java.lang.Object getPrototypeValue()>();

        virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: void setPrototypeValue(java.lang.Object)>($r5);

        $z1 = r1.<org.jdesktop.swingx.table.TableColumnExt: boolean isResizable>;

        virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: void setResizable(boolean)>($z1);

        $z2 = virtualinvoke r1.<org.jdesktop.swingx.table.TableColumnExt: boolean isVisible()>();

        virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: void setVisible(boolean)>($z2);

        $z3 = virtualinvoke r1.<org.jdesktop.swingx.table.TableColumnExt: boolean isSortable()>();

        virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: void setSortable(boolean)>($z3);

        $r6 = virtualinvoke r1.<org.jdesktop.swingx.table.TableColumnExt: java.util.Comparator getComparator()>();

        virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: void setComparator(java.util.Comparator)>($r6);

        virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: void copyClientPropertiesFrom(org.jdesktop.swingx.table.TableColumnExt)>(r1);

        $r7 = r1.<org.jdesktop.swingx.table.TableColumnExt: org.jdesktop.swingx.decorator.CompoundHighlighter compoundHighlighter>;

        if $r7 == null goto label1;

        $r8 = virtualinvoke r1.<org.jdesktop.swingx.table.TableColumnExt: org.jdesktop.swingx.decorator.Highlighter[] getHighlighters()>();

        virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: void setHighlighters(org.jdesktop.swingx.decorator.Highlighter[])>($r8);

     label1:
        return;
    }

    protected void copyClientPropertiesFrom(org.jdesktop.swingx.table.TableColumnExt)
    {
        java.util.Iterator $r4;
        java.util.Set $r3;
        org.jdesktop.swingx.table.TableColumnExt r0, r6;
        java.lang.Object $r5, $r7;
        java.util.Hashtable $r1, $r2;
        boolean $z0;

        r6 := @this: org.jdesktop.swingx.table.TableColumnExt;

        r0 := @parameter0: org.jdesktop.swingx.table.TableColumnExt;

        $r1 = r0.<org.jdesktop.swingx.table.TableColumnExt: java.util.Hashtable clientProperties>;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = r0.<org.jdesktop.swingx.table.TableColumnExt: java.util.Hashtable clientProperties>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.util.Set keySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r7 = virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: java.lang.Object getClientProperty(java.lang.Object)>($r5);

        virtualinvoke r6.<org.jdesktop.swingx.table.TableColumnExt: void putClientProperty(java.lang.Object,java.lang.Object)>($r5, $r7);

        goto label2;

     label3:
        return;
    }

    protected void firePropertyChange(java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.beans.PropertyChangeListener[] $r3;
        org.jdesktop.swingx.table.TableColumnExt r2;
        java.beans.PropertyChangeListener $r6;
        int $i0, $i1, i2;
        java.lang.Object r0, r1;
        java.lang.String r5;
        java.beans.PropertyChangeEvent $r4;
        boolean $z0;

        r2 := @this: org.jdesktop.swingx.table.TableColumnExt;

        r5 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Object;

        r1 := @parameter2: java.lang.Object;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

     label1:
        if r0 != null goto label4;

        if r1 == null goto label4;

     label2:
        $r3 = virtualinvoke r2.<org.jdesktop.swingx.table.TableColumnExt: java.beans.PropertyChangeListener[] getPropertyChangeListeners()>();

        if $r3 == null goto label4;

        $i0 = lengthof $r3;

        if $i0 == 0 goto label4;

        $r4 = new java.beans.PropertyChangeEvent;

        specialinvoke $r4.<java.beans.PropertyChangeEvent: void <init>(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Object)>(r2, r5, r0, r1);

        i2 = 0;

     label3:
        $i1 = lengthof $r3;

        if i2 >= $i1 goto label4;

        $r6 = $r3[i2];

        interfaceinvoke $r6.<java.beans.PropertyChangeListener: void propertyChange(java.beans.PropertyChangeEvent)>($r4);

        i2 = i2 + 1;

        goto label3;

     label4:
        return;
    }

    public void updateUI()
    {
        javax.swing.table.TableCellEditor $r3;
        org.jdesktop.swingx.table.TableColumnExt r0;
        javax.swing.table.TableCellRenderer $r1, $r2;

        r0 := @this: org.jdesktop.swingx.table.TableColumnExt;

        specialinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: void updateHighlighterUI()>();

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: javax.swing.table.TableCellRenderer getCellRenderer()>();

        specialinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: void updateRendererUI(javax.swing.table.TableCellRenderer)>($r1);

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: javax.swing.table.TableCellRenderer getHeaderRenderer()>();

        specialinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: void updateRendererUI(javax.swing.table.TableCellRenderer)>($r2);

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: javax.swing.table.TableCellEditor getCellEditor()>();

        specialinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: void updateEditorUI(javax.swing.table.TableCellEditor)>($r3);

        return;
    }

    private void updateEditorUI(javax.swing.table.TableCellEditor)
    {
        org.jdesktop.swingx.table.TableColumnExt r3;
        java.awt.Component $r1;
        java.lang.Exception $r2;
        javax.swing.table.TableCellEditor r0;
        int $i1, $i3;
        boolean $z0, $z1;

        r3 := @this: org.jdesktop.swingx.table.TableColumnExt;

        r0 := @parameter0: javax.swing.table.TableCellEditor;

        if r0 != null goto label1;

        return;

     label1:
        $z0 = r0 instanceof javax.swing.JComponent;

        if $z0 != 0 goto label2;

        $z1 = r0 instanceof javax.swing.DefaultCellEditor;

        if $z1 == 0 goto label3;

     label2:
        return;

     label3:
        $i1 = (int) -1;

        $i3 = (int) -1;

        $r1 = interfaceinvoke r0.<javax.swing.table.TableCellEditor: java.awt.Component getTableCellEditorComponent(javax.swing.JTable,java.lang.Object,boolean,int,int)>(null, null, 0, $i1, $i3);

        if $r1 == null goto label4;

        staticinvoke <javax.swing.SwingUtilities: void updateComponentTreeUI(java.awt.Component)>($r1);

     label4:
        goto label6;

     label5:
        $r2 := @caughtexception;

     label6:
        return;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    private void updateRendererUI(javax.swing.table.TableCellRenderer)
    {
        org.jdesktop.swingx.renderer.ComponentProvider $r2;
        javax.swing.table.TableCellRenderer r0;
        org.jdesktop.swingx.table.TableColumnExt r4;
        java.awt.Component r5;
        java.lang.Exception $r3;
        org.jdesktop.swingx.renderer.AbstractRenderer $r1;
        int $i1, $i3;
        boolean $z0, $z1;

        r4 := @this: org.jdesktop.swingx.table.TableColumnExt;

        r0 := @parameter0: javax.swing.table.TableCellRenderer;

        if r0 != null goto label1;

        return;

     label1:
        $z0 = r0 instanceof javax.swing.JComponent;

        if $z0 == 0 goto label2;

        return;

     label2:
        r5 = null;

        $z1 = r0 instanceof org.jdesktop.swingx.renderer.AbstractRenderer;

        if $z1 == 0 goto label3;

        $r1 = (org.jdesktop.swingx.renderer.AbstractRenderer) r0;

        $r2 = virtualinvoke $r1.<org.jdesktop.swingx.renderer.AbstractRenderer: org.jdesktop.swingx.renderer.ComponentProvider getComponentProvider()>();

        r5 = virtualinvoke $r2.<org.jdesktop.swingx.renderer.ComponentProvider: javax.swing.JComponent getRendererComponent(org.jdesktop.swingx.renderer.CellContext)>(null);

        goto label6;

     label3:
        $i1 = (int) -1;

        $i3 = (int) -1;

        r5 = interfaceinvoke r0.<javax.swing.table.TableCellRenderer: java.awt.Component getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int)>(null, null, 0, 0, $i1, $i3);

     label4:
        goto label6;

     label5:
        $r3 := @caughtexception;

     label6:
        if r5 == null goto label7;

        staticinvoke <javax.swing.SwingUtilities: void updateComponentTreeUI(java.awt.Component)>(r5);

     label7:
        return;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    private void updateHighlighterUI()
    {
        org.jdesktop.swingx.decorator.CompoundHighlighter $r1, $r2;
        org.jdesktop.swingx.table.TableColumnExt r0;

        r0 := @this: org.jdesktop.swingx.table.TableColumnExt;

        $r1 = r0.<org.jdesktop.swingx.table.TableColumnExt: org.jdesktop.swingx.decorator.CompoundHighlighter compoundHighlighter>;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = r0.<org.jdesktop.swingx.table.TableColumnExt: org.jdesktop.swingx.decorator.CompoundHighlighter compoundHighlighter>;

        virtualinvoke $r2.<org.jdesktop.swingx.decorator.CompoundHighlighter: void updateUI()>();

        return;
    }

    static boolean access$000(org.jdesktop.swingx.table.TableColumnExt)
    {
        org.jdesktop.swingx.table.TableColumnExt r0;
        boolean $z0;

        r0 := @parameter0: org.jdesktop.swingx.table.TableColumnExt;

        $z0 = r0.<org.jdesktop.swingx.table.TableColumnExt: boolean ignoreHighlighterStateChange>;

        return $z0;
    }
}
