public class org.apache.jena.atlas.json.io.parser.TokenizerJSON extends java.lang.Object implements org.apache.jena.riot.tokens.Tokenizer
{
    public static final int CTRL_CHAR;
    private org.apache.jena.riot.tokens.Token token;
    private final java.lang.StringBuilder sb;
    private final org.apache.jena.atlas.io.PeekReader reader;
    private boolean finished;

    public void <init>(org.apache.jena.atlas.io.PeekReader)
    {
        org.apache.jena.atlas.json.io.parser.TokenizerJSON r0;
        java.lang.StringBuilder $r1;
        org.apache.jena.atlas.io.PeekReader r2;

        r0 := @this: org.apache.jena.atlas.json.io.parser.TokenizerJSON;

        r2 := @parameter0: org.apache.jena.atlas.io.PeekReader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token> = null;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: java.lang.StringBuilder sb> = $r1;

        r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: boolean finished> = 0;

        r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader> = r2;

        return;
    }

    public final boolean hasNext()
    {
        org.apache.jena.atlas.io.PeekReader $r2;
        org.apache.jena.riot.tokens.Token $r1, $r3, $r4;
        org.apache.jena.atlas.json.io.parser.TokenizerJSON r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.jena.atlas.json.io.parser.TokenizerJSON;

        $z0 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: boolean finished>;

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r1 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token>;

        if $r1 == null goto label2;

        return 1;

     label2:
        specialinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: void skip()>();

        $r2 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        $z1 = virtualinvoke $r2.<org.apache.jena.atlas.io.PeekReader: boolean eof()>();

        if $z1 == 0 goto label3;

        return 0;

     label3:
        $r3 = specialinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token parseToken()>();

        r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token> = $r3;

        $r4 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token>;

        if $r4 == null goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        return $z2;
    }

    public final boolean eof()
    {
        org.apache.jena.atlas.json.io.parser.TokenizerJSON r0;
        boolean $z0;

        r0 := @this: org.apache.jena.atlas.json.io.parser.TokenizerJSON;

        $z0 = virtualinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: boolean hasNext()>();

        return $z0;
    }

    public final org.apache.jena.riot.tokens.Token next()
    {
        org.apache.jena.atlas.json.io.parser.TokenizerJSON r0;
        org.apache.jena.riot.tokens.Token r1;
        java.util.NoSuchElementException $r2;
        boolean $z0;

        r0 := @this: org.apache.jena.atlas.json.io.parser.TokenizerJSON;

        $z0 = virtualinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r2 = new java.util.NoSuchElementException;

        specialinvoke $r2.<java.util.NoSuchElementException: void <init>()>();

        throw $r2;

     label1:
        r1 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token>;

        r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token> = null;

        return r1;
    }

    public final org.apache.jena.riot.tokens.Token peek()
    {
        org.apache.jena.atlas.json.io.parser.TokenizerJSON r0;
        org.apache.jena.riot.tokens.Token $r1;
        boolean $z0;

        r0 := @this: org.apache.jena.atlas.json.io.parser.TokenizerJSON;

        $z0 = virtualinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r1 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token>;

        return $r1;
    }

    public void remove()
    {
        org.apache.jena.atlas.json.io.parser.TokenizerJSON r1;
        java.lang.UnsupportedOperationException $r0;

        r1 := @this: org.apache.jena.atlas.json.io.parser.TokenizerJSON;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    private org.apache.jena.riot.tokens.Token parseToken()
    {
        org.apache.jena.atlas.json.io.parser.TokenizerJSON r0;
        long $l0, $l1;
        java.lang.String $r6, $r14;
        org.apache.jena.riot.tokens.TokenType $r18, $r22, $r26, $r30, $r34, $r38, $r42, $r46, $r49, $r53, $r57, $r61, $r67, $r72, $r73;
        org.apache.jena.atlas.io.PeekReader $r2, $r3, $r4, $r9, $r10, $r12, $r17, $r21, $r25, $r29, $r33, $r37, $r41, $r45, $r52, $r56, $r60, $r66, $r69;
        boolean $z0;
        org.apache.jena.riot.tokens.Token $r5, $r7, $r8, $r11, $r13, $r15, $r16, $r19, $r20, $r23, $r24, $r27, $r28, $r31, $r32, $r35, $r36, $r39, $r40, $r43, $r44, $r47, $r48, $r50, $r51, $r54, $r55, $r58, $r59, $r62, $r63, $r64, $r65, $r68, $r70, $r71, $r74, $r75;
        int $i2, $i3, $i4, $i5, $i8, $i9;
        char $c6;

        r0 := @this: org.apache.jena.atlas.json.io.parser.TokenizerJSON;

        $r75 = new org.apache.jena.riot.tokens.Token;

        $l0 = virtualinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: long getLine()>();

        $l1 = virtualinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: long getColumn()>();

        specialinvoke $r75.<org.apache.jena.riot.tokens.Token: void <init>(long,long)>($l0, $l1);

        r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token> = $r75;

        $r2 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        $i2 = virtualinvoke $r2.<org.apache.jena.atlas.io.PeekReader: int peekChar()>();

        if $i2 == 39 goto label01;

        if $i2 != 34 goto label09;

     label01:
        $r3 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        virtualinvoke $r3.<org.apache.jena.atlas.io.PeekReader: int readChar()>();

        $r4 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        $i3 = virtualinvoke $r4.<org.apache.jena.atlas.io.PeekReader: int peekChar()>();

        if $i3 != $i2 goto label05;

        $r9 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        virtualinvoke $r9.<org.apache.jena.atlas.io.PeekReader: int readChar()>();

        $r10 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        $i4 = virtualinvoke $r10.<org.apache.jena.atlas.io.PeekReader: int peekChar()>();

        if $i4 != $i2 goto label04;

        $r12 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        virtualinvoke $r12.<org.apache.jena.atlas.io.PeekReader: int readChar()>();

        $r13 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token>;

        $r14 = specialinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: java.lang.String readLong(int,boolean)>($i2, 0);

        virtualinvoke $r13.<org.apache.jena.riot.tokens.Token: org.apache.jena.riot.tokens.Token setImage(java.lang.String)>($r14);

        if $i2 != 39 goto label02;

        $r72 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType LONG_STRING1>;

        goto label03;

     label02:
        $r72 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType LONG_STRING2>;

     label03:
        $r15 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token>;

        virtualinvoke $r15.<org.apache.jena.riot.tokens.Token: org.apache.jena.riot.tokens.Token setType(org.apache.jena.riot.tokens.TokenType)>($r72);

        $r16 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token>;

        return $r16;

     label04:
        $r11 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token>;

        virtualinvoke $r11.<org.apache.jena.riot.tokens.Token: org.apache.jena.riot.tokens.Token setImage(java.lang.String)>("");

        goto label06;

     label05:
        $r5 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token>;

        $r6 = specialinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: java.lang.String allBetween(int,int,boolean,boolean)>($i2, $i2, 1, 0);

        virtualinvoke $r5.<org.apache.jena.riot.tokens.Token: org.apache.jena.riot.tokens.Token setImage(java.lang.String)>($r6);

     label06:
        $r7 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token>;

        if $i2 != 39 goto label07;

        $r73 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType STRING1>;

        goto label08;

     label07:
        $r73 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType STRING2>;

     label08:
        virtualinvoke $r7.<org.apache.jena.riot.tokens.Token: org.apache.jena.riot.tokens.Token setType(org.apache.jena.riot.tokens.TokenType)>($r73);

        $r8 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token>;

        return $r8;

     label09:
        if $i2 != 42 goto label11;

        $r66 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        virtualinvoke $r66.<org.apache.jena.atlas.io.PeekReader: int readChar()>();

        $r68 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token>;

        $r67 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType CNTRL>;

        virtualinvoke $r68.<org.apache.jena.riot.tokens.Token: org.apache.jena.riot.tokens.Token setType(org.apache.jena.riot.tokens.TokenType)>($r67);

        $r69 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        $i5 = virtualinvoke $r69.<org.apache.jena.atlas.io.PeekReader: int readChar()>();

        $i8 = (int) -1;

        if $i5 != $i8 goto label10;

        specialinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: void exception(java.lang.String)>("EOF found after 42");

     label10:
        $r70 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token>;

        $c6 = (char) $i5;

        $i9 = (int) $c6;

        $r70.<org.apache.jena.riot.tokens.Token: int cntrlCode> = $i9;

        $r71 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token>;

        return $r71;

     label11:
        lookupswitch($i2)
        {
            case 40: goto label17;
            case 41: goto label18;
            case 44: goto label14;
            case 46: goto label12;
            case 58: goto label21;
            case 59: goto label13;
            case 60: goto label22;
            case 62: goto label23;
            case 91: goto label19;
            case 93: goto label20;
            case 123: goto label15;
            case 125: goto label16;
            default: goto label24;
        };

     label12:
        $r50 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token>;

        $r49 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType DOT>;

        virtualinvoke $r50.<org.apache.jena.riot.tokens.Token: org.apache.jena.riot.tokens.Token setType(org.apache.jena.riot.tokens.TokenType)>($r49);

        $r51 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token>;

        return $r51;

     label13:
        $r41 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        virtualinvoke $r41.<org.apache.jena.atlas.io.PeekReader: int readChar()>();

        $r43 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token>;

        $r42 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType SEMICOLON>;

        virtualinvoke $r43.<org.apache.jena.riot.tokens.Token: org.apache.jena.riot.tokens.Token setType(org.apache.jena.riot.tokens.TokenType)>($r42);

        $r44 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token>;

        return $r44;

     label14:
        $r52 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        virtualinvoke $r52.<org.apache.jena.atlas.io.PeekReader: int readChar()>();

        $r54 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token>;

        $r53 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType COMMA>;

        virtualinvoke $r54.<org.apache.jena.riot.tokens.Token: org.apache.jena.riot.tokens.Token setType(org.apache.jena.riot.tokens.TokenType)>($r53);

        $r55 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token>;

        return $r55;

     label15:
        $r21 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        virtualinvoke $r21.<org.apache.jena.atlas.io.PeekReader: int readChar()>();

        $r23 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token>;

        $r22 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType LBRACE>;

        virtualinvoke $r23.<org.apache.jena.riot.tokens.Token: org.apache.jena.riot.tokens.Token setType(org.apache.jena.riot.tokens.TokenType)>($r22);

        $r24 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token>;

        return $r24;

     label16:
        $r17 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        virtualinvoke $r17.<org.apache.jena.atlas.io.PeekReader: int readChar()>();

        $r19 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token>;

        $r18 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType RBRACE>;

        virtualinvoke $r19.<org.apache.jena.riot.tokens.Token: org.apache.jena.riot.tokens.Token setType(org.apache.jena.riot.tokens.TokenType)>($r18);

        $r20 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token>;

        return $r20;

     label17:
        $r60 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        virtualinvoke $r60.<org.apache.jena.atlas.io.PeekReader: int readChar()>();

        $r62 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token>;

        $r61 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType LPAREN>;

        virtualinvoke $r62.<org.apache.jena.riot.tokens.Token: org.apache.jena.riot.tokens.Token setType(org.apache.jena.riot.tokens.TokenType)>($r61);

        $r63 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token>;

        return $r63;

     label18:
        $r56 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        virtualinvoke $r56.<org.apache.jena.atlas.io.PeekReader: int readChar()>();

        $r58 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token>;

        $r57 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType RPAREN>;

        virtualinvoke $r58.<org.apache.jena.riot.tokens.Token: org.apache.jena.riot.tokens.Token setType(org.apache.jena.riot.tokens.TokenType)>($r57);

        $r59 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token>;

        return $r59;

     label19:
        $r29 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        virtualinvoke $r29.<org.apache.jena.atlas.io.PeekReader: int readChar()>();

        $r31 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token>;

        $r30 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType LBRACKET>;

        virtualinvoke $r31.<org.apache.jena.riot.tokens.Token: org.apache.jena.riot.tokens.Token setType(org.apache.jena.riot.tokens.TokenType)>($r30);

        $r32 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token>;

        return $r32;

     label20:
        $r25 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        virtualinvoke $r25.<org.apache.jena.atlas.io.PeekReader: int readChar()>();

        $r27 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token>;

        $r26 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType RBRACKET>;

        virtualinvoke $r27.<org.apache.jena.riot.tokens.Token: org.apache.jena.riot.tokens.Token setType(org.apache.jena.riot.tokens.TokenType)>($r26);

        $r28 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token>;

        return $r28;

     label21:
        $r45 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        virtualinvoke $r45.<org.apache.jena.atlas.io.PeekReader: int readChar()>();

        $r47 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token>;

        $r46 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType COLON>;

        virtualinvoke $r47.<org.apache.jena.riot.tokens.Token: org.apache.jena.riot.tokens.Token setType(org.apache.jena.riot.tokens.TokenType)>($r46);

        $r48 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token>;

        return $r48;

     label22:
        $r37 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        virtualinvoke $r37.<org.apache.jena.atlas.io.PeekReader: int readChar()>();

        $r39 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token>;

        $r38 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType LT>;

        virtualinvoke $r39.<org.apache.jena.riot.tokens.Token: org.apache.jena.riot.tokens.Token setType(org.apache.jena.riot.tokens.TokenType)>($r38);

        $r40 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token>;

        return $r40;

     label23:
        $r33 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        virtualinvoke $r33.<org.apache.jena.atlas.io.PeekReader: int readChar()>();

        $r35 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token>;

        $r34 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType GT>;

        virtualinvoke $r35.<org.apache.jena.riot.tokens.Token: org.apache.jena.riot.tokens.Token setType(org.apache.jena.riot.tokens.TokenType)>($r34);

        $r36 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token>;

        return $r36;

     label24:
        if $i2 == 43 goto label25;

        if $i2 == 45 goto label25;

        $z0 = staticinvoke <org.apache.jena.atlas.json.io.parser.TokenizerJSON: boolean range(int,char,char)>($i2, 48, 57);

        if $z0 == 0 goto label26;

     label25:
        specialinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: void readNumber()>();

        $r74 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token>;

        return $r74;

     label26:
        $r64 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token>;

        specialinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: void readKeyWord(org.apache.jena.riot.tokens.Token)>($r64);

        $r65 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token>;

        return $r65;
    }

    private void skip()
    {
        org.apache.jena.atlas.io.PeekReader $r1, $r2, $r3, $r4, $r5, $r6;
        org.apache.jena.atlas.json.io.parser.TokenizerJSON r0;
        int $i0, $i1, i2, $i4;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.jena.atlas.json.io.parser.TokenizerJSON;

     label1:
        $r1 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        $z0 = virtualinvoke $r1.<org.apache.jena.atlas.io.PeekReader: boolean eof()>();

        if $z0 == 0 goto label2;

        return;

     label2:
        $r2 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        $i0 = virtualinvoke $r2.<org.apache.jena.atlas.io.PeekReader: int peekChar()>();

        i2 = $i0;

        if $i0 != 35 goto label5;

        $r4 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        virtualinvoke $r4.<org.apache.jena.atlas.io.PeekReader: int readChar()>();

     label3:
        $r5 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        $i1 = virtualinvoke $r5.<org.apache.jena.atlas.io.PeekReader: int peekChar()>();

        i2 = $i1;

        $i4 = (int) -1;

        if $i1 == $i4 goto label5;

        $z1 = staticinvoke <org.apache.jena.atlas.json.io.parser.TokenizerJSON: boolean isNewlineChar(int)>($i1);

        if $z1 == 0 goto label4;

        goto label5;

     label4:
        $r6 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        virtualinvoke $r6.<org.apache.jena.atlas.io.PeekReader: int readChar()>();

        goto label3;

     label5:
        $z2 = staticinvoke <org.apache.jena.atlas.json.io.parser.TokenizerJSON: boolean isWhitespace(int)>(i2);

        if $z2 != 0 goto label6;

        goto label7;

     label6:
        $r3 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        virtualinvoke $r3.<org.apache.jena.atlas.io.PeekReader: int readChar()>();

        goto label1;

     label7:
        return;
    }

    private void readKeyWord(org.apache.jena.riot.tokens.Token)
    {
        java.lang.Object[] $r7;
        long $l0, $l2;
        org.apache.jena.atlas.io.PeekReader $r1, $r5, $r6;
        org.apache.jena.riot.tokens.Token r2;
        java.lang.Integer $r8, $r9;
        org.apache.jena.riot.tokens.TokenType $r4;
        byte $b3;
        org.apache.jena.atlas.json.io.parser.TokenizerJSON r0;
        int $i1;
        java.lang.String $r3, $r10;

        r0 := @this: org.apache.jena.atlas.json.io.parser.TokenizerJSON;

        r2 := @parameter0: org.apache.jena.riot.tokens.Token;

        $r1 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        $l0 = virtualinvoke $r1.<org.apache.jena.atlas.io.PeekReader: long getPosition()>();

        $r3 = specialinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: java.lang.String readWord(boolean)>(0);

        virtualinvoke r2.<org.apache.jena.riot.tokens.Token: org.apache.jena.riot.tokens.Token setImage(java.lang.String)>($r3);

        $r4 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType KEYWORD>;

        virtualinvoke r2.<org.apache.jena.riot.tokens.Token: org.apache.jena.riot.tokens.Token setType(org.apache.jena.riot.tokens.TokenType)>($r4);

        $r5 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        $i1 = virtualinvoke $r5.<org.apache.jena.atlas.io.PeekReader: int peekChar()>();

        $r6 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        $l2 = virtualinvoke $r6.<org.apache.jena.atlas.io.PeekReader: long getPosition()>();

        $b3 = $l0 cmp $l2;

        if $b3 != 0 goto label1;

        $r7 = newarray (java.lang.Object)[2];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r7[0] = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r7[1] = $r9;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unknown char: %c(%d)", $r7);

        specialinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: void exception(java.lang.String)>($r10);

     label1:
        return;
    }

    private java.lang.String readLong(int, boolean)
    {
        org.apache.jena.atlas.io.PeekReader $r2;
        org.apache.jena.atlas.json.io.parser.TokenizerJSON r0;
        int $i0, i1, i2, $i4;
        java.lang.StringBuilder $r1, $r3, $r4, $r6;
        java.lang.String $r5, $r7;
        boolean $z0, z1;

        r0 := @this: org.apache.jena.atlas.json.io.parser.TokenizerJSON;

        i1 := @parameter0: int;

        z1 := @parameter1: boolean;

        $r1 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: java.lang.StringBuilder sb>;

        virtualinvoke $r1.<java.lang.StringBuilder: void setLength(int)>(0);

     label1:
        $r2 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        $i0 = virtualinvoke $r2.<org.apache.jena.atlas.io.PeekReader: int readChar()>();

        i2 = $i0;

        $i4 = (int) -1;

        if $i0 != $i4 goto label3;

        if z1 == 0 goto label2;

        $r6 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: java.lang.StringBuilder sb>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;

     label2:
        specialinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: void exception(java.lang.String)>("Broken long string");

     label3:
        if $i0 != i1 goto label4;

        $z0 = specialinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: boolean threeQuotes(int)>(i1);

        if $z0 == 0 goto label4;

        $r4 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: java.lang.StringBuilder sb>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;

     label4:
        if $i0 != 92 goto label5;

        i2 = specialinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: int readLiteralEscape()>();

     label5:
        $r3 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: java.lang.StringBuilder sb>;

        specialinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: void insertLiteralChar(java.lang.StringBuilder,int)>($r3, i2);

        goto label1;
    }

    private boolean threeQuotes(int)
    {
        org.apache.jena.atlas.io.PeekReader $r1, $r2, $r3, $r4, $r5;
        org.apache.jena.atlas.json.io.parser.TokenizerJSON r0;
        int $i0, i1, $i2;

        r0 := @this: org.apache.jena.atlas.json.io.parser.TokenizerJSON;

        i1 := @parameter0: int;

        $r1 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        $i0 = virtualinvoke $r1.<org.apache.jena.atlas.io.PeekReader: int peekChar()>();

        if $i0 == i1 goto label1;

        return 0;

     label1:
        $r2 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        virtualinvoke $r2.<org.apache.jena.atlas.io.PeekReader: int readChar()>();

        $r3 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        $i2 = virtualinvoke $r3.<org.apache.jena.atlas.io.PeekReader: int peekChar()>();

        if $i2 == i1 goto label2;

        $r5 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        virtualinvoke $r5.<org.apache.jena.atlas.io.PeekReader: void pushbackChar(int)>($i0);

        return 0;

     label2:
        $r4 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        virtualinvoke $r4.<org.apache.jena.atlas.io.PeekReader: int readChar()>();

        return 1;
    }

    private java.lang.String readWord(boolean)
    {
        char $c2;
        org.apache.jena.atlas.io.PeekReader $r4, $r5, $r6;
        org.apache.jena.atlas.json.io.parser.TokenizerJSON r0;
        int $i0, $i1;
        java.lang.StringBuilder $r1, $r2, $r7;
        java.lang.String $r3;
        boolean z0, $z1, $z2;

        r0 := @this: org.apache.jena.atlas.json.io.parser.TokenizerJSON;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: java.lang.StringBuilder sb>;

        virtualinvoke $r1.<java.lang.StringBuilder: void setLength(int)>(0);

        if z0 != 0 goto label1;

        $r4 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        $i0 = virtualinvoke $r4.<org.apache.jena.atlas.io.PeekReader: int peekChar()>();

        $z1 = staticinvoke <java.lang.Character: boolean isDigit(int)>($i0);

        if $z1 == 0 goto label1;

        return "";

     label1:
        $r5 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        $i1 = virtualinvoke $r5.<org.apache.jena.atlas.io.PeekReader: int peekChar()>();

        $z2 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(int)>($i1);

        if $z2 != 0 goto label2;

        if $i1 == 95 goto label2;

        if $i1 == 46 goto label2;

        if $i1 != 45 goto label4;

     label2:
        $r6 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        virtualinvoke $r6.<org.apache.jena.atlas.io.PeekReader: int readChar()>();

        $r7 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: java.lang.StringBuilder sb>;

        $c2 = (char) $i1;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        goto label3;

     label3:
        goto label1;

     label4:
        $r2 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: java.lang.StringBuilder sb>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    private void readNumber()
    {
        org.apache.jena.atlas.io.PeekReader $r2, $r13, $r16, $r18, $r19, $r22, $r29;
        org.apache.jena.atlas.json.io.parser.TokenizerJSON r0;
        boolean z0, z1, z2, $z3, z4, z5;
        java.lang.StringBuilder $r1, $r3, $r4, $r14, $r15, $r17, $r20, $r21, $r23, $r28, $r30;
        org.apache.jena.riot.tokens.Token $r5, $r8, $r10, $r12, $r24, $r27;
        int $i0, $i2, $i4, $i5, $i6;
        java.lang.String $r6, $r25;
        char $c1, $c3;
        org.apache.jena.riot.tokens.TokenType $r7, $r9, $r11, $r26;

        r0 := @this: org.apache.jena.atlas.json.io.parser.TokenizerJSON;

        z0 = 0;

        z1 = 0;

        z5 = 0;

        z4 = 0;

        $r1 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: java.lang.StringBuilder sb>;

        virtualinvoke $r1.<java.lang.StringBuilder: void setLength(int)>(0);

        z2 = 0;

        $r2 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        $i0 = virtualinvoke $r2.<org.apache.jena.atlas.io.PeekReader: int peekChar()>();

        if $i0 != 48 goto label02;

        z2 = 1;

        $r16 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        virtualinvoke $r16.<org.apache.jena.atlas.io.PeekReader: int readChar()>();

        $r17 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: java.lang.StringBuilder sb>;

        $c1 = (char) $i0;

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $r18 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        $i2 = virtualinvoke $r18.<org.apache.jena.atlas.io.PeekReader: int peekChar()>();

        if $i2 == 120 goto label01;

        if $i2 != 88 goto label04;

     label01:
        $r19 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        virtualinvoke $r19.<org.apache.jena.atlas.io.PeekReader: int readChar()>();

        $r20 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: java.lang.StringBuilder sb>;

        $c3 = (char) $i2;

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        $r22 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        $r21 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: java.lang.StringBuilder sb>;

        staticinvoke <org.apache.jena.atlas.json.io.parser.TokenizerJSON: void readHex(org.apache.jena.atlas.io.PeekReader,java.lang.StringBuilder)>($r22, $r21);

        $r24 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token>;

        $r23 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: java.lang.StringBuilder sb>;

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r24.<org.apache.jena.riot.tokens.Token: org.apache.jena.riot.tokens.Token setImage(java.lang.String)>($r25);

        $r27 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token>;

        $r26 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType HEX>;

        virtualinvoke $r27.<org.apache.jena.riot.tokens.Token: org.apache.jena.riot.tokens.Token setType(org.apache.jena.riot.tokens.TokenType)>($r26);

        return;

     label02:
        if $i0 == 45 goto label03;

        if $i0 != 43 goto label04;

     label03:
        $r3 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: java.lang.StringBuilder sb>;

        specialinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: void readPossibleSign(java.lang.StringBuilder)>($r3);

     label04:
        $r28 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: java.lang.StringBuilder sb>;

        $i4 = specialinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: int readDigits(java.lang.StringBuilder)>($r28);

        $i5 = z2 + $i4;

        $r29 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        $i6 = virtualinvoke $r29.<org.apache.jena.atlas.io.PeekReader: int peekChar()>();

        if $i6 != 46 goto label05;

        $r13 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        virtualinvoke $r13.<org.apache.jena.atlas.io.PeekReader: int readChar()>();

        $r14 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: java.lang.StringBuilder sb>;

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        z1 = 1;

        z5 = 1;

        z4 = 1;

        $r15 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: java.lang.StringBuilder sb>;

        specialinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: int readDigits(java.lang.StringBuilder)>($r15);

     label05:
        if $i5 != 0 goto label06;

        if z4 != 0 goto label06;

        specialinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: void exception(java.lang.String)>("Unrecognized as number");

     label06:
        $r30 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: java.lang.StringBuilder sb>;

        $z3 = specialinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: boolean exponent(java.lang.StringBuilder)>($r30);

        if $z3 == 0 goto label07;

        z0 = 1;

        z1 = 0;

        z5 = 0;

     label07:
        $r5 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token>;

        $r4 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: java.lang.StringBuilder sb>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<org.apache.jena.riot.tokens.Token: org.apache.jena.riot.tokens.Token setImage(java.lang.String)>($r6);

        if z0 == 0 goto label08;

        $r12 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token>;

        $r11 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType DOUBLE>;

        virtualinvoke $r12.<org.apache.jena.riot.tokens.Token: org.apache.jena.riot.tokens.Token setType(org.apache.jena.riot.tokens.TokenType)>($r11);

        goto label10;

     label08:
        if z5 == 0 goto label09;

        $r10 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token>;

        $r9 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType DECIMAL>;

        virtualinvoke $r10.<org.apache.jena.riot.tokens.Token: org.apache.jena.riot.tokens.Token setType(org.apache.jena.riot.tokens.TokenType)>($r9);

        goto label10;

     label09:
        $r8 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token token>;

        $r7 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType INTEGER>;

        virtualinvoke $r8.<org.apache.jena.riot.tokens.Token: org.apache.jena.riot.tokens.Token setType(org.apache.jena.riot.tokens.TokenType)>($r7);

     label10:
        return;
    }

    private static void readHex(org.apache.jena.atlas.io.PeekReader, java.lang.StringBuilder)
    {
        char $c2;
        org.apache.jena.atlas.io.PeekReader r0;
        int $i0, i1;
        java.lang.StringBuilder r1, $r2, $r3, $r5;
        java.lang.String $r4, $r6;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: org.apache.jena.atlas.io.PeekReader;

        r1 := @parameter1: java.lang.StringBuilder;

        i1 = 0;

     label1:
        $i0 = virtualinvoke r0.<org.apache.jena.atlas.io.PeekReader: int peekChar()>();

        $z0 = staticinvoke <org.apache.jena.atlas.json.io.parser.TokenizerJSON: boolean range(int,char,char)>($i0, 48, 57);

        if $z0 != 0 goto label2;

        $z1 = staticinvoke <org.apache.jena.atlas.json.io.parser.TokenizerJSON: boolean range(int,char,char)>($i0, 97, 102);

        if $z1 != 0 goto label2;

        $z2 = staticinvoke <org.apache.jena.atlas.json.io.parser.TokenizerJSON: boolean range(int,char,char)>($i0, 65, 70);

        if $z2 != 0 goto label2;

        goto label3;

     label2:
        virtualinvoke r0.<org.apache.jena.atlas.io.PeekReader: int readChar()>();

        $c2 = (char) $i0;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        i1 = i1 + 1;

        goto label1;

     label3:
        if i1 != 0 goto label4;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No hex characters after ");

        $r4 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.jena.atlas.json.io.parser.TokenizerJSON: void exception(org.apache.jena.atlas.io.PeekReader,java.lang.String)>(r0, $r6);

     label4:
        return;
    }

    private boolean exponent(java.lang.StringBuilder)
    {
        char $c1;
        org.apache.jena.atlas.io.PeekReader $r1, $r2;
        org.apache.jena.atlas.json.io.parser.TokenizerJSON r0;
        int $i0, $i2;
        java.lang.StringBuilder r3, $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: org.apache.jena.atlas.json.io.parser.TokenizerJSON;

        r3 := @parameter0: java.lang.StringBuilder;

        $r1 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        $i0 = virtualinvoke $r1.<org.apache.jena.atlas.io.PeekReader: int peekChar()>();

        if $i0 == 101 goto label1;

        if $i0 == 69 goto label1;

        return 0;

     label1:
        $r2 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        virtualinvoke $r2.<org.apache.jena.atlas.io.PeekReader: int readChar()>();

        $c1 = (char) $i0;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        specialinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: void readPossibleSign(java.lang.StringBuilder)>(r3);

        $i2 = specialinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: int readDigits(java.lang.StringBuilder)>(r3);

        if $i2 != 0 goto label2;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Malformed double: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: void exception(java.lang.String)>($r7);

     label2:
        return 1;
    }

    private void readPossibleSign(java.lang.StringBuilder)
    {
        org.apache.jena.atlas.json.io.parser.TokenizerJSON r0;
        int $i0;
        java.lang.StringBuilder r3;
        char $c1;
        org.apache.jena.atlas.io.PeekReader $r1, $r2;

        r0 := @this: org.apache.jena.atlas.json.io.parser.TokenizerJSON;

        r3 := @parameter0: java.lang.StringBuilder;

        $r1 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        $i0 = virtualinvoke $r1.<org.apache.jena.atlas.io.PeekReader: int peekChar()>();

        if $i0 == 45 goto label1;

        if $i0 != 43 goto label2;

     label1:
        $r2 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        virtualinvoke $r2.<org.apache.jena.atlas.io.PeekReader: int readChar()>();

        $c1 = (char) $i0;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

     label2:
        return;
    }

    private int readDigits(java.lang.StringBuilder)
    {
        char $c1;
        org.apache.jena.atlas.io.PeekReader $r1, $r2;
        org.apache.jena.atlas.json.io.parser.TokenizerJSON r0;
        int $i0, i2;
        java.lang.StringBuilder r3;
        boolean $z0;

        r0 := @this: org.apache.jena.atlas.json.io.parser.TokenizerJSON;

        r3 := @parameter0: java.lang.StringBuilder;

        i2 = 0;

     label1:
        $r1 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        $i0 = virtualinvoke $r1.<org.apache.jena.atlas.io.PeekReader: int peekChar()>();

        $z0 = staticinvoke <org.apache.jena.atlas.json.io.parser.TokenizerJSON: boolean range(int,char,char)>($i0, 48, 57);

        if $z0 != 0 goto label2;

        goto label3;

     label2:
        $r2 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        virtualinvoke $r2.<org.apache.jena.atlas.io.PeekReader: int readChar()>();

        $c1 = (char) $i0;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        i2 = i2 + 1;

        goto label1;

     label3:
        return i2;
    }

    private java.lang.String langTag()
    {
        org.apache.jena.atlas.io.PeekReader $r6, $r11;
        org.apache.jena.atlas.json.io.parser.TokenizerJSON r0;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r5;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r7, $r8, $r9, $r10;

        r0 := @this: org.apache.jena.atlas.json.io.parser.TokenizerJSON;

        $r1 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: java.lang.StringBuilder sb>;

        virtualinvoke $r1.<java.lang.StringBuilder: void setLength(int)>(0);

        $r2 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: java.lang.StringBuilder sb>;

        specialinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: void a2z(java.lang.StringBuilder)>($r2);

        $r3 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: java.lang.StringBuilder sb>;

        $i0 = virtualinvoke $r3.<java.lang.StringBuilder: int length()>();

        if $i0 != 0 goto label1;

        specialinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: void exception(java.lang.String)>("Bad language tag");

     label1:
        $r11 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        $i3 = virtualinvoke $r11.<org.apache.jena.atlas.io.PeekReader: int peekChar()>();

        if $i3 != 45 goto label3;

        $r6 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        virtualinvoke $r6.<org.apache.jena.atlas.io.PeekReader: int readChar()>();

        $r7 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: java.lang.StringBuilder sb>;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

        $r8 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: java.lang.StringBuilder sb>;

        $i1 = virtualinvoke $r8.<java.lang.StringBuilder: int length()>();

        $r9 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: java.lang.StringBuilder sb>;

        specialinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: void a2zN(java.lang.StringBuilder)>($r9);

        $r10 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: java.lang.StringBuilder sb>;

        $i2 = virtualinvoke $r10.<java.lang.StringBuilder: int length()>();

        if $i2 != $i1 goto label2;

        specialinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: void exception(java.lang.String)>("Bad language tag");

     label2:
        goto label1;

     label3:
        $r4 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: java.lang.StringBuilder sb>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    private void a2z(java.lang.StringBuilder)
    {
        char $c1;
        org.apache.jena.atlas.io.PeekReader $r1, $r2;
        org.apache.jena.atlas.json.io.parser.TokenizerJSON r0;
        int $i0;
        java.lang.StringBuilder $r3, r4;
        boolean $z0;

        r0 := @this: org.apache.jena.atlas.json.io.parser.TokenizerJSON;

        r4 := @parameter0: java.lang.StringBuilder;

     label1:
        $r1 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        $i0 = virtualinvoke $r1.<org.apache.jena.atlas.io.PeekReader: int peekChar()>();

        $z0 = specialinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: boolean isA2Z(int)>($i0);

        if $z0 == 0 goto label2;

        $r2 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        virtualinvoke $r2.<org.apache.jena.atlas.io.PeekReader: int readChar()>();

        $r3 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: java.lang.StringBuilder sb>;

        $c1 = (char) $i0;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        goto label3;

     label2:
        return;

     label3:
        goto label1;
    }

    private void a2zN(java.lang.StringBuilder)
    {
        char $c1;
        org.apache.jena.atlas.io.PeekReader $r1, $r2;
        org.apache.jena.atlas.json.io.parser.TokenizerJSON r0;
        int $i0;
        java.lang.StringBuilder $r3, r4;
        boolean $z0;

        r0 := @this: org.apache.jena.atlas.json.io.parser.TokenizerJSON;

        r4 := @parameter0: java.lang.StringBuilder;

     label1:
        $r1 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        $i0 = virtualinvoke $r1.<org.apache.jena.atlas.io.PeekReader: int peekChar()>();

        $z0 = specialinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: boolean isA2ZN(int)>($i0);

        if $z0 == 0 goto label2;

        $r2 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        virtualinvoke $r2.<org.apache.jena.atlas.io.PeekReader: int readChar()>();

        $r3 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: java.lang.StringBuilder sb>;

        $c1 = (char) $i0;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        goto label3;

     label2:
        return;

     label3:
        goto label1;
    }

    private java.lang.String blankNodeLabel()
    {
        char $c1;
        org.apache.jena.atlas.io.PeekReader $r2;
        org.apache.jena.atlas.json.io.parser.TokenizerJSON r0;
        int $i0, $i3;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r5;
        boolean $z0, z1;

        r0 := @this: org.apache.jena.atlas.json.io.parser.TokenizerJSON;

        $r1 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: java.lang.StringBuilder sb>;

        virtualinvoke $r1.<java.lang.StringBuilder: void setLength(int)>(0);

        z1 = 0;

     label1:
        $r2 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        $i0 = virtualinvoke $r2.<org.apache.jena.atlas.io.PeekReader: int readChar()>();

        $i3 = (int) -1;

        if $i0 != $i3 goto label2;

        goto label4;

     label2:
        $z0 = specialinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: boolean isA2ZN(int)>($i0);

        if $z0 != 0 goto label3;

        if $i0 == 45 goto label3;

        goto label4;

     label3:
        $r3 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: java.lang.StringBuilder sb>;

        $c1 = (char) $i0;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        z1 = 1;

        goto label1;

     label4:
        if z1 != 0 goto label5;

        specialinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: void exception(java.lang.String)>("Blank node label missing");

     label5:
        $r4 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: java.lang.StringBuilder sb>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    private java.lang.String allBetween(int, int, boolean, boolean)
    {
        org.apache.jena.atlas.io.PeekReader $r2, $r3;
        java.lang.Integer $r5, $r6;
        org.apache.jena.atlas.json.io.parser.TokenizerJSON r0;
        boolean z0, z1;
        java.lang.StringBuilder $r1, $r9, $r10, $r12, $r14, $r16, $r19, $r20, $r22, $r25, $r26, $r28, $r30, $r32, $r33, $r34, $r35;
        java.lang.Object[] $r4;
        long $l0, $l1;
        int $i2, i3, $i4, i5, i6, $i8, $i10;
        java.lang.String $r7, $r11, $r13, $r15, $r17, $r21, $r23, $r27, $r29, $r31;

        r0 := @this: org.apache.jena.atlas.json.io.parser.TokenizerJSON;

        i5 := @parameter0: int;

        i3 := @parameter1: int;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        $l0 = virtualinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: long getLine()>();

        $l1 = virtualinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: long getColumn()>();

        $r1 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: java.lang.StringBuilder sb>;

        virtualinvoke $r1.<java.lang.StringBuilder: void setLength(int)>(0);

     label01:
        $r2 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        $i2 = virtualinvoke $r2.<org.apache.jena.atlas.io.PeekReader: int readChar()>();

        i6 = $i2;

        $i8 = (int) -1;

        if $i2 != $i8 goto label03;

        if z1 == 0 goto label02;

        $r30 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: java.lang.StringBuilder sb>;

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r31;

     label02:
        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Broken token: ");

        $r26 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: java.lang.StringBuilder sb>;

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        $r28 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.jena.atlas.json.io.parser.TokenizerJSON: void exception(java.lang.String,long,long)>($r29, $l0, $l1);

     label03:
        if $i2 != 10 goto label04;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Broken token (newline): ");

        $r20 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: java.lang.StringBuilder sb>;

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.jena.atlas.json.io.parser.TokenizerJSON: void exception(java.lang.String,long,long)>($r23, $l0, $l1);

     label04:
        if $i2 != i3 goto label05;

        $r16 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: java.lang.StringBuilder sb>;

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r17;

     label05:
        if $i2 != 92 goto label12;

        if z0 == 0 goto label06;

        i6 = specialinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: int readLiteralEscape()>();

        goto label12;

     label06:
        $r3 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        $i4 = virtualinvoke $r3.<org.apache.jena.atlas.io.PeekReader: int readChar()>();

        i6 = $i4;

        $i10 = (int) -1;

        if $i4 != $i10 goto label08;

        if z1 == 0 goto label07;

        $r14 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: java.lang.StringBuilder sb>;

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r15;

     label07:
        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Broken token: ");

        $r10 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: java.lang.StringBuilder sb>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.jena.atlas.json.io.parser.TokenizerJSON: void exception(java.lang.String,long,long)>($r13, $l0, $l1);

     label08:
        lookupswitch($i4)
        {
            case 85: goto label10;
            case 117: goto label09;
            default: goto label11;
        };

     label09:
        i6 = specialinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: int readUnicode4Escape()>();

        goto label12;

     label10:
        i6 = specialinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: int readUnicode4Escape()>();

        goto label12;

     label11:
        $r4 = newarray (java.lang.Object)[2];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r4[0] = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r4[1] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("illegal escape sequence value: %c (0x%02X)", $r4);

        specialinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: void exception(java.lang.String)>($r7);

     label12:
        $r32 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: java.lang.StringBuilder sb>;

        specialinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: void insertLiteralChar(java.lang.StringBuilder,int)>($r32, i6);

        goto label01;
    }

    private void insertLiteralChar(java.lang.StringBuilder, int)
    {
        java.lang.Object[] $r2;
        char $c2;
        java.lang.Integer $r3;
        int i0, $i1;
        org.apache.jena.atlas.json.io.parser.TokenizerJSON r1;
        char[] $r5;
        java.lang.StringBuilder r0;
        java.lang.String $r4;
        boolean $z0, $z1;

        r1 := @this: org.apache.jena.atlas.json.io.parser.TokenizerJSON;

        r0 := @parameter0: java.lang.StringBuilder;

        i0 := @parameter1: int;

        $i1 = staticinvoke <java.lang.Character: int charCount(int)>(i0);

        if $i1 != 1 goto label1;

        $c2 = (char) i0;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        goto label3;

     label1:
        $z0 = staticinvoke <java.lang.Character: boolean isDefined(int)>(i0);

        if $z0 != 0 goto label2;

        $z1 = staticinvoke <java.lang.Character: boolean isSupplementaryCodePoint(int)>(i0);

        if $z1 != 0 goto label2;

        $r2 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Illegal codepoint: 0x%04X", $r2);

        specialinvoke r1.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: void exception(java.lang.String)>($r4);

     label2:
        $r5 = staticinvoke <java.lang.Character: char[] toChars(int)>(i0);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>($r5);

     label3:
        return;
    }

    public long getColumn()
    {
        org.apache.jena.atlas.json.io.parser.TokenizerJSON r0;
        long $l0;
        org.apache.jena.atlas.io.PeekReader $r1;

        r0 := @this: org.apache.jena.atlas.json.io.parser.TokenizerJSON;

        $r1 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        $l0 = virtualinvoke $r1.<org.apache.jena.atlas.io.PeekReader: long getColNum()>();

        return $l0;
    }

    public long getLine()
    {
        org.apache.jena.atlas.json.io.parser.TokenizerJSON r0;
        long $l0;
        org.apache.jena.atlas.io.PeekReader $r1;

        r0 := @this: org.apache.jena.atlas.json.io.parser.TokenizerJSON;

        $r1 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        $l0 = virtualinvoke $r1.<org.apache.jena.atlas.io.PeekReader: long getLineNum()>();

        return $l0;
    }

    public void close()
    {
        org.apache.jena.atlas.json.io.parser.TokenizerJSON r0;
        java.io.IOException $r2;
        org.apache.jena.atlas.io.PeekReader $r1;

        r0 := @this: org.apache.jena.atlas.json.io.parser.TokenizerJSON;

     label1:
        $r1 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        virtualinvoke $r1.<org.apache.jena.atlas.io.PeekReader: void close()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        staticinvoke <org.apache.jena.atlas.io.IO: void exception(java.io.IOException)>($r2);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private boolean isA2Z(int)
    {
        int i0;
        org.apache.jena.atlas.json.io.parser.TokenizerJSON r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.jena.atlas.json.io.parser.TokenizerJSON;

        i0 := @parameter0: int;

        $z0 = staticinvoke <org.apache.jena.atlas.json.io.parser.TokenizerJSON: boolean range(int,char,char)>(i0, 97, 122);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.jena.atlas.json.io.parser.TokenizerJSON: boolean range(int,char,char)>(i0, 65, 90);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private boolean isA2ZN(int)
    {
        int i0;
        org.apache.jena.atlas.json.io.parser.TokenizerJSON r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.jena.atlas.json.io.parser.TokenizerJSON;

        i0 := @parameter0: int;

        $z0 = staticinvoke <org.apache.jena.atlas.json.io.parser.TokenizerJSON: boolean range(int,char,char)>(i0, 97, 122);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.jena.atlas.json.io.parser.TokenizerJSON: boolean range(int,char,char)>(i0, 65, 90);

        if $z1 != 0 goto label1;

        $z2 = staticinvoke <org.apache.jena.atlas.json.io.parser.TokenizerJSON: boolean range(int,char,char)>(i0, 48, 57);

        if $z2 == 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    private boolean isNumeric(int)
    {
        int i0;
        org.apache.jena.atlas.json.io.parser.TokenizerJSON r0;
        boolean $z0;

        r0 := @this: org.apache.jena.atlas.json.io.parser.TokenizerJSON;

        i0 := @parameter0: int;

        $z0 = staticinvoke <org.apache.jena.atlas.json.io.parser.TokenizerJSON: boolean range(int,char,char)>(i0, 48, 57);

        return $z0;
    }

    private static boolean isWhitespace(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        if i0 == 32 goto label1;

        if i0 == 9 goto label1;

        if i0 == 13 goto label1;

        if i0 == 10 goto label1;

        if i0 != 12 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private static boolean isNewlineChar(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        if i0 == 13 goto label1;

        if i0 != 10 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private final int readLiteralEscape()
    {
        java.lang.Object[] $r2;
        org.apache.jena.atlas.io.PeekReader $r1;
        java.lang.Integer $r3, $r4;
        org.apache.jena.atlas.json.io.parser.TokenizerJSON r0;
        int $i0, $i1, $i2, $i4;
        java.lang.String $r5;

        r0 := @this: org.apache.jena.atlas.json.io.parser.TokenizerJSON;

        $r1 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        $i0 = virtualinvoke $r1.<org.apache.jena.atlas.io.PeekReader: int readChar()>();

        $i4 = (int) -1;

        if $i0 != $i4 goto label01;

        specialinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: void exception(java.lang.String)>("Escape sequence not completed");

     label01:
        lookupswitch($i0)
        {
            case 34: goto label05;
            case 39: goto label07;
            case 47: goto label06;
            case 85: goto label10;
            case 92: goto label08;
            case 110: goto label02;
            case 114: goto label03;
            case 116: goto label04;
            case 117: goto label09;
            default: goto label11;
        };

     label02:
        return 10;

     label03:
        return 13;

     label04:
        return 9;

     label05:
        return 34;

     label06:
        return 47;

     label07:
        return 39;

     label08:
        return 92;

     label09:
        $i1 = specialinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: int readUnicode4Escape()>();

        return $i1;

     label10:
        $i2 = specialinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: int readUnicode8Escape()>();

        return $i2;

     label11:
        $r2 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r2[1] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("illegal escape sequence value: %c (0x%02X)", $r2);

        specialinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: void exception(java.lang.String)>($r5);

        return 0;
    }

    private final int readUnicodeEscape()
    {
        java.lang.Object[] $r2;
        org.apache.jena.atlas.io.PeekReader $r1;
        java.lang.Integer $r3, $r4;
        org.apache.jena.atlas.json.io.parser.TokenizerJSON r0;
        int $i0, $i1, $i2, $i4;
        java.lang.String $r5;

        r0 := @this: org.apache.jena.atlas.json.io.parser.TokenizerJSON;

        $r1 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        $i0 = virtualinvoke $r1.<org.apache.jena.atlas.io.PeekReader: int readChar()>();

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        specialinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: void exception(java.lang.String)>("Broken escape sequence");

     label1:
        lookupswitch($i0)
        {
            case 85: goto label3;
            case 117: goto label2;
            default: goto label4;
        };

     label2:
        $i1 = specialinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: int readUnicode4Escape()>();

        return $i1;

     label3:
        $i2 = specialinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: int readUnicode8Escape()>();

        return $i2;

     label4:
        $r2 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r2[1] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("illegal escape sequence value: %c (0x%02X)", $r2);

        specialinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: void exception(java.lang.String)>($r5);

        return 0;
    }

    private final int readUnicode4Escape()
    {
        org.apache.jena.atlas.json.io.parser.TokenizerJSON r0;
        int $i0;

        r0 := @this: org.apache.jena.atlas.json.io.parser.TokenizerJSON;

        $i0 = specialinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: int readUnicodeEscape(int)>(4);

        return $i0;
    }

    private final int readUnicode8Escape()
    {
        java.lang.Object[] $r1;
        org.apache.jena.atlas.json.io.parser.TokenizerJSON r0;
        int $i0;
        java.lang.String $r3;
        java.lang.Integer $r2;

        r0 := @this: org.apache.jena.atlas.json.io.parser.TokenizerJSON;

        $i0 = specialinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: int readUnicodeEscape(int)>(8);

        if $i0 <= 1114111 goto label1;

        $r1 = newarray (java.lang.Object)[1];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("illegal code point in \\U sequence value: 0x%08X", $r1);

        specialinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: void exception(java.lang.String)>($r3);

     label1:
        return $i0;
    }

    private final int readUnicodeEscape(int)
    {
        int i0, $i1, $i2, i3, i4, $i6;
        org.apache.jena.atlas.json.io.parser.TokenizerJSON r0;

        r0 := @this: org.apache.jena.atlas.json.io.parser.TokenizerJSON;

        i0 := @parameter0: int;

        i3 = 0;

        i4 = 0;

     label1:
        if i4 >= i0 goto label3;

        $i1 = specialinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: int readHexChar()>();

        if $i1 >= 0 goto label2;

        $i6 = (int) -1;

        return $i6;

     label2:
        $i2 = i3 << 4;

        i3 = $i2 + $i1;

        i4 = i4 + 1;

        goto label1;

     label3:
        return i3;
    }

    private final int readHexChar()
    {
        org.apache.jena.atlas.io.PeekReader $r1;
        org.apache.jena.atlas.json.io.parser.TokenizerJSON r0;
        int $i0, $i2, $i3, $i4, $i5, $i6, $i8, $i10;
        java.lang.String $r5;
        boolean $z0, $z1, $z2;
        char $c1;
        java.lang.StringBuilder $r3, $r4, $r6;

        r0 := @this: org.apache.jena.atlas.json.io.parser.TokenizerJSON;

        $r1 = r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        $i0 = virtualinvoke $r1.<org.apache.jena.atlas.io.PeekReader: int readChar()>();

        $i8 = (int) -1;

        if $i0 != $i8 goto label1;

        specialinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: void exception(java.lang.String)>("Not a hexadecimal character (end of file)");

     label1:
        $z0 = staticinvoke <org.apache.jena.atlas.json.io.parser.TokenizerJSON: boolean range(int,char,char)>($i0, 48, 57);

        if $z0 == 0 goto label2;

        $i6 = $i0 - 48;

        return $i6;

     label2:
        $z1 = staticinvoke <org.apache.jena.atlas.json.io.parser.TokenizerJSON: boolean range(int,char,char)>($i0, 97, 102);

        if $z1 == 0 goto label3;

        $i4 = $i0 - 97;

        $i5 = $i4 + 10;

        return $i5;

     label3:
        $z2 = staticinvoke <org.apache.jena.atlas.json.io.parser.TokenizerJSON: boolean range(int,char,char)>($i0, 65, 70);

        if $z2 == 0 goto label4;

        $i2 = $i0 - 65;

        $i3 = $i2 + 10;

        return $i3;

     label4:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a hexadecimal character: ");

        $c1 = (char) $i0;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: void exception(java.lang.String)>($r5);

        $i10 = (int) -1;

        return $i10;
    }

    private static boolean range(int, char, char)
    {
        int i0, $i3, $i4;
        char c1, c2;
        boolean $z0;

        i0 := @parameter0: int;

        c1 := @parameter1: char;

        c2 := @parameter2: char;

        $i3 = (int) c1;

        if i0 < $i3 goto label1;

        $i4 = (int) c2;

        if i0 > $i4 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private boolean expect(java.lang.String)
    {
        org.apache.jena.atlas.io.PeekReader $r2, $r3;
        int $i0, $i2, i3, $i4;
        org.apache.jena.atlas.json.io.parser.TokenizerJSON r1;
        java.lang.String r0, $r8, $r12;
        boolean $z0;
        char $c1;
        java.lang.StringBuilder $r5, $r6, $r7, $r10, $r11, $r13, $r14;

        r1 := @this: org.apache.jena.atlas.json.io.parser.TokenizerJSON;

        r0 := @parameter0: java.lang.String;

        i3 = 0;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i3 >= $i0 goto label4;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        $r2 = r1.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        $z0 = virtualinvoke $r2.<org.apache.jena.atlas.io.PeekReader: boolean eof()>();

        if $z0 == 0 goto label2;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("End of input during expected string: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r1.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: void exception(java.lang.String)>($r12);

        return 0;

     label2:
        $r3 = r1.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        $i2 = virtualinvoke $r3.<org.apache.jena.atlas.io.PeekReader: int readChar()>();

        $i4 = (int) $c1;

        if $i2 == $i4 goto label3;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected \"");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r1.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: void exception(java.lang.String)>($r8);

        return 0;

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        return 1;
    }

    private void exception(java.lang.String)
    {
        org.apache.jena.atlas.json.io.parser.TokenizerJSON r1;
        long $l0, $l1;
        java.lang.String r0;
        org.apache.jena.atlas.io.PeekReader $r2, $r3;

        r1 := @this: org.apache.jena.atlas.json.io.parser.TokenizerJSON;

        r0 := @parameter0: java.lang.String;

        $r2 = r1.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        $l0 = virtualinvoke $r2.<org.apache.jena.atlas.io.PeekReader: long getLineNum()>();

        $r3 = r1.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.atlas.io.PeekReader reader>;

        $l1 = virtualinvoke $r3.<org.apache.jena.atlas.io.PeekReader: long getColNum()>();

        staticinvoke <org.apache.jena.atlas.json.io.parser.TokenizerJSON: void exception(java.lang.String,long,long)>(r0, $l0, $l1);

        return;
    }

    private static void exception(org.apache.jena.atlas.io.PeekReader, java.lang.String)
    {
        long $l0, $l1;
        java.lang.String r0;
        org.apache.jena.atlas.io.PeekReader r1;

        r1 := @parameter0: org.apache.jena.atlas.io.PeekReader;

        r0 := @parameter1: java.lang.String;

        $l0 = virtualinvoke r1.<org.apache.jena.atlas.io.PeekReader: long getLineNum()>();

        $l1 = virtualinvoke r1.<org.apache.jena.atlas.io.PeekReader: long getColNum()>();

        staticinvoke <org.apache.jena.atlas.json.io.parser.TokenizerJSON: void exception(java.lang.String,long,long)>(r0, $l0, $l1);

        return;
    }

    private static void exception(java.lang.String, long, long)
    {
        int $i2, $i3;
        long l0, l1;
        org.apache.jena.atlas.json.JsonParseException $r0;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $r0 = new org.apache.jena.atlas.json.JsonParseException;

        $i3 = (int) l0;

        $i2 = (int) l1;

        specialinvoke $r0.<org.apache.jena.atlas.json.JsonParseException: void <init>(java.lang.String,int,int)>(r1, $i3, $i2);

        throw $r0;
    }

    public volatile java.lang.Object next()
    {
        org.apache.jena.atlas.json.io.parser.TokenizerJSON r0;
        org.apache.jena.riot.tokens.Token $r1;

        r0 := @this: org.apache.jena.atlas.json.io.parser.TokenizerJSON;

        $r1 = virtualinvoke r0.<org.apache.jena.atlas.json.io.parser.TokenizerJSON: org.apache.jena.riot.tokens.Token next()>();

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.jena.atlas.json.io.parser.TokenizerJSON: int CTRL_CHAR> = 42;

        return;
    }
}
