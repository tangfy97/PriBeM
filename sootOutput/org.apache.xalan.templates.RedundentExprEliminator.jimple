public class org.apache.xalan.templates.RedundentExprEliminator extends org.apache.xalan.templates.XSLTVisitor
{
    java.util.Vector m_paths;
    java.util.Vector m_absPaths;
    boolean m_isSameContext;
    org.apache.xalan.templates.AbsPathChecker m_absPathChecker;
    static int m_uniquePsuedoVarID;
    static final java.lang.String PSUEDOVARNAMESPACE;
    public static boolean DEBUG;
    public static boolean DIAGNOSE_NUM_PATHS_REDUCED;
    public static boolean DIAGNOSE_MULTISTEPLIST;
    org.apache.xalan.templates.VarNameCollector m_varNameCollector;

    public void <init>()
    {
        org.apache.xalan.templates.RedundentExprEliminator r0;
        java.util.Vector $r3;
        org.apache.xalan.templates.VarNameCollector $r2;
        org.apache.xalan.templates.AbsPathChecker $r1;

        r0 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        specialinvoke r0.<org.apache.xalan.templates.XSLTVisitor: void <init>()>();

        $r1 = new org.apache.xalan.templates.AbsPathChecker;

        specialinvoke $r1.<org.apache.xalan.templates.AbsPathChecker: void <init>()>();

        r0.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.AbsPathChecker m_absPathChecker> = $r1;

        $r2 = new org.apache.xalan.templates.VarNameCollector;

        specialinvoke $r2.<org.apache.xalan.templates.VarNameCollector: void <init>()>();

        r0.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.VarNameCollector m_varNameCollector> = $r2;

        r0.<org.apache.xalan.templates.RedundentExprEliminator: boolean m_isSameContext> = 1;

        $r3 = new java.util.Vector;

        specialinvoke $r3.<java.util.Vector: void <init>()>();

        r0.<org.apache.xalan.templates.RedundentExprEliminator: java.util.Vector m_absPaths> = $r3;

        r0.<org.apache.xalan.templates.RedundentExprEliminator: java.util.Vector m_paths> = null;

        return;
    }

    public void eleminateRedundentLocals(org.apache.xalan.templates.ElemTemplateElement)
    {
        org.apache.xalan.templates.RedundentExprEliminator r0;
        java.util.Vector $r2;
        org.apache.xalan.templates.ElemTemplateElement r1;

        r0 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r1 := @parameter0: org.apache.xalan.templates.ElemTemplateElement;

        $r2 = r0.<org.apache.xalan.templates.RedundentExprEliminator: java.util.Vector m_paths>;

        virtualinvoke r0.<org.apache.xalan.templates.RedundentExprEliminator: void eleminateRedundent(org.apache.xalan.templates.ElemTemplateElement,java.util.Vector)>(r1, $r2);

        return;
    }

    public void eleminateRedundentGlobals(org.apache.xalan.templates.StylesheetRoot)
    {
        org.apache.xalan.templates.StylesheetRoot r1;
        org.apache.xalan.templates.RedundentExprEliminator r0;
        java.util.Vector $r2;

        r0 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r1 := @parameter0: org.apache.xalan.templates.StylesheetRoot;

        $r2 = r0.<org.apache.xalan.templates.RedundentExprEliminator: java.util.Vector m_absPaths>;

        virtualinvoke r0.<org.apache.xalan.templates.RedundentExprEliminator: void eleminateRedundent(org.apache.xalan.templates.ElemTemplateElement,java.util.Vector)>(r1, $r2);

        return;
    }

    protected void eleminateRedundent(org.apache.xalan.templates.ElemTemplateElement, java.util.Vector)
    {
        org.apache.xalan.templates.ElemTemplateElement r4;
        org.apache.xalan.templates.RedundentExprEliminator r3;
        java.util.Vector r0;
        int $i0, $i1, $i2, i3, i4, i5;
        java.lang.Object $r1;
        org.apache.xpath.ExpressionOwner r2;
        boolean $z0;

        r3 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r4 := @parameter0: org.apache.xalan.templates.ElemTemplateElement;

        r0 := @parameter1: java.util.Vector;

        $i0 = virtualinvoke r0.<java.util.Vector: int size()>();

        i3 = 0;

        i4 = 0;

        i5 = 0;

        goto label4;

     label1:
        $r1 = virtualinvoke r0.<java.util.Vector: java.lang.Object elementAt(int)>(i5);

        r2 = (org.apache.xpath.ExpressionOwner) $r1;

        if null == r2 goto label3;

        $i1 = i5 + 1;

        $i2 = virtualinvoke r3.<org.apache.xalan.templates.RedundentExprEliminator: int findAndEliminateRedundant(int,int,org.apache.xpath.ExpressionOwner,org.apache.xalan.templates.ElemTemplateElement,java.util.Vector)>($i1, i5, r2, r4, r0);

        if $i2 <= 0 goto label2;

        i4 = i4 + 1;

     label2:
        i3 = i3 + $i2;

     label3:
        i5 = i5 + 1;

     label4:
        if i5 < $i0 goto label1;

        virtualinvoke r3.<org.apache.xalan.templates.RedundentExprEliminator: void eleminateSharedPartialPaths(org.apache.xalan.templates.ElemTemplateElement,java.util.Vector)>(r4, r0);

        $z0 = <org.apache.xalan.templates.RedundentExprEliminator: boolean DIAGNOSE_NUM_PATHS_REDUCED>;

        if $z0 == 0 goto label5;

        virtualinvoke r3.<org.apache.xalan.templates.RedundentExprEliminator: void diagnoseNumPaths(java.util.Vector,int,int)>(r0, i3, i4);

     label5:
        return;
    }

    protected void eleminateSharedPartialPaths(org.apache.xalan.templates.ElemTemplateElement, java.util.Vector)
    {
        org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder $r2, r5, r6;
        org.apache.xalan.templates.ElemTemplateElement r4;
        org.apache.xalan.templates.RedundentExprEliminator r0;
        java.util.Vector r1, $r3;
        int $i0, $i1, i2, $i4;
        boolean $z0, z1, $z2;

        r0 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r4 := @parameter0: org.apache.xalan.templates.ElemTemplateElement;

        r1 := @parameter1: java.util.Vector;

        $r2 = virtualinvoke r0.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder createMultistepExprList(java.util.Vector)>(r1);

        r5 = $r2;

        if null == $r2 goto label10;

        $z0 = <org.apache.xalan.templates.RedundentExprEliminator: boolean DIAGNOSE_MULTISTEPLIST>;

        if $z0 == 0 goto label01;

        virtualinvoke $r2.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: void diagnose()>();

     label01:
        $r3 = r0.<org.apache.xalan.templates.RedundentExprEliminator: java.util.Vector m_absPaths>;

        if r1 != $r3 goto label02;

        $z2 = 1;

        goto label03;

     label02:
        $z2 = 0;

     label03:
        z1 = $z2;

        $i1 = $r2.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: int m_stepCount>;

        i2 = $i1 - 1;

        goto label09;

     label04:
        r6 = r5;

        goto label07;

     label05:
        $i0 = r6.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: int m_stepCount>;

        if $i0 >= i2 goto label06;

        goto label08;

     label06:
        r5 = virtualinvoke r0.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder matchAndEliminatePartialPaths(org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder,org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder,boolean,int,org.apache.xalan.templates.ElemTemplateElement)>(r6, r5, z1, i2, r4);

        r6 = r6.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder m_next>;

     label07:
        if null != r6 goto label05;

     label08:
        $i4 = (int) -1;

        i2 = i2 + $i4;

     label09:
        if i2 >= 1 goto label04;

     label10:
        return;
    }

    protected org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder matchAndEliminatePartialPaths(org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder, org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder, boolean, int, org.apache.xalan.templates.ElemTemplateElement)
    {
        org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder r0, r6, $r30, r32, r33, r34, $r37;
        java.lang.CloneNotSupportedException $r29, $r31;
        org.apache.xpath.ExpressionOwner $r1, $r2, $r7, $r8, $r11, r15;
        boolean $z0, $z1, $z2, z3, $z4, $z5;
        org.apache.xpath.Expression $r3, $r9, $r12, $r16;
        org.apache.xml.utils.QName $r18, $r23;
        org.apache.xalan.templates.ElemTemplateElement r27, $r38;
        org.apache.xpath.axes.LocPathIterator $r19;
        org.apache.xalan.templates.ElemVariable $r14;
        org.apache.xpath.axes.WalkingIterator r4, $r13, r17, $r28, r35;
        java.lang.StringBuffer $r20, $r22, $r24, $r25;
        int i0;
        java.lang.String $r26, $r39;
        java.io.PrintStream $r21;
        org.apache.xalan.templates.RedundentExprEliminator r5;
        java.lang.Object $r10, $r36;

        r5 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r0 := @parameter0: org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder;

        r6 := @parameter1: org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder;

        z3 := @parameter2: boolean;

        i0 := @parameter3: int;

        r27 := @parameter4: org.apache.xalan.templates.ElemTemplateElement;

        $r1 = r0.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xpath.ExpressionOwner m_exprOwner>;

        if null != $r1 goto label01;

        return r6;

     label01:
        $r2 = r0.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xpath.ExpressionOwner m_exprOwner>;

        $r3 = interfaceinvoke $r2.<org.apache.xpath.ExpressionOwner: org.apache.xpath.Expression getExpression()>();

        r4 = (org.apache.xpath.axes.WalkingIterator) $r3;

        $z0 = virtualinvoke r5.<org.apache.xalan.templates.RedundentExprEliminator: boolean partialIsVariable(org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder,int)>(r0, i0);

        if $z0 == 0 goto label02;

        return r6;

     label02:
        r32 = null;

        r33 = null;

        r34 = r6;

        goto label13;

     label03:
        if r34 == r0 goto label12;

        $r7 = r34.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xpath.ExpressionOwner m_exprOwner>;

        if null == $r7 goto label12;

        $r8 = r34.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xpath.ExpressionOwner m_exprOwner>;

        $r9 = interfaceinvoke $r8.<org.apache.xpath.ExpressionOwner: org.apache.xpath.Expression getExpression()>();

        r35 = (org.apache.xpath.axes.WalkingIterator) $r9;

        $z1 = virtualinvoke r5.<org.apache.xalan.templates.RedundentExprEliminator: boolean stepsEqual(org.apache.xpath.axes.WalkingIterator,org.apache.xpath.axes.WalkingIterator,int)>(r4, r35, i0);

        if $z1 == 0 goto label12;

        if null != r32 goto label08;

     label04:
        $r10 = virtualinvoke r0.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: java.lang.Object clone()>();

        r32 = (org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder) $r10;

        r0.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xpath.ExpressionOwner m_exprOwner> = null;

     label05:
        goto label07;

     label06:
        $r31 := @caughtexception;

     label07:
        r33 = r32;

        r32.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder m_next> = null;

     label08:
        $r36 = virtualinvoke r34.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: java.lang.Object clone()>();

        $r37 = (org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder) $r36;

        r33.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder m_next> = $r37;

        r34.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xpath.ExpressionOwner m_exprOwner> = null;

     label09:
        goto label11;

     label10:
        $r29 := @caughtexception;

     label11:
        $r30 = r33.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder m_next>;

        r33 = $r30;

        $r30.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder m_next> = null;

     label12:
        r34 = r34.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder m_next>;

     label13:
        if null != r34 goto label03;

        if null == r32 goto label21;

        if z3 == 0 goto label14;

        $r38 = r27;

        goto label15;

     label14:
        $r38 = virtualinvoke r5.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.ElemTemplateElement findCommonAncestor(org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder)>(r32);

     label15:
        $r11 = r32.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xpath.ExpressionOwner m_exprOwner>;

        $r12 = interfaceinvoke $r11.<org.apache.xpath.ExpressionOwner: org.apache.xpath.Expression getExpression()>();

        $r28 = (org.apache.xpath.axes.WalkingIterator) $r12;

        $r13 = virtualinvoke r5.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xpath.axes.WalkingIterator createIteratorFromSteps(org.apache.xpath.axes.WalkingIterator,int)>($r28, i0);

        $r14 = virtualinvoke r5.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.ElemVariable createPsuedoVarDecl(org.apache.xalan.templates.ElemTemplateElement,org.apache.xpath.axes.LocPathIterator,boolean)>($r38, $r13, z3);

        $z4 = <org.apache.xalan.templates.RedundentExprEliminator: boolean DIAGNOSE_MULTISTEPLIST>;

        if $z4 == 0 goto label20;

        $r21 = <java.lang.System: java.io.PrintStream err>;

        $r20 = new java.lang.StringBuffer;

        specialinvoke $r20.<java.lang.StringBuffer: void <init>()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Created var: ");

        $r23 = virtualinvoke $r14.<org.apache.xalan.templates.ElemVariable: org.apache.xml.utils.QName getName()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r23);

        if z3 == 0 goto label16;

        $r39 = "(Global)";

        goto label17;

     label16:
        $r39 = "";

     label17:
        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r39);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r21.<java.io.PrintStream: void println(java.lang.String)>($r26);

        goto label20;

     label18:
        r15 = r32.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xpath.ExpressionOwner m_exprOwner>;

        $r16 = interfaceinvoke r15.<org.apache.xpath.ExpressionOwner: org.apache.xpath.Expression getExpression()>();

        r17 = (org.apache.xpath.axes.WalkingIterator) $r16;

        $z5 = <org.apache.xalan.templates.RedundentExprEliminator: boolean DIAGNOSE_MULTISTEPLIST>;

        if $z5 == 0 goto label19;

        virtualinvoke r5.<org.apache.xalan.templates.RedundentExprEliminator: void diagnoseLineNumber(org.apache.xpath.Expression)>(r17);

     label19:
        $r18 = virtualinvoke $r14.<org.apache.xalan.templates.ElemVariable: org.apache.xml.utils.QName getName()>();

        $r19 = virtualinvoke r5.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xpath.axes.LocPathIterator changePartToRef(org.apache.xml.utils.QName,org.apache.xpath.axes.WalkingIterator,int,boolean)>($r18, r17, i0, z3);

        interfaceinvoke r15.<org.apache.xpath.ExpressionOwner: void setExpression(org.apache.xpath.Expression)>($r19);

        r32 = r32.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder m_next>;

     label20:
        if null != r32 goto label18;

     label21:
        $z2 = <org.apache.xalan.templates.RedundentExprEliminator: boolean DIAGNOSE_MULTISTEPLIST>;

        if $z2 == 0 goto label22;

        virtualinvoke r5.<org.apache.xalan.templates.RedundentExprEliminator: void diagnoseMultistepList(int,int,boolean)>(0, i0, z3);

     label22:
        return r6;

        catch java.lang.CloneNotSupportedException from label04 to label05 with label06;
        catch java.lang.CloneNotSupportedException from label08 to label09 with label10;
    }

    boolean partialIsVariable(org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder, int)
    {
        org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder r0;
        org.apache.xpath.Expression $r2;
        org.apache.xpath.axes.WalkingIterator r3;
        org.apache.xalan.templates.RedundentExprEliminator r5;
        int i0;
        org.apache.xpath.axes.AxesWalker $r4;
        org.apache.xpath.ExpressionOwner $r1;
        boolean $z0;

        r5 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r0 := @parameter0: org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder;

        i0 := @parameter1: int;

        if 1 != i0 goto label1;

        $r1 = r0.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xpath.ExpressionOwner m_exprOwner>;

        $r2 = interfaceinvoke $r1.<org.apache.xpath.ExpressionOwner: org.apache.xpath.Expression getExpression()>();

        r3 = (org.apache.xpath.axes.WalkingIterator) $r2;

        $r4 = virtualinvoke r3.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker getFirstWalker()>();

        $z0 = $r4 instanceof org.apache.xpath.axes.FilterExprWalker;

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected void diagnoseLineNumber(org.apache.xpath.Expression)
    {
        java.io.PrintStream $r4;
        org.apache.xpath.Expression r1;
        org.apache.xalan.templates.ElemTemplateElement $r2;
        org.apache.xalan.templates.RedundentExprEliminator r0;
        java.lang.StringBuffer $r3, $r5, $r7, $r8, $r9;
        int $i0;
        java.lang.String $r6, $r10;

        r0 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r1 := @parameter0: org.apache.xpath.Expression;

        $r2 = virtualinvoke r0.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.ElemTemplateElement getElemFromExpression(org.apache.xpath.Expression)>(r1);

        $r4 = <java.lang.System: java.io.PrintStream err>;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("   ");

        $r6 = virtualinvoke $r2.<org.apache.xalan.templates.ElemTemplateElement: java.lang.String getSystemId()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" Line ");

        $i0 = virtualinvoke $r2.<org.apache.xalan.templates.ElemTemplateElement: int getLineNumber()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r10);

        return;
    }

    protected org.apache.xalan.templates.ElemTemplateElement findCommonAncestor(org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder)
    {
        org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder r0, r23;
        int[] r2;
        org.apache.xalan.templates.ElemTemplateElement[] r1;
        org.apache.xpath.ExpressionOwner $r4;
        boolean $z0, $z1, $z2, z3;
        org.apache.xpath.Expression $r5;
        org.apache.xalan.templates.ElemTemplateElement $r6, $r7, $r8, $r9, $r10, $r11, r24;
        java.lang.StringBuffer $r17, $r19, $r20, $r21, $r25;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8, i9, i10, i11, i12, $i14;
        java.lang.String $r14, $r18, $r22;
        java.io.PrintStream $r12, $r16;
        org.apache.xalan.templates.RedundentExprEliminator r3;
        java.lang.Class $r13;

        r3 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r0 := @parameter0: org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder;

        $i0 = virtualinvoke r0.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: int getLength()>();

        r1 = newarray (org.apache.xalan.templates.ElemTemplateElement)[$i0];

        r2 = newarray (int)[$i0];

        r23 = r0;

        i6 = 10000;

        i7 = 0;

        goto label03;

     label01:
        $r4 = r23.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xpath.ExpressionOwner m_exprOwner>;

        $r5 = interfaceinvoke $r4.<org.apache.xpath.ExpressionOwner: org.apache.xpath.Expression getExpression()>();

        $r6 = virtualinvoke r3.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.ElemTemplateElement getElemFromExpression(org.apache.xpath.Expression)>($r5);

        r1[i7] = $r6;

        $i1 = virtualinvoke r3.<org.apache.xalan.templates.RedundentExprEliminator: int countAncestors(org.apache.xalan.templates.ElemTemplateElement)>($r6);

        r2[i7] = $i1;

        if $i1 >= i6 goto label02;

        i6 = $i1;

     label02:
        r23 = r23.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder m_next>;

        i7 = i7 + 1;

     label03:
        if i7 < $i0 goto label01;

        i8 = 0;

        goto label08;

     label04:
        $i2 = r2[i8];

        if $i2 <= i6 goto label07;

        $i3 = r2[i8];

        i9 = $i3 - i6;

        i10 = 0;

        goto label06;

     label05:
        $r7 = r1[i8];

        $r8 = virtualinvoke $r7.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement getParentElem()>();

        r1[i8] = $r8;

        i10 = i10 + 1;

     label06:
        if i10 < i9 goto label05;

     label07:
        i8 = i8 + 1;

     label08:
        if i8 < $i0 goto label04;

        goto label18;

     label09:
        z3 = 1;

        r24 = r1[0];

        i11 = 1;

        goto label12;

     label10:
        $r9 = r1[i11];

        if r24 == $r9 goto label11;

        z3 = 0;

        goto label13;

     label11:
        i11 = i11 + 1;

     label12:
        if i11 < $i0 goto label10;

     label13:
        if z3 == 0 goto label15;

        $z0 = virtualinvoke r3.<org.apache.xalan.templates.RedundentExprEliminator: boolean isNotSameAsOwner(org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder,org.apache.xalan.templates.ElemTemplateElement)>(r0, r24);

        if $z0 == 0 goto label15;

        $z1 = virtualinvoke r24.<org.apache.xalan.templates.ElemTemplateElement: boolean canAcceptVariables()>();

        if $z1 == 0 goto label15;

        $z2 = <org.apache.xalan.templates.RedundentExprEliminator: boolean DIAGNOSE_MULTISTEPLIST>;

        if $z2 == 0 goto label14;

        $r12 = <java.lang.System: java.io.PrintStream err>;

        $r13 = virtualinvoke r24.<java.lang.Object: java.lang.Class getClass()>();

        $r14 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r12.<java.io.PrintStream: void print(java.lang.String)>($r14);

        $r16 = <java.lang.System: java.io.PrintStream err>;

        $r25 = new java.lang.StringBuffer;

        specialinvoke $r25.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" at   ");

        $r18 = virtualinvoke r24.<org.apache.xalan.templates.ElemTemplateElement: java.lang.String getSystemId()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" Line ");

        $i5 = virtualinvoke r24.<org.apache.xalan.templates.ElemTemplateElement: int getLineNumber()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i5);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.String)>($r22);

     label14:
        return r24;

     label15:
        i12 = 0;

        goto label17;

     label16:
        $r10 = r1[i12];

        $r11 = virtualinvoke $r10.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement getParentElem()>();

        r1[i12] = $r11;

        i12 = i12 + 1;

     label17:
        if i12 < $i0 goto label16;

     label18:
        $i4 = i6;

        $i14 = (int) -1;

        i6 = i6 + $i14;

        if $i4 >= 0 goto label09;

        staticinvoke <org.apache.xalan.templates.RedundentExprEliminator: void assertion(boolean,java.lang.String)>(0, "Could not find common ancestor!!!");

        return null;
    }

    protected boolean isNotSameAsOwner(org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder, org.apache.xalan.templates.ElemTemplateElement)
    {
        org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder r0, r6;
        org.apache.xpath.Expression $r3;
        org.apache.xalan.templates.RedundentExprEliminator r1;
        org.apache.xalan.templates.ElemTemplateElement $r4, r5;
        org.apache.xpath.ExpressionOwner $r2;

        r1 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r0 := @parameter0: org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder;

        r5 := @parameter1: org.apache.xalan.templates.ElemTemplateElement;

        r6 = r0;

        goto label3;

     label1:
        $r2 = r6.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xpath.ExpressionOwner m_exprOwner>;

        $r3 = interfaceinvoke $r2.<org.apache.xpath.ExpressionOwner: org.apache.xpath.Expression getExpression()>();

        $r4 = virtualinvoke r1.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.ElemTemplateElement getElemFromExpression(org.apache.xpath.Expression)>($r3);

        if $r4 != r5 goto label2;

        return 0;

     label2:
        r6 = r6.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder m_next>;

     label3:
        if null != r6 goto label1;

        return 1;
    }

    protected int countAncestors(org.apache.xalan.templates.ElemTemplateElement)
    {
        int i0;
        org.apache.xalan.templates.RedundentExprEliminator r0;
        org.apache.xalan.templates.ElemTemplateElement r1;

        r0 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r1 := @parameter0: org.apache.xalan.templates.ElemTemplateElement;

        i0 = 0;

        goto label2;

     label1:
        i0 = i0 + 1;

        r1 = virtualinvoke r1.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement getParentElem()>();

     label2:
        if null != r1 goto label1;

        return i0;
    }

    protected void diagnoseMultistepList(int, int, boolean)
    {
        java.io.PrintStream $r1, $r8, $r9;
        org.apache.xalan.templates.RedundentExprEliminator r10;
        java.lang.StringBuffer $r0, $r2, $r3, $r4, $r5, $r6;
        int i0, i1;
        java.lang.String $r7;
        boolean z0;

        r10 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        if i0 <= 0 goto label2;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Found multistep matches: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" length");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void print(java.lang.String)>($r7);

        if z0 == 0 goto label1;

        $r9 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>(" (global)");

        goto label2;

     label1:
        $r8 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r8.<java.io.PrintStream: void println()>();

     label2:
        return;
    }

    protected org.apache.xpath.axes.LocPathIterator changePartToRef(org.apache.xml.utils.QName, org.apache.xpath.axes.WalkingIterator, int, boolean)
    {
        org.apache.xpath.ExpressionNode $r4;
        org.apache.xpath.axes.WalkingIterator r2;
        java.util.Vector $r9;
        int i0, $i1, $i2, i3;
        boolean z0, $z1;
        org.apache.xpath.axes.FilterExprWalker $r5;
        org.apache.xml.utils.QName r1;
        org.apache.xalan.templates.ElemTemplateElement $r7;
        org.apache.xpath.axes.FilterExprIteratorSimple $r3;
        org.apache.xpath.operations.Variable $r0;
        org.apache.xalan.templates.StylesheetRoot $r8;
        org.apache.xalan.templates.RedundentExprEliminator r6;
        org.apache.xpath.axes.AxesWalker r10;

        r6 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r1 := @parameter0: org.apache.xml.utils.QName;

        r2 := @parameter1: org.apache.xpath.axes.WalkingIterator;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        $r0 = new org.apache.xpath.operations.Variable;

        specialinvoke $r0.<org.apache.xpath.operations.Variable: void <init>()>();

        virtualinvoke $r0.<org.apache.xpath.operations.Variable: void setQName(org.apache.xml.utils.QName)>(r1);

        virtualinvoke $r0.<org.apache.xpath.operations.Variable: void setIsGlobal(boolean)>(z0);

        if z0 == 0 goto label1;

        $r7 = virtualinvoke r6.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.ElemTemplateElement getElemFromExpression(org.apache.xpath.Expression)>(r2);

        $r8 = virtualinvoke $r7.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.StylesheetRoot getStylesheetRoot()>();

        $r9 = virtualinvoke $r8.<org.apache.xalan.templates.StylesheetRoot: java.util.Vector getVariablesAndParamsComposed()>();

        $i1 = virtualinvoke $r9.<java.util.Vector: int size()>();

        $i2 = $i1 - 1;

        virtualinvoke $r0.<org.apache.xpath.operations.Variable: void setIndex(int)>($i2);

     label1:
        r10 = virtualinvoke r2.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker getFirstWalker()>();

        i3 = 0;

        goto label5;

     label2:
        if null == r10 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <org.apache.xalan.templates.RedundentExprEliminator: void assertion(boolean,java.lang.String)>($z1, "Walker should not be null!");

        r10 = virtualinvoke r10.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.AxesWalker getNextWalker()>();

        i3 = i3 + 1;

     label5:
        if i3 < i0 goto label2;

        if null == r10 goto label6;

        $r5 = new org.apache.xpath.axes.FilterExprWalker;

        specialinvoke $r5.<org.apache.xpath.axes.FilterExprWalker: void <init>(org.apache.xpath.axes.WalkingIterator)>(r2);

        virtualinvoke $r5.<org.apache.xpath.axes.FilterExprWalker: void setInnerExpression(org.apache.xpath.Expression)>($r0);

        virtualinvoke $r5.<org.apache.xpath.Expression: void exprSetParent(org.apache.xpath.ExpressionNode)>(r2);

        virtualinvoke $r5.<org.apache.xpath.axes.AxesWalker: void setNextWalker(org.apache.xpath.axes.AxesWalker)>(r10);

        virtualinvoke r10.<org.apache.xpath.axes.AxesWalker: void setPrevWalker(org.apache.xpath.axes.AxesWalker)>($r5);

        virtualinvoke r2.<org.apache.xpath.axes.WalkingIterator: void setFirstWalker(org.apache.xpath.axes.AxesWalker)>($r5);

        return r2;

     label6:
        $r3 = new org.apache.xpath.axes.FilterExprIteratorSimple;

        specialinvoke $r3.<org.apache.xpath.axes.FilterExprIteratorSimple: void <init>(org.apache.xpath.Expression)>($r0);

        $r4 = virtualinvoke r2.<org.apache.xpath.Expression: org.apache.xpath.ExpressionNode exprGetParent()>();

        virtualinvoke $r3.<org.apache.xpath.Expression: void exprSetParent(org.apache.xpath.ExpressionNode)>($r4);

        return $r3;
    }

    protected org.apache.xpath.axes.WalkingIterator createIteratorFromSteps(org.apache.xpath.axes.WalkingIterator, int)
    {
        org.apache.xml.utils.WrappedRuntimeException $r9;
        org.apache.xpath.axes.WalkingIterator $r0, r1;
        java.lang.CloneNotSupportedException $r8;
        org.apache.xalan.templates.RedundentExprEliminator r10;
        int i0, i1;
        org.apache.xpath.axes.AxesWalker $r3, $r5, r7, r11;
        java.lang.Object $r4, $r6;
        org.apache.xml.utils.PrefixResolver $r2;

        r10 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r1 := @parameter0: org.apache.xpath.axes.WalkingIterator;

        i0 := @parameter1: int;

        $r0 = new org.apache.xpath.axes.WalkingIterator;

        $r2 = virtualinvoke r1.<org.apache.xpath.axes.LocPathIterator: org.apache.xml.utils.PrefixResolver getPrefixResolver()>();

        specialinvoke $r0.<org.apache.xpath.axes.WalkingIterator: void <init>(org.apache.xml.utils.PrefixResolver)>($r2);

     label1:
        $r3 = virtualinvoke r1.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker getFirstWalker()>();

        $r4 = virtualinvoke $r3.<org.apache.xpath.axes.AxesWalker: java.lang.Object clone()>();

        r11 = (org.apache.xpath.axes.AxesWalker) $r4;

        virtualinvoke $r0.<org.apache.xpath.axes.WalkingIterator: void setFirstWalker(org.apache.xpath.axes.AxesWalker)>(r11);

        virtualinvoke r11.<org.apache.xpath.axes.PredicatedNodeTest: void setLocPathIterator(org.apache.xpath.axes.LocPathIterator)>($r0);

        i1 = 1;

        goto label3;

     label2:
        $r5 = virtualinvoke r11.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.AxesWalker getNextWalker()>();

        $r6 = virtualinvoke $r5.<org.apache.xpath.axes.AxesWalker: java.lang.Object clone()>();

        r7 = (org.apache.xpath.axes.AxesWalker) $r6;

        virtualinvoke r11.<org.apache.xpath.axes.AxesWalker: void setNextWalker(org.apache.xpath.axes.AxesWalker)>(r7);

        virtualinvoke r7.<org.apache.xpath.axes.PredicatedNodeTest: void setLocPathIterator(org.apache.xpath.axes.LocPathIterator)>($r0);

        r11 = r7;

        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label2;

        virtualinvoke r11.<org.apache.xpath.axes.AxesWalker: void setNextWalker(org.apache.xpath.axes.AxesWalker)>(null);

     label4:
        goto label6;

     label5:
        $r8 := @caughtexception;

        $r9 = new org.apache.xml.utils.WrappedRuntimeException;

        specialinvoke $r9.<org.apache.xml.utils.WrappedRuntimeException: void <init>(java.lang.Exception)>($r8);

        throw $r9;

     label6:
        return $r0;

        catch java.lang.CloneNotSupportedException from label1 to label4 with label5;
    }

    protected boolean stepsEqual(org.apache.xpath.axes.WalkingIterator, org.apache.xpath.axes.WalkingIterator, int)
    {
        org.apache.xpath.axes.WalkingIterator r0, r1;
        org.apache.xalan.templates.RedundentExprEliminator r2;
        int i0, i1;
        org.apache.xpath.axes.AxesWalker r3, r4;
        boolean $z0, $z1;

        r2 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r0 := @parameter0: org.apache.xpath.axes.WalkingIterator;

        r1 := @parameter1: org.apache.xpath.axes.WalkingIterator;

        i0 := @parameter2: int;

        r3 = virtualinvoke r0.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker getFirstWalker()>();

        r4 = virtualinvoke r1.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker getFirstWalker()>();

        i1 = 0;

        goto label5;

     label1:
        if null == r3 goto label2;

        if null != r4 goto label3;

     label2:
        return 0;

     label3:
        $z0 = virtualinvoke r3.<org.apache.xpath.axes.AxesWalker: boolean deepEquals(org.apache.xpath.Expression)>(r4);

        if $z0 != 0 goto label4;

        return 0;

     label4:
        r3 = virtualinvoke r3.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.AxesWalker getNextWalker()>();

        r4 = virtualinvoke r4.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.AxesWalker getNextWalker()>();

        i1 = i1 + 1;

     label5:
        if i1 < i0 goto label1;

        if null != r3 goto label6;

        if null == r4 goto label7;

     label6:
        $z1 = 1;

        goto label8;

     label7:
        $z1 = 0;

     label8:
        staticinvoke <org.apache.xalan.templates.RedundentExprEliminator: void assertion(boolean,java.lang.String)>($z1, "Total match is incorrect!");

        return 1;
    }

    protected org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder createMultistepExprList(java.util.Vector)
    {
        org.apache.xpath.Expression $r3;
        org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder $r6, r7;
        org.apache.xpath.axes.LocPathIterator r4;
        org.apache.xalan.templates.RedundentExprEliminator r5;
        java.util.Vector r0;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r1;
        org.apache.xpath.ExpressionOwner r2;

        r5 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r0 := @parameter0: java.util.Vector;

        r7 = null;

        $i0 = virtualinvoke r0.<java.util.Vector: int size()>();

        i3 = 0;

        goto label5;

     label1:
        $r1 = virtualinvoke r0.<java.util.Vector: java.lang.Object elementAt(int)>(i3);

        r2 = (org.apache.xpath.ExpressionOwner) $r1;

        if null != r2 goto label2;

        goto label4;

     label2:
        $r3 = interfaceinvoke r2.<org.apache.xpath.ExpressionOwner: org.apache.xpath.Expression getExpression()>();

        r4 = (org.apache.xpath.axes.LocPathIterator) $r3;

        $i1 = virtualinvoke r5.<org.apache.xalan.templates.RedundentExprEliminator: int countSteps(org.apache.xpath.axes.LocPathIterator)>(r4);

        if $i1 <= 1 goto label4;

        if null != r7 goto label3;

        $r6 = new org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder;

        specialinvoke $r6.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: void <init>(org.apache.xalan.templates.RedundentExprEliminator,org.apache.xpath.ExpressionOwner,int,org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder)>(r5, r2, $i1, null);

        r7 = $r6;

        goto label4;

     label3:
        r7 = virtualinvoke r7.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder addInSortedOrder(org.apache.xpath.ExpressionOwner,int)>(r2, $i1);

     label4:
        i3 = i3 + 1;

     label5:
        if i3 < $i0 goto label1;

        if null == r7 goto label6;

        $i2 = virtualinvoke r7.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: int getLength()>();

        if $i2 > 1 goto label7;

     label6:
        return null;

     label7:
        return r7;
    }

    protected int findAndEliminateRedundant(int, int, org.apache.xpath.ExpressionOwner, org.apache.xalan.templates.ElemTemplateElement, java.util.Vector) throws org.w3c.dom.DOMException
    {
        org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder $r7, $r8, $r24, r26, r27;
        java.util.Vector r0, $r4;
        org.apache.xpath.ExpressionOwner r1, $r9, r12, r28;
        boolean $z0, z1, $z2, $z3, $z4, $z5;
        org.apache.xpath.Expression $r2, $r6, $r10, $r13;
        org.apache.xml.utils.QName $r18, $r33;
        org.apache.xpath.XPath $r14;
        org.apache.xalan.templates.ElemTemplateElement r22, $r30, r31;
        org.apache.xpath.axes.LocPathIterator $r23, $r25, r29;
        org.apache.xalan.templates.ElemVariable $r11;
        java.lang.StringBuffer $r15, $r17, $r19, $r20;
        int $i0, $i1, i2, i3, i4, i5;
        java.lang.String $r21, $r32;
        java.io.PrintStream $r16;
        org.apache.xalan.templates.RedundentExprEliminator r3;
        java.lang.Object $r5;

        r3 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        i2 := @parameter0: int;

        i3 := @parameter1: int;

        r1 := @parameter2: org.apache.xpath.ExpressionOwner;

        r22 := @parameter3: org.apache.xalan.templates.ElemTemplateElement;

        r0 := @parameter4: java.util.Vector;

        r26 = null;

        r27 = null;

        i4 = 0;

        $i0 = virtualinvoke r0.<java.util.Vector: int size()>();

        $r2 = interfaceinvoke r1.<org.apache.xpath.ExpressionOwner: org.apache.xpath.Expression getExpression()>();

        $z0 = <org.apache.xalan.templates.RedundentExprEliminator: boolean DEBUG>;

        if $z0 == 0 goto label01;

        specialinvoke r3.<org.apache.xalan.templates.RedundentExprEliminator: void assertIsLocPathIterator(org.apache.xpath.Expression,org.apache.xpath.ExpressionOwner)>($r2, r1);

     label01:
        $r4 = r3.<org.apache.xalan.templates.RedundentExprEliminator: java.util.Vector m_absPaths>;

        if r0 != $r4 goto label02;

        $z5 = 1;

        goto label03;

     label02:
        $z5 = 0;

     label03:
        z1 = $z5;

        $r25 = (org.apache.xpath.axes.LocPathIterator) $r2;

        $i1 = virtualinvoke r3.<org.apache.xalan.templates.RedundentExprEliminator: int countSteps(org.apache.xpath.axes.LocPathIterator)>($r25);

        i5 = i2;

        goto label07;

     label04:
        $r5 = virtualinvoke r0.<java.util.Vector: java.lang.Object elementAt(int)>(i5);

        r28 = (org.apache.xpath.ExpressionOwner) $r5;

        if null == r28 goto label06;

        $r6 = interfaceinvoke r28.<org.apache.xpath.ExpressionOwner: org.apache.xpath.Expression getExpression()>();

        $z2 = virtualinvoke $r6.<org.apache.xpath.Expression: boolean deepEquals(org.apache.xpath.Expression)>($r25);

        if $z2 == 0 goto label06;

        r29 = (org.apache.xpath.axes.LocPathIterator) $r6;

        if null != r26 goto label05;

        $r8 = new org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder;

        specialinvoke $r8.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: void <init>(org.apache.xalan.templates.RedundentExprEliminator,org.apache.xpath.ExpressionOwner,int,org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder)>(r3, r1, $i1, null);

        r26 = $r8;

        r27 = $r8;

        i4 = i4 + 1;

     label05:
        $r7 = new org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder;

        specialinvoke $r7.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: void <init>(org.apache.xalan.templates.RedundentExprEliminator,org.apache.xpath.ExpressionOwner,int,org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder)>(r3, r28, $i1, null);

        r27.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder m_next> = $r7;

        r27 = r27.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder m_next>;

        virtualinvoke r0.<java.util.Vector: void setElementAt(java.lang.Object,int)>(null, i5);

        i4 = i4 + 1;

     label06:
        i5 = i5 + 1;

     label07:
        if i5 < $i0 goto label04;

        if 0 != i4 goto label08;

        if z1 == 0 goto label08;

        $r24 = new org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder;

        specialinvoke $r24.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: void <init>(org.apache.xalan.templates.RedundentExprEliminator,org.apache.xpath.ExpressionOwner,int,org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder)>(r3, r1, $i1, null);

        r26 = $r24;

        i4 = i4 + 1;

     label08:
        if null == r26 goto label17;

        if z1 == 0 goto label09;

        $r30 = r22;

        goto label10;

     label09:
        $r30 = virtualinvoke r3.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.ElemTemplateElement findCommonAncestor(org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder)>(r26);

     label10:
        r31 = $r30;

        $r9 = r26.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xpath.ExpressionOwner m_exprOwner>;

        $r10 = interfaceinvoke $r9.<org.apache.xpath.ExpressionOwner: org.apache.xpath.Expression getExpression()>();

        $r23 = (org.apache.xpath.axes.LocPathIterator) $r10;

        $r11 = virtualinvoke r3.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.ElemVariable createPsuedoVarDecl(org.apache.xalan.templates.ElemTemplateElement,org.apache.xpath.axes.LocPathIterator,boolean)>($r30, $r23, z1);

        $z3 = <org.apache.xalan.templates.RedundentExprEliminator: boolean DIAGNOSE_MULTISTEPLIST>;

        if $z3 == 0 goto label13;

        $r16 = <java.lang.System: java.io.PrintStream err>;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Created var: ");

        $r18 = virtualinvoke $r11.<org.apache.xalan.templates.ElemVariable: org.apache.xml.utils.QName getName()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r18);

        if z1 == 0 goto label11;

        $r32 = "(Global)";

        goto label12;

     label11:
        $r32 = "";

     label12:
        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r32);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.String)>($r21);

     label13:
        $r33 = virtualinvoke $r11.<org.apache.xalan.templates.ElemVariable: org.apache.xml.utils.QName getName()>();

        goto label16;

     label14:
        r12 = r26.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xpath.ExpressionOwner m_exprOwner>;

        $z4 = <org.apache.xalan.templates.RedundentExprEliminator: boolean DIAGNOSE_MULTISTEPLIST>;

        if $z4 == 0 goto label15;

        $r13 = interfaceinvoke r12.<org.apache.xpath.ExpressionOwner: org.apache.xpath.Expression getExpression()>();

        virtualinvoke r3.<org.apache.xalan.templates.RedundentExprEliminator: void diagnoseLineNumber(org.apache.xpath.Expression)>($r13);

     label15:
        virtualinvoke r3.<org.apache.xalan.templates.RedundentExprEliminator: void changeToVarRef(org.apache.xml.utils.QName,org.apache.xpath.ExpressionOwner,java.util.Vector,org.apache.xalan.templates.ElemTemplateElement)>($r33, r12, r0, r31);

        r26 = r26.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder m_next>;

     label16:
        if null != r26 goto label14;

        $r14 = virtualinvoke $r11.<org.apache.xalan.templates.ElemVariable: org.apache.xpath.XPath getSelect()>();

        virtualinvoke r0.<java.util.Vector: void setElementAt(java.lang.Object,int)>($r14, i3);

     label17:
        return i4;
    }

    protected int oldFindAndEliminateRedundant(int, int, org.apache.xpath.ExpressionOwner, org.apache.xalan.templates.ElemTemplateElement, java.util.Vector) throws org.w3c.dom.DOMException
    {
        org.apache.xalan.templates.ElemVariable $r9, $r13;
        java.util.Vector r0, $r4, $r12;
        int $i0, i1, i2, i3, i4;
        org.apache.xpath.ExpressionOwner r1, r18;
        boolean $z0, z1, $z2, z3, $z4;
        org.apache.xpath.Expression $r2, $r6;
        org.apache.xml.utils.QName $r10, $r14, r17;
        org.apache.xalan.templates.ElemTemplateElement r8;
        org.apache.xpath.XPath $r11, $r15;
        org.apache.xpath.axes.LocPathIterator r7, $r16;
        org.apache.xalan.templates.RedundentExprEliminator r3;
        java.lang.Object $r5;

        r3 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        i1 := @parameter0: int;

        i2 := @parameter1: int;

        r1 := @parameter2: org.apache.xpath.ExpressionOwner;

        r8 := @parameter3: org.apache.xalan.templates.ElemTemplateElement;

        r0 := @parameter4: java.util.Vector;

        r17 = null;

        z3 = 0;

        i3 = 0;

        $i0 = virtualinvoke r0.<java.util.Vector: int size()>();

        $r2 = interfaceinvoke r1.<org.apache.xpath.ExpressionOwner: org.apache.xpath.Expression getExpression()>();

        $z0 = <org.apache.xalan.templates.RedundentExprEliminator: boolean DEBUG>;

        if $z0 == 0 goto label01;

        specialinvoke r3.<org.apache.xalan.templates.RedundentExprEliminator: void assertIsLocPathIterator(org.apache.xpath.Expression,org.apache.xpath.ExpressionOwner)>($r2, r1);

     label01:
        $r4 = r3.<org.apache.xalan.templates.RedundentExprEliminator: java.util.Vector m_absPaths>;

        if r0 != $r4 goto label02;

        $z4 = 1;

        goto label03;

     label02:
        $z4 = 0;

     label03:
        z1 = $z4;

        $r16 = (org.apache.xpath.axes.LocPathIterator) $r2;

        i4 = i1;

        goto label08;

     label04:
        $r5 = virtualinvoke r0.<java.util.Vector: java.lang.Object elementAt(int)>(i4);

        r18 = (org.apache.xpath.ExpressionOwner) $r5;

        if null == r18 goto label07;

        $r6 = interfaceinvoke r18.<org.apache.xpath.ExpressionOwner: org.apache.xpath.Expression getExpression()>();

        $z2 = virtualinvoke $r6.<org.apache.xpath.Expression: boolean deepEquals(org.apache.xpath.Expression)>($r16);

        if $z2 == 0 goto label07;

        r7 = (org.apache.xpath.axes.LocPathIterator) $r6;

        if z3 != 0 goto label06;

        z3 = 1;

        $r9 = virtualinvoke r3.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.ElemVariable createPsuedoVarDecl(org.apache.xalan.templates.ElemTemplateElement,org.apache.xpath.axes.LocPathIterator,boolean)>(r8, $r16, z1);

        if null != $r9 goto label05;

        return 0;

     label05:
        $r10 = virtualinvoke $r9.<org.apache.xalan.templates.ElemVariable: org.apache.xml.utils.QName getName()>();

        r17 = $r10;

        virtualinvoke r3.<org.apache.xalan.templates.RedundentExprEliminator: void changeToVarRef(org.apache.xml.utils.QName,org.apache.xpath.ExpressionOwner,java.util.Vector,org.apache.xalan.templates.ElemTemplateElement)>($r10, r1, r0, r8);

        $r11 = virtualinvoke $r9.<org.apache.xalan.templates.ElemVariable: org.apache.xpath.XPath getSelect()>();

        virtualinvoke r0.<java.util.Vector: void setElementAt(java.lang.Object,int)>($r11, i2);

        i3 = i3 + 1;

     label06:
        virtualinvoke r3.<org.apache.xalan.templates.RedundentExprEliminator: void changeToVarRef(org.apache.xml.utils.QName,org.apache.xpath.ExpressionOwner,java.util.Vector,org.apache.xalan.templates.ElemTemplateElement)>(r17, r18, r0, r8);

        virtualinvoke r0.<java.util.Vector: void setElementAt(java.lang.Object,int)>(null, i4);

        i3 = i3 + 1;

     label07:
        i4 = i4 + 1;

     label08:
        if i4 < $i0 goto label04;

        if 0 != i3 goto label10;

        $r12 = r3.<org.apache.xalan.templates.RedundentExprEliminator: java.util.Vector m_absPaths>;

        if r0 != $r12 goto label10;

        $r13 = virtualinvoke r3.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.ElemVariable createPsuedoVarDecl(org.apache.xalan.templates.ElemTemplateElement,org.apache.xpath.axes.LocPathIterator,boolean)>(r8, $r16, 1);

        if null != $r13 goto label09;

        return 0;

     label09:
        $r14 = virtualinvoke $r13.<org.apache.xalan.templates.ElemVariable: org.apache.xml.utils.QName getName()>();

        virtualinvoke r3.<org.apache.xalan.templates.RedundentExprEliminator: void changeToVarRef(org.apache.xml.utils.QName,org.apache.xpath.ExpressionOwner,java.util.Vector,org.apache.xalan.templates.ElemTemplateElement)>($r14, r1, r0, r8);

        $r15 = virtualinvoke $r13.<org.apache.xalan.templates.ElemVariable: org.apache.xpath.XPath getSelect()>();

        virtualinvoke r0.<java.util.Vector: void setElementAt(java.lang.Object,int)>($r15, i2);

        i3 = i3 + 1;

     label10:
        return i3;
    }

    protected int countSteps(org.apache.xpath.axes.LocPathIterator)
    {
        org.apache.xalan.templates.RedundentExprEliminator r2;
        int i0;
        org.apache.xpath.axes.AxesWalker r3;
        org.apache.xpath.axes.LocPathIterator r0;
        org.apache.xpath.axes.WalkingIterator r1;
        boolean $z0;

        r2 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r0 := @parameter0: org.apache.xpath.axes.LocPathIterator;

        $z0 = r0 instanceof org.apache.xpath.axes.WalkingIterator;

        if $z0 == 0 goto label3;

        r1 = (org.apache.xpath.axes.WalkingIterator) r0;

        r3 = virtualinvoke r1.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker getFirstWalker()>();

        i0 = 0;

        goto label2;

     label1:
        i0 = i0 + 1;

        r3 = virtualinvoke r3.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.AxesWalker getNextWalker()>();

     label2:
        if null != r3 goto label1;

        return i0;

     label3:
        return 1;
    }

    protected void changeToVarRef(org.apache.xml.utils.QName, org.apache.xpath.ExpressionOwner, java.util.Vector, org.apache.xalan.templates.ElemTemplateElement)
    {
        org.apache.xml.utils.QName r4;
        org.apache.xalan.templates.ElemTemplateElement r7;
        org.apache.xpath.operations.VariableSafeAbsRef $r11;
        org.apache.xpath.operations.Variable r3, $r10, $r12;
        org.apache.xalan.templates.StylesheetRoot r8;
        org.apache.xalan.templates.RedundentExprEliminator r1;
        java.util.Vector r0, $r2, $r5, $r9;
        int $i0, $i1;
        org.apache.xpath.ExpressionOwner r6;

        r1 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r4 := @parameter0: org.apache.xml.utils.QName;

        r6 := @parameter1: org.apache.xpath.ExpressionOwner;

        r0 := @parameter2: java.util.Vector;

        r7 := @parameter3: org.apache.xalan.templates.ElemTemplateElement;

        $r2 = r1.<org.apache.xalan.templates.RedundentExprEliminator: java.util.Vector m_absPaths>;

        if r0 != $r2 goto label1;

        $r11 = new org.apache.xpath.operations.VariableSafeAbsRef;

        $r10 = $r11;

        specialinvoke $r11.<org.apache.xpath.operations.VariableSafeAbsRef: void <init>()>();

        goto label2;

     label1:
        $r12 = new org.apache.xpath.operations.Variable;

        $r10 = $r12;

        specialinvoke $r12.<org.apache.xpath.operations.Variable: void <init>()>();

     label2:
        r3 = $r10;

        virtualinvoke $r10.<org.apache.xpath.operations.Variable: void setQName(org.apache.xml.utils.QName)>(r4);

        $r5 = r1.<org.apache.xalan.templates.RedundentExprEliminator: java.util.Vector m_absPaths>;

        if r0 != $r5 goto label3;

        r8 = (org.apache.xalan.templates.StylesheetRoot) r7;

        $r9 = virtualinvoke r8.<org.apache.xalan.templates.StylesheetRoot: java.util.Vector getVariablesAndParamsComposed()>();

        $i0 = virtualinvoke $r9.<java.util.Vector: int size()>();

        $i1 = $i0 - 1;

        virtualinvoke $r10.<org.apache.xpath.operations.Variable: void setIndex(int)>($i1);

        virtualinvoke $r10.<org.apache.xpath.operations.Variable: void setIsGlobal(boolean)>(1);

     label3:
        interfaceinvoke r6.<org.apache.xpath.ExpressionOwner: void setExpression(org.apache.xpath.Expression)>(r3);

        return;
    }

    protected org.apache.xalan.templates.ElemVariable createPsuedoVarDecl(org.apache.xalan.templates.ElemTemplateElement, org.apache.xpath.axes.LocPathIterator, boolean) throws org.w3c.dom.DOMException
    {
        org.apache.xml.utils.QName $r0;
        org.apache.xalan.templates.ElemTemplateElement r6;
        org.apache.xalan.templates.ElemVariable $r8, $r10;
        org.apache.xpath.axes.LocPathIterator r7;
        org.apache.xalan.templates.StylesheetRoot $r9;
        org.apache.xalan.templates.RedundentExprEliminator r5;
        java.lang.StringBuffer $r1, $r2, $r3;
        int $i0, $i1, $i2;
        java.lang.String $r4;
        boolean z0;

        r5 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r6 := @parameter0: org.apache.xalan.templates.ElemTemplateElement;

        r7 := @parameter1: org.apache.xpath.axes.LocPathIterator;

        z0 := @parameter2: boolean;

        $r0 = new org.apache.xml.utils.QName;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("#");

        $i0 = <org.apache.xalan.templates.RedundentExprEliminator: int m_uniquePsuedoVarID>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<org.apache.xml.utils.QName: void <init>(java.lang.String,java.lang.String)>("http://xml.apache.org/xalan/psuedovar", $r4);

        $i1 = <org.apache.xalan.templates.RedundentExprEliminator: int m_uniquePsuedoVarID>;

        $i2 = $i1 + 1;

        <org.apache.xalan.templates.RedundentExprEliminator: int m_uniquePsuedoVarID> = $i2;

        if z0 == 0 goto label1;

        $r9 = (org.apache.xalan.templates.StylesheetRoot) r6;

        $r10 = virtualinvoke r5.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.ElemVariable createGlobalPsuedoVarDecl(org.apache.xml.utils.QName,org.apache.xalan.templates.StylesheetRoot,org.apache.xpath.axes.LocPathIterator)>($r0, $r9, r7);

        return $r10;

     label1:
        $r8 = virtualinvoke r5.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.ElemVariable createLocalPsuedoVarDecl(org.apache.xml.utils.QName,org.apache.xalan.templates.ElemTemplateElement,org.apache.xpath.axes.LocPathIterator)>($r0, r6, r7);

        return $r8;
    }

    protected org.apache.xalan.templates.ElemVariable createGlobalPsuedoVarDecl(org.apache.xml.utils.QName, org.apache.xalan.templates.StylesheetRoot, org.apache.xpath.axes.LocPathIterator) throws org.w3c.dom.DOMException
    {
        org.apache.xml.utils.QName r3;
        org.apache.xalan.templates.ElemVariable $r0;
        org.apache.xpath.XPath $r1;
        org.apache.xpath.axes.LocPathIterator r2;
        org.apache.xalan.templates.StylesheetRoot r4;
        org.apache.xalan.templates.RedundentExprEliminator r6;
        java.util.Vector $r5;
        int $i0;

        r6 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r3 := @parameter0: org.apache.xml.utils.QName;

        r4 := @parameter1: org.apache.xalan.templates.StylesheetRoot;

        r2 := @parameter2: org.apache.xpath.axes.LocPathIterator;

        $r0 = new org.apache.xalan.templates.ElemVariable;

        specialinvoke $r0.<org.apache.xalan.templates.ElemVariable: void <init>()>();

        virtualinvoke $r0.<org.apache.xalan.templates.ElemVariable: void setIsTopLevel(boolean)>(1);

        $r1 = new org.apache.xpath.XPath;

        specialinvoke $r1.<org.apache.xpath.XPath: void <init>(org.apache.xpath.Expression)>(r2);

        virtualinvoke $r0.<org.apache.xalan.templates.ElemVariable: void setSelect(org.apache.xpath.XPath)>($r1);

        virtualinvoke $r0.<org.apache.xalan.templates.ElemVariable: void setName(org.apache.xml.utils.QName)>(r3);

        $r5 = virtualinvoke r4.<org.apache.xalan.templates.StylesheetRoot: java.util.Vector getVariablesAndParamsComposed()>();

        $i0 = virtualinvoke $r5.<java.util.Vector: int size()>();

        virtualinvoke $r0.<org.apache.xalan.templates.ElemVariable: void setIndex(int)>($i0);

        virtualinvoke $r5.<java.util.Vector: void addElement(java.lang.Object)>($r0);

        return $r0;
    }

    protected org.apache.xalan.templates.ElemVariable createLocalPsuedoVarDecl(org.apache.xml.utils.QName, org.apache.xalan.templates.ElemTemplateElement, org.apache.xpath.axes.LocPathIterator) throws org.w3c.dom.DOMException
    {
        org.apache.xalan.templates.RedundentExprEliminator r4;
        org.apache.xml.utils.QName r3;
        org.apache.xpath.XPath $r1;
        org.apache.xalan.templates.ElemTemplateElement r5;
        org.apache.xalan.templates.ElemVariable $r6;
        org.apache.xalan.templates.ElemVariablePsuedo $r0;
        org.apache.xpath.axes.LocPathIterator r2;

        r4 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r3 := @parameter0: org.apache.xml.utils.QName;

        r5 := @parameter1: org.apache.xalan.templates.ElemTemplateElement;

        r2 := @parameter2: org.apache.xpath.axes.LocPathIterator;

        $r0 = new org.apache.xalan.templates.ElemVariablePsuedo;

        specialinvoke $r0.<org.apache.xalan.templates.ElemVariablePsuedo: void <init>()>();

        $r1 = new org.apache.xpath.XPath;

        specialinvoke $r1.<org.apache.xpath.XPath: void <init>(org.apache.xpath.Expression)>(r2);

        virtualinvoke $r0.<org.apache.xalan.templates.ElemVariable: void setSelect(org.apache.xpath.XPath)>($r1);

        virtualinvoke $r0.<org.apache.xalan.templates.ElemVariable: void setName(org.apache.xml.utils.QName)>(r3);

        $r6 = virtualinvoke r4.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.ElemVariable addVarDeclToElem(org.apache.xalan.templates.ElemTemplateElement,org.apache.xpath.axes.LocPathIterator,org.apache.xalan.templates.ElemVariable)>(r5, r2, $r0);

        virtualinvoke r2.<org.apache.xpath.Expression: void exprSetParent(org.apache.xpath.ExpressionNode)>($r6);

        return $r6;
    }

    protected org.apache.xalan.templates.ElemVariable addVarDeclToElem(org.apache.xalan.templates.ElemTemplateElement, org.apache.xpath.axes.LocPathIterator, org.apache.xalan.templates.ElemVariable) throws org.w3c.dom.DOMException
    {
        org.apache.xalan.templates.ElemVariable r4, r11;
        org.apache.xalan.templates.VarNameCollector $r2, $r3, $r7, $r12;
        int $i0, $i1, $i2;
        boolean $z0, $z1;
        org.apache.xml.utils.QName $r8;
        org.apache.xalan.templates.ElemTemplateElement $r5, $r6, r9, r10;
        org.apache.xpath.axes.LocPathIterator r0;
        org.apache.xalan.templates.RedundentExprEliminator r1;

        r1 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r9 := @parameter0: org.apache.xalan.templates.ElemTemplateElement;

        r0 := @parameter1: org.apache.xpath.axes.LocPathIterator;

        r4 := @parameter2: org.apache.xalan.templates.ElemVariable;

        r10 = virtualinvoke r9.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement getFirstChildElem()>();

        $r2 = r1.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.VarNameCollector m_varNameCollector>;

        virtualinvoke r0.<org.apache.xpath.axes.LocPathIterator: void callVisitors(org.apache.xpath.ExpressionOwner,org.apache.xpath.XPathVisitor)>(null, $r2);

        $r3 = r1.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.VarNameCollector m_varNameCollector>;

        $i0 = virtualinvoke $r3.<org.apache.xalan.templates.VarNameCollector: int getVarCount()>();

        if $i0 <= 0 goto label4;

        $r6 = virtualinvoke r1.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.ElemTemplateElement getElemFromExpression(org.apache.xpath.Expression)>(r0);

        r11 = virtualinvoke r1.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.ElemVariable getPrevVariableElem(org.apache.xalan.templates.ElemTemplateElement)>($r6);

        goto label3;

     label1:
        $r7 = r1.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.VarNameCollector m_varNameCollector>;

        $r8 = virtualinvoke r11.<org.apache.xalan.templates.ElemVariable: org.apache.xml.utils.QName getName()>();

        $z1 = virtualinvoke $r7.<org.apache.xalan.templates.VarNameCollector: boolean doesOccur(org.apache.xml.utils.QName)>($r8);

        if $z1 == 0 goto label2;

        r9 = virtualinvoke r11.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement getParentElem()>();

        r10 = virtualinvoke r11.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement getNextSiblingElem()>();

        goto label4;

     label2:
        r11 = virtualinvoke r1.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.ElemVariable getPrevVariableElem(org.apache.xalan.templates.ElemTemplateElement)>(r11);

     label3:
        if null != r11 goto label1;

     label4:
        if null == r10 goto label7;

        $i1 = virtualinvoke r10.<org.apache.xalan.templates.ElemTemplateElement: int getXSLToken()>();

        if 41 != $i1 goto label7;

        $z0 = virtualinvoke r1.<org.apache.xalan.templates.RedundentExprEliminator: boolean isParam(org.apache.xpath.ExpressionNode)>(r0);

        if $z0 == 0 goto label6;

        return null;

     label5:
        $r5 = virtualinvoke r10.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement getNextSiblingElem()>();

        r10 = $r5;

        if null == $r5 goto label6;

        $i2 = virtualinvoke $r5.<org.apache.xalan.templates.ElemTemplateElement: int getXSLToken()>();

        if 41 == $i2 goto label6;

        goto label7;

     label6:
        if null != r10 goto label5;

     label7:
        virtualinvoke r9.<org.apache.xalan.templates.ElemTemplateElement: org.w3c.dom.Node insertBefore(org.w3c.dom.Node,org.w3c.dom.Node)>(r4, r10);

        $r12 = r1.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.VarNameCollector m_varNameCollector>;

        virtualinvoke $r12.<org.apache.xalan.templates.VarNameCollector: void reset()>();

        return r4;
    }

    protected boolean isParam(org.apache.xpath.ExpressionNode)
    {
        org.apache.xpath.ExpressionNode r1;
        org.apache.xalan.templates.RedundentExprEliminator r0;
        org.apache.xalan.templates.ElemTemplateElement r2;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r1 := @parameter0: org.apache.xpath.ExpressionNode;

        goto label03;

     label01:
        $z0 = r1 instanceof org.apache.xalan.templates.ElemTemplateElement;

        if $z0 == 0 goto label02;

        goto label04;

     label02:
        r1 = interfaceinvoke r1.<org.apache.xpath.ExpressionNode: org.apache.xpath.ExpressionNode exprGetParent()>();

     label03:
        if null != r1 goto label01;

     label04:
        if null == r1 goto label10;

        r2 = (org.apache.xalan.templates.ElemTemplateElement) r1;

        goto label09;

     label05:
        $i0 = virtualinvoke r2.<org.apache.xalan.templates.ElemTemplateElement: int getXSLToken()>();

        lookupswitch($i0)
        {
            case 19: goto label07;
            case 25: goto label07;
            case 41: goto label06;
            default: goto label08;
        };

     label06:
        return 1;

     label07:
        return 0;

     label08:
        r2 = virtualinvoke r2.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement getParentElem()>();

     label09:
        if null != r2 goto label05;

     label10:
        return 0;
    }

    protected org.apache.xalan.templates.ElemVariable getPrevVariableElem(org.apache.xalan.templates.ElemTemplateElement)
    {
        org.apache.xalan.templates.RedundentExprEliminator r0;
        org.apache.xalan.templates.ElemTemplateElement $r1, r3;
        org.apache.xalan.templates.ElemVariable $r2;
        int $i0;

        r0 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r3 := @parameter0: org.apache.xalan.templates.ElemTemplateElement;

        goto label3;

     label1:
        $i0 = virtualinvoke $r1.<org.apache.xalan.templates.ElemTemplateElement: int getXSLToken()>();

        if 73 == $i0 goto label2;

        if 41 != $i0 goto label3;

     label2:
        $r2 = (org.apache.xalan.templates.ElemVariable) $r1;

        return $r2;

     label3:
        $r1 = virtualinvoke r0.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.ElemTemplateElement getPrevElementWithinContext(org.apache.xalan.templates.ElemTemplateElement)>(r3);

        r3 = $r1;

        if null != $r1 goto label1;

        return null;
    }

    protected org.apache.xalan.templates.ElemTemplateElement getPrevElementWithinContext(org.apache.xalan.templates.ElemTemplateElement)
    {
        org.apache.xalan.templates.RedundentExprEliminator r2;
        org.apache.xalan.templates.ElemTemplateElement r0, $r1, r3;
        int $i0;

        r2 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r0 := @parameter0: org.apache.xalan.templates.ElemTemplateElement;

        $r1 = virtualinvoke r0.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement getPreviousSiblingElem()>();

        r3 = $r1;

        if null != $r1 goto label1;

        r3 = virtualinvoke r0.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement getParentElem()>();

     label1:
        if null == r3 goto label3;

        $i0 = virtualinvoke r3.<org.apache.xalan.templates.ElemTemplateElement: int getXSLToken()>();

        if 28 == $i0 goto label2;

        if 19 == $i0 goto label2;

        if 25 != $i0 goto label3;

     label2:
        r3 = null;

     label3:
        return r3;
    }

    protected org.apache.xalan.templates.ElemTemplateElement getElemFromExpression(org.apache.xpath.Expression)
    {
        org.apache.xpath.ExpressionNode r5;
        org.apache.xpath.Expression r0;
        org.apache.xalan.templates.RedundentExprEliminator r4;
        org.apache.xalan.templates.ElemTemplateElement $r1;
        java.lang.RuntimeException $r2;
        java.lang.String $r3;
        boolean $z0;

        r4 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r0 := @parameter0: org.apache.xpath.Expression;

        r5 = virtualinvoke r0.<org.apache.xpath.Expression: org.apache.xpath.ExpressionNode exprGetParent()>();

        goto label3;

     label1:
        $z0 = r5 instanceof org.apache.xalan.templates.ElemTemplateElement;

        if $z0 == 0 goto label2;

        $r1 = (org.apache.xalan.templates.ElemTemplateElement) r5;

        return $r1;

     label2:
        r5 = interfaceinvoke r5.<org.apache.xpath.ExpressionNode: org.apache.xpath.ExpressionNode exprGetParent()>();

     label3:
        if null != r5 goto label1;

        $r2 = new java.lang.RuntimeException;

        $r3 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createMessage(java.lang.String,java.lang.Object[])>("ER_ASSERT_NO_TEMPLATE_PARENT", null);

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>($r3);

        throw $r2;
    }

    public boolean isAbsolute(org.apache.xpath.axes.LocPathIterator)
    {
        org.apache.xpath.axes.LocPathIterator r0;
        org.apache.xalan.templates.AbsPathChecker $r2;
        org.apache.xalan.templates.RedundentExprEliminator r1;
        int $i0;
        boolean $z0, $z1, z3, $z4, $z5;

        r1 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r0 := @parameter0: org.apache.xpath.axes.LocPathIterator;

        $i0 = virtualinvoke r0.<org.apache.xpath.axes.LocPathIterator: int getAnalysisBits()>();

        $z0 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean isSet(int,int)>($i0, 134217728);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean isSet(int,int)>($i0, 536870912);

        if $z1 == 0 goto label2;

     label1:
        $z5 = 1;

        $z4 = 1;

        goto label3;

     label2:
        $z5 = 0;

        $z4 = 0;

     label3:
        z3 = $z4;

        if $z5 == 0 goto label4;

        $r2 = r1.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.AbsPathChecker m_absPathChecker>;

        z3 = virtualinvoke $r2.<org.apache.xalan.templates.AbsPathChecker: boolean checkAbsolute(org.apache.xpath.axes.LocPathIterator)>(r0);

     label4:
        return z3;
    }

    public boolean visitLocationPath(org.apache.xpath.ExpressionOwner, org.apache.xpath.axes.LocPathIterator)
    {
        org.apache.xpath.axes.WalkingIterator r9;
        java.util.Vector $r2, $r4, $r5, $r6, $r7, $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.apache.xpath.ExpressionOwner r3;
        org.apache.xpath.Expression $r13;
        org.apache.xpath.axes.FilterExprWalker r12;
        org.apache.xpath.axes.LocPathIterator r0;
        org.apache.xalan.templates.RedundentExprEliminator r1;
        org.apache.xpath.axes.AxesWalker $r10, $r11;

        r1 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r3 := @parameter0: org.apache.xpath.ExpressionOwner;

        r0 := @parameter1: org.apache.xpath.axes.LocPathIterator;

        $z0 = r0 instanceof org.apache.xpath.axes.SelfIteratorNoPredicate;

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = r0 instanceof org.apache.xpath.axes.WalkingIterator;

        if $z1 == 0 goto label2;

        r9 = (org.apache.xpath.axes.WalkingIterator) r0;

        $r10 = virtualinvoke r9.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker getFirstWalker()>();

        $z5 = $r10 instanceof org.apache.xpath.axes.FilterExprWalker;

        if $z5 == 0 goto label2;

        $r11 = virtualinvoke $r10.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.AxesWalker getNextWalker()>();

        if null != $r11 goto label2;

        r12 = (org.apache.xpath.axes.FilterExprWalker) $r10;

        $r13 = virtualinvoke r12.<org.apache.xpath.axes.FilterExprWalker: org.apache.xpath.Expression getInnerExpression()>();

        $z6 = $r13 instanceof org.apache.xpath.operations.Variable;

        if $z6 == 0 goto label2;

        return 1;

     label2:
        $z7 = virtualinvoke r1.<org.apache.xalan.templates.RedundentExprEliminator: boolean isAbsolute(org.apache.xpath.axes.LocPathIterator)>(r0);

        if $z7 == 0 goto label4;

        $r6 = r1.<org.apache.xalan.templates.RedundentExprEliminator: java.util.Vector m_absPaths>;

        if null == $r6 goto label4;

        $z4 = <org.apache.xalan.templates.RedundentExprEliminator: boolean DEBUG>;

        if $z4 == 0 goto label3;

        $r8 = r1.<org.apache.xalan.templates.RedundentExprEliminator: java.util.Vector m_absPaths>;

        staticinvoke <org.apache.xalan.templates.RedundentExprEliminator: void validateNewAddition(java.util.Vector,org.apache.xpath.ExpressionOwner,org.apache.xpath.axes.LocPathIterator)>($r8, r3, r0);

     label3:
        $r7 = r1.<org.apache.xalan.templates.RedundentExprEliminator: java.util.Vector m_absPaths>;

        virtualinvoke $r7.<java.util.Vector: void addElement(java.lang.Object)>(r3);

        goto label6;

     label4:
        $z2 = r1.<org.apache.xalan.templates.RedundentExprEliminator: boolean m_isSameContext>;

        if $z2 == 0 goto label6;

        $r2 = r1.<org.apache.xalan.templates.RedundentExprEliminator: java.util.Vector m_paths>;

        if null == $r2 goto label6;

        $z3 = <org.apache.xalan.templates.RedundentExprEliminator: boolean DEBUG>;

        if $z3 == 0 goto label5;

        $r5 = r1.<org.apache.xalan.templates.RedundentExprEliminator: java.util.Vector m_paths>;

        staticinvoke <org.apache.xalan.templates.RedundentExprEliminator: void validateNewAddition(java.util.Vector,org.apache.xpath.ExpressionOwner,org.apache.xpath.axes.LocPathIterator)>($r5, r3, r0);

     label5:
        $r4 = r1.<org.apache.xalan.templates.RedundentExprEliminator: java.util.Vector m_paths>;

        virtualinvoke $r4.<java.util.Vector: void addElement(java.lang.Object)>(r3);

     label6:
        return 1;
    }

    public boolean visitPredicate(org.apache.xpath.ExpressionOwner, org.apache.xpath.Expression)
    {
        org.apache.xpath.Expression r1;
        org.apache.xalan.templates.RedundentExprEliminator r0;
        boolean z0;
        org.apache.xpath.ExpressionOwner r2;

        r0 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r2 := @parameter0: org.apache.xpath.ExpressionOwner;

        r1 := @parameter1: org.apache.xpath.Expression;

        z0 = r0.<org.apache.xalan.templates.RedundentExprEliminator: boolean m_isSameContext>;

        r0.<org.apache.xalan.templates.RedundentExprEliminator: boolean m_isSameContext> = 0;

        virtualinvoke r1.<org.apache.xpath.Expression: void callVisitors(org.apache.xpath.ExpressionOwner,org.apache.xpath.XPathVisitor)>(r2, r0);

        r0.<org.apache.xalan.templates.RedundentExprEliminator: boolean m_isSameContext> = z0;

        return 0;
    }

    public boolean visitTopLevelInstruction(org.apache.xalan.templates.ElemTemplateElement)
    {
        org.apache.xalan.templates.RedundentExprEliminator r1;
        org.apache.xalan.templates.ElemTemplateElement r0;
        int $i0;
        boolean $z0;

        r1 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r0 := @parameter0: org.apache.xalan.templates.ElemTemplateElement;

        $i0 = virtualinvoke r0.<org.apache.xalan.templates.ElemTemplateElement: int getXSLToken()>();

        lookupswitch($i0)
        {
            case 19: goto label1;
            default: goto label2;
        };

     label1:
        $z0 = virtualinvoke r1.<org.apache.xalan.templates.RedundentExprEliminator: boolean visitInstruction(org.apache.xalan.templates.ElemTemplateElement)>(r0);

        return $z0;

     label2:
        return 1;
    }

    public boolean visitInstruction(org.apache.xalan.templates.ElemTemplateElement)
    {
        org.apache.xpath.Expression $r3;
        org.apache.xalan.templates.ElemTemplateElement r0;
        org.apache.xalan.templates.ElemForEach r5;
        org.apache.xalan.templates.RedundentExprEliminator r1;
        java.util.Vector $r2, $r4;
        int $i0;
        boolean z0;

        r1 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r0 := @parameter0: org.apache.xalan.templates.ElemTemplateElement;

        $i0 = virtualinvoke r0.<org.apache.xalan.templates.ElemTemplateElement: int getXSLToken()>();

        lookupswitch($i0)
        {
            case 17: goto label1;
            case 19: goto label1;
            case 28: goto label1;
            case 35: goto label3;
            case 64: goto label3;
            default: goto label4;
        };

     label1:
        if $i0 != 28 goto label2;

        r5 = (org.apache.xalan.templates.ElemForEach) r0;

        $r3 = virtualinvoke r5.<org.apache.xalan.templates.ElemForEach: org.apache.xpath.Expression getSelect()>();

        virtualinvoke $r3.<org.apache.xpath.Expression: void callVisitors(org.apache.xpath.ExpressionOwner,org.apache.xpath.XPathVisitor)>(r5, r1);

     label2:
        $r4 = r1.<org.apache.xalan.templates.RedundentExprEliminator: java.util.Vector m_paths>;

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>()>();

        r1.<org.apache.xalan.templates.RedundentExprEliminator: java.util.Vector m_paths> = $r2;

        virtualinvoke r0.<org.apache.xalan.templates.ElemTemplateElement: void callChildVisitors(org.apache.xalan.templates.XSLTVisitor,boolean)>(r1, 0);

        virtualinvoke r1.<org.apache.xalan.templates.RedundentExprEliminator: void eleminateRedundentLocals(org.apache.xalan.templates.ElemTemplateElement)>(r0);

        r1.<org.apache.xalan.templates.RedundentExprEliminator: java.util.Vector m_paths> = $r4;

        return 0;

     label3:
        z0 = r1.<org.apache.xalan.templates.RedundentExprEliminator: boolean m_isSameContext>;

        r1.<org.apache.xalan.templates.RedundentExprEliminator: boolean m_isSameContext> = 0;

        virtualinvoke r0.<org.apache.xalan.templates.ElemTemplateElement: void callChildVisitors(org.apache.xalan.templates.XSLTVisitor)>(r1);

        r1.<org.apache.xalan.templates.RedundentExprEliminator: boolean m_isSameContext> = z0;

        return 0;

     label4:
        return 1;
    }

    protected void diagnoseNumPaths(java.util.Vector, int, int)
    {
        java.util.Vector r0, $r2;
        java.lang.StringBuffer $r3, $r5, $r6, $r7, $r9, $r11, $r12, $r13, $r15, $r17, $r18, $r19, $r21, $r23, $r24, $r25;
        int i0, i1;
        java.lang.String $r8, $r14, $r20, $r26;
        java.io.PrintStream $r4, $r10, $r16, $r22;
        org.apache.xalan.templates.RedundentExprEliminator r1;

        r1 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r0 := @parameter0: java.util.Vector;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i0 <= 0 goto label2;

        $r2 = r1.<org.apache.xalan.templates.RedundentExprEliminator: java.util.Vector m_paths>;

        if r0 != $r2 goto label1;

        $r16 = <java.lang.System: java.io.PrintStream err>;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Eliminated ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" total paths!");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.String)>($r20);

        $r22 = <java.lang.System: java.io.PrintStream err>;

        $r21 = new java.lang.StringBuffer;

        specialinvoke $r21.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Consolodated ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" redundent paths!");

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r22.<java.io.PrintStream: void println(java.lang.String)>($r26);

        goto label2;

     label1:
        $r4 = <java.lang.System: java.io.PrintStream err>;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Eliminated ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" total global paths!");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r8);

        $r10 = <java.lang.System: java.io.PrintStream err>;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Consolodated ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" redundent global paths!");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r14);

     label2:
        return;
    }

    private final void assertIsLocPathIterator(org.apache.xpath.Expression, org.apache.xpath.ExpressionOwner) throws java.lang.RuntimeException
    {
        org.apache.xpath.ExpressionNode $r15;
        java.lang.StringBuffer $r1, $r2, $r5, $r7, $r8, $r9, $r13, $r14, $r16, $r18, $r19, $r22;
        java.lang.String $r4, $r12, $r17, r24;
        boolean $z0, $z1;
        org.apache.xpath.ExpressionOwner r10;
        org.apache.xpath.Expression r0;
        org.apache.xml.utils.QName $r21;
        org.apache.xpath.operations.Variable $r20;
        java.lang.RuntimeException $r6;
        org.apache.xalan.templates.RedundentExprEliminator r23;
        java.lang.Class $r3, $r11;

        r23 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r0 := @parameter0: org.apache.xpath.Expression;

        r10 := @parameter1: org.apache.xpath.ExpressionOwner;

        $z0 = r0 instanceof org.apache.xpath.axes.LocPathIterator;

        if $z0 != 0 goto label3;

        $z1 = r0 instanceof org.apache.xpath.operations.Variable;

        if $z1 == 0 goto label1;

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Programmer\'s assertion: expr1 not an iterator: ");

        $r20 = (org.apache.xpath.operations.Variable) r0;

        $r21 = virtualinvoke $r20.<org.apache.xpath.operations.Variable: org.apache.xml.utils.QName getQName()>();

        $r22 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r21);

        r24 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label2;

     label1:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Programmer\'s assertion: expr1 not an iterator: ");

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        r24 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

     label2:
        $r6 = new java.lang.RuntimeException;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r24);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r11 = virtualinvoke r10.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();

        $r13 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r15 = virtualinvoke r0.<org.apache.xpath.Expression: org.apache.xpath.ExpressionNode exprGetParent()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r17);

        throw $r6;

     label3:
        return;
    }

    private static void validateNewAddition(java.util.Vector, org.apache.xpath.ExpressionOwner, org.apache.xpath.axes.LocPathIterator) throws java.lang.RuntimeException
    {
        org.apache.xpath.Expression $r1, $r6;
        org.apache.xpath.axes.LocPathIterator r2;
        java.util.Vector r3;
        int $i0, i1;
        java.lang.Object $r4;
        org.apache.xpath.ExpressionOwner r0, r5;
        boolean $z0, $z1, $z2;

        r3 := @parameter0: java.util.Vector;

        r0 := @parameter1: org.apache.xpath.ExpressionOwner;

        r2 := @parameter2: org.apache.xpath.axes.LocPathIterator;

        $r1 = interfaceinvoke r0.<org.apache.xpath.ExpressionOwner: org.apache.xpath.Expression getExpression()>();

        if $r1 != r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.xalan.templates.RedundentExprEliminator: void assertion(boolean,java.lang.String)>($z0, "owner.getExpression() != path!!!");

        $i0 = virtualinvoke r3.<java.util.Vector: int size()>();

        i1 = 0;

        goto label8;

     label3:
        $r4 = virtualinvoke r3.<java.util.Vector: java.lang.Object elementAt(int)>(i1);

        r5 = (org.apache.xpath.ExpressionOwner) $r4;

        if r5 == r0 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        staticinvoke <org.apache.xalan.templates.RedundentExprEliminator: void assertion(boolean,java.lang.String)>($z1, "duplicate owner on the list!!!");

        $r6 = interfaceinvoke r5.<org.apache.xpath.ExpressionOwner: org.apache.xpath.Expression getExpression()>();

        if $r6 == r2 goto label6;

        $z2 = 1;

        goto label7;

     label6:
        $z2 = 0;

     label7:
        staticinvoke <org.apache.xalan.templates.RedundentExprEliminator: void assertion(boolean,java.lang.String)>($z2, "duplicate expression on the list!!!");

        i1 = i1 + 1;

     label8:
        if i1 < $i0 goto label3;

        return;
    }

    protected static void assertion(boolean, java.lang.String)
    {
        java.lang.Object[] $r1;
        java.lang.RuntimeException $r0;
        java.lang.String r2, $r3;
        boolean z0;

        z0 := @parameter0: boolean;

        r2 := @parameter1: java.lang.String;

        if z0 != 0 goto label1;

        $r0 = new java.lang.RuntimeException;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r2;

        $r3 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createMessage(java.lang.String,java.lang.Object[])>("ER_ASSERT_REDUNDENT_EXPR_ELIMINATOR", $r1);

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>($r3);

        throw $r0;

     label1:
        return;
    }

    static void <clinit>()
    {
        <org.apache.xalan.templates.RedundentExprEliminator: java.lang.String PSUEDOVARNAMESPACE> = "http://xml.apache.org/xalan/psuedovar";

        <org.apache.xalan.templates.RedundentExprEliminator: int m_uniquePsuedoVarID> = 1;

        <org.apache.xalan.templates.RedundentExprEliminator: boolean DEBUG> = 0;

        <org.apache.xalan.templates.RedundentExprEliminator: boolean DIAGNOSE_NUM_PATHS_REDUCED> = 0;

        <org.apache.xalan.templates.RedundentExprEliminator: boolean DIAGNOSE_MULTISTEPLIST> = 0;

        return;
    }
}
