public class org.mozilla.javascript.tools.ToolErrorReporter extends java.lang.Object implements org.mozilla.javascript.ErrorReporter
{
    private final java.lang.String messagePrefix;
    private boolean hasReportedErrorFlag;
    private boolean reportWarnings;
    private java.io.PrintStream err;

    public void <init>(boolean)
    {
        java.io.PrintStream $r1;
        org.mozilla.javascript.tools.ToolErrorReporter r0;
        boolean z0;

        r0 := @this: org.mozilla.javascript.tools.ToolErrorReporter;

        z0 := @parameter0: boolean;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        specialinvoke r0.<org.mozilla.javascript.tools.ToolErrorReporter: void <init>(boolean,java.io.PrintStream)>(z0, $r1);

        return;
    }

    public void <init>(boolean, java.io.PrintStream)
    {
        java.io.PrintStream r1;
        org.mozilla.javascript.tools.ToolErrorReporter r0;
        boolean z0;

        r0 := @this: org.mozilla.javascript.tools.ToolErrorReporter;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.io.PrintStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.mozilla.javascript.tools.ToolErrorReporter: java.lang.String messagePrefix> = "js: ";

        r0.<org.mozilla.javascript.tools.ToolErrorReporter: java.lang.String messagePrefix> = "js: ";

        r0.<org.mozilla.javascript.tools.ToolErrorReporter: boolean reportWarnings> = z0;

        r0.<org.mozilla.javascript.tools.ToolErrorReporter: java.io.PrintStream err> = r1;

        return;
    }

    public static java.lang.String getMessage(java.lang.String)
    {
        java.lang.String r0, $r2;
        java.lang.Object[] $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = (java.lang.Object[]) null;

        $r2 = staticinvoke <org.mozilla.javascript.tools.ToolErrorReporter: java.lang.String getMessage(java.lang.String,java.lang.Object[])>(r0, $r1);

        return $r2;
    }

    public static java.lang.String getMessage(java.lang.String, java.lang.String)
    {
        java.lang.Object[] $r0;
        java.lang.String r1, r2, $r3;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r0 = newarray (java.lang.Object)[1];

        $r0[0] = r1;

        $r3 = staticinvoke <org.mozilla.javascript.tools.ToolErrorReporter: java.lang.String getMessage(java.lang.String,java.lang.Object[])>(r2, $r0);

        return $r3;
    }

    public static java.lang.String getMessage(java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r0;
        java.lang.Object r1, r2;
        java.lang.String r3, $r4;

        r3 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        $r0 = newarray (java.lang.Object)[2];

        $r0[0] = r1;

        $r0[1] = r2;

        $r4 = staticinvoke <org.mozilla.javascript.tools.ToolErrorReporter: java.lang.String getMessage(java.lang.String,java.lang.Object[])>(r3, $r0);

        return $r4;
    }

    public static java.lang.String getMessage(java.lang.String, java.lang.Object[])
    {
        java.lang.Object[] r4;
        org.mozilla.javascript.Context $r0;
        java.util.MissingResourceException $r7;
        java.lang.RuntimeException $r8;
        java.text.MessageFormat $r5;
        java.util.ResourceBundle $r1;
        java.lang.StringBuffer $r9, $r10, $r11;
        java.util.Locale $r13;
        java.lang.String r2, $r3, $r6, $r12;

        r2 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.Object[];

        $r0 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.Context getCurrentContext()>();

        if $r0 != null goto label1;

        $r13 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        goto label2;

     label1:
        $r13 = virtualinvoke $r0.<org.mozilla.javascript.Context: java.util.Locale getLocale()>();

     label2:
        $r1 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale)>("org.mozilla.javascript.tools.resources.Messages", $r13);

     label3:
        $r3 = virtualinvoke $r1.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>(r2);

     label4:
        goto label6;

     label5:
        $r7 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("no message resource found for message property ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>($r12);

        throw $r8;

     label6:
        if r4 != null goto label7;

        return $r3;

     label7:
        $r5 = new java.text.MessageFormat;

        specialinvoke $r5.<java.text.MessageFormat: void <init>(java.lang.String)>($r3);

        $r6 = virtualinvoke $r5.<java.text.MessageFormat: java.lang.String format(java.lang.Object)>(r4);

        return $r6;

        catch java.util.MissingResourceException from label3 to label4 with label5;
    }

    private static java.lang.String getExceptionMessage(org.mozilla.javascript.RhinoException)
    {
        org.mozilla.javascript.RhinoException r0;
        java.lang.String $r1, $r2, r3;
        boolean $z0, $z1;

        r0 := @parameter0: org.mozilla.javascript.RhinoException;

        $z0 = r0 instanceof org.mozilla.javascript.JavaScriptException;

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<org.mozilla.javascript.RhinoException: java.lang.String details()>();

        r3 = staticinvoke <org.mozilla.javascript.tools.ToolErrorReporter: java.lang.String getMessage(java.lang.String,java.lang.String)>("msg.uncaughtJSException", $r2);

        goto label3;

     label1:
        $z1 = r0 instanceof org.mozilla.javascript.EcmaError;

        if $z1 == 0 goto label2;

        $r1 = virtualinvoke r0.<org.mozilla.javascript.RhinoException: java.lang.String details()>();

        r3 = staticinvoke <org.mozilla.javascript.tools.ToolErrorReporter: java.lang.String getMessage(java.lang.String,java.lang.String)>("msg.uncaughtEcmaError", $r1);

        goto label3;

     label2:
        r3 = virtualinvoke r0.<org.mozilla.javascript.RhinoException: java.lang.String toString()>();

     label3:
        return r3;
    }

    public void warning(java.lang.String, java.lang.String, int, java.lang.String, int)
    {
        int i0, i1;
        java.lang.String r1, r2, r3;
        org.mozilla.javascript.tools.ToolErrorReporter r0;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.tools.ToolErrorReporter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: java.lang.String;

        i1 := @parameter4: int;

        $z0 = r0.<org.mozilla.javascript.tools.ToolErrorReporter: boolean reportWarnings>;

        if $z0 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<org.mozilla.javascript.tools.ToolErrorReporter: void reportErrorMessage(java.lang.String,java.lang.String,int,java.lang.String,int,boolean)>(r1, r2, i0, r3, i1, 1);

        return;
    }

    public void error(java.lang.String, java.lang.String, int, java.lang.String, int)
    {
        int i0, i1;
        java.lang.String r1, r2, r3;
        org.mozilla.javascript.tools.ToolErrorReporter r0;

        r0 := @this: org.mozilla.javascript.tools.ToolErrorReporter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: java.lang.String;

        i1 := @parameter4: int;

        r0.<org.mozilla.javascript.tools.ToolErrorReporter: boolean hasReportedErrorFlag> = 1;

        specialinvoke r0.<org.mozilla.javascript.tools.ToolErrorReporter: void reportErrorMessage(java.lang.String,java.lang.String,int,java.lang.String,int,boolean)>(r1, r2, i0, r3, i1, 0);

        return;
    }

    public org.mozilla.javascript.EvaluatorException runtimeError(java.lang.String, java.lang.String, int, java.lang.String, int)
    {
        org.mozilla.javascript.EvaluatorException $r4;
        int i0, i1;
        java.lang.String r1, r2, r3;
        org.mozilla.javascript.tools.ToolErrorReporter r0;

        r0 := @this: org.mozilla.javascript.tools.ToolErrorReporter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: java.lang.String;

        i1 := @parameter4: int;

        virtualinvoke r0.<org.mozilla.javascript.tools.ToolErrorReporter: void error(java.lang.String,java.lang.String,int,java.lang.String,int)>(r1, r2, i0, r3, i1);

        $r4 = new org.mozilla.javascript.EvaluatorException;

        specialinvoke $r4.<org.mozilla.javascript.EvaluatorException: void <init>(java.lang.String,java.lang.String,int,java.lang.String,int)>(r1, r2, i0, r3, i1);

        return $r4;
    }

    public boolean hasReportedError()
    {
        org.mozilla.javascript.tools.ToolErrorReporter r0;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.tools.ToolErrorReporter;

        $z0 = r0.<org.mozilla.javascript.tools.ToolErrorReporter: boolean hasReportedErrorFlag>;

        return $z0;
    }

    public boolean isReportingWarnings()
    {
        org.mozilla.javascript.tools.ToolErrorReporter r0;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.tools.ToolErrorReporter;

        $z0 = r0.<org.mozilla.javascript.tools.ToolErrorReporter: boolean reportWarnings>;

        return $z0;
    }

    public void setIsReportingWarnings(boolean)
    {
        org.mozilla.javascript.tools.ToolErrorReporter r0;
        boolean z0;

        r0 := @this: org.mozilla.javascript.tools.ToolErrorReporter;

        z0 := @parameter0: boolean;

        r0.<org.mozilla.javascript.tools.ToolErrorReporter: boolean reportWarnings> = z0;

        return;
    }

    public static void reportException(org.mozilla.javascript.ErrorReporter, org.mozilla.javascript.RhinoException)
    {
        org.mozilla.javascript.RhinoException r1;
        org.mozilla.javascript.tools.ToolErrorReporter $r5;
        org.mozilla.javascript.ErrorReporter r0;
        int $i0, $i1;
        java.lang.String $r2, $r3, $r4;
        boolean $z0;

        r0 := @parameter0: org.mozilla.javascript.ErrorReporter;

        r1 := @parameter1: org.mozilla.javascript.RhinoException;

        $z0 = r0 instanceof org.mozilla.javascript.tools.ToolErrorReporter;

        if $z0 == 0 goto label1;

        $r5 = (org.mozilla.javascript.tools.ToolErrorReporter) r0;

        virtualinvoke $r5.<org.mozilla.javascript.tools.ToolErrorReporter: void reportException(org.mozilla.javascript.RhinoException)>(r1);

        goto label2;

     label1:
        $r2 = staticinvoke <org.mozilla.javascript.tools.ToolErrorReporter: java.lang.String getExceptionMessage(org.mozilla.javascript.RhinoException)>(r1);

        $r3 = virtualinvoke r1.<org.mozilla.javascript.RhinoException: java.lang.String sourceName()>();

        $i0 = virtualinvoke r1.<org.mozilla.javascript.RhinoException: int lineNumber()>();

        $r4 = virtualinvoke r1.<org.mozilla.javascript.RhinoException: java.lang.String lineSource()>();

        $i1 = virtualinvoke r1.<org.mozilla.javascript.RhinoException: int columnNumber()>();

        interfaceinvoke r0.<org.mozilla.javascript.ErrorReporter: void error(java.lang.String,java.lang.String,int,java.lang.String,int)>($r2, $r3, $i0, $r4, $i1);

     label2:
        return;
    }

    public void reportException(org.mozilla.javascript.RhinoException)
    {
        java.io.PrintStream $r5;
        org.mozilla.javascript.RhinoException r0;
        org.mozilla.javascript.tools.ToolErrorReporter r2;
        org.mozilla.javascript.WrappedException r6;
        int $i0, $i1;
        java.lang.String $r1, $r3, $r4;
        boolean $z0;

        r2 := @this: org.mozilla.javascript.tools.ToolErrorReporter;

        r0 := @parameter0: org.mozilla.javascript.RhinoException;

        $z0 = r0 instanceof org.mozilla.javascript.WrappedException;

        if $z0 == 0 goto label1;

        r6 = (org.mozilla.javascript.WrappedException) r0;

        $r5 = r2.<org.mozilla.javascript.tools.ToolErrorReporter: java.io.PrintStream err>;

        virtualinvoke r6.<org.mozilla.javascript.WrappedException: void printStackTrace(java.io.PrintStream)>($r5);

        goto label2;

     label1:
        $r1 = staticinvoke <org.mozilla.javascript.tools.ToolErrorReporter: java.lang.String getExceptionMessage(org.mozilla.javascript.RhinoException)>(r0);

        $r3 = virtualinvoke r0.<org.mozilla.javascript.RhinoException: java.lang.String sourceName()>();

        $i0 = virtualinvoke r0.<org.mozilla.javascript.RhinoException: int lineNumber()>();

        $r4 = virtualinvoke r0.<org.mozilla.javascript.RhinoException: java.lang.String lineSource()>();

        $i1 = virtualinvoke r0.<org.mozilla.javascript.RhinoException: int columnNumber()>();

        specialinvoke r2.<org.mozilla.javascript.tools.ToolErrorReporter: void reportErrorMessage(java.lang.String,java.lang.String,int,java.lang.String,int,boolean)>($r1, $r3, $i0, $r4, $i1, 0);

     label2:
        return;
    }

    private void reportErrorMessage(java.lang.String, java.lang.String, int, java.lang.String, int, boolean)
    {
        java.lang.Object[] $r0, $r21, $r22;
        org.mozilla.javascript.tools.ToolErrorReporter r1;
        java.lang.StringBuffer $r2, $r4, $r5, $r8, $r10, $r11, $r13, $r15, $r17;
        int i0, i1;
        java.lang.String $r6, r7, $r12, $r16, $r18, $r19, r20, r23, r24;
        boolean z0;
        java.io.PrintStream $r3, $r9, $r14;

        r1 := @this: org.mozilla.javascript.tools.ToolErrorReporter;

        r23 := @parameter0: java.lang.String;

        r20 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r7 := @parameter3: java.lang.String;

        i1 := @parameter4: int;

        z0 := @parameter5: boolean;

        if i0 <= 0 goto label2;

        $r19 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        if r20 == null goto label1;

        $r22 = newarray (java.lang.Object)[3];

        $r22[0] = r20;

        $r22[1] = $r19;

        $r22[2] = r23;

        r24 = staticinvoke <org.mozilla.javascript.tools.ToolErrorReporter: java.lang.String getMessage(java.lang.String,java.lang.Object[])>("msg.format3", $r22);

        goto label3;

     label1:
        $r21 = newarray (java.lang.Object)[2];

        $r21[0] = $r19;

        $r21[1] = r23;

        r24 = staticinvoke <org.mozilla.javascript.tools.ToolErrorReporter: java.lang.String getMessage(java.lang.String,java.lang.Object[])>("msg.format2", $r21);

        goto label3;

     label2:
        $r0 = newarray (java.lang.Object)[1];

        $r0[0] = r23;

        r24 = staticinvoke <org.mozilla.javascript.tools.ToolErrorReporter: java.lang.String getMessage(java.lang.String,java.lang.Object[])>("msg.format1", $r0);

     label3:
        if z0 == 0 goto label4;

        r24 = staticinvoke <org.mozilla.javascript.tools.ToolErrorReporter: java.lang.String getMessage(java.lang.String,java.lang.String)>("msg.warning", r24);

     label4:
        $r3 = r1.<org.mozilla.javascript.tools.ToolErrorReporter: java.io.PrintStream err>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("js: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r24);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r6);

        if null == r7 goto label5;

        $r9 = r1.<org.mozilla.javascript.tools.ToolErrorReporter: java.io.PrintStream err>;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("js: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r7);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r12);

        $r14 = r1.<org.mozilla.javascript.tools.ToolErrorReporter: java.io.PrintStream err>;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("js: ");

        $r16 = specialinvoke r1.<org.mozilla.javascript.tools.ToolErrorReporter: java.lang.String buildIndicator(int)>(i1);

        $r17 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>($r18);

     label5:
        return;
    }

    private java.lang.String buildIndicator(int)
    {
        java.lang.StringBuffer $r0;
        int i0, $i1, i2;
        java.lang.String $r1;
        org.mozilla.javascript.tools.ToolErrorReporter r2;

        r2 := @this: org.mozilla.javascript.tools.ToolErrorReporter;

        i0 := @parameter0: int;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        i2 = 0;

     label1:
        $i1 = i0 - 1;

        if i2 >= $i1 goto label2;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        i2 = i2 + 1;

        goto label1;

     label2:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("^");

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r1;
    }
}
