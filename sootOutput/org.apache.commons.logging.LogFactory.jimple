public abstract class org.apache.commons.logging.LogFactory extends java.lang.Object
{
    static java.lang.String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J;
    static org.apache.commons.logging.LogFactory logFactory;
    public static final java.lang.String PRIORITY_KEY;
    public static final java.lang.String TCCL_KEY;
    public static final java.lang.String FACTORY_PROPERTY;
    public static final java.lang.String FACTORY_DEFAULT;
    public static final java.lang.String FACTORY_PROPERTIES;
    protected static final java.lang.String SERVICE_ID;
    public static final java.lang.String DIAGNOSTICS_DEST_PROPERTY;
    public static final java.lang.String HASHTABLE_IMPLEMENTATION_PROPERTY;
    protected static java.util.Hashtable factories;
    protected static org.apache.commons.logging.LogFactory nullClassLoaderFactory;

    protected void <init>()
    {
        org.apache.commons.logging.LogFactory r0;

        r0 := @this: org.apache.commons.logging.LogFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract java.lang.Object getAttribute(java.lang.String);

    public abstract java.lang.String[] getAttributeNames();

    public abstract org.apache.commons.logging.Log getInstance(java.lang.Class) throws org.apache.commons.logging.LogConfigurationException;

    public abstract org.apache.commons.logging.Log getInstance(java.lang.String) throws org.apache.commons.logging.LogConfigurationException;

    public abstract void release();

    public abstract void removeAttribute(java.lang.String);

    public abstract void setAttribute(java.lang.String, java.lang.Object);

    public static org.apache.commons.logging.LogFactory getFactory() throws org.apache.commons.logging.LogConfigurationException
    {
        org.apache.commons.logging.LogFactory $r0;

        $r0 = <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory logFactory>;

        return $r0;
    }

    public static org.apache.commons.logging.Log getLog(java.lang.Class) throws org.apache.commons.logging.LogConfigurationException
    {
        java.lang.Class r1;
        org.apache.commons.logging.Log $r2;
        org.apache.commons.logging.LogFactory $r0;

        r1 := @parameter0: java.lang.Class;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>();

        $r2 = virtualinvoke $r0.<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getInstance(java.lang.Class)>(r1);

        return $r2;
    }

    public static org.apache.commons.logging.Log getLog(java.lang.String) throws org.apache.commons.logging.LogConfigurationException
    {
        org.apache.commons.logging.Log $r2;
        org.apache.commons.logging.LogFactory $r0;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()>();

        $r2 = virtualinvoke $r0.<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getInstance(java.lang.String)>(r1);

        return $r2;
    }

    public static void release(java.lang.ClassLoader)
    {
        java.lang.ClassLoader r0;

        r0 := @parameter0: java.lang.ClassLoader;

        return;
    }

    public static void releaseAll()
    {
        return;
    }

    public static java.lang.String objectId(java.lang.Object)
    {
        java.lang.StringBuffer $r1, $r4, $r5, $r6;
        int $i0;
        java.lang.Object r0;
        java.lang.Class $r2;
        java.lang.String $r3, $r7;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return "null";

     label1:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("@");

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;
    }

    protected static java.lang.Object createFactory(java.lang.String, java.lang.ClassLoader)
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.StringBuffer $r1, $r2, $r4;
        java.lang.String $r3, $r5, r6;
        java.lang.ClassLoader r7;

        r6 := @parameter0: java.lang.String;

        r7 := @parameter1: java.lang.ClassLoader;

        $r0 = new java.lang.UnsupportedOperationException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Operation [factoryClass] is not supported in jcl-over-slf4j. See also ");

        $r3 = <org.apache.commons.logging.LogFactory: java.lang.String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r5);

        throw $r0;
    }

    protected static java.lang.ClassLoader directGetContextClassLoader()
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.StringBuffer $r1, $r2, $r4;
        java.lang.String $r3, $r5;

        $r0 = new java.lang.UnsupportedOperationException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Operation [directGetContextClassLoader] is not supported in jcl-over-slf4j. See also ");

        $r3 = <org.apache.commons.logging.LogFactory: java.lang.String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r5);

        throw $r0;
    }

    protected static java.lang.ClassLoader getContextClassLoader() throws org.apache.commons.logging.LogConfigurationException
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.StringBuffer $r1, $r2, $r4;
        java.lang.String $r3, $r5;

        $r0 = new java.lang.UnsupportedOperationException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Operation [getContextClassLoader] is not supported in jcl-over-slf4j. See also ");

        $r3 = <org.apache.commons.logging.LogFactory: java.lang.String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r5);

        throw $r0;
    }

    protected static java.lang.ClassLoader getClassLoader(java.lang.Class)
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.StringBuffer $r1, $r2, $r4;
        java.lang.Class r6;
        java.lang.String $r3, $r5;

        r6 := @parameter0: java.lang.Class;

        $r0 = new java.lang.UnsupportedOperationException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Operation [getClassLoader] is not supported in jcl-over-slf4j. See also ");

        $r3 = <org.apache.commons.logging.LogFactory: java.lang.String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r5);

        throw $r0;
    }

    protected static boolean isDiagnosticsEnabled()
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.StringBuffer $r1, $r2, $r4;
        java.lang.String $r3, $r5;

        $r0 = new java.lang.UnsupportedOperationException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Operation [isDiagnosticsEnabled] is not supported in jcl-over-slf4j. See also ");

        $r3 = <org.apache.commons.logging.LogFactory: java.lang.String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r5);

        throw $r0;
    }

    protected static void logRawDiagnostic(java.lang.String)
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.StringBuffer $r1, $r2, $r4;
        java.lang.String $r3, $r5, r6;

        r6 := @parameter0: java.lang.String;

        $r0 = new java.lang.UnsupportedOperationException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Operation [logRawDiagnostic] is not supported in jcl-over-slf4j. See also ");

        $r3 = <org.apache.commons.logging.LogFactory: java.lang.String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r5);

        throw $r0;
    }

    protected static org.apache.commons.logging.LogFactory newFactory(java.lang.String, java.lang.ClassLoader, java.lang.ClassLoader)
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.StringBuffer $r1, $r2, $r4;
        java.lang.String $r3, $r5, r6;
        java.lang.ClassLoader r7, r8;

        r6 := @parameter0: java.lang.String;

        r7 := @parameter1: java.lang.ClassLoader;

        r8 := @parameter2: java.lang.ClassLoader;

        $r0 = new java.lang.UnsupportedOperationException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Operation [logRawDiagnostic] is not supported in jcl-over-slf4j. See also ");

        $r3 = <org.apache.commons.logging.LogFactory: java.lang.String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r5);

        throw $r0;
    }

    protected static org.apache.commons.logging.LogFactory newFactory(java.lang.String, java.lang.ClassLoader)
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.StringBuffer $r1, $r2, $r4;
        java.lang.String $r3, $r5, r6;
        java.lang.ClassLoader r7;

        r6 := @parameter0: java.lang.String;

        r7 := @parameter1: java.lang.ClassLoader;

        $r0 = new java.lang.UnsupportedOperationException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Operation [newFactory] is not supported in jcl-over-slf4j. See also ");

        $r3 = <org.apache.commons.logging.LogFactory: java.lang.String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r5);

        throw $r0;
    }

    static void <clinit>()
    {
        org.apache.commons.logging.impl.SLF4JLogFactory $r0;

        <org.apache.commons.logging.LogFactory: java.lang.String HASHTABLE_IMPLEMENTATION_PROPERTY> = "org.apache.commons.logging.LogFactory.HashtableImpl";

        <org.apache.commons.logging.LogFactory: java.lang.String DIAGNOSTICS_DEST_PROPERTY> = "org.apache.commons.logging.diagnostics.dest";

        <org.apache.commons.logging.LogFactory: java.lang.String SERVICE_ID> = "META-INF/services/org.apache.commons.logging.LogFactory";

        <org.apache.commons.logging.LogFactory: java.lang.String FACTORY_PROPERTIES> = "commons-logging.properties";

        <org.apache.commons.logging.LogFactory: java.lang.String FACTORY_DEFAULT> = "org.apache.commons.logging.impl.SLF4JLogFactory";

        <org.apache.commons.logging.LogFactory: java.lang.String FACTORY_PROPERTY> = "org.apache.commons.logging.LogFactory";

        <org.apache.commons.logging.LogFactory: java.lang.String TCCL_KEY> = "use_tccl";

        <org.apache.commons.logging.LogFactory: java.lang.String PRIORITY_KEY> = "priority";

        <org.apache.commons.logging.LogFactory: java.lang.String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J> = "http://www.slf4j.org/codes.html#unsupported_operation_in_jcl_over_slf4j";

        $r0 = new org.apache.commons.logging.impl.SLF4JLogFactory;

        specialinvoke $r0.<org.apache.commons.logging.impl.SLF4JLogFactory: void <init>()>();

        <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory logFactory> = $r0;

        <org.apache.commons.logging.LogFactory: java.util.Hashtable factories> = null;

        <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory nullClassLoaderFactory> = null;

        return;
    }
}
