public class org.mortbay.util.ajax.JSONPojoConvertor$Setter extends java.lang.Object
{
    protected java.lang.String _propertyName;
    protected java.lang.reflect.Method _method;
    protected org.mortbay.util.ajax.JSONPojoConvertor$NumberType _numberType;
    protected java.lang.Class _type;
    protected java.lang.Class _componentType;

    public void <init>(java.lang.String, java.lang.reflect.Method)
    {
        java.util.Map $r5, $r13;
        org.mortbay.util.ajax.JSONPojoConvertor$Setter r0;
        java.lang.String r1;
        java.lang.reflect.Method r2;
        boolean $z0;
        java.lang.Class[] $r3;
        java.lang.Class $r4, $r6, $r10, $r11, $r12, $r14;
        java.lang.Object $r7, $r15;
        org.mortbay.util.ajax.JSONPojoConvertor$NumberType $r8, $r9, $r16;

        r0 := @this: org.mortbay.util.ajax.JSONPojoConvertor$Setter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.reflect.Method;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.mortbay.util.ajax.JSONPojoConvertor$Setter: java.lang.String _propertyName> = r1;

        r0.<org.mortbay.util.ajax.JSONPojoConvertor$Setter: java.lang.reflect.Method _method> = r2;

        $r3 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r4 = $r3[0];

        r0.<org.mortbay.util.ajax.JSONPojoConvertor$Setter: java.lang.Class _type> = $r4;

        $r5 = staticinvoke <org.mortbay.util.ajax.JSONPojoConvertor: java.util.Map access$000()>();

        $r6 = r0.<org.mortbay.util.ajax.JSONPojoConvertor$Setter: java.lang.Class _type>;

        $r7 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        $r8 = (org.mortbay.util.ajax.JSONPojoConvertor$NumberType) $r7;

        r0.<org.mortbay.util.ajax.JSONPojoConvertor$Setter: org.mortbay.util.ajax.JSONPojoConvertor$NumberType _numberType> = $r8;

        $r9 = r0.<org.mortbay.util.ajax.JSONPojoConvertor$Setter: org.mortbay.util.ajax.JSONPojoConvertor$NumberType _numberType>;

        if $r9 != null goto label1;

        $r10 = r0.<org.mortbay.util.ajax.JSONPojoConvertor$Setter: java.lang.Class _type>;

        $z0 = virtualinvoke $r10.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label1;

        $r11 = r0.<org.mortbay.util.ajax.JSONPojoConvertor$Setter: java.lang.Class _type>;

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.Class getComponentType()>();

        r0.<org.mortbay.util.ajax.JSONPojoConvertor$Setter: java.lang.Class _componentType> = $r12;

        $r13 = staticinvoke <org.mortbay.util.ajax.JSONPojoConvertor: java.util.Map access$000()>();

        $r14 = r0.<org.mortbay.util.ajax.JSONPojoConvertor$Setter: java.lang.Class _componentType>;

        $r15 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>($r14);

        $r16 = (org.mortbay.util.ajax.JSONPojoConvertor$NumberType) $r15;

        r0.<org.mortbay.util.ajax.JSONPojoConvertor$Setter: org.mortbay.util.ajax.JSONPojoConvertor$NumberType _numberType> = $r16;

     label1:
        return;
    }

    public java.lang.String getPropertyName()
    {
        org.mortbay.util.ajax.JSONPojoConvertor$Setter r0;
        java.lang.String $r1;

        r0 := @this: org.mortbay.util.ajax.JSONPojoConvertor$Setter;

        $r1 = r0.<org.mortbay.util.ajax.JSONPojoConvertor$Setter: java.lang.String _propertyName>;

        return $r1;
    }

    public java.lang.reflect.Method getMethod()
    {
        org.mortbay.util.ajax.JSONPojoConvertor$Setter r0;
        java.lang.reflect.Method $r1;

        r0 := @this: org.mortbay.util.ajax.JSONPojoConvertor$Setter;

        $r1 = r0.<org.mortbay.util.ajax.JSONPojoConvertor$Setter: java.lang.reflect.Method _method>;

        return $r1;
    }

    public org.mortbay.util.ajax.JSONPojoConvertor$NumberType getNumberType()
    {
        org.mortbay.util.ajax.JSONPojoConvertor$Setter r0;
        org.mortbay.util.ajax.JSONPojoConvertor$NumberType $r1;

        r0 := @this: org.mortbay.util.ajax.JSONPojoConvertor$Setter;

        $r1 = r0.<org.mortbay.util.ajax.JSONPojoConvertor$Setter: org.mortbay.util.ajax.JSONPojoConvertor$NumberType _numberType>;

        return $r1;
    }

    public java.lang.Class getType()
    {
        org.mortbay.util.ajax.JSONPojoConvertor$Setter r0;
        java.lang.Class $r1;

        r0 := @this: org.mortbay.util.ajax.JSONPojoConvertor$Setter;

        $r1 = r0.<org.mortbay.util.ajax.JSONPojoConvertor$Setter: java.lang.Class _type>;

        return $r1;
    }

    public java.lang.Class getComponentType()
    {
        org.mortbay.util.ajax.JSONPojoConvertor$Setter r0;
        java.lang.Class $r1;

        r0 := @this: org.mortbay.util.ajax.JSONPojoConvertor$Setter;

        $r1 = r0.<org.mortbay.util.ajax.JSONPojoConvertor$Setter: java.lang.Class _componentType>;

        return $r1;
    }

    public boolean isPropertyNumber()
    {
        org.mortbay.util.ajax.JSONPojoConvertor$Setter r0;
        org.mortbay.util.ajax.JSONPojoConvertor$NumberType $r1;
        boolean $z0;

        r0 := @this: org.mortbay.util.ajax.JSONPojoConvertor$Setter;

        $r1 = r0.<org.mortbay.util.ajax.JSONPojoConvertor$Setter: org.mortbay.util.ajax.JSONPojoConvertor$NumberType _numberType>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void invoke(java.lang.Object, java.lang.Object) throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException
    {
        java.lang.Object[] $r3;
        org.mortbay.util.ajax.JSONPojoConvertor$Setter r1;
        java.lang.Object r0, r2;
        java.lang.reflect.Method $r4;

        r1 := @this: org.mortbay.util.ajax.JSONPojoConvertor$Setter;

        r2 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        $r4 = r1.<org.mortbay.util.ajax.JSONPojoConvertor$Setter: java.lang.reflect.Method _method>;

        $r3 = <org.mortbay.util.ajax.JSONPojoConvertor: java.lang.Object[] NULL_ARG>;

        virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r2, $r3);

        goto label2;

     label1:
        virtualinvoke r1.<org.mortbay.util.ajax.JSONPojoConvertor$Setter: void invokeObject(java.lang.Object,java.lang.Object)>(r2, r0);

     label2:
        return;
    }

    protected void invokeObject(java.lang.Object, java.lang.Object) throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException
    {
        org.mortbay.util.ajax.JSONPojoConvertor$Setter r0;
        java.lang.reflect.Method $r6, $r13, $r21, $r25, $r29, $r32;
        boolean $z0, $z1;
        java.lang.Exception $r27, $r30;
        java.lang.Object[] $r4, $r9, $r12, $r20, $r22, $r28, $r31, r33;
        int $i0, $i1, $i2, i3;
        java.lang.Number $r15, $r23;
        java.lang.Class $r2, $r7, $r10, $r18;
        java.lang.Object r3, r5, $r11, $r14, $r17, $r19, $r26;
        org.mortbay.util.ajax.JSONPojoConvertor$NumberType $r1, $r8, $r16, $r24;

        r0 := @this: org.mortbay.util.ajax.JSONPojoConvertor$Setter;

        r3 := @parameter0: java.lang.Object;

        r5 := @parameter1: java.lang.Object;

        $r1 = r0.<org.mortbay.util.ajax.JSONPojoConvertor$Setter: org.mortbay.util.ajax.JSONPojoConvertor$NumberType _numberType>;

        if $r1 == null goto label01;

        $z1 = r5 instanceof java.lang.Number;

        if $z1 == 0 goto label01;

        $r25 = r0.<org.mortbay.util.ajax.JSONPojoConvertor$Setter: java.lang.reflect.Method _method>;

        $r22 = newarray (java.lang.Object)[1];

        $r24 = r0.<org.mortbay.util.ajax.JSONPojoConvertor$Setter: org.mortbay.util.ajax.JSONPojoConvertor$NumberType _numberType>;

        $r23 = (java.lang.Number) r5;

        $r26 = interfaceinvoke $r24.<org.mortbay.util.ajax.JSONPojoConvertor$NumberType: java.lang.Object getActualValue(java.lang.Number)>($r23);

        $r22[0] = $r26;

        virtualinvoke $r25.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r3, $r22);

        goto label13;

     label01:
        $r2 = r0.<org.mortbay.util.ajax.JSONPojoConvertor$Setter: java.lang.Class _componentType>;

        if $r2 == null goto label12;

        $r7 = virtualinvoke r5.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r7.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label12;

        $r8 = r0.<org.mortbay.util.ajax.JSONPojoConvertor$Setter: org.mortbay.util.ajax.JSONPojoConvertor$NumberType _numberType>;

        if $r8 != null goto label06;

        $i2 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r5);

        $r18 = r0.<org.mortbay.util.ajax.JSONPojoConvertor$Setter: java.lang.Class _componentType>;

        $r19 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r18, $i2);

     label02:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, $r19, 0, $i2);

     label03:
        goto label05;

     label04:
        $r30 := @caughtexception;

        staticinvoke <org.mortbay.log.Log: void ignore(java.lang.Throwable)>($r30);

        $r32 = r0.<org.mortbay.util.ajax.JSONPojoConvertor$Setter: java.lang.reflect.Method _method>;

        $r31 = newarray (java.lang.Object)[1];

        $r31[0] = r5;

        virtualinvoke $r32.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r3, $r31);

        return;

     label05:
        $r21 = r0.<org.mortbay.util.ajax.JSONPojoConvertor$Setter: java.lang.reflect.Method _method>;

        $r20 = newarray (java.lang.Object)[1];

        $r20[0] = $r19;

        virtualinvoke $r21.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r3, $r20);

        goto label13;

     label06:
        $r9 = (java.lang.Object[]) r5;

        r33 = (java.lang.Object[]) $r9;

        $r10 = r0.<org.mortbay.util.ajax.JSONPojoConvertor$Setter: java.lang.Class _componentType>;

        $i0 = lengthof r33;

        $r11 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r10, $i0);

     label07:
        i3 = 0;

     label08:
        $i1 = lengthof r33;

        if i3 >= $i1 goto label09;

        $r16 = r0.<org.mortbay.util.ajax.JSONPojoConvertor$Setter: org.mortbay.util.ajax.JSONPojoConvertor$NumberType _numberType>;

        $r14 = r33[i3];

        $r15 = (java.lang.Number) $r14;

        $r17 = interfaceinvoke $r16.<org.mortbay.util.ajax.JSONPojoConvertor$NumberType: java.lang.Object getActualValue(java.lang.Number)>($r15);

        staticinvoke <java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>($r11, i3, $r17);

        i3 = i3 + 1;

        goto label08;

     label09:
        goto label11;

     label10:
        $r27 := @caughtexception;

        staticinvoke <org.mortbay.log.Log: void ignore(java.lang.Throwable)>($r27);

        $r29 = r0.<org.mortbay.util.ajax.JSONPojoConvertor$Setter: java.lang.reflect.Method _method>;

        $r28 = newarray (java.lang.Object)[1];

        $r28[0] = r5;

        virtualinvoke $r29.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r3, $r28);

        return;

     label11:
        $r13 = r0.<org.mortbay.util.ajax.JSONPojoConvertor$Setter: java.lang.reflect.Method _method>;

        $r12 = newarray (java.lang.Object)[1];

        $r12[0] = $r11;

        virtualinvoke $r13.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r3, $r12);

        goto label13;

     label12:
        $r6 = r0.<org.mortbay.util.ajax.JSONPojoConvertor$Setter: java.lang.reflect.Method _method>;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r5;

        virtualinvoke $r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r3, $r4);

     label13:
        return;

        catch java.lang.Exception from label02 to label03 with label04;
        catch java.lang.Exception from label07 to label09 with label10;
    }
}
