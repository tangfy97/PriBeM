class org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$4 extends org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker
{
    final org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer this$0;

    void <init>(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer, org.waveprotocol.wave.model.document.operation.DocOpCursor)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$4 r0;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer r1;
        org.waveprotocol.wave.model.document.operation.DocOpCursor r2;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$4;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer;

        r2 := @parameter1: org.waveprotocol.wave.model.document.operation.DocOpCursor;

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$4: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer this$0> = r1;

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker: void <init>(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer,org.waveprotocol.wave.model.document.operation.DocOpCursor)>(r1, r2);

        return;
    }

    public void process(org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap)
    {
        org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap r8;
        org.waveprotocol.wave.model.document.operation.algorithm.ValueUpdate r45, r54;
        java.util.Map $r43, $r50;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$4 r9;
        java.lang.Object[] $r12, $r15, $r18, $r21, $r27, $r30, $r33, $r36;
        java.lang.String[] $r11, $r13, $r14, $r16, $r17, $r19, $r20, $r22, $r26, $r28, $r29, $r31, $r32, $r34, $r35, $r37;
        java.util.ArrayList $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        int $i0, $i1, i2, i3;
        java.lang.String $r38, $r39, $r40, $r46, $r47, $r52, $r53;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl $r10, $r25;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer $r23, $r41, $r48;
        java.lang.Object $r44, $r51;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker $r24, $r42, $r49;

        r9 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$4;

        r8 := @parameter0: org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        i2 = 0;

     label1:
        $i0 = interfaceinvoke r8.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: int endSize()>();

        if i2 >= $i0 goto label4;

        $r47 = interfaceinvoke r8.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: java.lang.String getEndKey(int)>(i2);

        $r48 = r9.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$4: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer this$0>;

        $r49 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker access$1200(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer)>($r48);

        $r50 = $r49.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker: java.util.Map tracked>;

        $r51 = interfaceinvoke $r50.<java.util.Map: java.lang.Object get(java.lang.Object)>($r47);

        r54 = (org.waveprotocol.wave.model.document.operation.algorithm.ValueUpdate) $r51;

        if r54 == null goto label2;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r47);

        $r52 = r54.<org.waveprotocol.wave.model.document.operation.algorithm.ValueUpdate: java.lang.String oldValue>;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r52);

        $r53 = r54.<org.waveprotocol.wave.model.document.operation.algorithm.ValueUpdate: java.lang.String newValue>;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r53);

        goto label3;

     label2:
        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r47);

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        i3 = 0;

     label5:
        $i1 = interfaceinvoke r8.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: int changeSize()>();

        if i3 >= $i1 goto label8;

        $r38 = interfaceinvoke r8.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: java.lang.String getChangeKey(int)>(i3);

        $r39 = interfaceinvoke r8.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: java.lang.String getOldValue(int)>(i3);

        $r40 = interfaceinvoke r8.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: java.lang.String getNewValue(int)>(i3);

        $r41 = r9.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$4: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer this$0>;

        $r42 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker access$1200(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer)>($r41);

        $r43 = $r42.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker: java.util.Map tracked>;

        $r44 = interfaceinvoke $r43.<java.util.Map: java.lang.Object get(java.lang.Object)>($r38);

        r45 = (org.waveprotocol.wave.model.document.operation.algorithm.ValueUpdate) $r44;

        if r45 == null goto label6;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r38);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r40);

        $r46 = r45.<org.waveprotocol.wave.model.document.operation.algorithm.ValueUpdate: java.lang.String newValue>;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r46);

        goto label7;

     label6:
        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r38);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r39);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r40);

     label7:
        i3 = i3 + 1;

        goto label5;

     label8:
        $r10 = new org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl;

        $r11 = newarray (java.lang.String)[0];

        $r12 = interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r11);

        $r14 = (java.lang.String[]) $r12;

        $r13 = newarray (java.lang.String)[0];

        $r15 = interfaceinvoke $r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r13);

        $r17 = (java.lang.String[]) $r15;

        $r16 = newarray (java.lang.String)[0];

        $r18 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r16);

        $r20 = (java.lang.String[]) $r18;

        $r19 = newarray (java.lang.String)[0];

        $r21 = interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r19);

        $r22 = (java.lang.String[]) $r21;

        specialinvoke $r10.<org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl: void <init>(java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[])>($r14, $r17, $r20, $r22);

        virtualinvoke r9.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$4: void commit(org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap)>($r10);

        $r23 = r9.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$4: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer this$0>;

        $r24 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker access$1200(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer)>($r23);

        $r25 = new org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl;

        $r26 = newarray (java.lang.String)[0];

        $r27 = interfaceinvoke $r4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r26);

        $r29 = (java.lang.String[]) $r27;

        $r28 = newarray (java.lang.String)[0];

        $r30 = interfaceinvoke $r5.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r28);

        $r32 = (java.lang.String[]) $r30;

        $r31 = newarray (java.lang.String)[0];

        $r33 = interfaceinvoke $r6.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r31);

        $r35 = (java.lang.String[]) $r33;

        $r34 = newarray (java.lang.String)[0];

        $r36 = interfaceinvoke $r7.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r34);

        $r37 = (java.lang.String[]) $r36;

        specialinvoke $r25.<org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl: void <init>(java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[])>($r29, $r32, $r35, $r37);

        virtualinvoke $r24.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker: void commit(org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap)>($r25);

        return;
    }

    org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker opposingTracker()
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$4 r0;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer $r1;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker $r2;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$4;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$4: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker access$1200(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer)>($r1);

        return $r2;
    }
}
