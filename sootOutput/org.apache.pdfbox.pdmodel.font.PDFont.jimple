public abstract class org.apache.pdfbox.pdmodel.font.PDFont extends java.lang.Object implements org.apache.pdfbox.pdmodel.common.COSObjectable
{
    private static final org.apache.commons.logging.Log LOG;
    protected org.apache.pdfbox.cos.COSDictionary font;
    private org.apache.pdfbox.encoding.Encoding fontEncoding;
    private org.apache.pdfbox.pdmodel.font.PDFontDescriptor fontDescriptor;
    protected org.apache.pdfbox.pdmodel.common.PDMatrix fontMatrix;
    protected org.apache.fontbox.cmap.CMap cmap;
    protected org.apache.fontbox.cmap.CMap toUnicodeCmap;
    private boolean hasToUnicode;
    private boolean widthsAreMissing;
    protected static java.util.Map cmapObjects;
    private java.util.List widths;
    private static final java.util.Map afmObjects;
    protected static final java.lang.String resourceRootCMAP;
    private static final java.lang.String resourceRootAFM;
    private org.apache.fontbox.afm.FontMetric afm;
    private org.apache.pdfbox.cos.COSBase encoding;
    private static final java.lang.String[] SINGLE_CHAR_STRING;
    private static final java.lang.String[][] DOUBLE_CHAR_STRING;
    private java.lang.String subtype;
    private boolean type1Font;
    private boolean type3Font;
    private boolean trueTypeFont;
    private boolean type0Font;

    private static java.util.Map getAdobeFontMetrics()
    {
        java.util.HashMap $r0;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        staticinvoke <org.apache.pdfbox.pdmodel.font.PDFont: void addAdobeFontMetric(java.util.Map,java.lang.String)>($r0, "Courier-Bold");

        staticinvoke <org.apache.pdfbox.pdmodel.font.PDFont: void addAdobeFontMetric(java.util.Map,java.lang.String)>($r0, "Courier-BoldOblique");

        staticinvoke <org.apache.pdfbox.pdmodel.font.PDFont: void addAdobeFontMetric(java.util.Map,java.lang.String)>($r0, "Courier");

        staticinvoke <org.apache.pdfbox.pdmodel.font.PDFont: void addAdobeFontMetric(java.util.Map,java.lang.String)>($r0, "Courier-Oblique");

        staticinvoke <org.apache.pdfbox.pdmodel.font.PDFont: void addAdobeFontMetric(java.util.Map,java.lang.String)>($r0, "Helvetica");

        staticinvoke <org.apache.pdfbox.pdmodel.font.PDFont: void addAdobeFontMetric(java.util.Map,java.lang.String)>($r0, "Helvetica-Bold");

        staticinvoke <org.apache.pdfbox.pdmodel.font.PDFont: void addAdobeFontMetric(java.util.Map,java.lang.String)>($r0, "Helvetica-BoldOblique");

        staticinvoke <org.apache.pdfbox.pdmodel.font.PDFont: void addAdobeFontMetric(java.util.Map,java.lang.String)>($r0, "Helvetica-Oblique");

        staticinvoke <org.apache.pdfbox.pdmodel.font.PDFont: void addAdobeFontMetric(java.util.Map,java.lang.String)>($r0, "Symbol");

        staticinvoke <org.apache.pdfbox.pdmodel.font.PDFont: void addAdobeFontMetric(java.util.Map,java.lang.String)>($r0, "Times-Bold");

        staticinvoke <org.apache.pdfbox.pdmodel.font.PDFont: void addAdobeFontMetric(java.util.Map,java.lang.String)>($r0, "Times-BoldItalic");

        staticinvoke <org.apache.pdfbox.pdmodel.font.PDFont: void addAdobeFontMetric(java.util.Map,java.lang.String)>($r0, "Times-Italic");

        staticinvoke <org.apache.pdfbox.pdmodel.font.PDFont: void addAdobeFontMetric(java.util.Map,java.lang.String)>($r0, "Times-Roman");

        staticinvoke <org.apache.pdfbox.pdmodel.font.PDFont: void addAdobeFontMetric(java.util.Map,java.lang.String)>($r0, "ZapfDingbats");

        staticinvoke <org.apache.pdfbox.pdmodel.font.PDFont: void addAdobeFontMetric(java.util.Map,java.lang.String,java.lang.String)>($r0, "Arial", "Helvetica");

        staticinvoke <org.apache.pdfbox.pdmodel.font.PDFont: void addAdobeFontMetric(java.util.Map,java.lang.String,java.lang.String)>($r0, "Arial,Bold", "Helvetica-Bold");

        staticinvoke <org.apache.pdfbox.pdmodel.font.PDFont: void addAdobeFontMetric(java.util.Map,java.lang.String,java.lang.String)>($r0, "Arial,Italic", "Helvetica-Oblique");

        staticinvoke <org.apache.pdfbox.pdmodel.font.PDFont: void addAdobeFontMetric(java.util.Map,java.lang.String,java.lang.String)>($r0, "Arial,BoldItalic", "Helvetica-BoldOblique");

        return $r0;
    }

    private static void addAdobeFontMetric(java.util.Map, java.lang.String)
    {
        java.lang.String r1;
        java.util.Map r0;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.String;

        staticinvoke <org.apache.pdfbox.pdmodel.font.PDFont: void addAdobeFontMetric(java.util.Map,java.lang.String,java.lang.String)>(r0, r1, r1);

        return;
    }

    private static void addAdobeFontMetric(java.util.Map, java.lang.String, java.lang.String)
    {
        java.lang.Throwable $r12;
        java.lang.Exception $r11;
        java.util.Map r8;
        org.apache.fontbox.afm.AFMParser $r7;
        java.lang.StringBuilder $r0, $r1, $r3, $r4;
        org.apache.fontbox.afm.FontMetric $r10;
        java.lang.String r2, $r5, r9;
        java.io.InputStream $r6;

        r8 := @parameter0: java.util.Map;

        r9 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

     label1:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("org/apache/pdfbox/resources/afm/");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".afm");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = staticinvoke <org.apache.pdfbox.util.ResourceLoader: java.io.InputStream loadResource(java.lang.String)>($r5);

        if $r6 == null goto label6;

     label2:
        $r7 = new org.apache.fontbox.afm.AFMParser;

        specialinvoke $r7.<org.apache.fontbox.afm.AFMParser: void <init>(java.io.InputStream)>($r6);

        virtualinvoke $r7.<org.apache.fontbox.afm.AFMParser: void parse()>();

        $r10 = virtualinvoke $r7.<org.apache.fontbox.afm.AFMParser: org.apache.fontbox.afm.FontMetric getResult()>();

        interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, $r10);

     label3:
        virtualinvoke $r6.<java.io.InputStream: void close()>();

        goto label6;

     label4:
        $r12 := @caughtexception;

     label5:
        virtualinvoke $r6.<java.io.InputStream: void close()>();

        throw $r12;

     label6:
        goto label8;

     label7:
        $r11 := @caughtexception;

     label8:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
        catch java.lang.Exception from label1 to label6 with label7;
    }

    public static void clearResources()
    {
        java.util.Map $r0;

        $r0 = <org.apache.pdfbox.pdmodel.font.PDFont: java.util.Map cmapObjects>;

        interfaceinvoke $r0.<java.util.Map: void clear()>();

        return;
    }

    public void <init>()
    {
        org.apache.pdfbox.cos.COSDictionary $r1, $r4;
        org.apache.pdfbox.cos.COSName $r2, $r3;
        org.apache.pdfbox.pdmodel.font.PDFont r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDFont;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.encoding.Encoding fontEncoding> = null;

        r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.pdmodel.font.PDFontDescriptor fontDescriptor> = null;

        r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.pdmodel.common.PDMatrix fontMatrix> = null;

        r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.fontbox.cmap.CMap cmap> = null;

        r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.fontbox.cmap.CMap toUnicodeCmap> = null;

        r0.<org.apache.pdfbox.pdmodel.font.PDFont: boolean hasToUnicode> = 0;

        r0.<org.apache.pdfbox.pdmodel.font.PDFont: boolean widthsAreMissing> = 0;

        r0.<org.apache.pdfbox.pdmodel.font.PDFont: java.util.List widths> = null;

        r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.fontbox.afm.FontMetric afm> = null;

        r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.cos.COSBase encoding> = null;

        r0.<org.apache.pdfbox.pdmodel.font.PDFont: java.lang.String subtype> = null;

        $r1 = new org.apache.pdfbox.cos.COSDictionary;

        specialinvoke $r1.<org.apache.pdfbox.cos.COSDictionary: void <init>()>();

        r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.cos.COSDictionary font> = $r1;

        $r4 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.cos.COSDictionary font>;

        $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName TYPE>;

        $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName FONT>;

        virtualinvoke $r4.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r3, $r2);

        return;
    }

    public void <init>(org.apache.pdfbox.cos.COSDictionary)
    {
        org.apache.pdfbox.cos.COSDictionary r1;
        org.apache.pdfbox.pdmodel.font.PDFont r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDFont;

        r1 := @parameter0: org.apache.pdfbox.cos.COSDictionary;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.encoding.Encoding fontEncoding> = null;

        r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.pdmodel.font.PDFontDescriptor fontDescriptor> = null;

        r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.pdmodel.common.PDMatrix fontMatrix> = null;

        r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.fontbox.cmap.CMap cmap> = null;

        r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.fontbox.cmap.CMap toUnicodeCmap> = null;

        r0.<org.apache.pdfbox.pdmodel.font.PDFont: boolean hasToUnicode> = 0;

        r0.<org.apache.pdfbox.pdmodel.font.PDFont: boolean widthsAreMissing> = 0;

        r0.<org.apache.pdfbox.pdmodel.font.PDFont: java.util.List widths> = null;

        r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.fontbox.afm.FontMetric afm> = null;

        r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.cos.COSBase encoding> = null;

        r0.<org.apache.pdfbox.pdmodel.font.PDFont: java.lang.String subtype> = null;

        r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.cos.COSDictionary font> = r1;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDFont: void determineEncoding()>();

        return;
    }

    public org.apache.pdfbox.pdmodel.font.PDFontDescriptor getFontDescriptor()
    {
        org.apache.pdfbox.cos.COSName $r2;
        org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary $r9;
        org.apache.pdfbox.pdmodel.font.PDFontDescriptorAFM $r7;
        org.apache.pdfbox.pdmodel.font.PDFont r0;
        org.apache.pdfbox.pdmodel.font.PDFontDescriptor $r1, $r10;
        org.apache.pdfbox.cos.COSDictionary $r3, r5;
        org.apache.pdfbox.cos.COSBase $r4;
        org.apache.fontbox.afm.FontMetric $r6, $r8;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDFont;

        $r1 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.pdmodel.font.PDFontDescriptor fontDescriptor>;

        if $r1 != null goto label2;

        $r3 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.cos.COSDictionary font>;

        $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName FONT_DESC>;

        $r4 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r2);

        r5 = (org.apache.pdfbox.cos.COSDictionary) $r4;

        if r5 == null goto label1;

        $r9 = new org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary;

        specialinvoke $r9.<org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary: void <init>(org.apache.pdfbox.cos.COSDictionary)>(r5);

        r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.pdmodel.font.PDFontDescriptor fontDescriptor> = $r9;

        goto label2;

     label1:
        virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.fontbox.afm.FontMetric getAFM()>();

        $r6 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.fontbox.afm.FontMetric afm>;

        if $r6 == null goto label2;

        $r7 = new org.apache.pdfbox.pdmodel.font.PDFontDescriptorAFM;

        $r8 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.fontbox.afm.FontMetric afm>;

        specialinvoke $r7.<org.apache.pdfbox.pdmodel.font.PDFontDescriptorAFM: void <init>(org.apache.fontbox.afm.FontMetric)>($r8);

        r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.pdmodel.font.PDFontDescriptor fontDescriptor> = $r7;

     label2:
        $r10 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.pdmodel.font.PDFontDescriptor fontDescriptor>;

        return $r10;
    }

    public void setFontDescriptor(org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary)
    {
        org.apache.pdfbox.cos.COSName $r2;
        org.apache.pdfbox.cos.COSDictionary $r3, r4;
        org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary r0;
        org.apache.pdfbox.pdmodel.font.PDFont r1;

        r1 := @this: org.apache.pdfbox.pdmodel.font.PDFont;

        r0 := @parameter0: org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary;

        r4 = null;

        if r0 == null goto label1;

        r4 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary: org.apache.pdfbox.cos.COSDictionary getCOSDictionary()>();

     label1:
        $r3 = r1.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.cos.COSDictionary font>;

        $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName FONT_DESC>;

        virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r2, r4);

        r1.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.pdmodel.font.PDFontDescriptor fontDescriptor> = r0;

        return;
    }

    protected abstract void determineEncoding();

    public org.apache.pdfbox.cos.COSBase getCOSObject()
    {
        org.apache.pdfbox.cos.COSDictionary $r1;
        org.apache.pdfbox.pdmodel.font.PDFont r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDFont;

        $r1 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.cos.COSDictionary font>;

        return $r1;
    }

    public abstract float getFontWidth(byte[], int, int) throws java.io.IOException;

    public abstract float getFontHeight(byte[], int, int) throws java.io.IOException;

    public float getStringWidth(java.lang.String) throws java.io.IOException
    {
        byte[] $r1;
        int $i0, i1;
        float $f0, f1;
        java.lang.String r0;
        org.apache.pdfbox.pdmodel.font.PDFont r2;

        r2 := @this: org.apache.pdfbox.pdmodel.font.PDFont;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        f1 = 0.0F;

        i1 = 0;

     label1:
        $i0 = lengthof $r1;

        if i1 >= $i0 goto label2;

        $f0 = virtualinvoke r2.<org.apache.pdfbox.pdmodel.font.PDFont: float getFontWidth(byte[],int,int)>($r1, i1, 1);

        f1 = f1 + $f0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return f1;
    }

    public abstract float getAverageFontWidth() throws java.io.IOException;

    public void drawString(java.lang.String, java.awt.Graphics, float, java.awt.geom.AffineTransform, float, float) throws java.io.IOException
    {
        java.awt.Graphics r2;
        float f0, f1, f2;
        java.lang.String r1;
        java.awt.geom.AffineTransform r3;
        org.apache.pdfbox.pdmodel.font.PDFont r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDFont;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.awt.Graphics;

        f0 := @parameter2: float;

        r3 := @parameter3: java.awt.geom.AffineTransform;

        f1 := @parameter4: float;

        f2 := @parameter5: float;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDFont: void drawString(java.lang.String,int[],java.awt.Graphics,float,java.awt.geom.AffineTransform,float,float)>(r1, null, r2, f0, r3, f1, f2);

        return;
    }

    public abstract void drawString(java.lang.String, int[], java.awt.Graphics, float, java.awt.geom.AffineTransform, float, float) throws java.io.IOException;

    public int getCodeFromArray(byte[], int, int)
    {
        byte[] r0;
        org.apache.pdfbox.pdmodel.font.PDFont r1;
        byte $b3;
        int i0, i1, $i2, $i4, $i5, i6, i7, i8, $i9;

        r1 := @this: org.apache.pdfbox.pdmodel.font.PDFont;

        r0 := @parameter0: byte[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        i6 = 0;

        i7 = 0;

     label1:
        if i7 >= i0 goto label2;

        i8 = i6 << 8;

        $i2 = i1 + i7;

        $b3 = r0[$i2];

        $i9 = (int) $b3;

        $i4 = $i9 + 256;

        $i5 = $i4 % 256;

        i6 = i8 | $i5;

        i7 = i7 + 1;

        goto label1;

     label2:
        return i6;
    }

    protected float getFontWidthFromAFMFile(int) throws java.io.IOException
    {
        org.apache.pdfbox.encoding.Encoding $r2;
        int i0;
        float f0;
        org.apache.fontbox.afm.FontMetric $r1;
        java.lang.String $r3;
        org.apache.pdfbox.pdmodel.font.PDFont r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDFont;

        i0 := @parameter0: int;

        f0 = 0.0F;

        $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.fontbox.afm.FontMetric getAFM()>();

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.encoding.Encoding fontEncoding>;

        $r3 = virtualinvoke $r2.<org.apache.pdfbox.encoding.Encoding: java.lang.String getName(int)>(i0);

        f0 = virtualinvoke $r1.<org.apache.fontbox.afm.FontMetric: float getCharacterWidth(java.lang.String)>($r3);

     label1:
        return f0;
    }

    protected float getAverageFontWidthFromAFMFile() throws java.io.IOException
    {
        float f0;
        org.apache.fontbox.afm.FontMetric $r1;
        org.apache.pdfbox.pdmodel.font.PDFont r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDFont;

        f0 = 0.0F;

        $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.fontbox.afm.FontMetric getAFM()>();

        if $r1 == null goto label1;

        f0 = virtualinvoke $r1.<org.apache.fontbox.afm.FontMetric: float getAverageCharacterWidth()>();

     label1:
        return f0;
    }

    protected org.apache.fontbox.afm.FontMetric getAFM()
    {
        org.apache.pdfbox.cos.COSString r8;
        org.apache.pdfbox.pdmodel.font.PDFont r0;
        java.util.Map $r5;
        int $i0, $i1, $i2, $i4;
        org.apache.fontbox.afm.FontMetric $r1, $r7, $r12;
        java.lang.String $r10, r11;
        boolean $z0, $z1, $z2;
        org.apache.pdfbox.cos.COSName $r2, $r9;
        org.apache.pdfbox.cos.COSDictionary $r3;
        org.apache.pdfbox.cos.COSBase $r4;
        java.lang.Object $r6;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDFont;

        $z0 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDFont: boolean isType1Font()>();

        if $z0 == 0 goto label3;

        $r1 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.fontbox.afm.FontMetric afm>;

        if $r1 != null goto label3;

        $r3 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.cos.COSDictionary font>;

        $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName BASE_FONT>;

        $r4 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r2);

        r11 = null;

        $z1 = $r4 instanceof org.apache.pdfbox.cos.COSName;

        if $z1 == 0 goto label1;

        $r9 = (org.apache.pdfbox.cos.COSName) $r4;

        $r10 = virtualinvoke $r9.<org.apache.pdfbox.cos.COSName: java.lang.String getName()>();

        r11 = $r10;

        $i0 = virtualinvoke $r10.<java.lang.String: int indexOf(java.lang.String)>("+");

        $i4 = (int) -1;

        if $i0 <= $i4 goto label2;

        $i1 = virtualinvoke $r10.<java.lang.String: int indexOf(java.lang.String)>("+");

        $i2 = $i1 + 1;

        r11 = virtualinvoke $r10.<java.lang.String: java.lang.String substring(int)>($i2);

        goto label2;

     label1:
        $z2 = $r4 instanceof org.apache.pdfbox.cos.COSString;

        if $z2 == 0 goto label2;

        r8 = (org.apache.pdfbox.cos.COSString) $r4;

        r11 = virtualinvoke r8.<org.apache.pdfbox.cos.COSString: java.lang.String getString()>();

     label2:
        if r11 == null goto label3;

        $r5 = <org.apache.pdfbox.pdmodel.font.PDFont: java.util.Map afmObjects>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r11);

        $r7 = (org.apache.fontbox.afm.FontMetric) $r6;

        r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.fontbox.afm.FontMetric afm> = $r7;

     label3:
        $r12 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.fontbox.afm.FontMetric afm>;

        return $r12;
    }

    protected org.apache.pdfbox.cos.COSBase getEncoding()
    {
        org.apache.pdfbox.cos.COSName $r3;
        org.apache.pdfbox.cos.COSDictionary $r4;
        org.apache.pdfbox.cos.COSBase $r1, $r2, $r5;
        org.apache.pdfbox.pdmodel.font.PDFont r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDFont;

        $r1 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.cos.COSBase encoding>;

        if $r1 != null goto label1;

        $r4 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.cos.COSDictionary font>;

        $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName ENCODING>;

        $r5 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r3);

        r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.cos.COSBase encoding> = $r5;

     label1:
        $r2 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.cos.COSBase encoding>;

        return $r2;
    }

    protected void setEncoding(org.apache.pdfbox.cos.COSBase)
    {
        org.apache.pdfbox.cos.COSName $r2;
        org.apache.pdfbox.cos.COSDictionary $r3;
        org.apache.pdfbox.cos.COSBase r1;
        org.apache.pdfbox.pdmodel.font.PDFont r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDFont;

        r1 := @parameter0: org.apache.pdfbox.cos.COSBase;

        $r3 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.cos.COSDictionary font>;

        $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName ENCODING>;

        virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r2, r1);

        r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.cos.COSBase encoding> = r1;

        return;
    }

    protected java.lang.String cmapEncoding(int, int, boolean, org.apache.fontbox.cmap.CMap) throws java.io.IOException
    {
        int i0, i1;
        java.lang.String $r0, r3;
        boolean z0;
        org.apache.pdfbox.pdmodel.font.PDFont r1;
        org.apache.fontbox.cmap.CMap r2;

        r1 := @this: org.apache.pdfbox.pdmodel.font.PDFont;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        r2 := @parameter3: org.apache.fontbox.cmap.CMap;

        r3 = null;

        if r2 != null goto label1;

        r2 = r1.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.fontbox.cmap.CMap cmap>;

     label1:
        if r2 == null goto label2;

        $r0 = virtualinvoke r2.<org.apache.fontbox.cmap.CMap: java.lang.String lookup(int,int)>(i0, i1);

        r3 = $r0;

        if $r0 != null goto label2;

        if z0 == 0 goto label2;

        r3 = virtualinvoke r2.<org.apache.fontbox.cmap.CMap: java.lang.String lookupCID(int)>(i0);

     label2:
        return r3;
    }

    public java.lang.String encode(byte[], int, int) throws java.io.IOException
    {
        byte[] r1;
        org.apache.pdfbox.encoding.Encoding $r3, $r5;
        org.apache.pdfbox.pdmodel.font.PDFont r0;
        org.apache.fontbox.cmap.CMap $r2, $r4, $r6, $r7, $r8;
        int i0, i1, $i2;
        java.lang.String r9;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDFont;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r9 = null;

        $i2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDFont: int getCodeFromArray(byte[],int,int)>(r1, i0, i1);

        $r2 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.fontbox.cmap.CMap toUnicodeCmap>;

        if $r2 == null goto label1;

        $r8 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.fontbox.cmap.CMap toUnicodeCmap>;

        r9 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDFont: java.lang.String cmapEncoding(int,int,boolean,org.apache.fontbox.cmap.CMap)>($i2, i1, 0, $r8);

     label1:
        if r9 != null goto label2;

        $r6 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.fontbox.cmap.CMap cmap>;

        if $r6 == null goto label2;

        $r7 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.fontbox.cmap.CMap cmap>;

        r9 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDFont: java.lang.String cmapEncoding(int,int,boolean,org.apache.fontbox.cmap.CMap)>($i2, i1, 0, $r7);

     label2:
        if r9 != null goto label5;

        $r3 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.encoding.Encoding fontEncoding>;

        if $r3 == null goto label3;

        $r5 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.encoding.Encoding fontEncoding>;

        r9 = virtualinvoke $r5.<org.apache.pdfbox.encoding.Encoding: java.lang.String getCharacter(int)>($i2);

     label3:
        if r9 != null goto label5;

        $r4 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.fontbox.cmap.CMap cmap>;

        if $r4 == null goto label4;

        if i1 != 2 goto label5;

     label4:
        r9 = staticinvoke <org.apache.pdfbox.pdmodel.font.PDFont: java.lang.String getStringFromArray(byte[],int,int)>(r1, i0, i1);

     label5:
        return r9;
    }

    public int encodeToCID(byte[], int, int) throws java.io.IOException
    {
        byte[] r1;
        int i0, i1, i2, $i4;
        java.lang.String $r2;
        org.apache.pdfbox.pdmodel.font.PDFont r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDFont;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i4 = (int) -1;

        i2 = $i4;

        $r2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDFont: java.lang.String encode(byte[],int,int)>(r1, i0, i1);

        if $r2 == null goto label1;

        i2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDFont: int getCodeFromArray(byte[],int,int)>(r1, i0, i1);

     label1:
        return i2;
    }

    private static java.lang.String getStringFromArray(byte[], int, int) throws java.io.IOException
    {
        byte[] r5;
        java.lang.String[] $r7, $r8;
        byte $b2, $b6, $b9;
        int i0, i1, $i3, $i4, $i5, $i7, $i8, $i10, $i11, $i12, $i13, $i14;
        java.lang.String $r4, r9;
        java.io.IOException $r11;
        java.lang.StringBuilder $r2, $r3, $r10;
        java.lang.String[][] $r6;

        r5 := @parameter0: byte[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        if i0 != 1 goto label1;

        $r8 = <org.apache.pdfbox.pdmodel.font.PDFont: java.lang.String[] SINGLE_CHAR_STRING>;

        $b9 = r5[i1];

        $i12 = (int) $b9;

        $i10 = $i12 + 256;

        $i11 = $i10 % 256;

        r9 = $r8[$i11];

        goto label3;

     label1:
        if i0 != 2 goto label2;

        $r6 = <org.apache.pdfbox.pdmodel.font.PDFont: java.lang.String[][] DOUBLE_CHAR_STRING>;

        $b2 = r5[i1];

        $i13 = (int) $b2;

        $i3 = $i13 + 256;

        $i4 = $i3 % 256;

        $r7 = $r6[$i4];

        $i5 = i1 + 1;

        $b6 = r5[$i5];

        $i14 = (int) $b6;

        $i7 = $i14 + 256;

        $i8 = $i7 % 256;

        r9 = $r7[$i8];

        goto label3;

     label2:
        $r11 = new java.io.IOException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error:Unknown character length:");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>($r4);

        throw $r11;

     label3:
        return r9;
    }

    protected org.apache.fontbox.cmap.CMap parseCmap(java.lang.String, java.io.InputStream)
    {
        java.io.IOException $r6;
        org.apache.fontbox.cmap.CMapParser $r1;
        org.apache.fontbox.cmap.CMap $r3, r9;
        org.apache.pdfbox.pdmodel.font.PDFont r8;
        java.util.Map $r4;
        org.apache.commons.logging.Log $r7;
        java.lang.String r2, $r5;
        java.io.InputStream r0;

        r8 := @this: org.apache.pdfbox.pdmodel.font.PDFont;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.io.InputStream;

        r9 = null;

        if r0 == null goto label4;

        $r1 = new org.apache.fontbox.cmap.CMapParser;

        specialinvoke $r1.<org.apache.fontbox.cmap.CMapParser: void <init>()>();

     label1:
        $r3 = virtualinvoke $r1.<org.apache.fontbox.cmap.CMapParser: org.apache.fontbox.cmap.CMap parse(java.lang.String,java.io.InputStream)>(r2, r0);

        r9 = $r3;

        if r2 == null goto label2;

        $r4 = <org.apache.pdfbox.pdmodel.font.PDFont: java.util.Map cmapObjects>;

        $r5 = virtualinvoke $r3.<org.apache.fontbox.cmap.CMap: java.lang.String getName()>();

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r3);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = <org.apache.pdfbox.pdmodel.font.PDFont: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>("An error occurs while reading a CMap", $r6);

     label4:
        return r9;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void setFontEncoding(org.apache.pdfbox.encoding.Encoding)
    {
        org.apache.pdfbox.encoding.Encoding r1;
        org.apache.pdfbox.pdmodel.font.PDFont r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDFont;

        r1 := @parameter0: org.apache.pdfbox.encoding.Encoding;

        r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.encoding.Encoding fontEncoding> = r1;

        return;
    }

    public org.apache.pdfbox.encoding.Encoding getFontEncoding()
    {
        org.apache.pdfbox.encoding.Encoding $r1;
        org.apache.pdfbox.pdmodel.font.PDFont r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDFont;

        $r1 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.encoding.Encoding fontEncoding>;

        return $r1;
    }

    public java.lang.String getType()
    {
        org.apache.pdfbox.cos.COSName $r1;
        org.apache.pdfbox.cos.COSDictionary $r2;
        java.lang.String $r3;
        org.apache.pdfbox.pdmodel.font.PDFont r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDFont;

        $r2 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.cos.COSDictionary font>;

        $r1 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName TYPE>;

        $r3 = virtualinvoke $r2.<org.apache.pdfbox.cos.COSDictionary: java.lang.String getNameAsString(org.apache.pdfbox.cos.COSName)>($r1);

        return $r3;
    }

    public java.lang.String getSubType()
    {
        org.apache.pdfbox.pdmodel.font.PDFont r0;
        java.lang.String $r1, $r2, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        boolean $z0, $z1, $z2, $z3;
        org.apache.pdfbox.cos.COSName $r3;
        org.apache.pdfbox.cos.COSDictionary $r4;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDFont;

        $r1 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: java.lang.String subtype>;

        if $r1 != null goto label1;

        $r4 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.cos.COSDictionary font>;

        $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName SUBTYPE>;

        $r5 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSDictionary: java.lang.String getNameAsString(org.apache.pdfbox.cos.COSName)>($r3);

        r0.<org.apache.pdfbox.pdmodel.font.PDFont: java.lang.String subtype> = $r5;

        $r7 = "Type1";

        $r6 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: java.lang.String subtype>;

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        r0.<org.apache.pdfbox.pdmodel.font.PDFont: boolean type1Font> = $z0;

        $r9 = "TrueType";

        $r8 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: java.lang.String subtype>;

        $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        r0.<org.apache.pdfbox.pdmodel.font.PDFont: boolean trueTypeFont> = $z1;

        $r11 = "Type0";

        $r10 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: java.lang.String subtype>;

        $z2 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        r0.<org.apache.pdfbox.pdmodel.font.PDFont: boolean type0Font> = $z2;

        $r13 = "Type3";

        $r12 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: java.lang.String subtype>;

        $z3 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        r0.<org.apache.pdfbox.pdmodel.font.PDFont: boolean type3Font> = $z3;

     label1:
        $r2 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: java.lang.String subtype>;

        return $r2;
    }

    protected boolean isType1Font()
    {
        org.apache.pdfbox.pdmodel.font.PDFont r0;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDFont;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDFont: java.lang.String getSubType()>();

        $z0 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: boolean type1Font>;

        return $z0;
    }

    public boolean isType3Font()
    {
        org.apache.pdfbox.pdmodel.font.PDFont r0;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDFont;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDFont: java.lang.String getSubType()>();

        $z0 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: boolean type3Font>;

        return $z0;
    }

    protected boolean isType0Font()
    {
        org.apache.pdfbox.pdmodel.font.PDFont r0;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDFont;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDFont: java.lang.String getSubType()>();

        $z0 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: boolean type0Font>;

        return $z0;
    }

    private boolean isTrueTypeFont()
    {
        org.apache.pdfbox.pdmodel.font.PDFont r0;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDFont;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDFont: java.lang.String getSubType()>();

        $z0 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: boolean trueTypeFont>;

        return $z0;
    }

    public boolean isSymbolicFont()
    {
        org.apache.pdfbox.pdmodel.font.PDFont r0;
        org.apache.pdfbox.pdmodel.font.PDFontDescriptor $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDFont;

        $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.pdmodel.font.PDFontDescriptor getFontDescriptor()>();

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.pdmodel.font.PDFontDescriptor getFontDescriptor()>();

        $z0 = virtualinvoke $r2.<org.apache.pdfbox.pdmodel.font.PDFontDescriptor: boolean isSymbolic()>();

        return $z0;

     label1:
        return 0;
    }

    public java.lang.String getBaseFont()
    {
        org.apache.pdfbox.cos.COSName $r1;
        org.apache.pdfbox.cos.COSDictionary $r2;
        java.lang.String $r3;
        org.apache.pdfbox.pdmodel.font.PDFont r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDFont;

        $r2 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.cos.COSDictionary font>;

        $r1 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName BASE_FONT>;

        $r3 = virtualinvoke $r2.<org.apache.pdfbox.cos.COSDictionary: java.lang.String getNameAsString(org.apache.pdfbox.cos.COSName)>($r1);

        return $r3;
    }

    public void setBaseFont(java.lang.String)
    {
        org.apache.pdfbox.cos.COSName $r2;
        org.apache.pdfbox.cos.COSDictionary $r3;
        java.lang.String r1;
        org.apache.pdfbox.pdmodel.font.PDFont r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDFont;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.cos.COSDictionary font>;

        $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName BASE_FONT>;

        virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: void setName(org.apache.pdfbox.cos.COSName,java.lang.String)>($r2, r1);

        return;
    }

    public int getFirstChar()
    {
        org.apache.pdfbox.cos.COSName $r1;
        org.apache.pdfbox.cos.COSDictionary $r2;
        int $i0, $i2;
        org.apache.pdfbox.pdmodel.font.PDFont r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDFont;

        $r2 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.cos.COSDictionary font>;

        $r1 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName FIRST_CHAR>;

        $i2 = (int) -1;

        $i0 = virtualinvoke $r2.<org.apache.pdfbox.cos.COSDictionary: int getInt(org.apache.pdfbox.cos.COSName,int)>($r1, $i2);

        return $i0;
    }

    public void setFirstChar(int)
    {
        org.apache.pdfbox.cos.COSName $r1;
        org.apache.pdfbox.cos.COSDictionary $r2;
        int i0;
        org.apache.pdfbox.pdmodel.font.PDFont r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDFont;

        i0 := @parameter0: int;

        $r2 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.cos.COSDictionary font>;

        $r1 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName FIRST_CHAR>;

        virtualinvoke $r2.<org.apache.pdfbox.cos.COSDictionary: void setInt(org.apache.pdfbox.cos.COSName,int)>($r1, i0);

        return;
    }

    public int getLastChar()
    {
        org.apache.pdfbox.cos.COSName $r1;
        org.apache.pdfbox.cos.COSDictionary $r2;
        int $i0, $i2;
        org.apache.pdfbox.pdmodel.font.PDFont r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDFont;

        $r2 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.cos.COSDictionary font>;

        $r1 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName LAST_CHAR>;

        $i2 = (int) -1;

        $i0 = virtualinvoke $r2.<org.apache.pdfbox.cos.COSDictionary: int getInt(org.apache.pdfbox.cos.COSName,int)>($r1, $i2);

        return $i0;
    }

    public void setLastChar(int)
    {
        org.apache.pdfbox.cos.COSName $r1;
        org.apache.pdfbox.cos.COSDictionary $r2;
        int i0;
        org.apache.pdfbox.pdmodel.font.PDFont r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDFont;

        i0 := @parameter0: int;

        $r2 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.cos.COSDictionary font>;

        $r1 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName LAST_CHAR>;

        virtualinvoke $r2.<org.apache.pdfbox.cos.COSDictionary: void setInt(org.apache.pdfbox.cos.COSName,int)>($r1, i0);

        return;
    }

    public java.util.List getWidths()
    {
        org.apache.pdfbox.cos.COSName $r2;
        org.apache.pdfbox.cos.COSArray r5;
        org.apache.pdfbox.pdmodel.font.PDFont r0;
        org.apache.pdfbox.cos.COSDictionary $r3;
        java.util.List $r1, $r6, $r7;
        org.apache.pdfbox.cos.COSBase $r4;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDFont;

        $r1 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: java.util.List widths>;

        if $r1 != null goto label2;

        $z0 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: boolean widthsAreMissing>;

        if $z0 != 0 goto label2;

        $r3 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.cos.COSDictionary font>;

        $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName WIDTHS>;

        $r4 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r2);

        r5 = (org.apache.pdfbox.cos.COSArray) $r4;

        if r5 == null goto label1;

        $r6 = staticinvoke <org.apache.pdfbox.pdmodel.common.COSArrayList: java.util.List convertFloatCOSArrayToList(org.apache.pdfbox.cos.COSArray)>(r5);

        r0.<org.apache.pdfbox.pdmodel.font.PDFont: java.util.List widths> = $r6;

        goto label2;

     label1:
        r0.<org.apache.pdfbox.pdmodel.font.PDFont: boolean widthsAreMissing> = 1;

     label2:
        $r7 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: java.util.List widths>;

        return $r7;
    }

    public void setWidths(java.util.List)
    {
        org.apache.pdfbox.cos.COSDictionary $r3;
        org.apache.pdfbox.cos.COSName $r4;
        java.util.List r1, $r2;
        org.apache.pdfbox.cos.COSArray $r5;
        org.apache.pdfbox.pdmodel.font.PDFont r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDFont;

        r1 := @parameter0: java.util.List;

        r0.<org.apache.pdfbox.pdmodel.font.PDFont: java.util.List widths> = r1;

        $r3 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.cos.COSDictionary font>;

        $r4 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName WIDTHS>;

        $r2 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: java.util.List widths>;

        $r5 = staticinvoke <org.apache.pdfbox.pdmodel.common.COSArrayList: org.apache.pdfbox.cos.COSArray converterToCOSArray(java.util.List)>($r2);

        virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r4, $r5);

        return;
    }

    public org.apache.pdfbox.pdmodel.common.PDMatrix getFontMatrix()
    {
        org.apache.pdfbox.cos.COSName $r2;
        org.apache.pdfbox.cos.COSArray $r6, r13;
        org.apache.pdfbox.cos.COSFloat $r7, $r10;
        org.apache.pdfbox.pdmodel.common.PDMatrix $r1, $r5, $r14;
        org.apache.pdfbox.pdmodel.font.PDFont r0;
        org.apache.pdfbox.cos.COSDictionary $r3;
        org.apache.pdfbox.cos.COSInteger $r8, $r9, $r11, $r12;
        org.apache.pdfbox.cos.COSBase $r4;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDFont;

        $r1 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.pdmodel.common.PDMatrix fontMatrix>;

        if $r1 != null goto label2;

        $r3 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.cos.COSDictionary font>;

        $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName FONT_MATRIX>;

        $r4 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r2);

        r13 = (org.apache.pdfbox.cos.COSArray) $r4;

        if r13 != null goto label1;

        $r6 = new org.apache.pdfbox.cos.COSArray;

        specialinvoke $r6.<org.apache.pdfbox.cos.COSArray: void <init>()>();

        r13 = $r6;

        $r7 = new org.apache.pdfbox.cos.COSFloat;

        specialinvoke $r7.<org.apache.pdfbox.cos.COSFloat: void <init>(float)>(0.001F);

        virtualinvoke $r6.<org.apache.pdfbox.cos.COSArray: void add(org.apache.pdfbox.cos.COSBase)>($r7);

        $r8 = <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger ZERO>;

        virtualinvoke $r6.<org.apache.pdfbox.cos.COSArray: void add(org.apache.pdfbox.cos.COSBase)>($r8);

        $r9 = <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger ZERO>;

        virtualinvoke $r6.<org.apache.pdfbox.cos.COSArray: void add(org.apache.pdfbox.cos.COSBase)>($r9);

        $r10 = new org.apache.pdfbox.cos.COSFloat;

        specialinvoke $r10.<org.apache.pdfbox.cos.COSFloat: void <init>(float)>(0.001F);

        virtualinvoke $r6.<org.apache.pdfbox.cos.COSArray: void add(org.apache.pdfbox.cos.COSBase)>($r10);

        $r11 = <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger ZERO>;

        virtualinvoke $r6.<org.apache.pdfbox.cos.COSArray: void add(org.apache.pdfbox.cos.COSBase)>($r11);

        $r12 = <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger ZERO>;

        virtualinvoke $r6.<org.apache.pdfbox.cos.COSArray: void add(org.apache.pdfbox.cos.COSBase)>($r12);

     label1:
        $r5 = new org.apache.pdfbox.pdmodel.common.PDMatrix;

        specialinvoke $r5.<org.apache.pdfbox.pdmodel.common.PDMatrix: void <init>(org.apache.pdfbox.cos.COSArray)>(r13);

        r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.pdmodel.common.PDMatrix fontMatrix> = $r5;

     label2:
        $r14 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.pdmodel.common.PDMatrix fontMatrix>;

        return $r14;
    }

    public abstract org.apache.pdfbox.pdmodel.common.PDRectangle getFontBoundingBox() throws java.io.IOException;

    public boolean equals(java.lang.Object)
    {
        org.apache.pdfbox.cos.COSBase $r2, $r4;
        java.lang.Object r0;
        boolean $z0, $z1;
        org.apache.pdfbox.pdmodel.font.PDFont $r1, r3;

        r3 := @this: org.apache.pdfbox.pdmodel.font.PDFont;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.apache.pdfbox.pdmodel.font.PDFont;

        if $z0 == 0 goto label1;

        $r1 = (org.apache.pdfbox.pdmodel.font.PDFont) r0;

        $r2 = virtualinvoke $r1.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.cos.COSBase getCOSObject()>();

        $r4 = virtualinvoke r3.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.cos.COSBase getCOSObject()>();

        if $r2 != $r4 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public int hashCode()
    {
        int $i0;
        org.apache.pdfbox.cos.COSBase $r1;
        org.apache.pdfbox.pdmodel.font.PDFont r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDFont;

        $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.cos.COSBase getCOSObject()>();

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public float getFontWidth(int)
    {
        java.lang.Float $r5;
        org.apache.pdfbox.pdmodel.font.PDFont r0;
        org.apache.pdfbox.pdmodel.font.PDFontDescriptor $r1;
        java.util.List $r2, $r3;
        int $i0, $i1, i2, $i3;
        float f0;
        java.lang.Object $r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDFont;

        i2 := @parameter0: int;

        f0 = -1.0F;

        $i0 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDFont: int getFirstChar()>();

        $i1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDFont: int getLastChar()>();

        if i2 < $i0 goto label1;

        if i2 > $i1 goto label1;

        $z1 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: boolean widthsAreMissing>;

        if $z1 != 0 goto label2;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDFont: java.util.List getWidths()>();

        $r2 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: java.util.List widths>;

        if $r2 == null goto label2;

        $r3 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: java.util.List widths>;

        $i3 = i2 - $i0;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i3);

        $r5 = (java.lang.Float) $r4;

        f0 = virtualinvoke $r5.<java.lang.Float: float floatValue()>();

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.pdmodel.font.PDFontDescriptor getFontDescriptor()>();

        $z0 = $r1 instanceof org.apache.pdfbox.pdmodel.font.PDFontDescriptorDictionary;

        if $z0 == 0 goto label2;

        f0 = virtualinvoke $r1.<org.apache.pdfbox.pdmodel.font.PDFontDescriptor: float getMissingWidth()>();

     label2:
        return f0;
    }

    protected boolean hasToUnicode()
    {
        org.apache.pdfbox.pdmodel.font.PDFont r0;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDFont;

        $z0 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: boolean hasToUnicode>;

        return $z0;
    }

    protected void setHasToUnicode(boolean)
    {
        org.apache.pdfbox.pdmodel.font.PDFont r0;
        boolean z0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDFont;

        z0 := @parameter0: boolean;

        r0.<org.apache.pdfbox.pdmodel.font.PDFont: boolean hasToUnicode> = z0;

        return;
    }

    public abstract float getSpaceWidth();

    public org.apache.fontbox.cmap.CMap getToUnicodeCMap()
    {
        org.apache.pdfbox.pdmodel.font.PDFont r0;
        org.apache.fontbox.cmap.CMap $r1;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDFont;

        $r1 = r0.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.fontbox.cmap.CMap toUnicodeCmap>;

        return $r1;
    }

    public void clear()
    {
        org.apache.pdfbox.pdmodel.font.PDFont r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDFont;

        return;
    }

    static void <clinit>()
    {
        byte[] $r8, $r12;
        java.util.HashMap $r1;
        java.lang.String[] $r5, $r9, $r13;
        byte $b0, $b1, $b2;
        java.util.Map $r2, $r3, $r4;
        int i3, i4;
        java.lang.String $r7, $r11;
        org.apache.commons.logging.Log $r0, $r15, $r17;
        java.lang.String[][] $r6, $r10;
        java.io.UnsupportedEncodingException $r14, $r16;

        <org.apache.pdfbox.pdmodel.font.PDFont: java.lang.String resourceRootAFM> = "org/apache/pdfbox/resources/afm/";

        <org.apache.pdfbox.pdmodel.font.PDFont: java.lang.String resourceRootCMAP> = "org/apache/pdfbox/resources/cmap/";

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/apache/pdfbox/pdmodel/font/PDFont;");

        <org.apache.pdfbox.pdmodel.font.PDFont: org.apache.commons.logging.Log LOG> = $r0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        $r2 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r1);

        <org.apache.pdfbox.pdmodel.font.PDFont: java.util.Map cmapObjects> = $r2;

        $r3 = staticinvoke <org.apache.pdfbox.pdmodel.font.PDFont: java.util.Map getAdobeFontMetrics()>();

        $r4 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r3);

        <org.apache.pdfbox.pdmodel.font.PDFont: java.util.Map afmObjects> = $r4;

        $r5 = newarray (java.lang.String)[256];

        <org.apache.pdfbox.pdmodel.font.PDFont: java.lang.String[] SINGLE_CHAR_STRING> = $r5;

        $r6 = newmultiarray (java.lang.String)[256][256];

        <org.apache.pdfbox.pdmodel.font.PDFont: java.lang.String[][] DOUBLE_CHAR_STRING> = $r6;

        i3 = 0;

     label01:
        if i3 >= 256 goto label12;

     label02:
        $r9 = <org.apache.pdfbox.pdmodel.font.PDFont: java.lang.String[] SINGLE_CHAR_STRING>;

        $r7 = new java.lang.String;

        $r8 = newarray (byte)[1];

        $b0 = (byte) i3;

        $r8[0] = $b0;

        specialinvoke $r7.<java.lang.String: void <init>(byte[],java.lang.String)>($r8, "ISO-8859-1");

        $r9[i3] = $r7;

     label03:
        goto label05;

     label04:
        $r16 := @caughtexception;

        $r17 = <org.apache.pdfbox.pdmodel.font.PDFont: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r17.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>($r16, $r16);

     label05:
        i4 = 0;

     label06:
        if i4 >= 256 goto label11;

     label07:
        $r10 = <org.apache.pdfbox.pdmodel.font.PDFont: java.lang.String[][] DOUBLE_CHAR_STRING>;

        $r13 = $r10[i3];

        $r11 = new java.lang.String;

        $r12 = newarray (byte)[2];

        $b1 = (byte) i3;

        $r12[0] = $b1;

        $b2 = (byte) i4;

        $r12[1] = $b2;

        specialinvoke $r11.<java.lang.String: void <init>(byte[],java.lang.String)>($r12, "UTF-16BE");

        $r13[i4] = $r11;

     label08:
        goto label10;

     label09:
        $r14 := @caughtexception;

        $r15 = <org.apache.pdfbox.pdmodel.font.PDFont: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r15.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>($r14, $r14);

     label10:
        i4 = i4 + 1;

        goto label06;

     label11:
        i3 = i3 + 1;

        goto label01;

     label12:
        return;

        catch java.io.UnsupportedEncodingException from label02 to label03 with label04;
        catch java.io.UnsupportedEncodingException from label07 to label08 with label09;
    }
}
