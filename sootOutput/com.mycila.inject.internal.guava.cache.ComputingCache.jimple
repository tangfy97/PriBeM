class com.mycila.inject.internal.guava.cache.ComputingCache extends com.mycila.inject.internal.guava.cache.AbstractCache implements java.io.Serializable
{
    final com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map;
    private static final long serialVersionUID;

    void <init>(com.mycila.inject.internal.guava.cache.CacheBuilder, com.mycila.inject.internal.guava.base.Supplier, com.mycila.inject.internal.guava.cache.CacheLoader)
    {
        com.mycila.inject.internal.guava.base.Supplier r3;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap $r1;
        com.mycila.inject.internal.guava.cache.CacheLoader r4;
        com.mycila.inject.internal.guava.cache.CacheBuilder r2;
        com.mycila.inject.internal.guava.cache.ComputingCache r0;

        r0 := @this: com.mycila.inject.internal.guava.cache.ComputingCache;

        r2 := @parameter0: com.mycila.inject.internal.guava.cache.CacheBuilder;

        r3 := @parameter1: com.mycila.inject.internal.guava.base.Supplier;

        r4 := @parameter2: com.mycila.inject.internal.guava.cache.CacheLoader;

        specialinvoke r0.<com.mycila.inject.internal.guava.cache.AbstractCache: void <init>()>();

        $r1 = new com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap;

        specialinvoke $r1.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: void <init>(com.mycila.inject.internal.guava.cache.CacheBuilder,com.mycila.inject.internal.guava.base.Supplier,com.mycila.inject.internal.guava.cache.CacheLoader)>(r2, r3, r4);

        r0.<com.mycila.inject.internal.guava.cache.ComputingCache: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map> = $r1;

        return;
    }

    public java.lang.Object get(java.lang.Object) throws java.util.concurrent.ExecutionException
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap $r2;
        java.lang.Object r1, $r3;
        com.mycila.inject.internal.guava.cache.ComputingCache r0;

        r0 := @this: com.mycila.inject.internal.guava.cache.ComputingCache;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.mycila.inject.internal.guava.cache.ComputingCache: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        $r3 = virtualinvoke $r2.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: java.lang.Object getOrCompute(java.lang.Object)>(r1);

        return $r3;
    }

    public void invalidate(java.lang.Object)
    {
        java.lang.Object r0;
        com.mycila.inject.internal.guava.cache.ComputingCache r1;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap $r2;

        r1 := @this: com.mycila.inject.internal.guava.cache.ComputingCache;

        r0 := @parameter0: java.lang.Object;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r2 = r1.<com.mycila.inject.internal.guava.cache.ComputingCache: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        virtualinvoke $r2.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: java.lang.Object remove(java.lang.Object)>(r0);

        return;
    }

    public void invalidateAll()
    {
        com.mycila.inject.internal.guava.cache.ComputingCache r0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap $r1;

        r0 := @this: com.mycila.inject.internal.guava.cache.ComputingCache;

        $r1 = r0.<com.mycila.inject.internal.guava.cache.ComputingCache: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        virtualinvoke $r1.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: void clear()>();

        return;
    }

    public long size()
    {
        long $l0;
        com.mycila.inject.internal.guava.cache.ComputingCache r0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap $r1;

        r0 := @this: com.mycila.inject.internal.guava.cache.ComputingCache;

        $r1 = r0.<com.mycila.inject.internal.guava.cache.ComputingCache: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        $l0 = virtualinvoke $r1.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: long longSize()>();

        return $l0;
    }

    public java.util.concurrent.ConcurrentMap asMap()
    {
        com.mycila.inject.internal.guava.cache.ComputingCache r0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap $r1;

        r0 := @this: com.mycila.inject.internal.guava.cache.ComputingCache;

        $r1 = r0.<com.mycila.inject.internal.guava.cache.ComputingCache: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        return $r1;
    }

    public com.mycila.inject.internal.guava.cache.CacheStats stats()
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r5;
        com.mycila.inject.internal.guava.cache.AbstractCache$SimpleStatsCounter $r0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap $r2;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment[] r3;
        com.mycila.inject.internal.guava.cache.AbstractCache$StatsCounter $r6;
        int i0, i1;
        com.mycila.inject.internal.guava.cache.ComputingCache r1;
        com.mycila.inject.internal.guava.cache.CacheStats $r4;

        r1 := @this: com.mycila.inject.internal.guava.cache.ComputingCache;

        $r0 = new com.mycila.inject.internal.guava.cache.AbstractCache$SimpleStatsCounter;

        specialinvoke $r0.<com.mycila.inject.internal.guava.cache.AbstractCache$SimpleStatsCounter: void <init>()>();

        $r2 = r1.<com.mycila.inject.internal.guava.cache.ComputingCache: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        r3 = $r2.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment[] segments>;

        i0 = lengthof r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r5 = r3[i1];

        $r6 = r5.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.AbstractCache$StatsCounter statsCounter>;

        virtualinvoke $r0.<com.mycila.inject.internal.guava.cache.AbstractCache$SimpleStatsCounter: void incrementBy(com.mycila.inject.internal.guava.cache.AbstractCache$StatsCounter)>($r6);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r4 = virtualinvoke $r0.<com.mycila.inject.internal.guava.cache.AbstractCache$SimpleStatsCounter: com.mycila.inject.internal.guava.cache.CacheStats snapshot()>();

        return $r4;
    }

    public void cleanUp()
    {
        com.mycila.inject.internal.guava.cache.ComputingCache r0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap $r1;

        r0 := @this: com.mycila.inject.internal.guava.cache.ComputingCache;

        $r1 = r0.<com.mycila.inject.internal.guava.cache.ComputingCache: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        virtualinvoke $r1.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: void cleanUp()>();

        return;
    }

    java.lang.Object writeReplace()
    {
        com.mycila.inject.internal.guava.cache.ComputingCache r0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap $r1;
        com.mycila.inject.internal.guava.cache.Cache $r2;

        r0 := @this: com.mycila.inject.internal.guava.cache.ComputingCache;

        $r1 = r0.<com.mycila.inject.internal.guava.cache.ComputingCache: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: com.mycila.inject.internal.guava.cache.Cache cacheSerializationProxy()>();

        return $r2;
    }

    public static void <clinit>()
    {
        <com.mycila.inject.internal.guava.cache.ComputingCache: long serialVersionUID> = 1L;

        return;
    }
}
