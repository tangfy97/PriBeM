public class org.apache.tika.parser.image.xmp.XMPPacketScanner extends java.lang.Object
{
    private static final byte[] PACKET_HEADER;
    private static final byte[] PACKET_HEADER_END;
    private static final byte[] PACKET_TRAILER;

    public void <init>()
    {
        org.apache.tika.parser.image.xmp.XMPPacketScanner r0;

        r0 := @this: org.apache.tika.parser.image.xmp.XMPPacketScanner;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean parse(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r2;
        byte[] $r0, $r1, $r3;
        java.io.BufferedInputStream $r6;
        java.io.IOException $r4, $r5;
        org.apache.tika.parser.image.xmp.XMPPacketScanner r7;
        boolean $z0, $z1, $z2, $z3;
        java.io.InputStream r8;

        r7 := @this: org.apache.tika.parser.image.xmp.XMPPacketScanner;

        r8 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.io.OutputStream;

        $z0 = virtualinvoke r8.<java.io.InputStream: boolean markSupported()>();

        if $z0 != 0 goto label1;

        $r6 = new java.io.BufferedInputStream;

        specialinvoke $r6.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(r8);

        r8 = $r6;

     label1:
        $r0 = <org.apache.tika.parser.image.xmp.XMPPacketScanner: byte[] PACKET_HEADER>;

        $z1 = staticinvoke <org.apache.tika.parser.image.xmp.XMPPacketScanner: boolean skipAfter(java.io.InputStream,byte[])>(r8, $r0);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        $r1 = <org.apache.tika.parser.image.xmp.XMPPacketScanner: byte[] PACKET_HEADER_END>;

        $z2 = staticinvoke <org.apache.tika.parser.image.xmp.XMPPacketScanner: boolean skipAfter(java.io.InputStream,byte[])>(r8, $r1);

        if $z2 != 0 goto label3;

        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("Invalid XMP packet header!");

        throw $r5;

     label3:
        $r3 = <org.apache.tika.parser.image.xmp.XMPPacketScanner: byte[] PACKET_TRAILER>;

        $z3 = staticinvoke <org.apache.tika.parser.image.xmp.XMPPacketScanner: boolean skipAfter(java.io.InputStream,byte[],java.io.OutputStream)>(r8, $r3, r2);

        if $z3 != 0 goto label4;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("XMP packet not properly terminated!");

        throw $r4;

     label4:
        return 1;
    }

    private static boolean skipAfter(java.io.InputStream, byte[]) throws java.io.IOException
    {
        byte[] r1;
        java.io.InputStream r0;
        boolean $z0;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: byte[];

        $z0 = staticinvoke <org.apache.tika.parser.image.xmp.XMPPacketScanner: boolean skipAfter(java.io.InputStream,byte[],java.io.OutputStream)>(r0, r1, null);

        return $z0;
    }

    private static boolean skipAfter(java.io.InputStream, byte[], java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r2;
        byte[] r0;
        byte $b1;
        int i0, i2, $i3, $i4;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        r0 := @parameter1: byte[];

        r2 := @parameter2: java.io.OutputStream;

        i2 = 0;

        i0 = lengthof r0;

     label1:
        $i3 = virtualinvoke r1.<java.io.InputStream: int read()>();

        if $i3 < 0 goto label5;

        $b1 = r0[i2];

        $i4 = (int) $b1;

        if $i3 != $i4 goto label2;

        i2 = i2 + 1;

        if i2 != i0 goto label1;

        return 1;

     label2:
        if r2 == null goto label4;

        if i2 <= 0 goto label3;

        virtualinvoke r2.<java.io.OutputStream: void write(byte[],int,int)>(r0, 0, i2);

     label3:
        virtualinvoke r2.<java.io.OutputStream: void write(int)>($i3);

     label4:
        i2 = 0;

        goto label1;

     label5:
        return 0;
    }

    static void <clinit>()
    {
        byte[] $r1, $r3, $r5;
        java.lang.RuntimeException $r7;
        java.lang.String $r0, $r2, $r4;
        java.io.UnsupportedEncodingException $r6;

     label1:
        $r0 = "<?xpacket begin=";

        $r1 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>("US-ASCII");

        <org.apache.tika.parser.image.xmp.XMPPacketScanner: byte[] PACKET_HEADER> = $r1;

        $r2 = "?>";

        $r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.lang.String)>("US-ASCII");

        <org.apache.tika.parser.image.xmp.XMPPacketScanner: byte[] PACKET_HEADER_END> = $r3;

        $r4 = "<?xpacket";

        $r5 = virtualinvoke $r4.<java.lang.String: byte[] getBytes(java.lang.String)>("US-ASCII");

        <org.apache.tika.parser.image.xmp.XMPPacketScanner: byte[] PACKET_TRAILER> = $r5;

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>("Incompatible JVM! US-ASCII encoding not supported.");

        throw $r7;

     label4:
        return;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }
}
