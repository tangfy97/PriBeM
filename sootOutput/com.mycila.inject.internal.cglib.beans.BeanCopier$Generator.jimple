public class com.mycila.inject.internal.cglib.beans.BeanCopier$Generator extends com.mycila.inject.internal.cglib.core.AbstractClassGenerator
{
    private static final com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source SOURCE;
    private java.lang.Class source;
    private java.lang.Class target;
    private boolean useConverter;

    public void <init>()
    {
        com.mycila.inject.internal.cglib.beans.BeanCopier$Generator r0;
        com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source $r1;

        r0 := @this: com.mycila.inject.internal.cglib.beans.BeanCopier$Generator;

        $r1 = <com.mycila.inject.internal.cglib.beans.BeanCopier$Generator: com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source SOURCE>;

        specialinvoke r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: void <init>(com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source)>($r1);

        return;
    }

    public void setSource(java.lang.Class)
    {
        int $i0;
        com.mycila.inject.internal.cglib.beans.BeanCopier$Generator r1;
        java.lang.Class r0;
        java.lang.String $r2;
        boolean $z0;

        r1 := @this: com.mycila.inject.internal.cglib.beans.BeanCopier$Generator;

        r0 := @parameter0: java.lang.Class;

        $i0 = virtualinvoke r0.<java.lang.Class: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r1.<com.mycila.inject.internal.cglib.beans.BeanCopier$Generator: void setNamePrefix(java.lang.String)>($r2);

     label1:
        r1.<com.mycila.inject.internal.cglib.beans.BeanCopier$Generator: java.lang.Class source> = r0;

        return;
    }

    public void setTarget(java.lang.Class)
    {
        int $i0;
        com.mycila.inject.internal.cglib.beans.BeanCopier$Generator r1;
        java.lang.Class r0;
        java.lang.String $r2;
        boolean $z0;

        r1 := @this: com.mycila.inject.internal.cglib.beans.BeanCopier$Generator;

        r0 := @parameter0: java.lang.Class;

        $i0 = virtualinvoke r0.<java.lang.Class: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r1.<com.mycila.inject.internal.cglib.beans.BeanCopier$Generator: void setNamePrefix(java.lang.String)>($r2);

     label1:
        r1.<com.mycila.inject.internal.cglib.beans.BeanCopier$Generator: java.lang.Class target> = r0;

        return;
    }

    public void setUseConverter(boolean)
    {
        com.mycila.inject.internal.cglib.beans.BeanCopier$Generator r0;
        boolean z0;

        r0 := @this: com.mycila.inject.internal.cglib.beans.BeanCopier$Generator;

        z0 := @parameter0: boolean;

        r0.<com.mycila.inject.internal.cglib.beans.BeanCopier$Generator: boolean useConverter> = z0;

        return;
    }

    protected java.lang.ClassLoader getDefaultClassLoader()
    {
        com.mycila.inject.internal.cglib.beans.BeanCopier$Generator r0;
        java.lang.Class $r1;
        java.lang.ClassLoader $r2;

        r0 := @this: com.mycila.inject.internal.cglib.beans.BeanCopier$Generator;

        $r1 = r0.<com.mycila.inject.internal.cglib.beans.BeanCopier$Generator: java.lang.Class source>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        return $r2;
    }

    public com.mycila.inject.internal.cglib.beans.BeanCopier create()
    {
        com.mycila.inject.internal.cglib.beans.BeanCopier$BeanCopierKey $r0;
        com.mycila.inject.internal.cglib.beans.BeanCopier $r8;
        com.mycila.inject.internal.cglib.beans.BeanCopier$Generator r1;
        java.lang.Class $r2, $r4;
        java.lang.Object $r6, $r7;
        java.lang.String $r3, $r5;
        boolean $z0;

        r1 := @this: com.mycila.inject.internal.cglib.beans.BeanCopier$Generator;

        $r0 = staticinvoke <com.mycila.inject.internal.cglib.beans.BeanCopier: com.mycila.inject.internal.cglib.beans.BeanCopier$BeanCopierKey access$000()>();

        $r2 = r1.<com.mycila.inject.internal.cglib.beans.BeanCopier$Generator: java.lang.Class source>;

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = r1.<com.mycila.inject.internal.cglib.beans.BeanCopier$Generator: java.lang.Class target>;

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $z0 = r1.<com.mycila.inject.internal.cglib.beans.BeanCopier$Generator: boolean useConverter>;

        $r6 = interfaceinvoke $r0.<com.mycila.inject.internal.cglib.beans.BeanCopier$BeanCopierKey: java.lang.Object newInstance(java.lang.String,java.lang.String,boolean)>($r3, $r5, $z0);

        $r7 = specialinvoke r1.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: java.lang.Object create(java.lang.Object)>($r6);

        $r8 = (com.mycila.inject.internal.cglib.beans.BeanCopier) $r7;

        return $r8;
    }

    public void generateClass(com.mycila.inject.internal.asm.ClassVisitor)
    {
        java.beans.PropertyDescriptor[] $r12, $r14;
        java.lang.reflect.Method $r22, $r24;
        boolean $z0, $z1, $z2;
        java.beans.PropertyDescriptor r18, r21, $r35, $r37;
        com.mycila.inject.internal.asm.Type $r2, $r4, $r8, r28, $r30, $r33;
        java.util.HashMap $r15;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r10;
        com.mycila.inject.internal.cglib.core.MethodInfo $r23, $r25;
        com.mycila.inject.internal.cglib.core.Local $r16, $r17;
        int $i0, i1, i2, $i3;
        java.lang.String $r7, $r19, $r32, $r36;
        com.mycila.inject.internal.asm.Type[] $r27;
        com.mycila.inject.internal.asm.ClassVisitor r6;
        com.mycila.inject.internal.cglib.core.Signature $r9, $r26, $r29, $r31, $r34;
        com.mycila.inject.internal.cglib.core.ClassEmitter $r5;
        com.mycila.inject.internal.cglib.beans.BeanCopier$Generator r0;
        java.lang.Class $r1, $r3, $r11, $r13;
        java.lang.Object $r20;

        r0 := @this: com.mycila.inject.internal.cglib.beans.BeanCopier$Generator;

        r6 := @parameter0: com.mycila.inject.internal.asm.ClassVisitor;

        $r1 = r0.<com.mycila.inject.internal.cglib.beans.BeanCopier$Generator: java.lang.Class source>;

        $r2 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.Class)>($r1);

        $r3 = r0.<com.mycila.inject.internal.cglib.beans.BeanCopier$Generator: java.lang.Class target>;

        $r4 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.Class)>($r3);

        $r5 = new com.mycila.inject.internal.cglib.core.ClassEmitter;

        specialinvoke $r5.<com.mycila.inject.internal.cglib.core.ClassEmitter: void <init>(com.mycila.inject.internal.asm.ClassVisitor)>(r6);

        $r7 = virtualinvoke r0.<com.mycila.inject.internal.cglib.beans.BeanCopier$Generator: java.lang.String getClassName()>();

        $r8 = staticinvoke <com.mycila.inject.internal.cglib.beans.BeanCopier: com.mycila.inject.internal.asm.Type access$100()>();

        virtualinvoke $r5.<com.mycila.inject.internal.cglib.core.ClassEmitter: void begin_class(int,int,java.lang.String,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type[],java.lang.String)>(46, 1, $r7, $r8, null, "<generated>");

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void null_constructor(com.mycila.inject.internal.cglib.core.ClassEmitter)>($r5);

        $r9 = staticinvoke <com.mycila.inject.internal.cglib.beans.BeanCopier: com.mycila.inject.internal.cglib.core.Signature access$200()>();

        $r10 = virtualinvoke $r5.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(1, $r9, null);

        $r11 = r0.<com.mycila.inject.internal.cglib.beans.BeanCopier$Generator: java.lang.Class source>;

        $r12 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getBeanGetters(java.lang.Class)>($r11);

        $r13 = r0.<com.mycila.inject.internal.cglib.beans.BeanCopier$Generator: java.lang.Class target>;

        $r14 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getBeanGetters(java.lang.Class)>($r13);

        $r15 = new java.util.HashMap;

        specialinvoke $r15.<java.util.HashMap: void <init>()>();

        i1 = 0;

     label1:
        $i0 = lengthof $r12;

        if i1 >= $i0 goto label2;

        $r35 = $r12[i1];

        $r36 = virtualinvoke $r35.<java.beans.PropertyDescriptor: java.lang.String getName()>();

        $r37 = $r12[i1];

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r36, $r37);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r16 = virtualinvoke $r10.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.Local make_local()>();

        $r17 = virtualinvoke $r10.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.Local make_local()>();

        $z0 = r0.<com.mycila.inject.internal.cglib.beans.BeanCopier$Generator: boolean useConverter>;

        if $z0 == 0 goto label3;

        virtualinvoke $r10.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_arg(int)>(1);

        virtualinvoke $r10.<com.mycila.inject.internal.cglib.core.CodeEmitter: void checkcast(com.mycila.inject.internal.asm.Type)>($r4);

        virtualinvoke $r10.<com.mycila.inject.internal.cglib.core.CodeEmitter: void store_local(com.mycila.inject.internal.cglib.core.Local)>($r16);

        virtualinvoke $r10.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_arg(int)>(0);

        virtualinvoke $r10.<com.mycila.inject.internal.cglib.core.CodeEmitter: void checkcast(com.mycila.inject.internal.asm.Type)>($r2);

        virtualinvoke $r10.<com.mycila.inject.internal.cglib.core.CodeEmitter: void store_local(com.mycila.inject.internal.cglib.core.Local)>($r17);

        goto label4;

     label3:
        virtualinvoke $r10.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_arg(int)>(1);

        virtualinvoke $r10.<com.mycila.inject.internal.cglib.core.CodeEmitter: void checkcast(com.mycila.inject.internal.asm.Type)>($r4);

        virtualinvoke $r10.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_arg(int)>(0);

        virtualinvoke $r10.<com.mycila.inject.internal.cglib.core.CodeEmitter: void checkcast(com.mycila.inject.internal.asm.Type)>($r2);

     label4:
        i2 = 0;

     label5:
        $i3 = lengthof $r14;

        if i2 >= $i3 goto label8;

        r18 = $r14[i2];

        $r19 = virtualinvoke r18.<java.beans.PropertyDescriptor: java.lang.String getName()>();

        $r20 = interfaceinvoke $r15.<java.util.Map: java.lang.Object get(java.lang.Object)>($r19);

        r21 = (java.beans.PropertyDescriptor) $r20;

        if r21 == null goto label7;

        $r22 = virtualinvoke r21.<java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>();

        $r23 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: com.mycila.inject.internal.cglib.core.MethodInfo getMethodInfo(java.lang.reflect.Member)>($r22);

        $r24 = virtualinvoke r18.<java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>();

        $r25 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: com.mycila.inject.internal.cglib.core.MethodInfo getMethodInfo(java.lang.reflect.Member)>($r24);

        $z1 = r0.<com.mycila.inject.internal.cglib.beans.BeanCopier$Generator: boolean useConverter>;

        if $z1 == 0 goto label6;

        $r26 = virtualinvoke $r25.<com.mycila.inject.internal.cglib.core.MethodInfo: com.mycila.inject.internal.cglib.core.Signature getSignature()>();

        $r27 = virtualinvoke $r26.<com.mycila.inject.internal.cglib.core.Signature: com.mycila.inject.internal.asm.Type[] getArgumentTypes()>();

        r28 = $r27[0];

        virtualinvoke $r10.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_local(com.mycila.inject.internal.cglib.core.Local)>($r16);

        virtualinvoke $r10.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_arg(int)>(2);

        virtualinvoke $r10.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_local(com.mycila.inject.internal.cglib.core.Local)>($r17);

        virtualinvoke $r10.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke(com.mycila.inject.internal.cglib.core.MethodInfo)>($r23);

        $r29 = virtualinvoke $r23.<com.mycila.inject.internal.cglib.core.MethodInfo: com.mycila.inject.internal.cglib.core.Signature getSignature()>();

        $r30 = virtualinvoke $r29.<com.mycila.inject.internal.cglib.core.Signature: com.mycila.inject.internal.asm.Type getReturnType()>();

        virtualinvoke $r10.<com.mycila.inject.internal.cglib.core.CodeEmitter: void box(com.mycila.inject.internal.asm.Type)>($r30);

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void load_class(com.mycila.inject.internal.cglib.core.CodeEmitter,com.mycila.inject.internal.asm.Type)>($r10, r28);

        $r31 = virtualinvoke $r25.<com.mycila.inject.internal.cglib.core.MethodInfo: com.mycila.inject.internal.cglib.core.Signature getSignature()>();

        $r32 = virtualinvoke $r31.<com.mycila.inject.internal.cglib.core.Signature: java.lang.String getName()>();

        virtualinvoke $r10.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(java.lang.String)>($r32);

        $r33 = staticinvoke <com.mycila.inject.internal.cglib.beans.BeanCopier: com.mycila.inject.internal.asm.Type access$300()>();

        $r34 = staticinvoke <com.mycila.inject.internal.cglib.beans.BeanCopier: com.mycila.inject.internal.cglib.core.Signature access$400()>();

        virtualinvoke $r10.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_interface(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r33, $r34);

        virtualinvoke $r10.<com.mycila.inject.internal.cglib.core.CodeEmitter: void unbox_or_zero(com.mycila.inject.internal.asm.Type)>(r28);

        virtualinvoke $r10.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke(com.mycila.inject.internal.cglib.core.MethodInfo)>($r25);

        goto label7;

     label6:
        $z2 = staticinvoke <com.mycila.inject.internal.cglib.beans.BeanCopier$Generator: boolean compatible(java.beans.PropertyDescriptor,java.beans.PropertyDescriptor)>(r21, r18);

        if $z2 == 0 goto label7;

        virtualinvoke $r10.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup2()>();

        virtualinvoke $r10.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke(com.mycila.inject.internal.cglib.core.MethodInfo)>($r23);

        virtualinvoke $r10.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke(com.mycila.inject.internal.cglib.core.MethodInfo)>($r25);

     label7:
        i2 = i2 + 1;

        goto label5;

     label8:
        virtualinvoke $r10.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        virtualinvoke $r10.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        virtualinvoke $r5.<com.mycila.inject.internal.cglib.core.ClassEmitter: void end_class()>();

        return;
    }

    private static boolean compatible(java.beans.PropertyDescriptor, java.beans.PropertyDescriptor)
    {
        java.beans.PropertyDescriptor r0, r2;
        java.lang.Class $r1, $r3;
        boolean $z0;

        r2 := @parameter0: java.beans.PropertyDescriptor;

        r0 := @parameter1: java.beans.PropertyDescriptor;

        $r1 = virtualinvoke r0.<java.beans.PropertyDescriptor: java.lang.Class getPropertyType()>();

        $r3 = virtualinvoke r2.<java.beans.PropertyDescriptor: java.lang.Class getPropertyType()>();

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r3);

        return $z0;
    }

    protected java.lang.Object firstInstance(java.lang.Class)
    {
        com.mycila.inject.internal.cglib.beans.BeanCopier$Generator r2;
        java.lang.Class r0;
        java.lang.Object $r1;

        r2 := @this: com.mycila.inject.internal.cglib.beans.BeanCopier$Generator;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: java.lang.Object newInstance(java.lang.Class)>(r0);

        return $r1;
    }

    protected java.lang.Object nextInstance(java.lang.Object)
    {
        com.mycila.inject.internal.cglib.beans.BeanCopier$Generator r1;
        java.lang.Object r0;

        r1 := @this: com.mycila.inject.internal.cglib.beans.BeanCopier$Generator;

        r0 := @parameter0: java.lang.Object;

        return r0;
    }

    static void <clinit>()
    {
        com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source $r0;
        java.lang.Class $r1, $r3;
        java.lang.String $r2;

        $r0 = new com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source;

        $r1 = <com.mycila.inject.internal.cglib.beans.BeanCopier: java.lang.Class class$net$sf$cglib$beans$BeanCopier>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <com.mycila.inject.internal.cglib.beans.BeanCopier: java.lang.Class class$(java.lang.String)>("com.mycila.inject.internal.cglib.beans.BeanCopier");

        <com.mycila.inject.internal.cglib.beans.BeanCopier: java.lang.Class class$net$sf$cglib$beans$BeanCopier> = $r3;

        goto label2;

     label1:
        $r3 = <com.mycila.inject.internal.cglib.beans.BeanCopier: java.lang.Class class$net$sf$cglib$beans$BeanCopier>;

     label2:
        $r2 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source: void <init>(java.lang.String)>($r2);

        <com.mycila.inject.internal.cglib.beans.BeanCopier$Generator: com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source SOURCE> = $r0;

        return;
    }
}
