public class org.apache.commons.configuration.beanutils.ConfigurationDynaBean extends org.apache.commons.configuration.ConfigurationMap implements org.apache.commons.beanutils.DynaBean
{
    private static final java.lang.String PROPERTY_DELIMITER;
    private static org.apache.commons.logging.Log log;
    static java.lang.Class class$org$apache$commons$configuration$beanutils$ConfigurationDynaBean;

    public void <init>(org.apache.commons.configuration.Configuration)
    {
        org.apache.commons.configuration.Configuration r1;
        org.apache.commons.configuration.beanutils.ConfigurationDynaBean r0;
        java.lang.StringBuffer $r3, $r5, $r6, $r7;
        org.apache.commons.logging.Log $r2, $r4;
        java.lang.String $r8;
        boolean $z0;

        r0 := @this: org.apache.commons.configuration.beanutils.ConfigurationDynaBean;

        r1 := @parameter0: org.apache.commons.configuration.Configuration;

        specialinvoke r0.<org.apache.commons.configuration.ConfigurationMap: void <init>(org.apache.commons.configuration.Configuration)>(r1);

        $r2 = <org.apache.commons.configuration.beanutils.ConfigurationDynaBean: org.apache.commons.logging.Log log>;

        $z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isTraceEnabled()>();

        if $z0 == 0 goto label1;

        $r4 = <org.apache.commons.configuration.beanutils.ConfigurationDynaBean: org.apache.commons.logging.Log log>;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ConfigurationDynaBean(");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r8);

     label1:
        return;
    }

    public void set(java.lang.String, java.lang.Object)
    {
        org.apache.commons.configuration.Configuration $r4, $r6, $r9;
        java.lang.NullPointerException $r11;
        java.lang.StringBuffer $r12, $r14, $r15, $r16, $r17, $r18;
        int $i0, i1;
        java.lang.String r5, $r19;
        boolean $z0, $z1, $z2, $z3;
        org.apache.commons.configuration.beanutils.ConfigurationDynaBean r3;
        java.util.Iterator $r8;
        java.util.Collection r20;
        org.apache.commons.logging.Log $r0, $r13;
        java.lang.Object r1, $r7, $r10;
        java.lang.Class $r2;

        r3 := @this: org.apache.commons.configuration.beanutils.ConfigurationDynaBean;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object;

        $r0 = <org.apache.commons.configuration.beanutils.ConfigurationDynaBean: org.apache.commons.logging.Log log>;

        $z0 = interfaceinvoke $r0.<org.apache.commons.logging.Log: boolean isTraceEnabled()>();

        if $z0 == 0 goto label1;

        $r13 = <org.apache.commons.configuration.beanutils.ConfigurationDynaBean: org.apache.commons.logging.Log log>;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("set(");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r5);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r13.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r19);

     label1:
        if r1 != null goto label2;

        $r11 = new java.lang.NullPointerException;

        specialinvoke $r11.<java.lang.NullPointerException: void <init>(java.lang.String)>("Error trying to set property to null.");

        throw $r11;

     label2:
        $z1 = r1 instanceof java.util.Collection;

        if $z1 == 0 goto label5;

        r20 = (java.util.Collection) r1;

        $r8 = interfaceinvoke r20.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z3 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label4;

        $r9 = virtualinvoke r3.<org.apache.commons.configuration.beanutils.ConfigurationDynaBean: org.apache.commons.configuration.Configuration getConfiguration()>();

        $r10 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r9.<org.apache.commons.configuration.Configuration: void addProperty(java.lang.String,java.lang.Object)>(r5, $r10);

        goto label3;

     label4:
        goto label9;

     label5:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $z2 = virtualinvoke $r2.<java.lang.Class: boolean isArray()>();

        if $z2 == 0 goto label8;

        $i0 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r1);

        i1 = 0;

     label6:
        if i1 >= $i0 goto label7;

        $r6 = virtualinvoke r3.<org.apache.commons.configuration.beanutils.ConfigurationDynaBean: org.apache.commons.configuration.Configuration getConfiguration()>();

        $r7 = staticinvoke <java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>(r1, i1);

        interfaceinvoke $r6.<org.apache.commons.configuration.Configuration: void addProperty(java.lang.String,java.lang.Object)>(r5, $r7);

        i1 = i1 + 1;

        goto label6;

     label7:
        goto label9;

     label8:
        $r4 = virtualinvoke r3.<org.apache.commons.configuration.beanutils.ConfigurationDynaBean: org.apache.commons.configuration.Configuration getConfiguration()>();

        interfaceinvoke $r4.<org.apache.commons.configuration.Configuration: void setProperty(java.lang.String,java.lang.Object)>(r5, r1);

     label9:
        return;
    }

    public java.lang.Object get(java.lang.String)
    {
        boolean $z0, $z1, $z2;
        org.apache.commons.configuration.Configuration $r2, $r19;
        java.lang.StringBuffer $r6, $r7, $r8, $r9, $r11, $r13, $r14, $r15, $r16, $r21, $r23, $r24, $r25;
        java.lang.String r3, $r10, $r17, $r26;
        org.apache.commons.configuration.beanutils.ConfigurationDynaBean r1, $r20;
        java.lang.IllegalArgumentException $r5;
        org.apache.commons.configuration.SubsetConfiguration $r18;
        org.apache.commons.logging.Log $r0, $r12, $r22, $r28;
        java.lang.Object $r4, r27;

        r1 := @this: org.apache.commons.configuration.beanutils.ConfigurationDynaBean;

        r3 := @parameter0: java.lang.String;

        $r0 = <org.apache.commons.configuration.beanutils.ConfigurationDynaBean: org.apache.commons.logging.Log log>;

        $z0 = interfaceinvoke $r0.<org.apache.commons.logging.Log: boolean isTraceEnabled()>();

        if $z0 == 0 goto label1;

        $r22 = <org.apache.commons.configuration.beanutils.ConfigurationDynaBean: org.apache.commons.logging.Log log>;

        $r21 = new java.lang.StringBuffer;

        specialinvoke $r21.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("get(");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r22.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r26);

     label1:
        $r2 = virtualinvoke r1.<org.apache.commons.configuration.beanutils.ConfigurationDynaBean: org.apache.commons.configuration.Configuration getConfiguration()>();

        $r4 = interfaceinvoke $r2.<org.apache.commons.configuration.Configuration: java.lang.Object getProperty(java.lang.String)>(r3);

        r27 = $r4;

        if $r4 != null goto label2;

        $r18 = new org.apache.commons.configuration.SubsetConfiguration;

        $r19 = virtualinvoke r1.<org.apache.commons.configuration.beanutils.ConfigurationDynaBean: org.apache.commons.configuration.Configuration getConfiguration()>();

        specialinvoke $r18.<org.apache.commons.configuration.SubsetConfiguration: void <init>(org.apache.commons.configuration.Configuration,java.lang.String,java.lang.String)>($r19, r3, ".");

        $z1 = interfaceinvoke $r18.<org.apache.commons.configuration.Configuration: boolean isEmpty()>();

        if $z1 != 0 goto label2;

        $r20 = new org.apache.commons.configuration.beanutils.ConfigurationDynaBean;

        specialinvoke $r20.<org.apache.commons.configuration.beanutils.ConfigurationDynaBean: void <init>(org.apache.commons.configuration.Configuration)>($r18);

        r27 = $r20;

     label2:
        $r28 = <org.apache.commons.configuration.beanutils.ConfigurationDynaBean: org.apache.commons.logging.Log log>;

        $z2 = interfaceinvoke $r28.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z2 == 0 goto label3;

        $r12 = <org.apache.commons.configuration.beanutils.ConfigurationDynaBean: org.apache.commons.logging.Log log>;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=[");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r27);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r12.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r17);

     label3:
        if r27 != null goto label4;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Property \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' does not exist.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label4:
        return r27;
    }

    public boolean contains(java.lang.String, java.lang.String)
    {
        org.apache.commons.configuration.Configuration $r1, $r3;
        org.apache.commons.configuration.beanutils.ConfigurationDynaBean r0;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuffer $r6, $r7, $r8, $r9;
        java.lang.String r2, r4, $r10;
        boolean $z0;

        r0 := @this: org.apache.commons.configuration.beanutils.ConfigurationDynaBean;

        r2 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<org.apache.commons.configuration.beanutils.ConfigurationDynaBean: org.apache.commons.configuration.Configuration getConfiguration()>();

        $r3 = interfaceinvoke $r1.<org.apache.commons.configuration.Configuration: org.apache.commons.configuration.Configuration subset(java.lang.String)>(r2);

        if $r3 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Mapped property \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' does not exist.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label1:
        $z0 = interfaceinvoke $r3.<org.apache.commons.configuration.Configuration: boolean containsKey(java.lang.String)>(r4);

        return $z0;
    }

    public java.lang.Object get(java.lang.String, int)
    {
        org.apache.commons.configuration.Configuration $r1;
        org.apache.commons.configuration.ConversionException $r11;
        java.lang.StringBuffer $r6, $r7, $r8, $r9, $r13, $r14, $r15, $r16;
        int i0;
        java.lang.String r2, $r10, $r17;
        boolean $z0;
        org.apache.commons.configuration.beanutils.ConfigurationDynaBean r0;
        java.lang.IllegalArgumentException $r5, $r12;
        java.util.List $r3;
        java.lang.Object $r4;

        r0 := @this: org.apache.commons.configuration.beanutils.ConfigurationDynaBean;

        r2 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        $r1 = virtualinvoke r0.<org.apache.commons.configuration.beanutils.ConfigurationDynaBean: org.apache.commons.configuration.Configuration getConfiguration()>();

        $r3 = interfaceinvoke $r1.<org.apache.commons.configuration.Configuration: java.util.List getList(java.lang.String)>(r2);

        $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Indexed property \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' does not exist.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label2:
        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i0);

     label3:
        return $r4;

     label4:
        $r11 := @caughtexception;

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Property \'");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' is not indexed.");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r12;

        catch org.apache.commons.configuration.ConversionException from label1 to label3 with label4;
    }

    public java.lang.Object get(java.lang.String, java.lang.String)
    {
        org.apache.commons.configuration.Configuration $r1, $r3;
        org.apache.commons.configuration.beanutils.ConfigurationDynaBean r0;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuffer $r7, $r8, $r9, $r10;
        java.lang.Object $r5;
        java.lang.String r2, r4, $r11;

        r0 := @this: org.apache.commons.configuration.beanutils.ConfigurationDynaBean;

        r2 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<org.apache.commons.configuration.beanutils.ConfigurationDynaBean: org.apache.commons.configuration.Configuration getConfiguration()>();

        $r3 = interfaceinvoke $r1.<org.apache.commons.configuration.Configuration: org.apache.commons.configuration.Configuration subset(java.lang.String)>(r2);

        if $r3 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Mapped property \'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' does not exist.");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r6;

     label1:
        $r5 = interfaceinvoke $r3.<org.apache.commons.configuration.Configuration: java.lang.Object getProperty(java.lang.String)>(r4);

        return $r5;
    }

    public org.apache.commons.beanutils.DynaClass getDynaClass()
    {
        org.apache.commons.configuration.Configuration $r2;
        org.apache.commons.configuration.beanutils.ConfigurationDynaBean r1;
        org.apache.commons.configuration.beanutils.ConfigurationDynaClass $r0;

        r1 := @this: org.apache.commons.configuration.beanutils.ConfigurationDynaBean;

        $r0 = new org.apache.commons.configuration.beanutils.ConfigurationDynaClass;

        $r2 = virtualinvoke r1.<org.apache.commons.configuration.beanutils.ConfigurationDynaBean: org.apache.commons.configuration.Configuration getConfiguration()>();

        specialinvoke $r0.<org.apache.commons.configuration.beanutils.ConfigurationDynaClass: void <init>(org.apache.commons.configuration.Configuration)>($r2);

        return $r0;
    }

    public void remove(java.lang.String, java.lang.String)
    {
        org.apache.commons.configuration.Configuration $r2;
        org.apache.commons.configuration.beanutils.ConfigurationDynaBean r1;
        org.apache.commons.configuration.SubsetConfiguration $r0;
        java.lang.String r3, r4;

        r1 := @this: org.apache.commons.configuration.beanutils.ConfigurationDynaBean;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        $r0 = new org.apache.commons.configuration.SubsetConfiguration;

        $r2 = virtualinvoke r1.<org.apache.commons.configuration.beanutils.ConfigurationDynaBean: org.apache.commons.configuration.Configuration getConfiguration()>();

        specialinvoke $r0.<org.apache.commons.configuration.SubsetConfiguration: void <init>(org.apache.commons.configuration.Configuration,java.lang.String,java.lang.String)>($r2, r3, ".");

        interfaceinvoke $r0.<org.apache.commons.configuration.Configuration: void setProperty(java.lang.String,java.lang.Object)>(r4, null);

        return;
    }

    public void set(java.lang.String, int, java.lang.Object)
    {
        org.apache.commons.configuration.Configuration $r1, $r11, $r14;
        org.apache.commons.configuration.ConversionException $r21;
        java.lang.StringBuffer $r6, $r7, $r8, $r9, $r16, $r17, $r18, $r19, $r23, $r24, $r25, $r26;
        int i0;
        java.lang.String r2, $r10, $r20, $r27;
        boolean $z0, $z1;
        org.apache.commons.configuration.beanutils.ConfigurationDynaBean r0;
        java.lang.IllegalArgumentException $r5, $r15, $r22;
        java.util.List r13;
        java.lang.Object $r3, r12;
        java.lang.Class $r4;

        r0 := @this: org.apache.commons.configuration.beanutils.ConfigurationDynaBean;

        r2 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r12 := @parameter2: java.lang.Object;

     label1:
        $r1 = virtualinvoke r0.<org.apache.commons.configuration.beanutils.ConfigurationDynaBean: org.apache.commons.configuration.Configuration getConfiguration()>();

        $r3 = interfaceinvoke $r1.<org.apache.commons.configuration.Configuration: java.lang.Object getProperty(java.lang.String)>(r2);

        if $r3 != null goto label2;

        $r15 = new java.lang.IllegalArgumentException;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Property \'");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' does not exist.");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r20);

        throw $r15;

     label2:
        $z0 = $r3 instanceof java.util.List;

        if $z0 == 0 goto label3;

        r13 = (java.util.List) $r3;

        interfaceinvoke r13.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, r12);

        $r14 = virtualinvoke r0.<org.apache.commons.configuration.beanutils.ConfigurationDynaBean: org.apache.commons.configuration.Configuration getConfiguration()>();

        interfaceinvoke $r14.<org.apache.commons.configuration.Configuration: void setProperty(java.lang.String,java.lang.Object)>(r2, r13);

        goto label6;

     label3:
        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = virtualinvoke $r4.<java.lang.Class: boolean isArray()>();

        if $z1 == 0 goto label4;

        staticinvoke <java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>($r3, i0, r12);

        goto label6;

     label4:
        if i0 != 0 goto label5;

        $r11 = virtualinvoke r0.<org.apache.commons.configuration.beanutils.ConfigurationDynaBean: org.apache.commons.configuration.Configuration getConfiguration()>();

        interfaceinvoke $r11.<org.apache.commons.configuration.Configuration: void setProperty(java.lang.String,java.lang.Object)>(r2, r12);

        goto label6;

     label5:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Property \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' is not indexed.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label6:
        goto label8;

     label7:
        $r21 := @caughtexception;

        $r22 = new java.lang.IllegalArgumentException;

        $r23 = new java.lang.StringBuffer;

        specialinvoke $r23.<java.lang.StringBuffer: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Property \'");

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' is not indexed.");

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r27);

        throw $r22;

     label8:
        return;

        catch org.apache.commons.configuration.ConversionException from label1 to label6 with label7;
    }

    public void set(java.lang.String, java.lang.String, java.lang.Object)
    {
        org.apache.commons.configuration.Configuration $r1;
        org.apache.commons.configuration.beanutils.ConfigurationDynaBean r0;
        java.lang.StringBuffer $r2, $r4, $r5, $r7;
        java.lang.Object r9;
        java.lang.String r3, r6, $r8;

        r0 := @this: org.apache.commons.configuration.beanutils.ConfigurationDynaBean;

        r3 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        r9 := @parameter2: java.lang.Object;

        $r1 = virtualinvoke r0.<org.apache.commons.configuration.beanutils.ConfigurationDynaBean: org.apache.commons.configuration.Configuration getConfiguration()>();

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r1.<org.apache.commons.configuration.Configuration: void setProperty(java.lang.String,java.lang.Object)>($r8, r9);

        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r2;
        org.apache.commons.logging.Log $r1;

        <org.apache.commons.configuration.beanutils.ConfigurationDynaBean: java.lang.String PROPERTY_DELIMITER> = ".";

        $r0 = <org.apache.commons.configuration.beanutils.ConfigurationDynaBean: java.lang.Class class$org$apache$commons$configuration$beanutils$ConfigurationDynaBean>;

        if $r0 != null goto label1;

        $r2 = staticinvoke <org.apache.commons.configuration.beanutils.ConfigurationDynaBean: java.lang.Class class$(java.lang.String)>("org.apache.commons.configuration.beanutils.ConfigurationDynaBean");

        <org.apache.commons.configuration.beanutils.ConfigurationDynaBean: java.lang.Class class$org$apache$commons$configuration$beanutils$ConfigurationDynaBean> = $r2;

        goto label2;

     label1:
        $r2 = <org.apache.commons.configuration.beanutils.ConfigurationDynaBean: java.lang.Class class$org$apache$commons$configuration$beanutils$ConfigurationDynaBean>;

     label2:
        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r2);

        <org.apache.commons.configuration.beanutils.ConfigurationDynaBean: org.apache.commons.logging.Log log> = $r1;

        return;
    }
}
