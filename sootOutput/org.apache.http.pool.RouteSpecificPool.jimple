abstract class org.apache.http.pool.RouteSpecificPool extends java.lang.Object
{
    private final java.lang.Object route;
    private final java.util.Set leased;
    private final java.util.LinkedList available;
    private final java.util.LinkedList pending;

    void <init>(java.lang.Object)
    {
        java.util.HashSet $r2;
        org.apache.http.pool.RouteSpecificPool r0;
        java.lang.Object r1;
        java.util.LinkedList $r3, $r4;

        r0 := @this: org.apache.http.pool.RouteSpecificPool;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.http.pool.RouteSpecificPool: java.lang.Object route> = r1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<org.apache.http.pool.RouteSpecificPool: java.util.Set leased> = $r2;

        $r3 = new java.util.LinkedList;

        specialinvoke $r3.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.http.pool.RouteSpecificPool: java.util.LinkedList available> = $r3;

        $r4 = new java.util.LinkedList;

        specialinvoke $r4.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.http.pool.RouteSpecificPool: java.util.LinkedList pending> = $r4;

        return;
    }

    protected abstract org.apache.http.pool.PoolEntry createEntry(java.lang.Object);

    public final java.lang.Object getRoute()
    {
        org.apache.http.pool.RouteSpecificPool r0;
        java.lang.Object $r1;

        r0 := @this: org.apache.http.pool.RouteSpecificPool;

        $r1 = r0.<org.apache.http.pool.RouteSpecificPool: java.lang.Object route>;

        return $r1;
    }

    public int getLeasedCount()
    {
        int $i0;
        org.apache.http.pool.RouteSpecificPool r0;
        java.util.Set $r1;

        r0 := @this: org.apache.http.pool.RouteSpecificPool;

        $r1 = r0.<org.apache.http.pool.RouteSpecificPool: java.util.Set leased>;

        $i0 = interfaceinvoke $r1.<java.util.Set: int size()>();

        return $i0;
    }

    public int getPendingCount()
    {
        int $i0;
        org.apache.http.pool.RouteSpecificPool r0;
        java.util.LinkedList $r1;

        r0 := @this: org.apache.http.pool.RouteSpecificPool;

        $r1 = r0.<org.apache.http.pool.RouteSpecificPool: java.util.LinkedList pending>;

        $i0 = virtualinvoke $r1.<java.util.LinkedList: int size()>();

        return $i0;
    }

    public int getAvailableCount()
    {
        int $i0;
        org.apache.http.pool.RouteSpecificPool r0;
        java.util.LinkedList $r1;

        r0 := @this: org.apache.http.pool.RouteSpecificPool;

        $r1 = r0.<org.apache.http.pool.RouteSpecificPool: java.util.LinkedList available>;

        $i0 = virtualinvoke $r1.<java.util.LinkedList: int size()>();

        return $i0;
    }

    public int getAllocatedCount()
    {
        org.apache.http.pool.RouteSpecificPool r0;
        int $i0, $i1, $i2;
        java.util.Set $r2;
        java.util.LinkedList $r1;

        r0 := @this: org.apache.http.pool.RouteSpecificPool;

        $r1 = r0.<org.apache.http.pool.RouteSpecificPool: java.util.LinkedList available>;

        $i0 = virtualinvoke $r1.<java.util.LinkedList: int size()>();

        $r2 = r0.<org.apache.http.pool.RouteSpecificPool: java.util.Set leased>;

        $i1 = interfaceinvoke $r2.<java.util.Set: int size()>();

        $i2 = $i0 + $i1;

        return $i2;
    }

    public org.apache.http.pool.PoolEntry getFree(java.lang.Object)
    {
        org.apache.http.pool.RouteSpecificPool r0;
        org.apache.http.pool.PoolEntry r13, r14;
        java.util.LinkedList $r1, $r3, $r8;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r4, $r9;
        java.util.Set $r7, $r12;
        java.lang.Object r2, $r5, $r6, $r10, $r11;

        r0 := @this: org.apache.http.pool.RouteSpecificPool;

        r2 := @parameter0: java.lang.Object;

        $r1 = r0.<org.apache.http.pool.RouteSpecificPool: java.util.LinkedList available>;

        $z0 = virtualinvoke $r1.<java.util.LinkedList: boolean isEmpty()>();

        if $z0 != 0 goto label6;

        if r2 == null goto label3;

        $r8 = r0.<org.apache.http.pool.RouteSpecificPool: java.util.LinkedList available>;

        $r9 = virtualinvoke $r8.<java.util.LinkedList: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r13 = (org.apache.http.pool.PoolEntry) $r10;

        $r11 = virtualinvoke r13.<org.apache.http.pool.PoolEntry: java.lang.Object getState()>();

        $z2 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>($r11);

        if $z2 == 0 goto label2;

        interfaceinvoke $r9.<java.util.Iterator: void remove()>();

        $r12 = r0.<org.apache.http.pool.RouteSpecificPool: java.util.Set leased>;

        interfaceinvoke $r12.<java.util.Set: boolean add(java.lang.Object)>(r13);

        return r13;

     label2:
        goto label1;

     label3:
        $r3 = r0.<org.apache.http.pool.RouteSpecificPool: java.util.LinkedList available>;

        $r4 = virtualinvoke $r3.<java.util.LinkedList: java.util.Iterator iterator()>();

     label4:
        $z3 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label6;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r14 = (org.apache.http.pool.PoolEntry) $r5;

        $r6 = virtualinvoke r14.<org.apache.http.pool.PoolEntry: java.lang.Object getState()>();

        if $r6 != null goto label5;

        interfaceinvoke $r4.<java.util.Iterator: void remove()>();

        $r7 = r0.<org.apache.http.pool.RouteSpecificPool: java.util.Set leased>;

        interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>(r14);

        return r14;

     label5:
        goto label4;

     label6:
        return null;
    }

    public org.apache.http.pool.PoolEntry getLastUsed()
    {
        org.apache.http.pool.RouteSpecificPool r0;
        org.apache.http.pool.PoolEntry $r4;
        java.lang.Object $r3;
        java.util.LinkedList $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.http.pool.RouteSpecificPool;

        $r1 = r0.<org.apache.http.pool.RouteSpecificPool: java.util.LinkedList available>;

        $z0 = virtualinvoke $r1.<java.util.LinkedList: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r2 = r0.<org.apache.http.pool.RouteSpecificPool: java.util.LinkedList available>;

        $r3 = virtualinvoke $r2.<java.util.LinkedList: java.lang.Object getLast()>();

        $r4 = (org.apache.http.pool.PoolEntry) $r3;

        return $r4;

     label1:
        return null;
    }

    public boolean remove(org.apache.http.pool.PoolEntry)
    {
        org.apache.http.pool.RouteSpecificPool r1;
        org.apache.http.pool.PoolEntry r0;
        java.util.Set $r3;
        java.util.LinkedList $r2;
        java.lang.IllegalArgumentException $r4;
        boolean $z0, $z1;

        r1 := @this: org.apache.http.pool.RouteSpecificPool;

        r0 := @parameter0: org.apache.http.pool.PoolEntry;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Pool entry may not be null");

        throw $r4;

     label1:
        $r2 = r1.<org.apache.http.pool.RouteSpecificPool: java.util.LinkedList available>;

        $z0 = virtualinvoke $r2.<java.util.LinkedList: boolean remove(java.lang.Object)>(r0);

        if $z0 != 0 goto label2;

        $r3 = r1.<org.apache.http.pool.RouteSpecificPool: java.util.Set leased>;

        $z1 = interfaceinvoke $r3.<java.util.Set: boolean remove(java.lang.Object)>(r0);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        return 1;
    }

    public void free(org.apache.http.pool.PoolEntry, boolean)
    {
        org.apache.http.pool.RouteSpecificPool r1;
        java.lang.IllegalStateException $r4;
        org.apache.http.pool.PoolEntry r0;
        java.util.Set $r2;
        java.lang.IllegalArgumentException $r10;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.String $r9;
        java.util.LinkedList $r3;
        boolean $z0, z1;

        r1 := @this: org.apache.http.pool.RouteSpecificPool;

        r0 := @parameter0: org.apache.http.pool.PoolEntry;

        z1 := @parameter1: boolean;

        if r0 != null goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Pool entry may not be null");

        throw $r10;

     label1:
        $r2 = r1.<org.apache.http.pool.RouteSpecificPool: java.util.Set leased>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>(r0);

        if $z0 != 0 goto label2;

        $r4 = new java.lang.IllegalStateException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Entry ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has not been leased from this pool");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label2:
        if z1 == 0 goto label3;

        $r3 = r1.<org.apache.http.pool.RouteSpecificPool: java.util.LinkedList available>;

        virtualinvoke $r3.<java.util.LinkedList: void addFirst(java.lang.Object)>(r0);

     label3:
        return;
    }

    public org.apache.http.pool.PoolEntry add(java.lang.Object)
    {
        org.apache.http.pool.RouteSpecificPool r0;
        org.apache.http.pool.PoolEntry $r2;
        java.util.Set $r3;
        java.lang.Object r1;

        r0 := @this: org.apache.http.pool.RouteSpecificPool;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.apache.http.pool.RouteSpecificPool: org.apache.http.pool.PoolEntry createEntry(java.lang.Object)>(r1);

        $r3 = r0.<org.apache.http.pool.RouteSpecificPool: java.util.Set leased>;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r2);

        return $r2;
    }

    public void queue(org.apache.http.pool.PoolEntryFuture)
    {
        org.apache.http.pool.PoolEntryFuture r0;
        org.apache.http.pool.RouteSpecificPool r1;
        java.util.LinkedList $r2;

        r1 := @this: org.apache.http.pool.RouteSpecificPool;

        r0 := @parameter0: org.apache.http.pool.PoolEntryFuture;

        if r0 != null goto label1;

        return;

     label1:
        $r2 = r1.<org.apache.http.pool.RouteSpecificPool: java.util.LinkedList pending>;

        virtualinvoke $r2.<java.util.LinkedList: boolean add(java.lang.Object)>(r0);

        return;
    }

    public org.apache.http.pool.PoolEntryFuture nextPending()
    {
        org.apache.http.pool.RouteSpecificPool r0;
        org.apache.http.pool.PoolEntryFuture $r3;
        java.lang.Object $r2;
        java.util.LinkedList $r1;

        r0 := @this: org.apache.http.pool.RouteSpecificPool;

        $r1 = r0.<org.apache.http.pool.RouteSpecificPool: java.util.LinkedList pending>;

        $r2 = virtualinvoke $r1.<java.util.LinkedList: java.lang.Object poll()>();

        $r3 = (org.apache.http.pool.PoolEntryFuture) $r2;

        return $r3;
    }

    public void unqueue(org.apache.http.pool.PoolEntryFuture)
    {
        org.apache.http.pool.PoolEntryFuture r0;
        org.apache.http.pool.RouteSpecificPool r1;
        java.util.LinkedList $r2;

        r1 := @this: org.apache.http.pool.RouteSpecificPool;

        r0 := @parameter0: org.apache.http.pool.PoolEntryFuture;

        if r0 != null goto label1;

        return;

     label1:
        $r2 = r1.<org.apache.http.pool.RouteSpecificPool: java.util.LinkedList pending>;

        virtualinvoke $r2.<java.util.LinkedList: boolean remove(java.lang.Object)>(r0);

        return;
    }

    public void shutdown()
    {
        org.apache.http.pool.RouteSpecificPool r0;
        org.apache.http.pool.PoolEntry r14, r15;
        java.util.LinkedList $r1, $r3, $r4, $r6;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r2, $r5, $r8;
        java.util.Set $r7, $r9;
        org.apache.http.pool.PoolEntryFuture r13;
        java.lang.Object $r10, $r11, $r12;

        r0 := @this: org.apache.http.pool.RouteSpecificPool;

        $r1 = r0.<org.apache.http.pool.RouteSpecificPool: java.util.LinkedList pending>;

        $r2 = virtualinvoke $r1.<java.util.LinkedList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r12 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r13 = (org.apache.http.pool.PoolEntryFuture) $r12;

        virtualinvoke r13.<org.apache.http.pool.PoolEntryFuture: boolean cancel(boolean)>(1);

        goto label1;

     label2:
        $r3 = r0.<org.apache.http.pool.RouteSpecificPool: java.util.LinkedList pending>;

        virtualinvoke $r3.<java.util.LinkedList: void clear()>();

        $r4 = r0.<org.apache.http.pool.RouteSpecificPool: java.util.LinkedList available>;

        $r5 = virtualinvoke $r4.<java.util.LinkedList: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r11 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r14 = (org.apache.http.pool.PoolEntry) $r11;

        virtualinvoke r14.<org.apache.http.pool.PoolEntry: void close()>();

        goto label3;

     label4:
        $r6 = r0.<org.apache.http.pool.RouteSpecificPool: java.util.LinkedList available>;

        virtualinvoke $r6.<java.util.LinkedList: void clear()>();

        $r7 = r0.<org.apache.http.pool.RouteSpecificPool: java.util.Set leased>;

        $r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z2 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r10 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r15 = (org.apache.http.pool.PoolEntry) $r10;

        virtualinvoke r15.<org.apache.http.pool.PoolEntry: void close()>();

        goto label5;

     label6:
        $r9 = r0.<org.apache.http.pool.RouteSpecificPool: java.util.Set leased>;

        interfaceinvoke $r9.<java.util.Set: void clear()>();

        return;
    }

    public java.lang.String toString()
    {
        org.apache.http.pool.RouteSpecificPool r1;
        java.util.Set $r3;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r0;
        java.lang.Object $r2;
        java.lang.String $r6;
        java.util.LinkedList $r4, $r5;

        r1 := @this: org.apache.http.pool.RouteSpecificPool;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[route: ");

        $r2 = r1.<org.apache.http.pool.RouteSpecificPool: java.lang.Object route>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("][leased: ");

        $r3 = r1.<org.apache.http.pool.RouteSpecificPool: java.util.Set leased>;

        $i0 = interfaceinvoke $r3.<java.util.Set: int size()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("][available: ");

        $r4 = r1.<org.apache.http.pool.RouteSpecificPool: java.util.LinkedList available>;

        $i1 = virtualinvoke $r4.<java.util.LinkedList: int size()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("][pending: ");

        $r5 = r1.<org.apache.http.pool.RouteSpecificPool: java.util.LinkedList pending>;

        $i2 = virtualinvoke $r5.<java.util.LinkedList: int size()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r6 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }
}
