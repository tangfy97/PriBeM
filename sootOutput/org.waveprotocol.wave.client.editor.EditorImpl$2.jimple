class org.waveprotocol.wave.client.editor.EditorImpl$2 extends java.lang.Object implements org.waveprotocol.wave.model.operation.SilentOperationSink
{
    final org.waveprotocol.wave.client.editor.EditorImpl this$0;

    void <init>(org.waveprotocol.wave.client.editor.EditorImpl)
    {
        org.waveprotocol.wave.client.editor.EditorImpl$2 r0;
        org.waveprotocol.wave.client.editor.EditorImpl r1;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$2;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.EditorImpl;

        r0.<org.waveprotocol.wave.client.editor.EditorImpl$2: org.waveprotocol.wave.client.editor.EditorImpl this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void consume(org.waveprotocol.wave.model.document.operation.DocOp)
    {
        java.lang.Throwable $r25;
        org.waveprotocol.wave.client.common.util.ClientDebugException $r24;
        org.waveprotocol.wave.client.editor.EditorUndoManager $r8, $r13;
        org.waveprotocol.wave.client.editor.Responsibility$Manager $r6, $r11;
        org.waveprotocol.wave.common.logging.Logger $r20, $r22;
        org.waveprotocol.wave.model.document.operation.DocOp r3;
        org.waveprotocol.wave.client.editor.EditorImpl$2 r0;
        boolean $z0, $z1, $z2;
        org.waveprotocol.wave.client.editor.EditorImpl $r1, $r2, $r5, $r7, $r9, $r10, $r12, $r14, $r17;
        java.lang.Exception $r16;
        org.waveprotocol.wave.common.logging.LoggerBundle $r19, $r21;
        org.waveprotocol.wave.model.operation.SilentOperationSink $r15, $r18;
        java.util.List $r4;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$2;

        r3 := @parameter0: org.waveprotocol.wave.model.document.operation.DocOp;

     label1:
        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$2: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $z0 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: boolean access$500(org.waveprotocol.wave.client.editor.EditorImpl)>($r1);

        if $z0 == 0 goto label2;

        $r14 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$2: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r15 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.operation.SilentOperationSink access$600(org.waveprotocol.wave.client.editor.EditorImpl)>($r14);

        interfaceinvoke $r15.<org.waveprotocol.wave.model.operation.SilentOperationSink: void consume(org.waveprotocol.wave.model.operation.Operation)>(r3);

        goto label3;

     label2:
        $r2 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$2: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r4 = $r2.<org.waveprotocol.wave.client.editor.EditorImpl: java.util.List suppressedOutgoingOps>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r3);

     label3:
        $r5 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$2: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r6 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.Responsibility$Manager access$700(org.waveprotocol.wave.client.editor.EditorImpl)>($r5);

        $z1 = interfaceinvoke $r6.<org.waveprotocol.wave.client.editor.Responsibility$Manager: boolean withinDirectSequence()>();

        if $z1 == 0 goto label4;

        $r12 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$2: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r13 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorUndoManager access$800(org.waveprotocol.wave.client.editor.EditorImpl)>($r12);

        interfaceinvoke $r13.<org.waveprotocol.wave.client.editor.EditorUndoManager: void undoableOp(org.waveprotocol.wave.model.document.operation.DocOp)>(r3);

        goto label5;

     label4:
        $r7 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$2: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r8 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorUndoManager access$800(org.waveprotocol.wave.client.editor.EditorImpl)>($r7);

        interfaceinvoke $r8.<org.waveprotocol.wave.client.editor.EditorUndoManager: void nonUndoableOp(org.waveprotocol.wave.model.document.operation.DocOp)>(r3);

     label5:
        $r10 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$2: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r9 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$2: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r11 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.Responsibility$Manager access$700(org.waveprotocol.wave.client.editor.EditorImpl)>($r9);

        $z2 = interfaceinvoke $r11.<org.waveprotocol.wave.client.editor.Responsibility$Manager: boolean withinDirectSequence()>();

        staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: void access$900(org.waveprotocol.wave.client.editor.EditorImpl,boolean,boolean,boolean,boolean)>($r10, 0, 0, 1, $z2);

     label6:
        goto label9;

     label7:
        $r16 := @caughtexception;

        $r17 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$2: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r18 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.operation.SilentOperationSink access$600(org.waveprotocol.wave.client.editor.EditorImpl)>($r17);

        if $r18 != null goto label8;

        $r21 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r22 = interfaceinvoke $r21.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger fatal()>();

        $r24 = new org.waveprotocol.wave.client.common.util.ClientDebugException;

        specialinvoke $r24.<org.waveprotocol.wave.client.common.util.ClientDebugException: void <init>(java.lang.String,java.lang.Throwable)>("", $r16);

        $r25 = (java.lang.Throwable) $r24;

        interfaceinvoke $r22.<org.waveprotocol.wave.common.logging.Logger: void logPlainText(java.lang.String,java.lang.Throwable)>("Output sink is null", $r25);

        goto label9;

     label8:
        $r19 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r20 = interfaceinvoke $r19.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger fatal()>();

        interfaceinvoke $r20.<org.waveprotocol.wave.common.logging.Logger: void logPlainText(java.lang.String,java.lang.Throwable)>("Output sink threw exception", $r16);

     label9:
        return;

        catch java.lang.Exception from label1 to label6 with label7;
    }

    public volatile void consume(org.waveprotocol.wave.model.operation.Operation)
    {
        org.waveprotocol.wave.model.operation.Operation r1;
        org.waveprotocol.wave.model.document.operation.DocOp $r2;
        org.waveprotocol.wave.client.editor.EditorImpl$2 r0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$2;

        r1 := @parameter0: org.waveprotocol.wave.model.operation.Operation;

        $r2 = (org.waveprotocol.wave.model.document.operation.DocOp) r1;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl$2: void consume(org.waveprotocol.wave.model.document.operation.DocOp)>($r2);

        return;
    }
}
