public class com.hp.hpl.jena.sparql.util.Utils extends java.lang.Object
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.util.Utils r0;

        r0 := @this: com.hp.hpl.jena.sparql.util.Utils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String className(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.Class $r1;
        java.lang.String $r2;

        r0 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.Utils: java.lang.String classShortName(java.lang.Class)>($r1);

        return $r2;
    }

    public static java.lang.String classShortName(java.lang.Class)
    {
        int $i0, $i1;
        java.lang.Class r0;
        java.lang.String $r1, $r2;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int lastIndexOf(int)>(46);

        $i1 = $i0 + 1;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i1);

        return $r2;
    }

    public static java.lang.String nowAsXSDDateTimeString()
    {
        java.lang.String $r1;
        java.util.GregorianCalendar $r0;

        $r0 = new java.util.GregorianCalendar;

        specialinvoke $r0.<java.util.GregorianCalendar: void <init>()>();

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.Utils: java.lang.String calendarToXSDDateTimeString(java.util.Calendar)>($r0);

        return $r1;
    }

    public static java.lang.String todayAsXSDDateString()
    {
        java.lang.String $r1;
        java.util.GregorianCalendar $r0;

        $r0 = new java.util.GregorianCalendar;

        specialinvoke $r0.<java.util.GregorianCalendar: void <init>()>();

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.Utils: java.lang.String calendarToXSDDateString(java.util.Calendar)>($r0);

        return $r1;
    }

    public static java.lang.String XSDDateTime2String(com.hp.hpl.jena.datatypes.xsd.XSDDateTime)
    {
        java.lang.String $r1;
        com.hp.hpl.jena.datatypes.xsd.XSDDateTime r0;

        r0 := @parameter0: com.hp.hpl.jena.datatypes.xsd.XSDDateTime;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: java.lang.String toString()>();

        return $r1;
    }

    public static java.lang.String nowAsString()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.util.Utils: java.lang.String nowAsString(java.lang.String)>("yyyy/MM/dd HH:mm:ss z");

        return $r0;
    }

    public static java.lang.String nowAsString(java.lang.String)
    {
        java.util.Date $r2;
        java.text.SimpleDateFormat $r0;
        java.lang.String r1, $r3;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.text.SimpleDateFormat;

        specialinvoke $r0.<java.text.SimpleDateFormat: void <init>(java.lang.String)>(r1);

        $r2 = new java.util.Date;

        specialinvoke $r2.<java.util.Date: void <init>()>();

        $r3 = virtualinvoke $r0.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r2);

        return $r3;
    }

    public static java.lang.String calendarToXSDDateTimeString(java.util.Calendar)
    {
        java.util.Calendar r0;
        java.lang.String $r1;

        r0 := @parameter0: java.util.Calendar;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.Utils: java.lang.String calendarToXSDString(java.util.Calendar,java.lang.String)>(r0, "yyyy-MM-dd\'T\'HH:mm:ss.SSS");

        return $r1;
    }

    public static java.lang.String calendarToXSDDateString(java.util.Calendar)
    {
        java.util.Calendar r0;
        java.lang.String $r1;

        r0 := @parameter0: java.util.Calendar;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.Utils: java.lang.String calendarToXSDString(java.util.Calendar,java.lang.String)>(r0, "yyyy-MM-dd");

        return $r1;
    }

    public static java.lang.String calendarToXSDTimeString(java.util.Calendar)
    {
        java.util.Calendar r0;
        java.lang.String $r1;

        r0 := @parameter0: java.util.Calendar;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.Utils: java.lang.String calendarToXSDString(java.util.Calendar,java.lang.String)>(r0, "HH:mm:ss.SSS");

        return $r1;
    }

    private static java.lang.String calendarToXSDString(java.util.Calendar, java.lang.String)
    {
        java.util.Date $r3;
        java.text.SimpleDateFormat $r0;
        java.util.Calendar r2;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.lang.String r1, $r4, $r7, $r9;

        r2 := @parameter0: java.util.Calendar;

        r1 := @parameter1: java.lang.String;

        $r0 = new java.text.SimpleDateFormat;

        specialinvoke $r0.<java.text.SimpleDateFormat: void <init>(java.lang.String)>(r1);

        $r3 = virtualinvoke r2.<java.util.Calendar: java.util.Date getTime()>();

        $r4 = virtualinvoke $r0.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r3);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.util.Utils: java.lang.String calcTimezone(java.util.Calendar)>(r2);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    private static java.lang.String calcTimezone(java.util.Calendar)
    {
        java.util.Date $r1;
        java.util.Calendar r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, $i10;
        java.lang.String $r3, $r4, $r10, r17, r18, r19;
        boolean $z0;
        java.util.TimeZone $r2;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r12, $r13, $r15, $r16, $r20, $r21, $r22;

        r0 := @parameter0: java.util.Calendar;

        $r1 = virtualinvoke r0.<java.util.Calendar: java.util.Date getTime()>();

        $r2 = virtualinvoke r0.<java.util.Calendar: java.util.TimeZone getTimeZone()>();

        $i0 = virtualinvoke $r2.<java.util.TimeZone: int getRawOffset()>();

        i8 = $i0;

        $z0 = virtualinvoke $r2.<java.util.TimeZone: boolean inDaylightTime(java.util.Date)>($r1);

        if $z0 == 0 goto label1;

        $i7 = virtualinvoke $r2.<java.util.TimeZone: int getDSTSavings()>();

        i8 = $i0 + $i7;

     label1:
        r17 = "+";

        if i8 >= 0 goto label2;

        r17 = "-";

        i8 = neg i8;

     label2:
        $i5 = i8 / 3600000;

        $i1 = $i5 * 60;

        $i2 = $i1 * 60;

        $i3 = $i2 * 1000;

        $i4 = i8 - $i3;

        $i10 = (int) 60000;

        $i6 = $i4 / $i10;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i5);

        r18 = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i6);

        r19 = $r4;

        if $i5 >= 10 goto label3;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        if $i6 >= 10 goto label4;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        r19 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    public static java.lang.String stringForm(java.math.BigDecimal)
    {
        java.math.BigDecimal r0;
        java.lang.String $r1;

        r0 := @parameter0: java.math.BigDecimal;

        $r1 = virtualinvoke r0.<java.math.BigDecimal: java.lang.String toPlainString()>();

        return $r1;
    }

    public static java.lang.String stringForm(double)
    {
        byte $b2;
        int $i0, $i1, $i3, $i5, $i7;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.String $r0, $r4;
        double d0;
        boolean $z0, $z1;

        d0 := @parameter0: double;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z0 == 0 goto label2;

        $b2 = d0 cmpg 0.0;

        $i3 = (int) $b2;

        if $i3 >= 0 goto label1;

        return "-INF";

     label1:
        return "INF";

     label2:
        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z1 == 0 goto label3;

        return "NaN";

     label3:
        $r0 = staticinvoke <java.lang.Double: java.lang.String toString(double)>(d0);

        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>(101);

        $i5 = (int) -1;

        if $i0 != $i5 goto label4;

        $i1 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>(69);

        $i7 = (int) -1;

        if $i1 == $i7 goto label5;

     label4:
        return $r0;

     label5:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("e0");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public static java.lang.String stringForm(float)
    {
        float f0;
        java.lang.String $r0;

        f0 := @parameter0: float;

        $r0 = staticinvoke <java.lang.Float: java.lang.String toString(float)>(f0);

        return $r0;
    }
}
