public class org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator extends java.lang.Object implements java.util.Enumeration
{
    int cur;
    java.lang.String curkey;
    java.util.Stack ns;
    java.lang.StringBuilder ks;
    final org.apache.lucene.analysis.compound.hyphenation.TernaryTree this$0;

    public void <init>(org.apache.lucene.analysis.compound.hyphenation.TernaryTree)
    {
        org.apache.lucene.analysis.compound.hyphenation.TernaryTree r1;
        org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator r0;
        int $i1;
        java.lang.StringBuilder $r5;
        java.util.Stack $r4;

        r0 := @this: org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator;

        r1 := @parameter0: org.apache.lucene.analysis.compound.hyphenation.TernaryTree;

        r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: org.apache.lucene.analysis.compound.hyphenation.TernaryTree this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = (int) -1;

        r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: int cur> = $i1;

        $r4 = new java.util.Stack;

        specialinvoke $r4.<java.util.Stack: void <init>()>();

        r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: java.util.Stack ns> = $r4;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: java.lang.StringBuilder ks> = $r5;

        virtualinvoke r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: void rewind()>();

        return;
    }

    public void rewind()
    {
        org.apache.lucene.analysis.compound.hyphenation.TernaryTree $r3;
        org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator r0;
        int $i1;
        java.lang.StringBuilder $r2;
        char $c0;
        java.util.Stack $r1;

        r0 := @this: org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator;

        $r1 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: java.util.Stack ns>;

        virtualinvoke $r1.<java.util.Stack: void removeAllElements()>();

        $r2 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: java.lang.StringBuilder ks>;

        virtualinvoke $r2.<java.lang.StringBuilder: void setLength(int)>(0);

        $r3 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: org.apache.lucene.analysis.compound.hyphenation.TernaryTree this$0>;

        $c0 = $r3.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char root>;

        $i1 = (int) $c0;

        r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: int cur> = $i1;

        specialinvoke r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: int run()>();

        return;
    }

    public java.lang.String nextElement()
    {
        org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator r1;
        int $i0;
        java.lang.String $r0, $r2;

        r1 := @this: org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator;

        $r0 = new java.lang.String;

        $r2 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: java.lang.String curkey>;

        specialinvoke $r0.<java.lang.String: void <init>(java.lang.String)>($r2);

        $i0 = specialinvoke r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: int up()>();

        r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: int cur> = $i0;

        specialinvoke r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: int run()>();

        return $r0;
    }

    public char getValue()
    {
        org.apache.lucene.analysis.compound.hyphenation.TernaryTree $r1;
        org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator r0;
        int $i0, $i1;
        char[] $r2;
        char $c2;

        r0 := @this: org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator;

        $i0 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: int cur>;

        if $i0 < 0 goto label1;

        $r1 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: org.apache.lucene.analysis.compound.hyphenation.TernaryTree this$0>;

        $r2 = $r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] eq>;

        $i1 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: int cur>;

        $c2 = $r2[$i1];

        return $c2;

     label1:
        return 0;
    }

    public boolean hasMoreElements()
    {
        org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator r0;
        int $i0, $i2;
        boolean $z0;

        r0 := @this: org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator;

        $i0 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: int cur>;

        $i2 = (int) -1;

        if $i0 == $i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private int up()
    {
        java.lang.StringBuilder $r9, $r10, $r11, $r24;
        org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator r1;
        org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator$Item $r8, $r15, $r21, r30, $r31;
        char[] $r6, $r13, $r17, $r19, $r23, $r27, $r29;
        boolean $z0, $z1, z2;
        org.apache.lucene.analysis.compound.hyphenation.TernaryTree $r5, $r12, $r16, $r18, $r22, $r26, $r28;
        java.util.Stack $r2, $r3, $r7, $r14, $r20, $r25;
        int $i0, $i2, $i6, $i7, $i8, $i12, $i18, $i20, i22, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i35;
        char $c1, $c3, $c4, $c5, $c9, $c10, $c11, $c13, $c14, $c15, $c16, $c17, $c19, $c21;
        java.lang.Object $r4;

        r1 := @this: org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator;

        $r31 = new org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator$Item;

        specialinvoke $r31.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator$Item: void <init>(org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator)>(r1);

        i22 = 0;

        $r2 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: java.util.Stack ns>;

        $z0 = virtualinvoke $r2.<java.util.Stack: boolean empty()>();

        if $z0 == 0 goto label01;

        $i24 = (int) -1;

        return $i24;

     label01:
        $i0 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: int cur>;

        if $i0 == 0 goto label02;

        $r26 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: org.apache.lucene.analysis.compound.hyphenation.TernaryTree this$0>;

        $r27 = $r26.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] sc>;

        $i18 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: int cur>;

        $c19 = $r27[$i18];

        if $c19 != 0 goto label02;

        $r28 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: org.apache.lucene.analysis.compound.hyphenation.TernaryTree this$0>;

        $r29 = $r28.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] lo>;

        $i20 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: int cur>;

        $c21 = $r29[$i20];

        $i25 = (int) $c21;

        return $i25;

     label02:
        z2 = 1;

     label03:
        if z2 == 0 goto label11;

        $r3 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: java.util.Stack ns>;

        $r4 = virtualinvoke $r3.<java.util.Stack: java.lang.Object pop()>();

        r30 = (org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator$Item) $r4;

        $c1 = r30.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator$Item: char child>;

        $i26 = (int) $c1;

        $i2 = $i26 + 1;

        $c3 = (char) $i2;

        r30.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator$Item: char child> = $c3;

        $c4 = r30.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator$Item: char child>;

        $i27 = (int) $c4;

        lookupswitch($i27)
        {
            case 1: goto label04;
            case 2: goto label07;
            default: goto label09;
        };

     label04:
        $r12 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: org.apache.lucene.analysis.compound.hyphenation.TernaryTree this$0>;

        $r13 = $r12.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] sc>;

        $c9 = r30.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator$Item: char parent>;

        $i28 = (int) $c9;

        $c10 = $r13[$i28];

        if $c10 == 0 goto label05;

        $r18 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: org.apache.lucene.analysis.compound.hyphenation.TernaryTree this$0>;

        $r19 = $r18.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] eq>;

        $c15 = r30.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator$Item: char parent>;

        $i29 = (int) $c15;

        i22 = $r19[$i29];

        $r20 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: java.util.Stack ns>;

        $r21 = virtualinvoke r30.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator$Item: org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator$Item clone()>();

        virtualinvoke $r20.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r21);

        $r24 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: java.lang.StringBuilder ks>;

        $r22 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: org.apache.lucene.analysis.compound.hyphenation.TernaryTree this$0>;

        $r23 = $r22.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] sc>;

        $c16 = r30.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator$Item: char parent>;

        $i30 = (int) $c16;

        $c17 = $r23[$i30];

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c17);

        goto label06;

     label05:
        $c11 = r30.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator$Item: char child>;

        $i31 = (int) $c11;

        $i12 = $i31 + 1;

        $c13 = (char) $i12;

        r30.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator$Item: char child> = $c13;

        $r14 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: java.util.Stack ns>;

        $r15 = virtualinvoke r30.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator$Item: org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator$Item clone()>();

        virtualinvoke $r14.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r15);

        $r16 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: org.apache.lucene.analysis.compound.hyphenation.TernaryTree this$0>;

        $r17 = $r16.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] hi>;

        $c14 = r30.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator$Item: char parent>;

        $i32 = (int) $c14;

        i22 = $r17[$i32];

     label06:
        z2 = 0;

        goto label03;

     label07:
        $r5 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: org.apache.lucene.analysis.compound.hyphenation.TernaryTree this$0>;

        $r6 = $r5.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] hi>;

        $c5 = r30.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator$Item: char parent>;

        $i33 = (int) $c5;

        i22 = $r6[$i33];

        $r7 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: java.util.Stack ns>;

        $r8 = virtualinvoke r30.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator$Item: org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator$Item clone()>();

        virtualinvoke $r7.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r8);

        $r9 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: java.lang.StringBuilder ks>;

        $i6 = virtualinvoke $r9.<java.lang.StringBuilder: int length()>();

        if $i6 <= 0 goto label08;

        $r11 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: java.lang.StringBuilder ks>;

        $r10 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: java.lang.StringBuilder ks>;

        $i7 = virtualinvoke $r10.<java.lang.StringBuilder: int length()>();

        $i8 = $i7 - 1;

        virtualinvoke $r11.<java.lang.StringBuilder: void setLength(int)>($i8);

     label08:
        z2 = 0;

        goto label03;

     label09:
        $r25 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: java.util.Stack ns>;

        $z1 = virtualinvoke $r25.<java.util.Stack: boolean empty()>();

        if $z1 == 0 goto label10;

        $i35 = (int) -1;

        return $i35;

     label10:
        z2 = 1;

        goto label03;

     label11:
        return i22;
    }

    private int run()
    {
        boolean z0;
        org.apache.lucene.analysis.compound.hyphenation.CharVector $r10, $r12;
        org.apache.lucene.analysis.compound.hyphenation.TernaryTree $r4, $r7, $r9, $r11, $r13, $r17, $r19;
        java.lang.StringBuilder $r2, $r22;
        org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator r0;
        java.util.Stack $r16;
        org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator$Item $r21;
        int $i0, $i1, $i2, $i3, $i5, $i7, $i9, $i11, $i13, $i15, $i17, i18, $i20, $i22, $i23, $i25, $i26, $i28, $i30, $i31, $i33;
        java.lang.String $r3, $r6;
        char $c4, $c6, $c8, $c10, $c12, $c14, $c16;
        char[] $r5, $r8, $r14, $r18, $r20;

        r0 := @this: org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator;

        $i0 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: int cur>;

        $i20 = (int) -1;

        if $i0 != $i20 goto label1;

        $i22 = (int) -1;

        return $i22;

     label1:
        z0 = 0;

     label2:
        $i17 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: int cur>;

        if $i17 == 0 goto label5;

        $r13 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: org.apache.lucene.analysis.compound.hyphenation.TernaryTree this$0>;

        $r14 = $r13.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] sc>;

        $i9 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: int cur>;

        $c10 = $r14[$i9];

        $i23 = (int) $c10;

        $i25 = (int) 65535;

        if $i23 != $i25 goto label3;

        z0 = 1;

        goto label5;

     label3:
        $r16 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: java.util.Stack ns>;

        $r21 = new org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator$Item;

        $i11 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: int cur>;

        $c12 = (char) $i11;

        specialinvoke $r21.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator$Item: void <init>(org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator,char,char)>(r0, $c12, 0);

        virtualinvoke $r16.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r21);

        $r17 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: org.apache.lucene.analysis.compound.hyphenation.TernaryTree this$0>;

        $r18 = $r17.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] sc>;

        $i13 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: int cur>;

        $c14 = $r18[$i13];

        if $c14 != 0 goto label4;

        z0 = 1;

        goto label5;

     label4:
        $r19 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: org.apache.lucene.analysis.compound.hyphenation.TernaryTree this$0>;

        $r20 = $r19.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] lo>;

        $i15 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: int cur>;

        $c16 = $r20[$i15];

        $i26 = (int) $c16;

        r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: int cur> = $i26;

        goto label2;

     label5:
        if z0 == 0 goto label6;

        goto label7;

     label6:
        $i1 = specialinvoke r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: int up()>();

        r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: int cur> = $i1;

        $i2 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: int cur>;

        $i28 = (int) -1;

        if $i2 != $i28 goto label2;

        $i30 = (int) -1;

        return $i30;

     label7:
        $r22 = new java.lang.StringBuilder;

        $r2 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: java.lang.StringBuilder ks>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3);

        $r4 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: org.apache.lucene.analysis.compound.hyphenation.TernaryTree this$0>;

        $r5 = $r4.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] sc>;

        $i3 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: int cur>;

        $c4 = $r5[$i3];

        $i31 = (int) $c4;

        $i33 = (int) 65535;

        if $i31 != $i33 goto label9;

        $r7 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: org.apache.lucene.analysis.compound.hyphenation.TernaryTree this$0>;

        $r8 = $r7.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] lo>;

        $i5 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: int cur>;

        i18 = $r8[$i5];

     label8:
        $r9 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: org.apache.lucene.analysis.compound.hyphenation.TernaryTree this$0>;

        $r10 = $r9.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: org.apache.lucene.analysis.compound.hyphenation.CharVector kv>;

        $c6 = virtualinvoke $r10.<org.apache.lucene.analysis.compound.hyphenation.CharVector: char get(int)>(i18);

        if $c6 == 0 goto label9;

        $r11 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: org.apache.lucene.analysis.compound.hyphenation.TernaryTree this$0>;

        $r12 = $r11.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: org.apache.lucene.analysis.compound.hyphenation.CharVector kv>;

        $i7 = i18;

        i18 = i18 + 1;

        $c8 = virtualinvoke $r12.<org.apache.lucene.analysis.compound.hyphenation.CharVector: char get(int)>($i7);

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c8);

        goto label8;

     label9:
        $r6 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: java.lang.String curkey> = $r6;

        return 0;
    }

    public volatile java.lang.Object nextElement()
    {
        org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator r0;
        java.lang.String $r1;

        r0 := @this: org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator;

        $r1 = virtualinvoke r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: java.lang.String nextElement()>();

        return $r1;
    }
}
