class org.tukaani.xz.DeltaDecoder extends org.tukaani.xz.DeltaCoder implements org.tukaani.xz.FilterDecoder
{
    private final int distance;

    void <init>(byte[]) throws org.tukaani.xz.UnsupportedOptionsException
    {
        byte[] r1;
        short $s2, $s4;
        org.tukaani.xz.UnsupportedOptionsException $r3;
        org.tukaani.xz.DeltaDecoder r0;
        byte $b1;
        int $i0, $i3, $i5;

        r0 := @this: org.tukaani.xz.DeltaDecoder;

        r1 := @parameter0: byte[];

        specialinvoke r0.<org.tukaani.xz.DeltaCoder: void <init>()>();

        $i0 = lengthof r1;

        if $i0 == 1 goto label1;

        $r3 = new org.tukaani.xz.UnsupportedOptionsException;

        specialinvoke $r3.<org.tukaani.xz.UnsupportedOptionsException: void <init>(java.lang.String)>("Unsupported Delta filter properties");

        throw $r3;

     label1:
        $b1 = r1[0];

        $s4 = (short) $b1;

        $s2 = $s4 & 255;

        $i5 = (int) $s2;

        $i3 = $i5 + 1;

        r0.<org.tukaani.xz.DeltaDecoder: int distance> = $i3;

        return;
    }

    public int getMemoryUsage()
    {
        org.tukaani.xz.DeltaDecoder r0;

        r0 := @this: org.tukaani.xz.DeltaDecoder;

        return 1;
    }

    public java.io.InputStream getInputStream(java.io.InputStream)
    {
        org.tukaani.xz.DeltaDecoder r2;
        int $i0;
        org.tukaani.xz.DeltaInputStream $r0;
        java.io.InputStream r1;

        r2 := @this: org.tukaani.xz.DeltaDecoder;

        r1 := @parameter0: java.io.InputStream;

        $r0 = new org.tukaani.xz.DeltaInputStream;

        $i0 = r2.<org.tukaani.xz.DeltaDecoder: int distance>;

        specialinvoke $r0.<org.tukaani.xz.DeltaInputStream: void <init>(java.io.InputStream,int)>(r1, $i0);

        return $r0;
    }
}
