public class ucar.ma2.IndexConstant extends ucar.ma2.Index
{

    protected void <init>(int)
    {
        int i0;
        ucar.ma2.IndexConstant r0;

        r0 := @this: ucar.ma2.IndexConstant;

        i0 := @parameter0: int;

        specialinvoke r0.<ucar.ma2.Index: void <init>(int)>(i0);

        return;
    }

    protected void <init>(int[])
    {
        ucar.ma2.IndexConstant r0;
        int[] r1;

        r0 := @this: ucar.ma2.IndexConstant;

        r1 := @parameter0: int[];

        specialinvoke r0.<ucar.ma2.Index: void <init>(int[])>(r1);

        return;
    }

    protected void <init>(int[], int[])
    {
        ucar.ma2.IndexConstant r0;
        int[] r1, r2;

        r0 := @this: ucar.ma2.IndexConstant;

        r1 := @parameter0: int[];

        r2 := @parameter1: int[];

        specialinvoke r0.<ucar.ma2.Index: void <init>(int[],int[])>(r1, r2);

        return;
    }

    public int currentElement()
    {
        ucar.ma2.IndexConstant r0;

        r0 := @this: ucar.ma2.IndexConstant;

        return 0;
    }

    ucar.ma2.Index flip(int)
    {
        int i0;
        ucar.ma2.IndexConstant r0;

        r0 := @this: ucar.ma2.IndexConstant;

        i0 := @parameter0: int;

        return r0;
    }

    ucar.ma2.Index sectionNoReduce(java.util.List) throws ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Section $r0, $r3, $r5;
        ucar.ma2.IndexConstant r1, $r6;
        java.util.List r4;
        int[] $r2, $r7;

        r1 := @this: ucar.ma2.IndexConstant;

        r4 := @parameter0: java.util.List;

        $r0 = new ucar.ma2.Section;

        $r2 = r1.<ucar.ma2.IndexConstant: int[] shape>;

        specialinvoke $r0.<ucar.ma2.Section: void <init>(int[])>($r2);

        $r3 = new ucar.ma2.Section;

        specialinvoke $r3.<ucar.ma2.Section: void <init>(java.util.List)>(r4);

        $r5 = virtualinvoke $r0.<ucar.ma2.Section: ucar.ma2.Section compose(ucar.ma2.Section)>($r3);

        $r6 = new ucar.ma2.IndexConstant;

        $r7 = virtualinvoke $r5.<ucar.ma2.Section: int[] getShape()>();

        specialinvoke $r6.<ucar.ma2.IndexConstant: void <init>(int[])>($r7);

        return $r6;
    }

    ucar.ma2.Index section(java.util.List) throws ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Section $r0, $r3, $r5, $r6;
        ucar.ma2.IndexConstant r1, $r7;
        java.util.List r4;
        int[] $r2, $r8;

        r1 := @this: ucar.ma2.IndexConstant;

        r4 := @parameter0: java.util.List;

        $r0 = new ucar.ma2.Section;

        $r2 = r1.<ucar.ma2.IndexConstant: int[] shape>;

        specialinvoke $r0.<ucar.ma2.Section: void <init>(int[])>($r2);

        $r3 = new ucar.ma2.Section;

        specialinvoke $r3.<ucar.ma2.Section: void <init>(java.util.List)>(r4);

        $r5 = virtualinvoke $r0.<ucar.ma2.Section: ucar.ma2.Section compose(ucar.ma2.Section)>($r3);

        $r6 = virtualinvoke $r5.<ucar.ma2.Section: ucar.ma2.Section reduce()>();

        $r7 = new ucar.ma2.IndexConstant;

        $r8 = virtualinvoke $r6.<ucar.ma2.Section: int[] getShape()>();

        specialinvoke $r7.<ucar.ma2.IndexConstant: void <init>(int[])>($r8);

        return $r7;
    }

    ucar.ma2.Index reduce()
    {
        ucar.ma2.Section $r0, $r3;
        ucar.ma2.IndexConstant r1, $r4;
        int[] $r2, $r5;

        r1 := @this: ucar.ma2.IndexConstant;

        $r0 = new ucar.ma2.Section;

        $r2 = r1.<ucar.ma2.IndexConstant: int[] shape>;

        specialinvoke $r0.<ucar.ma2.Section: void <init>(int[])>($r2);

        $r3 = virtualinvoke $r0.<ucar.ma2.Section: ucar.ma2.Section reduce()>();

        $r4 = new ucar.ma2.IndexConstant;

        $r5 = virtualinvoke $r3.<ucar.ma2.Section: int[] getShape()>();

        specialinvoke $r4.<ucar.ma2.IndexConstant: void <init>(int[])>($r5);

        return $r4;
    }

    ucar.ma2.Index reduce(int)
    {
        ucar.ma2.Section $r7, $r9;
        int[] $r6, $r8, $r11;
        int i0, $i1, $i2;
        java.lang.String $r4, $r17;
        ucar.ma2.IndexConstant r5, $r10;
        java.lang.IllegalArgumentException $r0, $r12;
        java.lang.StringBuilder $r1, $r2, $r3, $r13, $r14, $r15, $r16;

        r5 := @this: ucar.ma2.IndexConstant;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i1 = r5.<ucar.ma2.IndexConstant: int rank>;

        if i0 < $i1 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("illegal reduce dim ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r0;

     label2:
        $r6 = r5.<ucar.ma2.IndexConstant: int[] shape>;

        $i2 = $r6[i0];

        if $i2 == 1 goto label3;

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("illegal reduce dim ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : length != 1");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r12;

     label3:
        $r7 = new ucar.ma2.Section;

        $r8 = r5.<ucar.ma2.IndexConstant: int[] shape>;

        specialinvoke $r7.<ucar.ma2.Section: void <init>(int[])>($r8);

        $r9 = virtualinvoke $r7.<ucar.ma2.Section: ucar.ma2.Section removeRange(int)>(i0);

        $r10 = new ucar.ma2.IndexConstant;

        $r11 = virtualinvoke $r9.<ucar.ma2.Section: int[] getShape()>();

        specialinvoke $r10.<ucar.ma2.IndexConstant: void <init>(int[])>($r11);

        return $r10;
    }

    ucar.ma2.Index transpose(int, int)
    {
        int i0, i1;
        ucar.ma2.IndexConstant r0;

        r0 := @this: ucar.ma2.IndexConstant;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        return r0;
    }

    ucar.ma2.Index permute(int[])
    {
        ucar.ma2.IndexConstant r0;
        int[] r1;

        r0 := @this: ucar.ma2.IndexConstant;

        r1 := @parameter0: int[];

        return r0;
    }

    ucar.ma2.IndexIterator getIndexIterator(ucar.ma2.Array)
    {
        ucar.ma2.IndexConstant r1;
        ucar.ma2.IndexConstant$IteratorConstant $r0;
        long $l0;
        ucar.ma2.Array r2;

        r1 := @this: ucar.ma2.IndexConstant;

        r2 := @parameter0: ucar.ma2.Array;

        $r0 = new ucar.ma2.IndexConstant$IteratorConstant;

        $l0 = r1.<ucar.ma2.IndexConstant: long size>;

        specialinvoke $r0.<ucar.ma2.IndexConstant$IteratorConstant: void <init>(ucar.ma2.IndexConstant,long,ucar.ma2.Array)>(r1, $l0, r2);

        return $r0;
    }
}
