final class org.apache.lucene.analysis.util.AnalysisSPILoader extends java.lang.Object
{
    private volatile java.util.Map services;
    private final java.lang.Class clazz;
    private final java.lang.String[] suffixes;

    public void <init>(java.lang.Class)
    {
        org.apache.lucene.analysis.util.AnalysisSPILoader r0;
        java.lang.Class r1;
        java.lang.String[] $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.lucene.analysis.util.AnalysisSPILoader;

        r1 := @parameter0: java.lang.Class;

        $r2 = newarray (java.lang.String)[1];

        $r3 = virtualinvoke r1.<java.lang.Class: java.lang.String getSimpleName()>();

        $r2[0] = $r3;

        specialinvoke r0.<org.apache.lucene.analysis.util.AnalysisSPILoader: void <init>(java.lang.Class,java.lang.String[])>(r1, $r2);

        return;
    }

    public void <init>(java.lang.Class, java.lang.ClassLoader)
    {
        org.apache.lucene.analysis.util.AnalysisSPILoader r0;
        java.lang.Class r1;
        java.lang.String[] $r2;
        java.lang.String $r3;
        java.lang.ClassLoader r4;

        r0 := @this: org.apache.lucene.analysis.util.AnalysisSPILoader;

        r1 := @parameter0: java.lang.Class;

        r4 := @parameter1: java.lang.ClassLoader;

        $r2 = newarray (java.lang.String)[1];

        $r3 = virtualinvoke r1.<java.lang.Class: java.lang.String getSimpleName()>();

        $r2[0] = $r3;

        specialinvoke r0.<org.apache.lucene.analysis.util.AnalysisSPILoader: void <init>(java.lang.Class,java.lang.String[],java.lang.ClassLoader)>(r1, $r2, r4);

        return;
    }

    public void <init>(java.lang.Class, java.lang.String[])
    {
        org.apache.lucene.analysis.util.AnalysisSPILoader r0;
        java.lang.Thread $r3;
        java.lang.Class r1;
        java.lang.String[] r2;
        java.lang.ClassLoader $r4;

        r0 := @this: org.apache.lucene.analysis.util.AnalysisSPILoader;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String[];

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r4 = virtualinvoke $r3.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        specialinvoke r0.<org.apache.lucene.analysis.util.AnalysisSPILoader: void <init>(java.lang.Class,java.lang.String[],java.lang.ClassLoader)>(r1, r2, $r4);

        return;
    }

    public void <init>(java.lang.Class, java.lang.String[], java.lang.ClassLoader)
    {
        org.apache.lucene.analysis.util.AnalysisSPILoader r0;
        java.util.Map $r1;
        java.lang.Class r2;
        java.lang.String[] r3;
        java.lang.ClassLoader $r4, r5;
        boolean $z0;

        r0 := @this: org.apache.lucene.analysis.util.AnalysisSPILoader;

        r2 := @parameter0: java.lang.Class;

        r3 := @parameter1: java.lang.String[];

        r5 := @parameter2: java.lang.ClassLoader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        r0.<org.apache.lucene.analysis.util.AnalysisSPILoader: java.util.Map services> = $r1;

        r0.<org.apache.lucene.analysis.util.AnalysisSPILoader: java.lang.Class clazz> = r2;

        r0.<org.apache.lucene.analysis.util.AnalysisSPILoader: java.lang.String[] suffixes> = r3;

        $r4 = virtualinvoke r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        if $r4 == null goto label1;

        $z0 = staticinvoke <org.apache.lucene.util.SPIClassIterator: boolean isParentClassLoader(java.lang.ClassLoader,java.lang.ClassLoader)>($r4, r5);

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.apache.lucene.analysis.util.AnalysisSPILoader: void reload(java.lang.ClassLoader)>($r4);

     label1:
        virtualinvoke r0.<org.apache.lucene.analysis.util.AnalysisSPILoader: void reload(java.lang.ClassLoader)>(r5);

        return;
    }

    public synchronized void reload(java.lang.ClassLoader)
    {
        java.util.Locale $r22;
        java.util.Map $r2, $r6;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r11, $r12, $r14, $r15, $r18;
        java.lang.ClassLoader r3;
        java.lang.String[] r9, $r16;
        java.util.LinkedHashMap $r0;
        org.apache.lucene.analysis.util.AnalysisSPILoader r1;
        int i0, $i1, $i2, $i3, i4;
        java.util.ServiceConfigurationError $r10;
        java.lang.String $r8, $r13, $r17, $r19, r20, $r21, r23;
        java.lang.Class $r4, $r7;
        org.apache.lucene.util.SPIClassIterator $r5;

        r1 := @this: org.apache.lucene.analysis.util.AnalysisSPILoader;

        r3 := @parameter0: java.lang.ClassLoader;

        $r0 = new java.util.LinkedHashMap;

        $r2 = r1.<org.apache.lucene.analysis.util.AnalysisSPILoader: java.util.Map services>;

        specialinvoke $r0.<java.util.LinkedHashMap: void <init>(java.util.Map)>($r2);

        $r4 = r1.<org.apache.lucene.analysis.util.AnalysisSPILoader: java.lang.Class clazz>;

        $r5 = staticinvoke <org.apache.lucene.util.SPIClassIterator: org.apache.lucene.util.SPIClassIterator get(java.lang.Class,java.lang.ClassLoader)>($r4, r3);

     label1:
        $z0 = virtualinvoke $r5.<org.apache.lucene.util.SPIClassIterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r7 = virtualinvoke $r5.<org.apache.lucene.util.SPIClassIterator: java.lang.Class next()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getSimpleName()>();

        r23 = null;

        r9 = r1.<org.apache.lucene.analysis.util.AnalysisSPILoader: java.lang.String[] suffixes>;

        i0 = lengthof r9;

        i4 = 0;

     label2:
        if i4 >= i0 goto label4;

        r20 = r9[i4];

        $z2 = virtualinvoke $r8.<java.lang.String: boolean endsWith(java.lang.String)>(r20);

        if $z2 == 0 goto label3;

        $i1 = virtualinvoke $r8.<java.lang.String: int length()>();

        $i2 = virtualinvoke r20.<java.lang.String: int length()>();

        $i3 = $i1 - $i2;

        $r21 = virtualinvoke $r8.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

        $r22 = <java.util.Locale: java.util.Locale ROOT>;

        r23 = virtualinvoke $r21.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r22);

        goto label4;

     label3:
        i4 = i4 + 1;

        goto label2;

     label4:
        if r23 != null goto label5;

        $r10 = new java.util.ServiceConfigurationError;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The class name ");

        $r13 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has wrong suffix, allowed are: ");

        $r16 = r1.<org.apache.lucene.analysis.util.AnalysisSPILoader: java.lang.String[] suffixes>;

        $r17 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r16);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.util.ServiceConfigurationError: void <init>(java.lang.String)>($r19);

        throw $r10;

     label5:
        $z1 = virtualinvoke $r0.<java.util.LinkedHashMap: boolean containsKey(java.lang.Object)>(r23);

        if $z1 != 0 goto label6;

        virtualinvoke $r0.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r23, $r7);

     label6:
        goto label1;

     label7:
        $r6 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r0);

        r1.<org.apache.lucene.analysis.util.AnalysisSPILoader: java.util.Map services> = $r6;

        return;
    }

    public org.apache.lucene.analysis.util.AbstractAnalysisFactory newInstance(java.lang.String, java.util.Map)
    {
        java.lang.Object[] $r5;
        java.lang.reflect.Constructor $r4;
        org.apache.lucene.analysis.util.AnalysisSPILoader r0;
        java.util.Map r6;
        java.lang.String r1, $r14, $r20, $r23;
        org.apache.lucene.analysis.util.AbstractAnalysisFactory $r8;
        java.lang.Class[] $r3;
        java.lang.IllegalArgumentException $r10;
        java.lang.Exception $r9;
        java.lang.Class $r2, $r13;
        java.lang.Object $r7;
        java.lang.StringBuilder $r11, $r12, $r15, $r16, $r17, $r18, $r19, $r21, $r22;

        r0 := @this: org.apache.lucene.analysis.util.AnalysisSPILoader;

        r1 := @parameter0: java.lang.String;

        r6 := @parameter1: java.util.Map;

        $r2 = virtualinvoke r0.<org.apache.lucene.analysis.util.AnalysisSPILoader: java.lang.Class lookupClass(java.lang.String)>(r1);

     label1:
        $r3 = newarray (java.lang.Class)[1];

        $r3[0] = class "Ljava/util/Map;";

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r3);

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = r6;

        $r7 = virtualinvoke $r4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r5);

        $r8 = (org.apache.lucene.analysis.util.AbstractAnalysisFactory) $r7;

     label2:
        return $r8;

     label3:
        $r9 := @caughtexception;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SPI class of type ");

        $r13 = r0.<org.apache.lucene.analysis.util.AnalysisSPILoader: java.lang.Class clazz>;

        $r14 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with name \'");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' cannot be instantiated. ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("This is likely due to a misconfiguration of the java class \'");

        $r20 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r23, $r9);

        throw $r10;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.lang.Class lookupClass(java.lang.String)
    {
        java.util.Locale $r2;
        org.apache.lucene.analysis.util.AnalysisSPILoader r0;
        java.util.Map $r3;
        java.lang.String r1, $r4, $r11, $r20;
        java.util.Set $r18;
        java.lang.IllegalArgumentException $r7;
        java.lang.Object $r5;
        java.lang.Class r6, $r10;
        java.lang.StringBuilder $r8, $r9, $r12, $r13, $r14, $r15, $r16, $r17, $r19;

        r0 := @this: org.apache.lucene.analysis.util.AnalysisSPILoader;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.apache.lucene.analysis.util.AnalysisSPILoader: java.util.Map services>;

        $r2 = <java.util.Locale: java.util.Locale ROOT>;

        $r4 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r2);

        $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        r6 = (java.lang.Class) $r5;

        if r6 == null goto label1;

        return r6;

     label1:
        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("A SPI class of type ");

        $r10 = r0.<org.apache.lucene.analysis.util.AnalysisSPILoader: java.lang.Class clazz>;

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with name \'");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not exist. ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("You need to add the corresponding JAR file supporting this SPI to your classpath.");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The current classpath supports the following names: ");

        $r18 = virtualinvoke r0.<org.apache.lucene.analysis.util.AnalysisSPILoader: java.util.Set availableServices()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r20);

        throw $r7;
    }

    public java.util.Set availableServices()
    {
        java.util.Set $r2;
        org.apache.lucene.analysis.util.AnalysisSPILoader r0;
        java.util.Map $r1;

        r0 := @this: org.apache.lucene.analysis.util.AnalysisSPILoader;

        $r1 = r0.<org.apache.lucene.analysis.util.AnalysisSPILoader: java.util.Map services>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        return $r2;
    }
}
