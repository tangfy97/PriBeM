public class org.apache.batik.extension.svg.BatikHistogramNormalizationFilter8Bit extends org.apache.batik.ext.awt.image.renderable.AbstractColorInterpolationRable implements org.apache.batik.extension.svg.BatikHistogramNormalizationFilter
{
    private float trim;
    protected int[] histo;
    protected float slope;
    protected float intercept;

    public void setSource(org.apache.batik.ext.awt.image.renderable.Filter)
    {
        org.apache.batik.extension.svg.BatikHistogramNormalizationFilter8Bit r0;
        org.apache.batik.ext.awt.image.renderable.Filter r1;

        r0 := @this: org.apache.batik.extension.svg.BatikHistogramNormalizationFilter8Bit;

        r1 := @parameter0: org.apache.batik.ext.awt.image.renderable.Filter;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void init(org.apache.batik.ext.awt.image.renderable.Filter,java.util.Map)>(r1, null);

        return;
    }

    public org.apache.batik.ext.awt.image.renderable.Filter getSource()
    {
        java.util.Vector $r1;
        java.lang.Object $r2;
        org.apache.batik.extension.svg.BatikHistogramNormalizationFilter8Bit r0;
        org.apache.batik.ext.awt.image.renderable.Filter $r3;

        r0 := @this: org.apache.batik.extension.svg.BatikHistogramNormalizationFilter8Bit;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.util.Vector getSources()>();

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object get(int)>(0);

        $r3 = (org.apache.batik.ext.awt.image.renderable.Filter) $r2;

        return $r3;
    }

    public float getTrim()
    {
        float $f0;
        org.apache.batik.extension.svg.BatikHistogramNormalizationFilter8Bit r0;

        r0 := @this: org.apache.batik.extension.svg.BatikHistogramNormalizationFilter8Bit;

        $f0 = r0.<org.apache.batik.extension.svg.BatikHistogramNormalizationFilter8Bit: float trim>;

        return $f0;
    }

    public void setTrim(float)
    {
        float f0;
        org.apache.batik.extension.svg.BatikHistogramNormalizationFilter8Bit r0;

        r0 := @this: org.apache.batik.extension.svg.BatikHistogramNormalizationFilter8Bit;

        f0 := @parameter0: float;

        r0.<org.apache.batik.extension.svg.BatikHistogramNormalizationFilter8Bit: float trim> = f0;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void touch()>();

        return;
    }

    public void <init>(org.apache.batik.ext.awt.image.renderable.Filter, float)
    {
        float f0;
        org.apache.batik.extension.svg.BatikHistogramNormalizationFilter8Bit r0;
        org.apache.batik.ext.awt.image.renderable.Filter r1;

        r0 := @this: org.apache.batik.extension.svg.BatikHistogramNormalizationFilter8Bit;

        r1 := @parameter0: org.apache.batik.ext.awt.image.renderable.Filter;

        f0 := @parameter1: float;

        specialinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractColorInterpolationRable: void <init>()>();

        r0.<org.apache.batik.extension.svg.BatikHistogramNormalizationFilter8Bit: float trim> = 0.01F;

        r0.<org.apache.batik.extension.svg.BatikHistogramNormalizationFilter8Bit: int[] histo> = null;

        virtualinvoke r0.<org.apache.batik.extension.svg.BatikHistogramNormalizationFilter8Bit: void setSource(org.apache.batik.ext.awt.image.renderable.Filter)>(r1);

        virtualinvoke r0.<org.apache.batik.extension.svg.BatikHistogramNormalizationFilter8Bit: void setTrim(float)>(f0);

        return;
    }

    public void computeHistogram(java.awt.image.renderable.RenderContext)
    {
        java.awt.RenderingHints $r5;
        byte $b0;
        int[] $r1, $r10, $r11, $r12;
        java.awt.image.RenderedImage $r7;
        org.apache.batik.extension.svg.BatikHistogramNormalizationFilter8Bit r0;
        java.awt.geom.AffineTransform $r3;
        org.apache.batik.ext.awt.image.renderable.Filter $r2, $r6;
        org.apache.batik.extension.svg.HistogramRed $r15;
        java.awt.image.renderable.RenderContext r13, $r14;
        org.apache.batik.ext.awt.image.rendered.CachableRed $r9;
        float $f0, $f1, f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, f12;
        int $i1, $i2, $i3, $i4, i5, $i6, $i7, $i8, $i9, i10, i11, i12, i13, $i14, $i16;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.batik.extension.svg.BatikHistogramNormalizationFilter8Bit;

        r13 := @parameter0: java.awt.image.renderable.RenderContext;

        $r1 = r0.<org.apache.batik.extension.svg.BatikHistogramNormalizationFilter8Bit: int[] histo>;

        if $r1 == null goto label01;

        return;

     label01:
        $r2 = virtualinvoke r0.<org.apache.batik.extension.svg.BatikHistogramNormalizationFilter8Bit: org.apache.batik.ext.awt.image.renderable.Filter getSource()>();

        $f0 = interfaceinvoke $r2.<java.awt.image.renderable.RenderableImage: float getWidth()>();

        f12 = 100.0F / $f0;

        $f1 = interfaceinvoke $r2.<java.awt.image.renderable.RenderableImage: float getHeight()>();

        f2 = 100.0F / $f1;

        $b0 = f12 cmpl f2;

        $i14 = (int) $b0;

        if $i14 <= 0 goto label02;

        f12 = f2;

     label02:
        $d1 = (double) f12;

        $d0 = (double) f12;

        $r3 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getScaleInstance(double,double)>($d1, $d0);

        $r14 = new java.awt.image.renderable.RenderContext;

        $r5 = virtualinvoke r13.<java.awt.image.renderable.RenderContext: java.awt.RenderingHints getRenderingHints()>();

        specialinvoke $r14.<java.awt.image.renderable.RenderContext: void <init>(java.awt.geom.AffineTransform,java.awt.RenderingHints)>($r3, $r5);

        $r6 = virtualinvoke r0.<org.apache.batik.extension.svg.BatikHistogramNormalizationFilter8Bit: org.apache.batik.ext.awt.image.renderable.Filter getSource()>();

        $r7 = interfaceinvoke $r6.<java.awt.image.renderable.RenderableImage: java.awt.image.RenderedImage createRendering(java.awt.image.renderable.RenderContext)>($r14);

        $r15 = new org.apache.batik.extension.svg.HistogramRed;

        $r9 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractColorInterpolationRable: org.apache.batik.ext.awt.image.rendered.CachableRed convertSourceCS(java.awt.image.RenderedImage)>($r7);

        specialinvoke $r15.<org.apache.batik.extension.svg.HistogramRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed)>($r9);

        $r10 = virtualinvoke $r15.<org.apache.batik.extension.svg.HistogramRed: int[] getHistogram()>();

        r0.<org.apache.batik.extension.svg.BatikHistogramNormalizationFilter8Bit: int[] histo> = $r10;

        $i1 = interfaceinvoke $r7.<java.awt.image.RenderedImage: int getWidth()>();

        $i2 = interfaceinvoke $r7.<java.awt.image.RenderedImage: int getHeight()>();

        $i3 = $i1 * $i2;

        $f4 = (float) $i3;

        $f3 = r0.<org.apache.batik.extension.svg.BatikHistogramNormalizationFilter8Bit: float trim>;

        $f5 = $f4 * $f3;

        $d2 = (double) $f5;

        $d3 = $d2 + 0.5;

        $i9 = (int) $d3;

        i10 = 0;

        i11 = 0;

        goto label05;

     label03:
        $r11 = r0.<org.apache.batik.extension.svg.BatikHistogramNormalizationFilter8Bit: int[] histo>;

        $i4 = $r11[i11];

        i10 = i10 + $i4;

        if i10 < $i9 goto label04;

        goto label06;

     label04:
        i11 = i11 + 1;

     label05:
        if i11 < 255 goto label03;

     label06:
        i5 = i11;

        i12 = 0;

        i13 = 255;

        goto label09;

     label07:
        $r12 = r0.<org.apache.batik.extension.svg.BatikHistogramNormalizationFilter8Bit: int[] histo>;

        $i6 = $r12[i13];

        i12 = i12 + $i6;

        if i12 < $i9 goto label08;

        goto label10;

     label08:
        $i16 = (int) -1;

        i13 = i13 + $i16;

     label09:
        if i13 > 0 goto label07;

     label10:
        $i7 = i13 - i5;

        $f6 = (float) $i7;

        $f7 = 255.0F / $f6;

        r0.<org.apache.batik.extension.svg.BatikHistogramNormalizationFilter8Bit: float slope> = $f7;

        $f9 = r0.<org.apache.batik.extension.svg.BatikHistogramNormalizationFilter8Bit: float slope>;

        $i8 = neg i5;

        $f8 = (float) $i8;

        $f10 = $f9 * $f8;

        $f11 = $f10 / 255.0F;

        r0.<org.apache.batik.extension.svg.BatikHistogramNormalizationFilter8Bit: float intercept> = $f11;

        return;
    }

    public java.awt.image.RenderedImage createRendering(java.awt.image.renderable.RenderContext)
    {
        org.apache.batik.ext.awt.image.rendered.ComponentTransferRed $r7;
        java.awt.image.RenderedImage $r3;
        org.apache.batik.extension.svg.BatikHistogramNormalizationFilter8Bit r0;
        org.apache.batik.ext.awt.image.renderable.Filter $r1;
        java.awt.image.SampleModel $r4;
        java.awt.image.renderable.RenderContext r2;
        org.apache.batik.ext.awt.image.rendered.CachableRed $r8;
        int $i0, $i1, i2;
        float $f0, $f1;
        org.apache.batik.ext.awt.image.LinearTransfer $r6;
        org.apache.batik.ext.awt.image.TransferFunction[] r5;

        r0 := @this: org.apache.batik.extension.svg.BatikHistogramNormalizationFilter8Bit;

        r2 := @parameter0: java.awt.image.renderable.RenderContext;

        $r1 = virtualinvoke r0.<org.apache.batik.extension.svg.BatikHistogramNormalizationFilter8Bit: org.apache.batik.ext.awt.image.renderable.Filter getSource()>();

        $r3 = interfaceinvoke $r1.<java.awt.image.renderable.RenderableImage: java.awt.image.RenderedImage createRendering(java.awt.image.renderable.RenderContext)>(r2);

        if $r3 != null goto label1;

        return null;

     label1:
        virtualinvoke r0.<org.apache.batik.extension.svg.BatikHistogramNormalizationFilter8Bit: void computeHistogram(java.awt.image.renderable.RenderContext)>(r2);

        $r4 = interfaceinvoke $r3.<java.awt.image.RenderedImage: java.awt.image.SampleModel getSampleModel()>();

        $i0 = virtualinvoke $r4.<java.awt.image.SampleModel: int getNumBands()>();

        r5 = newarray (org.apache.batik.ext.awt.image.TransferFunction)[$i0];

        $r6 = new org.apache.batik.ext.awt.image.LinearTransfer;

        $f1 = r0.<org.apache.batik.extension.svg.BatikHistogramNormalizationFilter8Bit: float slope>;

        $f0 = r0.<org.apache.batik.extension.svg.BatikHistogramNormalizationFilter8Bit: float intercept>;

        specialinvoke $r6.<org.apache.batik.ext.awt.image.LinearTransfer: void <init>(float,float)>($f1, $f0);

        i2 = 0;

        goto label3;

     label2:
        r5[i2] = $r6;

        i2 = i2 + 1;

     label3:
        $i1 = lengthof r5;

        if i2 < $i1 goto label2;

        $r7 = new org.apache.batik.ext.awt.image.rendered.ComponentTransferRed;

        $r8 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractColorInterpolationRable: org.apache.batik.ext.awt.image.rendered.CachableRed convertSourceCS(java.awt.image.RenderedImage)>($r3);

        specialinvoke $r7.<org.apache.batik.ext.awt.image.rendered.ComponentTransferRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed,org.apache.batik.ext.awt.image.TransferFunction[],java.awt.RenderingHints)>($r8, r5, null);

        return $r7;
    }
}
