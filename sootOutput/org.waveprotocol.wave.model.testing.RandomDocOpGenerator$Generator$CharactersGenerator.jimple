class org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$CharactersGenerator extends org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomOperationComponentGenerator
{
    static final boolean $assertionsDisabled;
    final org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator this$0;

    void <init>(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator)
    {
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator r1;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$CharactersGenerator r0;

        r0 := @this: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$CharactersGenerator;

        r1 := @parameter0: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator;

        r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$CharactersGenerator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator this$0> = r1;

        specialinvoke r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomOperationComponentGenerator: void <init>(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator)>(r1);

        return;
    }

    org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomizerOperationComponent generate(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton, boolean, org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r2;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$CharactersGenerator$1 $r13;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters $r7, $r16, $r18;
        byte b1, $b7;
        boolean $z0, z1, $z2, $z3, $z4, $z5;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$CharactersGenerator r4;
        java.lang.StringBuilder $r9;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider $r8, $r11, $r20;
        java.lang.AssertionError $r14;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator $r5, $r6, $r10, $r15, $r17, $r19;
        int $i0, $i2, $i4, $i5, i6, i8;
        java.lang.String $r12;
        char $c3;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage r0, $r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;

        r4 := @this: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$CharactersGenerator;

        r2 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        z1 := @parameter1: boolean;

        r0 := @parameter2: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage;

        $r1 = <org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage S1_UNRESTRICTED>;

        if r0 == $r1 goto label01;

        return null;

     label01:
        $r3 = virtualinvoke r2.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkCharacters(java.lang.String,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>("a", null);

        $z0 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isIllFormed()>();

        if $z0 == 0 goto label02;

        return null;

     label02:
        if z1 == 0 goto label05;

        $z5 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isValid()>();

        if $z5 != 0 goto label03;

        return null;

     label03:
        $r17 = r4.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$CharactersGenerator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator this$0>;

        $r18 = $r17.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters p>;

        $i4 = virtualinvoke $r18.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters: int getMaxInsertLength()>();

        if $i4 != 0 goto label04;

        return null;

     label04:
        $r19 = r4.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$CharactersGenerator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator this$0>;

        $r20 = $r19.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r>;

        $i5 = $i4 + 1;

        i6 = staticinvoke <org.waveprotocol.wave.model.testing.RandomDocOpGenerator: int access$100(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider,int,int)>($r20, 1, $i5);

        goto label07;

     label05:
        $z2 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isValid()>();

        if $z2 == 0 goto label06;

        $r15 = r4.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$CharactersGenerator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator this$0>;

        $r16 = $r15.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters p>;

        virtualinvoke $r16.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters: int getMaxInsertLength()>();

        return null;

     label06:
        $r5 = r4.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$CharactersGenerator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator this$0>;

        $r8 = $r5.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r>;

        $r6 = r4.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$CharactersGenerator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator this$0>;

        $r7 = $r6.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters p>;

        $i0 = virtualinvoke $r7.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters: int getMaxInsertLength()>();

        i6 = staticinvoke <org.waveprotocol.wave.model.testing.RandomDocOpGenerator: int access$100(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider,int,int)>($r8, 1, $i0);

     label07:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $z3 = <org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$CharactersGenerator: boolean $assertionsDisabled>;

        if $z3 != 0 goto label08;

        if i6 > 0 goto label08;

        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();

        throw $r14;

     label08:
        $r10 = r4.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$CharactersGenerator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator this$0>;

        $r11 = $r10.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r>;

        $z4 = interfaceinvoke $r11.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider: boolean nextBoolean()>();

        if $z4 == 0 goto label09;

        $b7 = 97;

        goto label10;

     label09:
        $b7 = 65;

     label10:
        b1 = $b7;

        i8 = 0;

     label11:
        if i8 >= i6 goto label14;

        if i8 > 26 goto label12;

        $i2 = b1 + i8;

        $c3 = (char) $i2;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        goto label13;

     label12:
        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

     label13:
        i8 = i8 + 1;

        goto label11;

     label14:
        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = new org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$CharactersGenerator$1;

        specialinvoke $r13.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$CharactersGenerator$1: void <init>(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$CharactersGenerator,java.lang.String)>(r4, $r12);

        return $r13;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/testing/RandomDocOpGenerator;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$CharactersGenerator: boolean $assertionsDisabled> = $z1;

        return;
    }
}
