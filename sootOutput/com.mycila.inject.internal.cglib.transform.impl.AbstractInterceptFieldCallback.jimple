public class com.mycila.inject.internal.cglib.transform.impl.AbstractInterceptFieldCallback extends java.lang.Object implements com.mycila.inject.internal.cglib.transform.impl.InterceptFieldCallback
{

    public void <init>()
    {
        com.mycila.inject.internal.cglib.transform.impl.AbstractInterceptFieldCallback r0;

        r0 := @this: com.mycila.inject.internal.cglib.transform.impl.AbstractInterceptFieldCallback;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int writeInt(java.lang.Object, java.lang.String, int, int)
    {
        int i0, i1;
        java.lang.Object r1;
        java.lang.String r2;
        com.mycila.inject.internal.cglib.transform.impl.AbstractInterceptFieldCallback r0;

        r0 := @this: com.mycila.inject.internal.cglib.transform.impl.AbstractInterceptFieldCallback;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        i0 := @parameter3: int;

        return i0;
    }

    public char writeChar(java.lang.Object, java.lang.String, char, char)
    {
        char c0, c1;
        java.lang.Object r1;
        java.lang.String r2;
        com.mycila.inject.internal.cglib.transform.impl.AbstractInterceptFieldCallback r0;

        r0 := @this: com.mycila.inject.internal.cglib.transform.impl.AbstractInterceptFieldCallback;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        c1 := @parameter2: char;

        c0 := @parameter3: char;

        return c0;
    }

    public byte writeByte(java.lang.Object, java.lang.String, byte, byte)
    {
        byte b0, b1;
        java.lang.Object r1;
        java.lang.String r2;
        com.mycila.inject.internal.cglib.transform.impl.AbstractInterceptFieldCallback r0;

        r0 := @this: com.mycila.inject.internal.cglib.transform.impl.AbstractInterceptFieldCallback;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        b1 := @parameter2: byte;

        b0 := @parameter3: byte;

        return b0;
    }

    public boolean writeBoolean(java.lang.Object, java.lang.String, boolean, boolean)
    {
        java.lang.Object r1;
        java.lang.String r2;
        com.mycila.inject.internal.cglib.transform.impl.AbstractInterceptFieldCallback r0;
        boolean z0, z1;

        r0 := @this: com.mycila.inject.internal.cglib.transform.impl.AbstractInterceptFieldCallback;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        z1 := @parameter2: boolean;

        z0 := @parameter3: boolean;

        return z0;
    }

    public short writeShort(java.lang.Object, java.lang.String, short, short)
    {
        short s0, s1;
        java.lang.Object r1;
        java.lang.String r2;
        com.mycila.inject.internal.cglib.transform.impl.AbstractInterceptFieldCallback r0;

        r0 := @this: com.mycila.inject.internal.cglib.transform.impl.AbstractInterceptFieldCallback;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        s1 := @parameter2: short;

        s0 := @parameter3: short;

        return s0;
    }

    public float writeFloat(java.lang.Object, java.lang.String, float, float)
    {
        float f0, f1;
        java.lang.Object r1;
        java.lang.String r2;
        com.mycila.inject.internal.cglib.transform.impl.AbstractInterceptFieldCallback r0;

        r0 := @this: com.mycila.inject.internal.cglib.transform.impl.AbstractInterceptFieldCallback;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        f1 := @parameter2: float;

        f0 := @parameter3: float;

        return f0;
    }

    public double writeDouble(java.lang.Object, java.lang.String, double, double)
    {
        java.lang.Object r1;
        java.lang.String r2;
        com.mycila.inject.internal.cglib.transform.impl.AbstractInterceptFieldCallback r0;
        double d0, d1;

        r0 := @this: com.mycila.inject.internal.cglib.transform.impl.AbstractInterceptFieldCallback;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        d1 := @parameter2: double;

        d0 := @parameter3: double;

        return d0;
    }

    public long writeLong(java.lang.Object, java.lang.String, long, long)
    {
        long l0, l1;
        java.lang.Object r1;
        java.lang.String r2;
        com.mycila.inject.internal.cglib.transform.impl.AbstractInterceptFieldCallback r0;

        r0 := @this: com.mycila.inject.internal.cglib.transform.impl.AbstractInterceptFieldCallback;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        l1 := @parameter2: long;

        l0 := @parameter3: long;

        return l0;
    }

    public java.lang.Object writeObject(java.lang.Object, java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r2, r4;
        java.lang.String r3;
        com.mycila.inject.internal.cglib.transform.impl.AbstractInterceptFieldCallback r1;

        r1 := @this: com.mycila.inject.internal.cglib.transform.impl.AbstractInterceptFieldCallback;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.Object;

        r0 := @parameter3: java.lang.Object;

        return r0;
    }

    public int readInt(java.lang.Object, java.lang.String, int)
    {
        int i0;
        java.lang.Object r1;
        java.lang.String r2;
        com.mycila.inject.internal.cglib.transform.impl.AbstractInterceptFieldCallback r0;

        r0 := @this: com.mycila.inject.internal.cglib.transform.impl.AbstractInterceptFieldCallback;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        return i0;
    }

    public char readChar(java.lang.Object, java.lang.String, char)
    {
        char c0;
        java.lang.Object r1;
        java.lang.String r2;
        com.mycila.inject.internal.cglib.transform.impl.AbstractInterceptFieldCallback r0;

        r0 := @this: com.mycila.inject.internal.cglib.transform.impl.AbstractInterceptFieldCallback;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        c0 := @parameter2: char;

        return c0;
    }

    public byte readByte(java.lang.Object, java.lang.String, byte)
    {
        byte b0;
        java.lang.Object r1;
        java.lang.String r2;
        com.mycila.inject.internal.cglib.transform.impl.AbstractInterceptFieldCallback r0;

        r0 := @this: com.mycila.inject.internal.cglib.transform.impl.AbstractInterceptFieldCallback;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        b0 := @parameter2: byte;

        return b0;
    }

    public boolean readBoolean(java.lang.Object, java.lang.String, boolean)
    {
        java.lang.Object r1;
        java.lang.String r2;
        com.mycila.inject.internal.cglib.transform.impl.AbstractInterceptFieldCallback r0;
        boolean z0;

        r0 := @this: com.mycila.inject.internal.cglib.transform.impl.AbstractInterceptFieldCallback;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        return z0;
    }

    public short readShort(java.lang.Object, java.lang.String, short)
    {
        short s0;
        java.lang.Object r1;
        java.lang.String r2;
        com.mycila.inject.internal.cglib.transform.impl.AbstractInterceptFieldCallback r0;

        r0 := @this: com.mycila.inject.internal.cglib.transform.impl.AbstractInterceptFieldCallback;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        s0 := @parameter2: short;

        return s0;
    }

    public float readFloat(java.lang.Object, java.lang.String, float)
    {
        float f0;
        java.lang.Object r1;
        java.lang.String r2;
        com.mycila.inject.internal.cglib.transform.impl.AbstractInterceptFieldCallback r0;

        r0 := @this: com.mycila.inject.internal.cglib.transform.impl.AbstractInterceptFieldCallback;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        f0 := @parameter2: float;

        return f0;
    }

    public double readDouble(java.lang.Object, java.lang.String, double)
    {
        java.lang.Object r1;
        java.lang.String r2;
        com.mycila.inject.internal.cglib.transform.impl.AbstractInterceptFieldCallback r0;
        double d0;

        r0 := @this: com.mycila.inject.internal.cglib.transform.impl.AbstractInterceptFieldCallback;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        d0 := @parameter2: double;

        return d0;
    }

    public long readLong(java.lang.Object, java.lang.String, long)
    {
        long l0;
        java.lang.Object r1;
        java.lang.String r2;
        com.mycila.inject.internal.cglib.transform.impl.AbstractInterceptFieldCallback r0;

        r0 := @this: com.mycila.inject.internal.cglib.transform.impl.AbstractInterceptFieldCallback;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        return l0;
    }

    public java.lang.Object readObject(java.lang.Object, java.lang.String, java.lang.Object)
    {
        java.lang.Object r0, r2;
        java.lang.String r3;
        com.mycila.inject.internal.cglib.transform.impl.AbstractInterceptFieldCallback r1;

        r1 := @this: com.mycila.inject.internal.cglib.transform.impl.AbstractInterceptFieldCallback;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.String;

        r0 := @parameter2: java.lang.Object;

        return r0;
    }
}
