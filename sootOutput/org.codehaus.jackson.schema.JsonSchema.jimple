public class org.codehaus.jackson.schema.JsonSchema extends java.lang.Object
{
    private final org.codehaus.jackson.node.ObjectNode schema;

    public void <init>(org.codehaus.jackson.node.ObjectNode)
    {
        org.codehaus.jackson.schema.JsonSchema r0;
        org.codehaus.jackson.node.ObjectNode r1;

        r0 := @this: org.codehaus.jackson.schema.JsonSchema;

        r1 := @parameter0: org.codehaus.jackson.node.ObjectNode;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.codehaus.jackson.schema.JsonSchema: org.codehaus.jackson.node.ObjectNode schema> = r1;

        return;
    }

    public org.codehaus.jackson.node.ObjectNode getSchemaNode()
    {
        org.codehaus.jackson.schema.JsonSchema r0;
        org.codehaus.jackson.node.ObjectNode $r1;

        r0 := @this: org.codehaus.jackson.schema.JsonSchema;

        $r1 = r0.<org.codehaus.jackson.schema.JsonSchema: org.codehaus.jackson.node.ObjectNode schema>;

        return $r1;
    }

    public java.lang.String toString()
    {
        org.codehaus.jackson.schema.JsonSchema r0;
        java.lang.String $r2;
        org.codehaus.jackson.node.ObjectNode $r1;

        r0 := @this: org.codehaus.jackson.schema.JsonSchema;

        $r1 = r0.<org.codehaus.jackson.schema.JsonSchema: org.codehaus.jackson.node.ObjectNode schema>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.node.ObjectNode: java.lang.String toString()>();

        return $r2;
    }

    public boolean equals(java.lang.Object)
    {
        org.codehaus.jackson.schema.JsonSchema r1, r2;
        java.lang.Object r0;
        boolean $z0, $z1, $z2;
        org.codehaus.jackson.node.ObjectNode $r3, $r4, $r5, $r6;

        r1 := @this: org.codehaus.jackson.schema.JsonSchema;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r0 != null goto label2;

        return 0;

     label2:
        $z0 = r0 instanceof org.codehaus.jackson.schema.JsonSchema;

        if $z0 != 0 goto label3;

        return 0;

     label3:
        r2 = (org.codehaus.jackson.schema.JsonSchema) r0;

        $r3 = r1.<org.codehaus.jackson.schema.JsonSchema: org.codehaus.jackson.node.ObjectNode schema>;

        if $r3 != null goto label6;

        $r6 = r2.<org.codehaus.jackson.schema.JsonSchema: org.codehaus.jackson.node.ObjectNode schema>;

        if $r6 != null goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        return $z2;

     label6:
        $r5 = r1.<org.codehaus.jackson.schema.JsonSchema: org.codehaus.jackson.node.ObjectNode schema>;

        $r4 = r2.<org.codehaus.jackson.schema.JsonSchema: org.codehaus.jackson.node.ObjectNode schema>;

        $z1 = virtualinvoke $r5.<org.codehaus.jackson.node.ObjectNode: boolean equals(java.lang.Object)>($r4);

        return $z1;
    }

    public static org.codehaus.jackson.JsonNode getDefaultSchemaNode()
    {
        org.codehaus.jackson.node.JsonNodeFactory $r0;
        org.codehaus.jackson.node.ObjectNode $r1;

        $r0 = <org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.JsonNodeFactory instance>;

        $r1 = virtualinvoke $r0.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.ObjectNode objectNode()>();

        virtualinvoke $r1.<org.codehaus.jackson.node.ObjectNode: void put(java.lang.String,java.lang.String)>("type", "any");

        return $r1;
    }
}
