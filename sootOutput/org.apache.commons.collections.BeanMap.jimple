public class org.apache.commons.collections.BeanMap extends java.util.AbstractMap implements java.lang.Cloneable
{
    private transient java.lang.Object bean;
    private transient java.util.HashMap readMethods;
    private transient java.util.HashMap writeMethods;
    private transient java.util.HashMap types;
    public static final java.lang.Object[] NULL_ARGUMENTS;
    public static java.util.HashMap defaultTransformers;

    public void <init>()
    {
        java.util.HashMap $r1, $r2, $r3;
        org.apache.commons.collections.BeanMap r0;

        r0 := @this: org.apache.commons.collections.BeanMap;

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.commons.collections.BeanMap: java.util.HashMap readMethods> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.apache.commons.collections.BeanMap: java.util.HashMap writeMethods> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.apache.commons.collections.BeanMap: java.util.HashMap types> = $r3;

        return;
    }

    public void <init>(java.lang.Object)
    {
        java.util.HashMap $r1, $r2, $r3;
        java.lang.Object r4;
        org.apache.commons.collections.BeanMap r0;

        r0 := @this: org.apache.commons.collections.BeanMap;

        r4 := @parameter0: java.lang.Object;

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.commons.collections.BeanMap: java.util.HashMap readMethods> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.apache.commons.collections.BeanMap: java.util.HashMap writeMethods> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.apache.commons.collections.BeanMap: java.util.HashMap types> = $r3;

        r0.<org.apache.commons.collections.BeanMap: java.lang.Object bean> = r4;

        specialinvoke r0.<org.apache.commons.collections.BeanMap: void initialise()>();

        return;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuffer $r0, $r1, $r5, $r6;
        java.lang.Object $r3;
        java.lang.String $r4, $r7;
        org.apache.commons.collections.BeanMap r2;

        r2 := @this: org.apache.commons.collections.BeanMap;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("BeanMap<");

        $r3 = r2.<org.apache.commons.collections.BeanMap: java.lang.Object bean>;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(">");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        java.lang.CloneNotSupportedException $r14, $r20, $r26;
        java.lang.reflect.Method $r11;
        boolean $z0;
        java.util.Set $r8;
        java.lang.Exception $r13, $r19, $r25;
        org.apache.commons.collections.BeanMap r0, r2;
        java.util.HashMap $r7;
        java.lang.StringBuffer $r15, $r16, $r17, $r21, $r22, $r23, $r27, $r28, $r30, $r31, $r32;
        java.lang.String $r18, $r24, $r29, $r33;
        java.util.Iterator $r9;
        java.lang.Object $r1, $r3, $r4, $r6, $r10, $r12;
        java.lang.Class $r5, r34;

        r0 := @this: org.apache.commons.collections.BeanMap;

        $r1 = specialinvoke r0.<java.util.AbstractMap: java.lang.Object clone()>();

        r2 = (org.apache.commons.collections.BeanMap) $r1;

        $r3 = r0.<org.apache.commons.collections.BeanMap: java.lang.Object bean>;

        if $r3 != null goto label01;

        return r2;

     label01:
        r34 = null;

     label02:
        $r4 = r0.<org.apache.commons.collections.BeanMap: java.lang.Object bean>;

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        r34 = $r5;

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.Object newInstance()>();

     label03:
        goto label05;

     label04:
        $r25 := @caughtexception;

        $r26 = new java.lang.CloneNotSupportedException;

        $r27 = new java.lang.StringBuffer;

        specialinvoke $r27.<java.lang.StringBuffer: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unable to instantiate the underlying bean \"");

        $r29 = virtualinvoke r34.<java.lang.Class: java.lang.String getName()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\": ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r25);

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r26.<java.lang.CloneNotSupportedException: void <init>(java.lang.String)>($r33);

        throw $r26;

     label05:
        virtualinvoke r2.<org.apache.commons.collections.BeanMap: void setBean(java.lang.Object)>($r6);

     label06:
        goto label08;

     label07:
        $r19 := @caughtexception;

        $r20 = new java.lang.CloneNotSupportedException;

        $r21 = new java.lang.StringBuffer;

        specialinvoke $r21.<java.lang.StringBuffer: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unable to set bean in the cloned bean map: ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r19);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.CloneNotSupportedException: void <init>(java.lang.String)>($r24);

        throw $r20;

     label08:
        $r7 = r0.<org.apache.commons.collections.BeanMap: java.util.HashMap readMethods>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.util.Set keySet()>();

        $r9 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label09:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        $r11 = virtualinvoke r0.<org.apache.commons.collections.BeanMap: java.lang.reflect.Method getWriteMethod(java.lang.Object)>($r10);

        if $r11 == null goto label10;

        $r12 = virtualinvoke r0.<org.apache.commons.collections.BeanMap: java.lang.Object get(java.lang.Object)>($r10);

        virtualinvoke r2.<org.apache.commons.collections.BeanMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r12);

     label10:
        goto label09;

     label11:
        goto label13;

     label12:
        $r13 := @caughtexception;

        $r14 = new java.lang.CloneNotSupportedException;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unable to copy bean values to cloned bean map: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r13);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.CloneNotSupportedException: void <init>(java.lang.String)>($r18);

        throw $r14;

     label13:
        return r2;

        catch java.lang.Exception from label02 to label03 with label04;
        catch java.lang.Exception from label05 to label06 with label07;
        catch java.lang.Exception from label08 to label11 with label12;
    }

    public void putAllWriteable(org.apache.commons.collections.BeanMap)
    {
        java.util.Iterator $r3;
        java.util.Set $r2;
        java.util.HashMap $r1;
        java.lang.Object $r4, $r7;
        java.lang.reflect.Method $r6;
        org.apache.commons.collections.BeanMap r0, r5;
        boolean $z0;

        r5 := @this: org.apache.commons.collections.BeanMap;

        r0 := @parameter0: org.apache.commons.collections.BeanMap;

        $r1 = r0.<org.apache.commons.collections.BeanMap: java.util.HashMap readMethods>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r6 = virtualinvoke r5.<org.apache.commons.collections.BeanMap: java.lang.reflect.Method getWriteMethod(java.lang.Object)>($r4);

        if $r6 == null goto label2;

        $r7 = virtualinvoke r0.<org.apache.commons.collections.BeanMap: java.lang.Object get(java.lang.Object)>($r4);

        virtualinvoke r5.<org.apache.commons.collections.BeanMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r7);

     label2:
        goto label1;

     label3:
        return;
    }

    public void clear()
    {
        java.lang.UnsupportedOperationException $r6;
        java.lang.Exception $r5;
        java.lang.StringBuffer $r7, $r8, $r9;
        java.lang.Object $r1, $r2, $r4;
        java.lang.Class $r3, r11;
        java.lang.String $r10;
        org.apache.commons.collections.BeanMap r0;

        r0 := @this: org.apache.commons.collections.BeanMap;

        $r1 = r0.<org.apache.commons.collections.BeanMap: java.lang.Object bean>;

        if $r1 != null goto label1;

        return;

     label1:
        r11 = null;

     label2:
        $r2 = r0.<org.apache.commons.collections.BeanMap: java.lang.Object bean>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        r11 = $r3;

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Object newInstance()>();

        r0.<org.apache.commons.collections.BeanMap: java.lang.Object bean> = $r4;

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        $r6 = new java.lang.UnsupportedOperationException;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not create new instance of class: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r11);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label5:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public boolean containsKey(java.lang.Object)
    {
        java.lang.Object r1;
        java.lang.reflect.Method $r2;
        org.apache.commons.collections.BeanMap r0;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.BeanMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.apache.commons.collections.BeanMap: java.lang.reflect.Method getReadMethod(java.lang.Object)>(r1);

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean containsValue(java.lang.Object)
    {
        java.lang.Object r1;
        org.apache.commons.collections.BeanMap r0;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.BeanMap;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<java.util.AbstractMap: boolean containsValue(java.lang.Object)>(r1);

        return $z0;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.lang.IllegalAccessException $r10;
        java.lang.Object[] $r4;
        java.lang.IllegalArgumentException $r9;
        java.lang.NullPointerException $r7;
        java.lang.reflect.InvocationTargetException $r8;
        java.lang.Object $r1, r2, $r5, $r6;
        java.lang.reflect.Method $r3;
        org.apache.commons.collections.BeanMap r0;

        r0 := @this: org.apache.commons.collections.BeanMap;

        r2 := @parameter0: java.lang.Object;

        $r1 = r0.<org.apache.commons.collections.BeanMap: java.lang.Object bean>;

        if $r1 == null goto label7;

        $r3 = virtualinvoke r0.<org.apache.commons.collections.BeanMap: java.lang.reflect.Method getReadMethod(java.lang.Object)>(r2);

        if $r3 == null goto label7;

     label1:
        $r5 = r0.<org.apache.commons.collections.BeanMap: java.lang.Object bean>;

        $r4 = <org.apache.commons.collections.BeanMap: java.lang.Object[] NULL_ARGUMENTS>;

        $r6 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r5, $r4);

     label2:
        return $r6;

     label3:
        $r10 := @caughtexception;

        virtualinvoke r0.<org.apache.commons.collections.BeanMap: void logWarn(java.lang.Exception)>($r10);

        goto label7;

     label4:
        $r9 := @caughtexception;

        virtualinvoke r0.<org.apache.commons.collections.BeanMap: void logWarn(java.lang.Exception)>($r9);

        goto label7;

     label5:
        $r8 := @caughtexception;

        virtualinvoke r0.<org.apache.commons.collections.BeanMap: void logWarn(java.lang.Exception)>($r8);

        goto label7;

     label6:
        $r7 := @caughtexception;

        virtualinvoke r0.<org.apache.commons.collections.BeanMap: void logWarn(java.lang.Exception)>($r7);

     label7:
        return null;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
        catch java.lang.IllegalArgumentException from label1 to label2 with label4;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label5;
        catch java.lang.NullPointerException from label1 to label2 with label6;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object) throws java.lang.IllegalArgumentException, java.lang.ClassCastException
    {
        java.lang.Object[] $r6;
        java.lang.StringBuffer $r10, $r11, $r15, $r16, $r17;
        java.lang.String $r14, $r18, $r21, $r24;
        java.lang.reflect.Method $r4;
        java.lang.IllegalAccessException $r19;
        java.lang.IllegalArgumentException $r9, $r20, $r23;
        java.lang.reflect.InvocationTargetException $r22;
        java.lang.Object $r1, r2, $r3, r5, $r7, $r8, $r12;
        java.lang.Class $r13;
        org.apache.commons.collections.BeanMap r0;

        r0 := @this: org.apache.commons.collections.BeanMap;

        r2 := @parameter0: java.lang.Object;

        r5 := @parameter1: java.lang.Object;

        $r1 = r0.<org.apache.commons.collections.BeanMap: java.lang.Object bean>;

        if $r1 == null goto label6;

        $r3 = virtualinvoke r0.<org.apache.commons.collections.BeanMap: java.lang.Object get(java.lang.Object)>(r2);

        $r4 = virtualinvoke r0.<org.apache.commons.collections.BeanMap: java.lang.reflect.Method getWriteMethod(java.lang.Object)>(r2);

        if $r4 != null goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The bean of type: ");

        $r12 = r0.<org.apache.commons.collections.BeanMap: java.lang.Object bean>;

        $r13 = virtualinvoke $r12.<java.lang.Object: java.lang.Class getClass()>();

        $r14 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        $r15 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" has no property called: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r2);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r9;

     label1:
        $r6 = virtualinvoke r0.<org.apache.commons.collections.BeanMap: java.lang.Object[] createWriteMethodArguments(java.lang.reflect.Method,java.lang.Object)>($r4, r5);

        $r7 = r0.<org.apache.commons.collections.BeanMap: java.lang.Object bean>;

        virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r7, $r6);

        $r8 = virtualinvoke r0.<org.apache.commons.collections.BeanMap: java.lang.Object get(java.lang.Object)>(r2);

        virtualinvoke r0.<org.apache.commons.collections.BeanMap: void firePropertyChange(java.lang.Object,java.lang.Object,java.lang.Object)>(r2, $r3, $r8);

     label2:
        goto label5;

     label3:
        $r22 := @caughtexception;

        virtualinvoke r0.<org.apache.commons.collections.BeanMap: void logInfo(java.lang.Exception)>($r22);

        $r23 = new java.lang.IllegalArgumentException;

        $r24 = virtualinvoke $r22.<java.lang.reflect.InvocationTargetException: java.lang.String getMessage()>();

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r24);

        throw $r23;

     label4:
        $r19 := @caughtexception;

        virtualinvoke r0.<org.apache.commons.collections.BeanMap: void logInfo(java.lang.Exception)>($r19);

        $r20 = new java.lang.IllegalArgumentException;

        $r21 = virtualinvoke $r19.<java.lang.IllegalAccessException: java.lang.String getMessage()>();

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21);

        throw $r20;

     label5:
        return $r3;

     label6:
        return null;

        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
    }

    public int size()
    {
        int $i0;
        java.util.HashMap $r1;
        org.apache.commons.collections.BeanMap r0;

        r0 := @this: org.apache.commons.collections.BeanMap;

        $r1 = r0.<org.apache.commons.collections.BeanMap: java.util.HashMap readMethods>;

        $i0 = virtualinvoke $r1.<java.util.HashMap: int size()>();

        return $i0;
    }

    public java.util.Set keySet()
    {
        java.util.Set $r2, $r3;
        java.util.HashMap $r1;
        org.apache.commons.collections.BeanMap r0;

        r0 := @this: org.apache.commons.collections.BeanMap;

        $r1 = r0.<org.apache.commons.collections.BeanMap: java.util.HashMap readMethods>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.util.Set keySet()>();

        $r3 = staticinvoke <org.apache.commons.collections.set.UnmodifiableSet: java.util.Set decorate(java.util.Set)>($r2);

        return $r3;
    }

    public java.util.Set entrySet()
    {
        java.util.Set $r2;
        org.apache.commons.collections.BeanMap$9 $r0;
        org.apache.commons.collections.BeanMap r1;

        r1 := @this: org.apache.commons.collections.BeanMap;

        $r0 = new org.apache.commons.collections.BeanMap$9;

        specialinvoke $r0.<org.apache.commons.collections.BeanMap$9: void <init>(org.apache.commons.collections.BeanMap)>(r1);

        $r2 = staticinvoke <org.apache.commons.collections.set.UnmodifiableSet: java.util.Set decorate(java.util.Set)>($r0);

        return $r2;
    }

    public java.util.Collection values()
    {
        java.util.Iterator $r3;
        java.util.HashMap $r2;
        java.util.ArrayList $r0;
        java.util.List $r4;
        int $i0;
        java.lang.Object $r5;
        org.apache.commons.collections.BeanMap r1;
        boolean $z0;

        r1 := @this: org.apache.commons.collections.BeanMap;

        $r0 = new java.util.ArrayList;

        $r2 = r1.<org.apache.commons.collections.BeanMap: java.util.HashMap readMethods>;

        $i0 = virtualinvoke $r2.<java.util.HashMap: int size()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0);

        $r3 = virtualinvoke r1.<org.apache.commons.collections.BeanMap: java.util.Iterator valueIterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        goto label1;

     label2:
        $r4 = staticinvoke <org.apache.commons.collections.list.UnmodifiableList: java.util.List decorate(java.util.List)>($r0);

        return $r4;
    }

    public java.lang.Class getType(java.lang.String)
    {
        java.util.HashMap $r2;
        java.lang.Object $r3;
        java.lang.Class $r4;
        java.lang.String r1;
        org.apache.commons.collections.BeanMap r0;

        r0 := @this: org.apache.commons.collections.BeanMap;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.commons.collections.BeanMap: java.util.HashMap types>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.Class) $r3;

        return $r4;
    }

    public java.util.Iterator keyIterator()
    {
        java.util.Iterator $r3;
        java.util.Set $r2;
        java.util.HashMap $r1;
        org.apache.commons.collections.BeanMap r0;

        r0 := @this: org.apache.commons.collections.BeanMap;

        $r1 = r0.<org.apache.commons.collections.BeanMap: java.util.HashMap readMethods>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        return $r3;
    }

    public java.util.Iterator valueIterator()
    {
        java.util.Iterator $r1;
        org.apache.commons.collections.BeanMap$10 $r2;
        org.apache.commons.collections.BeanMap r0;

        r0 := @this: org.apache.commons.collections.BeanMap;

        $r1 = virtualinvoke r0.<org.apache.commons.collections.BeanMap: java.util.Iterator keyIterator()>();

        $r2 = new org.apache.commons.collections.BeanMap$10;

        specialinvoke $r2.<org.apache.commons.collections.BeanMap$10: void <init>(org.apache.commons.collections.BeanMap,java.util.Iterator)>(r0, $r1);

        return $r2;
    }

    public java.util.Iterator entryIterator()
    {
        java.util.Iterator $r1;
        org.apache.commons.collections.BeanMap$11 $r2;
        org.apache.commons.collections.BeanMap r0;

        r0 := @this: org.apache.commons.collections.BeanMap;

        $r1 = virtualinvoke r0.<org.apache.commons.collections.BeanMap: java.util.Iterator keyIterator()>();

        $r2 = new org.apache.commons.collections.BeanMap$11;

        specialinvoke $r2.<org.apache.commons.collections.BeanMap$11: void <init>(org.apache.commons.collections.BeanMap,java.util.Iterator)>(r0, $r1);

        return $r2;
    }

    public java.lang.Object getBean()
    {
        java.lang.Object $r1;
        org.apache.commons.collections.BeanMap r0;

        r0 := @this: org.apache.commons.collections.BeanMap;

        $r1 = r0.<org.apache.commons.collections.BeanMap: java.lang.Object bean>;

        return $r1;
    }

    public void setBean(java.lang.Object)
    {
        java.lang.Object r1;
        org.apache.commons.collections.BeanMap r0;

        r0 := @this: org.apache.commons.collections.BeanMap;

        r1 := @parameter0: java.lang.Object;

        r0.<org.apache.commons.collections.BeanMap: java.lang.Object bean> = r1;

        virtualinvoke r0.<org.apache.commons.collections.BeanMap: void reinitialise()>();

        return;
    }

    public java.lang.reflect.Method getReadMethod(java.lang.String)
    {
        java.util.HashMap $r2;
        java.lang.Object $r3;
        java.lang.String r1;
        java.lang.reflect.Method $r4;
        org.apache.commons.collections.BeanMap r0;

        r0 := @this: org.apache.commons.collections.BeanMap;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.commons.collections.BeanMap: java.util.HashMap readMethods>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.reflect.Method) $r3;

        return $r4;
    }

    public java.lang.reflect.Method getWriteMethod(java.lang.String)
    {
        java.util.HashMap $r2;
        java.lang.Object $r3;
        java.lang.String r1;
        java.lang.reflect.Method $r4;
        org.apache.commons.collections.BeanMap r0;

        r0 := @this: org.apache.commons.collections.BeanMap;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.commons.collections.BeanMap: java.util.HashMap writeMethods>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.reflect.Method) $r3;

        return $r4;
    }

    protected java.lang.reflect.Method getReadMethod(java.lang.Object)
    {
        java.lang.Object r1, $r3;
        java.util.HashMap $r2;
        java.lang.reflect.Method $r4;
        org.apache.commons.collections.BeanMap r0;

        r0 := @this: org.apache.commons.collections.BeanMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.commons.collections.BeanMap: java.util.HashMap readMethods>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.reflect.Method) $r3;

        return $r4;
    }

    protected java.lang.reflect.Method getWriteMethod(java.lang.Object)
    {
        java.lang.Object r1, $r3;
        java.util.HashMap $r2;
        java.lang.reflect.Method $r4;
        org.apache.commons.collections.BeanMap r0;

        r0 := @this: org.apache.commons.collections.BeanMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.commons.collections.BeanMap: java.util.HashMap writeMethods>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.reflect.Method) $r3;

        return $r4;
    }

    protected void reinitialise()
    {
        java.util.HashMap $r1, $r2, $r3;
        org.apache.commons.collections.BeanMap r0;

        r0 := @this: org.apache.commons.collections.BeanMap;

        $r1 = r0.<org.apache.commons.collections.BeanMap: java.util.HashMap readMethods>;

        virtualinvoke $r1.<java.util.HashMap: void clear()>();

        $r2 = r0.<org.apache.commons.collections.BeanMap: java.util.HashMap writeMethods>;

        virtualinvoke $r2.<java.util.HashMap: void clear()>();

        $r3 = r0.<org.apache.commons.collections.BeanMap: java.util.HashMap types>;

        virtualinvoke $r3.<java.util.HashMap: void clear()>();

        specialinvoke r0.<org.apache.commons.collections.BeanMap: void initialise()>();

        return;
    }

    private void initialise()
    {
        java.beans.PropertyDescriptor[] $r5;
        java.util.HashMap $r11, $r12, $r13;
        java.beans.BeanInfo $r4;
        int $i0, i1;
        java.lang.String $r7;
        java.lang.reflect.Method $r8, $r9;
        java.beans.IntrospectionException $r14;
        java.beans.PropertyDescriptor r6;
        java.lang.Object $r1, $r2;
        java.lang.Class $r3, $r10;
        org.apache.commons.collections.BeanMap r0;

        r0 := @this: org.apache.commons.collections.BeanMap;

        $r1 = virtualinvoke r0.<org.apache.commons.collections.BeanMap: java.lang.Object getBean()>();

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = virtualinvoke r0.<org.apache.commons.collections.BeanMap: java.lang.Object getBean()>();

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

     label2:
        $r4 = staticinvoke <java.beans.Introspector: java.beans.BeanInfo getBeanInfo(java.lang.Class)>($r3);

        $r5 = interfaceinvoke $r4.<java.beans.BeanInfo: java.beans.PropertyDescriptor[] getPropertyDescriptors()>();

        if $r5 == null goto label7;

        i1 = 0;

     label3:
        $i0 = lengthof $r5;

        if i1 >= $i0 goto label7;

        r6 = $r5[i1];

        if r6 == null goto label6;

        $r7 = virtualinvoke r6.<java.beans.PropertyDescriptor: java.lang.String getName()>();

        $r8 = virtualinvoke r6.<java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>();

        $r9 = virtualinvoke r6.<java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>();

        $r10 = virtualinvoke r6.<java.beans.PropertyDescriptor: java.lang.Class getPropertyType()>();

        if $r8 == null goto label4;

        $r13 = r0.<org.apache.commons.collections.BeanMap: java.util.HashMap readMethods>;

        virtualinvoke $r13.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r8);

     label4:
        if $r9 == null goto label5;

        $r12 = r0.<org.apache.commons.collections.BeanMap: java.util.HashMap writeMethods>;

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r9);

     label5:
        $r11 = r0.<org.apache.commons.collections.BeanMap: java.util.HashMap types>;

        virtualinvoke $r11.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r10);

     label6:
        i1 = i1 + 1;

        goto label3;

     label7:
        goto label9;

     label8:
        $r14 := @caughtexception;

        virtualinvoke r0.<org.apache.commons.collections.BeanMap: void logWarn(java.lang.Exception)>($r14);

     label9:
        return;

        catch java.beans.IntrospectionException from label2 to label7 with label8;
    }

    protected void firePropertyChange(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.Object r1, r2, r3;
        org.apache.commons.collections.BeanMap r0;

        r0 := @this: org.apache.commons.collections.BeanMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        return;
    }

    protected java.lang.Object[] createWriteMethodArguments(java.lang.reflect.Method, java.lang.Object) throws java.lang.IllegalAccessException, java.lang.ClassCastException
    {
        java.lang.Object[] $r12;
        java.lang.Class[] $r1;
        java.lang.IllegalArgumentException $r6, $r9;
        java.lang.reflect.InvocationTargetException $r8;
        int $i0;
        java.lang.InstantiationException $r5;
        java.lang.Class r2, $r3;
        java.lang.Object r11;
        java.lang.String $r7, $r10;
        java.lang.reflect.Method r0;
        org.apache.commons.collections.BeanMap r4;
        boolean $z0;

        r4 := @this: org.apache.commons.collections.BeanMap;

        r0 := @parameter0: java.lang.reflect.Method;

        r11 := @parameter1: java.lang.Object;

     label1:
        if r11 == null goto label2;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        if $r1 == null goto label2;

        $i0 = lengthof $r1;

        if $i0 <= 0 goto label2;

        r2 = $r1[0];

        $r3 = virtualinvoke r11.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r3);

        if $z0 != 0 goto label2;

        r11 = virtualinvoke r4.<org.apache.commons.collections.BeanMap: java.lang.Object convertType(java.lang.Class,java.lang.Object)>(r2, r11);

     label2:
        $r12 = newarray (java.lang.Object)[1];

        $r12[0] = r11;

     label3:
        return $r12;

     label4:
        $r8 := @caughtexception;

        virtualinvoke r4.<org.apache.commons.collections.BeanMap: void logInfo(java.lang.Exception)>($r8);

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = virtualinvoke $r8.<java.lang.reflect.InvocationTargetException: java.lang.String getMessage()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r9;

     label5:
        $r5 := @caughtexception;

        virtualinvoke r4.<org.apache.commons.collections.BeanMap: void logInfo(java.lang.Exception)>($r5);

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = virtualinvoke $r5.<java.lang.InstantiationException: java.lang.String getMessage()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r6;

        catch java.lang.reflect.InvocationTargetException from label1 to label3 with label4;
        catch java.lang.InstantiationException from label1 to label3 with label5;
    }

    protected java.lang.Object convertType(java.lang.Class, java.lang.Object) throws java.lang.InstantiationException, java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.lang.reflect.InvocationTargetException
    {
        java.lang.Object[] $r5;
        java.lang.NoSuchMethodException $r7;
        org.apache.commons.collections.Transformer $r9;
        java.lang.Class[] $r0;
        java.lang.reflect.Constructor $r4;
        java.lang.Object r1, $r6, $r10;
        java.lang.Class $r2, r3;
        org.apache.commons.collections.BeanMap r8;

        r8 := @this: org.apache.commons.collections.BeanMap;

        r3 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Object;

        $r0 = newarray (java.lang.Class)[1];

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r0[0] = $r2;

     label1:
        $r4 = virtualinvoke r3.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r0);

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = r1;

        $r6 = virtualinvoke $r4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r5);

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        $r9 = virtualinvoke r8.<org.apache.commons.collections.BeanMap: org.apache.commons.collections.Transformer getTypeTransformer(java.lang.Class)>(r3);

        if $r9 == null goto label4;

        $r10 = interfaceinvoke $r9.<org.apache.commons.collections.Transformer: java.lang.Object transform(java.lang.Object)>(r1);

        return $r10;

     label4:
        return r1;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }

    protected org.apache.commons.collections.Transformer getTypeTransformer(java.lang.Class)
    {
        org.apache.commons.collections.Transformer $r3;
        java.lang.Class r0;
        java.util.HashMap $r1;
        java.lang.Object $r2;
        org.apache.commons.collections.BeanMap r4;

        r4 := @this: org.apache.commons.collections.BeanMap;

        r0 := @parameter0: java.lang.Class;

        $r1 = <org.apache.commons.collections.BeanMap: java.util.HashMap defaultTransformers>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = (org.apache.commons.collections.Transformer) $r2;

        return $r3;
    }

    protected void logInfo(java.lang.Exception)
    {
        java.io.PrintStream $r1;
        java.lang.StringBuffer $r0, $r2, $r4;
        java.lang.String $r5;
        java.lang.Exception r3;
        org.apache.commons.collections.BeanMap r6;

        r6 := @this: org.apache.commons.collections.BeanMap;

        r3 := @parameter0: java.lang.Exception;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("INFO: Exception: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r5);

        return;
    }

    protected void logWarn(java.lang.Exception)
    {
        java.io.PrintStream $r1;
        java.lang.StringBuffer $r0, $r2, $r4;
        java.lang.String $r5;
        java.lang.Exception r3;
        org.apache.commons.collections.BeanMap r6;

        r6 := @this: org.apache.commons.collections.BeanMap;

        r3 := @parameter0: java.lang.Exception;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("WARN: Exception: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r5);

        virtualinvoke r3.<java.lang.Exception: void printStackTrace()>();

        return;
    }

    static java.util.HashMap access$000(org.apache.commons.collections.BeanMap)
    {
        java.util.HashMap $r1;
        org.apache.commons.collections.BeanMap r0;

        r0 := @parameter0: org.apache.commons.collections.BeanMap;

        $r1 = r0.<org.apache.commons.collections.BeanMap: java.util.HashMap readMethods>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Object[] $r0;
        org.apache.commons.collections.BeanMap$2 $r5;
        org.apache.commons.collections.BeanMap$1 $r2;
        org.apache.commons.collections.BeanMap$4 $r11;
        org.apache.commons.collections.BeanMap$3 $r8;
        org.apache.commons.collections.BeanMap$6 $r17;
        org.apache.commons.collections.BeanMap$5 $r14;
        java.util.HashMap $r1, $r3, $r6, $r9, $r12, $r15, $r18, $r21, $r24;
        org.apache.commons.collections.BeanMap$8 $r23;
        org.apache.commons.collections.BeanMap$7 $r20;
        java.lang.Class $r4, $r7, $r10, $r13, $r16, $r19, $r22, $r25;

        $r0 = newarray (java.lang.Object)[0];

        <org.apache.commons.collections.BeanMap: java.lang.Object[] NULL_ARGUMENTS> = $r0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        <org.apache.commons.collections.BeanMap: java.util.HashMap defaultTransformers> = $r1;

        $r3 = <org.apache.commons.collections.BeanMap: java.util.HashMap defaultTransformers>;

        $r4 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r2 = new org.apache.commons.collections.BeanMap$1;

        specialinvoke $r2.<org.apache.commons.collections.BeanMap$1: void <init>()>();

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r2);

        $r6 = <org.apache.commons.collections.BeanMap: java.util.HashMap defaultTransformers>;

        $r7 = <java.lang.Character: java.lang.Class TYPE>;

        $r5 = new org.apache.commons.collections.BeanMap$2;

        specialinvoke $r5.<org.apache.commons.collections.BeanMap$2: void <init>()>();

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r5);

        $r9 = <org.apache.commons.collections.BeanMap: java.util.HashMap defaultTransformers>;

        $r10 = <java.lang.Byte: java.lang.Class TYPE>;

        $r8 = new org.apache.commons.collections.BeanMap$3;

        specialinvoke $r8.<org.apache.commons.collections.BeanMap$3: void <init>()>();

        virtualinvoke $r9.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r8);

        $r12 = <org.apache.commons.collections.BeanMap: java.util.HashMap defaultTransformers>;

        $r13 = <java.lang.Short: java.lang.Class TYPE>;

        $r11 = new org.apache.commons.collections.BeanMap$4;

        specialinvoke $r11.<org.apache.commons.collections.BeanMap$4: void <init>()>();

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r11);

        $r15 = <org.apache.commons.collections.BeanMap: java.util.HashMap defaultTransformers>;

        $r16 = <java.lang.Integer: java.lang.Class TYPE>;

        $r14 = new org.apache.commons.collections.BeanMap$5;

        specialinvoke $r14.<org.apache.commons.collections.BeanMap$5: void <init>()>();

        virtualinvoke $r15.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, $r14);

        $r18 = <org.apache.commons.collections.BeanMap: java.util.HashMap defaultTransformers>;

        $r19 = <java.lang.Long: java.lang.Class TYPE>;

        $r17 = new org.apache.commons.collections.BeanMap$6;

        specialinvoke $r17.<org.apache.commons.collections.BeanMap$6: void <init>()>();

        virtualinvoke $r18.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, $r17);

        $r21 = <org.apache.commons.collections.BeanMap: java.util.HashMap defaultTransformers>;

        $r22 = <java.lang.Float: java.lang.Class TYPE>;

        $r20 = new org.apache.commons.collections.BeanMap$7;

        specialinvoke $r20.<org.apache.commons.collections.BeanMap$7: void <init>()>();

        virtualinvoke $r21.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r22, $r20);

        $r24 = <org.apache.commons.collections.BeanMap: java.util.HashMap defaultTransformers>;

        $r25 = <java.lang.Double: java.lang.Class TYPE>;

        $r23 = new org.apache.commons.collections.BeanMap$8;

        specialinvoke $r23.<org.apache.commons.collections.BeanMap$8: void <init>()>();

        virtualinvoke $r24.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r25, $r23);

        return;
    }
}
