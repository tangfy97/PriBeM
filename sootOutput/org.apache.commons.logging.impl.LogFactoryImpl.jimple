public class org.apache.commons.logging.impl.LogFactoryImpl extends org.apache.commons.logging.LogFactory
{
    private static final java.lang.String LOGGING_IMPL_LOG4J_LOGGER;
    private static final java.lang.String LOGGING_IMPL_JDK14_LOGGER;
    private static final java.lang.String LOGGING_IMPL_LUMBERJACK_LOGGER;
    private static final java.lang.String LOGGING_IMPL_SIMPLE_LOGGER;
    private static final java.lang.String PKG_IMPL;
    private static final int PKG_LEN;
    public static final java.lang.String LOG_PROPERTY;
    protected static final java.lang.String LOG_PROPERTY_OLD;
    public static final java.lang.String ALLOW_FLAWED_CONTEXT_PROPERTY;
    public static final java.lang.String ALLOW_FLAWED_DISCOVERY_PROPERTY;
    public static final java.lang.String ALLOW_FLAWED_HIERARCHY_PROPERTY;
    private static final java.lang.String[] classesToDiscover;
    private boolean useTCCL;
    private java.lang.String diagnosticPrefix;
    protected java.util.Hashtable attributes;
    protected java.util.Hashtable instances;
    private java.lang.String logClassName;
    protected java.lang.reflect.Constructor logConstructor;
    protected java.lang.Class[] logConstructorSignature;
    protected java.lang.reflect.Method logMethod;
    protected java.lang.Class[] logMethodSignature;
    private boolean allowFlawedContext;
    private boolean allowFlawedDiscovery;
    private boolean allowFlawedHierarchy;
    static java.lang.Class class$java$lang$String;
    static java.lang.Class class$org$apache$commons$logging$LogFactory;
    static java.lang.Class class$org$apache$commons$logging$impl$LogFactoryImpl;
    static java.lang.Class class$org$apache$commons$logging$Log;

    public void <init>()
    {
        java.lang.Class[] $r3, $r5;
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.Class $r4, $r6, $r7, $r8;
        java.util.Hashtable $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        specialinvoke r0.<org.apache.commons.logging.LogFactory: void <init>()>();

        r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean useTCCL> = 1;

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>()>();

        r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.util.Hashtable attributes> = $r1;

        $r2 = new java.util.Hashtable;

        specialinvoke $r2.<java.util.Hashtable: void <init>()>();

        r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.util.Hashtable instances> = $r2;

        r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.reflect.Constructor logConstructor> = null;

        $r3 = newarray (java.lang.Class)[1];

        $r4 = <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$java$lang$String>;

        if $r4 != null goto label1;

        $r7 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$(java.lang.String)>("java.lang.String");

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$java$lang$String> = $r7;

        goto label2;

     label1:
        $r7 = <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$java$lang$String>;

     label2:
        $r3[0] = $r7;

        r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class[] logConstructorSignature> = $r3;

        r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.reflect.Method logMethod> = null;

        $r5 = newarray (java.lang.Class)[1];

        $r6 = <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$org$apache$commons$logging$LogFactory>;

        if $r6 != null goto label3;

        $r8 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$(java.lang.String)>("org.apache.commons.logging.LogFactory");

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$org$apache$commons$logging$LogFactory> = $r8;

        goto label4;

     label3:
        $r8 = <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$org$apache$commons$logging$LogFactory>;

     label4:
        $r5[0] = $r8;

        r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class[] logMethodSignature> = $r5;

        specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void initDiagnostics()>();

        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label5;

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("Instance created.");

     label5:
        return;
    }

    public java.lang.Object getAttribute(java.lang.String)
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.Object $r3;
        java.lang.String r1;
        java.util.Hashtable $r2;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.util.Hashtable attributes>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        return $r3;
    }

    public java.lang.String[] getAttributeNames()
    {
        java.util.Enumeration $r3;
        java.lang.String[] r4;
        java.util.Vector $r0;
        org.apache.commons.logging.impl.LogFactoryImpl r1;
        int $i0, $i1, i2;
        java.lang.Object $r5, $r7;
        java.lang.String $r6, $r8;
        java.util.Hashtable $r2;
        boolean $z0;

        r1 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $r0 = new java.util.Vector;

        specialinvoke $r0.<java.util.Vector: void <init>()>();

        $r2 = r1.<org.apache.commons.logging.impl.LogFactoryImpl: java.util.Hashtable attributes>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.util.Enumeration keys()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r3.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r8 = (java.lang.String) $r7;

        virtualinvoke $r0.<java.util.Vector: void addElement(java.lang.Object)>($r8);

        goto label1;

     label2:
        $i0 = virtualinvoke $r0.<java.util.Vector: int size()>();

        r4 = newarray (java.lang.String)[$i0];

        i2 = 0;

     label3:
        $i1 = lengthof r4;

        if i2 >= $i1 goto label4;

        $r5 = virtualinvoke $r0.<java.util.Vector: java.lang.Object elementAt(int)>(i2);

        $r6 = (java.lang.String) $r5;

        r4[i2] = $r6;

        i2 = i2 + 1;

        goto label3;

     label4:
        return r4;
    }

    public org.apache.commons.logging.Log getInstance(java.lang.Class) throws org.apache.commons.logging.LogConfigurationException
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.Class r1;
        org.apache.commons.logging.Log $r3;
        java.lang.String $r2;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log getInstance(java.lang.String)>($r2);

        return $r3;
    }

    public org.apache.commons.logging.Log getInstance(java.lang.String) throws org.apache.commons.logging.LogConfigurationException
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.Object $r3;
        org.apache.commons.logging.Log $r4, r6;
        java.lang.String r1;
        java.util.Hashtable $r2, $r5;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.util.Hashtable instances>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        r6 = (org.apache.commons.logging.Log) $r3;

        if r6 != null goto label1;

        $r4 = virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log newInstance(java.lang.String)>(r1);

        r6 = $r4;

        $r5 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.util.Hashtable instances>;

        virtualinvoke $r5.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

     label1:
        return r6;
    }

    public void release()
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.util.Hashtable $r1;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("Releasing all known loggers");

        $r1 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.util.Hashtable instances>;

        virtualinvoke $r1.<java.util.Hashtable: void clear()>();

        return;
    }

    public void removeAttribute(java.lang.String)
    {
        java.lang.String r1;
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.util.Hashtable $r2;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.util.Hashtable attributes>;

        virtualinvoke $r2.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }

    public void setAttribute(java.lang.String, java.lang.Object)
    {
        java.lang.reflect.Constructor $r1;
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.Boolean $r6;
        java.lang.Object r2;
        java.lang.String r3, $r5;
        java.util.Hashtable $r4, $r7;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r3 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r1 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.reflect.Constructor logConstructor>;

        if $r1 == null goto label1;

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("setAttribute: call too late; configuration already performed.");

     label1:
        if r2 != null goto label2;

        $r7 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.util.Hashtable attributes>;

        virtualinvoke $r7.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>(r3);

        goto label3;

     label2:
        $r4 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.util.Hashtable attributes>;

        virtualinvoke $r4.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r2);

     label3:
        $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("use_tccl");

        if $z0 == 0 goto label4;

        $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r5);

        $z1 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();

        r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean useTCCL> = $z1;

     label4:
        return;
    }

    protected static java.lang.ClassLoader getContextClassLoader() throws org.apache.commons.logging.LogConfigurationException
    {
        java.lang.ClassLoader $r0;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getContextClassLoader()>();

        return $r0;
    }

    protected static boolean isDiagnosticsEnabled()
    {
        boolean $z0;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        return $z0;
    }

    protected static java.lang.ClassLoader getClassLoader(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.ClassLoader $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)>(r0);

        return $r1;
    }

    private void initDiagnostics()
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.StringBuffer $r3, $r4, $r5, $r6, $r7, $r8;
        int $i0;
        java.lang.Class $r1;
        java.lang.SecurityException $r10;
        java.lang.ClassLoader $r2;
        java.lang.String $r9, r11;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getClassLoader(java.lang.Class)>($r1);

     label1:
        if $r2 != null goto label2;

        r11 = "BOOTLOADER";

        goto label3;

     label2:
        r11 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>($r2);

     label3:
        goto label5;

     label4:
        $r10 := @caughtexception;

        r11 = "UNKNOWN";

     label5:
        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[LogFactoryImpl@");

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" from ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r11);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String diagnosticPrefix> = $r9;

        return;

        catch java.lang.SecurityException from label1 to label3 with label4;
    }

    protected void logDiagnostic(java.lang.String)
    {
        org.apache.commons.logging.impl.LogFactoryImpl r1;
        java.lang.StringBuffer $r0, $r3, $r5;
        java.lang.String $r2, r4, $r6;
        boolean $z0;

        r1 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r4 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label1;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = r1.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String diagnosticPrefix>;

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logRawDiagnostic(java.lang.String)>($r6);

     label1:
        return;
    }

    protected java.lang.String getLogClassName()
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.Class $r3;
        java.lang.String $r1, $r2, $r4;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $r1 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String logClassName>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log discoverLogImplementation(java.lang.String)>($r4);

     label1:
        $r2 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String logClassName>;

        return $r2;
    }

    protected java.lang.reflect.Constructor getLogConstructor() throws org.apache.commons.logging.LogConfigurationException
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.Class $r3;
        java.lang.String $r4;
        java.lang.reflect.Constructor $r1, $r2;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $r1 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.reflect.Constructor logConstructor>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log discoverLogImplementation(java.lang.String)>($r4);

     label1:
        $r2 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.reflect.Constructor logConstructor>;

        return $r2;
    }

    protected boolean isJdk13LumberjackAvailable()
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $z0 = specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean isLogLibraryAvailable(java.lang.String,java.lang.String)>("Jdk13Lumberjack", "org.apache.commons.logging.impl.Jdk13LumberjackLogger");

        return $z0;
    }

    protected boolean isJdk14Available()
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $z0 = specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean isLogLibraryAvailable(java.lang.String,java.lang.String)>("Jdk14", "org.apache.commons.logging.impl.Jdk14Logger");

        return $z0;
    }

    protected boolean isLog4JAvailable()
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $z0 = specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean isLogLibraryAvailable(java.lang.String,java.lang.String)>("Log4J", "org.apache.commons.logging.impl.Log4JLogger");

        return $z0;
    }

    protected org.apache.commons.logging.Log newInstance(java.lang.String) throws org.apache.commons.logging.LogConfigurationException
    {
        java.lang.Throwable $r9, $r12;
        java.lang.Object[] $r2, $r7;
        java.lang.reflect.Constructor $r1, $r4;
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.String r3;
        java.lang.reflect.Method $r6, $r8;
        java.lang.reflect.InvocationTargetException $r11;
        java.lang.Object $r5;
        org.apache.commons.logging.Log r16;
        org.apache.commons.logging.LogConfigurationException $r10, $r13, $r14, $r15;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r3 := @parameter0: java.lang.String;

     label1:
        $r1 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.reflect.Constructor logConstructor>;

        if $r1 != null goto label2;

        r16 = specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log discoverLogImplementation(java.lang.String)>(r3);

        goto label3;

     label2:
        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r3;

        $r4 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.reflect.Constructor logConstructor>;

        $r5 = virtualinvoke $r4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r2);

        r16 = (org.apache.commons.logging.Log) $r5;

     label3:
        $r6 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.reflect.Method logMethod>;

        if $r6 == null goto label4;

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = r0;

        $r8 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.reflect.Method logMethod>;

        virtualinvoke $r8.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r16, $r7);

     label4:
        return r16;

     label5:
        $r15 := @caughtexception;

        throw $r15;

     label6:
        $r11 := @caughtexception;

        $r12 = virtualinvoke $r11.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        if $r12 == null goto label7;

        $r14 = new org.apache.commons.logging.LogConfigurationException;

        specialinvoke $r14.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.Throwable)>($r12);

        throw $r14;

     label7:
        $r13 = new org.apache.commons.logging.LogConfigurationException;

        specialinvoke $r13.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.Throwable)>($r11);

        throw $r13;

     label8:
        $r9 := @caughtexception;

        $r10 = new org.apache.commons.logging.LogConfigurationException;

        specialinvoke $r10.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.Throwable)>($r9);

        throw $r10;

        catch org.apache.commons.logging.LogConfigurationException from label1 to label4 with label5;
        catch java.lang.reflect.InvocationTargetException from label1 to label4 with label6;
        catch java.lang.Throwable from label1 to label4 with label8;
    }

    private static java.lang.ClassLoader getContextClassLoaderInternal() throws org.apache.commons.logging.LogConfigurationException
    {
        org.apache.commons.logging.impl.LogFactoryImpl$1 $r0;
        java.lang.Object $r1;
        java.lang.ClassLoader $r2;

        $r0 = new org.apache.commons.logging.impl.LogFactoryImpl$1;

        specialinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl$1: void <init>()>();

        $r1 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0);

        $r2 = (java.lang.ClassLoader) $r1;

        return $r2;
    }

    private static java.lang.String getSystemProperty(java.lang.String, java.lang.String) throws java.lang.SecurityException
    {
        org.apache.commons.logging.impl.LogFactoryImpl$2 $r0;
        java.lang.Object $r3;
        java.lang.String r1, r2, $r4;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r0 = new org.apache.commons.logging.impl.LogFactoryImpl$2;

        specialinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl$2: void <init>(java.lang.String,java.lang.String)>(r1, r2);

        $r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    private java.lang.ClassLoader getParentClassLoader(java.lang.ClassLoader)
    {
        org.apache.commons.logging.impl.LogFactoryImpl r1;
        org.apache.commons.logging.impl.LogFactoryImpl$3 $r0;
        java.lang.Object $r3;
        java.lang.SecurityException $r5;
        java.lang.ClassLoader r2, $r4;

        r1 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r2 := @parameter0: java.lang.ClassLoader;

     label1:
        $r0 = new org.apache.commons.logging.impl.LogFactoryImpl$3;

        specialinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl$3: void <init>(org.apache.commons.logging.impl.LogFactoryImpl,java.lang.ClassLoader)>(r1, r2);

        $r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0);

        $r4 = (java.lang.ClassLoader) $r3;

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        virtualinvoke r1.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("[SECURITY] Unable to obtain parent classloader");

        return null;

        catch java.lang.SecurityException from label1 to label2 with label3;
    }

    private boolean isLogLibraryAvailable(java.lang.String, java.lang.String)
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.StringBuffer $r5, $r6, $r8, $r9, $r11, $r12, $r13, $r14, $r16, $r17, $r18, $r19, $r22, $r23, $r24, $r25;
        java.lang.String r1, $r3, r7, $r10, $r15, $r20, $r26;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Class $r2;
        org.apache.commons.logging.Log $r4;
        org.apache.commons.logging.LogConfigurationException $r21;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r7 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label1;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Checking for \'");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r7);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'.");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r20);

     label1:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)>(r1, $r3, 0);

        if $r4 != null goto label3;

        $z2 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z2 == 0 goto label2;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Did not find \'");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r7);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'.");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r15);

     label2:
        return 0;

     label3:
        $z1 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z1 == 0 goto label4;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Found \'");

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r10);

     label4:
        return 1;

     label5:
        $r21 := @caughtexception;

        $z3 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z3 == 0 goto label6;

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Logging system \'");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r7);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' is available but not useable.");

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r26);

     label6:
        return 0;

        catch org.apache.commons.logging.LogConfigurationException from label1 to label2 with label5;
        catch org.apache.commons.logging.LogConfigurationException from label3 to label4 with label5;
    }

    private java.lang.String getConfigurationValue(java.lang.String)
    {
        java.lang.SecurityException $r33;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.StringBuffer $r4, $r5, $r6, $r8, $r9, $r10, $r12, $r13, $r14, $r15, $r16, $r18, $r19, $r20, $r23, $r24, $r25, $r26, $r27, $r29, $r30, $r31, $r34, $r35, $r36;
        java.lang.String r1, $r3, $r7, $r11, $r17, $r21, $r22, $r28, $r32, $r37;
        java.lang.Object $r2;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label01;

        $r29 = new java.lang.StringBuffer;

        specialinvoke $r29.<java.lang.StringBuffer: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[ENV] Trying to get configuration for item ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r32);

     label01:
        $r2 = virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Object getAttribute(java.lang.String)>(r1);

        if $r2 == null goto label03;

        $z4 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z4 == 0 goto label02;

        $r23 = new java.lang.StringBuffer;

        specialinvoke $r23.<java.lang.StringBuffer: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[ENV] Found LogFactory attribute [");

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r2);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] for ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r28);

     label02:
        $r22 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        return $r22;

     label03:
        $z1 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z1 == 0 goto label04;

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[ENV] No LogFactory attribute found for ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r21);

     label04:
        $r3 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>(r1, null);

        if $r3 == null goto label06;

        $z3 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z3 == 0 goto label05;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[ENV] Found system property [");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] for ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r17);

     label05:
        return $r3;

     label06:
        $z2 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z2 == 0 goto label07;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[ENV] No system property found for property ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r11);

     label07:
        goto label09;

     label08:
        $r33 := @caughtexception;

        $z5 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z5 == 0 goto label09;

        $r34 = new java.lang.StringBuffer;

        specialinvoke $r34.<java.lang.StringBuffer: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[ENV] Security prevented reading system property ");

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r37);

     label09:
        $z6 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z6 == 0 goto label10;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[ENV] No configuration defined for item ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r7);

     label10:
        return null;

        catch java.lang.SecurityException from label04 to label05 with label08;
        catch java.lang.SecurityException from label06 to label07 with label08;
    }

    private boolean getBooleanConfiguration(java.lang.String, boolean)
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.Boolean $r3;
        java.lang.String r1, $r2;
        boolean $z0, z1;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r1 := @parameter0: java.lang.String;

        z1 := @parameter1: boolean;

        $r2 = specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)>(r1);

        if $r2 != null goto label1;

        return z1;

     label1:
        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r2);

        $z0 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    private void initConfiguration()
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $z0 = specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean getBooleanConfiguration(java.lang.String,boolean)>("org.apache.commons.logging.Log.allowFlawedContext", 1);

        r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean allowFlawedContext> = $z0;

        $z1 = specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean getBooleanConfiguration(java.lang.String,boolean)>("org.apache.commons.logging.Log.allowFlawedDiscovery", 1);

        r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean allowFlawedDiscovery> = $z1;

        $z2 = specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean getBooleanConfiguration(java.lang.String,boolean)>("org.apache.commons.logging.Log.allowFlawedHierarchy", 1);

        r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean allowFlawedHierarchy> = $z2;

        return;
    }

    private org.apache.commons.logging.Log discoverLogImplementation(java.lang.String) throws org.apache.commons.logging.LogConfigurationException
    {
        java.lang.String[] $r3, $r16;
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.StringBuffer $r7, $r10, $r11, $r12, $r13;
        int i0, $i1;
        java.lang.String $r1, r4, $r5, $r9, $r14;
        boolean $z0, $z1, $z2;
        org.apache.commons.logging.Log $r6, r15;
        org.apache.commons.logging.LogConfigurationException $r2, $r8;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r4 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("Discovering a Log implementation...");

     label1:
        specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void initConfiguration()>();

        r15 = null;

        $r1 = specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String findUserSpecifiedLogClassName()>();

        if $r1 == null goto label5;

        $z2 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z2 == 0 goto label2;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Attempting to load user-specified log class \'");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'...");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r14);

     label2:
        $r6 = specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)>($r1, r4, 1);

        if $r6 != null goto label4;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>(java.lang.String)>("User-specified log class \'");

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' cannot be found or is not useable.");

        if $r1 == null goto label3;

        specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void informUponSimilarName(java.lang.StringBuffer,java.lang.String,java.lang.String)>($r7, $r1, "org.apache.commons.logging.impl.Log4JLogger");

        specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void informUponSimilarName(java.lang.StringBuffer,java.lang.String,java.lang.String)>($r7, $r1, "org.apache.commons.logging.impl.Jdk14Logger");

        specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void informUponSimilarName(java.lang.StringBuffer,java.lang.String,java.lang.String)>($r7, $r1, "org.apache.commons.logging.impl.Jdk13LumberjackLogger");

        specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void informUponSimilarName(java.lang.StringBuffer,java.lang.String,java.lang.String)>($r7, $r1, "org.apache.commons.logging.impl.SimpleLog");

     label3:
        $r8 = new org.apache.commons.logging.LogConfigurationException;

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r8.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label4:
        return $r6;

     label5:
        $z1 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z1 == 0 goto label6;

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("No user-specified Log implementation; performing discovery using the standard supported logging implementations...");

     label6:
        i0 = 0;

     label7:
        $r16 = <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String[] classesToDiscover>;

        $i1 = lengthof $r16;

        if i0 >= $i1 goto label8;

        if r15 != null goto label8;

        $r3 = <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String[] classesToDiscover>;

        $r5 = $r3[i0];

        r15 = specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)>($r5, r4, 1);

        i0 = i0 + 1;

        goto label7;

     label8:
        if r15 != null goto label9;

        $r2 = new org.apache.commons.logging.LogConfigurationException;

        specialinvoke $r2.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String)>("No suitable Log implementation");

        throw $r2;

     label9:
        return r15;
    }

    private void informUponSimilarName(java.lang.StringBuffer, java.lang.String, java.lang.String)
    {
        org.apache.commons.logging.impl.LogFactoryImpl r3;
        java.lang.StringBuffer r2;
        int $i0, $i1;
        java.lang.String r0, r1;
        boolean $z0, $z1;

        r3 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r2 := @parameter0: java.lang.StringBuffer;

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $i0 = <org.apache.commons.logging.impl.LogFactoryImpl: int PKG_LEN>;

        $i1 = $i0 + 5;

        $z1 = virtualinvoke r0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, r1, 0, $i1);

        if $z1 == 0 goto label2;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" Did you mean \'");

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'?");

     label2:
        return;
    }

    private java.lang.String findUserSpecifiedLogClassName()
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.StringBuffer $r5, $r6, $r8, $r11, $r12, $r14;
        java.lang.SecurityException $r4, $r10;
        java.lang.String $r3, $r7, $r9, $r13, $r15, r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Object $r1, $r2;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label01;

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("Trying to get log class from attribute \'org.apache.commons.logging.Log\'");

     label01:
        $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Object getAttribute(java.lang.String)>("org.apache.commons.logging.Log");

        $r3 = (java.lang.String) $r1;

        r16 = $r3;

        if $r3 != null goto label03;

        $z3 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z3 == 0 goto label02;

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("Trying to get log class from attribute \'org.apache.commons.logging.log\'");

     label02:
        $r2 = virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Object getAttribute(java.lang.String)>("org.apache.commons.logging.log");

        r16 = (java.lang.String) $r2;

     label03:
        if r16 != null goto label07;

        $z2 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z2 == 0 goto label04;

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("Trying to get log class from system property \'org.apache.commons.logging.Log\'");

     label04:
        r16 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>("org.apache.commons.logging.Log", null);

     label05:
        goto label07;

     label06:
        $r10 := @caughtexception;

        $z5 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z5 == 0 goto label07;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No access allowed to system property \'org.apache.commons.logging.Log\' - ");

        $r13 = virtualinvoke $r10.<java.lang.Throwable: java.lang.String getMessage()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r15);

     label07:
        if r16 != null goto label11;

        $z1 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z1 == 0 goto label08;

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("Trying to get log class from system property \'org.apache.commons.logging.log\'");

     label08:
        r16 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>("org.apache.commons.logging.log", null);

     label09:
        goto label11;

     label10:
        $r4 := @caughtexception;

        $z4 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z4 == 0 goto label11;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No access allowed to system property \'org.apache.commons.logging.log\' - ");

        $r7 = virtualinvoke $r4.<java.lang.Throwable: java.lang.String getMessage()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r9);

     label11:
        if r16 == null goto label12;

        r16 = virtualinvoke r16.<java.lang.String: java.lang.String trim()>();

     label12:
        return r16;

        catch java.lang.SecurityException from label04 to label05 with label06;
        catch java.lang.SecurityException from label08 to label09 with label10;
    }

    private org.apache.commons.logging.Log createLogFromClass(java.lang.String, java.lang.String, boolean) throws org.apache.commons.logging.LogConfigurationException
    {
        java.lang.ClassLoader $r18, r127;
        java.lang.Object[] $r0;
        java.lang.reflect.Constructor $r5, r125;
        java.lang.StringBuffer $r9, $r10, $r11, $r12, $r14, $r15, $r16, $r17, $r20, $r21, $r23, $r25, $r26, $r28, $r29, $r30, $r32, $r33, $r34, $r35, $r36, $r37, $r39, $r40, $r41, $r42, $r43, $r44, $r46, $r47, $r48, $r49, $r52, $r53, $r54, $r55, $r57, $r58, $r59, $r64, $r65, $r67, $r69, $r70, $r71, $r72, $r74, $r75, $r77, $r80, $r81, $r83, $r85, $r86, $r87, $r88, $r90, $r91, $r93, $r96, $r97, $r99, $r101, $r102, $r103, $r104, $r106, $r109, $r110, $r112, $r114, $r115, $r116, $r117, $r119, $r120, $r122, $r128, $r129, $r130, $r131, $r133;
        java.lang.Class[] $r4, $r7;
        java.lang.reflect.Method $r8;
        java.lang.Object $r6;
        java.lang.Class r126, r136;
        java.lang.Throwable $r51, $r61;
        java.lang.String r1, r3, $r13, $r19, $r22, $r24, $r27, $r31, $r38, $r45, $r50, $r56, $r60, $r66, $r68, $r73, $r76, $r78, $r82, $r84, $r89, $r92, $r94, $r98, $r100, $r105, $r107, $r111, $r113, $r118, $r121, $r123, $r132, $r134;
        java.lang.ClassNotFoundException $r95, $r108;
        org.apache.commons.logging.LogConfigurationException $r62;
        java.lang.ExceptionInInitializerError $r63;
        java.net.URL r135;
        boolean $z0, $z1, z2, $z3;
        org.apache.commons.logging.impl.LogFactoryImpl r2;
        java.lang.NoClassDefFoundError $r79;
        org.apache.commons.logging.Log r124;

        r2 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r3 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        z2 := @parameter2: boolean;

        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label01;

        $r46 = new java.lang.StringBuffer;

        specialinvoke $r46.<java.lang.StringBuffer: void <init>()>();

        $r47 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Attempting to instantiate \'");

        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r49 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r50 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r2.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r50);

     label01:
        $r0 = newarray (java.lang.Object)[1];

        $r0[0] = r1;

        r124 = null;

        r125 = null;

        r126 = null;

        r127 = specialinvoke r2.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getBaseClassLoader()>();

     label02:
        $r128 = new java.lang.StringBuffer;

        specialinvoke $r128.<java.lang.StringBuffer: void <init>()>();

        $r129 = virtualinvoke $r128.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Trying to load \'");

        $r130 = virtualinvoke $r129.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r131 = virtualinvoke $r130.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' from classloader ");

        $r132 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r127);

        $r133 = virtualinvoke $r131.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r132);

        $r134 = virtualinvoke $r133.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r2.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r134);

     label03:
        $z3 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z3 == 0 goto label07;

        $r23 = new java.lang.StringBuffer;

        specialinvoke $r23.<java.lang.StringBuffer: void <init>()>();

        $r24 = virtualinvoke r3.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r25 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".class");

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.String toString()>();

        if r127 == null goto label04;

        r135 = virtualinvoke r127.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>($r27);

        goto label05;

     label04:
        $r28 = new java.lang.StringBuffer;

        specialinvoke $r28.<java.lang.StringBuffer: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r27);

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".class");

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.String toString()>();

        r135 = staticinvoke <java.lang.ClassLoader: java.net.URL getSystemResource(java.lang.String)>($r31);

     label05:
        if r135 != null goto label06;

        $r39 = new java.lang.StringBuffer;

        specialinvoke $r39.<java.lang.StringBuffer: void <init>()>();

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Class \'");

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' [");

        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r27);

        $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] cannot be found.");

        $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r2.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r45);

        goto label07;

     label06:
        $r32 = new java.lang.StringBuffer;

        specialinvoke $r32.<java.lang.StringBuffer: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Class \'");

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' was found at \'");

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r135);

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r2.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r38);

     label07:
        r136 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r3, 1, r127);

     label08:
        goto label14;

     label09:
        $r108 := @caughtexception;

        $r109 = new java.lang.StringBuffer;

        specialinvoke $r109.<java.lang.StringBuffer: void <init>()>();

        $r110 = virtualinvoke $r109.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r111 = virtualinvoke $r108.<java.lang.Throwable: java.lang.String getMessage()>();

        $r112 = virtualinvoke $r110.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r111);

        $r113 = virtualinvoke $r112.<java.lang.StringBuffer: java.lang.String toString()>();

        $r114 = new java.lang.StringBuffer;

        specialinvoke $r114.<java.lang.StringBuffer: void <init>()>();

        $r115 = virtualinvoke $r114.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The log adapter \'");

        $r116 = virtualinvoke $r115.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r117 = virtualinvoke $r116.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' is not available via classloader ");

        $r118 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r127);

        $r119 = virtualinvoke $r117.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r118);

        $r120 = virtualinvoke $r119.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r121 = virtualinvoke $r113.<java.lang.String: java.lang.String trim()>();

        $r122 = virtualinvoke $r120.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r121);

        $r123 = virtualinvoke $r122.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r2.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r123);

     label10:
        r136 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r3);

     label11:
        goto label14;

     label12:
        $r95 := @caughtexception;

        $r96 = new java.lang.StringBuffer;

        specialinvoke $r96.<java.lang.StringBuffer: void <init>()>();

        $r97 = virtualinvoke $r96.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r98 = virtualinvoke $r95.<java.lang.Throwable: java.lang.String getMessage()>();

        $r99 = virtualinvoke $r97.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r98);

        $r100 = virtualinvoke $r99.<java.lang.StringBuffer: java.lang.String toString()>();

        $r101 = new java.lang.StringBuffer;

        specialinvoke $r101.<java.lang.StringBuffer: void <init>()>();

        $r102 = virtualinvoke $r101.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The log adapter \'");

        $r103 = virtualinvoke $r102.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r104 = virtualinvoke $r103.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' is not available via the LogFactoryImpl class classloader: ");

        $r105 = virtualinvoke $r100.<java.lang.String: java.lang.String trim()>();

        $r106 = virtualinvoke $r104.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r105);

        $r107 = virtualinvoke $r106.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r2.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r107);

     label13:
        goto label24;

     label14:
        $r4 = r2.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class[] logConstructorSignature>;

        $r5 = virtualinvoke r136.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r4);

        r125 = $r5;

        $r6 = virtualinvoke $r5.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r0);

        $z1 = $r6 instanceof org.apache.commons.logging.Log;

        if $z1 == 0 goto label16;

        r126 = r136;

        r124 = (org.apache.commons.logging.Log) $r6;

     label15:
        goto label24;

     label16:
        specialinvoke r2.<org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)>(r127, r136);

     label17:
        goto label22;

     label18:
        $r79 := @caughtexception;

        $r80 = new java.lang.StringBuffer;

        specialinvoke $r80.<java.lang.StringBuffer: void <init>()>();

        $r81 = virtualinvoke $r80.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r82 = virtualinvoke $r79.<java.lang.Throwable: java.lang.String getMessage()>();

        $r83 = virtualinvoke $r81.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r82);

        $r84 = virtualinvoke $r83.<java.lang.StringBuffer: java.lang.String toString()>();

        $r85 = new java.lang.StringBuffer;

        specialinvoke $r85.<java.lang.StringBuffer: void <init>()>();

        $r86 = virtualinvoke $r85.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The log adapter \'");

        $r87 = virtualinvoke $r86.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r88 = virtualinvoke $r87.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' is missing dependencies when loaded via classloader ");

        $r89 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r127);

        $r90 = virtualinvoke $r88.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r89);

        $r91 = virtualinvoke $r90.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r92 = virtualinvoke $r84.<java.lang.String: java.lang.String trim()>();

        $r93 = virtualinvoke $r91.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r92);

        $r94 = virtualinvoke $r93.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r2.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r94);

        goto label24;

     label19:
        $r63 := @caughtexception;

        $r64 = new java.lang.StringBuffer;

        specialinvoke $r64.<java.lang.StringBuffer: void <init>()>();

        $r65 = virtualinvoke $r64.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r66 = virtualinvoke $r63.<java.lang.Throwable: java.lang.String getMessage()>();

        $r67 = virtualinvoke $r65.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r66);

        $r68 = virtualinvoke $r67.<java.lang.StringBuffer: java.lang.String toString()>();

        $r69 = new java.lang.StringBuffer;

        specialinvoke $r69.<java.lang.StringBuffer: void <init>()>();

        $r70 = virtualinvoke $r69.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The log adapter \'");

        $r71 = virtualinvoke $r70.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r72 = virtualinvoke $r71.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' is unable to initialize itself when loaded via classloader ");

        $r73 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r127);

        $r74 = virtualinvoke $r72.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r73);

        $r75 = virtualinvoke $r74.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r76 = virtualinvoke $r68.<java.lang.String: java.lang.String trim()>();

        $r77 = virtualinvoke $r75.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r76);

        $r78 = virtualinvoke $r77.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r2.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r78);

        goto label24;

     label20:
        $r62 := @caughtexception;

        throw $r62;

     label21:
        $r61 := @caughtexception;

        specialinvoke r2.<org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedDiscovery(java.lang.String,java.lang.ClassLoader,java.lang.Throwable)>(r3, r127, $r61);

     label22:
        if r127 != null goto label23;

        goto label24;

     label23:
        r127 = specialinvoke r2.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getParentClassLoader(java.lang.ClassLoader)>(r127);

        goto label02;

     label24:
        if r124 == null goto label29;

        if z2 == 0 goto label29;

        r2.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String logClassName> = r3;

        r2.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.reflect.Constructor logConstructor> = r125;

     label25:
        $r7 = r2.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class[] logMethodSignature>;

        $r8 = virtualinvoke r126.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("setLogFactory", $r7);

        r2.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.reflect.Method logMethod> = $r8;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Found method setLogFactory(LogFactory) in \'");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r2.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r13);

     label26:
        goto label28;

     label27:
        $r51 := @caughtexception;

        r2.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.reflect.Method logMethod> = null;

        $r52 = new java.lang.StringBuffer;

        specialinvoke $r52.<java.lang.StringBuffer: void <init>()>();

        $r53 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[INFO] \'");

        $r54 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r55 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' from classloader ");

        $r56 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r127);

        $r57 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r56);

        $r58 = virtualinvoke $r57.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" does not declare optional method ");

        $r59 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("setLogFactory(LogFactory)");

        $r60 = virtualinvoke $r59.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r2.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r60);

     label28:
        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Log adapter \'");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' from classloader ");

        $r18 = virtualinvoke r126.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r19 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>($r18);

        $r20 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" has been selected for use.");

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r2.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r22);

     label29:
        return r124;

        catch java.lang.ClassNotFoundException from label07 to label08 with label09;
        catch java.lang.ClassNotFoundException from label10 to label11 with label12;
        catch java.lang.NoClassDefFoundError from label03 to label13 with label18;
        catch java.lang.NoClassDefFoundError from label14 to label15 with label18;
        catch java.lang.NoClassDefFoundError from label16 to label17 with label18;
        catch java.lang.ExceptionInInitializerError from label03 to label13 with label19;
        catch java.lang.ExceptionInInitializerError from label14 to label15 with label19;
        catch java.lang.ExceptionInInitializerError from label16 to label17 with label19;
        catch org.apache.commons.logging.LogConfigurationException from label03 to label13 with label20;
        catch org.apache.commons.logging.LogConfigurationException from label14 to label15 with label20;
        catch org.apache.commons.logging.LogConfigurationException from label16 to label17 with label20;
        catch java.lang.Throwable from label03 to label13 with label21;
        catch java.lang.Throwable from label14 to label15 with label21;
        catch java.lang.Throwable from label16 to label17 with label21;
        catch java.lang.Throwable from label25 to label26 with label27;
    }

    private java.lang.ClassLoader getBaseClassLoader() throws org.apache.commons.logging.LogConfigurationException
    {
        org.apache.commons.logging.impl.LogFactoryImpl r2;
        java.lang.Class $r0, $r7;
        java.lang.ClassLoader $r1, $r3, $r4;
        org.apache.commons.logging.LogConfigurationException $r5, $r6;
        boolean $z0, $z1, $z2, $z3, $z4;

        r2 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $r0 = <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$org$apache$commons$logging$impl$LogFactoryImpl>;

        if $r0 != null goto label1;

        $r7 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$(java.lang.String)>("org.apache.commons.logging.impl.LogFactoryImpl");

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$org$apache$commons$logging$impl$LogFactoryImpl> = $r7;

        goto label2;

     label1:
        $r7 = <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$org$apache$commons$logging$impl$LogFactoryImpl>;

     label2:
        $r1 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getClassLoader(java.lang.Class)>($r7);

        $z0 = r2.<org.apache.commons.logging.impl.LogFactoryImpl: boolean useTCCL>;

        if $z0 != 0 goto label3;

        return $r1;

     label3:
        $r3 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getContextClassLoaderInternal()>();

        $r4 = specialinvoke r2.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getLowestClassLoader(java.lang.ClassLoader,java.lang.ClassLoader)>($r3, $r1);

        if $r4 != null goto label6;

        $z3 = r2.<org.apache.commons.logging.impl.LogFactoryImpl: boolean allowFlawedContext>;

        if $z3 == 0 goto label5;

        $z4 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z4 == 0 goto label4;

        virtualinvoke r2.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("[WARNING] the context classloader is not part of a parent-child relationship with the classloader that loaded LogFactoryImpl.");

     label4:
        return $r3;

     label5:
        $r6 = new org.apache.commons.logging.LogConfigurationException;

        specialinvoke $r6.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String)>("Bad classloader hierarchy; LogFactoryImpl was loaded via a classloader that is not related to the current context classloader.");

        throw $r6;

     label6:
        if $r4 == $r3 goto label8;

        $z1 = r2.<org.apache.commons.logging.impl.LogFactoryImpl: boolean allowFlawedContext>;

        if $z1 == 0 goto label7;

        $z2 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z2 == 0 goto label8;

        virtualinvoke r2.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("Warning: the context classloader is an ancestor of the classloader that loaded LogFactoryImpl; it should be the same or a descendant. The application using commons-logging should ensure the context classloader is used correctly.");

        goto label8;

     label7:
        $r5 = new org.apache.commons.logging.LogConfigurationException;

        specialinvoke $r5.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String)>("Bad classloader hierarchy; LogFactoryImpl was loaded via a classloader that is not related to the current context classloader.");

        throw $r5;

     label8:
        return $r4;
    }

    private java.lang.ClassLoader getLowestClassLoader(java.lang.ClassLoader, java.lang.ClassLoader)
    {
        org.apache.commons.logging.impl.LogFactoryImpl r2;
        java.lang.ClassLoader r0, r1, r3, r4;

        r2 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r0 := @parameter0: java.lang.ClassLoader;

        r1 := @parameter1: java.lang.ClassLoader;

        if r0 != null goto label1;

        return r1;

     label1:
        if r1 != null goto label2;

        return r0;

     label2:
        r3 = r0;

     label3:
        if r3 == null goto label5;

        if r3 != r1 goto label4;

        return r0;

     label4:
        r3 = virtualinvoke r3.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

        goto label3;

     label5:
        r4 = r1;

     label6:
        if r4 == null goto label8;

        if r4 != r0 goto label7;

        return r1;

     label7:
        r4 = virtualinvoke r4.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

        goto label6;

     label8:
        return null;
    }

    private void handleFlawedDiscovery(java.lang.String, java.lang.ClassLoader, java.lang.Throwable)
    {
        boolean $z0, $z1, $z2, $z3;
        java.lang.reflect.InvocationTargetException r15;
        java.lang.ClassLoader r37;
        java.lang.Throwable r2, $r16, $r27;
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.StringBuffer $r3, $r4, $r6, $r7, $r10, $r11, $r13, $r17, $r18, $r21, $r22, $r24, $r28, $r29, $r32, $r33, $r35;
        java.lang.String r5, $r9, $r12, $r14, $r20, $r23, $r25, $r31, $r34, $r36;
        java.lang.Class $r8, $r19, $r30;
        org.apache.commons.logging.LogConfigurationException $r1;
        java.lang.ExceptionInInitializerError r26;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r5 := @parameter0: java.lang.String;

        r37 := @parameter1: java.lang.ClassLoader;

        r2 := @parameter2: java.lang.Throwable;

        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label1;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not instantiate Log \'");

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' -- ");

        $r8 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r12 = virtualinvoke r2.<java.lang.Throwable: java.lang.String getLocalizedMessage()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r14);

        $z1 = r2 instanceof java.lang.reflect.InvocationTargetException;

        if $z1 == 0 goto label1;

        r15 = (java.lang.reflect.InvocationTargetException) r2;

        $r16 = virtualinvoke r15.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        if $r16 == null goto label1;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("... InvocationTargetException: ");

        $r19 = virtualinvoke $r16.<java.lang.Object: java.lang.Class getClass()>();

        $r20 = virtualinvoke $r19.<java.lang.Class: java.lang.String getName()>();

        $r21 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r23 = virtualinvoke $r16.<java.lang.Throwable: java.lang.String getLocalizedMessage()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r25);

        $z2 = $r16 instanceof java.lang.ExceptionInInitializerError;

        if $z2 == 0 goto label1;

        r26 = (java.lang.ExceptionInInitializerError) $r16;

        $r27 = virtualinvoke r26.<java.lang.ExceptionInInitializerError: java.lang.Throwable getException()>();

        if $r27 == null goto label1;

        $r28 = new java.lang.StringBuffer;

        specialinvoke $r28.<java.lang.StringBuffer: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("... ExceptionInInitializerError: ");

        $r30 = virtualinvoke $r27.<java.lang.Object: java.lang.Class getClass()>();

        $r31 = virtualinvoke $r30.<java.lang.Class: java.lang.String getName()>();

        $r32 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r34 = virtualinvoke $r27.<java.lang.Throwable: java.lang.String getLocalizedMessage()>();

        $r35 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r36);

     label1:
        $z3 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean allowFlawedDiscovery>;

        if $z3 != 0 goto label2;

        $r1 = new org.apache.commons.logging.LogConfigurationException;

        specialinvoke $r1.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.Throwable)>(r2);

        throw $r1;

     label2:
        return;
    }

    private void handleFlawedHierarchy(java.lang.ClassLoader, java.lang.Class) throws org.apache.commons.logging.LogConfigurationException
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z7, $z8;
        java.lang.ClassLoader $r24, r30;
        java.lang.Throwable $r40;
        org.apache.commons.logging.impl.LogFactoryImpl r4;
        java.lang.StringBuffer $r5, $r8, $r13, $r17, $r25, $r26, $r28, $r29, $r32, $r33, $r34, $r36, $r41, $r42, $r43, $r44;
        int i0, $i1;
        java.lang.String $r1, $r6, $r7, $r9, $r11, $r12, $r15, $r16, $r19, $r21, $r22, $r27, $r31, $r35, $r37, $r39, $r45;
        java.lang.Class[] $r3;
        java.lang.Class $r0, r2, $r14, $r18, $r23, $r38, $r46, $r47, $r48, $r49;
        org.apache.commons.logging.LogConfigurationException $r10, $r20;

        r4 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r30 := @parameter0: java.lang.ClassLoader;

        r2 := @parameter1: java.lang.Class;

        z7 = 0;

        $r0 = <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$org$apache$commons$logging$Log>;

        if $r0 != null goto label01;

        $r46 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$(java.lang.String)>("org.apache.commons.logging.Log");

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$org$apache$commons$logging$Log> = $r46;

        goto label02;

     label01:
        $r46 = <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$org$apache$commons$logging$Log>;

     label02:
        $r1 = virtualinvoke $r46.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke r2.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        i0 = 0;

     label03:
        $i1 = lengthof $r3;

        if i0 >= $i1 goto label05;

        $r38 = $r3[i0];

        $r39 = virtualinvoke $r38.<java.lang.Class: java.lang.String getName()>();

        $z6 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r39);

        if $z6 == 0 goto label04;

        z7 = 1;

        goto label05;

     label04:
        i0 = i0 + 1;

        goto label03;

     label05:
        if z7 == 0 goto label18;

        $z3 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z3 == 0 goto label11;

     label06:
        $r23 = <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$org$apache$commons$logging$Log>;

        if $r23 != null goto label07;

        $r47 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$(java.lang.String)>("org.apache.commons.logging.Log");

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$org$apache$commons$logging$Log> = $r47;

        goto label08;

     label07:
        $r47 = <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$org$apache$commons$logging$Log>;

     label08:
        $r24 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getClassLoader(java.lang.Class)>($r47);

        $r25 = new java.lang.StringBuffer;

        specialinvoke $r25.<java.lang.StringBuffer: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Class \'");

        $r27 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' was found in classloader ");

        $r31 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r30);

        $r32 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(". It is bound to a Log interface which is not");

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" the one loaded from classloader ");

        $r35 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>($r24);

        $r36 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r4.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r37);

     label09:
        goto label11;

     label10:
        $r40 := @caughtexception;

        $r41 = new java.lang.StringBuffer;

        specialinvoke $r41.<java.lang.StringBuffer: void <init>()>();

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Error while trying to output diagnostics about bad class \'");

        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r2);

        $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r4.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r45);

     label11:
        $z8 = r4.<org.apache.commons.logging.impl.LogFactoryImpl: boolean allowFlawedHierarchy>;

        if $z8 != 0 goto label15;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Terminating logging for this context ");

        virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("due to bad log hierarchy. ");

        virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("You have more than one version of \'");

        $r18 = <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$org$apache$commons$logging$Log>;

        if $r18 != null goto label12;

        $r48 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$(java.lang.String)>("org.apache.commons.logging.Log");

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$org$apache$commons$logging$Log> = $r48;

        goto label13;

     label12:
        $r48 = <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$org$apache$commons$logging$Log>;

     label13:
        $r19 = virtualinvoke $r48.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r19);

        virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' visible.");

        $z5 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z5 == 0 goto label14;

        $r22 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r4.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r22);

     label14:
        $r20 = new org.apache.commons.logging.LogConfigurationException;

        $r21 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r20.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String)>($r21);

        throw $r20;

     label15:
        $z4 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z4 == 0 goto label21;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Warning: bad log hierarchy. ");

        virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("You have more than one version of \'");

        $r14 = <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$org$apache$commons$logging$Log>;

        if $r14 != null goto label16;

        $r49 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$(java.lang.String)>("org.apache.commons.logging.Log");

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$org$apache$commons$logging$Log> = $r49;

        goto label17;

     label16:
        $r49 = <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class class$org$apache$commons$logging$Log>;

     label17:
        $r15 = virtualinvoke $r49.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' visible.");

        $r16 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r4.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r16);

        goto label21;

     label18:
        $z0 = r4.<org.apache.commons.logging.impl.LogFactoryImpl: boolean allowFlawedDiscovery>;

        if $z0 != 0 goto label20;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Terminating logging for this context. ");

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Log class \'");

        $r9 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' does not implement the Log interface.");

        $z2 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z2 == 0 goto label19;

        $r12 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r4.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r12);

     label19:
        $r10 = new org.apache.commons.logging.LogConfigurationException;

        $r11 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r10.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String)>($r11);

        throw $r10;

     label20:
        $z1 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z1 == 0 goto label21;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[WARNING] Log class \'");

        $r6 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' does not implement the Log interface.");

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r4.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r7);

     label21:
        return;

        catch java.lang.Throwable from label06 to label09 with label10;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static java.lang.ClassLoader access$000() throws org.apache.commons.logging.LogConfigurationException
    {
        java.lang.ClassLoader $r0;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.ClassLoader directGetContextClassLoader()>();

        return $r0;
    }

    static void <clinit>()
    {
        int $i0;
        java.lang.String[] $r1;
        java.lang.String $r0;

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String ALLOW_FLAWED_HIERARCHY_PROPERTY> = "org.apache.commons.logging.Log.allowFlawedHierarchy";

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String ALLOW_FLAWED_DISCOVERY_PROPERTY> = "org.apache.commons.logging.Log.allowFlawedDiscovery";

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String ALLOW_FLAWED_CONTEXT_PROPERTY> = "org.apache.commons.logging.Log.allowFlawedContext";

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String LOG_PROPERTY_OLD> = "org.apache.commons.logging.log";

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String LOG_PROPERTY> = "org.apache.commons.logging.Log";

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String PKG_IMPL> = "org.apache.commons.logging.impl.";

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String LOGGING_IMPL_SIMPLE_LOGGER> = "org.apache.commons.logging.impl.SimpleLog";

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String LOGGING_IMPL_LUMBERJACK_LOGGER> = "org.apache.commons.logging.impl.Jdk13LumberjackLogger";

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String LOGGING_IMPL_JDK14_LOGGER> = "org.apache.commons.logging.impl.Jdk14Logger";

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String LOGGING_IMPL_LOG4J_LOGGER> = "org.apache.commons.logging.impl.Log4JLogger";

        $r0 = "org.apache.commons.logging.impl.";

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        <org.apache.commons.logging.impl.LogFactoryImpl: int PKG_LEN> = $i0;

        $r1 = newarray (java.lang.String)[4];

        $r1[0] = "org.apache.commons.logging.impl.Log4JLogger";

        $r1[1] = "org.apache.commons.logging.impl.Jdk14Logger";

        $r1[2] = "org.apache.commons.logging.impl.Jdk13LumberjackLogger";

        $r1[3] = "org.apache.commons.logging.impl.SimpleLog";

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String[] classesToDiscover> = $r1;

        return;
    }
}
