public abstract class org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream extends org.apache.cxf.io.AbstractThresholdOutputStream
{
    protected boolean cachingForRetransmission;
    protected final boolean chunking;
    protected org.apache.cxf.io.CacheAndWriteOutputStream cachedStream;
    protected org.apache.cxf.message.Message outMessage;
    protected java.lang.String conduitName;
    protected java.net.URI url;
    final org.apache.cxf.transport.http.HTTPConduit this$0;

    protected void <init>(org.apache.cxf.transport.http.HTTPConduit, org.apache.cxf.message.Message, boolean, boolean, int, java.lang.String, java.net.URI)
    {
        org.apache.cxf.message.Message r2;
        org.apache.cxf.transport.http.HTTPConduit r1;
        org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream r0;
        int i0;
        java.lang.String r3;
        java.net.URI r4;
        boolean z0, z1;

        r0 := @this: org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream;

        r1 := @parameter0: org.apache.cxf.transport.http.HTTPConduit;

        r2 := @parameter1: org.apache.cxf.message.Message;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        i0 := @parameter4: int;

        r3 := @parameter5: java.lang.String;

        r4 := @parameter6: java.net.URI;

        r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.transport.http.HTTPConduit this$0> = r1;

        specialinvoke r0.<org.apache.cxf.io.AbstractThresholdOutputStream: void <init>(int)>(i0);

        r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.message.Message outMessage> = r2;

        r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: boolean cachingForRetransmission> = z0;

        r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: boolean chunking> = z1;

        r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: java.lang.String conduitName> = r3;

        r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: java.net.URI url> = r4;

        return;
    }

    protected void <init>(org.apache.cxf.transport.http.HTTPConduit, org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream)
    {
        org.apache.cxf.message.Message $r3;
        org.apache.cxf.transport.http.HTTPConduit r1;
        org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream r0, r2;
        int $i0;
        java.lang.String $r4;
        java.net.URI $r5;
        boolean $z0, $z1;

        r0 := @this: org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream;

        r1 := @parameter0: org.apache.cxf.transport.http.HTTPConduit;

        r2 := @parameter1: org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream;

        r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.transport.http.HTTPConduit this$0> = r1;

        $i0 = r2.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: int threshold>;

        specialinvoke r0.<org.apache.cxf.io.AbstractThresholdOutputStream: void <init>(int)>($i0);

        $r3 = r2.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.message.Message outMessage>;

        r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.message.Message outMessage> = $r3;

        $z0 = r2.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: boolean cachingForRetransmission>;

        r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: boolean cachingForRetransmission> = $z0;

        $z1 = r2.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: boolean chunking>;

        r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: boolean chunking> = $z1;

        $r4 = r2.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: java.lang.String conduitName>;

        r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: java.lang.String conduitName> = $r4;

        $r5 = r2.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: java.net.URI url>;

        r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: java.net.URI url> = $r5;

        return;
    }

    public void thresholdNotReached()
    {
        org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream r0;
        org.apache.cxf.helpers.LoadingByteArrayOutputStream $r1;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream;

        $z0 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: boolean chunking>;

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.helpers.LoadingByteArrayOutputStream buffer>;

        $i0 = virtualinvoke $r1.<org.apache.cxf.helpers.LoadingByteArrayOutputStream: int size()>();

        virtualinvoke r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void setFixedLengthStreamingMode(int)>($i0);

     label1:
        return;
    }

    protected abstract void setupWrappedStream() throws java.io.IOException;

    protected abstract org.apache.cxf.transport.https.HttpsURLConnectionInfo getHttpsURLConnectionInfo() throws java.io.IOException;

    protected abstract void setProtocolHeaders() throws java.io.IOException;

    protected abstract void setFixedLengthStreamingMode(int);

    protected abstract int getResponseCode() throws java.io.IOException;

    protected abstract java.lang.String getResponseMessage() throws java.io.IOException;

    protected abstract void updateResponseHeaders(org.apache.cxf.message.Message) throws java.io.IOException;

    protected abstract void handleResponseAsync() throws java.io.IOException;

    protected abstract void closeInputStream() throws java.io.IOException;

    protected abstract boolean usingProxy();

    protected abstract java.io.InputStream getInputStream() throws java.io.IOException;

    protected abstract java.io.InputStream getPartialResponse() throws java.io.IOException;

    protected abstract void setupNewConnection(java.lang.String) throws java.io.IOException;

    protected abstract void retransmitStream() throws java.io.IOException;

    protected abstract void updateCookiesBeforeRetransmit() throws java.io.IOException;

    protected void handleNoOutput() throws java.io.IOException
    {
        org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream r0;

        r0 := @this: org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream;

        return;
    }

    protected void handleResponseOnWorkqueue(boolean, boolean) throws java.io.IOException
    {
        java.lang.Runnable r28;
        byte $b1;
        boolean z0, $z1, z2, $z3, $z4, $z5;
        java.util.logging.Logger $r26, $r27;
        org.apache.cxf.workqueue.AutomaticWorkQueue $r13, r30;
        java.lang.StringBuilder $r19, $r20, $r33;
        org.apache.cxf.workqueue.WorkQueueManager $r23;
        org.apache.cxf.Bus $r11;
        org.apache.cxf.transport.http.HTTPConduit $r3;
        long l0;
        java.util.concurrent.RejectedExecutionException $r25;
        int $i2;
        java.lang.Boolean $r22;
        java.lang.String $r18, $r21;
        java.util.concurrent.Executor r29;
        org.apache.cxf.message.Message $r2, $r5, $r8, $r14;
        org.apache.cxf.message.Exchange $r6, $r9, $r15;
        org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream$1 $r31;
        org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream r1;
        java.lang.Object $r7, $r10, $r12;
        java.lang.Class $r17;
        org.apache.cxf.transports.http.configuration.HTTPClientPolicy $r4;
        org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream$2 $r32;

        r1 := @this: org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream;

        z2 := @parameter0: boolean;

        z0 := @parameter1: boolean;

        $r31 = new org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream$1;

        specialinvoke $r31.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream$1: void <init>(org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream)>(r1);

        r28 = $r31;

        $r3 = r1.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.transport.http.HTTPConduit this$0>;

        $r2 = r1.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.message.Message outMessage>;

        $r4 = virtualinvoke $r3.<org.apache.cxf.transport.http.HTTPConduit: org.apache.cxf.transports.http.configuration.HTTPClientPolicy getClient(org.apache.cxf.message.Message)>($r2);

     label01:
        $r5 = r1.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.message.Message outMessage>;

        $r6 = interfaceinvoke $r5.<org.apache.cxf.message.Message: org.apache.cxf.message.Exchange getExchange()>();

        $r7 = interfaceinvoke $r6.<org.apache.cxf.message.Exchange: java.lang.Object get(java.lang.Class)>(class "Ljava/util/concurrent/Executor;");

        r29 = (java.util.concurrent.Executor) $r7;

        if z0 == 0 goto label02;

        if r29 == null goto label02;

        $r32 = new org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream$2;

        specialinvoke $r32.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream$2: void <init>(org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream,java.util.concurrent.Executor,java.lang.Runnable)>(r1, r29, $r31);

        r28 = $r32;

     label02:
        if r29 == null goto label03;

        if z0 == 0 goto label08;

     label03:
        $r8 = r1.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.message.Message outMessage>;

        $r9 = interfaceinvoke $r8.<org.apache.cxf.message.Message: org.apache.cxf.message.Exchange getExchange()>();

        $r10 = interfaceinvoke $r9.<org.apache.cxf.message.Exchange: java.lang.Object get(java.lang.Class)>(class "Lorg/apache/cxf/Bus;");

        $r11 = (org.apache.cxf.Bus) $r10;

        $r12 = interfaceinvoke $r11.<org.apache.cxf.Bus: java.lang.Object getExtension(java.lang.Class)>(class "Lorg/apache/cxf/workqueue/WorkQueueManager;");

        $r23 = (org.apache.cxf.workqueue.WorkQueueManager) $r12;

        $r13 = interfaceinvoke $r23.<org.apache.cxf.workqueue.WorkQueueManager: org.apache.cxf.workqueue.AutomaticWorkQueue getNamedWorkQueue(java.lang.String)>("http-conduit");

        r30 = $r13;

        if $r13 != null goto label04;

        r30 = interfaceinvoke $r23.<org.apache.cxf.workqueue.WorkQueueManager: org.apache.cxf.workqueue.AutomaticWorkQueue getAutomaticWorkQueue()>();

     label04:
        l0 = 1000L;

        if $r4 == null goto label05;

        $z1 = virtualinvoke $r4.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isSetAsyncExecuteTimeout()>();

        if $z1 == 0 goto label05;

        l0 = virtualinvoke $r4.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: long getAsyncExecuteTimeout()>();

     label05:
        $b1 = l0 cmp 0L;

        $i2 = (int) $b1;

        if $i2 <= 0 goto label06;

        interfaceinvoke r30.<org.apache.cxf.workqueue.AutomaticWorkQueue: void execute(java.lang.Runnable,long)>(r28, l0);

        goto label07;

     label06:
        interfaceinvoke r30.<org.apache.cxf.workqueue.AutomaticWorkQueue: void execute(java.lang.Runnable)>(r28);

     label07:
        goto label09;

     label08:
        $r14 = r1.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.message.Message outMessage>;

        $r15 = interfaceinvoke $r14.<org.apache.cxf.message.Message: org.apache.cxf.message.Exchange getExchange()>();

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r17 = class "Ljava/util/concurrent/Executor;";

        $r18 = virtualinvoke $r17.<java.lang.Class: java.lang.String getName()>();

        $r19 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".USING_SPECIFIED");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $r22 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke $r15.<org.apache.cxf.message.Exchange: java.lang.Object put(java.lang.Object,java.lang.Object)>($r21, $r22);

        interfaceinvoke r29.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r28);

     label09:
        goto label13;

     label10:
        $r25 := @caughtexception;

        if z2 == 0 goto label11;

        if $r4 == null goto label11;

        $z3 = virtualinvoke $r4.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isSetAsyncExecuteTimeoutRejection()>();

        if $z3 == 0 goto label11;

        $z4 = virtualinvoke $r4.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isAsyncExecuteTimeoutRejection()>();

        if $z4 == 0 goto label11;

        throw $r25;

     label11:
        $z5 = staticinvoke <org.apache.cxf.transport.http.HTTPConduit: boolean access$100()>();

        if $z5 != 0 goto label12;

        $r27 = <org.apache.cxf.transport.http.HTTPConduit: java.util.logging.Logger LOG>;

        virtualinvoke $r27.<java.util.logging.Logger: void warning(java.lang.String)>("EXECUTOR_FULL_WARNING");

        staticinvoke <org.apache.cxf.transport.http.HTTPConduit: boolean access$102(boolean)>(1);

     label12:
        $r26 = <org.apache.cxf.transport.http.HTTPConduit: java.util.logging.Logger LOG>;

        virtualinvoke $r26.<java.util.logging.Logger: void fine(java.lang.String)>("EXECUTOR_FULL");

        virtualinvoke r1.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void handleResponseInternal()>();

     label13:
        return;

        catch java.util.concurrent.RejectedExecutionException from label01 to label09 with label10;
    }

    protected void retransmit(java.lang.String) throws java.io.IOException
    {
        byte[] $r17;
        org.apache.cxf.transport.http.HTTPConduit $r9;
        long $l0, $l2;
        java.util.logging.Level $r4;
        byte $b1;
        int $i3, $i4;
        java.lang.String r1, $r10, $r19, $r22, $r24;
        org.apache.cxf.io.CacheAndWriteOutputStream $r3, $r16, $r20, $r21;
        boolean $z0, $z1;
        org.apache.cxf.message.Message $r2;
        java.util.logging.Logger $r5, $r7;
        org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream r0;
        java.lang.StringBuilder $r8, $r11, $r12, $r13, $r14, $r18, $r23;

        r0 := @this: org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void setupNewConnection(java.lang.String)>(r1);

        $r2 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.message.Message outMessage>;

        interfaceinvoke $r2.<org.apache.cxf.message.Message: java.lang.Object put(java.lang.Object,java.lang.Object)>("http.retransmit.url", r1);

        $r3 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.io.CacheAndWriteOutputStream cachedStream>;

        if $r3 == null goto label1;

        $r20 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.io.CacheAndWriteOutputStream cachedStream>;

        $l0 = virtualinvoke $r20.<org.apache.cxf.io.CacheAndWriteOutputStream: long size()>();

        $b1 = $l0 cmp 2147483647L;

        $i4 = (int) $b1;

        if $i4 >= 0 goto label1;

        $r21 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.io.CacheAndWriteOutputStream cachedStream>;

        $l2 = virtualinvoke $r21.<org.apache.cxf.io.CacheAndWriteOutputStream: long size()>();

        $i3 = (int) $l2;

        virtualinvoke r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void setFixedLengthStreamingMode(int)>($i3);

     label1:
        virtualinvoke r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void setProtocolHeaders()>();

        virtualinvoke r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void makeTrustDecision()>();

        $r22 = virtualinvoke r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: java.lang.String getMethod()>();

        $z1 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>("GET");

        if $z1 == 0 goto label2;

        virtualinvoke r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void handleNoOutput()>();

        return;

     label2:
        virtualinvoke r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void retransmitStream()>();

        $r5 = <org.apache.cxf.transport.http.HTTPConduit: java.util.logging.Logger LOG>;

        $r4 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z0 = virtualinvoke $r5.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r4);

        if $z0 == 0 goto label3;

        $r7 = <org.apache.cxf.transport.http.HTTPConduit: java.util.logging.Logger LOG>;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Conduit \"");

        $r9 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.transport.http.HTTPConduit this$0>;

        $r10 = virtualinvoke $r9.<org.apache.cxf.transport.http.HTTPConduit: java.lang.String getConduitName()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" Retransmit message to: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r24 = new java.lang.String;

        $r16 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.io.CacheAndWriteOutputStream cachedStream>;

        $r17 = virtualinvoke $r16.<org.apache.cxf.io.CacheAndWriteOutputStream: byte[] getBytes()>();

        specialinvoke $r24.<java.lang.String: void <init>(byte[])>($r17);

        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.util.logging.Logger: void fine(java.lang.String)>($r19);

     label3:
        return;
    }

    protected void onFirstWrite() throws java.io.IOException
    {
        org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream r0;
        java.io.IOException $r1, $r4;
        java.lang.String $r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream;

     label1:
        virtualinvoke r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void handleHeadersTrustCaching()>();

     label2:
        goto label5;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<java.io.IOException: java.lang.String getMessage()>();

        if $r2 == null goto label4;

        $r3 = virtualinvoke $r1.<java.io.IOException: java.lang.String getMessage()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean contains(java.lang.CharSequence)>("HTTPS hostname wrong:");

        if $z0 == 0 goto label4;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("The https URL hostname does not match the Common Name (CN) on the server certificate in the client\'s truststore.  Make sure server certificate is correct, or to disable this check (NOT recommended for production) set the CXF client TLS configuration property \"disableCNCheck\" to true.");

        throw $r4;

     label4:
        throw $r1;

     label5:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    protected java.lang.String getMethod()
    {
        org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream r0;
        org.apache.cxf.message.Message $r1;
        java.lang.Object $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream;

        $r1 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.message.Message outMessage>;

        $r2 = interfaceinvoke $r1.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Object)>("org.apache.cxf.request.method");

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    protected void handleHeadersTrustCaching() throws java.io.IOException
    {
        org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream r0;
        org.apache.cxf.message.Message $r3;
        java.util.Set $r2;
        java.lang.Object $r4;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream;

        virtualinvoke r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void setProtocolHeaders()>();

        virtualinvoke r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void makeTrustDecision()>();

        $r1 = virtualinvoke r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: java.lang.String getMethod()>();

        $r2 = staticinvoke <org.apache.cxf.transport.http.HTTPConduit: java.util.Set access$200()>();

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void handleNoOutput()>();

        return;

     label1:
        $r3 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.message.Message outMessage>;

        $r4 = interfaceinvoke $r3.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Object)>("org.apache.cxf.empty.request");

        if $r4 == null goto label2;

        virtualinvoke r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void handleNoOutput()>();

        return;

     label2:
        virtualinvoke r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void setupWrappedStream()>();

        return;
    }

    public void close() throws java.io.IOException
    {
        byte[] $r9;
        java.net.URI $r16, $r31, $r39;
        org.apache.cxf.io.CacheAndWriteOutputStream $r2, $r3, $r4, $r5, $r7, $r43, $r44;
        java.net.HttpRetryException $r41;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.cxf.helpers.LoadingByteArrayOutputStream $r1, $r8, r45;
        java.lang.Exception $r22, $r37;
        java.lang.StringBuilder $r11, $r14, $r15, $r17, $r18, $r20, $r26, $r29, $r30, $r32, $r33, $r35;
        java.lang.Throwable $r42;
        int $i0, $i1;
        java.lang.String $r13, $r19, $r21, $r25, $r28, $r34, $r36, $r40;
        java.io.OutputStream $r6;
        java.io.IOException $r24, $r38;
        java.lang.RuntimeException $r10, $r23;
        org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream r0;
        java.lang.Class $r12, $r27;

        r0 := @this: org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream;

     label01:
        $r1 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.helpers.LoadingByteArrayOutputStream buffer>;

        if $r1 == null goto label02;

        $r8 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.helpers.LoadingByteArrayOutputStream buffer>;

        $i0 = virtualinvoke $r8.<org.apache.cxf.helpers.LoadingByteArrayOutputStream: int size()>();

        if $i0 <= 0 goto label02;

        virtualinvoke r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void thresholdNotReached()>();

        r45 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.helpers.LoadingByteArrayOutputStream buffer>;

        r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.helpers.LoadingByteArrayOutputStream buffer> = null;

        $r9 = virtualinvoke r45.<org.apache.cxf.helpers.LoadingByteArrayOutputStream: byte[] getRawBytes()>();

        $i1 = virtualinvoke r45.<org.apache.cxf.helpers.LoadingByteArrayOutputStream: int size()>();

        specialinvoke r0.<org.apache.cxf.io.AbstractThresholdOutputStream: void write(byte[],int,int)>($r9, 0, $i1);

     label02:
        $z3 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: boolean written>;

        if $z3 != 0 goto label03;

        virtualinvoke r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void handleHeadersTrustCaching()>();

     label03:
        $z0 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: boolean cachingForRetransmission>;

        if $z0 != 0 goto label04;

        specialinvoke r0.<org.apache.cxf.io.AbstractThresholdOutputStream: void close()>();

        goto label05;

     label04:
        $r2 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.io.CacheAndWriteOutputStream cachedStream>;

        if $r2 == null goto label05;

        specialinvoke r0.<org.apache.cxf.io.AbstractThresholdOutputStream: void flush()>();

        $r5 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.io.CacheAndWriteOutputStream cachedStream>;

        $r6 = virtualinvoke $r5.<org.apache.cxf.io.CacheAndWriteOutputStream: java.io.OutputStream getOut()>();

        virtualinvoke $r6.<java.io.OutputStream: void close()>();

        $r7 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.io.CacheAndWriteOutputStream cachedStream>;

        virtualinvoke $r7.<org.apache.cxf.io.CacheAndWriteOutputStream: void closeFlowthroughStream()>();

     label05:
        virtualinvoke r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void handleResponse()>();

     label06:
        $z4 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: boolean cachingForRetransmission>;

        if $z4 == 0 goto label10;

        $r3 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.io.CacheAndWriteOutputStream cachedStream>;

        if $r3 == null goto label10;

        $r4 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.io.CacheAndWriteOutputStream cachedStream>;

        virtualinvoke $r4.<org.apache.cxf.io.CacheAndWriteOutputStream: void close()>();

        goto label10;

     label07:
        $r42 := @caughtexception;

     label08:
        $z2 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: boolean cachingForRetransmission>;

        if $z2 == 0 goto label09;

        $r43 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.io.CacheAndWriteOutputStream cachedStream>;

        if $r43 == null goto label09;

        $r44 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.io.CacheAndWriteOutputStream cachedStream>;

        virtualinvoke $r44.<org.apache.cxf.io.CacheAndWriteOutputStream: void close()>();

     label09:
        throw $r42;

     label10:
        goto label15;

     label11:
        $r41 := @caughtexception;

        virtualinvoke r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void handleHttpRetryException(java.net.HttpRetryException)>($r41);

        goto label15;

     label12:
        $r24 := @caughtexception;

        $r25 = virtualinvoke $r24.<java.io.IOException: java.lang.String getMessage()>();

        if $r25 == null goto label13;

        $r39 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: java.net.URI url>;

        $r40 = virtualinvoke $r39.<java.net.URI: java.lang.String toString()>();

        $z1 = virtualinvoke $r25.<java.lang.String: boolean contains(java.lang.CharSequence)>($r40);

        if $z1 == 0 goto label13;

        throw $r24;

     label13:
        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r24.<java.lang.Object: java.lang.Class getClass()>();

        $r28 = virtualinvoke $r27.<java.lang.Class: java.lang.String getSimpleName()>();

        $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" invoking ");

        $r31 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: java.net.URI url>;

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r34 = virtualinvoke $r24.<java.io.IOException: java.lang.String getMessage()>();

        $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        $r37 = specialinvoke r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: java.lang.Exception mapException(java.lang.String,java.lang.Exception,java.lang.Class)>($r36, $r24, class "Ljava/io/IOException;");

        $r38 = (java.io.IOException) $r37;

        throw $r38;

     label14:
        $r10 := @caughtexception;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.Object: java.lang.Class getClass()>();

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.String getSimpleName()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" invoking ");

        $r16 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: java.net.URI url>;

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r19 = virtualinvoke $r10.<java.lang.RuntimeException: java.lang.String getMessage()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $r22 = specialinvoke r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: java.lang.Exception mapException(java.lang.String,java.lang.Exception,java.lang.Class)>($r21, $r10, class "Ljava/lang/RuntimeException;");

        $r23 = (java.lang.RuntimeException) $r22;

        throw $r23;

     label15:
        return;

        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.net.HttpRetryException from label01 to label10 with label11;
        catch java.io.IOException from label01 to label10 with label12;
        catch java.lang.RuntimeException from label01 to label10 with label14;
    }

    private java.lang.Exception mapException(java.lang.String, java.lang.Exception, java.lang.Class)
    {
        java.lang.Throwable $r9;
        java.lang.Object[] $r5;
        java.lang.Class[] $r3;
        java.lang.reflect.Constructor $r4;
        java.lang.Exception r0, r11;
        org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream r10;
        java.lang.Class r1, $r2;
        java.lang.Object $r7, $r8;
        java.lang.String r6;

        r10 := @this: org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream;

        r6 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Exception;

        r1 := @parameter2: java.lang.Class;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = newarray (java.lang.Class)[1];

        $r3[0] = class "Ljava/lang/String;";

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r3);

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = r6;

        $r7 = virtualinvoke $r4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r5);

        $r8 = virtualinvoke r1.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r7);

        r11 = (java.lang.Exception) $r8;

        virtualinvoke r11.<java.lang.Exception: java.lang.Throwable initCause(java.lang.Throwable)>(r0);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        r11 = r0;

     label4:
        return r11;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected void handleRetransmits() throws java.io.IOException
    {
        byte[] $r17;
        org.apache.cxf.transport.http.HTTPConduit $r8, $r22;
        java.util.logging.Level $r2;
        int $i0, i1;
        java.lang.String $r9, $r15, $r19, $r20, $r21;
        java.net.URI $r12;
        org.apache.cxf.io.CacheAndWriteOutputStream $r1, $r4, $r16;
        boolean $z0, $z1, $z2, $z3;
        java.util.logging.Logger $r3, $r6;
        org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream r0;
        java.lang.StringBuilder $r5, $r7, $r10, $r11, $r13, $r14, $r18;
        org.apache.cxf.transports.http.configuration.HTTPClientPolicy $r23;

        r0 := @this: org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream;

        $r1 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.io.CacheAndWriteOutputStream cachedStream>;

        if $r1 != null goto label1;

        $r20 = "GET";

        $r21 = virtualinvoke r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: java.lang.String getMethod()>();

        $z2 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>($r21);

        if $z2 == 0 goto label5;

        $r22 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.transport.http.HTTPConduit this$0>;

        $r23 = virtualinvoke $r22.<org.apache.cxf.transport.http.HTTPConduit: org.apache.cxf.transports.http.configuration.HTTPClientPolicy getClient()>();

        $z3 = virtualinvoke $r23.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isAutoRedirect()>();

        if $z3 == 0 goto label5;

     label1:
        $r3 = <org.apache.cxf.transport.http.HTTPConduit: java.util.logging.Logger LOG>;

        $r2 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z0 = virtualinvoke $r3.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r2);

        if $z0 == 0 goto label2;

        $r4 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.io.CacheAndWriteOutputStream cachedStream>;

        if $r4 == null goto label2;

        $r6 = <org.apache.cxf.transport.http.HTTPConduit: java.util.logging.Logger LOG>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Conduit \"");

        $r8 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.transport.http.HTTPConduit this$0>;

        $r9 = virtualinvoke $r8.<org.apache.cxf.transport.http.HTTPConduit: java.lang.String getConduitName()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" Transmit cached message to: ");

        $r12 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: java.net.URI url>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r15 = new java.lang.String;

        $r16 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.io.CacheAndWriteOutputStream cachedStream>;

        $r17 = virtualinvoke $r16.<org.apache.cxf.io.CacheAndWriteOutputStream: byte[] getBytes()>();

        specialinvoke $r15.<java.lang.String: void <init>(byte[])>($r17);

        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.util.logging.Logger: void fine(java.lang.String)>($r19);

     label2:
        $i0 = specialinvoke r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: int getMaxRetransmits()>();

        virtualinvoke r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void updateCookiesBeforeRetransmit()>();

        i1 = 0;

     label3:
        if $i0 < 0 goto label4;

        if i1 >= $i0 goto label5;

     label4:
        $z1 = virtualinvoke r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: boolean processRetransmit()>();

        if $z1 == 0 goto label5;

        i1 = i1 + 1;

        goto label3;

     label5:
        return;
    }

    protected boolean processRetransmit() throws java.io.IOException
    {
        org.apache.cxf.message.Message $r1, $r2, $r4;
        org.apache.cxf.message.Exchange $r3, $r5;
        java.lang.Integer $r7;
        org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream r0;
        int $i0;
        java.lang.String $r6;
        boolean $z0, $z1;

        r0 := @this: org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream;

        $i0 = virtualinvoke r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: int getResponseCode()>();

        $r1 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.message.Message outMessage>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.message.Message outMessage>;

        $r3 = interfaceinvoke $r2.<org.apache.cxf.message.Message: org.apache.cxf.message.Exchange getExchange()>();

        if $r3 == null goto label1;

        $r4 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.message.Message outMessage>;

        $r5 = interfaceinvoke $r4.<org.apache.cxf.message.Message: org.apache.cxf.message.Exchange getExchange()>();

        $r6 = <org.apache.cxf.message.Message: java.lang.String RESPONSE_CODE>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r5.<org.apache.cxf.message.Exchange: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7);

     label1:
        lookupswitch($i0)
        {
            case 301: goto label2;
            case 302: goto label2;
            case 303: goto label2;
            case 307: goto label2;
            case 401: goto label3;
            default: goto label4;
        };

     label2:
        $z1 = virtualinvoke r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: boolean redirectRetransmit()>();

        return $z1;

     label3:
        $z0 = virtualinvoke r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: boolean authorizationRetransmit()>();

        return $z0;

     label4:
        return 0;
    }

    protected boolean redirectRetransmit() throws java.io.IOException
    {
        org.apache.cxf.message.MessageImpl $r4;
        java.net.URISyntaxException $r22;
        org.apache.cxf.transport.http.HTTPConduit $r2, $r5, $r20;
        java.util.Map $r6;
        java.lang.String $r7, $r9, $r11, $r12, $r14, $r16;
        java.net.URI $r8, $r19;
        boolean $z0;
        org.apache.cxf.message.Message $r1, $r10, $r13, $r15, $r18, $r21, $r25;
        org.apache.cxf.transport.http.Headers $r17;
        java.io.IOException $r23, $r24;
        org.apache.cxf.message.Exchange $r26;
        org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream r0;
        org.apache.cxf.transports.http.configuration.HTTPClientPolicy $r3;

        r0 := @this: org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream;

        $r2 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.transport.http.HTTPConduit this$0>;

        $r1 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.message.Message outMessage>;

        $r3 = virtualinvoke $r2.<org.apache.cxf.transport.http.HTTPConduit: org.apache.cxf.transports.http.configuration.HTTPClientPolicy getClient(org.apache.cxf.message.Message)>($r1);

        $z0 = virtualinvoke $r3.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isAutoRedirect()>();

        if $z0 != 0 goto label01;

        return 0;

     label01:
        $r4 = new org.apache.cxf.message.MessageImpl;

        specialinvoke $r4.<org.apache.cxf.message.MessageImpl: void <init>()>();

        virtualinvoke r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void updateResponseHeaders(org.apache.cxf.message.Message)>($r4);

        $r5 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.transport.http.HTTPConduit this$0>;

        $r6 = staticinvoke <org.apache.cxf.transport.http.Headers: java.util.Map getSetProtocolHeaders(org.apache.cxf.message.Message)>($r4);

        $r7 = virtualinvoke $r5.<org.apache.cxf.transport.http.HTTPConduit: java.lang.String extractLocation(java.util.Map)>($r6);

        $r8 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: java.net.URI url>;

        $r9 = virtualinvoke $r8.<java.net.URI: java.lang.String toString()>();

     label02:
        $r11 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: java.lang.String conduitName>;

        $r10 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.message.Message outMessage>;

        $r12 = staticinvoke <org.apache.cxf.transport.http.HTTPConduit: java.lang.String access$300(java.lang.String,java.lang.String,java.lang.String,org.apache.cxf.message.Message)>($r11, $r9, $r7, $r10);

        $r14 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: java.lang.String conduitName>;

        $r13 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.message.Message outMessage>;

        staticinvoke <org.apache.cxf.transport.http.HTTPConduit: void access$400(java.lang.String,java.lang.String,java.lang.String,org.apache.cxf.message.Message)>($r14, $r9, $r12, $r13);

        $r16 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: java.lang.String conduitName>;

        $r15 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.message.Message outMessage>;

        staticinvoke <org.apache.cxf.transport.http.HTTPConduit: void access$500(java.lang.String,java.lang.String,java.lang.String,org.apache.cxf.message.Message)>($r16, $r9, $r12, $r15);

     label03:
        goto label05;

     label04:
        $r24 := @caughtexception;

        $r25 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.message.Message outMessage>;

        $r26 = interfaceinvoke $r25.<org.apache.cxf.message.Message: org.apache.cxf.message.Exchange getExchange()>();

        interfaceinvoke $r26.<org.apache.cxf.message.Exchange: java.lang.Object put(java.lang.Object,java.lang.Object)>("client.redirect.exception", "true");

        throw $r24;

     label05:
        if $r12 == null goto label10;

        $r17 = new org.apache.cxf.transport.http.Headers;

        $r18 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.message.Message outMessage>;

        specialinvoke $r17.<org.apache.cxf.transport.http.Headers: void <init>(org.apache.cxf.message.Message)>($r18);

        virtualinvoke $r17.<org.apache.cxf.transport.http.Headers: void removeAuthorizationHeaders()>();

     label06:
        $r20 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.transport.http.HTTPConduit this$0>;

        $r21 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.message.Message outMessage>;

        $r19 = new java.net.URI;

        specialinvoke $r19.<java.net.URI: void <init>(java.lang.String)>($r12);

        virtualinvoke $r20.<org.apache.cxf.transport.http.HTTPConduit: void setHeadersByAuthorizationPolicy(org.apache.cxf.message.Message,java.net.URI)>($r21, $r19);

     label07:
        goto label09;

     label08:
        $r22 := @caughtexception;

        $r23 = new java.io.IOException;

        specialinvoke $r23.<java.io.IOException: void <init>(java.lang.Throwable)>($r22);

        throw $r23;

     label09:
        virtualinvoke r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void retransmit(java.lang.String)>($r12);

        return 1;

     label10:
        return 0;

        catch java.io.IOException from label02 to label03 with label04;
        catch java.net.URISyntaxException from label06 to label07 with label08;
    }

    protected boolean authorizationRetransmit() throws java.io.IOException
    {
        org.apache.cxf.message.MessageImpl $r0;
        java.lang.Throwable $r26;
        org.apache.cxf.transport.http.HTTPConduit $r8, $r12, $r14, $r21;
        java.util.Map $r3;
        java.net.URI r6, $r24;
        java.lang.String $r7, $r9, $r17, $r18, $r25;
        org.apache.cxf.transport.http.auth.HttpAuthSupplier $r15;
        org.apache.cxf.message.Message $r10, $r11, $r16, $r20, $r22;
        org.apache.cxf.transport.http.Headers $r19;
        org.apache.cxf.transport.http.Cookies $r23;
        java.util.List $r5;
        org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream r1;
        org.apache.cxf.transport.http.auth.HttpAuthHeader $r2;
        org.apache.cxf.configuration.security.AuthorizationPolicy $r13;
        java.lang.Object $r4;

        r1 := @this: org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream;

        $r0 = new org.apache.cxf.message.MessageImpl;

        specialinvoke $r0.<org.apache.cxf.message.MessageImpl: void <init>()>();

        virtualinvoke r1.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void updateResponseHeaders(org.apache.cxf.message.Message)>($r0);

        $r2 = new org.apache.cxf.transport.http.auth.HttpAuthHeader;

        $r3 = staticinvoke <org.apache.cxf.transport.http.Headers: java.util.Map getSetProtocolHeaders(org.apache.cxf.message.Message)>($r0);

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>("WWW-Authenticate");

        $r5 = (java.util.List) $r4;

        specialinvoke $r2.<org.apache.cxf.transport.http.auth.HttpAuthHeader: void <init>(java.util.List)>($r5);

        r6 = r1.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: java.net.URI url>;

        $r7 = virtualinvoke $r2.<org.apache.cxf.transport.http.auth.HttpAuthHeader: java.lang.String getRealm()>();

        $r8 = r1.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.transport.http.HTTPConduit this$0>;

        $r9 = virtualinvoke $r8.<org.apache.cxf.transport.http.HTTPConduit: java.lang.String getConduitName()>();

        $r10 = r1.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.message.Message outMessage>;

        staticinvoke <org.apache.cxf.transport.http.HTTPConduit: void access$600(java.lang.String,org.apache.cxf.message.Message,java.net.URI,java.lang.String)>($r9, $r10, r6, $r7);

        $r12 = r1.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.transport.http.HTTPConduit this$0>;

        $r11 = r1.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.message.Message outMessage>;

        $r13 = virtualinvoke $r12.<org.apache.cxf.transport.http.HTTPConduit: org.apache.cxf.configuration.security.AuthorizationPolicy getEffectiveAuthPolicy(org.apache.cxf.message.Message)>($r11);

        $r14 = r1.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.transport.http.HTTPConduit this$0>;

        $r15 = $r14.<org.apache.cxf.transport.http.HTTPConduit: org.apache.cxf.transport.http.auth.HttpAuthSupplier authSupplier>;

        $r16 = r1.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.message.Message outMessage>;

        $r17 = virtualinvoke $r2.<org.apache.cxf.transport.http.auth.HttpAuthHeader: java.lang.String getFullHeader()>();

        $r18 = interfaceinvoke $r15.<org.apache.cxf.transport.http.auth.HttpAuthSupplier: java.lang.String getAuthorization(org.apache.cxf.configuration.security.AuthorizationPolicy,java.net.URI,org.apache.cxf.message.Message,java.lang.String)>($r13, r6, $r16, $r17);

        if $r18 != null goto label1;

        return 0;

     label1:
        virtualinvoke r1.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void closeInputStream()>();

     label2:
        goto label4;

     label3:
        $r26 := @caughtexception;

     label4:
        $r19 = new org.apache.cxf.transport.http.Headers;

        $r20 = r1.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.message.Message outMessage>;

        specialinvoke $r19.<org.apache.cxf.transport.http.Headers: void <init>(org.apache.cxf.message.Message)>($r20);

        virtualinvoke $r19.<org.apache.cxf.transport.http.Headers: void setAuthorization(java.lang.String)>($r18);

        $r21 = r1.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.transport.http.HTTPConduit this$0>;

        $r23 = $r21.<org.apache.cxf.transport.http.HTTPConduit: org.apache.cxf.transport.http.Cookies cookies>;

        $r22 = r1.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.message.Message outMessage>;

        virtualinvoke $r23.<org.apache.cxf.transport.http.Cookies: void writeToMessageHeaders(org.apache.cxf.message.Message)>($r22);

        $r24 = r1.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: java.net.URI url>;

        $r25 = virtualinvoke $r24.<java.net.URI: java.lang.String toString()>();

        virtualinvoke r1.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void retransmit(java.lang.String)>($r25);

        return 1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private int getMaxRetransmits()
    {
        org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream r0;
        org.apache.cxf.message.Message $r1;
        int $i0, $i2;
        org.apache.cxf.transport.http.HTTPConduit $r2;
        org.apache.cxf.transports.http.configuration.HTTPClientPolicy $r3;

        r0 := @this: org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream;

        $r2 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.transport.http.HTTPConduit this$0>;

        $r1 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.message.Message outMessage>;

        $r3 = virtualinvoke $r2.<org.apache.cxf.transport.http.HTTPConduit: org.apache.cxf.transports.http.configuration.HTTPClientPolicy getClient(org.apache.cxf.message.Message)>($r1);

        if $r3 != null goto label1;

        $i2 = (int) -1;

        $i0 = $i2;

        goto label2;

     label1:
        $i0 = virtualinvoke $r3.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: int getMaxRetransmits()>();

     label2:
        return $i0;
    }

    protected void handleResponse() throws java.io.IOException
    {
        org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream r0;
        org.apache.cxf.message.Message $r1, $r2, $r4;
        org.apache.cxf.message.Exchange $r3, $r5;
        boolean $z0;

        r0 := @this: org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream;

        virtualinvoke r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void handleRetransmits()>();

        $r1 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.message.Message outMessage>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.message.Message outMessage>;

        $r3 = interfaceinvoke $r2.<org.apache.cxf.message.Message: org.apache.cxf.message.Exchange getExchange()>();

        if $r3 == null goto label1;

        $r4 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.message.Message outMessage>;

        $r5 = interfaceinvoke $r4.<org.apache.cxf.message.Message: org.apache.cxf.message.Exchange getExchange()>();

        $z0 = interfaceinvoke $r5.<org.apache.cxf.message.Exchange: boolean isSynchronous()>();

        if $z0 == 0 goto label2;

     label1:
        virtualinvoke r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void handleResponseInternal()>();

        goto label3;

     label2:
        virtualinvoke r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void handleResponseAsync()>();

     label3:
        return;
    }

    private boolean isOneway(org.apache.cxf.message.Exchange)
    {
        org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream r1;
        org.apache.cxf.message.Exchange r0;
        boolean $z0, $z1;

        r1 := @this: org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream;

        r0 := @parameter0: org.apache.cxf.message.Exchange;

        if r0 == null goto label1;

        $z0 = interfaceinvoke r0.<org.apache.cxf.message.Exchange: boolean isOneWay()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private boolean doProcessResponse(org.apache.cxf.message.Message)
    {
        org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream r0;
        org.apache.cxf.message.Message r1;
        org.apache.cxf.message.Exchange $r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream;

        r1 := @parameter0: org.apache.cxf.message.Message;

        $r2 = interfaceinvoke r1.<org.apache.cxf.message.Message: org.apache.cxf.message.Exchange getExchange()>();

        $z0 = specialinvoke r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: boolean isOneway(org.apache.cxf.message.Exchange)>($r2);

        if $z0 != 0 goto label1;

        return 1;

     label1:
        $z1 = staticinvoke <org.apache.cxf.message.MessageUtils: boolean getContextualBoolean(org.apache.cxf.message.Message,java.lang.String,boolean)>(r1, "org.apache.cxf.transport.processOneWayResponse", 0);

        return $z1;
    }

    protected void handleResponseInternal() throws java.io.IOException
    {
        byte[] $r21;
        java.net.URL $r15, $r39;
        java.lang.Integer $r34, $r43;
        org.apache.cxf.endpoint.ClientCallback $r11;
        java.io.ByteArrayInputStream $r53;
        java.net.URI $r14, $r38;
        org.apache.cxf.io.CacheAndWriteOutputStream $r30, $r31;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.logging.Logger $r24, $r27, $r35;
        org.apache.cxf.transport.MessageObserver $r19;
        org.apache.cxf.message.MessageImpl $r49;
        java.lang.Object[] $r23;
        org.apache.cxf.transport.http.HTTPConduit $r18;
        org.apache.cxf.common.i18n.Message $r51;
        java.util.logging.Level $r26;
        int $i0, $i2;
        java.lang.Boolean $r32;
        java.lang.String $r13, $r17, $r25, $r33, $r37, $r42, $r45, $r46, $r47;
        org.apache.cxf.service.model.EndpointInfo $r8, $r9;
        org.apache.cxf.message.Message $r1, $r3, $r16, $r29;
        java.io.IOException $r52;
        org.apache.cxf.message.Exchange $r2;
        org.apache.cxf.endpoint.Endpoint $r7;
        org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream r0;
        java.lang.Object $r4, $r6, $r10, $r44;
        org.apache.cxf.transport.http.HTTPException $r48, $r50;
        java.io.InputStream $r5, r40;

        r0 := @this: org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream;

        $r1 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.message.Message outMessage>;

        $r2 = interfaceinvoke $r1.<org.apache.cxf.message.Message: org.apache.cxf.message.Exchange getExchange()>();

        $i0 = virtualinvoke r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: int getResponseCode()>();

        $i2 = (int) -1;

        if $i0 != $i2 goto label01;

        $r35 = <org.apache.cxf.transport.http.HTTPConduit: java.util.logging.Logger LOG>;

        virtualinvoke $r35.<java.util.logging.Logger: void warning(java.lang.String)>("HTTP Response code appears to be corrupted");

     label01:
        if $r2 == null goto label02;

        $r33 = <org.apache.cxf.message.Message: java.lang.String RESPONSE_CODE>;

        $r34 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r2.<org.apache.cxf.message.Exchange: java.lang.Object put(java.lang.Object,java.lang.Object)>($r33, $r34);

     label02:
        $r3 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.message.Message outMessage>;

        $r4 = interfaceinvoke $r3.<org.apache.cxf.message.Message: java.lang.Object getContextualProperty(java.lang.String)>("org.apache.cxf.transport.no_io_exceptions");

        $z0 = staticinvoke <org.apache.cxf.message.MessageUtils: boolean isTrue(java.lang.Object)>($r4);

        if $i0 < 400 goto label05;

        if $i0 == 500 goto label05;

        if $z0 != 0 goto label05;

        if $i0 == 404 goto label03;

        if $i0 != 503 goto label04;

     label03:
        $r32 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r2.<org.apache.cxf.message.Exchange: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.apache.cxf.transport.service_not_available", $r32);

     label04:
        $r48 = new org.apache.cxf.transport.http.HTTPException;

        $r37 = virtualinvoke r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: java.lang.String getResponseMessage()>();

        $r38 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: java.net.URI url>;

        $r39 = virtualinvoke $r38.<java.net.URI: java.net.URL toURL()>();

        specialinvoke $r48.<org.apache.cxf.transport.http.HTTPException: void <init>(int,java.lang.String,java.net.URL)>($i0, $r37, $r39);

        throw $r48;

     label05:
        r40 = null;

        $r49 = new org.apache.cxf.message.MessageImpl;

        specialinvoke $r49.<org.apache.cxf.message.MessageImpl: void <init>()>();

        interfaceinvoke $r49.<org.apache.cxf.message.Message: void setExchange(org.apache.cxf.message.Exchange)>($r2);

        virtualinvoke r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void updateResponseHeaders(org.apache.cxf.message.Message)>($r49);

        $r42 = <org.apache.cxf.message.Message: java.lang.String RESPONSE_CODE>;

        $r43 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r49.<org.apache.cxf.message.Message: java.lang.Object put(java.lang.Object,java.lang.Object)>($r42, $r43);

        $z4 = specialinvoke r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: boolean isOneway(org.apache.cxf.message.Exchange)>($r2);

        if $z4 != 0 goto label06;

        if 202 != $i0 goto label11;

     label06:
        $r5 = virtualinvoke r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: java.io.InputStream getPartialResponse()>();

        r40 = $r5;

        if $r5 == null goto label07;

        $r16 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.message.Message outMessage>;

        $z2 = specialinvoke r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: boolean doProcessResponse(org.apache.cxf.message.Message)>($r16);

        if $z2 != 0 goto label13;

     label07:
        virtualinvoke r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: void closeInputStream()>();

        $z1 = specialinvoke r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: boolean isOneway(org.apache.cxf.message.Exchange)>($r2);

        if $z1 == 0 goto label08;

        if $i0 <= 300 goto label08;

        $r50 = new org.apache.cxf.transport.http.HTTPException;

        $r13 = virtualinvoke r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: java.lang.String getResponseMessage()>();

        $r14 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: java.net.URI url>;

        $r15 = virtualinvoke $r14.<java.net.URI: java.net.URL toURL()>();

        specialinvoke $r50.<org.apache.cxf.transport.http.HTTPException: void <init>(int,java.lang.String,java.net.URL)>($i0, $r13, $r15);

        throw $r50;

     label08:
        $r6 = interfaceinvoke $r2.<org.apache.cxf.message.Exchange: java.lang.Object get(java.lang.Class)>(class "Lorg/apache/cxf/endpoint/ClientCallback;");

        $r11 = (org.apache.cxf.endpoint.ClientCallback) $r6;

        if null == $r11 goto label09;

        $r7 = interfaceinvoke $r2.<org.apache.cxf.message.Exchange: org.apache.cxf.endpoint.Endpoint getEndpoint()>();

        if null == $r7 goto label09;

        $r8 = interfaceinvoke $r7.<org.apache.cxf.endpoint.Endpoint: org.apache.cxf.service.model.EndpointInfo getEndpointInfo()>();

        if null == $r8 goto label09;

        $r9 = interfaceinvoke $r7.<org.apache.cxf.endpoint.Endpoint: org.apache.cxf.service.model.EndpointInfo getEndpointInfo()>();

        $r10 = virtualinvoke $r9.<org.apache.cxf.service.model.EndpointInfo: java.lang.Object getProperty(java.lang.String)>("org.apache.cxf.ws.addressing.MAPAggregator.decoupledDestination");

        if null != $r10 goto label09;

        virtualinvoke $r11.<org.apache.cxf.endpoint.ClientCallback: void handleResponse(java.util.Map,java.lang.Object[])>(null, null);

     label09:
        if $r5 == null goto label10;

        virtualinvoke $r5.<java.io.InputStream: void close()>();

     label10:
        return;

     label11:
        $r29 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.message.Message outMessage>;

        interfaceinvoke $r29.<org.apache.cxf.message.Message: void removeContent(java.lang.Class)>(class "Ljava/io/OutputStream;");

        $z3 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: boolean cachingForRetransmission>;

        if $z3 == 0 goto label12;

        $r30 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.io.CacheAndWriteOutputStream cachedStream>;

        if $r30 == null goto label12;

        $r31 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.io.CacheAndWriteOutputStream cachedStream>;

        virtualinvoke $r31.<org.apache.cxf.io.CacheAndWriteOutputStream: void close()>();

     label12:
        r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.io.CacheAndWriteOutputStream cachedStream> = null;

     label13:
        $r44 = interfaceinvoke $r49.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Object)>("Content-Type");

        $r45 = (java.lang.String) $r44;

        $r46 = staticinvoke <org.apache.cxf.helpers.HttpHeaderHelper: java.lang.String findCharset(java.lang.String)>($r45);

        $r47 = staticinvoke <org.apache.cxf.helpers.HttpHeaderHelper: java.lang.String mapCharset(java.lang.String)>($r46);

        if $r47 != null goto label14;

        $r51 = new org.apache.cxf.common.i18n.Message;

        $r24 = <org.apache.cxf.transport.http.HTTPConduit: java.util.logging.Logger LOG>;

        $r23 = newarray (java.lang.Object)[1];

        $r23[0] = $r46;

        specialinvoke $r51.<org.apache.cxf.common.i18n.Message: void <init>(java.lang.String,java.util.logging.Logger,java.lang.Object[])>("INVALID_ENCODING_MSG", $r24, $r23);

        $r25 = virtualinvoke $r51.<org.apache.cxf.common.i18n.Message: java.lang.String toString()>();

        $r27 = <org.apache.cxf.transport.http.HTTPConduit: java.util.logging.Logger LOG>;

        $r26 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        virtualinvoke $r27.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r26, $r25);

        $r52 = new java.io.IOException;

        specialinvoke $r52.<java.io.IOException: void <init>(java.lang.String)>($r25);

        throw $r52;

     label14:
        $r17 = <org.apache.cxf.message.Message: java.lang.String ENCODING>;

        interfaceinvoke $r49.<org.apache.cxf.message.Message: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, $r47);

        if r40 != null goto label15;

        r40 = virtualinvoke r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: java.io.InputStream getInputStream()>();

     label15:
        if r40 != null goto label16;

        $r53 = new java.io.ByteArrayInputStream;

        $r21 = newarray (byte)[0];

        specialinvoke $r53.<java.io.ByteArrayInputStream: void <init>(byte[])>($r21);

        r40 = $r53;

     label16:
        interfaceinvoke $r49.<org.apache.cxf.message.Message: void setContent(java.lang.Class,java.lang.Object)>(class "Ljava/io/InputStream;", r40);

        $r18 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.transport.http.HTTPConduit this$0>;

        $r19 = staticinvoke <org.apache.cxf.transport.http.HTTPConduit: org.apache.cxf.transport.MessageObserver access$700(org.apache.cxf.transport.http.HTTPConduit)>($r18);

        interfaceinvoke $r19.<org.apache.cxf.transport.MessageObserver: void onMessage(org.apache.cxf.message.Message)>($r49);

        return;
    }

    protected void handleHttpRetryException(java.net.HttpRetryException) throws java.io.IOException
    {
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r7, $r8, $r10, $r14, $r15, $r16, $r19, $r22, $r23, $r24, $r25, $r26, $r27, $r30, $r31, $r35, $r36, $r37, $r41, $r42, $r46, $r47, $r50, $r54, $r55, $r56, $r60, $r61, $r64, $r65, $r66, $r69, $r73, $r74, $r75, $r79, $r80, $r81, $r82, $r83, $r85, $r86;
        java.lang.String $r6, $r11, $r18, $r29, $r34, $r45, $r53, $r59, $r68, $r72, $r78, $r84, r87, r88;
        java.io.IOException $r89;
        java.net.URI $r9;
        java.net.HttpRetryException r2;
        boolean $z0;
        org.apache.cxf.configuration.security.ProxyAuthorizationPolicy $r13, $r52, $r58;
        org.apache.cxf.transports.http.configuration.ProxyServerType $r40;
        org.apache.cxf.configuration.security.AuthorizationPolicy $r63, $r71, $r77;
        org.apache.cxf.transport.http.HTTPConduit $r12, $r17, $r20, $r28, $r32, $r38, $r43, $r48, $r51, $r57, $r62, $r67, $r70, $r76;
        int $i0, $i1, $i2;
        org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream r5;
        org.apache.cxf.transports.http.configuration.HTTPClientPolicy $r21, $r33, $r39, $r44, $r49;

        r5 := @this: org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream;

        r2 := @parameter0: java.net.HttpRetryException;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HTTP response \'");

        $i0 = virtualinvoke r2.<java.net.HttpRetryException: int responseCode()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r6 = virtualinvoke r5.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: java.lang.String getResponseMessage()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' invoking ");

        $r9 = r5.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: java.net.URI url>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        r87 = $r11;

        $i1 = virtualinvoke r2.<java.net.HttpRetryException: int responseCode()>();

        lookupswitch($i1)
        {
            case 301: goto label01;
            case 302: goto label01;
            case 303: goto label01;
            case 307: goto label01;
            case 401: goto label02;
            case 407: goto label05;
            default: goto label12;
        };

     label01:
        $r81 = new java.lang.StringBuilder;

        specialinvoke $r81.<java.lang.StringBuilder: void <init>()>();

        $r82 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r83 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" that returned location header \'");

        $r84 = virtualinvoke r2.<java.net.HttpRetryException: java.lang.String getLocation()>();

        $r85 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r84);

        $r86 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        r87 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label12;

     label02:
        $r62 = r5.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.transport.http.HTTPConduit this$0>;

        $r63 = $r62.<org.apache.cxf.transport.http.HTTPConduit: org.apache.cxf.configuration.security.AuthorizationPolicy authorizationPolicy>;

        if $r63 == null goto label03;

        $r70 = r5.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.transport.http.HTTPConduit this$0>;

        $r71 = $r70.<org.apache.cxf.transport.http.HTTPConduit: org.apache.cxf.configuration.security.AuthorizationPolicy authorizationPolicy>;

        $r72 = virtualinvoke $r71.<org.apache.cxf.configuration.security.AuthorizationPolicy: java.lang.String getUserName()>();

        if $r72 != null goto label04;

     label03:
        $r64 = new java.lang.StringBuilder;

        specialinvoke $r64.<java.lang.StringBuilder: void <init>()>();

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with NO authorization username configured in conduit ");

        $r67 = r5.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.transport.http.HTTPConduit this$0>;

        $r68 = virtualinvoke $r67.<org.apache.cxf.transport.http.HTTPConduit: java.lang.String getConduitName()>();

        $r69 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r68);

        r87 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label12;

     label04:
        $r73 = new java.lang.StringBuilder;

        specialinvoke $r73.<java.lang.StringBuilder: void <init>()>();

        $r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with authorization username \'");

        $r76 = r5.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.transport.http.HTTPConduit this$0>;

        $r77 = $r76.<org.apache.cxf.transport.http.HTTPConduit: org.apache.cxf.configuration.security.AuthorizationPolicy authorizationPolicy>;

        $r78 = virtualinvoke $r77.<org.apache.cxf.configuration.security.AuthorizationPolicy: java.lang.String getUserName()>();

        $r79 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r78);

        $r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        r87 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label12;

     label05:
        $r12 = r5.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.transport.http.HTTPConduit this$0>;

        $r13 = $r12.<org.apache.cxf.transport.http.HTTPConduit: org.apache.cxf.configuration.security.ProxyAuthorizationPolicy proxyAuthorizationPolicy>;

        if $r13 == null goto label06;

        $r51 = r5.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.transport.http.HTTPConduit this$0>;

        $r52 = $r51.<org.apache.cxf.transport.http.HTTPConduit: org.apache.cxf.configuration.security.ProxyAuthorizationPolicy proxyAuthorizationPolicy>;

        $r53 = virtualinvoke $r52.<org.apache.cxf.configuration.security.ProxyAuthorizationPolicy: java.lang.String getUserName()>();

        if $r53 != null goto label07;

     label06:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with NO proxy authorization configured in conduit ");

        $r17 = r5.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.transport.http.HTTPConduit this$0>;

        $r18 = virtualinvoke $r17.<org.apache.cxf.transport.http.HTTPConduit: java.lang.String getConduitName()>();

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        r88 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label08;

     label07:
        $r54 = new java.lang.StringBuilder;

        specialinvoke $r54.<java.lang.StringBuilder: void <init>()>();

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with proxy authorization username \'");

        $r57 = r5.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.transport.http.HTTPConduit this$0>;

        $r58 = $r57.<org.apache.cxf.transport.http.HTTPConduit: org.apache.cxf.configuration.security.ProxyAuthorizationPolicy proxyAuthorizationPolicy>;

        $r59 = virtualinvoke $r58.<org.apache.cxf.configuration.security.ProxyAuthorizationPolicy: java.lang.String getUserName()>();

        $r60 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r59);

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        r88 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>();

     label08:
        $r20 = r5.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.transport.http.HTTPConduit this$0>;

        $r21 = $r20.<org.apache.cxf.transport.http.HTTPConduit: org.apache.cxf.transports.http.configuration.HTTPClientPolicy clientSidePolicy>;

        if $r21 == null goto label09;

        $r32 = r5.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.transport.http.HTTPConduit this$0>;

        $r33 = $r32.<org.apache.cxf.transport.http.HTTPConduit: org.apache.cxf.transports.http.configuration.HTTPClientPolicy clientSidePolicy>;

        $r34 = virtualinvoke $r33.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getProxyServer()>();

        if $r34 != null goto label11;

     label09:
        $z0 = virtualinvoke r5.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: boolean usingProxy()>();

        if $z0 == 0 goto label10;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r88);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" using a proxy even if NONE is configured in CXF conduit ");

        $r28 = r5.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.transport.http.HTTPConduit this$0>;

        $r29 = virtualinvoke $r28.<org.apache.cxf.transport.http.HTTPConduit: java.lang.String getConduitName()>();

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (maybe one is configured by java.net.ProxySelector)");

        r87 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label12;

     label10:
        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r88);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but NO proxy was used by the connection (none configured in cxf conduit and none selected by java.net.ProxySelector)");

        r87 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label12;

     label11:
        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r88);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" using ");

        $r38 = r5.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.transport.http.HTTPConduit this$0>;

        $r39 = $r38.<org.apache.cxf.transport.http.HTTPConduit: org.apache.cxf.transports.http.configuration.HTTPClientPolicy clientSidePolicy>;

        $r40 = virtualinvoke $r39.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: org.apache.cxf.transports.http.configuration.ProxyServerType getProxyServerType()>();

        $r41 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r40);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" proxy ");

        $r43 = r5.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.transport.http.HTTPConduit this$0>;

        $r44 = $r43.<org.apache.cxf.transport.http.HTTPConduit: org.apache.cxf.transports.http.configuration.HTTPClientPolicy clientSidePolicy>;

        $r45 = virtualinvoke $r44.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getProxyServer()>();

        $r46 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r48 = r5.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.transport.http.HTTPConduit this$0>;

        $r49 = $r48.<org.apache.cxf.transport.http.HTTPConduit: org.apache.cxf.transports.http.configuration.HTTPClientPolicy clientSidePolicy>;

        $i2 = virtualinvoke $r49.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: int getProxyServerPort()>();

        $r50 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        r87 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label12;

     label12:
        $r89 = new java.io.IOException;

        specialinvoke $r89.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>(r87, r2);

        throw $r89;
    }

    protected void makeTrustDecision() throws java.io.IOException
    {
        org.apache.cxf.transport.http.UntrustedURLConnectionIOException $r53;
        java.lang.StringBuilder $r13, $r16, $r18, $r19, $r21, $r22, $r30, $r33, $r37, $r38, $r40, $r41, $r45, $r48, $r50, $r51, $r56, $r59, $r62, $r63, $r65, $r66;
        org.apache.cxf.transport.https.HttpsURLConnectionInfo $r6;
        java.lang.String $r10, $r17, $r20, $r23, $r26, $r36, $r39, $r42, $r49, $r52, $r64, $r67, $r70;
        boolean $z0, $z1, $z2, $z3;
        org.apache.cxf.transport.http.MessageTrustDecider r3, $r5, $r8, $r27, $r35, $r61, $r69;
        java.util.logging.Logger $r12, $r14, $r29, $r31, $r44, $r46, $r55, $r57;
        org.apache.cxf.transport.http.HTTPConduit $r4, $r7, $r24, $r34, $r60, $r68;
        java.util.logging.Level $r11, $r15, $r28, $r32, $r43, $r47, $r54, $r58;
        org.apache.cxf.message.Message $r1, $r9, $r25;
        org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream r0;
        java.lang.Object $r2;

        r0 := @this: org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream;

        $r1 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.message.Message outMessage>;

        $r2 = interfaceinvoke $r1.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Class)>(class "Lorg/apache/cxf/transport/http/MessageTrustDecider;");

        r3 = (org.apache.cxf.transport.http.MessageTrustDecider) $r2;

        $r4 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.transport.http.HTTPConduit this$0>;

        $r5 = $r4.<org.apache.cxf.transport.http.HTTPConduit: org.apache.cxf.transport.http.MessageTrustDecider trustDecider>;

        if $r5 != null goto label1;

        if r3 == null goto label8;

     label1:
        $r6 = virtualinvoke r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.transport.https.HttpsURLConnectionInfo getHttpsURLConnectionInfo()>();

        $r7 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.transport.http.HTTPConduit this$0>;

        $r8 = $r7.<org.apache.cxf.transport.http.HTTPConduit: org.apache.cxf.transport.http.MessageTrustDecider trustDecider>;

        if $r8 == null goto label2;

        $r24 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.transport.http.HTTPConduit this$0>;

        $r27 = $r24.<org.apache.cxf.transport.http.HTTPConduit: org.apache.cxf.transport.http.MessageTrustDecider trustDecider>;

        $r26 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: java.lang.String conduitName>;

        $r25 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.message.Message outMessage>;

        virtualinvoke $r27.<org.apache.cxf.transport.http.MessageTrustDecider: void establishTrust(java.lang.String,org.apache.cxf.transport.http.URLConnectionInfo,org.apache.cxf.message.Message)>($r26, $r6, $r25);

        $r29 = <org.apache.cxf.transport.http.HTTPConduit: java.util.logging.Logger LOG>;

        $r28 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z1 = virtualinvoke $r29.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r28);

        if $z1 == 0 goto label2;

        $r31 = <org.apache.cxf.transport.http.HTTPConduit: java.util.logging.Logger LOG>;

        $r32 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Trust Decider ");

        $r34 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.transport.http.HTTPConduit this$0>;

        $r35 = $r34.<org.apache.cxf.transport.http.HTTPConduit: org.apache.cxf.transport.http.MessageTrustDecider trustDecider>;

        $r36 = virtualinvoke $r35.<org.apache.cxf.transport.http.MessageTrustDecider: java.lang.String getLogicalName()>();

        $r37 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" considers Conduit ");

        $r39 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: java.lang.String conduitName>;

        $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" trusted.");

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r31.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r32, $r42);

     label2:
        if r3 == null goto label3;

        $r10 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: java.lang.String conduitName>;

        $r9 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.message.Message outMessage>;

        virtualinvoke r3.<org.apache.cxf.transport.http.MessageTrustDecider: void establishTrust(java.lang.String,org.apache.cxf.transport.http.URLConnectionInfo,org.apache.cxf.message.Message)>($r10, $r6, $r9);

        $r12 = <org.apache.cxf.transport.http.HTTPConduit: java.util.logging.Logger LOG>;

        $r11 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z0 = virtualinvoke $r12.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r11);

        if $z0 == 0 goto label3;

        $r14 = <org.apache.cxf.transport.http.HTTPConduit: java.util.logging.Logger LOG>;

        $r15 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Trust Decider ");

        $r17 = virtualinvoke r3.<org.apache.cxf.transport.http.MessageTrustDecider: java.lang.String getLogicalName()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" considers Conduit ");

        $r20 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: java.lang.String conduitName>;

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" trusted.");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r14.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r15, $r23);

     label3:
        goto label9;

     label4:
        $r53 := @caughtexception;

        $r55 = <org.apache.cxf.transport.http.HTTPConduit: java.util.logging.Logger LOG>;

        $r54 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z3 = virtualinvoke $r55.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r54);

        if $z3 == 0 goto label7;

        $r57 = <org.apache.cxf.transport.http.HTTPConduit: java.util.logging.Logger LOG>;

        $r58 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        $r59 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Trust Decider ");

        $r60 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.transport.http.HTTPConduit this$0>;

        $r61 = $r60.<org.apache.cxf.transport.http.HTTPConduit: org.apache.cxf.transport.http.MessageTrustDecider trustDecider>;

        if $r61 == null goto label5;

        $r68 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: org.apache.cxf.transport.http.HTTPConduit this$0>;

        $r69 = $r68.<org.apache.cxf.transport.http.HTTPConduit: org.apache.cxf.transport.http.MessageTrustDecider trustDecider>;

        $r70 = virtualinvoke $r69.<org.apache.cxf.transport.http.MessageTrustDecider: java.lang.String getLogicalName()>();

        goto label6;

     label5:
        $r70 = virtualinvoke r3.<org.apache.cxf.transport.http.MessageTrustDecider: java.lang.String getLogicalName()>();

     label6:
        $r62 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r70);

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" considers Conduit ");

        $r64 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: java.lang.String conduitName>;

        $r65 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r64);

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" untrusted.");

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r57.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r58, $r67, $r53);

     label7:
        throw $r53;

     label8:
        $r44 = <org.apache.cxf.transport.http.HTTPConduit: java.util.logging.Logger LOG>;

        $r43 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z2 = virtualinvoke $r44.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r43);

        if $z2 == 0 goto label9;

        $r46 = <org.apache.cxf.transport.http.HTTPConduit: java.util.logging.Logger LOG>;

        $r47 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();

        $r48 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No Trust Decider for Conduit \'");

        $r49 = r0.<org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream: java.lang.String conduitName>;

        $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r49);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'. An afirmative Trust Decision is assumed.");

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r46.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r47, $r52);

     label9:
        return;

        catch org.apache.cxf.transport.http.UntrustedURLConnectionIOException from label1 to label3 with label4;
    }
}
