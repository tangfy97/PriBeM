final class kodkod.util.ints.AbstractSparseSequence$2 extends java.util.AbstractCollection
{
    final kodkod.util.ints.AbstractSparseSequence this$0;

    void <init>(kodkod.util.ints.AbstractSparseSequence)
    {
        kodkod.util.ints.AbstractSparseSequence$2 r0;
        kodkod.util.ints.AbstractSparseSequence r1;

        r0 := @this: kodkod.util.ints.AbstractSparseSequence$2;

        r1 := @parameter0: kodkod.util.ints.AbstractSparseSequence;

        r0.<kodkod.util.ints.AbstractSparseSequence$2: kodkod.util.ints.AbstractSparseSequence this$0> = r1;

        specialinvoke r0.<java.util.AbstractCollection: void <init>()>();

        return;
    }

    public int size()
    {
        int $i0;
        kodkod.util.ints.AbstractSparseSequence$2 r0;
        kodkod.util.ints.AbstractSparseSequence $r1;

        r0 := @this: kodkod.util.ints.AbstractSparseSequence$2;

        $r1 = r0.<kodkod.util.ints.AbstractSparseSequence$2: kodkod.util.ints.AbstractSparseSequence this$0>;

        $i0 = virtualinvoke $r1.<kodkod.util.ints.AbstractSparseSequence: int size()>();

        return $i0;
    }

    public boolean isEmpty()
    {
        kodkod.util.ints.AbstractSparseSequence$2 r0;
        kodkod.util.ints.AbstractSparseSequence $r1;
        boolean $z0;

        r0 := @this: kodkod.util.ints.AbstractSparseSequence$2;

        $r1 = r0.<kodkod.util.ints.AbstractSparseSequence$2: kodkod.util.ints.AbstractSparseSequence this$0>;

        $z0 = virtualinvoke $r1.<kodkod.util.ints.AbstractSparseSequence: boolean isEmpty()>();

        return $z0;
    }

    public boolean contains(java.lang.Object)
    {
        kodkod.util.ints.AbstractSparseSequence$2 r0;
        kodkod.util.ints.AbstractSparseSequence $r2;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: kodkod.util.ints.AbstractSparseSequence$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<kodkod.util.ints.AbstractSparseSequence$2: kodkod.util.ints.AbstractSparseSequence this$0>;

        $z0 = virtualinvoke $r2.<kodkod.util.ints.AbstractSparseSequence: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public java.util.Iterator iterator()
    {
        kodkod.util.ints.AbstractSparseSequence$2$1 $r0;
        kodkod.util.ints.AbstractSparseSequence$2 r1;

        r1 := @this: kodkod.util.ints.AbstractSparseSequence$2;

        $r0 = new kodkod.util.ints.AbstractSparseSequence$2$1;

        specialinvoke $r0.<kodkod.util.ints.AbstractSparseSequence$2$1: void <init>(kodkod.util.ints.AbstractSparseSequence$2)>(r1);

        return $r0;
    }

    public void clear()
    {
        kodkod.util.ints.AbstractSparseSequence$2 r0;
        kodkod.util.ints.AbstractSparseSequence $r1;

        r0 := @this: kodkod.util.ints.AbstractSparseSequence$2;

        $r1 = r0.<kodkod.util.ints.AbstractSparseSequence$2: kodkod.util.ints.AbstractSparseSequence this$0>;

        virtualinvoke $r1.<kodkod.util.ints.AbstractSparseSequence: void clear()>();

        return;
    }

    static kodkod.util.ints.AbstractSparseSequence access$0(kodkod.util.ints.AbstractSparseSequence$2)
    {
        kodkod.util.ints.AbstractSparseSequence$2 r0;
        kodkod.util.ints.AbstractSparseSequence $r1;

        r0 := @parameter0: kodkod.util.ints.AbstractSparseSequence$2;

        $r1 = r0.<kodkod.util.ints.AbstractSparseSequence$2: kodkod.util.ints.AbstractSparseSequence this$0>;

        return $r1;
    }
}
