final class org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target extends java.lang.Object implements org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor
{
    private final org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor targetDocument;
    private final org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition relativePosition;
    private org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target otherTarget;

    void <init>(org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target r0;
        org.waveprotocol.wave.model.document.operation.impl.DocOpBuffer $r2;
        org.waveprotocol.wave.model.document.operation.algorithm.RangeNormalizer $r1;
        org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target;

        r3 := @parameter0: org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.waveprotocol.wave.model.document.operation.algorithm.RangeNormalizer;

        $r2 = new org.waveprotocol.wave.model.document.operation.impl.DocOpBuffer;

        specialinvoke $r2.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuffer: void <init>()>();

        specialinvoke $r1.<org.waveprotocol.wave.model.document.operation.algorithm.RangeNormalizer: void <init>(org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor)>($r2);

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor targetDocument> = $r1;

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition relativePosition> = r3;

        return;
    }

    public void setOtherTarget(org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target r0, r1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target;

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target otherTarget> = r1;

        return;
    }

    public org.waveprotocol.wave.model.document.operation.DocOp finish()
    {
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target r0;
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor $r1;
        org.waveprotocol.wave.model.document.operation.DocOp $r3;
        java.lang.Object $r2;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor targetDocument>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: java.lang.Object finish()>();

        $r3 = (org.waveprotocol.wave.model.document.operation.DocOp) $r2;

        return $r3;
    }

    public void retain(int)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target r0, $r5, $r8;
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor $r4, $r6, $r7, $r9;
        int $i0, i1, $i2, $i3, $i4;
        org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition $r1, $r2, $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target;

        i1 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition relativePosition>;

        $i0 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition: int get()>();

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition relativePosition>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition: void increase(int)>(i1);

        $r3 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition relativePosition>;

        $i2 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition: int get()>();

        if $i2 >= 0 goto label1;

        $r7 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor targetDocument>;

        interfaceinvoke $r7.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void retain(int)>(i1);

        $r8 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target otherTarget>;

        $r9 = $r8.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor targetDocument>;

        interfaceinvoke $r9.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void retain(int)>(i1);

        goto label2;

     label1:
        if $i0 >= 0 goto label2;

        $r4 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor targetDocument>;

        $i3 = neg $i0;

        interfaceinvoke $r4.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void retain(int)>($i3);

        $r5 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target otherTarget>;

        $r6 = $r5.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor targetDocument>;

        $i4 = neg $i0;

        interfaceinvoke $r6.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void retain(int)>($i4);

     label2:
        return;
    }

    public void characters(java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target r0, $r3;
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor $r2, $r4;
        int $i0;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor targetDocument>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void characters(java.lang.String)>(r1);

        $r3 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target otherTarget>;

        $r4 = $r3.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor targetDocument>;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        interfaceinvoke $r4.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void retain(int)>($i0);

        return;
    }

    public void elementStart(java.lang.String, org.waveprotocol.wave.model.document.operation.Attributes)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target r0, $r4;
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor $r3, $r5;
        java.lang.String r1;
        org.waveprotocol.wave.model.document.operation.Attributes r2;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        $r3 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor targetDocument>;

        interfaceinvoke $r3.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void elementStart(java.lang.String,org.waveprotocol.wave.model.document.operation.Attributes)>(r1, r2);

        $r4 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target otherTarget>;

        $r5 = $r4.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor targetDocument>;

        interfaceinvoke $r5.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void retain(int)>(1);

        return;
    }

    public void elementEnd()
    {
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target r0, $r2;
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor $r1, $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor targetDocument>;

        interfaceinvoke $r1.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void elementEnd()>();

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target otherTarget>;

        $r3 = $r2.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor targetDocument>;

        interfaceinvoke $r3.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void retain(int)>(1);

        return;
    }

    public void deleteCharacters(java.lang.String)
    {
        java.lang.UnsupportedOperationException $r0;
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target r1;
        java.lang.String r2;

        r1 := @this: org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This method should never be called.");

        throw $r0;
    }

    public void deleteElementStart(java.lang.String, org.waveprotocol.wave.model.document.operation.Attributes)
    {
        java.lang.UnsupportedOperationException $r0;
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target r1;
        java.lang.String r2;
        org.waveprotocol.wave.model.document.operation.Attributes r3;

        r1 := @this: org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This method should never be called.");

        throw $r0;
    }

    public void deleteElementEnd()
    {
        java.lang.UnsupportedOperationException $r0;
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target r1;

        r1 := @this: org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This method should never be called.");

        throw $r0;
    }

    public void replaceAttributes(org.waveprotocol.wave.model.document.operation.Attributes, org.waveprotocol.wave.model.document.operation.Attributes)
    {
        java.lang.UnsupportedOperationException $r0;
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target r1;
        org.waveprotocol.wave.model.document.operation.Attributes r2, r3;

        r1 := @this: org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target;

        r2 := @parameter0: org.waveprotocol.wave.model.document.operation.Attributes;

        r3 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This method should never be called.");

        throw $r0;
    }

    public void updateAttributes(org.waveprotocol.wave.model.document.operation.AttributesUpdate)
    {
        java.lang.UnsupportedOperationException $r0;
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target r1;
        org.waveprotocol.wave.model.document.operation.AttributesUpdate r2;

        r1 := @this: org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target;

        r2 := @parameter0: org.waveprotocol.wave.model.document.operation.AttributesUpdate;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This method should never be called.");

        throw $r0;
    }

    public void annotationBoundary(org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap)
    {
        java.lang.UnsupportedOperationException $r0;
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target r1;
        org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap r2;

        r1 := @this: org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target;

        r2 := @parameter0: org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This method should never be called.");

        throw $r0;
    }

    public volatile java.lang.Object finish()
    {
        org.waveprotocol.wave.model.document.operation.DocOp $r1;
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.DocOp finish()>();

        return $r1;
    }
}
