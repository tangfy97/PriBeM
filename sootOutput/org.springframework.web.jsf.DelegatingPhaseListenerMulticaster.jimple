public class org.springframework.web.jsf.DelegatingPhaseListenerMulticaster extends java.lang.Object implements javax.faces.event.PhaseListener
{

    public void <init>()
    {
        org.springframework.web.jsf.DelegatingPhaseListenerMulticaster r0;

        r0 := @this: org.springframework.web.jsf.DelegatingPhaseListenerMulticaster;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public javax.faces.event.PhaseId getPhaseId()
    {
        org.springframework.web.jsf.DelegatingPhaseListenerMulticaster r1;
        javax.faces.event.PhaseId $r0;

        r1 := @this: org.springframework.web.jsf.DelegatingPhaseListenerMulticaster;

        $r0 = <javax.faces.event.PhaseId: javax.faces.event.PhaseId ANY_PHASE>;

        return $r0;
    }

    public void beforePhase(javax.faces.event.PhaseEvent)
    {
        java.util.Iterator $r4;
        java.util.Collection $r3;
        org.springframework.web.jsf.DelegatingPhaseListenerMulticaster r0;
        javax.faces.event.PhaseEvent r1;
        javax.faces.context.FacesContext $r2;
        javax.faces.event.PhaseListener r6;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: org.springframework.web.jsf.DelegatingPhaseListenerMulticaster;

        r1 := @parameter0: javax.faces.event.PhaseEvent;

        $r2 = virtualinvoke r1.<javax.faces.event.PhaseEvent: javax.faces.context.FacesContext getFacesContext()>();

        $r3 = virtualinvoke r0.<org.springframework.web.jsf.DelegatingPhaseListenerMulticaster: java.util.Collection getDelegates(javax.faces.context.FacesContext)>($r2);

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (javax.faces.event.PhaseListener) $r5;

        interfaceinvoke r6.<javax.faces.event.PhaseListener: void beforePhase(javax.faces.event.PhaseEvent)>(r1);

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    public void afterPhase(javax.faces.event.PhaseEvent)
    {
        java.util.Iterator $r4;
        java.util.Collection $r3;
        org.springframework.web.jsf.DelegatingPhaseListenerMulticaster r0;
        javax.faces.event.PhaseEvent r1;
        javax.faces.context.FacesContext $r2;
        javax.faces.event.PhaseListener r6;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: org.springframework.web.jsf.DelegatingPhaseListenerMulticaster;

        r1 := @parameter0: javax.faces.event.PhaseEvent;

        $r2 = virtualinvoke r1.<javax.faces.event.PhaseEvent: javax.faces.context.FacesContext getFacesContext()>();

        $r3 = virtualinvoke r0.<org.springframework.web.jsf.DelegatingPhaseListenerMulticaster: java.util.Collection getDelegates(javax.faces.context.FacesContext)>($r2);

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (javax.faces.event.PhaseListener) $r5;

        interfaceinvoke r6.<javax.faces.event.PhaseListener: void afterPhase(javax.faces.event.PhaseEvent)>(r1);

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    protected java.util.Collection getDelegates(javax.faces.context.FacesContext)
    {
        javax.faces.context.FacesContext r1;
        java.util.Map $r3;
        java.util.Collection $r4;
        org.springframework.web.jsf.DelegatingPhaseListenerMulticaster r0;
        org.springframework.beans.factory.ListableBeanFactory $r2;

        r0 := @this: org.springframework.web.jsf.DelegatingPhaseListenerMulticaster;

        r1 := @parameter0: javax.faces.context.FacesContext;

        $r2 = virtualinvoke r0.<org.springframework.web.jsf.DelegatingPhaseListenerMulticaster: org.springframework.beans.factory.ListableBeanFactory getBeanFactory(javax.faces.context.FacesContext)>(r1);

        $r3 = staticinvoke <org.springframework.beans.factory.BeanFactoryUtils: java.util.Map beansOfTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,boolean,boolean)>($r2, class "Ljavax/faces/event/PhaseListener;", 1, 0);

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Collection values()>();

        return $r4;
    }

    protected org.springframework.beans.factory.ListableBeanFactory getBeanFactory(javax.faces.context.FacesContext)
    {
        org.springframework.web.context.WebApplicationContext $r2;
        org.springframework.web.jsf.DelegatingPhaseListenerMulticaster r0;
        javax.faces.context.FacesContext r1;

        r0 := @this: org.springframework.web.jsf.DelegatingPhaseListenerMulticaster;

        r1 := @parameter0: javax.faces.context.FacesContext;

        $r2 = virtualinvoke r0.<org.springframework.web.jsf.DelegatingPhaseListenerMulticaster: org.springframework.web.context.WebApplicationContext getWebApplicationContext(javax.faces.context.FacesContext)>(r1);

        return $r2;
    }

    protected org.springframework.web.context.WebApplicationContext getWebApplicationContext(javax.faces.context.FacesContext)
    {
        org.springframework.web.context.WebApplicationContext $r1;
        org.springframework.web.jsf.DelegatingPhaseListenerMulticaster r2;
        javax.faces.context.FacesContext r0;

        r2 := @this: org.springframework.web.jsf.DelegatingPhaseListenerMulticaster;

        r0 := @parameter0: javax.faces.context.FacesContext;

        $r1 = staticinvoke <org.springframework.web.jsf.FacesContextUtils: org.springframework.web.context.WebApplicationContext getRequiredWebApplicationContext(javax.faces.context.FacesContext)>(r0);

        return $r1;
    }
}
