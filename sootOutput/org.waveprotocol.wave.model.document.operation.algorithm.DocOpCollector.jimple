public final class org.waveprotocol.wave.model.document.operation.algorithm.DocOpCollector extends java.lang.Object
{
    private final java.util.List operations;

    public void <init>()
    {
        org.waveprotocol.wave.model.document.operation.algorithm.DocOpCollector r0;
        java.util.ArrayList $r1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.DocOpCollector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.DocOpCollector: java.util.List operations> = $r1;

        return;
    }

    public void add(org.waveprotocol.wave.model.document.operation.DocOp)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.DocOpCollector r0;
        java.util.ListIterator $r2;
        org.waveprotocol.wave.model.document.operation.DocOp r5, r6;
        java.util.List $r1, $r3;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.DocOpCollector;

        r6 := @parameter0: org.waveprotocol.wave.model.document.operation.DocOp;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.DocOpCollector: java.util.List operations>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.ListIterator listIterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.ListIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r2.<java.util.ListIterator: java.lang.Object next()>();

        r5 = (org.waveprotocol.wave.model.document.operation.DocOp) $r4;

        if r5 != null goto label2;

        interfaceinvoke $r2.<java.util.ListIterator: void set(java.lang.Object)>(r6);

        return;

     label2:
        interfaceinvoke $r2.<java.util.ListIterator: void set(java.lang.Object)>(null);

        r6 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.algorithm.DocOpCollector: org.waveprotocol.wave.model.document.operation.DocOp compose(org.waveprotocol.wave.model.document.operation.DocOp,org.waveprotocol.wave.model.document.operation.DocOp)>(r5, r6);

        goto label1;

     label3:
        $r3 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.DocOpCollector: java.util.List operations>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r6);

        return;
    }

    public org.waveprotocol.wave.model.document.operation.DocOp composeAll()
    {
        org.waveprotocol.wave.model.document.operation.algorithm.DocOpCollector r0;
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.document.operation.DocOp r5, r6, $r7;
        java.util.List $r1, $r3;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.DocOpCollector;

        r6 = null;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.DocOpCollector: java.util.List operations>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.waveprotocol.wave.model.document.operation.DocOp) $r4;

        if r5 == null goto label4;

        if r6 == null goto label2;

        $r7 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.algorithm.DocOpCollector: org.waveprotocol.wave.model.document.operation.DocOp compose(org.waveprotocol.wave.model.document.operation.DocOp,org.waveprotocol.wave.model.document.operation.DocOp)>(r5, r6);

        goto label3;

     label2:
        $r7 = r5;

     label3:
        r6 = $r7;

     label4:
        goto label1;

     label5:
        $r3 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.DocOpCollector: java.util.List operations>;

        interfaceinvoke $r3.<java.util.List: void clear()>();

        return r6;
    }

    private org.waveprotocol.wave.model.document.operation.DocOp compose(org.waveprotocol.wave.model.document.operation.DocOp, org.waveprotocol.wave.model.document.operation.DocOp)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.DocOpCollector r5;
        org.waveprotocol.wave.model.operation.OperationException $r3;
        org.waveprotocol.wave.model.document.operation.DocOp r0, r1, $r2;
        java.lang.IllegalArgumentException $r4;

        r5 := @this: org.waveprotocol.wave.model.document.operation.algorithm.DocOpCollector;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.DocOp;

        r1 := @parameter1: org.waveprotocol.wave.model.document.operation.DocOp;

     label1:
        $r2 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.Composer: org.waveprotocol.wave.model.document.operation.DocOp compose(org.waveprotocol.wave.model.document.operation.DocOp,org.waveprotocol.wave.model.document.operation.DocOp)>(r0, r1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch org.waveprotocol.wave.model.operation.OperationException from label1 to label2 with label3;
    }

    public boolean isEmpty()
    {
        org.waveprotocol.wave.model.document.operation.algorithm.DocOpCollector r0;
        java.util.List $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.DocOpCollector;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.DocOpCollector: java.util.List operations>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        return $z0;
    }
}
