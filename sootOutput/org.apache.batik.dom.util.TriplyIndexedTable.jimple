public class org.apache.batik.dom.util.TriplyIndexedTable extends java.lang.Object
{
    protected static final int INITIAL_CAPACITY;
    protected org.apache.batik.dom.util.TriplyIndexedTable$Entry[] table;
    protected int count;

    public void <init>()
    {
        org.apache.batik.dom.util.TriplyIndexedTable$Entry[] $r1;
        org.apache.batik.dom.util.TriplyIndexedTable r0;

        r0 := @this: org.apache.batik.dom.util.TriplyIndexedTable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (org.apache.batik.dom.util.TriplyIndexedTable$Entry)[11];

        r0.<org.apache.batik.dom.util.TriplyIndexedTable: org.apache.batik.dom.util.TriplyIndexedTable$Entry[] table> = $r1;

        return;
    }

    public void <init>(int)
    {
        int i0;
        org.apache.batik.dom.util.TriplyIndexedTable$Entry[] $r1;
        org.apache.batik.dom.util.TriplyIndexedTable r0;

        r0 := @this: org.apache.batik.dom.util.TriplyIndexedTable;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (org.apache.batik.dom.util.TriplyIndexedTable$Entry)[i0];

        r0.<org.apache.batik.dom.util.TriplyIndexedTable: org.apache.batik.dom.util.TriplyIndexedTable$Entry[] table> = $r1;

        return;
    }

    public int size()
    {
        int $i0;
        org.apache.batik.dom.util.TriplyIndexedTable r0;

        r0 := @this: org.apache.batik.dom.util.TriplyIndexedTable;

        $i0 = r0.<org.apache.batik.dom.util.TriplyIndexedTable: int count>;

        return $i0;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.batik.dom.util.TriplyIndexedTable r0;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10;
        boolean $z0;
        org.apache.batik.dom.util.TriplyIndexedTable$Entry $r8, $r10, r13;
        org.apache.batik.dom.util.TriplyIndexedTable$Entry[] $r4, $r5, $r7, $r9, $r11, $r12;
        java.lang.Object r1, r2, r3, r6, r14;

        r0 := @this: org.apache.batik.dom.util.TriplyIndexedTable;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        r6 := @parameter3: java.lang.Object;

        $i0 = virtualinvoke r0.<org.apache.batik.dom.util.TriplyIndexedTable: int hashCode(java.lang.Object,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        i1 = $i0 & 2147483647;

        $r4 = r0.<org.apache.batik.dom.util.TriplyIndexedTable: org.apache.batik.dom.util.TriplyIndexedTable$Entry[] table>;

        $i2 = lengthof $r4;

        i9 = i1 % $i2;

        $r5 = r0.<org.apache.batik.dom.util.TriplyIndexedTable: org.apache.batik.dom.util.TriplyIndexedTable$Entry[] table>;

        r13 = $r5[i9];

        goto label3;

     label1:
        $i3 = r13.<org.apache.batik.dom.util.TriplyIndexedTable$Entry: int hash>;

        if $i3 != i1 goto label2;

        $z0 = virtualinvoke r13.<org.apache.batik.dom.util.TriplyIndexedTable$Entry: boolean match(java.lang.Object,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        if $z0 == 0 goto label2;

        r14 = r13.<org.apache.batik.dom.util.TriplyIndexedTable$Entry: java.lang.Object value>;

        r13.<org.apache.batik.dom.util.TriplyIndexedTable$Entry: java.lang.Object value> = r6;

        return r14;

     label2:
        r13 = r13.<org.apache.batik.dom.util.TriplyIndexedTable$Entry: org.apache.batik.dom.util.TriplyIndexedTable$Entry next>;

     label3:
        if r13 != null goto label1;

        $r7 = r0.<org.apache.batik.dom.util.TriplyIndexedTable: org.apache.batik.dom.util.TriplyIndexedTable$Entry[] table>;

        i10 = lengthof $r7;

        $i4 = r0.<org.apache.batik.dom.util.TriplyIndexedTable: int count>;

        $i5 = $i4 + 1;

        r0.<org.apache.batik.dom.util.TriplyIndexedTable: int count> = $i5;

        $i6 = i10 >> 2;

        $i7 = i10 - $i6;

        if $i4 < $i7 goto label4;

        virtualinvoke r0.<org.apache.batik.dom.util.TriplyIndexedTable: void rehash()>();

        $r12 = r0.<org.apache.batik.dom.util.TriplyIndexedTable: org.apache.batik.dom.util.TriplyIndexedTable$Entry[] table>;

        $i8 = lengthof $r12;

        i9 = i1 % $i8;

     label4:
        $r8 = new org.apache.batik.dom.util.TriplyIndexedTable$Entry;

        $r9 = r0.<org.apache.batik.dom.util.TriplyIndexedTable: org.apache.batik.dom.util.TriplyIndexedTable$Entry[] table>;

        $r10 = $r9[i9];

        specialinvoke $r8.<org.apache.batik.dom.util.TriplyIndexedTable$Entry: void <init>(int,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,org.apache.batik.dom.util.TriplyIndexedTable$Entry)>(i1, r1, r2, r3, r6, $r10);

        $r11 = r0.<org.apache.batik.dom.util.TriplyIndexedTable: org.apache.batik.dom.util.TriplyIndexedTable$Entry[] table>;

        $r11[i9] = $r8;

        return null;
    }

    public java.lang.Object get(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.batik.dom.util.TriplyIndexedTable$Entry r7;
        org.apache.batik.dom.util.TriplyIndexedTable r0;
        org.apache.batik.dom.util.TriplyIndexedTable$Entry[] $r4, $r5;
        int $i0, i1, $i2, i3, $i4;
        java.lang.Object r1, r2, r3, $r6;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.util.TriplyIndexedTable;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $i0 = virtualinvoke r0.<org.apache.batik.dom.util.TriplyIndexedTable: int hashCode(java.lang.Object,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        i1 = $i0 & 2147483647;

        $r4 = r0.<org.apache.batik.dom.util.TriplyIndexedTable: org.apache.batik.dom.util.TriplyIndexedTable$Entry[] table>;

        $i2 = lengthof $r4;

        i3 = i1 % $i2;

        $r5 = r0.<org.apache.batik.dom.util.TriplyIndexedTable: org.apache.batik.dom.util.TriplyIndexedTable$Entry[] table>;

        r7 = $r5[i3];

        goto label3;

     label1:
        $i4 = r7.<org.apache.batik.dom.util.TriplyIndexedTable$Entry: int hash>;

        if $i4 != i1 goto label2;

        $z0 = virtualinvoke r7.<org.apache.batik.dom.util.TriplyIndexedTable$Entry: boolean match(java.lang.Object,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        if $z0 == 0 goto label2;

        $r6 = r7.<org.apache.batik.dom.util.TriplyIndexedTable$Entry: java.lang.Object value>;

        return $r6;

     label2:
        r7 = r7.<org.apache.batik.dom.util.TriplyIndexedTable$Entry: org.apache.batik.dom.util.TriplyIndexedTable$Entry next>;

     label3:
        if r7 != null goto label1;

        return null;
    }

    protected void rehash()
    {
        org.apache.batik.dom.util.TriplyIndexedTable r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, $i9;
        org.apache.batik.dom.util.TriplyIndexedTable$Entry r3, $r6, r8;
        org.apache.batik.dom.util.TriplyIndexedTable$Entry[] r1, $r2, $r4, $r5, $r7;

        r0 := @this: org.apache.batik.dom.util.TriplyIndexedTable;

        r1 = r0.<org.apache.batik.dom.util.TriplyIndexedTable: org.apache.batik.dom.util.TriplyIndexedTable$Entry[] table>;

        $i0 = lengthof r1;

        $i1 = $i0 * 2;

        $i2 = $i1 + 1;

        $r2 = newarray (org.apache.batik.dom.util.TriplyIndexedTable$Entry)[$i2];

        r0.<org.apache.batik.dom.util.TriplyIndexedTable: org.apache.batik.dom.util.TriplyIndexedTable$Entry[] table> = $r2;

        $i3 = lengthof r1;

        i7 = $i3 - 1;

        goto label4;

     label1:
        r8 = r1[i7];

        goto label3;

     label2:
        r3 = r8;

        r8 = r8.<org.apache.batik.dom.util.TriplyIndexedTable$Entry: org.apache.batik.dom.util.TriplyIndexedTable$Entry next>;

        $i5 = r3.<org.apache.batik.dom.util.TriplyIndexedTable$Entry: int hash>;

        $r4 = r0.<org.apache.batik.dom.util.TriplyIndexedTable: org.apache.batik.dom.util.TriplyIndexedTable$Entry[] table>;

        $i4 = lengthof $r4;

        i6 = $i5 % $i4;

        $r5 = r0.<org.apache.batik.dom.util.TriplyIndexedTable: org.apache.batik.dom.util.TriplyIndexedTable$Entry[] table>;

        $r6 = $r5[i6];

        r3.<org.apache.batik.dom.util.TriplyIndexedTable$Entry: org.apache.batik.dom.util.TriplyIndexedTable$Entry next> = $r6;

        $r7 = r0.<org.apache.batik.dom.util.TriplyIndexedTable: org.apache.batik.dom.util.TriplyIndexedTable$Entry[] table>;

        $r7[i6] = r3;

     label3:
        if r8 != null goto label2;

        $i9 = (int) -1;

        i7 = i7 + $i9;

     label4:
        if i7 >= 0 goto label1;

        return;
    }

    protected int hashCode(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.batik.dom.util.TriplyIndexedTable r3;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Object r0, r1, r2;

        r3 := @this: org.apache.batik.dom.util.TriplyIndexedTable;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        if r0 != null goto label1;

        $i2 = 0;

        goto label2;

     label1:
        $i2 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

     label2:
        if r1 != null goto label3;

        $i3 = 0;

        goto label4;

     label3:
        $i3 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

     label4:
        $i0 = $i2 ^ $i3;

        if r2 != null goto label5;

        $i4 = 0;

        goto label6;

     label5:
        $i4 = virtualinvoke r2.<java.lang.Object: int hashCode()>();

     label6:
        $i1 = $i0 ^ $i4;

        return $i1;
    }

    public static void <clinit>()
    {
        <org.apache.batik.dom.util.TriplyIndexedTable: int INITIAL_CAPACITY> = 11;

        return;
    }
}
