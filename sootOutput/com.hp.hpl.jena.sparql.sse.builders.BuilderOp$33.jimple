class com.hp.hpl.jena.sparql.sse.builders.BuilderOp$33 extends java.lang.Object implements com.hp.hpl.jena.sparql.sse.builders.BuilderOp$Build
{
    final com.hp.hpl.jena.sparql.sse.builders.BuilderOp this$0;

    void <init>(com.hp.hpl.jena.sparql.sse.builders.BuilderOp)
    {
        com.hp.hpl.jena.sparql.sse.builders.BuilderOp r1;
        com.hp.hpl.jena.sparql.sse.builders.BuilderOp$33 r0;

        r0 := @this: com.hp.hpl.jena.sparql.sse.builders.BuilderOp$33;

        r1 := @parameter0: com.hp.hpl.jena.sparql.sse.builders.BuilderOp;

        r0.<com.hp.hpl.jena.sparql.sse.builders.BuilderOp$33: com.hp.hpl.jena.sparql.sse.builders.BuilderOp this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public com.hp.hpl.jena.sparql.algebra.Op make(com.hp.hpl.jena.sparql.sse.ItemList)
    {
        com.hp.hpl.jena.graph.Node $r5, $r6, $r8, $r9;
        int $i0;
        com.hp.hpl.jena.sparql.sse.builders.BuilderOp$33 r3;
        java.lang.String $r7, $r10;
        com.hp.hpl.jena.sparql.algebra.Op $r2, r12;
        boolean $z0, $z1, $z2, $z3;
        com.hp.hpl.jena.sparql.sse.builders.BuilderOp $r4;
        com.hp.hpl.jena.sparql.sse.ItemList r0;
        com.hp.hpl.jena.sparql.sse.Item $r1;
        java.lang.Object r11;

        r3 := @this: com.hp.hpl.jena.sparql.sse.builders.BuilderOp$33;

        r0 := @parameter0: com.hp.hpl.jena.sparql.sse.ItemList;

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: void checkLength(int,int,com.hp.hpl.jena.sparql.sse.ItemList,java.lang.String)>(2, 3, r0, "label");

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(1);

        r11 = null;

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.sse.Item: boolean isSymbol()>();

        if $z0 == 0 goto label1;

        r11 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.sse.Item: java.lang.String getSymbol()>();

        goto label5;

     label1:
        $z1 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.sse.Item: boolean isNode()>();

        if $z1 == 0 goto label4;

        $r5 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.graph.Node getNode()>();

        $z2 = virtualinvoke $r5.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z2 == 0 goto label3;

        $r6 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.graph.Node getNode()>();

        $r7 = virtualinvoke $r6.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        if $r7 == null goto label2;

        $r9 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.graph.Node getNode()>();

        $r10 = virtualinvoke $r9.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        $z3 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z3 == 0 goto label2;

     label2:
        $r8 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.graph.Node getNode()>();

        r11 = virtualinvoke $r8.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        goto label5;

     label3:
        r11 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.graph.Node getNode()>();

        goto label5;

     label4:
        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: void broken(java.lang.String)>("No a symbol or a node");

     label5:
        if r11 != null goto label6;

        r11 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.sse.Item: java.lang.String toString()>();

     label6:
        r12 = null;

        $i0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.ItemList: int size()>();

        if $i0 != 3 goto label7;

        $r4 = r3.<com.hp.hpl.jena.sparql.sse.builders.BuilderOp$33: com.hp.hpl.jena.sparql.sse.builders.BuilderOp this$0>;

        r12 = virtualinvoke $r4.<com.hp.hpl.jena.sparql.sse.builders.BuilderOp: com.hp.hpl.jena.sparql.algebra.Op build(com.hp.hpl.jena.sparql.sse.ItemList,int)>(r0, 2);

     label7:
        $r2 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpLabel: com.hp.hpl.jena.sparql.algebra.Op create(java.lang.Object,com.hp.hpl.jena.sparql.algebra.Op)>(r11, r12);

        return $r2;
    }
}
