public class org.apache.poi.ss.formula.functions.FactDouble extends org.apache.poi.ss.formula.functions.Fixed1ArgFunction implements org.apache.poi.ss.formula.functions.FreeRefFunction
{
    public static final org.apache.poi.ss.formula.functions.FreeRefFunction instance;
    static java.util.HashMap cache;

    public void <init>()
    {
        org.apache.poi.ss.formula.functions.FactDouble r0;

        r0 := @this: org.apache.poi.ss.formula.functions.FactDouble;

        specialinvoke r0.<org.apache.poi.ss.formula.functions.Fixed1ArgFunction: void <init>()>();

        return;
    }

    public org.apache.poi.ss.formula.eval.ValueEval evaluate(int, int, org.apache.poi.ss.formula.eval.ValueEval)
    {
        org.apache.poi.ss.formula.eval.ErrorEval $r3, $r5;
        long $l1;
        org.apache.poi.ss.formula.eval.ValueEval r0;
        org.apache.poi.ss.formula.functions.FactDouble r6;
        org.apache.poi.ss.formula.eval.NumberEval $r1;
        int $i0, i2, i3;
        java.math.BigInteger $r2;
        org.apache.poi.ss.formula.eval.EvaluationException $r4;
        double $d0;

        r6 := @this: org.apache.poi.ss.formula.functions.FactDouble;

        i2 := @parameter0: int;

        i3 := @parameter1: int;

        r0 := @parameter2: org.apache.poi.ss.formula.eval.ValueEval;

     label1:
        $i0 = staticinvoke <org.apache.poi.ss.formula.eval.OperandResolver: int coerceValueToInt(org.apache.poi.ss.formula.eval.ValueEval)>(r0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = <org.apache.poi.ss.formula.eval.ErrorEval: org.apache.poi.ss.formula.eval.ErrorEval VALUE_INVALID>;

        return $r5;

     label4:
        if $i0 >= 0 goto label5;

        $r3 = <org.apache.poi.ss.formula.eval.ErrorEval: org.apache.poi.ss.formula.eval.ErrorEval NUM_ERROR>;

        return $r3;

     label5:
        $r1 = new org.apache.poi.ss.formula.eval.NumberEval;

        $r2 = staticinvoke <org.apache.poi.ss.formula.functions.FactDouble: java.math.BigInteger factorial(int)>($i0);

        $l1 = virtualinvoke $r2.<java.math.BigInteger: long longValue()>();

        $d0 = (double) $l1;

        specialinvoke $r1.<org.apache.poi.ss.formula.eval.NumberEval: void <init>(double)>($d0);

        return $r1;

        catch org.apache.poi.ss.formula.eval.EvaluationException from label1 to label2 with label3;
    }

    public static java.math.BigInteger factorial(int)
    {
        java.util.HashMap $r1, $r6, $r8;
        long $l1;
        java.lang.Integer $r2, $r7, $r9;
        int i0, $i2;
        java.math.BigInteger $r0, $r3, $r4, $r5, $r11;
        boolean $z0;
        java.lang.Object $r10;

        i0 := @parameter0: int;

        if i0 == 0 goto label1;

        if i0 >= 0 goto label2;

     label1:
        $r0 = <java.math.BigInteger: java.math.BigInteger ONE>;

        return $r0;

     label2:
        $r1 = <org.apache.poi.ss.formula.functions.FactDouble: java.util.HashMap cache>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z0 = virtualinvoke $r1.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r2);

        if $z0 == 0 goto label3;

        $r8 = <org.apache.poi.ss.formula.functions.FactDouble: java.util.HashMap cache>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r10 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r9);

        $r11 = (java.math.BigInteger) $r10;

        return $r11;

     label3:
        $l1 = (long) i0;

        $r3 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l1);

        $i2 = i0 - 2;

        $r4 = staticinvoke <org.apache.poi.ss.formula.functions.FactDouble: java.math.BigInteger factorial(int)>($i2);

        $r5 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r4);

        $r6 = <org.apache.poi.ss.formula.functions.FactDouble: java.util.HashMap cache>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r5);

        return $r5;
    }

    public org.apache.poi.ss.formula.eval.ValueEval evaluate(org.apache.poi.ss.formula.eval.ValueEval[], org.apache.poi.ss.formula.OperationEvaluationContext)
    {
        org.apache.poi.ss.formula.eval.ErrorEval $r5;
        org.apache.poi.ss.formula.eval.ValueEval[] r0;
        org.apache.poi.ss.formula.OperationEvaluationContext r2;
        org.apache.poi.ss.formula.functions.FactDouble r1;
        org.apache.poi.ss.formula.eval.ValueEval $r3, $r4;
        int $i0, $i1, $i2;

        r1 := @this: org.apache.poi.ss.formula.functions.FactDouble;

        r0 := @parameter0: org.apache.poi.ss.formula.eval.ValueEval[];

        r2 := @parameter1: org.apache.poi.ss.formula.OperationEvaluationContext;

        $i0 = lengthof r0;

        if $i0 == 1 goto label1;

        $r5 = <org.apache.poi.ss.formula.eval.ErrorEval: org.apache.poi.ss.formula.eval.ErrorEval VALUE_INVALID>;

        return $r5;

     label1:
        $i1 = virtualinvoke r2.<org.apache.poi.ss.formula.OperationEvaluationContext: int getRowIndex()>();

        $i2 = virtualinvoke r2.<org.apache.poi.ss.formula.OperationEvaluationContext: int getColumnIndex()>();

        $r3 = r0[0];

        $r4 = virtualinvoke r1.<org.apache.poi.ss.formula.functions.FactDouble: org.apache.poi.ss.formula.eval.ValueEval evaluate(int,int,org.apache.poi.ss.formula.eval.ValueEval)>($i1, $i2, $r3);

        return $r4;
    }

    static void <clinit>()
    {
        java.util.HashMap $r1;
        org.apache.poi.ss.formula.functions.FactDouble $r0;

        $r0 = new org.apache.poi.ss.formula.functions.FactDouble;

        specialinvoke $r0.<org.apache.poi.ss.formula.functions.FactDouble: void <init>()>();

        <org.apache.poi.ss.formula.functions.FactDouble: org.apache.poi.ss.formula.functions.FreeRefFunction instance> = $r0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        <org.apache.poi.ss.formula.functions.FactDouble: java.util.HashMap cache> = $r1;

        return;
    }
}
