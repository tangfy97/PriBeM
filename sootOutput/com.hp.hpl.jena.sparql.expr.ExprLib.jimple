public class com.hp.hpl.jena.sparql.expr.ExprLib extends java.lang.Object
{
    private static com.hp.hpl.jena.sparql.expr.ExprTransform replaceAgg;

    public void <init>()
    {
        com.hp.hpl.jena.sparql.expr.ExprLib r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprLib;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.hp.hpl.jena.sparql.expr.Expr replaceAggregateByVariable(com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.sparql.expr.Expr r0, $r2;
        com.hp.hpl.jena.sparql.expr.ExprTransform $r1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        $r1 = <com.hp.hpl.jena.sparql.expr.ExprLib: com.hp.hpl.jena.sparql.expr.ExprTransform replaceAgg>;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.ExprTransformer: com.hp.hpl.jena.sparql.expr.Expr transform(com.hp.hpl.jena.sparql.expr.ExprTransform,com.hp.hpl.jena.sparql.expr.Expr)>($r1, r0);

        return $r2;
    }

    public static com.hp.hpl.jena.sparql.expr.ExprList replaceAggregateByVariable(com.hp.hpl.jena.sparql.expr.ExprList)
    {
        com.hp.hpl.jena.sparql.expr.ExprTransform $r1;
        com.hp.hpl.jena.sparql.expr.ExprList r0, $r2;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprList;

        $r1 = <com.hp.hpl.jena.sparql.expr.ExprLib: com.hp.hpl.jena.sparql.expr.ExprTransform replaceAgg>;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.ExprTransformer: com.hp.hpl.jena.sparql.expr.ExprList transform(com.hp.hpl.jena.sparql.expr.ExprTransform,com.hp.hpl.jena.sparql.expr.ExprList)>($r1, r0);

        return $r2;
    }

    public static boolean isAssignmentSafeEquality(com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.sparql.expr.Expr r0;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.expr.ExprLib: boolean isAssignmentSafeEquality(com.hp.hpl.jena.sparql.expr.Expr,boolean,boolean)>(r0, 0, 0);

        return $z0;
    }

    public static boolean isAssignmentSafeEquality(com.hp.hpl.jena.sparql.expr.Expr, boolean, boolean)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r6;
        com.hp.hpl.jena.sparql.expr.Expr r0, $r1, $r2;
        com.hp.hpl.jena.sparql.expr.ExprFunction2 $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6, z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        com.hp.hpl.jena.sparql.core.Var r5;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r3;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        z6 := @parameter1: boolean;

        z7 := @parameter2: boolean;

        $z0 = r0 instanceof com.hp.hpl.jena.sparql.expr.E_Equals;

        if $z0 != 0 goto label01;

        $z14 = r0 instanceof com.hp.hpl.jena.sparql.expr.E_SameTerm;

        if $z14 != 0 goto label01;

        return 0;

     label01:
        $r4 = (com.hp.hpl.jena.sparql.expr.ExprFunction2) r0;

        $r1 = virtualinvoke $r4.<com.hp.hpl.jena.sparql.expr.ExprFunction2: com.hp.hpl.jena.sparql.expr.Expr getArg1()>();

        $r2 = virtualinvoke $r4.<com.hp.hpl.jena.sparql.expr.ExprFunction2: com.hp.hpl.jena.sparql.expr.Expr getArg2()>();

        r5 = null;

        r6 = null;

        $z1 = interfaceinvoke $r1.<com.hp.hpl.jena.sparql.expr.Expr: boolean isVariable()>();

        if $z1 == 0 goto label02;

        $z13 = interfaceinvoke $r2.<com.hp.hpl.jena.sparql.expr.Expr: boolean isConstant()>();

        if $z13 == 0 goto label02;

        r5 = interfaceinvoke $r1.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.core.Var asVar()>();

        r6 = interfaceinvoke $r2.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.NodeValue getConstant()>();

        goto label03;

     label02:
        $z2 = interfaceinvoke $r2.<com.hp.hpl.jena.sparql.expr.Expr: boolean isVariable()>();

        if $z2 == 0 goto label03;

        $z12 = interfaceinvoke $r1.<com.hp.hpl.jena.sparql.expr.Expr: boolean isConstant()>();

        if $z12 == 0 goto label03;

        r5 = interfaceinvoke $r2.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.core.Var asVar()>();

        r6 = interfaceinvoke $r1.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.NodeValue getConstant()>();

     label03:
        if r5 == null goto label04;

        if r6 != null goto label05;

     label04:
        return 0;

     label05:
        $z3 = virtualinvoke r6.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isLiteral()>();

        if $z3 != 0 goto label06;

        return 1;

     label06:
        $z4 = r0 instanceof com.hp.hpl.jena.sparql.expr.E_SameTerm;

        if $z4 == 0 goto label09;

        if z6 == 0 goto label07;

        $z11 = virtualinvoke r6.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isString()>();

        if $z11 == 0 goto label07;

        return 0;

     label07:
        if z7 == 0 goto label08;

        $z10 = virtualinvoke r6.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isNumber()>();

        if $z10 == 0 goto label08;

        return 0;

     label08:
        return 1;

     label09:
        $z5 = r0 instanceof com.hp.hpl.jena.sparql.expr.E_Equals;

        if $z5 == 0 goto label12;

        if z6 != 0 goto label10;

        $z9 = virtualinvoke r6.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isString()>();

        if $z9 == 0 goto label10;

        return 0;

     label10:
        if z7 != 0 goto label11;

        $z8 = virtualinvoke r6.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isNumber()>();

        if $z8 == 0 goto label11;

        return 0;

     label11:
        return 1;

     label12:
        $r3 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        specialinvoke $r3.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>()>();

        throw $r3;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.sparql.expr.ExprLib$1 $r0;

        $r0 = new com.hp.hpl.jena.sparql.expr.ExprLib$1;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.ExprLib$1: void <init>()>();

        <com.hp.hpl.jena.sparql.expr.ExprLib: com.hp.hpl.jena.sparql.expr.ExprTransform replaceAgg> = $r0;

        return;
    }
}
