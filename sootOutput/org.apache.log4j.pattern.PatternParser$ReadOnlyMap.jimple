class org.apache.log4j.pattern.PatternParser$ReadOnlyMap extends java.lang.Object implements java.util.Map
{
    private final java.util.Map map;

    public void <init>(java.util.Map)
    {
        org.apache.log4j.pattern.PatternParser$ReadOnlyMap r0;
        java.util.Map r1;

        r0 := @this: org.apache.log4j.pattern.PatternParser$ReadOnlyMap;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.log4j.pattern.PatternParser$ReadOnlyMap: java.util.Map map> = r1;

        return;
    }

    public void clear()
    {
        java.lang.UnsupportedOperationException $r0;
        org.apache.log4j.pattern.PatternParser$ReadOnlyMap r1;

        r1 := @this: org.apache.log4j.pattern.PatternParser$ReadOnlyMap;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public boolean containsKey(java.lang.Object)
    {
        org.apache.log4j.pattern.PatternParser$ReadOnlyMap r0;
        java.util.Map $r2;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.apache.log4j.pattern.PatternParser$ReadOnlyMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.log4j.pattern.PatternParser$ReadOnlyMap: java.util.Map map>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean containsValue(java.lang.Object)
    {
        org.apache.log4j.pattern.PatternParser$ReadOnlyMap r0;
        java.util.Map $r2;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.apache.log4j.pattern.PatternParser$ReadOnlyMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.log4j.pattern.PatternParser$ReadOnlyMap: java.util.Map map>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsValue(java.lang.Object)>(r1);

        return $z0;
    }

    public java.util.Set entrySet()
    {
        java.util.Set $r2;
        org.apache.log4j.pattern.PatternParser$ReadOnlyMap r0;
        java.util.Map $r1;

        r0 := @this: org.apache.log4j.pattern.PatternParser$ReadOnlyMap;

        $r1 = r0.<org.apache.log4j.pattern.PatternParser$ReadOnlyMap: java.util.Map map>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        return $r2;
    }

    public java.lang.Object get(java.lang.Object)
    {
        org.apache.log4j.pattern.PatternParser$ReadOnlyMap r0;
        java.util.Map $r2;
        java.lang.Object r1, $r3;

        r0 := @this: org.apache.log4j.pattern.PatternParser$ReadOnlyMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.log4j.pattern.PatternParser$ReadOnlyMap: java.util.Map map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        return $r3;
    }

    public boolean isEmpty()
    {
        org.apache.log4j.pattern.PatternParser$ReadOnlyMap r0;
        java.util.Map $r1;
        boolean $z0;

        r0 := @this: org.apache.log4j.pattern.PatternParser$ReadOnlyMap;

        $r1 = r0.<org.apache.log4j.pattern.PatternParser$ReadOnlyMap: java.util.Map map>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        return $z0;
    }

    public java.util.Set keySet()
    {
        java.util.Set $r2;
        org.apache.log4j.pattern.PatternParser$ReadOnlyMap r0;
        java.util.Map $r1;

        r0 := @this: org.apache.log4j.pattern.PatternParser$ReadOnlyMap;

        $r1 = r0.<org.apache.log4j.pattern.PatternParser$ReadOnlyMap: java.util.Map map>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        return $r2;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r0;
        org.apache.log4j.pattern.PatternParser$ReadOnlyMap r1;
        java.lang.Object r2, r3;

        r1 := @this: org.apache.log4j.pattern.PatternParser$ReadOnlyMap;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public void putAll(java.util.Map)
    {
        java.lang.UnsupportedOperationException $r0;
        org.apache.log4j.pattern.PatternParser$ReadOnlyMap r1;
        java.util.Map r2;

        r1 := @this: org.apache.log4j.pattern.PatternParser$ReadOnlyMap;

        r2 := @parameter0: java.util.Map;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.Object r2;
        org.apache.log4j.pattern.PatternParser$ReadOnlyMap r1;

        r1 := @this: org.apache.log4j.pattern.PatternParser$ReadOnlyMap;

        r2 := @parameter0: java.lang.Object;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public int size()
    {
        int $i0;
        org.apache.log4j.pattern.PatternParser$ReadOnlyMap r0;
        java.util.Map $r1;

        r0 := @this: org.apache.log4j.pattern.PatternParser$ReadOnlyMap;

        $r1 = r0.<org.apache.log4j.pattern.PatternParser$ReadOnlyMap: java.util.Map map>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }

    public java.util.Collection values()
    {
        org.apache.log4j.pattern.PatternParser$ReadOnlyMap r0;
        java.util.Map $r1;
        java.util.Collection $r2;

        r0 := @this: org.apache.log4j.pattern.PatternParser$ReadOnlyMap;

        $r1 = r0.<org.apache.log4j.pattern.PatternParser$ReadOnlyMap: java.util.Map map>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        return $r2;
    }
}
