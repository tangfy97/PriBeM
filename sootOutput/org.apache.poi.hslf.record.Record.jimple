public abstract class org.apache.poi.hslf.record.Record extends java.lang.Object
{
    protected static final org.apache.poi.util.POILogger logger;

    public void <init>()
    {
        org.apache.poi.hslf.record.Record r0;

        r0 := @this: org.apache.poi.hslf.record.Record;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract boolean isAnAtom();

    public abstract long getRecordType();

    public abstract org.apache.poi.hslf.record.Record[] getChildRecords();

    public abstract void writeOut(java.io.OutputStream) throws java.io.IOException;

    public static void writeLittleEndian(int, java.io.OutputStream) throws java.io.IOException
    {
        int i0;
        java.io.OutputStream r1;
        byte[] r0;

        i0 := @parameter0: int;

        r1 := @parameter1: java.io.OutputStream;

        r0 = newarray (byte)[4];

        staticinvoke <org.apache.poi.util.LittleEndian: void putInt(byte[],int)>(r0, i0);

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>(r0);

        return;
    }

    public static void writeLittleEndian(short, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r1;
        byte[] r0;
        short s0;

        s0 := @parameter0: short;

        r1 := @parameter1: java.io.OutputStream;

        r0 = newarray (byte)[2];

        staticinvoke <org.apache.poi.util.LittleEndian: void putShort(byte[],short)>(r0, s0);

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>(r0);

        return;
    }

    public static org.apache.poi.hslf.record.Record buildRecordAtOffset(byte[], int)
    {
        byte[] r0;
        org.apache.poi.hslf.record.Record $r1;
        long l3, $l5;
        int i0, $i1, $i2, $i4, $i6, i7;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $i1 = i0 + 2;

        $i2 = staticinvoke <org.apache.poi.util.LittleEndian: int getUShort(byte[],int)>(r0, $i1);

        l3 = (long) $i2;

        $i4 = i0 + 4;

        $l5 = staticinvoke <org.apache.poi.util.LittleEndian: long getUInt(byte[],int)>(r0, $i4);

        i7 = (int) $l5;

        if i7 >= 0 goto label1;

        i7 = 0;

     label1:
        $i6 = 8 + i7;

        $r1 = staticinvoke <org.apache.poi.hslf.record.Record: org.apache.poi.hslf.record.Record createRecordForType(long,byte[],int,int)>(l3, r0, i0, $i6);

        return $r1;
    }

    public static org.apache.poi.hslf.record.Record[] findChildRecords(byte[], int, int)
    {
        byte[] r3;
        org.apache.poi.hslf.record.Record $r5;
        java.lang.Object[] $r2;
        long $l8, l11;
        java.util.ArrayList $r7;
        byte $b9;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i10, i12, $i13, i14, $i16;
        org.apache.poi.hslf.record.Record[] $r1, r6;
        org.apache.poi.hslf.exceptions.CorruptPowerPointFileException $r8;

        r3 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>(5);

        i10 = i0;

     label1:
        $i2 = i0 + i1;

        $i3 = $i2 - 8;

        if i10 > $i3 goto label5;

        $i5 = i10 + 2;

        $i6 = staticinvoke <org.apache.poi.util.LittleEndian: int getUShort(byte[],int)>(r3, $i5);

        l11 = (long) $i6;

        $i7 = i10 + 4;

        $l8 = staticinvoke <org.apache.poi.util.LittleEndian: long getUInt(byte[],int)>(r3, $i7);

        i12 = (int) $l8;

        if i12 >= 0 goto label2;

        i12 = 0;

     label2:
        if i10 != 0 goto label3;

        $b9 = l11 cmp 0L;

        if $b9 != 0 goto label3;

        $i16 = (int) 65535;

        if i12 != $i16 goto label3;

        $r8 = new org.apache.poi.hslf.exceptions.CorruptPowerPointFileException;

        specialinvoke $r8.<org.apache.poi.hslf.exceptions.CorruptPowerPointFileException: void <init>(java.lang.String)>("Corrupt document - starts with record of type 0000 and length 0xFFFF");

        throw $r8;

     label3:
        $i13 = 8 + i12;

        $r5 = staticinvoke <org.apache.poi.hslf.record.Record: org.apache.poi.hslf.record.Record createRecordForType(long,byte[],int,int)>(l11, r3, i10, $i13);

        if $r5 == null goto label4;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r5);

     label4:
        i14 = i10 + 8;

        i10 = i14 + i12;

        goto label1;

     label5:
        $i4 = interfaceinvoke $r7.<java.util.List: int size()>();

        $r1 = newarray (org.apache.poi.hslf.record.Record)[$i4];

        $r2 = interfaceinvoke $r7.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r1);

        r6 = (org.apache.poi.hslf.record.Record[]) $r2;

        return r6;
    }

    public static org.apache.poi.hslf.record.Record createRecordForType(long, byte[], int, int)
    {
        byte[] r0;
        java.lang.Integer $r7, $r8;
        java.lang.reflect.InvocationTargetException $r44;
        java.lang.StringBuilder $r12, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r55, $r59, $r60, $r61, $r62, $r63, $r64, $r65;
        java.lang.Throwable $r54;
        java.lang.Object[] $r6;
        long l4;
        java.lang.reflect.Constructor $r5;
        java.lang.String $r23, $r33, $r43, $r56, $r66;
        java.lang.Class[] $r2;
        java.lang.RuntimeException $r25, $r35, $r45, $r58;
        org.apache.poi.hslf.record.RecordTypes$Type $r10;
        java.lang.NoSuchMethodException $r24;
        java.lang.InstantiationException $r57;
        boolean $z0;
        java.lang.IllegalAccessException $r34;
        org.apache.poi.util.POILogger $r13;
        org.apache.poi.hslf.record.Record $r11;
        int i0, i1, $i2, $i3, $i5, $i6, $i7, $i8;
        org.apache.poi.hslf.record.PositionDependentRecord r68;
        java.lang.Class $r1, $r3, $r4, r67;
        java.lang.Object $r9;

        l4 := @parameter0: long;

        r0 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $i3 = i0 + i1;

        $i2 = lengthof r0;

        if $i3 <= $i2 goto label01;

        $r13 = <org.apache.poi.hslf.record.Record: org.apache.poi.util.POILogger logger>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Warning: Skipping record of type ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l4);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at position ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" which claims to be longer than the file! (");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" vs ");

        $i7 = lengthof r0;

        $i8 = $i7 - i0;

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r13.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(5, $r23);

        return null;

     label01:
        r67 = null;

     label02:
        $i5 = (int) l4;

        $r1 = staticinvoke <org.apache.poi.hslf.record.RecordTypes: java.lang.Class recordHandlingClass(int)>($i5);

        r67 = $r1;

        if $r1 != null goto label03;

        $r10 = <org.apache.poi.hslf.record.RecordTypes: org.apache.poi.hslf.record.RecordTypes$Type Unknown>;

        $i6 = $r10.<org.apache.poi.hslf.record.RecordTypes$Type: int typeID>;

        r67 = staticinvoke <org.apache.poi.hslf.record.RecordTypes: java.lang.Class recordHandlingClass(int)>($i6);

     label03:
        $r2 = newarray (java.lang.Class)[3];

        $r2[0] = class "[B";

        $r3 = <java.lang.Integer: java.lang.Class TYPE>;

        $r2[1] = $r3;

        $r4 = <java.lang.Integer: java.lang.Class TYPE>;

        $r2[2] = $r4;

        $r5 = virtualinvoke r67.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r2);

        $r6 = newarray (java.lang.Object)[3];

        $r6[0] = r0;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6[1] = $r7;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r6[2] = $r8;

        $r9 = virtualinvoke $r5.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r6);

        $r11 = (org.apache.poi.hslf.record.Record) $r9;

     label04:
        goto label09;

     label05:
        $r57 := @caughtexception;

        $r58 = new java.lang.RuntimeException;

        $r59 = new java.lang.StringBuilder;

        specialinvoke $r59.<java.lang.StringBuilder: void <init>()>();

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t instantiate the class for type with id ");

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l4);

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on class ");

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r67);

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : ");

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r57);

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r58.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r66, $r57);

        throw $r58;

     label06:
        $r44 := @caughtexception;

        $r45 = new java.lang.RuntimeException;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t instantiate the class for type with id ");

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l4);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on class ");

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r67);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : ");

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44);

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nCause was : ");

        $r54 = virtualinvoke $r44.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r54);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r45.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r56, $r44);

        throw $r45;

     label07:
        $r34 := @caughtexception;

        $r35 = new java.lang.RuntimeException;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t access the constructor for type with id ");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l4);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on class ");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r67);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : ");

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r34);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r35.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r43, $r34);

        throw $r35;

     label08:
        $r24 := @caughtexception;

        $r25 = new java.lang.RuntimeException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t access the constructor for type with id ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l4);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on class ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r67);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r24);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r33, $r24);

        throw $r25;

     label09:
        $z0 = $r11 instanceof org.apache.poi.hslf.record.PositionDependentRecord;

        if $z0 == 0 goto label10;

        r68 = (org.apache.poi.hslf.record.PositionDependentRecord) $r11;

        interfaceinvoke r68.<org.apache.poi.hslf.record.PositionDependentRecord: void setLastOnDiskOffset(int)>(i0);

     label10:
        return $r11;

        catch java.lang.InstantiationException from label02 to label04 with label05;
        catch java.lang.reflect.InvocationTargetException from label02 to label04 with label06;
        catch java.lang.IllegalAccessException from label02 to label04 with label07;
        catch java.lang.NoSuchMethodException from label02 to label04 with label08;
    }

    static void <clinit>()
    {
        org.apache.poi.util.POILogger $r0;

        $r0 = staticinvoke <org.apache.poi.util.POILogFactory: org.apache.poi.util.POILogger getLogger(java.lang.Class)>(class "Lorg/apache/poi/hslf/record/Record;");

        <org.apache.poi.hslf.record.Record: org.apache.poi.util.POILogger logger> = $r0;

        return;
    }
}
