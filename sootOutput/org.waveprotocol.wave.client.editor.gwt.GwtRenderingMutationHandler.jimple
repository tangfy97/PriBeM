public abstract class org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler extends org.waveprotocol.wave.client.editor.RenderingMutationHandler
{
    private static final org.waveprotocol.wave.model.document.util.Property WIDGET;
    private static final org.waveprotocol.wave.model.document.util.Property LOGICAL_PANEL;
    private final org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler$Flow flow;
    static final boolean $assertionsDisabled;

    public void <init>(org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler$Flow)
    {
        org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler$Flow r1;
        org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler r0;

        r0 := @this: org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler$Flow;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.RenderingMutationHandler: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler: org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler$Flow flow> = r1;

        return;
    }

    public final void receiveNewGwtWidget(org.waveprotocol.wave.client.editor.content.ContentElement, com.google.gwt.user.client.ui.Widget)
    {
        org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler$Flow $r3, $r4;
        com.google.gwt.user.client.ui.Widget r5;
        com.google.gwt.dom.client.Element $r1, $r6;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler r2;

        r2 := @this: org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r5 := @parameter1: com.google.gwt.user.client.ui.Widget;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getImplNodelet()>();

        $r4 = r2.<org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler: org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler$Flow flow>;

        $r3 = <org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler$Flow: org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler$Flow USE_WIDGET>;

        if $r4 != $r3 goto label1;

        $r6 = null;

        goto label2;

     label1:
        $r6 = $r1;

     label2:
        virtualinvoke r2.<org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler: void receiveNewGwtWidget(org.waveprotocol.wave.client.editor.content.ContentElement,com.google.gwt.user.client.ui.Widget,com.google.gwt.dom.client.Element)>(r0, r5, $r6);

        return;
    }

    public final void receiveNewGwtWidget(org.waveprotocol.wave.client.editor.content.ContentElement, com.google.gwt.user.client.ui.Widget, com.google.gwt.dom.client.Element)
    {
        com.google.gwt.user.client.ui.Widget r2;
        com.google.gwt.dom.client.Element r3;
        org.waveprotocol.wave.client.editor.content.ContentElement r1;
        org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler r0;

        r0 := @this: org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r2 := @parameter1: com.google.gwt.user.client.ui.Widget;

        r3 := @parameter2: com.google.gwt.dom.client.Element;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler: void maybeLogicalDetach(org.waveprotocol.wave.client.editor.content.ContentElement)>(r1);

        specialinvoke r0.<org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler: void disassociateWidget(org.waveprotocol.wave.client.editor.content.ContentElement)>(r1);

        if r2 == null goto label1;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler: void associateWidget(org.waveprotocol.wave.client.editor.content.Renderer$Renderable,com.google.gwt.user.client.ui.Widget,com.google.gwt.dom.client.Element)>(r1, r2, r3);

        specialinvoke r0.<org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler: void maybeLogicalAttach(org.waveprotocol.wave.client.editor.content.ContentElement)>(r1);

     label1:
        return;
    }

    protected abstract com.google.gwt.user.client.ui.Widget createGwtWidget(org.waveprotocol.wave.client.editor.content.Renderer$Renderable);

    protected com.google.gwt.dom.client.Element getContainerNodelet(com.google.gwt.user.client.ui.Widget)
    {
        com.google.gwt.user.client.ui.Widget r1;
        org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler r0;

        r0 := @this: org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler;

        r1 := @parameter0: com.google.gwt.user.client.ui.Widget;

        return null;
    }

    public static com.google.gwt.user.client.ui.Widget getGwtWidget(org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        com.google.gwt.user.client.ui.Widget $r3;
        org.waveprotocol.wave.model.document.util.Property $r1;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        java.lang.Object $r2;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        $r1 = <org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler: org.waveprotocol.wave.model.document.util.Property WIDGET>;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: java.lang.Object getProperty(org.waveprotocol.wave.model.document.util.Property)>($r1);

        $r3 = (com.google.gwt.user.client.ui.Widget) $r2;

        return $r3;
    }

    public final com.google.gwt.dom.client.Element createDomImpl(org.waveprotocol.wave.client.editor.content.Renderer$Renderable)
    {
        org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler$Flow $r3, $r4, $r5;
        org.waveprotocol.wave.client.editor.content.Renderer$Renderable r1;
        org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler r0;
        com.google.gwt.user.client.ui.Widget $r2;
        com.google.gwt.dom.client.Element $r6, r8, $r9, $r10, $r11;
        java.lang.Object r7;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.Renderer$Renderable;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler: com.google.gwt.user.client.ui.Widget createGwtWidget(org.waveprotocol.wave.client.editor.content.Renderer$Renderable)>(r1);

        $r4 = r0.<org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler: org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler$Flow flow>;

        $r3 = <org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler$Flow: org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler$Flow USE_WIDGET>;

        if $r4 != $r3 goto label3;

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Cannot have null widget with USE_WIDGET");

        r7 = virtualinvoke $r2.<com.google.gwt.user.client.ui.Widget: com.google.gwt.user.client.Element getElement()>();

        r8 = null;

        goto label4;

     label3:
        $r5 = r0.<org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler: org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler$Flow flow>;

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler$Flow: com.google.gwt.dom.client.Element createContainer()>();

        r7 = $r6;

        r8 = $r6;

     label4:
        $r9 = (com.google.gwt.dom.client.Element) r7;

        staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: com.google.gwt.dom.client.Element setContentEditable(com.google.gwt.dom.client.Element,boolean,boolean)>($r9, 0, 0);

        $r10 = (com.google.gwt.dom.client.Element) r7;

        staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: void makeUnselectable(com.google.gwt.dom.client.Element)>($r10);

        if $r2 == null goto label5;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler: void associateWidget(org.waveprotocol.wave.client.editor.content.Renderer$Renderable,com.google.gwt.user.client.ui.Widget,com.google.gwt.dom.client.Element)>(r1, $r2, r8);

     label5:
        $r11 = (com.google.gwt.dom.client.Element) r7;

        return $r11;
    }

    public final void setLogicalPanel(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.common.util.LogicalPanel)
    {
        org.waveprotocol.wave.model.document.util.Property $r1, $r5, $r8;
        java.lang.AssertionError $r7, $r9;
        org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler r6;
        org.waveprotocol.wave.client.common.util.LogicalPanel r3, r4;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        java.lang.Object $r2;
        boolean $z0, $z1, $z2, $z3;

        r6 := @this: org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r4 := @parameter1: org.waveprotocol.wave.client.common.util.LogicalPanel;

        $r1 = <org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler: org.waveprotocol.wave.model.document.util.Property LOGICAL_PANEL>;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: java.lang.Object getProperty(org.waveprotocol.wave.model.document.util.Property)>($r1);

        r3 = (org.waveprotocol.wave.client.common.util.LogicalPanel) $r2;

        if r3 != null goto label01;

        if r4 != null goto label01;

        return;

     label01:
        if r3 == null goto label02;

        if r4 != null goto label03;

     label02:
        $z3 = 1;

        goto label04;

     label03:
        $z3 = 0;

     label04:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z3, "setLogicalPanel called for an element that already has it");

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: boolean isContentAttached()>();

        if $z0 == 0 goto label10;

        if r4 != null goto label07;

        $z2 = <org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler: boolean $assertionsDisabled>;

        if $z2 != 0 goto label06;

        if r3 == null goto label05;

        if r4 == null goto label06;

     label05:
        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label06:
        specialinvoke r6.<org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler: void maybeLogicalDetach(org.waveprotocol.wave.client.editor.content.ContentElement)>(r0);

        $r8 = <org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler: org.waveprotocol.wave.model.document.util.Property LOGICAL_PANEL>;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: void setProperty(org.waveprotocol.wave.model.document.util.Property,java.lang.Object)>($r8, null);

        goto label10;

     label07:
        $z1 = <org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler: boolean $assertionsDisabled>;

        if $z1 != 0 goto label09;

        if r3 != null goto label08;

        if r4 != null goto label09;

     label08:
        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label09:
        $r5 = <org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler: org.waveprotocol.wave.model.document.util.Property LOGICAL_PANEL>;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: void setProperty(org.waveprotocol.wave.model.document.util.Property,java.lang.Object)>($r5, r4);

        specialinvoke r6.<org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler: void maybeLogicalAttach(org.waveprotocol.wave.client.editor.content.ContentElement)>(r0);

     label10:
        return;
    }

    public void onActivationStart(org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r1;
        org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler r0;

        r0 := @this: org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler: void maybeLogicalAttach(org.waveprotocol.wave.client.editor.content.ContentElement)>(r1);

        return;
    }

    public void onDeactivated(org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r1;
        org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler r0;

        r0 := @this: org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler: void receiveNewGwtWidget(org.waveprotocol.wave.client.editor.content.ContentElement,com.google.gwt.user.client.ui.Widget)>(r1, null);

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler: void setLogicalPanel(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.common.util.LogicalPanel)>(r1, null);

        return;
    }

    private void maybeLogicalAttach(org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        com.google.gwt.user.client.ui.Widget $r1;
        org.waveprotocol.wave.client.common.util.LogicalPanel $r3;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler r2;

        r2 := @this: org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        $r1 = staticinvoke <org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler: com.google.gwt.user.client.ui.Widget getGwtWidget(org.waveprotocol.wave.client.editor.content.ContentElement)>(r0);

        $r3 = specialinvoke r2.<org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler: org.waveprotocol.wave.client.common.util.LogicalPanel getLogicalPanel(org.waveprotocol.wave.client.editor.content.ContentElement)>(r0);

        if $r3 == null goto label1;

        if $r1 == null goto label1;

        interfaceinvoke $r3.<org.waveprotocol.wave.client.common.util.LogicalPanel: void doAdopt(com.google.gwt.user.client.ui.Widget)>($r1);

     label1:
        return;
    }

    private void maybeLogicalDetach(org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        com.google.gwt.user.client.ui.Widget $r1, $r4;
        org.waveprotocol.wave.client.common.util.LogicalPanel $r3;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler r2;

        r2 := @this: org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        $r1 = staticinvoke <org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler: com.google.gwt.user.client.ui.Widget getGwtWidget(org.waveprotocol.wave.client.editor.content.ContentElement)>(r0);

        $r3 = specialinvoke r2.<org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler: org.waveprotocol.wave.client.common.util.LogicalPanel getLogicalPanel(org.waveprotocol.wave.client.editor.content.ContentElement)>(r0);

        if $r3 == null goto label1;

        if $r1 == null goto label1;

        $r4 = virtualinvoke $r1.<com.google.gwt.user.client.ui.Widget: com.google.gwt.user.client.ui.Widget getParent()>();

        if $r4 == null goto label1;

        interfaceinvoke $r3.<org.waveprotocol.wave.client.common.util.LogicalPanel: void doOrphan(com.google.gwt.user.client.ui.Widget)>($r1);

     label1:
        return;
    }

    private void associateWidget(org.waveprotocol.wave.client.editor.content.Renderer$Renderable, com.google.gwt.user.client.ui.Widget, com.google.gwt.dom.client.Element)
    {
        com.google.gwt.user.client.Element $r6;
        org.waveprotocol.wave.client.editor.content.Renderer$Renderable r0;
        org.waveprotocol.wave.model.document.util.Property $r2;
        org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler r4;
        com.google.gwt.user.client.ui.Widget r1;
        com.google.gwt.dom.client.Element r3, $r5;
        com.google.gwt.dom.client.Node $r7;

        r4 := @this: org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.Renderer$Renderable;

        r1 := @parameter1: com.google.gwt.user.client.ui.Widget;

        r3 := @parameter2: com.google.gwt.dom.client.Element;

        $r2 = <org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler: org.waveprotocol.wave.model.document.util.Property WIDGET>;

        interfaceinvoke r0.<org.waveprotocol.wave.client.editor.content.Renderer$Renderable: void setProperty(org.waveprotocol.wave.model.document.util.Property,java.lang.Object)>($r2, r1);

        if r3 == null goto label1;

        $r6 = virtualinvoke r1.<com.google.gwt.user.client.ui.Widget: com.google.gwt.user.client.Element getElement()>();

        $r7 = (com.google.gwt.dom.client.Node) $r6;

        virtualinvoke r3.<com.google.gwt.dom.client.Element: com.google.gwt.dom.client.Node appendChild(com.google.gwt.dom.client.Node)>($r7);

     label1:
        $r5 = virtualinvoke r4.<org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler: com.google.gwt.dom.client.Element getContainerNodelet(com.google.gwt.user.client.ui.Widget)>(r1);

        interfaceinvoke r0.<org.waveprotocol.wave.client.editor.content.Renderer$Renderable: com.google.gwt.dom.client.Element setAutoAppendContainer(com.google.gwt.dom.client.Element)>($r5);

        return;
    }

    private void disassociateWidget(org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        com.google.gwt.user.client.Element $r5;
        org.waveprotocol.wave.model.document.util.Property $r2, $r6;
        java.lang.AssertionError $r4;
        org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler r7;
        com.google.gwt.user.client.ui.Widget $r1;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        java.lang.Object $r3;
        boolean $z0;

        r7 := @this: org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        $r1 = staticinvoke <org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler: com.google.gwt.user.client.ui.Widget getGwtWidget(org.waveprotocol.wave.client.editor.content.ContentElement)>(r0);

        if $r1 == null goto label1;

        $r5 = virtualinvoke $r1.<com.google.gwt.user.client.ui.Widget: com.google.gwt.user.client.Element getElement()>();

        virtualinvoke $r5.<com.google.gwt.user.client.Element: void removeFromParent()>();

        $r6 = <org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler: org.waveprotocol.wave.model.document.util.Property WIDGET>;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: void setProperty(org.waveprotocol.wave.model.document.util.Property,java.lang.Object)>($r6, null);

     label1:
        $z0 = <org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $r2 = <org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler: org.waveprotocol.wave.model.document.util.Property WIDGET>;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: java.lang.Object getProperty(org.waveprotocol.wave.model.document.util.Property)>($r2);

        if $r3 == null goto label2;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        return;
    }

    private org.waveprotocol.wave.client.common.util.LogicalPanel getLogicalPanel(org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.client.common.util.LogicalPanel $r3;
        org.waveprotocol.wave.model.document.util.Property $r1;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        java.lang.Object $r2;
        org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler r4;

        r4 := @this: org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        $r1 = <org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler: org.waveprotocol.wave.model.document.util.Property LOGICAL_PANEL>;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: java.lang.Object getProperty(org.waveprotocol.wave.model.document.util.Property)>($r1);

        $r3 = (org.waveprotocol.wave.client.common.util.LogicalPanel) $r2;

        return $r3;
    }

    public volatile void onDeactivated(java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.client.editor.content.ContentElement $r2;
        org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler r0;

        r0 := @this: org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.client.editor.content.ContentElement) r1;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler: void onDeactivated(org.waveprotocol.wave.client.editor.content.ContentElement)>($r2);

        return;
    }

    public volatile void onActivationStart(java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.client.editor.content.ContentElement $r2;
        org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler r0;

        r0 := @this: org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.client.editor.content.ContentElement) r1;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler: void onActivationStart(org.waveprotocol.wave.client.editor.content.ContentElement)>($r2);

        return;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.model.document.util.Property$ImmutableProperty $r1, $r2;
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/client/editor/gwt/GwtRenderingMutationHandler;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler: boolean $assertionsDisabled> = $z1;

        $r1 = staticinvoke <org.waveprotocol.wave.model.document.util.Property: org.waveprotocol.wave.model.document.util.Property$ImmutableProperty immutable(java.lang.String)>("widget");

        <org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler: org.waveprotocol.wave.model.document.util.Property WIDGET> = $r1;

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.util.Property: org.waveprotocol.wave.model.document.util.Property$ImmutableProperty immutable(java.lang.String)>("parent");

        <org.waveprotocol.wave.client.editor.gwt.GwtRenderingMutationHandler: org.waveprotocol.wave.model.document.util.Property LOGICAL_PANEL> = $r2;

        return;
    }
}
