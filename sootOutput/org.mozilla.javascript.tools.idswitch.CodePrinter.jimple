class org.mozilla.javascript.tools.idswitch.CodePrinter extends java.lang.Object
{
    private static final int LITERAL_CHAR_MAX_SIZE;
    private java.lang.String lineTerminator;
    private int indentStep;
    private int indentTabSize;
    private char[] buffer;
    private int offset;

    void <init>()
    {
        char[] $r1;
        org.mozilla.javascript.tools.idswitch.CodePrinter r0;

        r0 := @this: org.mozilla.javascript.tools.idswitch.CodePrinter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: java.lang.String lineTerminator> = "\n";

        r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: int indentStep> = 4;

        r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: int indentTabSize> = 8;

        $r1 = newarray (char)[4096];

        r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: char[] buffer> = $r1;

        return;
    }

    public java.lang.String getLineTerminator()
    {
        java.lang.String $r1;
        org.mozilla.javascript.tools.idswitch.CodePrinter r0;

        r0 := @this: org.mozilla.javascript.tools.idswitch.CodePrinter;

        $r1 = r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: java.lang.String lineTerminator>;

        return $r1;
    }

    public void setLineTerminator(java.lang.String)
    {
        java.lang.String r1;
        org.mozilla.javascript.tools.idswitch.CodePrinter r0;

        r0 := @this: org.mozilla.javascript.tools.idswitch.CodePrinter;

        r1 := @parameter0: java.lang.String;

        r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: java.lang.String lineTerminator> = r1;

        return;
    }

    public int getIndentStep()
    {
        int $i0;
        org.mozilla.javascript.tools.idswitch.CodePrinter r0;

        r0 := @this: org.mozilla.javascript.tools.idswitch.CodePrinter;

        $i0 = r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: int indentStep>;

        return $i0;
    }

    public void setIndentStep(int)
    {
        int i0;
        org.mozilla.javascript.tools.idswitch.CodePrinter r0;

        r0 := @this: org.mozilla.javascript.tools.idswitch.CodePrinter;

        i0 := @parameter0: int;

        r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: int indentStep> = i0;

        return;
    }

    public int getIndentTabSize()
    {
        int $i0;
        org.mozilla.javascript.tools.idswitch.CodePrinter r0;

        r0 := @this: org.mozilla.javascript.tools.idswitch.CodePrinter;

        $i0 = r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: int indentTabSize>;

        return $i0;
    }

    public void setIndentTabSize(int)
    {
        int i0;
        org.mozilla.javascript.tools.idswitch.CodePrinter r0;

        r0 := @this: org.mozilla.javascript.tools.idswitch.CodePrinter;

        i0 := @parameter0: int;

        r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: int indentTabSize> = i0;

        return;
    }

    public void clear()
    {
        org.mozilla.javascript.tools.idswitch.CodePrinter r0;

        r0 := @this: org.mozilla.javascript.tools.idswitch.CodePrinter;

        r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: int offset> = 0;

        return;
    }

    private int ensure_area(int)
    {
        org.mozilla.javascript.tools.idswitch.CodePrinter r0;
        int i0, i1, i2, $i3, $i4, i5;
        char[] $r1, $r2, $r3, $r4;

        r0 := @this: org.mozilla.javascript.tools.idswitch.CodePrinter;

        i1 := @parameter0: int;

        i0 = r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: int offset>;

        i2 = i0 + i1;

        $r1 = r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: char[] buffer>;

        $i3 = lengthof $r1;

        if i2 <= $i3 goto label2;

        $r2 = r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: char[] buffer>;

        $i4 = lengthof $r2;

        i5 = $i4 * 2;

        if i2 <= i5 goto label1;

        i5 = i2;

     label1:
        $r4 = newarray (char)[i5];

        $r3 = r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: char[] buffer>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r4, 0, i0);

        r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: char[] buffer> = $r4;

     label2:
        return i0;
    }

    private int add_area(int)
    {
        org.mozilla.javascript.tools.idswitch.CodePrinter r0;
        int i0, $i1, $i2;

        r0 := @this: org.mozilla.javascript.tools.idswitch.CodePrinter;

        i0 := @parameter0: int;

        $i1 = specialinvoke r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: int ensure_area(int)>(i0);

        $i2 = $i1 + i0;

        r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: int offset> = $i2;

        return $i1;
    }

    public int getOffset()
    {
        int $i0;
        org.mozilla.javascript.tools.idswitch.CodePrinter r0;

        r0 := @this: org.mozilla.javascript.tools.idswitch.CodePrinter;

        $i0 = r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: int offset>;

        return $i0;
    }

    public int getLastChar()
    {
        org.mozilla.javascript.tools.idswitch.CodePrinter r0;
        int $i0, $i1, $i2, $i3;
        char[] $r1;

        r0 := @this: org.mozilla.javascript.tools.idswitch.CodePrinter;

        $i0 = r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: int offset>;

        if $i0 != 0 goto label1;

        $i3 = -1;

        goto label2;

     label1:
        $r1 = r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: char[] buffer>;

        $i1 = r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: int offset>;

        $i2 = $i1 - 1;

        $i3 = $r1[$i2];

     label2:
        return $i3;
    }

    public void p(char)
    {
        org.mozilla.javascript.tools.idswitch.CodePrinter r0;
        int $i0;
        char[] $r1;
        char c1;

        r0 := @this: org.mozilla.javascript.tools.idswitch.CodePrinter;

        c1 := @parameter0: char;

        $i0 = specialinvoke r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: int add_area(int)>(1);

        $r1 = r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: char[] buffer>;

        $r1[$i0] = c1;

        return;
    }

    public void p(java.lang.String)
    {
        org.mozilla.javascript.tools.idswitch.CodePrinter r1;
        int $i0, $i1;
        char[] $r2;
        java.lang.String r0;

        r1 := @this: org.mozilla.javascript.tools.idswitch.CodePrinter;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = specialinvoke r1.<org.mozilla.javascript.tools.idswitch.CodePrinter: int add_area(int)>($i0);

        $r2 = r1.<org.mozilla.javascript.tools.idswitch.CodePrinter: char[] buffer>;

        virtualinvoke r0.<java.lang.String: void getChars(int,int,char[],int)>(0, $i0, $r2, $i1);

        return;
    }

    public final void p(char[])
    {
        int $i0;
        char[] r1;
        org.mozilla.javascript.tools.idswitch.CodePrinter r0;

        r0 := @this: org.mozilla.javascript.tools.idswitch.CodePrinter;

        r1 := @parameter0: char[];

        $i0 = lengthof r1;

        virtualinvoke r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: void p(char[],int,int)>(r1, 0, $i0);

        return;
    }

    public void p(char[], int, int)
    {
        org.mozilla.javascript.tools.idswitch.CodePrinter r0;
        int i0, i1, i2, $i3;
        char[] r1, $r2;

        r0 := @this: org.mozilla.javascript.tools.idswitch.CodePrinter;

        r1 := @parameter0: char[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        i2 = i0 - i1;

        $i3 = specialinvoke r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: int add_area(int)>(i2);

        $r2 = r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: char[] buffer>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i1, $r2, $i3, i2);

        return;
    }

    public void p(int)
    {
        int i0;
        java.lang.String $r1;
        org.mozilla.javascript.tools.idswitch.CodePrinter r0;

        r0 := @this: org.mozilla.javascript.tools.idswitch.CodePrinter;

        i0 := @parameter0: int;

        $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        virtualinvoke r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: void p(java.lang.String)>($r1);

        return;
    }

    public void qchar(int)
    {
        org.mozilla.javascript.tools.idswitch.CodePrinter r0;
        int $i0, i1, $i2, $i3, $i4;
        char[] $r1, $r2;

        r0 := @this: org.mozilla.javascript.tools.idswitch.CodePrinter;

        i1 := @parameter0: int;

        $i0 = specialinvoke r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: int ensure_area(int)>(8);

        $r1 = r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: char[] buffer>;

        $r1[$i0] = 39;

        $i2 = $i0 + 1;

        $i3 = specialinvoke r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: int put_string_literal_char(int,int,boolean)>($i2, i1, 0);

        $r2 = r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: char[] buffer>;

        $r2[$i3] = 39;

        $i4 = $i3 + 1;

        r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: int offset> = $i4;

        return;
    }

    public void qstring(java.lang.String)
    {
        char $c5;
        org.mozilla.javascript.tools.idswitch.CodePrinter r1;
        int $i0, $i1, $i2, $i3, $i4, i6, i7, $i8;
        char[] $r2, $r3;
        java.lang.String r0;

        r1 := @this: org.mozilla.javascript.tools.idswitch.CodePrinter;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = 6 * $i0;

        $i2 = 2 + $i1;

        $i3 = specialinvoke r1.<org.mozilla.javascript.tools.idswitch.CodePrinter: int ensure_area(int)>($i2);

        $r2 = r1.<org.mozilla.javascript.tools.idswitch.CodePrinter: char[] buffer>;

        $r2[$i3] = 34;

        i6 = $i3 + 1;

        i7 = 0;

     label1:
        if i7 == $i0 goto label2;

        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i7);

        $i8 = (int) $c5;

        i6 = specialinvoke r1.<org.mozilla.javascript.tools.idswitch.CodePrinter: int put_string_literal_char(int,int,boolean)>(i6, $i8, 1);

        i7 = i7 + 1;

        goto label1;

     label2:
        $r3 = r1.<org.mozilla.javascript.tools.idswitch.CodePrinter: char[] buffer>;

        $r3[i6] = 34;

        $i4 = i6 + 1;

        r1.<org.mozilla.javascript.tools.idswitch.CodePrinter: int offset> = $i4;

        return;
    }

    private int put_string_literal_char(int, int, boolean)
    {
        org.mozilla.javascript.tools.idswitch.CodePrinter r0;
        boolean z0, z1, $z2;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i7, $i9, $i10, $i11, $i13, $i14, $i18, i19, i20, i21;
        char $c4, $c8, $c12, $c15, $c16, $c17;
        char[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        r0 := @this: org.mozilla.javascript.tools.idswitch.CodePrinter;

        i19 := @parameter0: int;

        i20 := @parameter1: int;

        z0 := @parameter2: boolean;

        z1 = 1;

        lookupswitch(i20)
        {
            case 8: goto label01;
            case 9: goto label02;
            case 10: goto label03;
            case 12: goto label04;
            case 13: goto label05;
            case 34: goto label09;
            case 39: goto label06;
            default: goto label10;
        };

     label01:
        i20 = 98;

        goto label11;

     label02:
        i20 = 116;

        goto label11;

     label03:
        i20 = 110;

        goto label11;

     label04:
        i20 = 102;

        goto label11;

     label05:
        i20 = 114;

        goto label11;

     label06:
        if z0 != 0 goto label07;

        $z2 = 1;

        goto label08;

     label07:
        $z2 = 0;

     label08:
        z1 = $z2;

        goto label11;

     label09:
        z1 = z0;

        goto label11;

     label10:
        z1 = 0;

     label11:
        if z1 == 0 goto label12;

        $r8 = r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: char[] buffer>;

        $r8[i19] = 92;

        $r9 = r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: char[] buffer>;

        $i18 = i19 + 1;

        $c17 = (char) i20;

        $r9[$i18] = $c17;

        i21 = i19 + 2;

        goto label14;

     label12:
        if 32 > i20 goto label13;

        if i20 > 126 goto label13;

        $r7 = r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: char[] buffer>;

        $c16 = (char) i20;

        $r7[i19] = $c16;

        i21 = i19 + 1;

        goto label14;

     label13:
        $r1 = r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: char[] buffer>;

        $r1[i19] = 92;

        $r2 = r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: char[] buffer>;

        $i0 = i19 + 1;

        $r2[$i0] = 117;

        $r3 = r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: char[] buffer>;

        $i3 = i19 + 2;

        $i1 = i20 >> 12;

        $i2 = 15 & $i1;

        $c4 = staticinvoke <org.mozilla.javascript.tools.idswitch.CodePrinter: char digit_to_hex_letter(int)>($i2);

        $r3[$i3] = $c4;

        $r4 = r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: char[] buffer>;

        $i7 = i19 + 3;

        $i5 = i20 >> 8;

        $i6 = 15 & $i5;

        $c8 = staticinvoke <org.mozilla.javascript.tools.idswitch.CodePrinter: char digit_to_hex_letter(int)>($i6);

        $r4[$i7] = $c8;

        $r5 = r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: char[] buffer>;

        $i11 = i19 + 4;

        $i9 = i20 >> 4;

        $i10 = 15 & $i9;

        $c12 = staticinvoke <org.mozilla.javascript.tools.idswitch.CodePrinter: char digit_to_hex_letter(int)>($i10);

        $r5[$i11] = $c12;

        $r6 = r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: char[] buffer>;

        $i14 = i19 + 5;

        $i13 = 15 & i20;

        $c15 = staticinvoke <org.mozilla.javascript.tools.idswitch.CodePrinter: char digit_to_hex_letter(int)>($i13);

        $r6[$i14] = $c15;

        i21 = i19 + 6;

     label14:
        return i21;
    }

    private static char digit_to_hex_letter(int)
    {
        int i0, $i3, $i4;
        char $c1, $c2;

        i0 := @parameter0: int;

        if i0 >= 10 goto label1;

        $i3 = 48 + i0;

        $c2 = (char) $i3;

        return $c2;

     label1:
        $i4 = 55 + i0;

        $c1 = (char) $i4;

        return $c1;
    }

    public void indent(int)
    {
        org.mozilla.javascript.tools.idswitch.CodePrinter r0;
        int i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12;
        char[] $r1, $r2;

        r0 := @this: org.mozilla.javascript.tools.idswitch.CodePrinter;

        i0 := @parameter0: int;

        $i1 = r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: int indentStep>;

        i2 = $i1 * i0;

        $i3 = r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: int indentTabSize>;

        if $i3 > 0 goto label1;

        i10 = 0;

        i11 = i2;

        goto label2;

     label1:
        $i4 = r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: int indentTabSize>;

        i10 = i2 / $i4;

        $i5 = r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: int indentTabSize>;

        $i6 = i2 % $i5;

        i11 = i10 + $i6;

     label2:
        $i7 = specialinvoke r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: int add_area(int)>(i11);

        i12 = $i7;

        $i8 = $i7 + i10;

        $i9 = $i7 + i11;

     label3:
        if i12 == $i8 goto label4;

        $r2 = r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: char[] buffer>;

        $r2[i12] = 9;

        i12 = i12 + 1;

        goto label3;

     label4:
        if i12 == $i9 goto label5;

        $r1 = r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: char[] buffer>;

        $r1[i12] = 32;

        i12 = i12 + 1;

        goto label4;

     label5:
        return;
    }

    public void nl()
    {
        org.mozilla.javascript.tools.idswitch.CodePrinter r0;

        r0 := @this: org.mozilla.javascript.tools.idswitch.CodePrinter;

        virtualinvoke r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: void p(char)>(10);

        return;
    }

    public void line(int, java.lang.String)
    {
        int i0;
        java.lang.String r1;
        org.mozilla.javascript.tools.idswitch.CodePrinter r0;

        r0 := @this: org.mozilla.javascript.tools.idswitch.CodePrinter;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: void indent(int)>(i0);

        virtualinvoke r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: void p(java.lang.String)>(r1);

        virtualinvoke r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: void nl()>();

        return;
    }

    public void erase(int, int)
    {
        org.mozilla.javascript.tools.idswitch.CodePrinter r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        char[] $r1, $r2;

        r0 := @this: org.mozilla.javascript.tools.idswitch.CodePrinter;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        $r2 = r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: char[] buffer>;

        $r1 = r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: char[] buffer>;

        $i2 = r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: int offset>;

        $i3 = $i2 - i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, i0, $r1, i1, $i3);

        $i5 = r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: int offset>;

        $i4 = i0 - i1;

        $i6 = $i5 - $i4;

        r0.<org.mozilla.javascript.tools.idswitch.CodePrinter: int offset> = $i6;

        return;
    }

    public java.lang.String toString()
    {
        org.mozilla.javascript.tools.idswitch.CodePrinter r1;
        int $i0;
        char[] $r2;
        java.lang.String $r0;

        r1 := @this: org.mozilla.javascript.tools.idswitch.CodePrinter;

        $r0 = new java.lang.String;

        $r2 = r1.<org.mozilla.javascript.tools.idswitch.CodePrinter: char[] buffer>;

        $i0 = r1.<org.mozilla.javascript.tools.idswitch.CodePrinter: int offset>;

        specialinvoke $r0.<java.lang.String: void <init>(char[],int,int)>($r2, 0, $i0);

        return $r0;
    }

    public static void <clinit>()
    {
        <org.mozilla.javascript.tools.idswitch.CodePrinter: int LITERAL_CHAR_MAX_SIZE> = 6;

        return;
    }
}
