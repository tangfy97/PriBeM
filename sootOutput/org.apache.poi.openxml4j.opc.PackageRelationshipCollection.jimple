public final class org.apache.poi.openxml4j.opc.PackageRelationshipCollection extends java.lang.Object implements java.lang.Iterable
{
    private static org.apache.poi.util.POILogger logger;
    private java.util.TreeMap relationshipsByID;
    private java.util.TreeMap relationshipsByType;
    private org.apache.poi.openxml4j.opc.PackagePart relationshipPart;
    private org.apache.poi.openxml4j.opc.PackagePart sourcePart;
    private org.apache.poi.openxml4j.opc.PackagePartName partName;
    private org.apache.poi.openxml4j.opc.OPCPackage container;
    private int nextRelationshipId;

    void <init>()
    {
        java.util.TreeMap $r3, $r4;
        org.apache.poi.openxml4j.opc.PackageRelationshipCollection r0;
        int $i1;

        r0 := @this: org.apache.poi.openxml4j.opc.PackageRelationshipCollection;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = (int) -1;

        r0.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: int nextRelationshipId> = $i1;

        $r3 = new java.util.TreeMap;

        specialinvoke $r3.<java.util.TreeMap: void <init>()>();

        r0.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: java.util.TreeMap relationshipsByID> = $r3;

        $r4 = new java.util.TreeMap;

        specialinvoke $r4.<java.util.TreeMap: void <init>()>();

        r0.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: java.util.TreeMap relationshipsByType> = $r4;

        return;
    }

    public void <init>(org.apache.poi.openxml4j.opc.PackageRelationshipCollection, java.lang.String)
    {
        java.util.Iterator $r4;
        java.util.Collection $r3;
        org.apache.poi.openxml4j.opc.PackageRelationship r6;
        java.util.TreeMap $r2;
        org.apache.poi.openxml4j.opc.PackageRelationshipCollection r0, r1;
        java.lang.Object $r5;
        java.lang.String r7, $r8;
        boolean $z0, $z1;

        r0 := @this: org.apache.poi.openxml4j.opc.PackageRelationshipCollection;

        r1 := @parameter0: org.apache.poi.openxml4j.opc.PackageRelationshipCollection;

        r7 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: void <init>()>();

        $r2 = r1.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: java.util.TreeMap relationshipsByID>;

        $r3 = virtualinvoke $r2.<java.util.TreeMap: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.poi.openxml4j.opc.PackageRelationship) $r5;

        if r7 == null goto label2;

        $r8 = virtualinvoke r6.<org.apache.poi.openxml4j.opc.PackageRelationship: java.lang.String getRelationshipType()>();

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r7);

        if $z1 == 0 goto label3;

     label2:
        virtualinvoke r0.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: void addRelationship(org.apache.poi.openxml4j.opc.PackageRelationship)>(r6);

     label3:
        goto label1;

     label4:
        return;
    }

    public void <init>(org.apache.poi.openxml4j.opc.OPCPackage) throws org.apache.poi.openxml4j.exceptions.InvalidFormatException
    {
        org.apache.poi.openxml4j.opc.PackageRelationshipCollection r0;
        org.apache.poi.openxml4j.opc.OPCPackage r1;

        r0 := @this: org.apache.poi.openxml4j.opc.PackageRelationshipCollection;

        r1 := @parameter0: org.apache.poi.openxml4j.opc.OPCPackage;

        specialinvoke r0.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: void <init>(org.apache.poi.openxml4j.opc.OPCPackage,org.apache.poi.openxml4j.opc.PackagePart)>(r1, null);

        return;
    }

    public void <init>(org.apache.poi.openxml4j.opc.PackagePart) throws org.apache.poi.openxml4j.exceptions.InvalidFormatException
    {
        org.apache.poi.openxml4j.opc.PackagePart r1;
        org.apache.poi.openxml4j.opc.PackageRelationshipCollection r0;
        org.apache.poi.openxml4j.opc.OPCPackage $r2;

        r0 := @this: org.apache.poi.openxml4j.opc.PackageRelationshipCollection;

        r1 := @parameter0: org.apache.poi.openxml4j.opc.PackagePart;

        $r2 = r1.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.OPCPackage _container>;

        specialinvoke r0.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: void <init>(org.apache.poi.openxml4j.opc.OPCPackage,org.apache.poi.openxml4j.opc.PackagePart)>($r2, r1);

        return;
    }

    public void <init>(org.apache.poi.openxml4j.opc.OPCPackage, org.apache.poi.openxml4j.opc.PackagePart) throws org.apache.poi.openxml4j.exceptions.InvalidFormatException
    {
        org.apache.poi.openxml4j.opc.PackagePartName $r3, $r6, $r7;
        org.apache.poi.openxml4j.opc.PackageAccess $r4, $r5;
        java.lang.IllegalArgumentException $r10, $r11;
        org.apache.poi.openxml4j.opc.PackageRelationshipCollection r0;
        org.apache.poi.openxml4j.opc.OPCPackage r1;
        org.apache.poi.openxml4j.opc.PackagePart r2, $r8, $r9;
        boolean $z0, $z1;

        r0 := @this: org.apache.poi.openxml4j.opc.PackageRelationshipCollection;

        r1 := @parameter0: org.apache.poi.openxml4j.opc.OPCPackage;

        r2 := @parameter1: org.apache.poi.openxml4j.opc.PackagePart;

        specialinvoke r0.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: void <init>()>();

        if r1 != null goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("container");

        throw $r11;

     label1:
        if r2 == null goto label2;

        $z1 = virtualinvoke r2.<org.apache.poi.openxml4j.opc.PackagePart: boolean isRelationshipPart()>();

        if $z1 == 0 goto label2;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("part");

        throw $r10;

     label2:
        r0.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: org.apache.poi.openxml4j.opc.OPCPackage container> = r1;

        r0.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: org.apache.poi.openxml4j.opc.PackagePart sourcePart> = r2;

        $r3 = staticinvoke <org.apache.poi.openxml4j.opc.PackageRelationshipCollection: org.apache.poi.openxml4j.opc.PackagePartName getRelationshipPartName(org.apache.poi.openxml4j.opc.PackagePart)>(r2);

        r0.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: org.apache.poi.openxml4j.opc.PackagePartName partName> = $r3;

        $r4 = virtualinvoke r1.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackageAccess getPackageAccess()>();

        $r5 = <org.apache.poi.openxml4j.opc.PackageAccess: org.apache.poi.openxml4j.opc.PackageAccess WRITE>;

        if $r4 == $r5 goto label3;

        $r6 = r0.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: org.apache.poi.openxml4j.opc.PackagePartName partName>;

        $z0 = virtualinvoke r1.<org.apache.poi.openxml4j.opc.OPCPackage: boolean containPart(org.apache.poi.openxml4j.opc.PackagePartName)>($r6);

        if $z0 == 0 goto label3;

        $r7 = r0.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: org.apache.poi.openxml4j.opc.PackagePartName partName>;

        $r8 = virtualinvoke r1.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackagePart getPart(org.apache.poi.openxml4j.opc.PackagePartName)>($r7);

        r0.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: org.apache.poi.openxml4j.opc.PackagePart relationshipPart> = $r8;

        $r9 = r0.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: org.apache.poi.openxml4j.opc.PackagePart relationshipPart>;

        specialinvoke r0.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: void parseRelationshipsPart(org.apache.poi.openxml4j.opc.PackagePart)>($r9);

     label3:
        return;
    }

    private static org.apache.poi.openxml4j.opc.PackagePartName getRelationshipPartName(org.apache.poi.openxml4j.opc.PackagePart) throws org.apache.poi.openxml4j.exceptions.InvalidOperationException
    {
        org.apache.poi.openxml4j.opc.PackagePart r0;
        org.apache.poi.openxml4j.opc.PackagePartName $r1, r2;

        r0 := @parameter0: org.apache.poi.openxml4j.opc.PackagePart;

        if r0 != null goto label1;

        r2 = <org.apache.poi.openxml4j.opc.PackagingURIHelper: org.apache.poi.openxml4j.opc.PackagePartName PACKAGE_ROOT_PART_NAME>;

        goto label2;

     label1:
        r2 = virtualinvoke r0.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackagePartName getPartName()>();

     label2:
        $r1 = staticinvoke <org.apache.poi.openxml4j.opc.PackagingURIHelper: org.apache.poi.openxml4j.opc.PackagePartName getRelationshipPartName(org.apache.poi.openxml4j.opc.PackagePartName)>(r2);

        return $r1;
    }

    public void addRelationship(org.apache.poi.openxml4j.opc.PackageRelationship)
    {
        java.util.TreeMap $r2, $r4;
        org.apache.poi.openxml4j.opc.PackageRelationshipCollection r0;
        java.lang.String $r3, $r5;
        org.apache.poi.openxml4j.opc.PackageRelationship r1;

        r0 := @this: org.apache.poi.openxml4j.opc.PackageRelationshipCollection;

        r1 := @parameter0: org.apache.poi.openxml4j.opc.PackageRelationship;

        $r2 = r0.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: java.util.TreeMap relationshipsByID>;

        $r3 = virtualinvoke r1.<org.apache.poi.openxml4j.opc.PackageRelationship: java.lang.String getId()>();

        virtualinvoke $r2.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1);

        $r4 = r0.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: java.util.TreeMap relationshipsByType>;

        $r5 = virtualinvoke r1.<org.apache.poi.openxml4j.opc.PackageRelationship: java.lang.String getRelationshipType()>();

        virtualinvoke $r4.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r1);

        return;
    }

    public org.apache.poi.openxml4j.opc.PackageRelationship addRelationship(java.net.URI, org.apache.poi.openxml4j.opc.TargetMode, java.lang.String, java.lang.String)
    {
        org.apache.poi.openxml4j.opc.PackageRelationship $r19;
        org.apache.poi.openxml4j.opc.PackageRelationshipCollection r1;
        int $i0, $i1, $i2, $i3, $i4, $i6;
        org.apache.poi.openxml4j.opc.PackagePart $r5;
        java.net.URI r2;
        java.lang.String r4, $r8, $r10, r11, $r15;
        org.apache.poi.openxml4j.opc.TargetMode r3;
        java.util.TreeMap $r7, $r9, $r16;
        org.apache.poi.openxml4j.opc.OPCPackage $r6;
        java.lang.StringBuilder $r13, $r14, $r18;
        java.lang.Object $r17;

        r1 := @this: org.apache.poi.openxml4j.opc.PackageRelationshipCollection;

        r2 := @parameter0: java.net.URI;

        r3 := @parameter1: org.apache.poi.openxml4j.opc.TargetMode;

        r4 := @parameter2: java.lang.String;

        r11 := @parameter3: java.lang.String;

        if r11 != null goto label2;

        $i0 = r1.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: int nextRelationshipId>;

        $i6 = (int) -1;

        if $i0 != $i6 goto label1;

        $i1 = virtualinvoke r1.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: int size()>();

        $i2 = $i1 + 1;

        r1.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: int nextRelationshipId> = $i2;

     label1:
        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("rId");

        $i3 = r1.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: int nextRelationshipId>;

        $i4 = $i3 + 1;

        r1.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: int nextRelationshipId> = $i4;

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        r11 = $r15;

        $r16 = r1.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: java.util.TreeMap relationshipsByID>;

        $r17 = virtualinvoke $r16.<java.util.TreeMap: java.lang.Object get(java.lang.Object)>($r15);

        if $r17 != null goto label1;

     label2:
        $r19 = new org.apache.poi.openxml4j.opc.PackageRelationship;

        $r6 = r1.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: org.apache.poi.openxml4j.opc.OPCPackage container>;

        $r5 = r1.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: org.apache.poi.openxml4j.opc.PackagePart sourcePart>;

        specialinvoke $r19.<org.apache.poi.openxml4j.opc.PackageRelationship: void <init>(org.apache.poi.openxml4j.opc.OPCPackage,org.apache.poi.openxml4j.opc.PackagePart,java.net.URI,org.apache.poi.openxml4j.opc.TargetMode,java.lang.String,java.lang.String)>($r6, $r5, r2, r3, r4, r11);

        $r7 = r1.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: java.util.TreeMap relationshipsByID>;

        $r8 = virtualinvoke $r19.<org.apache.poi.openxml4j.opc.PackageRelationship: java.lang.String getId()>();

        virtualinvoke $r7.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r19);

        $r9 = r1.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: java.util.TreeMap relationshipsByType>;

        $r10 = virtualinvoke $r19.<org.apache.poi.openxml4j.opc.PackageRelationship: java.lang.String getRelationshipType()>();

        virtualinvoke $r9.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r19);

        return $r19;
    }

    public void removeRelationship(java.lang.String)
    {
        java.util.Collection $r10;
        org.apache.poi.openxml4j.opc.PackageRelationship r6;
        java.util.TreeMap $r1, $r2, $r4, $r7, $r9;
        org.apache.poi.openxml4j.opc.PackageRelationshipCollection r0;
        java.lang.Object $r5;
        java.lang.String r3, $r8;

        r0 := @this: org.apache.poi.openxml4j.opc.PackageRelationshipCollection;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: java.util.TreeMap relationshipsByID>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: java.util.TreeMap relationshipsByType>;

        if $r2 == null goto label1;

        $r4 = r0.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: java.util.TreeMap relationshipsByID>;

        $r5 = virtualinvoke $r4.<java.util.TreeMap: java.lang.Object get(java.lang.Object)>(r3);

        r6 = (org.apache.poi.openxml4j.opc.PackageRelationship) $r5;

        if r6 == null goto label1;

        $r7 = r0.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: java.util.TreeMap relationshipsByID>;

        $r8 = virtualinvoke r6.<org.apache.poi.openxml4j.opc.PackageRelationship: java.lang.String getId()>();

        virtualinvoke $r7.<java.util.TreeMap: java.lang.Object remove(java.lang.Object)>($r8);

        $r9 = r0.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: java.util.TreeMap relationshipsByType>;

        $r10 = virtualinvoke $r9.<java.util.TreeMap: java.util.Collection values()>();

        interfaceinvoke $r10.<java.util.Collection: boolean remove(java.lang.Object)>(r6);

     label1:
        return;
    }

    public void removeRelationship(org.apache.poi.openxml4j.opc.PackageRelationship)
    {
        java.util.TreeMap $r2, $r4;
        org.apache.poi.openxml4j.opc.PackageRelationshipCollection r1;
        java.util.Collection $r3, $r5;
        java.lang.IllegalArgumentException $r6;
        org.apache.poi.openxml4j.opc.PackageRelationship r0;

        r1 := @this: org.apache.poi.openxml4j.opc.PackageRelationshipCollection;

        r0 := @parameter0: org.apache.poi.openxml4j.opc.PackageRelationship;

        if r0 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("rel");

        throw $r6;

     label1:
        $r2 = r1.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: java.util.TreeMap relationshipsByID>;

        $r3 = virtualinvoke $r2.<java.util.TreeMap: java.util.Collection values()>();

        interfaceinvoke $r3.<java.util.Collection: boolean remove(java.lang.Object)>(r0);

        $r4 = r1.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: java.util.TreeMap relationshipsByType>;

        $r5 = virtualinvoke $r4.<java.util.TreeMap: java.util.Collection values()>();

        interfaceinvoke $r5.<java.util.Collection: boolean remove(java.lang.Object)>(r0);

        return;
    }

    public org.apache.poi.openxml4j.opc.PackageRelationship getRelationship(int)
    {
        java.util.Iterator $r6;
        java.util.Collection $r3, $r5;
        java.lang.IllegalArgumentException $r0;
        org.apache.poi.openxml4j.opc.PackageRelationship r8;
        java.util.TreeMap $r2, $r4;
        org.apache.poi.openxml4j.opc.PackageRelationshipCollection r1;
        int i0, $i1, $i2, i3;
        java.lang.Object $r7;
        boolean $z0;

        r1 := @this: org.apache.poi.openxml4j.opc.PackageRelationshipCollection;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r2 = r1.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: java.util.TreeMap relationshipsByID>;

        $r3 = virtualinvoke $r2.<java.util.TreeMap: java.util.Collection values()>();

        $i1 = interfaceinvoke $r3.<java.util.Collection: int size()>();

        if i0 <= $i1 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("index");

        throw $r0;

     label2:
        i3 = 0;

        $r4 = r1.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: java.util.TreeMap relationshipsByID>;

        $r5 = virtualinvoke $r4.<java.util.TreeMap: java.util.Collection values()>();

        $r6 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.poi.openxml4j.opc.PackageRelationship) $r7;

        $i2 = i3;

        i3 = i3 + 1;

        if i0 != $i2 goto label4;

        return r8;

     label4:
        goto label3;

     label5:
        return null;
    }

    public org.apache.poi.openxml4j.opc.PackageRelationship getRelationshipByID(java.lang.String)
    {
        java.util.TreeMap $r2;
        org.apache.poi.openxml4j.opc.PackageRelationshipCollection r0;
        java.lang.Object $r3;
        java.lang.String r1;
        org.apache.poi.openxml4j.opc.PackageRelationship $r4;

        r0 := @this: org.apache.poi.openxml4j.opc.PackageRelationshipCollection;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: java.util.TreeMap relationshipsByID>;

        $r3 = virtualinvoke $r2.<java.util.TreeMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.apache.poi.openxml4j.opc.PackageRelationship) $r3;

        return $r4;
    }

    public int size()
    {
        java.util.TreeMap $r1;
        org.apache.poi.openxml4j.opc.PackageRelationshipCollection r0;
        java.util.Collection $r2;
        int $i0;

        r0 := @this: org.apache.poi.openxml4j.opc.PackageRelationshipCollection;

        $r1 = r0.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: java.util.TreeMap relationshipsByID>;

        $r2 = virtualinvoke $r1.<java.util.TreeMap: java.util.Collection values()>();

        $i0 = interfaceinvoke $r2.<java.util.Collection: int size()>();

        return $i0;
    }

    private void parseRelationshipsPart(org.apache.poi.openxml4j.opc.PackagePart) throws org.apache.poi.openxml4j.exceptions.InvalidFormatException
    {
        java.net.URISyntaxException $r24;
        org.w3c.dom.Document $r8;
        org.apache.poi.openxml4j.opc.PackagePart r3;
        java.net.URI r33;
        boolean $z0, $z1, z2;
        org.apache.poi.openxml4j.exceptions.InvalidFormatException $r19, $r22;
        org.apache.poi.openxml4j.opc.PackagePartName $r4;
        org.apache.poi.util.POILogger $r1, $r21, $r26;
        java.lang.Exception $r20;
        java.lang.StringBuilder $r0, $r2, $r5, $r25, $r27, $r28, $r29;
        org.w3c.dom.Attr $r15;
        org.apache.poi.openxml4j.opc.PackageRelationshipCollection r16;
        org.w3c.dom.Node $r11;
        int $i0, i1;
        java.lang.String $r6, $r13, $r14, $r17, $r18, $r23, $r30, $r34;
        org.w3c.dom.NodeList $r10;
        org.w3c.dom.Element $r9, r12;
        org.apache.poi.openxml4j.opc.TargetMode r31, $r32;
        java.io.InputStream $r7;

        r16 := @this: org.apache.poi.openxml4j.opc.PackageRelationshipCollection;

        r3 := @parameter0: org.apache.poi.openxml4j.opc.PackagePart;

     label01:
        $r1 = <org.apache.poi.openxml4j.opc.PackageRelationshipCollection: org.apache.poi.util.POILogger logger>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parsing relationship: ");

        $r4 = virtualinvoke r3.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackagePartName getPartName()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(1, $r6);

        $r7 = virtualinvoke r3.<org.apache.poi.openxml4j.opc.PackagePart: java.io.InputStream getInputStream()>();

        $r8 = staticinvoke <org.apache.poi.util.DocumentHelper: org.w3c.dom.Document readDocument(java.io.InputStream)>($r7);

        $r9 = interfaceinvoke $r8.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        z2 = 0;

        $r10 = interfaceinvoke $r9.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("Relationship");

        $i0 = interfaceinvoke $r10.<org.w3c.dom.NodeList: int getLength()>();

        i1 = 0;

     label02:
        if i1 >= $i0 goto label12;

        $r11 = interfaceinvoke $r10.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i1);

        r12 = (org.w3c.dom.Element) $r11;

        $r13 = interfaceinvoke r12.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("Id");

        $r14 = interfaceinvoke r12.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("Type");

        $z0 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>("http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties");

        if $z0 == 0 goto label04;

        if z2 != 0 goto label03;

        z2 = 1;

        goto label04;

     label03:
        $r19 = new org.apache.poi.openxml4j.exceptions.InvalidFormatException;

        specialinvoke $r19.<org.apache.poi.openxml4j.exceptions.InvalidFormatException: void <init>(java.lang.String)>("OPC Compliance error [M4.1]: there is more than one core properties relationship in the package !");

        throw $r19;

     label04:
        $r15 = interfaceinvoke r12.<org.w3c.dom.Element: org.w3c.dom.Attr getAttributeNode(java.lang.String)>("TargetMode");

        r31 = <org.apache.poi.openxml4j.opc.TargetMode: org.apache.poi.openxml4j.opc.TargetMode INTERNAL>;

        if $r15 == null goto label07;

        $r17 = interfaceinvoke $r15.<org.w3c.dom.Attr: java.lang.String getValue()>();

        $r18 = virtualinvoke $r17.<java.lang.String: java.lang.String toLowerCase()>();

        $z1 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>("internal");

        if $z1 == 0 goto label05;

        $r32 = <org.apache.poi.openxml4j.opc.TargetMode: org.apache.poi.openxml4j.opc.TargetMode INTERNAL>;

        goto label06;

     label05:
        $r32 = <org.apache.poi.openxml4j.opc.TargetMode: org.apache.poi.openxml4j.opc.TargetMode EXTERNAL>;

     label06:
        r31 = $r32;

     label07:
        r33 = staticinvoke <org.apache.poi.openxml4j.opc.PackagingURIHelper: java.net.URI toURI(java.lang.String)>("http://invalid.uri");

        $r34 = interfaceinvoke r12.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("Target");

     label08:
        r33 = staticinvoke <org.apache.poi.openxml4j.opc.PackagingURIHelper: java.net.URI toURI(java.lang.String)>($r34);

     label09:
        goto label11;

     label10:
        $r24 := @caughtexception;

        $r26 = <org.apache.poi.openxml4j.opc.PackageRelationshipCollection: org.apache.poi.util.POILogger logger>;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot convert ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in a valid relationship URI-> dummy-URI used");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r26.<org.apache.poi.util.POILogger: void log(int,java.lang.Object,java.lang.Throwable)>(7, $r30, $r24);

     label11:
        virtualinvoke r16.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: org.apache.poi.openxml4j.opc.PackageRelationship addRelationship(java.net.URI,org.apache.poi.openxml4j.opc.TargetMode,java.lang.String,java.lang.String)>(r33, r31, $r14, $r13);

        i1 = i1 + 1;

        goto label02;

     label12:
        goto label14;

     label13:
        $r20 := @caughtexception;

        $r21 = <org.apache.poi.openxml4j.opc.PackageRelationshipCollection: org.apache.poi.util.POILogger logger>;

        virtualinvoke $r21.<org.apache.poi.util.POILogger: void log(int,java.lang.Throwable)>(7, $r20);

        $r22 = new org.apache.poi.openxml4j.exceptions.InvalidFormatException;

        $r23 = virtualinvoke $r20.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r22.<org.apache.poi.openxml4j.exceptions.InvalidFormatException: void <init>(java.lang.String)>($r23);

        throw $r22;

     label14:
        return;

        catch java.net.URISyntaxException from label08 to label09 with label10;
        catch java.lang.Exception from label01 to label12 with label13;
    }

    public org.apache.poi.openxml4j.opc.PackageRelationshipCollection getRelationships(java.lang.String)
    {
        java.lang.String r2;
        org.apache.poi.openxml4j.opc.PackageRelationshipCollection $r0, r1;

        r1 := @this: org.apache.poi.openxml4j.opc.PackageRelationshipCollection;

        r2 := @parameter0: java.lang.String;

        $r0 = new org.apache.poi.openxml4j.opc.PackageRelationshipCollection;

        specialinvoke $r0.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: void <init>(org.apache.poi.openxml4j.opc.PackageRelationshipCollection,java.lang.String)>(r1, r2);

        return $r0;
    }

    public java.util.Iterator iterator()
    {
        java.util.TreeMap $r1;
        java.util.Iterator $r3;
        org.apache.poi.openxml4j.opc.PackageRelationshipCollection r0;
        java.util.Collection $r2;

        r0 := @this: org.apache.poi.openxml4j.opc.PackageRelationshipCollection;

        $r1 = r0.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: java.util.TreeMap relationshipsByID>;

        $r2 = virtualinvoke $r1.<java.util.TreeMap: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

        return $r3;
    }

    public java.util.Iterator iterator(java.lang.String)
    {
        java.util.Iterator $r4, $r5;
        java.util.Collection $r3;
        org.apache.poi.openxml4j.opc.PackageRelationship r7;
        java.util.ArrayList $r0;
        java.util.TreeMap $r2;
        org.apache.poi.openxml4j.opc.PackageRelationshipCollection r1;
        java.lang.Object $r6;
        java.lang.String $r8, r9;
        boolean $z0, $z1;

        r1 := @this: org.apache.poi.openxml4j.opc.PackageRelationshipCollection;

        r9 := @parameter0: java.lang.String;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: java.util.TreeMap relationshipsByID>;

        $r3 = virtualinvoke $r2.<java.util.TreeMap: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.poi.openxml4j.opc.PackageRelationship) $r6;

        $r8 = virtualinvoke r7.<org.apache.poi.openxml4j.opc.PackageRelationship: java.lang.String getRelationshipType()>();

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r9);

        if $z1 == 0 goto label2;

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>(r7);

     label2:
        goto label1;

     label3:
        $r5 = virtualinvoke $r0.<java.util.ArrayList: java.util.Iterator iterator()>();

        return $r5;
    }

    public void clear()
    {
        java.util.TreeMap $r1, $r2;
        org.apache.poi.openxml4j.opc.PackageRelationshipCollection r0;

        r0 := @this: org.apache.poi.openxml4j.opc.PackageRelationshipCollection;

        $r1 = r0.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: java.util.TreeMap relationshipsByID>;

        virtualinvoke $r1.<java.util.TreeMap: void clear()>();

        $r2 = r0.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: java.util.TreeMap relationshipsByType>;

        virtualinvoke $r2.<java.util.TreeMap: void clear()>();

        return;
    }

    public java.lang.String toString()
    {
        org.apache.poi.openxml4j.opc.PackagePart $r6, $r25, $r30, $r33, $r38, $r43;
        org.apache.poi.openxml4j.opc.PackagePartName $r23, $r26, $r31, $r34, $r39, $r45;
        java.lang.StringBuilder $r2, $r4, $r5, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r20, $r21, $r22, $r24, $r27, $r28, $r29, $r32, $r35, $r36, $r37, $r40;
        org.apache.poi.openxml4j.opc.PackageRelationshipCollection r0;
        int $i0;
        java.lang.String $r19, r41, r42, r44, r46;
        java.util.TreeMap $r1, $r3;

        r0 := @this: org.apache.poi.openxml4j.opc.PackageRelationshipCollection;

        $r1 = r0.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: java.util.TreeMap relationshipsByID>;

        if $r1 != null goto label1;

        r41 = "relationshipsByID=null";

        goto label2;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = r0.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: java.util.TreeMap relationshipsByID>;

        $i0 = virtualinvoke $r3.<java.util.TreeMap: int size()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" relationship(s) = [");

        r41 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $r6 = r0.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: org.apache.poi.openxml4j.opc.PackagePart relationshipPart>;

        if $r6 == null goto label3;

        $r33 = r0.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: org.apache.poi.openxml4j.opc.PackagePart relationshipPart>;

        $r34 = $r33.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackagePartName _partName>;

        if $r34 == null goto label3;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r41);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r38 = r0.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: org.apache.poi.openxml4j.opc.PackagePart relationshipPart>;

        $r39 = $r38.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackagePartName _partName>;

        $r40 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r39);

        r42 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label4;

     label3:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r41);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",relationshipPart=null");

        r42 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        $r43 = r0.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: org.apache.poi.openxml4j.opc.PackagePart sourcePart>;

        if $r43 == null goto label5;

        $r25 = r0.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: org.apache.poi.openxml4j.opc.PackagePart sourcePart>;

        $r26 = $r25.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackagePartName _partName>;

        if $r26 == null goto label5;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r42);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r30 = r0.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: org.apache.poi.openxml4j.opc.PackagePart sourcePart>;

        $r31 = $r30.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackagePartName _partName>;

        $r32 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r31);

        r44 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label6;

     label5:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r42);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",sourcePart=null");

        r44 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

     label6:
        $r45 = r0.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: org.apache.poi.openxml4j.opc.PackagePartName partName>;

        if $r45 == null goto label7;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r44);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r23 = r0.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: org.apache.poi.openxml4j.opc.PackagePartName partName>;

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r23);

        r46 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label8;

     label7:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r44);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",uri=null)");

        r46 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

     label8:
        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r46);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r19;
    }

    static void <clinit>()
    {
        org.apache.poi.util.POILogger $r0;

        $r0 = staticinvoke <org.apache.poi.util.POILogFactory: org.apache.poi.util.POILogger getLogger(java.lang.Class)>(class "Lorg/apache/poi/openxml4j/opc/PackageRelationshipCollection;");

        <org.apache.poi.openxml4j.opc.PackageRelationshipCollection: org.apache.poi.util.POILogger logger> = $r0;

        return;
    }
}
