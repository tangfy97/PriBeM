public class groovy.util.Node extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    private groovy.util.Node parent;
    private java.lang.Object name;
    private java.util.Map attributes;
    private java.lang.Object value;
    static java.lang.Class class$groovy$util$Node;

    public void <init>(groovy.util.Node, java.lang.Object)
    {
        groovy.util.NodeList $r3;
        java.lang.Object r2;
        groovy.util.Node r0, r1;

        r0 := @this: groovy.util.Node;

        r1 := @parameter0: groovy.util.Node;

        r2 := @parameter1: java.lang.Object;

        $r3 = new groovy.util.NodeList;

        specialinvoke $r3.<groovy.util.NodeList: void <init>()>();

        specialinvoke r0.<groovy.util.Node: void <init>(groovy.util.Node,java.lang.Object,java.lang.Object)>(r1, r2, $r3);

        return;
    }

    public void <init>(groovy.util.Node, java.lang.Object, java.lang.Object)
    {
        java.lang.Object r2, r4;
        java.util.HashMap $r3;
        groovy.util.Node r0, r1;

        r0 := @this: groovy.util.Node;

        r1 := @parameter0: groovy.util.Node;

        r2 := @parameter1: java.lang.Object;

        r4 := @parameter2: java.lang.Object;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        specialinvoke r0.<groovy.util.Node: void <init>(groovy.util.Node,java.lang.Object,java.util.Map,java.lang.Object)>(r1, r2, $r3, r4);

        return;
    }

    public void <init>(groovy.util.Node, java.lang.Object, java.util.Map)
    {
        groovy.util.NodeList $r4;
        java.util.Map r3;
        java.lang.Object r2;
        groovy.util.Node r0, r1;

        r0 := @this: groovy.util.Node;

        r1 := @parameter0: groovy.util.Node;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.util.Map;

        $r4 = new groovy.util.NodeList;

        specialinvoke $r4.<groovy.util.NodeList: void <init>()>();

        specialinvoke r0.<groovy.util.Node: void <init>(groovy.util.Node,java.lang.Object,java.util.Map,java.lang.Object)>(r1, r2, r3, $r4);

        return;
    }

    public void <init>(groovy.util.Node, java.lang.Object, java.util.Map, java.lang.Object)
    {
        java.util.List $r5;
        java.util.Map r3;
        java.lang.Object r2, r4;
        groovy.util.Node r0, r1;

        r0 := @this: groovy.util.Node;

        r1 := @parameter0: groovy.util.Node;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.util.Map;

        r4 := @parameter3: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<groovy.util.Node: groovy.util.Node parent> = r1;

        r0.<groovy.util.Node: java.lang.Object name> = r2;

        r0.<groovy.util.Node: java.util.Map attributes> = r3;

        r0.<groovy.util.Node: java.lang.Object value> = r4;

        if r1 == null goto label1;

        $r5 = specialinvoke r0.<groovy.util.Node: java.util.List getParentList(groovy.util.Node)>(r1);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r0);

     label1:
        return;
    }

    private java.util.List getParentList(groovy.util.Node)
    {
        groovy.util.NodeList $r2;
        java.util.List r4;
        java.lang.Object $r1;
        groovy.util.Node r0, r3;
        boolean $z0;

        r3 := @this: groovy.util.Node;

        r0 := @parameter0: groovy.util.Node;

        $r1 = virtualinvoke r0.<groovy.util.Node: java.lang.Object value()>();

        $z0 = $r1 instanceof java.util.List;

        if $z0 == 0 goto label1;

        r4 = (java.util.List) $r1;

        goto label2;

     label1:
        $r2 = new groovy.util.NodeList;

        specialinvoke $r2.<groovy.util.NodeList: void <init>()>();

        r4 = $r2;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        virtualinvoke r0.<groovy.util.Node: void setValue(java.lang.Object)>($r2);

     label2:
        return r4;
    }

    public boolean append(groovy.util.Node)
    {
        java.util.List $r2;
        groovy.util.Node r0, r1;
        boolean $z0;

        r1 := @this: groovy.util.Node;

        r0 := @parameter0: groovy.util.Node;

        r0.<groovy.util.Node: groovy.util.Node parent> = r1;

        $r2 = specialinvoke r1.<groovy.util.Node: java.util.List getParentList(groovy.util.Node)>(r1);

        $z0 = interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r0);

        return $z0;
    }

    public boolean remove(groovy.util.Node)
    {
        java.util.List $r2;
        groovy.util.Node r0, r1;
        boolean $z0;

        r1 := @this: groovy.util.Node;

        r0 := @parameter0: groovy.util.Node;

        r0.<groovy.util.Node: groovy.util.Node parent> = null;

        $r2 = specialinvoke r1.<groovy.util.Node: java.util.List getParentList(groovy.util.Node)>(r1);

        $z0 = interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r0);

        return $z0;
    }

    public groovy.util.Node appendNode(java.lang.Object, java.util.Map)
    {
        java.util.Map r3;
        java.lang.Object r2;
        groovy.util.Node $r0, r1;

        r1 := @this: groovy.util.Node;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.util.Map;

        $r0 = new groovy.util.Node;

        specialinvoke $r0.<groovy.util.Node: void <init>(groovy.util.Node,java.lang.Object,java.util.Map)>(r1, r2, r3);

        return $r0;
    }

    public groovy.util.Node appendNode(java.lang.Object)
    {
        java.lang.Object r2;
        groovy.util.Node $r0, r1;

        r1 := @this: groovy.util.Node;

        r2 := @parameter0: java.lang.Object;

        $r0 = new groovy.util.Node;

        specialinvoke $r0.<groovy.util.Node: void <init>(groovy.util.Node,java.lang.Object)>(r1, r2);

        return $r0;
    }

    public groovy.util.Node appendNode(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r2, r3;
        groovy.util.Node $r0, r1;

        r1 := @this: groovy.util.Node;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $r0 = new groovy.util.Node;

        specialinvoke $r0.<groovy.util.Node: void <init>(groovy.util.Node,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        return $r0;
    }

    public groovy.util.Node appendNode(java.lang.Object, java.util.Map, java.lang.Object)
    {
        java.util.Map r3;
        java.lang.Object r2, r4;
        groovy.util.Node $r0, r1;

        r1 := @this: groovy.util.Node;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.util.Map;

        r4 := @parameter2: java.lang.Object;

        $r0 = new groovy.util.Node;

        specialinvoke $r0.<groovy.util.Node: void <init>(groovy.util.Node,java.lang.Object,java.util.Map,java.lang.Object)>(r1, r2, r3, r4);

        return $r0;
    }

    private static void setMetaClass(groovy.lang.MetaClass)
    {
        groovy.lang.MetaClass r1;
        groovy.lang.MetaClassRegistry $r2;
        groovy.util.Node$1 $r0;
        java.lang.Class $r3, $r4;

        r1 := @parameter0: groovy.lang.MetaClass;

        $r0 = new groovy.util.Node$1;

        specialinvoke $r0.<groovy.util.Node$1: void <init>(groovy.lang.MetaClass)>(r1);

        $r2 = staticinvoke <groovy.lang.GroovySystem: groovy.lang.MetaClassRegistry getMetaClassRegistry()>();

        $r3 = <groovy.util.Node: java.lang.Class class$groovy$util$Node>;

        if $r3 != null goto label1;

        $r4 = staticinvoke <groovy.util.Node: java.lang.Class class$(java.lang.String)>("groovy.util.Node");

        <groovy.util.Node: java.lang.Class class$groovy$util$Node> = $r4;

        goto label2;

     label1:
        $r4 = <groovy.util.Node: java.lang.Class class$groovy$util$Node>;

     label2:
        interfaceinvoke $r2.<groovy.lang.MetaClassRegistry: void setMetaClass(java.lang.Class,groovy.lang.MetaClass)>($r4, $r0);

        return;
    }

    public java.lang.String text()
    {
        java.lang.StringBuffer $r9, r13;
        java.lang.String $r6, r8, $r11, r12;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r5;
        java.util.Collection r4;
        groovy.util.Node r0;
        java.lang.Object $r1, $r2, $r3, $r7, $r10;

        r0 := @this: groovy.util.Node;

        $r1 = r0.<groovy.util.Node: java.lang.Object value>;

        $z0 = $r1 instanceof java.lang.String;

        if $z0 == 0 goto label1;

        $r10 = r0.<groovy.util.Node: java.lang.Object value>;

        $r11 = (java.lang.String) $r10;

        return $r11;

     label1:
        $r2 = r0.<groovy.util.Node: java.lang.Object value>;

        $z1 = $r2 instanceof java.util.Collection;

        if $z1 == 0 goto label8;

        $r3 = r0.<groovy.util.Node: java.lang.Object value>;

        r4 = (java.util.Collection) $r3;

        r12 = null;

        r13 = null;

        $r5 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r7 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $z3 = $r7 instanceof java.lang.String;

        if $z3 == 0 goto label5;

        r8 = (java.lang.String) $r7;

        if r12 != null goto label3;

        r12 = r8;

        goto label5;

     label3:
        if r13 != null goto label4;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        r13 = $r9;

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r12);

     label4:
        virtualinvoke r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r8);

     label5:
        goto label2;

     label6:
        if r13 == null goto label7;

        $r6 = virtualinvoke r13.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;

     label7:
        if r12 == null goto label8;

        return r12;

     label8:
        return "";
    }

    public java.util.Iterator iterator()
    {
        java.util.List $r1;
        groovy.util.Node r0;
        java.util.Iterator $r2;

        r0 := @this: groovy.util.Node;

        $r1 = virtualinvoke r0.<groovy.util.Node: java.util.List children()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        return $r2;
    }

    public java.util.List children()
    {
        groovy.util.NodeList $r3, $r7;
        groovy.util.Node r0;
        java.util.List $r6;
        java.lang.Object $r1, $r2, $r4, $r5;
        boolean $z0;

        r0 := @this: groovy.util.Node;

        $r1 = r0.<groovy.util.Node: java.lang.Object value>;

        if $r1 != null goto label1;

        $r7 = new groovy.util.NodeList;

        specialinvoke $r7.<groovy.util.NodeList: void <init>()>();

        return $r7;

     label1:
        $r2 = r0.<groovy.util.Node: java.lang.Object value>;

        $z0 = $r2 instanceof java.util.List;

        if $z0 == 0 goto label2;

        $r5 = r0.<groovy.util.Node: java.lang.Object value>;

        $r6 = (java.util.List) $r5;

        return $r6;

     label2:
        $r3 = new groovy.util.NodeList;

        specialinvoke $r3.<groovy.util.NodeList: void <init>()>();

        $r4 = r0.<groovy.util.Node: java.lang.Object value>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r4);

        return $r3;
    }

    public java.util.Map attributes()
    {
        groovy.util.Node r0;
        java.util.Map $r1;

        r0 := @this: groovy.util.Node;

        $r1 = r0.<groovy.util.Node: java.util.Map attributes>;

        return $r1;
    }

    public java.lang.Object attribute(java.lang.Object)
    {
        java.util.Map $r1, $r3;
        java.lang.Object r2, $r4;
        groovy.util.Node r0;

        r0 := @this: groovy.util.Node;

        r2 := @parameter0: java.lang.Object;

        $r1 = r0.<groovy.util.Node: java.util.Map attributes>;

        if $r1 == null goto label1;

        $r3 = r0.<groovy.util.Node: java.util.Map attributes>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        goto label2;

     label1:
        $r4 = null;

     label2:
        return $r4;
    }

    public java.lang.Object name()
    {
        java.lang.Object $r1;
        groovy.util.Node r0;

        r0 := @this: groovy.util.Node;

        $r1 = r0.<groovy.util.Node: java.lang.Object name>;

        return $r1;
    }

    public java.lang.Object value()
    {
        java.lang.Object $r1;
        groovy.util.Node r0;

        r0 := @this: groovy.util.Node;

        $r1 = r0.<groovy.util.Node: java.lang.Object value>;

        return $r1;
    }

    public void setValue(java.lang.Object)
    {
        java.lang.Object r1;
        groovy.util.Node r0;

        r0 := @this: groovy.util.Node;

        r1 := @parameter0: java.lang.Object;

        r0.<groovy.util.Node: java.lang.Object value> = r1;

        return;
    }

    public groovy.util.Node parent()
    {
        groovy.util.Node r0, $r1;

        r0 := @this: groovy.util.Node;

        $r1 = r0.<groovy.util.Node: groovy.util.Node parent>;

        return $r1;
    }

    public java.lang.Object get(java.lang.String)
    {
        groovy.util.NodeList $r5;
        java.util.Map $r10;
        int $i1;
        java.lang.String r0, $r1, $r2, $r3, $r9;
        boolean $z0, $z1, $z2;
        char $c0;
        groovy.util.Node r4, $r8;
        java.util.List $r6, $r7;
        java.lang.Object $r11;

        r4 := @this: groovy.util.Node;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $c0 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i1 = (int) $c0;

        if $i1 != 64 goto label1;

        $r9 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(1);

        $r10 = virtualinvoke r4.<groovy.util.Node: java.util.Map attributes()>();

        $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9);

        return $r11;

     label1:
        $r1 = "..";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

        $r8 = virtualinvoke r4.<groovy.util.Node: groovy.util.Node parent()>();

        return $r8;

     label2:
        $r2 = "*";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label3;

        $r7 = virtualinvoke r4.<groovy.util.Node: java.util.List children()>();

        return $r7;

     label3:
        $r3 = "**";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z2 == 0 goto label4;

        $r6 = virtualinvoke r4.<groovy.util.Node: java.util.List depthFirst()>();

        return $r6;

     label4:
        $r5 = specialinvoke r4.<groovy.util.Node: groovy.util.NodeList getByName(java.lang.String)>(r0);

        return $r5;
    }

    public groovy.util.NodeList getAt(groovy.xml.QName)
    {
        groovy.util.NodeList $r0;
        java.util.Iterator $r3;
        groovy.util.Node r1, r5;
        java.util.List $r2;
        java.lang.Object $r4, $r6;
        groovy.xml.QName r7;
        boolean $z0, $z1, $z2;

        r1 := @this: groovy.util.Node;

        r7 := @parameter0: groovy.xml.QName;

        $r0 = new groovy.util.NodeList;

        specialinvoke $r0.<groovy.util.NodeList: void <init>()>();

        $r2 = virtualinvoke r1.<groovy.util.Node: java.util.List children()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $z1 = $r4 instanceof groovy.util.Node;

        if $z1 == 0 goto label2;

        r5 = (groovy.util.Node) $r4;

        $r6 = virtualinvoke r5.<groovy.util.Node: java.lang.Object name()>();

        $z2 = virtualinvoke r7.<groovy.xml.QName: boolean matches(java.lang.Object)>($r6);

        if $z2 == 0 goto label2;

        virtualinvoke $r0.<groovy.util.NodeList: boolean add(java.lang.Object)>(r5);

     label2:
        goto label1;

     label3:
        return $r0;
    }

    private groovy.util.NodeList getByName(java.lang.String)
    {
        groovy.util.NodeList $r0;
        java.util.Iterator $r3;
        groovy.util.Node r1, r5;
        java.util.List $r2;
        java.lang.Object $r4, $r6;
        java.lang.String r7;
        groovy.xml.QName r8;
        boolean $z0, $z1, $z2, $z3, $z4;

        r1 := @this: groovy.util.Node;

        r7 := @parameter0: java.lang.String;

        $r0 = new groovy.util.NodeList;

        specialinvoke $r0.<groovy.util.NodeList: void <init>()>();

        $r2 = virtualinvoke r1.<groovy.util.Node: java.util.List children()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $z1 = $r4 instanceof groovy.util.Node;

        if $z1 == 0 goto label4;

        r5 = (groovy.util.Node) $r4;

        $r6 = virtualinvoke r5.<groovy.util.Node: java.lang.Object name()>();

        $z2 = $r6 instanceof groovy.xml.QName;

        if $z2 == 0 goto label3;

        r8 = (groovy.xml.QName) $r6;

        $z4 = virtualinvoke r8.<groovy.xml.QName: boolean matches(java.lang.Object)>(r7);

        if $z4 == 0 goto label2;

        virtualinvoke $r0.<groovy.util.NodeList: boolean add(java.lang.Object)>(r5);

     label2:
        goto label4;

     label3:
        $z3 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z3 == 0 goto label4;

        virtualinvoke $r0.<groovy.util.NodeList: boolean add(java.lang.Object)>(r5);

     label4:
        goto label1;

     label5:
        return $r0;
    }

    public java.util.List depthFirst()
    {
        groovy.util.NodeList $r0;
        java.util.List $r2;
        groovy.util.Node r1;

        r1 := @this: groovy.util.Node;

        $r0 = new groovy.util.NodeList;

        specialinvoke $r0.<groovy.util.NodeList: void <init>()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r2 = specialinvoke r1.<groovy.util.Node: java.util.List depthFirstRest()>();

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r2);

        return $r0;
    }

    private java.util.List depthFirstRest()
    {
        groovy.util.NodeList $r0;
        java.util.Iterator $r3;
        groovy.util.Node r1, r5;
        java.util.List $r6;
        java.lang.Object $r2, $r4;
        boolean $z0, $z1;

        r1 := @this: groovy.util.Node;

        $r0 = new groovy.util.NodeList;

        specialinvoke $r0.<groovy.util.NodeList: void <init>()>();

        $r2 = r1.<groovy.util.Node: java.lang.Object value>;

        $r3 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.util.Iterator asIterator(java.lang.Object)>($r2);

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $z1 = $r4 instanceof groovy.util.Node;

        if $z1 == 0 goto label2;

        r5 = (groovy.util.Node) $r4;

        $r6 = specialinvoke r5.<groovy.util.Node: java.util.List depthFirstRest()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r5);

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r6);

     label2:
        goto label1;

     label3:
        return $r0;
    }

    public java.util.List breadthFirst()
    {
        groovy.util.NodeList $r0;
        java.util.List $r2;
        groovy.util.Node r1;

        r1 := @this: groovy.util.Node;

        $r0 = new groovy.util.NodeList;

        specialinvoke $r0.<groovy.util.NodeList: void <init>()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r2 = specialinvoke r1.<groovy.util.Node: java.util.List breadthFirstRest()>();

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r2);

        return $r0;
    }

    private java.util.List breadthFirstRest()
    {
        groovy.util.NodeList $r0, $r2, $r3;
        java.util.Iterator $r4;
        groovy.util.Node r1, r6;
        java.util.List $r7, r8;
        java.lang.Object $r5;
        boolean $z0, $z1;

        r1 := @this: groovy.util.Node;

        $r0 = new groovy.util.NodeList;

        specialinvoke $r0.<groovy.util.NodeList: void <init>()>();

        r8 = specialinvoke r1.<groovy.util.Node: java.util.List getDirectChildren()>();

     label1:
        $z0 = interfaceinvoke r8.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label4;

        $r2 = new groovy.util.NodeList;

        specialinvoke $r2.<groovy.util.NodeList: void <init>(java.util.Collection)>(r8);

        $r3 = new groovy.util.NodeList;

        specialinvoke $r3.<groovy.util.NodeList: void <init>()>();

        r8 = $r3;

        $r4 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (groovy.util.Node) $r5;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r6);

        $r7 = specialinvoke r6.<groovy.util.Node: java.util.List getDirectChildren()>();

        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>($r7);

        goto label2;

     label3:
        goto label1;

     label4:
        return $r0;
    }

    private java.util.List getDirectChildren()
    {
        groovy.util.NodeList $r0;
        java.util.Iterator $r3;
        groovy.util.Node r1, r5;
        java.lang.Object $r2, $r4;
        boolean $z0, $z1;

        r1 := @this: groovy.util.Node;

        $r0 = new groovy.util.NodeList;

        specialinvoke $r0.<groovy.util.NodeList: void <init>()>();

        $r2 = r1.<groovy.util.Node: java.lang.Object value>;

        $r3 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.util.Iterator asIterator(java.lang.Object)>($r2);

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $z1 = $r4 instanceof groovy.util.Node;

        if $z1 == 0 goto label2;

        r5 = (groovy.util.Node) $r4;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r5);

     label2:
        goto label1;

     label3:
        return $r0;
    }

    public java.lang.String toString()
    {
        groovy.util.Node r1;
        java.lang.StringBuffer $r0, $r3, $r4, $r6, $r7, $r9, $r10;
        java.util.Map $r5;
        java.lang.Object $r2, $r8;
        java.lang.String $r11;

        r1 := @this: groovy.util.Node;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = r1.<groovy.util.Node: java.lang.Object name>;

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[attributes=");

        $r5 = r1.<groovy.util.Node: java.util.Map attributes>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("; value=");

        $r8 = r1.<groovy.util.Node: java.lang.Object value>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r11;
    }

    public void print(java.io.PrintWriter)
    {
        java.io.PrintWriter r1;
        groovy.util.Node r2;
        groovy.util.NodePrinter $r0;

        r2 := @this: groovy.util.Node;

        r1 := @parameter0: java.io.PrintWriter;

        $r0 = new groovy.util.NodePrinter;

        specialinvoke $r0.<groovy.util.NodePrinter: void <init>(java.io.PrintWriter)>(r1);

        virtualinvoke $r0.<groovy.util.NodePrinter: void print(groovy.util.Node)>(r2);

        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        groovy.lang.MetaClass $r2;
        groovy.lang.MetaClassRegistry $r0;
        java.lang.Class $r1, $r3;

        <groovy.util.Node: long serialVersionUID> = 4121134753270542643L;

        $r0 = staticinvoke <groovy.lang.GroovySystem: groovy.lang.MetaClassRegistry getMetaClassRegistry()>();

        $r1 = <groovy.util.Node: java.lang.Class class$groovy$util$Node>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <groovy.util.Node: java.lang.Class class$(java.lang.String)>("groovy.util.Node");

        <groovy.util.Node: java.lang.Class class$groovy$util$Node> = $r3;

        goto label2;

     label1:
        $r3 = <groovy.util.Node: java.lang.Class class$groovy$util$Node>;

     label2:
        $r2 = interfaceinvoke $r0.<groovy.lang.MetaClassRegistry: groovy.lang.MetaClass getMetaClass(java.lang.Class)>($r3);

        staticinvoke <groovy.util.Node: void setMetaClass(groovy.lang.MetaClass)>($r2);

        return;
    }
}
