final class com.google.common.base.Splitter$1 extends java.lang.Object implements com.google.common.base.Splitter$Strategy
{
    final com.google.common.base.CharMatcher val$separatorMatcher;

    void <init>(com.google.common.base.CharMatcher)
    {
        com.google.common.base.CharMatcher r1;
        com.google.common.base.Splitter$1 r0;

        r0 := @this: com.google.common.base.Splitter$1;

        r1 := @parameter0: com.google.common.base.CharMatcher;

        r0.<com.google.common.base.Splitter$1: com.google.common.base.CharMatcher val$separatorMatcher> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public com.google.common.base.Splitter$SplittingIterator iterator(com.google.common.base.Splitter, java.lang.CharSequence)
    {
        com.google.common.base.Splitter$1$1 $r0;
        java.lang.CharSequence r3;
        com.google.common.base.Splitter r2;
        com.google.common.base.Splitter$1 r1;

        r1 := @this: com.google.common.base.Splitter$1;

        r2 := @parameter0: com.google.common.base.Splitter;

        r3 := @parameter1: java.lang.CharSequence;

        $r0 = new com.google.common.base.Splitter$1$1;

        specialinvoke $r0.<com.google.common.base.Splitter$1$1: void <init>(com.google.common.base.Splitter$1,com.google.common.base.Splitter,java.lang.CharSequence)>(r1, r2, r3);

        return $r0;
    }

    public volatile java.util.Iterator iterator(com.google.common.base.Splitter, java.lang.CharSequence)
    {
        java.lang.CharSequence r2;
        com.google.common.base.Splitter$SplittingIterator $r3;
        com.google.common.base.Splitter r1;
        com.google.common.base.Splitter$1 r0;

        r0 := @this: com.google.common.base.Splitter$1;

        r1 := @parameter0: com.google.common.base.Splitter;

        r2 := @parameter1: java.lang.CharSequence;

        $r3 = virtualinvoke r0.<com.google.common.base.Splitter$1: com.google.common.base.Splitter$SplittingIterator iterator(com.google.common.base.Splitter,java.lang.CharSequence)>(r1, r2);

        return $r3;
    }
}
