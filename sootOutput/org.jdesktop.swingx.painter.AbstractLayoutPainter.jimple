public abstract class org.jdesktop.swingx.painter.AbstractLayoutPainter extends org.jdesktop.swingx.painter.AbstractPainter
{
    private org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment verticalAlignment;
    private org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment horizontalAlignment;
    private java.awt.Insets insets;
    private boolean fillVertical;
    private boolean fillHorizontal;

    public void <init>()
    {
        java.awt.Insets $r3;
        org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment $r2;
        org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment $r1;
        org.jdesktop.swingx.painter.AbstractLayoutPainter r0;

        r0 := @this: org.jdesktop.swingx.painter.AbstractLayoutPainter;

        specialinvoke r0.<org.jdesktop.swingx.painter.AbstractPainter: void <init>()>();

        $r1 = <org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment: org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment CENTER>;

        r0.<org.jdesktop.swingx.painter.AbstractLayoutPainter: org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment verticalAlignment> = $r1;

        $r2 = <org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment: org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment CENTER>;

        r0.<org.jdesktop.swingx.painter.AbstractLayoutPainter: org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment horizontalAlignment> = $r2;

        $r3 = new java.awt.Insets;

        specialinvoke $r3.<java.awt.Insets: void <init>(int,int,int,int)>(0, 0, 0, 0);

        r0.<org.jdesktop.swingx.painter.AbstractLayoutPainter: java.awt.Insets insets> = $r3;

        r0.<org.jdesktop.swingx.painter.AbstractLayoutPainter: boolean fillVertical> = 0;

        r0.<org.jdesktop.swingx.painter.AbstractLayoutPainter: boolean fillHorizontal> = 0;

        return;
    }

    public org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment getHorizontalAlignment()
    {
        org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment $r1;
        org.jdesktop.swingx.painter.AbstractLayoutPainter r0;

        r0 := @this: org.jdesktop.swingx.painter.AbstractLayoutPainter;

        $r1 = r0.<org.jdesktop.swingx.painter.AbstractLayoutPainter: org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment horizontalAlignment>;

        return $r1;
    }

    public java.awt.Insets getInsets()
    {
        java.awt.Insets $r1;
        org.jdesktop.swingx.painter.AbstractLayoutPainter r0;

        r0 := @this: org.jdesktop.swingx.painter.AbstractLayoutPainter;

        $r1 = r0.<org.jdesktop.swingx.painter.AbstractLayoutPainter: java.awt.Insets insets>;

        return $r1;
    }

    public org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment getVerticalAlignment()
    {
        org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment $r1;
        org.jdesktop.swingx.painter.AbstractLayoutPainter r0;

        r0 := @this: org.jdesktop.swingx.painter.AbstractLayoutPainter;

        $r1 = r0.<org.jdesktop.swingx.painter.AbstractLayoutPainter: org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment verticalAlignment>;

        return $r1;
    }

    public boolean isFillHorizontal()
    {
        org.jdesktop.swingx.painter.AbstractLayoutPainter r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.painter.AbstractLayoutPainter;

        $z0 = r0.<org.jdesktop.swingx.painter.AbstractLayoutPainter: boolean fillHorizontal>;

        return $z0;
    }

    public boolean isFillVertical()
    {
        org.jdesktop.swingx.painter.AbstractLayoutPainter r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.painter.AbstractLayoutPainter;

        $z0 = r0.<org.jdesktop.swingx.painter.AbstractLayoutPainter: boolean fillVertical>;

        return $z0;
    }

    public void setHorizontalAlignment(org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment)
    {
        org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment $r1, r2, $r3;
        org.jdesktop.swingx.painter.AbstractLayoutPainter r0;

        r0 := @this: org.jdesktop.swingx.painter.AbstractLayoutPainter;

        r2 := @parameter0: org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractLayoutPainter: org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment getHorizontalAlignment()>();

        r0.<org.jdesktop.swingx.painter.AbstractLayoutPainter: org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment horizontalAlignment> = r2;

        virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractLayoutPainter: void setDirty(boolean)>(1);

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractLayoutPainter: org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment getHorizontalAlignment()>();

        virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractLayoutPainter: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("horizontalAlignment", $r1, $r3);

        return;
    }

    public void setFillHorizontal(boolean)
    {
        java.lang.Boolean $r1, $r2;
        org.jdesktop.swingx.painter.AbstractLayoutPainter r0;
        boolean $z0, z1, $z2;

        r0 := @this: org.jdesktop.swingx.painter.AbstractLayoutPainter;

        z1 := @parameter0: boolean;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractLayoutPainter: boolean isFillHorizontal()>();

        r0.<org.jdesktop.swingx.painter.AbstractLayoutPainter: boolean fillHorizontal> = z1;

        virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractLayoutPainter: void setDirty(boolean)>(1);

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $z2 = virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractLayoutPainter: boolean isFillHorizontal()>();

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractLayoutPainter: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("fillHorizontal", $r1, $r2);

        return;
    }

    public void setInsets(java.awt.Insets)
    {
        java.awt.Insets $r1, r2, $r3;
        org.jdesktop.swingx.painter.AbstractLayoutPainter r0;

        r0 := @this: org.jdesktop.swingx.painter.AbstractLayoutPainter;

        r2 := @parameter0: java.awt.Insets;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractLayoutPainter: java.awt.Insets getInsets()>();

        r0.<org.jdesktop.swingx.painter.AbstractLayoutPainter: java.awt.Insets insets> = r2;

        virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractLayoutPainter: void setDirty(boolean)>(1);

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractLayoutPainter: java.awt.Insets getInsets()>();

        virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractLayoutPainter: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("insets", $r1, $r3);

        return;
    }

    public void setVerticalAlignment(org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment)
    {
        org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment $r1, r2, $r3;
        org.jdesktop.swingx.painter.AbstractLayoutPainter r0;

        r0 := @this: org.jdesktop.swingx.painter.AbstractLayoutPainter;

        r2 := @parameter0: org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractLayoutPainter: org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment getVerticalAlignment()>();

        r0.<org.jdesktop.swingx.painter.AbstractLayoutPainter: org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment verticalAlignment> = r2;

        virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractLayoutPainter: void setDirty(boolean)>(1);

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractLayoutPainter: org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment getVerticalAlignment()>();

        virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractLayoutPainter: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("verticalAlignment", $r1, $r3);

        return;
    }

    public void setFillVertical(boolean)
    {
        java.lang.Boolean $r1, $r2;
        org.jdesktop.swingx.painter.AbstractLayoutPainter r0;
        boolean $z0, z1, $z2;

        r0 := @this: org.jdesktop.swingx.painter.AbstractLayoutPainter;

        z1 := @parameter0: boolean;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractLayoutPainter: boolean isFillVertical()>();

        r0.<org.jdesktop.swingx.painter.AbstractLayoutPainter: boolean fillVertical> = z1;

        virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractLayoutPainter: void setDirty(boolean)>(1);

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $z2 = virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractLayoutPainter: boolean isFillVertical()>();

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractLayoutPainter: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("fillVertical", $r1, $r2);

        return;
    }

    protected final java.awt.Rectangle calculateLayout(int, int, int, int)
    {
        java.awt.Rectangle $r0;
        java.awt.Insets $r2, $r3, $r4, $r5;
        int i0, i1, i2, $i3, $i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        org.jdesktop.swingx.painter.AbstractLayoutPainter r1;
        boolean $z0, $z1;

        r1 := @this: org.jdesktop.swingx.painter.AbstractLayoutPainter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i5 := @parameter3: int;

        $r0 = new java.awt.Rectangle;

        specialinvoke $r0.<java.awt.Rectangle: void <init>()>();

        $r0.<java.awt.Rectangle: int width> = i0;

        $r0.<java.awt.Rectangle: int height> = i1;

        $z0 = virtualinvoke r1.<org.jdesktop.swingx.painter.AbstractLayoutPainter: boolean isFillHorizontal()>();

        if $z0 == 0 goto label1;

        $r4 = r1.<org.jdesktop.swingx.painter.AbstractLayoutPainter: java.awt.Insets insets>;

        $i12 = $r4.<java.awt.Insets: int left>;

        $i14 = i2 - $i12;

        $r5 = r1.<org.jdesktop.swingx.painter.AbstractLayoutPainter: java.awt.Insets insets>;

        $i13 = $r5.<java.awt.Insets: int right>;

        $i15 = $i14 - $i13;

        $r0.<java.awt.Rectangle: int width> = $i15;

     label1:
        $z1 = virtualinvoke r1.<org.jdesktop.swingx.painter.AbstractLayoutPainter: boolean isFillVertical()>();

        if $z1 == 0 goto label2;

        $r2 = r1.<org.jdesktop.swingx.painter.AbstractLayoutPainter: java.awt.Insets insets>;

        $i8 = $r2.<java.awt.Insets: int top>;

        $i10 = i5 - $i8;

        $r3 = r1.<org.jdesktop.swingx.painter.AbstractLayoutPainter: java.awt.Insets insets>;

        $i9 = $r3.<java.awt.Insets: int bottom>;

        $i11 = $i10 - $i9;

        $r0.<java.awt.Rectangle: int height> = $i11;

     label2:
        $i3 = $r0.<java.awt.Rectangle: int width>;

        $i4 = specialinvoke r1.<org.jdesktop.swingx.painter.AbstractLayoutPainter: int calculateX(int,int)>($i3, i2);

        $r0.<java.awt.Rectangle: int x> = $i4;

        $i6 = $r0.<java.awt.Rectangle: int height>;

        $i7 = specialinvoke r1.<org.jdesktop.swingx.painter.AbstractLayoutPainter: int calculateY(int,int)>($i6, i5);

        $r0.<java.awt.Rectangle: int y> = $i7;

        return $r0;
    }

    private int calculateY(int, int)
    {
        java.awt.Insets $r7, $r8, $r9;
        int i0, i1, $i2, $i3, $i4, $i5, i6, i7, i8;
        org.jdesktop.swingx.painter.AbstractLayoutPainter r0;
        org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment $r1, $r2, $r3, $r4, $r5, $r6;

        r0 := @this: org.jdesktop.swingx.painter.AbstractLayoutPainter;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        i6 = 0;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractLayoutPainter: org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment getVerticalAlignment()>();

        $r2 = <org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment: org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment TOP>;

        if $r1 != $r2 goto label1;

        $r9 = r0.<org.jdesktop.swingx.painter.AbstractLayoutPainter: java.awt.Insets insets>;

        $i5 = $r9.<java.awt.Insets: int top>;

        i6 = 0 + $i5;

     label1:
        $r3 = virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractLayoutPainter: org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment getVerticalAlignment()>();

        $r4 = <org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment: org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment CENTER>;

        if $r3 != $r4 goto label2;

        $i3 = i0 - i1;

        i7 = $i3 / 2;

        $r8 = r0.<org.jdesktop.swingx.painter.AbstractLayoutPainter: java.awt.Insets insets>;

        $i4 = $r8.<java.awt.Insets: int top>;

        i6 = i7 + $i4;

     label2:
        $r5 = virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractLayoutPainter: org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment getVerticalAlignment()>();

        $r6 = <org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment: org.jdesktop.swingx.painter.AbstractLayoutPainter$VerticalAlignment BOTTOM>;

        if $r5 != $r6 goto label3;

        i8 = i0 - i1;

        $r7 = r0.<org.jdesktop.swingx.painter.AbstractLayoutPainter: java.awt.Insets insets>;

        $i2 = $r7.<java.awt.Insets: int bottom>;

        i6 = i8 - $i2;

     label3:
        return i6;
    }

    private int calculateX(int, int)
    {
        java.awt.Insets $r7, $r8, $r9;
        int i0, i1, $i2, $i3, $i4, $i5, i6, i7, i8;
        org.jdesktop.swingx.painter.AbstractLayoutPainter r0;
        org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment $r1, $r2, $r3, $r4, $r5, $r6;

        r0 := @this: org.jdesktop.swingx.painter.AbstractLayoutPainter;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        i6 = 0;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractLayoutPainter: org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment getHorizontalAlignment()>();

        $r2 = <org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment: org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment LEFT>;

        if $r1 != $r2 goto label1;

        $r9 = r0.<org.jdesktop.swingx.painter.AbstractLayoutPainter: java.awt.Insets insets>;

        $i5 = $r9.<java.awt.Insets: int left>;

        i6 = 0 + $i5;

     label1:
        $r3 = virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractLayoutPainter: org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment getHorizontalAlignment()>();

        $r4 = <org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment: org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment CENTER>;

        if $r3 != $r4 goto label2;

        $i3 = i0 - i1;

        i7 = $i3 / 2;

        $r8 = r0.<org.jdesktop.swingx.painter.AbstractLayoutPainter: java.awt.Insets insets>;

        $i4 = $r8.<java.awt.Insets: int left>;

        i6 = i7 + $i4;

     label2:
        $r5 = virtualinvoke r0.<org.jdesktop.swingx.painter.AbstractLayoutPainter: org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment getHorizontalAlignment()>();

        $r6 = <org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment: org.jdesktop.swingx.painter.AbstractLayoutPainter$HorizontalAlignment RIGHT>;

        if $r5 != $r6 goto label3;

        i8 = i0 - i1;

        $r7 = r0.<org.jdesktop.swingx.painter.AbstractLayoutPainter: java.awt.Insets insets>;

        $i2 = $r7.<java.awt.Insets: int right>;

        i6 = i8 - $i2;

     label3:
        return i6;
    }
}
