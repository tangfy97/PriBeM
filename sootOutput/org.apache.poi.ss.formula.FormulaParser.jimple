public final class org.apache.poi.ss.formula.FormulaParser extends java.lang.Object
{
    private final java.lang.String _formulaString;
    private final int _formulaLength;
    private int _pointer;
    private org.apache.poi.ss.formula.ParseNode _rootNode;
    private static final char TAB;
    private static final char CR;
    private static final char LF;
    private char look;
    private org.apache.poi.ss.formula.FormulaParsingWorkbook _book;
    private org.apache.poi.ss.SpreadsheetVersion _ssVersion;
    private int _sheetIndex;
    private static final java.util.regex.Pattern CELL_REF_PATTERN;

    private void <init>(java.lang.String, org.apache.poi.ss.formula.FormulaParsingWorkbook, int)
    {
        org.apache.poi.ss.formula.FormulaParser r0;
        org.apache.poi.ss.SpreadsheetVersion $r4;
        int $i0, i1;
        java.lang.String r1, $r3;
        org.apache.poi.ss.formula.FormulaParsingWorkbook r2;

        r0 := @this: org.apache.poi.ss.formula.FormulaParser;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.poi.ss.formula.FormulaParsingWorkbook;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.poi.ss.formula.FormulaParser: java.lang.String _formulaString> = r1;

        r0.<org.apache.poi.ss.formula.FormulaParser: int _pointer> = 0;

        r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.FormulaParsingWorkbook _book> = r2;

        if r2 != null goto label1;

        $r4 = <org.apache.poi.ss.SpreadsheetVersion: org.apache.poi.ss.SpreadsheetVersion EXCEL97>;

        goto label2;

     label1:
        $r4 = interfaceinvoke r2.<org.apache.poi.ss.formula.FormulaParsingWorkbook: org.apache.poi.ss.SpreadsheetVersion getSpreadsheetVersion()>();

     label2:
        r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.SpreadsheetVersion _ssVersion> = $r4;

        $r3 = r0.<org.apache.poi.ss.formula.FormulaParser: java.lang.String _formulaString>;

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        r0.<org.apache.poi.ss.formula.FormulaParser: int _formulaLength> = $i0;

        r0.<org.apache.poi.ss.formula.FormulaParser: int _sheetIndex> = i1;

        return;
    }

    public static org.apache.poi.ss.formula.ptg.Ptg[] parse(java.lang.String, org.apache.poi.ss.formula.FormulaParsingWorkbook, int, int)
    {
        org.apache.poi.ss.formula.FormulaParser $r0;
        org.apache.poi.ss.formula.ptg.Ptg[] $r3;
        int i0, i1;
        java.lang.String r1;
        org.apache.poi.ss.formula.FormulaParsingWorkbook r2;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.poi.ss.formula.FormulaParsingWorkbook;

        i1 := @parameter2: int;

        i0 := @parameter3: int;

        $r0 = new org.apache.poi.ss.formula.FormulaParser;

        specialinvoke $r0.<org.apache.poi.ss.formula.FormulaParser: void <init>(java.lang.String,org.apache.poi.ss.formula.FormulaParsingWorkbook,int)>(r1, r2, i0);

        specialinvoke $r0.<org.apache.poi.ss.formula.FormulaParser: void parse()>();

        $r3 = specialinvoke $r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.ptg.Ptg[] getRPNPtg(int)>(i1);

        return $r3;
    }

    private void GetChar()
    {
        org.apache.poi.ss.formula.FormulaParser r0;
        char $c7;
        java.lang.RuntimeException $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String $r1;

        r0 := @this: org.apache.poi.ss.formula.FormulaParser;

        $i1 = r0.<org.apache.poi.ss.formula.FormulaParser: int _pointer>;

        $i0 = r0.<org.apache.poi.ss.formula.FormulaParser: int _formulaLength>;

        if $i1 <= $i0 goto label1;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("too far");

        throw $r2;

     label1:
        $i3 = r0.<org.apache.poi.ss.formula.FormulaParser: int _pointer>;

        $i2 = r0.<org.apache.poi.ss.formula.FormulaParser: int _formulaLength>;

        if $i3 >= $i2 goto label2;

        $r1 = r0.<org.apache.poi.ss.formula.FormulaParser: java.lang.String _formulaString>;

        $i6 = r0.<org.apache.poi.ss.formula.FormulaParser: int _pointer>;

        $c7 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i6);

        r0.<org.apache.poi.ss.formula.FormulaParser: char look> = $c7;

        goto label3;

     label2:
        r0.<org.apache.poi.ss.formula.FormulaParser: char look> = 0;

     label3:
        $i4 = r0.<org.apache.poi.ss.formula.FormulaParser: int _pointer>;

        $i5 = $i4 + 1;

        r0.<org.apache.poi.ss.formula.FormulaParser: int _pointer> = $i5;

        return;
    }

    private void resetPointer(int)
    {
        org.apache.poi.ss.formula.FormulaParser r0;
        char $c5;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.String $r1;

        r0 := @this: org.apache.poi.ss.formula.FormulaParser;

        i0 := @parameter0: int;

        r0.<org.apache.poi.ss.formula.FormulaParser: int _pointer> = i0;

        $i2 = r0.<org.apache.poi.ss.formula.FormulaParser: int _pointer>;

        $i1 = r0.<org.apache.poi.ss.formula.FormulaParser: int _formulaLength>;

        if $i2 > $i1 goto label1;

        $r1 = r0.<org.apache.poi.ss.formula.FormulaParser: java.lang.String _formulaString>;

        $i3 = r0.<org.apache.poi.ss.formula.FormulaParser: int _pointer>;

        $i4 = $i3 - 1;

        $c5 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i4);

        r0.<org.apache.poi.ss.formula.FormulaParser: char look> = $c5;

        goto label2;

     label1:
        r0.<org.apache.poi.ss.formula.FormulaParser: char look> = 0;

     label2:
        return;
    }

    private java.lang.RuntimeException expected(java.lang.String)
    {
        int $i1, $i2, $i4, $i5, $i6, $i7;
        java.lang.String $r8, r11, $r13, $r14, $r15, $r18, r21;
        org.apache.poi.ss.formula.FormulaParseException $r25;
        org.apache.poi.ss.formula.FormulaParser r0;
        char $c0, $c3;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r7, $r9, $r10, $r12, $r17, $r19, $r20, $r23, $r24;

        r0 := @this: org.apache.poi.ss.formula.FormulaParser;

        r11 := @parameter0: java.lang.String;

        $c0 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i7 = (int) $c0;

        if $i7 != 61 goto label1;

        $r13 = r0.<org.apache.poi.ss.formula.FormulaParser: java.lang.String _formulaString>;

        $i4 = r0.<org.apache.poi.ss.formula.FormulaParser: int _pointer>;

        $i5 = $i4 - 1;

        $r14 = virtualinvoke $r13.<java.lang.String: java.lang.String substring(int,int)>(0, $i5);

        $r15 = virtualinvoke $r14.<java.lang.String: java.lang.String trim()>();

        $i6 = virtualinvoke $r15.<java.lang.String: int length()>();

        if $i6 >= 1 goto label1;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The specified formula \'");

        $r18 = r0.<org.apache.poi.ss.formula.FormulaParser: java.lang.String _formulaString>;

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' starts with an equals sign which is not allowed.");

        r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parse error near char ");

        $i1 = r0.<org.apache.poi.ss.formula.FormulaParser: int _pointer>;

        $i2 = $i1 - 1;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" \'");

        $c3 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in specified formula \'");

        $r8 = r0.<org.apache.poi.ss.formula.FormulaParser: java.lang.String _formulaString>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'. Expected ");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        r21 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $r25 = new org.apache.poi.ss.formula.FormulaParseException;

        specialinvoke $r25.<org.apache.poi.ss.formula.FormulaParseException: void <init>(java.lang.String)>(r21);

        return $r25;
    }

    private static boolean IsAlpha(char)
    {
        int $i1, $i2;
        char c0;
        boolean $z0, $z1;

        c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isLetter(char)>(c0);

        if $z0 != 0 goto label1;

        $i1 = (int) c0;

        if $i1 == 36 goto label1;

        $i2 = (int) c0;

        if $i2 != 95 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    private static boolean IsDigit(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c0);

        return $z0;
    }

    private static boolean IsWhite(char)
    {
        int $i1, $i2, $i3, $i4;
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        if $i1 == 32 goto label1;

        $i2 = (int) c0;

        if $i2 == 9 goto label1;

        $i3 = (int) c0;

        if $i3 == 13 goto label1;

        $i4 = (int) c0;

        if $i4 != 10 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private void SkipWhite()
    {
        org.apache.poi.ss.formula.FormulaParser r0;
        char $c0;
        boolean $z0;

        r0 := @this: org.apache.poi.ss.formula.FormulaParser;

     label1:
        $c0 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $z0 = staticinvoke <org.apache.poi.ss.formula.FormulaParser: boolean IsWhite(char)>($c0);

        if $z0 == 0 goto label2;

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void GetChar()>();

        goto label1;

     label2:
        return;
    }

    private void Match(char)
    {
        org.apache.poi.ss.formula.FormulaParser r0;
        char c0, $c1;
        java.lang.RuntimeException $r6;
        int $i2, $i3;
        java.lang.StringBuilder $r2, $r3, $r4, $r7;
        java.lang.String $r5;

        r0 := @this: org.apache.poi.ss.formula.FormulaParser;

        c0 := @parameter0: char;

        $c1 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i2 = (int) $c1;

        $i3 = (int) c0;

        if $i2 == $i3 goto label1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: java.lang.RuntimeException expected(java.lang.String)>($r5);

        throw $r6;

     label1:
        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void GetChar()>();

        return;
    }

    private java.lang.String GetNum()
    {
        org.apache.poi.ss.formula.FormulaParser r1;
        java.lang.StringBuffer $r0;
        int $i1;
        char $c0, $c2;
        java.lang.String $r2;
        boolean $z0;

        r1 := @this: org.apache.poi.ss.formula.FormulaParser;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

     label1:
        $c0 = r1.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $z0 = staticinvoke <org.apache.poi.ss.formula.FormulaParser: boolean IsDigit(char)>($c0);

        if $z0 == 0 goto label2;

        $c2 = r1.<org.apache.poi.ss.formula.FormulaParser: char look>;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

        specialinvoke r1.<org.apache.poi.ss.formula.FormulaParser: void GetChar()>();

        goto label1;

     label2:
        $i1 = virtualinvoke $r0.<java.lang.StringBuffer: int length()>();

        if $i1 != 0 goto label3;

        $r2 = null;

        goto label4;

     label3:
        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

     label4:
        return $r2;
    }

    private org.apache.poi.ss.formula.ParseNode parseRangeExpression()
    {
        org.apache.poi.ss.formula.FormulaParser r0;
        char $c0;
        org.apache.poi.ss.formula.ParseNode $r1, $r2, r6, $r7;
        org.apache.poi.ss.formula.ptg.OperationPtg $r5;
        int i1, $i2;
        org.apache.poi.ss.formula.ParseNode[] $r3;
        boolean z0;

        r0 := @this: org.apache.poi.ss.formula.FormulaParser;

        r6 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.ParseNode parseRangeable()>();

        z0 = 0;

     label1:
        $c0 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i2 = (int) $c0;

        if $i2 != 58 goto label2;

        i1 = r0.<org.apache.poi.ss.formula.FormulaParser: int _pointer>;

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void GetChar()>();

        $r2 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.ParseNode parseRangeable()>();

        staticinvoke <org.apache.poi.ss.formula.FormulaParser: void checkValidRangeOperand(java.lang.String,int,org.apache.poi.ss.formula.ParseNode)>("LHS", i1, r6);

        staticinvoke <org.apache.poi.ss.formula.FormulaParser: void checkValidRangeOperand(java.lang.String,int,org.apache.poi.ss.formula.ParseNode)>("RHS", i1, $r2);

        $r3 = newarray (org.apache.poi.ss.formula.ParseNode)[2];

        $r3[0] = r6;

        $r3[1] = $r2;

        $r7 = new org.apache.poi.ss.formula.ParseNode;

        $r5 = <org.apache.poi.ss.formula.ptg.RangePtg: org.apache.poi.ss.formula.ptg.OperationPtg instance>;

        specialinvoke $r7.<org.apache.poi.ss.formula.ParseNode: void <init>(org.apache.poi.ss.formula.ptg.Ptg,org.apache.poi.ss.formula.ParseNode[])>($r5, $r3);

        r6 = $r7;

        z0 = 1;

        goto label1;

     label2:
        if z0 == 0 goto label3;

        $r1 = staticinvoke <org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.ParseNode augmentWithMemPtg(org.apache.poi.ss.formula.ParseNode)>(r6);

        return $r1;

     label3:
        return r6;
    }

    private static org.apache.poi.ss.formula.ParseNode augmentWithMemPtg(org.apache.poi.ss.formula.ParseNode)
    {
        org.apache.poi.ss.formula.ptg.MemAreaPtg $r1;
        org.apache.poi.ss.formula.ParseNode r0, $r2;
        org.apache.poi.ss.formula.ptg.OperandPtg r4;
        org.apache.poi.ss.formula.ptg.MemFuncPtg $r3;
        int $i0, $i1;
        boolean $z0;

        r0 := @parameter0: org.apache.poi.ss.formula.ParseNode;

        $z0 = staticinvoke <org.apache.poi.ss.formula.FormulaParser: boolean needsMemFunc(org.apache.poi.ss.formula.ParseNode)>(r0);

        if $z0 == 0 goto label1;

        $r3 = new org.apache.poi.ss.formula.ptg.MemFuncPtg;

        $i1 = virtualinvoke r0.<org.apache.poi.ss.formula.ParseNode: int getEncodedSize()>();

        specialinvoke $r3.<org.apache.poi.ss.formula.ptg.MemFuncPtg: void <init>(int)>($i1);

        r4 = $r3;

        goto label2;

     label1:
        $r1 = new org.apache.poi.ss.formula.ptg.MemAreaPtg;

        $i0 = virtualinvoke r0.<org.apache.poi.ss.formula.ParseNode: int getEncodedSize()>();

        specialinvoke $r1.<org.apache.poi.ss.formula.ptg.MemAreaPtg: void <init>(int)>($i0);

        r4 = $r1;

     label2:
        $r2 = new org.apache.poi.ss.formula.ParseNode;

        specialinvoke $r2.<org.apache.poi.ss.formula.ParseNode: void <init>(org.apache.poi.ss.formula.ptg.Ptg,org.apache.poi.ss.formula.ParseNode)>(r4, r0);

        return $r2;
    }

    private static boolean needsMemFunc(org.apache.poi.ss.formula.ParseNode)
    {
        org.apache.poi.ss.formula.ptg.Ptg $r1;
        org.apache.poi.ss.formula.ParseNode r0, r3;
        int $i0, i1;
        org.apache.poi.ss.formula.ParseNode[] $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;

        r0 := @parameter0: org.apache.poi.ss.formula.ParseNode;

        $r1 = virtualinvoke r0.<org.apache.poi.ss.formula.ParseNode: org.apache.poi.ss.formula.ptg.Ptg getToken()>();

        $z0 = $r1 instanceof org.apache.poi.ss.formula.ptg.AbstractFunctionPtg;

        if $z0 == 0 goto label01;

        return 1;

     label01:
        $z1 = $r1 instanceof org.apache.poi.ss.formula.ExternSheetReferenceToken;

        if $z1 == 0 goto label02;

        return 1;

     label02:
        $z2 = $r1 instanceof org.apache.poi.ss.formula.ptg.NamePtg;

        if $z2 != 0 goto label03;

        $z3 = $r1 instanceof org.apache.poi.ss.formula.ptg.NameXPtg;

        if $z3 == 0 goto label04;

     label03:
        return 1;

     label04:
        $z4 = $r1 instanceof org.apache.poi.ss.formula.ptg.OperationPtg;

        if $z4 != 0 goto label05;

        $z6 = $r1 instanceof org.apache.poi.ss.formula.ptg.ParenthesisPtg;

        if $z6 == 0 goto label09;

     label05:
        $r2 = virtualinvoke r0.<org.apache.poi.ss.formula.ParseNode: org.apache.poi.ss.formula.ParseNode[] getChildren()>();

        $i0 = lengthof $r2;

        i1 = 0;

     label06:
        if i1 >= $i0 goto label08;

        r3 = $r2[i1];

        $z5 = staticinvoke <org.apache.poi.ss.formula.FormulaParser: boolean needsMemFunc(org.apache.poi.ss.formula.ParseNode)>(r3);

        if $z5 == 0 goto label07;

        return 1;

     label07:
        i1 = i1 + 1;

        goto label06;

     label08:
        return 0;

     label09:
        $z7 = $r1 instanceof org.apache.poi.ss.formula.ptg.OperandPtg;

        if $z7 == 0 goto label10;

        return 0;

     label10:
        $z8 = $r1 instanceof org.apache.poi.ss.formula.ptg.OperationPtg;

        if $z8 == 0 goto label11;

        return 1;

     label11:
        return 0;
    }

    private static void checkValidRangeOperand(java.lang.String, int, org.apache.poi.ss.formula.ParseNode)
    {
        org.apache.poi.ss.formula.FormulaParseException $r1;
        org.apache.poi.ss.formula.ParseNode r0;
        int i0;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r7, $r8;
        java.lang.String r4, $r9;
        boolean $z0;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r0 := @parameter2: org.apache.poi.ss.formula.ParseNode;

        $z0 = staticinvoke <org.apache.poi.ss.formula.FormulaParser: boolean isValidRangeOperand(org.apache.poi.ss.formula.ParseNode)>(r0);

        if $z0 != 0 goto label1;

        $r1 = new org.apache.poi.ss.formula.FormulaParseException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The ");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of the range operator \':\' at position ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a proper reference.");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<org.apache.poi.ss.formula.FormulaParseException: void <init>(java.lang.String)>($r9);

        throw $r1;

     label1:
        return;
    }

    private static boolean isValidRangeOperand(org.apache.poi.ss.formula.ParseNode)
    {
        org.apache.poi.ss.formula.ptg.Ptg $r1;
        org.apache.poi.ss.formula.ParseNode r0, $r4;
        byte $b0;
        org.apache.poi.ss.formula.ptg.ErrPtg $r2;
        org.apache.poi.ss.formula.ParseNode[] $r3;
        org.apache.poi.ss.formula.ptg.AbstractFunctionPtg r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @parameter0: org.apache.poi.ss.formula.ParseNode;

        $r1 = virtualinvoke r0.<org.apache.poi.ss.formula.ParseNode: org.apache.poi.ss.formula.ptg.Ptg getToken()>();

        $z0 = $r1 instanceof org.apache.poi.ss.formula.ptg.OperandPtg;

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = $r1 instanceof org.apache.poi.ss.formula.ptg.AbstractFunctionPtg;

        if $z1 == 0 goto label4;

        r5 = (org.apache.poi.ss.formula.ptg.AbstractFunctionPtg) $r1;

        $b0 = virtualinvoke r5.<org.apache.poi.ss.formula.ptg.AbstractFunctionPtg: byte getDefaultOperandClass()>();

        if 0 != $b0 goto label2;

        $z6 = 1;

        goto label3;

     label2:
        $z6 = 0;

     label3:
        return $z6;

     label4:
        $z2 = $r1 instanceof org.apache.poi.ss.formula.ptg.ValueOperatorPtg;

        if $z2 == 0 goto label5;

        return 0;

     label5:
        $z3 = $r1 instanceof org.apache.poi.ss.formula.ptg.OperationPtg;

        if $z3 == 0 goto label6;

        return 1;

     label6:
        $z4 = $r1 instanceof org.apache.poi.ss.formula.ptg.ParenthesisPtg;

        if $z4 == 0 goto label7;

        $r3 = virtualinvoke r0.<org.apache.poi.ss.formula.ParseNode: org.apache.poi.ss.formula.ParseNode[] getChildren()>();

        $r4 = $r3[0];

        $z5 = staticinvoke <org.apache.poi.ss.formula.FormulaParser: boolean isValidRangeOperand(org.apache.poi.ss.formula.ParseNode)>($r4);

        return $z5;

     label7:
        $r2 = <org.apache.poi.ss.formula.ptg.ErrPtg: org.apache.poi.ss.formula.ptg.ErrPtg REF_INVALID>;

        if $r1 != $r2 goto label8;

        return 1;

     label8:
        return 0;
    }

    private org.apache.poi.ss.formula.ParseNode parseRangeable()
    {
        java.lang.StringBuilder $r6, $r7, $r8, $r17, $r18, $r19, $r25, $r26, $r27, $r33, $r34, $r35, $r41, $r44, $r45, $r48, $r50, $r51, $r60, $r61, $r62, $r64, $r65, $r69, $r70, $r71, $r78, $r80, $r83, $r84, $r86, $r88, $r90, $r92;
        org.apache.poi.ss.formula.ptg.Ptg $r56;
        java.lang.String $r9, $r10, $r13, $r14, $r20, $r28, $r36, $r43, $r49, $r52, $r54, $r63, $r66, $r72, r76;
        org.apache.poi.ss.formula.SheetIdentifier $r1;
        org.apache.poi.ss.formula.FormulaParsingWorkbook $r55;
        org.apache.poi.ss.formula.NameIdentifier $r42;
        org.apache.poi.ss.formula.FormulaParser$SimpleRangePart $r2, $r12, $r37, r75;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        org.apache.poi.ss.formula.ptg.ErrPtg $r74;
        int $i3, $i6, $i7, $i8, $i9, $i11, $i12, $i13, i14, i15, i16, $i17, $i18, $i19, $i20;
        org.apache.poi.ss.formula.FormulaParseException $r79, $r81, $r85, $r87, $r89, $r91, $r93;
        org.apache.poi.ss.formula.FormulaParser r0;
        char $c0, $c1, $c2, $c4, $c5, $c10;
        org.apache.poi.ss.formula.ParseNode $r3, $r11, $r21, $r22, $r29, $r30, $r38, $r39, $r53, $r77, $r82;

        r0 := @this: org.apache.poi.ss.formula.FormulaParser;

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void SkipWhite()>();

        i14 = r0.<org.apache.poi.ss.formula.FormulaParser: int _pointer>;

        $r1 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.SheetIdentifier parseSheetName()>();

        if $r1 != null goto label01;

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void resetPointer(int)>(i14);

        goto label02;

     label01:
        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void SkipWhite()>();

        i14 = r0.<org.apache.poi.ss.formula.FormulaParser: int _pointer>;

     label02:
        $r2 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.FormulaParser$SimpleRangePart parseSimpleRangePart()>();

        if $r2 != null goto label07;

        if $r1 == null goto label06;

        $c10 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i17 = (int) $c10;

        if $i17 != 35 goto label03;

        $r77 = new org.apache.poi.ss.formula.ParseNode;

        $i13 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: int parseErrorLiteral()>();

        $r74 = staticinvoke <org.apache.poi.ss.formula.ptg.ErrPtg: org.apache.poi.ss.formula.ptg.ErrPtg valueOf(int)>($i13);

        specialinvoke $r77.<org.apache.poi.ss.formula.ParseNode: void <init>(org.apache.poi.ss.formula.ptg.Ptg)>($r74);

        return $r77;

     label03:
        $r54 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: java.lang.String parseAsName()>();

        $i11 = virtualinvoke $r54.<java.lang.String: int length()>();

        if $i11 != 0 goto label04;

        $r79 = new org.apache.poi.ss.formula.FormulaParseException;

        $r78 = new java.lang.StringBuilder;

        specialinvoke $r78.<java.lang.StringBuilder: void <init>()>();

        $r69 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cell reference or Named Range expected after sheet name at index ");

        $i12 = r0.<org.apache.poi.ss.formula.FormulaParser: int _pointer>;

        $r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        $r71 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r79.<org.apache.poi.ss.formula.FormulaParseException: void <init>(java.lang.String)>($r72);

        throw $r79;

     label04:
        $r55 = r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.FormulaParsingWorkbook _book>;

        $r56 = interfaceinvoke $r55.<org.apache.poi.ss.formula.FormulaParsingWorkbook: org.apache.poi.ss.formula.ptg.Ptg getNameXPtg(java.lang.String,org.apache.poi.ss.formula.SheetIdentifier)>($r54, $r1);

        if $r56 != null goto label05;

        $r81 = new org.apache.poi.ss.formula.FormulaParseException;

        $r80 = new java.lang.StringBuilder;

        specialinvoke $r80.<java.lang.StringBuilder: void <init>()>();

        $r60 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Specified name \'");

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r54);

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' for sheet ");

        $r63 = virtualinvoke $r1.<org.apache.poi.ss.formula.SheetIdentifier: java.lang.String asFormulaString()>();

        $r64 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r63);

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found");

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r81.<org.apache.poi.ss.formula.FormulaParseException: void <init>(java.lang.String)>($r66);

        throw $r81;

     label05:
        $r82 = new org.apache.poi.ss.formula.ParseNode;

        specialinvoke $r82.<org.apache.poi.ss.formula.ParseNode: void <init>(org.apache.poi.ss.formula.ptg.Ptg)>($r56);

        return $r82;

     label06:
        $r53 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.ParseNode parseNonRange(int)>(i14);

        return $r53;

     label07:
        $c0 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $z0 = staticinvoke <org.apache.poi.ss.formula.FormulaParser: boolean IsWhite(char)>($c0);

        if $z0 == 0 goto label08;

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void SkipWhite()>();

     label08:
        $c1 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i18 = (int) $c1;

        if $i18 != 58 goto label14;

        i15 = r0.<org.apache.poi.ss.formula.FormulaParser: int _pointer>;

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void GetChar()>();

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void SkipWhite()>();

        $r37 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.FormulaParser$SimpleRangePart parseSimpleRangePart()>();

        r75 = $r37;

        if $r37 == null goto label09;

        $z10 = virtualinvoke $r2.<org.apache.poi.ss.formula.FormulaParser$SimpleRangePart: boolean isCompatibleForArea(org.apache.poi.ss.formula.FormulaParser$SimpleRangePart)>($r37);

        if $z10 != 0 goto label09;

        r75 = null;

     label09:
        if r75 != null goto label13;

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void resetPointer(int)>(i15);

        $z9 = virtualinvoke $r2.<org.apache.poi.ss.formula.FormulaParser$SimpleRangePart: boolean isCell()>();

        if $z9 != 0 goto label12;

        if $r1 != null goto label10;

        r76 = "";

        goto label11;

     label10:
        $r83 = new java.lang.StringBuilder;

        specialinvoke $r83.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r42 = virtualinvoke $r1.<org.apache.poi.ss.formula.SheetIdentifier: org.apache.poi.ss.formula.NameIdentifier getSheetIdentifier()>();

        $r43 = virtualinvoke $r42.<org.apache.poi.ss.formula.NameIdentifier: java.lang.String getName()>();

        $r44 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(33);

        r76 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

     label11:
        $r85 = new org.apache.poi.ss.formula.FormulaParseException;

        $r84 = new java.lang.StringBuilder;

        specialinvoke $r84.<java.lang.StringBuilder: void <init>()>();

        $r48 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r76);

        $r49 = virtualinvoke $r2.<org.apache.poi.ss.formula.FormulaParser$SimpleRangePart: java.lang.String getRep()>();

        $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r49);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not a proper reference.");

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r85.<org.apache.poi.ss.formula.FormulaParseException: void <init>(java.lang.String)>($r52);

        throw $r85;

     label12:
        $r39 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.ParseNode createAreaRefParseNode(org.apache.poi.ss.formula.SheetIdentifier,org.apache.poi.ss.formula.FormulaParser$SimpleRangePart,org.apache.poi.ss.formula.FormulaParser$SimpleRangePart)>($r1, $r2, r75);

        return $r39;

     label13:
        $r38 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.ParseNode createAreaRefParseNode(org.apache.poi.ss.formula.SheetIdentifier,org.apache.poi.ss.formula.FormulaParser$SimpleRangePart,org.apache.poi.ss.formula.FormulaParser$SimpleRangePart)>($r1, $r2, r75);

        return $r38;

     label14:
        $c2 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i19 = (int) $c2;

        if $i19 != 46 goto label26;

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void GetChar()>();

        i16 = 1;

     label15:
        $c4 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i20 = (int) $c4;

        if $i20 != 46 goto label16;

        i16 = i16 + 1;

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void GetChar()>();

        goto label15;

     label16:
        $c5 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $z3 = staticinvoke <org.apache.poi.ss.formula.FormulaParser: boolean IsWhite(char)>($c5);

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void SkipWhite()>();

        $r12 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.FormulaParser$SimpleRangePart parseSimpleRangePart()>();

        $r13 = r0.<org.apache.poi.ss.formula.FormulaParser: java.lang.String _formulaString>;

        $i8 = i14 - 1;

        $i6 = r0.<org.apache.poi.ss.formula.FormulaParser: int _pointer>;

        $i7 = $i6 - 1;

        $r14 = virtualinvoke $r13.<java.lang.String: java.lang.String substring(int,int)>($i8, $i7);

        if $r12 != null goto label18;

        if $r1 == null goto label17;

        $r87 = new org.apache.poi.ss.formula.FormulaParseException;

        $r86 = new java.lang.StringBuilder;

        specialinvoke $r86.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Complete area reference expected after sheet name at index ");

        $i9 = r0.<org.apache.poi.ss.formula.FormulaParser: int _pointer>;

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r87.<org.apache.poi.ss.formula.FormulaParseException: void <init>(java.lang.String)>($r36);

        throw $r87;

     label17:
        $r30 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.ParseNode parseNonRange(int)>(i14);

        return $r30;

     label18:
        if $z0 != 0 goto label19;

        if $z3 == 0 goto label22;

     label19:
        $z4 = virtualinvoke $r2.<org.apache.poi.ss.formula.FormulaParser$SimpleRangePart: boolean isRowOrColumn()>();

        if $z4 != 0 goto label20;

        $z5 = virtualinvoke $r12.<org.apache.poi.ss.formula.FormulaParser$SimpleRangePart: boolean isRowOrColumn()>();

        if $z5 == 0 goto label21;

     label20:
        $r89 = new org.apache.poi.ss.formula.FormulaParseException;

        $r88 = new java.lang.StringBuilder;

        specialinvoke $r88.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dotted range (full row or column) expression \'");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' must not contain whitespace.");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r89.<org.apache.poi.ss.formula.FormulaParseException: void <init>(java.lang.String)>($r20);

        throw $r89;

     label21:
        $r21 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.ParseNode createAreaRefParseNode(org.apache.poi.ss.formula.SheetIdentifier,org.apache.poi.ss.formula.FormulaParser$SimpleRangePart,org.apache.poi.ss.formula.FormulaParser$SimpleRangePart)>($r1, $r2, $r12);

        return $r21;

     label22:
        if i16 != 1 goto label23;

        $z7 = virtualinvoke $r2.<org.apache.poi.ss.formula.FormulaParser$SimpleRangePart: boolean isRow()>();

        if $z7 == 0 goto label23;

        $z8 = virtualinvoke $r12.<org.apache.poi.ss.formula.FormulaParser$SimpleRangePart: boolean isRow()>();

        if $z8 == 0 goto label23;

        $r29 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.ParseNode parseNonRange(int)>(i14);

        return $r29;

     label23:
        $z11 = virtualinvoke $r2.<org.apache.poi.ss.formula.FormulaParser$SimpleRangePart: boolean isRowOrColumn()>();

        if $z11 != 0 goto label24;

        $z6 = virtualinvoke $r12.<org.apache.poi.ss.formula.FormulaParser$SimpleRangePart: boolean isRowOrColumn()>();

        if $z6 == 0 goto label25;

     label24:
        if i16 == 2 goto label25;

        $r91 = new org.apache.poi.ss.formula.FormulaParseException;

        $r90 = new java.lang.StringBuilder;

        specialinvoke $r90.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dotted range (full row or column) expression \'");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' must have exactly 2 dots.");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r91.<org.apache.poi.ss.formula.FormulaParseException: void <init>(java.lang.String)>($r28);

        throw $r91;

     label25:
        $r22 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.ParseNode createAreaRefParseNode(org.apache.poi.ss.formula.SheetIdentifier,org.apache.poi.ss.formula.FormulaParser$SimpleRangePart,org.apache.poi.ss.formula.FormulaParser$SimpleRangePart)>($r1, $r2, $r12);

        return $r22;

     label26:
        $z1 = virtualinvoke $r2.<org.apache.poi.ss.formula.FormulaParser$SimpleRangePart: boolean isCell()>();

        if $z1 == 0 goto label27;

        $r10 = virtualinvoke $r2.<org.apache.poi.ss.formula.FormulaParser$SimpleRangePart: java.lang.String getRep()>();

        $z2 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: boolean isValidCellReference(java.lang.String)>($r10);

        if $z2 == 0 goto label27;

        $r11 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.ParseNode createAreaRefParseNode(org.apache.poi.ss.formula.SheetIdentifier,org.apache.poi.ss.formula.FormulaParser$SimpleRangePart,org.apache.poi.ss.formula.FormulaParser$SimpleRangePart)>($r1, $r2, null);

        return $r11;

     label27:
        if $r1 == null goto label28;

        $r93 = new org.apache.poi.ss.formula.FormulaParseException;

        $r92 = new java.lang.StringBuilder;

        specialinvoke $r92.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Second part of cell reference expected after sheet name at index ");

        $i3 = r0.<org.apache.poi.ss.formula.FormulaParser: int _pointer>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r93.<org.apache.poi.ss.formula.FormulaParseException: void <init>(java.lang.String)>($r9);

        throw $r93;

     label28:
        $r3 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.ParseNode parseNonRange(int)>(i14);

        return $r3;
    }

    private org.apache.poi.ss.formula.ParseNode parseNonRange(int)
    {
        java.lang.IllegalStateException $r38;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.poi.ss.formula.ptg.StringPtg $r34;
        java.lang.StringBuilder $r9, $r10, $r11, $r17, $r18, $r19, $r23, $r24, $r25, $r37, $r39, $r42;
        org.apache.poi.ss.formula.ptg.Ptg $r32;
        org.apache.poi.ss.formula.ptg.NamePtg $r14;
        int i0, $i4, $i5, $i6;
        java.lang.String $r1, $r12, $r20, $r26, $r30;
        org.apache.poi.ss.formula.ptg.BoolPtg $r3;
        org.apache.poi.ss.formula.FormulaParseException $r40, $r43;
        org.apache.poi.ss.formula.FormulaParser r0;
        org.apache.poi.ss.formula.EvaluationName $r6;
        char $c1, $c2, $c3;
        org.apache.poi.ss.formula.ParseNode $r27, $r33, $r35, $r36, $r41;
        org.apache.poi.ss.formula.FormulaParsingWorkbook $r4, $r5;

        r0 := @this: org.apache.poi.ss.formula.FormulaParser;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void resetPointer(int)>(i0);

        $c1 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c1);

        if $z0 == 0 goto label1;

        $r33 = new org.apache.poi.ss.formula.ParseNode;

        $r32 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.ptg.Ptg parseNumber()>();

        specialinvoke $r33.<org.apache.poi.ss.formula.ParseNode: void <init>(org.apache.poi.ss.formula.ptg.Ptg)>($r32);

        return $r33;

     label1:
        $c2 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i5 = (int) $c2;

        if $i5 != 34 goto label2;

        $r35 = new org.apache.poi.ss.formula.ParseNode;

        $r34 = new org.apache.poi.ss.formula.ptg.StringPtg;

        $r30 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: java.lang.String parseStringLiteral()>();

        specialinvoke $r34.<org.apache.poi.ss.formula.ptg.StringPtg: void <init>(java.lang.String)>($r30);

        specialinvoke $r35.<org.apache.poi.ss.formula.ParseNode: void <init>(org.apache.poi.ss.formula.ptg.Ptg)>($r34);

        return $r35;

     label2:
        $r1 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: java.lang.String parseAsName()>();

        $c3 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i6 = (int) $c3;

        if $i6 != 40 goto label3;

        $r27 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.ParseNode function(java.lang.String)>($r1);

        return $r27;

     label3:
        $z1 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("TRUE");

        if $z1 != 0 goto label4;

        $z3 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("FALSE");

        if $z3 == 0 goto label5;

     label4:
        $r36 = new org.apache.poi.ss.formula.ParseNode;

        $z2 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("TRUE");

        $r3 = staticinvoke <org.apache.poi.ss.formula.ptg.BoolPtg: org.apache.poi.ss.formula.ptg.BoolPtg valueOf(boolean)>($z2);

        specialinvoke $r36.<org.apache.poi.ss.formula.ParseNode: void <init>(org.apache.poi.ss.formula.ptg.Ptg)>($r3);

        return $r36;

     label5:
        $r4 = r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.FormulaParsingWorkbook _book>;

        if $r4 != null goto label6;

        $r38 = new java.lang.IllegalStateException;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Need book to evaluate name \'");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r38.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r26);

        throw $r38;

     label6:
        $r5 = r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.FormulaParsingWorkbook _book>;

        $i4 = r0.<org.apache.poi.ss.formula.FormulaParser: int _sheetIndex>;

        $r6 = interfaceinvoke $r5.<org.apache.poi.ss.formula.FormulaParsingWorkbook: org.apache.poi.ss.formula.EvaluationName getName(java.lang.String,int)>($r1, $i4);

        if $r6 != null goto label7;

        $r40 = new org.apache.poi.ss.formula.FormulaParseException;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Specified named range \'");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not exist in the current workbook.");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r40.<org.apache.poi.ss.formula.FormulaParseException: void <init>(java.lang.String)>($r20);

        throw $r40;

     label7:
        $z4 = interfaceinvoke $r6.<org.apache.poi.ss.formula.EvaluationName: boolean isRange()>();

        if $z4 == 0 goto label8;

        $r41 = new org.apache.poi.ss.formula.ParseNode;

        $r14 = interfaceinvoke $r6.<org.apache.poi.ss.formula.EvaluationName: org.apache.poi.ss.formula.ptg.NamePtg createPtg()>();

        specialinvoke $r41.<org.apache.poi.ss.formula.ParseNode: void <init>(org.apache.poi.ss.formula.ptg.Ptg)>($r14);

        return $r41;

     label8:
        $r43 = new org.apache.poi.ss.formula.FormulaParseException;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Specified name \'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not a range as expected.");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r43.<org.apache.poi.ss.formula.FormulaParseException: void <init>(java.lang.String)>($r12);

        throw $r43;
    }

    private java.lang.String parseAsName()
    {
        org.apache.poi.ss.formula.FormulaParser r1;
        char $c0, $c1, $c2, $c3;
        java.lang.RuntimeException $r3;
        int $i4;
        java.lang.StringBuilder $r4;
        java.lang.String $r2;
        boolean $z0, $z1;

        r1 := @this: org.apache.poi.ss.formula.FormulaParser;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $c0 = r1.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $z0 = staticinvoke <java.lang.Character: boolean isLetter(char)>($c0);

        if $z0 != 0 goto label1;

        $c2 = r1.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i4 = (int) $c2;

        if $i4 == 95 goto label1;

        $r3 = specialinvoke r1.<org.apache.poi.ss.formula.FormulaParser: java.lang.RuntimeException expected(java.lang.String)>("number, string, or defined name");

        throw $r3;

     label1:
        $c3 = r1.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $z1 = staticinvoke <org.apache.poi.ss.formula.FormulaParser: boolean isValidDefinedNameChar(char)>($c3);

        if $z1 == 0 goto label2;

        $c1 = r1.<org.apache.poi.ss.formula.FormulaParser: char look>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        specialinvoke r1.<org.apache.poi.ss.formula.FormulaParser: void GetChar()>();

        goto label1;

     label2:
        specialinvoke r1.<org.apache.poi.ss.formula.FormulaParser: void SkipWhite()>();

        $r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    private static boolean isValidDefinedNameChar(char)
    {
        int $i1;
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>(c0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $i1 = (int) c0;

        lookupswitch($i1)
        {
            case 46: goto label2;
            case 63: goto label2;
            case 92: goto label2;
            case 95: goto label2;
            default: goto label3;
        };

     label2:
        return 1;

     label3:
        return 0;
    }

    private org.apache.poi.ss.formula.ParseNode createAreaRefParseNode(org.apache.poi.ss.formula.SheetIdentifier, org.apache.poi.ss.formula.FormulaParser$SimpleRangePart, org.apache.poi.ss.formula.FormulaParser$SimpleRangePart) throws org.apache.poi.ss.formula.FormulaParseException
    {
        org.apache.poi.ss.formula.ptg.Ptg r10;
        org.apache.poi.ss.formula.FormulaParser r4;
        org.apache.poi.ss.formula.ptg.RefPtg $r9;
        org.apache.poi.ss.formula.ParseNode $r11;
        org.apache.poi.ss.formula.SheetIdentifier r3;
        org.apache.poi.ss.formula.FormulaParsingWorkbook $r5, $r8;
        org.apache.poi.ss.util.CellReference $r7;
        org.apache.poi.ss.formula.FormulaParser$SimpleRangePart r0, r1;
        org.apache.poi.ss.util.AreaReference $r2;
        org.apache.poi.ss.formula.ptg.AreaPtg $r6;

        r4 := @this: org.apache.poi.ss.formula.FormulaParser;

        r3 := @parameter0: org.apache.poi.ss.formula.SheetIdentifier;

        r1 := @parameter1: org.apache.poi.ss.formula.FormulaParser$SimpleRangePart;

        r0 := @parameter2: org.apache.poi.ss.formula.FormulaParser$SimpleRangePart;

        if r0 != null goto label3;

        $r7 = virtualinvoke r1.<org.apache.poi.ss.formula.FormulaParser$SimpleRangePart: org.apache.poi.ss.util.CellReference getCellReference()>();

        if r3 != null goto label1;

        $r9 = new org.apache.poi.ss.formula.ptg.RefPtg;

        specialinvoke $r9.<org.apache.poi.ss.formula.ptg.RefPtg: void <init>(org.apache.poi.ss.util.CellReference)>($r7);

        r10 = $r9;

        goto label2;

     label1:
        $r8 = r4.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.FormulaParsingWorkbook _book>;

        r10 = interfaceinvoke $r8.<org.apache.poi.ss.formula.FormulaParsingWorkbook: org.apache.poi.ss.formula.ptg.Ptg get3DReferencePtg(org.apache.poi.ss.util.CellReference,org.apache.poi.ss.formula.SheetIdentifier)>($r7, r3);

     label2:
        goto label5;

     label3:
        $r2 = staticinvoke <org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.util.AreaReference createAreaRef(org.apache.poi.ss.formula.FormulaParser$SimpleRangePart,org.apache.poi.ss.formula.FormulaParser$SimpleRangePart)>(r1, r0);

        if r3 != null goto label4;

        $r6 = new org.apache.poi.ss.formula.ptg.AreaPtg;

        specialinvoke $r6.<org.apache.poi.ss.formula.ptg.AreaPtg: void <init>(org.apache.poi.ss.util.AreaReference)>($r2);

        r10 = $r6;

        goto label5;

     label4:
        $r5 = r4.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.FormulaParsingWorkbook _book>;

        r10 = interfaceinvoke $r5.<org.apache.poi.ss.formula.FormulaParsingWorkbook: org.apache.poi.ss.formula.ptg.Ptg get3DReferencePtg(org.apache.poi.ss.util.AreaReference,org.apache.poi.ss.formula.SheetIdentifier)>($r2, r3);

     label5:
        $r11 = new org.apache.poi.ss.formula.ParseNode;

        specialinvoke $r11.<org.apache.poi.ss.formula.ParseNode: void <init>(org.apache.poi.ss.formula.ptg.Ptg)>(r10);

        return $r11;
    }

    private static org.apache.poi.ss.util.AreaReference createAreaRef(org.apache.poi.ss.formula.FormulaParser$SimpleRangePart, org.apache.poi.ss.formula.FormulaParser$SimpleRangePart)
    {
        org.apache.poi.ss.util.CellReference $r3, $r4;
        org.apache.poi.ss.formula.FormulaParser$SimpleRangePart r0, r1;
        java.lang.String $r5, $r6, $r8, $r9, $r14, $r17, $r20;
        boolean $z0, $z1, $z2;
        org.apache.poi.ss.formula.FormulaParseException $r11;
        org.apache.poi.ss.util.AreaReference $r2, $r7, $r10;
        java.lang.StringBuilder $r12, $r13, $r15, $r16, $r18, $r19;

        r0 := @parameter0: org.apache.poi.ss.formula.FormulaParser$SimpleRangePart;

        r1 := @parameter1: org.apache.poi.ss.formula.FormulaParser$SimpleRangePart;

        $z0 = virtualinvoke r0.<org.apache.poi.ss.formula.FormulaParser$SimpleRangePart: boolean isCompatibleForArea(org.apache.poi.ss.formula.FormulaParser$SimpleRangePart)>(r1);

        if $z0 != 0 goto label1;

        $r11 = new org.apache.poi.ss.formula.FormulaParseException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("has incompatible parts: \'");

        $r14 = virtualinvoke r0.<org.apache.poi.ss.formula.FormulaParser$SimpleRangePart: java.lang.String getRep()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' and \'");

        $r17 = virtualinvoke r1.<org.apache.poi.ss.formula.FormulaParser$SimpleRangePart: java.lang.String getRep()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<org.apache.poi.ss.formula.FormulaParseException: void <init>(java.lang.String)>($r20);

        throw $r11;

     label1:
        $z1 = virtualinvoke r0.<org.apache.poi.ss.formula.FormulaParser$SimpleRangePart: boolean isRow()>();

        if $z1 == 0 goto label2;

        $r8 = virtualinvoke r0.<org.apache.poi.ss.formula.FormulaParser$SimpleRangePart: java.lang.String getRep()>();

        $r9 = virtualinvoke r1.<org.apache.poi.ss.formula.FormulaParser$SimpleRangePart: java.lang.String getRep()>();

        $r10 = staticinvoke <org.apache.poi.ss.util.AreaReference: org.apache.poi.ss.util.AreaReference getWholeRow(java.lang.String,java.lang.String)>($r8, $r9);

        return $r10;

     label2:
        $z2 = virtualinvoke r0.<org.apache.poi.ss.formula.FormulaParser$SimpleRangePart: boolean isColumn()>();

        if $z2 == 0 goto label3;

        $r5 = virtualinvoke r0.<org.apache.poi.ss.formula.FormulaParser$SimpleRangePart: java.lang.String getRep()>();

        $r6 = virtualinvoke r1.<org.apache.poi.ss.formula.FormulaParser$SimpleRangePart: java.lang.String getRep()>();

        $r7 = staticinvoke <org.apache.poi.ss.util.AreaReference: org.apache.poi.ss.util.AreaReference getWholeColumn(java.lang.String,java.lang.String)>($r5, $r6);

        return $r7;

     label3:
        $r2 = new org.apache.poi.ss.util.AreaReference;

        $r3 = virtualinvoke r0.<org.apache.poi.ss.formula.FormulaParser$SimpleRangePart: org.apache.poi.ss.util.CellReference getCellReference()>();

        $r4 = virtualinvoke r1.<org.apache.poi.ss.formula.FormulaParser$SimpleRangePart: org.apache.poi.ss.util.CellReference getCellReference()>();

        specialinvoke $r2.<org.apache.poi.ss.util.AreaReference: void <init>(org.apache.poi.ss.util.CellReference,org.apache.poi.ss.util.CellReference)>($r3, $r4);

        return $r2;
    }

    private org.apache.poi.ss.formula.FormulaParser$SimpleRangePart parseSimpleRangePart()
    {
        org.apache.poi.ss.formula.FormulaParser$SimpleRangePart $r12;
        java.util.regex.Matcher $r4;
        boolean $z0, $z1, $z2, $z3, $z4, z5, z6, z7, z8, z9, z10, z11, z12;
        org.apache.poi.ss.SpreadsheetVersion $r6, $r8;
        java.util.regex.Pattern $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i9, $i10, $i11, $i12;
        java.lang.String $r1, $r2, $r5, $r7, $r9;
        org.apache.poi.ss.formula.FormulaParser r0;
        char $c8;
        java.lang.NumberFormatException $r10;

        r0 := @this: org.apache.poi.ss.formula.FormulaParser;

        $i0 = r0.<org.apache.poi.ss.formula.FormulaParser: int _pointer>;

        i9 = $i0 - 1;

        z5 = 0;

        z12 = 0;

        z11 = 0;

        z10 = 0;

        z6 = 0;

        z9 = 0;

        z8 = 0;

        z7 = 0;

     label01:
        $i1 = r0.<org.apache.poi.ss.formula.FormulaParser: int _formulaLength>;

        if i9 >= $i1 goto label05;

        $r9 = r0.<org.apache.poi.ss.formula.FormulaParser: java.lang.String _formulaString>;

        $c8 = virtualinvoke $r9.<java.lang.String: char charAt(int)>(i9);

        $z3 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c8);

        if $z3 == 0 goto label02;

        z5 = 1;

        z12 = 1;

        z11 = 1;

        z10 = 1;

        goto label04;

     label02:
        $z4 = staticinvoke <java.lang.Character: boolean isLetter(char)>($c8);

        if $z4 == 0 goto label03;

        z6 = 1;

        z9 = 1;

        z8 = 1;

        z7 = 1;

        goto label04;

     label03:
        $i11 = (int) $c8;

        if $i11 == 36 goto label04;

        $i12 = (int) $c8;

        if $i12 != 95 goto label05;

     label04:
        i9 = i9 + 1;

        goto label01;

     label05:
        $i2 = r0.<org.apache.poi.ss.formula.FormulaParser: int _pointer>;

        $i3 = $i2 - 1;

        if i9 > $i3 goto label06;

        return null;

     label06:
        $r1 = r0.<org.apache.poi.ss.formula.FormulaParser: java.lang.String _formulaString>;

        $i4 = r0.<org.apache.poi.ss.formula.FormulaParser: int _pointer>;

        $i5 = $i4 - 1;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>($i5, i9);

        $r3 = <org.apache.poi.ss.formula.FormulaParser: java.util.regex.Pattern CELL_REF_PATTERN>;

        $r4 = virtualinvoke $r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r2);

        $z0 = virtualinvoke $r4.<java.util.regex.Matcher: boolean matches()>();

        if $z0 != 0 goto label07;

        return null;

     label07:
        if z7 == 0 goto label08;

        if z10 == 0 goto label08;

        $z2 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: boolean isValidCellReference(java.lang.String)>($r2);

        if $z2 != 0 goto label17;

        return null;

     label08:
        if z8 == 0 goto label09;

        $r7 = virtualinvoke $r2.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("$", "");

        $r8 = r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.SpreadsheetVersion _ssVersion>;

        $z1 = staticinvoke <org.apache.poi.ss.util.CellReference: boolean isColumnWithnRange(java.lang.String,org.apache.poi.ss.SpreadsheetVersion)>($r7, $r8);

        if $z1 != 0 goto label17;

        return null;

     label09:
        if z11 == 0 goto label16;

     label10:
        $r5 = virtualinvoke $r2.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("$", "");

        $i6 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r5);

     label11:
        goto label13;

     label12:
        $r10 := @caughtexception;

        return null;

     label13:
        if $i6 < 1 goto label14;

        $r6 = r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.SpreadsheetVersion _ssVersion>;

        $i7 = virtualinvoke $r6.<org.apache.poi.ss.SpreadsheetVersion: int getMaxRows()>();

        if $i6 <= $i7 goto label15;

     label14:
        return null;

     label15:
        goto label17;

     label16:
        return null;

     label17:
        $i10 = i9 + 1;

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void resetPointer(int)>($i10);

        $r12 = new org.apache.poi.ss.formula.FormulaParser$SimpleRangePart;

        specialinvoke $r12.<org.apache.poi.ss.formula.FormulaParser$SimpleRangePart: void <init>(java.lang.String,boolean,boolean)>($r2, z9, z12);

        return $r12;

        catch java.lang.NumberFormatException from label10 to label11 with label12;
    }

    private org.apache.poi.ss.formula.SheetIdentifier parseSheetName()
    {
        boolean $z0, $z1, z2, $z3, $z4;
        java.lang.StringBuilder $r14, $r18;
        java.lang.StringBuffer $r15;
        int $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28;
        java.lang.String $r3, $r9, r13;
        org.apache.poi.ss.formula.FormulaParser r0;
        char $c0, $c1, $c2, $c3, $c4, $c5, $c6, $c7, $c8, $c9, $c10, $c11, $c12, $c13, $c14, $c15, $c16;
        org.apache.poi.ss.formula.SheetIdentifier $r4, $r10, $r17, $r20, $r21;
        org.apache.poi.ss.formula.NameIdentifier $r16, $r19;

        r0 := @this: org.apache.poi.ss.formula.FormulaParser;

        $c0 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i17 = (int) $c0;

        if $i17 != 91 goto label03;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void GetChar()>();

     label01:
        $c14 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i18 = (int) $c14;

        if $i18 == 93 goto label02;

        $c15 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c15);

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void GetChar()>();

        goto label01;

     label02:
        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void GetChar()>();

        r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label04;

     label03:
        r13 = null;

     label04:
        $c1 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i19 = (int) $c1;

        if $i19 != 39 goto label13;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void Match(char)>(39);

        $c8 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i20 = (int) $c8;

        if $i20 != 39 goto label05;

        $z1 = 1;

        goto label06;

     label05:
        $z1 = 0;

     label06:
        z2 = $z1;

     label07:
        if z2 != 0 goto label10;

        $c11 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c11);

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void GetChar()>();

        $c12 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i21 = (int) $c12;

        if $i21 != 39 goto label07;

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void Match(char)>(39);

        $c13 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i22 = (int) $c13;

        if $i22 == 39 goto label08;

        $z3 = 1;

        goto label09;

     label08:
        $z3 = 0;

     label09:
        z2 = $z3;

        goto label07;

     label10:
        $r16 = new org.apache.poi.ss.formula.NameIdentifier;

        $r9 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r16.<org.apache.poi.ss.formula.NameIdentifier: void <init>(java.lang.String,boolean)>($r9, 1);

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void SkipWhite()>();

        $c9 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i23 = (int) $c9;

        if $i23 != 33 goto label11;

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void GetChar()>();

        $r17 = new org.apache.poi.ss.formula.SheetIdentifier;

        specialinvoke $r17.<org.apache.poi.ss.formula.SheetIdentifier: void <init>(java.lang.String,org.apache.poi.ss.formula.NameIdentifier)>(r13, $r16);

        return $r17;

     label11:
        $c10 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i24 = (int) $c10;

        if $i24 != 58 goto label12;

        $r10 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.SheetIdentifier parseSheetRange(java.lang.String,org.apache.poi.ss.formula.NameIdentifier)>(r13, $r16);

        return $r10;

     label12:
        return null;

     label13:
        $c2 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i25 = (int) $c2;

        if $i25 == 95 goto label14;

        $c6 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $z0 = staticinvoke <java.lang.Character: boolean isLetter(char)>($c6);

        if $z0 == 0 goto label19;

     label14:
        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

     label15:
        $c16 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $z4 = staticinvoke <org.apache.poi.ss.formula.FormulaParser: boolean isUnquotedSheetNameChar(char)>($c16);

        if $z4 == 0 goto label16;

        $c5 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5);

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void GetChar()>();

        goto label15;

     label16:
        $r19 = new org.apache.poi.ss.formula.NameIdentifier;

        $r3 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<org.apache.poi.ss.formula.NameIdentifier: void <init>(java.lang.String,boolean)>($r3, 0);

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void SkipWhite()>();

        $c3 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i26 = (int) $c3;

        if $i26 != 33 goto label17;

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void GetChar()>();

        $r20 = new org.apache.poi.ss.formula.SheetIdentifier;

        specialinvoke $r20.<org.apache.poi.ss.formula.SheetIdentifier: void <init>(java.lang.String,org.apache.poi.ss.formula.NameIdentifier)>(r13, $r19);

        return $r20;

     label17:
        $c4 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i27 = (int) $c4;

        if $i27 != 58 goto label18;

        $r4 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.SheetIdentifier parseSheetRange(java.lang.String,org.apache.poi.ss.formula.NameIdentifier)>(r13, $r19);

        return $r4;

     label18:
        return null;

     label19:
        $c7 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i28 = (int) $c7;

        if $i28 != 33 goto label20;

        if r13 == null goto label20;

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void GetChar()>();

        $r21 = new org.apache.poi.ss.formula.SheetIdentifier;

        specialinvoke $r21.<org.apache.poi.ss.formula.SheetIdentifier: void <init>(java.lang.String,org.apache.poi.ss.formula.NameIdentifier)>(r13, null);

        return $r21;

     label20:
        return null;
    }

    private org.apache.poi.ss.formula.SheetIdentifier parseSheetRange(java.lang.String, org.apache.poi.ss.formula.NameIdentifier)
    {
        org.apache.poi.ss.formula.FormulaParser r0;
        org.apache.poi.ss.formula.NameIdentifier r4, $r5;
        org.apache.poi.ss.formula.SheetIdentifier $r1;
        java.lang.String r3;
        org.apache.poi.ss.formula.SheetRangeIdentifier $r2;

        r0 := @this: org.apache.poi.ss.formula.FormulaParser;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: org.apache.poi.ss.formula.NameIdentifier;

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void GetChar()>();

        $r1 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.SheetIdentifier parseSheetName()>();

        if $r1 == null goto label1;

        $r2 = new org.apache.poi.ss.formula.SheetRangeIdentifier;

        $r5 = virtualinvoke $r1.<org.apache.poi.ss.formula.SheetIdentifier: org.apache.poi.ss.formula.NameIdentifier getSheetIdentifier()>();

        specialinvoke $r2.<org.apache.poi.ss.formula.SheetRangeIdentifier: void <init>(java.lang.String,org.apache.poi.ss.formula.NameIdentifier,org.apache.poi.ss.formula.NameIdentifier)>(r3, r4, $r5);

        return $r2;

     label1:
        return null;
    }

    private static boolean isUnquotedSheetNameChar(char)
    {
        int $i1;
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>(c0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $i1 = (int) c0;

        lookupswitch($i1)
        {
            case 46: goto label2;
            case 95: goto label2;
            default: goto label3;
        };

     label2:
        return 1;

     label3:
        return 0;
    }

    private boolean isValidCellReference(java.lang.String)
    {
        org.apache.poi.ss.util.CellReference$NameType $r3, $r4;
        int i0, $i1, $i2, $i3, $i5;
        java.lang.String r0, $r5;
        boolean z1, $z2, $z3, $z4, $z5;
        org.apache.poi.ss.formula.function.FunctionMetadata $r6;
        org.apache.poi.ss.formula.FormulaParser r1;
        char $c4;
        org.apache.poi.ss.SpreadsheetVersion $r2;

        r1 := @this: org.apache.poi.ss.formula.FormulaParser;

        r0 := @parameter0: java.lang.String;

        $r2 = r1.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.SpreadsheetVersion _ssVersion>;

        $r3 = staticinvoke <org.apache.poi.ss.util.CellReference: org.apache.poi.ss.util.CellReference$NameType classifyCellReference(java.lang.String,org.apache.poi.ss.SpreadsheetVersion)>(r0, $r2);

        $r4 = <org.apache.poi.ss.util.CellReference$NameType: org.apache.poi.ss.util.CellReference$NameType CELL>;

        if $r3 != $r4 goto label1;

        $z5 = 1;

        $z4 = 1;

        goto label2;

     label1:
        $z5 = 0;

        $z4 = 0;

     label2:
        z1 = $z5;

        if $z4 == 0 goto label7;

        $r5 = virtualinvoke r0.<java.lang.String: java.lang.String toUpperCase()>();

        $r6 = staticinvoke <org.apache.poi.ss.formula.function.FunctionMetadataRegistry: org.apache.poi.ss.formula.function.FunctionMetadata getFunctionByName(java.lang.String)>($r5);

        if $r6 == null goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        if $z2 == 0 goto label7;

        i0 = r1.<org.apache.poi.ss.formula.FormulaParser: int _pointer>;

        $i1 = r1.<org.apache.poi.ss.formula.FormulaParser: int _pointer>;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        $i3 = $i1 + $i2;

        specialinvoke r1.<org.apache.poi.ss.formula.FormulaParser: void resetPointer(int)>($i3);

        specialinvoke r1.<org.apache.poi.ss.formula.FormulaParser: void SkipWhite()>();

        $c4 = r1.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i5 = (int) $c4;

        if $i5 == 40 goto label5;

        $z3 = 1;

        goto label6;

     label5:
        $z3 = 0;

     label6:
        z1 = $z3;

        specialinvoke r1.<org.apache.poi.ss.formula.FormulaParser: void resetPointer(int)>(i0);

     label7:
        return z1;
    }

    private org.apache.poi.ss.formula.ParseNode function(java.lang.String)
    {
        org.apache.poi.ss.formula.ptg.Ptg $r12, r25;
        java.lang.IllegalStateException $r19;
        int $i0;
        java.lang.String r0, $r10, $r18, $r24;
        boolean $z0, $z1;
        org.apache.poi.ss.formula.FormulaParseException $r5, $r13;
        org.apache.poi.ss.formula.FormulaParser r1;
        org.apache.poi.ss.formula.EvaluationName $r4;
        org.apache.poi.ss.formula.ParseNode $r27;
        org.apache.poi.ss.formula.FormulaParsingWorkbook $r2, $r3, $r11;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r14, $r15, $r16, $r17, $r20, $r21, $r22, $r23;
        org.apache.poi.ss.formula.ParseNode[] $r26;

        r1 := @this: org.apache.poi.ss.formula.FormulaParser;

        r0 := @parameter0: java.lang.String;

        r25 = null;

        $z0 = staticinvoke <org.apache.poi.ss.formula.ptg.AbstractFunctionPtg: boolean isBuiltInFunctionName(java.lang.String)>(r0);

        if $z0 != 0 goto label4;

        $r2 = r1.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.FormulaParsingWorkbook _book>;

        if $r2 != null goto label1;

        $r19 = new java.lang.IllegalStateException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Need book to evaluate name \'");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r24);

        throw $r19;

     label1:
        $r3 = r1.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.FormulaParsingWorkbook _book>;

        $i0 = r1.<org.apache.poi.ss.formula.FormulaParser: int _sheetIndex>;

        $r4 = interfaceinvoke $r3.<org.apache.poi.ss.formula.FormulaParsingWorkbook: org.apache.poi.ss.formula.EvaluationName getName(java.lang.String,int)>(r0, $i0);

        if $r4 != null goto label2;

        $r11 = r1.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.FormulaParsingWorkbook _book>;

        $r12 = interfaceinvoke $r11.<org.apache.poi.ss.formula.FormulaParsingWorkbook: org.apache.poi.ss.formula.ptg.Ptg getNameXPtg(java.lang.String,org.apache.poi.ss.formula.SheetIdentifier)>(r0, null);

        r25 = $r12;

        if $r12 != null goto label4;

        $r13 = new org.apache.poi.ss.formula.FormulaParseException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Name \'");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is completely unknown in the current workbook");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<org.apache.poi.ss.formula.FormulaParseException: void <init>(java.lang.String)>($r18);

        throw $r13;

     label2:
        $z1 = interfaceinvoke $r4.<org.apache.poi.ss.formula.EvaluationName: boolean isFunctionName()>();

        if $z1 != 0 goto label3;

        $r5 = new org.apache.poi.ss.formula.FormulaParseException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempt to use name \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' as a function, but defined name in workbook does not refer to a function");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.apache.poi.ss.formula.FormulaParseException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label3:
        r25 = interfaceinvoke $r4.<org.apache.poi.ss.formula.EvaluationName: org.apache.poi.ss.formula.ptg.NamePtg createPtg()>();

     label4:
        specialinvoke r1.<org.apache.poi.ss.formula.FormulaParser: void Match(char)>(40);

        $r26 = specialinvoke r1.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.ParseNode[] Arguments()>();

        specialinvoke r1.<org.apache.poi.ss.formula.FormulaParser: void Match(char)>(41);

        $r27 = specialinvoke r1.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.ParseNode getFunction(java.lang.String,org.apache.poi.ss.formula.ptg.Ptg,org.apache.poi.ss.formula.ParseNode[])>(r0, r25, $r26);

        return $r27;
    }

    private org.apache.poi.ss.formula.ParseNode getFunction(java.lang.String, org.apache.poi.ss.formula.ptg.Ptg, org.apache.poi.ss.formula.ParseNode[])
    {
        org.apache.poi.ss.formula.ptg.Ptg r4;
        java.lang.IllegalStateException $r9, $r13;
        org.apache.poi.ss.formula.ptg.AttrPtg $r8;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String r0, $r1;
        org.apache.poi.ss.formula.ptg.AbstractFunctionPtg r15;
        boolean $z0, $z1, z2;
        org.apache.poi.ss.formula.function.FunctionMetadata $r2;
        org.apache.poi.ss.formula.FormulaParser r5;
        org.apache.poi.ss.formula.ptg.FuncVarPtg $r12;
        org.apache.poi.ss.formula.ParseNode $r6, $r7, $r10, $r11;
        org.apache.poi.ss.formula.ParseNode[] r3, r14;

        r5 := @this: org.apache.poi.ss.formula.FormulaParser;

        r0 := @parameter0: java.lang.String;

        r4 := @parameter1: org.apache.poi.ss.formula.ptg.Ptg;

        r3 := @parameter2: org.apache.poi.ss.formula.ParseNode[];

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String toUpperCase()>();

        $r2 = staticinvoke <org.apache.poi.ss.formula.function.FunctionMetadataRegistry: org.apache.poi.ss.formula.function.FunctionMetadata getFunctionByName(java.lang.String)>($r1);

        i0 = lengthof r3;

        if $r2 != null goto label2;

        if r4 != null goto label1;

        $r13 = new java.lang.IllegalStateException;

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>("NamePtg must be supplied for external functions");

        throw $r13;

     label1:
        $i4 = i0 + 1;

        r14 = newarray (org.apache.poi.ss.formula.ParseNode)[$i4];

        $r10 = new org.apache.poi.ss.formula.ParseNode;

        specialinvoke $r10.<org.apache.poi.ss.formula.ParseNode: void <init>(org.apache.poi.ss.formula.ptg.Ptg)>(r4);

        r14[0] = $r10;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r14, 1, i0);

        $r11 = new org.apache.poi.ss.formula.ParseNode;

        $i5 = i0 + 1;

        $r12 = staticinvoke <org.apache.poi.ss.formula.ptg.FuncVarPtg: org.apache.poi.ss.formula.ptg.FuncVarPtg create(java.lang.String,int)>(r0, $i5);

        specialinvoke $r11.<org.apache.poi.ss.formula.ParseNode: void <init>(org.apache.poi.ss.formula.ptg.Ptg,org.apache.poi.ss.formula.ParseNode[])>($r12, r14);

        return $r11;

     label2:
        if r4 == null goto label3;

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("NamePtg no applicable to internal functions");

        throw $r9;

     label3:
        $z0 = virtualinvoke $r2.<org.apache.poi.ss.formula.function.FunctionMetadata: boolean hasFixedArgsLength()>();

        if $z0 != 0 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        z2 = $z1;

        $i1 = virtualinvoke $r2.<org.apache.poi.ss.formula.function.FunctionMetadata: int getIndex()>();

        if $i1 != 4 goto label6;

        $i3 = lengthof r3;

        if $i3 != 1 goto label6;

        $r7 = new org.apache.poi.ss.formula.ParseNode;

        $r8 = staticinvoke <org.apache.poi.ss.formula.ptg.AttrPtg: org.apache.poi.ss.formula.ptg.AttrPtg getSumSingle()>();

        specialinvoke $r7.<org.apache.poi.ss.formula.ParseNode: void <init>(org.apache.poi.ss.formula.ptg.Ptg,org.apache.poi.ss.formula.ParseNode[])>($r8, r3);

        return $r7;

     label6:
        $i2 = lengthof r3;

        specialinvoke r5.<org.apache.poi.ss.formula.FormulaParser: void validateNumArgs(int,org.apache.poi.ss.formula.function.FunctionMetadata)>($i2, $r2);

        if z2 == 0 goto label7;

        r15 = staticinvoke <org.apache.poi.ss.formula.ptg.FuncVarPtg: org.apache.poi.ss.formula.ptg.FuncVarPtg create(java.lang.String,int)>(r0, i0);

        goto label8;

     label7:
        r15 = staticinvoke <org.apache.poi.ss.formula.ptg.FuncPtg: org.apache.poi.ss.formula.ptg.FuncPtg create(int)>($i1);

     label8:
        $r6 = new org.apache.poi.ss.formula.ParseNode;

        specialinvoke $r6.<org.apache.poi.ss.formula.ParseNode: void <init>(org.apache.poi.ss.formula.ptg.Ptg,org.apache.poi.ss.formula.ParseNode[])>(r15, r3);

        return $r6;
    }

    private void validateNumArgs(int, org.apache.poi.ss.formula.function.FunctionMetadata)
    {
        boolean $z0, $z1, $z2;
        org.apache.poi.ss.formula.function.FunctionMetadata r0;
        org.apache.poi.ss.SpreadsheetVersion $r26;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r19, $r20, $r21, $r22, $r27, $r28, $r30, $r31, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r45, $r46, $r47, $r48;
        int i0, $i1, $i2, $i3, i4;
        java.lang.String $r3, $r6, $r17, $r29, $r32, $r43, r49, r50;
        org.apache.poi.ss.formula.FormulaParseException $r18, $r44;
        org.apache.poi.ss.formula.FormulaParser r23;
        org.apache.poi.ss.formula.FormulaParsingWorkbook $r24, $r25;

        r23 := @this: org.apache.poi.ss.formula.FormulaParser;

        i0 := @parameter0: int;

        r0 := @parameter1: org.apache.poi.ss.formula.function.FunctionMetadata;

        $i1 = virtualinvoke r0.<org.apache.poi.ss.formula.function.FunctionMetadata: int getMinParams()>();

        if i0 >= $i1 goto label3;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Too few arguments to function \'");

        $r29 = virtualinvoke r0.<org.apache.poi.ss.formula.function.FunctionMetadata: java.lang.String getName()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'. ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        $z2 = virtualinvoke r0.<org.apache.poi.ss.formula.function.FunctionMetadata: boolean hasFixedArgsLength()>();

        if $z2 == 0 goto label1;

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected ");

        $i3 = virtualinvoke r0.<org.apache.poi.ss.formula.function.FunctionMetadata: int getMinParams()>();

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("At least ");

        $i2 = virtualinvoke r0.<org.apache.poi.ss.formula.function.FunctionMetadata: int getMinParams()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" were expected");

        r49 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r49);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but got ");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        $r44 = new org.apache.poi.ss.formula.FormulaParseException;

        specialinvoke $r44.<org.apache.poi.ss.formula.FormulaParseException: void <init>(java.lang.String)>($r43);

        throw $r44;

     label3:
        $z0 = virtualinvoke r0.<org.apache.poi.ss.formula.function.FunctionMetadata: boolean hasUnlimitedVarags()>();

        if $z0 == 0 goto label5;

        $r24 = r23.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.FormulaParsingWorkbook _book>;

        if $r24 == null goto label4;

        $r25 = r23.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.FormulaParsingWorkbook _book>;

        $r26 = interfaceinvoke $r25.<org.apache.poi.ss.formula.FormulaParsingWorkbook: org.apache.poi.ss.SpreadsheetVersion getSpreadsheetVersion()>();

        i4 = virtualinvoke $r26.<org.apache.poi.ss.SpreadsheetVersion: int getMaxFunctionArgs()>();

        goto label6;

     label4:
        i4 = virtualinvoke r0.<org.apache.poi.ss.formula.function.FunctionMetadata: int getMaxParams()>();

        goto label6;

     label5:
        i4 = virtualinvoke r0.<org.apache.poi.ss.formula.function.FunctionMetadata: int getMaxParams()>();

     label6:
        if i0 <= i4 goto label9;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Too many arguments to function \'");

        $r3 = virtualinvoke r0.<org.apache.poi.ss.formula.function.FunctionMetadata: java.lang.String getName()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'. ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $z1 = virtualinvoke r0.<org.apache.poi.ss.formula.function.FunctionMetadata: boolean hasFixedArgsLength()>();

        if $z1 == 0 goto label7;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        r50 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label8;

     label7:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("At most ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" were expected");

        r50 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

     label8:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r50);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but got ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = new org.apache.poi.ss.formula.FormulaParseException;

        specialinvoke $r18.<org.apache.poi.ss.formula.FormulaParseException: void <init>(java.lang.String)>($r17);

        throw $r18;

     label9:
        return;
    }

    private static boolean isArgumentDelimiter(char)
    {
        int $i1, $i2;
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        if $i1 == 44 goto label1;

        $i2 = (int) c0;

        if $i2 != 41 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private org.apache.poi.ss.formula.ParseNode[] Arguments()
    {
        org.apache.poi.ss.formula.ptg.Ptg $r6;
        java.util.ArrayList $r8;
        int $i3, $i5, $i6;
        boolean $z0, z1, $z2;
        org.apache.poi.ss.formula.FormulaParser r1;
        char $c0, $c1, $c2, $c4;
        org.apache.poi.ss.formula.ParseNode $r2, $r9;
        java.lang.RuntimeException $r3;
        org.apache.poi.ss.formula.ParseNode[] r4, $r7;

        r1 := @this: org.apache.poi.ss.formula.FormulaParser;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>(2);

        specialinvoke r1.<org.apache.poi.ss.formula.FormulaParser: void SkipWhite()>();

        $c0 = r1.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i5 = (int) $c0;

        if $i5 != 41 goto label1;

        $r7 = <org.apache.poi.ss.formula.ParseNode: org.apache.poi.ss.formula.ParseNode[] EMPTY_ARRAY>;

        return $r7;

     label1:
        z1 = 1;

     label2:
        specialinvoke r1.<org.apache.poi.ss.formula.FormulaParser: void SkipWhite()>();

        $c4 = r1.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $z2 = staticinvoke <org.apache.poi.ss.formula.FormulaParser: boolean isArgumentDelimiter(char)>($c4);

        if $z2 == 0 goto label5;

        if z1 == 0 goto label3;

        $r9 = new org.apache.poi.ss.formula.ParseNode;

        $r6 = <org.apache.poi.ss.formula.ptg.MissingArgPtg: org.apache.poi.ss.formula.ptg.Ptg instance>;

        specialinvoke $r9.<org.apache.poi.ss.formula.ParseNode: void <init>(org.apache.poi.ss.formula.ptg.Ptg)>($r6);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r9);

     label3:
        $c2 = r1.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i6 = (int) $c2;

        if $i6 != 41 goto label4;

        goto label6;

     label4:
        specialinvoke r1.<org.apache.poi.ss.formula.FormulaParser: void Match(char)>(44);

        z1 = 1;

        goto label2;

     label5:
        $r2 = specialinvoke r1.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.ParseNode comparisonExpression()>();

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r2);

        z1 = 0;

        specialinvoke r1.<org.apache.poi.ss.formula.FormulaParser: void SkipWhite()>();

        $c1 = r1.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $z0 = staticinvoke <org.apache.poi.ss.formula.FormulaParser: boolean isArgumentDelimiter(char)>($c1);

        if $z0 != 0 goto label2;

        $r3 = specialinvoke r1.<org.apache.poi.ss.formula.FormulaParser: java.lang.RuntimeException expected(java.lang.String)>("\',\' or \')\'");

        throw $r3;

     label6:
        $i3 = interfaceinvoke $r8.<java.util.List: int size()>();

        r4 = newarray (org.apache.poi.ss.formula.ParseNode)[$i3];

        interfaceinvoke $r8.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r4);

        return r4;
    }

    private org.apache.poi.ss.formula.ParseNode powerFactor()
    {
        org.apache.poi.ss.formula.FormulaParser r0;
        org.apache.poi.ss.formula.ptg.ValueOperatorPtg $r3;
        int $i1;
        char $c0;
        org.apache.poi.ss.formula.ParseNode $r1, r4, $r5;

        r0 := @this: org.apache.poi.ss.formula.FormulaParser;

        r4 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.ParseNode percentFactor()>();

     label1:
        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void SkipWhite()>();

        $c0 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i1 = (int) $c0;

        if $i1 == 94 goto label2;

        return r4;

     label2:
        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void Match(char)>(94);

        $r1 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.ParseNode percentFactor()>();

        $r5 = new org.apache.poi.ss.formula.ParseNode;

        $r3 = <org.apache.poi.ss.formula.ptg.PowerPtg: org.apache.poi.ss.formula.ptg.ValueOperatorPtg instance>;

        specialinvoke $r5.<org.apache.poi.ss.formula.ParseNode: void <init>(org.apache.poi.ss.formula.ptg.Ptg,org.apache.poi.ss.formula.ParseNode,org.apache.poi.ss.formula.ParseNode)>($r3, r4, $r1);

        r4 = $r5;

        goto label1;
    }

    private org.apache.poi.ss.formula.ParseNode percentFactor()
    {
        org.apache.poi.ss.formula.FormulaParser r0;
        org.apache.poi.ss.formula.ptg.ValueOperatorPtg $r2;
        int $i1;
        char $c0;
        org.apache.poi.ss.formula.ParseNode r3, $r4;

        r0 := @this: org.apache.poi.ss.formula.FormulaParser;

        r3 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.ParseNode parseSimpleFactor()>();

     label1:
        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void SkipWhite()>();

        $c0 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i1 = (int) $c0;

        if $i1 == 37 goto label2;

        return r3;

     label2:
        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void Match(char)>(37);

        $r4 = new org.apache.poi.ss.formula.ParseNode;

        $r2 = <org.apache.poi.ss.formula.ptg.PercentPtg: org.apache.poi.ss.formula.ptg.ValueOperatorPtg instance>;

        specialinvoke $r4.<org.apache.poi.ss.formula.ParseNode: void <init>(org.apache.poi.ss.formula.ptg.Ptg,org.apache.poi.ss.formula.ParseNode)>($r2, r3);

        r3 = $r4;

        goto label1;
    }

    private org.apache.poi.ss.formula.ParseNode parseSimpleFactor()
    {
        org.apache.poi.ss.formula.ptg.Ptg $r14;
        int $i1, $i7, $i8, $i9, $i10;
        java.lang.String $r11;
        boolean $z0, $z1;
        org.apache.poi.ss.formula.FormulaParser r0;
        char $c0, $c2, $c3, $c4, $c5, $c6;
        org.apache.poi.ss.formula.ParseNode $r1, $r2, $r3, $r4, $r15, $r16, $r17, $r19, $r20;
        java.lang.RuntimeException $r12;
        org.apache.poi.ss.formula.ptg.ControlPtg $r6;
        org.apache.poi.ss.formula.ptg.StringPtg $r18;
        org.apache.poi.ss.formula.ptg.ErrPtg $r8;

        r0 := @this: org.apache.poi.ss.formula.FormulaParser;

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void SkipWhite()>();

        $c0 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i7 = (int) $c0;

        lookupswitch($i7)
        {
            case 34: goto label05;
            case 35: goto label01;
            case 40: goto label04;
            case 43: goto label03;
            case 45: goto label02;
            case 123: goto label06;
            default: goto label07;
        };

     label01:
        $r16 = new org.apache.poi.ss.formula.ParseNode;

        $i1 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: int parseErrorLiteral()>();

        $r8 = staticinvoke <org.apache.poi.ss.formula.ptg.ErrPtg: org.apache.poi.ss.formula.ptg.ErrPtg valueOf(int)>($i1);

        specialinvoke $r16.<org.apache.poi.ss.formula.ParseNode: void <init>(org.apache.poi.ss.formula.ptg.Ptg)>($r8);

        return $r16;

     label02:
        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void Match(char)>(45);

        $r2 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.ParseNode parseUnary(boolean)>(0);

        return $r2;

     label03:
        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void Match(char)>(43);

        $r3 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.ParseNode parseUnary(boolean)>(1);

        return $r3;

     label04:
        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void Match(char)>(40);

        $r4 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.ParseNode comparisonExpression()>();

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void Match(char)>(41);

        $r17 = new org.apache.poi.ss.formula.ParseNode;

        $r6 = <org.apache.poi.ss.formula.ptg.ParenthesisPtg: org.apache.poi.ss.formula.ptg.ControlPtg instance>;

        specialinvoke $r17.<org.apache.poi.ss.formula.ParseNode: void <init>(org.apache.poi.ss.formula.ptg.Ptg,org.apache.poi.ss.formula.ParseNode)>($r6, $r4);

        return $r17;

     label05:
        $r19 = new org.apache.poi.ss.formula.ParseNode;

        $r18 = new org.apache.poi.ss.formula.ptg.StringPtg;

        $r11 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: java.lang.String parseStringLiteral()>();

        specialinvoke $r18.<org.apache.poi.ss.formula.ptg.StringPtg: void <init>(java.lang.String)>($r11);

        specialinvoke $r19.<org.apache.poi.ss.formula.ParseNode: void <init>(org.apache.poi.ss.formula.ptg.Ptg)>($r18);

        return $r19;

     label06:
        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void Match(char)>(123);

        $r1 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.ParseNode parseArray()>();

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void Match(char)>(125);

        return $r1;

     label07:
        $c2 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $z0 = staticinvoke <org.apache.poi.ss.formula.FormulaParser: boolean IsAlpha(char)>($c2);

        if $z0 != 0 goto label08;

        $c3 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $z1 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c3);

        if $z1 != 0 goto label08;

        $c4 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i8 = (int) $c4;

        if $i8 == 39 goto label08;

        $c5 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i9 = (int) $c5;

        if $i9 != 91 goto label09;

     label08:
        $r15 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.ParseNode parseRangeExpression()>();

        return $r15;

     label09:
        $c6 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i10 = (int) $c6;

        if $i10 != 46 goto label10;

        $r20 = new org.apache.poi.ss.formula.ParseNode;

        $r14 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.ptg.Ptg parseNumber()>();

        specialinvoke $r20.<org.apache.poi.ss.formula.ParseNode: void <init>(org.apache.poi.ss.formula.ptg.Ptg)>($r14);

        return $r20;

     label10:
        $r12 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: java.lang.RuntimeException expected(java.lang.String)>("cell ref or constant literal");

        throw $r12;
    }

    private org.apache.poi.ss.formula.ParseNode parseUnary(boolean)
    {
        org.apache.poi.ss.formula.ptg.NumberPtg $r8, $r11, $r13;
        org.apache.poi.ss.formula.ptg.Ptg $r3;
        org.apache.poi.ss.formula.ptg.ValueOperatorPtg $r10;
        int $i1, $i2, $i4;
        boolean $z0, z1, $z2, $z3, $z4;
        double $d0, $d1, $d2;
        org.apache.poi.ss.formula.ptg.IntPtg $r4;
        org.apache.poi.ss.formula.FormulaParser r0;
        char $c0, $c3;
        org.apache.poi.ss.formula.ParseNode $r1, $r12, $r14, $r15;

        r0 := @this: org.apache.poi.ss.formula.FormulaParser;

        z1 := @parameter0: boolean;

        $c0 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $z0 = staticinvoke <org.apache.poi.ss.formula.FormulaParser: boolean IsDigit(char)>($c0);

        if $z0 != 0 goto label1;

        $c3 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i4 = (int) $c3;

        if $i4 != 46 goto label2;

     label1:
        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        $r1 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.ParseNode powerFactor()>();

        if $z4 == 0 goto label7;

        $r3 = virtualinvoke $r1.<org.apache.poi.ss.formula.ParseNode: org.apache.poi.ss.formula.ptg.Ptg getToken()>();

        $z2 = $r3 instanceof org.apache.poi.ss.formula.ptg.NumberPtg;

        if $z2 == 0 goto label5;

        if z1 == 0 goto label4;

        return $r1;

     label4:
        $r11 = new org.apache.poi.ss.formula.ptg.NumberPtg;

        $r8 = (org.apache.poi.ss.formula.ptg.NumberPtg) $r3;

        $d1 = virtualinvoke $r8.<org.apache.poi.ss.formula.ptg.NumberPtg: double getValue()>();

        $d2 = neg $d1;

        specialinvoke $r11.<org.apache.poi.ss.formula.ptg.NumberPtg: void <init>(double)>($d2);

        $r12 = new org.apache.poi.ss.formula.ParseNode;

        specialinvoke $r12.<org.apache.poi.ss.formula.ParseNode: void <init>(org.apache.poi.ss.formula.ptg.Ptg)>($r11);

        return $r12;

     label5:
        $z3 = $r3 instanceof org.apache.poi.ss.formula.ptg.IntPtg;

        if $z3 == 0 goto label7;

        if z1 == 0 goto label6;

        return $r1;

     label6:
        $r4 = (org.apache.poi.ss.formula.ptg.IntPtg) $r3;

        $i1 = virtualinvoke $r4.<org.apache.poi.ss.formula.ptg.IntPtg: int getValue()>();

        $r13 = new org.apache.poi.ss.formula.ptg.NumberPtg;

        $i2 = neg $i1;

        $d0 = (double) $i2;

        specialinvoke $r13.<org.apache.poi.ss.formula.ptg.NumberPtg: void <init>(double)>($d0);

        $r14 = new org.apache.poi.ss.formula.ParseNode;

        specialinvoke $r14.<org.apache.poi.ss.formula.ParseNode: void <init>(org.apache.poi.ss.formula.ptg.Ptg)>($r13);

        return $r14;

     label7:
        $r15 = new org.apache.poi.ss.formula.ParseNode;

        if z1 == 0 goto label8;

        $r10 = <org.apache.poi.ss.formula.ptg.UnaryPlusPtg: org.apache.poi.ss.formula.ptg.ValueOperatorPtg instance>;

        goto label9;

     label8:
        $r10 = <org.apache.poi.ss.formula.ptg.UnaryMinusPtg: org.apache.poi.ss.formula.ptg.ValueOperatorPtg instance>;

     label9:
        specialinvoke $r15.<org.apache.poi.ss.formula.ParseNode: void <init>(org.apache.poi.ss.formula.ptg.Ptg,org.apache.poi.ss.formula.ParseNode)>($r10, $r1);

        return $r15;
    }

    private org.apache.poi.ss.formula.ParseNode parseArray()
    {
        org.apache.poi.ss.formula.FormulaParser r1;
        java.lang.Object[] $r2, $r5;
        org.apache.poi.ss.formula.ptg.ArrayPtg $r9;
        char $c0, $c1;
        org.apache.poi.ss.formula.ParseNode $r10;
        java.lang.RuntimeException $r3;
        java.util.ArrayList $r8;
        java.lang.Object[][] r4;
        int $i2, i3, $i4, $i5;

        r1 := @this: org.apache.poi.ss.formula.FormulaParser;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

     label1:
        $r2 = specialinvoke r1.<org.apache.poi.ss.formula.FormulaParser: java.lang.Object[] parseArrayRow()>();

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r2);

        $c0 = r1.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i4 = (int) $c0;

        if $i4 != 125 goto label2;

        goto label4;

     label2:
        $c1 = r1.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i5 = (int) $c1;

        if $i5 == 59 goto label3;

        $r3 = specialinvoke r1.<org.apache.poi.ss.formula.FormulaParser: java.lang.RuntimeException expected(java.lang.String)>("\'}\' or \';\'");

        throw $r3;

     label3:
        specialinvoke r1.<org.apache.poi.ss.formula.FormulaParser: void Match(char)>(59);

        goto label1;

     label4:
        $i2 = interfaceinvoke $r8.<java.util.List: int size()>();

        r4 = newarray (java.lang.Object[])[$i2];

        interfaceinvoke $r8.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r4);

        $r5 = r4[0];

        i3 = lengthof $r5;

        specialinvoke r1.<org.apache.poi.ss.formula.FormulaParser: void checkRowLengths(java.lang.Object[][],int)>(r4, i3);

        $r10 = new org.apache.poi.ss.formula.ParseNode;

        $r9 = new org.apache.poi.ss.formula.ptg.ArrayPtg;

        specialinvoke $r9.<org.apache.poi.ss.formula.ptg.ArrayPtg: void <init>(java.lang.Object[][])>(r4);

        specialinvoke $r10.<org.apache.poi.ss.formula.ParseNode: void <init>(org.apache.poi.ss.formula.ptg.Ptg)>($r9);

        return $r10;
    }

    private void checkRowLengths(java.lang.Object[][], int)
    {
        java.lang.Object[] $r1;
        java.lang.Object[][] r0;
        int $i0, i1, i2, i3;
        java.lang.String $r10;
        org.apache.poi.ss.formula.FormulaParseException $r2;
        org.apache.poi.ss.formula.FormulaParser r11;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        r11 := @this: org.apache.poi.ss.formula.FormulaParser;

        r0 := @parameter0: java.lang.Object[][];

        i2 := @parameter1: int;

        i3 = 0;

     label1:
        $i0 = lengthof r0;

        if i3 >= $i0 goto label3;

        $r1 = r0[i3];

        i1 = lengthof $r1;

        if i1 == i2 goto label2;

        $r2 = new org.apache.poi.ss.formula.FormulaParseException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Array row ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has length ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but row 0 has length ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<org.apache.poi.ss.formula.FormulaParseException: void <init>(java.lang.String)>($r10);

        throw $r2;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return;
    }

    private java.lang.Object[] parseArrayRow()
    {
        org.apache.poi.ss.formula.FormulaParser r1;
        java.lang.Object[] r3;
        char $c0;
        java.lang.RuntimeException $r4;
        java.util.ArrayList $r5;
        int $i1, $i2;
        java.lang.Object $r2;

        r1 := @this: org.apache.poi.ss.formula.FormulaParser;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

     label1:
        $r2 = specialinvoke r1.<org.apache.poi.ss.formula.FormulaParser: java.lang.Object parseArrayItem()>();

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r2);

        specialinvoke r1.<org.apache.poi.ss.formula.FormulaParser: void SkipWhite()>();

        $c0 = r1.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i2 = (int) $c0;

        lookupswitch($i2)
        {
            case 44: goto label3;
            case 59: goto label2;
            case 125: goto label2;
            default: goto label4;
        };

     label2:
        goto label5;

     label3:
        specialinvoke r1.<org.apache.poi.ss.formula.FormulaParser: void Match(char)>(44);

        goto label1;

     label4:
        $r4 = specialinvoke r1.<org.apache.poi.ss.formula.FormulaParser: java.lang.RuntimeException expected(java.lang.String)>("\'}\' or \',\'");

        throw $r4;

     label5:
        $i1 = interfaceinvoke $r5.<java.util.List: int size()>();

        r3 = newarray (java.lang.Object)[$i1];

        interfaceinvoke $r5.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r3);

        return r3;
    }

    private java.lang.Object parseArrayItem()
    {
        org.apache.poi.ss.formula.ptg.Ptg $r2, $r6;
        org.apache.poi.ss.formula.FormulaParser r0;
        org.apache.poi.ss.formula.constant.ErrorConstant $r4;
        java.lang.Double $r3, $r7;
        char $c0;
        int $i1, $i2;
        java.lang.Boolean $r1;
        java.lang.String $r5;

        r0 := @this: org.apache.poi.ss.formula.FormulaParser;

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void SkipWhite()>();

        $c0 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i2 = (int) $c0;

        lookupswitch($i2)
        {
            case 34: goto label1;
            case 35: goto label2;
            case 45: goto label4;
            case 70: goto label3;
            case 84: goto label3;
            case 102: goto label3;
            case 116: goto label3;
            default: goto label5;
        };

     label1:
        $r5 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: java.lang.String parseStringLiteral()>();

        return $r5;

     label2:
        $i1 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: int parseErrorLiteral()>();

        $r4 = staticinvoke <org.apache.poi.ss.formula.constant.ErrorConstant: org.apache.poi.ss.formula.constant.ErrorConstant valueOf(int)>($i1);

        return $r4;

     label3:
        $r1 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: java.lang.Boolean parseBooleanLiteral()>();

        return $r1;

     label4:
        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void Match(char)>(45);

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void SkipWhite()>();

        $r2 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.ptg.Ptg parseNumber()>();

        $r3 = staticinvoke <org.apache.poi.ss.formula.FormulaParser: java.lang.Double convertArrayNumber(org.apache.poi.ss.formula.ptg.Ptg,boolean)>($r2, 0);

        return $r3;

     label5:
        $r6 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.ptg.Ptg parseNumber()>();

        $r7 = staticinvoke <org.apache.poi.ss.formula.FormulaParser: java.lang.Double convertArrayNumber(org.apache.poi.ss.formula.ptg.Ptg,boolean)>($r6, 1);

        return $r7;
    }

    private java.lang.Boolean parseBooleanLiteral()
    {
        org.apache.poi.ss.formula.FormulaParser r0;
        java.lang.RuntimeException $r4;
        java.lang.Boolean $r5, $r6;
        java.lang.String $r1, $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: org.apache.poi.ss.formula.FormulaParser;

        $r1 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: java.lang.String parseUnquotedIdentifier()>();

        $r2 = "TRUE";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r1);

        if $z0 == 0 goto label1;

        $r6 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return $r6;

     label1:
        $r3 = "FALSE";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r1);

        if $z1 == 0 goto label2;

        $r5 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return $r5;

     label2:
        $r4 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: java.lang.RuntimeException expected(java.lang.String)>("\'TRUE\' or \'FALSE\'");

        throw $r4;
    }

    private static java.lang.Double convertArrayNumber(org.apache.poi.ss.formula.ptg.Ptg, boolean)
    {
        org.apache.poi.ss.formula.ptg.NumberPtg $r9;
        org.apache.poi.ss.formula.ptg.Ptg r0;
        java.lang.Double $r10;
        int $i0;
        java.lang.String $r5, $r8;
        boolean $z0, $z1, z2;
        double d0;
        org.apache.poi.ss.formula.ptg.IntPtg $r11;
        java.lang.RuntimeException $r1;
        java.lang.StringBuilder $r2, $r3, $r6, $r7;
        java.lang.Class $r4;

        r0 := @parameter0: org.apache.poi.ss.formula.ptg.Ptg;

        z2 := @parameter1: boolean;

        $z0 = r0 instanceof org.apache.poi.ss.formula.ptg.IntPtg;

        if $z0 == 0 goto label1;

        $r11 = (org.apache.poi.ss.formula.ptg.IntPtg) r0;

        $i0 = virtualinvoke $r11.<org.apache.poi.ss.formula.ptg.IntPtg: int getValue()>();

        d0 = (double) $i0;

        goto label3;

     label1:
        $z1 = r0 instanceof org.apache.poi.ss.formula.ptg.NumberPtg;

        if $z1 == 0 goto label2;

        $r9 = (org.apache.poi.ss.formula.ptg.NumberPtg) r0;

        d0 = virtualinvoke $r9.<org.apache.poi.ss.formula.ptg.NumberPtg: double getValue()>();

        goto label3;

     label2:
        $r1 = new java.lang.RuntimeException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected ptg (");

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r8);

        throw $r1;

     label3:
        if z2 != 0 goto label4;

        d0 = neg d0;

     label4:
        $r10 = new java.lang.Double;

        specialinvoke $r10.<java.lang.Double: void <init>(double)>(d0);

        return $r10;
    }

    private org.apache.poi.ss.formula.ptg.Ptg parseNumber()
    {
        org.apache.poi.ss.formula.ptg.Ptg $r2;
        int $i4, $i5, $i6, $i7;
        java.lang.String $r1, r8, r9, r10, $r11;
        org.apache.poi.ss.formula.FormulaParser r0;
        char $c0, $c1, $c2, $c3;
        java.lang.RuntimeException $r3, $r7;
        java.lang.StringBuilder $r5, $r6, $r12;

        r0 := @this: org.apache.poi.ss.formula.FormulaParser;

        r8 = null;

        r9 = null;

        $r1 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: java.lang.String GetNum()>();

        $c0 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i4 = (int) $c0;

        if $i4 != 46 goto label1;

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void GetChar()>();

        r8 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: java.lang.String GetNum()>();

     label1:
        $c1 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i5 = (int) $c1;

        if $i5 != 69 goto label5;

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void GetChar()>();

        r10 = "";

        $c2 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i6 = (int) $c2;

        if $i6 != 43 goto label2;

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void GetChar()>();

        goto label3;

     label2:
        $c3 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i7 = (int) $c3;

        if $i7 != 45 goto label3;

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void GetChar()>();

        r10 = "-";

     label3:
        $r11 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: java.lang.String GetNum()>();

        if $r11 != null goto label4;

        $r7 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: java.lang.RuntimeException expected(java.lang.String)>("Integer");

        throw $r7;

     label4:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label5:
        if $r1 != null goto label6;

        if r8 != null goto label6;

        $r3 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: java.lang.RuntimeException expected(java.lang.String)>("Integer");

        throw $r3;

     label6:
        $r2 = staticinvoke <org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.ptg.Ptg getNumberPtgFromString(java.lang.String,java.lang.String,java.lang.String)>($r1, r8, r9);

        return $r2;
    }

    private int parseErrorLiteral()
    {
        int $i4, $i5, $i6;
        java.lang.String $r1, $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.apache.poi.ss.formula.FormulaParser r0;
        char $c0, $c1, $c2, $c3;
        java.lang.RuntimeException $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        r0 := @this: org.apache.poi.ss.formula.FormulaParser;

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void Match(char)>(35);

        $r1 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: java.lang.String parseUnquotedIdentifier()>();

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String toUpperCase()>();

        if $r2 != null goto label01;

        $r9 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: java.lang.RuntimeException expected(java.lang.String)>("remainder of error constant literal");

        throw $r9;

     label01:
        $c0 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(0);

        $i4 = (int) $c0;

        lookupswitch($i4)
        {
            case 68: goto label06;
            case 78: goto label08;
            case 82: goto label04;
            case 86: goto label02;
            default: goto label14;
        };

     label02:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("VALUE");

        if $z0 == 0 goto label03;

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void Match(char)>(33);

        return 15;

     label03:
        $r3 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: java.lang.RuntimeException expected(java.lang.String)>("#VALUE!");

        throw $r3;

     label04:
        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("REF");

        if $z1 == 0 goto label05;

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void Match(char)>(33);

        return 23;

     label05:
        $r4 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: java.lang.RuntimeException expected(java.lang.String)>("#REF!");

        throw $r4;

     label06:
        $z6 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("DIV");

        if $z6 == 0 goto label07;

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void Match(char)>(47);

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void Match(char)>(48);

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void Match(char)>(33);

        return 7;

     label07:
        $r7 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: java.lang.RuntimeException expected(java.lang.String)>("#DIV/0!");

        throw $r7;

     label08:
        $z2 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("NAME");

        if $z2 == 0 goto label09;

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void Match(char)>(63);

        return 29;

     label09:
        $z3 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("NUM");

        if $z3 == 0 goto label10;

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void Match(char)>(33);

        return 36;

     label10:
        $z4 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("NULL");

        if $z4 == 0 goto label11;

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void Match(char)>(33);

        return 0;

     label11:
        $z5 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("N");

        if $z5 == 0 goto label13;

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void Match(char)>(47);

        $c1 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i5 = (int) $c1;

        if $i5 == 65 goto label12;

        $c3 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i6 = (int) $c3;

        if $i6 == 97 goto label12;

        $r6 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: java.lang.RuntimeException expected(java.lang.String)>("#N/A");

        throw $r6;

     label12:
        $c2 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void Match(char)>($c2);

        return 42;

     label13:
        $r5 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: java.lang.RuntimeException expected(java.lang.String)>("#NAME?, #NUM!, #NULL! or #N/A");

        throw $r5;

     label14:
        $r8 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: java.lang.RuntimeException expected(java.lang.String)>("#VALUE!, #REF!, #DIV/0!, #NAME?, #NUM!, #NULL! or #N/A");

        throw $r8;
    }

    private java.lang.String parseUnquotedIdentifier()
    {
        org.apache.poi.ss.formula.FormulaParser r0;
        char $c0, $c1, $c2, $c3;
        java.lang.RuntimeException $r3;
        int $i4, $i5, $i6;
        java.lang.StringBuilder $r4;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.apache.poi.ss.formula.FormulaParser;

        $c0 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i5 = (int) $c0;

        if $i5 != 39 goto label1;

        $r3 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: java.lang.RuntimeException expected(java.lang.String)>("unquoted identifier");

        throw $r3;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

     label2:
        $c1 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $z0 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>($c1);

        if $z0 != 0 goto label3;

        $c3 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i6 = (int) $c3;

        if $i6 != 46 goto label4;

     label3:
        $c2 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void GetChar()>();

        goto label2;

     label4:
        $i4 = virtualinvoke $r4.<java.lang.StringBuilder: int length()>();

        if $i4 >= 1 goto label5;

        return null;

     label5:
        $r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    private static org.apache.poi.ss.formula.ptg.Ptg getNumberPtgFromString(java.lang.String, java.lang.String, java.lang.String)
    {
        org.apache.poi.ss.formula.ptg.NumberPtg $r4, $r7, $r10;
        org.apache.poi.ss.formula.ptg.IntPtg $r8;
        java.lang.NumberFormatException $r9;
        java.lang.StringBuffer $r0;
        int $i0;
        java.lang.String r1, r2, r3, $r5, $r6;
        boolean $z0;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        if r1 != null goto label7;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        if r3 == null goto label1;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(69);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

     label1:
        $r6 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

     label2:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r6);

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;

        $r10 = new org.apache.poi.ss.formula.ptg.NumberPtg;

        specialinvoke $r10.<org.apache.poi.ss.formula.ptg.NumberPtg: void <init>(java.lang.String)>($r6);

        return $r10;

     label5:
        $z0 = staticinvoke <org.apache.poi.ss.formula.ptg.IntPtg: boolean isInRange(int)>($i0);

        if $z0 == 0 goto label6;

        $r8 = new org.apache.poi.ss.formula.ptg.IntPtg;

        specialinvoke $r8.<org.apache.poi.ss.formula.ptg.IntPtg: void <init>(int)>($i0);

        return $r8;

     label6:
        $r7 = new org.apache.poi.ss.formula.ptg.NumberPtg;

        specialinvoke $r7.<org.apache.poi.ss.formula.ptg.NumberPtg: void <init>(java.lang.String)>($r6);

        return $r7;

     label7:
        if r2 == null goto label8;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

     label8:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        if r3 == null goto label9;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(69);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

     label9:
        $r4 = new org.apache.poi.ss.formula.ptg.NumberPtg;

        $r5 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<org.apache.poi.ss.formula.ptg.NumberPtg: void <init>(java.lang.String)>($r5);

        return $r4;

        catch java.lang.NumberFormatException from label2 to label3 with label4;
    }

    private java.lang.String parseStringLiteral()
    {
        org.apache.poi.ss.formula.FormulaParser r0;
        char $c0, $c1, $c2;
        java.lang.StringBuffer $r3;
        int $i3, $i4;
        java.lang.String $r2;

        r0 := @this: org.apache.poi.ss.formula.FormulaParser;

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void Match(char)>(34);

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

     label1:
        $c0 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i3 = (int) $c0;

        if $i3 != 34 goto label2;

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void GetChar()>();

        $c2 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i4 = (int) $c2;

        if $i4 == 34 goto label2;

        goto label3;

     label2:
        $c1 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void GetChar()>();

        goto label1;

     label3:
        $r2 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    private org.apache.poi.ss.formula.ParseNode Term()
    {
        org.apache.poi.ss.formula.FormulaParser r0;
        org.apache.poi.ss.formula.ptg.ValueOperatorPtg r4;
        int $i1;
        char $c0;
        org.apache.poi.ss.formula.ParseNode $r1, r3, $r5;

        r0 := @this: org.apache.poi.ss.formula.FormulaParser;

        r3 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.ParseNode powerFactor()>();

     label1:
        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void SkipWhite()>();

        $c0 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i1 = (int) $c0;

        lookupswitch($i1)
        {
            case 42: goto label2;
            case 47: goto label3;
            default: goto label4;
        };

     label2:
        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void Match(char)>(42);

        r4 = <org.apache.poi.ss.formula.ptg.MultiplyPtg: org.apache.poi.ss.formula.ptg.ValueOperatorPtg instance>;

        goto label5;

     label3:
        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void Match(char)>(47);

        r4 = <org.apache.poi.ss.formula.ptg.DividePtg: org.apache.poi.ss.formula.ptg.ValueOperatorPtg instance>;

        goto label5;

     label4:
        return r3;

     label5:
        $r1 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.ParseNode powerFactor()>();

        $r5 = new org.apache.poi.ss.formula.ParseNode;

        specialinvoke $r5.<org.apache.poi.ss.formula.ParseNode: void <init>(org.apache.poi.ss.formula.ptg.Ptg,org.apache.poi.ss.formula.ParseNode,org.apache.poi.ss.formula.ParseNode)>(r4, r3, $r1);

        r3 = $r5;

        goto label1;
    }

    private org.apache.poi.ss.formula.ParseNode unionExpression()
    {
        org.apache.poi.ss.formula.FormulaParser r0;
        char $c0;
        org.apache.poi.ss.formula.ParseNode $r1, $r4, r5, $r6;
        org.apache.poi.ss.formula.ptg.OperationPtg $r3;
        int $i1;
        boolean z0;

        r0 := @this: org.apache.poi.ss.formula.FormulaParser;

        r5 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.ParseNode comparisonExpression()>();

        z0 = 0;

     label1:
        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void SkipWhite()>();

        $c0 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i1 = (int) $c0;

        lookupswitch($i1)
        {
            case 44: goto label2;
            default: goto label3;
        };

     label2:
        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void GetChar()>();

        z0 = 1;

        $r1 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.ParseNode comparisonExpression()>();

        $r6 = new org.apache.poi.ss.formula.ParseNode;

        $r3 = <org.apache.poi.ss.formula.ptg.UnionPtg: org.apache.poi.ss.formula.ptg.OperationPtg instance>;

        specialinvoke $r6.<org.apache.poi.ss.formula.ParseNode: void <init>(org.apache.poi.ss.formula.ptg.Ptg,org.apache.poi.ss.formula.ParseNode,org.apache.poi.ss.formula.ParseNode)>($r3, r5, $r1);

        r5 = $r6;

        goto label1;

     label3:
        if z0 == 0 goto label4;

        $r4 = staticinvoke <org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.ParseNode augmentWithMemPtg(org.apache.poi.ss.formula.ParseNode)>(r5);

        return $r4;

     label4:
        return r5;
    }

    private org.apache.poi.ss.formula.ParseNode comparisonExpression()
    {
        org.apache.poi.ss.formula.ptg.Ptg $r1;
        org.apache.poi.ss.formula.FormulaParser r0;
        int $i1;
        char $c0;
        org.apache.poi.ss.formula.ParseNode $r2, r4, $r5;

        r0 := @this: org.apache.poi.ss.formula.FormulaParser;

        r4 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.ParseNode concatExpression()>();

     label1:
        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void SkipWhite()>();

        $c0 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i1 = (int) $c0;

        tableswitch($i1)
        {
            case 60: goto label2;
            case 61: goto label2;
            case 62: goto label2;
            default: goto label3;
        };

     label2:
        $r1 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.ptg.Ptg getComparisonToken()>();

        $r2 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.ParseNode concatExpression()>();

        $r5 = new org.apache.poi.ss.formula.ParseNode;

        specialinvoke $r5.<org.apache.poi.ss.formula.ParseNode: void <init>(org.apache.poi.ss.formula.ptg.Ptg,org.apache.poi.ss.formula.ParseNode,org.apache.poi.ss.formula.ParseNode)>($r1, r4, $r2);

        r4 = $r5;

        goto label1;

     label3:
        return r4;
    }

    private org.apache.poi.ss.formula.ptg.Ptg getComparisonToken()
    {
        org.apache.poi.ss.formula.ptg.ValueOperatorPtg $r1, $r2, $r3, $r4, $r5, $r6;
        int $i6, $i7, $i8, $i9;
        boolean $z0;
        org.apache.poi.ss.formula.FormulaParser r0;
        char $c0, $c1, $c2, $c3, $c4, $c5;

        r0 := @this: org.apache.poi.ss.formula.FormulaParser;

        $c0 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i6 = (int) $c0;

        if $i6 != 61 goto label1;

        $c5 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void Match(char)>($c5);

        $r6 = <org.apache.poi.ss.formula.ptg.EqualPtg: org.apache.poi.ss.formula.ptg.ValueOperatorPtg instance>;

        return $r6;

     label1:
        $c1 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i7 = (int) $c1;

        if $i7 != 62 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        $c2 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void Match(char)>($c2);

        if $z0 == 0 goto label5;

        $c4 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i8 = (int) $c4;

        if $i8 != 61 goto label4;

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void Match(char)>(61);

        $r5 = <org.apache.poi.ss.formula.ptg.GreaterEqualPtg: org.apache.poi.ss.formula.ptg.ValueOperatorPtg instance>;

        return $r5;

     label4:
        $r4 = <org.apache.poi.ss.formula.ptg.GreaterThanPtg: org.apache.poi.ss.formula.ptg.ValueOperatorPtg instance>;

        return $r4;

     label5:
        $c3 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i9 = (int) $c3;

        lookupswitch($i9)
        {
            case 61: goto label6;
            case 62: goto label7;
            default: goto label8;
        };

     label6:
        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void Match(char)>(61);

        $r2 = <org.apache.poi.ss.formula.ptg.LessEqualPtg: org.apache.poi.ss.formula.ptg.ValueOperatorPtg instance>;

        return $r2;

     label7:
        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void Match(char)>(62);

        $r1 = <org.apache.poi.ss.formula.ptg.NotEqualPtg: org.apache.poi.ss.formula.ptg.ValueOperatorPtg instance>;

        return $r1;

     label8:
        $r3 = <org.apache.poi.ss.formula.ptg.LessThanPtg: org.apache.poi.ss.formula.ptg.ValueOperatorPtg instance>;

        return $r3;
    }

    private org.apache.poi.ss.formula.ParseNode concatExpression()
    {
        org.apache.poi.ss.formula.FormulaParser r0;
        org.apache.poi.ss.formula.ptg.ValueOperatorPtg $r3;
        int $i1;
        char $c0;
        org.apache.poi.ss.formula.ParseNode $r1, r4, $r5;

        r0 := @this: org.apache.poi.ss.formula.FormulaParser;

        r4 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.ParseNode additiveExpression()>();

     label1:
        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void SkipWhite()>();

        $c0 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i1 = (int) $c0;

        if $i1 == 38 goto label2;

        goto label3;

     label2:
        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void Match(char)>(38);

        $r1 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.ParseNode additiveExpression()>();

        $r5 = new org.apache.poi.ss.formula.ParseNode;

        $r3 = <org.apache.poi.ss.formula.ptg.ConcatPtg: org.apache.poi.ss.formula.ptg.ValueOperatorPtg instance>;

        specialinvoke $r5.<org.apache.poi.ss.formula.ParseNode: void <init>(org.apache.poi.ss.formula.ptg.Ptg,org.apache.poi.ss.formula.ParseNode,org.apache.poi.ss.formula.ParseNode)>($r3, r4, $r1);

        r4 = $r5;

        goto label1;

     label3:
        return r4;
    }

    private org.apache.poi.ss.formula.ParseNode additiveExpression()
    {
        org.apache.poi.ss.formula.FormulaParser r0;
        org.apache.poi.ss.formula.ptg.ValueOperatorPtg r4;
        int $i1;
        char $c0;
        org.apache.poi.ss.formula.ParseNode $r1, r3, $r5;

        r0 := @this: org.apache.poi.ss.formula.FormulaParser;

        r3 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.ParseNode Term()>();

     label1:
        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void SkipWhite()>();

        $c0 = r0.<org.apache.poi.ss.formula.FormulaParser: char look>;

        $i1 = (int) $c0;

        lookupswitch($i1)
        {
            case 43: goto label2;
            case 45: goto label3;
            default: goto label4;
        };

     label2:
        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void Match(char)>(43);

        r4 = <org.apache.poi.ss.formula.ptg.AddPtg: org.apache.poi.ss.formula.ptg.ValueOperatorPtg instance>;

        goto label5;

     label3:
        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void Match(char)>(45);

        r4 = <org.apache.poi.ss.formula.ptg.SubtractPtg: org.apache.poi.ss.formula.ptg.ValueOperatorPtg instance>;

        goto label5;

     label4:
        return r3;

     label5:
        $r1 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.ParseNode Term()>();

        $r5 = new org.apache.poi.ss.formula.ParseNode;

        specialinvoke $r5.<org.apache.poi.ss.formula.ParseNode: void <init>(org.apache.poi.ss.formula.ptg.Ptg,org.apache.poi.ss.formula.ParseNode,org.apache.poi.ss.formula.ParseNode)>(r4, r3, $r1);

        r3 = $r5;

        goto label1;
    }

    private void parse()
    {
        int $i0, $i1, $i2, $i3;
        java.lang.String $r4, $r5, $r8, $r11;
        org.apache.poi.ss.formula.FormulaParseException $r12;
        org.apache.poi.ss.formula.FormulaParser r0;
        org.apache.poi.ss.formula.ParseNode $r1;
        java.lang.StringBuilder $r2, $r3, $r6, $r7, $r9, $r10;

        r0 := @this: org.apache.poi.ss.formula.FormulaParser;

        r0.<org.apache.poi.ss.formula.FormulaParser: int _pointer> = 0;

        specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: void GetChar()>();

        $r1 = specialinvoke r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.ParseNode unionExpression()>();

        r0.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.ParseNode _rootNode> = $r1;

        $i1 = r0.<org.apache.poi.ss.formula.FormulaParser: int _pointer>;

        $i0 = r0.<org.apache.poi.ss.formula.FormulaParser: int _formulaLength>;

        if $i1 > $i0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unused input [");

        $r4 = r0.<org.apache.poi.ss.formula.FormulaParser: java.lang.String _formulaString>;

        $i2 = r0.<org.apache.poi.ss.formula.FormulaParser: int _pointer>;

        $i3 = $i2 - 1;

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int)>($i3);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] after attempting to parse the formula [");

        $r8 = r0.<org.apache.poi.ss.formula.FormulaParser: java.lang.String _formulaString>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = new org.apache.poi.ss.formula.FormulaParseException;

        specialinvoke $r12.<org.apache.poi.ss.formula.FormulaParseException: void <init>(java.lang.String)>($r11);

        throw $r12;

     label1:
        return;
    }

    private org.apache.poi.ss.formula.ptg.Ptg[] getRPNPtg(int)
    {
        org.apache.poi.ss.formula.FormulaParser r1;
        org.apache.poi.ss.formula.ptg.Ptg[] $r4;
        int i0;
        org.apache.poi.ss.formula.ParseNode $r2, $r3;
        org.apache.poi.ss.formula.OperandClassTransformer $r0;

        r1 := @this: org.apache.poi.ss.formula.FormulaParser;

        i0 := @parameter0: int;

        $r0 = new org.apache.poi.ss.formula.OperandClassTransformer;

        specialinvoke $r0.<org.apache.poi.ss.formula.OperandClassTransformer: void <init>(int)>(i0);

        $r2 = r1.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.ParseNode _rootNode>;

        virtualinvoke $r0.<org.apache.poi.ss.formula.OperandClassTransformer: void transformFormula(org.apache.poi.ss.formula.ParseNode)>($r2);

        $r3 = r1.<org.apache.poi.ss.formula.FormulaParser: org.apache.poi.ss.formula.ParseNode _rootNode>;

        $r4 = staticinvoke <org.apache.poi.ss.formula.ParseNode: org.apache.poi.ss.formula.ptg.Ptg[] toTokenArray(org.apache.poi.ss.formula.ParseNode)>($r3);

        return $r4;
    }

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        <org.apache.poi.ss.formula.FormulaParser: char LF> = 10;

        <org.apache.poi.ss.formula.FormulaParser: char CR> = 13;

        <org.apache.poi.ss.formula.FormulaParser: char TAB> = 9;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(\\$?[A-Za-z]+)?(\\$?[0-9]+)?");

        <org.apache.poi.ss.formula.FormulaParser: java.util.regex.Pattern CELL_REF_PATTERN> = $r0;

        return;
    }
}
