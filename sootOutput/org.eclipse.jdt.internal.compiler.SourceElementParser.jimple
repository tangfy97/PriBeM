public class org.eclipse.jdt.internal.compiler.SourceElementParser extends org.eclipse.jdt.internal.core.util.CommentRecorderParser
{
    org.eclipse.jdt.internal.compiler.ISourceElementRequestor requestor;
    boolean reportReferenceInfo;
    boolean reportLocalDeclarations;
    org.eclipse.jdt.internal.compiler.util.HashtableOfObjectToInt sourceEnds;
    java.util.HashMap nodesToCategories;
    boolean useSourceJavadocParser;
    org.eclipse.jdt.internal.compiler.SourceElementNotifier notifier;

    public void <init>(org.eclipse.jdt.internal.compiler.ISourceElementRequestor, org.eclipse.jdt.internal.compiler.IProblemFactory, org.eclipse.jdt.internal.compiler.impl.CompilerOptions, boolean, boolean)
    {
        org.eclipse.jdt.internal.compiler.SourceElementParser r0;
        org.eclipse.jdt.internal.compiler.IProblemFactory r2;
        org.eclipse.jdt.internal.compiler.ISourceElementRequestor r1;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions r3;
        boolean z0, z1;

        r0 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.ISourceElementRequestor;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.IProblemFactory;

        r3 := @parameter2: org.eclipse.jdt.internal.compiler.impl.CompilerOptions;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: void <init>(org.eclipse.jdt.internal.compiler.ISourceElementRequestor,org.eclipse.jdt.internal.compiler.IProblemFactory,org.eclipse.jdt.internal.compiler.impl.CompilerOptions,boolean,boolean,boolean)>(r1, r2, r3, z0, z1, 1);

        return;
    }

    public void <init>(org.eclipse.jdt.internal.compiler.ISourceElementRequestor, org.eclipse.jdt.internal.compiler.IProblemFactory, org.eclipse.jdt.internal.compiler.impl.CompilerOptions, boolean, boolean, boolean)
    {
        org.eclipse.jdt.internal.compiler.SourceElementParser r0;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r1;
        java.util.HashMap $r6;
        org.eclipse.jdt.internal.compiler.util.HashtableOfObjectToInt $r5;
        org.eclipse.jdt.internal.compiler.ISourceElementRequestor r9, $r11;
        boolean z0, z1, z2;
        org.eclipse.jdt.internal.compiler.IProblemFactory r4;
        org.eclipse.jdt.internal.compiler.IErrorHandlingPolicy $r2, $r8;
        org.eclipse.jdt.internal.compiler.SourceElementNotifier $r10;
        org.eclipse.jdt.internal.compiler.SourceJavadocParser $r12;
        org.eclipse.jdt.internal.compiler.SourceElementParser$1 $r7;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions r3;

        r0 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        r9 := @parameter0: org.eclipse.jdt.internal.compiler.ISourceElementRequestor;

        r4 := @parameter1: org.eclipse.jdt.internal.compiler.IProblemFactory;

        r3 := @parameter2: org.eclipse.jdt.internal.compiler.impl.CompilerOptions;

        z1 := @parameter3: boolean;

        z0 := @parameter4: boolean;

        z2 := @parameter5: boolean;

        $r1 = new org.eclipse.jdt.internal.compiler.problem.ProblemReporter;

        $r2 = staticinvoke <org.eclipse.jdt.internal.compiler.DefaultErrorHandlingPolicies: org.eclipse.jdt.internal.compiler.IErrorHandlingPolicy exitAfterAllProblems()>();

        specialinvoke $r1.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void <init>(org.eclipse.jdt.internal.compiler.IErrorHandlingPolicy,org.eclipse.jdt.internal.compiler.impl.CompilerOptions,org.eclipse.jdt.internal.compiler.IProblemFactory)>($r2, r3, r4);

        specialinvoke r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: void <init>(org.eclipse.jdt.internal.compiler.problem.ProblemReporter,boolean)>($r1, z0);

        $r5 = new org.eclipse.jdt.internal.compiler.util.HashtableOfObjectToInt;

        specialinvoke $r5.<org.eclipse.jdt.internal.compiler.util.HashtableOfObjectToInt: void <init>()>();

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.util.HashtableOfObjectToInt sourceEnds> = $r5;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: java.util.HashMap nodesToCategories> = $r6;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean useSourceJavadocParser> = 1;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean reportLocalDeclarations> = z1;

        $r7 = new org.eclipse.jdt.internal.compiler.SourceElementParser$1;

        $r8 = staticinvoke <org.eclipse.jdt.internal.compiler.DefaultErrorHandlingPolicies: org.eclipse.jdt.internal.compiler.IErrorHandlingPolicy exitAfterAllProblems()>();

        specialinvoke $r7.<org.eclipse.jdt.internal.compiler.SourceElementParser$1: void <init>(org.eclipse.jdt.internal.compiler.SourceElementParser,org.eclipse.jdt.internal.compiler.IErrorHandlingPolicy,org.eclipse.jdt.internal.compiler.impl.CompilerOptions,org.eclipse.jdt.internal.compiler.IProblemFactory)>(r0, $r8, r3, r4);

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter> = $r7;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ISourceElementRequestor requestor> = r9;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options> = r3;

        $r10 = new org.eclipse.jdt.internal.compiler.SourceElementNotifier;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ISourceElementRequestor requestor>;

        specialinvoke $r10.<org.eclipse.jdt.internal.compiler.SourceElementNotifier: void <init>(org.eclipse.jdt.internal.compiler.ISourceElementRequestor,boolean)>($r11, z1);

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.SourceElementNotifier notifier> = $r10;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean useSourceJavadocParser> = z2;

        if z2 == 0 goto label1;

        $r12 = new org.eclipse.jdt.internal.compiler.SourceJavadocParser;

        specialinvoke $r12.<org.eclipse.jdt.internal.compiler.SourceJavadocParser: void <init>(org.eclipse.jdt.internal.compiler.parser.Parser)>(r0);

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.parser.JavadocParser javadocParser> = $r12;

     label1:
        return;
    }

    private void acceptJavadocTypeReference(org.eclipse.jdt.internal.compiler.ast.Expression)
    {
        org.eclipse.jdt.internal.compiler.SourceElementParser r1;
        org.eclipse.jdt.internal.compiler.ISourceElementRequestor $r3, $r5;
        char[][] $r2;
        org.eclipse.jdt.internal.compiler.ast.JavadocQualifiedTypeReference r7;
        org.eclipse.jdt.internal.compiler.ast.Expression r0;
        int $i0, $i1, $i2;
        char[] $r4;
        org.eclipse.jdt.internal.compiler.ast.JavadocSingleTypeReference r6;
        boolean $z0, $z1;

        r1 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ast.Expression;

        $z0 = r0 instanceof org.eclipse.jdt.internal.compiler.ast.JavadocSingleTypeReference;

        if $z0 == 0 goto label1;

        r6 = (org.eclipse.jdt.internal.compiler.ast.JavadocSingleTypeReference) r0;

        $r5 = r1.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ISourceElementRequestor requestor>;

        $r4 = r6.<org.eclipse.jdt.internal.compiler.ast.JavadocSingleTypeReference: char[] token>;

        $i2 = r6.<org.eclipse.jdt.internal.compiler.ast.JavadocSingleTypeReference: int sourceStart>;

        interfaceinvoke $r5.<org.eclipse.jdt.internal.compiler.ISourceElementRequestor: void acceptTypeReference(char[],int)>($r4, $i2);

        goto label2;

     label1:
        $z1 = r0 instanceof org.eclipse.jdt.internal.compiler.ast.JavadocQualifiedTypeReference;

        if $z1 == 0 goto label2;

        r7 = (org.eclipse.jdt.internal.compiler.ast.JavadocQualifiedTypeReference) r0;

        $r3 = r1.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ISourceElementRequestor requestor>;

        $r2 = r7.<org.eclipse.jdt.internal.compiler.ast.JavadocQualifiedTypeReference: char[][] tokens>;

        $i1 = r7.<org.eclipse.jdt.internal.compiler.ast.JavadocQualifiedTypeReference: int sourceStart>;

        $i0 = r7.<org.eclipse.jdt.internal.compiler.ast.JavadocQualifiedTypeReference: int sourceEnd>;

        interfaceinvoke $r3.<org.eclipse.jdt.internal.compiler.ISourceElementRequestor: void acceptTypeReference(char[][],int,int)>($r2, $i1, $i0);

     label2:
        return;
    }

    public void addUnknownRef(org.eclipse.jdt.internal.compiler.ast.NameReference)
    {
        org.eclipse.jdt.internal.compiler.SourceElementParser r1;
        org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference $r2;
        org.eclipse.jdt.internal.compiler.ISourceElementRequestor $r4, $r7;
        char[][] $r3;
        org.eclipse.jdt.internal.compiler.ast.NameReference r0;
        org.eclipse.jdt.internal.compiler.ast.SingleNameReference $r5;
        int $i0, $i1, $i2;
        char[] $r6;
        boolean $z0;

        r1 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ast.NameReference;

        $z0 = r0 instanceof org.eclipse.jdt.internal.compiler.ast.SingleNameReference;

        if $z0 == 0 goto label1;

        $r7 = r1.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ISourceElementRequestor requestor>;

        $r5 = (org.eclipse.jdt.internal.compiler.ast.SingleNameReference) r0;

        $r6 = $r5.<org.eclipse.jdt.internal.compiler.ast.SingleNameReference: char[] token>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.ast.NameReference: int sourceStart>;

        interfaceinvoke $r7.<org.eclipse.jdt.internal.compiler.ISourceElementRequestor: void acceptUnknownReference(char[],int)>($r6, $i2);

        goto label2;

     label1:
        $r4 = r1.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ISourceElementRequestor requestor>;

        $r2 = (org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference) r0;

        $r3 = $r2.<org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference: char[][] tokens>;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.ast.NameReference: int sourceStart>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.ast.NameReference: int sourceEnd>;

        interfaceinvoke $r4.<org.eclipse.jdt.internal.compiler.ISourceElementRequestor: void acceptUnknownReference(char[][],int,int)>($r3, $i1, $i0);

     label2:
        return;
    }

    public void checkComment()
    {
        org.eclipse.jdt.internal.compiler.ast.Javadoc $r3, $r4, $r5, $r43;
        char[][] $r10, $r29;
        org.eclipse.jdt.internal.compiler.ast.TypeReference[] r52;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r8, $r9, $r13, $r14, r53;
        org.eclipse.jdt.internal.compiler.ast.JavadocQualifiedTypeReference r55;
        org.eclipse.jdt.internal.compiler.ast.JavadocMessageSend r58;
        org.eclipse.jdt.internal.compiler.SourceElementParser r0;
        org.eclipse.jdt.internal.compiler.ISourceElementRequestor $r12, $r18, $r20, $r25, $r30, $r32;
        org.eclipse.jdt.internal.compiler.ast.JavadocAllocationExpression r59;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r1, $r34, $r37, $r46, $r48, $r50;
        org.eclipse.jdt.internal.compiler.ast.JavadocFieldReference r57;
        char[] $r11, $r17, $r19, $r24, $r31;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r6, $r7, $r15, $r16, $r33;
        org.eclipse.jdt.internal.compiler.ast.Expression $r21, $r22, $r23, $r26, $r27, $r28, r56;
        int[] $r35, $r38, $r47, $r49;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        org.eclipse.jdt.internal.compiler.parser.JavadocParser $r2, $r36, $r39, $r40, $r41, $r42, $r51;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20, $i21, i22, i23, i24, i25, i26, $i27, $i28, $i30, $i32;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r44, $r45;
        org.eclipse.jdt.internal.compiler.ast.JavadocSingleTypeReference r54;

        r0 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        $z0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean diet>;

        if $z0 == 0 goto label01;

        $i19 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int dietInt>;

        if $i19 == 0 goto label02;

     label01:
        $r1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i0 = $r1.<org.eclipse.jdt.internal.compiler.parser.Scanner: int commentPtr>;

        if $i0 < 0 goto label02;

        $i18 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int endStatementPosition>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int flushCommentsDefinedPriorTo(int)>($i18);

     label02:
        $r50 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        i20 = $r50.<org.eclipse.jdt.internal.compiler.parser.Scanner: int commentPtr>;

        $i21 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int modifiersSourceStart>;

        if $i21 < 0 goto label05;

        goto label04;

     label03:
        $i30 = (int) -1;

        i20 = i20 + $i30;

     label04:
        if i20 < 0 goto label05;

        $r48 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r49 = $r48.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStarts>;

        $i15 = $r49[i20];

        $i16 = staticinvoke <java.lang.Math: int abs(int)>($i15);

        $i17 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int modifiersSourceStart>;

        if $i16 > $i17 goto label03;

     label05:
        if i20 < 0 goto label14;

        $r34 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r35 = $r34.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStarts>;

        $i10 = $r35[0];

        $i11 = staticinvoke <java.lang.Math: int abs(int)>($i10);

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int modifiersSourceStart> = $i11;

        goto label07;

     label06:
        $i32 = (int) -1;

        i20 = i20 + $i32;

     label07:
        if i20 < 0 goto label08;

        $r46 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r47 = $r46.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStops>;

        $i14 = $r47[i20];

        if $i14 < 0 goto label06;

     label08:
        if i20 < 0 goto label14;

        $r36 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.parser.JavadocParser javadocParser>;

        if $r36 == null goto label14;

        $r37 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r38 = $r37.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] commentStops>;

        $i12 = $r38[i20];

        i22 = $i12 - 1;

        $r39 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.parser.JavadocParser javadocParser>;

        $z10 = $r39.<org.eclipse.jdt.internal.compiler.parser.JavadocParser: boolean shouldReportProblems>;

        if $z10 == 0 goto label11;

        $r51 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.parser.JavadocParser javadocParser>;

        $r45 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r45 == null goto label09;

        $i13 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int lastJavadocEnd>;

        if i22 > $i13 goto label09;

        $z12 = 0;

        goto label10;

     label09:
        $z12 = 1;

     label10:
        $r51.<org.eclipse.jdt.internal.compiler.parser.JavadocParser: boolean reportProblems> = $z12;

        goto label12;

     label11:
        $r40 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.parser.JavadocParser javadocParser>;

        $r40.<org.eclipse.jdt.internal.compiler.parser.JavadocParser: boolean reportProblems> = 0;

     label12:
        $r41 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.parser.JavadocParser javadocParser>;

        $z11 = virtualinvoke $r41.<org.eclipse.jdt.internal.compiler.parser.JavadocParser: boolean checkDeprecation(int)>(i20);

        if $z11 == 0 goto label13;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: void checkAndSetModifiers(int)>(1048576);

     label13:
        $r42 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.parser.JavadocParser javadocParser>;

        $r43 = $r42.<org.eclipse.jdt.internal.compiler.parser.JavadocParser: org.eclipse.jdt.internal.compiler.ast.Javadoc docComment>;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc> = $r43;

        $r44 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r44 != null goto label14;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int lastJavadocEnd> = i22;

     label14:
        $z13 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean reportReferenceInfo>;

        if $z13 == 0 goto label29;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.parser.JavadocParser javadocParser>;

        $z1 = $r2.<org.eclipse.jdt.internal.compiler.parser.JavadocParser: boolean checkDocComment>;

        if $z1 == 0 goto label29;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc>;

        if $r3 == null goto label29;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc>;

        r52 = $r4.<org.eclipse.jdt.internal.compiler.ast.Javadoc: org.eclipse.jdt.internal.compiler.ast.TypeReference[] exceptionReferences>;

        if r52 == null goto label19;

        i23 = 0;

        i24 = lengthof r52;

        goto label18;

     label15:
        r53 = r52[i23];

        $z8 = r53 instanceof org.eclipse.jdt.internal.compiler.ast.JavadocSingleTypeReference;

        if $z8 == 0 goto label16;

        r54 = (org.eclipse.jdt.internal.compiler.ast.JavadocSingleTypeReference) r53;

        $r32 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ISourceElementRequestor requestor>;

        $r31 = r54.<org.eclipse.jdt.internal.compiler.ast.JavadocSingleTypeReference: char[] token>;

        $i9 = r54.<org.eclipse.jdt.internal.compiler.ast.JavadocSingleTypeReference: int sourceStart>;

        interfaceinvoke $r32.<org.eclipse.jdt.internal.compiler.ISourceElementRequestor: void acceptTypeReference(char[],int)>($r31, $i9);

        goto label17;

     label16:
        $z9 = r53 instanceof org.eclipse.jdt.internal.compiler.ast.JavadocQualifiedTypeReference;

        if $z9 == 0 goto label17;

        r55 = (org.eclipse.jdt.internal.compiler.ast.JavadocQualifiedTypeReference) r53;

        $r30 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ISourceElementRequestor requestor>;

        $r29 = r55.<org.eclipse.jdt.internal.compiler.ast.JavadocQualifiedTypeReference: char[][] tokens>;

        $i8 = r55.<org.eclipse.jdt.internal.compiler.ast.JavadocQualifiedTypeReference: int sourceStart>;

        $i7 = r55.<org.eclipse.jdt.internal.compiler.ast.JavadocQualifiedTypeReference: int sourceEnd>;

        interfaceinvoke $r30.<org.eclipse.jdt.internal.compiler.ISourceElementRequestor: void acceptTypeReference(char[][],int,int)>($r29, $i8, $i7);

     label17:
        i23 = i23 + 1;

     label18:
        if i23 < i24 goto label15;

     label19:
        $r5 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc>;

        $r33 = $r5.<org.eclipse.jdt.internal.compiler.ast.Javadoc: org.eclipse.jdt.internal.compiler.ast.Expression[] seeReferences>;

        if $r33 == null goto label29;

        i25 = 0;

        i26 = lengthof $r33;

        goto label28;

     label20:
        r56 = $r33[i25];

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: void acceptJavadocTypeReference(org.eclipse.jdt.internal.compiler.ast.Expression)>(r56);

        $z2 = r56 instanceof org.eclipse.jdt.internal.compiler.ast.JavadocFieldReference;

        if $z2 == 0 goto label21;

        r57 = (org.eclipse.jdt.internal.compiler.ast.JavadocFieldReference) r56;

        $r25 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ISourceElementRequestor requestor>;

        $r24 = r57.<org.eclipse.jdt.internal.compiler.ast.JavadocFieldReference: char[] token>;

        $i6 = r57.<org.eclipse.jdt.internal.compiler.ast.JavadocFieldReference: int sourceStart>;

        interfaceinvoke $r25.<org.eclipse.jdt.internal.compiler.ISourceElementRequestor: void acceptFieldReference(char[],int)>($r24, $i6);

        $r26 = r57.<org.eclipse.jdt.internal.compiler.ast.JavadocFieldReference: org.eclipse.jdt.internal.compiler.ast.Expression receiver>;

        if $r26 == null goto label27;

        $r27 = r57.<org.eclipse.jdt.internal.compiler.ast.JavadocFieldReference: org.eclipse.jdt.internal.compiler.ast.Expression receiver>;

        $z7 = virtualinvoke $r27.<org.eclipse.jdt.internal.compiler.ast.Expression: boolean isThis()>();

        if $z7 != 0 goto label27;

        $r28 = r57.<org.eclipse.jdt.internal.compiler.ast.JavadocFieldReference: org.eclipse.jdt.internal.compiler.ast.Expression receiver>;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: void acceptJavadocTypeReference(org.eclipse.jdt.internal.compiler.ast.Expression)>($r28);

        goto label27;

     label21:
        $z3 = r56 instanceof org.eclipse.jdt.internal.compiler.ast.JavadocMessageSend;

        if $z3 == 0 goto label24;

        r58 = (org.eclipse.jdt.internal.compiler.ast.JavadocMessageSend) r56;

        $r15 = r58.<org.eclipse.jdt.internal.compiler.ast.JavadocMessageSend: org.eclipse.jdt.internal.compiler.ast.Expression[] arguments>;

        if $r15 != null goto label22;

        $i27 = 0;

        goto label23;

     label22:
        $r16 = r58.<org.eclipse.jdt.internal.compiler.ast.JavadocMessageSend: org.eclipse.jdt.internal.compiler.ast.Expression[] arguments>;

        $i27 = lengthof $r16;

     label23:
        $r18 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ISourceElementRequestor requestor>;

        $r17 = r58.<org.eclipse.jdt.internal.compiler.ast.JavadocMessageSend: char[] selector>;

        $i4 = r58.<org.eclipse.jdt.internal.compiler.ast.JavadocMessageSend: int sourceStart>;

        interfaceinvoke $r18.<org.eclipse.jdt.internal.compiler.ISourceElementRequestor: void acceptMethodReference(char[],int,int)>($r17, $i27, $i4);

        $r20 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ISourceElementRequestor requestor>;

        $r19 = r58.<org.eclipse.jdt.internal.compiler.ast.JavadocMessageSend: char[] selector>;

        $i5 = r58.<org.eclipse.jdt.internal.compiler.ast.JavadocMessageSend: int sourceStart>;

        interfaceinvoke $r20.<org.eclipse.jdt.internal.compiler.ISourceElementRequestor: void acceptConstructorReference(char[],int,int)>($r19, $i27, $i5);

        $r21 = r58.<org.eclipse.jdt.internal.compiler.ast.JavadocMessageSend: org.eclipse.jdt.internal.compiler.ast.Expression receiver>;

        if $r21 == null goto label27;

        $r22 = r58.<org.eclipse.jdt.internal.compiler.ast.JavadocMessageSend: org.eclipse.jdt.internal.compiler.ast.Expression receiver>;

        $z6 = virtualinvoke $r22.<org.eclipse.jdt.internal.compiler.ast.Expression: boolean isThis()>();

        if $z6 != 0 goto label27;

        $r23 = r58.<org.eclipse.jdt.internal.compiler.ast.JavadocMessageSend: org.eclipse.jdt.internal.compiler.ast.Expression receiver>;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: void acceptJavadocTypeReference(org.eclipse.jdt.internal.compiler.ast.Expression)>($r23);

        goto label27;

     label24:
        $z4 = r56 instanceof org.eclipse.jdt.internal.compiler.ast.JavadocAllocationExpression;

        if $z4 == 0 goto label27;

        r59 = (org.eclipse.jdt.internal.compiler.ast.JavadocAllocationExpression) r56;

        $r6 = r59.<org.eclipse.jdt.internal.compiler.ast.JavadocAllocationExpression: org.eclipse.jdt.internal.compiler.ast.Expression[] arguments>;

        if $r6 != null goto label25;

        $i28 = 0;

        goto label26;

     label25:
        $r7 = r59.<org.eclipse.jdt.internal.compiler.ast.JavadocAllocationExpression: org.eclipse.jdt.internal.compiler.ast.Expression[] arguments>;

        $i28 = lengthof $r7;

     label26:
        $r8 = r59.<org.eclipse.jdt.internal.compiler.ast.JavadocAllocationExpression: org.eclipse.jdt.internal.compiler.ast.TypeReference type>;

        if $r8 == null goto label27;

        $r9 = r59.<org.eclipse.jdt.internal.compiler.ast.JavadocAllocationExpression: org.eclipse.jdt.internal.compiler.ast.TypeReference type>;

        $r10 = virtualinvoke $r9.<org.eclipse.jdt.internal.compiler.ast.TypeReference: char[][] getParameterizedTypeName()>();

        $r12 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ISourceElementRequestor requestor>;

        $i1 = lengthof $r10;

        $i2 = $i1 - 1;

        $r11 = $r10[$i2];

        $i3 = r59.<org.eclipse.jdt.internal.compiler.ast.JavadocAllocationExpression: int sourceStart>;

        interfaceinvoke $r12.<org.eclipse.jdt.internal.compiler.ISourceElementRequestor: void acceptConstructorReference(char[],int,int)>($r11, $i28, $i3);

        $r13 = r59.<org.eclipse.jdt.internal.compiler.ast.JavadocAllocationExpression: org.eclipse.jdt.internal.compiler.ast.TypeReference type>;

        $z5 = virtualinvoke $r13.<org.eclipse.jdt.internal.compiler.ast.TypeReference: boolean isThis()>();

        if $z5 != 0 goto label27;

        $r14 = r59.<org.eclipse.jdt.internal.compiler.ast.JavadocAllocationExpression: org.eclipse.jdt.internal.compiler.ast.TypeReference type>;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: void acceptJavadocTypeReference(org.eclipse.jdt.internal.compiler.ast.Expression)>($r14);

     label27:
        i25 = i25 + 1;

     label28:
        if i25 < i26 goto label20;

     label29:
        return;
    }

    protected void classInstanceCreation(boolean)
    {
        org.eclipse.jdt.internal.compiler.SourceElementParser r0;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r1, $r7, $r8;
        org.eclipse.jdt.internal.compiler.ISourceElementRequestor $r10;
        char[][] $r6;
        org.eclipse.jdt.internal.compiler.ast.Expression $r2;
        int $i0, $i1, $i2;
        boolean z0, z1, $z2, $z3;
        org.eclipse.jdt.internal.compiler.ast.SingleTypeReference $r9;
        org.eclipse.jdt.internal.compiler.ast.AllocationExpression r3;
        org.eclipse.jdt.internal.compiler.ast.TypeReference r4, $r5;
        char[] $r11;

        r0 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        z1 := @parameter0: boolean;

        z0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean reportReferenceInfo>;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean reportReferenceInfo> = 0;

        specialinvoke r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: void classInstanceCreation(boolean)>(z1);

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean reportReferenceInfo> = z0;

        $z2 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean reportReferenceInfo>;

        if $z2 == 0 goto label5;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int expressionPtr>;

        $r2 = $r1[$i0];

        r3 = (org.eclipse.jdt.internal.compiler.ast.AllocationExpression) $r2;

        r4 = r3.<org.eclipse.jdt.internal.compiler.ast.AllocationExpression: org.eclipse.jdt.internal.compiler.ast.TypeReference type>;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ISourceElementRequestor requestor>;

        $z3 = r4 instanceof org.eclipse.jdt.internal.compiler.ast.SingleTypeReference;

        if $z3 == 0 goto label1;

        $r9 = (org.eclipse.jdt.internal.compiler.ast.SingleTypeReference) r4;

        $r11 = $r9.<org.eclipse.jdt.internal.compiler.ast.SingleTypeReference: char[] token>;

        goto label2;

     label1:
        $r5 = r3.<org.eclipse.jdt.internal.compiler.ast.AllocationExpression: org.eclipse.jdt.internal.compiler.ast.TypeReference type>;

        $r6 = virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.ast.TypeReference: char[][] getParameterizedTypeName()>();

        $r11 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[] concatWith(char[][],char)>($r6, 46);

     label2:
        $r7 = r3.<org.eclipse.jdt.internal.compiler.ast.AllocationExpression: org.eclipse.jdt.internal.compiler.ast.Expression[] arguments>;

        if $r7 != null goto label3;

        $i1 = 0;

        goto label4;

     label3:
        $r8 = r3.<org.eclipse.jdt.internal.compiler.ast.AllocationExpression: org.eclipse.jdt.internal.compiler.ast.Expression[] arguments>;

        $i1 = lengthof $r8;

     label4:
        $i2 = r3.<org.eclipse.jdt.internal.compiler.ast.AllocationExpression: int sourceStart>;

        interfaceinvoke $r10.<org.eclipse.jdt.internal.compiler.ISourceElementRequestor: void acceptConstructorReference(char[],int,int)>($r11, $i1, $i2);

     label5:
        return;
    }

    protected void consumeAnnotationAsModifier()
    {
        org.eclipse.jdt.internal.compiler.SourceElementParser r0;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r1;
        org.eclipse.jdt.internal.compiler.ISourceElementRequestor $r5;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r4;
        char[][] $r6;
        org.eclipse.jdt.internal.compiler.ast.Expression $r2;
        int $i0, $i1, $i2;
        org.eclipse.jdt.internal.compiler.ast.Annotation r3;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        specialinvoke r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: void consumeAnnotationAsModifier()>();

        $r1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int expressionPtr>;

        $r2 = $r1[$i0];

        r3 = (org.eclipse.jdt.internal.compiler.ast.Annotation) $r2;

        $z0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean reportReferenceInfo>;

        if $z0 == 0 goto label1;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ISourceElementRequestor requestor>;

        $r4 = r3.<org.eclipse.jdt.internal.compiler.ast.Annotation: org.eclipse.jdt.internal.compiler.ast.TypeReference type>;

        $r6 = virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.ast.TypeReference: char[][] getTypeName()>();

        $i2 = r3.<org.eclipse.jdt.internal.compiler.ast.Annotation: int sourceStart>;

        $i1 = r3.<org.eclipse.jdt.internal.compiler.ast.Annotation: int sourceEnd>;

        interfaceinvoke $r5.<org.eclipse.jdt.internal.compiler.ISourceElementRequestor: void acceptAnnotationTypeReference(char[][],int,int)>($r6, $i2, $i1);

     label1:
        return;
    }

    protected void consumeClassInstanceCreationExpressionQualifiedWithTypeArguments()
    {
        org.eclipse.jdt.internal.compiler.SourceElementParser r0;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r1, $r7, $r8;
        org.eclipse.jdt.internal.compiler.ISourceElementRequestor $r10;
        char[][] $r6;
        org.eclipse.jdt.internal.compiler.ast.Expression $r2;
        int $i0, $i1, $i2;
        boolean z0, $z1, $z2;
        org.eclipse.jdt.internal.compiler.ast.SingleTypeReference $r9;
        org.eclipse.jdt.internal.compiler.ast.AllocationExpression r3;
        org.eclipse.jdt.internal.compiler.ast.TypeReference r4, $r5;
        char[] $r11;

        r0 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        z0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean reportReferenceInfo>;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean reportReferenceInfo> = 0;

        specialinvoke r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: void consumeClassInstanceCreationExpressionQualifiedWithTypeArguments()>();

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean reportReferenceInfo> = z0;

        $z1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean reportReferenceInfo>;

        if $z1 == 0 goto label5;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int expressionPtr>;

        $r2 = $r1[$i0];

        r3 = (org.eclipse.jdt.internal.compiler.ast.AllocationExpression) $r2;

        r4 = r3.<org.eclipse.jdt.internal.compiler.ast.AllocationExpression: org.eclipse.jdt.internal.compiler.ast.TypeReference type>;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ISourceElementRequestor requestor>;

        $z2 = r4 instanceof org.eclipse.jdt.internal.compiler.ast.SingleTypeReference;

        if $z2 == 0 goto label1;

        $r9 = (org.eclipse.jdt.internal.compiler.ast.SingleTypeReference) r4;

        $r11 = $r9.<org.eclipse.jdt.internal.compiler.ast.SingleTypeReference: char[] token>;

        goto label2;

     label1:
        $r5 = r3.<org.eclipse.jdt.internal.compiler.ast.AllocationExpression: org.eclipse.jdt.internal.compiler.ast.TypeReference type>;

        $r6 = virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.ast.TypeReference: char[][] getParameterizedTypeName()>();

        $r11 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[] concatWith(char[][],char)>($r6, 46);

     label2:
        $r7 = r3.<org.eclipse.jdt.internal.compiler.ast.AllocationExpression: org.eclipse.jdt.internal.compiler.ast.Expression[] arguments>;

        if $r7 != null goto label3;

        $i1 = 0;

        goto label4;

     label3:
        $r8 = r3.<org.eclipse.jdt.internal.compiler.ast.AllocationExpression: org.eclipse.jdt.internal.compiler.ast.Expression[] arguments>;

        $i1 = lengthof $r8;

     label4:
        $i2 = r3.<org.eclipse.jdt.internal.compiler.ast.AllocationExpression: int sourceStart>;

        interfaceinvoke $r10.<org.eclipse.jdt.internal.compiler.ISourceElementRequestor: void acceptConstructorReference(char[],int,int)>($r11, $i1, $i2);

     label5:
        return;
    }

    protected void consumeAnnotationTypeDeclarationHeaderName()
    {
        int i0, $i1;
        org.eclipse.jdt.internal.compiler.SourceElementParser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        i0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int astPtr>;

        specialinvoke r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: void consumeAnnotationTypeDeclarationHeaderName()>();

        $i1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int astPtr>;

        if $i1 <= i0 goto label1;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: void rememberCategories()>();

     label1:
        return;
    }

    protected void consumeAnnotationTypeDeclarationHeaderNameWithTypeParameters()
    {
        int i0, $i1;
        org.eclipse.jdt.internal.compiler.SourceElementParser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        i0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int astPtr>;

        specialinvoke r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: void consumeAnnotationTypeDeclarationHeaderNameWithTypeParameters()>();

        $i1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int astPtr>;

        if $i1 <= i0 goto label1;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: void rememberCategories()>();

     label1:
        return;
    }

    protected void consumeClassHeaderName1()
    {
        int i0, $i1;
        org.eclipse.jdt.internal.compiler.SourceElementParser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        i0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int astPtr>;

        specialinvoke r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: void consumeClassHeaderName1()>();

        $i1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int astPtr>;

        if $i1 <= i0 goto label1;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: void rememberCategories()>();

     label1:
        return;
    }

    protected void consumeClassInstanceCreationExpressionWithTypeArguments()
    {
        org.eclipse.jdt.internal.compiler.SourceElementParser r0;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r1, $r7, $r8;
        org.eclipse.jdt.internal.compiler.ISourceElementRequestor $r10;
        char[][] $r6;
        org.eclipse.jdt.internal.compiler.ast.Expression $r2;
        int $i0, $i1, $i2;
        boolean z0, $z1, $z2;
        org.eclipse.jdt.internal.compiler.ast.SingleTypeReference $r9;
        org.eclipse.jdt.internal.compiler.ast.AllocationExpression r3;
        org.eclipse.jdt.internal.compiler.ast.TypeReference r4, $r5;
        char[] $r11;

        r0 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        z0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean reportReferenceInfo>;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean reportReferenceInfo> = 0;

        specialinvoke r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: void consumeClassInstanceCreationExpressionWithTypeArguments()>();

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean reportReferenceInfo> = z0;

        $z1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean reportReferenceInfo>;

        if $z1 == 0 goto label5;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int expressionPtr>;

        $r2 = $r1[$i0];

        r3 = (org.eclipse.jdt.internal.compiler.ast.AllocationExpression) $r2;

        r4 = r3.<org.eclipse.jdt.internal.compiler.ast.AllocationExpression: org.eclipse.jdt.internal.compiler.ast.TypeReference type>;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ISourceElementRequestor requestor>;

        $z2 = r4 instanceof org.eclipse.jdt.internal.compiler.ast.SingleTypeReference;

        if $z2 == 0 goto label1;

        $r9 = (org.eclipse.jdt.internal.compiler.ast.SingleTypeReference) r4;

        $r11 = $r9.<org.eclipse.jdt.internal.compiler.ast.SingleTypeReference: char[] token>;

        goto label2;

     label1:
        $r5 = r3.<org.eclipse.jdt.internal.compiler.ast.AllocationExpression: org.eclipse.jdt.internal.compiler.ast.TypeReference type>;

        $r6 = virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.ast.TypeReference: char[][] getParameterizedTypeName()>();

        $r11 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[] concatWith(char[][],char)>($r6, 46);

     label2:
        $r7 = r3.<org.eclipse.jdt.internal.compiler.ast.AllocationExpression: org.eclipse.jdt.internal.compiler.ast.Expression[] arguments>;

        if $r7 != null goto label3;

        $i1 = 0;

        goto label4;

     label3:
        $r8 = r3.<org.eclipse.jdt.internal.compiler.ast.AllocationExpression: org.eclipse.jdt.internal.compiler.ast.Expression[] arguments>;

        $i1 = lengthof $r8;

     label4:
        $i2 = r3.<org.eclipse.jdt.internal.compiler.ast.AllocationExpression: int sourceStart>;

        interfaceinvoke $r10.<org.eclipse.jdt.internal.compiler.ISourceElementRequestor: void acceptConstructorReference(char[],int,int)>($r11, $i1, $i2);

     label5:
        return;
    }

    protected void consumeConstructorHeaderName()
    {
        org.eclipse.jdt.internal.compiler.SourceElementParser r0;
        long l1;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r3;
        org.eclipse.jdt.internal.compiler.util.HashtableOfObjectToInt $r4;
        long[] $r1;
        int $i0, i2, i3, $i4, $i5;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r2;

        r0 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: long[] identifierPositionStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierPtr>;

        l1 = $r1[$i0];

        i2 = (int) l1;

        i3 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int astPtr>;

        specialinvoke r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: void consumeConstructorHeaderName()>();

        $i4 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int astPtr>;

        if $i4 <= i3 goto label1;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.util.HashtableOfObjectToInt sourceEnds>;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int astPtr>;

        $r3 = $r2[$i5];

        virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.util.HashtableOfObjectToInt: int put(java.lang.Object,int)>($r3, i2);

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: void rememberCategories()>();

     label1:
        return;
    }

    protected void consumeConstructorHeaderNameWithTypeParameters()
    {
        org.eclipse.jdt.internal.compiler.SourceElementParser r0;
        long l1;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r3;
        org.eclipse.jdt.internal.compiler.util.HashtableOfObjectToInt $r4;
        long[] $r1;
        int $i0, i2, i3, $i4, $i5;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r2;

        r0 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: long[] identifierPositionStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierPtr>;

        l1 = $r1[$i0];

        i2 = (int) l1;

        i3 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int astPtr>;

        specialinvoke r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: void consumeConstructorHeaderNameWithTypeParameters()>();

        $i4 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int astPtr>;

        if $i4 <= i3 goto label1;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.util.HashtableOfObjectToInt sourceEnds>;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int astPtr>;

        $r3 = $r2[$i5];

        virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.util.HashtableOfObjectToInt: int put(java.lang.Object,int)>($r3, i2);

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: void rememberCategories()>();

     label1:
        return;
    }

    protected void consumeEnumConstantWithClassBody()
    {
        org.eclipse.jdt.internal.compiler.SourceElementParser r0;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r4;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r2, $r5;
        org.eclipse.jdt.internal.compiler.util.HashtableOfObjectToInt $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r1, $r3;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        specialinvoke r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: void consumeEnumConstantWithClassBody()>();

        $i0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int currentToken>;

        if $i0 == 30 goto label1;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int currentToken>;

        if $i5 != 27 goto label2;

     label1:
        $r1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int astPtr>;

        $r2 = $r1[$i1];

        $z0 = $r2 instanceof org.eclipse.jdt.internal.compiler.ast.FieldDeclaration;

        if $z0 == 0 goto label2;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.util.HashtableOfObjectToInt sourceEnds>;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int astPtr>;

        $r5 = $r3[$i2];

        $r4 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i3 = $r4.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i4 = $i3 - 1;

        virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.util.HashtableOfObjectToInt: int put(java.lang.Object,int)>($r5, $i4);

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: void rememberCategories()>();

     label2:
        return;
    }

    protected void consumeEnumConstantNoClassBody()
    {
        org.eclipse.jdt.internal.compiler.SourceElementParser r0;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r4;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r2, $r5;
        org.eclipse.jdt.internal.compiler.util.HashtableOfObjectToInt $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r1, $r3;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        specialinvoke r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: void consumeEnumConstantNoClassBody()>();

        $i0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int currentToken>;

        if $i0 == 30 goto label1;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int currentToken>;

        if $i5 != 27 goto label2;

     label1:
        $r1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int astPtr>;

        $r2 = $r1[$i1];

        $z0 = $r2 instanceof org.eclipse.jdt.internal.compiler.ast.FieldDeclaration;

        if $z0 == 0 goto label2;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.util.HashtableOfObjectToInt sourceEnds>;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int astPtr>;

        $r5 = $r3[$i2];

        $r4 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i3 = $r4.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i4 = $i3 - 1;

        virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.util.HashtableOfObjectToInt: int put(java.lang.Object,int)>($r5, $i4);

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: void rememberCategories()>();

     label2:
        return;
    }

    protected void consumeEnumHeaderName()
    {
        int i0, $i1;
        org.eclipse.jdt.internal.compiler.SourceElementParser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        i0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int astPtr>;

        specialinvoke r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: void consumeEnumHeaderName()>();

        $i1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int astPtr>;

        if $i1 <= i0 goto label1;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: void rememberCategories()>();

     label1:
        return;
    }

    protected void consumeEnumHeaderNameWithTypeParameters()
    {
        int i0, $i1;
        org.eclipse.jdt.internal.compiler.SourceElementParser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        i0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int astPtr>;

        specialinvoke r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: void consumeEnumHeaderNameWithTypeParameters()>();

        $i1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int astPtr>;

        if $i1 <= i0 goto label1;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: void rememberCategories()>();

     label1:
        return;
    }

    protected void consumeExitVariableWithInitialization()
    {
        org.eclipse.jdt.internal.compiler.SourceElementParser r0;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r4;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r2, $r5;
        org.eclipse.jdt.internal.compiler.util.HashtableOfObjectToInt $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r1, $r3;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        specialinvoke r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: void consumeExitVariableWithInitialization()>();

        $i0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int currentToken>;

        if $i0 == 30 goto label1;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int currentToken>;

        if $i5 != 27 goto label2;

     label1:
        $r1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int astPtr>;

        $r2 = $r1[$i1];

        $z0 = $r2 instanceof org.eclipse.jdt.internal.compiler.ast.FieldDeclaration;

        if $z0 == 0 goto label2;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.util.HashtableOfObjectToInt sourceEnds>;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int astPtr>;

        $r5 = $r3[$i2];

        $r4 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i3 = $r4.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i4 = $i3 - 1;

        virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.util.HashtableOfObjectToInt: int put(java.lang.Object,int)>($r5, $i4);

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: void rememberCategories()>();

     label2:
        return;
    }

    protected void consumeExitVariableWithoutInitialization()
    {
        org.eclipse.jdt.internal.compiler.SourceElementParser r0;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r4;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r2, $r5;
        org.eclipse.jdt.internal.compiler.util.HashtableOfObjectToInt $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r1, $r3;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        specialinvoke r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: void consumeExitVariableWithoutInitialization()>();

        $i0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int currentToken>;

        if $i0 == 30 goto label1;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int currentToken>;

        if $i5 != 27 goto label2;

     label1:
        $r1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int astPtr>;

        $r2 = $r1[$i1];

        $z0 = $r2 instanceof org.eclipse.jdt.internal.compiler.ast.FieldDeclaration;

        if $z0 == 0 goto label2;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.util.HashtableOfObjectToInt sourceEnds>;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int astPtr>;

        $r5 = $r3[$i2];

        $r4 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i3 = $r4.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i4 = $i3 - 1;

        virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.util.HashtableOfObjectToInt: int put(java.lang.Object,int)>($r5, $i4);

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: void rememberCategories()>();

     label2:
        return;
    }

    protected void consumeFieldAccess(boolean)
    {
        org.eclipse.jdt.internal.compiler.SourceElementParser r0;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r1;
        org.eclipse.jdt.internal.compiler.ISourceElementRequestor $r5;
        org.eclipse.jdt.internal.compiler.ast.Expression $r2;
        int $i0, $i1;
        char[] $r4;
        org.eclipse.jdt.internal.compiler.ast.FieldReference r3;
        boolean z0, $z1;

        r0 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: void consumeFieldAccess(boolean)>(z0);

        $r1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int expressionPtr>;

        $r2 = $r1[$i0];

        r3 = (org.eclipse.jdt.internal.compiler.ast.FieldReference) $r2;

        $z1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean reportReferenceInfo>;

        if $z1 == 0 goto label1;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ISourceElementRequestor requestor>;

        $r4 = r3.<org.eclipse.jdt.internal.compiler.ast.FieldReference: char[] token>;

        $i1 = r3.<org.eclipse.jdt.internal.compiler.ast.FieldReference: int sourceStart>;

        interfaceinvoke $r5.<org.eclipse.jdt.internal.compiler.ISourceElementRequestor: void acceptFieldReference(char[],int)>($r4, $i1);

     label1:
        return;
    }

    protected void consumeFormalParameter(boolean)
    {
        org.eclipse.jdt.internal.compiler.SourceElementParser r0;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r1;
        int $i0;
        boolean z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: void consumeFormalParameter(boolean)>(z0);

        $r1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i0 = $r1.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int flushCommentsDefinedPriorTo(int)>($i0);

        return;
    }

    protected void consumeInterfaceHeaderName1()
    {
        int i0, $i1;
        org.eclipse.jdt.internal.compiler.SourceElementParser r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        i0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int astPtr>;

        specialinvoke r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: void consumeInterfaceHeaderName1()>();

        $i1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int astPtr>;

        if $i1 <= i0 goto label1;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: void rememberCategories()>();

     label1:
        return;
    }

    protected void consumeMemberValuePair()
    {
        org.eclipse.jdt.internal.compiler.SourceElementParser r0;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r2;
        org.eclipse.jdt.internal.compiler.ISourceElementRequestor $r5;
        org.eclipse.jdt.internal.compiler.ast.MemberValuePair r3;
        int $i0, $i1;
        char[] $r4;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r1;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        specialinvoke r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: void consumeMemberValuePair()>();

        $r1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int astPtr>;

        $r2 = $r1[$i0];

        r3 = (org.eclipse.jdt.internal.compiler.ast.MemberValuePair) $r2;

        $z0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean reportReferenceInfo>;

        if $z0 == 0 goto label1;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ISourceElementRequestor requestor>;

        $r4 = r3.<org.eclipse.jdt.internal.compiler.ast.MemberValuePair: char[] name>;

        $i1 = r3.<org.eclipse.jdt.internal.compiler.ast.MemberValuePair: int sourceStart>;

        interfaceinvoke $r5.<org.eclipse.jdt.internal.compiler.ISourceElementRequestor: void acceptMethodReference(char[],int,int)>($r4, 0, $i1);

     label1:
        return;
    }

    protected void consumeMarkerAnnotation()
    {
        org.eclipse.jdt.internal.compiler.SourceElementParser r0;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r1;
        org.eclipse.jdt.internal.compiler.ISourceElementRequestor $r5;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r4;
        char[][] $r6;
        org.eclipse.jdt.internal.compiler.ast.Expression $r2;
        int $i0, $i1, $i2;
        org.eclipse.jdt.internal.compiler.ast.Annotation r3;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        specialinvoke r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: void consumeMarkerAnnotation()>();

        $r1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int expressionPtr>;

        $r2 = $r1[$i0];

        r3 = (org.eclipse.jdt.internal.compiler.ast.Annotation) $r2;

        $z0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean reportReferenceInfo>;

        if $z0 == 0 goto label1;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ISourceElementRequestor requestor>;

        $r4 = r3.<org.eclipse.jdt.internal.compiler.ast.Annotation: org.eclipse.jdt.internal.compiler.ast.TypeReference type>;

        $r6 = virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.ast.TypeReference: char[][] getTypeName()>();

        $i2 = r3.<org.eclipse.jdt.internal.compiler.ast.Annotation: int sourceStart>;

        $i1 = r3.<org.eclipse.jdt.internal.compiler.ast.Annotation: int sourceEnd>;

        interfaceinvoke $r5.<org.eclipse.jdt.internal.compiler.ISourceElementRequestor: void acceptAnnotationTypeReference(char[][],int,int)>($r6, $i2, $i1);

     label1:
        return;
    }

    protected void consumeMethodHeaderName(boolean)
    {
        org.eclipse.jdt.internal.compiler.SourceElementParser r0;
        long l1;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r3;
        org.eclipse.jdt.internal.compiler.util.HashtableOfObjectToInt $r4;
        long[] $r1;
        int $i0, i2, i3, $i4, $i5;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r2;
        boolean z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: long[] identifierPositionStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierPtr>;

        l1 = $r1[$i0];

        i2 = (int) l1;

        i3 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int astPtr>;

        specialinvoke r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: void consumeMethodHeaderName(boolean)>(z0);

        $i4 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int astPtr>;

        if $i4 <= i3 goto label1;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.util.HashtableOfObjectToInt sourceEnds>;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int astPtr>;

        $r3 = $r2[$i5];

        virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.util.HashtableOfObjectToInt: int put(java.lang.Object,int)>($r3, i2);

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: void rememberCategories()>();

     label1:
        return;
    }

    protected void consumeMethodHeaderNameWithTypeParameters(boolean)
    {
        org.eclipse.jdt.internal.compiler.SourceElementParser r0;
        long l1;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r3;
        org.eclipse.jdt.internal.compiler.util.HashtableOfObjectToInt $r4;
        long[] $r1;
        int $i0, i2, i3, $i4, $i5;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r2;
        boolean z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: long[] identifierPositionStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierPtr>;

        l1 = $r1[$i0];

        i2 = (int) l1;

        i3 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int astPtr>;

        specialinvoke r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: void consumeMethodHeaderNameWithTypeParameters(boolean)>(z0);

        $i4 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int astPtr>;

        if $i4 <= i3 goto label1;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.util.HashtableOfObjectToInt sourceEnds>;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int astPtr>;

        $r3 = $r2[$i5];

        virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.util.HashtableOfObjectToInt: int put(java.lang.Object,int)>($r3, i2);

     label1:
        specialinvoke r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: void rememberCategories()>();

        return;
    }

    protected void consumeMethodInvocationName()
    {
        org.eclipse.jdt.internal.compiler.SourceElementParser r0;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r1, r4;
        long $l1, $l2;
        org.eclipse.jdt.internal.compiler.ISourceElementRequestor $r6;
        org.eclipse.jdt.internal.compiler.ast.Expression $r2;
        org.eclipse.jdt.internal.compiler.ast.MessageSend r3;
        int $i0, $i3, $i4;
        char[] $r5;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        specialinvoke r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: void consumeMethodInvocationName()>();

        $r1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int expressionPtr>;

        $r2 = $r1[$i0];

        r3 = (org.eclipse.jdt.internal.compiler.ast.MessageSend) $r2;

        r4 = r3.<org.eclipse.jdt.internal.compiler.ast.MessageSend: org.eclipse.jdt.internal.compiler.ast.Expression[] arguments>;

        $z0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean reportReferenceInfo>;

        if $z0 == 0 goto label3;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ISourceElementRequestor requestor>;

        $r5 = r3.<org.eclipse.jdt.internal.compiler.ast.MessageSend: char[] selector>;

        if r4 != null goto label1;

        $i4 = 0;

        goto label2;

     label1:
        $i4 = lengthof r4;

     label2:
        $l1 = r3.<org.eclipse.jdt.internal.compiler.ast.MessageSend: long nameSourcePosition>;

        $l2 = $l1 >>> 32;

        $i3 = (int) $l2;

        interfaceinvoke $r6.<org.eclipse.jdt.internal.compiler.ISourceElementRequestor: void acceptMethodReference(char[],int,int)>($r5, $i4, $i3);

     label3:
        return;
    }

    protected void consumeMethodInvocationNameWithTypeArguments()
    {
        org.eclipse.jdt.internal.compiler.SourceElementParser r0;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r1, r4;
        long $l1, $l2;
        org.eclipse.jdt.internal.compiler.ISourceElementRequestor $r6;
        org.eclipse.jdt.internal.compiler.ast.Expression $r2;
        org.eclipse.jdt.internal.compiler.ast.MessageSend r3;
        int $i0, $i3, $i4;
        char[] $r5;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        specialinvoke r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: void consumeMethodInvocationNameWithTypeArguments()>();

        $r1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int expressionPtr>;

        $r2 = $r1[$i0];

        r3 = (org.eclipse.jdt.internal.compiler.ast.MessageSend) $r2;

        r4 = r3.<org.eclipse.jdt.internal.compiler.ast.MessageSend: org.eclipse.jdt.internal.compiler.ast.Expression[] arguments>;

        $z0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean reportReferenceInfo>;

        if $z0 == 0 goto label3;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ISourceElementRequestor requestor>;

        $r5 = r3.<org.eclipse.jdt.internal.compiler.ast.MessageSend: char[] selector>;

        if r4 != null goto label1;

        $i4 = 0;

        goto label2;

     label1:
        $i4 = lengthof r4;

     label2:
        $l1 = r3.<org.eclipse.jdt.internal.compiler.ast.MessageSend: long nameSourcePosition>;

        $l2 = $l1 >>> 32;

        $i3 = (int) $l2;

        interfaceinvoke $r6.<org.eclipse.jdt.internal.compiler.ISourceElementRequestor: void acceptMethodReference(char[],int,int)>($r5, $i4, $i3);

     label3:
        return;
    }

    protected void consumeMethodInvocationPrimary()
    {
        org.eclipse.jdt.internal.compiler.SourceElementParser r0;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r1, r4;
        long $l1, $l2;
        org.eclipse.jdt.internal.compiler.ISourceElementRequestor $r6;
        org.eclipse.jdt.internal.compiler.ast.Expression $r2;
        org.eclipse.jdt.internal.compiler.ast.MessageSend r3;
        int $i0, $i3, $i4;
        char[] $r5;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        specialinvoke r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: void consumeMethodInvocationPrimary()>();

        $r1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int expressionPtr>;

        $r2 = $r1[$i0];

        r3 = (org.eclipse.jdt.internal.compiler.ast.MessageSend) $r2;

        r4 = r3.<org.eclipse.jdt.internal.compiler.ast.MessageSend: org.eclipse.jdt.internal.compiler.ast.Expression[] arguments>;

        $z0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean reportReferenceInfo>;

        if $z0 == 0 goto label3;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ISourceElementRequestor requestor>;

        $r5 = r3.<org.eclipse.jdt.internal.compiler.ast.MessageSend: char[] selector>;

        if r4 != null goto label1;

        $i4 = 0;

        goto label2;

     label1:
        $i4 = lengthof r4;

     label2:
        $l1 = r3.<org.eclipse.jdt.internal.compiler.ast.MessageSend: long nameSourcePosition>;

        $l2 = $l1 >>> 32;

        $i3 = (int) $l2;

        interfaceinvoke $r6.<org.eclipse.jdt.internal.compiler.ISourceElementRequestor: void acceptMethodReference(char[],int,int)>($r5, $i4, $i3);

     label3:
        return;
    }

    protected void consumeMethodInvocationPrimaryWithTypeArguments()
    {
        org.eclipse.jdt.internal.compiler.SourceElementParser r0;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r1, r4;
        long $l1, $l2;
        org.eclipse.jdt.internal.compiler.ISourceElementRequestor $r6;
        org.eclipse.jdt.internal.compiler.ast.Expression $r2;
        org.eclipse.jdt.internal.compiler.ast.MessageSend r3;
        int $i0, $i3, $i4;
        char[] $r5;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        specialinvoke r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: void consumeMethodInvocationPrimaryWithTypeArguments()>();

        $r1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int expressionPtr>;

        $r2 = $r1[$i0];

        r3 = (org.eclipse.jdt.internal.compiler.ast.MessageSend) $r2;

        r4 = r3.<org.eclipse.jdt.internal.compiler.ast.MessageSend: org.eclipse.jdt.internal.compiler.ast.Expression[] arguments>;

        $z0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean reportReferenceInfo>;

        if $z0 == 0 goto label3;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ISourceElementRequestor requestor>;

        $r5 = r3.<org.eclipse.jdt.internal.compiler.ast.MessageSend: char[] selector>;

        if r4 != null goto label1;

        $i4 = 0;

        goto label2;

     label1:
        $i4 = lengthof r4;

     label2:
        $l1 = r3.<org.eclipse.jdt.internal.compiler.ast.MessageSend: long nameSourcePosition>;

        $l2 = $l1 >>> 32;

        $i3 = (int) $l2;

        interfaceinvoke $r6.<org.eclipse.jdt.internal.compiler.ISourceElementRequestor: void acceptMethodReference(char[],int,int)>($r5, $i4, $i3);

     label3:
        return;
    }

    protected void consumeMethodInvocationSuper()
    {
        org.eclipse.jdt.internal.compiler.SourceElementParser r0;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r1, r4;
        long $l1, $l2;
        org.eclipse.jdt.internal.compiler.ISourceElementRequestor $r6;
        org.eclipse.jdt.internal.compiler.ast.Expression $r2;
        org.eclipse.jdt.internal.compiler.ast.MessageSend r3;
        int $i0, $i3, $i4;
        char[] $r5;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        specialinvoke r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: void consumeMethodInvocationSuper()>();

        $r1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int expressionPtr>;

        $r2 = $r1[$i0];

        r3 = (org.eclipse.jdt.internal.compiler.ast.MessageSend) $r2;

        r4 = r3.<org.eclipse.jdt.internal.compiler.ast.MessageSend: org.eclipse.jdt.internal.compiler.ast.Expression[] arguments>;

        $z0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean reportReferenceInfo>;

        if $z0 == 0 goto label3;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ISourceElementRequestor requestor>;

        $r5 = r3.<org.eclipse.jdt.internal.compiler.ast.MessageSend: char[] selector>;

        if r4 != null goto label1;

        $i4 = 0;

        goto label2;

     label1:
        $i4 = lengthof r4;

     label2:
        $l1 = r3.<org.eclipse.jdt.internal.compiler.ast.MessageSend: long nameSourcePosition>;

        $l2 = $l1 >>> 32;

        $i3 = (int) $l2;

        interfaceinvoke $r6.<org.eclipse.jdt.internal.compiler.ISourceElementRequestor: void acceptMethodReference(char[],int,int)>($r5, $i4, $i3);

     label3:
        return;
    }

    protected void consumeMethodInvocationSuperWithTypeArguments()
    {
        org.eclipse.jdt.internal.compiler.SourceElementParser r0;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r1, r4;
        long $l1, $l2;
        org.eclipse.jdt.internal.compiler.ISourceElementRequestor $r6;
        org.eclipse.jdt.internal.compiler.ast.Expression $r2;
        org.eclipse.jdt.internal.compiler.ast.MessageSend r3;
        int $i0, $i3, $i4;
        char[] $r5;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        specialinvoke r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: void consumeMethodInvocationSuperWithTypeArguments()>();

        $r1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int expressionPtr>;

        $r2 = $r1[$i0];

        r3 = (org.eclipse.jdt.internal.compiler.ast.MessageSend) $r2;

        r4 = r3.<org.eclipse.jdt.internal.compiler.ast.MessageSend: org.eclipse.jdt.internal.compiler.ast.Expression[] arguments>;

        $z0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean reportReferenceInfo>;

        if $z0 == 0 goto label3;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ISourceElementRequestor requestor>;

        $r5 = r3.<org.eclipse.jdt.internal.compiler.ast.MessageSend: char[] selector>;

        if r4 != null goto label1;

        $i4 = 0;

        goto label2;

     label1:
        $i4 = lengthof r4;

     label2:
        $l1 = r3.<org.eclipse.jdt.internal.compiler.ast.MessageSend: long nameSourcePosition>;

        $l2 = $l1 >>> 32;

        $i3 = (int) $l2;

        interfaceinvoke $r6.<org.eclipse.jdt.internal.compiler.ISourceElementRequestor: void acceptMethodReference(char[],int,int)>($r5, $i4, $i3);

     label3:
        return;
    }

    protected void consumeNormalAnnotation()
    {
        org.eclipse.jdt.internal.compiler.SourceElementParser r0;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r1;
        org.eclipse.jdt.internal.compiler.ISourceElementRequestor $r5;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r4;
        char[][] $r6;
        org.eclipse.jdt.internal.compiler.ast.Expression $r2;
        int $i0, $i1, $i2;
        org.eclipse.jdt.internal.compiler.ast.Annotation r3;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        specialinvoke r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: void consumeNormalAnnotation()>();

        $r1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int expressionPtr>;

        $r2 = $r1[$i0];

        r3 = (org.eclipse.jdt.internal.compiler.ast.Annotation) $r2;

        $z0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean reportReferenceInfo>;

        if $z0 == 0 goto label1;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ISourceElementRequestor requestor>;

        $r4 = r3.<org.eclipse.jdt.internal.compiler.ast.Annotation: org.eclipse.jdt.internal.compiler.ast.TypeReference type>;

        $r6 = virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.ast.TypeReference: char[][] getTypeName()>();

        $i2 = r3.<org.eclipse.jdt.internal.compiler.ast.Annotation: int sourceStart>;

        $i1 = r3.<org.eclipse.jdt.internal.compiler.ast.Annotation: int sourceEnd>;

        interfaceinvoke $r5.<org.eclipse.jdt.internal.compiler.ISourceElementRequestor: void acceptAnnotationTypeReference(char[][],int,int)>($r6, $i2, $i1);

     label1:
        return;
    }

    protected void consumeSingleMemberAnnotation()
    {
        org.eclipse.jdt.internal.compiler.SourceElementParser r0;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r1;
        org.eclipse.jdt.internal.compiler.ISourceElementRequestor $r5;
        org.eclipse.jdt.internal.compiler.ast.SingleMemberAnnotation r3;
        org.eclipse.jdt.internal.compiler.ast.Expression $r2;
        int $i0, $i1;
        char[] $r4;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        specialinvoke r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: void consumeSingleMemberAnnotation()>();

        $r1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ast.Expression[] expressionStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int expressionPtr>;

        $r2 = $r1[$i0];

        r3 = (org.eclipse.jdt.internal.compiler.ast.SingleMemberAnnotation) $r2;

        $z0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean reportReferenceInfo>;

        if $z0 == 0 goto label1;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ISourceElementRequestor requestor>;

        $r4 = <org.eclipse.jdt.internal.compiler.lookup.TypeConstants: char[] VALUE>;

        $i1 = r3.<org.eclipse.jdt.internal.compiler.ast.SingleMemberAnnotation: int sourceStart>;

        interfaceinvoke $r5.<org.eclipse.jdt.internal.compiler.ISourceElementRequestor: void acceptMethodReference(char[],int,int)>($r4, 0, $i1);

     label1:
        return;
    }

    protected void consumeSingleStaticImportDeclarationName()
    {
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r23;
        char[][] r2, $r4, $r8, $r10, r15, $r16;
        byte $b27;
        int[] $r1, $r7;
        boolean $z0, $z1;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r21;
        org.eclipse.jdt.internal.compiler.SourceElementParser r0;
        long $l17, $l18, $l21, $l26;
        org.eclipse.jdt.internal.compiler.ISourceElementRequestor $r12, $r13, $r14, $r18;
        long[] r3, $r5, $r9, $r17;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, i19, $i20, i22, $i23, $i24, $i25, $i28, $i29, $i30, $i31, $i33, $i34, $i36;
        org.eclipse.jdt.internal.compiler.ast.ImportReference $r6;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r22, $r24;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r19, $r20, $r25;
        char[] r11;

        r0 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int[] identifierLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierLengthPtr> = $i1;

        $i2 = $r1[$i0];

        r2 = newarray (char[])[$i2];

        $i3 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierPtr>;

        $i4 = $i3 - $i2;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierPtr> = $i4;

        r3 = newarray (long)[$i2];

        $r4 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: char[][] identifierStack>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierPtr>;

        $i6 = $i5 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, $i6, r2, 0, $i2);

        $r5 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: long[] identifierPositionStack>;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierPtr>;

        $i8 = $i7 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i8, r3, 0, $i2);

        $r6 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ast.ImportReference newImportReference(char[][],long[],boolean,int)>(r2, r3, 0, 8);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r6);

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int modifiers> = 0;

        $i33 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int modifiersSourceStart> = $i33;

        $i9 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int currentToken>;

        if $i9 != 27 goto label1;

        $r24 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i30 = $r24.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i31 = $i30 - 1;

        $r6.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd> = $i31;

        goto label2;

     label1:
        $i10 = $r6.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int sourceEnd>;

        $r6.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd> = $i10;

     label2:
        $i11 = $r6.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd>;

        $r6.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationEnd> = $i11;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int[] intStack>;

        $i12 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int intPtr>;

        $i13 = $i12 - 1;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int intPtr> = $i13;

        $i14 = $r7[$i12];

        $r6.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceStart> = $i14;

        $z0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean statementRecoveryActivated>;

        if $z0 != 0 goto label3;

        $r21 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $l26 = $r21.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long sourceLevel>;

        $b27 = $l26 cmp 3211264L;

        $i34 = (int) $b27;

        if $i34 >= 0 goto label3;

        $i29 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int lastErrorEndPositionBeforeRecovery>;

        $r22 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i28 = $r22.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        if $i29 >= $i28 goto label3;

        $r6.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int modifiers> = 0;

        $r23 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r23.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void invalidUsageOfStaticImports(org.eclipse.jdt.internal.compiler.ast.ImportReference)>($r6);

     label3:
        $r25 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r25 == null goto label4;

        $i24 = $r6.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd>;

        $i25 = $i24 + 1;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int lastCheckPoint> = $i25;

        $r19 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r20 = virtualinvoke $r19.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.ImportReference,int)>($r6, 0);

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement> = $r20;

        $i36 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int lastIgnoredToken> = $i36;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean restartRecovery> = 1;

     label4:
        $z1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean reportReferenceInfo>;

        if $z1 == 0 goto label5;

        $r8 = $r6.<org.eclipse.jdt.internal.compiler.ast.ImportReference: char[][] tokens>;

        $i15 = lengthof $r8;

        i16 = $i15 - 1;

        $r9 = $r6.<org.eclipse.jdt.internal.compiler.ast.ImportReference: long[] sourcePositions>;

        $l17 = $r9[i16];

        $l18 = $l17 >>> 32;

        i19 = (int) $l18;

        $r10 = $r6.<org.eclipse.jdt.internal.compiler.ast.ImportReference: char[][] tokens>;

        r11 = $r10[i16];

        $r12 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ISourceElementRequestor requestor>;

        interfaceinvoke $r12.<org.eclipse.jdt.internal.compiler.ISourceElementRequestor: void acceptFieldReference(char[],int)>(r11, i19);

        $r13 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ISourceElementRequestor requestor>;

        interfaceinvoke $r13.<org.eclipse.jdt.internal.compiler.ISourceElementRequestor: void acceptMethodReference(char[],int,int)>(r11, 0, i19);

        $r14 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ISourceElementRequestor requestor>;

        interfaceinvoke $r14.<org.eclipse.jdt.internal.compiler.ISourceElementRequestor: void acceptTypeReference(char[],int)>(r11, i19);

        if i16 <= 0 goto label5;

        r15 = newarray (char[])[i16];

        $r16 = $r6.<org.eclipse.jdt.internal.compiler.ast.ImportReference: char[][] tokens>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r16, 0, r15, 0, i16);

        $r17 = $r6.<org.eclipse.jdt.internal.compiler.ast.ImportReference: long[] sourcePositions>;

        $i20 = i16 - 1;

        $l21 = $r17[$i20];

        i22 = (int) $l21;

        $r18 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ISourceElementRequestor requestor>;

        $i23 = $r6.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int sourceStart>;

        interfaceinvoke $r18.<org.eclipse.jdt.internal.compiler.ISourceElementRequestor: void acceptTypeReference(char[][],int,int)>(r15, $i23, i22);

     label5:
        return;
    }

    protected void consumeSingleTypeImportDeclarationName()
    {
        char[][] r2, $r4, $r9;
        int[] $r1, $r7;
        boolean $z0;
        org.eclipse.jdt.internal.compiler.SourceElementParser r0;
        org.eclipse.jdt.internal.compiler.ISourceElementRequestor $r10;
        long[] r3, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i22;
        org.eclipse.jdt.internal.compiler.ast.ImportReference $r6;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r13;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r8, $r11, $r12;

        r0 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int[] identifierLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierLengthPtr> = $i1;

        $i2 = $r1[$i0];

        r2 = newarray (char[])[$i2];

        $i3 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierPtr>;

        $i4 = $i3 - $i2;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierPtr> = $i4;

        r3 = newarray (long)[$i2];

        $r4 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: char[][] identifierStack>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierPtr>;

        $i6 = $i5 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, $i6, r2, 0, $i2);

        $r5 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: long[] identifierPositionStack>;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierPtr>;

        $i8 = $i7 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i8, r3, 0, $i2);

        $r6 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ast.ImportReference newImportReference(char[][],long[],boolean,int)>(r2, r3, 0, 0);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r6);

        $i9 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int currentToken>;

        if $i9 != 27 goto label1;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i19 = $r13.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i20 = $i19 - 1;

        $r6.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd> = $i20;

        goto label2;

     label1:
        $i10 = $r6.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int sourceEnd>;

        $r6.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd> = $i10;

     label2:
        $i11 = $r6.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd>;

        $r6.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationEnd> = $i11;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int[] intStack>;

        $i12 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int intPtr>;

        $i13 = $i12 - 1;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int intPtr> = $i13;

        $i14 = $r7[$i12];

        $r6.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceStart> = $i14;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r8 == null goto label3;

        $i17 = $r6.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd>;

        $i18 = $i17 + 1;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int lastCheckPoint> = $i18;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r12 = virtualinvoke $r11.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.ImportReference,int)>($r6, 0);

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement> = $r12;

        $i22 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int lastIgnoredToken> = $i22;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean restartRecovery> = 1;

     label3:
        $z0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean reportReferenceInfo>;

        if $z0 == 0 goto label4;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ISourceElementRequestor requestor>;

        $r9 = $r6.<org.eclipse.jdt.internal.compiler.ast.ImportReference: char[][] tokens>;

        $i16 = $r6.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int sourceStart>;

        $i15 = $r6.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int sourceEnd>;

        interfaceinvoke $r10.<org.eclipse.jdt.internal.compiler.ISourceElementRequestor: void acceptTypeReference(char[][],int,int)>($r9, $i16, $i15);

     label4:
        return;
    }

    protected void consumeStaticImportOnDemandDeclarationName()
    {
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r14;
        char[][] r2, $r4, $r8;
        byte $b20;
        int[] $r1, $r7;
        boolean $z0, $z1;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r12;
        org.eclipse.jdt.internal.compiler.SourceElementParser r0;
        long $l19;
        org.eclipse.jdt.internal.compiler.ISourceElementRequestor $r9;
        long[] r3, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i21, $i22, $i23, $i24, $i26, $i27, $i29;
        org.eclipse.jdt.internal.compiler.ast.ImportReference $r17;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r13, $r15;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r10, $r11, $r16;

        r0 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int[] identifierLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierLengthPtr> = $i1;

        $i2 = $r1[$i0];

        r2 = newarray (char[])[$i2];

        $i3 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierPtr>;

        $i4 = $i3 - $i2;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierPtr> = $i4;

        r3 = newarray (long)[$i2];

        $r4 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: char[][] identifierStack>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierPtr>;

        $i6 = $i5 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, $i6, r2, 0, $i2);

        $r5 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: long[] identifierPositionStack>;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierPtr>;

        $i8 = $i7 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i8, r3, 0, $i2);

        $r17 = new org.eclipse.jdt.internal.compiler.ast.ImportReference;

        specialinvoke $r17.<org.eclipse.jdt.internal.compiler.ast.ImportReference: void <init>(char[][],long[],boolean,int)>(r2, r3, 1, 8);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r17);

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int modifiers> = 0;

        $i26 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int modifiersSourceStart> = $i26;

        $i9 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int currentToken>;

        if $i9 != 27 goto label1;

        $r15 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i23 = $r15.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i24 = $i23 - 1;

        $r17.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd> = $i24;

        goto label2;

     label1:
        $i10 = $r17.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int sourceEnd>;

        $r17.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd> = $i10;

     label2:
        $i11 = $r17.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd>;

        $r17.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationEnd> = $i11;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int[] intStack>;

        $i12 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int intPtr>;

        $i13 = $i12 - 1;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int intPtr> = $i13;

        $i14 = $r7[$i12];

        $r17.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceStart> = $i14;

        $z0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean statementRecoveryActivated>;

        if $z0 != 0 goto label3;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $l19 = $r12.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long sourceLevel>;

        $b20 = $l19 cmp 3211264L;

        $i27 = (int) $b20;

        if $i27 >= 0 goto label3;

        $i22 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int lastErrorEndPositionBeforeRecovery>;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i21 = $r13.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        if $i22 >= $i21 goto label3;

        $r17.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int modifiers> = 0;

        $r14 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r14.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void invalidUsageOfStaticImports(org.eclipse.jdt.internal.compiler.ast.ImportReference)>($r17);

     label3:
        $r16 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r16 == null goto label4;

        $i17 = $r17.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd>;

        $i18 = $i17 + 1;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int lastCheckPoint> = $i18;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r11 = virtualinvoke $r10.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.ImportReference,int)>($r17, 0);

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement> = $r11;

        $i29 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int lastIgnoredToken> = $i29;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean restartRecovery> = 1;

     label4:
        $z1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean reportReferenceInfo>;

        if $z1 == 0 goto label5;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ISourceElementRequestor requestor>;

        $r8 = $r17.<org.eclipse.jdt.internal.compiler.ast.ImportReference: char[][] tokens>;

        $i16 = $r17.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int sourceStart>;

        $i15 = $r17.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int sourceEnd>;

        interfaceinvoke $r9.<org.eclipse.jdt.internal.compiler.ISourceElementRequestor: void acceptTypeReference(char[][],int,int)>($r8, $i16, $i15);

     label5:
        return;
    }

    protected void consumeTypeImportOnDemandDeclarationName()
    {
        char[][] r2, $r4, $r9;
        int[] $r1, $r7;
        boolean $z0;
        org.eclipse.jdt.internal.compiler.SourceElementParser r0;
        org.eclipse.jdt.internal.compiler.ISourceElementRequestor $r10;
        long[] r3, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i22;
        org.eclipse.jdt.internal.compiler.ast.ImportReference $r14;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r13;
        org.eclipse.jdt.internal.compiler.parser.RecoveredElement $r8, $r11, $r12;

        r0 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int[] identifierLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierLengthPtr> = $i1;

        $i2 = $r1[$i0];

        r2 = newarray (char[])[$i2];

        $i3 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierPtr>;

        $i4 = $i3 - $i2;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierPtr> = $i4;

        r3 = newarray (long)[$i2];

        $r4 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: char[][] identifierStack>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierPtr>;

        $i6 = $i5 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, $i6, r2, 0, $i2);

        $r5 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: long[] identifierPositionStack>;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierPtr>;

        $i8 = $i7 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i8, r3, 0, $i2);

        $r14 = new org.eclipse.jdt.internal.compiler.ast.ImportReference;

        specialinvoke $r14.<org.eclipse.jdt.internal.compiler.ast.ImportReference: void <init>(char[][],long[],boolean,int)>(r2, r3, 1, 0);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: void pushOnAstStack(org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r14);

        $i9 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int currentToken>;

        if $i9 != 27 goto label1;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i19 = $r13.<org.eclipse.jdt.internal.compiler.parser.Scanner: int currentPosition>;

        $i20 = $i19 - 1;

        $r14.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd> = $i20;

        goto label2;

     label1:
        $i10 = $r14.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int sourceEnd>;

        $r14.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd> = $i10;

     label2:
        $i11 = $r14.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd>;

        $r14.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationEnd> = $i11;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int[] intStack>;

        $i12 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int intPtr>;

        $i13 = $i12 - 1;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int intPtr> = $i13;

        $i14 = $r7[$i12];

        $r14.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceStart> = $i14;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        if $r8 == null goto label3;

        $i17 = $r14.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int declarationSourceEnd>;

        $i18 = $i17 + 1;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int lastCheckPoint> = $i18;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement>;

        $r12 = virtualinvoke $r11.<org.eclipse.jdt.internal.compiler.parser.RecoveredElement: org.eclipse.jdt.internal.compiler.parser.RecoveredElement add(org.eclipse.jdt.internal.compiler.ast.ImportReference,int)>($r14, 0);

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.parser.RecoveredElement currentElement> = $r12;

        $i22 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int lastIgnoredToken> = $i22;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean restartRecovery> = 1;

     label3:
        $z0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean reportReferenceInfo>;

        if $z0 == 0 goto label4;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ISourceElementRequestor requestor>;

        $r9 = $r14.<org.eclipse.jdt.internal.compiler.ast.ImportReference: char[][] tokens>;

        $i16 = $r14.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int sourceStart>;

        $i15 = $r14.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int sourceEnd>;

        interfaceinvoke $r10.<org.eclipse.jdt.internal.compiler.ISourceElementRequestor: void acceptUnknownReference(char[][],int,int)>($r9, $i16, $i15);

     label4:
        return;
    }

    public org.eclipse.jdt.internal.compiler.ast.MethodDeclaration convertToMethodDeclaration(org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration, org.eclipse.jdt.internal.compiler.CompilationResult)
    {
        org.eclipse.jdt.internal.compiler.SourceElementParser r0;
        org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration r1;
        org.eclipse.jdt.internal.compiler.CompilationResult r2;
        java.util.HashMap $r5, $r7;
        org.eclipse.jdt.internal.compiler.util.HashtableOfObjectToInt $r4, $r8;
        char[][] $r9;
        int $i0, $i2;
        org.eclipse.jdt.internal.compiler.ast.MethodDeclaration $r3;
        java.lang.Object $r6;

        r0 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.CompilationResult;

        $r3 = specialinvoke r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.ast.MethodDeclaration convertToMethodDeclaration(org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration,org.eclipse.jdt.internal.compiler.CompilationResult)>(r1, r2);

        $r4 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.util.HashtableOfObjectToInt sourceEnds>;

        $i0 = virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.util.HashtableOfObjectToInt: int removeKey(java.lang.Object)>(r1);

        $i2 = (int) -1;

        if $i0 == $i2 goto label1;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.util.HashtableOfObjectToInt sourceEnds>;

        virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.util.HashtableOfObjectToInt: int put(java.lang.Object,int)>($r3, $i0);

     label1:
        $r5 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: java.util.HashMap nodesToCategories>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

        $r9 = (char[][]) $r6;

        if $r9 == null goto label2;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: java.util.HashMap nodesToCategories>;

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r9);

     label2:
        return $r3;
    }

    protected org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration endParse(int)
    {
        org.eclipse.jdt.internal.compiler.SourceElementParser r0;
        int i0;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r1, $r2;

        r0 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        i0 := @parameter0: int;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnit>;

        if $r1 == null goto label1;

        $r2 = specialinvoke r0.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration endParse(int)>(i0);

        return $r2;

     label1:
        return null;
    }

    public org.eclipse.jdt.internal.compiler.ast.TypeReference getTypeReference(int)
    {
        char[][] $r4, $r10, $r13, $r16, $r19, $r25, $r33, r36;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r3, $r30;
        org.eclipse.jdt.internal.compiler.SourceElementParser r0;
        org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference $r12;
        org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference $r18;
        long $l29, $l35;
        org.eclipse.jdt.internal.compiler.ISourceElementRequestor $r5, $r8, $r14, $r17, $r23, $r29, $r32;
        org.eclipse.jdt.internal.compiler.ast.SingleTypeReference $r24;
        char[] $r7, $r20, $r22, $r26, $r28;
        int[] $r1, $r2, $r9, $r31, $r34;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference r35;
        org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference $r15;
        long[] $r11, $r21, $r27, r37;
        org.eclipse.jdt.internal.compiler.ast.ParameterizedQualifiedTypeReference $r6;
        int $i0, $i1, i2, $i3, $i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i30, $i31, $i32, $i33, $i34, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, i49;

        r0 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        i5 := @parameter0: int;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int[] identifierLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierLengthPtr> = $i1;

        i2 = $r1[$i0];

        if i2 >= 0 goto label04;

        $i37 = neg i2;

        $r30 = staticinvoke <org.eclipse.jdt.internal.compiler.ast.TypeReference: org.eclipse.jdt.internal.compiler.ast.TypeReference baseTypeReference(int,int)>($i37, i5);

        $r31 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int[] intStack>;

        $i38 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int intPtr>;

        $i39 = $i38 - 1;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int intPtr> = $i39;

        $i40 = $r31[$i38];

        $r30.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceStart> = $i40;

        if i5 != 0 goto label01;

        $r34 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int[] intStack>;

        $i46 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int intPtr>;

        $i47 = $i46 - 1;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int intPtr> = $i47;

        $i48 = $r34[$i46];

        $r30.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceEnd> = $i48;

        goto label02;

     label01:
        $i41 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int intPtr>;

        $i42 = $i41 - 1;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int intPtr> = $i42;

        $i43 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int endPosition>;

        $r30.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceEnd> = $i43;

     label02:
        $z5 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean reportReferenceInfo>;

        if $z5 == 0 goto label03;

        $r32 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ISourceElementRequestor requestor>;

        $r33 = virtualinvoke $r30.<org.eclipse.jdt.internal.compiler.ast.TypeReference: char[][] getParameterizedTypeName()>();

        $i45 = $r30.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceStart>;

        $i44 = $r30.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceEnd>;

        interfaceinvoke $r32.<org.eclipse.jdt.internal.compiler.ISourceElementRequestor: void acceptTypeReference(char[][],int,int)>($r33, $i45, $i44);

     label03:
        return $r30;

     label04:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int[] genericsIdentifiersLengthStack>;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int genericsIdentifiersLengthPtr>;

        $i4 = $i3 - 1;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int genericsIdentifiersLengthPtr> = $i4;

        i49 = $r2[$i3];

        if i2 != i49 goto label05;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int[] genericsLengthStack>;

        $i9 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int genericsLengthPtr>;

        $i10 = $r9[$i9];

        if $i10 == 0 goto label08;

     label05:
        $r3 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ast.TypeReference getTypeReferenceForGenericType(int,int,int)>(i5, i2, i49);

        $z0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean reportReferenceInfo>;

        if $z0 == 0 goto label07;

        if i2 != 1 goto label06;

        if i49 != 1 goto label06;

        r35 = (org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference) $r3;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ISourceElementRequestor requestor>;

        $r7 = r35.<org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference: char[] token>;

        $i8 = r35.<org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference: int sourceStart>;

        interfaceinvoke $r8.<org.eclipse.jdt.internal.compiler.ISourceElementRequestor: void acceptTypeReference(char[],int)>($r7, $i8);

        goto label07;

     label06:
        $r6 = (org.eclipse.jdt.internal.compiler.ast.ParameterizedQualifiedTypeReference) $r3;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ISourceElementRequestor requestor>;

        $r4 = $r6.<org.eclipse.jdt.internal.compiler.ast.ParameterizedQualifiedTypeReference: char[][] tokens>;

        $i7 = $r6.<org.eclipse.jdt.internal.compiler.ast.ParameterizedQualifiedTypeReference: int sourceStart>;

        $i6 = $r6.<org.eclipse.jdt.internal.compiler.ast.ParameterizedQualifiedTypeReference: int sourceEnd>;

        interfaceinvoke $r5.<org.eclipse.jdt.internal.compiler.ISourceElementRequestor: void acceptTypeReference(char[][],int,int)>($r4, $i7, $i6);

     label07:
        return $r3;

     label08:
        if i2 != 1 goto label12;

        $i24 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int genericsLengthPtr>;

        $i25 = $i24 - 1;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int genericsLengthPtr> = $i25;

        if i5 != 0 goto label10;

        $r24 = new org.eclipse.jdt.internal.compiler.ast.SingleTypeReference;

        $r25 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: char[][] identifierStack>;

        $i32 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierPtr>;

        $r26 = $r25[$i32];

        $r27 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: long[] identifierPositionStack>;

        $i33 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierPtr>;

        $i34 = $i33 - 1;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierPtr> = $i34;

        $l35 = $r27[$i33];

        specialinvoke $r24.<org.eclipse.jdt.internal.compiler.ast.SingleTypeReference: void <init>(char[],long)>($r26, $l35);

        $z4 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean reportReferenceInfo>;

        if $z4 == 0 goto label09;

        $r29 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ISourceElementRequestor requestor>;

        $r28 = $r24.<org.eclipse.jdt.internal.compiler.ast.SingleTypeReference: char[] token>;

        $i36 = $r24.<org.eclipse.jdt.internal.compiler.ast.SingleTypeReference: int sourceStart>;

        interfaceinvoke $r29.<org.eclipse.jdt.internal.compiler.ISourceElementRequestor: void acceptTypeReference(char[],int)>($r28, $i36);

     label09:
        return $r24;

     label10:
        $r18 = new org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference;

        $r19 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: char[][] identifierStack>;

        $i26 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierPtr>;

        $r20 = $r19[$i26];

        $r21 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: long[] identifierPositionStack>;

        $i27 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierPtr>;

        $i28 = $i27 - 1;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierPtr> = $i28;

        $l29 = $r21[$i27];

        specialinvoke $r18.<org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference: void <init>(char[],int,long)>($r20, i5, $l29);

        $i30 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int endPosition>;

        $r18.<org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference: int sourceEnd> = $i30;

        $z3 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean reportReferenceInfo>;

        if $z3 == 0 goto label11;

        $r23 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ISourceElementRequestor requestor>;

        $r22 = $r18.<org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference: char[] token>;

        $i31 = $r18.<org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference: int sourceStart>;

        interfaceinvoke $r23.<org.eclipse.jdt.internal.compiler.ISourceElementRequestor: void acceptTypeReference(char[],int)>($r22, $i31);

     label11:
        return $r18;

     label12:
        $i11 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int genericsLengthPtr>;

        $i12 = $i11 - 1;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int genericsLengthPtr> = $i12;

        r36 = newarray (char[])[i2];

        $i13 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierPtr>;

        $i14 = $i13 - i2;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierPtr> = $i14;

        r37 = newarray (long)[i2];

        $r10 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: char[][] identifierStack>;

        $i15 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierPtr>;

        $i16 = $i15 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, $i16, r36, 0, i2);

        $r11 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: long[] identifierPositionStack>;

        $i17 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierPtr>;

        $i18 = $i17 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, $i18, r37, 0, i2);

        if i5 != 0 goto label14;

        $r15 = new org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference;

        specialinvoke $r15.<org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference: void <init>(char[][],long[])>(r36, r37);

        $z2 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean reportReferenceInfo>;

        if $z2 == 0 goto label13;

        $r17 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ISourceElementRequestor requestor>;

        $r16 = $r15.<org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference: char[][] tokens>;

        $i23 = $r15.<org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference: int sourceStart>;

        $i22 = $r15.<org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference: int sourceEnd>;

        interfaceinvoke $r17.<org.eclipse.jdt.internal.compiler.ISourceElementRequestor: void acceptTypeReference(char[][],int,int)>($r16, $i23, $i22);

     label13:
        return $r15;

     label14:
        $r12 = new org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference;

        specialinvoke $r12.<org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference: void <init>(char[][],int,long[])>(r36, i5, r37);

        $i19 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int endPosition>;

        $r12.<org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference: int sourceEnd> = $i19;

        $z1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean reportReferenceInfo>;

        if $z1 == 0 goto label15;

        $r14 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ISourceElementRequestor requestor>;

        $r13 = $r12.<org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference: char[][] tokens>;

        $i21 = $r12.<org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference: int sourceStart>;

        $i20 = $r12.<org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference: int sourceEnd>;

        interfaceinvoke $r14.<org.eclipse.jdt.internal.compiler.ISourceElementRequestor: void acceptTypeReference(char[][],int,int)>($r13, $i21, $i20);

     label15:
        return $r12;
    }

    public org.eclipse.jdt.internal.compiler.ast.NameReference getUnspecifiedReference()
    {
        org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference $r7;
        char[][] $r2, $r8, r12;
        int[] $r1;
        boolean $z0, $z1;
        org.eclipse.jdt.internal.compiler.ast.SingleNameReference $r11;
        org.eclipse.jdt.internal.compiler.SourceElementParser r0;
        long $l11, $l12, $l15, $l21;
        long[] r3, $r4, $r5, $r6, $r10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i13, $i14, $i16, $i17, $i18, $i19, $i20;
        char[] $r9;

        r0 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int[] identifierLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierLengthPtr> = $i1;

        $i2 = $r1[$i0];

        if $i2 != 1 goto label2;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: char[][] identifierStack>;

        $i18 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierPtr>;

        $r9 = $r8[$i18];

        $r10 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: long[] identifierPositionStack>;

        $i19 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierPtr>;

        $i20 = $i19 - 1;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierPtr> = $i20;

        $l21 = $r10[$i19];

        $r11 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ast.SingleNameReference newSingleNameReference(char[],long)>($r9, $l21);

        $z1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean reportReferenceInfo>;

        if $z1 == 0 goto label1;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: void addUnknownRef(org.eclipse.jdt.internal.compiler.ast.NameReference)>($r11);

     label1:
        return $r11;

     label2:
        r12 = newarray (char[])[$i2];

        $i3 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierPtr>;

        $i4 = $i3 - $i2;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierPtr> = $i4;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: char[][] identifierStack>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierPtr>;

        $i6 = $i5 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i6, r12, 0, $i2);

        r3 = newarray (long)[$i2];

        $r4 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: long[] identifierPositionStack>;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierPtr>;

        $i8 = $i7 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, $i8, r3, 0, $i2);

        $r5 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: long[] identifierPositionStack>;

        $i9 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierPtr>;

        $i10 = $i9 + 1;

        $l11 = $r5[$i10];

        $l12 = $l11 >> 32;

        $i17 = (int) $l12;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: long[] identifierPositionStack>;

        $i13 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierPtr>;

        $i14 = $i13 + $i2;

        $l15 = $r6[$i14];

        $i16 = (int) $l15;

        $r7 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference newQualifiedNameReference(char[][],long[],int,int)>(r12, r3, $i17, $i16);

        $z0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean reportReferenceInfo>;

        if $z0 == 0 goto label3;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: void addUnknownRef(org.eclipse.jdt.internal.compiler.ast.NameReference)>($r7);

     label3:
        return $r7;
    }

    public org.eclipse.jdt.internal.compiler.ast.NameReference getUnspecifiedReferenceOptimized()
    {
        org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference $r7;
        char[][] $r2, $r8, r12;
        int[] $r1;
        boolean $z0, $z1;
        org.eclipse.jdt.internal.compiler.ast.SingleNameReference $r11;
        org.eclipse.jdt.internal.compiler.SourceElementParser r0;
        long $l11, $l12, $l15, $l25;
        long[] r3, $r4, $r5, $r6, $r10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i13, $i14, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i26, $i27, $i28, $i29, $i31, $i33;
        char[] $r9;

        r0 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int[] identifierLengthStack>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierLengthPtr>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierLengthPtr> = $i1;

        $i2 = $r1[$i0];

        if $i2 != 1 goto label2;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: char[][] identifierStack>;

        $i22 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierPtr>;

        $r9 = $r8[$i22];

        $r10 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: long[] identifierPositionStack>;

        $i23 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierPtr>;

        $i24 = $i23 - 1;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierPtr> = $i24;

        $l25 = $r10[$i23];

        $r11 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ast.SingleNameReference newSingleNameReference(char[],long)>($r9, $l25);

        $i26 = $r11.<org.eclipse.jdt.internal.compiler.ast.SingleNameReference: int bits>;

        $i31 = (int) -8;

        $i27 = $i26 & $i31;

        $r11.<org.eclipse.jdt.internal.compiler.ast.SingleNameReference: int bits> = $i27;

        $i28 = $r11.<org.eclipse.jdt.internal.compiler.ast.SingleNameReference: int bits>;

        $i29 = $i28 | 3;

        $r11.<org.eclipse.jdt.internal.compiler.ast.SingleNameReference: int bits> = $i29;

        $z1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean reportReferenceInfo>;

        if $z1 == 0 goto label1;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: void addUnknownRef(org.eclipse.jdt.internal.compiler.ast.NameReference)>($r11);

     label1:
        return $r11;

     label2:
        r12 = newarray (char[])[$i2];

        $i3 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierPtr>;

        $i4 = $i3 - $i2;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierPtr> = $i4;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: char[][] identifierStack>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierPtr>;

        $i6 = $i5 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i6, r12, 0, $i2);

        r3 = newarray (long)[$i2];

        $r4 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: long[] identifierPositionStack>;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierPtr>;

        $i8 = $i7 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, $i8, r3, 0, $i2);

        $r5 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: long[] identifierPositionStack>;

        $i9 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierPtr>;

        $i10 = $i9 + 1;

        $l11 = $r5[$i10];

        $l12 = $l11 >> 32;

        $i17 = (int) $l12;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: long[] identifierPositionStack>;

        $i13 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int identifierPtr>;

        $i14 = $i13 + $i2;

        $l15 = $r6[$i14];

        $i16 = (int) $l15;

        $r7 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference newQualifiedNameReference(char[][],long[],int,int)>(r12, r3, $i17, $i16);

        $i18 = $r7.<org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference: int bits>;

        $i33 = (int) -8;

        $i19 = $i18 & $i33;

        $r7.<org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference: int bits> = $i19;

        $i20 = $r7.<org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference: int bits>;

        $i21 = $i20 | 3;

        $r7.<org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference: int bits> = $i21;

        $z0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean reportReferenceInfo>;

        if $z0 == 0 goto label3;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: void addUnknownRef(org.eclipse.jdt.internal.compiler.ast.NameReference)>($r7);

     label3:
        return $r7;
    }

    protected org.eclipse.jdt.internal.compiler.ast.ImportReference newImportReference(char[][], long[], boolean, int)
    {
        long[] r2;
        org.eclipse.jdt.internal.compiler.SourceElementParser r3;
        org.eclipse.jdt.internal.compiler.ast.ImportReference $r0;
        int i0;
        char[][] r1;
        boolean z0;

        r3 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        r1 := @parameter0: char[][];

        r2 := @parameter1: long[];

        z0 := @parameter2: boolean;

        i0 := @parameter3: int;

        $r0 = new org.eclipse.jdt.internal.compiler.ast.ImportReference;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.ast.ImportReference: void <init>(char[][],long[],boolean,int)>(r1, r2, z0, i0);

        return $r0;
    }

    protected org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference newQualifiedNameReference(char[][], long[], int, int)
    {
        org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference $r0;
        long[] r2;
        org.eclipse.jdt.internal.compiler.SourceElementParser r3;
        int i0, i1;
        char[][] r1;

        r3 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        r1 := @parameter0: char[][];

        r2 := @parameter1: long[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r0 = new org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference: void <init>(char[][],long[],int,int)>(r1, r2, i0, i1);

        return $r0;
    }

    protected org.eclipse.jdt.internal.compiler.ast.SingleNameReference newSingleNameReference(char[], long)
    {
        org.eclipse.jdt.internal.compiler.SourceElementParser r2;
        org.eclipse.jdt.internal.compiler.ast.SingleNameReference $r0;
        char[] r1;
        long l0;

        r2 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        r1 := @parameter0: char[];

        l0 := @parameter1: long;

        $r0 = new org.eclipse.jdt.internal.compiler.ast.SingleNameReference;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.ast.SingleNameReference: void <init>(char[],long)>(r1, l0);

        return $r0;
    }

    public org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration parseCompilationUnit(org.eclipse.jdt.internal.compiler.env.ICompilationUnit, boolean, org.eclipse.core.runtime.IProgressMonitor)
    {
        org.eclipse.jdt.internal.compiler.util.HashtableOfObjectToInt $r20;
        org.eclipse.core.runtime.OperationCanceledException $r23;
        int[] $r10;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        org.eclipse.jdt.internal.compiler.CompilationResult $r22;
        org.eclipse.core.runtime.IProgressMonitor r5;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r3;
        org.eclipse.jdt.internal.compiler.env.ICompilationUnit r2;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r4, r15;
        java.lang.Throwable $r13, $r24;
        org.eclipse.jdt.internal.compiler.SourceElementParser r0;
        java.util.HashMap $r21;
        org.eclipse.jdt.internal.compiler.ISourceElementRequestor $r9;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r12;
        org.eclipse.jdt.internal.compiler.problem.AbortCompilation $r14;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r6, $r7, $r8, $r16, $r18, $r19;
        org.eclipse.jdt.internal.compiler.SourceElementNotifier $r17;

        r0 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.env.ICompilationUnit;

        z1 := @parameter1: boolean;

        r5 := @parameter2: org.eclipse.core.runtime.IProgressMonitor;

        z0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean diet>;

        r15 = null;

     label01:
        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean diet> = 1;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean reportReferenceInfo> = z1;

        $r22 = new org.eclipse.jdt.internal.compiler.CompilationResult;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.impl.CompilerOptions options>;

        $i0 = $r3.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int maxProblemsPerUnit>;

        specialinvoke $r22.<org.eclipse.jdt.internal.compiler.CompilationResult: void <init>(org.eclipse.jdt.internal.compiler.env.ICompilationUnit,int,int,int)>(r2, 0, 0, $i0);

        $r4 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration parse(org.eclipse.jdt.internal.compiler.env.ICompilationUnit,org.eclipse.jdt.internal.compiler.CompilationResult)>(r2, $r22);

        r15 = $r4;

        if r5 == null goto label02;

        $z4 = interfaceinvoke r5.<org.eclipse.core.runtime.IProgressMonitor: boolean isCanceled()>();

        if $z4 == 0 goto label02;

        $r23 = new org.eclipse.core.runtime.OperationCanceledException;

        $r12 = <org.eclipse.jdt.internal.core.util.Messages: java.lang.String operation_cancelled>;

        specialinvoke $r23.<org.eclipse.core.runtime.OperationCanceledException: void <init>(java.lang.String)>($r12);

        $r24 = (java.lang.Throwable) $r23;

        throw $r24;

     label02:
        $r6 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $z2 = $r6.<org.eclipse.jdt.internal.compiler.parser.Scanner: boolean recordLineSeparator>;

        if $z2 == 0 goto label03;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ISourceElementRequestor requestor>;

        $r10 = virtualinvoke $r22.<org.eclipse.jdt.internal.compiler.CompilationResult: int[] getLineSeparatorPositions()>();

        interfaceinvoke $r9.<org.eclipse.jdt.internal.compiler.ISourceElementRequestor: void acceptLineSeparatorPositions(int[])>($r10);

     label03:
        $r7 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i1 = $r7.<org.eclipse.jdt.internal.compiler.parser.Scanner: int initialPosition>;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i2 = $r8.<org.eclipse.jdt.internal.compiler.parser.Scanner: int eofPosition>;

        $z3 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean reportLocalDeclarations>;

        if $z3 != 0 goto label04;

        if z1 == 0 goto label05;

     label04:
        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean diet> = 0;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: void getMethodBodies(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)>($r4);

     label05:
        $r16 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        virtualinvoke $r16.<org.eclipse.jdt.internal.compiler.parser.Scanner: void resetTo(int,int)>($i1, $i2);

        $r17 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.SourceElementNotifier notifier>;

        $r18 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i3 = $r18.<org.eclipse.jdt.internal.compiler.parser.Scanner: int initialPosition>;

        $r19 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i4 = $r19.<org.eclipse.jdt.internal.compiler.parser.Scanner: int eofPosition>;

        $z5 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean reportReferenceInfo>;

        $r20 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.util.HashtableOfObjectToInt sourceEnds>;

        $r21 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: java.util.HashMap nodesToCategories>;

        virtualinvoke $r17.<org.eclipse.jdt.internal.compiler.SourceElementNotifier: void notifySourceElementRequestor(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,int,int,boolean,org.eclipse.jdt.internal.compiler.util.HashtableOfObjectToInt,java.util.Map)>($r4, $i3, $i4, $z5, $r20, $r21);

     label06:
        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean diet> = z0;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: void reset()>();

        return $r4;

     label07:
        $r14 := @caughtexception;

     label08:
        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean diet> = z0;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: void reset()>();

        goto label10;

     label09:
        $r13 := @caughtexception;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean diet> = z0;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: void reset()>();

        throw $r13;

     label10:
        return r15;

        catch org.eclipse.jdt.internal.compiler.problem.AbortCompilation from label01 to label06 with label07;
        catch java.lang.Throwable from label01 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
    }

    private void rememberCategories()
    {
        org.eclipse.jdt.internal.compiler.SourceElementParser r0;
        org.eclipse.jdt.internal.compiler.parser.JavadocParser $r1;
        org.eclipse.jdt.internal.compiler.ast.ASTNode $r5;
        java.util.HashMap $r6;
        org.eclipse.jdt.internal.compiler.SourceJavadocParser r2;
        char[][] r3, $r7;
        int $i0, $i1;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r4;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        $z0 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: boolean useSourceJavadocParser>;

        if $z0 == 0 goto label1;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.parser.JavadocParser javadocParser>;

        r2 = (org.eclipse.jdt.internal.compiler.SourceJavadocParser) $r1;

        r3 = r2.<org.eclipse.jdt.internal.compiler.SourceJavadocParser: char[][] categories>;

        $i0 = lengthof r3;

        if $i0 <= 0 goto label1;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: java.util.HashMap nodesToCategories>;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] astStack>;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: int astPtr>;

        $r5 = $r4[$i1];

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r3);

        $r7 = <org.eclipse.jdt.core.compiler.CharOperation: char[][] NO_CHAR_CHAR>;

        r2.<org.eclipse.jdt.internal.compiler.SourceJavadocParser: char[][] categories> = $r7;

     label1:
        return;
    }

    private void reset()
    {
        java.util.HashMap $r2;
        org.eclipse.jdt.internal.compiler.SourceElementParser r0;
        org.eclipse.jdt.internal.compiler.util.HashtableOfObjectToInt $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        $r1 = new org.eclipse.jdt.internal.compiler.util.HashtableOfObjectToInt;

        specialinvoke $r1.<org.eclipse.jdt.internal.compiler.util.HashtableOfObjectToInt: void <init>()>();

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.util.HashtableOfObjectToInt sourceEnds> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: java.util.HashMap nodesToCategories> = $r2;

        return;
    }

    public void setRequestor(org.eclipse.jdt.internal.compiler.ISourceElementRequestor)
    {
        org.eclipse.jdt.internal.compiler.SourceElementParser r0;
        org.eclipse.jdt.internal.compiler.ISourceElementRequestor r1;
        org.eclipse.jdt.internal.compiler.SourceElementNotifier $r2;

        r0 := @this: org.eclipse.jdt.internal.compiler.SourceElementParser;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.ISourceElementRequestor;

        r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.ISourceElementRequestor requestor> = r1;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.SourceElementParser: org.eclipse.jdt.internal.compiler.SourceElementNotifier notifier>;

        $r2.<org.eclipse.jdt.internal.compiler.SourceElementNotifier: org.eclipse.jdt.internal.compiler.ISourceElementRequestor requestor> = r1;

        return;
    }
}
