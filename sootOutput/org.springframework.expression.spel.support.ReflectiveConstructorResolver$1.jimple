final class org.springframework.expression.spel.support.ReflectiveConstructorResolver$1 extends java.lang.Object implements java.util.Comparator
{
    final org.springframework.expression.spel.support.ReflectiveConstructorResolver this$0;

    void <init>(org.springframework.expression.spel.support.ReflectiveConstructorResolver)
    {
        org.springframework.expression.spel.support.ReflectiveConstructorResolver r1;
        org.springframework.expression.spel.support.ReflectiveConstructorResolver$1 r0;

        r0 := @this: org.springframework.expression.spel.support.ReflectiveConstructorResolver$1;

        r1 := @parameter0: org.springframework.expression.spel.support.ReflectiveConstructorResolver;

        r0.<org.springframework.expression.spel.support.ReflectiveConstructorResolver$1: org.springframework.expression.spel.support.ReflectiveConstructorResolver this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int compare(java.lang.reflect.Constructor, java.lang.reflect.Constructor)
    {
        java.lang.Class[] $r1, $r3;
        java.lang.reflect.Constructor r0, r2;
        java.lang.Integer $r4, $r5;
        int i0, i1, $i2;
        org.springframework.expression.spel.support.ReflectiveConstructorResolver$1 r6;

        r6 := @this: org.springframework.expression.spel.support.ReflectiveConstructorResolver$1;

        r0 := @parameter0: java.lang.reflect.Constructor;

        r2 := @parameter1: java.lang.reflect.Constructor;

        $r1 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        i0 = lengthof $r1;

        $r3 = virtualinvoke r2.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        i1 = lengthof $r3;

        $r4 = new java.lang.Integer;

        specialinvoke $r4.<java.lang.Integer: void <init>(int)>(i0);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $i2 = virtualinvoke $r4.<java.lang.Integer: int compareTo(java.lang.Integer)>($r5);

        return $i2;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        int $i0;
        java.lang.Object r1, r2;
        java.lang.reflect.Constructor $r3, $r4;
        org.springframework.expression.spel.support.ReflectiveConstructorResolver$1 r0;

        r0 := @this: org.springframework.expression.spel.support.ReflectiveConstructorResolver$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.lang.reflect.Constructor) r1;

        $r3 = (java.lang.reflect.Constructor) r2;

        $i0 = virtualinvoke r0.<org.springframework.expression.spel.support.ReflectiveConstructorResolver$1: int compare(java.lang.reflect.Constructor,java.lang.reflect.Constructor)>($r4, $r3);

        return $i0;
    }
}
