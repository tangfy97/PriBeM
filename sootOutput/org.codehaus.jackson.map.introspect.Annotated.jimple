public abstract class org.codehaus.jackson.map.introspect.Annotated extends java.lang.Object
{

    protected void <init>()
    {
        org.codehaus.jackson.map.introspect.Annotated r0;

        r0 := @this: org.codehaus.jackson.map.introspect.Annotated;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract java.lang.'annotation'.Annotation getAnnotation(java.lang.Class);

    public final boolean hasAnnotation(java.lang.Class)
    {
        org.codehaus.jackson.map.introspect.Annotated r0;
        java.lang.'annotation'.Annotation $r2;
        java.lang.Class r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.Annotated;

        r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.Annotated: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(r1);

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public abstract org.codehaus.jackson.map.introspect.Annotated withAnnotations(org.codehaus.jackson.map.introspect.AnnotationMap);

    public final org.codehaus.jackson.map.introspect.Annotated withFallBackAnnotationsFrom(org.codehaus.jackson.map.introspect.Annotated)
    {
        org.codehaus.jackson.map.introspect.Annotated r0, r2, $r5;
        org.codehaus.jackson.map.introspect.AnnotationMap $r1, $r3, $r4;

        r0 := @this: org.codehaus.jackson.map.introspect.Annotated;

        r2 := @parameter0: org.codehaus.jackson.map.introspect.Annotated;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.Annotated: org.codehaus.jackson.map.introspect.AnnotationMap getAllAnnotations()>();

        $r3 = virtualinvoke r2.<org.codehaus.jackson.map.introspect.Annotated: org.codehaus.jackson.map.introspect.AnnotationMap getAllAnnotations()>();

        $r4 = staticinvoke <org.codehaus.jackson.map.introspect.AnnotationMap: org.codehaus.jackson.map.introspect.AnnotationMap merge(org.codehaus.jackson.map.introspect.AnnotationMap,org.codehaus.jackson.map.introspect.AnnotationMap)>($r1, $r3);

        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.Annotated: org.codehaus.jackson.map.introspect.Annotated withAnnotations(org.codehaus.jackson.map.introspect.AnnotationMap)>($r4);

        return $r5;
    }

    public abstract java.lang.reflect.AnnotatedElement getAnnotated();

    protected abstract int getModifiers();

    public final boolean isPublic()
    {
        int $i0;
        org.codehaus.jackson.map.introspect.Annotated r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.Annotated;

        $i0 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.Annotated: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        return $z0;
    }

    public abstract java.lang.String getName();

    public org.codehaus.jackson.type.JavaType getType(org.codehaus.jackson.map.type.TypeBindings)
    {
        org.codehaus.jackson.map.introspect.Annotated r1;
        java.lang.reflect.Type $r2;
        org.codehaus.jackson.type.JavaType $r3;
        org.codehaus.jackson.map.type.TypeBindings r0;

        r1 := @this: org.codehaus.jackson.map.introspect.Annotated;

        r0 := @parameter0: org.codehaus.jackson.map.type.TypeBindings;

        $r2 = virtualinvoke r1.<org.codehaus.jackson.map.introspect.Annotated: java.lang.reflect.Type getGenericType()>();

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeBindings: org.codehaus.jackson.type.JavaType resolveType(java.lang.reflect.Type)>($r2);

        return $r3;
    }

    public abstract java.lang.reflect.Type getGenericType();

    public abstract java.lang.Class getRawType();

    protected abstract org.codehaus.jackson.map.introspect.AnnotationMap getAllAnnotations();
}
