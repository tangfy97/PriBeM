class org.apache.commons.compress.archivers.zip.BitStream extends java.lang.Object
{
    private final java.io.InputStream in;
    private long bitCache;
    private int bitCacheSize;
    private static final int[] MASKS;

    void <init>(java.io.InputStream)
    {
        org.apache.commons.compress.archivers.zip.BitStream r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.commons.compress.archivers.zip.BitStream;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.compress.archivers.zip.BitStream: java.io.InputStream in> = r1;

        return;
    }

    private boolean fillCache() throws java.io.IOException
    {
        long l2, $l5, $l6, $l7;
        org.apache.commons.compress.archivers.zip.BitStream r0;
        byte $b3;
        int $i0, $i1, $i4, $i8, $i9;
        java.io.InputStream $r1;
        boolean z0;

        r0 := @this: org.apache.commons.compress.archivers.zip.BitStream;

        z0 = 0;

     label1:
        $i0 = r0.<org.apache.commons.compress.archivers.zip.BitStream: int bitCacheSize>;

        if $i0 > 56 goto label3;

        $r1 = r0.<org.apache.commons.compress.archivers.zip.BitStream: java.io.InputStream in>;

        $i1 = virtualinvoke $r1.<java.io.InputStream: int read()>();

        l2 = (long) $i1;

        $b3 = l2 cmp -1L;

        if $b3 != 0 goto label2;

        goto label3;

     label2:
        z0 = 1;

        $l6 = r0.<org.apache.commons.compress.archivers.zip.BitStream: long bitCache>;

        $i4 = r0.<org.apache.commons.compress.archivers.zip.BitStream: int bitCacheSize>;

        $l5 = l2 << $i4;

        $l7 = $l6 | $l5;

        r0.<org.apache.commons.compress.archivers.zip.BitStream: long bitCache> = $l7;

        $i8 = r0.<org.apache.commons.compress.archivers.zip.BitStream: int bitCacheSize>;

        $i9 = $i8 + 8;

        r0.<org.apache.commons.compress.archivers.zip.BitStream: int bitCacheSize> = $i9;

        goto label1;

     label3:
        return z0;
    }

    int nextBit() throws java.io.IOException
    {
        long $l1, $l2, $l3, $l4;
        org.apache.commons.compress.archivers.zip.BitStream r0;
        int $i0, $i5, $i6, $i7, $i9;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.zip.BitStream;

        $i0 = r0.<org.apache.commons.compress.archivers.zip.BitStream: int bitCacheSize>;

        if $i0 != 0 goto label1;

        $z0 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.BitStream: boolean fillCache()>();

        if $z0 != 0 goto label1;

        $i9 = (int) -1;

        return $i9;

     label1:
        $l1 = r0.<org.apache.commons.compress.archivers.zip.BitStream: long bitCache>;

        $l2 = $l1 & 1L;

        $i7 = (int) $l2;

        $l3 = r0.<org.apache.commons.compress.archivers.zip.BitStream: long bitCache>;

        $l4 = $l3 >>> 1;

        r0.<org.apache.commons.compress.archivers.zip.BitStream: long bitCache> = $l4;

        $i5 = r0.<org.apache.commons.compress.archivers.zip.BitStream: int bitCacheSize>;

        $i6 = $i5 - 1;

        r0.<org.apache.commons.compress.archivers.zip.BitStream: int bitCacheSize> = $i6;

        return $i7;
    }

    int nextBits(int) throws java.io.IOException
    {
        long $l3, $l4, $l5, $l6, $l7;
        org.apache.commons.compress.archivers.zip.BitStream r0;
        int[] $r1;
        int i0, $i1, $i2, $i8, $i9, $i10, $i12;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.zip.BitStream;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.commons.compress.archivers.zip.BitStream: int bitCacheSize>;

        if $i1 >= i0 goto label1;

        $z0 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.BitStream: boolean fillCache()>();

        if $z0 != 0 goto label1;

        $i12 = (int) -1;

        return $i12;

     label1:
        $l4 = r0.<org.apache.commons.compress.archivers.zip.BitStream: long bitCache>;

        $r1 = <org.apache.commons.compress.archivers.zip.BitStream: int[] MASKS>;

        $i2 = $r1[i0];

        $l3 = (long) $i2;

        $l5 = $l4 & $l3;

        $i10 = (int) $l5;

        $l6 = r0.<org.apache.commons.compress.archivers.zip.BitStream: long bitCache>;

        $l7 = $l6 >>> i0;

        r0.<org.apache.commons.compress.archivers.zip.BitStream: long bitCache> = $l7;

        $i8 = r0.<org.apache.commons.compress.archivers.zip.BitStream: int bitCacheSize>;

        $i9 = $i8 - i0;

        r0.<org.apache.commons.compress.archivers.zip.BitStream: int bitCacheSize> = $i9;

        return $i10;
    }

    int nextByte() throws java.io.IOException
    {
        int $i0;
        org.apache.commons.compress.archivers.zip.BitStream r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.BitStream;

        $i0 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.BitStream: int nextBits(int)>(8);

        return $i0;
    }

    static void <clinit>()
    {
        int[] $r0;

        $r0 = newarray (int)[9];

        $r0[0] = 0;

        $r0[1] = 1;

        $r0[2] = 3;

        $r0[3] = 7;

        $r0[4] = 15;

        $r0[5] = 31;

        $r0[6] = 63;

        $r0[7] = 127;

        $r0[8] = 255;

        <org.apache.commons.compress.archivers.zip.BitStream: int[] MASKS> = $r0;

        return;
    }
}
