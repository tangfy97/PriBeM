class org.waveprotocol.wave.client.editor.content.ContentDocument$4 extends java.lang.Object implements org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext
{
    org.waveprotocol.wave.client.scheduler.FinalTaskRunner finalTaskRunner;
    final org.waveprotocol.wave.client.editor.content.ContentDocument this$0;

    void <init>(org.waveprotocol.wave.client.editor.content.ContentDocument)
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument$4 r0;
        org.waveprotocol.wave.client.scheduler.FinalTaskRunner $r4;
        org.waveprotocol.wave.client.editor.content.ContentDocument r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument$4$1 $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$4;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentDocument;

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$4: org.waveprotocol.wave.client.editor.content.ContentDocument this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new org.waveprotocol.wave.client.editor.content.ContentDocument$4$1;

        specialinvoke $r3.<org.waveprotocol.wave.client.editor.content.ContentDocument$4$1: void <init>(org.waveprotocol.wave.client.editor.content.ContentDocument$4)>(r0);

        $r4 = (org.waveprotocol.wave.client.scheduler.FinalTaskRunner) $r3;

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$4: org.waveprotocol.wave.client.scheduler.FinalTaskRunner finalTaskRunner> = $r4;

        return;
    }

    public org.waveprotocol.wave.model.document.util.LocalDocument annotatableContent()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument$4 r0;
        org.waveprotocol.wave.model.document.util.LocalDocument $r2;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$4;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$4: org.waveprotocol.wave.client.editor.content.ContentDocument this$0>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.model.document.util.LocalDocument getAnnotatableContent()>();

        return $r2;
    }

    public org.waveprotocol.wave.client.editor.content.CMutableDocument document()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument$4 r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r1;
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$4;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$4: org.waveprotocol.wave.client.editor.content.ContentDocument this$0>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.CMutableDocument getMutableDoc()>();

        return $r2;
    }

    public org.waveprotocol.wave.model.document.MutableAnnotationSet$Local localAnnotations()
    {
        org.waveprotocol.wave.model.document.MutableAnnotationSet$Local $r2;
        org.waveprotocol.wave.client.editor.content.ContentDocument$4 r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$4;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$4: org.waveprotocol.wave.client.editor.content.ContentDocument this$0>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.model.document.MutableAnnotationSet$Local getLocalAnnotations()>();

        return $r2;
    }

    public org.waveprotocol.wave.model.document.indexed.LocationMapper locationMapper()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument$4 r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r1;
        org.waveprotocol.wave.model.document.indexed.LocationMapper $r2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$4;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$4: org.waveprotocol.wave.client.editor.content.ContentDocument this$0>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.model.document.indexed.LocationMapper getLocationMapper()>();

        return $r2;
    }

    public org.waveprotocol.wave.client.editor.content.ContentView persistentView()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument$4 r0;
        org.waveprotocol.wave.client.editor.content.ContentView $r2;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$4;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$4: org.waveprotocol.wave.client.editor.content.ContentDocument this$0>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentView getPersistentView()>();

        return $r2;
    }

    public org.waveprotocol.wave.model.document.util.ReadableDocumentView hardView()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument$4 r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc $r2;
        org.waveprotocol.wave.model.document.util.PersistentContent$HardContent $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$4;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$4: org.waveprotocol.wave.client.editor.content.ContentDocument this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc access$1100(org.waveprotocol.wave.client.editor.content.ContentDocument)>($r1);

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.ContentDocument$PersistentContentDoc: org.waveprotocol.wave.model.document.util.PersistentContent$HardContent hardView()>();

        return $r3;
    }

    public org.waveprotocol.wave.model.document.raw.TextNodeOrganiser textNodeOrganiser()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument$4 r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc $r2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$4;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$4: org.waveprotocol.wave.client.editor.content.ContentDocument this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$ContentIndexedDoc access$1200(org.waveprotocol.wave.client.editor.content.ContentDocument)>($r1);

        return $r2;
    }

    public org.waveprotocol.wave.model.document.util.ElementManager elementManager()
    {
        org.waveprotocol.wave.model.document.util.ElementManager $r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument$4 r1;

        r1 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$4;

        $r0 = <org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.model.document.util.ElementManager ELEMENT_MANAGER>;

        return $r0;
    }

    public org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns editing()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument$4 r0;
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns $r2;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$4;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$4: org.waveprotocol.wave.client.editor.content.ContentDocument this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns access$1300(org.waveprotocol.wave.client.editor.content.ContentDocument)>($r1);

        return $r2;
    }

    public java.lang.String getDocumentId()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument$4 r0;
        java.lang.String $r2;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$4;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$4: org.waveprotocol.wave.client.editor.content.ContentDocument this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.content.ContentDocument: java.lang.String access$1400(org.waveprotocol.wave.client.editor.content.ContentDocument)>($r1);

        return $r2;
    }

    public org.waveprotocol.wave.client.editor.content.ContentElement getElementByName(java.lang.String)
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument$4 r0;
        java.lang.Object $r4;
        org.waveprotocol.wave.client.editor.content.ContentElement $r5;
        org.waveprotocol.wave.model.util.StringMap $r2;
        java.lang.String r3;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$4;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$4: org.waveprotocol.wave.client.editor.content.ContentDocument this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.model.util.StringMap access$1500(org.waveprotocol.wave.client.editor.content.ContentDocument)>($r1);

        $r4 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>(r3);

        $r5 = (org.waveprotocol.wave.client.editor.content.ContentElement) $r4;

        return $r5;
    }

    public boolean isEditing()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument$4 r0;
        org.waveprotocol.wave.client.editor.EditorImpl$MiniBundle $r2;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$4;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$4: org.waveprotocol.wave.client.editor.content.ContentDocument this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.EditorImpl$MiniBundle access$1600(org.waveprotocol.wave.client.editor.content.ContentDocument)>($r1);

        $z0 = interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.EditorImpl$MiniBundle: boolean inEditMode()>();

        return $z0;
    }

    public org.waveprotocol.wave.client.editor.content.ClientDocumentContext$RenderingConcerns rendering()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument$4 r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r1;
        org.waveprotocol.wave.client.editor.content.ClientDocumentContext$RenderingConcerns $r2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$4;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$4: org.waveprotocol.wave.client.editor.content.ContentDocument this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ClientDocumentContext$RenderingConcerns access$1700(org.waveprotocol.wave.client.editor.content.ContentDocument)>($r1);

        return $r2;
    }

    public void scheduleFinally(org.waveprotocol.wave.client.scheduler.Scheduler$Task)
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument$4 r0;
        org.waveprotocol.wave.client.scheduler.Scheduler$Task r1;
        org.waveprotocol.wave.client.scheduler.FinalTaskRunner $r2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$4;

        r1 := @parameter0: org.waveprotocol.wave.client.scheduler.Scheduler$Task;

        $r2 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$4: org.waveprotocol.wave.client.scheduler.FinalTaskRunner finalTaskRunner>;

        interfaceinvoke $r2.<org.waveprotocol.wave.client.scheduler.FinalTaskRunner: void scheduleFinally(org.waveprotocol.wave.client.scheduler.Scheduler$Task)>(r1);

        return;
    }

    public void beginDeferredMutation()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument$4 r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r1;
        org.waveprotocol.wave.client.editor.content.SelectionMaintainer $r2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$4;

        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void startIgnoreMutations()>();

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$4: org.waveprotocol.wave.client.editor.content.ContentDocument this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.SelectionMaintainer access$1800(org.waveprotocol.wave.client.editor.content.ContentDocument)>($r1);

        virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: void saveSelection()>();

        return;
    }

    public void endDeferredMutation()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument$4 r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r1;
        org.waveprotocol.wave.client.editor.content.SelectionMaintainer $r2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$4;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$4: org.waveprotocol.wave.client.editor.content.ContentDocument this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.SelectionMaintainer access$1800(org.waveprotocol.wave.client.editor.content.ContentDocument)>($r1);

        virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.SelectionMaintainer: void restoreSelection()>();

        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void endIgnoreMutations()>();

        return;
    }

    public volatile org.waveprotocol.wave.client.editor.content.ClientDocumentContext$EditingConcerns editing()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument$4 r0;
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$4;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$4: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns editing()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.document.util.ReadableDocumentView persistentView()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument$4 r0;
        org.waveprotocol.wave.client.editor.content.ContentView $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$4;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$4: org.waveprotocol.wave.client.editor.content.ContentView persistentView()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.document.MutableDocument document()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument$4 r0;
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$4;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$4: org.waveprotocol.wave.client.editor.content.CMutableDocument document()>();

        return $r1;
    }
}
