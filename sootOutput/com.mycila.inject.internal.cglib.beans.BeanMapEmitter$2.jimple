class com.mycila.inject.internal.cglib.beans.BeanMapEmitter$2 extends java.lang.Object implements com.mycila.inject.internal.cglib.core.ObjectSwitchCallback
{
    private final java.util.Map val$setters;
    private final com.mycila.inject.internal.cglib.core.CodeEmitter val$e;
    private final com.mycila.inject.internal.cglib.beans.BeanMapEmitter this$0;

    void <init>(com.mycila.inject.internal.cglib.beans.BeanMapEmitter, java.util.Map, com.mycila.inject.internal.cglib.core.CodeEmitter)
    {
        java.util.Map r2;
        com.mycila.inject.internal.cglib.core.CodeEmitter r3;
        com.mycila.inject.internal.cglib.beans.BeanMapEmitter$2 r0;
        com.mycila.inject.internal.cglib.beans.BeanMapEmitter r1;

        r0 := @this: com.mycila.inject.internal.cglib.beans.BeanMapEmitter$2;

        r1 := @parameter0: com.mycila.inject.internal.cglib.beans.BeanMapEmitter;

        r2 := @parameter1: java.util.Map;

        r3 := @parameter2: com.mycila.inject.internal.cglib.core.CodeEmitter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.mycila.inject.internal.cglib.beans.BeanMapEmitter$2: com.mycila.inject.internal.cglib.beans.BeanMapEmitter this$0> = r1;

        r0.<com.mycila.inject.internal.cglib.beans.BeanMapEmitter$2: java.util.Map val$setters> = r2;

        r0.<com.mycila.inject.internal.cglib.beans.BeanMapEmitter$2: com.mycila.inject.internal.cglib.core.CodeEmitter val$e> = r3;

        return;
    }

    public void processCase(java.lang.Object, com.mycila.inject.internal.asm.Label)
    {
        com.mycila.inject.internal.asm.Type $r12, $r20;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r8, $r9, $r10, $r13, $r14, $r17, $r21, $r22, $r23;
        com.mycila.inject.internal.cglib.beans.BeanMapEmitter$2 r0;
        com.mycila.inject.internal.cglib.core.MethodInfo $r7, $r16;
        java.util.Map $r2;
        com.mycila.inject.internal.asm.Type[] $r19;
        java.lang.reflect.Method $r5, $r6, $r15;
        com.mycila.inject.internal.cglib.core.Signature $r11, $r18;
        java.beans.PropertyDescriptor r4;
        com.mycila.inject.internal.asm.Label r24;
        java.lang.Object r1, $r3;

        r0 := @this: com.mycila.inject.internal.cglib.beans.BeanMapEmitter$2;

        r1 := @parameter0: java.lang.Object;

        r24 := @parameter1: com.mycila.inject.internal.asm.Label;

        $r2 = r0.<com.mycila.inject.internal.cglib.beans.BeanMapEmitter$2: java.util.Map val$setters>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.beans.PropertyDescriptor) $r3;

        $r5 = virtualinvoke r4.<java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>();

        if $r5 != null goto label1;

        $r23 = r0.<com.mycila.inject.internal.cglib.beans.BeanMapEmitter$2: com.mycila.inject.internal.cglib.core.CodeEmitter val$e>;

        virtualinvoke $r23.<com.mycila.inject.internal.cglib.core.CodeEmitter: void aconst_null()>();

        goto label2;

     label1:
        $r6 = virtualinvoke r4.<java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>();

        $r7 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: com.mycila.inject.internal.cglib.core.MethodInfo getMethodInfo(java.lang.reflect.Member)>($r6);

        $r8 = r0.<com.mycila.inject.internal.cglib.beans.BeanMapEmitter$2: com.mycila.inject.internal.cglib.core.CodeEmitter val$e>;

        virtualinvoke $r8.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup()>();

        $r9 = r0.<com.mycila.inject.internal.cglib.beans.BeanMapEmitter$2: com.mycila.inject.internal.cglib.core.CodeEmitter val$e>;

        virtualinvoke $r9.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke(com.mycila.inject.internal.cglib.core.MethodInfo)>($r7);

        $r10 = r0.<com.mycila.inject.internal.cglib.beans.BeanMapEmitter$2: com.mycila.inject.internal.cglib.core.CodeEmitter val$e>;

        $r11 = virtualinvoke $r7.<com.mycila.inject.internal.cglib.core.MethodInfo: com.mycila.inject.internal.cglib.core.Signature getSignature()>();

        $r12 = virtualinvoke $r11.<com.mycila.inject.internal.cglib.core.Signature: com.mycila.inject.internal.asm.Type getReturnType()>();

        virtualinvoke $r10.<com.mycila.inject.internal.cglib.core.CodeEmitter: void box(com.mycila.inject.internal.asm.Type)>($r12);

     label2:
        $r13 = r0.<com.mycila.inject.internal.cglib.beans.BeanMapEmitter$2: com.mycila.inject.internal.cglib.core.CodeEmitter val$e>;

        virtualinvoke $r13.<com.mycila.inject.internal.cglib.core.CodeEmitter: void swap()>();

        $r14 = r0.<com.mycila.inject.internal.cglib.beans.BeanMapEmitter$2: com.mycila.inject.internal.cglib.core.CodeEmitter val$e>;

        virtualinvoke $r14.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_arg(int)>(2);

        $r15 = virtualinvoke r4.<java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>();

        $r16 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: com.mycila.inject.internal.cglib.core.MethodInfo getMethodInfo(java.lang.reflect.Member)>($r15);

        $r17 = r0.<com.mycila.inject.internal.cglib.beans.BeanMapEmitter$2: com.mycila.inject.internal.cglib.core.CodeEmitter val$e>;

        $r18 = virtualinvoke $r16.<com.mycila.inject.internal.cglib.core.MethodInfo: com.mycila.inject.internal.cglib.core.Signature getSignature()>();

        $r19 = virtualinvoke $r18.<com.mycila.inject.internal.cglib.core.Signature: com.mycila.inject.internal.asm.Type[] getArgumentTypes()>();

        $r20 = $r19[0];

        virtualinvoke $r17.<com.mycila.inject.internal.cglib.core.CodeEmitter: void unbox(com.mycila.inject.internal.asm.Type)>($r20);

        $r21 = r0.<com.mycila.inject.internal.cglib.beans.BeanMapEmitter$2: com.mycila.inject.internal.cglib.core.CodeEmitter val$e>;

        virtualinvoke $r21.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke(com.mycila.inject.internal.cglib.core.MethodInfo)>($r16);

        $r22 = r0.<com.mycila.inject.internal.cglib.beans.BeanMapEmitter$2: com.mycila.inject.internal.cglib.core.CodeEmitter val$e>;

        virtualinvoke $r22.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        return;
    }

    public void processDefault()
    {
        com.mycila.inject.internal.cglib.beans.BeanMapEmitter$2 r0;

        r0 := @this: com.mycila.inject.internal.cglib.beans.BeanMapEmitter$2;

        return;
    }
}
