public class org.waveprotocol.wave.model.account.BasicObservableIndexability extends java.lang.Object implements org.waveprotocol.wave.model.account.ObservableMutableIndexability
{
    private final java.util.Map map;
    private final org.waveprotocol.wave.model.util.CopyOnWriteSet listeners;

    public void <init>()
    {
        java.util.HashMap $r1;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.account.BasicObservableIndexability r0;

        r0 := @this: org.waveprotocol.wave.model.account.BasicObservableIndexability;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.HashMap newHashMap()>();

        r0.<org.waveprotocol.wave.model.account.BasicObservableIndexability: java.util.Map map> = $r1;

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CopyOnWriteSet: org.waveprotocol.wave.model.util.CopyOnWriteSet create()>();

        r0.<org.waveprotocol.wave.model.account.BasicObservableIndexability: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners> = $r2;

        return;
    }

    public void setIndexability(org.waveprotocol.wave.model.wave.ParticipantId, org.waveprotocol.wave.model.account.IndexDecision)
    {
        java.util.Iterator $r6;
        org.waveprotocol.wave.model.wave.ParticipantId r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r5;
        org.waveprotocol.wave.model.account.IndexDecision $r2, r3;
        org.waveprotocol.wave.model.account.ObservableIndexability$Listener r8;
        org.waveprotocol.wave.model.account.BasicObservableIndexability r1;
        java.util.Map $r4, $r9;
        java.lang.Object $r7;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.model.account.BasicObservableIndexability;

        r0 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        r3 := @parameter1: org.waveprotocol.wave.model.account.IndexDecision;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "Participant can\'t be null");

        $r2 = virtualinvoke r1.<org.waveprotocol.wave.model.account.BasicObservableIndexability: org.waveprotocol.wave.model.account.IndexDecision getIndexability(org.waveprotocol.wave.model.wave.ParticipantId)>(r0);

        if r3 != null goto label1;

        $r9 = r1.<org.waveprotocol.wave.model.account.BasicObservableIndexability: java.util.Map map>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r0);

        goto label2;

     label1:
        $r4 = r1.<org.waveprotocol.wave.model.account.BasicObservableIndexability: java.util.Map map>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r3);

     label2:
        if $r2 == r3 goto label4;

        $r5 = r1.<org.waveprotocol.wave.model.account.BasicObservableIndexability: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.waveprotocol.wave.model.account.ObservableIndexability$Listener) $r7;

        interfaceinvoke r8.<org.waveprotocol.wave.model.account.ObservableIndexability$Listener: void onChanged(org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.account.IndexDecision)>(r0, r3);

        goto label3;

     label4:
        return;
    }

    public org.waveprotocol.wave.model.account.IndexDecision getIndexability(org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.account.IndexDecision $r4;
        org.waveprotocol.wave.model.account.BasicObservableIndexability r0;
        java.util.Map $r2;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.wave.ParticipantId r1;

        r0 := @this: org.waveprotocol.wave.model.account.BasicObservableIndexability;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        $r2 = r0.<org.waveprotocol.wave.model.account.BasicObservableIndexability: java.util.Map map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.waveprotocol.wave.model.account.IndexDecision) $r3;

        return $r4;
    }

    public void addListener(org.waveprotocol.wave.model.account.ObservableIndexability$Listener)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.account.ObservableIndexability$Listener r1;
        org.waveprotocol.wave.model.account.BasicObservableIndexability r0;

        r0 := @this: org.waveprotocol.wave.model.account.BasicObservableIndexability;

        r1 := @parameter0: org.waveprotocol.wave.model.account.ObservableIndexability$Listener;

        $r2 = r0.<org.waveprotocol.wave.model.account.BasicObservableIndexability: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void removeListener(org.waveprotocol.wave.model.account.ObservableIndexability$Listener)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.account.ObservableIndexability$Listener r1;
        org.waveprotocol.wave.model.account.BasicObservableIndexability r0;

        r0 := @this: org.waveprotocol.wave.model.account.BasicObservableIndexability;

        r1 := @parameter0: org.waveprotocol.wave.model.account.ObservableIndexability$Listener;

        $r2 = r0.<org.waveprotocol.wave.model.account.BasicObservableIndexability: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public java.util.Set getIndexDecisions()
    {
        org.waveprotocol.wave.model.account.BasicObservableIndexability r0;
        java.util.Map $r1;
        java.util.Set $r2, $r3;

        r0 := @this: org.waveprotocol.wave.model.account.BasicObservableIndexability;

        $r1 = r0.<org.waveprotocol.wave.model.account.BasicObservableIndexability: java.util.Map map>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r2);

        return $r3;
    }

    public volatile void removeListener(java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.model.account.ObservableIndexability$Listener $r2;
        org.waveprotocol.wave.model.account.BasicObservableIndexability r0;

        r0 := @this: org.waveprotocol.wave.model.account.BasicObservableIndexability;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.account.ObservableIndexability$Listener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.account.BasicObservableIndexability: void removeListener(org.waveprotocol.wave.model.account.ObservableIndexability$Listener)>($r2);

        return;
    }

    public volatile void addListener(java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.model.account.ObservableIndexability$Listener $r2;
        org.waveprotocol.wave.model.account.BasicObservableIndexability r0;

        r0 := @this: org.waveprotocol.wave.model.account.BasicObservableIndexability;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.account.ObservableIndexability$Listener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.account.BasicObservableIndexability: void addListener(org.waveprotocol.wave.model.account.ObservableIndexability$Listener)>($r2);

        return;
    }
}
