public class org.springframework.aop.aspectj.'annotation'.ReflectiveAspectJAdvisorFactory extends org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory
{
    private static int[] $SWITCH_TABLE$org$springframework$aop$aspectj$annotation$AbstractAspectJAdvisorFactory$AspectJAnnotationType;

    public void <init>()
    {
        org.springframework.aop.aspectj.'annotation'.ReflectiveAspectJAdvisorFactory r0;

        r0 := @this: org.springframework.aop.aspectj.'annotation'.ReflectiveAspectJAdvisorFactory;

        specialinvoke r0.<org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory: void <init>()>();

        return;
    }

    public java.util.List getAdvisors(org.springframework.aop.aspectj.'annotation'.MetadataAwareAspectInstanceFactory)
    {
        org.springframework.aop.aspectj.'annotation'.MetadataAwareAspectInstanceFactory r0;
        org.springframework.aop.aspectj.'annotation'.LazySingletonAspectInstanceFactoryDecorator $r6;
        int $i0, i1;
        java.lang.String $r4;
        java.util.LinkedList $r7;
        org.springframework.aop.Advisor $r9;
        boolean $z0, $z1;
        org.springframework.aop.aspectj.'annotation'.AspectMetadata $r1, $r3, $r10;
        org.springframework.aop.aspectj.'annotation'.ReflectiveAspectJAdvisorFactory$1 $r8;
        org.springframework.aop.aspectj.'annotation'.ReflectiveAspectJAdvisorFactory$SyntheticInstantiationAdvisor $r11;
        java.lang.reflect.Field r13;
        java.lang.reflect.Field[] $r12;
        java.lang.Class $r2;
        org.springframework.aop.aspectj.'annotation'.ReflectiveAspectJAdvisorFactory r5;

        r5 := @this: org.springframework.aop.aspectj.'annotation'.ReflectiveAspectJAdvisorFactory;

        r0 := @parameter0: org.springframework.aop.aspectj.'annotation'.MetadataAwareAspectInstanceFactory;

        $r1 = interfaceinvoke r0.<org.springframework.aop.aspectj.'annotation'.MetadataAwareAspectInstanceFactory: org.springframework.aop.aspectj.'annotation'.AspectMetadata getAspectMetadata()>();

        $r2 = virtualinvoke $r1.<org.springframework.aop.aspectj.'annotation'.AspectMetadata: java.lang.Class getAspectClass()>();

        $r3 = interfaceinvoke r0.<org.springframework.aop.aspectj.'annotation'.MetadataAwareAspectInstanceFactory: org.springframework.aop.aspectj.'annotation'.AspectMetadata getAspectMetadata()>();

        $r4 = virtualinvoke $r3.<org.springframework.aop.aspectj.'annotation'.AspectMetadata: java.lang.String getAspectName()>();

        virtualinvoke r5.<org.springframework.aop.aspectj.'annotation'.ReflectiveAspectJAdvisorFactory: void validate(java.lang.Class)>($r2);

        $r6 = new org.springframework.aop.aspectj.'annotation'.LazySingletonAspectInstanceFactoryDecorator;

        specialinvoke $r6.<org.springframework.aop.aspectj.'annotation'.LazySingletonAspectInstanceFactoryDecorator: void <init>(org.springframework.aop.aspectj.'annotation'.MetadataAwareAspectInstanceFactory)>(r0);

        $r7 = new java.util.LinkedList;

        specialinvoke $r7.<java.util.LinkedList: void <init>()>();

        $r8 = new org.springframework.aop.aspectj.'annotation'.ReflectiveAspectJAdvisorFactory$1;

        specialinvoke $r8.<org.springframework.aop.aspectj.'annotation'.ReflectiveAspectJAdvisorFactory$1: void <init>(org.springframework.aop.aspectj.'annotation'.ReflectiveAspectJAdvisorFactory,org.springframework.aop.aspectj.'annotation'.MetadataAwareAspectInstanceFactory,java.util.List,java.lang.String)>(r5, $r6, $r7, $r4);

        staticinvoke <org.springframework.util.ReflectionUtils: void doWithMethods(java.lang.Class,org.springframework.util.ReflectionUtils$MethodCallback)>($r2, $r8);

        $z0 = interfaceinvoke $r7.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r10 = interfaceinvoke $r6.<org.springframework.aop.aspectj.'annotation'.MetadataAwareAspectInstanceFactory: org.springframework.aop.aspectj.'annotation'.AspectMetadata getAspectMetadata()>();

        $z1 = virtualinvoke $r10.<org.springframework.aop.aspectj.'annotation'.AspectMetadata: boolean isLazilyInstantiated()>();

        if $z1 == 0 goto label1;

        $r11 = new org.springframework.aop.aspectj.'annotation'.ReflectiveAspectJAdvisorFactory$SyntheticInstantiationAdvisor;

        specialinvoke $r11.<org.springframework.aop.aspectj.'annotation'.ReflectiveAspectJAdvisorFactory$SyntheticInstantiationAdvisor: void <init>(org.springframework.aop.aspectj.'annotation'.MetadataAwareAspectInstanceFactory)>($r6);

        interfaceinvoke $r7.<java.util.List: void add(int,java.lang.Object)>(0, $r11);

     label1:
        $r12 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        $i0 = lengthof $r12;

        i1 = 0;

        goto label4;

     label2:
        r13 = $r12[i1];

        $r9 = specialinvoke r5.<org.springframework.aop.aspectj.'annotation'.ReflectiveAspectJAdvisorFactory: org.springframework.aop.Advisor getDeclareParentsAdvisor(java.lang.reflect.Field)>(r13);

        if $r9 == null goto label3;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r9);

     label3:
        i1 = i1 + 1;

     label4:
        if i1 < $i0 goto label2;

        return $r7;
    }

    private org.springframework.aop.Advisor getDeclareParentsAdvisor(java.lang.reflect.Field)
    {
        java.lang.IllegalStateException $r9;
        java.lang.reflect.Field r0;
        org.springframework.aop.aspectj.DeclareParentsAdvisor $r5;
        org.aspectj.lang.'annotation'.DeclareParents r2;
        java.lang.'annotation'.Annotation $r1;
        java.lang.Class $r3, $r4, $r6, $r8;
        java.lang.String $r7;
        org.springframework.aop.aspectj.'annotation'.ReflectiveAspectJAdvisorFactory r10;
        boolean $z0;

        r10 := @this: org.springframework.aop.aspectj.'annotation'.ReflectiveAspectJAdvisorFactory;

        r0 := @parameter0: java.lang.reflect.Field;

        $r1 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/aspectj/lang/annotation/DeclareParents;");

        r2 = (org.aspectj.lang.'annotation'.DeclareParents) $r1;

        if r2 != null goto label1;

        return null;

     label1:
        $r3 = class "Lorg/aspectj/lang/annotation/DeclareParents;";

        $r4 = interfaceinvoke r2.<org.aspectj.lang.'annotation'.DeclareParents: java.lang.Class defaultImpl()>();

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("defaultImpl must be set on DeclareParents");

        throw $r9;

     label2:
        $r5 = new org.springframework.aop.aspectj.DeclareParentsAdvisor;

        $r6 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r7 = interfaceinvoke r2.<org.aspectj.lang.'annotation'.DeclareParents: java.lang.String value()>();

        $r8 = interfaceinvoke r2.<org.aspectj.lang.'annotation'.DeclareParents: java.lang.Class defaultImpl()>();

        specialinvoke $r5.<org.springframework.aop.aspectj.DeclareParentsAdvisor: void <init>(java.lang.Class,java.lang.String,java.lang.Class)>($r6, $r7, $r8);

        return $r5;
    }

    public org.springframework.aop.Advisor getAdvisor(java.lang.reflect.Method, org.springframework.aop.aspectj.'annotation'.MetadataAwareAspectInstanceFactory, int, java.lang.String)
    {
        org.springframework.aop.aspectj.'annotation'.AspectMetadata $r2, $r5;
        org.springframework.aop.aspectj.'annotation'.MetadataAwareAspectInstanceFactory r1;
        org.springframework.aop.aspectj.'annotation'.InstantiationModelAwarePointcutAdvisorImpl $r8;
        int i0;
        java.lang.Class $r3, $r6;
        java.lang.String r9;
        org.springframework.aop.aspectj.'annotation'.ReflectiveAspectJAdvisorFactory r0;
        java.lang.reflect.Method r4;
        org.springframework.aop.aspectj.AspectJExpressionPointcut $r7;

        r0 := @this: org.springframework.aop.aspectj.'annotation'.ReflectiveAspectJAdvisorFactory;

        r4 := @parameter0: java.lang.reflect.Method;

        r1 := @parameter1: org.springframework.aop.aspectj.'annotation'.MetadataAwareAspectInstanceFactory;

        i0 := @parameter2: int;

        r9 := @parameter3: java.lang.String;

        $r2 = interfaceinvoke r1.<org.springframework.aop.aspectj.'annotation'.MetadataAwareAspectInstanceFactory: org.springframework.aop.aspectj.'annotation'.AspectMetadata getAspectMetadata()>();

        $r3 = virtualinvoke $r2.<org.springframework.aop.aspectj.'annotation'.AspectMetadata: java.lang.Class getAspectClass()>();

        virtualinvoke r0.<org.springframework.aop.aspectj.'annotation'.ReflectiveAspectJAdvisorFactory: void validate(java.lang.Class)>($r3);

        $r5 = interfaceinvoke r1.<org.springframework.aop.aspectj.'annotation'.MetadataAwareAspectInstanceFactory: org.springframework.aop.aspectj.'annotation'.AspectMetadata getAspectMetadata()>();

        $r6 = virtualinvoke $r5.<org.springframework.aop.aspectj.'annotation'.AspectMetadata: java.lang.Class getAspectClass()>();

        $r7 = specialinvoke r0.<org.springframework.aop.aspectj.'annotation'.ReflectiveAspectJAdvisorFactory: org.springframework.aop.aspectj.AspectJExpressionPointcut getPointcut(java.lang.reflect.Method,java.lang.Class)>(r4, $r6);

        if $r7 != null goto label1;

        return null;

     label1:
        $r8 = new org.springframework.aop.aspectj.'annotation'.InstantiationModelAwarePointcutAdvisorImpl;

        specialinvoke $r8.<org.springframework.aop.aspectj.'annotation'.InstantiationModelAwarePointcutAdvisorImpl: void <init>(org.springframework.aop.aspectj.'annotation'.AspectJAdvisorFactory,org.springframework.aop.aspectj.AspectJExpressionPointcut,org.springframework.aop.aspectj.'annotation'.MetadataAwareAspectInstanceFactory,java.lang.reflect.Method,int,java.lang.String)>(r0, $r7, r1, r4, i0, r9);

        return $r8;
    }

    private org.springframework.aop.aspectj.AspectJExpressionPointcut getPointcut(java.lang.reflect.Method, java.lang.Class)
    {
        java.lang.Class[] $r4;
        java.lang.String[] $r5;
        org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation $r1;
        java.lang.Class r3;
        java.lang.String $r6;
        java.lang.reflect.Method r0;
        org.springframework.aop.aspectj.AspectJExpressionPointcut $r2;
        org.springframework.aop.aspectj.'annotation'.ReflectiveAspectJAdvisorFactory r7;

        r7 := @this: org.springframework.aop.aspectj.'annotation'.ReflectiveAspectJAdvisorFactory;

        r0 := @parameter0: java.lang.reflect.Method;

        r3 := @parameter1: java.lang.Class;

        $r1 = staticinvoke <org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory: org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation findAspectJAnnotationOnMethod(java.lang.reflect.Method)>(r0);

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = new org.springframework.aop.aspectj.AspectJExpressionPointcut;

        $r5 = newarray (java.lang.String)[0];

        $r4 = newarray (java.lang.Class)[0];

        specialinvoke $r2.<org.springframework.aop.aspectj.AspectJExpressionPointcut: void <init>(java.lang.Class,java.lang.String[],java.lang.Class[])>(r3, $r5, $r4);

        $r6 = virtualinvoke $r1.<org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation: java.lang.String getPointcutExpression()>();

        virtualinvoke $r2.<org.springframework.aop.aspectj.AspectJExpressionPointcut: void setExpression(java.lang.String)>($r6);

        return $r2;
    }

    public org.aopalliance.aop.Advice getAdvice(java.lang.reflect.Method, org.springframework.aop.aspectj.AspectJExpressionPointcut, org.springframework.aop.aspectj.'annotation'.MetadataAwareAspectInstanceFactory, int, java.lang.String)
    {
        org.springframework.core.ParameterNameDiscoverer $r48;
        org.springframework.aop.aspectj.'annotation'.MetadataAwareAspectInstanceFactory r0;
        org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationType $r8;
        org.aspectj.lang.'annotation'.AfterReturning r47;
        org.springframework.aop.aspectj.AspectJAfterReturningAdvice $r17;
        int[] $r7;
        org.springframework.aop.aspectj.AspectJAfterThrowingAdvice $r12;
        org.springframework.aop.aspectj.AbstractAspectJAdvice r46;
        java.lang.reflect.Method r4;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.springframework.aop.aspectj.'annotation'.AspectMetadata $r1;
        org.aspectj.lang.'annotation'.AfterThrowing r14;
        org.springframework.aop.aspectj.AspectJMethodBeforeAdvice $r22;
        java.lang.'annotation'.Annotation $r13, $r18;
        java.lang.StringBuilder $r24, $r27, $r28, $r31, $r32, $r34, $r36, $r39, $r40, $r41, $r43, $r44;
        java.lang.String[] $r49;
        org.springframework.aop.framework.AopConfigException $r38;
        int $i0, $i1, i2;
        java.lang.String r11, $r15, $r16, $r19, $r20, $r26, $r29, $r33, $r37, $r42, $r45;
        java.lang.UnsupportedOperationException $r30;
        org.springframework.aop.aspectj.AspectJAfterAdvice $r21;
        org.springframework.aop.aspectj.AspectJAroundAdvice $r9;
        org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation $r5;
        java.lang.Class $r2;
        org.apache.commons.logging.Log $r6, $r23, $r25, $r35;
        org.springframework.aop.aspectj.'annotation'.ReflectiveAspectJAdvisorFactory r3;
        org.springframework.aop.aspectj.AspectJExpressionPointcut r10;

        r3 := @this: org.springframework.aop.aspectj.'annotation'.ReflectiveAspectJAdvisorFactory;

        r4 := @parameter0: java.lang.reflect.Method;

        r10 := @parameter1: org.springframework.aop.aspectj.AspectJExpressionPointcut;

        r0 := @parameter2: org.springframework.aop.aspectj.'annotation'.MetadataAwareAspectInstanceFactory;

        i2 := @parameter3: int;

        r11 := @parameter4: java.lang.String;

        $r1 = interfaceinvoke r0.<org.springframework.aop.aspectj.'annotation'.MetadataAwareAspectInstanceFactory: org.springframework.aop.aspectj.'annotation'.AspectMetadata getAspectMetadata()>();

        $r2 = virtualinvoke $r1.<org.springframework.aop.aspectj.'annotation'.AspectMetadata: java.lang.Class getAspectClass()>();

        virtualinvoke r3.<org.springframework.aop.aspectj.'annotation'.ReflectiveAspectJAdvisorFactory: void validate(java.lang.Class)>($r2);

        $r5 = staticinvoke <org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory: org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation findAspectJAnnotationOnMethod(java.lang.reflect.Method)>(r4);

        if $r5 != null goto label01;

        return null;

     label01:
        $z0 = virtualinvoke r3.<org.springframework.aop.aspectj.'annotation'.ReflectiveAspectJAdvisorFactory: boolean isAspect(java.lang.Class)>($r2);

        if $z0 != 0 goto label02;

        $r38 = new org.springframework.aop.framework.AopConfigException;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>(java.lang.String)>("Advice must be declared inside an aspect type: Offending method \'");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in class [");

        $r42 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r38.<org.springframework.aop.framework.AopConfigException: void <init>(java.lang.String)>($r45);

        throw $r38;

     label02:
        $r6 = r3.<org.springframework.aop.aspectj.'annotation'.ReflectiveAspectJAdvisorFactory: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r6.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label03;

        $r35 = r3.<org.springframework.aop.aspectj.'annotation'.ReflectiveAspectJAdvisorFactory: org.apache.commons.logging.Log logger>;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>(java.lang.String)>("Found AspectJ method: ");

        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r35.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r37);

     label03:
        $r7 = staticinvoke <org.springframework.aop.aspectj.'annotation'.ReflectiveAspectJAdvisorFactory: int[] $SWITCH_TABLE$org$springframework$aop$aspectj$annotation$AbstractAspectJAdvisorFactory$AspectJAnnotationType()>();

        $r8 = virtualinvoke $r5.<org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation: org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationType getAnnotationType()>();

        $i0 = virtualinvoke $r8.<org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationType: int ordinal()>();

        $i1 = $r7[$i0];

        tableswitch($i1)
        {
            case 1: goto label09;
            case 2: goto label04;
            case 3: goto label05;
            case 4: goto label06;
            case 5: goto label07;
            case 6: goto label08;
            default: goto label11;
        };

     label04:
        $r22 = new org.springframework.aop.aspectj.AspectJMethodBeforeAdvice;

        specialinvoke $r22.<org.springframework.aop.aspectj.AspectJMethodBeforeAdvice: void <init>(java.lang.reflect.Method,org.springframework.aop.aspectj.AspectJExpressionPointcut,org.springframework.aop.aspectj.AspectInstanceFactory)>(r4, r10, r0);

        r46 = $r22;

        goto label12;

     label05:
        $r21 = new org.springframework.aop.aspectj.AspectJAfterAdvice;

        specialinvoke $r21.<org.springframework.aop.aspectj.AspectJAfterAdvice: void <init>(java.lang.reflect.Method,org.springframework.aop.aspectj.AspectJExpressionPointcut,org.springframework.aop.aspectj.AspectInstanceFactory)>(r4, r10, r0);

        r46 = $r21;

        goto label12;

     label06:
        $r17 = new org.springframework.aop.aspectj.AspectJAfterReturningAdvice;

        specialinvoke $r17.<org.springframework.aop.aspectj.AspectJAfterReturningAdvice: void <init>(java.lang.reflect.Method,org.springframework.aop.aspectj.AspectJExpressionPointcut,org.springframework.aop.aspectj.AspectInstanceFactory)>(r4, r10, r0);

        r46 = $r17;

        $r18 = virtualinvoke $r5.<org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation: java.lang.'annotation'.Annotation getAnnotation()>();

        r47 = (org.aspectj.lang.'annotation'.AfterReturning) $r18;

        $r19 = interfaceinvoke r47.<org.aspectj.lang.'annotation'.AfterReturning: java.lang.String returning()>();

        $z3 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r19);

        if $z3 == 0 goto label12;

        $r20 = interfaceinvoke r47.<org.aspectj.lang.'annotation'.AfterReturning: java.lang.String returning()>();

        virtualinvoke $r17.<org.springframework.aop.aspectj.AbstractAspectJAdvice: void setReturningName(java.lang.String)>($r20);

        goto label12;

     label07:
        $r12 = new org.springframework.aop.aspectj.AspectJAfterThrowingAdvice;

        specialinvoke $r12.<org.springframework.aop.aspectj.AspectJAfterThrowingAdvice: void <init>(java.lang.reflect.Method,org.springframework.aop.aspectj.AspectJExpressionPointcut,org.springframework.aop.aspectj.AspectInstanceFactory)>(r4, r10, r0);

        r46 = $r12;

        $r13 = virtualinvoke $r5.<org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation: java.lang.'annotation'.Annotation getAnnotation()>();

        r14 = (org.aspectj.lang.'annotation'.AfterThrowing) $r13;

        $r15 = interfaceinvoke r14.<org.aspectj.lang.'annotation'.AfterThrowing: java.lang.String throwing()>();

        $z2 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r15);

        if $z2 == 0 goto label12;

        $r16 = interfaceinvoke r14.<org.aspectj.lang.'annotation'.AfterThrowing: java.lang.String throwing()>();

        virtualinvoke $r12.<org.springframework.aop.aspectj.AbstractAspectJAdvice: void setThrowingName(java.lang.String)>($r16);

        goto label12;

     label08:
        $r9 = new org.springframework.aop.aspectj.AspectJAroundAdvice;

        specialinvoke $r9.<org.springframework.aop.aspectj.AspectJAroundAdvice: void <init>(java.lang.reflect.Method,org.springframework.aop.aspectj.AspectJExpressionPointcut,org.springframework.aop.aspectj.AspectInstanceFactory)>(r4, r10, r0);

        r46 = $r9;

        goto label12;

     label09:
        $r23 = r3.<org.springframework.aop.aspectj.'annotation'.ReflectiveAspectJAdvisorFactory: org.apache.commons.logging.Log logger>;

        $z4 = interfaceinvoke $r23.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z4 == 0 goto label10;

        $r25 = r3.<org.springframework.aop.aspectj.'annotation'.ReflectiveAspectJAdvisorFactory: org.apache.commons.logging.Log logger>;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>(java.lang.String)>("Processing pointcut \'");

        $r26 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.String getName()>();

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r25.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r29);

     label10:
        return null;

     label11:
        $r30 = new java.lang.UnsupportedOperationException;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unsupported advice type on method ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r33);

        throw $r30;

     label12:
        virtualinvoke r46.<org.springframework.aop.aspectj.AbstractAspectJAdvice: void setAspectName(java.lang.String)>(r11);

        virtualinvoke r46.<org.springframework.aop.aspectj.AbstractAspectJAdvice: void setDeclarationOrder(int)>(i2);

        $r48 = r3.<org.springframework.aop.aspectj.'annotation'.ReflectiveAspectJAdvisorFactory: org.springframework.core.ParameterNameDiscoverer parameterNameDiscoverer>;

        $r49 = interfaceinvoke $r48.<org.springframework.core.ParameterNameDiscoverer: java.lang.String[] getParameterNames(java.lang.reflect.Method)>(r4);

        if $r49 == null goto label13;

        virtualinvoke r46.<org.springframework.aop.aspectj.AbstractAspectJAdvice: void setArgumentNamesFromStringArray(java.lang.String[])>($r49);

     label13:
        virtualinvoke r46.<org.springframework.aop.aspectj.AbstractAspectJAdvice: void calculateArgumentBindings()>();

        return r46;
    }

    static int[] $SWITCH_TABLE$org$springframework$aop$aspectj$annotation$AbstractAspectJAdvisorFactory$AspectJAnnotationType()
    {
        org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationType $r3, $r4, $r5, $r6, $r7, $r8;
        java.lang.NoSuchFieldError $r9, $r10, $r11, $r12, $r13, $r14;
        int[] $r0, r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationType[] $r1;

        $r0 = <org.springframework.aop.aspectj.'annotation'.ReflectiveAspectJAdvisorFactory: int[] $SWITCH_TABLE$org$springframework$aop$aspectj$annotation$AbstractAspectJAdvisorFactory$AspectJAnnotationType>;

        if $r0 == null goto label01;

        return $r0;

     label01:
        $r1 = staticinvoke <org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationType: org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationType[] values()>();

        $i0 = lengthof $r1;

        r2 = newarray (int)[$i0];

     label02:
        $r3 = <org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationType: org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationType AtAfter>;

        $i1 = virtualinvoke $r3.<org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationType: int ordinal()>();

        r2[$i1] = 3;

     label03:
        goto label05;

     label04:
        $r14 := @caughtexception;

     label05:
        $r4 = <org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationType: org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationType AtAfterReturning>;

        $i2 = virtualinvoke $r4.<org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationType: int ordinal()>();

        r2[$i2] = 4;

     label06:
        goto label08;

     label07:
        $r13 := @caughtexception;

     label08:
        $r5 = <org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationType: org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationType AtAfterThrowing>;

        $i3 = virtualinvoke $r5.<org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationType: int ordinal()>();

        r2[$i3] = 5;

     label09:
        goto label11;

     label10:
        $r12 := @caughtexception;

     label11:
        $r6 = <org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationType: org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationType AtAround>;

        $i4 = virtualinvoke $r6.<org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationType: int ordinal()>();

        r2[$i4] = 6;

     label12:
        goto label14;

     label13:
        $r11 := @caughtexception;

     label14:
        $r7 = <org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationType: org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationType AtBefore>;

        $i5 = virtualinvoke $r7.<org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationType: int ordinal()>();

        r2[$i5] = 2;

     label15:
        goto label17;

     label16:
        $r10 := @caughtexception;

     label17:
        $r8 = <org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationType: org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationType AtPointcut>;

        $i6 = virtualinvoke $r8.<org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationType: int ordinal()>();

        r2[$i6] = 1;

     label18:
        goto label20;

     label19:
        $r9 := @caughtexception;

     label20:
        <org.springframework.aop.aspectj.'annotation'.ReflectiveAspectJAdvisorFactory: int[] $SWITCH_TABLE$org$springframework$aop$aspectj$annotation$AbstractAspectJAdvisorFactory$AspectJAnnotationType> = r2;

        return r2;

        catch java.lang.NoSuchFieldError from label02 to label03 with label04;
        catch java.lang.NoSuchFieldError from label05 to label06 with label07;
        catch java.lang.NoSuchFieldError from label08 to label09 with label10;
        catch java.lang.NoSuchFieldError from label11 to label12 with label13;
        catch java.lang.NoSuchFieldError from label14 to label15 with label16;
        catch java.lang.NoSuchFieldError from label17 to label18 with label19;
    }
}
