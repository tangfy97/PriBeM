class net.oauth.signature.HMAC_SHA1 extends net.oauth.signature.OAuthSignatureMethod
{
    private static final java.lang.String ENCODING;
    private static final java.lang.String MAC_NAME;
    private javax.crypto.SecretKey key;

    void <init>()
    {
        net.oauth.signature.HMAC_SHA1 r0;

        r0 := @this: net.oauth.signature.HMAC_SHA1;

        specialinvoke r0.<net.oauth.signature.OAuthSignatureMethod: void <init>()>();

        r0.<net.oauth.signature.HMAC_SHA1: javax.crypto.SecretKey key> = null;

        return;
    }

    protected java.lang.String getSignature(java.lang.String) throws net.oauth.OAuthException
    {
        net.oauth.OAuthException $r5, $r7;
        byte[] $r2;
        net.oauth.signature.HMAC_SHA1 r0;
        java.security.GeneralSecurityException $r6;
        java.lang.String r1, $r3;
        java.io.UnsupportedEncodingException $r4;

        r0 := @this: net.oauth.signature.HMAC_SHA1;

        r1 := @parameter0: java.lang.String;

     label1:
        $r2 = specialinvoke r0.<net.oauth.signature.HMAC_SHA1: byte[] computeSignature(java.lang.String)>(r1);

        $r3 = staticinvoke <net.oauth.signature.HMAC_SHA1: java.lang.String base64Encode(byte[])>($r2);

     label2:
        return $r3;

     label3:
        $r6 := @caughtexception;

        $r7 = new net.oauth.OAuthException;

        specialinvoke $r7.<net.oauth.OAuthException: void <init>(java.lang.Throwable)>($r6);

        throw $r7;

     label4:
        $r4 := @caughtexception;

        $r5 = new net.oauth.OAuthException;

        specialinvoke $r5.<net.oauth.OAuthException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch java.security.GeneralSecurityException from label1 to label2 with label3;
        catch java.io.UnsupportedEncodingException from label1 to label2 with label4;
    }

    protected boolean isValid(java.lang.String, java.lang.String) throws net.oauth.OAuthException
    {
        net.oauth.OAuthException $r6, $r8;
        byte[] $r2, $r4;
        net.oauth.signature.HMAC_SHA1 r0;
        java.security.GeneralSecurityException $r7;
        java.lang.String r1, r3;
        java.io.UnsupportedEncodingException $r5;
        boolean $z0;

        r0 := @this: net.oauth.signature.HMAC_SHA1;

        r3 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

     label1:
        $r2 = specialinvoke r0.<net.oauth.signature.HMAC_SHA1: byte[] computeSignature(java.lang.String)>(r1);

        $r4 = staticinvoke <net.oauth.signature.HMAC_SHA1: byte[] decodeBase64(java.lang.String)>(r3);

        $z0 = staticinvoke <net.oauth.signature.HMAC_SHA1: boolean equals(byte[],byte[])>($r2, $r4);

     label2:
        return $z0;

     label3:
        $r7 := @caughtexception;

        $r8 = new net.oauth.OAuthException;

        specialinvoke $r8.<net.oauth.OAuthException: void <init>(java.lang.Throwable)>($r7);

        throw $r8;

     label4:
        $r5 := @caughtexception;

        $r6 = new net.oauth.OAuthException;

        specialinvoke $r6.<net.oauth.OAuthException: void <init>(java.lang.Throwable)>($r5);

        throw $r6;

        catch java.security.GeneralSecurityException from label1 to label2 with label3;
        catch java.io.UnsupportedEncodingException from label1 to label2 with label4;
    }

    private byte[] computeSignature(java.lang.String) throws java.security.GeneralSecurityException, java.io.UnsupportedEncodingException
    {
        java.lang.Throwable $r18;
        byte[] $r4, $r5, $r15;
        javax.crypto.spec.SecretKeySpec $r16;
        java.lang.String r3, $r7, $r8, $r11, $r12, $r14;
        javax.crypto.Mac $r2;
        net.oauth.signature.HMAC_SHA1 r0;
        java.lang.StringBuilder $r6, $r9, $r10, $r13;
        javax.crypto.SecretKey $r1, $r17;

        r0 := @this: net.oauth.signature.HMAC_SHA1;

        r3 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        $r1 = r0.<net.oauth.signature.HMAC_SHA1: javax.crypto.SecretKey key>;

        if $r1 != null goto label2;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke r0.<net.oauth.signature.HMAC_SHA1: java.lang.String getConsumerSecret()>();

        $r8 = staticinvoke <net.oauth.OAuth: java.lang.String percentEncode(java.lang.String)>($r7);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(38);

        $r11 = virtualinvoke r0.<net.oauth.signature.HMAC_SHA1: java.lang.String getTokenSecret()>();

        $r12 = staticinvoke <net.oauth.OAuth: java.lang.String percentEncode(java.lang.String)>($r11);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = virtualinvoke $r14.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        $r16 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r16.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r15, "HmacSHA1");

        r0.<net.oauth.signature.HMAC_SHA1: javax.crypto.SecretKey key> = $r16;

     label2:
        $r17 = r0.<net.oauth.signature.HMAC_SHA1: javax.crypto.SecretKey key>;

        exitmonitor r0;

     label3:
        goto label6;

     label4:
        $r18 := @caughtexception;

        exitmonitor r0;

     label5:
        throw $r18;

     label6:
        $r2 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>("HmacSHA1");

        virtualinvoke $r2.<javax.crypto.Mac: void init(java.security.Key)>($r17);

        $r4 = virtualinvoke r3.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        $r5 = virtualinvoke $r2.<javax.crypto.Mac: byte[] doFinal(byte[])>($r4);

        return $r5;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void setConsumerSecret(java.lang.String)
    {
        java.lang.Throwable $r2;
        java.lang.String r1;
        net.oauth.signature.HMAC_SHA1 r0;

        r0 := @this: net.oauth.signature.HMAC_SHA1;

        r1 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        r0.<net.oauth.signature.HMAC_SHA1: javax.crypto.SecretKey key> = null;

        exitmonitor r0;

     label2:
        goto label5;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

     label4:
        throw $r2;

     label5:
        specialinvoke r0.<net.oauth.signature.OAuthSignatureMethod: void setConsumerSecret(java.lang.String)>(r1);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void setTokenSecret(java.lang.String)
    {
        java.lang.Throwable $r2;
        java.lang.String r1;
        net.oauth.signature.HMAC_SHA1 r0;

        r0 := @this: net.oauth.signature.HMAC_SHA1;

        r1 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        r0.<net.oauth.signature.HMAC_SHA1: javax.crypto.SecretKey key> = null;

        exitmonitor r0;

     label2:
        goto label5;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

     label4:
        throw $r2;

     label5:
        specialinvoke r0.<net.oauth.signature.OAuthSignatureMethod: void setTokenSecret(java.lang.String)>(r1);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static void <clinit>()
    {
        <net.oauth.signature.HMAC_SHA1: java.lang.String MAC_NAME> = "HmacSHA1";

        <net.oauth.signature.HMAC_SHA1: java.lang.String ENCODING> = "UTF-8";

        return;
    }
}
