public class arq.cmdline.ModGeneral extends arq.cmdline.ModBase
{
    private arq.cmdline.CallbackHelp helpCallback;
    private final arq.cmdline.ArgDecl argDeclHelp;
    private final arq.cmdline.ArgDecl argDeclVerbose;
    private final arq.cmdline.ArgDecl argDeclQuiet;
    private final arq.cmdline.ArgDecl argDeclDebug;
    protected boolean verbose;
    protected boolean quiet;
    protected boolean debug;
    protected boolean help;

    public void <init>(arq.cmdline.CallbackHelp)
    {
        arq.cmdline.ModGeneral r0;
        arq.cmdline.ArgDecl $r1, $r3, $r5, $r7;
        java.lang.String[] $r2, $r4, $r6, $r8;
        arq.cmdline.CallbackHelp r9;

        r0 := @this: arq.cmdline.ModGeneral;

        r9 := @parameter0: arq.cmdline.CallbackHelp;

        specialinvoke r0.<arq.cmdline.ModBase: void <init>()>();

        r0.<arq.cmdline.ModGeneral: arq.cmdline.CallbackHelp helpCallback> = null;

        $r1 = new arq.cmdline.ArgDecl;

        $r2 = newarray (java.lang.String)[1];

        $r2[0] = "h";

        specialinvoke $r1.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(0, "help", $r2);

        r0.<arq.cmdline.ModGeneral: arq.cmdline.ArgDecl argDeclHelp> = $r1;

        $r3 = new arq.cmdline.ArgDecl;

        $r4 = newarray (java.lang.String)[1];

        $r4[0] = "verbose";

        specialinvoke $r3.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(0, "v", $r4);

        r0.<arq.cmdline.ModGeneral: arq.cmdline.ArgDecl argDeclVerbose> = $r3;

        $r5 = new arq.cmdline.ArgDecl;

        $r6 = newarray (java.lang.String)[1];

        $r6[0] = "quiet";

        specialinvoke $r5.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(0, "q", $r6);

        r0.<arq.cmdline.ModGeneral: arq.cmdline.ArgDecl argDeclQuiet> = $r5;

        $r7 = new arq.cmdline.ArgDecl;

        $r8 = newarray (java.lang.String)[0];

        specialinvoke $r7.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(0, "debug", $r8);

        r0.<arq.cmdline.ModGeneral: arq.cmdline.ArgDecl argDeclDebug> = $r7;

        r0.<arq.cmdline.ModGeneral: boolean verbose> = 0;

        r0.<arq.cmdline.ModGeneral: boolean quiet> = 0;

        r0.<arq.cmdline.ModGeneral: boolean debug> = 0;

        r0.<arq.cmdline.ModGeneral: boolean help> = 0;

        r0.<arq.cmdline.ModGeneral: arq.cmdline.CallbackHelp helpCallback> = r9;

        return;
    }

    public void registerWith(arq.cmdline.CmdGeneral)
    {
        arq.cmdline.Usage $r1;
        arq.cmdline.ModGeneral r2;
        arq.cmdline.CmdGeneral r0;
        arq.cmdline.ArgDecl $r3, $r4, $r5, $r6;

        r2 := @this: arq.cmdline.ModGeneral;

        r0 := @parameter0: arq.cmdline.CmdGeneral;

        $r1 = virtualinvoke r0.<arq.cmdline.CmdGeneral: arq.cmdline.Usage getUsage()>();

        virtualinvoke $r1.<arq.cmdline.Usage: void startCategory(java.lang.String)>("General");

        $r3 = r2.<arq.cmdline.ModGeneral: arq.cmdline.ArgDecl argDeclVerbose>;

        virtualinvoke r0.<arq.cmdline.CmdGeneral: void add(arq.cmdline.ArgDecl,java.lang.String,java.lang.String)>($r3, "-v   --verbose", "Verbose");

        $r4 = r2.<arq.cmdline.ModGeneral: arq.cmdline.ArgDecl argDeclQuiet>;

        virtualinvoke r0.<arq.cmdline.CmdGeneral: void add(arq.cmdline.ArgDecl,java.lang.String,java.lang.String)>($r4, "-q   --quiet", "Run with minimal output");

        $r5 = r2.<arq.cmdline.ModGeneral: arq.cmdline.ArgDecl argDeclDebug>;

        virtualinvoke r0.<arq.cmdline.CmdGeneral: void add(arq.cmdline.ArgDecl,java.lang.String,java.lang.String)>($r5, "--debug", "Output information for debugging");

        $r6 = r2.<arq.cmdline.ModGeneral: arq.cmdline.ArgDecl argDeclHelp>;

        virtualinvoke r0.<arq.cmdline.CmdGeneral: void add(arq.cmdline.ArgDecl,java.lang.String,java.lang.String)>($r6, "--help", null);

        return;
    }

    public void processArgs(arq.cmdline.CmdArgModule)
    {
        arq.cmdline.ModGeneral r0;
        arq.cmdline.ArgDecl $r2, $r3, $r4, $r5;
        arq.cmdline.CmdArgModule r1;
        arq.cmdline.CallbackHelp $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: arq.cmdline.ModGeneral;

        r1 := @parameter0: arq.cmdline.CmdArgModule;

        $r2 = r0.<arq.cmdline.ModGeneral: arq.cmdline.ArgDecl argDeclVerbose>;

        $z0 = virtualinvoke r1.<arq.cmdline.CmdArgModule: boolean contains(arq.cmdline.ArgDecl)>($r2);

        r0.<arq.cmdline.ModGeneral: boolean verbose> = $z0;

        $r3 = r0.<arq.cmdline.ModGeneral: arq.cmdline.ArgDecl argDeclQuiet>;

        $z1 = virtualinvoke r1.<arq.cmdline.CmdArgModule: boolean contains(arq.cmdline.ArgDecl)>($r3);

        r0.<arq.cmdline.ModGeneral: boolean quiet> = $z1;

        $r4 = r0.<arq.cmdline.ModGeneral: arq.cmdline.ArgDecl argDeclDebug>;

        $z2 = virtualinvoke r1.<arq.cmdline.CmdArgModule: boolean contains(arq.cmdline.ArgDecl)>($r4);

        r0.<arq.cmdline.ModGeneral: boolean debug> = $z2;

        $z3 = r0.<arq.cmdline.ModGeneral: boolean debug>;

        if $z3 == 0 goto label1;

        r0.<arq.cmdline.ModGeneral: boolean verbose> = 1;

     label1:
        $r5 = r0.<arq.cmdline.ModGeneral: arq.cmdline.ArgDecl argDeclHelp>;

        $z4 = virtualinvoke r1.<arq.cmdline.CmdArgModule: boolean contains(arq.cmdline.ArgDecl)>($r5);

        r0.<arq.cmdline.ModGeneral: boolean help> = $z4;

        $z5 = r0.<arq.cmdline.ModGeneral: boolean help>;

        if $z5 == 0 goto label2;

        $r6 = r0.<arq.cmdline.ModGeneral: arq.cmdline.CallbackHelp helpCallback>;

        interfaceinvoke $r6.<arq.cmdline.CallbackHelp: void doHelp()>();

     label2:
        return;
    }
}
