public final class org.joda.time.Interval extends org.joda.time.base.BaseInterval implements org.joda.time.ReadableInterval, java.io.Serializable
{
    private static final long serialVersionUID;

    public void <init>(long, long)
    {
        org.joda.time.Interval r0;
        long l0, l1;

        r0 := @this: org.joda.time.Interval;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        specialinvoke r0.<org.joda.time.base.BaseInterval: void <init>(long,long,org.joda.time.Chronology)>(l0, l1, null);

        return;
    }

    public void <init>(long, long, org.joda.time.DateTimeZone)
    {
        org.joda.time.Interval r0;
        org.joda.time.DateTimeZone r1;
        org.joda.time.chrono.ISOChronology $r2;
        long l0, l1;

        r0 := @this: org.joda.time.Interval;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        r1 := @parameter2: org.joda.time.DateTimeZone;

        $r2 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>(r1);

        specialinvoke r0.<org.joda.time.base.BaseInterval: void <init>(long,long,org.joda.time.Chronology)>(l0, l1, $r2);

        return;
    }

    public void <init>(long, long, org.joda.time.Chronology)
    {
        org.joda.time.Interval r0;
        org.joda.time.Chronology r1;
        long l0, l1;

        r0 := @this: org.joda.time.Interval;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        r1 := @parameter2: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.BaseInterval: void <init>(long,long,org.joda.time.Chronology)>(l0, l1, r1);

        return;
    }

    public void <init>(org.joda.time.ReadableInstant, org.joda.time.ReadableInstant)
    {
        org.joda.time.ReadableInstant r1, r2;
        org.joda.time.Interval r0;

        r0 := @this: org.joda.time.Interval;

        r1 := @parameter0: org.joda.time.ReadableInstant;

        r2 := @parameter1: org.joda.time.ReadableInstant;

        specialinvoke r0.<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>(r1, r2);

        return;
    }

    public void <init>(org.joda.time.ReadableInstant, org.joda.time.ReadableDuration)
    {
        org.joda.time.ReadableInstant r1;
        org.joda.time.Interval r0;
        org.joda.time.ReadableDuration r2;

        r0 := @this: org.joda.time.Interval;

        r1 := @parameter0: org.joda.time.ReadableInstant;

        r2 := @parameter1: org.joda.time.ReadableDuration;

        specialinvoke r0.<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableDuration)>(r1, r2);

        return;
    }

    public void <init>(org.joda.time.ReadableDuration, org.joda.time.ReadableInstant)
    {
        org.joda.time.ReadableInstant r2;
        org.joda.time.Interval r0;
        org.joda.time.ReadableDuration r1;

        r0 := @this: org.joda.time.Interval;

        r1 := @parameter0: org.joda.time.ReadableDuration;

        r2 := @parameter1: org.joda.time.ReadableInstant;

        specialinvoke r0.<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadableDuration,org.joda.time.ReadableInstant)>(r1, r2);

        return;
    }

    public void <init>(org.joda.time.ReadableInstant, org.joda.time.ReadablePeriod)
    {
        org.joda.time.ReadableInstant r1;
        org.joda.time.Interval r0;
        org.joda.time.ReadablePeriod r2;

        r0 := @this: org.joda.time.Interval;

        r1 := @parameter0: org.joda.time.ReadableInstant;

        r2 := @parameter1: org.joda.time.ReadablePeriod;

        specialinvoke r0.<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadablePeriod)>(r1, r2);

        return;
    }

    public void <init>(org.joda.time.ReadablePeriod, org.joda.time.ReadableInstant)
    {
        org.joda.time.ReadableInstant r2;
        org.joda.time.Interval r0;
        org.joda.time.ReadablePeriod r1;

        r0 := @this: org.joda.time.Interval;

        r1 := @parameter0: org.joda.time.ReadablePeriod;

        r2 := @parameter1: org.joda.time.ReadableInstant;

        specialinvoke r0.<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadablePeriod,org.joda.time.ReadableInstant)>(r1, r2);

        return;
    }

    public void <init>(java.lang.Object)
    {
        org.joda.time.Interval r0;
        java.lang.Object r1;

        r0 := @this: org.joda.time.Interval;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<org.joda.time.base.BaseInterval: void <init>(java.lang.Object,org.joda.time.Chronology)>(r1, null);

        return;
    }

    public void <init>(java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.Chronology r2;
        org.joda.time.Interval r0;
        java.lang.Object r1;

        r0 := @this: org.joda.time.Interval;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.BaseInterval: void <init>(java.lang.Object,org.joda.time.Chronology)>(r1, r2);

        return;
    }

    public org.joda.time.Interval toInterval()
    {
        org.joda.time.Interval r0;

        r0 := @this: org.joda.time.Interval;

        return r0;
    }

    public org.joda.time.Interval overlap(org.joda.time.ReadableInterval)
    {
        org.joda.time.Chronology $r3;
        org.joda.time.ReadableInterval $r0, r4;
        long $l0, $l1, $l2, $l3, $l4, $l5;
        org.joda.time.Interval r1, $r2;
        boolean $z0;

        r1 := @this: org.joda.time.Interval;

        r4 := @parameter0: org.joda.time.ReadableInterval;

        $r0 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.ReadableInterval getReadableInterval(org.joda.time.ReadableInterval)>(r4);

        $z0 = virtualinvoke r1.<org.joda.time.Interval: boolean overlaps(org.joda.time.ReadableInterval)>($r0);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $l0 = virtualinvoke r1.<org.joda.time.Interval: long getStartMillis()>();

        $l1 = interfaceinvoke $r0.<org.joda.time.ReadableInterval: long getStartMillis()>();

        $l2 = staticinvoke <java.lang.Math: long max(long,long)>($l0, $l1);

        $l3 = virtualinvoke r1.<org.joda.time.Interval: long getEndMillis()>();

        $l4 = interfaceinvoke $r0.<org.joda.time.ReadableInterval: long getEndMillis()>();

        $l5 = staticinvoke <java.lang.Math: long min(long,long)>($l3, $l4);

        $r2 = new org.joda.time.Interval;

        $r3 = virtualinvoke r1.<org.joda.time.Interval: org.joda.time.Chronology getChronology()>();

        specialinvoke $r2.<org.joda.time.Interval: void <init>(long,long,org.joda.time.Chronology)>($l2, $l5, $r3);

        return $r2;
    }

    public org.joda.time.Interval gap(org.joda.time.ReadableInterval)
    {
        org.joda.time.Chronology $r3, $r5;
        org.joda.time.ReadableInterval $r0, r6;
        long $l0, $l1, $l2, $l3;
        org.joda.time.Interval r1, $r7, $r8;
        byte $b4, $b5;
        int $i6, $i7;

        r1 := @this: org.joda.time.Interval;

        r6 := @parameter0: org.joda.time.ReadableInterval;

        $r0 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.ReadableInterval getReadableInterval(org.joda.time.ReadableInterval)>(r6);

        $l0 = interfaceinvoke $r0.<org.joda.time.ReadableInterval: long getStartMillis()>();

        $l1 = interfaceinvoke $r0.<org.joda.time.ReadableInterval: long getEndMillis()>();

        $l2 = virtualinvoke r1.<org.joda.time.Interval: long getStartMillis()>();

        $l3 = virtualinvoke r1.<org.joda.time.Interval: long getEndMillis()>();

        $b4 = $l2 cmp $l1;

        $i6 = (int) $b4;

        if $i6 <= 0 goto label1;

        $r7 = new org.joda.time.Interval;

        $r5 = virtualinvoke r1.<org.joda.time.Interval: org.joda.time.Chronology getChronology()>();

        specialinvoke $r7.<org.joda.time.Interval: void <init>(long,long,org.joda.time.Chronology)>($l1, $l2, $r5);

        return $r7;

     label1:
        $b5 = $l0 cmp $l3;

        $i7 = (int) $b5;

        if $i7 <= 0 goto label2;

        $r8 = new org.joda.time.Interval;

        $r3 = virtualinvoke r1.<org.joda.time.Interval: org.joda.time.Chronology getChronology()>();

        specialinvoke $r8.<org.joda.time.Interval: void <init>(long,long,org.joda.time.Chronology)>($l3, $l0, $r3);

        return $r8;

     label2:
        return null;
    }

    public boolean abuts(org.joda.time.ReadableInterval)
    {
        org.joda.time.ReadableInterval r0;
        long $l0, $l1, $l3, $l4, $l6, $l7, $l9;
        org.joda.time.Interval r1;
        byte $b2, $b5, $b8, $b10;
        boolean $z0, $z1;

        r1 := @this: org.joda.time.Interval;

        r0 := @parameter0: org.joda.time.ReadableInterval;

        if r0 != null goto label4;

        $l6 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>();

        $l7 = virtualinvoke r1.<org.joda.time.Interval: long getStartMillis()>();

        $b8 = $l7 cmp $l6;

        if $b8 == 0 goto label1;

        $l9 = virtualinvoke r1.<org.joda.time.Interval: long getEndMillis()>();

        $b10 = $l9 cmp $l6;

        if $b10 != 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;

     label4:
        $l0 = interfaceinvoke r0.<org.joda.time.ReadableInterval: long getEndMillis()>();

        $l1 = virtualinvoke r1.<org.joda.time.Interval: long getStartMillis()>();

        $b2 = $l0 cmp $l1;

        if $b2 == 0 goto label5;

        $l3 = virtualinvoke r1.<org.joda.time.Interval: long getEndMillis()>();

        $l4 = interfaceinvoke r0.<org.joda.time.ReadableInterval: long getStartMillis()>();

        $b5 = $l3 cmp $l4;

        if $b5 != 0 goto label6;

     label5:
        $z1 = 1;

        goto label7;

     label6:
        $z1 = 0;

     label7:
        return $z1;
    }

    public org.joda.time.Interval withChronology(org.joda.time.Chronology)
    {
        org.joda.time.Interval r0, $r3;
        org.joda.time.Chronology $r1, r2;
        long $l0, $l1;

        r0 := @this: org.joda.time.Interval;

        r2 := @parameter0: org.joda.time.Chronology;

        $r1 = virtualinvoke r0.<org.joda.time.Interval: org.joda.time.Chronology getChronology()>();

        if $r1 != r2 goto label1;

        return r0;

     label1:
        $r3 = new org.joda.time.Interval;

        $l0 = virtualinvoke r0.<org.joda.time.Interval: long getStartMillis()>();

        $l1 = virtualinvoke r0.<org.joda.time.Interval: long getEndMillis()>();

        specialinvoke $r3.<org.joda.time.Interval: void <init>(long,long,org.joda.time.Chronology)>($l0, $l1, r2);

        return $r3;
    }

    public org.joda.time.Interval withStartMillis(long)
    {
        org.joda.time.Interval r0, $r1;
        byte $b2;
        org.joda.time.Chronology $r2;
        long l0, $l1, $l3;

        r0 := @this: org.joda.time.Interval;

        l0 := @parameter0: long;

        $l1 = virtualinvoke r0.<org.joda.time.Interval: long getStartMillis()>();

        $b2 = l0 cmp $l1;

        if $b2 != 0 goto label1;

        return r0;

     label1:
        $r1 = new org.joda.time.Interval;

        $l3 = virtualinvoke r0.<org.joda.time.Interval: long getEndMillis()>();

        $r2 = virtualinvoke r0.<org.joda.time.Interval: org.joda.time.Chronology getChronology()>();

        specialinvoke $r1.<org.joda.time.Interval: void <init>(long,long,org.joda.time.Chronology)>(l0, $l3, $r2);

        return $r1;
    }

    public org.joda.time.Interval withStart(org.joda.time.ReadableInstant)
    {
        org.joda.time.Interval r1, $r2;
        org.joda.time.ReadableInstant r0;
        long $l0;

        r1 := @this: org.joda.time.Interval;

        r0 := @parameter0: org.joda.time.ReadableInstant;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r0);

        $r2 = virtualinvoke r1.<org.joda.time.Interval: org.joda.time.Interval withStartMillis(long)>($l0);

        return $r2;
    }

    public org.joda.time.Interval withEndMillis(long)
    {
        org.joda.time.Interval r0, $r1;
        byte $b2;
        org.joda.time.Chronology $r2;
        long l0, $l1, $l3;

        r0 := @this: org.joda.time.Interval;

        l0 := @parameter0: long;

        $l1 = virtualinvoke r0.<org.joda.time.Interval: long getEndMillis()>();

        $b2 = l0 cmp $l1;

        if $b2 != 0 goto label1;

        return r0;

     label1:
        $r1 = new org.joda.time.Interval;

        $l3 = virtualinvoke r0.<org.joda.time.Interval: long getStartMillis()>();

        $r2 = virtualinvoke r0.<org.joda.time.Interval: org.joda.time.Chronology getChronology()>();

        specialinvoke $r1.<org.joda.time.Interval: void <init>(long,long,org.joda.time.Chronology)>($l3, l0, $r2);

        return $r1;
    }

    public org.joda.time.Interval withEnd(org.joda.time.ReadableInstant)
    {
        org.joda.time.Interval r1, $r2;
        org.joda.time.ReadableInstant r0;
        long $l0;

        r1 := @this: org.joda.time.Interval;

        r0 := @parameter0: org.joda.time.ReadableInstant;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r0);

        $r2 = virtualinvoke r1.<org.joda.time.Interval: org.joda.time.Interval withEndMillis(long)>($l0);

        return $r2;
    }

    public org.joda.time.Interval withDurationAfterStart(org.joda.time.ReadableDuration)
    {
        org.joda.time.ReadableDuration r0;
        org.joda.time.Chronology $r2;
        long $l0, $l1, $l3, $l4;
        org.joda.time.Interval r1, $r3;
        byte $b2;

        r1 := @this: org.joda.time.Interval;

        r0 := @parameter0: org.joda.time.ReadableDuration;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long getDurationMillis(org.joda.time.ReadableDuration)>(r0);

        $l1 = virtualinvoke r1.<org.joda.time.Interval: long toDurationMillis()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label1;

        return r1;

     label1:
        $r2 = virtualinvoke r1.<org.joda.time.Interval: org.joda.time.Chronology getChronology()>();

        $l3 = virtualinvoke r1.<org.joda.time.Interval: long getStartMillis()>();

        $l4 = virtualinvoke $r2.<org.joda.time.Chronology: long add(long,long,int)>($l3, $l0, 1);

        $r3 = new org.joda.time.Interval;

        specialinvoke $r3.<org.joda.time.Interval: void <init>(long,long,org.joda.time.Chronology)>($l3, $l4, $r2);

        return $r3;
    }

    public org.joda.time.Interval withDurationBeforeEnd(org.joda.time.ReadableDuration)
    {
        org.joda.time.ReadableDuration r0;
        org.joda.time.Chronology $r2;
        long $l0, $l1, $l3, $l4;
        org.joda.time.Interval r1, $r4;
        byte $b2;
        int $i6;

        r1 := @this: org.joda.time.Interval;

        r0 := @parameter0: org.joda.time.ReadableDuration;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long getDurationMillis(org.joda.time.ReadableDuration)>(r0);

        $l1 = virtualinvoke r1.<org.joda.time.Interval: long toDurationMillis()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label1;

        return r1;

     label1:
        $r2 = virtualinvoke r1.<org.joda.time.Interval: org.joda.time.Chronology getChronology()>();

        $l3 = virtualinvoke r1.<org.joda.time.Interval: long getEndMillis()>();

        $i6 = (int) -1;

        $l4 = virtualinvoke $r2.<org.joda.time.Chronology: long add(long,long,int)>($l3, $l0, $i6);

        $r4 = new org.joda.time.Interval;

        specialinvoke $r4.<org.joda.time.Interval: void <init>(long,long,org.joda.time.Chronology)>($l4, $l3, $r2);

        return $r4;
    }

    public org.joda.time.Interval withPeriodAfterStart(org.joda.time.ReadablePeriod)
    {
        org.joda.time.ReadablePeriod r0;
        org.joda.time.Interval r1, $r3, $r4;
        org.joda.time.Chronology $r2;
        long $l0, $l1;

        r1 := @this: org.joda.time.Interval;

        r0 := @parameter0: org.joda.time.ReadablePeriod;

        if r0 != null goto label1;

        $r4 = virtualinvoke r1.<org.joda.time.Interval: org.joda.time.Interval withDurationAfterStart(org.joda.time.ReadableDuration)>(null);

        return $r4;

     label1:
        $r2 = virtualinvoke r1.<org.joda.time.Interval: org.joda.time.Chronology getChronology()>();

        $l0 = virtualinvoke r1.<org.joda.time.Interval: long getStartMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.Chronology: long add(org.joda.time.ReadablePeriod,long,int)>(r0, $l0, 1);

        $r3 = new org.joda.time.Interval;

        specialinvoke $r3.<org.joda.time.Interval: void <init>(long,long,org.joda.time.Chronology)>($l0, $l1, $r2);

        return $r3;
    }

    public org.joda.time.Interval withPeriodBeforeEnd(org.joda.time.ReadablePeriod)
    {
        org.joda.time.Chronology $r2;
        long $l0, $l1;
        org.joda.time.ReadablePeriod r0;
        org.joda.time.Interval r1, $r4, $r5;
        int $i3;

        r1 := @this: org.joda.time.Interval;

        r0 := @parameter0: org.joda.time.ReadablePeriod;

        if r0 != null goto label1;

        $r4 = virtualinvoke r1.<org.joda.time.Interval: org.joda.time.Interval withDurationBeforeEnd(org.joda.time.ReadableDuration)>(null);

        return $r4;

     label1:
        $r2 = virtualinvoke r1.<org.joda.time.Interval: org.joda.time.Chronology getChronology()>();

        $l0 = virtualinvoke r1.<org.joda.time.Interval: long getEndMillis()>();

        $i3 = (int) -1;

        $l1 = virtualinvoke $r2.<org.joda.time.Chronology: long add(org.joda.time.ReadablePeriod,long,int)>(r0, $l0, $i3);

        $r5 = new org.joda.time.Interval;

        specialinvoke $r5.<org.joda.time.Interval: void <init>(long,long,org.joda.time.Chronology)>($l1, $l0, $r2);

        return $r5;
    }

    public static void <clinit>()
    {
        <org.joda.time.Interval: long serialVersionUID> = 4922451897541386752L;

        return;
    }
}
