final class kodkod.util.ints.Ints$SingletonIntSet extends kodkod.util.ints.AbstractIntSet
{
    private final int i;

    void <init>(int)
    {
        int i0;
        kodkod.util.ints.Ints$SingletonIntSet r0;

        r0 := @this: kodkod.util.ints.Ints$SingletonIntSet;

        i0 := @parameter0: int;

        specialinvoke r0.<kodkod.util.ints.AbstractIntSet: void <init>()>();

        r0.<kodkod.util.ints.Ints$SingletonIntSet: int i> = i0;

        return;
    }

    public boolean contains(int)
    {
        int i0, $i1;
        kodkod.util.ints.Ints$SingletonIntSet r0;

        r0 := @this: kodkod.util.ints.Ints$SingletonIntSet;

        i0 := @parameter0: int;

        $i1 = r0.<kodkod.util.ints.Ints$SingletonIntSet: int i>;

        if $i1 != i0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public int min()
    {
        int $i0;
        kodkod.util.ints.Ints$SingletonIntSet r0;

        r0 := @this: kodkod.util.ints.Ints$SingletonIntSet;

        $i0 = r0.<kodkod.util.ints.Ints$SingletonIntSet: int i>;

        return $i0;
    }

    public int max()
    {
        int $i0;
        kodkod.util.ints.Ints$SingletonIntSet r0;

        r0 := @this: kodkod.util.ints.Ints$SingletonIntSet;

        $i0 = r0.<kodkod.util.ints.Ints$SingletonIntSet: int i>;

        return $i0;
    }

    public kodkod.util.ints.IntIterator iterator(int, int)
    {
        kodkod.util.ints.Ints$SingletonIntSet r1;
        int i0, i1;
        kodkod.util.ints.Ints$SingletonIntSet$1 $r0;

        r1 := @this: kodkod.util.ints.Ints$SingletonIntSet;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new kodkod.util.ints.Ints$SingletonIntSet$1;

        specialinvoke $r0.<kodkod.util.ints.Ints$SingletonIntSet$1: void <init>(kodkod.util.ints.Ints$SingletonIntSet,int,int)>(r1, i0, i1);

        return $r0;
    }

    public int size()
    {
        kodkod.util.ints.Ints$SingletonIntSet r0;

        r0 := @this: kodkod.util.ints.Ints$SingletonIntSet;

        return 1;
    }

    public kodkod.util.ints.IntSet copy()
    {
        kodkod.util.ints.Ints$SingletonIntSet r0;

        r0 := @this: kodkod.util.ints.Ints$SingletonIntSet;

        return r0;
    }

    public boolean equals(java.lang.Object)
    {
        kodkod.util.ints.IntSet r2;
        kodkod.util.ints.Ints$SingletonIntSet r0;
        int $i0, $i1, $i2;
        java.lang.Object r1;
        boolean $z0, $z1;

        r0 := @this: kodkod.util.ints.Ints$SingletonIntSet;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof kodkod.util.ints.IntSet;

        if $z0 == 0 goto label3;

        r2 = (kodkod.util.ints.IntSet) r1;

        $i0 = interfaceinvoke r2.<kodkod.util.ints.IntSet: int size()>();

        if $i0 != 1 goto label2;

        $i1 = interfaceinvoke r2.<kodkod.util.ints.IntSet: int min()>();

        $i2 = r0.<kodkod.util.ints.Ints$SingletonIntSet: int i>;

        if $i1 != $i2 goto label2;

        return 1;

     label2:
        return 0;

     label3:
        $z1 = specialinvoke r0.<kodkod.util.ints.AbstractIntSet: boolean equals(java.lang.Object)>(r1);

        return $z1;
    }

    public int hashCode()
    {
        int $i0;
        kodkod.util.ints.Ints$SingletonIntSet r0;

        r0 := @this: kodkod.util.ints.Ints$SingletonIntSet;

        $i0 = r0.<kodkod.util.ints.Ints$SingletonIntSet: int i>;

        return $i0;
    }

    public int floor(int)
    {
        kodkod.util.ints.Ints$SingletonIntSet r0;
        int i0, $i1, $i2;
        java.util.NoSuchElementException $r1;

        r0 := @this: kodkod.util.ints.Ints$SingletonIntSet;

        i0 := @parameter0: int;

        $i1 = r0.<kodkod.util.ints.Ints$SingletonIntSet: int i>;

        if $i1 > i0 goto label1;

        $i2 = r0.<kodkod.util.ints.Ints$SingletonIntSet: int i>;

        return $i2;

     label1:
        $r1 = new java.util.NoSuchElementException;

        specialinvoke $r1.<java.util.NoSuchElementException: void <init>()>();

        throw $r1;
    }

    public int ceil(int)
    {
        kodkod.util.ints.Ints$SingletonIntSet r0;
        int i0, $i1, $i2;
        java.util.NoSuchElementException $r1;

        r0 := @this: kodkod.util.ints.Ints$SingletonIntSet;

        i0 := @parameter0: int;

        $i1 = r0.<kodkod.util.ints.Ints$SingletonIntSet: int i>;

        if $i1 < i0 goto label1;

        $i2 = r0.<kodkod.util.ints.Ints$SingletonIntSet: int i>;

        return $i2;

     label1:
        $r1 = new java.util.NoSuchElementException;

        specialinvoke $r1.<java.util.NoSuchElementException: void <init>()>();

        throw $r1;
    }

    public kodkod.util.ints.IntSet clone()
    {
        kodkod.util.ints.Ints$SingletonIntSet r0;

        r0 := @this: kodkod.util.ints.Ints$SingletonIntSet;

        return r0;
    }

    static int access$0(kodkod.util.ints.Ints$SingletonIntSet)
    {
        int $i0;
        kodkod.util.ints.Ints$SingletonIntSet r0;

        r0 := @parameter0: kodkod.util.ints.Ints$SingletonIntSet;

        $i0 = r0.<kodkod.util.ints.Ints$SingletonIntSet: int i>;

        return $i0;
    }
}
