public class ucar.nc2.FileWriter extends java.lang.Object
{
    private static org.slf4j.Logger log;
    private static boolean debug;
    private static boolean debugWrite;
    private ucar.nc2.NetcdfFileWriteable ncfile;
    private java.util.HashMap dimHash;
    private java.util.List varList;
    private ucar.nc2.Structure recordVar;

    public static void setDebugFlags(ucar.nc2.util.DebugFlags)
    {
        ucar.nc2.util.DebugFlags r0;
        boolean $z0, $z1;

        r0 := @parameter0: ucar.nc2.util.DebugFlags;

        $z0 = interfaceinvoke r0.<ucar.nc2.util.DebugFlags: boolean isSet(java.lang.String)>("ncfileWriter/debug");

        <ucar.nc2.FileWriter: boolean debug> = $z0;

        $z1 = interfaceinvoke r0.<ucar.nc2.util.DebugFlags: boolean isSet(java.lang.String)>("ncfileWriter/debugWrite");

        <ucar.nc2.FileWriter: boolean debugWrite> = $z1;

        return;
    }

    public static ucar.nc2.NetcdfFile writeToFile(ucar.nc2.NetcdfFile, java.lang.String) throws java.io.IOException
    {
        ucar.nc2.NetcdfFile r0, $r2;
        java.lang.String r1;

        r0 := @parameter0: ucar.nc2.NetcdfFile;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <ucar.nc2.FileWriter: ucar.nc2.NetcdfFile writeToFile(ucar.nc2.NetcdfFile,java.lang.String,boolean,boolean,java.util.List)>(r0, r1, 0, 0, null);

        return $r2;
    }

    public static ucar.nc2.NetcdfFile writeToFile(ucar.nc2.NetcdfFile, java.lang.String, boolean) throws java.io.IOException
    {
        ucar.nc2.NetcdfFile r0, $r2;
        java.lang.String r1;
        boolean z0;

        r0 := @parameter0: ucar.nc2.NetcdfFile;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r2 = staticinvoke <ucar.nc2.FileWriter: ucar.nc2.NetcdfFile writeToFile(ucar.nc2.NetcdfFile,java.lang.String,boolean,boolean,java.util.List)>(r0, r1, z0, 0, null);

        return $r2;
    }

    public static ucar.nc2.NetcdfFile writeToFile(ucar.nc2.NetcdfFile, java.lang.String, boolean, boolean) throws java.io.IOException
    {
        ucar.nc2.NetcdfFile r0, $r2;
        java.lang.String r1;
        boolean z0, z1;

        r0 := @parameter0: ucar.nc2.NetcdfFile;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        $r2 = staticinvoke <ucar.nc2.FileWriter: ucar.nc2.NetcdfFile writeToFile(ucar.nc2.NetcdfFile,java.lang.String,boolean,boolean,java.util.List)>(r0, r1, z0, z1, null);

        return $r2;
    }

    public static ucar.nc2.NetcdfFile writeToFile(ucar.nc2.NetcdfFile, java.lang.String, boolean, boolean, java.util.List) throws java.io.IOException
    {
        ucar.nc2.Attribute r99, r100, r107;
        java.lang.StringBuilder $r11, $r13, $r14, $r17, $r19, $r21, $r40, $r42, $r43, $r47, $r49, $r50, $r60, $r61, $r63, $r70, $r72, $r73, $r79, $r81, $r82, $r86, $r88, $r90, $r91, $r92, $r94, $r96, $r97;
        ucar.ma2.Array $r39, $r45, $r85;
        ucar.ma2.DataType $r27, $r28, r105;
        int $i0, $i1, i2;
        ucar.nc2.Variable $r16, $r31, r102;
        java.io.PrintStream $r12, $r18, $r41, $r71, $r80, $r87, $r95;
        java.lang.Object $r23, $r34, $r54, $r55, $r58, $r65, $r75;
        ucar.nc2.NetcdfFileWriteable $r1;
        ucar.nc2.Structure $r108;
        java.util.ArrayList $r24;
        java.lang.String r0, $r15, $r20, $r22, $r29, $r30, $r35, $r36, $r38, $r44, $r48, $r51, $r52, $r56, $r57, $r62, $r64, $r66, $r67, $r69, $r74, $r76, $r77, $r83, $r84, $r89, $r93, $r98, r106;
        java.lang.Number $r37, $r78;
        ucar.nc2.Dimension $r53, $r68, r101, r103, r104;
        java.lang.IllegalStateException $r59;
        boolean z0, $z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25;
        java.util.List $r3, $r6, $r8, r10, $r25, $r32;
        ucar.nc2.NetcdfFile r2;
        java.util.HashMap $r5;
        double $d0;
        java.util.Iterator $r4, $r7, $r9, $r26, $r33;
        ucar.ma2.IndexIterator $r46;

        r2 := @parameter0: ucar.nc2.NetcdfFile;

        r0 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        z2 := @parameter3: boolean;

        r10 := @parameter4: java.util.List;

        $r1 = staticinvoke <ucar.nc2.NetcdfFileWriteable: ucar.nc2.NetcdfFileWriteable createNew(java.lang.String,boolean)>(r0, z0);

        $z1 = <ucar.nc2.FileWriter: boolean debug>;

        if $z1 == 0 goto label01;

        $r87 = <java.lang.System: java.io.PrintStream out>;

        $r86 = new java.lang.StringBuilder;

        specialinvoke $r86.<java.lang.StringBuilder: void <init>()>();

        $r88 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FileWriter write ");

        $r89 = virtualinvoke r2.<ucar.nc2.NetcdfFile: java.lang.String getLocation()>();

        $r90 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r89);

        $r91 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r92 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r93 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r87.<java.io.PrintStream: void println(java.lang.String)>($r93);

        $r95 = <java.lang.System: java.io.PrintStream out>;

        $r94 = new java.lang.StringBuilder;

        specialinvoke $r94.<java.lang.StringBuilder: void <init>()>();

        $r96 = virtualinvoke $r94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File In = ");

        $r97 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r98 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r95.<java.io.PrintStream: void println(java.lang.String)>($r98);

     label01:
        virtualinvoke $r1.<ucar.nc2.NetcdfFileWriteable: void setLargeFile(boolean)>(z2);

        $r3 = virtualinvoke r2.<ucar.nc2.NetcdfFile: java.util.List getGlobalAttributes()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z22 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z22 == 0 goto label07;

        $r75 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r99 = (ucar.nc2.Attribute) $r75;

        $r76 = virtualinvoke r99.<ucar.nc2.Attribute: java.lang.String getName()>();

        $r77 = staticinvoke <ucar.nc2.iosp.netcdf3.N3iosp: java.lang.String makeValidNetcdfObjectName(java.lang.String)>($r76);

        $z20 = virtualinvoke r99.<ucar.nc2.Attribute: boolean isArray()>();

        if $z20 == 0 goto label03;

        $r85 = virtualinvoke r99.<ucar.nc2.Attribute: ucar.ma2.Array getValues()>();

        r100 = virtualinvoke $r1.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addGlobalAttribute(java.lang.String,ucar.ma2.Array)>($r77, $r85);

        goto label05;

     label03:
        $z21 = virtualinvoke r99.<ucar.nc2.Attribute: boolean isString()>();

        if $z21 == 0 goto label04;

        $r84 = virtualinvoke r99.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

        r100 = virtualinvoke $r1.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addGlobalAttribute(java.lang.String,java.lang.String)>($r77, $r84);

        goto label05;

     label04:
        $r78 = virtualinvoke r99.<ucar.nc2.Attribute: java.lang.Number getNumericValue()>();

        r100 = virtualinvoke $r1.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addGlobalAttribute(java.lang.String,java.lang.Number)>($r77, $r78);

     label05:
        $z23 = <ucar.nc2.FileWriter: boolean debug>;

        if $z23 == 0 goto label06;

        $r80 = <java.lang.System: java.io.PrintStream out>;

        $r79 = new java.lang.StringBuilder;

        specialinvoke $r79.<java.lang.StringBuilder: void <init>()>();

        $r81 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("add gatt= ");

        $r82 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r100);

        $r83 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r80.<java.io.PrintStream: void println(java.lang.String)>($r83);

     label06:
        goto label02;

     label07:
        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        $r6 = virtualinvoke r2.<ucar.nc2.NetcdfFile: java.util.List getDimensions()>();

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z3 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label12;

        $r65 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r101 = (ucar.nc2.Dimension) $r65;

        $r66 = virtualinvoke r101.<ucar.nc2.Dimension: java.lang.String getName()>();

        $r67 = staticinvoke <ucar.nc2.iosp.netcdf3.N3iosp: java.lang.String makeValidNetcdfObjectName(java.lang.String)>($r66);

        $z15 = virtualinvoke r101.<ucar.nc2.Dimension: boolean isUnlimited()>();

        if $z15 == 0 goto label09;

        $i1 = 0;

        goto label10;

     label09:
        $i1 = virtualinvoke r101.<ucar.nc2.Dimension: int getLength()>();

     label10:
        $z16 = virtualinvoke r101.<ucar.nc2.Dimension: boolean isShared()>();

        $z17 = virtualinvoke r101.<ucar.nc2.Dimension: boolean isUnlimited()>();

        $z18 = virtualinvoke r101.<ucar.nc2.Dimension: boolean isVariableLength()>();

        $r68 = virtualinvoke $r1.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Dimension addDimension(java.lang.String,int,boolean,boolean,boolean)>($r67, $i1, $z16, $z17, $z18);

        $r69 = virtualinvoke $r68.<ucar.nc2.Dimension: java.lang.String getName()>();

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r69, $r68);

        $z19 = <ucar.nc2.FileWriter: boolean debug>;

        if $z19 == 0 goto label11;

        $r71 = <java.lang.System: java.io.PrintStream out>;

        $r70 = new java.lang.StringBuilder;

        specialinvoke $r70.<java.lang.StringBuilder: void <init>()>();

        $r72 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("add dim= ");

        $r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r68);

        $r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r71.<java.io.PrintStream: void println(java.lang.String)>($r74);

     label11:
        goto label08;

     label12:
        $r8 = virtualinvoke r2.<ucar.nc2.NetcdfFile: java.util.List getVariables()>();

        $r9 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label13:
        $z4 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label27;

        $r23 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r102 = (ucar.nc2.Variable) $r23;

        $r24 = new java.util.ArrayList;

        specialinvoke $r24.<java.util.ArrayList: void <init>()>();

        $r25 = virtualinvoke r102.<ucar.nc2.Variable: java.util.List getDimensions()>();

        $r26 = interfaceinvoke $r25.<java.util.List: java.util.Iterator iterator()>();

     label14:
        $z10 = interfaceinvoke $r26.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label17;

        $r55 = interfaceinvoke $r26.<java.util.Iterator: java.lang.Object next()>();

        r103 = (ucar.nc2.Dimension) $r55;

        $r56 = virtualinvoke r103.<ucar.nc2.Dimension: java.lang.String getName()>();

        $r57 = staticinvoke <ucar.nc2.iosp.netcdf3.N3iosp: java.lang.String makeValidNetcdfObjectName(java.lang.String)>($r56);

        $r58 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r57);

        r104 = (ucar.nc2.Dimension) $r58;

        if r104 == null goto label15;

        interfaceinvoke $r24.<java.util.List: boolean add(java.lang.Object)>(r104);

        goto label16;

     label15:
        $r59 = new java.lang.IllegalStateException;

        $r60 = new java.lang.StringBuilder;

        specialinvoke $r60.<java.lang.StringBuilder: void <init>()>();

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown dimension= ");

        $r62 = virtualinvoke r103.<ucar.nc2.Dimension: java.lang.String getName()>();

        $r63 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r62);

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r59.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r64);

        throw $r59;

     label16:
        goto label14;

     label17:
        r105 = virtualinvoke r102.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r27 = virtualinvoke r102.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r28 = <ucar.ma2.DataType: ucar.ma2.DataType STRING>;

        if $r27 != $r28 goto label20;

        $r45 = virtualinvoke r102.<ucar.nc2.Variable: ucar.ma2.Array read()>();

        $r46 = virtualinvoke $r45.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        i2 = 0;

     label18:
        $z14 = interfaceinvoke $r46.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z14 == 0 goto label19;

        $r54 = interfaceinvoke $r46.<ucar.ma2.IndexIterator: java.lang.Object getObjectNext()>();

        r106 = (java.lang.String) $r54;

        $i0 = virtualinvoke r106.<java.lang.String: int length()>();

        i2 = staticinvoke <java.lang.Math: int max(int,int)>(i2, $i0);

        goto label18;

     label19:
        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>()>();

        $r48 = virtualinvoke r102.<ucar.nc2.Variable: java.lang.String getName()>();

        $r49 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r48);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_strlen");

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        $r52 = staticinvoke <ucar.nc2.iosp.netcdf3.N3iosp: java.lang.String makeValidNetcdfObjectName(java.lang.String)>($r51);

        $r53 = virtualinvoke $r1.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Dimension addDimension(java.lang.String,int)>($r52, i2);

        interfaceinvoke $r24.<java.util.List: boolean add(java.lang.Object)>($r53);

        r105 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

     label20:
        $r29 = virtualinvoke r102.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $r30 = staticinvoke <ucar.nc2.iosp.netcdf3.N3iosp: java.lang.String makeValidNetcdfObjectName(java.lang.String)>($r29);

        $r31 = virtualinvoke $r1.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Variable addVariable(java.lang.String,ucar.ma2.DataType,java.util.List)>($r30, r105, $r24);

        $z11 = <ucar.nc2.FileWriter: boolean debug>;

        if $z11 == 0 goto label21;

        $r41 = <java.lang.System: java.io.PrintStream out>;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("add var= ");

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r31);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r41.<java.io.PrintStream: void println(java.lang.String)>($r44);

     label21:
        $r32 = virtualinvoke r102.<ucar.nc2.Variable: java.util.List getAttributes()>();

        $r33 = interfaceinvoke $r32.<java.util.List: java.util.Iterator iterator()>();

     label22:
        $z24 = interfaceinvoke $r33.<java.util.Iterator: boolean hasNext()>();

        if $z24 == 0 goto label26;

        $r34 = interfaceinvoke $r33.<java.util.Iterator: java.lang.Object next()>();

        r107 = (ucar.nc2.Attribute) $r34;

        $r35 = virtualinvoke r107.<ucar.nc2.Attribute: java.lang.String getName()>();

        $r36 = staticinvoke <ucar.nc2.iosp.netcdf3.N3iosp: java.lang.String makeValidNetcdfObjectName(java.lang.String)>($r35);

        $z12 = virtualinvoke r107.<ucar.nc2.Attribute: boolean isArray()>();

        if $z12 == 0 goto label23;

        $r39 = virtualinvoke r107.<ucar.nc2.Attribute: ucar.ma2.Array getValues()>();

        virtualinvoke $r1.<ucar.nc2.NetcdfFileWriteable: void addVariableAttribute(java.lang.String,java.lang.String,ucar.ma2.Array)>($r30, $r36, $r39);

        goto label25;

     label23:
        $z13 = virtualinvoke r107.<ucar.nc2.Attribute: boolean isString()>();

        if $z13 == 0 goto label24;

        $r38 = virtualinvoke r107.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

        virtualinvoke $r1.<ucar.nc2.NetcdfFileWriteable: void addVariableAttribute(java.lang.String,java.lang.String,java.lang.String)>($r30, $r36, $r38);

        goto label25;

     label24:
        $r37 = virtualinvoke r107.<ucar.nc2.Attribute: java.lang.Number getNumericValue()>();

        virtualinvoke $r1.<ucar.nc2.NetcdfFileWriteable: void addVariableAttribute(java.lang.String,java.lang.String,java.lang.Number)>($r30, $r36, $r37);

     label25:
        goto label22;

     label26:
        goto label13;

     label27:
        virtualinvoke $r1.<ucar.nc2.NetcdfFileWriteable: void create()>();

        $z5 = <ucar.nc2.FileWriter: boolean debug>;

        if $z5 == 0 goto label28;

        $r18 = <java.lang.System: java.io.PrintStream out>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File Out= ");

        $r20 = virtualinvoke $r1.<ucar.nc2.NetcdfFileWriteable: java.lang.String toString()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>($r22);

     label28:
        $z6 = virtualinvoke r2.<ucar.nc2.NetcdfFile: boolean hasUnlimitedDimension()>();

        if $z6 == 0 goto label29;

        virtualinvoke r2.<ucar.nc2.NetcdfFile: java.lang.Object sendIospMessage(java.lang.Object)>("AddRecordStructure");

        virtualinvoke $r1.<ucar.nc2.NetcdfFileWriteable: java.lang.Object sendIospMessage(java.lang.Object)>("AddRecordStructure");

     label29:
        $z7 = staticinvoke <ucar.nc2.FileWriter: boolean hasRecordStructure(ucar.nc2.NetcdfFile)>(r2);

        if $z7 == 0 goto label30;

        $z9 = staticinvoke <ucar.nc2.FileWriter: boolean hasRecordStructure(ucar.nc2.NetcdfFile)>($r1);

        if $z9 == 0 goto label30;

        $z25 = 1;

        goto label31;

     label30:
        $z25 = 0;

     label31:
        if $z25 == 0 goto label32;

        $r16 = virtualinvoke r2.<ucar.nc2.NetcdfFile: ucar.nc2.Variable findVariable(java.lang.String)>("record");

        $r108 = (ucar.nc2.Structure) $r16;

        goto label33;

     label32:
        $r108 = null;

     label33:
        $d0 = staticinvoke <ucar.nc2.FileWriter: double copyVarData(ucar.nc2.NetcdfFileWriteable,java.util.List,ucar.nc2.Structure,java.util.List)>($r1, $r8, $r108, r10);

        virtualinvoke $r1.<ucar.nc2.NetcdfFileWriteable: void flush()>();

        $z8 = <ucar.nc2.FileWriter: boolean debug>;

        if $z8 == 0 goto label34;

        $r12 = <java.lang.System: java.io.PrintStream out>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FileWriter done total bytes = ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>($r15);

     label34:
        virtualinvoke r2.<ucar.nc2.NetcdfFile: java.lang.Object sendIospMessage(java.lang.Object)>("RemoveRecordStructure");

        return $r1;
    }

    private static boolean hasRecordStructure(ucar.nc2.NetcdfFile)
    {
        ucar.ma2.DataType $r2, $r3;
        ucar.nc2.Variable $r1;
        ucar.nc2.NetcdfFile r0;
        boolean $z0;

        r0 := @parameter0: ucar.nc2.NetcdfFile;

        $r1 = virtualinvoke r0.<ucar.nc2.NetcdfFile: ucar.nc2.Variable findVariable(java.lang.String)>("record");

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r1.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r3 = <ucar.ma2.DataType: ucar.ma2.DataType STRUCTURE>;

        if $r2 != $r3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static double copyVarData(ucar.nc2.NetcdfFileWriteable, java.util.List, ucar.nc2.Structure, java.util.List) throws java.io.IOException
    {
        byte $b5;
        int[] $r3, $r4;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        ucar.ma2.DataType $r29;
        java.util.List r1, r20;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r16, $r17, $r23, $r25, $r26, $r27, $r28, $r30, $r34, $r35, $r36;
        ucar.nc2.NetcdfFileWriteable r13;
        long $l0, $l2, $l4, $l6, $l7;
        ucar.nc2.Structure r0;
        int $i1, $i3, i8, i9, $i10;
        ucar.nc2.Variable r33;
        java.lang.String $r11, $r18, $r24, $r31;
        double $d0, $d1, $d2, d3, d4;
        java.io.PrintStream $r6, $r15, $r22;
        java.util.Iterator $r2;
        ucar.ma2.Array $r12;
        ucar.ma2.InvalidRangeException $r32;
        java.lang.Object $r19;

        r13 := @parameter0: ucar.nc2.NetcdfFileWriteable;

        r1 := @parameter1: java.util.List;

        r0 := @parameter2: ucar.nc2.Structure;

        r20 := @parameter3: java.util.List;

        if r0 == null goto label01;

        $z5 = 1;

        goto label02;

     label01:
        $z5 = 0;

     label02:
        z0 = $z5;

        d3 = 0.0;

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z6 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label09;

        $r19 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r33 = (ucar.nc2.Variable) $r19;

        if z0 == 0 goto label04;

        $z4 = virtualinvoke r33.<ucar.nc2.Variable: boolean isUnlimited()>();

        if $z4 == 0 goto label04;

        goto label03;

     label04:
        if r33 != r0 goto label05;

        goto label03;

     label05:
        $z3 = <ucar.nc2.FileWriter: boolean debug>;

        if $z3 == 0 goto label06;

        $r22 = <java.lang.System: java.io.PrintStream out>;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("write var= ");

        $r24 = virtualinvoke r33.<ucar.nc2.Variable: java.lang.String getName()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" size = ");

        $l6 = virtualinvoke r33.<ucar.nc2.Variable: long getSize()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l6);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" type=");

        $r29 = virtualinvoke r33.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r22.<java.io.PrintStream: void println(java.lang.String)>($r31);

     label06:
        $l2 = virtualinvoke r33.<ucar.nc2.Variable: long getSize()>();

        $i3 = virtualinvoke r33.<ucar.nc2.Variable: int getElementSize()>();

        $l4 = (long) $i3;

        $l7 = $l2 * $l4;

        $d1 = (double) $l7;

        d3 = d3 + $d1;

        $b5 = $l7 cmp 50000000L;

        $i10 = (int) $b5;

        if $i10 > 0 goto label07;

        staticinvoke <ucar.nc2.FileWriter: void copyAll(ucar.nc2.NetcdfFileWriteable,ucar.nc2.Variable)>(r13, r33);

        goto label08;

     label07:
        staticinvoke <ucar.nc2.FileWriter: void copySome(ucar.nc2.NetcdfFileWriteable,ucar.nc2.Variable,long,java.util.List)>(r13, r33, 50000000L, r20);

     label08:
        goto label03;

     label09:
        if z0 == 0 goto label16;

        $r3 = newarray (int)[1];

        $r3[0] = 0;

        $r4 = newarray (int)[1];

        $r4[0] = 1;

        $l0 = virtualinvoke r0.<ucar.nc2.Structure: long getSize()>();

        i8 = (int) $l0;

        $i1 = virtualinvoke r0.<ucar.nc2.Structure: int getElementSize()>();

        d4 = 0.0;

        i9 = 0;

     label10:
        if i9 >= i8 goto label15;

        $r3[0] = i9;

     label11:
        $r12 = virtualinvoke r0.<ucar.nc2.Structure: ucar.ma2.Array read(int[],int[])>($r3, $r4);

        virtualinvoke r13.<ucar.nc2.NetcdfFileWriteable: void write(java.lang.String,int[],ucar.ma2.Array)>("record", $r3, $r12);

        $z2 = <ucar.nc2.FileWriter: boolean debug>;

        if $z2 == 0 goto label12;

        if i9 != 0 goto label12;

        $r15 = <java.lang.System: java.io.PrintStream out>;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("write record size = ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>($r18);

     label12:
        goto label14;

     label13:
        $r32 := @caughtexception;

        virtualinvoke $r32.<ucar.ma2.InvalidRangeException: void printStackTrace()>();

        goto label15;

     label14:
        $d0 = (double) $i1;

        d4 = d4 + $d0;

        i9 = i9 + 1;

        goto label10;

     label15:
        d3 = d3 + d4;

        $d2 = d4 / 1000000.0;

        $z1 = <ucar.nc2.FileWriter: boolean debug>;

        if $z1 == 0 goto label16;

        $r6 = <java.lang.System: java.io.PrintStream out>;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("write record var; total = ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Mbytes # recs=");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r11);

     label16:
        return d3;

        catch ucar.ma2.InvalidRangeException from label11 to label12 with label13;
    }

    private static void copyAll(ucar.nc2.NetcdfFileWriteable, ucar.nc2.Variable) throws java.io.IOException
    {
        ucar.nc2.NetcdfFileWriteable r6;
        long $l0;
        byte $b1;
        int $i2;
        ucar.nc2.Variable r0, $r7;
        java.lang.String $r1, $r2, $r11, $r14, $r16;
        ucar.ma2.DataType $r4, $r5;
        java.io.IOException $r19;
        ucar.ma2.Array $r3, r17;
        ucar.ma2.InvalidRangeException $r8;
        java.lang.StringBuilder $r12, $r13, $r15, $r18;

        r6 := @parameter0: ucar.nc2.NetcdfFileWriteable;

        r0 := @parameter1: ucar.nc2.Variable;

        $r1 = virtualinvoke r0.<ucar.nc2.Variable: java.lang.String getName()>();

        $r2 = staticinvoke <ucar.nc2.iosp.netcdf3.N3iosp: java.lang.String makeValidNetcdfObjectName(java.lang.String)>($r1);

        $r3 = virtualinvoke r0.<ucar.nc2.Variable: ucar.ma2.Array read()>();

        r17 = $r3;

     label1:
        $r4 = virtualinvoke r0.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r5 = <ucar.ma2.DataType: ucar.ma2.DataType STRING>;

        if $r4 != $r5 goto label2;

        $r7 = virtualinvoke r6.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Variable findVariable(java.lang.String)>($r2);

        r17 = staticinvoke <ucar.nc2.FileWriter: ucar.ma2.Array convertToChar(ucar.nc2.Variable,ucar.ma2.Array)>($r7, $r3);

     label2:
        $l0 = virtualinvoke r17.<ucar.ma2.Array: long getSize()>();

        $b1 = $l0 cmp 0L;

        $i2 = (int) $b1;

        if $i2 <= 0 goto label3;

        virtualinvoke r6.<ucar.nc2.NetcdfFileWriteable: void write(java.lang.String,ucar.ma2.Array)>($r2, r17);

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

        virtualinvoke $r8.<ucar.ma2.InvalidRangeException: void printStackTrace()>();

        $r19 = new java.io.IOException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r8.<ucar.ma2.InvalidRangeException: java.lang.String getMessage()>();

        $r12 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for Variable ");

        $r14 = virtualinvoke r0.<ucar.nc2.Variable: java.lang.String getName()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.io.IOException: void <init>(java.lang.String)>($r16);

        throw $r19;

     label5:
        return;

        catch ucar.ma2.InvalidRangeException from label1 to label3 with label4;
    }

    private static void copySome(ucar.nc2.NetcdfFileWriteable, ucar.nc2.Variable, long, java.util.List) throws java.io.IOException
    {
        ucar.nc2.FileWriter$FileWriterProgressEvent $r53;
        byte $b5, $b15;
        java.lang.StringBuilder $r5, $r7, $r15, $r17, $r23, $r25, $r32, $r33, $r34, $r36, $r54, $r56, $r57, $r58;
        ucar.nc2.NetcdfFileWriteable r27;
        ucar.ma2.Section $r59;
        long l0, $l2, l3, $l4, $l6, $l7, $l8, $l9, $l10, l11, $l13, $l14, $l17;
        java.lang.String $r1, $r2, $r6, $r8, $r16, $r18, $r24, $r26, $r37, $r47;
        java.io.IOException $r60;
        ucar.ma2.Array $r19, r50;
        ucar.ma2.InvalidRangeException $r45;
        ucar.nc2.FileWriter$FileWriterProgressListener r48, r49, r51, r52;
        int[] $r11, $r12, $r13;
        boolean $z0, $z1, $z2, $z3, $z4;
        ucar.ma2.DataType $r20, $r21;
        java.util.List r9;
        ucar.nc2.FileWriter$ChunkingIndex $r55;
        int $i1, $i12, $i16, $i18, $i19, $i20, $i21;
        ucar.nc2.Variable r0, $r40;
        double $d0, $d1, $d2, $d3;
        java.io.PrintStream $r31;
        java.util.Iterator $r28, $r38, $r41, $r43;
        java.lang.Object $r29, $r39, $r42, $r44;

        r27 := @parameter0: ucar.nc2.NetcdfFileWriteable;

        r0 := @parameter1: ucar.nc2.Variable;

        l0 := @parameter2: long;

        r9 := @parameter3: java.util.List;

        $r1 = virtualinvoke r0.<ucar.nc2.Variable: java.lang.String getName()>();

        $r2 = staticinvoke <ucar.nc2.iosp.netcdf3.N3iosp: java.lang.String makeValidNetcdfObjectName(java.lang.String)>($r1);

        $i1 = virtualinvoke r0.<ucar.nc2.Variable: int getElementSize()>();

        $l2 = (long) $i1;

        l3 = l0 / $l2;

        l11 = 0L;

        $r53 = new ucar.nc2.FileWriter$FileWriterProgressEvent;

        specialinvoke $r53.<ucar.nc2.FileWriter$FileWriterProgressEvent: void <init>()>();

        $r54 = new java.lang.StringBuilder;

        specialinvoke $r54.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Variable: ");

        $r6 = virtualinvoke r0.<ucar.nc2.Variable: java.lang.String getName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r53.<ucar.nc2.FileWriter$FileWriterProgressEvent: void setStatus(java.lang.String)>($r8);

        if r9 == null goto label02;

        $r43 = interfaceinvoke r9.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z4 = interfaceinvoke $r43.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label02;

        $r44 = interfaceinvoke $r43.<java.util.Iterator: java.lang.Object next()>();

        r48 = (ucar.nc2.FileWriter$FileWriterProgressListener) $r44;

        interfaceinvoke r48.<ucar.nc2.FileWriter$FileWriterProgressListener: void writeStatus(ucar.nc2.FileWriter$FileWriterProgressEvent)>($r53);

        goto label01;

     label02:
        $r55 = new ucar.nc2.FileWriter$ChunkingIndex;

        $r11 = virtualinvoke r0.<ucar.nc2.Variable: int[] getShape()>();

        specialinvoke $r55.<ucar.nc2.FileWriter$ChunkingIndex: void <init>(int[])>($r11);

     label03:
        $i12 = virtualinvoke $r55.<ucar.nc2.FileWriter$ChunkingIndex: int currentElement()>();

        $l13 = (long) $i12;

        $l14 = virtualinvoke $r55.<ucar.nc2.FileWriter$ChunkingIndex: long getSize()>();

        $b15 = $l13 cmp $l14;

        $i20 = (int) $b15;

        if $i20 >= 0 goto label15;

     label04:
        $r12 = virtualinvoke $r55.<ucar.nc2.FileWriter$ChunkingIndex: int[] getCurrentCounter()>();

        $r13 = virtualinvoke $r55.<ucar.nc2.FileWriter$ChunkingIndex: int[] computeChunkShape(long)>(l3);

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Reading chunk from variable: ");

        $r16 = virtualinvoke r0.<ucar.nc2.Variable: java.lang.String getName()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r53.<ucar.nc2.FileWriter$FileWriterProgressEvent: void setWriteStatus(java.lang.String)>($r18);

        if r9 == null goto label06;

        $r41 = interfaceinvoke r9.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z3 = interfaceinvoke $r41.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label06;

        $r42 = interfaceinvoke $r41.<java.util.Iterator: java.lang.Object next()>();

        r49 = (ucar.nc2.FileWriter$FileWriterProgressListener) $r42;

        interfaceinvoke r49.<ucar.nc2.FileWriter$FileWriterProgressListener: void writeProgress(ucar.nc2.FileWriter$FileWriterProgressEvent)>($r53);

        goto label05;

     label06:
        $r19 = virtualinvoke r0.<ucar.nc2.Variable: ucar.ma2.Array read(int[],int[])>($r12, $r13);

        r50 = $r19;

        $r20 = virtualinvoke r0.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r21 = <ucar.ma2.DataType: ucar.ma2.DataType STRING>;

        if $r20 != $r21 goto label07;

        $r40 = virtualinvoke r27.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Variable findVariable(java.lang.String)>($r2);

        r50 = staticinvoke <ucar.nc2.FileWriter: ucar.ma2.Array convertToChar(ucar.nc2.Variable,ucar.ma2.Array)>($r40, $r19);

     label07:
        $l4 = virtualinvoke r50.<ucar.ma2.Array: long getSize()>();

        $b5 = $l4 cmp 0L;

        $i21 = (int) $b5;

        if $i21 <= 0 goto label12;

        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Writing chunk of variable: ");

        $r24 = virtualinvoke r0.<ucar.nc2.Variable: java.lang.String getName()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r53.<ucar.nc2.FileWriter$FileWriterProgressEvent: void setWriteStatus(java.lang.String)>($r26);

        $l6 = virtualinvoke r50.<ucar.ma2.Array: long getSize()>();

        virtualinvoke $r53.<ucar.nc2.FileWriter$FileWriterProgressEvent: void setBytesToWrite(long)>($l6);

        if r9 == null goto label09;

        $r38 = interfaceinvoke r9.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z2 = interfaceinvoke $r38.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label09;

        $r39 = interfaceinvoke $r38.<java.util.Iterator: java.lang.Object next()>();

        r51 = (ucar.nc2.FileWriter$FileWriterProgressListener) $r39;

        interfaceinvoke r51.<ucar.nc2.FileWriter$FileWriterProgressListener: void writeProgress(ucar.nc2.FileWriter$FileWriterProgressEvent)>($r53);

        goto label08;

     label09:
        virtualinvoke r27.<ucar.nc2.NetcdfFileWriteable: void write(java.lang.String,int[],ucar.ma2.Array)>($r2, $r12, r50);

        $z0 = <ucar.nc2.FileWriter: boolean debugWrite>;

        if $z0 == 0 goto label10;

        $r31 = <java.lang.System: java.io.PrintStream out>;

        $r58 = new java.lang.StringBuilder;

        specialinvoke $r58.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" write ");

        $l9 = virtualinvoke r50.<ucar.ma2.Array: long getSize()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l9);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes at ");

        $r59 = new ucar.ma2.Section;

        specialinvoke $r59.<ucar.ma2.Section: void <init>(int[],int[])>($r12, $r13);

        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r59);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r31.<java.io.PrintStream: void println(java.lang.String)>($r37);

     label10:
        $l7 = virtualinvoke r50.<ucar.ma2.Array: long getSize()>();

        $l10 = l11 + $l7;

        l11 = $l10;

        virtualinvoke $r53.<ucar.nc2.FileWriter$FileWriterProgressEvent: void setBytesWritten(long)>($l10);

        $d0 = (double) $l10;

        $d1 = 100.0 * $d0;

        $l8 = virtualinvoke r0.<ucar.nc2.Variable: long getSize()>();

        $d2 = (double) $l8;

        $d3 = $d1 / $d2;

        virtualinvoke $r53.<ucar.nc2.FileWriter$FileWriterProgressEvent: void setProgressPercent(double)>($d3);

        if r9 == null goto label12;

        $r28 = interfaceinvoke r9.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z1 = interfaceinvoke $r28.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label12;

        $r29 = interfaceinvoke $r28.<java.util.Iterator: java.lang.Object next()>();

        r52 = (ucar.nc2.FileWriter$FileWriterProgressListener) $r29;

        interfaceinvoke r52.<ucar.nc2.FileWriter$FileWriterProgressListener: void writeProgress(ucar.nc2.FileWriter$FileWriterProgressEvent)>($r53);

        goto label11;

     label12:
        $i16 = virtualinvoke $r55.<ucar.nc2.FileWriter$ChunkingIndex: int currentElement()>();

        $l17 = staticinvoke <ucar.ma2.Index: long computeSize(int[])>($r13);

        $i18 = (int) $l17;

        $i19 = $i16 + $i18;

        virtualinvoke $r55.<ucar.nc2.FileWriter$ChunkingIndex: void setCurrentCounter(int)>($i19);

     label13:
        goto label03;

     label14:
        $r45 := @caughtexception;

        virtualinvoke $r45.<ucar.ma2.InvalidRangeException: void printStackTrace()>();

        $r60 = new java.io.IOException;

        $r47 = virtualinvoke $r45.<ucar.ma2.InvalidRangeException: java.lang.String getMessage()>();

        specialinvoke $r60.<java.io.IOException: void <init>(java.lang.String)>($r47);

        throw $r60;

     label15:
        return;

        catch ucar.ma2.InvalidRangeException from label04 to label13 with label14;
    }

    private static ucar.ma2.Array convertToChar(ucar.nc2.Variable, ucar.ma2.Array)
    {
        ucar.ma2.IndexIterator $r7;
        ucar.ma2.DataType $r1;
        ucar.ma2.Array $r3, r6;
        ucar.ma2.ArrayChar r4;
        int[] $r2, $r10;
        ucar.ma2.Index $r5;
        int $i0, $i1, i2;
        ucar.nc2.Variable r0;
        java.lang.Object $r8;
        java.lang.String r9;
        boolean $z0;

        r0 := @parameter0: ucar.nc2.Variable;

        r6 := @parameter1: ucar.ma2.Array;

        $r1 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        $r2 = virtualinvoke r0.<ucar.nc2.Variable: int[] getShape()>();

        $r3 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(ucar.ma2.DataType,int[])>($r1, $r2);

        r4 = (ucar.ma2.ArrayChar) $r3;

        $r5 = virtualinvoke r4.<ucar.ma2.ArrayChar: ucar.ma2.Index getIndex()>();

        $r7 = virtualinvoke r6.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

     label1:
        $z0 = interfaceinvoke $r7.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke $r7.<ucar.ma2.IndexIterator: java.lang.Object getObjectNext()>();

        r9 = (java.lang.String) $r8;

        $r10 = interfaceinvoke $r7.<ucar.ma2.IndexIterator: int[] getCurrentCounter()>();

        i2 = 0;

     label2:
        $i0 = lengthof $r10;

        if i2 >= $i0 goto label3;

        $i1 = $r10[i2];

        virtualinvoke $r5.<ucar.ma2.Index: void setDim(int,int)>(i2, $i1);

        i2 = i2 + 1;

        goto label2;

     label3:
        virtualinvoke r4.<ucar.ma2.ArrayChar: void setString(ucar.ma2.Index,java.lang.String)>($r5, r9);

        goto label1;

     label4:
        return r4;
    }

    public void <init>(java.lang.String, boolean) throws java.io.IOException
    {
        int $i1;
        java.lang.String r1;
        ucar.nc2.FileWriter r0;
        boolean z0;

        r0 := @this: ucar.nc2.FileWriter;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $i1 = (int) -1;

        specialinvoke r0.<ucar.nc2.FileWriter: void <init>(java.lang.String,boolean,boolean,int)>(r1, z0, 0, $i1);

        return;
    }

    public void <init>(java.lang.String, boolean, boolean, int) throws java.io.IOException
    {
        ucar.nc2.NetcdfFileWriteable $r4, $r5, $r6;
        java.util.HashMap $r1;
        java.util.ArrayList $r2;
        int i0;
        java.lang.String r3;
        ucar.nc2.FileWriter r0;
        boolean z0, z1;

        r0 := @this: ucar.nc2.FileWriter;

        r3 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        i0 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<ucar.nc2.FileWriter: java.util.HashMap dimHash> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<ucar.nc2.FileWriter: java.util.List varList> = $r2;

        r0.<ucar.nc2.FileWriter: ucar.nc2.Structure recordVar> = null;

        $r4 = staticinvoke <ucar.nc2.NetcdfFileWriteable: ucar.nc2.NetcdfFileWriteable createNew(java.lang.String,boolean)>(r3, z0);

        r0.<ucar.nc2.FileWriter: ucar.nc2.NetcdfFileWriteable ncfile> = $r4;

        if z1 == 0 goto label1;

        $r6 = r0.<ucar.nc2.FileWriter: ucar.nc2.NetcdfFileWriteable ncfile>;

        virtualinvoke $r6.<ucar.nc2.NetcdfFileWriteable: void setLargeFile(boolean)>(z1);

     label1:
        if i0 <= 0 goto label2;

        $r5 = r0.<ucar.nc2.FileWriter: ucar.nc2.NetcdfFileWriteable ncfile>;

        virtualinvoke $r5.<ucar.nc2.NetcdfFileWriteable: void setExtraHeaderBytes(int)>(i0);

     label2:
        return;
    }

    public ucar.nc2.NetcdfFileWriteable getNetcdf()
    {
        ucar.nc2.NetcdfFileWriteable $r1;
        ucar.nc2.FileWriter r0;

        r0 := @this: ucar.nc2.FileWriter;

        $r1 = r0.<ucar.nc2.FileWriter: ucar.nc2.NetcdfFileWriteable ncfile>;

        return $r1;
    }

    public void writeGlobalAttribute(ucar.nc2.Attribute)
    {
        ucar.nc2.NetcdfFileWriteable $r4, $r6, $r8;
        ucar.ma2.Array $r9;
        ucar.nc2.Attribute r0;
        java.lang.String $r1, $r2, $r7;
        ucar.nc2.FileWriter r3;
        java.lang.Number $r5;
        boolean $z0, $z1;

        r3 := @this: ucar.nc2.FileWriter;

        r0 := @parameter0: ucar.nc2.Attribute;

        $r1 = virtualinvoke r0.<ucar.nc2.Attribute: java.lang.String getName()>();

        $r2 = staticinvoke <ucar.nc2.iosp.netcdf3.N3iosp: java.lang.String makeValidNetcdfObjectName(java.lang.String)>($r1);

        $z0 = virtualinvoke r0.<ucar.nc2.Attribute: boolean isArray()>();

        if $z0 == 0 goto label1;

        $r8 = r3.<ucar.nc2.FileWriter: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r9 = virtualinvoke r0.<ucar.nc2.Attribute: ucar.ma2.Array getValues()>();

        virtualinvoke $r8.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addGlobalAttribute(java.lang.String,ucar.ma2.Array)>($r2, $r9);

        goto label3;

     label1:
        $z1 = virtualinvoke r0.<ucar.nc2.Attribute: boolean isString()>();

        if $z1 == 0 goto label2;

        $r6 = r3.<ucar.nc2.FileWriter: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r7 = virtualinvoke r0.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

        virtualinvoke $r6.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addGlobalAttribute(java.lang.String,java.lang.String)>($r2, $r7);

        goto label3;

     label2:
        $r4 = r3.<ucar.nc2.FileWriter: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r5 = virtualinvoke r0.<ucar.nc2.Attribute: java.lang.Number getNumericValue()>();

        virtualinvoke $r4.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addGlobalAttribute(java.lang.String,java.lang.Number)>($r2, $r5);

     label3:
        return;
    }

    public void writeAttribute(java.lang.String, ucar.nc2.Attribute)
    {
        ucar.nc2.NetcdfFileWriteable $r5, $r7, $r9;
        ucar.ma2.Array $r10;
        ucar.nc2.Attribute r0;
        java.lang.String $r1, $r2, $r3, $r8, r11;
        ucar.nc2.FileWriter r4;
        java.lang.Number $r6;
        boolean $z0, $z1;

        r4 := @this: ucar.nc2.FileWriter;

        r11 := @parameter0: java.lang.String;

        r0 := @parameter1: ucar.nc2.Attribute;

        $r1 = virtualinvoke r0.<ucar.nc2.Attribute: java.lang.String getName()>();

        $r2 = staticinvoke <ucar.nc2.iosp.netcdf3.N3iosp: java.lang.String makeValidNetcdfObjectName(java.lang.String)>($r1);

        $r3 = staticinvoke <ucar.nc2.iosp.netcdf3.N3iosp: java.lang.String makeValidNetcdfObjectName(java.lang.String)>(r11);

        $z0 = virtualinvoke r0.<ucar.nc2.Attribute: boolean isArray()>();

        if $z0 == 0 goto label1;

        $r9 = r4.<ucar.nc2.FileWriter: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r10 = virtualinvoke r0.<ucar.nc2.Attribute: ucar.ma2.Array getValues()>();

        virtualinvoke $r9.<ucar.nc2.NetcdfFileWriteable: void addVariableAttribute(java.lang.String,java.lang.String,ucar.ma2.Array)>($r3, $r2, $r10);

        goto label3;

     label1:
        $z1 = virtualinvoke r0.<ucar.nc2.Attribute: boolean isString()>();

        if $z1 == 0 goto label2;

        $r7 = r4.<ucar.nc2.FileWriter: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r8 = virtualinvoke r0.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

        virtualinvoke $r7.<ucar.nc2.NetcdfFileWriteable: void addVariableAttribute(java.lang.String,java.lang.String,java.lang.String)>($r3, $r2, $r8);

        goto label3;

     label2:
        $r5 = r4.<ucar.nc2.FileWriter: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r6 = virtualinvoke r0.<ucar.nc2.Attribute: java.lang.Number getNumericValue()>();

        virtualinvoke $r5.<ucar.nc2.NetcdfFileWriteable: void addVariableAttribute(java.lang.String,java.lang.String,java.lang.Number)>($r3, $r2, $r6);

     label3:
        return;
    }

    public ucar.nc2.Dimension writeDimension(ucar.nc2.Dimension)
    {
        ucar.nc2.NetcdfFileWriteable $r4;
        java.util.HashMap $r6;
        int $i0;
        java.lang.String $r1, $r2, $r11;
        ucar.nc2.FileWriter r3;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.io.PrintStream $r8;
        ucar.nc2.Dimension r0, $r5;
        java.lang.StringBuilder $r7, $r9, $r10;

        r3 := @this: ucar.nc2.FileWriter;

        r0 := @parameter0: ucar.nc2.Dimension;

        $r1 = virtualinvoke r0.<ucar.nc2.Dimension: java.lang.String getName()>();

        $r2 = staticinvoke <ucar.nc2.iosp.netcdf3.N3iosp: java.lang.String makeValidNetcdfObjectName(java.lang.String)>($r1);

        $r4 = r3.<ucar.nc2.FileWriter: ucar.nc2.NetcdfFileWriteable ncfile>;

        $z0 = virtualinvoke r0.<ucar.nc2.Dimension: boolean isUnlimited()>();

        if $z0 == 0 goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $i0 = virtualinvoke r0.<ucar.nc2.Dimension: int getLength()>();

     label2:
        $z1 = virtualinvoke r0.<ucar.nc2.Dimension: boolean isShared()>();

        $z2 = virtualinvoke r0.<ucar.nc2.Dimension: boolean isUnlimited()>();

        $z3 = virtualinvoke r0.<ucar.nc2.Dimension: boolean isVariableLength()>();

        $r5 = virtualinvoke $r4.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Dimension addDimension(java.lang.String,int,boolean,boolean,boolean)>($r2, $i0, $z1, $z2, $z3);

        $r6 = r3.<ucar.nc2.FileWriter: java.util.HashMap dimHash>;

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r5);

        $z4 = <ucar.nc2.FileWriter: boolean debug>;

        if $z4 == 0 goto label3;

        $r8 = <java.lang.System: java.io.PrintStream out>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("write dim= ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r11);

     label3:
        return $r5;
    }

    public void writeVariable(ucar.nc2.Variable)
    {
        ucar.nc2.FileWriter r7;
        boolean $z0, $z1, $z2;
        ucar.ma2.DataType $r5, $r6, $r9;
        java.util.List $r2, $r10, $r11, $r22;
        ucar.nc2.Attribute r42;
        java.lang.StringBuilder $r14, $r16, $r17, $r34, $r36, $r37;
        ucar.nc2.NetcdfFileWriteable $r8, $r21;
        java.util.HashMap $r26, $r31;
        int $i0, $i1, $i2, i3, i4;
        ucar.nc2.Variable r0;
        java.lang.String $r3, $r4, $r18, r24, $r27, $r28, $r32, $r38;
        java.io.PrintStream $r15;
        org.slf4j.Logger $r35;
        java.util.Iterator $r12;
        ucar.ma2.ArrayObject r41;
        ucar.ma2.IndexIterator $r20;
        java.io.IOException $r33;
        ucar.nc2.Dimension[] r1;
        ucar.ma2.Array $r19;
        java.lang.Object $r13, $r23, $r25, $r29;
        ucar.nc2.Dimension $r30, r39, r40;

        r7 := @this: ucar.nc2.FileWriter;

        r0 := @parameter0: ucar.nc2.Variable;

        $i0 = virtualinvoke r0.<ucar.nc2.Variable: int getRank()>();

        r1 = newarray (ucar.nc2.Dimension)[$i0];

        $r2 = virtualinvoke r0.<ucar.nc2.Variable: java.util.List getDimensions()>();

        i3 = 0;

     label01:
        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i3 >= $i1 goto label03;

        $r25 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i3);

        r39 = (ucar.nc2.Dimension) $r25;

        $r26 = r7.<ucar.nc2.FileWriter: java.util.HashMap dimHash>;

        $r27 = virtualinvoke r39.<ucar.nc2.Dimension: java.lang.String getName()>();

        $r28 = staticinvoke <ucar.nc2.iosp.netcdf3.N3iosp: java.lang.String makeValidNetcdfObjectName(java.lang.String)>($r27);

        $r29 = virtualinvoke $r26.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r28);

        r40 = (ucar.nc2.Dimension) $r29;

        if null != r40 goto label02;

        $r30 = virtualinvoke r7.<ucar.nc2.FileWriter: ucar.nc2.Dimension writeDimension(ucar.nc2.Dimension)>(r39);

        r40 = $r30;

        $r31 = r7.<ucar.nc2.FileWriter: java.util.HashMap dimHash>;

        $r32 = virtualinvoke $r30.<ucar.nc2.Dimension: java.lang.String getName()>();

        virtualinvoke $r31.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r32, $r30);

     label02:
        r1[i3] = r40;

        i3 = i3 + 1;

        goto label01;

     label03:
        $r3 = virtualinvoke r0.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $r4 = staticinvoke <ucar.nc2.iosp.netcdf3.N3iosp: java.lang.String makeValidNetcdfObjectName(java.lang.String)>($r3);

        $r5 = virtualinvoke r0.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r6 = <ucar.ma2.DataType: ucar.ma2.DataType STRING>;

        if $r5 != $r6 goto label09;

     label04:
        i4 = 0;

        $r19 = virtualinvoke r0.<ucar.nc2.Variable: ucar.ma2.Array read()>();

        r41 = (ucar.ma2.ArrayObject) $r19;

        $r20 = virtualinvoke r41.<ucar.ma2.ArrayObject: ucar.ma2.IndexIterator getIndexIterator()>();

     label05:
        $z1 = interfaceinvoke $r20.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z1 == 0 goto label06;

        $r23 = interfaceinvoke $r20.<ucar.ma2.IndexIterator: java.lang.Object next()>();

        r24 = (java.lang.String) $r23;

        $i2 = virtualinvoke r24.<java.lang.String: int length()>();

        i4 = staticinvoke <java.lang.Math: int max(int,int)>(i4, $i2);

        goto label05;

     label06:
        $r21 = r7.<ucar.nc2.FileWriter: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r22 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        virtualinvoke $r21.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Variable addStringVariable(java.lang.String,java.util.List,int)>($r4, $r22, i4);

     label07:
        goto label10;

     label08:
        $r33 := @caughtexception;

        $r35 = <ucar.nc2.FileWriter: org.slf4j.Logger log>;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error reading String variable ");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r35.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r38, $r33);

        return;

     label09:
        $r8 = r7.<ucar.nc2.FileWriter: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r9 = virtualinvoke r0.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        virtualinvoke $r8.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Variable addVariable(java.lang.String,ucar.ma2.DataType,ucar.nc2.Dimension[])>($r4, $r9, r1);

     label10:
        $r10 = r7.<ucar.nc2.FileWriter: java.util.List varList>;

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>(r0);

        $z0 = <ucar.nc2.FileWriter: boolean debug>;

        if $z0 == 0 goto label11;

        $r15 = <java.lang.System: java.io.PrintStream out>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("write var= ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>($r18);

     label11:
        $r11 = virtualinvoke r0.<ucar.nc2.Variable: java.util.List getAttributes()>();

        $r12 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label12:
        $z2 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label13;

        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r42 = (ucar.nc2.Attribute) $r13;

        virtualinvoke r7.<ucar.nc2.FileWriter: void writeAttribute(java.lang.String,ucar.nc2.Attribute)>($r4, r42);

        goto label12;

     label13:
        return;

        catch java.io.IOException from label04 to label07 with label08;
    }

    public void writeVariables(java.util.List)
    {
        java.util.List r0;
        java.util.Iterator $r1;
        java.lang.Object $r2;
        ucar.nc2.Variable r3;
        ucar.nc2.FileWriter r4;
        boolean $z0;

        r4 := @this: ucar.nc2.FileWriter;

        r0 := @parameter0: java.util.List;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (ucar.nc2.Variable) $r2;

        virtualinvoke r4.<ucar.nc2.FileWriter: void writeVariable(ucar.nc2.Variable)>(r3);

        goto label1;

     label2:
        return;
    }

    public void setRecordVariable(ucar.nc2.Structure)
    {
        ucar.nc2.FileWriter r0;
        ucar.nc2.Structure r1;

        r0 := @this: ucar.nc2.FileWriter;

        r1 := @parameter0: ucar.nc2.Structure;

        r0.<ucar.nc2.FileWriter: ucar.nc2.Structure recordVar> = r1;

        return;
    }

    public void finish() throws java.io.IOException
    {
        java.io.PrintStream $r7;
        ucar.nc2.NetcdfFileWriteable $r1, $r4, $r5;
        ucar.nc2.Structure $r2;
        java.util.List $r3;
        java.lang.StringBuilder $r6, $r8, $r9;
        java.lang.String $r10;
        ucar.nc2.FileWriter r0;
        double $d0;
        boolean $z0;

        r0 := @this: ucar.nc2.FileWriter;

        $r1 = r0.<ucar.nc2.FileWriter: ucar.nc2.NetcdfFileWriteable ncfile>;

        virtualinvoke $r1.<ucar.nc2.NetcdfFileWriteable: void create()>();

        $r4 = r0.<ucar.nc2.FileWriter: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r3 = r0.<ucar.nc2.FileWriter: java.util.List varList>;

        $r2 = r0.<ucar.nc2.FileWriter: ucar.nc2.Structure recordVar>;

        $d0 = staticinvoke <ucar.nc2.FileWriter: double copyVarData(ucar.nc2.NetcdfFileWriteable,java.util.List,ucar.nc2.Structure,java.util.List)>($r4, $r3, $r2, null);

        $r5 = r0.<ucar.nc2.FileWriter: ucar.nc2.NetcdfFileWriteable ncfile>;

        virtualinvoke $r5.<ucar.nc2.NetcdfFileWriteable: void close()>();

        $z0 = <ucar.nc2.FileWriter: boolean debug>;

        if $z0 == 0 goto label1;

        $r7 = <java.lang.System: java.io.PrintStream out>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FileWriter finish total bytes = ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r10);

     label1:
        return;
    }

    private static void usage()
    {
        java.io.PrintStream $r0;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("usage: ucar.nc2.FileWriter -in <fileIn> -out <fileOut> [-delay <millisecs>]");

        return;
    }

    public static double copyVarData(ucar.nc2.NetcdfFileWriteable, java.util.List, ucar.nc2.Structure, long) throws java.io.IOException
    {
        ucar.nc2.NetcdfFileWriteable r0;
        java.util.List r1;
        long l0;
        ucar.nc2.Structure r2;
        double $d0;

        r0 := @parameter0: ucar.nc2.NetcdfFileWriteable;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: ucar.nc2.Structure;

        l0 := @parameter3: long;

        $d0 = staticinvoke <ucar.nc2.FileWriter: double copyVarData(ucar.nc2.NetcdfFileWriteable,java.util.List,ucar.nc2.Structure,java.util.List)>(r0, r1, r2, null);

        return $d0;
    }

    public static ucar.nc2.NetcdfFile writeToFile(ucar.nc2.NetcdfFile, java.lang.String, boolean, int) throws java.io.IOException
    {
        int i0;
        ucar.nc2.NetcdfFile r0, $r2;
        java.lang.String r1;
        boolean z0;

        r0 := @parameter0: ucar.nc2.NetcdfFile;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        i0 := @parameter3: int;

        $r2 = staticinvoke <ucar.nc2.FileWriter: ucar.nc2.NetcdfFile writeToFile(ucar.nc2.NetcdfFile,java.lang.String,boolean,boolean,java.util.List)>(r0, r1, z0, 0, null);

        return $r2;
    }

    public static ucar.nc2.NetcdfFile writeToFile(ucar.nc2.NetcdfFile, java.lang.String, boolean, int, boolean) throws java.io.IOException
    {
        int i0;
        ucar.nc2.NetcdfFile r0, $r2;
        java.lang.String r1;
        boolean z0, z1;

        r0 := @parameter0: ucar.nc2.NetcdfFile;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        i0 := @parameter3: int;

        z1 := @parameter4: boolean;

        $r2 = staticinvoke <ucar.nc2.FileWriter: ucar.nc2.NetcdfFile writeToFile(ucar.nc2.NetcdfFile,java.lang.String,boolean,boolean,java.util.List)>(r0, r1, z0, z1, null);

        return $r2;
    }

    public static void main(java.lang.String[]) throws java.io.IOException
    {
        java.lang.String[] r0;
        int $i0, $i1, $i2, i3, $i4;
        java.lang.String r1, r2, r3, $r10;
        boolean $z0, $z1;
        java.io.PrintStream $r6;
        java.lang.StringBuilder $r7, $r8, $r9;
        ucar.nc2.NetcdfFile $r4, $r5;

        r0 := @parameter0: java.lang.String[];

        $i0 = lengthof r0;

        if $i0 >= 4 goto label1;

        staticinvoke <ucar.nc2.FileWriter: void usage()>();

        staticinvoke <java.lang.System: void exit(int)>(0);

     label1:
        r1 = null;

        r2 = null;

        i3 = 0;

     label2:
        $i4 = lengthof r0;

        if i3 >= $i4 goto label5;

        r3 = r0[i3];

        $z0 = virtualinvoke r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-in");

        if $z0 == 0 goto label3;

        $i2 = i3 + 1;

        r1 = r0[$i2];

     label3:
        $z1 = virtualinvoke r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("-out");

        if $z1 == 0 goto label4;

        $i1 = i3 + 1;

        r2 = r0[$i1];

     label4:
        i3 = i3 + 1;

        goto label2;

     label5:
        if r1 == null goto label6;

        if r2 != null goto label7;

     label6:
        staticinvoke <ucar.nc2.FileWriter: void usage()>();

        staticinvoke <java.lang.System: void exit(int)>(0);

     label7:
        $r4 = staticinvoke <ucar.nc2.NetcdfFile: ucar.nc2.NetcdfFile open(java.lang.String,ucar.nc2.util.CancelTask)>(r1, null);

        $r5 = staticinvoke <ucar.nc2.FileWriter: ucar.nc2.NetcdfFile writeToFile(ucar.nc2.NetcdfFile,java.lang.String,boolean,boolean,java.util.List)>($r4, r2, 0, 0, null);

        virtualinvoke $r4.<ucar.nc2.NetcdfFile: void close()>();

        virtualinvoke $r5.<ucar.nc2.NetcdfFile: void close()>();

        $r6 = <java.lang.System: java.io.PrintStream out>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NetcdfFile written = ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r10);

        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lucar/nc2/FileWriter;");

        <ucar.nc2.FileWriter: org.slf4j.Logger log> = $r0;

        <ucar.nc2.FileWriter: boolean debug> = 0;

        <ucar.nc2.FileWriter: boolean debugWrite> = 0;

        return;
    }
}
