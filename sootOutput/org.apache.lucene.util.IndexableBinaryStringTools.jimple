public final class org.apache.lucene.util.IndexableBinaryStringTools extends java.lang.Object
{
    private static final org.apache.lucene.util.IndexableBinaryStringTools$CodingCase[] CODING_CASES;
    static final boolean $assertionsDisabled;

    private void <init>()
    {
        org.apache.lucene.util.IndexableBinaryStringTools r0;

        r0 := @this: org.apache.lucene.util.IndexableBinaryStringTools;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int getEncodedLength(byte[], int, int)
    {
        byte[] r0;
        long $l1, $l2, $l3, $l4;
        int i0, $i5, $i6, i7;

        r0 := @parameter0: byte[];

        i7 := @parameter1: int;

        i0 := @parameter2: int;

        $l1 = (long) i0;

        $l2 = 8L * $l1;

        $l3 = $l2 + 14L;

        $l4 = $l3 / 15L;

        $i5 = (int) $l4;

        $i6 = $i5 + 1;

        return $i6;
    }

    public static int getDecodedLength(char[], int, int)
    {
        char $c5;
        long l6, l8, $l9, $l10, $l11, $l12;
        int i0, i1, i2, $i3, $i4, $i7, $i13;
        char[] r0;

        r0 := @parameter0: char[];

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        i1 = i0 - 1;

        if i1 > 0 goto label1;

        return 0;

     label1:
        $i3 = i2 + i0;

        $i4 = $i3 - 1;

        $c5 = r0[$i4];

        l6 = (long) $c5;

        $i7 = i1 - 1;

        l8 = (long) $i7;

        $l9 = l8 * 15L;

        $l10 = $l9 + 7L;

        $l11 = $l10 / 8L;

        $l12 = $l11 + l6;

        $i13 = (int) $l12;

        return $i13;
    }

    public static void encode(byte[], int, int, char[], int, int)
    {
        byte[] r4;
        byte $b6, $b12, $b16, $b25, $b29, $b35, $b47, $b51;
        java.lang.AssertionError $r10;
        short $s8, $s14, $s18, $s27, $s31, $s37, $s38, $s49, $s53, $s54, $s69, $s71, $s74, $s76, $s78, $s81, $s83, $s85;
        org.apache.lucene.util.IndexableBinaryStringTools$CodingCase[] $r0, $r2, $r5, $r6;
        char[] r3;
        boolean $z0;
        int i0, i1, i2, $i3, $i4, $i5, $i7, $i9, $i10, $i13, $i15, $i17, $i19, $i20, $i21, $i22, $i24, $i26, $i28, $i30, $i32, $i33, $i34, $i36, $i39, $i40, $i41, $i42, $i43, $i45, $i46, $i48, $i50, $i52, $i55, $i56, $i57, $i58, $i59, i61, $i62, i63, i64, i65, i66, i67, $i70, $i72, $i73, $i75, $i77, $i79, $i80, $i82, $i84, $i86;
        char $c11, $c23, $c44, $c60, $c68;
        org.apache.lucene.util.IndexableBinaryStringTools$CodingCase $r1, r8, r9;

        r4 := @parameter0: byte[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        r3 := @parameter3: char[];

        i2 := @parameter4: int;

        i61 := @parameter5: int;

        $z0 = <org.apache.lucene.util.IndexableBinaryStringTools: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $i62 = staticinvoke <org.apache.lucene.util.IndexableBinaryStringTools: int getEncodedLength(byte[],int,int)>(r4, i1, i0);

        if i61 == $i62 goto label01;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label01:
        if i0 <= 0 goto label11;

        i63 = i1;

        i64 = 0;

        i65 = i2;

     label02:
        $r0 = <org.apache.lucene.util.IndexableBinaryStringTools: org.apache.lucene.util.IndexableBinaryStringTools$CodingCase[] CODING_CASES>;

        $r1 = $r0[i64];

        $i3 = $r1.<org.apache.lucene.util.IndexableBinaryStringTools$CodingCase: int numBytes>;

        $i4 = i63 + $i3;

        if $i4 > i0 goto label06;

        $r5 = <org.apache.lucene.util.IndexableBinaryStringTools: org.apache.lucene.util.IndexableBinaryStringTools$CodingCase[] CODING_CASES>;

        r8 = $r5[i64];

        $i24 = r8.<org.apache.lucene.util.IndexableBinaryStringTools$CodingCase: int numBytes>;

        if 2 != $i24 goto label03;

        $b47 = r4[i63];

        $s69 = (short) $b47;

        $s49 = $s69 & 255;

        $i48 = r8.<org.apache.lucene.util.IndexableBinaryStringTools$CodingCase: int initialShift>;

        $i70 = (int) $s49;

        $i57 = $i70 << $i48;

        $i50 = i63 + 1;

        $b51 = r4[$i50];

        $s71 = (short) $b51;

        $s53 = $s71 & 255;

        $i52 = r8.<org.apache.lucene.util.IndexableBinaryStringTools$CodingCase: int finalShift>;

        $i72 = (int) $s53;

        $i55 = $i72 >>> $i52;

        $s54 = r8.<org.apache.lucene.util.IndexableBinaryStringTools$CodingCase: short finalMask>;

        $i73 = (int) $s54;

        $i56 = $i55 & $i73;

        $i58 = $i57 + $i56;

        $i59 = $i58 & 32767;

        $c60 = (char) $i59;

        r3[i65] = $c60;

        goto label04;

     label03:
        $b25 = r4[i63];

        $s74 = (short) $b25;

        $s27 = $s74 & 255;

        $i26 = r8.<org.apache.lucene.util.IndexableBinaryStringTools$CodingCase: int initialShift>;

        $i75 = (int) $s27;

        $i33 = $i75 << $i26;

        $i28 = i63 + 1;

        $b29 = r4[$i28];

        $s76 = (short) $b29;

        $s31 = $s76 & 255;

        $i30 = r8.<org.apache.lucene.util.IndexableBinaryStringTools$CodingCase: int middleShift>;

        $i77 = (int) $s31;

        $i32 = $i77 << $i30;

        $i41 = $i33 + $i32;

        $i34 = i63 + 2;

        $b35 = r4[$i34];

        $s78 = (short) $b35;

        $s37 = $s78 & 255;

        $i36 = r8.<org.apache.lucene.util.IndexableBinaryStringTools$CodingCase: int finalShift>;

        $i79 = (int) $s37;

        $i39 = $i79 >>> $i36;

        $s38 = r8.<org.apache.lucene.util.IndexableBinaryStringTools$CodingCase: short finalMask>;

        $i80 = (int) $s38;

        $i40 = $i39 & $i80;

        $i42 = $i41 + $i40;

        $i43 = $i42 & 32767;

        $c44 = (char) $i43;

        r3[i65] = $c44;

     label04:
        $i45 = r8.<org.apache.lucene.util.IndexableBinaryStringTools$CodingCase: int advanceBytes>;

        i63 = i63 + $i45;

        i64 = i64 + 1;

        $r6 = <org.apache.lucene.util.IndexableBinaryStringTools: org.apache.lucene.util.IndexableBinaryStringTools$CodingCase[] CODING_CASES>;

        $i46 = lengthof $r6;

        if i64 != $i46 goto label05;

        i64 = 0;

     label05:
        i65 = i65 + 1;

        goto label02;

     label06:
        $r2 = <org.apache.lucene.util.IndexableBinaryStringTools: org.apache.lucene.util.IndexableBinaryStringTools$CodingCase[] CODING_CASES>;

        r9 = $r2[i64];

        $i5 = i63 + 1;

        if $i5 >= i0 goto label07;

        i66 = i65 + 1;

        $b12 = r4[i63];

        $s81 = (short) $b12;

        $s14 = $s81 & 255;

        $i13 = r9.<org.apache.lucene.util.IndexableBinaryStringTools$CodingCase: int initialShift>;

        $i82 = (int) $s14;

        $i20 = $i82 << $i13;

        $i15 = i63 + 1;

        $b16 = r4[$i15];

        $s83 = (short) $b16;

        $s18 = $s83 & 255;

        $i17 = r9.<org.apache.lucene.util.IndexableBinaryStringTools$CodingCase: int middleShift>;

        $i84 = (int) $s18;

        $i19 = $i84 << $i17;

        $i21 = $i20 + $i19;

        $i22 = $i21 & 32767;

        $c23 = (char) $i22;

        r3[i65] = $c23;

        r3[i66] = 1;

        goto label11;

     label07:
        if i63 >= i0 goto label10;

        i67 = i65 + 1;

        $b6 = r4[i63];

        $s85 = (short) $b6;

        $s8 = $s85 & 255;

        $i7 = r9.<org.apache.lucene.util.IndexableBinaryStringTools$CodingCase: int initialShift>;

        $i86 = (int) $s8;

        $i9 = $i86 << $i7;

        $i10 = $i9 & 32767;

        $c11 = (char) $i10;

        r3[i65] = $c11;

        if i64 != 0 goto label08;

        $c68 = 1;

        goto label09;

     label08:
        $c68 = 0;

     label09:
        r3[i67] = $c68;

        goto label11;

     label10:
        r3[i65] = 1;

     label11:
        return;
    }

    public static void decode(char[], int, int, byte[], int, int)
    {
        byte[] r2;
        byte $b8, $b9, $b11, $b17, $b23, $b29, $b36, $b37, $b39, $b44, $b50, $b56, $b57, $b59, $b64, $b68;
        java.lang.AssertionError $r8;
        short $s13, $s15, $s19, $s21, $s25, $s27, $s40, $s42, $s46, $s48, $s60, $s62, s74, s75;
        org.apache.lucene.util.IndexableBinaryStringTools$CodingCase[] $r1, $r3, $r4;
        char[] r0;
        boolean $z0;
        int i0, i1, i2, i3, $i4, $i6, $i7, $i10, $i12, $i14, $i16, $i18, $i20, $i22, $i24, $i26, $i28, $i30, $i31, $i33, $i34, $i35, $i38, $i41, $i43, $i45, $i47, $i49, $i51, $i52, $i53, $i54, $i55, $i58, $i61, $i63, $i65, $i66, $i67, $i69, $i70, i71, i72, i73, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91;
        char $c5, $c32;
        org.apache.lucene.util.IndexableBinaryStringTools$CodingCase r6, r7;

        r0 := @parameter0: char[];

        i3 := @parameter1: int;

        i0 := @parameter2: int;

        r2 := @parameter3: byte[];

        i2 := @parameter4: int;

        i1 := @parameter5: int;

        $z0 = <org.apache.lucene.util.IndexableBinaryStringTools: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $i69 = staticinvoke <org.apache.lucene.util.IndexableBinaryStringTools: int getDecodedLength(char[],int,int)>(r0, i3, i0);

        if i1 == $i69 goto label01;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label01:
        $i70 = i0 - 1;

        if i1 <= 0 goto label11;

        i71 = 0;

        i72 = i2;

        i73 = i3;

     label02:
        $i4 = $i70 - 1;

        if i73 >= $i4 goto label08;

        $r3 = <org.apache.lucene.util.IndexableBinaryStringTools: org.apache.lucene.util.IndexableBinaryStringTools$CodingCase[] CODING_CASES>;

        r6 = $r3[i71];

        $c32 = r0[i73];

        s74 = (short) $c32;

        $i33 = r6.<org.apache.lucene.util.IndexableBinaryStringTools$CodingCase: int numBytes>;

        if 2 != $i33 goto label05;

        if 0 != i71 goto label03;

        $i66 = r6.<org.apache.lucene.util.IndexableBinaryStringTools$CodingCase: int initialShift>;

        $i76 = (int) s74;

        $i67 = $i76 >>> $i66;

        $b68 = (byte) $i67;

        r2[i72] = $b68;

        goto label04;

     label03:
        $b57 = r2[i72];

        $i54 = r6.<org.apache.lucene.util.IndexableBinaryStringTools$CodingCase: int initialShift>;

        $i77 = (int) s74;

        $i55 = $i77 >>> $i54;

        $b56 = (byte) $i55;

        $i78 = (int) $b57;

        $i79 = (int) $b56;

        $i58 = $i78 + $i79;

        $b59 = (byte) $i58;

        r2[i72] = $b59;

     label04:
        $i65 = i72 + 1;

        $s60 = r6.<org.apache.lucene.util.IndexableBinaryStringTools$CodingCase: short finalMask>;

        $s62 = s74 & $s60;

        $i61 = r6.<org.apache.lucene.util.IndexableBinaryStringTools$CodingCase: int finalShift>;

        $i80 = (int) $s62;

        $i63 = $i80 << $i61;

        $b64 = (byte) $i63;

        r2[$i65] = $b64;

        goto label06;

     label05:
        $b37 = r2[i72];

        $i34 = r6.<org.apache.lucene.util.IndexableBinaryStringTools$CodingCase: int initialShift>;

        $i81 = (int) s74;

        $i35 = $i81 >>> $i34;

        $b36 = (byte) $i35;

        $i82 = (int) $b37;

        $i83 = (int) $b36;

        $i38 = $i82 + $i83;

        $b39 = (byte) $i38;

        r2[i72] = $b39;

        $i45 = i72 + 1;

        $s40 = r6.<org.apache.lucene.util.IndexableBinaryStringTools$CodingCase: short middleMask>;

        $s42 = s74 & $s40;

        $i41 = r6.<org.apache.lucene.util.IndexableBinaryStringTools$CodingCase: int middleShift>;

        $i84 = (int) $s42;

        $i43 = $i84 >>> $i41;

        $b44 = (byte) $i43;

        r2[$i45] = $b44;

        $i51 = i72 + 2;

        $s46 = r6.<org.apache.lucene.util.IndexableBinaryStringTools$CodingCase: short finalMask>;

        $s48 = s74 & $s46;

        $i47 = r6.<org.apache.lucene.util.IndexableBinaryStringTools$CodingCase: int finalShift>;

        $i85 = (int) $s48;

        $i49 = $i85 << $i47;

        $b50 = (byte) $i49;

        r2[$i51] = $b50;

     label06:
        $i52 = r6.<org.apache.lucene.util.IndexableBinaryStringTools$CodingCase: int advanceBytes>;

        i72 = i72 + $i52;

        i71 = i71 + 1;

        $r4 = <org.apache.lucene.util.IndexableBinaryStringTools: org.apache.lucene.util.IndexableBinaryStringTools$CodingCase[] CODING_CASES>;

        $i53 = lengthof $r4;

        if i71 != $i53 goto label07;

        i71 = 0;

     label07:
        i73 = i73 + 1;

        goto label02;

     label08:
        $c5 = r0[i73];

        s75 = (short) $c5;

        $r1 = <org.apache.lucene.util.IndexableBinaryStringTools: org.apache.lucene.util.IndexableBinaryStringTools$CodingCase[] CODING_CASES>;

        r7 = $r1[i71];

        if 0 != i71 goto label09;

        r2[i72] = 0;

     label09:
        $b9 = r2[i72];

        $i6 = r7.<org.apache.lucene.util.IndexableBinaryStringTools$CodingCase: int initialShift>;

        $i86 = (int) s75;

        $i7 = $i86 >>> $i6;

        $b8 = (byte) $i7;

        $i87 = (int) $b9;

        $i88 = (int) $b8;

        $i10 = $i87 + $i88;

        $b11 = (byte) $i10;

        r2[i72] = $b11;

        $i31 = i1 - i72;

        if $i31 <= 1 goto label11;

        $i12 = r7.<org.apache.lucene.util.IndexableBinaryStringTools$CodingCase: int numBytes>;

        if 2 != $i12 goto label10;

        $i30 = i72 + 1;

        $s25 = r7.<org.apache.lucene.util.IndexableBinaryStringTools$CodingCase: short finalMask>;

        $s27 = s75 & $s25;

        $i26 = r7.<org.apache.lucene.util.IndexableBinaryStringTools$CodingCase: int finalShift>;

        $i89 = (int) $s27;

        $i28 = $i89 >>> $i26;

        $b29 = (byte) $i28;

        r2[$i30] = $b29;

        goto label11;

     label10:
        $i18 = i72 + 1;

        $s13 = r7.<org.apache.lucene.util.IndexableBinaryStringTools$CodingCase: short middleMask>;

        $s15 = s75 & $s13;

        $i14 = r7.<org.apache.lucene.util.IndexableBinaryStringTools$CodingCase: int middleShift>;

        $i90 = (int) $s15;

        $i16 = $i90 >>> $i14;

        $b17 = (byte) $i16;

        r2[$i18] = $b17;

        if $i31 <= 2 goto label11;

        $i24 = i72 + 2;

        $s19 = r7.<org.apache.lucene.util.IndexableBinaryStringTools$CodingCase: short finalMask>;

        $s21 = s75 & $s19;

        $i20 = r7.<org.apache.lucene.util.IndexableBinaryStringTools$CodingCase: int finalShift>;

        $i91 = (int) $s21;

        $i22 = $i91 << $i20;

        $b23 = (byte) $i22;

        r2[$i24] = $b23;

     label11:
        return;
    }

    static void <clinit>()
    {
        org.apache.lucene.util.IndexableBinaryStringTools$CodingCase[] $r1;
        org.apache.lucene.util.IndexableBinaryStringTools$CodingCase $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/IndexableBinaryStringTools;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.IndexableBinaryStringTools: boolean $assertionsDisabled> = $z1;

        $r1 = newarray (org.apache.lucene.util.IndexableBinaryStringTools$CodingCase)[8];

        $r2 = new org.apache.lucene.util.IndexableBinaryStringTools$CodingCase;

        specialinvoke $r2.<org.apache.lucene.util.IndexableBinaryStringTools$CodingCase: void <init>(int,int)>(7, 1);

        $r1[0] = $r2;

        $r3 = new org.apache.lucene.util.IndexableBinaryStringTools$CodingCase;

        specialinvoke $r3.<org.apache.lucene.util.IndexableBinaryStringTools$CodingCase: void <init>(int,int,int)>(14, 6, 2);

        $r1[1] = $r3;

        $r4 = new org.apache.lucene.util.IndexableBinaryStringTools$CodingCase;

        specialinvoke $r4.<org.apache.lucene.util.IndexableBinaryStringTools$CodingCase: void <init>(int,int,int)>(13, 5, 3);

        $r1[2] = $r4;

        $r5 = new org.apache.lucene.util.IndexableBinaryStringTools$CodingCase;

        specialinvoke $r5.<org.apache.lucene.util.IndexableBinaryStringTools$CodingCase: void <init>(int,int,int)>(12, 4, 4);

        $r1[3] = $r5;

        $r6 = new org.apache.lucene.util.IndexableBinaryStringTools$CodingCase;

        specialinvoke $r6.<org.apache.lucene.util.IndexableBinaryStringTools$CodingCase: void <init>(int,int,int)>(11, 3, 5);

        $r1[4] = $r6;

        $r7 = new org.apache.lucene.util.IndexableBinaryStringTools$CodingCase;

        specialinvoke $r7.<org.apache.lucene.util.IndexableBinaryStringTools$CodingCase: void <init>(int,int,int)>(10, 2, 6);

        $r1[5] = $r7;

        $r8 = new org.apache.lucene.util.IndexableBinaryStringTools$CodingCase;

        specialinvoke $r8.<org.apache.lucene.util.IndexableBinaryStringTools$CodingCase: void <init>(int,int,int)>(9, 1, 7);

        $r1[6] = $r8;

        $r9 = new org.apache.lucene.util.IndexableBinaryStringTools$CodingCase;

        specialinvoke $r9.<org.apache.lucene.util.IndexableBinaryStringTools$CodingCase: void <init>(int,int)>(8, 0);

        $r1[7] = $r9;

        <org.apache.lucene.util.IndexableBinaryStringTools: org.apache.lucene.util.IndexableBinaryStringTools$CodingCase[] CODING_CASES> = $r1;

        return;
    }
}
