public final class com.mycila.inject.redis.Redis extends java.lang.Object
{
    private static final java.util.logging.Logger LOGGER;
    private static final java.lang.ThreadLocal connection;
    private static redis.clients.jedis.JedisPool pool;

    private void <init>()
    {
        com.mycila.inject.redis.Redis r0;

        r0 := @this: com.mycila.inject.redis.Redis;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static redis.clients.jedis.Jedis get()
    {
        java.lang.IllegalStateException $r3;
        java.lang.ThreadLocal $r0;
        redis.clients.jedis.Jedis r2;
        java.lang.Object $r1;

        $r0 = <com.mycila.inject.redis.Redis: java.lang.ThreadLocal connection>;

        $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();

        r2 = (redis.clients.jedis.Jedis) $r1;

        if r2 != null goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No Redis connection bound to local thread");

        throw $r3;

     label1:
        return r2;
    }

    static boolean isEmpty()
    {
        java.lang.ThreadLocal $r0;
        java.lang.Object $r1;
        boolean $z0;

        $r0 = <com.mycila.inject.redis.Redis: java.lang.ThreadLocal connection>;

        $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();

        if $r1 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static void set(redis.clients.jedis.Jedis)
    {
        java.lang.IllegalStateException $r4;
        java.lang.ThreadLocal $r0, $r3;
        redis.clients.jedis.Jedis r2;
        java.lang.Object $r1;

        r2 := @parameter0: redis.clients.jedis.Jedis;

        $r0 = <com.mycila.inject.redis.Redis: java.lang.ThreadLocal connection>;

        $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();

        if $r1 == null goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Redis connection already bound to local thread");

        throw $r4;

     label1:
        $r3 = <com.mycila.inject.redis.Redis: java.lang.ThreadLocal connection>;

        virtualinvoke $r3.<java.lang.ThreadLocal: void set(java.lang.Object)>(r2);

        return;
    }

    static redis.clients.jedis.Jedis remove()
    {
        java.lang.ThreadLocal $r1;
        redis.clients.jedis.Jedis $r0;

        $r0 = staticinvoke <com.mycila.inject.redis.Redis: redis.clients.jedis.Jedis get()>();

        $r1 = <com.mycila.inject.redis.Redis: java.lang.ThreadLocal connection>;

        virtualinvoke $r1.<java.lang.ThreadLocal: void remove()>();

        return $r0;
    }

    public static java.lang.Object execute(com.mycila.inject.redis.RedisCallback) throws java.lang.Throwable
    {
        java.lang.Throwable $r14;
        java.lang.IllegalStateException $r13;
        java.util.logging.Level $r1, $r7, $r15;
        com.mycila.inject.redis.RedisCallback r5;
        redis.clients.jedis.JedisPool $r0, $r3, $r9, $r17;
        boolean $z0, $z1, $z2;
        java.util.logging.Logger $r2, $r8, $r10, $r11, $r16, $r18;
        redis.clients.jedis.Jedis $r12;
        java.lang.Object $r4, $r6;

        r5 := @parameter0: com.mycila.inject.redis.RedisCallback;

        $r0 = <com.mycila.inject.redis.Redis: redis.clients.jedis.JedisPool pool>;

        if $r0 != null goto label1;

        $r13 = new java.lang.IllegalStateException;

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No JedisPool injected");

        throw $r13;

     label1:
        $r2 = <com.mycila.inject.redis.Redis: java.util.logging.Logger LOGGER>;

        $r1 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        if $z0 == 0 goto label2;

        $r11 = <com.mycila.inject.redis.Redis: java.util.logging.Logger LOGGER>;

        virtualinvoke $r11.<java.util.logging.Logger: void fine(java.lang.String)>("Getting Redis connection from pool...");

     label2:
        $r3 = <com.mycila.inject.redis.Redis: redis.clients.jedis.JedisPool pool>;

        $r4 = virtualinvoke $r3.<redis.clients.jedis.JedisPool: java.lang.Object getResource()>();

        $r12 = (redis.clients.jedis.Jedis) $r4;

     label3:
        $r6 = interfaceinvoke r5.<com.mycila.inject.redis.RedisCallback: java.lang.Object execute(redis.clients.jedis.Jedis)>($r12);

     label4:
        $r8 = <com.mycila.inject.redis.Redis: java.util.logging.Logger LOGGER>;

        $r7 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z1 = virtualinvoke $r8.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r7);

        if $z1 == 0 goto label5;

        $r10 = <com.mycila.inject.redis.Redis: java.util.logging.Logger LOGGER>;

        virtualinvoke $r10.<java.util.logging.Logger: void fine(java.lang.String)>("Returning Redis connection to pool...");

     label5:
        $r9 = <com.mycila.inject.redis.Redis: redis.clients.jedis.JedisPool pool>;

        virtualinvoke $r9.<redis.clients.jedis.JedisPool: void returnResource(java.lang.Object)>($r12);

        return $r6;

     label6:
        $r14 := @caughtexception;

     label7:
        $r16 = <com.mycila.inject.redis.Redis: java.util.logging.Logger LOGGER>;

        $r15 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z2 = virtualinvoke $r16.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r15);

        if $z2 == 0 goto label8;

        $r18 = <com.mycila.inject.redis.Redis: java.util.logging.Logger LOGGER>;

        virtualinvoke $r18.<java.util.logging.Logger: void fine(java.lang.String)>("Returning Redis connection to pool...");

     label8:
        $r17 = <com.mycila.inject.redis.Redis: redis.clients.jedis.JedisPool pool>;

        virtualinvoke $r17.<redis.clients.jedis.JedisPool: void returnResource(java.lang.Object)>($r12);

        throw $r14;

        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    static void setPool(redis.clients.jedis.JedisPool)
    {
        redis.clients.jedis.JedisPool $r0, r1;
        java.util.logging.Logger $r3;
        java.util.logging.Level $r2;

        r1 := @parameter0: redis.clients.jedis.JedisPool;

        $r0 = <com.mycila.inject.redis.Redis: redis.clients.jedis.JedisPool pool>;

        if $r0 == null goto label1;

        $r3 = <com.mycila.inject.redis.Redis: java.util.logging.Logger LOGGER>;

        $r2 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        virtualinvoke $r3.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r2, "JedisPool pool already set");

     label1:
        <com.mycila.inject.redis.Redis: redis.clients.jedis.JedisPool pool> = r1;

        return;
    }

    static void <clinit>()
    {
        java.lang.ThreadLocal $r3;
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        $r0 = class "Lcom/mycila/inject/redis/Redis;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <com.mycila.inject.redis.Redis: java.util.logging.Logger LOGGER> = $r2;

        $r3 = new java.lang.ThreadLocal;

        specialinvoke $r3.<java.lang.ThreadLocal: void <init>()>();

        <com.mycila.inject.redis.Redis: java.lang.ThreadLocal connection> = $r3;

        return;
    }
}
