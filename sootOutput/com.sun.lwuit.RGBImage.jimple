public class com.sun.lwuit.RGBImage extends com.sun.lwuit.Image
{
    private int width;
    private int height;
    private int[] rgb;
    private boolean opaque;

    public void <init>(com.sun.lwuit.Image)
    {
        int[] $r2;
        com.sun.lwuit.RGBImage r0;
        int $i0, $i1;
        com.sun.lwuit.Image r1;

        r0 := @this: com.sun.lwuit.RGBImage;

        r1 := @parameter0: com.sun.lwuit.Image;

        specialinvoke r0.<com.sun.lwuit.Image: void <init>(java.lang.Object)>(null);

        $i0 = virtualinvoke r1.<com.sun.lwuit.Image: int getWidth()>();

        r0.<com.sun.lwuit.RGBImage: int width> = $i0;

        $i1 = virtualinvoke r1.<com.sun.lwuit.Image: int getHeight()>();

        r0.<com.sun.lwuit.RGBImage: int height> = $i1;

        $r2 = virtualinvoke r1.<com.sun.lwuit.Image: int[] getRGBCached()>();

        r0.<com.sun.lwuit.RGBImage: int[] rgb> = $r2;

        return;
    }

    public void <init>(int[], int, int)
    {
        int[] r1;
        com.sun.lwuit.RGBImage r0;
        int i0, i1;

        r0 := @this: com.sun.lwuit.RGBImage;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<com.sun.lwuit.Image: void <init>(java.lang.Object)>(null);

        r0.<com.sun.lwuit.RGBImage: int width> = i0;

        r0.<com.sun.lwuit.RGBImage: int height> = i1;

        r0.<com.sun.lwuit.RGBImage: int[] rgb> = r1;

        return;
    }

    public com.sun.lwuit.Image subImage(int, int, int, int, boolean)
    {
        com.sun.lwuit.RGBImage $r1, r2;
        int[] r0, $r3;
        int i0, i1, $i2, $i3, i4, i5, i6, i7, $i8, $i9, $i10, $i11, i12, $i13, i14;
        boolean z0;

        r2 := @this: com.sun.lwuit.RGBImage;

        i6 := @parameter0: int;

        i7 := @parameter1: int;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        z0 := @parameter4: boolean;

        $i2 = i0 * i1;

        r0 = newarray (int)[$i2];

        i14 = 0;

     label1:
        $i3 = lengthof r0;

        if i14 >= $i3 goto label2;

        i4 = i14 / i0;

        i5 = i14 % i0;

        $i11 = i6 + i5;

        $i9 = i7 + i4;

        $i8 = r2.<com.sun.lwuit.RGBImage: int width>;

        $i10 = $i9 * $i8;

        i12 = $i11 + $i10;

        $r3 = r2.<com.sun.lwuit.RGBImage: int[] rgb>;

        $i13 = $r3[i12];

        r0[i14] = $i13;

        i14 = i14 + 1;

        goto label1;

     label2:
        $r1 = new com.sun.lwuit.RGBImage;

        specialinvoke $r1.<com.sun.lwuit.RGBImage: void <init>(int[],int,int)>(r0, i0, i1);

        return $r1;
    }

    public com.sun.lwuit.Image scaled(int, int)
    {
        com.sun.lwuit.RGBImage r0, $r1;
        int[] $r2, $r3;
        int $i0, $i1, i2, i3, $i4;

        r0 := @this: com.sun.lwuit.RGBImage;

        i2 := @parameter0: int;

        i3 := @parameter1: int;

        $i0 = virtualinvoke r0.<com.sun.lwuit.RGBImage: int getWidth()>();

        $i1 = virtualinvoke r0.<com.sun.lwuit.RGBImage: int getHeight()>();

        if $i0 != i2 goto label1;

        if $i1 != i3 goto label1;

        return r0;

     label1:
        $r2 = newarray (int)[$i0];

        $i4 = i2 * i3;

        $r3 = newarray (int)[$i4];

        virtualinvoke r0.<com.sun.lwuit.RGBImage: boolean scaleArray(int,int,int,int,int[],int[])>($i0, $i1, i3, i2, $r2, $r3);

        $r1 = new com.sun.lwuit.RGBImage;

        specialinvoke $r1.<com.sun.lwuit.RGBImage: void <init>(int[],int,int)>($r3, i2, i3);

        return $r1;
    }

    public void scale(int, int)
    {
        com.sun.lwuit.RGBImage r0;
        int[] $r1, $r2;
        int $i0, $i1, i2, i3, $i4;

        r0 := @this: com.sun.lwuit.RGBImage;

        i2 := @parameter0: int;

        i3 := @parameter1: int;

        $i0 = virtualinvoke r0.<com.sun.lwuit.RGBImage: int getWidth()>();

        $i1 = virtualinvoke r0.<com.sun.lwuit.RGBImage: int getHeight()>();

        if $i0 != i2 goto label1;

        if $i1 != i3 goto label1;

        return;

     label1:
        $r1 = newarray (int)[$i0];

        $i4 = i2 * i3;

        $r2 = newarray (int)[$i4];

        virtualinvoke r0.<com.sun.lwuit.RGBImage: boolean scaleArray(int,int,int,int,int[],int[])>($i0, $i1, i3, i2, $r1, $r2);

        r0.<com.sun.lwuit.RGBImage: int width> = i2;

        r0.<com.sun.lwuit.RGBImage: int height> = i3;

        r0.<com.sun.lwuit.RGBImage: int[] rgb> = $r2;

        return;
    }

    public com.sun.lwuit.Image rotate(int)
    {
        int i0;
        java.lang.RuntimeException $r0;
        com.sun.lwuit.RGBImage r1;

        r1 := @this: com.sun.lwuit.RGBImage;

        i0 := @parameter0: int;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("The rotate method is not supported by RGB images at the moment");

        throw $r0;
    }

    public com.sun.lwuit.Image modifyAlpha(byte)
    {
        com.sun.lwuit.RGBImage r0, $r7;
        byte b2;
        int[] $r1, r2, $r3, $r4, $r5;
        int $i0, $i1, $i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, $i14;

        r0 := @this: com.sun.lwuit.RGBImage;

        b2 := @parameter0: byte;

        $r1 = r0.<com.sun.lwuit.RGBImage: int[] rgb>;

        $i0 = lengthof $r1;

        r2 = newarray (int)[$i0];

        $r4 = r0.<com.sun.lwuit.RGBImage: int[] rgb>;

        $r3 = r0.<com.sun.lwuit.RGBImage: int[] rgb>;

        $i1 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r2, 0, $i1);

        $i14 = (int) b2;

        $i3 = $i14 << 24;

        i4 = $i3 & -16777216;

        i13 = 0;

     label1:
        $r5 = r0.<com.sun.lwuit.RGBImage: int[] rgb>;

        $i5 = lengthof $r5;

        if i13 >= $i5 goto label3;

        $i8 = r2[i13];

        $i9 = $i8 & -16777216;

        if $i9 == 0 goto label2;

        $i10 = r2[i13];

        $i11 = $i10 & 16777215;

        $i12 = $i11 | i4;

        r2[i13] = $i12;

     label2:
        i13 = i13 + 1;

        goto label1;

     label3:
        $r7 = new com.sun.lwuit.RGBImage;

        $i7 = r0.<com.sun.lwuit.RGBImage: int width>;

        $i6 = r0.<com.sun.lwuit.RGBImage: int height>;

        specialinvoke $r7.<com.sun.lwuit.RGBImage: void <init>(int[],int,int)>(r2, $i7, $i6);

        return $r7;
    }

    public com.sun.lwuit.Graphics getGraphics()
    {
        java.lang.RuntimeException $r0;
        com.sun.lwuit.RGBImage r1;

        r1 := @this: com.sun.lwuit.RGBImage;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("RGBImage objects can\'t be modified via graphics");

        throw $r0;
    }

    public int[] getRGB()
    {
        int[] $r1;
        com.sun.lwuit.RGBImage r0;

        r0 := @this: com.sun.lwuit.RGBImage;

        $r1 = r0.<com.sun.lwuit.RGBImage: int[] rgb>;

        return $r1;
    }

    void getRGB(int[], int, int, int, int, int)
    {
        com.sun.lwuit.RGBImage r0;
        int[] r1, $r2;
        int i0, $i1, i2, $i3, i4, i5, i6, $i7, i8, $i9, $i10, $i11, $i12, i13, i14, i15;

        r0 := @this: com.sun.lwuit.RGBImage;

        r1 := @parameter0: int[];

        i8 := @parameter1: int;

        i2 := @parameter2: int;

        i0 := @parameter3: int;

        i5 := @parameter4: int;

        i4 := @parameter5: int;

        $i1 = r0.<com.sun.lwuit.RGBImage: int width>;

        $i3 = i0 * $i1;

        i13 = $i3 + i2;

        i14 = 0;

     label1:
        if i14 >= i4 goto label4;

        i6 = i14 * i5;

        i15 = 0;

     label2:
        if i15 >= i5 goto label3;

        $i9 = i8 + i6;

        $i12 = $i9 + i15;

        $r2 = r0.<com.sun.lwuit.RGBImage: int[] rgb>;

        $i10 = i13 + i15;

        $i11 = $r2[$i10];

        r1[$i12] = $i11;

        i15 = i15 + 1;

        goto label2;

     label3:
        $i7 = r0.<com.sun.lwuit.RGBImage: int width>;

        i13 = i13 + $i7;

        i14 = i14 + 1;

        goto label1;

     label4:
        return;
    }

    protected void drawImage(com.sun.lwuit.Graphics, java.lang.Object, int, int)
    {
        com.sun.lwuit.RGBImage r1;
        com.sun.lwuit.Graphics r0;
        int[] $r2;
        int i0, i1, $i2, $i3;
        java.lang.Object r3;
        boolean $z0, $z1;

        r1 := @this: com.sun.lwuit.RGBImage;

        r0 := @parameter0: com.sun.lwuit.Graphics;

        r3 := @parameter1: java.lang.Object;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r2 = r1.<com.sun.lwuit.RGBImage: int[] rgb>;

        $i3 = r1.<com.sun.lwuit.RGBImage: int width>;

        $i2 = r1.<com.sun.lwuit.RGBImage: int height>;

        $z0 = r1.<com.sun.lwuit.RGBImage: boolean opaque>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        virtualinvoke r0.<com.sun.lwuit.Graphics: void drawRGB(int[],int,int,int,int,int,boolean)>($r2, 0, i0, i1, $i3, $i2, $z1);

        return;
    }

    public void setOpaque(boolean)
    {
        com.sun.lwuit.RGBImage r0;
        boolean z0;

        r0 := @this: com.sun.lwuit.RGBImage;

        z0 := @parameter0: boolean;

        r0.<com.sun.lwuit.RGBImage: boolean opaque> = z0;

        return;
    }

    public boolean isOpaque()
    {
        com.sun.lwuit.RGBImage r0;
        boolean $z0;

        r0 := @this: com.sun.lwuit.RGBImage;

        $z0 = r0.<com.sun.lwuit.RGBImage: boolean opaque>;

        return $z0;
    }

    public int getWidth()
    {
        int $i0;
        com.sun.lwuit.RGBImage r0;

        r0 := @this: com.sun.lwuit.RGBImage;

        $i0 = r0.<com.sun.lwuit.RGBImage: int width>;

        return $i0;
    }

    public int getHeight()
    {
        int $i0;
        com.sun.lwuit.RGBImage r0;

        r0 := @this: com.sun.lwuit.RGBImage;

        $i0 = r0.<com.sun.lwuit.RGBImage: int height>;

        return $i0;
    }
}
