public class com.google.gwt.logging.server.JsonLogRecordServerUtil extends java.lang.Object
{
    private static java.util.logging.Logger logger;

    public void <init>()
    {
        com.google.gwt.logging.server.JsonLogRecordServerUtil r0;

        r0 := @this: com.google.gwt.logging.server.JsonLogRecordServerUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.logging.LogRecord logRecordFromJson(java.lang.String) throws org.json.JSONException
    {
        java.lang.Throwable $r7;
        long $l0;
        java.util.logging.LogRecord $r8;
        java.util.logging.Level $r9;
        org.json.JSONObject $r0;
        java.lang.String r1, $r2, $r3, $r4, $r5, $r6;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.json.JSONObject;

        specialinvoke $r0.<org.json.JSONObject: void <init>(java.lang.String)>(r1);

        $r2 = virtualinvoke $r0.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("level");

        $r3 = virtualinvoke $r0.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("loggerName");

        $r4 = virtualinvoke $r0.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("msg");

        $r5 = virtualinvoke $r0.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("timestamp");

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r5);

        $r6 = virtualinvoke $r0.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("thrown");

        $r7 = staticinvoke <com.google.gwt.logging.server.JsonLogRecordServerUtil: java.lang.Throwable throwableFromJson(java.lang.String)>($r6);

        $r8 = new java.util.logging.LogRecord;

        $r9 = staticinvoke <java.util.logging.Level: java.util.logging.Level parse(java.lang.String)>($r2);

        specialinvoke $r8.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>($r9, $r4);

        virtualinvoke $r8.<java.util.logging.LogRecord: void setLoggerName(java.lang.String)>($r3);

        virtualinvoke $r8.<java.util.logging.LogRecord: void setThrown(java.lang.Throwable)>($r7);

        virtualinvoke $r8.<java.util.logging.LogRecord: void setMillis(long)>($l0);

        return $r8;
    }

    private static java.lang.StackTraceElement stackTraceElementFromJson(java.lang.String) throws org.json.JSONException
    {
        org.json.JSONObject $r0;
        int $i0;
        java.lang.StackTraceElement $r6;
        java.lang.String r1, $r2, $r3, $r4, $r5;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.json.JSONObject;

        specialinvoke $r0.<org.json.JSONObject: void <init>(java.lang.String)>(r1);

        $r2 = virtualinvoke $r0.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("className");

        $r3 = virtualinvoke $r0.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("fileName");

        $r4 = virtualinvoke $r0.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("methodName");

        $r5 = virtualinvoke $r0.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("lineNumber");

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r5);

        $r6 = new java.lang.StackTraceElement;

        specialinvoke $r6.<java.lang.StackTraceElement: void <init>(java.lang.String,java.lang.String,java.lang.String,int)>($r2, $r4, $r3, $i0);

        return $r6;
    }

    private static java.lang.Throwable throwableFromJson(java.lang.String) throws org.json.JSONException
    {
        java.lang.Throwable $r4, $r6;
        org.json.JSONObject $r1;
        java.lang.StackTraceElement[] r9;
        int $i0, $i1, $i2, i3;
        java.lang.StackTraceElement $r8;
        java.lang.String r0, $r2, $r3, $r7;
        org.json.JSONArray $r5;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("{}");

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r1 = new org.json.JSONObject;

        specialinvoke $r1.<org.json.JSONObject: void <init>(java.lang.String)>(r0);

        $r2 = virtualinvoke $r1.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("message");

        $r3 = virtualinvoke $r1.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("cause");

        $r4 = staticinvoke <com.google.gwt.logging.server.JsonLogRecordServerUtil: java.lang.Throwable throwableFromJson(java.lang.String)>($r3);

        r9 = null;

        $r5 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("stackTrace");

        $i0 = virtualinvoke $r5.<org.json.JSONArray: int length()>();

        if $i0 <= 0 goto label3;

        $i1 = virtualinvoke $r5.<org.json.JSONArray: int length()>();

        r9 = newarray (java.lang.StackTraceElement)[$i1];

        i3 = 0;

     label2:
        $i2 = virtualinvoke $r5.<org.json.JSONArray: int length()>();

        if i3 >= $i2 goto label3;

        $r7 = virtualinvoke $r5.<org.json.JSONArray: java.lang.String getString(int)>(i3);

        $r8 = staticinvoke <com.google.gwt.logging.server.JsonLogRecordServerUtil: java.lang.StackTraceElement stackTraceElementFromJson(java.lang.String)>($r7);

        r9[i3] = $r8;

        i3 = i3 + 1;

        goto label2;

     label3:
        $r6 = new java.lang.Throwable;

        specialinvoke $r6.<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>($r2, $r4);

        virtualinvoke $r6.<java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>(r9);

        return $r6;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        $r0 = class "Lcom/google/gwt/logging/server/JsonLogRecordServerUtil;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <com.google.gwt.logging.server.JsonLogRecordServerUtil: java.util.logging.Logger logger> = $r2;

        return;
    }
}
