public final enum class org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction extends java.lang.Enum implements org.waveprotocol.wave.client.editor.content.ContentElement$Action, org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$LineStyle
{
    public static final enum org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction LTR;
    public static final enum org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction RTL;
    private static final org.waveprotocol.wave.model.util.StringMap map;
    final java.lang.String value;
    final java.lang.String css;
    final org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Alignment alignment;
    final org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Alignment oppositeAlignment;
    private static final org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction[] $VALUES;

    public static org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction[] values()
    {
        java.lang.Object $r1;
        org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction[] $r0, $r2;

        $r0 = <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction: org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction[]) $r1;

        return $r2;
    }

    public static org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/waveprotocol/wave/client/editor/content/paragraph/Paragraph$Direction;", r0);

        $r2 = (org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction) $r1;

        return $r2;
    }

    static org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction fromValue(java.lang.String)
    {
        java.lang.Object $r2;
        java.lang.String r0;
        org.waveprotocol.wave.model.util.StringMap $r1;
        org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction $r3;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $r1 = <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction: org.waveprotocol.wave.model.util.StringMap map>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>(r0);

        $r3 = (org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction) $r2;

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    static java.lang.String cssFromValue(java.lang.String)
    {
        java.lang.String r0, $r2;
        org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction: org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction fromValue(java.lang.String)>(r0);

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction: java.lang.String cssValue()>();

        goto label2;

     label1:
        $r2 = "";

     label2:
        return $r2;
    }

    private void <init>(java.lang.String, int, java.lang.String, java.lang.String, org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Alignment, org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Alignment)
    {
        org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Alignment r4, r5;
        int i0;
        java.lang.String r1, r2, r3;
        org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Alignment;

        r5 := @parameter5: org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Alignment;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        r0.<org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction: java.lang.String value> = r2;

        r0.<org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction: java.lang.String css> = r3;

        r0.<org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction: org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Alignment alignment> = r4;

        r0.<org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction: org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Alignment oppositeAlignment> = r5;

        return;
    }

    public void execute(org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r1;
        org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction: void apply(org.waveprotocol.wave.client.editor.content.ContentElement,boolean)>(r1, 1);

        return;
    }

    public void apply(org.waveprotocol.wave.client.editor.content.ContentElement, boolean)
    {
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r5;
        org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Alignment $r3, $r4;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        java.lang.String $r6;
        org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction r1, $r2;
        boolean z0, $z1;

        r1 := @this: org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        z0 := @parameter1: boolean;

        $r5 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.CMutableDocument getMutableDoc()>();

        $r2 = <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction: org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction LTR>;

        if r1 != $r2 goto label1;

        $r6 = null;

        goto label3;

     label1:
        if z0 == 0 goto label2;

        $r6 = r1.<org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction: java.lang.String value>;

        goto label3;

     label2:
        $r6 = null;

     label3:
        virtualinvoke $r5.<org.waveprotocol.wave.client.editor.content.CMutableDocument: void setElementAttribute(java.lang.Object,java.lang.String,java.lang.String)>(r0, "d", $r6);

        if z0 == 0 goto label4;

        $r3 = r1.<org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction: org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Alignment oppositeAlignment>;

        $z1 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Alignment: boolean isApplied(org.waveprotocol.wave.client.editor.content.ContentElement)>(r0);

        if $z1 == 0 goto label4;

        $r4 = r1.<org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction: org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Alignment alignment>;

        virtualinvoke $r4.<org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Alignment: void apply(org.waveprotocol.wave.client.editor.content.ContentElement,boolean)>(r0, 1);

     label4:
        return;
    }

    public boolean isApplied(org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        java.lang.String $r1;
        org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction $r2, r3, $r4;
        boolean $z0;

        r3 := @this: org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: java.lang.String getAttribute(java.lang.String)>("d");

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction: org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction fromValue(java.lang.String)>($r1);

        if $r2 != null goto label1;

        $r4 = <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction: org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction LTR>;

        goto label2;

     label1:
        $r4 = $r2;

     label2:
        if r3 != $r4 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    public java.lang.String cssValue()
    {
        java.lang.String $r1;
        org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction: java.lang.String css>;

        return $r1;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.model.util.StringMap $r9, $r13;
        int i0, i1;
        java.lang.String $r12;
        org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction $r0, $r3, $r7, $r8, r11;
        org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction[] $r6, $r10;
        org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Alignment $r1, $r2, $r4, $r5;

        $r0 = new org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction;

        $r2 = <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Alignment: org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Alignment LEFT>;

        $r1 = <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Alignment: org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Alignment RIGHT>;

        specialinvoke $r0.<org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction: void <init>(java.lang.String,int,java.lang.String,java.lang.String,org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Alignment,org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Alignment)>("LTR", 0, "l", "ltr", $r2, $r1);

        <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction: org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction LTR> = $r0;

        $r3 = new org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction;

        $r5 = <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Alignment: org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Alignment RIGHT>;

        $r4 = <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Alignment: org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Alignment LEFT>;

        specialinvoke $r3.<org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction: void <init>(java.lang.String,int,java.lang.String,java.lang.String,org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Alignment,org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Alignment)>("RTL", 1, "r", "rtl", $r5, $r4);

        <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction: org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction RTL> = $r3;

        $r6 = newarray (org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction)[2];

        $r7 = <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction: org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction LTR>;

        $r6[0] = $r7;

        $r8 = <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction: org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction RTL>;

        $r6[1] = $r8;

        <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction: org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction[] $VALUES> = $r6;

        $r9 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction: org.waveprotocol.wave.model.util.StringMap map> = $r9;

        $r10 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction: org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction[] values()>();

        i0 = lengthof $r10;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r11 = $r10[i1];

        $r13 = <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction: org.waveprotocol.wave.model.util.StringMap map>;

        $r12 = r11.<org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$Direction: java.lang.String value>;

        interfaceinvoke $r13.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>($r12, r11);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
}
