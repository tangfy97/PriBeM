public class groovy.swing.factory.BoxFactory extends groovy.swing.factory.ComponentFactory
{
    public static java.lang.Long __timeStamp;
    public static java.lang.Long __timeStamp__239_neverHappen1239119697360;
    static java.lang.Class class$groovy$lang$MetaClass;
    static java.lang.Class class$0;
    static java.lang.Class class$java$lang$Number;
    static java.lang.Class class$java$lang$Object;
    static java.lang.Class class$javax$swing$Box;
    static java.lang.Class class$groovy$swing$factory$ComponentFactory;
    static java.lang.Class class$groovy$util$FactoryBuilderSupport;
    static java.lang.Class class$java$lang$Integer;
    static java.lang.Class class$javax$swing$BoxLayout;

    public void <init>()
    {
        java.lang.Object[] $r13;
        groovy.swing.factory.BoxFactory r3;
        int $i0, $i1, $i2;
        boolean $z0;
        java.lang.IllegalArgumentException $r9;
        java.lang.Class $r0, $r1, $r2, $r5, $r8, $r11, $r12, $r14;
        java.lang.Object $r4, $r6, $r7, $r10;

        r3 := @this: groovy.swing.factory.BoxFactory;

        $r0 = <groovy.swing.factory.BoxFactory: java.lang.Class class$0>;

        if $r0 != null goto label01;

        $r11 = staticinvoke <groovy.swing.factory.BoxFactory: java.lang.Class class$(java.lang.String)>("groovy.swing.factory.BoxFactory");

        <groovy.swing.factory.BoxFactory: java.lang.Class class$0> = $r11;

        goto label02;

     label01:
        $r11 = <groovy.swing.factory.BoxFactory: java.lang.Class class$0>;

     label02:
        $r1 = <groovy.swing.factory.BoxFactory: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label03;

        $r12 = staticinvoke <groovy.swing.factory.BoxFactory: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.swing.factory.BoxFactory: java.lang.Class class$groovy$lang$MetaClass> = $r12;

        goto label04;

     label03:
        $r12 = <groovy.swing.factory.BoxFactory: java.lang.Class class$groovy$lang$MetaClass>;

     label04:
        $r13 = newarray (java.lang.Object)[1];

        $r13[0] = null;

        $r2 = <groovy.swing.factory.BoxFactory: java.lang.Class class$groovy$swing$factory$ComponentFactory>;

        if $r2 != null goto label05;

        $r14 = staticinvoke <groovy.swing.factory.BoxFactory: java.lang.Class class$(java.lang.String)>("groovy.swing.factory.ComponentFactory");

        <groovy.swing.factory.BoxFactory: java.lang.Class class$groovy$swing$factory$ComponentFactory> = $r14;

        goto label06;

     label05:
        $r14 = <groovy.swing.factory.BoxFactory: java.lang.Class class$groovy$swing$factory$ComponentFactory>;

     label06:
        $i0 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: int selectConstructorAndTransformArguments(java.lang.Object[],int,java.lang.Class)>($r13, 2, $r14);

        $i1 = $i0 & 1;

        if $i1 == 0 goto label07;

        $r10 = $r13[0];

        $r13 = (java.lang.Object[]) $r10;

     label07:
        $i2 = $i0 >> 8;

        lookupswitch($i2)
        {
            case 0: goto label08;
            case 1: goto label09;
            default: goto label10;
        };

     label08:
        $r7 = $r13[0];

        $r8 = (java.lang.Class) $r7;

        specialinvoke r3.<groovy.swing.factory.ComponentFactory: void <init>(java.lang.Class)>($r8);

        goto label11;

     label09:
        $r4 = $r13[0];

        $r5 = (java.lang.Class) $r4;

        $r6 = $r13[1];

        $z0 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r6);

        specialinvoke r3.<groovy.swing.factory.ComponentFactory: void <init>(java.lang.Class,boolean)>($r5, $z0);

        goto label11;

     label10:
        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("illegal constructor number");

        throw $r9;

     label11:
        return;
    }

    public java.lang.Object newInstance(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object, java.util.Map) throws java.lang.InstantiationException, java.lang.IllegalAccessException
    {
        java.lang.Integer r44;
        java.util.Map r11;
        boolean $z0, $z1, $z2;
        groovy.util.FactoryBuilderSupport r33;
        java.lang.Object[] $r12, $r15, $r20, $r37;
        groovy.swing.factory.BoxFactory r32;
        java.lang.Number $r24;
        java.lang.Class $r0, r1, $r2, $r3, $r6, $r7, $r9, $r14, $r17, $r22, $r26, $r28, $r31, $r34, $r35, $r36, $r38, $r39, $r41, $r42, $r43, $r45, $r46, $r47, $r48;
        java.lang.Object r4, r5, $r8, $r10, $r13, $r16, $r18, $r19, $r21, $r23, $r25, $r27, $r29, $r30, $r40;

        r32 := @this: groovy.swing.factory.BoxFactory;

        r33 := @parameter0: groovy.util.FactoryBuilderSupport;

        r5 := @parameter1: java.lang.Object;

        r4 := @parameter2: java.lang.Object;

        r11 := @parameter3: java.util.Map;

        $r0 = <groovy.swing.factory.BoxFactory: java.lang.Class class$0>;

        if $r0 != null goto label01;

        $r34 = staticinvoke <groovy.swing.factory.BoxFactory: java.lang.Class class$(java.lang.String)>("groovy.swing.factory.BoxFactory");

        <groovy.swing.factory.BoxFactory: java.lang.Class class$0> = $r34;

        goto label02;

     label01:
        $r34 = <groovy.swing.factory.BoxFactory: java.lang.Class class$0>;

     label02:
        r1 = $r34;

        $r2 = <groovy.swing.factory.BoxFactory: java.lang.Class class$groovy$lang$MetaClass>;

        if $r2 != null goto label03;

        $r35 = staticinvoke <groovy.swing.factory.BoxFactory: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.swing.factory.BoxFactory: java.lang.Class class$groovy$lang$MetaClass> = $r35;

        goto label04;

     label03:
        $r35 = <groovy.swing.factory.BoxFactory: java.lang.Class class$groovy$lang$MetaClass>;

     label04:
        $r3 = <groovy.swing.factory.BoxFactory: java.lang.Class class$groovy$util$FactoryBuilderSupport>;

        if $r3 != null goto label05;

        $r31 = staticinvoke <groovy.swing.factory.BoxFactory: java.lang.Class class$(java.lang.String)>("groovy.util.FactoryBuilderSupport");

        $r36 = $r31;

        <groovy.swing.factory.BoxFactory: java.lang.Class class$groovy$util$FactoryBuilderSupport> = $r31;

        goto label06;

     label05:
        $r36 = <groovy.swing.factory.BoxFactory: java.lang.Class class$groovy$util$FactoryBuilderSupport>;

     label06:
        $r37 = newarray (java.lang.Object)[3];

        $r37[0] = r4;

        $r37[1] = r5;

        $r6 = <groovy.swing.factory.BoxFactory: java.lang.Class class$javax$swing$Box>;

        if $r6 != null goto label07;

        $r38 = staticinvoke <groovy.swing.factory.BoxFactory: java.lang.Class class$(java.lang.String)>("javax.swing.Box");

        $r39 = $r38;

        <groovy.swing.factory.BoxFactory: java.lang.Class class$javax$swing$Box> = $r38;

        goto label08;

     label07:
        $r39 = <groovy.swing.factory.BoxFactory: java.lang.Class class$javax$swing$Box>;

     label08:
        $r37[2] = $r39;

        $r40 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r36, "checkValueIsType", $r37);

        $z2 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r40);

        if $z2 == 0 goto label11;

        $r28 = <groovy.swing.factory.BoxFactory: java.lang.Class class$java$lang$Object>;

        if $r28 != null goto label09;

        $r41 = staticinvoke <groovy.swing.factory.BoxFactory: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        <groovy.swing.factory.BoxFactory: java.lang.Class class$java$lang$Object> = $r41;

        goto label10;

     label09:
        $r41 = <groovy.swing.factory.BoxFactory: java.lang.Class class$java$lang$Object>;

     label10:
        $r29 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>(r4, $r41);

        $r30 = (java.lang.Object) $r29;

        return $r30;

     label11:
        $r7 = <groovy.swing.factory.BoxFactory: java.lang.Class class$javax$swing$BoxLayout>;

        if $r7 != null goto label12;

        $r42 = staticinvoke <groovy.swing.factory.BoxFactory: java.lang.Class class$(java.lang.String)>("javax.swing.BoxLayout");

        <groovy.swing.factory.BoxFactory: java.lang.Class class$javax$swing$BoxLayout> = $r42;

        goto label13;

     label12:
        $r42 = <groovy.swing.factory.BoxFactory: java.lang.Class class$javax$swing$BoxLayout>;

     label13:
        $r8 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r42, "X_AXIS");

        $r9 = <groovy.swing.factory.BoxFactory: java.lang.Class class$java$lang$Integer>;

        if $r9 != null goto label14;

        $r43 = staticinvoke <groovy.swing.factory.BoxFactory: java.lang.Class class$(java.lang.String)>("java.lang.Integer");

        <groovy.swing.factory.BoxFactory: java.lang.Class class$java$lang$Integer> = $r43;

        goto label15;

     label14:
        $r43 = <groovy.swing.factory.BoxFactory: java.lang.Class class$java$lang$Integer>;

     label15:
        $r10 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r8, $r43);

        r44 = (java.lang.Integer) $r10;

        $r12 = newarray (java.lang.Object)[1];

        $r12[0] = "axis";

        $r13 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r11, "containsKey", $r12);

        $z0 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r13);

        if $z0 == 0 goto label21;

        $r20 = newarray (java.lang.Object)[1];

        $r20[0] = "axis";

        $r21 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r11, "remove", $r20);

        $z1 = $r21 instanceof java.lang.Number;

        if $z1 == 0 goto label20;

        $r22 = <groovy.swing.factory.BoxFactory: java.lang.Class class$java$lang$Number>;

        if $r22 != null goto label16;

        $r45 = staticinvoke <groovy.swing.factory.BoxFactory: java.lang.Class class$(java.lang.String)>("java.lang.Number");

        <groovy.swing.factory.BoxFactory: java.lang.Class class$java$lang$Number> = $r45;

        goto label17;

     label16:
        $r45 = <groovy.swing.factory.BoxFactory: java.lang.Class class$java$lang$Number>;

     label17:
        $r23 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r21, $r45);

        $r24 = (java.lang.Number) $r23;

        $r25 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethod0(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r24, "intValue");

        $r26 = <groovy.swing.factory.BoxFactory: java.lang.Class class$java$lang$Integer>;

        if $r26 != null goto label18;

        $r46 = staticinvoke <groovy.swing.factory.BoxFactory: java.lang.Class class$(java.lang.String)>("java.lang.Integer");

        <groovy.swing.factory.BoxFactory: java.lang.Class class$java$lang$Integer> = $r46;

        goto label19;

     label18:
        $r46 = <groovy.swing.factory.BoxFactory: java.lang.Class class$java$lang$Integer>;

     label19:
        $r27 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r25, $r46);

        r44 = (java.lang.Integer) $r27;

        goto label20;

     label20:
        goto label21;

     label21:
        $r14 = <groovy.swing.factory.BoxFactory: java.lang.Class class$javax$swing$Box>;

        if $r14 != null goto label22;

        $r47 = staticinvoke <groovy.swing.factory.BoxFactory: java.lang.Class class$(java.lang.String)>("javax.swing.Box");

        <groovy.swing.factory.BoxFactory: java.lang.Class class$javax$swing$Box> = $r47;

        goto label23;

     label22:
        $r47 = <groovy.swing.factory.BoxFactory: java.lang.Class class$javax$swing$Box>;

     label23:
        $r15 = newarray (java.lang.Object)[1];

        $r15[0] = r44;

        $r16 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeNewN(java.lang.Class,java.lang.Class,java.lang.Object)>(r1, $r47, $r15);

        $r17 = <groovy.swing.factory.BoxFactory: java.lang.Class class$java$lang$Object>;

        if $r17 != null goto label24;

        $r48 = staticinvoke <groovy.swing.factory.BoxFactory: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        <groovy.swing.factory.BoxFactory: java.lang.Class class$java$lang$Object> = $r48;

        goto label25;

     label24:
        $r48 = <groovy.swing.factory.BoxFactory: java.lang.Class class$java$lang$Object>;

     label25:
        $r18 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r16, $r48);

        $r19 = (java.lang.Object) $r18;

        return $r19;
    }

    static void <clinit>()
    {
        java.lang.Long $r2, $r3, $r4, $r5;
        java.lang.Class $r0, $r1, $r6, $r7;

        $r0 = <groovy.swing.factory.BoxFactory: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r6 = staticinvoke <groovy.swing.factory.BoxFactory: java.lang.Class class$(java.lang.String)>("groovy.swing.factory.BoxFactory");

        <groovy.swing.factory.BoxFactory: java.lang.Class class$0> = $r6;

        goto label2;

     label1:
        $r6 = <groovy.swing.factory.BoxFactory: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.swing.factory.BoxFactory: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r7 = staticinvoke <groovy.swing.factory.BoxFactory: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.swing.factory.BoxFactory: java.lang.Class class$groovy$lang$MetaClass> = $r7;

        goto label4;

     label3:
        $r7 = <groovy.swing.factory.BoxFactory: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r2 = new java.lang.Long;

        specialinvoke $r2.<java.lang.Long: void <init>(long)>(1239119697360L);

        $r3 = (java.lang.Long) $r2;

        <groovy.swing.factory.BoxFactory: java.lang.Long __timeStamp> = $r3;

        $r4 = new java.lang.Long;

        specialinvoke $r4.<java.lang.Long: void <init>(long)>(0L);

        $r5 = (java.lang.Long) $r4;

        <groovy.swing.factory.BoxFactory: java.lang.Long __timeStamp__239_neverHappen1239119697360> = $r5;

        return;
    }

    java.lang.String super$1$toString()
    {
        java.lang.String $r1;
        groovy.swing.factory.BoxFactory r0;

        r0 := @this: groovy.swing.factory.BoxFactory;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    boolean super$3$isLeaf()
    {
        groovy.swing.factory.BoxFactory r0;
        boolean $z0;

        r0 := @this: groovy.swing.factory.BoxFactory;

        $z0 = specialinvoke r0.<groovy.swing.factory.BeanFactory: boolean isLeaf()>();

        return $z0;
    }

    void super$3$setProperty(java.lang.String, java.lang.Object)
    {
        java.lang.Object r2;
        java.lang.String r1;
        groovy.swing.factory.BoxFactory r0;

        r0 := @this: groovy.swing.factory.BoxFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<groovy.swing.factory.BeanFactory: void setProperty(java.lang.String,java.lang.Object)>(r1, r2);

        return;
    }

    void super$4$setChild(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object)
    {
        groovy.util.FactoryBuilderSupport r1;
        groovy.swing.factory.BoxFactory r0;
        java.lang.Object r2, r3;

        r0 := @this: groovy.swing.factory.BoxFactory;

        r1 := @parameter0: groovy.util.FactoryBuilderSupport;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        specialinvoke r0.<groovy.swing.factory.ComponentFactory: void setChild(groovy.util.FactoryBuilderSupport,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        return;
    }

    void super$2$setParent(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object)
    {
        groovy.util.FactoryBuilderSupport r1;
        groovy.swing.factory.BoxFactory r0;
        java.lang.Object r2, r3;

        r0 := @this: groovy.swing.factory.BoxFactory;

        r1 := @parameter0: groovy.util.FactoryBuilderSupport;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        specialinvoke r0.<groovy.util.AbstractFactory: void setParent(groovy.util.FactoryBuilderSupport,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        return;
    }

    void super$1$wait()
    {
        groovy.swing.factory.BoxFactory r0;

        r0 := @this: groovy.swing.factory.BoxFactory;

        specialinvoke r0.<java.lang.Object: void wait()>();

        return;
    }

    groovy.lang.MetaClass super$3$getMetaClass()
    {
        groovy.lang.MetaClass $r1;
        groovy.swing.factory.BoxFactory r0;

        r0 := @this: groovy.swing.factory.BoxFactory;

        $r1 = specialinvoke r0.<groovy.swing.factory.BeanFactory: groovy.lang.MetaClass getMetaClass()>();

        return $r1;
    }

    void super$3$setMetaClass(groovy.lang.MetaClass)
    {
        groovy.lang.MetaClass r1;
        groovy.swing.factory.BoxFactory r0;

        r0 := @this: groovy.swing.factory.BoxFactory;

        r1 := @parameter0: groovy.lang.MetaClass;

        specialinvoke r0.<groovy.swing.factory.BeanFactory: void setMetaClass(groovy.lang.MetaClass)>(r1);

        return;
    }

    void super$2$onNodeCompleted(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object)
    {
        groovy.util.FactoryBuilderSupport r1;
        groovy.swing.factory.BoxFactory r0;
        java.lang.Object r2, r3;

        r0 := @this: groovy.swing.factory.BoxFactory;

        r1 := @parameter0: groovy.util.FactoryBuilderSupport;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        specialinvoke r0.<groovy.util.AbstractFactory: void onNodeCompleted(groovy.util.FactoryBuilderSupport,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        return;
    }

    java.lang.Class super$1$getClass()
    {
        java.lang.Class $r1;
        groovy.swing.factory.BoxFactory r0;

        r0 := @this: groovy.swing.factory.BoxFactory;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        return $r1;
    }

    boolean super$2$onHandleNodeAttributes(groovy.util.FactoryBuilderSupport, java.lang.Object, java.util.Map)
    {
        groovy.util.FactoryBuilderSupport r1;
        groovy.swing.factory.BoxFactory r0;
        java.util.Map r3;
        java.lang.Object r2;
        boolean $z0;

        r0 := @this: groovy.swing.factory.BoxFactory;

        r1 := @parameter0: groovy.util.FactoryBuilderSupport;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.util.Map;

        $z0 = specialinvoke r0.<groovy.util.AbstractFactory: boolean onHandleNodeAttributes(groovy.util.FactoryBuilderSupport,java.lang.Object,java.util.Map)>(r1, r2, r3);

        return $z0;
    }

    java.lang.Object super$3$invokeMethod(java.lang.String, java.lang.Object)
    {
        groovy.swing.factory.BoxFactory r0;
        java.lang.Object r2, $r3;
        java.lang.String r1;

        r0 := @this: groovy.swing.factory.BoxFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r3 = specialinvoke r0.<groovy.swing.factory.BeanFactory: java.lang.Object invokeMethod(java.lang.String,java.lang.Object)>(r1, r2);

        return $r3;
    }

    java.lang.Class super$3$getBeanClass()
    {
        java.lang.Class $r1;
        groovy.swing.factory.BoxFactory r0;

        r0 := @this: groovy.swing.factory.BoxFactory;

        $r1 = specialinvoke r0.<groovy.swing.factory.BeanFactory: java.lang.Class getBeanClass()>();

        return $r1;
    }

    int super$1$hashCode()
    {
        int $i0;
        groovy.swing.factory.BoxFactory r0;

        r0 := @this: groovy.swing.factory.BoxFactory;

        $i0 = specialinvoke r0.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    java.lang.Object super$3$getProperty(java.lang.String)
    {
        java.lang.Object $r2;
        java.lang.String r1;
        groovy.swing.factory.BoxFactory r0;

        r0 := @this: groovy.swing.factory.BoxFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<groovy.swing.factory.BeanFactory: java.lang.Object getProperty(java.lang.String)>(r1);

        return $r2;
    }

    void super$1$notify()
    {
        groovy.swing.factory.BoxFactory r0;

        r0 := @this: groovy.swing.factory.BoxFactory;

        specialinvoke r0.<java.lang.Object: void notify()>();

        return;
    }

    void super$1$notifyAll()
    {
        groovy.swing.factory.BoxFactory r0;

        r0 := @this: groovy.swing.factory.BoxFactory;

        specialinvoke r0.<java.lang.Object: void notifyAll()>();

        return;
    }

    java.lang.Object super$3$newInstance(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object, java.util.Map)
    {
        groovy.util.FactoryBuilderSupport r1;
        groovy.swing.factory.BoxFactory r0;
        java.util.Map r4;
        java.lang.Object r2, r3, $r5;

        r0 := @this: groovy.swing.factory.BoxFactory;

        r1 := @parameter0: groovy.util.FactoryBuilderSupport;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.util.Map;

        $r5 = specialinvoke r0.<groovy.swing.factory.BeanFactory: java.lang.Object newInstance(groovy.util.FactoryBuilderSupport,java.lang.Object,java.lang.Object,java.util.Map)>(r1, r2, r3, r4);

        return $r5;
    }

    java.lang.Object super$1$clone()
    {
        java.lang.Object $r1;
        groovy.swing.factory.BoxFactory r0;

        r0 := @this: groovy.swing.factory.BoxFactory;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        return $r1;
    }

    void super$1$wait(long, int)
    {
        int i1;
        long l0;
        groovy.swing.factory.BoxFactory r0;

        r0 := @this: groovy.swing.factory.BoxFactory;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void wait(long,int)>(l0, i1);

        return;
    }

    void super$1$finalize()
    {
        groovy.swing.factory.BoxFactory r0;

        r0 := @this: groovy.swing.factory.BoxFactory;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;
    }

    void super$1$wait(long)
    {
        long l0;
        groovy.swing.factory.BoxFactory r0;

        r0 := @this: groovy.swing.factory.BoxFactory;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void wait(long)>(l0);

        return;
    }

    boolean super$1$equals(java.lang.Object)
    {
        java.lang.Object r1;
        groovy.swing.factory.BoxFactory r0;
        boolean $z0;

        r0 := @this: groovy.swing.factory.BoxFactory;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        return $r1;

     label2:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label2;
    }
}
