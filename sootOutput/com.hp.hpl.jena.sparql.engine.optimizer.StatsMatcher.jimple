public final class com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher extends java.lang.Object
{
    private static org.slf4j.Logger log;
    public static final java.lang.String STATS;
    public static final java.lang.String META;
    public static final java.lang.String COUNT;
    public static final com.hp.hpl.jena.sparql.sse.Item OTHER;
    private static double NOMATCH;
    java.util.List patterns;
    java.util.Map mapPatterns;
    double DefaultMatch;
    long count;
    public static final double weightSP;
    public static final double weightPO;
    public static final double weightTypeO;
    public static final double weightSP_small;
    public static final double weightPO_small;
    public static final double weightTypeO_small;

    public void <init>()
    {
        com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher r0;
        java.util.HashMap $r2;
        java.util.ArrayList $r1;
        double $d0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: java.util.List patterns> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: java.util.Map mapPatterns> = $r2;

        $d0 = <com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: double NOMATCH>;

        r0.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: double DefaultMatch> = $d0;

        r0.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: long count> = -1L;

        return;
    }

    public void <init>(java.lang.String)
    {
        java.util.HashMap $r2;
        java.util.ArrayList $r1;
        com.hp.hpl.jena.sparql.sse.ItemException $r14;
        java.lang.String r3, $r9, $r13;
        com.hp.hpl.jena.sparql.ARQException $r5;
        double $d0;
        boolean $z0, $z1;
        com.hp.hpl.jena.sparql.sse.Item $r4;
        com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher r0;
        java.lang.StringBuilder $r6, $r7, $r8, $r10, $r11, $r12;

        r0 := @this: com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher;

        r3 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: java.util.List patterns> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: java.util.Map mapPatterns> = $r2;

        $d0 = <com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: double NOMATCH>;

        r0.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: double DefaultMatch> = $d0;

        r0.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: long count> = -1L;

     label1:
        $r4 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.sparql.sse.Item readFile(java.lang.String)>(r3);

        $z0 = virtualinvoke $r4.<com.hp.hpl.jena.sparql.sse.Item: boolean isNil()>();

        if $z0 == 0 goto label3;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Empty stats file: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Object,java.lang.String)>(r0, $r13);

     label2:
        return;

     label3:
        $z1 = virtualinvoke $r4.<com.hp.hpl.jena.sparql.sse.Item: boolean isTagged(java.lang.String)>("stats");

        if $z1 != 0 goto label4;

        $r5 = new com.hp.hpl.jena.sparql.ARQException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a stats file: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label4:
        specialinvoke r0.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: void init(com.hp.hpl.jena.sparql.sse.Item)>($r4);

     label5:
        goto label7;

     label6:
        $r14 := @caughtexception;

        throw $r14;

     label7:
        return;

        catch com.hp.hpl.jena.sparql.sse.ItemException from label1 to label2 with label6;
        catch com.hp.hpl.jena.sparql.sse.ItemException from label3 to label5 with label6;
    }

    public void <init>(com.hp.hpl.jena.sparql.sse.Item)
    {
        com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher r0;
        java.util.HashMap $r2;
        com.hp.hpl.jena.sparql.sse.Item r3;
        java.util.ArrayList $r1;
        double $d0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher;

        r3 := @parameter0: com.hp.hpl.jena.sparql.sse.Item;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: java.util.List patterns> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: java.util.Map mapPatterns> = $r2;

        $d0 = <com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: double NOMATCH>;

        r0.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: double DefaultMatch> = $d0;

        r0.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: long count> = -1L;

        specialinvoke r0.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: void init(com.hp.hpl.jena.sparql.sse.Item)>(r3);

        return;
    }

    private void init(com.hp.hpl.jena.sparql.sse.Item)
    {
        long $l0;
        com.hp.hpl.jena.sparql.ARQException $r11;
        boolean $z0, $z1, $z2;
        com.hp.hpl.jena.sparql.sse.ItemList $r1, $r2, $r7, $r9, r12;
        com.hp.hpl.jena.sparql.sse.Item r0, $r3, $r4, $r6, $r8, $r10;
        com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher r5;

        r5 := @this: com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher;

        r0 := @parameter0: com.hp.hpl.jena.sparql.sse.Item;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: boolean isTagged(java.lang.String)>("stats");

        if $z0 != 0 goto label1;

        $r11 = new com.hp.hpl.jena.sparql.ARQException;

        specialinvoke $r11.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.String)>("Not a tagged \'stats\'");

        throw $r11;

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList getList()>();

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.ItemList cdr()>();

        r12 = $r2;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item car()>();

        $z1 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.sse.Item: boolean isTagged(java.lang.String)>("meta");

        if $z1 == 0 goto label2;

        $r6 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item car()>();

        r12 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.ItemList cdr()>();

        $r7 = virtualinvoke $r6.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList getList()>();

        $r8 = staticinvoke <com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.Item find(com.hp.hpl.jena.sparql.sse.ItemList,java.lang.String)>($r7, "count");

        if $r8 == null goto label2;

        $r9 = virtualinvoke $r8.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList getList()>();

        $r10 = virtualinvoke $r9.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(1);

        $l0 = virtualinvoke $r10.<com.hp.hpl.jena.sparql.sse.Item: long asInteger()>();

        r5.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: long count> = $l0;

     label2:
        $z2 = virtualinvoke r12.<com.hp.hpl.jena.sparql.sse.ItemList: boolean isEmpty()>();

        if $z2 != 0 goto label3;

        $r4 = virtualinvoke r12.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item car()>();

        r12 = virtualinvoke r12.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.ItemList cdr()>();

        specialinvoke r5.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: void onePattern(com.hp.hpl.jena.sparql.sse.Item)>($r4);

        goto label2;

     label3:
        return;
    }

    private void onePattern(com.hp.hpl.jena.sparql.sse.Item)
    {
        com.hp.hpl.jena.graph.Node $r12, $r45;
        com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher r16;
        java.lang.StringBuilder $r3, $r5, $r6, $r28, $r30, $r32, $r38, $r40, $r41, $r46, $r48, $r50;
        java.lang.String $r7, $r31, $r33, $r42, $r49, $r51;
        java.lang.Number $r14, $r15;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        com.hp.hpl.jena.sparql.sse.Item r0, $r2, $r10, $r18, $r19, $r21, $r22, $r24, $r25, $r26, $r27, $r34, $r35, $r36, $r37, $r44;
        com.hp.hpl.jena.sparql.engine.optimizer.Pattern $r11;
        int $i0;
        double $d0, $d1;
        org.slf4j.Logger $r4, $r29, $r39, $r47;
        com.hp.hpl.jena.sparql.sse.ItemList $r1, $r8, $r9, $r17, $r20, $r23, $r43;
        java.lang.Object $r13;

        r16 := @this: com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher;

        r0 := @parameter0: com.hp.hpl.jena.sparql.sse.Item;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList getList()>();

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(0);

        $z0 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item: boolean isNode()>();

        if $z0 == 0 goto label02;

        $r45 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.graph.Node getNode()>();

        $z9 = virtualinvoke $r45.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z9 != 0 goto label01;

        $r47 = <com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: org.slf4j.Logger log>;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r48 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a preicate URI: ");

        $r49 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item: java.lang.String toString()>();

        $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r49);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r47.<org.slf4j.Logger: void warn(java.lang.String)>($r51);

        return;

     label01:
        specialinvoke r16.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: void addAbbreviation(com.hp.hpl.jena.sparql.sse.Item)>(r0);

        goto label10;

     label02:
        $z1 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item: boolean isSymbol()>();

        if $z1 == 0 goto label08;

        $r26 = <com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: com.hp.hpl.jena.sparql.sse.Item OTHER>;

        $z3 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item: boolean equals(java.lang.Object)>($r26);

        if $z3 == 0 goto label03;

        $r43 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList getList()>();

        $r44 = virtualinvoke $r43.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(1);

        $d1 = virtualinvoke $r44.<com.hp.hpl.jena.sparql.sse.Item: double getDouble()>();

        r16.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: double DefaultMatch> = $d1;

        return;

     label03:
        $r27 = <com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternElements: com.hp.hpl.jena.sparql.sse.Item BNODE>;

        $z4 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item: boolean equals(java.lang.Object)>($r27);

        if $z4 != 0 goto label04;

        $r34 = <com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternElements: com.hp.hpl.jena.sparql.sse.Item LITERAL>;

        $z5 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item: boolean equals(java.lang.Object)>($r34);

        if $z5 == 0 goto label05;

     label04:
        $r29 = <com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: org.slf4j.Logger log>;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a match for a predicate URI: ");

        $r31 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item: java.lang.String toString()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r29.<org.slf4j.Logger: void warn(java.lang.String)>($r33);

        return;

     label05:
        $r35 = <com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternElements: com.hp.hpl.jena.sparql.sse.Item TERM>;

        $z6 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item: boolean equals(java.lang.Object)>($r35);

        if $z6 != 0 goto label06;

        $r36 = <com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternElements: com.hp.hpl.jena.sparql.sse.Item VAR>;

        $z7 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item: boolean equals(java.lang.Object)>($r36);

        if $z7 != 0 goto label06;

        $r37 = <com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternElements: com.hp.hpl.jena.sparql.sse.Item ANY>;

        $z8 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item: boolean equals(java.lang.Object)>($r37);

        if $z8 == 0 goto label07;

     label06:
        specialinvoke r16.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: void addAbbreviation(com.hp.hpl.jena.sparql.sse.Item)>(r0);

        goto label10;

     label07:
        $r39 = <com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: org.slf4j.Logger log>;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not understood: ");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r39.<org.slf4j.Logger: void warn(java.lang.String)>($r42);

        return;

     label08:
        $z2 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item: boolean isList()>();

        if $z2 == 0 goto label09;

        $r8 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList getList()>();

        $i0 = virtualinvoke $r8.<com.hp.hpl.jena.sparql.sse.ItemList: int size()>();

        if $i0 != 3 goto label09;

        $r9 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList getList()>();

        $r10 = virtualinvoke $r9.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(1);

        $r11 = new com.hp.hpl.jena.sparql.engine.optimizer.Pattern;

        $r12 = virtualinvoke $r10.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.graph.Node getNode()>();

        $r13 = virtualinvoke $r12.<com.hp.hpl.jena.graph.Node: java.lang.Object getLiteralValue()>();

        $r14 = (java.lang.Number) $r13;

        $r15 = (java.lang.Number) $r14;

        $d0 = virtualinvoke $r15.<java.lang.Number: double doubleValue()>();

        $r17 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList getList()>();

        $r18 = virtualinvoke $r17.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(0);

        $r19 = specialinvoke r16.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: com.hp.hpl.jena.sparql.sse.Item intern(com.hp.hpl.jena.sparql.sse.Item)>($r18);

        $r20 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList getList()>();

        $r21 = virtualinvoke $r20.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(1);

        $r22 = specialinvoke r16.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: com.hp.hpl.jena.sparql.sse.Item intern(com.hp.hpl.jena.sparql.sse.Item)>($r21);

        $r23 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList getList()>();

        $r24 = virtualinvoke $r23.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(2);

        $r25 = specialinvoke r16.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: com.hp.hpl.jena.sparql.sse.Item intern(com.hp.hpl.jena.sparql.sse.Item)>($r24);

        specialinvoke $r11.<com.hp.hpl.jena.sparql.engine.optimizer.Pattern: void <init>(double,com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.sse.Item)>($d0, $r19, $r22, $r25);

        virtualinvoke r16.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: void addPattern(com.hp.hpl.jena.sparql.engine.optimizer.Pattern)>($r11);

        goto label10;

     label09:
        $r4 = <com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: org.slf4j.Logger log>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized pattern: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<org.slf4j.Logger: void warn(java.lang.String)>($r7);

     label10:
        return;
    }

    private void addAbbreviation(com.hp.hpl.jena.sparql.sse.Item)
    {
        com.hp.hpl.jena.sparql.sse.ItemList $r1, $r3;
        com.hp.hpl.jena.sparql.sse.Item r0, $r2, $r4;
        long $l0;
        byte $b1;
        com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher r5;
        int $i2;
        double $d0;

        r5 := @this: com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher;

        r0 := @parameter0: com.hp.hpl.jena.sparql.sse.Item;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList getList()>();

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(0);

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList getList()>();

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(1);

        $d0 = virtualinvoke $r4.<com.hp.hpl.jena.sparql.sse.Item: double getDouble()>();

        $l0 = r5.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: long count>;

        $b1 = $l0 cmp 100L;

        $i2 = (int) $b1;

        if $i2 >= 0 goto label1;

        specialinvoke r5.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: void addPatternsSmall(com.hp.hpl.jena.sparql.sse.Item,double)>($r2, $d0);

        goto label2;

     label1:
        specialinvoke r5.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: void addPatterns(com.hp.hpl.jena.sparql.sse.Item,double)>($r2, $d0);

     label2:
        return;
    }

    public void addPatterns(com.hp.hpl.jena.graph.Node, double)
    {
        com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher r0;
        com.hp.hpl.jena.sparql.sse.Item $r2;
        com.hp.hpl.jena.graph.Node r1;
        double d0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        d0 := @parameter1: double;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.Item createNode(com.hp.hpl.jena.graph.Node)>(r1);

        specialinvoke r0.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: void addPatterns(com.hp.hpl.jena.sparql.sse.Item,double)>($r2, d0);

        return;
    }

    public void addPatternsSmall(com.hp.hpl.jena.graph.Node, double)
    {
        com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher r0;
        com.hp.hpl.jena.sparql.sse.Item $r2;
        com.hp.hpl.jena.graph.Node r1;
        double d0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        d0 := @parameter1: double;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.Item createNode(com.hp.hpl.jena.graph.Node)>(r1);

        specialinvoke r0.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: void addPatternsSmall(com.hp.hpl.jena.sparql.sse.Item,double)>($r2, d0);

        return;
    }

    private void addPatterns(com.hp.hpl.jena.sparql.sse.Item, double)
    {
        com.hp.hpl.jena.sparql.sse.Item r0;
        com.hp.hpl.jena.graph.Node $r1, $r2;
        com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher r3;
        double d0, $d1, d2;
        boolean $z0;

        r3 := @this: com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher;

        r0 := @parameter0: com.hp.hpl.jena.sparql.sse.Item;

        d0 := @parameter1: double;

        d2 = staticinvoke <java.lang.Math: double min(double,double)>(d0, 10.0);

        $d1 = staticinvoke <java.lang.Math: double min(double,double)>(d0, 2.0);

        $r1 = <com.hp.hpl.jena.sparql.graph.NodeConst: com.hp.hpl.jena.graph.Node nodeRDFType>;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.graph.Node getNode()>();

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        d2 = 1000.0;

     label1:
        specialinvoke r3.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: void addPatterns(com.hp.hpl.jena.sparql.sse.Item,double,double,double)>(r0, d0, $d1, d2);

        return;
    }

    private void addPatternsSmall(com.hp.hpl.jena.sparql.sse.Item, double)
    {
        com.hp.hpl.jena.sparql.sse.Item r0;
        com.hp.hpl.jena.graph.Node $r2, $r3;
        com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher r1;
        double d0, $d1, d2;
        boolean $z0, $z1;

        r1 := @this: com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher;

        r0 := @parameter0: com.hp.hpl.jena.sparql.sse.Item;

        d0 := @parameter1: double;

        d2 = staticinvoke <java.lang.Math: double min(double,double)>(d0, 4.0);

        $d1 = staticinvoke <java.lang.Math: double min(double,double)>(d0, 2.0);

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: boolean isNode()>();

        if $z0 == 0 goto label1;

        $r2 = <com.hp.hpl.jena.sparql.graph.NodeConst: com.hp.hpl.jena.graph.Node nodeRDFType>;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.graph.Node getNode()>();

        $z1 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label1;

        d2 = 40.0;

     label1:
        specialinvoke r1.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: void addPatterns(com.hp.hpl.jena.sparql.sse.Item,double,double,double)>(r0, d0, $d1, d2);

        return;
    }

    private void addPatterns(com.hp.hpl.jena.sparql.sse.Item, double, double, double)
    {
        com.hp.hpl.jena.sparql.sse.Item r2, $r3, $r4, $r6, $r7, $r9, $r10;
        com.hp.hpl.jena.sparql.engine.optimizer.Pattern $r1, $r5, $r8;
        com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher r0;
        double d0, d1, d2;

        r0 := @this: com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher;

        r2 := @parameter0: com.hp.hpl.jena.sparql.sse.Item;

        d2 := @parameter1: double;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        $r1 = new com.hp.hpl.jena.sparql.engine.optimizer.Pattern;

        $r4 = <com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternElements: com.hp.hpl.jena.sparql.sse.Item TERM>;

        $r3 = <com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternElements: com.hp.hpl.jena.sparql.sse.Item ANY>;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.engine.optimizer.Pattern: void <init>(double,com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.sse.Item)>(d0, $r4, r2, $r3);

        virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: void addPattern(com.hp.hpl.jena.sparql.engine.optimizer.Pattern)>($r1);

        $r5 = new com.hp.hpl.jena.sparql.engine.optimizer.Pattern;

        $r7 = <com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternElements: com.hp.hpl.jena.sparql.sse.Item ANY>;

        $r6 = <com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternElements: com.hp.hpl.jena.sparql.sse.Item TERM>;

        specialinvoke $r5.<com.hp.hpl.jena.sparql.engine.optimizer.Pattern: void <init>(double,com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.sse.Item)>(d1, $r7, r2, $r6);

        virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: void addPattern(com.hp.hpl.jena.sparql.engine.optimizer.Pattern)>($r5);

        $r8 = new com.hp.hpl.jena.sparql.engine.optimizer.Pattern;

        $r10 = <com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternElements: com.hp.hpl.jena.sparql.sse.Item ANY>;

        $r9 = <com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternElements: com.hp.hpl.jena.sparql.sse.Item ANY>;

        specialinvoke $r8.<com.hp.hpl.jena.sparql.engine.optimizer.Pattern: void <init>(double,com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.sse.Item)>(d2, $r10, r2, $r9);

        virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: void addPattern(com.hp.hpl.jena.sparql.engine.optimizer.Pattern)>($r8);

        return;
    }

    public void addPattern(com.hp.hpl.jena.sparql.engine.optimizer.Pattern)
    {
        com.hp.hpl.jena.sparql.sse.Item $r3, $r7;
        java.util.ArrayList $r6;
        java.util.List $r2, r9;
        com.hp.hpl.jena.sparql.engine.optimizer.Pattern r0;
        com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher r1;
        java.util.Map $r4, $r8;
        java.lang.Object $r5;

        r1 := @this: com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher;

        r0 := @parameter0: com.hp.hpl.jena.sparql.engine.optimizer.Pattern;

        staticinvoke <com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: void check(com.hp.hpl.jena.sparql.engine.optimizer.Pattern)>(r0);

        $r2 = r1.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: java.util.List patterns>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r0);

        $r4 = r1.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: java.util.Map mapPatterns>;

        $r3 = r0.<com.hp.hpl.jena.sparql.engine.optimizer.Pattern: com.hp.hpl.jena.sparql.sse.Item predItem>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        r9 = (java.util.List) $r5;

        if r9 != null goto label1;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r9 = $r6;

        $r8 = r1.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: java.util.Map mapPatterns>;

        $r7 = r0.<com.hp.hpl.jena.sparql.engine.optimizer.Pattern: com.hp.hpl.jena.sparql.sse.Item predItem>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r6);

     label1:
        interfaceinvoke r9.<java.util.List: boolean add(java.lang.Object)>(r0);

        return;
    }

    private static void check(com.hp.hpl.jena.sparql.engine.optimizer.Pattern)
    {
        com.hp.hpl.jena.sparql.engine.optimizer.Pattern r0;
        com.hp.hpl.jena.sparql.sse.Item $r1, $r2, $r3;

        r0 := @parameter0: com.hp.hpl.jena.sparql.engine.optimizer.Pattern;

        $r1 = r0.<com.hp.hpl.jena.sparql.engine.optimizer.Pattern: com.hp.hpl.jena.sparql.sse.Item subjItem>;

        staticinvoke <com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: void check(com.hp.hpl.jena.sparql.sse.Item)>($r1);

        $r2 = r0.<com.hp.hpl.jena.sparql.engine.optimizer.Pattern: com.hp.hpl.jena.sparql.sse.Item predItem>;

        staticinvoke <com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: void check(com.hp.hpl.jena.sparql.sse.Item)>($r2);

        $r3 = r0.<com.hp.hpl.jena.sparql.engine.optimizer.Pattern: com.hp.hpl.jena.sparql.sse.Item objItem>;

        staticinvoke <com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: void check(com.hp.hpl.jena.sparql.sse.Item)>($r3);

        return;
    }

    private static void check(com.hp.hpl.jena.sparql.sse.Item)
    {
        com.hp.hpl.jena.sparql.sse.Item r0;
        com.hp.hpl.jena.graph.Node $r1, $r5;
        java.lang.StringBuilder $r3, $r4, $r6;
        java.lang.String $r7;
        com.hp.hpl.jena.sparql.ARQException $r2;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.sse.Item;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.graph.Node getNode()>();

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>($r1);

        if $z0 == 0 goto label1;

        $r2 = new com.hp.hpl.jena.sparql.ARQException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Explicit variable used in a pattern (use VAR): ");

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.graph.Node getNode()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label1:
        return;
    }

    private com.hp.hpl.jena.sparql.sse.Item intern(com.hp.hpl.jena.sparql.sse.Item)
    {
        java.lang.String $r2, $r4, $r6, $r8, $r10, $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        com.hp.hpl.jena.sparql.sse.Item r0, $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r14, $r15, $r16, $r17, $r18;
        com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher r19;

        r19 := @this: com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher;

        r0 := @parameter0: com.hp.hpl.jena.sparql.sse.Item;

        $r1 = <com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternElements: com.hp.hpl.jena.sparql.sse.Item ANY>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.sse.Item: java.lang.String getSymbol()>();

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: boolean sameSymbol(java.lang.String)>($r2);

        if $z0 == 0 goto label1;

        $r18 = <com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternElements: com.hp.hpl.jena.sparql.sse.Item ANY>;

        return $r18;

     label1:
        $r3 = <com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternElements: com.hp.hpl.jena.sparql.sse.Item VAR>;

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.sse.Item: java.lang.String getSymbol()>();

        $z1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: boolean sameSymbol(java.lang.String)>($r4);

        if $z1 == 0 goto label2;

        $r17 = <com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternElements: com.hp.hpl.jena.sparql.sse.Item VAR>;

        return $r17;

     label2:
        $r5 = <com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternElements: com.hp.hpl.jena.sparql.sse.Item TERM>;

        $r6 = virtualinvoke $r5.<com.hp.hpl.jena.sparql.sse.Item: java.lang.String getSymbol()>();

        $z2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: boolean sameSymbol(java.lang.String)>($r6);

        if $z2 == 0 goto label3;

        $r16 = <com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternElements: com.hp.hpl.jena.sparql.sse.Item TERM>;

        return $r16;

     label3:
        $r7 = <com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternElements: com.hp.hpl.jena.sparql.sse.Item URI>;

        $r8 = virtualinvoke $r7.<com.hp.hpl.jena.sparql.sse.Item: java.lang.String getSymbol()>();

        $z3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: boolean sameSymbol(java.lang.String)>($r8);

        if $z3 == 0 goto label4;

        $r15 = <com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternElements: com.hp.hpl.jena.sparql.sse.Item URI>;

        return $r15;

     label4:
        $r9 = <com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternElements: com.hp.hpl.jena.sparql.sse.Item LITERAL>;

        $r10 = virtualinvoke $r9.<com.hp.hpl.jena.sparql.sse.Item: java.lang.String getSymbol()>();

        $z4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: boolean sameSymbol(java.lang.String)>($r10);

        if $z4 == 0 goto label5;

        $r14 = <com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternElements: com.hp.hpl.jena.sparql.sse.Item LITERAL>;

        return $r14;

     label5:
        $r11 = <com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternElements: com.hp.hpl.jena.sparql.sse.Item BNODE>;

        $r12 = virtualinvoke $r11.<com.hp.hpl.jena.sparql.sse.Item: java.lang.String getSymbol()>();

        $z5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: boolean sameSymbol(java.lang.String)>($r12);

        if $z5 == 0 goto label6;

        $r13 = <com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternElements: com.hp.hpl.jena.sparql.sse.Item BNODE>;

        return $r13;

     label6:
        return r0;
    }

    public double match(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.sparql.sse.Item $r3, $r5, $r7;
        com.hp.hpl.jena.graph.Node $r2, $r4, $r6;
        com.hp.hpl.jena.graph.Triple r1;
        com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher r0;
        double $d0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.Item createNode(com.hp.hpl.jena.graph.Node)>($r2);

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.Item createNode(com.hp.hpl.jena.graph.Node)>($r4);

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.Item createNode(com.hp.hpl.jena.graph.Node)>($r6);

        $d0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: double match(com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.sse.Item)>($r3, $r5, $r7);

        return $d0;
    }

    public double match(com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple)
    {
        com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher r0;
        com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple r1;
        com.hp.hpl.jena.sparql.sse.Item $r2, $r3, $r4;
        double $d0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher;

        r1 := @parameter0: com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple;

        $r4 = r1.<com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple: com.hp.hpl.jena.sparql.sse.Item subject>;

        $r3 = r1.<com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple: com.hp.hpl.jena.sparql.sse.Item predicate>;

        $r2 = r1.<com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternTriple: com.hp.hpl.jena.sparql.sse.Item object>;

        $d0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: double match(com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.sse.Item)>($r4, $r3, $r2);

        return $d0;
    }

    public double match(com.hp.hpl.jena.sparql.sse.Item, com.hp.hpl.jena.sparql.sse.Item, com.hp.hpl.jena.sparql.sse.Item)
    {
        com.hp.hpl.jena.sparql.sse.Item r1, r2, r3;
        byte $b0;
        com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher r0;
        double $d0, $d1, d2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher;

        r1 := @parameter0: com.hp.hpl.jena.sparql.sse.Item;

        r2 := @parameter1: com.hp.hpl.jena.sparql.sse.Item;

        r3 := @parameter2: com.hp.hpl.jena.sparql.sse.Item;

        $d0 = specialinvoke r0.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: double matchWorker(com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.sse.Item)>(r1, r2, r3);

        d2 = $d0;

        $d1 = <com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: double NOMATCH>;

        $b0 = $d0 cmpl $d1;

        if $b0 != 0 goto label1;

        $z0 = virtualinvoke r2.<com.hp.hpl.jena.sparql.sse.Item: boolean isNodeURI()>();

        if $z0 == 0 goto label1;

        d2 = r0.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: double DefaultMatch>;

     label1:
        return d2;
    }

    private double matchWorker(com.hp.hpl.jena.sparql.sse.Item, com.hp.hpl.jena.sparql.sse.Item, com.hp.hpl.jena.sparql.sse.Item)
    {
        com.hp.hpl.jena.sparql.ARQException $r4, $r17;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        com.hp.hpl.jena.sparql.sse.Item r0, r1, $r2, $r3, r13, $r19, $r20, $r21, $r22, $r23, $r24;
        com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher r18;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r14, $r15;
        java.lang.String $r16;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, d7, d8, d9;

        r18 := @this: com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher;

        r0 := @parameter0: com.hp.hpl.jena.sparql.sse.Item;

        r1 := @parameter1: com.hp.hpl.jena.sparql.sse.Item;

        r13 := @parameter2: com.hp.hpl.jena.sparql.sse.Item;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternElements: boolean isSet(com.hp.hpl.jena.sparql.sse.Item)>(r0);

        if $z0 == 0 goto label1;

        $z4 = staticinvoke <com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternElements: boolean isSet(com.hp.hpl.jena.sparql.sse.Item)>(r1);

        if $z4 == 0 goto label1;

        $z5 = staticinvoke <com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternElements: boolean isSet(com.hp.hpl.jena.sparql.sse.Item)>(r13);

        if $z5 == 0 goto label1;

        return 1.0;

     label1:
        $z6 = virtualinvoke r1.<com.hp.hpl.jena.sparql.sse.Item: boolean isNodeURI()>();

        if $z6 == 0 goto label2;

        d7 = <com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: double NOMATCH>;

        $d4 = specialinvoke r18.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: double search(com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.sse.Item,double)>(r1, r0, r1, r13, d7);

        $r23 = <com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternElements: com.hp.hpl.jena.sparql.sse.Item TERM>;

        $d5 = specialinvoke r18.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: double search(com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.sse.Item,double)>($r23, r0, r1, r13, $d4);

        $r24 = <com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternElements: com.hp.hpl.jena.sparql.sse.Item ANY>;

        $d6 = specialinvoke r18.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: double search(com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.sse.Item,double)>($r24, r0, r1, r13, $d5);

        return $d6;

     label2:
        $z1 = virtualinvoke r1.<com.hp.hpl.jena.sparql.sse.Item: boolean isVar()>();

        if $z1 == 0 goto label3;

        d8 = <com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: double NOMATCH>;

        $r21 = <com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternElements: com.hp.hpl.jena.sparql.sse.Item VAR>;

        $d2 = specialinvoke r18.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: double search(com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.sse.Item,double)>($r21, r0, r1, r13, d8);

        $r22 = <com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternElements: com.hp.hpl.jena.sparql.sse.Item ANY>;

        $d3 = specialinvoke r18.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: double search(com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.sse.Item,double)>($r22, r0, r1, r13, $d2);

        return $d3;

     label3:
        $r2 = <com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternElements: com.hp.hpl.jena.sparql.sse.Item TERM>;

        $z2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.sse.Item: boolean equals(java.lang.Object)>($r2);

        if $z2 == 0 goto label4;

        d9 = <com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: double NOMATCH>;

        $r19 = <com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternElements: com.hp.hpl.jena.sparql.sse.Item TERM>;

        $d0 = specialinvoke r18.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: double search(com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.sse.Item,double)>($r19, r0, r1, r13, d9);

        $r20 = <com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternElements: com.hp.hpl.jena.sparql.sse.Item ANY>;

        $d1 = specialinvoke r18.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: double search(com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.sse.Item,double)>($r20, r0, r1, r13, $d0);

        return $d1;

     label4:
        $r3 = <com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternElements: com.hp.hpl.jena.sparql.sse.Item ANY>;

        $z3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.sse.Item: boolean equals(java.lang.Object)>($r3);

        if $z3 == 0 goto label5;

        $r17 = new com.hp.hpl.jena.sparql.ARQException;

        specialinvoke $r17.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.String)>("Predicate is ANY");

        throw $r17;

     label5:
        $r4 = new com.hp.hpl.jena.sparql.ARQException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unidentified predicate: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in (");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.String)>($r16);

        throw $r4;
    }

    private double search(com.hp.hpl.jena.sparql.sse.Item, com.hp.hpl.jena.sparql.sse.Item, com.hp.hpl.jena.sparql.sse.Item, com.hp.hpl.jena.sparql.sse.Item, double)
    {
        com.hp.hpl.jena.sparql.sse.Item r1, r5, r6, r7;
        java.util.List r4;
        com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher r0;
        java.util.Map $r2;
        java.lang.Object $r3;
        double $d0, d1, $d2;

        r0 := @this: com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher;

        r1 := @parameter0: com.hp.hpl.jena.sparql.sse.Item;

        r5 := @parameter1: com.hp.hpl.jena.sparql.sse.Item;

        r6 := @parameter2: com.hp.hpl.jena.sparql.sse.Item;

        r7 := @parameter3: com.hp.hpl.jena.sparql.sse.Item;

        d1 := @parameter4: double;

        $r2 = r0.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: java.util.Map mapPatterns>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.util.List) $r3;

        if r4 != null goto label1;

        return d1;

     label1:
        $d0 = staticinvoke <com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: double matchLinear(java.util.List,com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.sse.Item)>(r4, r5, r6, r7);

        $d2 = staticinvoke <com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: double minPos(double,double)>($d0, d1);

        return $d2;
    }

    private static double minPos(double, double)
    {
        byte $b0, $b1;
        double d0, $d1, d2, $d3, $d4;

        d0 := @parameter0: double;

        d2 := @parameter1: double;

        $d1 = <com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: double NOMATCH>;

        $b0 = d0 cmpl $d1;

        if $b0 != 0 goto label1;

        return d2;

     label1:
        $d3 = <com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: double NOMATCH>;

        $b1 = d2 cmpl $d3;

        if $b1 != 0 goto label2;

        return d0;

     label2:
        $d4 = staticinvoke <java.lang.Math: double min(double,double)>(d0, d2);

        return $d4;
    }

    private static double matchLinear(java.util.List, com.hp.hpl.jena.sparql.sse.Item, com.hp.hpl.jena.sparql.sse.Item, com.hp.hpl.jena.sparql.sse.Item)
    {
        double $d0, $d1;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r1;
        com.hp.hpl.jena.sparql.sse.Item r5, $r6, r7, $r8, r9, $r10;
        com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher$Match $r4;
        java.util.List r0;
        com.hp.hpl.jena.sparql.engine.optimizer.Pattern r3;
        java.lang.Object $r2;

        r0 := @parameter0: java.util.List;

        r5 := @parameter1: com.hp.hpl.jena.sparql.sse.Item;

        r7 := @parameter2: com.hp.hpl.jena.sparql.sse.Item;

        r9 := @parameter3: com.hp.hpl.jena.sparql.sse.Item;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label5;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.hp.hpl.jena.sparql.engine.optimizer.Pattern) $r2;

        $r4 = new com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher$Match;

        specialinvoke $r4.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher$Match: void <init>(com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher$1)>(null);

        $r6 = r3.<com.hp.hpl.jena.sparql.engine.optimizer.Pattern: com.hp.hpl.jena.sparql.sse.Item subjItem>;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: boolean matchNode(com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher$Match)>(r5, $r6, $r4);

        if $z0 != 0 goto label2;

        goto label1;

     label2:
        $r8 = r3.<com.hp.hpl.jena.sparql.engine.optimizer.Pattern: com.hp.hpl.jena.sparql.sse.Item predItem>;

        $z1 = staticinvoke <com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: boolean matchNode(com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher$Match)>(r7, $r8, $r4);

        if $z1 != 0 goto label3;

        goto label1;

     label3:
        $r10 = r3.<com.hp.hpl.jena.sparql.engine.optimizer.Pattern: com.hp.hpl.jena.sparql.sse.Item objItem>;

        $z2 = staticinvoke <com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: boolean matchNode(com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher$Match)>(r9, $r10, $r4);

        if $z2 != 0 goto label4;

        goto label1;

     label4:
        $d1 = r3.<com.hp.hpl.jena.sparql.engine.optimizer.Pattern: double weight>;

        return $d1;

     label5:
        $d0 = <com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: double NOMATCH>;

        return $d0;
    }

    private static boolean matchNode(com.hp.hpl.jena.sparql.sse.Item, com.hp.hpl.jena.sparql.sse.Item, com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher$Match)
    {
        com.hp.hpl.jena.graph.Node $r2, $r4;
        com.hp.hpl.jena.sparql.ARQException $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15;
        com.hp.hpl.jena.sparql.sse.Item r0, r1, $r5, $r11;
        com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher$Match r3;
        java.lang.StringBuilder $r7, $r8, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        java.lang.String $r10;

        r1 := @parameter0: com.hp.hpl.jena.sparql.sse.Item;

        r0 := @parameter1: com.hp.hpl.jena.sparql.sse.Item;

        r3 := @parameter2: com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher$Match;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternElements: boolean isAny(com.hp.hpl.jena.sparql.sse.Item)>(r0);

        if $z0 == 0 goto label01;

        $i14 = r3.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher$Match: int anyMatches>;

        $i15 = $i14 + 1;

        r3.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher$Match: int anyMatches> = $i15;

        return 1;

     label01:
        $z1 = staticinvoke <com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternElements: boolean isAnyVar(com.hp.hpl.jena.sparql.sse.Item)>(r0);

        if $z1 == 0 goto label02;

        $i12 = r3.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher$Match: int varMatches>;

        $i13 = $i12 + 1;

        r3.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher$Match: int varMatches> = $i13;

        return 1;

     label02:
        $z2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.sse.Item: boolean isSymbol()>();

        if $z2 == 0 goto label05;

        $r5 = <com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternElements: com.hp.hpl.jena.sparql.sse.Item TERM>;

        $z14 = virtualinvoke r1.<com.hp.hpl.jena.sparql.sse.Item: boolean equals(java.lang.Object)>($r5);

        if $z14 == 0 goto label04;

        $r11 = <com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternElements: com.hp.hpl.jena.sparql.sse.Item TERM>;

        $z15 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: boolean equals(java.lang.Object)>($r11);

        if $z15 == 0 goto label03;

        $i10 = r3.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher$Match: int termMatches>;

        $i11 = $i10 + 1;

        r3.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher$Match: int termMatches> = $i11;

        return 1;

     label03:
        return 0;

     label04:
        $r6 = new com.hp.hpl.jena.sparql.ARQException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("StatsMatcher: unexpected slot type: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label05:
        $z3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.sse.Item: boolean isNode()>();

        if $z3 != 0 goto label06;

        return 0;

     label06:
        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.graph.Node getNode()>();

        $z4 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: boolean isConcrete()>();

        if $z4 == 0 goto label11;

        $z5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: boolean isNode()>();

        if $z5 == 0 goto label07;

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.graph.Node getNode()>();

        $z13 = virtualinvoke $r4.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r2);

        if $z13 == 0 goto label07;

        $i8 = r3.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher$Match: int exactMatches>;

        $i9 = $i8 + 1;

        r3.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher$Match: int exactMatches> = $i9;

        return 1;

     label07:
        $z6 = staticinvoke <com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternElements: boolean isAnyTerm(com.hp.hpl.jena.sparql.sse.Item)>(r0);

        if $z6 == 0 goto label08;

        $i6 = r3.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher$Match: int termMatches>;

        $i7 = $i6 + 1;

        r3.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher$Match: int termMatches> = $i7;

        return 1;

     label08:
        $z7 = staticinvoke <com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternElements: boolean isAnyURI(com.hp.hpl.jena.sparql.sse.Item)>(r0);

        if $z7 == 0 goto label09;

        $z12 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z12 == 0 goto label09;

        $i4 = r3.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher$Match: int termMatches>;

        $i5 = $i4 + 1;

        r3.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher$Match: int termMatches> = $i5;

        return 1;

     label09:
        $z8 = staticinvoke <com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternElements: boolean isAnyLiteral(com.hp.hpl.jena.sparql.sse.Item)>(r0);

        if $z8 == 0 goto label10;

        $z11 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z11 == 0 goto label10;

        $i2 = r3.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher$Match: int termMatches>;

        $i3 = $i2 + 1;

        r3.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher$Match: int termMatches> = $i3;

        return 1;

     label10:
        $z9 = staticinvoke <com.hp.hpl.jena.sparql.engine.optimizer.reorder.PatternElements: boolean isAnyBNode(com.hp.hpl.jena.sparql.sse.Item)>(r0);

        if $z9 == 0 goto label11;

        $z10 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z10 == 0 goto label11;

        $i0 = r3.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher$Match: int termMatches>;

        $i1 = $i0 + 1;

        r3.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher$Match: int termMatches> = $i1;

        return 1;

     label11:
        return 0;
    }

    public java.lang.String toString()
    {
        java.util.Iterator $r2;
        java.util.List $r1;
        com.hp.hpl.jena.sparql.engine.optimizer.Pattern r4;
        com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher r0;
        java.lang.Object $r3;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.String $r9;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher;

        $r9 = "";

        $r1 = r0.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: java.util.List patterns>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.hp.hpl.jena.sparql.engine.optimizer.Pattern) $r3;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label1;

     label2:
        return $r9;
    }

    public void printSSE(java.io.OutputStream)
    {
        java.io.OutputStream r1;
        java.util.Iterator $r4;
        org.apache.jena.atlas.io.IndentedWriter $r0;
        java.util.List $r3;
        com.hp.hpl.jena.sparql.engine.optimizer.Pattern r6;
        com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher r2;
        java.lang.Object $r5;
        boolean $z0;

        r2 := @this: com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher;

        r1 := @parameter0: java.io.OutputStream;

        $r0 = new org.apache.jena.atlas.io.IndentedWriter;

        specialinvoke $r0.<org.apache.jena.atlas.io.IndentedWriter: void <init>(java.io.OutputStream)>(r1);

        virtualinvoke $r0.<org.apache.jena.atlas.io.IndentedWriter: void println(java.lang.String)>("(stats");

        virtualinvoke $r0.<org.apache.jena.atlas.io.IndentedWriter: void incIndent()>();

        $r3 = r2.<com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: java.util.List patterns>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.hp.hpl.jena.sparql.engine.optimizer.Pattern) $r5;

        virtualinvoke r6.<com.hp.hpl.jena.sparql.engine.optimizer.Pattern: void output(org.apache.jena.atlas.io.IndentedWriter)>($r0);

        virtualinvoke $r0.<org.apache.jena.atlas.io.IndentedWriter: void println()>();

        goto label1;

     label2:
        virtualinvoke $r0.<org.apache.jena.atlas.io.IndentedWriter: void decIndent()>();

        virtualinvoke $r0.<org.apache.jena.atlas.io.IndentedWriter: void println(java.lang.String)>(")");

        virtualinvoke $r0.<org.apache.jena.atlas.io.IndentedWriter: void flush()>();

        return;
    }

    static double access$000()
    {
        double $d0;

        $d0 = <com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: double NOMATCH>;

        return $d0;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.sparql.sse.Item $r1;
        org.slf4j.Logger $r0;

        <com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: double weightTypeO_small> = 40.0;

        <com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: double weightPO_small> = 4.0;

        <com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: double weightSP_small> = 2.0;

        <com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: double weightTypeO> = 1000.0;

        <com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: double weightPO> = 10.0;

        <com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: double weightSP> = 2.0;

        <com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: java.lang.String COUNT> = "count";

        <com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: java.lang.String META> = "meta";

        <com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: java.lang.String STATS> = "stats";

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/hp/hpl/jena/sparql/engine/optimizer/StatsMatcher;");

        <com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: org.slf4j.Logger log> = $r0;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.Item createSymbol(java.lang.String)>("other");

        <com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: com.hp.hpl.jena.sparql.sse.Item OTHER> = $r1;

        <com.hp.hpl.jena.sparql.engine.optimizer.StatsMatcher: double NOMATCH> = -1.0;

        return;
    }
}
