public class org.apache.lucene.index.IndexWriter extends java.lang.Object implements java.io.Closeable, org.apache.lucene.index.TwoPhaseCommit
{
    private static final int UNBOUNDED_MAX_MERGE_SEGMENTS;
    public static final java.lang.String WRITE_LOCK_NAME;
    public static final java.lang.String SOURCE;
    public static final java.lang.String SOURCE_MERGE;
    public static final java.lang.String SOURCE_FLUSH;
    public static final java.lang.String SOURCE_ADDINDEXES_READERS;
    public static final int MAX_TERM_LENGTH;
    private volatile boolean hitOOM;
    private final org.apache.lucene.store.Directory directory;
    private final org.apache.lucene.analysis.Analyzer analyzer;
    private volatile long changeCount;
    private long lastCommitChangeCount;
    private java.util.List rollbackSegments;
    volatile org.apache.lucene.index.SegmentInfos pendingCommit;
    volatile long pendingCommitChangeCount;
    private java.util.Collection filesToCommit;
    final org.apache.lucene.index.SegmentInfos segmentInfos;
    final org.apache.lucene.index.FieldInfos$FieldNumbers globalFieldNumberMap;
    private org.apache.lucene.index.DocumentsWriter docWriter;
    final org.apache.lucene.index.IndexFileDeleter deleter;
    private java.util.Map segmentsToMerge;
    private int mergeMaxNumSegments;
    private org.apache.lucene.store.Lock writeLock;
    private volatile boolean closed;
    private volatile boolean closing;
    private java.util.HashSet mergingSegments;
    private org.apache.lucene.index.MergePolicy mergePolicy;
    private final org.apache.lucene.index.MergeScheduler mergeScheduler;
    private java.util.LinkedList pendingMerges;
    private java.util.Set runningMerges;
    private java.util.List mergeExceptions;
    private long mergeGen;
    private boolean stopMerges;
    final java.util.concurrent.atomic.AtomicInteger flushCount;
    final java.util.concurrent.atomic.AtomicInteger flushDeletesCount;
    final org.apache.lucene.index.IndexWriter$ReaderPool readerPool;
    final org.apache.lucene.index.BufferedDeletesStream bufferedDeletesStream;
    private volatile boolean poolReaders;
    private final org.apache.lucene.index.LiveIndexWriterConfig config;
    final org.apache.lucene.codecs.Codec codec;
    final org.apache.lucene.util.InfoStream infoStream;
    private final java.lang.Object commitLock;
    private final java.lang.Object fullFlushLock;
    private boolean keepFullyDeletedSegments;
    static final boolean $assertionsDisabled;

    org.apache.lucene.index.DirectoryReader getReader() throws java.io.IOException
    {
        org.apache.lucene.index.IndexWriter r0;
        org.apache.lucene.index.DirectoryReader $r1;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        $r1 = virtualinvoke r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.DirectoryReader getReader(boolean)>(1);

        return $r1;
    }

    org.apache.lucene.index.DirectoryReader getReader(boolean) throws java.io.IOException
    {
        org.apache.lucene.index.DocumentsWriter $r3, $r39, $r40, $r41;
        java.util.concurrent.atomic.AtomicInteger $r25;
        java.io.Closeable[] $r8, $r28, $r34;
        boolean $z0, $z1, z2, $z3, $z4, $z5, $z6, $z7, z8, z9, z10, z11, z12;
        org.apache.lucene.index.DirectoryReader $r5, r38;
        org.apache.lucene.index.SegmentInfos $r4;
        org.apache.lucene.index.IndexWriter r0;
        org.apache.lucene.util.InfoStream $r1, $r6, $r7, $r10, $r16, $r17, $r19, $r26, $r31, $r32, $r35, $r36;
        java.lang.StringBuilder $r11, $r12, $r13, $r20, $r21, $r22, $r23, $r42, $r43;
        java.lang.Throwable $r27, $r29, $r30, $r37;
        long $l0, $l1, $l2, $l3;
        int $i5;
        java.lang.String $r14, $r24;
        org.apache.lucene.index.MergePolicy$MergeTrigger $r15;
        java.lang.Object $r2;
        java.lang.OutOfMemoryError $r33;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        z2 := @parameter0: boolean;

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void ensureOpen()>();

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r1 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z0 = virtualinvoke $r1.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z0 == 0 goto label01;

        $r26 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r26.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "flush at getReader");

     label01:
        r0.<org.apache.lucene.index.IndexWriter: boolean poolReaders> = 1;

        r38 = null;

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void doBeforeFlush()>();

     label02:
        $r2 = r0.<org.apache.lucene.index.IndexWriter: java.lang.Object fullFlushLock>;

        entermonitor $r2;

     label03:
        z8 = 0;

        z12 = 0;

        z11 = 0;

        z10 = 0;

        z9 = 0;

     label04:
        $r3 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.DocumentsWriter docWriter>;

        $z1 = virtualinvoke $r3.<org.apache.lucene.index.DocumentsWriter: boolean flushAllThreads()>();

        if $z1 != 0 goto label05;

        $r25 = r0.<org.apache.lucene.index.IndexWriter: java.util.concurrent.atomic.AtomicInteger flushCount>;

        virtualinvoke $r25.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

     label05:
        z8 = 1;

        z12 = 1;

        z11 = 1;

        z10 = 1;

        z9 = 1;

        entermonitor r0;

     label06:
        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void maybeApplyDeletes(boolean)>(z2);

        $r4 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $r5 = staticinvoke <org.apache.lucene.index.StandardDirectoryReader: org.apache.lucene.index.DirectoryReader open(org.apache.lucene.index.IndexWriter,org.apache.lucene.index.SegmentInfos,boolean)>(r0, $r4, z2);

        r38 = $r5;

        $r6 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z3 = virtualinvoke $r6.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z3 == 0 goto label07;

        $r19 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("return reader version=");

        $l3 = virtualinvoke $r5.<org.apache.lucene.index.DirectoryReader: long getVersion()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" reader=");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r19.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", $r24);

     label07:
        exitmonitor r0;

     label08:
        goto label11;

     label09:
        $r37 := @caughtexception;

        exitmonitor r0;

     label10:
        throw $r37;

     label11:
        if 1 != 0 goto label12;

        $r16 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z5 = virtualinvoke $r16.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z5 == 0 goto label12;

        $r17 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r17.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "hit exception during NRT reader");

     label12:
        $r39 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.DocumentsWriter docWriter>;

        virtualinvoke $r39.<org.apache.lucene.index.DocumentsWriter: void finishFullFlush(boolean)>(1);

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void doAfterFlush()>();

        goto label21;

     label13:
        $r33 := @caughtexception;

        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void handleOOM(java.lang.OutOfMemoryError,java.lang.String)>($r33, "getReader");

     label14:
        if z11 != 0 goto label15;

        $r35 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z7 = virtualinvoke $r35.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z7 == 0 goto label15;

        $r36 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r36.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "hit exception during NRT reader");

     label15:
        $r40 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.DocumentsWriter docWriter>;

        virtualinvoke $r40.<org.apache.lucene.index.DocumentsWriter: void finishFullFlush(boolean)>(z12);

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void doAfterFlush()>();

        exitmonitor $r2;

     label16:
        if 0 != 0 goto label17;

        $r34 = newarray (java.io.Closeable)[1];

        $r34[0] = r38;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.io.Closeable[])>($r34);

     label17:
        return null;

     label18:
        $r30 := @caughtexception;

     label19:
        if z10 != 0 goto label20;

        $r31 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z6 = virtualinvoke $r31.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z6 == 0 goto label20;

        $r32 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r32.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "hit exception during NRT reader");

     label20:
        $r41 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.DocumentsWriter docWriter>;

        virtualinvoke $r41.<org.apache.lucene.index.DocumentsWriter: void finishFullFlush(boolean)>(z9);

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void doAfterFlush()>();

        throw $r30;

     label21:
        exitmonitor $r2;

     label22:
        goto label25;

     label23:
        $r29 := @caughtexception;

        exitmonitor $r2;

     label24:
        throw $r29;

     label25:
        if $z1 == 0 goto label26;

        $r15 = <org.apache.lucene.index.MergePolicy$MergeTrigger: org.apache.lucene.index.MergePolicy$MergeTrigger FULL_FLUSH>;

        $i5 = (int) -1;

        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void maybeMerge(org.apache.lucene.index.MergePolicy$MergeTrigger,int)>($r15, $i5);

     label26:
        $r7 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z4 = virtualinvoke $r7.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z4 == 0 goto label27;

        $r10 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getReader took ");

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l2 = $l1 - $l0;

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" msec");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", $r14);

     label27:
        if 1 != 0 goto label31;

        $r8 = newarray (java.io.Closeable)[1];

        $r8[0] = $r5;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.io.Closeable[])>($r8);

        goto label31;

     label28:
        $r27 := @caughtexception;

     label29:
        if 0 != 0 goto label30;

        $r28 = newarray (java.io.Closeable)[1];

        $r28[0] = r38;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.io.Closeable[])>($r28);

     label30:
        throw $r27;

     label31:
        return $r5;

        catch java.lang.Throwable from label06 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch java.lang.OutOfMemoryError from label04 to label11 with label13;
        catch java.lang.Throwable from label04 to label11 with label18;
        catch java.lang.Throwable from label13 to label14 with label18;
        catch java.lang.Throwable from label18 to label19 with label18;
        catch java.lang.Throwable from label03 to label16 with label23;
        catch java.lang.Throwable from label18 to label22 with label23;
        catch java.lang.Throwable from label23 to label24 with label23;
        catch java.lang.Throwable from label02 to label16 with label28;
        catch java.lang.Throwable from label18 to label27 with label28;
        catch java.lang.Throwable from label28 to label29 with label28;
    }

    public int numDeletedDocs(org.apache.lucene.index.SegmentInfoPerCommit)
    {
        org.apache.lucene.index.IndexWriter r0;
        org.apache.lucene.index.IndexWriter$ReaderPool $r2;
        int $i0, $i1, i2;
        org.apache.lucene.index.SegmentInfoPerCommit r1;
        org.apache.lucene.index.ReadersAndLiveDocs $r3;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        r1 := @parameter0: org.apache.lucene.index.SegmentInfoPerCommit;

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void ensureOpen(boolean)>(0);

        $i0 = virtualinvoke r1.<org.apache.lucene.index.SegmentInfoPerCommit: int getDelCount()>();

        i2 = $i0;

        $r2 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexWriter$ReaderPool readerPool>;

        $r3 = virtualinvoke $r2.<org.apache.lucene.index.IndexWriter$ReaderPool: org.apache.lucene.index.ReadersAndLiveDocs get(org.apache.lucene.index.SegmentInfoPerCommit,boolean)>(r1, 0);

        if $r3 == null goto label1;

        $i1 = virtualinvoke $r3.<org.apache.lucene.index.ReadersAndLiveDocs: int getPendingDeleteCount()>();

        i2 = $i0 + $i1;

     label1:
        return i2;
    }

    protected final void ensureOpen(boolean) throws org.apache.lucene.store.AlreadyClosedException
    {
        org.apache.lucene.index.IndexWriter r0;
        org.apache.lucene.store.AlreadyClosedException $r1;
        boolean $z0, z1, $z2;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        z1 := @parameter0: boolean;

        $z0 = r0.<org.apache.lucene.index.IndexWriter: boolean closed>;

        if $z0 != 0 goto label1;

        if z1 == 0 goto label2;

        $z2 = r0.<org.apache.lucene.index.IndexWriter: boolean closing>;

        if $z2 == 0 goto label2;

     label1:
        $r1 = new org.apache.lucene.store.AlreadyClosedException;

        specialinvoke $r1.<org.apache.lucene.store.AlreadyClosedException: void <init>(java.lang.String)>("this IndexWriter is closed");

        throw $r1;

     label2:
        return;
    }

    protected final void ensureOpen() throws org.apache.lucene.store.AlreadyClosedException
    {
        org.apache.lucene.index.IndexWriter r0;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void ensureOpen(boolean)>(1);

        return;
    }

    public void <init>(org.apache.lucene.store.Directory, org.apache.lucene.index.IndexWriterConfig) throws java.io.IOException
    {
        org.apache.lucene.index.IndexFileDeleter $r42, $r94;
        org.apache.lucene.index.MergePolicy $r20, $r21;
        org.apache.lucene.util.InfoStream $r18, $r27, $r43, $r44, $r46, $r48, $r58, $r60, $r78, $r80, $r99;
        java.lang.StringBuilder $r47, $r49, $r50, $r59, $r61, $r63, $r64, $r71, $r72, $r74;
        org.apache.lucene.index.IndexCommit $r41;
        java.lang.Throwable $r76, $r77, $r81, $r82;
        org.apache.lucene.index.LiveIndexWriterConfig $r11, $r15, $r17, $r19, $r22, $r24, $r28, $r31, $r33, $r40, $r90, $r96;
        org.apache.lucene.store.LockObtainFailedException $r70;
        long $l0;
        java.util.ArrayList $r5;
        org.apache.lucene.store.Lock $r30, $r32, $r45, $r73, $r79;
        org.apache.lucene.index.FieldInfos$FieldNumbers $r87, $r92;
        java.lang.String $r51, $r56, $r62, $r65, $r75;
        org.apache.lucene.analysis.Analyzer $r16;
        java.io.IOException $r83;
        org.apache.lucene.index.DocumentsWriter $r88;
        org.apache.lucene.index.MergeScheduler $r23;
        java.util.concurrent.atomic.AtomicInteger $r6, $r7;
        org.apache.lucene.index.IndexWriterConfig$OpenMode $r34, $r35, $r36;
        org.apache.lucene.store.Directory r14, $r29, $r37, $r38, $r52, $r53, $r55, $r67, $r91, $r95;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, $z9, z10;
        org.apache.lucene.index.SegmentInfos $r39, $r54, $r57, $r68, $r69, $r84, $r85, $r98;
        org.apache.lucene.index.IndexWriter r0;
        java.util.List $r86;
        org.apache.lucene.index.IndexWriterConfig r12, $r13;
        java.util.HashMap $r1;
        java.util.HashSet $r2, $r4;
        org.apache.lucene.index.IndexDeletionPolicy $r97;
        java.util.LinkedList $r3;
        java.lang.IllegalArgumentException $r66;
        org.apache.lucene.index.BufferedDeletesStream $r26, $r93;
        org.apache.lucene.index.IndexWriter$ReaderPool $r8;
        org.apache.lucene.codecs.Codec $r25, $r89;
        java.lang.Object $r9, $r10;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        r14 := @parameter0: org.apache.lucene.store.Directory;

        r12 := @parameter1: org.apache.lucene.index.IndexWriterConfig;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.lucene.index.IndexWriter: java.util.Map segmentsToMerge> = $r1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<org.apache.lucene.index.IndexWriter: java.util.HashSet mergingSegments> = $r2;

        $r3 = new java.util.LinkedList;

        specialinvoke $r3.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.lucene.index.IndexWriter: java.util.LinkedList pendingMerges> = $r3;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        r0.<org.apache.lucene.index.IndexWriter: java.util.Set runningMerges> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.lucene.index.IndexWriter: java.util.List mergeExceptions> = $r5;

        $r6 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        r0.<org.apache.lucene.index.IndexWriter: java.util.concurrent.atomic.AtomicInteger flushCount> = $r6;

        $r7 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r7.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        r0.<org.apache.lucene.index.IndexWriter: java.util.concurrent.atomic.AtomicInteger flushDeletesCount> = $r7;

        $r8 = new org.apache.lucene.index.IndexWriter$ReaderPool;

        specialinvoke $r8.<org.apache.lucene.index.IndexWriter$ReaderPool: void <init>(org.apache.lucene.index.IndexWriter)>(r0);

        r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexWriter$ReaderPool readerPool> = $r8;

        $r9 = new java.lang.Object;

        specialinvoke $r9.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.index.IndexWriter: java.lang.Object commitLock> = $r9;

        $r10 = new java.lang.Object;

        specialinvoke $r10.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.index.IndexWriter: java.lang.Object fullFlushLock> = $r10;

        $r11 = new org.apache.lucene.index.LiveIndexWriterConfig;

        $r13 = virtualinvoke r12.<org.apache.lucene.index.IndexWriterConfig: org.apache.lucene.index.IndexWriterConfig clone()>();

        specialinvoke $r11.<org.apache.lucene.index.LiveIndexWriterConfig: void <init>(org.apache.lucene.index.IndexWriterConfig)>($r13);

        r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.LiveIndexWriterConfig config> = $r11;

        r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory directory> = r14;

        $r15 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.LiveIndexWriterConfig config>;

        $r16 = virtualinvoke $r15.<org.apache.lucene.index.LiveIndexWriterConfig: org.apache.lucene.analysis.Analyzer getAnalyzer()>();

        r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.analysis.Analyzer analyzer> = $r16;

        $r17 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.LiveIndexWriterConfig config>;

        $r18 = virtualinvoke $r17.<org.apache.lucene.index.LiveIndexWriterConfig: org.apache.lucene.util.InfoStream getInfoStream()>();

        r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream> = $r18;

        $r19 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.LiveIndexWriterConfig config>;

        $r20 = virtualinvoke $r19.<org.apache.lucene.index.LiveIndexWriterConfig: org.apache.lucene.index.MergePolicy getMergePolicy()>();

        r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.MergePolicy mergePolicy> = $r20;

        $r21 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.MergePolicy mergePolicy>;

        virtualinvoke $r21.<org.apache.lucene.index.MergePolicy: void setIndexWriter(org.apache.lucene.index.IndexWriter)>(r0);

        $r22 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.LiveIndexWriterConfig config>;

        $r23 = virtualinvoke $r22.<org.apache.lucene.index.LiveIndexWriterConfig: org.apache.lucene.index.MergeScheduler getMergeScheduler()>();

        r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.MergeScheduler mergeScheduler> = $r23;

        $r24 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.LiveIndexWriterConfig config>;

        $r25 = virtualinvoke $r24.<org.apache.lucene.index.LiveIndexWriterConfig: org.apache.lucene.codecs.Codec getCodec()>();

        r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.codecs.Codec codec> = $r25;

        $r26 = new org.apache.lucene.index.BufferedDeletesStream;

        $r27 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        specialinvoke $r26.<org.apache.lucene.index.BufferedDeletesStream: void <init>(org.apache.lucene.util.InfoStream)>($r27);

        r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.BufferedDeletesStream bufferedDeletesStream> = $r26;

        $r28 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.LiveIndexWriterConfig config>;

        $z0 = virtualinvoke $r28.<org.apache.lucene.index.LiveIndexWriterConfig: boolean getReaderPooling()>();

        r0.<org.apache.lucene.index.IndexWriter: boolean poolReaders> = $z0;

        $r29 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory directory>;

        $r30 = virtualinvoke $r29.<org.apache.lucene.store.Directory: org.apache.lucene.store.Lock makeLock(java.lang.String)>("write.lock");

        r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Lock writeLock> = $r30;

        $r32 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Lock writeLock>;

        $r31 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.LiveIndexWriterConfig config>;

        $l0 = virtualinvoke $r31.<org.apache.lucene.index.LiveIndexWriterConfig: long getWriteLockTimeout()>();

        $z1 = virtualinvoke $r32.<org.apache.lucene.store.Lock: boolean obtain(long)>($l0);

        if $z1 != 0 goto label01;

        $r70 = new org.apache.lucene.store.LockObtainFailedException;

        $r71 = new java.lang.StringBuilder;

        specialinvoke $r71.<java.lang.StringBuilder: void <init>()>();

        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Index locked for write: ");

        $r73 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Lock writeLock>;

        $r74 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r73);

        $r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r70.<org.apache.lucene.store.LockObtainFailedException: void <init>(java.lang.String)>($r75);

        throw $r70;

     label01:
        $r33 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.LiveIndexWriterConfig config>;

        $r34 = virtualinvoke $r33.<org.apache.lucene.index.LiveIndexWriterConfig: org.apache.lucene.index.IndexWriterConfig$OpenMode getOpenMode()>();

        $r35 = <org.apache.lucene.index.IndexWriterConfig$OpenMode: org.apache.lucene.index.IndexWriterConfig$OpenMode CREATE>;

        if $r34 != $r35 goto label02;

        z8 = 1;

        goto label06;

     label02:
        $r36 = <org.apache.lucene.index.IndexWriterConfig$OpenMode: org.apache.lucene.index.IndexWriterConfig$OpenMode APPEND>;

        if $r34 != $r36 goto label03;

        z8 = 0;

        goto label06;

     label03:
        $r37 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory directory>;

        $z2 = staticinvoke <org.apache.lucene.index.DirectoryReader: boolean indexExists(org.apache.lucene.store.Directory)>($r37);

        if $z2 != 0 goto label04;

        $z9 = 1;

        goto label05;

     label04:
        $z9 = 0;

     label05:
        z8 = $z9;

     label06:
        $r84 = new org.apache.lucene.index.SegmentInfos;

        specialinvoke $r84.<org.apache.lucene.index.SegmentInfos: void <init>()>();

        r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos> = $r84;

        z10 = 1;

        if z8 == 0 goto label11;

     label07:
        $r68 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $r67 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory directory>;

        virtualinvoke $r68.<org.apache.lucene.index.SegmentInfos: void read(org.apache.lucene.store.Directory)>($r67);

        $r69 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        virtualinvoke $r69.<org.apache.lucene.index.SegmentInfos: void clear()>();

     label08:
        goto label10;

     label09:
        $r83 := @caughtexception;

        z10 = 0;

     label10:
        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void changed()>();

        goto label13;

     label11:
        $r39 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $r38 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory directory>;

        virtualinvoke $r39.<org.apache.lucene.index.SegmentInfos: void read(org.apache.lucene.store.Directory)>($r38);

        $r40 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.LiveIndexWriterConfig config>;

        $r41 = virtualinvoke $r40.<org.apache.lucene.index.LiveIndexWriterConfig: org.apache.lucene.index.IndexCommit getIndexCommit()>();

        if $r41 == null goto label13;

        $r52 = virtualinvoke $r41.<org.apache.lucene.index.IndexCommit: org.apache.lucene.store.Directory getDirectory()>();

        $r53 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory directory>;

        if $r52 == $r53 goto label12;

        $r66 = new java.lang.IllegalArgumentException;

        specialinvoke $r66.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("IndexCommit\'s directory doesn\'t match my directory");

        throw $r66;

     label12:
        $r54 = new org.apache.lucene.index.SegmentInfos;

        specialinvoke $r54.<org.apache.lucene.index.SegmentInfos: void <init>()>();

        $r55 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory directory>;

        $r56 = virtualinvoke $r41.<org.apache.lucene.index.IndexCommit: java.lang.String getSegmentsFileName()>();

        virtualinvoke $r54.<org.apache.lucene.index.SegmentInfos: void read(org.apache.lucene.store.Directory,java.lang.String)>($r55, $r56);

        $r57 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        virtualinvoke $r57.<org.apache.lucene.index.SegmentInfos: void replace(org.apache.lucene.index.SegmentInfos)>($r54);

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void changed()>();

        $r58 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z6 = virtualinvoke $r58.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z6 == 0 goto label13;

        $r60 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r59 = new java.lang.StringBuilder;

        specialinvoke $r59.<java.lang.StringBuilder: void <init>()>();

        $r61 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("init: loaded commit \"");

        $r62 = virtualinvoke $r41.<org.apache.lucene.index.IndexCommit: java.lang.String getSegmentsFileName()>();

        $r63 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r62);

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r60.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", $r65);

     label13:
        $r85 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $r86 = virtualinvoke $r85.<org.apache.lucene.index.SegmentInfos: java.util.List createBackupSegmentInfos()>();

        r0.<org.apache.lucene.index.IndexWriter: java.util.List rollbackSegments> = $r86;

        $r87 = specialinvoke r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.FieldInfos$FieldNumbers getFieldNumberMap()>();

        r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.FieldInfos$FieldNumbers globalFieldNumberMap> = $r87;

        $r88 = new org.apache.lucene.index.DocumentsWriter;

        $r89 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.codecs.Codec codec>;

        $r90 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.LiveIndexWriterConfig config>;

        $r91 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory directory>;

        $r92 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.FieldInfos$FieldNumbers globalFieldNumberMap>;

        $r93 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.BufferedDeletesStream bufferedDeletesStream>;

        specialinvoke $r88.<org.apache.lucene.index.DocumentsWriter: void <init>(org.apache.lucene.codecs.Codec,org.apache.lucene.index.LiveIndexWriterConfig,org.apache.lucene.store.Directory,org.apache.lucene.index.IndexWriter,org.apache.lucene.index.FieldInfos$FieldNumbers,org.apache.lucene.index.BufferedDeletesStream)>($r89, $r90, $r91, r0, $r92, $r93);

        r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.DocumentsWriter docWriter> = $r88;

        entermonitor r0;

     label14:
        $r94 = new org.apache.lucene.index.IndexFileDeleter;

        $r95 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory directory>;

        $r96 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.LiveIndexWriterConfig config>;

        $r97 = virtualinvoke $r96.<org.apache.lucene.index.LiveIndexWriterConfig: org.apache.lucene.index.IndexDeletionPolicy getIndexDeletionPolicy()>();

        $r98 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $r99 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        specialinvoke $r94.<org.apache.lucene.index.IndexFileDeleter: void <init>(org.apache.lucene.store.Directory,org.apache.lucene.index.IndexDeletionPolicy,org.apache.lucene.index.SegmentInfos,org.apache.lucene.util.InfoStream,org.apache.lucene.index.IndexWriter,boolean)>($r95, $r97, $r98, $r99, r0, z10);

        r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter> = $r94;

        exitmonitor r0;

     label15:
        goto label18;

     label16:
        $r82 := @caughtexception;

        exitmonitor r0;

     label17:
        throw $r82;

     label18:
        $r42 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        $z3 = $r42.<org.apache.lucene.index.IndexFileDeleter: boolean startingCommitDeleted>;

        if $z3 == 0 goto label19;

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void changed()>();

     label19:
        $r43 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z4 = virtualinvoke $r43.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z4 == 0 goto label20;

        $r48 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>()>();

        $r49 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("init: create=");

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z8);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r48.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", $r51);

        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void messageState()>();

     label20:
        if 1 != 0 goto label32;

        $r44 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z5 = virtualinvoke $r44.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z5 == 0 goto label21;

        $r46 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r46.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "init: hit exception on init; releasing write lock");

     label21:
        $r45 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Lock writeLock>;

        virtualinvoke $r45.<org.apache.lucene.store.Lock: void release()>();

     label22:
        goto label24;

     label23:
        $r81 := @caughtexception;

     label24:
        r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Lock writeLock> = null;

        goto label32;

     label25:
        $r77 := @caughtexception;

     label26:
        if 0 != 0 goto label31;

        $r78 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z7 = virtualinvoke $r78.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z7 == 0 goto label27;

        $r80 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r80.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "init: hit exception on init; releasing write lock");

     label27:
        $r79 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Lock writeLock>;

        virtualinvoke $r79.<org.apache.lucene.store.Lock: void release()>();

     label28:
        goto label30;

     label29:
        $r76 := @caughtexception;

     label30:
        r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Lock writeLock> = null;

     label31:
        throw $r77;

     label32:
        return;

        catch java.io.IOException from label07 to label08 with label09;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
        catch java.lang.Throwable from label21 to label22 with label23;
        catch java.lang.Throwable from label01 to label20 with label25;
        catch java.lang.Throwable from label27 to label28 with label29;
        catch java.lang.Throwable from label25 to label26 with label25;
    }

    private org.apache.lucene.index.FieldInfos getFieldInfos(org.apache.lucene.index.SegmentInfo) throws java.io.IOException
    {
        java.lang.Throwable $r12;
        org.apache.lucene.store.CompoundFileDirectory $r7;
        org.apache.lucene.store.Directory $r9, r14;
        java.lang.String $r5, $r8, $r10;
        org.apache.lucene.index.FieldInfos $r6;
        org.apache.lucene.store.IOContext $r4, $r11;
        boolean $z0, $z1, $z2;
        org.apache.lucene.index.SegmentInfo r0;
        org.apache.lucene.codecs.FieldInfosFormat $r2;
        org.apache.lucene.codecs.FieldInfosReader $r3;
        org.apache.lucene.index.IndexWriter r13;
        org.apache.lucene.codecs.Codec $r1;

        r13 := @this: org.apache.lucene.index.IndexWriter;

        r0 := @parameter0: org.apache.lucene.index.SegmentInfo;

        r14 = null;

     label1:
        $z0 = virtualinvoke r0.<org.apache.lucene.index.SegmentInfo: boolean getUseCompoundFile()>();

        if $z0 == 0 goto label2;

        $r7 = new org.apache.lucene.store.CompoundFileDirectory;

        $r9 = r0.<org.apache.lucene.index.SegmentInfo: org.apache.lucene.store.Directory dir>;

        $r8 = r0.<org.apache.lucene.index.SegmentInfo: java.lang.String name>;

        $r10 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String segmentFileName(java.lang.String,java.lang.String,java.lang.String)>($r8, "", "cfs");

        $r11 = <org.apache.lucene.store.IOContext: org.apache.lucene.store.IOContext READONCE>;

        specialinvoke $r7.<org.apache.lucene.store.CompoundFileDirectory: void <init>(org.apache.lucene.store.Directory,java.lang.String,org.apache.lucene.store.IOContext,boolean)>($r9, $r10, $r11, 0);

        r14 = $r7;

        goto label3;

     label2:
        r14 = r0.<org.apache.lucene.index.SegmentInfo: org.apache.lucene.store.Directory dir>;

     label3:
        $r1 = virtualinvoke r0.<org.apache.lucene.index.SegmentInfo: org.apache.lucene.codecs.Codec getCodec()>();

        $r2 = virtualinvoke $r1.<org.apache.lucene.codecs.Codec: org.apache.lucene.codecs.FieldInfosFormat fieldInfosFormat()>();

        $r3 = virtualinvoke $r2.<org.apache.lucene.codecs.FieldInfosFormat: org.apache.lucene.codecs.FieldInfosReader getFieldInfosReader()>();

        $r5 = r0.<org.apache.lucene.index.SegmentInfo: java.lang.String name>;

        $r4 = <org.apache.lucene.store.IOContext: org.apache.lucene.store.IOContext READONCE>;

        $r6 = virtualinvoke $r3.<org.apache.lucene.codecs.FieldInfosReader: org.apache.lucene.index.FieldInfos read(org.apache.lucene.store.Directory,java.lang.String,org.apache.lucene.store.IOContext)>(r14, $r5, $r4);

     label4:
        $z1 = virtualinvoke r0.<org.apache.lucene.index.SegmentInfo: boolean getUseCompoundFile()>();

        if $z1 == 0 goto label5;

        if r14 == null goto label5;

        virtualinvoke r14.<org.apache.lucene.store.Directory: void close()>();

     label5:
        return $r6;

     label6:
        $r12 := @caughtexception;

     label7:
        $z2 = virtualinvoke r0.<org.apache.lucene.index.SegmentInfo: boolean getUseCompoundFile()>();

        if $z2 == 0 goto label8;

        if r14 == null goto label8;

        virtualinvoke r14.<org.apache.lucene.store.Directory: void close()>();

     label8:
        throw $r12;

        catch java.lang.Throwable from label1 to label4 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private org.apache.lucene.index.FieldInfos$FieldNumbers getFieldNumberMap() throws java.io.IOException
    {
        org.apache.lucene.index.SegmentInfoPerCommit r5;
        org.apache.lucene.index.FieldInfos$FieldNumbers $r0;
        int $i0;
        java.lang.String $r11;
        org.apache.lucene.index.FieldInfos $r7;
        boolean $z0, $z1;
        java.util.Iterator $r3, $r8;
        org.apache.lucene.index.SegmentInfo $r6;
        org.apache.lucene.index.SegmentInfos $r2;
        org.apache.lucene.index.FieldInfo$DocValuesType $r12;
        org.apache.lucene.index.IndexWriter r1;
        org.apache.lucene.index.FieldInfo r10;
        java.lang.Object $r4, $r9;

        r1 := @this: org.apache.lucene.index.IndexWriter;

        $r0 = new org.apache.lucene.index.FieldInfos$FieldNumbers;

        specialinvoke $r0.<org.apache.lucene.index.FieldInfos$FieldNumbers: void <init>()>();

        $r2 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $r3 = virtualinvoke $r2.<org.apache.lucene.index.SegmentInfos: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.lucene.index.SegmentInfoPerCommit) $r4;

        $r6 = r5.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $r7 = specialinvoke r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.FieldInfos getFieldInfos(org.apache.lucene.index.SegmentInfo)>($r6);

        $r8 = virtualinvoke $r7.<org.apache.lucene.index.FieldInfos: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.apache.lucene.index.FieldInfo) $r9;

        $r11 = r10.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        $i0 = r10.<org.apache.lucene.index.FieldInfo: int number>;

        $r12 = virtualinvoke r10.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$DocValuesType getDocValuesType()>();

        virtualinvoke $r0.<org.apache.lucene.index.FieldInfos$FieldNumbers: int addOrGet(java.lang.String,int,org.apache.lucene.index.FieldInfo$DocValuesType)>($r11, $i0, $r12);

        goto label2;

     label3:
        goto label1;

     label4:
        return $r0;
    }

    public org.apache.lucene.index.LiveIndexWriterConfig getConfig()
    {
        org.apache.lucene.index.IndexWriter r0;
        org.apache.lucene.index.LiveIndexWriterConfig $r1;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void ensureOpen(boolean)>(0);

        $r1 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.LiveIndexWriterConfig config>;

        return $r1;
    }

    private void messageState()
    {
        org.apache.lucene.index.LiveIndexWriterConfig $r16;
        org.apache.lucene.store.Directory $r5;
        java.lang.String $r9, $r13, $r17, $r19;
        boolean $z0;
        org.apache.lucene.index.IndexWriter r0;
        org.apache.lucene.util.InfoStream $r1, $r3;
        java.lang.StringBuilder $r2, $r4, $r6, $r7, $r8, $r10, $r11, $r12, $r14, $r15, $r18;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        $r1 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z0 = virtualinvoke $r1.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z0 == 0 goto label1;

        $r3 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\ndir=");

        $r5 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory directory>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("index=");

        $r9 = virtualinvoke r0.<org.apache.lucene.index.IndexWriter: java.lang.String segString()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("version=");

        $r13 = <org.apache.lucene.util.Constants: java.lang.String LUCENE_VERSION>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r16 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.LiveIndexWriterConfig config>;

        $r17 = virtualinvoke $r16.<org.apache.lucene.index.LiveIndexWriterConfig: java.lang.String toString()>();

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", $r19);

     label1:
        return;
    }

    public void close() throws java.io.IOException
    {
        org.apache.lucene.index.IndexWriter r0;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void close(boolean)>(1);

        return;
    }

    public void close(boolean) throws java.io.IOException
    {
        java.lang.Throwable $r2;
        org.apache.lucene.index.IndexWriter r0;
        java.lang.Object $r1;
        boolean $z0, $z1, z2;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        z2 := @parameter0: boolean;

        $r1 = r0.<org.apache.lucene.index.IndexWriter: java.lang.Object commitLock>;

        entermonitor $r1;

     label1:
        $z0 = specialinvoke r0.<org.apache.lucene.index.IndexWriter: boolean shouldClose()>();

        if $z0 == 0 goto label3;

        $z1 = r0.<org.apache.lucene.index.IndexWriter: boolean hitOOM>;

        if $z1 == 0 goto label2;

        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void rollbackInternal()>();

        goto label3;

     label2:
        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void closeInternal(boolean,boolean)>(z2, 1);

     label3:
        exitmonitor $r1;

     label4:
        goto label7;

     label5:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r2;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private synchronized boolean shouldClose()
    {
        org.apache.lucene.index.IndexWriter r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.index.IndexWriter;

     label1:
        $z0 = r0.<org.apache.lucene.index.IndexWriter: boolean closed>;

        if $z0 != 0 goto label3;

        $z1 = r0.<org.apache.lucene.index.IndexWriter: boolean closing>;

        if $z1 != 0 goto label2;

        r0.<org.apache.lucene.index.IndexWriter: boolean closing> = 1;

        return 1;

     label2:
        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void doWait()>();

        goto label1;

     label3:
        return 0;
    }

    private void closeInternal(boolean, boolean) throws java.io.IOException
    {
        org.apache.lucene.index.IndexFileDeleter $r11;
        org.apache.lucene.index.MergePolicy $r6, $r50, $r56, $r66;
        java.lang.Thread $r13, $r37, $r42;
        org.apache.lucene.util.InfoStream $r2, $r8, $r9, $r14, $r15, $r21, $r27, $r30, $r38, $r39, $r43, $r44, $r54, $r58, $r60, $r61, $r70, $r71, $r73, $r74;
        java.lang.StringBuilder $r20, $r22, $r24, $r29, $r31, $r32;
        org.apache.lucene.util.ThreadInterruptedException $r53, $r59, $r69, $r72;
        java.lang.Throwable $r35, $r36, $r40, $r45, $r46, $r47, $r48, $r52, $r62, $r64, $r68;
        java.lang.AssertionError $r18;
        org.apache.lucene.store.Lock $r12, $r19;
        java.lang.String $r23, $r25, $r33;
        org.apache.lucene.index.DocumentsWriterPerThreadPool $r16, $r17;
        java.lang.OutOfMemoryError $r41;
        java.lang.IllegalStateException $r34;
        org.apache.lucene.index.DocumentsWriter $r3, $r4, $r26;
        org.apache.lucene.index.MergeScheduler $r7, $r28, $r51, $r57, $r63, $r67;
        java.io.Closeable[] $r5, $r49, $r55, $r65;
        boolean $z0, z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, z16, $z17, $z18;
        org.apache.lucene.index.SegmentInfos $r1;
        org.apache.lucene.index.IndexWriter r0;
        int $i0, $i1;
        org.apache.lucene.index.IndexWriter$ReaderPool $r10;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        z2 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        z16 = 0;

     label01:
        $r1 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos pendingCommit>;

        if $r1 == null goto label02;

        $r34 = new java.lang.IllegalStateException;

        specialinvoke $r34.<java.lang.IllegalStateException: void <init>(java.lang.String)>("cannot close: prepareCommit was already called with no corresponding call to commit");

        throw $r34;

     label02:
        $r2 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z0 = virtualinvoke $r2.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z0 == 0 goto label03;

        $r30 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("now flush at close waitForMerges=");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z2);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r30.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", $r33);

     label03:
        $r3 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.DocumentsWriter docWriter>;

        virtualinvoke $r3.<org.apache.lucene.index.DocumentsWriter: void close()>();

     label04:
        if z1 == 0 goto label05;

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void flush(boolean,boolean)>(z2, 1);

        goto label06;

     label05:
        $r4 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.DocumentsWriter docWriter>;

        virtualinvoke $r4.<org.apache.lucene.index.DocumentsWriter: void abort()>();

     label06:
        z16 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if z2 == 0 goto label10;

     label07:
        $r28 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.MergeScheduler mergeScheduler>;

        virtualinvoke $r28.<org.apache.lucene.index.MergeScheduler: void merge(org.apache.lucene.index.IndexWriter)>(r0);

     label08:
        goto label10;

     label09:
        $r72 := @caughtexception;

        z16 = 1;

        $r73 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z15 = virtualinvoke $r73.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z15 == 0 goto label10;

        $r74 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r74.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "interrupted while waiting for final merges");

     label10:
        entermonitor r0;

     label11:
        if z2 == 0 goto label12;

        if z16 != 0 goto label12;

        $z17 = 1;

        goto label13;

     label12:
        $z17 = 0;

     label13:
        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void finishMerges(boolean)>($z17);

     label14:
        goto label17;

     label15:
        $r69 := @caughtexception;

        z16 = 1;

        $r70 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z14 = virtualinvoke $r70.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z14 == 0 goto label16;

        $r71 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r71.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "interrupted while waiting for merges to finish");

     label16:
        goto label11;

     label17:
        r0.<org.apache.lucene.index.IndexWriter: boolean stopMerges> = 1;

        exitmonitor r0;

     label18:
        goto label21;

     label19:
        $r68 := @caughtexception;

        exitmonitor r0;

     label20:
        throw $r68;

     label21:
        $r5 = newarray (java.io.Closeable)[2];

        $r6 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.MergePolicy mergePolicy>;

        $r5[0] = $r6;

        $r7 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.MergeScheduler mergeScheduler>;

        $r5[1] = $r7;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.io.Closeable[])>($r5);

        goto label24;

     label22:
        $r64 := @caughtexception;

     label23:
        $r65 = newarray (java.io.Closeable)[2];

        $r66 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.MergePolicy mergePolicy>;

        $r65[0] = $r66;

        $r67 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.MergeScheduler mergeScheduler>;

        $r65[1] = $r67;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.io.Closeable[])>($r65);

        throw $r64;

     label24:
        goto label45;

     label25:
        $r62 := @caughtexception;

     label26:
        z16 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if z2 == 0 goto label30;

     label27:
        $r63 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.MergeScheduler mergeScheduler>;

        virtualinvoke $r63.<org.apache.lucene.index.MergeScheduler: void merge(org.apache.lucene.index.IndexWriter)>(r0);

     label28:
        goto label30;

     label29:
        $r59 := @caughtexception;

        z16 = 1;

        $r60 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z13 = virtualinvoke $r60.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z13 == 0 goto label30;

        $r61 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r61.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "interrupted while waiting for final merges");

     label30:
        entermonitor r0;

     label31:
        if z2 == 0 goto label32;

        if z16 != 0 goto label32;

        $z18 = 1;

        goto label33;

     label32:
        $z18 = 0;

     label33:
        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void finishMerges(boolean)>($z18);

     label34:
        goto label37;

     label35:
        $r53 := @caughtexception;

        z16 = 1;

        $r54 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z12 = virtualinvoke $r54.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z12 == 0 goto label36;

        $r58 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r58.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "interrupted while waiting for merges to finish");

     label36:
        goto label31;

     label37:
        r0.<org.apache.lucene.index.IndexWriter: boolean stopMerges> = 1;

        exitmonitor r0;

     label38:
        goto label41;

     label39:
        $r52 := @caughtexception;

        exitmonitor r0;

     label40:
        throw $r52;

     label41:
        $r55 = newarray (java.io.Closeable)[2];

        $r56 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.MergePolicy mergePolicy>;

        $r55[0] = $r56;

        $r57 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.MergeScheduler mergeScheduler>;

        $r55[1] = $r57;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.io.Closeable[])>($r55);

        goto label44;

     label42:
        $r48 := @caughtexception;

     label43:
        $r49 = newarray (java.io.Closeable)[2];

        $r50 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.MergePolicy mergePolicy>;

        $r49[0] = $r50;

        $r51 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.MergeScheduler mergeScheduler>;

        $r49[1] = $r51;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.io.Closeable[])>($r49);

        throw $r48;

     label44:
        throw $r62;

     label45:
        $r8 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z3 = virtualinvoke $r8.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z3 == 0 goto label46;

        $r27 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r27.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "now call final commit()");

     label46:
        if z1 == 0 goto label47;

        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void commitInternal()>();

     label47:
        $r9 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z4 = virtualinvoke $r9.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z4 == 0 goto label48;

        $r21 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("at close: ");

        $r23 = virtualinvoke r0.<org.apache.lucene.index.IndexWriter: java.lang.String segString()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r21.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", $r25);

     label48:
        $r26 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.DocumentsWriter docWriter>;

        entermonitor r0;

     label49:
        $r10 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexWriter$ReaderPool readerPool>;

        virtualinvoke $r10.<org.apache.lucene.index.IndexWriter$ReaderPool: void dropAll(boolean)>(1);

        r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.DocumentsWriter docWriter> = null;

        $r11 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        virtualinvoke $r11.<org.apache.lucene.index.IndexFileDeleter: void close()>();

        exitmonitor r0;

     label50:
        goto label53;

     label51:
        $r47 := @caughtexception;

        exitmonitor r0;

     label52:
        throw $r47;

     label53:
        $r12 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Lock writeLock>;

        if $r12 == null goto label54;

        $r19 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Lock writeLock>;

        virtualinvoke $r19.<org.apache.lucene.store.Lock: void release()>();

        r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Lock writeLock> = null;

     label54:
        entermonitor r0;

     label55:
        r0.<org.apache.lucene.index.IndexWriter: boolean closed> = 1;

        exitmonitor r0;

     label56:
        goto label59;

     label57:
        $r46 := @caughtexception;

        exitmonitor r0;

     label58:
        throw $r46;

     label59:
        $z5 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z5 != 0 goto label60;

        $r16 = $r26.<org.apache.lucene.index.DocumentsWriter: org.apache.lucene.index.DocumentsWriterPerThreadPool perThreadPool>;

        $i0 = virtualinvoke $r16.<org.apache.lucene.index.DocumentsWriterPerThreadPool: int numDeactivatedThreadStates()>();

        $r17 = $r26.<org.apache.lucene.index.DocumentsWriter: org.apache.lucene.index.DocumentsWriterPerThreadPool perThreadPool>;

        $i1 = virtualinvoke $r17.<org.apache.lucene.index.DocumentsWriterPerThreadPool: int getMaxThreadStates()>();

        if $i0 == $i1 goto label60;

        $r18 = new java.lang.AssertionError;

        specialinvoke $r18.<java.lang.AssertionError: void <init>()>();

        throw $r18;

     label60:
        entermonitor r0;

     label61:
        r0.<org.apache.lucene.index.IndexWriter: boolean closing> = 0;

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        $z6 = r0.<org.apache.lucene.index.IndexWriter: boolean closed>;

        if $z6 != 0 goto label62;

        $r14 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z7 = virtualinvoke $r14.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z7 == 0 goto label62;

        $r15 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r15.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "hit exception while closing");

     label62:
        exitmonitor r0;

     label63:
        goto label66;

     label64:
        $r45 := @caughtexception;

        exitmonitor r0;

     label65:
        throw $r45;

     label66:
        if z16 == 0 goto label84;

        $r13 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r13.<java.lang.Thread: void interrupt()>();

        goto label84;

     label67:
        $r41 := @caughtexception;

        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void handleOOM(java.lang.OutOfMemoryError,java.lang.String)>($r41, "closeInternal");

     label68:
        entermonitor r0;

     label69:
        r0.<org.apache.lucene.index.IndexWriter: boolean closing> = 0;

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        $z10 = r0.<org.apache.lucene.index.IndexWriter: boolean closed>;

        if $z10 != 0 goto label70;

        $r43 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z11 = virtualinvoke $r43.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z11 == 0 goto label70;

        $r44 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r44.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "hit exception while closing");

     label70:
        exitmonitor r0;

     label71:
        goto label74;

     label72:
        $r40 := @caughtexception;

        exitmonitor r0;

     label73:
        throw $r40;

     label74:
        if z16 == 0 goto label84;

        $r42 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r42.<java.lang.Thread: void interrupt()>();

        goto label84;

     label75:
        $r36 := @caughtexception;

     label76:
        entermonitor r0;

     label77:
        r0.<org.apache.lucene.index.IndexWriter: boolean closing> = 0;

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        $z8 = r0.<org.apache.lucene.index.IndexWriter: boolean closed>;

        if $z8 != 0 goto label78;

        $r38 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z9 = virtualinvoke $r38.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z9 == 0 goto label78;

        $r39 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r39.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "hit exception while closing");

     label78:
        exitmonitor r0;

     label79:
        goto label82;

     label80:
        $r35 := @caughtexception;

        exitmonitor r0;

     label81:
        throw $r35;

     label82:
        if z16 == 0 goto label83;

        $r37 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r37.<java.lang.Thread: void interrupt()>();

     label83:
        throw $r36;

     label84:
        return;

        catch org.apache.lucene.util.ThreadInterruptedException from label07 to label08 with label09;
        catch org.apache.lucene.util.ThreadInterruptedException from label11 to label14 with label15;
        catch java.lang.Throwable from label11 to label18 with label19;
        catch java.lang.Throwable from label19 to label20 with label19;
        catch java.lang.Throwable from label06 to label21 with label22;
        catch java.lang.Throwable from label22 to label23 with label22;
        catch java.lang.Throwable from label04 to label06 with label25;
        catch org.apache.lucene.util.ThreadInterruptedException from label27 to label28 with label29;
        catch org.apache.lucene.util.ThreadInterruptedException from label31 to label34 with label35;
        catch java.lang.Throwable from label31 to label38 with label39;
        catch java.lang.Throwable from label39 to label40 with label39;
        catch java.lang.Throwable from label26 to label41 with label42;
        catch java.lang.Throwable from label42 to label43 with label42;
        catch java.lang.Throwable from label25 to label26 with label25;
        catch java.lang.Throwable from label49 to label50 with label51;
        catch java.lang.Throwable from label51 to label52 with label51;
        catch java.lang.Throwable from label55 to label56 with label57;
        catch java.lang.Throwable from label57 to label58 with label57;
        catch java.lang.Throwable from label61 to label63 with label64;
        catch java.lang.Throwable from label64 to label65 with label64;
        catch java.lang.OutOfMemoryError from label01 to label60 with label67;
        catch java.lang.Throwable from label69 to label71 with label72;
        catch java.lang.Throwable from label72 to label73 with label72;
        catch java.lang.Throwable from label01 to label60 with label75;
        catch java.lang.Throwable from label67 to label68 with label75;
        catch java.lang.Throwable from label77 to label79 with label80;
        catch java.lang.Throwable from label80 to label81 with label80;
        catch java.lang.Throwable from label75 to label76 with label75;
    }

    public org.apache.lucene.store.Directory getDirectory()
    {
        org.apache.lucene.index.IndexWriter r0;
        org.apache.lucene.store.Directory $r1;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        $r1 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory directory>;

        return $r1;
    }

    public org.apache.lucene.analysis.Analyzer getAnalyzer()
    {
        org.apache.lucene.index.IndexWriter r0;
        org.apache.lucene.analysis.Analyzer $r1;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void ensureOpen()>();

        $r1 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.analysis.Analyzer analyzer>;

        return $r1;
    }

    public synchronized int maxDoc()
    {
        org.apache.lucene.index.IndexWriter r0;
        int $i0, $i1, i2;
        org.apache.lucene.index.SegmentInfos $r2;
        org.apache.lucene.index.DocumentsWriter $r1, $r3;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void ensureOpen()>();

        $r1 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.DocumentsWriter docWriter>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.DocumentsWriter docWriter>;

        i2 = virtualinvoke $r3.<org.apache.lucene.index.DocumentsWriter: int getNumDocs()>();

        goto label2;

     label1:
        i2 = 0;

     label2:
        $r2 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $i0 = virtualinvoke $r2.<org.apache.lucene.index.SegmentInfos: int totalDocCount()>();

        $i1 = i2 + $i0;

        return $i1;
    }

    public synchronized int numDocs()
    {
        java.util.Iterator $r3;
        org.apache.lucene.index.SegmentInfo $r6;
        org.apache.lucene.index.SegmentInfoPerCommit r5;
        org.apache.lucene.index.SegmentInfos $r2;
        org.apache.lucene.index.DocumentsWriter $r1, $r7;
        org.apache.lucene.index.IndexWriter r0;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void ensureOpen()>();

        $r1 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.DocumentsWriter docWriter>;

        if $r1 == null goto label1;

        $r7 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.DocumentsWriter docWriter>;

        i3 = virtualinvoke $r7.<org.apache.lucene.index.DocumentsWriter: int getNumDocs()>();

        goto label2;

     label1:
        i3 = 0;

     label2:
        $r2 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $r3 = virtualinvoke $r2.<org.apache.lucene.index.SegmentInfos: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.lucene.index.SegmentInfoPerCommit) $r4;

        $r6 = r5.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $i0 = virtualinvoke $r6.<org.apache.lucene.index.SegmentInfo: int getDocCount()>();

        $i1 = virtualinvoke r0.<org.apache.lucene.index.IndexWriter: int numDeletedDocs(org.apache.lucene.index.SegmentInfoPerCommit)>(r5);

        $i2 = $i0 - $i1;

        i3 = i3 + $i2;

        goto label3;

     label4:
        return i3;
    }

    public synchronized boolean hasDeletions()
    {
        java.util.Iterator $r5;
        org.apache.lucene.index.SegmentInfoPerCommit r7;
        org.apache.lucene.index.SegmentInfos $r4;
        org.apache.lucene.index.DocumentsWriter $r2;
        org.apache.lucene.index.IndexWriter r0;
        org.apache.lucene.index.BufferedDeletesStream $r1;
        org.apache.lucene.index.IndexWriter$ReaderPool $r3;
        java.lang.Object $r6;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void ensureOpen()>();

        $r1 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.BufferedDeletesStream bufferedDeletesStream>;

        $z0 = virtualinvoke $r1.<org.apache.lucene.index.BufferedDeletesStream: boolean any()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r2 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.DocumentsWriter docWriter>;

        $z1 = virtualinvoke $r2.<org.apache.lucene.index.DocumentsWriter: boolean anyDeletions()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $r3 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexWriter$ReaderPool readerPool>;

        $z2 = virtualinvoke $r3.<org.apache.lucene.index.IndexWriter$ReaderPool: boolean anyPendingDeletes()>();

        if $z2 == 0 goto label3;

        return 1;

     label3:
        $r4 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $r5 = virtualinvoke $r4.<org.apache.lucene.index.SegmentInfos: java.util.Iterator iterator()>();

     label4:
        $z3 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label6;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.lucene.index.SegmentInfoPerCommit) $r6;

        $z4 = virtualinvoke r7.<org.apache.lucene.index.SegmentInfoPerCommit: boolean hasDeletions()>();

        if $z4 == 0 goto label5;

        return 1;

     label5:
        goto label4;

     label6:
        return 0;
    }

    public void addDocument(java.lang.Iterable) throws java.io.IOException
    {
        org.apache.lucene.index.IndexWriter r0;
        java.lang.Iterable r1;
        org.apache.lucene.analysis.Analyzer $r2;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        r1 := @parameter0: java.lang.Iterable;

        $r2 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.analysis.Analyzer analyzer>;

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void addDocument(java.lang.Iterable,org.apache.lucene.analysis.Analyzer)>(r1, $r2);

        return;
    }

    public void addDocument(java.lang.Iterable, org.apache.lucene.analysis.Analyzer) throws java.io.IOException
    {
        org.apache.lucene.index.IndexWriter r0;
        java.lang.Iterable r1;
        org.apache.lucene.analysis.Analyzer r2;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        r1 := @parameter0: java.lang.Iterable;

        r2 := @parameter1: org.apache.lucene.analysis.Analyzer;

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void updateDocument(org.apache.lucene.index.Term,java.lang.Iterable,org.apache.lucene.analysis.Analyzer)>(null, r1, r2);

        return;
    }

    public void addDocuments(java.lang.Iterable) throws java.io.IOException
    {
        org.apache.lucene.index.IndexWriter r0;
        java.lang.Iterable r1;
        org.apache.lucene.analysis.Analyzer $r2;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        r1 := @parameter0: java.lang.Iterable;

        $r2 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.analysis.Analyzer analyzer>;

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void addDocuments(java.lang.Iterable,org.apache.lucene.analysis.Analyzer)>(r1, $r2);

        return;
    }

    public void addDocuments(java.lang.Iterable, org.apache.lucene.analysis.Analyzer) throws java.io.IOException
    {
        org.apache.lucene.index.IndexWriter r0;
        java.lang.Iterable r1;
        org.apache.lucene.analysis.Analyzer r2;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        r1 := @parameter0: java.lang.Iterable;

        r2 := @parameter1: org.apache.lucene.analysis.Analyzer;

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void updateDocuments(org.apache.lucene.index.Term,java.lang.Iterable,org.apache.lucene.analysis.Analyzer)>(null, r1, r2);

        return;
    }

    public void updateDocuments(org.apache.lucene.index.Term, java.lang.Iterable) throws java.io.IOException
    {
        org.apache.lucene.index.IndexWriter r0;
        org.apache.lucene.analysis.Analyzer $r3;
        org.apache.lucene.index.Term r1;
        java.lang.Iterable r2;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        r1 := @parameter0: org.apache.lucene.index.Term;

        r2 := @parameter1: java.lang.Iterable;

        $r3 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.analysis.Analyzer analyzer>;

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void updateDocuments(org.apache.lucene.index.Term,java.lang.Iterable,org.apache.lucene.analysis.Analyzer)>(r1, r2, $r3);

        return;
    }

    public void updateDocuments(org.apache.lucene.index.Term, java.lang.Iterable, org.apache.lucene.analysis.Analyzer) throws java.io.IOException
    {
        java.lang.Throwable $r9;
        org.apache.lucene.index.Term r3;
        java.lang.Iterable r1;
        org.apache.lucene.index.DocumentsWriter $r4;
        int $i1;
        boolean $z0, $z1, $z2;
        org.apache.lucene.index.MergePolicy$MergeTrigger $r5;
        org.apache.lucene.analysis.Analyzer r2;
        org.apache.lucene.index.IndexWriter r0;
        org.apache.lucene.util.InfoStream $r6, $r7, $r10, $r11;
        java.lang.OutOfMemoryError $r8;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        r3 := @parameter0: org.apache.lucene.index.Term;

        r1 := @parameter1: java.lang.Iterable;

        r2 := @parameter2: org.apache.lucene.analysis.Analyzer;

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void ensureOpen()>();

     label1:
        $r4 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.DocumentsWriter docWriter>;

        $z0 = virtualinvoke $r4.<org.apache.lucene.index.DocumentsWriter: boolean updateDocuments(java.lang.Iterable,org.apache.lucene.analysis.Analyzer,org.apache.lucene.index.Term)>(r1, r2, r3);

     label2:
        if 1 != 0 goto label6;

        $r6 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z1 = virtualinvoke $r6.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z1 == 0 goto label6;

        $r7 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r7.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "hit exception updating document");

        goto label6;

     label3:
        $r9 := @caughtexception;

     label4:
        if 0 != 0 goto label5;

        $r10 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z2 = virtualinvoke $r10.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z2 == 0 goto label5;

        $r11 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r11.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "hit exception updating document");

     label5:
        throw $r9;

     label6:
        if $z0 == 0 goto label7;

        $r5 = <org.apache.lucene.index.MergePolicy$MergeTrigger: org.apache.lucene.index.MergePolicy$MergeTrigger SEGMENT_FLUSH>;

        $i1 = (int) -1;

        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void maybeMerge(org.apache.lucene.index.MergePolicy$MergeTrigger,int)>($r5, $i1);

     label7:
        goto label9;

     label8:
        $r8 := @caughtexception;

        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void handleOOM(java.lang.OutOfMemoryError,java.lang.String)>($r8, "updateDocuments");

     label9:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
        catch java.lang.OutOfMemoryError from label1 to label7 with label8;
    }

    public void deleteDocuments(org.apache.lucene.index.Term) throws java.io.IOException
    {
        org.apache.lucene.index.IndexWriter r0;
        org.apache.lucene.index.Term r2;
        org.apache.lucene.index.Term[] $r1;
        java.lang.OutOfMemoryError $r4;
        org.apache.lucene.index.DocumentsWriter $r3;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        r2 := @parameter0: org.apache.lucene.index.Term;

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void ensureOpen()>();

     label1:
        $r3 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.DocumentsWriter docWriter>;

        $r1 = newarray (org.apache.lucene.index.Term)[1];

        $r1[0] = r2;

        virtualinvoke $r3.<org.apache.lucene.index.DocumentsWriter: void deleteTerms(org.apache.lucene.index.Term[])>($r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void handleOOM(java.lang.OutOfMemoryError,java.lang.String)>($r4, "deleteDocuments(Term)");

     label4:
        return;

        catch java.lang.OutOfMemoryError from label1 to label2 with label3;
    }

    public synchronized boolean tryDeleteDocument(org.apache.lucene.index.IndexReader, int) throws java.io.IOException
    {
        org.apache.lucene.index.SegmentInfoPerCommit $r8, $r14, $r15, $r17, $r19, $r21;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.lucene.index.SegmentInfo $r16;
        org.apache.lucene.index.ReadersAndLiveDocs $r12;
        org.apache.lucene.index.SegmentInfos $r10, $r20;
        java.util.List $r1;
        org.apache.lucene.index.IndexWriter r9;
        org.apache.lucene.index.IndexReader r0;
        org.apache.lucene.index.AtomicReader $r4, r27;
        java.lang.Throwable $r26;
        java.lang.AssertionError $r28, $r29;
        java.util.HashSet $r18;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, $i7, i8, $i10;
        org.apache.lucene.index.SegmentReader $r7;
        java.lang.IllegalArgumentException $r30;
        org.apache.lucene.index.BufferedDeletesStream $r13;
        org.apache.lucene.index.IndexWriter$ReaderPool $r11, $r22;
        java.lang.Object $r2, $r5;
        org.apache.lucene.index.AtomicReaderContext $r3, $r6;

        r9 := @this: org.apache.lucene.index.IndexWriter;

        r0 := @parameter0: org.apache.lucene.index.IndexReader;

        i8 := @parameter1: int;

        $z0 = r0 instanceof org.apache.lucene.index.AtomicReader;

        if $z0 == 0 goto label01;

        r27 = (org.apache.lucene.index.AtomicReader) r0;

        goto label03;

     label01:
        $r1 = virtualinvoke r0.<org.apache.lucene.index.IndexReader: java.util.List leaves()>();

        $i0 = staticinvoke <org.apache.lucene.index.ReaderUtil: int subIndex(int,java.util.List)>(i8, $r1);

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $r3 = (org.apache.lucene.index.AtomicReaderContext) $r2;

        $r4 = virtualinvoke $r3.<org.apache.lucene.index.AtomicReaderContext: org.apache.lucene.index.AtomicReader reader()>();

        r27 = $r4;

        $r5 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $r6 = (org.apache.lucene.index.AtomicReaderContext) $r5;

        $i1 = $r6.<org.apache.lucene.index.AtomicReaderContext: int docBase>;

        i8 = i8 - $i1;

        $z1 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z1 != 0 goto label02;

        if i8 >= 0 goto label02;

        $r28 = new java.lang.AssertionError;

        specialinvoke $r28.<java.lang.AssertionError: void <init>()>();

        throw $r28;

     label02:
        $z2 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z2 != 0 goto label03;

        $i7 = virtualinvoke $r4.<org.apache.lucene.index.AtomicReader: int maxDoc()>();

        if i8 < $i7 goto label03;

        $r29 = new java.lang.AssertionError;

        specialinvoke $r29.<java.lang.AssertionError: void <init>()>();

        throw $r29;

     label03:
        $z5 = r27 instanceof org.apache.lucene.index.SegmentReader;

        if $z5 != 0 goto label04;

        $r30 = new java.lang.IllegalArgumentException;

        specialinvoke $r30.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("the reader must be a SegmentReader or composite reader containing only SegmentReaders");

        throw $r30;

     label04:
        $r7 = (org.apache.lucene.index.SegmentReader) r27;

        $r8 = virtualinvoke $r7.<org.apache.lucene.index.SegmentReader: org.apache.lucene.index.SegmentInfoPerCommit getSegmentInfo()>();

        $r10 = r9.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $i2 = virtualinvoke $r10.<org.apache.lucene.index.SegmentInfos: int indexOf(org.apache.lucene.index.SegmentInfoPerCommit)>($r8);

        $i10 = (int) -1;

        if $i2 == $i10 goto label11;

        $r11 = r9.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexWriter$ReaderPool readerPool>;

        $r12 = virtualinvoke $r11.<org.apache.lucene.index.IndexWriter$ReaderPool: org.apache.lucene.index.ReadersAndLiveDocs get(org.apache.lucene.index.SegmentInfoPerCommit,boolean)>($r8, 0);

        if $r12 == null goto label11;

        $r13 = r9.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.BufferedDeletesStream bufferedDeletesStream>;

        entermonitor $r13;

     label05:
        virtualinvoke $r12.<org.apache.lucene.index.ReadersAndLiveDocs: void initWritableLiveDocs()>();

        $z3 = virtualinvoke $r12.<org.apache.lucene.index.ReadersAndLiveDocs: boolean delete(int)>(i8);

        if $z3 == 0 goto label07;

        $r14 = $r12.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $i3 = virtualinvoke $r14.<org.apache.lucene.index.SegmentInfoPerCommit: int getDelCount()>();

        $i4 = virtualinvoke $r12.<org.apache.lucene.index.ReadersAndLiveDocs: int getPendingDeleteCount()>();

        i5 = $i3 + $i4;

        $r15 = $r12.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r16 = $r15.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $i6 = virtualinvoke $r16.<org.apache.lucene.index.SegmentInfo: int getDocCount()>();

        if i5 != $i6 goto label06;

        $r18 = r9.<org.apache.lucene.index.IndexWriter: java.util.HashSet mergingSegments>;

        $r17 = $r12.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $z4 = virtualinvoke $r18.<java.util.HashSet: boolean contains(java.lang.Object)>($r17);

        if $z4 != 0 goto label06;

        $r20 = r9.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $r19 = $r12.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentInfoPerCommit info>;

        virtualinvoke $r20.<org.apache.lucene.index.SegmentInfos: void remove(org.apache.lucene.index.SegmentInfoPerCommit)>($r19);

        $r22 = r9.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexWriter$ReaderPool readerPool>;

        $r21 = $r12.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentInfoPerCommit info>;

        virtualinvoke $r22.<org.apache.lucene.index.IndexWriter$ReaderPool: void drop(org.apache.lucene.index.SegmentInfoPerCommit)>($r21);

        virtualinvoke r9.<org.apache.lucene.index.IndexWriter: void checkpoint()>();

     label06:
        virtualinvoke r9.<org.apache.lucene.index.IndexWriter: void changed()>();

     label07:
        exitmonitor $r13;

     label08:
        return 1;

     label09:
        $r26 := @caughtexception;

        exitmonitor $r13;

     label10:
        throw $r26;

     label11:
        return 0;

        catch java.lang.Throwable from label05 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public transient void deleteDocuments(org.apache.lucene.index.Term[]) throws java.io.IOException
    {
        org.apache.lucene.index.IndexWriter r0;
        org.apache.lucene.index.Term[] r1;
        java.lang.OutOfMemoryError $r3;
        org.apache.lucene.index.DocumentsWriter $r2;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        r1 := @parameter0: org.apache.lucene.index.Term[];

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void ensureOpen()>();

     label1:
        $r2 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.DocumentsWriter docWriter>;

        virtualinvoke $r2.<org.apache.lucene.index.DocumentsWriter: void deleteTerms(org.apache.lucene.index.Term[])>(r1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void handleOOM(java.lang.OutOfMemoryError,java.lang.String)>($r3, "deleteDocuments(Term..)");

     label4:
        return;

        catch java.lang.OutOfMemoryError from label1 to label2 with label3;
    }

    public void deleteDocuments(org.apache.lucene.search.Query) throws java.io.IOException
    {
        org.apache.lucene.search.Query r2;
        org.apache.lucene.index.IndexWriter r0;
        java.lang.OutOfMemoryError $r4;
        org.apache.lucene.search.Query[] $r1;
        org.apache.lucene.index.DocumentsWriter $r3;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        r2 := @parameter0: org.apache.lucene.search.Query;

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void ensureOpen()>();

     label1:
        $r3 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.DocumentsWriter docWriter>;

        $r1 = newarray (org.apache.lucene.search.Query)[1];

        $r1[0] = r2;

        virtualinvoke $r3.<org.apache.lucene.index.DocumentsWriter: void deleteQueries(org.apache.lucene.search.Query[])>($r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void handleOOM(java.lang.OutOfMemoryError,java.lang.String)>($r4, "deleteDocuments(Query)");

     label4:
        return;

        catch java.lang.OutOfMemoryError from label1 to label2 with label3;
    }

    public transient void deleteDocuments(org.apache.lucene.search.Query[]) throws java.io.IOException
    {
        org.apache.lucene.index.IndexWriter r0;
        java.lang.OutOfMemoryError $r3;
        org.apache.lucene.search.Query[] r1;
        org.apache.lucene.index.DocumentsWriter $r2;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        r1 := @parameter0: org.apache.lucene.search.Query[];

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void ensureOpen()>();

     label1:
        $r2 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.DocumentsWriter docWriter>;

        virtualinvoke $r2.<org.apache.lucene.index.DocumentsWriter: void deleteQueries(org.apache.lucene.search.Query[])>(r1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void handleOOM(java.lang.OutOfMemoryError,java.lang.String)>($r3, "deleteDocuments(Query..)");

     label4:
        return;

        catch java.lang.OutOfMemoryError from label1 to label2 with label3;
    }

    public void updateDocument(org.apache.lucene.index.Term, java.lang.Iterable) throws java.io.IOException
    {
        org.apache.lucene.index.IndexWriter r0;
        org.apache.lucene.analysis.Analyzer $r3;
        org.apache.lucene.index.Term r1;
        java.lang.Iterable r2;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        r1 := @parameter0: org.apache.lucene.index.Term;

        r2 := @parameter1: java.lang.Iterable;

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void ensureOpen()>();

        $r3 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.analysis.Analyzer analyzer>;

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void updateDocument(org.apache.lucene.index.Term,java.lang.Iterable,org.apache.lucene.analysis.Analyzer)>(r1, r2, $r3);

        return;
    }

    public void updateDocument(org.apache.lucene.index.Term, java.lang.Iterable, org.apache.lucene.analysis.Analyzer) throws java.io.IOException
    {
        java.lang.Throwable $r9;
        org.apache.lucene.index.Term r3;
        java.lang.Iterable r1;
        org.apache.lucene.index.DocumentsWriter $r4;
        int $i1;
        boolean $z0, $z1, $z2;
        org.apache.lucene.index.MergePolicy$MergeTrigger $r5;
        org.apache.lucene.analysis.Analyzer r2;
        org.apache.lucene.index.IndexWriter r0;
        org.apache.lucene.util.InfoStream $r6, $r7, $r10, $r11;
        java.lang.OutOfMemoryError $r8;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        r3 := @parameter0: org.apache.lucene.index.Term;

        r1 := @parameter1: java.lang.Iterable;

        r2 := @parameter2: org.apache.lucene.analysis.Analyzer;

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void ensureOpen()>();

     label1:
        $r4 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.DocumentsWriter docWriter>;

        $z0 = virtualinvoke $r4.<org.apache.lucene.index.DocumentsWriter: boolean updateDocument(java.lang.Iterable,org.apache.lucene.analysis.Analyzer,org.apache.lucene.index.Term)>(r1, r2, r3);

     label2:
        if 1 != 0 goto label6;

        $r6 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z1 = virtualinvoke $r6.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z1 == 0 goto label6;

        $r7 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r7.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "hit exception updating document");

        goto label6;

     label3:
        $r9 := @caughtexception;

     label4:
        if 0 != 0 goto label5;

        $r10 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z2 = virtualinvoke $r10.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z2 == 0 goto label5;

        $r11 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r11.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "hit exception updating document");

     label5:
        throw $r9;

     label6:
        if $z0 == 0 goto label7;

        $r5 = <org.apache.lucene.index.MergePolicy$MergeTrigger: org.apache.lucene.index.MergePolicy$MergeTrigger SEGMENT_FLUSH>;

        $i1 = (int) -1;

        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void maybeMerge(org.apache.lucene.index.MergePolicy$MergeTrigger,int)>($r5, $i1);

     label7:
        goto label9;

     label8:
        $r8 := @caughtexception;

        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void handleOOM(java.lang.OutOfMemoryError,java.lang.String)>($r8, "updateDocument");

     label9:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
        catch java.lang.OutOfMemoryError from label1 to label7 with label8;
    }

    final synchronized int getSegmentCount()
    {
        int $i0;
        org.apache.lucene.index.IndexWriter r0;
        org.apache.lucene.index.SegmentInfos $r1;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        $r1 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $i0 = virtualinvoke $r1.<org.apache.lucene.index.SegmentInfos: int size()>();

        return $i0;
    }

    final synchronized int getNumBufferedDocuments()
    {
        int $i0;
        org.apache.lucene.index.IndexWriter r0;
        org.apache.lucene.index.DocumentsWriter $r1;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        $r1 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.DocumentsWriter docWriter>;

        $i0 = virtualinvoke $r1.<org.apache.lucene.index.DocumentsWriter: int getNumDocs()>();

        return $i0;
    }

    final synchronized java.util.Collection getIndexFileNames() throws java.io.IOException
    {
        org.apache.lucene.index.IndexWriter r0;
        org.apache.lucene.store.Directory $r1;
        java.util.Collection $r3;
        org.apache.lucene.index.SegmentInfos $r2;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        $r2 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $r1 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory directory>;

        $r3 = virtualinvoke $r2.<org.apache.lucene.index.SegmentInfos: java.util.Collection files(org.apache.lucene.store.Directory,boolean)>($r1, 1);

        return $r3;
    }

    final synchronized int getDocCount(int)
    {
        org.apache.lucene.index.SegmentInfo $r4;
        org.apache.lucene.index.SegmentInfoPerCommit $r3;
        org.apache.lucene.index.SegmentInfos $r1, $r2;
        org.apache.lucene.index.IndexWriter r0;
        int i0, $i1, $i2, $i4;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r1 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $i1 = virtualinvoke $r1.<org.apache.lucene.index.SegmentInfos: int size()>();

        if i0 >= $i1 goto label1;

        $r2 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $r3 = virtualinvoke $r2.<org.apache.lucene.index.SegmentInfos: org.apache.lucene.index.SegmentInfoPerCommit info(int)>(i0);

        $r4 = $r3.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $i2 = virtualinvoke $r4.<org.apache.lucene.index.SegmentInfo: int getDocCount()>();

        return $i2;

     label1:
        $i4 = (int) -1;

        return $i4;
    }

    final int getFlushCount()
    {
        int $i0;
        org.apache.lucene.index.IndexWriter r0;
        java.util.concurrent.atomic.AtomicInteger $r1;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        $r1 = r0.<org.apache.lucene.index.IndexWriter: java.util.concurrent.atomic.AtomicInteger flushCount>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        return $i0;
    }

    final int getFlushDeletesCount()
    {
        int $i0;
        org.apache.lucene.index.IndexWriter r0;
        java.util.concurrent.atomic.AtomicInteger $r1;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        $r1 = r0.<org.apache.lucene.index.IndexWriter: java.util.concurrent.atomic.AtomicInteger flushDeletesCount>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        return $i0;
    }

    final java.lang.String newSegmentName()
    {
        java.lang.Throwable $r9;
        long $l0, $l1;
        org.apache.lucene.index.SegmentInfos $r1, $r2, $r5;
        org.apache.lucene.index.IndexWriter r0;
        int $i2, $i3;
        java.lang.StringBuilder $r3, $r4, $r7;
        java.lang.String $r6, $r8;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        $r1 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        entermonitor $r1;

     label1:
        $l0 = r0.<org.apache.lucene.index.IndexWriter: long changeCount>;

        $l1 = $l0 + 1L;

        r0.<org.apache.lucene.index.IndexWriter: long changeCount> = $l1;

        $r2 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        virtualinvoke $r2.<org.apache.lucene.index.SegmentInfos: void changed()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $r5 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $i2 = $r5.<org.apache.lucene.index.SegmentInfos: int counter>;

        $i3 = $i2 + 1;

        $r5.<org.apache.lucene.index.SegmentInfos: int counter> = $i3;

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toString(int,int)>($i2, 36);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        exitmonitor $r1;

     label2:
        return $r8;

     label3:
        $r9 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void forceMerge(int) throws java.io.IOException
    {
        int i0;
        org.apache.lucene.index.IndexWriter r0;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void forceMerge(int,boolean)>(i0, 1);

        return;
    }

    public void forceMerge(int, boolean) throws java.io.IOException
    {
        org.apache.lucene.index.SegmentInfoPerCommit $r25, $r29, r48;
        java.util.Map $r2, $r26, $r30, $r33;
        java.util.Set $r7;
        org.apache.lucene.util.InfoStream $r1, $r35, $r40;
        java.lang.StringBuilder $r16, $r19, $r36, $r38, $r43, $r44, $r52, $r54, $r56;
        java.lang.Throwable $r21, $r46, $r47;
        java.lang.String $r18, $r20, $r37, $r39, $r45;
        java.io.IOException $r57;
        org.apache.lucene.index.MergePolicy$OneMerge r49, r50, r51;
        java.lang.IllegalStateException $r55;
        org.apache.lucene.store.Directory $r17;
        boolean $z0, $z1, $z2, z3, $z4, $z5, $z6;
        org.apache.lucene.index.SegmentInfos $r3;
        org.apache.lucene.index.IndexWriter r0;
        java.util.List $r10, $r11, $r12;
        int i0, $i1, $i2, $i3, i4, $i6;
        java.lang.Boolean $r24, $r28, $r32;
        java.util.LinkedList $r5;
        org.apache.lucene.index.MergePolicy$MergeTrigger $r9;
        java.util.Iterator $r4, $r6, $r8;
        java.lang.IllegalArgumentException $r53;
        java.lang.Object $r13, $r23, $r27, $r31;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        i0 := @parameter0: int;

        z3 := @parameter1: boolean;

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void ensureOpen()>();

        if i0 >= 1 goto label01;

        $r53 = new java.lang.IllegalArgumentException;

        $r52 = new java.lang.StringBuilder;

        specialinvoke $r52.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("maxNumSegments must be >= 1; got ");

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r53.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r45);

        throw $r53;

     label01:
        $r1 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z0 = virtualinvoke $r1.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z0 == 0 goto label02;

        $r35 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r54 = new java.lang.StringBuilder;

        specialinvoke $r54.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("forceMerge: index now ");

        $r37 = virtualinvoke r0.<org.apache.lucene.index.IndexWriter: java.lang.String segString()>();

        $r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r35.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", $r39);

        $r40 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r40.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "now flush at forceMerge");

     label02:
        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void flush(boolean,boolean)>(1, 1);

        entermonitor r0;

     label03:
        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void resetMergeExceptions()>();

        $r2 = r0.<org.apache.lucene.index.IndexWriter: java.util.Map segmentsToMerge>;

        interfaceinvoke $r2.<java.util.Map: void clear()>();

        $r3 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $r4 = virtualinvoke $r3.<org.apache.lucene.index.SegmentInfos: java.util.Iterator iterator()>();

     label04:
        $z6 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label05;

        $r31 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r48 = (org.apache.lucene.index.SegmentInfoPerCommit) $r31;

        $r33 = r0.<org.apache.lucene.index.IndexWriter: java.util.Map segmentsToMerge>;

        $r32 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke $r33.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r48, $r32);

        goto label04;

     label05:
        r0.<org.apache.lucene.index.IndexWriter: int mergeMaxNumSegments> = i0;

        $r5 = r0.<org.apache.lucene.index.IndexWriter: java.util.LinkedList pendingMerges>;

        $r6 = virtualinvoke $r5.<java.util.LinkedList: java.util.Iterator iterator()>();

     label06:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label07;

        $r27 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r49 = (org.apache.lucene.index.MergePolicy$OneMerge) $r27;

        r49.<org.apache.lucene.index.MergePolicy$OneMerge: int maxNumSegments> = i0;

        $r30 = r0.<org.apache.lucene.index.IndexWriter: java.util.Map segmentsToMerge>;

        $r29 = r49.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r28 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke $r30.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r29, $r28);

        goto label06;

     label07:
        $r7 = r0.<org.apache.lucene.index.IndexWriter: java.util.Set runningMerges>;

        $r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label08:
        $z2 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label09;

        $r23 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r50 = (org.apache.lucene.index.MergePolicy$OneMerge) $r23;

        r50.<org.apache.lucene.index.MergePolicy$OneMerge: int maxNumSegments> = i0;

        $r26 = r0.<org.apache.lucene.index.IndexWriter: java.util.Map segmentsToMerge>;

        $r25 = r50.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r24 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke $r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r25, $r24);

        goto label08;

     label09:
        exitmonitor r0;

     label10:
        goto label13;

     label11:
        $r47 := @caughtexception;

        exitmonitor r0;

     label12:
        throw $r47;

     label13:
        $r9 = <org.apache.lucene.index.MergePolicy$MergeTrigger: org.apache.lucene.index.MergePolicy$MergeTrigger EXPLICIT>;

        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void maybeMerge(org.apache.lucene.index.MergePolicy$MergeTrigger,int)>($r9, i0);

        if z3 == 0 goto label25;

        entermonitor r0;

     label14:
        $z4 = r0.<org.apache.lucene.index.IndexWriter: boolean hitOOM>;

        if $z4 == 0 goto label15;

        $r55 = new java.lang.IllegalStateException;

        specialinvoke $r55.<java.lang.IllegalStateException: void <init>(java.lang.String)>("this writer hit an OutOfMemoryError; cannot complete forceMerge");

        throw $r55;

     label15:
        $r10 = r0.<org.apache.lucene.index.IndexWriter: java.util.List mergeExceptions>;

        $i1 = interfaceinvoke $r10.<java.util.List: int size()>();

        if $i1 <= 0 goto label19;

        $r11 = r0.<org.apache.lucene.index.IndexWriter: java.util.List mergeExceptions>;

        $i2 = interfaceinvoke $r11.<java.util.List: int size()>();

        i4 = 0;

     label16:
        if i4 >= $i2 goto label19;

        $r12 = r0.<org.apache.lucene.index.IndexWriter: java.util.List mergeExceptions>;

        $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(i4);

        r51 = (org.apache.lucene.index.MergePolicy$OneMerge) $r13;

        $i3 = r51.<org.apache.lucene.index.MergePolicy$OneMerge: int maxNumSegments>;

        $i6 = (int) -1;

        if $i3 == $i6 goto label18;

        $r57 = new java.io.IOException;

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("background merge hit exception: ");

        $r17 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory directory>;

        $r18 = virtualinvoke r51.<org.apache.lucene.index.MergePolicy$OneMerge: java.lang.String segString(org.apache.lucene.store.Directory)>($r17);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r57.<java.io.IOException: void <init>(java.lang.String)>($r20);

        $r21 = virtualinvoke r51.<org.apache.lucene.index.MergePolicy$OneMerge: java.lang.Throwable getException()>();

        if $r21 == null goto label17;

        virtualinvoke $r57.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>($r21);

     label17:
        throw $r57;

     label18:
        i4 = i4 + 1;

        goto label16;

     label19:
        $z5 = specialinvoke r0.<org.apache.lucene.index.IndexWriter: boolean maxNumSegmentsMergesPending()>();

        if $z5 == 0 goto label20;

        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void doWait()>();

        goto label14;

     label20:
        exitmonitor r0;

     label21:
        goto label24;

     label22:
        $r46 := @caughtexception;

        exitmonitor r0;

     label23:
        throw $r46;

     label24:
        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void ensureOpen()>();

     label25:
        return;

        catch java.lang.Throwable from label03 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
        catch java.lang.Throwable from label14 to label21 with label22;
        catch java.lang.Throwable from label22 to label23 with label22;
    }

    private synchronized boolean maxNumSegmentsMergesPending()
    {
        java.util.Iterator $r2, $r4;
        java.util.Set $r3;
        org.apache.lucene.index.IndexWriter r0;
        org.apache.lucene.index.MergePolicy$OneMerge r7, r8;
        int $i0, $i1, $i3, $i5;
        java.lang.Object $r5, $r6;
        java.util.LinkedList $r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        $r1 = r0.<org.apache.lucene.index.IndexWriter: java.util.LinkedList pendingMerges>;

        $r2 = virtualinvoke $r1.<java.util.LinkedList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.lucene.index.MergePolicy$OneMerge) $r6;

        $i1 = r7.<org.apache.lucene.index.MergePolicy$OneMerge: int maxNumSegments>;

        $i3 = (int) -1;

        if $i1 == $i3 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        $r3 = r0.<org.apache.lucene.index.IndexWriter: java.util.Set runningMerges>;

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.lucene.index.MergePolicy$OneMerge) $r5;

        $i0 = r8.<org.apache.lucene.index.MergePolicy$OneMerge: int maxNumSegments>;

        $i5 = (int) -1;

        if $i0 == $i5 goto label5;

        return 1;

     label5:
        goto label4;

     label6:
        return 0;
    }

    public void forceMergeDeletes(boolean) throws java.io.IOException
    {
        java.lang.IllegalStateException $r19;
        org.apache.lucene.index.MergeScheduler $r5;
        org.apache.lucene.index.MergePolicy $r3;
        org.apache.lucene.store.Directory $r14;
        boolean $z0, z1, $z2, $z3, $z4, z5, z6, z7;
        java.util.Set $r18;
        org.apache.lucene.index.SegmentInfos $r2;
        org.apache.lucene.index.IndexWriter r0;
        java.util.List $r6, $r7, $r20, $r21;
        org.apache.lucene.util.InfoStream $r1, $r25;
        java.lang.StringBuilder $r12, $r13, $r16, $r24, $r26, $r28;
        java.lang.Throwable $r30, $r31, $r32;
        int $i0, $i1, i2, i3;
        java.lang.String $r15, $r17, $r27, $r29;
        java.util.LinkedList $r10;
        org.apache.lucene.index.MergePolicy$MergeSpecification $r4;
        java.io.IOException $r11;
        org.apache.lucene.index.MergePolicy$OneMerge r9, $r23;
        java.lang.Object $r8, $r22;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        z1 := @parameter0: boolean;

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void ensureOpen()>();

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void flush(boolean,boolean)>(1, 1);

        $r1 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z0 = virtualinvoke $r1.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z0 == 0 goto label01;

        $r25 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("forceMergeDeletes: index now ");

        $r27 = virtualinvoke r0.<org.apache.lucene.index.IndexWriter: java.lang.String segString()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r25.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", $r29);

     label01:
        entermonitor r0;

     label02:
        $r3 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.MergePolicy mergePolicy>;

        $r2 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $r4 = virtualinvoke $r3.<org.apache.lucene.index.MergePolicy: org.apache.lucene.index.MergePolicy$MergeSpecification findForcedDeletesMerges(org.apache.lucene.index.SegmentInfos)>($r2);

        if $r4 == null goto label04;

        $r20 = $r4.<org.apache.lucene.index.MergePolicy$MergeSpecification: java.util.List merges>;

        $i1 = interfaceinvoke $r20.<java.util.List: int size()>();

        i2 = 0;

     label03:
        if i2 >= $i1 goto label04;

        $r21 = $r4.<org.apache.lucene.index.MergePolicy$MergeSpecification: java.util.List merges>;

        $r22 = interfaceinvoke $r21.<java.util.List: java.lang.Object get(int)>(i2);

        $r23 = (org.apache.lucene.index.MergePolicy$OneMerge) $r22;

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: boolean registerMerge(org.apache.lucene.index.MergePolicy$OneMerge)>($r23);

        i2 = i2 + 1;

        goto label03;

     label04:
        exitmonitor r0;

     label05:
        goto label08;

     label06:
        $r31 := @caughtexception;

        exitmonitor r0;

     label07:
        throw $r31;

     label08:
        $r5 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.MergeScheduler mergeScheduler>;

        virtualinvoke $r5.<org.apache.lucene.index.MergeScheduler: void merge(org.apache.lucene.index.IndexWriter)>(r0);

        if $r4 == null goto label21;

        if z1 == 0 goto label21;

        $r6 = $r4.<org.apache.lucene.index.MergePolicy$MergeSpecification: java.util.List merges>;

        $i0 = interfaceinvoke $r6.<java.util.List: int size()>();

        entermonitor r0;

     label09:
        z5 = 1;

        z6 = 1;

     label10:
        if z6 == 0 goto label17;

        $z2 = r0.<org.apache.lucene.index.IndexWriter: boolean hitOOM>;

        if $z2 == 0 goto label11;

        $r19 = new java.lang.IllegalStateException;

        specialinvoke $r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>("this writer hit an OutOfMemoryError; cannot complete forceMergeDeletes");

        throw $r19;

     label11:
        z5 = 0;

        z7 = 0;

        z6 = 0;

        i3 = 0;

     label12:
        if i3 >= $i0 goto label16;

        $r7 = $r4.<org.apache.lucene.index.MergePolicy$MergeSpecification: java.util.List merges>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(i3);

        r9 = (org.apache.lucene.index.MergePolicy$OneMerge) $r8;

        $r10 = r0.<org.apache.lucene.index.IndexWriter: java.util.LinkedList pendingMerges>;

        $z3 = virtualinvoke $r10.<java.util.LinkedList: boolean contains(java.lang.Object)>(r9);

        if $z3 != 0 goto label13;

        $r18 = r0.<org.apache.lucene.index.IndexWriter: java.util.Set runningMerges>;

        $z4 = interfaceinvoke $r18.<java.util.Set: boolean contains(java.lang.Object)>(r9);

        if $z4 == 0 goto label14;

     label13:
        z5 = 1;

        z7 = 1;

        z6 = 1;

     label14:
        $r32 = virtualinvoke r9.<org.apache.lucene.index.MergePolicy$OneMerge: java.lang.Throwable getException()>();

        if $r32 == null goto label15;

        $r11 = new java.io.IOException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("background merge hit exception: ");

        $r14 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory directory>;

        $r15 = virtualinvoke r9.<org.apache.lucene.index.MergePolicy$OneMerge: java.lang.String segString(org.apache.lucene.store.Directory)>($r14);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>($r17);

        virtualinvoke $r11.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>($r32);

        throw $r11;

     label15:
        i3 = i3 + 1;

        goto label12;

     label16:
        if z7 == 0 goto label10;

        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void doWait()>();

        goto label10;

     label17:
        exitmonitor r0;

     label18:
        goto label21;

     label19:
        $r30 := @caughtexception;

        exitmonitor r0;

     label20:
        throw $r30;

     label21:
        return;

        catch java.lang.Throwable from label02 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label09 to label18 with label19;
        catch java.lang.Throwable from label19 to label20 with label19;
    }

    public void forceMergeDeletes() throws java.io.IOException
    {
        org.apache.lucene.index.IndexWriter r0;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void forceMergeDeletes(boolean)>(1);

        return;
    }

    public final void maybeMerge() throws java.io.IOException
    {
        int $i1;
        org.apache.lucene.index.IndexWriter r0;
        org.apache.lucene.index.MergePolicy$MergeTrigger $r1;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        $r1 = <org.apache.lucene.index.MergePolicy$MergeTrigger: org.apache.lucene.index.MergePolicy$MergeTrigger EXPLICIT>;

        $i1 = (int) -1;

        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void maybeMerge(org.apache.lucene.index.MergePolicy$MergeTrigger,int)>($r1, $i1);

        return;
    }

    private final void maybeMerge(org.apache.lucene.index.MergePolicy$MergeTrigger, int) throws java.io.IOException
    {
        org.apache.lucene.index.IndexWriter r0;
        org.apache.lucene.index.MergePolicy$MergeTrigger r1;
        org.apache.lucene.index.MergeScheduler $r2;
        int i0;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        r1 := @parameter0: org.apache.lucene.index.MergePolicy$MergeTrigger;

        i0 := @parameter1: int;

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void ensureOpen(boolean)>(0);

        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void updatePendingMerges(org.apache.lucene.index.MergePolicy$MergeTrigger,int)>(r1, i0);

        $r2 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.MergeScheduler mergeScheduler>;

        virtualinvoke $r2.<org.apache.lucene.index.MergeScheduler: void merge(org.apache.lucene.index.IndexWriter)>(r0);

        return;
    }

    private synchronized void updatePendingMerges(org.apache.lucene.index.MergePolicy$MergeTrigger, int) throws java.io.IOException
    {
        org.apache.lucene.index.MergePolicy $r3, $r22;
        java.util.Map $r24, $r25;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.lucene.index.SegmentInfos $r2, $r23;
        org.apache.lucene.index.IndexWriter r0;
        java.util.List $r4, $r5, $r8, $r9;
        java.lang.StringBuilder $r16, $r18, $r30;
        java.lang.AssertionError $r28, $r29, $r31;
        int i0, $i1, $i2, i3, i4, $i6, $i8;
        java.lang.String $r17, $r19;
        org.apache.lucene.index.MergePolicy$MergeTrigger r1, $r12, $r13;
        org.apache.lucene.index.MergePolicy$MergeSpecification $r26, r27;
        org.apache.lucene.index.MergePolicy$OneMerge $r7, r11;
        java.lang.Object $r6, $r10;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        r1 := @parameter0: org.apache.lucene.index.MergePolicy$MergeTrigger;

        i0 := @parameter1: int;

        $z0 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $i6 = (int) -1;

        if i0 == $i6 goto label01;

        if i0 > 0 goto label01;

        $r28 = new java.lang.AssertionError;

        specialinvoke $r28.<java.lang.AssertionError: void <init>()>();

        throw $r28;

     label01:
        $z4 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z4 != 0 goto label02;

        if r1 != null goto label02;

        $r29 = new java.lang.AssertionError;

        specialinvoke $r29.<java.lang.AssertionError: void <init>()>();

        throw $r29;

     label02:
        $z1 = r0.<org.apache.lucene.index.IndexWriter: boolean stopMerges>;

        if $z1 == 0 goto label03;

        return;

     label03:
        $z2 = r0.<org.apache.lucene.index.IndexWriter: boolean hitOOM>;

        if $z2 == 0 goto label04;

        return;

     label04:
        $i8 = (int) -1;

        if i0 == $i8 goto label08;

        $z3 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z3 != 0 goto label05;

        $r12 = <org.apache.lucene.index.MergePolicy$MergeTrigger: org.apache.lucene.index.MergePolicy$MergeTrigger EXPLICIT>;

        if r1 == $r12 goto label05;

        $r13 = <org.apache.lucene.index.MergePolicy$MergeTrigger: org.apache.lucene.index.MergePolicy$MergeTrigger MERGE_FINISHED>;

        if r1 == $r13 goto label05;

        $r31 = new java.lang.AssertionError;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected EXPLICT or MERGE_FINISHED as trigger even with maxNumSegments set but was: ");

        $r17 = virtualinvoke r1.<org.apache.lucene.index.MergePolicy$MergeTrigger: java.lang.String name()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r31.<java.lang.AssertionError: void <init>(java.lang.Object)>($r19);

        throw $r31;

     label05:
        $r22 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.MergePolicy mergePolicy>;

        $r23 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $r24 = r0.<org.apache.lucene.index.IndexWriter: java.util.Map segmentsToMerge>;

        $r25 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r24);

        $r26 = virtualinvoke $r22.<org.apache.lucene.index.MergePolicy: org.apache.lucene.index.MergePolicy$MergeSpecification findForcedMerges(org.apache.lucene.index.SegmentInfos,int,java.util.Map)>($r23, i0, $r25);

        r27 = $r26;

        if $r26 == null goto label09;

        $r8 = $r26.<org.apache.lucene.index.MergePolicy$MergeSpecification: java.util.List merges>;

        $i2 = interfaceinvoke $r8.<java.util.List: int size()>();

        i3 = 0;

     label06:
        if i3 >= $i2 goto label07;

        $r9 = $r26.<org.apache.lucene.index.MergePolicy$MergeSpecification: java.util.List merges>;

        $r10 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(i3);

        r11 = (org.apache.lucene.index.MergePolicy$OneMerge) $r10;

        r11.<org.apache.lucene.index.MergePolicy$OneMerge: int maxNumSegments> = i0;

        i3 = i3 + 1;

        goto label06;

     label07:
        goto label09;

     label08:
        $r3 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.MergePolicy mergePolicy>;

        $r2 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        r27 = virtualinvoke $r3.<org.apache.lucene.index.MergePolicy: org.apache.lucene.index.MergePolicy$MergeSpecification findMerges(org.apache.lucene.index.MergePolicy$MergeTrigger,org.apache.lucene.index.SegmentInfos)>(r1, $r2);

     label09:
        if r27 == null goto label11;

        $r4 = r27.<org.apache.lucene.index.MergePolicy$MergeSpecification: java.util.List merges>;

        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        i4 = 0;

     label10:
        if i4 >= $i1 goto label11;

        $r5 = r27.<org.apache.lucene.index.MergePolicy$MergeSpecification: java.util.List merges>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i4);

        $r7 = (org.apache.lucene.index.MergePolicy$OneMerge) $r6;

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: boolean registerMerge(org.apache.lucene.index.MergePolicy$OneMerge)>($r7);

        i4 = i4 + 1;

        goto label10;

     label11:
        return;
    }

    public synchronized java.util.Collection getMergingSegments()
    {
        java.util.HashSet $r1;
        org.apache.lucene.index.IndexWriter r0;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        $r1 = r0.<org.apache.lucene.index.IndexWriter: java.util.HashSet mergingSegments>;

        return $r1;
    }

    public synchronized org.apache.lucene.index.MergePolicy$OneMerge getNextMerge()
    {
        org.apache.lucene.index.IndexWriter r0;
        org.apache.lucene.index.MergePolicy$OneMerge r4;
        int $i0;
        java.util.Set $r5;
        java.lang.Object $r3;
        java.util.LinkedList $r1, $r2;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        $r1 = r0.<org.apache.lucene.index.IndexWriter: java.util.LinkedList pendingMerges>;

        $i0 = virtualinvoke $r1.<java.util.LinkedList: int size()>();

        if $i0 != 0 goto label1;

        return null;

     label1:
        $r2 = r0.<org.apache.lucene.index.IndexWriter: java.util.LinkedList pendingMerges>;

        $r3 = virtualinvoke $r2.<java.util.LinkedList: java.lang.Object removeFirst()>();

        r4 = (org.apache.lucene.index.MergePolicy$OneMerge) $r3;

        $r5 = r0.<org.apache.lucene.index.IndexWriter: java.util.Set runningMerges>;

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>(r4);

        return r4;
    }

    public synchronized boolean hasPendingMerges()
    {
        org.apache.lucene.index.IndexWriter r0;
        int $i0;
        java.util.LinkedList $r1;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        $r1 = r0.<org.apache.lucene.index.IndexWriter: java.util.LinkedList pendingMerges>;

        $i0 = virtualinvoke $r1.<java.util.LinkedList: int size()>();

        if $i0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void rollback() throws java.io.IOException
    {
        java.lang.Throwable $r2;
        org.apache.lucene.index.IndexWriter r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void ensureOpen()>();

        $r1 = r0.<org.apache.lucene.index.IndexWriter: java.lang.Object commitLock>;

        entermonitor $r1;

     label1:
        $z0 = specialinvoke r0.<org.apache.lucene.index.IndexWriter: boolean shouldClose()>();

        if $z0 == 0 goto label2;

        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void rollbackInternal()>();

     label2:
        exitmonitor $r1;

     label3:
        goto label6;

     label4:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void rollbackInternal() throws java.io.IOException
    {
        org.apache.lucene.index.IndexFileDeleter $r14, $r15, $r29;
        org.apache.lucene.index.DocumentsWriter $r6, $r7;
        org.apache.lucene.index.MergeScheduler $r4;
        org.apache.lucene.index.MergePolicy $r3;
        org.apache.lucene.store.Directory $r26;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.apache.lucene.index.SegmentInfos $r8, $r11, $r13, $r22, $r27, $r28;
        org.apache.lucene.index.IndexWriter r0;
        java.util.List $r10;
        org.apache.lucene.util.InfoStream $r1, $r2, $r12, $r16, $r17, $r20, $r30, $r31, $r34, $r35, $r38, $r39;
        java.lang.StringBuilder $r19, $r21, $r24;
        java.lang.Throwable $r32, $r33, $r36, $r40, $r41, $r42;
        long $l0;
        java.lang.AssertionError $r18;
        java.lang.String $r23, $r25;
        org.apache.lucene.index.BufferedDeletesStream $r5;
        org.apache.lucene.index.IndexWriter$ReaderPool $r9;
        java.lang.OutOfMemoryError $r37;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        $r1 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z0 = virtualinvoke $r1.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z0 == 0 goto label01;

        $r31 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r31.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "rollback");

     label01:
        entermonitor r0;

     label02:
        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void finishMerges(boolean)>(0);

        r0.<org.apache.lucene.index.IndexWriter: boolean stopMerges> = 1;

        exitmonitor r0;

     label03:
        goto label06;

     label04:
        $r42 := @caughtexception;

        exitmonitor r0;

     label05:
        throw $r42;

     label06:
        $r2 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z1 = virtualinvoke $r2.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z1 == 0 goto label07;

        $r30 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r30.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "rollback: done finish merges");

     label07:
        $r3 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.MergePolicy mergePolicy>;

        virtualinvoke $r3.<org.apache.lucene.index.MergePolicy: void close()>();

        $r4 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.MergeScheduler mergeScheduler>;

        virtualinvoke $r4.<org.apache.lucene.index.MergeScheduler: void close()>();

        $r5 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.BufferedDeletesStream bufferedDeletesStream>;

        virtualinvoke $r5.<org.apache.lucene.index.BufferedDeletesStream: void clear()>();

        $r6 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.DocumentsWriter docWriter>;

        virtualinvoke $r6.<org.apache.lucene.index.DocumentsWriter: void close()>();

        $r7 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.DocumentsWriter docWriter>;

        virtualinvoke $r7.<org.apache.lucene.index.DocumentsWriter: void abort()>();

        entermonitor r0;

     label08:
        $r8 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos pendingCommit>;

        if $r8 == null goto label09;

        $r27 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos pendingCommit>;

        $r26 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory directory>;

        virtualinvoke $r27.<org.apache.lucene.index.SegmentInfos: void rollbackCommit(org.apache.lucene.store.Directory)>($r26);

        $r29 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        $r28 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos pendingCommit>;

        virtualinvoke $r29.<org.apache.lucene.index.IndexFileDeleter: void decRef(org.apache.lucene.index.SegmentInfos)>($r28);

        r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos pendingCommit> = null;

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

     label09:
        $r9 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexWriter$ReaderPool readerPool>;

        virtualinvoke $r9.<org.apache.lucene.index.IndexWriter$ReaderPool: void dropAll(boolean)>(0);

        $r11 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $r10 = r0.<org.apache.lucene.index.IndexWriter: java.util.List rollbackSegments>;

        virtualinvoke $r11.<org.apache.lucene.index.SegmentInfos: void rollbackSegmentInfos(java.util.List)>($r10);

        $r12 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z2 = virtualinvoke $r12.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z2 == 0 goto label10;

        $r20 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("rollback: infos=");

        $r22 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $r23 = virtualinvoke r0.<org.apache.lucene.index.IndexWriter: java.lang.String segString(java.lang.Iterable)>($r22);

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r20.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", $r25);

     label10:
        $z3 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z3 != 0 goto label11;

        $z5 = virtualinvoke r0.<org.apache.lucene.index.IndexWriter: boolean testPoint(java.lang.String)>("rollback before checkpoint");

        if $z5 != 0 goto label11;

        $r18 = new java.lang.AssertionError;

        specialinvoke $r18.<java.lang.AssertionError: void <init>()>();

        throw $r18;

     label11:
        $r14 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        $r13 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        virtualinvoke $r14.<org.apache.lucene.index.IndexFileDeleter: void checkpoint(org.apache.lucene.index.SegmentInfos,boolean)>($r13, 0);

        $r15 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        virtualinvoke $r15.<org.apache.lucene.index.IndexFileDeleter: void refresh()>();

        $l0 = r0.<org.apache.lucene.index.IndexWriter: long changeCount>;

        r0.<org.apache.lucene.index.IndexWriter: long lastCommitChangeCount> = $l0;

        exitmonitor r0;

     label12:
        goto label15;

     label13:
        $r41 := @caughtexception;

        exitmonitor r0;

     label14:
        throw $r41;

     label15:
        entermonitor r0;

     label16:
        if 1 != 0 goto label17;

        r0.<org.apache.lucene.index.IndexWriter: boolean closing> = 0;

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        $r16 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z4 = virtualinvoke $r16.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z4 == 0 goto label17;

        $r17 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r17.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "hit exception during rollback");

     label17:
        exitmonitor r0;

     label18:
        goto label21;

     label19:
        $r40 := @caughtexception;

        exitmonitor r0;

     label20:
        throw $r40;

     label21:
        goto label38;

     label22:
        $r37 := @caughtexception;

        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void handleOOM(java.lang.OutOfMemoryError,java.lang.String)>($r37, "rollbackInternal");

     label23:
        entermonitor r0;

     label24:
        if 0 != 0 goto label25;

        r0.<org.apache.lucene.index.IndexWriter: boolean closing> = 0;

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        $r38 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z7 = virtualinvoke $r38.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z7 == 0 goto label25;

        $r39 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r39.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "hit exception during rollback");

     label25:
        exitmonitor r0;

     label26:
        goto label29;

     label27:
        $r36 := @caughtexception;

        exitmonitor r0;

     label28:
        throw $r36;

     label29:
        goto label38;

     label30:
        $r33 := @caughtexception;

     label31:
        entermonitor r0;

     label32:
        if 0 != 0 goto label33;

        r0.<org.apache.lucene.index.IndexWriter: boolean closing> = 0;

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        $r34 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z6 = virtualinvoke $r34.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z6 == 0 goto label33;

        $r35 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r35.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "hit exception during rollback");

     label33:
        exitmonitor r0;

     label34:
        goto label37;

     label35:
        $r32 := @caughtexception;

        exitmonitor r0;

     label36:
        throw $r32;

     label37:
        throw $r33;

     label38:
        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void closeInternal(boolean,boolean)>(0, 0);

        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label08 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
        catch java.lang.Throwable from label16 to label18 with label19;
        catch java.lang.Throwable from label19 to label20 with label19;
        catch java.lang.OutOfMemoryError from label01 to label15 with label22;
        catch java.lang.Throwable from label24 to label26 with label27;
        catch java.lang.Throwable from label27 to label28 with label27;
        catch java.lang.Throwable from label01 to label15 with label30;
        catch java.lang.Throwable from label22 to label23 with label30;
        catch java.lang.Throwable from label32 to label34 with label35;
        catch java.lang.Throwable from label35 to label36 with label35;
        catch java.lang.Throwable from label30 to label31 with label30;
    }

    public void deleteAll() throws java.io.IOException
    {
        java.lang.Throwable $r12, $r13, $r15, $r16;
        long $l0, $l1;
        org.apache.lucene.index.IndexFileDeleter $r5;
        org.apache.lucene.index.DocumentsWriter $r2, $r9, $r14;
        org.apache.lucene.index.FieldInfos$FieldNumbers $r8;
        boolean $z0, $z1, $z2;
        org.apache.lucene.index.SegmentInfos $r3, $r4, $r7;
        org.apache.lucene.index.IndexWriter r0;
        org.apache.lucene.util.InfoStream $r10, $r11, $r17, $r18, $r20, $r21;
        org.apache.lucene.index.IndexWriter$ReaderPool $r6;
        java.lang.Object $r1;
        java.lang.OutOfMemoryError $r19;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void ensureOpen()>();

        $r1 = r0.<org.apache.lucene.index.IndexWriter: java.lang.Object fullFlushLock>;

        entermonitor $r1;

     label01:
        $r2 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.DocumentsWriter docWriter>;

        virtualinvoke $r2.<org.apache.lucene.index.DocumentsWriter: void lockAndAbortAll()>();

        entermonitor r0;

     label02:
        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void finishMerges(boolean)>(0);

        $r3 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        virtualinvoke $r3.<org.apache.lucene.index.SegmentInfos: void clear()>();

        $r5 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        $r4 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        virtualinvoke $r5.<org.apache.lucene.index.IndexFileDeleter: void checkpoint(org.apache.lucene.index.SegmentInfos,boolean)>($r4, 0);

        $r6 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexWriter$ReaderPool readerPool>;

        virtualinvoke $r6.<org.apache.lucene.index.IndexWriter$ReaderPool: void dropAll(boolean)>(0);

        $l0 = r0.<org.apache.lucene.index.IndexWriter: long changeCount>;

        $l1 = $l0 + 1L;

        r0.<org.apache.lucene.index.IndexWriter: long changeCount> = $l1;

        $r7 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        virtualinvoke $r7.<org.apache.lucene.index.SegmentInfos: void changed()>();

        $r8 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.FieldInfos$FieldNumbers globalFieldNumberMap>;

        virtualinvoke $r8.<org.apache.lucene.index.FieldInfos$FieldNumbers: void clear()>();

     label03:
        if 1 != 0 goto label09;

        $r10 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z0 = virtualinvoke $r10.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z0 == 0 goto label09;

        $r11 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r11.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "hit exception during deleteAll");

        goto label09;

     label04:
        $r19 := @caughtexception;

        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void handleOOM(java.lang.OutOfMemoryError,java.lang.String)>($r19, "deleteAll");

     label05:
        if 0 != 0 goto label09;

        $r20 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z2 = virtualinvoke $r20.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z2 == 0 goto label09;

        $r21 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r21.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "hit exception during deleteAll");

        goto label09;

     label06:
        $r16 := @caughtexception;

     label07:
        if 0 != 0 goto label08;

        $r17 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z1 = virtualinvoke $r17.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z1 == 0 goto label08;

        $r18 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r18.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "hit exception during deleteAll");

     label08:
        throw $r16;

     label09:
        exitmonitor r0;

     label10:
        goto label13;

     label11:
        $r15 := @caughtexception;

        exitmonitor r0;

     label12:
        throw $r15;

     label13:
        $r9 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.DocumentsWriter docWriter>;

        virtualinvoke $r9.<org.apache.lucene.index.DocumentsWriter: void unlockAllAfterAbortAll()>();

        goto label16;

     label14:
        $r13 := @caughtexception;

     label15:
        $r14 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.DocumentsWriter docWriter>;

        virtualinvoke $r14.<org.apache.lucene.index.DocumentsWriter: void unlockAllAfterAbortAll()>();

        throw $r13;

     label16:
        exitmonitor $r1;

     label17:
        goto label20;

     label18:
        $r12 := @caughtexception;

        exitmonitor $r1;

     label19:
        throw $r12;

     label20:
        return;

        catch java.lang.OutOfMemoryError from label02 to label03 with label04;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label02 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
        catch java.lang.Throwable from label01 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
        catch java.lang.Throwable from label01 to label17 with label18;
        catch java.lang.Throwable from label18 to label19 with label18;
    }

    private synchronized void finishMerges(boolean)
    {
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.util.Set $r4, $r6, $r15;
        org.apache.lucene.index.IndexWriter r0;
        java.util.List $r24, $r33;
        org.apache.lucene.util.InfoStream $r7, $r8, $r11, $r13, $r20, $r22, $r29, $r31;
        java.lang.StringBuilder $r12, $r14, $r16, $r17, $r21, $r23, $r26, $r30, $r32, $r35;
        java.lang.AssertionError $r10;
        java.util.HashSet $r9;
        int $i0, $i1, $i2;
        java.lang.String $r18, $r25, $r27, $r34, $r36;
        java.util.LinkedList $r1, $r3;
        java.util.Iterator $r2, $r5;
        org.apache.lucene.index.MergePolicy$OneMerge r37, r38;
        java.lang.Object $r19, $r28;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label10;

        r0.<org.apache.lucene.index.IndexWriter: boolean stopMerges> = 1;

        $r1 = r0.<org.apache.lucene.index.IndexWriter: java.util.LinkedList pendingMerges>;

        $r2 = virtualinvoke $r1.<java.util.LinkedList: java.util.Iterator iterator()>();

     label01:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label03;

        $r28 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r37 = (org.apache.lucene.index.MergePolicy$OneMerge) $r28;

        $r29 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z7 = virtualinvoke $r29.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z7 == 0 goto label02;

        $r31 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("now abort pending merge ");

        $r33 = r37.<org.apache.lucene.index.MergePolicy$OneMerge: java.util.List segments>;

        $r34 = virtualinvoke r0.<org.apache.lucene.index.IndexWriter: java.lang.String segString(java.lang.Iterable)>($r33);

        $r35 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r31.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", $r36);

     label02:
        virtualinvoke r37.<org.apache.lucene.index.MergePolicy$OneMerge: void abort()>();

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void mergeFinish(org.apache.lucene.index.MergePolicy$OneMerge)>(r37);

        goto label01;

     label03:
        $r3 = r0.<org.apache.lucene.index.IndexWriter: java.util.LinkedList pendingMerges>;

        virtualinvoke $r3.<java.util.LinkedList: void clear()>();

        $r4 = r0.<org.apache.lucene.index.IndexWriter: java.util.Set runningMerges>;

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label04:
        $z2 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label06;

        $r19 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r38 = (org.apache.lucene.index.MergePolicy$OneMerge) $r19;

        $r20 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z6 = virtualinvoke $r20.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z6 == 0 goto label05;

        $r22 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("now abort running merge ");

        $r24 = r38.<org.apache.lucene.index.MergePolicy$OneMerge: java.util.List segments>;

        $r25 = virtualinvoke r0.<org.apache.lucene.index.IndexWriter: java.lang.String segString(java.lang.Iterable)>($r24);

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r22.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", $r27);

     label05:
        virtualinvoke r38.<org.apache.lucene.index.MergePolicy$OneMerge: void abort()>();

        goto label04;

     label06:
        $r6 = r0.<org.apache.lucene.index.IndexWriter: java.util.Set runningMerges>;

        $i0 = interfaceinvoke $r6.<java.util.Set: int size()>();

        if $i0 <= 0 goto label08;

        $r11 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z5 = virtualinvoke $r11.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z5 == 0 goto label07;

        $r13 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("now wait for ");

        $r15 = r0.<org.apache.lucene.index.IndexWriter: java.util.Set runningMerges>;

        $i2 = interfaceinvoke $r15.<java.util.Set: int size()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" running merge/s to abort");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r13.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", $r18);

     label07:
        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void doWait()>();

        goto label06;

     label08:
        r0.<org.apache.lucene.index.IndexWriter: boolean stopMerges> = 0;

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        $z3 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z3 != 0 goto label09;

        $r9 = r0.<org.apache.lucene.index.IndexWriter: java.util.HashSet mergingSegments>;

        $i1 = virtualinvoke $r9.<java.util.HashSet: int size()>();

        if 0 == $i1 goto label09;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label09:
        $r7 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z4 = virtualinvoke $r7.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z4 == 0 goto label11;

        $r8 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r8.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "all running merges have aborted");

        goto label11;

     label10:
        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void waitForMerges()>();

     label11:
        return;
    }

    public synchronized void waitForMerges()
    {
        java.util.Set $r2;
        java.lang.AssertionError $r6;
        java.util.HashSet $r5;
        org.apache.lucene.index.IndexWriter r0;
        org.apache.lucene.util.InfoStream $r1, $r3, $r4, $r7;
        int $i0, $i1, $i2;
        java.util.LinkedList $r8;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void ensureOpen(boolean)>(0);

        $r1 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z0 = virtualinvoke $r1.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z0 == 0 goto label1;

        $r7 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r7.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "waitForMerges");

     label1:
        $r8 = r0.<org.apache.lucene.index.IndexWriter: java.util.LinkedList pendingMerges>;

        $i2 = virtualinvoke $r8.<java.util.LinkedList: int size()>();

        if $i2 > 0 goto label2;

        $r2 = r0.<org.apache.lucene.index.IndexWriter: java.util.Set runningMerges>;

        $i0 = interfaceinvoke $r2.<java.util.Set: int size()>();

        if $i0 <= 0 goto label3;

     label2:
        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void doWait()>();

        goto label1;

     label3:
        $z1 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z1 != 0 goto label4;

        $r5 = r0.<org.apache.lucene.index.IndexWriter: java.util.HashSet mergingSegments>;

        $i1 = virtualinvoke $r5.<java.util.HashSet: int size()>();

        if 0 == $i1 goto label4;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label4:
        $r3 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z2 = virtualinvoke $r3.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z2 == 0 goto label5;

        $r4 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r4.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "waitForMerges done");

     label5:
        return;
    }

    synchronized void checkpoint() throws java.io.IOException
    {
        org.apache.lucene.index.IndexWriter r0;
        org.apache.lucene.index.IndexFileDeleter $r2;
        org.apache.lucene.index.SegmentInfos $r1;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void changed()>();

        $r2 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        $r1 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        virtualinvoke $r2.<org.apache.lucene.index.IndexFileDeleter: void checkpoint(org.apache.lucene.index.SegmentInfos,boolean)>($r1, 0);

        return;
    }

    synchronized void changed()
    {
        org.apache.lucene.index.IndexWriter r0;
        long $l0, $l1;
        org.apache.lucene.index.SegmentInfos $r1;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        $l0 = r0.<org.apache.lucene.index.IndexWriter: long changeCount>;

        $l1 = $l0 + 1L;

        r0.<org.apache.lucene.index.IndexWriter: long changeCount> = $l1;

        $r1 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        virtualinvoke $r1.<org.apache.lucene.index.SegmentInfos: void changed()>();

        return;
    }

    synchronized void publishFrozenDeletes(org.apache.lucene.index.FrozenBufferedDeletes)
    {
        java.lang.Throwable $r5;
        java.lang.AssertionError $r4;
        org.apache.lucene.index.IndexWriter r0;
        org.apache.lucene.index.BufferedDeletesStream $r1, $r3;
        org.apache.lucene.index.FrozenBufferedDeletes r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        r2 := @parameter0: org.apache.lucene.index.FrozenBufferedDeletes;

        $z0 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if r2 == null goto label1;

        $z1 = virtualinvoke r2.<org.apache.lucene.index.FrozenBufferedDeletes: boolean any()>();

        if $z1 != 0 goto label2;

     label1:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        $r1 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.BufferedDeletesStream bufferedDeletesStream>;

        entermonitor $r1;

     label3:
        $r3 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.BufferedDeletesStream bufferedDeletesStream>;

        virtualinvoke $r3.<org.apache.lucene.index.BufferedDeletesStream: long push(org.apache.lucene.index.FrozenBufferedDeletes)>(r2);

        exitmonitor $r1;

     label4:
        goto label7;

     label5:
        $r5 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r5;

     label7:
        return;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    synchronized void publishFlushedSegment(org.apache.lucene.index.SegmentInfoPerCommit, org.apache.lucene.index.FrozenBufferedDeletes, org.apache.lucene.index.FrozenBufferedDeletes) throws java.io.IOException
    {
        java.lang.Throwable $r19;
        org.apache.lucene.index.SegmentInfoPerCommit r6;
        long l0;
        org.apache.lucene.index.FrozenBufferedDeletes r3, r4;
        java.lang.String $r13, $r15;
        boolean $z0, $z1, $z2, $z3;
        org.apache.lucene.index.SegmentInfos $r7;
        org.apache.lucene.index.IndexWriter r0;
        org.apache.lucene.index.BufferedDeletesStream $r1, $r5, $r16, $r17;
        org.apache.lucene.util.InfoStream $r2, $r9, $r18, $r20;
        java.lang.StringBuilder $r8, $r10, $r11, $r12, $r14;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        r6 := @parameter0: org.apache.lucene.index.SegmentInfoPerCommit;

        r4 := @parameter1: org.apache.lucene.index.FrozenBufferedDeletes;

        r3 := @parameter2: org.apache.lucene.index.FrozenBufferedDeletes;

        $r1 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.BufferedDeletesStream bufferedDeletesStream>;

        entermonitor $r1;

     label01:
        $r2 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z0 = virtualinvoke $r2.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z0 == 0 goto label02;

        $r18 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r18.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "publishFlushedSegment");

     label02:
        if r3 == null goto label03;

        $z2 = virtualinvoke r3.<org.apache.lucene.index.FrozenBufferedDeletes: boolean any()>();

        if $z2 == 0 goto label03;

        $r17 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.BufferedDeletesStream bufferedDeletesStream>;

        virtualinvoke $r17.<org.apache.lucene.index.BufferedDeletesStream: long push(org.apache.lucene.index.FrozenBufferedDeletes)>(r3);

     label03:
        if r4 == null goto label04;

        $z1 = virtualinvoke r4.<org.apache.lucene.index.FrozenBufferedDeletes: boolean any()>();

        if $z1 == 0 goto label04;

        $r16 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.BufferedDeletesStream bufferedDeletesStream>;

        l0 = virtualinvoke $r16.<org.apache.lucene.index.BufferedDeletesStream: long push(org.apache.lucene.index.FrozenBufferedDeletes)>(r4);

        goto label05;

     label04:
        $r5 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.BufferedDeletesStream bufferedDeletesStream>;

        l0 = virtualinvoke $r5.<org.apache.lucene.index.BufferedDeletesStream: long getNextGen()>();

     label05:
        $r20 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z3 = virtualinvoke $r20.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z3 == 0 goto label06;

        $r9 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("publish sets newSegment delGen=");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" seg=");

        $r13 = virtualinvoke r0.<org.apache.lucene.index.IndexWriter: java.lang.String segString(org.apache.lucene.index.SegmentInfoPerCommit)>(r6);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", $r15);

     label06:
        virtualinvoke r6.<org.apache.lucene.index.SegmentInfoPerCommit: void setBufferedDeletesGen(long)>(l0);

        $r7 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        virtualinvoke $r7.<org.apache.lucene.index.SegmentInfos: void add(org.apache.lucene.index.SegmentInfoPerCommit)>(r6);

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void checkpoint()>();

        exitmonitor $r1;

     label07:
        goto label10;

     label08:
        $r19 := @caughtexception;

        exitmonitor $r1;

     label09:
        throw $r19;

     label10:
        return;

        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    synchronized boolean useCompoundFile(org.apache.lucene.index.SegmentInfoPerCommit) throws java.io.IOException
    {
        org.apache.lucene.index.IndexWriter r0;
        org.apache.lucene.index.MergePolicy $r3;
        org.apache.lucene.index.SegmentInfoPerCommit r1;
        org.apache.lucene.index.SegmentInfos $r2;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        r1 := @parameter0: org.apache.lucene.index.SegmentInfoPerCommit;

        $r3 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.MergePolicy mergePolicy>;

        $r2 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $z0 = virtualinvoke $r3.<org.apache.lucene.index.MergePolicy: boolean useCompoundFile(org.apache.lucene.index.SegmentInfos,org.apache.lucene.index.SegmentInfoPerCommit)>($r2, r1);

        return $z0;
    }

    private synchronized void resetMergeExceptions()
    {
        org.apache.lucene.index.IndexWriter r0;
        long $l0, $l1;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.lucene.index.IndexWriter: java.util.List mergeExceptions> = $r1;

        $l0 = r0.<org.apache.lucene.index.IndexWriter: long mergeGen>;

        $l1 = $l0 + 1L;

        r0.<org.apache.lucene.index.IndexWriter: long mergeGen> = $l1;

        return;
    }

    private transient void noDupDirs(org.apache.lucene.store.Directory[])
    {
        org.apache.lucene.store.Directory[] r1;
        java.util.HashSet $r0;
        org.apache.lucene.store.Directory $r2, $r4, $r5, $r6, $r11;
        int $i0, i1;
        java.lang.String $r14;
        boolean $z0;
        java.lang.IllegalArgumentException $r7, $r8;
        org.apache.lucene.index.IndexWriter r3;
        java.lang.StringBuilder $r9, $r10, $r12, $r13;

        r3 := @this: org.apache.lucene.index.IndexWriter;

        r1 := @parameter0: org.apache.lucene.store.Directory[];

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        i1 = 0;

     label1:
        $i0 = lengthof r1;

        if i1 >= $i0 goto label4;

        $r2 = r1[i1];

        $z0 = virtualinvoke $r0.<java.util.HashSet: boolean contains(java.lang.Object)>($r2);

        if $z0 == 0 goto label2;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Directory ");

        $r11 = r1[i1];

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" appears more than once");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r8;

     label2:
        $r5 = r1[i1];

        $r4 = r3.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory directory>;

        if $r5 != $r4 goto label3;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot add directory to itself");

        throw $r7;

     label3:
        $r6 = r1[i1];

        virtualinvoke $r0.<java.util.HashSet: boolean add(java.lang.Object)>($r6);

        i1 = i1 + 1;

        goto label1;

     label4:
        return;
    }

    public transient void addIndexes(org.apache.lucene.store.Directory[]) throws java.io.IOException
    {
        org.apache.lucene.index.SegmentInfoPerCommit r24, $r33, r71, r82, r92, r94;
        org.apache.lucene.index.FieldInfos $r31;
        org.apache.lucene.store.IOContext $r106;
        org.apache.lucene.index.SegmentInfo $r29, $r30, $r42, $r53, $r57;
        org.apache.lucene.util.InfoStream $r2, $r17, $r26, $r40, $r62, $r66;
        java.lang.StringBuilder $r41, $r44, $r45, $r46, $r47, $r48, $r52, $r55, $r56, $r59, $r63, $r64, $r97, $r102, $r104;
        java.lang.Throwable $r68, $r69, $r77, $r79, $r80, $r88, $r90;
        long $l1;
        java.lang.AssertionError $r103;
        java.util.ArrayList $r96;
        org.apache.lucene.index.FieldInfos$FieldNumbers $r36;
        java.lang.String $r25, $r37, $r43, $r49, $r58, $r60, $r65, r75, r86, r93, r95;
        org.apache.lucene.index.FieldInfo r35;
        java.lang.OutOfMemoryError $r67;
        org.apache.lucene.store.Directory[] r1;
        org.apache.lucene.store.Directory $r10, $r16, $r54, $r76, $r87, r91;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        java.util.Collection $r7, $r13, $r72, $r83;
        org.apache.lucene.index.SegmentInfos $r4, $r98;
        org.apache.lucene.index.IndexWriter r0;
        java.util.HashMap $r100;
        java.util.HashSet $r99, $r101;
        org.apache.lucene.store.MergeInfo $r105;
        int $i0, $i2, $i3, i4, $i6;
        java.util.Iterator $r5, $r8, $r11, $r14, $r22, $r32, $r73, $r78, $r84, $r89;
        org.apache.lucene.index.FieldInfo$DocValuesType $r38;
        java.lang.Object $r6, $r9, $r12, $r15, $r23, $r34, $r70, $r74, $r81, $r85;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        r1 := @parameter0: org.apache.lucene.store.Directory[];

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void ensureOpen()>();

        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void noDupDirs(org.apache.lucene.store.Directory[])>(r1);

     label01:
        $r2 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z0 = virtualinvoke $r2.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z0 == 0 goto label02;

        $r66 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r66.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "flush at addIndexes(Directory...)");

     label02:
        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void flush(boolean,boolean)>(0, 1);

        $r96 = new java.util.ArrayList;

        specialinvoke $r96.<java.util.ArrayList: void <init>()>();

     label03:
        $i3 = lengthof r1;

        i4 = 0;

     label04:
        if i4 >= $i3 goto label12;

        r91 = r1[i4];

        $r17 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z5 = virtualinvoke $r17.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z5 == 0 goto label05;

        $r62 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r97 = new java.lang.StringBuilder;

        specialinvoke $r97.<java.lang.StringBuilder: void <init>()>();

        $r63 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("addIndexes: process directory ");

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r91);

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r62.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", $r65);

     label05:
        $r98 = new org.apache.lucene.index.SegmentInfos;

        specialinvoke $r98.<org.apache.lucene.index.SegmentInfos: void <init>()>();

        virtualinvoke $r98.<org.apache.lucene.index.SegmentInfos: void read(org.apache.lucene.store.Directory)>(r91);

        $r99 = new java.util.HashSet;

        specialinvoke $r99.<java.util.HashSet: void <init>()>();

        $r100 = new java.util.HashMap;

        specialinvoke $r100.<java.util.HashMap: void <init>()>();

        $r101 = new java.util.HashSet;

        specialinvoke $r101.<java.util.HashSet: void <init>()>();

        $r22 = virtualinvoke $r98.<org.apache.lucene.index.SegmentInfos: java.util.Iterator iterator()>();

     label06:
        $z13 = interfaceinvoke $r22.<java.util.Iterator: boolean hasNext()>();

        if $z13 == 0 goto label11;

        $r23 = interfaceinvoke $r22.<java.util.Iterator: java.lang.Object next()>();

        r24 = (org.apache.lucene.index.SegmentInfoPerCommit) $r23;

        $z6 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z6 != 0 goto label07;

        $z8 = interfaceinvoke $r96.<java.util.List: boolean contains(java.lang.Object)>(r24);

        if $z8 == 0 goto label07;

        $r103 = new java.lang.AssertionError;

        $r102 = new java.lang.StringBuilder;

        specialinvoke $r102.<java.lang.StringBuilder: void <init>()>();

        $r52 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dup info dir=");

        $r53 = r24.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $r54 = $r53.<org.apache.lucene.index.SegmentInfo: org.apache.lucene.store.Directory dir>;

        $r55 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r54);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" name=");

        $r57 = r24.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $r58 = $r57.<org.apache.lucene.index.SegmentInfo: java.lang.String name>;

        $r59 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r58);

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r103.<java.lang.AssertionError: void <init>(java.lang.Object)>($r60);

        throw $r103;

     label07:
        $r25 = virtualinvoke r0.<org.apache.lucene.index.IndexWriter: java.lang.String newSegmentName()>();

        $r26 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z7 = virtualinvoke $r26.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z7 == 0 goto label08;

        $r40 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r104 = new java.lang.StringBuilder;

        specialinvoke $r104.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r104.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("addIndexes: process segment origName=");

        $r42 = r24.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $r43 = $r42.<org.apache.lucene.index.SegmentInfo: java.lang.String name>;

        $r44 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" newName=");

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" info=");

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r24);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r40.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", $r49);

     label08:
        $r106 = new org.apache.lucene.store.IOContext;

        $r105 = new org.apache.lucene.store.MergeInfo;

        $r29 = r24.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $i0 = virtualinvoke $r29.<org.apache.lucene.index.SegmentInfo: int getDocCount()>();

        $l1 = virtualinvoke r24.<org.apache.lucene.index.SegmentInfoPerCommit: long sizeInBytes()>();

        $i6 = (int) -1;

        specialinvoke $r105.<org.apache.lucene.store.MergeInfo: void <init>(int,long,boolean,int)>($i0, $l1, 1, $i6);

        specialinvoke $r106.<org.apache.lucene.store.IOContext: void <init>(org.apache.lucene.store.MergeInfo)>($r105);

        $r30 = r24.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $r31 = specialinvoke r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.FieldInfos getFieldInfos(org.apache.lucene.index.SegmentInfo)>($r30);

        $r32 = virtualinvoke $r31.<org.apache.lucene.index.FieldInfos: java.util.Iterator iterator()>();

     label09:
        $z14 = interfaceinvoke $r32.<java.util.Iterator: boolean hasNext()>();

        if $z14 == 0 goto label10;

        $r34 = interfaceinvoke $r32.<java.util.Iterator: java.lang.Object next()>();

        r35 = (org.apache.lucene.index.FieldInfo) $r34;

        $r36 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.FieldInfos$FieldNumbers globalFieldNumberMap>;

        $r37 = r35.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        $i2 = r35.<org.apache.lucene.index.FieldInfo: int number>;

        $r38 = virtualinvoke r35.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$DocValuesType getDocValuesType()>();

        virtualinvoke $r36.<org.apache.lucene.index.FieldInfos$FieldNumbers: int addOrGet(java.lang.String,int,org.apache.lucene.index.FieldInfo$DocValuesType)>($r37, $i2, $r38);

        goto label09;

     label10:
        $r33 = specialinvoke r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfoPerCommit copySegmentAsIs(org.apache.lucene.index.SegmentInfoPerCommit,java.lang.String,java.util.Map,java.util.Set,org.apache.lucene.store.IOContext,java.util.Set)>(r24, $r25, $r100, $r99, $r106, $r101);

        interfaceinvoke $r96.<java.util.List: boolean add(java.lang.Object)>($r33);

        goto label06;

     label11:
        i4 = i4 + 1;

        goto label04;

     label12:
        if 1 != 0 goto label31;

        $r11 = interfaceinvoke $r96.<java.util.List: java.util.Iterator iterator()>();

     label13:
        $z3 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label20;

        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r92 = (org.apache.lucene.index.SegmentInfoPerCommit) $r12;

        $r13 = virtualinvoke r92.<org.apache.lucene.index.SegmentInfoPerCommit: java.util.Collection files()>();

        $r14 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();

     label14:
        $z4 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label19;

        $r15 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r93 = (java.lang.String) $r15;

     label15:
        $r16 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory directory>;

        virtualinvoke $r16.<org.apache.lucene.store.Directory: void deleteFile(java.lang.String)>(r93);

     label16:
        goto label18;

     label17:
        $r90 := @caughtexception;

     label18:
        goto label14;

     label19:
        goto label13;

     label20:
        goto label31;

     label21:
        $r88 := @caughtexception;

     label22:
        if 0 != 0 goto label30;

        $r89 = interfaceinvoke $r96.<java.util.List: java.util.Iterator iterator()>();

     label23:
        $z12 = interfaceinvoke $r89.<java.util.Iterator: boolean hasNext()>();

        if $z12 == 0 goto label30;

        $r81 = interfaceinvoke $r89.<java.util.Iterator: java.lang.Object next()>();

        r82 = (org.apache.lucene.index.SegmentInfoPerCommit) $r81;

        $r83 = virtualinvoke r82.<org.apache.lucene.index.SegmentInfoPerCommit: java.util.Collection files()>();

        $r84 = interfaceinvoke $r83.<java.util.Collection: java.util.Iterator iterator()>();

     label24:
        $z11 = interfaceinvoke $r84.<java.util.Iterator: boolean hasNext()>();

        if $z11 == 0 goto label29;

        $r85 = interfaceinvoke $r84.<java.util.Iterator: java.lang.Object next()>();

        r86 = (java.lang.String) $r85;

     label25:
        $r87 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory directory>;

        virtualinvoke $r87.<org.apache.lucene.store.Directory: void deleteFile(java.lang.String)>(r86);

     label26:
        goto label28;

     label27:
        $r80 := @caughtexception;

     label28:
        goto label24;

     label29:
        goto label23;

     label30:
        throw $r88;

     label31:
        entermonitor r0;

     label32:
        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void ensureOpen()>();

     label33:
        if 1 != 0 goto label52;

        $r5 = interfaceinvoke $r96.<java.util.List: java.util.Iterator iterator()>();

     label34:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label41;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r94 = (org.apache.lucene.index.SegmentInfoPerCommit) $r6;

        $r7 = virtualinvoke r94.<org.apache.lucene.index.SegmentInfoPerCommit: java.util.Collection files()>();

        $r8 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

     label35:
        $z2 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label40;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r95 = (java.lang.String) $r9;

     label36:
        $r10 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory directory>;

        virtualinvoke $r10.<org.apache.lucene.store.Directory: void deleteFile(java.lang.String)>(r95);

     label37:
        goto label39;

     label38:
        $r79 := @caughtexception;

     label39:
        goto label35;

     label40:
        goto label34;

     label41:
        goto label52;

     label42:
        $r77 := @caughtexception;

     label43:
        if 0 != 0 goto label51;

        $r78 = interfaceinvoke $r96.<java.util.List: java.util.Iterator iterator()>();

     label44:
        $z10 = interfaceinvoke $r78.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label51;

        $r70 = interfaceinvoke $r78.<java.util.Iterator: java.lang.Object next()>();

        r71 = (org.apache.lucene.index.SegmentInfoPerCommit) $r70;

        $r72 = virtualinvoke r71.<org.apache.lucene.index.SegmentInfoPerCommit: java.util.Collection files()>();

        $r73 = interfaceinvoke $r72.<java.util.Collection: java.util.Iterator iterator()>();

     label45:
        $z9 = interfaceinvoke $r73.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label50;

        $r74 = interfaceinvoke $r73.<java.util.Iterator: java.lang.Object next()>();

        r75 = (java.lang.String) $r74;

     label46:
        $r76 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory directory>;

        virtualinvoke $r76.<org.apache.lucene.store.Directory: void deleteFile(java.lang.String)>(r75);

     label47:
        goto label49;

     label48:
        $r69 := @caughtexception;

     label49:
        goto label45;

     label50:
        goto label44;

     label51:
        throw $r77;

     label52:
        $r4 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        virtualinvoke $r4.<org.apache.lucene.index.SegmentInfos: void addAll(java.lang.Iterable)>($r96);

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void checkpoint()>();

        exitmonitor r0;

     label53:
        goto label56;

     label54:
        $r68 := @caughtexception;

        exitmonitor r0;

     label55:
        throw $r68;

     label56:
        goto label58;

     label57:
        $r67 := @caughtexception;

        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void handleOOM(java.lang.OutOfMemoryError,java.lang.String)>($r67, "addIndexes(Directory...)");

     label58:
        return;

        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label03 to label12 with label21;
        catch java.lang.Throwable from label25 to label26 with label27;
        catch java.lang.Throwable from label21 to label22 with label21;
        catch java.lang.Throwable from label36 to label37 with label38;
        catch java.lang.Throwable from label32 to label33 with label42;
        catch java.lang.Throwable from label46 to label47 with label48;
        catch java.lang.Throwable from label42 to label43 with label42;
        catch java.lang.Throwable from label32 to label53 with label54;
        catch java.lang.Throwable from label54 to label55 with label54;
        catch java.lang.OutOfMemoryError from label01 to label56 with label57;
    }

    public transient void addIndexes(org.apache.lucene.index.IndexReader[]) throws java.io.IOException
    {
        org.apache.lucene.index.SegmentInfoPerCommit $r74;
        org.apache.lucene.index.IndexFileDeleter $r31, $r34, $r39, $r40, $r43, $r54, $r58, $r64;
        org.apache.lucene.index.MergePolicy $r24;
        org.apache.lucene.index.FieldInfos $r28;
        org.apache.lucene.store.IOContext $r70;
        org.apache.lucene.index.SegmentInfo $r72;
        java.util.Set $r21, $r22, $r29, $r32;
        org.apache.lucene.codecs.SegmentInfoWriter $r27;
        org.apache.lucene.util.InfoStream $r1, $r15, $r38, $r48;
        org.apache.lucene.index.AtomicReader $r47;
        java.lang.Throwable $r50, $r51, $r52, $r55, $r56, $r57, $r59, $r60, $r61, $r62, $r65;
        org.apache.lucene.index.LiveIndexWriterConfig $r14;
        java.util.ArrayList $r68;
        org.apache.lucene.index.FieldInfos$FieldNumbers $r16;
        java.lang.String $r2, $r11, $r33, $r42, $r53, $r63;
        java.lang.OutOfMemoryError $r49;
        org.apache.lucene.index.MergeState $r18;
        org.apache.lucene.store.Directory $r8, $r12, $r37;
        org.apache.lucene.codecs.SegmentInfoFormat $r26;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Collection $r35, $r41;
        org.apache.lucene.index.SegmentInfos $r23, $r30;
        org.apache.lucene.index.IndexReader[] r4;
        org.apache.lucene.index.IndexWriter r0;
        java.util.List $r44;
        org.apache.lucene.index.IndexReader r66;
        org.apache.lucene.store.MergeInfo $r69;
        java.util.HashSet $r75;
        int $i0, $i1, $i2, i3, i4, $i6, $i8;
        org.apache.lucene.index.MergeState$CheckAbort $r17, $r36;
        java.util.Iterator $r45;
        org.apache.lucene.index.SegmentMerger $r73;
        org.apache.lucene.codecs.Codec $r10, $r25;
        java.lang.Object $r46;
        org.apache.lucene.store.TrackingDirectoryWrapper $r71;
        org.apache.lucene.index.AtomicReaderContext r67;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        r4 := @parameter0: org.apache.lucene.index.IndexReader[];

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void ensureOpen()>();

        i3 = 0;

     label01:
        $r1 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z0 = virtualinvoke $r1.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z0 == 0 goto label02;

        $r48 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r48.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "flush at addIndexes(IndexReader...)");

     label02:
        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void flush(boolean,boolean)>(0, 1);

        $r2 = virtualinvoke r0.<org.apache.lucene.index.IndexWriter: java.lang.String newSegmentName()>();

        $r68 = new java.util.ArrayList;

        specialinvoke $r68.<java.util.ArrayList: void <init>()>();

        $i2 = lengthof r4;

        i4 = 0;

     label03:
        if i4 >= $i2 goto label06;

        r66 = r4[i4];

        $i1 = virtualinvoke r66.<org.apache.lucene.index.IndexReader: int numDocs()>();

        i3 = i3 + $i1;

        $r44 = virtualinvoke r66.<org.apache.lucene.index.IndexReader: java.util.List leaves()>();

        $r45 = interfaceinvoke $r44.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z4 = interfaceinvoke $r45.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label05;

        $r46 = interfaceinvoke $r45.<java.util.Iterator: java.lang.Object next()>();

        r67 = (org.apache.lucene.index.AtomicReaderContext) $r46;

        $r47 = virtualinvoke r67.<org.apache.lucene.index.AtomicReaderContext: org.apache.lucene.index.AtomicReader reader()>();

        interfaceinvoke $r68.<java.util.List: boolean add(java.lang.Object)>($r47);

        goto label04;

     label05:
        i4 = i4 + 1;

        goto label03;

     label06:
        $r70 = new org.apache.lucene.store.IOContext;

        $r69 = new org.apache.lucene.store.MergeInfo;

        $i6 = (int) -1;

        specialinvoke $r69.<org.apache.lucene.store.MergeInfo: void <init>(int,long,boolean,int)>(i3, -1L, 1, $i6);

        specialinvoke $r70.<org.apache.lucene.store.IOContext: void <init>(org.apache.lucene.store.MergeInfo)>($r69);

        $r71 = new org.apache.lucene.store.TrackingDirectoryWrapper;

        $r8 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory directory>;

        specialinvoke $r71.<org.apache.lucene.store.TrackingDirectoryWrapper: void <init>(org.apache.lucene.store.Directory)>($r8);

        $r72 = new org.apache.lucene.index.SegmentInfo;

        $r12 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory directory>;

        $r11 = <org.apache.lucene.util.Constants: java.lang.String LUCENE_MAIN_VERSION>;

        $r10 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.codecs.Codec codec>;

        $i8 = (int) -1;

        specialinvoke $r72.<org.apache.lucene.index.SegmentInfo: void <init>(org.apache.lucene.store.Directory,java.lang.String,java.lang.String,int,boolean,org.apache.lucene.codecs.Codec,java.util.Map,java.util.Map)>($r12, $r11, $r2, $i8, 0, $r10, null, null);

        $r73 = new org.apache.lucene.index.SegmentMerger;

        $r15 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r14 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.LiveIndexWriterConfig config>;

        $i0 = virtualinvoke $r14.<org.apache.lucene.index.LiveIndexWriterConfig: int getTermIndexInterval()>();

        $r17 = <org.apache.lucene.index.MergeState$CheckAbort: org.apache.lucene.index.MergeState$CheckAbort NONE>;

        $r16 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.FieldInfos$FieldNumbers globalFieldNumberMap>;

        specialinvoke $r73.<org.apache.lucene.index.SegmentMerger: void <init>(java.util.List,org.apache.lucene.index.SegmentInfo,org.apache.lucene.util.InfoStream,org.apache.lucene.store.Directory,int,org.apache.lucene.index.MergeState$CheckAbort,org.apache.lucene.index.FieldInfos$FieldNumbers,org.apache.lucene.store.IOContext)>($r68, $r72, $r15, $r71, $i0, $r17, $r16, $r70);

     label07:
        $r18 = virtualinvoke $r73.<org.apache.lucene.index.SegmentMerger: org.apache.lucene.index.MergeState merge()>();

     label08:
        if 1 != 0 goto label21;

        entermonitor r0;

     label09:
        $r43 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        $r42 = $r72.<org.apache.lucene.index.SegmentInfo: java.lang.String name>;

        virtualinvoke $r43.<org.apache.lucene.index.IndexFileDeleter: void refresh(java.lang.String)>($r42);

        exitmonitor r0;

     label10:
        goto label13;

     label11:
        $r65 := @caughtexception;

        exitmonitor r0;

     label12:
        throw $r65;

     label13:
        goto label21;

     label14:
        $r62 := @caughtexception;

     label15:
        if 0 != 0 goto label20;

        entermonitor r0;

     label16:
        $r64 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        $r63 = $r72.<org.apache.lucene.index.SegmentInfo: java.lang.String name>;

        virtualinvoke $r64.<org.apache.lucene.index.IndexFileDeleter: void refresh(java.lang.String)>($r63);

        exitmonitor r0;

     label17:
        goto label20;

     label18:
        $r61 := @caughtexception;

        exitmonitor r0;

     label19:
        throw $r61;

     label20:
        throw $r62;

     label21:
        $r74 = new org.apache.lucene.index.SegmentInfoPerCommit;

        specialinvoke $r74.<org.apache.lucene.index.SegmentInfoPerCommit: void <init>(org.apache.lucene.index.SegmentInfo,int,long)>($r72, 0, -1L);

        $r75 = new java.util.HashSet;

        $r21 = virtualinvoke $r71.<org.apache.lucene.store.TrackingDirectoryWrapper: java.util.Set getCreatedFiles()>();

        specialinvoke $r75.<java.util.HashSet: void <init>(java.util.Collection)>($r21);

        virtualinvoke $r72.<org.apache.lucene.index.SegmentInfo: void setFiles(java.util.Set)>($r75);

        $r22 = virtualinvoke $r71.<org.apache.lucene.store.TrackingDirectoryWrapper: java.util.Set getCreatedFiles()>();

        interfaceinvoke $r22.<java.util.Set: void clear()>();

        staticinvoke <org.apache.lucene.index.IndexWriter: void setDiagnostics(org.apache.lucene.index.SegmentInfo,java.lang.String)>($r72, "addIndexes(IndexReader...)");

        entermonitor r0;

     label22:
        $z1 = r0.<org.apache.lucene.index.IndexWriter: boolean stopMerges>;

        if $z1 == 0 goto label24;

        $r40 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        $r41 = virtualinvoke $r74.<org.apache.lucene.index.SegmentInfoPerCommit: java.util.Collection files()>();

        virtualinvoke $r40.<org.apache.lucene.index.IndexFileDeleter: void deleteNewFiles(java.util.Collection)>($r41);

        exitmonitor r0;

     label23:
        return;

     label24:
        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void ensureOpen()>();

        $r24 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.MergePolicy mergePolicy>;

        $r23 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $z2 = virtualinvoke $r24.<org.apache.lucene.index.MergePolicy: boolean useCompoundFile(org.apache.lucene.index.SegmentInfos,org.apache.lucene.index.SegmentInfoPerCommit)>($r23, $r74);

        exitmonitor r0;

     label25:
        goto label28;

     label26:
        $r60 := @caughtexception;

        exitmonitor r0;

     label27:
        throw $r60;

     label28:
        if $z2 == 0 goto label44;

        $r35 = virtualinvoke $r74.<org.apache.lucene.index.SegmentInfoPerCommit: java.util.Collection files()>();

     label29:
        $r38 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r37 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory directory>;

        $r36 = <org.apache.lucene.index.MergeState$CheckAbort: org.apache.lucene.index.MergeState$CheckAbort NONE>;

        staticinvoke <org.apache.lucene.index.IndexWriter: java.util.Collection createCompoundFile(org.apache.lucene.util.InfoStream,org.apache.lucene.store.Directory,org.apache.lucene.index.MergeState$CheckAbort,org.apache.lucene.index.SegmentInfo,org.apache.lucene.store.IOContext)>($r38, $r37, $r36, $r72, $r70);

     label30:
        entermonitor r0;

     label31:
        $r39 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        virtualinvoke $r39.<org.apache.lucene.index.IndexFileDeleter: void deleteNewFiles(java.util.Collection)>($r35);

        exitmonitor r0;

     label32:
        goto label35;

     label33:
        $r59 := @caughtexception;

        exitmonitor r0;

     label34:
        throw $r59;

     label35:
        goto label43;

     label36:
        $r57 := @caughtexception;

     label37:
        entermonitor r0;

     label38:
        $r58 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        virtualinvoke $r58.<org.apache.lucene.index.IndexFileDeleter: void deleteNewFiles(java.util.Collection)>($r35);

        exitmonitor r0;

     label39:
        goto label42;

     label40:
        $r56 := @caughtexception;

        exitmonitor r0;

     label41:
        throw $r56;

     label42:
        throw $r57;

     label43:
        virtualinvoke $r72.<org.apache.lucene.index.SegmentInfo: void setUseCompoundFile(boolean)>(1);

     label44:
        $r25 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.codecs.Codec codec>;

        $r26 = virtualinvoke $r25.<org.apache.lucene.codecs.Codec: org.apache.lucene.codecs.SegmentInfoFormat segmentInfoFormat()>();

        $r27 = virtualinvoke $r26.<org.apache.lucene.codecs.SegmentInfoFormat: org.apache.lucene.codecs.SegmentInfoWriter getSegmentInfoWriter()>();

        $r28 = $r18.<org.apache.lucene.index.MergeState: org.apache.lucene.index.FieldInfos fieldInfos>;

        virtualinvoke $r27.<org.apache.lucene.codecs.SegmentInfoWriter: void write(org.apache.lucene.store.Directory,org.apache.lucene.index.SegmentInfo,org.apache.lucene.index.FieldInfos,org.apache.lucene.store.IOContext)>($r71, $r72, $r28, $r70);

     label45:
        if 1 != 0 goto label58;

        entermonitor r0;

     label46:
        $r34 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        $r33 = $r72.<org.apache.lucene.index.SegmentInfo: java.lang.String name>;

        virtualinvoke $r34.<org.apache.lucene.index.IndexFileDeleter: void refresh(java.lang.String)>($r33);

        exitmonitor r0;

     label47:
        goto label50;

     label48:
        $r55 := @caughtexception;

        exitmonitor r0;

     label49:
        throw $r55;

     label50:
        goto label58;

     label51:
        $r52 := @caughtexception;

     label52:
        if 0 != 0 goto label57;

        entermonitor r0;

     label53:
        $r54 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        $r53 = $r72.<org.apache.lucene.index.SegmentInfo: java.lang.String name>;

        virtualinvoke $r54.<org.apache.lucene.index.IndexFileDeleter: void refresh(java.lang.String)>($r53);

        exitmonitor r0;

     label54:
        goto label57;

     label55:
        $r51 := @caughtexception;

        exitmonitor r0;

     label56:
        throw $r51;

     label57:
        throw $r52;

     label58:
        $r29 = virtualinvoke $r71.<org.apache.lucene.store.TrackingDirectoryWrapper: java.util.Set getCreatedFiles()>();

        virtualinvoke $r72.<org.apache.lucene.index.SegmentInfo: void addFiles(java.util.Collection)>($r29);

        entermonitor r0;

     label59:
        $z3 = r0.<org.apache.lucene.index.IndexWriter: boolean stopMerges>;

        if $z3 == 0 goto label61;

        $r31 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        $r32 = virtualinvoke $r72.<org.apache.lucene.index.SegmentInfo: java.util.Set files()>();

        virtualinvoke $r31.<org.apache.lucene.index.IndexFileDeleter: void deleteNewFiles(java.util.Collection)>($r32);

        exitmonitor r0;

     label60:
        return;

     label61:
        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void ensureOpen()>();

        $r30 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        virtualinvoke $r30.<org.apache.lucene.index.SegmentInfos: void add(org.apache.lucene.index.SegmentInfoPerCommit)>($r74);

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void checkpoint()>();

        exitmonitor r0;

     label62:
        goto label65;

     label63:
        $r50 := @caughtexception;

        exitmonitor r0;

     label64:
        throw $r50;

     label65:
        goto label67;

     label66:
        $r49 := @caughtexception;

        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void handleOOM(java.lang.OutOfMemoryError,java.lang.String)>($r49, "addIndexes(IndexReader...)");

     label67:
        return;

        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label18 to label19 with label18;
        catch java.lang.Throwable from label14 to label15 with label14;
        catch java.lang.Throwable from label22 to label23 with label26;
        catch java.lang.Throwable from label24 to label25 with label26;
        catch java.lang.Throwable from label26 to label27 with label26;
        catch java.lang.Throwable from label31 to label32 with label33;
        catch java.lang.Throwable from label33 to label34 with label33;
        catch java.lang.Throwable from label29 to label30 with label36;
        catch java.lang.Throwable from label38 to label39 with label40;
        catch java.lang.Throwable from label40 to label41 with label40;
        catch java.lang.Throwable from label36 to label37 with label36;
        catch java.lang.Throwable from label46 to label47 with label48;
        catch java.lang.Throwable from label48 to label49 with label48;
        catch java.lang.Throwable from label44 to label45 with label51;
        catch java.lang.Throwable from label53 to label54 with label55;
        catch java.lang.Throwable from label55 to label56 with label55;
        catch java.lang.Throwable from label51 to label52 with label51;
        catch java.lang.Throwable from label59 to label60 with label63;
        catch java.lang.Throwable from label61 to label62 with label63;
        catch java.lang.Throwable from label63 to label64 with label63;
        catch java.lang.OutOfMemoryError from label01 to label23 with label66;
        catch java.lang.OutOfMemoryError from label24 to label60 with label66;
        catch java.lang.OutOfMemoryError from label61 to label65 with label66;
    }

    private org.apache.lucene.index.SegmentInfoPerCommit copySegmentAsIs(org.apache.lucene.index.SegmentInfoPerCommit, java.lang.String, java.util.Map, java.util.Set, org.apache.lucene.store.IOContext, java.util.Set) throws java.io.IOException
    {
        org.apache.lucene.index.SegmentInfoPerCommit r0, $r25;
        java.util.Map r3, $r11, $r14, $r24;
        org.apache.lucene.index.FieldInfos $r7;
        org.apache.lucene.store.IOContext r34;
        org.apache.lucene.index.SegmentInfo $r1, $r6, $r8, $r10, $r13, $r15, $r16, $r19, $r20, $r21, $r23, $r48;
        java.util.Set $r9, $r35, $r38, r47, r70, $r89;
        org.apache.lucene.codecs.SegmentInfoWriter $r33;
        java.lang.StringBuilder $r43, $r44, $r46, $r52, $r53, $r54, $r55, $r59, $r60, $r61, $r62, $r63, $r65, $r66, $r68, $r72, $r73, $r75, $r76, $r77, $r79;
        java.lang.Throwable $r84, $r88, $r91;
        long $l2;
        java.lang.AssertionError $r51, $r58, $r83;
        java.lang.String $r2, r4, $r18, $r45, $r56, $r64, $r67, $r69, $r74, $r78, $r80, r86, r93, r95, r96, r97, r98, r99;
        java.lang.UnsupportedOperationException $r92;
        org.apache.lucene.store.Directory $r17, $r30, $r41, $r49, $r50, $r57, $r87;
        org.apache.lucene.codecs.SegmentInfoFormat $r32;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        java.util.Collection $r27, $r36;
        org.apache.lucene.index.IndexWriter r5;
        java.util.HashMap $r12, $r81, r94;
        java.util.HashSet $r26;
        int $i0, $i1;
        java.util.Iterator $r28, $r37, $r39, $r90;
        org.apache.lucene.codecs.Codec $r22, $r31;
        org.apache.lucene.store.TrackingDirectoryWrapper $r29;
        java.lang.Object $r40, $r42, $r71, $r82, $r85;

        r5 := @this: org.apache.lucene.index.IndexWriter;

        r0 := @parameter0: org.apache.lucene.index.SegmentInfoPerCommit;

        r4 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.Map;

        r70 := @parameter3: java.util.Set;

        r34 := @parameter4: org.apache.lucene.store.IOContext;

        r47 := @parameter5: java.util.Set;

        $r1 = r0.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $r2 = staticinvoke <org.apache.lucene.codecs.lucene3x.Lucene3xSegmentInfoFormat: java.lang.String getDocStoreSegment(org.apache.lucene.index.SegmentInfo)>($r1);

        $z0 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        if $r2 != null goto label01;

        $r83 = new java.lang.AssertionError;

        specialinvoke $r83.<java.lang.AssertionError: void <init>()>();

        throw $r83;

     label01:
        $z1 = interfaceinvoke r3.<java.util.Map: boolean containsKey(java.lang.Object)>($r2);

        if $z1 == 0 goto label02;

        $r82 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r93 = (java.lang.String) $r82;

        goto label03;

     label02:
        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, r4);

        r93 = r4;

     label03:
        $r6 = r0.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $r7 = specialinvoke r5.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.FieldInfos getFieldInfos(org.apache.lucene.index.SegmentInfo)>($r6);

        $r8 = r0.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $r9 = staticinvoke <org.apache.lucene.codecs.lucene3x.Lucene3xCodec: java.util.Set getDocStoreFiles(org.apache.lucene.index.SegmentInfo)>($r8);

        $r10 = r0.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $r11 = virtualinvoke $r10.<org.apache.lucene.index.SegmentInfo: java.util.Map attributes()>();

        if $r11 != null goto label04;

        $r81 = new java.util.HashMap;

        specialinvoke $r81.<java.util.HashMap: void <init>()>();

        r94 = $r81;

        goto label05;

     label04:
        $r12 = new java.util.HashMap;

        $r13 = r0.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $r14 = virtualinvoke $r13.<org.apache.lucene.index.SegmentInfo: java.util.Map attributes()>();

        specialinvoke $r12.<java.util.HashMap: void <init>(java.util.Map)>($r14);

        r94 = $r12;

     label05:
        if $r9 == null goto label06;

        $r80 = <org.apache.lucene.codecs.lucene3x.Lucene3xSegmentInfoFormat: java.lang.String DS_NAME_KEY>;

        interfaceinvoke r94.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r80, r93);

     label06:
        $r15 = new org.apache.lucene.index.SegmentInfo;

        $r17 = r5.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory directory>;

        $r16 = r0.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $r18 = virtualinvoke $r16.<org.apache.lucene.index.SegmentInfo: java.lang.String getVersion()>();

        $r19 = r0.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $i0 = virtualinvoke $r19.<org.apache.lucene.index.SegmentInfo: int getDocCount()>();

        $r20 = r0.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $z2 = virtualinvoke $r20.<org.apache.lucene.index.SegmentInfo: boolean getUseCompoundFile()>();

        $r21 = r0.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $r22 = virtualinvoke $r21.<org.apache.lucene.index.SegmentInfo: org.apache.lucene.codecs.Codec getCodec()>();

        $r23 = r0.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $r24 = virtualinvoke $r23.<org.apache.lucene.index.SegmentInfo: java.util.Map getDiagnostics()>();

        specialinvoke $r15.<org.apache.lucene.index.SegmentInfo: void <init>(org.apache.lucene.store.Directory,java.lang.String,java.lang.String,int,boolean,org.apache.lucene.codecs.Codec,java.util.Map,java.util.Map)>($r17, $r18, r4, $i0, $z2, $r22, $r24, r94);

        $r25 = new org.apache.lucene.index.SegmentInfoPerCommit;

        $i1 = virtualinvoke r0.<org.apache.lucene.index.SegmentInfoPerCommit: int getDelCount()>();

        $l2 = virtualinvoke r0.<org.apache.lucene.index.SegmentInfoPerCommit: long getDelGen()>();

        specialinvoke $r25.<org.apache.lucene.index.SegmentInfoPerCommit: void <init>(org.apache.lucene.index.SegmentInfo,int,long)>($r15, $i1, $l2);

        $r26 = new java.util.HashSet;

        specialinvoke $r26.<java.util.HashSet: void <init>()>();

        $r27 = virtualinvoke r0.<org.apache.lucene.index.SegmentInfoPerCommit: java.util.Collection files()>();

        $r28 = interfaceinvoke $r27.<java.util.Collection: java.util.Iterator iterator()>();

     label07:
        $z12 = interfaceinvoke $r28.<java.util.Iterator: boolean hasNext()>();

        if $z12 == 0 goto label10;

        $r71 = interfaceinvoke $r28.<java.util.Iterator: java.lang.Object next()>();

        r95 = (java.lang.String) $r71;

        if $r9 == null goto label08;

        $z10 = interfaceinvoke $r9.<java.util.Set: boolean contains(java.lang.Object)>(r95);

        if $z10 == 0 goto label08;

        $r76 = new java.lang.StringBuilder;

        specialinvoke $r76.<java.lang.StringBuilder: void <init>()>();

        $r77 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r93);

        $r78 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String stripSegmentName(java.lang.String)>(r95);

        $r79 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r78);

        r96 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label09;

     label08:
        $r72 = new java.lang.StringBuilder;

        specialinvoke $r72.<java.lang.StringBuilder: void <init>()>();

        $r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r74 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String stripSegmentName(java.lang.String)>(r95);

        $r75 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r74);

        r96 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.String toString()>();

     label09:
        interfaceinvoke $r26.<java.util.Set: boolean add(java.lang.Object)>(r96);

        goto label07;

     label10:
        virtualinvoke $r15.<org.apache.lucene.index.SegmentInfo: void setFiles(java.util.Set)>($r26);

        $r29 = new org.apache.lucene.store.TrackingDirectoryWrapper;

        $r30 = r5.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory directory>;

        specialinvoke $r29.<org.apache.lucene.store.TrackingDirectoryWrapper: void <init>(org.apache.lucene.store.Directory)>($r30);

     label11:
        $r31 = virtualinvoke $r15.<org.apache.lucene.index.SegmentInfo: org.apache.lucene.codecs.Codec getCodec()>();

        $r32 = virtualinvoke $r31.<org.apache.lucene.codecs.Codec: org.apache.lucene.codecs.SegmentInfoFormat segmentInfoFormat()>();

        $r33 = virtualinvoke $r32.<org.apache.lucene.codecs.SegmentInfoFormat: org.apache.lucene.codecs.SegmentInfoWriter getSegmentInfoWriter()>();

        virtualinvoke $r33.<org.apache.lucene.codecs.SegmentInfoWriter: void write(org.apache.lucene.store.Directory,org.apache.lucene.index.SegmentInfo,org.apache.lucene.index.FieldInfos,org.apache.lucene.store.IOContext)>($r29, $r15, $r7, r34);

     label12:
        goto label14;

     label13:
        $r92 := @caughtexception;

     label14:
        $r35 = virtualinvoke $r29.<org.apache.lucene.store.TrackingDirectoryWrapper: java.util.Set getCreatedFiles()>();

     label15:
        $r36 = virtualinvoke r0.<org.apache.lucene.index.SegmentInfoPerCommit: java.util.Collection files()>();

        $r37 = interfaceinvoke $r36.<java.util.Collection: java.util.Iterator iterator()>();

     label16:
        $z13 = interfaceinvoke $r37.<java.util.Iterator: boolean hasNext()>();

        if $z13 == 0 goto label23;

        $r42 = interfaceinvoke $r37.<java.util.Iterator: java.lang.Object next()>();

        r97 = (java.lang.String) $r42;

        if $r9 == null goto label18;

        $z8 = interfaceinvoke $r9.<java.util.Set: boolean contains(java.lang.Object)>(r97);

        if $z8 == 0 goto label18;

        $r65 = new java.lang.StringBuilder;

        specialinvoke $r65.<java.lang.StringBuilder: void <init>()>();

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r93);

        $r67 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String stripSegmentName(java.lang.String)>(r97);

        $r68 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r67);

        $r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.String toString()>();

        r98 = $r69;

        $z9 = interfaceinvoke r70.<java.util.Set: boolean contains(java.lang.Object)>($r69);

        if $z9 == 0 goto label17;

        goto label16;

     label17:
        interfaceinvoke r70.<java.util.Set: boolean add(java.lang.Object)>($r69);

        goto label19;

     label18:
        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r45 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String stripSegmentName(java.lang.String)>(r97);

        $r46 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        r98 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

     label19:
        $z14 = interfaceinvoke $r35.<java.util.Collection: boolean contains(java.lang.Object)>(r98);

        if $z14 == 0 goto label20;

        goto label16;

     label20:
        $z4 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z4 != 0 goto label21;

        $r57 = r5.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory directory>;

        $z7 = virtualinvoke $r57.<org.apache.lucene.store.Directory: boolean fileExists(java.lang.String)>(r98);

        if $z7 == 0 goto label21;

        $r58 = new java.lang.AssertionError;

        $r59 = new java.lang.StringBuilder;

        specialinvoke $r59.<java.lang.StringBuilder: void <init>()>();

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file \"");

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r98);

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" already exists; siFiles=");

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r35);

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r58.<java.lang.AssertionError: void <init>(java.lang.Object)>($r64);

        throw $r58;

     label21:
        $z5 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z5 != 0 goto label22;

        $z6 = interfaceinvoke r47.<java.util.Set: boolean contains(java.lang.Object)>(r97);

        if $z6 == 0 goto label22;

        $r51 = new java.lang.AssertionError;

        $r52 = new java.lang.StringBuilder;

        specialinvoke $r52.<java.lang.StringBuilder: void <init>()>();

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file \"");

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r97);

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" is being copied more than once");

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r51.<java.lang.AssertionError: void <init>(java.lang.Object)>($r56);

        throw $r51;

     label22:
        interfaceinvoke r47.<java.util.Set: boolean add(java.lang.Object)>(r97);

        $r48 = r0.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $r50 = $r48.<org.apache.lucene.index.SegmentInfo: org.apache.lucene.store.Directory dir>;

        $r49 = r5.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory directory>;

        virtualinvoke $r50.<org.apache.lucene.store.Directory: void copy(org.apache.lucene.store.Directory,java.lang.String,java.lang.String,org.apache.lucene.store.IOContext)>($r49, r97, r98, r34);

        goto label16;

     label23:
        if 1 != 0 goto label38;

        $r38 = virtualinvoke $r15.<org.apache.lucene.index.SegmentInfo: java.util.Set files()>();

        $r39 = interfaceinvoke $r38.<java.util.Set: java.util.Iterator iterator()>();

     label24:
        $z3 = interfaceinvoke $r39.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label29;

        $r40 = interfaceinvoke $r39.<java.util.Iterator: java.lang.Object next()>();

        r99 = (java.lang.String) $r40;

     label25:
        $r41 = r5.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory directory>;

        virtualinvoke $r41.<org.apache.lucene.store.Directory: void deleteFile(java.lang.String)>(r99);

     label26:
        goto label28;

     label27:
        $r91 := @caughtexception;

     label28:
        goto label24;

     label29:
        goto label38;

     label30:
        $r88 := @caughtexception;

     label31:
        if 0 != 0 goto label37;

        $r89 = virtualinvoke $r15.<org.apache.lucene.index.SegmentInfo: java.util.Set files()>();

        $r90 = interfaceinvoke $r89.<java.util.Set: java.util.Iterator iterator()>();

     label32:
        $z11 = interfaceinvoke $r90.<java.util.Iterator: boolean hasNext()>();

        if $z11 == 0 goto label37;

        $r85 = interfaceinvoke $r90.<java.util.Iterator: java.lang.Object next()>();

        r86 = (java.lang.String) $r85;

     label33:
        $r87 = r5.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory directory>;

        virtualinvoke $r87.<org.apache.lucene.store.Directory: void deleteFile(java.lang.String)>(r86);

     label34:
        goto label36;

     label35:
        $r84 := @caughtexception;

     label36:
        goto label32;

     label37:
        throw $r88;

     label38:
        return $r25;

        catch java.lang.UnsupportedOperationException from label11 to label12 with label13;
        catch java.lang.Throwable from label25 to label26 with label27;
        catch java.lang.Throwable from label15 to label23 with label30;
        catch java.lang.Throwable from label33 to label34 with label35;
        catch java.lang.Throwable from label30 to label31 with label30;
    }

    protected void doAfterFlush() throws java.io.IOException
    {
        org.apache.lucene.index.IndexWriter r0;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        return;
    }

    protected void doBeforeFlush() throws java.io.IOException
    {
        org.apache.lucene.index.IndexWriter r0;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        return;
    }

    public final void prepareCommit() throws java.io.IOException
    {
        org.apache.lucene.index.IndexWriter r0;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void ensureOpen()>();

        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void prepareCommitInternal()>();

        return;
    }

    private void prepareCommitInternal() throws java.io.IOException
    {
        java.lang.IllegalStateException $r46, $r47;
        org.apache.lucene.index.IndexFileDeleter $r13, $r15, $r34;
        org.apache.lucene.index.DocumentsWriter $r5, $r43, $r44;
        java.util.concurrent.atomic.AtomicInteger $r19;
        org.apache.lucene.store.Directory $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z7, z8;
        java.util.Collection $r11, $r12, $r14, $r33;
        org.apache.lucene.index.SegmentInfos $r3, $r6, $r8, $r9, r42;
        org.apache.lucene.index.IndexWriter r0;
        org.apache.lucene.util.InfoStream $r2, $r17, $r18, $r23, $r25, $r39, $r40;
        java.lang.StringBuilder $r26, $r28, $r45;
        java.lang.Throwable $r30, $r31, $r32, $r35, $r37, $r38, $r41;
        long $l0;
        java.lang.AssertionError $r48;
        int $i2;
        java.lang.String $r27, $r29;
        org.apache.lucene.index.MergePolicy$MergeTrigger $r16;
        org.apache.lucene.index.IndexWriter$ReaderPool $r7;
        java.lang.Object $r1, $r4;
        java.lang.OutOfMemoryError $r36;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        $r1 = r0.<org.apache.lucene.index.IndexWriter: java.lang.Object commitLock>;

        entermonitor $r1;

     label01:
        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void ensureOpen(boolean)>(0);

        $r2 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z0 = virtualinvoke $r2.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z0 == 0 goto label02;

        $r23 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r23.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "prepareCommit: flush");

        $r25 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  index before flush ");

        $r27 = virtualinvoke r0.<org.apache.lucene.index.IndexWriter: java.lang.String segString()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r25.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", $r29);

     label02:
        $z1 = r0.<org.apache.lucene.index.IndexWriter: boolean hitOOM>;

        if $z1 == 0 goto label03;

        $r46 = new java.lang.IllegalStateException;

        specialinvoke $r46.<java.lang.IllegalStateException: void <init>(java.lang.String)>("this writer hit an OutOfMemoryError; cannot commit");

        throw $r46;

     label03:
        $r3 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos pendingCommit>;

        if $r3 == null goto label04;

        $r47 = new java.lang.IllegalStateException;

        specialinvoke $r47.<java.lang.IllegalStateException: void <init>(java.lang.String)>("prepareCommit was already called with no corresponding call to commit");

        throw $r47;

     label04:
        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void doBeforeFlush()>();

        $z2 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z2 != 0 goto label05;

        $z5 = virtualinvoke r0.<org.apache.lucene.index.IndexWriter: boolean testPoint(java.lang.String)>("startDoFlush");

        if $z5 != 0 goto label05;

        $r48 = new java.lang.AssertionError;

        specialinvoke $r48.<java.lang.AssertionError: void <init>()>();

        throw $r48;

     label05:
        r42 = null;

        z7 = 0;

     label06:
        $r4 = r0.<org.apache.lucene.index.IndexWriter: java.lang.Object fullFlushLock>;

        entermonitor $r4;

     label07:
        z8 = 0;

     label08:
        $r5 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.DocumentsWriter docWriter>;

        $z3 = virtualinvoke $r5.<org.apache.lucene.index.DocumentsWriter: boolean flushAllThreads()>();

        z7 = $z3;

        if $z3 != 0 goto label09;

        $r19 = r0.<org.apache.lucene.index.IndexWriter: java.util.concurrent.atomic.AtomicInteger flushCount>;

        virtualinvoke $r19.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

     label09:
        z8 = 1;

        entermonitor r0;

     label10:
        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void maybeApplyDeletes(boolean)>(1);

        $r7 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexWriter$ReaderPool readerPool>;

        $r6 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        virtualinvoke $r7.<org.apache.lucene.index.IndexWriter$ReaderPool: void commit(org.apache.lucene.index.SegmentInfos)>($r6);

        $r8 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $r9 = virtualinvoke $r8.<org.apache.lucene.index.SegmentInfos: org.apache.lucene.index.SegmentInfos clone()>();

        r42 = $r9;

        $l0 = r0.<org.apache.lucene.index.IndexWriter: long changeCount>;

        r0.<org.apache.lucene.index.IndexWriter: long pendingCommitChangeCount> = $l0;

        $r10 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory directory>;

        $r11 = virtualinvoke $r9.<org.apache.lucene.index.SegmentInfos: java.util.Collection files(org.apache.lucene.store.Directory,boolean)>($r10, 0);

        r0.<org.apache.lucene.index.IndexWriter: java.util.Collection filesToCommit> = $r11;

        $r13 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        $r12 = r0.<org.apache.lucene.index.IndexWriter: java.util.Collection filesToCommit>;

        virtualinvoke $r13.<org.apache.lucene.index.IndexFileDeleter: void incRef(java.util.Collection)>($r12);

        exitmonitor r0;

     label11:
        goto label14;

     label12:
        $r41 := @caughtexception;

        exitmonitor r0;

     label13:
        throw $r41;

     label14:
        if 1 != 0 goto label15;

        $r17 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z4 = virtualinvoke $r17.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z4 == 0 goto label15;

        $r18 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r18.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "hit exception during prepareCommit");

     label15:
        $r43 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.DocumentsWriter docWriter>;

        virtualinvoke $r43.<org.apache.lucene.index.DocumentsWriter: void finishFullFlush(boolean)>(1);

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void doAfterFlush()>();

        goto label19;

     label16:
        $r38 := @caughtexception;

     label17:
        if 0 != 0 goto label18;

        $r39 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z6 = virtualinvoke $r39.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z6 == 0 goto label18;

        $r40 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r40.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "hit exception during prepareCommit");

     label18:
        $r44 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.DocumentsWriter docWriter>;

        virtualinvoke $r44.<org.apache.lucene.index.DocumentsWriter: void finishFullFlush(boolean)>(z8);

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void doAfterFlush()>();

        throw $r38;

     label19:
        exitmonitor $r4;

     label20:
        goto label23;

     label21:
        $r37 := @caughtexception;

        exitmonitor $r4;

     label22:
        throw $r37;

     label23:
        goto label25;

     label24:
        $r36 := @caughtexception;

        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void handleOOM(java.lang.OutOfMemoryError,java.lang.String)>($r36, "prepareCommit");

     label25:
        if z7 == 0 goto label26;

        $r16 = <org.apache.lucene.index.MergePolicy$MergeTrigger: org.apache.lucene.index.MergePolicy$MergeTrigger FULL_FLUSH>;

        $i2 = (int) -1;

        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void maybeMerge(org.apache.lucene.index.MergePolicy$MergeTrigger,int)>($r16, $i2);

     label26:
        if 1 != 0 goto label39;

        entermonitor r0;

     label27:
        $r15 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        $r14 = r0.<org.apache.lucene.index.IndexWriter: java.util.Collection filesToCommit>;

        virtualinvoke $r15.<org.apache.lucene.index.IndexFileDeleter: void decRef(java.util.Collection)>($r14);

        r0.<org.apache.lucene.index.IndexWriter: java.util.Collection filesToCommit> = null;

        exitmonitor r0;

     label28:
        goto label31;

     label29:
        $r35 := @caughtexception;

        exitmonitor r0;

     label30:
        throw $r35;

     label31:
        goto label39;

     label32:
        $r32 := @caughtexception;

     label33:
        if 0 != 0 goto label38;

        entermonitor r0;

     label34:
        $r34 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        $r33 = r0.<org.apache.lucene.index.IndexWriter: java.util.Collection filesToCommit>;

        virtualinvoke $r34.<org.apache.lucene.index.IndexFileDeleter: void decRef(java.util.Collection)>($r33);

        r0.<org.apache.lucene.index.IndexWriter: java.util.Collection filesToCommit> = null;

        exitmonitor r0;

     label35:
        goto label38;

     label36:
        $r31 := @caughtexception;

        exitmonitor r0;

     label37:
        throw $r31;

     label38:
        throw $r32;

     label39:
        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void startCommit(org.apache.lucene.index.SegmentInfos)>(r42);

        exitmonitor $r1;

     label40:
        goto label43;

     label41:
        $r30 := @caughtexception;

        exitmonitor $r1;

     label42:
        throw $r30;

     label43:
        return;

        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
        catch java.lang.Throwable from label08 to label14 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
        catch java.lang.Throwable from label07 to label20 with label21;
        catch java.lang.Throwable from label21 to label22 with label21;
        catch java.lang.OutOfMemoryError from label06 to label23 with label24;
        catch java.lang.Throwable from label27 to label28 with label29;
        catch java.lang.Throwable from label29 to label30 with label29;
        catch java.lang.Throwable from label25 to label26 with label32;
        catch java.lang.Throwable from label34 to label35 with label36;
        catch java.lang.Throwable from label36 to label37 with label36;
        catch java.lang.Throwable from label32 to label33 with label32;
        catch java.lang.Throwable from label01 to label40 with label41;
        catch java.lang.Throwable from label41 to label42 with label41;
    }

    public final synchronized void setCommitData(java.util.Map)
    {
        org.apache.lucene.index.IndexWriter r0;
        java.util.Map r2;
        java.util.HashMap $r1;
        long $l0, $l1;
        org.apache.lucene.index.SegmentInfos $r3;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        r2 := @parameter0: java.util.Map;

        $r3 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>(java.util.Map)>(r2);

        virtualinvoke $r3.<org.apache.lucene.index.SegmentInfos: void setUserData(java.util.Map)>($r1);

        $l0 = r0.<org.apache.lucene.index.IndexWriter: long changeCount>;

        $l1 = $l0 + 1L;

        r0.<org.apache.lucene.index.IndexWriter: long changeCount> = $l1;

        return;
    }

    public final synchronized java.util.Map getCommitData()
    {
        org.apache.lucene.index.IndexWriter r0;
        org.apache.lucene.index.SegmentInfos $r1;
        java.util.Map $r2;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        $r1 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $r2 = virtualinvoke $r1.<org.apache.lucene.index.SegmentInfos: java.util.Map getUserData()>();

        return $r2;
    }

    public final void commit() throws java.io.IOException
    {
        org.apache.lucene.index.IndexWriter r0;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void ensureOpen()>();

        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void commitInternal()>();

        return;
    }

    private final void commitInternal() throws java.io.IOException
    {
        java.lang.Throwable $r11;
        boolean $z0, $z1, $z2, $z3;
        org.apache.lucene.index.SegmentInfos $r4;
        org.apache.lucene.index.IndexWriter r0;
        org.apache.lucene.util.InfoStream $r1, $r3, $r5, $r6, $r7, $r8, $r9, $r10;
        java.lang.Object $r2;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        $r1 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z0 = virtualinvoke $r1.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z0 == 0 goto label01;

        $r10 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r10.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "commit: start");

     label01:
        $r2 = r0.<org.apache.lucene.index.IndexWriter: java.lang.Object commitLock>;

        entermonitor $r2;

     label02:
        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void ensureOpen(boolean)>(0);

        $r3 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z1 = virtualinvoke $r3.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z1 == 0 goto label03;

        $r9 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r9.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "commit: enter lock");

     label03:
        $r4 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos pendingCommit>;

        if $r4 != null goto label05;

        $r7 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z3 = virtualinvoke $r7.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z3 == 0 goto label04;

        $r8 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r8.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "commit: now prepare");

     label04:
        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void prepareCommitInternal()>();

        goto label06;

     label05:
        $r5 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z2 = virtualinvoke $r5.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z2 == 0 goto label06;

        $r6 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r6.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "commit: already prepared");

     label06:
        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void finishCommit()>();

        exitmonitor $r2;

     label07:
        goto label10;

     label08:
        $r11 := @caughtexception;

        exitmonitor $r2;

     label09:
        throw $r11;

     label10:
        return;

        catch java.lang.Throwable from label02 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    private final synchronized void finishCommit() throws java.io.IOException
    {
        org.apache.lucene.index.IndexFileDeleter $r14, $r16, $r28;
        org.apache.lucene.store.Directory $r6;
        boolean $z0, $z1, $z2, $z3;
        java.util.Collection $r15, $r27;
        org.apache.lucene.index.SegmentInfos $r1, $r7, $r9, $r10, $r11, $r13, $r20;
        org.apache.lucene.index.IndexWriter r0;
        java.util.List $r12;
        org.apache.lucene.util.InfoStream $r2, $r3, $r4, $r5, $r8, $r18, $r25, $r29;
        java.lang.StringBuilder $r17, $r19, $r22, $r23;
        java.lang.Throwable $r26;
        long $l0;
        java.lang.String $r21, $r24;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        $r1 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos pendingCommit>;

        if $r1 == null goto label08;

     label01:
        $r5 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z1 = virtualinvoke $r5.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z1 == 0 goto label02;

        $r25 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r25.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "commit: pendingCommit != null");

     label02:
        $r7 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos pendingCommit>;

        $r6 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory directory>;

        virtualinvoke $r7.<org.apache.lucene.index.SegmentInfos: void finishCommit(org.apache.lucene.store.Directory)>($r6);

        $r8 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z2 = virtualinvoke $r8.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z2 == 0 goto label03;

        $r18 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("commit: wrote segments file \"");

        $r20 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos pendingCommit>;

        $r21 = virtualinvoke $r20.<org.apache.lucene.index.SegmentInfos: java.lang.String getSegmentsFileName()>();

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r18.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", $r24);

     label03:
        $l0 = r0.<org.apache.lucene.index.IndexWriter: long pendingCommitChangeCount>;

        r0.<org.apache.lucene.index.IndexWriter: long lastCommitChangeCount> = $l0;

        $r10 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $r9 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos pendingCommit>;

        virtualinvoke $r10.<org.apache.lucene.index.SegmentInfos: void updateGeneration(org.apache.lucene.index.SegmentInfos)>($r9);

        $r11 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos pendingCommit>;

        $r12 = virtualinvoke $r11.<org.apache.lucene.index.SegmentInfos: java.util.List createBackupSegmentInfos()>();

        r0.<org.apache.lucene.index.IndexWriter: java.util.List rollbackSegments> = $r12;

        $r14 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        $r13 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos pendingCommit>;

        virtualinvoke $r14.<org.apache.lucene.index.IndexFileDeleter: void checkpoint(org.apache.lucene.index.SegmentInfos,boolean)>($r13, 1);

     label04:
        $r16 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        $r15 = r0.<org.apache.lucene.index.IndexWriter: java.util.Collection filesToCommit>;

        virtualinvoke $r16.<org.apache.lucene.index.IndexFileDeleter: void decRef(java.util.Collection)>($r15);

        r0.<org.apache.lucene.index.IndexWriter: java.util.Collection filesToCommit> = null;

        r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos pendingCommit> = null;

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        goto label07;

     label05:
        $r26 := @caughtexception;

     label06:
        $r28 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        $r27 = r0.<org.apache.lucene.index.IndexWriter: java.util.Collection filesToCommit>;

        virtualinvoke $r28.<org.apache.lucene.index.IndexFileDeleter: void decRef(java.util.Collection)>($r27);

        r0.<org.apache.lucene.index.IndexWriter: java.util.Collection filesToCommit> = null;

        r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos pendingCommit> = null;

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        throw $r26;

     label07:
        goto label09;

     label08:
        $r2 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z0 = virtualinvoke $r2.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z0 == 0 goto label09;

        $r4 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r4.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "commit: pendingCommit == null; skip");

     label09:
        $r29 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z3 = virtualinvoke $r29.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z3 == 0 goto label10;

        $r3 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r3.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "commit: done");

     label10:
        return;

        catch java.lang.Throwable from label01 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
    }

    boolean holdsFullFlushLock()
    {
        org.apache.lucene.index.IndexWriter r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        $r1 = r0.<org.apache.lucene.index.IndexWriter: java.lang.Object fullFlushLock>;

        $z0 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r1);

        return $z0;
    }

    protected final void flush(boolean, boolean) throws java.io.IOException
    {
        org.apache.lucene.index.IndexWriter r0;
        org.apache.lucene.index.MergePolicy$MergeTrigger $r1;
        int $i1;
        boolean z0, $z1, z2;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        z2 := @parameter0: boolean;

        z0 := @parameter1: boolean;

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void ensureOpen(boolean)>(0);

        $z1 = specialinvoke r0.<org.apache.lucene.index.IndexWriter: boolean doFlush(boolean)>(z0);

        if $z1 == 0 goto label1;

        if z2 == 0 goto label1;

        $r1 = <org.apache.lucene.index.MergePolicy$MergeTrigger: org.apache.lucene.index.MergePolicy$MergeTrigger FULL_FLUSH>;

        $i1 = (int) -1;

        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void maybeMerge(org.apache.lucene.index.MergePolicy$MergeTrigger,int)>($r1, $i1);

     label1:
        return;
    }

    private boolean doFlush(boolean) throws java.io.IOException
    {
        java.lang.IllegalStateException $r20;
        org.apache.lucene.index.DocumentsWriter $r3, $r4, $r30;
        java.util.concurrent.atomic.AtomicInteger $r7;
        boolean $z0, $z1, $z2, $z3, z4, $z5, $z6, $z7, $z8, z9, z10, z11;
        org.apache.lucene.index.IndexWriter r0;
        org.apache.lucene.util.InfoStream $r1, $r5, $r6, $r9, $r14, $r22, $r23, $r25, $r26;
        java.lang.StringBuilder $r8, $r10, $r11, $r13, $r15, $r17;
        java.lang.Throwable $r21, $r27, $r28, $r29;
        java.lang.AssertionError $r19;
        java.lang.String $r12, $r16, $r18;
        java.lang.Object $r2;
        java.lang.OutOfMemoryError $r24;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        z4 := @parameter0: boolean;

        $z0 = r0.<org.apache.lucene.index.IndexWriter: boolean hitOOM>;

        if $z0 == 0 goto label01;

        $r20 = new java.lang.IllegalStateException;

        specialinvoke $r20.<java.lang.IllegalStateException: void <init>(java.lang.String)>("this writer hit an OutOfMemoryError; cannot flush");

        throw $r20;

     label01:
        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void doBeforeFlush()>();

        $z1 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z1 != 0 goto label02;

        $z6 = virtualinvoke r0.<org.apache.lucene.index.IndexWriter: boolean testPoint(java.lang.String)>("startDoFlush");

        if $z6 != 0 goto label02;

        $r19 = new java.lang.AssertionError;

        specialinvoke $r19.<java.lang.AssertionError: void <init>()>();

        throw $r19;

     label02:
        z9 = 0;

        z11 = 0;

        z10 = 0;

     label03:
        $r1 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z2 = virtualinvoke $r1.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z2 == 0 goto label04;

        $r9 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  start flush: applyAllDeletes=");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z4);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", $r12);

        $r14 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  index before flush ");

        $r16 = virtualinvoke r0.<org.apache.lucene.index.IndexWriter: java.lang.String segString()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r14.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", $r18);

     label04:
        $r2 = r0.<org.apache.lucene.index.IndexWriter: java.lang.Object fullFlushLock>;

        entermonitor $r2;

     label05:
        $r3 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.DocumentsWriter docWriter>;

        $z3 = virtualinvoke $r3.<org.apache.lucene.index.DocumentsWriter: boolean flushAllThreads()>();

     label06:
        $r4 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.DocumentsWriter docWriter>;

        virtualinvoke $r4.<org.apache.lucene.index.DocumentsWriter: void finishFullFlush(boolean)>(1);

        goto label09;

     label07:
        $r29 := @caughtexception;

     label08:
        $r30 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.DocumentsWriter docWriter>;

        virtualinvoke $r30.<org.apache.lucene.index.DocumentsWriter: void finishFullFlush(boolean)>(0);

        throw $r29;

     label09:
        exitmonitor $r2;

     label10:
        goto label13;

     label11:
        $r28 := @caughtexception;

        exitmonitor $r2;

     label12:
        throw $r28;

     label13:
        entermonitor r0;

     label14:
        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void maybeApplyDeletes(boolean)>(z4);

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void doAfterFlush()>();

        if $z3 != 0 goto label15;

        $r7 = r0.<org.apache.lucene.index.IndexWriter: java.util.concurrent.atomic.AtomicInteger flushCount>;

        virtualinvoke $r7.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

     label15:
        z9 = 1;

        z11 = 1;

        z10 = 1;

        exitmonitor r0;

     label16:
        if 1 != 0 goto label17;

        $r5 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z5 = virtualinvoke $r5.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z5 == 0 goto label17;

        $r6 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r6.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "hit exception during flush");

     label17:
        return $z3;

     label18:
        $r27 := @caughtexception;

        exitmonitor r0;

     label19:
        throw $r27;

     label20:
        $r24 := @caughtexception;

        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void handleOOM(java.lang.OutOfMemoryError,java.lang.String)>($r24, "doFlush");

     label21:
        if z10 != 0 goto label22;

        $r25 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z8 = virtualinvoke $r25.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z8 == 0 goto label22;

        $r26 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r26.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "hit exception during flush");

     label22:
        return 0;

     label23:
        $r21 := @caughtexception;

     label24:
        if z11 != 0 goto label25;

        $r22 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z7 = virtualinvoke $r22.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z7 == 0 goto label25;

        $r23 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r23.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "hit exception during flush");

     label25:
        throw $r21;

        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Throwable from label05 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
        catch java.lang.Throwable from label14 to label16 with label18;
        catch java.lang.Throwable from label18 to label19 with label18;
        catch java.lang.OutOfMemoryError from label03 to label16 with label20;
        catch java.lang.OutOfMemoryError from label18 to label20 with label20;
        catch java.lang.Throwable from label03 to label16 with label23;
        catch java.lang.Throwable from label18 to label21 with label23;
        catch java.lang.Throwable from label23 to label24 with label23;
    }

    final synchronized void maybeApplyDeletes(boolean) throws java.io.IOException
    {
        long $l1;
        int $i0;
        java.lang.String $r10;
        boolean z0, $z1, $z2;
        org.apache.lucene.index.IndexWriter r0;
        org.apache.lucene.util.InfoStream $r1, $r3, $r11, $r12;
        org.apache.lucene.index.BufferedDeletesStream $r5, $r8;
        java.lang.StringBuilder $r2, $r4, $r6, $r7, $r9;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label2;

        $r11 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z2 = virtualinvoke $r11.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z2 == 0 goto label1;

        $r12 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r12.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "apply all deletes during flush");

     label1:
        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void applyAllDeletes()>();

        goto label3;

     label2:
        $r1 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z1 = virtualinvoke $r1.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z1 == 0 goto label3;

        $r3 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("don\'t apply deletes now delTermCount=");

        $r5 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.BufferedDeletesStream bufferedDeletesStream>;

        $i0 = virtualinvoke $r5.<org.apache.lucene.index.BufferedDeletesStream: int numTerms()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytesUsed=");

        $r8 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.BufferedDeletesStream bufferedDeletesStream>;

        $l1 = virtualinvoke $r8.<org.apache.lucene.index.BufferedDeletesStream: long bytesUsed()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", $r10);

     label3:
        return;
    }

    final synchronized void applyAllDeletes() throws java.io.IOException
    {
        org.apache.lucene.index.SegmentInfoPerCommit r12;
        org.apache.lucene.index.BufferedDeletesStream$ApplyDeletesResult $r6;
        java.util.HashSet $r13;
        java.util.concurrent.atomic.AtomicInteger $r1;
        java.lang.String $r20, $r22;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Iterator $r10;
        org.apache.lucene.index.SegmentInfos $r2, $r14, $r24;
        org.apache.lucene.index.IndexWriter r0;
        java.util.List $r5, $r7, $r9, $r19;
        org.apache.lucene.index.BufferedDeletesStream $r3, $r23;
        org.apache.lucene.util.InfoStream $r8, $r17;
        org.apache.lucene.index.IndexWriter$ReaderPool $r4, $r15;
        java.lang.Object $r11;
        java.lang.StringBuilder $r16, $r18, $r21;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        $r1 = r0.<org.apache.lucene.index.IndexWriter: java.util.concurrent.atomic.AtomicInteger flushDeletesCount>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        $r3 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.BufferedDeletesStream bufferedDeletesStream>;

        $r4 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexWriter$ReaderPool readerPool>;

        $r2 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $r5 = virtualinvoke $r2.<org.apache.lucene.index.SegmentInfos: java.util.List asList()>();

        $r6 = virtualinvoke $r3.<org.apache.lucene.index.BufferedDeletesStream: org.apache.lucene.index.BufferedDeletesStream$ApplyDeletesResult applyDeletes(org.apache.lucene.index.IndexWriter$ReaderPool,java.util.List)>($r4, $r5);

        $z0 = $r6.<org.apache.lucene.index.BufferedDeletesStream$ApplyDeletesResult: boolean anyDeletes>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void checkpoint()>();

     label1:
        $z1 = r0.<org.apache.lucene.index.IndexWriter: boolean keepFullyDeletedSegments>;

        if $z1 != 0 goto label6;

        $r7 = $r6.<org.apache.lucene.index.BufferedDeletesStream$ApplyDeletesResult: java.util.List allDeleted>;

        if $r7 == null goto label6;

        $r8 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z2 = virtualinvoke $r8.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z2 == 0 goto label2;

        $r17 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("drop 100% deleted segments: ");

        $r19 = $r6.<org.apache.lucene.index.BufferedDeletesStream$ApplyDeletesResult: java.util.List allDeleted>;

        $r20 = virtualinvoke r0.<org.apache.lucene.index.IndexWriter: java.lang.String segString(java.lang.Iterable)>($r19);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r17.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", $r22);

     label2:
        $r9 = $r6.<org.apache.lucene.index.BufferedDeletesStream$ApplyDeletesResult: java.util.List allDeleted>;

        $r10 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z4 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label5;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (org.apache.lucene.index.SegmentInfoPerCommit) $r11;

        $r13 = r0.<org.apache.lucene.index.IndexWriter: java.util.HashSet mergingSegments>;

        $z3 = virtualinvoke $r13.<java.util.HashSet: boolean contains(java.lang.Object)>(r12);

        if $z3 != 0 goto label4;

        $r14 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        virtualinvoke $r14.<org.apache.lucene.index.SegmentInfos: void remove(org.apache.lucene.index.SegmentInfoPerCommit)>(r12);

        $r15 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexWriter$ReaderPool readerPool>;

        virtualinvoke $r15.<org.apache.lucene.index.IndexWriter$ReaderPool: void drop(org.apache.lucene.index.SegmentInfoPerCommit)>(r12);

     label4:
        goto label3;

     label5:
        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void checkpoint()>();

     label6:
        $r23 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.BufferedDeletesStream bufferedDeletesStream>;

        $r24 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        virtualinvoke $r23.<org.apache.lucene.index.BufferedDeletesStream: void prune(org.apache.lucene.index.SegmentInfos)>($r24);

        return;
    }

    public final long ramSizeInBytes()
    {
        org.apache.lucene.index.IndexWriter r0;
        org.apache.lucene.index.BufferedDeletesStream $r3;
        long $l0, $l1, $l2;
        org.apache.lucene.index.DocumentsWriterFlushControl $r2;
        org.apache.lucene.index.DocumentsWriter $r1;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void ensureOpen()>();

        $r1 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.DocumentsWriter docWriter>;

        $r2 = $r1.<org.apache.lucene.index.DocumentsWriter: org.apache.lucene.index.DocumentsWriterFlushControl flushControl>;

        $l0 = virtualinvoke $r2.<org.apache.lucene.index.DocumentsWriterFlushControl: long netBytes()>();

        $r3 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.BufferedDeletesStream bufferedDeletesStream>;

        $l1 = virtualinvoke $r3.<org.apache.lucene.index.BufferedDeletesStream: long bytesUsed()>();

        $l2 = $l0 + $l1;

        return $l2;
    }

    org.apache.lucene.index.DocumentsWriter getDocsWriter()
    {
        org.apache.lucene.index.IndexWriter r0;
        java.lang.AssertionError $r1;
        boolean $z0, z1;
        org.apache.lucene.index.DocumentsWriter $r2;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        z1 = 0;

        $z0 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        z1 = 1;

        if 1 != 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        if z1 == 0 goto label2;

        $r2 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.DocumentsWriter docWriter>;

        goto label3;

     label2:
        $r2 = null;

     label3:
        return $r2;
    }

    public final synchronized int numRamDocs()
    {
        int $i0;
        org.apache.lucene.index.IndexWriter r0;
        org.apache.lucene.index.DocumentsWriter $r1;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void ensureOpen()>();

        $r1 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.DocumentsWriter docWriter>;

        $i0 = virtualinvoke $r1.<org.apache.lucene.index.DocumentsWriter: int getNumDocs()>();

        return $i0;
    }

    private synchronized void ensureValidMerge(org.apache.lucene.index.MergePolicy$OneMerge)
    {
        org.apache.lucene.index.SegmentInfoPerCommit r4;
        org.apache.lucene.store.Directory $r17;
        java.lang.String $r11, $r14, $r16;
        boolean $z0, $z1;
        java.util.Iterator $r2;
        org.apache.lucene.index.SegmentInfo $r10;
        org.apache.lucene.index.SegmentInfos $r6;
        org.apache.lucene.index.MergePolicy$MergeException $r7;
        java.util.List $r1;
        org.apache.lucene.index.IndexWriter r5;
        org.apache.lucene.index.MergePolicy$OneMerge r0;
        java.lang.Object $r3;
        java.lang.StringBuilder $r8, $r9, $r12, $r13, $r15;

        r5 := @this: org.apache.lucene.index.IndexWriter;

        r0 := @parameter0: org.apache.lucene.index.MergePolicy$OneMerge;

        $r1 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: java.util.List segments>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.lucene.index.SegmentInfoPerCommit) $r3;

        $r6 = r5.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $z1 = virtualinvoke $r6.<org.apache.lucene.index.SegmentInfos: boolean contains(org.apache.lucene.index.SegmentInfoPerCommit)>(r4);

        if $z1 != 0 goto label2;

        $r7 = new org.apache.lucene.index.MergePolicy$MergeException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MergePolicy selected a segment (");

        $r10 = r4.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $r11 = $r10.<org.apache.lucene.index.SegmentInfo: java.lang.String name>;

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") that is not in the current index ");

        $r14 = virtualinvoke r5.<org.apache.lucene.index.IndexWriter: java.lang.String segString()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = r5.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory directory>;

        specialinvoke $r7.<org.apache.lucene.index.MergePolicy$MergeException: void <init>(java.lang.String,org.apache.lucene.store.Directory)>($r16, $r17);

        throw $r7;

     label2:
        goto label1;

     label3:
        return;
    }

    private synchronized org.apache.lucene.index.ReadersAndLiveDocs commitMergedDeletes(org.apache.lucene.index.MergePolicy$OneMerge, org.apache.lucene.index.MergeState) throws java.io.IOException
    {
        org.apache.lucene.index.SegmentInfoPerCommit $r10, r14, $r24, $r29, $r34, $r38, $r63;
        org.apache.lucene.index.SegmentInfo $r11, $r15, $r23, $r30, $r33, $r39, $r48;
        org.apache.lucene.index.ReadersAndLiveDocs $r21, $r26, $r36, r61;
        org.apache.lucene.util.InfoStream $r2, $r3, $r5, $r9, $r53;
        java.lang.StringBuilder $r4, $r6, $r7, $r46, $r47, $r50, $r52, $r54, $r57;
        long $l2, l16;
        java.lang.AssertionError $r12, $r31, $r32, $r40, $r41, $r42, $r43, $r44, $r45, $r60;
        java.lang.String $r8, $r49, $r51, $r56, $r58;
        org.apache.lucene.util.Bits $r19, $r22;
        org.apache.lucene.index.MergePolicy$OneMerge r0;
        org.apache.lucene.index.MergeState r27;
        org.apache.lucene.index.MergePolicy$DocMap $r28, $r37, r62;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18;
        org.apache.lucene.index.IndexWriter r1;
        java.util.List $r16, $r55, $r59;
        int $i0, $i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i17, $i18, i19, $i20, i21, $i22;
        org.apache.lucene.index.SegmentReader $r18;
        org.apache.lucene.index.IndexWriter$ReaderPool $r20, $r25, $r35;
        java.lang.Object $r13, $r17;

        r1 := @this: org.apache.lucene.index.IndexWriter;

        r0 := @parameter0: org.apache.lucene.index.MergePolicy$OneMerge;

        r27 := @parameter1: org.apache.lucene.index.MergeState;

        $z0 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $z18 = virtualinvoke r1.<org.apache.lucene.index.IndexWriter: boolean testPoint(java.lang.String)>("startCommitMergeDeletes");

        if $z18 != 0 goto label01;

        $r60 = new java.lang.AssertionError;

        specialinvoke $r60.<java.lang.AssertionError: void <init>()>();

        throw $r60;

     label01:
        $r59 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: java.util.List segments>;

        $r2 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z1 = virtualinvoke $r2.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z1 == 0 goto label02;

        $r53 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r52 = new java.lang.StringBuilder;

        specialinvoke $r52.<java.lang.StringBuilder: void <init>()>();

        $r54 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("commitMergeDeletes ");

        $r55 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: java.util.List segments>;

        $r56 = virtualinvoke r1.<org.apache.lucene.index.IndexWriter: java.lang.String segString(java.lang.Iterable)>($r55);

        $r57 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r56);

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r53.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", $r58);

     label02:
        i15 = 0;

        l16 = 9223372036854775807L;

        r61 = null;

        r62 = null;

        i17 = 0;

     label03:
        $i18 = interfaceinvoke $r59.<java.util.List: int size()>();

        if i17 >= $i18 goto label23;

        $r13 = interfaceinvoke $r59.<java.util.List: java.lang.Object get(int)>(i17);

        r14 = (org.apache.lucene.index.SegmentInfoPerCommit) $r13;

        $l2 = virtualinvoke r14.<org.apache.lucene.index.SegmentInfoPerCommit: long getBufferedDeletesGen()>();

        l16 = staticinvoke <java.lang.Math: long min(long,long)>($l2, l16);

        $r15 = r14.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $i3 = virtualinvoke $r15.<org.apache.lucene.index.SegmentInfo: int getDocCount()>();

        $r16 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: java.util.List readers>;

        $r17 = interfaceinvoke $r16.<java.util.List: java.lang.Object get(int)>(i17);

        $r18 = (org.apache.lucene.index.SegmentReader) $r17;

        $r19 = virtualinvoke $r18.<org.apache.lucene.index.SegmentReader: org.apache.lucene.util.Bits getLiveDocs()>();

        $r20 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexWriter$ReaderPool readerPool>;

        $r21 = virtualinvoke $r20.<org.apache.lucene.index.IndexWriter$ReaderPool: org.apache.lucene.index.ReadersAndLiveDocs get(org.apache.lucene.index.SegmentInfoPerCommit,boolean)>(r14, 0);

        $z4 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z4 != 0 goto label04;

        if $r21 != null goto label04;

        $r45 = new java.lang.AssertionError;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("seg=");

        $r48 = r14.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $r49 = $r48.<org.apache.lucene.index.SegmentInfo: java.lang.String name>;

        $r50 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r49);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r45.<java.lang.AssertionError: void <init>(java.lang.Object)>($r51);

        throw $r45;

     label04:
        $r22 = virtualinvoke $r21.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.util.Bits getLiveDocs()>();

        if $r19 == null goto label15;

        $z9 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z9 != 0 goto label05;

        if $r22 != null goto label05;

        $r44 = new java.lang.AssertionError;

        specialinvoke $r44.<java.lang.AssertionError: void <init>()>();

        throw $r44;

     label05:
        $z10 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z10 != 0 goto label06;

        $i14 = interfaceinvoke $r19.<org.apache.lucene.util.Bits: int length()>();

        if $i14 == $i3 goto label06;

        $r43 = new java.lang.AssertionError;

        specialinvoke $r43.<java.lang.AssertionError: void <init>()>();

        throw $r43;

     label06:
        $z11 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z11 != 0 goto label07;

        $i13 = interfaceinvoke $r22.<org.apache.lucene.util.Bits: int length()>();

        if $i13 == $i3 goto label07;

        $r42 = new java.lang.AssertionError;

        specialinvoke $r42.<java.lang.AssertionError: void <init>()>();

        throw $r42;

     label07:
        if $r22 == $r19 goto label14;

        i19 = 0;

     label08:
        if i19 >= $i3 goto label13;

        $z12 = interfaceinvoke $r19.<org.apache.lucene.util.Bits: boolean get(int)>(i19);

        if $z12 != 0 goto label09;

        $z16 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z16 != 0 goto label12;

        $z17 = interfaceinvoke $r22.<org.apache.lucene.util.Bits: boolean get(int)>(i19);

        if $z17 == 0 goto label12;

        $r41 = new java.lang.AssertionError;

        specialinvoke $r41.<java.lang.AssertionError: void <init>()>();

        throw $r41;

     label09:
        $z13 = interfaceinvoke $r22.<org.apache.lucene.util.Bits: boolean get(int)>(i19);

        if $z13 != 0 goto label11;

        if r61 != null goto label10;

        $r35 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexWriter$ReaderPool readerPool>;

        $r34 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r36 = virtualinvoke $r35.<org.apache.lucene.index.IndexWriter$ReaderPool: org.apache.lucene.index.ReadersAndLiveDocs get(org.apache.lucene.index.SegmentInfoPerCommit,boolean)>($r34, 1);

        r61 = $r36;

        virtualinvoke $r36.<org.apache.lucene.index.ReadersAndLiveDocs: void initWritableLiveDocs()>();

        $r37 = virtualinvoke r0.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.MergePolicy$DocMap getDocMap(org.apache.lucene.index.MergeState)>(r27);

        r62 = $r37;

        $z14 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z14 != 0 goto label10;

        $r38 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r39 = $r38.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $i12 = virtualinvoke $r39.<org.apache.lucene.index.SegmentInfo: int getDocCount()>();

        $z15 = virtualinvoke $r37.<org.apache.lucene.index.MergePolicy$DocMap: boolean isConsistent(int)>($i12);

        if $z15 != 0 goto label10;

        $r40 = new java.lang.AssertionError;

        specialinvoke $r40.<java.lang.AssertionError: void <init>()>();

        throw $r40;

     label10:
        $i20 = virtualinvoke r62.<org.apache.lucene.index.MergePolicy$DocMap: int map(int)>(i15);

        virtualinvoke r61.<org.apache.lucene.index.ReadersAndLiveDocs: boolean delete(int)>($i20);

     label11:
        i15 = i15 + 1;

     label12:
        i19 = i19 + 1;

        goto label08;

     label13:
        goto label22;

     label14:
        $r33 = r14.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $i7 = virtualinvoke $r33.<org.apache.lucene.index.SegmentInfo: int getDocCount()>();

        $i8 = virtualinvoke r14.<org.apache.lucene.index.SegmentInfoPerCommit: int getDelCount()>();

        $i9 = $i7 - $i8;

        $i10 = virtualinvoke $r21.<org.apache.lucene.index.ReadersAndLiveDocs: int getPendingDeleteCount()>();

        $i11 = $i9 - $i10;

        i15 = i15 + $i11;

        goto label22;

     label15:
        if $r22 == null goto label21;

        $z5 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z5 != 0 goto label16;

        $i6 = interfaceinvoke $r22.<org.apache.lucene.util.Bits: int length()>();

        if $i6 == $i3 goto label16;

        $r32 = new java.lang.AssertionError;

        specialinvoke $r32.<java.lang.AssertionError: void <init>()>();

        throw $r32;

     label16:
        i21 = 0;

     label17:
        if i21 >= $i3 goto label20;

        $z6 = interfaceinvoke $r22.<org.apache.lucene.util.Bits: boolean get(int)>(i21);

        if $z6 != 0 goto label19;

        if r61 != null goto label18;

        $r25 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexWriter$ReaderPool readerPool>;

        $r24 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r26 = virtualinvoke $r25.<org.apache.lucene.index.IndexWriter$ReaderPool: org.apache.lucene.index.ReadersAndLiveDocs get(org.apache.lucene.index.SegmentInfoPerCommit,boolean)>($r24, 1);

        r61 = $r26;

        virtualinvoke $r26.<org.apache.lucene.index.ReadersAndLiveDocs: void initWritableLiveDocs()>();

        $r28 = virtualinvoke r0.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.MergePolicy$DocMap getDocMap(org.apache.lucene.index.MergeState)>(r27);

        r62 = $r28;

        $z7 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z7 != 0 goto label18;

        $r29 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r30 = $r29.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $i5 = virtualinvoke $r30.<org.apache.lucene.index.SegmentInfo: int getDocCount()>();

        $z8 = virtualinvoke $r28.<org.apache.lucene.index.MergePolicy$DocMap: boolean isConsistent(int)>($i5);

        if $z8 != 0 goto label18;

        $r31 = new java.lang.AssertionError;

        specialinvoke $r31.<java.lang.AssertionError: void <init>()>();

        throw $r31;

     label18:
        $i22 = virtualinvoke r62.<org.apache.lucene.index.MergePolicy$DocMap: int map(int)>(i15);

        virtualinvoke r61.<org.apache.lucene.index.ReadersAndLiveDocs: boolean delete(int)>($i22);

     label19:
        i15 = i15 + 1;

        i21 = i21 + 1;

        goto label17;

     label20:
        goto label22;

     label21:
        $r23 = r14.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $i4 = virtualinvoke $r23.<org.apache.lucene.index.SegmentInfo: int getDocCount()>();

        i15 = i15 + $i4;

     label22:
        i17 = i17 + 1;

        goto label03;

     label23:
        $z2 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z2 != 0 goto label24;

        $r10 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r11 = $r10.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $i1 = virtualinvoke $r11.<org.apache.lucene.index.SegmentInfo: int getDocCount()>();

        if i15 == $i1 goto label24;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label24:
        $r3 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z3 = virtualinvoke $r3.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z3 == 0 goto label26;

        if r61 != null goto label25;

        $r9 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r9.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "no new deletes since merge started");

        goto label26;

     label25:
        $r5 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $i0 = virtualinvoke r61.<org.apache.lucene.index.ReadersAndLiveDocs: int getPendingDeleteCount()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" new deletes since merge started");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", $r8);

     label26:
        $r63 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        virtualinvoke $r63.<org.apache.lucene.index.SegmentInfoPerCommit: void setBufferedDeletesGen(long)>(l16);

        return r61;
    }

    private synchronized boolean commitMerge(org.apache.lucene.index.MergePolicy$OneMerge, org.apache.lucene.index.MergeState) throws java.io.IOException
    {
        org.apache.lucene.index.SegmentInfoPerCommit $r3, $r8, $r11, $r19, $r21, $r24, $r28, $r36, $r41, $r43, $r45, $r50;
        org.apache.lucene.index.IndexFileDeleter $r22, $r51, $r74;
        java.util.Map $r9, $r12;
        org.apache.lucene.index.SegmentInfo $r4, $r29, $r42, $r44;
        org.apache.lucene.index.ReadersAndLiveDocs r6, $r70;
        org.apache.lucene.util.InfoStream $r1, $r14, $r34, $r49, $r53, $r56, $r71, $r75;
        java.lang.StringBuilder $r15, $r17, $r35, $r37, $r38, $r39, $r57, $r60, $r61, $r63, $r78, $r82, $r86;
        java.lang.Throwable $r67, $r68, $r69;
        java.lang.AssertionError $r76, $r79, $r80, $r81, $r83, $r84, $r85;
        java.lang.String $r16, $r18, $r40, $r59, $r62, $r64, $r72;
        org.apache.lucene.index.MergePolicy$OneMerge r2;
        java.lang.IllegalStateException $r77;
        org.apache.lucene.index.MergeState r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6, z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z20, $z22, $z23, $z24, $z25, $z26, $z27, $z28;
        java.util.Collection $r23, $r52;
        org.apache.lucene.index.SegmentInfos $r25, $r46, $r73;
        org.apache.lucene.index.IndexWriter r0;
        java.util.List $r7, $r31, $r58;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10;
        java.lang.Boolean $r10;
        org.apache.lucene.index.IndexWriter$ReaderPool $r20, $r27;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        r2 := @parameter0: org.apache.lucene.index.MergePolicy$OneMerge;

        r5 := @parameter1: org.apache.lucene.index.MergeState;

        $z0 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $z17 = virtualinvoke r0.<org.apache.lucene.index.IndexWriter: boolean testPoint(java.lang.String)>("startCommitMerge");

        if $z17 != 0 goto label01;

        $r76 = new java.lang.AssertionError;

        specialinvoke $r76.<java.lang.AssertionError: void <init>()>();

        throw $r76;

     label01:
        $z1 = r0.<org.apache.lucene.index.IndexWriter: boolean hitOOM>;

        if $z1 == 0 goto label02;

        $r77 = new java.lang.IllegalStateException;

        specialinvoke $r77.<java.lang.IllegalStateException: void <init>(java.lang.String)>("this writer hit an OutOfMemoryError; cannot complete merge");

        throw $r77;

     label02:
        $r1 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z2 = virtualinvoke $r1.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z2 == 0 goto label03;

        $r56 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r78 = new java.lang.StringBuilder;

        specialinvoke $r78.<java.lang.StringBuilder: void <init>()>();

        $r57 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("commitMerge: ");

        $r58 = r2.<org.apache.lucene.index.MergePolicy$OneMerge: java.util.List segments>;

        $r59 = virtualinvoke r0.<org.apache.lucene.index.IndexWriter: java.lang.String segString(java.lang.Iterable)>($r58);

        $r60 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r59);

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" index=");

        $r62 = virtualinvoke r0.<org.apache.lucene.index.IndexWriter: java.lang.String segString()>();

        $r63 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r62);

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r56.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", $r64);

     label03:
        $z3 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z3 != 0 goto label04;

        $z16 = r2.<org.apache.lucene.index.MergePolicy$OneMerge: boolean registerDone>;

        if $z16 != 0 goto label04;

        $r79 = new java.lang.AssertionError;

        specialinvoke $r79.<java.lang.AssertionError: void <init>()>();

        throw $r79;

     label04:
        $z4 = virtualinvoke r2.<org.apache.lucene.index.MergePolicy$OneMerge: boolean isAborted()>();

        if $z4 == 0 goto label06;

        $r49 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z15 = virtualinvoke $r49.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z15 == 0 goto label05;

        $r53 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r53.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "commitMerge: skip: it was aborted");

     label05:
        $r51 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        $r50 = r2.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r52 = virtualinvoke $r50.<org.apache.lucene.index.SegmentInfoPerCommit: java.util.Collection files()>();

        virtualinvoke $r51.<org.apache.lucene.index.IndexFileDeleter: void deleteNewFiles(java.util.Collection)>($r52);

        return 0;

     label06:
        $r3 = r2.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r4 = $r3.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $i0 = virtualinvoke $r4.<org.apache.lucene.index.SegmentInfo: int getDocCount()>();

        if $i0 != 0 goto label07;

        $r70 = null;

        goto label08;

     label07:
        $r70 = specialinvoke r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.ReadersAndLiveDocs commitMergedDeletes(org.apache.lucene.index.MergePolicy$OneMerge,org.apache.lucene.index.MergeState)>(r2, r5);

     label08:
        r6 = $r70;

        $z5 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z5 != 0 goto label09;

        if $r70 == null goto label09;

        $i8 = virtualinvoke $r70.<org.apache.lucene.index.ReadersAndLiveDocs: int getPendingDeleteCount()>();

        if $i8 != 0 goto label09;

        $r80 = new java.lang.AssertionError;

        specialinvoke $r80.<java.lang.AssertionError: void <init>()>();

        throw $r80;

     label09:
        $z18 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z18 != 0 goto label10;

        $r46 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $r45 = r2.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $z14 = virtualinvoke $r46.<org.apache.lucene.index.SegmentInfos: boolean contains(org.apache.lucene.index.SegmentInfoPerCommit)>($r45);

        if $z14 == 0 goto label10;

        $r81 = new java.lang.AssertionError;

        specialinvoke $r81.<java.lang.AssertionError: void <init>()>();

        throw $r81;

     label10:
        $r7 = r2.<org.apache.lucene.index.MergePolicy$OneMerge: java.util.List segments>;

        $i1 = interfaceinvoke $r7.<java.util.List: int size()>();

        if $i1 == 0 goto label11;

        $r41 = r2.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r42 = $r41.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $i5 = virtualinvoke $r42.<org.apache.lucene.index.SegmentInfo: int getDocCount()>();

        if $i5 == 0 goto label11;

        if r6 == null goto label12;

        $i6 = virtualinvoke r6.<org.apache.lucene.index.ReadersAndLiveDocs: int getPendingDeleteCount()>();

        $r43 = r2.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r44 = $r43.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $i7 = virtualinvoke $r44.<org.apache.lucene.index.SegmentInfo: int getDocCount()>();

        if $i6 != $i7 goto label12;

     label11:
        $z26 = 1;

        $z25 = 1;

        goto label13;

     label12:
        $z26 = 0;

        $z25 = 0;

     label13:
        z6 = $z26;

        $r71 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z20 = virtualinvoke $r71.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z20 == 0 goto label16;

        if $z25 == 0 goto label16;

        $r34 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r82 = new java.lang.StringBuilder;

        specialinvoke $r82.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("merged segment ");

        $r36 = r2.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is 100% deleted");

        $z13 = r0.<org.apache.lucene.index.IndexWriter: boolean keepFullyDeletedSegments>;

        if $z13 == 0 goto label14;

        $r72 = "";

        goto label15;

     label14:
        $r72 = "; skipping insert";

     label15:
        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r72);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r34.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", $r40);

     label16:
        if z6 == 0 goto label17;

        $z12 = r0.<org.apache.lucene.index.IndexWriter: boolean keepFullyDeletedSegments>;

        if $z12 != 0 goto label17;

        $z28 = 1;

        $z27 = 1;

        goto label18;

     label17:
        $z28 = 0;

        $z27 = 0;

     label18:
        z7 = $z27;

        $z22 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z22 != 0 goto label19;

        $r31 = r2.<org.apache.lucene.index.MergePolicy$OneMerge: java.util.List segments>;

        $i4 = interfaceinvoke $r31.<java.util.List: int size()>();

        if $i4 > 0 goto label19;

        if $z28 != 0 goto label19;

        $r83 = new java.lang.AssertionError;

        specialinvoke $r83.<java.lang.AssertionError: void <init>()>();

        throw $r83;

     label19:
        $z23 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z23 != 0 goto label20;

        $r28 = r2.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r29 = $r28.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $i3 = virtualinvoke $r29.<org.apache.lucene.index.SegmentInfo: int getDocCount()>();

        if $i3 != 0 goto label20;

        $z11 = r0.<org.apache.lucene.index.IndexWriter: boolean keepFullyDeletedSegments>;

        if $z11 != 0 goto label20;

        if z7 != 0 goto label20;

        $r84 = new java.lang.AssertionError;

        specialinvoke $r84.<java.lang.AssertionError: void <init>()>();

        throw $r84;

     label20:
        $r73 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        virtualinvoke $r73.<org.apache.lucene.index.SegmentInfos: void applyMergeChanges(org.apache.lucene.index.MergePolicy$OneMerge,boolean)>(r2, z7);

        if r6 == null goto label22;

        if z7 == 0 goto label21;

        virtualinvoke r6.<org.apache.lucene.index.ReadersAndLiveDocs: void dropChanges()>();

     label21:
        $r27 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexWriter$ReaderPool readerPool>;

        virtualinvoke $r27.<org.apache.lucene.index.IndexWriter$ReaderPool: void release(org.apache.lucene.index.ReadersAndLiveDocs)>(r6);

     label22:
        if z7 == 0 goto label24;

        $z9 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z9 != 0 goto label23;

        $r25 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $r24 = r2.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $z10 = virtualinvoke $r25.<org.apache.lucene.index.SegmentInfos: boolean contains(org.apache.lucene.index.SegmentInfoPerCommit)>($r24);

        if $z10 == 0 goto label23;

        $r85 = new java.lang.AssertionError;

        specialinvoke $r85.<java.lang.AssertionError: void <init>()>();

        throw $r85;

     label23:
        $r20 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexWriter$ReaderPool readerPool>;

        $r19 = r2.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        virtualinvoke $r20.<org.apache.lucene.index.IndexWriter$ReaderPool: void drop(org.apache.lucene.index.SegmentInfoPerCommit)>($r19);

        $r22 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        $r21 = r2.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r23 = virtualinvoke $r21.<org.apache.lucene.index.SegmentInfoPerCommit: java.util.Collection files()>();

        virtualinvoke $r22.<org.apache.lucene.index.IndexFileDeleter: void deleteNewFiles(java.util.Collection)>($r23);

     label24:
        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void closeMergeReaders(org.apache.lucene.index.MergePolicy$OneMerge,boolean)>(r2, 0);

     label25:
        if 1 == 0 goto label26;

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void checkpoint()>();

        goto label35;

     label26:
        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void checkpoint()>();

     label27:
        goto label35;

     label28:
        $r69 := @caughtexception;

        goto label35;

     label29:
        $r68 := @caughtexception;

     label30:
        if 0 == 0 goto label31;

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void checkpoint()>();

        goto label34;

     label31:
        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void checkpoint()>();

     label32:
        goto label34;

     label33:
        $r67 := @caughtexception;

     label34:
        throw $r68;

     label35:
        $r74 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        virtualinvoke $r74.<org.apache.lucene.index.IndexFileDeleter: void deletePendingFiles()>();

        $r75 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z24 = virtualinvoke $r75.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z24 == 0 goto label36;

        $r14 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r86 = new java.lang.StringBuilder;

        specialinvoke $r86.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("after commitMerge: ");

        $r16 = virtualinvoke r0.<org.apache.lucene.index.IndexWriter: java.lang.String segString()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r14.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", $r18);

     label36:
        $i2 = r2.<org.apache.lucene.index.MergePolicy$OneMerge: int maxNumSegments>;

        $i10 = (int) -1;

        if $i2 == $i10 goto label37;

        if z7 != 0 goto label37;

        $r9 = r0.<org.apache.lucene.index.IndexWriter: java.util.Map segmentsToMerge>;

        $r8 = r2.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $z8 = interfaceinvoke $r9.<java.util.Map: boolean containsKey(java.lang.Object)>($r8);

        if $z8 != 0 goto label37;

        $r12 = r0.<org.apache.lucene.index.IndexWriter: java.util.Map segmentsToMerge>;

        $r11 = r2.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r10 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, $r10);

     label37:
        return 1;

        catch java.lang.Throwable from label26 to label27 with label28;
        catch java.lang.Throwable from label24 to label25 with label29;
        catch java.lang.Throwable from label31 to label32 with label33;
        catch java.lang.Throwable from label29 to label30 with label29;
    }

    private final void handleMergeException(java.lang.Throwable, org.apache.lucene.index.MergePolicy$OneMerge) throws java.io.IOException
    {
        java.lang.Throwable r3;
        java.lang.Error $r5;
        java.lang.String $r13, $r17;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.io.IOException $r7;
        java.lang.RuntimeException $r4, $r6;
        org.apache.lucene.index.IndexWriter r0;
        java.util.List $r12;
        org.apache.lucene.index.MergePolicy$OneMerge r2;
        org.apache.lucene.util.InfoStream $r1, $r10;
        org.apache.lucene.index.MergePolicy$MergeAbortedException $r8;
        java.lang.StringBuilder $r9, $r11, $r14, $r15, $r16;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        r3 := @parameter0: java.lang.Throwable;

        r2 := @parameter1: org.apache.lucene.index.MergePolicy$OneMerge;

        $r1 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z0 = virtualinvoke $r1.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z0 == 0 goto label1;

        $r10 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("handleMergeException: merge=");

        $r12 = r2.<org.apache.lucene.index.MergePolicy$OneMerge: java.util.List segments>;

        $r13 = virtualinvoke r0.<org.apache.lucene.index.IndexWriter: java.lang.String segString(java.lang.Iterable)>($r12);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" exc=");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", $r17);

     label1:
        virtualinvoke r2.<org.apache.lucene.index.MergePolicy$OneMerge: void setException(java.lang.Throwable)>(r3);

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void addMergeException(org.apache.lucene.index.MergePolicy$OneMerge)>(r2);

        $z1 = r3 instanceof org.apache.lucene.index.MergePolicy$MergeAbortedException;

        if $z1 == 0 goto label2;

        $z5 = r2.<org.apache.lucene.index.MergePolicy$OneMerge: boolean isExternal>;

        if $z5 == 0 goto label6;

        $r8 = (org.apache.lucene.index.MergePolicy$MergeAbortedException) r3;

        throw $r8;

     label2:
        $z2 = r3 instanceof java.io.IOException;

        if $z2 == 0 goto label3;

        $r7 = (java.io.IOException) r3;

        throw $r7;

     label3:
        $z3 = r3 instanceof java.lang.RuntimeException;

        if $z3 == 0 goto label4;

        $r6 = (java.lang.RuntimeException) r3;

        throw $r6;

     label4:
        $z4 = r3 instanceof java.lang.Error;

        if $z4 == 0 goto label5;

        $r5 = (java.lang.Error) r3;

        throw $r5;

     label5:
        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r3);

        throw $r4;

     label6:
        return;
    }

    public void merge(org.apache.lucene.index.MergePolicy$OneMerge) throws java.io.IOException
    {
        org.apache.lucene.index.SegmentInfoPerCommit $r3, $r10, $r17, $r18, $r20, $r40, $r41, $r43;
        org.apache.lucene.index.IndexFileDeleter $r23, $r46;
        org.apache.lucene.index.SegmentInfo $r11, $r21, $r44;
        org.apache.lucene.util.InfoStream $r2, $r4, $r6, $r16, $r24, $r26, $r39, $r47;
        java.lang.StringBuilder $r7, $r8, $r9, $r12, $r13, $r27, $r30, $r31, $r33, $r50, $r51;
        java.lang.Throwable $r36, $r37, $r48, $r49;
        long $l0, $l1, $l2;
        java.lang.String $r14, $r22, $r29, $r32, $r34, $r45;
        org.apache.lucene.index.MergePolicy$OneMerge r1;
        java.lang.OutOfMemoryError $r35;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, z13, z14, z15, z16, z17;
        org.apache.lucene.index.SegmentInfos $r19, $r42;
        org.apache.lucene.index.IndexWriter r0;
        java.util.List $r28;
        int $i3, $i4, $i5, $i6, $i7, $i9, $i11;
        org.apache.lucene.index.MergePolicy$MergeTrigger $r15, $r38;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        r1 := @parameter0: org.apache.lucene.index.MergePolicy$OneMerge;

        z13 = 0;

        z17 = 0;

        z16 = 0;

        z15 = 0;

        z14 = 0;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

     label01:
        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void mergeInit(org.apache.lucene.index.MergePolicy$OneMerge)>(r1);

        $r2 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z0 = virtualinvoke $r2.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z0 == 0 goto label02;

        $r26 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("now merge\n  merge=");

        $r28 = r1.<org.apache.lucene.index.MergePolicy$OneMerge: java.util.List segments>;

        $r29 = virtualinvoke r0.<org.apache.lucene.index.IndexWriter: java.lang.String segString(java.lang.Iterable)>($r28);

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n  index=");

        $r32 = virtualinvoke r0.<org.apache.lucene.index.IndexWriter: java.lang.String segString()>();

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r26.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", $r34);

     label02:
        specialinvoke r0.<org.apache.lucene.index.IndexWriter: int mergeMiddle(org.apache.lucene.index.MergePolicy$OneMerge)>(r1);

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void mergeSuccess(org.apache.lucene.index.MergePolicy$OneMerge)>(r1);

        z13 = 1;

        z17 = 1;

        z16 = 1;

        z15 = 1;

        z14 = 1;

     label03:
        goto label05;

     label04:
        $r49 := @caughtexception;

        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void handleMergeException(java.lang.Throwable,org.apache.lucene.index.MergePolicy$OneMerge)>($r49, r1);

     label05:
        entermonitor r0;

     label06:
        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void mergeFinish(org.apache.lucene.index.MergePolicy$OneMerge)>(r1);

        if z17 != 0 goto label08;

        $r16 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z6 = virtualinvoke $r16.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z6 == 0 goto label07;

        $r24 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r24.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "hit exception during merge");

     label07:
        $r17 = r1.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        if $r17 == null goto label08;

        $r19 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $r18 = r1.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $z7 = virtualinvoke $r19.<org.apache.lucene.index.SegmentInfos: boolean contains(org.apache.lucene.index.SegmentInfoPerCommit)>($r18);

        if $z7 != 0 goto label08;

        $r23 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        $r20 = r1.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r21 = $r20.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $r22 = $r21.<org.apache.lucene.index.SegmentInfo: java.lang.String name>;

        virtualinvoke $r23.<org.apache.lucene.index.IndexFileDeleter: void refresh(java.lang.String)>($r22);

     label08:
        if z15 == 0 goto label10;

        $z3 = virtualinvoke r1.<org.apache.lucene.index.MergePolicy$OneMerge: boolean isAborted()>();

        if $z3 != 0 goto label10;

        $i4 = r1.<org.apache.lucene.index.MergePolicy$OneMerge: int maxNumSegments>;

        $i9 = (int) -1;

        if $i4 != $i9 goto label09;

        $z4 = r0.<org.apache.lucene.index.IndexWriter: boolean closed>;

        if $z4 != 0 goto label10;

        $z5 = r0.<org.apache.lucene.index.IndexWriter: boolean closing>;

        if $z5 != 0 goto label10;

     label09:
        $r15 = <org.apache.lucene.index.MergePolicy$MergeTrigger: org.apache.lucene.index.MergePolicy$MergeTrigger MERGE_FINISHED>;

        $i5 = r1.<org.apache.lucene.index.MergePolicy$OneMerge: int maxNumSegments>;

        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void updatePendingMerges(org.apache.lucene.index.MergePolicy$MergeTrigger,int)>($r15, $i5);

     label10:
        exitmonitor r0;

     label11:
        goto label14;

     label12:
        $r48 := @caughtexception;

        exitmonitor r0;

     label13:
        throw $r48;

     label14:
        goto label26;

     label15:
        $r37 := @caughtexception;

     label16:
        entermonitor r0;

     label17:
        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void mergeFinish(org.apache.lucene.index.MergePolicy$OneMerge)>(r1);

        if z14 != 0 goto label19;

        $r39 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z11 = virtualinvoke $r39.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z11 == 0 goto label18;

        $r47 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r47.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "hit exception during merge");

     label18:
        $r40 = r1.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        if $r40 == null goto label19;

        $r42 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $r41 = r1.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $z12 = virtualinvoke $r42.<org.apache.lucene.index.SegmentInfos: boolean contains(org.apache.lucene.index.SegmentInfoPerCommit)>($r41);

        if $z12 != 0 goto label19;

        $r46 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        $r43 = r1.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r44 = $r43.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $r45 = $r44.<org.apache.lucene.index.SegmentInfo: java.lang.String name>;

        virtualinvoke $r46.<org.apache.lucene.index.IndexFileDeleter: void refresh(java.lang.String)>($r45);

     label19:
        if z16 == 0 goto label21;

        $z8 = virtualinvoke r1.<org.apache.lucene.index.MergePolicy$OneMerge: boolean isAborted()>();

        if $z8 != 0 goto label21;

        $i6 = r1.<org.apache.lucene.index.MergePolicy$OneMerge: int maxNumSegments>;

        $i11 = (int) -1;

        if $i6 != $i11 goto label20;

        $z9 = r0.<org.apache.lucene.index.IndexWriter: boolean closed>;

        if $z9 != 0 goto label21;

        $z10 = r0.<org.apache.lucene.index.IndexWriter: boolean closing>;

        if $z10 != 0 goto label21;

     label20:
        $r38 = <org.apache.lucene.index.MergePolicy$MergeTrigger: org.apache.lucene.index.MergePolicy$MergeTrigger MERGE_FINISHED>;

        $i7 = r1.<org.apache.lucene.index.MergePolicy$OneMerge: int maxNumSegments>;

        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void updatePendingMerges(org.apache.lucene.index.MergePolicy$MergeTrigger,int)>($r38, $i7);

     label21:
        exitmonitor r0;

     label22:
        goto label25;

     label23:
        $r36 := @caughtexception;

        exitmonitor r0;

     label24:
        throw $r36;

     label25:
        throw $r37;

     label26:
        goto label28;

     label27:
        $r35 := @caughtexception;

        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void handleOOM(java.lang.OutOfMemoryError,java.lang.String)>($r35, "merge");

     label28:
        $r3 = r1.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        if $r3 == null goto label29;

        $z1 = virtualinvoke r1.<org.apache.lucene.index.MergePolicy$OneMerge: boolean isAborted()>();

        if $z1 != 0 goto label29;

        $r4 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z2 = virtualinvoke $r4.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z2 == 0 goto label29;

        $r6 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("merge time ");

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l2 = $l1 - $l0;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" msec for ");

        $r10 = r1.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r11 = $r10.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $i3 = virtualinvoke $r11.<org.apache.lucene.index.SegmentInfo: int getDocCount()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" docs");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", $r14);

     label29:
        return;

        catch java.lang.Throwable from label01 to label03 with label04;
        catch java.lang.Throwable from label06 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
        catch java.lang.Throwable from label01 to label05 with label15;
        catch java.lang.Throwable from label17 to label22 with label23;
        catch java.lang.Throwable from label23 to label24 with label23;
        catch java.lang.Throwable from label15 to label16 with label15;
        catch java.lang.OutOfMemoryError from label01 to label26 with label27;
    }

    void mergeSuccess(org.apache.lucene.index.MergePolicy$OneMerge)
    {
        org.apache.lucene.index.IndexWriter r0;
        org.apache.lucene.index.MergePolicy$OneMerge r1;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        r1 := @parameter0: org.apache.lucene.index.MergePolicy$OneMerge;

        return;
    }

    final synchronized boolean registerMerge(org.apache.lucene.index.MergePolicy$OneMerge) throws java.io.IOException
    {
        org.apache.lucene.index.SegmentInfoPerCommit r86, r87, r90, r91;
        byte $b12, $b14;
        java.util.Map $r52;
        org.apache.lucene.index.SegmentInfo $r10, $r11, $r12, $r32, $r49;
        org.apache.lucene.util.InfoStream $r5, $r6, $r17, $r20, $r28, $r29, $r36, $r53, $r55, $r65, $r67;
        java.lang.StringBuilder $r19, $r21, $r23, $r25, $r34, $r35, $r37, $r40, $r41, $r43, $r44, $r54, $r56, $r59, $r60, $r62, $r63, $r66, $r68, $r71, $r72, $r74, $r75, $r78, $r79, $r82;
        long $l0, $l4, $l5, $l6, $l7, $l8, $l9, $l11, $l13;
        org.apache.lucene.index.MergePolicy$OneMerge r0;
        java.util.HashSet $r18, $r26, $r47;
        int $i1, $i2, $i3, $i10, $i15, $i16, $i17;
        java.util.LinkedList $r4, $r42;
        java.lang.Object $r9, $r16, $r31, $r46;
        java.lang.AssertionError $r13, $r14, $r15, $r85;
        java.lang.String $r22, $r24, $r30, $r33, $r39, $r45, $r58, $r61, $r64, $r70, $r73, $r76, $r81, $r83;
        org.apache.lucene.store.Directory $r50, $r51;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, z17, $z18, $z19;
        org.apache.lucene.index.SegmentInfos $r48;
        org.apache.lucene.index.IndexWriter r1;
        java.util.List $r2, $r7, $r38, $r57, $r69, $r80, $r84, $r88;
        org.apache.lucene.index.MergePolicy$MergeAbortedException $r77;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        java.util.Iterator $r3, $r8, $r27, $r89;

        r1 := @this: org.apache.lucene.index.IndexWriter;

        r0 := @parameter0: org.apache.lucene.index.MergePolicy$OneMerge;

        $z0 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: boolean registerDone>;

        if $z0 == 0 goto label01;

        return 1;

     label01:
        $z1 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z1 != 0 goto label02;

        $r84 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: java.util.List segments>;

        $i17 = interfaceinvoke $r84.<java.util.List: int size()>();

        if $i17 > 0 goto label02;

        $r85 = new java.lang.AssertionError;

        specialinvoke $r85.<java.lang.AssertionError: void <init>()>();

        throw $r85;

     label02:
        $z2 = r1.<org.apache.lucene.index.IndexWriter: boolean stopMerges>;

        if $z2 == 0 goto label03;

        virtualinvoke r0.<org.apache.lucene.index.MergePolicy$OneMerge: void abort()>();

        $r77 = new org.apache.lucene.index.MergePolicy$MergeAbortedException;

        $r78 = new java.lang.StringBuilder;

        specialinvoke $r78.<java.lang.StringBuilder: void <init>()>();

        $r79 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("merge is aborted: ");

        $r80 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: java.util.List segments>;

        $r81 = virtualinvoke r1.<org.apache.lucene.index.IndexWriter: java.lang.String segString(java.lang.Iterable)>($r80);

        $r82 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r81);

        $r83 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r77.<org.apache.lucene.index.MergePolicy$MergeAbortedException: void <init>(java.lang.String)>($r83);

        throw $r77;

     label03:
        z17 = 0;

        $r2 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: java.util.List segments>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z3 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label11;

        $r46 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r86 = (org.apache.lucene.index.SegmentInfoPerCommit) $r46;

        $r47 = r1.<org.apache.lucene.index.IndexWriter: java.util.HashSet mergingSegments>;

        $z12 = virtualinvoke $r47.<java.util.HashSet: boolean contains(java.lang.Object)>(r86);

        if $z12 == 0 goto label06;

        $r65 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z16 = virtualinvoke $r65.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z16 == 0 goto label05;

        $r67 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r66 = new java.lang.StringBuilder;

        specialinvoke $r66.<java.lang.StringBuilder: void <init>()>();

        $r68 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("reject merge ");

        $r69 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: java.util.List segments>;

        $r70 = virtualinvoke r1.<org.apache.lucene.index.IndexWriter: java.lang.String segString(java.lang.Iterable)>($r69);

        $r71 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r70);

        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": segment ");

        $r73 = virtualinvoke r1.<org.apache.lucene.index.IndexWriter: java.lang.String segString(org.apache.lucene.index.SegmentInfoPerCommit)>(r86);

        $r74 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r73);

        $r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is already marked for merge");

        $r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r67.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", $r76);

     label05:
        return 0;

     label06:
        $r48 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $z13 = virtualinvoke $r48.<org.apache.lucene.index.SegmentInfos: boolean contains(org.apache.lucene.index.SegmentInfoPerCommit)>(r86);

        if $z13 != 0 goto label08;

        $r53 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z15 = virtualinvoke $r53.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z15 == 0 goto label07;

        $r55 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r54 = new java.lang.StringBuilder;

        specialinvoke $r54.<java.lang.StringBuilder: void <init>()>();

        $r56 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("reject merge ");

        $r57 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: java.util.List segments>;

        $r58 = virtualinvoke r1.<org.apache.lucene.index.IndexWriter: java.lang.String segString(java.lang.Iterable)>($r57);

        $r59 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r58);

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": segment ");

        $r61 = virtualinvoke r1.<org.apache.lucene.index.IndexWriter: java.lang.String segString(org.apache.lucene.index.SegmentInfoPerCommit)>(r86);

        $r62 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r61);

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist in live infos");

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r55.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", $r64);

     label07:
        return 0;

     label08:
        $r49 = r86.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $r51 = $r49.<org.apache.lucene.index.SegmentInfo: org.apache.lucene.store.Directory dir>;

        $r50 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory directory>;

        if $r51 == $r50 goto label09;

        z17 = 1;

     label09:
        $r52 = r1.<org.apache.lucene.index.IndexWriter: java.util.Map segmentsToMerge>;

        $z14 = interfaceinvoke $r52.<java.util.Map: boolean containsKey(java.lang.Object)>(r86);

        if $z14 == 0 goto label10;

        $i16 = r1.<org.apache.lucene.index.IndexWriter: int mergeMaxNumSegments>;

        r0.<org.apache.lucene.index.MergePolicy$OneMerge: int maxNumSegments> = $i16;

     label10:
        goto label04;

     label11:
        specialinvoke r1.<org.apache.lucene.index.IndexWriter: void ensureValidMerge(org.apache.lucene.index.MergePolicy$OneMerge)>(r0);

        $r4 = r1.<org.apache.lucene.index.IndexWriter: java.util.LinkedList pendingMerges>;

        virtualinvoke $r4.<java.util.LinkedList: boolean add(java.lang.Object)>(r0);

        $r5 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z4 = virtualinvoke $r5.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z4 == 0 goto label12;

        $r36 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("add merge to pendingMerges: ");

        $r38 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: java.util.List segments>;

        $r39 = virtualinvoke r1.<org.apache.lucene.index.IndexWriter: java.lang.String segString(java.lang.Iterable)>($r38);

        $r40 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [total ");

        $r42 = r1.<org.apache.lucene.index.IndexWriter: java.util.LinkedList pendingMerges>;

        $i15 = virtualinvoke $r42.<java.util.LinkedList: int size()>();

        $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i15);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" pending]");

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r36.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", $r45);

     label12:
        $l0 = r1.<org.apache.lucene.index.IndexWriter: long mergeGen>;

        r0.<org.apache.lucene.index.MergePolicy$OneMerge: long mergeGen> = $l0;

        r0.<org.apache.lucene.index.MergePolicy$OneMerge: boolean isExternal> = z17;

        $r6 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z5 = virtualinvoke $r6.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z5 == 0 goto label15;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>(java.lang.String)>("registerMerge merging= [");

        $r26 = r1.<org.apache.lucene.index.IndexWriter: java.util.HashSet mergingSegments>;

        $r27 = virtualinvoke $r26.<java.util.HashSet: java.util.Iterator iterator()>();

     label13:
        $z10 = interfaceinvoke $r27.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label14;

        $r31 = interfaceinvoke $r27.<java.util.Iterator: java.lang.Object next()>();

        r87 = (org.apache.lucene.index.SegmentInfoPerCommit) $r31;

        $r32 = r87.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $r33 = $r32.<org.apache.lucene.index.SegmentInfo: java.lang.String name>;

        $r34 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        goto label13;

     label14:
        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r28 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z11 = virtualinvoke $r28.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z11 == 0 goto label15;

        $r29 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r30 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r29.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", $r30);

     label15:
        $r88 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: java.util.List segments>;

        $r89 = interfaceinvoke $r88.<java.util.List: java.util.Iterator iterator()>();

     label16:
        $z18 = interfaceinvoke $r89.<java.util.Iterator: boolean hasNext()>();

        if $z18 == 0 goto label18;

        $r16 = interfaceinvoke $r89.<java.util.Iterator: java.lang.Object next()>();

        r90 = (org.apache.lucene.index.SegmentInfoPerCommit) $r16;

        $r17 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z9 = virtualinvoke $r17.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z9 == 0 goto label17;

        $r20 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("registerMerge info=");

        $r22 = virtualinvoke r1.<org.apache.lucene.index.IndexWriter: java.lang.String segString(org.apache.lucene.index.SegmentInfoPerCommit)>(r90);

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r20.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", $r24);

     label17:
        $r18 = r1.<org.apache.lucene.index.IndexWriter: java.util.HashSet mergingSegments>;

        virtualinvoke $r18.<java.util.HashSet: boolean add(java.lang.Object)>(r90);

        goto label16;

     label18:
        $z6 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z6 != 0 goto label19;

        $l13 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: long estimatedMergeBytes>;

        $b14 = $l13 cmp 0L;

        if $b14 == 0 goto label19;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label19:
        $z7 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z7 != 0 goto label20;

        $l11 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: long totalMergeBytes>;

        $b12 = $l11 cmp 0L;

        if $b12 == 0 goto label20;

        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();

        throw $r14;

     label20:
        $r7 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: java.util.List segments>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label21:
        $z19 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z19 == 0 goto label24;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r91 = (org.apache.lucene.index.SegmentInfoPerCommit) $r9;

        $r10 = r91.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $i1 = virtualinvoke $r10.<org.apache.lucene.index.SegmentInfo: int getDocCount()>();

        if $i1 <= 0 goto label23;

        $i2 = virtualinvoke r1.<org.apache.lucene.index.IndexWriter: int numDeletedDocs(org.apache.lucene.index.SegmentInfoPerCommit)>(r91);

        $z8 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z8 != 0 goto label22;

        $r12 = r91.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $i10 = virtualinvoke $r12.<org.apache.lucene.index.SegmentInfo: int getDocCount()>();

        if $i2 <= $i10 goto label22;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();

        throw $r13;

     label22:
        $d0 = (double) $i2;

        $r11 = r91.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $i3 = virtualinvoke $r11.<org.apache.lucene.index.SegmentInfo: int getDocCount()>();

        $d1 = (double) $i3;

        $d7 = $d0 / $d1;

        $l4 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: long estimatedMergeBytes>;

        $d2 = (double) $l4;

        $l5 = virtualinvoke r91.<org.apache.lucene.index.SegmentInfoPerCommit: long sizeInBytes()>();

        $d4 = (double) $l5;

        $d3 = 1.0 - $d7;

        $d5 = $d4 * $d3;

        $d6 = $d2 + $d5;

        $l6 = (long) $d6;

        r0.<org.apache.lucene.index.MergePolicy$OneMerge: long estimatedMergeBytes> = $l6;

        $l7 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: long totalMergeBytes>;

        $l8 = virtualinvoke r91.<org.apache.lucene.index.SegmentInfoPerCommit: long sizeInBytes()>();

        $l9 = $l7 + $l8;

        r0.<org.apache.lucene.index.MergePolicy$OneMerge: long totalMergeBytes> = $l9;

     label23:
        goto label21;

     label24:
        r0.<org.apache.lucene.index.MergePolicy$OneMerge: boolean registerDone> = 1;

        return 1;
    }

    final synchronized void mergeInit(org.apache.lucene.index.MergePolicy$OneMerge) throws java.io.IOException
    {
        java.lang.Throwable $r4;
        org.apache.lucene.index.IndexWriter r0;
        org.apache.lucene.index.MergePolicy$OneMerge r1;
        org.apache.lucene.util.InfoStream $r2, $r3, $r5, $r6;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        r1 := @parameter0: org.apache.lucene.index.MergePolicy$OneMerge;

     label1:
        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void _mergeInit(org.apache.lucene.index.MergePolicy$OneMerge)>(r1);

     label2:
        if 1 != 0 goto label8;

        $r2 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z0 = virtualinvoke $r2.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z0 == 0 goto label3;

        $r3 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r3.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "hit exception in mergeInit");

     label3:
        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void mergeFinish(org.apache.lucene.index.MergePolicy$OneMerge)>(r1);

        goto label8;

     label4:
        $r4 := @caughtexception;

     label5:
        if 0 != 0 goto label7;

        $r5 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z1 = virtualinvoke $r5.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z1 == 0 goto label6;

        $r6 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r6.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "hit exception in mergeInit");

     label6:
        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void mergeFinish(org.apache.lucene.index.MergePolicy$OneMerge)>(r1);

     label7:
        throw $r4;

     label8:
        return;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private synchronized void _mergeInit(org.apache.lucene.index.MergePolicy$OneMerge) throws java.io.IOException
    {
        org.apache.lucene.index.SegmentInfoPerCommit $r2, $r10, r39, $r64;
        org.apache.lucene.index.SegmentInfo $r11, $r61;
        org.apache.lucene.util.InfoStream $r8, $r20, $r30, $r55;
        java.lang.StringBuilder $r9, $r13, $r14, $r17, $r31, $r33, $r47, $r48, $r60, $r63, $r65;
        java.lang.AssertionError $r56, $r57, $r58;
        java.lang.String $r12, $r16, $r18, $r34, $r40, $r43, $r49, $r51;
        org.apache.lucene.index.MergePolicy$OneMerge r1;
        java.lang.IllegalStateException $r59;
        org.apache.lucene.store.Directory $r42;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        org.apache.lucene.index.SegmentInfos $r24, $r54;
        org.apache.lucene.index.IndexWriter r0;
        java.util.List $r3, $r15, $r19, $r21, $r25, $r28, $r32, $r50;
        org.apache.lucene.index.BufferedDeletesStream$ApplyDeletesResult $r6;
        java.util.HashMap $r62;
        java.util.HashSet $r27;
        int $i0, $i1, $i2, $i3, $i5, $i7;
        java.util.Iterator $r22;
        org.apache.lucene.index.BufferedDeletesStream $r5, $r53;
        org.apache.lucene.index.IndexWriter$ReaderPool $r4, $r26;
        org.apache.lucene.codecs.Codec $r44;
        java.lang.Object $r23;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        r1 := @parameter0: org.apache.lucene.index.MergePolicy$OneMerge;

        $z0 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $z9 = virtualinvoke r0.<org.apache.lucene.index.IndexWriter: boolean testPoint(java.lang.String)>("startMergeInit");

        if $z9 != 0 goto label01;

        $r56 = new java.lang.AssertionError;

        specialinvoke $r56.<java.lang.AssertionError: void <init>()>();

        throw $r56;

     label01:
        $z1 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z1 != 0 goto label02;

        $z8 = r1.<org.apache.lucene.index.MergePolicy$OneMerge: boolean registerDone>;

        if $z8 != 0 goto label02;

        $r57 = new java.lang.AssertionError;

        specialinvoke $r57.<java.lang.AssertionError: void <init>()>();

        throw $r57;

     label02:
        $z2 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z2 != 0 goto label03;

        $i0 = r1.<org.apache.lucene.index.MergePolicy$OneMerge: int maxNumSegments>;

        $i5 = (int) -1;

        if $i0 == $i5 goto label03;

        $i1 = r1.<org.apache.lucene.index.MergePolicy$OneMerge: int maxNumSegments>;

        if $i1 > 0 goto label03;

        $r58 = new java.lang.AssertionError;

        specialinvoke $r58.<java.lang.AssertionError: void <init>()>();

        throw $r58;

     label03:
        $z10 = r0.<org.apache.lucene.index.IndexWriter: boolean hitOOM>;

        if $z10 == 0 goto label04;

        $r59 = new java.lang.IllegalStateException;

        specialinvoke $r59.<java.lang.IllegalStateException: void <init>(java.lang.String)>("this writer hit an OutOfMemoryError; cannot merge");

        throw $r59;

     label04:
        $r2 = r1.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        if $r2 == null goto label05;

        return;

     label05:
        $z3 = virtualinvoke r1.<org.apache.lucene.index.MergePolicy$OneMerge: boolean isAborted()>();

        if $z3 == 0 goto label06;

        return;

     label06:
        $r5 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.BufferedDeletesStream bufferedDeletesStream>;

        $r4 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexWriter$ReaderPool readerPool>;

        $r3 = r1.<org.apache.lucene.index.MergePolicy$OneMerge: java.util.List segments>;

        $r6 = virtualinvoke $r5.<org.apache.lucene.index.BufferedDeletesStream: org.apache.lucene.index.BufferedDeletesStream$ApplyDeletesResult applyDeletes(org.apache.lucene.index.IndexWriter$ReaderPool,java.util.List)>($r4, $r3);

        $z4 = $r6.<org.apache.lucene.index.BufferedDeletesStream$ApplyDeletesResult: boolean anyDeletes>;

        if $z4 == 0 goto label07;

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void checkpoint()>();

     label07:
        $z5 = r0.<org.apache.lucene.index.IndexWriter: boolean keepFullyDeletedSegments>;

        if $z5 != 0 goto label12;

        $r19 = $r6.<org.apache.lucene.index.BufferedDeletesStream$ApplyDeletesResult: java.util.List allDeleted>;

        if $r19 == null goto label12;

        $r20 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z6 = virtualinvoke $r20.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z6 == 0 goto label08;

        $r30 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r60 = new java.lang.StringBuilder;

        specialinvoke $r60.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("drop 100% deleted segments: ");

        $r32 = $r6.<org.apache.lucene.index.BufferedDeletesStream$ApplyDeletesResult: java.util.List allDeleted>;

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r30.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", $r34);

     label08:
        $r21 = $r6.<org.apache.lucene.index.BufferedDeletesStream$ApplyDeletesResult: java.util.List allDeleted>;

        $r22 = interfaceinvoke $r21.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z11 = interfaceinvoke $r22.<java.util.Iterator: boolean hasNext()>();

        if $z11 == 0 goto label11;

        $r23 = interfaceinvoke $r22.<java.util.Iterator: java.lang.Object next()>();

        r39 = (org.apache.lucene.index.SegmentInfoPerCommit) $r23;

        $r24 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        virtualinvoke $r24.<org.apache.lucene.index.SegmentInfos: void remove(org.apache.lucene.index.SegmentInfoPerCommit)>(r39);

        $r25 = r1.<org.apache.lucene.index.MergePolicy$OneMerge: java.util.List segments>;

        $z7 = interfaceinvoke $r25.<java.util.List: boolean contains(java.lang.Object)>(r39);

        if $z7 == 0 goto label10;

        $r27 = r0.<org.apache.lucene.index.IndexWriter: java.util.HashSet mergingSegments>;

        virtualinvoke $r27.<java.util.HashSet: boolean remove(java.lang.Object)>(r39);

        $r28 = r1.<org.apache.lucene.index.MergePolicy$OneMerge: java.util.List segments>;

        interfaceinvoke $r28.<java.util.List: boolean remove(java.lang.Object)>(r39);

     label10:
        $r26 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexWriter$ReaderPool readerPool>;

        virtualinvoke $r26.<org.apache.lucene.index.IndexWriter$ReaderPool: void drop(org.apache.lucene.index.SegmentInfoPerCommit)>(r39);

        goto label09;

     label11:
        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void checkpoint()>();

     label12:
        $r40 = virtualinvoke r0.<org.apache.lucene.index.IndexWriter: java.lang.String newSegmentName()>();

        $r61 = new org.apache.lucene.index.SegmentInfo;

        $r42 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory directory>;

        $r43 = <org.apache.lucene.util.Constants: java.lang.String LUCENE_MAIN_VERSION>;

        $r44 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.codecs.Codec codec>;

        $i7 = (int) -1;

        specialinvoke $r61.<org.apache.lucene.index.SegmentInfo: void <init>(org.apache.lucene.store.Directory,java.lang.String,java.lang.String,int,boolean,org.apache.lucene.codecs.Codec,java.util.Map,java.util.Map)>($r42, $r43, $r40, $i7, 0, $r44, null, null);

        $r62 = new java.util.HashMap;

        specialinvoke $r62.<java.util.HashMap: void <init>()>();

        $r63 = new java.lang.StringBuilder;

        specialinvoke $r63.<java.lang.StringBuilder: void <init>()>();

        $r47 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $i2 = r1.<org.apache.lucene.index.MergePolicy$OneMerge: int maxNumSegments>;

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r62.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("mergeMaxNumSegments", $r49);

        $r50 = r1.<org.apache.lucene.index.MergePolicy$OneMerge: java.util.List segments>;

        $i3 = interfaceinvoke $r50.<java.util.List: int size()>();

        $r51 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i3);

        interfaceinvoke $r62.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("mergeFactor", $r51);

        staticinvoke <org.apache.lucene.index.IndexWriter: void setDiagnostics(org.apache.lucene.index.SegmentInfo,java.lang.String,java.util.Map)>($r61, "merge", $r62);

        $r64 = new org.apache.lucene.index.SegmentInfoPerCommit;

        specialinvoke $r64.<org.apache.lucene.index.SegmentInfoPerCommit: void <init>(org.apache.lucene.index.SegmentInfo,int,long)>($r61, 0, -1L);

        virtualinvoke r1.<org.apache.lucene.index.MergePolicy$OneMerge: void setInfo(org.apache.lucene.index.SegmentInfoPerCommit)>($r64);

        $r53 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.BufferedDeletesStream bufferedDeletesStream>;

        $r54 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        virtualinvoke $r53.<org.apache.lucene.index.BufferedDeletesStream: void prune(org.apache.lucene.index.SegmentInfos)>($r54);

        $r55 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z12 = virtualinvoke $r55.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z12 == 0 goto label13;

        $r8 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r65 = new java.lang.StringBuilder;

        specialinvoke $r65.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("merge seg=");

        $r10 = r1.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r11 = $r10.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $r12 = $r11.<org.apache.lucene.index.SegmentInfo: java.lang.String name>;

        $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r15 = r1.<org.apache.lucene.index.MergePolicy$OneMerge: java.util.List segments>;

        $r16 = virtualinvoke r0.<org.apache.lucene.index.IndexWriter: java.lang.String segString(java.lang.Iterable)>($r15);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", $r18);

     label13:
        return;
    }

    static void setDiagnostics(org.apache.lucene.index.SegmentInfo, java.lang.String)
    {
        java.lang.String r1;
        org.apache.lucene.index.SegmentInfo r0;

        r0 := @parameter0: org.apache.lucene.index.SegmentInfo;

        r1 := @parameter1: java.lang.String;

        staticinvoke <org.apache.lucene.index.IndexWriter: void setDiagnostics(org.apache.lucene.index.SegmentInfo,java.lang.String,java.util.Map)>(r0, r1, null);

        return;
    }

    private static void setDiagnostics(org.apache.lucene.index.SegmentInfo, java.lang.String, java.util.Map)
    {
        java.util.Date $r8;
        org.apache.lucene.index.SegmentInfo r11;
        java.util.HashMap $r0;
        long $l0;
        java.util.Map r10;
        java.lang.String r1, $r2, $r3, $r4, $r5, $r6, $r7, $r9;

        r11 := @parameter0: org.apache.lucene.index.SegmentInfo;

        r1 := @parameter1: java.lang.String;

        r10 := @parameter2: java.util.Map;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("source", r1);

        $r2 = <org.apache.lucene.util.Constants: java.lang.String LUCENE_VERSION>;

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("lucene.version", $r2);

        $r3 = <org.apache.lucene.util.Constants: java.lang.String OS_NAME>;

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("os", $r3);

        $r4 = <org.apache.lucene.util.Constants: java.lang.String OS_ARCH>;

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("os.arch", $r4);

        $r5 = <org.apache.lucene.util.Constants: java.lang.String OS_VERSION>;

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("os.version", $r5);

        $r6 = <org.apache.lucene.util.Constants: java.lang.String JAVA_VERSION>;

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.version", $r6);

        $r7 = <org.apache.lucene.util.Constants: java.lang.String JAVA_VENDOR>;

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.vendor", $r7);

        $r8 = new java.util.Date;

        specialinvoke $r8.<java.util.Date: void <init>()>();

        $l0 = virtualinvoke $r8.<java.util.Date: long getTime()>();

        $r9 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("timestamp", $r9);

        if r10 == null goto label1;

        interfaceinvoke $r0.<java.util.Map: void putAll(java.util.Map)>(r10);

     label1:
        virtualinvoke r11.<org.apache.lucene.index.SegmentInfo: void setDiagnostics(java.util.Map)>($r0);

        return;
    }

    final synchronized void mergeFinish(org.apache.lucene.index.MergePolicy$OneMerge)
    {
        java.util.Iterator $r4;
        java.util.Set $r2;
        org.apache.lucene.index.SegmentInfoPerCommit r6;
        java.util.HashSet $r7;
        org.apache.lucene.index.IndexWriter r0;
        java.util.List r3;
        org.apache.lucene.index.MergePolicy$OneMerge r1;
        java.lang.Object $r5;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        r1 := @parameter0: org.apache.lucene.index.MergePolicy$OneMerge;

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        $z0 = r1.<org.apache.lucene.index.MergePolicy$OneMerge: boolean registerDone>;

        if $z0 == 0 goto label3;

        r3 = r1.<org.apache.lucene.index.MergePolicy$OneMerge: java.util.List segments>;

        $r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.lucene.index.SegmentInfoPerCommit) $r5;

        $r7 = r0.<org.apache.lucene.index.IndexWriter: java.util.HashSet mergingSegments>;

        virtualinvoke $r7.<java.util.HashSet: boolean remove(java.lang.Object)>(r6);

        goto label1;

     label2:
        r1.<org.apache.lucene.index.MergePolicy$OneMerge: boolean registerDone> = 0;

     label3:
        $r2 = r0.<org.apache.lucene.index.IndexWriter: java.util.Set runningMerges>;

        interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        return;
    }

    private final synchronized void closeMergeReaders(org.apache.lucene.index.MergePolicy$OneMerge, boolean) throws java.io.IOException
    {
        java.lang.Throwable $r17, r18;
        java.lang.Error $r3;
        org.apache.lucene.index.SegmentInfoPerCommit $r11, $r14;
        java.lang.AssertionError $r16;
        int $i0, i1;
        org.apache.lucene.index.SegmentReader r8;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6;
        java.io.IOException $r5;
        java.lang.RuntimeException $r2, $r4;
        org.apache.lucene.index.ReadersAndLiveDocs $r12;
        java.util.List $r1, $r6, $r19;
        org.apache.lucene.index.IndexWriter r9;
        org.apache.lucene.index.MergePolicy$OneMerge r0;
        org.apache.lucene.index.IndexWriter$ReaderPool $r10, $r13, $r15;
        java.lang.Object $r7;

        r9 := @this: org.apache.lucene.index.IndexWriter;

        r0 := @parameter0: org.apache.lucene.index.MergePolicy$OneMerge;

        z0 := @parameter1: boolean;

        $r1 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: java.util.List readers>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        r18 = null;

        if z0 != 0 goto label01;

        $z6 = 1;

        goto label02;

     label01:
        $z6 = 0;

     label02:
        z1 = $z6;

        i1 = 0;

     label03:
        if i1 >= $i0 goto label11;

        $r6 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: java.util.List readers>;

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(i1);

        r8 = (org.apache.lucene.index.SegmentReader) $r7;

        if r8 == null goto label10;

     label04:
        $r10 = r9.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexWriter$ReaderPool readerPool>;

        $r11 = virtualinvoke r8.<org.apache.lucene.index.SegmentReader: org.apache.lucene.index.SegmentInfoPerCommit getSegmentInfo()>();

        $r12 = virtualinvoke $r10.<org.apache.lucene.index.IndexWriter$ReaderPool: org.apache.lucene.index.ReadersAndLiveDocs get(org.apache.lucene.index.SegmentInfoPerCommit,boolean)>($r11, 0);

        $z5 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z5 != 0 goto label05;

        if $r12 != null goto label05;

        $r16 = new java.lang.AssertionError;

        specialinvoke $r16.<java.lang.AssertionError: void <init>()>();

        throw $r16;

     label05:
        if z1 == 0 goto label06;

        virtualinvoke $r12.<org.apache.lucene.index.ReadersAndLiveDocs: void dropChanges()>();

     label06:
        virtualinvoke $r12.<org.apache.lucene.index.ReadersAndLiveDocs: void release(org.apache.lucene.index.SegmentReader)>(r8);

        $r13 = r9.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexWriter$ReaderPool readerPool>;

        virtualinvoke $r13.<org.apache.lucene.index.IndexWriter$ReaderPool: void release(org.apache.lucene.index.ReadersAndLiveDocs)>($r12);

        if z1 == 0 goto label07;

        $r15 = r9.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexWriter$ReaderPool readerPool>;

        $r14 = $r12.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentInfoPerCommit info>;

        virtualinvoke $r15.<org.apache.lucene.index.IndexWriter$ReaderPool: void drop(org.apache.lucene.index.SegmentInfoPerCommit)>($r14);

     label07:
        goto label09;

     label08:
        $r17 := @caughtexception;

        if r18 != null goto label09;

        r18 = $r17;

     label09:
        $r19 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: java.util.List readers>;

        interfaceinvoke $r19.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i1, null);

     label10:
        i1 = i1 + 1;

        goto label03;

     label11:
        if z0 != 0 goto label15;

        if r18 == null goto label15;

        $z2 = r18 instanceof java.io.IOException;

        if $z2 == 0 goto label12;

        $r5 = (java.io.IOException) r18;

        throw $r5;

     label12:
        $z3 = r18 instanceof java.lang.RuntimeException;

        if $z3 == 0 goto label13;

        $r4 = (java.lang.RuntimeException) r18;

        throw $r4;

     label13:
        $z4 = r18 instanceof java.lang.Error;

        if $z4 == 0 goto label14;

        $r3 = (java.lang.Error) r18;

        throw $r3;

     label14:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r18);

        throw $r2;

     label15:
        return;

        catch java.lang.Throwable from label04 to label07 with label08;
    }

    private int mergeMiddle(org.apache.lucene.index.MergePolicy$OneMerge) throws java.io.IOException
    {
        org.apache.lucene.index.MergePolicy $r236;
        org.apache.lucene.index.FieldInfos $r33, $r91, $r94, $r97, $r100, $r103;
        org.apache.lucene.store.IOContext $r7, $r46;
        org.apache.lucene.index.MergePolicy$OneMerge r0;
        org.apache.lucene.index.SegmentCoreReaders $r135;
        org.apache.lucene.store.MergeInfo $r8;
        int $i0, $i1, $i2, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, i23, $i24;
        org.apache.lucene.index.MergeState$CheckAbort $r9;
        org.apache.lucene.codecs.Codec $r29, $r84;
        org.apache.lucene.index.IndexWriter$ReaderPool $r44, $r48, $r115, $r174;
        org.apache.lucene.index.LiveIndexWriterConfig $r18, $r37;
        java.lang.AssertionError $r109, $r121, $r136, $r162, $r163;
        java.util.ArrayList $r14;
        org.apache.lucene.index.FieldInfos$FieldNumbers $r21;
        java.lang.String r5, $r55, $r68, $r70, $r74, $r76, $r105, $r112, $r132, $r140, $r143, $r147, $r151, $r155, $r161, $r168, $r170, $r187, $r189, $r198, $r200, $r210, $r212, $r223, $r231, $r232, $r233, $r234, $r235;
        org.apache.lucene.store.Directory $r2, $r10, $r12, $r22, $r35, $r62;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, z21, $z22, $z23, $z24, $z25, z26, z27;
        java.util.List r6, $r16, $r167, $r230;
        org.apache.lucene.index.SegmentReader $r47, $r117, $r133, r229;
        double $d0, $d1, $d2, $d3, $d4;
        org.apache.lucene.index.SegmentInfoPerCommit $r3, $r17, $r24, $r32, $r39, $r41, $r43, $r50, $r56, $r59, $r60, $r64, $r77, $r87, $r106, $r110, $r178, $r190, $r201, $r213, $r221, r228, $r238;
        org.apache.lucene.index.SegmentInfo $r4, $r19, $r26, $r34, $r40, $r42, $r61, $r65, $r88, $r107, $r108, $r111, $r120, $r126, $r134, $r222;
        org.apache.lucene.codecs.SegmentInfoWriter $r31;
        org.apache.lucene.util.InfoStream $r13, $r20, $r28, $r36, $r51, $r63, $r66, $r71, $r72, $r80, $r82, $r119, $r138, $r145, $r153, $r165, $r185, $r193, $r196, $r204, $r208, $r216;
        java.lang.StringBuilder $r81, $r83, $r85, $r86, $r89, $r90, $r92, $r93, $r95, $r96, $r98, $r99, $r101, $r102, $r104, $r122, $r123, $r124, $r125, $r127, $r128, $r129, $r130, $r131, $r137, $r139, $r141, $r142, $r144, $r146, $r148, $r149, $r150, $r152, $r154, $r156, $r157, $r158, $r159, $r160, $r164, $r166, $r169;
        java.lang.Object[] $r49;
        long $l3, $l4, $l5;
        org.apache.lucene.util.Bits $r118;
        java.io.IOException $r207;
        org.apache.lucene.index.MergeState $r23;
        java.util.Locale $r52;
        org.apache.lucene.codecs.SegmentInfoFormat $r30;
        java.util.Collection $r58, $r79, $r180, $r192, $r203, $r215, r239;
        java.util.HashSet $r25;
        java.lang.Object $r114;
        org.apache.lucene.index.IndexFileDeleter $r57, $r67, $r69, $r73, $r75, $r78, $r113, $r179, $r186, $r188, $r191, $r197, $r199, $r202, $r209, $r211, $r214, $r224, $r240;
        java.util.Set $r27;
        org.apache.lucene.index.ReadersAndLiveDocs $r45, $r116;
        java.lang.Throwable $r171, $r172, $r173, $r175, $r176, $r177, $r181, $r182, $r183, $r184, $r194, $r195, $r205, $r206, $r217, $r218, $r219, $r220, $r225, $r226, $r227;
        java.lang.Double $r53, $r54;
        org.apache.lucene.index.IndexWriter$IndexReaderWarmer $r38;
        org.apache.lucene.index.SegmentInfos $r237;
        org.apache.lucene.index.IndexWriter r1;
        org.apache.lucene.index.SegmentMerger $r15;
        org.apache.lucene.store.TrackingDirectoryWrapper $r11;

        r1 := @this: org.apache.lucene.index.IndexWriter;

        r0 := @parameter0: org.apache.lucene.index.MergePolicy$OneMerge;

        $r2 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory directory>;

        virtualinvoke r0.<org.apache.lucene.index.MergePolicy$OneMerge: void checkAborted(org.apache.lucene.store.Directory)>($r2);

        $r3 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r4 = $r3.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        r5 = $r4.<org.apache.lucene.index.SegmentInfo: java.lang.String name>;

        r6 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: java.util.List segments>;

        $r7 = new org.apache.lucene.store.IOContext;

        $r8 = virtualinvoke r0.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.store.MergeInfo getMergeInfo()>();

        specialinvoke $r7.<org.apache.lucene.store.IOContext: void <init>(org.apache.lucene.store.MergeInfo)>($r8);

        $r9 = new org.apache.lucene.index.MergeState$CheckAbort;

        $r10 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory directory>;

        specialinvoke $r9.<org.apache.lucene.index.MergeState$CheckAbort: void <init>(org.apache.lucene.index.MergePolicy$OneMerge,org.apache.lucene.store.Directory)>(r0, $r10);

        $r11 = new org.apache.lucene.store.TrackingDirectoryWrapper;

        $r12 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory directory>;

        specialinvoke $r11.<org.apache.lucene.store.TrackingDirectoryWrapper: void <init>(org.apache.lucene.store.Directory)>($r12);

        $r13 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z0 = virtualinvoke $r13.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z0 == 0 goto label001;

        $r165 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r164 = new java.lang.StringBuilder;

        specialinvoke $r164.<java.lang.StringBuilder: void <init>()>();

        $r166 = virtualinvoke $r164.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("merging ");

        $r167 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: java.util.List segments>;

        $r168 = virtualinvoke r1.<org.apache.lucene.index.IndexWriter: java.lang.String segString(java.lang.Iterable)>($r167);

        $r169 = virtualinvoke $r166.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r168);

        $r170 = virtualinvoke $r169.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r165.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", $r170);

     label001:
        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.lucene.index.MergePolicy$OneMerge: java.util.List readers> = $r14;

        z21 = 0;

        z26 = 0;

     label002:
        i23 = 0;

     label003:
        $i24 = interfaceinvoke r6.<java.util.List: int size()>();

        if i23 >= $i24 goto label023;

        $r114 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(i23);

        r228 = (org.apache.lucene.index.SegmentInfoPerCommit) $r114;

        $r115 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexWriter$ReaderPool readerPool>;

        $r116 = virtualinvoke $r115.<org.apache.lucene.index.IndexWriter$ReaderPool: org.apache.lucene.index.ReadersAndLiveDocs get(org.apache.lucene.index.SegmentInfoPerCommit,boolean)>(r228, 1);

        $r117 = virtualinvoke $r116.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentReader getMergeReader(org.apache.lucene.store.IOContext)>($r7);

        r229 = $r117;

        $z12 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z12 != 0 goto label004;

        if $r117 != null goto label004;

        $r163 = new java.lang.AssertionError;

        specialinvoke $r163.<java.lang.AssertionError: void <init>()>();

        throw $r163;

     label004:
        entermonitor r1;

     label005:
        $r118 = virtualinvoke $r116.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.util.Bits getReadOnlyLiveDocs()>();

        $i7 = virtualinvoke $r116.<org.apache.lucene.index.ReadersAndLiveDocs: int getPendingDeleteCount()>();

        $i8 = virtualinvoke r228.<org.apache.lucene.index.SegmentInfoPerCommit: int getDelCount()>();

        $i22 = $i7 + $i8;

        $z13 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z13 != 0 goto label006;

        $z16 = virtualinvoke $r116.<org.apache.lucene.index.ReadersAndLiveDocs: boolean verifyDocCounts()>();

        if $z16 != 0 goto label006;

        $r162 = new java.lang.AssertionError;

        specialinvoke $r162.<java.lang.AssertionError: void <init>()>();

        throw $r162;

     label006:
        $r119 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z14 = virtualinvoke $r119.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z14 == 0 goto label009;

        $i17 = virtualinvoke $r116.<org.apache.lucene.index.ReadersAndLiveDocs: int getPendingDeleteCount()>();

        if $i17 == 0 goto label007;

        $r153 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r152 = new java.lang.StringBuilder;

        specialinvoke $r152.<java.lang.StringBuilder: void <init>()>();

        $r154 = virtualinvoke $r152.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("seg=");

        $r155 = virtualinvoke r1.<org.apache.lucene.index.IndexWriter: java.lang.String segString(org.apache.lucene.index.SegmentInfoPerCommit)>(r228);

        $r156 = virtualinvoke $r154.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r155);

        $r157 = virtualinvoke $r156.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" delCount=");

        $i20 = virtualinvoke r228.<org.apache.lucene.index.SegmentInfoPerCommit: int getDelCount()>();

        $r158 = virtualinvoke $r157.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i20);

        $r159 = virtualinvoke $r158.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" pendingDelCount=");

        $i21 = virtualinvoke $r116.<org.apache.lucene.index.ReadersAndLiveDocs: int getPendingDeleteCount()>();

        $r160 = virtualinvoke $r159.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i21);

        $r161 = virtualinvoke $r160.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r153.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", $r161);

        goto label009;

     label007:
        $i18 = virtualinvoke r228.<org.apache.lucene.index.SegmentInfoPerCommit: int getDelCount()>();

        if $i18 == 0 goto label008;

        $r145 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r144 = new java.lang.StringBuilder;

        specialinvoke $r144.<java.lang.StringBuilder: void <init>()>();

        $r146 = virtualinvoke $r144.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("seg=");

        $r147 = virtualinvoke r1.<org.apache.lucene.index.IndexWriter: java.lang.String segString(org.apache.lucene.index.SegmentInfoPerCommit)>(r228);

        $r148 = virtualinvoke $r146.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r147);

        $r149 = virtualinvoke $r148.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" delCount=");

        $i19 = virtualinvoke r228.<org.apache.lucene.index.SegmentInfoPerCommit: int getDelCount()>();

        $r150 = virtualinvoke $r149.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i19);

        $r151 = virtualinvoke $r150.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r145.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", $r151);

        goto label009;

     label008:
        $r138 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r137 = new java.lang.StringBuilder;

        specialinvoke $r137.<java.lang.StringBuilder: void <init>()>();

        $r139 = virtualinvoke $r137.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("seg=");

        $r140 = virtualinvoke r1.<org.apache.lucene.index.IndexWriter: java.lang.String segString(org.apache.lucene.index.SegmentInfoPerCommit)>(r228);

        $r141 = virtualinvoke $r139.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r140);

        $r142 = virtualinvoke $r141.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" no deletes");

        $r143 = virtualinvoke $r142.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r138.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", $r143);

     label009:
        exitmonitor r1;

     label010:
        goto label013;

     label011:
        $r227 := @caughtexception;

        exitmonitor r1;

     label012:
        throw $r227;

     label013:
        $i9 = virtualinvoke $r117.<org.apache.lucene.index.SegmentReader: int numDeletedDocs()>();

        if $i9 == $i22 goto label021;

        $z15 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z15 != 0 goto label014;

        $i16 = virtualinvoke $r117.<org.apache.lucene.index.SegmentReader: int numDeletedDocs()>();

        if $i22 > $i16 goto label014;

        $r136 = new java.lang.AssertionError;

        specialinvoke $r136.<java.lang.AssertionError: void <init>()>();

        throw $r136;

     label014:
        $r133 = new org.apache.lucene.index.SegmentReader;

        $r135 = $r117.<org.apache.lucene.index.SegmentReader: org.apache.lucene.index.SegmentCoreReaders core>;

        $r134 = r228.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $i14 = virtualinvoke $r134.<org.apache.lucene.index.SegmentInfo: int getDocCount()>();

        $i15 = $i14 - $i22;

        specialinvoke $r133.<org.apache.lucene.index.SegmentReader: void <init>(org.apache.lucene.index.SegmentInfoPerCommit,org.apache.lucene.index.SegmentCoreReaders,org.apache.lucene.util.Bits,int)>(r228, $r135, $r118, $i15);

     label015:
        virtualinvoke $r116.<org.apache.lucene.index.ReadersAndLiveDocs: void release(org.apache.lucene.index.SegmentReader)>($r117);

     label016:
        if 1 != 0 goto label020;

        virtualinvoke $r133.<org.apache.lucene.index.SegmentReader: void decRef()>();

        goto label020;

     label017:
        $r226 := @caughtexception;

     label018:
        if 0 != 0 goto label019;

        virtualinvoke $r133.<org.apache.lucene.index.SegmentReader: void decRef()>();

     label019:
        throw $r226;

     label020:
        r229 = $r133;

     label021:
        $r230 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: java.util.List readers>;

        interfaceinvoke $r230.<java.util.List: boolean add(java.lang.Object)>(r229);

        $z22 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z22 != 0 goto label022;

        $r120 = r228.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $i10 = virtualinvoke $r120.<org.apache.lucene.index.SegmentInfo: int getDocCount()>();

        if $i22 <= $i10 goto label022;

        $r121 = new java.lang.AssertionError;

        $r122 = new java.lang.StringBuilder;

        specialinvoke $r122.<java.lang.StringBuilder: void <init>()>();

        $r123 = virtualinvoke $r122.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("delCount=");

        $r124 = virtualinvoke $r123.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i22);

        $r125 = virtualinvoke $r124.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" info.docCount=");

        $r126 = r228.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $i11 = virtualinvoke $r126.<org.apache.lucene.index.SegmentInfo: int getDocCount()>();

        $r127 = virtualinvoke $r125.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r128 = virtualinvoke $r127.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" rld.pendingDeleteCount=");

        $i12 = virtualinvoke $r116.<org.apache.lucene.index.ReadersAndLiveDocs: int getPendingDeleteCount()>();

        $r129 = virtualinvoke $r128.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        $r130 = virtualinvoke $r129.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" info.getDelCount()=");

        $i13 = virtualinvoke r228.<org.apache.lucene.index.SegmentInfoPerCommit: int getDelCount()>();

        $r131 = virtualinvoke $r130.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i13);

        $r132 = virtualinvoke $r131.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r121.<java.lang.AssertionError: void <init>(java.lang.Object)>($r132);

        throw $r121;

     label022:
        i23 = i23 + 1;

        goto label003;

     label023:
        $r15 = new org.apache.lucene.index.SegmentMerger;

        $r16 = virtualinvoke r0.<org.apache.lucene.index.MergePolicy$OneMerge: java.util.List getMergeReaders()>();

        $r17 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r19 = $r17.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $r20 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r18 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.LiveIndexWriterConfig config>;

        $i0 = virtualinvoke $r18.<org.apache.lucene.index.LiveIndexWriterConfig: int getTermIndexInterval()>();

        $r21 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.FieldInfos$FieldNumbers globalFieldNumberMap>;

        specialinvoke $r15.<org.apache.lucene.index.SegmentMerger: void <init>(java.util.List,org.apache.lucene.index.SegmentInfo,org.apache.lucene.util.InfoStream,org.apache.lucene.store.Directory,int,org.apache.lucene.index.MergeState$CheckAbort,org.apache.lucene.index.FieldInfos$FieldNumbers,org.apache.lucene.store.IOContext)>($r16, $r19, $r20, $r11, $i0, $r9, $r21, $r7);

        $r22 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory directory>;

        virtualinvoke r0.<org.apache.lucene.index.MergePolicy$OneMerge: void checkAborted(org.apache.lucene.store.Directory)>($r22);

     label024:
        $r23 = virtualinvoke $r15.<org.apache.lucene.index.SegmentMerger: org.apache.lucene.index.MergeState merge()>();

     label025:
        if 1 != 0 goto label038;

        entermonitor r1;

     label026:
        $r113 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        $r110 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r111 = $r110.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $r112 = $r111.<org.apache.lucene.index.SegmentInfo: java.lang.String name>;

        virtualinvoke $r113.<org.apache.lucene.index.IndexFileDeleter: void refresh(java.lang.String)>($r112);

        exitmonitor r1;

     label027:
        goto label030;

     label028:
        $r225 := @caughtexception;

        exitmonitor r1;

     label029:
        throw $r225;

     label030:
        goto label038;

     label031:
        $r220 := @caughtexception;

     label032:
        if 0 != 0 goto label037;

        entermonitor r1;

     label033:
        $r224 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        $r221 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r222 = $r221.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $r223 = $r222.<org.apache.lucene.index.SegmentInfo: java.lang.String name>;

        virtualinvoke $r224.<org.apache.lucene.index.IndexFileDeleter: void refresh(java.lang.String)>($r223);

        exitmonitor r1;

     label034:
        goto label037;

     label035:
        $r219 := @caughtexception;

        exitmonitor r1;

     label036:
        throw $r219;

     label037:
        throw $r220;

     label038:
        $z1 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z1 != 0 goto label039;

        $r108 = $r23.<org.apache.lucene.index.MergeState: org.apache.lucene.index.SegmentInfo segmentInfo>;

        $r106 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r107 = $r106.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        if $r108 == $r107 goto label039;

        $r109 = new java.lang.AssertionError;

        specialinvoke $r109.<java.lang.AssertionError: void <init>()>();

        throw $r109;

     label039:
        $r24 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r26 = $r24.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $r25 = new java.util.HashSet;

        $r27 = virtualinvoke $r11.<org.apache.lucene.store.TrackingDirectoryWrapper: java.util.Set getCreatedFiles()>();

        specialinvoke $r25.<java.util.HashSet: void <init>(java.util.Collection)>($r27);

        virtualinvoke $r26.<org.apache.lucene.index.SegmentInfo: void setFiles(java.util.Set)>($r25);

        $r28 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z2 = virtualinvoke $r28.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z2 == 0 goto label050;

        $r82 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r81 = new java.lang.StringBuilder;

        specialinvoke $r81.<java.lang.StringBuilder: void <init>()>();

        $r83 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("merge codec=");

        $r84 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.codecs.Codec codec>;

        $r85 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r84);

        $r86 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" docCount=");

        $r87 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r88 = $r87.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $i6 = virtualinvoke $r88.<org.apache.lucene.index.SegmentInfo: int getDocCount()>();

        $r89 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r90 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; merged segment has ");

        $r91 = $r23.<org.apache.lucene.index.MergeState: org.apache.lucene.index.FieldInfos fieldInfos>;

        $z7 = virtualinvoke $r91.<org.apache.lucene.index.FieldInfos: boolean hasVectors()>();

        if $z7 == 0 goto label040;

        $r231 = "vectors";

        goto label041;

     label040:
        $r231 = "no vectors";

     label041:
        $r92 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r231);

        $r93 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ");

        $r94 = $r23.<org.apache.lucene.index.MergeState: org.apache.lucene.index.FieldInfos fieldInfos>;

        $z8 = virtualinvoke $r94.<org.apache.lucene.index.FieldInfos: boolean hasNorms()>();

        if $z8 == 0 goto label042;

        $r232 = "norms";

        goto label043;

     label042:
        $r232 = "no norms";

     label043:
        $r95 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r232);

        $r96 = virtualinvoke $r95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ");

        $r97 = $r23.<org.apache.lucene.index.MergeState: org.apache.lucene.index.FieldInfos fieldInfos>;

        $z9 = virtualinvoke $r97.<org.apache.lucene.index.FieldInfos: boolean hasDocValues()>();

        if $z9 == 0 goto label044;

        $r233 = "docValues";

        goto label045;

     label044:
        $r233 = "no docValues";

     label045:
        $r98 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r233);

        $r99 = virtualinvoke $r98.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ");

        $r100 = $r23.<org.apache.lucene.index.MergeState: org.apache.lucene.index.FieldInfos fieldInfos>;

        $z10 = virtualinvoke $r100.<org.apache.lucene.index.FieldInfos: boolean hasProx()>();

        if $z10 == 0 goto label046;

        $r234 = "prox";

        goto label047;

     label046:
        $r234 = "no prox";

     label047:
        $r101 = virtualinvoke $r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r234);

        $r102 = virtualinvoke $r101.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ");

        $r103 = $r23.<org.apache.lucene.index.MergeState: org.apache.lucene.index.FieldInfos fieldInfos>;

        $z11 = virtualinvoke $r103.<org.apache.lucene.index.FieldInfos: boolean hasProx()>();

        if $z11 == 0 goto label048;

        $r235 = "freqs";

        goto label049;

     label048:
        $r235 = "no freqs";

     label049:
        $r104 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r235);

        $r105 = virtualinvoke $r104.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r82.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", $r105);

     label050:
        entermonitor r1;

     label051:
        $r236 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.MergePolicy mergePolicy>;

        $r237 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $r238 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $z23 = virtualinvoke $r236.<org.apache.lucene.index.MergePolicy: boolean useCompoundFile(org.apache.lucene.index.SegmentInfos,org.apache.lucene.index.SegmentInfoPerCommit)>($r237, $r238);

        exitmonitor r1;

     label052:
        goto label055;

     label053:
        $r218 := @caughtexception;

        exitmonitor r1;

     label054:
        throw $r218;

     label055:
        if $z23 == 0 goto label104;

        z21 = 0;

        z27 = 0;

        z26 = 0;

        $r59 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        r239 = virtualinvoke $r59.<org.apache.lucene.index.SegmentInfoPerCommit: java.util.Collection files()>();

     label056:
        $r63 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r62 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory directory>;

        $r60 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r61 = $r60.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        r239 = staticinvoke <org.apache.lucene.index.IndexWriter: java.util.Collection createCompoundFile(org.apache.lucene.util.InfoStream,org.apache.lucene.store.Directory,org.apache.lucene.index.MergeState$CheckAbort,org.apache.lucene.index.SegmentInfo,org.apache.lucene.store.IOContext)>($r63, $r62, $r9, $r61, $r7);

        z21 = 1;

        z27 = 1;

        z26 = 1;

     label057:
        if 1 != 0 goto label094;

        $r72 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z6 = virtualinvoke $r72.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z6 == 0 goto label058;

        $r80 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r80.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "hit exception creating compound file during merge");

     label058:
        entermonitor r1;

     label059:
        $r73 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        $r74 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String segmentFileName(java.lang.String,java.lang.String,java.lang.String)>(r5, "", "cfs");

        virtualinvoke $r73.<org.apache.lucene.index.IndexFileDeleter: void deleteFile(java.lang.String)>($r74);

        $r75 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        $r76 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String segmentFileName(java.lang.String,java.lang.String,java.lang.String)>(r5, "", "cfe");

        virtualinvoke $r75.<org.apache.lucene.index.IndexFileDeleter: void deleteFile(java.lang.String)>($r76);

        $r78 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        $r77 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r79 = virtualinvoke $r77.<org.apache.lucene.index.SegmentInfoPerCommit: java.util.Collection files()>();

        virtualinvoke $r78.<org.apache.lucene.index.IndexFileDeleter: void deleteNewFiles(java.util.Collection)>($r79);

        exitmonitor r1;

     label060:
        goto label063;

     label061:
        $r217 := @caughtexception;

        exitmonitor r1;

     label062:
        throw $r217;

     label063:
        goto label094;

     label064:
        $r207 := @caughtexception;

        entermonitor r1;

     label065:
        $z19 = virtualinvoke r0.<org.apache.lucene.index.MergePolicy$OneMerge: boolean isAborted()>();

        if $z19 == 0 goto label066;

        goto label067;

     label066:
        specialinvoke r1.<org.apache.lucene.index.IndexWriter: void handleMergeException(java.lang.Throwable,org.apache.lucene.index.MergePolicy$OneMerge)>($r207, r0);

     label067:
        exitmonitor r1;

     label068:
        goto label071;

     label069:
        $r206 := @caughtexception;

        exitmonitor r1;

     label070:
        throw $r206;

     label071:
        if 0 != 0 goto label094;

        $r208 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z20 = virtualinvoke $r208.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z20 == 0 goto label072;

        $r216 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r216.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "hit exception creating compound file during merge");

     label072:
        entermonitor r1;

     label073:
        $r209 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        $r210 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String segmentFileName(java.lang.String,java.lang.String,java.lang.String)>(r5, "", "cfs");

        virtualinvoke $r209.<org.apache.lucene.index.IndexFileDeleter: void deleteFile(java.lang.String)>($r210);

        $r211 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        $r212 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String segmentFileName(java.lang.String,java.lang.String,java.lang.String)>(r5, "", "cfe");

        virtualinvoke $r211.<org.apache.lucene.index.IndexFileDeleter: void deleteFile(java.lang.String)>($r212);

        $r214 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        $r213 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r215 = virtualinvoke $r213.<org.apache.lucene.index.SegmentInfoPerCommit: java.util.Collection files()>();

        virtualinvoke $r214.<org.apache.lucene.index.IndexFileDeleter: void deleteNewFiles(java.util.Collection)>($r215);

        exitmonitor r1;

     label074:
        goto label077;

     label075:
        $r205 := @caughtexception;

        exitmonitor r1;

     label076:
        throw $r205;

     label077:
        goto label094;

     label078:
        $r195 := @caughtexception;

        specialinvoke r1.<org.apache.lucene.index.IndexWriter: void handleMergeException(java.lang.Throwable,org.apache.lucene.index.MergePolicy$OneMerge)>($r195, r0);

     label079:
        if 0 != 0 goto label094;

        $r196 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z18 = virtualinvoke $r196.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z18 == 0 goto label080;

        $r204 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r204.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "hit exception creating compound file during merge");

     label080:
        entermonitor r1;

     label081:
        $r197 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        $r198 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String segmentFileName(java.lang.String,java.lang.String,java.lang.String)>(r5, "", "cfs");

        virtualinvoke $r197.<org.apache.lucene.index.IndexFileDeleter: void deleteFile(java.lang.String)>($r198);

        $r199 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        $r200 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String segmentFileName(java.lang.String,java.lang.String,java.lang.String)>(r5, "", "cfe");

        virtualinvoke $r199.<org.apache.lucene.index.IndexFileDeleter: void deleteFile(java.lang.String)>($r200);

        $r202 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        $r201 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r203 = virtualinvoke $r201.<org.apache.lucene.index.SegmentInfoPerCommit: java.util.Collection files()>();

        virtualinvoke $r202.<org.apache.lucene.index.IndexFileDeleter: void deleteNewFiles(java.util.Collection)>($r203);

        exitmonitor r1;

     label082:
        goto label085;

     label083:
        $r194 := @caughtexception;

        exitmonitor r1;

     label084:
        throw $r194;

     label085:
        goto label094;

     label086:
        $r184 := @caughtexception;

     label087:
        if z27 != 0 goto label093;

        $r185 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z17 = virtualinvoke $r185.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z17 == 0 goto label088;

        $r193 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r193.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "hit exception creating compound file during merge");

     label088:
        entermonitor r1;

     label089:
        $r186 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        $r187 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String segmentFileName(java.lang.String,java.lang.String,java.lang.String)>(r5, "", "cfs");

        virtualinvoke $r186.<org.apache.lucene.index.IndexFileDeleter: void deleteFile(java.lang.String)>($r187);

        $r188 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        $r189 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String segmentFileName(java.lang.String,java.lang.String,java.lang.String)>(r5, "", "cfe");

        virtualinvoke $r188.<org.apache.lucene.index.IndexFileDeleter: void deleteFile(java.lang.String)>($r189);

        $r191 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        $r190 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r192 = virtualinvoke $r190.<org.apache.lucene.index.SegmentInfoPerCommit: java.util.Collection files()>();

        virtualinvoke $r191.<org.apache.lucene.index.IndexFileDeleter: void deleteNewFiles(java.util.Collection)>($r192);

        exitmonitor r1;

     label090:
        goto label093;

     label091:
        $r183 := @caughtexception;

        exitmonitor r1;

     label092:
        throw $r183;

     label093:
        throw $r184;

     label094:
        z21 = 0;

        z26 = 0;

        entermonitor r1;

     label095:
        $r240 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        virtualinvoke $r240.<org.apache.lucene.index.IndexFileDeleter: void deleteNewFiles(java.util.Collection)>(r239);

        $z24 = virtualinvoke r0.<org.apache.lucene.index.MergePolicy$OneMerge: boolean isAborted()>();

        if $z24 == 0 goto label099;

        $r66 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z5 = virtualinvoke $r66.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z5 == 0 goto label096;

        $r71 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r71.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "abort merge after building CFS");

     label096:
        $r67 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        $r68 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String segmentFileName(java.lang.String,java.lang.String,java.lang.String)>(r5, "", "cfs");

        virtualinvoke $r67.<org.apache.lucene.index.IndexFileDeleter: void deleteFile(java.lang.String)>($r68);

        $r69 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        $r70 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String segmentFileName(java.lang.String,java.lang.String,java.lang.String)>(r5, "", "cfe");

        virtualinvoke $r69.<org.apache.lucene.index.IndexFileDeleter: void deleteFile(java.lang.String)>($r70);

        exitmonitor r1;

     label097:
        if 0 != 0 goto label098;

        specialinvoke r1.<org.apache.lucene.index.IndexWriter: void closeMergeReaders(org.apache.lucene.index.MergePolicy$OneMerge,boolean)>(r0, 1);

     label098:
        return 0;

     label099:
        exitmonitor r1;

     label100:
        goto label103;

     label101:
        $r182 := @caughtexception;

        exitmonitor r1;

     label102:
        throw $r182;

     label103:
        $r64 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r65 = $r64.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        virtualinvoke $r65.<org.apache.lucene.index.SegmentInfo: void setUseCompoundFile(boolean)>(1);

        goto label105;

     label104:
        z21 = 0;

        z26 = 0;

     label105:
        $r29 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.codecs.Codec codec>;

        $r30 = virtualinvoke $r29.<org.apache.lucene.codecs.Codec: org.apache.lucene.codecs.SegmentInfoFormat segmentInfoFormat()>();

        $r31 = virtualinvoke $r30.<org.apache.lucene.codecs.SegmentInfoFormat: org.apache.lucene.codecs.SegmentInfoWriter getSegmentInfoWriter()>();

        $r35 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory directory>;

        $r32 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r34 = $r32.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $r33 = $r23.<org.apache.lucene.index.MergeState: org.apache.lucene.index.FieldInfos fieldInfos>;

        virtualinvoke $r31.<org.apache.lucene.codecs.SegmentInfoWriter: void write(org.apache.lucene.store.Directory,org.apache.lucene.index.SegmentInfo,org.apache.lucene.index.FieldInfos,org.apache.lucene.store.IOContext)>($r35, $r34, $r33, $r7);

     label106:
        if 1 != 0 goto label119;

        entermonitor r1;

     label107:
        $r57 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        $r56 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r58 = virtualinvoke $r56.<org.apache.lucene.index.SegmentInfoPerCommit: java.util.Collection files()>();

        virtualinvoke $r57.<org.apache.lucene.index.IndexFileDeleter: void deleteNewFiles(java.util.Collection)>($r58);

        exitmonitor r1;

     label108:
        goto label111;

     label109:
        $r181 := @caughtexception;

        exitmonitor r1;

     label110:
        throw $r181;

     label111:
        goto label119;

     label112:
        $r177 := @caughtexception;

     label113:
        if 0 != 0 goto label118;

        entermonitor r1;

     label114:
        $r179 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        $r178 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r180 = virtualinvoke $r178.<org.apache.lucene.index.SegmentInfoPerCommit: java.util.Collection files()>();

        virtualinvoke $r179.<org.apache.lucene.index.IndexFileDeleter: void deleteNewFiles(java.util.Collection)>($r180);

        exitmonitor r1;

     label115:
        goto label118;

     label116:
        $r176 := @caughtexception;

        exitmonitor r1;

     label117:
        throw $r176;

     label118:
        throw $r177;

     label119:
        $r36 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z3 = virtualinvoke $r36.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z3 == 0 goto label120;

        $r51 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r52 = <java.util.Locale: java.util.Locale ROOT>;

        $r49 = newarray (java.lang.Object)[2];

        $r50 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $l3 = virtualinvoke $r50.<org.apache.lucene.index.SegmentInfoPerCommit: long sizeInBytes()>();

        $d0 = (double) $l3;

        $d1 = $d0 / 1024.0;

        $d2 = $d1 / 1024.0;

        $r53 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2);

        $r49[0] = $r53;

        $l4 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: long estimatedMergeBytes>;

        $l5 = $l4 / 1024L;

        $d3 = (double) $l5;

        $d4 = $d3 / 1024.0;

        $r54 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d4);

        $r49[1] = $r54;

        $r55 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r52, "merged segment size=%.3f MB vs estimate=%.3f MB", $r49);

        virtualinvoke $r51.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", $r55);

     label120:
        $r37 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.LiveIndexWriterConfig config>;

        $r38 = virtualinvoke $r37.<org.apache.lucene.index.LiveIndexWriterConfig: org.apache.lucene.index.IndexWriter$IndexReaderWarmer getMergedSegmentWarmer()>();

        $z4 = r1.<org.apache.lucene.index.IndexWriter: boolean poolReaders>;

        if $z4 == 0 goto label135;

        if $r38 == null goto label135;

        $r41 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r42 = $r41.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $i2 = virtualinvoke $r42.<org.apache.lucene.index.SegmentInfo: int getDocCount()>();

        if $i2 == 0 goto label135;

        $r44 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexWriter$ReaderPool readerPool>;

        $r43 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r45 = virtualinvoke $r44.<org.apache.lucene.index.IndexWriter$ReaderPool: org.apache.lucene.index.ReadersAndLiveDocs get(org.apache.lucene.index.SegmentInfoPerCommit,boolean)>($r43, 1);

        $r46 = <org.apache.lucene.store.IOContext: org.apache.lucene.store.IOContext READ>;

        $r47 = virtualinvoke $r45.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentReader getReader(org.apache.lucene.store.IOContext)>($r46);

     label121:
        virtualinvoke $r38.<org.apache.lucene.index.IndexWriter$IndexReaderWarmer: void warm(org.apache.lucene.index.AtomicReader)>($r47);

     label122:
        entermonitor r1;

     label123:
        virtualinvoke $r45.<org.apache.lucene.index.ReadersAndLiveDocs: void release(org.apache.lucene.index.SegmentReader)>($r47);

        $r48 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexWriter$ReaderPool readerPool>;

        virtualinvoke $r48.<org.apache.lucene.index.IndexWriter$ReaderPool: void release(org.apache.lucene.index.ReadersAndLiveDocs)>($r45);

        exitmonitor r1;

     label124:
        goto label127;

     label125:
        $r175 := @caughtexception;

        exitmonitor r1;

     label126:
        throw $r175;

     label127:
        goto label135;

     label128:
        $r173 := @caughtexception;

     label129:
        entermonitor r1;

     label130:
        virtualinvoke $r45.<org.apache.lucene.index.ReadersAndLiveDocs: void release(org.apache.lucene.index.SegmentReader)>($r47);

        $r174 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexWriter$ReaderPool readerPool>;

        virtualinvoke $r174.<org.apache.lucene.index.IndexWriter$ReaderPool: void release(org.apache.lucene.index.ReadersAndLiveDocs)>($r45);

        exitmonitor r1;

     label131:
        goto label134;

     label132:
        $r172 := @caughtexception;

        exitmonitor r1;

     label133:
        throw $r172;

     label134:
        throw $r173;

     label135:
        $z25 = specialinvoke r1.<org.apache.lucene.index.IndexWriter: boolean commitMerge(org.apache.lucene.index.MergePolicy$OneMerge,org.apache.lucene.index.MergeState)>(r0, $r23);

        if $z25 != 0 goto label138;

     label136:
        if 0 != 0 goto label137;

        specialinvoke r1.<org.apache.lucene.index.IndexWriter: void closeMergeReaders(org.apache.lucene.index.MergePolicy$OneMerge,boolean)>(r0, 1);

     label137:
        return 0;

     label138:
        if 1 != 0 goto label142;

        specialinvoke r1.<org.apache.lucene.index.IndexWriter: void closeMergeReaders(org.apache.lucene.index.MergePolicy$OneMerge,boolean)>(r0, 1);

        goto label142;

     label139:
        $r171 := @caughtexception;

     label140:
        if z26 != 0 goto label141;

        specialinvoke r1.<org.apache.lucene.index.IndexWriter: void closeMergeReaders(org.apache.lucene.index.MergePolicy$OneMerge,boolean)>(r0, 1);

     label141:
        throw $r171;

     label142:
        $r39 = r0.<org.apache.lucene.index.MergePolicy$OneMerge: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $r40 = $r39.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $i1 = virtualinvoke $r40.<org.apache.lucene.index.SegmentInfo: int getDocCount()>();

        return $i1;

        catch java.lang.Throwable from label005 to label010 with label011;
        catch java.lang.Throwable from label011 to label012 with label011;
        catch java.lang.Throwable from label015 to label016 with label017;
        catch java.lang.Throwable from label017 to label018 with label017;
        catch java.lang.Throwable from label026 to label027 with label028;
        catch java.lang.Throwable from label028 to label029 with label028;
        catch java.lang.Throwable from label024 to label025 with label031;
        catch java.lang.Throwable from label033 to label034 with label035;
        catch java.lang.Throwable from label035 to label036 with label035;
        catch java.lang.Throwable from label031 to label032 with label031;
        catch java.lang.Throwable from label051 to label052 with label053;
        catch java.lang.Throwable from label053 to label054 with label053;
        catch java.lang.Throwable from label059 to label060 with label061;
        catch java.lang.Throwable from label061 to label062 with label061;
        catch java.io.IOException from label056 to label057 with label064;
        catch java.lang.Throwable from label065 to label068 with label069;
        catch java.lang.Throwable from label069 to label070 with label069;
        catch java.lang.Throwable from label073 to label074 with label075;
        catch java.lang.Throwable from label075 to label076 with label075;
        catch java.lang.Throwable from label056 to label057 with label078;
        catch java.lang.Throwable from label081 to label082 with label083;
        catch java.lang.Throwable from label083 to label084 with label083;
        catch java.lang.Throwable from label064 to label071 with label086;
        catch java.lang.Throwable from label078 to label079 with label086;
        catch java.lang.Throwable from label089 to label090 with label091;
        catch java.lang.Throwable from label091 to label092 with label091;
        catch java.lang.Throwable from label086 to label087 with label086;
        catch java.lang.Throwable from label095 to label097 with label101;
        catch java.lang.Throwable from label099 to label100 with label101;
        catch java.lang.Throwable from label101 to label102 with label101;
        catch java.lang.Throwable from label107 to label108 with label109;
        catch java.lang.Throwable from label109 to label110 with label109;
        catch java.lang.Throwable from label105 to label106 with label112;
        catch java.lang.Throwable from label114 to label115 with label116;
        catch java.lang.Throwable from label116 to label117 with label116;
        catch java.lang.Throwable from label112 to label113 with label112;
        catch java.lang.Throwable from label123 to label124 with label125;
        catch java.lang.Throwable from label125 to label126 with label125;
        catch java.lang.Throwable from label121 to label122 with label128;
        catch java.lang.Throwable from label130 to label131 with label132;
        catch java.lang.Throwable from label132 to label133 with label132;
        catch java.lang.Throwable from label128 to label129 with label128;
        catch java.lang.Throwable from label002 to label097 with label139;
        catch java.lang.Throwable from label099 to label136 with label139;
        catch java.lang.Throwable from label139 to label140 with label139;
    }

    synchronized void addMergeException(org.apache.lucene.index.MergePolicy$OneMerge)
    {
        java.lang.Throwable $r4;
        long $l0, $l1;
        java.lang.AssertionError $r5;
        org.apache.lucene.index.IndexWriter r0;
        java.util.List $r2, $r3;
        org.apache.lucene.index.MergePolicy$OneMerge r1;
        byte $b2;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        r1 := @parameter0: org.apache.lucene.index.MergePolicy$OneMerge;

        $z0 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r4 = virtualinvoke r1.<org.apache.lucene.index.MergePolicy$OneMerge: java.lang.Throwable getException()>();

        if $r4 != null goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label1:
        $r2 = r0.<org.apache.lucene.index.IndexWriter: java.util.List mergeExceptions>;

        $z1 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z1 != 0 goto label2;

        $l1 = r0.<org.apache.lucene.index.IndexWriter: long mergeGen>;

        $l0 = r1.<org.apache.lucene.index.MergePolicy$OneMerge: long mergeGen>;

        $b2 = $l1 cmp $l0;

        if $b2 != 0 goto label2;

        $r3 = r0.<org.apache.lucene.index.IndexWriter: java.util.List mergeExceptions>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r1);

     label2:
        return;
    }

    final int getBufferedDeleteTermsSize()
    {
        int $i0;
        org.apache.lucene.index.IndexWriter r0;
        org.apache.lucene.index.DocumentsWriter $r1;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        $r1 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.DocumentsWriter docWriter>;

        $i0 = virtualinvoke $r1.<org.apache.lucene.index.DocumentsWriter: int getBufferedDeleteTermsSize()>();

        return $i0;
    }

    final int getNumBufferedDeleteTerms()
    {
        int $i0;
        org.apache.lucene.index.IndexWriter r0;
        org.apache.lucene.index.DocumentsWriter $r1;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        $r1 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.DocumentsWriter docWriter>;

        $i0 = virtualinvoke $r1.<org.apache.lucene.index.DocumentsWriter: int getNumBufferedDeleteTerms()>();

        return $i0;
    }

    synchronized org.apache.lucene.index.SegmentInfoPerCommit newestSegment()
    {
        org.apache.lucene.index.SegmentInfoPerCommit $r4;
        org.apache.lucene.index.SegmentInfos $r1, $r2, $r3;
        org.apache.lucene.index.IndexWriter r0;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        $r1 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $i0 = virtualinvoke $r1.<org.apache.lucene.index.SegmentInfos: int size()>();

        if $i0 <= 0 goto label1;

        $r3 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $r2 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $i1 = virtualinvoke $r2.<org.apache.lucene.index.SegmentInfos: int size()>();

        $i2 = $i1 - 1;

        $r4 = virtualinvoke $r3.<org.apache.lucene.index.SegmentInfos: org.apache.lucene.index.SegmentInfoPerCommit info(int)>($i2);

        goto label2;

     label1:
        $r4 = null;

     label2:
        return $r4;
    }

    public synchronized java.lang.String segString()
    {
        org.apache.lucene.index.IndexWriter r0;
        java.lang.String $r2;
        org.apache.lucene.index.SegmentInfos $r1;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        $r1 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $r2 = virtualinvoke r0.<org.apache.lucene.index.IndexWriter: java.lang.String segString(java.lang.Iterable)>($r1);

        return $r2;
    }

    public synchronized java.lang.String segString(java.lang.Iterable)
    {
        java.util.Iterator $r2;
        org.apache.lucene.index.SegmentInfoPerCommit r5;
        java.lang.Iterable r1;
        org.apache.lucene.index.IndexWriter r6;
        int $i0;
        java.lang.StringBuilder $r0;
        java.lang.Object $r4;
        java.lang.String $r3, $r7;
        boolean $z0;

        r6 := @this: org.apache.lucene.index.IndexWriter;

        r1 := @parameter0: java.lang.Iterable;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.lucene.index.SegmentInfoPerCommit) $r4;

        $i0 = virtualinvoke $r0.<java.lang.StringBuilder: int length()>();

        if $i0 <= 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label2:
        $r7 = virtualinvoke r6.<org.apache.lucene.index.IndexWriter: java.lang.String segString(org.apache.lucene.index.SegmentInfoPerCommit)>(r5);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        goto label1;

     label3:
        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public synchronized java.lang.String segString(org.apache.lucene.index.SegmentInfoPerCommit)
    {
        org.apache.lucene.index.SegmentInfo $r1;
        org.apache.lucene.index.SegmentInfoPerCommit r0;
        org.apache.lucene.index.IndexWriter r2;
        org.apache.lucene.store.Directory $r3;
        int $i0, $i1, $i2;
        java.lang.String $r4;

        r2 := @this: org.apache.lucene.index.IndexWriter;

        r0 := @parameter0: org.apache.lucene.index.SegmentInfoPerCommit;

        $r1 = r0.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $r3 = $r1.<org.apache.lucene.index.SegmentInfo: org.apache.lucene.store.Directory dir>;

        $i0 = virtualinvoke r2.<org.apache.lucene.index.IndexWriter: int numDeletedDocs(org.apache.lucene.index.SegmentInfoPerCommit)>(r0);

        $i1 = virtualinvoke r0.<org.apache.lucene.index.SegmentInfoPerCommit: int getDelCount()>();

        $i2 = $i0 - $i1;

        $r4 = virtualinvoke r0.<org.apache.lucene.index.SegmentInfoPerCommit: java.lang.String toString(org.apache.lucene.store.Directory,int)>($r3, $i2);

        return $r4;
    }

    private synchronized void doWait()
    {
        org.apache.lucene.index.IndexWriter r0;
        java.lang.InterruptedException $r1;
        org.apache.lucene.util.ThreadInterruptedException $r2;

        r0 := @this: org.apache.lucene.index.IndexWriter;

     label1:
        virtualinvoke r0.<java.lang.Object: void wait(long)>(1000L);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        $r2 = new org.apache.lucene.util.ThreadInterruptedException;

        specialinvoke $r2.<org.apache.lucene.util.ThreadInterruptedException: void <init>(java.lang.InterruptedException)>($r1);

        throw $r2;

     label4:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    void keepFullyDeletedSegments()
    {
        org.apache.lucene.index.IndexWriter r0;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        r0.<org.apache.lucene.index.IndexWriter: boolean keepFullyDeletedSegments> = 1;

        return;
    }

    boolean getKeepFullyDeletedSegments()
    {
        org.apache.lucene.index.IndexWriter r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        $z0 = r0.<org.apache.lucene.index.IndexWriter: boolean keepFullyDeletedSegments>;

        return $z0;
    }

    private boolean filesExist(org.apache.lucene.index.SegmentInfos) throws java.io.IOException
    {
        java.lang.AssertionError $r8, $r14;
        org.apache.lucene.index.IndexFileDeleter $r7;
        org.apache.lucene.store.Directory $r2, $r13;
        java.lang.String r6, $r12, $r19;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Iterator $r4;
        java.util.Collection $r3;
        org.apache.lucene.index.SegmentInfos r0;
        org.apache.lucene.index.IndexWriter r1;
        java.lang.Object $r5;
        java.lang.StringBuilder $r9, $r10, $r11, $r15, $r16, $r17, $r18;

        r1 := @this: org.apache.lucene.index.IndexWriter;

        r0 := @parameter0: org.apache.lucene.index.SegmentInfos;

        $r2 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory directory>;

        $r3 = virtualinvoke r0.<org.apache.lucene.index.SegmentInfos: java.util.Collection files(org.apache.lucene.store.Directory,boolean)>($r2, 0);

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r5;

        $z1 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $r13 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory directory>;

        $z4 = virtualinvoke $r13.<org.apache.lucene.store.Directory: boolean fileExists(java.lang.String)>(r6);

        if $z4 != 0 goto label2;

        $r14 = new java.lang.AssertionError;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.AssertionError: void <init>(java.lang.Object)>($r19);

        throw $r14;

     label2:
        $z2 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        $r7 = r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        $z3 = virtualinvoke $r7.<org.apache.lucene.index.IndexFileDeleter: boolean exists(java.lang.String)>(r6);

        if $z3 != 0 goto label3;

        $r8 = new java.lang.AssertionError;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IndexFileDeleter doesn\'t know about file ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.AssertionError: void <init>(java.lang.Object)>($r12);

        throw $r8;

     label3:
        goto label1;

     label4:
        return 1;
    }

    synchronized org.apache.lucene.index.SegmentInfos toLiveInfos(org.apache.lucene.index.SegmentInfos)
    {
        java.util.Iterator $r4, $r6;
        org.apache.lucene.index.SegmentInfoPerCommit r9, r11, r12;
        java.util.HashMap $r1;
        org.apache.lucene.index.SegmentInfos $r0, $r3, r5;
        org.apache.lucene.index.IndexWriter r2;
        java.lang.Object $r7, $r8, $r10;
        boolean $z0, $z1;

        r2 := @this: org.apache.lucene.index.IndexWriter;

        r5 := @parameter0: org.apache.lucene.index.SegmentInfos;

        $r0 = new org.apache.lucene.index.SegmentInfos;

        specialinvoke $r0.<org.apache.lucene.index.SegmentInfos: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        $r3 = r2.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $r4 = virtualinvoke $r3.<org.apache.lucene.index.SegmentInfos: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r10 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.apache.lucene.index.SegmentInfoPerCommit) $r10;

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, r11);

        goto label1;

     label2:
        $r6 = virtualinvoke r5.<org.apache.lucene.index.SegmentInfos: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r12 = (org.apache.lucene.index.SegmentInfoPerCommit) $r7;

        $r8 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r12);

        r9 = (org.apache.lucene.index.SegmentInfoPerCommit) $r8;

        if r9 == null goto label4;

        r12 = r9;

     label4:
        virtualinvoke $r0.<org.apache.lucene.index.SegmentInfos: void add(org.apache.lucene.index.SegmentInfoPerCommit)>(r12);

        goto label3;

     label5:
        return $r0;
    }

    private void startCommit(org.apache.lucene.index.SegmentInfos) throws java.io.IOException
    {
        org.apache.lucene.index.IndexFileDeleter $r13, $r40, $r60;
        byte $b2, $b5, $b9;
        org.apache.lucene.util.InfoStream $r1, $r2, $r8, $r11, $r14, $r17, $r30, $r38, $r41, $r49, $r58, $r61;
        java.lang.StringBuilder $r18, $r19, $r31, $r34, $r35, $r36, $r44, $r45, $r46, $r47, $r70, $r72, $r78;
        java.lang.Throwable $r55, $r56, $r62, $r63, $r65, $r66;
        long $l0, $l1, $l3, $l4, $l6, $l7, $l8, $l10, $l11;
        java.lang.AssertionError $r67, $r68, $r71, $r73, $r74, $r75, $r76, $r77, $r79, $r80;
        java.lang.String $r20, $r33, $r37, $r48;
        java.lang.OutOfMemoryError $r54;
        java.lang.IllegalStateException $r69;
        org.apache.lucene.store.Directory $r4, $r5, $r7, $r21, $r64;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, z23, z24, z25;
        java.util.Collection $r6, $r12, $r39, $r59;
        org.apache.lucene.index.SegmentInfos r3, $r9, $r22, $r24, $r32, $r51, $r57;
        org.apache.lucene.index.IndexWriter r0;
        int $i12;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        r3 := @parameter0: org.apache.lucene.index.SegmentInfos;

        $z0 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $z21 = virtualinvoke r0.<org.apache.lucene.index.IndexWriter: boolean testPoint(java.lang.String)>("startStartCommit");

        if $z21 != 0 goto label01;

        $r67 = new java.lang.AssertionError;

        specialinvoke $r67.<java.lang.AssertionError: void <init>()>();

        throw $r67;

     label01:
        $z1 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z1 != 0 goto label02;

        $r51 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos pendingCommit>;

        if $r51 == null goto label02;

        $r68 = new java.lang.AssertionError;

        specialinvoke $r68.<java.lang.AssertionError: void <init>()>();

        throw $r68;

     label02:
        $z2 = r0.<org.apache.lucene.index.IndexWriter: boolean hitOOM>;

        if $z2 == 0 goto label03;

        $r69 = new java.lang.IllegalStateException;

        specialinvoke $r69.<java.lang.IllegalStateException: void <init>(java.lang.String)>("this writer hit an OutOfMemoryError; cannot commit");

        throw $r69;

     label03:
        $r1 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z3 = virtualinvoke $r1.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z3 == 0 goto label04;

        $r49 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r49.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "startCommit(): start");

     label04:
        entermonitor r0;

     label05:
        $z4 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z4 != 0 goto label06;

        $l8 = r0.<org.apache.lucene.index.IndexWriter: long lastCommitChangeCount>;

        $l7 = r0.<org.apache.lucene.index.IndexWriter: long changeCount>;

        $b9 = $l8 cmp $l7;

        $i12 = (int) $b9;

        if $i12 <= 0 goto label06;

        $r71 = new java.lang.AssertionError;

        $r70 = new java.lang.StringBuilder;

        specialinvoke $r70.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("lastCommitChangeCount=");

        $l10 = r0.<org.apache.lucene.index.IndexWriter: long lastCommitChangeCount>;

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l10);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" changeCount=");

        $l11 = r0.<org.apache.lucene.index.IndexWriter: long changeCount>;

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l11);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r71.<java.lang.AssertionError: void <init>(java.lang.Object)>($r48);

        throw $r71;

     label06:
        $l1 = r0.<org.apache.lucene.index.IndexWriter: long pendingCommitChangeCount>;

        $l0 = r0.<org.apache.lucene.index.IndexWriter: long lastCommitChangeCount>;

        $b2 = $l1 cmp $l0;

        if $b2 != 0 goto label09;

        $r38 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z20 = virtualinvoke $r38.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z20 == 0 goto label07;

        $r41 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r41.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "  skip startCommit(): no changes pending");

     label07:
        $r40 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        $r39 = r0.<org.apache.lucene.index.IndexWriter: java.util.Collection filesToCommit>;

        virtualinvoke $r40.<org.apache.lucene.index.IndexFileDeleter: void decRef(java.util.Collection)>($r39);

        r0.<org.apache.lucene.index.IndexWriter: java.util.Collection filesToCommit> = null;

        exitmonitor r0;

     label08:
        return;

     label09:
        $r2 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z5 = virtualinvoke $r2.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z5 == 0 goto label10;

        $r30 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r72 = new java.lang.StringBuilder;

        specialinvoke $r72.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("startCommit index=");

        $r32 = virtualinvoke r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos toLiveInfos(org.apache.lucene.index.SegmentInfos)>(r3);

        $r33 = virtualinvoke r0.<org.apache.lucene.index.IndexWriter: java.lang.String segString(java.lang.Iterable)>($r32);

        $r34 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" changeCount=");

        $l6 = r0.<org.apache.lucene.index.IndexWriter: long changeCount>;

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l6);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r30.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", $r37);

     label10:
        $z6 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z6 != 0 goto label11;

        $z19 = specialinvoke r0.<org.apache.lucene.index.IndexWriter: boolean filesExist(org.apache.lucene.index.SegmentInfos)>(r3);

        if $z19 != 0 goto label11;

        $r73 = new java.lang.AssertionError;

        specialinvoke $r73.<java.lang.AssertionError: void <init>()>();

        throw $r73;

     label11:
        exitmonitor r0;

     label12:
        goto label15;

     label13:
        $r66 := @caughtexception;

        exitmonitor r0;

     label14:
        throw $r66;

     label15:
        $z7 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z7 != 0 goto label16;

        $z18 = virtualinvoke r0.<org.apache.lucene.index.IndexWriter: boolean testPoint(java.lang.String)>("midStartCommit");

        if $z18 != 0 goto label16;

        $r74 = new java.lang.AssertionError;

        specialinvoke $r74.<java.lang.AssertionError: void <init>()>();

        throw $r74;

     label16:
        z23 = 0;

        z25 = 0;

     label17:
        $z8 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z8 != 0 goto label18;

        $z17 = virtualinvoke r0.<org.apache.lucene.index.IndexWriter: boolean testPoint(java.lang.String)>("midStartCommit2");

        if $z17 != 0 goto label18;

        $r75 = new java.lang.AssertionError;

        specialinvoke $r75.<java.lang.AssertionError: void <init>()>();

        throw $r75;

     label18:
        entermonitor r0;

     label19:
        $z9 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z9 != 0 goto label20;

        $r24 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos pendingCommit>;

        if $r24 == null goto label20;

        $r76 = new java.lang.AssertionError;

        specialinvoke $r76.<java.lang.AssertionError: void <init>()>();

        throw $r76;

     label20:
        $z10 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z10 != 0 goto label21;

        $r22 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $l3 = virtualinvoke $r22.<org.apache.lucene.index.SegmentInfos: long getGeneration()>();

        $l4 = virtualinvoke r3.<org.apache.lucene.index.SegmentInfos: long getGeneration()>();

        $b5 = $l3 cmp $l4;

        if $b5 == 0 goto label21;

        $r77 = new java.lang.AssertionError;

        specialinvoke $r77.<java.lang.AssertionError: void <init>()>();

        throw $r77;

     label21:
        $r4 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory directory>;

        virtualinvoke r3.<org.apache.lucene.index.SegmentInfos: void prepareCommit(org.apache.lucene.store.Directory)>($r4);

        z23 = 1;

        z25 = 1;

        z24 = 1;

        r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos pendingCommit> = r3;

        exitmonitor r0;

     label22:
        goto label25;

     label23:
        $r65 := @caughtexception;

        exitmonitor r0;

     label24:
        throw $r65;

     label25:
        $r5 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory directory>;

        $r6 = virtualinvoke r3.<org.apache.lucene.index.SegmentInfos: java.util.Collection files(org.apache.lucene.store.Directory,boolean)>($r5, 0);

        $r7 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory directory>;

        virtualinvoke $r7.<org.apache.lucene.store.Directory: void sync(java.util.Collection)>($r6);

     label26:
        if 1 != 0 goto label30;

        z23 = 0;

        z25 = 0;

        z24 = 0;

        r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos pendingCommit> = null;

        $r21 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory directory>;

        virtualinvoke r3.<org.apache.lucene.index.SegmentInfos: void rollbackCommit(org.apache.lucene.store.Directory)>($r21);

        goto label30;

     label27:
        $r63 := @caughtexception;

     label28:
        if 0 != 0 goto label29;

        z23 = 0;

        z25 = 0;

        r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos pendingCommit> = null;

        $r64 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory directory>;

        virtualinvoke r3.<org.apache.lucene.index.SegmentInfos: void rollbackCommit(org.apache.lucene.store.Directory)>($r64);

     label29:
        throw $r63;

     label30:
        $r8 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z11 = virtualinvoke $r8.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z11 == 0 goto label31;

        $r17 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r78 = new java.lang.StringBuilder;

        specialinvoke $r78.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("done all syncs: ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r17.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", $r20);

     label31:
        $z12 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z12 != 0 goto label32;

        $z16 = virtualinvoke r0.<org.apache.lucene.index.IndexWriter: boolean testPoint(java.lang.String)>("midStartCommitSuccess");

        if $z16 != 0 goto label32;

        $r79 = new java.lang.AssertionError;

        specialinvoke $r79.<java.lang.AssertionError: void <init>()>();

        throw $r79;

     label32:
        entermonitor r0;

     label33:
        $r9 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        virtualinvoke $r9.<org.apache.lucene.index.SegmentInfos: void updateGeneration(org.apache.lucene.index.SegmentInfos)>(r3);

        if z24 != 0 goto label35;

        $r11 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z15 = virtualinvoke $r11.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z15 == 0 goto label34;

        $r14 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r14.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "hit exception committing segments file");

     label34:
        $r13 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        $r12 = r0.<org.apache.lucene.index.IndexWriter: java.util.Collection filesToCommit>;

        virtualinvoke $r13.<org.apache.lucene.index.IndexFileDeleter: void decRef(java.util.Collection)>($r12);

        r0.<org.apache.lucene.index.IndexWriter: java.util.Collection filesToCommit> = null;

     label35:
        exitmonitor r0;

     label36:
        goto label39;

     label37:
        $r62 := @caughtexception;

        exitmonitor r0;

     label38:
        throw $r62;

     label39:
        goto label49;

     label40:
        $r56 := @caughtexception;

     label41:
        entermonitor r0;

     label42:
        $r57 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        virtualinvoke $r57.<org.apache.lucene.index.SegmentInfos: void updateGeneration(org.apache.lucene.index.SegmentInfos)>(r3);

        if z25 != 0 goto label44;

        $r58 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z22 = virtualinvoke $r58.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z22 == 0 goto label43;

        $r61 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r61.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", "hit exception committing segments file");

     label43:
        $r60 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        $r59 = r0.<org.apache.lucene.index.IndexWriter: java.util.Collection filesToCommit>;

        virtualinvoke $r60.<org.apache.lucene.index.IndexFileDeleter: void decRef(java.util.Collection)>($r59);

        r0.<org.apache.lucene.index.IndexWriter: java.util.Collection filesToCommit> = null;

     label44:
        exitmonitor r0;

     label45:
        goto label48;

     label46:
        $r55 := @caughtexception;

        exitmonitor r0;

     label47:
        throw $r55;

     label48:
        throw $r56;

     label49:
        goto label51;

     label50:
        $r54 := @caughtexception;

        specialinvoke r0.<org.apache.lucene.index.IndexWriter: void handleOOM(java.lang.OutOfMemoryError,java.lang.String)>($r54, "startCommit");

     label51:
        $z13 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z13 != 0 goto label52;

        $z14 = virtualinvoke r0.<org.apache.lucene.index.IndexWriter: boolean testPoint(java.lang.String)>("finishStartCommit");

        if $z14 != 0 goto label52;

        $r80 = new java.lang.AssertionError;

        specialinvoke $r80.<java.lang.AssertionError: void <init>()>();

        throw $r80;

     label52:
        return;

        catch java.lang.Throwable from label05 to label08 with label13;
        catch java.lang.Throwable from label09 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
        catch java.lang.Throwable from label19 to label22 with label23;
        catch java.lang.Throwable from label23 to label24 with label23;
        catch java.lang.Throwable from label25 to label26 with label27;
        catch java.lang.Throwable from label27 to label28 with label27;
        catch java.lang.Throwable from label33 to label36 with label37;
        catch java.lang.Throwable from label37 to label38 with label37;
        catch java.lang.Throwable from label17 to label32 with label40;
        catch java.lang.Throwable from label42 to label45 with label46;
        catch java.lang.Throwable from label46 to label47 with label46;
        catch java.lang.Throwable from label40 to label41 with label40;
        catch java.lang.OutOfMemoryError from label03 to label08 with label50;
        catch java.lang.OutOfMemoryError from label09 to label49 with label50;
    }

    public static boolean isLocked(org.apache.lucene.store.Directory) throws java.io.IOException
    {
        org.apache.lucene.store.Lock $r1;
        org.apache.lucene.store.Directory r0;
        boolean $z0;

        r0 := @parameter0: org.apache.lucene.store.Directory;

        $r1 = virtualinvoke r0.<org.apache.lucene.store.Directory: org.apache.lucene.store.Lock makeLock(java.lang.String)>("write.lock");

        $z0 = virtualinvoke $r1.<org.apache.lucene.store.Lock: boolean isLocked()>();

        return $z0;
    }

    public static void unlock(org.apache.lucene.store.Directory) throws java.io.IOException
    {
        org.apache.lucene.store.Lock $r1;
        org.apache.lucene.store.Directory r0;

        r0 := @parameter0: org.apache.lucene.store.Directory;

        $r1 = virtualinvoke r0.<org.apache.lucene.store.Directory: org.apache.lucene.store.Lock makeLock(java.lang.String)>("write.lock");

        virtualinvoke $r1.<org.apache.lucene.store.Lock: void release()>();

        return;
    }

    private void handleOOM(java.lang.OutOfMemoryError, java.lang.String)
    {
        org.apache.lucene.index.IndexWriter r0;
        org.apache.lucene.util.InfoStream $r1, $r4;
        java.lang.StringBuilder $r3, $r5, $r7;
        java.lang.String r6, $r8;
        java.lang.OutOfMemoryError r2;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        r2 := @parameter0: java.lang.OutOfMemoryError;

        r6 := @parameter1: java.lang.String;

        $r1 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z0 = virtualinvoke $r1.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z0 == 0 goto label1;

        $r4 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("hit OutOfMemoryError inside ");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", $r8);

     label1:
        r0.<org.apache.lucene.index.IndexWriter: boolean hitOOM> = 1;

        throw r2;
    }

    boolean testPoint(java.lang.String)
    {
        org.apache.lucene.index.IndexWriter r0;
        java.lang.String r1;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        r1 := @parameter0: java.lang.String;

        return 1;
    }

    synchronized boolean nrtIsCurrent(org.apache.lucene.index.SegmentInfos)
    {
        long $l0, $l1, $l3, $l4;
        org.apache.lucene.index.DocumentsWriter $r3, $r11;
        byte $b2, $b5;
        java.lang.String $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.apache.lucene.index.SegmentInfos r2, $r8, $r17;
        org.apache.lucene.index.IndexWriter r0;
        org.apache.lucene.util.InfoStream $r1, $r6;
        org.apache.lucene.index.BufferedDeletesStream $r4, $r14;
        java.lang.StringBuilder $r5, $r7, $r9, $r10, $r12, $r13, $r15;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        r2 := @parameter0: org.apache.lucene.index.SegmentInfos;

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void ensureOpen()>();

        $r1 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z0 = virtualinvoke $r1.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z0 == 0 goto label3;

        $r6 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("nrtIsCurrent: infoVersion matches: ");

        $l1 = r2.<org.apache.lucene.index.SegmentInfos: long version>;

        $r8 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $l0 = $r8.<org.apache.lucene.index.SegmentInfos: long version>;

        $b2 = $l1 cmp $l0;

        if $b2 != 0 goto label1;

        $z5 = 1;

        goto label2;

     label1:
        $z5 = 0;

     label2:
        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z5);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; DW changes: ");

        $r11 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.DocumentsWriter docWriter>;

        $z3 = virtualinvoke $r11.<org.apache.lucene.index.DocumentsWriter: boolean anyChanges()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; BD changes: ");

        $r14 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.BufferedDeletesStream bufferedDeletesStream>;

        $z4 = virtualinvoke $r14.<org.apache.lucene.index.BufferedDeletesStream: boolean any()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z4);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", $r16);

     label3:
        $l3 = r2.<org.apache.lucene.index.SegmentInfos: long version>;

        $r17 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $l4 = $r17.<org.apache.lucene.index.SegmentInfos: long version>;

        $b5 = $l3 cmp $l4;

        if $b5 != 0 goto label4;

        $r3 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.DocumentsWriter docWriter>;

        $z1 = virtualinvoke $r3.<org.apache.lucene.index.DocumentsWriter: boolean anyChanges()>();

        if $z1 != 0 goto label4;

        $r4 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.BufferedDeletesStream bufferedDeletesStream>;

        $z2 = virtualinvoke $r4.<org.apache.lucene.index.BufferedDeletesStream: boolean any()>();

        if $z2 != 0 goto label4;

        $z6 = 1;

        goto label5;

     label4:
        $z6 = 0;

     label5:
        return $z6;
    }

    synchronized boolean isClosed()
    {
        org.apache.lucene.index.IndexWriter r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        $z0 = r0.<org.apache.lucene.index.IndexWriter: boolean closed>;

        return $z0;
    }

    public synchronized void deleteUnusedFiles() throws java.io.IOException
    {
        org.apache.lucene.index.IndexWriter r0;
        org.apache.lucene.index.IndexFileDeleter $r1, $r2;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        virtualinvoke r0.<org.apache.lucene.index.IndexWriter: void ensureOpen(boolean)>(0);

        $r1 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        virtualinvoke $r1.<org.apache.lucene.index.IndexFileDeleter: void deletePendingFiles()>();

        $r2 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        virtualinvoke $r2.<org.apache.lucene.index.IndexFileDeleter: void revisitPolicy()>();

        return;
    }

    synchronized void deletePendingFiles() throws java.io.IOException
    {
        org.apache.lucene.index.IndexWriter r0;
        org.apache.lucene.index.IndexFileDeleter $r1;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        $r1 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        virtualinvoke $r1.<org.apache.lucene.index.IndexFileDeleter: void deletePendingFiles()>();

        return;
    }

    static final java.util.Collection createCompoundFile(org.apache.lucene.util.InfoStream, org.apache.lucene.store.Directory, org.apache.lucene.index.MergeState$CheckAbort, org.apache.lucene.index.SegmentInfo, org.apache.lucene.store.IOContext) throws java.io.IOException
    {
        org.apache.lucene.store.Directory r6;
        java.io.Closeable[] $r9, $r32, $r43;
        org.apache.lucene.store.IOContext r7;
        boolean $z0, $z1, $z2;
        org.apache.lucene.index.SegmentInfo r0;
        java.util.Set $r4;
        org.apache.lucene.util.InfoStream r3;
        java.lang.StringBuilder $r19, $r20, $r52;
        java.lang.Throwable $r22, $r23, $r26, $r27, $r28, $r31, $r33, $r34, $r37, $r38, $r39, $r44, $r45, $r48, $r49, $r50;
        long $l0;
        java.lang.AssertionError $r53;
        java.util.HashSet $r55;
        org.apache.lucene.store.CompoundFileDirectory $r54;
        int $i1, $i3;
        java.lang.String $r1, $r2, $r11, $r12, $r13, $r14, $r21, $r24, $r25, $r29, $r30, $r35, $r36, $r40, $r41, $r46, $r47, r51;
        double $d0;
        org.apache.lucene.index.MergeState$CheckAbort r16;
        java.util.Iterator $r8;
        java.io.IOException $r42;
        java.lang.Object $r15;

        r3 := @parameter0: org.apache.lucene.util.InfoStream;

        r6 := @parameter1: org.apache.lucene.store.Directory;

        r16 := @parameter2: org.apache.lucene.index.MergeState$CheckAbort;

        r0 := @parameter3: org.apache.lucene.index.SegmentInfo;

        r7 := @parameter4: org.apache.lucene.store.IOContext;

        $r1 = r0.<org.apache.lucene.index.SegmentInfo: java.lang.String name>;

        $r2 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String segmentFileName(java.lang.String,java.lang.String,java.lang.String)>($r1, "", "cfs");

        $z0 = virtualinvoke r3.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("IW");

        if $z0 == 0 goto label01;

        $r52 = new java.lang.StringBuilder;

        specialinvoke $r52.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("create compound file ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r3.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("IW", $r21);

     label01:
        $z1 = <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled>;

        if $z1 != 0 goto label02;

        $i1 = staticinvoke <org.apache.lucene.codecs.lucene3x.Lucene3xSegmentInfoFormat: int getDocStoreOffset(org.apache.lucene.index.SegmentInfo)>(r0);

        $i3 = (int) -1;

        if $i1 == $i3 goto label02;

        $r53 = new java.lang.AssertionError;

        specialinvoke $r53.<java.lang.AssertionError: void <init>()>();

        throw $r53;

     label02:
        $r4 = virtualinvoke r0.<org.apache.lucene.index.SegmentInfo: java.util.Set files()>();

        $r54 = new org.apache.lucene.store.CompoundFileDirectory;

        specialinvoke $r54.<org.apache.lucene.store.CompoundFileDirectory: void <init>(org.apache.lucene.store.Directory,java.lang.String,org.apache.lucene.store.IOContext,boolean)>(r6, $r2, r7, 1);

     label03:
        $r8 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label04:
        $z2 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label05;

        $r15 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r51 = (java.lang.String) $r15;

        virtualinvoke r6.<org.apache.lucene.store.Directory: void copy(org.apache.lucene.store.Directory,java.lang.String,java.lang.String,org.apache.lucene.store.IOContext)>($r54, r51, r51, r7);

        $l0 = virtualinvoke r6.<org.apache.lucene.store.Directory: long fileLength(java.lang.String)>(r51);

        $d0 = (double) $l0;

        virtualinvoke r16.<org.apache.lucene.index.MergeState$CheckAbort: void work(double)>($d0);

        goto label04;

     label05:
        $r9 = newarray (java.io.Closeable)[1];

        $r9[0] = $r54;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.lang.Exception,java.io.Closeable[])>(null, $r9);

     label06:
        if 1 != 0 goto label22;

     label07:
        virtualinvoke r6.<org.apache.lucene.store.Directory: void deleteFile(java.lang.String)>($r2);

     label08:
        goto label10;

     label09:
        $r50 := @caughtexception;

     label10:
        $r13 = r0.<org.apache.lucene.index.SegmentInfo: java.lang.String name>;

        $r14 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String segmentFileName(java.lang.String,java.lang.String,java.lang.String)>($r13, "", "cfe");

        virtualinvoke r6.<org.apache.lucene.store.Directory: void deleteFile(java.lang.String)>($r14);

     label11:
        goto label22;

     label12:
        $r49 := @caughtexception;

        goto label22;

     label13:
        $r48 := @caughtexception;

     label14:
        if 0 != 0 goto label21;

     label15:
        virtualinvoke r6.<org.apache.lucene.store.Directory: void deleteFile(java.lang.String)>($r2);

     label16:
        goto label18;

     label17:
        $r45 := @caughtexception;

     label18:
        $r46 = r0.<org.apache.lucene.index.SegmentInfo: java.lang.String name>;

        $r47 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String segmentFileName(java.lang.String,java.lang.String,java.lang.String)>($r46, "", "cfe");

        virtualinvoke r6.<org.apache.lucene.store.Directory: void deleteFile(java.lang.String)>($r47);

     label19:
        goto label21;

     label20:
        $r44 := @caughtexception;

     label21:
        throw $r48;

     label22:
        goto label61;

     label23:
        $r42 := @caughtexception;

     label24:
        $r43 = newarray (java.io.Closeable)[1];

        $r43[0] = $r54;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.lang.Exception,java.io.Closeable[])>($r42, $r43);

     label25:
        if 1 != 0 goto label41;

     label26:
        virtualinvoke r6.<org.apache.lucene.store.Directory: void deleteFile(java.lang.String)>($r2);

     label27:
        goto label29;

     label28:
        $r39 := @caughtexception;

     label29:
        $r40 = r0.<org.apache.lucene.index.SegmentInfo: java.lang.String name>;

        $r41 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String segmentFileName(java.lang.String,java.lang.String,java.lang.String)>($r40, "", "cfe");

        virtualinvoke r6.<org.apache.lucene.store.Directory: void deleteFile(java.lang.String)>($r41);

     label30:
        goto label41;

     label31:
        $r38 := @caughtexception;

        goto label41;

     label32:
        $r37 := @caughtexception;

     label33:
        if 0 != 0 goto label40;

     label34:
        virtualinvoke r6.<org.apache.lucene.store.Directory: void deleteFile(java.lang.String)>($r2);

     label35:
        goto label37;

     label36:
        $r34 := @caughtexception;

     label37:
        $r35 = r0.<org.apache.lucene.index.SegmentInfo: java.lang.String name>;

        $r36 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String segmentFileName(java.lang.String,java.lang.String,java.lang.String)>($r35, "", "cfe");

        virtualinvoke r6.<org.apache.lucene.store.Directory: void deleteFile(java.lang.String)>($r36);

     label38:
        goto label40;

     label39:
        $r33 := @caughtexception;

     label40:
        throw $r37;

     label41:
        goto label61;

     label42:
        $r31 := @caughtexception;

     label43:
        $r32 = newarray (java.io.Closeable)[1];

        $r32[0] = $r54;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.lang.Exception,java.io.Closeable[])>(null, $r32);

     label44:
        if 1 != 0 goto label60;

     label45:
        virtualinvoke r6.<org.apache.lucene.store.Directory: void deleteFile(java.lang.String)>($r2);

     label46:
        goto label48;

     label47:
        $r28 := @caughtexception;

     label48:
        $r29 = r0.<org.apache.lucene.index.SegmentInfo: java.lang.String name>;

        $r30 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String segmentFileName(java.lang.String,java.lang.String,java.lang.String)>($r29, "", "cfe");

        virtualinvoke r6.<org.apache.lucene.store.Directory: void deleteFile(java.lang.String)>($r30);

     label49:
        goto label60;

     label50:
        $r27 := @caughtexception;

        goto label60;

     label51:
        $r26 := @caughtexception;

     label52:
        if 0 != 0 goto label59;

     label53:
        virtualinvoke r6.<org.apache.lucene.store.Directory: void deleteFile(java.lang.String)>($r2);

     label54:
        goto label56;

     label55:
        $r23 := @caughtexception;

     label56:
        $r24 = r0.<org.apache.lucene.index.SegmentInfo: java.lang.String name>;

        $r25 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String segmentFileName(java.lang.String,java.lang.String,java.lang.String)>($r24, "", "cfe");

        virtualinvoke r6.<org.apache.lucene.store.Directory: void deleteFile(java.lang.String)>($r25);

     label57:
        goto label59;

     label58:
        $r22 := @caughtexception;

     label59:
        throw $r26;

     label60:
        throw $r31;

     label61:
        $r55 = new java.util.HashSet;

        specialinvoke $r55.<java.util.HashSet: void <init>()>();

        interfaceinvoke $r55.<java.util.Set: boolean add(java.lang.Object)>($r2);

        $r11 = r0.<org.apache.lucene.index.SegmentInfo: java.lang.String name>;

        $r12 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String segmentFileName(java.lang.String,java.lang.String,java.lang.String)>($r11, "", "cfe");

        interfaceinvoke $r55.<java.util.Set: boolean add(java.lang.Object)>($r12);

        virtualinvoke r0.<org.apache.lucene.index.SegmentInfo: void setFiles(java.util.Set)>($r55);

        return $r4;

        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label13 to label14 with label13;
        catch java.io.IOException from label03 to label05 with label23;
        catch java.lang.Throwable from label26 to label27 with label28;
        catch java.lang.Throwable from label29 to label30 with label31;
        catch java.lang.Throwable from label24 to label25 with label32;
        catch java.lang.Throwable from label34 to label35 with label36;
        catch java.lang.Throwable from label37 to label38 with label39;
        catch java.lang.Throwable from label32 to label33 with label32;
        catch java.lang.Throwable from label03 to label05 with label42;
        catch java.lang.Throwable from label23 to label24 with label42;
        catch java.lang.Throwable from label45 to label46 with label47;
        catch java.lang.Throwable from label48 to label49 with label50;
        catch java.lang.Throwable from label43 to label44 with label51;
        catch java.lang.Throwable from label53 to label54 with label55;
        catch java.lang.Throwable from label56 to label57 with label58;
        catch java.lang.Throwable from label51 to label52 with label51;
        catch java.lang.Throwable from label42 to label43 with label42;
    }

    final synchronized void deleteNewFiles(java.util.Collection) throws java.io.IOException
    {
        org.apache.lucene.index.IndexWriter r0;
        org.apache.lucene.index.IndexFileDeleter $r2;
        java.util.Collection r1;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        virtualinvoke $r2.<org.apache.lucene.index.IndexFileDeleter: void deleteNewFiles(java.util.Collection)>(r1);

        return;
    }

    final synchronized void flushFailed(org.apache.lucene.index.SegmentInfo) throws java.io.IOException
    {
        org.apache.lucene.index.IndexWriter r0;
        org.apache.lucene.index.SegmentInfo r1;
        java.lang.String $r2;
        org.apache.lucene.index.IndexFileDeleter $r3;

        r0 := @this: org.apache.lucene.index.IndexWriter;

        r1 := @parameter0: org.apache.lucene.index.SegmentInfo;

        $r3 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexFileDeleter deleter>;

        $r2 = r1.<org.apache.lucene.index.SegmentInfo: java.lang.String name>;

        virtualinvoke $r3.<org.apache.lucene.index.IndexFileDeleter: void refresh(java.lang.String)>($r2);

        return;
    }

    static boolean access$000(org.apache.lucene.index.IndexWriter)
    {
        org.apache.lucene.index.IndexWriter r0;
        boolean $z0;

        r0 := @parameter0: org.apache.lucene.index.IndexWriter;

        $z0 = r0.<org.apache.lucene.index.IndexWriter: boolean poolReaders>;

        return $z0;
    }

    static org.apache.lucene.store.Directory access$100(org.apache.lucene.index.IndexWriter)
    {
        org.apache.lucene.index.IndexWriter r0;
        org.apache.lucene.store.Directory $r1;

        r0 := @parameter0: org.apache.lucene.index.IndexWriter;

        $r1 = r0.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory directory>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.apache.lucene.index.IndexWriter: int MAX_TERM_LENGTH> = 32766;

        <org.apache.lucene.index.IndexWriter: java.lang.String SOURCE_ADDINDEXES_READERS> = "addIndexes(IndexReader...)";

        <org.apache.lucene.index.IndexWriter: java.lang.String SOURCE_FLUSH> = "flush";

        <org.apache.lucene.index.IndexWriter: java.lang.String SOURCE_MERGE> = "merge";

        <org.apache.lucene.index.IndexWriter: java.lang.String SOURCE> = "source";

        <org.apache.lucene.index.IndexWriter: java.lang.String WRITE_LOCK_NAME> = "write.lock";

        <org.apache.lucene.index.IndexWriter: int UNBOUNDED_MAX_MERGE_SEGMENTS> = -1;

        $r0 = class "Lorg/apache/lucene/index/IndexWriter;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.index.IndexWriter: boolean $assertionsDisabled> = $z1;

        return;
    }
}
