public class org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer extends java.lang.Object
{
    private final org.waveprotocol.wave.client.editor.content.paragraph.ParagraphHtmlRenderer htmlRenderer;
    private final org.waveprotocol.wave.model.util.IdentityMap dirtyElements;
    boolean updateHtmlEvenWhenNullImplNodelet;
    static final boolean $assertionsDisabled;

    void <init>(org.waveprotocol.wave.client.editor.content.paragraph.ParagraphHtmlRenderer)
    {
        org.waveprotocol.wave.client.editor.content.paragraph.ParagraphHtmlRenderer r2;
        org.waveprotocol.wave.model.util.IdentityMap $r1;
        org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer;

        r2 := @parameter0: org.waveprotocol.wave.client.editor.content.paragraph.ParagraphHtmlRenderer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.IdentityMap createIdentityMap()>();

        r0.<org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer: org.waveprotocol.wave.model.util.IdentityMap dirtyElements> = $r1;

        r0.<org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer: boolean updateHtmlEvenWhenNullImplNodelet> = 0;

        r0.<org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer: org.waveprotocol.wave.client.editor.content.paragraph.ParagraphHtmlRenderer htmlRenderer> = r2;

        return;
    }

    public void markDirty(org.waveprotocol.wave.client.editor.content.ContentElement, java.lang.String)
    {
        int $i0;
        org.waveprotocol.wave.client.editor.content.ContentElement r2;
        java.lang.String r0;
        org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer r1;

        r1 := @this: org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer;

        r2 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r0 := @parameter1: java.lang.String;

        $i0 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: int getIndent(java.lang.String)>(r0);

        specialinvoke r1.<org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer: void markDirty(org.waveprotocol.wave.client.editor.content.ContentElement,int)>(r2, $i0);

        return;
    }

    private void markDirty(org.waveprotocol.wave.client.editor.content.ContentElement, int)
    {
        org.waveprotocol.wave.model.util.IdentityMap $r2, $r3, $r5;
        java.lang.AssertionError $r8;
        java.lang.Integer $r4, $r7;
        int i0, $i1;
        org.waveprotocol.wave.client.editor.content.ContentElement r1;
        java.lang.String $r12;
        boolean $z0, $z1, $z2;
        org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer r0;
        java.lang.Object $r6;
        java.lang.StringBuilder $r9, $r10, $r11;

        r0 := @this: org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        i0 := @parameter1: int;

        $z0 = <org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z2 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentElement: boolean isContentAttached()>();

        if $z2 != 0 goto label1;

        $r8 = new java.lang.AssertionError;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not attached!");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.AssertionError: void <init>(java.lang.Object)>($r12);

        throw $r8;

     label1:
        $r2 = r0.<org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer: org.waveprotocol.wave.model.util.IdentityMap dirtyElements>;

        $z1 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.IdentityMap: boolean has(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        $r5 = r0.<org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer: org.waveprotocol.wave.model.util.IdentityMap dirtyElements>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.model.util.IdentityMap: java.lang.Object get(java.lang.Object)>(r1);

        $r7 = (java.lang.Integer) $r6;

        $i1 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        if $i1 <= i0 goto label3;

     label2:
        $r3 = r0.<org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer: org.waveprotocol.wave.model.util.IdentityMap dirtyElements>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r3.<org.waveprotocol.wave.model.util.IdentityMap: void put(java.lang.Object,java.lang.Object)>(r1, $r4);

     label3:
        return;
    }

    public void markRemoved(org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.model.util.IdentityMap $r5;
        int $i0;
        org.waveprotocol.wave.client.editor.content.ContentElement r0, $r4, $r6;
        org.waveprotocol.wave.client.editor.content.paragraph.Line $r1, $r2;
        org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer r3;
        boolean $z0;

        r3 := @this: org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        $r1 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line fromParagraph(org.waveprotocol.wave.client.editor.content.ContentElement)>(r0);

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line next()>();

        if $r2 == null goto label4;

        $r4 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.ContentElement getParagraph()>();

        $r5 = r3.<org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer: org.waveprotocol.wave.model.util.IdentityMap dirtyElements>;

        $r6 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.ContentElement getParagraph()>();

        $z0 = interfaceinvoke $r5.<org.waveprotocol.wave.model.util.IdentityMap: boolean has(java.lang.Object)>($r6);

        if $z0 == 0 goto label2;

        $i0 = specialinvoke r3.<org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer: int minIndent(org.waveprotocol.wave.client.editor.content.paragraph.Line)>($r1);

        goto label3;

     label2:
        $i0 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.paragraph.Line: int getIndent()>();

     label3:
        specialinvoke r3.<org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer: void markDirty(org.waveprotocol.wave.client.editor.content.ContentElement,int)>($r4, $i0);

     label4:
        return;
    }

    public boolean renumberNeeded()
    {
        org.waveprotocol.wave.model.util.IdentityMap $r1;
        org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer r0;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer: org.waveprotocol.wave.model.util.IdentityMap dirtyElements>;

        $z0 = interfaceinvoke $r1.<org.waveprotocol.wave.model.util.IdentityMap: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public void renumberAll()
    {
        org.waveprotocol.wave.model.util.IdentityMap $r3;
        java.util.Iterator $r2;
        java.lang.AssertionError $r4;
        java.util.List $r1;
        org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer$ComparableLine r6;
        java.lang.Object $r5;
        org.waveprotocol.wave.client.editor.content.paragraph.Line r7;
        org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer: java.util.List sortedLines()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer$ComparableLine) $r5;

        r7 = r6.<org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer$ComparableLine: org.waveprotocol.wave.client.editor.content.paragraph.Line line>;

        $z3 = specialinvoke r0.<org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer: boolean isDirty(org.waveprotocol.wave.client.editor.content.paragraph.Line)>(r7);

        if $z3 == 0 goto label2;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer: void renumber(org.waveprotocol.wave.client.editor.content.paragraph.Line)>(r7);

     label2:
        goto label1;

     label3:
        $z1 = <org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer: boolean $assertionsDisabled>;

        if $z1 != 0 goto label4;

        $z2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer: boolean checkDirtyElementsContainsOnlyObsoleteLines()>();

        if $z2 != 0 goto label4;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label4:
        $r3 = r0.<org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer: org.waveprotocol.wave.model.util.IdentityMap dirtyElements>;

        interfaceinvoke $r3.<org.waveprotocol.wave.model.util.IdentityMap: void clear()>();

        return;
    }

    private void renumber(org.waveprotocol.wave.client.editor.content.paragraph.Line)
    {
        java.lang.AssertionError $r12, $r13, $r14;
        int $i0, $i1, $i2, $i3, i4, $i6, $i8;
        org.waveprotocol.wave.client.editor.content.paragraph.Line r0, r10, r11;
        org.waveprotocol.wave.client.editor.content.ContentElement $r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer r3;
        com.google.gwt.dom.client.Element $r2;
        org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer$RelativeImportance $r6, $r7, $r8;

        r3 := @this: org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.paragraph.Line;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.ContentElement getParagraph()>();

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getImplNodelet()>();

        if $r2 != null goto label1;

        $z5 = r3.<org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer: boolean updateHtmlEvenWhenNullImplNodelet>;

        if $z5 != 0 goto label1;

        specialinvoke r3.<org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer: void markClean(org.waveprotocol.wave.client.editor.content.paragraph.Line)>(r0);

        return;

     label1:
        $z0 = <org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer: boolean $assertionsDisabled>;

        if $z0 != 0 goto label3;

        $i3 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.paragraph.Line: int getCachedNumberValue()>();

        $i6 = (int) -1;

        if $i3 != $i6 goto label2;

        $z4 = specialinvoke r3.<org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer: boolean isDirty(org.waveprotocol.wave.client.editor.content.paragraph.Line)>(r0);

        if $z4 != 0 goto label3;

     label2:
        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label3:
        $i0 = specialinvoke r3.<org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer: int minIndent(org.waveprotocol.wave.client.editor.content.paragraph.Line)>(r0);

        r10 = r0;

        i4 = 1;

        r11 = r0;

     label4:
        if r11 == null goto label7;

        $z3 = virtualinvoke r11.<org.waveprotocol.wave.client.editor.content.paragraph.Line: boolean isDecimalListItem()>();

        $i1 = virtualinvoke r11.<org.waveprotocol.wave.client.editor.content.paragraph.Line: int getIndent()>();

        $r6 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer: org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer$RelativeImportance importance(int,boolean,int)>($i0, $z3, $i1);

        $r7 = <org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer$RelativeImportance: org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer$RelativeImportance MATCH>;

        if $r6 != $r7 goto label5;

        $i2 = virtualinvoke r11.<org.waveprotocol.wave.client.editor.content.paragraph.Line: int getCachedNumberValue()>();

        $i8 = (int) -1;

        if $i2 == $i8 goto label6;

        r10 = r11;

        i4 = virtualinvoke r11.<org.waveprotocol.wave.client.editor.content.paragraph.Line: int getCachedNumberValue()>();

        goto label7;

     label5:
        $r8 = <org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer$RelativeImportance: org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer$RelativeImportance SUPERIOR>;

        if $r6 != $r8 goto label6;

        goto label7;

     label6:
        r10 = r11;

        r11 = virtualinvoke r11.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line previous()>();

        goto label4;

     label7:
        $z6 = <org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer: boolean $assertionsDisabled>;

        if $z6 != 0 goto label8;

        if r10 != null goto label8;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();

        throw $r13;

     label8:
        specialinvoke r3.<org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer: void renumberRange(org.waveprotocol.wave.client.editor.content.paragraph.Line,int,int)>(r10, $i0, i4);

        $z1 = <org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer: boolean $assertionsDisabled>;

        if $z1 != 0 goto label9;

        $z2 = specialinvoke r3.<org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer: boolean isDirty(org.waveprotocol.wave.client.editor.content.paragraph.Line)>(r0);

        if $z2 == 0 goto label9;

        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();

        throw $r14;

     label9:
        return;
    }

    private void renumberRange(org.waveprotocol.wave.client.editor.content.paragraph.Line, int, int)
    {
        java.lang.AssertionError $r7, $r8;
        int $i0, i1, $i2, i3, $i4, $i5;
        org.waveprotocol.wave.client.editor.content.paragraph.Line r0, r9;
        org.waveprotocol.wave.client.editor.content.ContentElement $r6;
        boolean $z0, $z1, $z2;
        org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer r4;
        org.waveprotocol.wave.client.editor.content.paragraph.ParagraphHtmlRenderer $r5;
        org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer$LevelNumbers $r1;
        org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer$RelativeImportance $r2, $r3;

        r4 := @this: org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.paragraph.Line;

        i3 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = <org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i1 >= 1 goto label1;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label1:
        r9 = r0;

        $i0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.paragraph.Line: int getIndent()>();

        $r1 = new org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer$LevelNumbers;

        specialinvoke $r1.<org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer$LevelNumbers: void <init>(int,int)>($i0, i1);

        $z1 = <org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if i3 == $i0 goto label2;

        if i1 == 1 goto label2;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label2:
        if r9 == null goto label7;

        $i2 = virtualinvoke r9.<org.waveprotocol.wave.client.editor.content.paragraph.Line: int getIndent()>();

        $z2 = virtualinvoke r9.<org.waveprotocol.wave.client.editor.content.paragraph.Line: boolean isDecimalListItem()>();

        virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer$LevelNumbers: void setLevel(int)>($i2);

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer: org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer$RelativeImportance importance(int,boolean,int)>(i3, $z2, $i2);

        $r3 = <org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer$RelativeImportance: org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer$RelativeImportance SUPERIOR>;

        if $r2 != $r3 goto label3;

        if r9 == r0 goto label3;

        goto label7;

     label3:
        if $z2 == 0 goto label5;

        $i4 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer$LevelNumbers: int getNumberAndIncrement()>();

        $i5 = virtualinvoke r9.<org.waveprotocol.wave.client.editor.content.paragraph.Line: int getCachedNumberValue()>();

        if $i5 == $i4 goto label4;

        virtualinvoke r9.<org.waveprotocol.wave.client.editor.content.paragraph.Line: void setCachedNumberValue(int)>($i4);

        $r5 = r4.<org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer: org.waveprotocol.wave.client.editor.content.paragraph.ParagraphHtmlRenderer htmlRenderer>;

        $r6 = virtualinvoke r9.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.ContentElement getParagraph()>();

        interfaceinvoke $r5.<org.waveprotocol.wave.client.editor.content.paragraph.ParagraphHtmlRenderer: void updateListValue(org.waveprotocol.wave.client.editor.content.HasImplNodelets,int)>($r6, $i4);

     label4:
        goto label6;

     label5:
        virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer$LevelNumbers: void setNumber(int)>(1);

     label6:
        specialinvoke r4.<org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer: void markClean(org.waveprotocol.wave.client.editor.content.paragraph.Line)>(r9);

        r9 = virtualinvoke r9.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line next()>();

        goto label2;

     label7:
        return;
    }

    private java.util.List sortedLines()
    {
        org.waveprotocol.wave.model.util.IdentityMap $r2, $r5;
        int[] r1;
        org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer$1 $r4;
        java.util.ArrayList $r0;
        org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer r3;

        r3 := @this: org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        r1 = newarray (int)[1];

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.IdentityMap createIdentityMap()>();

        $r5 = r3.<org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer: org.waveprotocol.wave.model.util.IdentityMap dirtyElements>;

        $r4 = new org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer$1;

        specialinvoke $r4.<org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer$1: void <init>(org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer,org.waveprotocol.wave.model.util.IdentityMap,int[],java.util.List)>(r3, $r2, r1, $r0);

        interfaceinvoke $r5.<org.waveprotocol.wave.model.util.IdentityMap: void each(org.waveprotocol.wave.model.util.IdentityMap$ProcV)>($r4);

        staticinvoke <java.util.Collections: void sort(java.util.List)>($r0);

        return $r0;
    }

    private int minIndent(org.waveprotocol.wave.client.editor.content.paragraph.Line)
    {
        org.waveprotocol.wave.model.util.IdentityMap $r2;
        java.lang.AssertionError $r6;
        java.lang.Integer $r5;
        int $i0, $i1, $i2;
        org.waveprotocol.wave.client.editor.content.paragraph.Line r0;
        org.waveprotocol.wave.client.editor.content.ContentElement $r3;
        java.lang.Object $r4;
        boolean $z0, $z1;
        org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer r1;

        r1 := @this: org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.paragraph.Line;

        $z0 = <org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = specialinvoke r1.<org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer: boolean isDirty(org.waveprotocol.wave.client.editor.content.paragraph.Line)>(r0);

        if $z1 != 0 goto label1;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label1:
        $i0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.paragraph.Line: int getIndent()>();

        $r2 = r1.<org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer: org.waveprotocol.wave.model.util.IdentityMap dirtyElements>;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.ContentElement getParagraph()>();

        $r4 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.IdentityMap: java.lang.Object get(java.lang.Object)>($r3);

        $r5 = (java.lang.Integer) $r4;

        $i1 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        return $i2;
    }

    private boolean isDirty(org.waveprotocol.wave.client.editor.content.paragraph.Line)
    {
        org.waveprotocol.wave.model.util.IdentityMap $r2;
        org.waveprotocol.wave.client.editor.content.paragraph.Line r1;
        org.waveprotocol.wave.client.editor.content.ContentElement $r3;
        org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.paragraph.Line;

        $r2 = r0.<org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer: org.waveprotocol.wave.model.util.IdentityMap dirtyElements>;

        $r3 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.ContentElement getParagraph()>();

        $z0 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.IdentityMap: boolean has(java.lang.Object)>($r3);

        return $z0;
    }

    private void markClean(org.waveprotocol.wave.client.editor.content.paragraph.Line)
    {
        org.waveprotocol.wave.model.util.IdentityMap $r2;
        org.waveprotocol.wave.client.editor.content.paragraph.Line r1;
        org.waveprotocol.wave.client.editor.content.ContentElement $r3;
        org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.paragraph.Line;

        $r2 = r0.<org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer: org.waveprotocol.wave.model.util.IdentityMap dirtyElements>;

        $r3 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.ContentElement getParagraph()>();

        interfaceinvoke $r2.<org.waveprotocol.wave.model.util.IdentityMap: void remove(java.lang.Object)>($r3);

        return;
    }

    static org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer$RelativeImportance importance(int, boolean, int)
    {
        int i0, i1;
        org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer$RelativeImportance $r0, $r1, $r2;
        boolean z0;

        i1 := @parameter0: int;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        if i0 != i1 goto label1;

        if z0 == 0 goto label1;

        $r2 = <org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer$RelativeImportance: org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer$RelativeImportance MATCH>;

        return $r2;

     label1:
        if i0 > i1 goto label2;

        $r1 = <org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer$RelativeImportance: org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer$RelativeImportance SUPERIOR>;

        return $r1;

     label2:
        $r0 = <org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer$RelativeImportance: org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer$RelativeImportance INFERIOR>;

        return $r0;
    }

    private org.waveprotocol.wave.client.editor.content.paragraph.Line getLineIfRelevant(org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        org.waveprotocol.wave.client.editor.content.paragraph.Line $r2;
        boolean $z0;
        org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer r1;

        r1 := @this: org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: boolean isContentAttached()>();

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line fromParagraph(org.waveprotocol.wave.client.editor.content.ContentElement)>(r0);

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    boolean checkDirtyElementsContainsOnlyObsoleteLines()
    {
        org.waveprotocol.wave.model.util.IdentityMap $r2;
        org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer r0;
        org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer$2 $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer;

        $r2 = r0.<org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer: org.waveprotocol.wave.model.util.IdentityMap dirtyElements>;

        $r1 = new org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer$2;

        specialinvoke $r1.<org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer$2: void <init>(org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer)>(r0);

        interfaceinvoke $r2.<org.waveprotocol.wave.model.util.IdentityMap: void each(org.waveprotocol.wave.model.util.IdentityMap$ProcV)>($r1);

        return 1;
    }

    private boolean debugHasCorrectNumber(org.waveprotocol.wave.client.editor.content.paragraph.Line)
    {
        java.lang.AssertionError $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i10;
        org.waveprotocol.wave.client.editor.content.paragraph.Line r0, $r2;
        boolean $z0, $z1, $z2, z3, $z4;
        org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer r1;

        r1 := @this: org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.paragraph.Line;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.paragraph.Line: boolean isDecimalListItem()>();

        if $z0 != 0 goto label1;

        return 1;

     label1:
        $i0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.paragraph.Line: int getIndent()>();

        $r2 = specialinvoke r1.<org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer: org.waveprotocol.wave.client.editor.content.paragraph.Line debugNextNumberedItem(org.waveprotocol.wave.client.editor.content.paragraph.Line,boolean,int)>(r0, 0, $i0);

        if $r2 != null goto label4;

        $i3 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.paragraph.Line: int getCachedNumberValue()>();

        if $i3 != 1 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        z3 = $z2;

        goto label8;

     label4:
        $i1 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.paragraph.Line: int getCachedNumberValue()>();

        $i8 = (int) -1;

        if $i1 != $i8 goto label5;

        $z1 = <org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer: boolean $assertionsDisabled>;

        if $z1 != 0 goto label5;

        $i2 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.paragraph.Line: int getCachedNumberValue()>();

        $i10 = (int) -1;

        if $i2 != $i10 goto label5;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label5:
        $i4 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.paragraph.Line: int getCachedNumberValue()>();

        $i5 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.paragraph.Line: int getCachedNumberValue()>();

        $i6 = $i5 + 1;

        if $i4 != $i6 goto label6;

        $z4 = 1;

        goto label7;

     label6:
        $z4 = 0;

     label7:
        z3 = $z4;

     label8:
        if z3 != 0 goto label9;

        return 0;

     label9:
        return 1;
    }

    private org.waveprotocol.wave.client.editor.content.paragraph.Line debugNextNumberedItem(org.waveprotocol.wave.client.editor.content.paragraph.Line, boolean, int)
    {
        java.lang.AssertionError $r3, $r4;
        int[] $r1;
        int i0, $i1, $i2, $i3;
        org.waveprotocol.wave.client.editor.content.paragraph.Line r0, $r6, r7, $r8;
        boolean z0, $z1, $z2, $z3;
        org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer r5;
        org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer$RelativeImportance $r2;

        r5 := @this: org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.paragraph.Line;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        if z0 == 0 goto label1;

        $r6 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line next()>();

        goto label2;

     label1:
        $r6 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line previous()>();

     label2:
        r7 = $r6;

        $z1 = <org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        if $r6 != r0 goto label3;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label3:
        if r7 == null goto label9;

        $r1 = <org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer$3: int[] $SwitchMap$org$waveprotocol$wave$client$editor$content$paragraph$OrderedListRenumberer$RelativeImportance>;

        $z2 = virtualinvoke r7.<org.waveprotocol.wave.client.editor.content.paragraph.Line: boolean isDecimalListItem()>();

        $i1 = virtualinvoke r7.<org.waveprotocol.wave.client.editor.content.paragraph.Line: int getIndent()>();

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer: org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer$RelativeImportance importance(int,boolean,int)>(i0, $z2, $i1);

        $i2 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer$RelativeImportance: int ordinal()>();

        $i3 = $r1[$i2];

        tableswitch($i3)
        {
            case 1: goto label4;
            case 2: goto label5;
            case 3: goto label6;
            default: goto label6;
        };

     label4:
        return null;

     label5:
        return r7;

     label6:
        if z0 == 0 goto label7;

        $r8 = virtualinvoke r7.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line next()>();

        goto label8;

     label7:
        $r8 = virtualinvoke r7.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line previous()>();

     label8:
        r7 = $r8;

        $z3 = <org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer: boolean $assertionsDisabled>;

        if $z3 != 0 goto label3;

        if $r8 != r0 goto label3;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label9:
        return null;
    }

    static org.waveprotocol.wave.client.editor.content.paragraph.Line access$000(org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer, org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r1;
        org.waveprotocol.wave.client.editor.content.paragraph.Line $r2;
        org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer;

        r1 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentElement;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer: org.waveprotocol.wave.client.editor.content.paragraph.Line getLineIfRelevant(org.waveprotocol.wave.client.editor.content.ContentElement)>(r1);

        return $r2;
    }

    static int access$100(org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer, org.waveprotocol.wave.client.editor.content.paragraph.Line)
    {
        int $i0;
        org.waveprotocol.wave.client.editor.content.paragraph.Line r1;
        org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer;

        r1 := @parameter1: org.waveprotocol.wave.client.editor.content.paragraph.Line;

        $i0 = specialinvoke r0.<org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer: int minIndent(org.waveprotocol.wave.client.editor.content.paragraph.Line)>(r1);

        return $i0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/client/editor/content/paragraph/OrderedListRenumberer;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.client.editor.content.paragraph.OrderedListRenumberer: boolean $assertionsDisabled> = $z1;

        return;
    }
}
