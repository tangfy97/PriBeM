public class org.springframework.scripting.support.ResourceScriptSource extends java.lang.Object implements org.springframework.scripting.ScriptSource
{
    protected final org.apache.commons.logging.Log logger;
    private final org.springframework.core.io.Resource resource;
    private long lastModified;
    private final java.lang.Object lastModifiedMonitor;
    private java.lang.String encoding;

    public void <init>(org.springframework.core.io.Resource)
    {
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;
        java.lang.Object $r3;
        org.springframework.scripting.support.ResourceScriptSource r0;
        org.springframework.core.io.Resource r4;

        r0 := @this: org.springframework.scripting.support.ResourceScriptSource;

        r4 := @parameter0: org.springframework.core.io.Resource;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.springframework.scripting.support.ResourceScriptSource: org.apache.commons.logging.Log logger> = $r2;

        r0.<org.springframework.scripting.support.ResourceScriptSource: long lastModified> = -1L;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<org.springframework.scripting.support.ResourceScriptSource: java.lang.Object lastModifiedMonitor> = $r3;

        r0.<org.springframework.scripting.support.ResourceScriptSource: java.lang.String encoding> = "UTF-8";

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r4, "Resource must not be null");

        r0.<org.springframework.scripting.support.ResourceScriptSource: org.springframework.core.io.Resource resource> = r4;

        return;
    }

    public final org.springframework.core.io.Resource getResource()
    {
        org.springframework.scripting.support.ResourceScriptSource r0;
        org.springframework.core.io.Resource $r1;

        r0 := @this: org.springframework.scripting.support.ResourceScriptSource;

        $r1 = r0.<org.springframework.scripting.support.ResourceScriptSource: org.springframework.core.io.Resource resource>;

        return $r1;
    }

    public java.lang.String getScriptAsString() throws java.io.IOException
    {
        java.lang.Throwable $r7;
        long $l0;
        java.io.InputStreamReader $r8;
        java.lang.Object $r1;
        java.lang.String $r4, $r5, $r6;
        org.springframework.scripting.support.ResourceScriptSource r0;
        org.springframework.core.io.Resource $r2;
        java.io.InputStream $r3;
        boolean $z0;

        r0 := @this: org.springframework.scripting.support.ResourceScriptSource;

        $r1 = r0.<org.springframework.scripting.support.ResourceScriptSource: java.lang.Object lastModifiedMonitor>;

        entermonitor $r1;

     label1:
        $l0 = virtualinvoke r0.<org.springframework.scripting.support.ResourceScriptSource: long retrieveLastModifiedTime()>();

        r0.<org.springframework.scripting.support.ResourceScriptSource: long lastModified> = $l0;

        exitmonitor $r1;

     label2:
        goto label5;

     label3:
        $r7 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r7;

     label5:
        $r2 = r0.<org.springframework.scripting.support.ResourceScriptSource: org.springframework.core.io.Resource resource>;

        $r3 = interfaceinvoke $r2.<org.springframework.core.io.Resource: java.io.InputStream getInputStream()>();

        $r4 = r0.<org.springframework.scripting.support.ResourceScriptSource: java.lang.String encoding>;

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r4);

        if $z0 == 0 goto label6;

        $r8 = new java.io.InputStreamReader;

        $r6 = r0.<org.springframework.scripting.support.ResourceScriptSource: java.lang.String encoding>;

        specialinvoke $r8.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r3, $r6);

        goto label7;

     label6:
        $r8 = new java.io.InputStreamReader;

        specialinvoke $r8.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r3);

     label7:
        $r5 = staticinvoke <org.springframework.util.FileCopyUtils: java.lang.String copyToString(java.io.Reader)>($r8);

        return $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean isModified()
    {
        java.lang.Throwable $r2;
        long $l0, $l2, $l3;
        byte $b1, $b4;
        int $i5, $i6;
        java.lang.Object $r1;
        org.springframework.scripting.support.ResourceScriptSource r0;
        boolean $z0;

        r0 := @this: org.springframework.scripting.support.ResourceScriptSource;

        $r1 = r0.<org.springframework.scripting.support.ResourceScriptSource: java.lang.Object lastModifiedMonitor>;

        entermonitor $r1;

     label1:
        $l0 = r0.<org.springframework.scripting.support.ResourceScriptSource: long lastModified>;

        $b1 = $l0 cmp 0L;

        $i5 = (int) $b1;

        if $i5 < 0 goto label2;

        $l2 = virtualinvoke r0.<org.springframework.scripting.support.ResourceScriptSource: long retrieveLastModifiedTime()>();

        $l3 = r0.<org.springframework.scripting.support.ResourceScriptSource: long lastModified>;

        $b4 = $l2 cmp $l3;

        $i6 = (int) $b4;

        if $i6 > 0 goto label2;

        $z0 = 0;

        goto label3;

     label2:
        $z0 = 1;

     label3:
        exitmonitor $r1;

     label4:
        return $z0;

     label5:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r2;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    protected long retrieveLastModifiedTime()
    {
        long $l0;
        java.io.IOException $r2;
        org.apache.commons.logging.Log $r3, $r5;
        java.lang.StringBuilder $r4, $r7, $r8, $r9;
        java.lang.String $r10;
        org.springframework.scripting.support.ResourceScriptSource r0;
        org.springframework.core.io.Resource $r1, $r6;
        boolean $z0;

        r0 := @this: org.springframework.scripting.support.ResourceScriptSource;

     label1:
        $r1 = virtualinvoke r0.<org.springframework.scripting.support.ResourceScriptSource: org.springframework.core.io.Resource getResource()>();

        $l0 = interfaceinvoke $r1.<org.springframework.core.io.Resource: long lastModified()>();

     label2:
        return $l0;

     label3:
        $r2 := @caughtexception;

        $r3 = r0.<org.springframework.scripting.support.ResourceScriptSource: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label4;

        $r5 = r0.<org.springframework.scripting.support.ResourceScriptSource: org.apache.commons.logging.Log logger>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke r0.<org.springframework.scripting.support.ResourceScriptSource: org.springframework.core.io.Resource getResource()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" could not be resolved in the file system - ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("current timestamp not available for script modification check");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>($r10, $r2);

     label4:
        return 0L;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.lang.String suggestedClassName()
    {
        java.lang.String $r2, $r3;
        org.springframework.scripting.support.ResourceScriptSource r0;
        org.springframework.core.io.Resource $r1;

        r0 := @this: org.springframework.scripting.support.ResourceScriptSource;

        $r1 = virtualinvoke r0.<org.springframework.scripting.support.ResourceScriptSource: org.springframework.core.io.Resource getResource()>();

        $r2 = interfaceinvoke $r1.<org.springframework.core.io.Resource: java.lang.String getFilename()>();

        $r3 = staticinvoke <org.springframework.util.StringUtils: java.lang.String stripFilenameExtension(java.lang.String)>($r2);

        return $r3;
    }

    public void setEncoding(java.lang.String)
    {
        java.lang.String r1;
        org.springframework.scripting.support.ResourceScriptSource r0;

        r0 := @this: org.springframework.scripting.support.ResourceScriptSource;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.scripting.support.ResourceScriptSource: java.lang.String encoding> = r1;

        return;
    }

    public java.lang.String toString()
    {
        java.lang.String $r2;
        org.springframework.scripting.support.ResourceScriptSource r0;
        org.springframework.core.io.Resource $r1;

        r0 := @this: org.springframework.scripting.support.ResourceScriptSource;

        $r1 = r0.<org.springframework.scripting.support.ResourceScriptSource: org.springframework.core.io.Resource resource>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }
}
