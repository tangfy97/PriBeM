public class org.xmpp.packet.Roster$Item extends java.lang.Object
{
    private org.xmpp.packet.JID jid;
    private java.lang.String name;
    private org.xmpp.packet.Roster$Ask ask;
    private org.xmpp.packet.Roster$Subscription subscription;
    private java.util.Collection groups;

    private void <init>(org.xmpp.packet.JID, java.lang.String, org.xmpp.packet.Roster$Ask, org.xmpp.packet.Roster$Subscription, java.util.Collection)
    {
        org.xmpp.packet.Roster$Subscription r4;
        org.xmpp.packet.Roster$Item r0;
        org.xmpp.packet.Roster$Ask r3;
        java.util.Collection r5;
        java.lang.String r2;
        org.xmpp.packet.JID r1;

        r0 := @this: org.xmpp.packet.Roster$Item;

        r1 := @parameter0: org.xmpp.packet.JID;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.xmpp.packet.Roster$Ask;

        r4 := @parameter3: org.xmpp.packet.Roster$Subscription;

        r5 := @parameter4: java.util.Collection;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.xmpp.packet.Roster$Item: org.xmpp.packet.JID jid> = r1;

        r0.<org.xmpp.packet.Roster$Item: java.lang.String name> = r2;

        r0.<org.xmpp.packet.Roster$Item: org.xmpp.packet.Roster$Ask ask> = r3;

        r0.<org.xmpp.packet.Roster$Item: org.xmpp.packet.Roster$Subscription subscription> = r4;

        r0.<org.xmpp.packet.Roster$Item: java.util.Collection groups> = r5;

        return;
    }

    public org.xmpp.packet.JID getJID()
    {
        org.xmpp.packet.JID $r1;
        org.xmpp.packet.Roster$Item r0;

        r0 := @this: org.xmpp.packet.Roster$Item;

        $r1 = r0.<org.xmpp.packet.Roster$Item: org.xmpp.packet.JID jid>;

        return $r1;
    }

    public java.lang.String getName()
    {
        java.lang.String $r1;
        org.xmpp.packet.Roster$Item r0;

        r0 := @this: org.xmpp.packet.Roster$Item;

        $r1 = r0.<org.xmpp.packet.Roster$Item: java.lang.String name>;

        return $r1;
    }

    public org.xmpp.packet.Roster$Ask getAsk()
    {
        org.xmpp.packet.Roster$Item r0;
        org.xmpp.packet.Roster$Ask $r1;

        r0 := @this: org.xmpp.packet.Roster$Item;

        $r1 = r0.<org.xmpp.packet.Roster$Item: org.xmpp.packet.Roster$Ask ask>;

        return $r1;
    }

    public org.xmpp.packet.Roster$Subscription getSubscription()
    {
        org.xmpp.packet.Roster$Subscription $r1;
        org.xmpp.packet.Roster$Item r0;

        r0 := @this: org.xmpp.packet.Roster$Item;

        $r1 = r0.<org.xmpp.packet.Roster$Item: org.xmpp.packet.Roster$Subscription subscription>;

        return $r1;
    }

    public java.util.Collection getGroups()
    {
        java.util.List $r3;
        org.xmpp.packet.Roster$Item r0;
        java.util.Collection $r1, $r2;

        r0 := @this: org.xmpp.packet.Roster$Item;

        $r1 = r0.<org.xmpp.packet.Roster$Item: java.util.Collection groups>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r3;

     label1:
        $r2 = r0.<org.xmpp.packet.Roster$Item: java.util.Collection groups>;

        return $r2;
    }

    public java.lang.String toString()
    {
        org.xmpp.packet.JID $r3;
        org.xmpp.packet.Roster$Subscription $r7;
        org.xmpp.packet.Roster$Item r2;
        java.lang.StringBuffer $r0, $r1, $r4, $r6, $r8, $r16, $r17, $r18, $r20;
        java.lang.String $r5, $r10, r15, $r19;
        boolean $z0, $z1;
        java.util.Iterator $r13;
        java.util.Collection $r9, $r11, $r12;
        java.lang.Object $r14;

        r2 := @this: org.xmpp.packet.Roster$Item;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<item ");

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("jid=\"");

        $r3 = r2.<org.xmpp.packet.Roster$Item: org.xmpp.packet.JID jid>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r3);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r5 = r2.<org.xmpp.packet.Roster$Item: java.lang.String name>;

        if $r5 == null goto label1;

        $r18 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" name=\"");

        $r19 = r2.<org.xmpp.packet.Roster$Item: java.lang.String name>;

        $r20 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r19);

        virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

     label1:
        $r6 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" subscrption=\"");

        $r7 = r2.<org.xmpp.packet.Roster$Item: org.xmpp.packet.Roster$Subscription subscription>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r7);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r9 = r2.<org.xmpp.packet.Roster$Item: java.util.Collection groups>;

        if $r9 == null goto label2;

        $r11 = r2.<org.xmpp.packet.Roster$Item: java.util.Collection groups>;

        $z0 = interfaceinvoke $r11.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label3;

     label2:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/>");

        goto label6;

     label3:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(">\n");

        $r12 = r2.<org.xmpp.packet.Roster$Item: java.util.Collection groups>;

        $r13 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r15 = (java.lang.String) $r14;

        $r16 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  <group>");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r15);

        virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</group>\n");

        goto label4;

     label5:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</item>");

     label6:
        $r10 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r10;
    }

    void <init>(org.xmpp.packet.JID, java.lang.String, org.xmpp.packet.Roster$Ask, org.xmpp.packet.Roster$Subscription, java.util.Collection, org.xmpp.packet.Roster$1)
    {
        org.xmpp.packet.Roster$Subscription r4;
        org.xmpp.packet.Roster$Item r0;
        org.xmpp.packet.Roster$Ask r3;
        java.util.Collection r5;
        java.lang.String r2;
        org.xmpp.packet.Roster$1 r6;
        org.xmpp.packet.JID r1;

        r0 := @this: org.xmpp.packet.Roster$Item;

        r1 := @parameter0: org.xmpp.packet.JID;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.xmpp.packet.Roster$Ask;

        r4 := @parameter3: org.xmpp.packet.Roster$Subscription;

        r5 := @parameter4: java.util.Collection;

        r6 := @parameter5: org.xmpp.packet.Roster$1;

        specialinvoke r0.<org.xmpp.packet.Roster$Item: void <init>(org.xmpp.packet.JID,java.lang.String,org.xmpp.packet.Roster$Ask,org.xmpp.packet.Roster$Subscription,java.util.Collection)>(r1, r2, r3, r4, r5);

        return;
    }
}
