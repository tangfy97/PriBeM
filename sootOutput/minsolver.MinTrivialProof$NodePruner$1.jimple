class minsolver.MinTrivialProof$NodePruner$1 extends java.lang.Object implements minsolver.fol2sat.MinRecordFilter
{
    final minsolver.MinTrivialProof$NodePruner this$1;

    void <init>(minsolver.MinTrivialProof$NodePruner)
    {
        minsolver.MinTrivialProof$NodePruner$1 r0;
        minsolver.MinTrivialProof$NodePruner r1;

        r0 := @this: minsolver.MinTrivialProof$NodePruner$1;

        r1 := @parameter0: minsolver.MinTrivialProof$NodePruner;

        r0.<minsolver.MinTrivialProof$NodePruner$1: minsolver.MinTrivialProof$NodePruner this$1> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean accept(kodkod.ast.Node, kodkod.ast.Formula, int, java.util.Map)
    {
        java.util.Map r0;
        kodkod.ast.Formula r3;
        int i0;
        minsolver.MinTrivialProof$NodePruner$1 r1;
        kodkod.ast.Node r2;
        boolean $z0;

        r1 := @this: minsolver.MinTrivialProof$NodePruner$1;

        r2 := @parameter0: kodkod.ast.Node;

        r3 := @parameter1: kodkod.ast.Formula;

        i0 := @parameter2: int;

        r0 := @parameter3: java.util.Map;

        $z0 = interfaceinvoke r0.<java.util.Map: boolean isEmpty()>();

        return $z0;
    }
}
