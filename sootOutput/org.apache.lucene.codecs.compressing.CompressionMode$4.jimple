final class org.apache.lucene.codecs.compressing.CompressionMode$4 extends org.apache.lucene.codecs.compressing.Decompressor
{
    static final boolean $assertionsDisabled;

    void <init>()
    {
        org.apache.lucene.codecs.compressing.CompressionMode$4 r0;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressionMode$4;

        specialinvoke r0.<org.apache.lucene.codecs.compressing.Decompressor: void <init>()>();

        return;
    }

    public void decompress(org.apache.lucene.store.DataInput, int, int, int, org.apache.lucene.util.BytesRef) throws java.io.IOException
    {
        byte[] $r1, $r3, $r11;
        org.apache.lucene.store.DataInput r2;
        java.lang.AssertionError $r12;
        org.apache.lucene.index.CorruptIndexException $r4;
        int i0, $i1, $i2, i3, i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.String $r10;
        boolean $z0;
        org.apache.lucene.codecs.compressing.CompressionMode$4 r13;
        org.apache.lucene.util.BytesRef r0;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9;

        r13 := @this: org.apache.lucene.codecs.compressing.CompressionMode$4;

        r2 := @parameter0: org.apache.lucene.store.DataInput;

        i0 := @parameter1: int;

        i3 := @parameter2: int;

        i4 := @parameter3: int;

        r0 := @parameter4: org.apache.lucene.util.BytesRef;

        $z0 = <org.apache.lucene.codecs.compressing.CompressionMode$4: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i9 = i3 + i4;

        if $i9 <= i0 goto label1;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label1:
        $r1 = r0.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        $i2 = lengthof $r1;

        $i1 = i0 + 7;

        if $i2 >= $i1 goto label2;

        $i7 = i0 + 7;

        $i8 = staticinvoke <org.apache.lucene.util.ArrayUtil: int oversize(int,int)>($i7, 1);

        $r11 = newarray (byte)[$i8];

        r0.<org.apache.lucene.util.BytesRef: byte[] bytes> = $r11;

     label2:
        $i5 = i3 + i4;

        $r3 = r0.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        $i6 = staticinvoke <org.apache.lucene.codecs.compressing.LZ4: int decompress(org.apache.lucene.store.DataInput,int,byte[],int)>(r2, $i5, $r3, 0);

        if $i6 <= i0 goto label3;

        $r4 = new org.apache.lucene.index.CorruptIndexException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Corrupted: lengths mismatch: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" > ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.apache.lucene.index.CorruptIndexException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label3:
        r0.<org.apache.lucene.util.BytesRef: int offset> = i3;

        r0.<org.apache.lucene.util.BytesRef: int length> = i4;

        return;
    }

    public org.apache.lucene.codecs.compressing.Decompressor clone()
    {
        org.apache.lucene.codecs.compressing.CompressionMode$4 r0;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressionMode$4;

        return r0;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.lucene.codecs.compressing.Decompressor $r1;
        org.apache.lucene.codecs.compressing.CompressionMode$4 r0;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressionMode$4;

        $r1 = virtualinvoke r0.<org.apache.lucene.codecs.compressing.CompressionMode$4: org.apache.lucene.codecs.compressing.Decompressor clone()>();

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/codecs/compressing/CompressionMode;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.codecs.compressing.CompressionMode$4: boolean $assertionsDisabled> = $z1;

        return;
    }
}
