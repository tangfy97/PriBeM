public abstract class org.apache.poi.hssf.converter.AbstractExcelConverter extends java.lang.Object
{
    protected final org.apache.poi.hssf.usermodel.HSSFDataFormatter _formatter;
    private org.apache.poi.hwpf.converter.FontReplacer fontReplacer;
    private boolean outputColumnHeaders;
    private boolean outputHiddenColumns;
    private boolean outputHiddenRows;
    private boolean outputLeadingSpacesAsNonBreaking;
    private boolean outputRowNumbers;

    public void <init>()
    {
        org.apache.poi.hssf.converter.AbstractExcelConverter r0;
        org.apache.poi.hwpf.converter.DefaultFontReplacer $r2;
        org.apache.poi.hssf.usermodel.HSSFDataFormatter $r1;

        r0 := @this: org.apache.poi.hssf.converter.AbstractExcelConverter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.poi.hssf.usermodel.HSSFDataFormatter;

        specialinvoke $r1.<org.apache.poi.hssf.usermodel.HSSFDataFormatter: void <init>()>();

        r0.<org.apache.poi.hssf.converter.AbstractExcelConverter: org.apache.poi.hssf.usermodel.HSSFDataFormatter _formatter> = $r1;

        $r2 = new org.apache.poi.hwpf.converter.DefaultFontReplacer;

        specialinvoke $r2.<org.apache.poi.hwpf.converter.DefaultFontReplacer: void <init>()>();

        r0.<org.apache.poi.hssf.converter.AbstractExcelConverter: org.apache.poi.hwpf.converter.FontReplacer fontReplacer> = $r2;

        r0.<org.apache.poi.hssf.converter.AbstractExcelConverter: boolean outputColumnHeaders> = 1;

        r0.<org.apache.poi.hssf.converter.AbstractExcelConverter: boolean outputHiddenColumns> = 0;

        r0.<org.apache.poi.hssf.converter.AbstractExcelConverter: boolean outputHiddenRows> = 0;

        r0.<org.apache.poi.hssf.converter.AbstractExcelConverter: boolean outputLeadingSpacesAsNonBreaking> = 1;

        r0.<org.apache.poi.hssf.converter.AbstractExcelConverter: boolean outputRowNumbers> = 1;

        return;
    }

    protected static int getColumnWidth(org.apache.poi.hssf.usermodel.HSSFSheet, int)
    {
        org.apache.poi.hssf.usermodel.HSSFSheet r0;
        int i0, $i1, $i2;

        r0 := @parameter0: org.apache.poi.hssf.usermodel.HSSFSheet;

        i0 := @parameter1: int;

        $i1 = virtualinvoke r0.<org.apache.poi.hssf.usermodel.HSSFSheet: int getColumnWidth(int)>(i0);

        $i2 = staticinvoke <org.apache.poi.hssf.converter.ExcelToHtmlUtils: int getColumnWidthInPx(int)>($i1);

        return $i2;
    }

    protected static int getDefaultColumnWidth(org.apache.poi.hssf.usermodel.HSSFSheet)
    {
        org.apache.poi.hssf.usermodel.HSSFSheet r0;
        int $i0, $i1;

        r0 := @parameter0: org.apache.poi.hssf.usermodel.HSSFSheet;

        $i0 = virtualinvoke r0.<org.apache.poi.hssf.usermodel.HSSFSheet: int getDefaultColumnWidth()>();

        $i1 = staticinvoke <org.apache.poi.hssf.converter.ExcelToHtmlUtils: int getColumnWidthInPx(int)>($i0);

        return $i1;
    }

    protected java.lang.String getColumnName(int)
    {
        int i0, $i1;
        org.apache.poi.hssf.converter.AbstractExcelConverter r1;
        java.lang.String $r0;

        r1 := @this: org.apache.poi.hssf.converter.AbstractExcelConverter;

        i0 := @parameter0: int;

        $i1 = i0 + 1;

        $r0 = staticinvoke <org.apache.poi.hwpf.converter.NumberFormatter: java.lang.String getNumber(int,int)>($i1, 3);

        return $r0;
    }

    protected abstract org.w3c.dom.Document getDocument();

    public org.apache.poi.hwpf.converter.FontReplacer getFontReplacer()
    {
        org.apache.poi.hssf.converter.AbstractExcelConverter r0;
        org.apache.poi.hwpf.converter.FontReplacer $r1;

        r0 := @this: org.apache.poi.hssf.converter.AbstractExcelConverter;

        $r1 = r0.<org.apache.poi.hssf.converter.AbstractExcelConverter: org.apache.poi.hwpf.converter.FontReplacer fontReplacer>;

        return $r1;
    }

    protected java.lang.String getRowName(org.apache.poi.hssf.usermodel.HSSFRow)
    {
        int $i0, $i1;
        org.apache.poi.hssf.converter.AbstractExcelConverter r2;
        java.lang.String $r1;
        org.apache.poi.hssf.usermodel.HSSFRow r0;

        r2 := @this: org.apache.poi.hssf.converter.AbstractExcelConverter;

        r0 := @parameter0: org.apache.poi.hssf.usermodel.HSSFRow;

        $i0 = virtualinvoke r0.<org.apache.poi.hssf.usermodel.HSSFRow: int getRowNum()>();

        $i1 = $i0 + 1;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i1);

        return $r1;
    }

    public boolean isOutputColumnHeaders()
    {
        org.apache.poi.hssf.converter.AbstractExcelConverter r0;
        boolean $z0;

        r0 := @this: org.apache.poi.hssf.converter.AbstractExcelConverter;

        $z0 = r0.<org.apache.poi.hssf.converter.AbstractExcelConverter: boolean outputColumnHeaders>;

        return $z0;
    }

    public boolean isOutputHiddenColumns()
    {
        org.apache.poi.hssf.converter.AbstractExcelConverter r0;
        boolean $z0;

        r0 := @this: org.apache.poi.hssf.converter.AbstractExcelConverter;

        $z0 = r0.<org.apache.poi.hssf.converter.AbstractExcelConverter: boolean outputHiddenColumns>;

        return $z0;
    }

    public boolean isOutputHiddenRows()
    {
        org.apache.poi.hssf.converter.AbstractExcelConverter r0;
        boolean $z0;

        r0 := @this: org.apache.poi.hssf.converter.AbstractExcelConverter;

        $z0 = r0.<org.apache.poi.hssf.converter.AbstractExcelConverter: boolean outputHiddenRows>;

        return $z0;
    }

    public boolean isOutputLeadingSpacesAsNonBreaking()
    {
        org.apache.poi.hssf.converter.AbstractExcelConverter r0;
        boolean $z0;

        r0 := @this: org.apache.poi.hssf.converter.AbstractExcelConverter;

        $z0 = r0.<org.apache.poi.hssf.converter.AbstractExcelConverter: boolean outputLeadingSpacesAsNonBreaking>;

        return $z0;
    }

    public boolean isOutputRowNumbers()
    {
        org.apache.poi.hssf.converter.AbstractExcelConverter r0;
        boolean $z0;

        r0 := @this: org.apache.poi.hssf.converter.AbstractExcelConverter;

        $z0 = r0.<org.apache.poi.hssf.converter.AbstractExcelConverter: boolean outputRowNumbers>;

        return $z0;
    }

    protected boolean isTextEmpty(org.apache.poi.hssf.usermodel.HSSFCell)
    {
        org.apache.poi.hssf.usermodel.HSSFDataFormatter $r4, $r7;
        org.apache.poi.hssf.usermodel.HSSFCell r0;
        short $s5;
        byte $b1, $b3;
        int $i0, $i2, $i4, $i6, $i7, $i8;
        java.lang.String $r5, r8;
        boolean $z0, $z1, $z2;
        double $d0;
        org.apache.poi.hssf.usermodel.HSSFCellStyle $r2;
        org.apache.poi.hssf.usermodel.HSSFRichTextString $r1, $r6;
        org.apache.poi.hssf.converter.AbstractExcelConverter r3;

        r3 := @this: org.apache.poi.hssf.converter.AbstractExcelConverter;

        r0 := @parameter0: org.apache.poi.hssf.usermodel.HSSFCell;

        $i0 = virtualinvoke r0.<org.apache.poi.hssf.usermodel.HSSFCell: int getCellType()>();

        tableswitch($i0)
        {
            case 0: goto label13;
            case 1: goto label01;
            case 2: goto label02;
            case 3: goto label12;
            case 4: goto label14;
            case 5: goto label15;
            default: goto label16;
        };

     label01:
        $r6 = virtualinvoke r0.<org.apache.poi.hssf.usermodel.HSSFCell: org.apache.poi.hssf.usermodel.HSSFRichTextString getRichStringCellValue()>();

        r8 = virtualinvoke $r6.<org.apache.poi.hssf.usermodel.HSSFRichTextString: java.lang.String getString()>();

        goto label17;

     label02:
        $i2 = virtualinvoke r0.<org.apache.poi.hssf.usermodel.HSSFCell: int getCachedFormulaResultType()>();

        tableswitch($i2)
        {
            case 0: goto label06;
            case 1: goto label03;
            case 2: goto label10;
            case 3: goto label10;
            case 4: goto label08;
            case 5: goto label09;
            default: goto label10;
        };

     label03:
        $r1 = virtualinvoke r0.<org.apache.poi.hssf.usermodel.HSSFCell: org.apache.poi.hssf.usermodel.HSSFRichTextString getRichStringCellValue()>();

        if $r1 == null goto label04;

        $i4 = virtualinvoke $r1.<org.apache.poi.hssf.usermodel.HSSFRichTextString: int length()>();

        if $i4 > 0 goto label05;

     label04:
        return 0;

     label05:
        r8 = virtualinvoke $r1.<org.apache.poi.hssf.usermodel.HSSFRichTextString: java.lang.String toString()>();

        goto label11;

     label06:
        $r2 = virtualinvoke r0.<org.apache.poi.hssf.usermodel.HSSFCell: org.apache.poi.hssf.usermodel.HSSFCellStyle getCellStyle()>();

        if $r2 != null goto label07;

        return 0;

     label07:
        $r4 = r3.<org.apache.poi.hssf.converter.AbstractExcelConverter: org.apache.poi.hssf.usermodel.HSSFDataFormatter _formatter>;

        $d0 = virtualinvoke r0.<org.apache.poi.hssf.usermodel.HSSFCell: double getNumericCellValue()>();

        $s5 = virtualinvoke $r2.<org.apache.poi.hssf.usermodel.HSSFCellStyle: short getDataFormat()>();

        $r5 = virtualinvoke $r2.<org.apache.poi.hssf.usermodel.HSSFCellStyle: java.lang.String getDataFormatString()>();

        $i6 = (int) $s5;

        r8 = virtualinvoke $r4.<org.apache.poi.hssf.usermodel.HSSFDataFormatter: java.lang.String formatRawCellContents(double,int,java.lang.String)>($d0, $i6, $r5);

        goto label11;

     label08:
        $z1 = virtualinvoke r0.<org.apache.poi.hssf.usermodel.HSSFCell: boolean getBooleanCellValue()>();

        r8 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>($z1);

        goto label11;

     label09:
        $b3 = virtualinvoke r0.<org.apache.poi.hssf.usermodel.HSSFCell: byte getErrorCellValue()>();

        $i7 = (int) $b3;

        r8 = staticinvoke <org.apache.poi.ss.formula.eval.ErrorEval: java.lang.String getText(int)>($i7);

        goto label11;

     label10:
        r8 = "";

     label11:
        goto label17;

     label12:
        r8 = "";

        goto label17;

     label13:
        $r7 = r3.<org.apache.poi.hssf.converter.AbstractExcelConverter: org.apache.poi.hssf.usermodel.HSSFDataFormatter _formatter>;

        r8 = virtualinvoke $r7.<org.apache.poi.hssf.usermodel.HSSFDataFormatter: java.lang.String formatCellValue(org.apache.poi.ss.usermodel.Cell)>(r0);

        goto label17;

     label14:
        $z0 = virtualinvoke r0.<org.apache.poi.hssf.usermodel.HSSFCell: boolean getBooleanCellValue()>();

        r8 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>($z0);

        goto label17;

     label15:
        $b1 = virtualinvoke r0.<org.apache.poi.hssf.usermodel.HSSFCell: byte getErrorCellValue()>();

        $i8 = (int) $b1;

        r8 = staticinvoke <org.apache.poi.ss.formula.eval.ErrorEval: java.lang.String getText(int)>($i8);

        goto label17;

     label16:
        return 1;

     label17:
        $z2 = staticinvoke <org.apache.poi.hssf.converter.ExcelToHtmlUtils: boolean isEmpty(java.lang.String)>(r8);

        return $z2;
    }

    public void setFontReplacer(org.apache.poi.hwpf.converter.FontReplacer)
    {
        org.apache.poi.hssf.converter.AbstractExcelConverter r0;
        org.apache.poi.hwpf.converter.FontReplacer r1;

        r0 := @this: org.apache.poi.hssf.converter.AbstractExcelConverter;

        r1 := @parameter0: org.apache.poi.hwpf.converter.FontReplacer;

        r0.<org.apache.poi.hssf.converter.AbstractExcelConverter: org.apache.poi.hwpf.converter.FontReplacer fontReplacer> = r1;

        return;
    }

    public void setOutputColumnHeaders(boolean)
    {
        org.apache.poi.hssf.converter.AbstractExcelConverter r0;
        boolean z0;

        r0 := @this: org.apache.poi.hssf.converter.AbstractExcelConverter;

        z0 := @parameter0: boolean;

        r0.<org.apache.poi.hssf.converter.AbstractExcelConverter: boolean outputColumnHeaders> = z0;

        return;
    }

    public void setOutputHiddenColumns(boolean)
    {
        org.apache.poi.hssf.converter.AbstractExcelConverter r0;
        boolean z0;

        r0 := @this: org.apache.poi.hssf.converter.AbstractExcelConverter;

        z0 := @parameter0: boolean;

        r0.<org.apache.poi.hssf.converter.AbstractExcelConverter: boolean outputHiddenColumns> = z0;

        return;
    }

    public void setOutputHiddenRows(boolean)
    {
        org.apache.poi.hssf.converter.AbstractExcelConverter r0;
        boolean z0;

        r0 := @this: org.apache.poi.hssf.converter.AbstractExcelConverter;

        z0 := @parameter0: boolean;

        r0.<org.apache.poi.hssf.converter.AbstractExcelConverter: boolean outputHiddenRows> = z0;

        return;
    }

    public void setOutputLeadingSpacesAsNonBreaking(boolean)
    {
        org.apache.poi.hssf.converter.AbstractExcelConverter r0;
        boolean z0;

        r0 := @this: org.apache.poi.hssf.converter.AbstractExcelConverter;

        z0 := @parameter0: boolean;

        r0.<org.apache.poi.hssf.converter.AbstractExcelConverter: boolean outputLeadingSpacesAsNonBreaking> = z0;

        return;
    }

    public void setOutputRowNumbers(boolean)
    {
        org.apache.poi.hssf.converter.AbstractExcelConverter r0;
        boolean z0;

        r0 := @this: org.apache.poi.hssf.converter.AbstractExcelConverter;

        z0 := @parameter0: boolean;

        r0.<org.apache.poi.hssf.converter.AbstractExcelConverter: boolean outputRowNumbers> = z0;

        return;
    }
}
