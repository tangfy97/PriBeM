class org.mozilla.javascript.Interpreter$CallFrame extends java.lang.Object implements java.lang.Cloneable, java.io.Serializable
{
    static final long serialVersionUID;
    org.mozilla.javascript.Interpreter$CallFrame parentFrame;
    int frameIndex;
    boolean frozen;
    org.mozilla.javascript.InterpretedFunction fnOrScript;
    org.mozilla.javascript.InterpreterData idata;
    java.lang.Object[] stack;
    double[] sDbl;
    org.mozilla.javascript.Interpreter$CallFrame varSource;
    int localShift;
    int emptyStackTop;
    org.mozilla.javascript.debug.DebugFrame debuggerFrame;
    boolean useActivation;
    org.mozilla.javascript.Scriptable thisObj;
    org.mozilla.javascript.Scriptable[] scriptRegExps;
    java.lang.Object result;
    double resultDbl;
    int pc;
    int pcPrevBranch;
    int pcSourceLineStart;
    org.mozilla.javascript.Scriptable scope;
    int savedStackTop;
    int savedCallOp;

    private void <init>()
    {
        org.mozilla.javascript.Interpreter$CallFrame r0;

        r0 := @this: org.mozilla.javascript.Interpreter$CallFrame;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    org.mozilla.javascript.Interpreter$CallFrame cloneFrozen()
    {
        org.mozilla.javascript.Interpreter$CallFrame r0, $r8;
        java.lang.IllegalStateException $r10;
        java.lang.Object[] $r2, $r4;
        double[] $r5, $r7;
        java.lang.CloneNotSupportedException $r9;
        java.lang.Object $r1, $r3, $r6;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.Interpreter$CallFrame;

        $z0 = r0.<org.mozilla.javascript.Interpreter$CallFrame: boolean frozen>;

        if $z0 != 0 goto label1;

        staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

     label1:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        $r8 = (org.mozilla.javascript.Interpreter$CallFrame) $r1;

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>()>();

        throw $r10;

     label4:
        $r2 = r0.<org.mozilla.javascript.Interpreter$CallFrame: java.lang.Object[] stack>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (java.lang.Object[]) $r3;

        $r8.<org.mozilla.javascript.Interpreter$CallFrame: java.lang.Object[] stack> = $r4;

        $r5 = r0.<org.mozilla.javascript.Interpreter$CallFrame: double[] sDbl>;

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.Object clone()>();

        $r7 = (double[]) $r6;

        $r8.<org.mozilla.javascript.Interpreter$CallFrame: double[] sDbl> = $r7;

        $r8.<org.mozilla.javascript.Interpreter$CallFrame: boolean frozen> = 0;

        return $r8;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    void <init>(org.mozilla.javascript.Interpreter$1)
    {
        org.mozilla.javascript.Interpreter$CallFrame r0;
        org.mozilla.javascript.Interpreter$1 r1;

        r0 := @this: org.mozilla.javascript.Interpreter$CallFrame;

        r1 := @parameter0: org.mozilla.javascript.Interpreter$1;

        specialinvoke r0.<org.mozilla.javascript.Interpreter$CallFrame: void <init>()>();

        return;
    }

    public static void <clinit>()
    {
        <org.mozilla.javascript.Interpreter$CallFrame: long serialVersionUID> = -2843792508994958978L;

        return;
    }
}
