public class org.codehaus.groovy.runtime.typehandling.IntegerMath extends org.codehaus.groovy.runtime.typehandling.NumberMath
{
    public static final org.codehaus.groovy.runtime.typehandling.IntegerMath INSTANCE;

    private void <init>()
    {
        org.codehaus.groovy.runtime.typehandling.IntegerMath r0;

        r0 := @this: org.codehaus.groovy.runtime.typehandling.IntegerMath;

        specialinvoke r0.<org.codehaus.groovy.runtime.typehandling.NumberMath: void <init>()>();

        return;
    }

    protected java.lang.Number absImpl(java.lang.Number)
    {
        org.codehaus.groovy.runtime.typehandling.IntegerMath r2;
        int $i0, $i1;
        java.lang.Number r1;
        java.lang.Integer $r0;

        r2 := @this: org.codehaus.groovy.runtime.typehandling.IntegerMath;

        r1 := @parameter0: java.lang.Number;

        $r0 = new java.lang.Integer;

        $i0 = virtualinvoke r1.<java.lang.Number: int intValue()>();

        $i1 = staticinvoke <java.lang.Math: int abs(int)>($i0);

        specialinvoke $r0.<java.lang.Integer: void <init>(int)>($i1);

        return $r0;
    }

    protected java.lang.Number addImpl(java.lang.Number, java.lang.Number)
    {
        org.codehaus.groovy.runtime.typehandling.IntegerMath r3;
        int $i0, $i1, $i2;
        java.lang.Number r1, r2;
        java.lang.Integer $r0;

        r3 := @this: org.codehaus.groovy.runtime.typehandling.IntegerMath;

        r1 := @parameter0: java.lang.Number;

        r2 := @parameter1: java.lang.Number;

        $r0 = new java.lang.Integer;

        $i0 = virtualinvoke r1.<java.lang.Number: int intValue()>();

        $i1 = virtualinvoke r2.<java.lang.Number: int intValue()>();

        $i2 = $i0 + $i1;

        specialinvoke $r0.<java.lang.Integer: void <init>(int)>($i2);

        return $r0;
    }

    protected java.lang.Number subtractImpl(java.lang.Number, java.lang.Number)
    {
        org.codehaus.groovy.runtime.typehandling.IntegerMath r3;
        int $i0, $i1, $i2;
        java.lang.Number r1, r2;
        java.lang.Integer $r0;

        r3 := @this: org.codehaus.groovy.runtime.typehandling.IntegerMath;

        r1 := @parameter0: java.lang.Number;

        r2 := @parameter1: java.lang.Number;

        $r0 = new java.lang.Integer;

        $i0 = virtualinvoke r1.<java.lang.Number: int intValue()>();

        $i1 = virtualinvoke r2.<java.lang.Number: int intValue()>();

        $i2 = $i0 - $i1;

        specialinvoke $r0.<java.lang.Integer: void <init>(int)>($i2);

        return $r0;
    }

    protected java.lang.Number multiplyImpl(java.lang.Number, java.lang.Number)
    {
        org.codehaus.groovy.runtime.typehandling.IntegerMath r3;
        int $i0, $i1, $i2;
        java.lang.Number r1, r2;
        java.lang.Integer $r0;

        r3 := @this: org.codehaus.groovy.runtime.typehandling.IntegerMath;

        r1 := @parameter0: java.lang.Number;

        r2 := @parameter1: java.lang.Number;

        $r0 = new java.lang.Integer;

        $i0 = virtualinvoke r1.<java.lang.Number: int intValue()>();

        $i1 = virtualinvoke r2.<java.lang.Number: int intValue()>();

        $i2 = $i0 * $i1;

        specialinvoke $r0.<java.lang.Integer: void <init>(int)>($i2);

        return $r0;
    }

    protected java.lang.Number divideImpl(java.lang.Number, java.lang.Number)
    {
        org.codehaus.groovy.runtime.typehandling.IntegerMath r4;
        java.lang.Number r0, r1, $r3;
        org.codehaus.groovy.runtime.typehandling.BigDecimalMath $r2;

        r4 := @this: org.codehaus.groovy.runtime.typehandling.IntegerMath;

        r0 := @parameter0: java.lang.Number;

        r1 := @parameter1: java.lang.Number;

        $r2 = <org.codehaus.groovy.runtime.typehandling.BigDecimalMath: org.codehaus.groovy.runtime.typehandling.BigDecimalMath INSTANCE>;

        $r3 = virtualinvoke $r2.<org.codehaus.groovy.runtime.typehandling.BigDecimalMath: java.lang.Number divideImpl(java.lang.Number,java.lang.Number)>(r0, r1);

        return $r3;
    }

    protected int compareToImpl(java.lang.Number, java.lang.Number)
    {
        byte $b2;
        org.codehaus.groovy.runtime.typehandling.IntegerMath r2;
        int $i0, $i1;
        java.lang.Number r0, r1;

        r2 := @this: org.codehaus.groovy.runtime.typehandling.IntegerMath;

        r0 := @parameter0: java.lang.Number;

        r1 := @parameter1: java.lang.Number;

        $i0 = virtualinvoke r0.<java.lang.Number: int intValue()>();

        $i1 = virtualinvoke r1.<java.lang.Number: int intValue()>();

        if $i0 >= $i1 goto label1;

        $b2 = -1;

        goto label3;

     label1:
        if $i0 != $i1 goto label2;

        $b2 = 0;

        goto label3;

     label2:
        $b2 = 1;

     label3:
        return $b2;
    }

    protected java.lang.Number orImpl(java.lang.Number, java.lang.Number)
    {
        org.codehaus.groovy.runtime.typehandling.IntegerMath r3;
        int $i0, $i1, $i2;
        java.lang.Number r1, r2;
        java.lang.Integer $r0;

        r3 := @this: org.codehaus.groovy.runtime.typehandling.IntegerMath;

        r1 := @parameter0: java.lang.Number;

        r2 := @parameter1: java.lang.Number;

        $r0 = new java.lang.Integer;

        $i0 = virtualinvoke r1.<java.lang.Number: int intValue()>();

        $i1 = virtualinvoke r2.<java.lang.Number: int intValue()>();

        $i2 = $i0 | $i1;

        specialinvoke $r0.<java.lang.Integer: void <init>(int)>($i2);

        return $r0;
    }

    protected java.lang.Number andImpl(java.lang.Number, java.lang.Number)
    {
        org.codehaus.groovy.runtime.typehandling.IntegerMath r3;
        int $i0, $i1, $i2;
        java.lang.Number r1, r2;
        java.lang.Integer $r0;

        r3 := @this: org.codehaus.groovy.runtime.typehandling.IntegerMath;

        r1 := @parameter0: java.lang.Number;

        r2 := @parameter1: java.lang.Number;

        $r0 = new java.lang.Integer;

        $i0 = virtualinvoke r1.<java.lang.Number: int intValue()>();

        $i1 = virtualinvoke r2.<java.lang.Number: int intValue()>();

        $i2 = $i0 & $i1;

        specialinvoke $r0.<java.lang.Integer: void <init>(int)>($i2);

        return $r0;
    }

    protected java.lang.Number xorImpl(java.lang.Number, java.lang.Number)
    {
        org.codehaus.groovy.runtime.typehandling.IntegerMath r3;
        int $i0, $i1, $i2;
        java.lang.Number r1, r2;
        java.lang.Integer $r0;

        r3 := @this: org.codehaus.groovy.runtime.typehandling.IntegerMath;

        r1 := @parameter0: java.lang.Number;

        r2 := @parameter1: java.lang.Number;

        $r0 = new java.lang.Integer;

        $i0 = virtualinvoke r1.<java.lang.Number: int intValue()>();

        $i1 = virtualinvoke r2.<java.lang.Number: int intValue()>();

        $i2 = $i0 ^ $i1;

        specialinvoke $r0.<java.lang.Integer: void <init>(int)>($i2);

        return $r0;
    }

    protected java.lang.Number intdivImpl(java.lang.Number, java.lang.Number)
    {
        org.codehaus.groovy.runtime.typehandling.IntegerMath r3;
        int $i0, $i1, $i2;
        java.lang.Number r1, r2;
        java.lang.Integer $r0;

        r3 := @this: org.codehaus.groovy.runtime.typehandling.IntegerMath;

        r1 := @parameter0: java.lang.Number;

        r2 := @parameter1: java.lang.Number;

        $r0 = new java.lang.Integer;

        $i0 = virtualinvoke r1.<java.lang.Number: int intValue()>();

        $i1 = virtualinvoke r2.<java.lang.Number: int intValue()>();

        $i2 = $i0 / $i1;

        specialinvoke $r0.<java.lang.Integer: void <init>(int)>($i2);

        return $r0;
    }

    protected java.lang.Number modImpl(java.lang.Number, java.lang.Number)
    {
        org.codehaus.groovy.runtime.typehandling.IntegerMath r3;
        int $i0, $i1, $i2;
        java.lang.Number r1, r2;
        java.lang.Integer $r0;

        r3 := @this: org.codehaus.groovy.runtime.typehandling.IntegerMath;

        r1 := @parameter0: java.lang.Number;

        r2 := @parameter1: java.lang.Number;

        $r0 = new java.lang.Integer;

        $i0 = virtualinvoke r1.<java.lang.Number: int intValue()>();

        $i1 = virtualinvoke r2.<java.lang.Number: int intValue()>();

        $i2 = $i0 % $i1;

        specialinvoke $r0.<java.lang.Integer: void <init>(int)>($i2);

        return $r0;
    }

    protected java.lang.Number unaryMinusImpl(java.lang.Number)
    {
        org.codehaus.groovy.runtime.typehandling.IntegerMath r2;
        int $i0, $i1;
        java.lang.Number r1;
        java.lang.Integer $r0;

        r2 := @this: org.codehaus.groovy.runtime.typehandling.IntegerMath;

        r1 := @parameter0: java.lang.Number;

        $r0 = new java.lang.Integer;

        $i0 = virtualinvoke r1.<java.lang.Number: int intValue()>();

        $i1 = neg $i0;

        specialinvoke $r0.<java.lang.Integer: void <init>(int)>($i1);

        return $r0;
    }

    protected java.lang.Number bitwiseNegateImpl(java.lang.Number)
    {
        org.codehaus.groovy.runtime.typehandling.IntegerMath r2;
        int $i0, $i1, $i3;
        java.lang.Number r1;
        java.lang.Integer $r3;

        r2 := @this: org.codehaus.groovy.runtime.typehandling.IntegerMath;

        r1 := @parameter0: java.lang.Number;

        $r3 = new java.lang.Integer;

        $i0 = virtualinvoke r1.<java.lang.Number: int intValue()>();

        $i3 = (int) -1;

        $i1 = $i0 ^ $i3;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>($i1);

        return $r3;
    }

    protected java.lang.Number leftShiftImpl(java.lang.Number, java.lang.Number)
    {
        org.codehaus.groovy.runtime.typehandling.IntegerMath r3;
        int $i0, $i1, $i2;
        java.lang.Number r1, r2;
        java.lang.Integer $r0;

        r3 := @this: org.codehaus.groovy.runtime.typehandling.IntegerMath;

        r1 := @parameter0: java.lang.Number;

        r2 := @parameter1: java.lang.Number;

        $r0 = new java.lang.Integer;

        $i0 = virtualinvoke r1.<java.lang.Number: int intValue()>();

        $i1 = virtualinvoke r2.<java.lang.Number: int intValue()>();

        $i2 = $i0 << $i1;

        specialinvoke $r0.<java.lang.Integer: void <init>(int)>($i2);

        return $r0;
    }

    protected java.lang.Number rightShiftImpl(java.lang.Number, java.lang.Number)
    {
        org.codehaus.groovy.runtime.typehandling.IntegerMath r3;
        int $i0, $i1, $i2;
        java.lang.Number r1, r2;
        java.lang.Integer $r0;

        r3 := @this: org.codehaus.groovy.runtime.typehandling.IntegerMath;

        r1 := @parameter0: java.lang.Number;

        r2 := @parameter1: java.lang.Number;

        $r0 = new java.lang.Integer;

        $i0 = virtualinvoke r1.<java.lang.Number: int intValue()>();

        $i1 = virtualinvoke r2.<java.lang.Number: int intValue()>();

        $i2 = $i0 >> $i1;

        specialinvoke $r0.<java.lang.Integer: void <init>(int)>($i2);

        return $r0;
    }

    protected java.lang.Number rightShiftUnsignedImpl(java.lang.Number, java.lang.Number)
    {
        org.codehaus.groovy.runtime.typehandling.IntegerMath r3;
        int $i0, $i1, $i2;
        java.lang.Number r1, r2;
        java.lang.Integer $r0;

        r3 := @this: org.codehaus.groovy.runtime.typehandling.IntegerMath;

        r1 := @parameter0: java.lang.Number;

        r2 := @parameter1: java.lang.Number;

        $r0 = new java.lang.Integer;

        $i0 = virtualinvoke r1.<java.lang.Number: int intValue()>();

        $i1 = virtualinvoke r2.<java.lang.Number: int intValue()>();

        $i2 = $i0 >>> $i1;

        specialinvoke $r0.<java.lang.Integer: void <init>(int)>($i2);

        return $r0;
    }

    static void <clinit>()
    {
        org.codehaus.groovy.runtime.typehandling.IntegerMath $r0;

        $r0 = new org.codehaus.groovy.runtime.typehandling.IntegerMath;

        specialinvoke $r0.<org.codehaus.groovy.runtime.typehandling.IntegerMath: void <init>()>();

        <org.codehaus.groovy.runtime.typehandling.IntegerMath: org.codehaus.groovy.runtime.typehandling.IntegerMath INSTANCE> = $r0;

        return;
    }
}
