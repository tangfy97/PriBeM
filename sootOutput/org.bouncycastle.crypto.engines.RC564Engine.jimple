public class org.bouncycastle.crypto.engines.RC564Engine extends java.lang.Object implements org.bouncycastle.crypto.BlockCipher
{
    private static final int wordSize;
    private static final int bytesPerWord;
    private int _noRounds;
    private long[] _S;
    private static final long P64;
    private static final long Q64;
    private boolean forEncryption;

    public void <init>()
    {
        org.bouncycastle.crypto.engines.RC564Engine r0;

        r0 := @this: org.bouncycastle.crypto.engines.RC564Engine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.bouncycastle.crypto.engines.RC564Engine: int _noRounds> = 12;

        r0.<org.bouncycastle.crypto.engines.RC564Engine: long[] _S> = null;

        return;
    }

    public java.lang.String getAlgorithmName()
    {
        org.bouncycastle.crypto.engines.RC564Engine r0;

        r0 := @this: org.bouncycastle.crypto.engines.RC564Engine;

        return "RC5-64";
    }

    public int getBlockSize()
    {
        org.bouncycastle.crypto.engines.RC564Engine r0;

        r0 := @this: org.bouncycastle.crypto.engines.RC564Engine;

        return 16;
    }

    public void init(boolean, org.bouncycastle.crypto.CipherParameters)
    {
        byte[] $r3;
        org.bouncycastle.crypto.params.RC5Parameters r1;
        java.lang.IllegalArgumentException $r4;
        int $i0;
        org.bouncycastle.crypto.engines.RC564Engine r2;
        java.lang.StringBuilder $r5, $r6, $r9;
        java.lang.Class $r7;
        java.lang.String $r8, $r10;
        org.bouncycastle.crypto.CipherParameters r0;
        boolean $z0, z1;

        r2 := @this: org.bouncycastle.crypto.engines.RC564Engine;

        z1 := @parameter0: boolean;

        r0 := @parameter1: org.bouncycastle.crypto.CipherParameters;

        $z0 = r0 instanceof org.bouncycastle.crypto.params.RC5Parameters;

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid parameter passed to RC564 init - ");

        $r7 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label1:
        r1 = (org.bouncycastle.crypto.params.RC5Parameters) r0;

        r2.<org.bouncycastle.crypto.engines.RC564Engine: boolean forEncryption> = z1;

        $i0 = virtualinvoke r1.<org.bouncycastle.crypto.params.RC5Parameters: int getRounds()>();

        r2.<org.bouncycastle.crypto.engines.RC564Engine: int _noRounds> = $i0;

        $r3 = virtualinvoke r1.<org.bouncycastle.crypto.params.RC5Parameters: byte[] getKey()>();

        specialinvoke r2.<org.bouncycastle.crypto.engines.RC564Engine: void setKey(byte[])>($r3);

        return;
    }

    public int processBlock(byte[], int, byte[], int)
    {
        byte[] r1, r2;
        int i0, i1, $i2;
        org.bouncycastle.crypto.engines.RC564Engine r0;
        boolean $z0;

        r0 := @this: org.bouncycastle.crypto.engines.RC564Engine;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        r2 := @parameter2: byte[];

        i1 := @parameter3: int;

        $z0 = r0.<org.bouncycastle.crypto.engines.RC564Engine: boolean forEncryption>;

        if $z0 == 0 goto label1;

        $i2 = specialinvoke r0.<org.bouncycastle.crypto.engines.RC564Engine: int encryptBlock(byte[],int,byte[],int)>(r1, i0, r2, i1);

        goto label2;

     label1:
        $i2 = specialinvoke r0.<org.bouncycastle.crypto.engines.RC564Engine: int decryptBlock(byte[],int,byte[],int)>(r1, i0, r2, i1);

     label2:
        return $i2;
    }

    public void reset()
    {
        org.bouncycastle.crypto.engines.RC564Engine r0;

        r0 := @this: org.bouncycastle.crypto.engines.RC564Engine;

        return;
    }

    private void setKey(byte[])
    {
        byte[] r0;
        byte $b29;
        long $l11, $l12, $l13, $l14, $l15, $l16, $l17, $l18, $l19, $l26, $l27, $l33, $l34, $l35, $l36, l40, l41;
        short $s30, $s45;
        long[] r1, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i20, $i21, $i22, $i23, $i24, $i25, $i28, $i31, $i32, i37, i38, i39, i42, i43, i44;
        org.bouncycastle.crypto.engines.RC564Engine r2;

        r2 := @this: org.bouncycastle.crypto.engines.RC564Engine;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        $i1 = $i0 + 7;

        $i2 = $i1 / 8;

        r1 = newarray (long)[$i2];

        i37 = 0;

     label1:
        $i3 = lengthof r0;

        if i37 == $i3 goto label2;

        $i28 = i37 / 8;

        $l35 = r1[$i28];

        $b29 = r0[i37];

        $s45 = (short) $b29;

        $s30 = $s45 & 255;

        $l33 = (long) $s30;

        $i31 = i37 % 8;

        $i32 = 8 * $i31;

        $l34 = $l33 << $i32;

        $l36 = $l35 + $l34;

        r1[$i28] = $l36;

        i37 = i37 + 1;

        goto label1;

     label2:
        $i4 = r2.<org.bouncycastle.crypto.engines.RC564Engine: int _noRounds>;

        $i5 = $i4 + 1;

        $i6 = 2 * $i5;

        $r3 = newarray (long)[$i6];

        r2.<org.bouncycastle.crypto.engines.RC564Engine: long[] _S> = $r3;

        $r4 = r2.<org.bouncycastle.crypto.engines.RC564Engine: long[] _S>;

        $r4[0] = -5196783011329398165L;

        i38 = 1;

     label3:
        $r5 = r2.<org.bouncycastle.crypto.engines.RC564Engine: long[] _S>;

        $i7 = lengthof $r5;

        if i38 >= $i7 goto label4;

        $r12 = r2.<org.bouncycastle.crypto.engines.RC564Engine: long[] _S>;

        $r11 = r2.<org.bouncycastle.crypto.engines.RC564Engine: long[] _S>;

        $i25 = i38 - 1;

        $l26 = $r11[$i25];

        $l27 = $l26 + -7046029254386353131L;

        $r12[i38] = $l27;

        i38 = i38 + 1;

        goto label3;

     label4:
        $i9 = lengthof r1;

        $r6 = r2.<org.bouncycastle.crypto.engines.RC564Engine: long[] _S>;

        $i8 = lengthof $r6;

        if $i9 <= $i8 goto label5;

        $i24 = lengthof r1;

        i39 = 3 * $i24;

        goto label6;

     label5:
        $r7 = r2.<org.bouncycastle.crypto.engines.RC564Engine: long[] _S>;

        $i10 = lengthof $r7;

        i39 = 3 * $i10;

     label6:
        l40 = 0L;

        l41 = 0L;

        i42 = 0;

        i43 = 0;

        i44 = 0;

     label7:
        if i44 >= i39 goto label8;

        $r9 = r2.<org.bouncycastle.crypto.engines.RC564Engine: long[] _S>;

        $r8 = r2.<org.bouncycastle.crypto.engines.RC564Engine: long[] _S>;

        $l11 = $r8[i42];

        $l12 = $l11 + l40;

        $l13 = $l12 + l41;

        $l14 = specialinvoke r2.<org.bouncycastle.crypto.engines.RC564Engine: long rotateLeft(long,long)>($l13, 3L);

        $r9[i42] = $l14;

        l40 = $l14;

        $l15 = r1[i43];

        $l16 = $l15 + $l14;

        $l18 = $l16 + l41;

        $l17 = $l14 + l41;

        $l19 = specialinvoke r2.<org.bouncycastle.crypto.engines.RC564Engine: long rotateLeft(long,long)>($l18, $l17);

        r1[i43] = $l19;

        l41 = $l19;

        $i21 = i42 + 1;

        $r10 = r2.<org.bouncycastle.crypto.engines.RC564Engine: long[] _S>;

        $i20 = lengthof $r10;

        i42 = $i21 % $i20;

        $i23 = i43 + 1;

        $i22 = lengthof r1;

        i43 = $i23 % $i22;

        i44 = i44 + 1;

        goto label7;

     label8:
        return;
    }

    private int encryptBlock(byte[], int, byte[], int)
    {
        byte[] r1, r4;
        long $l1, $l2, $l4, $l5, $l9, $l10, $l12, $l13, $l14, $l17, l18, l19;
        long[] $r2, $r3, $r5, $r6;
        int i0, $i3, $i6, i7, $i8, $i11, $i15, $i16, i20;
        org.bouncycastle.crypto.engines.RC564Engine r0;

        r0 := @this: org.bouncycastle.crypto.engines.RC564Engine;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        r4 := @parameter2: byte[];

        i7 := @parameter3: int;

        $l1 = specialinvoke r0.<org.bouncycastle.crypto.engines.RC564Engine: long bytesToWord(byte[],int)>(r1, i0);

        $r2 = r0.<org.bouncycastle.crypto.engines.RC564Engine: long[] _S>;

        $l2 = $r2[0];

        l18 = $l1 + $l2;

        $i3 = i0 + 8;

        $l4 = specialinvoke r0.<org.bouncycastle.crypto.engines.RC564Engine: long bytesToWord(byte[],int)>(r1, $i3);

        $r3 = r0.<org.bouncycastle.crypto.engines.RC564Engine: long[] _S>;

        $l5 = $r3[1];

        l19 = $l4 + $l5;

        i20 = 1;

     label1:
        $i6 = r0.<org.bouncycastle.crypto.engines.RC564Engine: int _noRounds>;

        if i20 > $i6 goto label2;

        $l9 = l18 ^ l19;

        $l10 = specialinvoke r0.<org.bouncycastle.crypto.engines.RC564Engine: long rotateLeft(long,long)>($l9, l19);

        $r5 = r0.<org.bouncycastle.crypto.engines.RC564Engine: long[] _S>;

        $i11 = 2 * i20;

        $l12 = $r5[$i11];

        l18 = $l10 + $l12;

        $l13 = l19 ^ l18;

        $l14 = specialinvoke r0.<org.bouncycastle.crypto.engines.RC564Engine: long rotateLeft(long,long)>($l13, l18);

        $r6 = r0.<org.bouncycastle.crypto.engines.RC564Engine: long[] _S>;

        $i15 = 2 * i20;

        $i16 = $i15 + 1;

        $l17 = $r6[$i16];

        l19 = $l14 + $l17;

        i20 = i20 + 1;

        goto label1;

     label2:
        specialinvoke r0.<org.bouncycastle.crypto.engines.RC564Engine: void wordToBytes(long,byte[],int)>(l18, r4, i7);

        $i8 = i7 + 8;

        specialinvoke r0.<org.bouncycastle.crypto.engines.RC564Engine: void wordToBytes(long,byte[],int)>(l19, r4, $i8);

        return 16;
    }

    private int decryptBlock(byte[], int, byte[], int)
    {
        byte[] r1, r3;
        long $l2, $l4, $l5, $l7, $l10, $l11, $l12, $l14, $l15, $l16, l17, l18;
        long[] $r2, $r4, $r5, $r6;
        int i0, $i1, i3, $i6, $i8, $i9, $i13, i19, $i21;
        org.bouncycastle.crypto.engines.RC564Engine r0;

        r0 := @this: org.bouncycastle.crypto.engines.RC564Engine;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        r3 := @parameter2: byte[];

        i3 := @parameter3: int;

        l17 = specialinvoke r0.<org.bouncycastle.crypto.engines.RC564Engine: long bytesToWord(byte[],int)>(r1, i0);

        $i1 = i0 + 8;

        l18 = specialinvoke r0.<org.bouncycastle.crypto.engines.RC564Engine: long bytesToWord(byte[],int)>(r1, $i1);

        i19 = r0.<org.bouncycastle.crypto.engines.RC564Engine: int _noRounds>;

     label1:
        if i19 < 1 goto label2;

        $r5 = r0.<org.bouncycastle.crypto.engines.RC564Engine: long[] _S>;

        $i8 = 2 * i19;

        $i9 = $i8 + 1;

        $l10 = $r5[$i9];

        $l11 = l18 - $l10;

        $l12 = specialinvoke r0.<org.bouncycastle.crypto.engines.RC564Engine: long rotateRight(long,long)>($l11, l17);

        l18 = $l12 ^ l17;

        $r6 = r0.<org.bouncycastle.crypto.engines.RC564Engine: long[] _S>;

        $i13 = 2 * i19;

        $l14 = $r6[$i13];

        $l15 = l17 - $l14;

        $l16 = specialinvoke r0.<org.bouncycastle.crypto.engines.RC564Engine: long rotateRight(long,long)>($l15, l18);

        l17 = $l16 ^ l18;

        $i21 = (int) -1;

        i19 = i19 + $i21;

        goto label1;

     label2:
        $r2 = r0.<org.bouncycastle.crypto.engines.RC564Engine: long[] _S>;

        $l2 = $r2[0];

        $l4 = l17 - $l2;

        specialinvoke r0.<org.bouncycastle.crypto.engines.RC564Engine: void wordToBytes(long,byte[],int)>($l4, r3, i3);

        $r4 = r0.<org.bouncycastle.crypto.engines.RC564Engine: long[] _S>;

        $l5 = $r4[1];

        $l7 = l18 - $l5;

        $i6 = i3 + 8;

        specialinvoke r0.<org.bouncycastle.crypto.engines.RC564Engine: void wordToBytes(long,byte[],int)>($l7, r3, $i6);

        return 16;
    }

    private long rotateLeft(long, long)
    {
        long l0, l1, $l2, $l4, $l5, $l7, $l8, $l9;
        int $i3, $i6;
        org.bouncycastle.crypto.engines.RC564Engine r0;

        r0 := @this: org.bouncycastle.crypto.engines.RC564Engine;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $l2 = l1 & 63L;

        $i3 = (int) $l2;

        $l8 = l0 << $i3;

        $l4 = l1 & 63L;

        $l5 = 64L - $l4;

        $i6 = (int) $l5;

        $l7 = l0 >>> $i6;

        $l9 = $l8 | $l7;

        return $l9;
    }

    private long rotateRight(long, long)
    {
        long l0, l1, $l2, $l4, $l5, $l7, $l8, $l9;
        int $i3, $i6;
        org.bouncycastle.crypto.engines.RC564Engine r0;

        r0 := @this: org.bouncycastle.crypto.engines.RC564Engine;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $l2 = l1 & 63L;

        $i3 = (int) $l2;

        $l8 = l0 >>> $i3;

        $l4 = l1 & 63L;

        $l5 = 64L - $l4;

        $i6 = (int) $l5;

        $l7 = l0 << $i6;

        $l9 = $l8 | $l7;

        return $l9;
    }

    private long bytesToWord(byte[], int)
    {
        byte[] r0;
        long $l4, $l5, l6;
        short $s3, $s8;
        byte $b2;
        int i0, $i1, i7, $i10;
        org.bouncycastle.crypto.engines.RC564Engine r1;

        r1 := @this: org.bouncycastle.crypto.engines.RC564Engine;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        l6 = 0L;

        i7 = 7;

     label1:
        if i7 < 0 goto label2;

        $l5 = l6 << 8;

        $i1 = i7 + i0;

        $b2 = r0[$i1];

        $s8 = (short) $b2;

        $s3 = $s8 & 255;

        $l4 = (long) $s3;

        l6 = $l5 + $l4;

        $i10 = (int) -1;

        i7 = i7 + $i10;

        goto label1;

     label2:
        return l6;
    }

    private void wordToBytes(long, byte[], int)
    {
        byte[] r0;
        long l4;
        byte $b2;
        int i0, $i1, $i3, i5;
        org.bouncycastle.crypto.engines.RC564Engine r1;

        r1 := @this: org.bouncycastle.crypto.engines.RC564Engine;

        l4 := @parameter0: long;

        r0 := @parameter1: byte[];

        i0 := @parameter2: int;

        i5 = 0;

     label1:
        if i5 >= 8 goto label2;

        $i3 = i5 + i0;

        $i1 = (int) l4;

        $b2 = (byte) $i1;

        r0[$i3] = $b2;

        l4 = l4 >>> 8;

        i5 = i5 + 1;

        goto label1;

     label2:
        return;
    }

    public static void <clinit>()
    {
        <org.bouncycastle.crypto.engines.RC564Engine: long Q64> = -7046029254386353131L;

        <org.bouncycastle.crypto.engines.RC564Engine: long P64> = -5196783011329398165L;

        <org.bouncycastle.crypto.engines.RC564Engine: int bytesPerWord> = 8;

        <org.bouncycastle.crypto.engines.RC564Engine: int wordSize> = 64;

        return;
    }
}
