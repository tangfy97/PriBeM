public class org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit extends org.apache.batik.ext.awt.image.renderable.AbstractRable implements org.apache.batik.ext.awt.image.renderable.FilterResRable, org.apache.batik.ext.awt.image.renderable.PaintRable
{
    private int filterResolutionX;
    private int filterResolutionY;
    java.lang.ref.Reference resRed;
    float resScale;

    public void <init>()
    {
        org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit r0;
        int $i1, $i3;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit;

        specialinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void <init>()>();

        $i1 = (int) -1;

        r0.<org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit: int filterResolutionX> = $i1;

        $i3 = (int) -1;

        r0.<org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit: int filterResolutionY> = $i3;

        r0.<org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit: java.lang.ref.Reference resRed> = null;

        r0.<org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit: float resScale> = 0.0F;

        return;
    }

    public void <init>(org.apache.batik.ext.awt.image.renderable.Filter, int, int)
    {
        org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit r0;
        int i0, i1, $i3, $i5;
        org.apache.batik.ext.awt.image.renderable.Filter r1;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit;

        r1 := @parameter0: org.apache.batik.ext.awt.image.renderable.Filter;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void <init>()>();

        $i3 = (int) -1;

        r0.<org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit: int filterResolutionX> = $i3;

        $i5 = (int) -1;

        r0.<org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit: int filterResolutionY> = $i5;

        r0.<org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit: java.lang.ref.Reference resRed> = null;

        r0.<org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit: float resScale> = 0.0F;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void init(org.apache.batik.ext.awt.image.renderable.Filter,java.util.Map)>(r1, null);

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit: void setFilterResolutionX(int)>(i0);

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit: void setFilterResolutionY(int)>(i1);

        return;
    }

    public org.apache.batik.ext.awt.image.renderable.Filter getSource()
    {
        org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit r0;
        java.util.Vector $r1;
        java.lang.Object $r2;
        org.apache.batik.ext.awt.image.renderable.Filter $r3;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit;

        $r1 = r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.util.Vector srcs>;

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object get(int)>(0);

        $r3 = (org.apache.batik.ext.awt.image.renderable.Filter) $r2;

        return $r3;
    }

    public void setSource(org.apache.batik.ext.awt.image.renderable.Filter)
    {
        org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit r0;
        org.apache.batik.ext.awt.image.renderable.Filter r1;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit;

        r1 := @parameter0: org.apache.batik.ext.awt.image.renderable.Filter;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void init(org.apache.batik.ext.awt.image.renderable.Filter,java.util.Map)>(r1, null);

        return;
    }

    public int getFilterResolutionX()
    {
        org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit r0;
        int $i0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit;

        $i0 = r0.<org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit: int filterResolutionX>;

        return $i0;
    }

    public void setFilterResolutionX(int)
    {
        int i0;
        org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;

     label1:
        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void touch()>();

        r0.<org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit: int filterResolutionX> = i0;

        return;
    }

    public int getFilterResolutionY()
    {
        org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit r0;
        int $i0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit;

        $i0 = r0.<org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit: int filterResolutionY>;

        return $i0;
    }

    public void setFilterResolutionY(int)
    {
        org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit r0;
        int i0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void touch()>();

        r0.<org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit: int filterResolutionY> = i0;

        return;
    }

    public boolean allPaintRable(java.awt.image.renderable.RenderableImage)
    {
        org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit r5;
        java.util.Iterator $r2;
        java.util.Vector $r1;
        java.lang.Object $r3;
        java.awt.image.renderable.RenderableImage r0, r4;
        boolean $z0, $z1, $z2;

        r5 := @this: org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit;

        r0 := @parameter0: java.awt.image.renderable.RenderableImage;

        $z0 = r0 instanceof org.apache.batik.ext.awt.image.renderable.PaintRable;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r1 = interfaceinvoke r0.<java.awt.image.renderable.RenderableImage: java.util.Vector getSources()>();

        if $r1 != null goto label2;

        return 1;

     label2:
        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        goto label4;

     label3:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.awt.image.renderable.RenderableImage) $r3;

        $z2 = virtualinvoke r5.<org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit: boolean allPaintRable(java.awt.image.renderable.RenderableImage)>(r4);

        if $z2 != 0 goto label4;

        return 0;

     label4:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label3;

        return 1;
    }

    public boolean distributeAcross(java.awt.image.renderable.RenderableImage, java.awt.Graphics2D)
    {
        java.util.ListIterator $r4;
        java.awt.geom.Rectangle2D $r16;
        org.apache.batik.ext.awt.image.CompositeRule $r1, $r2, $r9;
        org.apache.batik.ext.awt.image.renderable.CompositeRable8Bit $r7;
        java.util.Vector $r3;
        java.awt.image.renderable.RenderableImage r0, r20;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.awt.Shape $r15;
        org.apache.batik.ext.awt.image.renderable.Filter $r17, r21;
        java.util.List $r8;
        org.apache.batik.ext.awt.image.renderable.PadRable r18;
        org.apache.batik.ext.awt.image.renderable.PaintRable r13;
        java.awt.Graphics2D r11;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit r6, $r10, $r14;
        org.apache.batik.ext.awt.image.renderable.CompositeRable r19;
        java.lang.Object $r5, $r12;

        r6 := @this: org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit;

        r0 := @parameter0: java.awt.image.renderable.RenderableImage;

        r11 := @parameter1: java.awt.Graphics2D;

        $z0 = r0 instanceof org.apache.batik.ext.awt.image.renderable.PadRable;

        if $z0 == 0 goto label01;

        r18 = (org.apache.batik.ext.awt.image.renderable.PadRable) r0;

        $r15 = virtualinvoke r11.<java.awt.Graphics: java.awt.Shape getClip()>();

        $r16 = interfaceinvoke r18.<org.apache.batik.ext.awt.image.renderable.PadRable: java.awt.geom.Rectangle2D getPadRect()>();

        virtualinvoke r11.<java.awt.Graphics2D: void clip(java.awt.Shape)>($r16);

        $r17 = interfaceinvoke r18.<org.apache.batik.ext.awt.image.renderable.PadRable: org.apache.batik.ext.awt.image.renderable.Filter getSource()>();

        $z8 = virtualinvoke r6.<org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit: boolean distributeAcross(java.awt.image.renderable.RenderableImage,java.awt.Graphics2D)>($r17, r11);

        virtualinvoke r11.<java.awt.Graphics: void setClip(java.awt.Shape)>($r15);

        return $z8;

     label01:
        $z1 = r0 instanceof org.apache.batik.ext.awt.image.renderable.CompositeRable;

        if $z1 == 0 goto label11;

        r19 = (org.apache.batik.ext.awt.image.renderable.CompositeRable) r0;

        $r1 = interfaceinvoke r19.<org.apache.batik.ext.awt.image.renderable.CompositeRable: org.apache.batik.ext.awt.image.CompositeRule getCompositeRule()>();

        $r2 = <org.apache.batik.ext.awt.image.CompositeRule: org.apache.batik.ext.awt.image.CompositeRule OVER>;

        if $r1 == $r2 goto label02;

        return 0;

     label02:
        $r3 = interfaceinvoke r19.<java.awt.image.renderable.RenderableImage: java.util.Vector getSources()>();

        if $r3 != null goto label03;

        return 1;

     label03:
        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.ListIterator listIterator(int)>($i0);

        goto label05;

     label04:
        $r5 = interfaceinvoke $r4.<java.util.ListIterator: java.lang.Object previous()>();

        r20 = (java.awt.image.renderable.RenderableImage) $r5;

        $z3 = virtualinvoke r6.<org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit: boolean allPaintRable(java.awt.image.renderable.RenderableImage)>(r20);

        if $z3 != 0 goto label05;

        interfaceinvoke $r4.<java.util.ListIterator: java.lang.Object next()>();

        goto label06;

     label05:
        $z2 = interfaceinvoke $r4.<java.util.ListIterator: boolean hasPrevious()>();

        if $z2 != 0 goto label04;

     label06:
        $z4 = interfaceinvoke $r4.<java.util.ListIterator: boolean hasPrevious()>();

        if $z4 != 0 goto label07;

        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: void drawImage(java.awt.Graphics2D,java.awt.image.renderable.RenderableImage)>(r11, r19);

        return 1;

     label07:
        $z5 = interfaceinvoke $r4.<java.util.ListIterator: boolean hasNext()>();

        if $z5 != 0 goto label08;

        return 0;

     label08:
        $i1 = interfaceinvoke $r4.<java.util.ListIterator: int nextIndex()>();

        $r7 = new org.apache.batik.ext.awt.image.renderable.CompositeRable8Bit;

        $r8 = interfaceinvoke $r3.<java.util.List: java.util.List subList(int,int)>(0, $i1);

        $r9 = interfaceinvoke r19.<org.apache.batik.ext.awt.image.renderable.CompositeRable: org.apache.batik.ext.awt.image.CompositeRule getCompositeRule()>();

        $z6 = interfaceinvoke r19.<org.apache.batik.ext.awt.image.renderable.FilterColorInterpolation: boolean isColorSpaceLinear()>();

        specialinvoke $r7.<org.apache.batik.ext.awt.image.renderable.CompositeRable8Bit: void <init>(java.util.List,org.apache.batik.ext.awt.image.CompositeRule,boolean)>($r8, $r9, $z6);

        $r10 = new org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit;

        $i2 = virtualinvoke r6.<org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit: int getFilterResolutionX()>();

        $i3 = virtualinvoke r6.<org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit: int getFilterResolutionY()>();

        specialinvoke $r10.<org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit: void <init>(org.apache.batik.ext.awt.image.renderable.Filter,int,int)>($r7, $i2, $i3);

        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: void drawImage(java.awt.Graphics2D,java.awt.image.renderable.RenderableImage)>(r11, $r10);

        goto label10;

     label09:
        $r12 = interfaceinvoke $r4.<java.util.ListIterator: java.lang.Object next()>();

        r13 = (org.apache.batik.ext.awt.image.renderable.PaintRable) $r12;

        $z7 = interfaceinvoke r13.<org.apache.batik.ext.awt.image.renderable.PaintRable: boolean paintRable(java.awt.Graphics2D)>(r11);

        if $z7 != 0 goto label10;

        r21 = (org.apache.batik.ext.awt.image.renderable.Filter) r13;

        $r14 = new org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit;

        $i4 = virtualinvoke r6.<org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit: int getFilterResolutionX()>();

        $i5 = virtualinvoke r6.<org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit: int getFilterResolutionY()>();

        specialinvoke $r14.<org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit: void <init>(org.apache.batik.ext.awt.image.renderable.Filter,int,int)>(r21, $i4, $i5);

        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: void drawImage(java.awt.Graphics2D,java.awt.image.renderable.RenderableImage)>(r11, $r14);

     label10:
        $z9 = interfaceinvoke $r4.<java.util.ListIterator: boolean hasNext()>();

        if $z9 != 0 goto label09;

        return 1;

     label11:
        return 0;
    }

    public boolean paintRable(java.awt.Graphics2D)
    {
        org.apache.batik.ext.awt.image.SVGComposite $r2;
        org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit r3;
        java.awt.Graphics2D r0;
        java.awt.Composite $r1;
        org.apache.batik.ext.awt.image.renderable.Filter $r4;
        boolean $z0, $z1;

        r3 := @this: org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit;

        r0 := @parameter0: java.awt.Graphics2D;

        $r1 = virtualinvoke r0.<java.awt.Graphics2D: java.awt.Composite getComposite()>();

        $r2 = <org.apache.batik.ext.awt.image.SVGComposite: org.apache.batik.ext.awt.image.SVGComposite OVER>;

        $z0 = virtualinvoke $r2.<org.apache.batik.ext.awt.image.SVGComposite: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r4 = virtualinvoke r3.<org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit: org.apache.batik.ext.awt.image.renderable.Filter getSource()>();

        $z1 = virtualinvoke r3.<org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit: boolean distributeAcross(java.awt.image.renderable.RenderableImage,java.awt.Graphics2D)>($r4, r0);

        return $z1;
    }

    private float getResScale()
    {
        org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit r0;
        float $f0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit;

        $f0 = r0.<org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit: float resScale>;

        return $f0;
    }

    private java.awt.image.RenderedImage getResRed(java.awt.RenderingHints)
    {
        java.awt.geom.Rectangle2D $r1;
        java.awt.RenderingHints r4;
        byte $b2;
        int $i0, $i1;
        java.lang.ref.SoftReference $r9;
        double $d0, $d1, d2, $d3, $d4, d5, $d6, $d7, $d8;
        org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit r0;
        java.awt.image.RenderedImage $r6, r12;
        java.awt.geom.AffineTransform $r2;
        org.apache.batik.ext.awt.image.renderable.Filter $r5;
        java.awt.image.renderable.RenderContext $r3;
        java.lang.ref.Reference $r10;
        org.apache.batik.ext.awt.image.rendered.CachableRed $r8;
        float f0, $f1;
        java.lang.Object $r11;
        org.apache.batik.ext.awt.image.rendered.TileCacheRed $r7;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit;

        r4 := @parameter0: java.awt.RenderingHints;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.awt.geom.Rectangle2D getBounds2D()>();

        $i0 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit: int getFilterResolutionX()>();

        $d0 = (double) $i0;

        $d1 = virtualinvoke $r1.<java.awt.geom.RectangularShape: double getWidth()>();

        d2 = $d0 / $d1;

        $i1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit: int getFilterResolutionY()>();

        $d3 = (double) $i1;

        $d4 = virtualinvoke $r1.<java.awt.geom.RectangularShape: double getHeight()>();

        d5 = $d3 / $d4;

        $d6 = staticinvoke <java.lang.Math: double min(double,double)>(d2, d5);

        f0 = (float) $d6;

        $f1 = r0.<org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit: float resScale>;

        $b2 = f0 cmpl $f1;

        if $b2 != 0 goto label1;

        $r10 = r0.<org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit: java.lang.ref.Reference resRed>;

        $r11 = virtualinvoke $r10.<java.lang.ref.Reference: java.lang.Object get()>();

        r12 = (java.awt.image.RenderedImage) $r11;

        if r12 == null goto label1;

        return r12;

     label1:
        $d8 = (double) f0;

        $d7 = (double) f0;

        $r2 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getScaleInstance(double,double)>($d8, $d7);

        $r3 = new java.awt.image.renderable.RenderContext;

        specialinvoke $r3.<java.awt.image.renderable.RenderContext: void <init>(java.awt.geom.AffineTransform,java.awt.Shape,java.awt.RenderingHints)>($r2, null, r4);

        $r5 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit: org.apache.batik.ext.awt.image.renderable.Filter getSource()>();

        $r6 = interfaceinvoke $r5.<java.awt.image.renderable.RenderableImage: java.awt.image.RenderedImage createRendering(java.awt.image.renderable.RenderContext)>($r3);

        $r7 = new org.apache.batik.ext.awt.image.rendered.TileCacheRed;

        $r8 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: org.apache.batik.ext.awt.image.rendered.CachableRed wrap(java.awt.image.RenderedImage)>($r6);

        specialinvoke $r7.<org.apache.batik.ext.awt.image.rendered.TileCacheRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed)>($r8);

        r0.<org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit: float resScale> = f0;

        $r9 = new java.lang.ref.SoftReference;

        specialinvoke $r9.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>($r7);

        r0.<org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit: java.lang.ref.Reference resRed> = $r9;

        return $r7;
    }

    public java.awt.image.RenderedImage createRendering(java.awt.image.renderable.RenderContext)
    {
        java.awt.geom.Rectangle2D $r4;
        java.awt.RenderingHints $r2;
        byte $b4, $b7;
        java.awt.Shape $r5;
        org.apache.batik.ext.awt.image.rendered.AffineRed $r17;
        java.awt.image.RenderedImage $r7, $r12;
        java.awt.geom.AffineTransform $r1, r14, $r15, $r16;
        org.apache.batik.ext.awt.image.renderable.Filter $r11;
        java.awt.image.renderable.RenderContext r0;
        org.apache.batik.ext.awt.image.rendered.CachableRed $r10;
        float $f0, $f1, $f2, $f3, $f4, f5, f6;
        java.awt.Rectangle $r6;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i8, $i9;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13;
        org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit r3;

        r3 := @this: org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit;

        r0 := @parameter0: java.awt.image.renderable.RenderContext;

        $r1 = virtualinvoke r0.<java.awt.image.renderable.RenderContext: java.awt.geom.AffineTransform getTransform()>();

        r14 = $r1;

        if $r1 != null goto label1;

        $r15 = new java.awt.geom.AffineTransform;

        specialinvoke $r15.<java.awt.geom.AffineTransform: void <init>()>();

        r14 = $r15;

     label1:
        $r2 = virtualinvoke r0.<java.awt.image.renderable.RenderContext: java.awt.RenderingHints getRenderingHints()>();

        $i0 = virtualinvoke r3.<org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit: int getFilterResolutionX()>();

        $i1 = virtualinvoke r3.<org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit: int getFilterResolutionY()>();

        if $i0 <= 0 goto label2;

        if $i1 != 0 goto label3;

     label2:
        return null;

     label3:
        $r4 = virtualinvoke r3.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.awt.geom.Rectangle2D getBounds2D()>();

        $r5 = virtualinvoke r14.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r4);

        $r6 = interfaceinvoke $r5.<java.awt.Shape: java.awt.Rectangle getBounds()>();

        f5 = 1.0F;

        $i2 = $r6.<java.awt.Rectangle: int width>;

        if $i0 >= $i2 goto label4;

        $f4 = (float) $i0;

        $i6 = $r6.<java.awt.Rectangle: int width>;

        $f3 = (float) $i6;

        f5 = $f4 / $f3;

     label4:
        f6 = 1.0F;

        if $i1 >= 0 goto label5;

        f6 = f5;

        goto label6;

     label5:
        $i3 = $r6.<java.awt.Rectangle: int height>;

        if $i1 >= $i3 goto label6;

        $f2 = (float) $i1;

        $i5 = $r6.<java.awt.Rectangle: int height>;

        $f1 = (float) $i5;

        f6 = $f2 / $f1;

     label6:
        $b7 = f5 cmpl 1.0F;

        $i8 = (int) $b7;

        if $i8 < 0 goto label7;

        $b4 = f6 cmpl 1.0F;

        $i9 = (int) $b4;

        if $i9 < 0 goto label7;

        $r11 = virtualinvoke r3.<org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit: org.apache.batik.ext.awt.image.renderable.Filter getSource()>();

        $r12 = interfaceinvoke $r11.<java.awt.image.renderable.RenderableImage: java.awt.image.RenderedImage createRendering(java.awt.image.renderable.RenderContext)>(r0);

        return $r12;

     label7:
        $r7 = specialinvoke r3.<org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit: java.awt.image.RenderedImage getResRed(java.awt.RenderingHints)>($r2);

        $f0 = specialinvoke r3.<org.apache.batik.ext.awt.image.renderable.FilterResRable8Bit: float getResScale()>();

        $r16 = new java.awt.geom.AffineTransform;

        $d0 = virtualinvoke r14.<java.awt.geom.AffineTransform: double getScaleX()>();

        $d1 = (double) $f0;

        $d2 = $d0 / $d1;

        $d3 = virtualinvoke r14.<java.awt.geom.AffineTransform: double getShearY()>();

        $d4 = (double) $f0;

        $d5 = $d3 / $d4;

        $d6 = virtualinvoke r14.<java.awt.geom.AffineTransform: double getShearX()>();

        $d7 = (double) $f0;

        $d8 = $d6 / $d7;

        $d9 = virtualinvoke r14.<java.awt.geom.AffineTransform: double getScaleY()>();

        $d10 = (double) $f0;

        $d11 = $d9 / $d10;

        $d12 = virtualinvoke r14.<java.awt.geom.AffineTransform: double getTranslateX()>();

        $d13 = virtualinvoke r14.<java.awt.geom.AffineTransform: double getTranslateY()>();

        specialinvoke $r16.<java.awt.geom.AffineTransform: void <init>(double,double,double,double,double,double)>($d2, $d5, $d8, $d11, $d12, $d13);

        $r17 = new org.apache.batik.ext.awt.image.rendered.AffineRed;

        $r10 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: org.apache.batik.ext.awt.image.rendered.CachableRed wrap(java.awt.image.RenderedImage)>($r7);

        specialinvoke $r17.<org.apache.batik.ext.awt.image.rendered.AffineRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.geom.AffineTransform,java.awt.RenderingHints)>($r10, $r16, $r2);

        return $r17;
    }
}
