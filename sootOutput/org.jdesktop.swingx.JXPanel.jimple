public class org.jdesktop.swingx.JXPanel extends javax.swing.JPanel implements javax.swing.Scrollable
{
    private org.jdesktop.swingx.ScrollableSizeHint scrollableWidthHint;
    private org.jdesktop.swingx.ScrollableSizeHint scrollableHeightHint;
    private float alpha;
    private boolean oldOpaque;
    private boolean inheritAlpha;
    private org.jdesktop.swingx.painter.Painter backgroundPainter;
    private java.beans.PropertyChangeListener painterChangeListener;
    private boolean paintBorderInsets;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        org.jdesktop.swingx.ScrollableSizeHint $r1, $r2;
        org.jdesktop.swingx.JXPanel r0;

        r0 := @this: org.jdesktop.swingx.JXPanel;

        specialinvoke r0.<javax.swing.JPanel: void <init>()>();

        $r1 = <org.jdesktop.swingx.ScrollableSizeHint: org.jdesktop.swingx.ScrollableSizeHint FIT>;

        r0.<org.jdesktop.swingx.JXPanel: org.jdesktop.swingx.ScrollableSizeHint scrollableWidthHint> = $r1;

        $r2 = <org.jdesktop.swingx.ScrollableSizeHint: org.jdesktop.swingx.ScrollableSizeHint FIT>;

        r0.<org.jdesktop.swingx.JXPanel: org.jdesktop.swingx.ScrollableSizeHint scrollableHeightHint> = $r2;

        r0.<org.jdesktop.swingx.JXPanel: float alpha> = 1.0F;

        r0.<org.jdesktop.swingx.JXPanel: boolean inheritAlpha> = 1;

        r0.<org.jdesktop.swingx.JXPanel: boolean paintBorderInsets> = 1;

        return;
    }

    public void <init>(boolean)
    {
        org.jdesktop.swingx.ScrollableSizeHint $r1, $r2;
        org.jdesktop.swingx.JXPanel r0;
        boolean z0;

        r0 := @this: org.jdesktop.swingx.JXPanel;

        z0 := @parameter0: boolean;

        specialinvoke r0.<javax.swing.JPanel: void <init>(boolean)>(z0);

        $r1 = <org.jdesktop.swingx.ScrollableSizeHint: org.jdesktop.swingx.ScrollableSizeHint FIT>;

        r0.<org.jdesktop.swingx.JXPanel: org.jdesktop.swingx.ScrollableSizeHint scrollableWidthHint> = $r1;

        $r2 = <org.jdesktop.swingx.ScrollableSizeHint: org.jdesktop.swingx.ScrollableSizeHint FIT>;

        r0.<org.jdesktop.swingx.JXPanel: org.jdesktop.swingx.ScrollableSizeHint scrollableHeightHint> = $r2;

        r0.<org.jdesktop.swingx.JXPanel: float alpha> = 1.0F;

        r0.<org.jdesktop.swingx.JXPanel: boolean inheritAlpha> = 1;

        r0.<org.jdesktop.swingx.JXPanel: boolean paintBorderInsets> = 1;

        return;
    }

    public void <init>(java.awt.LayoutManager)
    {
        org.jdesktop.swingx.ScrollableSizeHint $r2, $r3;
        java.awt.LayoutManager r1;
        org.jdesktop.swingx.JXPanel r0;

        r0 := @this: org.jdesktop.swingx.JXPanel;

        r1 := @parameter0: java.awt.LayoutManager;

        specialinvoke r0.<javax.swing.JPanel: void <init>(java.awt.LayoutManager)>(r1);

        $r2 = <org.jdesktop.swingx.ScrollableSizeHint: org.jdesktop.swingx.ScrollableSizeHint FIT>;

        r0.<org.jdesktop.swingx.JXPanel: org.jdesktop.swingx.ScrollableSizeHint scrollableWidthHint> = $r2;

        $r3 = <org.jdesktop.swingx.ScrollableSizeHint: org.jdesktop.swingx.ScrollableSizeHint FIT>;

        r0.<org.jdesktop.swingx.JXPanel: org.jdesktop.swingx.ScrollableSizeHint scrollableHeightHint> = $r3;

        r0.<org.jdesktop.swingx.JXPanel: float alpha> = 1.0F;

        r0.<org.jdesktop.swingx.JXPanel: boolean inheritAlpha> = 1;

        r0.<org.jdesktop.swingx.JXPanel: boolean paintBorderInsets> = 1;

        return;
    }

    public void <init>(java.awt.LayoutManager, boolean)
    {
        org.jdesktop.swingx.ScrollableSizeHint $r2, $r3;
        java.awt.LayoutManager r1;
        org.jdesktop.swingx.JXPanel r0;
        boolean z0;

        r0 := @this: org.jdesktop.swingx.JXPanel;

        r1 := @parameter0: java.awt.LayoutManager;

        z0 := @parameter1: boolean;

        specialinvoke r0.<javax.swing.JPanel: void <init>(java.awt.LayoutManager,boolean)>(r1, z0);

        $r2 = <org.jdesktop.swingx.ScrollableSizeHint: org.jdesktop.swingx.ScrollableSizeHint FIT>;

        r0.<org.jdesktop.swingx.JXPanel: org.jdesktop.swingx.ScrollableSizeHint scrollableWidthHint> = $r2;

        $r3 = <org.jdesktop.swingx.ScrollableSizeHint: org.jdesktop.swingx.ScrollableSizeHint FIT>;

        r0.<org.jdesktop.swingx.JXPanel: org.jdesktop.swingx.ScrollableSizeHint scrollableHeightHint> = $r3;

        r0.<org.jdesktop.swingx.JXPanel: float alpha> = 1.0F;

        r0.<org.jdesktop.swingx.JXPanel: boolean inheritAlpha> = 1;

        r0.<org.jdesktop.swingx.JXPanel: boolean paintBorderInsets> = 1;

        return;
    }

    public void setAlpha(float)
    {
        java.lang.AssertionError $r4;
        byte $b0, $b1, $b2, $b3, $b4, $b5, $b6;
        int $i7, $i8, $i9, $i10;
        boolean $z0, $z1, $z2;
        double $d0;
        org.jdesktop.swingx.JXPanel r0;
        javax.swing.RepaintManager $r1, $r2;
        float f0, $f1, $f2;

        r0 := @this: org.jdesktop.swingx.JXPanel;

        f0 := @parameter0: float;

        $f1 = r0.<org.jdesktop.swingx.JXPanel: float alpha>;

        $b0 = $f1 cmpl f0;

        if $b0 == 0 goto label6;

        $z0 = <org.jdesktop.swingx.JXPanel: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $b5 = f0 cmpl 0.0F;

        $i7 = (int) $b5;

        if $i7 < 0 goto label1;

        $d0 = (double) f0;

        $b6 = $d0 cmpg 1.0;

        $i8 = (int) $b6;

        if $i8 <= 0 goto label2;

     label1:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        $f2 = r0.<org.jdesktop.swingx.JXPanel: float alpha>;

        r0.<org.jdesktop.swingx.JXPanel: float alpha> = f0;

        $b1 = f0 cmpl 0.0F;

        $i9 = (int) $b1;

        if $i9 <= 0 goto label4;

        $b3 = f0 cmpg 1.0F;

        $i10 = (int) $b3;

        if $i10 >= 0 goto label4;

        $b4 = $f2 cmpl 1.0F;

        if $b4 != 0 goto label3;

        $z2 = virtualinvoke r0.<org.jdesktop.swingx.JXPanel: boolean isOpaque()>();

        r0.<org.jdesktop.swingx.JXPanel: boolean oldOpaque> = $z2;

        virtualinvoke r0.<org.jdesktop.swingx.JXPanel: void setOpaque(boolean)>(0);

     label3:
        $r1 = staticinvoke <javax.swing.RepaintManager: javax.swing.RepaintManager currentManager(javax.swing.JComponent)>(r0);

        $r2 = staticinvoke <org.jdesktop.swingx.SwingXUtilities: javax.swing.RepaintManager getTranslucentRepaintManager(javax.swing.RepaintManager)>($r1);

        staticinvoke <javax.swing.RepaintManager: void setCurrentManager(javax.swing.RepaintManager)>($r2);

        goto label5;

     label4:
        $b2 = f0 cmpl 1.0F;

        if $b2 != 0 goto label5;

        $z1 = r0.<org.jdesktop.swingx.JXPanel: boolean oldOpaque>;

        if $z1 == 0 goto label5;

        virtualinvoke r0.<org.jdesktop.swingx.JXPanel: void setOpaque(boolean)>(1);

     label5:
        virtualinvoke r0.<org.jdesktop.swingx.JXPanel: void firePropertyChange(java.lang.String,float,float)>("alpha", $f2, f0);

        virtualinvoke r0.<org.jdesktop.swingx.JXPanel: void repaint()>();

     label6:
        return;
    }

    public float getAlpha()
    {
        float $f0;
        org.jdesktop.swingx.JXPanel r0;

        r0 := @this: org.jdesktop.swingx.JXPanel;

        $f0 = r0.<org.jdesktop.swingx.JXPanel: float alpha>;

        return $f0;
    }

    public float getEffectiveAlpha()
    {
        org.jdesktop.swingx.JXPanel r0, $r1;
        float $f0, $f1, f2;
        java.awt.Container r2, $r3;
        boolean $z0, $z1;

        r0 := @this: org.jdesktop.swingx.JXPanel;

        $z0 = r0.<org.jdesktop.swingx.JXPanel: boolean inheritAlpha>;

        if $z0 == 0 goto label3;

        f2 = r0.<org.jdesktop.swingx.JXPanel: float alpha>;

        r2 = r0;

     label1:
        $r3 = virtualinvoke r2.<java.awt.Component: java.awt.Container getParent()>();

        r2 = $r3;

        if $r3 == null goto label2;

        $z1 = $r3 instanceof org.jdesktop.swingx.JXPanel;

        if $z1 == 0 goto label1;

        $r1 = (org.jdesktop.swingx.JXPanel) $r3;

        $f1 = virtualinvoke $r1.<org.jdesktop.swingx.JXPanel: float getAlpha()>();

        f2 = staticinvoke <java.lang.Math: float min(float,float)>($f1, f2);

        goto label1;

     label2:
        return f2;

     label3:
        $f0 = r0.<org.jdesktop.swingx.JXPanel: float alpha>;

        return $f0;
    }

    public boolean isInheritAlpha()
    {
        org.jdesktop.swingx.JXPanel r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXPanel;

        $z0 = r0.<org.jdesktop.swingx.JXPanel: boolean inheritAlpha>;

        return $z0;
    }

    public void setInheritAlpha(boolean)
    {
        org.jdesktop.swingx.JXPanel r0;
        boolean z0, $z1, $z2, $z3, $z4;

        r0 := @this: org.jdesktop.swingx.JXPanel;

        z0 := @parameter0: boolean;

        $z1 = r0.<org.jdesktop.swingx.JXPanel: boolean inheritAlpha>;

        if $z1 == z0 goto label3;

        r0.<org.jdesktop.swingx.JXPanel: boolean inheritAlpha> = z0;

        $z2 = r0.<org.jdesktop.swingx.JXPanel: boolean inheritAlpha>;

        if $z2 != 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        $z3 = r0.<org.jdesktop.swingx.JXPanel: boolean inheritAlpha>;

        virtualinvoke r0.<org.jdesktop.swingx.JXPanel: void firePropertyChange(java.lang.String,boolean,boolean)>("inheritAlpha", $z4, $z3);

     label3:
        return;
    }

    public final void setScrollableWidthHint(org.jdesktop.swingx.ScrollableSizeHint)
    {
        org.jdesktop.swingx.ScrollableSizeHint r0, $r2, $r3;
        java.lang.IllegalArgumentException $r4;
        org.jdesktop.swingx.JXPanel r1;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;
        boolean $z0;

        r1 := @this: org.jdesktop.swingx.JXPanel;

        r0 := @parameter0: org.jdesktop.swingx.ScrollableSizeHint;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.ScrollableSizeHint: boolean isHorizontalCompatible()>();

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("track must be horizontal, but was ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label1:
        $r2 = virtualinvoke r1.<org.jdesktop.swingx.JXPanel: org.jdesktop.swingx.ScrollableSizeHint getScrollableWidthHint()>();

        if $r2 != r0 goto label2;

        return;

     label2:
        r1.<org.jdesktop.swingx.JXPanel: org.jdesktop.swingx.ScrollableSizeHint scrollableWidthHint> = r0;

        virtualinvoke r1.<org.jdesktop.swingx.JXPanel: void revalidate()>();

        $r3 = virtualinvoke r1.<org.jdesktop.swingx.JXPanel: org.jdesktop.swingx.ScrollableSizeHint getScrollableWidthHint()>();

        virtualinvoke r1.<org.jdesktop.swingx.JXPanel: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("scrollableWidthHint", $r2, $r3);

        return;
    }

    public final void setScrollableHeightHint(org.jdesktop.swingx.ScrollableSizeHint)
    {
        org.jdesktop.swingx.ScrollableSizeHint r0, $r2, $r3;
        java.lang.IllegalArgumentException $r4;
        org.jdesktop.swingx.JXPanel r1;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;
        boolean $z0;

        r1 := @this: org.jdesktop.swingx.JXPanel;

        r0 := @parameter0: org.jdesktop.swingx.ScrollableSizeHint;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.ScrollableSizeHint: boolean isVerticalCompatible()>();

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("track must be vertical, but was ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label1:
        $r2 = virtualinvoke r1.<org.jdesktop.swingx.JXPanel: org.jdesktop.swingx.ScrollableSizeHint getScrollableHeightHint()>();

        if $r2 != r0 goto label2;

        return;

     label2:
        r1.<org.jdesktop.swingx.JXPanel: org.jdesktop.swingx.ScrollableSizeHint scrollableHeightHint> = r0;

        virtualinvoke r1.<org.jdesktop.swingx.JXPanel: void revalidate()>();

        $r3 = virtualinvoke r1.<org.jdesktop.swingx.JXPanel: org.jdesktop.swingx.ScrollableSizeHint getScrollableHeightHint()>();

        virtualinvoke r1.<org.jdesktop.swingx.JXPanel: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("scrollableHeightHint", $r2, $r3);

        return;
    }

    protected org.jdesktop.swingx.ScrollableSizeHint getScrollableWidthHint()
    {
        org.jdesktop.swingx.ScrollableSizeHint $r1;
        org.jdesktop.swingx.JXPanel r0;

        r0 := @this: org.jdesktop.swingx.JXPanel;

        $r1 = r0.<org.jdesktop.swingx.JXPanel: org.jdesktop.swingx.ScrollableSizeHint scrollableWidthHint>;

        return $r1;
    }

    protected org.jdesktop.swingx.ScrollableSizeHint getScrollableHeightHint()
    {
        org.jdesktop.swingx.ScrollableSizeHint $r1;
        org.jdesktop.swingx.JXPanel r0;

        r0 := @this: org.jdesktop.swingx.JXPanel;

        $r1 = r0.<org.jdesktop.swingx.JXPanel: org.jdesktop.swingx.ScrollableSizeHint scrollableHeightHint>;

        return $r1;
    }

    public boolean getScrollableTracksViewportHeight()
    {
        org.jdesktop.swingx.ScrollableSizeHint $r1;
        org.jdesktop.swingx.JXPanel r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXPanel;

        $r1 = r0.<org.jdesktop.swingx.JXPanel: org.jdesktop.swingx.ScrollableSizeHint scrollableHeightHint>;

        $z0 = virtualinvoke $r1.<org.jdesktop.swingx.ScrollableSizeHint: boolean getTracksParentSize(javax.swing.JComponent)>(r0);

        return $z0;
    }

    public boolean getScrollableTracksViewportWidth()
    {
        org.jdesktop.swingx.ScrollableSizeHint $r1;
        org.jdesktop.swingx.JXPanel r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXPanel;

        $r1 = r0.<org.jdesktop.swingx.JXPanel: org.jdesktop.swingx.ScrollableSizeHint scrollableWidthHint>;

        $z0 = virtualinvoke $r1.<org.jdesktop.swingx.ScrollableSizeHint: boolean getTracksParentSize(javax.swing.JComponent)>(r0);

        return $z0;
    }

    public java.awt.Dimension getPreferredScrollableViewportSize()
    {
        java.awt.Dimension $r1;
        org.jdesktop.swingx.JXPanel r0;

        r0 := @this: org.jdesktop.swingx.JXPanel;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXPanel: java.awt.Dimension getPreferredSize()>();

        return $r1;
    }

    public int getScrollableBlockIncrement(java.awt.Rectangle, int, int)
    {
        java.awt.Rectangle r1;
        int i0, $i1, $i2, i3;
        java.lang.IllegalArgumentException $r0;
        org.jdesktop.swingx.JXPanel r2;

        r2 := @this: org.jdesktop.swingx.JXPanel;

        r1 := @parameter0: java.awt.Rectangle;

        i0 := @parameter1: int;

        i3 := @parameter2: int;

        if i0 != 1 goto label1;

        $i2 = r1.<java.awt.Rectangle: int height>;

        return $i2;

     label1:
        if i0 != 0 goto label2;

        $i1 = r1.<java.awt.Rectangle: int width>;

        return $i1;

     label2:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("invalid orientation");

        throw $r0;
    }

    public int getScrollableUnitIncrement(java.awt.Rectangle, int, int)
    {
        java.awt.Rectangle r1;
        int i0, i1, $i2, $i3;
        org.jdesktop.swingx.JXPanel r0;

        r0 := @this: org.jdesktop.swingx.JXPanel;

        r1 := @parameter0: java.awt.Rectangle;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = virtualinvoke r0.<org.jdesktop.swingx.JXPanel: int getScrollableBlockIncrement(java.awt.Rectangle,int,int)>(r1, i0, i1);

        $i3 = $i2 / 10;

        return $i3;
    }

    public void setScrollableTracksViewportHeight(boolean)
    {
        org.jdesktop.swingx.ScrollableSizeHint $r1;
        org.jdesktop.swingx.JXPanel r0;
        boolean z0;

        r0 := @this: org.jdesktop.swingx.JXPanel;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r1 = <org.jdesktop.swingx.ScrollableSizeHint: org.jdesktop.swingx.ScrollableSizeHint FIT>;

        goto label2;

     label1:
        $r1 = <org.jdesktop.swingx.ScrollableSizeHint: org.jdesktop.swingx.ScrollableSizeHint NONE>;

     label2:
        virtualinvoke r0.<org.jdesktop.swingx.JXPanel: void setScrollableHeightHint(org.jdesktop.swingx.ScrollableSizeHint)>($r1);

        return;
    }

    public void setScrollableTracksViewportWidth(boolean)
    {
        org.jdesktop.swingx.ScrollableSizeHint $r1;
        org.jdesktop.swingx.JXPanel r0;
        boolean z0;

        r0 := @this: org.jdesktop.swingx.JXPanel;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r1 = <org.jdesktop.swingx.ScrollableSizeHint: org.jdesktop.swingx.ScrollableSizeHint FIT>;

        goto label2;

     label1:
        $r1 = <org.jdesktop.swingx.ScrollableSizeHint: org.jdesktop.swingx.ScrollableSizeHint NONE>;

     label2:
        virtualinvoke r0.<org.jdesktop.swingx.JXPanel: void setScrollableWidthHint(org.jdesktop.swingx.ScrollableSizeHint)>($r1);

        return;
    }

    public void setBackground(java.awt.Color)
    {
        java.awt.Color r1;
        org.jdesktop.swingx.JXPanel r0;

        r0 := @this: org.jdesktop.swingx.JXPanel;

        r1 := @parameter0: java.awt.Color;

        specialinvoke r0.<javax.swing.JPanel: void setBackground(java.awt.Color)>(r1);

        return;
    }

    private boolean canInstallBackgroundUIResourceAsPainter(java.awt.Color)
    {
        java.awt.Color r2;
        org.jdesktop.swingx.painter.Painter $r1;
        org.jdesktop.swingx.JXPanel r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.jdesktop.swingx.JXPanel;

        r2 := @parameter0: java.awt.Color;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXPanel: org.jdesktop.swingx.painter.Painter getBackgroundPainter()>();

        $z0 = r2 instanceof javax.swing.plaf.UIResource;

        if $z0 == 0 goto label2;

        if $r1 == null goto label1;

        $z1 = $r1 instanceof javax.swing.plaf.UIResource;

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public void setBackgroundPainter(org.jdesktop.swingx.painter.Painter)
    {
        org.jdesktop.swingx.painter.Painter $r1, r2, $r3, $r4, $r5;
        org.jdesktop.swingx.JXPanel r0;
        java.beans.PropertyChangeListener $r7, $r8;
        org.jdesktop.swingx.painter.AbstractPainter $r6, $r9;
        boolean $z0, $z1;

        r0 := @this: org.jdesktop.swingx.JXPanel;

        r2 := @parameter0: org.jdesktop.swingx.painter.Painter;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXPanel: org.jdesktop.swingx.painter.Painter getBackgroundPainter()>();

        $z0 = $r1 instanceof org.jdesktop.swingx.painter.AbstractPainter;

        if $z0 == 0 goto label1;

        $r9 = (org.jdesktop.swingx.painter.AbstractPainter) $r1;

        $r8 = r0.<org.jdesktop.swingx.JXPanel: java.beans.PropertyChangeListener painterChangeListener>;

        virtualinvoke $r9.<org.jdesktop.swingx.painter.AbstractPainter: void removePropertyChangeListener(java.beans.PropertyChangeListener)>($r8);

     label1:
        r0.<org.jdesktop.swingx.JXPanel: org.jdesktop.swingx.painter.Painter backgroundPainter> = r2;

        $r3 = r0.<org.jdesktop.swingx.JXPanel: org.jdesktop.swingx.painter.Painter backgroundPainter>;

        $z1 = $r3 instanceof org.jdesktop.swingx.painter.AbstractPainter;

        if $z1 == 0 goto label2;

        $r5 = r0.<org.jdesktop.swingx.JXPanel: org.jdesktop.swingx.painter.Painter backgroundPainter>;

        $r6 = (org.jdesktop.swingx.painter.AbstractPainter) $r5;

        $r7 = virtualinvoke r0.<org.jdesktop.swingx.JXPanel: java.beans.PropertyChangeListener getPainterChangeListener()>();

        virtualinvoke $r6.<org.jdesktop.swingx.painter.AbstractPainter: void addPropertyChangeListener(java.beans.PropertyChangeListener)>($r7);

     label2:
        $r4 = virtualinvoke r0.<org.jdesktop.swingx.JXPanel: org.jdesktop.swingx.painter.Painter getBackgroundPainter()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXPanel: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("backgroundPainter", $r1, $r4);

        virtualinvoke r0.<org.jdesktop.swingx.JXPanel: void repaint()>();

        return;
    }

    protected java.beans.PropertyChangeListener getPainterChangeListener()
    {
        java.beans.PropertyChangeListener $r1, $r2;
        org.jdesktop.swingx.JXPanel$1 $r3;
        org.jdesktop.swingx.JXPanel r0;

        r0 := @this: org.jdesktop.swingx.JXPanel;

        $r1 = r0.<org.jdesktop.swingx.JXPanel: java.beans.PropertyChangeListener painterChangeListener>;

        if $r1 != null goto label1;

        $r3 = new org.jdesktop.swingx.JXPanel$1;

        specialinvoke $r3.<org.jdesktop.swingx.JXPanel$1: void <init>(org.jdesktop.swingx.JXPanel)>(r0);

        r0.<org.jdesktop.swingx.JXPanel: java.beans.PropertyChangeListener painterChangeListener> = $r3;

     label1:
        $r2 = r0.<org.jdesktop.swingx.JXPanel: java.beans.PropertyChangeListener painterChangeListener>;

        return $r2;
    }

    public org.jdesktop.swingx.painter.Painter getBackgroundPainter()
    {
        org.jdesktop.swingx.painter.Painter $r1;
        org.jdesktop.swingx.JXPanel r0;

        r0 := @this: org.jdesktop.swingx.JXPanel;

        $r1 = r0.<org.jdesktop.swingx.JXPanel: org.jdesktop.swingx.painter.Painter backgroundPainter>;

        return $r1;
    }

    public boolean isPaintBorderInsets()
    {
        org.jdesktop.swingx.JXPanel r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXPanel;

        $z0 = r0.<org.jdesktop.swingx.JXPanel: boolean paintBorderInsets>;

        return $z0;
    }

    public void setPaintBorderInsets(boolean)
    {
        org.jdesktop.swingx.JXPanel r0;
        boolean $z0, z1, $z2;

        r0 := @this: org.jdesktop.swingx.JXPanel;

        z1 := @parameter0: boolean;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXPanel: boolean isPaintBorderInsets()>();

        r0.<org.jdesktop.swingx.JXPanel: boolean paintBorderInsets> = z1;

        $z2 = virtualinvoke r0.<org.jdesktop.swingx.JXPanel: boolean isPaintBorderInsets()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXPanel: void firePropertyChange(java.lang.String,boolean,boolean)>("paintBorderInsets", $z0, $z2);

        return;
    }

    public void paint(java.awt.Graphics)
    {
        java.awt.AlphaComposite $r4;
        java.awt.Graphics2D r1;
        java.awt.Composite $r2;
        java.awt.Graphics r0;
        float $f0;
        org.jdesktop.swingx.JXPanel r3;

        r3 := @this: org.jdesktop.swingx.JXPanel;

        r0 := @parameter0: java.awt.Graphics;

        r1 = (java.awt.Graphics2D) r0;

        $r2 = virtualinvoke r1.<java.awt.Graphics2D: java.awt.Composite getComposite()>();

        $f0 = virtualinvoke r3.<org.jdesktop.swingx.JXPanel: float getEffectiveAlpha()>();

        $r4 = staticinvoke <java.awt.AlphaComposite: java.awt.AlphaComposite getInstance(int,float)>(3, $f0);

        virtualinvoke r1.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($r4);

        specialinvoke r3.<javax.swing.JPanel: void paint(java.awt.Graphics)>(r1);

        virtualinvoke r1.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($r2);

        return;
    }

    protected void paintComponent(java.awt.Graphics)
    {
        java.lang.Throwable $r8;
        java.awt.Insets $r4;
        java.awt.Graphics2D $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        boolean $z0, $z1;
        org.jdesktop.swingx.painter.Painter $r1, $r5, $r6;
        org.jdesktop.swingx.JXPanel r0;
        java.awt.Graphics r2, $r3;

        r0 := @this: org.jdesktop.swingx.JXPanel;

        r2 := @parameter0: java.awt.Graphics;

        $r1 = r0.<org.jdesktop.swingx.JXPanel: org.jdesktop.swingx.painter.Painter backgroundPainter>;

        if $r1 == null goto label8;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXPanel: boolean isOpaque()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<javax.swing.JPanel: void paintComponent(java.awt.Graphics)>(r2);

     label1:
        $r3 = virtualinvoke r2.<java.awt.Graphics: java.awt.Graphics create()>();

        $r7 = (java.awt.Graphics2D) $r3;

     label2:
        $z1 = virtualinvoke r0.<org.jdesktop.swingx.JXPanel: boolean isPaintBorderInsets()>();

        if $z1 == 0 goto label3;

        $r6 = r0.<org.jdesktop.swingx.JXPanel: org.jdesktop.swingx.painter.Painter backgroundPainter>;

        $i12 = virtualinvoke r0.<org.jdesktop.swingx.JXPanel: int getWidth()>();

        $i13 = virtualinvoke r0.<org.jdesktop.swingx.JXPanel: int getHeight()>();

        interfaceinvoke $r6.<org.jdesktop.swingx.painter.Painter: void paint(java.awt.Graphics2D,java.lang.Object,int,int)>($r7, r0, $i12, $i13);

        goto label4;

     label3:
        $r4 = virtualinvoke r0.<org.jdesktop.swingx.JXPanel: java.awt.Insets getInsets()>();

        $i1 = $r4.<java.awt.Insets: int left>;

        $i0 = $r4.<java.awt.Insets: int top>;

        virtualinvoke $r7.<java.awt.Graphics2D: void translate(int,int)>($i1, $i0);

        $r5 = r0.<org.jdesktop.swingx.JXPanel: org.jdesktop.swingx.painter.Painter backgroundPainter>;

        $i2 = virtualinvoke r0.<org.jdesktop.swingx.JXPanel: int getWidth()>();

        $i3 = $r4.<java.awt.Insets: int left>;

        $i5 = $i2 - $i3;

        $i4 = $r4.<java.awt.Insets: int right>;

        $i6 = $i5 - $i4;

        $i7 = virtualinvoke r0.<org.jdesktop.swingx.JXPanel: int getHeight()>();

        $i8 = $r4.<java.awt.Insets: int top>;

        $i10 = $i7 - $i8;

        $i9 = $r4.<java.awt.Insets: int bottom>;

        $i11 = $i10 - $i9;

        interfaceinvoke $r5.<org.jdesktop.swingx.painter.Painter: void paint(java.awt.Graphics2D,java.lang.Object,int,int)>($r7, r0, $i6, $i11);

     label4:
        virtualinvoke $r7.<java.awt.Graphics2D: void dispose()>();

        goto label7;

     label5:
        $r8 := @caughtexception;

     label6:
        virtualinvoke $r7.<java.awt.Graphics2D: void dispose()>();

        throw $r8;

     label7:
        goto label9;

     label8:
        specialinvoke r0.<javax.swing.JPanel: void paintComponent(java.awt.Graphics)>(r2);

     label9:
        return;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/jdesktop/swingx/JXPanel;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.jdesktop.swingx.JXPanel: boolean $assertionsDisabled> = $z1;

        return;
    }
}
