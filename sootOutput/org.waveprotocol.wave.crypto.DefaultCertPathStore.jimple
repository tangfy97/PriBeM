public class org.waveprotocol.wave.crypto.DefaultCertPathStore extends java.lang.Object implements org.waveprotocol.wave.crypto.CertPathStore
{
    private final java.util.concurrent.ConcurrentMap map;

    public void <init>()
    {
        org.waveprotocol.wave.crypto.DefaultCertPathStore r0;
        com.google.common.collect.MapMaker $r1;
        java.util.concurrent.ConcurrentMap $r2;

        r0 := @this: org.waveprotocol.wave.crypto.DefaultCertPathStore;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new com.google.common.collect.MapMaker;

        specialinvoke $r1.<com.google.common.collect.MapMaker: void <init>()>();

        $r2 = virtualinvoke $r1.<com.google.common.collect.MapMaker: java.util.concurrent.ConcurrentMap makeMap()>();

        r0.<org.waveprotocol.wave.crypto.DefaultCertPathStore: java.util.concurrent.ConcurrentMap map> = $r2;

        return;
    }

    public org.waveprotocol.wave.crypto.SignerInfo getSignerInfo(byte[])
    {
        org.waveprotocol.wave.crypto.DefaultCertPathStore r0;
        byte[] r1;
        java.lang.Object $r4;
        org.waveprotocol.wave.crypto.SignerInfo $r5;
        java.nio.ByteBuffer $r3;
        java.util.concurrent.ConcurrentMap $r2;

        r0 := @this: org.waveprotocol.wave.crypto.DefaultCertPathStore;

        r1 := @parameter0: byte[];

        $r2 = r0.<org.waveprotocol.wave.crypto.DefaultCertPathStore: java.util.concurrent.ConcurrentMap map>;

        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r1);

        $r4 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r3);

        $r5 = (org.waveprotocol.wave.crypto.SignerInfo) $r4;

        return $r5;
    }

    public void putSignerInfo(org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo) throws org.waveprotocol.wave.crypto.SignatureException
    {
        org.waveprotocol.wave.crypto.DefaultCertPathStore r2;
        byte[] $r4;
        org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo r1;
        org.waveprotocol.wave.crypto.SignerInfo $r0;
        java.nio.ByteBuffer $r5;
        java.util.concurrent.ConcurrentMap $r3;

        r2 := @this: org.waveprotocol.wave.crypto.DefaultCertPathStore;

        r1 := @parameter0: org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo;

        $r0 = new org.waveprotocol.wave.crypto.SignerInfo;

        specialinvoke $r0.<org.waveprotocol.wave.crypto.SignerInfo: void <init>(org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo)>(r1);

        $r3 = r2.<org.waveprotocol.wave.crypto.DefaultCertPathStore: java.util.concurrent.ConcurrentMap map>;

        $r4 = virtualinvoke $r0.<org.waveprotocol.wave.crypto.SignerInfo: byte[] getSignerId()>();

        $r5 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r4);

        interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r0);

        return;
    }
}
