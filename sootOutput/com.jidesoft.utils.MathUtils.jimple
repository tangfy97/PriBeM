public final class com.jidesoft.utils.MathUtils extends java.lang.Object
{

    protected void <init>()
    {
        com.jidesoft.utils.MathUtils r0;

        r0 := @this: com.jidesoft.utils.MathUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static double sum(java.util.List)
    {
        java.util.List r0;
        java.util.Iterator $r1;
        java.lang.Object $r2;
        java.lang.Number r3;
        boolean $z0;
        double $d0, d1;

        r0 := @parameter0: java.util.List;

        d1 = 0.0;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Number) $r2;

        $d0 = virtualinvoke r3.<java.lang.Number: double doubleValue()>();

        d1 = d1 + $d0;

        goto label1;

     label2:
        return d1;
    }

    public static double mean(java.util.List)
    {
        java.util.List r0;
        int $i0;
        double $d0, $d1, $d2;

        r0 := @parameter0: java.util.List;

        $d0 = staticinvoke <com.jidesoft.utils.MathUtils: double sum(java.util.List)>(r0);

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $d1 = (double) $i0;

        $d2 = $d0 / $d1;

        return $d2;
    }

    public static double min(java.util.List)
    {
        java.util.Iterator $r1;
        java.util.List r0;
        byte $b0;
        int $i1;
        java.lang.Object $r2;
        java.lang.Number r3;
        boolean $z0;
        double $d0, d1;

        r0 := @parameter0: java.util.List;

        d1 = 2.147483647E9;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Number) $r2;

        $d0 = virtualinvoke r3.<java.lang.Number: double doubleValue()>();

        $b0 = $d0 cmpg d1;

        $i1 = (int) $b0;

        if $i1 >= 0 goto label2;

        d1 = $d0;

     label2:
        goto label1;

     label3:
        return d1;
    }

    public static double max(java.util.List)
    {
        java.util.Iterator $r1;
        java.util.List r0;
        byte $b0;
        int $i1;
        java.lang.Object $r2;
        java.lang.Number r3;
        boolean $z0;
        double $d0, d1;

        r0 := @parameter0: java.util.List;

        d1 = -2.147483648E9;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Number) $r2;

        $d0 = virtualinvoke r3.<java.lang.Number: double doubleValue()>();

        $b0 = $d0 cmpl d1;

        $i1 = (int) $b0;

        if $i1 <= 0 goto label2;

        d1 = $d0;

     label2:
        goto label1;

     label3:
        return d1;
    }

    public static double stddev(java.util.List, boolean)
    {
        java.util.List r0;
        int $i0;
        boolean z0;
        double $d0, d1;

        r0 := @parameter0: java.util.List;

        z0 := @parameter1: boolean;

        d1 = #NaN;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 <= 0 goto label2;

        if $i0 <= 1 goto label1;

        $d0 = staticinvoke <com.jidesoft.utils.MathUtils: double var(java.util.List,boolean)>(r0, z0);

        d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        goto label2;

     label1:
        d1 = 0.0;

     label2:
        return d1;
    }

    public static double var(java.util.List, boolean)
    {
        java.lang.Double $r5;
        java.util.ArrayList $r1;
        int $i0, $i1;
        java.lang.Number r4;
        double $d0, $d1, $d2, $d3, $d4, d5, $d6;
        boolean $z0, z1;
        java.util.Iterator $r2;
        java.util.List r0;
        java.lang.Object $r3;

        r0 := @parameter0: java.util.List;

        z1 := @parameter1: boolean;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        return #NaN;

     label1:
        if $i0 != 1 goto label2;

        return 0.0;

     label2:
        $d0 = staticinvoke <com.jidesoft.utils.MathUtils: double mean(java.util.List)>(r0);

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.Number) $r3;

        $d4 = virtualinvoke r4.<java.lang.Number: double doubleValue()>();

        d5 = $d4 - $d0;

        $d6 = staticinvoke <java.lang.Math: double pow(double,double)>(d5, 2.0);

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d6);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label3;

     label4:
        $d1 = staticinvoke <com.jidesoft.utils.MathUtils: double sum(java.util.List)>($r1);

        if z1 == 0 goto label5;

        $i1 = $i0 - 1;

        goto label6;

     label5:
        $i1 = $i0;

     label6:
        $d2 = (double) $i1;

        $d3 = $d1 / $d2;

        return $d3;
    }
}
