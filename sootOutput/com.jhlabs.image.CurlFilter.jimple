public class com.jhlabs.image.CurlFilter extends com.jhlabs.image.TransformFilter
{
    private float angle;
    private float transition;
    private float width;
    private float height;
    private float radius;

    public void <init>()
    {
        com.jhlabs.image.CurlFilter r0;

        r0 := @this: com.jhlabs.image.CurlFilter;

        specialinvoke r0.<com.jhlabs.image.TransformFilter: void <init>()>();

        r0.<com.jhlabs.image.CurlFilter: float angle> = 0.0F;

        r0.<com.jhlabs.image.CurlFilter: float transition> = 0.0F;

        virtualinvoke r0.<com.jhlabs.image.TransformFilter: void setEdgeAction(int)>(0);

        return;
    }

    public void setTransition(float)
    {
        float f0;
        com.jhlabs.image.CurlFilter r0;

        r0 := @this: com.jhlabs.image.CurlFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.CurlFilter: float transition> = f0;

        return;
    }

    public float getTransition()
    {
        float $f0;
        com.jhlabs.image.CurlFilter r0;

        r0 := @this: com.jhlabs.image.CurlFilter;

        $f0 = r0.<com.jhlabs.image.CurlFilter: float transition>;

        return $f0;
    }

    public void setAngle(float)
    {
        float f0;
        com.jhlabs.image.CurlFilter r0;

        r0 := @this: com.jhlabs.image.CurlFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.CurlFilter: float angle> = f0;

        return;
    }

    public float getAngle()
    {
        float $f0;
        com.jhlabs.image.CurlFilter r0;

        r0 := @this: com.jhlabs.image.CurlFilter;

        $f0 = r0.<com.jhlabs.image.CurlFilter: float angle>;

        return $f0;
    }

    public void setRadius(float)
    {
        float f0;
        com.jhlabs.image.CurlFilter r0;

        r0 := @this: com.jhlabs.image.CurlFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.CurlFilter: float radius> = f0;

        return;
    }

    public float getRadius()
    {
        float $f0;
        com.jhlabs.image.CurlFilter r0;

        r0 := @this: com.jhlabs.image.CurlFilter;

        $f0 = r0.<com.jhlabs.image.CurlFilter: float radius>;

        return $f0;
    }

    public java.awt.image.BufferedImage filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage)
    {
        byte $b53;
        com.jhlabs.image.CurlFilter r1;
        float[] r11;
        int[] $r5, r8;
        boolean $z0;
        java.awt.image.BufferedImage r0, $r14, $r16, r20;
        float $f0, $f1, $f2, $f3, $f4, $f5, f6, $f7, $f8, f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17;
        java.awt.Rectangle $r2, $r3, $r4, $r6, $r7, $r9, $r10, $r12, $r13, $r17, $r18;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7, i8, i9, i10, $i11, $i12, $i13, i14, i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, i27, i28, i29, i30, i31, i32, i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52;
        double $d0, $d1, $d2, $d3;
        java.awt.image.ColorModel $r15;
        java.awt.image.WritableRaster $r19;

        r1 := @this: com.jhlabs.image.CurlFilter;

        r0 := @parameter0: java.awt.image.BufferedImage;

        r20 := @parameter1: java.awt.image.BufferedImage;

        $i0 = virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>();

        $i2 = virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>();

        $f0 = (float) $i2;

        r1.<com.jhlabs.image.CurlFilter: float width> = $f0;

        $i3 = virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>();

        $f1 = (float) $i3;

        r1.<com.jhlabs.image.CurlFilter: float height> = $f1;

        virtualinvoke r0.<java.awt.image.BufferedImage: int getType()>();

        $r2 = new java.awt.Rectangle;

        specialinvoke $r2.<java.awt.Rectangle: void <init>(int,int,int,int)>(0, 0, $i0, $i1);

        r1.<com.jhlabs.image.TransformFilter: java.awt.Rectangle originalSpace> = $r2;

        $r3 = new java.awt.Rectangle;

        specialinvoke $r3.<java.awt.Rectangle: void <init>(int,int,int,int)>(0, 0, $i0, $i1);

        r1.<com.jhlabs.image.TransformFilter: java.awt.Rectangle transformedSpace> = $r3;

        $r4 = r1.<com.jhlabs.image.TransformFilter: java.awt.Rectangle transformedSpace>;

        virtualinvoke r1.<com.jhlabs.image.TransformFilter: void transformSpace(java.awt.Rectangle)>($r4);

        if r20 != null goto label01;

        $r15 = virtualinvoke r0.<java.awt.image.BufferedImage: java.awt.image.ColorModel getColorModel()>();

        $r16 = new java.awt.image.BufferedImage;

        $r17 = r1.<com.jhlabs.image.TransformFilter: java.awt.Rectangle transformedSpace>;

        $i26 = $r17.<java.awt.Rectangle: int width>;

        $r18 = r1.<com.jhlabs.image.TransformFilter: java.awt.Rectangle transformedSpace>;

        $i25 = $r18.<java.awt.Rectangle: int height>;

        $r19 = virtualinvoke $r15.<java.awt.image.ColorModel: java.awt.image.WritableRaster createCompatibleWritableRaster(int,int)>($i26, $i25);

        $z0 = virtualinvoke $r15.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        specialinvoke $r16.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>($r15, $r19, $z0, null);

        r20 = $r16;

     label01:
        virtualinvoke r20.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        $r5 = virtualinvoke r1.<com.jhlabs.image.AbstractBufferedImageOp: int[] getRGB(java.awt.image.BufferedImage,int,int,int,int,int[])>(r0, 0, 0, $i0, $i1, null);

        $i4 = r1.<com.jhlabs.image.TransformFilter: int interpolation>;

        if $i4 != 0 goto label02;

        $r13 = r1.<com.jhlabs.image.TransformFilter: java.awt.Rectangle transformedSpace>;

        $r14 = virtualinvoke r1.<com.jhlabs.image.TransformFilter: java.awt.image.BufferedImage filterPixelsNN(java.awt.image.BufferedImage,int,int,int[],java.awt.Rectangle)>(r20, $i0, $i1, $r5, $r13);

        return $r14;

     label02:
        i5 = $i0 - 1;

        i6 = $i1 - 1;

        $r6 = r1.<com.jhlabs.image.TransformFilter: java.awt.Rectangle transformedSpace>;

        i7 = $r6.<java.awt.Rectangle: int width>;

        $r7 = r1.<com.jhlabs.image.TransformFilter: java.awt.Rectangle transformedSpace>;

        i8 = $r7.<java.awt.Rectangle: int height>;

        r8 = newarray (int)[i7];

        $r9 = r1.<com.jhlabs.image.TransformFilter: java.awt.Rectangle transformedSpace>;

        i9 = $r9.<java.awt.Rectangle: int x>;

        $r10 = r1.<com.jhlabs.image.TransformFilter: java.awt.Rectangle transformedSpace>;

        i10 = $r10.<java.awt.Rectangle: int y>;

        r11 = newarray (float)[4];

        i27 = 0;

     label03:
        if i27 >= i8 goto label10;

        i28 = 0;

     label04:
        if i28 >= i7 goto label09;

        $i13 = i9 + i28;

        $i12 = i10 + i27;

        virtualinvoke r1.<com.jhlabs.image.CurlFilter: void transformInverse(int,int,float[])>($i13, $i12, r11);

        $f2 = r11[0];

        $d0 = (double) $f2;

        $d1 = staticinvoke <java.lang.Math: double floor(double)>($d0);

        i14 = (int) $d1;

        $f3 = r11[1];

        $d2 = (double) $f3;

        $d3 = staticinvoke <java.lang.Math: double floor(double)>($d2);

        i15 = (int) $d3;

        $f5 = r11[0];

        $f4 = (float) i14;

        f6 = $f5 - $f4;

        $f8 = r11[1];

        $f7 = (float) i15;

        f9 = $f8 - $f7;

        if i14 < 0 goto label05;

        if i14 >= i5 goto label05;

        if i15 < 0 goto label05;

        if i15 >= i6 goto label05;

        $i20 = $i0 * i15;

        i29 = $i20 + i14;

        i30 = $r5[i29];

        $i21 = i29 + 1;

        i31 = $r5[$i21];

        $i22 = i29 + $i0;

        i32 = $r5[$i22];

        $i23 = i29 + $i0;

        $i24 = $i23 + 1;

        i33 = $r5[$i24];

        goto label06;

     label05:
        i30 = specialinvoke r1.<com.jhlabs.image.CurlFilter: int getPixel(int[],int,int,int,int)>($r5, i14, i15, $i0, $i1);

        $i34 = i14 + 1;

        i31 = specialinvoke r1.<com.jhlabs.image.CurlFilter: int getPixel(int[],int,int,int,int)>($r5, $i34, i15, $i0, $i1);

        $i35 = i15 + 1;

        i32 = specialinvoke r1.<com.jhlabs.image.CurlFilter: int getPixel(int[],int,int,int,int)>($r5, i14, $i35, $i0, $i1);

        $i36 = i14 + 1;

        $i37 = i15 + 1;

        i33 = specialinvoke r1.<com.jhlabs.image.CurlFilter: int getPixel(int[],int,int,int,int)>($r5, $i36, $i37, $i0, $i1);

     label06:
        $i38 = staticinvoke <com.jhlabs.image.ImageMath: int bilinearInterpolate(float,float,int,int,int,int)>(f6, f9, i30, i31, i32, i33);

        $i39 = $i38 >> 16;

        $i40 = $i39 & 255;

        $i41 = $i38 >> 8;

        $i42 = $i41 & 255;

        $i43 = $i38 & 255;

        $f10 = r11[2];

        $f11 = (float) $i40;

        $f12 = $f11 * $f10;

        $i44 = (int) $f12;

        $f13 = (float) $i42;

        $f14 = $f13 * $f10;

        $i45 = (int) $f14;

        $f15 = (float) $i43;

        $f16 = $f15 * $f10;

        $i46 = (int) $f16;

        $i47 = $i38 & -16777216;

        $i48 = $i44 << 16;

        $i49 = $i47 | $i48;

        $i50 = $i45 << 8;

        $i51 = $i49 | $i50;

        $i52 = $i51 | $i46;

        $f17 = r11[3];

        $b53 = $f17 cmpl 0.0F;

        if $b53 == 0 goto label07;

        $i16 = $i0 * i27;

        $i17 = $i16 + i28;

        $i18 = $r5[$i17];

        $i19 = staticinvoke <com.jhlabs.image.PixelUtils: int combinePixels(int,int,int)>($i52, $i18, 1);

        r8[i28] = $i19;

        goto label08;

     label07:
        r8[i28] = $i52;

     label08:
        i28 = i28 + 1;

        goto label04;

     label09:
        $r12 = r1.<com.jhlabs.image.TransformFilter: java.awt.Rectangle transformedSpace>;

        $i11 = $r12.<java.awt.Rectangle: int width>;

        virtualinvoke r1.<com.jhlabs.image.AbstractBufferedImageOp: void setRGB(java.awt.image.BufferedImage,int,int,int,int,int[])>(r20, 0, i27, $i11, 1, r8);

        i27 = i27 + 1;

        goto label03;

     label10:
        return r20;
    }

    private final int getPixel(int[], int, int, int, int)
    {
        int[] r1;
        int i0, i1, i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        com.jhlabs.image.CurlFilter r0;

        r0 := @this: com.jhlabs.image.CurlFilter;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i4 := @parameter3: int;

        i2 := @parameter4: int;

        if i0 < 0 goto label1;

        if i0 >= i4 goto label1;

        if i1 < 0 goto label1;

        if i1 < i2 goto label5;

     label1:
        $i19 = r0.<com.jhlabs.image.TransformFilter: int edgeAction>;

        tableswitch($i19)
        {
            case 0: goto label2;
            case 1: goto label4;
            case 2: goto label3;
            default: goto label2;
        };

     label2:
        return 0;

     label3:
        $i3 = staticinvoke <com.jhlabs.image.ImageMath: int mod(int,int)>(i1, i2);

        $i5 = $i3 * i4;

        $i6 = staticinvoke <com.jhlabs.image.ImageMath: int mod(int,int)>(i0, i4);

        $i7 = $i5 + $i6;

        $i8 = r1[$i7];

        return $i8;

     label4:
        $i9 = i2 - 1;

        $i10 = staticinvoke <com.jhlabs.image.ImageMath: int clamp(int,int,int)>(i1, 0, $i9);

        $i12 = $i10 * i4;

        $i11 = i4 - 1;

        $i13 = staticinvoke <com.jhlabs.image.ImageMath: int clamp(int,int,int)>(i0, 0, $i11);

        $i14 = $i12 + $i13;

        $i15 = r1[$i14];

        return $i15;

     label5:
        $i16 = i1 * i4;

        $i17 = $i16 + i0;

        $i18 = r1[$i17];

        return $i18;
    }

    protected void transformInverse(int, int, float[])
    {
        byte $b2, $b3, $b4, $b5, $b6, $b7, $b8, $b9, $b10;
        com.jhlabs.image.CurlFilter r0;
        float[] r1;
        boolean z0, z1, z2, $z3, $z4, $z5, $z7, $z8;
        float f0, $f1, f2, $f3, f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, f13, f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34, $f35, $f36, $f37, $f38, $f39, $f40, f41, f42, f43, $f44, $f45, $f46, $f47, f48, f49, f50, $f51, $f52, $f53;
        int i0, i1, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;

        r0 := @this: com.jhlabs.image.CurlFilter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: float[];

        f0 = r0.<com.jhlabs.image.CurlFilter: float transition>;

        f41 = (float) i0;

        f42 = (float) i1;

        $f1 = r0.<com.jhlabs.image.CurlFilter: float angle>;

        $d0 = (double) $f1;

        $d1 = staticinvoke <java.lang.Math: double sin(double)>($d0);

        f2 = (float) $d1;

        $f3 = r0.<com.jhlabs.image.CurlFilter: float angle>;

        $d2 = (double) $f3;

        $d3 = staticinvoke <java.lang.Math: double cos(double)>($d2);

        f4 = (float) $d3;

        $f6 = r0.<com.jhlabs.image.CurlFilter: float width>;

        $f5 = r0.<com.jhlabs.image.CurlFilter: float width>;

        $f10 = $f6 * $f5;

        $f8 = r0.<com.jhlabs.image.CurlFilter: float height>;

        $f7 = r0.<com.jhlabs.image.CurlFilter: float height>;

        $f9 = $f8 * $f7;

        $f11 = $f10 + $f9;

        $d4 = (double) $f11;

        $d5 = staticinvoke <java.lang.Math: double sqrt(double)>($d4);

        $f12 = (float) $d5;

        f43 = f0 * $f12;

        $b2 = f4 cmpg 0.0F;

        $i11 = (int) $b2;

        if $i11 >= 0 goto label01;

        $f44 = r0.<com.jhlabs.image.CurlFilter: float width>;

        goto label02;

     label01:
        $f44 = 0.0F;

     label02:
        f13 = $f44;

        $b3 = f2 cmpg 0.0F;

        $i12 = (int) $b3;

        if $i12 >= 0 goto label03;

        $f45 = r0.<com.jhlabs.image.CurlFilter: float height>;

        goto label04;

     label03:
        $f45 = 0.0F;

     label04:
        f14 = $f45;

        $f37 = f41 - f13;

        $f38 = f42 - $f45;

        $f16 = $f37 * f4;

        $f15 = $f38 * f2;

        $f39 = $f16 + $f15;

        $f17 = neg $f37;

        $f19 = $f17 * f2;

        $f18 = $f38 * f4;

        $f40 = $f19 + $f18;

        $b4 = $f39 cmpg f43;

        $i13 = (int) $b4;

        if $i13 >= 0 goto label05;

        $z3 = 1;

        goto label06;

     label05:
        $z3 = 0;

     label06:
        z0 = $z3;

        $f20 = f43 * 2.0F;

        $b5 = $f39 cmpl $f20;

        $i14 = (int) $b5;

        if $i14 <= 0 goto label07;

        $z4 = 1;

        goto label08;

     label07:
        $z4 = 0;

     label08:
        if z0 != 0 goto label09;

        if $z4 != 0 goto label09;

        $z5 = 1;

        goto label10;

     label09:
        $z5 = 0;

     label10:
        z1 = $z5;

        $f46 = f43 * 2.0F;

        $b10 = $f39 cmpl $f46;

        $i15 = (int) $b10;

        if $i15 <= 0 goto label11;

        $f47 = $f39;

        goto label12;

     label11:
        $f21 = 2.0F * f43;

        $f47 = $f21 - $f39;

     label12:
        f48 = $f47;

        $f23 = $f47 * f4;

        $f22 = $f40 * f2;

        $f33 = $f23 - $f22;

        $f25 = $f47 * f2;

        $f24 = $f40 * f4;

        $f34 = $f25 + $f24;

        $f35 = $f33 + f13;

        f49 = $f35;

        $f36 = $f34 + f14;

        f50 = $f36;

        $b6 = $f35 cmpg 0.0F;

        $i16 = (int) $b6;

        if $i16 < 0 goto label13;

        $b7 = $f36 cmpg 0.0F;

        $i17 = (int) $b7;

        if $i17 < 0 goto label13;

        $f31 = r0.<com.jhlabs.image.CurlFilter: float width>;

        $b8 = $f35 cmpl $f31;

        $i18 = (int) $b8;

        if $i18 >= 0 goto label13;

        $f32 = r0.<com.jhlabs.image.CurlFilter: float height>;

        $b9 = $f36 cmpl $f32;

        $i19 = (int) $b9;

        if $i19 < 0 goto label14;

     label13:
        $z8 = 1;

        $z7 = 1;

        goto label15;

     label14:
        $z8 = 0;

        $z7 = 0;

     label15:
        z2 = $z7;

        if $z8 == 0 goto label16;

        if z1 == 0 goto label16;

        f49 = (float) i0;

        f50 = (float) i1;

     label16:
        if z2 != 0 goto label17;

        if z1 == 0 goto label17;

        $f27 = f48 - f43;

        $f26 = r0.<com.jhlabs.image.CurlFilter: float radius>;

        $f28 = $f27 / $f26;

        $d6 = (double) $f28;

        $d7 = staticinvoke <java.lang.Math: double exp(double)>($d6);

        $d8 = staticinvoke <java.lang.Math: double cos(double)>($d7);

        $f29 = (float) $d8;

        $f30 = 1.0F - $f29;

        $f51 = 1.9F * $f30;

        goto label18;

     label17:
        $f51 = 0.0F;

     label18:
        $f52 = 1.0F - $f51;

        r1[2] = $f52;

        if z0 == 0 goto label19;

        r1[1] = -1.0F;

        r1[0] = -1.0F;

        goto label20;

     label19:
        r1[0] = f49;

        r1[1] = f50;

     label20:
        if z2 != 0 goto label21;

        if z1 == 0 goto label21;

        $f53 = 1.0F;

        goto label22;

     label21:
        $f53 = 0.0F;

     label22:
        r1[3] = $f53;

        return;
    }

    public java.lang.String toString()
    {
        com.jhlabs.image.CurlFilter r0;

        r0 := @this: com.jhlabs.image.CurlFilter;

        return "Distort/Curl...";
    }
}
