public class org.apache.tika.parser.DefaultParser extends org.apache.tika.parser.CompositeParser
{
    private static final long serialVersionUID;
    private final transient org.apache.tika.config.ServiceLoader loader;

    private static java.util.List getDefaultParsers(org.apache.tika.config.ServiceLoader)
    {
        org.apache.tika.config.ServiceLoader r0;
        java.util.List $r1;
        org.apache.tika.parser.DefaultParser$1 $r2;

        r0 := @parameter0: org.apache.tika.config.ServiceLoader;

        $r1 = virtualinvoke r0.<org.apache.tika.config.ServiceLoader: java.util.List loadStaticServiceProviders(java.lang.Class)>(class "Lorg/apache/tika/parser/Parser;");

        $r2 = new org.apache.tika.parser.DefaultParser$1;

        specialinvoke $r2.<org.apache.tika.parser.DefaultParser$1: void <init>()>();

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r1, $r2);

        return $r1;
    }

    public void <init>(org.apache.tika.mime.MediaTypeRegistry, org.apache.tika.config.ServiceLoader)
    {
        org.apache.tika.config.ServiceLoader r2;
        java.util.List $r3;
        org.apache.tika.mime.MediaTypeRegistry r1;
        org.apache.tika.parser.DefaultParser r0;

        r0 := @this: org.apache.tika.parser.DefaultParser;

        r1 := @parameter0: org.apache.tika.mime.MediaTypeRegistry;

        r2 := @parameter1: org.apache.tika.config.ServiceLoader;

        $r3 = staticinvoke <org.apache.tika.parser.DefaultParser: java.util.List getDefaultParsers(org.apache.tika.config.ServiceLoader)>(r2);

        specialinvoke r0.<org.apache.tika.parser.CompositeParser: void <init>(org.apache.tika.mime.MediaTypeRegistry,java.util.List)>(r1, $r3);

        r0.<org.apache.tika.parser.DefaultParser: org.apache.tika.config.ServiceLoader loader> = r2;

        return;
    }

    public void <init>(org.apache.tika.mime.MediaTypeRegistry, java.lang.ClassLoader)
    {
        org.apache.tika.config.ServiceLoader $r2;
        org.apache.tika.mime.MediaTypeRegistry r1;
        org.apache.tika.parser.DefaultParser r0;
        java.lang.ClassLoader r3;

        r0 := @this: org.apache.tika.parser.DefaultParser;

        r1 := @parameter0: org.apache.tika.mime.MediaTypeRegistry;

        r3 := @parameter1: java.lang.ClassLoader;

        $r2 = new org.apache.tika.config.ServiceLoader;

        specialinvoke $r2.<org.apache.tika.config.ServiceLoader: void <init>(java.lang.ClassLoader)>(r3);

        specialinvoke r0.<org.apache.tika.parser.DefaultParser: void <init>(org.apache.tika.mime.MediaTypeRegistry,org.apache.tika.config.ServiceLoader)>(r1, $r2);

        return;
    }

    public void <init>(java.lang.ClassLoader)
    {
        org.apache.tika.config.ServiceLoader $r2;
        org.apache.tika.mime.MediaTypeRegistry $r1;
        org.apache.tika.parser.DefaultParser r0;
        java.lang.ClassLoader r3;

        r0 := @this: org.apache.tika.parser.DefaultParser;

        r3 := @parameter0: java.lang.ClassLoader;

        $r1 = staticinvoke <org.apache.tika.mime.MediaTypeRegistry: org.apache.tika.mime.MediaTypeRegistry getDefaultRegistry()>();

        $r2 = new org.apache.tika.config.ServiceLoader;

        specialinvoke $r2.<org.apache.tika.config.ServiceLoader: void <init>(java.lang.ClassLoader)>(r3);

        specialinvoke r0.<org.apache.tika.parser.DefaultParser: void <init>(org.apache.tika.mime.MediaTypeRegistry,org.apache.tika.config.ServiceLoader)>($r1, $r2);

        return;
    }

    public void <init>(org.apache.tika.mime.MediaTypeRegistry)
    {
        org.apache.tika.parser.DefaultParser r0;
        org.apache.tika.config.ServiceLoader $r2;
        org.apache.tika.mime.MediaTypeRegistry r1;

        r0 := @this: org.apache.tika.parser.DefaultParser;

        r1 := @parameter0: org.apache.tika.mime.MediaTypeRegistry;

        $r2 = new org.apache.tika.config.ServiceLoader;

        specialinvoke $r2.<org.apache.tika.config.ServiceLoader: void <init>()>();

        specialinvoke r0.<org.apache.tika.parser.DefaultParser: void <init>(org.apache.tika.mime.MediaTypeRegistry,org.apache.tika.config.ServiceLoader)>(r1, $r2);

        return;
    }

    public void <init>()
    {
        org.apache.tika.parser.DefaultParser r0;
        org.apache.tika.mime.MediaTypeRegistry $r1;

        r0 := @this: org.apache.tika.parser.DefaultParser;

        $r1 = staticinvoke <org.apache.tika.mime.MediaTypeRegistry: org.apache.tika.mime.MediaTypeRegistry getDefaultRegistry()>();

        specialinvoke r0.<org.apache.tika.parser.DefaultParser: void <init>(org.apache.tika.mime.MediaTypeRegistry)>($r1);

        return;
    }

    public java.util.Map getParsers(org.apache.tika.parser.ParseContext)
    {
        org.apache.tika.config.ServiceLoader $r3, $r5;
        org.apache.tika.parser.Parser r9;
        org.apache.tika.mime.MediaTypeRegistry $r4;
        org.apache.tika.mime.MediaType r13, $r14;
        java.util.Map $r2;
        boolean $z0, $z1;
        java.util.Iterator $r7, $r11;
        java.util.Set $r10;
        java.util.List $r6;
        org.apache.tika.parser.ParseContext r1;
        org.apache.tika.parser.DefaultParser r0;
        java.lang.Object $r8, $r12;

        r0 := @this: org.apache.tika.parser.DefaultParser;

        r1 := @parameter0: org.apache.tika.parser.ParseContext;

        $r2 = specialinvoke r0.<org.apache.tika.parser.CompositeParser: java.util.Map getParsers(org.apache.tika.parser.ParseContext)>(r1);

        $r3 = r0.<org.apache.tika.parser.DefaultParser: org.apache.tika.config.ServiceLoader loader>;

        if $r3 == null goto label4;

        $r4 = virtualinvoke r0.<org.apache.tika.parser.DefaultParser: org.apache.tika.mime.MediaTypeRegistry getMediaTypeRegistry()>();

        $r5 = r0.<org.apache.tika.parser.DefaultParser: org.apache.tika.config.ServiceLoader loader>;

        $r6 = virtualinvoke $r5.<org.apache.tika.config.ServiceLoader: java.util.List loadDynamicServiceProviders(java.lang.Class)>(class "Lorg/apache/tika/parser/Parser;");

        staticinvoke <java.util.Collections: void reverse(java.util.List)>($r6);

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.apache.tika.parser.Parser) $r8;

        $r10 = interfaceinvoke r9.<org.apache.tika.parser.Parser: java.util.Set getSupportedTypes(org.apache.tika.parser.ParseContext)>(r1);

        $r11 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r13 = (org.apache.tika.mime.MediaType) $r12;

        $r14 = virtualinvoke $r4.<org.apache.tika.mime.MediaTypeRegistry: org.apache.tika.mime.MediaType normalize(org.apache.tika.mime.MediaType)>(r13);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, r9);

        goto label2;

     label3:
        goto label1;

     label4:
        return $r2;
    }

    public static void <clinit>()
    {
        <org.apache.tika.parser.DefaultParser: long serialVersionUID> = 3612324825403757520L;

        return;
    }
}
