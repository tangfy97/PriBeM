public class org.eclipse.jetty.util.ssl.SslContextFactory extends org.eclipse.jetty.util.component.AbstractLifeCycle
{
    public static final javax.net.ssl.TrustManager[] TRUST_ALL_CERTS;
    private static final org.eclipse.jetty.util.log.Logger LOG;
    public static final java.lang.String DEFAULT_KEYMANAGERFACTORY_ALGORITHM;
    public static final java.lang.String DEFAULT_TRUSTMANAGERFACTORY_ALGORITHM;
    public static final java.lang.String DEFAULT_KEYSTORE_PATH;
    public static final java.lang.String KEYPASSWORD_PROPERTY;
    public static final java.lang.String PASSWORD_PROPERTY;
    private final java.util.Set _excludeProtocols;
    private java.util.Set _includeProtocols;
    private final java.util.Set _excludeCipherSuites;
    private java.util.Set _includeCipherSuites;
    private java.lang.String _keyStorePath;
    private java.lang.String _keyStoreProvider;
    private java.lang.String _keyStoreType;
    private java.io.InputStream _keyStoreInputStream;
    private java.lang.String _certAlias;
    private java.lang.String _trustStorePath;
    private java.lang.String _trustStoreProvider;
    private java.lang.String _trustStoreType;
    private java.io.InputStream _trustStoreInputStream;
    private boolean _needClientAuth;
    private boolean _wantClientAuth;
    private boolean _allowRenegotiate;
    private transient org.eclipse.jetty.util.security.Password _keyStorePassword;
    private transient org.eclipse.jetty.util.security.Password _keyManagerPassword;
    private transient org.eclipse.jetty.util.security.Password _trustStorePassword;
    private java.lang.String _sslProvider;
    private java.lang.String _sslProtocol;
    private java.lang.String _secureRandomAlgorithm;
    private java.lang.String _keyManagerFactoryAlgorithm;
    private java.lang.String _trustManagerFactoryAlgorithm;
    private boolean _validateCerts;
    private boolean _validatePeerCerts;
    private int _maxCertPathLength;
    private java.lang.String _crlPath;
    private boolean _enableCRLDP;
    private boolean _enableOCSP;
    private java.lang.String _ocspResponderURL;
    private java.security.KeyStore _keyStore;
    private java.security.KeyStore _trustStore;
    private boolean _sessionCachingEnabled;
    private int _sslSessionCacheSize;
    private int _sslSessionTimeout;
    private javax.net.ssl.SSLContext _context;
    private boolean _trustAll;

    public void <init>()
    {
        org.eclipse.jetty.util.ssl.SslContextFactory r0;
        int $i1;
        java.lang.String $r3, $r4;
        java.util.LinkedHashSet $r5, $r6;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        specialinvoke r0.<org.eclipse.jetty.util.component.AbstractLifeCycle: void <init>()>();

        $r5 = new java.util.LinkedHashSet;

        specialinvoke $r5.<java.util.LinkedHashSet: void <init>()>();

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.util.Set _excludeProtocols> = $r5;

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.util.Set _includeProtocols> = null;

        $r6 = new java.util.LinkedHashSet;

        specialinvoke $r6.<java.util.LinkedHashSet: void <init>()>();

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.util.Set _excludeCipherSuites> = $r6;

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.util.Set _includeCipherSuites> = null;

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _keyStoreType> = "JKS";

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _trustStoreType> = "JKS";

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean _needClientAuth> = 0;

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean _wantClientAuth> = 0;

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean _allowRenegotiate> = 1;

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _sslProtocol> = "TLS";

        $r3 = <org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String DEFAULT_KEYMANAGERFACTORY_ALGORITHM>;

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _keyManagerFactoryAlgorithm> = $r3;

        $r4 = <org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String DEFAULT_TRUSTMANAGERFACTORY_ALGORITHM>;

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _trustManagerFactoryAlgorithm> = $r4;

        $i1 = (int) -1;

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: int _maxCertPathLength> = $i1;

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean _enableCRLDP> = 0;

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean _enableOCSP> = 0;

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean _sessionCachingEnabled> = 1;

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean _trustAll> = 1;

        return;
    }

    public void <init>(boolean)
    {
        org.eclipse.jetty.util.ssl.SslContextFactory r0;
        int $i1;
        java.lang.String $r3, $r4;
        java.util.LinkedHashSet $r5, $r6;
        boolean z0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.eclipse.jetty.util.component.AbstractLifeCycle: void <init>()>();

        $r5 = new java.util.LinkedHashSet;

        specialinvoke $r5.<java.util.LinkedHashSet: void <init>()>();

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.util.Set _excludeProtocols> = $r5;

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.util.Set _includeProtocols> = null;

        $r6 = new java.util.LinkedHashSet;

        specialinvoke $r6.<java.util.LinkedHashSet: void <init>()>();

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.util.Set _excludeCipherSuites> = $r6;

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.util.Set _includeCipherSuites> = null;

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _keyStoreType> = "JKS";

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _trustStoreType> = "JKS";

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean _needClientAuth> = 0;

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean _wantClientAuth> = 0;

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean _allowRenegotiate> = 1;

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _sslProtocol> = "TLS";

        $r3 = <org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String DEFAULT_KEYMANAGERFACTORY_ALGORITHM>;

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _keyManagerFactoryAlgorithm> = $r3;

        $r4 = <org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String DEFAULT_TRUSTMANAGERFACTORY_ALGORITHM>;

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _trustManagerFactoryAlgorithm> = $r4;

        $i1 = (int) -1;

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: int _maxCertPathLength> = $i1;

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean _enableCRLDP> = 0;

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean _enableOCSP> = 0;

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean _sessionCachingEnabled> = 1;

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean _trustAll> = z0;

        return;
    }

    public void <init>(java.lang.String)
    {
        org.eclipse.jetty.util.ssl.SslContextFactory r0;
        int $i1;
        java.lang.String $r3, $r4, r5;
        java.util.LinkedHashSet $r6, $r7;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        r5 := @parameter0: java.lang.String;

        specialinvoke r0.<org.eclipse.jetty.util.component.AbstractLifeCycle: void <init>()>();

        $r6 = new java.util.LinkedHashSet;

        specialinvoke $r6.<java.util.LinkedHashSet: void <init>()>();

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.util.Set _excludeProtocols> = $r6;

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.util.Set _includeProtocols> = null;

        $r7 = new java.util.LinkedHashSet;

        specialinvoke $r7.<java.util.LinkedHashSet: void <init>()>();

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.util.Set _excludeCipherSuites> = $r7;

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.util.Set _includeCipherSuites> = null;

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _keyStoreType> = "JKS";

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _trustStoreType> = "JKS";

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean _needClientAuth> = 0;

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean _wantClientAuth> = 0;

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean _allowRenegotiate> = 1;

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _sslProtocol> = "TLS";

        $r3 = <org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String DEFAULT_KEYMANAGERFACTORY_ALGORITHM>;

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _keyManagerFactoryAlgorithm> = $r3;

        $r4 = <org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String DEFAULT_TRUSTMANAGERFACTORY_ALGORITHM>;

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _trustManagerFactoryAlgorithm> = $r4;

        $i1 = (int) -1;

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: int _maxCertPathLength> = $i1;

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean _enableCRLDP> = 0;

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean _enableOCSP> = 0;

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean _sessionCachingEnabled> = 1;

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _keyStorePath> = r5;

        return;
    }

    protected void doStart() throws java.lang.Exception
    {
        javax.net.ssl.SSLContext $r1, $r8, $r49, $r50, $r67;
        java.util.Enumeration $r38;
        java.security.SecureRandom r4, $r54, $r66;
        java.lang.Exception $r28;
        java.lang.StringBuilder $r29, $r30, $r32, $r33, $r35, $r36;
        java.lang.Object[] $r10, $r17, $r51;
        java.util.ArrayList $r39;
        java.lang.String $r3, $r5, $r6, $r7, $r23, $r24, $r25, $r27, $r31, $r34, $r37, $r42, $r45, $r46, $r47, $r48, $r57, $r59, $r60, $r62, $r65;
        org.eclipse.jetty.util.security.CertificateValidator $r26;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Collection $r58;
        java.security.KeyStore $r2, $r43, $r55, $r56;
        java.util.List $r13, $r15, $r20, $r22;
        java.security.cert.Certificate $r61;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;
        java.lang.String[] $r12, $r14, $r19, $r21;
        javax.net.ssl.SSLEngine $r9;
        int $i0, $i1;
        javax.net.ssl.TrustManager[] r53, $r64;
        java.lang.Object $r40;
        org.eclipse.jetty.util.log.Logger $r11, $r16, $r18, $r52;
        java.io.InputStream $r41, $r44;
        javax.net.ssl.KeyManager[] $r63;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        $r1 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: javax.net.ssl.SSLContext _context>;

        if $r1 != null goto label18;

        $r2 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.security.KeyStore _keyStore>;

        if $r2 != null goto label04;

        $r41 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.io.InputStream _keyStoreInputStream>;

        if $r41 != null goto label04;

        $r42 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _keyStorePath>;

        if $r42 != null goto label04;

        $r43 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.security.KeyStore _trustStore>;

        if $r43 != null goto label04;

        $r44 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.io.InputStream _trustStoreInputStream>;

        if $r44 != null goto label04;

        $r45 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _trustStorePath>;

        if $r45 != null goto label04;

        r53 = null;

        $z3 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean _trustAll>;

        if $z3 == 0 goto label01;

        $r52 = <org.eclipse.jetty.util.ssl.SslContextFactory: org.eclipse.jetty.util.log.Logger LOG>;

        $r51 = newarray (java.lang.Object)[0];

        interfaceinvoke $r52.<org.eclipse.jetty.util.log.Logger: void debug(java.lang.String,java.lang.Object[])>("No keystore or trust store configured.  ACCEPTING UNTRUSTED CERTIFICATES!!!!!", $r51);

        r53 = <org.eclipse.jetty.util.ssl.SslContextFactory: javax.net.ssl.TrustManager[] TRUST_ALL_CERTS>;

     label01:
        $r46 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _secureRandomAlgorithm>;

        if $r46 != null goto label02;

        $r54 = null;

        goto label03;

     label02:
        $r47 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _secureRandomAlgorithm>;

        $r54 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>($r47);

     label03:
        $r48 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _sslProtocol>;

        $r49 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>($r48);

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: javax.net.ssl.SSLContext _context> = $r49;

        $r50 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: javax.net.ssl.SSLContext _context>;

        virtualinvoke $r50.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(null, r53, $r54);

        goto label18;

     label04:
        virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: void checkKeyStore()>();

        $r55 = virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.security.KeyStore loadKeyStore()>();

        $r56 = virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.security.KeyStore loadTrustStore()>();

        $r57 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _crlPath>;

        $r58 = virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.util.Collection loadCRL(java.lang.String)>($r57);

        $z4 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean _validateCerts>;

        if $z4 == 0 goto label13;

        if $r55 == null goto label13;

        $r24 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _certAlias>;

        if $r24 != null goto label07;

        $r38 = virtualinvoke $r55.<java.security.KeyStore: java.util.Enumeration aliases()>();

        $r39 = staticinvoke <java.util.Collections: java.util.ArrayList list(java.util.Enumeration)>($r38);

        $i1 = interfaceinvoke $r39.<java.util.List: int size()>();

        if $i1 != 1 goto label05;

        $r40 = interfaceinvoke $r39.<java.util.List: java.lang.Object get(int)>(0);

        $r59 = (java.lang.String) $r40;

        goto label06;

     label05:
        $r59 = null;

     label06:
        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _certAlias> = $r59;

     label07:
        $r60 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _certAlias>;

        if $r60 != null goto label08;

        $r61 = null;

        goto label09;

     label08:
        $r25 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _certAlias>;

        $r61 = virtualinvoke $r55.<java.security.KeyStore: java.security.cert.Certificate getCertificate(java.lang.String)>($r25);

     label09:
        if $r61 != null goto label12;

        $r28 = new java.lang.Exception;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No certificate found in the keystore");

        $r31 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _certAlias>;

        if $r31 != null goto label10;

        $r62 = "";

        goto label11;

     label10:
        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for alias ");

        $r34 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _certAlias>;

        $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r62 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

     label11:
        $r36 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r62);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<java.lang.Exception: void <init>(java.lang.String)>($r37);

        throw $r28;

     label12:
        $r26 = new org.eclipse.jetty.util.security.CertificateValidator;

        specialinvoke $r26.<org.eclipse.jetty.util.security.CertificateValidator: void <init>(java.security.KeyStore,java.util.Collection)>($r56, $r58);

        $i0 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: int _maxCertPathLength>;

        virtualinvoke $r26.<org.eclipse.jetty.util.security.CertificateValidator: void setMaxCertPathLength(int)>($i0);

        $z1 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean _enableCRLDP>;

        virtualinvoke $r26.<org.eclipse.jetty.util.security.CertificateValidator: void setEnableCRLDP(boolean)>($z1);

        $z2 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean _enableOCSP>;

        virtualinvoke $r26.<org.eclipse.jetty.util.security.CertificateValidator: void setEnableOCSP(boolean)>($z2);

        $r27 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _ocspResponderURL>;

        virtualinvoke $r26.<org.eclipse.jetty.util.security.CertificateValidator: void setOcspResponderURL(java.lang.String)>($r27);

        virtualinvoke $r26.<org.eclipse.jetty.util.security.CertificateValidator: void validate(java.security.KeyStore,java.security.cert.Certificate)>($r55, $r61);

     label13:
        $r63 = virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: javax.net.ssl.KeyManager[] getKeyManagers(java.security.KeyStore)>($r55);

        $r64 = virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: javax.net.ssl.TrustManager[] getTrustManagers(java.security.KeyStore,java.util.Collection)>($r56, $r58);

        $r65 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _secureRandomAlgorithm>;

        if $r65 != null goto label14;

        $r66 = null;

        goto label15;

     label14:
        $r3 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _secureRandomAlgorithm>;

        $r66 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>($r3);

     label15:
        r4 = $r66;

        $r5 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _sslProvider>;

        if $r5 != null goto label16;

        $r23 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _sslProtocol>;

        $r67 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>($r23);

        goto label17;

     label16:
        $r7 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _sslProtocol>;

        $r6 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _sslProvider>;

        $r67 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.lang.String)>($r7, $r6);

     label17:
        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: javax.net.ssl.SSLContext _context> = $r67;

        $r8 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: javax.net.ssl.SSLContext _context>;

        virtualinvoke $r8.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r63, $r64, r4);

        $r9 = virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: javax.net.ssl.SSLEngine newSslEngine()>();

        $r11 = <org.eclipse.jetty.util.ssl.SslContextFactory: org.eclipse.jetty.util.log.Logger LOG>;

        $r10 = newarray (java.lang.Object)[2];

        $r12 = virtualinvoke $r9.<javax.net.ssl.SSLEngine: java.lang.String[] getEnabledProtocols()>();

        $r13 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r12);

        $r10[0] = $r13;

        $r14 = virtualinvoke $r9.<javax.net.ssl.SSLEngine: java.lang.String[] getSupportedProtocols()>();

        $r15 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r14);

        $r10[1] = $r15;

        interfaceinvoke $r11.<org.eclipse.jetty.util.log.Logger: void info(java.lang.String,java.lang.Object[])>("Enabled Protocols {} of {}", $r10);

        $r16 = <org.eclipse.jetty.util.ssl.SslContextFactory: org.eclipse.jetty.util.log.Logger LOG>;

        $z0 = interfaceinvoke $r16.<org.eclipse.jetty.util.log.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label18;

        $r18 = <org.eclipse.jetty.util.ssl.SslContextFactory: org.eclipse.jetty.util.log.Logger LOG>;

        $r17 = newarray (java.lang.Object)[2];

        $r19 = virtualinvoke $r9.<javax.net.ssl.SSLEngine: java.lang.String[] getEnabledCipherSuites()>();

        $r20 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r19);

        $r17[0] = $r20;

        $r21 = virtualinvoke $r9.<javax.net.ssl.SSLEngine: java.lang.String[] getSupportedCipherSuites()>();

        $r22 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r21);

        $r17[1] = $r22;

        interfaceinvoke $r18.<org.eclipse.jetty.util.log.Logger: void debug(java.lang.String,java.lang.Object[])>("Enabled Ciphers   {} of {}", $r17);

     label18:
        return;
    }

    public java.lang.String[] getExcludeProtocols()
    {
        java.lang.Object[] $r4;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;
        int $i0;
        java.util.Set $r1, $r2;
        java.lang.String[] $r3, $r5;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        $r2 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.util.Set _excludeProtocols>;

        $r1 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.util.Set _excludeProtocols>;

        $i0 = interfaceinvoke $r1.<java.util.Set: int size()>();

        $r3 = newarray (java.lang.String)[$i0];

        $r4 = interfaceinvoke $r2.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (java.lang.String[]) $r4;

        return $r5;
    }

    public transient void setExcludeProtocols(java.lang.String[])
    {
        java.util.List $r4;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;
        java.util.Set $r1, $r3;
        java.lang.String[] r2;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        r2 := @parameter0: java.lang.String[];

        virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: void checkNotStarted()>();

        $r1 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.util.Set _excludeProtocols>;

        interfaceinvoke $r1.<java.util.Set: void clear()>();

        $r3 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.util.Set _excludeProtocols>;

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r2);

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r4);

        return;
    }

    public transient void addExcludeProtocols(java.lang.String[])
    {
        java.util.List $r3;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;
        java.util.Set $r2;
        java.lang.String[] r1;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        r1 := @parameter0: java.lang.String[];

        virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: void checkNotStarted()>();

        $r2 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.util.Set _excludeProtocols>;

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        interfaceinvoke $r2.<java.util.Set: boolean addAll(java.util.Collection)>($r3);

        return;
    }

    public java.lang.String[] getIncludeProtocols()
    {
        java.lang.Object[] $r4;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;
        int $i0;
        java.util.Set $r1, $r2;
        java.lang.String[] $r3, $r5;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        $r2 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.util.Set _includeProtocols>;

        $r1 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.util.Set _includeProtocols>;

        $i0 = interfaceinvoke $r1.<java.util.Set: int size()>();

        $r3 = newarray (java.lang.String)[$i0];

        $r4 = interfaceinvoke $r2.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (java.lang.String[]) $r4;

        return $r5;
    }

    public transient void setIncludeProtocols(java.lang.String[])
    {
        java.util.List $r3;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;
        java.lang.String[] r2;
        java.util.LinkedHashSet $r1;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        r2 := @parameter0: java.lang.String[];

        virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: void checkNotStarted()>();

        $r1 = new java.util.LinkedHashSet;

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r2);

        specialinvoke $r1.<java.util.LinkedHashSet: void <init>(java.util.Collection)>($r3);

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.util.Set _includeProtocols> = $r1;

        return;
    }

    public java.lang.String[] getExcludeCipherSuites()
    {
        java.lang.Object[] $r4;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;
        int $i0;
        java.util.Set $r1, $r2;
        java.lang.String[] $r3, $r5;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        $r2 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.util.Set _excludeCipherSuites>;

        $r1 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.util.Set _excludeCipherSuites>;

        $i0 = interfaceinvoke $r1.<java.util.Set: int size()>();

        $r3 = newarray (java.lang.String)[$i0];

        $r4 = interfaceinvoke $r2.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (java.lang.String[]) $r4;

        return $r5;
    }

    public transient void setExcludeCipherSuites(java.lang.String[])
    {
        java.util.List $r4;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;
        java.util.Set $r1, $r3;
        java.lang.String[] r2;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        r2 := @parameter0: java.lang.String[];

        virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: void checkNotStarted()>();

        $r1 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.util.Set _excludeCipherSuites>;

        interfaceinvoke $r1.<java.util.Set: void clear()>();

        $r3 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.util.Set _excludeCipherSuites>;

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r2);

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r4);

        return;
    }

    public transient void addExcludeCipherSuites(java.lang.String[])
    {
        java.util.List $r3;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;
        java.util.Set $r2;
        java.lang.String[] r1;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        r1 := @parameter0: java.lang.String[];

        virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: void checkNotStarted()>();

        $r2 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.util.Set _excludeCipherSuites>;

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        interfaceinvoke $r2.<java.util.Set: boolean addAll(java.util.Collection)>($r3);

        return;
    }

    public java.lang.String[] getIncludeCipherSuites()
    {
        java.lang.Object[] $r4;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;
        int $i0;
        java.util.Set $r1, $r2;
        java.lang.String[] $r3, $r5;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        $r2 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.util.Set _includeCipherSuites>;

        $r1 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.util.Set _includeCipherSuites>;

        $i0 = interfaceinvoke $r1.<java.util.Set: int size()>();

        $r3 = newarray (java.lang.String)[$i0];

        $r4 = interfaceinvoke $r2.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (java.lang.String[]) $r4;

        return $r5;
    }

    public transient void setIncludeCipherSuites(java.lang.String[])
    {
        java.util.List $r3;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;
        java.lang.String[] r2;
        java.util.LinkedHashSet $r1;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        r2 := @parameter0: java.lang.String[];

        virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: void checkNotStarted()>();

        $r1 = new java.util.LinkedHashSet;

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r2);

        specialinvoke $r1.<java.util.LinkedHashSet: void <init>(java.util.Collection)>($r3);

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.util.Set _includeCipherSuites> = $r1;

        return;
    }

    public java.lang.String getKeyStorePath()
    {
        java.lang.String $r1;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        $r1 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _keyStorePath>;

        return $r1;
    }

    public java.lang.String getKeyStore()
    {
        java.lang.String $r1;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        $r1 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _keyStorePath>;

        return $r1;
    }

    public void setKeyStorePath(java.lang.String)
    {
        java.lang.String r1;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: void checkNotStarted()>();

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _keyStorePath> = r1;

        return;
    }

    public void setKeyStore(java.lang.String)
    {
        java.lang.String r1;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: void checkNotStarted()>();

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _keyStorePath> = r1;

        return;
    }

    public java.lang.String getKeyStoreProvider()
    {
        java.lang.String $r1;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        $r1 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _keyStoreProvider>;

        return $r1;
    }

    public void setKeyStoreProvider(java.lang.String)
    {
        java.lang.String r1;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: void checkNotStarted()>();

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _keyStoreProvider> = r1;

        return;
    }

    public java.lang.String getKeyStoreType()
    {
        java.lang.String $r1;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        $r1 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _keyStoreType>;

        return $r1;
    }

    public void setKeyStoreType(java.lang.String)
    {
        java.lang.String r1;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: void checkNotStarted()>();

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _keyStoreType> = r1;

        return;
    }

    public java.io.InputStream getKeyStoreInputStream()
    {
        org.eclipse.jetty.util.ssl.SslContextFactory r0;
        java.io.InputStream $r1;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: void checkKeyStore()>();

        $r1 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.io.InputStream _keyStoreInputStream>;

        return $r1;
    }

    public void setKeyStoreInputStream(java.io.InputStream)
    {
        org.eclipse.jetty.util.ssl.SslContextFactory r0;
        java.io.InputStream r1;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        r1 := @parameter0: java.io.InputStream;

        virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: void checkNotStarted()>();

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.io.InputStream _keyStoreInputStream> = r1;

        return;
    }

    public java.lang.String getCertAlias()
    {
        java.lang.String $r1;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        $r1 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _certAlias>;

        return $r1;
    }

    public void setCertAlias(java.lang.String)
    {
        java.lang.String r1;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: void checkNotStarted()>();

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _certAlias> = r1;

        return;
    }

    public java.lang.String getTrustStore()
    {
        java.lang.String $r1;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        $r1 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _trustStorePath>;

        return $r1;
    }

    public void setTrustStore(java.lang.String)
    {
        java.lang.String r1;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: void checkNotStarted()>();

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _trustStorePath> = r1;

        return;
    }

    public java.lang.String getTrustStoreProvider()
    {
        java.lang.String $r1;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        $r1 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _trustStoreProvider>;

        return $r1;
    }

    public void setTrustStoreProvider(java.lang.String)
    {
        java.lang.String r1;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: void checkNotStarted()>();

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _trustStoreProvider> = r1;

        return;
    }

    public java.lang.String getTrustStoreType()
    {
        java.lang.String $r1;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        $r1 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _trustStoreType>;

        return $r1;
    }

    public void setTrustStoreType(java.lang.String)
    {
        java.lang.String r1;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: void checkNotStarted()>();

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _trustStoreType> = r1;

        return;
    }

    public java.io.InputStream getTrustStoreInputStream()
    {
        org.eclipse.jetty.util.ssl.SslContextFactory r0;
        java.io.InputStream $r1;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: void checkKeyStore()>();

        $r1 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.io.InputStream _trustStoreInputStream>;

        return $r1;
    }

    public void setTrustStoreInputStream(java.io.InputStream)
    {
        org.eclipse.jetty.util.ssl.SslContextFactory r0;
        java.io.InputStream r1;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        r1 := @parameter0: java.io.InputStream;

        virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: void checkNotStarted()>();

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.io.InputStream _trustStoreInputStream> = r1;

        return;
    }

    public boolean getNeedClientAuth()
    {
        org.eclipse.jetty.util.ssl.SslContextFactory r0;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        $z0 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean _needClientAuth>;

        return $z0;
    }

    public void setNeedClientAuth(boolean)
    {
        org.eclipse.jetty.util.ssl.SslContextFactory r0;
        boolean z0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: void checkNotStarted()>();

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean _needClientAuth> = z0;

        return;
    }

    public boolean getWantClientAuth()
    {
        org.eclipse.jetty.util.ssl.SslContextFactory r0;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        $z0 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean _wantClientAuth>;

        return $z0;
    }

    public void setWantClientAuth(boolean)
    {
        org.eclipse.jetty.util.ssl.SslContextFactory r0;
        boolean z0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: void checkNotStarted()>();

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean _wantClientAuth> = z0;

        return;
    }

    public boolean getValidateCerts()
    {
        org.eclipse.jetty.util.ssl.SslContextFactory r0;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        $z0 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean _validateCerts>;

        return $z0;
    }

    public boolean isValidateCerts()
    {
        org.eclipse.jetty.util.ssl.SslContextFactory r0;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        $z0 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean _validateCerts>;

        return $z0;
    }

    public void setValidateCerts(boolean)
    {
        org.eclipse.jetty.util.ssl.SslContextFactory r0;
        boolean z0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: void checkNotStarted()>();

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean _validateCerts> = z0;

        return;
    }

    public boolean isValidatePeerCerts()
    {
        org.eclipse.jetty.util.ssl.SslContextFactory r0;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        $z0 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean _validatePeerCerts>;

        return $z0;
    }

    public void setValidatePeerCerts(boolean)
    {
        org.eclipse.jetty.util.ssl.SslContextFactory r0;
        boolean z0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: void checkNotStarted()>();

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean _validatePeerCerts> = z0;

        return;
    }

    public boolean isAllowRenegotiate()
    {
        org.eclipse.jetty.util.ssl.SslContextFactory r0;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        $z0 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean _allowRenegotiate>;

        return $z0;
    }

    public void setAllowRenegotiate(boolean)
    {
        org.eclipse.jetty.util.ssl.SslContextFactory r0;
        boolean z0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: void checkNotStarted()>();

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean _allowRenegotiate> = z0;

        return;
    }

    public void setKeyStorePassword(java.lang.String)
    {
        org.eclipse.jetty.util.security.Password $r2;
        java.lang.String r1;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: void checkNotStarted()>();

        $r2 = staticinvoke <org.eclipse.jetty.util.security.Password: org.eclipse.jetty.util.security.Password getPassword(java.lang.String,java.lang.String,java.lang.String)>("org.eclipse.jetty.ssl.password", r1, null);

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: org.eclipse.jetty.util.security.Password _keyStorePassword> = $r2;

        return;
    }

    public void setKeyManagerPassword(java.lang.String)
    {
        org.eclipse.jetty.util.security.Password $r2;
        java.lang.String r1;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: void checkNotStarted()>();

        $r2 = staticinvoke <org.eclipse.jetty.util.security.Password: org.eclipse.jetty.util.security.Password getPassword(java.lang.String,java.lang.String,java.lang.String)>("org.eclipse.jetty.ssl.keypassword", r1, null);

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: org.eclipse.jetty.util.security.Password _keyManagerPassword> = $r2;

        return;
    }

    public void setTrustStorePassword(java.lang.String)
    {
        org.eclipse.jetty.util.security.Password $r2;
        java.lang.String r1;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: void checkNotStarted()>();

        $r2 = staticinvoke <org.eclipse.jetty.util.security.Password: org.eclipse.jetty.util.security.Password getPassword(java.lang.String,java.lang.String,java.lang.String)>("org.eclipse.jetty.ssl.password", r1, null);

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: org.eclipse.jetty.util.security.Password _trustStorePassword> = $r2;

        return;
    }

    public java.lang.String getProvider()
    {
        java.lang.String $r1;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        $r1 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _sslProvider>;

        return $r1;
    }

    public void setProvider(java.lang.String)
    {
        java.lang.String r1;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: void checkNotStarted()>();

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _sslProvider> = r1;

        return;
    }

    public java.lang.String getProtocol()
    {
        java.lang.String $r1;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        $r1 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _sslProtocol>;

        return $r1;
    }

    public void setProtocol(java.lang.String)
    {
        java.lang.String r1;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: void checkNotStarted()>();

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _sslProtocol> = r1;

        return;
    }

    public java.lang.String getSecureRandomAlgorithm()
    {
        java.lang.String $r1;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        $r1 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _secureRandomAlgorithm>;

        return $r1;
    }

    public void setSecureRandomAlgorithm(java.lang.String)
    {
        java.lang.String r1;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: void checkNotStarted()>();

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _secureRandomAlgorithm> = r1;

        return;
    }

    public java.lang.String getSslKeyManagerFactoryAlgorithm()
    {
        java.lang.String $r1;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        $r1 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _keyManagerFactoryAlgorithm>;

        return $r1;
    }

    public void setSslKeyManagerFactoryAlgorithm(java.lang.String)
    {
        java.lang.String r1;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: void checkNotStarted()>();

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _keyManagerFactoryAlgorithm> = r1;

        return;
    }

    public java.lang.String getTrustManagerFactoryAlgorithm()
    {
        java.lang.String $r1;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        $r1 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _trustManagerFactoryAlgorithm>;

        return $r1;
    }

    public boolean isTrustAll()
    {
        org.eclipse.jetty.util.ssl.SslContextFactory r0;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        $z0 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean _trustAll>;

        return $z0;
    }

    public void setTrustAll(boolean)
    {
        org.eclipse.jetty.util.ssl.SslContextFactory r0;
        boolean z0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        z0 := @parameter0: boolean;

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean _trustAll> = z0;

        return;
    }

    public void setTrustManagerFactoryAlgorithm(java.lang.String)
    {
        java.lang.String r1;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: void checkNotStarted()>();

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _trustManagerFactoryAlgorithm> = r1;

        return;
    }

    public java.lang.String getCrlPath()
    {
        java.lang.String $r1;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        $r1 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _crlPath>;

        return $r1;
    }

    public void setCrlPath(java.lang.String)
    {
        java.lang.String r1;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: void checkNotStarted()>();

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _crlPath> = r1;

        return;
    }

    public int getMaxCertPathLength()
    {
        int $i0;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        $i0 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: int _maxCertPathLength>;

        return $i0;
    }

    public void setMaxCertPathLength(int)
    {
        int i0;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: void checkNotStarted()>();

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: int _maxCertPathLength> = i0;

        return;
    }

    public javax.net.ssl.SSLContext getSslContext()
    {
        java.lang.IllegalStateException $r2;
        javax.net.ssl.SSLContext $r1;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        $z0 = virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean isStarted()>();

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        $r3 = virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String getState()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        $r1 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: javax.net.ssl.SSLContext _context>;

        return $r1;
    }

    public void setSslContext(javax.net.ssl.SSLContext)
    {
        javax.net.ssl.SSLContext r1;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        r1 := @parameter0: javax.net.ssl.SSLContext;

        virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: void checkNotStarted()>();

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: javax.net.ssl.SSLContext _context> = r1;

        return;
    }

    protected java.security.KeyStore loadKeyStore() throws java.lang.Exception
    {
        org.eclipse.jetty.util.security.Password $r2, $r3;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;
        java.security.KeyStore $r1, $r8;
        java.lang.String $r5, $r6, $r7, $r9;
        java.io.InputStream $r4;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        $r1 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.security.KeyStore _keyStore>;

        if $r1 == null goto label1;

        $r8 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.security.KeyStore _keyStore>;

        goto label4;

     label1:
        $r4 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.io.InputStream _keyStoreInputStream>;

        $r5 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _keyStorePath>;

        $r6 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _keyStoreType>;

        $r7 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _keyStoreProvider>;

        $r2 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: org.eclipse.jetty.util.security.Password _keyStorePassword>;

        if $r2 != null goto label2;

        $r9 = null;

        goto label3;

     label2:
        $r3 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: org.eclipse.jetty.util.security.Password _keyStorePassword>;

        $r9 = virtualinvoke $r3.<org.eclipse.jetty.util.security.Password: java.lang.String toString()>();

     label3:
        $r8 = virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.security.KeyStore getKeyStore(java.io.InputStream,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r4, $r5, $r6, $r7, $r9);

     label4:
        return $r8;
    }

    protected java.security.KeyStore loadTrustStore() throws java.lang.Exception
    {
        org.eclipse.jetty.util.security.Password $r2, $r3;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;
        java.security.KeyStore $r1, $r8;
        java.lang.String $r5, $r6, $r7, $r9;
        java.io.InputStream $r4;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        $r1 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.security.KeyStore _trustStore>;

        if $r1 == null goto label1;

        $r8 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.security.KeyStore _trustStore>;

        goto label4;

     label1:
        $r4 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.io.InputStream _trustStoreInputStream>;

        $r5 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _trustStorePath>;

        $r6 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _trustStoreType>;

        $r7 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _trustStoreProvider>;

        $r2 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: org.eclipse.jetty.util.security.Password _trustStorePassword>;

        if $r2 != null goto label2;

        $r9 = null;

        goto label3;

     label2:
        $r3 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: org.eclipse.jetty.util.security.Password _trustStorePassword>;

        $r9 = virtualinvoke $r3.<org.eclipse.jetty.util.security.Password: java.lang.String toString()>();

     label3:
        $r8 = virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.security.KeyStore getKeyStore(java.io.InputStream,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r4, $r5, $r6, $r7, $r9);

     label4:
        return $r8;
    }

    protected java.security.KeyStore getKeyStore(java.io.InputStream, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.lang.Exception
    {
        org.eclipse.jetty.util.ssl.SslContextFactory r6;
        java.security.KeyStore $r5;
        java.lang.String r1, r2, r3, r4;
        java.io.InputStream r0;

        r6 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.String;

        $r5 = staticinvoke <org.eclipse.jetty.util.security.CertificateUtils: java.security.KeyStore getKeyStore(java.io.InputStream,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r0, r1, r2, r3, r4);

        return $r5;
    }

    protected java.util.Collection loadCRL(java.lang.String) throws java.lang.Exception
    {
        java.lang.String r0;
        org.eclipse.jetty.util.ssl.SslContextFactory r2;
        java.util.Collection $r1;

        r2 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.eclipse.jetty.util.security.CertificateUtils: java.util.Collection loadCRL(java.lang.String)>(r0);

        return $r1;
    }

    protected javax.net.ssl.KeyManager[] getKeyManagers(java.security.KeyStore) throws java.lang.Exception
    {
        org.eclipse.jetty.util.security.Password $r4, $r5, $r12, $r13;
        javax.net.ssl.X509KeyManager $r10;
        org.eclipse.jetty.util.ssl.SslContextFactory r1;
        org.eclipse.jetty.util.ssl.AliasedX509ExtendedKeyManager $r8;
        int $i0, i1;
        java.lang.String $r2, $r6, $r11, $r14, $r18;
        boolean $z0;
        javax.net.ssl.KeyManagerFactory $r3;
        java.security.KeyStore r0;
        javax.net.ssl.KeyManager $r7, $r9;
        char[] $r16;
        javax.net.ssl.KeyManager[] r15, $r17;

        r1 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        r0 := @parameter0: java.security.KeyStore;

        r15 = null;

        if r0 == null goto label6;

        $r2 = r1.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _keyManagerFactoryAlgorithm>;

        $r3 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>($r2);

        $r4 = r1.<org.eclipse.jetty.util.ssl.SslContextFactory: org.eclipse.jetty.util.security.Password _keyManagerPassword>;

        if $r4 != null goto label2;

        $r12 = r1.<org.eclipse.jetty.util.ssl.SslContextFactory: org.eclipse.jetty.util.security.Password _keyStorePassword>;

        if $r12 != null goto label1;

        $r16 = null;

        goto label3;

     label1:
        $r13 = r1.<org.eclipse.jetty.util.ssl.SslContextFactory: org.eclipse.jetty.util.security.Password _keyStorePassword>;

        $r14 = virtualinvoke $r13.<org.eclipse.jetty.util.security.Password: java.lang.String toString()>();

        $r16 = virtualinvoke $r14.<java.lang.String: char[] toCharArray()>();

        goto label3;

     label2:
        $r5 = r1.<org.eclipse.jetty.util.ssl.SslContextFactory: org.eclipse.jetty.util.security.Password _keyManagerPassword>;

        $r6 = virtualinvoke $r5.<org.eclipse.jetty.util.security.Password: java.lang.String toString()>();

        $r16 = virtualinvoke $r6.<java.lang.String: char[] toCharArray()>();

     label3:
        virtualinvoke $r3.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>(r0, $r16);

        $r17 = virtualinvoke $r3.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>();

        r15 = $r17;

        $r18 = r1.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _certAlias>;

        if $r18 == null goto label6;

        i1 = 0;

     label4:
        $i0 = lengthof $r17;

        if i1 >= $i0 goto label6;

        $r7 = $r17[i1];

        $z0 = $r7 instanceof javax.net.ssl.X509KeyManager;

        if $z0 == 0 goto label5;

        $r8 = new org.eclipse.jetty.util.ssl.AliasedX509ExtendedKeyManager;

        $r11 = r1.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _certAlias>;

        $r9 = $r17[i1];

        $r10 = (javax.net.ssl.X509KeyManager) $r9;

        specialinvoke $r8.<org.eclipse.jetty.util.ssl.AliasedX509ExtendedKeyManager: void <init>(java.lang.String,javax.net.ssl.X509KeyManager)>($r11, $r10);

        $r17[i1] = $r8;

     label5:
        i1 = i1 + 1;

        goto label4;

     label6:
        return r15;
    }

    protected javax.net.ssl.TrustManager[] getTrustManagers(java.security.KeyStore, java.util.Collection) throws java.lang.Exception
    {
        org.eclipse.jetty.util.ssl.SslContextFactory r1;
        javax.net.ssl.CertPathTrustManagerParameters $r15;
        int $i0;
        java.lang.String $r2, $r4, $r8, $r9, $r13;
        boolean $z0, $z1, $z2, $z3, $z4;
        javax.net.ssl.TrustManagerFactory $r3, $r14;
        java.security.cert.X509CertSelector $r6;
        java.util.Collection r7;
        java.security.KeyStore r0;
        java.security.cert.CollectionCertStoreParameters $r10;
        java.security.cert.PKIXBuilderParameters $r5;
        java.security.cert.CertStore $r11;
        javax.net.ssl.TrustManager[] r12;

        r1 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        r0 := @parameter0: java.security.KeyStore;

        r7 := @parameter1: java.util.Collection;

        r12 = null;

        if r0 == null goto label5;

        $z0 = r1.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean _validatePeerCerts>;

        if $z0 == 0 goto label4;

        $r4 = r1.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _trustManagerFactoryAlgorithm>;

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("PKIX");

        if $z1 == 0 goto label4;

        $r5 = new java.security.cert.PKIXBuilderParameters;

        $r6 = new java.security.cert.X509CertSelector;

        specialinvoke $r6.<java.security.cert.X509CertSelector: void <init>()>();

        specialinvoke $r5.<java.security.cert.PKIXBuilderParameters: void <init>(java.security.KeyStore,java.security.cert.CertSelector)>(r0, $r6);

        $i0 = r1.<org.eclipse.jetty.util.ssl.SslContextFactory: int _maxCertPathLength>;

        virtualinvoke $r5.<java.security.cert.PKIXBuilderParameters: void setMaxPathLength(int)>($i0);

        virtualinvoke $r5.<java.security.cert.PKIXBuilderParameters: void setRevocationEnabled(boolean)>(1);

        if r7 == null goto label1;

        $z3 = interfaceinvoke r7.<java.util.Collection: boolean isEmpty()>();

        if $z3 != 0 goto label1;

        $r10 = new java.security.cert.CollectionCertStoreParameters;

        specialinvoke $r10.<java.security.cert.CollectionCertStoreParameters: void <init>(java.util.Collection)>(r7);

        $r11 = staticinvoke <java.security.cert.CertStore: java.security.cert.CertStore getInstance(java.lang.String,java.security.cert.CertStoreParameters)>("Collection", $r10);

        virtualinvoke $r5.<java.security.cert.PKIXBuilderParameters: void addCertStore(java.security.cert.CertStore)>($r11);

     label1:
        $z4 = r1.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean _enableCRLDP>;

        if $z4 == 0 goto label2;

        staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>("com.sun.security.enableCRLDP", "true");

     label2:
        $z2 = r1.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean _enableOCSP>;

        if $z2 == 0 goto label3;

        staticinvoke <java.security.Security: void setProperty(java.lang.String,java.lang.String)>("ocsp.enable", "true");

        $r8 = r1.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _ocspResponderURL>;

        if $r8 == null goto label3;

        $r9 = r1.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _ocspResponderURL>;

        staticinvoke <java.security.Security: void setProperty(java.lang.String,java.lang.String)>("ocsp.responderURL", $r9);

     label3:
        $r13 = r1.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _trustManagerFactoryAlgorithm>;

        $r14 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r13);

        $r15 = new javax.net.ssl.CertPathTrustManagerParameters;

        specialinvoke $r15.<javax.net.ssl.CertPathTrustManagerParameters: void <init>(java.security.cert.CertPathParameters)>($r5);

        virtualinvoke $r14.<javax.net.ssl.TrustManagerFactory: void init(javax.net.ssl.ManagerFactoryParameters)>($r15);

        r12 = virtualinvoke $r14.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>();

        goto label5;

     label4:
        $r2 = r1.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _trustManagerFactoryAlgorithm>;

        $r3 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r2);

        virtualinvoke $r3.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>(r0);

        r12 = virtualinvoke $r3.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>();

     label5:
        return r12;
    }

    public void checkKeyStore()
    {
        org.eclipse.jetty.util.security.Password $r19;
        byte[] $r9, $r11;
        java.lang.IllegalStateException $r23, $r25;
        javax.net.ssl.SSLContext $r1;
        java.io.ByteArrayOutputStream $r5;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;
        java.io.ByteArrayInputStream $r8, $r10;
        java.lang.String $r13, $r15, $r17, $r18, $r20, $r22;
        java.security.KeyStore $r2, $r14, $r26;
        java.lang.Exception $r24;
        java.io.InputStream $r3, $r4, $r6, $r7, $r12, $r16, $r21, $r27;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        $r1 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: javax.net.ssl.SSLContext _context>;

        if $r1 == null goto label1;

        return;

     label1:
        $r2 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.security.KeyStore _keyStore>;

        if $r2 != null goto label2;

        $r21 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.io.InputStream _keyStoreInputStream>;

        if $r21 != null goto label2;

        $r22 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _keyStorePath>;

        if $r22 != null goto label2;

        $r23 = new java.lang.IllegalStateException;

        specialinvoke $r23.<java.lang.IllegalStateException: void <init>(java.lang.String)>("SSL doesn\'t have a valid keystore");

        throw $r23;

     label2:
        $r26 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.security.KeyStore _trustStore>;

        if $r26 != null goto label3;

        $r12 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.io.InputStream _trustStoreInputStream>;

        if $r12 != null goto label3;

        $r13 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _trustStorePath>;

        if $r13 != null goto label3;

        $r14 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.security.KeyStore _keyStore>;

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.security.KeyStore _trustStore> = $r14;

        $r15 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _keyStorePath>;

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _trustStorePath> = $r15;

        $r16 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.io.InputStream _keyStoreInputStream>;

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.io.InputStream _trustStoreInputStream> = $r16;

        $r17 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _keyStoreType>;

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _trustStoreType> = $r17;

        $r18 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _keyStoreProvider>;

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _trustStoreProvider> = $r18;

        $r19 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: org.eclipse.jetty.util.security.Password _keyStorePassword>;

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: org.eclipse.jetty.util.security.Password _trustStorePassword> = $r19;

        $r20 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _keyManagerFactoryAlgorithm>;

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _trustManagerFactoryAlgorithm> = $r20;

     label3:
        $r27 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.io.InputStream _keyStoreInputStream>;

        if $r27 == null goto label7;

        $r4 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.io.InputStream _keyStoreInputStream>;

        $r3 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.io.InputStream _trustStoreInputStream>;

        if $r4 != $r3 goto label7;

     label4:
        $r5 = new java.io.ByteArrayOutputStream;

        specialinvoke $r5.<java.io.ByteArrayOutputStream: void <init>()>();

        $r6 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.io.InputStream _keyStoreInputStream>;

        staticinvoke <org.eclipse.jetty.util.IO: void copy(java.io.InputStream,java.io.OutputStream)>($r6, $r5);

        $r7 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.io.InputStream _keyStoreInputStream>;

        virtualinvoke $r7.<java.io.InputStream: void close()>();

        $r8 = new java.io.ByteArrayInputStream;

        $r9 = virtualinvoke $r5.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r8.<java.io.ByteArrayInputStream: void <init>(byte[])>($r9);

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.io.InputStream _keyStoreInputStream> = $r8;

        $r10 = new java.io.ByteArrayInputStream;

        $r11 = virtualinvoke $r5.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r10.<java.io.ByteArrayInputStream: void <init>(byte[])>($r11);

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.io.InputStream _trustStoreInputStream> = $r10;

     label5:
        goto label7;

     label6:
        $r24 := @caughtexception;

        $r25 = new java.lang.IllegalStateException;

        specialinvoke $r25.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r24);

        throw $r25;

     label7:
        return;

        catch java.lang.Exception from label4 to label5 with label6;
    }

    public java.lang.String[] selectProtocols(java.lang.String[], java.lang.String[])
    {
        java.lang.Object[] $r7;
        org.eclipse.jetty.util.ssl.SslContextFactory r1;
        java.lang.String[] r3, $r6, $r8, r14;
        int $i0;
        java.lang.String r13;
        java.util.LinkedHashSet $r0;
        boolean $z0, $z1;
        java.util.Iterator $r11;
        java.util.Set $r2, $r5, $r9, $r10;
        java.util.List $r4, $r15;
        java.lang.Object $r12;

        r1 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        r3 := @parameter0: java.lang.String[];

        r14 := @parameter1: java.lang.String[];

        $r0 = new java.util.LinkedHashSet;

        specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>();

        $r2 = r1.<org.eclipse.jetty.util.ssl.SslContextFactory: java.util.Set _includeProtocols>;

        if $r2 == null goto label4;

        $r10 = r1.<org.eclipse.jetty.util.ssl.SslContextFactory: java.util.Set _includeProtocols>;

        $r11 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r13 = (java.lang.String) $r12;

        $r15 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r14);

        $z1 = interfaceinvoke $r15.<java.util.List: boolean contains(java.lang.Object)>(r13);

        if $z1 == 0 goto label2;

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>(r13);

     label2:
        goto label1;

     label3:
        goto label5;

     label4:
        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r3);

        interfaceinvoke $r0.<java.util.Set: boolean addAll(java.util.Collection)>($r4);

     label5:
        $r5 = r1.<org.eclipse.jetty.util.ssl.SslContextFactory: java.util.Set _excludeProtocols>;

        if $r5 == null goto label6;

        $r9 = r1.<org.eclipse.jetty.util.ssl.SslContextFactory: java.util.Set _excludeProtocols>;

        interfaceinvoke $r0.<java.util.Set: boolean removeAll(java.util.Collection)>($r9);

     label6:
        $i0 = interfaceinvoke $r0.<java.util.Set: int size()>();

        $r6 = newarray (java.lang.String)[$i0];

        $r7 = interfaceinvoke $r0.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r8 = (java.lang.String[]) $r7;

        return $r8;
    }

    public java.lang.String[] selectCipherSuites(java.lang.String[], java.lang.String[])
    {
        java.lang.Object[] $r7;
        org.eclipse.jetty.util.ssl.SslContextFactory r1;
        java.lang.String[] r3, $r6, $r8, r14;
        int $i0;
        java.lang.String r13;
        java.util.LinkedHashSet $r0;
        boolean $z0, $z1;
        java.util.Iterator $r11;
        java.util.Set $r2, $r5, $r9, $r10;
        java.util.List $r4, $r15;
        java.lang.Object $r12;

        r1 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        r3 := @parameter0: java.lang.String[];

        r14 := @parameter1: java.lang.String[];

        $r0 = new java.util.LinkedHashSet;

        specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>();

        $r2 = r1.<org.eclipse.jetty.util.ssl.SslContextFactory: java.util.Set _includeCipherSuites>;

        if $r2 == null goto label4;

        $r10 = r1.<org.eclipse.jetty.util.ssl.SslContextFactory: java.util.Set _includeCipherSuites>;

        $r11 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r13 = (java.lang.String) $r12;

        $r15 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r14);

        $z1 = interfaceinvoke $r15.<java.util.List: boolean contains(java.lang.Object)>(r13);

        if $z1 == 0 goto label2;

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>(r13);

     label2:
        goto label1;

     label3:
        goto label5;

     label4:
        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r3);

        interfaceinvoke $r0.<java.util.Set: boolean addAll(java.util.Collection)>($r4);

     label5:
        $r5 = r1.<org.eclipse.jetty.util.ssl.SslContextFactory: java.util.Set _excludeCipherSuites>;

        if $r5 == null goto label6;

        $r9 = r1.<org.eclipse.jetty.util.ssl.SslContextFactory: java.util.Set _excludeCipherSuites>;

        interfaceinvoke $r0.<java.util.Set: boolean removeAll(java.util.Collection)>($r9);

     label6:
        $i0 = interfaceinvoke $r0.<java.util.Set: int size()>();

        $r6 = newarray (java.lang.String)[$i0];

        $r7 = interfaceinvoke $r0.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r8 = (java.lang.String[]) $r7;

        return $r8;
    }

    protected void checkNotStarted()
    {
        java.lang.IllegalStateException $r1;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.String $r4, $r6;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        $z0 = virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean isStarted()>();

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot modify configuration when ");

        $r4 = virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String getState()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r1;

     label1:
        return;
    }

    public boolean isEnableCRLDP()
    {
        org.eclipse.jetty.util.ssl.SslContextFactory r0;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        $z0 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean _enableCRLDP>;

        return $z0;
    }

    public void setEnableCRLDP(boolean)
    {
        org.eclipse.jetty.util.ssl.SslContextFactory r0;
        boolean z0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: void checkNotStarted()>();

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean _enableCRLDP> = z0;

        return;
    }

    public boolean isEnableOCSP()
    {
        org.eclipse.jetty.util.ssl.SslContextFactory r0;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        $z0 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean _enableOCSP>;

        return $z0;
    }

    public void setEnableOCSP(boolean)
    {
        org.eclipse.jetty.util.ssl.SslContextFactory r0;
        boolean z0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: void checkNotStarted()>();

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean _enableOCSP> = z0;

        return;
    }

    public java.lang.String getOcspResponderURL()
    {
        java.lang.String $r1;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        $r1 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _ocspResponderURL>;

        return $r1;
    }

    public void setOcspResponderURL(java.lang.String)
    {
        java.lang.String r1;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: void checkNotStarted()>();

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _ocspResponderURL> = r1;

        return;
    }

    public void setKeyStore(java.security.KeyStore)
    {
        java.security.KeyStore r1;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        r1 := @parameter0: java.security.KeyStore;

        virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: void checkNotStarted()>();

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.security.KeyStore _keyStore> = r1;

        return;
    }

    public void setTrustStore(java.security.KeyStore)
    {
        java.security.KeyStore r1;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        r1 := @parameter0: java.security.KeyStore;

        virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: void checkNotStarted()>();

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.security.KeyStore _trustStore> = r1;

        return;
    }

    public void setKeyStoreResource(org.eclipse.jetty.util.resource.Resource)
    {
        org.eclipse.jetty.util.ssl.SslContextFactory r0;
        java.io.IOException $r3;
        java.security.InvalidParameterException $r4;
        org.eclipse.jetty.util.resource.Resource r1;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.lang.String $r7, $r9;
        java.io.InputStream $r2;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        r1 := @parameter0: org.eclipse.jetty.util.resource.Resource;

        virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: void checkNotStarted()>();

     label1:
        $r2 = virtualinvoke r1.<org.eclipse.jetty.util.resource.Resource: java.io.InputStream getInputStream()>();

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.io.InputStream _keyStoreInputStream> = $r2;

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.security.InvalidParameterException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to get resource input stream for resource ");

        $r7 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.security.InvalidParameterException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void setTrustStoreResource(org.eclipse.jetty.util.resource.Resource)
    {
        org.eclipse.jetty.util.ssl.SslContextFactory r0;
        java.io.IOException $r3;
        java.security.InvalidParameterException $r4;
        org.eclipse.jetty.util.resource.Resource r1;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.lang.String $r7, $r9;
        java.io.InputStream $r2;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        r1 := @parameter0: org.eclipse.jetty.util.resource.Resource;

        virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: void checkNotStarted()>();

     label1:
        $r2 = virtualinvoke r1.<org.eclipse.jetty.util.resource.Resource: java.io.InputStream getInputStream()>();

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.io.InputStream _trustStoreInputStream> = $r2;

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.security.InvalidParameterException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to get resource input stream for resource ");

        $r7 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.security.InvalidParameterException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public boolean isSessionCachingEnabled()
    {
        org.eclipse.jetty.util.ssl.SslContextFactory r0;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        $z0 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean _sessionCachingEnabled>;

        return $z0;
    }

    public void setSessionCachingEnabled(boolean)
    {
        org.eclipse.jetty.util.ssl.SslContextFactory r0;
        boolean z0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        z0 := @parameter0: boolean;

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean _sessionCachingEnabled> = z0;

        return;
    }

    public int getSslSessionCacheSize()
    {
        int $i0;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        $i0 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: int _sslSessionCacheSize>;

        return $i0;
    }

    public void setSslSessionCacheSize(int)
    {
        int i0;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        i0 := @parameter0: int;

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: int _sslSessionCacheSize> = i0;

        return;
    }

    public int getSslSessionTimeout()
    {
        int $i0;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        $i0 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: int _sslSessionTimeout>;

        return $i0;
    }

    public void setSslSessionTimeout(int)
    {
        int i0;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        i0 := @parameter0: int;

        r0.<org.eclipse.jetty.util.ssl.SslContextFactory: int _sslSessionTimeout> = i0;

        return;
    }

    public javax.net.ssl.SSLServerSocket newSslServerSocket(java.lang.String, int, int) throws java.io.IOException
    {
        javax.net.ssl.SSLContext $r1;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;
        java.lang.String[] $r6, $r7, $r8, $r9, $r10, $r11;
        java.net.InetAddress $r4;
        java.net.ServerSocket $r13;
        int i0, i1;
        java.lang.String r3;
        boolean $z0, $z1, $z2, $z3;
        javax.net.ssl.SSLServerSocketFactory $r2;
        javax.net.ssl.SSLServerSocket $r5, $r12;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        r3 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: javax.net.ssl.SSLContext _context>;

        $r2 = virtualinvoke $r1.<javax.net.ssl.SSLContext: javax.net.ssl.SSLServerSocketFactory getServerSocketFactory()>();

        if r3 != null goto label1;

        $r13 = virtualinvoke $r2.<javax.net.ssl.SSLServerSocketFactory: java.net.ServerSocket createServerSocket(int,int)>(i0, i1);

        goto label2;

     label1:
        $r4 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>(r3);

        $r13 = virtualinvoke $r2.<javax.net.ssl.SSLServerSocketFactory: java.net.ServerSocket createServerSocket(int,int,java.net.InetAddress)>(i0, i1, $r4);

     label2:
        $r5 = (javax.net.ssl.SSLServerSocket) $r13;

        $r12 = (javax.net.ssl.SSLServerSocket) $r5;

        $z0 = virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean getWantClientAuth()>();

        if $z0 == 0 goto label3;

        $z3 = virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean getWantClientAuth()>();

        virtualinvoke $r12.<javax.net.ssl.SSLServerSocket: void setWantClientAuth(boolean)>($z3);

     label3:
        $z1 = virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean getNeedClientAuth()>();

        if $z1 == 0 goto label4;

        $z2 = virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean getNeedClientAuth()>();

        virtualinvoke $r12.<javax.net.ssl.SSLServerSocket: void setNeedClientAuth(boolean)>($z2);

     label4:
        $r6 = virtualinvoke $r12.<javax.net.ssl.SSLServerSocket: java.lang.String[] getEnabledCipherSuites()>();

        $r7 = virtualinvoke $r12.<javax.net.ssl.SSLServerSocket: java.lang.String[] getSupportedCipherSuites()>();

        $r8 = virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String[] selectCipherSuites(java.lang.String[],java.lang.String[])>($r6, $r7);

        virtualinvoke $r12.<javax.net.ssl.SSLServerSocket: void setEnabledCipherSuites(java.lang.String[])>($r8);

        $r9 = virtualinvoke $r12.<javax.net.ssl.SSLServerSocket: java.lang.String[] getEnabledProtocols()>();

        $r10 = virtualinvoke $r12.<javax.net.ssl.SSLServerSocket: java.lang.String[] getSupportedProtocols()>();

        $r11 = virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String[] selectProtocols(java.lang.String[],java.lang.String[])>($r9, $r10);

        virtualinvoke $r12.<javax.net.ssl.SSLServerSocket: void setEnabledProtocols(java.lang.String[])>($r11);

        return $r12;
    }

    public javax.net.ssl.SSLSocket newSslSocket() throws java.io.IOException
    {
        javax.net.ssl.SSLContext $r1;
        java.net.Socket $r3;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;
        javax.net.ssl.SSLSocket r4;
        java.lang.String[] $r5, $r6, $r7, $r8, $r9, $r10;
        javax.net.ssl.SSLSocketFactory $r2;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        $r1 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: javax.net.ssl.SSLContext _context>;

        $r2 = virtualinvoke $r1.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        $r3 = virtualinvoke $r2.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket()>();

        r4 = (javax.net.ssl.SSLSocket) $r3;

        $z0 = virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean getWantClientAuth()>();

        if $z0 == 0 goto label1;

        $z3 = virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean getWantClientAuth()>();

        virtualinvoke r4.<javax.net.ssl.SSLSocket: void setWantClientAuth(boolean)>($z3);

     label1:
        $z1 = virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean getNeedClientAuth()>();

        if $z1 == 0 goto label2;

        $z2 = virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean getNeedClientAuth()>();

        virtualinvoke r4.<javax.net.ssl.SSLSocket: void setNeedClientAuth(boolean)>($z2);

     label2:
        $r5 = virtualinvoke r4.<javax.net.ssl.SSLSocket: java.lang.String[] getEnabledCipherSuites()>();

        $r6 = virtualinvoke r4.<javax.net.ssl.SSLSocket: java.lang.String[] getSupportedCipherSuites()>();

        $r7 = virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String[] selectCipherSuites(java.lang.String[],java.lang.String[])>($r5, $r6);

        virtualinvoke r4.<javax.net.ssl.SSLSocket: void setEnabledCipherSuites(java.lang.String[])>($r7);

        $r8 = virtualinvoke r4.<javax.net.ssl.SSLSocket: java.lang.String[] getEnabledProtocols()>();

        $r9 = virtualinvoke r4.<javax.net.ssl.SSLSocket: java.lang.String[] getSupportedProtocols()>();

        $r10 = virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String[] selectProtocols(java.lang.String[],java.lang.String[])>($r8, $r9);

        virtualinvoke r4.<javax.net.ssl.SSLSocket: void setEnabledProtocols(java.lang.String[])>($r10);

        return r4;
    }

    public javax.net.ssl.SSLEngine newSslEngine(java.lang.String, int)
    {
        javax.net.ssl.SSLContext $r1, $r3;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;
        int i0;
        java.lang.String r2;
        boolean $z0;
        javax.net.ssl.SSLEngine $r4;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        r2 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean isSessionCachingEnabled()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: javax.net.ssl.SSLContext _context>;

        $r4 = virtualinvoke $r3.<javax.net.ssl.SSLContext: javax.net.ssl.SSLEngine createSSLEngine(java.lang.String,int)>(r2, i0);

        goto label2;

     label1:
        $r1 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: javax.net.ssl.SSLContext _context>;

        $r4 = virtualinvoke $r1.<javax.net.ssl.SSLContext: javax.net.ssl.SSLEngine createSSLEngine()>();

     label2:
        virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: void customize(javax.net.ssl.SSLEngine)>($r4);

        return $r4;
    }

    public javax.net.ssl.SSLEngine newSslEngine()
    {
        javax.net.ssl.SSLContext $r1;
        org.eclipse.jetty.util.ssl.SslContextFactory r0;
        javax.net.ssl.SSLEngine $r2;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        $r1 = r0.<org.eclipse.jetty.util.ssl.SslContextFactory: javax.net.ssl.SSLContext _context>;

        $r2 = virtualinvoke $r1.<javax.net.ssl.SSLContext: javax.net.ssl.SSLEngine createSSLEngine()>();

        virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: void customize(javax.net.ssl.SSLEngine)>($r2);

        return $r2;
    }

    public void customize(javax.net.ssl.SSLEngine)
    {
        org.eclipse.jetty.util.ssl.SslContextFactory r0;
        java.lang.String[] $r2, $r3, $r4, $r5, $r6, $r7;
        javax.net.ssl.SSLEngine r1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        r1 := @parameter0: javax.net.ssl.SSLEngine;

        $z0 = virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean getWantClientAuth()>();

        if $z0 == 0 goto label1;

        $z3 = virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean getWantClientAuth()>();

        virtualinvoke r1.<javax.net.ssl.SSLEngine: void setWantClientAuth(boolean)>($z3);

     label1:
        $z1 = virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean getNeedClientAuth()>();

        if $z1 == 0 goto label2;

        $z2 = virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: boolean getNeedClientAuth()>();

        virtualinvoke r1.<javax.net.ssl.SSLEngine: void setNeedClientAuth(boolean)>($z2);

     label2:
        $r2 = virtualinvoke r1.<javax.net.ssl.SSLEngine: java.lang.String[] getEnabledCipherSuites()>();

        $r3 = virtualinvoke r1.<javax.net.ssl.SSLEngine: java.lang.String[] getSupportedCipherSuites()>();

        $r4 = virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String[] selectCipherSuites(java.lang.String[],java.lang.String[])>($r2, $r3);

        virtualinvoke r1.<javax.net.ssl.SSLEngine: void setEnabledCipherSuites(java.lang.String[])>($r4);

        $r5 = virtualinvoke r1.<javax.net.ssl.SSLEngine: java.lang.String[] getEnabledProtocols()>();

        $r6 = virtualinvoke r1.<javax.net.ssl.SSLEngine: java.lang.String[] getSupportedProtocols()>();

        $r7 = virtualinvoke r0.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String[] selectProtocols(java.lang.String[],java.lang.String[])>($r5, $r6);

        virtualinvoke r1.<javax.net.ssl.SSLEngine: void setEnabledProtocols(java.lang.String[])>($r7);

        return;
    }

    public java.lang.String toString()
    {
        java.lang.Object[] $r0;
        org.eclipse.jetty.util.ssl.SslContextFactory r1;
        java.lang.Integer $r4;
        int $i0;
        java.lang.Class $r2;
        java.lang.String $r3, $r5, $r6, $r7;

        r1 := @this: org.eclipse.jetty.util.ssl.SslContextFactory;

        $r0 = newarray (java.lang.Object)[4];

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getSimpleName()>();

        $r0[0] = $r3;

        $i0 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r0[1] = $r4;

        $r5 = r1.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _keyStorePath>;

        $r0[2] = $r5;

        $r6 = r1.<org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String _trustStorePath>;

        $r0[3] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s@%x(%s,%s)", $r0);

        return $r7;
    }

    static void <clinit>()
    {
        org.eclipse.jetty.util.ssl.SslContextFactory$1 $r1;
        javax.net.ssl.X509TrustManager[] $r0;
        java.lang.StringBuilder $r5, $r7, $r9, $r10;
        org.eclipse.jetty.util.log.Logger $r2;
        java.lang.String $r3, $r4, $r6, $r8, $r11, $r12, $r13;

        <org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String PASSWORD_PROPERTY> = "org.eclipse.jetty.ssl.password";

        <org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String KEYPASSWORD_PROPERTY> = "org.eclipse.jetty.ssl.keypassword";

        $r0 = newarray (javax.net.ssl.X509TrustManager)[1];

        $r1 = new org.eclipse.jetty.util.ssl.SslContextFactory$1;

        specialinvoke $r1.<org.eclipse.jetty.util.ssl.SslContextFactory$1: void <init>()>();

        $r0[0] = $r1;

        <org.eclipse.jetty.util.ssl.SslContextFactory: javax.net.ssl.TrustManager[] TRUST_ALL_CERTS> = $r0;

        $r2 = staticinvoke <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger getLogger(java.lang.Class)>(class "Lorg/eclipse/jetty/util/ssl/SslContextFactory;");

        <org.eclipse.jetty.util.ssl.SslContextFactory: org.eclipse.jetty.util.log.Logger LOG> = $r2;

        $r3 = staticinvoke <java.security.Security: java.lang.String getProperty(java.lang.String)>("ssl.KeyManagerFactory.algorithm");

        if $r3 != null goto label1;

        $r12 = "SunX509";

        goto label2;

     label1:
        $r12 = staticinvoke <java.security.Security: java.lang.String getProperty(java.lang.String)>("ssl.KeyManagerFactory.algorithm");

     label2:
        <org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String DEFAULT_KEYMANAGERFACTORY_ALGORITHM> = $r12;

        $r4 = staticinvoke <java.security.Security: java.lang.String getProperty(java.lang.String)>("ssl.TrustManagerFactory.algorithm");

        if $r4 != null goto label3;

        $r13 = "SunX509";

        goto label4;

     label3:
        $r13 = staticinvoke <java.security.Security: java.lang.String getProperty(java.lang.String)>("ssl.TrustManagerFactory.algorithm");

     label4:
        <org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String DEFAULT_TRUSTMANAGERFACTORY_ALGORITHM> = $r13;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.home");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = <java.io.File: java.lang.String separator>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".keystore");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.eclipse.jetty.util.ssl.SslContextFactory: java.lang.String DEFAULT_KEYSTORE_PATH> = $r11;

        return;
    }
}
