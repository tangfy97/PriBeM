public class com.hp.hpl.jena.tdb.base.file.BlockAccessDirect extends com.hp.hpl.jena.tdb.base.file.BlockAccessBase
{
    private static org.slf4j.Logger log;

    public void <init>(java.lang.String, int)
    {
        int i0;
        java.lang.String r1;
        com.hp.hpl.jena.tdb.base.file.BlockAccessDirect r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.file.BlockAccessDirect;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessBase: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    public com.hp.hpl.jena.tdb.base.block.Block allocate(int)
    {
        long $l2;
        java.nio.ByteBuffer $r1;
        com.hp.hpl.jena.tdb.base.block.Block $r2;
        int i0, $i1, $i3, $i4;
        com.hp.hpl.jena.tdb.base.file.FileException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8;
        java.lang.String $r9;
        com.hp.hpl.jena.tdb.base.file.BlockAccessDirect r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.file.BlockAccessDirect;

        i0 := @parameter0: int;

        if i0 <= 0 goto label1;

        $i3 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessDirect: int blockSize>;

        if i0 == $i3 goto label1;

        $r3 = new com.hp.hpl.jena.tdb.base.file.FileException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Fixed blocksize only: request= ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fixed size=");

        $i4 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessDirect: int blockSize>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<com.hp.hpl.jena.tdb.base.file.FileException: void <init>(java.lang.String)>($r9);

        throw $r3;

     label1:
        $i1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessDirect: int allocateId()>();

        $r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(i0);

        $r2 = new com.hp.hpl.jena.tdb.base.block.Block;

        $l2 = (long) $i1;

        specialinvoke $r2.<com.hp.hpl.jena.tdb.base.block.Block: void <init>(long,java.nio.ByteBuffer)>($l2, $r1);

        return $r2;
    }

    public com.hp.hpl.jena.tdb.base.block.Block read(long)
    {
        com.hp.hpl.jena.tdb.base.block.Block $r2;
        int $i1;
        long l0;
        java.nio.ByteBuffer $r1;
        com.hp.hpl.jena.tdb.base.file.BlockAccessDirect r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.file.BlockAccessDirect;

        l0 := @parameter0: long;

        virtualinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessDirect: void check(long)>(l0);

        virtualinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessDirect: void checkIfClosed()>();

        $i1 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessDirect: int blockSize>;

        $r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i1);

        specialinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessDirect: void readByteBuffer(long,java.nio.ByteBuffer)>(l0, $r1);

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        $r2 = new com.hp.hpl.jena.tdb.base.block.Block;

        specialinvoke $r2.<com.hp.hpl.jena.tdb.base.block.Block: void <init>(long,java.nio.ByteBuffer)>(l0, $r1);

        return $r2;
    }

    private void readByteBuffer(long, java.nio.ByteBuffer)
    {
        java.lang.Object[] $r5;
        long l0, $l1;
        java.lang.Integer $r6, $r7;
        java.nio.ByteBuffer r3;
        int $i2, $i3, $i4;
        java.lang.String $r8;
        com.hp.hpl.jena.tdb.base.file.FileBase $r1;
        java.io.IOException $r9;
        com.hp.hpl.jena.tdb.base.file.FileException $r4, $r10;
        java.nio.channels.FileChannel $r2;
        com.hp.hpl.jena.tdb.base.file.BlockAccessDirect r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.file.BlockAccessDirect;

        l0 := @parameter0: long;

        r3 := @parameter1: java.nio.ByteBuffer;

     label1:
        $r1 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessDirect: com.hp.hpl.jena.tdb.base.file.FileBase file>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.base.file.FileBase: java.nio.channels.FileChannel channel()>();

        $l1 = specialinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessDirect: long filePosition(long)>(l0);

        $i2 = virtualinvoke $r2.<java.nio.channels.FileChannel: int read(java.nio.ByteBuffer,long)>(r3, $l1);

        $i3 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessDirect: int blockSize>;

        if $i2 == $i3 goto label2;

        $r4 = new com.hp.hpl.jena.tdb.base.file.FileException;

        $r5 = newarray (java.lang.Object)[2];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r5[0] = $r6;

        $i4 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessDirect: int blockSize>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r5[1] = $r7;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("get: short read (%d, not %d)", $r5);

        specialinvoke $r4.<com.hp.hpl.jena.tdb.base.file.FileException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        $r10 = new com.hp.hpl.jena.tdb.base.file.FileException;

        specialinvoke $r10.<com.hp.hpl.jena.tdb.base.file.FileException: void <init>(java.lang.String,java.lang.Throwable)>("FileAccessDirect", $r9);

        throw $r10;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private final long filePosition(long)
    {
        int $i1;
        long l0, $l2, $l3;
        com.hp.hpl.jena.tdb.base.file.BlockAccessDirect r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.file.BlockAccessDirect;

        l0 := @parameter0: long;

        $i1 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessDirect: int blockSize>;

        $l2 = (long) $i1;

        $l3 = l0 * $l2;

        return $l3;
    }

    public void write(com.hp.hpl.jena.tdb.base.block.Block)
    {
        java.lang.Object[] $r7;
        long $l1, $l2;
        java.lang.Integer $r8, $r9;
        java.nio.ByteBuffer $r2;
        java.lang.Long $r5;
        int $i0, $i3, $i4, $i5;
        java.lang.String $r10;
        com.hp.hpl.jena.tdb.base.file.FileBase $r3;
        java.io.IOException $r11;
        com.hp.hpl.jena.tdb.base.block.Block r1;
        com.hp.hpl.jena.tdb.base.file.FileException $r6, $r12;
        java.nio.channels.FileChannel $r4;
        com.hp.hpl.jena.tdb.base.file.BlockAccessDirect r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.file.BlockAccessDirect;

        r1 := @parameter0: com.hp.hpl.jena.tdb.base.block.Block;

        virtualinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessDirect: void check(com.hp.hpl.jena.tdb.base.block.Block)>(r1);

        virtualinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessDirect: void checkIfClosed()>();

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.tdb.base.block.Block: java.nio.ByteBuffer getByteBuffer()>();

        $i0 = virtualinvoke $r2.<java.nio.ByteBuffer: int capacity()>();

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>($i0);

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

     label1:
        $r3 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessDirect: com.hp.hpl.jena.tdb.base.file.FileBase file>;

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.tdb.base.file.FileBase: java.nio.channels.FileChannel channel()>();

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.tdb.base.block.Block: java.lang.Long getId()>();

        $l1 = virtualinvoke $r5.<java.lang.Long: long longValue()>();

        $l2 = specialinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessDirect: long filePosition(long)>($l1);

        $i3 = virtualinvoke $r4.<java.nio.channels.FileChannel: int write(java.nio.ByteBuffer,long)>($r2, $l2);

        $i4 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessDirect: int blockSize>;

        if $i3 == $i4 goto label2;

        $r6 = new com.hp.hpl.jena.tdb.base.file.FileException;

        $r7 = newarray (java.lang.Object)[2];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r7[0] = $r8;

        $i5 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessDirect: int blockSize>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r7[1] = $r9;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("write: short write (%d, not %d)", $r7);

        specialinvoke $r6.<com.hp.hpl.jena.tdb.base.file.FileException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        $r12 = new com.hp.hpl.jena.tdb.base.file.FileException;

        specialinvoke $r12.<com.hp.hpl.jena.tdb.base.file.FileException: void <init>(java.lang.String,java.lang.Throwable)>("FileAccessDirect", $r11);

        throw $r12;

     label4:
        virtualinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessDirect: void writeNotification(com.hp.hpl.jena.tdb.base.block.Block)>(r1);

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void overwrite(com.hp.hpl.jena.tdb.base.block.Block)
    {
        com.hp.hpl.jena.tdb.base.file.BlockAccessDirect r0;
        com.hp.hpl.jena.tdb.base.block.Block r1;

        r0 := @this: com.hp.hpl.jena.tdb.base.file.BlockAccessDirect;

        r1 := @parameter0: com.hp.hpl.jena.tdb.base.block.Block;

        virtualinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessDirect: void overwriteNotification(com.hp.hpl.jena.tdb.base.block.Block)>(r1);

        virtualinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessDirect: void write(com.hp.hpl.jena.tdb.base.block.Block)>(r1);

        return;
    }

    public void sync()
    {
        com.hp.hpl.jena.tdb.base.file.BlockAccessDirect r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.file.BlockAccessDirect;

        virtualinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessDirect: void force()>();

        return;
    }

    protected void _close()
    {
        com.hp.hpl.jena.tdb.base.file.BlockAccessDirect r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.file.BlockAccessDirect;

        specialinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessBase: void force()>();

        return;
    }

    protected org.slf4j.Logger getLog()
    {
        org.slf4j.Logger $r0;
        com.hp.hpl.jena.tdb.base.file.BlockAccessDirect r1;

        r1 := @this: com.hp.hpl.jena.tdb.base.file.BlockAccessDirect;

        $r0 = <com.hp.hpl.jena.tdb.base.file.BlockAccessDirect: org.slf4j.Logger log>;

        return $r0;
    }

    public java.lang.String toString()
    {
        com.hp.hpl.jena.tdb.base.file.FileBase $r3;
        java.lang.StringBuilder $r0, $r1, $r6;
        java.lang.String $r4, $r5, $r7;
        com.hp.hpl.jena.tdb.base.file.BlockAccessDirect r2;

        r2 := @this: com.hp.hpl.jena.tdb.base.file.BlockAccessDirect;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Direct:");

        $r3 = r2.<com.hp.hpl.jena.tdb.base.file.BlockAccessDirect: com.hp.hpl.jena.tdb.base.file.FileBase file>;

        $r4 = $r3.<com.hp.hpl.jena.tdb.base.file.FileBase: java.lang.String filename>;

        $r5 = staticinvoke <org.apache.jena.atlas.lib.FileOps: java.lang.String basename(java.lang.String)>($r4);

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/hp/hpl/jena/tdb/base/file/BlockAccessDirect;");

        <com.hp.hpl.jena.tdb.base.file.BlockAccessDirect: org.slf4j.Logger log> = $r0;

        return;
    }
}
