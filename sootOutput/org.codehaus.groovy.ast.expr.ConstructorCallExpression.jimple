public class org.codehaus.groovy.ast.expr.ConstructorCallExpression extends org.codehaus.groovy.ast.expr.Expression
{
    private final org.codehaus.groovy.ast.expr.Expression arguments;

    public void <init>(org.codehaus.groovy.ast.ClassNode, org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.ast.expr.TupleExpression $r3;
        org.codehaus.groovy.ast.expr.ConstructorCallExpression r0;
        org.codehaus.groovy.ast.ClassNode r1;
        org.codehaus.groovy.ast.expr.Expression r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.expr.ConstructorCallExpression;

        r1 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        r2 := @parameter1: org.codehaus.groovy.ast.expr.Expression;

        specialinvoke r0.<org.codehaus.groovy.ast.expr.Expression: void <init>()>();

        specialinvoke r0.<org.codehaus.groovy.ast.expr.Expression: void setType(org.codehaus.groovy.ast.ClassNode)>(r1);

        $z0 = r2 instanceof org.codehaus.groovy.ast.expr.TupleExpression;

        if $z0 != 0 goto label1;

        $r3 = new org.codehaus.groovy.ast.expr.TupleExpression;

        specialinvoke $r3.<org.codehaus.groovy.ast.expr.TupleExpression: void <init>(org.codehaus.groovy.ast.expr.Expression)>(r2);

        r0.<org.codehaus.groovy.ast.expr.ConstructorCallExpression: org.codehaus.groovy.ast.expr.Expression arguments> = $r3;

        goto label2;

     label1:
        r0.<org.codehaus.groovy.ast.expr.ConstructorCallExpression: org.codehaus.groovy.ast.expr.Expression arguments> = r2;

     label2:
        return;
    }

    public void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)
    {
        org.codehaus.groovy.ast.expr.ConstructorCallExpression r1;
        org.codehaus.groovy.ast.GroovyCodeVisitor r0;

        r1 := @this: org.codehaus.groovy.ast.expr.ConstructorCallExpression;

        r0 := @parameter0: org.codehaus.groovy.ast.GroovyCodeVisitor;

        interfaceinvoke r0.<org.codehaus.groovy.ast.GroovyCodeVisitor: void visitConstructorCallExpression(org.codehaus.groovy.ast.expr.ConstructorCallExpression)>(r1);

        return;
    }

    public org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)
    {
        org.codehaus.groovy.ast.expr.ConstructorCallExpression r1, $r4;
        org.codehaus.groovy.ast.expr.ExpressionTransformer r0;
        org.codehaus.groovy.ast.ClassNode $r5;
        org.codehaus.groovy.ast.expr.Expression $r2, $r3;

        r1 := @this: org.codehaus.groovy.ast.expr.ConstructorCallExpression;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.ExpressionTransformer;

        $r2 = r1.<org.codehaus.groovy.ast.expr.ConstructorCallExpression: org.codehaus.groovy.ast.expr.Expression arguments>;

        $r3 = interfaceinvoke r0.<org.codehaus.groovy.ast.expr.ExpressionTransformer: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r2);

        $r4 = new org.codehaus.groovy.ast.expr.ConstructorCallExpression;

        $r5 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.ConstructorCallExpression: org.codehaus.groovy.ast.ClassNode getType()>();

        specialinvoke $r4.<org.codehaus.groovy.ast.expr.ConstructorCallExpression: void <init>(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.expr.Expression)>($r5, $r3);

        virtualinvoke $r4.<org.codehaus.groovy.ast.expr.Expression: void setSourcePosition(org.codehaus.groovy.ast.ASTNode)>(r1);

        return $r4;
    }

    public org.codehaus.groovy.ast.expr.Expression getArguments()
    {
        org.codehaus.groovy.ast.expr.Expression $r1;
        org.codehaus.groovy.ast.expr.ConstructorCallExpression r0;

        r0 := @this: org.codehaus.groovy.ast.expr.ConstructorCallExpression;

        $r1 = r0.<org.codehaus.groovy.ast.expr.ConstructorCallExpression: org.codehaus.groovy.ast.expr.Expression arguments>;

        return $r1;
    }

    public java.lang.String getText()
    {
        org.codehaus.groovy.ast.expr.ConstructorCallExpression r0;
        org.codehaus.groovy.ast.ClassNode $r3;
        java.lang.StringBuffer $r1, $r2, $r5, $r7, $r8, $r11;
        java.lang.String $r4, r6, $r10, $r12;
        org.codehaus.groovy.ast.expr.Expression $r9;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.groovy.ast.expr.ConstructorCallExpression;

        $z0 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.ConstructorCallExpression: boolean isSuperCall()>();

        if $z0 == 0 goto label1;

        r6 = "super ";

        goto label3;

     label1:
        $z1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.ConstructorCallExpression: boolean isThisCall()>();

        if $z1 == 0 goto label2;

        r6 = "this ";

        goto label3;

     label2:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("new ");

        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.ConstructorCallExpression: org.codehaus.groovy.ast.ClassNode getType()>();

        $r4 = virtualinvoke $r3.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

     label3:
        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r6);

        $r9 = r0.<org.codehaus.groovy.ast.expr.ConstructorCallExpression: org.codehaus.groovy.ast.expr.Expression arguments>;

        $r10 = virtualinvoke $r9.<org.codehaus.groovy.ast.expr.Expression: java.lang.String getText()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r12;
    }

    public java.lang.String toString()
    {
        org.codehaus.groovy.ast.expr.ConstructorCallExpression r1;
        org.codehaus.groovy.ast.ClassNode $r5;
        java.lang.StringBuffer $r0, $r3, $r4, $r6, $r7, $r9, $r10;
        java.lang.String $r2, $r11;
        org.codehaus.groovy.ast.expr.Expression $r8;

        r1 := @this: org.codehaus.groovy.ast.expr.ConstructorCallExpression;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = specialinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[type: ");

        $r5 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.ConstructorCallExpression: org.codehaus.groovy.ast.ClassNode getType()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" arguments: ");

        $r8 = r1.<org.codehaus.groovy.ast.expr.ConstructorCallExpression: org.codehaus.groovy.ast.expr.Expression arguments>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r11;
    }

    public boolean isSuperCall()
    {
        org.codehaus.groovy.ast.expr.ConstructorCallExpression r0;
        org.codehaus.groovy.ast.ClassNode $r1, $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.expr.ConstructorCallExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.ConstructorCallExpression: org.codehaus.groovy.ast.ClassNode getType()>();

        $r2 = <org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode SUPER>;

        if $r1 != $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isSpecialCall()
    {
        org.codehaus.groovy.ast.expr.ConstructorCallExpression r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.codehaus.groovy.ast.expr.ConstructorCallExpression;

        $z0 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.ConstructorCallExpression: boolean isThisCall()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.ConstructorCallExpression: boolean isSuperCall()>();

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public boolean isThisCall()
    {
        org.codehaus.groovy.ast.expr.ConstructorCallExpression r0;
        org.codehaus.groovy.ast.ClassNode $r1, $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.expr.ConstructorCallExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.ConstructorCallExpression: org.codehaus.groovy.ast.ClassNode getType()>();

        $r2 = <org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode THIS>;

        if $r1 != $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }
}
