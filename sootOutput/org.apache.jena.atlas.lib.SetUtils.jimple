public class org.apache.jena.atlas.lib.SetUtils extends java.lang.Object
{

    private void <init>()
    {
        org.apache.jena.atlas.lib.SetUtils r0;

        r0 := @this: org.apache.jena.atlas.lib.SetUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.Set intersection(java.util.Set, java.util.Set)
    {
        java.util.HashSet $r0;
        java.util.Set r1, r2;

        r1 := @parameter0: java.util.Set;

        r2 := @parameter1: java.util.Set;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>(java.util.Collection)>(r1);

        interfaceinvoke $r0.<java.util.Set: boolean retainAll(java.util.Collection)>(r2);

        return $r0;
    }

    public static boolean intersectionP(java.util.Set, java.util.Set)
    {
        java.util.Iterator $r1;
        java.util.Set r0, r3;
        java.lang.Object $r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Set;

        r3 := @parameter1: java.util.Set;

        $r1 = interfaceinvoke r0.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $z1 = interfaceinvoke r3.<java.util.Set: boolean contains(java.lang.Object)>($r2);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public static java.util.Set union(java.util.Set, java.util.Set)
    {
        java.util.HashSet $r0;
        java.util.Set r1, r2;

        r1 := @parameter0: java.util.Set;

        r2 := @parameter1: java.util.Set;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>(java.util.Collection)>(r1);

        interfaceinvoke $r0.<java.util.Set: boolean addAll(java.util.Collection)>(r2);

        return $r0;
    }

    public static java.util.Set difference(java.util.Set, java.util.Set)
    {
        java.util.HashSet $r0;
        java.util.Set r1, r2;

        r1 := @parameter0: java.util.Set;

        r2 := @parameter1: java.util.Set;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>(java.util.Collection)>(r1);

        interfaceinvoke $r0.<java.util.Set: boolean removeAll(java.util.Collection)>(r2);

        return $r0;
    }

    public static boolean isDisjoint(java.util.Set, java.util.Set)
    {
        java.util.Iterator $r2;
        java.util.Set r0, r1, r4, r5;
        int $i0, $i1;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Set;

        r1 := @parameter1: java.util.Set;

        r4 = r0;

        r5 = r1;

        $i0 = interfaceinvoke r0.<java.util.Set: int size()>();

        $i1 = interfaceinvoke r1.<java.util.Set: int size()>();

        if $i0 >= $i1 goto label1;

        r4 = r1;

        r5 = r0;

     label1:
        $r2 = interfaceinvoke r4.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $z0 = interfaceinvoke r5.<java.util.Set: boolean contains(java.lang.Object)>($r3);

        if $z0 == 0 goto label3;

        return 0;

     label3:
        goto label2;

     label4:
        return 1;
    }
}
