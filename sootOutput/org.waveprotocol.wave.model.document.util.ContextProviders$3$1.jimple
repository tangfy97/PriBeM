class org.waveprotocol.wave.model.document.util.ContextProviders$3$1 extends org.waveprotocol.wave.model.document.util.RepaintingPersistentContent
{
    final org.waveprotocol.wave.model.document.util.ContextProviders$3 this$0;

    void <init>(org.waveprotocol.wave.model.document.util.ContextProviders$3, org.waveprotocol.wave.model.document.raw.RawDocument, org.waveprotocol.wave.model.document.util.ElementManager)
    {
        org.waveprotocol.wave.model.document.raw.RawDocument r2;
        org.waveprotocol.wave.model.document.util.ContextProviders$3 r1;
        org.waveprotocol.wave.model.document.util.ContextProviders$3$1 r0;
        org.waveprotocol.wave.model.document.util.ElementManager r3;

        r0 := @this: org.waveprotocol.wave.model.document.util.ContextProviders$3$1;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.ContextProviders$3;

        r2 := @parameter1: org.waveprotocol.wave.model.document.raw.RawDocument;

        r3 := @parameter2: org.waveprotocol.wave.model.document.util.ElementManager;

        r0.<org.waveprotocol.wave.model.document.util.ContextProviders$3$1: org.waveprotocol.wave.model.document.util.ContextProviders$3 this$0> = r1;

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.RepaintingPersistentContent: void <init>(org.waveprotocol.wave.model.document.raw.RawDocument,org.waveprotocol.wave.model.document.util.ElementManager)>(r2, r3);

        return;
    }

    protected void schedulePaint(org.waveprotocol.wave.model.document.raw.impl.Node)
    {
        org.waveprotocol.wave.model.document.raw.impl.Node r4;
        org.waveprotocol.wave.model.document.util.ContextProviders$3 $r1, $r3;
        org.waveprotocol.wave.model.document.util.ContextProviders$3$1 r0;
        org.waveprotocol.wave.model.document.util.ContextProviders$TestDocumentContext$MiscListener $r2, $r5;

        r0 := @this: org.waveprotocol.wave.model.document.util.ContextProviders$3$1;

        r4 := @parameter0: org.waveprotocol.wave.model.document.raw.impl.Node;

        $r1 = r0.<org.waveprotocol.wave.model.document.util.ContextProviders$3$1: org.waveprotocol.wave.model.document.util.ContextProviders$3 this$0>;

        $r2 = $r1.<org.waveprotocol.wave.model.document.util.ContextProviders$3: org.waveprotocol.wave.model.document.util.ContextProviders$TestDocumentContext$MiscListener val$miscListener>;

        if $r2 == null goto label1;

        $r3 = r0.<org.waveprotocol.wave.model.document.util.ContextProviders$3$1: org.waveprotocol.wave.model.document.util.ContextProviders$3 this$0>;

        $r5 = $r3.<org.waveprotocol.wave.model.document.util.ContextProviders$3: org.waveprotocol.wave.model.document.util.ContextProviders$TestDocumentContext$MiscListener val$miscListener>;

        interfaceinvoke $r5.<org.waveprotocol.wave.model.document.util.ContextProviders$TestDocumentContext$MiscListener: void onSchedulePaint(org.waveprotocol.wave.model.document.raw.impl.Node)>(r4);

     label1:
        return;
    }

    protected volatile void schedulePaint(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.ContextProviders$3$1 r0;
        org.waveprotocol.wave.model.document.raw.impl.Node $r2;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.model.document.util.ContextProviders$3$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.document.raw.impl.Node) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.util.ContextProviders$3$1: void schedulePaint(org.waveprotocol.wave.model.document.raw.impl.Node)>($r2);

        return;
    }
}
