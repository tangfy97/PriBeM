final class kodkod.engine.bool.CBCFactory$1 extends kodkod.engine.bool.CBCFactory$Assembler
{
    final kodkod.engine.bool.CBCFactory this$0;

    void <init>(kodkod.engine.bool.CBCFactory)
    {
        kodkod.engine.bool.CBCFactory r1;
        kodkod.engine.bool.CBCFactory$1 r0;

        r0 := @this: kodkod.engine.bool.CBCFactory$1;

        r1 := @parameter0: kodkod.engine.bool.CBCFactory;

        r0.<kodkod.engine.bool.CBCFactory$1: kodkod.engine.bool.CBCFactory this$0> = r1;

        specialinvoke r0.<kodkod.engine.bool.CBCFactory$Assembler: void <init>(kodkod.engine.bool.CBCFactory$Assembler)>(null);

        return;
    }

    kodkod.engine.bool.BooleanValue assemble(kodkod.engine.bool.Operator$Nary, kodkod.engine.bool.BooleanFormula, kodkod.engine.bool.BooleanFormula)
    {
        kodkod.engine.bool.Operator$Nary r5;
        kodkod.engine.bool.BooleanConstant $r10;
        kodkod.engine.bool.BooleanFormula r0, r1, $r8, $r14;
        java.lang.AssertionError $r13;
        kodkod.engine.bool.Operator $r2, $r6, $r11, $r12;
        kodkod.engine.bool.CBCFactory$1 r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0;
        kodkod.engine.bool.CBCFactory $r4, $r7, $r9;

        r3 := @this: kodkod.engine.bool.CBCFactory$1;

        r5 := @parameter0: kodkod.engine.bool.Operator$Nary;

        r1 := @parameter1: kodkod.engine.bool.BooleanFormula;

        r0 := @parameter2: kodkod.engine.bool.BooleanFormula;

        $z0 = <kodkod.engine.bool.CBCFactory: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r12 = virtualinvoke r1.<kodkod.engine.bool.BooleanFormula: kodkod.engine.bool.Operator op()>();

        $i6 = $r12.<kodkod.engine.bool.Operator: int ordinal>;

        if $i6 < 2 goto label1;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();

        throw $r13;

     label1:
        $i0 = virtualinvoke r0.<kodkod.engine.bool.BooleanFormula: int label()>();

        $r2 = virtualinvoke r1.<kodkod.engine.bool.BooleanFormula: kodkod.engine.bool.Operator op()>();

        $r4 = r3.<kodkod.engine.bool.CBCFactory$1: kodkod.engine.bool.CBCFactory this$0>;

        $i1 = staticinvoke <kodkod.engine.bool.CBCFactory: int access$0(kodkod.engine.bool.CBCFactory)>($r4);

        $i2 = virtualinvoke r1.<kodkod.engine.bool.BooleanFormula: int contains(kodkod.engine.bool.Operator,int,int)>($r2, $i0, $i1);

        if $i2 <= 0 goto label4;

        $r11 = virtualinvoke r1.<kodkod.engine.bool.BooleanFormula: kodkod.engine.bool.Operator op()>();

        if r5 != $r11 goto label2;

        $r14 = r1;

        goto label3;

     label2:
        $r14 = r0;

     label3:
        return $r14;

     label4:
        $r6 = virtualinvoke r1.<kodkod.engine.bool.BooleanFormula: kodkod.engine.bool.Operator op()>();

        if r5 != $r6 goto label5;

        $i3 = neg $i0;

        $r9 = r3.<kodkod.engine.bool.CBCFactory$1: kodkod.engine.bool.CBCFactory this$0>;

        $i4 = staticinvoke <kodkod.engine.bool.CBCFactory: int access$0(kodkod.engine.bool.CBCFactory)>($r9);

        $i5 = virtualinvoke r1.<kodkod.engine.bool.BooleanFormula: int contains(kodkod.engine.bool.Operator,int,int)>(r5, $i3, $i4);

        if $i5 <= 0 goto label5;

        $r10 = virtualinvoke r5.<kodkod.engine.bool.Operator$Nary: kodkod.engine.bool.BooleanConstant shortCircuit()>();

        return $r10;

     label5:
        $r7 = r3.<kodkod.engine.bool.CBCFactory$1: kodkod.engine.bool.CBCFactory this$0>;

        $r8 = staticinvoke <kodkod.engine.bool.CBCFactory: kodkod.engine.bool.BooleanFormula access$1(kodkod.engine.bool.CBCFactory,kodkod.engine.bool.Operator$Nary,kodkod.engine.bool.BooleanFormula,kodkod.engine.bool.BooleanFormula)>($r7, r5, r1, r0);

        return $r8;
    }
}
