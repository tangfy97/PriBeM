public class com.hp.hpl.jena.graph.Triple extends java.lang.Object implements com.hp.hpl.jena.graph.TripleMatch
{
    private final com.hp.hpl.jena.graph.Node subj;
    private final com.hp.hpl.jena.graph.Node pred;
    private final com.hp.hpl.jena.graph.Node obj;
    public static final com.hp.hpl.jena.util.iterator.ExtendedIterator None;
    public static final com.hp.hpl.jena.util.iterator.Map1 getSubject;
    public static final com.hp.hpl.jena.util.iterator.Map1 getPredicate;
    public static final com.hp.hpl.jena.util.iterator.Map1 getObject;
    public static final com.hp.hpl.jena.graph.Triple ANY;

    public void <init>(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        java.lang.UnsupportedOperationException $r4, $r5, $r6;
        com.hp.hpl.jena.graph.Node r1, r2, r3;
        com.hp.hpl.jena.graph.Triple r0;

        r0 := @this: com.hp.hpl.jena.graph.Triple;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.graph.Node;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r6 = new java.lang.UnsupportedOperationException;

        specialinvoke $r6.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("subject cannot be null");

        throw $r6;

     label1:
        if r2 != null goto label2;

        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("predicate cannot be null");

        throw $r5;

     label2:
        if r3 != null goto label3;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("object cannot be null");

        throw $r4;

     label3:
        r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node subj> = r1;

        r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node pred> = r2;

        r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node obj> = r3;

        return;
    }

    public java.lang.String toString()
    {
        java.lang.String $r2;
        com.hp.hpl.jena.shared.PrefixMapping $r1;
        com.hp.hpl.jena.graph.Triple r0;

        r0 := @this: com.hp.hpl.jena.graph.Triple;

        $r1 = <com.hp.hpl.jena.shared.PrefixMapping: com.hp.hpl.jena.shared.PrefixMapping Standard>;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: java.lang.String toString(com.hp.hpl.jena.shared.PrefixMapping)>($r1);

        return $r2;
    }

    public java.lang.String toString(com.hp.hpl.jena.shared.PrefixMapping)
    {
        com.hp.hpl.jena.graph.Node $r3, $r7, $r11;
        com.hp.hpl.jena.graph.Triple r1;
        java.lang.StringBuilder $r0, $r5, $r6, $r9, $r10, $r13;
        java.lang.String $r4, $r8, $r12, $r14;
        com.hp.hpl.jena.shared.PrefixMapping r2;

        r1 := @this: com.hp.hpl.jena.graph.Triple;

        r2 := @parameter0: com.hp.hpl.jena.shared.PrefixMapping;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r3 = r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node subj>;

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.graph.Node: java.lang.String toString(com.hp.hpl.jena.shared.PrefixMapping,boolean)>(r2, 1);

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" @");

        $r7 = r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node pred>;

        $r8 = virtualinvoke $r7.<com.hp.hpl.jena.graph.Node: java.lang.String toString(com.hp.hpl.jena.shared.PrefixMapping,boolean)>(r2, 1);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r11 = r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node obj>;

        $r12 = virtualinvoke $r11.<com.hp.hpl.jena.graph.Node: java.lang.String toString(com.hp.hpl.jena.shared.PrefixMapping,boolean)>(r2, 1);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r14;
    }

    public final com.hp.hpl.jena.graph.Node getSubject()
    {
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.graph.Triple r0;

        r0 := @this: com.hp.hpl.jena.graph.Triple;

        $r1 = r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node subj>;

        return $r1;
    }

    public final com.hp.hpl.jena.graph.Node getPredicate()
    {
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.graph.Triple r0;

        r0 := @this: com.hp.hpl.jena.graph.Triple;

        $r1 = r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node pred>;

        return $r1;
    }

    public final com.hp.hpl.jena.graph.Node getObject()
    {
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.graph.Triple r0;

        r0 := @this: com.hp.hpl.jena.graph.Triple;

        $r1 = r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node obj>;

        return $r1;
    }

    public com.hp.hpl.jena.graph.Node getMatchSubject()
    {
        com.hp.hpl.jena.graph.Node $r1, $r2;
        com.hp.hpl.jena.graph.Triple r0;

        r0 := @this: com.hp.hpl.jena.graph.Triple;

        $r1 = r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node subj>;

        $r2 = staticinvoke <com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node anyToNull(com.hp.hpl.jena.graph.Node)>($r1);

        return $r2;
    }

    public com.hp.hpl.jena.graph.Node getMatchPredicate()
    {
        com.hp.hpl.jena.graph.Node $r1, $r2;
        com.hp.hpl.jena.graph.Triple r0;

        r0 := @this: com.hp.hpl.jena.graph.Triple;

        $r1 = r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node pred>;

        $r2 = staticinvoke <com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node anyToNull(com.hp.hpl.jena.graph.Node)>($r1);

        return $r2;
    }

    public com.hp.hpl.jena.graph.Node getMatchObject()
    {
        com.hp.hpl.jena.graph.Node $r1, $r2;
        com.hp.hpl.jena.graph.Triple r0;

        r0 := @this: com.hp.hpl.jena.graph.Triple;

        $r1 = r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node obj>;

        $r2 = staticinvoke <com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node anyToNull(com.hp.hpl.jena.graph.Node)>($r1);

        return $r2;
    }

    private static com.hp.hpl.jena.graph.Node anyToNull(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0, $r1, $r2;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r1 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $r2 = null;

        goto label2;

     label1:
        $r2 = r0;

     label2:
        return $r2;
    }

    private static com.hp.hpl.jena.graph.Node nullToAny(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0, $r1;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        if r0 != null goto label1;

        $r1 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        goto label2;

     label1:
        $r1 = r0;

     label2:
        return $r1;
    }

    public com.hp.hpl.jena.graph.Triple asTriple()
    {
        com.hp.hpl.jena.graph.Triple r0;

        r0 := @this: com.hp.hpl.jena.graph.Triple;

        return r0;
    }

    public boolean isConcrete()
    {
        com.hp.hpl.jena.graph.Node $r1, $r2, $r3;
        com.hp.hpl.jena.graph.Triple r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.hp.hpl.jena.graph.Triple;

        $r1 = r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node subj>;

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean isConcrete()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node pred>;

        $z1 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: boolean isConcrete()>();

        if $z1 == 0 goto label1;

        $r3 = r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node obj>;

        $z2 = virtualinvoke $r3.<com.hp.hpl.jena.graph.Node: boolean isConcrete()>();

        if $z2 == 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;
    }

    public boolean equals(java.lang.Object)
    {
        com.hp.hpl.jena.graph.Node $r2, $r3, $r4;
        com.hp.hpl.jena.graph.Triple r1, $r5;
        java.lang.Object r0;
        boolean $z0, $z1, $z2;

        r1 := @this: com.hp.hpl.jena.graph.Triple;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof com.hp.hpl.jena.graph.Triple;

        if $z0 == 0 goto label1;

        $r5 = (com.hp.hpl.jena.graph.Triple) r0;

        $r4 = r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node subj>;

        $r3 = r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node pred>;

        $r2 = r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node obj>;

        $z1 = virtualinvoke $r5.<com.hp.hpl.jena.graph.Triple: boolean sameAs(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r4, $r3, $r2);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean sameAs(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r1, $r2, r3, $r4, r5, $r6;
        com.hp.hpl.jena.graph.Triple r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.hp.hpl.jena.graph.Triple;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r3 := @parameter1: com.hp.hpl.jena.graph.Node;

        r5 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r2 = r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node subj>;

        $z0 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r4 = r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node pred>;

        $z1 = virtualinvoke $r4.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>(r3);

        if $z1 == 0 goto label1;

        $r6 = r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node obj>;

        $z2 = virtualinvoke $r6.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>(r5);

        if $z2 == 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;
    }

    public boolean matches(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.Node $r2, $r3, $r4;
        com.hp.hpl.jena.graph.Triple r0, r1;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.graph.Triple;

        r0 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r4 = r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node subj>;

        $r3 = r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node pred>;

        $r2 = r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node obj>;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.graph.Triple: boolean matchedBy(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r4, $r3, $r2);

        return $z0;
    }

    public boolean matches(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r1, $r2, r3, $r4, r5, $r6;
        com.hp.hpl.jena.graph.Triple r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.hp.hpl.jena.graph.Triple;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r3 := @parameter1: com.hp.hpl.jena.graph.Node;

        r5 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r2 = r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node subj>;

        $z0 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: boolean matches(com.hp.hpl.jena.graph.Node)>(r1);

        if $z0 == 0 goto label1;

        $r4 = r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node pred>;

        $z1 = virtualinvoke $r4.<com.hp.hpl.jena.graph.Node: boolean matches(com.hp.hpl.jena.graph.Node)>(r3);

        if $z1 == 0 goto label1;

        $r6 = r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node obj>;

        $z2 = virtualinvoke $r6.<com.hp.hpl.jena.graph.Node: boolean matches(com.hp.hpl.jena.graph.Node)>(r5);

        if $z2 == 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;
    }

    private boolean matchedBy(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0, $r2, r3, $r4, r5, $r6;
        com.hp.hpl.jena.graph.Triple r1;
        boolean $z0, $z1, $z2, $z3;

        r1 := @this: com.hp.hpl.jena.graph.Triple;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r3 := @parameter1: com.hp.hpl.jena.graph.Node;

        r5 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r2 = r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node subj>;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean matches(com.hp.hpl.jena.graph.Node)>($r2);

        if $z0 == 0 goto label1;

        $r4 = r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node pred>;

        $z1 = virtualinvoke r3.<com.hp.hpl.jena.graph.Node: boolean matches(com.hp.hpl.jena.graph.Node)>($r4);

        if $z1 == 0 goto label1;

        $r6 = r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node obj>;

        $z2 = virtualinvoke r5.<com.hp.hpl.jena.graph.Node: boolean matches(com.hp.hpl.jena.graph.Node)>($r6);

        if $z2 == 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;
    }

    public boolean subjectMatches(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r1, $r2;
        com.hp.hpl.jena.graph.Triple r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.graph.Triple;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r2 = r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node subj>;

        $z0 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: boolean matches(com.hp.hpl.jena.graph.Node)>(r1);

        return $z0;
    }

    public boolean predicateMatches(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r1, $r2;
        com.hp.hpl.jena.graph.Triple r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.graph.Triple;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r2 = r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node pred>;

        $z0 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: boolean matches(com.hp.hpl.jena.graph.Node)>(r1);

        return $z0;
    }

    public boolean objectMatches(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r1, $r2;
        com.hp.hpl.jena.graph.Triple r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.graph.Triple;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r2 = r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node obj>;

        $z0 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: boolean matches(com.hp.hpl.jena.graph.Node)>(r1);

        return $z0;
    }

    public int hashCode()
    {
        int $i0;
        com.hp.hpl.jena.graph.Node $r1, $r2, $r3;
        com.hp.hpl.jena.graph.Triple r0;

        r0 := @this: com.hp.hpl.jena.graph.Triple;

        $r3 = r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node subj>;

        $r2 = r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node pred>;

        $r1 = r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node obj>;

        $i0 = staticinvoke <com.hp.hpl.jena.graph.Triple: int hashCode(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r3, $r2, $r1);

        return $i0;
    }

    public static int hashCode(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0, r1, r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        r2 := @parameter2: com.hp.hpl.jena.graph.Node;

        $i0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: int hashCode()>();

        $i1 = $i0 >> 1;

        $i2 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: int hashCode()>();

        $i3 = $i1 ^ $i2;

        $i4 = virtualinvoke r2.<com.hp.hpl.jena.graph.Node: int hashCode()>();

        $i5 = $i4 << 1;

        $i6 = $i3 ^ $i5;

        return $i6;
    }

    public static com.hp.hpl.jena.graph.Triple create(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r1, r2, r3;
        com.hp.hpl.jena.graph.Triple $r0;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r0 = new com.hp.hpl.jena.graph.Triple;

        specialinvoke $r0.<com.hp.hpl.jena.graph.Triple: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2, r3);

        return $r0;
    }

    public static com.hp.hpl.jena.graph.Triple createMatch(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0, $r1, r2, $r3, r4, $r5;
        com.hp.hpl.jena.graph.Triple $r6;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r4 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r1 = staticinvoke <com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node nullToAny(com.hp.hpl.jena.graph.Node)>(r0);

        $r3 = staticinvoke <com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node nullToAny(com.hp.hpl.jena.graph.Node)>(r2);

        $r5 = staticinvoke <com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node nullToAny(com.hp.hpl.jena.graph.Node)>(r4);

        $r6 = staticinvoke <com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Triple create(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r1, $r3, $r5);

        return $r6;
    }

    static com.hp.hpl.jena.graph.Node access$000(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.graph.Triple r0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r1 = r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node subj>;

        return $r1;
    }

    static com.hp.hpl.jena.graph.Node access$100(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.graph.Triple r0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r1 = r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node obj>;

        return $r1;
    }

    static com.hp.hpl.jena.graph.Node access$200(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.graph.Triple r0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r1 = r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node pred>;

        return $r1;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.util.iterator.NiceIterator $r0;
        com.hp.hpl.jena.graph.Node $r4, $r5, $r6;
        com.hp.hpl.jena.graph.Triple$1 $r1;
        com.hp.hpl.jena.graph.Triple$2 $r2;
        com.hp.hpl.jena.graph.Triple$3 $r3;
        com.hp.hpl.jena.graph.Triple $r7;

        $r0 = new com.hp.hpl.jena.util.iterator.NiceIterator;

        specialinvoke $r0.<com.hp.hpl.jena.util.iterator.NiceIterator: void <init>()>();

        <com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.util.iterator.ExtendedIterator None> = $r0;

        $r1 = new com.hp.hpl.jena.graph.Triple$1;

        specialinvoke $r1.<com.hp.hpl.jena.graph.Triple$1: void <init>()>();

        <com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.util.iterator.Map1 getSubject> = $r1;

        $r2 = new com.hp.hpl.jena.graph.Triple$2;

        specialinvoke $r2.<com.hp.hpl.jena.graph.Triple$2: void <init>()>();

        <com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.util.iterator.Map1 getPredicate> = $r2;

        $r3 = new com.hp.hpl.jena.graph.Triple$3;

        specialinvoke $r3.<com.hp.hpl.jena.graph.Triple$3: void <init>()>();

        <com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.util.iterator.Map1 getObject> = $r3;

        $r6 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r5 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r4 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r7 = staticinvoke <com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Triple create(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r6, $r5, $r4);

        <com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Triple ANY> = $r7;

        return;
    }
}
