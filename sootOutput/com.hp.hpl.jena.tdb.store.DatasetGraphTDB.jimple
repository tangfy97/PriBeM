public final class com.hp.hpl.jena.tdb.store.DatasetGraphTDB extends com.hp.hpl.jena.sparql.core.DatasetGraphCaching implements org.apache.jena.atlas.lib.Sync, org.apache.jena.atlas.lib.Closeable, com.hp.hpl.jena.update.GraphStore, com.hp.hpl.jena.tdb.sys.Session
{
    private com.hp.hpl.jena.tdb.store.TripleTable tripleTable;
    private com.hp.hpl.jena.tdb.store.QuadTable quadTable;
    private com.hp.hpl.jena.tdb.store.DatasetPrefixesTDB prefixes;
    private final com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformation transform;
    private final com.hp.hpl.jena.tdb.store.StorageConfig config;
    private com.hp.hpl.jena.tdb.store.GraphTDB effectiveDefaultGraph;
    private boolean closed;
    private static org.apache.jena.atlas.iterator.Transform project0;
    private static final int sliceSize;

    public void <init>(com.hp.hpl.jena.tdb.store.TripleTable, com.hp.hpl.jena.tdb.store.QuadTable, com.hp.hpl.jena.tdb.store.DatasetPrefixesTDB, com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformation, com.hp.hpl.jena.tdb.store.StorageConfig)
    {
        com.hp.hpl.jena.tdb.store.QuadTable r2;
        com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformation r4;
        com.hp.hpl.jena.tdb.store.DatasetPrefixesTDB r3;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r0;
        com.hp.hpl.jena.tdb.store.StorageConfig r5;
        com.hp.hpl.jena.tdb.store.TripleTable r1;
        com.hp.hpl.jena.tdb.store.GraphTDB $r6;

        r0 := @this: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        r1 := @parameter0: com.hp.hpl.jena.tdb.store.TripleTable;

        r2 := @parameter1: com.hp.hpl.jena.tdb.store.QuadTable;

        r3 := @parameter2: com.hp.hpl.jena.tdb.store.DatasetPrefixesTDB;

        r4 := @parameter3: com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformation;

        r5 := @parameter4: com.hp.hpl.jena.tdb.store.StorageConfig;

        specialinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphCaching: void <init>()>();

        r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: boolean closed> = 0;

        r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.TripleTable tripleTable> = r1;

        r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.QuadTable quadTable> = r2;

        r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.DatasetPrefixesTDB prefixes> = r3;

        r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformation transform> = r4;

        r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.StorageConfig config> = r5;

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.GraphTDB getDefaultGraphTDB()>();

        r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.GraphTDB effectiveDefaultGraph> = $r6;

        return;
    }

    public com.hp.hpl.jena.tdb.store.QuadTable getQuadTable()
    {
        com.hp.hpl.jena.tdb.store.QuadTable $r1;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r0;

        r0 := @this: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        $r1 = r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.QuadTable quadTable>;

        return $r1;
    }

    public com.hp.hpl.jena.tdb.store.TripleTable getTripleTable()
    {
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r0;
        com.hp.hpl.jena.tdb.store.TripleTable $r1;

        r0 := @this: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        $r1 = r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.TripleTable tripleTable>;

        return $r1;
    }

    protected java.util.Iterator findInDftGraph(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        java.util.Iterator $r5, $r6;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r0;
        com.hp.hpl.jena.graph.Node r2, r3, r4;
        com.hp.hpl.jena.tdb.store.TripleTable $r1;

        r0 := @this: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        r2 := @parameter0: com.hp.hpl.jena.graph.Node;

        r3 := @parameter1: com.hp.hpl.jena.graph.Node;

        r4 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.TripleTable getTripleTable()>();

        $r5 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.store.TripleTable: java.util.Iterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r2, r3, r4);

        $r6 = staticinvoke <com.hp.hpl.jena.tdb.store.DatasetGraphTDB: java.util.Iterator triples2quadsDftGraph(java.util.Iterator)>($r5);

        return $r6;
    }

    protected java.util.Iterator findInSpecificNamedGraph(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.tdb.store.QuadTable $r1;
        java.util.Iterator $r6;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r0;
        com.hp.hpl.jena.graph.Node r2, r3, r4, r5;

        r0 := @this: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        r2 := @parameter0: com.hp.hpl.jena.graph.Node;

        r3 := @parameter1: com.hp.hpl.jena.graph.Node;

        r4 := @parameter2: com.hp.hpl.jena.graph.Node;

        r5 := @parameter3: com.hp.hpl.jena.graph.Node;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.QuadTable getQuadTable()>();

        $r6 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.store.QuadTable: java.util.Iterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r2, r3, r4, r5);

        return $r6;
    }

    protected java.util.Iterator findInAnyNamedGraphs(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.tdb.store.QuadTable $r1;
        java.util.Iterator $r6;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r0;
        com.hp.hpl.jena.graph.Node r2, r3, r4, $r5;

        r0 := @this: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        r2 := @parameter0: com.hp.hpl.jena.graph.Node;

        r3 := @parameter1: com.hp.hpl.jena.graph.Node;

        r4 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.QuadTable getQuadTable()>();

        $r5 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r6 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.store.QuadTable: java.util.Iterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r5, r2, r3, r4);

        return $r6;
    }

    protected static java.util.Iterator triples2quadsDftGraph(java.util.Iterator)
    {
        com.hp.hpl.jena.graph.Node $r1;
        org.apache.jena.atlas.iterator.Iter $r2;
        java.util.Iterator r0;

        r0 := @parameter0: java.util.Iterator;

        $r1 = <com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node defaultGraphIRI>;

        $r2 = staticinvoke <com.hp.hpl.jena.tdb.store.DatasetGraphTDB: org.apache.jena.atlas.iterator.Iter triples2quads(com.hp.hpl.jena.graph.Node,java.util.Iterator)>($r1, r0);

        return $r2;
    }

    protected void addToDftGraph(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r0;
        com.hp.hpl.jena.graph.Node r2, r3, r4;
        com.hp.hpl.jena.tdb.store.TripleTable $r1;

        r0 := @this: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        r2 := @parameter0: com.hp.hpl.jena.graph.Node;

        r3 := @parameter1: com.hp.hpl.jena.graph.Node;

        r4 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.TripleTable getTripleTable()>();

        virtualinvoke $r1.<com.hp.hpl.jena.tdb.store.TripleTable: boolean add(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r2, r3, r4);

        return;
    }

    protected void addToNamedGraph(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.tdb.store.QuadTable $r1;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r0;
        com.hp.hpl.jena.graph.Node r2, r3, r4, r5;

        r0 := @this: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        r2 := @parameter0: com.hp.hpl.jena.graph.Node;

        r3 := @parameter1: com.hp.hpl.jena.graph.Node;

        r4 := @parameter2: com.hp.hpl.jena.graph.Node;

        r5 := @parameter3: com.hp.hpl.jena.graph.Node;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.QuadTable getQuadTable()>();

        virtualinvoke $r1.<com.hp.hpl.jena.tdb.store.QuadTable: boolean add(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r2, r3, r4, r5);

        return;
    }

    protected void deleteFromDftGraph(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r0;
        com.hp.hpl.jena.graph.Node r2, r3, r4;
        com.hp.hpl.jena.tdb.store.TripleTable $r1;

        r0 := @this: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        r2 := @parameter0: com.hp.hpl.jena.graph.Node;

        r3 := @parameter1: com.hp.hpl.jena.graph.Node;

        r4 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.TripleTable getTripleTable()>();

        virtualinvoke $r1.<com.hp.hpl.jena.tdb.store.TripleTable: boolean delete(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r2, r3, r4);

        return;
    }

    protected void deleteFromNamedGraph(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.tdb.store.QuadTable $r1;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r0;
        com.hp.hpl.jena.graph.Node r2, r3, r4, r5;

        r0 := @this: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        r2 := @parameter0: com.hp.hpl.jena.graph.Node;

        r3 := @parameter1: com.hp.hpl.jena.graph.Node;

        r4 := @parameter2: com.hp.hpl.jena.graph.Node;

        r5 := @parameter3: com.hp.hpl.jena.graph.Node;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.QuadTable getQuadTable()>();

        virtualinvoke $r1.<com.hp.hpl.jena.tdb.store.QuadTable: boolean delete(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r2, r3, r4, r5);

        return;
    }

    public com.hp.hpl.jena.tdb.store.GraphTDB getDefaultGraphTDB()
    {
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r0;
        com.hp.hpl.jena.graph.Graph $r1;
        com.hp.hpl.jena.tdb.store.GraphTDB $r2;

        r0 := @this: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.graph.Graph getDefaultGraph()>();

        $r2 = (com.hp.hpl.jena.tdb.store.GraphTDB) $r1;

        return $r2;
    }

    public com.hp.hpl.jena.tdb.store.GraphTDB getGraphTDB(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r0;
        com.hp.hpl.jena.graph.Node r1;
        com.hp.hpl.jena.graph.Graph $r2;
        com.hp.hpl.jena.tdb.store.GraphTDB $r3;

        r0 := @this: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.graph.Graph getGraph(com.hp.hpl.jena.graph.Node)>(r1);

        $r3 = (com.hp.hpl.jena.tdb.store.GraphTDB) $r2;

        return $r3;
    }

    protected void _close()
    {
        com.hp.hpl.jena.tdb.store.QuadTable $r2;
        com.hp.hpl.jena.tdb.store.DatasetPrefixesTDB $r3;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r0;
        com.hp.hpl.jena.tdb.store.TripleTable $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        $z0 = r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: boolean closed>;

        if $z0 == 0 goto label1;

        return;

     label1:
        r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: boolean closed> = 1;

        $r1 = r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.TripleTable tripleTable>;

        virtualinvoke $r1.<com.hp.hpl.jena.tdb.store.TripleTable: void close()>();

        $r2 = r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.QuadTable quadTable>;

        virtualinvoke $r2.<com.hp.hpl.jena.tdb.store.QuadTable: void close()>();

        $r3 = r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.DatasetPrefixesTDB prefixes>;

        virtualinvoke $r3.<com.hp.hpl.jena.tdb.store.DatasetPrefixesTDB: void close()>();

        r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.TripleTable tripleTable> = null;

        r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.QuadTable quadTable> = null;

        r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.DatasetPrefixesTDB prefixes> = null;

        return;
    }

    public boolean containsGraph(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r1;
        com.hp.hpl.jena.graph.Node r0;
        boolean $z0, $z1, $z2;

        r1 := @this: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Quad: boolean isDefaultGraphExplicit(com.hp.hpl.jena.graph.Node)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <com.hp.hpl.jena.sparql.core.Quad: boolean isUnionGraph(com.hp.hpl.jena.graph.Node)>(r0);

        if $z1 == 0 goto label2;

     label1:
        return 1;

     label2:
        $z2 = virtualinvoke r1.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: boolean _containsGraph(com.hp.hpl.jena.graph.Node)>(r0);

        return $z2;
    }

    protected boolean _containsGraph(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.tdb.store.QuadTable $r1;
        com.hp.hpl.jena.tdb.nodetable.NodeTupleTable $r2;
        com.hp.hpl.jena.graph.Node[] $r3;
        java.util.Iterator $r5;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r0;
        com.hp.hpl.jena.graph.Node r4;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        r4 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r1 = r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.QuadTable quadTable>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.store.QuadTable: com.hp.hpl.jena.tdb.nodetable.NodeTupleTable getNodeTupleTable()>();

        $r3 = newarray (com.hp.hpl.jena.graph.Node)[4];

        $r3[0] = r4;

        $r3[1] = null;

        $r3[2] = null;

        $r3[3] = null;

        $r5 = interfaceinvoke $r2.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTable: java.util.Iterator findAsNodeIds(com.hp.hpl.jena.graph.Node[])>($r3);

        if $r5 != null goto label1;

        return 0;

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        return $z0;
    }

    protected com.hp.hpl.jena.graph.Graph _createDefaultGraph()
    {
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r1;
        com.hp.hpl.jena.tdb.store.GraphTDB $r0;

        r1 := @this: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        $r0 = new com.hp.hpl.jena.tdb.store.GraphTDB;

        specialinvoke $r0.<com.hp.hpl.jena.tdb.store.GraphTDB: void <init>(com.hp.hpl.jena.tdb.store.DatasetGraphTDB,com.hp.hpl.jena.graph.Node)>(r1, null);

        return $r0;
    }

    protected com.hp.hpl.jena.graph.Graph _createNamedGraph(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r1;
        com.hp.hpl.jena.graph.Node r2;
        com.hp.hpl.jena.tdb.store.GraphTDB $r0;

        r1 := @this: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        r2 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r0 = new com.hp.hpl.jena.tdb.store.GraphTDB;

        specialinvoke $r0.<com.hp.hpl.jena.tdb.store.GraphTDB: void <init>(com.hp.hpl.jena.tdb.store.DatasetGraphTDB,com.hp.hpl.jena.graph.Node)>(r1, r2);

        return $r0;
    }

    public void setEffectiveDefaultGraph(com.hp.hpl.jena.tdb.store.GraphTDB)
    {
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r0;
        com.hp.hpl.jena.tdb.store.GraphTDB r1;

        r0 := @this: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        r1 := @parameter0: com.hp.hpl.jena.tdb.store.GraphTDB;

        r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.GraphTDB effectiveDefaultGraph> = r1;

        return;
    }

    public com.hp.hpl.jena.tdb.store.GraphTDB getEffectiveDefaultGraph()
    {
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r0;
        com.hp.hpl.jena.tdb.store.GraphTDB $r1;

        r0 := @this: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        $r1 = r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.GraphTDB effectiveDefaultGraph>;

        return $r1;
    }

    public com.hp.hpl.jena.tdb.store.StorageConfig getConfig()
    {
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r0;
        com.hp.hpl.jena.tdb.store.StorageConfig $r1;

        r0 := @this: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        $r1 = r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.StorageConfig config>;

        return $r1;
    }

    public com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformation getReorderTransform()
    {
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r0;
        com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformation $r1;

        r0 := @this: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        $r1 = r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformation transform>;

        return $r1;
    }

    public com.hp.hpl.jena.tdb.store.DatasetPrefixesTDB getPrefixes()
    {
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r0;
        com.hp.hpl.jena.tdb.store.DatasetPrefixesTDB $r1;

        r0 := @this: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        $r1 = r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.DatasetPrefixesTDB prefixes>;

        return $r1;
    }

    public java.util.Iterator listGraphNodes()
    {
        com.hp.hpl.jena.tdb.store.QuadTable $r1, $r8;
        java.util.Iterator $r3, $r11;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r0;
        com.hp.hpl.jena.tdb.nodetable.NodeTupleTable $r2, $r9;
        org.apache.jena.atlas.iterator.Transform $r5;
        com.hp.hpl.jena.tdb.nodetable.NodeTable $r10;
        org.apache.jena.atlas.iterator.Iter $r4, $r6, $r7;

        r0 := @this: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        $r1 = r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.QuadTable quadTable>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.store.QuadTable: com.hp.hpl.jena.tdb.nodetable.NodeTupleTable getNodeTupleTable()>();

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTable: java.util.Iterator findAll()>();

        $r4 = staticinvoke <org.apache.jena.atlas.iterator.Iter: org.apache.jena.atlas.iterator.Iter iter(java.util.Iterator)>($r3);

        $r5 = <com.hp.hpl.jena.tdb.store.DatasetGraphTDB: org.apache.jena.atlas.iterator.Transform project0>;

        $r6 = virtualinvoke $r4.<org.apache.jena.atlas.iterator.Iter: org.apache.jena.atlas.iterator.Iter map(org.apache.jena.atlas.iterator.Transform)>($r5);

        $r7 = virtualinvoke $r6.<org.apache.jena.atlas.iterator.Iter: org.apache.jena.atlas.iterator.Iter distinct()>();

        $r8 = r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.QuadTable quadTable>;

        $r9 = virtualinvoke $r8.<com.hp.hpl.jena.tdb.store.QuadTable: com.hp.hpl.jena.tdb.nodetable.NodeTupleTable getNodeTupleTable()>();

        $r10 = interfaceinvoke $r9.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTable: com.hp.hpl.jena.tdb.nodetable.NodeTable getNodeTable()>();

        $r11 = staticinvoke <com.hp.hpl.jena.tdb.lib.NodeLib: java.util.Iterator nodes(com.hp.hpl.jena.tdb.nodetable.NodeTable,java.util.Iterator)>($r10, $r7);

        return $r11;
    }

    public long size()
    {
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r0;
        long $l0;
        java.util.Iterator $r1;

        r0 := @this: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: java.util.Iterator listGraphNodes()>();

        $l0 = staticinvoke <org.apache.jena.atlas.iterator.Iter: long count(java.util.Iterator)>($r1);

        return $l0;
    }

    public boolean isEmpty()
    {
        com.hp.hpl.jena.tdb.store.QuadTable $r2;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r0;
        com.hp.hpl.jena.tdb.store.TripleTable $r1;
        boolean $z0, $z1, $z2;

        r0 := @this: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.TripleTable getTripleTable()>();

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.store.TripleTable: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.QuadTable getQuadTable()>();

        $z1 = virtualinvoke $r2.<com.hp.hpl.jena.tdb.store.QuadTable: boolean isEmpty()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public void clear()
    {
        com.hp.hpl.jena.tdb.store.QuadTable $r2;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r0;
        com.hp.hpl.jena.tdb.store.TripleTable $r1;

        r0 := @this: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.TripleTable getTripleTable()>();

        virtualinvoke $r1.<com.hp.hpl.jena.tdb.store.TripleTable: void clearTriples()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.QuadTable getQuadTable()>();

        virtualinvoke $r2.<com.hp.hpl.jena.tdb.store.QuadTable: void clearQuads()>();

        return;
    }

    public com.hp.hpl.jena.tdb.nodetable.NodeTupleTable chooseNodeTupleTable(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.tdb.nodetable.NodeTupleTable $r3, $r5;
        com.hp.hpl.jena.tdb.store.QuadTable $r4;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r1;
        com.hp.hpl.jena.graph.Node r0;
        com.hp.hpl.jena.tdb.store.TripleTable $r2;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        if r0 == null goto label1;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Quad: boolean isDefaultGraph(com.hp.hpl.jena.graph.Node)>(r0);

        if $z0 == 0 goto label2;

     label1:
        $r2 = virtualinvoke r1.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.TripleTable getTripleTable()>();

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.tdb.store.TripleTable: com.hp.hpl.jena.tdb.nodetable.NodeTupleTable getNodeTupleTable()>();

        return $r3;

     label2:
        $r4 = virtualinvoke r1.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.QuadTable getQuadTable()>();

        $r5 = virtualinvoke $r4.<com.hp.hpl.jena.tdb.store.QuadTable: com.hp.hpl.jena.tdb.nodetable.NodeTupleTable getNodeTupleTable()>();

        return $r5;
    }

    public void deleteAny(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        org.apache.jena.atlas.lib.Tuple $r10, $r12;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r0;
        com.hp.hpl.jena.graph.Node r1, r6, r7, r8;
        com.hp.hpl.jena.tdb.index.TupleTable $r9;
        org.apache.jena.atlas.lib.Tuple[] $r3, r4;
        int i0, i1;
        boolean $z0;
        com.hp.hpl.jena.graph.Node[] $r5, $r13;
        java.util.Iterator r14;
        com.hp.hpl.jena.tdb.nodetable.NodeTupleTable $r2;
        java.lang.Object $r11;

        r0 := @this: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r6 := @parameter1: com.hp.hpl.jena.graph.Node;

        r7 := @parameter2: com.hp.hpl.jena.graph.Node;

        r8 := @parameter3: com.hp.hpl.jena.graph.Node;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.nodetable.NodeTupleTable chooseNodeTupleTable(com.hp.hpl.jena.graph.Node)>(r1);

        virtualinvoke r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: void startUpdate()>();

        $r3 = newarray (org.apache.jena.atlas.lib.Tuple)[1000];

        r4 = (org.apache.jena.atlas.lib.Tuple[]) $r3;

     label01:
        if r1 != null goto label02;

        $r13 = newarray (com.hp.hpl.jena.graph.Node)[3];

        $r13[0] = r6;

        $r13[1] = r7;

        $r13[2] = r8;

        r14 = interfaceinvoke $r2.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTable: java.util.Iterator findAsNodeIds(com.hp.hpl.jena.graph.Node[])>($r13);

        goto label03;

     label02:
        $r5 = newarray (com.hp.hpl.jena.graph.Node)[4];

        $r5[0] = r1;

        $r5[1] = r6;

        $r5[2] = r7;

        $r5[3] = r8;

        r14 = interfaceinvoke $r2.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTable: java.util.Iterator findAsNodeIds(com.hp.hpl.jena.graph.Node[])>($r5);

     label03:
        if r14 != null goto label04;

        return;

     label04:
        i0 = 0;

     label05:
        if i0 >= 1000 goto label07;

        $z0 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label06;

        goto label07;

     label06:
        $r11 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (org.apache.jena.atlas.lib.Tuple) $r11;

        r4[i0] = $r12;

        i0 = i0 + 1;

        goto label05;

     label07:
        i1 = 0;

     label08:
        if i1 >= i0 goto label09;

        $r9 = interfaceinvoke $r2.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTable: com.hp.hpl.jena.tdb.index.TupleTable getTupleTable()>();

        $r10 = r4[i1];

        virtualinvoke $r9.<com.hp.hpl.jena.tdb.index.TupleTable: boolean delete(org.apache.jena.atlas.lib.Tuple)>($r10);

        r4[i1] = null;

        i1 = i1 + 1;

        goto label08;

     label09:
        if i0 >= 1000 goto label10;

        goto label11;

     label10:
        goto label01;

     label11:
        virtualinvoke r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: void finishUpdate()>();

        return;
    }

    public com.hp.hpl.jena.tdb.base.file.Location getLocation()
    {
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r0;
        com.hp.hpl.jena.tdb.base.file.Location $r2;
        com.hp.hpl.jena.tdb.store.StorageConfig $r1;

        r0 := @this: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        $r1 = r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.StorageConfig config>;

        $r2 = $r1.<com.hp.hpl.jena.tdb.store.StorageConfig: com.hp.hpl.jena.tdb.base.file.Location location>;

        return $r2;
    }

    public void sync()
    {
        com.hp.hpl.jena.tdb.store.QuadTable $r2;
        com.hp.hpl.jena.tdb.store.DatasetPrefixesTDB $r3;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r0;
        com.hp.hpl.jena.tdb.store.TripleTable $r1;

        r0 := @this: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        $r1 = r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.TripleTable tripleTable>;

        virtualinvoke $r1.<com.hp.hpl.jena.tdb.store.TripleTable: void sync()>();

        $r2 = r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.QuadTable quadTable>;

        virtualinvoke $r2.<com.hp.hpl.jena.tdb.store.QuadTable: void sync()>();

        $r3 = r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.DatasetPrefixesTDB prefixes>;

        virtualinvoke $r3.<com.hp.hpl.jena.tdb.store.DatasetPrefixesTDB: void sync()>();

        return;
    }

    public void startRequest()
    {
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r0;

        r0 := @this: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        return;
    }

    public void finishRequest()
    {
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r0;

        r0 := @this: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        return;
    }

    public com.hp.hpl.jena.query.Dataset toDataset()
    {
        com.hp.hpl.jena.query.Dataset $r1;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r0;

        r0 := @this: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.core.DatasetImpl: com.hp.hpl.jena.query.Dataset wrap(com.hp.hpl.jena.sparql.core.DatasetGraph)>(r0);

        return $r1;
    }

    public void addGraph(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r0;
        com.hp.hpl.jena.graph.Node r1;
        com.hp.hpl.jena.graph.Graph $r2, r3;

        r0 := @this: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r3 := @parameter1: com.hp.hpl.jena.graph.Graph;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.graph.Graph getGraph(com.hp.hpl.jena.graph.Node)>(r1);

        staticinvoke <com.hp.hpl.jena.graph.GraphUtil: void addInto(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Graph)>($r2, r3);

        return;
    }

    public void setDefaultGraph(com.hp.hpl.jena.graph.Graph)
    {
        java.lang.UnsupportedOperationException $r0;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r1;
        com.hp.hpl.jena.graph.Graph r2;

        r1 := @this: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        r2 := @parameter0: com.hp.hpl.jena.graph.Graph;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Can\'t set default graph via GraphStore on a TDB-backed dataset");

        throw $r0;
    }

    public void startUpdate()
    {
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r0;

        r0 := @this: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        return;
    }

    public void finishUpdate()
    {
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r0;

        r0 := @this: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        return;
    }

    public void startRead()
    {
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r0;

        r0 := @this: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        return;
    }

    public void finishRead()
    {
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r0;

        r0 := @this: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        return;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB$1 $r0;

        <com.hp.hpl.jena.tdb.store.DatasetGraphTDB: int sliceSize> = 1000;

        $r0 = new com.hp.hpl.jena.tdb.store.DatasetGraphTDB$1;

        specialinvoke $r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB$1: void <init>()>();

        <com.hp.hpl.jena.tdb.store.DatasetGraphTDB: org.apache.jena.atlas.iterator.Transform project0> = $r0;

        return;
    }
}
