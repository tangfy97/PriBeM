public abstract class org.xmlpull.v1.builder.XmlInfosetBuilder extends java.lang.Object
{
    protected org.xmlpull.v1.XmlPullParserFactory factory;

    public void <init>()
    {
        org.xmlpull.v1.builder.XmlInfosetBuilder r0;

        r0 := @this: org.xmlpull.v1.builder.XmlInfosetBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.xmlpull.v1.builder.XmlInfosetBuilder newInstance() throws org.xmlpull.v1.builder.XmlBuilderException
    {
        org.xmlpull.v1.builder.impl.XmlInfosetBuilderImpl $r0;
        org.xmlpull.v1.XmlPullParserException $r4;
        org.xmlpull.v1.XmlPullParserFactory $r2, $r3;
        java.lang.StringBuffer $r6, $r7, $r8;
        java.lang.String $r1, $r9;
        org.xmlpull.v1.builder.XmlBuilderException $r5;

        $r0 = new org.xmlpull.v1.builder.impl.XmlInfosetBuilderImpl;

        specialinvoke $r0.<org.xmlpull.v1.builder.impl.XmlInfosetBuilderImpl: void <init>()>();

     label1:
        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("org.xmlpull.v1.XmlPullParserFactory");

        $r2 = staticinvoke <org.xmlpull.v1.XmlPullParserFactory: org.xmlpull.v1.XmlPullParserFactory newInstance(java.lang.String,java.lang.Class)>($r1, null);

        $r0.<org.xmlpull.v1.builder.XmlInfosetBuilder: org.xmlpull.v1.XmlPullParserFactory factory> = $r2;

        $r3 = $r0.<org.xmlpull.v1.builder.XmlInfosetBuilder: org.xmlpull.v1.XmlPullParserFactory factory>;

        virtualinvoke $r3.<org.xmlpull.v1.XmlPullParserFactory: void setNamespaceAware(boolean)>(1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new org.xmlpull.v1.builder.XmlBuilderException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("could not create XmlPull factory:");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r4);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String,java.lang.Throwable)>($r9, $r4);

        throw $r5;

     label4:
        return $r0;

        catch org.xmlpull.v1.XmlPullParserException from label1 to label2 with label3;
    }

    public static org.xmlpull.v1.builder.XmlInfosetBuilder newInstance(org.xmlpull.v1.XmlPullParserFactory) throws org.xmlpull.v1.builder.XmlBuilderException
    {
        org.xmlpull.v1.XmlPullParserFactory r0, $r2;
        org.xmlpull.v1.builder.impl.XmlInfosetBuilderImpl $r1;
        java.lang.IllegalArgumentException $r3;

        r0 := @parameter0: org.xmlpull.v1.XmlPullParserFactory;

        if r0 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;

     label1:
        $r1 = new org.xmlpull.v1.builder.impl.XmlInfosetBuilderImpl;

        specialinvoke $r1.<org.xmlpull.v1.builder.impl.XmlInfosetBuilderImpl: void <init>()>();

        $r1.<org.xmlpull.v1.builder.XmlInfosetBuilder: org.xmlpull.v1.XmlPullParserFactory factory> = r0;

        $r2 = $r1.<org.xmlpull.v1.builder.XmlInfosetBuilder: org.xmlpull.v1.XmlPullParserFactory factory>;

        virtualinvoke $r2.<org.xmlpull.v1.XmlPullParserFactory: void setNamespaceAware(boolean)>(1);

        return $r1;
    }

    public org.xmlpull.v1.XmlPullParserFactory getFactory() throws org.xmlpull.v1.builder.XmlBuilderException
    {
        org.xmlpull.v1.builder.XmlInfosetBuilder r0;
        org.xmlpull.v1.XmlPullParserFactory $r1;

        r0 := @this: org.xmlpull.v1.builder.XmlInfosetBuilder;

        $r1 = r0.<org.xmlpull.v1.builder.XmlInfosetBuilder: org.xmlpull.v1.XmlPullParserFactory factory>;

        return $r1;
    }

    public org.xmlpull.v1.builder.XmlDocument newDocument() throws org.xmlpull.v1.builder.XmlBuilderException
    {
        org.xmlpull.v1.builder.XmlDocument $r1;
        org.xmlpull.v1.builder.XmlInfosetBuilder r0;

        r0 := @this: org.xmlpull.v1.builder.XmlInfosetBuilder;

        $r1 = virtualinvoke r0.<org.xmlpull.v1.builder.XmlInfosetBuilder: org.xmlpull.v1.builder.XmlDocument newDocument(java.lang.String,java.lang.Boolean,java.lang.String)>(null, null, null);

        return $r1;
    }

    public abstract org.xmlpull.v1.builder.XmlDocument newDocument(java.lang.String, java.lang.Boolean, java.lang.String) throws org.xmlpull.v1.builder.XmlBuilderException;

    public abstract org.xmlpull.v1.builder.XmlElement newFragment(java.lang.String) throws org.xmlpull.v1.builder.XmlBuilderException;

    public abstract org.xmlpull.v1.builder.XmlElement newFragment(java.lang.String, java.lang.String) throws org.xmlpull.v1.builder.XmlBuilderException;

    public abstract org.xmlpull.v1.builder.XmlElement newFragment(org.xmlpull.v1.builder.XmlNamespace, java.lang.String) throws org.xmlpull.v1.builder.XmlBuilderException;

    public abstract org.xmlpull.v1.builder.XmlNamespace newNamespace(java.lang.String) throws org.xmlpull.v1.builder.XmlBuilderException;

    public abstract org.xmlpull.v1.builder.XmlNamespace newNamespace(java.lang.String, java.lang.String) throws org.xmlpull.v1.builder.XmlBuilderException;

    public abstract org.xmlpull.v1.builder.XmlDocument parse(org.xmlpull.v1.XmlPullParser) throws org.xmlpull.v1.builder.XmlBuilderException;

    public abstract java.lang.Object parseItem(org.xmlpull.v1.XmlPullParser) throws org.xmlpull.v1.builder.XmlBuilderException;

    public abstract org.xmlpull.v1.builder.XmlElement parseStartTag(org.xmlpull.v1.XmlPullParser) throws org.xmlpull.v1.builder.XmlBuilderException;

    public org.xmlpull.v1.builder.XmlDocument parseInputStream(java.io.InputStream) throws org.xmlpull.v1.builder.XmlBuilderException
    {
        org.xmlpull.v1.XmlPullParserException $r5;
        org.xmlpull.v1.XmlPullParserFactory $r1;
        org.xmlpull.v1.builder.XmlBuilderException $r6;
        org.xmlpull.v1.builder.XmlDocument $r4;
        org.xmlpull.v1.builder.XmlInfosetBuilder r0;
        org.xmlpull.v1.XmlPullParser $r2;
        java.io.InputStream r3;

        r0 := @this: org.xmlpull.v1.builder.XmlInfosetBuilder;

        r3 := @parameter0: java.io.InputStream;

     label1:
        $r1 = r0.<org.xmlpull.v1.builder.XmlInfosetBuilder: org.xmlpull.v1.XmlPullParserFactory factory>;

        $r2 = virtualinvoke $r1.<org.xmlpull.v1.XmlPullParserFactory: org.xmlpull.v1.XmlPullParser newPullParser()>();

        interfaceinvoke $r2.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(r3, null);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.xmlpull.v1.builder.XmlBuilderException;

        specialinvoke $r6.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String,java.lang.Throwable)>("could not start parsing input stream", $r5);

        throw $r6;

     label4:
        $r4 = virtualinvoke r0.<org.xmlpull.v1.builder.XmlInfosetBuilder: org.xmlpull.v1.builder.XmlDocument parse(org.xmlpull.v1.XmlPullParser)>($r2);

        return $r4;

        catch org.xmlpull.v1.XmlPullParserException from label1 to label2 with label3;
    }

    public org.xmlpull.v1.builder.XmlDocument parseInputStream(java.io.InputStream, java.lang.String) throws org.xmlpull.v1.builder.XmlBuilderException
    {
        org.xmlpull.v1.builder.XmlDocument $r5;
        org.xmlpull.v1.builder.XmlInfosetBuilder r0;
        org.xmlpull.v1.XmlPullParserException $r6;
        org.xmlpull.v1.XmlPullParserFactory $r1;
        java.lang.StringBuffer $r8, $r9, $r10, $r11;
        java.lang.String r4, $r12;
        org.xmlpull.v1.builder.XmlBuilderException $r7;
        org.xmlpull.v1.XmlPullParser $r2;
        java.io.InputStream r3;

        r0 := @this: org.xmlpull.v1.builder.XmlInfosetBuilder;

        r3 := @parameter0: java.io.InputStream;

        r4 := @parameter1: java.lang.String;

     label1:
        $r1 = r0.<org.xmlpull.v1.builder.XmlInfosetBuilder: org.xmlpull.v1.XmlPullParserFactory factory>;

        $r2 = virtualinvoke $r1.<org.xmlpull.v1.XmlPullParserFactory: org.xmlpull.v1.XmlPullParser newPullParser()>();

        interfaceinvoke $r2.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(r3, r4);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = new org.xmlpull.v1.builder.XmlBuilderException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("could not start parsing input stream (encoding=");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String,java.lang.Throwable)>($r12, $r6);

        throw $r7;

     label4:
        $r5 = virtualinvoke r0.<org.xmlpull.v1.builder.XmlInfosetBuilder: org.xmlpull.v1.builder.XmlDocument parse(org.xmlpull.v1.XmlPullParser)>($r2);

        return $r5;

        catch org.xmlpull.v1.XmlPullParserException from label1 to label2 with label3;
    }

    public org.xmlpull.v1.builder.XmlDocument parseReader(java.io.Reader) throws org.xmlpull.v1.builder.XmlBuilderException
    {
        org.xmlpull.v1.XmlPullParserException $r5;
        org.xmlpull.v1.XmlPullParserFactory $r1;
        java.io.Reader r3;
        org.xmlpull.v1.builder.XmlBuilderException $r6;
        org.xmlpull.v1.builder.XmlDocument $r4;
        org.xmlpull.v1.builder.XmlInfosetBuilder r0;
        org.xmlpull.v1.XmlPullParser $r2;

        r0 := @this: org.xmlpull.v1.builder.XmlInfosetBuilder;

        r3 := @parameter0: java.io.Reader;

     label1:
        $r1 = r0.<org.xmlpull.v1.builder.XmlInfosetBuilder: org.xmlpull.v1.XmlPullParserFactory factory>;

        $r2 = virtualinvoke $r1.<org.xmlpull.v1.XmlPullParserFactory: org.xmlpull.v1.XmlPullParser newPullParser()>();

        interfaceinvoke $r2.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.Reader)>(r3);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.xmlpull.v1.builder.XmlBuilderException;

        specialinvoke $r6.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String,java.lang.Throwable)>("could not start parsing input from reader", $r5);

        throw $r6;

     label4:
        $r4 = virtualinvoke r0.<org.xmlpull.v1.builder.XmlInfosetBuilder: org.xmlpull.v1.builder.XmlDocument parse(org.xmlpull.v1.XmlPullParser)>($r2);

        return $r4;

        catch org.xmlpull.v1.XmlPullParserException from label1 to label2 with label3;
    }

    public abstract org.xmlpull.v1.builder.XmlDocument parseLocation(java.lang.String) throws org.xmlpull.v1.builder.XmlBuilderException;

    public abstract org.xmlpull.v1.builder.XmlElement parseFragment(org.xmlpull.v1.XmlPullParser) throws org.xmlpull.v1.builder.XmlBuilderException;

    public org.xmlpull.v1.builder.XmlElement parseFragmentFromInputStream(java.io.InputStream) throws org.xmlpull.v1.builder.XmlBuilderException
    {
        java.io.IOException $r7;
        org.xmlpull.v1.builder.XmlInfosetBuilder r0;
        org.xmlpull.v1.XmlPullParserException $r5;
        org.xmlpull.v1.builder.XmlElement $r4;
        org.xmlpull.v1.XmlPullParserFactory $r1;
        org.xmlpull.v1.builder.XmlBuilderException $r6, $r8;
        org.xmlpull.v1.XmlPullParser $r2;
        java.io.InputStream r3;

        r0 := @this: org.xmlpull.v1.builder.XmlInfosetBuilder;

        r3 := @parameter0: java.io.InputStream;

     label1:
        $r1 = r0.<org.xmlpull.v1.builder.XmlInfosetBuilder: org.xmlpull.v1.XmlPullParserFactory factory>;

        $r2 = virtualinvoke $r1.<org.xmlpull.v1.XmlPullParserFactory: org.xmlpull.v1.XmlPullParser newPullParser()>();

        interfaceinvoke $r2.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(r3, null);

     label2:
        interfaceinvoke $r2.<org.xmlpull.v1.XmlPullParser: int nextTag()>();

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        $r8 = new org.xmlpull.v1.builder.XmlBuilderException;

        specialinvoke $r8.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String,java.lang.Throwable)>("IO error when starting to parse input stream", $r7);

        throw $r8;

     label5:
        goto label7;

     label6:
        $r5 := @caughtexception;

        $r6 = new org.xmlpull.v1.builder.XmlBuilderException;

        specialinvoke $r6.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String,java.lang.Throwable)>("could not start parsing input stream", $r5);

        throw $r6;

     label7:
        $r4 = virtualinvoke r0.<org.xmlpull.v1.builder.XmlInfosetBuilder: org.xmlpull.v1.builder.XmlElement parseFragment(org.xmlpull.v1.XmlPullParser)>($r2);

        return $r4;

        catch java.io.IOException from label2 to label3 with label4;
        catch org.xmlpull.v1.XmlPullParserException from label1 to label5 with label6;
    }

    public org.xmlpull.v1.builder.XmlElement parseFragementFromInputStream(java.io.InputStream, java.lang.String) throws org.xmlpull.v1.builder.XmlBuilderException
    {
        java.lang.StringBuffer $r8, $r9, $r10, $r11, $r15, $r16, $r17, $r18;
        java.lang.String r4, $r12, $r19;
        org.xmlpull.v1.builder.XmlBuilderException $r7, $r14;
        org.xmlpull.v1.XmlPullParser $r2;
        java.io.IOException $r13;
        org.xmlpull.v1.builder.XmlInfosetBuilder r0;
        org.xmlpull.v1.XmlPullParserException $r6;
        org.xmlpull.v1.builder.XmlElement $r5;
        org.xmlpull.v1.XmlPullParserFactory $r1;
        java.io.InputStream r3;

        r0 := @this: org.xmlpull.v1.builder.XmlInfosetBuilder;

        r3 := @parameter0: java.io.InputStream;

        r4 := @parameter1: java.lang.String;

     label1:
        $r1 = r0.<org.xmlpull.v1.builder.XmlInfosetBuilder: org.xmlpull.v1.XmlPullParserFactory factory>;

        $r2 = virtualinvoke $r1.<org.xmlpull.v1.XmlPullParserFactory: org.xmlpull.v1.XmlPullParser newPullParser()>();

        interfaceinvoke $r2.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(r3, r4);

     label2:
        interfaceinvoke $r2.<org.xmlpull.v1.XmlPullParser: int nextTag()>();

     label3:
        goto label5;

     label4:
        $r13 := @caughtexception;

        $r14 = new org.xmlpull.v1.builder.XmlBuilderException;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("IO error when starting to parse input stream (encoding=");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r14.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String,java.lang.Throwable)>($r19, $r13);

        throw $r14;

     label5:
        goto label7;

     label6:
        $r6 := @caughtexception;

        $r7 = new org.xmlpull.v1.builder.XmlBuilderException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("could not start parsing input stream (encoding=");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String,java.lang.Throwable)>($r12, $r6);

        throw $r7;

     label7:
        $r5 = virtualinvoke r0.<org.xmlpull.v1.builder.XmlInfosetBuilder: org.xmlpull.v1.builder.XmlElement parseFragment(org.xmlpull.v1.XmlPullParser)>($r2);

        return $r5;

        catch java.io.IOException from label2 to label3 with label4;
        catch org.xmlpull.v1.XmlPullParserException from label1 to label5 with label6;
    }

    public org.xmlpull.v1.builder.XmlElement parseFragmentFromReader(java.io.Reader) throws org.xmlpull.v1.builder.XmlBuilderException
    {
        java.io.IOException $r7;
        java.io.Reader r3;
        org.xmlpull.v1.builder.XmlInfosetBuilder r0;
        org.xmlpull.v1.XmlPullParserException $r5;
        org.xmlpull.v1.builder.XmlElement $r4;
        org.xmlpull.v1.XmlPullParserFactory $r1;
        org.xmlpull.v1.builder.XmlBuilderException $r6, $r8;
        org.xmlpull.v1.XmlPullParser $r2;

        r0 := @this: org.xmlpull.v1.builder.XmlInfosetBuilder;

        r3 := @parameter0: java.io.Reader;

     label1:
        $r1 = r0.<org.xmlpull.v1.builder.XmlInfosetBuilder: org.xmlpull.v1.XmlPullParserFactory factory>;

        $r2 = virtualinvoke $r1.<org.xmlpull.v1.XmlPullParserFactory: org.xmlpull.v1.XmlPullParser newPullParser()>();

        interfaceinvoke $r2.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.Reader)>(r3);

     label2:
        interfaceinvoke $r2.<org.xmlpull.v1.XmlPullParser: int nextTag()>();

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        $r8 = new org.xmlpull.v1.builder.XmlBuilderException;

        specialinvoke $r8.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String,java.lang.Throwable)>("IO error when starting to parse from reader", $r7);

        throw $r8;

     label5:
        goto label7;

     label6:
        $r5 := @caughtexception;

        $r6 = new org.xmlpull.v1.builder.XmlBuilderException;

        specialinvoke $r6.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String,java.lang.Throwable)>("could not start parsing input from reader", $r5);

        throw $r6;

     label7:
        $r4 = virtualinvoke r0.<org.xmlpull.v1.builder.XmlInfosetBuilder: org.xmlpull.v1.builder.XmlElement parseFragment(org.xmlpull.v1.XmlPullParser)>($r2);

        return $r4;

        catch java.io.IOException from label2 to label3 with label4;
        catch org.xmlpull.v1.XmlPullParserException from label1 to label5 with label6;
    }

    public void skipSubTree(org.xmlpull.v1.XmlPullParser) throws org.xmlpull.v1.builder.XmlBuilderException
    {
        java.io.IOException $r1;
        org.xmlpull.v1.builder.XmlInfosetBuilder r5;
        org.xmlpull.v1.XmlPullParserException $r3;
        int $i0, i1, $i3;
        org.xmlpull.v1.builder.XmlBuilderException $r6, $r7;
        org.xmlpull.v1.XmlPullParser r0;

        r5 := @this: org.xmlpull.v1.builder.XmlInfosetBuilder;

        r0 := @parameter0: org.xmlpull.v1.XmlPullParser;

     label1:
        interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(2, null, null);

        i1 = 1;

     label2:
        if i1 <= 0 goto label5;

        $i0 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: int next()>();

        if $i0 != 3 goto label3;

        $i3 = (int) -1;

        i1 = i1 + $i3;

        goto label4;

     label3:
        if $i0 != 2 goto label4;

        i1 = i1 + 1;

     label4:
        goto label2;

     label5:
        goto label8;

     label6:
        $r3 := @caughtexception;

        $r6 = new org.xmlpull.v1.builder.XmlBuilderException;

        specialinvoke $r6.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String,java.lang.Throwable)>("could not skip subtree", $r3);

        throw $r6;

     label7:
        $r1 := @caughtexception;

        $r7 = new org.xmlpull.v1.builder.XmlBuilderException;

        specialinvoke $r7.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String,java.lang.Throwable)>("IO error when skipping subtree", $r1);

        throw $r7;

     label8:
        return;

        catch org.xmlpull.v1.XmlPullParserException from label1 to label5 with label6;
        catch java.io.IOException from label1 to label5 with label7;
    }

    public abstract void serializeStartTag(org.xmlpull.v1.builder.XmlElement, org.xmlpull.v1.XmlSerializer) throws org.xmlpull.v1.builder.XmlBuilderException;

    public abstract void serializeEndTag(org.xmlpull.v1.builder.XmlElement, org.xmlpull.v1.XmlSerializer) throws org.xmlpull.v1.builder.XmlBuilderException;

    public abstract void serialize(java.lang.Object, org.xmlpull.v1.XmlSerializer) throws org.xmlpull.v1.builder.XmlBuilderException;

    public abstract void serializeItem(java.lang.Object, org.xmlpull.v1.XmlSerializer) throws org.xmlpull.v1.builder.XmlBuilderException;

    public void serializeToOutputStream(java.lang.Object, java.io.OutputStream) throws org.xmlpull.v1.builder.XmlBuilderException
    {
        java.io.OutputStream r2;
        java.lang.Object r1;
        org.xmlpull.v1.builder.XmlInfosetBuilder r0;

        r0 := @this: org.xmlpull.v1.builder.XmlInfosetBuilder;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.io.OutputStream;

        virtualinvoke r0.<org.xmlpull.v1.builder.XmlInfosetBuilder: void serializeToOutputStream(java.lang.Object,java.io.OutputStream,java.lang.String)>(r1, r2, "UTF8");

        return;
    }

    public void serializeToOutputStream(java.lang.Object, java.io.OutputStream, java.lang.String) throws org.xmlpull.v1.builder.XmlBuilderException
    {
        java.io.OutputStream r3;
        java.io.IOException $r6;
        org.xmlpull.v1.builder.XmlInfosetBuilder r0;
        org.xmlpull.v1.XmlSerializer $r2;
        java.lang.Exception $r8;
        org.xmlpull.v1.XmlPullParserFactory $r1;
        java.lang.StringBuffer $r10, $r11, $r12, $r13;
        java.lang.Object r5;
        java.lang.String r4, $r14;
        org.xmlpull.v1.builder.XmlBuilderException $r7, $r9;

        r0 := @this: org.xmlpull.v1.builder.XmlInfosetBuilder;

        r5 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.io.OutputStream;

        r4 := @parameter2: java.lang.String;

     label1:
        $r1 = r0.<org.xmlpull.v1.builder.XmlInfosetBuilder: org.xmlpull.v1.XmlPullParserFactory factory>;

        $r2 = virtualinvoke $r1.<org.xmlpull.v1.XmlPullParserFactory: org.xmlpull.v1.XmlSerializer newSerializer()>();

        interfaceinvoke $r2.<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>(r3, r4);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        $r9 = new org.xmlpull.v1.builder.XmlBuilderException;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("could not serialize node to output stream (encoding=");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r9.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String,java.lang.Throwable)>($r14, $r8);

        throw $r9;

     label4:
        virtualinvoke r0.<org.xmlpull.v1.builder.XmlInfosetBuilder: void serialize(java.lang.Object,org.xmlpull.v1.XmlSerializer)>(r5, $r2);

     label5:
        interfaceinvoke $r2.<org.xmlpull.v1.XmlSerializer: void flush()>();

     label6:
        goto label8;

     label7:
        $r6 := @caughtexception;

        $r7 = new org.xmlpull.v1.builder.XmlBuilderException;

        specialinvoke $r7.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String,java.lang.Throwable)>("could not flush output", $r6);

        throw $r7;

     label8:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.io.IOException from label5 to label6 with label7;
    }

    public void serializeToWriter(java.lang.Object, java.io.Writer) throws org.xmlpull.v1.builder.XmlBuilderException
    {
        java.io.IOException $r5;
        org.xmlpull.v1.builder.XmlInfosetBuilder r0;
        org.xmlpull.v1.XmlSerializer $r2;
        java.lang.Exception $r7;
        org.xmlpull.v1.XmlPullParserFactory $r1;
        java.io.Writer r3;
        java.lang.Object r4;
        org.xmlpull.v1.builder.XmlBuilderException $r6, $r8;

        r0 := @this: org.xmlpull.v1.builder.XmlInfosetBuilder;

        r4 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.io.Writer;

     label1:
        $r1 = r0.<org.xmlpull.v1.builder.XmlInfosetBuilder: org.xmlpull.v1.XmlPullParserFactory factory>;

        $r2 = virtualinvoke $r1.<org.xmlpull.v1.XmlPullParserFactory: org.xmlpull.v1.XmlSerializer newSerializer()>();

        interfaceinvoke $r2.<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.Writer)>(r3);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        $r8 = new org.xmlpull.v1.builder.XmlBuilderException;

        specialinvoke $r8.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String,java.lang.Throwable)>("could not serialize node to writer", $r7);

        throw $r8;

     label4:
        virtualinvoke r0.<org.xmlpull.v1.builder.XmlInfosetBuilder: void serialize(java.lang.Object,org.xmlpull.v1.XmlSerializer)>(r4, $r2);

     label5:
        interfaceinvoke $r2.<org.xmlpull.v1.XmlSerializer: void flush()>();

     label6:
        goto label8;

     label7:
        $r5 := @caughtexception;

        $r6 = new org.xmlpull.v1.builder.XmlBuilderException;

        specialinvoke $r6.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String,java.lang.Throwable)>("could not flush output", $r5);

        throw $r6;

     label8:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.io.IOException from label5 to label6 with label7;
    }

    public java.lang.String serializeToString(java.lang.Object) throws org.xmlpull.v1.builder.XmlBuilderException
    {
        java.io.StringWriter $r0;
        java.lang.Object r2;
        java.lang.String $r3;
        org.xmlpull.v1.builder.XmlInfosetBuilder r1;

        r1 := @this: org.xmlpull.v1.builder.XmlInfosetBuilder;

        r2 := @parameter0: java.lang.Object;

        $r0 = new java.io.StringWriter;

        specialinvoke $r0.<java.io.StringWriter: void <init>()>();

        virtualinvoke r1.<org.xmlpull.v1.builder.XmlInfosetBuilder: void serializeToWriter(java.lang.Object,java.io.Writer)>(r2, $r0);

        $r3 = virtualinvoke $r0.<java.io.StringWriter: java.lang.String toString()>();

        return $r3;
    }
}
