public final class org.apache.lucene.analysis.ngram.EdgeNGramTokenizer extends org.apache.lucene.analysis.Tokenizer
{
    public static final org.apache.lucene.analysis.ngram.EdgeNGramTokenizer$Side DEFAULT_SIDE;
    public static final int DEFAULT_MAX_GRAM_SIZE;
    public static final int DEFAULT_MIN_GRAM_SIZE;
    private final org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAtt;
    private final org.apache.lucene.analysis.tokenattributes.OffsetAttribute offsetAtt;
    private final org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute posIncrAtt;
    private int minGram;
    private int maxGram;
    private int gramSize;
    private org.apache.lucene.analysis.ngram.EdgeNGramTokenizer$Side side;
    private boolean started;
    private int inLen;
    private int charsRead;
    private java.lang.String inStr;

    public void <init>(java.io.Reader, org.apache.lucene.analysis.ngram.EdgeNGramTokenizer$Side, int, int)
    {
        org.apache.lucene.analysis.tokenattributes.CharTermAttribute $r3;
        org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute $r7;
        java.io.Reader r1;
        org.apache.lucene.analysis.tokenattributes.OffsetAttribute $r5;
        int i0, i1;
        org.apache.lucene.util.Attribute $r2, $r4, $r6;
        org.apache.lucene.analysis.ngram.EdgeNGramTokenizer$Side r8;
        org.apache.lucene.analysis.ngram.EdgeNGramTokenizer r0;

        r0 := @this: org.apache.lucene.analysis.ngram.EdgeNGramTokenizer;

        r1 := @parameter0: java.io.Reader;

        r8 := @parameter1: org.apache.lucene.analysis.ngram.EdgeNGramTokenizer$Side;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<org.apache.lucene.analysis.Tokenizer: void <init>(java.io.Reader)>(r1);

        $r2 = virtualinvoke r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: org.apache.lucene.util.Attribute addAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");

        $r3 = (org.apache.lucene.analysis.tokenattributes.CharTermAttribute) $r2;

        r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAtt> = $r3;

        $r4 = virtualinvoke r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: org.apache.lucene.util.Attribute addAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/OffsetAttribute;");

        $r5 = (org.apache.lucene.analysis.tokenattributes.OffsetAttribute) $r4;

        r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: org.apache.lucene.analysis.tokenattributes.OffsetAttribute offsetAtt> = $r5;

        $r6 = virtualinvoke r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: org.apache.lucene.util.Attribute addAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/PositionIncrementAttribute;");

        $r7 = (org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute) $r6;

        r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute posIncrAtt> = $r7;

        specialinvoke r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: void init(org.apache.lucene.analysis.ngram.EdgeNGramTokenizer$Side,int,int)>(r8, i0, i1);

        return;
    }

    public void <init>(org.apache.lucene.util.AttributeSource$AttributeFactory, java.io.Reader, org.apache.lucene.analysis.ngram.EdgeNGramTokenizer$Side, int, int)
    {
        org.apache.lucene.analysis.tokenattributes.CharTermAttribute $r4;
        org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute $r8;
        org.apache.lucene.util.AttributeSource$AttributeFactory r1;
        java.io.Reader r2;
        org.apache.lucene.analysis.tokenattributes.OffsetAttribute $r6;
        int i0, i1;
        org.apache.lucene.util.Attribute $r3, $r5, $r7;
        org.apache.lucene.analysis.ngram.EdgeNGramTokenizer$Side r9;
        org.apache.lucene.analysis.ngram.EdgeNGramTokenizer r0;

        r0 := @this: org.apache.lucene.analysis.ngram.EdgeNGramTokenizer;

        r1 := @parameter0: org.apache.lucene.util.AttributeSource$AttributeFactory;

        r2 := @parameter1: java.io.Reader;

        r9 := @parameter2: org.apache.lucene.analysis.ngram.EdgeNGramTokenizer$Side;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        specialinvoke r0.<org.apache.lucene.analysis.Tokenizer: void <init>(org.apache.lucene.util.AttributeSource$AttributeFactory,java.io.Reader)>(r1, r2);

        $r3 = virtualinvoke r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: org.apache.lucene.util.Attribute addAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");

        $r4 = (org.apache.lucene.analysis.tokenattributes.CharTermAttribute) $r3;

        r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAtt> = $r4;

        $r5 = virtualinvoke r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: org.apache.lucene.util.Attribute addAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/OffsetAttribute;");

        $r6 = (org.apache.lucene.analysis.tokenattributes.OffsetAttribute) $r5;

        r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: org.apache.lucene.analysis.tokenattributes.OffsetAttribute offsetAtt> = $r6;

        $r7 = virtualinvoke r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: org.apache.lucene.util.Attribute addAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/PositionIncrementAttribute;");

        $r8 = (org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute) $r7;

        r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute posIncrAtt> = $r8;

        specialinvoke r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: void init(org.apache.lucene.analysis.ngram.EdgeNGramTokenizer$Side,int,int)>(r9, i0, i1);

        return;
    }

    public void <init>(java.io.Reader, java.lang.String, int, int)
    {
        int i0, i1;
        java.io.Reader r1;
        java.lang.String r2;
        org.apache.lucene.analysis.ngram.EdgeNGramTokenizer$Side $r3;
        org.apache.lucene.analysis.ngram.EdgeNGramTokenizer r0;

        r0 := @this: org.apache.lucene.analysis.ngram.EdgeNGramTokenizer;

        r1 := @parameter0: java.io.Reader;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r3 = staticinvoke <org.apache.lucene.analysis.ngram.EdgeNGramTokenizer$Side: org.apache.lucene.analysis.ngram.EdgeNGramTokenizer$Side getSide(java.lang.String)>(r2);

        specialinvoke r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: void <init>(java.io.Reader,org.apache.lucene.analysis.ngram.EdgeNGramTokenizer$Side,int,int)>(r1, $r3, i0, i1);

        return;
    }

    public void <init>(org.apache.lucene.util.AttributeSource$AttributeFactory, java.io.Reader, java.lang.String, int, int)
    {
        org.apache.lucene.util.AttributeSource$AttributeFactory r1;
        int i0, i1;
        java.io.Reader r2;
        java.lang.String r3;
        org.apache.lucene.analysis.ngram.EdgeNGramTokenizer$Side $r4;
        org.apache.lucene.analysis.ngram.EdgeNGramTokenizer r0;

        r0 := @this: org.apache.lucene.analysis.ngram.EdgeNGramTokenizer;

        r1 := @parameter0: org.apache.lucene.util.AttributeSource$AttributeFactory;

        r2 := @parameter1: java.io.Reader;

        r3 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        $r4 = staticinvoke <org.apache.lucene.analysis.ngram.EdgeNGramTokenizer$Side: org.apache.lucene.analysis.ngram.EdgeNGramTokenizer$Side getSide(java.lang.String)>(r3);

        specialinvoke r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: void <init>(org.apache.lucene.util.AttributeSource$AttributeFactory,java.io.Reader,org.apache.lucene.analysis.ngram.EdgeNGramTokenizer$Side,int,int)>(r1, r2, $r4, i0, i1);

        return;
    }

    private void init(org.apache.lucene.analysis.ngram.EdgeNGramTokenizer$Side, int, int)
    {
        int i0, i1;
        org.apache.lucene.analysis.ngram.EdgeNGramTokenizer$Side r0;
        java.lang.IllegalArgumentException $r2, $r3, $r4;
        org.apache.lucene.analysis.ngram.EdgeNGramTokenizer r1;

        r1 := @this: org.apache.lucene.analysis.ngram.EdgeNGramTokenizer;

        r0 := @parameter0: org.apache.lucene.analysis.ngram.EdgeNGramTokenizer$Side;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sideLabel must be either front or back");

        throw $r4;

     label1:
        if i0 >= 1 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("minGram must be greater than zero");

        throw $r3;

     label2:
        if i0 <= i1 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("minGram must not be greater than maxGram");

        throw $r2;

     label3:
        r1.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: int minGram> = i0;

        r1.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: int maxGram> = i1;

        r1.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: org.apache.lucene.analysis.ngram.EdgeNGramTokenizer$Side side> = r0;

        return;
    }

    public boolean incrementToken() throws java.io.IOException
    {
        boolean $z0;
        org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute $r1, $r11;
        java.io.Reader $r12, $r13;
        org.apache.lucene.analysis.tokenattributes.OffsetAttribute $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i33, $i35;
        java.lang.String $r6, $r9, $r10, $r16;
        org.apache.lucene.analysis.ngram.EdgeNGramTokenizer$Side $r2, $r3;
        org.apache.lucene.analysis.tokenattributes.CharTermAttribute $r4, $r5;
        char[] r14, r15;
        org.apache.lucene.analysis.ngram.EdgeNGramTokenizer r0;

        r0 := @this: org.apache.lucene.analysis.ngram.EdgeNGramTokenizer;

        virtualinvoke r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: void clearAttributes()>();

        $z0 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: boolean started>;

        if $z0 != 0 goto label08;

        r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: boolean started> = 1;

        $i12 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: int minGram>;

        r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: int gramSize> = $i12;

        r14 = newarray (char)[1024];

        r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: int charsRead> = 0;

     label01:
        $i14 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: int charsRead>;

        $i13 = lengthof r14;

        if $i14 >= $i13 goto label03;

        $r13 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: java.io.Reader input>;

        $i27 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: int charsRead>;

        $i25 = lengthof r14;

        $i24 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: int charsRead>;

        $i26 = $i25 - $i24;

        $i28 = virtualinvoke $r13.<java.io.Reader: int read(char[],int,int)>(r14, $i27, $i26);

        $i33 = (int) -1;

        if $i28 != $i33 goto label02;

        goto label03;

     label02:
        $i29 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: int charsRead>;

        $i30 = $i29 + $i28;

        r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: int charsRead> = $i30;

        goto label01;

     label03:
        $r16 = new java.lang.String;

        $i15 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: int charsRead>;

        specialinvoke $r16.<java.lang.String: void <init>(char[],int,int)>(r14, 0, $i15);

        $r9 = virtualinvoke $r16.<java.lang.String: java.lang.String trim()>();

        r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: java.lang.String inStr> = $r9;

        $i17 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: int charsRead>;

        $i16 = lengthof r14;

        if $i17 != $i16 goto label06;

        r15 = newarray (char)[1024];

     label04:
        $r12 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: java.io.Reader input>;

        $i20 = lengthof r15;

        $i21 = virtualinvoke $r12.<java.io.Reader: int read(char[],int,int)>(r15, 0, $i20);

        $i35 = (int) -1;

        if $i21 != $i35 goto label05;

        goto label06;

     label05:
        $i22 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: int charsRead>;

        $i23 = $i22 + $i21;

        r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: int charsRead> = $i23;

        goto label04;

     label06:
        $r10 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: java.lang.String inStr>;

        $i18 = virtualinvoke $r10.<java.lang.String: int length()>();

        r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: int inLen> = $i18;

        $i19 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: int inLen>;

        if $i19 != 0 goto label07;

        return 0;

     label07:
        $r11 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute posIncrAtt>;

        interfaceinvoke $r11.<org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute: void setPositionIncrement(int)>(1);

        goto label09;

     label08:
        $r1 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute posIncrAtt>;

        interfaceinvoke $r1.<org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute: void setPositionIncrement(int)>(0);

     label09:
        $i1 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: int gramSize>;

        $i0 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: int inLen>;

        if $i1 <= $i0 goto label10;

        return 0;

     label10:
        $i3 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: int gramSize>;

        $i2 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: int maxGram>;

        if $i3 <= $i2 goto label11;

        return 0;

     label11:
        $r3 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: org.apache.lucene.analysis.ngram.EdgeNGramTokenizer$Side side>;

        $r2 = <org.apache.lucene.analysis.ngram.EdgeNGramTokenizer$Side: org.apache.lucene.analysis.ngram.EdgeNGramTokenizer$Side FRONT>;

        if $r3 != $r2 goto label12;

        $i31 = 0;

        goto label13;

     label12:
        $i5 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: int inLen>;

        $i4 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: int gramSize>;

        $i31 = $i5 - $i4;

     label13:
        $i6 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: int gramSize>;

        $i11 = $i31 + $i6;

        $r4 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAtt>;

        $r5 = interfaceinvoke $r4.<org.apache.lucene.analysis.tokenattributes.CharTermAttribute: org.apache.lucene.analysis.tokenattributes.CharTermAttribute setEmpty()>();

        $r6 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: java.lang.String inStr>;

        interfaceinvoke $r5.<org.apache.lucene.analysis.tokenattributes.CharTermAttribute: org.apache.lucene.analysis.tokenattributes.CharTermAttribute append(java.lang.CharSequence,int,int)>($r6, $i31, $i11);

        $r7 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: org.apache.lucene.analysis.tokenattributes.OffsetAttribute offsetAtt>;

        $i7 = virtualinvoke r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: int correctOffset(int)>($i31);

        $i8 = virtualinvoke r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: int correctOffset(int)>($i11);

        interfaceinvoke $r7.<org.apache.lucene.analysis.tokenattributes.OffsetAttribute: void setOffset(int,int)>($i7, $i8);

        $i9 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: int gramSize>;

        $i10 = $i9 + 1;

        r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: int gramSize> = $i10;

        return 1;
    }

    public void end()
    {
        int $i0, $i1;
        org.apache.lucene.analysis.tokenattributes.OffsetAttribute $r1;
        org.apache.lucene.analysis.ngram.EdgeNGramTokenizer r0;

        r0 := @this: org.apache.lucene.analysis.ngram.EdgeNGramTokenizer;

        $i0 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: int charsRead>;

        $i1 = virtualinvoke r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: int correctOffset(int)>($i0);

        $r1 = r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: org.apache.lucene.analysis.tokenattributes.OffsetAttribute offsetAtt>;

        interfaceinvoke $r1.<org.apache.lucene.analysis.tokenattributes.OffsetAttribute: void setOffset(int,int)>($i1, $i1);

        return;
    }

    public void reset() throws java.io.IOException
    {
        org.apache.lucene.analysis.ngram.EdgeNGramTokenizer r0;

        r0 := @this: org.apache.lucene.analysis.ngram.EdgeNGramTokenizer;

        specialinvoke r0.<org.apache.lucene.analysis.Tokenizer: void reset()>();

        r0.<org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: boolean started> = 0;

        return;
    }

    static void <clinit>()
    {
        org.apache.lucene.analysis.ngram.EdgeNGramTokenizer$Side $r0;

        <org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: int DEFAULT_MIN_GRAM_SIZE> = 1;

        <org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: int DEFAULT_MAX_GRAM_SIZE> = 1;

        $r0 = <org.apache.lucene.analysis.ngram.EdgeNGramTokenizer$Side: org.apache.lucene.analysis.ngram.EdgeNGramTokenizer$Side FRONT>;

        <org.apache.lucene.analysis.ngram.EdgeNGramTokenizer: org.apache.lucene.analysis.ngram.EdgeNGramTokenizer$Side DEFAULT_SIDE> = $r0;

        return;
    }
}
