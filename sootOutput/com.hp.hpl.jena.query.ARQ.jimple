public class com.hp.hpl.jena.query.ARQ extends java.lang.Object
{
    public static final java.lang.String logExecName;
    public static final java.lang.String logInfoName;
    public static final java.lang.String logHttpRequestName;
    private static final org.slf4j.Logger logExec;
    private static final org.slf4j.Logger logInfo;
    private static final org.slf4j.Logger logHttpRequest;
    public static final com.hp.hpl.jena.sparql.util.Symbol symLogExec;
    public static final java.lang.String arqIRI;
    public static final java.lang.String arqParamNS;
    public static final java.lang.String arqSymbolPrefix;
    public static final com.hp.hpl.jena.sparql.util.Symbol strictSPARQL;
    public static final com.hp.hpl.jena.sparql.util.Symbol constantBNodeLabels;
    public static final com.hp.hpl.jena.sparql.util.Symbol enablePropertyFunctions;
    public static final com.hp.hpl.jena.sparql.util.Symbol enableExecutionTimeLogging;
    public static final com.hp.hpl.jena.sparql.util.Symbol outputGraphBNodeLabels;
    public static final com.hp.hpl.jena.sparql.util.Symbol inputGraphBNodeLabels;
    public static final com.hp.hpl.jena.sparql.util.Symbol queryTimeout;
    public static final com.hp.hpl.jena.sparql.util.Symbol enableRomanNumerals;
    public static final com.hp.hpl.jena.sparql.util.Symbol stageGenerator;
    public static final com.hp.hpl.jena.sparql.util.Symbol hideNonDistiguishedVariables;
    public static final com.hp.hpl.jena.sparql.util.Symbol useSAX;
    public static final boolean allowDuplicateSelectColumns;
    public static final com.hp.hpl.jena.sparql.util.Symbol regexImpl;
    public static final com.hp.hpl.jena.sparql.util.Symbol javaRegex;
    public static final com.hp.hpl.jena.sparql.util.Symbol xercesRegex;
    public static final com.hp.hpl.jena.sparql.util.Symbol serviceParams;
    public static final com.hp.hpl.jena.sparql.util.Symbol spillToDiskThreshold;
    public static final com.hp.hpl.jena.sparql.util.Symbol optimization;
    public static final com.hp.hpl.jena.sparql.util.Symbol optFilterPlacement;
    public static final com.hp.hpl.jena.sparql.util.Symbol optTopNSorting;
    public static final com.hp.hpl.jena.sparql.util.Symbol optDistinctToReduced;
    public static final com.hp.hpl.jena.sparql.util.Symbol optOrderByDistinctApplication;
    public static final com.hp.hpl.jena.sparql.util.Symbol optFilterEquality;
    public static final com.hp.hpl.jena.sparql.util.Symbol optFilterImplicitJoin;
    public static final com.hp.hpl.jena.sparql.util.Symbol optImplicitLeftJoin;
    public static final com.hp.hpl.jena.sparql.util.Symbol optTermStrings;
    public static final com.hp.hpl.jena.sparql.util.Symbol optFilterConjunction;
    public static final com.hp.hpl.jena.sparql.util.Symbol optFilterExpandOneOf;
    public static final com.hp.hpl.jena.sparql.util.Symbol optFilterDisjunction;
    public static final com.hp.hpl.jena.sparql.util.Symbol optIndexJoinStrategy;
    public static final com.hp.hpl.jena.sparql.util.Symbol optMergeBGPs;
    public static final com.hp.hpl.jena.sparql.util.Symbol propertyFunctions;
    public static final com.hp.hpl.jena.sparql.util.Symbol strictGraph;
    public static final com.hp.hpl.jena.sparql.util.Symbol extensionValueTypes;
    public static final com.hp.hpl.jena.sparql.util.Symbol generateToList;
    public static final java.lang.String PATH;
    private static java.lang.String metadataLocation;
    private static com.hp.hpl.jena.sparql.lib.Metadata metadata;
    public static final java.lang.String NAME;
    public static final java.lang.String VERSION;
    public static final java.lang.String BUILD_DATE;
    private static volatile boolean initialized;
    private static final java.lang.Object initLock;
    private static com.hp.hpl.jena.sparql.util.Context globalContext;

    public void <init>()
    {
        com.hp.hpl.jena.query.ARQ r0;

        r0 := @this: com.hp.hpl.jena.query.ARQ;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.slf4j.Logger getExecLogger()
    {
        org.slf4j.Logger $r0;

        $r0 = <com.hp.hpl.jena.query.ARQ: org.slf4j.Logger logExec>;

        return $r0;
    }

    public static org.slf4j.Logger getInfoLogger()
    {
        org.slf4j.Logger $r0;

        $r0 = <com.hp.hpl.jena.query.ARQ: org.slf4j.Logger logInfo>;

        return $r0;
    }

    public static org.slf4j.Logger getHttpRequestLogger()
    {
        org.slf4j.Logger $r0;

        $r0 = <com.hp.hpl.jena.query.ARQ: org.slf4j.Logger logHttpRequest>;

        return $r0;
    }

    public static com.hp.hpl.jena.sparql.mgt.Explain$InfoLevel getExecutionLogging()
    {
        java.lang.Object $r2;
        com.hp.hpl.jena.sparql.util.Context $r0;
        com.hp.hpl.jena.sparql.mgt.Explain$InfoLevel $r3;
        com.hp.hpl.jena.sparql.util.Symbol $r1;

        $r0 = staticinvoke <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Context getContext()>();

        $r1 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol symLogExec>;

        $r2 = virtualinvoke $r0.<com.hp.hpl.jena.sparql.util.Context: java.lang.Object get(com.hp.hpl.jena.sparql.util.Symbol)>($r1);

        $r3 = (com.hp.hpl.jena.sparql.mgt.Explain$InfoLevel) $r2;

        return $r3;
    }

    public static void setExecutionLogging(com.hp.hpl.jena.sparql.mgt.Explain$InfoLevel)
    {
        org.slf4j.Logger $r4, $r5;
        com.hp.hpl.jena.sparql.util.Context $r2, $r6;
        com.hp.hpl.jena.sparql.mgt.Explain$InfoLevel r0, $r1;
        boolean $z0, $z1;
        com.hp.hpl.jena.sparql.util.Symbol $r3, $r7;

        r0 := @parameter0: com.hp.hpl.jena.sparql.mgt.Explain$InfoLevel;

        $r1 = <com.hp.hpl.jena.sparql.mgt.Explain$InfoLevel: com.hp.hpl.jena.sparql.mgt.Explain$InfoLevel NONE>;

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.mgt.Explain$InfoLevel: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $r6 = staticinvoke <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Context getContext()>();

        $r7 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol symLogExec>;

        virtualinvoke $r6.<com.hp.hpl.jena.sparql.util.Context: void unset(com.hp.hpl.jena.sparql.util.Symbol)>($r7);

        return;

     label1:
        $r2 = staticinvoke <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Context getContext()>();

        $r3 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol symLogExec>;

        virtualinvoke $r2.<com.hp.hpl.jena.sparql.util.Context: void set(com.hp.hpl.jena.sparql.util.Symbol,java.lang.Object)>($r3, r0);

        $r4 = staticinvoke <com.hp.hpl.jena.query.ARQ: org.slf4j.Logger getExecLogger()>();

        $z1 = interfaceinvoke $r4.<org.slf4j.Logger: boolean isInfoEnabled()>();

        if $z1 != 0 goto label2;

        $r5 = staticinvoke <com.hp.hpl.jena.query.ARQ: org.slf4j.Logger getExecLogger()>();

        interfaceinvoke $r5.<org.slf4j.Logger: void warn(java.lang.String)>("Attempt to enable execution logging but the logger \'com.hp.hpl.jena.arq.exec\' is not logging at level INFO");

     label2:
        return;
    }

    public static void enableBlankNodeResultLabels()
    {
        staticinvoke <com.hp.hpl.jena.query.ARQ: void enableBlankNodeResultLabels(boolean)>(1);

        return;
    }

    public static void enableBlankNodeResultLabels(boolean)
    {
        java.lang.Boolean $r0;
        com.hp.hpl.jena.sparql.util.Context $r2, $r4;
        boolean z0;
        com.hp.hpl.jena.sparql.util.Symbol $r1, $r3;

        z0 := @parameter0: boolean;

        $r0 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r2 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Context globalContext>;

        $r1 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol inputGraphBNodeLabels>;

        virtualinvoke $r2.<com.hp.hpl.jena.sparql.util.Context: void set(com.hp.hpl.jena.sparql.util.Symbol,java.lang.Object)>($r1, $r0);

        $r4 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Context globalContext>;

        $r3 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol outputGraphBNodeLabels>;

        virtualinvoke $r4.<com.hp.hpl.jena.sparql.util.Context: void set(com.hp.hpl.jena.sparql.util.Symbol,java.lang.Object)>($r3, $r0);

        return;
    }

    public static void enableOptimizer(boolean)
    {
        com.hp.hpl.jena.sparql.util.Context $r0;
        boolean z0;

        z0 := @parameter0: boolean;

        $r0 = staticinvoke <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Context getContext()>();

        staticinvoke <com.hp.hpl.jena.query.ARQ: void enableOptimizer(com.hp.hpl.jena.sparql.util.Context,boolean)>($r0, z0);

        return;
    }

    public static void enableOptimizer(com.hp.hpl.jena.sparql.util.Context, boolean)
    {
        com.hp.hpl.jena.sparql.util.Context r0;
        boolean z0;
        com.hp.hpl.jena.sparql.util.Symbol $r1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.util.Context;

        z0 := @parameter1: boolean;

        $r1 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol optimization>;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.util.Context: void set(com.hp.hpl.jena.sparql.util.Symbol,boolean)>($r1, z0);

        return;
    }

    public static void setStrictMode()
    {
        com.hp.hpl.jena.sparql.util.Context $r0;

        $r0 = staticinvoke <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Context getContext()>();

        staticinvoke <com.hp.hpl.jena.query.ARQ: void setStrictMode(com.hp.hpl.jena.sparql.util.Context)>($r0);

        return;
    }

    public static void setStrictMode(com.hp.hpl.jena.sparql.util.Context)
    {
        com.hp.hpl.jena.sparql.util.Context r0;
        com.hp.hpl.jena.sparql.util.Symbol $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;

        r0 := @parameter0: com.hp.hpl.jena.sparql.util.Context;

        <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: boolean strictDateTimeFO> = 1;

        $r1 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol optimization>;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.util.Context: void set(com.hp.hpl.jena.sparql.util.Symbol,boolean)>($r1, 0);

        $r2 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol hideNonDistiguishedVariables>;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.util.Context: void set(com.hp.hpl.jena.sparql.util.Symbol,boolean)>($r2, 1);

        $r3 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol strictGraph>;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.util.Context: void set(com.hp.hpl.jena.sparql.util.Symbol,boolean)>($r3, 1);

        $r4 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol strictSPARQL>;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.util.Context: void set(com.hp.hpl.jena.sparql.util.Symbol,boolean)>($r4, 1);

        $r5 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol extensionValueTypes>;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.util.Context: void set(com.hp.hpl.jena.sparql.util.Symbol,boolean)>($r5, 0);

        $r6 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol constantBNodeLabels>;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.util.Context: void set(com.hp.hpl.jena.sparql.util.Symbol,boolean)>($r6, 0);

        $r7 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol enablePropertyFunctions>;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.util.Context: void set(com.hp.hpl.jena.sparql.util.Symbol,boolean)>($r7, 0);

        $r8 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol generateToList>;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.util.Context: void set(com.hp.hpl.jena.sparql.util.Symbol,boolean)>($r8, 1);

        $r10 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol regexImpl>;

        $r9 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol xercesRegex>;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.util.Context: void set(com.hp.hpl.jena.sparql.util.Symbol,java.lang.Object)>($r10, $r9);

        return;
    }

    public static boolean isStrictMode()
    {
        com.hp.hpl.jena.sparql.util.Context $r0;
        com.hp.hpl.jena.sparql.util.Symbol $r1;
        boolean $z0;

        $r0 = staticinvoke <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Context getContext()>();

        $r1 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol strictSPARQL>;

        $z0 = virtualinvoke $r0.<com.hp.hpl.jena.sparql.util.Context: boolean isTrue(com.hp.hpl.jena.sparql.util.Symbol)>($r1);

        return $z0;
    }

    public static void setNormalMode()
    {
        com.hp.hpl.jena.sparql.util.Context $r0;

        $r0 = staticinvoke <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Context getContext()>();

        staticinvoke <com.hp.hpl.jena.query.ARQ: void setNormalMode(com.hp.hpl.jena.sparql.util.Context)>($r0);

        return;
    }

    public static void setNormalMode(com.hp.hpl.jena.sparql.util.Context)
    {
        com.hp.hpl.jena.sparql.util.Context r0;
        com.hp.hpl.jena.sparql.util.Symbol $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;

        r0 := @parameter0: com.hp.hpl.jena.sparql.util.Context;

        <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: boolean strictDateTimeFO> = 0;

        $r1 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol optimization>;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.util.Context: void unset(com.hp.hpl.jena.sparql.util.Symbol)>($r1);

        $r2 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol strictSPARQL>;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.util.Context: void set(com.hp.hpl.jena.sparql.util.Symbol,boolean)>($r2, 0);

        $r3 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol constantBNodeLabels>;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.util.Context: void set(com.hp.hpl.jena.sparql.util.Symbol,boolean)>($r3, 1);

        $r4 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol enablePropertyFunctions>;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.util.Context: void set(com.hp.hpl.jena.sparql.util.Symbol,boolean)>($r4, 1);

        $r5 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol strictGraph>;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.util.Context: void set(com.hp.hpl.jena.sparql.util.Symbol,boolean)>($r5, 0);

        $r6 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol enableRomanNumerals>;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.util.Context: void set(com.hp.hpl.jena.sparql.util.Symbol,boolean)>($r6, 0);

        $r8 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol regexImpl>;

        $r7 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol javaRegex>;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.util.Context: void set(com.hp.hpl.jena.sparql.util.Symbol,java.lang.Object)>($r8, $r7);

        return;
    }

    public static void init()
    {
        java.lang.Throwable $r5;
        com.hp.hpl.jena.sparql.mgt.SystemInfo $r2;
        com.hp.hpl.jena.sparql.util.Context $r1;
        java.lang.Object $r0;
        java.lang.String $r3, $r4;
        boolean $z0, $z1;

        $z0 = <com.hp.hpl.jena.query.ARQ: boolean initialized>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r0 = <com.hp.hpl.jena.query.ARQ: java.lang.Object initLock>;

        entermonitor $r0;

     label2:
        $z1 = <com.hp.hpl.jena.query.ARQ: boolean initialized>;

        if $z1 == 0 goto label4;

        exitmonitor $r0;

     label3:
        return;

     label4:
        <com.hp.hpl.jena.query.ARQ: boolean initialized> = 1;

        $r1 = staticinvoke <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Context defaultSettings()>();

        <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Context globalContext> = $r1;

        staticinvoke <org.apache.jena.riot.RIOT: void init()>();

        staticinvoke <com.hp.hpl.jena.sparql.engine.main.StageBuilder: void init()>();

        staticinvoke <com.hp.hpl.jena.sparql.mgt.ARQMgt: void init()>();

        staticinvoke <com.hp.hpl.jena.sparql.util.MappingRegistry: void addPrefixMapping(java.lang.String,java.lang.String)>("arq", "http://jena.hpl.hp.com/ARQ#");

        $r2 = new com.hp.hpl.jena.sparql.mgt.SystemInfo;

        $r4 = <com.hp.hpl.jena.query.ARQ: java.lang.String VERSION>;

        $r3 = <com.hp.hpl.jena.query.ARQ: java.lang.String BUILD_DATE>;

        specialinvoke $r2.<com.hp.hpl.jena.sparql.mgt.SystemInfo: void <init>(java.lang.String,java.lang.String,java.lang.String)>("http://jena.hpl.hp.com/#arq", $r4, $r3);

        staticinvoke <com.hp.hpl.jena.sparql.mgt.ARQMgt: void register(java.lang.String,java.lang.Object)>("org.apache.jena.arq.system:type=SystemInfo", $r2);

        staticinvoke <com.hp.hpl.jena.sparql.SystemARQ: void registerSubSystem(com.hp.hpl.jena.sparql.mgt.SystemInfo)>($r2);

        staticinvoke <org.apache.jena.riot.RIOT: void register()>();

        exitmonitor $r0;

     label5:
        goto label8;

     label6:
        $r5 := @caughtexception;

        exitmonitor $r0;

     label7:
        throw $r5;

     label8:
        return;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private static com.hp.hpl.jena.sparql.util.Context defaultSettings()
    {
        com.hp.hpl.jena.sparql.util.Context $r0;

        $r0 = new com.hp.hpl.jena.sparql.util.Context;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.util.Context: void <init>()>();

        staticinvoke <com.hp.hpl.jena.query.ARQ: void setNormalMode(com.hp.hpl.jena.sparql.util.Context)>($r0);

        return $r0;
    }

    public static com.hp.hpl.jena.sparql.util.Context getContext()
    {
        com.hp.hpl.jena.sparql.util.Context $r0;

        $r0 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Context globalContext>;

        return $r0;
    }

    public static void set(com.hp.hpl.jena.sparql.util.Symbol, boolean)
    {
        com.hp.hpl.jena.sparql.util.Context $r0;
        com.hp.hpl.jena.sparql.util.Symbol r1;
        boolean z0;

        r1 := @parameter0: com.hp.hpl.jena.sparql.util.Symbol;

        z0 := @parameter1: boolean;

        $r0 = staticinvoke <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Context getContext()>();

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.util.Context: void set(com.hp.hpl.jena.sparql.util.Symbol,boolean)>(r1, z0);

        return;
    }

    public static void setTrue(com.hp.hpl.jena.sparql.util.Symbol)
    {
        com.hp.hpl.jena.sparql.util.Context $r0;
        com.hp.hpl.jena.sparql.util.Symbol r1;

        r1 := @parameter0: com.hp.hpl.jena.sparql.util.Symbol;

        $r0 = staticinvoke <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Context getContext()>();

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.util.Context: void setTrue(com.hp.hpl.jena.sparql.util.Symbol)>(r1);

        return;
    }

    public static void setFalse(com.hp.hpl.jena.sparql.util.Symbol)
    {
        com.hp.hpl.jena.sparql.util.Context $r0;
        com.hp.hpl.jena.sparql.util.Symbol r1;

        r1 := @parameter0: com.hp.hpl.jena.sparql.util.Symbol;

        $r0 = staticinvoke <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Context getContext()>();

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.util.Context: void setFalse(com.hp.hpl.jena.sparql.util.Symbol)>(r1);

        return;
    }

    public static void unset(com.hp.hpl.jena.sparql.util.Symbol)
    {
        com.hp.hpl.jena.sparql.util.Context $r0;
        com.hp.hpl.jena.sparql.util.Symbol r1;

        r1 := @parameter0: com.hp.hpl.jena.sparql.util.Symbol;

        $r0 = staticinvoke <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Context getContext()>();

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.util.Context: void unset(com.hp.hpl.jena.sparql.util.Symbol)>(r1);

        return;
    }

    public static boolean isTrue(com.hp.hpl.jena.sparql.util.Symbol)
    {
        com.hp.hpl.jena.sparql.util.Context $r0;
        com.hp.hpl.jena.sparql.util.Symbol r1;
        boolean $z0;

        r1 := @parameter0: com.hp.hpl.jena.sparql.util.Symbol;

        $r0 = staticinvoke <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Context getContext()>();

        $z0 = virtualinvoke $r0.<com.hp.hpl.jena.sparql.util.Context: boolean isTrue(com.hp.hpl.jena.sparql.util.Symbol)>(r1);

        return $z0;
    }

    public static boolean isFalse(com.hp.hpl.jena.sparql.util.Symbol)
    {
        com.hp.hpl.jena.sparql.util.Context $r0;
        com.hp.hpl.jena.sparql.util.Symbol r1;
        boolean $z0;

        r1 := @parameter0: com.hp.hpl.jena.sparql.util.Symbol;

        $r0 = staticinvoke <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Context getContext()>();

        $z0 = virtualinvoke $r0.<com.hp.hpl.jena.sparql.util.Context: boolean isFalse(com.hp.hpl.jena.sparql.util.Symbol)>(r1);

        return $z0;
    }

    public static boolean isTrueOrUndef(com.hp.hpl.jena.sparql.util.Symbol)
    {
        com.hp.hpl.jena.sparql.util.Context $r0;
        com.hp.hpl.jena.sparql.util.Symbol r1;
        boolean $z0;

        r1 := @parameter0: com.hp.hpl.jena.sparql.util.Symbol;

        $r0 = staticinvoke <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Context getContext()>();

        $z0 = virtualinvoke $r0.<com.hp.hpl.jena.sparql.util.Context: boolean isTrueOrUndef(com.hp.hpl.jena.sparql.util.Symbol)>(r1);

        return $z0;
    }

    public static boolean isFalseOrUndef(com.hp.hpl.jena.sparql.util.Symbol)
    {
        com.hp.hpl.jena.sparql.util.Context $r0;
        com.hp.hpl.jena.sparql.util.Symbol r1;
        boolean $z0;

        r1 := @parameter0: com.hp.hpl.jena.sparql.util.Symbol;

        $r0 = staticinvoke <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Context getContext()>();

        $z0 = virtualinvoke $r0.<com.hp.hpl.jena.sparql.util.Context: boolean isFalseOrUndef(com.hp.hpl.jena.sparql.util.Symbol)>(r1);

        return $z0;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.sparql.lib.Metadata $r38, $r40, $r42;
        java.lang.String $r39, $r41, $r43;
        com.hp.hpl.jena.sparql.util.Symbol $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37;
        org.slf4j.Logger $r0, $r1, $r2;
        java.lang.Object $r44;

        <com.hp.hpl.jena.query.ARQ: java.lang.String NAME> = "ARQ";

        <com.hp.hpl.jena.query.ARQ: java.lang.String PATH> = "org.apache.jena.arq";

        <com.hp.hpl.jena.query.ARQ: boolean allowDuplicateSelectColumns> = 0;

        <com.hp.hpl.jena.query.ARQ: java.lang.String arqSymbolPrefix> = "arq";

        <com.hp.hpl.jena.query.ARQ: java.lang.String arqParamNS> = "http://jena.hpl.hp.com/ARQ#";

        <com.hp.hpl.jena.query.ARQ: java.lang.String arqIRI> = "http://jena.hpl.hp.com/#arq";

        <com.hp.hpl.jena.query.ARQ: java.lang.String logHttpRequestName> = "com.hp.hpl.jena.arq.service";

        <com.hp.hpl.jena.query.ARQ: java.lang.String logInfoName> = "com.hp.hpl.jena.arq.info";

        <com.hp.hpl.jena.query.ARQ: java.lang.String logExecName> = "com.hp.hpl.jena.arq.exec";

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.String)>("com.hp.hpl.jena.arq.exec");

        <com.hp.hpl.jena.query.ARQ: org.slf4j.Logger logExec> = $r0;

        $r1 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.String)>("com.hp.hpl.jena.arq.info");

        <com.hp.hpl.jena.query.ARQ: org.slf4j.Logger logInfo> = $r1;

        $r2 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.String)>("com.hp.hpl.jena.arq.service");

        <com.hp.hpl.jena.query.ARQ: org.slf4j.Logger logHttpRequest> = $r2;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.ARQConstants: com.hp.hpl.jena.sparql.util.Symbol allocSymbol(java.lang.String)>("logExec");

        <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol symLogExec> = $r3;

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.ARQConstants: com.hp.hpl.jena.sparql.util.Symbol allocSymbol(java.lang.String)>("strictSPARQL");

        <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol strictSPARQL> = $r4;

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.ARQConstants: com.hp.hpl.jena.sparql.util.Symbol allocSymbol(java.lang.String)>("constantBNodeLabels");

        <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol constantBNodeLabels> = $r5;

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.ARQConstants: com.hp.hpl.jena.sparql.util.Symbol allocSymbol(java.lang.String)>("enablePropertyFunctions");

        <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol enablePropertyFunctions> = $r6;

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.ARQConstants: com.hp.hpl.jena.sparql.util.Symbol allocSymbol(java.lang.String)>("enableExecutionTimeLogging");

        <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol enableExecutionTimeLogging> = $r7;

        $r8 = staticinvoke <com.hp.hpl.jena.sparql.ARQConstants: com.hp.hpl.jena.sparql.util.Symbol allocSymbol(java.lang.String)>("outputGraphBNodeLabels");

        <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol outputGraphBNodeLabels> = $r8;

        $r9 = staticinvoke <com.hp.hpl.jena.sparql.ARQConstants: com.hp.hpl.jena.sparql.util.Symbol allocSymbol(java.lang.String)>("inputGraphBNodeLabels");

        <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol inputGraphBNodeLabels> = $r9;

        $r10 = staticinvoke <com.hp.hpl.jena.sparql.ARQConstants: com.hp.hpl.jena.sparql.util.Symbol allocSymbol(java.lang.String)>("queryTimeout");

        <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol queryTimeout> = $r10;

        $r11 = staticinvoke <com.hp.hpl.jena.sparql.ARQConstants: com.hp.hpl.jena.sparql.util.Symbol allocSymbol(java.lang.String)>("romanNumerals");

        <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol enableRomanNumerals> = $r11;

        $r12 = staticinvoke <com.hp.hpl.jena.sparql.ARQConstants: com.hp.hpl.jena.sparql.util.Symbol allocSymbol(java.lang.String)>("stageGenerator");

        <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol stageGenerator> = $r12;

        $r13 = staticinvoke <com.hp.hpl.jena.sparql.ARQConstants: com.hp.hpl.jena.sparql.util.Symbol allocSymbol(java.lang.String)>("hideNonDistiguishedVariables");

        <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol hideNonDistiguishedVariables> = $r13;

        $r14 = staticinvoke <com.hp.hpl.jena.sparql.ARQConstants: com.hp.hpl.jena.sparql.util.Symbol allocSymbol(java.lang.String)>("useSAX");

        <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol useSAX> = $r14;

        $r15 = staticinvoke <com.hp.hpl.jena.sparql.ARQConstants: com.hp.hpl.jena.sparql.util.Symbol allocSymbol(java.lang.String)>("regexImpl");

        <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol regexImpl> = $r15;

        $r16 = staticinvoke <com.hp.hpl.jena.sparql.ARQConstants: com.hp.hpl.jena.sparql.util.Symbol allocSymbol(java.lang.String)>("javaRegex");

        <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol javaRegex> = $r16;

        $r17 = staticinvoke <com.hp.hpl.jena.sparql.ARQConstants: com.hp.hpl.jena.sparql.util.Symbol allocSymbol(java.lang.String)>("xercesRegex");

        <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol xercesRegex> = $r17;

        $r18 = staticinvoke <com.hp.hpl.jena.sparql.ARQConstants: com.hp.hpl.jena.sparql.util.Symbol allocSymbol(java.lang.String)>("serviceParams");

        <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol serviceParams> = $r18;

        $r19 = staticinvoke <com.hp.hpl.jena.sparql.ARQConstants: com.hp.hpl.jena.sparql.util.Symbol allocSymbol(java.lang.String)>("spillToDiskThreshold");

        <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol spillToDiskThreshold> = $r19;

        $r20 = staticinvoke <com.hp.hpl.jena.sparql.ARQConstants: com.hp.hpl.jena.sparql.util.Symbol allocSymbol(java.lang.String)>("optimization");

        <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol optimization> = $r20;

        $r21 = staticinvoke <com.hp.hpl.jena.sparql.ARQConstants: com.hp.hpl.jena.sparql.util.Symbol allocSymbol(java.lang.String)>("optFilterPlacement");

        <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol optFilterPlacement> = $r21;

        $r22 = staticinvoke <com.hp.hpl.jena.sparql.ARQConstants: com.hp.hpl.jena.sparql.util.Symbol allocSymbol(java.lang.String)>("optTopNSorting");

        <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol optTopNSorting> = $r22;

        $r23 = staticinvoke <com.hp.hpl.jena.sparql.ARQConstants: com.hp.hpl.jena.sparql.util.Symbol allocSymbol(java.lang.String)>("optDistinctToReduced");

        <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol optDistinctToReduced> = $r23;

        $r24 = staticinvoke <com.hp.hpl.jena.sparql.ARQConstants: com.hp.hpl.jena.sparql.util.Symbol allocSymbol(java.lang.String)>("optOrderByDistinctApplication");

        <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol optOrderByDistinctApplication> = $r24;

        $r25 = staticinvoke <com.hp.hpl.jena.sparql.ARQConstants: com.hp.hpl.jena.sparql.util.Symbol allocSymbol(java.lang.String)>("optFilterEquality");

        <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol optFilterEquality> = $r25;

        $r26 = staticinvoke <com.hp.hpl.jena.sparql.ARQConstants: com.hp.hpl.jena.sparql.util.Symbol allocSymbol(java.lang.String)>("optFilterImplicitJoin");

        <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol optFilterImplicitJoin> = $r26;

        $r27 = staticinvoke <com.hp.hpl.jena.sparql.ARQConstants: com.hp.hpl.jena.sparql.util.Symbol allocSymbol(java.lang.String)>("optImplicitLeftJoin");

        <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol optImplicitLeftJoin> = $r27;

        $r28 = staticinvoke <com.hp.hpl.jena.sparql.ARQConstants: com.hp.hpl.jena.sparql.util.Symbol allocSymbol(java.lang.String)>("optTermStrings");

        <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol optTermStrings> = $r28;

        $r29 = staticinvoke <com.hp.hpl.jena.sparql.ARQConstants: com.hp.hpl.jena.sparql.util.Symbol allocSymbol(java.lang.String)>("optFilterConjunction");

        <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol optFilterConjunction> = $r29;

        $r30 = staticinvoke <com.hp.hpl.jena.sparql.ARQConstants: com.hp.hpl.jena.sparql.util.Symbol allocSymbol(java.lang.String)>("optFilterExpandOneOf");

        <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol optFilterExpandOneOf> = $r30;

        $r31 = staticinvoke <com.hp.hpl.jena.sparql.ARQConstants: com.hp.hpl.jena.sparql.util.Symbol allocSymbol(java.lang.String)>("optFilterDisjunction");

        <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol optFilterDisjunction> = $r31;

        $r32 = staticinvoke <com.hp.hpl.jena.sparql.ARQConstants: com.hp.hpl.jena.sparql.util.Symbol allocSymbol(java.lang.String)>("optIndexJoinStrategy");

        <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol optIndexJoinStrategy> = $r32;

        $r33 = staticinvoke <com.hp.hpl.jena.sparql.ARQConstants: com.hp.hpl.jena.sparql.util.Symbol allocSymbol(java.lang.String)>("optMergeBGPs");

        <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol optMergeBGPs> = $r33;

        $r34 = staticinvoke <com.hp.hpl.jena.sparql.ARQConstants: com.hp.hpl.jena.sparql.util.Symbol allocSymbol(java.lang.String)>("propertyFunctions");

        <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol propertyFunctions> = $r34;

        $r35 = staticinvoke <com.hp.hpl.jena.sparql.ARQConstants: com.hp.hpl.jena.sparql.util.Symbol allocSymbol(java.lang.String)>("strictGraph");

        <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol strictGraph> = $r35;

        $r36 = staticinvoke <com.hp.hpl.jena.sparql.ARQConstants: com.hp.hpl.jena.sparql.util.Symbol allocSymbol(java.lang.String)>("extensionValueTypesExpr");

        <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol extensionValueTypes> = $r36;

        $r37 = staticinvoke <com.hp.hpl.jena.sparql.ARQConstants: com.hp.hpl.jena.sparql.util.Symbol allocSymbol(java.lang.String)>("generateToList");

        <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol generateToList> = $r37;

        <com.hp.hpl.jena.query.ARQ: java.lang.String metadataLocation> = "org/apache/jena/arq/arq-properties.xml";

        $r38 = new com.hp.hpl.jena.sparql.lib.Metadata;

        $r39 = <com.hp.hpl.jena.query.ARQ: java.lang.String metadataLocation>;

        specialinvoke $r38.<com.hp.hpl.jena.sparql.lib.Metadata: void <init>(java.lang.String)>($r39);

        <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.lib.Metadata metadata> = $r38;

        $r40 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.lib.Metadata metadata>;

        $r41 = virtualinvoke $r40.<com.hp.hpl.jena.sparql.lib.Metadata: java.lang.String get(java.lang.String,java.lang.String)>("org.apache.jena.arq.version", "unknown");

        <com.hp.hpl.jena.query.ARQ: java.lang.String VERSION> = $r41;

        $r42 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.lib.Metadata metadata>;

        $r43 = virtualinvoke $r42.<com.hp.hpl.jena.sparql.lib.Metadata: java.lang.String get(java.lang.String,java.lang.String)>("org.apache.jena.arq.build.datetime", "unset");

        <com.hp.hpl.jena.query.ARQ: java.lang.String BUILD_DATE> = $r43;

        <com.hp.hpl.jena.query.ARQ: boolean initialized> = 0;

        $r44 = new java.lang.Object;

        specialinvoke $r44.<java.lang.Object: void <init>()>();

        <com.hp.hpl.jena.query.ARQ: java.lang.Object initLock> = $r44;

        <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Context globalContext> = null;

        staticinvoke <com.hp.hpl.jena.query.ARQ: void init()>();

        return;
    }
}
