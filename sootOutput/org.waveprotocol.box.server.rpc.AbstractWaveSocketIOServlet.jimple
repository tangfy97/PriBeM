public abstract class org.waveprotocol.box.server.rpc.AbstractWaveSocketIOServlet extends javax.servlet.http.HttpServlet
{
    private static final java.util.logging.Logger LOGGER;
    private static final long serialVersionUID;
    private final com.glines.socketio.server.SocketIOSessionManager sessionManager;
    private final com.glines.socketio.server.TransportHandlerProvider transportHandlerProvider;
    private com.glines.socketio.server.SocketIOConfig config;
    private final com.glines.socketio.server.Transport[] transports;

    public transient void <init>(com.glines.socketio.server.Transport[])
    {
        com.glines.socketio.server.AnnotationTransportHandlerProvider $r2;
        com.glines.socketio.server.Transport[] r3;
        org.waveprotocol.box.server.rpc.AbstractWaveSocketIOServlet r0;
        com.glines.socketio.server.SocketIOSessionManager $r1;

        r0 := @this: org.waveprotocol.box.server.rpc.AbstractWaveSocketIOServlet;

        r3 := @parameter0: com.glines.socketio.server.Transport[];

        specialinvoke r0.<javax.servlet.http.HttpServlet: void <init>()>();

        $r1 = new com.glines.socketio.server.SocketIOSessionManager;

        specialinvoke $r1.<com.glines.socketio.server.SocketIOSessionManager: void <init>()>();

        r0.<org.waveprotocol.box.server.rpc.AbstractWaveSocketIOServlet: com.glines.socketio.server.SocketIOSessionManager sessionManager> = $r1;

        $r2 = new com.glines.socketio.server.AnnotationTransportHandlerProvider;

        specialinvoke $r2.<com.glines.socketio.server.AnnotationTransportHandlerProvider: void <init>()>();

        r0.<org.waveprotocol.box.server.rpc.AbstractWaveSocketIOServlet: com.glines.socketio.server.TransportHandlerProvider transportHandlerProvider> = $r2;

        r0.<org.waveprotocol.box.server.rpc.AbstractWaveSocketIOServlet: com.glines.socketio.server.Transport[] transports> = r3;

        return;
    }

    public void init() throws javax.servlet.ServletException
    {
        com.glines.socketio.server.ServletBasedSocketIOConfig $r1;
        org.waveprotocol.box.server.rpc.AbstractWaveSocketIOServlet r0;
        java.util.Map $r39;
        com.glines.socketio.server.TransportHandlerProvider $r3, $r22, $r32, $r38;
        boolean $z0, $z1, $z2, $z3;
        com.glines.socketio.server.Transport r21, r56;
        javax.servlet.ServletConfig $r2, $r20;
        java.util.Collection $r7, $r16;
        java.util.logging.Logger $r5, $r10, $r12, $r25, $r35, $r47;
        java.lang.StringBuilder $r11, $r14, $r17, $r24, $r27, $r29, $r30, $r34, $r37, $r40, $r46, $r49, $r51, $r52, $r54;
        java.util.logging.Level $r4, $r9, $r13, $r26, $r36, $r48;
        com.glines.socketio.server.Transport[] $r42;
        com.glines.socketio.server.TransportInitializationException $r43;
        com.glines.socketio.server.TransportType $r23, $r28, $r45, $r50;
        int $i0, i1;
        java.lang.String $r18, $r31, $r41, $r53, $r55;
        java.util.Iterator $r8;
        com.glines.socketio.server.SocketIOConfig $r6, $r15, $r33, $r44;
        java.lang.Object $r19;

        r0 := @this: org.waveprotocol.box.server.rpc.AbstractWaveSocketIOServlet;

        $r1 = new com.glines.socketio.server.ServletBasedSocketIOConfig;

        $r2 = virtualinvoke r0.<org.waveprotocol.box.server.rpc.AbstractWaveSocketIOServlet: javax.servlet.ServletConfig getServletConfig()>();

        specialinvoke $r1.<com.glines.socketio.server.ServletBasedSocketIOConfig: void <init>(javax.servlet.ServletConfig,java.lang.String)>($r2, "socketio");

        r0.<org.waveprotocol.box.server.rpc.AbstractWaveSocketIOServlet: com.glines.socketio.server.SocketIOConfig config> = $r1;

        $r3 = r0.<org.waveprotocol.box.server.rpc.AbstractWaveSocketIOServlet: com.glines.socketio.server.TransportHandlerProvider transportHandlerProvider>;

        interfaceinvoke $r3.<com.glines.socketio.server.TransportHandlerProvider: void init()>();

        $r5 = <org.waveprotocol.box.server.rpc.AbstractWaveSocketIOServlet: java.util.logging.Logger LOGGER>;

        $r4 = <java.util.logging.Level: java.util.logging.Level INFO>;

        $z0 = virtualinvoke $r5.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r4);

        if $z0 == 0 goto label01;

        $r35 = <org.waveprotocol.box.server.rpc.AbstractWaveSocketIOServlet: java.util.logging.Logger LOGGER>;

        $r36 = <java.util.logging.Level: java.util.logging.Level INFO>;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Transport handlers loaded: ");

        $r38 = r0.<org.waveprotocol.box.server.rpc.AbstractWaveSocketIOServlet: com.glines.socketio.server.TransportHandlerProvider transportHandlerProvider>;

        $r39 = interfaceinvoke $r38.<com.glines.socketio.server.TransportHandlerProvider: java.util.Map listAll()>();

        $r40 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r39);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r35.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r36, $r41);

     label01:
        $r42 = r0.<org.waveprotocol.box.server.rpc.AbstractWaveSocketIOServlet: com.glines.socketio.server.Transport[] transports>;

        $i0 = lengthof $r42;

        i1 = 0;

     label02:
        if i1 >= $i0 goto label05;

        r21 = $r42[i1];

        $r22 = r0.<org.waveprotocol.box.server.rpc.AbstractWaveSocketIOServlet: com.glines.socketio.server.TransportHandlerProvider transportHandlerProvider>;

        $r23 = interfaceinvoke r21.<com.glines.socketio.server.Transport: com.glines.socketio.server.TransportType getType()>();

        $z3 = interfaceinvoke $r22.<com.glines.socketio.server.TransportHandlerProvider: boolean isSupported(com.glines.socketio.server.TransportType)>($r23);

        if $z3 == 0 goto label03;

        $r32 = r0.<org.waveprotocol.box.server.rpc.AbstractWaveSocketIOServlet: com.glines.socketio.server.TransportHandlerProvider transportHandlerProvider>;

        interfaceinvoke r21.<com.glines.socketio.server.Transport: void setTransportHandlerProvider(com.glines.socketio.server.TransportHandlerProvider)>($r32);

        $r33 = r0.<org.waveprotocol.box.server.rpc.AbstractWaveSocketIOServlet: com.glines.socketio.server.SocketIOConfig config>;

        interfaceinvoke $r33.<com.glines.socketio.server.SocketIOConfig: void addTransport(com.glines.socketio.server.Transport)>(r21);

        goto label04;

     label03:
        $r25 = <org.waveprotocol.box.server.rpc.AbstractWaveSocketIOServlet: java.util.logging.Logger LOGGER>;

        $r26 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Transport ");

        $r28 = interfaceinvoke r21.<com.glines.socketio.server.Transport: com.glines.socketio.server.TransportType getType()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ignored since not supported by any TransportHandler");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r25.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r26, $r31);

     label04:
        i1 = i1 + 1;

        goto label02;

     label05:
        $r6 = r0.<org.waveprotocol.box.server.rpc.AbstractWaveSocketIOServlet: com.glines.socketio.server.SocketIOConfig config>;

        $r7 = interfaceinvoke $r6.<com.glines.socketio.server.SocketIOConfig: java.util.Collection getTransports()>();

        $r8 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

     label06:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label11;

        $r19 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r56 = (com.glines.socketio.server.Transport) $r19;

     label07:
        $r20 = virtualinvoke r0.<org.waveprotocol.box.server.rpc.AbstractWaveSocketIOServlet: javax.servlet.ServletConfig getServletConfig()>();

        interfaceinvoke r56.<com.glines.socketio.server.Transport: void init(javax.servlet.ServletConfig)>($r20);

     label08:
        goto label10;

     label09:
        $r43 := @caughtexception;

        $r44 = r0.<org.waveprotocol.box.server.rpc.AbstractWaveSocketIOServlet: com.glines.socketio.server.SocketIOConfig config>;

        $r45 = interfaceinvoke r56.<com.glines.socketio.server.Transport: com.glines.socketio.server.TransportType getType()>();

        interfaceinvoke $r44.<com.glines.socketio.server.SocketIOConfig: void removeTransport(com.glines.socketio.server.TransportType)>($r45);

        $r47 = <org.waveprotocol.box.server.rpc.AbstractWaveSocketIOServlet: java.util.logging.Logger LOGGER>;

        $r48 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r49 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Transport ");

        $r50 = interfaceinvoke r56.<com.glines.socketio.server.Transport: com.glines.socketio.server.TransportType getType()>();

        $r51 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r50);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" disabled. Initialization failed: ");

        $r53 = virtualinvoke $r43.<com.glines.socketio.server.TransportInitializationException: java.lang.String getMessage()>();

        $r54 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r53);

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r47.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r48, $r55);

     label10:
        goto label06;

     label11:
        $r10 = <org.waveprotocol.box.server.rpc.AbstractWaveSocketIOServlet: java.util.logging.Logger LOGGER>;

        $r9 = <java.util.logging.Level: java.util.logging.Level INFO>;

        $z2 = virtualinvoke $r10.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r9);

        if $z2 == 0 goto label12;

        $r12 = <org.waveprotocol.box.server.rpc.AbstractWaveSocketIOServlet: java.util.logging.Logger LOGGER>;

        $r13 = <java.util.logging.Level: java.util.logging.Level INFO>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Transports loaded: ");

        $r15 = r0.<org.waveprotocol.box.server.rpc.AbstractWaveSocketIOServlet: com.glines.socketio.server.SocketIOConfig config>;

        $r16 = interfaceinvoke $r15.<com.glines.socketio.server.SocketIOConfig: java.util.Collection getTransports()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r12.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r13, $r18);

     label12:
        return;

        catch com.glines.socketio.server.TransportInitializationException from label07 to label08 with label09;
    }

    public void destroy()
    {
        com.glines.socketio.server.Transport r5;
        org.waveprotocol.box.server.rpc.AbstractWaveSocketIOServlet r0;
        java.util.Iterator $r3;
        com.glines.socketio.server.SocketIOConfig $r1;
        java.util.Collection $r2;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.server.rpc.AbstractWaveSocketIOServlet;

        $r1 = r0.<org.waveprotocol.box.server.rpc.AbstractWaveSocketIOServlet: com.glines.socketio.server.SocketIOConfig config>;

        $r2 = interfaceinvoke $r1.<com.glines.socketio.server.SocketIOConfig: java.util.Collection getTransports()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.glines.socketio.server.Transport) $r4;

        interfaceinvoke r5.<com.glines.socketio.server.Transport: void destroy()>();

        goto label1;

     label2:
        specialinvoke r0.<javax.servlet.http.HttpServlet: void destroy()>();

        return;
    }

    protected void doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws javax.servlet.ServletException, java.io.IOException
    {
        javax.servlet.http.HttpServletResponse r2;
        javax.servlet.http.HttpServletRequest r1;
        org.waveprotocol.box.server.rpc.AbstractWaveSocketIOServlet r0;

        r0 := @this: org.waveprotocol.box.server.rpc.AbstractWaveSocketIOServlet;

        r1 := @parameter0: javax.servlet.http.HttpServletRequest;

        r2 := @parameter1: javax.servlet.http.HttpServletResponse;

        specialinvoke r0.<org.waveprotocol.box.server.rpc.AbstractWaveSocketIOServlet: void serve(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(r1, r2);

        return;
    }

    protected void doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws javax.servlet.ServletException, java.io.IOException
    {
        javax.servlet.http.HttpServletResponse r2;
        javax.servlet.http.HttpServletRequest r1;
        org.waveprotocol.box.server.rpc.AbstractWaveSocketIOServlet r0;

        r0 := @this: org.waveprotocol.box.server.rpc.AbstractWaveSocketIOServlet;

        r1 := @parameter0: javax.servlet.http.HttpServletRequest;

        r2 := @parameter1: javax.servlet.http.HttpServletResponse;

        specialinvoke r0.<org.waveprotocol.box.server.rpc.AbstractWaveSocketIOServlet: void serve(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(r1, r2);

        return;
    }

    protected abstract com.glines.socketio.server.SocketIOInbound doSocketIOConnect(javax.servlet.http.HttpServletRequest);

    private void serve(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws javax.servlet.ServletException, java.io.IOException
    {
        org.waveprotocol.box.server.rpc.AbstractWaveSocketIOServlet r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        com.glines.socketio.server.Transport $r9;
        java.util.logging.Logger $r11, $r15;
        com.glines.socketio.server.SocketIOSessionManager $r13;
        java.lang.StringBuilder $r14, $r17, $r19, $r20, $r21, $r22, $r24, $r30, $r31, $r33;
        java.lang.ClassLoader $r38, $r44;
        java.lang.String[] $r4;
        java.util.logging.Level $r10, $r16;
        javax.servlet.http.HttpServletRequest r0;
        javax.servlet.ServletOutputStream $r40, $r46;
        int $i0, $i1;
        com.glines.socketio.server.TransportType $r8, $r23;
        java.lang.String $r1, $r3, $r6, $r18, $r25, $r26, $r27, $r28, $r29, $r32, $r34, $r35, $r36, $r41, $r42, r47;
        com.glines.socketio.server.SocketIOConfig $r7;
        javax.servlet.http.HttpServletResponse r2;
        java.lang.Class $r37, $r43;
        org.waveprotocol.box.server.rpc.AbstractWaveSocketIOServlet$1 $r12;
        java.io.InputStream $r39, $r45;

        r5 := @this: org.waveprotocol.box.server.rpc.AbstractWaveSocketIOServlet;

        r0 := @parameter0: javax.servlet.http.HttpServletRequest;

        r2 := @parameter1: javax.servlet.http.HttpServletResponse;

        $r1 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getPathInfo()>();

        r47 = $r1;

        if $r1 == null goto label1;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 == 0 goto label1;

        $r3 = "/";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

     label1:
        interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void sendError(int,java.lang.String)>(400, "Missing SocketIO transport");

        return;

     label2:
        $z1 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("/");

        if $z1 == 0 goto label3;

        r47 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>(1);

     label3:
        $r4 = virtualinvoke r47.<java.lang.String: java.lang.String[] split(java.lang.String)>("/");

        $r7 = r5.<org.waveprotocol.box.server.rpc.AbstractWaveSocketIOServlet: com.glines.socketio.server.SocketIOConfig config>;

        $r6 = $r4[0];

        $r8 = staticinvoke <com.glines.socketio.server.TransportType: com.glines.socketio.server.TransportType 'from'(java.lang.String)>($r6);

        $r9 = interfaceinvoke $r7.<com.glines.socketio.server.SocketIOConfig: com.glines.socketio.server.Transport getTransport(com.glines.socketio.server.TransportType)>($r8);

        if $r9 != null goto label6;

        $r26 = "GET";

        $r27 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>();

        $z3 = virtualinvoke $r26.<java.lang.String: boolean equals(java.lang.Object)>($r27);

        if $z3 == 0 goto label4;

        $r42 = "socket.io.js";

        $r41 = $r4[0];

        $z6 = virtualinvoke $r42.<java.lang.String: boolean equals(java.lang.Object)>($r41);

        if $z6 == 0 goto label4;

        interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setContentType(java.lang.String)>("text/javascript");

        $r43 = virtualinvoke r5.<java.lang.Object: java.lang.Class getClass()>();

        $r44 = virtualinvoke $r43.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r45 = virtualinvoke $r44.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>("com/glines/socketio/socket.io.js");

        $r46 = interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: javax.servlet.ServletOutputStream getOutputStream()>();

        staticinvoke <com.glines.socketio.util.IO: void copy(java.io.InputStream,java.io.OutputStream)>($r45, $r46);

        return;

     label4:
        $r28 = "GET";

        $r29 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>();

        $z4 = virtualinvoke $r28.<java.lang.String: boolean equals(java.lang.Object)>($r29);

        if $z4 == 0 goto label5;

        $r36 = "WebSocketMain.swf";

        $r35 = $r4[0];

        $z5 = virtualinvoke $r36.<java.lang.String: boolean equals(java.lang.Object)>($r35);

        if $z5 == 0 goto label5;

        interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setContentType(java.lang.String)>("application/x-shockwave-flash");

        $r37 = virtualinvoke r5.<java.lang.Object: java.lang.Class getClass()>();

        $r38 = virtualinvoke $r37.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r39 = virtualinvoke $r38.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>("com/glines/socketio/WebSocketMain.swf");

        $r40 = interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: javax.servlet.ServletOutputStream getOutputStream()>();

        staticinvoke <com.glines.socketio.util.IO: void copy(java.io.InputStream,java.io.OutputStream)>($r39, $r40);

        return;

     label5:
        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown SocketIO transport: ");

        $r32 = $r4[0];

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void sendError(int,java.lang.String)>(400, $r34);

        return;

     label6:
        $r11 = <org.waveprotocol.box.server.rpc.AbstractWaveSocketIOServlet: java.util.logging.Logger LOGGER>;

        $r10 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z2 = virtualinvoke $r11.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r10);

        if $z2 == 0 goto label7;

        $r15 = <org.waveprotocol.box.server.rpc.AbstractWaveSocketIOServlet: java.util.logging.Logger LOGGER>;

        $r16 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Handling request from ");

        $r18 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getRemoteHost()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $i1 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: int getRemotePort()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with transport: ");

        $r23 = interfaceinvoke $r9.<com.glines.socketio.server.Transport: com.glines.socketio.server.TransportType getType()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r16, $r25);

     label7:
        $r12 = new org.waveprotocol.box.server.rpc.AbstractWaveSocketIOServlet$1;

        specialinvoke $r12.<org.waveprotocol.box.server.rpc.AbstractWaveSocketIOServlet$1: void <init>(org.waveprotocol.box.server.rpc.AbstractWaveSocketIOServlet)>(r5);

        $r13 = r5.<org.waveprotocol.box.server.rpc.AbstractWaveSocketIOServlet: com.glines.socketio.server.SocketIOSessionManager sessionManager>;

        interfaceinvoke $r9.<com.glines.socketio.server.Transport: void handle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,com.glines.socketio.server.Transport$InboundFactory,com.glines.socketio.server.SessionManager)>(r0, r2, $r12, $r13);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        <org.waveprotocol.box.server.rpc.AbstractWaveSocketIOServlet: long serialVersionUID> = 2L;

        $r0 = class "Lcom/glines/socketio/server/SocketIOServlet;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <org.waveprotocol.box.server.rpc.AbstractWaveSocketIOServlet: java.util.logging.Logger LOGGER> = $r2;

        return;
    }
}
