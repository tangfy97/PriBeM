public abstract class kodkod.ast.IntExpression extends kodkod.ast.Node
{

    void <init>()
    {
        kodkod.ast.IntExpression r0;

        r0 := @this: kodkod.ast.IntExpression;

        specialinvoke r0.<kodkod.ast.Node: void <init>()>();

        return;
    }

    public final kodkod.ast.Formula eq(kodkod.ast.IntExpression)
    {
        kodkod.ast.operator.IntCompOperator $r2;
        kodkod.ast.IntExpression r0, r1;
        kodkod.ast.Formula $r3;

        r0 := @this: kodkod.ast.IntExpression;

        r1 := @parameter0: kodkod.ast.IntExpression;

        $r2 = <kodkod.ast.operator.IntCompOperator: kodkod.ast.operator.IntCompOperator EQ>;

        $r3 = virtualinvoke r0.<kodkod.ast.IntExpression: kodkod.ast.Formula compare(kodkod.ast.operator.IntCompOperator,kodkod.ast.IntExpression)>($r2, r1);

        return $r3;
    }

    public final kodkod.ast.Formula lt(kodkod.ast.IntExpression)
    {
        kodkod.ast.operator.IntCompOperator $r2;
        kodkod.ast.IntExpression r0, r1;
        kodkod.ast.Formula $r3;

        r0 := @this: kodkod.ast.IntExpression;

        r1 := @parameter0: kodkod.ast.IntExpression;

        $r2 = <kodkod.ast.operator.IntCompOperator: kodkod.ast.operator.IntCompOperator LT>;

        $r3 = virtualinvoke r0.<kodkod.ast.IntExpression: kodkod.ast.Formula compare(kodkod.ast.operator.IntCompOperator,kodkod.ast.IntExpression)>($r2, r1);

        return $r3;
    }

    public final kodkod.ast.Formula lte(kodkod.ast.IntExpression)
    {
        kodkod.ast.operator.IntCompOperator $r2;
        kodkod.ast.IntExpression r0, r1;
        kodkod.ast.Formula $r3;

        r0 := @this: kodkod.ast.IntExpression;

        r1 := @parameter0: kodkod.ast.IntExpression;

        $r2 = <kodkod.ast.operator.IntCompOperator: kodkod.ast.operator.IntCompOperator LTE>;

        $r3 = virtualinvoke r0.<kodkod.ast.IntExpression: kodkod.ast.Formula compare(kodkod.ast.operator.IntCompOperator,kodkod.ast.IntExpression)>($r2, r1);

        return $r3;
    }

    public final kodkod.ast.Formula gt(kodkod.ast.IntExpression)
    {
        kodkod.ast.operator.IntCompOperator $r2;
        kodkod.ast.IntExpression r0, r1;
        kodkod.ast.Formula $r3;

        r0 := @this: kodkod.ast.IntExpression;

        r1 := @parameter0: kodkod.ast.IntExpression;

        $r2 = <kodkod.ast.operator.IntCompOperator: kodkod.ast.operator.IntCompOperator GT>;

        $r3 = virtualinvoke r0.<kodkod.ast.IntExpression: kodkod.ast.Formula compare(kodkod.ast.operator.IntCompOperator,kodkod.ast.IntExpression)>($r2, r1);

        return $r3;
    }

    public final kodkod.ast.Formula gte(kodkod.ast.IntExpression)
    {
        kodkod.ast.operator.IntCompOperator $r2;
        kodkod.ast.IntExpression r0, r1;
        kodkod.ast.Formula $r3;

        r0 := @this: kodkod.ast.IntExpression;

        r1 := @parameter0: kodkod.ast.IntExpression;

        $r2 = <kodkod.ast.operator.IntCompOperator: kodkod.ast.operator.IntCompOperator GTE>;

        $r3 = virtualinvoke r0.<kodkod.ast.IntExpression: kodkod.ast.Formula compare(kodkod.ast.operator.IntCompOperator,kodkod.ast.IntExpression)>($r2, r1);

        return $r3;
    }

    public kodkod.ast.Formula compare(kodkod.ast.operator.IntCompOperator, kodkod.ast.IntExpression)
    {
        kodkod.ast.operator.IntCompOperator r0;
        kodkod.ast.IntComparisonFormula $r3;
        kodkod.ast.IntExpression r2, r4;
        java.lang.NullPointerException $r1;

        r4 := @this: kodkod.ast.IntExpression;

        r0 := @parameter0: kodkod.ast.operator.IntCompOperator;

        r2 := @parameter1: kodkod.ast.IntExpression;

        if r0 == null goto label1;

        if r2 != null goto label2;

     label1:
        $r1 = new java.lang.NullPointerException;

        specialinvoke $r1.<java.lang.NullPointerException: void <init>()>();

        throw $r1;

     label2:
        $r3 = new kodkod.ast.IntComparisonFormula;

        specialinvoke $r3.<kodkod.ast.IntComparisonFormula: void <init>(kodkod.ast.IntExpression,kodkod.ast.operator.IntCompOperator,kodkod.ast.IntExpression)>(r4, r0, r2);

        return $r3;
    }

    public final kodkod.ast.IntExpression sum(kodkod.ast.Decls)
    {
        kodkod.ast.Decls r1;
        kodkod.ast.IntExpression r2;
        kodkod.ast.SumExpression $r0;

        r2 := @this: kodkod.ast.IntExpression;

        r1 := @parameter0: kodkod.ast.Decls;

        $r0 = new kodkod.ast.SumExpression;

        specialinvoke $r0.<kodkod.ast.SumExpression: void <init>(kodkod.ast.Decls,kodkod.ast.IntExpression)>(r1, r2);

        return $r0;
    }

    public final kodkod.ast.IntExpression plus(kodkod.ast.IntExpression)
    {
        kodkod.ast.IntExpression r0, r1, $r3;
        kodkod.ast.operator.IntOperator $r2;

        r0 := @this: kodkod.ast.IntExpression;

        r1 := @parameter0: kodkod.ast.IntExpression;

        $r2 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator PLUS>;

        $r3 = virtualinvoke r0.<kodkod.ast.IntExpression: kodkod.ast.IntExpression compose(kodkod.ast.operator.IntOperator,kodkod.ast.IntExpression)>($r2, r1);

        return $r3;
    }

    public final kodkod.ast.IntExpression minus(kodkod.ast.IntExpression)
    {
        kodkod.ast.IntExpression r0, r1, $r3;
        kodkod.ast.operator.IntOperator $r2;

        r0 := @this: kodkod.ast.IntExpression;

        r1 := @parameter0: kodkod.ast.IntExpression;

        $r2 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator MINUS>;

        $r3 = virtualinvoke r0.<kodkod.ast.IntExpression: kodkod.ast.IntExpression compose(kodkod.ast.operator.IntOperator,kodkod.ast.IntExpression)>($r2, r1);

        return $r3;
    }

    public final kodkod.ast.IntExpression multiply(kodkod.ast.IntExpression)
    {
        kodkod.ast.IntExpression r0, r1, $r3;
        kodkod.ast.operator.IntOperator $r2;

        r0 := @this: kodkod.ast.IntExpression;

        r1 := @parameter0: kodkod.ast.IntExpression;

        $r2 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator MULTIPLY>;

        $r3 = virtualinvoke r0.<kodkod.ast.IntExpression: kodkod.ast.IntExpression compose(kodkod.ast.operator.IntOperator,kodkod.ast.IntExpression)>($r2, r1);

        return $r3;
    }

    public final kodkod.ast.IntExpression divide(kodkod.ast.IntExpression)
    {
        kodkod.ast.IntExpression r0, r1, $r3;
        kodkod.ast.operator.IntOperator $r2;

        r0 := @this: kodkod.ast.IntExpression;

        r1 := @parameter0: kodkod.ast.IntExpression;

        $r2 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator DIVIDE>;

        $r3 = virtualinvoke r0.<kodkod.ast.IntExpression: kodkod.ast.IntExpression compose(kodkod.ast.operator.IntOperator,kodkod.ast.IntExpression)>($r2, r1);

        return $r3;
    }

    public final kodkod.ast.IntExpression modulo(kodkod.ast.IntExpression)
    {
        kodkod.ast.IntExpression r0, r1, $r3;
        kodkod.ast.operator.IntOperator $r2;

        r0 := @this: kodkod.ast.IntExpression;

        r1 := @parameter0: kodkod.ast.IntExpression;

        $r2 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator MODULO>;

        $r3 = virtualinvoke r0.<kodkod.ast.IntExpression: kodkod.ast.IntExpression compose(kodkod.ast.operator.IntOperator,kodkod.ast.IntExpression)>($r2, r1);

        return $r3;
    }

    public final kodkod.ast.IntExpression and(kodkod.ast.IntExpression)
    {
        kodkod.ast.IntExpression r0, r1, $r3;
        kodkod.ast.operator.IntOperator $r2;

        r0 := @this: kodkod.ast.IntExpression;

        r1 := @parameter0: kodkod.ast.IntExpression;

        $r2 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator AND>;

        $r3 = virtualinvoke r0.<kodkod.ast.IntExpression: kodkod.ast.IntExpression compose(kodkod.ast.operator.IntOperator,kodkod.ast.IntExpression)>($r2, r1);

        return $r3;
    }

    public final kodkod.ast.IntExpression or(kodkod.ast.IntExpression)
    {
        kodkod.ast.IntExpression r0, r1, $r3;
        kodkod.ast.operator.IntOperator $r2;

        r0 := @this: kodkod.ast.IntExpression;

        r1 := @parameter0: kodkod.ast.IntExpression;

        $r2 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator OR>;

        $r3 = virtualinvoke r0.<kodkod.ast.IntExpression: kodkod.ast.IntExpression compose(kodkod.ast.operator.IntOperator,kodkod.ast.IntExpression)>($r2, r1);

        return $r3;
    }

    public final kodkod.ast.IntExpression xor(kodkod.ast.IntExpression)
    {
        kodkod.ast.IntExpression r0, r1, $r3;
        kodkod.ast.operator.IntOperator $r2;

        r0 := @this: kodkod.ast.IntExpression;

        r1 := @parameter0: kodkod.ast.IntExpression;

        $r2 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator XOR>;

        $r3 = virtualinvoke r0.<kodkod.ast.IntExpression: kodkod.ast.IntExpression compose(kodkod.ast.operator.IntOperator,kodkod.ast.IntExpression)>($r2, r1);

        return $r3;
    }

    public final kodkod.ast.IntExpression shl(kodkod.ast.IntExpression)
    {
        kodkod.ast.IntExpression r0, r1, $r3;
        kodkod.ast.operator.IntOperator $r2;

        r0 := @this: kodkod.ast.IntExpression;

        r1 := @parameter0: kodkod.ast.IntExpression;

        $r2 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator SHL>;

        $r3 = virtualinvoke r0.<kodkod.ast.IntExpression: kodkod.ast.IntExpression compose(kodkod.ast.operator.IntOperator,kodkod.ast.IntExpression)>($r2, r1);

        return $r3;
    }

    public final kodkod.ast.IntExpression shr(kodkod.ast.IntExpression)
    {
        kodkod.ast.IntExpression r0, r1, $r3;
        kodkod.ast.operator.IntOperator $r2;

        r0 := @this: kodkod.ast.IntExpression;

        r1 := @parameter0: kodkod.ast.IntExpression;

        $r2 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator SHR>;

        $r3 = virtualinvoke r0.<kodkod.ast.IntExpression: kodkod.ast.IntExpression compose(kodkod.ast.operator.IntOperator,kodkod.ast.IntExpression)>($r2, r1);

        return $r3;
    }

    public final kodkod.ast.IntExpression sha(kodkod.ast.IntExpression)
    {
        kodkod.ast.IntExpression r0, r1, $r3;
        kodkod.ast.operator.IntOperator $r2;

        r0 := @this: kodkod.ast.IntExpression;

        r1 := @parameter0: kodkod.ast.IntExpression;

        $r2 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator SHA>;

        $r3 = virtualinvoke r0.<kodkod.ast.IntExpression: kodkod.ast.IntExpression compose(kodkod.ast.operator.IntOperator,kodkod.ast.IntExpression)>($r2, r1);

        return $r3;
    }

    public final kodkod.ast.IntExpression compose(kodkod.ast.operator.IntOperator, kodkod.ast.IntExpression)
    {
        kodkod.ast.operator.IntOperator r0;
        kodkod.ast.IntExpression r2, r4;
        kodkod.ast.BinaryIntExpression $r3;
        java.lang.NullPointerException $r1;

        r4 := @this: kodkod.ast.IntExpression;

        r0 := @parameter0: kodkod.ast.operator.IntOperator;

        r2 := @parameter1: kodkod.ast.IntExpression;

        if r0 == null goto label1;

        if r2 != null goto label2;

     label1:
        $r1 = new java.lang.NullPointerException;

        specialinvoke $r1.<java.lang.NullPointerException: void <init>()>();

        throw $r1;

     label2:
        $r3 = new kodkod.ast.BinaryIntExpression;

        specialinvoke $r3.<kodkod.ast.BinaryIntExpression: void <init>(kodkod.ast.IntExpression,kodkod.ast.operator.IntOperator,kodkod.ast.IntExpression)>(r4, r0, r2);

        return $r3;
    }

    public static transient kodkod.ast.IntExpression plus(kodkod.ast.IntExpression[])
    {
        kodkod.ast.IntExpression[] r0;
        kodkod.ast.operator.IntOperator $r1;
        kodkod.ast.IntExpression $r2;

        r0 := @parameter0: kodkod.ast.IntExpression[];

        $r1 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator PLUS>;

        $r2 = staticinvoke <kodkod.ast.IntExpression: kodkod.ast.IntExpression compose(kodkod.ast.operator.IntOperator,kodkod.ast.IntExpression[])>($r1, r0);

        return $r2;
    }

    public static kodkod.ast.IntExpression plus(java.util.Collection)
    {
        kodkod.ast.operator.IntOperator $r1;
        kodkod.ast.IntExpression $r2;
        java.util.Collection r0;

        r0 := @parameter0: java.util.Collection;

        $r1 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator PLUS>;

        $r2 = staticinvoke <kodkod.ast.IntExpression: kodkod.ast.IntExpression compose(kodkod.ast.operator.IntOperator,java.util.Collection)>($r1, r0);

        return $r2;
    }

    public static transient kodkod.ast.IntExpression multiply(kodkod.ast.IntExpression[])
    {
        kodkod.ast.IntExpression[] r0;
        kodkod.ast.operator.IntOperator $r1;
        kodkod.ast.IntExpression $r2;

        r0 := @parameter0: kodkod.ast.IntExpression[];

        $r1 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator MULTIPLY>;

        $r2 = staticinvoke <kodkod.ast.IntExpression: kodkod.ast.IntExpression compose(kodkod.ast.operator.IntOperator,kodkod.ast.IntExpression[])>($r1, r0);

        return $r2;
    }

    public static kodkod.ast.IntExpression multiply(java.util.Collection)
    {
        kodkod.ast.operator.IntOperator $r1;
        kodkod.ast.IntExpression $r2;
        java.util.Collection r0;

        r0 := @parameter0: java.util.Collection;

        $r1 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator MULTIPLY>;

        $r2 = staticinvoke <kodkod.ast.IntExpression: kodkod.ast.IntExpression compose(kodkod.ast.operator.IntOperator,java.util.Collection)>($r1, r0);

        return $r2;
    }

    public static transient kodkod.ast.IntExpression and(kodkod.ast.IntExpression[])
    {
        kodkod.ast.IntExpression[] r0;
        kodkod.ast.operator.IntOperator $r1;
        kodkod.ast.IntExpression $r2;

        r0 := @parameter0: kodkod.ast.IntExpression[];

        $r1 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator AND>;

        $r2 = staticinvoke <kodkod.ast.IntExpression: kodkod.ast.IntExpression compose(kodkod.ast.operator.IntOperator,kodkod.ast.IntExpression[])>($r1, r0);

        return $r2;
    }

    public static kodkod.ast.IntExpression and(java.util.Collection)
    {
        kodkod.ast.operator.IntOperator $r1;
        kodkod.ast.IntExpression $r2;
        java.util.Collection r0;

        r0 := @parameter0: java.util.Collection;

        $r1 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator AND>;

        $r2 = staticinvoke <kodkod.ast.IntExpression: kodkod.ast.IntExpression compose(kodkod.ast.operator.IntOperator,java.util.Collection)>($r1, r0);

        return $r2;
    }

    public static transient kodkod.ast.IntExpression or(kodkod.ast.IntExpression[])
    {
        kodkod.ast.IntExpression[] r0;
        kodkod.ast.operator.IntOperator $r1;
        kodkod.ast.IntExpression $r2;

        r0 := @parameter0: kodkod.ast.IntExpression[];

        $r1 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator OR>;

        $r2 = staticinvoke <kodkod.ast.IntExpression: kodkod.ast.IntExpression compose(kodkod.ast.operator.IntOperator,kodkod.ast.IntExpression[])>($r1, r0);

        return $r2;
    }

    public static kodkod.ast.IntExpression or(java.util.Collection)
    {
        kodkod.ast.operator.IntOperator $r1;
        kodkod.ast.IntExpression $r2;
        java.util.Collection r0;

        r0 := @parameter0: java.util.Collection;

        $r1 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator OR>;

        $r2 = staticinvoke <kodkod.ast.IntExpression: kodkod.ast.IntExpression compose(kodkod.ast.operator.IntOperator,java.util.Collection)>($r1, r0);

        return $r2;
    }

    public static transient kodkod.ast.IntExpression compose(kodkod.ast.operator.IntOperator, kodkod.ast.IntExpression[])
    {
        java.lang.Object[] $r13;
        kodkod.ast.BinaryIntExpression $r1;
        kodkod.ast.IntExpression[] r0, $r12, $r14;
        int $i0, $i1;
        java.lang.String $r8, $r10;
        kodkod.ast.NaryIntExpression $r11;
        kodkod.ast.operator.IntOperator r2;
        kodkod.ast.IntExpression $r3, $r4, $r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7, $r9;

        r2 := @parameter0: kodkod.ast.operator.IntOperator;

        r0 := @parameter1: kodkod.ast.IntExpression[];

        $i0 = lengthof r0;

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            default: goto label4;
        };

     label1:
        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("Expected at least one argument: ");

        $r8 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(r0);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label2:
        $r5 = r0[0];

        return $r5;

     label3:
        $r1 = new kodkod.ast.BinaryIntExpression;

        $r4 = r0[0];

        $r3 = r0[1];

        specialinvoke $r1.<kodkod.ast.BinaryIntExpression: void <init>(kodkod.ast.IntExpression,kodkod.ast.operator.IntOperator,kodkod.ast.IntExpression)>($r4, r2, $r3);

        return $r1;

     label4:
        $r11 = new kodkod.ast.NaryIntExpression;

        $i1 = lengthof r0;

        $r12 = newarray (kodkod.ast.IntExpression)[$i1];

        $r13 = staticinvoke <kodkod.util.collections.Containers: java.lang.Object[] copy(java.lang.Object[],java.lang.Object[])>(r0, $r12);

        $r14 = (kodkod.ast.IntExpression[]) $r13;

        specialinvoke $r11.<kodkod.ast.NaryIntExpression: void <init>(kodkod.ast.operator.IntOperator,kodkod.ast.IntExpression[])>(r2, $r14);

        return $r11;
    }

    public static kodkod.ast.IntExpression compose(kodkod.ast.operator.IntOperator, java.util.Collection)
    {
        java.lang.Object[] $r17;
        kodkod.ast.BinaryIntExpression $r2;
        kodkod.ast.IntExpression[] $r16, $r18;
        int $i0, $i1;
        java.lang.String $r14;
        kodkod.ast.NaryIntExpression $r15;
        kodkod.ast.operator.IntOperator r4;
        kodkod.ast.IntExpression $r5, $r7, $r10;
        java.util.Iterator $r1, $r8;
        java.util.Collection r0;
        java.lang.IllegalArgumentException $r11;
        java.lang.Object $r3, $r6, $r9;
        java.lang.StringBuilder $r12, $r13;

        r4 := @parameter0: kodkod.ast.operator.IntOperator;

        r0 := @parameter1: java.util.Collection;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            default: goto label4;
        };

     label1:
        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("Expected at least one argument: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r11;

     label2:
        $r8 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (kodkod.ast.IntExpression) $r9;

        return $r10;

     label3:
        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

        $r2 = new kodkod.ast.BinaryIntExpression;

        $r3 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (kodkod.ast.IntExpression) $r3;

        $r6 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (kodkod.ast.IntExpression) $r6;

        specialinvoke $r2.<kodkod.ast.BinaryIntExpression: void <init>(kodkod.ast.IntExpression,kodkod.ast.operator.IntOperator,kodkod.ast.IntExpression)>($r5, r4, $r7);

        return $r2;

     label4:
        $r15 = new kodkod.ast.NaryIntExpression;

        $i1 = interfaceinvoke r0.<java.util.Collection: int size()>();

        $r16 = newarray (kodkod.ast.IntExpression)[$i1];

        $r17 = interfaceinvoke r0.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r16);

        $r18 = (kodkod.ast.IntExpression[]) $r17;

        specialinvoke $r15.<kodkod.ast.NaryIntExpression: void <init>(kodkod.ast.operator.IntOperator,kodkod.ast.IntExpression[])>(r4, $r18);

        return $r15;
    }

    public final kodkod.ast.IntExpression negate()
    {
        kodkod.ast.IntExpression r0, $r2;
        kodkod.ast.operator.IntOperator $r1;

        r0 := @this: kodkod.ast.IntExpression;

        $r1 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator NEG>;

        $r2 = virtualinvoke r0.<kodkod.ast.IntExpression: kodkod.ast.IntExpression apply(kodkod.ast.operator.IntOperator)>($r1);

        return $r2;
    }

    public final kodkod.ast.IntExpression not()
    {
        kodkod.ast.IntExpression r0, $r2;
        kodkod.ast.operator.IntOperator $r1;

        r0 := @this: kodkod.ast.IntExpression;

        $r1 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator NOT>;

        $r2 = virtualinvoke r0.<kodkod.ast.IntExpression: kodkod.ast.IntExpression apply(kodkod.ast.operator.IntOperator)>($r1);

        return $r2;
    }

    public final kodkod.ast.IntExpression abs()
    {
        kodkod.ast.IntExpression r0, $r2;
        kodkod.ast.operator.IntOperator $r1;

        r0 := @this: kodkod.ast.IntExpression;

        $r1 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator ABS>;

        $r2 = virtualinvoke r0.<kodkod.ast.IntExpression: kodkod.ast.IntExpression apply(kodkod.ast.operator.IntOperator)>($r1);

        return $r2;
    }

    public final kodkod.ast.IntExpression signum()
    {
        kodkod.ast.IntExpression r0, $r2;
        kodkod.ast.operator.IntOperator $r1;

        r0 := @this: kodkod.ast.IntExpression;

        $r1 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator SGN>;

        $r2 = virtualinvoke r0.<kodkod.ast.IntExpression: kodkod.ast.IntExpression apply(kodkod.ast.operator.IntOperator)>($r1);

        return $r2;
    }

    public final kodkod.ast.IntExpression apply(kodkod.ast.operator.IntOperator)
    {
        kodkod.ast.operator.IntOperator r1;
        kodkod.ast.IntExpression r2;
        kodkod.ast.UnaryIntExpression $r0;

        r2 := @this: kodkod.ast.IntExpression;

        r1 := @parameter0: kodkod.ast.operator.IntOperator;

        $r0 = new kodkod.ast.UnaryIntExpression;

        specialinvoke $r0.<kodkod.ast.UnaryIntExpression: void <init>(kodkod.ast.operator.IntOperator,kodkod.ast.IntExpression)>(r1, r2);

        return $r0;
    }

    public final kodkod.ast.Expression toExpression()
    {
        kodkod.ast.operator.IntCastOperator $r1;
        kodkod.ast.Expression $r2;
        kodkod.ast.IntExpression r0;

        r0 := @this: kodkod.ast.IntExpression;

        $r1 = <kodkod.ast.operator.IntCastOperator: kodkod.ast.operator.IntCastOperator INTCAST>;

        $r2 = virtualinvoke r0.<kodkod.ast.IntExpression: kodkod.ast.Expression cast(kodkod.ast.operator.IntCastOperator)>($r1);

        return $r2;
    }

    public final kodkod.ast.Expression toBitset()
    {
        kodkod.ast.operator.IntCastOperator $r1;
        kodkod.ast.Expression $r2;
        kodkod.ast.IntExpression r0;

        r0 := @this: kodkod.ast.IntExpression;

        $r1 = <kodkod.ast.operator.IntCastOperator: kodkod.ast.operator.IntCastOperator BITSETCAST>;

        $r2 = virtualinvoke r0.<kodkod.ast.IntExpression: kodkod.ast.Expression cast(kodkod.ast.operator.IntCastOperator)>($r1);

        return $r2;
    }

    public final kodkod.ast.Expression cast(kodkod.ast.operator.IntCastOperator)
    {
        kodkod.ast.IntExpression r2;
        kodkod.ast.operator.IntCastOperator r0;
        kodkod.ast.IntToExprCast $r1;
        java.lang.NullPointerException $r3;

        r2 := @this: kodkod.ast.IntExpression;

        r0 := @parameter0: kodkod.ast.operator.IntCastOperator;

        if r0 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();

        throw $r3;

     label1:
        $r1 = new kodkod.ast.IntToExprCast;

        specialinvoke $r1.<kodkod.ast.IntToExprCast: void <init>(kodkod.ast.IntExpression,kodkod.ast.operator.IntCastOperator)>(r2, r0);

        return $r1;
    }

    public abstract java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor);

    public abstract void accept(kodkod.ast.visitor.VoidVisitor);
}
