public class org.apache.commons.httpclient.methods.PostMethod extends org.apache.commons.httpclient.methods.EntityEnclosingMethod
{
    private static final org.apache.commons.logging.Log LOG;
    public static final java.lang.String FORM_URL_ENCODED_CONTENT_TYPE;
    private java.util.Vector params;
    static java.lang.Class class$org$apache$commons$httpclient$methods$PostMethod;

    public void <init>()
    {
        org.apache.commons.httpclient.methods.PostMethod r0;
        java.util.Vector $r1;

        r0 := @this: org.apache.commons.httpclient.methods.PostMethod;

        specialinvoke r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void <init>()>();

        $r1 = new java.util.Vector;

        specialinvoke $r1.<java.util.Vector: void <init>()>();

        r0.<org.apache.commons.httpclient.methods.PostMethod: java.util.Vector params> = $r1;

        return;
    }

    public void <init>(java.lang.String)
    {
        org.apache.commons.httpclient.methods.PostMethod r0;
        java.lang.String r1;
        java.util.Vector $r2;

        r0 := @this: org.apache.commons.httpclient.methods.PostMethod;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void <init>(java.lang.String)>(r1);

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>()>();

        r0.<org.apache.commons.httpclient.methods.PostMethod: java.util.Vector params> = $r2;

        return;
    }

    public java.lang.String getName()
    {
        org.apache.commons.httpclient.methods.PostMethod r0;

        r0 := @this: org.apache.commons.httpclient.methods.PostMethod;

        return "POST";
    }

    protected boolean hasRequestContent()
    {
        java.util.Vector $r2;
        org.apache.commons.logging.Log $r0;
        org.apache.commons.httpclient.methods.PostMethod r1;
        boolean $z0, $z1;

        r1 := @this: org.apache.commons.httpclient.methods.PostMethod;

        $r0 = <org.apache.commons.httpclient.methods.PostMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter PostMethod.hasRequestContent()");

        $r2 = r1.<org.apache.commons.httpclient.methods.PostMethod: java.util.Vector params>;

        $z0 = virtualinvoke $r2.<java.util.Vector: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r1.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: boolean hasRequestContent()>();

        return $z1;
    }

    protected void clearRequestBody()
    {
        org.apache.commons.logging.Log $r0;
        org.apache.commons.httpclient.methods.PostMethod r1;
        java.util.Vector $r2;

        r1 := @this: org.apache.commons.httpclient.methods.PostMethod;

        $r0 = <org.apache.commons.httpclient.methods.PostMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter PostMethod.clearRequestBody()");

        $r2 = r1.<org.apache.commons.httpclient.methods.PostMethod: java.util.Vector params>;

        virtualinvoke $r2.<java.util.Vector: void clear()>();

        specialinvoke r1.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void clearRequestBody()>();

        return;
    }

    protected org.apache.commons.httpclient.methods.RequestEntity generateRequestEntity()
    {
        byte[] $r7;
        org.apache.commons.httpclient.NameValuePair[] $r3;
        org.apache.commons.httpclient.methods.PostMethod r0;
        java.util.Vector $r1;
        org.apache.commons.httpclient.methods.ByteArrayRequestEntity $r6;
        org.apache.commons.httpclient.methods.RequestEntity $r2;
        java.lang.String $r4, $r5;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.methods.PostMethod;

        $r1 = r0.<org.apache.commons.httpclient.methods.PostMethod: java.util.Vector params>;

        $z0 = virtualinvoke $r1.<java.util.Vector: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r3 = virtualinvoke r0.<org.apache.commons.httpclient.methods.PostMethod: org.apache.commons.httpclient.NameValuePair[] getParameters()>();

        $r4 = virtualinvoke r0.<org.apache.commons.httpclient.methods.PostMethod: java.lang.String getRequestCharSet()>();

        $r5 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: java.lang.String formUrlEncode(org.apache.commons.httpclient.NameValuePair[],java.lang.String)>($r3, $r4);

        $r6 = new org.apache.commons.httpclient.methods.ByteArrayRequestEntity;

        $r7 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>($r5);

        specialinvoke $r6.<org.apache.commons.httpclient.methods.ByteArrayRequestEntity: void <init>(byte[],java.lang.String)>($r7, "application/x-www-form-urlencoded");

        return $r6;

     label1:
        $r2 = specialinvoke r0.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: org.apache.commons.httpclient.methods.RequestEntity generateRequestEntity()>();

        return $r2;
    }

    public void setParameter(java.lang.String, java.lang.String)
    {
        org.apache.commons.logging.Log $r0;
        org.apache.commons.httpclient.methods.PostMethod r1;
        java.lang.String r2, r3;

        r1 := @this: org.apache.commons.httpclient.methods.PostMethod;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r0 = <org.apache.commons.httpclient.methods.PostMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter PostMethod.setParameter(String, String)");

        virtualinvoke r1.<org.apache.commons.httpclient.methods.PostMethod: boolean removeParameter(java.lang.String)>(r2);

        virtualinvoke r1.<org.apache.commons.httpclient.methods.PostMethod: void addParameter(java.lang.String,java.lang.String)>(r2, r3);

        return;
    }

    public org.apache.commons.httpclient.NameValuePair getParameter(java.lang.String)
    {
        java.util.Iterator $r4;
        org.apache.commons.httpclient.methods.PostMethod r2;
        java.util.Vector $r3;
        org.apache.commons.httpclient.NameValuePair r6;
        org.apache.commons.logging.Log $r0;
        java.lang.Object $r5;
        java.lang.String r1, $r7;
        boolean $z0, $z1;

        r2 := @this: org.apache.commons.httpclient.methods.PostMethod;

        r1 := @parameter0: java.lang.String;

        $r0 = <org.apache.commons.httpclient.methods.PostMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter PostMethod.getParameter(String)");

        if r1 != null goto label1;

        return null;

     label1:
        $r3 = r2.<org.apache.commons.httpclient.methods.PostMethod: java.util.Vector params>;

        $r4 = virtualinvoke $r3.<java.util.Vector: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.commons.httpclient.NameValuePair) $r5;

        $r7 = virtualinvoke r6.<org.apache.commons.httpclient.NameValuePair: java.lang.String getName()>();

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z1 == 0 goto label3;

        return r6;

     label3:
        goto label2;

     label4:
        return null;
    }

    public org.apache.commons.httpclient.NameValuePair[] getParameters()
    {
        java.lang.Object[] $r4;
        org.apache.commons.httpclient.NameValuePair[] r5;
        org.apache.commons.httpclient.methods.PostMethod r1;
        java.util.Vector $r2, $r3;
        org.apache.commons.httpclient.NameValuePair $r7;
        int $i0, i1;
        org.apache.commons.logging.Log $r0;
        java.lang.Object $r6;

        r1 := @this: org.apache.commons.httpclient.methods.PostMethod;

        $r0 = <org.apache.commons.httpclient.methods.PostMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter PostMethod.getParameters()");

        $r2 = r1.<org.apache.commons.httpclient.methods.PostMethod: java.util.Vector params>;

        $i0 = virtualinvoke $r2.<java.util.Vector: int size()>();

        $r3 = r1.<org.apache.commons.httpclient.methods.PostMethod: java.util.Vector params>;

        $r4 = virtualinvoke $r3.<java.util.Vector: java.lang.Object[] toArray()>();

        r5 = newarray (org.apache.commons.httpclient.NameValuePair)[$i0];

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $r6 = $r4[i1];

        $r7 = (org.apache.commons.httpclient.NameValuePair) $r6;

        r5[i1] = $r7;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r5;
    }

    public void addParameter(java.lang.String, java.lang.String) throws java.lang.IllegalArgumentException
    {
        java.util.Vector $r6;
        org.apache.commons.httpclient.NameValuePair $r5;
        org.apache.commons.logging.Log $r0;
        java.lang.String r1, r3;
        org.apache.commons.httpclient.methods.PostMethod r4;
        java.lang.IllegalArgumentException $r2;

        r4 := @this: org.apache.commons.httpclient.methods.PostMethod;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r0 = <org.apache.commons.httpclient.methods.PostMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter PostMethod.addParameter(String, String)");

        if r1 == null goto label1;

        if r3 != null goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Arguments to addParameter(String, String) cannot be null");

        throw $r2;

     label2:
        specialinvoke r4.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void clearRequestBody()>();

        $r6 = r4.<org.apache.commons.httpclient.methods.PostMethod: java.util.Vector params>;

        $r5 = new org.apache.commons.httpclient.NameValuePair;

        specialinvoke $r5.<org.apache.commons.httpclient.NameValuePair: void <init>(java.lang.String,java.lang.String)>(r1, r3);

        virtualinvoke $r6.<java.util.Vector: boolean add(java.lang.Object)>($r5);

        return;
    }

    public void addParameter(org.apache.commons.httpclient.NameValuePair) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.httpclient.NameValuePair r1;
        org.apache.commons.logging.Log $r0;
        org.apache.commons.httpclient.methods.PostMethod r2;
        java.lang.String $r3, $r4;
        java.lang.IllegalArgumentException $r5;

        r2 := @this: org.apache.commons.httpclient.methods.PostMethod;

        r1 := @parameter0: org.apache.commons.httpclient.NameValuePair;

        $r0 = <org.apache.commons.httpclient.methods.PostMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter PostMethod.addParameter(NameValuePair)");

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("NameValuePair may not be null");

        throw $r5;

     label1:
        $r3 = virtualinvoke r1.<org.apache.commons.httpclient.NameValuePair: java.lang.String getName()>();

        $r4 = virtualinvoke r1.<org.apache.commons.httpclient.NameValuePair: java.lang.String getValue()>();

        virtualinvoke r2.<org.apache.commons.httpclient.methods.PostMethod: void addParameter(java.lang.String,java.lang.String)>($r3, $r4);

        return;
    }

    public void addParameters(org.apache.commons.httpclient.NameValuePair[])
    {
        org.apache.commons.httpclient.NameValuePair[] r1;
        org.apache.commons.httpclient.methods.PostMethod r2;
        java.util.Vector $r4;
        org.apache.commons.httpclient.NameValuePair $r3;
        int $i0, i1;
        org.apache.commons.logging.Log $r0, $r5;

        r2 := @this: org.apache.commons.httpclient.methods.PostMethod;

        r1 := @parameter0: org.apache.commons.httpclient.NameValuePair[];

        $r0 = <org.apache.commons.httpclient.methods.PostMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter PostMethod.addParameters(NameValuePair[])");

        if r1 != null goto label1;

        $r5 = <org.apache.commons.httpclient.methods.PostMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("Attempt to addParameters(null) ignored");

        goto label3;

     label1:
        specialinvoke r2.<org.apache.commons.httpclient.methods.EntityEnclosingMethod: void clearRequestBody()>();

        i1 = 0;

     label2:
        $i0 = lengthof r1;

        if i1 >= $i0 goto label3;

        $r4 = r2.<org.apache.commons.httpclient.methods.PostMethod: java.util.Vector params>;

        $r3 = r1[i1];

        virtualinvoke $r4.<java.util.Vector: boolean add(java.lang.Object)>($r3);

        i1 = i1 + 1;

        goto label2;

     label3:
        return;
    }

    public boolean removeParameter(java.lang.String) throws java.lang.IllegalArgumentException
    {
        java.util.Iterator $r4;
        org.apache.commons.httpclient.methods.PostMethod r2;
        java.lang.IllegalArgumentException $r8;
        java.util.Vector $r3;
        org.apache.commons.httpclient.NameValuePair r6;
        org.apache.commons.logging.Log $r0;
        java.lang.Object $r5;
        java.lang.String r1, $r7;
        boolean $z0, $z1, z2;

        r2 := @this: org.apache.commons.httpclient.methods.PostMethod;

        r1 := @parameter0: java.lang.String;

        $r0 = <org.apache.commons.httpclient.methods.PostMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter PostMethod.removeParameter(String)");

        if r1 != null goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Argument passed to removeParameter(String) cannot be null");

        throw $r8;

     label1:
        z2 = 0;

        $r3 = r2.<org.apache.commons.httpclient.methods.PostMethod: java.util.Vector params>;

        $r4 = virtualinvoke $r3.<java.util.Vector: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.commons.httpclient.NameValuePair) $r5;

        $r7 = virtualinvoke r6.<org.apache.commons.httpclient.NameValuePair: java.lang.String getName()>();

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z1 == 0 goto label3;

        interfaceinvoke $r4.<java.util.Iterator: void remove()>();

        z2 = 1;

     label3:
        goto label2;

     label4:
        return z2;
    }

    public boolean removeParameter(java.lang.String, java.lang.String) throws java.lang.IllegalArgumentException
    {
        java.util.Iterator $r5;
        org.apache.commons.httpclient.methods.PostMethod r3;
        java.lang.IllegalArgumentException $r10, $r11;
        java.util.Vector $r4;
        org.apache.commons.httpclient.NameValuePair r7;
        org.apache.commons.logging.Log $r0;
        java.lang.Object $r6;
        java.lang.String r1, r2, $r8, $r9;
        boolean $z0, $z1, $z2;

        r3 := @this: org.apache.commons.httpclient.methods.PostMethod;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r0 = <org.apache.commons.httpclient.methods.PostMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter PostMethod.removeParameter(String, String)");

        if r1 != null goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter name may not be null");

        throw $r11;

     label1:
        if r2 != null goto label2;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter value may not be null");

        throw $r10;

     label2:
        $r4 = r3.<org.apache.commons.httpclient.methods.PostMethod: java.util.Vector params>;

        $r5 = virtualinvoke $r4.<java.util.Vector: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.commons.httpclient.NameValuePair) $r6;

        $r8 = virtualinvoke r7.<org.apache.commons.httpclient.NameValuePair: java.lang.String getName()>();

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label4;

        $r9 = virtualinvoke r7.<org.apache.commons.httpclient.NameValuePair: java.lang.String getValue()>();

        $z2 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z2 == 0 goto label4;

        interfaceinvoke $r5.<java.util.Iterator: void remove()>();

        return 1;

     label4:
        goto label3;

     label5:
        return 0;
    }

    public void setRequestBody(org.apache.commons.httpclient.NameValuePair[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.httpclient.NameValuePair[] r1;
        org.apache.commons.logging.Log $r0;
        org.apache.commons.httpclient.methods.PostMethod r2;
        java.lang.IllegalArgumentException $r3;

        r2 := @this: org.apache.commons.httpclient.methods.PostMethod;

        r1 := @parameter0: org.apache.commons.httpclient.NameValuePair[];

        $r0 = <org.apache.commons.httpclient.methods.PostMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter PostMethod.setRequestBody(NameValuePair[])");

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Array of parameters may not be null");

        throw $r3;

     label1:
        virtualinvoke r2.<org.apache.commons.httpclient.methods.PostMethod: void clearRequestBody()>();

        virtualinvoke r2.<org.apache.commons.httpclient.methods.PostMethod: void addParameters(org.apache.commons.httpclient.NameValuePair[])>(r1);

        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r2;
        org.apache.commons.logging.Log $r1;

        <org.apache.commons.httpclient.methods.PostMethod: java.lang.String FORM_URL_ENCODED_CONTENT_TYPE> = "application/x-www-form-urlencoded";

        $r0 = <org.apache.commons.httpclient.methods.PostMethod: java.lang.Class class$org$apache$commons$httpclient$methods$PostMethod>;

        if $r0 != null goto label1;

        $r2 = staticinvoke <org.apache.commons.httpclient.methods.PostMethod: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.methods.PostMethod");

        <org.apache.commons.httpclient.methods.PostMethod: java.lang.Class class$org$apache$commons$httpclient$methods$PostMethod> = $r2;

        goto label2;

     label1:
        $r2 = <org.apache.commons.httpclient.methods.PostMethod: java.lang.Class class$org$apache$commons$httpclient$methods$PostMethod>;

     label2:
        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r2);

        <org.apache.commons.httpclient.methods.PostMethod: org.apache.commons.logging.Log LOG> = $r1;

        return;
    }
}
