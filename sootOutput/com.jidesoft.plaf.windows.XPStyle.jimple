public class com.jidesoft.plaf.windows.XPStyle extends java.lang.Object
{
    private static com.jidesoft.plaf.windows.XPStyle xp;
    private static com.jidesoft.plaf.windows.XPStyle$SkinPainter skinPainter;
    private static java.lang.Boolean themeActive;
    private java.util.HashMap borderMap;
    private java.util.HashMap colorMap;
    private boolean flatMenus;
    static final boolean $assertionsDisabled;

    public static synchronized void invalidateStyle()
    {
        com.jidesoft.plaf.windows.XPStyle$SkinPainter $r0;

        <com.jidesoft.plaf.windows.XPStyle: com.jidesoft.plaf.windows.XPStyle xp> = null;

        <com.jidesoft.plaf.windows.XPStyle: java.lang.Boolean themeActive> = null;

        $r0 = <com.jidesoft.plaf.windows.XPStyle: com.jidesoft.plaf.windows.XPStyle$SkinPainter skinPainter>;

        virtualinvoke $r0.<com.jidesoft.plaf.windows.XPStyle$SkinPainter: void flush()>();

        return;
    }

    public static synchronized com.jidesoft.plaf.windows.XPStyle getXP()
    {
        javax.swing.LookAndFeel $r8;
        sun.security.action.GetPropertyAction $r6;
        com.jidesoft.plaf.windows.XPStyle $r9, $r11;
        java.lang.Boolean $r0, $r3, $r4, $r5, $r10;
        java.lang.Object $r2, $r7;
        java.awt.Toolkit $r1;
        boolean $z0, $z1, $z2;

        $r0 = <com.jidesoft.plaf.windows.XPStyle: java.lang.Boolean themeActive>;

        if $r0 != null goto label2;

        $r1 = staticinvoke <java.awt.Toolkit: java.awt.Toolkit getDefaultToolkit()>();

        $r2 = virtualinvoke $r1.<java.awt.Toolkit: java.lang.Object getDesktopProperty(java.lang.String)>("win.xpstyle.themeActive");

        $r3 = (java.lang.Boolean) $r2;

        <com.jidesoft.plaf.windows.XPStyle: java.lang.Boolean themeActive> = $r3;

        $r4 = <com.jidesoft.plaf.windows.XPStyle: java.lang.Boolean themeActive>;

        if $r4 != null goto label1;

        $r10 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        <com.jidesoft.plaf.windows.XPStyle: java.lang.Boolean themeActive> = $r10;

     label1:
        $r5 = <com.jidesoft.plaf.windows.XPStyle: java.lang.Boolean themeActive>;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        $r6 = new sun.security.action.GetPropertyAction;

        specialinvoke $r6.<sun.security.action.GetPropertyAction: void <init>(java.lang.String)>("swing.noxp");

        $r7 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r6);

        if $r7 != null goto label2;

        $z1 = staticinvoke <sun.awt.windows.ThemeReader: boolean isThemed()>();

        if $z1 == 0 goto label2;

        $r8 = staticinvoke <javax.swing.UIManager: javax.swing.LookAndFeel getLookAndFeel()>();

        $z2 = $r8 instanceof com.sun.java.swing.plaf.windows.WindowsClassicLookAndFeel;

        if $z2 != 0 goto label2;

        $r9 = new com.jidesoft.plaf.windows.XPStyle;

        specialinvoke $r9.<com.jidesoft.plaf.windows.XPStyle: void <init>()>();

        <com.jidesoft.plaf.windows.XPStyle: com.jidesoft.plaf.windows.XPStyle xp> = $r9;

     label2:
        $r11 = <com.jidesoft.plaf.windows.XPStyle: com.jidesoft.plaf.windows.XPStyle xp>;

        return $r11;
    }

    public static boolean isVista()
    {
        com.jidesoft.plaf.windows.XPStyle $r0;
        com.jidesoft.plaf.windows.TMSchema$Part $r1;
        boolean $z0, $z1;

        $r0 = staticinvoke <com.jidesoft.plaf.windows.XPStyle: com.jidesoft.plaf.windows.XPStyle getXP()>();

        if $r0 == null goto label1;

        $r1 = <com.jidesoft.plaf.windows.TMSchema$Part: com.jidesoft.plaf.windows.TMSchema$Part CP_DROPDOWNBUTTONRIGHT>;

        $z0 = virtualinvoke $r0.<com.jidesoft.plaf.windows.XPStyle: boolean isSkinDefined(java.awt.Component,com.jidesoft.plaf.windows.TMSchema$Part)>(null, $r1);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public java.lang.String getString(java.awt.Component, com.jidesoft.plaf.windows.TMSchema$Part, com.jidesoft.plaf.windows.TMSchema$State, com.jidesoft.plaf.windows.TMSchema$Prop)
    {
        com.jidesoft.plaf.windows.TMSchema$State r2;
        com.jidesoft.plaf.windows.XPStyle r5;
        com.jidesoft.plaf.windows.TMSchema$Part r1;
        com.jidesoft.plaf.windows.TMSchema$Prop r3;
        java.lang.String $r4;
        java.awt.Component r0;

        r5 := @this: com.jidesoft.plaf.windows.XPStyle;

        r0 := @parameter0: java.awt.Component;

        r1 := @parameter1: com.jidesoft.plaf.windows.TMSchema$Part;

        r2 := @parameter2: com.jidesoft.plaf.windows.TMSchema$State;

        r3 := @parameter3: com.jidesoft.plaf.windows.TMSchema$Prop;

        $r4 = staticinvoke <com.jidesoft.plaf.windows.XPStyle: java.lang.String getTypeEnumName(java.awt.Component,com.jidesoft.plaf.windows.TMSchema$Part,com.jidesoft.plaf.windows.TMSchema$State,com.jidesoft.plaf.windows.TMSchema$Prop)>(r0, r1, r2, r3);

        return $r4;
    }

    public com.jidesoft.plaf.windows.TMSchema$TypeEnum getTypeEnum(java.awt.Component, com.jidesoft.plaf.windows.TMSchema$Part, com.jidesoft.plaf.windows.TMSchema$State, com.jidesoft.plaf.windows.TMSchema$Prop)
    {
        com.jidesoft.plaf.windows.TMSchema$TypeEnum $r5;
        com.jidesoft.plaf.windows.TMSchema$Part r0;
        java.awt.Component r1;
        com.jidesoft.plaf.windows.TMSchema$State r3;
        int $i0, $i1, $i2, $i3;
        com.jidesoft.plaf.windows.XPStyle r6;
        com.jidesoft.plaf.windows.TMSchema$Prop r4;
        java.lang.String $r2;

        r6 := @this: com.jidesoft.plaf.windows.XPStyle;

        r1 := @parameter0: java.awt.Component;

        r0 := @parameter1: com.jidesoft.plaf.windows.TMSchema$Part;

        r3 := @parameter2: com.jidesoft.plaf.windows.TMSchema$State;

        r4 := @parameter3: com.jidesoft.plaf.windows.TMSchema$Prop;

        $r2 = virtualinvoke r0.<com.jidesoft.plaf.windows.TMSchema$Part: java.lang.String getControlName(java.awt.Component)>(r1);

        $i0 = virtualinvoke r0.<com.jidesoft.plaf.windows.TMSchema$Part: int getValue()>();

        $i1 = staticinvoke <com.jidesoft.plaf.windows.TMSchema$State: int getValue(com.jidesoft.plaf.windows.TMSchema$Part,com.jidesoft.plaf.windows.TMSchema$State)>(r0, r3);

        $i2 = virtualinvoke r4.<com.jidesoft.plaf.windows.TMSchema$Prop: int getValue()>();

        $i3 = staticinvoke <sun.awt.windows.ThemeReader: int getEnum(java.lang.String,int,int,int)>($r2, $i0, $i1, $i2);

        $r5 = staticinvoke <com.jidesoft.plaf.windows.TMSchema$TypeEnum: com.jidesoft.plaf.windows.TMSchema$TypeEnum getTypeEnum(com.jidesoft.plaf.windows.TMSchema$Prop,int)>(r4, $i3);

        return $r5;
    }

    private static java.lang.String getTypeEnumName(java.awt.Component, com.jidesoft.plaf.windows.TMSchema$Part, com.jidesoft.plaf.windows.TMSchema$State, com.jidesoft.plaf.windows.TMSchema$Prop)
    {
        com.jidesoft.plaf.windows.TMSchema$TypeEnum $r5;
        com.jidesoft.plaf.windows.TMSchema$Part r0;
        java.awt.Component r1;
        com.jidesoft.plaf.windows.TMSchema$State r3;
        int $i0, $i1, $i2, $i3, $i5;
        com.jidesoft.plaf.windows.TMSchema$Prop r4;
        java.lang.String $r2, $r6;

        r1 := @parameter0: java.awt.Component;

        r0 := @parameter1: com.jidesoft.plaf.windows.TMSchema$Part;

        r3 := @parameter2: com.jidesoft.plaf.windows.TMSchema$State;

        r4 := @parameter3: com.jidesoft.plaf.windows.TMSchema$Prop;

        $r2 = virtualinvoke r0.<com.jidesoft.plaf.windows.TMSchema$Part: java.lang.String getControlName(java.awt.Component)>(r1);

        $i0 = virtualinvoke r0.<com.jidesoft.plaf.windows.TMSchema$Part: int getValue()>();

        $i1 = staticinvoke <com.jidesoft.plaf.windows.TMSchema$State: int getValue(com.jidesoft.plaf.windows.TMSchema$Part,com.jidesoft.plaf.windows.TMSchema$State)>(r0, r3);

        $i2 = virtualinvoke r4.<com.jidesoft.plaf.windows.TMSchema$Prop: int getValue()>();

        $i3 = staticinvoke <sun.awt.windows.ThemeReader: int getEnum(java.lang.String,int,int,int)>($r2, $i0, $i1, $i2);

        $i5 = (int) -1;

        if $i3 != $i5 goto label1;

        return null;

     label1:
        $r5 = staticinvoke <com.jidesoft.plaf.windows.TMSchema$TypeEnum: com.jidesoft.plaf.windows.TMSchema$TypeEnum getTypeEnum(com.jidesoft.plaf.windows.TMSchema$Prop,int)>(r4, $i3);

        $r6 = virtualinvoke $r5.<com.jidesoft.plaf.windows.TMSchema$TypeEnum: java.lang.String getName()>();

        return $r6;
    }

    public int getInt(java.awt.Component, com.jidesoft.plaf.windows.TMSchema$Part, com.jidesoft.plaf.windows.TMSchema$State, com.jidesoft.plaf.windows.TMSchema$Prop, int)
    {
        com.jidesoft.plaf.windows.TMSchema$Part r0;
        java.awt.Component r1;
        com.jidesoft.plaf.windows.TMSchema$State r3;
        int $i0, $i1, $i2, $i3, i4;
        com.jidesoft.plaf.windows.XPStyle r5;
        com.jidesoft.plaf.windows.TMSchema$Prop r4;
        java.lang.String $r2;

        r5 := @this: com.jidesoft.plaf.windows.XPStyle;

        r1 := @parameter0: java.awt.Component;

        r0 := @parameter1: com.jidesoft.plaf.windows.TMSchema$Part;

        r3 := @parameter2: com.jidesoft.plaf.windows.TMSchema$State;

        r4 := @parameter3: com.jidesoft.plaf.windows.TMSchema$Prop;

        i4 := @parameter4: int;

        $r2 = virtualinvoke r0.<com.jidesoft.plaf.windows.TMSchema$Part: java.lang.String getControlName(java.awt.Component)>(r1);

        $i0 = virtualinvoke r0.<com.jidesoft.plaf.windows.TMSchema$Part: int getValue()>();

        $i1 = staticinvoke <com.jidesoft.plaf.windows.TMSchema$State: int getValue(com.jidesoft.plaf.windows.TMSchema$Part,com.jidesoft.plaf.windows.TMSchema$State)>(r0, r3);

        $i2 = virtualinvoke r4.<com.jidesoft.plaf.windows.TMSchema$Prop: int getValue()>();

        $i3 = staticinvoke <sun.awt.windows.ThemeReader: int getInt(java.lang.String,int,int,int)>($r2, $i0, $i1, $i2);

        return $i3;
    }

    public java.awt.Dimension getDimension(java.awt.Component, com.jidesoft.plaf.windows.TMSchema$Part, com.jidesoft.plaf.windows.TMSchema$State, com.jidesoft.plaf.windows.TMSchema$Prop)
    {
        com.jidesoft.plaf.windows.TMSchema$Part r0;
        java.awt.Component r1;
        java.awt.Dimension $r5;
        com.jidesoft.plaf.windows.TMSchema$State r3;
        int $i0, $i1, $i2;
        com.jidesoft.plaf.windows.XPStyle r6;
        com.jidesoft.plaf.windows.TMSchema$Prop r4;
        java.lang.String $r2;

        r6 := @this: com.jidesoft.plaf.windows.XPStyle;

        r1 := @parameter0: java.awt.Component;

        r0 := @parameter1: com.jidesoft.plaf.windows.TMSchema$Part;

        r3 := @parameter2: com.jidesoft.plaf.windows.TMSchema$State;

        r4 := @parameter3: com.jidesoft.plaf.windows.TMSchema$Prop;

        $r2 = virtualinvoke r0.<com.jidesoft.plaf.windows.TMSchema$Part: java.lang.String getControlName(java.awt.Component)>(r1);

        $i0 = virtualinvoke r0.<com.jidesoft.plaf.windows.TMSchema$Part: int getValue()>();

        $i1 = staticinvoke <com.jidesoft.plaf.windows.TMSchema$State: int getValue(com.jidesoft.plaf.windows.TMSchema$Part,com.jidesoft.plaf.windows.TMSchema$State)>(r0, r3);

        $i2 = virtualinvoke r4.<com.jidesoft.plaf.windows.TMSchema$Prop: int getValue()>();

        $r5 = staticinvoke <sun.awt.windows.ThemeReader: java.awt.Dimension getPosition(java.lang.String,int,int,int)>($r2, $i0, $i1, $i2);

        return $r5;
    }

    public java.awt.Point getPoint(java.awt.Component, com.jidesoft.plaf.windows.TMSchema$Part, com.jidesoft.plaf.windows.TMSchema$State, com.jidesoft.plaf.windows.TMSchema$Prop)
    {
        com.jidesoft.plaf.windows.TMSchema$Part r0;
        java.awt.Point $r6;
        java.awt.Component r1;
        java.awt.Dimension $r5;
        com.jidesoft.plaf.windows.TMSchema$State r3;
        int $i0, $i1, $i2, $i3, $i4;
        com.jidesoft.plaf.windows.XPStyle r7;
        com.jidesoft.plaf.windows.TMSchema$Prop r4;
        java.lang.String $r2;

        r7 := @this: com.jidesoft.plaf.windows.XPStyle;

        r1 := @parameter0: java.awt.Component;

        r0 := @parameter1: com.jidesoft.plaf.windows.TMSchema$Part;

        r3 := @parameter2: com.jidesoft.plaf.windows.TMSchema$State;

        r4 := @parameter3: com.jidesoft.plaf.windows.TMSchema$Prop;

        $r2 = virtualinvoke r0.<com.jidesoft.plaf.windows.TMSchema$Part: java.lang.String getControlName(java.awt.Component)>(r1);

        $i0 = virtualinvoke r0.<com.jidesoft.plaf.windows.TMSchema$Part: int getValue()>();

        $i1 = staticinvoke <com.jidesoft.plaf.windows.TMSchema$State: int getValue(com.jidesoft.plaf.windows.TMSchema$Part,com.jidesoft.plaf.windows.TMSchema$State)>(r0, r3);

        $i2 = virtualinvoke r4.<com.jidesoft.plaf.windows.TMSchema$Prop: int getValue()>();

        $r5 = staticinvoke <sun.awt.windows.ThemeReader: java.awt.Dimension getPosition(java.lang.String,int,int,int)>($r2, $i0, $i1, $i2);

        if $r5 == null goto label1;

        $r6 = new java.awt.Point;

        $i4 = $r5.<java.awt.Dimension: int width>;

        $i3 = $r5.<java.awt.Dimension: int height>;

        specialinvoke $r6.<java.awt.Point: void <init>(int,int)>($i4, $i3);

        return $r6;

     label1:
        return null;
    }

    public java.awt.Insets getMargin(java.awt.Component, com.jidesoft.plaf.windows.TMSchema$Part, com.jidesoft.plaf.windows.TMSchema$State, com.jidesoft.plaf.windows.TMSchema$Prop)
    {
        java.awt.Insets $r5;
        com.jidesoft.plaf.windows.TMSchema$Part r0;
        java.awt.Component r1;
        com.jidesoft.plaf.windows.TMSchema$State r3;
        int $i0, $i1, $i2;
        com.jidesoft.plaf.windows.XPStyle r6;
        com.jidesoft.plaf.windows.TMSchema$Prop r4;
        java.lang.String $r2;

        r6 := @this: com.jidesoft.plaf.windows.XPStyle;

        r1 := @parameter0: java.awt.Component;

        r0 := @parameter1: com.jidesoft.plaf.windows.TMSchema$Part;

        r3 := @parameter2: com.jidesoft.plaf.windows.TMSchema$State;

        r4 := @parameter3: com.jidesoft.plaf.windows.TMSchema$Prop;

        $r2 = virtualinvoke r0.<com.jidesoft.plaf.windows.TMSchema$Part: java.lang.String getControlName(java.awt.Component)>(r1);

        $i0 = virtualinvoke r0.<com.jidesoft.plaf.windows.TMSchema$Part: int getValue()>();

        $i1 = staticinvoke <com.jidesoft.plaf.windows.TMSchema$State: int getValue(com.jidesoft.plaf.windows.TMSchema$Part,com.jidesoft.plaf.windows.TMSchema$State)>(r0, r3);

        $i2 = virtualinvoke r4.<com.jidesoft.plaf.windows.TMSchema$Prop: int getValue()>();

        $r5 = staticinvoke <sun.awt.windows.ThemeReader: java.awt.Insets getThemeMargins(java.lang.String,int,int,int)>($r2, $i0, $i1, $i2);

        return $r5;
    }

    public synchronized java.awt.Color getColor(com.jidesoft.plaf.windows.XPStyle$Skin, com.jidesoft.plaf.windows.TMSchema$Prop, java.awt.Color)
    {
        java.awt.Color r13, $r16, r19, $r20;
        com.jidesoft.plaf.windows.TMSchema$Part r9;
        java.util.HashMap $r11, $r18;
        com.jidesoft.plaf.windows.TMSchema$State $r15;
        com.jidesoft.plaf.windows.XPStyle r10;
        int $i0, $i1, $i2;
        com.jidesoft.plaf.windows.TMSchema$Prop r5;
        java.lang.String $r2, $r6, $r8, $r14;
        javax.swing.plaf.ColorUIResource $r17;
        com.jidesoft.plaf.windows.XPStyle$Skin r1;
        java.lang.StringBuilder $r0, $r3, $r4, $r7;
        java.lang.Object $r12;

        r10 := @this: com.jidesoft.plaf.windows.XPStyle;

        r1 := @parameter0: com.jidesoft.plaf.windows.XPStyle$Skin;

        r5 := @parameter1: com.jidesoft.plaf.windows.TMSchema$Prop;

        r13 := @parameter2: java.awt.Color;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<com.jidesoft.plaf.windows.XPStyle$Skin: java.lang.String toString()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r6 = virtualinvoke r5.<com.jidesoft.plaf.windows.TMSchema$Prop: java.lang.String name()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        r9 = r1.<com.jidesoft.plaf.windows.XPStyle$Skin: com.jidesoft.plaf.windows.TMSchema$Part part>;

        $r11 = r10.<com.jidesoft.plaf.windows.XPStyle: java.util.HashMap colorMap>;

        $r12 = virtualinvoke $r11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r8);

        r19 = (java.awt.Color) $r12;

        if r19 != null goto label1;

        $r14 = virtualinvoke r9.<com.jidesoft.plaf.windows.TMSchema$Part: java.lang.String getControlName(java.awt.Component)>(null);

        $i0 = virtualinvoke r9.<com.jidesoft.plaf.windows.TMSchema$Part: int getValue()>();

        $r15 = r1.<com.jidesoft.plaf.windows.XPStyle$Skin: com.jidesoft.plaf.windows.TMSchema$State state>;

        $i1 = staticinvoke <com.jidesoft.plaf.windows.TMSchema$State: int getValue(com.jidesoft.plaf.windows.TMSchema$Part,com.jidesoft.plaf.windows.TMSchema$State)>(r9, $r15);

        $i2 = virtualinvoke r5.<com.jidesoft.plaf.windows.TMSchema$Prop: int getValue()>();

        $r16 = staticinvoke <sun.awt.windows.ThemeReader: java.awt.Color getColor(java.lang.String,int,int,int)>($r14, $i0, $i1, $i2);

        r19 = $r16;

        if $r16 == null goto label1;

        $r17 = new javax.swing.plaf.ColorUIResource;

        specialinvoke $r17.<javax.swing.plaf.ColorUIResource: void <init>(java.awt.Color)>($r16);

        r19 = $r17;

        $r18 = r10.<com.jidesoft.plaf.windows.XPStyle: java.util.HashMap colorMap>;

        virtualinvoke $r18.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r17);

     label1:
        if r19 == null goto label2;

        $r20 = r19;

        goto label3;

     label2:
        $r20 = r13;

     label3:
        return $r20;
    }

    java.awt.Color getColor(java.awt.Component, com.jidesoft.plaf.windows.TMSchema$Part, com.jidesoft.plaf.windows.TMSchema$State, com.jidesoft.plaf.windows.TMSchema$Prop, java.awt.Color)
    {
        java.awt.Color r6, $r7;
        com.jidesoft.plaf.windows.TMSchema$Part r3;
        java.awt.Component r2;
        com.jidesoft.plaf.windows.XPStyle$Skin $r1;
        com.jidesoft.plaf.windows.TMSchema$State r4;
        com.jidesoft.plaf.windows.XPStyle r0;
        com.jidesoft.plaf.windows.TMSchema$Prop r5;

        r0 := @this: com.jidesoft.plaf.windows.XPStyle;

        r2 := @parameter0: java.awt.Component;

        r3 := @parameter1: com.jidesoft.plaf.windows.TMSchema$Part;

        r4 := @parameter2: com.jidesoft.plaf.windows.TMSchema$State;

        r5 := @parameter3: com.jidesoft.plaf.windows.TMSchema$Prop;

        r6 := @parameter4: java.awt.Color;

        $r1 = new com.jidesoft.plaf.windows.XPStyle$Skin;

        specialinvoke $r1.<com.jidesoft.plaf.windows.XPStyle$Skin: void <init>(java.awt.Component,com.jidesoft.plaf.windows.TMSchema$Part,com.jidesoft.plaf.windows.TMSchema$State)>(r2, r3, r4);

        $r7 = virtualinvoke r0.<com.jidesoft.plaf.windows.XPStyle: java.awt.Color getColor(com.jidesoft.plaf.windows.XPStyle$Skin,com.jidesoft.plaf.windows.TMSchema$Prop,java.awt.Color)>($r1, r5, r6);

        return $r7;
    }

    public synchronized javax.swing.border.Border getBorder(java.awt.Component, com.jidesoft.plaf.windows.TMSchema$Part)
    {
        java.awt.Color $r25, $r27, $r33;
        com.jidesoft.plaf.windows.XPStyle$XPImageBorder $r23;
        javax.swing.border.Border r34;
        com.jidesoft.plaf.windows.XPStyle$XPEmptyBorder $r19, $r20;
        com.jidesoft.plaf.windows.XPStyle r4;
        boolean $z0, $z1, $z2, $z3;
        com.jidesoft.plaf.windows.XPStyle$XPStatefulFillBorder $r30;
        java.awt.Component r3;
        com.jidesoft.plaf.windows.XPStyle$Skin $r2;
        javax.swing.border.EmptyBorder $r22;
        com.jidesoft.plaf.windows.XPStyle$XPFillBorder $r28, $r32;
        java.awt.Insets $r15, $r21;
        com.jidesoft.plaf.windows.TMSchema$Part r0, $r1, $r17, $r18, $r29;
        java.util.HashMap $r5, $r12;
        int $i0;
        com.jidesoft.plaf.windows.TMSchema$Prop $r8, $r14, $r16, $r24, $r26, $r31;
        java.lang.String $r6, $r9, $r10, $r11, $r13;
        java.lang.Object $r7;

        r4 := @this: com.jidesoft.plaf.windows.XPStyle;

        r3 := @parameter0: java.awt.Component;

        r0 := @parameter1: com.jidesoft.plaf.windows.TMSchema$Part;

        $r1 = <com.jidesoft.plaf.windows.TMSchema$Part: com.jidesoft.plaf.windows.TMSchema$Part MENU>;

        if r0 != $r1 goto label2;

        $z3 = r4.<com.jidesoft.plaf.windows.XPStyle: boolean flatMenus>;

        if $z3 == 0 goto label1;

        $r32 = new com.jidesoft.plaf.windows.XPStyle$XPFillBorder;

        $r33 = staticinvoke <javax.swing.UIManager: java.awt.Color getColor(java.lang.Object)>("InternalFrame.borderShadow");

        specialinvoke $r32.<com.jidesoft.plaf.windows.XPStyle$XPFillBorder: void <init>(com.jidesoft.plaf.windows.XPStyle,java.awt.Color,int)>(r4, $r33, 1);

        return $r32;

     label1:
        return null;

     label2:
        $r2 = new com.jidesoft.plaf.windows.XPStyle$Skin;

        specialinvoke $r2.<com.jidesoft.plaf.windows.XPStyle$Skin: void <init>(java.awt.Component,com.jidesoft.plaf.windows.TMSchema$Part,com.jidesoft.plaf.windows.TMSchema$State)>(r3, r0, null);

        $r5 = r4.<com.jidesoft.plaf.windows.XPStyle: java.util.HashMap borderMap>;

        $r6 = staticinvoke <com.jidesoft.plaf.windows.XPStyle$Skin: java.lang.String access$000(com.jidesoft.plaf.windows.XPStyle$Skin)>($r2);

        $r7 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r6);

        r34 = (javax.swing.border.Border) $r7;

        if r34 != null goto label9;

        $r8 = <com.jidesoft.plaf.windows.TMSchema$Prop: com.jidesoft.plaf.windows.TMSchema$Prop BGTYPE>;

        $r9 = staticinvoke <com.jidesoft.plaf.windows.XPStyle: java.lang.String getTypeEnumName(java.awt.Component,com.jidesoft.plaf.windows.TMSchema$Part,com.jidesoft.plaf.windows.TMSchema$State,com.jidesoft.plaf.windows.TMSchema$Prop)>(r3, r0, null, $r8);

        $r10 = "borderfill";

        $z0 = virtualinvoke $r10.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r9);

        if $z0 == 0 goto label4;

        $r24 = <com.jidesoft.plaf.windows.TMSchema$Prop: com.jidesoft.plaf.windows.TMSchema$Prop BORDERSIZE>;

        $i0 = virtualinvoke r4.<com.jidesoft.plaf.windows.XPStyle: int getInt(java.awt.Component,com.jidesoft.plaf.windows.TMSchema$Part,com.jidesoft.plaf.windows.TMSchema$State,com.jidesoft.plaf.windows.TMSchema$Prop,int)>(r3, r0, null, $r24, 1);

        $r26 = <com.jidesoft.plaf.windows.TMSchema$Prop: com.jidesoft.plaf.windows.TMSchema$Prop BORDERCOLOR>;

        $r25 = <java.awt.Color: java.awt.Color black>;

        $r27 = virtualinvoke r4.<com.jidesoft.plaf.windows.XPStyle: java.awt.Color getColor(com.jidesoft.plaf.windows.XPStyle$Skin,com.jidesoft.plaf.windows.TMSchema$Prop,java.awt.Color)>($r2, $r26, $r25);

        $r28 = new com.jidesoft.plaf.windows.XPStyle$XPFillBorder;

        specialinvoke $r28.<com.jidesoft.plaf.windows.XPStyle$XPFillBorder: void <init>(com.jidesoft.plaf.windows.XPStyle,java.awt.Color,int)>(r4, $r27, $i0);

        r34 = $r28;

        $r29 = <com.jidesoft.plaf.windows.TMSchema$Part: com.jidesoft.plaf.windows.TMSchema$Part CP_COMBOBOX>;

        if r0 != $r29 goto label3;

        $r30 = new com.jidesoft.plaf.windows.XPStyle$XPStatefulFillBorder;

        $r31 = <com.jidesoft.plaf.windows.TMSchema$Prop: com.jidesoft.plaf.windows.TMSchema$Prop BORDERCOLOR>;

        specialinvoke $r30.<com.jidesoft.plaf.windows.XPStyle$XPStatefulFillBorder: void <init>(com.jidesoft.plaf.windows.XPStyle,java.awt.Color,int,com.jidesoft.plaf.windows.TMSchema$Part,com.jidesoft.plaf.windows.TMSchema$Prop)>(r4, $r27, $i0, r0, $r31);

        r34 = $r30;

     label3:
        goto label8;

     label4:
        $r11 = "imagefile";

        $z1 = virtualinvoke $r11.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r9);

        if $z1 == 0 goto label8;

        $r14 = <com.jidesoft.plaf.windows.TMSchema$Prop: com.jidesoft.plaf.windows.TMSchema$Prop SIZINGMARGINS>;

        $r15 = virtualinvoke r4.<com.jidesoft.plaf.windows.XPStyle: java.awt.Insets getMargin(java.awt.Component,com.jidesoft.plaf.windows.TMSchema$Part,com.jidesoft.plaf.windows.TMSchema$State,com.jidesoft.plaf.windows.TMSchema$Prop)>(r3, r0, null, $r14);

        if $r15 == null goto label8;

        $r16 = <com.jidesoft.plaf.windows.TMSchema$Prop: com.jidesoft.plaf.windows.TMSchema$Prop BORDERONLY>;

        $z2 = specialinvoke r4.<com.jidesoft.plaf.windows.XPStyle: boolean getBoolean(java.awt.Component,com.jidesoft.plaf.windows.TMSchema$Part,com.jidesoft.plaf.windows.TMSchema$State,com.jidesoft.plaf.windows.TMSchema$Prop)>(r3, r0, null, $r16);

        if $z2 == 0 goto label5;

        $r23 = new com.jidesoft.plaf.windows.XPStyle$XPImageBorder;

        specialinvoke $r23.<com.jidesoft.plaf.windows.XPStyle$XPImageBorder: void <init>(com.jidesoft.plaf.windows.XPStyle,java.awt.Component,com.jidesoft.plaf.windows.TMSchema$Part)>(r4, r3, r0);

        r34 = $r23;

        goto label8;

     label5:
        $r17 = <com.jidesoft.plaf.windows.TMSchema$Part: com.jidesoft.plaf.windows.TMSchema$Part CP_COMBOBOX>;

        if r0 != $r17 goto label6;

        $r22 = new javax.swing.border.EmptyBorder;

        specialinvoke $r22.<javax.swing.border.EmptyBorder: void <init>(int,int,int,int)>(1, 1, 1, 1);

        r34 = $r22;

        goto label8;

     label6:
        $r18 = <com.jidesoft.plaf.windows.TMSchema$Part: com.jidesoft.plaf.windows.TMSchema$Part TP_BUTTON>;

        if r0 != $r18 goto label7;

        $r20 = new com.jidesoft.plaf.windows.XPStyle$XPEmptyBorder;

        $r21 = new java.awt.Insets;

        specialinvoke $r21.<java.awt.Insets: void <init>(int,int,int,int)>(3, 3, 3, 3);

        specialinvoke $r20.<com.jidesoft.plaf.windows.XPStyle$XPEmptyBorder: void <init>(com.jidesoft.plaf.windows.XPStyle,java.awt.Insets)>(r4, $r21);

        r34 = $r20;

        goto label8;

     label7:
        $r19 = new com.jidesoft.plaf.windows.XPStyle$XPEmptyBorder;

        specialinvoke $r19.<com.jidesoft.plaf.windows.XPStyle$XPEmptyBorder: void <init>(com.jidesoft.plaf.windows.XPStyle,java.awt.Insets)>(r4, $r15);

        r34 = $r19;

     label8:
        if r34 == null goto label9;

        $r12 = r4.<com.jidesoft.plaf.windows.XPStyle: java.util.HashMap borderMap>;

        $r13 = staticinvoke <com.jidesoft.plaf.windows.XPStyle$Skin: java.lang.String access$000(com.jidesoft.plaf.windows.XPStyle$Skin)>($r2);

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, r34);

     label9:
        return r34;
    }

    public boolean isSkinDefined(java.awt.Component, com.jidesoft.plaf.windows.TMSchema$Part)
    {
        com.jidesoft.plaf.windows.TMSchema$Part r0;
        java.awt.Component r1;
        int $i0, $i1;
        com.jidesoft.plaf.windows.XPStyle r3;
        java.lang.String $r2;
        boolean $z0, $z1;

        r3 := @this: com.jidesoft.plaf.windows.XPStyle;

        r1 := @parameter0: java.awt.Component;

        r0 := @parameter1: com.jidesoft.plaf.windows.TMSchema$Part;

        $i0 = virtualinvoke r0.<com.jidesoft.plaf.windows.TMSchema$Part: int getValue()>();

        if $i0 == 0 goto label1;

        $r2 = virtualinvoke r0.<com.jidesoft.plaf.windows.TMSchema$Part: java.lang.String getControlName(java.awt.Component)>(r1);

        $i1 = virtualinvoke r0.<com.jidesoft.plaf.windows.TMSchema$Part: int getValue()>();

        $z0 = staticinvoke <sun.awt.windows.ThemeReader: boolean isThemePartDefined(java.lang.String,int,int)>($r2, $i1, 0);

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public synchronized com.jidesoft.plaf.windows.XPStyle$Skin getSkin(java.awt.Component, com.jidesoft.plaf.windows.TMSchema$Part)
    {
        com.jidesoft.plaf.windows.TMSchema$Part r2;
        java.lang.AssertionError $r4;
        java.awt.Component r1;
        com.jidesoft.plaf.windows.XPStyle$Skin $r0;
        com.jidesoft.plaf.windows.XPStyle r3;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.String $r9;
        boolean $z0, $z1;

        r3 := @this: com.jidesoft.plaf.windows.XPStyle;

        r1 := @parameter0: java.awt.Component;

        r2 := @parameter1: com.jidesoft.plaf.windows.TMSchema$Part;

        $z0 = <com.jidesoft.plaf.windows.XPStyle: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r3.<com.jidesoft.plaf.windows.XPStyle: boolean isSkinDefined(java.awt.Component,com.jidesoft.plaf.windows.TMSchema$Part)>(r1, r2);

        if $z1 != 0 goto label1;

        $r4 = new java.lang.AssertionError;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("part ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not defined");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>($r9);

        throw $r4;

     label1:
        $r0 = new com.jidesoft.plaf.windows.XPStyle$Skin;

        specialinvoke $r0.<com.jidesoft.plaf.windows.XPStyle$Skin: void <init>(java.awt.Component,com.jidesoft.plaf.windows.TMSchema$Part,com.jidesoft.plaf.windows.TMSchema$State)>(r1, r2, null);

        return $r0;
    }

    long getThemeTransitionDuration(java.awt.Component, com.jidesoft.plaf.windows.TMSchema$Part, com.jidesoft.plaf.windows.TMSchema$State, com.jidesoft.plaf.windows.TMSchema$State, com.jidesoft.plaf.windows.TMSchema$Prop)
    {
        com.jidesoft.plaf.windows.TMSchema$Part r0;
        long $l3;
        java.awt.Component r1;
        com.jidesoft.plaf.windows.TMSchema$State r3, r4;
        int $i0, $i1, $i2, $i4;
        com.jidesoft.plaf.windows.XPStyle r6;
        com.jidesoft.plaf.windows.TMSchema$Prop r5;
        java.lang.String $r2;

        r6 := @this: com.jidesoft.plaf.windows.XPStyle;

        r1 := @parameter0: java.awt.Component;

        r0 := @parameter1: com.jidesoft.plaf.windows.TMSchema$Part;

        r3 := @parameter2: com.jidesoft.plaf.windows.TMSchema$State;

        r4 := @parameter3: com.jidesoft.plaf.windows.TMSchema$State;

        r5 := @parameter4: com.jidesoft.plaf.windows.TMSchema$Prop;

        $r2 = virtualinvoke r0.<com.jidesoft.plaf.windows.TMSchema$Part: java.lang.String getControlName(java.awt.Component)>(r1);

        $i0 = virtualinvoke r0.<com.jidesoft.plaf.windows.TMSchema$Part: int getValue()>();

        $i1 = staticinvoke <com.jidesoft.plaf.windows.TMSchema$State: int getValue(com.jidesoft.plaf.windows.TMSchema$Part,com.jidesoft.plaf.windows.TMSchema$State)>(r0, r3);

        $i2 = staticinvoke <com.jidesoft.plaf.windows.TMSchema$State: int getValue(com.jidesoft.plaf.windows.TMSchema$Part,com.jidesoft.plaf.windows.TMSchema$State)>(r0, r4);

        if r5 == null goto label1;

        $i4 = virtualinvoke r5.<com.jidesoft.plaf.windows.TMSchema$Prop: int getValue()>();

        goto label2;

     label1:
        $i4 = 0;

     label2:
        $l3 = staticinvoke <sun.awt.windows.ThemeReader: long getThemeTransitionDuration(java.lang.String,int,int,int,int)>($r2, $i0, $i1, $i2, $i4);

        return $l3;
    }

    private void <init>()
    {
        com.jidesoft.plaf.windows.XPStyle r0;
        com.jidesoft.plaf.windows.TMSchema$Prop $r1;
        java.util.HashMap $r2, $r3;
        boolean $z0;

        r0 := @this: com.jidesoft.plaf.windows.XPStyle;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <com.jidesoft.plaf.windows.TMSchema$Prop: com.jidesoft.plaf.windows.TMSchema$Prop FLATMENUS>;

        $z0 = staticinvoke <com.jidesoft.plaf.windows.XPStyle: boolean getSysBoolean(com.jidesoft.plaf.windows.TMSchema$Prop)>($r1);

        r0.<com.jidesoft.plaf.windows.XPStyle: boolean flatMenus> = $z0;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<com.jidesoft.plaf.windows.XPStyle: java.util.HashMap colorMap> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<com.jidesoft.plaf.windows.XPStyle: java.util.HashMap borderMap> = $r3;

        return;
    }

    private boolean getBoolean(java.awt.Component, com.jidesoft.plaf.windows.TMSchema$Part, com.jidesoft.plaf.windows.TMSchema$State, com.jidesoft.plaf.windows.TMSchema$Prop)
    {
        com.jidesoft.plaf.windows.TMSchema$Part r0;
        java.awt.Component r1;
        com.jidesoft.plaf.windows.TMSchema$State r3;
        int $i0, $i1, $i2;
        com.jidesoft.plaf.windows.XPStyle r5;
        com.jidesoft.plaf.windows.TMSchema$Prop r4;
        java.lang.String $r2;
        boolean $z0;

        r5 := @this: com.jidesoft.plaf.windows.XPStyle;

        r1 := @parameter0: java.awt.Component;

        r0 := @parameter1: com.jidesoft.plaf.windows.TMSchema$Part;

        r3 := @parameter2: com.jidesoft.plaf.windows.TMSchema$State;

        r4 := @parameter3: com.jidesoft.plaf.windows.TMSchema$Prop;

        $r2 = virtualinvoke r0.<com.jidesoft.plaf.windows.TMSchema$Part: java.lang.String getControlName(java.awt.Component)>(r1);

        $i0 = virtualinvoke r0.<com.jidesoft.plaf.windows.TMSchema$Part: int getValue()>();

        $i1 = staticinvoke <com.jidesoft.plaf.windows.TMSchema$State: int getValue(com.jidesoft.plaf.windows.TMSchema$Part,com.jidesoft.plaf.windows.TMSchema$State)>(r0, r3);

        $i2 = virtualinvoke r4.<com.jidesoft.plaf.windows.TMSchema$Prop: int getValue()>();

        $z0 = staticinvoke <sun.awt.windows.ThemeReader: boolean getBoolean(java.lang.String,int,int,int)>($r2, $i0, $i1, $i2);

        return $z0;
    }

    static java.awt.Dimension getPartSize(com.jidesoft.plaf.windows.TMSchema$Part, com.jidesoft.plaf.windows.TMSchema$State)
    {
        java.awt.Dimension $r3;
        com.jidesoft.plaf.windows.TMSchema$State r2;
        int $i0, $i1;
        com.jidesoft.plaf.windows.TMSchema$Part r0;
        java.lang.String $r1;

        r0 := @parameter0: com.jidesoft.plaf.windows.TMSchema$Part;

        r2 := @parameter1: com.jidesoft.plaf.windows.TMSchema$State;

        $r1 = virtualinvoke r0.<com.jidesoft.plaf.windows.TMSchema$Part: java.lang.String getControlName(java.awt.Component)>(null);

        $i0 = virtualinvoke r0.<com.jidesoft.plaf.windows.TMSchema$Part: int getValue()>();

        $i1 = staticinvoke <com.jidesoft.plaf.windows.TMSchema$State: int getValue(com.jidesoft.plaf.windows.TMSchema$Part,com.jidesoft.plaf.windows.TMSchema$State)>(r0, r2);

        $r3 = staticinvoke <sun.awt.windows.ThemeReader: java.awt.Dimension getPartSize(java.lang.String,int,int)>($r1, $i0, $i1);

        return $r3;
    }

    private static boolean getSysBoolean(com.jidesoft.plaf.windows.TMSchema$Prop)
    {
        int $i0;
        com.jidesoft.plaf.windows.TMSchema$Prop r0;
        boolean $z0;

        r0 := @parameter0: com.jidesoft.plaf.windows.TMSchema$Prop;

        $i0 = virtualinvoke r0.<com.jidesoft.plaf.windows.TMSchema$Prop: int getValue()>();

        $z0 = staticinvoke <sun.awt.windows.ThemeReader: boolean getSysBoolean(java.lang.String,int)>("window", $i0);

        return $z0;
    }

    static com.jidesoft.plaf.windows.XPStyle$SkinPainter access$100()
    {
        com.jidesoft.plaf.windows.XPStyle$SkinPainter $r0;

        $r0 = <com.jidesoft.plaf.windows.XPStyle: com.jidesoft.plaf.windows.XPStyle$SkinPainter skinPainter>;

        return $r0;
    }

    static java.lang.String access$200(java.awt.Component, com.jidesoft.plaf.windows.TMSchema$Part, com.jidesoft.plaf.windows.TMSchema$State, com.jidesoft.plaf.windows.TMSchema$Prop)
    {
        com.jidesoft.plaf.windows.TMSchema$State r2;
        com.jidesoft.plaf.windows.TMSchema$Part r1;
        com.jidesoft.plaf.windows.TMSchema$Prop r3;
        java.lang.String $r4;
        java.awt.Component r0;

        r0 := @parameter0: java.awt.Component;

        r1 := @parameter1: com.jidesoft.plaf.windows.TMSchema$Part;

        r2 := @parameter2: com.jidesoft.plaf.windows.TMSchema$State;

        r3 := @parameter3: com.jidesoft.plaf.windows.TMSchema$Prop;

        $r4 = staticinvoke <com.jidesoft.plaf.windows.XPStyle: java.lang.String getTypeEnumName(java.awt.Component,com.jidesoft.plaf.windows.TMSchema$Part,com.jidesoft.plaf.windows.TMSchema$State,com.jidesoft.plaf.windows.TMSchema$Prop)>(r0, r1, r2, r3);

        return $r4;
    }

    static void <clinit>()
    {
        com.jidesoft.plaf.windows.XPStyle$1 $r2;
        java.lang.Class $r0;
        com.jidesoft.plaf.windows.XPStyle$SkinPainter $r1;
        boolean $z0, $z1;

        $r0 = class "Lcom/jidesoft/plaf/windows/XPStyle;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.jidesoft.plaf.windows.XPStyle: boolean $assertionsDisabled> = $z1;

        $r1 = new com.jidesoft.plaf.windows.XPStyle$SkinPainter;

        specialinvoke $r1.<com.jidesoft.plaf.windows.XPStyle$SkinPainter: void <init>()>();

        <com.jidesoft.plaf.windows.XPStyle: com.jidesoft.plaf.windows.XPStyle$SkinPainter skinPainter> = $r1;

        <com.jidesoft.plaf.windows.XPStyle: java.lang.Boolean themeActive> = null;

        staticinvoke <com.jidesoft.plaf.windows.XPStyle: void invalidateStyle()>();

        $r2 = new com.jidesoft.plaf.windows.XPStyle$1;

        specialinvoke $r2.<com.jidesoft.plaf.windows.XPStyle$1: void <init>()>();

        staticinvoke <javax.swing.UIManager: void addPropertyChangeListener(java.beans.PropertyChangeListener)>($r2);

        return;
    }
}
