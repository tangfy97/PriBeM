public class org.bouncycastle.crypto.tls.TlsMac extends java.lang.Object
{
    private long seqNo;
    private org.bouncycastle.crypto.macs.HMac mac;

    protected void <init>(org.bouncycastle.crypto.Digest, byte[], int, int)
    {
        byte[] r4;
        org.bouncycastle.crypto.Digest r2;
        org.bouncycastle.crypto.macs.HMac $r1, $r5;
        int i0, i1;
        org.bouncycastle.crypto.tls.TlsMac r0;
        org.bouncycastle.crypto.params.KeyParameter $r3;

        r0 := @this: org.bouncycastle.crypto.tls.TlsMac;

        r2 := @parameter0: org.bouncycastle.crypto.Digest;

        r4 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.bouncycastle.crypto.macs.HMac;

        specialinvoke $r1.<org.bouncycastle.crypto.macs.HMac: void <init>(org.bouncycastle.crypto.Digest)>(r2);

        r0.<org.bouncycastle.crypto.tls.TlsMac: org.bouncycastle.crypto.macs.HMac mac> = $r1;

        $r3 = new org.bouncycastle.crypto.params.KeyParameter;

        specialinvoke $r3.<org.bouncycastle.crypto.params.KeyParameter: void <init>(byte[],int,int)>(r4, i0, i1);

        $r5 = r0.<org.bouncycastle.crypto.tls.TlsMac: org.bouncycastle.crypto.macs.HMac mac>;

        virtualinvoke $r5.<org.bouncycastle.crypto.macs.HMac: void init(org.bouncycastle.crypto.CipherParameters)>($r3);

        r0.<org.bouncycastle.crypto.tls.TlsMac: long seqNo> = 0L;

        return;
    }

    protected int getSize()
    {
        int $i0;
        org.bouncycastle.crypto.macs.HMac $r1;
        org.bouncycastle.crypto.tls.TlsMac r0;

        r0 := @this: org.bouncycastle.crypto.tls.TlsMac;

        $r1 = r0.<org.bouncycastle.crypto.tls.TlsMac: org.bouncycastle.crypto.macs.HMac mac>;

        $i0 = virtualinvoke $r1.<org.bouncycastle.crypto.macs.HMac: int getMacSize()>();

        return $i0;
    }

    protected byte[] calculateMac(short, byte[], int, int)
    {
        byte[] r2, $r3, r6;
        java.lang.IllegalStateException $r10;
        java.io.ByteArrayOutputStream $r0;
        long $l0, $l1;
        short s2;
        org.bouncycastle.crypto.macs.HMac $r4, $r5, $r7, $r8;
        int i3, i4, $i5, $i6;
        org.bouncycastle.crypto.tls.TlsMac r1;
        java.io.IOException $r9;

        r1 := @this: org.bouncycastle.crypto.tls.TlsMac;

        s2 := @parameter0: short;

        r2 := @parameter1: byte[];

        i4 := @parameter2: int;

        i3 := @parameter3: int;

     label1:
        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        $l0 = r1.<org.bouncycastle.crypto.tls.TlsMac: long seqNo>;

        $l1 = $l0 + 1L;

        r1.<org.bouncycastle.crypto.tls.TlsMac: long seqNo> = $l1;

        staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: void writeUint64(long,java.io.OutputStream)>($l0, $r0);

        staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: void writeUint8(short,java.io.OutputStream)>(s2, $r0);

        staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: void writeVersion(java.io.OutputStream)>($r0);

        staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: void writeUint16(int,java.io.OutputStream)>(i3, $r0);

        virtualinvoke $r0.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r2, i4, i3);

        $r3 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r4 = r1.<org.bouncycastle.crypto.tls.TlsMac: org.bouncycastle.crypto.macs.HMac mac>;

        $i5 = lengthof $r3;

        virtualinvoke $r4.<org.bouncycastle.crypto.macs.HMac: void update(byte[],int,int)>($r3, 0, $i5);

        $r5 = r1.<org.bouncycastle.crypto.tls.TlsMac: org.bouncycastle.crypto.macs.HMac mac>;

        $i6 = virtualinvoke $r5.<org.bouncycastle.crypto.macs.HMac: int getMacSize()>();

        r6 = newarray (byte)[$i6];

        $r7 = r1.<org.bouncycastle.crypto.tls.TlsMac: org.bouncycastle.crypto.macs.HMac mac>;

        virtualinvoke $r7.<org.bouncycastle.crypto.macs.HMac: int doFinal(byte[],int)>(r6, 0);

        $r8 = r1.<org.bouncycastle.crypto.tls.TlsMac: org.bouncycastle.crypto.macs.HMac mac>;

        virtualinvoke $r8.<org.bouncycastle.crypto.macs.HMac: void reset()>();

     label2:
        return r6;

     label3:
        $r9 := @caughtexception;

        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Internal error during mac calculation");

        throw $r10;

        catch java.io.IOException from label1 to label2 with label3;
    }
}
