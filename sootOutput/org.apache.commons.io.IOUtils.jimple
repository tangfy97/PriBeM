public class org.apache.commons.io.IOUtils extends java.lang.Object
{
    public static final char DIR_SEPARATOR_UNIX;
    public static final char DIR_SEPARATOR_WINDOWS;
    public static final char DIR_SEPARATOR;
    public static final java.lang.String LINE_SEPARATOR_UNIX;
    public static final java.lang.String LINE_SEPARATOR_WINDOWS;
    public static final java.lang.String LINE_SEPARATOR;
    private static final int DEFAULT_BUFFER_SIZE;
    private static final int SKIP_BUFFER_SIZE;
    private static char[] SKIP_CHAR_BUFFER;
    private static byte[] SKIP_BYTE_BUFFER;

    public void <init>()
    {
        org.apache.commons.io.IOUtils r0;

        r0 := @this: org.apache.commons.io.IOUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void closeQuietly(java.io.Reader)
    {
        java.io.Reader r0;

        r0 := @parameter0: java.io.Reader;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Closeable)>(r0);

        return;
    }

    public static void closeQuietly(java.io.Writer)
    {
        java.io.Writer r0;

        r0 := @parameter0: java.io.Writer;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Closeable)>(r0);

        return;
    }

    public static void closeQuietly(java.io.InputStream)
    {
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Closeable)>(r0);

        return;
    }

    public static void closeQuietly(java.io.OutputStream)
    {
        java.io.OutputStream r0;

        r0 := @parameter0: java.io.OutputStream;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Closeable)>(r0);

        return;
    }

    public static void closeQuietly(java.io.Closeable)
    {
        java.io.IOException $r1;
        java.io.Closeable r0;

        r0 := @parameter0: java.io.Closeable;

     label1:
        if r0 == null goto label2;

        interfaceinvoke r0.<java.io.Closeable: void close()>();

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static void closeQuietly(java.net.Socket)
    {
        java.net.Socket r0;
        java.io.IOException $r1;

        r0 := @parameter0: java.net.Socket;

        if r0 == null goto label4;

     label1:
        virtualinvoke r0.<java.net.Socket: void close()>();

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static java.io.InputStream toBufferedInputStream(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0, $r1;

        r0 := @parameter0: java.io.InputStream;

        $r1 = staticinvoke <org.apache.commons.io.output.ByteArrayOutputStream: java.io.InputStream toBufferedInputStream(java.io.InputStream)>(r0);

        return $r1;
    }

    public static byte[] toByteArray(java.io.InputStream) throws java.io.IOException
    {
        org.apache.commons.io.output.ByteArrayOutputStream $r0;
        byte[] $r2;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        $r0 = new org.apache.commons.io.output.ByteArrayOutputStream;

        specialinvoke $r0.<org.apache.commons.io.output.ByteArrayOutputStream: void <init>()>();

        staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>(r1, $r0);

        $r2 = virtualinvoke $r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r2;
    }

    public static byte[] toByteArray(java.io.InputStream, long) throws java.io.IOException
    {
        byte[] $r1;
        long l0;
        java.lang.IllegalArgumentException $r8;
        byte $b1;
        int $i2, $i3;
        java.lang.StringBuilder $r4, $r5, $r7;
        java.lang.String $r6;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        l0 := @parameter1: long;

        $b1 = l0 cmp 2147483647L;

        $i3 = (int) $b1;

        if $i3 <= 0 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Size cannot be greater than Integer max value: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r8;

     label1:
        $i2 = (int) l0;

        $r1 = staticinvoke <org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.InputStream,int)>(r0, $i2);

        return $r1;
    }

    public static byte[] toByteArray(java.io.InputStream, int) throws java.io.IOException
    {
        byte[] r0, $r9;
        int i0, $i1, $i2, i3, $i5;
        java.lang.String $r7, $r14;
        java.io.IOException $r18;
        java.lang.IllegalArgumentException $r16;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r12, $r13, $r15, $r17;
        java.io.InputStream r8;

        r8 := @parameter0: java.io.InputStream;

        i0 := @parameter1: int;

        if i0 >= 0 goto label1;

        $r16 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Size must be equal or greater than zero: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r16;

     label1:
        if i0 != 0 goto label2;

        $r9 = newarray (byte)[0];

        return $r9;

     label2:
        r0 = newarray (byte)[i0];

        i3 = 0;

     label3:
        if i3 >= i0 goto label4;

        $i1 = i0 - i3;

        $i2 = virtualinvoke r8.<java.io.InputStream: int read(byte[],int,int)>(r0, i3, $i1);

        $i5 = (int) -1;

        if $i2 == $i5 goto label4;

        i3 = i3 + $i2;

        goto label3;

     label4:
        if i3 == i0 goto label5;

        $r18 = new java.io.IOException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected readed size. current: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", excepted: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.io.IOException: void <init>(java.lang.String)>($r7);

        throw $r18;

     label5:
        return r0;
    }

    public static byte[] toByteArray(java.io.Reader) throws java.io.IOException
    {
        org.apache.commons.io.output.ByteArrayOutputStream $r0;
        byte[] $r2;
        java.io.Reader r1;

        r1 := @parameter0: java.io.Reader;

        $r0 = new org.apache.commons.io.output.ByteArrayOutputStream;

        specialinvoke $r0.<org.apache.commons.io.output.ByteArrayOutputStream: void <init>()>();

        staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.Reader,java.io.OutputStream)>(r1, $r0);

        $r2 = virtualinvoke $r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r2;
    }

    public static byte[] toByteArray(java.io.Reader, java.lang.String) throws java.io.IOException
    {
        byte[] $r3;
        org.apache.commons.io.output.ByteArrayOutputStream $r0;
        java.io.Reader r1;
        java.lang.String r2;

        r1 := @parameter0: java.io.Reader;

        r2 := @parameter1: java.lang.String;

        $r0 = new org.apache.commons.io.output.ByteArrayOutputStream;

        specialinvoke $r0.<org.apache.commons.io.output.ByteArrayOutputStream: void <init>()>();

        staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.Reader,java.io.OutputStream,java.lang.String)>(r1, $r0, r2);

        $r3 = virtualinvoke $r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r3;
    }

    public static byte[] toByteArray(java.lang.String) throws java.io.IOException
    {
        byte[] $r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: byte[] getBytes()>();

        return $r1;
    }

    public static char[] toCharArray(java.io.InputStream) throws java.io.IOException
    {
        char[] $r2;
        java.io.CharArrayWriter $r0;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        $r0 = new java.io.CharArrayWriter;

        specialinvoke $r0.<java.io.CharArrayWriter: void <init>()>();

        staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.InputStream,java.io.Writer)>(r1, $r0);

        $r2 = virtualinvoke $r0.<java.io.CharArrayWriter: char[] toCharArray()>();

        return $r2;
    }

    public static char[] toCharArray(java.io.InputStream, java.lang.String) throws java.io.IOException
    {
        char[] $r3;
        java.io.CharArrayWriter $r0;
        java.lang.String r2;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.String;

        $r0 = new java.io.CharArrayWriter;

        specialinvoke $r0.<java.io.CharArrayWriter: void <init>()>();

        staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.InputStream,java.io.Writer,java.lang.String)>(r1, $r0, r2);

        $r3 = virtualinvoke $r0.<java.io.CharArrayWriter: char[] toCharArray()>();

        return $r3;
    }

    public static char[] toCharArray(java.io.Reader) throws java.io.IOException
    {
        char[] $r2;
        java.io.CharArrayWriter $r0;
        java.io.Reader r1;

        r1 := @parameter0: java.io.Reader;

        $r0 = new java.io.CharArrayWriter;

        specialinvoke $r0.<java.io.CharArrayWriter: void <init>()>();

        staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.Reader,java.io.Writer)>(r1, $r0);

        $r2 = virtualinvoke $r0.<java.io.CharArrayWriter: char[] toCharArray()>();

        return $r2;
    }

    public static java.lang.String toString(java.io.InputStream) throws java.io.IOException
    {
        java.lang.String $r1;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        $r1 = staticinvoke <org.apache.commons.io.IOUtils: java.lang.String toString(java.io.InputStream,java.lang.String)>(r0, null);

        return $r1;
    }

    public static java.lang.String toString(java.io.InputStream, java.lang.String) throws java.io.IOException
    {
        org.apache.commons.io.output.StringBuilderWriter $r0;
        java.lang.String r2, $r3;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.String;

        $r0 = new org.apache.commons.io.output.StringBuilderWriter;

        specialinvoke $r0.<org.apache.commons.io.output.StringBuilderWriter: void <init>()>();

        staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.InputStream,java.io.Writer,java.lang.String)>(r1, $r0, r2);

        $r3 = virtualinvoke $r0.<org.apache.commons.io.output.StringBuilderWriter: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String toString(java.io.Reader) throws java.io.IOException
    {
        java.io.Reader r1;
        java.lang.String $r2;
        org.apache.commons.io.output.StringBuilderWriter $r0;

        r1 := @parameter0: java.io.Reader;

        $r0 = new org.apache.commons.io.output.StringBuilderWriter;

        specialinvoke $r0.<org.apache.commons.io.output.StringBuilderWriter: void <init>()>();

        staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.Reader,java.io.Writer)>(r1, $r0);

        $r2 = virtualinvoke $r0.<org.apache.commons.io.output.StringBuilderWriter: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.String toString(java.net.URI) throws java.io.IOException
    {
        java.net.URI r0;
        java.lang.String $r1;

        r0 := @parameter0: java.net.URI;

        $r1 = staticinvoke <org.apache.commons.io.IOUtils: java.lang.String toString(java.net.URI,java.lang.String)>(r0, null);

        return $r1;
    }

    public static java.lang.String toString(java.net.URI, java.lang.String) throws java.io.IOException
    {
        java.net.URL $r1;
        java.net.URI r0;
        java.lang.String r2, $r3;

        r0 := @parameter0: java.net.URI;

        r2 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<java.net.URI: java.net.URL toURL()>();

        $r3 = staticinvoke <org.apache.commons.io.IOUtils: java.lang.String toString(java.net.URL,java.lang.String)>($r1, r2);

        return $r3;
    }

    public static java.lang.String toString(java.net.URL) throws java.io.IOException
    {
        java.lang.String $r1;
        java.net.URL r0;

        r0 := @parameter0: java.net.URL;

        $r1 = staticinvoke <org.apache.commons.io.IOUtils: java.lang.String toString(java.net.URL,java.lang.String)>(r0, null);

        return $r1;
    }

    public static java.lang.String toString(java.net.URL, java.lang.String) throws java.io.IOException
    {
        java.lang.Throwable $r4;
        java.net.URL r0;
        java.lang.String r2, $r3;
        java.io.InputStream $r1;

        r0 := @parameter0: java.net.URL;

        r2 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<java.net.URL: java.io.InputStream openStream()>();

     label1:
        $r3 = staticinvoke <org.apache.commons.io.IOUtils: java.lang.String toString(java.io.InputStream,java.lang.String)>($r1, r2);

     label2:
        virtualinvoke $r1.<java.io.InputStream: void close()>();

        return $r3;

     label3:
        $r4 := @caughtexception;

     label4:
        virtualinvoke $r1.<java.io.InputStream: void close()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static java.lang.String toString(byte[]) throws java.io.IOException
    {
        byte[] r1;
        java.lang.String $r0;

        r1 := @parameter0: byte[];

        $r0 = new java.lang.String;

        specialinvoke $r0.<java.lang.String: void <init>(byte[])>(r1);

        return $r0;
    }

    public static java.lang.String toString(byte[], java.lang.String) throws java.io.IOException
    {
        byte[] r2;
        java.lang.String r0, $r1, $r3;

        r2 := @parameter0: byte[];

        r0 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(byte[])>(r2);

        return $r3;

     label1:
        $r1 = new java.lang.String;

        specialinvoke $r1.<java.lang.String: void <init>(byte[],java.lang.String)>(r2, r0);

        return $r1;
    }

    public static java.util.List readLines(java.io.InputStream) throws java.io.IOException
    {
        java.util.List $r2;
        java.io.InputStreamReader $r0;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        $r0 = new java.io.InputStreamReader;

        specialinvoke $r0.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r1);

        $r2 = staticinvoke <org.apache.commons.io.IOUtils: java.util.List readLines(java.io.Reader)>($r0);

        return $r2;
    }

    public static java.util.List readLines(java.io.InputStream, java.lang.String) throws java.io.IOException
    {
        java.util.List $r3, $r4;
        java.lang.String r0;
        java.io.InputStreamReader $r1;
        java.io.InputStream r2;

        r2 := @parameter0: java.io.InputStream;

        r0 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r4 = staticinvoke <org.apache.commons.io.IOUtils: java.util.List readLines(java.io.InputStream)>(r2);

        return $r4;

     label1:
        $r1 = new java.io.InputStreamReader;

        specialinvoke $r1.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>(r2, r0);

        $r3 = staticinvoke <org.apache.commons.io.IOUtils: java.util.List readLines(java.io.Reader)>($r1);

        return $r3;
    }

    public static java.util.List readLines(java.io.Reader) throws java.io.IOException
    {
        java.io.BufferedReader $r0;
        java.io.Reader r1;
        java.lang.String r3;
        java.util.ArrayList $r2;

        r1 := @parameter0: java.io.Reader;

        $r0 = new java.io.BufferedReader;

        specialinvoke $r0.<java.io.BufferedReader: void <init>(java.io.Reader)>(r1);

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r3 = virtualinvoke $r0.<java.io.BufferedReader: java.lang.String readLine()>();

     label1:
        if r3 == null goto label2;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r3);

        r3 = virtualinvoke $r0.<java.io.BufferedReader: java.lang.String readLine()>();

        goto label1;

     label2:
        return $r2;
    }

    public static org.apache.commons.io.LineIterator lineIterator(java.io.Reader)
    {
        org.apache.commons.io.LineIterator $r0;
        java.io.Reader r1;

        r1 := @parameter0: java.io.Reader;

        $r0 = new org.apache.commons.io.LineIterator;

        specialinvoke $r0.<org.apache.commons.io.LineIterator: void <init>(java.io.Reader)>(r1);

        return $r0;
    }

    public static org.apache.commons.io.LineIterator lineIterator(java.io.InputStream, java.lang.String) throws java.io.IOException
    {
        org.apache.commons.io.LineIterator $r3;
        java.lang.String r0;
        java.io.InputStreamReader $r1, $r4, r5;
        java.io.InputStream r2;

        r2 := @parameter0: java.io.InputStream;

        r0 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r4 = new java.io.InputStreamReader;

        specialinvoke $r4.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r2);

        r5 = $r4;

        goto label2;

     label1:
        $r1 = new java.io.InputStreamReader;

        specialinvoke $r1.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>(r2, r0);

        r5 = $r1;

     label2:
        $r3 = new org.apache.commons.io.LineIterator;

        specialinvoke $r3.<org.apache.commons.io.LineIterator: void <init>(java.io.Reader)>(r5);

        return $r3;
    }

    public static java.io.InputStream toInputStream(java.lang.CharSequence)
    {
        java.lang.String $r1;
        java.lang.CharSequence r0;
        java.io.InputStream $r2;

        r0 := @parameter0: java.lang.CharSequence;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r2 = staticinvoke <org.apache.commons.io.IOUtils: java.io.InputStream toInputStream(java.lang.String)>($r1);

        return $r2;
    }

    public static java.io.InputStream toInputStream(java.lang.CharSequence, java.lang.String) throws java.io.IOException
    {
        java.lang.CharSequence r0;
        java.lang.String $r1, r2;
        java.io.InputStream $r3;

        r0 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r3 = staticinvoke <org.apache.commons.io.IOUtils: java.io.InputStream toInputStream(java.lang.String,java.lang.String)>($r1, r2);

        return $r3;
    }

    public static java.io.InputStream toInputStream(java.lang.String)
    {
        byte[] $r1;
        java.lang.String r0;
        java.io.ByteArrayInputStream $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: byte[] getBytes()>();

        $r2 = new java.io.ByteArrayInputStream;

        specialinvoke $r2.<java.io.ByteArrayInputStream: void <init>(byte[])>($r1);

        return $r2;
    }

    public static java.io.InputStream toInputStream(java.lang.String, java.lang.String) throws java.io.IOException
    {
        byte[] $r3;
        java.io.ByteArrayInputStream $r2;
        java.lang.String r0, r1;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        $r3 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.lang.String)>(r0);

        goto label2;

     label1:
        $r3 = virtualinvoke r1.<java.lang.String: byte[] getBytes()>();

     label2:
        $r2 = new java.io.ByteArrayInputStream;

        specialinvoke $r2.<java.io.ByteArrayInputStream: void <init>(byte[])>($r3);

        return $r2;
    }

    public static void write(byte[], java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r1;
        byte[] r0;

        r0 := @parameter0: byte[];

        r1 := @parameter1: java.io.OutputStream;

        if r0 == null goto label1;

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>(r0);

     label1:
        return;
    }

    public static void write(byte[], java.io.Writer) throws java.io.IOException
    {
        java.io.Writer r1;
        byte[] r0;
        java.lang.String $r2;

        r0 := @parameter0: byte[];

        r1 := @parameter1: java.io.Writer;

        if r0 == null goto label1;

        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(byte[])>(r0);

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r2);

     label1:
        return;
    }

    public static void write(byte[], java.io.Writer, java.lang.String) throws java.io.IOException
    {
        byte[] r0;
        java.io.Writer r2;
        java.lang.String r1, $r3;

        r0 := @parameter0: byte[];

        r2 := @parameter1: java.io.Writer;

        r1 := @parameter2: java.lang.String;

        if r0 == null goto label2;

        if r1 != null goto label1;

        staticinvoke <org.apache.commons.io.IOUtils: void write(byte[],java.io.Writer)>(r0, r2);

        goto label2;

     label1:
        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(byte[],java.lang.String)>(r0, r1);

        virtualinvoke r2.<java.io.Writer: void write(java.lang.String)>($r3);

     label2:
        return;
    }

    public static void write(char[], java.io.Writer) throws java.io.IOException
    {
        java.io.Writer r1;
        char[] r0;

        r0 := @parameter0: char[];

        r1 := @parameter1: java.io.Writer;

        if r0 == null goto label1;

        virtualinvoke r1.<java.io.Writer: void write(char[])>(r0);

     label1:
        return;
    }

    public static void write(char[], java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r1;
        byte[] $r3;
        char[] r0;
        java.lang.String $r2;

        r0 := @parameter0: char[];

        r1 := @parameter1: java.io.OutputStream;

        if r0 == null goto label1;

        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(char[])>(r0);

        $r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes()>();

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r3);

     label1:
        return;
    }

    public static void write(char[], java.io.OutputStream, java.lang.String) throws java.io.IOException
    {
        java.io.OutputStream r2;
        byte[] $r4;
        char[] r0;
        java.lang.String r1, $r3;

        r0 := @parameter0: char[];

        r2 := @parameter1: java.io.OutputStream;

        r1 := @parameter2: java.lang.String;

        if r0 == null goto label2;

        if r1 != null goto label1;

        staticinvoke <org.apache.commons.io.IOUtils: void write(char[],java.io.OutputStream)>(r0, r2);

        goto label2;

     label1:
        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(char[])>(r0);

        $r4 = virtualinvoke $r3.<java.lang.String: byte[] getBytes(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.OutputStream: void write(byte[])>($r4);

     label2:
        return;
    }

    public static void write(java.lang.CharSequence, java.io.Writer) throws java.io.IOException
    {
        java.io.Writer r2;
        java.lang.String $r1;
        java.lang.CharSequence r0;

        r0 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: java.io.Writer;

        if r0 == null goto label1;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.Writer)>($r1, r2);

     label1:
        return;
    }

    public static void write(java.lang.CharSequence, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r2;
        java.lang.String $r1;
        java.lang.CharSequence r0;

        r0 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: java.io.OutputStream;

        if r0 == null goto label1;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.OutputStream)>($r1, r2);

     label1:
        return;
    }

    public static void write(java.lang.CharSequence, java.io.OutputStream, java.lang.String) throws java.io.IOException
    {
        java.io.OutputStream r2;
        java.lang.CharSequence r0;
        java.lang.String $r1, r3;

        r0 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: java.io.OutputStream;

        r3 := @parameter2: java.lang.String;

        if r0 == null goto label1;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.OutputStream,java.lang.String)>($r1, r2, r3);

     label1:
        return;
    }

    public static void write(java.lang.String, java.io.Writer) throws java.io.IOException
    {
        java.io.Writer r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.io.Writer;

        if r0 == null goto label1;

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>(r0);

     label1:
        return;
    }

    public static void write(java.lang.String, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r1;
        byte[] $r2;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.io.OutputStream;

        if r0 == null goto label1;

        $r2 = virtualinvoke r0.<java.lang.String: byte[] getBytes()>();

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r2);

     label1:
        return;
    }

    public static void write(java.lang.String, java.io.OutputStream, java.lang.String) throws java.io.IOException
    {
        java.io.OutputStream r2;
        byte[] $r3;
        java.lang.String r0, r1;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.OutputStream;

        r1 := @parameter2: java.lang.String;

        if r0 == null goto label2;

        if r1 != null goto label1;

        staticinvoke <org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.OutputStream)>(r0, r2);

        goto label2;

     label1:
        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.OutputStream: void write(byte[])>($r3);

     label2:
        return;
    }

    public static void write(java.lang.StringBuffer, java.io.Writer) throws java.io.IOException
    {
        java.io.Writer r1;
        java.lang.String $r2;
        java.lang.StringBuffer r0;

        r0 := @parameter0: java.lang.StringBuffer;

        r1 := @parameter1: java.io.Writer;

        if r0 == null goto label1;

        $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r2);

     label1:
        return;
    }

    public static void write(java.lang.StringBuffer, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r1;
        byte[] $r3;
        java.lang.StringBuffer r0;
        java.lang.String $r2;

        r0 := @parameter0: java.lang.StringBuffer;

        r1 := @parameter1: java.io.OutputStream;

        if r0 == null goto label1;

        $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.String toString()>();

        $r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes()>();

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r3);

     label1:
        return;
    }

    public static void write(java.lang.StringBuffer, java.io.OutputStream, java.lang.String) throws java.io.IOException
    {
        java.io.OutputStream r2;
        byte[] $r4;
        java.lang.StringBuffer r0;
        java.lang.String r1, $r3;

        r0 := @parameter0: java.lang.StringBuffer;

        r2 := @parameter1: java.io.OutputStream;

        r1 := @parameter2: java.lang.String;

        if r0 == null goto label2;

        if r1 != null goto label1;

        staticinvoke <org.apache.commons.io.IOUtils: void write(java.lang.StringBuffer,java.io.OutputStream)>(r0, r2);

        goto label2;

     label1:
        $r3 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.String toString()>();

        $r4 = virtualinvoke $r3.<java.lang.String: byte[] getBytes(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.OutputStream: void write(byte[])>($r4);

     label2:
        return;
    }

    public static void writeLines(java.util.Collection, java.lang.String, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r3;
        byte[] $r4, $r6;
        java.util.Iterator $r1;
        java.util.Collection r0;
        java.lang.Object $r2;
        java.lang.String $r5, r7;
        boolean $z0;

        r0 := @parameter0: java.util.Collection;

        r7 := @parameter1: java.lang.String;

        r3 := @parameter2: java.io.OutputStream;

        if r0 != null goto label1;

        return;

     label1:
        if r7 != null goto label2;

        r7 = <org.apache.commons.io.IOUtils: java.lang.String LINE_SEPARATOR>;

     label2:
        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        if $r2 == null goto label4;

        $r5 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        $r6 = virtualinvoke $r5.<java.lang.String: byte[] getBytes()>();

        virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r6);

     label4:
        $r4 = virtualinvoke r7.<java.lang.String: byte[] getBytes()>();

        virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r4);

        goto label3;

     label5:
        return;
    }

    public static void writeLines(java.util.Collection, java.lang.String, java.io.OutputStream, java.lang.String) throws java.io.IOException
    {
        java.io.OutputStream r4;
        byte[] $r5, $r7;
        java.util.Iterator $r2;
        java.util.Collection r1;
        java.lang.Object $r3;
        java.lang.String r0, $r6, r8;
        boolean $z0;

        r1 := @parameter0: java.util.Collection;

        r8 := @parameter1: java.lang.String;

        r4 := @parameter2: java.io.OutputStream;

        r0 := @parameter3: java.lang.String;

        if r0 != null goto label1;

        staticinvoke <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)>(r1, r8, r4);

        goto label6;

     label1:
        if r1 != null goto label2;

        return;

     label2:
        if r8 != null goto label3;

        r8 = <org.apache.commons.io.IOUtils: java.lang.String LINE_SEPARATOR>;

     label3:
        $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        if $r3 == null goto label5;

        $r6 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        $r7 = virtualinvoke $r6.<java.lang.String: byte[] getBytes(java.lang.String)>(r0);

        virtualinvoke r4.<java.io.OutputStream: void write(byte[])>($r7);

     label5:
        $r5 = virtualinvoke r8.<java.lang.String: byte[] getBytes(java.lang.String)>(r0);

        virtualinvoke r4.<java.io.OutputStream: void write(byte[])>($r5);

        goto label4;

     label6:
        return;
    }

    public static void writeLines(java.util.Collection, java.lang.String, java.io.Writer) throws java.io.IOException
    {
        java.util.Iterator $r1;
        java.util.Collection r0;
        java.io.Writer r3;
        java.lang.Object $r2;
        java.lang.String $r4, r5;
        boolean $z0;

        r0 := @parameter0: java.util.Collection;

        r5 := @parameter1: java.lang.String;

        r3 := @parameter2: java.io.Writer;

        if r0 != null goto label1;

        return;

     label1:
        if r5 != null goto label2;

        r5 = <org.apache.commons.io.IOUtils: java.lang.String LINE_SEPARATOR>;

     label2:
        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        if $r2 == null goto label4;

        $r4 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r3.<java.io.Writer: void write(java.lang.String)>($r4);

     label4:
        virtualinvoke r3.<java.io.Writer: void write(java.lang.String)>(r5);

        goto label3;

     label5:
        return;
    }

    public static int copy(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r1;
        byte $b1;
        int $i2, $i3, $i5;
        long $l0;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.io.OutputStream;

        $l0 = staticinvoke <org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream)>(r0, r1);

        $b1 = $l0 cmp 2147483647L;

        $i3 = (int) $b1;

        if $i3 <= 0 goto label1;

        $i5 = (int) -1;

        return $i5;

     label1:
        $i2 = (int) $l0;

        return $i2;
    }

    public static long copyLarge(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r2;
        byte[] r0;
        int $i0, $i4;
        long $l1, l2;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.io.OutputStream;

        r0 = newarray (byte)[4096];

        l2 = 0L;

     label1:
        $i0 = virtualinvoke r1.<java.io.InputStream: int read(byte[])>(r0);

        $i4 = (int) -1;

        if $i4 == $i0 goto label2;

        virtualinvoke r2.<java.io.OutputStream: void write(byte[],int,int)>(r0, 0, $i0);

        $l1 = (long) $i0;

        l2 = l2 + $l1;

        goto label1;

     label2:
        return l2;
    }

    public static void copy(java.io.InputStream, java.io.Writer) throws java.io.IOException
    {
        java.io.Writer r2;
        java.io.InputStreamReader $r0;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.io.Writer;

        $r0 = new java.io.InputStreamReader;

        specialinvoke $r0.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r1);

        staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.Reader,java.io.Writer)>($r0, r2);

        return;
    }

    public static void copy(java.io.InputStream, java.io.Writer, java.lang.String) throws java.io.IOException
    {
        java.io.Writer r3;
        java.lang.String r0;
        java.io.InputStreamReader $r1;
        java.io.InputStream r2;

        r2 := @parameter0: java.io.InputStream;

        r3 := @parameter1: java.io.Writer;

        r0 := @parameter2: java.lang.String;

        if r0 != null goto label1;

        staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.InputStream,java.io.Writer)>(r2, r3);

        goto label2;

     label1:
        $r1 = new java.io.InputStreamReader;

        specialinvoke $r1.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>(r2, r0);

        staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.Reader,java.io.Writer)>($r1, r3);

     label2:
        return;
    }

    public static int copy(java.io.Reader, java.io.Writer) throws java.io.IOException
    {
        byte $b1;
        java.io.Writer r1;
        int $i2, $i3, $i5;
        long $l0;
        java.io.Reader r0;

        r0 := @parameter0: java.io.Reader;

        r1 := @parameter1: java.io.Writer;

        $l0 = staticinvoke <org.apache.commons.io.IOUtils: long copyLarge(java.io.Reader,java.io.Writer)>(r0, r1);

        $b1 = $l0 cmp 2147483647L;

        $i3 = (int) $b1;

        if $i3 <= 0 goto label1;

        $i5 = (int) -1;

        return $i5;

     label1:
        $i2 = (int) $l0;

        return $i2;
    }

    public static long copyLarge(java.io.Reader, java.io.Writer) throws java.io.IOException
    {
        int $i0, $i4;
        java.io.Writer r2;
        char[] r0;
        long $l1, l2;
        java.io.Reader r1;

        r1 := @parameter0: java.io.Reader;

        r2 := @parameter1: java.io.Writer;

        r0 = newarray (char)[4096];

        l2 = 0L;

     label1:
        $i0 = virtualinvoke r1.<java.io.Reader: int read(char[])>(r0);

        $i4 = (int) -1;

        if $i4 == $i0 goto label2;

        virtualinvoke r2.<java.io.Writer: void write(char[],int,int)>(r0, 0, $i0);

        $l1 = (long) $i0;

        l2 = l2 + $l1;

        goto label1;

     label2:
        return l2;
    }

    public static void copy(java.io.Reader, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r1;
        java.io.OutputStreamWriter $r0;
        java.io.Reader r2;

        r2 := @parameter0: java.io.Reader;

        r1 := @parameter1: java.io.OutputStream;

        $r0 = new java.io.OutputStreamWriter;

        specialinvoke $r0.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>(r1);

        staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.Reader,java.io.Writer)>(r2, $r0);

        virtualinvoke $r0.<java.io.OutputStreamWriter: void flush()>();

        return;
    }

    public static void copy(java.io.Reader, java.io.OutputStream, java.lang.String) throws java.io.IOException
    {
        java.io.OutputStream r2;
        java.io.OutputStreamWriter $r1;
        java.lang.String r0;
        java.io.Reader r3;

        r3 := @parameter0: java.io.Reader;

        r2 := @parameter1: java.io.OutputStream;

        r0 := @parameter2: java.lang.String;

        if r0 != null goto label1;

        staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.Reader,java.io.OutputStream)>(r3, r2);

        goto label2;

     label1:
        $r1 = new java.io.OutputStreamWriter;

        specialinvoke $r1.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>(r2, r0);

        staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.Reader,java.io.Writer)>(r3, $r1);

        virtualinvoke $r1.<java.io.OutputStreamWriter: void flush()>();

     label2:
        return;
    }

    public static boolean contentEquals(java.io.InputStream, java.io.InputStream) throws java.io.IOException
    {
        java.io.BufferedInputStream $r4, $r5;
        int $i0, $i1, i2, $i4, $i6;
        boolean $z0, $z1, $z2;
        java.io.InputStream r2, r3;

        r2 := @parameter0: java.io.InputStream;

        r3 := @parameter1: java.io.InputStream;

        $z0 = r2 instanceof java.io.BufferedInputStream;

        if $z0 != 0 goto label1;

        $r4 = new java.io.BufferedInputStream;

        specialinvoke $r4.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(r2);

        r2 = $r4;

     label1:
        $z1 = r3 instanceof java.io.BufferedInputStream;

        if $z1 != 0 goto label2;

        $r5 = new java.io.BufferedInputStream;

        specialinvoke $r5.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(r3);

        r3 = $r5;

     label2:
        i2 = virtualinvoke r2.<java.io.InputStream: int read()>();

     label3:
        $i4 = (int) -1;

        if $i4 == i2 goto label5;

        $i1 = virtualinvoke r3.<java.io.InputStream: int read()>();

        if i2 == $i1 goto label4;

        return 0;

     label4:
        i2 = virtualinvoke r2.<java.io.InputStream: int read()>();

        goto label3;

     label5:
        $i0 = virtualinvoke r3.<java.io.InputStream: int read()>();

        $i6 = (int) -1;

        if $i0 != $i6 goto label6;

        $z2 = 1;

        goto label7;

     label6:
        $z2 = 0;

     label7:
        return $z2;
    }

    public static boolean contentEquals(java.io.Reader, java.io.Reader) throws java.io.IOException
    {
        java.io.Reader r2, r3;
        int $i0, $i1, i2, $i4, $i6;
        java.io.BufferedReader $r4, $r5;
        boolean $z0, $z1, $z2;

        r2 := @parameter0: java.io.Reader;

        r3 := @parameter1: java.io.Reader;

        $z0 = r2 instanceof java.io.BufferedReader;

        if $z0 != 0 goto label1;

        $r4 = new java.io.BufferedReader;

        specialinvoke $r4.<java.io.BufferedReader: void <init>(java.io.Reader)>(r2);

        r2 = $r4;

     label1:
        $z1 = r3 instanceof java.io.BufferedReader;

        if $z1 != 0 goto label2;

        $r5 = new java.io.BufferedReader;

        specialinvoke $r5.<java.io.BufferedReader: void <init>(java.io.Reader)>(r3);

        r3 = $r5;

     label2:
        i2 = virtualinvoke r2.<java.io.Reader: int read()>();

     label3:
        $i4 = (int) -1;

        if $i4 == i2 goto label5;

        $i1 = virtualinvoke r3.<java.io.Reader: int read()>();

        if i2 == $i1 goto label4;

        return 0;

     label4:
        i2 = virtualinvoke r2.<java.io.Reader: int read()>();

        goto label3;

     label5:
        $i0 = virtualinvoke r3.<java.io.Reader: int read()>();

        $i6 = (int) -1;

        if $i0 != $i6 goto label6;

        $z2 = 1;

        goto label7;

     label6:
        $z2 = 0;

     label7:
        return $z2;
    }

    public static long skip(java.io.InputStream, long) throws java.io.IOException
    {
        byte[] $r0, $r2, $r3;
        long l0, $l2, $l3, l6, l8;
        byte $b1, $b7, $b9;
        int $i4, $i5, $i10, $i11, $i12;
        java.lang.String $r8;
        java.lang.IllegalArgumentException $r10;
        java.lang.StringBuilder $r6, $r7, $r9;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        l0 := @parameter1: long;

        $b1 = l0 cmp 0L;

        $i10 = (int) $b1;

        if $i10 >= 0 goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Skip count must be non-negative, actual: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r10;

     label1:
        $r0 = <org.apache.commons.io.IOUtils: byte[] SKIP_BYTE_BUFFER>;

        if $r0 != null goto label2;

        $r3 = newarray (byte)[2048];

        <org.apache.commons.io.IOUtils: byte[] SKIP_BYTE_BUFFER> = $r3;

     label2:
        l8 = l0;

     label3:
        $b9 = l8 cmp 0L;

        $i11 = (int) $b9;

        if $i11 <= 0 goto label5;

        $r2 = <org.apache.commons.io.IOUtils: byte[] SKIP_BYTE_BUFFER>;

        $l3 = staticinvoke <java.lang.Math: long min(long,long)>(l8, 2048L);

        $i4 = (int) $l3;

        $i5 = virtualinvoke r1.<java.io.InputStream: int read(byte[],int,int)>($r2, 0, $i4);

        l6 = (long) $i5;

        $b7 = l6 cmp 0L;

        $i12 = (int) $b7;

        if $i12 >= 0 goto label4;

        goto label5;

     label4:
        l8 = l8 - l6;

        goto label3;

     label5:
        $l2 = l0 - l8;

        return $l2;
    }

    public static long skip(java.io.Reader, long) throws java.io.IOException
    {
        long l0, $l2, $l3, l6, l8;
        byte $b1, $b7, $b9;
        int $i4, $i5, $i10, $i11, $i12;
        java.lang.String $r8;
        java.io.Reader r1;
        java.lang.IllegalArgumentException $r10;
        char[] $r0, $r2, $r3;
        java.lang.StringBuilder $r6, $r7, $r9;

        r1 := @parameter0: java.io.Reader;

        l0 := @parameter1: long;

        $b1 = l0 cmp 0L;

        $i10 = (int) $b1;

        if $i10 >= 0 goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Skip count must be non-negative, actual: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r10;

     label1:
        $r0 = <org.apache.commons.io.IOUtils: char[] SKIP_CHAR_BUFFER>;

        if $r0 != null goto label2;

        $r3 = newarray (char)[2048];

        <org.apache.commons.io.IOUtils: char[] SKIP_CHAR_BUFFER> = $r3;

     label2:
        l8 = l0;

     label3:
        $b9 = l8 cmp 0L;

        $i11 = (int) $b9;

        if $i11 <= 0 goto label5;

        $r2 = <org.apache.commons.io.IOUtils: char[] SKIP_CHAR_BUFFER>;

        $l3 = staticinvoke <java.lang.Math: long min(long,long)>(l8, 2048L);

        $i4 = (int) $l3;

        $i5 = virtualinvoke r1.<java.io.Reader: int read(char[],int,int)>($r2, 0, $i4);

        l6 = (long) $i5;

        $b7 = l6 cmp 0L;

        $i12 = (int) $b7;

        if $i12 >= 0 goto label4;

        goto label5;

     label4:
        l8 = l8 - l6;

        goto label3;

     label5:
        $l2 = l0 - l8;

        return $l2;
    }

    public static void skipFully(java.io.InputStream, long) throws java.io.IOException
    {
        long l0, $l2;
        byte $b1, $b3;
        int $i4;
        java.lang.String $r7, $r12;
        java.lang.IllegalArgumentException $r14;
        java.io.EOFException $r16;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r10, $r11, $r13, $r15;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        l0 := @parameter1: long;

        $b1 = l0 cmp 0L;

        $i4 = (int) $b1;

        if $i4 >= 0 goto label1;

        $r14 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bytes to skip must not be negative: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r14;

     label1:
        $l2 = staticinvoke <org.apache.commons.io.IOUtils: long skip(java.io.InputStream,long)>(r0, l0);

        $b3 = $l2 cmp l0;

        if $b3 == 0 goto label2;

        $r16 = new java.io.EOFException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bytes to skip: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" actual: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.io.EOFException: void <init>(java.lang.String)>($r7);

        throw $r16;

     label2:
        return;
    }

    public static void skipFully(java.io.Reader, long) throws java.io.IOException
    {
        long l0, $l1;
        java.io.Reader r0;
        java.io.EOFException $r1;
        byte $b2;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @parameter0: java.io.Reader;

        l0 := @parameter1: long;

        $l1 = staticinvoke <org.apache.commons.io.IOUtils: long skip(java.io.Reader,long)>(r0, l0);

        $b2 = $l1 cmp l0;

        if $b2 == 0 goto label1;

        $r1 = new java.io.EOFException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bytes to skip: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" actual: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.EOFException: void <init>(java.lang.String)>($r7);

        throw $r1;

     label1:
        return;
    }

    static void <clinit>()
    {
        java.io.PrintWriter $r1;
        org.apache.commons.io.output.StringBuilderWriter $r0;
        char $c0;
        java.lang.String $r2;

        <org.apache.commons.io.IOUtils: int SKIP_BUFFER_SIZE> = 2048;

        <org.apache.commons.io.IOUtils: int DEFAULT_BUFFER_SIZE> = 4096;

        <org.apache.commons.io.IOUtils: java.lang.String LINE_SEPARATOR_WINDOWS> = "\r\n";

        <org.apache.commons.io.IOUtils: java.lang.String LINE_SEPARATOR_UNIX> = "\n";

        <org.apache.commons.io.IOUtils: char DIR_SEPARATOR_WINDOWS> = 92;

        <org.apache.commons.io.IOUtils: char DIR_SEPARATOR_UNIX> = 47;

        $c0 = <java.io.File: char separatorChar>;

        <org.apache.commons.io.IOUtils: char DIR_SEPARATOR> = $c0;

        $r0 = new org.apache.commons.io.output.StringBuilderWriter;

        specialinvoke $r0.<org.apache.commons.io.output.StringBuilderWriter: void <init>(int)>(4);

        $r1 = new java.io.PrintWriter;

        specialinvoke $r1.<java.io.PrintWriter: void <init>(java.io.Writer)>($r0);

        virtualinvoke $r1.<java.io.PrintWriter: void println()>();

        $r2 = virtualinvoke $r0.<org.apache.commons.io.output.StringBuilderWriter: java.lang.String toString()>();

        <org.apache.commons.io.IOUtils: java.lang.String LINE_SEPARATOR> = $r2;

        virtualinvoke $r1.<java.io.PrintWriter: void close()>();

        return;
    }
}
