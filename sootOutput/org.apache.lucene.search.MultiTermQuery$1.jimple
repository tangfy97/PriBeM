final class org.apache.lucene.search.MultiTermQuery$1 extends org.apache.lucene.search.MultiTermQuery$RewriteMethod
{

    void <init>()
    {
        org.apache.lucene.search.MultiTermQuery$1 r0;

        r0 := @this: org.apache.lucene.search.MultiTermQuery$1;

        specialinvoke r0.<org.apache.lucene.search.MultiTermQuery$RewriteMethod: void <init>()>();

        return;
    }

    public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)
    {
        org.apache.lucene.search.MultiTermQuery r2;
        org.apache.lucene.search.MultiTermQueryWrapperFilter $r1;
        org.apache.lucene.search.ConstantScoreQuery $r0;
        org.apache.lucene.search.MultiTermQuery$1 r3;
        float $f0;
        org.apache.lucene.index.IndexReader r4;

        r3 := @this: org.apache.lucene.search.MultiTermQuery$1;

        r4 := @parameter0: org.apache.lucene.index.IndexReader;

        r2 := @parameter1: org.apache.lucene.search.MultiTermQuery;

        $r0 = new org.apache.lucene.search.ConstantScoreQuery;

        $r1 = new org.apache.lucene.search.MultiTermQueryWrapperFilter;

        specialinvoke $r1.<org.apache.lucene.search.MultiTermQueryWrapperFilter: void <init>(org.apache.lucene.search.MultiTermQuery)>(r2);

        specialinvoke $r0.<org.apache.lucene.search.ConstantScoreQuery: void <init>(org.apache.lucene.search.Filter)>($r1);

        $f0 = virtualinvoke r2.<org.apache.lucene.search.MultiTermQuery: float getBoost()>();

        virtualinvoke $r0.<org.apache.lucene.search.Query: void setBoost(float)>($f0);

        return $r0;
    }
}
