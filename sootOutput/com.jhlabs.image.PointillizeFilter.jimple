public class com.jhlabs.image.PointillizeFilter extends com.jhlabs.image.CellularFilter
{
    private float edgeThickness;
    private boolean fadeEdges;
    private int edgeColor;
    private float fuzziness;

    public void <init>()
    {
        com.jhlabs.image.PointillizeFilter r0;

        r0 := @this: com.jhlabs.image.PointillizeFilter;

        specialinvoke r0.<com.jhlabs.image.CellularFilter: void <init>()>();

        r0.<com.jhlabs.image.PointillizeFilter: float edgeThickness> = 0.4F;

        r0.<com.jhlabs.image.PointillizeFilter: boolean fadeEdges> = 0;

        r0.<com.jhlabs.image.PointillizeFilter: int edgeColor> = -16777216;

        r0.<com.jhlabs.image.PointillizeFilter: float fuzziness> = 0.1F;

        virtualinvoke r0.<com.jhlabs.image.CellularFilter: void setScale(float)>(16.0F);

        virtualinvoke r0.<com.jhlabs.image.CellularFilter: void setRandomness(float)>(0.0F);

        return;
    }

    public void setEdgeThickness(float)
    {
        float f0;
        com.jhlabs.image.PointillizeFilter r0;

        r0 := @this: com.jhlabs.image.PointillizeFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.PointillizeFilter: float edgeThickness> = f0;

        return;
    }

    public float getEdgeThickness()
    {
        float $f0;
        com.jhlabs.image.PointillizeFilter r0;

        r0 := @this: com.jhlabs.image.PointillizeFilter;

        $f0 = r0.<com.jhlabs.image.PointillizeFilter: float edgeThickness>;

        return $f0;
    }

    public void setFadeEdges(boolean)
    {
        com.jhlabs.image.PointillizeFilter r0;
        boolean z0;

        r0 := @this: com.jhlabs.image.PointillizeFilter;

        z0 := @parameter0: boolean;

        r0.<com.jhlabs.image.PointillizeFilter: boolean fadeEdges> = z0;

        return;
    }

    public boolean getFadeEdges()
    {
        com.jhlabs.image.PointillizeFilter r0;
        boolean $z0;

        r0 := @this: com.jhlabs.image.PointillizeFilter;

        $z0 = r0.<com.jhlabs.image.PointillizeFilter: boolean fadeEdges>;

        return $z0;
    }

    public void setEdgeColor(int)
    {
        int i0;
        com.jhlabs.image.PointillizeFilter r0;

        r0 := @this: com.jhlabs.image.PointillizeFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.PointillizeFilter: int edgeColor> = i0;

        return;
    }

    public int getEdgeColor()
    {
        int $i0;
        com.jhlabs.image.PointillizeFilter r0;

        r0 := @this: com.jhlabs.image.PointillizeFilter;

        $i0 = r0.<com.jhlabs.image.PointillizeFilter: int edgeColor>;

        return $i0;
    }

    public void setFuzziness(float)
    {
        float f0;
        com.jhlabs.image.PointillizeFilter r0;

        r0 := @this: com.jhlabs.image.PointillizeFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.PointillizeFilter: float fuzziness> = f0;

        return;
    }

    public float getFuzziness()
    {
        float $f0;
        com.jhlabs.image.PointillizeFilter r0;

        r0 := @this: com.jhlabs.image.PointillizeFilter;

        $f0 = r0.<com.jhlabs.image.PointillizeFilter: float fuzziness>;

        return $f0;
    }

    public int getPixel(int, int, int[], int, int)
    {
        com.jhlabs.image.PointillizeFilter r0;
        com.jhlabs.image.CellularFilter$Point $r2, $r4, $r6, $r9, $r11, $r13;
        int[] r7;
        boolean $z0;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, f30, $f31, $f32, $f33, $f34, $f35, $f36, $f37, $f38, $f39, $f40, f41, f42, f43, f44, f45, f46, f47;
        int i0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, i21, i22, i23;
        com.jhlabs.image.CellularFilter$Point[] $r1, $r3, $r5, $r8, $r10, $r12;

        r0 := @this: com.jhlabs.image.PointillizeFilter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r7 := @parameter2: int[];

        i2 := @parameter3: int;

        i6 := @parameter4: int;

        $f1 = r0.<com.jhlabs.image.CellularFilter: float m00>;

        $f0 = (float) i0;

        $f5 = $f1 * $f0;

        $f3 = r0.<com.jhlabs.image.CellularFilter: float m01>;

        $f2 = (float) i1;

        $f4 = $f3 * $f2;

        f41 = $f5 + $f4;

        $f7 = r0.<com.jhlabs.image.CellularFilter: float m10>;

        $f6 = (float) i0;

        $f11 = $f7 * $f6;

        $f9 = r0.<com.jhlabs.image.CellularFilter: float m11>;

        $f8 = (float) i1;

        $f10 = $f9 * $f8;

        f42 = $f11 + $f10;

        $f12 = r0.<com.jhlabs.image.CellularFilter: float scale>;

        f43 = f41 / $f12;

        $f14 = r0.<com.jhlabs.image.CellularFilter: float scale>;

        $f13 = r0.<com.jhlabs.image.CellularFilter: float stretch>;

        $f15 = $f14 * $f13;

        f44 = f42 / $f15;

        f45 = f43 + 1000.0F;

        f46 = f44 + 1000.0F;

        virtualinvoke r0.<com.jhlabs.image.CellularFilter: float evaluate(float,float)>(f45, f46);

        $r1 = r0.<com.jhlabs.image.CellularFilter: com.jhlabs.image.CellularFilter$Point[] results>;

        $r2 = $r1[0];

        f16 = $r2.<com.jhlabs.image.CellularFilter$Point: float distance>;

        $r3 = r0.<com.jhlabs.image.CellularFilter: com.jhlabs.image.CellularFilter$Point[] results>;

        $r4 = $r3[0];

        $f17 = $r4.<com.jhlabs.image.CellularFilter$Point: float x>;

        $f19 = $f17 - 1000.0F;

        $f18 = r0.<com.jhlabs.image.CellularFilter: float scale>;

        $f20 = $f19 * $f18;

        $i4 = (int) $f20;

        $i3 = i2 - 1;

        $i5 = staticinvoke <com.jhlabs.image.ImageMath: int clamp(int,int,int)>($i4, 0, $i3);

        $r5 = r0.<com.jhlabs.image.CellularFilter: com.jhlabs.image.CellularFilter$Point[] results>;

        $r6 = $r5[0];

        $f21 = $r6.<com.jhlabs.image.CellularFilter$Point: float y>;

        $f23 = $f21 - 1000.0F;

        $f22 = r0.<com.jhlabs.image.CellularFilter: float scale>;

        $f24 = $f23 * $f22;

        $i8 = (int) $f24;

        $i7 = i6 - 1;

        $i9 = staticinvoke <com.jhlabs.image.ImageMath: int clamp(int,int,int)>($i8, 0, $i7);

        $i10 = $i9 * i2;

        $i11 = $i10 + $i5;

        i22 = r7[$i11];

        $z0 = r0.<com.jhlabs.image.PointillizeFilter: boolean fadeEdges>;

        if $z0 == 0 goto label1;

        $r8 = r0.<com.jhlabs.image.CellularFilter: com.jhlabs.image.CellularFilter$Point[] results>;

        $r9 = $r8[1];

        f30 = $r9.<com.jhlabs.image.CellularFilter$Point: float distance>;

        $r10 = r0.<com.jhlabs.image.CellularFilter: com.jhlabs.image.CellularFilter$Point[] results>;

        $r11 = $r10[1];

        $f31 = $r11.<com.jhlabs.image.CellularFilter$Point: float x>;

        $f33 = $f31 - 1000.0F;

        $f32 = r0.<com.jhlabs.image.CellularFilter: float scale>;

        $f34 = $f33 * $f32;

        $i14 = (int) $f34;

        $i13 = i2 - 1;

        $i15 = staticinvoke <com.jhlabs.image.ImageMath: int clamp(int,int,int)>($i14, 0, $i13);

        $r12 = r0.<com.jhlabs.image.CellularFilter: com.jhlabs.image.CellularFilter$Point[] results>;

        $r13 = $r12[1];

        $f35 = $r13.<com.jhlabs.image.CellularFilter$Point: float y>;

        $f37 = $f35 - 1000.0F;

        $f36 = r0.<com.jhlabs.image.CellularFilter: float scale>;

        $f38 = $f37 * $f36;

        $i17 = (int) $f38;

        $i16 = i6 - 1;

        $i18 = staticinvoke <com.jhlabs.image.ImageMath: int clamp(int,int,int)>($i17, 0, $i16);

        $i19 = $i18 * i2;

        $i20 = $i19 + $i15;

        i21 = r7[$i20];

        $f39 = 0.5F * f16;

        $f40 = $f39 / f30;

        i23 = staticinvoke <com.jhlabs.image.ImageMath: int mixColors(float,int,int)>($f40, i22, i21);

        goto label2;

     label1:
        $f28 = r0.<com.jhlabs.image.PointillizeFilter: float edgeThickness>;

        $f26 = r0.<com.jhlabs.image.PointillizeFilter: float edgeThickness>;

        $f25 = r0.<com.jhlabs.image.PointillizeFilter: float fuzziness>;

        $f27 = $f26 + $f25;

        $f29 = staticinvoke <com.jhlabs.image.ImageMath: float smoothStep(float,float,float)>($f28, $f27, f16);

        f47 = 1.0F - $f29;

        $i12 = r0.<com.jhlabs.image.PointillizeFilter: int edgeColor>;

        i23 = staticinvoke <com.jhlabs.image.ImageMath: int mixColors(float,int,int)>(f47, $i12, i22);

     label2:
        return i23;
    }

    public java.lang.String toString()
    {
        com.jhlabs.image.PointillizeFilter r0;

        r0 := @this: com.jhlabs.image.PointillizeFilter;

        return "Stylize/Pointillize...";
    }
}
