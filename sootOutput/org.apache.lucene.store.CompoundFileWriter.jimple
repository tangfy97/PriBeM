final class org.apache.lucene.store.CompoundFileWriter extends java.lang.Object implements java.io.Closeable
{
    static final int FORMAT_PRE_VERSION;
    static final int FORMAT_NO_SEGMENT_PREFIX;
    static final java.lang.String DATA_CODEC;
    static final int VERSION_START;
    static final int VERSION_CURRENT;
    static final java.lang.String ENTRY_CODEC;
    private final org.apache.lucene.store.Directory directory;
    private final java.util.Map entries;
    private final java.util.Set seenIDs;
    private final java.util.Queue pendingEntries;
    private boolean closed;
    private org.apache.lucene.store.IndexOutput dataOut;
    private final java.util.concurrent.atomic.AtomicBoolean outputTaken;
    final java.lang.String entryTableName;
    final java.lang.String dataFileName;
    static final boolean $assertionsDisabled;

    void <init>(org.apache.lucene.store.Directory, java.lang.String)
    {
        java.util.concurrent.atomic.AtomicBoolean $r4;
        java.util.HashMap $r1;
        java.lang.NullPointerException $r9, $r10;
        java.util.HashSet $r2;
        org.apache.lucene.store.Directory r5;
        org.apache.lucene.store.CompoundFileWriter r0;
        java.lang.String r6, $r7, $r8;
        java.util.LinkedList $r3;

        r0 := @this: org.apache.lucene.store.CompoundFileWriter;

        r5 := @parameter0: org.apache.lucene.store.Directory;

        r6 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.lucene.store.CompoundFileWriter: java.util.Map entries> = $r1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<org.apache.lucene.store.CompoundFileWriter: java.util.Set seenIDs> = $r2;

        $r3 = new java.util.LinkedList;

        specialinvoke $r3.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.lucene.store.CompoundFileWriter: java.util.Queue pendingEntries> = $r3;

        r0.<org.apache.lucene.store.CompoundFileWriter: boolean closed> = 0;

        $r4 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<org.apache.lucene.store.CompoundFileWriter: java.util.concurrent.atomic.AtomicBoolean outputTaken> = $r4;

        if r5 != null goto label1;

        $r10 = new java.lang.NullPointerException;

        specialinvoke $r10.<java.lang.NullPointerException: void <init>(java.lang.String)>("directory cannot be null");

        throw $r10;

     label1:
        if r6 != null goto label2;

        $r9 = new java.lang.NullPointerException;

        specialinvoke $r9.<java.lang.NullPointerException: void <init>(java.lang.String)>("name cannot be null");

        throw $r9;

     label2:
        r0.<org.apache.lucene.store.CompoundFileWriter: org.apache.lucene.store.Directory directory> = r5;

        $r7 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String stripExtension(java.lang.String)>(r6);

        $r8 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String segmentFileName(java.lang.String,java.lang.String,java.lang.String)>($r7, "", "cfe");

        r0.<org.apache.lucene.store.CompoundFileWriter: java.lang.String entryTableName> = $r8;

        r0.<org.apache.lucene.store.CompoundFileWriter: java.lang.String dataFileName> = r6;

        return;
    }

    private synchronized org.apache.lucene.store.IndexOutput getOutput() throws java.io.IOException
    {
        java.lang.Throwable $r9;
        org.apache.lucene.store.Directory $r4;
        java.io.Closeable[] $r7, $r10;
        org.apache.lucene.store.CompoundFileWriter r0;
        java.lang.String $r3;
        org.apache.lucene.store.IOContext $r2;
        org.apache.lucene.store.IndexOutput $r1, $r5, $r6, $r8, $r11, $r12;

        r0 := @this: org.apache.lucene.store.CompoundFileWriter;

        $r1 = r0.<org.apache.lucene.store.CompoundFileWriter: org.apache.lucene.store.IndexOutput dataOut>;

        if $r1 != null goto label6;

     label1:
        $r4 = r0.<org.apache.lucene.store.CompoundFileWriter: org.apache.lucene.store.Directory directory>;

        $r3 = r0.<org.apache.lucene.store.CompoundFileWriter: java.lang.String dataFileName>;

        $r2 = <org.apache.lucene.store.IOContext: org.apache.lucene.store.IOContext DEFAULT>;

        $r5 = virtualinvoke $r4.<org.apache.lucene.store.Directory: org.apache.lucene.store.IndexOutput createOutput(java.lang.String,org.apache.lucene.store.IOContext)>($r3, $r2);

        r0.<org.apache.lucene.store.CompoundFileWriter: org.apache.lucene.store.IndexOutput dataOut> = $r5;

        $r6 = r0.<org.apache.lucene.store.CompoundFileWriter: org.apache.lucene.store.IndexOutput dataOut>;

        staticinvoke <org.apache.lucene.codecs.CodecUtil: void writeHeader(org.apache.lucene.store.DataOutput,java.lang.String,int)>($r6, "CompoundFileWriterData", 0);

     label2:
        if 1 != 0 goto label6;

        $r7 = newarray (java.io.Closeable)[1];

        $r8 = r0.<org.apache.lucene.store.CompoundFileWriter: org.apache.lucene.store.IndexOutput dataOut>;

        $r7[0] = $r8;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.io.Closeable[])>($r7);

        goto label6;

     label3:
        $r9 := @caughtexception;

     label4:
        if 0 != 0 goto label5;

        $r10 = newarray (java.io.Closeable)[1];

        $r11 = r0.<org.apache.lucene.store.CompoundFileWriter: org.apache.lucene.store.IndexOutput dataOut>;

        $r10[0] = $r11;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.io.Closeable[])>($r10);

     label5:
        throw $r9;

     label6:
        $r12 = r0.<org.apache.lucene.store.CompoundFileWriter: org.apache.lucene.store.IndexOutput dataOut>;

        return $r12;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    org.apache.lucene.store.Directory getDirectory()
    {
        org.apache.lucene.store.CompoundFileWriter r0;
        org.apache.lucene.store.Directory $r1;

        r0 := @this: org.apache.lucene.store.CompoundFileWriter;

        $r1 = r0.<org.apache.lucene.store.CompoundFileWriter: org.apache.lucene.store.Directory directory>;

        return $r1;
    }

    java.lang.String getName()
    {
        org.apache.lucene.store.CompoundFileWriter r0;
        java.lang.String $r1;

        r0 := @this: org.apache.lucene.store.CompoundFileWriter;

        $r1 = r0.<org.apache.lucene.store.CompoundFileWriter: java.lang.String dataFileName>;

        return $r1;
    }

    public void close() throws java.io.IOException
    {
        java.lang.Throwable $r15, $r19;
        java.lang.IllegalStateException $r2;
        java.util.concurrent.atomic.AtomicBoolean $r3;
        java.lang.AssertionError $r14;
        org.apache.lucene.store.Directory $r8;
        java.util.Map $r10;
        java.io.Closeable[] $r4, $r12, $r16, $r18, $r20, $r23;
        java.lang.String $r7;
        org.apache.lucene.store.IOContext $r6;
        org.apache.lucene.store.IndexOutput $r5, $r9, $r13, $r21, $r24, r26;
        boolean $z0, $z1, $z2, $z3;
        java.util.Collection $r11;
        java.io.IOException $r17, $r22, r25;
        org.apache.lucene.store.CompoundFileWriter r0;
        java.util.Queue $r1;

        r0 := @this: org.apache.lucene.store.CompoundFileWriter;

        $z0 = r0.<org.apache.lucene.store.CompoundFileWriter: boolean closed>;

        if $z0 == 0 goto label01;

        return;

     label01:
        r25 = null;

        r26 = null;

     label02:
        $r1 = r0.<org.apache.lucene.store.CompoundFileWriter: java.util.Queue pendingEntries>;

        $z1 = interfaceinvoke $r1.<java.util.Queue: boolean isEmpty()>();

        if $z1 == 0 goto label03;

        $r3 = r0.<org.apache.lucene.store.CompoundFileWriter: java.util.concurrent.atomic.AtomicBoolean outputTaken>;

        $z2 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z2 == 0 goto label04;

     label03:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("CFS has pending open files");

        throw $r2;

     label04:
        r0.<org.apache.lucene.store.CompoundFileWriter: boolean closed> = 1;

        specialinvoke r0.<org.apache.lucene.store.CompoundFileWriter: org.apache.lucene.store.IndexOutput getOutput()>();

        $z3 = <org.apache.lucene.store.CompoundFileWriter: boolean $assertionsDisabled>;

        if $z3 != 0 goto label05;

        $r13 = r0.<org.apache.lucene.store.CompoundFileWriter: org.apache.lucene.store.IndexOutput dataOut>;

        if $r13 != null goto label05;

        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();

        throw $r14;

     label05:
        $r4 = newarray (java.io.Closeable)[1];

        $r5 = r0.<org.apache.lucene.store.CompoundFileWriter: org.apache.lucene.store.IndexOutput dataOut>;

        $r4[0] = $r5;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.lang.Exception,java.io.Closeable[])>(null, $r4);

        goto label10;

     label06:
        $r22 := @caughtexception;

        r25 = $r22;

     label07:
        $r23 = newarray (java.io.Closeable)[1];

        $r24 = r0.<org.apache.lucene.store.CompoundFileWriter: org.apache.lucene.store.IndexOutput dataOut>;

        $r23[0] = $r24;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.lang.Exception,java.io.Closeable[])>($r22, $r23);

        goto label10;

     label08:
        $r19 := @caughtexception;

     label09:
        $r20 = newarray (java.io.Closeable)[1];

        $r21 = r0.<org.apache.lucene.store.CompoundFileWriter: org.apache.lucene.store.IndexOutput dataOut>;

        $r20[0] = $r21;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.lang.Exception,java.io.Closeable[])>(null, $r20);

        throw $r19;

     label10:
        $r8 = r0.<org.apache.lucene.store.CompoundFileWriter: org.apache.lucene.store.Directory directory>;

        $r7 = r0.<org.apache.lucene.store.CompoundFileWriter: java.lang.String entryTableName>;

        $r6 = <org.apache.lucene.store.IOContext: org.apache.lucene.store.IOContext DEFAULT>;

        $r9 = virtualinvoke $r8.<org.apache.lucene.store.Directory: org.apache.lucene.store.IndexOutput createOutput(java.lang.String,org.apache.lucene.store.IOContext)>($r7, $r6);

        r26 = $r9;

        $r10 = r0.<org.apache.lucene.store.CompoundFileWriter: java.util.Map entries>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.util.Collection values()>();

        virtualinvoke r0.<org.apache.lucene.store.CompoundFileWriter: void writeEntryTable(java.util.Collection,org.apache.lucene.store.IndexOutput)>($r11, $r9);

     label11:
        $r12 = newarray (java.io.Closeable)[1];

        $r12[0] = $r9;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.lang.Exception,java.io.Closeable[])>(r25, $r12);

        goto label16;

     label12:
        $r17 := @caughtexception;

     label13:
        $r18 = newarray (java.io.Closeable)[1];

        $r18[0] = r26;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.lang.Exception,java.io.Closeable[])>($r17, $r18);

        goto label16;

     label14:
        $r15 := @caughtexception;

     label15:
        $r16 = newarray (java.io.Closeable)[1];

        $r16[0] = r26;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.lang.Exception,java.io.Closeable[])>(r25, $r16);

        throw $r15;

     label16:
        return;

        catch java.io.IOException from label02 to label05 with label06;
        catch java.lang.Throwable from label02 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    private final void ensureOpen()
    {
        org.apache.lucene.store.AlreadyClosedException $r1;
        org.apache.lucene.store.CompoundFileWriter r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.store.CompoundFileWriter;

        $z0 = r0.<org.apache.lucene.store.CompoundFileWriter: boolean closed>;

        if $z0 == 0 goto label1;

        $r1 = new org.apache.lucene.store.AlreadyClosedException;

        specialinvoke $r1.<org.apache.lucene.store.AlreadyClosedException: void <init>(java.lang.String)>("CFS Directory is already closed");

        throw $r1;

     label1:
        return;
    }

    private final long copyFileEntry(org.apache.lucene.store.IndexOutput, org.apache.lucene.store.CompoundFileWriter$FileEntry) throws java.io.IOException
    {
        java.lang.Throwable $r17;
        long $l0, l1, $l2, l3;
        byte $b4;
        org.apache.lucene.store.Directory $r3, $r9, $r21;
        java.io.Closeable[] $r6, $r7, $r18, $r19;
        java.lang.String $r2, $r8, $r16, $r20;
        org.apache.lucene.store.IOContext $r1;
        org.apache.lucene.store.IndexOutput r5;
        boolean z0;
        org.apache.lucene.store.IndexInput $r4;
        java.io.IOException $r10;
        org.apache.lucene.store.CompoundFileWriter$FileEntry r0;
        java.lang.StringBuilder $r11, $r12, $r13, $r14, $r15;
        org.apache.lucene.store.CompoundFileWriter r22;

        r22 := @this: org.apache.lucene.store.CompoundFileWriter;

        r5 := @parameter0: org.apache.lucene.store.IndexOutput;

        r0 := @parameter1: org.apache.lucene.store.CompoundFileWriter$FileEntry;

        $r3 = r0.<org.apache.lucene.store.CompoundFileWriter$FileEntry: org.apache.lucene.store.Directory dir>;

        $r2 = r0.<org.apache.lucene.store.CompoundFileWriter$FileEntry: java.lang.String file>;

        $r1 = <org.apache.lucene.store.IOContext: org.apache.lucene.store.IOContext READONCE>;

        $r4 = virtualinvoke $r3.<org.apache.lucene.store.Directory: org.apache.lucene.store.IndexInput openInput(java.lang.String,org.apache.lucene.store.IOContext)>($r2, $r1);

        z0 = 0;

     label1:
        $l0 = virtualinvoke r5.<org.apache.lucene.store.IndexOutput: long getFilePointer()>();

        l1 = r0.<org.apache.lucene.store.CompoundFileWriter$FileEntry: long length>;

        virtualinvoke r5.<org.apache.lucene.store.IndexOutput: void copyBytes(org.apache.lucene.store.DataInput,long)>($r4, l1);

        $l2 = virtualinvoke r5.<org.apache.lucene.store.IndexOutput: long getFilePointer()>();

        l3 = $l2 - $l0;

        $b4 = l3 cmp l1;

        if $b4 == 0 goto label2;

        $r10 = new java.io.IOException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Difference in the output file offsets ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l3);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not match the original file length ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>($r16);

        throw $r10;

     label2:
        r0.<org.apache.lucene.store.CompoundFileWriter$FileEntry: long offset> = $l0;

        z0 = 1;

     label3:
        if 1 == 0 goto label4;

        $r7 = newarray (java.io.Closeable)[1];

        $r7[0] = $r4;

        staticinvoke <org.apache.lucene.util.IOUtils: void close(java.io.Closeable[])>($r7);

        $r9 = r0.<org.apache.lucene.store.CompoundFileWriter$FileEntry: org.apache.lucene.store.Directory dir>;

        $r8 = r0.<org.apache.lucene.store.CompoundFileWriter$FileEntry: java.lang.String file>;

        virtualinvoke $r9.<org.apache.lucene.store.Directory: void deleteFile(java.lang.String)>($r8);

        goto label5;

     label4:
        $r6 = newarray (java.io.Closeable)[1];

        $r6[0] = $r4;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.io.Closeable[])>($r6);

     label5:
        return l1;

     label6:
        $r17 := @caughtexception;

     label7:
        if 0 == 0 goto label8;

        $r19 = newarray (java.io.Closeable)[1];

        $r19[0] = $r4;

        staticinvoke <org.apache.lucene.util.IOUtils: void close(java.io.Closeable[])>($r19);

        $r21 = r0.<org.apache.lucene.store.CompoundFileWriter$FileEntry: org.apache.lucene.store.Directory dir>;

        $r20 = r0.<org.apache.lucene.store.CompoundFileWriter$FileEntry: java.lang.String file>;

        virtualinvoke $r21.<org.apache.lucene.store.Directory: void deleteFile(java.lang.String)>($r20);

        goto label9;

     label8:
        $r18 = newarray (java.io.Closeable)[1];

        $r18[0] = $r4;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.io.Closeable[])>($r18);

     label9:
        throw $r17;

        catch java.lang.Throwable from label1 to label3 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    protected void writeEntryTable(java.util.Collection, org.apache.lucene.store.IndexOutput) throws java.io.IOException
    {
        java.util.Iterator $r2;
        java.util.Collection r1;
        long $l1, $l2;
        int $i0;
        org.apache.lucene.store.CompoundFileWriter$FileEntry r4;
        java.lang.Object $r3;
        org.apache.lucene.store.CompoundFileWriter r7;
        java.lang.String $r5, $r6;
        org.apache.lucene.store.IndexOutput r0;
        boolean $z0;

        r7 := @this: org.apache.lucene.store.CompoundFileWriter;

        r1 := @parameter0: java.util.Collection;

        r0 := @parameter1: org.apache.lucene.store.IndexOutput;

        staticinvoke <org.apache.lucene.codecs.CodecUtil: void writeHeader(org.apache.lucene.store.DataOutput,java.lang.String,int)>(r0, "CompoundFileWriterEntries", 0);

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        virtualinvoke r0.<org.apache.lucene.store.IndexOutput: void writeVInt(int)>($i0);

        $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.lucene.store.CompoundFileWriter$FileEntry) $r3;

        $r5 = r4.<org.apache.lucene.store.CompoundFileWriter$FileEntry: java.lang.String file>;

        $r6 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String stripSegmentName(java.lang.String)>($r5);

        virtualinvoke r0.<org.apache.lucene.store.IndexOutput: void writeString(java.lang.String)>($r6);

        $l1 = r4.<org.apache.lucene.store.CompoundFileWriter$FileEntry: long offset>;

        virtualinvoke r0.<org.apache.lucene.store.IndexOutput: void writeLong(long)>($l1);

        $l2 = r4.<org.apache.lucene.store.CompoundFileWriter$FileEntry: long length>;

        virtualinvoke r0.<org.apache.lucene.store.IndexOutput: void writeLong(long)>($l2);

        goto label1;

     label2:
        return;
    }

    org.apache.lucene.store.IndexOutput createOutput(java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException
    {
        java.util.Map $r2, $r4, $r15, $r43;
        org.apache.lucene.store.Directory $r8, $r9, $r12;
        org.apache.lucene.store.IOContext r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, z10, z11;
        org.apache.lucene.store.CompoundFileWriter$DirectCFSIndexOutput $r10, r14, $r24, r46;
        java.util.Set $r6, $r26;
        org.apache.lucene.store.CompoundFileWriter$FileEntry $r3;
        java.lang.StringBuilder $r19, $r20, $r21, $r22, $r28, $r29, $r30, $r31, $r32, $r33, $r36, $r37, $r38, $r39;
        java.lang.Throwable $r42;
        java.util.concurrent.atomic.AtomicBoolean $r7, $r16, $r44;
        java.lang.AssertionError $r17, $r27, $r41, $r45;
        java.lang.String r1, $r5, $r23, $r34, $r40;
        org.apache.lucene.store.IndexOutput $r13, $r25;
        java.lang.IllegalArgumentException $r18, $r35;
        org.apache.lucene.store.CompoundFileWriter r0;

        r0 := @this: org.apache.lucene.store.CompoundFileWriter;

        r1 := @parameter0: java.lang.String;

        r11 := @parameter1: org.apache.lucene.store.IOContext;

        specialinvoke r0.<org.apache.lucene.store.CompoundFileWriter: void ensureOpen()>();

        z10 = 0;

        z11 = 0;

     label01:
        $z0 = <org.apache.lucene.store.CompoundFileWriter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label02;

        if r1 != null goto label02;

        $r41 = new java.lang.AssertionError;

        specialinvoke $r41.<java.lang.AssertionError: void <init>(java.lang.Object)>("name must not be null");

        throw $r41;

     label02:
        $r2 = r0.<org.apache.lucene.store.CompoundFileWriter: java.util.Map entries>;

        $z1 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z1 == 0 goto label03;

        $r35 = new java.lang.IllegalArgumentException;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File ");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" already exists");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r35.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r40);

        throw $r35;

     label03:
        $r3 = new org.apache.lucene.store.CompoundFileWriter$FileEntry;

        specialinvoke $r3.<org.apache.lucene.store.CompoundFileWriter$FileEntry: void <init>(org.apache.lucene.store.CompoundFileWriter$1)>(null);

        $r3.<org.apache.lucene.store.CompoundFileWriter$FileEntry: java.lang.String file> = r1;

        $r4 = r0.<org.apache.lucene.store.CompoundFileWriter: java.util.Map entries>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3);

        $r5 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String stripSegmentName(java.lang.String)>(r1);

        $z2 = <org.apache.lucene.store.CompoundFileWriter: boolean $assertionsDisabled>;

        if $z2 != 0 goto label04;

        $r26 = r0.<org.apache.lucene.store.CompoundFileWriter: java.util.Set seenIDs>;

        $z7 = interfaceinvoke $r26.<java.util.Set: boolean contains(java.lang.Object)>($r5);

        if $z7 == 0 goto label04;

        $r27 = new java.lang.AssertionError;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file=\"");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" maps to id=\"");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\", which was already written");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.lang.AssertionError: void <init>(java.lang.Object)>($r34);

        throw $r27;

     label04:
        $r6 = r0.<org.apache.lucene.store.CompoundFileWriter: java.util.Set seenIDs>;

        interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>($r5);

        $r7 = r0.<org.apache.lucene.store.CompoundFileWriter: java.util.concurrent.atomic.AtomicBoolean outputTaken>;

        $z3 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);

        z11 = $z3;

        if $z3 == 0 goto label05;

        $r24 = new org.apache.lucene.store.CompoundFileWriter$DirectCFSIndexOutput;

        $r25 = specialinvoke r0.<org.apache.lucene.store.CompoundFileWriter: org.apache.lucene.store.IndexOutput getOutput()>();

        specialinvoke $r24.<org.apache.lucene.store.CompoundFileWriter$DirectCFSIndexOutput: void <init>(org.apache.lucene.store.CompoundFileWriter,org.apache.lucene.store.IndexOutput,org.apache.lucene.store.CompoundFileWriter$FileEntry,boolean)>(r0, $r25, $r3, 0);

        r46 = $r24;

        goto label07;

     label05:
        $r8 = r0.<org.apache.lucene.store.CompoundFileWriter: org.apache.lucene.store.Directory directory>;

        $r3.<org.apache.lucene.store.CompoundFileWriter$FileEntry: org.apache.lucene.store.Directory dir> = $r8;

        $r9 = r0.<org.apache.lucene.store.CompoundFileWriter: org.apache.lucene.store.Directory directory>;

        $z4 = virtualinvoke $r9.<org.apache.lucene.store.Directory: boolean fileExists(java.lang.String)>(r1);

        if $z4 == 0 goto label06;

        $r18 = new java.lang.IllegalArgumentException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" already exists");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r23);

        throw $r18;

     label06:
        $r10 = new org.apache.lucene.store.CompoundFileWriter$DirectCFSIndexOutput;

        $r12 = r0.<org.apache.lucene.store.CompoundFileWriter: org.apache.lucene.store.Directory directory>;

        $r13 = virtualinvoke $r12.<org.apache.lucene.store.Directory: org.apache.lucene.store.IndexOutput createOutput(java.lang.String,org.apache.lucene.store.IOContext)>(r1, r11);

        specialinvoke $r10.<org.apache.lucene.store.CompoundFileWriter$DirectCFSIndexOutput: void <init>(org.apache.lucene.store.CompoundFileWriter,org.apache.lucene.store.IndexOutput,org.apache.lucene.store.CompoundFileWriter$FileEntry,boolean)>(r0, $r13, $r3, 1);

        r46 = $r10;

     label07:
        z10 = 1;

        r14 = r46;

     label08:
        if 1 != 0 goto label10;

        $r15 = r0.<org.apache.lucene.store.CompoundFileWriter: java.util.Map entries>;

        interfaceinvoke $r15.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        if $z3 == 0 goto label10;

        $z5 = <org.apache.lucene.store.CompoundFileWriter: boolean $assertionsDisabled>;

        if $z5 != 0 goto label09;

        $r16 = r0.<org.apache.lucene.store.CompoundFileWriter: java.util.concurrent.atomic.AtomicBoolean outputTaken>;

        $z6 = virtualinvoke $r16.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z6 != 0 goto label09;

        $r17 = new java.lang.AssertionError;

        specialinvoke $r17.<java.lang.AssertionError: void <init>()>();

        throw $r17;

     label09:
        virtualinvoke r0.<org.apache.lucene.store.CompoundFileWriter: void releaseOutputLock()>();

     label10:
        return r14;

     label11:
        $r42 := @caughtexception;

     label12:
        if z10 != 0 goto label14;

        $r43 = r0.<org.apache.lucene.store.CompoundFileWriter: java.util.Map entries>;

        interfaceinvoke $r43.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        if z11 == 0 goto label14;

        $z8 = <org.apache.lucene.store.CompoundFileWriter: boolean $assertionsDisabled>;

        if $z8 != 0 goto label13;

        $r44 = r0.<org.apache.lucene.store.CompoundFileWriter: java.util.concurrent.atomic.AtomicBoolean outputTaken>;

        $z9 = virtualinvoke $r44.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z9 != 0 goto label13;

        $r45 = new java.lang.AssertionError;

        specialinvoke $r45.<java.lang.AssertionError: void <init>()>();

        throw $r45;

     label13:
        virtualinvoke r0.<org.apache.lucene.store.CompoundFileWriter: void releaseOutputLock()>();

     label14:
        throw $r42;

        catch java.lang.Throwable from label01 to label08 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    final void releaseOutputLock()
    {
        java.util.concurrent.atomic.AtomicBoolean $r1;
        org.apache.lucene.store.CompoundFileWriter r0;

        r0 := @this: org.apache.lucene.store.CompoundFileWriter;

        $r1 = r0.<org.apache.lucene.store.CompoundFileWriter: java.util.concurrent.atomic.AtomicBoolean outputTaken>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(1, 0);

        return;
    }

    private final void prunePendingEntries() throws java.io.IOException
    {
        java.lang.Throwable $r10;
        java.util.concurrent.atomic.AtomicBoolean $r1, $r3, $r11;
        java.lang.AssertionError $r4, $r12;
        java.util.Map $r9;
        java.lang.String $r8;
        org.apache.lucene.store.IndexOutput $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.lucene.store.CompoundFileWriter$FileEntry r13;
        org.apache.lucene.store.CompoundFileWriter r0;
        java.lang.Object $r6;
        java.util.Queue $r2, $r5;

        r0 := @this: org.apache.lucene.store.CompoundFileWriter;

        $r1 = r0.<org.apache.lucene.store.CompoundFileWriter: java.util.concurrent.atomic.AtomicBoolean outputTaken>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);

        if $z0 == 0 goto label7;

     label1:
        $r2 = r0.<org.apache.lucene.store.CompoundFileWriter: java.util.Queue pendingEntries>;

        $z1 = interfaceinvoke $r2.<java.util.Queue: boolean isEmpty()>();

        if $z1 != 0 goto label2;

        $r5 = r0.<org.apache.lucene.store.CompoundFileWriter: java.util.Queue pendingEntries>;

        $r6 = interfaceinvoke $r5.<java.util.Queue: java.lang.Object poll()>();

        r13 = (org.apache.lucene.store.CompoundFileWriter$FileEntry) $r6;

        $r7 = specialinvoke r0.<org.apache.lucene.store.CompoundFileWriter: org.apache.lucene.store.IndexOutput getOutput()>();

        specialinvoke r0.<org.apache.lucene.store.CompoundFileWriter: long copyFileEntry(org.apache.lucene.store.IndexOutput,org.apache.lucene.store.CompoundFileWriter$FileEntry)>($r7, r13);

        $r9 = r0.<org.apache.lucene.store.CompoundFileWriter: java.util.Map entries>;

        $r8 = r13.<org.apache.lucene.store.CompoundFileWriter$FileEntry: java.lang.String file>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, r13);

        goto label1;

     label2:
        $r3 = r0.<org.apache.lucene.store.CompoundFileWriter: java.util.concurrent.atomic.AtomicBoolean outputTaken>;

        $z2 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(1, 0);

        $z3 = <org.apache.lucene.store.CompoundFileWriter: boolean $assertionsDisabled>;

        if $z3 != 0 goto label3;

        if $z2 != 0 goto label3;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label3:
        goto label7;

     label4:
        $r10 := @caughtexception;

     label5:
        $r11 = r0.<org.apache.lucene.store.CompoundFileWriter: java.util.concurrent.atomic.AtomicBoolean outputTaken>;

        $z4 = virtualinvoke $r11.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(1, 0);

        $z5 = <org.apache.lucene.store.CompoundFileWriter: boolean $assertionsDisabled>;

        if $z5 != 0 goto label6;

        if $z4 != 0 goto label6;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label6:
        throw $r10;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    long fileLength(java.lang.String) throws java.io.IOException
    {
        long $l0;
        java.io.FileNotFoundException $r5;
        java.util.Map $r2;
        org.apache.lucene.store.CompoundFileWriter$FileEntry r4;
        org.apache.lucene.store.CompoundFileWriter r0;
        java.lang.Object $r3;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String r1, $r9;

        r0 := @this: org.apache.lucene.store.CompoundFileWriter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.lucene.store.CompoundFileWriter: java.util.Map entries>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.apache.lucene.store.CompoundFileWriter$FileEntry) $r3;

        if r4 != null goto label1;

        $r5 = new java.io.FileNotFoundException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label1:
        $l0 = r4.<org.apache.lucene.store.CompoundFileWriter$FileEntry: long length>;

        return $l0;
    }

    boolean fileExists(java.lang.String)
    {
        java.util.Map $r2;
        org.apache.lucene.store.CompoundFileWriter r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.apache.lucene.store.CompoundFileWriter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.lucene.store.CompoundFileWriter: java.util.Map entries>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    java.lang.String[] listAll()
    {
        java.lang.Object[] $r4;
        java.util.Map $r1;
        java.util.Set $r2;
        org.apache.lucene.store.CompoundFileWriter r0;
        java.lang.String[] $r3, $r5;

        r0 := @this: org.apache.lucene.store.CompoundFileWriter;

        $r1 = r0.<org.apache.lucene.store.CompoundFileWriter: java.util.Map entries>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = newarray (java.lang.String)[0];

        $r4 = interfaceinvoke $r2.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (java.lang.String[]) $r4;

        return $r5;
    }

    static java.util.Queue access$100(org.apache.lucene.store.CompoundFileWriter)
    {
        org.apache.lucene.store.CompoundFileWriter r0;
        java.util.Queue $r1;

        r0 := @parameter0: org.apache.lucene.store.CompoundFileWriter;

        $r1 = r0.<org.apache.lucene.store.CompoundFileWriter: java.util.Queue pendingEntries>;

        return $r1;
    }

    static void access$200(org.apache.lucene.store.CompoundFileWriter) throws java.io.IOException
    {
        org.apache.lucene.store.CompoundFileWriter r0;

        r0 := @parameter0: org.apache.lucene.store.CompoundFileWriter;

        specialinvoke r0.<org.apache.lucene.store.CompoundFileWriter: void prunePendingEntries()>();

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.apache.lucene.store.CompoundFileWriter: java.lang.String ENTRY_CODEC> = "CompoundFileWriterEntries";

        <org.apache.lucene.store.CompoundFileWriter: int VERSION_CURRENT> = 0;

        <org.apache.lucene.store.CompoundFileWriter: int VERSION_START> = 0;

        <org.apache.lucene.store.CompoundFileWriter: java.lang.String DATA_CODEC> = "CompoundFileWriterData";

        <org.apache.lucene.store.CompoundFileWriter: int FORMAT_NO_SEGMENT_PREFIX> = -1;

        <org.apache.lucene.store.CompoundFileWriter: int FORMAT_PRE_VERSION> = 0;

        $r0 = class "Lorg/apache/lucene/store/CompoundFileWriter;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.store.CompoundFileWriter: boolean $assertionsDisabled> = $z1;

        return;
    }
}
