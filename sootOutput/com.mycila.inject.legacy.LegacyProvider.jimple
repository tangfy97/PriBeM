public abstract class com.mycila.inject.legacy.LegacyProvider extends java.lang.Object implements com.google.inject.Provider
{
    com.google.inject.Injector fromGuice;
    final com.google.inject.Key[] parametersTypes;
    final java.lang.Class providedType;

    private transient void <init>(java.lang.Class, com.google.inject.Key[])
    {
        java.lang.Class r2;
        com.google.inject.Key[] r1;
        com.mycila.inject.legacy.LegacyProvider r0;

        r0 := @this: com.mycila.inject.legacy.LegacyProvider;

        r2 := @parameter0: java.lang.Class;

        r1 := @parameter1: com.google.inject.Key[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.mycila.inject.legacy.LegacyProvider: com.google.inject.Key[] parametersTypes> = r1;

        r0.<com.mycila.inject.legacy.LegacyProvider: java.lang.Class providedType> = r2;

        return;
    }

    public transient com.mycila.inject.legacy.LegacyProvider inject(java.lang.String, java.lang.Class[])
    {
        com.mycila.inject.legacy.LegacyProvider r0, $r4;
        java.lang.Class[] r2;
        java.lang.String r1;
        com.google.inject.Key[] $r3;

        r0 := @this: com.mycila.inject.legacy.LegacyProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class[];

        $r3 = staticinvoke <com.mycila.inject.legacy.LegacyProvider: com.google.inject.Key[] toKeys(java.lang.Class[])>(r2);

        $r4 = virtualinvoke r0.<com.mycila.inject.legacy.LegacyProvider: com.mycila.inject.legacy.LegacyProvider inject(java.lang.String,com.google.inject.Key[])>(r1, $r3);

        return $r4;
    }

    public transient com.mycila.inject.legacy.LegacyProvider inject(java.lang.String, com.google.inject.Key[])
    {
        com.mycila.inject.legacy.LegacyProvider r1;
        java.lang.Class $r4;
        java.lang.String r2;
        com.google.inject.Key[] r3;
        com.mycila.inject.legacy.LegacyProvider$MethodLegacyProvider $r0;

        r1 := @this: com.mycila.inject.legacy.LegacyProvider;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: com.google.inject.Key[];

        $r0 = new com.mycila.inject.legacy.LegacyProvider$MethodLegacyProvider;

        $r4 = r1.<com.mycila.inject.legacy.LegacyProvider: java.lang.Class providedType>;

        specialinvoke $r0.<com.mycila.inject.legacy.LegacyProvider$MethodLegacyProvider: void <init>(com.mycila.inject.legacy.LegacyProvider,java.lang.Class,java.lang.String,com.google.inject.Key[])>(r1, $r4, r2, r3);

        return $r0;
    }

    final java.lang.Object[] getParameterValues(com.google.inject.Injector)
    {
        java.lang.Object[] r2;
        com.google.inject.Key r4;
        com.google.inject.Injector r5;
        com.mycila.inject.legacy.LegacyProvider r0;
        int $i0, i1, $i2, i3, i4;
        java.lang.Object $r6;
        com.google.inject.Key[] $r1, r3;

        r0 := @this: com.mycila.inject.legacy.LegacyProvider;

        r5 := @parameter0: com.google.inject.Injector;

        $r1 = r0.<com.mycila.inject.legacy.LegacyProvider: com.google.inject.Key[] parametersTypes>;

        $i0 = lengthof $r1;

        r2 = newarray (java.lang.Object)[$i0];

        i3 = 0;

        r3 = r0.<com.mycila.inject.legacy.LegacyProvider: com.google.inject.Key[] parametersTypes>;

        i1 = lengthof r3;

        i4 = 0;

     label1:
        if i4 >= i1 goto label2;

        r4 = r3[i4];

        $i2 = i3;

        i3 = i3 + 1;

        $r6 = interfaceinvoke r5.<com.google.inject.Injector: java.lang.Object getInstance(com.google.inject.Key)>(r4);

        r2[$i2] = $r6;

        i4 = i4 + 1;

        goto label1;

     label2:
        return r2;
    }

    public final java.lang.Object get()
    {
        com.google.inject.Injector $r1;
        java.lang.Object $r2;
        com.mycila.inject.legacy.LegacyProvider r0;

        r0 := @this: com.mycila.inject.legacy.LegacyProvider;

        $r1 = r0.<com.mycila.inject.legacy.LegacyProvider: com.google.inject.Injector fromGuice>;

        $r2 = virtualinvoke r0.<com.mycila.inject.legacy.LegacyProvider: java.lang.Object get(com.google.inject.Injector)>($r1);

        return $r2;
    }

    abstract java.lang.Object get(com.google.inject.Injector);

    public java.lang.String toString()
    {
        com.mycila.inject.legacy.LegacyProvider r2;
        java.lang.StringBuilder $r0, $r1, $r5, $r6;
        java.lang.Class $r3;
        java.lang.String $r4, $r7;

        r2 := @this: com.mycila.inject.legacy.LegacyProvider;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LegacyProvider[");

        $r3 = r2.<com.mycila.inject.legacy.LegacyProvider: java.lang.Class providedType>;

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public static com.mycila.inject.legacy.LegacyProvider$ConstructBuilder of(java.lang.Class)
    {
        java.lang.Class r1;
        com.mycila.inject.legacy.LegacyProvider$ConstructBuilder $r0;

        r1 := @parameter0: java.lang.Class;

        $r0 = new com.mycila.inject.legacy.LegacyProvider$ConstructBuilder;

        specialinvoke $r0.<com.mycila.inject.legacy.LegacyProvider$ConstructBuilder: void <init>(java.lang.Class,com.mycila.inject.legacy.LegacyProvider$1)>(r1, null);

        return $r0;
    }

    private static transient java.lang.Class[] toClasses(com.google.inject.Key[])
    {
        com.google.inject.Key r2;
        java.lang.Class[] r1;
        java.lang.reflect.Type $r4;
        int $i0, i1, $i2, i3, i4;
        java.lang.Class $r5;
        com.google.inject.Key[] r0;
        com.google.inject.TypeLiteral $r3;

        r0 := @parameter0: com.google.inject.Key[];

        $i0 = lengthof r0;

        r1 = newarray (java.lang.Class)[$i0];

        i3 = 0;

        i1 = lengthof r0;

        i4 = 0;

     label1:
        if i4 >= i1 goto label2;

        r2 = r0[i4];

        $i2 = i3;

        i3 = i3 + 1;

        $r3 = virtualinvoke r2.<com.google.inject.Key: com.google.inject.TypeLiteral getTypeLiteral()>();

        $r4 = virtualinvoke $r3.<com.google.inject.TypeLiteral: java.lang.reflect.Type getType()>();

        $r5 = (java.lang.Class) $r4;

        r1[$i2] = $r5;

        i4 = i4 + 1;

        goto label1;

     label2:
        return r1;
    }

    private static transient com.google.inject.Key[] toKeys(java.lang.Class[])
    {
        com.google.inject.Key $r3;
        java.lang.Class[] r0;
        int $i0, i1, $i2, i3, i4;
        java.lang.Class r2;
        com.google.inject.Key[] r1;

        r0 := @parameter0: java.lang.Class[];

        $i0 = lengthof r0;

        r1 = newarray (com.google.inject.Key)[$i0];

        i3 = 0;

        i1 = lengthof r0;

        i4 = 0;

     label1:
        if i4 >= i1 goto label2;

        r2 = r0[i4];

        $i2 = i3;

        i3 = i3 + 1;

        $r3 = staticinvoke <com.google.inject.Key: com.google.inject.Key get(java.lang.Class)>(r2);

        r1[$i2] = $r3;

        i4 = i4 + 1;

        goto label1;

     label2:
        return r1;
    }

    private static transient java.lang.reflect.Method findMethod(java.lang.Class, java.lang.String, com.google.inject.Key[])
    {
        com.mycila.inject.internal.guava.base.Predicate $r8, $r10, $r11;
        java.lang.NoSuchMethodException $r5;
        com.mycila.inject.internal.guava.collect.UnmodifiableIterator $r12;
        java.lang.Iterable $r6;
        com.mycila.inject.MycilaGuiceException $r23;
        java.lang.String r1, $r19, $r22;
        java.lang.reflect.Method $r4, $r14;
        boolean $z0;
        java.util.Iterator $r7;
        java.lang.Class[] $r3, $r9;
        java.lang.Class r0;
        java.lang.Object $r13;
        java.lang.StringBuilder $r15, $r16, $r17, $r18, $r20, $r21;
        com.google.inject.Key[] r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: com.google.inject.Key[];

     label1:
        $r3 = staticinvoke <com.mycila.inject.legacy.LegacyProvider: java.lang.Class[] toClasses(com.google.inject.Key[])>(r2);

        $r4 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r1, $r3);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = staticinvoke <com.mycila.inject.internal.Reflect: java.lang.Iterable findMethods(java.lang.Class)>(r0);

        $r7 = interfaceinvoke $r6.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r8 = staticinvoke <com.mycila.inject.internal.Reflect: com.mycila.inject.internal.guava.base.Predicate named(java.lang.String)>(r1);

        $r9 = staticinvoke <com.mycila.inject.legacy.LegacyProvider: java.lang.Class[] toClasses(com.google.inject.Key[])>(r2);

        $r10 = staticinvoke <com.mycila.inject.internal.Reflect: com.mycila.inject.internal.guava.base.Predicate withParameterTypes(java.lang.Class[])>($r9);

        $r11 = staticinvoke <com.mycila.inject.internal.guava.base.Predicates: com.mycila.inject.internal.guava.base.Predicate and(com.mycila.inject.internal.guava.base.Predicate,com.mycila.inject.internal.guava.base.Predicate)>($r8, $r10);

        $r12 = staticinvoke <com.mycila.inject.internal.guava.collect.Iterators: com.mycila.inject.internal.guava.collect.UnmodifiableIterator filter(java.util.Iterator,com.mycila.inject.internal.guava.base.Predicate)>($r7, $r11);

        $z0 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label4;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to find method ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in class ");

        $r19 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" matching given parameter types");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        $r23 = staticinvoke <com.mycila.inject.MycilaGuiceException: com.mycila.inject.MycilaGuiceException exception(java.lang.String,java.lang.Throwable)>($r22, $r5);

        throw $r23;

     label4:
        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        $r14 = (java.lang.reflect.Method) $r13;

        return $r14;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }

    static com.google.inject.Key[] access$100(java.lang.Class[])
    {
        java.lang.Class[] r0;
        com.google.inject.Key[] $r1;

        r0 := @parameter0: java.lang.Class[];

        $r1 = staticinvoke <com.mycila.inject.legacy.LegacyProvider: com.google.inject.Key[] toKeys(java.lang.Class[])>(r0);

        return $r1;
    }

    void <init>(java.lang.Class, com.google.inject.Key[], com.mycila.inject.legacy.LegacyProvider$1)
    {
        com.mycila.inject.legacy.LegacyProvider r0;
        java.lang.Class r1;
        com.google.inject.Key[] r2;
        com.mycila.inject.legacy.LegacyProvider$1 r3;

        r0 := @this: com.mycila.inject.legacy.LegacyProvider;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: com.google.inject.Key[];

        r3 := @parameter2: com.mycila.inject.legacy.LegacyProvider$1;

        specialinvoke r0.<com.mycila.inject.legacy.LegacyProvider: void <init>(java.lang.Class,com.google.inject.Key[])>(r1, r2);

        return;
    }

    static java.lang.Class[] access$300(com.google.inject.Key[])
    {
        java.lang.Class[] $r1;
        com.google.inject.Key[] r0;

        r0 := @parameter0: com.google.inject.Key[];

        $r1 = staticinvoke <com.mycila.inject.legacy.LegacyProvider: java.lang.Class[] toClasses(com.google.inject.Key[])>(r0);

        return $r1;
    }

    static java.lang.reflect.Method access$400(java.lang.Class, java.lang.String, com.google.inject.Key[])
    {
        java.lang.Class r0;
        java.lang.String r1;
        com.google.inject.Key[] r2;
        java.lang.reflect.Method $r3;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: com.google.inject.Key[];

        $r3 = staticinvoke <com.mycila.inject.legacy.LegacyProvider: java.lang.reflect.Method findMethod(java.lang.Class,java.lang.String,com.google.inject.Key[])>(r0, r1, r2);

        return $r3;
    }
}
