public class com.hp.hpl.jena.sparql.core.Quad extends java.lang.Object
{
    public static final com.hp.hpl.jena.graph.Node defaultGraphNodeGenerated;
    public static final com.hp.hpl.jena.graph.Node defaultGraphIRI;
    public static final com.hp.hpl.jena.graph.Node unionGraph;
    public static final com.hp.hpl.jena.graph.Node tripleInQuad;
    private final com.hp.hpl.jena.graph.Node graph;
    private final com.hp.hpl.jena.graph.Node subject;
    private final com.hp.hpl.jena.graph.Node predicate;
    private final com.hp.hpl.jena.graph.Node object;

    public void <init>(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.Node r1, $r3, $r4, $r5;
        com.hp.hpl.jena.sparql.core.Quad r0;
        com.hp.hpl.jena.graph.Triple r2;

        r0 := @this: com.hp.hpl.jena.sparql.core.Quad;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.graph.Triple;

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r4 = virtualinvoke r2.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r5 = virtualinvoke r2.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, $r3, $r4, $r5);

        return;
    }

    public void <init>(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        java.lang.UnsupportedOperationException $r5, $r6, $r7;
        com.hp.hpl.jena.graph.Node r1, r2, r3, r4;
        com.hp.hpl.jena.sparql.core.Quad r0;

        r0 := @this: com.hp.hpl.jena.sparql.core.Quad;

        r4 := @parameter0: com.hp.hpl.jena.graph.Node;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        r2 := @parameter2: com.hp.hpl.jena.graph.Node;

        r3 := @parameter3: com.hp.hpl.jena.graph.Node;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r7 = new java.lang.UnsupportedOperationException;

        specialinvoke $r7.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Quad: subject cannot be null");

        throw $r7;

     label1:
        if r2 != null goto label2;

        $r6 = new java.lang.UnsupportedOperationException;

        specialinvoke $r6.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Quad: predicate cannot be null");

        throw $r6;

     label2:
        if r3 != null goto label3;

        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Quad: object cannot be null");

        throw $r5;

     label3:
        r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node graph> = r4;

        r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node subject> = r1;

        r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node predicate> = r2;

        r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node object> = r3;

        return;
    }

    public static com.hp.hpl.jena.sparql.core.Quad create(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r1, r2, r3, r4;
        com.hp.hpl.jena.sparql.core.Quad $r0;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.graph.Node;

        r4 := @parameter3: com.hp.hpl.jena.graph.Node;

        $r0 = new com.hp.hpl.jena.sparql.core.Quad;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.core.Quad: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2, r3, r4);

        return $r0;
    }

    public static com.hp.hpl.jena.sparql.core.Quad create(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.Node r1;
        com.hp.hpl.jena.sparql.core.Quad $r0;
        com.hp.hpl.jena.graph.Triple r2;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.graph.Triple;

        $r0 = new com.hp.hpl.jena.sparql.core.Quad;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.core.Quad: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Triple)>(r1, r2);

        return $r0;
    }

    public final com.hp.hpl.jena.graph.Node getGraph()
    {
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.sparql.core.Quad r0;

        r0 := @this: com.hp.hpl.jena.sparql.core.Quad;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node graph>;

        return $r1;
    }

    public final com.hp.hpl.jena.graph.Node getSubject()
    {
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.sparql.core.Quad r0;

        r0 := @this: com.hp.hpl.jena.sparql.core.Quad;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node subject>;

        return $r1;
    }

    public final com.hp.hpl.jena.graph.Node getPredicate()
    {
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.sparql.core.Quad r0;

        r0 := @this: com.hp.hpl.jena.sparql.core.Quad;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node predicate>;

        return $r1;
    }

    public final com.hp.hpl.jena.graph.Node getObject()
    {
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.sparql.core.Quad r0;

        r0 := @this: com.hp.hpl.jena.sparql.core.Quad;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node object>;

        return $r1;
    }

    public com.hp.hpl.jena.graph.Triple asTriple()
    {
        com.hp.hpl.jena.graph.Node $r2, $r3, $r4;
        com.hp.hpl.jena.graph.Triple $r0;
        com.hp.hpl.jena.sparql.core.Quad r1;

        r1 := @this: com.hp.hpl.jena.sparql.core.Quad;

        $r0 = new com.hp.hpl.jena.graph.Triple;

        $r4 = r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node subject>;

        $r3 = r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node predicate>;

        $r2 = r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node object>;

        specialinvoke $r0.<com.hp.hpl.jena.graph.Triple: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r4, $r3, $r2);

        return $r0;
    }

    public boolean isConcrete()
    {
        com.hp.hpl.jena.graph.Node $r1, $r2, $r3, $r4;
        com.hp.hpl.jena.sparql.core.Quad r0;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: com.hp.hpl.jena.sparql.core.Quad;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node subject>;

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean isConcrete()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node predicate>;

        $z1 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: boolean isConcrete()>();

        if $z1 == 0 goto label1;

        $r3 = r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node object>;

        $z2 = virtualinvoke $r3.<com.hp.hpl.jena.graph.Node: boolean isConcrete()>();

        if $z2 == 0 goto label1;

        $r4 = r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node graph>;

        $z3 = virtualinvoke $r4.<com.hp.hpl.jena.graph.Node: boolean isConcrete()>();

        if $z3 == 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        return $z4;
    }

    public static boolean isDefaultGraphGenerated(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0, $r1;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r1 = <com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node defaultGraphNodeGenerated>;

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>(r0);

        return $z0;
    }

    public static boolean isDefaultGraphExplicit(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0, $r1;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r1 = <com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node defaultGraphIRI>;

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>(r0);

        return $z0;
    }

    public static boolean isDefaultGraph(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Quad: boolean isDefaultGraphGenerated(com.hp.hpl.jena.graph.Node)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <com.hp.hpl.jena.sparql.core.Quad: boolean isDefaultGraphExplicit(com.hp.hpl.jena.graph.Node)>(r0);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public static boolean isUnionGraph(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0, $r1;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r1 = <com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node unionGraph>;

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>(r0);

        return $z0;
    }

    public boolean isDefaultGraphExplicit()
    {
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.sparql.core.Quad r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.core.Quad;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getGraph()>();

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Quad: boolean isDefaultGraphExplicit(com.hp.hpl.jena.graph.Node)>($r1);

        return $z0;
    }

    public boolean isDefaultGraphGenerated()
    {
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.sparql.core.Quad r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.core.Quad;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getGraph()>();

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Quad: boolean isDefaultGraphGenerated(com.hp.hpl.jena.graph.Node)>($r1);

        return $z0;
    }

    public boolean isDefaultGraph()
    {
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.sparql.core.Quad r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.core.Quad;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getGraph()>();

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Quad: boolean isDefaultGraph(com.hp.hpl.jena.graph.Node)>($r1);

        return $z0;
    }

    public boolean isUnionGraph()
    {
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.sparql.core.Quad r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.core.Quad;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node graph>;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Quad: boolean isUnionGraph(com.hp.hpl.jena.graph.Node)>($r1);

        return $z0;
    }

    public boolean isTriple()
    {
        com.hp.hpl.jena.graph.Node $r1, $r2;
        com.hp.hpl.jena.sparql.core.Quad r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.core.Quad;

        $r2 = r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node graph>;

        $r1 = <com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node tripleInQuad>;

        $z0 = staticinvoke <org.apache.jena.atlas.lib.Lib: boolean equal(java.lang.Object,java.lang.Object)>($r2, $r1);

        return $z0;
    }

    public boolean isLegalAsData()
    {
        com.hp.hpl.jena.graph.Node $r1, $r2, $r3, $r4;
        com.hp.hpl.jena.sparql.core.Quad r0;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: com.hp.hpl.jena.sparql.core.Quad;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getSubject()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getObject()>();

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getGraph()>();

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z1 == 0 goto label2;

     label1:
        return 0;

     label2:
        $z2 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z2 != 0 goto label3;

        return 0;

     label3:
        $z3 = virtualinvoke $r3.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z3 == 0 goto label4;

        return 0;

     label4:
        if $r4 == null goto label5;

        $z4 = virtualinvoke $r4.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z4 != 0 goto label5;

        return 0;

     label5:
        return 1;
    }

    public int hashCode()
    {
        com.hp.hpl.jena.graph.Node $r1, $r2, $r3, $r4, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9;
        com.hp.hpl.jena.sparql.core.Quad r0;

        r0 := @this: com.hp.hpl.jena.sparql.core.Quad;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node subject>;

        $i0 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: int hashCode()>();

        $i1 = $i0 >> 1;

        $r2 = r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node predicate>;

        $i2 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: int hashCode()>();

        $i3 = $i1 ^ $i2;

        $r3 = r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node object>;

        $i4 = virtualinvoke $r3.<com.hp.hpl.jena.graph.Node: int hashCode()>();

        $i5 = $i4 << 1;

        i8 = $i3 ^ $i5;

        $r4 = r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node graph>;

        if $r4 == null goto label1;

        $r5 = r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node graph>;

        $i6 = virtualinvoke $r5.<com.hp.hpl.jena.graph.Node: int hashCode()>();

        $i7 = $i6 >> 2;

        i9 = i8 ^ $i7;

        goto label2;

     label1:
        i9 = i8 + 1;

     label2:
        return i9;
    }

    public boolean equals(java.lang.Object)
    {
        com.hp.hpl.jena.graph.Node $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.hp.hpl.jena.sparql.core.Quad r0, r2;
        java.lang.Object r1;

        r0 := @this: com.hp.hpl.jena.sparql.core.Quad;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof com.hp.hpl.jena.sparql.core.Quad;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (com.hp.hpl.jena.sparql.core.Quad) r1;

        $r4 = r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node graph>;

        $r3 = r2.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node graph>;

        $z1 = staticinvoke <org.apache.jena.atlas.lib.Lib: boolean equal(java.lang.Object,java.lang.Object)>($r4, $r3);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        $r6 = r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node subject>;

        $r5 = r2.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node subject>;

        $z2 = virtualinvoke $r6.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r5);

        if $z2 != 0 goto label4;

        return 0;

     label4:
        $r8 = r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node predicate>;

        $r7 = r2.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node predicate>;

        $z3 = virtualinvoke $r8.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r7);

        if $z3 != 0 goto label5;

        return 0;

     label5:
        $r10 = r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node object>;

        $r9 = r2.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node object>;

        $z4 = virtualinvoke $r10.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r9);

        if $z4 != 0 goto label6;

        return 0;

     label6:
        return 1;
    }

    public boolean matches(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node $r1, r2, $r3, r4, $r5, r6, $r7, r8;
        com.hp.hpl.jena.sparql.core.Quad r0;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: com.hp.hpl.jena.sparql.core.Quad;

        r2 := @parameter0: com.hp.hpl.jena.graph.Node;

        r4 := @parameter1: com.hp.hpl.jena.graph.Node;

        r6 := @parameter2: com.hp.hpl.jena.graph.Node;

        r8 := @parameter3: com.hp.hpl.jena.graph.Node;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getGraph()>();

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Quad: boolean nodeMatches(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r1, r2);

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getSubject()>();

        $z1 = staticinvoke <com.hp.hpl.jena.sparql.core.Quad: boolean nodeMatches(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r3, r4);

        if $z1 == 0 goto label1;

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getPredicate()>();

        $z2 = staticinvoke <com.hp.hpl.jena.sparql.core.Quad: boolean nodeMatches(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r5, r6);

        if $z2 == 0 goto label1;

        $r7 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getObject()>();

        $z3 = staticinvoke <com.hp.hpl.jena.sparql.core.Quad: boolean nodeMatches(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r7, r8);

        if $z3 == 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        return $z4;
    }

    private static boolean nodeMatches(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0, r1;
        boolean $z0;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r0 := @parameter1: com.hp.hpl.jena.graph.Node;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean matches(com.hp.hpl.jena.graph.Node)>(r1);

        return $z0;
    }

    public java.lang.String toString()
    {
        com.hp.hpl.jena.graph.Node $r1, $r2, $r7, $r11, $r15;
        java.lang.String $r8, $r12, $r16, $r19, $r20;
        com.hp.hpl.jena.sparql.core.Quad r0;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r9, $r10, $r13, $r14, $r17, $r18;

        r0 := @this: com.hp.hpl.jena.sparql.core.Quad;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node graph>;

        if $r1 != null goto label1;

        $r20 = "_";

        goto label2;

     label1:
        $r2 = r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node graph>;

        $r20 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: java.lang.String toString()>();

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r7 = r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node subject>;

        $r8 = virtualinvoke $r7.<com.hp.hpl.jena.graph.Node: java.lang.String toString()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r11 = r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node predicate>;

        $r12 = virtualinvoke $r11.<com.hp.hpl.jena.graph.Node: java.lang.String toString()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r15 = r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node object>;

        $r16 = virtualinvoke $r15.<com.hp.hpl.jena.graph.Node: java.lang.String toString()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r19;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.graph.Node $r0, $r1, $r2;

        $r0 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createURI(java.lang.String)>("urn:x-arq:DefaultGraphNode");

        <com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node defaultGraphNodeGenerated> = $r0;

        $r1 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createURI(java.lang.String)>("urn:x-arq:DefaultGraph");

        <com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node defaultGraphIRI> = $r1;

        $r2 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createURI(java.lang.String)>("urn:x-arq:UnionGraph");

        <com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node unionGraph> = $r2;

        <com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node tripleInQuad> = null;

        return;
    }
}
