public class org.jdesktop.swingx.color.ColorUtil extends java.lang.Object
{

    public void <init>()
    {
        org.jdesktop.swingx.color.ColorUtil r0;

        r0 := @this: org.jdesktop.swingx.color.ColorUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.awt.Color removeAlpha(java.awt.Color)
    {
        java.awt.Color r0, $r1;

        r0 := @parameter0: java.awt.Color;

        $r1 = staticinvoke <org.jdesktop.swingx.color.ColorUtil: java.awt.Color setAlpha(java.awt.Color,int)>(r0, 255);

        return $r1;
    }

    public static java.awt.Color setAlpha(java.awt.Color, int)
    {
        java.awt.Color $r1, r2;
        int i0, $i1, $i2, $i3;
        java.lang.IllegalArgumentException $r0;

        r2 := @parameter0: java.awt.Color;

        i0 := @parameter1: int;

        if i0 < 0 goto label1;

        if i0 <= 255 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("invalid alpha value");

        throw $r0;

     label2:
        $r1 = new java.awt.Color;

        $i1 = virtualinvoke r2.<java.awt.Color: int getRed()>();

        $i2 = virtualinvoke r2.<java.awt.Color: int getGreen()>();

        $i3 = virtualinvoke r2.<java.awt.Color: int getBlue()>();

        specialinvoke $r1.<java.awt.Color: void <init>(int,int,int,int)>($i1, $i2, $i3, i0);

        return $r1;
    }

    public static java.awt.Color setSaturation(java.awt.Color, float)
    {
        java.awt.Color r1, $r3, $r4;
        float[] $r2;
        byte $b0, $b1;
        int $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.IllegalArgumentException $r5;
        float f0, $f1, $f2;

        r1 := @parameter0: java.awt.Color;

        f0 := @parameter1: float;

        $b0 = f0 cmpg 0.0F;

        $i6 = (int) $b0;

        if $i6 < 0 goto label1;

        $b1 = f0 cmpl 1.0F;

        $i7 = (int) $b1;

        if $i7 <= 0 goto label2;

     label1:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("invalid saturation value");

        throw $r5;

     label2:
        $i2 = virtualinvoke r1.<java.awt.Color: int getAlpha()>();

        $i3 = virtualinvoke r1.<java.awt.Color: int getRed()>();

        $i4 = virtualinvoke r1.<java.awt.Color: int getGreen()>();

        $i5 = virtualinvoke r1.<java.awt.Color: int getBlue()>();

        $r2 = staticinvoke <java.awt.Color: float[] RGBtoHSB(int,int,int,float[])>($i3, $i4, $i5, null);

        $f2 = $r2[0];

        $f1 = $r2[2];

        $r3 = staticinvoke <java.awt.Color: java.awt.Color getHSBColor(float,float,float)>($f2, f0, $f1);

        $r4 = staticinvoke <org.jdesktop.swingx.color.ColorUtil: java.awt.Color setAlpha(java.awt.Color,int)>($r3, $i2);

        return $r4;
    }

    public static java.awt.Color setBrightness(java.awt.Color, float)
    {
        java.awt.Color r1, $r3, $r4;
        float[] $r2;
        byte $b0, $b1;
        int $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.IllegalArgumentException $r5;
        float f0, $f1, $f2;

        r1 := @parameter0: java.awt.Color;

        f0 := @parameter1: float;

        $b0 = f0 cmpg 0.0F;

        $i6 = (int) $b0;

        if $i6 < 0 goto label1;

        $b1 = f0 cmpl 1.0F;

        $i7 = (int) $b1;

        if $i7 <= 0 goto label2;

     label1:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("invalid brightness value");

        throw $r5;

     label2:
        $i2 = virtualinvoke r1.<java.awt.Color: int getAlpha()>();

        $i3 = virtualinvoke r1.<java.awt.Color: int getRed()>();

        $i4 = virtualinvoke r1.<java.awt.Color: int getGreen()>();

        $i5 = virtualinvoke r1.<java.awt.Color: int getBlue()>();

        $r2 = staticinvoke <java.awt.Color: float[] RGBtoHSB(int,int,int,float[])>($i3, $i4, $i5, null);

        $f2 = $r2[0];

        $f1 = $r2[1];

        $r3 = staticinvoke <java.awt.Color: java.awt.Color getHSBColor(float,float,float)>($f2, $f1, f0);

        $r4 = staticinvoke <org.jdesktop.swingx.color.ColorUtil: java.awt.Color setAlpha(java.awt.Color,int)>($r3, $i2);

        return $r4;
    }

    public static java.lang.String toHexString(java.awt.Color)
    {
        java.awt.Color r2;
        int $i0, $i1;
        java.lang.StringBuilder $r0, $r1, $r5;
        java.lang.String $r3, $r4, $r6;

        r2 := @parameter0: java.awt.Color;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#");

        $i0 = virtualinvoke r2.<java.awt.Color: int getRGB()>();

        $i1 = $i0 | -16777216;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i1);

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int)>(2);

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static java.awt.Color computeForeground(java.awt.Color)
    {
        java.awt.Color r0, $r2;
        float[] $r1;
        byte $b0;
        int $i1;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, f7;

        r0 := @parameter0: java.awt.Color;

        $r1 = virtualinvoke r0.<java.awt.Color: float[] getRGBColorComponents(float[])>(null);

        $f0 = $r1[0];

        $f3 = 0.3F * $f0;

        $f1 = $r1[1];

        $f2 = 0.59F * $f1;

        $f6 = $f3 + $f2;

        $f4 = $r1[2];

        $f5 = 0.11F * $f4;

        f7 = $f6 + $f5;

        $b0 = f7 cmpl 0.5F;

        $i1 = (int) $b0;

        if $i1 <= 0 goto label1;

        $r2 = <java.awt.Color: java.awt.Color BLACK>;

        goto label2;

     label1:
        $r2 = <java.awt.Color: java.awt.Color WHITE>;

     label2:
        return $r2;
    }

    public static java.awt.Color blend(java.awt.Color, java.awt.Color)
    {
        java.awt.Color r0, r1, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20, $i21, $i22, $i23, $i24, $i25, $i27, $i29;

        r1 := @parameter0: java.awt.Color;

        r0 := @parameter1: java.awt.Color;

        if r0 != null goto label1;

        return r1;

     label1:
        if r1 != null goto label2;

        return r0;

     label2:
        $i0 = virtualinvoke r0.<java.awt.Color: int getAlpha()>();

        $i1 = virtualinvoke r0.<java.awt.Color: int getRGB()>();

        $i3 = $i1 & 16711935;

        $i2 = $i0 + 1;

        $i4 = $i3 * $i2;

        $i5 = virtualinvoke r1.<java.awt.Color: int getRGB()>();

        $i7 = $i5 & 16711935;

        $i6 = 255 - $i0;

        $i8 = $i7 * $i6;

        $i9 = $i4 + $i8;

        i10 = $i9 & -16711936;

        $i11 = virtualinvoke r0.<java.awt.Color: int getRGB()>();

        $i27 = (int) 65280;

        $i13 = $i11 & $i27;

        $i12 = $i0 + 1;

        $i14 = $i13 * $i12;

        $i15 = virtualinvoke r1.<java.awt.Color: int getRGB()>();

        $i29 = (int) 65280;

        $i17 = $i15 & $i29;

        $i16 = 255 - $i0;

        $i18 = $i17 * $i16;

        $i19 = $i14 + $i18;

        i20 = $i19 & 16711680;

        $r3 = new java.awt.Color;

        $i21 = virtualinvoke r0.<java.awt.Color: int getRGB()>();

        $i24 = $i21 & -16777216;

        $i22 = i10 | i20;

        $i23 = $i22 >> 8;

        $i25 = $i24 | $i23;

        specialinvoke $r3.<java.awt.Color: void <init>(int)>($i25);

        return $r3;
    }

    public static java.awt.Color interpolate(java.awt.Color, java.awt.Color, float)
    {
        java.awt.Color r0, r2, $r5;
        float[] $r1, $r3, r4;
        int i0;
        float $f0, $f1, $f2, $f3, $f4, $f5, f6, $f7, $f8, $f9, $f10;

        r2 := @parameter0: java.awt.Color;

        r0 := @parameter1: java.awt.Color;

        f6 := @parameter2: float;

        $r1 = virtualinvoke r0.<java.awt.Color: float[] getRGBComponents(float[])>(null);

        $r3 = virtualinvoke r2.<java.awt.Color: float[] getRGBComponents(float[])>(null);

        r4 = newarray (float)[4];

        i0 = 0;

     label1:
        if i0 >= 4 goto label2;

        $f9 = $r1[i0];

        $f5 = $r3[i0];

        $f4 = $r1[i0];

        $f7 = $f5 - $f4;

        $f8 = $f7 * f6;

        $f10 = $f9 + $f8;

        r4[i0] = $f10;

        i0 = i0 + 1;

        goto label1;

     label2:
        $r5 = new java.awt.Color;

        $f3 = r4[0];

        $f2 = r4[1];

        $f1 = r4[2];

        $f0 = r4[3];

        specialinvoke $r5.<java.awt.Color: void <init>(float,float,float,float)>($f3, $f2, $f1, $f0);

        return $r5;
    }

    public static java.awt.Paint getCheckerPaint()
    {
        java.awt.Color $r0, $r1;
        java.awt.Paint $r2;

        $r1 = <java.awt.Color: java.awt.Color WHITE>;

        $r0 = <java.awt.Color: java.awt.Color GRAY>;

        $r2 = staticinvoke <org.jdesktop.swingx.color.ColorUtil: java.awt.Paint getCheckerPaint(java.awt.Color,java.awt.Color,int)>($r1, $r0, 20);

        return $r2;
    }

    public static java.awt.Paint getCheckerPaint(java.awt.Color, java.awt.Color, int)
    {
        java.awt.Color r2, r3;
        java.lang.Throwable $r6;
        java.awt.Rectangle $r5;
        java.awt.TexturePaint $r4;
        java.awt.image.BufferedImage $r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.awt.Graphics $r1;

        r2 := @parameter0: java.awt.Color;

        r3 := @parameter1: java.awt.Color;

        i0 := @parameter2: int;

        $r0 = new java.awt.image.BufferedImage;

        specialinvoke $r0.<java.awt.image.BufferedImage: void <init>(int,int,int)>(i0, i0, 2);

        $r1 = virtualinvoke $r0.<java.awt.image.BufferedImage: java.awt.Graphics getGraphics()>();

     label1:
        virtualinvoke $r1.<java.awt.Graphics: void setColor(java.awt.Color)>(r2);

        virtualinvoke $r1.<java.awt.Graphics: void fillRect(int,int,int,int)>(0, 0, i0, i0);

        virtualinvoke $r1.<java.awt.Graphics: void setColor(java.awt.Color)>(r3);

        $i2 = i0 / 2;

        $i1 = i0 / 2;

        virtualinvoke $r1.<java.awt.Graphics: void fillRect(int,int,int,int)>(0, 0, $i2, $i1);

        $i6 = i0 / 2;

        $i5 = i0 / 2;

        $i4 = i0 / 2;

        $i3 = i0 / 2;

        virtualinvoke $r1.<java.awt.Graphics: void fillRect(int,int,int,int)>($i6, $i5, $i4, $i3);

     label2:
        virtualinvoke $r1.<java.awt.Graphics: void dispose()>();

        goto label5;

     label3:
        $r6 := @caughtexception;

     label4:
        virtualinvoke $r1.<java.awt.Graphics: void dispose()>();

        throw $r6;

     label5:
        $r4 = new java.awt.TexturePaint;

        $r5 = new java.awt.Rectangle;

        specialinvoke $r5.<java.awt.Rectangle: void <init>(int,int,int,int)>(0, 0, i0, i0);

        specialinvoke $r4.<java.awt.TexturePaint: void <init>(java.awt.image.BufferedImage,java.awt.geom.Rectangle2D)>($r0, $r5);

        return $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static void tileStretchPaint(java.awt.Graphics, javax.swing.JComponent, java.awt.image.BufferedImage, java.awt.Insets)
    {
        java.awt.image.BufferedImage r2;
        java.awt.Graphics r1;
        java.awt.Insets r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63;
        javax.swing.JComponent r3;

        r1 := @parameter0: java.awt.Graphics;

        r3 := @parameter1: javax.swing.JComponent;

        r2 := @parameter2: java.awt.image.BufferedImage;

        r0 := @parameter3: java.awt.Insets;

        i0 = r0.<java.awt.Insets: int left>;

        i1 = r0.<java.awt.Insets: int right>;

        i2 = r0.<java.awt.Insets: int top>;

        i3 = r0.<java.awt.Insets: int bottom>;

        virtualinvoke r1.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)>(r2, 0, 0, i0, i2, 0, 0, i0, i2, null);

        $i4 = virtualinvoke r3.<javax.swing.JComponent: int getWidth()>();

        $i5 = $i4 - i1;

        $i6 = virtualinvoke r2.<java.awt.image.BufferedImage: int getWidth()>();

        $i7 = $i6 - i1;

        virtualinvoke r1.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)>(r2, i0, 0, $i5, i2, i0, 0, $i7, i2, null);

        $i8 = virtualinvoke r3.<javax.swing.JComponent: int getWidth()>();

        $i9 = $i8 - i1;

        $i10 = virtualinvoke r3.<javax.swing.JComponent: int getWidth()>();

        $i11 = virtualinvoke r2.<java.awt.image.BufferedImage: int getWidth()>();

        $i12 = $i11 - i1;

        $i13 = virtualinvoke r2.<java.awt.image.BufferedImage: int getWidth()>();

        virtualinvoke r1.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)>(r2, $i9, 0, $i10, i2, $i12, 0, $i13, i2, null);

        $i14 = virtualinvoke r3.<javax.swing.JComponent: int getHeight()>();

        $i15 = $i14 - i3;

        $i16 = virtualinvoke r2.<java.awt.image.BufferedImage: int getHeight()>();

        $i17 = $i16 - i3;

        virtualinvoke r1.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)>(r2, 0, i2, i0, $i15, 0, i2, i0, $i17, null);

        $i18 = virtualinvoke r3.<javax.swing.JComponent: int getWidth()>();

        $i19 = $i18 - i1;

        $i20 = virtualinvoke r3.<javax.swing.JComponent: int getHeight()>();

        $i21 = $i20 - i3;

        $i22 = virtualinvoke r2.<java.awt.image.BufferedImage: int getWidth()>();

        $i23 = $i22 - i1;

        $i24 = virtualinvoke r2.<java.awt.image.BufferedImage: int getHeight()>();

        $i25 = $i24 - i3;

        virtualinvoke r1.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)>(r2, i0, i2, $i19, $i21, i0, i2, $i23, $i25, null);

        $i26 = virtualinvoke r3.<javax.swing.JComponent: int getWidth()>();

        $i27 = $i26 - i1;

        $i28 = virtualinvoke r3.<javax.swing.JComponent: int getWidth()>();

        $i29 = virtualinvoke r3.<javax.swing.JComponent: int getHeight()>();

        $i30 = $i29 - i3;

        $i31 = virtualinvoke r2.<java.awt.image.BufferedImage: int getWidth()>();

        $i32 = $i31 - i1;

        $i33 = virtualinvoke r2.<java.awt.image.BufferedImage: int getWidth()>();

        $i34 = virtualinvoke r2.<java.awt.image.BufferedImage: int getHeight()>();

        $i35 = $i34 - i3;

        virtualinvoke r1.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)>(r2, $i27, i2, $i28, $i30, $i32, i2, $i33, $i35, null);

        $i36 = virtualinvoke r3.<javax.swing.JComponent: int getHeight()>();

        $i37 = $i36 - i3;

        $i38 = virtualinvoke r3.<javax.swing.JComponent: int getHeight()>();

        $i39 = virtualinvoke r2.<java.awt.image.BufferedImage: int getHeight()>();

        $i40 = $i39 - i3;

        $i41 = virtualinvoke r2.<java.awt.image.BufferedImage: int getHeight()>();

        virtualinvoke r1.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)>(r2, 0, $i37, i0, $i38, 0, $i40, i0, $i41, null);

        $i42 = virtualinvoke r3.<javax.swing.JComponent: int getHeight()>();

        $i43 = $i42 - i3;

        $i44 = virtualinvoke r3.<javax.swing.JComponent: int getWidth()>();

        $i45 = $i44 - i1;

        $i46 = virtualinvoke r3.<javax.swing.JComponent: int getHeight()>();

        $i47 = virtualinvoke r2.<java.awt.image.BufferedImage: int getHeight()>();

        $i48 = $i47 - i3;

        $i49 = virtualinvoke r2.<java.awt.image.BufferedImage: int getWidth()>();

        $i50 = $i49 - i1;

        $i51 = virtualinvoke r2.<java.awt.image.BufferedImage: int getHeight()>();

        virtualinvoke r1.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)>(r2, i0, $i43, $i45, $i46, i0, $i48, $i50, $i51, null);

        $i52 = virtualinvoke r3.<javax.swing.JComponent: int getWidth()>();

        $i53 = $i52 - i1;

        $i54 = virtualinvoke r3.<javax.swing.JComponent: int getHeight()>();

        $i55 = $i54 - i3;

        $i56 = virtualinvoke r3.<javax.swing.JComponent: int getWidth()>();

        $i57 = virtualinvoke r3.<javax.swing.JComponent: int getHeight()>();

        $i58 = virtualinvoke r2.<java.awt.image.BufferedImage: int getWidth()>();

        $i59 = $i58 - i1;

        $i60 = virtualinvoke r2.<java.awt.image.BufferedImage: int getHeight()>();

        $i61 = $i60 - i3;

        $i62 = virtualinvoke r2.<java.awt.image.BufferedImage: int getWidth()>();

        $i63 = virtualinvoke r2.<java.awt.image.BufferedImage: int getHeight()>();

        virtualinvoke r1.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)>(r2, $i53, $i55, $i56, $i57, $i59, $i61, $i62, $i63, null);

        return;
    }
}
