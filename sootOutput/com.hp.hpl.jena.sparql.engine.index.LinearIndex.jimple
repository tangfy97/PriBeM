public class com.hp.hpl.jena.sparql.engine.index.LinearIndex extends java.lang.Object implements com.hp.hpl.jena.sparql.engine.index.IndexTable
{
    final java.util.Set commonVars;
    java.util.List table;

    public void <init>(java.util.Set, com.hp.hpl.jena.sparql.engine.QueryIterator)
    {
        java.util.List $r4;
        java.util.Set r2;
        java.lang.Object $r5;
        com.hp.hpl.jena.sparql.engine.QueryIterator r3;
        com.hp.hpl.jena.sparql.engine.index.LinearIndex r0;
        java.util.ArrayList $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.index.LinearIndex;

        r2 := @parameter0: java.util.Set;

        r3 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.engine.index.LinearIndex: java.util.List table> = $r1;

        r0.<com.hp.hpl.jena.sparql.engine.index.LinearIndex: java.util.Set commonVars> = r2;

     label1:
        $z0 = interfaceinvoke r3.<com.hp.hpl.jena.sparql.engine.QueryIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = r0.<com.hp.hpl.jena.sparql.engine.index.LinearIndex: java.util.List table>;

        $r5 = interfaceinvoke r3.<com.hp.hpl.jena.sparql.engine.QueryIterator: java.lang.Object next()>();

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label1;

     label2:
        interfaceinvoke r3.<com.hp.hpl.jena.sparql.engine.QueryIterator: void close()>();

        return;
    }

    public void <init>(java.util.Set, com.hp.hpl.jena.sparql.engine.QueryIterator, java.util.Set, java.util.Map)
    {
        java.util.Iterator $r4;
        com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key r9;
        java.util.Set r2, r3;
        java.util.ArrayList $r1;
        java.util.List $r6, $r11;
        com.hp.hpl.jena.sparql.engine.binding.Binding $r12;
        java.util.Map r10;
        java.lang.Object $r7, $r8;
        com.hp.hpl.jena.sparql.engine.QueryIterator r5;
        com.hp.hpl.jena.sparql.engine.index.LinearIndex r0;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.sparql.engine.index.LinearIndex;

        r2 := @parameter0: java.util.Set;

        r5 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        r3 := @parameter2: java.util.Set;

        r10 := @parameter3: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.engine.index.LinearIndex: java.util.List table> = $r1;

        r0.<com.hp.hpl.jena.sparql.engine.index.LinearIndex: java.util.Set commonVars> = r2;

        $r4 = interfaceinvoke r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r9 = (com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key) $r8;

        $r11 = r0.<com.hp.hpl.jena.sparql.engine.index.LinearIndex: java.util.List table>;

        $r12 = staticinvoke <com.hp.hpl.jena.sparql.engine.index.LinearIndex: com.hp.hpl.jena.sparql.engine.binding.Binding toBinding(com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key,java.util.Map)>(r9, r10);

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r12);

        goto label1;

     label2:
        $z1 = interfaceinvoke r5.<com.hp.hpl.jena.sparql.engine.QueryIterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r6 = r0.<com.hp.hpl.jena.sparql.engine.index.LinearIndex: java.util.List table>;

        $r7 = interfaceinvoke r5.<com.hp.hpl.jena.sparql.engine.QueryIterator: java.lang.Object next()>();

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label2;

     label3:
        interfaceinvoke r5.<com.hp.hpl.jena.sparql.engine.QueryIterator: void close()>();

        return;
    }

    public boolean containsCompatibleWithSharedDomain(com.hp.hpl.jena.sparql.engine.binding.Binding)
    {
        java.util.Iterator $r3;
        java.util.Set $r1;
        java.util.List $r2;
        com.hp.hpl.jena.sparql.engine.binding.Binding r5, r6;
        int $i0;
        java.lang.Object $r4;
        com.hp.hpl.jena.sparql.engine.index.LinearIndex r0;
        boolean $z0, $z1, $z2;

        r0 := @this: com.hp.hpl.jena.sparql.engine.index.LinearIndex;

        r6 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        $r1 = r0.<com.hp.hpl.jena.sparql.engine.index.LinearIndex: java.util.Set commonVars>;

        $i0 = interfaceinvoke $r1.<java.util.Set: int size()>();

        if $i0 != 0 goto label1;

        return 0;

     label1:
        $r2 = r0.<com.hp.hpl.jena.sparql.engine.index.LinearIndex: java.util.List table>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.hp.hpl.jena.sparql.engine.binding.Binding) $r4;

        $z1 = specialinvoke r0.<com.hp.hpl.jena.sparql.engine.index.LinearIndex: boolean hasCommonVars(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.engine.binding.Binding)>(r6, r5);

        if $z1 == 0 goto label3;

        $z2 = staticinvoke <com.hp.hpl.jena.sparql.algebra.Algebra: boolean compatible(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.engine.binding.Binding)>(r6, r5);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        goto label2;

     label4:
        return 0;
    }

    private boolean hasCommonVars(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.engine.binding.Binding)
    {
        java.util.Iterator $r2;
        java.util.Set $r1;
        com.hp.hpl.jena.sparql.core.Var r4;
        com.hp.hpl.jena.sparql.engine.binding.Binding r5, r6;
        java.lang.Object $r3;
        com.hp.hpl.jena.sparql.engine.index.LinearIndex r0;
        boolean $z0, $z1, $z2;

        r0 := @this: com.hp.hpl.jena.sparql.engine.index.LinearIndex;

        r5 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r6 := @parameter1: com.hp.hpl.jena.sparql.engine.binding.Binding;

        $r1 = r0.<com.hp.hpl.jena.sparql.engine.index.LinearIndex: java.util.Set commonVars>;

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.hp.hpl.jena.sparql.core.Var) $r3;

        $z1 = interfaceinvoke r5.<com.hp.hpl.jena.sparql.engine.binding.Binding: boolean contains(com.hp.hpl.jena.sparql.core.Var)>(r4);

        if $z1 == 0 goto label2;

        $z2 = interfaceinvoke r6.<com.hp.hpl.jena.sparql.engine.binding.Binding: boolean contains(com.hp.hpl.jena.sparql.core.Var)>(r4);

        if $z2 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    static com.hp.hpl.jena.sparql.engine.binding.Binding toBinding(com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key, java.util.Map)
    {
        com.hp.hpl.jena.graph.Node[] $r1;
        java.util.Map$Entry r7;
        java.util.Iterator $r5;
        com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key r0;
        java.util.Set $r4;
        com.hp.hpl.jena.graph.Node r10;
        com.hp.hpl.jena.sparql.core.Var $r12;
        java.lang.Integer $r9;
        com.hp.hpl.jena.sparql.engine.binding.BindingHashMap $r2;
        java.util.Map r3;
        int $i0;
        java.lang.Object $r6, $r8, $r11;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key;

        r3 := @parameter1: java.util.Map;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key: com.hp.hpl.jena.graph.Node[] getNodes()>();

        $r2 = new com.hp.hpl.jena.sparql.engine.binding.BindingHashMap;

        specialinvoke $r2.<com.hp.hpl.jena.sparql.engine.binding.BindingHashMap: void <init>()>();

        $r4 = interfaceinvoke r3.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r8 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r9 = (java.lang.Integer) $r8;

        $i0 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        r10 = $r1[$i0];

        if r10 == null goto label2;

        $r11 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r12 = (com.hp.hpl.jena.sparql.core.Var) $r11;

        virtualinvoke $r2.<com.hp.hpl.jena.sparql.engine.binding.BindingHashMap: void add(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node)>($r12, r10);

     label2:
        goto label1;

     label3:
        return $r2;
    }
}
