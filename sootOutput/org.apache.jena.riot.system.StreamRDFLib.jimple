public class org.apache.jena.riot.system.StreamRDFLib extends java.lang.Object
{

    public void <init>()
    {
        org.apache.jena.riot.system.StreamRDFLib r0;

        r0 := @this: org.apache.jena.riot.system.StreamRDFLib;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.jena.riot.system.StreamRDF sinkNull()
    {
        org.apache.jena.riot.system.StreamRDFBase $r0;

        $r0 = new org.apache.jena.riot.system.StreamRDFBase;

        specialinvoke $r0.<org.apache.jena.riot.system.StreamRDFBase: void <init>()>();

        return $r0;
    }

    public static org.apache.jena.riot.system.StreamRDF writer(java.io.OutputStream)
    {
        java.io.OutputStream r1;
        org.apache.jena.atlas.io.AWriter $r2;
        org.apache.jena.riot.writer.WriterStreamRDFTuples $r0;

        r1 := @parameter0: java.io.OutputStream;

        $r0 = new org.apache.jena.riot.writer.WriterStreamRDFTuples;

        $r2 = staticinvoke <org.apache.jena.atlas.io.IO: org.apache.jena.atlas.io.AWriter wrapUTF8(java.io.OutputStream)>(r1);

        specialinvoke $r0.<org.apache.jena.riot.writer.WriterStreamRDFTuples: void <init>(org.apache.jena.atlas.io.AWriter)>($r2);

        return $r0;
    }

    public static org.apache.jena.riot.system.StreamRDF writer(org.apache.jena.atlas.io.AWriter)
    {
        org.apache.jena.atlas.io.AWriter r1;
        org.apache.jena.riot.writer.WriterStreamRDFTuples $r0;

        r1 := @parameter0: org.apache.jena.atlas.io.AWriter;

        $r0 = new org.apache.jena.riot.writer.WriterStreamRDFTuples;

        specialinvoke $r0.<org.apache.jena.riot.writer.WriterStreamRDFTuples: void <init>(org.apache.jena.atlas.io.AWriter)>(r1);

        return $r0;
    }

    public static org.apache.jena.riot.system.StreamRDF writer(java.io.Writer)
    {
        java.io.Writer r1;
        org.apache.jena.atlas.io.AWriter $r2;
        org.apache.jena.riot.writer.WriterStreamRDFTuples $r0;

        r1 := @parameter0: java.io.Writer;

        $r0 = new org.apache.jena.riot.writer.WriterStreamRDFTuples;

        $r2 = staticinvoke <org.apache.jena.atlas.io.IO: org.apache.jena.atlas.io.AWriter wrap(java.io.Writer)>(r1);

        specialinvoke $r0.<org.apache.jena.riot.writer.WriterStreamRDFTuples: void <init>(org.apache.jena.atlas.io.AWriter)>($r2);

        return $r0;
    }

    public static org.apache.jena.riot.system.StreamRDF writer(java.io.OutputStream, org.apache.jena.riot.out.CharSpace)
    {
        java.io.OutputStream r3;
        org.apache.jena.atlas.io.AWriter $r4;
        org.apache.jena.riot.writer.WriterStreamRDFTuples $r2;
        org.apache.jena.riot.system.StreamRDF $r5;
        org.apache.jena.riot.out.CharSpace r0;
        int[] $r1;
        int $i0, $i1;

        r3 := @parameter0: java.io.OutputStream;

        r0 := @parameter1: org.apache.jena.riot.out.CharSpace;

        $r1 = <org.apache.jena.riot.system.StreamRDFLib$1: int[] $SwitchMap$org$apache$jena$riot$out$CharSpace>;

        $i0 = virtualinvoke r0.<org.apache.jena.riot.out.CharSpace: int ordinal()>();

        $i1 = $r1[$i0];

        lookupswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            default: goto label2;
        };

     label1:
        $r2 = new org.apache.jena.riot.writer.WriterStreamRDFTuples;

        $r4 = staticinvoke <org.apache.jena.atlas.io.IO: org.apache.jena.atlas.io.AWriter wrapASCII(java.io.OutputStream)>(r3);

        specialinvoke $r2.<org.apache.jena.riot.writer.WriterStreamRDFTuples: void <init>(org.apache.jena.atlas.io.AWriter,org.apache.jena.riot.out.CharSpace)>($r4, r0);

        return $r2;

     label2:
        $r5 = staticinvoke <org.apache.jena.riot.system.StreamRDFLib: org.apache.jena.riot.system.StreamRDF writer(java.io.OutputStream)>(r3);

        return $r5;
    }

    public static org.apache.jena.riot.system.StreamRDF writer(org.apache.jena.atlas.io.AWriter, org.apache.jena.riot.out.CharSpace)
    {
        org.apache.jena.atlas.io.AWriter r1;
        org.apache.jena.riot.out.CharSpace r2;
        org.apache.jena.riot.writer.WriterStreamRDFTuples $r0;

        r1 := @parameter0: org.apache.jena.atlas.io.AWriter;

        r2 := @parameter1: org.apache.jena.riot.out.CharSpace;

        $r0 = new org.apache.jena.riot.writer.WriterStreamRDFTuples;

        specialinvoke $r0.<org.apache.jena.riot.writer.WriterStreamRDFTuples: void <init>(org.apache.jena.atlas.io.AWriter,org.apache.jena.riot.out.CharSpace)>(r1, r2);

        return $r0;
    }

    public static org.apache.jena.riot.system.StreamRDF writer(java.io.Writer, org.apache.jena.riot.out.CharSpace)
    {
        org.apache.jena.atlas.io.AWriter $r2;
        org.apache.jena.riot.writer.WriterStreamRDFTuples $r0;
        java.io.Writer r1;
        org.apache.jena.riot.out.CharSpace r3;

        r1 := @parameter0: java.io.Writer;

        r3 := @parameter1: org.apache.jena.riot.out.CharSpace;

        $r0 = new org.apache.jena.riot.writer.WriterStreamRDFTuples;

        $r2 = staticinvoke <org.apache.jena.atlas.io.IO: org.apache.jena.atlas.io.AWriter wrap(java.io.Writer)>(r1);

        specialinvoke $r0.<org.apache.jena.riot.writer.WriterStreamRDFTuples: void <init>(org.apache.jena.atlas.io.AWriter,org.apache.jena.riot.out.CharSpace)>($r2, r3);

        return $r0;
    }

    public static org.apache.jena.riot.system.StreamRDF graph(com.hp.hpl.jena.graph.Graph)
    {
        org.apache.jena.riot.system.StreamRDFLib$ParserOutputGraph $r0;
        com.hp.hpl.jena.graph.Graph r1;

        r1 := @parameter0: com.hp.hpl.jena.graph.Graph;

        $r0 = new org.apache.jena.riot.system.StreamRDFLib$ParserOutputGraph;

        specialinvoke $r0.<org.apache.jena.riot.system.StreamRDFLib$ParserOutputGraph: void <init>(com.hp.hpl.jena.graph.Graph)>(r1);

        return $r0;
    }

    public static org.apache.jena.riot.system.StreamRDF dataset(com.hp.hpl.jena.sparql.core.DatasetGraph)
    {
        com.hp.hpl.jena.sparql.core.DatasetGraph r1;
        org.apache.jena.riot.system.StreamRDFLib$ParserOutputDataset $r0;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.DatasetGraph;

        $r0 = new org.apache.jena.riot.system.StreamRDFLib$ParserOutputDataset;

        specialinvoke $r0.<org.apache.jena.riot.system.StreamRDFLib$ParserOutputDataset: void <init>(com.hp.hpl.jena.sparql.core.DatasetGraph)>(r1);

        return $r0;
    }

    public static void triplesToStream(org.apache.jena.riot.system.StreamRDF, java.util.Iterator)
    {
        java.util.Iterator r0;
        java.lang.Object $r1;
        org.apache.jena.riot.system.StreamRDF r3;
        boolean $z0;
        com.hp.hpl.jena.graph.Triple r2;

        r3 := @parameter0: org.apache.jena.riot.system.StreamRDF;

        r0 := @parameter1: java.util.Iterator;

     label1:
        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r1 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        r2 = (com.hp.hpl.jena.graph.Triple) $r1;

        interfaceinvoke r3.<org.apache.jena.riot.system.StreamRDF: void triple(com.hp.hpl.jena.graph.Triple)>(r2);

        goto label1;

     label2:
        return;
    }

    public static void quadsToStream(org.apache.jena.riot.system.StreamRDF, java.util.Iterator)
    {
        java.util.Iterator r0;
        java.lang.Object $r1;
        org.apache.jena.riot.system.StreamRDF r3;
        boolean $z0;
        com.hp.hpl.jena.sparql.core.Quad r2;

        r3 := @parameter0: org.apache.jena.riot.system.StreamRDF;

        r0 := @parameter1: java.util.Iterator;

     label1:
        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r1 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        r2 = (com.hp.hpl.jena.sparql.core.Quad) $r1;

        interfaceinvoke r3.<org.apache.jena.riot.system.StreamRDF: void quad(com.hp.hpl.jena.sparql.core.Quad)>(r2);

        goto label1;

     label2:
        return;
    }

    public static org.apache.jena.riot.system.StreamRDF sinkTriples(org.apache.jena.atlas.lib.Sink)
    {
        org.apache.jena.atlas.lib.Sink r1;
        org.apache.jena.riot.system.StreamRDFLib$ParserOutputSinkTriples $r0;

        r1 := @parameter0: org.apache.jena.atlas.lib.Sink;

        $r0 = new org.apache.jena.riot.system.StreamRDFLib$ParserOutputSinkTriples;

        specialinvoke $r0.<org.apache.jena.riot.system.StreamRDFLib$ParserOutputSinkTriples: void <init>(org.apache.jena.atlas.lib.Sink)>(r1);

        return $r0;
    }

    public static org.apache.jena.riot.system.StreamRDF sinkQuads(org.apache.jena.atlas.lib.Sink)
    {
        org.apache.jena.atlas.lib.Sink r1;
        org.apache.jena.riot.system.StreamRDFLib$ParserOutputSinkQuads $r0;

        r1 := @parameter0: org.apache.jena.atlas.lib.Sink;

        $r0 = new org.apache.jena.riot.system.StreamRDFLib$ParserOutputSinkQuads;

        specialinvoke $r0.<org.apache.jena.riot.system.StreamRDFLib$ParserOutputSinkQuads: void <init>(org.apache.jena.atlas.lib.Sink)>(r1);

        return $r0;
    }

    public static org.apache.jena.riot.system.StreamRDF extendTriplesToQuads(org.apache.jena.riot.system.StreamRDF)
    {
        org.apache.jena.riot.system.StreamRDF r0, $r2;
        com.hp.hpl.jena.graph.Node $r1;

        r0 := @parameter0: org.apache.jena.riot.system.StreamRDF;

        $r1 = <com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node tripleInQuad>;

        $r2 = staticinvoke <org.apache.jena.riot.system.StreamRDFLib: org.apache.jena.riot.system.StreamRDF extendTriplesToQuads(com.hp.hpl.jena.graph.Node,org.apache.jena.riot.system.StreamRDF)>($r1, r0);

        return $r2;
    }

    public static org.apache.jena.riot.system.StreamRDF extendTriplesToQuads(com.hp.hpl.jena.graph.Node, org.apache.jena.riot.system.StreamRDF)
    {
        org.apache.jena.riot.system.StreamRDF r2;
        com.hp.hpl.jena.graph.Node r1;
        org.apache.jena.riot.system.StreamRDFLib$ParserOutputSinkTriplesToQuads $r0;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: org.apache.jena.riot.system.StreamRDF;

        $r0 = new org.apache.jena.riot.system.StreamRDFLib$ParserOutputSinkTriplesToQuads;

        specialinvoke $r0.<org.apache.jena.riot.system.StreamRDFLib$ParserOutputSinkTriplesToQuads: void <init>(com.hp.hpl.jena.graph.Node,org.apache.jena.riot.system.StreamRDF)>(r1, r2);

        return $r0;
    }

    public static org.apache.jena.riot.lang.StreamRDFCounting count()
    {
        org.apache.jena.riot.system.StreamRDFLib$StreamRDFCountingBase $r0;
        org.apache.jena.riot.system.StreamRDF $r1;

        $r0 = new org.apache.jena.riot.system.StreamRDFLib$StreamRDFCountingBase;

        $r1 = staticinvoke <org.apache.jena.riot.system.StreamRDFLib: org.apache.jena.riot.system.StreamRDF sinkNull()>();

        specialinvoke $r0.<org.apache.jena.riot.system.StreamRDFLib$StreamRDFCountingBase: void <init>(org.apache.jena.riot.system.StreamRDF)>($r1);

        return $r0;
    }

    public static org.apache.jena.riot.lang.StreamRDFCounting count(org.apache.jena.riot.system.StreamRDF)
    {
        org.apache.jena.riot.system.StreamRDFLib$StreamRDFCountingBase $r0;
        org.apache.jena.riot.system.StreamRDF r1;

        r1 := @parameter0: org.apache.jena.riot.system.StreamRDF;

        $r0 = new org.apache.jena.riot.system.StreamRDFLib$StreamRDFCountingBase;

        specialinvoke $r0.<org.apache.jena.riot.system.StreamRDFLib$StreamRDFCountingBase: void <init>(org.apache.jena.riot.system.StreamRDF)>(r1);

        return $r0;
    }
}
