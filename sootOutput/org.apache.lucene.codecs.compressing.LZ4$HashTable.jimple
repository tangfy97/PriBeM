final class org.apache.lucene.codecs.compressing.LZ4$HashTable extends java.lang.Object
{
    private int hashLog;
    private org.apache.lucene.util.packed.PackedInts$Mutable hashTable;

    void <init>()
    {
        org.apache.lucene.codecs.compressing.LZ4$HashTable r0;

        r0 := @this: org.apache.lucene.codecs.compressing.LZ4$HashTable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    void reset(int)
    {
        long $l2;
        org.apache.lucene.codecs.compressing.LZ4$HashTable r0;
        int i0, $i1, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        org.apache.lucene.util.packed.PackedInts$Mutable $r1, $r2, $r3, $r4, $r5;

        r0 := @this: org.apache.lucene.codecs.compressing.LZ4$HashTable;

        i0 := @parameter0: int;

        $i1 = i0 - 5;

        $l2 = (long) $i1;

        $i3 = staticinvoke <org.apache.lucene.util.packed.PackedInts: int bitsRequired(long)>($l2);

        $i4 = $i3 - 1;

        $i5 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i4);

        i6 = 32 - $i5;

        $i7 = 17 - i6;

        r0.<org.apache.lucene.codecs.compressing.LZ4$HashTable: int hashLog> = $i7;

        $r1 = r0.<org.apache.lucene.codecs.compressing.LZ4$HashTable: org.apache.lucene.util.packed.PackedInts$Mutable hashTable>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.lucene.codecs.compressing.LZ4$HashTable: org.apache.lucene.util.packed.PackedInts$Mutable hashTable>;

        $i8 = interfaceinvoke $r2.<org.apache.lucene.util.packed.PackedInts$Mutable: int size()>();

        $i9 = r0.<org.apache.lucene.codecs.compressing.LZ4$HashTable: int hashLog>;

        $i10 = 1 << $i9;

        if $i8 < $i10 goto label1;

        $r3 = r0.<org.apache.lucene.codecs.compressing.LZ4$HashTable: org.apache.lucene.util.packed.PackedInts$Mutable hashTable>;

        $i11 = interfaceinvoke $r3.<org.apache.lucene.util.packed.PackedInts$Mutable: int getBitsPerValue()>();

        if $i11 >= $i3 goto label2;

     label1:
        $i12 = r0.<org.apache.lucene.codecs.compressing.LZ4$HashTable: int hashLog>;

        $i13 = 1 << $i12;

        $r5 = staticinvoke <org.apache.lucene.util.packed.PackedInts: org.apache.lucene.util.packed.PackedInts$Mutable getMutable(int,int,float)>($i13, $i3, 0.2F);

        r0.<org.apache.lucene.codecs.compressing.LZ4$HashTable: org.apache.lucene.util.packed.PackedInts$Mutable hashTable> = $r5;

        goto label3;

     label2:
        $r4 = r0.<org.apache.lucene.codecs.compressing.LZ4$HashTable: org.apache.lucene.util.packed.PackedInts$Mutable hashTable>;

        interfaceinvoke $r4.<org.apache.lucene.util.packed.PackedInts$Mutable: void clear()>();

     label3:
        return;
    }

    static int access$000(org.apache.lucene.codecs.compressing.LZ4$HashTable)
    {
        int $i0;
        org.apache.lucene.codecs.compressing.LZ4$HashTable r0;

        r0 := @parameter0: org.apache.lucene.codecs.compressing.LZ4$HashTable;

        $i0 = r0.<org.apache.lucene.codecs.compressing.LZ4$HashTable: int hashLog>;

        return $i0;
    }

    static org.apache.lucene.util.packed.PackedInts$Mutable access$100(org.apache.lucene.codecs.compressing.LZ4$HashTable)
    {
        org.apache.lucene.util.packed.PackedInts$Mutable $r1;
        org.apache.lucene.codecs.compressing.LZ4$HashTable r0;

        r0 := @parameter0: org.apache.lucene.codecs.compressing.LZ4$HashTable;

        $r1 = r0.<org.apache.lucene.codecs.compressing.LZ4$HashTable: org.apache.lucene.util.packed.PackedInts$Mutable hashTable>;

        return $r1;
    }
}
