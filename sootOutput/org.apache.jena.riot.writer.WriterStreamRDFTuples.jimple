public class org.apache.jena.riot.writer.WriterStreamRDFTuples extends java.lang.Object implements org.apache.jena.riot.system.StreamRDF
{
    private final org.apache.jena.atlas.io.AWriter out;
    private final org.apache.jena.riot.out.NodeFormatter nodeFmt;

    public void <init>(org.apache.jena.atlas.io.AWriter)
    {
        org.apache.jena.atlas.io.AWriter r1;
        org.apache.jena.riot.out.CharSpace $r2;
        org.apache.jena.riot.writer.WriterStreamRDFTuples r0;

        r0 := @this: org.apache.jena.riot.writer.WriterStreamRDFTuples;

        r1 := @parameter0: org.apache.jena.atlas.io.AWriter;

        $r2 = <org.apache.jena.riot.out.CharSpace: org.apache.jena.riot.out.CharSpace UTF8>;

        specialinvoke r0.<org.apache.jena.riot.writer.WriterStreamRDFTuples: void <init>(org.apache.jena.atlas.io.AWriter,org.apache.jena.riot.out.CharSpace)>(r1, $r2);

        return;
    }

    public void <init>(org.apache.jena.atlas.io.AWriter, org.apache.jena.riot.out.CharSpace)
    {
        org.apache.jena.riot.out.NodeFormatterNT $r2;
        org.apache.jena.atlas.io.AWriter r1;
        org.apache.jena.riot.writer.WriterStreamRDFTuples r0;
        org.apache.jena.riot.out.CharSpace r3;

        r0 := @this: org.apache.jena.riot.writer.WriterStreamRDFTuples;

        r1 := @parameter0: org.apache.jena.atlas.io.AWriter;

        r3 := @parameter1: org.apache.jena.riot.out.CharSpace;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.jena.riot.writer.WriterStreamRDFTuples: org.apache.jena.atlas.io.AWriter out> = r1;

        $r2 = new org.apache.jena.riot.out.NodeFormatterNT;

        specialinvoke $r2.<org.apache.jena.riot.out.NodeFormatterNT: void <init>(org.apache.jena.riot.out.CharSpace)>(r3);

        r0.<org.apache.jena.riot.writer.WriterStreamRDFTuples: org.apache.jena.riot.out.NodeFormatter nodeFmt> = $r2;

        return;
    }

    public void start()
    {
        org.apache.jena.riot.writer.WriterStreamRDFTuples r0;

        r0 := @this: org.apache.jena.riot.writer.WriterStreamRDFTuples;

        return;
    }

    public void finish()
    {
        org.apache.jena.atlas.io.AWriter $r1;
        org.apache.jena.riot.writer.WriterStreamRDFTuples r0;

        r0 := @this: org.apache.jena.riot.writer.WriterStreamRDFTuples;

        $r1 = r0.<org.apache.jena.riot.writer.WriterStreamRDFTuples: org.apache.jena.atlas.io.AWriter out>;

        staticinvoke <org.apache.jena.atlas.io.IO: void flush(org.apache.jena.atlas.io.AWriter)>($r1);

        return;
    }

    public void triple(com.hp.hpl.jena.graph.Triple)
    {
        org.apache.jena.atlas.io.AWriter $r5, $r6, $r7;
        org.apache.jena.riot.writer.WriterStreamRDFTuples r4;
        com.hp.hpl.jena.graph.Node $r1, $r2, $r3;
        com.hp.hpl.jena.graph.Triple r0;

        r4 := @this: org.apache.jena.riot.writer.WriterStreamRDFTuples;

        r0 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        specialinvoke r4.<org.apache.jena.riot.writer.WriterStreamRDFTuples: void format(com.hp.hpl.jena.graph.Node)>($r1);

        $r5 = r4.<org.apache.jena.riot.writer.WriterStreamRDFTuples: org.apache.jena.atlas.io.AWriter out>;

        interfaceinvoke $r5.<org.apache.jena.atlas.io.AWriter: void print(java.lang.String)>(" ");

        specialinvoke r4.<org.apache.jena.riot.writer.WriterStreamRDFTuples: void format(com.hp.hpl.jena.graph.Node)>($r2);

        $r6 = r4.<org.apache.jena.riot.writer.WriterStreamRDFTuples: org.apache.jena.atlas.io.AWriter out>;

        interfaceinvoke $r6.<org.apache.jena.atlas.io.AWriter: void print(java.lang.String)>(" ");

        specialinvoke r4.<org.apache.jena.riot.writer.WriterStreamRDFTuples: void format(com.hp.hpl.jena.graph.Node)>($r3);

        $r7 = r4.<org.apache.jena.riot.writer.WriterStreamRDFTuples: org.apache.jena.atlas.io.AWriter out>;

        interfaceinvoke $r7.<org.apache.jena.atlas.io.AWriter: void print(java.lang.String)>(" .\n");

        return;
    }

    public void quad(com.hp.hpl.jena.sparql.core.Quad)
    {
        org.apache.jena.atlas.io.AWriter $r6, $r7, $r8, $r9;
        org.apache.jena.riot.writer.WriterStreamRDFTuples r5;
        com.hp.hpl.jena.graph.Node $r1, $r2, $r3, $r4;
        com.hp.hpl.jena.sparql.core.Quad r0;
        boolean $z0;

        r5 := @this: org.apache.jena.riot.writer.WriterStreamRDFTuples;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.Quad;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getSubject()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getObject()>();

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getGraph()>();

        specialinvoke r5.<org.apache.jena.riot.writer.WriterStreamRDFTuples: void format(com.hp.hpl.jena.graph.Node)>($r1);

        $r6 = r5.<org.apache.jena.riot.writer.WriterStreamRDFTuples: org.apache.jena.atlas.io.AWriter out>;

        interfaceinvoke $r6.<org.apache.jena.atlas.io.AWriter: void print(java.lang.String)>(" ");

        specialinvoke r5.<org.apache.jena.riot.writer.WriterStreamRDFTuples: void format(com.hp.hpl.jena.graph.Node)>($r2);

        $r7 = r5.<org.apache.jena.riot.writer.WriterStreamRDFTuples: org.apache.jena.atlas.io.AWriter out>;

        interfaceinvoke $r7.<org.apache.jena.atlas.io.AWriter: void print(java.lang.String)>(" ");

        specialinvoke r5.<org.apache.jena.riot.writer.WriterStreamRDFTuples: void format(com.hp.hpl.jena.graph.Node)>($r3);

        $z0 = staticinvoke <org.apache.jena.riot.writer.WriterStreamRDFTuples: boolean outputGraphSlot(com.hp.hpl.jena.graph.Node)>($r4);

        if $z0 == 0 goto label1;

        $r9 = r5.<org.apache.jena.riot.writer.WriterStreamRDFTuples: org.apache.jena.atlas.io.AWriter out>;

        interfaceinvoke $r9.<org.apache.jena.atlas.io.AWriter: void print(java.lang.String)>(" ");

        specialinvoke r5.<org.apache.jena.riot.writer.WriterStreamRDFTuples: void format(com.hp.hpl.jena.graph.Node)>($r4);

     label1:
        $r8 = r5.<org.apache.jena.riot.writer.WriterStreamRDFTuples: org.apache.jena.atlas.io.AWriter out>;

        interfaceinvoke $r8.<org.apache.jena.atlas.io.AWriter: void print(java.lang.String)>(" .\n");

        return;
    }

    public void tuple(org.apache.jena.atlas.lib.Tuple)
    {
        org.apache.jena.atlas.io.AWriter $r3, $r6;
        java.util.Iterator $r1;
        org.apache.jena.atlas.lib.Tuple r0;
        org.apache.jena.riot.writer.WriterStreamRDFTuples r2;
        com.hp.hpl.jena.graph.Node r5;
        java.lang.Object $r4;
        boolean $z0, z1;

        r2 := @this: org.apache.jena.riot.writer.WriterStreamRDFTuples;

        r0 := @parameter0: org.apache.jena.atlas.lib.Tuple;

        z1 = 1;

        $r1 = virtualinvoke r0.<org.apache.jena.atlas.lib.Tuple: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.hp.hpl.jena.graph.Node) $r4;

        if z1 != 0 goto label2;

        $r6 = r2.<org.apache.jena.riot.writer.WriterStreamRDFTuples: org.apache.jena.atlas.io.AWriter out>;

        interfaceinvoke $r6.<org.apache.jena.atlas.io.AWriter: void print(java.lang.String)>(" ");

     label2:
        z1 = 0;

        specialinvoke r2.<org.apache.jena.riot.writer.WriterStreamRDFTuples: void format(com.hp.hpl.jena.graph.Node)>(r5);

        goto label1;

     label3:
        $r3 = r2.<org.apache.jena.riot.writer.WriterStreamRDFTuples: org.apache.jena.atlas.io.AWriter out>;

        interfaceinvoke $r3.<org.apache.jena.atlas.io.AWriter: void print(java.lang.String)>(" .\n");

        return;
    }

    private void format(com.hp.hpl.jena.graph.Node)
    {
        org.apache.jena.atlas.io.AWriter $r2;
        org.apache.jena.riot.writer.WriterStreamRDFTuples r0;
        com.hp.hpl.jena.graph.Node r1;
        org.apache.jena.riot.out.NodeFormatter $r3;

        r0 := @this: org.apache.jena.riot.writer.WriterStreamRDFTuples;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r3 = r0.<org.apache.jena.riot.writer.WriterStreamRDFTuples: org.apache.jena.riot.out.NodeFormatter nodeFmt>;

        $r2 = r0.<org.apache.jena.riot.writer.WriterStreamRDFTuples: org.apache.jena.atlas.io.AWriter out>;

        interfaceinvoke $r3.<org.apache.jena.riot.out.NodeFormatter: void format(org.apache.jena.atlas.io.AWriter,com.hp.hpl.jena.graph.Node)>($r2, r1);

        return;
    }

    public void base(java.lang.String)
    {
        java.lang.String r1;
        org.apache.jena.riot.writer.WriterStreamRDFTuples r0;

        r0 := @this: org.apache.jena.riot.writer.WriterStreamRDFTuples;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void prefix(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        org.apache.jena.riot.writer.WriterStreamRDFTuples r0;

        r0 := @this: org.apache.jena.riot.writer.WriterStreamRDFTuples;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        return;
    }

    private static boolean outputGraphSlot(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0, $r1;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        if r0 == null goto label1;

        $r1 = <com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node tripleInQuad>;

        if r0 == $r1 goto label1;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Quad: boolean isDefaultGraph(com.hp.hpl.jena.graph.Node)>(r0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }
}
