public final class org.codehaus.jackson.map.deser.std.StdDeserializer$NumberDeserializer extends org.codehaus.jackson.map.deser.std.StdScalarDeserializer
{

    public void <init>()
    {
        org.codehaus.jackson.map.deser.std.StdDeserializer$NumberDeserializer r0;

        r0 := @this: org.codehaus.jackson.map.deser.std.StdDeserializer$NumberDeserializer;

        specialinvoke r0.<org.codehaus.jackson.map.deser.std.StdScalarDeserializer: void <init>(java.lang.Class)>(class "Ljava/lang/Number;");

        return;
    }

    public java.lang.Number deserialize(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.JsonToken $r1, $r2, $r3, $r4;
        java.lang.Integer $r13;
        java.math.BigDecimal $r20, $r27;
        byte $b2, $b3;
        java.lang.Long $r12;
        java.math.BigInteger $r23, $r29;
        boolean $z0, $z1, $z2, $z3;
        org.codehaus.jackson.map.deser.std.StdDeserializer$NumberDeserializer r6;
        java.lang.Double $r19, $r28;
        long $l1;
        org.codehaus.jackson.map.DeserializationContext r5;
        org.codehaus.jackson.map.JsonMappingException $r8, $r26;
        int $i0, $i4, $i5, $i6;
        java.lang.String $r9, $r10;
        java.lang.Number $r22;
        org.codehaus.jackson.JsonParser r0;
        double $d0;
        org.codehaus.jackson.map.DeserializationConfig$Feature $r11, $r15, $r18, $r21;
        java.lang.IllegalArgumentException $r24;
        java.lang.Class $r7, $r25;

        r6 := @this: org.codehaus.jackson.map.deser.std.StdDeserializer$NumberDeserializer;

        r0 := @parameter0: org.codehaus.jackson.JsonParser;

        r5 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r2 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_INT>;

        if $r1 != $r2 goto label02;

        $r21 = <org.codehaus.jackson.map.DeserializationConfig$Feature: org.codehaus.jackson.map.DeserializationConfig$Feature USE_BIG_INTEGER_FOR_INTS>;

        $z3 = virtualinvoke r5.<org.codehaus.jackson.map.DeserializationContext: boolean isEnabled(org.codehaus.jackson.map.DeserializationConfig$Feature)>($r21);

        if $z3 == 0 goto label01;

        $r23 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.math.BigInteger getBigIntegerValue()>();

        return $r23;

     label01:
        $r22 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.lang.Number getNumberValue()>();

        return $r22;

     label02:
        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_FLOAT>;

        if $r1 != $r3 goto label04;

        $r18 = <org.codehaus.jackson.map.DeserializationConfig$Feature: org.codehaus.jackson.map.DeserializationConfig$Feature USE_BIG_DECIMAL_FOR_FLOATS>;

        $z2 = virtualinvoke r5.<org.codehaus.jackson.map.DeserializationContext: boolean isEnabled(org.codehaus.jackson.map.DeserializationConfig$Feature)>($r18);

        if $z2 == 0 goto label03;

        $r20 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.math.BigDecimal getDecimalValue()>();

        return $r20;

     label03:
        $d0 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: double getDoubleValue()>();

        $r19 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r19;

     label04:
        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        if $r1 != $r4 goto label16;

        $r9 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        $r10 = virtualinvoke $r9.<java.lang.String: java.lang.String trim()>();

     label05:
        $i0 = virtualinvoke $r10.<java.lang.String: int indexOf(int)>(46);

        if $i0 < 0 goto label09;

        $r15 = <org.codehaus.jackson.map.DeserializationConfig$Feature: org.codehaus.jackson.map.DeserializationConfig$Feature USE_BIG_DECIMAL_FOR_FLOATS>;

        $z1 = virtualinvoke r5.<org.codehaus.jackson.map.DeserializationContext: boolean isEnabled(org.codehaus.jackson.map.DeserializationConfig$Feature)>($r15);

        if $z1 == 0 goto label07;

        $r27 = new java.math.BigDecimal;

        specialinvoke $r27.<java.math.BigDecimal: void <init>(java.lang.String)>($r10);

     label06:
        return $r27;

     label07:
        $r28 = new java.lang.Double;

        specialinvoke $r28.<java.lang.Double: void <init>(java.lang.String)>($r10);

     label08:
        return $r28;

     label09:
        $r11 = <org.codehaus.jackson.map.DeserializationConfig$Feature: org.codehaus.jackson.map.DeserializationConfig$Feature USE_BIG_INTEGER_FOR_INTS>;

        $z0 = virtualinvoke r5.<org.codehaus.jackson.map.DeserializationContext: boolean isEnabled(org.codehaus.jackson.map.DeserializationConfig$Feature)>($r11);

        if $z0 == 0 goto label11;

        $r29 = new java.math.BigInteger;

        specialinvoke $r29.<java.math.BigInteger: void <init>(java.lang.String)>($r10);

     label10:
        return $r29;

     label11:
        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r10);

        $b2 = $l1 cmp 2147483647L;

        $i5 = (int) $b2;

        if $i5 > 0 goto label13;

        $b3 = $l1 cmp -2147483648L;

        $i6 = (int) $b3;

        if $i6 < 0 goto label13;

        $i4 = (int) $l1;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

     label12:
        return $r13;

     label13:
        $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

     label14:
        return $r12;

     label15:
        $r24 := @caughtexception;

        $r25 = r6.<org.codehaus.jackson.map.deser.std.StdDeserializer$NumberDeserializer: java.lang.Class _valueClass>;

        $r26 = virtualinvoke r5.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r25, "not a valid number");

        throw $r26;

     label16:
        $r7 = r6.<org.codehaus.jackson.map.deser.std.StdDeserializer$NumberDeserializer: java.lang.Class _valueClass>;

        $r8 = virtualinvoke r5.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class,org.codehaus.jackson.JsonToken)>($r7, $r1);

        throw $r8;

        catch java.lang.IllegalArgumentException from label05 to label06 with label15;
        catch java.lang.IllegalArgumentException from label07 to label08 with label15;
        catch java.lang.IllegalArgumentException from label09 to label10 with label15;
        catch java.lang.IllegalArgumentException from label11 to label12 with label15;
        catch java.lang.IllegalArgumentException from label13 to label14 with label15;
    }

    public java.lang.Object deserializeWithType(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext, org.codehaus.jackson.map.TypeDeserializer) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.JsonToken $r2;
        org.codehaus.jackson.map.deser.std.StdDeserializer$NumberDeserializer r3;
        org.codehaus.jackson.map.DeserializationContext r4;
        org.codehaus.jackson.map.TypeDeserializer r6;
        int[] $r1;
        int $i0, $i1;
        java.lang.Object $r7;
        java.lang.Number $r5;
        org.codehaus.jackson.JsonParser r0;

        r3 := @this: org.codehaus.jackson.map.deser.std.StdDeserializer$NumberDeserializer;

        r0 := @parameter0: org.codehaus.jackson.JsonParser;

        r4 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        r6 := @parameter2: org.codehaus.jackson.map.TypeDeserializer;

        $r1 = <org.codehaus.jackson.map.deser.std.StdDeserializer$1: int[] $SwitchMap$org$codehaus$jackson$JsonToken>;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $i0 = virtualinvoke $r2.<org.codehaus.jackson.JsonToken: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label1;
            case 3: goto label1;
            default: goto label2;
        };

     label1:
        $r5 = virtualinvoke r3.<org.codehaus.jackson.map.deser.std.StdDeserializer$NumberDeserializer: java.lang.Number deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>(r0, r4);

        return $r5;

     label2:
        $r7 = virtualinvoke r6.<org.codehaus.jackson.map.TypeDeserializer: java.lang.Object deserializeTypedFromScalar(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>(r0, r4);

        return $r7;
    }

    public volatile java.lang.Object deserialize(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.deser.std.StdDeserializer$NumberDeserializer r0;
        java.lang.Number $r3;
        org.codehaus.jackson.JsonParser r1;
        org.codehaus.jackson.map.DeserializationContext r2;

        r0 := @this: org.codehaus.jackson.map.deser.std.StdDeserializer$NumberDeserializer;

        r1 := @parameter0: org.codehaus.jackson.JsonParser;

        r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.deser.std.StdDeserializer$NumberDeserializer: java.lang.Number deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>(r1, r2);

        return $r3;
    }
}
