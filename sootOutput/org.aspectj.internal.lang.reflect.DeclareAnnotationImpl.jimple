public class org.aspectj.internal.lang.reflect.DeclareAnnotationImpl extends java.lang.Object implements org.aspectj.lang.reflect.DeclareAnnotation
{
    private java.lang.'annotation'.Annotation theAnnotation;
    private java.lang.String annText;
    private org.aspectj.lang.reflect.AjType declaringType;
    private org.aspectj.lang.reflect.DeclareAnnotation$Kind kind;
    private org.aspectj.lang.reflect.TypePattern typePattern;
    private org.aspectj.lang.reflect.SignaturePattern signaturePattern;

    public void <init>(org.aspectj.lang.reflect.AjType, java.lang.String, java.lang.String, java.lang.'annotation'.Annotation, java.lang.String)
    {
        java.lang.IllegalStateException $r3;
        org.aspectj.lang.reflect.AjType r1;
        java.lang.String r2, $r7, r10, r12;
        boolean $z0, $z1, $z2, $z3;
        org.aspectj.lang.reflect.DeclareAnnotation$Kind $r8, $r14, $r15, $r16, $r17, $r18;
        org.aspectj.internal.lang.reflect.DeclareAnnotationImpl r0;
        java.lang.'annotation'.Annotation r11;
        org.aspectj.internal.lang.reflect.TypePatternImpl $r13;
        java.lang.StringBuilder $r4, $r5, $r6;
        org.aspectj.internal.lang.reflect.SignaturePatternImpl $r9;

        r0 := @this: org.aspectj.internal.lang.reflect.DeclareAnnotationImpl;

        r1 := @parameter0: org.aspectj.lang.reflect.AjType;

        r2 := @parameter1: java.lang.String;

        r10 := @parameter2: java.lang.String;

        r11 := @parameter3: java.lang.'annotation'.Annotation;

        r12 := @parameter4: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.aspectj.internal.lang.reflect.DeclareAnnotationImpl: org.aspectj.lang.reflect.AjType declaringType> = r1;

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("at_type");

        if $z0 == 0 goto label1;

        $r16 = <org.aspectj.lang.reflect.DeclareAnnotation$Kind: org.aspectj.lang.reflect.DeclareAnnotation$Kind Type>;

        r0.<org.aspectj.internal.lang.reflect.DeclareAnnotationImpl: org.aspectj.lang.reflect.DeclareAnnotation$Kind kind> = $r16;

        goto label5;

     label1:
        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("at_field");

        if $z1 == 0 goto label2;

        $r15 = <org.aspectj.lang.reflect.DeclareAnnotation$Kind: org.aspectj.lang.reflect.DeclareAnnotation$Kind Field>;

        r0.<org.aspectj.internal.lang.reflect.DeclareAnnotationImpl: org.aspectj.lang.reflect.DeclareAnnotation$Kind kind> = $r15;

        goto label5;

     label2:
        $z2 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("at_method");

        if $z2 == 0 goto label3;

        $r14 = <org.aspectj.lang.reflect.DeclareAnnotation$Kind: org.aspectj.lang.reflect.DeclareAnnotation$Kind Method>;

        r0.<org.aspectj.internal.lang.reflect.DeclareAnnotationImpl: org.aspectj.lang.reflect.DeclareAnnotation$Kind kind> = $r14;

        goto label5;

     label3:
        $z3 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("at_constructor");

        if $z3 == 0 goto label4;

        $r8 = <org.aspectj.lang.reflect.DeclareAnnotation$Kind: org.aspectj.lang.reflect.DeclareAnnotation$Kind Constructor>;

        r0.<org.aspectj.internal.lang.reflect.DeclareAnnotationImpl: org.aspectj.lang.reflect.DeclareAnnotation$Kind kind> = $r8;

        goto label5;

     label4:
        $r3 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown declare annotation kind: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label5:
        $r17 = r0.<org.aspectj.internal.lang.reflect.DeclareAnnotationImpl: org.aspectj.lang.reflect.DeclareAnnotation$Kind kind>;

        $r18 = <org.aspectj.lang.reflect.DeclareAnnotation$Kind: org.aspectj.lang.reflect.DeclareAnnotation$Kind Type>;

        if $r17 != $r18 goto label6;

        $r13 = new org.aspectj.internal.lang.reflect.TypePatternImpl;

        specialinvoke $r13.<org.aspectj.internal.lang.reflect.TypePatternImpl: void <init>(java.lang.String)>(r10);

        r0.<org.aspectj.internal.lang.reflect.DeclareAnnotationImpl: org.aspectj.lang.reflect.TypePattern typePattern> = $r13;

        goto label7;

     label6:
        $r9 = new org.aspectj.internal.lang.reflect.SignaturePatternImpl;

        specialinvoke $r9.<org.aspectj.internal.lang.reflect.SignaturePatternImpl: void <init>(java.lang.String)>(r10);

        r0.<org.aspectj.internal.lang.reflect.DeclareAnnotationImpl: org.aspectj.lang.reflect.SignaturePattern signaturePattern> = $r9;

     label7:
        r0.<org.aspectj.internal.lang.reflect.DeclareAnnotationImpl: java.lang.'annotation'.Annotation theAnnotation> = r11;

        r0.<org.aspectj.internal.lang.reflect.DeclareAnnotationImpl: java.lang.String annText> = r12;

        return;
    }

    public org.aspectj.lang.reflect.AjType getDeclaringType()
    {
        org.aspectj.internal.lang.reflect.DeclareAnnotationImpl r0;
        org.aspectj.lang.reflect.AjType $r1;

        r0 := @this: org.aspectj.internal.lang.reflect.DeclareAnnotationImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.DeclareAnnotationImpl: org.aspectj.lang.reflect.AjType declaringType>;

        return $r1;
    }

    public org.aspectj.lang.reflect.DeclareAnnotation$Kind getKind()
    {
        org.aspectj.lang.reflect.DeclareAnnotation$Kind $r1;
        org.aspectj.internal.lang.reflect.DeclareAnnotationImpl r0;

        r0 := @this: org.aspectj.internal.lang.reflect.DeclareAnnotationImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.DeclareAnnotationImpl: org.aspectj.lang.reflect.DeclareAnnotation$Kind kind>;

        return $r1;
    }

    public org.aspectj.lang.reflect.SignaturePattern getSignaturePattern()
    {
        org.aspectj.lang.reflect.SignaturePattern $r1;
        org.aspectj.internal.lang.reflect.DeclareAnnotationImpl r0;

        r0 := @this: org.aspectj.internal.lang.reflect.DeclareAnnotationImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.DeclareAnnotationImpl: org.aspectj.lang.reflect.SignaturePattern signaturePattern>;

        return $r1;
    }

    public org.aspectj.lang.reflect.TypePattern getTypePattern()
    {
        org.aspectj.lang.reflect.TypePattern $r1;
        org.aspectj.internal.lang.reflect.DeclareAnnotationImpl r0;

        r0 := @this: org.aspectj.internal.lang.reflect.DeclareAnnotationImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.DeclareAnnotationImpl: org.aspectj.lang.reflect.TypePattern typePattern>;

        return $r1;
    }

    public java.lang.'annotation'.Annotation getAnnotation()
    {
        java.lang.'annotation'.Annotation $r1;
        org.aspectj.internal.lang.reflect.DeclareAnnotationImpl r0;

        r0 := @this: org.aspectj.internal.lang.reflect.DeclareAnnotationImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.DeclareAnnotationImpl: java.lang.'annotation'.Annotation theAnnotation>;

        return $r1;
    }

    public java.lang.String getAnnotationAsText()
    {
        java.lang.String $r1;
        org.aspectj.internal.lang.reflect.DeclareAnnotationImpl r0;

        r0 := @this: org.aspectj.internal.lang.reflect.DeclareAnnotationImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.DeclareAnnotationImpl: java.lang.String annText>;

        return $r1;
    }

    public java.lang.String toString()
    {
        org.aspectj.lang.reflect.TypePattern $r10;
        org.aspectj.lang.reflect.SignaturePattern $r4, $r6, $r8;
        int[] $r2;
        java.lang.StringBuffer $r0;
        int $i0, $i1;
        java.lang.String $r5, $r7, $r9, $r11, $r12, $r13;
        org.aspectj.lang.reflect.DeclareAnnotation$Kind $r3;
        org.aspectj.internal.lang.reflect.DeclareAnnotationImpl r1;

        r1 := @this: org.aspectj.internal.lang.reflect.DeclareAnnotationImpl;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("declare @");

        $r2 = <org.aspectj.internal.lang.reflect.DeclareAnnotationImpl$1: int[] $SwitchMap$org$aspectj$lang$reflect$DeclareAnnotation$Kind>;

        $r3 = virtualinvoke r1.<org.aspectj.internal.lang.reflect.DeclareAnnotationImpl: org.aspectj.lang.reflect.DeclareAnnotation$Kind getKind()>();

        $i0 = virtualinvoke $r3.<org.aspectj.lang.reflect.DeclareAnnotation$Kind: int ordinal()>();

        $i1 = $r2[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            default: goto label5;
        };

     label1:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("type : ");

        $r10 = virtualinvoke r1.<org.aspectj.internal.lang.reflect.DeclareAnnotationImpl: org.aspectj.lang.reflect.TypePattern getTypePattern()>();

        $r11 = interfaceinvoke $r10.<org.aspectj.lang.reflect.TypePattern: java.lang.String asString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        goto label5;

     label2:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("method : ");

        $r8 = virtualinvoke r1.<org.aspectj.internal.lang.reflect.DeclareAnnotationImpl: org.aspectj.lang.reflect.SignaturePattern getSignaturePattern()>();

        $r9 = interfaceinvoke $r8.<org.aspectj.lang.reflect.SignaturePattern: java.lang.String asString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        goto label5;

     label3:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("field : ");

        $r6 = virtualinvoke r1.<org.aspectj.internal.lang.reflect.DeclareAnnotationImpl: org.aspectj.lang.reflect.SignaturePattern getSignaturePattern()>();

        $r7 = interfaceinvoke $r6.<org.aspectj.lang.reflect.SignaturePattern: java.lang.String asString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        goto label5;

     label4:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("constructor : ");

        $r4 = virtualinvoke r1.<org.aspectj.internal.lang.reflect.DeclareAnnotationImpl: org.aspectj.lang.reflect.SignaturePattern getSignaturePattern()>();

        $r5 = interfaceinvoke $r4.<org.aspectj.lang.reflect.SignaturePattern: java.lang.String asString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

     label5:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" : ");

        $r12 = virtualinvoke r1.<org.aspectj.internal.lang.reflect.DeclareAnnotationImpl: java.lang.String getAnnotationAsText()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r13 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r13;
    }
}
