public class org.waveprotocol.wave.model.account.DocumentBasedIndexability extends java.lang.Object implements org.waveprotocol.wave.model.account.ObservableMutableIndexability, org.waveprotocol.wave.model.adt.ObservableBasicMap$Listener
{
    public static final java.lang.String INDEX_TAG;
    public static final java.lang.String ADDRESS_ATTR;
    public static final java.lang.String VALUE_ATTR;
    private final org.waveprotocol.wave.model.adt.ObservableBasicMap data;
    private final org.waveprotocol.wave.model.util.CopyOnWriteSet listeners;

    void <init>(org.waveprotocol.wave.model.adt.ObservableBasicMap)
    {
        org.waveprotocol.wave.model.adt.ObservableBasicMap r2;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        org.waveprotocol.wave.model.account.DocumentBasedIndexability r0;

        r0 := @this: org.waveprotocol.wave.model.account.DocumentBasedIndexability;

        r2 := @parameter0: org.waveprotocol.wave.model.adt.ObservableBasicMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CopyOnWriteSet: org.waveprotocol.wave.model.util.CopyOnWriteSet create()>();

        r0.<org.waveprotocol.wave.model.account.DocumentBasedIndexability: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners> = $r1;

        r0.<org.waveprotocol.wave.model.account.DocumentBasedIndexability: org.waveprotocol.wave.model.adt.ObservableBasicMap data> = r2;

        return;
    }

    public static org.waveprotocol.wave.model.account.DocumentBasedIndexability create(org.waveprotocol.wave.model.document.util.DocEventRouter)
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap $r5;
        org.waveprotocol.wave.model.document.util.DocEventRouter r0;
        org.waveprotocol.wave.model.util.Serializer $r4;
        java.lang.Object $r2;
        org.waveprotocol.wave.model.document.ObservableDocument $r1;
        org.waveprotocol.wave.model.util.Serializer$EnumSerializer $r3;
        org.waveprotocol.wave.model.account.DocumentBasedIndexability $r6;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.DocEventRouter;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.DocEventRouter: org.waveprotocol.wave.model.document.ObservableDocument getDocument()>();

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.ObservableDocument: java.lang.Object getDocumentElement()>();

        $r4 = <org.waveprotocol.wave.model.wave.ParticipantIdSerializer: org.waveprotocol.wave.model.util.Serializer INSTANCE>;

        $r3 = new org.waveprotocol.wave.model.util.Serializer$EnumSerializer;

        specialinvoke $r3.<org.waveprotocol.wave.model.util.Serializer$EnumSerializer: void <init>(java.lang.Class)>(class "Lorg/waveprotocol/wave/model/account/IndexDecision;");

        $r5 = staticinvoke <org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap: org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap create(org.waveprotocol.wave.model.document.util.DocumentEventRouter,java.lang.Object,org.waveprotocol.wave.model.util.Serializer,org.waveprotocol.wave.model.util.Serializer,java.lang.String,java.lang.String,java.lang.String)>(r0, $r2, $r4, $r3, "index", "address", "i");

        $r6 = new org.waveprotocol.wave.model.account.DocumentBasedIndexability;

        specialinvoke $r6.<org.waveprotocol.wave.model.account.DocumentBasedIndexability: void <init>(org.waveprotocol.wave.model.adt.ObservableBasicMap)>($r5);

        virtualinvoke $r5.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap: void addListener(org.waveprotocol.wave.model.adt.ObservableBasicMap$Listener)>($r6);

        return $r6;
    }

    public void setIndexability(org.waveprotocol.wave.model.wave.ParticipantId, org.waveprotocol.wave.model.account.IndexDecision)
    {
        org.waveprotocol.wave.model.adt.ObservableBasicMap $r4, $r5;
        org.waveprotocol.wave.model.account.IndexDecision $r2, r3;
        org.waveprotocol.wave.model.wave.ParticipantId r0;
        org.waveprotocol.wave.model.account.DocumentBasedIndexability r1;

        r1 := @this: org.waveprotocol.wave.model.account.DocumentBasedIndexability;

        r0 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        r3 := @parameter1: org.waveprotocol.wave.model.account.IndexDecision;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "Null participant");

        $r2 = virtualinvoke r1.<org.waveprotocol.wave.model.account.DocumentBasedIndexability: org.waveprotocol.wave.model.account.IndexDecision getIndexability(org.waveprotocol.wave.model.wave.ParticipantId)>(r0);

        if r3 != null goto label1;

        if $r2 == null goto label2;

        $r5 = r1.<org.waveprotocol.wave.model.account.DocumentBasedIndexability: org.waveprotocol.wave.model.adt.ObservableBasicMap data>;

        interfaceinvoke $r5.<org.waveprotocol.wave.model.adt.ObservableBasicMap: void remove(java.lang.Object)>(r0);

        goto label2;

     label1:
        $r4 = r1.<org.waveprotocol.wave.model.account.DocumentBasedIndexability: org.waveprotocol.wave.model.adt.ObservableBasicMap data>;

        interfaceinvoke $r4.<org.waveprotocol.wave.model.adt.ObservableBasicMap: boolean put(java.lang.Object,java.lang.Object)>(r0, r3);

     label2:
        return;
    }

    public org.waveprotocol.wave.model.account.IndexDecision getIndexability(org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.adt.ObservableBasicMap $r2;
        org.waveprotocol.wave.model.account.IndexDecision $r4;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.wave.ParticipantId r1;
        org.waveprotocol.wave.model.account.DocumentBasedIndexability r0;

        r0 := @this: org.waveprotocol.wave.model.account.DocumentBasedIndexability;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        $r2 = r0.<org.waveprotocol.wave.model.account.DocumentBasedIndexability: org.waveprotocol.wave.model.adt.ObservableBasicMap data>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.adt.ObservableBasicMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.waveprotocol.wave.model.account.IndexDecision) $r3;

        return $r4;
    }

    public void addListener(org.waveprotocol.wave.model.account.ObservableIndexability$Listener)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.account.ObservableIndexability$Listener r1;
        org.waveprotocol.wave.model.account.DocumentBasedIndexability r0;

        r0 := @this: org.waveprotocol.wave.model.account.DocumentBasedIndexability;

        r1 := @parameter0: org.waveprotocol.wave.model.account.ObservableIndexability$Listener;

        $r2 = r0.<org.waveprotocol.wave.model.account.DocumentBasedIndexability: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void removeListener(org.waveprotocol.wave.model.account.ObservableIndexability$Listener)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.account.ObservableIndexability$Listener r1;
        org.waveprotocol.wave.model.account.DocumentBasedIndexability r0;

        r0 := @this: org.waveprotocol.wave.model.account.DocumentBasedIndexability;

        r1 := @parameter0: org.waveprotocol.wave.model.account.ObservableIndexability$Listener;

        $r2 = r0.<org.waveprotocol.wave.model.account.DocumentBasedIndexability: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public void onEntrySet(org.waveprotocol.wave.model.wave.ParticipantId, org.waveprotocol.wave.model.account.IndexDecision, org.waveprotocol.wave.model.account.IndexDecision)
    {
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.wave.ParticipantId r5;
        org.waveprotocol.wave.model.account.DocumentBasedIndexability r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        org.waveprotocol.wave.model.account.IndexDecision r6, r7;
        org.waveprotocol.wave.model.account.ObservableIndexability$Listener r4;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.account.DocumentBasedIndexability;

        r5 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        r7 := @parameter1: org.waveprotocol.wave.model.account.IndexDecision;

        r6 := @parameter2: org.waveprotocol.wave.model.account.IndexDecision;

        $r1 = r0.<org.waveprotocol.wave.model.account.DocumentBasedIndexability: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.account.ObservableIndexability$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.account.ObservableIndexability$Listener: void onChanged(org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.account.IndexDecision)>(r5, r6);

        goto label1;

     label2:
        return;
    }

    public java.util.Set getIndexDecisions()
    {
        org.waveprotocol.wave.model.adt.ObservableBasicMap $r1;
        java.util.Set $r2;
        org.waveprotocol.wave.model.account.DocumentBasedIndexability r0;

        r0 := @this: org.waveprotocol.wave.model.account.DocumentBasedIndexability;

        $r1 = r0.<org.waveprotocol.wave.model.account.DocumentBasedIndexability: org.waveprotocol.wave.model.adt.ObservableBasicMap data>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.adt.ObservableBasicMap: java.util.Set keySet()>();

        return $r2;
    }

    public volatile void removeListener(java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.model.account.ObservableIndexability$Listener $r2;
        org.waveprotocol.wave.model.account.DocumentBasedIndexability r0;

        r0 := @this: org.waveprotocol.wave.model.account.DocumentBasedIndexability;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.account.ObservableIndexability$Listener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.account.DocumentBasedIndexability: void removeListener(org.waveprotocol.wave.model.account.ObservableIndexability$Listener)>($r2);

        return;
    }

    public volatile void addListener(java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.model.account.ObservableIndexability$Listener $r2;
        org.waveprotocol.wave.model.account.DocumentBasedIndexability r0;

        r0 := @this: org.waveprotocol.wave.model.account.DocumentBasedIndexability;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.account.ObservableIndexability$Listener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.account.DocumentBasedIndexability: void addListener(org.waveprotocol.wave.model.account.ObservableIndexability$Listener)>($r2);

        return;
    }

    public volatile void onEntrySet(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.model.account.IndexDecision $r4, $r5;
        java.lang.Object r1, r2, r3;
        org.waveprotocol.wave.model.wave.ParticipantId $r6;
        org.waveprotocol.wave.model.account.DocumentBasedIndexability r0;

        r0 := @this: org.waveprotocol.wave.model.account.DocumentBasedIndexability;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (org.waveprotocol.wave.model.wave.ParticipantId) r1;

        $r5 = (org.waveprotocol.wave.model.account.IndexDecision) r2;

        $r4 = (org.waveprotocol.wave.model.account.IndexDecision) r3;

        virtualinvoke r0.<org.waveprotocol.wave.model.account.DocumentBasedIndexability: void onEntrySet(org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.account.IndexDecision,org.waveprotocol.wave.model.account.IndexDecision)>($r6, $r5, $r4);

        return;
    }

    public static void <clinit>()
    {
        <org.waveprotocol.wave.model.account.DocumentBasedIndexability: java.lang.String VALUE_ATTR> = "i";

        <org.waveprotocol.wave.model.account.DocumentBasedIndexability: java.lang.String ADDRESS_ATTR> = "address";

        <org.waveprotocol.wave.model.account.DocumentBasedIndexability: java.lang.String INDEX_TAG> = "index";

        return;
    }
}
