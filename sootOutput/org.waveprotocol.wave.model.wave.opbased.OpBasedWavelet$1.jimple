class org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$1 extends java.lang.Object implements org.waveprotocol.wave.model.operation.SilentOperationSink
{
    final org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet this$0;

    void <init>(org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet)
    {
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$1 r0;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet r1;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$1;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet;

        r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$1: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void consume(org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation)
    {
        org.waveprotocol.wave.model.operation.SilentOperationSink $r6;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData $r4;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$1 r0;
        org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation r1;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r2, $r3, $r5;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$1;

        r1 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation;

        $r2 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$1: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet this$0>;

        staticinvoke <org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.operation.wave.AddParticipant access$000(org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet,org.waveprotocol.wave.model.operation.wave.WaveletOperation)>($r2, r1);

        $r3 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$1: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet this$0>;

        $r4 = staticinvoke <org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.wave.data.ObservableWaveletData access$100(org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet)>($r3);

        virtualinvoke r1.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: void update(org.waveprotocol.wave.model.wave.data.WaveletData)>($r4);

        $r5 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$1: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet this$0>;

        $r6 = staticinvoke <org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.operation.SilentOperationSink access$200(org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet)>($r5);

        interfaceinvoke $r6.<org.waveprotocol.wave.model.operation.SilentOperationSink: void consume(org.waveprotocol.wave.model.operation.Operation)>(r1);

        return;
    }

    public volatile void consume(org.waveprotocol.wave.model.operation.Operation)
    {
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$1 r0;
        org.waveprotocol.wave.model.operation.Operation r1;
        org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation $r2;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$1;

        r1 := @parameter0: org.waveprotocol.wave.model.operation.Operation;

        $r2 = (org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$1: void consume(org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation)>($r2);

        return;
    }
}
