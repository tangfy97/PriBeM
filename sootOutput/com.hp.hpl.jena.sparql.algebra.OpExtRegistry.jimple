public class com.hp.hpl.jena.sparql.algebra.OpExtRegistry extends java.lang.Object
{
    static java.util.Map extensions;

    public void <init>()
    {
        com.hp.hpl.jena.sparql.algebra.OpExtRegistry r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpExtRegistry;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void register(com.hp.hpl.jena.sparql.algebra.OpExtBuilder)
    {
        com.hp.hpl.jena.sparql.algebra.OpExtRegistry$BuildExt2 $r5;
        java.util.Map $r1;
        java.lang.StringBuilder $r7, $r8, $r10, $r11;
        com.hp.hpl.jena.sparql.algebra.OpExtBuilder r0;
        java.lang.String $r2, $r3, $r4, $r9, $r12;
        com.hp.hpl.jena.sparql.ARQException $r6;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.OpExtBuilder;

        $r1 = <com.hp.hpl.jena.sparql.algebra.OpExtRegistry: java.util.Map extensions>;

        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpExtBuilder: java.lang.String getTagName()>();

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, r0);

        $r3 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpExtBuilder: java.lang.String getTagName()>();

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderOp: boolean contains(java.lang.String)>($r3);

        if $z0 == 0 goto label1;

        $r6 = new com.hp.hpl.jena.sparql.ARQException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tag \'");

        $r9 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpExtBuilder: java.lang.String getTagName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' already defined");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.String)>($r12);

        throw $r6;

     label1:
        $r4 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpExtBuilder: java.lang.String getTagName()>();

        $r5 = new com.hp.hpl.jena.sparql.algebra.OpExtRegistry$BuildExt2;

        specialinvoke $r5.<com.hp.hpl.jena.sparql.algebra.OpExtRegistry$BuildExt2: void <init>()>();

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderOp: void add(java.lang.String,com.hp.hpl.jena.sparql.sse.builders.BuilderOp$Build)>($r4, $r5);

        return;
    }

    public static void unregister(java.lang.String)
    {
        java.lang.String r0;
        java.util.Map $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = <com.hp.hpl.jena.sparql.algebra.OpExtRegistry: java.util.Map extensions>;

        interfaceinvoke $r1.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r0);

        return;
    }

    public static com.hp.hpl.jena.sparql.algebra.OpExtBuilder builder(java.lang.String)
    {
        java.util.Map $r1;
        java.lang.Object $r2;
        java.lang.String r0;
        com.hp.hpl.jena.sparql.algebra.OpExtBuilder $r3;

        r0 := @parameter0: java.lang.String;

        $r1 = <com.hp.hpl.jena.sparql.algebra.OpExtRegistry: java.util.Map extensions>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = (com.hp.hpl.jena.sparql.algebra.OpExtBuilder) $r2;

        return $r3;
    }

    public static com.hp.hpl.jena.sparql.algebra.Op buildExt(java.lang.String, com.hp.hpl.jena.sparql.sse.ItemList)
    {
        com.hp.hpl.jena.sparql.sse.ItemList r2;
        com.hp.hpl.jena.sparql.algebra.op.OpExt $r3;
        java.lang.String r0;
        com.hp.hpl.jena.sparql.algebra.OpExtBuilder $r1;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: com.hp.hpl.jena.sparql.sse.ItemList;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.algebra.OpExtRegistry: com.hp.hpl.jena.sparql.algebra.OpExtBuilder builder(java.lang.String)>(r0);

        $r3 = interfaceinvoke $r1.<com.hp.hpl.jena.sparql.algebra.OpExtBuilder: com.hp.hpl.jena.sparql.algebra.op.OpExt make(com.hp.hpl.jena.sparql.sse.ItemList)>(r2);

        return $r3;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0;
        com.hp.hpl.jena.sparql.algebra.OpExtRegistry$BuildExtExt $r1;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <com.hp.hpl.jena.sparql.algebra.OpExtRegistry: java.util.Map extensions> = $r0;

        $r1 = new com.hp.hpl.jena.sparql.algebra.OpExtRegistry$BuildExtExt;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.algebra.OpExtRegistry$BuildExtExt: void <init>()>();

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderOp: void add(java.lang.String,com.hp.hpl.jena.sparql.sse.builders.BuilderOp$Build)>("ext", $r1);

        return;
    }
}
