public abstract class com.google.inject.internal.util.$ImmutableSet extends com.google.inject.internal.util.$ImmutableCollection implements java.util.Set
{
    private static final com.google.inject.internal.util.$ImmutableSet EMPTY_IMMUTABLE_SET;

    public static com.google.inject.internal.util.$ImmutableSet of()
    {
        com.google.inject.internal.util.$ImmutableSet $r0;

        $r0 = <com.google.inject.internal.util.$ImmutableSet: com.google.inject.internal.util.$ImmutableSet EMPTY_IMMUTABLE_SET>;

        return $r0;
    }

    public static com.google.inject.internal.util.$ImmutableSet of(java.lang.Object)
    {
        int $i0;
        java.lang.Object r1;
        com.google.inject.internal.util.$ImmutableSet$SingletonImmutableSet $r0;

        r1 := @parameter0: java.lang.Object;

        $r0 = new com.google.inject.internal.util.$ImmutableSet$SingletonImmutableSet;

        $i0 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        specialinvoke $r0.<com.google.inject.internal.util.$ImmutableSet$SingletonImmutableSet: void <init>(java.lang.Object,int)>(r1, $i0);

        return $r0;
    }

    public static transient com.google.inject.internal.util.$ImmutableSet of(java.lang.Object[])
    {
        java.lang.Object[] r0;
        java.util.List $r4;
        com.google.inject.internal.util.$ImmutableSet $r2, $r3, $r5;
        int $i0, $i1;
        java.lang.Object $r1;

        r0 := @parameter0: java.lang.Object[];

        $i0 = lengthof r0;

        lookupswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label3;
        };

     label1:
        $r3 = staticinvoke <com.google.inject.internal.util.$ImmutableSet: com.google.inject.internal.util.$ImmutableSet of()>();

        return $r3;

     label2:
        $r1 = r0[0];

        $r2 = staticinvoke <com.google.inject.internal.util.$ImmutableSet: com.google.inject.internal.util.$ImmutableSet of(java.lang.Object)>($r1);

        return $r2;

     label3:
        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0);

        $i1 = lengthof r0;

        $r5 = staticinvoke <com.google.inject.internal.util.$ImmutableSet: com.google.inject.internal.util.$ImmutableSet create(java.lang.Iterable,int)>($r4, $i1);

        return $r5;
    }

    public static com.google.inject.internal.util.$ImmutableSet copyOf(java.lang.Iterable)
    {
        com.google.inject.internal.util.$ImmutableSet $r2, r3;
        java.util.Collection $r1;
        java.lang.Iterable r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Iterable;

        $z0 = r0 instanceof com.google.inject.internal.util.$ImmutableSet;

        if $z0 == 0 goto label1;

        r3 = (com.google.inject.internal.util.$ImmutableSet) r0;

        return r3;

     label1:
        $r1 = staticinvoke <com.google.inject.internal.util.$Collections2: java.util.Collection toCollection(java.lang.Iterable)>(r0);

        $r2 = staticinvoke <com.google.inject.internal.util.$ImmutableSet: com.google.inject.internal.util.$ImmutableSet copyOfInternal(java.util.Collection)>($r1);

        return $r2;
    }

    public static com.google.inject.internal.util.$ImmutableSet copyOf(java.util.Iterator)
    {
        java.util.Iterator r0;
        com.google.inject.internal.util.$ImmutableSet $r2;
        java.util.ArrayList $r1;

        r0 := @parameter0: java.util.Iterator;

        $r1 = staticinvoke <com.google.inject.internal.util.$Lists: java.util.ArrayList newArrayList(java.util.Iterator)>(r0);

        $r2 = staticinvoke <com.google.inject.internal.util.$ImmutableSet: com.google.inject.internal.util.$ImmutableSet copyOfInternal(java.util.Collection)>($r1);

        return $r2;
    }

    private static com.google.inject.internal.util.$ImmutableSet copyOfInternal(java.util.Collection)
    {
        java.util.Iterator $r1;
        java.util.Collection r0;
        com.google.inject.internal.util.$ImmutableSet $r3, $r4, $r5;
        int $i0, $i1;
        java.lang.Object $r2;

        r0 := @parameter0: java.util.Collection;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        lookupswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label3;
        };

     label1:
        $r4 = staticinvoke <com.google.inject.internal.util.$ImmutableSet: com.google.inject.internal.util.$ImmutableSet of()>();

        return $r4;

     label2:
        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r3 = staticinvoke <com.google.inject.internal.util.$ImmutableSet: com.google.inject.internal.util.$ImmutableSet of(java.lang.Object)>($r2);

        return $r3;

     label3:
        $i1 = interfaceinvoke r0.<java.util.Collection: int size()>();

        $r5 = staticinvoke <com.google.inject.internal.util.$ImmutableSet: com.google.inject.internal.util.$ImmutableSet create(java.lang.Iterable,int)>(r0, $i1);

        return $r5;
    }

    void <init>()
    {
        com.google.inject.internal.util.$ImmutableSet r0;

        r0 := @this: com.google.inject.internal.util.$ImmutableSet;

        specialinvoke r0.<com.google.inject.internal.util.$ImmutableCollection: void <init>()>();

        return;
    }

    boolean isHashCodeFast()
    {
        com.google.inject.internal.util.$ImmutableSet r0;

        r0 := @this: com.google.inject.internal.util.$ImmutableSet;

        return 0;
    }

    public boolean equals(java.lang.Object)
    {
        com.google.inject.internal.util.$ImmutableSet r1, $r2;
        int $i0, $i1;
        java.lang.Object r0;
        boolean $z0, $z1, $z2, $z3;

        r1 := @this: com.google.inject.internal.util.$ImmutableSet;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r0 instanceof com.google.inject.internal.util.$ImmutableSet;

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r1.<com.google.inject.internal.util.$ImmutableSet: boolean isHashCodeFast()>();

        if $z1 == 0 goto label2;

        $r2 = (com.google.inject.internal.util.$ImmutableSet) r0;

        $z2 = virtualinvoke $r2.<com.google.inject.internal.util.$ImmutableSet: boolean isHashCodeFast()>();

        if $z2 == 0 goto label2;

        $i0 = virtualinvoke r1.<com.google.inject.internal.util.$ImmutableSet: int hashCode()>();

        $i1 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        if $i0 == $i1 goto label2;

        return 0;

     label2:
        $z3 = staticinvoke <com.google.inject.internal.util.$Collections2: boolean setEquals(java.util.Set,java.lang.Object)>(r1, r0);

        return $z3;
    }

    public int hashCode()
    {
        com.google.inject.internal.util.$ImmutableSet r0;
        java.util.Iterator $r1;
        int $i0, i1;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: com.google.inject.internal.util.$ImmutableSet;

        i1 = 0;

        $r1 = virtualinvoke r0.<com.google.inject.internal.util.$ImmutableSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        i1 = i1 + $i0;

        goto label1;

     label2:
        return i1;
    }

    public abstract com.google.inject.internal.util.$UnmodifiableIterator iterator();

    public java.lang.String toString()
    {
        com.google.inject.internal.util.$ImmutableSet r0;
        int $i0, $i1, $i2, i3;
        java.lang.String $r5, $r7, $r10;
        boolean $z0;
        com.google.inject.internal.util.$UnmodifiableIterator $r1;
        java.lang.StringBuilder $r2, $r3, $r6, $r8;
        java.lang.Object $r4, $r9;

        r0 := @this: com.google.inject.internal.util.$ImmutableSet;

        $z0 = virtualinvoke r0.<com.google.inject.internal.util.$ImmutableSet: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return "[]";

     label1:
        $r1 = virtualinvoke r0.<com.google.inject.internal.util.$ImmutableSet: com.google.inject.internal.util.$UnmodifiableIterator iterator()>();

        $r2 = new java.lang.StringBuilder;

        $i0 = virtualinvoke r0.<com.google.inject.internal.util.$ImmutableSet: int size()>();

        $i1 = $i0 * 16;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $r4 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        i3 = 1;

     label2:
        $i2 = virtualinvoke r0.<com.google.inject.internal.util.$ImmutableSet: int size()>();

        if i3 >= $i2 goto label3;

        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r9 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        i3 = i3 + 1;

        goto label2;

     label3:
        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    private static com.google.inject.internal.util.$ImmutableSet create(java.lang.Iterable, int)
    {
        java.lang.Object[] r0, $r4;
        java.lang.Iterable r2;
        com.google.inject.internal.util.$ImmutableSet$SingletonImmutableSet $r10;
        java.util.ArrayList $r9;
        com.google.inject.internal.util.$ImmutableSet $r8;
        int i0, $i1, i2, $i3, $i4, $i5, i6, i7;
        boolean $z0, $z1;
        java.util.Iterator $r3;
        com.google.inject.internal.util.$ImmutableSet$RegularImmutableSet $r11;
        java.lang.Object $r5, $r6, $r7;

        r2 := @parameter0: java.lang.Iterable;

        i0 := @parameter1: int;

        $i1 = staticinvoke <com.google.inject.internal.util.$Hashing: int chooseTableSize(int)>(i0);

        r0 = newarray (java.lang.Object)[$i1];

        i2 = $i1 - 1;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>(int)>(i0);

        i6 = 0;

        $r3 = interfaceinvoke r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r6 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $i4 = virtualinvoke $r6.<java.lang.Object: int hashCode()>();

        i7 = staticinvoke <com.google.inject.internal.util.$Hashing: int smear(int)>($i4);

     label2:
        $i5 = i7 & i2;

        $r7 = r0[$i5];

        if $r7 != null goto label3;

        r0[$i5] = $r6;

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r6);

        i6 = i6 + $i4;

        goto label5;

     label3:
        $z1 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label4;

        goto label5;

     label4:
        i7 = i7 + 1;

        goto label2;

     label5:
        goto label1;

     label6:
        $i3 = interfaceinvoke $r9.<java.util.List: int size()>();

        if $i3 != 1 goto label7;

        $r10 = new com.google.inject.internal.util.$ImmutableSet$SingletonImmutableSet;

        $r8 = $r10;

        $r5 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(0);

        specialinvoke $r10.<com.google.inject.internal.util.$ImmutableSet$SingletonImmutableSet: void <init>(java.lang.Object,int)>($r5, i6);

        goto label8;

     label7:
        $r11 = new com.google.inject.internal.util.$ImmutableSet$RegularImmutableSet;

        $r8 = $r11;

        $r4 = interfaceinvoke $r9.<java.util.List: java.lang.Object[] toArray()>();

        specialinvoke $r11.<com.google.inject.internal.util.$ImmutableSet$RegularImmutableSet: void <init>(java.lang.Object[],int,java.lang.Object[],int)>($r4, i6, r0, i2);

     label8:
        return $r8;
    }

    java.lang.Object writeReplace()
    {
        java.lang.Object[] $r2;
        com.google.inject.internal.util.$ImmutableSet r1;
        com.google.inject.internal.util.$ImmutableSet$SerializedForm $r0;

        r1 := @this: com.google.inject.internal.util.$ImmutableSet;

        $r0 = new com.google.inject.internal.util.$ImmutableSet$SerializedForm;

        $r2 = virtualinvoke r1.<com.google.inject.internal.util.$ImmutableSet: java.lang.Object[] toArray()>();

        specialinvoke $r0.<com.google.inject.internal.util.$ImmutableSet$SerializedForm: void <init>(java.lang.Object[])>($r2);

        return $r0;
    }

    public static com.google.inject.internal.util.$ImmutableSet$Builder builder()
    {
        com.google.inject.internal.util.$ImmutableSet$Builder $r0;

        $r0 = new com.google.inject.internal.util.$ImmutableSet$Builder;

        specialinvoke $r0.<com.google.inject.internal.util.$ImmutableSet$Builder: void <init>()>();

        return $r0;
    }

    public volatile java.util.Iterator iterator()
    {
        com.google.inject.internal.util.$ImmutableSet r0;
        com.google.inject.internal.util.$UnmodifiableIterator $r1;

        r0 := @this: com.google.inject.internal.util.$ImmutableSet;

        $r1 = virtualinvoke r0.<com.google.inject.internal.util.$ImmutableSet: com.google.inject.internal.util.$UnmodifiableIterator iterator()>();

        return $r1;
    }

    static void <clinit>()
    {
        com.google.inject.internal.util.$ImmutableSet$EmptyImmutableSet $r0;

        $r0 = new com.google.inject.internal.util.$ImmutableSet$EmptyImmutableSet;

        specialinvoke $r0.<com.google.inject.internal.util.$ImmutableSet$EmptyImmutableSet: void <init>(com.google.inject.internal.util.$ImmutableSet$1)>(null);

        <com.google.inject.internal.util.$ImmutableSet: com.google.inject.internal.util.$ImmutableSet EMPTY_IMMUTABLE_SET> = $r0;

        return;
    }
}
