class org.apache.batik.ext.awt.image.codec.png.PNGImage extends org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage
{
    public static final int PNG_COLOR_GRAY;
    public static final int PNG_COLOR_RGB;
    public static final int PNG_COLOR_PALETTE;
    public static final int PNG_COLOR_GRAY_ALPHA;
    public static final int PNG_COLOR_RGB_ALPHA;
    private static final java.lang.String[] colorTypeNames;
    public static final int PNG_FILTER_NONE;
    public static final int PNG_FILTER_SUB;
    public static final int PNG_FILTER_UP;
    public static final int PNG_FILTER_AVERAGE;
    public static final int PNG_FILTER_PAETH;
    private int[][] bandOffsets;
    private int bitDepth;
    private int colorType;
    private int compressionMethod;
    private int filterMethod;
    private int interlaceMethod;
    private int paletteEntries;
    private byte[] redPalette;
    private byte[] greenPalette;
    private byte[] bluePalette;
    private byte[] alphaPalette;
    private int bkgdRed;
    private int bkgdGreen;
    private int bkgdBlue;
    private int grayTransparentAlpha;
    private int redTransparentAlpha;
    private int greenTransparentAlpha;
    private int blueTransparentAlpha;
    private int maxOpacity;
    private int[] significantBits;
    private boolean suppressAlpha;
    private boolean expandPalette;
    private boolean output8BitGray;
    private boolean outputHasAlphaPalette;
    private boolean performGammaCorrection;
    private boolean expandGrayAlpha;
    private boolean generateEncodeParam;
    private org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam decodeParam;
    private org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam encodeParam;
    private boolean emitProperties;
    private float fileGamma;
    private float userExponent;
    private float displayExponent;
    private float[] chromaticity;
    private int sRGBRenderingIntent;
    private int postProcess;
    private static final int POST_NONE;
    private static final int POST_GAMMA;
    private static final int POST_GRAY_LUT;
    private static final int POST_GRAY_LUT_ADD_TRANS;
    private static final int POST_PALETTE_TO_RGB;
    private static final int POST_PALETTE_TO_RGBA;
    private static final int POST_ADD_GRAY_TRANS;
    private static final int POST_ADD_RGB_TRANS;
    private static final int POST_REMOVE_GRAY_TRANS;
    private static final int POST_REMOVE_RGB_TRANS;
    private static final int POST_EXP_MASK;
    private static final int POST_GRAY_ALPHA_EXP;
    private static final int POST_GAMMA_EXP;
    private static final int POST_GRAY_LUT_ADD_TRANS_EXP;
    private static final int POST_ADD_GRAY_TRANS_EXP;
    private java.util.List streamVec;
    private java.io.DataInputStream dataStream;
    private int bytesPerPixel;
    private int inputBands;
    private int outputBands;
    private int chunkIndex;
    private java.util.List textKeys;
    private java.util.List textStrings;
    private java.util.List ztextKeys;
    private java.util.List ztextStrings;
    private java.awt.image.WritableRaster theTile;
    private int[] gammaLut;
    private final byte[][] expandBits;
    private int[] grayLut;
    private static final int[] GrayBits8;
    private static final java.awt.image.ComponentColorModel colorModelGray8;
    private static final int[] GrayAlphaBits8;
    private static final java.awt.image.ComponentColorModel colorModelGrayAlpha8;
    private static final int[] GrayBits16;
    private static final java.awt.image.ComponentColorModel colorModelGray16;
    private static final int[] GrayAlphaBits16;
    private static final java.awt.image.ComponentColorModel colorModelGrayAlpha16;
    private static final int[] GrayBits32;
    private static final java.awt.image.ComponentColorModel colorModelGray32;
    private static final int[] GrayAlphaBits32;
    private static final java.awt.image.ComponentColorModel colorModelGrayAlpha32;
    private static final int[] RGBBits8;
    private static final java.awt.image.ComponentColorModel colorModelRGB8;
    private static final int[] RGBABits8;
    private static final java.awt.image.ComponentColorModel colorModelRGBA8;
    private static final int[] RGBBits16;
    private static final java.awt.image.ComponentColorModel colorModelRGB16;
    private static final int[] RGBABits16;
    private static final java.awt.image.ComponentColorModel colorModelRGBA16;
    private static final int[] RGBBits32;
    private static final java.awt.image.ComponentColorModel colorModelRGB32;
    private static final int[] RGBABits32;
    private static final java.awt.image.ComponentColorModel colorModelRGBA32;

    private void initGammaLut(int)
    {
        org.apache.batik.ext.awt.image.codec.png.PNGImage r0;
        int[] $r1, $r2;
        int i0, i1, i2, $i3, $i4, i5, i6;
        double $d0, $d1, d2, $d3, $d4, d5, $d6, $d7, $d8, $d9;
        float $f0, $f1, $f2, $f3;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGImage;

        i0 := @parameter0: int;

        $f0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float userExponent>;

        $d1 = (double) $f0;

        $f2 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float fileGamma>;

        $f1 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float displayExponent>;

        $f3 = $f2 * $f1;

        $d0 = (double) $f3;

        d2 = $d1 / $d0;

        i1 = 1 << i0;

        if i0 != 16 goto label1;

        $i4 = 65535;

        goto label2;

     label1:
        $i4 = 255;

     label2:
        i2 = $i4;

        $r1 = newarray (int)[i1];

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] gammaLut> = $r1;

        i5 = 0;

        goto label5;

     label3:
        $d4 = (double) i5;

        $i3 = i1 - 1;

        $d3 = (double) $i3;

        d5 = $d4 / $d3;

        $d6 = staticinvoke <java.lang.Math: double pow(double,double)>(d5, d2);

        $d7 = (double) i2;

        $d8 = $d6 * $d7;

        $d9 = $d8 + 0.5;

        i6 = (int) $d9;

        if i6 <= i2 goto label4;

        i6 = i2;

     label4:
        $r2 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] gammaLut>;

        $r2[i5] = i6;

        i5 = i5 + 1;

     label5:
        if i5 < i1 goto label3;

        return;
    }

    private void initGrayLut(int)
    {
        byte[] $r3;
        org.apache.batik.ext.awt.image.codec.png.PNGImage r0;
        byte[][] $r2;
        byte $b2;
        int[] $r1, $r4, $r5, $r6;
        int i0, i1, i3, $i4;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGImage;

        i0 := @parameter0: int;

        i1 = 1 << i0;

        $r1 = newarray (int)[i1];

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] grayLut> = $r1;

        $z0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean performGammaCorrection>;

        if $z0 == 0 goto label1;

        $r6 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] gammaLut>;

        $r5 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] grayLut>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, $r5, 0, i1);

        goto label4;

     label1:
        i3 = 0;

        goto label3;

     label2:
        $r4 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] grayLut>;

        $r2 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: byte[][] expandBits>;

        $r3 = $r2[i0];

        $b2 = $r3[i3];

        $i4 = (int) $b2;

        $r4[i3] = $i4;

        i3 = i3 + 1;

     label3:
        if i3 < i1 goto label2;

     label4:
        return;
    }

    public void <init>(java.io.InputStream, org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam) throws java.io.IOException
    {
        byte[] $r12, $r13, $r14, $r19, $r51;
        java.io.BufferedInputStream $r72;
        byte $b1;
        java.util.Map $r27, $r47, $r56;
        org.apache.batik.ext.awt.image.codec.png.PNGChunk $r17, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r48, $r52, $r53;
        java.lang.Exception $r59, $r62;
        byte[][] $r11;
        long $l0;
        java.util.ArrayList $r67, $r68, $r69, $r70, $r71;
        java.lang.StringBuffer $r22, $r23, $r24, $r25, $r78;
        java.lang.String $r16, $r18, $r26, $r28, $r54, $r60, $r63;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam $r20, $r29;
        java.lang.RuntimeException $r75, $r76, $r79;
        int[][] $r1;
        org.apache.batik.ext.awt.image.codec.png.PNGImage r0;
        java.io.ByteArrayInputStream $r77;
        int[] $r2, $r3, $r4, $r5, $r43, $r44, $r45, $r46;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25;
        java.util.List $r50;
        float $f0, $f1;
        java.io.DataInputStream $r73;
        org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam r66, $r74;
        int $i2, $i3, $i4, $i5, $i6, i7, $i9;
        java.io.InputStream r65;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGImage;

        r65 := @parameter0: java.io.InputStream;

        r66 := @parameter1: org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam;

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: void <init>()>();

        $r1 = newarray (int[])[5];

        $r1[0] = null;

        $r2 = newarray (int)[1];

        $r2[0] = 0;

        $r1[1] = $r2;

        $r3 = newarray (int)[2];

        $r3[0] = 0;

        $r3[1] = 1;

        $r1[2] = $r3;

        $r4 = newarray (int)[3];

        $r4[0] = 0;

        $r4[1] = 1;

        $r4[2] = 2;

        $r1[3] = $r4;

        $r5 = newarray (int)[4];

        $r5[0] = 0;

        $r5[1] = 1;

        $r5[2] = 2;

        $r5[3] = 3;

        $r1[4] = $r5;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int[][] bandOffsets> = $r1;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] significantBits> = null;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean suppressAlpha> = 0;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean expandPalette> = 0;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean output8BitGray> = 0;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean outputHasAlphaPalette> = 0;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean performGammaCorrection> = 0;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean expandGrayAlpha> = 0;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean generateEncodeParam> = 0;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam decodeParam> = null;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam encodeParam> = null;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean emitProperties> = 1;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float fileGamma> = 0.45455F;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float userExponent> = 1.0F;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float displayExponent> = 2.2F;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float[] chromaticity> = null;

        $i9 = (int) -1;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int sRGBRenderingIntent> = $i9;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int postProcess> = 0;

        $r67 = new java.util.ArrayList;

        specialinvoke $r67.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: java.util.List streamVec> = $r67;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int chunkIndex> = 0;

        $r68 = new java.util.ArrayList;

        specialinvoke $r68.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: java.util.List textKeys> = $r68;

        $r69 = new java.util.ArrayList;

        specialinvoke $r69.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: java.util.List textStrings> = $r69;

        $r70 = new java.util.ArrayList;

        specialinvoke $r70.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: java.util.List ztextKeys> = $r70;

        $r71 = new java.util.ArrayList;

        specialinvoke $r71.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: java.util.List ztextStrings> = $r71;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] gammaLut> = null;

        $r11 = newarray (byte[])[5];

        $r11[0] = null;

        $r12 = newarray (byte)[2];

        $r12[0] = 0;

        $r12[1] = -1;

        $r11[1] = $r12;

        $r13 = newarray (byte)[4];

        $r13[0] = 0;

        $r13[1] = 85;

        $r13[2] = -86;

        $r13[3] = -1;

        $r11[2] = $r13;

        $r11[3] = null;

        $r14 = newarray (byte)[16];

        $r14[0] = 0;

        $r14[1] = 17;

        $r14[2] = 34;

        $r14[3] = 51;

        $r14[4] = 68;

        $r14[5] = 85;

        $r14[6] = 102;

        $r14[7] = 119;

        $r14[8] = -120;

        $r14[9] = -103;

        $r14[10] = -86;

        $r14[11] = -69;

        $r14[12] = -52;

        $r14[13] = -35;

        $r14[14] = -18;

        $r14[15] = -1;

        $r11[4] = $r14;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: byte[][] expandBits> = $r11;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] grayLut> = null;

        $z0 = virtualinvoke r65.<java.io.InputStream: boolean markSupported()>();

        if $z0 != 0 goto label01;

        $r72 = new java.io.BufferedInputStream;

        specialinvoke $r72.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(r65);

        r65 = $r72;

     label01:
        $r73 = new java.io.DataInputStream;

        specialinvoke $r73.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r65);

        if r66 != null goto label02;

        $r74 = new org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam;

        specialinvoke $r74.<org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam: void <init>()>();

        r66 = $r74;

     label02:
        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam decodeParam> = r66;

        $z1 = virtualinvoke r66.<org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam: boolean getSuppressAlpha()>();

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean suppressAlpha> = $z1;

        $z2 = virtualinvoke r66.<org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam: boolean getExpandPalette()>();

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean expandPalette> = $z2;

        $z3 = virtualinvoke r66.<org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam: boolean getOutput8BitGray()>();

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean output8BitGray> = $z3;

        $z4 = virtualinvoke r66.<org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam: boolean getExpandGrayAlpha()>();

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean expandGrayAlpha> = $z4;

        $z5 = virtualinvoke r66.<org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam: boolean getPerformGammaCorrection()>();

        if $z5 == 0 goto label03;

        $f0 = virtualinvoke r66.<org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam: float getUserExponent()>();

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float userExponent> = $f0;

        $f1 = virtualinvoke r66.<org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam: float getDisplayExponent()>();

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float displayExponent> = $f1;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean performGammaCorrection> = 1;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean output8BitGray> = 1;

     label03:
        $z6 = virtualinvoke r66.<org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam: boolean getGenerateEncodeParam()>();

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean generateEncodeParam> = $z6;

        $z7 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean emitProperties>;

        if $z7 == 0 goto label04;

        $r56 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.util.Map properties>;

        interfaceinvoke $r56.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("file_type", "PNG v. 1.0");

     label04:
        $l0 = virtualinvoke $r73.<java.io.DataInputStream: long readLong()>();

        $b1 = $l0 cmp -8552249625308161526L;

        if $b1 == 0 goto label05;

        $r54 = staticinvoke <org.apache.batik.ext.awt.image.codec.util.PropertyUtil: java.lang.String getString(java.lang.String)>("PNGImageDecoder0");

        $r75 = new java.lang.RuntimeException;

        specialinvoke $r75.<java.lang.RuntimeException: void <init>(java.lang.String)>($r54);

        throw $r75;

     label05:
        goto label07;

     label06:
        $r62 := @caughtexception;

        virtualinvoke $r62.<java.lang.Throwable: void printStackTrace()>();

        $r63 = staticinvoke <org.apache.batik.ext.awt.image.codec.util.PropertyUtil: java.lang.String getString(java.lang.String)>("PNGImageDecoder1");

        $r76 = new java.lang.RuntimeException;

        specialinvoke $r76.<java.lang.RuntimeException: void <init>(java.lang.String)>($r63);

        throw $r76;

     label07:
        $r16 = staticinvoke <org.apache.batik.ext.awt.image.codec.png.PNGImage: java.lang.String getChunkType(java.io.DataInputStream)>($r73);

        $z8 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>("IHDR");

        if $z8 == 0 goto label08;

        $r53 = staticinvoke <org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGChunk readChunk(java.io.DataInputStream)>($r73);

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: void parse_IHDR_chunk(org.apache.batik.ext.awt.image.codec.png.PNGChunk)>($r53);

        goto label25;

     label08:
        $z9 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>("PLTE");

        if $z9 == 0 goto label09;

        $r52 = staticinvoke <org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGChunk readChunk(java.io.DataInputStream)>($r73);

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: void parse_PLTE_chunk(org.apache.batik.ext.awt.image.codec.png.PNGChunk)>($r52);

        goto label25;

     label09:
        $z10 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>("IDAT");

        if $z10 == 0 goto label10;

        $r48 = staticinvoke <org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGChunk readChunk(java.io.DataInputStream)>($r73);

        $r50 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: java.util.List streamVec>;

        $r77 = new java.io.ByteArrayInputStream;

        $r51 = virtualinvoke $r48.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: byte[] getData()>();

        specialinvoke $r77.<java.io.ByteArrayInputStream: void <init>(byte[])>($r51);

        interfaceinvoke $r50.<java.util.List: boolean add(java.lang.Object)>($r77);

        goto label25;

     label10:
        $z11 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>("IEND");

        if $z11 == 0 goto label11;

        $r42 = staticinvoke <org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGChunk readChunk(java.io.DataInputStream)>($r73);

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: void parse_IEND_chunk(org.apache.batik.ext.awt.image.codec.png.PNGChunk)>($r42);

        goto label28;

     label11:
        $z12 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>("bKGD");

        if $z12 == 0 goto label12;

        $r41 = staticinvoke <org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGChunk readChunk(java.io.DataInputStream)>($r73);

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: void parse_bKGD_chunk(org.apache.batik.ext.awt.image.codec.png.PNGChunk)>($r41);

        goto label25;

     label12:
        $z13 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>("cHRM");

        if $z13 == 0 goto label13;

        $r40 = staticinvoke <org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGChunk readChunk(java.io.DataInputStream)>($r73);

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: void parse_cHRM_chunk(org.apache.batik.ext.awt.image.codec.png.PNGChunk)>($r40);

        goto label25;

     label13:
        $z14 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>("gAMA");

        if $z14 == 0 goto label14;

        $r39 = staticinvoke <org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGChunk readChunk(java.io.DataInputStream)>($r73);

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: void parse_gAMA_chunk(org.apache.batik.ext.awt.image.codec.png.PNGChunk)>($r39);

        goto label25;

     label14:
        $z15 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>("hIST");

        if $z15 == 0 goto label15;

        $r38 = staticinvoke <org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGChunk readChunk(java.io.DataInputStream)>($r73);

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: void parse_hIST_chunk(org.apache.batik.ext.awt.image.codec.png.PNGChunk)>($r38);

        goto label25;

     label15:
        $z16 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>("iCCP");

        if $z16 == 0 goto label16;

        $r37 = staticinvoke <org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGChunk readChunk(java.io.DataInputStream)>($r73);

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: void parse_iCCP_chunk(org.apache.batik.ext.awt.image.codec.png.PNGChunk)>($r37);

        goto label25;

     label16:
        $z17 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>("pHYs");

        if $z17 == 0 goto label17;

        $r36 = staticinvoke <org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGChunk readChunk(java.io.DataInputStream)>($r73);

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: void parse_pHYs_chunk(org.apache.batik.ext.awt.image.codec.png.PNGChunk)>($r36);

        goto label25;

     label17:
        $z18 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>("sBIT");

        if $z18 == 0 goto label18;

        $r35 = staticinvoke <org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGChunk readChunk(java.io.DataInputStream)>($r73);

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: void parse_sBIT_chunk(org.apache.batik.ext.awt.image.codec.png.PNGChunk)>($r35);

        goto label25;

     label18:
        $z19 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>("sRGB");

        if $z19 == 0 goto label19;

        $r34 = staticinvoke <org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGChunk readChunk(java.io.DataInputStream)>($r73);

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: void parse_sRGB_chunk(org.apache.batik.ext.awt.image.codec.png.PNGChunk)>($r34);

        goto label25;

     label19:
        $z20 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>("tEXt");

        if $z20 == 0 goto label20;

        $r33 = staticinvoke <org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGChunk readChunk(java.io.DataInputStream)>($r73);

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: void parse_tEXt_chunk(org.apache.batik.ext.awt.image.codec.png.PNGChunk)>($r33);

        goto label25;

     label20:
        $z21 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>("tIME");

        if $z21 == 0 goto label21;

        $r32 = staticinvoke <org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGChunk readChunk(java.io.DataInputStream)>($r73);

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: void parse_tIME_chunk(org.apache.batik.ext.awt.image.codec.png.PNGChunk)>($r32);

        goto label25;

     label21:
        $z22 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>("tRNS");

        if $z22 == 0 goto label22;

        $r31 = staticinvoke <org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGChunk readChunk(java.io.DataInputStream)>($r73);

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: void parse_tRNS_chunk(org.apache.batik.ext.awt.image.codec.png.PNGChunk)>($r31);

        goto label25;

     label22:
        $z23 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>("zTXt");

        if $z23 == 0 goto label23;

        $r30 = staticinvoke <org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGChunk readChunk(java.io.DataInputStream)>($r73);

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: void parse_zTXt_chunk(org.apache.batik.ext.awt.image.codec.png.PNGChunk)>($r30);

        goto label25;

     label23:
        $r17 = staticinvoke <org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGChunk readChunk(java.io.DataInputStream)>($r73);

        $r18 = virtualinvoke $r17.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: java.lang.String getTypeString()>();

        $r19 = virtualinvoke $r17.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: byte[] getData()>();

        $r20 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam encodeParam>;

        if $r20 == null goto label24;

        $r29 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam encodeParam>;

        virtualinvoke $r29.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: void addPrivateChunk(java.lang.String,byte[])>($r18, $r19);

     label24:
        $z24 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean emitProperties>;

        if $z24 == 0 goto label25;

        $r78 = new java.lang.StringBuffer;

        specialinvoke $r78.<java.lang.StringBuffer: void <init>()>();

        $r22 = virtualinvoke $r78.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("chunk_");

        $i2 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int chunkIndex>;

        $i3 = $i2 + 1;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int chunkIndex> = $i3;

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();

        $r27 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.util.Map properties>;

        $r28 = virtualinvoke $r26.<java.lang.String: java.lang.String toLowerCase()>();

        interfaceinvoke $r27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r28, $r19);

     label25:
        goto label27;

     label26:
        $r59 := @caughtexception;

        virtualinvoke $r59.<java.lang.Throwable: void printStackTrace()>();

        $r60 = staticinvoke <org.apache.batik.ext.awt.image.codec.util.PropertyUtil: java.lang.String getString(java.lang.String)>("PNGImageDecoder2");

        $r79 = new java.lang.RuntimeException;

        specialinvoke $r79.<java.lang.RuntimeException: void <init>(java.lang.String)>($r60);

        throw $r79;

     label27:
        goto label07;

     label28:
        $r43 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] significantBits>;

        if $r43 != null goto label31;

        $i4 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int inputBands>;

        $r44 = newarray (int)[$i4];

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] significantBits> = $r44;

        i7 = 0;

        goto label30;

     label29:
        $r45 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] significantBits>;

        $i6 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bitDepth>;

        $r45[i7] = $i6;

        i7 = i7 + 1;

     label30:
        $i5 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int inputBands>;

        if i7 < $i5 goto label29;

        $z25 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean emitProperties>;

        if $z25 == 0 goto label31;

        $r47 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.util.Map properties>;

        $r46 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] significantBits>;

        interfaceinvoke $r47.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("significant_bits", $r46);

     label31:
        return;

        catch java.lang.Exception from label04 to label05 with label06;
        catch java.lang.Exception from label07 to label25 with label26;
    }

    private static java.lang.String getChunkType(java.io.DataInputStream)
    {
        java.io.DataInputStream r0;
        java.lang.StringBuffer $r1, $r2, $r3, $r5, $r6, $r7, $r9, $r10, $r11, $r13, $r14, $r15;
        int $i0, $i1, $i3, $i4, $i6, $i7, $i9;
        java.lang.String $r4, $r8, $r12, $r16;
        char $c2, $c5, $c8, $c10;
        java.lang.Exception $r17;

        r0 := @parameter0: java.io.DataInputStream;

     label1:
        virtualinvoke r0.<java.io.FilterInputStream: void mark(int)>(8);

        virtualinvoke r0.<java.io.DataInputStream: int readInt()>();

        $i0 = virtualinvoke r0.<java.io.DataInputStream: int readInt()>();

        virtualinvoke r0.<java.io.FilterInputStream: void reset()>();

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $i1 = $i0 >> 24;

        $c2 = (char) $i1;

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $i3 = $i0 >> 16;

        $i4 = $i3 & 255;

        $c5 = (char) $i4;

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c5);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $i6 = $i0 >> 8;

        $i7 = $i6 & 255;

        $c8 = (char) $i7;

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c8);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $i9 = $i0 & 255;

        $c10 = (char) $i9;

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c10);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r16;

     label2:
        $r17 := @caughtexception;

        virtualinvoke $r17.<java.lang.Throwable: void printStackTrace()>();

        return null;

        catch java.lang.Exception from label1 to label2 with label2;
    }

    private static org.apache.batik.ext.awt.image.codec.png.PNGChunk readChunk(java.io.DataInputStream)
    {
        java.io.DataInputStream r0;
        byte[] r1;
        int $i0, $i1, $i2;
        org.apache.batik.ext.awt.image.codec.png.PNGChunk $r2;
        java.lang.Exception $r3;

        r0 := @parameter0: java.io.DataInputStream;

     label1:
        $i0 = virtualinvoke r0.<java.io.DataInputStream: int readInt()>();

        $i1 = virtualinvoke r0.<java.io.DataInputStream: int readInt()>();

        r1 = newarray (byte)[$i0];

        virtualinvoke r0.<java.io.DataInputStream: void readFully(byte[])>(r1);

        $i2 = virtualinvoke r0.<java.io.DataInputStream: int readInt()>();

        $r2 = new org.apache.batik.ext.awt.image.codec.png.PNGChunk;

        specialinvoke $r2.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: void <init>(int,int,byte[],int)>($i0, $i1, r1, $i2);

        return $r2;

     label2:
        $r3 := @caughtexception;

        virtualinvoke $r3.<java.lang.Throwable: void printStackTrace()>();

        return null;

        catch java.lang.Exception from label1 to label2 with label2;
    }

    private void parse_IHDR_chunk(org.apache.batik.ext.awt.image.codec.png.PNGChunk)
    {
        java.lang.Float $r15;
        java.lang.Integer $r18;
        byte $b49, $b50, $b51;
        java.util.Map $r5, $r8, $r16, $r19, $r26;
        org.apache.batik.ext.awt.image.codec.png.PNGChunk r1;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Gray $r21;
        java.lang.String $r2, $r10, $r12, $r25, $r27, $r29, $r31, $r33, $r36, $r37;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam $r4, $r6, $r7, $r9, $r14, $r17, $r20, $r40, $r41;
        java.lang.RuntimeException $r3, $r11, $r13, $r28, $r30, $r32, $r34, $r38;
        org.apache.batik.ext.awt.image.codec.png.PNGImage r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17;
        float $f0, $f1, $f2, f3;
        org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam $r39;
        java.lang.String[] $r24;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB $r22;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Palette $r23;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48;
        java.io.PrintStream $r35;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGImage;

        r1 := @parameter0: org.apache.batik.ext.awt.image.codec.png.PNGChunk;

        $i0 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: int getInt4(int)>(0);

        r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int width> = $i0;

        r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int tileWidth> = $i0;

        $i1 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: int getInt4(int)>(4);

        r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int height> = $i1;

        r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int tileHeight> = $i1;

        $i2 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: int getInt1(int)>(8);

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bitDepth> = $i2;

        $i3 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bitDepth>;

        if $i3 == 1 goto label01;

        $i36 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bitDepth>;

        if $i36 == 2 goto label01;

        $i37 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bitDepth>;

        if $i37 == 4 goto label01;

        $i38 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bitDepth>;

        if $i38 == 8 goto label01;

        $i39 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bitDepth>;

        if $i39 == 16 goto label01;

        $r37 = staticinvoke <org.apache.batik.ext.awt.image.codec.util.PropertyUtil: java.lang.String getString(java.lang.String)>("PNGImageDecoder3");

        $r38 = new java.lang.RuntimeException;

        specialinvoke $r38.<java.lang.RuntimeException: void <init>(java.lang.String)>($r37);

        throw $r38;

     label01:
        $i40 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bitDepth>;

        $i41 = 1 << $i40;

        $i42 = $i41 - 1;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int maxOpacity> = $i42;

        $i43 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: int getInt1(int)>(9);

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int colorType> = $i43;

        $i44 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int colorType>;

        if $i44 == 0 goto label02;

        $i32 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int colorType>;

        if $i32 == 2 goto label02;

        $i33 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int colorType>;

        if $i33 == 3 goto label02;

        $i34 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int colorType>;

        if $i34 == 4 goto label02;

        $i35 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int colorType>;

        if $i35 == 6 goto label02;

        $r35 = <java.lang.System: java.io.PrintStream out>;

        $r36 = staticinvoke <org.apache.batik.ext.awt.image.codec.util.PropertyUtil: java.lang.String getString(java.lang.String)>("PNGImageDecoder4");

        virtualinvoke $r35.<java.io.PrintStream: void println(java.lang.String)>($r36);

     label02:
        $i45 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int colorType>;

        if $i45 != 2 goto label03;

        $i31 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bitDepth>;

        if $i31 >= 8 goto label03;

        $r33 = staticinvoke <org.apache.batik.ext.awt.image.codec.util.PropertyUtil: java.lang.String getString(java.lang.String)>("PNGImageDecoder5");

        $r34 = new java.lang.RuntimeException;

        specialinvoke $r34.<java.lang.RuntimeException: void <init>(java.lang.String)>($r33);

        throw $r34;

     label03:
        $i4 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int colorType>;

        if $i4 != 3 goto label04;

        $i30 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bitDepth>;

        if $i30 != 16 goto label04;

        $r31 = staticinvoke <org.apache.batik.ext.awt.image.codec.util.PropertyUtil: java.lang.String getString(java.lang.String)>("PNGImageDecoder6");

        $r32 = new java.lang.RuntimeException;

        specialinvoke $r32.<java.lang.RuntimeException: void <init>(java.lang.String)>($r31);

        throw $r32;

     label04:
        $i5 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int colorType>;

        if $i5 != 4 goto label05;

        $i29 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bitDepth>;

        if $i29 >= 8 goto label05;

        $r29 = staticinvoke <org.apache.batik.ext.awt.image.codec.util.PropertyUtil: java.lang.String getString(java.lang.String)>("PNGImageDecoder7");

        $r30 = new java.lang.RuntimeException;

        specialinvoke $r30.<java.lang.RuntimeException: void <init>(java.lang.String)>($r29);

        throw $r30;

     label05:
        $i6 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int colorType>;

        if $i6 != 6 goto label06;

        $i28 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bitDepth>;

        if $i28 >= 8 goto label06;

        $r27 = staticinvoke <org.apache.batik.ext.awt.image.codec.util.PropertyUtil: java.lang.String getString(java.lang.String)>("PNGImageDecoder8");

        $r28 = new java.lang.RuntimeException;

        specialinvoke $r28.<java.lang.RuntimeException: void <init>(java.lang.String)>($r27);

        throw $r28;

     label06:
        $z0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean emitProperties>;

        if $z0 == 0 goto label07;

        $r26 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.util.Map properties>;

        $r24 = <org.apache.batik.ext.awt.image.codec.png.PNGImage: java.lang.String[] colorTypeNames>;

        $i27 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int colorType>;

        $r25 = $r24[$i27];

        interfaceinvoke $r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("color_type", $r25);

     label07:
        $z1 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean generateEncodeParam>;

        if $z1 == 0 goto label12;

        $i24 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int colorType>;

        if $i24 != 3 goto label08;

        $r23 = new org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Palette;

        specialinvoke $r23.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Palette: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam encodeParam> = $r23;

        goto label11;

     label08:
        $i25 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int colorType>;

        if $i25 == 0 goto label09;

        $i26 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int colorType>;

        if $i26 != 4 goto label10;

     label09:
        $r21 = new org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Gray;

        specialinvoke $r21.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Gray: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam encodeParam> = $r21;

        goto label11;

     label10:
        $r22 = new org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB;

        specialinvoke $r22.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam encodeParam> = $r22;

     label11:
        $r39 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam decodeParam>;

        $r40 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam encodeParam>;

        virtualinvoke $r39.<org.apache.batik.ext.awt.image.codec.png.PNGDecodeParam: void setEncodeParam(org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam)>($r40);

     label12:
        $r41 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam encodeParam>;

        if $r41 == null goto label13;

        $r20 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam encodeParam>;

        $i23 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bitDepth>;

        virtualinvoke $r20.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: void setBitDepth(int)>($i23);

     label13:
        $z2 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean emitProperties>;

        if $z2 == 0 goto label14;

        $r19 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.util.Map properties>;

        $r18 = new java.lang.Integer;

        $i22 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bitDepth>;

        specialinvoke $r18.<java.lang.Integer: void <init>(int)>($i22);

        interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("bit_depth", $r18);

     label14:
        $z3 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean performGammaCorrection>;

        if $z3 == 0 goto label16;

        $f1 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float displayExponent>;

        $f0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float userExponent>;

        $f2 = $f1 / $f0;

        f3 = 0.45454544F * $f2;

        $r14 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam encodeParam>;

        if $r14 == null goto label15;

        $r17 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam encodeParam>;

        virtualinvoke $r17.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: void setGamma(float)>(f3);

     label15:
        $z17 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean emitProperties>;

        if $z17 == 0 goto label16;

        $r16 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.util.Map properties>;

        $r15 = new java.lang.Float;

        specialinvoke $r15.<java.lang.Float: void <init>(float)>(f3);

        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("gamma", $r15);

     label16:
        $i46 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: int getInt1(int)>(10);

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int compressionMethod> = $i46;

        $i47 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int compressionMethod>;

        if $i47 == 0 goto label17;

        $r12 = staticinvoke <org.apache.batik.ext.awt.image.codec.util.PropertyUtil: java.lang.String getString(java.lang.String)>("PNGImageDecoder9");

        $r13 = new java.lang.RuntimeException;

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String)>($r12);

        throw $r13;

     label17:
        $i7 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: int getInt1(int)>(11);

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int filterMethod> = $i7;

        $i8 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int filterMethod>;

        if $i8 == 0 goto label18;

        $r10 = staticinvoke <org.apache.batik.ext.awt.image.codec.util.PropertyUtil: java.lang.String getString(java.lang.String)>("PNGImageDecoder10");

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String)>($r10);

        throw $r11;

     label18:
        $i9 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: int getInt1(int)>(12);

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int interlaceMethod> = $i9;

        $i10 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int interlaceMethod>;

        if $i10 != 0 goto label20;

        $r7 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam encodeParam>;

        if $r7 == null goto label19;

        $r9 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam encodeParam>;

        virtualinvoke $r9.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: void setInterlacing(boolean)>(0);

     label19:
        $z16 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean emitProperties>;

        if $z16 == 0 goto label23;

        $r8 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.util.Map properties>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("interlace_method", "None");

        goto label23;

     label20:
        $i11 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int interlaceMethod>;

        if $i11 != 1 goto label22;

        $r4 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam encodeParam>;

        if $r4 == null goto label21;

        $r6 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam encodeParam>;

        virtualinvoke $r6.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: void setInterlacing(boolean)>(1);

     label21:
        $z4 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean emitProperties>;

        if $z4 == 0 goto label23;

        $r5 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.util.Map properties>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("interlace_method", "Adam7");

        goto label23;

     label22:
        $r2 = staticinvoke <org.apache.batik.ext.awt.image.codec.util.PropertyUtil: java.lang.String getString(java.lang.String)>("PNGImageDecoder11");

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r2);

        throw $r3;

     label23:
        $i48 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bitDepth>;

        if $i48 != 16 goto label24;

        $b49 = 2;

        goto label25;

     label24:
        $b49 = 1;

     label25:
        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bytesPerPixel> = $b49;

        $i12 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int colorType>;

        tableswitch($i12)
        {
            case 0: goto label26;
            case 1: goto label45;
            case 2: goto label29;
            case 3: goto label31;
            case 4: goto label35;
            case 5: goto label45;
            case 6: goto label40;
            default: goto label45;
        };

     label26:
        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int inputBands> = 1;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int outputBands> = 1;

        $z14 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean output8BitGray>;

        if $z14 == 0 goto label27;

        $i21 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bitDepth>;

        if $i21 >= 8 goto label27;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int postProcess> = 2;

        goto label45;

     label27:
        $z15 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean performGammaCorrection>;

        if $z15 == 0 goto label28;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int postProcess> = 1;

        goto label45;

     label28:
        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int postProcess> = 0;

        goto label45;

     label29:
        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int inputBands> = 3;

        $i19 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bytesPerPixel>;

        $i20 = $i19 * 3;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bytesPerPixel> = $i20;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int outputBands> = 3;

        $z13 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean performGammaCorrection>;

        if $z13 == 0 goto label30;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int postProcess> = 1;

        goto label45;

     label30:
        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int postProcess> = 0;

        goto label45;

     label31:
        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int inputBands> = 1;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bytesPerPixel> = 1;

        $z11 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean expandPalette>;

        if $z11 == 0 goto label32;

        $b50 = 3;

        goto label33;

     label32:
        $b50 = 1;

     label33:
        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int outputBands> = $b50;

        $z12 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean expandPalette>;

        if $z12 == 0 goto label34;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int postProcess> = 4;

        goto label45;

     label34:
        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int postProcess> = 0;

        goto label45;

     label35:
        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int inputBands> = 2;

        $i15 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bytesPerPixel>;

        $i16 = $i15 * 2;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bytesPerPixel> = $i16;

        $z8 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean suppressAlpha>;

        if $z8 == 0 goto label36;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int outputBands> = 1;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int postProcess> = 8;

        goto label45;

     label36:
        $z9 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean performGammaCorrection>;

        if $z9 == 0 goto label37;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int postProcess> = 1;

        goto label38;

     label37:
        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int postProcess> = 0;

     label38:
        $z10 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean expandGrayAlpha>;

        if $z10 == 0 goto label39;

        $i17 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int postProcess>;

        $i18 = $i17 | 16;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int postProcess> = $i18;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int outputBands> = 4;

        goto label45;

     label39:
        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int outputBands> = 2;

        goto label45;

     label40:
        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int inputBands> = 4;

        $i13 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bytesPerPixel>;

        $i14 = $i13 * 4;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bytesPerPixel> = $i14;

        $z5 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean suppressAlpha>;

        if $z5 != 0 goto label41;

        $b51 = 4;

        goto label42;

     label41:
        $b51 = 3;

     label42:
        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int outputBands> = $b51;

        $z6 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean suppressAlpha>;

        if $z6 == 0 goto label43;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int postProcess> = 9;

        goto label45;

     label43:
        $z7 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean performGammaCorrection>;

        if $z7 == 0 goto label44;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int postProcess> = 1;

        goto label45;

     label44:
        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int postProcess> = 0;

     label45:
        return;
    }

    private void parse_IEND_chunk(org.apache.batik.ext.awt.image.codec.png.PNGChunk) throws java.lang.Exception
    {
        byte[] r40, $r43, $r44, $r45, $r47, $r48, $r49, $r50;
        java.util.Enumeration $r32;
        java.awt.image.SampleModel $r38, $r60;
        java.util.Map $r13, $r27;
        java.awt.image.IndexColorModel $r41, $r42, $r46;
        org.apache.batik.ext.awt.image.codec.png.PNGChunk r55;
        byte[][] $r39;
        java.lang.StringBuffer $r7, $r8, $r9, $r10, $r11, $r21, $r22, $r23, $r24, $r25;
        java.lang.String $r12, $r14, $r26, $r28, r56, r57, r58, r59;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam $r15, $r29, $r52, $r53;
        org.apache.batik.ext.awt.image.codec.png.PNGImage r0;
        java.util.zip.Inflater $r34;
        int[] $r51;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.util.List $r1, $r3, $r5, $r16, $r17, $r19, $r31;
        java.io.DataInputStream $r35;
        java.util.zip.InflaterInputStream $r33;
        java.lang.String[] r2, $r54;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, i28, i29, i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41;
        java.io.SequenceInputStream $r30;
        java.awt.image.ColorModel $r61;
        java.lang.Object $r4, $r6, $r18, $r20;
        java.awt.image.WritableRaster $r36, $r37;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGImage;

        r55 := @parameter0: org.apache.batik.ext.awt.image.codec.png.PNGChunk;

        $r1 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: java.util.List textKeys>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = 2 * $i0;

        r2 = newarray (java.lang.String)[$i1];

        i28 = 0;

        goto label03;

     label01:
        $r3 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: java.util.List textKeys>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i28);

        r56 = (java.lang.String) $r4;

        $r5 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: java.util.List textStrings>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i28);

        r57 = (java.lang.String) $r6;

        $i2 = 2 * i28;

        r2[$i2] = r56;

        $i3 = 2 * i28;

        $i4 = $i3 + 1;

        r2[$i4] = r57;

        $z0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean emitProperties>;

        if $z0 == 0 goto label02;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("text_");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i28);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r56);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        $r13 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.util.Map properties>;

        $r14 = virtualinvoke $r12.<java.lang.String: java.lang.String toLowerCase()>();

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, r57);

     label02:
        i28 = i28 + 1;

     label03:
        if i28 < $i0 goto label01;

        $r15 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam encodeParam>;

        if $r15 == null goto label04;

        $r53 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam encodeParam>;

        virtualinvoke $r53.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: void setText(java.lang.String[])>(r2);

     label04:
        $r16 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: java.util.List ztextKeys>;

        $i5 = interfaceinvoke $r16.<java.util.List: int size()>();

        $i6 = 2 * $i5;

        $r54 = newarray (java.lang.String)[$i6];

        i29 = 0;

        goto label07;

     label05:
        $r17 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: java.util.List ztextKeys>;

        $r18 = interfaceinvoke $r17.<java.util.List: java.lang.Object get(int)>(i29);

        r58 = (java.lang.String) $r18;

        $r19 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: java.util.List ztextStrings>;

        $r20 = interfaceinvoke $r19.<java.util.List: java.lang.Object get(int)>(i29);

        r59 = (java.lang.String) $r20;

        $i7 = 2 * i29;

        $r54[$i7] = r58;

        $i8 = 2 * i29;

        $i9 = $i8 + 1;

        $r54[$i9] = r59;

        $z1 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean emitProperties>;

        if $z1 == 0 goto label06;

        $r21 = new java.lang.StringBuffer;

        specialinvoke $r21.<java.lang.StringBuffer: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ztext_");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i29);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r58);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();

        $r27 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.util.Map properties>;

        $r28 = virtualinvoke $r26.<java.lang.String: java.lang.String toLowerCase()>();

        interfaceinvoke $r27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r28, r59);

     label06:
        i29 = i29 + 1;

     label07:
        if i29 < $i5 goto label05;

        $r29 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam encodeParam>;

        if $r29 == null goto label08;

        $r52 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam encodeParam>;

        virtualinvoke $r52.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: void setCompressedText(java.lang.String[])>($r54);

     label08:
        $r30 = new java.io.SequenceInputStream;

        $r31 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: java.util.List streamVec>;

        $r32 = staticinvoke <java.util.Collections: java.util.Enumeration enumeration(java.util.Collection)>($r31);

        specialinvoke $r30.<java.io.SequenceInputStream: void <init>(java.util.Enumeration)>($r32);

        $r33 = new java.util.zip.InflaterInputStream;

        $r34 = new java.util.zip.Inflater;

        specialinvoke $r34.<java.util.zip.Inflater: void <init>()>();

        specialinvoke $r33.<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream,java.util.zip.Inflater)>($r30, $r34);

        $r35 = new java.io.DataInputStream;

        specialinvoke $r35.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r33);

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: java.io.DataInputStream dataStream> = $r35;

        i30 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bitDepth>;

        $i10 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int colorType>;

        if $i10 != 0 goto label09;

        $i27 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bitDepth>;

        if $i27 >= 8 goto label09;

        $z7 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean output8BitGray>;

        if $z7 == 0 goto label09;

        i30 = 8;

     label09:
        $i31 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int colorType>;

        if $i31 != 3 goto label10;

        $z6 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean expandPalette>;

        if $z6 == 0 goto label10;

        i30 = 8;

     label10:
        $i32 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int outputBands>;

        $i33 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int width>;

        $i34 = $i32 * $i33;

        $i35 = $i34 * i30;

        $i36 = $i35 + 7;

        $i37 = $i36 / 8;

        if i30 != 16 goto label11;

        $i38 = $i37 / 2;

        goto label12;

     label11:
        $i38 = $i37;

     label12:
        $i13 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int width>;

        $i12 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int height>;

        $i11 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int outputBands>;

        $r36 = specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: java.awt.image.WritableRaster createRaster(int,int,int,int,int)>($i13, $i12, $i11, $i38, i30);

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: java.awt.image.WritableRaster theTile> = $r36;

        $z2 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean performGammaCorrection>;

        if $z2 == 0 goto label13;

        $r51 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] gammaLut>;

        if $r51 != null goto label13;

        $i26 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bitDepth>;

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: void initGammaLut(int)>($i26);

     label13:
        $i39 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int postProcess>;

        if $i39 == 2 goto label14;

        $i24 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int postProcess>;

        if $i24 == 3 goto label14;

        $i25 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int postProcess>;

        if $i25 != 19 goto label15;

     label14:
        $i40 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bitDepth>;

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: void initGrayLut(int)>($i40);

     label15:
        $i41 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int interlaceMethod>;

        if $i41 != 1 goto label16;

        $z8 = 1;

        goto label17;

     label16:
        $z8 = 0;

     label17:
        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: void decodeImage(boolean)>($z8);

        $r37 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: java.awt.image.WritableRaster theTile>;

        $r38 = virtualinvoke $r37.<java.awt.image.Raster: java.awt.image.SampleModel getSampleModel()>();

        r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.awt.image.SampleModel sampleModel> = $r38;

        $i14 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int colorType>;

        if $i14 != 3 goto label19;

        $z4 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean expandPalette>;

        if $z4 != 0 goto label19;

        $z5 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean outputHasAlphaPalette>;

        if $z5 == 0 goto label18;

        $r46 = new java.awt.image.IndexColorModel;

        $i23 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bitDepth>;

        $i22 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int paletteEntries>;

        $r50 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: byte[] redPalette>;

        $r49 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: byte[] greenPalette>;

        $r48 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: byte[] bluePalette>;

        $r47 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: byte[] alphaPalette>;

        specialinvoke $r46.<java.awt.image.IndexColorModel: void <init>(int,int,byte[],byte[],byte[],byte[])>($i23, $i22, $r50, $r49, $r48, $r47);

        r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.awt.image.ColorModel colorModel> = $r46;

        goto label21;

     label18:
        $r42 = new java.awt.image.IndexColorModel;

        $i21 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bitDepth>;

        $i20 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int paletteEntries>;

        $r45 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: byte[] redPalette>;

        $r44 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: byte[] greenPalette>;

        $r43 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: byte[] bluePalette>;

        specialinvoke $r42.<java.awt.image.IndexColorModel: void <init>(int,int,byte[],byte[],byte[])>($i21, $i20, $r45, $r44, $r43);

        r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.awt.image.ColorModel colorModel> = $r42;

        goto label21;

     label19:
        $i15 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int colorType>;

        if $i15 != 0 goto label20;

        $i16 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bitDepth>;

        if $i16 >= 8 goto label20;

        $z3 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean output8BitGray>;

        if $z3 != 0 goto label20;

        $r39 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: byte[][] expandBits>;

        $i17 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bitDepth>;

        r40 = $r39[$i17];

        $r41 = new java.awt.image.IndexColorModel;

        $i19 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bitDepth>;

        $i18 = lengthof r40;

        specialinvoke $r41.<java.awt.image.IndexColorModel: void <init>(int,int,byte[],byte[],byte[])>($i19, $i18, r40, r40, r40);

        r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.awt.image.ColorModel colorModel> = $r41;

        goto label21;

     label20:
        $r60 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.awt.image.SampleModel sampleModel>;

        $r61 = staticinvoke <org.apache.batik.ext.awt.image.codec.png.PNGImage: java.awt.image.ColorModel createComponentColorModel(java.awt.image.SampleModel)>($r60);

        r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.awt.image.ColorModel colorModel> = $r61;

     label21:
        return;
    }

    public static java.awt.image.ColorModel createComponentColorModel(java.awt.image.SampleModel)
    {
        int $i0, $i1;
        java.awt.image.SampleModel r0;
        java.awt.image.ComponentColorModel r1;

        r0 := @parameter0: java.awt.image.SampleModel;

        $i0 = virtualinvoke r0.<java.awt.image.SampleModel: int getDataType()>();

        $i1 = virtualinvoke r0.<java.awt.image.SampleModel: int getNumBands()>();

        r1 = null;

        if $i0 != 0 goto label06;

        tableswitch($i1)
        {
            case 1: goto label01;
            case 2: goto label02;
            case 3: goto label03;
            case 4: goto label04;
            default: goto label05;
        };

     label01:
        r1 = <org.apache.batik.ext.awt.image.codec.png.PNGImage: java.awt.image.ComponentColorModel colorModelGray8>;

        goto label05;

     label02:
        r1 = <org.apache.batik.ext.awt.image.codec.png.PNGImage: java.awt.image.ComponentColorModel colorModelGrayAlpha8>;

        goto label05;

     label03:
        r1 = <org.apache.batik.ext.awt.image.codec.png.PNGImage: java.awt.image.ComponentColorModel colorModelRGB8>;

        goto label05;

     label04:
        r1 = <org.apache.batik.ext.awt.image.codec.png.PNGImage: java.awt.image.ComponentColorModel colorModelRGBA8>;

     label05:
        goto label17;

     label06:
        if $i0 != 1 goto label12;

        tableswitch($i1)
        {
            case 1: goto label07;
            case 2: goto label08;
            case 3: goto label09;
            case 4: goto label10;
            default: goto label11;
        };

     label07:
        r1 = <org.apache.batik.ext.awt.image.codec.png.PNGImage: java.awt.image.ComponentColorModel colorModelGray16>;

        goto label11;

     label08:
        r1 = <org.apache.batik.ext.awt.image.codec.png.PNGImage: java.awt.image.ComponentColorModel colorModelGrayAlpha16>;

        goto label11;

     label09:
        r1 = <org.apache.batik.ext.awt.image.codec.png.PNGImage: java.awt.image.ComponentColorModel colorModelRGB16>;

        goto label11;

     label10:
        r1 = <org.apache.batik.ext.awt.image.codec.png.PNGImage: java.awt.image.ComponentColorModel colorModelRGBA16>;

     label11:
        goto label17;

     label12:
        if $i0 != 3 goto label17;

        tableswitch($i1)
        {
            case 1: goto label13;
            case 2: goto label14;
            case 3: goto label15;
            case 4: goto label16;
            default: goto label17;
        };

     label13:
        r1 = <org.apache.batik.ext.awt.image.codec.png.PNGImage: java.awt.image.ComponentColorModel colorModelGray32>;

        goto label17;

     label14:
        r1 = <org.apache.batik.ext.awt.image.codec.png.PNGImage: java.awt.image.ComponentColorModel colorModelGrayAlpha32>;

        goto label17;

     label15:
        r1 = <org.apache.batik.ext.awt.image.codec.png.PNGImage: java.awt.image.ComponentColorModel colorModelRGB32>;

        goto label17;

     label16:
        r1 = <org.apache.batik.ext.awt.image.codec.png.PNGImage: java.awt.image.ComponentColorModel colorModelRGBA32>;

     label17:
        return r1;
    }

    private void parse_PLTE_chunk(org.apache.batik.ext.awt.image.codec.png.PNGChunk)
    {
        byte[] $r2, $r3, $r4, $r5, $r6, $r7, $r10, $r12, $r14;
        org.apache.batik.ext.awt.image.codec.png.PNGImage r0;
        byte $b6, $b7, $b8, $b10, $b11, $b12, $b15, $b18, $b21, $b24;
        int[] $r8, $r9, $r11, $r13;
        boolean $z0;
        org.apache.batik.ext.awt.image.codec.png.PNGChunk r1;
        short $s13, $s16, $s19, $s31, $s33, $s35;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i9, $i14, $i17, $i20, $i22, i23, i25, i26, i27, i28, i29, i30, $i32, $i34, $i36;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGImage;

        r1 := @parameter0: org.apache.batik.ext.awt.image.codec.png.PNGChunk;

        $i0 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: int getLength()>();

        $i1 = $i0 / 3;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int paletteEntries> = $i1;

        $i2 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int paletteEntries>;

        $r2 = newarray (byte)[$i2];

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: byte[] redPalette> = $r2;

        $i3 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int paletteEntries>;

        $r3 = newarray (byte)[$i3];

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: byte[] greenPalette> = $r3;

        $i4 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int paletteEntries>;

        $r4 = newarray (byte)[$i4];

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: byte[] bluePalette> = $r4;

        i23 = 0;

        $z0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean performGammaCorrection>;

        if $z0 == 0 goto label6;

        $r8 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] gammaLut>;

        if $r8 != null goto label3;

        $i22 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bitDepth>;

        if $i22 != 16 goto label1;

        $b24 = 16;

        goto label2;

     label1:
        $b24 = 8;

     label2:
        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: void initGammaLut(int)>($b24);

     label3:
        i25 = 0;

        goto label5;

     label4:
        i26 = i23 + 1;

        $b10 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: byte getByte(int)>(i23);

        i27 = i26 + 1;

        $b11 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: byte getByte(int)>(i26);

        i23 = i27 + 1;

        $b12 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: byte getByte(int)>(i27);

        $r10 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: byte[] redPalette>;

        $r9 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] gammaLut>;

        $s31 = (short) $b10;

        $s13 = $s31 & 255;

        $i32 = (int) $s13;

        $i14 = $r9[$i32];

        $b15 = (byte) $i14;

        $r10[i25] = $b15;

        $r12 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: byte[] greenPalette>;

        $r11 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] gammaLut>;

        $s33 = (short) $b11;

        $s16 = $s33 & 255;

        $i34 = (int) $s16;

        $i17 = $r11[$i34];

        $b18 = (byte) $i17;

        $r12[i25] = $b18;

        $r14 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: byte[] bluePalette>;

        $r13 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] gammaLut>;

        $s35 = (short) $b12;

        $s19 = $s35 & 255;

        $i36 = (int) $s19;

        $i20 = $r13[$i36];

        $b21 = (byte) $i20;

        $r14[i25] = $b21;

        i25 = i25 + 1;

     label5:
        $i9 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int paletteEntries>;

        if i25 < $i9 goto label4;

        goto label9;

     label6:
        i28 = 0;

        goto label8;

     label7:
        $r5 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: byte[] redPalette>;

        i29 = i23 + 1;

        $b6 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: byte getByte(int)>(i23);

        $r5[i28] = $b6;

        $r6 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: byte[] greenPalette>;

        i30 = i29 + 1;

        $b7 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: byte getByte(int)>(i29);

        $r6[i28] = $b7;

        $r7 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: byte[] bluePalette>;

        i23 = i30 + 1;

        $b8 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: byte getByte(int)>(i30);

        $r7[i28] = $b8;

        i28 = i28 + 1;

     label8:
        $i5 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int paletteEntries>;

        if i28 < $i5 goto label7;

     label9:
        return;
    }

    private void parse_bKGD_chunk(org.apache.batik.ext.awt.image.codec.png.PNGChunk)
    {
        java.awt.Color $r23;
        byte[] $r2, $r3, $r4, $r9, $r11, $r13;
        byte $b1, $b3, $b5, $b7;
        java.util.Map $r7;
        org.apache.batik.ext.awt.image.codec.png.PNGChunk r1;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Gray $r22;
        byte[][] $r8, $r10, $r12;
        short s2, $s4, $s6, $s8, $s31, $s33, $s36, $s39;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam $r5, $r14, $r17, $r18, $r20, $r21;
        org.apache.batik.ext.awt.image.codec.png.PNGImage r0;
        int[] r16;
        boolean $z0;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB $r19;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Palette $r15;
        int $i0, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, i27, i28, i29, $i30, $i32, $i34, $i35, $i37, $i38, $i40, $i41;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGImage;

        r1 := @parameter0: org.apache.batik.ext.awt.image.codec.png.PNGChunk;

        $i0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int colorType>;

        tableswitch($i0)
        {
            case 0: goto label2;
            case 1: goto label4;
            case 2: goto label3;
            case 3: goto label1;
            case 4: goto label2;
            case 5: goto label4;
            case 6: goto label3;
            default: goto label4;
        };

     label1:
        $b1 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: byte getByte(int)>(0);

        $s31 = (short) $b1;

        s2 = $s31 & 255;

        $r2 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: byte[] redPalette>;

        $i32 = (int) s2;

        $b3 = $r2[$i32];

        $s33 = (short) $b3;

        $s4 = $s33 & 255;

        $i34 = (int) $s4;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bkgdRed> = $i34;

        $r3 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: byte[] greenPalette>;

        $i35 = (int) s2;

        $b5 = $r3[$i35];

        $s36 = (short) $b5;

        $s6 = $s36 & 255;

        $i37 = (int) $s6;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bkgdGreen> = $i37;

        $r4 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: byte[] bluePalette>;

        $i38 = (int) s2;

        $b7 = $r4[$i38];

        $s39 = (short) $b7;

        $s8 = $s39 & 255;

        $i40 = (int) $s8;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bkgdBlue> = $i40;

        $r5 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam encodeParam>;

        if $r5 == null goto label4;

        $r14 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam encodeParam>;

        $r15 = (org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Palette) $r14;

        $i41 = (int) s2;

        virtualinvoke $r15.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Palette: void setBackgroundPaletteIndex(int)>($i41);

        goto label4;

     label2:
        $i26 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: int getInt2(int)>(0);

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bkgdBlue> = $i26;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bkgdGreen> = $i26;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bkgdRed> = $i26;

        $r20 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam encodeParam>;

        if $r20 == null goto label4;

        $r21 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam encodeParam>;

        $r22 = (org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Gray) $r21;

        virtualinvoke $r22.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Gray: void setBackgroundGray(int)>($i26);

        goto label4;

     label3:
        $i20 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: int getInt2(int)>(0);

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bkgdRed> = $i20;

        $i21 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: int getInt2(int)>(2);

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bkgdGreen> = $i21;

        $i22 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: int getInt2(int)>(4);

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bkgdBlue> = $i22;

        r16 = newarray (int)[3];

        $i23 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bkgdRed>;

        r16[0] = $i23;

        $i24 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bkgdGreen>;

        r16[1] = $i24;

        $i25 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bkgdBlue>;

        r16[2] = $i25;

        $r17 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam encodeParam>;

        if $r17 == null goto label4;

        $r18 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam encodeParam>;

        $r19 = (org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB) $r18;

        virtualinvoke $r19.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB: void setBackgroundRGB(int[])>(r16);

     label4:
        i27 = 0;

        i28 = 0;

        i29 = 0;

        $i30 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bitDepth>;

        if $i30 >= 8 goto label5;

        $r8 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: byte[][] expandBits>;

        $i14 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bitDepth>;

        $r9 = $r8[$i14];

        $i15 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bkgdRed>;

        i27 = $r9[$i15];

        $r10 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: byte[][] expandBits>;

        $i16 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bitDepth>;

        $r11 = $r10[$i16];

        $i17 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bkgdGreen>;

        i28 = $r11[$i17];

        $r12 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: byte[][] expandBits>;

        $i18 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bitDepth>;

        $r13 = $r12[$i18];

        $i19 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bkgdBlue>;

        i29 = $r13[$i19];

        goto label7;

     label5:
        $i9 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bitDepth>;

        if $i9 != 8 goto label6;

        i27 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bkgdRed>;

        i28 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bkgdGreen>;

        i29 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bkgdBlue>;

        goto label7;

     label6:
        $i10 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bitDepth>;

        if $i10 != 16 goto label7;

        $i11 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bkgdRed>;

        i27 = $i11 >> 8;

        $i12 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bkgdGreen>;

        i28 = $i12 >> 8;

        $i13 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bkgdBlue>;

        i29 = $i13 >> 8;

     label7:
        $z0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean emitProperties>;

        if $z0 == 0 goto label8;

        $r7 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.util.Map properties>;

        $r23 = new java.awt.Color;

        specialinvoke $r23.<java.awt.Color: void <init>(int,int,int)>(i27, i28, i29);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("background_color", $r23);

     label8:
        return;
    }

    private void parse_cHRM_chunk(org.apache.batik.ext.awt.image.codec.png.PNGChunk)
    {
        java.lang.Float $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45;
        java.util.Map $r14, $r17, $r20, $r23, $r26, $r29, $r32, $r35;
        org.apache.batik.ext.awt.image.codec.png.PNGChunk r2;
        float[] $r1, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r13, $r16, $r19, $r22, $r25, $r28, $r31, $r34, $r36;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam $r11, $r37;
        org.apache.batik.ext.awt.image.codec.png.PNGImage r0;
        boolean $z0;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGImage;

        r2 := @parameter0: org.apache.batik.ext.awt.image.codec.png.PNGChunk;

        $i0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int sRGBRenderingIntent>;

        $i10 = (int) -1;

        if $i0 == $i10 goto label1;

        return;

     label1:
        $r1 = newarray (float)[8];

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float[] chromaticity> = $r1;

        $r3 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float[] chromaticity>;

        $i1 = virtualinvoke r2.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: int getInt4(int)>(0);

        $f0 = (float) $i1;

        $f1 = $f0 / 100000.0F;

        $r3[0] = $f1;

        $r4 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float[] chromaticity>;

        $i2 = virtualinvoke r2.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: int getInt4(int)>(4);

        $f2 = (float) $i2;

        $f3 = $f2 / 100000.0F;

        $r4[1] = $f3;

        $r5 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float[] chromaticity>;

        $i3 = virtualinvoke r2.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: int getInt4(int)>(8);

        $f4 = (float) $i3;

        $f5 = $f4 / 100000.0F;

        $r5[2] = $f5;

        $r6 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float[] chromaticity>;

        $i4 = virtualinvoke r2.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: int getInt4(int)>(12);

        $f6 = (float) $i4;

        $f7 = $f6 / 100000.0F;

        $r6[3] = $f7;

        $r7 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float[] chromaticity>;

        $i5 = virtualinvoke r2.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: int getInt4(int)>(16);

        $f8 = (float) $i5;

        $f9 = $f8 / 100000.0F;

        $r7[4] = $f9;

        $r8 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float[] chromaticity>;

        $i6 = virtualinvoke r2.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: int getInt4(int)>(20);

        $f10 = (float) $i6;

        $f11 = $f10 / 100000.0F;

        $r8[5] = $f11;

        $r9 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float[] chromaticity>;

        $i7 = virtualinvoke r2.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: int getInt4(int)>(24);

        $f12 = (float) $i7;

        $f13 = $f12 / 100000.0F;

        $r9[6] = $f13;

        $r10 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float[] chromaticity>;

        $i8 = virtualinvoke r2.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: int getInt4(int)>(28);

        $f14 = (float) $i8;

        $f15 = $f14 / 100000.0F;

        $r10[7] = $f15;

        $r11 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam encodeParam>;

        if $r11 == null goto label2;

        $r37 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam encodeParam>;

        $r36 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float[] chromaticity>;

        virtualinvoke $r37.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: void setChromaticity(float[])>($r36);

     label2:
        $z0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean emitProperties>;

        if $z0 == 0 goto label3;

        $r14 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.util.Map properties>;

        $r38 = new java.lang.Float;

        $r13 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float[] chromaticity>;

        $f16 = $r13[0];

        specialinvoke $r38.<java.lang.Float: void <init>(float)>($f16);

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("white_point_x", $r38);

        $r17 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.util.Map properties>;

        $r39 = new java.lang.Float;

        $r16 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float[] chromaticity>;

        $f17 = $r16[1];

        specialinvoke $r39.<java.lang.Float: void <init>(float)>($f17);

        interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("white_point_y", $r39);

        $r20 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.util.Map properties>;

        $r40 = new java.lang.Float;

        $r19 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float[] chromaticity>;

        $f18 = $r19[2];

        specialinvoke $r40.<java.lang.Float: void <init>(float)>($f18);

        interfaceinvoke $r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("red_x", $r40);

        $r23 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.util.Map properties>;

        $r41 = new java.lang.Float;

        $r22 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float[] chromaticity>;

        $f19 = $r22[3];

        specialinvoke $r41.<java.lang.Float: void <init>(float)>($f19);

        interfaceinvoke $r23.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("red_y", $r41);

        $r26 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.util.Map properties>;

        $r42 = new java.lang.Float;

        $r25 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float[] chromaticity>;

        $f20 = $r25[4];

        specialinvoke $r42.<java.lang.Float: void <init>(float)>($f20);

        interfaceinvoke $r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("green_x", $r42);

        $r29 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.util.Map properties>;

        $r43 = new java.lang.Float;

        $r28 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float[] chromaticity>;

        $f21 = $r28[5];

        specialinvoke $r43.<java.lang.Float: void <init>(float)>($f21);

        interfaceinvoke $r29.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("green_y", $r43);

        $r32 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.util.Map properties>;

        $r44 = new java.lang.Float;

        $r31 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float[] chromaticity>;

        $f22 = $r31[6];

        specialinvoke $r44.<java.lang.Float: void <init>(float)>($f22);

        interfaceinvoke $r32.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("blue_x", $r44);

        $r35 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.util.Map properties>;

        $r45 = new java.lang.Float;

        $r34 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float[] chromaticity>;

        $f23 = $r34[7];

        specialinvoke $r45.<java.lang.Float: void <init>(float)>($f23);

        interfaceinvoke $r35.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("blue_y", $r45);

     label3:
        return;
    }

    private void parse_gAMA_chunk(org.apache.batik.ext.awt.image.codec.png.PNGChunk)
    {
        java.lang.Float $r6;
        org.apache.batik.ext.awt.image.codec.png.PNGImage r0;
        java.util.Map $r4;
        int $i0, $i1, $i3;
        boolean $z0, $z1;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam $r2, $r5;
        org.apache.batik.ext.awt.image.codec.png.PNGChunk r1;
        float $f0, $f1, f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGImage;

        r1 := @parameter0: org.apache.batik.ext.awt.image.codec.png.PNGChunk;

        $i0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int sRGBRenderingIntent>;

        $i3 = (int) -1;

        if $i0 == $i3 goto label1;

        return;

     label1:
        $i1 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: int getInt4(int)>(0);

        $f0 = (float) $i1;

        $f1 = $f0 / 100000.0F;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float fileGamma> = $f1;

        $z0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean performGammaCorrection>;

        if $z0 == 0 goto label2;

        $f8 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float displayExponent>;

        $f7 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float userExponent>;

        $f9 = $f8 / $f7;

        goto label3;

     label2:
        $f9 = 1.0F;

     label3:
        f2 = $f9;

        $r2 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam encodeParam>;

        if $r2 == null goto label4;

        $r5 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam encodeParam>;

        $f5 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float fileGamma>;

        $f6 = $f5 * $f9;

        virtualinvoke $r5.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: void setGamma(float)>($f6);

     label4:
        $z1 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean emitProperties>;

        if $z1 == 0 goto label5;

        $r4 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.util.Map properties>;

        $r6 = new java.lang.Float;

        $f3 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float fileGamma>;

        $f4 = $f3 * f2;

        specialinvoke $r6.<java.lang.Float: void <init>(float)>($f4);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("gamma", $r6);

     label5:
        return;
    }

    private void parse_hIST_chunk(org.apache.batik.ext.awt.image.codec.png.PNGChunk)
    {
        byte[] $r1, $r2;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam $r5, $r6;
        org.apache.batik.ext.awt.image.codec.png.PNGImage r0;
        java.lang.RuntimeException $r8;
        org.apache.batik.ext.awt.image.codec.png.PNGChunk r4;
        int[] r3;
        int $i0, $i1, i2, i3;
        java.lang.String $r7;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGImage;

        r4 := @parameter0: org.apache.batik.ext.awt.image.codec.png.PNGChunk;

        $r1 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: byte[] redPalette>;

        if $r1 != null goto label1;

        $r7 = staticinvoke <org.apache.batik.ext.awt.image.codec.util.PropertyUtil: java.lang.String getString(java.lang.String)>("PNGImageDecoder18");

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7);

        throw $r8;

     label1:
        $r2 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: byte[] redPalette>;

        i2 = lengthof $r2;

        r3 = newarray (int)[i2];

        i3 = 0;

        goto label3;

     label2:
        $i0 = 2 * i3;

        $i1 = virtualinvoke r4.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: int getInt2(int)>($i0);

        r3[i3] = $i1;

        i3 = i3 + 1;

     label3:
        if i3 < i2 goto label2;

        $r5 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam encodeParam>;

        if $r5 == null goto label4;

        $r6 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam encodeParam>;

        virtualinvoke $r6.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: void setPaletteHistogram(int[])>(r3);

     label4:
        return;
    }

    private void parse_iCCP_chunk(org.apache.batik.ext.awt.image.codec.png.PNGChunk)
    {
        org.apache.batik.ext.awt.image.codec.png.PNGImage r4;
        char $c2;
        org.apache.batik.ext.awt.image.codec.png.PNGChunk r0;
        byte $b1;
        java.lang.StringBuffer $r1, $r2, $r3;
        int $i0, i3;
        java.lang.String r5;

        r4 := @this: org.apache.batik.ext.awt.image.codec.png.PNGImage;

        r0 := @parameter0: org.apache.batik.ext.awt.image.codec.png.PNGChunk;

        r5 = "";

        i3 = 0;

        goto label2;

     label1:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r5);

        $c2 = (char) $b1;

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

        r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

     label2:
        $i0 = i3;

        i3 = i3 + 1;

        $b1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: byte getByte(int)>($i0);

        if $b1 != 0 goto label1;

        return;
    }

    private void parse_pHYs_chunk(org.apache.batik.ext.awt.image.codec.png.PNGChunk)
    {
        java.lang.Float $r7;
        org.apache.batik.ext.awt.image.codec.png.PNGImage r1;
        java.lang.Integer $r3, $r5;
        java.util.Map $r4, $r6, $r8, $r11;
        int $i0, $i1, $i2;
        java.lang.String $r9;
        boolean $z0;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam $r2, $r12;
        java.lang.RuntimeException $r10;
        org.apache.batik.ext.awt.image.codec.png.PNGChunk r0;
        float $f0, $f1, $f2;

        r1 := @this: org.apache.batik.ext.awt.image.codec.png.PNGImage;

        r0 := @parameter0: org.apache.batik.ext.awt.image.codec.png.PNGChunk;

        $i0 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: int getInt4(int)>(0);

        $i1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: int getInt4(int)>(4);

        $i2 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: int getInt1(int)>(8);

        $r2 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam encodeParam>;

        if $r2 == null goto label1;

        $r12 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam encodeParam>;

        virtualinvoke $r12.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: void setPhysicalDimension(int,int,int)>($i0, $i1, $i2);

     label1:
        $z0 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean emitProperties>;

        if $z0 == 0 goto label3;

        $r4 = r1.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.util.Map properties>;

        $r3 = new java.lang.Integer;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>($i0);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("x_pixels_per_unit", $r3);

        $r6 = r1.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.util.Map properties>;

        $r5 = new java.lang.Integer;

        specialinvoke $r5.<java.lang.Integer: void <init>(int)>($i1);

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("y_pixels_per_unit", $r5);

        $r8 = r1.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.util.Map properties>;

        $r7 = new java.lang.Float;

        $f1 = (float) $i0;

        $f0 = (float) $i1;

        $f2 = $f1 / $f0;

        specialinvoke $r7.<java.lang.Float: void <init>(float)>($f2);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pixel_aspect_ratio", $r7);

        if $i2 != 1 goto label2;

        $r11 = r1.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.util.Map properties>;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pixel_units", "Meters");

        goto label3;

     label2:
        if $i2 == 0 goto label3;

        $r9 = staticinvoke <org.apache.batik.ext.awt.image.codec.util.PropertyUtil: java.lang.String getString(java.lang.String)>("PNGImageDecoder12");

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>($r9);

        throw $r10;

     label3:
        return;
    }

    private void parse_sBIT_chunk(org.apache.batik.ext.awt.image.codec.png.PNGChunk)
    {
        org.apache.batik.ext.awt.image.codec.png.PNGImage r0;
        byte $b3;
        int[] $r1, $r2, $r6, $r8, $r10, $r12;
        java.util.Map $r9;
        int $i0, $i1, $i2, $i4, i5, $i6, $i7, $i8, $i9;
        java.lang.String $r4;
        boolean $z0;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam $r7, $r11;
        java.lang.RuntimeException $r13;
        org.apache.batik.ext.awt.image.codec.png.PNGChunk r3;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGImage;

        r3 := @parameter0: org.apache.batik.ext.awt.image.codec.png.PNGChunk;

        $i0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int colorType>;

        if $i0 != 3 goto label01;

        $r12 = newarray (int)[3];

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] significantBits> = $r12;

        goto label02;

     label01:
        $i1 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int inputBands>;

        $r1 = newarray (int)[$i1];

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] significantBits> = $r1;

     label02:
        i5 = 0;

        goto label08;

     label03:
        $b3 = virtualinvoke r3.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: byte getByte(int)>(i5);

        $i4 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int colorType>;

        if $i4 != 3 goto label04;

        $i6 = 8;

        goto label05;

     label04:
        $i6 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bitDepth>;

     label05:
        $i7 = (int) $b3;

        if $i7 <= 0 goto label06;

        $i8 = (int) $b3;

        if $i8 <= $i6 goto label07;

     label06:
        $r4 = staticinvoke <org.apache.batik.ext.awt.image.codec.util.PropertyUtil: java.lang.String getString(java.lang.String)>("PNGImageDecoder13");

        $r13 = new java.lang.RuntimeException;

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String)>($r4);

        throw $r13;

     label07:
        $r6 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] significantBits>;

        $i9 = (int) $b3;

        $r6[i5] = $i9;

        i5 = i5 + 1;

     label08:
        $r2 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] significantBits>;

        $i2 = lengthof $r2;

        if i5 < $i2 goto label03;

        $r7 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam encodeParam>;

        if $r7 == null goto label09;

        $r11 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam encodeParam>;

        $r10 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] significantBits>;

        virtualinvoke $r11.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: void setSignificantBits(int[])>($r10);

     label09:
        $z0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean emitProperties>;

        if $z0 == 0 goto label10;

        $r9 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.util.Map properties>;

        $r8 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] significantBits>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("significant_bits", $r8);

     label10:
        return;
    }

    private void parse_sRGB_chunk(org.apache.batik.ext.awt.image.codec.png.PNGChunk)
    {
        java.lang.Float $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49;
        org.apache.batik.ext.awt.image.codec.png.PNGImage r0;
        byte $b0;
        java.util.Map $r13, $r16, $r19, $r22, $r25, $r28, $r31, $r34, $r37;
        boolean $z0, $z1;
        org.apache.batik.ext.awt.image.codec.png.PNGChunk r1;
        float $f0, $f1, $f2, $f3, f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12;
        float[] $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r15, $r18, $r21, $r24, $r27, $r30, $r33, $r36, $r39;
        int $i1;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam $r11, $r38, $r40;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGImage;

        r1 := @parameter0: org.apache.batik.ext.awt.image.codec.png.PNGChunk;

        $b0 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: byte getByte(int)>(0);

        $i1 = (int) $b0;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int sRGBRenderingIntent> = $i1;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float fileGamma> = 0.45455F;

        $r2 = newarray (float)[8];

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float[] chromaticity> = $r2;

        $r3 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float[] chromaticity>;

        $r3[0] = 3.127F;

        $r4 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float[] chromaticity>;

        $r4[1] = 3.29F;

        $r5 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float[] chromaticity>;

        $r5[2] = 6.4F;

        $r6 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float[] chromaticity>;

        $r6[3] = 3.3F;

        $r7 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float[] chromaticity>;

        $r7[4] = 3.0F;

        $r8 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float[] chromaticity>;

        $r8[5] = 6.0F;

        $r9 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float[] chromaticity>;

        $r9[6] = 1.5F;

        $r10 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float[] chromaticity>;

        $r10[7] = 0.6F;

        $z0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean performGammaCorrection>;

        if $z0 == 0 goto label2;

        $f3 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float fileGamma>;

        $f1 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float displayExponent>;

        $f0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float userExponent>;

        $f2 = $f1 / $f0;

        f4 = $f3 * $f2;

        $r11 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam encodeParam>;

        if $r11 == null goto label1;

        $r38 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam encodeParam>;

        virtualinvoke $r38.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: void setGamma(float)>(f4);

        $r40 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam encodeParam>;

        $r39 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float[] chromaticity>;

        virtualinvoke $r40.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: void setChromaticity(float[])>($r39);

     label1:
        $z1 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean emitProperties>;

        if $z1 == 0 goto label2;

        $r13 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.util.Map properties>;

        $r41 = new java.lang.Float;

        specialinvoke $r41.<java.lang.Float: void <init>(float)>(f4);

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("gamma", $r41);

        $r16 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.util.Map properties>;

        $r42 = new java.lang.Float;

        $r15 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float[] chromaticity>;

        $f5 = $r15[0];

        specialinvoke $r42.<java.lang.Float: void <init>(float)>($f5);

        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("white_point_x", $r42);

        $r19 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.util.Map properties>;

        $r43 = new java.lang.Float;

        $r18 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float[] chromaticity>;

        $f6 = $r18[1];

        specialinvoke $r43.<java.lang.Float: void <init>(float)>($f6);

        interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("white_point_y", $r43);

        $r22 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.util.Map properties>;

        $r44 = new java.lang.Float;

        $r21 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float[] chromaticity>;

        $f7 = $r21[2];

        specialinvoke $r44.<java.lang.Float: void <init>(float)>($f7);

        interfaceinvoke $r22.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("red_x", $r44);

        $r25 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.util.Map properties>;

        $r45 = new java.lang.Float;

        $r24 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float[] chromaticity>;

        $f8 = $r24[3];

        specialinvoke $r45.<java.lang.Float: void <init>(float)>($f8);

        interfaceinvoke $r25.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("red_y", $r45);

        $r28 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.util.Map properties>;

        $r46 = new java.lang.Float;

        $r27 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float[] chromaticity>;

        $f9 = $r27[4];

        specialinvoke $r46.<java.lang.Float: void <init>(float)>($f9);

        interfaceinvoke $r28.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("green_x", $r46);

        $r31 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.util.Map properties>;

        $r47 = new java.lang.Float;

        $r30 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float[] chromaticity>;

        $f10 = $r30[5];

        specialinvoke $r47.<java.lang.Float: void <init>(float)>($f10);

        interfaceinvoke $r31.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("green_y", $r47);

        $r34 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.util.Map properties>;

        $r48 = new java.lang.Float;

        $r33 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float[] chromaticity>;

        $f11 = $r33[6];

        specialinvoke $r48.<java.lang.Float: void <init>(float)>($f11);

        interfaceinvoke $r34.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("blue_x", $r48);

        $r37 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.util.Map properties>;

        $r49 = new java.lang.Float;

        $r36 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: float[] chromaticity>;

        $f12 = $r36[7];

        specialinvoke $r49.<java.lang.Float: void <init>(float)>($f12);

        interfaceinvoke $r37.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("blue_y", $r49);

     label2:
        return;
    }

    private void parse_tEXt_chunk(org.apache.batik.ext.awt.image.codec.png.PNGChunk)
    {
        org.apache.batik.ext.awt.image.codec.png.PNGImage r3;
        byte $b1, $b4;
        java.lang.StringBuffer $r0, $r2;
        int $i0, $i3, i6, i7;
        java.lang.String $r5, $r7;
        char $c2, $c5;
        org.apache.batik.ext.awt.image.codec.png.PNGChunk r1;
        java.util.List $r4, $r6;

        r3 := @this: org.apache.batik.ext.awt.image.codec.png.PNGImage;

        r1 := @parameter0: org.apache.batik.ext.awt.image.codec.png.PNGChunk;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        i6 = 0;

        goto label2;

     label1:
        $c2 = (char) $b1;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

     label2:
        $i0 = i6;

        i6 = i6 + 1;

        $b1 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: byte getByte(int)>($i0);

        if $b1 != 0 goto label1;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        i7 = i6;

        goto label4;

     label3:
        $b4 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: byte getByte(int)>(i7);

        $c5 = (char) $b4;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c5);

        i7 = i7 + 1;

     label4:
        $i3 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: int getLength()>();

        if i7 < $i3 goto label3;

        $r4 = r3.<org.apache.batik.ext.awt.image.codec.png.PNGImage: java.util.List textKeys>;

        $r5 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r5);

        $r6 = r3.<org.apache.batik.ext.awt.image.codec.png.PNGImage: java.util.List textStrings>;

        $r7 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r7);

        return;
    }

    private void parse_tIME_chunk(org.apache.batik.ext.awt.image.codec.png.PNGChunk)
    {
        org.apache.batik.ext.awt.image.codec.png.PNGImage r4;
        java.util.Date $r3;
        java.util.Map $r6;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6;
        boolean $z0;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam $r5, $r7;
        java.util.GregorianCalendar $r2;
        java.util.TimeZone $r1;
        org.apache.batik.ext.awt.image.codec.png.PNGChunk r0;

        r4 := @this: org.apache.batik.ext.awt.image.codec.png.PNGImage;

        r0 := @parameter0: org.apache.batik.ext.awt.image.codec.png.PNGChunk;

        $i0 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: int getInt2(int)>(0);

        $i1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: int getInt1(int)>(2);

        i2 = $i1 - 1;

        $i3 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: int getInt1(int)>(3);

        $i4 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: int getInt1(int)>(4);

        $i5 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: int getInt1(int)>(5);

        $i6 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: int getInt1(int)>(6);

        $r1 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");

        $r2 = new java.util.GregorianCalendar;

        specialinvoke $r2.<java.util.GregorianCalendar: void <init>(java.util.TimeZone)>($r1);

        virtualinvoke $r2.<java.util.Calendar: void set(int,int,int,int,int,int)>($i0, i2, $i3, $i4, $i5, $i6);

        $r3 = virtualinvoke $r2.<java.util.Calendar: java.util.Date getTime()>();

        $r5 = r4.<org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam encodeParam>;

        if $r5 == null goto label1;

        $r7 = r4.<org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam encodeParam>;

        virtualinvoke $r7.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: void setModificationTime(java.util.Date)>($r3);

     label1:
        $z0 = r4.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean emitProperties>;

        if $z0 == 0 goto label2;

        $r6 = r4.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.util.Map properties>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("timestamp", $r3);

     label2:
        return;
    }

    private void parse_tRNS_chunk(org.apache.batik.ext.awt.image.codec.png.PNGChunk)
    {
        byte[] $r10, $r11, $r12;
        org.apache.batik.ext.awt.image.codec.png.PNGImage r0;
        byte $b19;
        int[] r15;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.batik.ext.awt.image.codec.png.PNGChunk r3;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Gray $r9;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i20, i21, i22;
        java.lang.String $r1, $r13;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam $r4, $r5, $r7, $r8;
        java.lang.RuntimeException $r2, $r14;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGImage;

        r3 := @parameter0: org.apache.batik.ext.awt.image.codec.png.PNGChunk;

        $i0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int colorType>;

        if $i0 != 3 goto label08;

        $i16 = virtualinvoke r3.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: int getLength()>();

        $i17 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int paletteEntries>;

        if $i16 <= $i17 goto label01;

        $r13 = staticinvoke <org.apache.batik.ext.awt.image.codec.util.PropertyUtil: java.lang.String getString(java.lang.String)>("PNGImageDecoder14");

        $r14 = new java.lang.RuntimeException;

        specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String)>($r13);

        throw $r14;

     label01:
        $i18 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int paletteEntries>;

        $r10 = newarray (byte)[$i18];

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: byte[] alphaPalette> = $r10;

        i21 = 0;

        goto label03;

     label02:
        $r11 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: byte[] alphaPalette>;

        $b19 = virtualinvoke r3.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: byte getByte(int)>(i21);

        $r11[i21] = $b19;

        i21 = i21 + 1;

     label03:
        if i21 < $i16 goto label02;

        i22 = $i16;

        goto label05;

     label04:
        $r12 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: byte[] alphaPalette>;

        $r12[i22] = -1;

        i22 = i22 + 1;

     label05:
        $i20 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int paletteEntries>;

        if i22 < $i20 goto label04;

        $z3 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean suppressAlpha>;

        if $z3 != 0 goto label07;

        $z4 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean expandPalette>;

        if $z4 == 0 goto label06;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int postProcess> = 5;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int outputBands> = 4;

        goto label07;

     label06:
        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean outputHasAlphaPalette> = 1;

     label07:
        goto label16;

     label08:
        $i1 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int colorType>;

        if $i1 != 0 goto label13;

        $i11 = virtualinvoke r3.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: int getInt2(int)>(0);

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int grayTransparentAlpha> = $i11;

        $z1 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean suppressAlpha>;

        if $z1 != 0 goto label16;

        $i12 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bitDepth>;

        if $i12 >= 8 goto label09;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean output8BitGray> = 1;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int maxOpacity> = 255;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int postProcess> = 3;

        goto label10;

     label09:
        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int postProcess> = 6;

     label10:
        $z2 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean expandGrayAlpha>;

        if $z2 == 0 goto label11;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int outputBands> = 4;

        $i14 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int postProcess>;

        $i15 = $i14 | 16;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int postProcess> = $i15;

        goto label12;

     label11:
        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int outputBands> = 2;

     label12:
        $r7 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam encodeParam>;

        if $r7 == null goto label16;

        $r8 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam encodeParam>;

        $r9 = (org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Gray) $r8;

        $i13 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int grayTransparentAlpha>;

        virtualinvoke $r9.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Gray: void setTransparentGray(int)>($i13);

        goto label16;

     label13:
        $i2 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int colorType>;

        if $i2 != 2 goto label14;

        $i5 = virtualinvoke r3.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: int getInt2(int)>(0);

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int redTransparentAlpha> = $i5;

        $i6 = virtualinvoke r3.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: int getInt2(int)>(2);

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int greenTransparentAlpha> = $i6;

        $i7 = virtualinvoke r3.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: int getInt2(int)>(4);

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int blueTransparentAlpha> = $i7;

        $z0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean suppressAlpha>;

        if $z0 != 0 goto label16;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int outputBands> = 4;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int postProcess> = 7;

        $r4 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam encodeParam>;

        if $r4 == null goto label16;

        r15 = newarray (int)[3];

        $i8 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int redTransparentAlpha>;

        r15[0] = $i8;

        $i9 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int greenTransparentAlpha>;

        r15[1] = $i9;

        $i10 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int blueTransparentAlpha>;

        r15[2] = $i10;

        $r5 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam encodeParam>;

        $r6 = (org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB) $r5;

        virtualinvoke $r6.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB: void setTransparentRGB(int[])>(r15);

        goto label16;

     label14:
        $i3 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int colorType>;

        if $i3 == 4 goto label15;

        $i4 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int colorType>;

        if $i4 != 6 goto label16;

     label15:
        $r1 = staticinvoke <org.apache.batik.ext.awt.image.codec.util.PropertyUtil: java.lang.String getString(java.lang.String)>("PNGImageDecoder15");

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>($r1);

        throw $r2;

     label16:
        return;
    }

    private void parse_zTXt_chunk(org.apache.batik.ext.awt.image.codec.png.PNGChunk)
    {
        byte[] $r3;
        org.apache.batik.ext.awt.image.codec.png.PNGImage r6;
        java.util.zip.InflaterInputStream $r15;
        byte $b1;
        java.io.ByteArrayInputStream $r14;
        java.lang.StringBuffer $r12, $r13;
        int $i0, $i3, $i4, i6, i7, i8, $i10;
        java.lang.String $r8, $r10;
        char $c2, $c5;
        org.apache.batik.ext.awt.image.codec.png.PNGChunk r1;
        java.lang.Exception $r11;
        java.util.List $r7, $r9;

        r6 := @this: org.apache.batik.ext.awt.image.codec.png.PNGImage;

        r1 := @parameter0: org.apache.batik.ext.awt.image.codec.png.PNGChunk;

        i6 = 0;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        goto label2;

     label1:
        $c2 = (char) $b1;

        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

     label2:
        $i0 = i6;

        i6 = i6 + 1;

        $b1 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: byte getByte(int)>($i0);

        if $b1 != 0 goto label1;

        i7 = i6 + 1;

        virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: byte getByte(int)>(i6);

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

     label3:
        $i3 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: int getLength()>();

        i8 = $i3 - i7;

        $r3 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: byte[] getData()>();

        $r14 = new java.io.ByteArrayInputStream;

        specialinvoke $r14.<java.io.ByteArrayInputStream: void <init>(byte[],int,int)>($r3, i7, i8);

        $r15 = new java.util.zip.InflaterInputStream;

        specialinvoke $r15.<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream)>($r14);

        goto label5;

     label4:
        $c5 = (char) $i4;

        virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c5);

     label5:
        $i4 = virtualinvoke $r15.<java.io.InputStream: int read()>();

        $i10 = (int) -1;

        if $i4 != $i10 goto label4;

        $r7 = r6.<org.apache.batik.ext.awt.image.codec.png.PNGImage: java.util.List ztextKeys>;

        $r8 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r8);

        $r9 = r6.<org.apache.batik.ext.awt.image.codec.png.PNGImage: java.util.List ztextStrings>;

        $r10 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r10);

     label6:
        goto label8;

     label7:
        $r11 := @caughtexception;

        virtualinvoke $r11.<java.lang.Throwable: void printStackTrace()>();

     label8:
        return;

        catch java.lang.Exception from label3 to label6 with label7;
    }

    private java.awt.image.WritableRaster createRaster(int, int, int, int, int)
    {
        int[][] $r3, $r6;
        org.apache.batik.ext.awt.image.codec.png.PNGImage r2;
        java.awt.Point $r0;
        java.awt.image.DataBufferByte $r5, $r8;
        java.awt.image.DataBufferUShort $r1;
        int[] $r4, $r7;
        int i0, i1, i2, $i3, i4, i5, $i6, $i7;
        java.awt.image.WritableRaster r9;

        r2 := @this: org.apache.batik.ext.awt.image.codec.png.PNGImage;

        i4 := @parameter0: int;

        i1 := @parameter1: int;

        i5 := @parameter2: int;

        i2 := @parameter3: int;

        i0 := @parameter4: int;

        $r0 = new java.awt.Point;

        specialinvoke $r0.<java.awt.Point: void <init>(int,int)>(0, 0);

        if i0 >= 8 goto label1;

        if i5 != 1 goto label1;

        $r8 = new java.awt.image.DataBufferByte;

        $i7 = i1 * i2;

        specialinvoke $r8.<java.awt.image.DataBufferByte: void <init>(int)>($i7);

        r9 = staticinvoke <java.awt.image.Raster: java.awt.image.WritableRaster createPackedRaster(java.awt.image.DataBuffer,int,int,int,java.awt.Point)>($r8, i4, i1, i0, $r0);

        goto label3;

     label1:
        if i0 > 8 goto label2;

        $r5 = new java.awt.image.DataBufferByte;

        $i6 = i1 * i2;

        specialinvoke $r5.<java.awt.image.DataBufferByte: void <init>(int)>($i6);

        $r6 = r2.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int[][] bandOffsets>;

        $r7 = $r6[i5];

        r9 = staticinvoke <java.awt.image.Raster: java.awt.image.WritableRaster createInterleavedRaster(java.awt.image.DataBuffer,int,int,int,int,int[],java.awt.Point)>($r5, i4, i1, i2, i5, $r7, $r0);

        goto label3;

     label2:
        $r1 = new java.awt.image.DataBufferUShort;

        $i3 = i1 * i2;

        specialinvoke $r1.<java.awt.image.DataBufferUShort: void <init>(int)>($i3);

        $r3 = r2.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int[][] bandOffsets>;

        $r4 = $r3[i5];

        r9 = staticinvoke <java.awt.image.Raster: java.awt.image.WritableRaster createInterleavedRaster(java.awt.image.DataBuffer,int,int,int,int,int[],java.awt.Point)>($r1, i4, i1, i2, i5, $r4, $r0);

     label3:
        return r9;
    }

    private static void decodeSubFilter(byte[], int, int)
    {
        byte[] r0;
        short $s5, s8, $s10, $s11;
        byte $b2, $b4, $b6;
        int i0, i1, $i3, i7, i9, $i12, $i13;

        r0 := @parameter0: byte[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        i7 = i0;

        goto label2;

     label1:
        $b2 = r0[i7];

        $s10 = (short) $b2;

        s8 = $s10 & 255;

        $i3 = i7 - i0;

        $b4 = r0[$i3];

        $s11 = (short) $b4;

        $s5 = $s11 & 255;

        $i12 = (int) s8;

        $i13 = (int) $s5;

        i9 = $i12 + $i13;

        $b6 = (byte) i9;

        r0[i7] = $b6;

        i7 = i7 + 1;

     label2:
        if i7 < i1 goto label1;

        return;
    }

    private static void decodeUpFilter(byte[], byte[], int)
    {
        byte[] r0, r1;
        short s2, s4, $s8, $s9;
        byte $b1, $b3, $b6;
        int i0, $i5, i7, $i10, $i11;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        i0 := @parameter2: int;

        i7 = 0;

        goto label2;

     label1:
        $b1 = r0[i7];

        $s8 = (short) $b1;

        s2 = $s8 & 255;

        $b3 = r1[i7];

        $s9 = (short) $b3;

        s4 = $s9 & 255;

        $i10 = (int) s2;

        $i11 = (int) s4;

        $i5 = $i10 + $i11;

        $b6 = (byte) $i5;

        r0[i7] = $b6;

        i7 = i7 + 1;

     label2:
        if i7 < i0 goto label1;

        return;
    }

    private static void decodeAverageFilter(byte[], byte[], int, int)
    {
        byte[] r0, r1;
        byte $b1, $b2, $b5, $b7, $b9, $b11, $b15;
        short s10, s17, s18, s20, s21, $s22, $s23, $s26, $s27, $s28;
        int i0, $i3, $i4, i6, $i8, $i12, $i13, $i14, i16, i19, $i24, $i25, $i29, $i30, $i31;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        i6 := @parameter2: int;

        i0 := @parameter3: int;

        i16 = 0;

        goto label2;

     label1:
        $b1 = r0[i16];

        $s22 = (short) $b1;

        s17 = $s22 & 255;

        $b2 = r1[i16];

        $s23 = (short) $b2;

        s18 = $s23 & 255;

        $i24 = (int) s18;

        $i3 = $i24 / 2;

        $i25 = (int) s17;

        $i4 = $i25 + $i3;

        $b5 = (byte) $i4;

        r0[i16] = $b5;

        i16 = i16 + 1;

     label2:
        if i16 < i0 goto label1;

        i19 = i0;

        goto label4;

     label3:
        $b7 = r0[i19];

        $s26 = (short) $b7;

        s20 = $s26 & 255;

        $i8 = i19 - i0;

        $b9 = r0[$i8];

        $s27 = (short) $b9;

        s10 = $s27 & 255;

        $b11 = r1[i19];

        $s28 = (short) $b11;

        s21 = $s28 & 255;

        $i29 = (int) s10;

        $i30 = (int) s21;

        $i12 = $i29 + $i30;

        $i13 = $i12 / 2;

        $i31 = (int) s20;

        $i14 = $i31 + $i13;

        $b15 = (byte) $i14;

        r0[i19] = $b15;

        i19 = i19 + 1;

     label4:
        if i19 < i6 goto label3;

        return;
    }

    private static void decodePaethFilter(byte[], byte[], int, int)
    {
        byte[] r0, r1;
        byte $b1, $b2, $b4, $b6, $b8, $b10, $b12, $b16;
        short s9, s13, s18, s19, s21, s22, $s23, $s24, $s27, $s28, $s29, $s30;
        int i0, $i3, i5, $i7, $i11, $i14, $i15, i17, i20, $i25, $i26, $i31, $i32, $i33, $i34;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        i5 := @parameter2: int;

        i0 := @parameter3: int;

        i17 = 0;

        goto label2;

     label1:
        $b1 = r0[i17];

        $s23 = (short) $b1;

        s18 = $s23 & 255;

        $b2 = r1[i17];

        $s24 = (short) $b2;

        s19 = $s24 & 255;

        $i25 = (int) s18;

        $i26 = (int) s19;

        $i3 = $i25 + $i26;

        $b4 = (byte) $i3;

        r0[i17] = $b4;

        i17 = i17 + 1;

     label2:
        if i17 < i0 goto label1;

        i20 = i0;

        goto label4;

     label3:
        $b6 = r0[i20];

        $s27 = (short) $b6;

        s21 = $s27 & 255;

        $i7 = i20 - i0;

        $b8 = r0[$i7];

        $s28 = (short) $b8;

        s9 = $s28 & 255;

        $b10 = r1[i20];

        $s29 = (short) $b10;

        s22 = $s29 & 255;

        $i11 = i20 - i0;

        $b12 = r1[$i11];

        $s30 = (short) $b12;

        s13 = $s30 & 255;

        $i31 = (int) s9;

        $i32 = (int) s22;

        $i33 = (int) s13;

        $i14 = staticinvoke <org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: int paethPredictor(int,int,int)>($i31, $i32, $i33);

        $i34 = (int) s21;

        $i15 = $i34 + $i14;

        $b16 = (byte) $i15;

        r0[i20] = $b16;

        i20 = i20 + 1;

     label4:
        if i20 < i5 goto label3;

        return;
    }

    private void processPixels(int, java.awt.image.Raster, java.awt.image.WritableRaster, int, int, int, int)
    {
        byte[] $r18, $r19, $r20, $r21, $r22, $r23, $r24;
        byte $b21, $b22, $b23, $b24, $b25, $b26, $b27;
        java.awt.image.Raster r0;
        org.apache.batik.ext.awt.image.codec.png.PNGImage r6;
        int[] $r1, $r2, $r4, $r5, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r25, $r26, $r27;
        boolean $z0, $z1, $z2, $z3, $z4;
        int i0, i1, i2, $i3, $i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i28, $i29, $i30, $i31, $i32, $i33, $i34, i35, i36, i37, i38, i39, i40, i41, i42, i43, i44, i45, i46, i47, i48, i49, i50, i51, i52, $i53, i54, i55, i56, i57, i58, i59, i60, i61, i62, i63, i64, i65, i66, i67, i68, i69, i70, i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78;
        java.awt.image.WritableRaster r3;

        r6 := @this: org.apache.batik.ext.awt.image.codec.png.PNGImage;

        i1 := @parameter0: int;

        r0 := @parameter1: java.awt.image.Raster;

        r3 := @parameter2: java.awt.image.WritableRaster;

        i0 := @parameter3: int;

        i6 := @parameter4: int;

        i5 := @parameter5: int;

        i2 := @parameter6: int;

        $r1 = (int[]) null;

        $r2 = virtualinvoke r0.<java.awt.image.Raster: int[] getPixel(int,int,int[])>(0, 0, $r1);

        $r4 = (int[]) null;

        $r5 = virtualinvoke r3.<java.awt.image.Raster: int[] getPixel(int,int,int[])>(0, 0, $r4);

        i35 = i0;

        tableswitch(i1)
        {
            case 0: goto label01;
            case 1: goto label04;
            case 2: goto label09;
            case 3: goto label12;
            case 4: goto label17;
            case 5: goto label20;
            case 6: goto label23;
            case 7: goto label29;
            case 8: goto label36;
            case 9: goto label41;
            case 10: goto label63;
            case 11: goto label63;
            case 12: goto label63;
            case 13: goto label63;
            case 14: goto label63;
            case 15: goto label63;
            case 16: goto label49;
            case 17: goto label46;
            case 18: goto label63;
            case 19: goto label58;
            case 20: goto label63;
            case 21: goto label63;
            case 22: goto label52;
            default: goto label63;
        };

     label01:
        i36 = 0;

        goto label03;

     label02:
        virtualinvoke r0.<java.awt.image.Raster: int[] getPixel(int,int,int[])>(i36, 0, $r2);

        virtualinvoke r3.<java.awt.image.WritableRaster: void setPixel(int,int,int[])>(i35, i5, $r2);

        i35 = i35 + i6;

        i36 = i36 + 1;

     label03:
        if i36 < i2 goto label02;

        goto label63;

     label04:
        i37 = 0;

        goto label08;

     label05:
        virtualinvoke r0.<java.awt.image.Raster: int[] getPixel(int,int,int[])>(i37, 0, $r2);

        i38 = 0;

        goto label07;

     label06:
        i39 = $r2[i38];

        $r27 = r6.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] gammaLut>;

        $i34 = $r27[i39];

        $r2[i38] = $i34;

        i38 = i38 + 1;

     label07:
        $i33 = r6.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int inputBands>;

        if i38 < $i33 goto label06;

        virtualinvoke r3.<java.awt.image.WritableRaster: void setPixel(int,int,int[])>(i35, i5, $r2);

        i35 = i35 + i6;

        i37 = i37 + 1;

     label08:
        if i37 < i2 goto label05;

        goto label63;

     label09:
        i40 = 0;

        goto label11;

     label10:
        virtualinvoke r0.<java.awt.image.Raster: int[] getPixel(int,int,int[])>(i40, 0, $r2);

        $r26 = r6.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] grayLut>;

        $i31 = $r2[0];

        $i32 = $r26[$i31];

        $r5[0] = $i32;

        virtualinvoke r3.<java.awt.image.WritableRaster: void setPixel(int,int,int[])>(i35, i5, $r5);

        i35 = i35 + i6;

        i40 = i40 + 1;

     label11:
        if i40 < i2 goto label10;

        goto label63;

     label12:
        i41 = 0;

        goto label16;

     label13:
        virtualinvoke r0.<java.awt.image.Raster: int[] getPixel(int,int,int[])>(i41, 0, $r2);

        i42 = $r2[0];

        $r25 = r6.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] grayLut>;

        $i28 = $r25[i42];

        $r5[0] = $i28;

        $i29 = r6.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int grayTransparentAlpha>;

        if i42 != $i29 goto label14;

        $r5[1] = 0;

        goto label15;

     label14:
        $i30 = r6.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int maxOpacity>;

        $r5[1] = $i30;

     label15:
        virtualinvoke r3.<java.awt.image.WritableRaster: void setPixel(int,int,int[])>(i35, i5, $r5);

        i35 = i35 + i6;

        i41 = i41 + 1;

     label16:
        if i41 < i2 goto label13;

        goto label63;

     label17:
        i43 = 0;

        goto label19;

     label18:
        virtualinvoke r0.<java.awt.image.Raster: int[] getPixel(int,int,int[])>(i43, 0, $r2);

        i44 = $r2[0];

        $r22 = r6.<org.apache.batik.ext.awt.image.codec.png.PNGImage: byte[] redPalette>;

        $b25 = $r22[i44];

        $i72 = (int) $b25;

        $r5[0] = $i72;

        $r23 = r6.<org.apache.batik.ext.awt.image.codec.png.PNGImage: byte[] greenPalette>;

        $b26 = $r23[i44];

        $i73 = (int) $b26;

        $r5[1] = $i73;

        $r24 = r6.<org.apache.batik.ext.awt.image.codec.png.PNGImage: byte[] bluePalette>;

        $b27 = $r24[i44];

        $i74 = (int) $b27;

        $r5[2] = $i74;

        virtualinvoke r3.<java.awt.image.WritableRaster: void setPixel(int,int,int[])>(i35, i5, $r5);

        i35 = i35 + i6;

        i43 = i43 + 1;

     label19:
        if i43 < i2 goto label18;

        goto label63;

     label20:
        i45 = 0;

        goto label22;

     label21:
        virtualinvoke r0.<java.awt.image.Raster: int[] getPixel(int,int,int[])>(i45, 0, $r2);

        i46 = $r2[0];

        $r18 = r6.<org.apache.batik.ext.awt.image.codec.png.PNGImage: byte[] redPalette>;

        $b21 = $r18[i46];

        $i75 = (int) $b21;

        $r5[0] = $i75;

        $r19 = r6.<org.apache.batik.ext.awt.image.codec.png.PNGImage: byte[] greenPalette>;

        $b22 = $r19[i46];

        $i76 = (int) $b22;

        $r5[1] = $i76;

        $r20 = r6.<org.apache.batik.ext.awt.image.codec.png.PNGImage: byte[] bluePalette>;

        $b23 = $r20[i46];

        $i77 = (int) $b23;

        $r5[2] = $i77;

        $r21 = r6.<org.apache.batik.ext.awt.image.codec.png.PNGImage: byte[] alphaPalette>;

        $b24 = $r21[i46];

        $i78 = (int) $b24;

        $r5[3] = $i78;

        virtualinvoke r3.<java.awt.image.WritableRaster: void setPixel(int,int,int[])>(i35, i5, $r5);

        i35 = i35 + i6;

        i45 = i45 + 1;

     label22:
        if i45 < i2 goto label21;

        goto label63;

     label23:
        i47 = 0;

        goto label28;

     label24:
        virtualinvoke r0.<java.awt.image.Raster: int[] getPixel(int,int,int[])>(i47, 0, $r2);

        i48 = $r2[0];

        $z4 = r6.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean performGammaCorrection>;

        if $z4 == 0 goto label25;

        $r17 = r6.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] gammaLut>;

        i48 = $r17[i48];

     label25:
        $r5[0] = i48;

        $i19 = r6.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int grayTransparentAlpha>;

        if i48 != $i19 goto label26;

        $r5[1] = 0;

        goto label27;

     label26:
        $i20 = r6.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int maxOpacity>;

        $r5[1] = $i20;

     label27:
        virtualinvoke r3.<java.awt.image.WritableRaster: void setPixel(int,int,int[])>(i35, i5, $r5);

        i35 = i35 + i6;

        i47 = i47 + 1;

     label28:
        if i47 < i2 goto label24;

        goto label63;

     label29:
        i49 = 0;

        goto label35;

     label30:
        virtualinvoke r0.<java.awt.image.Raster: int[] getPixel(int,int,int[])>(i49, 0, $r2);

        i50 = $r2[0];

        i51 = $r2[1];

        i52 = $r2[2];

        $z3 = r6.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean performGammaCorrection>;

        if $z3 == 0 goto label31;

        $r14 = r6.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] gammaLut>;

        $i16 = $r14[i50];

        $r5[0] = $i16;

        $r15 = r6.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] gammaLut>;

        $i17 = $r15[i51];

        $r5[1] = $i17;

        $r16 = r6.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] gammaLut>;

        $i18 = $r16[i52];

        $r5[2] = $i18;

        goto label32;

     label31:
        $r5[0] = i50;

        $r5[1] = i51;

        $r5[2] = i52;

     label32:
        $i13 = r6.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int redTransparentAlpha>;

        if i50 != $i13 goto label33;

        $i14 = r6.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int greenTransparentAlpha>;

        if i51 != $i14 goto label33;

        $i15 = r6.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int blueTransparentAlpha>;

        if i52 != $i15 goto label33;

        $r5[3] = 0;

        goto label34;

     label33:
        $i53 = r6.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int maxOpacity>;

        $r5[3] = $i53;

     label34:
        virtualinvoke r3.<java.awt.image.WritableRaster: void setPixel(int,int,int[])>(i35, i5, $r5);

        i35 = i35 + i6;

        i49 = i49 + 1;

     label35:
        if i49 < i2 goto label30;

        goto label63;

     label36:
        i54 = 0;

        goto label40;

     label37:
        virtualinvoke r0.<java.awt.image.Raster: int[] getPixel(int,int,int[])>(i54, 0, $r2);

        i55 = $r2[0];

        $z2 = r6.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean performGammaCorrection>;

        if $z2 == 0 goto label38;

        $r13 = r6.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] gammaLut>;

        $i12 = $r13[i55];

        $r5[0] = $i12;

        goto label39;

     label38:
        $r5[0] = i55;

     label39:
        virtualinvoke r3.<java.awt.image.WritableRaster: void setPixel(int,int,int[])>(i35, i5, $r5);

        i35 = i35 + i6;

        i54 = i54 + 1;

     label40:
        if i54 < i2 goto label37;

        goto label63;

     label41:
        i56 = 0;

        goto label45;

     label42:
        virtualinvoke r0.<java.awt.image.Raster: int[] getPixel(int,int,int[])>(i56, 0, $r2);

        i57 = $r2[0];

        i58 = $r2[1];

        i59 = $r2[2];

        $z1 = r6.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean performGammaCorrection>;

        if $z1 == 0 goto label43;

        $r10 = r6.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] gammaLut>;

        $i9 = $r10[i57];

        $r5[0] = $i9;

        $r11 = r6.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] gammaLut>;

        $i10 = $r11[i58];

        $r5[1] = $i10;

        $r12 = r6.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] gammaLut>;

        $i11 = $r12[i59];

        $r5[2] = $i11;

        goto label44;

     label43:
        $r5[0] = i57;

        $r5[1] = i58;

        $r5[2] = i59;

     label44:
        virtualinvoke r3.<java.awt.image.WritableRaster: void setPixel(int,int,int[])>(i35, i5, $r5);

        i35 = i35 + i6;

        i56 = i56 + 1;

     label45:
        if i56 < i2 goto label42;

        goto label63;

     label46:
        i60 = 0;

        goto label48;

     label47:
        virtualinvoke r0.<java.awt.image.Raster: int[] getPixel(int,int,int[])>(i60, 0, $r2);

        i61 = $r2[0];

        i62 = $r2[1];

        $r9 = r6.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] gammaLut>;

        i63 = $r9[i61];

        $r5[0] = i63;

        $r5[1] = i63;

        $r5[2] = i63;

        $r5[3] = i62;

        virtualinvoke r3.<java.awt.image.WritableRaster: void setPixel(int,int,int[])>(i35, i5, $r5);

        i35 = i35 + i6;

        i60 = i60 + 1;

     label48:
        if i60 < i2 goto label47;

        goto label63;

     label49:
        i64 = 0;

        goto label51;

     label50:
        virtualinvoke r0.<java.awt.image.Raster: int[] getPixel(int,int,int[])>(i64, 0, $r2);

        i65 = $r2[0];

        i66 = $r2[1];

        $r5[0] = i65;

        $r5[1] = i65;

        $r5[2] = i65;

        $r5[3] = i66;

        virtualinvoke r3.<java.awt.image.WritableRaster: void setPixel(int,int,int[])>(i35, i5, $r5);

        i35 = i35 + i6;

        i64 = i64 + 1;

     label51:
        if i64 < i2 goto label50;

        goto label63;

     label52:
        i67 = 0;

        goto label57;

     label53:
        virtualinvoke r0.<java.awt.image.Raster: int[] getPixel(int,int,int[])>(i67, 0, $r2);

        i68 = $r2[0];

        $z0 = r6.<org.apache.batik.ext.awt.image.codec.png.PNGImage: boolean performGammaCorrection>;

        if $z0 == 0 goto label54;

        $r7 = r6.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] gammaLut>;

        i68 = $r7[i68];

     label54:
        $r5[0] = i68;

        $r5[1] = i68;

        $r5[2] = i68;

        $i3 = r6.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int grayTransparentAlpha>;

        if i68 != $i3 goto label55;

        $r5[3] = 0;

        goto label56;

     label55:
        $i4 = r6.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int maxOpacity>;

        $r5[3] = $i4;

     label56:
        virtualinvoke r3.<java.awt.image.WritableRaster: void setPixel(int,int,int[])>(i35, i5, $r5);

        i35 = i35 + i6;

        i67 = i67 + 1;

     label57:
        if i67 < i2 goto label53;

        goto label63;

     label58:
        i69 = 0;

        goto label62;

     label59:
        virtualinvoke r0.<java.awt.image.Raster: int[] getPixel(int,int,int[])>(i69, 0, $r2);

        i70 = $r2[0];

        $r8 = r6.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] grayLut>;

        i71 = $r8[i70];

        $r5[0] = i71;

        $r5[1] = i71;

        $r5[2] = i71;

        $i7 = r6.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int grayTransparentAlpha>;

        if i70 != $i7 goto label60;

        $r5[3] = 0;

        goto label61;

     label60:
        $i8 = r6.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int maxOpacity>;

        $r5[3] = $i8;

     label61:
        virtualinvoke r3.<java.awt.image.WritableRaster: void setPixel(int,int,int[])>(i35, i5, $r5);

        i35 = i35 + i6;

        i69 = i69 + 1;

     label62:
        if i69 < i2 goto label59;

     label63:
        return;
    }

    private void decodePass(java.awt.image.WritableRaster, int, int, int, int, int, int)
    {
        byte[] r11, r12, r13, r15;
        org.apache.batik.ext.awt.image.codec.png.PNGImage r0;
        java.awt.image.DataBufferByte $r9;
        java.awt.image.DataBufferUShort $r3;
        byte $b15, $b17;
        java.lang.Exception $r10;
        short[] r14;
        java.awt.image.DataBuffer $r2;
        java.io.DataInputStream $r4, $r5;
        short $s18, $s21, $s36;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7, $i8, i9, $i10, $i11, $i12, i13, $i14, $i16, $i19, $i20, i22, i23, $i24, i25, $i26, $i27, $i28, i29, i30, i31, $i32, i33, i34, $i35, $i37;
        java.lang.String $r7;
        java.lang.RuntimeException $r16;
        java.awt.image.WritableRaster $r1, r6;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGImage;

        r6 := @parameter0: java.awt.image.WritableRaster;

        i22 := @parameter1: int;

        i13 := @parameter2: int;

        i23 := @parameter3: int;

        i25 := @parameter4: int;

        i0 := @parameter5: int;

        i1 := @parameter6: int;

        if i0 == 0 goto label01;

        if i1 != 0 goto label02;

     label01:
        return;

     label02:
        $i2 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int inputBands>;

        $i4 = $i2 * i0;

        $i3 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bitDepth>;

        $i5 = $i4 * $i3;

        $i6 = $i5 + 7;

        i7 = $i6 / 8;

        $i8 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bitDepth>;

        if $i8 != 16 goto label03;

        $i28 = i7 / 2;

        goto label04;

     label03:
        $i28 = i7;

     label04:
        i9 = $i28;

        r11 = newarray (byte)[i7];

        r12 = newarray (byte)[i7];

        $i11 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int inputBands>;

        $i10 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bitDepth>;

        $r1 = specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: java.awt.image.WritableRaster createRaster(int,int,int,int,int)>(i0, 1, $i11, $i28, $i10);

        $r2 = virtualinvoke $r1.<java.awt.image.Raster: java.awt.image.DataBuffer getDataBuffer()>();

        $i12 = virtualinvoke $r2.<java.awt.image.DataBuffer: int getDataType()>();

        r13 = null;

        r14 = null;

        if $i12 != 0 goto label05;

        $r9 = (java.awt.image.DataBufferByte) $r2;

        r13 = virtualinvoke $r9.<java.awt.image.DataBufferByte: byte[] getData()>();

        goto label06;

     label05:
        $r3 = (java.awt.image.DataBufferUShort) $r2;

        r14 = virtualinvoke $r3.<java.awt.image.DataBufferUShort: short[] getData()>();

     label06:
        i29 = 0;

        i30 = i13;

        goto label23;

     label07:
        i31 = 0;

     label08:
        $r4 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: java.io.DataInputStream dataStream>;

        i31 = virtualinvoke $r4.<java.io.FilterInputStream: int read()>();

        $r5 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: java.io.DataInputStream dataStream>;

        virtualinvoke $r5.<java.io.DataInputStream: void readFully(byte[],int,int)>(r11, 0, i7);

     label09:
        goto label11;

     label10:
        $r10 := @caughtexception;

        virtualinvoke $r10.<java.lang.Throwable: void printStackTrace()>();

     label11:
        tableswitch(i31)
        {
            case 0: goto label12;
            case 1: goto label13;
            case 2: goto label14;
            case 3: goto label15;
            case 4: goto label16;
            default: goto label17;
        };

     label12:
        goto label18;

     label13:
        $i27 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bytesPerPixel>;

        staticinvoke <org.apache.batik.ext.awt.image.codec.png.PNGImage: void decodeSubFilter(byte[],int,int)>(r11, i7, $i27);

        goto label18;

     label14:
        staticinvoke <org.apache.batik.ext.awt.image.codec.png.PNGImage: void decodeUpFilter(byte[],byte[],int)>(r11, r12, i7);

        goto label18;

     label15:
        $i26 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bytesPerPixel>;

        staticinvoke <org.apache.batik.ext.awt.image.codec.png.PNGImage: void decodeAverageFilter(byte[],byte[],int,int)>(r11, r12, i7, $i26);

        goto label18;

     label16:
        $i14 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bytesPerPixel>;

        staticinvoke <org.apache.batik.ext.awt.image.codec.png.PNGImage: void decodePaethFilter(byte[],byte[],int,int)>(r11, r12, i7, $i14);

        goto label18;

     label17:
        $r7 = staticinvoke <org.apache.batik.ext.awt.image.codec.util.PropertyUtil: java.lang.String getString(java.lang.String)>("PNGImageDecoder16");

        $r16 = new java.lang.RuntimeException;

        specialinvoke $r16.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7);

        throw $r16;

     label18:
        $i32 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int bitDepth>;

        if $i32 >= 16 goto label19;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r11, 0, r13, 0, i7);

        goto label22;

     label19:
        i33 = 0;

        i34 = 0;

        goto label21;

     label20:
        $b15 = r11[i33];

        $i35 = (int) $b15;

        $i19 = $i35 << 8;

        $i16 = i33 + 1;

        $b17 = r11[$i16];

        $s36 = (short) $b17;

        $s18 = $s36 & 255;

        $i37 = (int) $s18;

        $i20 = $i19 | $i37;

        $s21 = (short) $i20;

        r14[i34] = $s21;

        i33 = i33 + 2;

        i34 = i34 + 1;

     label21:
        if i34 < i9 goto label20;

     label22:
        $i24 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: int postProcess>;

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: void processPixels(int,java.awt.image.Raster,java.awt.image.WritableRaster,int,int,int,int)>($i24, $r1, r6, i22, i23, i30, i0);

        r15 = r12;

        r12 = r11;

        r11 = r15;

        i29 = i29 + 1;

        i30 = i30 + i25;

     label23:
        if i29 < i1 goto label07;

        return;

        catch java.lang.Exception from label08 to label09 with label10;
    }

    private void decodeImage(boolean)
    {
        org.apache.batik.ext.awt.image.codec.png.PNGImage r0;
        boolean z0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39;
        java.awt.image.WritableRaster $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGImage;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label1;

        $r8 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: java.awt.image.WritableRaster theTile>;

        $i39 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int width>;

        $i38 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int height>;

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: void decodePass(java.awt.image.WritableRaster,int,int,int,int,int,int)>($r8, 0, 0, 1, 1, $i39, $i38);

        goto label2;

     label1:
        $r1 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: java.awt.image.WritableRaster theTile>;

        $i0 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int width>;

        $i1 = $i0 + 7;

        $i5 = $i1 / 8;

        $i2 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int height>;

        $i3 = $i2 + 7;

        $i4 = $i3 / 8;

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: void decodePass(java.awt.image.WritableRaster,int,int,int,int,int,int)>($r1, 0, 0, 8, 8, $i5, $i4);

        $r2 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: java.awt.image.WritableRaster theTile>;

        $i6 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int width>;

        $i7 = $i6 + 3;

        $i11 = $i7 / 8;

        $i8 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int height>;

        $i9 = $i8 + 7;

        $i10 = $i9 / 8;

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: void decodePass(java.awt.image.WritableRaster,int,int,int,int,int,int)>($r2, 4, 0, 8, 8, $i11, $i10);

        $r3 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: java.awt.image.WritableRaster theTile>;

        $i12 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int width>;

        $i13 = $i12 + 3;

        $i17 = $i13 / 4;

        $i14 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int height>;

        $i15 = $i14 + 3;

        $i16 = $i15 / 8;

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: void decodePass(java.awt.image.WritableRaster,int,int,int,int,int,int)>($r3, 0, 4, 4, 8, $i17, $i16);

        $r4 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: java.awt.image.WritableRaster theTile>;

        $i18 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int width>;

        $i19 = $i18 + 1;

        $i23 = $i19 / 4;

        $i20 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int height>;

        $i21 = $i20 + 3;

        $i22 = $i21 / 4;

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: void decodePass(java.awt.image.WritableRaster,int,int,int,int,int,int)>($r4, 2, 0, 4, 4, $i23, $i22);

        $r5 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: java.awt.image.WritableRaster theTile>;

        $i24 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int width>;

        $i25 = $i24 + 1;

        $i29 = $i25 / 2;

        $i26 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int height>;

        $i27 = $i26 + 1;

        $i28 = $i27 / 4;

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: void decodePass(java.awt.image.WritableRaster,int,int,int,int,int,int)>($r5, 0, 2, 2, 4, $i29, $i28);

        $r6 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: java.awt.image.WritableRaster theTile>;

        $i30 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int width>;

        $i34 = $i30 / 2;

        $i31 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int height>;

        $i32 = $i31 + 1;

        $i33 = $i32 / 2;

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: void decodePass(java.awt.image.WritableRaster,int,int,int,int,int,int)>($r6, 1, 0, 2, 2, $i34, $i33);

        $r7 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: java.awt.image.WritableRaster theTile>;

        $i37 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int width>;

        $i35 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int height>;

        $i36 = $i35 / 2;

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGImage: void decodePass(java.awt.image.WritableRaster,int,int,int,int,int,int)>($r7, 0, 1, 1, 2, $i37, $i36);

     label2:
        return;
    }

    public java.awt.image.Raster getTile(int, int)
    {
        org.apache.batik.ext.awt.image.codec.png.PNGImage r2;
        int i0, i1;
        java.awt.image.WritableRaster $r3;
        java.lang.String $r0;
        java.lang.IllegalArgumentException $r1;

        r2 := @this: org.apache.batik.ext.awt.image.codec.png.PNGImage;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 != 0 goto label1;

        if i1 == 0 goto label2;

     label1:
        $r0 = staticinvoke <org.apache.batik.ext.awt.image.codec.util.PropertyUtil: java.lang.String getString(java.lang.String)>("PNGImageDecoder17");

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r1;

     label2:
        $r3 = r2.<org.apache.batik.ext.awt.image.codec.png.PNGImage: java.awt.image.WritableRaster theTile>;

        return $r3;
    }

    static void <clinit>()
    {
        int[] $r1, $r4, $r5, $r8, $r9, $r12, $r13, $r16, $r17, $r20, $r21, $r24, $r25, $r28, $r29, $r32, $r33, $r36, $r37, $r40, $r41, $r44, $r45, $r48;
        java.awt.image.ComponentColorModel $r2, $r6, $r10, $r14, $r18, $r22, $r26, $r30, $r34, $r38, $r42, $r46;
        java.lang.String[] $r0;
        java.awt.color.ColorSpace $r3, $r7, $r11, $r15, $r19, $r23, $r27, $r31, $r35, $r39, $r43, $r47;

        <org.apache.batik.ext.awt.image.codec.png.PNGImage: int POST_ADD_GRAY_TRANS_EXP> = 22;

        <org.apache.batik.ext.awt.image.codec.png.PNGImage: int POST_GRAY_LUT_ADD_TRANS_EXP> = 19;

        <org.apache.batik.ext.awt.image.codec.png.PNGImage: int POST_GAMMA_EXP> = 17;

        <org.apache.batik.ext.awt.image.codec.png.PNGImage: int POST_GRAY_ALPHA_EXP> = 16;

        <org.apache.batik.ext.awt.image.codec.png.PNGImage: int POST_EXP_MASK> = 16;

        <org.apache.batik.ext.awt.image.codec.png.PNGImage: int POST_REMOVE_RGB_TRANS> = 9;

        <org.apache.batik.ext.awt.image.codec.png.PNGImage: int POST_REMOVE_GRAY_TRANS> = 8;

        <org.apache.batik.ext.awt.image.codec.png.PNGImage: int POST_ADD_RGB_TRANS> = 7;

        <org.apache.batik.ext.awt.image.codec.png.PNGImage: int POST_ADD_GRAY_TRANS> = 6;

        <org.apache.batik.ext.awt.image.codec.png.PNGImage: int POST_PALETTE_TO_RGBA> = 5;

        <org.apache.batik.ext.awt.image.codec.png.PNGImage: int POST_PALETTE_TO_RGB> = 4;

        <org.apache.batik.ext.awt.image.codec.png.PNGImage: int POST_GRAY_LUT_ADD_TRANS> = 3;

        <org.apache.batik.ext.awt.image.codec.png.PNGImage: int POST_GRAY_LUT> = 2;

        <org.apache.batik.ext.awt.image.codec.png.PNGImage: int POST_GAMMA> = 1;

        <org.apache.batik.ext.awt.image.codec.png.PNGImage: int POST_NONE> = 0;

        <org.apache.batik.ext.awt.image.codec.png.PNGImage: int PNG_FILTER_PAETH> = 4;

        <org.apache.batik.ext.awt.image.codec.png.PNGImage: int PNG_FILTER_AVERAGE> = 3;

        <org.apache.batik.ext.awt.image.codec.png.PNGImage: int PNG_FILTER_UP> = 2;

        <org.apache.batik.ext.awt.image.codec.png.PNGImage: int PNG_FILTER_SUB> = 1;

        <org.apache.batik.ext.awt.image.codec.png.PNGImage: int PNG_FILTER_NONE> = 0;

        <org.apache.batik.ext.awt.image.codec.png.PNGImage: int PNG_COLOR_RGB_ALPHA> = 6;

        <org.apache.batik.ext.awt.image.codec.png.PNGImage: int PNG_COLOR_GRAY_ALPHA> = 4;

        <org.apache.batik.ext.awt.image.codec.png.PNGImage: int PNG_COLOR_PALETTE> = 3;

        <org.apache.batik.ext.awt.image.codec.png.PNGImage: int PNG_COLOR_RGB> = 2;

        <org.apache.batik.ext.awt.image.codec.png.PNGImage: int PNG_COLOR_GRAY> = 0;

        $r0 = newarray (java.lang.String)[7];

        $r0[0] = "Grayscale";

        $r0[1] = "Error";

        $r0[2] = "Truecolor";

        $r0[3] = "Index";

        $r0[4] = "Grayscale with alpha";

        $r0[5] = "Error";

        $r0[6] = "Truecolor with alpha";

        <org.apache.batik.ext.awt.image.codec.png.PNGImage: java.lang.String[] colorTypeNames> = $r0;

        $r1 = newarray (int)[1];

        $r1[0] = 8;

        <org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] GrayBits8> = $r1;

        $r2 = new java.awt.image.ComponentColorModel;

        $r3 = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1003);

        $r4 = <org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] GrayBits8>;

        specialinvoke $r2.<java.awt.image.ComponentColorModel: void <init>(java.awt.color.ColorSpace,int[],boolean,boolean,int,int)>($r3, $r4, 0, 0, 1, 0);

        <org.apache.batik.ext.awt.image.codec.png.PNGImage: java.awt.image.ComponentColorModel colorModelGray8> = $r2;

        $r5 = newarray (int)[2];

        $r5[0] = 8;

        $r5[1] = 8;

        <org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] GrayAlphaBits8> = $r5;

        $r6 = new java.awt.image.ComponentColorModel;

        $r7 = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1003);

        $r8 = <org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] GrayAlphaBits8>;

        specialinvoke $r6.<java.awt.image.ComponentColorModel: void <init>(java.awt.color.ColorSpace,int[],boolean,boolean,int,int)>($r7, $r8, 1, 0, 3, 0);

        <org.apache.batik.ext.awt.image.codec.png.PNGImage: java.awt.image.ComponentColorModel colorModelGrayAlpha8> = $r6;

        $r9 = newarray (int)[1];

        $r9[0] = 16;

        <org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] GrayBits16> = $r9;

        $r10 = new java.awt.image.ComponentColorModel;

        $r11 = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1003);

        $r12 = <org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] GrayBits16>;

        specialinvoke $r10.<java.awt.image.ComponentColorModel: void <init>(java.awt.color.ColorSpace,int[],boolean,boolean,int,int)>($r11, $r12, 0, 0, 1, 1);

        <org.apache.batik.ext.awt.image.codec.png.PNGImage: java.awt.image.ComponentColorModel colorModelGray16> = $r10;

        $r13 = newarray (int)[2];

        $r13[0] = 16;

        $r13[1] = 16;

        <org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] GrayAlphaBits16> = $r13;

        $r14 = new java.awt.image.ComponentColorModel;

        $r15 = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1003);

        $r16 = <org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] GrayAlphaBits16>;

        specialinvoke $r14.<java.awt.image.ComponentColorModel: void <init>(java.awt.color.ColorSpace,int[],boolean,boolean,int,int)>($r15, $r16, 1, 0, 3, 1);

        <org.apache.batik.ext.awt.image.codec.png.PNGImage: java.awt.image.ComponentColorModel colorModelGrayAlpha16> = $r14;

        $r17 = newarray (int)[1];

        $r17[0] = 32;

        <org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] GrayBits32> = $r17;

        $r18 = new java.awt.image.ComponentColorModel;

        $r19 = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1003);

        $r20 = <org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] GrayBits32>;

        specialinvoke $r18.<java.awt.image.ComponentColorModel: void <init>(java.awt.color.ColorSpace,int[],boolean,boolean,int,int)>($r19, $r20, 0, 0, 1, 3);

        <org.apache.batik.ext.awt.image.codec.png.PNGImage: java.awt.image.ComponentColorModel colorModelGray32> = $r18;

        $r21 = newarray (int)[2];

        $r21[0] = 32;

        $r21[1] = 32;

        <org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] GrayAlphaBits32> = $r21;

        $r22 = new java.awt.image.ComponentColorModel;

        $r23 = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1003);

        $r24 = <org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] GrayAlphaBits32>;

        specialinvoke $r22.<java.awt.image.ComponentColorModel: void <init>(java.awt.color.ColorSpace,int[],boolean,boolean,int,int)>($r23, $r24, 1, 0, 3, 3);

        <org.apache.batik.ext.awt.image.codec.png.PNGImage: java.awt.image.ComponentColorModel colorModelGrayAlpha32> = $r22;

        $r25 = newarray (int)[3];

        $r25[0] = 8;

        $r25[1] = 8;

        $r25[2] = 8;

        <org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] RGBBits8> = $r25;

        $r26 = new java.awt.image.ComponentColorModel;

        $r27 = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1000);

        $r28 = <org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] RGBBits8>;

        specialinvoke $r26.<java.awt.image.ComponentColorModel: void <init>(java.awt.color.ColorSpace,int[],boolean,boolean,int,int)>($r27, $r28, 0, 0, 1, 0);

        <org.apache.batik.ext.awt.image.codec.png.PNGImage: java.awt.image.ComponentColorModel colorModelRGB8> = $r26;

        $r29 = newarray (int)[4];

        $r29[0] = 8;

        $r29[1] = 8;

        $r29[2] = 8;

        $r29[3] = 8;

        <org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] RGBABits8> = $r29;

        $r30 = new java.awt.image.ComponentColorModel;

        $r31 = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1000);

        $r32 = <org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] RGBABits8>;

        specialinvoke $r30.<java.awt.image.ComponentColorModel: void <init>(java.awt.color.ColorSpace,int[],boolean,boolean,int,int)>($r31, $r32, 1, 0, 3, 0);

        <org.apache.batik.ext.awt.image.codec.png.PNGImage: java.awt.image.ComponentColorModel colorModelRGBA8> = $r30;

        $r33 = newarray (int)[3];

        $r33[0] = 16;

        $r33[1] = 16;

        $r33[2] = 16;

        <org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] RGBBits16> = $r33;

        $r34 = new java.awt.image.ComponentColorModel;

        $r35 = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1000);

        $r36 = <org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] RGBBits16>;

        specialinvoke $r34.<java.awt.image.ComponentColorModel: void <init>(java.awt.color.ColorSpace,int[],boolean,boolean,int,int)>($r35, $r36, 0, 0, 1, 1);

        <org.apache.batik.ext.awt.image.codec.png.PNGImage: java.awt.image.ComponentColorModel colorModelRGB16> = $r34;

        $r37 = newarray (int)[4];

        $r37[0] = 16;

        $r37[1] = 16;

        $r37[2] = 16;

        $r37[3] = 16;

        <org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] RGBABits16> = $r37;

        $r38 = new java.awt.image.ComponentColorModel;

        $r39 = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1000);

        $r40 = <org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] RGBABits16>;

        specialinvoke $r38.<java.awt.image.ComponentColorModel: void <init>(java.awt.color.ColorSpace,int[],boolean,boolean,int,int)>($r39, $r40, 1, 0, 3, 1);

        <org.apache.batik.ext.awt.image.codec.png.PNGImage: java.awt.image.ComponentColorModel colorModelRGBA16> = $r38;

        $r41 = newarray (int)[3];

        $r41[0] = 32;

        $r41[1] = 32;

        $r41[2] = 32;

        <org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] RGBBits32> = $r41;

        $r42 = new java.awt.image.ComponentColorModel;

        $r43 = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1000);

        $r44 = <org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] RGBBits32>;

        specialinvoke $r42.<java.awt.image.ComponentColorModel: void <init>(java.awt.color.ColorSpace,int[],boolean,boolean,int,int)>($r43, $r44, 0, 0, 1, 3);

        <org.apache.batik.ext.awt.image.codec.png.PNGImage: java.awt.image.ComponentColorModel colorModelRGB32> = $r42;

        $r45 = newarray (int)[4];

        $r45[0] = 32;

        $r45[1] = 32;

        $r45[2] = 32;

        $r45[3] = 32;

        <org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] RGBABits32> = $r45;

        $r46 = new java.awt.image.ComponentColorModel;

        $r47 = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1000);

        $r48 = <org.apache.batik.ext.awt.image.codec.png.PNGImage: int[] RGBABits32>;

        specialinvoke $r46.<java.awt.image.ComponentColorModel: void <init>(java.awt.color.ColorSpace,int[],boolean,boolean,int,int)>($r47, $r48, 1, 0, 3, 3);

        <org.apache.batik.ext.awt.image.codec.png.PNGImage: java.awt.image.ComponentColorModel colorModelRGBA32> = $r46;

        return;
    }
}
